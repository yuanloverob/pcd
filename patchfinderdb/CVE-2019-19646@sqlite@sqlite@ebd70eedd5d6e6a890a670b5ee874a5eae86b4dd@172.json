{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c1970fceeecef6da620c37cdd0755f31af646a7",
      "candidate_info": {
        "commit_hash": "3c1970fceeecef6da620c37cdd0755f31af646a7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c1970fceeecef6da620c37cdd0755f31af646a7",
        "files": [
          "ext/rtree/rtreefuzz001.test",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Update some corruption test cases to take [724f4df9c] into account.\n\nFossilOrigin-Name: 927cd7b4c52fae665e57fb6039c6829e339cff5ad5c405800cac3ee149ef5be1",
        "before_after_code_files": [
          "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test": [
          "File: ext/rtree/rtreefuzz001.test -> ext/rtree/rtreefuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "465: | end c1b.db",
          "466:   }]",
          "467:   catchsql {",
          "468:      SELECT rtreecheck('t1');",
          "469:   }",
          "470: } {1 {SQL logic error}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:      PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1040: |   2880: ff ff ff 06 00 00 00 0c 00 00 00 01 00 00 00 0b   ................",
          "1041: |   2896: 00 00 00 00 00 00 00 02 40 00 00 00 00 00 00 00   ........@.......",
          "1042: | end crash-2e81f5dce5cbd4.db}]",
          "1043:   catchsql {UPDATE t1 SET ex= ex ISNULL}",
          "1044: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1044:   execsql { PRAGMA writable_schema = 1;}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c44b02f1479cec61554800702a3c1d806e4ee64b41ba2af17320f62794a02fe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2147: }]} {}",
          "2149: do_execsql_test 14.1 {",
          "2150:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<10)",
          "2151:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "2152: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2150:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3049: }]} {}",
          "3051: do_catchsql_test 19.1 {",
          "3052:   SELECT rowid,a,c,snippet(t1,85101090932165,-1,10) FROM t1 WHERE a MATCH 'rtree';",
          "3053: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3053:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3250: }]} {}",
          "3252: do_execsql_test 20.1 {",
          "3253:   BEGIN;",
          "3254:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<10)",
          "3255:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3255:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3472: | end crash-18cc014e42e828.db",
          "3473: }]} {}",
          "3476: do_catchsql_test 21.1 {",
          "3477:   SELECT offsets(t1) FROM t1 WHERE t1 MATCH 'R*';",
          "3478: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "3475: breakpoint",
          "",
          "[Added Lines]",
          "3479:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3694: }]} {}",
          "3696: do_catchsql_test 22.1 {",
          "3697:   SELECT snippet(t1,'', '', '--',-1,01)==0",
          "3698:     FROM t1 WHERE a MATCH 'rtree OR json1rtree OR json1';",
          "3699: } {0 {0 0 0 0 0 0 0}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3700:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3913: }]} {}",
          "3915: do_catchsql_test 23.1 {",
          "3916:   SELECT 'FyzLy'FROM t1 WHERE t1 MATCH 'j';",
          "3917: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3920:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4131: }]} {}",
          "4133: do_catchsql_test 24.1 {",
          "4134:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT '4hE'+x FROM c WHERE x<72)",
          "4135:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4136: } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4139:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4374: }]} {}",
          "4376: do_catchsql_test 25.1 {",
          "4377:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x%1 FROM c WHERE x<599237)",
          "4378:     INSERT INTO t1( a ) SELECT randomblob(3000) FROM t2 ;",
          "4379: } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4383:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4608: }]} {}",
          "4610: do_execsql_test 26.1 {",
          "4611:   SELECT count(*) FROM (",
          "4612:     SELECT t1, (t1) FROM t1 WHERE b MATCH 'x'",
          "4613:   )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4618:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4826: }]} {}",
          "4828: do_catchsql_test 27.2 {",
          "4829:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x GLOB 2.16770 FROM x)",
          "4830:     INSERT INTO t1(a) SELECT randomblob(3000) FROM t2 ;",
          "4831: } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4837:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5058: }]} {}",
          "5060: do_catchsql_test 28.1 {",
          "5061:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "5062:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "5063: } {0 {}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5070:   PRAGMA writable_schema = 1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5312: }]} {}",
          "5314: do_catchsql_test 29.1 {",
          "5315:   INSERT INTO t1(a) SELECT X'819192E578DE3F';",
          "5316:   UPDATE t1 SET b=quote(zeroblob(current_date)) WHERE t1 MATCH 't*';",
          "5317:   INSERT INTO t1(b) VALUES(x'78');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5325:   PRAGMA writable_schema = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f76ccb7d5486a2664127dec004dd52835f600a81",
      "candidate_info": {
        "commit_hash": "f76ccb7d5486a2664127dec004dd52835f600a81",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f76ccb7d5486a2664127dec004dd52835f600a81",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Remove an unreachable branch in the NULLS LAST logic of RANGE window functions.\n\nFossilOrigin-Name: 47cd634c98b502d40a493455ba6d73cbd0dae74944f9cf06fcbcd025f4b49d6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 616f5663b3dbd0929128c0990fc6d8bba1513c7ae196b87c450ac0b3b3203ecd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1908:     switch( op ){",
          "1909:       case OP_Ge: sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl); break;",
          "1910:       case OP_Gt:",
          "1913:         break;",
          "1917:         break;",
          "1919:     }",
          "1920:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1921:     sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Removed Lines]",
          "1911:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl);",
          "1912:         VdbeCoverage(v);",
          "1914:       case OP_Le:",
          "1915:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl);",
          "1916:         VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1911:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl); VdbeCoverage(v);",
          "1913:       default:",
          "1914:         assert( op==OP_Le );",
          "1915:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfcecdfea8e0c4260109a38bb0f5d14b4b8cc9ca",
      "candidate_info": {
        "commit_hash": "dfcecdfea8e0c4260109a38bb0f5d14b4b8cc9ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfcecdfea8e0c4260109a38bb0f5d14b4b8cc9ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Earlier detections of errors in the byte-offset-to-cell-content integer at offset 5 in the header of a btree page.\n\nFossilOrigin-Name: a0819086a521fb0ca4ffd12f959b168a89ea2e30a2844bbbd39831b2b9ecf29b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3c75605b4652ae88659465d832953ac9d467369f9cb417f73b3d8599ec60b18b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1630:   top = get2byte(&data[hdr+5]);",
          "1632:   if( gap>top ){",
          "1634:       top = 65536;",
          "1635:     }else{",
          "1636:       return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1633:     if( top==0 && pPage->pBt->usableSize==65536 ){",
          "",
          "[Added Lines]",
          "1633:     if( top==0 && ALWAYS(pPage->pBt->usableSize==65536) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1929:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1930:   }",
          "1931:   pPage->nFree = (u16)(nFree - iCellFirst);",
          "",
          "[Removed Lines]",
          "1928:   if( nFree>usableSize ){",
          "",
          "[Added Lines]",
          "1928:   if( nFree>usableSize || nFree<iCellFirst ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8068:     assert( sz<=pBt->maxLocal+23 );",
          "8069:     assert( iOvflSpace <= (int)pBt->pageSize );",
          "8070:     insertCell(pParent, nxDiv+i, pCell, sz, pTemp, pNew->pgno, &rc);",
          "8072:     assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "8073:   }",
          "",
          "[Removed Lines]",
          "8071:     if( rc!=SQLITE_OK ) goto balance_cleanup;",
          "",
          "[Added Lines]",
          "8071:     if( NEVER(rc!=SQLITE_OK) ) goto balance_cleanup;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ff9407198073f488d41782d3a97176018ded973",
      "candidate_info": {
        "commit_hash": "1ff9407198073f488d41782d3a97176018ded973",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1ff9407198073f488d41782d3a97176018ded973",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/without_rowid7.test"
        ],
        "message": "Fix problems with duplicate fields in the PRIMARY KEYs of WITHOUT ROWID tables.\n\nFossilOrigin-Name: bd9a47a3a2997bfbf9c8a11c5b7196e362974054e58a2fe701778b1580264de8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/without_rowid7.test||test/without_rowid7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fe014288ac03cdf0dc5410b7d45cad4768759b52746c0a22bce2fc03779c5d5a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1831:   Index *pIdx;",
          "1832:   Index *pPk;",
          "1833:   int nPk;",
          "1834:   int i, j;",
          "1835:   sqlite3 *db = pParse->db;",
          "1836:   Vdbe *v = pParse->pVdbe;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1834:   int nExtra;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1873:                        SQLITE_IDXTYPE_PRIMARYKEY);",
          "1874:     if( db->mallocFailed || pParse->nErr ) return;",
          "1875:     pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1876:   }else{",
          "1877:     pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1878:     assert( pPk!=0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1877:     assert( pPk->nKeyCol==1 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1887:         pPk->nColumn--;",
          "1888:       }else{",
          "1889:         testcase( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) );",
          "1890:         pPk->aiColumn[j++] = pPk->aiColumn[i];",
          "1891:       }",
          "1892:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1892:         pPk->azColl[j] = pPk->azColl[i];",
          "1893:         pPk->aSortOrder[j] = pPk->aSortOrder[i];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1895:   assert( pPk!=0 );",
          "1896:   pPk->isCovering = 1;",
          "1897:   if( !db->init.imposterTable ) pPk->uniqNotNull = 1;",
          "",
          "[Removed Lines]",
          "1898:   nPk = pPk->nKeyCol;",
          "",
          "[Added Lines]",
          "1902:   nPk = pPk->nColumn = pPk->nKeyCol;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1957:     }",
          "1962:   }",
          "1963:   recomputeColumnsNotIndexed(pPk);",
          "1964: }",
          "",
          "[Removed Lines]",
          "1948:   if( nPk<pTab->nCol ){",
          "1949:     if( resizeIndexObject(db, pPk, pTab->nCol) ) return;",
          "1950:     for(i=0, j=nPk; i<pTab->nCol; i++){",
          "1951:       if( !hasColumn(pPk->aiColumn, j, i) ){",
          "1952:         assert( j<pPk->nColumn );",
          "1953:         pPk->aiColumn[j] = i;",
          "1954:         pPk->azColl[j] = sqlite3StrBINARY;",
          "1955:         j++;",
          "1956:       }",
          "1958:     assert( pPk->nColumn==j );",
          "1959:     assert( pTab->nCol==j );",
          "1960:   }else{",
          "1961:     pPk->nColumn = pTab->nCol;",
          "",
          "[Added Lines]",
          "1952:   nExtra = 0;",
          "1953:   for(i=0; i<pTab->nCol; i++){",
          "1954:     if( !hasColumn(pPk->aiColumn, nPk, i) ) nExtra++;",
          "1955:   }",
          "1956:   if( resizeIndexObject(db, pPk, nPk+nExtra) ) return;",
          "1957:   for(i=0, j=nPk; i<pTab->nCol; i++){",
          "1958:     if( !hasColumn(pPk->aiColumn, j, i) ){",
          "1959:       assert( j<pPk->nColumn );",
          "1960:       pPk->aiColumn[j] = i;",
          "1961:       pPk->azColl[j] = sqlite3StrBINARY;",
          "1962:       j++;",
          "1965:   assert( pPk->nColumn==j );",
          "1966:   assert( pTab->nCol<=j );",
          "",
          "---------------"
        ],
        "test/without_rowid7.test||test/without_rowid7.test": [
          "File: test/without_rowid7.test -> test/without_rowid7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 17",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix without_rowid7",
          "18: do_execsql_test 1.0 {",
          "19:   CREATE TABLE t1(a, b COLLATE nocase, PRIMARY KEY(a, a, b)) WITHOUT ROWID;",
          "20: }",
          "22: do_catchsql_test 1.1 {",
          "23:   INSERT INTO t1 VALUES(1, 'one'), (1, 'ONE');",
          "24: } {1 {UNIQUE constraint failed: t1.a, t1.b}}",
          "27: do_execsql_test 2.0 {",
          "28:   CREATE TABLE t2(a, b, PRIMARY KEY(a, a COLLATE nocase, a)) WITHOUT ROWID;",
          "29: }",
          "31: do_execsql_test 2.1 {",
          "32:   INSERT INTO t2 VALUES(1, 'one');",
          "33:   SELECT b FROM t2;",
          "34: } {one}",
          "37: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b0b3a95d025430c83563ee390656901734f9988",
      "candidate_info": {
        "commit_hash": "0b0b3a95d025430c83563ee390656901734f9988",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0b0b3a95d025430c83563ee390656901734f9988",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/pragma.c",
          "src/sqliteInt.h"
        ],
        "message": "In the Table object, change the nVCol field to nNVCol - the number of non-virtual columns, as that is the quantity that we need most.\n\nFossilOrigin-Name: 4ad66af04a654d92711d2d056ce8f35cd21eac4b99fb8d78be1a314620b6d29e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61b4459ae6a6cc182c11abbc8b1dd629f77beb088d7ccad5e563d8d4769056df",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:   int i;",
          "902:   i16 n;",
          "903:   assert( iCol<pTab->nCol );",
          "905:   for(i=0, n=0; i<iCol; i++){",
          "906:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "907:   }",
          "",
          "[Removed Lines]",
          "904:   if( pTab->nVCol==0 ) return iCol;",
          "",
          "[Added Lines]",
          "904:   if( (pTab->tabFlags & TF_HasVirtual)==0 ) return iCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1564:       goto generated_error;",
          "1565:     }",
          "1566:   }",
          "1568:   pCol->colFlags |= eType;",
          "1569:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1570:   assert( TF_HasStored==COLFLAG_STORED );",
          "",
          "[Removed Lines]",
          "1567:   if( eType==COLFLAG_VIRTUAL ) pTab->nVCol++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2127:   assert( !db->mallocFailed );",
          "2128:   p = pParse->pNewTable;",
          "2129:   if( p==0 ) return;",
          "2131:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "2132:     p->tabFlags |= TF_Shadow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2129:   p->nNVCol = p->nCol;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2183:   if( p->tabFlags & (TF_HasVirtual|TF_HasStored) ){",
          "2184:     int ii;",
          "2185:     for(ii=0; ii<p->nCol; ii++){",
          "2187:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2188:                                     p->aCol[ii].pDflt, 0);",
          "2189:       }",
          "",
          "[Removed Lines]",
          "2186:       if( (p->aCol[ii].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "",
          "[Added Lines]",
          "2186:       u32 colFlags = p->aCol[ii].colFlags;",
          "2187:       if( (colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2188:         if( colFlags & COLFLAG_VIRTUAL ){",
          "2189:           p->nNVCol--;",
          "2190:           assert( p->nNVCol>=0 );",
          "2191:         }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3TableLock(pParse, iDb, pTab->tnum,",
          "38:                    (opcode==OP_OpenWrite)?1:0, pTab->zName);",
          "39:   if( HasRowid(pTab) ){",
          "42:     VdbeComment((v, \"%s\", pTab->zName));",
          "43:   }else{",
          "44:     Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "",
          "[Removed Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb,",
          "41:                          pTab->nCol - pTab->nVCol);",
          "",
          "[Added Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb, pTab->nNVCol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1934:   if( HasRowid(pTab) ){",
          "1935:     int regRec = aRegIdx[ix];",
          "1938:     sqlite3SetMakeRecordP5(v, pTab);",
          "1939:     if( !bAffinityDone ){",
          "1940:       sqlite3TableAffinity(v, pTab, 0);",
          "",
          "[Removed Lines]",
          "1936:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1,",
          "1937:                       pTab->nCol-pTab->nVCol, regRec);",
          "",
          "[Added Lines]",
          "1935:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1, pTab->nNVCol, regRec);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:         loopTop = sqlite3VdbeAddOp2(v, OP_AddImm, 7, 1);",
          "1587:         if( !isQuick ){",
          "1590:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1591:         }",
          "",
          "[Removed Lines]",
          "1589:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nCol-pTab->nVCol-1,3);",
          "",
          "[Added Lines]",
          "1589:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nNVCol-1,3);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    }
  ]
}