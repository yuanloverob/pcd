{
  "cve_id": "CVE-2021-29572",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation(https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer). The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb",
  "patch_info": {
    "commit_hash": "f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb",
    "files": [
      "tensorflow/core/kernels/sdca_internal.cc"
    ],
    "message": "Add several missing validations in SDCA\n\nPiperOrigin-RevId: 372172877\nChange-Id: Id366da962432e18dcbfac847d11e98488bebb70a",
    "before_after_code_files": [
      "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc": [
      "File: tensorflow/core/kernels/sdca_internal.cc -> tensorflow/core/kernels/sdca_internal.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "99:   OpInputList sparse_weights_inputs;",
      "100:   TF_RETURN_IF_ERROR(",
      "101:       context->input_list(\"sparse_weights\", &sparse_weights_inputs));",
      "102:   OpInputList dense_weights_inputs;",
      "103:   TF_RETURN_IF_ERROR(",
      "104:       context->input_list(\"dense_weights\", &dense_weights_inputs));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102:   if (sparse_indices_inputs.size() != sparse_weights_inputs.size())",
      "103:     return errors::InvalidArgument(",
      "104:         \"sparse_indices and sparse_weights must have the same length, got \",",
      "105:         sparse_indices_inputs.size(), \" and \", sparse_weights_inputs.size());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:   OpOutputList sparse_weights_outputs;",
      "107:   TF_RETURN_IF_ERROR(context->output_list(\"out_delta_sparse_weights\",",
      "108:                                           &sparse_weights_outputs));",
      "110:   OpOutputList dense_weights_outputs;",
      "111:   TF_RETURN_IF_ERROR(",
      "112:       context->output_list(\"out_delta_dense_weights\", &dense_weights_outputs));",
      "114:   for (int i = 0; i < sparse_weights_inputs.size(); ++i) {",
      "115:     Tensor* delta_t;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "113:   if (sparse_weights_outputs.size() != sparse_weights_inputs.size())",
      "114:     return errors::InvalidArgument(",
      "115:         \"out_delta_sparse_weights and sparse_weights must have the same \"",
      "116:         \"length, got \",",
      "117:         sparse_weights_outputs.size(), \" and \", sparse_weights_inputs.size());",
      "122:   if (dense_weights_outputs.size() != dense_weights_inputs.size())",
      "123:     return errors::InvalidArgument(",
      "124:         \"out_delta_dense_weights and dense_weights must have the same length, \"",
      "125:         \"got \",",
      "126:         dense_weights_outputs.size(), \" and \", dense_weights_inputs.size());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "327:   OpInputList sparse_example_indices_inputs;",
      "328:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_example_indices\",",
      "329:                                          &sparse_example_indices_inputs));",
      "330:   OpInputList sparse_feature_indices_inputs;",
      "331:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_indices\",",
      "332:                                          &sparse_feature_indices_inputs));",
      "333:   OpInputList sparse_feature_values_inputs;",
      "334:   if (num_sparse_features_with_values > 0) {",
      "335:     TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_values\",",
      "336:                                            &sparse_feature_values_inputs));",
      "337:   }",
      "339:   const Tensor* example_weights_t;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "344:   if (sparse_example_indices_inputs.size() != num_sparse_features)",
      "345:     return errors::InvalidArgument(",
      "346:         \"Expected \", num_sparse_features,",
      "347:         \" tensors in sparse_example_indices but got \",",
      "348:         sparse_example_indices_inputs.size());",
      "352:   if (sparse_feature_indices_inputs.size() != num_sparse_features)",
      "353:     return errors::InvalidArgument(",
      "354:         \"Expected \", num_sparse_features,",
      "355:         \" tensors in sparse_feature_indices but got \",",
      "356:         sparse_feature_indices_inputs.size());",
      "361:     if (sparse_feature_values_inputs.size() != num_sparse_features_with_values)",
      "362:       return errors::InvalidArgument(",
      "363:           \"Expected \", num_sparse_features_with_values,",
      "364:           \" tensors in sparse_feature_values but got \",",
      "365:           sparse_feature_values_inputs.size());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "400:           sparse_example_indices_inputs[i].template flat<int64>();",
      "401:       auto feature_indices =",
      "402:           sparse_feature_indices_inputs[i].template flat<int64>();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "432:       if (example_indices.size() != feature_indices.size()) {",
      "433:         mutex_lock l(mu);",
      "434:         result = errors::InvalidArgument(",
      "435:             \"Found mismatched example_indices and feature_indices [\",",
      "436:             example_indices, \"] vs [\", feature_indices, \"]\");",
      "437:         return;",
      "438:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "69aa87ea033e88575d466358f324e0104ba48d82",
      "candidate_info": {
        "commit_hash": "69aa87ea033e88575d466358f324e0104ba48d82",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/69aa87ea033e88575d466358f324e0104ba48d82",
        "files": [
          "tensorflow/core/kernels/sdca_internal.cc"
        ],
        "message": "Add several missing validations in SDCA\n\nPiperOrigin-RevId: 372172877\nChange-Id: Id366da962432e18dcbfac847d11e98488bebb70a",
        "before_after_code_files": [
          "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc": [
          "File: tensorflow/core/kernels/sdca_internal.cc -> tensorflow/core/kernels/sdca_internal.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   OpInputList sparse_weights_inputs;",
          "100:   TF_RETURN_IF_ERROR(",
          "101:       context->input_list(\"sparse_weights\", &sparse_weights_inputs));",
          "102:   OpInputList dense_weights_inputs;",
          "103:   TF_RETURN_IF_ERROR(",
          "104:       context->input_list(\"dense_weights\", &dense_weights_inputs));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   if (sparse_indices_inputs.size() != sparse_weights_inputs.size())",
          "103:     return errors::InvalidArgument(",
          "104:         \"sparse_indices and sparse_weights must have the same length, got \",",
          "105:         sparse_indices_inputs.size(), \" and \", sparse_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   OpOutputList sparse_weights_outputs;",
          "107:   TF_RETURN_IF_ERROR(context->output_list(\"out_delta_sparse_weights\",",
          "108:                                           &sparse_weights_outputs));",
          "110:   OpOutputList dense_weights_outputs;",
          "111:   TF_RETURN_IF_ERROR(",
          "112:       context->output_list(\"out_delta_dense_weights\", &dense_weights_outputs));",
          "114:   for (int i = 0; i < sparse_weights_inputs.size(); ++i) {",
          "115:     Tensor* delta_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   if (sparse_weights_outputs.size() != sparse_weights_inputs.size())",
          "114:     return errors::InvalidArgument(",
          "115:         \"out_delta_sparse_weights and sparse_weights must have the same \"",
          "116:         \"length, got \",",
          "117:         sparse_weights_outputs.size(), \" and \", sparse_weights_inputs.size());",
          "122:   if (dense_weights_outputs.size() != dense_weights_inputs.size())",
          "123:     return errors::InvalidArgument(",
          "124:         \"out_delta_dense_weights and dense_weights must have the same length, \"",
          "125:         \"got \",",
          "126:         dense_weights_outputs.size(), \" and \", dense_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:   OpInputList sparse_example_indices_inputs;",
          "328:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_example_indices\",",
          "329:                                          &sparse_example_indices_inputs));",
          "330:   OpInputList sparse_feature_indices_inputs;",
          "331:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_indices\",",
          "332:                                          &sparse_feature_indices_inputs));",
          "333:   OpInputList sparse_feature_values_inputs;",
          "334:   if (num_sparse_features_with_values > 0) {",
          "335:     TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_values\",",
          "336:                                            &sparse_feature_values_inputs));",
          "337:   }",
          "339:   const Tensor* example_weights_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:   if (sparse_example_indices_inputs.size() != num_sparse_features)",
          "345:     return errors::InvalidArgument(",
          "346:         \"Expected \", num_sparse_features,",
          "347:         \" tensors in sparse_example_indices but got \",",
          "348:         sparse_example_indices_inputs.size());",
          "352:   if (sparse_feature_indices_inputs.size() != num_sparse_features)",
          "353:     return errors::InvalidArgument(",
          "354:         \"Expected \", num_sparse_features,",
          "355:         \" tensors in sparse_feature_indices but got \",",
          "356:         sparse_feature_indices_inputs.size());",
          "361:     if (sparse_feature_values_inputs.size() != num_sparse_features_with_values)",
          "362:       return errors::InvalidArgument(",
          "363:           \"Expected \", num_sparse_features_with_values,",
          "364:           \" tensors in sparse_feature_values but got \",",
          "365:           sparse_feature_values_inputs.size());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:           sparse_example_indices_inputs[i].template flat<int64>();",
          "401:       auto feature_indices =",
          "402:           sparse_feature_indices_inputs[i].template flat<int64>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:       if (example_indices.size() != feature_indices.size()) {",
          "433:         mutex_lock l(mu);",
          "434:         result = errors::InvalidArgument(",
          "435:             \"Found mismatched example_indices and feature_indices [\",",
          "436:             example_indices, \"] vs [\", feature_indices, \"]\");",
          "437:         return;",
          "438:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6cecd72e997a7ead50a802835f9447ca028b6a8",
      "candidate_info": {
        "commit_hash": "b6cecd72e997a7ead50a802835f9447ca028b6a8",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b6cecd72e997a7ead50a802835f9447ca028b6a8",
        "files": [
          "tensorflow/core/kernels/sdca_internal.cc"
        ],
        "message": "Add several missing validations in SDCA\n\nPiperOrigin-RevId: 372172877\nChange-Id: Id366da962432e18dcbfac847d11e98488bebb70a",
        "before_after_code_files": [
          "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc": [
          "File: tensorflow/core/kernels/sdca_internal.cc -> tensorflow/core/kernels/sdca_internal.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   OpInputList sparse_weights_inputs;",
          "100:   TF_RETURN_IF_ERROR(",
          "101:       context->input_list(\"sparse_weights\", &sparse_weights_inputs));",
          "102:   OpInputList dense_weights_inputs;",
          "103:   TF_RETURN_IF_ERROR(",
          "104:       context->input_list(\"dense_weights\", &dense_weights_inputs));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   if (sparse_indices_inputs.size() != sparse_weights_inputs.size())",
          "103:     return errors::InvalidArgument(",
          "104:         \"sparse_indices and sparse_weights must have the same length, got \",",
          "105:         sparse_indices_inputs.size(), \" and \", sparse_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   OpOutputList sparse_weights_outputs;",
          "107:   TF_RETURN_IF_ERROR(context->output_list(\"out_delta_sparse_weights\",",
          "108:                                           &sparse_weights_outputs));",
          "110:   OpOutputList dense_weights_outputs;",
          "111:   TF_RETURN_IF_ERROR(",
          "112:       context->output_list(\"out_delta_dense_weights\", &dense_weights_outputs));",
          "114:   for (int i = 0; i < sparse_weights_inputs.size(); ++i) {",
          "115:     Tensor* delta_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   if (sparse_weights_outputs.size() != sparse_weights_inputs.size())",
          "114:     return errors::InvalidArgument(",
          "115:         \"out_delta_sparse_weights and sparse_weights must have the same \"",
          "116:         \"length, got \",",
          "117:         sparse_weights_outputs.size(), \" and \", sparse_weights_inputs.size());",
          "122:   if (dense_weights_outputs.size() != dense_weights_inputs.size())",
          "123:     return errors::InvalidArgument(",
          "124:         \"out_delta_dense_weights and dense_weights must have the same length, \"",
          "125:         \"got \",",
          "126:         dense_weights_outputs.size(), \" and \", dense_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:   OpInputList sparse_example_indices_inputs;",
          "328:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_example_indices\",",
          "329:                                          &sparse_example_indices_inputs));",
          "330:   OpInputList sparse_feature_indices_inputs;",
          "331:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_indices\",",
          "332:                                          &sparse_feature_indices_inputs));",
          "333:   OpInputList sparse_feature_values_inputs;",
          "334:   if (num_sparse_features_with_values > 0) {",
          "335:     TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_values\",",
          "336:                                            &sparse_feature_values_inputs));",
          "337:   }",
          "339:   const Tensor* example_weights_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:   if (sparse_example_indices_inputs.size() != num_sparse_features)",
          "345:     return errors::InvalidArgument(",
          "346:         \"Expected \", num_sparse_features,",
          "347:         \" tensors in sparse_example_indices but got \",",
          "348:         sparse_example_indices_inputs.size());",
          "352:   if (sparse_feature_indices_inputs.size() != num_sparse_features)",
          "353:     return errors::InvalidArgument(",
          "354:         \"Expected \", num_sparse_features,",
          "355:         \" tensors in sparse_feature_indices but got \",",
          "356:         sparse_feature_indices_inputs.size());",
          "361:     if (sparse_feature_values_inputs.size() != num_sparse_features_with_values)",
          "362:       return errors::InvalidArgument(",
          "363:           \"Expected \", num_sparse_features_with_values,",
          "364:           \" tensors in sparse_feature_values but got \",",
          "365:           sparse_feature_values_inputs.size());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:           sparse_example_indices_inputs[i].template flat<int64>();",
          "401:       auto feature_indices =",
          "402:           sparse_feature_indices_inputs[i].template flat<int64>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:       if (example_indices.size() != feature_indices.size()) {",
          "433:         mutex_lock l(mu);",
          "434:         result = errors::InvalidArgument(",
          "435:             \"Found mismatched example_indices and feature_indices [\",",
          "436:             example_indices, \"] vs [\", feature_indices, \"]\");",
          "437:         return;",
          "438:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9860ef2bfcfaedec39b55f0d06b317c7d33c290e",
      "candidate_info": {
        "commit_hash": "9860ef2bfcfaedec39b55f0d06b317c7d33c290e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9860ef2bfcfaedec39b55f0d06b317c7d33c290e",
        "files": [
          "tensorflow/core/kernels/sdca_internal.cc"
        ],
        "message": "Add several missing validations in SDCA\n\nPiperOrigin-RevId: 372172877\nChange-Id: Id366da962432e18dcbfac847d11e98488bebb70a",
        "before_after_code_files": [
          "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc": [
          "File: tensorflow/core/kernels/sdca_internal.cc -> tensorflow/core/kernels/sdca_internal.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   OpInputList sparse_weights_inputs;",
          "100:   TF_RETURN_IF_ERROR(",
          "101:       context->input_list(\"sparse_weights\", &sparse_weights_inputs));",
          "102:   OpInputList dense_weights_inputs;",
          "103:   TF_RETURN_IF_ERROR(",
          "104:       context->input_list(\"dense_weights\", &dense_weights_inputs));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   if (sparse_indices_inputs.size() != sparse_weights_inputs.size())",
          "103:     return errors::InvalidArgument(",
          "104:         \"sparse_indices and sparse_weights must have the same length, got \",",
          "105:         sparse_indices_inputs.size(), \" and \", sparse_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   OpOutputList sparse_weights_outputs;",
          "107:   TF_RETURN_IF_ERROR(context->output_list(\"out_delta_sparse_weights\",",
          "108:                                           &sparse_weights_outputs));",
          "110:   OpOutputList dense_weights_outputs;",
          "111:   TF_RETURN_IF_ERROR(",
          "112:       context->output_list(\"out_delta_dense_weights\", &dense_weights_outputs));",
          "114:   for (int i = 0; i < sparse_weights_inputs.size(); ++i) {",
          "115:     Tensor* delta_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   if (sparse_weights_outputs.size() != sparse_weights_inputs.size())",
          "114:     return errors::InvalidArgument(",
          "115:         \"out_delta_sparse_weights and sparse_weights must have the same \"",
          "116:         \"length, got \",",
          "117:         sparse_weights_outputs.size(), \" and \", sparse_weights_inputs.size());",
          "122:   if (dense_weights_outputs.size() != dense_weights_inputs.size())",
          "123:     return errors::InvalidArgument(",
          "124:         \"out_delta_dense_weights and dense_weights must have the same length, \"",
          "125:         \"got \",",
          "126:         dense_weights_outputs.size(), \" and \", dense_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:   OpInputList sparse_example_indices_inputs;",
          "328:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_example_indices\",",
          "329:                                          &sparse_example_indices_inputs));",
          "330:   OpInputList sparse_feature_indices_inputs;",
          "331:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_indices\",",
          "332:                                          &sparse_feature_indices_inputs));",
          "333:   OpInputList sparse_feature_values_inputs;",
          "334:   if (num_sparse_features_with_values > 0) {",
          "335:     TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_values\",",
          "336:                                            &sparse_feature_values_inputs));",
          "337:   }",
          "339:   const Tensor* example_weights_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:   if (sparse_example_indices_inputs.size() != num_sparse_features)",
          "345:     return errors::InvalidArgument(",
          "346:         \"Expected \", num_sparse_features,",
          "347:         \" tensors in sparse_example_indices but got \",",
          "348:         sparse_example_indices_inputs.size());",
          "352:   if (sparse_feature_indices_inputs.size() != num_sparse_features)",
          "353:     return errors::InvalidArgument(",
          "354:         \"Expected \", num_sparse_features,",
          "355:         \" tensors in sparse_feature_indices but got \",",
          "356:         sparse_feature_indices_inputs.size());",
          "361:     if (sparse_feature_values_inputs.size() != num_sparse_features_with_values)",
          "362:       return errors::InvalidArgument(",
          "363:           \"Expected \", num_sparse_features_with_values,",
          "364:           \" tensors in sparse_feature_values but got \",",
          "365:           sparse_feature_values_inputs.size());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:           sparse_example_indices_inputs[i].template flat<int64>();",
          "401:       auto feature_indices =",
          "402:           sparse_feature_indices_inputs[i].template flat<int64>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:       if (example_indices.size() != feature_indices.size()) {",
          "433:         mutex_lock l(mu);",
          "434:         result = errors::InvalidArgument(",
          "435:             \"Found mismatched example_indices and feature_indices [\",",
          "436:             example_indices, \"] vs [\", feature_indices, \"]\");",
          "437:         return;",
          "438:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8eb24879a39e7ba7e66fdcd48ee6c44efdde766",
      "candidate_info": {
        "commit_hash": "a8eb24879a39e7ba7e66fdcd48ee6c44efdde766",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a8eb24879a39e7ba7e66fdcd48ee6c44efdde766",
        "files": [
          "tensorflow/core/kernels/sdca_internal.cc"
        ],
        "message": "Add several missing validations in SDCA\n\nPiperOrigin-RevId: 372172877\nChange-Id: Id366da962432e18dcbfac847d11e98488bebb70a",
        "before_after_code_files": [
          "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc": [
          "File: tensorflow/core/kernels/sdca_internal.cc -> tensorflow/core/kernels/sdca_internal.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   OpInputList sparse_weights_inputs;",
          "100:   TF_RETURN_IF_ERROR(",
          "101:       context->input_list(\"sparse_weights\", &sparse_weights_inputs));",
          "102:   OpInputList dense_weights_inputs;",
          "103:   TF_RETURN_IF_ERROR(",
          "104:       context->input_list(\"dense_weights\", &dense_weights_inputs));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   if (sparse_indices_inputs.size() != sparse_weights_inputs.size())",
          "103:     return errors::InvalidArgument(",
          "104:         \"sparse_indices and sparse_weights must have the same length, got \",",
          "105:         sparse_indices_inputs.size(), \" and \", sparse_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   OpOutputList sparse_weights_outputs;",
          "107:   TF_RETURN_IF_ERROR(context->output_list(\"out_delta_sparse_weights\",",
          "108:                                           &sparse_weights_outputs));",
          "110:   OpOutputList dense_weights_outputs;",
          "111:   TF_RETURN_IF_ERROR(",
          "112:       context->output_list(\"out_delta_dense_weights\", &dense_weights_outputs));",
          "114:   for (int i = 0; i < sparse_weights_inputs.size(); ++i) {",
          "115:     Tensor* delta_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   if (sparse_weights_outputs.size() != sparse_weights_inputs.size())",
          "114:     return errors::InvalidArgument(",
          "115:         \"out_delta_sparse_weights and sparse_weights must have the same \"",
          "116:         \"length, got \",",
          "117:         sparse_weights_outputs.size(), \" and \", sparse_weights_inputs.size());",
          "122:   if (dense_weights_outputs.size() != dense_weights_inputs.size())",
          "123:     return errors::InvalidArgument(",
          "124:         \"out_delta_dense_weights and dense_weights must have the same length, \"",
          "125:         \"got \",",
          "126:         dense_weights_outputs.size(), \" and \", dense_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:   OpInputList sparse_example_indices_inputs;",
          "328:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_example_indices\",",
          "329:                                          &sparse_example_indices_inputs));",
          "330:   OpInputList sparse_feature_indices_inputs;",
          "331:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_indices\",",
          "332:                                          &sparse_feature_indices_inputs));",
          "333:   OpInputList sparse_feature_values_inputs;",
          "334:   if (num_sparse_features_with_values > 0) {",
          "335:     TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_values\",",
          "336:                                            &sparse_feature_values_inputs));",
          "337:   }",
          "339:   const Tensor* example_weights_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:   if (sparse_example_indices_inputs.size() != num_sparse_features)",
          "345:     return errors::InvalidArgument(",
          "346:         \"Expected \", num_sparse_features,",
          "347:         \" tensors in sparse_example_indices but got \",",
          "348:         sparse_example_indices_inputs.size());",
          "352:   if (sparse_feature_indices_inputs.size() != num_sparse_features)",
          "353:     return errors::InvalidArgument(",
          "354:         \"Expected \", num_sparse_features,",
          "355:         \" tensors in sparse_feature_indices but got \",",
          "356:         sparse_feature_indices_inputs.size());",
          "361:     if (sparse_feature_values_inputs.size() != num_sparse_features_with_values)",
          "362:       return errors::InvalidArgument(",
          "363:           \"Expected \", num_sparse_features_with_values,",
          "364:           \" tensors in sparse_feature_values but got \",",
          "365:           sparse_feature_values_inputs.size());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:           sparse_example_indices_inputs[i].template flat<int64>();",
          "401:       auto feature_indices =",
          "402:           sparse_feature_indices_inputs[i].template flat<int64>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:       if (example_indices.size() != feature_indices.size()) {",
          "433:         mutex_lock l(mu);",
          "434:         result = errors::InvalidArgument(",
          "435:             \"Found mismatched example_indices and feature_indices [\",",
          "436:             example_indices, \"] vs [\", feature_indices, \"]\");",
          "437:         return;",
          "438:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "271fba6e4af2faaf37162ab372bbe3d3e5de06b0",
      "candidate_info": {
        "commit_hash": "271fba6e4af2faaf37162ab372bbe3d3e5de06b0",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/271fba6e4af2faaf37162ab372bbe3d3e5de06b0",
        "files": [
          "tensorflow/core/kernels/sdca_internal.cc"
        ],
        "message": "Add several missing validations in SDCA\n\nPiperOrigin-RevId: 372172877\nChange-Id: Id366da962432e18dcbfac847d11e98488bebb70a",
        "before_after_code_files": [
          "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sdca_internal.cc||tensorflow/core/kernels/sdca_internal.cc": [
          "File: tensorflow/core/kernels/sdca_internal.cc -> tensorflow/core/kernels/sdca_internal.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   OpInputList sparse_weights_inputs;",
          "100:   TF_RETURN_IF_ERROR(",
          "101:       context->input_list(\"sparse_weights\", &sparse_weights_inputs));",
          "102:   OpInputList dense_weights_inputs;",
          "103:   TF_RETURN_IF_ERROR(",
          "104:       context->input_list(\"dense_weights\", &dense_weights_inputs));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   if (sparse_indices_inputs.size() != sparse_weights_inputs.size())",
          "103:     return errors::InvalidArgument(",
          "104:         \"sparse_indices and sparse_weights must have the same length, got \",",
          "105:         sparse_indices_inputs.size(), \" and \", sparse_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   OpOutputList sparse_weights_outputs;",
          "107:   TF_RETURN_IF_ERROR(context->output_list(\"out_delta_sparse_weights\",",
          "108:                                           &sparse_weights_outputs));",
          "110:   OpOutputList dense_weights_outputs;",
          "111:   TF_RETURN_IF_ERROR(",
          "112:       context->output_list(\"out_delta_dense_weights\", &dense_weights_outputs));",
          "114:   for (int i = 0; i < sparse_weights_inputs.size(); ++i) {",
          "115:     Tensor* delta_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   if (sparse_weights_outputs.size() != sparse_weights_inputs.size())",
          "114:     return errors::InvalidArgument(",
          "115:         \"out_delta_sparse_weights and sparse_weights must have the same \"",
          "116:         \"length, got \",",
          "117:         sparse_weights_outputs.size(), \" and \", sparse_weights_inputs.size());",
          "122:   if (dense_weights_outputs.size() != dense_weights_inputs.size())",
          "123:     return errors::InvalidArgument(",
          "124:         \"out_delta_dense_weights and dense_weights must have the same length, \"",
          "125:         \"got \",",
          "126:         dense_weights_outputs.size(), \" and \", dense_weights_inputs.size());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:   OpInputList sparse_example_indices_inputs;",
          "328:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_example_indices\",",
          "329:                                          &sparse_example_indices_inputs));",
          "330:   OpInputList sparse_feature_indices_inputs;",
          "331:   TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_indices\",",
          "332:                                          &sparse_feature_indices_inputs));",
          "333:   OpInputList sparse_feature_values_inputs;",
          "334:   if (num_sparse_features_with_values > 0) {",
          "335:     TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_values\",",
          "336:                                            &sparse_feature_values_inputs));",
          "337:   }",
          "339:   const Tensor* example_weights_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:   if (sparse_example_indices_inputs.size() != num_sparse_features)",
          "345:     return errors::InvalidArgument(",
          "346:         \"Expected \", num_sparse_features,",
          "347:         \" tensors in sparse_example_indices but got \",",
          "348:         sparse_example_indices_inputs.size());",
          "352:   if (sparse_feature_indices_inputs.size() != num_sparse_features)",
          "353:     return errors::InvalidArgument(",
          "354:         \"Expected \", num_sparse_features,",
          "355:         \" tensors in sparse_feature_indices but got \",",
          "356:         sparse_feature_indices_inputs.size());",
          "361:     if (sparse_feature_values_inputs.size() != num_sparse_features_with_values)",
          "362:       return errors::InvalidArgument(",
          "363:           \"Expected \", num_sparse_features_with_values,",
          "364:           \" tensors in sparse_feature_values but got \",",
          "365:           sparse_feature_values_inputs.size());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:           sparse_example_indices_inputs[i].template flat<int64>();",
          "401:       auto feature_indices =",
          "402:           sparse_feature_indices_inputs[i].template flat<int64>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:       if (example_indices.size() != feature_indices.size()) {",
          "433:         mutex_lock l(mu);",
          "434:         result = errors::InvalidArgument(",
          "435:             \"Found mismatched example_indices and feature_indices [\",",
          "436:             example_indices, \"] vs [\", feature_indices, \"]\");",
          "437:         return;",
          "438:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}