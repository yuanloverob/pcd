{
  "cve_id": "CVE-2015-4600",
  "cve_desc": "The SoapClient implementation in PHP before 5.4.40, 5.5.x before 5.5.24, and 5.6.x before 5.6.8 allows remote attackers to cause a denial of service (application crash) or possibly execute arbitrary code via an unexpected data type, related to \"type confusion\" issues in the (1) SoapClient::__getLastRequest, (2) SoapClient::__getLastResponse, (3) SoapClient::__getLastRequestHeaders, (4) SoapClient::__getLastResponseHeaders, (5) SoapClient::__getCookies, and (6) SoapClient::__setCookie methods.",
  "repo": "php/php-src",
  "patch_hash": "0c136a2abd49298b66acb0cad504f0f972f5bfe8",
  "patch_info": {
    "commit_hash": "0c136a2abd49298b66acb0cad504f0f972f5bfe8",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/0c136a2abd49298b66acb0cad504f0f972f5bfe8",
    "files": [
      "ext/soap/php_encoding.c",
      "ext/soap/php_http.c",
      "ext/soap/soap.c"
    ],
    "message": "Added type checks",
    "before_after_code_files": [
      "ext/soap/php_encoding.c||ext/soap/php_encoding.c",
      "ext/soap/php_http.c||ext/soap/php_http.c",
      "ext/soap/soap.c||ext/soap/soap.c"
    ]
  },
  "patch_diff": {
    "ext/soap/php_encoding.c||ext/soap/php_encoding.c": [
      "File: ext/soap/php_encoding.c -> ext/soap/php_encoding.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3649:       Z_OBJCE_PP(tmp) == soap_var_class_entry) {",
      "3650:    zval **ztype;",
      "3653:     soap_error0(E_ERROR,  \"Encoding: SoapVar has no 'enc_type' property\");",
      "3654:    }",
      "3655:    cur_type = Z_LVAL_PP(ztype);",
      "3658:     cur_stype = Z_STRVAL_PP(ztype);",
      "3659:    } else {",
      "3660:     cur_stype = NULL;",
      "3661:    }",
      "3664:     cur_ns = Z_STRVAL_PP(ztype);",
      "3665:    } else {",
      "3666:     cur_ns = NULL;",
      "",
      "[Removed Lines]",
      "3652:    if (zend_hash_find(Z_OBJPROP_PP(tmp), \"enc_type\", sizeof(\"enc_type\"), (void **)&ztype) == FAILURE) {",
      "3657:    if (zend_hash_find(Z_OBJPROP_PP(tmp), \"enc_stype\", sizeof(\"enc_stype\"), (void **)&ztype) == SUCCESS) {",
      "3663:    if (zend_hash_find(Z_OBJPROP_PP(tmp), \"enc_ns\", sizeof(\"enc_ns\"), (void **)&ztype) == SUCCESS) {",
      "",
      "[Added Lines]",
      "3652:    if (zend_hash_find(Z_OBJPROP_PP(tmp), \"enc_type\", sizeof(\"enc_type\"), (void **)&ztype) == FAILURE ||",
      "3653:        Z_TYPE_PP(ztype) != IS_LONG) {",
      "3658:    if (zend_hash_find(Z_OBJPROP_PP(tmp), \"enc_stype\", sizeof(\"enc_stype\"), (void **)&ztype) == SUCCESS &&",
      "3659:        Z_TYPE_PP(ztype) == IS_STRING) {",
      "3665:    if (zend_hash_find(Z_OBJPROP_PP(tmp), \"enc_ns\", sizeof(\"enc_ns\"), (void **)&ztype) == SUCCESS &&",
      "3666:        Z_TYPE_PP(ztype) == IS_STRING) {",
      "",
      "---------------"
    ],
    "ext/soap/php_http.c||ext/soap/php_http.c": [
      "File: ext/soap/php_http.c -> ext/soap/php_http.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: {",
      "37:  zval **login, **password;",
      "40:   unsigned char* buf;",
      "41:   int len;",
      "42:   smart_str auth = {0};",
      "44:   smart_str_appendl(&auth, Z_STRVAL_PP(login), Z_STRLEN_PP(login));",
      "45:   smart_str_appendc(&auth, ':');",
      "47:    smart_str_appendl(&auth, Z_STRVAL_PP(password), Z_STRLEN_PP(password));",
      "48:   }",
      "49:   smart_str_0(&auth);",
      "",
      "[Removed Lines]",
      "39:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_login\", sizeof(\"_proxy_login\"), (void **)&login) == SUCCESS) {",
      "46:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_password\", sizeof(\"_proxy_password\"), (void **)&password) == SUCCESS) {",
      "",
      "[Added Lines]",
      "39:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_login\", sizeof(\"_proxy_login\"), (void **)&login) == SUCCESS &&",
      "40:      Z_TYPE_PP(login) == IS_STRING) {",
      "47:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_password\", sizeof(\"_proxy_password\"), (void **)&password) == SUCCESS &&",
      "48:       Z_TYPE_PP(password) == IS_STRING) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "64:  zval **login, **password;",
      "66:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_login\", sizeof(\"_login\"), (void **)&login) == SUCCESS &&",
      "68:   unsigned char* buf;",
      "69:   int len;",
      "70:   smart_str auth = {0};",
      "72:   smart_str_appendl(&auth, Z_STRVAL_PP(login), Z_STRLEN_PP(login));",
      "73:   smart_str_appendc(&auth, ':');",
      "75:    smart_str_appendl(&auth, Z_STRVAL_PP(password), Z_STRLEN_PP(password));",
      "76:   }",
      "77:   smart_str_0(&auth);",
      "",
      "[Removed Lines]",
      "67:    !zend_hash_exists(Z_OBJPROP_P(this_ptr), \"_digest\", sizeof(\"_digest\"))) {",
      "74:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\"), (void **)&password) == SUCCESS) {",
      "",
      "[Added Lines]",
      "69:      Z_TYPE_PP(login) == IS_STRING &&",
      "70:      !zend_hash_exists(Z_OBJPROP_P(this_ptr), \"_digest\", sizeof(\"_digest\"))) {",
      "77:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\"), (void **)&password) == SUCCESS &&",
      "78:       Z_TYPE_PP(password) == IS_STRING) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "509:   }",
      "510:   if (!http_1_1 ||",
      "511:    (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_keep_alive\", sizeof(\"_keep_alive\"), (void **)&tmp) == SUCCESS &&",
      "512:     Z_LVAL_PP(tmp) == 0)) {",
      "513:    smart_str_append_const(&soap_headers, \"\\r\\n\"",
      "514:     \"Connection: close\\r\\n\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "516:     (Z_TYPE_PP(tmp) == IS_BOOL || Z_TYPE_PP(tmp) == IS_LONG) &&",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "742:   }",
      "746:    zval **data;",
      "747:    char *key;",
      "748:    int i, n;",
      "",
      "[Removed Lines]",
      "745:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == SUCCESS) {",
      "",
      "[Added Lines]",
      "750:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == SUCCESS &&",
      "751:       Z_TYPE_PP(cookies) == IS_ARRAY) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "785:   smart_str_append_const(&soap_headers, \"\\r\\n\");",
      "786:   smart_str_0(&soap_headers);",
      "787:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
      "789:    add_property_stringl(this_ptr, \"__last_request_headers\", soap_headers.c, soap_headers.len, 1);",
      "790:   }",
      "791:   smart_str_appendl(&soap_headers, request, request_size);",
      "",
      "[Removed Lines]",
      "788:       Z_LVAL_PP(trace) > 0) {",
      "",
      "[Added Lines]",
      "794:       (Z_TYPE_PP(trace) == IS_BOOL || Z_TYPE_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "830:   }",
      "832:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
      "834:    add_property_stringl(this_ptr, \"__last_response_headers\", http_headers, http_header_size, 1);",
      "835:   }",
      "",
      "[Removed Lines]",
      "833:       Z_LVAL_PP(trace) > 0) {",
      "",
      "[Added Lines]",
      "839:       (Z_TYPE_PP(trace) == IS_BOOL || Z_TYPE_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "879:   char *eqpos, *sempos;",
      "880:   zval **cookies;",
      "883:    zval *tmp_cookies;",
      "884:    MAKE_STD_ZVAL(tmp_cookies);",
      "885:    array_init(tmp_cookies);",
      "",
      "[Removed Lines]",
      "882:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == FAILURE) {",
      "",
      "[Added Lines]",
      "888:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == FAILURE ||",
      "889:       Z_TYPE_PP(cookies) != IS_ARRAY) {",
      "",
      "---------------"
    ],
    "ext/soap/soap.c||ext/soap/soap.c": [
      "File: ext/soap/soap.c -> ext/soap/soap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2554:  }",
      "2556:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
      "2558:   add_property_stringl(this_ptr, \"__last_request\", buf, buf_size, 1);",
      "2559:  }",
      "",
      "[Removed Lines]",
      "2557:      Z_LVAL_PP(trace) > 0) {",
      "",
      "[Added Lines]",
      "2557:      (Z_LVAL_PP(trace) == IS_BOOL || Z_LVAL_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2594:   }",
      "2595:   ret = FALSE;",
      "2596:  } else if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
      "2598:   add_property_stringl(this_ptr, \"__last_response\", Z_STRVAL_P(response), Z_STRLEN_P(response), 1);",
      "2599:  }",
      "2600:  xmlFree(buf);",
      "",
      "[Removed Lines]",
      "2597:      Z_LVAL_PP(trace) > 0) {",
      "",
      "[Added Lines]",
      "2597:             (Z_LVAL_PP(trace) == IS_BOOL || Z_LVAL_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2634:  SOAP_CLIENT_BEGIN_CODE();",
      "2638:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"__last_request\", sizeof(\"__last_request\"));",
      "2639:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"__last_response\", sizeof(\"__last_response\"));",
      "2640:  }",
      "2643:   soap_version = SOAP_1_2;",
      "2644:  } else {",
      "2645:   soap_version = SOAP_1_1;",
      "",
      "[Removed Lines]",
      "2636:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS",
      "2637:   && Z_LVAL_PP(trace) > 0) {",
      "2641:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_soap_version\", sizeof(\"_soap_version\"), (void **) &tmp) == SUCCESS",
      "2642:   && Z_LVAL_PP(tmp) == SOAP_1_2) {",
      "",
      "[Added Lines]",
      "2636:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
      "2637:      (Z_LVAL_PP(trace) == IS_BOOL || Z_LVAL_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
      "2641:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_soap_version\", sizeof(\"_soap_version\"), (void **) &tmp) == SUCCESS &&",
      "2642:   Z_TYPE_PP(tmp) == IS_LONG && Z_LVAL_PP(tmp) == SOAP_1_2) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2735:   zval **uri;",
      "2736:   smart_str action = {0};",
      "2739:    add_soap_fault(this_ptr, \"Client\", \"Error finding \\\"uri\\\" property\", NULL, NULL TSRMLS_CC);",
      "2740:   } else if (location == NULL) {",
      "2741:    add_soap_fault(this_ptr, \"Client\", \"Error could not find \\\"location\\\" property\", NULL, NULL TSRMLS_CC);",
      "",
      "[Removed Lines]",
      "2738:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"uri\", sizeof(\"uri\"), (void *)&uri) == FAILURE) {",
      "",
      "[Added Lines]",
      "2738:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"uri\", sizeof(\"uri\"), (void *)&uri) == FAILURE || Z_TYPE_PP(uri) != IS_STRING) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3006:   return;",
      "3007:  }",
      "3010:   RETURN_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);",
      "3011:  }",
      "3012:  RETURN_NULL();",
      "",
      "[Removed Lines]",
      "3009:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_request\", sizeof(\"__last_request\"), (void **)&tmp) == SUCCESS) {",
      "",
      "[Added Lines]",
      "3009:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_request\", sizeof(\"__last_request\"), (void **)&tmp) == SUCCESS &&",
      "3010:      Z_TYPE_PP(tmp) == IS_STRING) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3024:   return;",
      "3025:  }",
      "3028:   RETURN_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);",
      "3029:  }",
      "3030:  RETURN_NULL();",
      "",
      "[Removed Lines]",
      "3027:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_response\", sizeof(\"__last_response\"), (void **)&tmp) == SUCCESS) {",
      "",
      "[Added Lines]",
      "3028:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_response\", sizeof(\"__last_response\"), (void **)&tmp) == SUCCESS &&",
      "3029:      Z_TYPE_PP(tmp) == IS_STRING) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3042:   return;",
      "3043:  }",
      "3046:   RETURN_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);",
      "3047:  }",
      "3048:  RETURN_NULL();",
      "",
      "[Removed Lines]",
      "3045:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_request_headers\", sizeof(\"__last_request_headers\"), (void **)&tmp) == SUCCESS) {",
      "",
      "[Added Lines]",
      "3047:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_request_headers\", sizeof(\"__last_request_headers\"), (void **)&tmp) == SUCCESS &&",
      "3048:      Z_TYPE_PP(tmp) == IS_STRING) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3060:   return;",
      "3061:  }",
      "3064:   RETURN_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);",
      "3065:  }",
      "3066:  RETURN_NULL();",
      "",
      "[Removed Lines]",
      "3063:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_response_headers\", sizeof(\"__last_response_headers\"), (void **)&tmp) == SUCCESS) {",
      "",
      "[Added Lines]",
      "3066:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_response_headers\", sizeof(\"__last_response_headers\"), (void **)&tmp) == SUCCESS &&",
      "3067:      Z_TYPE_PP(tmp) == IS_STRING) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "3116:  }",
      "3118:  if (val == NULL) {",
      "3120:    zend_hash_del(Z_ARRVAL_PP(cookies), name, name_len+1);",
      "3121:   }",
      "3122:  } else {",
      "3123:   zval *zcookie;",
      "3126:    zval *tmp_cookies;",
      "3128:    MAKE_STD_ZVAL(tmp_cookies);",
      "",
      "[Removed Lines]",
      "3119:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == SUCCESS) {",
      "3125:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == FAILURE) {",
      "",
      "[Added Lines]",
      "3123:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == SUCCESS &&",
      "3124:       Z_TYPE_PP(cookies) == IS_ARRAY) {",
      "3130:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == FAILURE ||",
      "3131:       Z_TYPE_PP(cookies) != IS_ARRAY) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "3151:  array_init(return_value);",
      "3154:   zend_hash_copy(Z_ARRVAL_P(return_value), Z_ARRVAL_P(*cookies), (copy_ctor_func_t) zval_add_ref, (void *)&tmp, sizeof(zval*));",
      "3155:  }",
      "3156: }",
      "",
      "[Removed Lines]",
      "3153:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) != FAILURE) {",
      "",
      "[Added Lines]",
      "3159:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) != FAILURE &&",
      "3160:      Z_TYPE_PP(cookies) == IS_ARRAY) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "4237:    }",
      "4238:   }",
      "4239:  } else {",
      "4241:    style = Z_LVAL_PP(zstyle);",
      "4242:   } else {",
      "4243:    style = SOAP_RPC;",
      "",
      "[Removed Lines]",
      "4240:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"style\", sizeof(\"style\"), (void **)&zstyle) == SUCCESS) {",
      "",
      "[Added Lines]",
      "4247:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"style\", sizeof(\"style\"), (void **)&zstyle) == SUCCESS &&",
      "4248:       Z_TYPE_PP(zstyle) == IS_LONG) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "4260:   }",
      "4262:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"use\", sizeof(\"use\"), (void **)&zuse) == SUCCESS &&",
      "4264:    use = SOAP_LITERAL;",
      "4265:   } else {",
      "4266:    use = SOAP_ENCODED;",
      "",
      "[Removed Lines]",
      "4263:      Z_LVAL_PP(zuse) == SOAP_LITERAL) {",
      "",
      "[Added Lines]",
      "4271:       Z_TYPE_PP(zuse) == IS_LONG && Z_LVAL_PP(zuse) == SOAP_LITERAL) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "4390:   zval **param_data;",
      "4392:   if (zend_hash_find(Z_OBJPROP_P(param_val), \"param_name\", sizeof(\"param_name\"), (void **)&param_name) == SUCCESS &&",
      "4393:       zend_hash_find(Z_OBJPROP_P(param_val), \"param_data\", sizeof(\"param_data\"), (void **)&param_data) == SUCCESS) {",
      "4394:    param_val = *param_data;",
      "4395:    name = Z_STRVAL_PP(param_name);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4401:       Z_TYPE_PP(param_name) == IS_STRING &&",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "026b0adc50f1c7683e1446bdbc8fbf64f3daeddd",
      "candidate_info": {
        "commit_hash": "026b0adc50f1c7683e1446bdbc8fbf64f3daeddd",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/026b0adc50f1c7683e1446bdbc8fbf64f3daeddd",
        "files": [
          "ext/soap/soap.c"
        ],
        "message": "Fixed memory leaks",
        "before_after_code_files": [
          "ext/soap/soap.c||ext/soap/soap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/soap/soap.c||ext/soap/soap.c"
          ],
          "candidate": [
            "ext/soap/soap.c||ext/soap/soap.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/soap/soap.c||ext/soap/soap.c": [
          "File: ext/soap/soap.c -> ext/soap/soap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2554:  zval  params[5];",
          "2555:  zval  *trace;",
          "2556:  zval  *fault;",
          "2558:  ZVAL_NULL(response);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2557:  int    _bailout = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2563:   return FALSE;",
          "2564:  }",
          "2592:   }",
          "2598:  zval_ptr_dtor(&func);",
          "2599:  zval_ptr_dtor(&params[4]);",
          "2600:  zval_ptr_dtor(&params[3]);",
          "",
          "[Removed Lines]",
          "2566:  if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "2567:      (Z_TYPE_P(trace) == IS_TRUE || (Z_TYPE_P(trace) == IS_LONG && Z_LVAL_P(trace) != 0))) {",
          "2568:   add_property_stringl(this_ptr, \"__last_request\", buf, buf_size);",
          "2569:  }",
          "2571:  ZVAL_STRINGL(&func,\"__doRequest\",sizeof(\"__doRequest\")-1);",
          "2572:  ZVAL_STRINGL(&params[0], buf, buf_size);",
          "2573:  if (location == NULL) {",
          "2574:   ZVAL_NULL(&params[1]);",
          "2575:  } else {",
          "2576:   ZVAL_STRING(&params[1], location);",
          "2577:  }",
          "2578:  if (action == NULL) {",
          "2579:   ZVAL_NULL(&params[2]);",
          "2580:  } else {",
          "2581:   ZVAL_STRING(&params[2], action);",
          "2582:  }",
          "2583:  ZVAL_LONG(&params[3], version);",
          "2584:  ZVAL_LONG(&params[4], one_way);",
          "2586:  if (call_user_function(NULL, this_ptr, &func, response, 5, params) != SUCCESS) {",
          "2587:   add_soap_fault(this_ptr, \"Client\", \"SoapClient::__doRequest() failed\", NULL, NULL);",
          "2588:   ret = FALSE;",
          "2589:  } else if (Z_TYPE_P(response) != IS_STRING) {",
          "2590:   if ((fault = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\")-1)) == NULL) {",
          "2591:    add_soap_fault(this_ptr, \"Client\", \"SoapClient::__doRequest() returned non string value\", NULL, NULL);",
          "2593:   ret = FALSE;",
          "2594:  } else if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "2595:      (Z_TYPE_P(trace) == IS_TRUE || (Z_TYPE_P(trace) == IS_LONG && Z_LVAL_P(trace) != 0))) {",
          "2596:   add_property_str(this_ptr, \"__last_response\", zend_string_copy(Z_STR_P(response)));",
          "2597:  }",
          "",
          "[Added Lines]",
          "2567:  zend_try {",
          "2568:   if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "2569:       (Z_TYPE_P(trace) == IS_TRUE || (Z_TYPE_P(trace) == IS_LONG && Z_LVAL_P(trace) != 0))) {",
          "2570:    add_property_stringl(this_ptr, \"__last_request\", buf, buf_size);",
          "2571:   }",
          "2573:   ZVAL_STRINGL(&func,\"__doRequest\",sizeof(\"__doRequest\")-1);",
          "2574:   ZVAL_STRINGL(&params[0], buf, buf_size);",
          "2575:   if (location == NULL) {",
          "2576:    ZVAL_NULL(&params[1]);",
          "2577:   } else {",
          "2578:    ZVAL_STRING(&params[1], location);",
          "2579:   }",
          "2580:   if (action == NULL) {",
          "2581:    ZVAL_NULL(&params[2]);",
          "2582:   } else {",
          "2583:    ZVAL_STRING(&params[2], action);",
          "2584:   }",
          "2585:   ZVAL_LONG(&params[3], version);",
          "2586:   ZVAL_LONG(&params[4], one_way);",
          "2588:   if (call_user_function(NULL, this_ptr, &func, response, 5, params) != SUCCESS) {",
          "2589:    add_soap_fault(this_ptr, \"Client\", \"SoapClient::__doRequest() failed\", NULL, NULL);",
          "2590:    ret = FALSE;",
          "2591:   } else if (Z_TYPE_P(response) != IS_STRING) {",
          "2592:    if ((fault = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\")-1)) == NULL) {",
          "2593:     add_soap_fault(this_ptr, \"Client\", \"SoapClient::__doRequest() returned non string value\", NULL, NULL);",
          "2594:    }",
          "2595:    ret = FALSE;",
          "2596:   } else if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "2597:       (Z_TYPE_P(trace) == IS_TRUE || (Z_TYPE_P(trace) == IS_LONG && Z_LVAL_P(trace) != 0))) {",
          "2598:    add_property_str(this_ptr, \"__last_response\", zend_string_copy(Z_STR_P(response)));",
          "2600:  } zend_catch {",
          "2601:   _bailout = 1;",
          "2602:  } zend_end_try();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2602:  zval_ptr_dtor(&params[1]);",
          "2603:  zval_ptr_dtor(&params[0]);",
          "2604:  xmlFree(buf);",
          "2605:  if (ret && (fault = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\")-1)) != NULL) {",
          "2607:  }",
          "2609: }",
          "2611: static void do_soap_call(zend_execute_data *execute_data,",
          "",
          "[Removed Lines]",
          "2606:    return FALSE;",
          "2608:   return ret;",
          "",
          "[Added Lines]",
          "2610:  if (_bailout) {",
          "2611:   zend_bailout();",
          "2612:  }",
          "2614:   ret = FALSE;",
          "2616:  return ret;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2635:  HashTable *old_class_map;",
          "2636:  int old_features;",
          "2637:  HashTable *old_typemap, *typemap = NULL;",
          "2639:  SOAP_CLIENT_BEGIN_CODE();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2646:  smart_str action = {0};",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2719:      }",
          "2721:     xmlFreeDoc(request);",
          "2723:     if (ret && Z_TYPE(response) == IS_STRING) {",
          "2724:      encode_reset_ns();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2731:     request = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2739:    }",
          "2740:   } else {",
          "2741:    zval *uri;",
          "2744:    if ((uri = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"uri\", sizeof(\"uri\")-1)) == NULL || Z_TYPE_P(uri) != IS_STRING) {",
          "2745:     add_soap_fault(this_ptr, \"Client\", \"Error finding \\\"uri\\\" property\", NULL, NULL);",
          "",
          "[Removed Lines]",
          "2742:    smart_str action = {0};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2765:      smart_str_free(&action);",
          "2766:     xmlFreeDoc(request);",
          "2768:     if (ret && Z_TYPE(response) == IS_STRING) {",
          "2769:      encode_reset_ns();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2776:     request = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2812:  SOAP_GLOBAL(encoding) = old_encoding;",
          "2813:  SOAP_GLOBAL(sdl) = old_sdl;",
          "2814:  if (_bailout) {",
          "2815:   _bailout = 0;",
          "2816:   zend_bailout();",
          "2817:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2825:   smart_str_free(&action);",
          "2826:   if (request) {",
          "2827:    xmlFreeDoc(request);",
          "2828:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff70b40dc978f3f4c457f72a71bb43fd17ee360b",
      "candidate_info": {
        "commit_hash": "ff70b40dc978f3f4c457f72a71bb43fd17ee360b",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/ff70b40dc978f3f4c457f72a71bb43fd17ee360b",
        "files": [
          "ext/soap/soap.c"
        ],
        "message": "fix type in fix for #69085",
        "before_after_code_files": [
          "ext/soap/soap.c||ext/soap/soap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/soap/soap.c||ext/soap/soap.c"
          ],
          "candidate": [
            "ext/soap/soap.c||ext/soap/soap.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/soap/soap.c||ext/soap/soap.c": [
          "File: ext/soap/soap.c -> ext/soap/soap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2560:  }",
          "2562:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
          "2564:   add_property_stringl(this_ptr, \"__last_request\", buf, buf_size, 1);",
          "2565:  }",
          "",
          "[Removed Lines]",
          "2563:      (Z_LVAL_PP(trace) == IS_BOOL || Z_LVAL_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
          "",
          "[Added Lines]",
          "2563:      (Z_TYPE_PP(trace) == IS_BOOL || Z_TYPE_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2600:   }",
          "2601:   ret = FALSE;",
          "2602:  } else if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
          "2604:   add_property_stringl(this_ptr, \"__last_response\", Z_STRVAL_P(response), Z_STRLEN_P(response), 1);",
          "2605:  }",
          "2606:  xmlFree(buf);",
          "",
          "[Removed Lines]",
          "2603:             (Z_LVAL_PP(trace) == IS_BOOL || Z_LVAL_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
          "",
          "[Added Lines]",
          "2603:             (Z_TYPE_PP(trace) == IS_BOOL || Z_TYPE_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2640:  SOAP_CLIENT_BEGIN_CODE();",
          "2642:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
          "2644:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"__last_request\", sizeof(\"__last_request\"));",
          "2645:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"__last_response\", sizeof(\"__last_response\"));",
          "2646:  }",
          "",
          "[Removed Lines]",
          "2643:      (Z_LVAL_PP(trace) == IS_BOOL || Z_LVAL_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
          "",
          "[Added Lines]",
          "2643:      (Z_TYPE_PP(trace) == IS_BOOL || Z_TYPE_PP(trace) == IS_LONG) && Z_LVAL_PP(trace) != 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "794a28832dcfe59fc1ad82a8dda8e3b569ed5637",
      "candidate_info": {
        "commit_hash": "794a28832dcfe59fc1ad82a8dda8e3b569ed5637",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/794a28832dcfe59fc1ad82a8dda8e3b569ed5637",
        "files": [
          "ext/soap/soap.c",
          "ext/soap/tests/bugs/bug69085.phpt"
        ],
        "message": "Merge branch 'PHP-5.6'\n\nConflicts:\n\text/soap/soap.c",
        "before_after_code_files": [
          "ext/soap/soap.c||ext/soap/soap.c",
          "ext/soap/tests/bugs/bug69085.phpt||ext/soap/tests/bugs/bug69085.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/soap/soap.c||ext/soap/soap.c"
          ],
          "candidate": [
            "ext/soap/soap.c||ext/soap/soap.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/soap/soap.c||ext/soap/soap.c": [
          "File: ext/soap/soap.c -> ext/soap/soap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2581:  }",
          "2583:  if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "2585:   add_property_stringl(this_ptr, \"__last_request\", buf, buf_size);",
          "2586:  }",
          "",
          "[Removed Lines]",
          "2584:      Z_LVAL_P(trace) > 0) {",
          "",
          "[Added Lines]",
          "2584:      Z_TYPE_P(trace) == IS_LONG && Z_LVAL_P(trace) > 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2609:   }",
          "2610:   ret = FALSE;",
          "2611:  } else if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "2613:   add_property_str(this_ptr, \"__last_response\", zend_string_copy(Z_STR_P(response)));",
          "2614:  }",
          "2615:  zval_ptr_dtor(&func);",
          "",
          "[Removed Lines]",
          "2612:      Z_LVAL_P(trace) > 0) {",
          "",
          "[Added Lines]",
          "2612:      Z_TYPE_P(trace) == IS_LONG && Z_LVAL_P(trace) > 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2911:  this_ptr = getThis();",
          "2913:   HashTable *default_headers = Z_ARRVAL_P(tmp);",
          "2914:   if (soap_headers) {",
          "2915:    if (!free_soap_headers) {",
          "",
          "[Removed Lines]",
          "2912:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\")-1)) != NULL) {",
          "",
          "[Added Lines]",
          "2912:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\")-1)) != NULL && Z_TYPE_P(tmp) == IS_ARRAY) {",
          "",
          "---------------"
        ],
        "ext/soap/tests/bugs/bug69085.phpt||ext/soap/tests/bugs/bug69085.phpt": [
          "File: ext/soap/tests/bugs/bug69085.phpt -> ext/soap/tests/bugs/bug69085.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #69085 (SoapClient's __call() type confusion through unserialize())",
          "3: --SKIPIF--",
          "4: <?php require_once('skipif.inc'); ?>",
          "5: --INI--",
          "6: soap.wsdl_cache_enabled=0",
          "7: --FILE--",
          "8: <?php",
          "10: $dummy = unserialize('O:10:\"SoapClient\":5:{s:3:\"uri\";s:1:\"a\";s:8:\"location\";s:22:\"http://localhost/a.xml\";s:17:\"__default_headers\";i:1337;s:15:\"__last_response\";s:1:\"a\";s:5:\"trace\";s:1:\"x\";}');",
          "11: try {",
          "12:  $dummy->whatever();",
          "13: } catch (Exception $e) {",
          "14:  echo \"okey\";",
          "15: }",
          "16: --EXPECT--",
          "17: okey",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c446e575880d503921a795ee7cc4126b8b84457b",
      "candidate_info": {
        "commit_hash": "c446e575880d503921a795ee7cc4126b8b84457b",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/c446e575880d503921a795ee7cc4126b8b84457b",
        "files": [
          "Zend/zend_API.c",
          "Zend/zend_API.h",
          "ext/soap/php_encoding.c",
          "ext/soap/php_encoding.h",
          "ext/soap/php_http.c",
          "ext/soap/php_http.h",
          "ext/soap/php_packet_soap.c",
          "ext/soap/php_schema.c",
          "ext/soap/php_schema.h",
          "ext/soap/php_sdl.c",
          "ext/soap/php_sdl.h",
          "ext/soap/php_soap.h",
          "ext/soap/soap.c"
        ],
        "message": "ext/soap support for phpng (incomplete - just compilable)",
        "before_after_code_files": [
          "Zend/zend_API.c||Zend/zend_API.c",
          "Zend/zend_API.h||Zend/zend_API.h",
          "ext/soap/php_encoding.c||ext/soap/php_encoding.c",
          "ext/soap/php_encoding.h||ext/soap/php_encoding.h",
          "ext/soap/php_http.c||ext/soap/php_http.c",
          "ext/soap/php_http.h||ext/soap/php_http.h",
          "ext/soap/php_packet_soap.c||ext/soap/php_packet_soap.c",
          "ext/soap/php_schema.c||ext/soap/php_schema.c",
          "ext/soap/php_schema.h||ext/soap/php_schema.h",
          "ext/soap/php_sdl.c||ext/soap/php_sdl.c",
          "ext/soap/php_sdl.h||ext/soap/php_sdl.h",
          "ext/soap/php_soap.h||ext/soap/php_soap.h",
          "ext/soap/soap.c||ext/soap/soap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/soap/php_encoding.c||ext/soap/php_encoding.c",
            "ext/soap/php_http.c||ext/soap/php_http.c",
            "ext/soap/soap.c||ext/soap/soap.c"
          ],
          "candidate": [
            "ext/soap/php_encoding.c||ext/soap/php_encoding.c",
            "ext/soap/php_http.c||ext/soap/php_http.c",
            "ext/soap/soap.c||ext/soap/soap.c"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_API.c||Zend/zend_API.c": [
          "File: Zend/zend_API.c -> Zend/zend_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1757: }",
          "1761: {",
          "1762:  zval tmp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1761: {",
          "1762:  zval tmp;",
          "1763:  zval z_key;",
          "1765:  ZVAL_STR(&tmp, str);",
          "1766:  ZVAL_STRINGL(&z_key, key, key_len);",
          "1767:  Z_OBJ_HANDLER_P(arg, write_property)(arg, &z_key, &tmp, -1 TSRMLS_CC);",
          "1769:  zval_ptr_dtor(&z_key);",
          "1770:  return SUCCESS;",
          "1771: }",
          "",
          "---------------"
        ],
        "Zend/zend_API.h||Zend/zend_API.h": [
          "File: Zend/zend_API.h -> Zend/zend_API.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "440: ZEND_API int add_property_bool_ex(zval *arg, const char *key, uint key_len, int b TSRMLS_DC);",
          "441: ZEND_API int add_property_resource_ex(zval *arg, const char *key, uint key_len, zend_resource *r TSRMLS_DC);",
          "442: ZEND_API int add_property_double_ex(zval *arg, const char *key, uint key_len, double d TSRMLS_DC);",
          "443: ZEND_API int add_property_string_ex(zval *arg, const char *key, uint key_len, const char *str TSRMLS_DC);",
          "444: ZEND_API int add_property_stringl_ex(zval *arg, const char *key, uint key_len,  const char *str, uint length TSRMLS_DC);",
          "445: ZEND_API int add_property_zval_ex(zval *arg, const char *key, uint key_len, zval *value TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443: ZEND_API int add_property_str_ex(zval *arg, const char *key, uint key_len, zend_string *str TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449: #define add_property_bool(__arg, __key, __b) add_property_bool_ex(__arg, __key, strlen(__key), __b TSRMLS_CC)",
          "450: #define add_property_resource(__arg, __key, __r) add_property_resource_ex(__arg, __key, strlen(__key), __r TSRMLS_CC)",
          "451: #define add_property_double(__arg, __key, __d) add_property_double_ex(__arg, __key, strlen(__key), __d TSRMLS_CC)",
          "452: #define add_property_string(__arg, __key, __str) add_property_string_ex(__arg, __key, strlen(__key), __str TSRMLS_CC)",
          "453: #define add_property_stringl(__arg, __key, __str, __length) add_property_stringl_ex(__arg, __key, strlen(__key), __str, __length TSRMLS_CC)",
          "454: #define add_property_zval(__arg, __key, __value) add_property_zval_ex(__arg, __key, strlen(__key), __value TSRMLS_CC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453: #define add_property_str(__arg, __key, __str) add_property_str_ex(__arg, __key, strlen(__key), __str TSRMLS_CC)",
          "",
          "---------------"
        ],
        "ext/soap/php_encoding.c||ext/soap/php_encoding.c": [
          "File: ext/soap/php_encoding.c -> ext/soap/php_encoding.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"zend_interfaces.h\"",
          "43: static xmlNodePtr to_xml_long(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "44: static xmlNodePtr to_xml_double(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "32: static zval *to_zval_double(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "33: static zval *to_zval_long(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "34: static zval *to_zval_bool(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "35: static zval *to_zval_string(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "36: static zval *to_zval_stringr(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "37: static zval *to_zval_stringc(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "38: static zval *to_zval_map(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "39: static zval *to_zval_null(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "40: static zval *to_zval_base64(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "41: static zval *to_zval_hexbin(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "",
          "[Added Lines]",
          "32: static zval *to_zval_double(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "33: static zval *to_zval_long(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "34: static zval *to_zval_bool(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "35: static zval *to_zval_string(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "36: static zval *to_zval_stringr(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "37: static zval *to_zval_stringc(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "38: static zval *to_zval_map(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "39: static zval *to_zval_null(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "40: static zval *to_zval_base64(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "41: static zval *to_zval_hexbin(zval* ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: static xmlNodePtr to_xml_gmonth(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "72: static xmlNodePtr to_xml_duration(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "77: static xmlNodePtr to_xml_object(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "78: static xmlNodePtr to_xml_array(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "81: static xmlNodePtr to_xml_any(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "85: static xmlNodePtr guess_xml_convert(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "87: static int is_map(zval *array);",
          "",
          "[Removed Lines]",
          "74: static zval *to_zval_object(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "75: static zval *to_zval_array(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "80: static zval *to_zval_any(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "84: static zval *guess_zval_convert(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "",
          "[Added Lines]",
          "74: static zval *to_zval_object(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "75: static zval *to_zval_array(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "80: static zval *to_zval_any(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "84: static zval *guess_zval_convert(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:  { \\",
          "119:   xmlAttrPtr null; \\",
          "120:   if (!xml) { \\",
          "123:    ZVAL_NULL(ret); \\",
          "124:    return ret; \\",
          "125:   } \\",
          "126:   if (xml->properties) { \\",
          "127:    null = get_attribute(xml->properties, \"nil\"); \\",
          "128:    if (null) { \\",
          "131:     ZVAL_NULL(ret); \\",
          "132:     return ret; \\",
          "133:    } \\",
          "",
          "[Removed Lines]",
          "121:    zval *ret; \\",
          "122:    ALLOC_INIT_ZVAL(ret); \\",
          "129:     zval *ret; \\",
          "130:     ALLOC_INIT_ZVAL(ret); \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151:  {{IS_STRING, XSD_STRING_STRING, XSD_NAMESPACE, NULL}, to_zval_string, to_xml_string},",
          "152:  {{IS_LONG, XSD_INT_STRING, XSD_NAMESPACE, NULL}, to_zval_long, to_xml_long},",
          "153:  {{IS_DOUBLE, XSD_FLOAT_STRING, XSD_NAMESPACE, NULL}, to_zval_double, to_xml_double},",
          "155:  {{IS_CONSTANT, XSD_STRING_STRING, XSD_NAMESPACE, NULL}, to_zval_string, to_xml_string},",
          "156:  {{IS_ARRAY, SOAP_ENC_ARRAY_STRING, SOAP_1_1_ENC_NAMESPACE, NULL}, to_zval_array, guess_array_map},",
          "157:  {{IS_OBJECT, SOAP_ENC_OBJECT_STRING, SOAP_1_1_ENC_NAMESPACE, NULL}, to_zval_object, to_xml_object},",
          "",
          "[Removed Lines]",
          "154:  {{IS_BOOL, XSD_BOOLEAN_STRING, XSD_NAMESPACE, NULL}, to_zval_bool, to_xml_bool},",
          "",
          "[Added Lines]",
          "150:  {{IS_FALSE, XSD_BOOLEAN_STRING, XSD_NAMESPACE, NULL}, to_zval_bool, to_xml_bool},",
          "151:  {{IS_TRUE, XSD_BOOLEAN_STRING, XSD_NAMESPACE, NULL}, to_zval_bool, to_xml_bool},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "275: static encodePtr find_encoder_by_type_name(sdlPtr sdl, const char *type)",
          "276: {",
          "277:  if (sdl && sdl->encoders) {",
          "286:    }",
          "288:  }",
          "289:  return NULL;",
          "290: }",
          "292: static zend_bool soap_check_zval_ref(zval *data, xmlNodePtr node TSRMLS_DC) {",
          "295:  if (SOAP_GLOBAL(ref_map)) {",
          "296:   if (Z_TYPE_P(data) == IS_OBJECT) {",
          "298:   }",
          "301:    char *id;",
          "302:    smart_str prefix = {0};",
          "305:     return 0;",
          "306:    }",
          "309:    if (SOAP_GLOBAL(soap_version) == SOAP_1_1) {",
          "310:     while (1) {",
          "311:      attr = get_attribute(attr, \"id\");",
          "",
          "[Removed Lines]",
          "278:   HashPosition pos;",
          "279:   encodePtr *enc;",
          "281:   for (zend_hash_internal_pointer_reset_ex(sdl->encoders, &pos);",
          "282:        zend_hash_get_current_data_ex(sdl->encoders, (void **) &enc, &pos) == SUCCESS;",
          "283:        zend_hash_move_forward_ex(sdl->encoders, &pos)) {",
          "284:       if (strcmp((*enc)->details.type_str, type) == 0) {",
          "285:     return *enc;",
          "287:   }",
          "293:  xmlNodePtr *node_ptr;",
          "297:    data = (zval*)zend_objects_get_address(data TSRMLS_CC);",
          "299:   if (zend_hash_index_find(SOAP_GLOBAL(ref_map), (ulong)data, (void**)&node_ptr) == SUCCESS) {",
          "300:    xmlAttrPtr attr = (*node_ptr)->properties;",
          "304:    if (*node_ptr == node) {",
          "307:    xmlNodeSetName(node, (*node_ptr)->name);",
          "308:    xmlSetNs(node, (*node_ptr)->ns);",
          "",
          "[Added Lines]",
          "275:   encodePtr enc;",
          "277:   ZEND_HASH_FOREACH_PTR(sdl->encoders, enc)  {",
          "278:       if (strcmp(enc->details.type_str, type) == 0) {",
          "279:     return enc;",
          "281:   } ZEND_HASH_FOREACH_END();",
          "287:  xmlNodePtr node_ptr;",
          "291:    data = (zval*)Z_OBJ_P(data);",
          "293:   if ((node_ptr = zend_hash_index_find_ptr(SOAP_GLOBAL(ref_map), (ulong)data)) != NULL) {",
          "294:    xmlAttrPtr attr = node_ptr->properties;",
          "298:    if (node_ptr == node) {",
          "301:    xmlNodeSetName(node, node_ptr->name);",
          "302:    xmlSetNs(node, node_ptr->ns);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "319:      smart_str_appendc(&prefix, '#');",
          "320:      smart_str_appends(&prefix, id);",
          "321:      smart_str_0(&prefix);",
          "323:     } else {",
          "324:      SOAP_GLOBAL(cur_uniq_ref)++;",
          "325:      smart_str_appendl(&prefix, \"#ref\", 4);",
          "326:      smart_str_append_long(&prefix, SOAP_GLOBAL(cur_uniq_ref));",
          "327:      smart_str_0(&prefix);",
          "330:     }",
          "331:     xmlSetProp(node, BAD_CAST(\"href\"), BAD_CAST(id));",
          "332:    } else {",
          "",
          "[Removed Lines]",
          "322:      id = prefix.c;",
          "328:      id = prefix.c;",
          "329:      xmlSetProp((*node_ptr), BAD_CAST(\"id\"), BAD_CAST(id+1));",
          "",
          "[Added Lines]",
          "316:      id = prefix.s->val;",
          "322:      id = prefix.s->val;",
          "323:      xmlSetProp(node_ptr, BAD_CAST(\"id\"), BAD_CAST(id+1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "336:      smart_str_appendc(&prefix, '#');",
          "337:      smart_str_appends(&prefix, id);",
          "338:      smart_str_0(&prefix);",
          "340:     } else {",
          "341:      SOAP_GLOBAL(cur_uniq_ref)++;",
          "342:      smart_str_appendl(&prefix, \"#ref\", 4);",
          "343:      smart_str_append_long(&prefix, SOAP_GLOBAL(cur_uniq_ref));",
          "344:      smart_str_0(&prefix);",
          "347:     }",
          "348:     set_ns_prop(node, SOAP_1_2_ENC_NAMESPACE, \"ref\", id);",
          "349:    }",
          "350:    smart_str_free(&prefix);",
          "351:    return 1;",
          "352:   } else {",
          "354:   }",
          "355:  }",
          "356:  return 0;",
          "",
          "[Removed Lines]",
          "339:      id = prefix.c;",
          "345:      id = prefix.c;",
          "346:      set_ns_prop((*node_ptr), SOAP_1_2_ENC_NAMESPACE, \"id\", id+1);",
          "353:    zend_hash_index_update(SOAP_GLOBAL(ref_map), (ulong)data, (void**)&node, sizeof(xmlNodePtr), NULL);",
          "",
          "[Added Lines]",
          "333:      id = prefix.s->val;",
          "339:      id = prefix.s->val;",
          "340:      set_ns_prop(node_ptr, SOAP_1_2_ENC_NAMESPACE, \"id\", id+1);",
          "347:    zend_hash_index_update_ptr(SOAP_GLOBAL(ref_map), (ulong)data, node);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "359: static zval* soap_find_xml_ref(xmlNodePtr node TSRMLS_DC)",
          "360: {",
          "363:  if (SOAP_GLOBAL(ref_map) &&",
          "368:  }",
          "369:  return NULL;",
          "370: }",
          "373: {",
          "376:  if (SOAP_GLOBAL(ref_map)) {",
          "379:     zval_ptr_dtor(data);",
          "383:     return 1;",
          "384:    }",
          "385:   } else {",
          "387:   }",
          "388:  }",
          "389:  return 0;",
          "",
          "[Removed Lines]",
          "361:  zval **data_ptr;",
          "364:      zend_hash_index_find(SOAP_GLOBAL(ref_map), (ulong)node, (void**)&data_ptr) == SUCCESS) {",
          "365:   Z_SET_ISREF_PP(data_ptr);",
          "366:   Z_ADDREF_PP(data_ptr);",
          "367:   return *data_ptr;",
          "372: static zend_bool soap_check_xml_ref(zval **data, xmlNodePtr node TSRMLS_DC)",
          "374:  zval **data_ptr;",
          "377:   if (zend_hash_index_find(SOAP_GLOBAL(ref_map), (ulong)node, (void**)&data_ptr) == SUCCESS) {",
          "378:    if (*data != *data_ptr) {",
          "381:     Z_SET_ISREF_PP(data);",
          "382:     Z_ADDREF_PP(data);",
          "386:    zend_hash_index_update(SOAP_GLOBAL(ref_map), (ulong)node, (void**)data, sizeof(zval*), NULL);",
          "",
          "[Added Lines]",
          "355:  zval *data_ptr;",
          "358:      (data_ptr = zend_hash_index_find(SOAP_GLOBAL(ref_map), (ulong)node)) != NULL) {",
          "360:      SEPARATE_ZVAL_TO_MAKE_IS_REF(data_ptr);",
          "361:   Z_ADDREF_P(data_ptr);",
          "362:   return data_ptr;",
          "367: static zend_bool soap_check_xml_ref(zval *data, xmlNodePtr node TSRMLS_DC)",
          "369:  zval *data_ptr;",
          "372:   if ((data_ptr = zend_hash_index_find(SOAP_GLOBAL(ref_map), (ulong)node)) != NULL) {",
          "373:    if (data != data_ptr) {",
          "375:     ZVAL_COPY_VALUE(data, data_ptr);",
          "377:        SEPARATE_ZVAL_TO_MAKE_IS_REF(data);",
          "378:     Z_ADDREF_P(data);",
          "382:    zend_hash_index_update(SOAP_GLOBAL(ref_map), (ulong)node, data);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "398:  if (data &&",
          "399:      Z_TYPE_P(data) == IS_OBJECT &&",
          "400:      Z_OBJCE_P(data) == soap_var_class_entry) {",
          "402:   encodePtr enc = NULL;",
          "403:   HashTable *ht = Z_OBJPROP_P(data);",
          "406:    soap_error0(E_ERROR, \"Encoding: SoapVar has no 'enc_type' property\");",
          "407:   }",
          "412:    } else {",
          "413:     zns = NULL;",
          "415:    }",
          "416:    if (enc == NULL && SOAP_GLOBAL(typemap)) {",
          "418:     smart_str nscat = {0};",
          "420:     if (zns != NULL) {",
          "422:      smart_str_appendc(&nscat, ':');",
          "423:     }",
          "425:     smart_str_0(&nscat);",
          "429:     smart_str_free(&nscat);",
          "430:    }",
          "431:   }",
          "432:   if (enc == NULL) {",
          "434:   }",
          "435:   if (enc == NULL) {",
          "436:    enc = encode;",
          "437:   }",
          "445:   if (style == SOAP_ENCODED || (SOAP_GLOBAL(sdl) && encode != enc)) {",
          "449:     } else {",
          "451:     }",
          "452:    }",
          "453:   }",
          "457:   }",
          "460:    xmlSetNs(node, nsp);",
          "461:   }",
          "462:  } else {",
          "463:   if (check_class_map && SOAP_GLOBAL(class_map) && data &&",
          "464:       Z_TYPE_P(data) == IS_OBJECT &&",
          "466:    zend_class_entry *ce = Z_OBJCE_P(data);",
          "482:      encodePtr enc = NULL;",
          "483:      if (SOAP_GLOBAL(sdl)) {",
          "485:       if (!enc) {",
          "487:       }",
          "488:      }",
          "489:      if (enc) {",
          "",
          "[Removed Lines]",
          "401:   zval **ztype, **zdata, **zns, **zstype, **zname, **znamens;",
          "405:   if (zend_hash_find(ht, \"enc_type\", sizeof(\"enc_type\"), (void **)&ztype) == FAILURE) {",
          "409:   if (zend_hash_find(ht, \"enc_stype\", sizeof(\"enc_stype\"), (void **)&zstype) == SUCCESS) {",
          "410:    if (zend_hash_find(ht, \"enc_ns\", sizeof(\"enc_ns\"), (void **)&zns) == SUCCESS) {",
          "411:     enc = get_encoder(SOAP_GLOBAL(sdl), Z_STRVAL_PP(zns), Z_STRVAL_PP(zstype));",
          "414:     enc = get_encoder_ex(SOAP_GLOBAL(sdl), Z_STRVAL_PP(zstype), Z_STRLEN_PP(zstype));",
          "417:     encodePtr *new_enc;",
          "421:      smart_str_appendl(&nscat, Z_STRVAL_PP(zns), Z_STRLEN_PP(zns));",
          "424:     smart_str_appendl(&nscat, Z_STRVAL_PP(zstype), Z_STRLEN_PP(zstype));",
          "426:     if (zend_hash_find(SOAP_GLOBAL(typemap), nscat.c, nscat.len + 1, (void**)&new_enc) == SUCCESS) {",
          "427:      enc = *new_enc;",
          "428:     }",
          "433:    enc = get_conversion(Z_LVAL_P(*ztype));",
          "439:   if (zend_hash_find(ht, \"enc_value\", sizeof(\"enc_value\"), (void **)&zdata) == FAILURE) {",
          "440:    node = master_to_xml(enc, NULL, style, parent TSRMLS_CC);",
          "441:   } else {",
          "442:    node = master_to_xml(enc, *zdata, style, parent TSRMLS_CC);",
          "443:   }",
          "446:    if (zend_hash_find(ht, \"enc_stype\", sizeof(\"enc_stype\"), (void **)&zstype) == SUCCESS) {",
          "447:     if (zend_hash_find(ht, \"enc_ns\", sizeof(\"enc_ns\"), (void **)&zns) == SUCCESS) {",
          "448:      set_ns_and_type_ex(node, Z_STRVAL_PP(zns), Z_STRVAL_PP(zstype));",
          "450:      set_ns_and_type_ex(node, NULL, Z_STRVAL_PP(zstype));",
          "455:   if (zend_hash_find(ht, \"enc_name\", sizeof(\"enc_name\"), (void **)&zname) == SUCCESS) {",
          "456:    xmlNodeSetName(node, BAD_CAST(Z_STRVAL_PP(zname)));",
          "458:   if (zend_hash_find(ht, \"enc_namens\", sizeof(\"enc_namens\"), (void **)&znamens) == SUCCESS) {",
          "459:    xmlNsPtr nsp = encode_add_ns(node, Z_STRVAL_PP(znamens));",
          "465:       !Z_OBJPROP_P(data)->nApplyCount) {",
          "467:    HashPosition pos;",
          "468:    zval **tmp;",
          "469:    char *type_name = NULL;",
          "470:    uint type_len;",
          "471:    ulong idx;",
          "473:    for (zend_hash_internal_pointer_reset_ex(SOAP_GLOBAL(class_map), &pos);",
          "474:         zend_hash_get_current_data_ex(SOAP_GLOBAL(class_map), (void **) &tmp, &pos) == SUCCESS;",
          "475:         zend_hash_move_forward_ex(SOAP_GLOBAL(class_map), &pos)) {",
          "476:     if (Z_TYPE_PP(tmp) == IS_STRING &&",
          "477:         ce->name_length == Z_STRLEN_PP(tmp) &&",
          "478:         zend_binary_strncasecmp(ce->name, ce->name_length, Z_STRVAL_PP(tmp), ce->name_length, ce->name_length) == 0 &&",
          "479:         zend_hash_get_current_key_ex(SOAP_GLOBAL(class_map), &type_name, &type_len, &idx, 0, &pos) == HASH_KEY_IS_STRING) {",
          "484:       enc = get_encoder(SOAP_GLOBAL(sdl), SOAP_GLOBAL(sdl)->target_ns, type_name);",
          "486:        enc = find_encoder_by_type_name(SOAP_GLOBAL(sdl), type_name);",
          "",
          "[Added Lines]",
          "397:   zval *ztype, *zdata, *zns, *zstype, *zname, *znamens;",
          "401:   if ((ztype = zend_hash_str_find(ht, \"enc_type\", sizeof(\"enc_type\")-1)) == NULL) {",
          "405:   if ((zstype = zend_hash_str_find(ht, \"enc_stype\", sizeof(\"enc_stype\")-1)) != NULL) {",
          "406:    if ((zns = zend_hash_str_find(ht, \"enc_ns\", sizeof(\"enc_ns\")-1)) != NULL) {",
          "407:     enc = get_encoder(SOAP_GLOBAL(sdl), Z_STRVAL_P(zns), Z_STRVAL_P(zstype));",
          "410:     enc = get_encoder_ex(SOAP_GLOBAL(sdl), Z_STRVAL_P(zstype), Z_STRLEN_P(zstype));",
          "416:      smart_str_appendl(&nscat, Z_STRVAL_P(zns), Z_STRLEN_P(zns));",
          "419:     smart_str_appendl(&nscat, Z_STRVAL_P(zstype), Z_STRLEN_P(zstype));",
          "421:     enc = zend_hash_find_ptr(SOAP_GLOBAL(typemap), nscat.s);",
          "426:    enc = get_conversion(Z_LVAL_P(ztype));",
          "432:   zdata = zend_hash_str_find(ht, \"enc_value\", sizeof(\"enc_value\")-1);",
          "433:   node = master_to_xml(enc, zdata, style, parent TSRMLS_CC);",
          "436:    if ((ztype = zend_hash_str_find(ht, \"enc_stype\", sizeof(\"enc_stype\")-1)) != NULL) {",
          "437:     if ((zns = zend_hash_str_find(ht, \"enc_ns\", sizeof(\"enc_ns\")-1)) != NULL) {",
          "438:      set_ns_and_type_ex(node, Z_STRVAL_P(zns), Z_STRVAL_P(zstype));",
          "440:      set_ns_and_type_ex(node, NULL, Z_STRVAL_P(zstype));",
          "445:   if ((zname = zend_hash_str_find(ht, \"enc_name\", sizeof(\"enc_name\")-1)) != NULL) {",
          "446:    xmlNodeSetName(node, BAD_CAST(Z_STRVAL_P(zname)));",
          "448:   if ((znamens = zend_hash_str_find(ht, \"enc_namens\", sizeof(\"enc_namens\")-1)) != NULL) {",
          "449:    xmlNsPtr nsp = encode_add_ns(node, Z_STRVAL_P(znamens));",
          "455:       !ZEND_HASH_GET_APPLY_COUNT(Z_OBJPROP_P(data))) {",
          "457:    zval *tmp;",
          "458:    zend_string *type_name;",
          "460:    ZEND_HASH_FOREACH_STR_KEY_VAL(SOAP_GLOBAL(class_map), type_name, tmp) {",
          "461:     if (Z_TYPE_P(tmp) == IS_STRING &&",
          "462:         ce->name->len == Z_STRLEN_P(tmp) &&",
          "463:         zend_binary_strncasecmp(ce->name->val, ce->name->len, Z_STRVAL_P(tmp), ce->name->len, ce->name->len) == 0 &&",
          "464:         type_name) {",
          "469:       enc = get_encoder(SOAP_GLOBAL(sdl), SOAP_GLOBAL(sdl)->target_ns, type_name->val);",
          "471:        enc = find_encoder_by_type_name(SOAP_GLOBAL(sdl), type_name->val);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "494:      }",
          "495:      break;",
          "496:     }",
          "498:   }",
          "500:   if (encode == NULL) {",
          "",
          "[Removed Lines]",
          "497:    }",
          "",
          "[Added Lines]",
          "482:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "502:   }",
          "503:   if (SOAP_GLOBAL(typemap) && encode->details.type_str) {",
          "504:    smart_str nscat = {0};",
          "507:    if (encode->details.ns) {",
          "508:     smart_str_appends(&nscat, encode->details.ns);",
          "",
          "[Removed Lines]",
          "505:    encodePtr *new_enc;",
          "",
          "[Added Lines]",
          "490:    encodePtr new_enc;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "510:    }",
          "511:    smart_str_appends(&nscat, encode->details.type_str);",
          "512:    smart_str_0(&nscat);",
          "515:    }",
          "516:    smart_str_free(&nscat);",
          "517:   }",
          "",
          "[Removed Lines]",
          "513:    if (zend_hash_find(SOAP_GLOBAL(typemap), nscat.c, nscat.len + 1, (void**)&new_enc) == SUCCESS) {",
          "514:     encode = *new_enc;",
          "",
          "[Added Lines]",
          "498:    if ((new_enc = zend_hash_find_ptr(SOAP_GLOBAL(typemap), nscat.s)) != NULL) {",
          "499:     encode = new_enc;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "530:  return master_to_xml_int(encode, data, style, parent, 1 TSRMLS_CC);",
          "531: }",
          "534: {",
          "537:  if (SOAP_GLOBAL(typemap)) {",
          "538:   if (encode->details.type_str) {",
          "539:    smart_str nscat = {0};",
          "542:    if (encode->details.ns) {",
          "543:     smart_str_appends(&nscat, encode->details.ns);",
          "",
          "[Removed Lines]",
          "533: static zval *master_to_zval_int(encodePtr encode, xmlNodePtr data TSRMLS_DC)",
          "535:  zval *ret = NULL;",
          "540:    encodePtr *new_enc;",
          "",
          "[Added Lines]",
          "518: static zval *master_to_zval_int(zval *ret, encodePtr encode, xmlNodePtr data TSRMLS_DC)",
          "523:    encodePtr new_enc;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "545:    }",
          "546:    smart_str_appends(&nscat, encode->details.type_str);",
          "547:    smart_str_0(&nscat);",
          "550:    }",
          "551:    smart_str_free(&nscat);",
          "552:   } else {",
          "553:    xmlAttrPtr type_attr = get_attribute_ex(data->properties,\"type\", XSI_NAMESPACE);",
          "555:    if (type_attr != NULL) {",
          "557:     xmlNsPtr nsptr;",
          "558:     char *ns, *cptype;",
          "559:     smart_str nscat = {0};",
          "",
          "[Removed Lines]",
          "548:    if (zend_hash_find(SOAP_GLOBAL(typemap), nscat.c, nscat.len + 1, (void**)&new_enc) == SUCCESS) {",
          "549:     encode = *new_enc;",
          "556:     encodePtr *new_enc;",
          "",
          "[Added Lines]",
          "531:    if ((new_enc = zend_hash_find_ptr(SOAP_GLOBAL(typemap), nscat.s)) != NULL) {",
          "532:     encode = new_enc;",
          "539:     encodePtr new_enc;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "568:     smart_str_0(&nscat);",
          "569:     efree(cptype);",
          "570:     if (ns) {efree(ns);}",
          "573:     }",
          "574:     smart_str_free(&nscat);",
          "575:    }",
          "576:   }",
          "577:  }",
          "578:  if (encode->to_zval) {",
          "580:  }",
          "581:  return ret;",
          "582: }",
          "585: {",
          "586:  data = check_and_resolve_href(data);",
          "",
          "[Removed Lines]",
          "571:     if (zend_hash_find(SOAP_GLOBAL(typemap), nscat.c, nscat.len + 1, (void**)&new_enc) == SUCCESS) {",
          "572:      encode = *new_enc;",
          "579:   ret = encode->to_zval(&encode->details, data TSRMLS_CC);",
          "584: zval *master_to_zval(encodePtr encode, xmlNodePtr data TSRMLS_DC)",
          "",
          "[Added Lines]",
          "554:     if ((new_enc = zend_hash_find_ptr(SOAP_GLOBAL(typemap), nscat.s)) != NULL) {",
          "555:      encode = new_enc;",
          "562:   ret = encode->to_zval(ret, &encode->details, data TSRMLS_CC);",
          "567: zval *master_to_zval(zval *ret, encodePtr encode, xmlNodePtr data TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "612:    }",
          "613:   }",
          "614:  }",
          "616: }",
          "618: xmlNodePtr to_xml_user(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC)",
          "619: {",
          "620:  xmlNodePtr ret = NULL;",
          "627:    soap_error0(E_ERROR, \"Encoding: Error calling to_xml callback\");",
          "628:   }",
          "631:    if (doc && doc->children) {",
          "632:     ret = xmlDocCopyNode(doc->children, parent->doc, 1);",
          "633:    }",
          "",
          "[Removed Lines]",
          "615:  return master_to_zval_int(encode, data TSRMLS_CC);",
          "621:  zval *return_value;",
          "623:  if (type && type->map && type->map->to_xml) {",
          "624:   MAKE_STD_ZVAL(return_value);",
          "626:   if (call_user_function(EG(function_table), NULL, type->map->to_xml, return_value, 1, &data TSRMLS_CC) == FAILURE) {",
          "629:   if (Z_TYPE_P(return_value) == IS_STRING) {",
          "630:    xmlDocPtr doc = soap_xmlParseMemory(Z_STRVAL_P(return_value), Z_STRLEN_P(return_value));",
          "",
          "[Added Lines]",
          "598:  return master_to_zval_int(ret, encode, data TSRMLS_CC);",
          "604:  zval return_value;",
          "606:  if (type && type->map && Z_TYPE(type->map->to_xml) != IS_UNDEF) {",
          "607:   ZVAL_NULL(&return_value);",
          "609:   if (call_user_function(EG(function_table), NULL, &type->map->to_xml, &return_value, 1, data TSRMLS_CC) == FAILURE) {",
          "612:   if (Z_TYPE(return_value) == IS_STRING) {",
          "613:    xmlDocPtr doc = soap_xmlParseMemory(Z_STRVAL(return_value), Z_STRLEN(return_value));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "646:  return ret;",
          "647: }",
          "650: {",
          "654:   xmlBufferPtr buf;",
          "656:   xmlNodePtr copy;",
          "658:   copy = xmlCopyNode(node, 1);",
          "659:   buf = xmlBufferCreate();",
          "660:   xmlNodeDump(buf, NULL, copy, 0, 0);",
          "663:   xmlBufferFree(buf);",
          "664:   xmlFreeNode(copy);",
          "669:    soap_error0(E_ERROR, \"Encoding: Error calling from_xml callback\");",
          "670:   }",
          "671:   zval_ptr_dtor(&data);",
          "672:  } else {",
          "674:  }",
          "676: }",
          "681: {",
          "684:  FIND_XML_NULL(data, ret);",
          "685:  if (data && data->children) {",
          "686:   if (data->children->type == XML_TEXT_NODE && data->children->next == NULL) {",
          "",
          "[Removed Lines]",
          "649: zval *to_zval_user(encodeTypePtr type, xmlNodePtr node TSRMLS_DC)",
          "651:  zval *return_value;",
          "653:  if (type && type->map && type->map->to_zval) {",
          "655:   zval *data;",
          "661:   MAKE_STD_ZVAL(data);",
          "662:   ZVAL_STRING(data, (char*)xmlBufferContent(buf), 1);",
          "666:   ALLOC_INIT_ZVAL(return_value);",
          "668:   if (call_user_function(EG(function_table), NULL, type->map->to_zval, return_value, 1, &data TSRMLS_CC) == FAILURE) {",
          "673:   ALLOC_INIT_ZVAL(return_value);",
          "675:  return return_value;",
          "680: static zval *to_zval_string(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "682:  zval *ret;",
          "683:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "632: zval *to_zval_user(zval *ret, encodeTypePtr type, xmlNodePtr node TSRMLS_DC)",
          "634:  if (type && type->map && Z_TYPE(type->map->to_zval) != IS_UNDEF) {",
          "636:   zval data;",
          "642:   ZVAL_STRING(&data, (char*)xmlBufferContent(buf));",
          "646:   ZVAL_NULL(ret);",
          "648:   if (call_user_function(EG(function_table), NULL, &type->map->to_zval, ret, 1, &data TSRMLS_CC) == FAILURE) {",
          "653:   ZVAL_NULL(ret);",
          "655:  return ret;",
          "660: static zval *to_zval_string(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "662:  ZVAL_NULL(ret);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "690:     int n = xmlCharEncOutFunc(SOAP_GLOBAL(encoding), out, in);",
          "692:     if (n >= 0) {",
          "694:     } else {",
          "696:     }",
          "697:     xmlBufferFree(out);",
          "698:     xmlBufferFree(in);",
          "699:    } else {",
          "701:    }",
          "702:   } else if (data->children->type == XML_CDATA_SECTION_NODE && data->children->next == NULL) {",
          "704:   } else {",
          "705:    soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "706:   }",
          "",
          "[Removed Lines]",
          "693:      ZVAL_STRING(ret, (char*)xmlBufferContent(out), 1);",
          "695:      ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "700:     ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "703:    ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "",
          "[Added Lines]",
          "672:      ZVAL_STRING(ret, (char*)xmlBufferContent(out));",
          "674:      ZVAL_STRING(ret, (char*)data->children->content);",
          "679:     ZVAL_STRING(ret, (char*)data->children->content);",
          "682:    ZVAL_STRING(ret, (char*)data->children->content);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "710:  return ret;",
          "711: }",
          "714: {",
          "717:  FIND_XML_NULL(data, ret);",
          "718:  if (data && data->children) {",
          "719:   if (data->children->type == XML_TEXT_NODE && data->children->next == NULL) {",
          "",
          "[Removed Lines]",
          "713: static zval *to_zval_stringr(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "715:  zval *ret;",
          "716:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "692: static zval *to_zval_stringr(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "694:  ZVAL_NULL(ret);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "724:     int n = xmlCharEncOutFunc(SOAP_GLOBAL(encoding), out, in);",
          "726:     if (n >= 0) {",
          "728:     } else {",
          "730:     }",
          "731:     xmlBufferFree(out);",
          "732:     xmlBufferFree(in);",
          "733:    } else {",
          "735:    }",
          "736:   } else if (data->children->type == XML_CDATA_SECTION_NODE && data->children->next == NULL) {",
          "738:   } else {",
          "739:    soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "740:   }",
          "",
          "[Removed Lines]",
          "727:      ZVAL_STRING(ret, (char*)xmlBufferContent(out), 1);",
          "729:      ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "734:     ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "737:    ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "",
          "[Added Lines]",
          "705:      ZVAL_STRING(ret, (char*)xmlBufferContent(out));",
          "707:      ZVAL_STRING(ret, (char*)data->children->content);",
          "712:     ZVAL_STRING(ret, (char*)data->children->content);",
          "715:    ZVAL_STRING(ret, (char*)data->children->content);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "744:  return ret;",
          "745: }",
          "748: {",
          "751:  FIND_XML_NULL(data, ret);",
          "752:  if (data && data->children) {",
          "753:   if (data->children->type == XML_TEXT_NODE && data->children->next == NULL) {",
          "",
          "[Removed Lines]",
          "747: static zval *to_zval_stringc(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "749:  zval *ret;",
          "750:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "725: static zval *to_zval_stringc(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "727:  ZVAL_NULL(ret);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "758:     int n = xmlCharEncOutFunc(SOAP_GLOBAL(encoding), out, in);",
          "760:     if (n >= 0) {",
          "762:     } else {",
          "764:     }",
          "765:     xmlBufferFree(out);",
          "766:     xmlBufferFree(in);",
          "767:    } else {",
          "769:    }",
          "770:   } else if (data->children->type == XML_CDATA_SECTION_NODE && data->children->next == NULL) {",
          "772:   } else {",
          "773:    soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "774:   }",
          "",
          "[Removed Lines]",
          "761:      ZVAL_STRING(ret, (char*)xmlBufferContent(out), 1);",
          "763:      ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "768:     ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "771:    ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "",
          "[Added Lines]",
          "738:      ZVAL_STRING(ret, (char*)xmlBufferContent(out));",
          "740:      ZVAL_STRING(ret, (char*)data->children->content);",
          "745:     ZVAL_STRING(ret, (char*)data->children->content);",
          "748:    ZVAL_STRING(ret, (char*)data->children->content);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "778:  return ret;",
          "779: }",
          "782: {",
          "788:  FIND_XML_NULL(data, ret);",
          "789:  if (data && data->children) {",
          "790:   if (data->children->type == XML_TEXT_NODE && data->children->next == NULL) {",
          "791:    whiteSpace_collapse(data->children->content);",
          "793:    if (!str) {",
          "794:     soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "795:    }",
          "797:   } else if (data->children->type == XML_CDATA_SECTION_NODE && data->children->next == NULL) {",
          "799:    if (!str) {",
          "800:     soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "801:    }",
          "803:   } else {",
          "804:    soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "805:   }",
          "",
          "[Removed Lines]",
          "781: static zval *to_zval_base64(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "783:  zval *ret;",
          "784:  char *str;",
          "785:  int str_len;",
          "787:  MAKE_STD_ZVAL(ret);",
          "792:    str = (char*)php_base64_decode(data->children->content, strlen((char*)data->children->content), &str_len);",
          "796:    ZVAL_STRINGL(ret, str, str_len, 0);",
          "798:    str = (char*)php_base64_decode(data->children->content, strlen((char*)data->children->content), &str_len);",
          "802:    ZVAL_STRINGL(ret, str, str_len, 0);",
          "",
          "[Added Lines]",
          "758: static zval *to_zval_base64(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "760:  zend_string *str;",
          "762:  ZVAL_NULL(ret);",
          "767:    str = php_base64_decode(data->children->content, strlen((char*)data->children->content));",
          "771:    ZVAL_STR(ret, str);",
          "773:    str = php_base64_decode(data->children->content, strlen((char*)data->children->content));",
          "777:    ZVAL_STR(ret, str);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "809:  return ret;",
          "810: }",
          "813: {",
          "817:  unsigned char c;",
          "820:  FIND_XML_NULL(data, ret);",
          "821:  if (data && data->children) {",
          "822:   if (data->children->type == XML_TEXT_NODE && data->children->next == NULL) {",
          "",
          "[Removed Lines]",
          "812: static zval *to_zval_hexbin(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "814:  zval *ret;",
          "815:  unsigned char *str;",
          "816:  int str_len, i, j;",
          "819:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "787: static zval *to_zval_hexbin(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "789:  zend_string *str;",
          "790:  int i, j;",
          "793:  ZVAL_NULL(ret);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "825:    soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "826:    return ret;",
          "827:   }",
          "831:    c = data->children->content[j++];",
          "832:    if (c >= '0' && c <= '9') {",
          "834:    } else if (c >= 'a' && c <= 'f') {",
          "836:    } else if (c >= 'A' && c <= 'F') {",
          "838:    } else {",
          "839:     soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "840:    }",
          "841:    c = data->children->content[j++];",
          "842:    if (c >= '0' && c <= '9') {",
          "844:    } else if (c >= 'a' && c <= 'f') {",
          "846:    } else if (c >= 'A' && c <= 'F') {",
          "848:    } else {",
          "849:     soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "850:    }",
          "851:   }",
          "854:  } else {",
          "855:   ZVAL_EMPTY_STRING(ret);",
          "856:  }",
          "",
          "[Removed Lines]",
          "828:   str_len = strlen((char*)data->children->content) / 2;",
          "829:   str = emalloc(str_len+1);",
          "830:   for (i = j = 0; i < str_len; i++) {",
          "833:     str[i] = (c - '0') << 4;",
          "835:     str[i] = (c - 'a' + 10) << 4;",
          "837:     str[i] = (c - 'A' + 10) << 4;",
          "843:     str[i] |= c - '0';",
          "845:     str[i] |= c - 'a' + 10;",
          "847:     str[i] |= c - 'A' + 10;",
          "852:   str[str_len] = '\\0';",
          "853:   ZVAL_STRINGL(ret, (char*)str, str_len, 0);",
          "",
          "[Added Lines]",
          "802:   str = STR_ALLOC(strlen((char*)data->children->content) / 2, 0);",
          "803:   for (i = j = 0; i < str->len; i++) {",
          "806:     str->val[i] = (c - '0') << 4;",
          "808:     str->val[i] = (c - 'a' + 10) << 4;",
          "810:     str->val[i] = (c - 'A' + 10) << 4;",
          "816:     str->val[i] |= c - '0';",
          "818:     str->val[i] |= c - 'a' + 10;",
          "820:     str->val[i] |= c - 'A' + 10;",
          "825:   str->val[str->len] = '\\0';",
          "826:   ZVAL_STR(ret, str);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "948: static xmlNodePtr to_xml_base64(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC)",
          "949: {",
          "950:  xmlNodePtr ret, text;",
          "954:  ret = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "955:  xmlAddChild(parent, ret);",
          "956:  FIND_ZVAL_NULL(data, ret, style);",
          "958:  if (Z_TYPE_P(data) == IS_STRING) {",
          "961:   xmlAddChild(ret, text);",
          "963:  } else {",
          "967:   convert_to_string(&tmp);",
          "970:   xmlAddChild(ret, text);",
          "972:   zval_dtor(&tmp);",
          "973:  }",
          "",
          "[Removed Lines]",
          "951:  unsigned char *str;",
          "952:  int str_len;",
          "959:   str = php_base64_encode((unsigned char*)Z_STRVAL_P(data), Z_STRLEN_P(data), &str_len);",
          "960:   text = xmlNewTextLen(str, str_len);",
          "962:   efree(str);",
          "964:   zval tmp = *data;",
          "966:   zval_copy_ctor(&tmp);",
          "968:   str = php_base64_encode((unsigned char*)Z_STRVAL(tmp), Z_STRLEN(tmp), &str_len);",
          "969:   text = xmlNewTextLen(str, str_len);",
          "971:   efree(str);",
          "",
          "[Added Lines]",
          "924:  zend_string *str;",
          "931:   str = php_base64_encode((unsigned char*)Z_STRVAL_P(data), Z_STRLEN_P(data));",
          "932:   text = xmlNewTextLen(BAD_CAST(str->val), str->len);",
          "934:   STR_RELEASE(str);",
          "936:   zval tmp;",
          "938:   ZVAL_DUP(&tmp, data);",
          "940:   str = php_base64_encode((unsigned char*)Z_STRVAL(tmp), Z_STRLEN(tmp));",
          "941:   text = xmlNewTextLen(BAD_CAST(str->val), str->len);",
          "943:   STR_RELEASE(str);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1017:  return ret;",
          "1018: }",
          "1021: {",
          "1024:  FIND_XML_NULL(data, ret);",
          "1026:  if (data && data->children) {",
          "",
          "[Removed Lines]",
          "1020: static zval *to_zval_double(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "1022:  zval *ret;",
          "1023:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "992: static zval *to_zval_double(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "994:  ZVAL_NULL(ret);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1031:    whiteSpace_collapse(data->children->content);",
          "1032:    switch (is_numeric_string((char*)data->children->content, strlen((char*)data->children->content), &lval, &dval, 0)) {",
          "1033:     case IS_LONG:",
          "1036:      break;",
          "1037:     case IS_DOUBLE:",
          "1040:      break;",
          "1041:     default:",
          "1042:      if (strncasecmp((char*)data->children->content, \"NaN\", sizeof(\"NaN\")-1) == 0) {",
          "",
          "[Removed Lines]",
          "1034:      Z_TYPE_P(ret) = IS_DOUBLE;",
          "1035:      Z_DVAL_P(ret) = lval;",
          "1038:      Z_TYPE_P(ret) = IS_DOUBLE;",
          "1039:      Z_DVAL_P(ret) = dval;",
          "",
          "[Added Lines]",
          "1005:      ZVAL_DOUBLE(ret, lval);",
          "1008:      ZVAL_DOUBLE(ret, dval);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1058:  return ret;",
          "1059: }",
          "1062: {",
          "1065:  FIND_XML_NULL(data, ret);",
          "1067:  if (data && data->children) {",
          "",
          "[Removed Lines]",
          "1061: static zval *to_zval_long(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "1063:  zval *ret;",
          "1064:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "1030: static zval *to_zval_long(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "1032:  ZVAL_NULL(ret);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1072:    whiteSpace_collapse(data->children->content);",
          "1073:    errno = 0;",
          "1076:     case IS_LONG:",
          "1078:      break;",
          "1079:     case IS_DOUBLE:",
          "1081:      break;",
          "1082:     default:",
          "1083:      soap_error0(E_ERROR, \"Encoding: Violation of encoding rules\");",
          "",
          "[Removed Lines]",
          "1075:    switch ((Z_TYPE_P(ret) = is_numeric_string((char*)data->children->content, strlen((char*)data->children->content), &lval, &dval, 0))) {",
          "1077:      Z_LVAL_P(ret) = lval;",
          "1080:      Z_DVAL_P(ret) = dval;",
          "",
          "[Added Lines]",
          "1043:    switch (is_numeric_string((char*)data->children->content, strlen((char*)data->children->content), &lval, &dval, 0)) {",
          "1045:      ZVAL_LONG(ret, lval);",
          "1048:      ZVAL_DOUBLE(ret, dval);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1149:  return ret;",
          "1150: }",
          "1153: {",
          "1156:  FIND_XML_NULL(data, ret);",
          "1158:  if (data && data->children) {",
          "",
          "[Removed Lines]",
          "1152: static zval *to_zval_bool(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "1154:  zval *ret;",
          "1155:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "1120: static zval *to_zval_bool(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "1122:  ZVAL_NULL(ret);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1161:    if (stricmp((char*)data->children->content, \"true\") == 0 ||",
          "1162:     stricmp((char*)data->children->content, \"t\") == 0 ||",
          "1163:     strcmp((char*)data->children->content, \"1\") == 0) {",
          "1165:    } else if (stricmp((char*)data->children->content, \"false\") == 0 ||",
          "1166:     stricmp((char*)data->children->content, \"f\") == 0 ||",
          "1167:     strcmp((char*)data->children->content, \"0\") == 0) {",
          "1169:    } else {",
          "1171:     convert_to_boolean(ret);",
          "1172:    }",
          "1173:   } else {",
          "",
          "[Removed Lines]",
          "1164:     ZVAL_BOOL(ret, 1);",
          "1168:     ZVAL_BOOL(ret, 0);",
          "1170:     ZVAL_STRING(ret, (char*)data->children->content, 1);",
          "",
          "[Added Lines]",
          "1131:     ZVAL_TRUE(ret);",
          "1135:     ZVAL_FALSE(ret);",
          "1137:     ZVAL_STRING(ret, (char*)data->children->content);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1200: }",
          "1204: {",
          "1207:  ZVAL_NULL(ret);",
          "1208:  return ret;",
          "1209: }",
          "",
          "[Removed Lines]",
          "1203: static zval *to_zval_null(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "1205:  zval *ret;",
          "1206:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "1170: static zval *to_zval_null(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1231:  EG(scope) = old_scope;",
          "1232: }",
          "1235: {",
          "1236:  if (Z_TYPE_P(object) == IS_OBJECT) {",
          "1238:   zval *data;",
          "1239:   zend_class_entry *old_scope;",
          "1243:   old_scope = EG(scope);",
          "1244:   EG(scope) = Z_OBJCE_P(object);",
          "1248:    zend_property_info *property_info;",
          "1250:    property_info = zend_get_property_info(Z_OBJCE_P(object), &member, 1 TSRMLS_CC);",
          "1251:    EG(scope) = old_scope;",
          "1253:     return data;",
          "1254:    }",
          "1255:    return NULL;",
          "",
          "[Removed Lines]",
          "1234: static zval* get_zval_property(zval* object, char* name TSRMLS_DC)",
          "1237:   zval member;",
          "1241:   INIT_PZVAL(&member);",
          "1242:   ZVAL_STRING(&member, name, 0);",
          "1245:   data = Z_OBJ_HT_P(object)->read_property(object, &member, BP_VAR_IS, 0 TSRMLS_CC);",
          "1246:   if (data == EG(uninitialized_zval_ptr)) {",
          "1252:    if (property_info && zend_hash_quick_exists(Z_OBJPROP_P(object), property_info->name, property_info->name_length+1, property_info->h)) {",
          "",
          "[Added Lines]",
          "1199: static zval* get_zval_property(zval* object, char* name, zval *rv TSRMLS_DC)",
          "1202:   zval member, rv;",
          "1208:   ZVAL_STRING(&member, name);",
          "1211:   data = Z_OBJ_HT_P(object)->read_property(object, &member, BP_VAR_IS, 0, &rv TSRMLS_CC);",
          "1212:   if (data == &EG(uninitialized_zval)) {",
          "1218:    if (property_info && zend_hash_exists(Z_OBJPROP_P(object), property_info->name)) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1257:   EG(scope) = old_scope;",
          "1258:   return data;",
          "1259:  } else if (Z_TYPE_P(object) == IS_ARRAY) {",
          "1264:   }",
          "1265:  }",
          "1267: }",
          "1269: static void unset_zval_property(zval* object, char* name TSRMLS_DC)",
          "",
          "[Removed Lines]",
          "1260:   zval **data_ptr;",
          "1262:   if (zend_hash_find(Z_ARRVAL_P(object), name, strlen(name)+1, (void**)&data_ptr) == SUCCESS) {",
          "1263:     return *data_ptr;",
          "1266:   return NULL;",
          "",
          "[Added Lines]",
          "1226:   zval *data_ptr;",
          "1228:   if ((data_ptr = zend_hash_str_find(Z_ARRVAL_P(object), name, strlen(name))) != NULL) {",
          "1229:     return data_ptr;",
          "1232:  return NULL;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1272:   zval member;",
          "1273:   zend_class_entry *old_scope;",
          "1277:   old_scope = EG(scope);",
          "1278:   EG(scope) = Z_OBJCE_P(object);",
          "1279:   Z_OBJ_HT_P(object)->unset_property(object, &member, 0 TSRMLS_CC);",
          "1280:   EG(scope) = old_scope;",
          "1281:  } else if (Z_TYPE_P(object) == IS_ARRAY) {",
          "1283:  }",
          "1284: }",
          "1286: static void model_to_zval_any(zval *ret, xmlNodePtr node TSRMLS_DC)",
          "1287: {",
          "1288:  zval* any = NULL;",
          "1289:  char* name = NULL;",
          "1291:  while (node != NULL) {",
          "1295:    if (any && Z_TYPE_P(any) != IS_ARRAY) {",
          "1301:     if (name) {",
          "1303:     } else {",
          "1305:     }",
          "1307:    }",
          "1309:    if (Z_TYPE_P(val) == IS_STRING && *Z_STRVAL_P(val) == '<') {",
          "1310:     name = NULL;",
          "1311:     while (node->next != NULL) {",
          "1314:       break;",
          "1315:      }",
          "1317:      zval_ptr_dtor(&val2);",
          "1318:      node = node->next;",
          "1319:     }",
          "",
          "[Removed Lines]",
          "1275:   INIT_PZVAL(&member);",
          "1276:   ZVAL_STRING(&member, name, 0);",
          "1282:   zend_hash_del(Z_ARRVAL_P(object), name, strlen(name)+1);",
          "1292:   if (get_zval_property(ret, (char*)node->name TSRMLS_CC) == NULL) {",
          "1293:    zval* val = master_to_zval(get_conversion(XSD_ANYXML), node TSRMLS_CC);",
          "1297:     zval *arr;",
          "1299:     MAKE_STD_ZVAL(arr);",
          "1300:     array_init(arr);",
          "1302:      add_assoc_zval(arr, name, any);",
          "1304:      add_next_index_zval(arr, any);",
          "1306:     any = arr;",
          "1312:      zval* val2 = master_to_zval(get_conversion(XSD_ANYXML), node->next TSRMLS_CC);",
          "1313:      if (Z_TYPE_P(val2) != IS_STRING ||  *Z_STRVAL_P(val) != '<') {",
          "1316:      add_string_to_string(val, val, val2);",
          "",
          "[Added Lines]",
          "1243:   ZVAL_STRING(&member, name);",
          "1249:   zend_hash_str_del(Z_ARRVAL_P(object), name, strlen(name));",
          "1255:  zval rv, arr;",
          "1260:   if (get_zval_property(ret, (char*)node->name, &rv TSRMLS_CC) == NULL) {",
          "1261:    zval* val = master_to_zval(ret, get_conversion(XSD_ANYXML), node TSRMLS_CC);",
          "1265:     array_init(&arr);",
          "1267:      add_assoc_zval(&arr, name, any);",
          "1269:      add_next_index_zval(&arr, any);",
          "1271:     any = &arr;",
          "1277:      zval val2;",
          "1279:      master_to_zval(&val2, get_conversion(XSD_ANYXML), node->next TSRMLS_CC);",
          "1280:      if (Z_TYPE(val2) != IS_STRING ||  *Z_STRVAL_P(val) != '<') {",
          "1283:      add_string_to_string(val, val, &val2);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1324:    if (any == NULL) {",
          "1325:     if (name) {",
          "1333:      name = NULL;",
          "1334:     } else {",
          "1335:      any = val;",
          "",
          "[Removed Lines]",
          "1327:      zval *arr;",
          "1329:      MAKE_STD_ZVAL(arr);",
          "1330:      array_init(arr);",
          "1331:      add_assoc_zval(arr, name, val);",
          "1332:      any = arr;",
          "",
          "[Added Lines]",
          "1294:      array_init(&arr);",
          "1295:      add_assoc_zval(&arr, name, val);",
          "1296:      any = &arr;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1337:    } else {",
          "1339:     if (name) {",
          "1350:       }",
          "1352:      } else {",
          "1353:       add_assoc_zval(any, name, val);",
          "1354:      }",
          "",
          "[Removed Lines]",
          "1340:      zval **el;",
          "1341:      if (zend_hash_find(Z_ARRVAL_P(any), name, strlen(name)+1, (void**)&el) == SUCCESS) {",
          "1342:       if (Z_TYPE_PP(el) != IS_ARRAY) {",
          "1344:        zval *arr;",
          "1346:        MAKE_STD_ZVAL(arr);",
          "1347:        array_init(arr);",
          "1348:        add_next_index_zval(arr, *el);",
          "1351:       add_next_index_zval(*el, val);",
          "",
          "[Added Lines]",
          "1304:      zval *el;",
          "1305:      if ((el = zend_hash_str_find(Z_ARRVAL_P(any), name, strlen(name))) != NULL) {",
          "1306:       if (Z_TYPE_P(el) != IS_ARRAY) {",
          "1308:        array_init(&arr);",
          "1309:        add_next_index_zval(&arr, el);",
          "1310:        el = &arr;",
          "1312:       add_next_index_zval(el, val);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1373:     xmlNodePtr node = get_node(data->children, model->u.element->name);",
          "1375:     if (node) {",
          "1377:      xmlNodePtr r_node;",
          "1379:      r_node = check_and_resolve_href(node);",
          "",
          "[Removed Lines]",
          "1376:      zval *val;",
          "",
          "[Added Lines]",
          "1337:      zval val;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1381:       if (model->u.element->fixed && strcmp(model->u.element->fixed, (char*)r_node->children->content) != 0) {",
          "1382:        soap_error3(E_ERROR, \"Encoding: Element '%s' has fixed value '%s' (value '%s' is not allowed)\", model->u.element->name, model->u.element->fixed, r_node->children->content);",
          "1383:       }",
          "1385:      } else if (model->u.element->fixed) {",
          "1386:       xmlNodePtr dummy = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "1387:       xmlNodeSetContent(dummy, BAD_CAST(model->u.element->fixed));",
          "1389:       xmlFreeNode(dummy);",
          "1390:      } else if (model->u.element->def && !model->u.element->nillable) {",
          "1391:       xmlNodePtr dummy = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "1392:       xmlNodeSetContent(dummy, BAD_CAST(model->u.element->def));",
          "1394:       xmlFreeNode(dummy);",
          "1395:      } else {",
          "1397:      }",
          "1398:      if ((node = get_node(node->next, model->u.element->name)) != NULL) {",
          "1404:       do {",
          "1405:        if (node && node->children && node->children->content) {",
          "1406:         if (model->u.element->fixed && strcmp(model->u.element->fixed, (char*)node->children->content) != 0) {",
          "1407:          soap_error3(E_ERROR, \"Encoding: Element '%s' has fixed value '%s' (value '%s' is not allowed)\", model->u.element->name, model->u.element->fixed, node->children->content);",
          "1408:         }",
          "1410:        } else if (model->u.element->fixed) {",
          "1411:         xmlNodePtr dummy = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "1412:         xmlNodeSetContent(dummy, BAD_CAST(model->u.element->fixed));",
          "1414:         xmlFreeNode(dummy);",
          "1415:        } else if (model->u.element->def && !model->u.element->nillable) {",
          "1416:         xmlNodePtr dummy = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "1417:         xmlNodeSetContent(dummy, BAD_CAST(model->u.element->def));",
          "1419:         xmlFreeNode(dummy);",
          "1420:        } else {",
          "1422:        }",
          "1424:       } while ((node = get_node(node->next, model->u.element->name)) != NULL);",
          "1427:                 (SOAP_GLOBAL(features) & SOAP_SINGLE_ELEMENT_ARRAYS) &&",
          "1428:                 (model->max_occurs == -1 || model->max_occurs > 1)) {",
          "1435:      }",
          "1437:     }",
          "1438:    }",
          "1439:    break;",
          "1440:   case XSD_CONTENT_ALL:",
          "1441:   case XSD_CONTENT_SEQUENCE:",
          "1442:   case XSD_CONTENT_CHOICE: {",
          "1445:    sdlContentModelPtr any = NULL;",
          "1451:     } else {",
          "1453:     }",
          "1456:    if (any) {",
          "1457:     model_to_zval_any(ret, data->children TSRMLS_CC);",
          "1458:    }",
          "",
          "[Removed Lines]",
          "1384:       val = master_to_zval(model->u.element->encode, r_node TSRMLS_CC);",
          "1388:       val = master_to_zval(model->u.element->encode, dummy TSRMLS_CC);",
          "1393:       val = master_to_zval(model->u.element->encode, dummy TSRMLS_CC);",
          "1396:       val = master_to_zval(model->u.element->encode, r_node TSRMLS_CC);",
          "1399:       zval *array;",
          "1401:       MAKE_STD_ZVAL(array);",
          "1402:       array_init(array);",
          "1403:       add_next_index_zval(array, val);",
          "1409:         val = master_to_zval(model->u.element->encode, node TSRMLS_CC);",
          "1413:         val = master_to_zval(model->u.element->encode, dummy TSRMLS_CC);",
          "1418:         val = master_to_zval(model->u.element->encode, dummy TSRMLS_CC);",
          "1421:         val = master_to_zval(model->u.element->encode, node TSRMLS_CC);",
          "1423:        add_next_index_zval(array, val);",
          "1425:       val = array;",
          "1426:      } else if ((Z_TYPE_P(val) != IS_NULL || !model->u.element->nillable) &&",
          "1429:       zval *array;",
          "1431:       MAKE_STD_ZVAL(array);",
          "1432:       array_init(array);",
          "1433:       add_next_index_zval(array, val);",
          "1434:       val = array;",
          "1436:      set_zval_property(ret, model->u.element->name, val TSRMLS_CC);",
          "1443:    sdlContentModelPtr *tmp;",
          "1444:    HashPosition pos;",
          "1447:    zend_hash_internal_pointer_reset_ex(model->u.content, &pos);",
          "1448:    while (zend_hash_get_current_data_ex(model->u.content, (void**)&tmp, &pos) == SUCCESS) {",
          "1449:     if ((*tmp)->kind == XSD_CONTENT_ANY) {",
          "1450:      any = *tmp;",
          "1452:      model_to_zval_object(ret, *tmp, data, sdl TSRMLS_CC);",
          "1454:     zend_hash_move_forward_ex(model->u.content, &pos);",
          "1455:    }",
          "",
          "[Added Lines]",
          "1345:       master_to_zval(&val, model->u.element->encode, r_node TSRMLS_CC);",
          "1349:       master_to_zval(&val, model->u.element->encode, dummy TSRMLS_CC);",
          "1354:       master_to_zval(&val, model->u.element->encode, dummy TSRMLS_CC);",
          "1357:       master_to_zval(&val, model->u.element->encode, r_node TSRMLS_CC);",
          "1360:       zval array;",
          "1362:       array_init(&array);",
          "1363:       add_next_index_zval(&array, &val);",
          "1369:         master_to_zval(&val, model->u.element->encode, node TSRMLS_CC);",
          "1373:         master_to_zval(&val, model->u.element->encode, dummy TSRMLS_CC);",
          "1378:         master_to_zval(&val, model->u.element->encode, dummy TSRMLS_CC);",
          "1381:         master_to_zval(&val, model->u.element->encode, node TSRMLS_CC);",
          "1383:        add_next_index_zval(&array, &val);",
          "1385:       ZVAL_COPY_VALUE(&val, &array);",
          "1386:      } else if ((Z_TYPE(val) != IS_NULL || !model->u.element->nillable) &&",
          "1389:       zval array;",
          "1391:       array_init(&array);",
          "1392:       add_next_index_zval(&array, &val);",
          "1393:       ZVAL_COPY_VALUE(&val, &array);",
          "1395:      set_zval_property(ret, model->u.element->name, &val TSRMLS_CC);",
          "1402:    sdlContentModelPtr tmp;",
          "1405:    ZEND_HASH_FOREACH_PTR(model->u.content, tmp) {",
          "1406:     if (tmp->kind == XSD_CONTENT_ANY) {",
          "1407:      any = tmp;",
          "1409:      model_to_zval_object(ret, tmp, data, sdl TSRMLS_CC);",
          "1411:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1467: }",
          "1471: {",
          "1473:  xmlNodePtr trav;",
          "1474:  sdlPtr sdl;",
          "1475:  sdlTypePtr sdlType = type->sdl_type;",
          "1476:  zend_class_entry *ce = ZEND_STANDARD_CLASS_DEF_PTR;",
          "1479:  if (pce) {",
          "1480:   ce = pce;",
          "1481:  } else if (SOAP_GLOBAL(class_map) && type->type_str) {",
          "1483:   zend_class_entry  *tmp;",
          "1488:    ce = tmp;",
          "1489:   }",
          "1490:  }",
          "",
          "[Removed Lines]",
          "1470: static zval *to_zval_object_ex(encodeTypePtr type, xmlNodePtr data, zend_class_entry *pce TSRMLS_DC)",
          "1472:  zval *ret;",
          "1477:  zval *redo_any = NULL;",
          "1482:   zval             **classname;",
          "1485:   if (zend_hash_find(SOAP_GLOBAL(class_map), type->type_str, strlen(type->type_str)+1, (void**)&classname) == SUCCESS &&",
          "1486:       Z_TYPE_PP(classname) == IS_STRING &&",
          "1487:       (tmp = zend_fetch_class(Z_STRVAL_PP(classname), Z_STRLEN_PP(classname), ZEND_FETCH_CLASS_AUTO TSRMLS_CC)) != NULL) {",
          "",
          "[Added Lines]",
          "1426: static zval *to_zval_object_ex(zval *ret, encodeTypePtr type, xmlNodePtr data, zend_class_entry *pce TSRMLS_DC)",
          "1432:  zval *redo_any = NULL, rv, arr;",
          "1437:   zval              *classname;",
          "1440:   if ((classname = zend_hash_str_find(SOAP_GLOBAL(class_map), type->type_str, strlen(type->type_str))) != NULL &&",
          "1441:       Z_TYPE_P(classname) == IS_STRING &&",
          "1442:       (tmp = zend_fetch_class(Z_STR_P(classname), ZEND_FETCH_CLASS_AUTO TSRMLS_CC)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1502:     enc = enc->details.sdl_type->encode;",
          "1503:    }",
          "1504:    if (enc) {",
          "1509:      return ret;",
          "1510:     }",
          "1512:     object_init_ex(ret, ce);",
          "1515:    } else {",
          "1517:     FIND_XML_NULL(data, ret);",
          "1519:      return ret;",
          "1520:     }",
          "1521:     object_init_ex(ret, ce);",
          "",
          "[Removed Lines]",
          "1505:     zval *base;",
          "1507:     ALLOC_INIT_ZVAL(ret);",
          "1508:     if (soap_check_xml_ref(&ret, data TSRMLS_CC)) {",
          "1513:     base = master_to_zval_int(enc, data TSRMLS_CC);",
          "1514:     set_zval_property(ret, \"_\", base TSRMLS_CC);",
          "1516:     ALLOC_INIT_ZVAL(ret);",
          "1518:     if (soap_check_xml_ref(&ret, data TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "1460:     zval base;",
          "1462:     ZVAL_NULL(ret);",
          "1463:     if (soap_check_xml_ref(ret, data TSRMLS_CC)) {",
          "1468:     master_to_zval_int(&base, enc, data TSRMLS_CC);",
          "1469:     set_zval_property(ret, \"_\", &base TSRMLS_CC);",
          "1471:     ZVAL_NULL(ret);",
          "1473:     if (soap_check_xml_ref(ret, data TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1542:            (sdlType->encode->details.sdl_type->encode == NULL ||",
          "1543:             (sdlType->encode->details.sdl_type->encode->details.type != IS_ARRAY &&",
          "1544:              sdlType->encode->details.sdl_type->encode->details.type != SOAP_ENC_ARRAY))) {",
          "1546:        } else {",
          "1548:     }",
          "1550:      return ret;",
          "1551:     }",
          "1553:     if (Z_TYPE_P(ret) == IS_OBJECT && ce != ZEND_STANDARD_CLASS_DEF_PTR) {",
          "1555:      zobj->ce = ce;",
          "1556:     }",
          "1557:    } else {",
          "1562:      return ret;",
          "1563:     }",
          "1565:     object_init_ex(ret, ce);",
          "1568:    }",
          "1569:   } else {",
          "1571:    FIND_XML_NULL(data, ret);",
          "1573:     return ret;",
          "1574:    }",
          "1575:    object_init_ex(ret, ce);",
          "",
          "[Removed Lines]",
          "1545:      ret = to_zval_object_ex(&sdlType->encode->details, data, ce TSRMLS_CC);",
          "1547:      ret = master_to_zval_int(sdlType->encode, data TSRMLS_CC);",
          "1549:     if (soap_check_xml_ref(&ret, data TSRMLS_CC)) {",
          "1552:     redo_any = get_zval_property(ret, \"any\" TSRMLS_CC);",
          "1554:      zend_object *zobj = zend_objects_get_address(ret TSRMLS_CC);",
          "1558:     zval *base;",
          "1560:     ALLOC_INIT_ZVAL(ret);",
          "1561:     if (soap_check_xml_ref(&ret, data TSRMLS_CC)) {",
          "1566:     base = master_to_zval_int(sdlType->encode, data TSRMLS_CC);",
          "1567:     set_zval_property(ret, \"_\", base TSRMLS_CC);",
          "1570:    ALLOC_INIT_ZVAL(ret);",
          "1572:    if (soap_check_xml_ref(&ret, data TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "1500:      to_zval_object_ex(ret, &sdlType->encode->details, data, ce TSRMLS_CC);",
          "1502:      master_to_zval_int(ret, sdlType->encode, data TSRMLS_CC);",
          "1504:     if (soap_check_xml_ref(ret, data TSRMLS_CC)) {",
          "1507:     redo_any = get_zval_property(ret, \"any\", &rv TSRMLS_CC);",
          "1509:      zend_object *zobj = Z_OBJ_P(ret);",
          "1513:     zval base;",
          "1515:     ZVAL_NULL(ret);",
          "1516:     if (soap_check_xml_ref(ret, data TSRMLS_CC)) {",
          "1521:     master_to_zval_int(&base, sdlType->encode, data TSRMLS_CC);",
          "1522:     set_zval_property(ret, \"_\", &base TSRMLS_CC);",
          "1525:    ZVAL_NULL(ret);",
          "1527:    if (soap_check_xml_ref(ret, data TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1581:    }",
          "1582:    model_to_zval_object(ret, sdlType->model, data, sdl TSRMLS_CC);",
          "1583:    if (redo_any) {",
          "1586:     if (tmp == NULL) {",
          "1587:      model_to_zval_any(ret, data->children TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "1584:     zval *tmp = get_zval_property(ret, \"any\" TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1539:     zval *tmp = get_zval_property(ret, \"any\", &rv TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1589:      zval_dtor(tmp);",
          "1590:      efree(tmp);",
          "1591:     }",
          "1593:    }",
          "1594:   }",
          "1595:   if (sdlType->attributes) {",
          "1603:      char *str_val = NULL;",
          "1605:      if (val && val->children && val->children->content) {",
          "1606:       str_val = (char*)val->children->content;",
          "1609:       }",
          "1614:      }",
          "1615:      if (str_val) {",
          "1616:       xmlNodePtr dummy, text;",
          "1619:       dummy = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "1620:       text = xmlNewText(BAD_CAST(str_val));",
          "1621:       xmlAddChild(dummy, text);",
          "1623:       xmlFreeNode(dummy);",
          "1625:      }",
          "1626:     }",
          "1629:   }",
          "1630:  } else {",
          "1633:   FIND_XML_NULL(data, ret);",
          "1635:    return ret;",
          "1636:   }",
          "",
          "[Removed Lines]",
          "1592:     zval_ptr_dtor(&redo_any);",
          "1596:    sdlAttributePtr *attr;",
          "1597:    HashPosition pos;",
          "1599:    zend_hash_internal_pointer_reset_ex(sdlType->attributes, &pos);",
          "1600:    while (zend_hash_get_current_data_ex(sdlType->attributes, (void**)&attr, &pos) == SUCCESS) {",
          "1601:     if ((*attr)->name) {",
          "1602:      xmlAttrPtr val = get_attribute(data->properties, (*attr)->name);",
          "1607:       if ((*attr)->fixed && strcmp((*attr)->fixed, str_val) != 0) {",
          "1608:        soap_error3(E_ERROR, \"Encoding: Attribute '%s' has fixed value '%s' (value '%s' is not allowed)\", (*attr)->name, (*attr)->fixed, str_val);",
          "1610:      } else if ((*attr)->fixed) {",
          "1611:       str_val = (*attr)->fixed;",
          "1612:      } else if ((*attr)->def) {",
          "1613:       str_val = (*attr)->def;",
          "1617:       zval *data;",
          "1622:       data = master_to_zval((*attr)->encode, dummy TSRMLS_CC);",
          "1624:       set_zval_property(ret, (*attr)->name, data TSRMLS_CC);",
          "1627:     zend_hash_move_forward_ex(sdlType->attributes, &pos);",
          "1628:    }",
          "1632:   ALLOC_INIT_ZVAL(ret);",
          "1634:   if (soap_check_xml_ref(&ret, data TSRMLS_CC)) {",
          "",
          "[Added Lines]",
          "1547:     zval_ptr_dtor(redo_any);",
          "1551:    sdlAttributePtr attr;",
          "1553:    ZEND_HASH_FOREACH_PTR(sdlType->attributes, attr) {",
          "1554:     if (attr->name) {",
          "1555:      xmlAttrPtr val = get_attribute(data->properties, attr->name);",
          "1560:       if (attr->fixed && strcmp(attr->fixed, str_val) != 0) {",
          "1561:        soap_error3(E_ERROR, \"Encoding: Attribute '%s' has fixed value '%s' (value '%s' is not allowed)\", attr->name, attr->fixed, str_val);",
          "1563:      } else if (attr->fixed) {",
          "1564:       str_val = attr->fixed;",
          "1565:      } else if (attr->def) {",
          "1566:       str_val = attr->def;",
          "1570:       zval data;",
          "1575:       master_to_zval(&data, attr->encode, dummy TSRMLS_CC);",
          "1577:       set_zval_property(ret, attr->name, &data TSRMLS_CC);",
          "1580:    } ZEND_HASH_FOREACH_END();",
          "1583:   ZVAL_NULL(ret);",
          "1585:   if (soap_check_xml_ref(ret, data TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1641:   while (trav != NULL) {",
          "1642:    if (trav->type == XML_ELEMENT_NODE) {",
          "1644:     zval *prop;",
          "1649:     if (!prop) {",
          "1650:      if (!trav->next || !get_node(trav->next, (char*)trav->name)) {",
          "1652:      } else {",
          "1659:      }",
          "1660:     } else {",
          "1662:      if (Z_TYPE_P(prop) != IS_ARRAY) {",
          "1668:       Z_ADDREF_P(prop);",
          "1672:      }",
          "1675:     }",
          "1676:    }",
          "1677:    trav = trav->next;",
          "",
          "[Removed Lines]",
          "1643:     zval  *tmpVal;",
          "1646:     tmpVal = master_to_zval(NULL, trav TSRMLS_CC);",
          "1648:     prop = get_zval_property(ret, (char*)trav->name TSRMLS_CC);",
          "1651:       set_zval_property(ret, (char*)trav->name, tmpVal TSRMLS_CC);",
          "1653:       zval *arr;",
          "1655:       MAKE_STD_ZVAL(arr);",
          "1656:       array_init(arr);",
          "1657:       add_next_index_zval(arr, tmpVal);",
          "1658:       set_zval_property(ret, (char*)trav->name, arr TSRMLS_CC);",
          "1664:       zval *arr;",
          "1666:       MAKE_STD_ZVAL(arr);",
          "1667:       array_init(arr);",
          "1669:       add_next_index_zval(arr, prop);",
          "1670:       set_zval_property(ret, (char*)trav->name, arr TSRMLS_CC);",
          "1671:       prop = arr;",
          "1674:      add_next_index_zval(prop, tmpVal);",
          "",
          "[Added Lines]",
          "1594:     zval  tmpVal, rv;",
          "1597:     master_to_zval(&tmpVal, NULL, trav TSRMLS_CC);",
          "1599:     prop = get_zval_property(ret, (char*)trav->name, &rv TSRMLS_CC);",
          "1602:       set_zval_property(ret, (char*)trav->name, &tmpVal TSRMLS_CC);",
          "1604:       zval arr;",
          "1606:       array_init(&arr);",
          "1607:       add_next_index_zval(&arr, &tmpVal);",
          "1608:       set_zval_property(ret, (char*)trav->name, &arr TSRMLS_CC);",
          "1614:       array_init(&arr);",
          "1616:       add_next_index_zval(&arr, prop);",
          "1617:       set_zval_property(ret, (char*)trav->name, &arr TSRMLS_CC);",
          "1618:       prop = &arr;",
          "1621:      add_next_index_zval(prop, &tmpVal);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1680:  return ret;",
          "1681: }",
          "1684: {",
          "1686: }",
          "",
          "[Removed Lines]",
          "1683: static zval *to_zval_object(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "1685:  return to_zval_object_ex(type, data, NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1630: static zval *to_zval_object(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "1632:  return to_zval_object_ex(ret, type, data, NULL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1693:    zval *data;",
          "1694:    xmlNodePtr property;",
          "1695:    encodePtr enc;",
          "1698:    if (data &&",
          "1699:        Z_TYPE_P(data) == IS_NULL &&",
          "1700:        !model->u.element->nillable &&",
          "",
          "[Removed Lines]",
          "1697:    data = get_zval_property(object, model->u.element->name TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1643:    zval rv;",
          "1645:    data = get_zval_property(object, model->u.element->name, &rv TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1708:         Z_TYPE_P(data) == IS_ARRAY &&",
          "1709:         !is_map(data)) {",
          "1710:      HashTable *ht = Z_ARRVAL_P(data);",
          "1716:        property = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "1717:        xmlAddChild(node, property);",
          "1718:        set_xsi_nil(property);",
          "1719:       } else {",
          "1721:        if (property->children && property->children->content &&",
          "1722:            model->u.element->fixed && strcmp(model->u.element->fixed, (char*)property->children->content) != 0) {",
          "1723:         soap_error3(E_ERROR, \"Encoding: Element '%s' has fixed value '%s' (value '%s' is not allowed)\", model->u.element->name, model->u.element->fixed, property->children->content);",
          "",
          "[Removed Lines]",
          "1711:      zval **val;",
          "1713:      zend_hash_internal_pointer_reset(ht);",
          "1714:      while (zend_hash_get_current_data(ht,(void**)&val) == SUCCESS) {",
          "1715:       if (Z_TYPE_PP(val) == IS_NULL && model->u.element->nillable) {",
          "1720:        property = master_to_xml(enc, *val, style, node TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1659:      zval *val;",
          "1661:      ZEND_HASH_FOREACH_VAL(ht, val) {",
          "1662:       if (Z_TYPE_P(val) == IS_NULL && model->u.element->nillable) {",
          "1667:        property = master_to_xml(enc, val, style, node TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1730:        xmlNsPtr nsp = encode_add_ns(property, model->u.element->namens);",
          "1731:        xmlSetNs(property, nsp);",
          "1732:       }",
          "1735:     } else {",
          "1736:      if (Z_TYPE_P(data) == IS_NULL && model->u.element->nillable) {",
          "1737:       property = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "",
          "[Removed Lines]",
          "1733:       zend_hash_move_forward(ht);",
          "1734:      }",
          "",
          "[Added Lines]",
          "1680:      } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1780:    zval *data;",
          "1781:    xmlNodePtr property;",
          "1782:    encodePtr enc;",
          "1785:    if (data) {",
          "1786:     enc = get_conversion(XSD_ANYXML);",
          "1787:     if ((model->max_occurs == -1 || model->max_occurs > 1) &&",
          "1788:         Z_TYPE_P(data) == IS_ARRAY &&",
          "1789:         !is_map(data)) {",
          "1790:      HashTable *ht = Z_ARRVAL_P(data);",
          "1798:     } else {",
          "1799:      property = master_to_xml(enc, data, style, node TSRMLS_CC);",
          "1800:     }",
          "",
          "[Removed Lines]",
          "1784:    data = get_zval_property(object, \"any\" TSRMLS_CC);",
          "1791:      zval **val;",
          "1793:      zend_hash_internal_pointer_reset(ht);",
          "1794:      while (zend_hash_get_current_data(ht,(void**)&val) == SUCCESS) {",
          "1795:       property = master_to_xml(enc, *val, style, node TSRMLS_CC);",
          "1796:       zend_hash_move_forward(ht);",
          "1797:      }",
          "",
          "[Added Lines]",
          "1729:    zval rv;",
          "1731:    data = get_zval_property(object, \"any\", &rv TSRMLS_CC);",
          "1738:      zval *val;",
          "1740:      ZEND_HASH_FOREACH_VAL(ht, val) {",
          "1741:       property = master_to_xml(enc, val, style, node TSRMLS_CC);",
          "1742:      } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1811:   }",
          "1812:   case XSD_CONTENT_SEQUENCE:",
          "1813:   case XSD_CONTENT_ALL: {",
          "1821:       return 0;",
          "1822:      }",
          "1823:     }",
          "1824:     strict = 1;",
          "1827:    return 1;",
          "1828:   }",
          "1829:   case XSD_CONTENT_CHOICE: {",
          "1832:    int ret = 0;",
          "1837:     if (tmp_ret == 1) {",
          "1838:      return 1;",
          "1839:     } else if (tmp_ret != 0) {",
          "1840:      ret = 1;",
          "1841:     }",
          "1844:    return ret;",
          "1845:   }",
          "1846:   case XSD_CONTENT_GROUP: {",
          "",
          "[Removed Lines]",
          "1814:    sdlContentModelPtr *tmp;",
          "1815:    HashPosition pos;",
          "1817:    zend_hash_internal_pointer_reset_ex(model->u.content, &pos);",
          "1818:    while (zend_hash_get_current_data_ex(model->u.content, (void**)&tmp, &pos) == SUCCESS) {",
          "1819:     if (!model_to_xml_object(node, *tmp, object, style, strict && ((*tmp)->min_occurs > 0) TSRMLS_CC)) {",
          "1820:      if (!strict || (*tmp)->min_occurs > 0) {",
          "1825:     zend_hash_move_forward_ex(model->u.content, &pos);",
          "1826:    }",
          "1830:    sdlContentModelPtr *tmp;",
          "1831:    HashPosition pos;",
          "1834:    zend_hash_internal_pointer_reset_ex(model->u.content, &pos);",
          "1835:    while (zend_hash_get_current_data_ex(model->u.content, (void**)&tmp, &pos) == SUCCESS) {",
          "1836:     int tmp_ret = model_to_xml_object(node, *tmp, object, style, 0 TSRMLS_CC);",
          "1842:     zend_hash_move_forward_ex(model->u.content, &pos);",
          "1843:    }",
          "",
          "[Added Lines]",
          "1759:    sdlContentModelPtr tmp;",
          "1761:    ZEND_HASH_FOREACH_PTR(model->u.content, tmp) {",
          "1762:     if (!model_to_xml_object(node, tmp, object, style, strict && (tmp->min_occurs > 0) TSRMLS_CC)) {",
          "1763:      if (!strict || tmp->min_occurs > 0) {",
          "1768:    } ZEND_HASH_FOREACH_END();",
          "1772:    sdlContentModelPtr tmp;",
          "1775:    ZEND_HASH_FOREACH_PTR(model->u.content, tmp) {",
          "1776:     int tmp_ret = model_to_xml_object(node, tmp, object, style, 0 TSRMLS_CC);",
          "1782:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1865:   case XSD_CONTENT_SEQUENCE:",
          "1866:   case XSD_CONTENT_ALL:",
          "1867:   case XSD_CONTENT_CHOICE: {",
          "1871:    if (zend_hash_num_elements(model->u.content) != 1) {",
          "1872:      return NULL;",
          "1873:    }",
          "1877:   }",
          "1878:   case XSD_CONTENT_GROUP: {",
          "1879:    return model_array_element(model->u.group->model);",
          "",
          "[Removed Lines]",
          "1868:    sdlContentModelPtr *tmp;",
          "1869:    HashPosition pos;",
          "1874:    zend_hash_internal_pointer_reset_ex(model->u.content, &pos);",
          "1875:    zend_hash_get_current_data_ex(model->u.content, (void**)&tmp, &pos);",
          "1876:    return model_array_element(*tmp);",
          "",
          "[Added Lines]",
          "1807:    sdlContentModelPtr tmp;",
          "1812:    ZEND_HASH_FOREACH_PTR(model->u.content, tmp) {",
          "1813:     return model_array_element(tmp);",
          "1814:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1920:     enc = enc->details.sdl_type->encode;",
          "1921:    }",
          "1922:    if (enc) {",
          "1924:     if (tmp) {",
          "1925:      xmlParam = master_to_xml(enc, tmp, style, parent TSRMLS_CC);",
          "1926:     } else if (prop == NULL) {",
          "",
          "[Removed Lines]",
          "1923:     zval *tmp = get_zval_property(data, \"_\" TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1861:     zval rv;",
          "1862:     zval *tmp = get_zval_property(data, \"_\", &rv TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1940:        sdlType->encode->details.sdl_type->kind != XSD_TYPEKIND_LIST &&",
          "1941:        sdlType->encode->details.sdl_type->kind != XSD_TYPEKIND_UNION) {",
          "1944:     xmlParam = master_to_xml(sdlType->encode, data, style, parent TSRMLS_CC);",
          "1946:    } else {",
          "1949:     if (tmp) {",
          "1950:      xmlParam = master_to_xml(sdlType->encode, tmp, style, parent TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "1943:     if (prop) prop->nApplyCount++;",
          "1945:     if (prop) prop->nApplyCount--;",
          "1947:     zval *tmp = get_zval_property(data, \"_\" TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1882:     if (prop) ZEND_HASH_INC_APPLY_COUNT(prop);",
          "1884:     if (prop) ZEND_HASH_DEC_APPLY_COUNT(prop);",
          "1886:     zval rv;",
          "1887:     zval *tmp = get_zval_property(data, \"_\", &rv TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1971:         sdlType->attributes == NULL &&",
          "1972:         sdlType->model != NULL &&",
          "1973:         (array_el = model_array_element(sdlType->model)) != NULL) {",
          "1978:      xmlNodePtr property;",
          "1980:       property = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "1981:       xmlAddChild(xmlParam, property);",
          "1982:       set_xsi_nil(property);",
          "1983:      } else {",
          "1985:      }",
          "1986:      xmlNodeSetName(property, BAD_CAST(array_el->name));",
          "1987:      if (style == SOAP_LITERAL &&",
          "",
          "[Removed Lines]",
          "1974:     zval **val;",
          "1976:     zend_hash_internal_pointer_reset(prop);",
          "1977:     while (zend_hash_get_current_data(prop,(void**)&val) == SUCCESS) {",
          "1979:      if (Z_TYPE_PP(val) == IS_NULL && array_el->nillable) {",
          "1984:       property = master_to_xml(array_el->encode, *val, style, xmlParam TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1914:     zval *val;",
          "1916:     ZEND_HASH_FOREACH_VAL(prop, val) {",
          "1918:      if (Z_TYPE_P(val) == IS_NULL && array_el->nillable) {",
          "1923:       property = master_to_xml(array_el->encode, val, style, xmlParam TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1990:       xmlNsPtr nsp = encode_add_ns(property, array_el->namens);",
          "1991:       xmlSetNs(property, nsp);",
          "1992:      }",
          "1995:    } else if (sdlType->model) {",
          "1996:     model_to_xml_object(xmlParam, sdlType->model, data, style, 1 TSRMLS_CC);",
          "1997:    }",
          "1998:    if (sdlType->attributes) {",
          "2007:       if (zattr) {",
          "2008:        xmlNodePtr dummy;",
          "2011:        if (dummy->children && dummy->children->content) {",
          "2014:         }",
          "2016:            an implicit schema. Otherwise, use form.",
          "2024:         } else {",
          "2026:         }",
          "2027:        }",
          "2028:        xmlUnlinkNode(dummy);",
          "2029:        xmlFreeNode(dummy);",
          "2030:       }",
          "2031:      }",
          "2034:    }",
          "2035:   }",
          "2036:   if (style == SOAP_ENCODED) {",
          "",
          "[Removed Lines]",
          "1993:      zend_hash_move_forward(prop);",
          "1994:     }",
          "1999:     sdlAttributePtr *attr;",
          "2000:     zval *zattr;",
          "2001:     HashPosition pos;",
          "2003:     zend_hash_internal_pointer_reset_ex(sdlType->attributes, &pos);",
          "2004:     while (zend_hash_get_current_data_ex(sdlType->attributes, (void**)&attr, &pos) == SUCCESS) {",
          "2005:      if ((*attr)->name) {",
          "2006:       zattr = get_zval_property(data, (*attr)->name TSRMLS_CC);",
          "2010:        dummy = master_to_xml((*attr)->encode, zattr, SOAP_LITERAL, xmlParam TSRMLS_CC);",
          "2012:         if ((*attr)->fixed && strcmp((*attr)->fixed, (char*)dummy->children->content) != 0) {",
          "2013:          soap_error3(E_ERROR, \"Encoding: Attribute '%s' has fixed value '%s' (value '%s' is not allowed)\", (*attr)->name, (*attr)->fixed, dummy->children->content);",
          "2018:         if ((*attr)->namens &&",
          "2019:             (!strncmp((*attr)->namens, XML_NAMESPACE, sizeof(XML_NAMESPACE)) ||",
          "2020:              (*attr)->form == XSD_FORM_QUALIFIED)) {",
          "2021:          xmlNsPtr nsp = encode_add_ns(xmlParam, (*attr)->namens);",
          "2023:          xmlSetNsProp(xmlParam, nsp, BAD_CAST((*attr)->name), dummy->children->content);",
          "2025:          xmlSetProp(xmlParam, BAD_CAST((*attr)->name), dummy->children->content);",
          "2032:      zend_hash_move_forward_ex(sdlType->attributes, &pos);",
          "2033:     }",
          "",
          "[Added Lines]",
          "1932:     } ZEND_HASH_FOREACH_END();",
          "1937:     sdlAttributePtr attr;",
          "1938:     zval *zattr, rv;",
          "1940:     ZEND_HASH_FOREACH_PTR(sdlType->attributes, attr) {",
          "1941:      if (attr->name) {",
          "1942:       zattr = get_zval_property(data, attr->name, &rv TSRMLS_CC);",
          "1946:        dummy = master_to_xml(attr->encode, zattr, SOAP_LITERAL, xmlParam TSRMLS_CC);",
          "1948:         if (attr->fixed && strcmp(attr->fixed, (char*)dummy->children->content) != 0) {",
          "1949:          soap_error3(E_ERROR, \"Encoding: Attribute '%s' has fixed value '%s' (value '%s' is not allowed)\", attr->name, attr->fixed, dummy->children->content);",
          "1954:         if (attr->namens &&",
          "1955:             (!strncmp(attr->namens, XML_NAMESPACE, sizeof(XML_NAMESPACE)) ||",
          "1956:              attr->form == XSD_FORM_QUALIFIED)) {",
          "1957:          xmlNsPtr nsp = encode_add_ns(xmlParam, attr->namens);",
          "1959:          xmlSetNsProp(xmlParam, nsp, BAD_CAST(attr->name), dummy->children->content);",
          "1961:          xmlSetProp(xmlParam, BAD_CAST(attr->name), dummy->children->content);",
          "1968:     } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2050:    for (;i > 0;i--) {",
          "2051:     xmlNodePtr property;",
          "2054:     ulong index;",
          "2055:     int key_type;",
          "2063:     if (key_type == HASH_KEY_IS_STRING) {",
          "2064:      const char *prop_name;",
          "",
          "[Removed Lines]",
          "2052:     zval **zprop;",
          "2053:     char *str_key;",
          "2056:     unsigned int str_key_len;",
          "2058:     key_type = zend_hash_get_current_key_ex(prop, &str_key, &str_key_len, &index, FALSE, NULL);",
          "2059:     zend_hash_get_current_data(prop, (void **)&zprop);",
          "2061:     property = master_to_xml(get_conversion((*zprop)->type), (*zprop), style, xmlParam TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1987:     zval *zprop;",
          "1988:     zend_string *str_key;",
          "1992:     key_type = zend_hash_get_current_key_ex(prop, &str_key, &index, FALSE, &prop->nInternalPointer);",
          "1993:     zprop = zend_hash_get_current_data(prop);",
          "1995:     property = master_to_xml(get_conversion(Z_TYPE_P(zprop)), zprop, style, xmlParam TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2066:      if (Z_TYPE_P(data) == IS_OBJECT) {",
          "2067:       const char *class_name;",
          "2070:      } else {",
          "2072:      }",
          "2073:      if (prop_name) {",
          "2074:       xmlNodeSetName(property, BAD_CAST(prop_name));",
          "",
          "[Removed Lines]",
          "2069:       zend_unmangle_property_name(str_key, str_key_len-1, &class_name, &prop_name);",
          "2071:       prop_name = str_key;",
          "",
          "[Added Lines]",
          "2003:       zend_unmangle_property_name(str_key->val, str_key->len, &class_name, &prop_name);",
          "2005:       prop_name = str_key->val;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2209:  int j;",
          "2211:  if (data && Z_TYPE_P(data) == IS_ARRAY) {",
          "2213:   for (j=0; j<dims[0]; j++) {",
          "2217:      zdata = NULL;",
          "2218:     }",
          "2219:     if (dimension == 1) {",
          "",
          "[Removed Lines]",
          "2212:    zend_hash_internal_pointer_reset(data->value.ht);",
          "2214:     zval **zdata;",
          "2216:     if (zend_hash_get_current_data(data->value.ht, (void **)&zdata) != SUCCESS) {",
          "",
          "[Added Lines]",
          "2146:    zend_hash_internal_pointer_reset(Z_ARRVAL_P(data));",
          "2148:     zval *zdata;",
          "2150:     if ((zdata = zend_hash_get_current_data(Z_ARRVAL_P(data))) == NULL) {",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2222:      if (zdata) {",
          "2223:       if (enc == NULL) {",
          "2225:       } else {",
          "2227:       }",
          "2228:      } else {",
          "2229:      xparam = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "",
          "[Removed Lines]",
          "2224:        xparam = master_to_xml(get_conversion((*zdata)->type), (*zdata), style, xmlParam TSRMLS_CC);",
          "2226:        xparam = master_to_xml(enc, (*zdata), style, xmlParam TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2158:        xparam = master_to_xml(get_conversion(Z_TYPE_P(zdata)), zdata, style, xmlParam TSRMLS_CC);",
          "2160:        xparam = master_to_xml(enc, zdata, style, xmlParam TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2240:      }",
          "2241:     } else {",
          "2242:      if (zdata) {",
          "2244:      } else {",
          "2245:        add_xml_array_elements(xmlParam, type, enc, ns, dimension-1, dims+1, NULL, style TSRMLS_CC);",
          "2246:      }",
          "2247:     }",
          "2249:    }",
          "2250:   } else {",
          "2251:   for (j=0; j<dims[0]; j++) {",
          "",
          "[Removed Lines]",
          "2243:        add_xml_array_elements(xmlParam, type, enc, ns, dimension-1, dims+1, *zdata, style TSRMLS_CC);",
          "2248:     zend_hash_move_forward(data->value.ht);",
          "",
          "[Added Lines]",
          "2177:        add_xml_array_elements(xmlParam, type, enc, ns, dimension-1, dims+1, zdata, style TSRMLS_CC);",
          "2182:     zend_hash_move_forward(Z_ARRVAL_P(data));",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2272: static inline int array_num_elements(HashTable* ht)",
          "2273: {",
          "2274:  if (ht->nNumUsed &&",
          "2278:      return ht->arData[ht->nNumUsed-1].h - 1;",
          "2279:  }",
          "",
          "[Removed Lines]",
          "2275:      ht->arData[ht->nNumUsed-1].xData &&",
          "2276:      ht->arData[ht->nNumUsed-1].nKeyLength == 0) {",
          "",
          "[Added Lines]",
          "2209:      Z_TYPE(ht->arData[ht->nNumUsed-1].val) != IS_UNUSED &&",
          "2210:      ht->arData[ht->nNumUsed-1].key == NULL) {",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2291:  int dimension = 1;",
          "2292:  int* dims;",
          "2293:  int soap_version;",
          "2296:  soap_version = SOAP_GLOBAL(soap_version);",
          "2298:  xmlParam = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "",
          "[Removed Lines]",
          "2294:  zval *array_copy = NULL;",
          "",
          "[Added Lines]",
          "2228:  zval array_copy;",
          "2230:  ZVAL_UNDEF(&array_copy);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2313:  if (Z_TYPE_P(data) == IS_OBJECT && instanceof_function(Z_OBJCE_P(data), zend_ce_traversable TSRMLS_CC)) {",
          "2314:   zend_object_iterator   *iter;",
          "2315:   zend_class_entry       *ce = Z_OBJCE_P(data);",
          "2322:   iter = ce->get_iterator(ce, data, 0 TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "2316:   zval                  **val;",
          "2318:   ALLOC_ZVAL(array_copy);",
          "2319:   INIT_PZVAL(array_copy);",
          "2320:   array_init(array_copy);",
          "",
          "[Added Lines]",
          "2251:   zval                   *val;",
          "2253:   array_init(&array_copy);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2337:     goto iterator_done;",
          "2338:    }",
          "2341:    if (EG(exception)) {",
          "2342:     goto iterator_done;",
          "2343:    }",
          "",
          "[Removed Lines]",
          "2340:    iter->funcs->get_current_data(iter, &val TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2273:    val = iter->funcs->get_current_data(iter TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2347:     if (EG(exception)) {",
          "2348:      goto iterator_done;",
          "2349:     }",
          "2351:     zval_ptr_dtor(val);",
          "2352:     zval_dtor(&key);",
          "2353:    } else {",
          "2355:    }",
          "2358:    iter->funcs->move_forward(iter TSRMLS_CC);",
          "2359:    if (EG(exception)) {",
          "",
          "[Removed Lines]",
          "2350:     array_set_zval_key(Z_ARRVAL_P(array_copy), &key, *val);",
          "2354:     add_next_index_zval(array_copy, *val);",
          "2356:    Z_ADDREF_PP(val);",
          "",
          "[Added Lines]",
          "2283:     array_set_zval_key(Z_ARRVAL(array_copy), &key, val);",
          "2287:     add_next_index_zval(&array_copy, val);",
          "2289:    Z_ADDREF_P(val);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2364:   iter->funcs->dtor(iter TSRMLS_CC);",
          "2365:   if (EG(exception)) {",
          "2366:    zval_ptr_dtor(&array_copy);",
          "2368:   } else {",
          "2370:   }",
          "2371:  }",
          "2373:  if (Z_TYPE_P(data) == IS_ARRAY) {",
          "2376:   sdlTypePtr elementType;",
          "2378:   i = zend_hash_num_elements(Z_ARRVAL_P(data));",
          "2380:   if (sdl_type &&",
          "2381:       sdl_type->attributes &&",
          "2388:    char *value, *end;",
          "2392:    end = strrchr(value,'[');",
          "2393:    if (end) {",
          "2395:     end++;",
          "2396:     dimension = calc_dimension(end);",
          "2397:    }",
          "2401:    } else {",
          "2402:     smart_str_appends(&array_type, value);",
          "2403:    }",
          "2405:    dims = safe_emalloc(sizeof(int), dimension, 0);",
          "2406:    dims[0] = i;",
          "2408:    for (i = 1; i < dimension; i++) {",
          "2415:      } else {",
          "2416:       dims[i] = 0;",
          "2417:      }",
          "",
          "[Removed Lines]",
          "2367:    array_copy = NULL;",
          "2369:    data = array_copy;",
          "2374:   sdlAttributePtr *arrayType;",
          "2375:   sdlExtraAttributePtr *ext;",
          "2382:       zend_hash_find(sdl_type->attributes, SOAP_1_1_ENC_NAMESPACE\":arrayType\",",
          "2383:         sizeof(SOAP_1_1_ENC_NAMESPACE\":arrayType\"),",
          "2384:         (void **)&arrayType) == SUCCESS &&",
          "2385:       (*arrayType)->extraAttributes &&",
          "2386:       zend_hash_find((*arrayType)->extraAttributes, WSDL_NAMESPACE\":arrayType\", sizeof(WSDL_NAMESPACE\":arrayType\"), (void **)&ext) == SUCCESS) {",
          "2389:    zval** el;",
          "2391:    value = estrdup((*ext)->val);",
          "2398:    if ((*ext)->ns != NULL) {",
          "2399:     enc = get_encoder(SOAP_GLOBAL(sdl), (*ext)->ns, value);",
          "2400:     get_type_str(xmlParam, (*ext)->ns, value, &array_type);",
          "2407:    el = &data;",
          "2409:     if (el != NULL && Z_TYPE_PP(el) == IS_ARRAY &&",
          "2410:         zend_hash_num_elements(Z_ARRVAL_PP(el)) > 0) {",
          "2411:       zend_hash_internal_pointer_reset(Z_ARRVAL_PP(el));",
          "2412:      zend_hash_get_current_data(Z_ARRVAL_PP(el), (void**)&el);",
          "2413:      if (Z_TYPE_PP(el) == IS_ARRAY) {",
          "2414:       dims[i] = zend_hash_num_elements(Z_ARRVAL_PP(el));",
          "",
          "[Added Lines]",
          "2300:    ZVAL_UNDEF(&array_copy);",
          "2302:    data = &array_copy;",
          "2307:   sdlAttributePtr arrayType;",
          "2308:   sdlExtraAttributePtr ext;",
          "2315:       (arrayType = zend_hash_str_find_ptr(sdl_type->attributes, SOAP_1_1_ENC_NAMESPACE\":arrayType\",",
          "2316:         sizeof(SOAP_1_1_ENC_NAMESPACE\":arrayType\")-1)) != NULL &&",
          "2317:       arrayType->extraAttributes &&",
          "2318:       (ext = zend_hash_str_find_ptr(arrayType->extraAttributes, WSDL_NAMESPACE\":arrayType\", sizeof(WSDL_NAMESPACE\":arrayType\")-1)) != NULL) {",
          "2321:    zval *el;",
          "2323:    value = estrdup(ext->val);",
          "2330:    if (ext->ns != NULL) {",
          "2331:     enc = get_encoder(SOAP_GLOBAL(sdl), ext->ns, value);",
          "2332:     get_type_str(xmlParam, ext->ns, value, &array_type);",
          "2340:    el = data;",
          "2342:     if (el != NULL && Z_TYPE_P(el) == IS_ARRAY &&",
          "2343:         zend_hash_num_elements(Z_ARRVAL_P(el)) > 0) {",
          "2344:      zend_hash_internal_pointer_reset(Z_ARRVAL_P(el));",
          "2345:      el = zend_hash_get_current_data(Z_ARRVAL_P(el));",
          "2346:      if (Z_TYPE_P(el) == IS_ARRAY) {",
          "2347:       dims[i] = zend_hash_num_elements(Z_ARRVAL_P(el));",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2429:   } else if (sdl_type &&",
          "2430:              sdl_type->attributes &&",
          "2439:    } else {",
          "2449:     if (dims[0] == 0) {dims[0] = i;}",
          "2451:     smart_str_append_long(&array_size, dims[0]);",
          "",
          "[Removed Lines]",
          "2431:              zend_hash_find(sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":itemType\",",
          "2432:                sizeof(SOAP_1_2_ENC_NAMESPACE\":itemType\"),",
          "2433:                (void **)&arrayType) == SUCCESS &&",
          "2434:              (*arrayType)->extraAttributes &&",
          "2435:              zend_hash_find((*arrayType)->extraAttributes, WSDL_NAMESPACE\":itemType\", sizeof(WSDL_NAMESPACE\":itemType\"), (void **)&ext) == SUCCESS) {",
          "2436:    if ((*ext)->ns != NULL) {",
          "2437:     enc = get_encoder(SOAP_GLOBAL(sdl), (*ext)->ns, (*ext)->val);",
          "2438:     get_type_str(xmlParam, (*ext)->ns, (*ext)->val, &array_type);",
          "2440:     smart_str_appends(&array_type, (*ext)->val);",
          "2441:    }",
          "2442:    if (zend_hash_find(sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "2443:                       sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\"),",
          "2444:                       (void **)&arrayType) == SUCCESS &&",
          "2445:        (*arrayType)->extraAttributes &&",
          "2446:        zend_hash_find((*arrayType)->extraAttributes, WSDL_NAMESPACE\":arraySize\", sizeof(WSDL_NAMESPACE\":arraysize\"), (void **)&ext) == SUCCESS) {",
          "2447:     dimension = calc_dimension_12((*ext)->val);",
          "2448:     dims = get_position_12(dimension, (*ext)->val);",
          "",
          "[Added Lines]",
          "2364:              (arrayType = zend_hash_str_find_ptr(sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":itemType\",",
          "2365:                sizeof(SOAP_1_2_ENC_NAMESPACE\":itemType\")-1)) != NULL &&",
          "2366:              arrayType->extraAttributes &&",
          "2367:              (ext = zend_hash_str_find_ptr(arrayType->extraAttributes, WSDL_NAMESPACE\":itemType\", sizeof(WSDL_NAMESPACE\":itemType\")-1)) != NULL) {",
          "2368:    if (ext->ns != NULL) {",
          "2369:     enc = get_encoder(SOAP_GLOBAL(sdl), ext->ns, ext->val);",
          "2370:     get_type_str(xmlParam, ext->ns, ext->val, &array_type);",
          "2372:     smart_str_appends(&array_type, ext->val);",
          "2373:    }",
          "2374:    if ((arrayType = zend_hash_str_find_ptr(sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "2375:                       sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\")-1)) != NULL &&",
          "2376:        arrayType->extraAttributes &&",
          "2377:        (ext = zend_hash_str_find_ptr(arrayType->extraAttributes, WSDL_NAMESPACE\":arraySize\", sizeof(WSDL_NAMESPACE\":arraysize\")-1)) != NULL) {",
          "2378:     dimension = calc_dimension_12(ext->val);",
          "2379:     dims = get_position_12(dimension, ext->val);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2460:    }",
          "2461:   } else if (sdl_type &&",
          "2462:              sdl_type->attributes &&",
          "2470:    if (dims[0] == 0) {dims[0] = i;}",
          "2472:    smart_str_append_long(&array_size, dims[0]);",
          "",
          "[Removed Lines]",
          "2463:              zend_hash_find(sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "2464:                sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\"),",
          "2465:                (void **)&arrayType) == SUCCESS &&",
          "2466:              (*arrayType)->extraAttributes &&",
          "2467:              zend_hash_find((*arrayType)->extraAttributes, WSDL_NAMESPACE\":arraySize\", sizeof(WSDL_NAMESPACE\":arraySize\"), (void **)&ext) == SUCCESS) {",
          "2468:    dimension = calc_dimension_12((*ext)->val);",
          "2469:    dims = get_position_12(dimension, (*ext)->val);",
          "",
          "[Added Lines]",
          "2394:              (arrayType = zend_hash_str_find_ptr(sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "2395:                sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\")-1)) != NULL &&",
          "2396:              arrayType->extraAttributes &&",
          "2397:              (ext = zend_hash_str_find_ptr(arrayType->extraAttributes, WSDL_NAMESPACE\":arraySize\", sizeof(WSDL_NAMESPACE\":arraySize\")-1)) != NULL) {",
          "2398:    dimension = calc_dimension_12(ext->val);",
          "2399:    dims = get_position_12(dimension, ext->val);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2478:    if (sdl_type && sdl_type->elements &&",
          "2479:        zend_hash_num_elements(sdl_type->elements) == 1 &&",
          "2480:        (zend_hash_internal_pointer_reset(sdl_type->elements),",
          "2483:         elementType->encode && elementType->encode->details.type_str) {",
          "2484:     element_type = elementType;",
          "2485:     enc = elementType->encode;",
          "",
          "[Removed Lines]",
          "2481:         zend_hash_get_current_data(sdl_type->elements, (void**)&elementType) == SUCCESS) &&",
          "2482:      (elementType = *(sdlTypePtr*)elementType) != NULL &&",
          "",
          "[Added Lines]",
          "2411:         (elementType = zend_hash_get_current_data_ptr(sdl_type->elements)) != NULL) &&",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2490:   } else if (sdl_type && sdl_type->elements &&",
          "2491:              zend_hash_num_elements(sdl_type->elements) == 1 &&",
          "2492:              (zend_hash_internal_pointer_reset(sdl_type->elements),",
          "2495:              elementType->encode && elementType->encode->details.type_str) {",
          "2497:    element_type = elementType;",
          "",
          "[Removed Lines]",
          "2493:               zend_hash_get_current_data(sdl_type->elements, (void**)&elementType) == SUCCESS) &&",
          "2494:              (elementType = *(sdlTypePtr*)elementType) != NULL &&",
          "",
          "[Added Lines]",
          "2422:               (elementType = zend_hash_get_current_data_ptr(sdl_type->elements)) != NULL) &&",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2513:   if (style == SOAP_ENCODED) {",
          "2514:    if (soap_version == SOAP_1_1) {",
          "2515:     smart_str_0(&array_type);",
          "2517:      smart_str_free(&array_type);",
          "2518:      smart_str_appendl(&array_type,\"xsd:ur-type\",sizeof(\"xsd:ur-type\")-1);",
          "2519:     }",
          "",
          "[Removed Lines]",
          "2516:     if (strcmp(array_type.c,\"xsd:anyType\") == 0) {",
          "",
          "[Added Lines]",
          "2444:     if (strcmp(array_type.s->val,\"xsd:anyType\") == 0) {",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2521:     smart_str_append(&array_type, &array_size);",
          "2522:     smart_str_appendc(&array_type, ']');",
          "2523:     smart_str_0(&array_type);",
          "2525:    } else {",
          "2526:     int i = 0;",
          "2529:      ++i;",
          "2530:     }",
          "2531:     smart_str_0(&array_type);",
          "2532:     smart_str_0(&array_size);",
          "2535:    }",
          "2536:   }",
          "2537:   smart_str_free(&array_type);",
          "",
          "[Removed Lines]",
          "2524:     set_ns_prop(xmlParam, SOAP_1_1_ENC_NAMESPACE, \"arrayType\", array_type.c);",
          "2527:     while (i < array_size.len) {",
          "2528:      if (array_size.c[i] == ',') {array_size.c[i] = ' ';}",
          "2533:     set_ns_prop(xmlParam, SOAP_1_2_ENC_NAMESPACE, \"itemType\", array_type.c);",
          "2534:     set_ns_prop(xmlParam, SOAP_1_2_ENC_NAMESPACE, \"arraySize\", array_size.c);",
          "",
          "[Added Lines]",
          "2452:     set_ns_prop(xmlParam, SOAP_1_1_ENC_NAMESPACE, \"arrayType\", array_type.s->val);",
          "2455:     while (i < array_size.s->len) {",
          "2456:      if (array_size.s->val[i] == ',') {array_size.s->val[i] = ' ';}",
          "2461:     set_ns_prop(xmlParam, SOAP_1_2_ENC_NAMESPACE, \"itemType\", array_type.s->val);",
          "2462:     set_ns_prop(xmlParam, SOAP_1_2_ENC_NAMESPACE, \"arraySize\", array_size.s->val);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2548:   }",
          "2549:  }",
          "2555:  return xmlParam;",
          "2556: }",
          "2559: {",
          "2561:  xmlNodePtr trav;",
          "2562:  encodePtr enc = NULL;",
          "2563:  int dimension = 1;",
          "",
          "[Removed Lines]",
          "2551:  if (array_copy) {",
          "2552:   zval_ptr_dtor(&array_copy);",
          "2553:  }",
          "2558: static zval *to_zval_array(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "2560:  zval *ret;",
          "",
          "[Added Lines]",
          "2479:  zval_ptr_dtor(&array_copy);",
          "2484: static zval *to_zval_array(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2565:  int* pos = NULL;",
          "2566:  xmlAttrPtr attr;",
          "2567:  sdlPtr sdl;",
          "2570:  sdlTypePtr elementType;",
          "2573:  FIND_XML_NULL(data, ret);",
          "2574:  sdl = SOAP_GLOBAL(sdl);",
          "",
          "[Removed Lines]",
          "2568:  sdlAttributePtr *arrayType;",
          "2569:  sdlExtraAttributePtr *ext;",
          "2572:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "2493:  sdlAttributePtr arrayType;",
          "2494:  sdlExtraAttributePtr ext;",
          "2497:  ZVAL_NULL(ret);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2626:  } else if (type->sdl_type != NULL &&",
          "2627:             type->sdl_type->attributes != NULL &&",
          "2633:   char *type, *end;",
          "2636:   end = strrchr(type,'[');",
          "2637:   if (end) {",
          "2639:   }",
          "2642:   }",
          "2643:   efree(type);",
          "",
          "[Removed Lines]",
          "2628:             zend_hash_find(type->sdl_type->attributes, SOAP_1_1_ENC_NAMESPACE\":arrayType\",",
          "2629:                            sizeof(SOAP_1_1_ENC_NAMESPACE\":arrayType\"),",
          "2630:                            (void **)&arrayType) == SUCCESS &&",
          "2631:             (*arrayType)->extraAttributes &&",
          "2632:             zend_hash_find((*arrayType)->extraAttributes, WSDL_NAMESPACE\":arrayType\", sizeof(WSDL_NAMESPACE\":arrayType\"), (void **)&ext) == SUCCESS) {",
          "2635:   type = estrdup((*ext)->val);",
          "2640:   if ((*ext)->ns != NULL) {",
          "2641:    enc = get_encoder(SOAP_GLOBAL(sdl), (*ext)->ns, type);",
          "",
          "[Added Lines]",
          "2553:             (arrayType = zend_hash_str_find_ptr(type->sdl_type->attributes, SOAP_1_1_ENC_NAMESPACE\":arrayType\",",
          "2554:                            sizeof(SOAP_1_1_ENC_NAMESPACE\":arrayType\")-1)) != NULL &&",
          "2555:             arrayType->extraAttributes &&",
          "2556:             (ext = zend_hash_str_find_ptr(arrayType->extraAttributes, WSDL_NAMESPACE\":arrayType\", sizeof(WSDL_NAMESPACE\":arrayType\")-1)) != NULL) {",
          "2559:   type = estrdup(ext->val);",
          "2564:   if (ext->ns != NULL) {",
          "2565:    enc = get_encoder(SOAP_GLOBAL(sdl), ext->ns, type);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2648:  } else if (type->sdl_type != NULL &&",
          "2649:             type->sdl_type->attributes != NULL &&",
          "2667:   } else {",
          "2668:    dims = emalloc(sizeof(int));",
          "2670:   }",
          "2671:  } else if (type->sdl_type != NULL &&",
          "2672:             type->sdl_type->attributes != NULL &&",
          "2681:   if (type->sdl_type && type->sdl_type->elements &&",
          "2682:       zend_hash_num_elements(type->sdl_type->elements) == 1 &&",
          "2683:       (zend_hash_internal_pointer_reset(type->sdl_type->elements),",
          "2686:       elementType->encode) {",
          "2687:    enc = elementType->encode;",
          "2688:   }",
          "2689:  } else if (type->sdl_type && type->sdl_type->elements &&",
          "2690:             zend_hash_num_elements(type->sdl_type->elements) == 1 &&",
          "2691:             (zend_hash_internal_pointer_reset(type->sdl_type->elements),",
          "2694:             elementType->encode) {",
          "2695:   enc = elementType->encode;",
          "2696:  }",
          "",
          "[Removed Lines]",
          "2650:             zend_hash_find(type->sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":itemType\",",
          "2651:                            sizeof(SOAP_1_2_ENC_NAMESPACE\":itemType\"),",
          "2652:                            (void **)&arrayType) == SUCCESS &&",
          "2653:             (*arrayType)->extraAttributes &&",
          "2654:             zend_hash_find((*arrayType)->extraAttributes, WSDL_NAMESPACE\":itemType\", sizeof(WSDL_NAMESPACE\":itemType\"), (void **)&ext) == SUCCESS) {",
          "2656:   if ((*ext)->ns != NULL) {",
          "2657:    enc = get_encoder(SOAP_GLOBAL(sdl), (*ext)->ns, (*ext)->val);",
          "2658:   }",
          "2660:   if (zend_hash_find(type->sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "2661:                      sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\"),",
          "2662:                      (void **)&arrayType) == SUCCESS &&",
          "2663:       (*arrayType)->extraAttributes &&",
          "2664:       zend_hash_find((*arrayType)->extraAttributes, WSDL_NAMESPACE\":arraySize\", sizeof(WSDL_NAMESPACE\":arraysize\"), (void **)&ext) == SUCCESS) {",
          "2665:    dimension = calc_dimension_12((*ext)->val);",
          "2666:    dims = get_position_12(dimension, (*ext)->val);",
          "2673:             zend_hash_find(type->sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "2674:                            sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\"),",
          "2675:                            (void **)&arrayType) == SUCCESS &&",
          "2676:             (*arrayType)->extraAttributes &&",
          "2677:             zend_hash_find((*arrayType)->extraAttributes, WSDL_NAMESPACE\":arraySize\", sizeof(WSDL_NAMESPACE\":arraysize\"), (void **)&ext) == SUCCESS) {",
          "2679:   dimension = calc_dimension_12((*ext)->val);",
          "2680:   dims = get_position_12(dimension, (*ext)->val);",
          "2684:        zend_hash_get_current_data(type->sdl_type->elements, (void**)&elementType) == SUCCESS) &&",
          "2685:       (elementType = *(sdlTypePtr*)elementType) != NULL &&",
          "2692:              zend_hash_get_current_data(type->sdl_type->elements, (void**)&elementType) == SUCCESS) &&",
          "2693:             (elementType = *(sdlTypePtr*)elementType) != NULL &&",
          "",
          "[Added Lines]",
          "2574:             (arrayType = zend_hash_str_find_ptr(type->sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":itemType\",",
          "2575:                            sizeof(SOAP_1_2_ENC_NAMESPACE\":itemType\")-1)) != NULL &&",
          "2576:             arrayType->extraAttributes &&",
          "2577:             (ext = zend_hash_str_find_ptr(arrayType->extraAttributes, WSDL_NAMESPACE\":itemType\", sizeof(WSDL_NAMESPACE\":itemType\")-1)) != NULL) {",
          "2579:   if (ext->ns != NULL) {",
          "2580:    enc = get_encoder(SOAP_GLOBAL(sdl), ext->ns, ext->val);",
          "2581:   }",
          "2583:   if ((arrayType = zend_hash_str_find_ptr(type->sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "2584:                      sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\")-1)) != NULL &&",
          "2585:       arrayType->extraAttributes &&",
          "2586:       (ext = zend_hash_str_find_ptr(arrayType->extraAttributes, WSDL_NAMESPACE\":arraySize\", sizeof(WSDL_NAMESPACE\":arraysize\")-1)) != NULL) {",
          "2587:    dimension = calc_dimension_12(ext->val);",
          "2588:    dims = get_position_12(dimension, ext->val);",
          "2595:             (arrayType = zend_hash_str_find_ptr(type->sdl_type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "2596:                            sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\")-1)) != NULL &&",
          "2597:             arrayType->extraAttributes &&",
          "2598:             (ext = zend_hash_str_find_ptr(arrayType->extraAttributes, WSDL_NAMESPACE\":arraySize\", sizeof(WSDL_NAMESPACE\":arraysize\")-1)) != NULL) {",
          "2600:   dimension = calc_dimension_12(ext->val);",
          "2601:   dims = get_position_12(dimension, ext->val);",
          "2605:        (elementType = zend_hash_get_current_data_ptr(type->sdl_type->elements)) != NULL) &&",
          "2612:              (elementType = zend_hash_get_current_data_ptr(type->sdl_type->elements)) != NULL) &&",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2717:  while (trav) {",
          "2718:   if (trav->type == XML_ELEMENT_NODE) {",
          "2719:    int i;",
          "2721:    xmlAttrPtr position = get_attribute(trav->properties,\"position\");",
          "2724:    if (position != NULL && position->children && position->children->content) {",
          "2725:     char* tmp = strrchr((char*)position->children->content, '[');",
          "2726:     if (tmp == NULL) {",
          "",
          "[Removed Lines]",
          "2720:    zval *tmpVal, *ar;",
          "2723:    tmpVal = master_to_zval(enc, trav TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2639:    zval tmpVal, *ar;",
          "2642:    master_to_zval(&tmpVal, enc, trav TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2733:    i = 0;",
          "2734:    ar = ret;",
          "2735:    while (i < dimension-1) {",
          "2739:     } else {",
          "2745:     }",
          "2746:     i++;",
          "2747:    }",
          "2751:    i = dimension;",
          "",
          "[Removed Lines]",
          "2736:     zval** ar2;",
          "2737:     if (zend_hash_index_find(Z_ARRVAL_P(ar), pos[i], (void**)&ar2) == SUCCESS) {",
          "2738:      ar = *ar2;",
          "2740:      zval *tmpAr;",
          "2741:      MAKE_STD_ZVAL(tmpAr);",
          "2742:      array_init(tmpAr);",
          "2743:      zend_hash_index_update(Z_ARRVAL_P(ar), pos[i], &tmpAr, sizeof(zval*), (void**)&ar2);",
          "2744:      ar = *ar2;",
          "2748:    zend_hash_index_update(Z_ARRVAL_P(ar), pos[i], &tmpVal, sizeof(zval *), NULL);",
          "",
          "[Added Lines]",
          "2655:     zval* ar2;",
          "2656:     if ((ar2 = zend_hash_index_find(Z_ARRVAL_P(ar), pos[i])) != NULL) {",
          "2657:      ar = ar2;",
          "2659:      zval tmpAr;",
          "2660:      array_init(&tmpAr);",
          "2661:      ar = zend_hash_index_update(Z_ARRVAL_P(ar), pos[i], &tmpAr);",
          "2665:    zend_hash_index_update(Z_ARRVAL_P(ar), pos[i], &tmpVal);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2783:  if (Z_TYPE_P(data) == IS_ARRAY) {",
          "2784:   i = zend_hash_num_elements(Z_ARRVAL_P(data));",
          "2786:   for (;i > 0;i--) {",
          "2787:    xmlNodePtr xparam, item;",
          "2788:    xmlNodePtr key;",
          "2791:    ulong int_val;",
          "2794:    item = xmlNewNode(NULL, BAD_CAST(\"item\"));",
          "2795:    xmlAddChild(xmlParam, item);",
          "2796:    key = xmlNewNode(NULL, BAD_CAST(\"key\"));",
          "2797:    xmlAddChild(item,key);",
          "2799:     if (style == SOAP_ENCODED) {",
          "2800:      set_xsi_type(key, \"xsd:string\");",
          "2801:     }",
          "2803:    } else {",
          "2804:     smart_str tmp = {0};",
          "2805:     smart_str_append_long(&tmp, int_val);",
          "",
          "[Removed Lines]",
          "2785:   zend_hash_internal_pointer_reset(data->value.ht);",
          "2789:    zval **temp_data;",
          "2790:    char *key_val;",
          "2793:    zend_hash_get_current_data(data->value.ht, (void **)&temp_data);",
          "2798:    if (zend_hash_get_current_key(data->value.ht, &key_val, &int_val, FALSE) == HASH_KEY_IS_STRING) {",
          "2802:     xmlNodeSetContent(key, BAD_CAST(key_val));",
          "",
          "[Added Lines]",
          "2702:   zend_hash_internal_pointer_reset(Z_ARRVAL_P(data));",
          "2706:    zval *temp_data;",
          "2707:    zend_string *key_val;",
          "2710:    temp_data = zend_hash_get_current_data(Z_ARRVAL_P(data));",
          "2715:    if (zend_hash_get_current_key(Z_ARRVAL_P(data), &key_val, &int_val, FALSE) == HASH_KEY_IS_STRING) {",
          "2719:     xmlNodeSetContent(key, BAD_CAST(key_val->val));",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2808:     if (style == SOAP_ENCODED) {",
          "2809:      set_xsi_type(key, \"xsd:int\");",
          "2810:     }",
          "2813:     smart_str_free(&tmp);",
          "2814:    }",
          "2817:    xmlNodeSetName(xparam, BAD_CAST(\"value\"));",
          "2820:   }",
          "2821:  }",
          "2822:  if (style == SOAP_ENCODED) {",
          "",
          "[Removed Lines]",
          "2811:     xmlNodeSetContentLen(key, BAD_CAST(tmp.c), tmp.len);",
          "2816:    xparam = master_to_xml(get_conversion((*temp_data)->type), (*temp_data), style, item TSRMLS_CC);",
          "2819:    zend_hash_move_forward(data->value.ht);",
          "",
          "[Added Lines]",
          "2728:     xmlNodeSetContentLen(key, BAD_CAST(tmp.s->val), tmp.s->len);",
          "2733:    xparam = master_to_xml(get_conversion(Z_TYPE_P(temp_data)), temp_data, style, item TSRMLS_CC);",
          "2736:    zend_hash_move_forward(Z_ARRVAL_P(data));",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2826:  return xmlParam;",
          "2827: }",
          "2830: {",
          "2832:  xmlNodePtr trav, item, xmlKey, xmlValue;",
          "2835:  FIND_XML_NULL(data, ret);",
          "2837:  if (data && data->children) {",
          "",
          "[Removed Lines]",
          "2829: static zval *to_zval_map(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "2831:  zval *ret, *key, *value;",
          "2834:  MAKE_STD_ZVAL(ret);",
          "",
          "[Added Lines]",
          "2746: static zval *to_zval_map(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "2748:  zval key, value;",
          "2751:  ZVAL_NULL(ret);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2850:     soap_error0(E_ERROR,  \"Encoding: Can't decode apache map, missing value\");",
          "2851:    }",
          "2860:    } else {",
          "2861:     soap_error0(E_ERROR,  \"Encoding: Can't decode apache map, only Strings or Longs are allowd as keys\");",
          "2862:    }",
          "",
          "[Removed Lines]",
          "2853:    key = master_to_zval(NULL, xmlKey TSRMLS_CC);",
          "2854:    value = master_to_zval(NULL, xmlValue TSRMLS_CC);",
          "2856:    if (Z_TYPE_P(key) == IS_STRING) {",
          "2857:     zend_symtable_update(Z_ARRVAL_P(ret), Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &value, sizeof(zval *), NULL);",
          "2858:    } else if (Z_TYPE_P(key) == IS_LONG) {",
          "2859:     zend_hash_index_update(Z_ARRVAL_P(ret), Z_LVAL_P(key), &value, sizeof(zval *), NULL);",
          "",
          "[Added Lines]",
          "2770:    master_to_zval(&key, NULL, xmlKey TSRMLS_CC);",
          "2771:    master_to_zval(&value, NULL, xmlValue TSRMLS_CC);",
          "2773:    if (Z_TYPE(key) == IS_STRING) {",
          "2774:     zend_symtable_update(Z_ARRVAL_P(ret), Z_STR(key), &value);",
          "2775:    } else if (Z_TYPE(key) == IS_LONG) {",
          "2776:     zend_hash_index_update(Z_ARRVAL_P(ret), Z_LVAL(key), &value);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2876:  xmlNodePtr ret;",
          "2878:  if (data) {",
          "2880:  } else {",
          "2881:   enc = get_conversion(IS_NULL);",
          "2882:  }",
          "",
          "[Removed Lines]",
          "2879:   enc = get_conversion(data->type);",
          "",
          "[Added Lines]",
          "2796:   enc = get_conversion(Z_TYPE_P(data));",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2889:  return ret;",
          "2890: }",
          "2893: {",
          "2894:  encodePtr enc = NULL;",
          "2895:  xmlAttrPtr tmpattr;",
          "2896:  xmlChar *type_name = NULL;",
          "2899:  data = check_and_resolve_href(data);",
          "",
          "[Removed Lines]",
          "2892: static zval *guess_zval_convert(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "2897:  zval *ret;",
          "",
          "[Added Lines]",
          "2809: static zval *guess_zval_convert(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2947:    }",
          "2948:   }",
          "2949:  }",
          "2951:  if (SOAP_GLOBAL(sdl) && type_name && enc->details.sdl_type) {",
          "2953:   char *ns, *cptype;",
          "2954:   xmlNsPtr nsptr;",
          "2959:   Z_DELREF_P(ret);",
          "2961:   parse_namespace(type_name, &cptype, &ns);",
          "2962:   nsptr = xmlSearchNs(data->doc, data, BAD_CAST(ns));",
          "2964:   if (nsptr) {",
          "2966:   }",
          "2967:   efree(cptype);",
          "2968:   if (ns) {efree(ns);}",
          "2970:  }",
          "2971:  return ret;",
          "2972: }",
          "",
          "[Removed Lines]",
          "2950:  ret = master_to_zval_int(enc, data TSRMLS_CC);",
          "2952:   zval* soapvar;",
          "2956:   MAKE_STD_ZVAL(soapvar);",
          "2957:   object_init_ex(soapvar, soap_var_class_entry);",
          "2958:   add_property_long(soapvar, \"enc_type\", enc->details.type);",
          "2960:   add_property_zval(soapvar, \"enc_value\", ret);",
          "2963:   add_property_string(soapvar, \"enc_stype\", cptype);",
          "2965:    add_property_string(soapvar, \"enc_ns\", (char*)nsptr->href);",
          "2969:   ret = soapvar;",
          "",
          "[Added Lines]",
          "2866:  master_to_zval_int(ret, enc, data TSRMLS_CC);",
          "2868:   zval soapvar;",
          "2872:   object_init_ex(&soapvar, soap_var_class_entry);",
          "2873:   add_property_long(&soapvar, \"enc_type\", enc->details.type);",
          "2875:   add_property_zval(&soapvar, \"enc_value\", ret);",
          "2878:   add_property_string(&soapvar, \"enc_stype\", cptype);",
          "2880:    add_property_string(&soapvar, \"enc_ns\", (char*)nsptr->href);",
          "2884:   ZVAL_COPY_VALUE(ret, &soapvar);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3083:  return to_xml_datetime_ex(type, data, \"--%m--\", style, parent TSRMLS_CC);",
          "3084: }",
          "3089: }",
          "3091: static xmlNodePtr to_xml_list(encodeTypePtr enc, zval *data, int style, xmlNodePtr parent TSRMLS_DC) {",
          "",
          "[Removed Lines]",
          "3086: static zval* to_zval_list(encodeTypePtr enc, xmlNodePtr data TSRMLS_DC) {",
          "3088:  return to_zval_stringc(enc, data TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3001: static zval* to_zval_list(zval *ret, encodeTypePtr enc, xmlNodePtr data TSRMLS_DC) {",
          "3003:  return to_zval_stringc(ret, enc, data TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3093:  encodePtr list_enc = NULL;",
          "3095:  if (enc->sdl_type && enc->sdl_type->kind == XSD_TYPEKIND_LIST && enc->sdl_type->elements) {",
          "3102:  }",
          "3104:  ret = xmlNewNode(NULL, BAD_CAST(\"BOGUS\"));",
          "3105:  xmlAddChild(parent, ret);",
          "3106:  FIND_ZVAL_NULL(data, ret, style);",
          "3107:  if (Z_TYPE_P(data) == IS_ARRAY) {",
          "3109:   smart_str list = {0};",
          "3110:   HashTable *ht = Z_ARRVAL_P(data);",
          "3115:    if (dummy && dummy->children && dummy->children->content) {",
          "3117:      smart_str_appendc(&list, ' ');",
          "3118:     }",
          "3119:     smart_str_appends(&list, (char*)dummy->children->content);",
          "",
          "[Removed Lines]",
          "3096:   sdlTypePtr *type;",
          "3098:   zend_hash_internal_pointer_reset(enc->sdl_type->elements);",
          "3099:   if (zend_hash_get_current_data(enc->sdl_type->elements, (void**)&type) == SUCCESS) {",
          "3100:    list_enc = (*type)->encode;",
          "3101:   }",
          "3108:   zval **tmp;",
          "3112:   zend_hash_internal_pointer_reset(ht);",
          "3113:   while (zend_hash_get_current_data(ht, (void**)&tmp) == SUCCESS) {",
          "3114:    xmlNodePtr dummy = master_to_xml(list_enc, *tmp, SOAP_LITERAL, ret TSRMLS_CC);",
          "3116:     if (list.len != 0) {",
          "",
          "[Added Lines]",
          "3011:   sdlTypePtr type;",
          "3013:   ZEND_HASH_FOREACH_PTR(enc->sdl_type->elements, type) {",
          "3014:    list_enc = type->encode;",
          "3015:    break;",
          "3016:   } ZEND_HASH_FOREACH_END();",
          "3023:   zval *tmp;",
          "3027:   ZEND_HASH_FOREACH_VAL(ht, tmp) {",
          "3028:    xmlNodePtr dummy = master_to_xml(list_enc, tmp, SOAP_LITERAL, ret TSRMLS_CC);",
          "3030:     if (list.s && list.s->len != 0) {",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3122:    }",
          "3123:    xmlUnlinkNode(dummy);",
          "3124:    xmlFreeNode(dummy);",
          "3127:   smart_str_0(&list);",
          "3129:   smart_str_free(&list);",
          "3130:  } else {",
          "3131:   zval tmp = *data;",
          "",
          "[Removed Lines]",
          "3125:    zend_hash_move_forward(ht);",
          "3126:   }",
          "3128:   xmlNodeSetContentLen(ret, BAD_CAST(list.c), list.len);",
          "",
          "[Added Lines]",
          "3039:   } ZEND_HASH_FOREACH_END();",
          "3041:   xmlNodeSetContentLen(ret, BAD_CAST(list.s->val), list.s->len);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3150:      next++;",
          "3151:    }",
          "3153:    dummy = master_to_xml(list_enc, &dummy_zval, SOAP_LITERAL, ret TSRMLS_CC);",
          "3154:    if (dummy && dummy->children && dummy->children->content) {",
          "3156:      smart_str_appendc(&list, ' ');",
          "3157:     }",
          "3158:     smart_str_appends(&list, (char*)dummy->children->content);",
          "",
          "[Removed Lines]",
          "3152:    ZVAL_STRING(&dummy_zval, start, 0);",
          "3155:     if (list.len != 0) {",
          "",
          "[Added Lines]",
          "3066:    ZVAL_STRING(&dummy_zval, start);",
          "3069:     if (list.s && list.s->len != 0) {",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3165:    start = next;",
          "3166:   }",
          "3167:   smart_str_0(&list);",
          "3169:   smart_str_free(&list);",
          "3170:   efree(str);",
          "3171:   if (data == &tmp) {zval_dtor(&tmp);}",
          "",
          "[Removed Lines]",
          "3168:   xmlNodeSetContentLen(ret, BAD_CAST(list.c), list.len);",
          "",
          "[Added Lines]",
          "3082:   xmlNodeSetContentLen(ret, BAD_CAST(list.s->val), list.s->len);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3178:  return to_xml_list(enc,data,style, parent TSRMLS_CC);",
          "3179: }",
          "3184: }",
          "3186: static xmlNodePtr to_xml_union(encodeTypePtr enc, zval *data, int style, xmlNodePtr parent TSRMLS_DC) {",
          "",
          "[Removed Lines]",
          "3181: static zval* to_zval_union(encodeTypePtr enc, xmlNodePtr data TSRMLS_DC) {",
          "3183:  return to_zval_list(enc, data TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3095: static zval* to_zval_union(zval *ret, encodeTypePtr enc, xmlNodePtr data TSRMLS_DC) {",
          "3097:  return to_zval_list(ret, enc, data TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3188:  return to_xml_list(enc,data,style, parent TSRMLS_CC);",
          "3189: }",
          "3192: {",
          "3193:  xmlBufferPtr buf;",
          "3196:  if (SOAP_GLOBAL(sdl) && SOAP_GLOBAL(sdl)->elements && data->name) {",
          "3197:   smart_str nscat = {0};",
          "3200:   if (data->ns && data->ns->href) {",
          "3201:    smart_str_appends(&nscat, (char*)data->ns->href);",
          "",
          "[Removed Lines]",
          "3191: static zval *to_zval_any(encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "3194:  zval *ret;",
          "3198:   sdlTypePtr *sdl_type;",
          "",
          "[Added Lines]",
          "3105: static zval *to_zval_any(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC)",
          "3111:   sdlTypePtr sdl_type;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3204:   smart_str_appends(&nscat, (char*)data->name);",
          "3205:   smart_str_0(&nscat);",
          "3209:    smart_str_free(&nscat);",
          "3211:   }",
          "3212:   smart_str_free(&nscat);",
          "3213:  }",
          "3215:  buf = xmlBufferCreate();",
          "3216:  xmlNodeDump(buf, NULL, data, 0, 0);",
          "3219:  xmlBufferFree(buf);",
          "3220:  return ret;",
          "3221: }",
          "",
          "[Removed Lines]",
          "3207:   if (zend_hash_find(SOAP_GLOBAL(sdl)->elements, nscat.c, nscat.len+1, (void **)&sdl_type) == SUCCESS &&",
          "3208:       (*sdl_type)->encode) {",
          "3210:    return master_to_zval_int((*sdl_type)->encode, data TSRMLS_CC);",
          "3217:  MAKE_STD_ZVAL(ret);",
          "3218:  ZVAL_STRING(ret, (char*)xmlBufferContent(buf), 1);",
          "",
          "[Added Lines]",
          "3120:   if ((sdl_type = zend_hash_find_ptr(SOAP_GLOBAL(sdl)->elements, nscat.s)) != NULL &&",
          "3121:       sdl_type->encode) {",
          "3123:    return master_to_zval_int(ret, sdl_type->encode, data TSRMLS_CC);",
          "3130:  ZVAL_STRING(ret, (char*)xmlBufferContent(buf));",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3225:  xmlNodePtr ret = NULL;",
          "3227:  if (Z_TYPE_P(data) == IS_ARRAY) {",
          "3230:   encodePtr enc = get_conversion(XSD_ANYXML);",
          "3239:       if (ret &&",
          "3243:       }",
          "3245:   return ret;",
          "3246:  }",
          "3247:  if (Z_TYPE_P(data) == IS_STRING) {",
          "",
          "[Removed Lines]",
          "3228:   HashPosition pos;",
          "3229:   zval **el;",
          "3231:   char *name;",
          "3232:   uint name_len;",
          "3233:   ulong idx;",
          "3235:   for (zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(data), &pos);",
          "3236:        zend_hash_get_current_data_ex(Z_ARRVAL_P(data), (void **) &el, &pos) == SUCCESS;",
          "3237:        zend_hash_move_forward_ex(Z_ARRVAL_P(data), &pos)) {",
          "3238:    ret = master_to_xml(enc, *el, style, parent TSRMLS_CC);",
          "3240:           ret->name != xmlStringTextNoenc &&",
          "3241:           zend_hash_get_current_key_ex(Z_ARRVAL_P(data), &name, &name_len, &idx, 0, &pos) == HASH_KEY_IS_STRING) {",
          "3242:     xmlNodeSetName(ret, BAD_CAST(name));",
          "3244:   }",
          "",
          "[Added Lines]",
          "3140:   zval *el;",
          "3142:   zend_string *name;",
          "3144:   ZEND_HASH_FOREACH_STR_KEY_VAL(Z_ARRVAL_P(data), name, el) {",
          "3145:    ret = master_to_xml(enc, el, style, parent TSRMLS_CC);",
          "3147:           ret->name != xmlStringTextNoenc) {",
          "3148:     xmlNodeSetName(ret, BAD_CAST(name->val));",
          "3150:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3270:  return ret;",
          "3271: }",
          "3274: {",
          "3275:  sdlTypePtr type;",
          "3277:  type = enc->sdl_type;",
          "3278:  if (type == NULL) {",
          "3280:  }",
          "3282:  if (type && type->restrictions &&",
          "",
          "[Removed Lines]",
          "3273: zval *sdl_guess_convert_zval(encodeTypePtr enc, xmlNodePtr data TSRMLS_DC)",
          "3279:   return guess_zval_convert(enc, data TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3179: zval *sdl_guess_convert_zval(zval *ret, encodeTypePtr enc, xmlNodePtr data TSRMLS_DC)",
          "3185:   return guess_zval_convert(ret, enc, data TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3310:  switch (type->kind) {",
          "3311:   case XSD_TYPEKIND_SIMPLE:",
          "3312:    if (type->encode && enc != &type->encode->details) {",
          "3314:    } else {",
          "3316:    }",
          "3317:    break;",
          "3318:   case XSD_TYPEKIND_LIST:",
          "3320:   case XSD_TYPEKIND_UNION:",
          "3322:   case XSD_TYPEKIND_COMPLEX:",
          "3323:   case XSD_TYPEKIND_RESTRICTION:",
          "3324:   case XSD_TYPEKIND_EXTENSION:",
          "3325:    if (type->encode &&",
          "3326:        (type->encode->details.type == IS_ARRAY ||",
          "3327:         type->encode->details.type == SOAP_ENC_ARRAY)) {",
          "3329:    }",
          "3331:   default:",
          "3332:     soap_error0(E_ERROR, \"Encoding: Internal Error\");",
          "3334:  }",
          "3335: }",
          "",
          "[Removed Lines]",
          "3313:     return master_to_zval_int(type->encode, data TSRMLS_CC);",
          "3315:     return guess_zval_convert(enc, data TSRMLS_CC);",
          "3319:    return to_zval_list(enc, data TSRMLS_CC);",
          "3321:    return to_zval_union(enc, data TSRMLS_CC);",
          "3328:     return to_zval_array(enc, data TSRMLS_CC);",
          "3330:    return to_zval_object(enc, data TSRMLS_CC);",
          "3333:    return guess_zval_convert(enc, data TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3219:     return master_to_zval_int(ret, type->encode, data TSRMLS_CC);",
          "3221:     return guess_zval_convert(ret, enc, data TSRMLS_CC);",
          "3225:    return to_zval_list(ret, enc, data TSRMLS_CC);",
          "3227:    return to_zval_union(ret, enc, data TSRMLS_CC);",
          "3234:     return to_zval_array(ret, enc, data TSRMLS_CC);",
          "3236:    return to_zval_object(ret, enc, data TSRMLS_CC);",
          "3239:    return guess_zval_convert(ret, enc, data TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3462: {",
          "3463:  smart_str nstype = {0};",
          "3464:  get_type_str(node, ns, type, &nstype);",
          "3466:  smart_str_free(&nstype);",
          "3467: }",
          "",
          "[Removed Lines]",
          "3465:  set_xsi_type(node, nstype.c);",
          "",
          "[Added Lines]",
          "3371:  set_xsi_type(node, nstype.s->val);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3519:   xmlChar* prefix;",
          "3520:         TSRMLS_FETCH();",
          "3523:    xmlns = xmlNewNs(node->doc->children, BAD_CAST(ns), prefix);",
          "3524:   } else {",
          "3525:    smart_str prefix = {0};",
          "",
          "[Removed Lines]",
          "3522:   if (zend_hash_find(&SOAP_GLOBAL(defEncNs), (char*)ns, strlen(ns) + 1, (void **)&prefix) == SUCCESS) {",
          "",
          "[Added Lines]",
          "3428:   if ((prefix = zend_hash_str_find_ptr(&SOAP_GLOBAL(defEncNs), (char*)ns, strlen(ns))) != NULL) {",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3529:     smart_str_appendl(&prefix, \"ns\", 2);",
          "3530:     smart_str_append_long(&prefix, num);",
          "3531:     smart_str_0(&prefix);",
          "3533:      break;",
          "3534:     }",
          "3535:     smart_str_free(&prefix);",
          "3538:     num = ++SOAP_GLOBAL(cur_uniq_ns);",
          "3539:    }",
          "3542:    smart_str_free(&prefix);",
          "3543:   }",
          "3544:  }",
          "",
          "[Removed Lines]",
          "3532:     if (xmlSearchNs(node->doc, node, BAD_CAST(prefix.c)) == NULL) {",
          "3536:     prefix.c = NULL;",
          "3537:     prefix.len = 0;",
          "3541:    xmlns = xmlNewNs(node->doc->children, BAD_CAST(ns), BAD_CAST(prefix.c));",
          "",
          "[Added Lines]",
          "3438:     if (xmlSearchNs(node->doc, node, BAD_CAST(prefix.s->val)) == NULL) {",
          "3442:     prefix.s = NULL;",
          "3446:    xmlns = xmlNewNs(node->doc->children, BAD_CAST(ns), BAD_CAST(prefix.s ? prefix.s->val : \"\"));",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3588: encodePtr get_conversion(int encode)",
          "3589: {",
          "3591:  TSRMLS_FETCH();",
          "3594:   soap_error0(E_ERROR,  \"Encoding: Cannot find encoding\");",
          "3595:   return NULL;",
          "3596:  } else {",
          "3598:  }",
          "3599: }",
          "",
          "[Removed Lines]",
          "3590:  encodePtr *enc = NULL;",
          "3593:  if (zend_hash_index_find(&SOAP_GLOBAL(defEncIndex), encode, (void **)&enc) == FAILURE) {",
          "3597:   return *enc;",
          "",
          "[Added Lines]",
          "3495:  encodePtr enc;",
          "3498:  if ((enc = zend_hash_index_find_ptr(&SOAP_GLOBAL(defEncIndex), encode)) == NULL) {",
          "3502:   return enc;",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3605:  zend_hash_internal_pointer_reset(Z_ARRVAL_P(array));",
          "3606:  for (i = 0; i < count; i++) {",
          "3608:   ulong num_index;",
          "3611:       num_index != i) {",
          "3612:    return TRUE;",
          "3613:   }",
          "",
          "[Removed Lines]",
          "3607:   char *str_index;",
          "3610:   if (zend_hash_get_current_key(Z_ARRVAL_P(array), &str_index, &num_index, 0) == HASH_KEY_IS_STRING ||",
          "",
          "[Added Lines]",
          "3512:   zend_string *_str_index;",
          "3515:   if (zend_hash_get_current_key(Z_ARRVAL_P(array), &_str_index, &num_index, 0) == HASH_KEY_IS_STRING ||",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3620: {",
          "3621:  HashTable *ht;",
          "3622:  int i, count, cur_type, prev_type, different;",
          "3624:  char *prev_stype = NULL, *cur_stype = NULL, *prev_ns = NULL, *cur_ns = NULL;",
          "3626:  if (!array || Z_TYPE_P(array) != IS_ARRAY) {",
          "",
          "[Removed Lines]",
          "3623:  zval **tmp;",
          "",
          "[Added Lines]",
          "3528:  zval *tmp;",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3636:  zend_hash_internal_pointer_reset(ht);",
          "3637:  for (i = 0;i < count;i++) {",
          "3645:     soap_error0(E_ERROR,  \"Encoding: SoapVar has no 'enc_type' property\");",
          "3646:    }",
          "3651:    } else {",
          "3652:     cur_stype = NULL;",
          "3653:    }",
          "3657:    } else {",
          "3658:     cur_ns = NULL;",
          "3659:    }",
          "3662:    cur_type = APACHE_MAP;",
          "3663:    cur_stype = NULL;",
          "3664:    cur_ns = NULL;",
          "3665:   } else {",
          "3667:    cur_stype = NULL;",
          "3668:    cur_ns = NULL;",
          "3669:   }",
          "",
          "[Removed Lines]",
          "3638:   zend_hash_get_current_data(ht, (void **)&tmp);",
          "3640:   if (Z_TYPE_PP(tmp) == IS_OBJECT &&",
          "3641:       Z_OBJCE_PP(tmp) == soap_var_class_entry) {",
          "3642:    zval **ztype;",
          "3644:    if (zend_hash_find(Z_OBJPROP_PP(tmp), \"enc_type\", sizeof(\"enc_type\"), (void **)&ztype) == FAILURE) {",
          "3647:    cur_type = Z_LVAL_PP(ztype);",
          "3649:    if (zend_hash_find(Z_OBJPROP_PP(tmp), \"enc_stype\", sizeof(\"enc_stype\"), (void **)&ztype) == SUCCESS) {",
          "3650:     cur_stype = Z_STRVAL_PP(ztype);",
          "3655:    if (zend_hash_find(Z_OBJPROP_PP(tmp), \"enc_ns\", sizeof(\"enc_ns\"), (void **)&ztype) == SUCCESS) {",
          "3656:     cur_ns = Z_STRVAL_PP(ztype);",
          "3661:   } else if (Z_TYPE_PP(tmp) == IS_ARRAY && is_map(*tmp)) {",
          "3666:    cur_type = Z_TYPE_PP(tmp);",
          "",
          "[Added Lines]",
          "3543:   tmp = zend_hash_get_current_data(ht);",
          "3545:   if (Z_TYPE_P(tmp) == IS_OBJECT &&",
          "3546:       Z_OBJCE_P(tmp) == soap_var_class_entry) {",
          "3547:    zval *ztype;",
          "3549:    if ((ztype = zend_hash_str_find(Z_OBJPROP_P(tmp), \"enc_type\", sizeof(\"enc_type\")-1)) == NULL) {",
          "3552:    cur_type = Z_LVAL_P(ztype);",
          "3554:    if ((ztype = zend_hash_str_find(Z_OBJPROP_P(tmp), \"enc_stype\", sizeof(\"enc_stype\")-1)) != NULL) {",
          "3555:     cur_stype = Z_STRVAL_P(ztype);",
          "3560:    if ((ztype = zend_hash_str_find(Z_OBJPROP_P(tmp), \"enc_ns\", sizeof(\"enc_ns\")-1)) != NULL) {",
          "3561:     cur_ns = Z_STRVAL_P(ztype);",
          "3566:   } else if (Z_TYPE_P(tmp) == IS_ARRAY && is_map(tmp)) {",
          "3571:    cur_type = Z_TYPE_P(tmp);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3707:    smart_str_appends(&array_type, cur_stype);",
          "3708:    smart_str_0(&array_type);",
          "3711:    smart_str_free(&array_type);",
          "3712:    return enc;",
          "3713:   } else {",
          "",
          "[Removed Lines]",
          "3710:    enc = get_encoder_ex(SOAP_GLOBAL(sdl), array_type.c, array_type.len);",
          "",
          "[Added Lines]",
          "3615:    enc = get_encoder_ex(SOAP_GLOBAL(sdl), array_type.s->val, array_type.s->len);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3743: {",
          "3744:  soapMappingPtr map = (soapMappingPtr)data;",
          "3752:  efree(map);",
          "3753: }",
          "3756: {",
          "3758:  if (t->details.ns) {",
          "3759:   efree(t->details.ns);",
          "3760:  }",
          "",
          "[Removed Lines]",
          "3746:  if (map->to_xml) {",
          "3747:   zval_ptr_dtor(&map->to_xml);",
          "3748:  }",
          "3749:  if (map->to_zval) {",
          "3750:   zval_ptr_dtor(&map->to_zval);",
          "3751:  }",
          "3755: void delete_encoder(void *encode)",
          "3757:  encodePtr t = *((encodePtr*)encode);",
          "",
          "[Added Lines]",
          "3651:  zval_ptr_dtor(&map->to_xml);",
          "3652:  zval_ptr_dtor(&map->to_zval);",
          "3656: void delete_encoder(zval *zv)",
          "3658:  encodePtr t = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3767:  efree(t);",
          "3768: }",
          "3771: {",
          "3773:  if (t->details.ns) {",
          "3774:   free(t->details.ns);",
          "3775:  }",
          "",
          "[Removed Lines]",
          "3770: void delete_encoder_persistent(void *encode)",
          "3772:  encodePtr t = *((encodePtr*)encode);",
          "",
          "[Added Lines]",
          "3671: void delete_encoder_persistent(zval *zv)",
          "3673:  encodePtr t = Z_PTR_P(zv);",
          "",
          "---------------"
        ],
        "ext/soap/php_encoding.h||ext/soap/php_encoding.h": [
          "File: ext/soap/php_encoding.h -> ext/soap/php_encoding.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: struct _encode {",
          "185:  encodeType details;",
          "187:  xmlNodePtr (*to_xml)(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "188: };",
          "191: xmlNodePtr master_to_xml(encodePtr encode, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "195: xmlNodePtr to_xml_user(encodeTypePtr type, zval *data, int style, xmlNodePtr parent TSRMLS_DC);",
          "198: void whiteSpace_replace(xmlChar* str);",
          "199: void whiteSpace_collapse(xmlChar* str);",
          "201: xmlNodePtr sdl_guess_convert_xml(encodeTypePtr enc, zval* data, int style, xmlNodePtr parent TSRMLS_DC);",
          "204: void encode_finish();",
          "205: void encode_reset_ns();",
          "",
          "[Removed Lines]",
          "186:  zval *(*to_zval)(encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "192: zval *master_to_zval(encodePtr encode, xmlNodePtr data TSRMLS_DC);",
          "196: zval *to_zval_user(encodeTypePtr type, xmlNodePtr node TSRMLS_DC);",
          "202: zval *sdl_guess_convert_zval(encodeTypePtr enc, xmlNodePtr data TSRMLS_DC);",
          "",
          "[Added Lines]",
          "186:  zval *(*to_zval)(zval *ret, encodeTypePtr type, xmlNodePtr data TSRMLS_DC);",
          "192: zval *master_to_zval(zval *ret, encodePtr encode, xmlNodePtr data TSRMLS_DC);",
          "196: zval *to_zval_user(zval *ret, encodeTypePtr type, xmlNodePtr node TSRMLS_DC);",
          "202: zval *sdl_guess_convert_zval(zval *ret, encodeTypePtr enc, xmlNodePtr data TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208: encodePtr get_conversion(int encode);",
          "213: extern encode defaultEncoding[];",
          "214: extern int numDefaultEncodings;",
          "",
          "[Removed Lines]",
          "210: void delete_encoder(void *handle);",
          "211: void delete_encoder_persistent(void *handle);",
          "",
          "[Added Lines]",
          "210: void delete_encoder(zval *zv);",
          "211: void delete_encoder_persistent(zval *zv);",
          "",
          "---------------"
        ],
        "ext/soap/php_http.c||ext/soap/php_http.c": [
          "File: ext/soap/php_http.c -> ext/soap/php_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: int proxy_authentication(zval* this_ptr, smart_str* soap_headers TSRMLS_DC)",
          "36: {",
          "42:   smart_str auth = {0};",
          "45:   smart_str_appendc(&auth, ':');",
          "48:   }",
          "49:   smart_str_0(&auth);",
          "51:   smart_str_append_const(soap_headers, \"Proxy-Authorization: Basic \");",
          "53:   smart_str_append_const(soap_headers, \"\\r\\n\");",
          "55:   smart_str_free(&auth);",
          "56:   return 1;",
          "57:  }",
          "",
          "[Removed Lines]",
          "37:  zval **login, **password;",
          "39:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_login\", sizeof(\"_proxy_login\"), (void **)&login) == SUCCESS) {",
          "40:   unsigned char* buf;",
          "41:   int len;",
          "44:   smart_str_appendl(&auth, Z_STRVAL_PP(login), Z_STRLEN_PP(login));",
          "46:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_password\", sizeof(\"_proxy_password\"), (void **)&password) == SUCCESS) {",
          "47:    smart_str_appendl(&auth, Z_STRVAL_PP(password), Z_STRLEN_PP(password));",
          "50:   buf = php_base64_encode((unsigned char*)auth.c, auth.len, &len);",
          "52:   smart_str_appendl(soap_headers, (char*)buf, len);",
          "54:   efree(buf);",
          "",
          "[Added Lines]",
          "37:  zval *login, *password;",
          "39:  if ((login = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_proxy_login\", sizeof(\"_proxy_login\")-1)) != NULL) {",
          "40:   zend_string *buf;",
          "43:   smart_str_appendl(&auth, Z_STRVAL_P(login), Z_STRLEN_P(login));",
          "45:   if ((password = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_proxy_password\", sizeof(\"_proxy_password\")-1)) != NULL) {",
          "46:    smart_str_appendl(&auth, Z_STRVAL_P(password), Z_STRLEN_P(password));",
          "49:   buf = php_base64_encode((unsigned char*)auth.s->val, auth.s->len);",
          "51:   smart_str_appendl(soap_headers, (char*)buf->val, buf->len);",
          "53:   STR_RELEASE(buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: int basic_authentication(zval* this_ptr, smart_str* soap_headers TSRMLS_DC)",
          "63: {",
          "70:   smart_str auth = {0};",
          "73:   smart_str_appendc(&auth, ':');",
          "76:   }",
          "77:   smart_str_0(&auth);",
          "79:   smart_str_append_const(soap_headers, \"Authorization: Basic \");",
          "81:   smart_str_append_const(soap_headers, \"\\r\\n\");",
          "83:   smart_str_free(&auth);",
          "84:   return 1;",
          "85:  }",
          "",
          "[Removed Lines]",
          "64:  zval **login, **password;",
          "66:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_login\", sizeof(\"_login\"), (void **)&login) == SUCCESS &&",
          "67:    !zend_hash_exists(Z_OBJPROP_P(this_ptr), \"_digest\", sizeof(\"_digest\"))) {",
          "68:   unsigned char* buf;",
          "69:   int len;",
          "72:   smart_str_appendl(&auth, Z_STRVAL_PP(login), Z_STRLEN_PP(login));",
          "74:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\"), (void **)&password) == SUCCESS) {",
          "75:    smart_str_appendl(&auth, Z_STRVAL_PP(password), Z_STRLEN_PP(password));",
          "78:   buf = php_base64_encode((unsigned char*)auth.c, auth.len, &len);",
          "80:   smart_str_appendl(soap_headers, (char*)buf, len);",
          "82:   efree(buf);",
          "",
          "[Added Lines]",
          "63:  zval *login, *password;",
          "65:  if ((login = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_login\", sizeof(\"_login\")-1)) != NULL &&",
          "66:    !zend_hash_str_exists(Z_OBJPROP_P(this_ptr), \"_digest\", sizeof(\"_digest\")-1)) {",
          "67:   zend_string* buf;",
          "70:   smart_str_appendl(&auth, Z_STRVAL_P(login), Z_STRLEN_P(login));",
          "72:   if ((password = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\")-1)) != NULL) {",
          "73:    smart_str_appendl(&auth, Z_STRVAL_P(password), Z_STRLEN_P(password));",
          "76:   buf = php_base64_encode((unsigned char*)auth.s->val, auth.s->len);",
          "78:   smart_str_appendl(soap_headers, (char*)buf->val, buf->len);",
          "80:   STR_RELEASE(buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:                           zend_bool has_cookies,",
          "94:                           smart_str* soap_headers TSRMLS_DC)",
          "95: {",
          "98:  if (context &&",
          "102:   char *p;",
          "103:   int name_len;",
          "",
          "[Removed Lines]",
          "96:  zval **tmp;",
          "99:   php_stream_context_get_option(context, \"http\", \"header\", &tmp) == SUCCESS &&",
          "100:   Z_TYPE_PP(tmp) == IS_STRING && Z_STRLEN_PP(tmp)) {",
          "101:   char *s = Z_STRVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "94:  zval *tmp;",
          "97:   (tmp = php_stream_context_get_option(context, \"http\", \"header\")) != NULL &&",
          "98:   Z_TYPE_P(tmp) == IS_STRING && Z_STRLEN_P(tmp)) {",
          "99:   char *s = Z_STRVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159: static php_stream* http_connect(zval* this_ptr, php_url *phpurl, int use_ssl, php_stream_context *context, int *use_proxy TSRMLS_DC)",
          "160: {",
          "161:  php_stream *stream;",
          "163:  char *host;",
          "164:  char *name;",
          "165:  char *protocol;",
          "",
          "[Removed Lines]",
          "162:  zval **proxy_host, **proxy_port, **tmp;",
          "",
          "[Added Lines]",
          "160:  zval *proxy_host, *proxy_port, *tmp;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:  struct timeval tv;",
          "170:  struct timeval *timeout = NULL;",
          "179:  } else {",
          "180:   host = phpurl->host;",
          "181:   port = phpurl->port;",
          "182:  }",
          "186:    tv.tv_usec = 0;",
          "187:   timeout = &tv;",
          "188:  }",
          "",
          "[Removed Lines]",
          "172:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_host\", sizeof(\"_proxy_host\"), (void **) &proxy_host) == SUCCESS &&",
          "173:      Z_TYPE_PP(proxy_host) == IS_STRING &&",
          "174:      zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_port\", sizeof(\"_proxy_port\"), (void **) &proxy_port) == SUCCESS &&",
          "175:      Z_TYPE_PP(proxy_port) == IS_LONG) {",
          "176:   host = Z_STRVAL_PP(proxy_host);",
          "177:   port = Z_LVAL_PP(proxy_port);",
          "183:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_connection_timeout\", sizeof(\"_connection_timeout\"), (void **) &tmp) == SUCCESS &&",
          "184:      Z_TYPE_PP(tmp) == IS_LONG && Z_LVAL_PP(tmp) > 0) {",
          "185:    tv.tv_sec = Z_LVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "170:  if ((proxy_host = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_proxy_host\", sizeof(\"_proxy_host\")-1)) != NULL &&",
          "171:      Z_TYPE_P(proxy_host) == IS_STRING &&",
          "172:      (proxy_port = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_proxy_port\", sizeof(\"_proxy_port\")-1)) != NULL &&",
          "173:      Z_TYPE_P(proxy_port) == IS_LONG) {",
          "174:   host = Z_STRVAL_P(proxy_host);",
          "175:   port = Z_LVAL_P(proxy_port);",
          "181:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_connection_timeout\", sizeof(\"_connection_timeout\")-1)) != NULL &&",
          "182:      Z_TYPE_P(tmp) == IS_LONG && Z_LVAL_P(tmp) > 0) {",
          "183:    tv.tv_sec = Z_LVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194:  if (use_ssl && !*use_proxy) {",
          "199:     case SOAP_SSL_METHOD_TLS:",
          "200:      protocol = \"tls\";",
          "201:      break;",
          "",
          "[Removed Lines]",
          "195:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_ssl_method\", sizeof(\"_ssl_method\"), (void **) &tmp) == SUCCESS &&",
          "196:    Z_TYPE_PP(tmp) == IS_LONG) {",
          "198:    switch (Z_LVAL_PP(tmp)) {",
          "",
          "[Added Lines]",
          "193:   if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_ssl_method\", sizeof(\"_ssl_method\")-1)) != NULL &&",
          "194:    Z_TYPE_P(tmp) == IS_LONG) {",
          "196:    switch (Z_LVAL_P(tmp)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "255:   smart_str_append_const(&soap_headers, \"\\r\\n\");",
          "256:   proxy_authentication(this_ptr, &soap_headers TSRMLS_CC);",
          "257:   smart_str_append_const(&soap_headers, \"\\r\\n\");",
          "259:    php_stream_close(stream);",
          "260:    stream = NULL;",
          "261:   }",
          "",
          "[Removed Lines]",
          "258:   if (php_stream_write(stream, soap_headers.c, soap_headers.len) != soap_headers.len) {",
          "",
          "[Added Lines]",
          "256:   if (php_stream_write(stream, soap_headers.s->val, soap_headers.s->len) != soap_headers.s->len) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "277:    int crypto_method = STREAM_CRYPTO_METHOD_SSLv23_CLIENT;",
          "281:      case SOAP_SSL_METHOD_TLS:",
          "282:       crypto_method = STREAM_CRYPTO_METHOD_TLS_CLIENT;",
          "283:       break;",
          "",
          "[Removed Lines]",
          "278:    if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_ssl_method\", sizeof(\"_ssl_method\"), (void **) &tmp) == SUCCESS &&",
          "279:     Z_TYPE_PP(tmp) == IS_LONG) {",
          "280:     switch (Z_LVAL_PP(tmp)) {",
          "",
          "[Added Lines]",
          "276:    if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_ssl_method\", sizeof(\"_ssl_method\")-1)) != NULL &&",
          "277:     Z_TYPE_P(tmp) == IS_LONG) {",
          "278:     switch (Z_LVAL_P(tmp)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "332:                            char  *location,",
          "333:                            char  *soapaction,",
          "334:                            int    soap_version,",
          "337: {",
          "338:  char *request;",
          "339:  smart_str soap_headers = {0};",
          "",
          "[Removed Lines]",
          "335:                            char **buffer,",
          "336:                            int   *buffer_len TSRMLS_DC)",
          "",
          "[Added Lines]",
          "333:                            zval  *return_value TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "341:  int request_size, err;",
          "342:  php_url *phpurl = NULL;",
          "343:  php_stream *stream;",
          "345:  int use_proxy = 0;",
          "346:  int use_ssl;",
          "347:  char *http_headers, *http_body, *content_type, *http_version, *cookie_itt;",
          "",
          "[Removed Lines]",
          "344:  zval **trace, **tmp;",
          "",
          "[Added Lines]",
          "341:  zval *trace, *tmp;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "366:   request = buf;",
          "367:   request_size = buf_size;",
          "373:   if (level > 9) {level = 9;}",
          "376:    smart_str_append_const(&soap_headers_z,\"Accept-Encoding: gzip, deflate\\r\\n\");",
          "377:    }",
          "378:    if (level > 0) {",
          "379:    zval func;",
          "380:    zval retval;",
          "383:    int n;",
          "393:      if (kind == SOAP_COMPRESSION_DEFLATE) {",
          "394:       n = 2;",
          "396:     smart_str_append_const(&soap_headers_z,\"Content-Encoding: deflate\\r\\n\");",
          "397:      } else {",
          "398:        n = 3;",
          "400:     smart_str_append_const(&soap_headers_z,\"Content-Encoding: gzip\\r\\n\");",
          "402:      }",
          "404:        Z_TYPE(retval) == IS_STRING) {",
          "405:     request = Z_STRVAL(retval);",
          "406:     request_size = Z_STRLEN(retval);",
          "",
          "[Removed Lines]",
          "369:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"compression\", sizeof(\"compression\"), (void **)&tmp) == SUCCESS && Z_TYPE_PP(tmp) == IS_LONG) {",
          "370:   int level = Z_LVAL_PP(tmp) & 0x0f;",
          "371:   int kind  = Z_LVAL_PP(tmp) & SOAP_COMPRESSION_DEFLATE;",
          "375:    if ((Z_LVAL_PP(tmp) & SOAP_COMPRESSION_ACCEPT) != 0) {",
          "381:     zval param1, param2, param3;",
          "382:    zval *params[3];",
          "385:    params[0] = &param1;",
          "386:    INIT_PZVAL(params[0]);",
          "387:    params[1] = &param2;",
          "388:    INIT_PZVAL(params[1]);",
          "389:    params[2] = &param3;",
          "390:    INIT_PZVAL(params[2]);",
          "391:    ZVAL_STRINGL(params[0], buf, buf_size, 0);",
          "392:    ZVAL_LONG(params[1], level);",
          "395:     ZVAL_STRING(&func, \"gzcompress\", 0);",
          "399:     ZVAL_STRING(&func, \"gzencode\", 0);",
          "401:     ZVAL_LONG(params[2], 0x1f);",
          "403:    if (call_user_function(CG(function_table), (zval**)NULL, &func, &retval, n, params TSRMLS_CC) == SUCCESS &&",
          "",
          "[Added Lines]",
          "366:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"compression\", sizeof(\"compression\")-1)) != NULL && Z_TYPE_P(tmp) == IS_LONG) {",
          "367:   int level = Z_LVAL_P(tmp) & 0x0f;",
          "368:   int kind  = Z_LVAL_P(tmp) & SOAP_COMPRESSION_DEFLATE;",
          "372:    if ((Z_LVAL_P(tmp) & SOAP_COMPRESSION_ACCEPT) != 0) {",
          "378:    zval params[3];",
          "382:    ZVAL_STRINGL(&params[0], buf, buf_size);",
          "383:    ZVAL_LONG(&params[1], level);",
          "387:     ZVAL_STRING(&func, \"gzcompress\");",
          "392:     ZVAL_STRING(&func, \"gzencode\");",
          "394:     ZVAL_LONG(&params[2], 0x1f);",
          "396:    if (call_user_function(CG(function_table), (zval*)NULL, &func, &retval, n, params TSRMLS_CC) == SUCCESS &&",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "412:    }",
          "413:  }",
          "416:   php_stream_from_zval_no_verify(stream,tmp);",
          "419:   }",
          "420:  } else {",
          "421:   stream = NULL;",
          "",
          "[Removed Lines]",
          "415:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\"), (void **)&tmp) == SUCCESS) {",
          "417:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\"), (void **)&tmp) == SUCCESS && Z_TYPE_PP(tmp) == IS_LONG) {",
          "418:    use_proxy = Z_LVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "408:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\")-1)) != NULL) {",
          "410:   if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\")-1)) != NULL && Z_TYPE_P(tmp) == IS_LONG) {",
          "411:    use_proxy = Z_LVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "425:   phpurl = php_url_parse(location);",
          "426:  }",
          "431:  }",
          "433:  if (context &&",
          "438:   }",
          "439:  }",
          "",
          "[Removed Lines]",
          "428:  if (SUCCESS == zend_hash_find(Z_OBJPROP_P(this_ptr),",
          "429:    \"_stream_context\", sizeof(\"_stream_context\"), (void**)&tmp)) {",
          "430:   context = php_stream_context_from_zval(*tmp, 0);",
          "434:   php_stream_context_get_option(context, \"http\", \"max_redirects\", &tmp) == SUCCESS) {",
          "435:   if (Z_TYPE_PP(tmp) != IS_STRING || !is_numeric_string(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), &redirect_max, NULL, 1)) {",
          "436:    if (Z_TYPE_PP(tmp) == IS_LONG)",
          "437:     redirect_max = Z_LVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "421:  if (NULL != (tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr),",
          "422:    \"_stream_context\", sizeof(\"_stream_context\")-1))) {",
          "423:   context = php_stream_context_from_zval(tmp, 0);",
          "427:   (tmp = php_stream_context_get_option(context, \"http\", \"max_redirects\")) != NULL) {",
          "428:   if (Z_TYPE_P(tmp) != IS_STRING || !is_numeric_string(Z_STRVAL_P(tmp), Z_STRLEN_P(tmp), &redirect_max, NULL, 1)) {",
          "429:    if (Z_TYPE_P(tmp) == IS_LONG)",
          "430:     redirect_max = Z_LVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "477:  if (stream != NULL) {",
          "478:    php_url *orig;",
          "480:       (orig = (php_url *) zend_fetch_resource(tmp TSRMLS_CC, -1, \"httpurl\", NULL, 1, le_url)) != NULL &&",
          "481:       ((use_proxy && !use_ssl) ||",
          "482:        (((use_ssl && orig->scheme != NULL && strcmp(orig->scheme, \"https\") == 0) ||",
          "",
          "[Removed Lines]",
          "479:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"httpurl\", sizeof(\"httpurl\"), (void **)&tmp) == SUCCESS &&",
          "",
          "[Added Lines]",
          "472:   if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"httpurl\", sizeof(\"httpurl\")-1)) != NULL &&",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "486:        orig->port == phpurl->port))) {",
          "487:     } else {",
          "488:    php_stream_close(stream);",
          "492:    stream = NULL;",
          "493:    use_proxy = 0;",
          "494:     }",
          "",
          "[Removed Lines]",
          "489:    zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpurl\", sizeof(\"httpurl\"));",
          "490:    zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\"));",
          "491:    zend_hash_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\"));",
          "",
          "[Added Lines]",
          "482:    zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpurl\", sizeof(\"httpurl\")-1);",
          "483:    zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\")-1);",
          "484:    zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\")-1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "498:  if (stream != NULL && php_stream_eof(stream)) {",
          "499:   php_stream_close(stream);",
          "503:   stream = NULL;",
          "504:   use_proxy = 0;",
          "505:  }",
          "",
          "[Removed Lines]",
          "500:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpurl\", sizeof(\"httpurl\"));",
          "501:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\"));",
          "502:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\"));",
          "",
          "[Added Lines]",
          "493:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpurl\", sizeof(\"httpurl\")-1);",
          "494:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\")-1);",
          "495:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\")-1);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "508:   stream = http_connect(this_ptr, phpurl, use_ssl, context, &use_proxy TSRMLS_CC);",
          "509:   if (stream) {",
          "510:    php_stream_auto_cleanup(stream);",
          "512:    add_property_long(this_ptr, \"_use_proxy\", use_proxy);",
          "513:   } else {",
          "514:    php_url_free(phpurl);",
          "",
          "[Removed Lines]",
          "511:    add_property_resource(this_ptr, \"httpsocket\", php_stream_get_resource_id(stream));",
          "",
          "[Added Lines]",
          "504:    add_property_resource(this_ptr, \"httpsocket\", stream->res);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "522:  PG(allow_url_fopen) = old_allow_url_fopen;",
          "524:  if (stream) {",
          "528:   add_property_resource(this_ptr, \"httpurl\", ret);",
          "531:   if (context &&",
          "535:    http_1_1 = 0;",
          "536:   } else {",
          "537:    http_1_1 = 1;",
          "",
          "[Removed Lines]",
          "525:   zval **cookies, **login, **password;",
          "526:    int ret = zend_list_insert(phpurl, le_url TSRMLS_CC);",
          "532:       php_stream_context_get_option(context, \"http\", \"protocol_version\", &tmp) == SUCCESS &&",
          "533:       Z_TYPE_PP(tmp) == IS_DOUBLE &&",
          "534:       Z_DVAL_PP(tmp) == 1.0) {",
          "",
          "[Added Lines]",
          "518:   zval *cookies, *login, *password;",
          "519:   zend_resource *ret = zend_register_resource(NULL, phpurl, le_url TSRMLS_CC);",
          "525:       (tmp = php_stream_context_get_option(context, \"http\", \"protocol_version\")) != NULL &&",
          "526:       Z_TYPE_P(tmp) == IS_DOUBLE &&",
          "527:       Z_DVAL_P(tmp) == 1.0) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "570:    smart_str_append_unsigned(&soap_headers, phpurl->port);",
          "571:   }",
          "572:   if (!http_1_1 ||",
          "575:    smart_str_append_const(&soap_headers, \"\\r\\n\"",
          "576:     \"Connection: close\\r\\n\");",
          "577:   } else {",
          "578:    smart_str_append_const(&soap_headers, \"\\r\\n\"",
          "579:     \"Connection: Keep-Alive\\r\\n\");",
          "580:   }",
          "584:     smart_str_append_const(&soap_headers, \"User-Agent: \");",
          "586:     smart_str_append_const(&soap_headers, \"\\r\\n\");",
          "587:    }",
          "588:   } else if (context &&",
          "592:     smart_str_append_const(&soap_headers, \"User-Agent: \");",
          "594:     smart_str_append_const(&soap_headers, \"\\r\\n\");",
          "595:    }",
          "596:   } else if (FG(user_agent)) {",
          "",
          "[Removed Lines]",
          "573:    (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_keep_alive\", sizeof(\"_keep_alive\"), (void **)&tmp) == SUCCESS &&",
          "574:     Z_LVAL_PP(tmp) == 0)) {",
          "581:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_user_agent\", sizeof(\"_user_agent\"), (void **)&tmp) == SUCCESS &&",
          "582:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "583:    if (Z_STRLEN_PP(tmp) > 0) {",
          "585:     smart_str_appendl(&soap_headers, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "589:              php_stream_context_get_option(context, \"http\", \"user_agent\", &tmp) == SUCCESS &&",
          "590:              Z_TYPE_PP(tmp) == IS_STRING) {",
          "591:    if (Z_STRLEN_PP(tmp) > 0) {",
          "593:     smart_str_appendl(&soap_headers, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "",
          "[Added Lines]",
          "566:    ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_keep_alive\", sizeof(\"_keep_alive\")-1)) != NULL &&",
          "567:     Z_LVAL_P(tmp) == 0)) {",
          "574:   if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_user_agent\", sizeof(\"_user_agent\")-1)) != NULL &&",
          "575:       Z_TYPE_P(tmp) == IS_STRING) {",
          "576:    if (Z_STRLEN_P(tmp) > 0) {",
          "578:     smart_str_appendl(&soap_headers, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "582:              (tmp = php_stream_context_get_option(context, \"http\", \"user_agent\")) != NULL &&",
          "583:              Z_TYPE_P(tmp) == IS_STRING) {",
          "584:    if (Z_STRLEN_P(tmp) > 0) {",
          "586:     smart_str_appendl(&soap_headers, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "624:   smart_str_append_const(&soap_headers, \"\\r\\n\");",
          "631:    has_authorization = 1;",
          "634:      char          HA1[33], HA2[33], response[33], cnonce[33], nc[9];",
          "635:      PHP_MD5_CTX   md5ctx;",
          "636:      unsigned char hash[16];",
          "",
          "[Removed Lines]",
          "627:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_login\", sizeof(\"_login\"), (void **)&login) == SUCCESS &&",
          "628:       Z_TYPE_PP(login) == IS_STRING) {",
          "629:    zval **digest;",
          "632:    if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_digest\", sizeof(\"_digest\"), (void **)&digest) == SUCCESS) {",
          "633:     if (Z_TYPE_PP(digest) == IS_ARRAY) {",
          "",
          "[Added Lines]",
          "620:   if ((login = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_login\", sizeof(\"_login\")-1)) != NULL &&",
          "621:       Z_TYPE_P(login) == IS_STRING) {",
          "622:    zval *digest;",
          "625:    if ((digest = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_digest\", sizeof(\"_digest\")-1)) != NULL) {",
          "626:     if (Z_TYPE_P(digest) == IS_ARRAY) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "641:      PHP_MD5Final(hash, &md5ctx);",
          "642:      make_digest(cnonce, hash);",
          "648:      } else {",
          "650:       strcpy(nc, \"00000001\");",
          "651:      }",
          "653:      PHP_MD5Init(&md5ctx);",
          "655:      PHP_MD5Update(&md5ctx, (unsigned char*)\":\", 1);",
          "659:      }",
          "660:      PHP_MD5Update(&md5ctx, (unsigned char*)\":\", 1);",
          "664:      }",
          "665:      PHP_MD5Final(hash, &md5ctx);",
          "666:      make_digest(HA1, hash);",
          "671:       PHP_MD5Init(&md5ctx);",
          "672:       PHP_MD5Update(&md5ctx, (unsigned char*)HA1, 32);",
          "673:       PHP_MD5Update(&md5ctx, (unsigned char*)\":\", 1);",
          "677:       }",
          "678:       PHP_MD5Update(&md5ctx, (unsigned char*)\":\", 1);",
          "679:       PHP_MD5Update(&md5ctx, (unsigned char*)cnonce, 8);",
          "",
          "[Removed Lines]",
          "644:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"nc\", sizeof(\"nc\"), (void **)&tmp) == SUCCESS &&",
          "645:          Z_TYPE_PP(tmp) == IS_LONG) {",
          "646:       Z_LVAL_PP(tmp)++;",
          "647:       snprintf(nc, sizeof(nc), \"%08ld\", Z_LVAL_PP(tmp));",
          "649:       add_assoc_long(*digest, \"nc\", 1);",
          "654:      PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_PP(login), Z_STRLEN_PP(login));",
          "656:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"realm\", sizeof(\"realm\"), (void **)&tmp) == SUCCESS &&",
          "657:          Z_TYPE_PP(tmp) == IS_STRING) {",
          "658:       PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "661:      if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\"), (void **)&password) == SUCCESS &&",
          "662:          Z_TYPE_PP(password) == IS_STRING) {",
          "663:       PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_PP(password), Z_STRLEN_PP(password));",
          "667:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"algorithm\", sizeof(\"algorithm\"), (void **)&tmp) == SUCCESS &&",
          "668:          Z_TYPE_PP(tmp) == IS_STRING &&",
          "669:          Z_STRLEN_PP(tmp) == sizeof(\"md5-sess\")-1 &&",
          "670:          stricmp(Z_STRVAL_PP(tmp), \"md5-sess\") == 0) {",
          "674:       if (zend_hash_find(Z_ARRVAL_PP(digest), \"nonce\", sizeof(\"nonce\"), (void **)&tmp) == SUCCESS &&",
          "675:           Z_TYPE_PP(tmp) == IS_STRING) {",
          "676:        PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "",
          "[Added Lines]",
          "637:      if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"nc\", sizeof(\"nc\")-1)) != NULL &&",
          "638:          Z_TYPE_P(tmp) == IS_LONG) {",
          "639:       Z_LVAL_P(tmp)++;",
          "640:       snprintf(nc, sizeof(nc), \"%08ld\", Z_LVAL_P(tmp));",
          "642:       add_assoc_long(digest, \"nc\", 1);",
          "647:      PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_P(login), Z_STRLEN_P(login));",
          "649:      if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"realm\", sizeof(\"realm\")-1)) != NULL &&",
          "650:          Z_TYPE_P(tmp) == IS_STRING) {",
          "651:       PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "654:      if ((password = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\")-1)) != NULL &&",
          "655:          Z_TYPE_P(password) == IS_STRING) {",
          "656:       PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_P(password), Z_STRLEN_P(password));",
          "660:      if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"algorithm\", sizeof(\"algorithm\")-1)) != NULL &&",
          "661:          Z_TYPE_P(tmp) == IS_STRING &&",
          "662:          Z_STRLEN_P(tmp) == sizeof(\"md5-sess\")-1 &&",
          "663:          stricmp(Z_STRVAL_P(tmp), \"md5-sess\") == 0) {",
          "667:       if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"nonce\", sizeof(\"nonce\")-1)) != NULL &&",
          "668:           Z_TYPE_P(tmp) == IS_STRING) {",
          "669:        PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "709:      PHP_MD5Init(&md5ctx);",
          "710:      PHP_MD5Update(&md5ctx, (unsigned char*)HA1, 32);",
          "711:      PHP_MD5Update(&md5ctx, (unsigned char*)\":\", 1);",
          "715:      }",
          "716:      PHP_MD5Update(&md5ctx, (unsigned char*)\":\", 1);",
          "719:       PHP_MD5Update(&md5ctx, (unsigned char*)nc, 8);",
          "720:       PHP_MD5Update(&md5ctx, (unsigned char*)\":\", 1);",
          "721:       PHP_MD5Update(&md5ctx, (unsigned char*)cnonce, 8);",
          "",
          "[Removed Lines]",
          "712:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"nonce\", sizeof(\"nonce\"), (void **)&tmp) == SUCCESS &&",
          "713:          Z_TYPE_PP(tmp) == IS_STRING) {",
          "714:       PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "717:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"qop\", sizeof(\"qop\"), (void **)&tmp) == SUCCESS &&",
          "718:          Z_TYPE_PP(tmp) == IS_STRING) {",
          "",
          "[Added Lines]",
          "705:      if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"nonce\", sizeof(\"nonce\")-1)) != NULL &&",
          "706:          Z_TYPE_P(tmp) == IS_STRING) {",
          "707:       PHP_MD5Update(&md5ctx, (unsigned char*)Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "710:      if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"qop\", sizeof(\"qop\")-1)) != NULL &&",
          "711:          Z_TYPE_P(tmp) == IS_STRING) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "729:      make_digest(response, hash);",
          "731:      smart_str_append_const(&soap_headers, \"Authorization: Digest username=\\\"\");",
          "735:       smart_str_append_const(&soap_headers, \"\\\", realm=\\\"\");",
          "737:      }",
          "740:       smart_str_append_const(&soap_headers, \"\\\", nonce=\\\"\");",
          "742:      }",
          "743:      smart_str_append_const(&soap_headers, \"\\\", uri=\\\"\");",
          "744:      if (phpurl->path) {",
          "",
          "[Removed Lines]",
          "732:      smart_str_appendl(&soap_headers, Z_STRVAL_PP(login), Z_STRLEN_PP(login));",
          "733:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"realm\", sizeof(\"realm\"), (void **)&tmp) == SUCCESS &&",
          "734:          Z_TYPE_PP(tmp) == IS_STRING) {",
          "736:       smart_str_appendl(&soap_headers, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "738:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"nonce\", sizeof(\"nonce\"), (void **)&tmp) == SUCCESS &&",
          "739:          Z_TYPE_PP(tmp) == IS_STRING) {",
          "741:       smart_str_appendl(&soap_headers, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "",
          "[Added Lines]",
          "725:      smart_str_appendl(&soap_headers, Z_STRVAL_P(login), Z_STRLEN_P(login));",
          "726:      if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"realm\", sizeof(\"realm\")-1)) != NULL &&",
          "727:          Z_TYPE_P(tmp) == IS_STRING) {",
          "729:       smart_str_appendl(&soap_headers, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "731:     if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"nonce\", sizeof(\"nonce\")-1)) != NULL &&",
          "732:          Z_TYPE_P(tmp) == IS_STRING) {",
          "734:       smart_str_appendl(&soap_headers, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "754:       smart_str_appendc(&soap_headers, '#');",
          "755:       smart_str_appends(&soap_headers, phpurl->fragment);",
          "756:      }",
          "760:       smart_str_append_const(&soap_headers, \"\\\", qop=\\\"auth\");",
          "761:       smart_str_append_const(&soap_headers, \"\\\", nc=\\\"\");",
          "",
          "[Removed Lines]",
          "757:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"qop\", sizeof(\"qop\"), (void **)&tmp) == SUCCESS &&",
          "758:          Z_TYPE_PP(tmp) == IS_STRING) {",
          "",
          "[Added Lines]",
          "750:      if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"qop\", sizeof(\"qop\")-1)) != NULL &&",
          "751:          Z_TYPE_P(tmp) == IS_STRING) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "765:      }",
          "766:      smart_str_append_const(&soap_headers, \"\\\", response=\\\"\");",
          "767:      smart_str_appendl(&soap_headers, response, 32);",
          "770:       smart_str_append_const(&soap_headers, \"\\\", opaque=\\\"\");",
          "772:      }",
          "775:       smart_str_append_const(&soap_headers, \"\\\", algorithm=\\\"\");",
          "777:      }",
          "778:      smart_str_append_const(&soap_headers, \"\\\"\\r\\n\");",
          "779:     }",
          "780:    } else {",
          "784:     smart_str auth = {0};",
          "786:     smart_str_appendc(&auth, ':');",
          "790:     }",
          "791:     smart_str_0(&auth);",
          "793:     smart_str_append_const(&soap_headers, \"Authorization: Basic \");",
          "795:     smart_str_append_const(&soap_headers, \"\\r\\n\");",
          "797:     smart_str_free(&auth);",
          "798:    }",
          "799:   }",
          "",
          "[Removed Lines]",
          "768:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"opaque\", sizeof(\"opaque\"), (void **)&tmp) == SUCCESS &&",
          "769:          Z_TYPE_PP(tmp) == IS_STRING) {",
          "771:       smart_str_appendl(&soap_headers, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "773:      if (zend_hash_find(Z_ARRVAL_PP(digest), \"algorithm\", sizeof(\"algorithm\"), (void **)&tmp) == SUCCESS &&",
          "774:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "776:       smart_str_appendl(&soap_headers, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "781:     unsigned char* buf;",
          "782:     int len;",
          "785:     smart_str_appendl(&auth, Z_STRVAL_PP(login), Z_STRLEN_PP(login));",
          "787:     if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\"), (void **)&password) == SUCCESS &&",
          "788:         Z_TYPE_PP(password) == IS_STRING) {",
          "789:      smart_str_appendl(&auth, Z_STRVAL_PP(password), Z_STRLEN_PP(password));",
          "792:     buf = php_base64_encode((unsigned char*)auth.c, auth.len, &len);",
          "794:     smart_str_appendl(&soap_headers, (char*)buf, len);",
          "796:     efree(buf);",
          "",
          "[Added Lines]",
          "761:      if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"opaque\", sizeof(\"opaque\")-1)) != NULL &&",
          "762:          Z_TYPE_P(tmp) == IS_STRING) {",
          "764:       smart_str_appendl(&soap_headers, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "766:      if ((tmp = zend_hash_str_find(Z_ARRVAL_P(digest), \"algorithm\", sizeof(\"algorithm\")-1)) != NULL &&",
          "767:       Z_TYPE_P(tmp) == IS_STRING) {",
          "769:       smart_str_appendl(&soap_headers, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "774:     zend_string *buf;",
          "777:     smart_str_appendl(&auth, Z_STRVAL_P(login), Z_STRLEN_P(login));",
          "779:     if ((password = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\")-1)) != NULL &&",
          "780:         Z_TYPE_P(password) == IS_STRING) {",
          "781:      smart_str_appendl(&auth, Z_STRVAL_P(password), Z_STRLEN_P(password));",
          "784:     buf = php_base64_encode((unsigned char*)auth.s->val, auth.s->len);",
          "786:     smart_str_appendl(&soap_headers, (char*)buf->val, buf->len);",
          "788:     STR_RELEASE(buf);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "804:   }",
          "811:    int i, n;",
          "813:    has_cookies = 1;",
          "815:    if (n > 0) {",
          "817:     smart_str_append_const(&soap_headers, \"Cookie: \");",
          "818:     for (i = 0; i < n; i++) {",
          "834:         smart_str_appendc(&soap_headers, '=');",
          "836:         smart_str_appendc(&soap_headers, ';');",
          "837:        }",
          "838:       }",
          "839:      }",
          "841:     }",
          "842:     smart_str_append_const(&soap_headers, \"\\r\\n\");",
          "843:    }",
          "",
          "[Removed Lines]",
          "807:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == SUCCESS) {",
          "808:    zval **data;",
          "809:    char *key;",
          "810:    uint key_len;",
          "814:    n = zend_hash_num_elements(Z_ARRVAL_PP(cookies));",
          "816:     zend_hash_internal_pointer_reset(Z_ARRVAL_PP(cookies));",
          "819:      zend_hash_get_current_data(Z_ARRVAL_PP(cookies), (void **)&data);",
          "820:      zend_hash_get_current_key_ex(Z_ARRVAL_PP(cookies), &key, &key_len, NULL, 0, NULL);",
          "822:      if (Z_TYPE_PP(data) == IS_ARRAY) {",
          "823:        zval** value;",
          "825:       if (zend_hash_index_find(Z_ARRVAL_PP(data), 0, (void**)&value) == SUCCESS &&",
          "826:           Z_TYPE_PP(value) == IS_STRING) {",
          "827:         zval **tmp;",
          "828:         if ((zend_hash_index_find(Z_ARRVAL_PP(data), 1, (void**)&tmp) == FAILURE ||",
          "829:              strncmp(phpurl->path?phpurl->path:\"/\",Z_STRVAL_PP(tmp),Z_STRLEN_PP(tmp)) == 0) &&",
          "830:             (zend_hash_index_find(Z_ARRVAL_PP(data), 2, (void**)&tmp) == FAILURE ||",
          "831:              in_domain(phpurl->host,Z_STRVAL_PP(tmp))) &&",
          "832:             (use_ssl || zend_hash_index_find(Z_ARRVAL_PP(data), 3, (void**)&tmp) == FAILURE)) {",
          "833:         smart_str_appendl(&soap_headers, key, key_len);",
          "835:         smart_str_appendl(&soap_headers, Z_STRVAL_PP(value), Z_STRLEN_PP(value));",
          "840:      zend_hash_move_forward(Z_ARRVAL_PP(cookies));",
          "",
          "[Added Lines]",
          "799:   if ((cookies = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\")-1)) != NULL) {",
          "800:    zval *data;",
          "801:    zend_string *key;",
          "805:    n = zend_hash_num_elements(Z_ARRVAL_P(cookies));",
          "807:     zend_hash_internal_pointer_reset(Z_ARRVAL_P(cookies));",
          "810:      data = zend_hash_get_current_data(Z_ARRVAL_P(cookies));",
          "811:      zend_hash_get_current_key_ex(Z_ARRVAL_P(cookies), &key, NULL, 0, NULL);",
          "813:      if (Z_TYPE_P(data) == IS_ARRAY) {",
          "814:        zval *value;",
          "816:       if ((value = zend_hash_index_find(Z_ARRVAL_P(data), 0)) != NULL &&",
          "817:           Z_TYPE_P(value) == IS_STRING) {",
          "818:         zval *tmp;",
          "819:         if (((tmp = zend_hash_index_find(Z_ARRVAL_P(data), 1)) == NULL ||",
          "820:              strncmp(phpurl->path?phpurl->path:\"/\",Z_STRVAL_P(tmp),Z_STRLEN_P(tmp)) == 0) &&",
          "821:             ((tmp = zend_hash_index_find(Z_ARRVAL_P(data), 2)) == NULL ||",
          "822:              in_domain(phpurl->host,Z_STRVAL_P(tmp))) &&",
          "823:             (use_ssl || (tmp = zend_hash_index_find(Z_ARRVAL_P(data), 3)) == NULL)) {",
          "824:         smart_str_appendl(&soap_headers, key->val, key->len);",
          "826:         smart_str_appendl(&soap_headers, Z_STRVAL_P(value), Z_STRLEN_P(value));",
          "831:      zend_hash_move_forward(Z_ARRVAL_P(cookies));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "848:   smart_str_append_const(&soap_headers, \"\\r\\n\");",
          "849:   smart_str_0(&soap_headers);",
          "853:   }",
          "854:   smart_str_appendl(&soap_headers, request, request_size);",
          "855:   smart_str_0(&soap_headers);",
          "859:    if (request != buf) {efree(request);}",
          "860:    php_stream_close(stream);",
          "864:    add_soap_fault(this_ptr, \"HTTP\", \"Failed Sending HTTP SOAP request\", NULL, NULL TSRMLS_CC);",
          "865:    smart_str_free(&soap_headers_z);",
          "866:    return FALSE;",
          "",
          "[Removed Lines]",
          "850:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
          "851:       Z_LVAL_PP(trace) > 0) {",
          "852:    add_property_stringl(this_ptr, \"__last_request_headers\", soap_headers.c, soap_headers.len);",
          "857:   err = php_stream_write(stream, soap_headers.c, soap_headers.len);",
          "858:   if (err != soap_headers.len) {",
          "861:    zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpurl\", sizeof(\"httpurl\"));",
          "862:    zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\"));",
          "863:    zend_hash_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\"));",
          "",
          "[Added Lines]",
          "841:   if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "842:       Z_LVAL_P(trace) > 0) {",
          "843:    add_property_stringl(this_ptr, \"__last_request_headers\", soap_headers.s->val, soap_headers.s->len);",
          "848:   err = php_stream_write(stream, soap_headers.s->val, soap_headers.s->len);",
          "849:   if (err != soap_headers.s->len) {",
          "852:    zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpurl\", sizeof(\"httpurl\")-1);",
          "853:    zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\")-1);",
          "854:    zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\")-1);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "872:   return FALSE;",
          "873:  }",
          "876:   php_stream_close(stream);",
          "879:   smart_str_free(&soap_headers_z);",
          "880:   return TRUE;",
          "881:  }",
          "",
          "[Removed Lines]",
          "875:  if (!buffer) {",
          "877:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\"));",
          "878:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\"));",
          "",
          "[Added Lines]",
          "866:  if (!return_value) {",
          "868:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\")-1);",
          "869:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\")-1);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "885:    if (http_headers) {efree(http_headers);}",
          "886:    if (request != buf) {efree(request);}",
          "887:    php_stream_close(stream);",
          "890:    add_soap_fault(this_ptr, \"HTTP\", \"Error Fetching http headers\", NULL, NULL TSRMLS_CC);",
          "891:    smart_str_free(&soap_headers_z);",
          "892:    return FALSE;",
          "893:   }",
          "897:    add_property_stringl(this_ptr, \"__last_response_headers\", http_headers, http_header_size);",
          "898:   }",
          "",
          "[Removed Lines]",
          "888:    zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\"));",
          "889:    zend_hash_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\"));",
          "895:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
          "896:       Z_LVAL_PP(trace) > 0) {",
          "",
          "[Added Lines]",
          "879:    zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\")-1);",
          "880:    zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\")-1);",
          "886:   if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "887:       Z_LVAL_P(trace) > 0) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "940:  while (cookie_itt) {",
          "941:   char *end_pos, *cookie;",
          "942:   char *eqpos, *sempos;",
          "950:   }",
          "952:   end_pos = strstr(cookie_itt,\"\\r\\n\");",
          "",
          "[Removed Lines]",
          "943:   zval **cookies;",
          "945:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == FAILURE) {",
          "946:    zval *tmp_cookies;",
          "947:    MAKE_STD_ZVAL(tmp_cookies);",
          "948:    array_init(tmp_cookies);",
          "949:    zend_hash_update(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), &tmp_cookies, sizeof(zval *), (void **)&cookies);",
          "",
          "[Added Lines]",
          "934:   zval *cookies;",
          "936:   if ((cookies = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\")-1)) == NULL) {",
          "937:    zval tmp_cookies;",
          "938:    array_init(&tmp_cookies);",
          "939:    cookies = zend_hash_str_update(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\")-1, &tmp_cookies);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "957:   if (eqpos != NULL && (sempos == NULL || sempos > eqpos)) {",
          "958:    smart_str name = {0};",
          "959:    int cookie_len;",
          "962:    if (sempos != NULL) {",
          "963:     cookie_len = sempos-(eqpos+1);",
          "",
          "[Removed Lines]",
          "960:    zval *zcookie;",
          "",
          "[Added Lines]",
          "950:    zval zcookie;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "968:    smart_str_appendl(&name, cookie, eqpos - cookie);",
          "969:    smart_str_0(&name);",
          "975:    if (sempos != NULL) {",
          "976:     char *options = cookie + cookie_len+1;",
          "",
          "[Removed Lines]",
          "971:    ALLOC_INIT_ZVAL(zcookie);",
          "972:    array_init(zcookie);",
          "973:    add_index_stringl(zcookie, 0, eqpos + 1, cookie_len);",
          "",
          "[Added Lines]",
          "961:    array_init(&zcookie);",
          "962:    add_index_stringl(&zcookie, 0, eqpos + 1, cookie_len);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "979:      sempos = strstr(options, \";\");",
          "980:      if (strstr(options,\"path=\") == options) {",
          "981:       eqpos = options + sizeof(\"path=\")-1;",
          "983:      } else if (strstr(options,\"domain=\") == options) {",
          "984:       eqpos = options + sizeof(\"domain=\")-1;",
          "986:      } else if (strstr(options,\"secure\") == options) {",
          "988:      }",
          "989:      if (sempos != NULL) {",
          "990:       options = sempos+1;",
          "",
          "[Removed Lines]",
          "982:       add_index_stringl(zcookie, 1, eqpos, sempos?(sempos-eqpos):strlen(eqpos));",
          "985:       add_index_stringl(zcookie, 2, eqpos, sempos?(sempos-eqpos):strlen(eqpos));",
          "987:       add_index_bool(zcookie, 3, 1);",
          "",
          "[Added Lines]",
          "971:       add_index_stringl(&zcookie, 1, eqpos, sempos?(sempos-eqpos):strlen(eqpos));",
          "974:       add_index_stringl(&zcookie, 2, eqpos, sempos?(sempos-eqpos):strlen(eqpos));",
          "976:       add_index_bool(&zcookie, 3, 1);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "993:      }",
          "994:     }",
          "995:    }",
          "997:     char *t = phpurl->path?phpurl->path:\"/\";",
          "998:     char *c = strrchr(t, '/');",
          "999:     if (c) {",
          "1001:     }",
          "1002:    }",
          "1005:    }",
          "1008:    smart_str_free(&name);",
          "1009:   }",
          "",
          "[Removed Lines]",
          "996:    if (!zend_hash_index_exists(Z_ARRVAL_P(zcookie), 1)) {",
          "1000:      add_index_stringl(zcookie, 1, t, c-t);",
          "1003:    if (!zend_hash_index_exists(Z_ARRVAL_P(zcookie), 2)) {",
          "1004:     add_index_string(zcookie, 2, phpurl->host);",
          "1007:    add_assoc_zval_ex(*cookies, name.c, name.len+1, zcookie);",
          "",
          "[Added Lines]",
          "985:    if (!zend_hash_index_exists(Z_ARRVAL(zcookie), 1)) {",
          "989:      add_index_stringl(&zcookie, 1, t, c-t);",
          "992:    if (!zend_hash_index_exists(Z_ARRVAL(zcookie), 2)) {",
          "993:     add_index_string(&zcookie, 2, phpurl->host);",
          "997:    add_assoc_zval_ex(cookies, name.s->val, name.s->len, &zcookie);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1059:   if (request != buf) {efree(request);}",
          "1060:   php_stream_close(stream);",
          "1061:   efree(http_headers);",
          "1064:   add_soap_fault(this_ptr, \"HTTP\", \"Error Fetching http body, No Content-Length, connection closed or chunked data\", NULL, NULL TSRMLS_CC);",
          "1065:   if (http_msg) {",
          "1066:    efree(http_msg);",
          "",
          "[Removed Lines]",
          "1062:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\"));",
          "1063:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\"));",
          "",
          "[Added Lines]",
          "1052:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\")-1);",
          "1053:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\")-1);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1074:  if (http_close) {",
          "1075:   php_stream_close(stream);",
          "1078:   stream = NULL;",
          "1079:  }",
          "",
          "[Removed Lines]",
          "1076:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\"));",
          "1077:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\"));",
          "",
          "[Added Lines]",
          "1066:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"httpsocket\", sizeof(\"httpsocket\")-1);",
          "1067:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"_use_proxy\", sizeof(\"_use_proxy\")-1);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1127:   }",
          "1128:  } else if (http_status == 401) {",
          "1131:   char *auth = get_http_header_value(http_headers, \"WWW-Authenticate: \");",
          "1133:   if (auth &&",
          "1134:     strstr(auth, \"Digest\") == auth &&",
          "1141:    char *s;",
          "1144:    s = auth + sizeof(\"Digest\")-1;",
          "1145:    while (*s != '\\0') {",
          "1146:     char *name, *val;",
          "",
          "[Removed Lines]",
          "1130:   zval **digest, **login, **password;",
          "1135:       (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_digest\", sizeof(\"_digest\"), (void **)&digest) == FAILURE ||",
          "1136:        Z_TYPE_PP(digest) != IS_ARRAY) &&",
          "1137:       zend_hash_find(Z_OBJPROP_P(this_ptr), \"_login\", sizeof(\"_login\"), (void **)&login) == SUCCESS &&",
          "1138:       Z_TYPE_PP(login) == IS_STRING &&",
          "1139:       zend_hash_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\"), (void **)&password) == SUCCESS &&",
          "1140:       Z_TYPE_PP(password) == IS_STRING) {",
          "1142:    zval *digest = NULL;",
          "",
          "[Added Lines]",
          "1120:   zval *digest, *login, *password;",
          "1125:       ((digest = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_digest\", sizeof(\"_digest\")-1)) == NULL ||",
          "1126:        Z_TYPE_P(digest) != IS_ARRAY) &&",
          "1127:       (login = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_login\", sizeof(\"_login\")-1)) != NULL &&",
          "1128:       Z_TYPE_P(login) == IS_STRING &&",
          "1129:       (password = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\")-1)) != NULL &&",
          "1130:       Z_TYPE_P(password) == IS_STRING) {",
          "1132:    zval digest;",
          "1134:    ZVAL_UNDEF(&digest);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1169:        ++s;",
          "1170:       }",
          "1171:      }",
          "1175:      }",
          "1177:     }",
          "1178:    }",
          "1181:     php_url *new_url  = emalloc(sizeof(php_url));",
          "1187:     if (phpurl->scheme) phpurl->scheme = estrdup(phpurl->scheme);",
          "",
          "[Removed Lines]",
          "1172:      if (digest == NULL) {",
          "1173:       ALLOC_INIT_ZVAL(digest);",
          "1174:       array_init(digest);",
          "1176:      add_assoc_string(digest, name, val);",
          "1180:    if (digest != NULL) {",
          "1183:     Z_DELREF_P(digest);",
          "1184:     add_property_zval_ex(this_ptr, \"_digest\", sizeof(\"_digest\"), digest TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1163:      if (Z_TYPE(digest) == IS_UNDEF) {",
          "1164:       array_init(&digest);",
          "1166:      add_assoc_string(&digest, name, val);",
          "1170:    if (Z_TYPE(digest) != IS_UNDEF) {",
          "1173:     Z_DELREF(digest);",
          "1174:     add_property_zval_ex(this_ptr, \"_digest\", sizeof(\"_digest\")-1, &digest TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1239:  if (content_encoding) {",
          "1240:   zval func;",
          "1241:   zval retval;",
          "1245:   if ((strcmp(content_encoding,\"gzip\") == 0 ||",
          "1246:        strcmp(content_encoding,\"x-gzip\") == 0) &&",
          "1252:   } else if (strcmp(content_encoding,\"deflate\") == 0 &&",
          "1258:   } else {",
          "1259:    efree(content_encoding);",
          "1260:    efree(http_headers);",
          "",
          "[Removed Lines]",
          "1242:    zval param;",
          "1243:   zval *params[1];",
          "1247:        zend_hash_exists(EG(function_table), \"gzinflate\", sizeof(\"gzinflate\"))) {",
          "1248:    ZVAL_STRING(&func, \"gzinflate\", 0);",
          "1249:    params[0] = &param;",
          "1250:    ZVAL_STRINGL(params[0], http_body+10, http_body_size-10, 0);",
          "1251:    INIT_PZVAL(params[0]);",
          "1253:              zend_hash_exists(EG(function_table), \"gzuncompress\", sizeof(\"gzuncompress\"))) {",
          "1254:    ZVAL_STRING(&func, \"gzuncompress\", 0);",
          "1255:    params[0] = &param;",
          "1256:    ZVAL_STRINGL(params[0], http_body, http_body_size, 0);",
          "1257:    INIT_PZVAL(params[0]);",
          "",
          "[Added Lines]",
          "1232:   zval params[1];",
          "1236:        zend_hash_str_exists(EG(function_table), \"gzinflate\", sizeof(\"gzinflate\")-1)) {",
          "1239:    ZVAL_STRING(&func, \"gzinflate\");",
          "1240:    ZVAL_STRINGL(&params[0], http_body+10, http_body_size-10);",
          "1242:              zend_hash_str_exists(EG(function_table), \"gzuncompress\", sizeof(\"gzuncompress\")-1)) {",
          "1245:    ZVAL_STRING(&func, \"gzuncompress\");",
          "1246:    ZVAL_STRINGL(&params[0], http_body, http_body_size);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1265:    add_soap_fault(this_ptr, \"HTTP\", \"Unknown Content-Encoding\", NULL, NULL TSRMLS_CC);",
          "1266:    return FALSE;",
          "1267:   }",
          "1269:       Z_TYPE(retval) == IS_STRING) {",
          "1270:    efree(http_body);",
          "1273:   } else {",
          "1274:    efree(content_encoding);",
          "1275:    efree(http_headers);",
          "",
          "[Removed Lines]",
          "1268:   if (call_user_function(CG(function_table), (zval**)NULL, &func, &retval, 1, params TSRMLS_CC) == SUCCESS &&",
          "",
          "[Added Lines]",
          "1257:   if (call_user_function(CG(function_table), (zval*)NULL, &func, &retval, 1, params TSRMLS_CC) == SUCCESS &&",
          "1260:    ZVAL_COPY_VALUE(return_value, &retval);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1282:   }",
          "1283:   efree(content_encoding);",
          "1284:  } else {",
          "1287:  }",
          "1289:  efree(http_headers);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1276:   ZVAL_STRINGL(return_value, http_body, http_body_size);",
          "1277:   efree(http_body);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1291:  if (http_status >= 400) {",
          "1292:   int error = 0;",
          "1295:    error = 1;",
          "1297:    if (!content_type_xml) {",
          "1300:     while (*s != '\\0' && *s < ' ') {",
          "1301:      s++;",
          "",
          "[Removed Lines]",
          "1294:   if (*buffer_len == 0) {",
          "1296:   } else if (*buffer_len > 0) {",
          "1298:     char *s = *buffer;",
          "",
          "[Added Lines]",
          "1285:   if (Z_STRLEN_P(return_value) == 0) {",
          "1287:   } else if (Z_STRLEN_P(return_value) > 0) {",
          "1289:     char *s = Z_STRVAL_P(return_value);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1307:   }",
          "1309:   if (error) {",
          "1311:    add_soap_fault(this_ptr, \"HTTP\", http_msg, NULL, NULL TSRMLS_CC);",
          "1312:    efree(http_msg);",
          "1313:    return FALSE;",
          "",
          "[Removed Lines]",
          "1310:    efree(*buffer);",
          "",
          "[Added Lines]",
          "1301:    zval_ptr_dtor(return_value);",
          "1302:    ZVAL_UNDEF(return_value);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1515:   smart_str_appends(&tmp_response, headerbuf);",
          "1516:  }",
          "1517:  smart_str_0(&tmp_response);",
          "1520:  return done;",
          "1521: }",
          "",
          "[Removed Lines]",
          "1518:  (*response) = tmp_response.c;",
          "1519:  (*out_size) = tmp_response.len;",
          "",
          "[Added Lines]",
          "1510:  (*response) = tmp_response.s->val;",
          "1511:  (*out_size) = tmp_response.s->len;",
          "",
          "---------------"
        ],
        "ext/soap/php_http.h||ext/soap/php_http.h": [
          "File: ext/soap/php_http.h -> ext/soap/php_http.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:                            char  *location,",
          "29:                            char  *soapaction,",
          "30:                            int    soap_version,",
          "34: int proxy_authentication(zval* this_ptr, smart_str* soap_headers TSRMLS_DC);",
          "35: int basic_authentication(zval* this_ptr, smart_str* soap_headers TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "31:                            char **response,",
          "32:                            int   *response_len TSRMLS_DC);",
          "",
          "[Added Lines]",
          "31:                            zval  *response TSRMLS_DC);",
          "",
          "---------------"
        ],
        "ext/soap/php_packet_soap.c||ext/soap/php_packet_soap.c": [
          "File: ext/soap/php_packet_soap.c -> ext/soap/php_packet_soap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:  fault = get_node_ex(body->children,\"Fault\",envelope_ns);",
          "181:  if (fault != NULL) {",
          "184:   xmlNodePtr tmp;",
          "186:   if (soap_version == SOAP_1_1) {",
          "187:    tmp = get_node(fault->children, \"faultcode\");",
          "188:    if (tmp != NULL && tmp->children != NULL) {",
          "",
          "[Removed Lines]",
          "182:   char *faultcode = NULL, *faultstring = NULL, *faultactor = NULL;",
          "183:   zval *details = NULL;",
          "",
          "[Added Lines]",
          "182:   char *faultcode = NULL;",
          "183:   zend_string *faultstring = NULL, *faultactor = NULL;",
          "184:   zval details;",
          "187:   ZVAL_UNDEF(&details);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:    tmp = get_node(fault->children, \"faultstring\");",
          "193:    if (tmp != NULL && tmp->children != NULL) {",
          "197:    }",
          "199:    tmp = get_node(fault->children, \"faultactor\");",
          "200:    if (tmp != NULL && tmp->children != NULL) {",
          "204:    }",
          "206:    tmp = get_node(fault->children, \"detail\");",
          "207:    if (tmp != NULL) {",
          "209:    }",
          "210:   } else {",
          "211:    tmp = get_node(fault->children, \"Code\");",
          "",
          "[Removed Lines]",
          "194:     zval *zv = master_to_zval(get_conversion(IS_STRING), tmp TSRMLS_CC);",
          "195:     faultstring = Z_STRVAL_P(zv);",
          "196:     FREE_ZVAL(zv);",
          "201:     zval *zv = master_to_zval(get_conversion(IS_STRING), tmp TSRMLS_CC);",
          "202:     faultactor = Z_STRVAL_P(zv);",
          "203:     FREE_ZVAL(zv);",
          "208:     details = master_to_zval(NULL, tmp TSRMLS_CC);",
          "",
          "[Added Lines]",
          "196:     zval zv;",
          "197:     master_to_zval(&zv, get_conversion(IS_STRING), tmp TSRMLS_CC);",
          "198:     faultstring = Z_STR(zv);",
          "203:     zval zv;",
          "204:     master_to_zval(&zv, get_conversion(IS_STRING), tmp TSRMLS_CC);",
          "205:     faultactor = Z_STR(zv);",
          "210:     master_to_zval(&details, NULL, tmp TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:     tmp = get_node(tmp->children,\"Text\");",
          "223:     if (tmp != NULL && tmp->children != NULL) {",
          "227:     }",
          "228:    }",
          "230:    tmp = get_node(fault->children,\"Detail\");",
          "231:    if (tmp != NULL) {",
          "233:    }",
          "234:   }",
          "236:   if (faultstring) {",
          "238:   }",
          "239:   if (faultactor) {",
          "241:   }",
          "244:   }",
          "245:   xmlFreeDoc(response);",
          "246:   return FALSE;",
          "",
          "[Removed Lines]",
          "224:      zval *zv = master_to_zval(get_conversion(IS_STRING), tmp TSRMLS_CC);",
          "225:      faultstring = Z_STRVAL_P(zv);",
          "226:      FREE_ZVAL(zv);",
          "232:     details = master_to_zval(NULL, tmp TSRMLS_CC);",
          "235:   add_soap_fault(this_ptr, faultcode, faultstring, faultactor, details TSRMLS_CC);",
          "237:    efree(faultstring);",
          "240:    efree(faultactor);",
          "242:   if (details) {",
          "243:    Z_DELREF_P(details);",
          "",
          "[Added Lines]",
          "226:      zval zv;",
          "227:      master_to_zval(&zv, get_conversion(IS_STRING), tmp TSRMLS_CC);",
          "228:      faultstring = Z_STR(zv);",
          "234:     master_to_zval(&details, NULL, tmp TSRMLS_CC);",
          "237:   add_soap_fault(this_ptr, faultcode, faultstring->val, faultactor->val, &details TSRMLS_CC);",
          "239:    STR_RELEASE(faultstring);",
          "242:    STR_RELEASE(faultactor);",
          "244:   if (Z_REFCOUNTED(details)) {",
          "245:    Z_DELREF(details);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "255:  if (resp != NULL) {",
          "256:   if (fn != NULL && fn->binding && fn->binding->bindingType == BINDING_SOAP) {",
          "259:    xmlNodePtr val = NULL;",
          "260:    char *name, *ns = NULL;",
          "262:    sdlSoapBindingFunctionPtr fnb = (sdlSoapBindingFunctionPtr)fn->bindingAttributes;",
          "263:    int res_count;",
          "265:    hdrs = fnb->output.headers;",
          "267:    if (fn->responseParameters) {",
          "272:      if (fnb->style == SOAP_DOCUMENT) {",
          "273:       if (param->element) {",
          "274:        name = param->element->name;",
          "",
          "[Removed Lines]",
          "258:    sdlParamPtr *h_param, param = NULL;",
          "261:    zval* tmp;",
          "268:      res_count = zend_hash_num_elements(fn->responseParameters);",
          "269:     zend_hash_internal_pointer_reset(fn->responseParameters);",
          "270:     while (zend_hash_get_current_data(fn->responseParameters, (void **)&h_param) == SUCCESS) {",
          "271:      param = (*h_param);",
          "",
          "[Added Lines]",
          "260:    sdlParamPtr param = NULL;",
          "263:    zval tmp;",
          "270:     res_count = zend_hash_num_elements(fn->responseParameters);",
          "271:     ZEND_HASH_FOREACH_PTR(fn->responseParameters, param) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:      if (!val) {",
          "321:       add_soap_fault(this_ptr, \"Client\", \"Can't find response data\", NULL, NULL TSRMLS_CC);",
          "322:       xmlFreeDoc(response);",
          "",
          "[Removed Lines]",
          "318:       MAKE_STD_ZVAL(tmp);",
          "319:       ZVAL_NULL(tmp);",
          "",
          "[Added Lines]",
          "318:       ZVAL_NULL(&tmp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "325:      } else {",
          "327:       if (param != NULL) {",
          "329:       } else {",
          "331:       }",
          "332:      }",
          "335:      param_count++;",
          "339:    }",
          "340:   } else {",
          "",
          "[Removed Lines]",
          "328:        tmp = master_to_zval(param->encode, val TSRMLS_CC);",
          "330:        tmp = master_to_zval(NULL, val TSRMLS_CC);",
          "333:      add_assoc_zval(return_value, param->paramName, tmp);",
          "337:      zend_hash_move_forward(fn->responseParameters);",
          "338:     }",
          "",
          "[Added Lines]",
          "327:        master_to_zval(&tmp, param->encode, val TSRMLS_CC);",
          "329:        master_to_zval(&tmp, NULL, val TSRMLS_CC);",
          "332:      add_assoc_zval(return_value, param->paramName, &tmp);",
          "335:     } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "347:     }",
          "348:     if (val != NULL) {",
          "349:      if (!node_is_equal_ex(val,\"result\",RPC_SOAP12_NAMESPACE)) {",
          "354:       if (val->name) {",
          "357:        } else if (val->next && get_node(val->next, (char*)val->name)) {",
          "364:        } else {",
          "366:        }",
          "367:       } else {",
          "369:       }",
          "370:       ++param_count;",
          "371:      }",
          "",
          "[Removed Lines]",
          "350:       zval *tmp;",
          "351:       zval **arr;",
          "353:       tmp = master_to_zval(NULL, val TSRMLS_CC);",
          "355:        if (zend_hash_find(Z_ARRVAL_P(return_value), (char*)val->name, strlen((char*)val->name)+1, (void**)&arr) == SUCCESS) {",
          "356:         add_next_index_zval(*arr, tmp);",
          "358:         zval *arr;",
          "360:         MAKE_STD_ZVAL(arr);",
          "361:         array_init(arr);",
          "362:         add_next_index_zval(arr, tmp);",
          "363:         add_assoc_zval(return_value, (char*)val->name, arr);",
          "365:         add_assoc_zval(return_value, (char*)val->name, tmp);",
          "368:        add_next_index_zval(return_value, tmp);",
          "",
          "[Added Lines]",
          "347:       zval tmp;",
          "348:       zval *arr;",
          "350:       master_to_zval(&tmp, NULL, val TSRMLS_CC);",
          "352:        if ((arr = zend_hash_str_find(Z_ARRVAL_P(return_value), (char*)val->name, strlen((char*)val->name))) != NULL) {",
          "353:         add_next_index_zval(arr, &tmp);",
          "355:         zval arr;",
          "357:         array_init(&arr);",
          "358:         add_next_index_zval(&arr, &tmp);",
          "359:         add_assoc_zval(return_value, (char*)val->name, &arr);",
          "361:         add_assoc_zval(return_value, (char*)val->name, &tmp);",
          "364:        add_next_index_zval(return_value, &tmp);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "383:    zval *tmp;",
          "385:    zend_hash_internal_pointer_reset(Z_ARRVAL_P(return_value));",
          "389:    zval_dtor(return_value);",
          "392:   }",
          "393:  }",
          "",
          "[Removed Lines]",
          "386:    zend_hash_get_current_data(Z_ARRVAL_P(return_value), (void**)&tmp);",
          "387:    tmp = *(zval**)tmp;",
          "388:    Z_ADDREF_P(tmp);",
          "391:    FREE_ZVAL(tmp);",
          "",
          "[Added Lines]",
          "382:    tmp = zend_hash_get_current_data(Z_ARRVAL_P(return_value));",
          "383:    if (Z_REFCOUNTED_P(tmp)) Z_ADDREF_P(tmp);",
          "385:    ZVAL_COPY_VALUE(return_value, tmp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "397:   while (trav != NULL) {",
          "398:    if (trav->type == XML_ELEMENT_NODE) {",
          "399:     encodePtr enc = NULL;",
          "402:     if (hdrs) {",
          "403:      smart_str key = {0};",
          "406:      if (trav->ns) {",
          "407:       smart_str_appends(&key, (char*)trav->ns->href);",
          "",
          "[Removed Lines]",
          "400:     zval* val;",
          "404:      sdlSoapBindingFunctionHeaderPtr *hdr;",
          "",
          "[Added Lines]",
          "394:     zval val;",
          "398:      sdlSoapBindingFunctionHeaderPtr hdr;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "409:      }",
          "410:      smart_str_appends(&key, (char*)trav->name);",
          "411:      smart_str_0(&key);",
          "414:      }",
          "415:      smart_str_free(&key);",
          "416:     }",
          "419:    }",
          "420:    trav = trav->next;",
          "421:   }",
          "",
          "[Removed Lines]",
          "412:      if (zend_hash_find(hdrs, key.c, key.len+1, (void**)&hdr) == SUCCESS) {",
          "413:       enc = (*hdr)->encode;",
          "417:     val = master_to_zval(enc, trav TSRMLS_CC);",
          "418:     add_assoc_zval(soap_headers, (char*)trav->name, val);",
          "",
          "[Added Lines]",
          "406:      if ((hdr = zend_hash_find_ptr(hdrs, key.s)) != NULL) {",
          "407:       enc = hdr->encode;",
          "411:     master_to_zval(&val, enc, trav TSRMLS_CC);",
          "412:     add_assoc_zval(soap_headers, (char*)trav->name, &val);",
          "",
          "---------------"
        ],
        "ext/soap/php_schema.c||ext/soap/php_schema.c": [
          "File: ext/soap/php_schema.c -> ext/soap/php_schema.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: static encodePtr create_encoder(sdlPtr sdl, sdlTypePtr cur_type, const xmlChar *ns, const xmlChar *type)",
          "50: {",
          "51:  smart_str nscat = {0};",
          "54:  if (sdl->encoders == NULL) {",
          "55:   sdl->encoders = emalloc(sizeof(HashTable));",
          "",
          "[Removed Lines]",
          "52:  encodePtr enc, *enc_ptr;",
          "",
          "[Added Lines]",
          "52:  encodePtr enc, enc_ptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  smart_str_appendc(&nscat, ':');",
          "60:  smart_str_appends(&nscat, (char*)type);",
          "61:  smart_str_0(&nscat);",
          "64:   if (enc->details.ns) {",
          "65:    efree(enc->details.ns);",
          "66:   }",
          "",
          "[Removed Lines]",
          "62:  if (zend_hash_find(sdl->encoders, nscat.c, nscat.len + 1, (void**)&enc_ptr) == SUCCESS) {",
          "63:   enc = *enc_ptr;",
          "",
          "[Added Lines]",
          "62:  if ((enc_ptr = zend_hash_find_ptr(sdl->encoders, nscat.s)) != NULL) {",
          "63:   enc = enc_ptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:  enc->to_zval = sdl_guess_convert_zval;",
          "82:  if (enc_ptr == NULL) {",
          "84:  }",
          "85:  smart_str_free(&nscat);",
          "86:  return enc;",
          "",
          "[Removed Lines]",
          "83:   zend_hash_update(sdl->encoders, nscat.c, nscat.len + 1, &enc, sizeof(encodePtr), NULL);",
          "",
          "[Added Lines]",
          "83:   zend_hash_update_ptr(sdl->encoders, nscat.s, enc);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98: static void schema_load_file(sdlCtx *ctx, xmlAttrPtr ns, xmlChar *location, xmlAttrPtr tns, int import TSRMLS_DC) {",
          "99:  if (location != NULL &&",
          "101:   xmlDocPtr doc;",
          "102:   xmlNodePtr schema;",
          "103:   xmlAttrPtr new_tns;",
          "",
          "[Removed Lines]",
          "100:      !zend_hash_exists(&ctx->docs, (char*)location, xmlStrlen(location)+1)) {",
          "",
          "[Added Lines]",
          "100:      !zend_hash_str_exists(&ctx->docs, (char*)location, xmlStrlen(location))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:     soap_error1(E_ERROR, \"Parsing Schema: can't include schema from '%s', different 'targetNamespace'\", location);",
          "136:    }",
          "137:   }",
          "139:   load_schema(ctx, schema TSRMLS_CC);",
          "140:  }",
          "141: }",
          "",
          "[Removed Lines]",
          "138:   zend_hash_add(&ctx->docs, (char*)location, xmlStrlen(location)+1, (void**)&doc, sizeof(xmlDocPtr), NULL);",
          "",
          "[Added Lines]",
          "138:   zend_hash_str_add_ptr(&ctx->docs, (char*)location, xmlStrlen(location), doc);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315:  name = get_attribute(simpleType->properties, \"name\");",
          "316:  if (cur_type != NULL) {",
          "320:   newType = emalloc(sizeof(sdlType));",
          "321:   memset(newType, 0, sizeof(sdlType));",
          "",
          "[Removed Lines]",
          "318:   sdlTypePtr newType, *ptr;",
          "",
          "[Added Lines]",
          "318:   sdlTypePtr newType, ptr;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "328:    newType->namens = estrdup(cur_type->namens);",
          "329:   }",
          "333:   if (sdl->encoders == NULL) {",
          "334:    sdl->encoders = emalloc(sizeof(HashTable));",
          "",
          "[Removed Lines]",
          "331:   zend_hash_next_index_insert(sdl->types,  &newType, sizeof(sdlTypePtr), (void **)&ptr);",
          "",
          "[Added Lines]",
          "331:   ptr = zend_hash_next_index_insert_ptr(sdl->types,  newType);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "338:   memset(cur_type->encode, 0, sizeof(encode));",
          "339:   cur_type->encode->details.ns = estrdup(newType->namens);",
          "340:   cur_type->encode->details.type_str = estrdup(newType->name);",
          "342:   cur_type->encode->to_xml = sdl_guess_convert_xml;",
          "343:   cur_type->encode->to_zval = sdl_guess_convert_zval;",
          "348:  } else if (name != NULL) {",
          "351:   newType = emalloc(sizeof(sdlType));",
          "352:   memset(newType, 0, sizeof(sdlType));",
          "",
          "[Removed Lines]",
          "341:   cur_type->encode->details.sdl_type = *ptr;",
          "344:   zend_hash_next_index_insert(sdl->encoders,  &cur_type->encode, sizeof(encodePtr), NULL);",
          "346:   cur_type =*ptr;",
          "349:   sdlTypePtr newType, *ptr;",
          "",
          "[Added Lines]",
          "341:   cur_type->encode->details.sdl_type = ptr;",
          "344:   zend_hash_next_index_insert_ptr(sdl->encoders,  cur_type->encode);",
          "346:   cur_type =ptr;",
          "349:   sdlTypePtr newType, ptr;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "355:   newType->namens = estrdup((char*)ns->children->content);",
          "357:   if (cur_type == NULL) {",
          "359:   } else {",
          "360:    if (cur_type->elements == NULL) {",
          "361:     cur_type->elements = emalloc(sizeof(HashTable));",
          "362:     zend_hash_init(cur_type->elements, 0, NULL, delete_type, 0);",
          "363:    }",
          "365:   }",
          "368:   create_encoder(sdl, cur_type, ns->children->content, name->children->content);",
          "369:  } else {",
          "",
          "[Removed Lines]",
          "358:    zend_hash_next_index_insert(sdl->types,  &newType, sizeof(sdlTypePtr), (void **)&ptr);",
          "364:    zend_hash_update(cur_type->elements, newType->name, strlen(newType->name)+1, &newType, sizeof(sdlTypePtr), (void **)&ptr);",
          "366:   cur_type = (*ptr);",
          "",
          "[Added Lines]",
          "358:    ptr = zend_hash_next_index_insert_ptr(sdl->types, newType);",
          "364:    ptr = zend_hash_str_update_ptr(cur_type->elements, newType->name, strlen(newType->name), newType);",
          "366:   cur_type = ptr;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "421:   parse_namespace(itemType->children->content, &type, &ns);",
          "422:   nsptr = xmlSearchNs(listType->doc, listType, BAD_CAST(ns));",
          "423:   if (nsptr != NULL) {",
          "426:    newType = emalloc(sizeof(sdlType));",
          "427:    memset(newType, 0, sizeof(sdlType));",
          "",
          "[Removed Lines]",
          "424:    sdlTypePtr newType, *tmp;",
          "",
          "[Added Lines]",
          "424:    sdlTypePtr newType;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "435:     cur_type->elements = emalloc(sizeof(HashTable));",
          "436:     zend_hash_init(cur_type->elements, 0, NULL, delete_type, 0);",
          "437:    }",
          "439:   }",
          "440:   if (type) {efree(type);}",
          "441:   if (ns) {efree(ns);}",
          "",
          "[Removed Lines]",
          "438:    zend_hash_next_index_insert(cur_type->elements, &newType, sizeof(sdlTypePtr), (void **)&tmp);",
          "",
          "[Added Lines]",
          "438:    zend_hash_next_index_insert_ptr(cur_type->elements, newType);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "447:   trav = trav->next;",
          "448:  }",
          "449:  if (trav != NULL && node_is_equal(trav,\"simpleType\")) {",
          "452:   if (itemType != NULL) {",
          "453:    soap_error0(E_ERROR, \"Parsing Schema: element has both 'itemType' attribute and subtype\");",
          "",
          "[Removed Lines]",
          "450:   sdlTypePtr newType, *tmp;",
          "",
          "[Added Lines]",
          "450:   sdlTypePtr newType;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "462:    smart_str_appendl(&anonymous, \"anonymous\", sizeof(\"anonymous\")-1);",
          "463:    smart_str_append_long(&anonymous, zend_hash_num_elements(sdl->types));",
          "464:    smart_str_0(&anonymous);",
          "466:   }",
          "467:   newType->namens = estrdup((char*)tns->children->content);",
          "",
          "[Removed Lines]",
          "465:    newType->name = anonymous.c;",
          "",
          "[Added Lines]",
          "466:    newType->name = estrndup(anonymous.s->val, anonymous.s->len);",
          "467:    smart_str_free(&anonymous);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "470:    cur_type->elements = emalloc(sizeof(HashTable));",
          "471:    zend_hash_init(cur_type->elements, 0, NULL, delete_type, 0);",
          "472:   }",
          "475:   schema_simpleType(sdl, tns, trav, newType);",
          "",
          "[Removed Lines]",
          "473:   zend_hash_next_index_insert(cur_type->elements, &newType, sizeof(sdlTypePtr), (void **)&tmp);",
          "",
          "[Added Lines]",
          "475:   zend_hash_next_index_insert_ptr(cur_type->elements, newType);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "516:    parse_namespace(BAD_CAST(start), &type, &ns);",
          "517:    nsptr = xmlSearchNs(unionType->doc, unionType, BAD_CAST(ns));",
          "518:    if (nsptr != NULL) {",
          "521:     newType = emalloc(sizeof(sdlType));",
          "522:     memset(newType, 0, sizeof(sdlType));",
          "",
          "[Removed Lines]",
          "519:     sdlTypePtr newType, *tmp;",
          "",
          "[Added Lines]",
          "521:     sdlTypePtr newType;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "530:      cur_type->elements = emalloc(sizeof(HashTable));",
          "531:      zend_hash_init(cur_type->elements, 0, NULL, delete_type, 0);",
          "532:     }",
          "534:    }",
          "535:    if (type) {efree(type);}",
          "536:    if (ns) {efree(ns);}",
          "",
          "[Removed Lines]",
          "533:     zend_hash_next_index_insert(cur_type->elements, &newType, sizeof(sdlTypePtr), (void **)&tmp);",
          "",
          "[Added Lines]",
          "535:     zend_hash_next_index_insert_ptr(cur_type->elements, newType);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "547:  }",
          "548:  while (trav != NULL) {",
          "549:   if (node_is_equal(trav,\"simpleType\")) {",
          "552:    newType = emalloc(sizeof(sdlType));",
          "553:    memset(newType, 0, sizeof(sdlType));",
          "",
          "[Removed Lines]",
          "550:    sdlTypePtr newType, *tmp;",
          "",
          "[Added Lines]",
          "552:    sdlTypePtr newType;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "558:     smart_str_appendl(&anonymous, \"anonymous\", sizeof(\"anonymous\")-1);",
          "559:     smart_str_append_long(&anonymous, zend_hash_num_elements(sdl->types));",
          "560:     smart_str_0(&anonymous);",
          "562:    }",
          "563:    newType->namens = estrdup((char*)tns->children->content);",
          "",
          "[Removed Lines]",
          "561:     newType->name = anonymous.c;",
          "",
          "[Added Lines]",
          "564:     newType->name = estrndup(anonymous.s->val, anonymous.s->len);",
          "565:     smart_str_free(&anonymous);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "566:     cur_type->elements = emalloc(sizeof(HashTable));",
          "567:     zend_hash_init(cur_type->elements, 0, NULL, delete_type, 0);",
          "568:    }",
          "571:    schema_simpleType(sdl, tns, trav, newType);",
          "",
          "[Removed Lines]",
          "569:    zend_hash_next_index_insert(cur_type->elements, &newType, sizeof(sdlTypePtr), (void **)&tmp);",
          "",
          "[Added Lines]",
          "573:    zend_hash_next_index_insert_ptr(cur_type->elements, newType);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "699:     cur_type->restrictions->enumeration = emalloc(sizeof(HashTable));",
          "700:     zend_hash_init(cur_type->restrictions->enumeration, 0, NULL, delete_restriction_var_char, 0);",
          "701:    }",
          "704:    }",
          "705:   } else {",
          "706:    break;",
          "",
          "[Removed Lines]",
          "702:    if (zend_hash_add(cur_type->restrictions->enumeration, enumval->value, strlen(enumval->value)+1, &enumval, sizeof(sdlRestrictionCharPtr), NULL) == FAILURE) {",
          "703:     delete_restriction_var_char(&enumval);",
          "",
          "[Added Lines]",
          "706:    if (zend_hash_str_add_ptr(cur_type->restrictions->enumeration, enumval->value, strlen(enumval->value), enumval) == NULL) {",
          "707:     delete_restriction_var_char_int(enumval);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1022:  if (model == NULL) {",
          "1023:   cur_type->model = newModel;",
          "1024:  } else {",
          "1026:  }",
          "1028:  schema_min_max(all, newModel);",
          "",
          "[Removed Lines]",
          "1025:   zend_hash_next_index_insert(model->u.content,&newModel,sizeof(sdlContentModelPtr), NULL);",
          "",
          "[Added Lines]",
          "1029:   zend_hash_next_index_insert_ptr(model->u.content, newModel);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1097:    newModel = emalloc(sizeof(sdlContentModel));",
          "1098:    newModel->kind = XSD_CONTENT_GROUP_REF;",
          "1101:    if (type) {efree(type);}",
          "1102:    if (ns) {efree(ns);}",
          "",
          "[Removed Lines]",
          "1099:    newModel->u.group_ref = estrdup(key.c);",
          "",
          "[Added Lines]",
          "1103:    newModel->u.group_ref = estrndup(key.s->val, key.s->len);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1122:     sdl->groups = emalloc(sizeof(HashTable));",
          "1123:     zend_hash_init(sdl->groups, 0, NULL, delete_type, 0);",
          "1124:    }",
          "1127:    }",
          "1129:    cur_type = newType;",
          "",
          "[Removed Lines]",
          "1125:    if (zend_hash_add(sdl->groups, key.c, key.len+1, (void**)&newType, sizeof(sdlTypePtr), NULL) != SUCCESS) {",
          "1126:     soap_error1(E_ERROR, \"Parsing Schema: group '%s' already defined\", key.c);",
          "",
          "[Added Lines]",
          "1129:    if (zend_hash_add_ptr(sdl->groups, key.s, newType) == NULL) {",
          "1130:     soap_error1(E_ERROR, \"Parsing Schema: group '%s' already defined\", key.s->val);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1133:   if (model == NULL) {",
          "1134:    cur_type->model = newModel;",
          "1135:   } else {",
          "1137:   }",
          "1138:  } else {",
          "1139:   soap_error0(E_ERROR, \"Parsing Schema: group has no 'name' nor 'ref' attributes\");",
          "",
          "[Removed Lines]",
          "1136:    zend_hash_next_index_insert(model->u.content, &newModel, sizeof(sdlContentModelPtr), NULL);",
          "",
          "[Added Lines]",
          "1140:    zend_hash_next_index_insert_ptr(model->u.content, newModel);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1198:  if (model == NULL) {",
          "1199:   cur_type->model = newModel;",
          "1200:  } else {",
          "1202:  }",
          "1204:  schema_min_max(choiceType, newModel);",
          "",
          "[Removed Lines]",
          "1201:   zend_hash_next_index_insert(model->u.content,&newModel,sizeof(sdlContentModelPtr), NULL);",
          "",
          "[Added Lines]",
          "1205:   zend_hash_next_index_insert_ptr(model->u.content, newModel);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1248:  if (model == NULL) {",
          "1249:   cur_type->model = newModel;",
          "1250:  } else {",
          "1252:  }",
          "1254:  schema_min_max(seqType, newModel);",
          "",
          "[Removed Lines]",
          "1251:   zend_hash_next_index_insert(model->u.content,&newModel,sizeof(sdlContentModelPtr), NULL);",
          "",
          "[Added Lines]",
          "1255:   zend_hash_next_index_insert_ptr(model->u.content, newModel);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1299:   schema_min_max(anyType, newModel);",
          "1302:  }",
          "1303:  return TRUE;",
          "1304: }",
          "",
          "[Removed Lines]",
          "1301:   zend_hash_next_index_insert(model->u.content, &newModel, sizeof(sdlContentModelPtr), NULL);",
          "",
          "[Added Lines]",
          "1305:   zend_hash_next_index_insert_ptr(model->u.content, newModel);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1368:  name = get_attribute(attrs, \"name\");",
          "1369:  if (cur_type != NULL) {",
          "1373:   newType = emalloc(sizeof(sdlType));",
          "1374:   memset(newType, 0, sizeof(sdlType));",
          "",
          "[Removed Lines]",
          "1371:   sdlTypePtr newType, *ptr;",
          "",
          "[Added Lines]",
          "1375:   sdlTypePtr newType, ptr;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1381:    newType->namens = estrdup(cur_type->namens);",
          "1382:   }",
          "1386:   if (sdl->encoders == NULL) {",
          "1387:    sdl->encoders = emalloc(sizeof(HashTable));",
          "",
          "[Removed Lines]",
          "1384:   zend_hash_next_index_insert(sdl->types,  &newType, sizeof(sdlTypePtr), (void **)&ptr);",
          "",
          "[Added Lines]",
          "1388:   ptr = zend_hash_next_index_insert_ptr(sdl->types, newType);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1391:   memset(cur_type->encode, 0, sizeof(encode));",
          "1392:   cur_type->encode->details.ns = estrdup(newType->namens);",
          "1393:   cur_type->encode->details.type_str = estrdup(newType->name);",
          "1395:   cur_type->encode->to_xml = sdl_guess_convert_xml;",
          "1396:   cur_type->encode->to_zval = sdl_guess_convert_zval;",
          "1401:  } else if (name) {",
          "1404:   newType = emalloc(sizeof(sdlType));",
          "1405:   memset(newType, 0, sizeof(sdlType));",
          "",
          "[Removed Lines]",
          "1394:   cur_type->encode->details.sdl_type = *ptr;",
          "1397:   zend_hash_next_index_insert(sdl->encoders,  &cur_type->encode, sizeof(encodePtr), NULL);",
          "1399:   cur_type =*ptr;",
          "1402:   sdlTypePtr newType, *ptr;",
          "",
          "[Added Lines]",
          "1398:   cur_type->encode->details.sdl_type = ptr;",
          "1401:   zend_hash_next_index_insert_ptr(sdl->encoders, cur_type->encode);",
          "1403:   cur_type = ptr;",
          "1406:   sdlTypePtr newType, ptr;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1407:   newType->name = estrdup((char*)name->children->content);",
          "1408:   newType->namens = estrdup((char*)ns->children->content);",
          "1413:   create_encoder(sdl, cur_type, ns->children->content, name->children->content);",
          "1414:  } else {",
          "1415:   soap_error0(E_ERROR, \"Parsing Schema: complexType has no 'name' attribute\");",
          "",
          "[Removed Lines]",
          "1410:   zend_hash_next_index_insert(sdl->types,  &newType, sizeof(sdlTypePtr), (void **)&ptr);",
          "1412:   cur_type = (*ptr);",
          "",
          "[Added Lines]",
          "1414:   ptr = zend_hash_next_index_insert_ptr(sdl->types, newType);",
          "1416:   cur_type = ptr;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1532:    smart_str_0(&nscat);",
          "1533:    if (type) {efree(type);}",
          "1534:    if (ns) {efree(ns);}",
          "1536:    smart_str_free(&nscat);",
          "1537:   } else {",
          "1538:    newType->name = estrdup((char*)name->children->content);",
          "",
          "[Removed Lines]",
          "1535:    newType->ref = estrdup(nscat.c);",
          "",
          "[Added Lines]",
          "1539:    newType->ref = estrndup(nscat.s->val, nscat.s->len);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1560:   }",
          "1562:   smart_str_0(&key);",
          "1564:    if (cur_type == NULL) {",
          "1566:    } else {",
          "1568:    }",
          "1569:   }",
          "1570:   smart_str_free(&key);",
          "",
          "[Removed Lines]",
          "1563:   if (zend_hash_add(addHash, key.c, key.len + 1, &newType, sizeof(sdlTypePtr), NULL) != SUCCESS) {",
          "1565:     soap_error1(E_ERROR, \"Parsing Schema: element '%s' already defined\", key.c);",
          "1567:     zend_hash_next_index_insert(addHash, &newType, sizeof(sdlTypePtr), NULL);",
          "",
          "[Added Lines]",
          "1567:   if (zend_hash_add_ptr(addHash, key.s, newType) == NULL) {",
          "1569:     soap_error1(E_ERROR, \"Parsing Schema: element '%s' already defined\", key.s->val);",
          "1571:     zend_hash_next_index_insert_ptr(addHash, newType);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1578:    schema_min_max(element, newModel);",
          "1582:   }",
          "1583:   cur_type = newType;",
          "1584:  } else {",
          "",
          "[Removed Lines]",
          "1581:    zend_hash_next_index_insert(model->u.content, &newModel, sizeof(sdlContentModelPtr), NULL);",
          "",
          "[Added Lines]",
          "1585:    zend_hash_next_index_insert_ptr(model->u.content, newModel);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1763:    smart_str_appendc(&key, ':');",
          "1764:    smart_str_appends(&key, attr_name);",
          "1765:    smart_str_0(&key);",
          "1767:    if (attr_name) {efree(attr_name);}",
          "1768:    if (ns) {efree(ns);}",
          "1769:   } else {",
          "",
          "[Removed Lines]",
          "1766:    newAttr->ref = estrdup(key.c);",
          "",
          "[Added Lines]",
          "1770:    newAttr->ref = estrndup(key.s->val, key.s->len);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1792:    addHash = cur_type->attributes;",
          "1793:   }",
          "1797:   }",
          "1798:   smart_str_free(&key);",
          "1799:  } else{",
          "",
          "[Removed Lines]",
          "1795:   if (zend_hash_add(addHash, key.c, key.len + 1, &newAttr, sizeof(sdlAttributePtr), NULL) != SUCCESS) {",
          "1796:    soap_error1(E_ERROR, \"Parsing Schema: attribute '%s' already defined\", key.c);",
          "",
          "[Added Lines]",
          "1799:   if (zend_hash_add_ptr(addHash, key.s, newAttr) == NULL) {",
          "1800:    soap_error1(E_ERROR, \"Parsing Schema: attribute '%s' already defined\", key.s->val);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1881:     smart_str_appendc(&key2, ':');",
          "1882:     smart_str_appends(&key2, (char*)attr->name);",
          "1883:     smart_str_0(&key2);",
          "1885:     smart_str_free(&key2);",
          "1886:    }",
          "1887:   }",
          "",
          "[Removed Lines]",
          "1884:     zend_hash_add(newAttr->extraAttributes, key2.c, key2.len + 1, &ext, sizeof(sdlExtraAttributePtr), NULL);",
          "",
          "[Added Lines]",
          "1888:     zend_hash_add_ptr(newAttr->extraAttributes, key2.s, ext);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1914:  if (trav != NULL) {",
          "1915:   if (node_is_equal(trav,\"simpleType\")) {",
          "1916:    sdlTypePtr dummy_type;",
          "1917:    if (ref != NULL) {",
          "1918:     soap_error0(E_ERROR, \"Parsing Schema: attribute has both 'ref' attribute and subtype\");",
          "1919:    } else if (type != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1921:    zval zv;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1927:     smart_str_appendl(&anonymous, \"anonymous\", sizeof(\"anonymous\")-1);",
          "1928:     smart_str_append_long(&anonymous, zend_hash_num_elements(sdl->types));",
          "1929:     smart_str_0(&anonymous);",
          "1931:    }",
          "1932:    dummy_type->namens = estrdup((char*)tns->children->content);",
          "1933:    schema_simpleType(sdl, tns, trav, dummy_type);",
          "1934:    newAttr->encode = dummy_type->encode;",
          "1936:    trav = trav->next;",
          "1937:   }",
          "1938:  }",
          "",
          "[Removed Lines]",
          "1930:     dummy_type->name = anonymous.c;",
          "1935:    delete_type(&dummy_type);",
          "",
          "[Added Lines]",
          "1937:     dummy_type->name = estrndup(anonymous.s->val, anonymous.s->len);",
          "1938:     smart_str_free(&anonymous);",
          "1943:    ZVAL_PTR(&zv, dummy_type);",
          "1944:    delete_type(&zv);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1972:    smart_str_appends(&key, newType->name);",
          "1973:    smart_str_0(&key);",
          "1977:    }",
          "1978:    cur_type = newType;",
          "1979:    smart_str_free(&key);",
          "",
          "[Removed Lines]",
          "1975:    if (zend_hash_add(ctx->attributeGroups, key.c, key.len + 1, &newType, sizeof(sdlTypePtr), NULL) != SUCCESS) {",
          "1976:     soap_error1(E_ERROR, \"Parsing Schema: attributeGroup '%s' already defined\", key.c);",
          "",
          "[Added Lines]",
          "1984:    if (zend_hash_add_ptr(ctx->attributeGroups, key.s, newType) == NULL) {",
          "1985:     soap_error1(E_ERROR, \"Parsing Schema: attributeGroup '%s' already defined\", key.s->val);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1998:    smart_str_appendc(&key, ':');",
          "1999:    smart_str_appends(&key, group_name);",
          "2000:    smart_str_0(&key);",
          "2002:    if (group_name) {efree(group_name);}",
          "2003:    if (ns) {efree(ns);}",
          "2004:    smart_str_free(&key);",
          "2007:    cur_type = NULL;",
          "2008:   }",
          "2009:  } else{",
          "",
          "[Removed Lines]",
          "2001:    newAttr->ref = estrdup(key.c);",
          "2006:    zend_hash_next_index_insert(cur_type->attributes, &newAttr, sizeof(sdlAttributePtr), NULL);",
          "",
          "[Added Lines]",
          "2010:    newAttr->ref = estrndup(key.s->val, key.s->len);",
          "2015:    zend_hash_next_index_insert_ptr(cur_type->attributes, newAttr);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2044:  return TRUE;",
          "2045: }",
          "2048: {",
          "2050:  sdlExtraAttributePtr new_attr;",
          "2052:  new_attr = emalloc(sizeof(sdlExtraAttribute));",
          "2055:  if (new_attr->ns) {",
          "2056:   new_attr->ns = estrdup(new_attr->ns);",
          "2057:  }",
          "",
          "[Removed Lines]",
          "2047: static void copy_extra_attribute(void *attribute)",
          "2049:  sdlExtraAttributePtr *attr = (sdlExtraAttributePtr*)attribute;",
          "2053:  memcpy(new_attr, *attr, sizeof(sdlExtraAttribute));",
          "",
          "[Added Lines]",
          "2056: static void copy_extra_attribute(zval *zv)",
          "2061:  memcpy(new_attr, Z_PTR_P(zv), sizeof(sdlExtraAttribute));",
          "2062:  Z_PTR_P(zv) = new_attr;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2063: static void* schema_find_by_ref(HashTable *ht, char *ref)",
          "2064: {",
          "2068:   return tmp;",
          "2069:  } else {",
          "2070:   ref = strrchr(ref, ':');",
          "2071:   if (ref) {",
          "2073:     return tmp;",
          "2074:    }",
          "2075:   }",
          "",
          "[Removed Lines]",
          "2065:  void **tmp;",
          "2067:  if (zend_hash_find(ht, ref, strlen(ref)+1, (void**)&tmp) == SUCCESS) {",
          "2072:    if (zend_hash_find(ht, ref, strlen(ref)+1, (void**)&tmp) == SUCCESS) {",
          "",
          "[Added Lines]",
          "2073:  void *tmp;",
          "2075:  if ((tmp = zend_hash_str_find_ptr(ht, ref, strlen(ref))) != NULL) {",
          "2080:    if ((tmp = zend_hash_str_find_ptr(ht, ref, strlen(ref))) != NULL) {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2080: static void schema_attribute_fixup(sdlCtx *ctx, sdlAttributePtr attr)",
          "2081: {",
          "2084:  if (attr->ref != NULL) {",
          "2085:   if (ctx->attributes != NULL) {",
          "2087:    if (tmp) {",
          "2091:     }",
          "2094:     }",
          "2097:     }",
          "2100:     }",
          "2101:     if (attr->form == XSD_FORM_DEFAULT) {",
          "2103:     }",
          "2104:     if (attr->use == XSD_USE_DEFAULT) {",
          "2106:     }",
          "2110:      attr->extraAttributes = emalloc(sizeof(HashTable));",
          "2113:     }",
          "2115:    }",
          "2116:   }",
          "2117:   if (attr->name == NULL && attr->ref != NULL) {",
          "",
          "[Removed Lines]",
          "2082:  sdlAttributePtr *tmp;",
          "2086:    tmp = (sdlAttributePtr*)schema_find_by_ref(ctx->attributes, attr->ref);",
          "2088:     schema_attribute_fixup(ctx, *tmp);",
          "2089:     if ((*tmp)->name != NULL && attr->name == NULL) {",
          "2090:      attr->name = estrdup((*tmp)->name);",
          "2092:     if ((*tmp)->namens != NULL && attr->namens == NULL) {",
          "2093:      attr->namens = estrdup((*tmp)->namens);",
          "2095:     if ((*tmp)->def != NULL && attr->def == NULL) {",
          "2096:      attr->def = estrdup((*tmp)->def);",
          "2098:     if ((*tmp)->fixed != NULL && attr->fixed == NULL) {",
          "2099:      attr->fixed = estrdup((*tmp)->fixed);",
          "2102:      attr->form = (*tmp)->form;",
          "2105:      attr->use  = (*tmp)->use;",
          "2107:     if ((*tmp)->extraAttributes != NULL) {",
          "2108:       xmlNodePtr node;",
          "2111:      zend_hash_init(attr->extraAttributes, zend_hash_num_elements((*tmp)->extraAttributes), NULL, delete_extra_attribute, 0);",
          "2112:      zend_hash_copy(attr->extraAttributes, (*tmp)->extraAttributes, copy_extra_attribute, &node, sizeof(xmlNodePtr));",
          "2114:     attr->encode = (*tmp)->encode;",
          "",
          "[Added Lines]",
          "2090:  sdlAttributePtr tmp;",
          "2094:    tmp = (sdlAttributePtr)schema_find_by_ref(ctx->attributes, attr->ref);",
          "2096:     schema_attribute_fixup(ctx, tmp);",
          "2097:     if (tmp->name != NULL && attr->name == NULL) {",
          "2098:      attr->name = estrdup(tmp->name);",
          "2100:     if (tmp->namens != NULL && attr->namens == NULL) {",
          "2101:      attr->namens = estrdup(tmp->namens);",
          "2103:     if (tmp->def != NULL && attr->def == NULL) {",
          "2104:      attr->def = estrdup(tmp->def);",
          "2106:     if (tmp->fixed != NULL && attr->fixed == NULL) {",
          "2107:      attr->fixed = estrdup(tmp->fixed);",
          "2110:      attr->form = tmp->form;",
          "2113:      attr->use  = tmp->use;",
          "2115:     if (tmp->extraAttributes != NULL) {",
          "2117:      zend_hash_init(attr->extraAttributes, zend_hash_num_elements(tmp->extraAttributes), NULL, delete_extra_attribute, 0);",
          "2118:      zend_hash_copy(attr->extraAttributes, tmp->extraAttributes, copy_extra_attribute);",
          "2120:     attr->encode = tmp->encode;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2130: static void schema_attributegroup_fixup(sdlCtx *ctx, sdlAttributePtr attr, HashTable *ht)",
          "2131: {",
          "2135:  if (attr->ref != NULL) {",
          "2136:   if (ctx->attributeGroups != NULL) {",
          "2138:    if (tmp) {",
          "2145:        sdlAttributePtr newAttr;",
          "2149:        newAttr = emalloc(sizeof(sdlAttribute));",
          "2151:        if (newAttr->def) {newAttr->def = estrdup(newAttr->def);}",
          "2152:        if (newAttr->fixed) {newAttr->fixed = estrdup(newAttr->fixed);}",
          "2153:        if (newAttr->namens) {newAttr->namens = estrdup(newAttr->namens);}",
          "2154:        if (newAttr->name) {newAttr->name = estrdup(newAttr->name);}",
          "2155:        if (newAttr->extraAttributes) {",
          "2157:         HashTable *ht = emalloc(sizeof(HashTable));",
          "2158:         zend_hash_init(ht, zend_hash_num_elements(newAttr->extraAttributes), NULL, delete_extra_attribute, 0);",
          "2160:         newAttr->extraAttributes = ht;",
          "2161:        }",
          "2167:       } else {",
          "2168:        ulong index;",
          "2173:       }",
          "2174:      }",
          "2175:     }",
          "",
          "[Removed Lines]",
          "2132:  sdlTypePtr *tmp;",
          "2133:  sdlAttributePtr *tmp_attr;",
          "2137:    tmp = (sdlTypePtr*)schema_find_by_ref(ctx->attributeGroups, attr->ref);",
          "2139:     if ((*tmp)->attributes) {",
          "2140:      zend_hash_internal_pointer_reset((*tmp)->attributes);",
          "2141:      while (zend_hash_get_current_data((*tmp)->attributes,(void**)&tmp_attr) == SUCCESS) {",
          "2142:       if (zend_hash_get_current_key_type((*tmp)->attributes) == HASH_KEY_IS_STRING) {",
          "2143:        char* key;",
          "2144:        uint key_len;",
          "2147:        schema_attribute_fixup(ctx,*tmp_attr);",
          "2150:        memcpy(newAttr, *tmp_attr, sizeof(sdlAttribute));",
          "2156:          xmlNodePtr node;",
          "2159:         zend_hash_copy(ht, newAttr->extraAttributes, copy_extra_attribute, &node, sizeof(xmlNodePtr));",
          "2163:        zend_hash_get_current_key_ex((*tmp)->attributes, &key, &key_len, NULL, 0, NULL);",
          "2164:        zend_hash_add(ht, key, key_len, &newAttr, sizeof(sdlAttributePtr), NULL);",
          "2166:        zend_hash_move_forward((*tmp)->attributes);",
          "2170:        schema_attributegroup_fixup(ctx,*tmp_attr, ht);",
          "2171:        zend_hash_get_current_key((*tmp)->attributes, NULL, &index, 0);",
          "2172:        zend_hash_index_del((*tmp)->attributes, index);",
          "",
          "[Added Lines]",
          "2138:  sdlTypePtr tmp;",
          "2139:  sdlAttributePtr tmp_attr;",
          "2143:    tmp = (sdlTypePtr)schema_find_by_ref(ctx->attributeGroups, attr->ref);",
          "2145:     if (tmp->attributes) {",
          "2146:      zend_hash_internal_pointer_reset(tmp->attributes);",
          "2147:      while ((tmp_attr = zend_hash_get_current_data_ptr(tmp->attributes)) != NULL) {",
          "2148:       if (zend_hash_get_current_key_type(tmp->attributes) == HASH_KEY_IS_STRING) {",
          "2149:        zend_string* _key;",
          "2152:        schema_attribute_fixup(ctx, tmp_attr);",
          "2155:        memcpy(newAttr, tmp_attr, sizeof(sdlAttribute));",
          "2163:         zend_hash_copy(ht, newAttr->extraAttributes, copy_extra_attribute);",
          "2167:        zend_hash_get_current_key_ex(tmp->attributes, &_key, NULL, 0, &tmp->attributes->nInternalPointer);",
          "2168:        zend_hash_add_ptr(ht, _key, &newAttr);",
          "2170:        zend_hash_move_forward(tmp->attributes);",
          "2174:        schema_attributegroup_fixup(ctx, tmp_attr, ht);",
          "2175:        zend_hash_get_current_key(tmp->attributes, NULL, &index, 0);",
          "2176:        zend_hash_index_del(tmp->attributes, index);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2184: {",
          "2185:  switch (model->kind) {",
          "2186:   case XSD_CONTENT_GROUP_REF: {",
          "2191:     efree(model->u.group_ref);",
          "2192:     model->kind = XSD_CONTENT_GROUP;",
          "2194:    } else {",
          "2195:     soap_error1(E_ERROR, \"Parsing Schema: unresolved group 'ref' attribute '%s'\", model->u.group_ref);",
          "2196:    }",
          "",
          "[Removed Lines]",
          "2187:    sdlTypePtr *tmp;",
          "2189:    if (ctx->sdl->groups && zend_hash_find(ctx->sdl->groups, model->u.group_ref, strlen(model->u.group_ref)+1, (void**)&tmp) == SUCCESS) {",
          "2190:     schema_type_fixup(ctx,*tmp);",
          "2193:     model->u.group = (*tmp);",
          "",
          "[Added Lines]",
          "2191:    sdlTypePtr tmp;",
          "2193:    if (ctx->sdl->groups && (tmp = zend_hash_str_find_ptr(ctx->sdl->groups, model->u.group_ref, strlen(model->u.group_ref))) != NULL) {",
          "2194:     schema_type_fixup(ctx, tmp);",
          "2197:     model->u.group = tmp;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2198:   }",
          "2199:   case XSD_CONTENT_CHOICE: {",
          "2200:    if (model->max_occurs != 1) {",
          "2211:     model->kind = XSD_CONTENT_ALL;",
          "2212:     model->min_occurs = 1;",
          "",
          "[Removed Lines]",
          "2201:     HashPosition pos;",
          "2202:     sdlContentModelPtr *tmp;",
          "2204:     zend_hash_internal_pointer_reset_ex(model->u.content, &pos);",
          "2205:     while (zend_hash_get_current_data_ex(model->u.content, (void**)&tmp, &pos) == SUCCESS) {",
          "2206:      (*tmp)->min_occurs = 0;",
          "2207:      (*tmp)->max_occurs = model->max_occurs;",
          "2208:      zend_hash_move_forward_ex(model->u.content, &pos);",
          "2209:     }",
          "",
          "[Added Lines]",
          "2205:     sdlContentModelPtr tmp;",
          "2207:     ZEND_HASH_FOREACH_PTR(model->u.content, tmp) {",
          "2208:      tmp->min_occurs = 0;",
          "2209:      tmp->max_occurs = model->max_occurs;",
          "2210:     } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2215:   }",
          "2216:   case XSD_CONTENT_SEQUENCE:",
          "2217:   case XSD_CONTENT_ALL: {",
          "2225:    break;",
          "2226:   }",
          "2227:   default:",
          "",
          "[Removed Lines]",
          "2218:    sdlContentModelPtr *tmp;",
          "2220:    zend_hash_internal_pointer_reset(model->u.content);",
          "2221:    while (zend_hash_get_current_data(model->u.content, (void**)&tmp) == SUCCESS) {",
          "2222:     schema_content_model_fixup(ctx, *tmp);",
          "2223:     zend_hash_move_forward(model->u.content);",
          "2224:    }",
          "",
          "[Added Lines]",
          "2219:    sdlContentModelPtr tmp;",
          "2221:    ZEND_HASH_FOREACH_PTR(model->u.content, tmp) {",
          "2222:     schema_content_model_fixup(ctx, tmp);",
          "2223:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2232: static void schema_type_fixup(sdlCtx *ctx, sdlTypePtr type)",
          "2233: {",
          "2237:  if (type->ref != NULL) {",
          "2238:   if (ctx->sdl->elements != NULL) {",
          "2240:    if (tmp) {",
          "2244:       type->nillable = 1;",
          "2245:     }",
          "2248:     }",
          "2251:     }",
          "2253:    } else if (strcmp(type->ref, SCHEMA_NAMESPACE \":schema\") == 0) {",
          "2254:     type->encode = get_conversion(XSD_ANYXML);",
          "2255:    } else {",
          "",
          "[Removed Lines]",
          "2234:  sdlTypePtr *tmp;",
          "2235:  sdlAttributePtr *attr;",
          "2239:    tmp = (sdlTypePtr*)schema_find_by_ref(ctx->sdl->elements, type->ref);",
          "2241:     type->kind = (*tmp)->kind;",
          "2242:     type->encode = (*tmp)->encode;",
          "2243:     if ((*tmp)->nillable) {",
          "2246:     if ((*tmp)->fixed) {",
          "2247:       type->fixed = estrdup((*tmp)->fixed);",
          "2249:     if ((*tmp)->def) {",
          "2250:       type->def = estrdup((*tmp)->def);",
          "2252:     type->form = (*tmp)->form;",
          "",
          "[Added Lines]",
          "2233:  sdlTypePtr tmp;",
          "2234:  sdlAttributePtr attr;",
          "2238:    tmp = (sdlTypePtr)schema_find_by_ref(ctx->sdl->elements, type->ref);",
          "2240:     type->kind = tmp->kind;",
          "2241:     type->encode = tmp->encode;",
          "2242:     if (tmp->nillable) {",
          "2245:     if (tmp->fixed) {",
          "2246:       type->fixed = estrdup(tmp->fixed);",
          "2248:     if (tmp->def) {",
          "2249:       type->def = estrdup(tmp->def);",
          "2251:     type->form = tmp->form;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2260:   type->ref = NULL;",
          "2261:  }",
          "2262:  if (type->elements) {",
          "2268:  }",
          "2269:  if (type->model) {",
          "2270:   schema_content_model_fixup(ctx, type->model);",
          "2271:  }",
          "2272:  if (type->attributes) {",
          "2277:     zend_hash_move_forward(type->attributes);",
          "2278:    } else {",
          "2283:     zend_hash_index_del(type->attributes, index);",
          "2284:    }",
          "2286:  }",
          "2287: }",
          "2289: void schema_pass2(sdlCtx *ctx)",
          "2290: {",
          "2291:  sdlPtr sdl = ctx->sdl;",
          "2295:  if (ctx->attributes) {",
          "2301:  }",
          "2302:  if (ctx->attributeGroups) {",
          "2308:  }",
          "2309:  if (sdl->elements) {",
          "2315:  }",
          "2316:  if (sdl->groups) {",
          "2322:  }",
          "2323:  if (sdl->types) {",
          "2329:  }",
          "2330:  if (ctx->attributes) {",
          "2331:   zend_hash_destroy(ctx->attributes);",
          "",
          "[Removed Lines]",
          "2263:   zend_hash_internal_pointer_reset(type->elements);",
          "2264:   while (zend_hash_get_current_data(type->elements,(void**)&tmp) == SUCCESS) {",
          "2265:    schema_type_fixup(ctx,*tmp);",
          "2266:    zend_hash_move_forward(type->elements);",
          "2267:   }",
          "2273:   zend_hash_internal_pointer_reset(type->attributes);",
          "2274:   while (zend_hash_get_current_data(type->attributes,(void**)&attr) == SUCCESS) {",
          "2275:    if (zend_hash_get_current_key_type(type->attributes) == HASH_KEY_IS_STRING) {",
          "2276:     schema_attribute_fixup(ctx,*attr);",
          "2279:     ulong index;",
          "2281:     schema_attributegroup_fixup(ctx,*attr,type->attributes);",
          "2282:     zend_hash_get_current_key(type->attributes, NULL, &index, 0);",
          "2285:   }",
          "2292:  sdlAttributePtr *attr;",
          "2293:  sdlTypePtr *type;",
          "2296:   zend_hash_internal_pointer_reset(ctx->attributes);",
          "2297:   while (zend_hash_get_current_data(ctx->attributes,(void**)&attr) == SUCCESS) {",
          "2298:    schema_attribute_fixup(ctx,*attr);",
          "2299:    zend_hash_move_forward(ctx->attributes);",
          "2300:   }",
          "2303:   zend_hash_internal_pointer_reset(ctx->attributeGroups);",
          "2304:   while (zend_hash_get_current_data(ctx->attributeGroups,(void**)&type) == SUCCESS) {",
          "2305:    schema_type_fixup(ctx,*type);",
          "2306:    zend_hash_move_forward(ctx->attributeGroups);",
          "2307:   }",
          "2310:   zend_hash_internal_pointer_reset(sdl->elements);",
          "2311:   while (zend_hash_get_current_data(sdl->elements,(void**)&type) == SUCCESS) {",
          "2312:    schema_type_fixup(ctx,*type);",
          "2313:    zend_hash_move_forward(sdl->elements);",
          "2314:   }",
          "2317:   zend_hash_internal_pointer_reset(sdl->groups);",
          "2318:   while (zend_hash_get_current_data(sdl->groups,(void**)&type) == SUCCESS) {",
          "2319:    schema_type_fixup(ctx,*type);",
          "2320:    zend_hash_move_forward(sdl->groups);",
          "2321:   }",
          "2324:   zend_hash_internal_pointer_reset(sdl->types);",
          "2325:   while (zend_hash_get_current_data(sdl->types,(void**)&type) == SUCCESS) {",
          "2326:    schema_type_fixup(ctx,*type);",
          "2327:    zend_hash_move_forward(sdl->types);",
          "2328:   }",
          "",
          "[Added Lines]",
          "2262:   ZEND_HASH_FOREACH_PTR(type->elements, tmp) {",
          "2263:    schema_type_fixup(ctx, tmp);",
          "2264:   } ZEND_HASH_FOREACH_END();",
          "2270:   zend_string *str_key;",
          "2271:   ulong index;",
          "2273:   ZEND_HASH_FOREACH_KEY_PTR(type->attributes, index, str_key, attr) {",
          "2274:    if (str_key) {",
          "2275:     schema_attribute_fixup(ctx, attr);",
          "2278:     schema_attributegroup_fixup(ctx, attr, type->attributes);",
          "2281:   } ZEND_HASH_FOREACH_END();",
          "2288:  sdlAttributePtr attr;",
          "2289:  sdlTypePtr type;",
          "2292:   ZEND_HASH_FOREACH_PTR(ctx->attributes, attr) {",
          "2293:    schema_attribute_fixup(ctx, attr);",
          "2294:   } ZEND_HASH_FOREACH_END();",
          "2297:   ZEND_HASH_FOREACH_PTR(ctx->attributeGroups, type) {",
          "2298:    schema_type_fixup(ctx, type);",
          "2299:   } ZEND_HASH_FOREACH_END();",
          "2302:   ZEND_HASH_FOREACH_PTR(sdl->elements, type) {",
          "2303:    schema_type_fixup(ctx, type);",
          "2304:   } ZEND_HASH_FOREACH_END();",
          "2307:   ZEND_HASH_FOREACH_PTR(sdl->groups, type) {",
          "2308:    schema_type_fixup(ctx, type);",
          "2309:   } ZEND_HASH_FOREACH_END();",
          "2312:   ZEND_HASH_FOREACH_PTR(sdl->types, type) {",
          "2313:    schema_type_fixup(ctx, type);",
          "2314:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2337:  }",
          "2338: }",
          "2341: {",
          "2343:  switch (tmp->kind) {",
          "2344:   case XSD_CONTENT_ELEMENT:",
          "2345:   case XSD_CONTENT_GROUP:",
          "",
          "[Removed Lines]",
          "2340: void delete_model(void *handle)",
          "2342:  sdlContentModelPtr tmp = *((sdlContentModelPtr*)handle);",
          "",
          "[Added Lines]",
          "2326: void delete_model(zval *zv)",
          "2328:  sdlContentModelPtr tmp = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2359:  efree(tmp);",
          "2360: }",
          "2363: {",
          "2365:  switch (tmp->kind) {",
          "2366:   case XSD_CONTENT_ELEMENT:",
          "2367:   case XSD_CONTENT_GROUP:",
          "",
          "[Removed Lines]",
          "2362: void delete_model_persistent(void *handle)",
          "2364:  sdlContentModelPtr tmp = *((sdlContentModelPtr*)handle);",
          "",
          "[Added Lines]",
          "2348: static void delete_model_persistent_int(sdlContentModelPtr tmp)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2381:  free(tmp);",
          "2382: }",
          "2385: {",
          "2388:  if (type->name) {",
          "2389:   efree(type->name);",
          "",
          "[Removed Lines]",
          "2384: void delete_type(void *data)",
          "2386:  sdlTypePtr type = *((sdlTypePtr*)data);",
          "",
          "[Added Lines]",
          "2369: void delete_model_persistent(zval *zv)",
          "2370: {",
          "2371:  delete_model_persistent_int(Z_PTR_P(zv));",
          "2372: }",
          "2374: void delete_type(zval *zv)",
          "2376:  sdlTypePtr type = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2406:   efree(type->attributes);",
          "2407:  }",
          "2408:  if (type->model) {",
          "2410:  }",
          "2411:  if (type->restrictions) {",
          "2423:   if (type->restrictions->enumeration) {",
          "2424:    zend_hash_destroy(type->restrictions->enumeration);",
          "2425:    efree(type->restrictions->enumeration);",
          "",
          "[Removed Lines]",
          "2409:   delete_model((void**)&type->model);",
          "2412:   delete_restriction_var_int(&type->restrictions->minExclusive);",
          "2413:   delete_restriction_var_int(&type->restrictions->minInclusive);",
          "2414:   delete_restriction_var_int(&type->restrictions->maxExclusive);",
          "2415:   delete_restriction_var_int(&type->restrictions->maxInclusive);",
          "2416:   delete_restriction_var_int(&type->restrictions->totalDigits);",
          "2417:   delete_restriction_var_int(&type->restrictions->fractionDigits);",
          "2418:   delete_restriction_var_int(&type->restrictions->length);",
          "2419:   delete_restriction_var_int(&type->restrictions->minLength);",
          "2420:   delete_restriction_var_int(&type->restrictions->maxLength);",
          "2421:   delete_restriction_var_char(&type->restrictions->whiteSpace);",
          "2422:   delete_restriction_var_char(&type->restrictions->pattern);",
          "",
          "[Added Lines]",
          "2399:   zval zv;",
          "2400:   ZVAL_PTR(&zv, type->model);",
          "2401:   delete_model(&zv);",
          "2404:   delete_restriction_var_int(type->restrictions->minExclusive);",
          "2405:   delete_restriction_var_int(type->restrictions->minInclusive);",
          "2406:   delete_restriction_var_int(type->restrictions->maxExclusive);",
          "2407:   delete_restriction_var_int(type->restrictions->maxInclusive);",
          "2408:   delete_restriction_var_int(type->restrictions->totalDigits);",
          "2409:   delete_restriction_var_int(type->restrictions->fractionDigits);",
          "2410:   delete_restriction_var_int(type->restrictions->length);",
          "2411:   delete_restriction_var_int(type->restrictions->minLength);",
          "2412:   delete_restriction_var_int(type->restrictions->maxLength);",
          "2413:   delete_restriction_var_char_int(type->restrictions->whiteSpace);",
          "2414:   delete_restriction_var_char_int(type->restrictions->pattern);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2429:  efree(type);",
          "2430: }",
          "2433: {",
          "2435:  if (type->name) {",
          "2436:   free(type->name);",
          "2437:  }",
          "",
          "[Removed Lines]",
          "2432: void delete_type_persistent(void *data)",
          "2434:  sdlTypePtr type = *((sdlTypePtr*)data);",
          "",
          "[Added Lines]",
          "2424: void delete_type_persistent(zval *zv)",
          "2426:  sdlTypePtr type = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2453:   free(type->attributes);",
          "2454:  }",
          "2455:  if (type->model) {",
          "2457:  }",
          "2458:  if (type->restrictions) {",
          "2470:   if (type->restrictions->enumeration) {",
          "2471:    zend_hash_destroy(type->restrictions->enumeration);",
          "2472:    free(type->restrictions->enumeration);",
          "",
          "[Removed Lines]",
          "2456:   delete_model_persistent((void**)&type->model);",
          "2459:   delete_restriction_var_int_persistent(&type->restrictions->minExclusive);",
          "2460:   delete_restriction_var_int_persistent(&type->restrictions->minInclusive);",
          "2461:   delete_restriction_var_int_persistent(&type->restrictions->maxExclusive);",
          "2462:   delete_restriction_var_int_persistent(&type->restrictions->maxInclusive);",
          "2463:   delete_restriction_var_int_persistent(&type->restrictions->totalDigits);",
          "2464:   delete_restriction_var_int_persistent(&type->restrictions->fractionDigits);",
          "2465:   delete_restriction_var_int_persistent(&type->restrictions->length);",
          "2466:   delete_restriction_var_int_persistent(&type->restrictions->minLength);",
          "2467:   delete_restriction_var_int_persistent(&type->restrictions->maxLength);",
          "2468:   delete_restriction_var_char_persistent(&type->restrictions->whiteSpace);",
          "2469:   delete_restriction_var_char_persistent(&type->restrictions->pattern);",
          "",
          "[Added Lines]",
          "2448:   delete_model_persistent_int(type->model);",
          "2451:   delete_restriction_var_int_persistent(type->restrictions->minExclusive);",
          "2452:   delete_restriction_var_int_persistent(type->restrictions->minInclusive);",
          "2453:   delete_restriction_var_int_persistent(type->restrictions->maxExclusive);",
          "2454:   delete_restriction_var_int_persistent(type->restrictions->maxInclusive);",
          "2455:   delete_restriction_var_int_persistent(type->restrictions->totalDigits);",
          "2456:   delete_restriction_var_int_persistent(type->restrictions->fractionDigits);",
          "2457:   delete_restriction_var_int_persistent(type->restrictions->length);",
          "2458:   delete_restriction_var_int_persistent(type->restrictions->minLength);",
          "2459:   delete_restriction_var_int_persistent(type->restrictions->maxLength);",
          "2460:   delete_restriction_var_char_persistent_int(type->restrictions->whiteSpace);",
          "2461:   delete_restriction_var_char_persistent_int(type->restrictions->pattern);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2476:  free(type);",
          "2477: }",
          "2480: {",
          "2483:  if (attr->ns) {",
          "2484:   efree(attr->ns);",
          "",
          "[Removed Lines]",
          "2479: void delete_extra_attribute(void *attribute)",
          "2481:  sdlExtraAttributePtr attr = *((sdlExtraAttributePtr*)attribute);",
          "",
          "[Added Lines]",
          "2471: void delete_extra_attribute(zval *zv)",
          "2473:  sdlExtraAttributePtr attr = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2489:  efree(attr);",
          "2490: }",
          "2493: {",
          "2496:  if (attr->ns) {",
          "2497:   free(attr->ns);",
          "",
          "[Removed Lines]",
          "2492: void delete_extra_attribute_persistent(void *attribute)",
          "2494:  sdlExtraAttributePtr attr = *((sdlExtraAttributePtr*)attribute);",
          "",
          "[Added Lines]",
          "2484: void delete_extra_attribute_persistent(zval *zv)",
          "2486:  sdlExtraAttributePtr attr = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2502:  free(attr);",
          "2503: }",
          "2506: {",
          "2509:  if (attr->def) {",
          "2510:   efree(attr->def);",
          "",
          "[Removed Lines]",
          "2505: void delete_attribute(void *attribute)",
          "2507:  sdlAttributePtr attr = *((sdlAttributePtr*)attribute);",
          "",
          "[Added Lines]",
          "2497: void delete_attribute(zval *zv)",
          "2499:  sdlAttributePtr attr = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2528:  efree(attr);",
          "2529: }",
          "2532: {",
          "2535:  if (attr->def) {",
          "2536:   free(attr->def);",
          "",
          "[Removed Lines]",
          "2531: void delete_attribute_persistent(void *attribute)",
          "2533:  sdlAttributePtr attr = *((sdlAttributePtr*)attribute);",
          "",
          "[Added Lines]",
          "2523: void delete_attribute_persistent(zval *zv)",
          "2525:  sdlAttributePtr attr = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2554:  free(attr);",
          "2555: }",
          "2558: {",
          "2560:  if (ptr) {",
          "2561:   efree(ptr);",
          "2562:  }",
          "2563: }",
          "2566: {",
          "2568:  if (ptr) {",
          "2569:   free(ptr);",
          "2570:  }",
          "2571: }",
          "2574: {",
          "2576:  if (ptr) {",
          "2577:   if (ptr->value) {",
          "2578:    efree(ptr->value);",
          "",
          "[Removed Lines]",
          "2557: void delete_restriction_var_int(void *rvi)",
          "2559:  sdlRestrictionIntPtr ptr = *((sdlRestrictionIntPtr*)rvi);",
          "2565: void delete_restriction_var_int_persistent(void *rvi)",
          "2567:  sdlRestrictionIntPtr ptr = *((sdlRestrictionIntPtr*)rvi);",
          "2573: void delete_restriction_var_char(void *srvc)",
          "2575:  sdlRestrictionCharPtr ptr = *((sdlRestrictionCharPtr*)srvc);",
          "",
          "[Added Lines]",
          "2549: void delete_restriction_var_int(sdlRestrictionIntPtr ptr)",
          "2556: void delete_restriction_var_int_persistent(sdlRestrictionIntPtr ptr)",
          "2563: void delete_restriction_var_char_int(sdlRestrictionCharPtr ptr)",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2581:  }",
          "2582: }",
          "2585: {",
          "2587:  if (ptr) {",
          "2588:   if (ptr->value) {",
          "2589:    free(ptr->value);",
          "",
          "[Removed Lines]",
          "2584: void delete_restriction_var_char_persistent(void *srvc)",
          "2586:  sdlRestrictionCharPtr ptr = *((sdlRestrictionCharPtr*)srvc);",
          "",
          "[Added Lines]",
          "2573: void delete_restriction_var_char(zval *zv)",
          "2574: {",
          "2575:  delete_restriction_var_char_int(Z_PTR_P(zv));",
          "2576: }",
          "2578: void delete_restriction_var_char_persistent_int(sdlRestrictionCharPtr ptr)",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2591:   free(ptr);",
          "2592:  }",
          "2593: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2588: void delete_restriction_var_char_persistent(zval *zv)",
          "2589: {",
          "2590:  delete_restriction_var_char_persistent_int(Z_PTR_P(zv));",
          "2591: }",
          "",
          "---------------"
        ],
        "ext/soap/php_schema.h||ext/soap/php_schema.h": [
          "File: ext/soap/php_schema.h -> ext/soap/php_schema.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: int load_schema(sdlCtx *ctx, xmlNodePtr schema TSRMLS_DC);",
          "26: void schema_pass2(sdlCtx *ctx);",
          "40: #endif",
          "",
          "[Removed Lines]",
          "28: void delete_model(void *handle);",
          "29: void delete_model_persistent(void *handle);",
          "30: void delete_type(void *data);",
          "31: void delete_type_persistent(void *data);",
          "32: void delete_extra_attribute(void *attribute);",
          "33: void delete_extra_attribute_persistent(void *attribute);",
          "34: void delete_attribute(void *attribute);",
          "35: void delete_attribute_persistent(void *attribute);",
          "36: void delete_restriction_var_int(void *rvi);",
          "37: void delete_restriction_var_int_persistent(void *rvi);",
          "38: void delete_restriction_var_char(void *srvc);",
          "39: void delete_restriction_var_char_persistent(void *srvc);",
          "",
          "[Added Lines]",
          "28: void delete_model(zval *zv);",
          "29: void delete_model_persistent(zval *zv);",
          "30: void delete_type(zval *zv);",
          "31: void delete_type_persistent(zval *zv);",
          "32: void delete_extra_attribute(zval *zv);",
          "33: void delete_extra_attribute_persistent(zval *zv);",
          "34: void delete_attribute(zval *zv);",
          "35: void delete_attribute_persistent(zval *zv);",
          "36: void delete_restriction_var_int(sdlRestrictionIntPtr ptr);",
          "37: void delete_restriction_var_int_persistent(sdlRestrictionIntPtr ptr);",
          "38: void delete_restriction_var_char(zval *zv);",
          "39: void delete_restriction_var_char_int(sdlRestrictionCharPtr ptr);",
          "40: void delete_restriction_var_char_persistent(zval *zv);",
          "41: void delete_restriction_var_char_persistent_int(sdlRestrictionCharPtr ptr);",
          "",
          "---------------"
        ],
        "ext/soap/php_sdl.c||ext/soap/php_sdl.c": [
          "File: ext/soap/php_sdl.c -> ext/soap/php_sdl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: # define O_BINARY 0",
          "35: #endif",
          "49: encodePtr get_encoder_from_prefix(sdlPtr sdl, xmlNodePtr node, const xmlChar *type)",
          "50: {",
          "",
          "[Removed Lines]",
          "37: static void delete_fault(void *fault);",
          "38: static void delete_fault_persistent(void *fault);",
          "39: static void delete_binding(void *binding);",
          "40: static void delete_binding_persistent(void *binding);",
          "41: static void delete_function(void *function);",
          "42: static void delete_function_persistent(void *function);",
          "43: static void delete_parameter(void *parameter);",
          "44: static void delete_parameter_persistent(void *parameter);",
          "45: static void delete_header(void *header);",
          "46: static void delete_header_persistent(void *header);",
          "47: static void delete_document(void *doc_ptr);",
          "",
          "[Added Lines]",
          "37: static void delete_fault(zval *zv);",
          "38: static void delete_fault_persistent(zval *zv);",
          "39: static void delete_binding(zval *zv);",
          "40: static void delete_binding_persistent(zval *zv);",
          "41: static void delete_function(zval *zv);",
          "42: static void delete_function_persistent(zval *zv);",
          "43: static void delete_parameter(zval *zv);",
          "44: static void delete_parameter_persistent(zval *zv);",
          "45: static void delete_header(zval *header);",
          "46: static void delete_header_int(sdlSoapBindingFunctionHeaderPtr hdr);",
          "47: static void delete_header_persistent(zval *zv);",
          "48: static void delete_document(zval *zv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:  if (sdl->elements) {",
          "75:   xmlNsPtr nsptr;",
          "76:   char *ns, *cptype;",
          "79:   parse_namespace(type, &cptype, &ns);",
          "80:   nsptr = xmlSearchNs(node->doc, node, BAD_CAST(ns));",
          "",
          "[Removed Lines]",
          "77:   sdlTypePtr *sdl_type;",
          "",
          "[Added Lines]",
          "78:   sdlTypePtr sdl_type;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:    memcpy(nscat+ns_len+1, cptype, type_len);",
          "90:    nscat[len] = '\\0';",
          "96:    }",
          "97:    efree(nscat);",
          "98:   } else {",
          "101:    }",
          "102:   }",
          "",
          "[Removed Lines]",
          "92:    if (zend_hash_find(sdl->elements, nscat, len + 1, (void **)&sdl_type) == SUCCESS) {",
          "93:     ret = *sdl_type;",
          "94:    } else if (zend_hash_find(sdl->elements, (char*)type, type_len + 1, (void **)&sdl_type) == SUCCESS) {",
          "95:     ret = *sdl_type;",
          "99:    if (zend_hash_find(sdl->elements, (char*)type, xmlStrlen(type) + 1, (void **)&sdl_type) == SUCCESS) {",
          "100:     ret = *sdl_type;",
          "",
          "[Added Lines]",
          "93:    if ((sdl_type = zend_hash_str_find_ptr(sdl->elements, nscat, len)) != NULL) {",
          "94:     ret = sdl_type;",
          "95:    } else if ((sdl_type = zend_hash_str_find_ptr(sdl->elements, (char*)type, type_len)) != NULL) {",
          "96:     ret = sdl_type;",
          "100:    if ((sdl_type = zend_hash_str_find_ptr(sdl->elements, (char*)type, xmlStrlen(type))) != NULL) {",
          "101:     ret = sdl_type;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:     sdl->encoders = pemalloc(sizeof(HashTable), sdl->is_persistent);",
          "157:     zend_hash_init(sdl->encoders, 0, NULL, delete_encoder, sdl->is_persistent);",
          "158:    }",
          "160:    enc = new_enc;",
          "161:   }",
          "162:  }",
          "",
          "[Removed Lines]",
          "159:    zend_hash_update(sdl->encoders, nscat, len + 1, &new_enc, sizeof(encodePtr), NULL);",
          "",
          "[Added Lines]",
          "160:    zend_hash_str_update_ptr(sdl->encoders, nscat, len, new_enc);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "167: encodePtr get_encoder_ex(sdlPtr sdl, const char *nscat, int len)",
          "168: {",
          "170:  TSRMLS_FETCH();",
          "176:  }",
          "177:  return NULL;",
          "178: }",
          "180: sdlBindingPtr get_binding_from_type(sdlPtr sdl, int type)",
          "181: {",
          "184:  if (sdl == NULL) {",
          "185:   return NULL;",
          "186:  }",
          "193:   }",
          "195:  return NULL;",
          "196: }",
          "198: sdlBindingPtr get_binding_from_name(sdlPtr sdl, char *name, char *ns)",
          "199: {",
          "201:  smart_str key = {0};",
          "203:  smart_str_appends(&key, ns);",
          "",
          "[Removed Lines]",
          "169:  encodePtr *enc;",
          "172:  if (zend_hash_find(&SOAP_GLOBAL(defEnc), (char*)nscat, len + 1, (void **)&enc) == SUCCESS) {",
          "173:   return (*enc);",
          "174:  } else if (sdl && sdl->encoders && zend_hash_find(sdl->encoders, (char*)nscat, len + 1, (void **)&enc) == SUCCESS) {",
          "175:   return (*enc);",
          "182:  sdlBindingPtr *binding;",
          "188:  for (zend_hash_internal_pointer_reset(sdl->bindings);",
          "189:   zend_hash_get_current_data(sdl->bindings, (void **) &binding) == SUCCESS;",
          "190:   zend_hash_move_forward(sdl->bindings)) {",
          "191:   if ((*binding)->bindingType == type) {",
          "192:    return *binding;",
          "194:  }",
          "200:  sdlBindingPtr binding = NULL;",
          "",
          "[Added Lines]",
          "170:  encodePtr enc;",
          "173:  if ((enc = zend_hash_str_find_ptr(&SOAP_GLOBAL(defEnc), (char*)nscat, len)) != NULL) {",
          "174:   return enc;",
          "175:  } else if (sdl && sdl->encoders && (enc = zend_hash_str_find_ptr(sdl->encoders, (char*)nscat, len)) != NULL) {",
          "176:   return enc;",
          "183:  sdlBindingPtr binding;",
          "189:  ZEND_HASH_FOREACH_PTR(sdl->bindings, binding) {",
          "190:   if (binding->bindingType == type) {",
          "191:    return binding;",
          "193:  } ZEND_HASH_FOREACH_END();",
          "199:  sdlBindingPtr binding;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:  smart_str_appends(&key, name);",
          "206:  smart_str_0(&key);",
          "210:  smart_str_free(&key);",
          "211:  return binding;",
          "",
          "[Removed Lines]",
          "208:  zend_hash_find(sdl->bindings, key.c, key.len, (void **)&binding);",
          "",
          "[Added Lines]",
          "207:  binding = zend_hash_find_ptr(sdl->bindings, key.s);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "230: {",
          "231:  char *s;",
          "232:  int l1, l2;",
          "237:  s = strstr(ctx->sdl->source, \"://\");",
          "",
          "[Removed Lines]",
          "233:  zval *context = NULL;",
          "234:  zval **header = NULL;",
          "",
          "[Added Lines]",
          "232:  zval context;",
          "233:  zval *header = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278:  }",
          "279:  if (l1 != l2 || memcmp(ctx->sdl->source, uri, l1) != 0) {",
          "286:    if (ctx->context &&",
          "290:      char *rest = strstr(s, \"\\r\\n\");",
          "291:      if (rest) {",
          "292:       zval new_header;",
          "294:       rest += 2;",
          "302:       php_stream_context_set_option(ctx->context, \"http\", \"header\", &new_header);",
          "303:       zval_dtor(&new_header);",
          "304:      }",
          "",
          "[Removed Lines]",
          "281:   context = php_libxml_switch_context(NULL TSRMLS_CC);",
          "282:   php_libxml_switch_context(context TSRMLS_CC);",
          "283:   if (context) {",
          "284:    ctx->context = php_stream_context_from_zval(context, 1);",
          "287:        php_stream_context_get_option(ctx->context, \"http\", \"header\", &header) == SUCCESS) {",
          "288:     s = strstr(Z_STRVAL_PP(header), \"Authorization: Basic\");",
          "289:     if (s && (s == Z_STRVAL_PP(header) || *(s-1) == '\\n' || *(s-1) == '\\r')) {",
          "295:       Z_TYPE(new_header) = IS_STRING;",
          "296:       Z_STRLEN(new_header) = Z_STRLEN_PP(header) - (rest - s);",
          "297:       Z_STRVAL(new_header) = emalloc(Z_STRLEN_PP(header) + 1);",
          "298:       memcpy(Z_STRVAL(new_header), Z_STRVAL_PP(header), s - Z_STRVAL_PP(header));",
          "299:       memcpy(Z_STRVAL(new_header) + (s - Z_STRVAL_PP(header)), rest, Z_STRLEN_PP(header) - (rest - Z_STRVAL_PP(header)) + 1);",
          "300:       ctx->old_header = *header;",
          "301:       Z_ADDREF_P(ctx->old_header);",
          "",
          "[Added Lines]",
          "280:   php_libxml_switch_context(NULL, &context TSRMLS_CC);",
          "281:   php_libxml_switch_context(&context, NULL TSRMLS_CC);",
          "282:   if (Z_TYPE(context) != IS_UNDEF) {",
          "283:    zval *context_ptr = &context;",
          "284:    ctx->context = php_stream_context_from_zval(context_ptr, 1);",
          "287:        (header = php_stream_context_get_option(ctx->context, \"http\", \"header\")) != NULL) {",
          "288:     s = strstr(Z_STRVAL_P(header), \"Authorization: Basic\");",
          "289:     if (s && (s == Z_STRVAL_P(header) || *(s-1) == '\\n' || *(s-1) == '\\r')) {",
          "295:       ZVAL_STR(&new_header, STR_ALLOC(Z_STRLEN_P(header) - (rest - s), 0));",
          "296:       memcpy(Z_STRVAL(new_header), Z_STRVAL_P(header), s - Z_STRVAL_P(header));",
          "297:       memcpy(Z_STRVAL(new_header) + (s - Z_STRVAL_P(header)), rest, Z_STRLEN_P(header) - (rest - Z_STRVAL_P(header)) + 1);",
          "298:       ZVAL_COPY(&ctx->old_header, header);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "311: void sdl_restore_uri_credentials(sdlCtx *ctx TSRMLS_DC)",
          "312: {",
          "315:      zval_ptr_dtor(&ctx->old_header);",
          "317:  }",
          "318:  ctx->context = NULL;",
          "319: }",
          "",
          "[Removed Lines]",
          "313:  if (ctx->old_header) {",
          "314:      php_stream_context_set_option(ctx->context, \"http\", \"header\", ctx->old_header);",
          "316:   ctx->old_header = NULL;",
          "",
          "[Added Lines]",
          "310:  if (Z_TYPE(ctx->old_header) != IS_UNDEF) {",
          "311:      php_stream_context_set_option(ctx->context, \"http\", \"header\", &ctx->old_header);",
          "313:   ZVAL_UNDEF(&ctx->old_header);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "325:  xmlNodePtr root, definitions, trav;",
          "326:  xmlAttrPtr targetNamespace;",
          "329:   return;",
          "330:  }",
          "",
          "[Removed Lines]",
          "328:  if (zend_hash_exists(&ctx->docs, struri, strlen(struri)+1)) {",
          "",
          "[Added Lines]",
          "325:  if (zend_hash_str_exists(&ctx->docs, struri, strlen(struri))) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "343:   }",
          "344:  }",
          "348:  root = wsdl->children;",
          "349:  definitions = get_node_ex(root, \"definitions\", WSDL_NAMESPACE);",
          "",
          "[Removed Lines]",
          "346:  zend_hash_add(&ctx->docs, struri, strlen(struri)+1, (void**)&wsdl, sizeof(xmlDocPtr), NULL);",
          "",
          "[Added Lines]",
          "343:  zend_hash_str_add_ptr(&ctx->docs, struri, strlen(struri), wsdl);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "403:   } else if (node_is_equal(trav,\"message\")) {",
          "404:    xmlAttrPtr name = get_attribute(trav->properties, \"name\");",
          "405:    if (name && name->children && name->children->content) {",
          "407:      soap_error1(E_ERROR, \"Parsing WSDL: <message> '%s' already defined\", name->children->content);",
          "408:     }",
          "409:    } else {",
          "",
          "[Removed Lines]",
          "406:     if (zend_hash_add(&ctx->messages, (char*)name->children->content, xmlStrlen(name->children->content)+1,&trav, sizeof(xmlNodePtr), NULL) != SUCCESS) {",
          "",
          "[Added Lines]",
          "403:     if (zend_hash_str_add_ptr(&ctx->messages, (char*)name->children->content, xmlStrlen(name->children->content), trav) == NULL) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "413:   } else if (node_is_equal(trav,\"portType\")) {",
          "414:    xmlAttrPtr name = get_attribute(trav->properties, \"name\");",
          "415:    if (name && name->children && name->children->content) {",
          "417:      soap_error1(E_ERROR, \"Parsing WSDL: <portType> '%s' already defined\", name->children->content);",
          "418:     }",
          "419:    } else {",
          "",
          "[Removed Lines]",
          "416:     if (zend_hash_add(&ctx->portTypes, (char*)name->children->content, xmlStrlen(name->children->content)+1,&trav, sizeof(xmlNodePtr), NULL) != SUCCESS) {",
          "",
          "[Added Lines]",
          "413:     if (zend_hash_str_add_ptr(&ctx->portTypes, (char*)name->children->content, xmlStrlen(name->children->content), trav) == NULL) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "423:   } else if (node_is_equal(trav,\"binding\")) {",
          "424:    xmlAttrPtr name = get_attribute(trav->properties, \"name\");",
          "425:    if (name && name->children && name->children->content) {",
          "427:      soap_error1(E_ERROR, \"Parsing WSDL: <binding> '%s' already defined\", name->children->content);",
          "428:     }",
          "429:    } else {",
          "",
          "[Removed Lines]",
          "426:     if (zend_hash_add(&ctx->bindings, (char*)name->children->content, xmlStrlen(name->children->content)+1,&trav, sizeof(xmlNodePtr), NULL) != SUCCESS) {",
          "",
          "[Added Lines]",
          "423:     if (zend_hash_str_add_ptr(&ctx->bindings, (char*)name->children->content, xmlStrlen(name->children->content), trav) == NULL) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "433:   } else if (node_is_equal(trav,\"service\")) {",
          "434:    xmlAttrPtr name = get_attribute(trav->properties, \"name\");",
          "435:    if (name && name->children && name->children->content) {",
          "437:      soap_error1(E_ERROR, \"Parsing WSDL: <service> '%s' already defined\", name->children->content);",
          "438:     }",
          "439:    } else {",
          "",
          "[Removed Lines]",
          "436:     if (zend_hash_add(&ctx->services, (char*)name->children->content, xmlStrlen(name->children->content)+1,&trav, sizeof(xmlNodePtr), NULL) != SUCCESS) {",
          "",
          "[Added Lines]",
          "433:     if (zend_hash_str_add_ptr(&ctx->services, (char*)name->children->content, xmlStrlen(name->children->content), trav) == NULL) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "464:  } else {",
          "465:   ++ctype;",
          "466:  }",
          "468:   soap_error1(E_ERROR, \"Parsing WSDL: Missing <message> with name '%s'\", tmp->children->content);",
          "469:  }",
          "",
          "[Removed Lines]",
          "467:  if (zend_hash_find(&ctx->messages, ctype, strlen(ctype)+1, (void**)&message) != SUCCESS) {",
          "",
          "[Added Lines]",
          "464:  if ((message = zend_hash_str_find_ptr(&ctx->messages, ctype, strlen(ctype))) == NULL) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "545:     }",
          "546:     smart_str_appends(&key,hf->name);",
          "547:     smart_str_0(&key);",
          "550:     }",
          "551:     smart_str_free(&key);",
          "552:    } else if (is_wsdl_element(trav) && !node_is_equal(trav,\"documentation\")) {",
          "",
          "[Removed Lines]",
          "548:     if (zend_hash_add(h->headerfaults, key.c, key.len+1, (void**)&hf, sizeof(sdlSoapBindingFunctionHeaderPtr), NULL) != SUCCESS) {",
          "549:      delete_header((void**)&hf);",
          "",
          "[Added Lines]",
          "545:     if (zend_hash_add_ptr(h->headerfaults, key.s, hf) == NULL) {",
          "546:      delete_header_int(hf);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "589:     zend_hash_init(&ht, 0, NULL, delete_parameter, 0);",
          "590:     while (*parts) {",
          "593:      int found = 0;",
          "594:      char *end;",
          "",
          "[Removed Lines]",
          "591:      HashPosition pos;",
          "592:      sdlParamPtr *param;",
          "",
          "[Added Lines]",
          "588:      sdlParamPtr param;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "597:      if (*parts == '\\0') break;",
          "598:      end = strchr(parts, ' ');",
          "599:      if (end) *end = '\\0';",
          "604:         sdlParamPtr x_param;",
          "605:         x_param = emalloc(sizeof(sdlParam));",
          "609:         found = 1;",
          "610:         break;",
          "611:       }",
          "614:      if (!found) {",
          "615:       soap_error1(E_ERROR, \"Parsing WSDL: Missing part '%s' in <message>\", parts);",
          "616:      }",
          "",
          "[Removed Lines]",
          "600:      zend_hash_internal_pointer_reset_ex(params, &pos);",
          "601:      while (zend_hash_get_current_data_ex(params, (void **)&param, &pos) != FAILURE) {",
          "602:       if ((*param)->paramName &&",
          "603:           strcmp(parts, (*param)->paramName) == 0) {",
          "607:         (*param)->paramName = NULL;",
          "608:         zend_hash_next_index_insert(&ht, &x_param, sizeof(sdlParamPtr), NULL);",
          "612:       zend_hash_move_forward_ex(params, &pos);",
          "613:      }",
          "",
          "[Added Lines]",
          "596:      ZEND_HASH_FOREACH_PTR(params, param) {",
          "597:       if (param->paramName &&",
          "598:           strcmp(parts, param->paramName) == 0) {",
          "602:         param->paramName = NULL;",
          "603:         zend_hash_next_index_insert_ptr(&ht, x_param);",
          "607:      } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "650:    }",
          "651:    smart_str_appends(&key,h->name);",
          "652:    smart_str_0(&key);",
          "655:    }",
          "656:    smart_str_free(&key);",
          "657:   } else if (is_wsdl_element(trav) && !node_is_equal(trav,\"documentation\")) {",
          "",
          "[Removed Lines]",
          "653:    if (zend_hash_add(binding->headers, key.c, key.len+1, (void**)&h, sizeof(sdlSoapBindingFunctionHeaderPtr), NULL) != SUCCESS) {",
          "654:     delete_header((void**)&h);",
          "",
          "[Added Lines]",
          "647:    if (zend_hash_add_ptr(binding->headers, key.s, h) == NULL) {",
          "648:     delete_header_int(h);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "664: static HashTable* wsdl_message(sdlCtx *ctx, xmlChar* message_name)",
          "665: {",
          "667:  HashTable* parameters = NULL;",
          "668:  char *ctype;",
          "",
          "[Removed Lines]",
          "666:  xmlNodePtr trav, part, message = NULL, *tmp;",
          "",
          "[Added Lines]",
          "660:  xmlNodePtr trav, part, message = NULL, tmp;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "673:  } else {",
          "674:   ++ctype;",
          "675:  }",
          "677:   soap_error1(E_ERROR, \"Parsing WSDL: Missing <message> with name '%s'\", message_name);",
          "678:  }",
          "681:  parameters = emalloc(sizeof(HashTable));",
          "682:  zend_hash_init(parameters, 0, NULL, delete_parameter, 0);",
          "",
          "[Removed Lines]",
          "676:  if (zend_hash_find(&ctx->messages, ctype, strlen(ctype)+1, (void**)&tmp) != SUCCESS) {",
          "679:  message = *tmp;",
          "",
          "[Added Lines]",
          "670:  if ((tmp = zend_hash_str_find_ptr(&ctx->messages, ctype, strlen(ctype))) == NULL) {",
          "673:  message = tmp;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "721:    }",
          "722:   }",
          "726:   trav = trav->next;",
          "727:  }",
          "",
          "[Removed Lines]",
          "724:   zend_hash_next_index_insert(parameters, &param, sizeof(sdlParamPtr), NULL);",
          "",
          "[Added Lines]",
          "718:   zend_hash_next_index_insert_ptr(parameters, param);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "752:  if (n > 0) {",
          "753:   zend_hash_internal_pointer_reset(&ctx.services);",
          "754:   for (i = 0; i < n; i++) {",
          "756:    xmlNodePtr trav, port;",
          "757:    int has_soap_port = 0;",
          "762:    trav = service->children;",
          "763:    while (trav != NULL) {",
          "",
          "[Removed Lines]",
          "755:    xmlNodePtr *tmp, service;",
          "759:    zend_hash_get_current_data(&ctx.services, (void **)&tmp);",
          "760:    service = *tmp;",
          "",
          "[Added Lines]",
          "749:    xmlNodePtr service, tmp;",
          "753:    service = tmp = zend_hash_get_current_data_ptr(&ctx.services);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "840:     } else {",
          "841:      ++ctype;",
          "842:     }",
          "844:      soap_error1(E_ERROR, \"Parsing WSDL: No <binding> element with name '%s'\", ctype);",
          "845:     }",
          "848:     if (tmpbinding->bindingType == BINDING_SOAP) {",
          "849:      sdlSoapBindingPtr soapBinding;",
          "",
          "[Removed Lines]",
          "843:     if (zend_hash_find(&ctx.bindings, ctype, strlen(ctype)+1, (void*)&tmp) != SUCCESS) {",
          "846:     binding = *tmp;",
          "",
          "[Added Lines]",
          "836:     if ((tmp = zend_hash_str_find_ptr(&ctx.bindings, ctype, strlen(ctype))) == NULL) {",
          "839:     binding = tmp;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "895:     } else {",
          "896:      ++ctype;",
          "897:     }",
          "899:      soap_error1(E_ERROR, \"Parsing WSDL: Missing <portType> with name '%s'\", name->children->content);",
          "900:     }",
          "903:     trav2 = binding->children;",
          "904:     while (trav2 != NULL) {",
          "",
          "[Removed Lines]",
          "898:     if (zend_hash_find(&ctx.portTypes, ctype, strlen(ctype)+1, (void**)&tmp) != SUCCESS) {",
          "901:     portType = *tmp;",
          "",
          "[Added Lines]",
          "891:     if ((tmp = zend_hash_str_find_ptr(&ctx.portTypes, ctype, strlen(ctype))) == NULL) {",
          "894:     portType = tmp;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1121:         function->faults = emalloc(sizeof(HashTable));",
          "1122:         zend_hash_init(function->faults, 0, NULL, delete_fault, 0);",
          "1123:        }",
          "1125:         soap_error2(E_ERROR, \"Parsing WSDL: <fault> with name '%s' already defined in '%s'\", f->name, op_name->children->content);",
          "1126:        }",
          "1127:       }",
          "",
          "[Removed Lines]",
          "1124:        if (zend_hash_add(function->faults, f->name, strlen(f->name)+1, (void**)&f, sizeof(sdlFaultPtr), NULL) != SUCCESS) {",
          "",
          "[Added Lines]",
          "1117:        if (zend_hash_str_add_ptr(function->faults, f->name, strlen(f->name), f) == NULL) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1134:       char *tmp = estrdup(function->functionName);",
          "1135:       int  len = strlen(tmp);",
          "1139:       }",
          "1140:       efree(tmp);",
          "1141:       if (function->requestName != NULL && strcmp(function->requestName,function->functionName) != 0) {",
          "",
          "[Removed Lines]",
          "1137:       if (zend_hash_add(&ctx.sdl->functions, php_strtolower(tmp, len), len+1, &function, sizeof(sdlFunctionPtr), NULL) != SUCCESS) {",
          "1138:        zend_hash_next_index_insert(&ctx.sdl->functions, &function, sizeof(sdlFunctionPtr), NULL);",
          "",
          "[Added Lines]",
          "1130:       if (zend_hash_str_add_ptr(&ctx.sdl->functions, php_strtolower(tmp, len), len, function) == NULL) {",
          "1131:        zend_hash_next_index_insert_ptr(&ctx.sdl->functions, function);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1145:        }",
          "1146:        tmp = estrdup(function->requestName);",
          "1147:        len = strlen(tmp);",
          "1149:        efree(tmp);",
          "1150:       }",
          "1151:      }",
          "",
          "[Removed Lines]",
          "1148:        zend_hash_add(ctx.sdl->requests, php_strtolower(tmp, len), len+1, &function, sizeof(sdlFunctionPtr), NULL);",
          "",
          "[Added Lines]",
          "1141:        zend_hash_str_add_ptr(ctx.sdl->requests, php_strtolower(tmp, len), len, function);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1157:      zend_hash_init(ctx.sdl->bindings, 0, NULL, delete_binding, 0);",
          "1158:     }",
          "1161:     trav= trav->next;",
          "1162:    }",
          "",
          "[Removed Lines]",
          "1160:     zend_hash_add(ctx.sdl->bindings, tmpbinding->name, strlen(tmpbinding->name), &tmpbinding, sizeof(sdlBindingPtr), NULL);",
          "",
          "[Added Lines]",
          "1153:     zend_hash_str_add_ptr(ctx.sdl->bindings, tmpbinding->name, strlen(tmpbinding->name), tmpbinding);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1218:  WSDL_CACHE_GET_INT(len, in);",
          "1219:  if (len == 0) {",
          "1221:  } else {",
          "1223:   WSDL_CACHE_SKIP(len, in);",
          "1224:  }",
          "1225: }",
          "",
          "[Removed Lines]",
          "1220:   zend_hash_next_index_insert(ht, &data, sizeof(void*), NULL);",
          "1222:   zend_hash_add(ht, *in, len, &data, sizeof(void*), NULL);",
          "",
          "[Added Lines]",
          "1213:   zend_hash_next_index_insert_ptr(ht, data);",
          "1215:   zend_hash_str_add_ptr(ht, *in, len, data);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1300:    zend_hash_init(model->u.content, i, NULL, delete_model, 0);",
          "1301:    while (i > 0) {",
          "1302:     sdlContentModelPtr x = sdl_deserialize_model(types, elements, in);",
          "1304:     i--;",
          "1305:    }",
          "1306:    break;",
          "",
          "[Removed Lines]",
          "1303:     zend_hash_next_index_insert(model->u.content,&x,sizeof(sdlContentModelPtr),NULL);",
          "",
          "[Added Lines]",
          "1296:     zend_hash_next_index_insert_ptr(model->u.content, x);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1797:  }",
          "1798: }",
          "1801: {",
          "1809:  } else {",
          "1810:   WSDL_CACHE_PUT_INT(0, out);",
          "1811:  }",
          "",
          "[Removed Lines]",
          "1800: static void sdl_serialize_key(HashTable *ht, smart_str *out)",
          "1802:  char *key;",
          "1803:  uint  key_len;",
          "1804:  ulong index;",
          "1806:  if (zend_hash_get_current_key_ex(ht, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "1807:   WSDL_CACHE_PUT_INT(key_len, out);",
          "1808:   WSDL_CACHE_PUT_N(key, key_len, out);",
          "",
          "[Added Lines]",
          "1794: static void sdl_serialize_key(zend_string *key, smart_str *out)",
          "1796:  if (key) {",
          "1797:   WSDL_CACHE_PUT_INT(key->len, out);",
          "1798:   WSDL_CACHE_PUT_N(key->val, key->len, out);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1814: static void sdl_serialize_encoder_ref(encodePtr enc, HashTable *tmp_encoders, smart_str *out) {",
          "1815:  if (enc) {",
          "1819:   } else {",
          "1820:    WSDL_CACHE_PUT_INT(0, out);",
          "1821:   }",
          "",
          "[Removed Lines]",
          "1816:   int *encoder_num;",
          "1817:   if (zend_hash_find(tmp_encoders, (char*)&enc, sizeof(enc), (void**)&encoder_num) == SUCCESS) {",
          "1818:    WSDL_CACHE_PUT_INT(*encoder_num, out);",
          "",
          "[Added Lines]",
          "1806:   zval *encoder_num;",
          "1807:   if ((encoder_num = zend_hash_str_find(tmp_encoders, (char*)&enc, sizeof(enc))) != 0) {",
          "1808:    WSDL_CACHE_PUT_INT(Z_LVAL_P(encoder_num), out);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1827: static void sdl_serialize_type_ref(sdlTypePtr type, HashTable *tmp_types, smart_str *out) {",
          "1828:  if (type) {",
          "1832:   } else {",
          "1833:    WSDL_CACHE_PUT_INT(0, out);",
          "1834:   }",
          "",
          "[Removed Lines]",
          "1829:   int *type_num;",
          "1830:   if (zend_hash_find(tmp_types, (char*)&type, sizeof(type), (void**)&type_num) == SUCCESS) {",
          "1831:    WSDL_CACHE_PUT_INT(*type_num, out);",
          "",
          "[Added Lines]",
          "1819:   zval *type_num;",
          "1820:   if ((type_num = zend_hash_str_find(tmp_types, (char*)&type, sizeof(type))) != NULL) {",
          "1821:    WSDL_CACHE_PUT_INT(Z_LVAL_P(type_num), out);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1856:  }",
          "1857:  WSDL_CACHE_PUT_INT(i, out);",
          "1858:  if (i > 0) {",
          "1867:  }",
          "1868: }",
          "",
          "[Removed Lines]",
          "1859:   sdlExtraAttributePtr *tmp;",
          "1860:   zend_hash_internal_pointer_reset(attr->extraAttributes);",
          "1861:   while (zend_hash_get_current_data(attr->extraAttributes, (void**)&tmp) == SUCCESS) {",
          "1862:    sdl_serialize_key(attr->extraAttributes, out);",
          "1863:    sdl_serialize_string((*tmp)->ns, out);",
          "1864:    sdl_serialize_string((*tmp)->val, out);",
          "1865:    zend_hash_move_forward(attr->extraAttributes);",
          "1866:   }",
          "",
          "[Added Lines]",
          "1849:   sdlExtraAttributePtr tmp;",
          "1850:   zend_string *key;",
          "1852:   ZEND_HASH_FOREACH_STR_KEY_PTR(attr->extraAttributes, key, tmp) {",
          "1853:    sdl_serialize_key(key, out);",
          "1854:    sdl_serialize_string(tmp->ns, out);",
          "1855:    sdl_serialize_string(tmp->val, out);",
          "1856:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1879:   case XSD_CONTENT_SEQUENCE:",
          "1880:   case XSD_CONTENT_ALL:",
          "1881:   case XSD_CONTENT_CHOICE: {",
          "1883:     int i = zend_hash_num_elements(model->u.content);",
          "1885:     WSDL_CACHE_PUT_INT(i, out);",
          "1891:    }",
          "1892:    break;",
          "1893:   case XSD_CONTENT_GROUP_REF:",
          "",
          "[Removed Lines]",
          "1882:     sdlContentModelPtr *tmp;",
          "1886:     zend_hash_internal_pointer_reset(model->u.content);",
          "1887:     while (zend_hash_get_current_data(model->u.content, (void**)&tmp) == SUCCESS) {",
          "1888:      sdl_serialize_model(*tmp, tmp_types, tmp_elements, out);",
          "1889:      zend_hash_move_forward(model->u.content);",
          "1890:     }",
          "",
          "[Added Lines]",
          "1872:     sdlContentModelPtr tmp;",
          "1876:     ZEND_HASH_FOREACH_PTR(model->u.content, tmp) {",
          "1877:      sdl_serialize_model(tmp, tmp_types, tmp_elements, out);",
          "1878:     } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1958:   }",
          "1959:   WSDL_CACHE_PUT_INT(i, out);",
          "1960:   if (i > 0) {",
          "1969:   }",
          "1970:  } else {",
          "1971:   WSDL_CACHE_PUT_1(0, out);",
          "",
          "[Removed Lines]",
          "1961:    sdlRestrictionCharPtr *tmp;",
          "1963:    zend_hash_internal_pointer_reset(type->restrictions->enumeration);",
          "1964:    while (zend_hash_get_current_data(type->restrictions->enumeration, (void**)&tmp) == SUCCESS) {",
          "1965:     sdl_serialize_resriction_char(*tmp, out);",
          "1966:     sdl_serialize_key(type->restrictions->enumeration, out);",
          "1967:     zend_hash_move_forward(type->restrictions->enumeration);",
          "1968:    }",
          "",
          "[Added Lines]",
          "1949:    sdlRestrictionCharPtr tmp;",
          "1950:    zend_string *key;",
          "1952:    ZEND_HASH_FOREACH_STR_KEY_PTR(type->restrictions->enumeration, key, tmp) {",
          "1953:     sdl_serialize_resriction_char(tmp, out);",
          "1954:     sdl_serialize_key(key, out);",
          "1955:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1977:  }",
          "1978:  WSDL_CACHE_PUT_INT(i, out);",
          "1979:  if (i > 0) {",
          "1982:   tmp_elements = emalloc(sizeof(HashTable));",
          "1983:   zend_hash_init(tmp_elements, i, NULL, NULL, 0);",
          "1990:    i--;",
          "1993:  }",
          "1995:  if (type->attributes) {",
          "",
          "[Removed Lines]",
          "1980:   sdlTypePtr *tmp;",
          "1985:   zend_hash_internal_pointer_reset(type->elements);",
          "1986:   while (zend_hash_get_current_data(type->elements, (void**)&tmp) == SUCCESS) {",
          "1987:    sdl_serialize_key(type->elements, out);",
          "1988:    sdl_serialize_type(*tmp, tmp_encoders, tmp_types, out);",
          "1989:    zend_hash_add(tmp_elements, (char*)tmp, sizeof(*tmp), &i, sizeof(int), NULL);",
          "1991:    zend_hash_move_forward(type->elements);",
          "1992:   }",
          "",
          "[Added Lines]",
          "1967:   sdlTypePtr tmp;",
          "1968:   zend_string *key;",
          "1969:   zval zv;",
          "1974:   ZEND_HASH_FOREACH_STR_KEY_PTR(type->elements, key, tmp) {",
          "1975:    sdl_serialize_key(key, out);",
          "1976:    sdl_serialize_type(tmp, tmp_encoders, tmp_types, out);",
          "1977:    ZVAL_LONG(&zv, i);",
          "1978:    zend_hash_str_add(tmp_elements, (char*)&tmp, sizeof(tmp), &zv);",
          "1980:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1999:  }",
          "2000:  WSDL_CACHE_PUT_INT(i, out);",
          "2001:  if (i > 0) {",
          "2009:  }",
          "2010:  if (type->model) {",
          "2011:   WSDL_CACHE_PUT_1(1, out);",
          "",
          "[Removed Lines]",
          "2002:   sdlAttributePtr *tmp;",
          "2003:   zend_hash_internal_pointer_reset(type->attributes);",
          "2004:   while (zend_hash_get_current_data(type->attributes, (void**)&tmp) == SUCCESS) {",
          "2005:    sdl_serialize_key(type->attributes, out);",
          "2006:    sdl_serialize_attribute(*tmp, tmp_encoders, out);",
          "2007:    zend_hash_move_forward(type->attributes);",
          "2008:   }",
          "",
          "[Added Lines]",
          "1990:   sdlAttributePtr tmp;",
          "1991:   zend_string *key;",
          "1993:   ZEND_HASH_FOREACH_STR_KEY_PTR(type->attributes, key, tmp) {",
          "1994:    sdl_serialize_key(key, out);",
          "1995:    sdl_serialize_attribute(tmp, tmp_encoders, out);",
          "1996:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2038:  }",
          "2039:  WSDL_CACHE_PUT_INT(i, out);",
          "2040:  if (i > 0) {",
          "2052:  }",
          "2053: }",
          "",
          "[Removed Lines]",
          "2041:   sdlParamPtr *tmp;",
          "2043:   zend_hash_internal_pointer_reset(ht);",
          "2044:   while (zend_hash_get_current_data(ht, (void**)&tmp) == SUCCESS) {",
          "2045:    sdl_serialize_key(ht, out);",
          "2046:    sdl_serialize_string((*tmp)->paramName, out);",
          "2047:    WSDL_CACHE_PUT_INT((*tmp)->order, out);",
          "2048:    sdl_serialize_encoder_ref((*tmp)->encode, tmp_encoders, out);",
          "2049:    sdl_serialize_type_ref((*tmp)->element, tmp_types, out);",
          "2050:    zend_hash_move_forward(ht);",
          "2051:   }",
          "",
          "[Added Lines]",
          "2029:   sdlParamPtr tmp;",
          "2030:   zend_string *key;",
          "2032:   ZEND_HASH_FOREACH_STR_KEY_PTR(ht, key, tmp) {",
          "2033:    sdl_serialize_key(key, out);",
          "2034:    sdl_serialize_string(tmp->paramName, out);",
          "2035:    WSDL_CACHE_PUT_INT(tmp->order, out);",
          "2036:    sdl_serialize_encoder_ref(tmp->encode, tmp_encoders, out);",
          "2037:    sdl_serialize_type_ref(tmp->element, tmp_types, out);",
          "2038:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2068:  }",
          "2069:  WSDL_CACHE_PUT_INT(i, out);",
          "2070:  if (i > 0) {",
          "2085:    } else {",
          "2086:     j = 0;",
          "2087:    }",
          "2088:    WSDL_CACHE_PUT_INT(j, out);",
          "2089:    if (j > 0) {",
          "2097:      }",
          "2104:    }",
          "2107:  }",
          "2108: }",
          "",
          "[Removed Lines]",
          "2071:   sdlSoapBindingFunctionHeaderPtr *tmp;",
          "2072:   zend_hash_internal_pointer_reset(body->headers);",
          "2073:   while (zend_hash_get_current_data(body->headers, (void**)&tmp) == SUCCESS) {",
          "2074:    sdl_serialize_key(body->headers, out);",
          "2075:    WSDL_CACHE_PUT_1((*tmp)->use, out);",
          "2076:    if ((*tmp)->use == SOAP_ENCODED) {",
          "2077:     WSDL_CACHE_PUT_1((*tmp)->encodingStyle, out);",
          "2078:    }",
          "2079:    sdl_serialize_string((*tmp)->name, out);",
          "2080:    sdl_serialize_string((*tmp)->ns, out);",
          "2081:    sdl_serialize_encoder_ref((*tmp)->encode, tmp_encoders, out);",
          "2082:    sdl_serialize_type_ref((*tmp)->element, tmp_types, out);",
          "2083:    if ((*tmp)->headerfaults) {",
          "2084:     j = zend_hash_num_elements((*tmp)->headerfaults);",
          "2090:     sdlSoapBindingFunctionHeaderPtr *tmp2;",
          "2091:     zend_hash_internal_pointer_reset((*tmp)->headerfaults);",
          "2092:     while (zend_hash_get_current_data((*tmp)->headerfaults, (void**)&tmp2) == SUCCESS) {",
          "2093:      sdl_serialize_key((*tmp)->headerfaults, out);",
          "2094:      WSDL_CACHE_PUT_1((*tmp2)->use, out);",
          "2095:      if ((*tmp2)->use == SOAP_ENCODED) {",
          "2096:       WSDL_CACHE_PUT_1((*tmp2)->encodingStyle, out);",
          "2098:      sdl_serialize_string((*tmp2)->name, out);",
          "2099:      sdl_serialize_string((*tmp2)->ns, out);",
          "2100:      sdl_serialize_encoder_ref((*tmp2)->encode, tmp_encoders, out);",
          "2101:      sdl_serialize_type_ref((*tmp2)->element, tmp_types, out);",
          "2102:      zend_hash_move_forward((*tmp)->headerfaults);",
          "2103:     }",
          "2105:    zend_hash_move_forward(body->headers);",
          "2106:   }",
          "",
          "[Added Lines]",
          "2058:   sdlSoapBindingFunctionHeaderPtr tmp;",
          "2059:   zend_string *key;",
          "2061:   ZEND_HASH_FOREACH_STR_KEY_PTR(body->headers, key, tmp) {",
          "2062:    sdl_serialize_key(key, out);",
          "2063:    WSDL_CACHE_PUT_1(tmp->use, out);",
          "2064:    if (tmp->use == SOAP_ENCODED) {",
          "2065:     WSDL_CACHE_PUT_1(tmp->encodingStyle, out);",
          "2066:    }",
          "2067:    sdl_serialize_string(tmp->name, out);",
          "2068:    sdl_serialize_string(tmp->ns, out);",
          "2069:    sdl_serialize_encoder_ref(tmp->encode, tmp_encoders, out);",
          "2070:    sdl_serialize_type_ref(tmp->element, tmp_types, out);",
          "2071:    if (tmp->headerfaults) {",
          "2072:     j = zend_hash_num_elements(tmp->headerfaults);",
          "2078:     sdlSoapBindingFunctionHeaderPtr tmp2;",
          "2079:     zend_string *key;",
          "2081:     ZEND_HASH_FOREACH_STR_KEY_PTR(body->headers, key, tmp2) {",
          "2082:      sdl_serialize_key(key, out);",
          "2083:      WSDL_CACHE_PUT_1(tmp2->use, out);",
          "2084:      if (tmp2->use == SOAP_ENCODED) {",
          "2085:       WSDL_CACHE_PUT_1(tmp2->encodingStyle, out);",
          "2087:      sdl_serialize_string(tmp2->name, out);",
          "2088:      sdl_serialize_string(tmp2->ns, out);",
          "2089:      sdl_serialize_encoder_ref(tmp2->encode, tmp_encoders, out);",
          "2090:      sdl_serialize_type_ref(tmp2->element, tmp_types, out);",
          "2091:     } ZEND_HASH_FOREACH_END();",
          "2093:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2149:  }",
          "2150:  WSDL_CACHE_PUT_INT(i, out);",
          "2151:  if (i > 0) {",
          "2157:    ++type_num;",
          "2160:  }",
          "2162:  if (sdl->types) {",
          "",
          "[Removed Lines]",
          "2152:   sdlTypePtr *tmp;",
          "2154:   zend_hash_internal_pointer_reset(sdl->groups);",
          "2155:   while (zend_hash_get_current_data(sdl->groups, (void**)&tmp) == SUCCESS) {",
          "2156:    zend_hash_add(&tmp_types, (char*)tmp, sizeof(*tmp), (void**)&type_num, sizeof(type_num), NULL);",
          "2158:    zend_hash_move_forward(sdl->groups);",
          "2159:   }",
          "",
          "[Added Lines]",
          "2139:   sdlTypePtr tmp;",
          "2140:   zval zv;",
          "2142:   ZEND_HASH_FOREACH_PTR(sdl->groups, tmp) {",
          "2143:    ZVAL_LONG(&zv, type_num);",
          "2144:    zend_hash_str_add(&tmp_types, (char*)&tmp, sizeof(tmp), &zv);",
          "2146:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2166:  }",
          "2167:  WSDL_CACHE_PUT_INT(i, out);",
          "2168:  if (i > 0) {",
          "2174:    ++type_num;",
          "2177:  }",
          "2179:  if (sdl->elements) {",
          "",
          "[Removed Lines]",
          "2169:   sdlTypePtr *tmp;",
          "2171:   zend_hash_internal_pointer_reset(sdl->types);",
          "2172:   while (zend_hash_get_current_data(sdl->types, (void**)&tmp) == SUCCESS) {",
          "2173:    zend_hash_add(&tmp_types, (char*)tmp, sizeof(*tmp), (void**)&type_num, sizeof(type_num), NULL);",
          "2175:    zend_hash_move_forward(sdl->types);",
          "2176:   }",
          "",
          "[Added Lines]",
          "2156:   sdlTypePtr tmp;",
          "2157:   zval zv;",
          "2159:   ZEND_HASH_FOREACH_PTR(sdl->types, tmp) {",
          "2160:    ZVAL_LONG(&zv,  type_num);",
          "2161:    zend_hash_str_add(&tmp_types, (char*)&tmp, sizeof(tmp), &zv);",
          "2163:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2183:  }",
          "2184:  WSDL_CACHE_PUT_INT(i, out);",
          "2185:  if (i > 0) {",
          "2191:    ++type_num;",
          "2194:  }",
          "2196:  if (sdl->encoders) {",
          "",
          "[Removed Lines]",
          "2186:   sdlTypePtr *tmp;",
          "2188:   zend_hash_internal_pointer_reset(sdl->elements);",
          "2189:   while (zend_hash_get_current_data(sdl->elements, (void**)&tmp) == SUCCESS) {",
          "2190:    zend_hash_add(&tmp_types, (char*)tmp, sizeof(*tmp), (void**)&type_num, sizeof(type_num), NULL);",
          "2192:    zend_hash_move_forward(sdl->elements);",
          "2193:   }",
          "",
          "[Added Lines]",
          "2173:   sdlTypePtr tmp;",
          "2174:   zval zv;",
          "2176:   ZEND_HASH_FOREACH_PTR(sdl->elements, tmp) {",
          "2177:    ZVAL_LONG(&zv, type_num);",
          "2178:    zend_hash_str_add(&tmp_types, (char*)&tmp, sizeof(tmp), &zv);",
          "2180:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2200:  }",
          "2201:  WSDL_CACHE_PUT_INT(i, out);",
          "2202:  if (i > 0) {",
          "2208:    ++encoder_num;",
          "2211:  }",
          "2212:  enc = defaultEncoding;",
          "2213:  while (enc->details.type != END_KNOWN_TYPES) {",
          "2215:   enc++;",
          "2216:   ++encoder_num;",
          "2217:  }",
          "2219:  if (sdl->groups) {",
          "2227:  }",
          "2229:  if (sdl->types) {",
          "2237:  }",
          "2239:  if (sdl->elements) {",
          "2247:  }",
          "2249:  if (sdl->encoders) {",
          "2257:  }",
          "",
          "[Removed Lines]",
          "2203:   encodePtr *tmp;",
          "2205:   zend_hash_internal_pointer_reset(sdl->encoders);",
          "2206:   while (zend_hash_get_current_data(sdl->encoders, (void**)&tmp) == SUCCESS) {",
          "2207:    zend_hash_add(&tmp_encoders, (char*)tmp, sizeof(*tmp), (void**)&encoder_num, sizeof(encoder_num), NULL);",
          "2209:    zend_hash_move_forward(sdl->encoders);",
          "2210:   }",
          "2214:   zend_hash_add(&tmp_encoders, (char*)&enc, sizeof(encodePtr), (void**)&encoder_num, sizeof(encoder_num), NULL);",
          "2220:   sdlTypePtr *tmp;",
          "2221:   zend_hash_internal_pointer_reset(sdl->groups);",
          "2222:   while (zend_hash_get_current_data(sdl->groups, (void**)&tmp) == SUCCESS) {",
          "2223:    sdl_serialize_key(sdl->groups, out);",
          "2224:    sdl_serialize_type(*tmp, &tmp_encoders, &tmp_types, out);",
          "2225:    zend_hash_move_forward(sdl->groups);",
          "2226:   }",
          "2230:   sdlTypePtr *tmp;",
          "2231:   zend_hash_internal_pointer_reset(sdl->types);",
          "2232:   while (zend_hash_get_current_data(sdl->types, (void**)&tmp) == SUCCESS) {",
          "2233:    sdl_serialize_key(sdl->types, out);",
          "2234:    sdl_serialize_type(*tmp, &tmp_encoders, &tmp_types, out);",
          "2235:    zend_hash_move_forward(sdl->types);",
          "2236:   }",
          "2240:   sdlTypePtr *tmp;",
          "2241:   zend_hash_internal_pointer_reset(sdl->elements);",
          "2242:   while (zend_hash_get_current_data(sdl->elements, (void**)&tmp) == SUCCESS) {",
          "2243:    sdl_serialize_key(sdl->elements, out);",
          "2244:    sdl_serialize_type(*tmp, &tmp_encoders, &tmp_types, out);",
          "2245:    zend_hash_move_forward(sdl->elements);",
          "2246:   }",
          "2250:   encodePtr *tmp;",
          "2251:   zend_hash_internal_pointer_reset(sdl->encoders);",
          "2252:   while (zend_hash_get_current_data(sdl->encoders, (void**)&tmp) == SUCCESS) {",
          "2253:    sdl_serialize_key(sdl->encoders, out);",
          "2254:    sdl_serialize_encoder(*tmp, &tmp_types, out);",
          "2255:    zend_hash_move_forward(sdl->encoders);",
          "2256:   }",
          "",
          "[Added Lines]",
          "2190:   encodePtr tmp;",
          "2191:   zval zv;",
          "2193:   ZEND_HASH_FOREACH_PTR(sdl->encoders, tmp) {",
          "2194:    ZVAL_LONG(&zv, encoder_num);",
          "2195:    zend_hash_str_add(&tmp_encoders, (char*)&tmp, sizeof(tmp), &zv);",
          "2197:   } ZEND_HASH_FOREACH_END();",
          "2201:   zval zv;",
          "2203:   ZVAL_LONG(&zv, encoder_num);",
          "2204:   zend_hash_str_add(&tmp_encoders, (char*)&enc, sizeof(encodePtr), &zv);",
          "2210:   sdlTypePtr tmp;",
          "2211:   zend_string *key;",
          "2213:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->groups, key, tmp) {",
          "2214:    sdl_serialize_key(key, out);",
          "2215:    sdl_serialize_type(tmp, &tmp_encoders, &tmp_types, out);",
          "2216:   } ZEND_HASH_FOREACH_END();",
          "2220:   sdlTypePtr tmp;",
          "2221:   zend_string *key;",
          "2223:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->types, key, tmp) {",
          "2224:    sdl_serialize_key(key, out);",
          "2225:    sdl_serialize_type(tmp, &tmp_encoders, &tmp_types, out);",
          "2226:   } ZEND_HASH_FOREACH_END();",
          "2230:   sdlTypePtr tmp;",
          "2231:   zend_string *key;",
          "2233:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->elements, key, tmp) {",
          "2234:    sdl_serialize_key(key, out);",
          "2235:    sdl_serialize_type(tmp, &tmp_encoders, &tmp_types, out);",
          "2236:   } ZEND_HASH_FOREACH_END();",
          "2240:   encodePtr tmp;",
          "2241:   zend_string *key;",
          "2243:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->encoders, key, tmp) {",
          "2244:    sdl_serialize_key(key, out);",
          "2245:    sdl_serialize_encoder(tmp, &tmp_types, out);",
          "2246:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2264:  }",
          "2265:  WSDL_CACHE_PUT_INT(i, out);",
          "2266:  if (i > 0) {",
          "2268:   int binding_num = 1;",
          "2278:     WSDL_CACHE_PUT_1(binding->style, out);",
          "2279:     WSDL_CACHE_PUT_1(binding->transport, out);",
          "2280:    } else {",
          "2281:     WSDL_CACHE_PUT_1(0,out);",
          "2282:    }",
          "2285:    binding_num++;",
          "2288:  }",
          "2291:  i = zend_hash_num_elements(&sdl->functions);",
          "2292:  WSDL_CACHE_PUT_INT(i, out);",
          "2293:  if (i > 0) {",
          "2296:   int function_num = 1;",
          "2318:     }",
          "2319:    }",
          "2335:       WSDL_CACHE_PUT_1(binding->use, out);",
          "2336:       if (binding->use == SOAP_ENCODED) {",
          "2337:        WSDL_CACHE_PUT_1(binding->encodingStyle, out);",
          "",
          "[Removed Lines]",
          "2267:   sdlBindingPtr *tmp;",
          "2270:   zend_hash_internal_pointer_reset(sdl->bindings);",
          "2271:   while (zend_hash_get_current_data(sdl->bindings, (void**)&tmp) == SUCCESS) {",
          "2272:    sdl_serialize_key(sdl->bindings, out);",
          "2273:    sdl_serialize_string((*tmp)->name, out);",
          "2274:    sdl_serialize_string((*tmp)->location, out);",
          "2275:    WSDL_CACHE_PUT_1((*tmp)->bindingType,out);",
          "2276:    if ((*tmp)->bindingType == BINDING_SOAP && (*tmp)->bindingAttributes != NULL) {",
          "2277:     sdlSoapBindingPtr binding = (sdlSoapBindingPtr)(*tmp)->bindingAttributes;",
          "2284:    zend_hash_add(&tmp_bindings, (char*)tmp, sizeof(*tmp), (void**)&binding_num, sizeof(binding_num), NULL);",
          "2286:    zend_hash_move_forward(sdl->bindings);",
          "2287:   }",
          "2294:   sdlFunctionPtr *tmp;",
          "2295:   int *binding_num;",
          "2298:   zend_hash_internal_pointer_reset(&sdl->functions);",
          "2299:   while (zend_hash_get_current_data(&sdl->functions, (void**)&tmp) == SUCCESS) {",
          "2300:    sdl_serialize_key(&sdl->functions, out);",
          "2301:    sdl_serialize_string((*tmp)->functionName, out);",
          "2302:    sdl_serialize_string((*tmp)->requestName, out);",
          "2303:    sdl_serialize_string((*tmp)->responseName, out);",
          "2305:    if ((*tmp)->binding == NULL ||",
          "2306:        zend_hash_find(&tmp_bindings,(char*)&(*tmp)->binding,sizeof((*tmp)->binding), (void**)&binding_num) != SUCCESS) {",
          "2307:    }",
          "2308:    WSDL_CACHE_PUT_INT(*binding_num, out);",
          "2309:    if (*binding_num >= 0) {",
          "2310:     if ((*tmp)->binding->bindingType == BINDING_SOAP && (*tmp)->bindingAttributes != NULL) {",
          "2311:      sdlSoapBindingFunctionPtr binding = (sdlSoapBindingFunctionPtr)(*tmp)->bindingAttributes;",
          "2312:      WSDL_CACHE_PUT_1(binding->style, out);",
          "2313:      sdl_serialize_string(binding->soapAction, out);",
          "2314:      sdl_serialize_soap_body(&binding->input, &tmp_encoders, &tmp_types, out);",
          "2315:      sdl_serialize_soap_body(&binding->output, &tmp_encoders, &tmp_types, out);",
          "2316:     } else {",
          "2317:      WSDL_CACHE_PUT_1(0,out);",
          "2320:    sdl_serialize_parameters((*tmp)->requestParameters, &tmp_encoders, &tmp_types, out);",
          "2321:    sdl_serialize_parameters((*tmp)->responseParameters, &tmp_encoders, &tmp_types, out);",
          "2323:    if ((*tmp)->faults) {",
          "2324:     sdlFaultPtr *fault;",
          "2326:     WSDL_CACHE_PUT_INT(zend_hash_num_elements((*tmp)->faults), out);",
          "2328:     zend_hash_internal_pointer_reset((*tmp)->faults);",
          "2329:     while (zend_hash_get_current_data((*tmp)->faults, (void**)&fault) == SUCCESS) {",
          "2330:      sdl_serialize_key((*tmp)->faults, out);",
          "2331:      sdl_serialize_string((*fault)->name, out);",
          "2332:      sdl_serialize_parameters((*fault)->details, &tmp_encoders, &tmp_types, out);",
          "2333:      if ((*tmp)->binding->bindingType == BINDING_SOAP && (*fault)->bindingAttributes != NULL) {",
          "2334:       sdlSoapBindingFunctionFaultPtr binding = (sdlSoapBindingFunctionFaultPtr)(*fault)->bindingAttributes;",
          "",
          "[Added Lines]",
          "2257:   sdlBindingPtr tmp;",
          "2259:   zval zv;",
          "2260:   zend_string *key;",
          "2262:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->bindings, key, tmp) {",
          "2263:    sdl_serialize_key(key, out);",
          "2264:    sdl_serialize_string(tmp->name, out);",
          "2265:    sdl_serialize_string(tmp->location, out);",
          "2266:    WSDL_CACHE_PUT_1(tmp->bindingType,out);",
          "2267:    if (tmp->bindingType == BINDING_SOAP && tmp->bindingAttributes != NULL) {",
          "2268:     sdlSoapBindingPtr binding = (sdlSoapBindingPtr)tmp->bindingAttributes;",
          "2275:    ZVAL_LONG(&zv, binding_num);",
          "2276:    zend_hash_str_add(&tmp_bindings, (char*)&tmp, sizeof(tmp), &zv);",
          "2278:   } ZEND_HASH_FOREACH_END();",
          "2285:   sdlFunctionPtr tmp;",
          "2286:   zval *binding_num, zv;",
          "2288:   zend_string *key;",
          "2290:   ZEND_HASH_FOREACH_STR_KEY_PTR(&sdl->functions, key, tmp) {",
          "2291:    sdl_serialize_key(key, out);",
          "2292:    sdl_serialize_string(tmp->functionName, out);",
          "2293:    sdl_serialize_string(tmp->requestName, out);",
          "2294:    sdl_serialize_string(tmp->responseName, out);",
          "2296:    if (tmp->binding) {",
          "2297:     binding_num = zend_hash_str_find(&tmp_bindings,(char*)&tmp->binding, sizeof(tmp->binding));",
          "2298:     if (binding_num) {",
          "2299:      WSDL_CACHE_PUT_INT(Z_LVAL_P(binding_num), out);",
          "2300:      if (Z_LVAL_P(binding_num) >= 0) {",
          "2301:       if (tmp->binding->bindingType == BINDING_SOAP && tmp->bindingAttributes != NULL) {",
          "2302:        sdlSoapBindingFunctionPtr binding = (sdlSoapBindingFunctionPtr)tmp->bindingAttributes;",
          "2303:        WSDL_CACHE_PUT_1(binding->style, out);",
          "2304:        sdl_serialize_string(binding->soapAction, out);",
          "2305:        sdl_serialize_soap_body(&binding->input, &tmp_encoders, &tmp_types, out);",
          "2306:        sdl_serialize_soap_body(&binding->output, &tmp_encoders, &tmp_types, out);",
          "2307:       } else {",
          "2308:        WSDL_CACHE_PUT_1(0,out);",
          "2309:       }",
          "2310:      }",
          "2313:    sdl_serialize_parameters(tmp->requestParameters, &tmp_encoders, &tmp_types, out);",
          "2314:    sdl_serialize_parameters(tmp->responseParameters, &tmp_encoders, &tmp_types, out);",
          "2316:    if (tmp->faults) {",
          "2317:     sdlFaultPtr fault;",
          "2318:     zend_string *key;",
          "2320:     WSDL_CACHE_PUT_INT(zend_hash_num_elements(tmp->faults), out);",
          "2322:     ZEND_HASH_FOREACH_STR_KEY_PTR(tmp->faults, key, fault) {",
          "2323:      sdl_serialize_key(key, out);",
          "2324:      sdl_serialize_string(fault->name, out);",
          "2325:      sdl_serialize_parameters(fault->details, &tmp_encoders, &tmp_types, out);",
          "2326:      if (tmp->binding->bindingType == BINDING_SOAP && fault->bindingAttributes != NULL) {",
          "2327:       sdlSoapBindingFunctionFaultPtr binding = (sdlSoapBindingFunctionFaultPtr)fault->bindingAttributes;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2340:      } else {",
          "2341:       WSDL_CACHE_PUT_1(0, out);",
          "2342:      }",
          "2345:    } else {",
          "2346:     WSDL_CACHE_PUT_INT(0, out);",
          "2347:    }",
          "2350:    function_num++;",
          "2353:  }",
          "",
          "[Removed Lines]",
          "2343:      zend_hash_move_forward((*tmp)->faults);",
          "2344:     }",
          "2349:    zend_hash_add(&tmp_functions, (char*)tmp, sizeof(*tmp), (void**)&function_num, sizeof(function_num), NULL);",
          "2351:    zend_hash_move_forward(&sdl->functions);",
          "2352:   }",
          "",
          "[Added Lines]",
          "2336:     } ZEND_HASH_FOREACH_END();",
          "2341:    ZVAL_LONG(&zv, function_num);",
          "2342:    zend_hash_str_add(&tmp_functions, (char*)&tmp, sizeof(tmp), &zv);",
          "2344:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2360:  }",
          "2361:  WSDL_CACHE_PUT_INT(i, out);",
          "2362:  if (i > 0) {",
          "2374:  }",
          "2377:  close(f);",
          "2378:  smart_str_free(&buf);",
          "2379:  zend_hash_destroy(&tmp_functions);",
          "",
          "[Removed Lines]",
          "2363:   sdlFunctionPtr *tmp;",
          "2364:   int *function_num;",
          "2366:   zend_hash_internal_pointer_reset(sdl->requests);",
          "2367:   while (zend_hash_get_current_data(sdl->requests, (void**)&tmp) == SUCCESS) {",
          "2368:    if (zend_hash_find(&tmp_functions, (char*)tmp, sizeof(*tmp), (void**)&function_num) != SUCCESS) {",
          "2369:    }",
          "2370:    WSDL_CACHE_PUT_INT(*function_num, out);",
          "2371:    sdl_serialize_key(sdl->requests, out);",
          "2372:    zend_hash_move_forward(sdl->requests);",
          "2373:   }",
          "2376:  php_ignore_value(write(f, buf.c, buf.len));",
          "",
          "[Added Lines]",
          "2355:   sdlFunctionPtr tmp;",
          "2356:   zval *function_num;",
          "2357:   zend_string *key;",
          "2359:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->requests, key, tmp) {",
          "2360:    function_num = zend_hash_str_find(&tmp_functions, (char*)&tmp, sizeof(tmp));",
          "2361:    WSDL_CACHE_PUT_INT(Z_LVAL_P(function_num), out);",
          "2362:    sdl_serialize_key(key, out);",
          "2363:   } ZEND_HASH_FOREACH_END();",
          "2366:  php_ignore_value(write(f, buf.s->val, buf.s->len));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2394: }",
          "2398: {",
          "2400:  sdlRestrictionCharPtr prest = NULL;",
          "2402:  prest = malloc(sizeof(sdlRestrictionChar));",
          "",
          "[Removed Lines]",
          "2397: static void make_persistent_restriction_char(void *data)",
          "2399:  sdlRestrictionCharPtr *rest = (sdlRestrictionCharPtr *)data;",
          "",
          "[Added Lines]",
          "2387: static void make_persistent_restriction_char_int(sdlRestrictionCharPtr *rest)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2407: }",
          "2410: static void make_persistent_sdl_type_ref(sdlTypePtr *type, HashTable *ptr_map, HashTable *bp_types)",
          "2411: {",
          "2416:  } else {",
          "2418:  }",
          "2419: }",
          "2422: static void make_persistent_sdl_encoder_ref(encodePtr *enc, HashTable *ptr_map, HashTable *bp_encoders)",
          "2423: {",
          "2427:  if ((*enc) >= defaultEncoding && (*enc) < defaultEncoding + numDefaultEncodings) {",
          "2428:   return;",
          "2429:  }",
          "2433:  } else {",
          "2435:  }",
          "2436: }",
          "",
          "[Removed Lines]",
          "2412:  sdlTypePtr *tmp;",
          "2414:  if (zend_hash_find(ptr_map, (char *)type, sizeof(sdlTypePtr), (void**)&tmp) == SUCCESS) {",
          "2417:   zend_hash_next_index_insert(bp_types, (void*)&type, sizeof(sdlTypePtr*), NULL);",
          "2424:  encodePtr *tmp;",
          "2431:  if (zend_hash_find(ptr_map, (char *)enc, sizeof(encodePtr), (void**)&tmp) == SUCCESS) {",
          "2434:   zend_hash_next_index_insert(bp_encoders, (void*)&enc, sizeof(encodePtr*), NULL);",
          "",
          "[Added Lines]",
          "2399: static void make_persistent_restriction_char(zval *zv)",
          "2400: {",
          "2401:  make_persistent_restriction_char_int((sdlRestrictionCharPtr*)&Z_PTR_P(zv));",
          "2402: }",
          "2407:  sdlTypePtr tmp;",
          "2409:  if ((tmp = zend_hash_str_find_ptr(ptr_map, (char *)type, sizeof(sdlTypePtr))) != NULL) {",
          "2412:   zend_hash_next_index_insert_ptr(bp_types, *type);",
          "2419:  encodePtr tmp;",
          "2426:  if ((tmp = zend_hash_str_find_ptr(ptr_map, (char *)enc, sizeof(encodePtr))) != NULL) {",
          "2429:   zend_hash_next_index_insert_ptr(bp_encoders, *enc);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2439: static HashTable* make_persistent_sdl_function_headers(HashTable *headers, HashTable *ptr_map)",
          "2440: {",
          "2441:  HashTable *pheaders;",
          "2449:  pheaders = malloc(sizeof(HashTable));",
          "2450:  zend_hash_init(pheaders, zend_hash_num_elements(headers), NULL, delete_header_persistent, 1);",
          "2454:   pheader = malloc(sizeof(sdlSoapBindingFunctionHeader));",
          "2455:   memset(pheader, 0, sizeof(sdlSoapBindingFunctionHeader));",
          "2458:   if (pheader->name) {",
          "2459:    pheader->name = strdup(pheader->name);",
          "",
          "[Removed Lines]",
          "2442:  sdlSoapBindingFunctionHeaderPtr *tmp, pheader;",
          "2443:  encodePtr *penc;",
          "2444:  sdlTypePtr *ptype;",
          "2445:  ulong index;",
          "2446:  char *key;",
          "2447:  uint key_len;",
          "2452:  zend_hash_internal_pointer_reset(headers);",
          "2453:  while (zend_hash_get_current_data(headers, (void**)&tmp) == SUCCESS) {",
          "",
          "[Added Lines]",
          "2437:  sdlSoapBindingFunctionHeaderPtr tmp, pheader;",
          "2438:  encodePtr penc;",
          "2439:  sdlTypePtr ptype;",
          "2440:  zend_string *key;",
          "2445:  ZEND_HASH_FOREACH_STR_KEY_PTR(headers, key, tmp) {",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2463:   }",
          "2465:   if (pheader->encode->details.sdl_type) {",
          "2467:     assert(0);",
          "2468:    }",
          "2470:   }",
          "2471:   if (pheader->element) {",
          "2473:     assert(0);",
          "2474:    }",
          "2476:   }",
          "2478:   if (pheader->headerfaults) {",
          "2479:    pheader->headerfaults = make_persistent_sdl_function_headers(pheader->headerfaults, ptr_map);",
          "2480:   }",
          "2484:   } else {",
          "2486:   }",
          "2491:  return pheaders;",
          "2492: }",
          "",
          "[Removed Lines]",
          "2466:    if (zend_hash_find(ptr_map, (char*)&pheader->encode, sizeof(encodePtr), (void**)&penc) == FAILURE) {",
          "2469:    pheader->encode = *penc;",
          "2472:    if (zend_hash_find(ptr_map, (char*)&pheader->element, sizeof(sdlTypePtr), (void**)&ptype) == FAILURE) {",
          "2475:    pheader->element = *ptype;",
          "2482:   if (zend_hash_get_current_key_ex(headers, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "2483:    zend_hash_add(pheaders, key, key_len, (void*)&pheader, sizeof(sdlSoapBindingFunctionHeaderPtr), NULL);",
          "2485:    zend_hash_next_index_insert(pheaders, (void*)&pheader, sizeof(sdlSoapBindingFunctionHeaderPtr), NULL);",
          "2488:   zend_hash_move_forward(headers);",
          "2489:  }",
          "",
          "[Added Lines]",
          "2458:    if ((penc = zend_hash_str_find_ptr(ptr_map, (char*)&pheader->encode, sizeof(encodePtr))) == NULL) {",
          "2461:    pheader->encode = penc;",
          "2464:    if ((ptype = zend_hash_str_find_ptr(ptr_map, (char*)&pheader->element, sizeof(sdlTypePtr))) == NULL) {",
          "2467:    pheader->element = ptype;",
          "2474:   if (key) {",
          "2475:    zend_hash_add_ptr(pheaders, key, pheader);",
          "2477:    zend_hash_next_index_insert_ptr(pheaders, pheader);",
          "2479:  } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2507: static HashTable* make_persistent_sdl_parameters(HashTable *params, HashTable *ptr_map)",
          "2508: {",
          "2509:  HashTable *pparams;",
          "2517:  pparams = malloc(sizeof(HashTable));",
          "2518:  zend_hash_init(pparams, zend_hash_num_elements(params), NULL, delete_parameter_persistent, 1);",
          "2522:   pparam = malloc(sizeof(sdlParam));",
          "2523:   memset(pparam, 0, sizeof(sdlParam));",
          "2526:   if (pparam->paramName) {",
          "2527:    pparam->paramName = strdup(pparam->paramName);",
          "2528:   }",
          "2530:   if (pparam->encode && pparam->encode->details.sdl_type) {",
          "2532:     assert(0);",
          "2533:    }",
          "2535:   }",
          "2536:   if (pparam->element) {",
          "2538:     assert(0);",
          "2539:    }",
          "2541:   }",
          "2545:   } else {",
          "2547:   }",
          "2553:  return pparams;",
          "2554: }",
          "",
          "[Removed Lines]",
          "2510:  sdlParamPtr *tmp, pparam;",
          "2511:  sdlTypePtr *ptype;",
          "2512:  encodePtr *penc;",
          "2513:  ulong index;",
          "2514:  char *key;",
          "2515:  uint key_len;",
          "2520:  zend_hash_internal_pointer_reset(params);",
          "2521:  while (zend_hash_get_current_data(params, (void**)&tmp) == SUCCESS) {",
          "2531:    if (zend_hash_find(ptr_map, (char*)&pparam->encode, sizeof(encodePtr), (void**)&penc) == FAILURE) {",
          "2534:    pparam->encode = *penc;",
          "2537:    if (zend_hash_find(ptr_map, (char*)&pparam->element, sizeof(sdlTypePtr), (void**)&ptype) == FAILURE) {",
          "2540:    pparam->element = *ptype;",
          "2543:   if (zend_hash_get_current_key_ex(params, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "2544:    zend_hash_add(pparams, key, key_len, (void*)&pparam, sizeof(sdlParamPtr), NULL);",
          "2546:    zend_hash_next_index_insert(pparams, (void*)&pparam, sizeof(sdlParamPtr), NULL);",
          "2549:   zend_hash_move_forward(params);",
          "2550:  }",
          "",
          "[Added Lines]",
          "2500:  sdlParamPtr tmp, pparam;",
          "2501:  sdlTypePtr ptype;",
          "2502:  encodePtr penc;",
          "2503:  zend_string *key;",
          "2508:  ZEND_HASH_FOREACH_STR_KEY_PTR(params, key, tmp) {",
          "2518:    if ((penc = zend_hash_str_find_ptr(ptr_map, (char*)&pparam->encode, sizeof(encodePtr))) == NULL) {",
          "2521:    pparam->encode = penc;",
          "2524:    if ((ptype = zend_hash_str_find_ptr(ptr_map, (char*)&pparam->element, sizeof(sdlTypePtr))) == NULL) {",
          "2527:    pparam->element = ptype;",
          "2530:   if (key) {",
          "2531:    zend_hash_add_ptr(pparams, key, pparam);",
          "2533:    zend_hash_next_index_insert_ptr(pparams, pparam);",
          "2535:  } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2556: static HashTable* make_persistent_sdl_function_faults(sdlFunctionPtr func, HashTable *faults, HashTable *ptr_map)",
          "2557: {",
          "2558:  HashTable *pfaults;",
          "2564:  pfaults = malloc(sizeof(HashTable));",
          "2565:  zend_hash_init(pfaults, zend_hash_num_elements(faults), NULL, delete_fault_persistent, 1);",
          "2569:   pfault = malloc(sizeof(sdlFault));",
          "2570:   memset(pfault, 0, sizeof(sdlFault));",
          "2573:   if (pfault->name) {",
          "2574:    pfault->name = strdup(pfault->name);",
          "",
          "[Removed Lines]",
          "2559:  sdlFaultPtr  *tmp, pfault;",
          "2560:  ulong index;",
          "2561:  char *key;",
          "2562:  uint key_len;",
          "2567:  zend_hash_internal_pointer_reset(faults);",
          "2568:  while (zend_hash_get_current_data(faults, (void**)&tmp) == SUCCESS) {",
          "",
          "[Added Lines]",
          "2543:  sdlFaultPtr tmp, pfault;",
          "2544:  zend_string *key;",
          "2549:  ZEND_HASH_FOREACH_STR_KEY_PTR(faults, key, tmp) {",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2589:    pfault->bindingAttributes = soap_binding;",
          "2590:   }",
          "2594:   } else {",
          "2596:   }",
          "2602:  return pfaults;",
          "2603: }",
          "",
          "[Removed Lines]",
          "2592:   if (zend_hash_get_current_key_ex(faults, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "2593:    zend_hash_add(pfaults, key, key_len, (void*)&pfault, sizeof(sdlParamPtr), NULL);",
          "2595:    zend_hash_next_index_insert(pfaults, (void*)&pfault, sizeof(sdlParamPtr), NULL);",
          "2598:   zend_hash_move_forward(faults);",
          "2599:  }",
          "",
          "[Added Lines]",
          "2573:   if (key) {",
          "2574:    zend_hash_add_ptr(pfaults, key, pfault);",
          "2576:    zend_hash_next_index_insert_ptr(pfaults, pfault);",
          "2579:  } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2606: static sdlAttributePtr make_persistent_sdl_attribute(sdlAttributePtr attr, HashTable *ptr_map, HashTable *bp_types, HashTable *bp_encoders)",
          "2607: {",
          "2608:  sdlAttributePtr pattr;",
          "2613:  pattr = malloc(sizeof(sdlAttribute));",
          "2614:  memset(pattr, 0, sizeof(sdlAttribute));",
          "",
          "[Removed Lines]",
          "2609:  ulong index;",
          "2610:  char *key;",
          "2611:  uint key_len;",
          "",
          "[Added Lines]",
          "2588:  zend_string *key;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2637:  }",
          "2639:  if (pattr->extraAttributes) {",
          "2642:   pattr->extraAttributes = malloc(sizeof(HashTable));",
          "2643:   zend_hash_init(pattr->extraAttributes, zend_hash_num_elements(attr->extraAttributes), NULL, delete_extra_attribute_persistent, 1);",
          "2648:     pextra = malloc(sizeof(sdlExtraAttribute));",
          "2649:     memset(pextra, 0, sizeof(sdlExtraAttribute));",
          "2653:     }",
          "2656:     }",
          "2659:    }",
          "2663:  }",
          "2665:  return pattr;",
          "",
          "[Removed Lines]",
          "2640:   sdlExtraAttributePtr *tmp, pextra;",
          "2645:   zend_hash_internal_pointer_reset(pattr->extraAttributes);",
          "2646:   while (zend_hash_get_current_data(attr->extraAttributes, (void**)&tmp) == SUCCESS) {",
          "2647:    if (zend_hash_get_current_key_ex(attr->extraAttributes, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "2651:     if ((*tmp)->ns) {",
          "2652:      pextra->ns = strdup((*tmp)->ns);",
          "2654:     if ((*tmp)->val) {",
          "2655:      pextra->val = strdup((*tmp)->val);",
          "2658:     zend_hash_add(pattr->extraAttributes, key, key_len, (void*)&pextra, sizeof(sdlExtraAttributePtr), NULL);",
          "2661:    zend_hash_move_forward(attr->extraAttributes);",
          "2662:   }",
          "",
          "[Added Lines]",
          "2617:   sdlExtraAttributePtr tmp, pextra;",
          "2622:   ZEND_HASH_FOREACH_STR_KEY_PTR(pattr->extraAttributes, key, tmp) {",
          "2623:    if (key) {",
          "2627:     if (tmp->ns) {",
          "2628:      pextra->ns = strdup(tmp->ns);",
          "2630:     if (tmp->val) {",
          "2631:      pextra->val = strdup(tmp->val);",
          "2634:     zend_hash_add_ptr(pattr->extraAttributes, key, pextra);",
          "2636:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2669: static sdlContentModelPtr make_persistent_sdl_model(sdlContentModelPtr model, HashTable *ptr_map, HashTable *bp_types, HashTable *bp_encoders)",
          "2670: {",
          "2671:  sdlContentModelPtr pmodel;",
          "2674:  pmodel = malloc(sizeof(sdlContentModel));",
          "2675:  memset(pmodel, 0, sizeof(sdlContentModel));",
          "",
          "[Removed Lines]",
          "2672:  sdlContentModelPtr *tmp, pcontent;",
          "",
          "[Added Lines]",
          "2646:  sdlContentModelPtr tmp, pcontent;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2688:    pmodel->u.content = malloc(sizeof(HashTable));",
          "2689:    zend_hash_init(pmodel->u.content, zend_hash_num_elements(model->u.content), NULL, delete_model_persistent, 1);",
          "2697:    break;",
          "2699:   case XSD_CONTENT_GROUP_REF:",
          "",
          "[Removed Lines]",
          "2691:    zend_hash_internal_pointer_reset(model->u.content);",
          "2692:    while (zend_hash_get_current_data(model->u.content, (void**)&tmp) == SUCCESS) {",
          "2693:     pcontent = make_persistent_sdl_model(*tmp, ptr_map, bp_types, bp_encoders);",
          "2694:     zend_hash_next_index_insert(pmodel->u.content, (void*)&pcontent, sizeof(sdlContentModelPtr), NULL);",
          "2695:     zend_hash_move_forward(model->u.content);",
          "2696:    }",
          "",
          "[Added Lines]",
          "2665:    ZEND_HASH_FOREACH_PTR(model->u.content, tmp) {",
          "2666:     pcontent = make_persistent_sdl_model(tmp, ptr_map, bp_types, bp_encoders);",
          "2667:     zend_hash_next_index_insert_ptr(pmodel->u.content, pcontent);",
          "2668:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2719: static sdlTypePtr make_persistent_sdl_type(sdlTypePtr type, HashTable *ptr_map, HashTable *bp_types, HashTable *bp_encoders)",
          "2720: {",
          "2724:  sdlTypePtr ptype = NULL;",
          "2726:  ptype = malloc(sizeof(sdlType));",
          "",
          "[Removed Lines]",
          "2721:  ulong index;",
          "2722:  char *key;",
          "2723:  uint key_len;",
          "",
          "[Added Lines]",
          "2693:  zend_string *key;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2782:    make_persistent_restriction_int(&ptype->restrictions->maxLength);",
          "2783:   }",
          "2784:   if (ptype->restrictions->whiteSpace) {",
          "2786:   }",
          "2787:   if (ptype->restrictions->pattern) {",
          "2789:   }",
          "2791:   if (type->restrictions->enumeration) {",
          "2794:    ptype->restrictions->enumeration = malloc(sizeof(HashTable));",
          "2795:    zend_hash_init(ptype->restrictions->enumeration, zend_hash_num_elements(type->restrictions->enumeration), NULL, delete_restriction_var_char_persistent, 1);",
          "2797:   }",
          "2798:  }",
          "2800:  if (ptype->elements) {",
          "2803:   ptype->elements = malloc(sizeof(HashTable));",
          "2804:   zend_hash_init(ptype->elements, zend_hash_num_elements(type->elements), NULL, delete_type_persistent, 1);",
          "2811:    } else {",
          "2813:    }",
          "2817:  }",
          "2819:  if (ptype->attributes) {",
          "2822:   ptype->attributes = malloc(sizeof(HashTable));",
          "2823:   zend_hash_init(ptype->attributes, zend_hash_num_elements(type->attributes), NULL, delete_attribute_persistent, 1);",
          "2830:    } else {",
          "2832:    }",
          "2835:  }",
          "2837:  if (type->model) {",
          "",
          "[Removed Lines]",
          "2785:    make_persistent_restriction_char(&ptype->restrictions->whiteSpace);",
          "2788:    make_persistent_restriction_char(&ptype->restrictions->pattern);",
          "2792:    sdlRestrictionCharPtr tmp;",
          "2796:    zend_hash_copy(ptype->restrictions->enumeration, type->restrictions->enumeration, make_persistent_restriction_char, (void*)&tmp, sizeof(sdlRestrictionCharPtr));",
          "2801:   sdlTypePtr *tmp, pelem;",
          "2806:   zend_hash_internal_pointer_reset(type->elements);",
          "2807:   while (zend_hash_get_current_data(type->elements, (void **)&tmp) == SUCCESS) {",
          "2808:    pelem = make_persistent_sdl_type(*tmp, ptr_map, bp_types, bp_encoders);",
          "2809:    if (zend_hash_get_current_key_ex(type->elements, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "2810:     zend_hash_add(ptype->elements, key, key_len, (void*)&pelem, sizeof(sdlTypePtr), NULL);",
          "2812:     zend_hash_next_index_insert(ptype->elements, (void*)&pelem, sizeof(sdlTypePtr), NULL);",
          "2814:    zend_hash_add(ptr_map, (char*)tmp, sizeof(*tmp), (void*)&pelem, sizeof(sdlTypePtr), NULL);",
          "2815:    zend_hash_move_forward(type->elements);",
          "2816:   }",
          "2820:   sdlAttributePtr *tmp, pattr;",
          "2825:   zend_hash_internal_pointer_reset(type->attributes);",
          "2826:   while (zend_hash_get_current_data(type->attributes, (void **)&tmp) == SUCCESS) {",
          "2827:    pattr = make_persistent_sdl_attribute(*tmp, ptr_map, bp_types, bp_encoders);",
          "2828:    if (zend_hash_get_current_key_ex(type->attributes, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "2829:     zend_hash_add(ptype->attributes, key, key_len, (void*)&pattr, sizeof(sdlAttributePtr), NULL);",
          "2831:     zend_hash_next_index_insert(ptype->attributes, (void*)&pattr, sizeof(sdlAttributePtr), NULL);",
          "2833:    zend_hash_move_forward(type->attributes);",
          "2834:   }",
          "",
          "[Added Lines]",
          "2755:    make_persistent_restriction_char_int(&ptype->restrictions->whiteSpace);",
          "2758:    make_persistent_restriction_char_int(&ptype->restrictions->pattern);",
          "2764:    zend_hash_copy(ptype->restrictions->enumeration, type->restrictions->enumeration, make_persistent_restriction_char);",
          "2769:   sdlTypePtr tmp, pelem;",
          "2774:   ZEND_HASH_FOREACH_STR_KEY_PTR(type->elements, key, tmp) {",
          "2775:    pelem = make_persistent_sdl_type(tmp, ptr_map, bp_types, bp_encoders);",
          "2776:    if (key) {",
          "2777:     zend_hash_add_ptr(ptype->elements, key, pelem);",
          "2779:     zend_hash_next_index_insert_ptr(ptype->elements, pelem);",
          "2781:    zend_hash_str_add_ptr(ptr_map, (char*)&tmp, sizeof(tmp), pelem);",
          "2782:   } ZEND_HASH_FOREACH_END();",
          "2786:   sdlAttributePtr tmp, pattr;",
          "2791:   ZEND_HASH_FOREACH_STR_KEY_PTR(type->attributes, key, tmp) {",
          "2792:    pattr = make_persistent_sdl_attribute(tmp, ptr_map, bp_types, bp_encoders);",
          "2793:    if (key) {",
          "2794:     zend_hash_add_ptr(ptype->attributes, key, pattr);",
          "2796:     zend_hash_next_index_insert_ptr(ptype->attributes, pattr);",
          "2798:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2912:  }",
          "2914:  if (pfunc->binding) {",
          "2918:    assert(0);",
          "2919:   }",
          "2922:   if (pfunc->binding->bindingType == BINDING_SOAP && pfunc->bindingAttributes) {",
          "2923:    sdlSoapBindingFunctionPtr soap_binding;",
          "",
          "[Removed Lines]",
          "2915:   sdlBindingPtr *tmp;",
          "2917:   if (zend_hash_find(ptr_map, (char*)&pfunc->binding, sizeof(pfunc->binding), (void**)&tmp) == FAILURE) {",
          "2920:   pfunc->binding = *tmp;",
          "",
          "[Added Lines]",
          "2879:   sdlBindingPtr tmp;",
          "2881:   if ((tmp = zend_hash_str_find_ptr(ptr_map, (char*)&pfunc->binding, sizeof(pfunc->binding))) == NULL) {",
          "2884:   pfunc->binding = tmp;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2952:  sdlPtr psdl = NULL;",
          "2953:  HashTable ptr_map;",
          "2954:  HashTable bp_types, bp_encoders;",
          "2959:  zend_hash_init(&bp_types, 0, NULL, NULL, 0);",
          "2960:  zend_hash_init(&bp_encoders, 0, NULL, NULL, 0);",
          "",
          "[Removed Lines]",
          "2955:  ulong index;",
          "2956:  char *key;",
          "2957:  uint key_len;",
          "",
          "[Added Lines]",
          "2919:  zend_string *key;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2971:  }",
          "2973:  if (sdl->groups) {",
          "2975:   sdlTypePtr ptype;",
          "2977:   psdl->groups = malloc(sizeof(HashTable));",
          "2978:   zend_hash_init(psdl->groups, zend_hash_num_elements(sdl->groups), NULL, delete_type_persistent, 1);",
          "2985:    } else {",
          "2987:    }",
          "2991:  }",
          "2993:  if (sdl->types) {",
          "2995:   sdlTypePtr ptype;",
          "2997:   psdl->types = malloc(sizeof(HashTable));",
          "2998:   zend_hash_init(psdl->types, zend_hash_num_elements(sdl->types), NULL, delete_type_persistent, 1);",
          "3005:    } else {",
          "3007:    }",
          "3011:  }",
          "3013:  if (sdl->elements) {",
          "3015:   sdlTypePtr ptype;",
          "3017:   psdl->elements = malloc(sizeof(HashTable));",
          "3018:   zend_hash_init(psdl->elements, zend_hash_num_elements(sdl->elements), NULL, delete_type_persistent, 1);",
          "3025:    } else {",
          "3027:    }",
          "3031:  }",
          "3033:  if (sdl->encoders) {",
          "3035:   encodePtr penc;",
          "3037:   psdl->encoders = malloc(sizeof(HashTable));",
          "3038:   zend_hash_init(psdl->encoders, zend_hash_num_elements(sdl->encoders), NULL, delete_encoder_persistent, 1);",
          "3045:    } else {",
          "3047:    }",
          "3051:  }",
          "3054:  if (zend_hash_num_elements(&bp_types)) {",
          "3060:     assert(0);",
          "3061:    }",
          "3065:  }",
          "3066:  if (zend_hash_num_elements(&bp_encoders)) {",
          "3072:     assert(0);",
          "3073:    }",
          "3077:  }",
          "3080:  if (sdl->bindings) {",
          "3082:   sdlBindingPtr pbind;",
          "3084:   psdl->bindings = malloc(sizeof(HashTable));",
          "3085:   zend_hash_init(psdl->bindings, zend_hash_num_elements(sdl->bindings), NULL, delete_binding_persistent, 1);",
          "3092:    } else {",
          "3094:    }",
          "3098:  }",
          "3100:  zend_hash_init(&psdl->functions, zend_hash_num_elements(&sdl->functions), NULL, delete_function_persistent, 1);",
          "3101:  if (zend_hash_num_elements(&sdl->functions)) {",
          "3103:   sdlFunctionPtr pfunc;",
          "3110:    } else {",
          "3112:    }",
          "3116:  }",
          "3118:  if (sdl->requests) {",
          "3122:   psdl->requests = malloc(sizeof(HashTable));",
          "3123:   zend_hash_init(psdl->requests, zend_hash_num_elements(sdl->requests), NULL, NULL, 1);",
          "3128:     assert(0);",
          "3129:    }",
          "3133:    }",
          "3136:  }",
          "3138:  zend_hash_destroy(&ptr_map);",
          "",
          "[Removed Lines]",
          "2974:   sdlTypePtr *tmp;",
          "2980:   zend_hash_internal_pointer_reset(sdl->groups);",
          "2981:   while (zend_hash_get_current_data(sdl->groups, (void **)&tmp) == SUCCESS) {",
          "2982:    ptype = make_persistent_sdl_type(*tmp, &ptr_map, &bp_types, &bp_encoders);",
          "2983:    if (zend_hash_get_current_key_ex(sdl->groups, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "2984:     zend_hash_add(psdl->groups, key, key_len, (void*)&ptype, sizeof(sdlTypePtr), NULL);",
          "2986:     zend_hash_next_index_insert(psdl->groups, (void*)&ptype, sizeof(sdlTypePtr), NULL);",
          "2988:    zend_hash_add(&ptr_map, (char*)tmp, sizeof(*tmp), (void*)&ptype, sizeof(sdlTypePtr), NULL);",
          "2989:    zend_hash_move_forward(sdl->groups);",
          "2990:   }",
          "2994:   sdlTypePtr *tmp;",
          "3000:   zend_hash_internal_pointer_reset(sdl->types);",
          "3001:   while (zend_hash_get_current_data(sdl->types, (void **)&tmp) == SUCCESS) {",
          "3002:    ptype = make_persistent_sdl_type(*tmp, &ptr_map, &bp_types, &bp_encoders);",
          "3003:    if (zend_hash_get_current_key_ex(sdl->types, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "3004:     zend_hash_add(psdl->types, key, key_len, (void*)&ptype, sizeof(sdlTypePtr), NULL);",
          "3006:     zend_hash_next_index_insert(psdl->types, (void*)&ptype, sizeof(sdlTypePtr), NULL);",
          "3008:    zend_hash_add(&ptr_map, (char*)tmp, sizeof(*tmp), (void*)&ptype, sizeof(sdlTypePtr), NULL);",
          "3009:    zend_hash_move_forward(sdl->types);",
          "3010:   }",
          "3014:   sdlTypePtr *tmp;",
          "3020:   zend_hash_internal_pointer_reset(sdl->elements);",
          "3021:   while (zend_hash_get_current_data(sdl->elements, (void **)&tmp) == SUCCESS) {",
          "3022:    ptype = make_persistent_sdl_type(*tmp, &ptr_map, &bp_types, &bp_encoders);",
          "3023:    if (zend_hash_get_current_key_ex(sdl->elements, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "3024:     zend_hash_add(psdl->elements, key, key_len, (void*)&ptype, sizeof(sdlTypePtr), NULL);",
          "3026:     zend_hash_next_index_insert(psdl->elements, (void*)&ptype, sizeof(sdlTypePtr), NULL);",
          "3028:    zend_hash_add(&ptr_map, (char*)tmp, sizeof(*tmp), (void*)&ptype, sizeof(sdlTypePtr), NULL);",
          "3029:    zend_hash_move_forward(sdl->elements);",
          "3030:   }",
          "3034:   encodePtr *tmp;",
          "3040:   zend_hash_internal_pointer_reset(sdl->encoders);",
          "3041:   while (zend_hash_get_current_data(sdl->encoders, (void **)&tmp) == SUCCESS) {",
          "3042:    penc = make_persistent_sdl_encoder(*tmp, &ptr_map, &bp_types, &bp_encoders);",
          "3043:    if (zend_hash_get_current_key_ex(sdl->encoders, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "3044:     zend_hash_add(psdl->encoders, key, key_len, (void*)&penc, sizeof(encodePtr), NULL);",
          "3046:     zend_hash_next_index_insert(psdl->encoders, (void*)&penc, sizeof(encodePtr), NULL);",
          "3048:    zend_hash_add(&ptr_map, (char*)tmp, sizeof(*tmp), (void*)&penc, sizeof(encodePtr), NULL);",
          "3049:    zend_hash_move_forward(sdl->encoders);",
          "3050:   }",
          "3055:   sdlTypePtr **tmp, *ptype = NULL;",
          "3057:   zend_hash_internal_pointer_reset(&bp_types);",
          "3058:   while (zend_hash_get_current_data(&bp_types, (void**)&tmp) == SUCCESS) {",
          "3059:    if (zend_hash_find(&ptr_map, (char*)(*tmp), sizeof(**tmp), (void**)&ptype) == FAILURE) {",
          "3063:    zend_hash_move_forward(&bp_types);",
          "3064:   }",
          "3067:   encodePtr **tmp, *penc = NULL;",
          "3069:   zend_hash_internal_pointer_reset(&bp_encoders);",
          "3070:   while (zend_hash_get_current_data(&bp_encoders, (void**)&tmp) == SUCCESS) {",
          "3071:    if (zend_hash_find(&ptr_map, (char*)(*tmp), sizeof(**tmp), (void**)&penc) == FAILURE) {",
          "3075:    zend_hash_move_forward(&bp_encoders);",
          "3076:   }",
          "3081:   sdlBindingPtr *tmp;",
          "3087:   zend_hash_internal_pointer_reset(sdl->bindings);",
          "3088:   while (zend_hash_get_current_data(sdl->bindings, (void **)&tmp) == SUCCESS) {",
          "3089:    pbind = make_persistent_sdl_binding(*tmp, &ptr_map);",
          "3090:    if (zend_hash_get_current_key_ex(sdl->bindings, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "3091:     zend_hash_add(psdl->bindings, key, key_len, (void*)&pbind, sizeof(sdlBindingPtr), NULL);",
          "3093:     zend_hash_next_index_insert(psdl->bindings, (void*)&pbind, sizeof(sdlBindingPtr), NULL);",
          "3095:    zend_hash_add(&ptr_map, (char*)tmp, sizeof(*tmp), (void*)&pbind, sizeof(sdlBindingPtr), NULL);",
          "3096:    zend_hash_move_forward(sdl->bindings);",
          "3097:   }",
          "3102:   sdlFunctionPtr *tmp;",
          "3105:   zend_hash_internal_pointer_reset(&sdl->functions);",
          "3106:   while (zend_hash_get_current_data(&sdl->functions, (void **)&tmp) == SUCCESS) {",
          "3107:    pfunc = make_persistent_sdl_function(*tmp, &ptr_map);",
          "3108:    if (zend_hash_get_current_key_ex(&sdl->functions, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "3109:     zend_hash_add(&psdl->functions, key, key_len, (void*)&pfunc, sizeof(sdlFunctionPtr), NULL);",
          "3111:     zend_hash_next_index_insert(&psdl->functions, (void*)&pfunc, sizeof(sdlFunctionPtr), NULL);",
          "3113:    zend_hash_add(&ptr_map, (char*)tmp, sizeof(*tmp), (void*)&pfunc, sizeof(sdlFunctionPtr), NULL);",
          "3114:    zend_hash_move_forward(&sdl->functions);",
          "3115:   }",
          "3119:   sdlFunctionPtr *tmp;",
          "3120:   sdlFunctionPtr *preq;",
          "3125:   zend_hash_internal_pointer_reset(sdl->requests);",
          "3126:   while (zend_hash_get_current_data(sdl->requests, (void **)&tmp) == SUCCESS) {",
          "3127:    if (zend_hash_find(&ptr_map, (char*)tmp, sizeof(*tmp), (void**)&preq) == FAILURE) {",
          "3131:    if (zend_hash_get_current_key_ex(sdl->requests, &key, &key_len, &index, 0, NULL) == HASH_KEY_IS_STRING) {",
          "3132:     zend_hash_add(psdl->requests, key, key_len, (void*)&preq, sizeof(sdlFunctionPtr), NULL);",
          "3134:    zend_hash_move_forward(sdl->requests);",
          "3135:   }",
          "",
          "[Added Lines]",
          "2936:   sdlTypePtr tmp;",
          "2942:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->groups, key, tmp) {",
          "2943:    ptype = make_persistent_sdl_type(tmp, &ptr_map, &bp_types, &bp_encoders);",
          "2944:    if (key) {",
          "2945:     zend_hash_add_ptr(psdl->groups, key, ptype);",
          "2947:     zend_hash_next_index_insert_ptr(psdl->groups, ptype);",
          "2949:    zend_hash_str_add_ptr(&ptr_map, (char*)&tmp, sizeof(tmp), ptype);",
          "2950:   } ZEND_HASH_FOREACH_END();",
          "2954:   sdlTypePtr tmp;",
          "2960:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->types, key, tmp) {",
          "2961:    ptype = make_persistent_sdl_type(tmp, &ptr_map, &bp_types, &bp_encoders);",
          "2962:    if (key) {",
          "2963:     zend_hash_add_ptr(psdl->types, key, ptype);",
          "2965:     zend_hash_next_index_insert_ptr(psdl->types, ptype);",
          "2967:    zend_hash_str_add_ptr(&ptr_map, (char*)&tmp, sizeof(tmp), ptype);",
          "2968:   } ZEND_HASH_FOREACH_END();",
          "2972:   sdlTypePtr tmp;",
          "2978:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->elements, key, tmp) {",
          "2979:    ptype = make_persistent_sdl_type(tmp, &ptr_map, &bp_types, &bp_encoders);",
          "2980:    if (key) {",
          "2981:     zend_hash_add_ptr(psdl->elements, key, ptype);",
          "2983:     zend_hash_next_index_insert_ptr(psdl->elements, ptype);",
          "2985:    zend_hash_str_add_ptr(&ptr_map, (char*)&tmp, sizeof(tmp), ptype);",
          "2986:   } ZEND_HASH_FOREACH_END();",
          "2990:   encodePtr tmp;",
          "2996:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->encoders, key, tmp) {",
          "2997:    penc = make_persistent_sdl_encoder(tmp, &ptr_map, &bp_types, &bp_encoders);",
          "2998:    if (key) {",
          "2999:     zend_hash_add_ptr(psdl->encoders, key, penc);",
          "3001:     zend_hash_next_index_insert_ptr(psdl->encoders, penc);",
          "3003:    zend_hash_str_add_ptr(&ptr_map, (char*)&tmp, sizeof(tmp), penc);",
          "3004:   } ZEND_HASH_FOREACH_END();",
          "3009:   sdlTypePtr *tmp, ptype = NULL;",
          "3011:   ZEND_HASH_FOREACH_PTR(&bp_types, tmp) {",
          "3012:    if ((ptype = zend_hash_str_find_ptr(&ptr_map, (char*)tmp, sizeof(*tmp))) == NULL) {",
          "3016:   } ZEND_HASH_FOREACH_END();",
          "3019:   encodePtr *tmp, penc = NULL;",
          "3021:   ZEND_HASH_FOREACH_PTR(&bp_encoders, tmp) {",
          "3022:    if ((penc = zend_hash_str_find_ptr(&ptr_map, (char*)tmp, sizeof(*tmp))) == NULL) {",
          "3026:   } ZEND_HASH_FOREACH_END();",
          "3031:   sdlBindingPtr tmp;",
          "3037:   ZEND_HASH_FOREACH_STR_KEY_PTR(sdl->bindings, key, tmp) {",
          "3038:    pbind = make_persistent_sdl_binding(tmp, &ptr_map);",
          "3039:    if (key) {",
          "3040:     zend_hash_add_ptr(psdl->bindings, key, pbind);",
          "3042:     zend_hash_next_index_insert_ptr(psdl->bindings, pbind);",
          "3044:    zend_hash_str_add_ptr(&ptr_map, (char*)&tmp, sizeof(tmp), pbind);",
          "3045:   } ZEND_HASH_FOREACH_END();",
          "3050:   sdlFunctionPtr tmp;",
          "3053:   ZEND_HASH_FOREACH_STR_KEY_PTR(&sdl->functions, key, tmp) {",
          "3054:    pfunc = make_persistent_sdl_function(tmp, &ptr_map);",
          "3055:    if (key) {",
          "3056:     zend_hash_add_ptr(&psdl->functions, key, pfunc);",
          "3058:     zend_hash_next_index_insert_ptr(&psdl->functions, pfunc);",
          "3060:    zend_hash_str_add_ptr(&ptr_map, (char*)&tmp, sizeof(tmp), pfunc);",
          "3061:   } ZEND_HASH_FOREACH_END();",
          "3065:   zval *zv;",
          "3066:   sdlFunctionPtr tmp;",
          "3067:   sdlFunctionPtr preq;",
          "3072:   ZEND_HASH_FOREACH_STR_KEY_VAL(sdl->requests, key, zv) {",
          "3073:    tmp = Z_PTR_P(zv);",
          "3074:    if ((preq = zend_hash_str_find_ptr(&ptr_map, (char*)&tmp, sizeof(tmp))) == NULL) {",
          "3078:    Z_PTR_P(zv) = preq;",
          "3079:    if (key) {",
          "3080:     zend_hash_add_ptr(psdl->requests, key, preq);",
          "3082:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3147:  time_t time;",
          "3148: } sdl_cache_bucket;",
          "3151: {",
          "3153:  sdlPtr tmp = p->sdl;",
          "3155:  zend_hash_destroy(&tmp->functions);",
          "",
          "[Removed Lines]",
          "3150: static void delete_psdl(void *data)",
          "3152:  sdl_cache_bucket *p = (sdl_cache_bucket*)data;",
          "",
          "[Added Lines]",
          "3097: static void delete_psdl_int(sdl_cache_bucket *p)",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3186:  free(tmp);",
          "3187: }",
          "3189: sdlPtr get_sdl(zval *this_ptr, char *uri, long cache_wsdl TSRMLS_DC)",
          "3190: {",
          "3191:  char  fn[MAXPATHLEN];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3135: static void delete_psdl(zval *zv)",
          "3136: {",
          "3137:  delete_psdl_int(Z_PTR_P(zv));",
          "3138: }",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3193:  char* old_error_code = SOAP_GLOBAL(error_code);",
          "3194:  int uri_len = 0;",
          "3195:  php_stream_context *context=NULL;",
          "3197:  smart_str headers = {0};",
          "3198:  char* key = NULL;",
          "3199:  time_t t = time(0);",
          "3200:  zend_bool has_proxy_authorization = 0;",
          "3201:  zend_bool has_authorization = 0;",
          "3203:  if (strchr(uri,':') != NULL || IS_ABSOLUTE_PATH(uri, uri_len)) {",
          "3204:   uri_len = strlen(uri);",
          "3205:  } else if (VCWD_REALPATH(uri, fn) == NULL) {",
          "",
          "[Removed Lines]",
          "3196:  zval **tmp, **proxy_host, **proxy_port, *orig_context = NULL, *new_context = NULL;",
          "",
          "[Added Lines]",
          "3147:  zval *tmp, *proxy_host, *proxy_port, orig_context, new_context;",
          "3154:  ZVAL_UNDEF(&orig_context);",
          "3155:  ZVAL_UNDEF(&new_context);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3212:  if ((cache_wsdl & WSDL_CACHE_MEMORY) && SOAP_GLOBAL(mem_cache)) {",
          "3213:   sdl_cache_bucket *p;",
          "3216:    if (p->time < t - SOAP_GLOBAL(cache_ttl)) {",
          "3219:    } else {",
          "3220:     return p->sdl;",
          "3221:    }",
          "",
          "[Removed Lines]",
          "3215:   if (SUCCESS == zend_hash_find(SOAP_GLOBAL(mem_cache), uri, uri_len+1, (void*)&p)) {",
          "3218:     zend_hash_del(&EG(persistent_list), uri, uri_len+1);",
          "",
          "[Added Lines]",
          "3168:   if (NULL != (p = zend_hash_str_find_ptr(SOAP_GLOBAL(mem_cache), uri, uri_len))) {",
          "3171:     zend_hash_str_del(&EG(persistent_list), uri, uri_len);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3255:   }",
          "3256:  }",
          "3261:  } else {",
          "3262:   context = php_stream_context_alloc(TSRMLS_C);",
          "3263:  }",
          "3267:   smart_str_appends(&headers, \"User-Agent: \");",
          "3269:   smart_str_appends(&headers, \"\\r\\n\");",
          "3270:  }",
          "3277:       smart_str proxy = {0};",
          "3280:   convert_to_string(&str_port);",
          "3281:   smart_str_appends(&proxy,\"tcp://\");",
          "3283:   smart_str_appends(&proxy,\":\");",
          "3284:   smart_str_appends(&proxy,Z_STRVAL(str_port));",
          "3285:   smart_str_0(&proxy);",
          "3286:   zval_dtor(&str_port);",
          "3289:   smart_str_free(&proxy);",
          "3291:   if (!context) {",
          "3292:    context = php_stream_context_alloc(TSRMLS_C);",
          "3293:   }",
          "3295:   zval_ptr_dtor(&str_proxy);",
          "3297:   if (uri_len < sizeof(\"https://\")-1 ||",
          "3298:       strncasecmp(uri, \"https://\", sizeof(\"https://\")-1) != 0) {",
          "3303:   }",
          "3305:   has_proxy_authorization = proxy_authentication(this_ptr, &headers TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "3258:  if (SUCCESS == zend_hash_find(Z_OBJPROP_P(this_ptr),",
          "3259:    \"_stream_context\", sizeof(\"_stream_context\"), (void**)&tmp)) {",
          "3260:   context = php_stream_context_from_zval(*tmp, 0);",
          "3265:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_user_agent\", sizeof(\"_user_agent\"), (void **) &tmp) == SUCCESS &&",
          "3266:      Z_TYPE_PP(tmp) == IS_STRING && Z_STRLEN_PP(tmp) > 0) {",
          "3268:   smart_str_appends(&headers, Z_STRVAL_PP(tmp));",
          "3272:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_host\", sizeof(\"_proxy_host\"), (void **) &proxy_host) == SUCCESS &&",
          "3273:      Z_TYPE_PP(proxy_host) == IS_STRING &&",
          "3274:      zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_port\", sizeof(\"_proxy_port\"), (void **) &proxy_port) == SUCCESS &&",
          "3275:      Z_TYPE_PP(proxy_port) == IS_LONG) {",
          "3276:       zval str_port, *str_proxy;",
          "3278:   str_port = **proxy_port;",
          "3279:   zval_copy_ctor(&str_port);",
          "3282:   smart_str_appends(&proxy,Z_STRVAL_PP(proxy_host));",
          "3287:   MAKE_STD_ZVAL(str_proxy);",
          "3288:   ZVAL_STRING(str_proxy, proxy.c, 1);",
          "3294:   php_stream_context_set_option(context, \"http\", \"proxy\", str_proxy);",
          "3299:    MAKE_STD_ZVAL(str_proxy);",
          "3300:    ZVAL_BOOL(str_proxy, 1);",
          "3301:    php_stream_context_set_option(context, \"http\", \"request_fulluri\", str_proxy);",
          "3302:    zval_ptr_dtor(&str_proxy);",
          "",
          "[Added Lines]",
          "3211:  if (NULL != (tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr),",
          "3212:    \"_stream_context\", sizeof(\"_stream_context\")-1))) {",
          "3213:   context = php_stream_context_from_zval(tmp, 0);",
          "3218:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_user_agent\", sizeof(\"_user_agent\")-1)) != NULL &&",
          "3219:      Z_TYPE_P(tmp) == IS_STRING && Z_STRLEN_P(tmp) > 0) {",
          "3221:   smart_str_appends(&headers, Z_STRVAL_P(tmp));",
          "3225:  if ((proxy_host = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_proxy_host\", sizeof(\"_proxy_host\")-1)) != NULL &&",
          "3226:      Z_TYPE_P(proxy_host) == IS_STRING &&",
          "3227:      (proxy_port = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_proxy_port\", sizeof(\"_proxy_port\")-1)) != NULL &&",
          "3228:      Z_TYPE_P(proxy_port) == IS_LONG) {",
          "3229:       zval str_port, str_proxy;",
          "3231:   ZVAL_DUP(&str_port, proxy_port);",
          "3234:   smart_str_appends(&proxy,Z_STRVAL_P(proxy_host));",
          "3239:   ZVAL_STR(&str_proxy, STR_COPY(proxy.s));",
          "3245:   php_stream_context_set_option(context, \"http\", \"proxy\", &str_proxy);",
          "3250:    ZVAL_TRUE(&str_proxy);",
          "3251:    php_stream_context_set_option(context, \"http\", \"request_fulluri\", &str_proxy);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3308:  has_authorization = basic_authentication(this_ptr, &headers TSRMLS_CC);",
          "3317:   smart_str_appendl(&headers, \"Connection: close\\r\\n\", sizeof(\"Connection: close\\r\\n\")-1);",
          "3318:  }",
          "3323:   if (!context) {",
          "3324:    context = php_stream_context_alloc(TSRMLS_C);",
          "",
          "[Removed Lines]",
          "3311:  if (php_stream_context_get_option(context, \"http\", \"protocol_version\", &tmp) == FAILURE) {",
          "3312:      zval *http_version;",
          "3313:   MAKE_STD_ZVAL(http_version);",
          "3314:   ZVAL_DOUBLE(http_version, 1.1);",
          "3315:   php_stream_context_set_option(context, \"http\", \"protocol_version\", http_version);",
          "3316:   zval_ptr_dtor(&http_version);",
          "3320:  if (headers.len > 0) {",
          "3321:   zval *str_headers;",
          "",
          "[Added Lines]",
          "3260:  if ((tmp = php_stream_context_get_option(context, \"http\", \"protocol_version\")) == NULL) {",
          "3261:      zval http_version;",
          "3263:   ZVAL_DOUBLE(&http_version, 1.1);",
          "3264:   php_stream_context_set_option(context, \"http\", \"protocol_version\", &http_version);",
          "3268:  if (headers.s && headers.s->len > 0) {",
          "3269:   zval str_headers;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3327:   }",
          "3329:   smart_str_0(&headers);",
          "3333:   smart_str_free(&headers);",
          "3334:   zval_ptr_dtor(&str_headers);",
          "3335:  }",
          "3337:  if (context) {",
          "3341:  }",
          "3343:  SOAP_GLOBAL(error_code) = \"WSDL\";",
          "",
          "[Removed Lines]",
          "3330:   MAKE_STD_ZVAL(str_headers);",
          "3331:   ZVAL_STRING(str_headers, headers.c, 1);",
          "3332:   php_stream_context_set_option(context, \"http\", \"header\", str_headers);",
          "3338:   MAKE_STD_ZVAL(new_context);",
          "3339:   php_stream_context_to_zval(context, new_context);",
          "3340:   orig_context = php_libxml_switch_context(new_context TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3278:   ZVAL_STR(&str_headers, STR_COPY(headers.s));",
          "3279:   php_stream_context_set_option(context, \"http\", \"header\", &str_headers);",
          "3285:   php_stream_context_to_zval(context, &new_context);",
          "3286:   php_libxml_switch_context(&new_context, &orig_context TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3350:  SOAP_GLOBAL(error_code) = old_error_code;",
          "3352:  if (context) {",
          "3354:   zval_ptr_dtor(&new_context);",
          "3355:  }",
          "",
          "[Removed Lines]",
          "3353:   php_libxml_switch_context(orig_context TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3299:   php_libxml_switch_context(&orig_context, NULL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3374:               SOAP_GLOBAL(cache_limit) <= zend_hash_num_elements(SOAP_GLOBAL(mem_cache))) {",
          "3376:     sdl_cache_bucket *q;",
          "3378:     time_t latest = t;",
          "3386:      if (q->time < latest) {",
          "3387:       latest = q->time;",
          "3389:      }",
          "3393:     } else {",
          "3394:      return sdl;",
          "3395:     }",
          "",
          "[Removed Lines]",
          "3377:     HashPosition pos;",
          "3379:     char *key = NULL;",
          "3380:     uint key_len;",
          "3381:     ulong idx;",
          "3383:     for (zend_hash_internal_pointer_reset_ex(SOAP_GLOBAL(mem_cache), &pos);",
          "3384:       zend_hash_get_current_data_ex(SOAP_GLOBAL(mem_cache), (void **) &q, &pos) == SUCCESS;",
          "3385:       zend_hash_move_forward_ex(SOAP_GLOBAL(mem_cache), &pos)) {",
          "3388:       zend_hash_get_current_key_ex(SOAP_GLOBAL(mem_cache), &key, &key_len, &idx, 0, &pos);",
          "3390:     }",
          "3391:     if (key) {",
          "3392:      zend_hash_del(SOAP_GLOBAL(mem_cache), key, key_len);",
          "",
          "[Added Lines]",
          "3324:     zend_string *latest_key = NULL, *key;",
          "3326:     ZEND_HASH_FOREACH_STR_KEY_PTR(SOAP_GLOBAL(mem_cache), key, q) {",
          "3329:       latest_key = key;",
          "3331:     } ZEND_HASH_FOREACH_END();",
          "3332:     if (latest_key) {",
          "3333:      zend_hash_del(SOAP_GLOBAL(mem_cache), latest_key);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3400:    p.time = t;",
          "3401:    p.sdl = psdl;",
          "3406:     delete_sdl_impl(sdl);",
          "",
          "[Removed Lines]",
          "3403:    if (SUCCESS == zend_hash_update(SOAP_GLOBAL(mem_cache), uri,",
          "3404:            uri_len+1, (void*)&p, sizeof(sdl_cache_bucket), NULL)) {",
          "",
          "[Added Lines]",
          "3344:    if (NULL != zend_hash_str_update_mem(SOAP_GLOBAL(mem_cache), uri,",
          "3345:            uri_len, &p, sizeof(sdl_cache_bucket))) {",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3409:    } else {",
          "3410:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to register persistent entry\");",
          "3414:    }",
          "3415:   }",
          "",
          "[Removed Lines]",
          "3412:     delete_psdl(&p);",
          "",
          "[Added Lines]",
          "3353:     delete_psdl_int(&p);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3466:  }",
          "3467: }",
          "3470: {",
          "3473:  if (binding->location) {",
          "3474:   efree(binding->location);",
          "",
          "[Removed Lines]",
          "3469: static void delete_binding(void *data)",
          "3471:  sdlBindingPtr binding = *((sdlBindingPtr*)data);",
          "",
          "[Added Lines]",
          "3410: static void delete_binding(zval *zv)",
          "3412:  sdlBindingPtr binding = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3486:  efree(binding);",
          "3487: }",
          "3490: {",
          "3493:  if (binding->location) {",
          "3494:   free(binding->location);",
          "",
          "[Removed Lines]",
          "3489: static void delete_binding_persistent(void *data)",
          "3491:  sdlBindingPtr binding = *((sdlBindingPtr*)data);",
          "",
          "[Added Lines]",
          "3430: static void delete_binding_persistent(zval *zv)",
          "3432:  sdlBindingPtr binding = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3528:  }",
          "3529: }",
          "3532: {",
          "3535:  if (function->functionName) {",
          "3536:   efree(function->functionName);",
          "",
          "[Removed Lines]",
          "3531: static void delete_function(void *data)",
          "3533:  sdlFunctionPtr function = *((sdlFunctionPtr*)data);",
          "",
          "[Added Lines]",
          "3472: static void delete_function(zval *zv)",
          "3474:  sdlFunctionPtr function = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3567:  efree(function);",
          "3568: }",
          "3571: {",
          "3574:  if (function->functionName) {",
          "3575:   free(function->functionName);",
          "",
          "[Removed Lines]",
          "3570: static void delete_function_persistent(void *data)",
          "3572:  sdlFunctionPtr function = *((sdlFunctionPtr*)data);",
          "",
          "[Added Lines]",
          "3511: static void delete_function_persistent(zval *zv)",
          "3513:  sdlFunctionPtr function = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3606:  free(function);",
          "3607: }",
          "3610: {",
          "3612:  if (param->paramName) {",
          "3613:   efree(param->paramName);",
          "3614:  }",
          "3615:  efree(param);",
          "3616: }",
          "3619: {",
          "3621:  if (param->paramName) {",
          "3622:   free(param->paramName);",
          "3623:  }",
          "3624:  free(param);",
          "3625: }",
          "3628: {",
          "3630:  if (hdr->name) {",
          "3631:   efree(hdr->name);",
          "3632:  }",
          "",
          "[Removed Lines]",
          "3609: static void delete_parameter(void *data)",
          "3611:  sdlParamPtr param = *((sdlParamPtr*)data);",
          "3618: static void delete_parameter_persistent(void *data)",
          "3620:  sdlParamPtr param = *((sdlParamPtr*)data);",
          "3627: static void delete_header(void *data)",
          "3629:  sdlSoapBindingFunctionHeaderPtr hdr = *((sdlSoapBindingFunctionHeaderPtr*)data);",
          "",
          "[Added Lines]",
          "3550: static void delete_parameter(zval *zv)",
          "3552:  sdlParamPtr param = Z_PTR_P(zv);",
          "3559: static void delete_parameter_persistent(zval *zv)",
          "3561:  sdlParamPtr param = Z_PTR_P(zv);",
          "3568: static void delete_header_int(sdlSoapBindingFunctionHeaderPtr hdr)",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3640:  efree(hdr);",
          "3641: }",
          "3644: {",
          "3646:  if (hdr->name) {",
          "3647:   free(hdr->name);",
          "3648:  }",
          "",
          "[Removed Lines]",
          "3643: static void delete_header_persistent(void *data)",
          "3645:  sdlSoapBindingFunctionHeaderPtr hdr = *((sdlSoapBindingFunctionHeaderPtr*)data);",
          "",
          "[Added Lines]",
          "3583: static void delete_header(zval *zv)",
          "3584: {",
          "3585:  delete_header_int(Z_PTR_P(zv));",
          "3586: }",
          "3588: static void delete_header_persistent(zval *zv)",
          "3590:  sdlSoapBindingFunctionHeaderPtr hdr = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3656:  free(hdr);",
          "3657: }",
          "3660: {",
          "3662:  if (fault->name) {",
          "3663:   efree(fault->name);",
          "3664:  }",
          "",
          "[Removed Lines]",
          "3659: static void delete_fault(void *data)",
          "3661:  sdlFaultPtr fault = *((sdlFaultPtr*)data);",
          "",
          "[Added Lines]",
          "3604: static void delete_fault(zval *zv)",
          "3606:  sdlFaultPtr fault = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3677:  efree(fault);",
          "3678: }",
          "3681: {",
          "3683:  if (fault->name) {",
          "3684:   free(fault->name);",
          "3685:  }",
          "",
          "[Removed Lines]",
          "3680: static void delete_fault_persistent(void *data)",
          "3682:  sdlFaultPtr fault = *((sdlFaultPtr*)data);",
          "",
          "[Added Lines]",
          "3625: static void delete_fault_persistent(zval *zv)",
          "3627:  sdlFaultPtr fault = Z_PTR_P(zv);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3698:  free(fault);",
          "3699: }",
          "3702: {",
          "3704:  xmlFreeDoc(doc);",
          "3705: }",
          "",
          "[Removed Lines]",
          "3701: static void delete_document(void *doc_ptr)",
          "3703:  xmlDocPtr doc = *((xmlDocPtr*)doc_ptr);",
          "",
          "[Added Lines]",
          "3646: static void delete_document(zval *zv)",
          "3648:  xmlDocPtr doc = Z_PTR_P(zv);",
          "",
          "---------------"
        ],
        "ext/soap/php_sdl.h||ext/soap/php_sdl.h": [
          "File: ext/soap/php_sdl.h -> ext/soap/php_sdl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  php_stream_context *context;",
          "81: } sdlCtx;",
          "83: struct _sdlBinding {",
          "",
          "[Removed Lines]",
          "80:  zval               *old_header;",
          "",
          "[Added Lines]",
          "80:  zval               old_header;",
          "",
          "---------------"
        ],
        "ext/soap/php_soap.h||ext/soap/php_soap.h": [
          "File: ext/soap/php_soap.h -> ext/soap/php_soap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: #include \"php_packet_soap.h\"",
          "76: struct _soapMapping {",
          "79: };",
          "81: struct _soapHeader;",
          "",
          "[Removed Lines]",
          "77:  zval *to_xml;",
          "78:  zval *to_zval;",
          "",
          "[Added Lines]",
          "77:  zval to_xml;",
          "78:  zval to_zval;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:  struct _soap_class {",
          "92:   zend_class_entry *ce;",
          "94:   int argc;",
          "95:   int persistance;",
          "96:  } soap_class;",
          "100:  HashTable *typemap;",
          "101:  int        version;",
          "",
          "[Removed Lines]",
          "93:   zval **argv;",
          "98:  zval *soap_object;",
          "",
          "[Added Lines]",
          "93:   zval *argv;",
          "98:  zval soap_object;",
          "",
          "---------------"
        ],
        "ext/soap/soap.c||ext/soap/soap.c": [
          "File: ext/soap/soap.c -> ext/soap/soap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  zval                              function_name;",
          "40:  int                               mustUnderstand;",
          "41:  int                               num_params;",
          "43:  zval                              retval;",
          "44:  sdlSoapBindingFunctionHeaderPtr   hdr;",
          "45:  struct _soapHeader               *next;",
          "",
          "[Removed Lines]",
          "42:  zval                            **parameters;",
          "",
          "[Added Lines]",
          "42:  zval                             *parameters;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: static sdlFunctionPtr get_function(sdlPtr sdl, const char *function_name);",
          "59: static sdlFunctionPtr get_doc_function(sdlPtr sdl, xmlNodePtr node);",
          "62: static xmlDocPtr serialize_response_call(sdlFunctionPtr function, char *function_name,char *uri,zval *ret, soapHeader *headers, int version TSRMLS_DC);",
          "64: static xmlNodePtr serialize_parameter(sdlParamPtr param,zval *param_val,int index,char *name, int style, xmlNodePtr parent TSRMLS_DC);",
          "65: static xmlNodePtr serialize_zval(zval *val, sdlParamPtr param, char *paramName, int style, xmlNodePtr parent TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "61: static sdlFunctionPtr deserialize_function_call(sdlPtr sdl, xmlDocPtr request, char* actor, zval *function_name, int *num_params, zval **parameters[], int *version, soapHeader **headers TSRMLS_DC);",
          "63: static xmlDocPtr serialize_function_call(zval *this_ptr, sdlFunctionPtr function, char *function_name, char *uri, zval **arguments, int arg_count, int version, HashTable *soap_headers TSRMLS_DC);",
          "",
          "[Added Lines]",
          "61: static sdlFunctionPtr deserialize_function_call(sdlPtr sdl, xmlDocPtr request, char* actor, zval *function_name, int *num_params, zval **parameters, int *version, soapHeader **headers TSRMLS_DC);",
          "63: static xmlDocPtr serialize_function_call(zval *this_ptr, sdlFunctionPtr function, char *function_name, char *uri, zval *arguments, int arg_count, int version, HashTable *soap_headers TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:  int _old_soap_version = SOAP_GLOBAL(soap_version);\\",
          "78:  SOAP_GLOBAL(use_soap_error_handler) = 1;\\",
          "79:  SOAP_GLOBAL(error_code) = \"Server\";\\",
          "82: #define SOAP_SERVER_END_CODE() \\",
          "83:  SOAP_GLOBAL(use_soap_error_handler) = _old_handler;\\",
          "",
          "[Removed Lines]",
          "80:  SOAP_GLOBAL(error_object) = this_ptr;",
          "",
          "[Added Lines]",
          "80:  SOAP_GLOBAL(error_object) = getThis();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:  zend_bool _old_in_compilation = CG(in_compilation); \\",
          "94:  zend_bool _old_in_execution = EG(in_execution); \\",
          "95:  zend_execute_data *_old_current_execute_data = EG(current_execute_data); \\",
          "97:  int _bailout = 0;\\",
          "98:  SOAP_GLOBAL(use_soap_error_handler) = 1;\\",
          "99:  SOAP_GLOBAL(error_code) = \"Client\";\\",
          "101:  zend_try {",
          "103: #define SOAP_CLIENT_END_CODE() \\",
          "",
          "[Removed Lines]",
          "96:  void **_old_stack_top = EG(argument_stack)->top; \\",
          "100:  SOAP_GLOBAL(error_object) = this_ptr;\\",
          "",
          "[Added Lines]",
          "96:  zval *_old_stack_top = EG(argument_stack)->top; \\",
          "100:  SOAP_GLOBAL(error_object) = getThis();\\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106:   EG(in_execution) = _old_in_execution; \\",
          "107:   EG(current_execute_data) = _old_current_execute_data; \\",
          "108:   if (EG(exception) == NULL || \\",
          "111:    _bailout = 1;\\",
          "112:   }\\",
          "113:   if (_old_stack_top != EG(argument_stack)->top) { \\",
          "",
          "[Removed Lines]",
          "109:       Z_TYPE_P(EG(exception)) != IS_OBJECT || \\",
          "110:       !instanceof_function(Z_OBJCE_P(EG(exception)), soap_fault_class_entry TSRMLS_CC)) {\\",
          "",
          "[Added Lines]",
          "109:       !instanceof_function(zend_get_class_entry(EG(exception) TSRMLS_CC), soap_fault_class_entry TSRMLS_CC)) {\\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132: #define FETCH_THIS_SDL(ss) \\",
          "133:  { \\",
          "136:    FETCH_SDL_RES(ss,__tmp); \\",
          "137:   } else { \\",
          "138:    ss = NULL; \\",
          "139:   } \\",
          "140:  }",
          "143: #define FETCH_SDL_RES(ss,tmp) ss = (sdlPtr) zend_fetch_resource(tmp TSRMLS_CC, -1, \"sdl\", NULL, 1, le_sdl)",
          "146: #define FETCH_TYPEMAP_RES(ss,tmp) ss = (HashTable*) zend_fetch_resource(tmp TSRMLS_CC, -1, \"typemap\", NULL, 1, le_typemap)",
          "148: #define FETCH_THIS_SERVICE(ss) \\",
          "149:  { \\",
          "152:    ss = (soapServicePtr)zend_fetch_resource(tmp TSRMLS_CC, -1, \"service\", NULL, 1, le_service); \\",
          "153:   } else { \\",
          "154:    ss = NULL; \\",
          "",
          "[Removed Lines]",
          "134:   zval **__tmp; \\",
          "135:   if(FIND_SDL_PROPERTY(this_ptr,__tmp) != FAILURE) { \\",
          "142: #define FIND_SDL_PROPERTY(ss,tmp) zend_hash_find(Z_OBJPROP_P(ss), \"sdl\", sizeof(\"sdl\"), (void **)&tmp)",
          "145: #define FIND_TYPEMAP_PROPERTY(ss,tmp) zend_hash_find(Z_OBJPROP_P(ss), \"typemap\", sizeof(\"typemap\"), (void **)&tmp)",
          "150:   zval **tmp; \\",
          "151:   if (zend_hash_find(Z_OBJPROP_P(this_ptr),\"service\", sizeof(\"service\"), (void **)&tmp) != FAILURE) { \\",
          "",
          "[Added Lines]",
          "133:   zval *__tmp; \\",
          "134:   if(FIND_SDL_PROPERTY(getThis(), __tmp) != NULL) { \\",
          "141: #define FIND_SDL_PROPERTY(ss,tmp) (tmp = zend_hash_str_find(Z_OBJPROP_P(ss), \"sdl\", sizeof(\"sdl\")-1))",
          "144: #define FIND_TYPEMAP_PROPERTY(ss,tmp) (tmp = zend_hash_str_find(Z_OBJPROP_P(ss), \"typemap\", sizeof(\"typemap\")-1))",
          "149:   zval *tmp; \\",
          "150:   if ((tmp = zend_hash_str_find(Z_OBJPROP_P(getThis()),\"service\", sizeof(\"service\")-1)) != NULL) { \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "532:  zend_hash_init(&defEnc, 0, NULL, NULL, 1);",
          "533:  zend_hash_init(&defEncIndex, 0, NULL, NULL, 1);",
          "534:  zend_hash_init(&defEncNs, 0, NULL, NULL, 1);",
          "537:  i = 0;",
          "538:  do {",
          "",
          "[Removed Lines]",
          "535:  defEncNs.flags |= HASH_FLAG_BIG_DATA;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "543:    if (defaultEncoding[i].details.ns != NULL) {",
          "544:     char *ns_type;",
          "545:     spprintf(&ns_type, 0, \"%s:%s\", defaultEncoding[i].details.ns, defaultEncoding[i].details.type_str);",
          "547:     efree(ns_type);",
          "548:    } else {",
          "550:    }",
          "551:   }",
          "553:   if (!zend_hash_index_exists(&defEncIndex, defaultEncoding[i].details.type)) {",
          "555:   }",
          "556:   i++;",
          "557:  } while (defaultEncoding[i].details.type != END_KNOWN_TYPES);",
          "566: }",
          "568: static void php_soap_init_globals(zend_soap_globals *soap_globals TSRMLS_DC)",
          "",
          "[Removed Lines]",
          "546:     zend_hash_add(&defEnc, ns_type, strlen(ns_type) + 1, &enc, sizeof(encodePtr), NULL);",
          "549:     zend_hash_add(&defEnc, defaultEncoding[i].details.type_str, strlen(defaultEncoding[i].details.type_str) + 1, &enc, sizeof(encodePtr), NULL);",
          "554:    zend_hash_index_update(&defEncIndex, defaultEncoding[i].details.type, &enc, sizeof(encodePtr), NULL);",
          "560:  zend_hash_add(&defEncNs, XSD_1999_NAMESPACE, sizeof(XSD_1999_NAMESPACE), XSD_NS_PREFIX, sizeof(XSD_NS_PREFIX), NULL);",
          "561:  zend_hash_add(&defEncNs, XSD_NAMESPACE, sizeof(XSD_NAMESPACE), XSD_NS_PREFIX, sizeof(XSD_NS_PREFIX), NULL);",
          "562:  zend_hash_add(&defEncNs, XSI_NAMESPACE, sizeof(XSI_NAMESPACE), XSI_NS_PREFIX, sizeof(XSI_NS_PREFIX), NULL);",
          "563:  zend_hash_add(&defEncNs, XML_NAMESPACE, sizeof(XML_NAMESPACE), XML_NS_PREFIX, sizeof(XML_NS_PREFIX), NULL);",
          "564:  zend_hash_add(&defEncNs, SOAP_1_1_ENC_NAMESPACE, sizeof(SOAP_1_1_ENC_NAMESPACE), SOAP_1_1_ENC_NS_PREFIX, sizeof(SOAP_1_1_ENC_NS_PREFIX), NULL);",
          "565:  zend_hash_add(&defEncNs, SOAP_1_2_ENC_NAMESPACE, sizeof(SOAP_1_2_ENC_NAMESPACE), SOAP_1_2_ENC_NS_PREFIX, sizeof(SOAP_1_2_ENC_NS_PREFIX), NULL);",
          "",
          "[Added Lines]",
          "545:     zend_hash_str_add_ptr(&defEnc, ns_type, strlen(ns_type), enc);",
          "548:     zend_hash_str_add_ptr(&defEnc, defaultEncoding[i].details.type_str, strlen(defaultEncoding[i].details.type_str), enc);",
          "553:    zend_hash_index_update_ptr(&defEncIndex, defaultEncoding[i].details.type, enc);",
          "560:  zend_hash_str_add_mem(&defEncNs, XSD_1999_NAMESPACE, sizeof(XSD_1999_NAMESPACE)-1, XSD_NS_PREFIX, sizeof(XSD_NS_PREFIX));",
          "561:  zend_hash_str_add_mem(&defEncNs, XSD_NAMESPACE, sizeof(XSD_NAMESPACE)-1, XSD_NS_PREFIX, sizeof(XSD_NS_PREFIX));",
          "562:  zend_hash_str_add_mem(&defEncNs, XSI_NAMESPACE, sizeof(XSI_NAMESPACE)-1, XSI_NS_PREFIX, sizeof(XSI_NS_PREFIX));",
          "563:  zend_hash_str_add_mem(&defEncNs, XML_NAMESPACE, sizeof(XML_NAMESPACE)-1, XML_NS_PREFIX, sizeof(XML_NS_PREFIX));",
          "564:  zend_hash_str_add_mem(&defEncNs, SOAP_1_1_ENC_NAMESPACE, sizeof(SOAP_1_1_ENC_NAMESPACE)-1, SOAP_1_1_ENC_NS_PREFIX, sizeof(SOAP_1_1_ENC_NS_PREFIX));",
          "565:  zend_hash_str_add_mem(&defEncNs, SOAP_1_2_ENC_NAMESPACE, sizeof(SOAP_1_2_ENC_NAMESPACE)-1, SOAP_1_2_ENC_NS_PREFIX, sizeof(SOAP_1_2_ENC_NS_PREFIX));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "609:  return SUCCESS;",
          "610: }",
          "612: PHP_MINIT_FUNCTION(soap)",
          "613: {",
          "614:  zend_class_entry ce;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612: static void delete_sdl_res(zend_resource *res)",
          "613: {",
          "614:  delete_sdl(res->ptr);",
          "615: }",
          "617: static void delete_url_res(zend_resource *res)",
          "618: {",
          "619:  delete_url(res->ptr);",
          "620: }",
          "622: static void delete_service_res(zend_resource *res)",
          "623: {",
          "624:  delete_service(res->ptr);",
          "625: }",
          "627: static void delete_hashtable_res(zend_resource *res)",
          "628: {",
          "629:  delete_hashtable(res->ptr);",
          "630: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "657:  INIT_CLASS_ENTRY(ce, PHP_SOAP_HEADER_CLASSNAME, soap_header_functions);",
          "658:  soap_header_class_entry = zend_register_internal_class(&ce TSRMLS_CC);",
          "665:  REGISTER_LONG_CONSTANT(\"SOAP_1_1\", SOAP_1_1, CONST_CS | CONST_PERSISTENT);",
          "666:  REGISTER_LONG_CONSTANT(\"SOAP_1_2\", SOAP_1_2, CONST_CS | CONST_PERSISTENT);",
          "",
          "[Removed Lines]",
          "660:  le_sdl = register_list_destructors(delete_sdl, NULL);",
          "661:  le_url = register_list_destructors(delete_url, NULL);",
          "662:  le_service = register_list_destructors(delete_service, NULL);",
          "663:  le_typemap = register_list_destructors(delete_hashtable, NULL);",
          "",
          "[Added Lines]",
          "680:  le_sdl = register_list_destructors(delete_sdl_res, NULL);",
          "681:  le_url = register_list_destructors(delete_url_res, NULL);",
          "682:  le_service = register_list_destructors(delete_service_res, NULL);",
          "683:  le_typemap = register_list_destructors(delete_hashtable_res, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "783:  zval *data;",
          "784:  char *name;",
          "785:  int name_length;",
          "787:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zs\", &data, &name, &name_length) == FAILURE) {",
          "788:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:  zval *this_ptr;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "792:   return;",
          "793:  }",
          "795:  add_property_stringl(this_ptr, \"param_name\", name, name_length);",
          "796:  add_property_zval(this_ptr, \"param_data\", data);",
          "797: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "816:  this_ptr = getThis();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "806:  char *name, *ns;",
          "807:  int name_len, ns_len;",
          "808:  zend_bool must_understand = 0;",
          "810:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss|zbz\", &ns, &ns_len, &name, &name_len, &data, &must_understand, &actor) == FAILURE) {",
          "811:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "831:  zval *this_ptr;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "819:   return;",
          "820:  }",
          "822:  add_property_stringl(this_ptr, \"namespace\", ns, ns_len);",
          "823:  add_property_stringl(this_ptr, \"name\", name, name_len);",
          "824:  if (data) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "845:  this_ptr = getThis();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "844: {",
          "845:  char *fault_string = NULL, *fault_code = NULL, *fault_actor = NULL, *name = NULL, *fault_code_ns = NULL;",
          "846:  int fault_string_len, fault_actor_len = 0, name_len = 0, fault_code_len = 0;",
          "849:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"zs|s!z!s!z\",",
          "850:   &code,",
          "",
          "[Removed Lines]",
          "847:  zval *code = NULL, *details = NULL, *headerfault = NULL;",
          "",
          "[Added Lines]",
          "871:  zval *code = NULL, *details = NULL, *headerfault = NULL, *this_ptr;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "859:   fault_code = Z_STRVAL_P(code);",
          "860:   fault_code_len = Z_STRLEN_P(code);",
          "861:  } else if (Z_TYPE_P(code) == IS_ARRAY && zend_hash_num_elements(Z_ARRVAL_P(code)) == 2) {",
          "864:   zend_hash_internal_pointer_reset(Z_ARRVAL_P(code));",
          "866:   zend_hash_move_forward(Z_ARRVAL_P(code));",
          "872:   } else {",
          "873:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid fault code\");",
          "874:    return;",
          "",
          "[Removed Lines]",
          "862:   zval **t_ns, **t_code;",
          "865:   zend_hash_get_current_data(Z_ARRVAL_P(code), (void**)&t_ns);",
          "867:   zend_hash_get_current_data(Z_ARRVAL_P(code), (void**)&t_code);",
          "868:   if (Z_TYPE_PP(t_ns) == IS_STRING && Z_TYPE_PP(t_code) == IS_STRING) {",
          "869:     fault_code_ns = Z_STRVAL_PP(t_ns);",
          "870:     fault_code = Z_STRVAL_PP(t_code);",
          "871:     fault_code_len = Z_STRLEN_PP(t_code);",
          "",
          "[Added Lines]",
          "886:   zval *t_ns, *t_code;",
          "889:   t_ns = zend_hash_get_current_data(Z_ARRVAL_P(code));",
          "891:   t_code = zend_hash_get_current_data(Z_ARRVAL_P(code));",
          "892:   if (Z_TYPE_P(t_ns) == IS_STRING && Z_TYPE_P(t_code) == IS_STRING) {",
          "893:     fault_code_ns = Z_STRVAL_P(t_ns);",
          "894:     fault_code = Z_STRVAL_P(t_code);",
          "895:     fault_code_len = Z_STRLEN_P(t_code);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "885:   name = NULL;",
          "886:  }",
          "888:  set_soap_fault(this_ptr, fault_code_ns, fault_code, fault_string, fault_actor, details, name TSRMLS_CC);",
          "889:  if (headerfault != NULL) {",
          "890:   add_property_zval(this_ptr, \"headerfault\", headerfault);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "912:  this_ptr = getThis();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "898: PHP_METHOD(SoapFault, __toString)",
          "899: {",
          "901:  char *str;",
          "902:  int len;",
          "903:  zend_fcall_info fci;",
          "906:  if (zend_parse_parameters_none() == FAILURE) {",
          "907:   return;",
          "908:  }",
          "910:  faultcode   = zend_read_property(soap_fault_class_entry, this_ptr, \"faultcode\", sizeof(\"faultcode\")-1, 1 TSRMLS_CC);",
          "911:  faultstring = zend_read_property(soap_fault_class_entry, this_ptr, \"faultstring\", sizeof(\"faultstring\")-1, 1 TSRMLS_CC);",
          "912:  file = zend_read_property(soap_fault_class_entry, this_ptr, \"file\", sizeof(\"file\")-1, 1 TSRMLS_CC);",
          "913:  line = zend_read_property(soap_fault_class_entry, this_ptr, \"line\", sizeof(\"line\")-1, 1 TSRMLS_CC);",
          "917:  fci.size = sizeof(fci);",
          "918:  fci.function_table = &Z_OBJCE_P(getThis())->function_table;",
          "920:  fci.symbol_table = NULL;",
          "923:  fci.param_count = 0;",
          "924:  fci.params = NULL;",
          "925:  fci.no_separation = 1;",
          "927:  zend_call_function(&fci, NULL TSRMLS_CC);",
          "929:  len = spprintf(&str, 0, \"SoapFault exception: [%s] %s in %s:%ld\\nStack trace:\\n%s\",",
          "930:                 Z_STRVAL_P(faultcode), Z_STRVAL_P(faultstring), Z_STRVAL_P(file), Z_LVAL_P(line),",
          "933:  zval_ptr_dtor(&trace);",
          "936: }",
          "",
          "[Removed Lines]",
          "900:  zval *faultcode, *faultstring, *file, *line, *trace;",
          "904:  zval fname;",
          "915:  ZVAL_STRINGL(&fname, \"gettraceasstring\", sizeof(\"gettraceasstring\")-1, 0);",
          "919:  fci.function_name = &fname;",
          "921:  fci.object_ptr = getThis();",
          "922:  fci.retval_ptr_ptr = &trace;",
          "931:                 Z_STRLEN_P(trace) ? Z_STRVAL_P(trace) : \"#0 {main}\\n\");",
          "935:  RETURN_STRINGL(str, len, 0);",
          "",
          "[Added Lines]",
          "925:  zval *faultcode, *faultstring, *file, *line, trace;",
          "929:  zval *this_ptr;",
          "935:  this_ptr = getThis();",
          "943:  ZVAL_STRINGL(&fci.function_name, \"gettraceasstring\", sizeof(\"gettraceasstring\")-1);",
          "945:  fci.object = Z_OBJ(EG(This));",
          "946:  fci.retval = &trace;",
          "953:  zval_ptr_dtor(&fci.function_name);",
          "957:                 Z_STRLEN(trace) ? Z_STRVAL(trace) : \"#0 {main}\\n\");",
          "962:  RETVAL_STRINGL(str, len);",
          "963:  efree(str);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "941: PHP_METHOD(SoapVar, SoapVar)",
          "942: {",
          "944:  char *stype = NULL, *ns = NULL, *name = NULL, *namens = NULL;",
          "945:  int stype_len = 0, ns_len = 0, name_len = 0, namens_len = 0;",
          "",
          "[Removed Lines]",
          "943:  zval *data, *type;",
          "",
          "[Added Lines]",
          "971:  zval *data, *type, *this_ptr;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "948:   return;",
          "949:  }",
          "951:  if (Z_TYPE_P(type) == IS_NULL) {",
          "952:   add_property_long(this_ptr, \"enc_type\", UNKNOWN_TYPE);",
          "953:  } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "979:  this_ptr = getThis();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "978: }",
          "982: static HashTable* soap_create_typemap(sdlPtr sdl, HashTable *ht TSRMLS_DC)",
          "983: {",
          "985:  HashTable *ht2;",
          "987:  HashTable *typemap = NULL;",
          "991:   char *type_name = NULL;",
          "992:   char *type_ns = NULL;",
          "993:   zval *to_xml = NULL;",
          "994:   zval *to_zval = NULL;",
          "995:   encodePtr enc, new_enc;",
          "998:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Wrong 'typemap' option\");",
          "999:    return NULL;",
          "1000:   }",
          "1010:    if (name) {",
          "1016:      }",
          "1022:      }",
          "1029:     }",
          "1030:    }",
          "1034:   if (type_name) {",
          "1035:    smart_str nscat = {0};",
          "",
          "[Removed Lines]",
          "984:  zval **tmp;",
          "986:  HashPosition pos1, pos2;",
          "989:  zend_hash_internal_pointer_reset_ex(ht, &pos1);",
          "990:  while (zend_hash_get_current_data_ex(ht, (void**)&tmp, &pos1) == SUCCESS) {",
          "997:   if (Z_TYPE_PP(tmp) != IS_ARRAY) {",
          "1001:   ht2 = Z_ARRVAL_PP(tmp);",
          "1003:   zend_hash_internal_pointer_reset_ex(ht2, &pos2);",
          "1004:   while (zend_hash_get_current_data_ex(ht2, (void**)&tmp, &pos2) == SUCCESS) {",
          "1005:    char *name = NULL;",
          "1006:    unsigned int name_len;",
          "1007:    ulong index;",
          "1009:    zend_hash_get_current_key_ex(ht2, &name, &name_len, &index, 0, &pos2);",
          "1011:     if (name_len == sizeof(\"type_name\") &&",
          "1012:         strncmp(name, \"type_name\", sizeof(\"type_name\")-1) == 0) {",
          "1013:      if (Z_TYPE_PP(tmp) == IS_STRING) {",
          "1014:       type_name = Z_STRVAL_PP(tmp);",
          "1015:      } else if (Z_TYPE_PP(tmp) != IS_NULL) {",
          "1017:     } else if (name_len == sizeof(\"type_ns\") &&",
          "1018:         strncmp(name, \"type_ns\", sizeof(\"type_ns\")-1) == 0) {",
          "1019:      if (Z_TYPE_PP(tmp) == IS_STRING) {",
          "1020:       type_ns = Z_STRVAL_PP(tmp);",
          "1021:      } else if (Z_TYPE_PP(tmp) != IS_NULL) {",
          "1023:     } else if (name_len == sizeof(\"to_xml\") &&",
          "1024:         strncmp(name, \"to_xml\", sizeof(\"to_xml\")-1) == 0) {",
          "1025:      to_xml = *tmp;",
          "1026:     } else if (name_len == sizeof(\"from_xml\") &&",
          "1027:         strncmp(name, \"from_xml\", sizeof(\"from_xml\")-1) == 0) {",
          "1028:      to_zval = *tmp;",
          "1031:    zend_hash_move_forward_ex(ht2, &pos2);",
          "1032:   }",
          "",
          "[Added Lines]",
          "1012:  zval *tmp;",
          "1016:  ZEND_HASH_FOREACH_VAL(ht, tmp) {",
          "1022:   zend_string *name;",
          "1024:   if (Z_TYPE_P(tmp) != IS_ARRAY) {",
          "1028:   ht2 = Z_ARRVAL_P(tmp);",
          "1030:   ZEND_HASH_FOREACH_STR_KEY_VAL(ht2, name, tmp) {",
          "1032:     if (name->len == sizeof(\"type_name\") &&",
          "1033:         strncmp(name->val, \"type_name\", sizeof(\"type_name\")-1) == 0) {",
          "1034:      if (Z_TYPE_P(tmp) == IS_STRING) {",
          "1035:       type_name = Z_STRVAL_P(tmp);",
          "1036:      } else if (Z_TYPE_P(tmp) != IS_NULL) {",
          "1038:     } else if (name->len == sizeof(\"type_ns\") &&",
          "1039:         strncmp(name->val, \"type_ns\", sizeof(\"type_ns\")-1) == 0) {",
          "1040:      if (Z_TYPE_P(tmp) == IS_STRING) {",
          "1041:       type_ns = Z_STRVAL_P(tmp);",
          "1042:      } else if (Z_TYPE_P(tmp) != IS_NULL) {",
          "1044:     } else if (name->len == sizeof(\"to_xml\") &&",
          "1045:         strncmp(name->val, \"to_xml\", sizeof(\"to_xml\")-1) == 0) {",
          "1046:      to_xml = tmp;",
          "1047:     } else if (name->len == sizeof(\"from_xml\") &&",
          "1048:         strncmp(name->val, \"from_xml\", sizeof(\"from_xml\")-1) == 0) {",
          "1049:      to_zval = tmp;",
          "1052:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1061:    new_enc->details.map = emalloc(sizeof(soapMapping));",
          "1062:    memset(new_enc->details.map, 0, sizeof(soapMapping));",
          "1063:    if (to_xml) {",
          "1066:     new_enc->to_xml = to_xml_user;",
          "1070:    }",
          "1071:    if (to_zval) {",
          "1074:     new_enc->to_zval = to_zval_user;",
          "1078:    }",
          "1079:    if (!typemap) {",
          "1080:     typemap = emalloc(sizeof(HashTable));",
          "",
          "[Removed Lines]",
          "1064:     zval_add_ref(&to_xml);",
          "1065:     new_enc->details.map->to_xml = to_xml;",
          "1067:    } else if (enc->details.map && enc->details.map->to_xml) {",
          "1068:     zval_add_ref(&enc->details.map->to_xml);",
          "1069:     new_enc->details.map->to_xml = enc->details.map->to_xml;",
          "1072:     zval_add_ref(&to_zval);",
          "1073:     new_enc->details.map->to_zval = to_zval;",
          "1075:    } else if (enc->details.map && enc->details.map->to_zval) {",
          "1076:     zval_add_ref(&enc->details.map->to_zval);",
          "1077:     new_enc->details.map->to_zval = enc->details.map->to_zval;",
          "",
          "[Added Lines]",
          "1084:     ZVAL_COPY(&new_enc->details.map->to_xml, to_xml);",
          "1086:    } else if (enc->details.map && Z_TYPE(enc->details.map->to_xml) != IS_UNDEF) {",
          "1087:     ZVAL_COPY(&new_enc->details.map->to_xml, &enc->details.map->to_xml);",
          "1090:     ZVAL_COPY(&new_enc->details.map->to_zval, to_zval);",
          "1092:    } else if (enc->details.map && Z_TYPE(enc->details.map->to_zval) != IS_UNDEF) {",
          "1093:     ZVAL_COPY(&new_enc->details.map->to_zval, &enc->details.map->to_zval);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1087:    }",
          "1088:    smart_str_appends(&nscat, type_name);",
          "1089:    smart_str_0(&nscat);",
          "1091:    smart_str_free(&nscat);",
          "1092:   }",
          "1095:  return typemap;",
          "1096: }",
          "",
          "[Removed Lines]",
          "1090:    zend_hash_update(typemap, nscat.c, nscat.len + 1, &new_enc, sizeof(encodePtr), NULL);",
          "1093:   zend_hash_move_forward_ex(ht, &pos1);",
          "1094:  }",
          "",
          "[Added Lines]",
          "1106:    zend_hash_update_ptr(typemap, nscat.s, new_enc);",
          "1109:  } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1102: {",
          "1103:  soapServicePtr service;",
          "1104:  zval *wsdl = NULL, *options = NULL;",
          "1106:  int version = SOAP_1_1;",
          "1107:  long cache_wsdl;",
          "1108:  HashTable *typemap_ht = NULL;",
          "",
          "[Removed Lines]",
          "1105:  int ret;",
          "",
          "[Added Lines]",
          "1120:  zend_resource *res;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1126:  if (options != NULL) {",
          "1127:   HashTable *ht = Z_ARRVAL_P(options);",
          "1134:    } else {",
          "1135:     php_error_docref(NULL TSRMLS_CC, E_ERROR, \"'soap_version' option must be SOAP_1_1 or SOAP_1_2\");",
          "1136:    }",
          "1137:   }",
          "1142:   } else if (Z_TYPE_P(wsdl) == IS_NULL) {",
          "1143:    php_error_docref(NULL TSRMLS_CC, E_ERROR, \"'uri' option is required in nonWSDL mode\");",
          "1144:   }",
          "1149:   }",
          "1153:    xmlCharEncodingHandlerPtr encoding;",
          "1156:    if (encoding == NULL) {",
          "1158:    } else {",
          "1159:      service->encoding = encoding;",
          "1160:    }",
          "1161:   }",
          "1167:    ALLOC_HASHTABLE(service->class_map);",
          "1170:   }",
          "1176:   }",
          "1181:   }",
          "1186:   }",
          "1191:   }",
          "1193:  } else if (Z_TYPE_P(wsdl) == IS_NULL) {",
          "",
          "[Removed Lines]",
          "1128:   zval **tmp;",
          "1130:   if (zend_hash_find(ht, \"soap_version\", sizeof(\"soap_version\"), (void**)&tmp) == SUCCESS) {",
          "1131:    if (Z_TYPE_PP(tmp) == IS_LONG &&",
          "1132:        (Z_LVAL_PP(tmp) == SOAP_1_1 || Z_LVAL_PP(tmp) == SOAP_1_2)) {",
          "1133:     version = Z_LVAL_PP(tmp);",
          "1139:   if (zend_hash_find(ht, \"uri\", sizeof(\"uri\"), (void**)&tmp) == SUCCESS &&",
          "1140:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "1141:    service->uri = estrndup(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "1146:   if (zend_hash_find(ht, \"actor\", sizeof(\"actor\"), (void**)&tmp) == SUCCESS &&",
          "1147:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "1148:    service->actor = estrndup(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "1151:   if (zend_hash_find(ht, \"encoding\", sizeof(\"encoding\"), (void**)&tmp) == SUCCESS &&",
          "1152:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "1155:    encoding = xmlFindCharEncodingHandler(Z_STRVAL_PP(tmp));",
          "1157:     php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Invalid 'encoding' option - '%s'\", Z_STRVAL_PP(tmp));",
          "1163:   if (zend_hash_find(ht, \"classmap\", sizeof(\"classmap\"), (void**)&tmp) == SUCCESS &&",
          "1164:    Z_TYPE_PP(tmp) == IS_ARRAY) {",
          "1165:    zval *ztmp;",
          "1168:    zend_hash_init(service->class_map, zend_hash_num_elements((*tmp)->value.ht), NULL, ZVAL_PTR_DTOR, 0);",
          "1169:    zend_hash_copy(service->class_map, (*tmp)->value.ht, (copy_ctor_func_t) zval_add_ref, (void *) &ztmp, sizeof(zval *));",
          "1172:   if (zend_hash_find(ht, \"typemap\", sizeof(\"typemap\"), (void**)&tmp) == SUCCESS &&",
          "1173:    Z_TYPE_PP(tmp) == IS_ARRAY &&",
          "1174:    zend_hash_num_elements(Z_ARRVAL_PP(tmp)) > 0) {",
          "1175:    typemap_ht = Z_ARRVAL_PP(tmp);",
          "1178:   if (zend_hash_find(ht, \"features\", sizeof(\"features\"), (void**)&tmp) == SUCCESS &&",
          "1179:    Z_TYPE_PP(tmp) == IS_LONG) {",
          "1180:    service->features = Z_LVAL_PP(tmp);",
          "1183:   if (zend_hash_find(ht, \"cache_wsdl\", sizeof(\"cache_wsdl\"), (void**)&tmp) == SUCCESS &&",
          "1184:       Z_TYPE_PP(tmp) == IS_LONG) {",
          "1185:    cache_wsdl = Z_LVAL_PP(tmp);",
          "1188:   if (zend_hash_find(ht, \"send_errors\", sizeof(\"send_errors\"), (void**)&tmp) == SUCCESS &&",
          "1189:       (Z_TYPE_PP(tmp) == IS_BOOL || Z_TYPE_PP(tmp) == IS_LONG)) {",
          "1190:    service->send_errors = Z_LVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "1143:   zval *tmp;",
          "1145:   if ((tmp = zend_hash_str_find(ht, \"soap_version\", sizeof(\"soap_version\")-1)) != NULL) {",
          "1146:    if (Z_TYPE_P(tmp) == IS_LONG &&",
          "1147:        (Z_LVAL_P(tmp) == SOAP_1_1 || Z_LVAL_P(tmp) == SOAP_1_2)) {",
          "1148:     version = Z_LVAL_P(tmp);",
          "1154:   if ((tmp = zend_hash_str_find(ht, \"uri\", sizeof(\"uri\")-1)) != NULL &&",
          "1155:       Z_TYPE_P(tmp) == IS_STRING) {",
          "1156:    service->uri = estrndup(Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "1161:   if ((tmp = zend_hash_str_find(ht, \"actor\", sizeof(\"actor\")-1)) != NULL &&",
          "1162:       Z_TYPE_P(tmp) == IS_STRING) {",
          "1163:    service->actor = estrndup(Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "1166:   if ((tmp = zend_hash_str_find(ht, \"encoding\", sizeof(\"encoding\")-1)) != NULL &&",
          "1167:       Z_TYPE_P(tmp) == IS_STRING) {",
          "1170:    encoding = xmlFindCharEncodingHandler(Z_STRVAL_P(tmp));",
          "1172:     php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Invalid 'encoding' option - '%s'\", Z_STRVAL_P(tmp));",
          "1178:   if ((tmp = zend_hash_str_find(ht, \"classmap\", sizeof(\"classmap\")-1)) != NULL &&",
          "1179:    Z_TYPE_P(tmp) == IS_ARRAY) {",
          "1181:    zend_hash_init(service->class_map, zend_hash_num_elements(Z_ARRVAL_P(tmp)), NULL, ZVAL_PTR_DTOR, 0);",
          "1182:    zend_hash_copy(service->class_map, Z_ARRVAL_P(tmp), zval_add_ref);",
          "1185:   if ((tmp = zend_hash_str_find(ht, \"typemap\", sizeof(\"typemap\")-1)) != NULL &&",
          "1186:    Z_TYPE_P(tmp) == IS_ARRAY &&",
          "1187:    zend_hash_num_elements(Z_ARRVAL_P(tmp)) > 0) {",
          "1188:    typemap_ht = Z_ARRVAL_P(tmp);",
          "1191:   if ((tmp = zend_hash_str_find(ht, \"features\", sizeof(\"features\")-1)) != NULL &&",
          "1192:    Z_TYPE_P(tmp) == IS_LONG) {",
          "1193:    service->features = Z_LVAL_P(tmp);",
          "1196:   if ((tmp = zend_hash_str_find(ht, \"cache_wsdl\", sizeof(\"cache_wsdl\")-1)) != NULL &&",
          "1197:       Z_TYPE_P(tmp) == IS_LONG) {",
          "1198:    cache_wsdl = Z_LVAL_P(tmp);",
          "1201:   if ((tmp = zend_hash_str_find(ht, \"send_errors\", sizeof(\"send_errors\")-1)) != NULL) {",
          "1202:    if (Z_TYPE_P(tmp) == IS_FALSE) {",
          "1203:     service->send_errors = 0;",
          "1204:    } else if (Z_TYPE_P(tmp) == IS_TRUE) {",
          "1205:     service->send_errors = 1;",
          "1206:    } else if (Z_TYPE_P(tmp) == IS_LONG) {",
          "1207:     service->send_errors = Z_LVAL_P(tmp);",
          "1208:    }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1201:  zend_hash_init(service->soap_functions.ft, 0, NULL, ZVAL_PTR_DTOR, 0);",
          "1203:  if (Z_TYPE_P(wsdl) != IS_NULL) {",
          "1205:   if (service->uri == NULL) {",
          "1206:    if (service->sdl->target_ns) {",
          "1207:     service->uri = estrdup(service->sdl->target_ns);",
          "",
          "[Removed Lines]",
          "1204:   service->sdl = get_sdl(this_ptr, Z_STRVAL_P(wsdl), cache_wsdl TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1222:   service->sdl = get_sdl(getThis(), Z_STRVAL_P(wsdl), cache_wsdl TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1216:   service->typemap = soap_create_typemap(service->sdl, typemap_ht TSRMLS_CC);",
          "1217:  }",
          "1222:  SOAP_SERVER_END_CODE();",
          "1223: }",
          "",
          "[Removed Lines]",
          "1219:  ret = zend_list_insert(service, le_service TSRMLS_CC);",
          "1220:  add_property_resource(this_ptr, \"service\", ret);",
          "",
          "[Added Lines]",
          "1237:  res = zend_register_resource(NULL, service, le_service TSRMLS_CC);",
          "1238:  add_property_resource(getThis(), \"service\", res);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1260: PHP_METHOD(SoapServer, setClass)",
          "1261: {",
          "1262:  soapServicePtr service;",
          "1269:  SOAP_SERVER_BEGIN_CODE();",
          "1271:  FETCH_THIS_SERVICE(service);",
          "1274:   return;",
          "1275:  }",
          "1280:   service->type = SOAP_CLASS;",
          "1283:   service->soap_class.persistance = SOAP_PERSISTENCE_REQUEST;",
          "1284:   service->soap_class.argc = num_args;",
          "",
          "[Removed Lines]",
          "1263:  char *classname;",
          "1264:  zend_class_entry **ce;",
          "1266:  int classname_len, found, num_args = 0;",
          "1267:  zval ***argv = NULL;",
          "1273:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s*\", &classname, &classname_len, &argv, &num_args) == FAILURE) {",
          "1277:  found = zend_lookup_class(classname, classname_len, &ce TSRMLS_CC);",
          "1279:  if (found != FAILURE) {",
          "1281:   service->soap_class.ce = *ce;",
          "",
          "[Added Lines]",
          "1281:  zend_string *classname;",
          "1282:  zend_class_entry *ce;",
          "1283:  int num_args = 0;",
          "1284:  zval *argv = NULL;",
          "1290:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"S*\", &classname, &argv, &num_args) == FAILURE) {",
          "1294:  ce = zend_lookup_class(classname TSRMLS_CC);",
          "1296:  if (ce) {",
          "1298:   service->soap_class.ce = ce;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1286:    int i;",
          "1287:    service->soap_class.argv = safe_emalloc(sizeof(zval), service->soap_class.argc, 0);",
          "1288:    for (i = 0;i < service->soap_class.argc;i++) {",
          "1291:    }",
          "1292:   }",
          "1293:  } else {",
          "1295:   return;",
          "1296:  }",
          "",
          "[Removed Lines]",
          "1289:     service->soap_class.argv[i] = *(argv[i]);",
          "1290:     zval_add_ref(&service->soap_class.argv[i]);",
          "1294:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Tried to set a non existent class (%s)\", classname);",
          "",
          "[Added Lines]",
          "1306:     ZVAL_COPY(&service->soap_class.argv[i], &argv[i]);",
          "1310:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Tried to set a non existent class (%s)\", classname->val);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1322:  service->type = SOAP_OBJECT;",
          "1327:  SOAP_SERVER_END_CODE();",
          "1328: }",
          "",
          "[Removed Lines]",
          "1324:  MAKE_STD_ZVAL(service->soap_object);",
          "1325:  MAKE_COPY_ZVAL(&obj, service->soap_object);",
          "",
          "[Added Lines]",
          "1340:  ZVAL_COPY(&service->soap_object, obj);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1347:  array_init(return_value);",
          "1348:  if (service->type == SOAP_OBJECT) {",
          "1350:  } else if (service->type == SOAP_CLASS) {",
          "1351:   ft = &service->soap_class.ce->function_table;",
          "1352:  } else if (service->soap_functions.functions_all == TRUE) {",
          "1353:   ft = EG(function_table);",
          "1354:  } else if (service->soap_functions.ft != NULL) {",
          "1363:  }",
          "1364:  if (ft != NULL) {",
          "1365:   zend_function *f;",
          "1369:    if ((service->type != SOAP_OBJECT && service->type != SOAP_CLASS) || (f->common.fn_flags & ZEND_ACC_PUBLIC)) {",
          "1371:    }",
          "1374:  }",
          "1376:  SOAP_SERVER_END_CODE();",
          "",
          "[Removed Lines]",
          "1349:   ft = &(Z_OBJCE_P(service->soap_object)->function_table);",
          "1355:   zval **name;",
          "1356:   HashPosition pos;",
          "1358:   zend_hash_internal_pointer_reset_ex(service->soap_functions.ft, &pos);",
          "1359:   while (zend_hash_get_current_data_ex(service->soap_functions.ft, (void **)&name, &pos) != FAILURE) {",
          "1360:    add_next_index_string(return_value, Z_STRVAL_PP(name));",
          "1361:    zend_hash_move_forward_ex(service->soap_functions.ft, &pos);",
          "1362:   }",
          "1366:   HashPosition pos;",
          "1367:   zend_hash_internal_pointer_reset_ex(ft, &pos);",
          "1368:   while (zend_hash_get_current_data_ex(ft, (void **)&f, &pos) != FAILURE) {",
          "1370:     add_next_index_string(return_value, f->common.function_name);",
          "1372:    zend_hash_move_forward_ex(ft, &pos);",
          "1373:   }",
          "",
          "[Added Lines]",
          "1364:   ft = &(Z_OBJCE(service->soap_object)->function_table);",
          "1370:   zval *name;",
          "1372:   ZEND_HASH_FOREACH_VAL(service->soap_functions.ft, name) {",
          "1373:    add_next_index_str(return_value, STR_COPY(Z_STR_P(name)));",
          "1374:   } ZEND_HASH_FOREACH_END();",
          "1379:   ZEND_HASH_FOREACH_PTR(ft, f) {",
          "1381:     add_next_index_str(return_value, STR_COPY(f->common.function_name));",
          "1383:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1383: PHP_METHOD(SoapServer, addFunction)",
          "1384: {",
          "1385:  soapServicePtr service;",
          "1389:  SOAP_SERVER_BEGIN_CODE();",
          "",
          "[Removed Lines]",
          "1386:  zval *function_name, *function_copy;",
          "1387:  HashPosition pos;",
          "",
          "[Added Lines]",
          "1396:  zval *function_name, function_copy;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1400:   if (service->type == SOAP_FUNCTIONS) {",
          "1403:    if (service->soap_functions.ft == NULL) {",
          "1404:     service->soap_functions.functions_all = FALSE;",
          "",
          "[Removed Lines]",
          "1399:  if (function_name->type == IS_ARRAY) {",
          "1401:    zval **tmp_function, *function_copy;",
          "",
          "[Added Lines]",
          "1408:  if (Z_TYPE_P(function_name) == IS_ARRAY) {",
          "1410:    zval *tmp_function;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1406:     zend_hash_init(service->soap_functions.ft, zend_hash_num_elements(Z_ARRVAL_P(function_name)), NULL, ZVAL_PTR_DTOR, 0);",
          "1407:    }",
          "1413:     zend_function *f;",
          "1416:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Tried to add a function that isn't a string\");",
          "1417:      return;",
          "1418:     }",
          "1426:      return;",
          "1427:     }",
          "1436:   }",
          "1440:   zend_function *f;",
          "1447:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Tried to add a non existent function '%s'\", Z_STRVAL_P(function_name));",
          "1448:    return;",
          "1449:   }",
          "",
          "[Removed Lines]",
          "1409:    zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(function_name), &pos);",
          "1410:    while (zend_hash_get_current_data_ex(Z_ARRVAL_P(function_name), (void **)&tmp_function, &pos) != FAILURE) {",
          "1411:     char *key;",
          "1412:     int   key_len;",
          "1415:     if (Z_TYPE_PP(tmp_function) != IS_STRING) {",
          "1420:     key_len = Z_STRLEN_PP(tmp_function);",
          "1421:     key = emalloc(key_len + 1);",
          "1422:     zend_str_tolower_copy(key, Z_STRVAL_PP(tmp_function), key_len);",
          "1424:     if (zend_hash_find(EG(function_table), key, key_len+1, (void**)&f) == FAILURE) {",
          "1425:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Tried to add a non existent function '%s'\", Z_STRVAL_PP(tmp_function));",
          "1429:     MAKE_STD_ZVAL(function_copy);",
          "1430:     ZVAL_STRING(function_copy, f->common.function_name, 1);",
          "1431:     zend_hash_update(service->soap_functions.ft, key, key_len+1, &function_copy, sizeof(zval *), NULL);",
          "1433:     efree(key);",
          "1434:     zend_hash_move_forward_ex(Z_ARRVAL_P(function_name), &pos);",
          "1435:    }",
          "1437:  } else if (function_name->type == IS_STRING) {",
          "1438:   char *key;",
          "1439:   int   key_len;",
          "1442:   key_len = Z_STRLEN_P(function_name);",
          "1443:   key = emalloc(key_len + 1);",
          "1444:   zend_str_tolower_copy(key, Z_STRVAL_P(function_name), key_len);",
          "1446:   if (zend_hash_find(EG(function_table), key, key_len+1, (void**)&f) == FAILURE) {",
          "",
          "[Added Lines]",
          "1418:    ZEND_HASH_FOREACH_VAL(Z_ARRVAL_P(function_name), tmp_function) {",
          "1419:     zend_string *key;",
          "1422:     if (Z_TYPE_P(tmp_function) != IS_STRING) {",
          "1427:     key = STR_ALLOC(Z_STRLEN_P(tmp_function), 0);",
          "1428:     zend_str_tolower_copy(key->val, Z_STRVAL_P(tmp_function), Z_STRLEN_P(tmp_function));",
          "1430:     if ((f = zend_hash_find_ptr(EG(function_table), key)) == NULL) {",
          "1431:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Tried to add a non existent function '%s'\", Z_STRVAL_P(tmp_function));",
          "1435:     ZVAL_STR(&function_copy, STR_COPY(f->common.function_name));",
          "1436:     zend_hash_update(service->soap_functions.ft, key, &function_copy);",
          "1438:     STR_RELEASE(key);",
          "1439:    } ZEND_HASH_FOREACH_END();",
          "1441:  } else if (Z_TYPE_P(function_name) == IS_STRING) {",
          "1442:   zend_string *key;",
          "1445:   key = STR_ALLOC(Z_STRLEN_P(function_name), 0);",
          "1446:   zend_str_tolower_copy(key->val, Z_STRVAL_P(function_name), Z_STRLEN_P(function_name));",
          "1448:   if ((f = zend_hash_find_ptr(EG(function_table), key)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1453:    zend_hash_init(service->soap_functions.ft, 0, NULL, ZVAL_PTR_DTOR, 0);",
          "1454:   }",
          "1461:   if (Z_LVAL_P(function_name) == SOAP_FUNCTIONS_ALL) {",
          "1462:    if (service->soap_functions.ft != NULL) {",
          "1463:     zend_hash_destroy(service->soap_functions.ft);",
          "",
          "[Removed Lines]",
          "1456:   MAKE_STD_ZVAL(function_copy);",
          "1457:   ZVAL_STRING(function_copy, f->common.function_name, 1);",
          "1458:   zend_hash_update(service->soap_functions.ft, key, key_len+1, &function_copy, sizeof(zval *), NULL);",
          "1459:   efree(key);",
          "1460:  } else if (function_name->type == IS_LONG) {",
          "",
          "[Added Lines]",
          "1458:   ZVAL_STR(&function_copy, STR_COPY(f->common.function_name));",
          "1459:   zend_hash_update(service->soap_functions.ft, key, &function_copy);",
          "1460:   STR_RELEASE(key);",
          "1461:  } else if (Z_TYPE_P(function_name) == IS_LONG) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1484:  sdlPtr old_sdl = NULL;",
          "1485:  soapServicePtr service;",
          "1486:  xmlDocPtr doc_request=NULL, doc_return;",
          "1488:  char *fn_name, cont_len[30];",
          "1489:  int num_params = 0, size, i, call_status = 0;",
          "1490:  xmlChar *buf;",
          "",
          "[Removed Lines]",
          "1487:  zval function_name, **params, *soap_obj, *retval;",
          "",
          "[Added Lines]",
          "1488:  zval function_name, *params, *soap_obj, retval;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1519:    sapi_add_header(hdr, sizeof(\"Location: \")+strlen(service->sdl->source)-1, 1);",
          "1520:    efree(hdr);",
          "1528:    sapi_add_header(\"Content-Type: text/xml; charset=utf-8\", sizeof(\"Content-Type: text/xml; charset=utf-8\")-1, 1);",
          "1531:    if (call_user_function(EG(function_table), NULL, &readfile, &readfile_ret, 1, &param  TSRMLS_CC) == FAILURE) {",
          "1532:     soap_server_fault(\"Server\", \"Couldn't find WSDL\", NULL, NULL, NULL TSRMLS_CC);",
          "1533:    }",
          "",
          "[Removed Lines]",
          "1522:    zval readfile, readfile_ret, *param;",
          "1524:    INIT_ZVAL(readfile);",
          "1525:    INIT_ZVAL(readfile_ret);",
          "1526:    MAKE_STD_ZVAL(param);",
          "1529:    ZVAL_STRING(param, service->sdl->source, 1);",
          "1530:    ZVAL_STRING(&readfile, \"readfile\", 1);",
          "",
          "[Added Lines]",
          "1523:    zval readfile, readfile_ret, param;",
          "1526:    ZVAL_STRING(&param, service->sdl->source);",
          "1527:    ZVAL_STRING(&readfile, \"readfile\");",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1554:   }",
          "1555:  }",
          "1559:  if (php_output_start_default(TSRMLS_C) != SUCCESS) {",
          "1560:   php_error_docref(NULL TSRMLS_CC, E_ERROR,\"ob_start failed\");",
          "",
          "[Removed Lines]",
          "1557:  ALLOC_INIT_ZVAL(retval);",
          "",
          "[Added Lines]",
          "1554:  ZVAL_NULL(&retval);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1563:  if (ZEND_NUM_ARGS() == 0) {",
          "1564:   if (SG(request_info).request_body && 0 == php_stream_rewind(SG(request_info).request_body)) {",
          "1566:    php_stream_filter *zf = NULL;",
          "1577:     ) {",
          "1578:      zval filter_params;",
          "1581:      array_init_size(&filter_params, 1);",
          "",
          "[Removed Lines]",
          "1565:    zval **server_vars, **encoding;",
          "1568:    zend_is_auto_global(\"_SERVER\", sizeof(\"_SERVER\")-1 TSRMLS_CC);",
          "1569:    if (zend_hash_find(&EG(symbol_table), \"_SERVER\", sizeof(\"_SERVER\"), (void **) &server_vars) == SUCCESS &&",
          "1570:        Z_TYPE_PP(server_vars) == IS_ARRAY &&",
          "1571:        zend_hash_find(Z_ARRVAL_PP(server_vars), \"HTTP_CONTENT_ENCODING\", sizeof(\"HTTP_CONTENT_ENCODING\"), (void **) &encoding)==SUCCESS &&",
          "1572:        Z_TYPE_PP(encoding) == IS_STRING) {",
          "1574:     if (strcmp(Z_STRVAL_PP(encoding),\"gzip\") == 0",
          "1575:     ||  strcmp(Z_STRVAL_PP(encoding),\"x-gzip\") == 0",
          "1576:     ||  strcmp(Z_STRVAL_PP(encoding),\"deflate\") == 0",
          "1580:      INIT_PZVAL(&filter_params);",
          "",
          "[Added Lines]",
          "1562:    zval *server_vars, *encoding;",
          "1564:    zend_string *server = STR_INIT(\"_SERVER\", sizeof(\"_SERVER\")-1, 0);",
          "1566:    zend_is_auto_global(server TSRMLS_CC);",
          "1567:    if ((server_vars = zend_hash_find(&EG(symbol_table).ht, server)) != NULL &&",
          "1568:        Z_TYPE_P(server_vars) == IS_ARRAY &&",
          "1569:        (encoding = zend_hash_str_find(Z_ARRVAL_P(server_vars), \"HTTP_CONTENT_ENCODING\", sizeof(\"HTTP_CONTENT_ENCODING\")-1)) != NULL &&",
          "1570:        Z_TYPE_P(encoding) == IS_STRING) {",
          "1572:     if (strcmp(Z_STRVAL_P(encoding),\"gzip\") == 0",
          "1573:     ||  strcmp(Z_STRVAL_P(encoding),\"x-gzip\") == 0",
          "1574:     ||  strcmp(Z_STRVAL_P(encoding),\"deflate\") == 0",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1588:       php_stream_filter_append(&SG(request_info).request_body->readfilters, zf);",
          "1589:      } else {",
          "1590:       php_error_docref(NULL TSRMLS_CC, E_WARNING,\"Can't uncompress compressed request\");",
          "1591:       return;",
          "1592:      }",
          "1593:     } else {",
          "1595:      return;",
          "1596:     }",
          "1597:    }",
          "1599:    doc_request = soap_xmlParseFile(\"php://input\" TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "1594:      php_error_docref(NULL TSRMLS_CC, E_WARNING,\"Request is compressed with unknown compression '%s'\",Z_STRVAL_PP(encoding));",
          "",
          "[Added Lines]",
          "1588:       STR_RELEASE(server);",
          "1592:      php_error_docref(NULL TSRMLS_CC, E_WARNING,\"Request is compressed with unknown compression '%s'\",Z_STRVAL_P(encoding));",
          "1593:      STR_RELEASE(server);",
          "1597:    STR_RELEASE(server);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1640:  xmlFreeDoc(doc_request);",
          "1642:  if (EG(exception)) {",
          "1643:   php_output_discard(TSRMLS_C);",
          "1647:   }",
          "1648:   goto fail;",
          "1649:  }",
          "",
          "[Removed Lines]",
          "1644:   if (Z_TYPE_P(EG(exception)) == IS_OBJECT &&",
          "1645:       instanceof_function(Z_OBJCE_P(EG(exception)), soap_fault_class_entry TSRMLS_CC)) {",
          "1646:    soap_server_fault_ex(function, EG(exception), NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1643:   zval exception_object;",
          "1645:   ZVAL_OBJ(&exception_object, EG(exception));",
          "1647:   if (instanceof_function(Z_OBJCE(exception_object), soap_fault_class_entry TSRMLS_CC)) {",
          "1648:    soap_server_fault_ex(function, &exception_object, NULL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1653:  soap_obj = NULL;",
          "1654:  if (service->type == SOAP_OBJECT) {",
          "1656:   function_table = &((Z_OBJCE_P(soap_obj))->function_table);",
          "1657:  } else if (service->type == SOAP_CLASS) {",
          "1658: #if HAVE_PHP_SESSION && !defined(COMPILE_DL_SESSION)",
          "1660:   if (service->soap_class.persistance == SOAP_PERSISTENCE_SESSION) {",
          "1663:    if (PS(session_status) != php_session_active &&",
          "1664:        PS(session_status) != php_session_disabled) {",
          "",
          "[Removed Lines]",
          "1655:   soap_obj = service->soap_object;",
          "1661:    zval **tmp_soap;",
          "",
          "[Added Lines]",
          "1657:   soap_obj = &service->soap_object;",
          "1663:    zval *tmp_soap;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1666:    }",
          "1673:    }",
          "1674:   }",
          "1675: #endif",
          "1677:   if (soap_obj == NULL) {",
          "1685:     zval c_ret, constructor;",
          "1691:     if (call_user_function(NULL, &tmp_soap, &constructor, &c_ret, service->soap_class.argc, service->soap_class.argv TSRMLS_CC) == FAILURE) {",
          "1692:      php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Error calling constructor\");",
          "1693:     }",
          "1694:     if (EG(exception)) {",
          "1695:      php_output_discard(TSRMLS_C);",
          "1699:      }",
          "1700:      zval_dtor(&constructor);",
          "1701:      zval_dtor(&c_ret);",
          "",
          "[Removed Lines]",
          "1669:    if (zend_hash_find(Z_ARRVAL_P(PS(http_session_vars)), \"_bogus_session_name\", sizeof(\"_bogus_session_name\"), (void **) &tmp_soap) == SUCCESS &&",
          "1670:        Z_TYPE_PP(tmp_soap) == IS_OBJECT &&",
          "1671:        Z_OBJCE_PP(tmp_soap) == service->soap_class.ce) {",
          "1672:     soap_obj = *tmp_soap;",
          "1678:    zval *tmp_soap;",
          "1680:    MAKE_STD_ZVAL(tmp_soap);",
          "1681:    object_init_ex(tmp_soap, service->soap_class.ce);",
          "1684:    if (zend_hash_exists(&Z_OBJCE_P(tmp_soap)->function_table, ZEND_CONSTRUCTOR_FUNC_NAME, sizeof(ZEND_CONSTRUCTOR_FUNC_NAME))) {",
          "1687:     INIT_ZVAL(c_ret);",
          "1688:     INIT_ZVAL(constructor);",
          "1690:     ZVAL_STRING(&constructor, ZEND_CONSTRUCTOR_FUNC_NAME, 1);",
          "1696:      if (Z_TYPE_P(EG(exception)) == IS_OBJECT &&",
          "1697:          instanceof_function(Z_OBJCE_P(EG(exception)), soap_fault_class_entry TSRMLS_CC)) {",
          "1698:       soap_server_fault_ex(function, EG(exception), NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1671:    if ((tmp_soap = zend_hash_str_find(Z_ARRVAL(PS(http_session_vars)), \"_bogus_session_name\", sizeof(\"_bogus_session_name\")-1)) != NULL &&",
          "1672:        Z_TYPE_P(tmp_soap) == IS_OBJECT &&",
          "1673:        Z_OBJCE_P(tmp_soap) == service->soap_class.ce) {",
          "1674:     soap_obj = tmp_soap;",
          "1680:    zval tmp_soap;",
          "1682:    object_init_ex(&tmp_soap, service->soap_class.ce);",
          "1685:    if (zend_hash_str_exists(&Z_OBJCE(tmp_soap)->function_table, ZEND_CONSTRUCTOR_FUNC_NAME, sizeof(ZEND_CONSTRUCTOR_FUNC_NAME)-1)) {",
          "1688:     ZVAL_STRING(&constructor, ZEND_CONSTRUCTOR_FUNC_NAME);",
          "1693:      zval exception_object;",
          "1695:      ZVAL_OBJ(&exception_object, EG(exception));",
          "1697:      if (instanceof_function(Z_OBJCE(exception_object), soap_fault_class_entry TSRMLS_CC)) {",
          "1698:       soap_server_fault_ex(function, &exception_object, NULL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1705:     zval_dtor(&constructor);",
          "1706:     zval_dtor(&c_ret);",
          "1707:    } else {",
          "1709:     char *class_name = emalloc(class_name_len+1);",
          "1713:      zval c_ret, constructor;",
          "1719:      if (call_user_function(NULL, &tmp_soap, &constructor, &c_ret, service->soap_class.argc, service->soap_class.argv TSRMLS_CC) == FAILURE) {",
          "1720:       php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Error calling constructor\");",
          "1721:      }",
          "1723:      if (EG(exception)) {",
          "1724:       php_output_discard(TSRMLS_C);",
          "1728:       }",
          "1729:       zval_dtor(&constructor);",
          "1730:       zval_dtor(&c_ret);",
          "",
          "[Removed Lines]",
          "1708:     int class_name_len = strlen(service->soap_class.ce->name);",
          "1711:     memcpy(class_name, service->soap_class.ce->name,class_name_len+1);",
          "1712:     if (zend_hash_exists(&Z_OBJCE_P(tmp_soap)->function_table, php_strtolower(class_name, class_name_len), class_name_len+1)) {",
          "1715:      INIT_ZVAL(c_ret);",
          "1716:      INIT_ZVAL(constructor);",
          "1718:      ZVAL_STRING(&constructor, service->soap_class.ce->name, 1);",
          "1725:       if (Z_TYPE_P(EG(exception)) == IS_OBJECT &&",
          "1726:           instanceof_function(Z_OBJCE_P(EG(exception)), soap_fault_class_entry TSRMLS_CC)) {",
          "1727:        soap_server_fault_ex(function, EG(exception), NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1708:     int class_name_len = service->soap_class.ce->name->len;",
          "1711:     memcpy(class_name, service->soap_class.ce->name->val, class_name_len+1);",
          "1712:     if (zend_hash_str_exists(&Z_OBJCE(tmp_soap)->function_table, php_strtolower(class_name, class_name_len), class_name_len)) {",
          "1715:      ZVAL_STR(&constructor, STR_COPY(service->soap_class.ce->name));",
          "1721:       zval exception_object;",
          "1723:       ZVAL_OBJ(&exception_object, EG(exception));",
          "1725:       if (instanceof_function(Z_OBJCE(exception_object), soap_fault_class_entry TSRMLS_CC)) {",
          "1726:        soap_server_fault_ex(function, &exception_object, NULL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1741: #if HAVE_PHP_SESSION && !defined(COMPILE_DL_SESSION)",
          "1743:    if (service->soap_class.persistance == SOAP_PERSISTENCE_SESSION) {",
          "1747:     }",
          "1748:    } else {",
          "1750:    }",
          "1751: #else",
          "1753: #endif",
          "1755:   }",
          "",
          "[Removed Lines]",
          "1744:     zval **tmp_soap_pp;",
          "1745:     if (zend_hash_update(Z_ARRVAL_P(PS(http_session_vars)), \"_bogus_session_name\", sizeof(\"_bogus_session_name\"), &tmp_soap, sizeof(zval *), (void **)&tmp_soap_pp) == SUCCESS) {",
          "1746:      soap_obj = *tmp_soap_pp;",
          "1749:     soap_obj = tmp_soap;",
          "1752:    soap_obj = tmp_soap;",
          "",
          "[Added Lines]",
          "1743:     zval *tmp_soap_pp;",
          "1744:     if ((tmp_soap_pp = zend_hash_str_update(Z_ARRVAL(PS(http_session_vars)), \"_bogus_session_name\", sizeof(\"_bogus_session_name\")-1, &tmp_soap)) != NULL) {",
          "1745:      soap_obj = tmp_soap_pp;",
          "1748:     soap_obj = &tmp_soap;",
          "1751:    soap_obj = &tmp_soap;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1781:    }",
          "1782: #endif",
          "1783:    fn_name = estrndup(Z_STRVAL(h->function_name),Z_STRLEN(h->function_name));",
          "1785:        ((service->type == SOAP_CLASS || service->type == SOAP_OBJECT) &&",
          "1787:     if (service->type == SOAP_CLASS || service->type == SOAP_OBJECT) {",
          "1789:     } else {",
          "1790:      call_status = call_user_function(EG(function_table), NULL, &h->function_name, &h->retval, h->num_params, h->parameters TSRMLS_CC);",
          "1791:     }",
          "",
          "[Removed Lines]",
          "1784:    if (zend_hash_exists(function_table, php_strtolower(fn_name, Z_STRLEN(h->function_name)), Z_STRLEN(h->function_name) + 1) ||",
          "1786:         zend_hash_exists(function_table, ZEND_CALL_FUNC_NAME, sizeof(ZEND_CALL_FUNC_NAME)))) {",
          "1788:      call_status = call_user_function(NULL, &soap_obj, &h->function_name, &h->retval, h->num_params, h->parameters TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1783:    if (zend_hash_str_exists(function_table, php_strtolower(fn_name, Z_STRLEN(h->function_name)), Z_STRLEN(h->function_name)) ||",
          "1785:         zend_hash_str_exists(function_table, ZEND_CALL_FUNC_NAME, sizeof(ZEND_CALL_FUNC_NAME)-1))) {",
          "1787:      call_status = call_user_function(NULL, soap_obj, &h->function_name, &h->retval, h->num_params, h->parameters TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1795:     }",
          "1796:     if (Z_TYPE(h->retval) == IS_OBJECT &&",
          "1797:         instanceof_function(Z_OBJCE(h->retval), soap_fault_class_entry TSRMLS_CC)) {",
          "1803:      }",
          "1804:      php_output_discard(TSRMLS_C);",
          "1805:      soap_server_fault_ex(function, &h->retval, h TSRMLS_CC);",
          "1806:      efree(fn_name);",
          "1808:      goto fail;",
          "1809:     } else if (EG(exception)) {",
          "1810:      php_output_discard(TSRMLS_C);",
          "1818:       }",
          "1820:      }",
          "1821:      efree(fn_name);",
          "1823:      goto fail;",
          "1824:     }",
          "1825:    } else if (h->mustUnderstand) {",
          "",
          "[Removed Lines]",
          "1798:      zval *headerfault = NULL, **tmp;",
          "1800:      if (zend_hash_find(Z_OBJPROP(h->retval), \"headerfault\", sizeof(\"headerfault\"), (void**)&tmp) == SUCCESS &&",
          "1801:          Z_TYPE_PP(tmp) != IS_NULL) {",
          "1802:       headerfault = *tmp;",
          "1807:      if (service->type == SOAP_CLASS && soap_obj) {zval_ptr_dtor(&soap_obj);}",
          "1811:      if (Z_TYPE_P(EG(exception)) == IS_OBJECT &&",
          "1812:          instanceof_function(Z_OBJCE_P(EG(exception)), soap_fault_class_entry TSRMLS_CC)) {",
          "1813:       zval *headerfault = NULL, **tmp;",
          "1815:       if (zend_hash_find(Z_OBJPROP_P(EG(exception)), \"headerfault\", sizeof(\"headerfault\"), (void**)&tmp) == SUCCESS &&",
          "1816:           Z_TYPE_PP(tmp) != IS_NULL) {",
          "1817:        headerfault = *tmp;",
          "1819:       soap_server_fault_ex(function, EG(exception), h TSRMLS_CC);",
          "1822:      if (service->type == SOAP_CLASS && soap_obj) {zval_ptr_dtor(&soap_obj);}",
          "",
          "[Added Lines]",
          "1798:      zval *tmp;",
          "1800:      if ((tmp = zend_hash_str_find(Z_OBJPROP(h->retval), \"headerfault\", sizeof(\"headerfault\")-1)) != NULL &&",
          "1801:          Z_TYPE_P(tmp) != IS_NULL) {",
          "1807:      if (service->type == SOAP_CLASS && soap_obj) {zval_ptr_dtor(soap_obj);}",
          "1810:      zval exception_object;",
          "1812:      ZVAL_OBJ(&exception_object, EG(exception));",
          "1814:      if (instanceof_function(Z_OBJCE(exception_object), soap_fault_class_entry TSRMLS_CC)) {",
          "1816:       zval *tmp;",
          "1818:       if ((tmp = zend_hash_str_find(Z_OBJPROP(exception_object), \"headerfault\", sizeof(\"headerfault\")-1)) != NULL &&",
          "1819:           Z_TYPE_P(tmp) != IS_NULL) {",
          "1822:       soap_server_fault_ex(function, &exception_object, h TSRMLS_CC);",
          "1825:      if (service->type == SOAP_CLASS && soap_obj) {zval_ptr_dtor(soap_obj);}",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1830:  }",
          "1832:  fn_name = estrndup(Z_STRVAL(function_name),Z_STRLEN(function_name));",
          "1834:      ((service->type == SOAP_CLASS || service->type == SOAP_OBJECT) &&",
          "1836:   if (service->type == SOAP_CLASS || service->type == SOAP_OBJECT) {",
          "1838:    if (service->type == SOAP_CLASS) {",
          "1839: #if HAVE_PHP_SESSION && !defined(COMPILE_DL_SESSION)",
          "1840:     if (service->soap_class.persistance != SOAP_PERSISTENCE_SESSION) {",
          "1842:      soap_obj = NULL;",
          "1843:     }",
          "1844: #else",
          "1846:     soap_obj = NULL;",
          "1847: #endif",
          "1848:    }",
          "1849:   } else {",
          "1851:   }",
          "1852:  } else {",
          "1853:   php_error(E_ERROR, \"Function '%s' doesn't exist\", Z_STRVAL(function_name));",
          "",
          "[Removed Lines]",
          "1833:  if (zend_hash_exists(function_table, php_strtolower(fn_name, Z_STRLEN(function_name)), Z_STRLEN(function_name) + 1) ||",
          "1835:       zend_hash_exists(function_table, ZEND_CALL_FUNC_NAME, sizeof(ZEND_CALL_FUNC_NAME)))) {",
          "1837:    call_status = call_user_function(NULL, &soap_obj, &function_name, retval, num_params, params TSRMLS_CC);",
          "1841:      zval_ptr_dtor(&soap_obj);",
          "1845:     zval_ptr_dtor(&soap_obj);",
          "1850:    call_status = call_user_function(EG(function_table), NULL, &function_name, retval, num_params, params TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1836:  if (zend_hash_str_exists(function_table, php_strtolower(fn_name, Z_STRLEN(function_name)), Z_STRLEN(function_name)) ||",
          "1838:       zend_hash_str_exists(function_table, ZEND_CALL_FUNC_NAME, sizeof(ZEND_CALL_FUNC_NAME)-1))) {",
          "1840:    call_status = call_user_function(NULL, soap_obj, &function_name, &retval, num_params, params TSRMLS_CC);",
          "1844:      zval_ptr_dtor(soap_obj);",
          "1848:     zval_ptr_dtor(soap_obj);",
          "1853:    call_status = call_user_function(EG(function_table), NULL, &function_name, &retval, num_params, params TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1855:  efree(fn_name);",
          "1857:  if (EG(exception)) {",
          "1858:   php_output_discard(TSRMLS_C);",
          "1862:   }",
          "1863:   if (service->type == SOAP_CLASS) {",
          "1864: #if HAVE_PHP_SESSION && !defined(COMPILE_DL_SESSION)",
          "",
          "[Removed Lines]",
          "1859:   if (Z_TYPE_P(EG(exception)) == IS_OBJECT &&",
          "1860:       instanceof_function(Z_OBJCE_P(EG(exception)), soap_fault_class_entry TSRMLS_CC)) {",
          "1861:    soap_server_fault_ex(function, EG(exception), NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1861:   zval exception_object;",
          "1863:   ZVAL_OBJ(&exception_object, EG(exception));",
          "1865:   if (instanceof_function(Z_OBJCE(exception_object), soap_fault_class_entry TSRMLS_CC)) {",
          "1866:    soap_server_fault_ex(function, &exception_object, NULL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1866: #else",
          "1867:    if (soap_obj) {",
          "1868: #endif",
          "1870:    }",
          "1871:   }",
          "1872:   goto fail;",
          "",
          "[Removed Lines]",
          "1869:      zval_ptr_dtor(&soap_obj);",
          "",
          "[Added Lines]",
          "1874:     zval_ptr_dtor(soap_obj);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1875:  if (call_status == SUCCESS) {",
          "1876:   char *response_name;",
          "1880:    php_output_discard(TSRMLS_C);",
          "1882:    goto fail;",
          "1883:   }",
          "",
          "[Removed Lines]",
          "1878:   if (Z_TYPE_P(retval) == IS_OBJECT &&",
          "1879:       instanceof_function(Z_OBJCE_P(retval), soap_fault_class_entry TSRMLS_CC)) {",
          "1881:    soap_server_fault_ex(function, retval, NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1883:   if (Z_TYPE(retval) == IS_OBJECT &&",
          "1884:       instanceof_function(Z_OBJCE(retval), soap_fault_class_entry TSRMLS_CC)) {",
          "1886:    soap_server_fault_ex(function, &retval, NULL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1889:    memcpy(response_name,Z_STRVAL(function_name),Z_STRLEN(function_name));",
          "1890:    memcpy(response_name+Z_STRLEN(function_name),\"Response\",sizeof(\"Response\"));",
          "1891:   }",
          "1893:   efree(response_name);",
          "1894:  } else {",
          "1895:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Function '%s' call failed\", Z_STRVAL(function_name));",
          "",
          "[Removed Lines]",
          "1892:   doc_return = serialize_response_call(function, response_name, service->uri, retval, soap_headers, soap_version TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1897:   doc_return = serialize_response_call(function, response_name, service->uri, &retval, soap_headers, soap_version TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1897:  }",
          "1899:  if (EG(exception)) {",
          "1900:   php_output_discard(TSRMLS_C);",
          "1904:   }",
          "1905:   if (service->type == SOAP_CLASS) {",
          "1906: #if HAVE_PHP_SESSION && !defined(COMPILE_DL_SESSION)",
          "",
          "[Removed Lines]",
          "1901:   if (Z_TYPE_P(EG(exception)) == IS_OBJECT &&",
          "1902:       instanceof_function(Z_OBJCE_P(EG(exception)), soap_fault_class_entry TSRMLS_CC)) {",
          "1903:    soap_server_fault_ex(function, EG(exception), NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "1905:   zval exception_object;",
          "1907:   ZVAL_OBJ(&exception_object, EG(exception));",
          "1909:   if (instanceof_function(Z_OBJCE(exception_object), soap_fault_class_entry TSRMLS_CC)) {",
          "1910:    soap_server_fault_ex(function, &exception_object, NULL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1908: #else",
          "1909:    if (soap_obj) {",
          "1910: #endif",
          "1912:    }",
          "1913:   }",
          "1914:   goto fail;",
          "",
          "[Removed Lines]",
          "1911:      zval_ptr_dtor(&soap_obj);",
          "",
          "[Added Lines]",
          "1918:     zval_ptr_dtor(soap_obj);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2055:  char cont_len[30];",
          "2056:  int size;",
          "2057:  xmlDocPtr doc_return;",
          "2059:  int use_http_error_status = 1;",
          "2061:  soap_version = SOAP_GLOBAL(soap_version);",
          "",
          "[Removed Lines]",
          "2058:  zval **agent_name;",
          "",
          "[Added Lines]",
          "2065:  zval *agent_name;",
          "2067:  zend_string *server;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2065:  xmlDocDumpMemory(doc_return, &buf, &size);",
          "2072:    use_http_error_status = 0;",
          "2073:   }",
          "2074:  }",
          "",
          "[Removed Lines]",
          "2067:  zend_is_auto_global(\"_SERVER\", sizeof(\"_SERVER\") - 1 TSRMLS_CC);",
          "2068:  if (PG(http_globals)[TRACK_VARS_SERVER] &&",
          "2069:   zend_hash_find(PG(http_globals)[TRACK_VARS_SERVER]->value.ht, \"HTTP_USER_AGENT\", sizeof(\"HTTP_USER_AGENT\"), (void **) &agent_name) == SUCCESS &&",
          "2070:   Z_TYPE_PP(agent_name) == IS_STRING) {",
          "2071:   if (strncmp(Z_STRVAL_PP(agent_name), \"Shockwave Flash\", sizeof(\"Shockwave Flash\")-1) == 0) {",
          "",
          "[Added Lines]",
          "2075:  server = STR_INIT(\"_SERVER\", sizeof(\"_SERVER\") - 1, 0);",
          "2076:  zend_is_auto_global(server TSRMLS_CC);",
          "2077:  if (Z_TYPE(PG(http_globals)[TRACK_VARS_SERVER]) != IS_UNDEF &&",
          "2078:   (agent_name = zend_hash_str_find(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]), \"HTTP_USER_AGENT\", sizeof(\"HTTP_USER_AGENT\")-1)) != NULL &&",
          "2079:   Z_TYPE_P(agent_name) == IS_STRING) {",
          "2080:   if (strncmp(Z_STRVAL_P(agent_name), \"Shockwave Flash\", sizeof(\"Shockwave Flash\")-1) == 0) {",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2102: {",
          "2103:  zval ret;",
          "2107:  set_soap_fault(&ret, NULL, code, string, actor, details, name TSRMLS_CC);",
          "2109:  soap_server_fault_ex(NULL, &ret, NULL TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "2105:  INIT_ZVAL(ret);",
          "",
          "[Added Lines]",
          "2114:  ZVAL_NULL(&ret);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2132:  if (SOAP_GLOBAL(error_object) &&",
          "2133:      Z_TYPE_P(SOAP_GLOBAL(error_object)) == IS_OBJECT &&",
          "2134:      instanceof_function(Z_OBJCE_P(SOAP_GLOBAL(error_object)), soap_class_entry TSRMLS_CC)) {",
          "2136:   int use_exceptions = 0;",
          "2140:        use_exceptions = 1;",
          "2141:   }",
          "",
          "[Removed Lines]",
          "2135:   zval **tmp;",
          "2138:   if (zend_hash_find(Z_OBJPROP_P(SOAP_GLOBAL(error_object)), \"_exceptions\", sizeof(\"_exceptions\"), (void **) &tmp) != SUCCESS ||",
          "2139:        Z_TYPE_PP(tmp) != IS_BOOL || Z_LVAL_PP(tmp) != 0) {",
          "",
          "[Added Lines]",
          "2143:   zval *tmp;",
          "2146:   if ((tmp = zend_hash_str_find(Z_OBJPROP_P(SOAP_GLOBAL(error_object)), \"_exceptions\", sizeof(\"_exceptions\")-1)) == NULL ||",
          "2147:        Z_TYPE_P(tmp) != IS_FALSE) {",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2146:        error_num == E_ERROR ||",
          "2147:        error_num == E_PARSE) &&",
          "2148:       use_exceptions) {",
          "2150:    char* code = SOAP_GLOBAL(error_code);",
          "2151:    char buffer[1024];",
          "2152:    int buffer_len;",
          "2154: #ifdef va_copy",
          "2155:    va_list argcopy;",
          "2156: #endif",
          "2158:    int old = PG(display_errors);",
          "2162: #ifdef va_copy",
          "2163:    va_copy(argcopy, args);",
          "2164:    buffer_len = vslprintf(buffer, sizeof(buffer)-1, format, argcopy);",
          "",
          "[Removed Lines]",
          "2149:    zval *fault, *exception;",
          "2153:    zval outbuf, outbuflen;",
          "2157:    zend_object_store_bucket *old_objects;",
          "2160:    INIT_ZVAL(outbuf);",
          "2161:    INIT_ZVAL(outbuflen);",
          "",
          "[Added Lines]",
          "2157:    zval *fault;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2175:     code = \"Client\";",
          "2176:    }",
          "2177:    fault = add_soap_fault(SOAP_GLOBAL(error_object), code, buffer, NULL, NULL TSRMLS_CC);",
          "2184:    PG(display_errors) = 0;",
          "2185:    SG(sapi_headers).http_status_line = NULL;",
          "2186:    zend_try {",
          "",
          "[Removed Lines]",
          "2178:    MAKE_STD_ZVAL(exception);",
          "2179:    MAKE_COPY_ZVAL(&fault, exception);",
          "2180:    zend_throw_exception_object(exception TSRMLS_CC);",
          "2182:    old_objects = EG(objects_store).object_buckets;",
          "2183:    EG(objects_store).object_buckets = NULL;",
          "",
          "[Added Lines]",
          "2186:    Z_ADDREF_P(fault);",
          "2187:    zend_throw_exception_object(fault TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2195:     SG(sapi_headers).http_status_line = _old_http_status_line;",
          "2196:     SG(sapi_headers).http_response_code = _old_http_response_code;",
          "2197:    } zend_end_try();",
          "2199:    PG(display_errors) = old;",
          "2200:    zend_bailout();",
          "2201:   } else if (!use_exceptions ||",
          "",
          "[Removed Lines]",
          "2198:    EG(objects_store).object_buckets = old_objects;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2221:    char* code = SOAP_GLOBAL(error_code);",
          "2222:    char buffer[1024];",
          "2225:    soapServicePtr service;",
          "2227:    if (code == NULL) {",
          "2228:     code = \"Server\";",
          "2229:    }",
          "2230:    if (SOAP_GLOBAL(error_object) &&",
          "2231:        Z_TYPE_P(SOAP_GLOBAL(error_object)) == IS_OBJECT &&",
          "2232:        instanceof_function(Z_OBJCE_P(SOAP_GLOBAL(error_object)), soap_server_class_entry TSRMLS_CC) &&",
          "2234:     (service = (soapServicePtr)zend_fetch_resource(tmp TSRMLS_CC, -1, \"service\", NULL, 1, le_service)) &&",
          "2235:     !service->send_errors) {",
          "2236:     strcpy(buffer, \"Internal Error\");",
          "",
          "[Removed Lines]",
          "2223:    zval *outbuf = NULL;",
          "2224:    zval **tmp;",
          "2233:           zend_hash_find(Z_OBJPROP_P(SOAP_GLOBAL(error_object)), \"service\", sizeof(\"service\"), (void **)&tmp) != FAILURE &&",
          "",
          "[Added Lines]",
          "2230:    zval outbuf;",
          "2231:    zval *tmp;",
          "2234:    ZVAL_UNDEF(&outbuf);",
          "2241:           (tmp = zend_hash_str_find(Z_OBJPROP_P(SOAP_GLOBAL(error_object)), \"service\", sizeof(\"service\")-1)) != NULL &&",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2238:     int buffer_len;",
          "2239:     zval outbuflen;",
          "2243: #ifdef va_copy",
          "2244:     va_copy(argcopy, args);",
          "",
          "[Removed Lines]",
          "2241:     INIT_ZVAL(outbuflen);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2256:     if (php_output_get_length(&outbuflen TSRMLS_CC) != FAILURE && Z_LVAL(outbuflen) != 0) {",
          "2259:     }",
          "2260:     php_output_discard(TSRMLS_C);",
          "2262:    }",
          "2265:    fault = 1;",
          "2266:   }",
          "",
          "[Removed Lines]",
          "2257:      ALLOC_INIT_ZVAL(outbuf);",
          "2258:      php_output_get_contents(outbuf TSRMLS_CC);",
          "2263:    INIT_ZVAL(fault_obj);",
          "2264:    set_soap_fault(&fault_obj, NULL, code, buffer, NULL, outbuf, NULL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2265:      php_output_get_contents(&outbuf TSRMLS_CC);",
          "2270:    set_soap_fault(&fault_obj, NULL, code, buffer, NULL, &outbuf, NULL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2323:  long cache_wsdl;",
          "2324:  sdlPtr sdl = NULL;",
          "2325:  HashTable *typemap_ht = NULL;",
          "2327:  SOAP_CLIENT_BEGIN_CODE();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2332:  zval *this_ptr = getThis();",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2339:  if (options != NULL) {",
          "2340:   HashTable *ht = Z_ARRVAL_P(options);",
          "2343:   if (Z_TYPE_P(wsdl) == IS_NULL) {",
          "2348:    } else {",
          "2349:     php_error_docref(NULL TSRMLS_CC, E_ERROR, \"'uri' option is required in nonWSDL mode\");",
          "2350:    }",
          "2356:    }",
          "2362:    }",
          "2363:   }",
          "2369:   }",
          "2374:   } else if (Z_TYPE_P(wsdl) == IS_NULL) {",
          "2375:    php_error_docref(NULL TSRMLS_CC, E_ERROR, \"'location' option is required in nonWSDL mode\");",
          "2376:   }",
          "2382:    }",
          "2383:   }",
          "2390:    }",
          "2394:     add_property_null(this_ptr, \"_digest\");",
          "2395:    }",
          "2396:   }",
          "2403:    }",
          "2410:     }",
          "2411:    }",
          "2412:   }",
          "2415:     if (!context) {",
          "2416:      context = php_stream_context_alloc(TSRMLS_C);",
          "2417:     }",
          "2422:    }",
          "2423:   }",
          "2427:    add_property_long(this_ptr, \"trace\", 1);",
          "2428:   }",
          "2433:    add_property_bool(this_ptr, \"_exceptions\", 0);",
          "2434:   }",
          "2444:   }",
          "2447:    xmlCharEncodingHandlerPtr encoding;",
          "2450:    if (encoding == NULL) {",
          "2452:    } else {",
          "2453:     xmlCharEncCloseFunc(encoding);",
          "2455:    }",
          "2456:   }",
          "2466:   }",
          "2472:   }",
          "2477:      }",
          "2483:    }",
          "2484:   }",
          "2486:   if (context) {",
          "2488:   }",
          "2493:   }",
          "2498:   }",
          "2502:    add_property_long(this_ptr, \"_keep_alive\", 0);",
          "2503:   }",
          "2508:   }",
          "2509:  } else if (Z_TYPE_P(wsdl) == IS_NULL) {",
          "2510:   php_error_docref(NULL TSRMLS_CC, E_ERROR, \"'location' and 'uri' options are required in nonWSDL mode\");",
          "",
          "[Removed Lines]",
          "2341:   zval **tmp;",
          "2345:    if (zend_hash_find(ht, \"uri\", sizeof(\"uri\"), (void**)&tmp) == SUCCESS &&",
          "2346:        Z_TYPE_PP(tmp) == IS_STRING) {",
          "2347:     add_property_stringl(this_ptr, \"uri\", Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "2352:    if (zend_hash_find(ht, \"style\", sizeof(\"style\"), (void**)&tmp) == SUCCESS &&",
          "2353:      Z_TYPE_PP(tmp) == IS_LONG &&",
          "2354:      (Z_LVAL_PP(tmp) == SOAP_RPC || Z_LVAL_PP(tmp) == SOAP_DOCUMENT)) {",
          "2355:     add_property_long(this_ptr, \"style\", Z_LVAL_PP(tmp));",
          "2358:    if (zend_hash_find(ht, \"use\", sizeof(\"use\"), (void**)&tmp) == SUCCESS &&",
          "2359:      Z_TYPE_PP(tmp) == IS_LONG &&",
          "2360:      (Z_LVAL_PP(tmp) == SOAP_LITERAL || Z_LVAL_PP(tmp) == SOAP_ENCODED)) {",
          "2361:     add_property_long(this_ptr, \"use\", Z_LVAL_PP(tmp));",
          "2365:   if (zend_hash_find(ht, \"stream_context\", sizeof(\"stream_context\"), (void**)&tmp) == SUCCESS &&",
          "2366:     Z_TYPE_PP(tmp) == IS_RESOURCE) {",
          "2367:    context = php_stream_context_from_zval(*tmp, 1);",
          "2368:    zend_list_addref(context->rsrc_id);",
          "2371:   if (zend_hash_find(ht, \"location\", sizeof(\"location\"), (void**)&tmp) == SUCCESS &&",
          "2372:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "2373:    add_property_stringl(this_ptr, \"location\", Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "2378:   if (zend_hash_find(ht, \"soap_version\", sizeof(\"soap_version\"), (void**)&tmp) == SUCCESS) {",
          "2379:    if (Z_TYPE_PP(tmp) == IS_LONG ||",
          "2380:        (Z_LVAL_PP(tmp) == SOAP_1_1 && Z_LVAL_PP(tmp) == SOAP_1_2)) {",
          "2381:     soap_version = Z_LVAL_PP(tmp);",
          "2384:   if (zend_hash_find(ht, \"login\", sizeof(\"login\"), (void**)&tmp) == SUCCESS &&",
          "2385:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "2386:    add_property_stringl(this_ptr, \"_login\", Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "2387:    if (zend_hash_find(ht, \"password\", sizeof(\"password\"), (void**)&tmp) == SUCCESS &&",
          "2388:        Z_TYPE_PP(tmp) == IS_STRING) {",
          "2389:     add_property_stringl(this_ptr, \"_password\", Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "2391:    if (zend_hash_find(ht, \"authentication\", sizeof(\"authentication\"), (void**)&tmp) == SUCCESS &&",
          "2392:        Z_TYPE_PP(tmp) == IS_LONG &&",
          "2393:        Z_LVAL_PP(tmp) == SOAP_AUTHENTICATION_DIGEST) {",
          "2397:   if (zend_hash_find(ht, \"proxy_host\", sizeof(\"proxy_host\"), (void**)&tmp) == SUCCESS &&",
          "2398:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "2399:    add_property_stringl(this_ptr, \"_proxy_host\", Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "2400:    if (zend_hash_find(ht, \"proxy_port\", sizeof(\"proxy_port\"), (void**)&tmp) == SUCCESS) {",
          "2401:     convert_to_long(*tmp);",
          "2402:     add_property_long(this_ptr, \"_proxy_port\", Z_LVAL_PP(tmp));",
          "2404:    if (zend_hash_find(ht, \"proxy_login\", sizeof(\"proxy_login\"), (void**)&tmp) == SUCCESS &&",
          "2405:        Z_TYPE_PP(tmp) == IS_STRING) {",
          "2406:     add_property_stringl(this_ptr, \"_proxy_login\", Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "2407:     if (zend_hash_find(ht, \"proxy_password\", sizeof(\"proxy_password\"), (void**)&tmp) == SUCCESS &&",
          "2408:         Z_TYPE_PP(tmp) == IS_STRING) {",
          "2409:      add_property_stringl(this_ptr, \"_proxy_password\", Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "2413:   if (zend_hash_find(ht, \"local_cert\", sizeof(\"local_cert\"), (void**)&tmp) == SUCCESS &&",
          "2414:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "2418:     php_stream_context_set_option(context, \"ssl\", \"local_cert\", *tmp);",
          "2419:    if (zend_hash_find(ht, \"passphrase\", sizeof(\"passphrase\"), (void**)&tmp) == SUCCESS &&",
          "2420:        Z_TYPE_PP(tmp) == IS_STRING) {",
          "2421:     php_stream_context_set_option(context, \"ssl\", \"passphrase\", *tmp);",
          "2424:   if (zend_hash_find(ht, \"trace\", sizeof(\"trace\"), (void**)&tmp) == SUCCESS &&",
          "2425:       (Z_TYPE_PP(tmp) == IS_BOOL || Z_TYPE_PP(tmp) == IS_LONG) &&",
          "2426:     Z_LVAL_PP(tmp) == 1) {",
          "2430:   if (zend_hash_find(ht, \"exceptions\", sizeof(\"exceptions\"), (void**)&tmp) == SUCCESS &&",
          "2431:       (Z_TYPE_PP(tmp) == IS_BOOL || Z_TYPE_PP(tmp) == IS_LONG) &&",
          "2432:     Z_LVAL_PP(tmp) == 0) {",
          "2436:   if (zend_hash_find(ht, \"compression\", sizeof(\"compression\"), (void**)&tmp) == SUCCESS &&",
          "2437:       Z_TYPE_PP(tmp) == IS_LONG &&",
          "2438:        zend_hash_exists(EG(function_table), \"gzinflate\", sizeof(\"gzinflate\")) &&",
          "2439:        zend_hash_exists(EG(function_table), \"gzdeflate\", sizeof(\"gzdeflate\")) &&",
          "2440:        zend_hash_exists(EG(function_table), \"gzuncompress\", sizeof(\"gzuncompress\")) &&",
          "2441:        zend_hash_exists(EG(function_table), \"gzcompress\", sizeof(\"gzcompress\")) &&",
          "2442:        zend_hash_exists(EG(function_table), \"gzencode\", sizeof(\"gzencode\"))) {",
          "2443:    add_property_long(this_ptr, \"compression\", Z_LVAL_PP(tmp));",
          "2445:   if (zend_hash_find(ht, \"encoding\", sizeof(\"encoding\"), (void**)&tmp) == SUCCESS &&",
          "2446:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "2449:    encoding = xmlFindCharEncodingHandler(Z_STRVAL_PP(tmp));",
          "2451:     php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Invalid 'encoding' option - '%s'\", Z_STRVAL_PP(tmp));",
          "2454:     add_property_stringl(this_ptr, \"_encoding\", Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "2457:   if (zend_hash_find(ht, \"classmap\", sizeof(\"classmap\"), (void**)&tmp) == SUCCESS &&",
          "2458:    Z_TYPE_PP(tmp) == IS_ARRAY) {",
          "2459:    zval *class_map;",
          "2461:    MAKE_STD_ZVAL(class_map);",
          "2462:    MAKE_COPY_ZVAL(tmp, class_map);",
          "2463:    Z_DELREF_P(class_map);",
          "2465:    add_property_zval(this_ptr, \"_classmap\", class_map);",
          "2468:   if (zend_hash_find(ht, \"typemap\", sizeof(\"typemap\"), (void**)&tmp) == SUCCESS &&",
          "2469:    Z_TYPE_PP(tmp) == IS_ARRAY &&",
          "2470:    zend_hash_num_elements(Z_ARRVAL_PP(tmp)) > 0) {",
          "2471:    typemap_ht = Z_ARRVAL_PP(tmp);",
          "2474:   if (zend_hash_find(ht, \"features\", sizeof(\"features\"), (void**)&tmp) == SUCCESS &&",
          "2475:    Z_TYPE_PP(tmp) == IS_LONG) {",
          "2476:    add_property_long(this_ptr, \"_features\", Z_LVAL_PP(tmp));",
          "2479:   if (zend_hash_find(ht, \"connection_timeout\", sizeof(\"connection_timeout\"), (void**)&tmp) == SUCCESS) {",
          "2480:    convert_to_long(*tmp);",
          "2481:    if (Z_LVAL_PP(tmp) > 0) {",
          "2482:     add_property_long(this_ptr, \"_connection_timeout\", Z_LVAL_PP(tmp));",
          "2487:    add_property_resource(this_ptr, \"_stream_context\", context->rsrc_id);",
          "2490:   if (zend_hash_find(ht, \"cache_wsdl\", sizeof(\"cache_wsdl\"), (void**)&tmp) == SUCCESS &&",
          "2491:       Z_TYPE_PP(tmp) == IS_LONG) {",
          "2492:    cache_wsdl = Z_LVAL_PP(tmp);",
          "2495:   if (zend_hash_find(ht, \"user_agent\", sizeof(\"user_agent\"), (void**)&tmp) == SUCCESS &&",
          "2496:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "2497:    add_property_stringl(this_ptr, \"_user_agent\", Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "2500:   if (zend_hash_find(ht, \"keep_alive\", sizeof(\"keep_alive\"), (void**)&tmp) == SUCCESS &&",
          "2501:     (Z_TYPE_PP(tmp) == IS_BOOL || Z_TYPE_PP(tmp) == IS_LONG) && Z_LVAL_PP(tmp) == 0) {",
          "2505:   if (zend_hash_find(ht, \"ssl_method\", sizeof(\"ssl_method\"), (void**)&tmp) == SUCCESS &&",
          "2506:    Z_TYPE_PP(tmp) == IS_LONG) {",
          "2507:    add_property_long(this_ptr, \"_ssl_method\", Z_LVAL_PP(tmp));",
          "",
          "[Added Lines]",
          "2348:   zval *tmp;",
          "2352:    if ((tmp = zend_hash_str_find(ht, \"uri\", sizeof(\"uri\")-1)) != NULL &&",
          "2353:        Z_TYPE_P(tmp) == IS_STRING) {",
          "2354:     add_property_str(this_ptr, \"uri\", STR_COPY(Z_STR_P(tmp)));",
          "2359:    if ((tmp = zend_hash_str_find(ht, \"style\", sizeof(\"style\")-1)) != NULL &&",
          "2360:      Z_TYPE_P(tmp) == IS_LONG &&",
          "2361:      (Z_LVAL_P(tmp) == SOAP_RPC || Z_LVAL_P(tmp) == SOAP_DOCUMENT)) {",
          "2362:     add_property_long(this_ptr, \"style\", Z_LVAL_P(tmp));",
          "2365:    if ((tmp = zend_hash_str_find(ht, \"use\", sizeof(\"use\")-1)) != NULL &&",
          "2366:      Z_TYPE_P(tmp) == IS_LONG &&",
          "2367:      (Z_LVAL_P(tmp) == SOAP_LITERAL || Z_LVAL_P(tmp) == SOAP_ENCODED)) {",
          "2368:     add_property_long(this_ptr, \"use\", Z_LVAL_P(tmp));",
          "2372:   if ((tmp = zend_hash_str_find(ht, \"stream_context\", sizeof(\"stream_context\")-1)) != NULL &&",
          "2373:     Z_TYPE_P(tmp) == IS_RESOURCE) {",
          "2374:    context = php_stream_context_from_zval(tmp, 1);",
          "2375:    Z_ADDREF_P(tmp);",
          "2378:   if ((tmp = zend_hash_str_find(ht, \"location\", sizeof(\"location\")-1)) != NULL &&",
          "2379:       Z_TYPE_P(tmp) == IS_STRING) {",
          "2380:    add_property_str(this_ptr, \"location\", STR_COPY(Z_STR_P(tmp)));",
          "2385:   if ((tmp = zend_hash_str_find(ht, \"soap_version\", sizeof(\"soap_version\")-1)) != NULL) {",
          "2386:    if (Z_TYPE_P(tmp) == IS_LONG ||",
          "2387:        (Z_LVAL_P(tmp) == SOAP_1_1 && Z_LVAL_P(tmp) == SOAP_1_2)) {",
          "2388:     soap_version = Z_LVAL_P(tmp);",
          "2391:   if ((tmp = zend_hash_str_find(ht, \"login\", sizeof(\"login\")-1)) != NULL &&",
          "2392:       Z_TYPE_P(tmp) == IS_STRING) {",
          "2393:    add_property_str(this_ptr, \"_login\", STR_COPY(Z_STR_P(tmp)));",
          "2394:    if ((tmp = zend_hash_str_find(ht, \"password\", sizeof(\"password\")-1)) != NULL &&",
          "2395:        Z_TYPE_P(tmp) == IS_STRING) {",
          "2396:     add_property_str(this_ptr, \"_password\", STR_COPY(Z_STR_P(tmp)));",
          "2398:    if ((tmp = zend_hash_str_find(ht, \"authentication\", sizeof(\"authentication\")-1)) != NULL &&",
          "2399:        Z_TYPE_P(tmp) == IS_LONG &&",
          "2400:        Z_LVAL_P(tmp) == SOAP_AUTHENTICATION_DIGEST) {",
          "2404:   if ((tmp = zend_hash_str_find(ht, \"proxy_host\", sizeof(\"proxy_host\")-1)) != NULL &&",
          "2405:       Z_TYPE_P(tmp) == IS_STRING) {",
          "2406:    add_property_str(this_ptr, \"_proxy_host\", STR_COPY(Z_STR_P(tmp)));",
          "2407:    if ((tmp = zend_hash_str_find(ht, \"proxy_port\", sizeof(\"proxy_port\")-1)) != NULL) {",
          "2408:     convert_to_long(tmp);",
          "2409:     add_property_long(this_ptr, \"_proxy_port\", Z_LVAL_P(tmp));",
          "2411:    if ((tmp = zend_hash_str_find(ht, \"proxy_login\", sizeof(\"proxy_login\")-1)) != NULL &&",
          "2412:        Z_TYPE_P(tmp) == IS_STRING) {",
          "2413:     add_property_str(this_ptr, \"_proxy_login\", STR_COPY(Z_STR_P(tmp)));",
          "2414:     if ((tmp = zend_hash_str_find(ht, \"proxy_password\", sizeof(\"proxy_password\")-1)) != NULL &&",
          "2415:         Z_TYPE_P(tmp) == IS_STRING) {",
          "2416:      add_property_str(this_ptr, \"_proxy_password\", STR_COPY(Z_STR_P(tmp)));",
          "2420:   if ((tmp = zend_hash_str_find(ht, \"local_cert\", sizeof(\"local_cert\")-1)) != NULL &&",
          "2421:       Z_TYPE_P(tmp) == IS_STRING) {",
          "2425:     php_stream_context_set_option(context, \"ssl\", \"local_cert\", tmp);",
          "2426:    if ((tmp = zend_hash_str_find(ht, \"passphrase\", sizeof(\"passphrase\")-1)) != NULL &&",
          "2427:        Z_TYPE_P(tmp) == IS_STRING) {",
          "2428:     php_stream_context_set_option(context, \"ssl\", \"passphrase\", tmp);",
          "2431:   if ((tmp = zend_hash_str_find(ht, \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "2432:       (Z_TYPE_P(tmp) == IS_TRUE ||",
          "2433:        (Z_TYPE_P(tmp) == IS_LONG && Z_LVAL_P(tmp) == 1))) {",
          "2437:   if ((tmp = zend_hash_str_find(ht, \"exceptions\", sizeof(\"exceptions\")-1)) != NULL &&",
          "2438:       (Z_TYPE_P(tmp) == IS_FALSE ||",
          "2439:        (Z_TYPE_P(tmp) == IS_LONG && Z_LVAL_P(tmp) == 0))) {",
          "2443:   if ((tmp = zend_hash_str_find(ht, \"compression\", sizeof(\"compression\")-1)) != NULL &&",
          "2444:       Z_TYPE_P(tmp) == IS_LONG &&",
          "2445:        zend_hash_str_exists(EG(function_table), \"gzinflate\", sizeof(\"gzinflate\")-1) &&",
          "2446:        zend_hash_str_exists(EG(function_table), \"gzdeflate\", sizeof(\"gzdeflate\")-1) &&",
          "2447:        zend_hash_str_exists(EG(function_table), \"gzuncompress\", sizeof(\"gzuncompress\")-1) &&",
          "2448:        zend_hash_str_exists(EG(function_table), \"gzcompress\", sizeof(\"gzcompress\")-1) &&",
          "2449:        zend_hash_str_exists(EG(function_table), \"gzencode\", sizeof(\"gzencode\")-1)) {",
          "2450:    add_property_long(this_ptr, \"compression\", Z_LVAL_P(tmp));",
          "2452:   if ((tmp = zend_hash_str_find(ht, \"encoding\", sizeof(\"encoding\")-1)) != NULL &&",
          "2453:       Z_TYPE_P(tmp) == IS_STRING) {",
          "2456:    encoding = xmlFindCharEncodingHandler(Z_STRVAL_P(tmp));",
          "2458:     php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Invalid 'encoding' option - '%s'\", Z_STRVAL_P(tmp));",
          "2461:     add_property_str(this_ptr, \"_encoding\", STR_COPY(Z_STR_P(tmp)));",
          "2464:   if ((tmp = zend_hash_str_find(ht, \"classmap\", sizeof(\"classmap\")-1)) != NULL &&",
          "2465:    Z_TYPE_P(tmp) == IS_ARRAY) {",
          "2472:    add_property_zval(this_ptr, \"_classmap\", tmp);",
          "2475:   if ((tmp = zend_hash_str_find(ht, \"typemap\", sizeof(\"typemap\")-1)) != NULL &&",
          "2476:    Z_TYPE_P(tmp) == IS_ARRAY &&",
          "2477:    zend_hash_num_elements(Z_ARRVAL_P(tmp)) > 0) {",
          "2478:    typemap_ht = Z_ARRVAL_P(tmp);",
          "2481:   if ((tmp = zend_hash_str_find(ht, \"features\", sizeof(\"features\")-1)) != NULL &&",
          "2482:    Z_TYPE_P(tmp) == IS_LONG) {",
          "2483:    add_property_long(this_ptr, \"_features\", Z_LVAL_P(tmp));",
          "2486:   if ((tmp = zend_hash_str_find(ht, \"connection_timeout\", sizeof(\"connection_timeout\")-1)) != NULL) {",
          "2487:    convert_to_long(tmp);",
          "2488:    if (Z_LVAL_P(tmp) > 0) {",
          "2489:     add_property_long(this_ptr, \"_connection_timeout\", Z_LVAL_P(tmp));",
          "2494:    add_property_resource(this_ptr, \"_stream_context\", context->res);",
          "2497:   if ((tmp = zend_hash_str_find(ht, \"cache_wsdl\", sizeof(\"cache_wsdl\")-1)) != NULL &&",
          "2498:       Z_TYPE_P(tmp) == IS_LONG) {",
          "2499:    cache_wsdl = Z_LVAL_P(tmp);",
          "2502:   if ((tmp = zend_hash_str_find(ht, \"user_agent\", sizeof(\"user_agent\")-1)) != NULL &&",
          "2503:       Z_TYPE_P(tmp) == IS_STRING) {",
          "2504:    add_property_str(this_ptr, \"_user_agent\", STR_COPY(Z_STR_P(tmp)));",
          "2507:   if ((tmp = zend_hash_str_find(ht, \"keep_alive\", sizeof(\"keep_alive\")-1)) != NULL &&",
          "2508:     (Z_TYPE_P(tmp) == IS_FALSE ||",
          "2509:      (Z_TYPE_P(tmp) == IS_LONG && Z_LVAL_P(tmp) == 0))) {",
          "2513:   if ((tmp = zend_hash_str_find(ht, \"ssl_method\", sizeof(\"ssl_method\")-1)) != NULL &&",
          "2514:    Z_TYPE_P(tmp) == IS_LONG) {",
          "2515:    add_property_long(this_ptr, \"_ssl_method\", Z_LVAL_P(tmp));",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2513:  add_property_long(this_ptr, \"_soap_version\", soap_version);",
          "2515:  if (Z_TYPE_P(wsdl) != IS_NULL) {",
          "2518:   old_soap_version = SOAP_GLOBAL(soap_version);",
          "2519:   SOAP_GLOBAL(soap_version) = soap_version;",
          "2521:   sdl = get_sdl(this_ptr, Z_STRVAL_P(wsdl), cache_wsdl TSRMLS_CC);",
          "2526:   SOAP_GLOBAL(soap_version) = old_soap_version;",
          "2527:  }",
          "",
          "[Removed Lines]",
          "2516:   int    old_soap_version, ret;",
          "2522:   ret = zend_list_insert(sdl, le_sdl TSRMLS_CC);",
          "2524:   add_property_resource(this_ptr, \"sdl\", ret);",
          "",
          "[Added Lines]",
          "2524:   int    old_soap_version;",
          "2525:   zend_resource *res;",
          "2531:   res = zend_register_resource(NULL, sdl, le_sdl TSRMLS_CC);",
          "2533:   add_property_resource(this_ptr, \"sdl\", res);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2529:  if (typemap_ht) {",
          "2530:   HashTable *typemap = soap_create_typemap(sdl, typemap_ht TSRMLS_CC);",
          "2531:   if (typemap) {",
          "2536:   }",
          "2537:  }",
          "2538:  SOAP_CLIENT_END_CODE();",
          "",
          "[Removed Lines]",
          "2532:    int ret;",
          "2534:    ret = zend_list_insert(typemap, le_typemap TSRMLS_CC);",
          "2535:    add_property_resource(this_ptr, \"typemap\", ret);",
          "",
          "[Added Lines]",
          "2541:    zend_resource *res;",
          "2543:    res = zend_register_resource(NULL, typemap, le_typemap TSRMLS_CC);",
          "2544:    add_property_resource(this_ptr, \"typemap\", res);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2545:  char  *buf;",
          "2546:  int    buf_size;",
          "2547:  zval   func;",
          "2554:  xmlDocDumpMemory(request, (xmlChar**)&buf, &buf_size);",
          "2555:  if (!buf) {",
          "",
          "[Removed Lines]",
          "2548:  zval  *params[5];",
          "2549:  zval **trace;",
          "2550:  zval **fault;",
          "2552:  INIT_ZVAL(*response);",
          "",
          "[Added Lines]",
          "2557:  zval  params[5];",
          "2558:  zval  *trace;",
          "2559:  zval  *fault;",
          "2561:  ZVAL_NULL(response);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2557:   return FALSE;",
          "2558:  }",
          "2562:   add_property_stringl(this_ptr, \"__last_request\", buf, buf_size);",
          "2563:  }",
          "2570:  if (location == NULL) {",
          "2572:  } else {",
          "2574:  }",
          "2576:  if (action == NULL) {",
          "2578:  } else {",
          "2580:  }",
          "2588:   add_soap_fault(this_ptr, \"Client\", \"SoapClient::__doRequest() failed\", NULL, NULL TSRMLS_CC);",
          "2589:   ret = FALSE;",
          "2590:  } else if (Z_TYPE_P(response) != IS_STRING) {",
          "2592:    add_soap_fault(this_ptr, \"Client\", \"SoapClient::__doRequest() returned non string value\", NULL, NULL TSRMLS_CC);",
          "2593:   }",
          "2594:   ret = FALSE;",
          "2598:  }",
          "2599:  zval_ptr_dtor(&params[4]);",
          "2600:  zval_ptr_dtor(&params[3]);",
          "2601:  zval_ptr_dtor(&params[2]);",
          "2602:  zval_ptr_dtor(&params[1]);",
          "2603:  zval_ptr_dtor(&params[0]);",
          "2604:  xmlFree(buf);",
          "2606:    return FALSE;",
          "2607:  }",
          "2608:   return ret;",
          "",
          "[Removed Lines]",
          "2560:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
          "2561:      Z_LVAL_PP(trace) > 0) {",
          "2565:  INIT_ZVAL(func);",
          "2566:  ZVAL_STRINGL(&func,\"__doRequest\",sizeof(\"__doRequest\")-1,0);",
          "2567:  ALLOC_INIT_ZVAL(params[0]);",
          "2568:  ZVAL_STRINGL(params[0], buf, buf_size, 1);",
          "2569:  ALLOC_INIT_ZVAL(params[1]);",
          "2571:   ZVAL_NULL(params[1]);",
          "2573:   ZVAL_STRING(params[1], location, 1);",
          "2575:  ALLOC_INIT_ZVAL(params[2]);",
          "2577:   ZVAL_NULL(params[2]);",
          "2579:   ZVAL_STRING(params[2], action, 1);",
          "2581:  ALLOC_INIT_ZVAL(params[3]);",
          "2582:  ZVAL_LONG(params[3], version);",
          "2584:  ALLOC_INIT_ZVAL(params[4]);",
          "2585:  ZVAL_LONG(params[4], one_way);",
          "2587:  if (call_user_function(NULL, &this_ptr, &func, response, 5, params TSRMLS_CC) != SUCCESS) {",
          "2591:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\"), (void **) &fault) == FAILURE) {",
          "2595:  } else if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
          "2596:      Z_LVAL_PP(trace) > 0) {",
          "2597:   add_property_stringl(this_ptr, \"__last_response\", Z_STRVAL_P(response), Z_STRLEN_P(response));",
          "2605:  if (ret && zend_hash_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\"), (void **) &fault) == SUCCESS) {",
          "",
          "[Added Lines]",
          "2569:  if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "2570:      Z_LVAL_P(trace) > 0) {",
          "2574:  ZVAL_STRINGL(&func,\"__doRequest\",sizeof(\"__doRequest\")-1);",
          "2575:  ZVAL_STRINGL(&params[0], buf, buf_size);",
          "2577:   ZVAL_NULL(&params[1]);",
          "2579:   ZVAL_STRING(&params[1], location);",
          "2582:   ZVAL_NULL(&params[2]);",
          "2584:   ZVAL_STRING(&params[2], action);",
          "2586:  ZVAL_LONG(&params[3], version);",
          "2587:  ZVAL_LONG(&params[4], one_way);",
          "2589:  if (call_user_function(NULL, this_ptr, &func, response, 5, params TSRMLS_CC) != SUCCESS) {",
          "2593:   if ((fault = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\")-1)) == NULL) {",
          "2597:  } else if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL &&",
          "2598:      Z_LVAL_P(trace) > 0) {",
          "2599:   add_property_str(this_ptr, \"__last_response\", STR_COPY(Z_STR_P(response)));",
          "2601:  zval_ptr_dtor(&func);",
          "2608:  if (ret && (fault = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\")-1)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2612:                          char* function,",
          "2613:                          int function_len,",
          "2614:                          int arg_count,",
          "2616:                          zval* return_value,",
          "2617:                          char* location,",
          "2618:                          char* soap_action,",
          "",
          "[Removed Lines]",
          "2615:                          zval** real_args,",
          "",
          "[Added Lines]",
          "2618:                          zval* real_args,",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2621:                          zval* output_headers",
          "2622:                          TSRMLS_DC)",
          "2623: {",
          "2626:   sdlPtr sdl = NULL;",
          "2627:   sdlPtr old_sdl = NULL;",
          "2628:   sdlFunctionPtr fn;",
          "",
          "[Removed Lines]",
          "2624:  zval **tmp;",
          "2625:  zval **trace;",
          "",
          "[Added Lines]",
          "2627:  zval *tmp;",
          "2628:  zval *trace;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2638:  SOAP_CLIENT_BEGIN_CODE();",
          "2644:  }",
          "2647:   soap_version = SOAP_1_2;",
          "2648:  } else {",
          "2649:   soap_version = SOAP_1_1;",
          "2650:  }",
          "2652:  if (location == NULL) {",
          "2656:   }",
          "2657:  }",
          "2660:   FETCH_SDL_RES(sdl,tmp);",
          "2661:  }",
          "2663:   FETCH_TYPEMAP_RES(typemap,tmp);",
          "2664:  }",
          "",
          "[Removed Lines]",
          "2640:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS",
          "2641:   && Z_LVAL_PP(trace) > 0) {",
          "2642:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"__last_request\", sizeof(\"__last_request\"));",
          "2643:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"__last_response\", sizeof(\"__last_response\"));",
          "2645:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_soap_version\", sizeof(\"_soap_version\"), (void **) &tmp) == SUCCESS",
          "2646:   && Z_LVAL_PP(tmp) == SOAP_1_2) {",
          "2653:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"location\", sizeof(\"location\"),(void **) &tmp) == SUCCESS &&",
          "2654:       Z_TYPE_PP(tmp) == IS_STRING) {",
          "2655:     location = Z_STRVAL_PP(tmp);",
          "2659:  if (FIND_SDL_PROPERTY(this_ptr,tmp) != FAILURE) {",
          "2662:  if (FIND_TYPEMAP_PROPERTY(this_ptr,tmp) != FAILURE) {",
          "",
          "[Added Lines]",
          "2643:  if ((trace = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\")-1)) != NULL",
          "2644:   && Z_LVAL_P(trace) > 0) {",
          "2645:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"__last_request\", sizeof(\"__last_request\")-1);",
          "2646:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"__last_response\", sizeof(\"__last_response\")-1);",
          "2648:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_soap_version\", sizeof(\"_soap_version\")-1)) != NULL",
          "2649:   && Z_LVAL_P(tmp) == SOAP_1_2) {",
          "2656:   if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"location\", sizeof(\"location\")-1)) != NULL &&",
          "2657:       Z_TYPE_P(tmp) == IS_STRING) {",
          "2658:     location = Z_STRVAL_P(tmp);",
          "2662:  if (FIND_SDL_PROPERTY(this_ptr,tmp) != NULL) {",
          "2665:  if (FIND_TYPEMAP_PROPERTY(this_ptr,tmp) != NULL) {",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2669:  old_sdl = SOAP_GLOBAL(sdl);",
          "2670:  SOAP_GLOBAL(sdl) = sdl;",
          "2671:  old_encoding = SOAP_GLOBAL(encoding);",
          "2675:  } else {",
          "2676:   SOAP_GLOBAL(encoding) = NULL;",
          "2677:  }",
          "2678:  old_class_map = SOAP_GLOBAL(class_map);",
          "2682:  } else {",
          "2683:   SOAP_GLOBAL(class_map) = NULL;",
          "2684:  }",
          "2685:  old_typemap = SOAP_GLOBAL(typemap);",
          "2686:  SOAP_GLOBAL(typemap) = typemap;",
          "2687:  old_features = SOAP_GLOBAL(features);",
          "2691:  } else {",
          "2692:   SOAP_GLOBAL(features) = 0;",
          "2693:  }",
          "",
          "[Removed Lines]",
          "2672:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_encoding\", sizeof(\"_encoding\"), (void **) &tmp) == SUCCESS &&",
          "2673:      Z_TYPE_PP(tmp) == IS_STRING) {",
          "2674:   SOAP_GLOBAL(encoding) = xmlFindCharEncodingHandler(Z_STRVAL_PP(tmp));",
          "2679:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_classmap\", sizeof(\"_classmap\"), (void **) &tmp) == SUCCESS &&",
          "2680:      Z_TYPE_PP(tmp) == IS_ARRAY) {",
          "2681:   SOAP_GLOBAL(class_map) = (*tmp)->value.ht;",
          "2688:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_features\", sizeof(\"_features\"), (void **) &tmp) == SUCCESS &&",
          "2689:      Z_TYPE_PP(tmp) == IS_LONG) {",
          "2690:   SOAP_GLOBAL(features) = Z_LVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "2675:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_encoding\", sizeof(\"_encoding\")-1)) != NULL &&",
          "2676:      Z_TYPE_P(tmp) == IS_STRING) {",
          "2677:   SOAP_GLOBAL(encoding) = xmlFindCharEncodingHandler(Z_STRVAL_P(tmp));",
          "2682:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_classmap\", sizeof(\"_classmap\")-1)) != NULL &&",
          "2683:      Z_TYPE_P(tmp) == IS_ARRAY) {",
          "2684:   SOAP_GLOBAL(class_map) = Z_ARRVAL_P(tmp);",
          "2691:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_features\", sizeof(\"_features\")-1)) != NULL &&",
          "2692:      Z_TYPE_P(tmp) == IS_LONG) {",
          "2693:   SOAP_GLOBAL(features) = Z_LVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2733:      smart_str_appends(&error,function);",
          "2734:      smart_str_appends(&error,\"\\\") is not a valid method for this service\");",
          "2735:      smart_str_0(&error);",
          "2737:     smart_str_free(&error);",
          "2738:    }",
          "2739:   } else {",
          "2741:    smart_str action = {0};",
          "2744:     add_soap_fault(this_ptr, \"Client\", \"Error finding \\\"uri\\\" property\", NULL, NULL TSRMLS_CC);",
          "2745:    } else if (location == NULL) {",
          "2746:     add_soap_fault(this_ptr, \"Client\", \"Error could not find \\\"location\\\" property\", NULL, NULL TSRMLS_CC);",
          "2747:    } else {",
          "2748:     if (call_uri == NULL) {",
          "2750:     }",
          "2751:      request = serialize_function_call(this_ptr, NULL, function, call_uri, real_args, arg_count, soap_version, soap_headers TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "2736:     add_soap_fault(this_ptr, \"Client\", error.c, NULL, NULL TSRMLS_CC);",
          "2740:    zval **uri;",
          "2743:    if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"uri\", sizeof(\"uri\"), (void *)&uri) == FAILURE) {",
          "2749:      call_uri = Z_STRVAL_PP(uri);",
          "",
          "[Added Lines]",
          "2739:     add_soap_fault(this_ptr, \"Client\", error.s->val, NULL, NULL TSRMLS_CC);",
          "2743:    zval *uri;",
          "2746:    if ((uri = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"uri\", sizeof(\"uri\")-1)) == NULL) {",
          "2752:      call_uri = Z_STRVAL_P(uri);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2759:     }",
          "2760:     smart_str_0(&action);",
          "2764:      smart_str_free(&action);",
          "2765:     xmlFreeDoc(request);",
          "",
          "[Removed Lines]",
          "2762:     ret = do_request(this_ptr, request, location, action.c, soap_version, 0, &response TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2765:     ret = do_request(this_ptr, request, location, action.s->val, soap_version, 0, &response TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2775:    }",
          "2777:   if (!ret) {",
          "2782:    } else {",
          "2785:    }",
          "2786:   } else {",
          "2791:    }",
          "2792:   }",
          "2794:   if (!EG(exception) &&",
          "2795:       Z_TYPE_P(return_value) == IS_OBJECT &&",
          "2796:       instanceof_function(Z_OBJCE_P(return_value), soap_fault_class_entry TSRMLS_CC) &&",
          "2804:   }",
          "2806:  } zend_catch {",
          "",
          "[Removed Lines]",
          "2778:    zval** fault;",
          "2779:    if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\"), (void **) &fault) == SUCCESS) {",
          "2781:     zval_copy_ctor(return_value);",
          "2784:     zval_copy_ctor(return_value);",
          "2787:    zval** fault;",
          "2788:    if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\"), (void **) &fault) == SUCCESS) {",
          "2790:     zval_copy_ctor(return_value);",
          "2797:       (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_exceptions\", sizeof(\"_exceptions\"), (void **) &tmp) != SUCCESS ||",
          "2798:       Z_TYPE_PP(tmp) != IS_BOOL || Z_LVAL_PP(tmp) != 0)) {",
          "2799:    zval *exception;",
          "2801:    MAKE_STD_ZVAL(exception);",
          "2802:    MAKE_COPY_ZVAL(&return_value, exception);",
          "2803:    zend_throw_exception_object(exception TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2781:    zval* fault;",
          "2782:    if ((fault = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\")-1)) != NULL) {",
          "2783:     ZVAL_COPY(return_value, fault);",
          "2785:     ZVAL_COPY(return_value, add_soap_fault(this_ptr, \"Client\", \"Unknown Error\", NULL, NULL TSRMLS_CC));",
          "2788:    zval* fault;",
          "2789:    if ((fault = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__soap_fault\", sizeof(\"__soap_fault\")-1)) != NULL) {",
          "2790:     ZVAL_COPY(return_value, fault);",
          "2797:       ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_exceptions\", sizeof(\"_exceptions\")-1)) == NULL ||",
          "2798:       Z_TYPE_P(tmp) != IS_FALSE)) {",
          "2799:    Z_ADDREF_P(return_value);",
          "2800:    zend_throw_exception_object(return_value TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2826: static void verify_soap_headers_array(HashTable *ht TSRMLS_DC)",
          "2827: {",
          "2834:    php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Invalid SOAP header\");",
          "2835:   }",
          "2838: }",
          "",
          "[Removed Lines]",
          "2828:  zval **tmp;",
          "2830:  zend_hash_internal_pointer_reset(ht);",
          "2831:  while (zend_hash_get_current_data(ht, (void**)&tmp) == SUCCESS) {",
          "2832:   if (Z_TYPE_PP(tmp) != IS_OBJECT ||",
          "2833:       !instanceof_function(Z_OBJCE_PP(tmp), soap_header_class_entry TSRMLS_CC)) {",
          "2836:   zend_hash_move_forward(ht);",
          "2837:  }",
          "",
          "[Added Lines]",
          "2825:  zval *tmp;",
          "2827:  ZEND_HASH_FOREACH_VAL(ht, tmp) {",
          "2828:   if (Z_TYPE_P(tmp) != IS_OBJECT ||",
          "2829:       !instanceof_function(Z_OBJCE_P(tmp), soap_header_class_entry TSRMLS_CC)) {",
          "2832:  } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2849:  zval *headers = NULL;",
          "2850:  zval *output_headers = NULL;",
          "2851:  zval *args;",
          "2854:  int arg_count;",
          "2856:  zend_bool free_soap_headers = 0;",
          "2860:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sa|a!zz\",",
          "2861:   &function, &function_len, &args, &options, &headers, &output_headers) == FAILURE) {",
          "",
          "[Removed Lines]",
          "2852:  zval **real_args = NULL;",
          "2853:  zval **param;",
          "2855:  zval **tmp;",
          "2858:  HashPosition pos;",
          "",
          "[Added Lines]",
          "2847:  zval *real_args = NULL;",
          "2848:  zval *param;",
          "2850:  zval *tmp;",
          "2852:  zval *this_ptr;",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2865:  if (options) {",
          "2866:   HashTable *hto = Z_ARRVAL_P(options);",
          "2870:   }",
          "2875:   }",
          "2880:   }",
          "2881:  }",
          "",
          "[Removed Lines]",
          "2867:   if (zend_hash_find(hto, \"location\", sizeof(\"location\"), (void**)&tmp) == SUCCESS &&",
          "2868:    Z_TYPE_PP(tmp) == IS_STRING) {",
          "2869:    location = Z_STRVAL_PP(tmp);",
          "2872:   if (zend_hash_find(hto, \"soapaction\", sizeof(\"soapaction\"), (void**)&tmp) == SUCCESS &&",
          "2873:    Z_TYPE_PP(tmp) == IS_STRING) {",
          "2874:    soap_action = Z_STRVAL_PP(tmp);",
          "2877:   if (zend_hash_find(hto, \"uri\", sizeof(\"uri\"), (void**)&tmp) == SUCCESS &&",
          "2878:    Z_TYPE_PP(tmp) == IS_STRING) {",
          "2879:    uri = Z_STRVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "2862:   if ((tmp = zend_hash_str_find(hto, \"location\", sizeof(\"location\")-1)) != NULL &&",
          "2863:    Z_TYPE_P(tmp) == IS_STRING) {",
          "2864:    location = Z_STRVAL_P(tmp);",
          "2867:   if ((tmp = zend_hash_str_find(hto, \"soapaction\", sizeof(\"soapaction\")-1)) != NULL &&",
          "2868:    Z_TYPE_P(tmp) == IS_STRING) {",
          "2869:    soap_action = Z_STRVAL_P(tmp);",
          "2872:   if ((tmp = zend_hash_str_find(hto, \"uri\", sizeof(\"uri\")-1)) != NULL &&",
          "2873:    Z_TYPE_P(tmp) == IS_STRING) {",
          "2874:    uri = Z_STRVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2889:             instanceof_function(Z_OBJCE_P(headers), soap_header_class_entry TSRMLS_CC)) {",
          "2890:      soap_headers = emalloc(sizeof(HashTable));",
          "2891:   zend_hash_init(soap_headers, 0, NULL, ZVAL_PTR_DTOR, 0);",
          "2893:   Z_ADDREF_P(headers);",
          "2894:   free_soap_headers = 1;",
          "2895:  } else{",
          "",
          "[Removed Lines]",
          "2892:   zend_hash_next_index_insert(soap_headers, &headers, sizeof(zval*), NULL);",
          "",
          "[Added Lines]",
          "2887:   zend_hash_next_index_insert(soap_headers, headers);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2898:  }",
          "2903:   if (soap_headers) {",
          "2904:    if (!free_soap_headers) {",
          "2905:     HashTable *t =  emalloc(sizeof(HashTable));",
          "2906:     zend_hash_init(t, 0, NULL, ZVAL_PTR_DTOR, 0);",
          "2908:     soap_headers = t;",
          "2909:     free_soap_headers = 1;",
          "2910:    }",
          "2917:   } else {",
          "2919:    free_soap_headers = 0;",
          "2920:   }",
          "2921:  }",
          "",
          "[Removed Lines]",
          "2901:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\"), (void **) &tmp)==SUCCESS) {",
          "2902:   HashTable *default_headers = Z_ARRVAL_P(*tmp);",
          "2907:     zend_hash_copy(t, soap_headers, (copy_ctor_func_t) zval_add_ref, NULL, sizeof(zval *));",
          "2911:    zend_hash_internal_pointer_reset(default_headers);",
          "2912:    while (zend_hash_get_current_data(default_headers, (void**)&tmp) == SUCCESS) {",
          "2913:     Z_ADDREF_PP(tmp);",
          "2914:     zend_hash_next_index_insert(soap_headers, tmp, sizeof(zval *), NULL);",
          "2915:     zend_hash_move_forward(default_headers);",
          "2916:    }",
          "2918:    soap_headers = Z_ARRVAL_P(*tmp);",
          "",
          "[Added Lines]",
          "2896:  this_ptr = getThis();",
          "2897:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\")-1)) != NULL) {",
          "2898:   HashTable *default_headers = Z_ARRVAL_P(tmp);",
          "2903:     zend_hash_copy(t, soap_headers, zval_add_ref);",
          "2907:    ZEND_HASH_FOREACH_VAL(default_headers, tmp) {",
          "2908:     Z_ADDREF_P(tmp);",
          "2909:     zend_hash_next_index_insert(soap_headers, tmp);",
          "2910:    } ZEND_HASH_FOREACH_END();",
          "2912:    soap_headers = Z_ARRVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2923:  arg_count = zend_hash_num_elements(Z_ARRVAL_P(args));",
          "2925:  if (arg_count > 0) {",
          "2933:  }",
          "2934:  if (output_headers) {",
          "2935:   array_init(output_headers);",
          "",
          "[Removed Lines]",
          "2926:   real_args = safe_emalloc(sizeof(zval *), arg_count, 0);",
          "2927:   for (zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(args), &pos);",
          "2928:    zend_hash_get_current_data_ex(Z_ARRVAL_P(args), (void **) &param, &pos) == SUCCESS;",
          "2929:    zend_hash_move_forward_ex(Z_ARRVAL_P(args), &pos)) {",
          "2931:     real_args[i++] = *param;",
          "2932:   }",
          "",
          "[Added Lines]",
          "2920:   real_args = safe_emalloc(sizeof(zval), arg_count, 0);",
          "2921:   ZEND_HASH_FOREACH_VAL(Z_ARRVAL_P(args), param) {",
          "2923:    ZVAL_COPY_VALUE(&real_args[i], param);",
          "2924:    i++;",
          "2925:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2952: PHP_METHOD(SoapClient, __getFunctions)",
          "2953: {",
          "2954:  sdlPtr sdl;",
          "2957:  FETCH_THIS_SDL(sdl);",
          "",
          "[Removed Lines]",
          "2955:  HashPosition pos;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2963:  if (sdl) {",
          "2964:   smart_str buf = {0};",
          "2967:   array_init(return_value);",
          "2975:  }",
          "2976: }",
          "",
          "[Removed Lines]",
          "2965:   sdlFunctionPtr *function;",
          "2968:    zend_hash_internal_pointer_reset_ex(&sdl->functions, &pos);",
          "2969:   while (zend_hash_get_current_data_ex(&sdl->functions, (void **)&function, &pos) != FAILURE) {",
          "2970:    function_to_string((*function), &buf);",
          "2971:    add_next_index_stringl(return_value, buf.c, buf.len);",
          "2972:    smart_str_free(&buf);",
          "2973:    zend_hash_move_forward_ex(&sdl->functions, &pos);",
          "2974:   }",
          "",
          "[Added Lines]",
          "2957:   sdlFunctionPtr function;",
          "2960:   ZEND_HASH_FOREACH_PTR(&sdl->functions, function) {",
          "2961:    function_to_string(function, &buf);",
          "2962:    add_next_index_str(return_value, buf.s);",
          "2963:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2982: PHP_METHOD(SoapClient, __getTypes)",
          "2983: {",
          "2984:  sdlPtr sdl;",
          "2987:  FETCH_THIS_SDL(sdl);",
          "",
          "[Removed Lines]",
          "2985:  HashPosition pos;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2991:  }",
          "2993:  if (sdl) {",
          "2995:   smart_str buf = {0};",
          "2997:   array_init(return_value);",
          "2998:   if (sdl->types) {",
          "3006:   }",
          "3007:  }",
          "3008: }",
          "",
          "[Removed Lines]",
          "2994:   sdlTypePtr *type;",
          "2999:    zend_hash_internal_pointer_reset_ex(sdl->types, &pos);",
          "3000:    while (zend_hash_get_current_data_ex(sdl->types, (void **)&type, &pos) != FAILURE) {",
          "3001:     type_to_string((*type), &buf, 0);",
          "3002:     add_next_index_stringl(return_value, buf.c, buf.len);",
          "3003:     smart_str_free(&buf);",
          "3004:     zend_hash_move_forward_ex(sdl->types, &pos);",
          "3005:    }",
          "",
          "[Added Lines]",
          "2982:   sdlTypePtr type;",
          "2987:    ZEND_HASH_FOREACH_PTR(sdl->types, type) {",
          "2988:     type_to_string(type, &buf, 0);",
          "2989:     add_next_index_str(return_value, buf.s);",
          "2990:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3014: PHP_METHOD(SoapClient, __getLastRequest)",
          "3015: {",
          "3018:  if (zend_parse_parameters_none() == FAILURE) {",
          "3019:   return;",
          "3020:  }",
          "3024:  }",
          "3025:  RETURN_NULL();",
          "3026: }",
          "",
          "[Removed Lines]",
          "3016:  zval **tmp;",
          "3022:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_request\", sizeof(\"__last_request\"), (void **)&tmp) == SUCCESS) {",
          "3023:   RETURN_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);",
          "",
          "[Added Lines]",
          "3001:  zval *tmp;",
          "3007:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"__last_request\", sizeof(\"__last_request\")-1)) != NULL) {",
          "3008:   RETURN_STR(STR_COPY(Z_STR_P(tmp)));",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3032: PHP_METHOD(SoapClient, __getLastResponse)",
          "3033: {",
          "3036:  if (zend_parse_parameters_none() == FAILURE) {",
          "3037:   return;",
          "3038:  }",
          "3042:  }",
          "3043:  RETURN_NULL();",
          "3044: }",
          "",
          "[Removed Lines]",
          "3034:  zval **tmp;",
          "3040:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_response\", sizeof(\"__last_response\"), (void **)&tmp) == SUCCESS) {",
          "3041:   RETURN_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);",
          "",
          "[Added Lines]",
          "3019:  zval *tmp;",
          "3025:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"__last_response\", sizeof(\"__last_response\")-1)) != NULL) {",
          "3026:   RETURN_STR(STR_COPY(Z_STR_P(tmp)));",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3050: PHP_METHOD(SoapClient, __getLastRequestHeaders)",
          "3051: {",
          "3054:  if (zend_parse_parameters_none() == FAILURE) {",
          "3055:   return;",
          "3056:  }",
          "3060:  }",
          "3061:  RETURN_NULL();",
          "3062: }",
          "",
          "[Removed Lines]",
          "3052:  zval **tmp;",
          "3058:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_request_headers\", sizeof(\"__last_request_headers\"), (void **)&tmp) == SUCCESS) {",
          "3059:   RETURN_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);",
          "",
          "[Added Lines]",
          "3037:  zval *tmp;",
          "3043:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"__last_request_headers\", sizeof(\"__last_request_headers\")-1)) != NULL) {",
          "3044:   RETURN_STR(STR_COPY(Z_STR_P(tmp)));",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3068: PHP_METHOD(SoapClient, __getLastResponseHeaders)",
          "3069: {",
          "3072:  if (zend_parse_parameters_none() == FAILURE) {",
          "3073:   return;",
          "3074:  }",
          "3078:  }",
          "3079:  RETURN_NULL();",
          "3080: }",
          "",
          "[Removed Lines]",
          "3070:  zval **tmp;",
          "3076:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__last_response_headers\", sizeof(\"__last_response_headers\"), (void **)&tmp) == SUCCESS) {",
          "3077:   RETURN_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);",
          "",
          "[Added Lines]",
          "3055:  zval *tmp;",
          "3061:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(getThis()), \"__last_response_headers\", sizeof(\"__last_response_headers\")-1)) != NULL) {",
          "3062:   RETURN_STR(STR_COPY(Z_STR_P(tmp)));",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3089:   int   buf_size, location_size, action_size;",
          "3090:   long  version;",
          "3091:   long  one_way = 0;",
          "3093:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sssl|l\",",
          "3094:      &buf, &buf_size,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3077:   zval *this_ptr = getThis();",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3101:   one_way = 0;",
          "3102:  }",
          "3103:  if (one_way) {",
          "3105:    RETURN_EMPTY_STRING();",
          "3106:   }",
          "3107:  } else if (make_http_soap_request(this_ptr, buf, buf_size, location, action, version,",
          "3110:   return;",
          "3111:  }",
          "3112:  RETURN_NULL();",
          "",
          "[Removed Lines]",
          "3104:   if (make_http_soap_request(this_ptr, buf, buf_size, location, action, version, NULL, NULL TSRMLS_CC)) {",
          "3108:      &Z_STRVAL_P(return_value), &Z_STRLEN_P(return_value) TSRMLS_CC)) {",
          "3109:   return_value->type = IS_STRING;",
          "",
          "[Added Lines]",
          "3090:   if (make_http_soap_request(this_ptr, buf, buf_size, location, action, version, NULL TSRMLS_CC)) {",
          "3094:      return_value TSRMLS_CC)) {",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3122:  char *name;",
          "3123:  char *val = NULL;",
          "3124:  int  name_len, val_len = 0;",
          "3127:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|s\", &name, &name_len, &val, &val_len) == FAILURE) {",
          "3128:   return;",
          "3129:  }",
          "3131:  if (val == NULL) {",
          "3134:   }",
          "3135:  } else {",
          "3144:   }",
          "3150:  }",
          "3151: }",
          "",
          "[Removed Lines]",
          "3125:  zval **cookies;",
          "3132:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == SUCCESS) {",
          "3133:    zend_hash_del(Z_ARRVAL_PP(cookies), name, name_len+1);",
          "3136:   zval *zcookie;",
          "3138:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), (void **)&cookies) == FAILURE) {",
          "3139:    zval *tmp_cookies;",
          "3141:    MAKE_STD_ZVAL(tmp_cookies);",
          "3142:    array_init(tmp_cookies);",
          "3143:    zend_hash_update(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\"), &tmp_cookies, sizeof(zval *), (void **)&cookies);",
          "3146:   ALLOC_INIT_ZVAL(zcookie);",
          "3147:   array_init(zcookie);",
          "3148:   add_index_stringl(zcookie, 0, val, val_len);",
          "3149:   add_assoc_zval_ex(*cookies, name, name_len+1, zcookie);",
          "",
          "[Added Lines]",
          "3110:  zval *cookies;",
          "3111:  zval *this_ptr = getThis();",
          "3118:   if ((cookies = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\")-1)) != NULL) {",
          "3119:    zend_hash_str_del(Z_ARRVAL_P(cookies), name, name_len);",
          "3122:   zval zcookie;",
          "3124:   if ((cookies = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\")-1)) == NULL) {",
          "3125:    zval tmp_cookies;",
          "3127:    array_init(&tmp_cookies);",
          "3128:    cookies = zend_hash_str_update(Z_OBJPROP_P(this_ptr), \"_cookies\", sizeof(\"_cookies\")-1, &tmp_cookies);",
          "3131:   array_init(&zcookie);",
          "3132:   add_index_stringl(&zcookie, 0, val, val_len);",
          "3133:   add_assoc_zval_ex(cookies, name, name_len, &zcookie);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3158: PHP_METHOD(SoapClient, __setSoapHeaders)",
          "3159: {",
          "3160:  zval *headers = NULL;",
          "3162:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|z\", &headers) == FAILURE) {",
          "3163:   return;",
          "3164:  }",
          "3166:  if (headers == NULL || Z_TYPE_P(headers) == IS_NULL) {",
          "3168:  } else if (Z_TYPE_P(headers) == IS_ARRAY) {",
          "3169:   zval *default_headers;",
          "3171:   verify_soap_headers_array(Z_ARRVAL_P(headers) TSRMLS_CC);",
          "3173:    add_property_zval(this_ptr, \"__default_headers\", headers);",
          "3174:   }",
          "3175:  } else if (Z_TYPE_P(headers) == IS_OBJECT &&",
          "3176:             instanceof_function(Z_OBJCE_P(headers), soap_header_class_entry TSRMLS_CC)) {",
          "3180:   Z_ADDREF_P(headers);",
          "3184:  } else{",
          "3185:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid SOAP header\");",
          "3186:  }",
          "",
          "[Removed Lines]",
          "3167:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\"));",
          "3172:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\"), (void **) &default_headers)==FAILURE) {",
          "3177:   zval *default_headers;",
          "3178:   ALLOC_INIT_ZVAL(default_headers);",
          "3179:   array_init(default_headers);",
          "3181:   add_next_index_zval(default_headers, headers);",
          "3182:   Z_DELREF_P(default_headers);",
          "3183:   add_property_zval(this_ptr, \"__default_headers\", default_headers);",
          "",
          "[Added Lines]",
          "3145:  zval *this_ptr = getThis();",
          "3152:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\")-1);",
          "3157:   if ((default_headers = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\")-1)) == NULL) {",
          "3162:   zval default_headers;",
          "3164:   array_init(&default_headers);",
          "3166:   add_next_index_zval(&default_headers, headers);",
          "3167:   add_property_zval(this_ptr, \"__default_headers\", &default_headers);",
          "3168:   Z_DELREF_P(&default_headers);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3200: {",
          "3201:  char *location = NULL;",
          "3202:  int  location_len = 0;",
          "3205:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|s\", &location, &location_len) == FAILURE) {",
          "3206:   return;",
          "3207:  }",
          "3211:  } else {",
          "3213:  }",
          "3215:  if (location && location_len) {",
          "3216:   add_property_stringl(this_ptr, \"location\", location, location_len);",
          "3217:  } else {",
          "3219:  }",
          "3220: }",
          "3223: static void clear_soap_fault(zval *obj TSRMLS_DC)",
          "3224: {",
          "3227:  }",
          "3228: }",
          "3230: zval* add_soap_fault(zval *obj, char *fault_code, char *fault_string, char *fault_actor, zval *fault_detail TSRMLS_DC)",
          "3231: {",
          "3239: }",
          "3241: static void set_soap_fault(zval *obj, char *fault_code_ns, char *fault_code, char *fault_string, char *fault_actor, zval *fault_detail, char *name TSRMLS_DC)",
          "",
          "[Removed Lines]",
          "3203:  zval **tmp;",
          "3209:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"location\", sizeof(\"location\"),(void **) &tmp) == SUCCESS && Z_TYPE_PP(tmp) == IS_STRING) {",
          "3210:   RETVAL_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);",
          "3212:    RETVAL_NULL();",
          "3218:   zend_hash_del(Z_OBJPROP_P(this_ptr), \"location\", sizeof(\"location\"));",
          "3225:  if (obj != NULL && obj->type == IS_OBJECT) {",
          "3226:   zend_hash_del(Z_OBJPROP_P(obj), \"__soap_fault\", sizeof(\"__soap_fault\"));",
          "3232:  zval *fault;",
          "3233:  ALLOC_INIT_ZVAL(fault);",
          "3234:  set_soap_fault(fault, NULL, fault_code, fault_string, fault_actor, fault_detail, NULL TSRMLS_CC);",
          "3235:  Z_DELREF_P(fault);",
          "3237:  add_property_zval(obj, \"__soap_fault\", fault);",
          "3238:  return fault;",
          "",
          "[Added Lines]",
          "3188:  zval *tmp;",
          "3189:  zval *this_ptr = getThis();",
          "3195:  if ((tmp = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"location\", sizeof(\"location\")-1)) != NULL && Z_TYPE_P(tmp) == IS_STRING) {",
          "3196:   RETVAL_STR(STR_COPY(Z_STR_P(tmp)));",
          "3198:   RETVAL_NULL();",
          "3204:   zend_hash_str_del(Z_OBJPROP_P(this_ptr), \"location\", sizeof(\"location\")-1);",
          "3211:  if (obj != NULL && Z_TYPE_P(obj) == IS_OBJECT) {",
          "3212:   zend_hash_str_del(Z_OBJPROP_P(obj), \"__soap_fault\", sizeof(\"__soap_fault\")-1);",
          "3218:  zval fault;",
          "3220:  set_soap_fault(&fault, NULL, fault_code, fault_string, fault_actor, fault_detail, NULL TSRMLS_CC);",
          "3221:  add_property_zval(obj, \"__soap_fault\", &fault);",
          "3222:  Z_DELREF(fault);",
          "3225:  return NULL;",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3291:  }",
          "3292: }",
          "3295: {",
          "3296:  int cur_param = 0,num_of_params = 0;",
          "3299:  if (function != NULL) {",
          "3301:   xmlNodePtr val;",
          "3302:   int use_names = 0;",
          "",
          "[Removed Lines]",
          "3294: static void deserialize_parameters(xmlNodePtr params, sdlFunctionPtr function, int *num_params, zval ***parameters TSRMLS_DC)",
          "3297:  zval **tmp_parameters = NULL;",
          "3300:   sdlParamPtr *param;",
          "",
          "[Added Lines]",
          "3281: static void deserialize_parameters(xmlNodePtr params, sdlFunctionPtr function, int *num_params, zval **parameters TSRMLS_DC)",
          "3284:  zval *tmp_parameters = NULL;",
          "3287:   sdlParamPtr param;",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3305:    return;",
          "3306:   }",
          "3307:   num_of_params = zend_hash_num_elements(function->requestParameters);",
          "3311:     use_names = 1;",
          "3312:    }",
          "3315:   if (use_names) {",
          "3316:    tmp_parameters = safe_emalloc(num_of_params, sizeof(zval *), 0);",
          "3320:     if (!val) {",
          "3324:     } else {",
          "3326:     }",
          "3327:     cur_param++;",
          "3333:    return;",
          "3334:   }",
          "3335:  }",
          "",
          "[Removed Lines]",
          "3308:   zend_hash_internal_pointer_reset(function->requestParameters);",
          "3309:   while (zend_hash_get_current_data(function->requestParameters, (void **)&param) == SUCCESS) {",
          "3310:    if (get_node(params, (*param)->paramName) != NULL) {",
          "3313:    zend_hash_move_forward(function->requestParameters);",
          "3314:   }",
          "3317:    zend_hash_internal_pointer_reset(function->requestParameters);",
          "3318:    while (zend_hash_get_current_data(function->requestParameters, (void **)&param) == SUCCESS) {",
          "3319:     val = get_node(params, (*param)->paramName);",
          "3322:      MAKE_STD_ZVAL(tmp_parameters[cur_param]);",
          "3323:      ZVAL_NULL(tmp_parameters[cur_param]);",
          "3325:      tmp_parameters[cur_param] = master_to_zval((*param)->encode, val TSRMLS_CC);",
          "3329:     zend_hash_move_forward(function->requestParameters);",
          "3330:    }",
          "3331:    (*parameters) = tmp_parameters;",
          "3332:    (*num_params) = num_of_params;",
          "",
          "[Added Lines]",
          "3295:   ZEND_HASH_FOREACH_PTR(function->requestParameters, param) {",
          "3296:    if (get_node(params, param->paramName) != NULL) {",
          "3299:   } ZEND_HASH_FOREACH_END();",
          "3302:    ZEND_HASH_FOREACH_PTR(function->requestParameters, param) {",
          "3303:     val = get_node(params, param->paramName);",
          "3306:      ZVAL_NULL(&tmp_parameters[cur_param]);",
          "3308:      master_to_zval(&tmp_parameters[cur_param], param->encode, val TSRMLS_CC);",
          "3311:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3361:    while (trav != 0 && cur_param < num_of_params) {",
          "3362:     if (trav->type == XML_ELEMENT_NODE) {",
          "3363:      encodePtr enc;",
          "3365:      if (function != NULL &&",
          "3367:       TSRMLS_FETCH();",
          "3368:       soap_server_fault(\"Client\", \"Error cannot find parameter\", NULL, NULL, NULL TSRMLS_CC);",
          "3369:      }",
          "3370:      if (param == NULL) {",
          "3371:       enc = NULL;",
          "3372:      } else {",
          "3374:      }",
          "3376:      cur_param++;",
          "3377:     }",
          "3378:     trav = trav->next;",
          "",
          "[Removed Lines]",
          "3364:      sdlParamPtr *param = NULL;",
          "3366:          zend_hash_index_find(function->requestParameters, cur_param, (void **)&param) == FAILURE) {",
          "3373:       enc = (*param)->encode;",
          "3375:      tmp_parameters[cur_param] = master_to_zval(enc, trav TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3345:      sdlParamPtr param = NULL;",
          "3347:          (param = zend_hash_index_find_ptr(function->requestParameters, cur_param)) == NULL) {",
          "3354:       enc = param->encode;",
          "3356:      master_to_zval(&tmp_parameters[cur_param], enc, trav TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3405:   function = get_doc_function(sdl, func);",
          "3406:  }",
          "3409:  if (function != NULL) {",
          "3411:  } else {",
          "3413:  }",
          "3415:  return function;",
          "3416: }",
          "3419: {",
          "3420:  char* envelope_ns = NULL;",
          "3421:  xmlNodePtr trav,env,head,body,func;",
          "",
          "[Removed Lines]",
          "3408:  INIT_ZVAL(*function_name);",
          "3410:   ZVAL_STRING(function_name, (char *)function->functionName, 1);",
          "3412:   ZVAL_STRING(function_name, (char *)func->name, 1);",
          "3418: static sdlFunctionPtr deserialize_function_call(sdlPtr sdl, xmlDocPtr request, char* actor, zval *function_name, int *num_params, zval ***parameters, int *version, soapHeader **headers TSRMLS_DC)",
          "",
          "[Added Lines]",
          "3390:   ZVAL_STRING(function_name, (char *)function->functionName);",
          "3392:   ZVAL_STRING(function_name, (char *)func->name);",
          "3398: static sdlFunctionPtr deserialize_function_call(sdlPtr sdl, xmlDocPtr request, char* actor, zval *function_name, int *num_params, zval **parameters, int *version, soapHeader **headers TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3526:  if (func == NULL) {",
          "3527:   function = get_doc_function(sdl, NULL);",
          "3528:   if (function != NULL) {",
          "3531:   } else {",
          "3532:    soap_server_fault(\"Client\", \"looks like we got \\\"Body\\\" without function call\", NULL, NULL, NULL TSRMLS_CC);",
          "3533:   }",
          "",
          "[Removed Lines]",
          "3529:    INIT_ZVAL(*function_name);",
          "3530:    ZVAL_STRING(function_name, (char *)function->functionName, 1);",
          "",
          "[Added Lines]",
          "3509:    ZVAL_STRING(function_name, (char *)function->functionName);",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3619:     h->mustUnderstand = mustUnderstand;",
          "3620:     h->function = find_function(sdl, hdr_func, &h->function_name);",
          "3621:     if (!h->function && sdl && function && function->binding && function->binding->bindingType == BINDING_SOAP) {",
          "3623:      sdlSoapBindingFunctionPtr fnb = (sdlSoapBindingFunctionPtr)function->bindingAttributes;",
          "3624:      if (fnb->input.headers) {",
          "3625:       smart_str key = {0};",
          "",
          "[Removed Lines]",
          "3622:      sdlSoapBindingFunctionHeaderPtr *hdr;",
          "",
          "[Added Lines]",
          "3601:      sdlSoapBindingFunctionHeaderPtr hdr;",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3630:       }",
          "3631:       smart_str_appendl(&key, Z_STRVAL(h->function_name), Z_STRLEN(h->function_name));",
          "3632:       smart_str_0(&key);",
          "3635:       }",
          "3636:       smart_str_free(&key);",
          "3637:      }",
          "3638:     }",
          "3639:     if (h->hdr) {",
          "3640:      h->num_params = 1;",
          "3643:     } else {",
          "3644:      if (h->function && h->function->binding && h->function->binding->bindingType == BINDING_SOAP) {",
          "3645:       sdlSoapBindingFunctionPtr fnb = (sdlSoapBindingFunctionPtr)h->function->bindingAttributes;",
          "",
          "[Removed Lines]",
          "3633:       if (zend_hash_find(fnb->input.headers, key.c, key.len+1, (void**)&hdr) == SUCCESS) {",
          "3634:        h->hdr = *hdr;",
          "3641:      h->parameters = emalloc(sizeof(zval*));",
          "3642:      h->parameters[0] = master_to_zval(h->hdr->encode, hdr_func TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3612:       if ((hdr = zend_hash_find_ptr(fnb->input.headers, key.s)) != NULL) {",
          "3613:        h->hdr = hdr;",
          "3620:      h->parameters = emalloc(sizeof(zval));",
          "3621:      master_to_zval(&h->parameters[0], h->hdr->encode, hdr_func TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3649:      }",
          "3650:      deserialize_parameters(hdr_func, h->function, &h->num_params, &h->parameters TSRMLS_CC);",
          "3651:     }",
          "3653:     if (last == NULL) {",
          "3655:     } else {",
          "",
          "[Removed Lines]",
          "3652:     INIT_ZVAL(h->retval);",
          "",
          "[Added Lines]",
          "3631:     ZVAL_NULL(&h->retval);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3680: static void set_soap_header_attributes(xmlNodePtr h, HashTable *ht, int version)",
          "3681: {",
          "3686:   if (version == SOAP_1_1) {",
          "3687:    xmlSetProp(h, BAD_CAST(SOAP_1_1_ENV_NS_PREFIX\":mustUnderstand\"), BAD_CAST(\"1\"));",
          "3688:   } else {",
          "3689:    xmlSetProp(h, BAD_CAST(SOAP_1_2_ENV_NS_PREFIX\":mustUnderstand\"), BAD_CAST(\"true\"));",
          "3690:   }",
          "3691:  }",
          "3694:    if (version == SOAP_1_1) {",
          "3696:    } else {",
          "3698:    }",
          "3700:    if (version == SOAP_1_1) {",
          "3702:      xmlSetProp(h, BAD_CAST(SOAP_1_1_ENV_NS_PREFIX\":actor\"), BAD_CAST(SOAP_1_1_ACTOR_NEXT));",
          "3703:     }",
          "3704:    } else {",
          "3706:      xmlSetProp(h, BAD_CAST(SOAP_1_2_ENV_NS_PREFIX\":role\"), BAD_CAST(SOAP_1_2_ACTOR_NEXT));",
          "3708:      xmlSetProp(h, BAD_CAST(SOAP_1_2_ENV_NS_PREFIX\":role\"), BAD_CAST(SOAP_1_2_ACTOR_NONE));",
          "3710:      xmlSetProp(h, BAD_CAST(SOAP_1_2_ENV_NS_PREFIX\":role\"), BAD_CAST(SOAP_1_2_ACTOR_UNLIMATERECEIVER));",
          "3711:     }",
          "3712:    }",
          "",
          "[Removed Lines]",
          "3682:  zval **tmp;",
          "3684:  if (zend_hash_find(ht, \"mustUnderstand\", sizeof(\"mustUnderstand\"), (void**)&tmp) == SUCCESS &&",
          "3685:      Z_TYPE_PP(tmp) == IS_BOOL && Z_LVAL_PP(tmp)) {",
          "3692:  if (zend_hash_find(ht, \"actor\", sizeof(\"actor\"), (void**)&tmp) == SUCCESS) {",
          "3693:   if (Z_TYPE_PP(tmp) == IS_STRING) {",
          "3695:     xmlSetProp(h, BAD_CAST(SOAP_1_1_ENV_NS_PREFIX\":actor\"), BAD_CAST(Z_STRVAL_PP(tmp)));",
          "3697:     xmlSetProp(h, BAD_CAST(SOAP_1_2_ENV_NS_PREFIX\":role\"), BAD_CAST(Z_STRVAL_PP(tmp)));",
          "3699:   } else if (Z_TYPE_PP(tmp) == IS_LONG) {",
          "3701:     if (Z_LVAL_PP(tmp) == SOAP_ACTOR_NEXT) {",
          "3705:     if (Z_LVAL_PP(tmp) == SOAP_ACTOR_NEXT) {",
          "3707:     } else if (Z_LVAL_PP(tmp) == SOAP_ACTOR_NONE) {",
          "3709:     } else if (Z_LVAL_PP(tmp) == SOAP_ACTOR_UNLIMATERECEIVER) {",
          "",
          "[Added Lines]",
          "3661:  zval *tmp;",
          "3663:  if ((tmp = zend_hash_str_find(ht, \"mustUnderstand\", sizeof(\"mustUnderstand\")-1)) != NULL &&",
          "3664:      Z_TYPE_P(tmp) == IS_TRUE) {",
          "3671:  if ((tmp = zend_hash_str_find(ht, \"actor\", sizeof(\"actor\")-1)) != NULL) {",
          "3672:   if (Z_TYPE_P(tmp) == IS_STRING) {",
          "3674:     xmlSetProp(h, BAD_CAST(SOAP_1_1_ENV_NS_PREFIX\":actor\"), BAD_CAST(Z_STRVAL_P(tmp)));",
          "3676:     xmlSetProp(h, BAD_CAST(SOAP_1_2_ENV_NS_PREFIX\":role\"), BAD_CAST(Z_STRVAL_P(tmp)));",
          "3678:   } else if (Z_TYPE_P(tmp) == IS_LONG) {",
          "3680:     if (Z_LVAL_P(tmp) == SOAP_ACTOR_NEXT) {",
          "3684:     if (Z_LVAL_P(tmp) == SOAP_ACTOR_NEXT) {",
          "3686:     } else if (Z_LVAL_P(tmp) == SOAP_ACTOR_NONE) {",
          "3688:     } else if (Z_LVAL_P(tmp) == SOAP_ACTOR_UNLIMATERECEIVER) {",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3782:    }",
          "3783:   }",
          "3784:  } else if (param_count > 1 && Z_TYPE_P(ret) == IS_ARRAY) {",
          "3787:   int i = 0;",
          "3797:    if (style == SOAP_RPC) {",
          "3799:    } else {",
          "3801:     if (function && function->binding->bindingType == BINDING_SOAP) {",
          "3802:      if (parameter && parameter->element) {",
          "3803:       ns = encode_add_ns(param, parameter->element->namens);",
          "",
          "[Removed Lines]",
          "3785:   HashPosition pos;",
          "3786:   zval **data;",
          "3789:   zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(ret), &pos);",
          "3790:   while (zend_hash_get_current_data_ex(Z_ARRVAL_P(ret), (void **)&data, &pos) != FAILURE) {",
          "3791:    char *param_name = NULL;",
          "3792:    unsigned int param_name_len;",
          "3793:    ulong param_index = i;",
          "3795:    zend_hash_get_current_key_ex(Z_ARRVAL_P(ret), &param_name, &param_name_len, &param_index, 0, &pos);",
          "3796:    parameter = get_param(function, param_name, param_index, TRUE);",
          "3798:     param = serialize_parameter(parameter, *data, i, param_name, use, method TSRMLS_CC);",
          "3800:     param = serialize_parameter(parameter, *data, i, param_name, use, body TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3764:   zval *data;",
          "3766:   zend_string *param_name;",
          "3768:   ulong param_index = i;",
          "3770:   ZEND_HASH_FOREACH_KEY_VAL(Z_ARRVAL_P(ret), param_index, param_name, data) {",
          "3771:    parameter = get_param(function, param_name->val, param_index, TRUE);",
          "3773:     param = serialize_parameter(parameter, data, i, param_name->val, use, method TSRMLS_CC);",
          "3775:     param = serialize_parameter(parameter, data, i, param_name->val, use, body TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3807:     }",
          "3808:    }",
          "3811:    i++;",
          "3813:  }",
          "3814:  if (use == SOAP_ENCODED && version == SOAP_1_2 && method != NULL) {",
          "3815:   xmlSetNsProp(method, body->ns, BAD_CAST(\"encodingStyle\"), BAD_CAST(SOAP_1_2_ENC_NAMESPACE));",
          "",
          "[Removed Lines]",
          "3810:    zend_hash_move_forward_ex(Z_ARRVAL_P(ret), &pos);",
          "3812:   }",
          "",
          "[Added Lines]",
          "3786:    param_index = i;",
          "3787:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3851:      instanceof_function(Z_OBJCE_P(ret), soap_fault_class_entry TSRMLS_CC)) {",
          "3852:    char *detail_name;",
          "3853:   HashTable* prop;",
          "3855:   sdlFaultPtr fault = NULL;",
          "3856:   char *fault_ns = NULL;",
          "3858:   prop = Z_OBJPROP_P(ret);",
          "3860:   if (headers &&",
          "3862:    encodePtr hdr_enc = NULL;",
          "3863:    int hdr_use = SOAP_LITERAL;",
          "3865:    char *hdr_ns   = headers->hdr?headers->hdr->ns:NULL;",
          "3866:    char *hdr_name = Z_STRVAL(headers->function_name);",
          "",
          "[Removed Lines]",
          "3854:   zval **tmp;",
          "3861:       zend_hash_find(prop, \"headerfault\", sizeof(\"headerfault\"), (void**)&tmp) == SUCCESS) {",
          "3864:    zval *hdr_ret  = *tmp;",
          "",
          "[Added Lines]",
          "3829:   zval *tmp;",
          "3836:       (tmp = zend_hash_str_find(prop, \"headerfault\", sizeof(\"headerfault\")-1)) != NULL) {",
          "3839:    zval *hdr_ret  = tmp;",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3869:    if (Z_TYPE_P(hdr_ret) == IS_OBJECT &&",
          "3870:        instanceof_function(Z_OBJCE_P(hdr_ret), soap_header_class_entry TSRMLS_CC)) {",
          "3871:     HashTable* ht = Z_OBJPROP_P(hdr_ret);",
          "3873:     smart_str key = {0};",
          "3878:      smart_str_appendc(&key, ':');",
          "3880:     }",
          "3885:     }",
          "3886:     smart_str_0(&key);",
          "3887:     if (headers->hdr && headers->hdr->headerfaults &&",
          "3891:     }",
          "3892:     smart_str_free(&key);",
          "3895:     } else {",
          "3896:      hdr_ret = NULL;",
          "3897:     }",
          "",
          "[Removed Lines]",
          "3872:     sdlSoapBindingFunctionHeaderPtr *hdr;",
          "3875:     if (zend_hash_find(ht, \"namespace\", sizeof(\"namespace\"), (void**)&tmp) == SUCCESS &&",
          "3876:          Z_TYPE_PP(tmp) == IS_STRING) {",
          "3877:      smart_str_appendl(&key, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "3879:      hdr_ns = Z_STRVAL_PP(tmp);",
          "3881:     if (zend_hash_find(ht, \"name\", sizeof(\"name\"), (void**)&tmp) == SUCCESS &&",
          "3882:         Z_TYPE_PP(tmp) == IS_STRING) {",
          "3883:      smart_str_appendl(&key, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "3884:      hdr_name = Z_STRVAL_PP(tmp);",
          "3888:         zend_hash_find(headers->hdr->headerfaults, key.c, key.len+1, (void**)&hdr) == SUCCESS) {",
          "3889:      hdr_enc = (*hdr)->encode;",
          "3890:      hdr_use = (*hdr)->use;",
          "3893:     if (zend_hash_find(ht, \"data\", sizeof(\"data\"), (void**)&tmp) == SUCCESS) {",
          "3894:      hdr_ret = *tmp;",
          "",
          "[Added Lines]",
          "3847:     sdlSoapBindingFunctionHeaderPtr hdr;",
          "3850:     if ((tmp = zend_hash_str_find(ht, \"namespace\", sizeof(\"namespace\")-1)) != NULL &&",
          "3851:          Z_TYPE_P(tmp) == IS_STRING) {",
          "3852:      smart_str_appendl(&key, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "3854:      hdr_ns = Z_STRVAL_P(tmp);",
          "3856:     if ((tmp = zend_hash_str_find(ht, \"name\", sizeof(\"name\")-1)) != NULL &&",
          "3857:         Z_TYPE_P(tmp) == IS_STRING) {",
          "3858:      smart_str_appendl(&key, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "3859:      hdr_name = Z_STRVAL_P(tmp);",
          "3863:         (hdr = zend_hash_find_ptr(headers->hdr->headerfaults, key.s)) != NULL) {",
          "3864:      hdr_enc = hdr->encode;",
          "3865:      hdr_use = hdr->use;",
          "3868:     if ((tmp = zend_hash_str_find(ht, \"data\", sizeof(\"data\")-1)) != NULL) {",
          "3869:      hdr_ret = tmp;",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3916:   body = xmlNewChild(envelope, ns, BAD_CAST(\"Body\"), NULL);",
          "3917:   param = xmlNewChild(body, ns, BAD_CAST(\"Fault\"), NULL);",
          "3921:   }",
          "3922:   use = SOAP_LITERAL;",
          "3925:    if (function && function->faults &&",
          "3928:     if (function->binding &&",
          "3929:         function->binding->bindingType == BINDING_SOAP &&",
          "3930:         fault->bindingAttributes) {",
          "",
          "[Removed Lines]",
          "3919:   if (zend_hash_find(prop, \"faultcodens\", sizeof(\"faultcodens\"), (void**)&tmp) == SUCCESS && Z_TYPE_PP(tmp) == IS_STRING) {",
          "3920:    fault_ns = Z_STRVAL_PP(tmp);",
          "3923:   if (zend_hash_find(prop, \"_name\", sizeof(\"_name\"), (void**)&tmp) == SUCCESS && Z_TYPE_PP(tmp) == IS_STRING) {",
          "3924:    sdlFaultPtr *tmp_fault;",
          "3926:        zend_hash_find(function->faults, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp)+1, (void**)&tmp_fault) == SUCCESS) {",
          "3927:      fault = *tmp_fault;",
          "",
          "[Added Lines]",
          "3894:   if ((tmp = zend_hash_str_find(prop, \"faultcodens\", sizeof(\"faultcodens\")-1)) != NULL && Z_TYPE_P(tmp) == IS_STRING) {",
          "3895:    fault_ns = Z_STRVAL_P(tmp);",
          "3898:   if ((tmp = zend_hash_str_find(prop, \"_name\", sizeof(\"_name\")-1)) != NULL && Z_TYPE_P(tmp) == IS_STRING) {",
          "3899:    sdlFaultPtr tmp_fault;",
          "3901:        (tmp_fault = zend_hash_find_ptr(function->faults, Z_STR_P(tmp))) != NULL) {",
          "3902:     fault = tmp_fault;",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3939:              zend_hash_num_elements(function->faults) == 1) {",
          "3941:    zend_hash_internal_pointer_reset(function->faults);",
          "3944:    if (function->binding &&",
          "3945:        function->binding->bindingType == BINDING_SOAP &&",
          "3946:        fault->bindingAttributes) {",
          "3947:     sdlSoapBindingFunctionFaultPtr fb = (sdlSoapBindingFunctionFaultPtr)fault->bindingAttributes;",
          "3948:     use = fb->use;",
          "3949:     if (fault_ns == NULL) {",
          "3951:     }",
          "3952:    }",
          "3953:   }",
          "",
          "[Removed Lines]",
          "3942:    zend_hash_get_current_data(function->faults, (void**)&fault);",
          "3943:    fault = *(sdlFaultPtr*)fault;",
          "3950:       fault_ns = fb->ns;",
          "",
          "[Added Lines]",
          "3917:    fault = zend_hash_get_current_data_ptr(function->faults);",
          "3924:      fault_ns = fb->ns;",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "3959:    sdlParamPtr sparam;",
          "3961:    zend_hash_internal_pointer_reset(fault->details);",
          "3964:    if (sparam->element) {",
          "3965:     fault_ns = sparam->element->namens;",
          "3966:    }",
          "3967:   }",
          "3969:   if (version == SOAP_1_1) {",
          "3972:     xmlNodePtr node = xmlNewNode(NULL, BAD_CAST(\"faultcode\"));",
          "3974:     xmlAddChild(param, node);",
          "3975:     if (fault_ns) {",
          "3976:      xmlNsPtr nsptr = encode_add_ns(node, fault_ns);",
          "3978:      xmlNodeSetContent(node, code);",
          "3979:      xmlFree(code);",
          "3980:     } else {",
          "3982:     }",
          "3984:    }",
          "3987:     xmlNodeSetName(node, BAD_CAST(\"faultstring\"));",
          "3988:    }",
          "3991:     xmlNodeSetName(node, BAD_CAST(\"faultactor\"));",
          "3992:    }",
          "3993:    detail_name = \"detail\";",
          "3994:   } else {",
          "3997:     xmlNodePtr node = xmlNewChild(param, ns, BAD_CAST(\"Code\"), NULL);",
          "3999:     node = xmlNewChild(node, ns, BAD_CAST(\"Value\"), NULL);",
          "4000:     if (fault_ns) {",
          "4001:      xmlNsPtr nsptr = encode_add_ns(node, fault_ns);",
          "4003:      xmlNodeSetContent(node, code);",
          "4004:      xmlFree(code);",
          "4005:     } else {",
          "4007:     }",
          "4009:    }",
          "4011:     xmlNodePtr node = xmlNewChild(param, ns, BAD_CAST(\"Reason\"), NULL);",
          "4013:     xmlNodeSetName(node, BAD_CAST(\"Text\"));",
          "4014:     xmlSetNs(node, ns);",
          "4015:    }",
          "",
          "[Removed Lines]",
          "3962:    zend_hash_get_current_data(fault->details, (void**)&sparam);",
          "3963:    sparam = *(sdlParamPtr*)sparam;",
          "3970:    if (zend_hash_find(prop, \"faultcode\", sizeof(\"faultcode\"), (void**)&tmp) == SUCCESS) {",
          "3971:     size_t new_len;",
          "3973:     char *str = php_escape_html_entities((unsigned char*)Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), &new_len, 0, 0, NULL TSRMLS_CC);",
          "3977:      xmlChar *code = xmlBuildQName(BAD_CAST(str), nsptr->prefix, NULL, 0);",
          "3981:      xmlNodeSetContentLen(node, BAD_CAST(str), (int)new_len);",
          "3983:     efree(str);",
          "3985:    if (zend_hash_find(prop, \"faultstring\", sizeof(\"faultstring\"), (void**)&tmp) == SUCCESS) {",
          "3986:     xmlNodePtr node = master_to_xml(get_conversion(IS_STRING), *tmp, SOAP_LITERAL, param TSRMLS_CC);",
          "3989:    if (zend_hash_find(prop, \"faultactor\", sizeof(\"faultactor\"), (void**)&tmp) == SUCCESS) {",
          "3990:     xmlNodePtr node = master_to_xml(get_conversion(IS_STRING), *tmp, SOAP_LITERAL, param TSRMLS_CC);",
          "3995:    if (zend_hash_find(prop, \"faultcode\", sizeof(\"faultcode\"), (void**)&tmp) == SUCCESS) {",
          "3996:     size_t new_len;",
          "3998:     char *str = php_escape_html_entities((unsigned char*)Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), &new_len, 0, 0, NULL TSRMLS_CC);",
          "4002:      xmlChar *code = xmlBuildQName(BAD_CAST(str), nsptr->prefix, NULL, 0);",
          "4006:      xmlNodeSetContentLen(node, BAD_CAST(str), (int)new_len);",
          "4008:     efree(str);",
          "4010:    if (zend_hash_find(prop, \"faultstring\", sizeof(\"faultstring\"), (void**)&tmp) == SUCCESS) {",
          "4012:     node = master_to_xml(get_conversion(IS_STRING), *tmp, SOAP_LITERAL, node TSRMLS_CC);",
          "",
          "[Added Lines]",
          "3936:    sparam = zend_hash_get_current_data_ptr(fault->details);",
          "3943:    if ((tmp = zend_hash_str_find(prop, \"faultcode\", sizeof(\"faultcode\")-1)) != NULL) {",
          "3945:     zend_string *str = php_escape_html_entities((unsigned char*)Z_STRVAL_P(tmp), Z_STRLEN_P(tmp), 0, 0, NULL TSRMLS_CC);",
          "3949:      xmlChar *code = xmlBuildQName(BAD_CAST(str->val), nsptr->prefix, NULL, 0);",
          "3953:      xmlNodeSetContentLen(node, BAD_CAST(str->val), (int)str->len);",
          "3955:     STR_RELEASE(str);",
          "3957:    if ((tmp = zend_hash_str_find(prop, \"faultstring\", sizeof(\"faultstring\")-1)) != NULL) {",
          "3958:     xmlNodePtr node = master_to_xml(get_conversion(IS_STRING), tmp, SOAP_LITERAL, param TSRMLS_CC);",
          "3961:    if ((tmp = zend_hash_str_find(prop, \"faultactor\", sizeof(\"faultactor\")-1)) != NULL) {",
          "3962:     xmlNodePtr node = master_to_xml(get_conversion(IS_STRING), tmp, SOAP_LITERAL, param TSRMLS_CC);",
          "3967:   if ((tmp = zend_hash_str_find(prop, \"faultcode\", sizeof(\"faultcode\")-1)) != NULL) {",
          "3969:     zend_string *str = php_escape_html_entities((unsigned char*)Z_STRVAL_P(tmp), Z_STRLEN_P(tmp), 0, 0, NULL TSRMLS_CC);",
          "3973:      xmlChar *code = xmlBuildQName(BAD_CAST(str->val), nsptr->prefix, NULL, 0);",
          "3977:      xmlNodeSetContentLen(node, BAD_CAST(str->val), (int)str->len);",
          "3979:     STR_RELEASE(str);",
          "3981:    if ((tmp = zend_hash_str_find(prop, \"faultstring\", sizeof(\"faultstring\")-1)) != NULL) {",
          "3983:     node = master_to_xml(get_conversion(IS_STRING), tmp, SOAP_LITERAL, node TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "4021:    sdlParamPtr sparam;",
          "4022:    xmlNodePtr x;",
          "4027:    }",
          "4028:    node = xmlNewNode(NULL, BAD_CAST(detail_name));",
          "4029:    xmlAddChild(param, node);",
          "4031:    zend_hash_internal_pointer_reset(fault->details);",
          "4035:    if (detail &&",
          "4036:        Z_TYPE_P(detail) == IS_OBJECT &&",
          "4037:        sparam->element &&",
          "4038:        zend_hash_num_elements(Z_OBJPROP_P(detail)) == 1 &&",
          "4041:    }",
          "4043:    x = serialize_parameter(sparam, detail, 1, NULL, use, node TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "4024:    if (zend_hash_find(prop, \"detail\", sizeof(\"detail\"), (void**)&tmp) == SUCCESS &&",
          "4025:        Z_TYPE_PP(tmp) != IS_NULL) {",
          "4026:     detail = *tmp;",
          "4032:    zend_hash_get_current_data(fault->details, (void**)&sparam);",
          "4033:    sparam = *(sdlParamPtr*)sparam;",
          "4039:        zend_hash_find(Z_OBJPROP_P(detail), sparam->element->name, strlen(sparam->element->name)+1, (void**)&tmp) == SUCCESS) {",
          "4040:     detail = *tmp;",
          "",
          "[Added Lines]",
          "3995:    if ((tmp = zend_hash_str_find(prop, \"detail\", sizeof(\"detail\")-1)) != NULL &&",
          "3996:        Z_TYPE_P(tmp) != IS_NULL) {",
          "3997:     detail = tmp;",
          "4003:    sparam = zend_hash_get_current_data_ptr(fault->details);",
          "4009:        (tmp = zend_hash_str_find(Z_OBJPROP_P(detail), sparam->element->name, strlen(sparam->element->name))) != NULL) {",
          "4010:     detail = tmp;",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "4066:    if (use == SOAP_ENCODED && version == SOAP_1_2) {",
          "4067:     xmlSetNsProp(x, envelope->ns, BAD_CAST(\"encodingStyle\"), BAD_CAST(SOAP_1_2_ENC_NAMESPACE));",
          "4068:    }",
          "4072:   }",
          "4073:  } else {",
          "",
          "[Removed Lines]",
          "4069:   } else if (zend_hash_find(prop, \"detail\", sizeof(\"detail\"), (void**)&tmp) == SUCCESS &&",
          "4070:       Z_TYPE_PP(tmp) != IS_NULL) {",
          "4071:    serialize_zval(*tmp, NULL, detail_name, use, param TSRMLS_CC);",
          "",
          "[Added Lines]",
          "4039:   } else if ((tmp = zend_hash_str_find(prop, \"detail\", sizeof(\"detail\")-1)) != NULL &&",
          "4040:       Z_TYPE_P(tmp) != IS_NULL) {",
          "4041:    serialize_zval(tmp, NULL, detail_name, use, param TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "4089:      if (Z_TYPE(h->retval) == IS_OBJECT &&",
          "4090:          instanceof_function(Z_OBJCE(h->retval), soap_header_class_entry TSRMLS_CC)) {",
          "4093:       smart_str key = {0};",
          "4095:       ht = Z_OBJPROP(h->retval);",
          "4099:        smart_str_appendc(&key, ':');",
          "4101:       }",
          "4106:       }",
          "4107:       smart_str_0(&key);",
          "4108:       if (function && function->binding && function->binding->bindingType == BINDING_SOAP) {",
          "4109:        sdlSoapBindingFunctionPtr fnb = (sdlSoapBindingFunctionPtr)function->bindingAttributes;",
          "4111:        if (fnb->output.headers &&",
          "4115:        }",
          "4116:       }",
          "4117:       smart_str_free(&key);",
          "4120:       } else {",
          "4121:        hdr_ret = NULL;",
          "4122:       }",
          "",
          "[Removed Lines]",
          "4091:       zval **tmp;",
          "4092:       sdlSoapBindingFunctionHeaderPtr *hdr;",
          "4096:       if (zend_hash_find(ht, \"namespace\", sizeof(\"namespace\"), (void**)&tmp) == SUCCESS &&",
          "4097:            Z_TYPE_PP(tmp) == IS_STRING) {",
          "4098:        smart_str_appendl(&key, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "4100:        hdr_ns = Z_STRVAL_PP(tmp);",
          "4102:       if (zend_hash_find(ht, \"name\", sizeof(\"name\"), (void**)&tmp) == SUCCESS &&",
          "4103:           Z_TYPE_PP(tmp) == IS_STRING) {",
          "4104:        smart_str_appendl(&key, Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp));",
          "4105:        hdr_name = Z_STRVAL_PP(tmp);",
          "4112:            zend_hash_find(fnb->output.headers, key.c, key.len+1, (void**)&hdr) == SUCCESS) {",
          "4113:         hdr_enc = (*hdr)->encode;",
          "4114:         hdr_use = (*hdr)->use;",
          "4118:       if (zend_hash_find(ht, \"data\", sizeof(\"data\"), (void**)&tmp) == SUCCESS) {",
          "4119:        hdr_ret = *tmp;",
          "",
          "[Added Lines]",
          "4061:       zval *tmp;",
          "4062:       sdlSoapBindingFunctionHeaderPtr hdr;",
          "4066:       if ((tmp = zend_hash_str_find(ht, \"namespace\", sizeof(\"namespace\")-1)) != NULL &&",
          "4067:            Z_TYPE_P(tmp) == IS_STRING) {",
          "4068:        smart_str_appendl(&key, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "4070:        hdr_ns = Z_STRVAL_P(tmp);",
          "4072:       if ((tmp = zend_hash_str_find(ht, \"name\", sizeof(\"name\")-1)) != NULL &&",
          "4073:           Z_TYPE_P(tmp) == IS_STRING) {",
          "4074:        smart_str_appendl(&key, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));",
          "4075:        hdr_name = Z_STRVAL_P(tmp);",
          "4082:            (hdr = zend_hash_find_ptr(fnb->output.headers, key.s)) != NULL) {",
          "4083:         hdr_enc = hdr->encode;",
          "4084:         hdr_use = hdr->use;",
          "4088:       if ((tmp = zend_hash_str_find(ht, \"data\", sizeof(\"data\")-1)) != NULL) {",
          "4089:        hdr_ret = tmp;",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "4182:  return doc;",
          "4183: }",
          "4186: {",
          "4187:  xmlDoc *doc;",
          "4188:  xmlNodePtr envelope = NULL, body, method = NULL, head = NULL;",
          "4189:  xmlNsPtr ns = NULL;",
          "4191:  int i, style, use;",
          "4192:  HashTable *hdrs = NULL;",
          "",
          "[Removed Lines]",
          "4185: static xmlDocPtr serialize_function_call(zval *this_ptr, sdlFunctionPtr function, char *function_name, char *uri, zval **arguments, int arg_count, int version, HashTable *soap_headers TSRMLS_DC)",
          "4190:  zval **zstyle, **zuse;",
          "",
          "[Added Lines]",
          "4155: static xmlDocPtr serialize_function_call(zval *this_ptr, sdlFunctionPtr function, char *function_name, char *uri, zval *arguments, int arg_count, int version, HashTable *soap_headers TSRMLS_DC)",
          "4160:  zval *zstyle, *zuse;",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "4232:    }",
          "4233:   }",
          "4234:  } else {",
          "4237:   } else {",
          "4238:    style = SOAP_RPC;",
          "4239:   }",
          "",
          "[Removed Lines]",
          "4235:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"style\", sizeof(\"style\"), (void **)&zstyle) == SUCCESS) {",
          "4236:    style = Z_LVAL_PP(zstyle);",
          "",
          "[Added Lines]",
          "4205:   if ((zstyle = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"style\", sizeof(\"style\")-1)) != NULL) {",
          "4206:    style = Z_LVAL_P(zstyle);",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "4254:    method = body;",
          "4255:   }",
          "4259:    use = SOAP_LITERAL;",
          "4260:   } else {",
          "4261:    use = SOAP_ENCODED;",
          "",
          "[Removed Lines]",
          "4257:   if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"use\", sizeof(\"use\"), (void **)&zuse) == SUCCESS &&",
          "4258:      Z_LVAL_PP(zuse) == SOAP_LITERAL) {",
          "",
          "[Added Lines]",
          "4227:   if ((zuse = zend_hash_str_find(Z_OBJPROP_P(this_ptr), \"use\", sizeof(\"use\")-1)) != NULL &&",
          "4228:      Z_LVAL_P(zuse) == SOAP_LITERAL) {",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "4267:   sdlParamPtr parameter = get_param(function, NULL, i, FALSE);",
          "4269:   if (style == SOAP_RPC) {",
          "4271:   } else if (style == SOAP_DOCUMENT) {",
          "4273:    if (function && function->binding->bindingType == BINDING_SOAP) {",
          "4274:     if (parameter && parameter->element) {",
          "4275:      ns = encode_add_ns(param, parameter->element->namens);",
          "",
          "[Removed Lines]",
          "4270:    param = serialize_parameter(parameter, arguments[i], i, NULL, use, method TSRMLS_CC);",
          "4272:    param = serialize_parameter(parameter, arguments[i], i, NULL, use, body TSRMLS_CC);",
          "",
          "[Added Lines]",
          "4240:    param = serialize_parameter(parameter, &arguments[i], i, NULL, use, method TSRMLS_CC);",
          "4242:    param = serialize_parameter(parameter, &arguments[i], i, NULL, use, body TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "4305:  }",
          "4307:  if (head) {",
          "4319:     xmlNodePtr h;",
          "4320:     xmlNsPtr nsptr;",
          "4321:     int hdr_use = SOAP_LITERAL;",
          "",
          "[Removed Lines]",
          "4308:   zval** header;",
          "4310:   zend_hash_internal_pointer_reset(soap_headers);",
          "4311:   while (zend_hash_get_current_data(soap_headers,(void**)&header) == SUCCESS) {",
          "4312:    HashTable *ht = Z_OBJPROP_PP(header);",
          "4313:    zval **name, **ns, **tmp;",
          "4315:    if (zend_hash_find(ht, \"name\", sizeof(\"name\"), (void**)&name) == SUCCESS &&",
          "4316:        Z_TYPE_PP(name) == IS_STRING &&",
          "4317:        zend_hash_find(ht, \"namespace\", sizeof(\"namespace\"), (void**)&ns) == SUCCESS &&",
          "4318:        Z_TYPE_PP(ns) == IS_STRING) {",
          "",
          "[Added Lines]",
          "4278:   zval* header;",
          "4280:   ZEND_HASH_FOREACH_VAL(soap_headers, header) {",
          "4281:    HashTable *ht = Z_OBJPROP_P(header);",
          "4282:    zval *name, *ns, *tmp;",
          "4284:    if ((name = zend_hash_str_find(ht, \"name\", sizeof(\"name\")-1)) != NULL &&",
          "4285:        Z_TYPE_P(name) == IS_STRING &&",
          "4286:        (ns = zend_hash_str_find(ht, \"namespace\", sizeof(\"namespace\")-1)) != NULL &&",
          "4287:        Z_TYPE_P(ns) == IS_STRING) {",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "4324:     if (hdrs) {",
          "4325:      smart_str key = {0};",
          "4329:      smart_str_appendc(&key, ':');",
          "4331:      smart_str_0(&key);",
          "4335:       if (hdr_use == SOAP_ENCODED) {",
          "4336:        use = SOAP_ENCODED;",
          "4337:       }",
          "",
          "[Removed Lines]",
          "4326:      sdlSoapBindingFunctionHeaderPtr *hdr;",
          "4328:      smart_str_appendl(&key, Z_STRVAL_PP(ns), Z_STRLEN_PP(ns));",
          "4330:      smart_str_appendl(&key, Z_STRVAL_PP(name), Z_STRLEN_PP(name));",
          "4332:      if (zend_hash_find(hdrs, key.c, key.len+1,(void**)&hdr) == SUCCESS) {",
          "4333:       hdr_use = (*hdr)->use;",
          "4334:       enc = (*hdr)->encode;",
          "",
          "[Added Lines]",
          "4295:      sdlSoapBindingFunctionHeaderPtr hdr;",
          "4297:      smart_str_appendl(&key, Z_STRVAL_P(ns), Z_STRLEN_P(ns));",
          "4299:      smart_str_appendl(&key, Z_STRVAL_P(name), Z_STRLEN_P(name));",
          "4301:      if ((hdr = zend_hash_find_ptr(hdrs, key.s)) != NULL) {",
          "4302:       hdr_use = hdr->use;",
          "4303:       enc = hdr->encode;",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "4339:      smart_str_free(&key);",
          "4340:     }",
          "4345:     } else {",
          "4347:      xmlAddChild(head, h);",
          "4348:     }",
          "4350:     xmlSetNs(h, nsptr);",
          "4351:     set_soap_header_attributes(h, ht, version);",
          "4352:    }",
          "4355:  }",
          "4357:  if (use == SOAP_ENCODED) {",
          "",
          "[Removed Lines]",
          "4342:     if (zend_hash_find(ht, \"data\", sizeof(\"data\"), (void**)&tmp) == SUCCESS) {",
          "4343:      h = master_to_xml(enc, *tmp, hdr_use, head TSRMLS_CC);",
          "4344:      xmlNodeSetName(h, BAD_CAST(Z_STRVAL_PP(name)));",
          "4346:      h = xmlNewNode(NULL, BAD_CAST(Z_STRVAL_PP(name)));",
          "4349:     nsptr = encode_add_ns(h, Z_STRVAL_PP(ns));",
          "4353:    zend_hash_move_forward(soap_headers);",
          "4354:   }",
          "",
          "[Added Lines]",
          "4311:     if ((tmp = zend_hash_str_find(ht, \"data\", sizeof(\"data\")-1)) != NULL) {",
          "4312:      h = master_to_xml(enc, tmp, hdr_use, head TSRMLS_CC);",
          "4313:      xmlNodeSetName(h, BAD_CAST(Z_STRVAL_P(name)));",
          "4315:      h = xmlNewNode(NULL, BAD_CAST(Z_STRVAL_P(name)));",
          "4318:     nsptr = encode_add_ns(h, Z_STRVAL_P(ns));",
          "4322:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "4381:  if (param_val &&",
          "4382:      Z_TYPE_P(param_val) == IS_OBJECT &&",
          "4383:      Z_OBJCE_P(param_val) == soap_param_class_entry) {",
          "4391:   }",
          "4392:  }",
          "",
          "[Removed Lines]",
          "4384:   zval **param_name;",
          "4385:   zval **param_data;",
          "4387:   if (zend_hash_find(Z_OBJPROP_P(param_val), \"param_name\", sizeof(\"param_name\"), (void **)&param_name) == SUCCESS &&",
          "4388:       zend_hash_find(Z_OBJPROP_P(param_val), \"param_data\", sizeof(\"param_data\"), (void **)&param_data) == SUCCESS) {",
          "4389:    param_val = *param_data;",
          "4390:    name = Z_STRVAL_PP(param_name);",
          "",
          "[Added Lines]",
          "4352:   zval *param_name;",
          "4353:   zval *param_data;",
          "4355:   if ((param_name = zend_hash_str_find(Z_OBJPROP_P(param_val), \"param_name\", sizeof(\"param_name\")-1)) != NULL &&",
          "4356:       (param_data = zend_hash_str_find(Z_OBJPROP_P(param_val), \"param_data\", sizeof(\"param_data\")-1)) != NULL) {",
          "4357:    param_val = param_data;",
          "4358:    name = Z_STRVAL_P(param_name);",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "4418:   if (val == NULL) {",
          "4419:    if (param->element) {",
          "4420:     if (param->element->fixed) {",
          "4422:      val = &defval;",
          "4423:     } else if (param->element->def && !param->element->nillable) {",
          "4425:      val = &defval;",
          "4426:     }",
          "4427:    }",
          "",
          "[Removed Lines]",
          "4421:      ZVAL_STRING(&defval, param->element->fixed, 0);",
          "4424:      ZVAL_STRING(&defval, param->element->def, 0);",
          "",
          "[Added Lines]",
          "4390:      ZVAL_STRING(&defval, param->element->fixed);",
          "4394:      ZVAL_STRING(&defval, param->element->def);",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "4439: static sdlParamPtr get_param(sdlFunctionPtr function, char *param_name, int index, int response)",
          "4440: {",
          "4442:  HashTable   *ht;",
          "4444:  if (function == NULL) {",
          "",
          "[Removed Lines]",
          "4441:  sdlParamPtr *tmp;",
          "",
          "[Added Lines]",
          "4411:  sdlParamPtr tmp;",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "4456:  }",
          "4458:  if (param_name != NULL) {",
          "4461:   } else {",
          "4468:     }",
          "4471:   }",
          "4472:  } else {",
          "4475:   }",
          "4476:  }",
          "4477:  return NULL;",
          "",
          "[Removed Lines]",
          "4459:   if (zend_hash_find(ht, param_name, strlen(param_name), (void **)&tmp) != FAILURE) {",
          "4460:    return *tmp;",
          "4462:    HashPosition pos;",
          "4464:    zend_hash_internal_pointer_reset_ex(ht, &pos);",
          "4465:    while (zend_hash_get_current_data_ex(ht, (void **)&tmp, &pos) != FAILURE) {",
          "4466:     if ((*tmp)->paramName && strcmp(param_name, (*tmp)->paramName) == 0) {",
          "4467:      return *tmp;",
          "4469:     zend_hash_move_forward_ex(ht, &pos);",
          "4470:    }",
          "4473:   if (zend_hash_index_find(ht, index, (void **)&tmp) != FAILURE) {",
          "4474:    return (*tmp);",
          "",
          "[Added Lines]",
          "4429:   if ((tmp = zend_hash_str_find_ptr(ht, param_name, strlen(param_name))) != NULL) {",
          "4430:    return tmp;",
          "4432:    ZEND_HASH_FOREACH_PTR(ht, tmp) {",
          "4433:     if (tmp->paramName && strcmp(param_name, tmp->paramName) == 0) {",
          "4434:      return tmp;",
          "4436:    } ZEND_HASH_FOREACH_END();",
          "4439:   if ((tmp = zend_hash_index_find_ptr(ht, index)) != NULL) {",
          "4440:    return tmp;",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "4480: static sdlFunctionPtr get_function(sdlPtr sdl, const char *function_name)",
          "4481: {",
          "4484:  int len = strlen(function_name);",
          "4485:  char *str = estrndup(function_name,len);",
          "4486:  php_strtolower(str,len);",
          "4487:  if (sdl != NULL) {",
          "4489:    efree(str);",
          "4492:    efree(str);",
          "4494:   }",
          "4495:  }",
          "4496:  efree(str);",
          "",
          "[Removed Lines]",
          "4482:  sdlFunctionPtr *tmp;",
          "4488:   if (zend_hash_find(&sdl->functions, str, len+1, (void **)&tmp) != FAILURE) {",
          "4490:    return (*tmp);",
          "4491:   } else if (sdl->requests != NULL && zend_hash_find(sdl->requests, str, len+1, (void **)&tmp) != FAILURE) {",
          "4493:    return (*tmp);",
          "",
          "[Added Lines]",
          "4448:  sdlFunctionPtr tmp;",
          "4454:   if ((tmp = zend_hash_str_find_ptr(&sdl->functions, str, len)) != NULL) {",
          "4456:    return tmp;",
          "4457:   } else if (sdl->requests != NULL && (tmp = zend_hash_str_find_ptr(sdl->requests, str, len)) != NULL) {",
          "4459:    return tmp;",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "4500: static sdlFunctionPtr get_doc_function(sdlPtr sdl, xmlNodePtr params)",
          "4501: {",
          "4502:  if (sdl) {",
          "4510:     if (fnb->style == SOAP_DOCUMENT) {",
          "4511:      if (params == NULL) {",
          "4515:       }",
          "4518:       int ok = 1;",
          "4519:       xmlNodePtr node = params;",
          "4525:          ok = 0;",
          "4526:          break;",
          "4527:         }",
          "4530:           ok = 0;",
          "4531:           break;",
          "4532:          }",
          "4534:          ok = 0;",
          "4535:          break;",
          "4536:         }",
          "4538:         ok = 0;",
          "4539:         break;",
          "4540:        }",
          "4542:        node = node->next;",
          "4544:       if (ok /*&& node == NULL*/) {",
          "4546:       }",
          "4547:      }",
          "4548:     }",
          "4549:    }",
          "4552:  }",
          "4553:  return NULL;",
          "4554: }",
          "",
          "[Removed Lines]",
          "4503:   sdlFunctionPtr *tmp;",
          "4504:   sdlParamPtr    *param;",
          "4506:   zend_hash_internal_pointer_reset(&sdl->functions);",
          "4507:   while (zend_hash_get_current_data(&sdl->functions, (void**)&tmp) == SUCCESS) {",
          "4508:    if ((*tmp)->binding && (*tmp)->binding->bindingType == BINDING_SOAP) {",
          "4509:     sdlSoapBindingFunctionPtr fnb = (sdlSoapBindingFunctionPtr)(*tmp)->bindingAttributes;",
          "4512:       if ((*tmp)->requestParameters == NULL ||",
          "4513:           zend_hash_num_elements((*tmp)->requestParameters) == 0) {",
          "4514:         return *tmp;",
          "4516:      } else if ((*tmp)->requestParameters != NULL &&",
          "4517:                 zend_hash_num_elements((*tmp)->requestParameters) > 0) {",
          "4521:       zend_hash_internal_pointer_reset((*tmp)->requestParameters);",
          "4522:       while (zend_hash_get_current_data((*tmp)->requestParameters, (void**)&param) == SUCCESS) {",
          "4523:        if ((*param)->element) {",
          "4524:         if (strcmp((*param)->element->name, (char*)node->name) != 0) {",
          "4528:         if ((*param)->element->namens != NULL && node->ns != NULL) {",
          "4529:          if (strcmp((*param)->element->namens, (char*)node->ns->href) != 0) {",
          "4533:         } else if ((void*)(*param)->element->namens != (void*)node->ns) {",
          "4537:        } else if (strcmp((*param)->paramName, (char*)node->name) != 0) {",
          "4541:        zend_hash_move_forward((*tmp)->requestParameters);",
          "4543:       }",
          "4545:        return (*tmp);",
          "4550:    zend_hash_move_forward(&sdl->functions);",
          "4551:   }",
          "",
          "[Added Lines]",
          "4469:   sdlFunctionPtr tmp;",
          "4470:   sdlParamPtr    param;",
          "4472:   ZEND_HASH_FOREACH_PTR(&sdl->functions, tmp) {",
          "4473:    if (tmp->binding && tmp->binding->bindingType == BINDING_SOAP) {",
          "4474:     sdlSoapBindingFunctionPtr fnb = (sdlSoapBindingFunctionPtr)tmp->bindingAttributes;",
          "4477:       if (tmp->requestParameters == NULL ||",
          "4478:           zend_hash_num_elements(tmp->requestParameters) == 0) {",
          "4479:         return tmp;",
          "4481:      } else if (tmp->requestParameters != NULL &&",
          "4482:                 zend_hash_num_elements(tmp->requestParameters) > 0) {",
          "4486:       ZEND_HASH_FOREACH_PTR(tmp->requestParameters, param) {",
          "4487:        if (param->element) {",
          "4488:         if (strcmp(param->element->name, (char*)node->name) != 0) {",
          "4492:         if (param->element->namens != NULL && node->ns != NULL) {",
          "4493:          if (strcmp(param->element->namens, (char*)node->ns->href) != 0) {",
          "4497:         } else if ((void*)param->element->namens != (void*)node->ns) {",
          "4501:        } else if (strcmp(param->paramName, (char*)node->name) != 0) {",
          "4506:       } ZEND_HASH_FOREACH_END();",
          "4508:        return tmp;",
          "4513:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "4556: static void function_to_string(sdlFunctionPtr function, smart_str *buf)",
          "4557: {",
          "4558:  int i = 0;",
          "4562:  if (function->responseParameters &&",
          "4563:      zend_hash_num_elements(function->responseParameters) > 0) {",
          "4564:   if (zend_hash_num_elements(function->responseParameters) == 1) {",
          "4565:    zend_hash_internal_pointer_reset(function->responseParameters);",
          "4569:     smart_str_appendc(buf, ' ');",
          "4570:    } else {",
          "4571:     smart_str_appendl(buf, \"UNKNOWN \", 8);",
          "",
          "[Removed Lines]",
          "4559:  HashPosition pos;",
          "4560:  sdlParamPtr *param;",
          "4566:    zend_hash_get_current_data(function->responseParameters, (void**)&param);",
          "4567:    if ((*param)->encode && (*param)->encode->details.type_str) {",
          "4568:     smart_str_appendl(buf, (*param)->encode->details.type_str, strlen((*param)->encode->details.type_str));",
          "",
          "[Added Lines]",
          "4521:  sdlParamPtr param;",
          "4527:    param = zend_hash_get_current_data_ptr(function->responseParameters);",
          "4528:    if (param->encode && param->encode->details.type_str) {",
          "4529:     smart_str_appendl(buf, param->encode->details.type_str, strlen(param->encode->details.type_str));",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "4573:   } else {",
          "4574:    i = 0;",
          "4575:    smart_str_appendl(buf, \"list(\", 5);",
          "4578:     if (i > 0) {",
          "4579:      smart_str_appendl(buf, \", \", 2);",
          "4580:     }",
          "4583:     } else {",
          "4584:      smart_str_appendl(buf, \"UNKNOWN\", 7);",
          "4585:     }",
          "4586:     smart_str_appendl(buf, \" $\", 2);",
          "4589:     i++;",
          "4591:    smart_str_appendl(buf, \") \", 2);",
          "4592:   }",
          "4593:  } else {",
          "",
          "[Removed Lines]",
          "4576:    zend_hash_internal_pointer_reset_ex(function->responseParameters, &pos);",
          "4577:    while (zend_hash_get_current_data_ex(function->responseParameters, (void **)&param, &pos) != FAILURE) {",
          "4581:     if ((*param)->encode && (*param)->encode->details.type_str) {",
          "4582:      smart_str_appendl(buf, (*param)->encode->details.type_str, strlen((*param)->encode->details.type_str));",
          "4587:     smart_str_appendl(buf, (*param)->paramName, strlen((*param)->paramName));",
          "4588:     zend_hash_move_forward_ex(function->responseParameters, &pos);",
          "4590:    }",
          "",
          "[Added Lines]",
          "4537:    ZEND_HASH_FOREACH_PTR(function->responseParameters, param) {",
          "4541:     if (param->encode && param->encode->details.type_str) {",
          "4542:      smart_str_appendl(buf, param->encode->details.type_str, strlen(param->encode->details.type_str));",
          "4547:     smart_str_appendl(buf, param->paramName, strlen(param->paramName));",
          "4549:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "4599:  smart_str_appendc(buf, '(');",
          "4600:  if (function->requestParameters) {",
          "4601:   i = 0;",
          "4604:    if (i > 0) {",
          "4605:     smart_str_appendl(buf, \", \", 2);",
          "4606:    }",
          "4609:    } else {",
          "4610:     smart_str_appendl(buf, \"UNKNOWN\", 7);",
          "4611:    }",
          "4612:    smart_str_appendl(buf, \" $\", 2);",
          "4615:    i++;",
          "4617:  }",
          "4618:  smart_str_appendc(buf, ')');",
          "4619:  smart_str_0(buf);",
          "",
          "[Removed Lines]",
          "4602:   zend_hash_internal_pointer_reset_ex(function->requestParameters, &pos);",
          "4603:   while (zend_hash_get_current_data_ex(function->requestParameters, (void **)&param, &pos) != FAILURE) {",
          "4607:    if ((*param)->encode && (*param)->encode->details.type_str) {",
          "4608:     smart_str_appendl(buf, (*param)->encode->details.type_str, strlen((*param)->encode->details.type_str));",
          "4613:    smart_str_appendl(buf, (*param)->paramName, strlen((*param)->paramName));",
          "4614:    zend_hash_move_forward_ex(function->requestParameters, &pos);",
          "4616:   }",
          "",
          "[Added Lines]",
          "4561:   ZEND_HASH_FOREACH_PTR(function->requestParameters, param) {",
          "4565:    if (param->encode && param->encode->details.type_str) {",
          "4566:     smart_str_appendl(buf, param->encode->details.type_str, strlen(param->encode->details.type_str));",
          "4571:    smart_str_appendl(buf, param->paramName, strlen(param->paramName));",
          "4573:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "4637:   case XSD_CONTENT_SEQUENCE:",
          "4638:   case XSD_CONTENT_ALL:",
          "4639:   case XSD_CONTENT_CHOICE: {",
          "4647:    break;",
          "4648:   }",
          "4649:   case XSD_CONTENT_GROUP:",
          "",
          "[Removed Lines]",
          "4640:    sdlContentModelPtr *tmp;",
          "4642:    zend_hash_internal_pointer_reset(model->u.content);",
          "4643:    while (zend_hash_get_current_data(model->u.content, (void**)&tmp) == SUCCESS) {",
          "4644:     model_to_string(*tmp, buf, level);",
          "4645:     zend_hash_move_forward(model->u.content);",
          "4646:    }",
          "",
          "[Added Lines]",
          "4597:    sdlContentModelPtr tmp;",
          "4599:    ZEND_HASH_FOREACH_PTR(model->u.content, tmp) {",
          "4600:     model_to_string(tmp, buf, level);",
          "4601:    } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "4657: {",
          "4658:  int i;",
          "4659:  smart_str spaces = {0};",
          "4662:  for (i = 0;i < level;i++) {",
          "4663:   smart_str_appendc(&spaces, ' ');",
          "4664:  }",
          "4667:  switch (type->kind) {",
          "4668:   case XSD_TYPEKIND_SIMPLE:",
          "",
          "[Removed Lines]",
          "4660:  HashPosition pos;",
          "4665:  smart_str_appendl(buf, spaces.c, spaces.len);",
          "",
          "[Added Lines]",
          "4619:  smart_str_appendl(buf, spaces.s->val, spaces.s->len);",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "4678:    smart_str_appendl(buf, \"list \", 5);",
          "4679:    smart_str_appendl(buf, type->name, strlen(type->name));",
          "4680:    if (type->elements) {",
          "4683:     smart_str_appendl(buf, \" {\", 2);",
          "4688:     smart_str_appendc(buf, '}');",
          "4689:    }",
          "4690:    break;",
          "",
          "[Removed Lines]",
          "4681:     sdlTypePtr *item_type;",
          "4684:     zend_hash_internal_pointer_reset_ex(type->elements, &pos);",
          "4685:     if (zend_hash_get_current_data_ex(type->elements, (void **)&item_type, &pos) != FAILURE) {",
          "4686:      smart_str_appendl(buf, (*item_type)->name, strlen((*item_type)->name));",
          "4687:     }",
          "",
          "[Added Lines]",
          "4635:     sdlTypePtr item_type;",
          "4638:     ZEND_HASH_FOREACH_PTR(type->elements, item_type) {",
          "4639:      smart_str_appendl(buf, item_type->name, strlen(item_type->name));",
          "4640:     } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "4692:    smart_str_appendl(buf, \"union \", 6);",
          "4693:    smart_str_appendl(buf, type->name, strlen(type->name));",
          "4694:    if (type->elements) {",
          "4696:     int first = 0;",
          "4698:     smart_str_appendl(buf, \" {\", 2);",
          "4701:      if (!first) {",
          "4702:       smart_str_appendc(buf, ',');",
          "4703:       first = 0;",
          "4704:      }",
          "4708:     smart_str_appendc(buf, '}');",
          "4709:    }",
          "4710:    break;",
          "",
          "[Removed Lines]",
          "4695:     sdlTypePtr *item_type;",
          "4699:     zend_hash_internal_pointer_reset_ex(type->elements, &pos);",
          "4700:     while (zend_hash_get_current_data_ex(type->elements, (void **)&item_type, &pos) != FAILURE) {",
          "4705:      smart_str_appendl(buf, (*item_type)->name, strlen((*item_type)->name));",
          "4706:      zend_hash_move_forward_ex(type->elements, &pos);",
          "4707:     }",
          "",
          "[Added Lines]",
          "4648:     sdlTypePtr item_type;",
          "4652:     ZEND_HASH_FOREACH_PTR(type->elements, item_type) {",
          "4657:      smart_str_appendl(buf, item_type->name, strlen(item_type->name));",
          "4658:     } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "4714:    if (type->encode &&",
          "4715:        (type->encode->details.type == IS_ARRAY ||",
          "4716:         type->encode->details.type == SOAP_ENC_ARRAY)) {",
          "4720:     if (type->attributes &&",
          "4726:      int len;",
          "4727:      if (end == NULL) {",
          "4729:      } else {",
          "4731:      }",
          "4732:      if (len == 0) {",
          "4733:       smart_str_appendl(buf, \"anyType\", sizeof(\"anyType\")-1);",
          "4734:      } else {",
          "4736:      }",
          "4737:      smart_str_appendc(buf, ' ');",
          "4738:      smart_str_appendl(buf, type->name, strlen(type->name));",
          "",
          "[Removed Lines]",
          "4717:      sdlAttributePtr *attr;",
          "4718:      sdlExtraAttributePtr *ext;",
          "4721:         zend_hash_find(type->attributes, SOAP_1_1_ENC_NAMESPACE\":arrayType\",",
          "4722:           sizeof(SOAP_1_1_ENC_NAMESPACE\":arrayType\"),",
          "4723:           (void **)&attr) == SUCCESS &&",
          "4724:           zend_hash_find((*attr)->extraAttributes, WSDL_NAMESPACE\":arrayType\", sizeof(WSDL_NAMESPACE\":arrayType\"), (void **)&ext) == SUCCESS) {",
          "4725:      char *end = strchr((*ext)->val, '[');",
          "4728:       len = strlen((*ext)->val);",
          "4730:       len = end-(*ext)->val;",
          "4735:       smart_str_appendl(buf, (*ext)->val, len);",
          "",
          "[Added Lines]",
          "4668:      sdlAttributePtr attr;",
          "4669:      sdlExtraAttributePtr ext;",
          "4672:         (attr = zend_hash_str_find_ptr(type->attributes, SOAP_1_1_ENC_NAMESPACE\":arrayType\",",
          "4673:           sizeof(SOAP_1_1_ENC_NAMESPACE\":arrayType\")-1)) != NULL &&",
          "4674:         (ext = zend_hash_str_find_ptr(attr->extraAttributes, WSDL_NAMESPACE\":arrayType\", sizeof(WSDL_NAMESPACE\":arrayType\")-1)) != NULL) {",
          "4675:      char *end = strchr(ext->val, '[');",
          "4678:       len = strlen(ext->val);",
          "4680:       len = end-ext->val;",
          "4685:       smart_str_appendl(buf, ext->val, len);",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "4742:     } else {",
          "4743:      sdlTypePtr elementType;",
          "4744:      if (type->attributes &&",
          "4750:       smart_str_appendc(buf, ' ');",
          "4751:      } else if (type->elements &&",
          "4752:                 zend_hash_num_elements(type->elements) == 1 &&",
          "4753:                 (zend_hash_internal_pointer_reset(type->elements),",
          "4756:                 elementType->encode && elementType->encode->details.type_str) {",
          "4757:       smart_str_appends(buf, elementType->encode->details.type_str);",
          "4758:       smart_str_appendc(buf, ' ');",
          "",
          "[Removed Lines]",
          "4745:          zend_hash_find(type->attributes, SOAP_1_2_ENC_NAMESPACE\":itemType\",",
          "4746:            sizeof(SOAP_1_2_ENC_NAMESPACE\":itemType\"),",
          "4747:            (void **)&attr) == SUCCESS &&",
          "4748:            zend_hash_find((*attr)->extraAttributes, WSDL_NAMESPACE\":itemType\", sizeof(WSDL_NAMESPACE\":arrayType\"), (void **)&ext) == SUCCESS) {",
          "4749:       smart_str_appends(buf, (*ext)->val);",
          "4754:                  zend_hash_get_current_data(type->elements, (void**)&elementType) == SUCCESS) &&",
          "4755:                 (elementType = *(sdlTypePtr*)elementType) != NULL &&",
          "",
          "[Added Lines]",
          "4695:          (attr = zend_hash_str_find_ptr(type->attributes, SOAP_1_2_ENC_NAMESPACE\":itemType\",",
          "4696:            sizeof(SOAP_1_2_ENC_NAMESPACE\":itemType\")-1)) != NULL &&",
          "4697:         (ext = zend_hash_str_find_ptr(attr->extraAttributes, WSDL_NAMESPACE\":itemType\", sizeof(WSDL_NAMESPACE\":arrayType\")-1)) != NULL) {",
          "4698:       smart_str_appends(buf, ext->val);",
          "4703:                  (elementType = zend_hash_get_current_data_ptr(type->elements)) != NULL) &&",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "4761:      }",
          "4762:      smart_str_appendl(buf, type->name, strlen(type->name));",
          "4763:      if (type->attributes &&",
          "4768:       smart_str_appendc(buf, '[');",
          "4770:       smart_str_appendc(buf, ']');",
          "4771:      } else {",
          "4772:       smart_str_appendl(buf, \"[]\", 2);",
          "",
          "[Removed Lines]",
          "4764:          zend_hash_find(type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "4765:            sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\"),",
          "4766:            (void **)&attr) == SUCCESS &&",
          "4767:            zend_hash_find((*attr)->extraAttributes, WSDL_NAMESPACE\":itemType\", sizeof(WSDL_NAMESPACE\":arraySize\"), (void **)&ext) == SUCCESS) {",
          "4769:       smart_str_appends(buf, (*ext)->val);",
          "",
          "[Added Lines]",
          "4712:          (attr = zend_hash_str_find_ptr(type->attributes, SOAP_1_2_ENC_NAMESPACE\":arraySize\",",
          "4713:            sizeof(SOAP_1_2_ENC_NAMESPACE\":arraySize\")-1)) != NULL &&",
          "4714:          (ext = zend_hash_str_find_ptr(attr->extraAttributes, WSDL_NAMESPACE\":itemType\", sizeof(WSDL_NAMESPACE\":arraySize\")-1)) != NULL) {",
          "4716:       smart_str_appends(buf, ext->val);",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "4788:       enc = enc->details.sdl_type->encode;",
          "4789:      }",
          "4790:      if (enc) {",
          "4792:       smart_str_appendc(buf, ' ');",
          "4793:       smart_str_appendl(buf, type->encode->details.type_str, strlen(type->encode->details.type_str));",
          "4794:       smart_str_appendl(buf, \" _;\\n\", 4);",
          "",
          "[Removed Lines]",
          "4791:       smart_str_appendl(buf, spaces.c, spaces.len);",
          "",
          "[Added Lines]",
          "4738:       smart_str_appendl(buf, spaces.s->val, spaces.s->len);",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "4798:      model_to_string(type->model, buf, level+1);",
          "4799:     }",
          "4800:     if (type->attributes) {",
          "4806:       smart_str_appendc(buf, ' ');",
          "4809:        smart_str_appendc(buf, ' ');",
          "4810:       } else {",
          "4811:        smart_str_appendl(buf, \"UNKNOWN \", 8);",
          "4812:       }",
          "4814:       smart_str_appendl(buf, \";\\n\", 2);",
          "4817:     }",
          "4819:     smart_str_appendc(buf, '}');",
          "4820:    }",
          "4821:    break;",
          "",
          "[Removed Lines]",
          "4801:      sdlAttributePtr *attr;",
          "4803:      zend_hash_internal_pointer_reset_ex(type->attributes, &pos);",
          "4804:      while (zend_hash_get_current_data_ex(type->attributes, (void **)&attr, &pos) != FAILURE) {",
          "4805:       smart_str_appendl(buf, spaces.c, spaces.len);",
          "4807:       if ((*attr)->encode && (*attr)->encode->details.type_str) {",
          "4808:        smart_str_appends(buf, (*attr)->encode->details.type_str);",
          "4813:       smart_str_appends(buf, (*attr)->name);",
          "4815:       zend_hash_move_forward_ex(type->attributes, &pos);",
          "4816:      }",
          "4818:     smart_str_appendl(buf, spaces.c, spaces.len);",
          "",
          "[Added Lines]",
          "4748:      sdlAttributePtr attr;",
          "4750:      ZEND_HASH_FOREACH_PTR(type->attributes, attr) {",
          "4751:       smart_str_appendl(buf, spaces.s->val, spaces.s->len);",
          "4753:       if (attr->encode && attr->encode->details.type_str) {",
          "4754:        smart_str_appends(buf, attr->encode->details.type_str);",
          "4759:       smart_str_appends(buf, attr->name);",
          "4761:      } ZEND_HASH_FOREACH_END();",
          "4763:     smart_str_appendl(buf, spaces.s->val, spaces.s->len);",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "4869:   zend_hash_destroy(service->class_map);",
          "4870:   FREE_HASHTABLE(service->class_map);",
          "4871:  }",
          "4875:  efree(service);",
          "4876: }",
          "",
          "[Removed Lines]",
          "4872:  if (service->soap_object) {",
          "4873:   zval_ptr_dtor(&service->soap_object);",
          "4874:  }",
          "",
          "[Added Lines]",
          "4817:  zval_ptr_dtor(&service->soap_object);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "997b7e56302710bb3db00b56d0629ac75d73a207",
      "candidate_info": {
        "commit_hash": "997b7e56302710bb3db00b56d0629ac75d73a207",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/997b7e56302710bb3db00b56d0629ac75d73a207",
        "files": [
          "NEWS",
          "ext/soap/soap.c",
          "ext/soap/tests/bugs/bug69085.phpt"
        ],
        "message": "Fixed bug #69085 (SoapClient's __call() type confusion through unserialize()).",
        "before_after_code_files": [
          "ext/soap/soap.c||ext/soap/soap.c",
          "ext/soap/tests/bugs/bug69085.phpt||ext/soap/tests/bugs/bug69085.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/soap/soap.c||ext/soap/soap.c"
          ],
          "candidate": [
            "ext/soap/soap.c||ext/soap/soap.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/soap/soap.c||ext/soap/soap.c": [
          "File: ext/soap/soap.c -> ext/soap/soap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2564:  }",
          "2566:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
          "2568:   add_property_stringl(this_ptr, \"__last_request\", buf, buf_size, 1);",
          "2569:  }",
          "",
          "[Removed Lines]",
          "2567:      Z_LVAL_PP(trace) > 0) {",
          "",
          "[Added Lines]",
          "2567:      Z_TYPE_PP(trace) == IS_LONG && Z_LVAL_PP(trace) > 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2599:   }",
          "2600:   ret = FALSE;",
          "2601:  } else if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"trace\", sizeof(\"trace\"), (void **) &trace) == SUCCESS &&",
          "2603:   add_property_stringl(this_ptr, \"__last_response\", Z_STRVAL_P(response), Z_STRLEN_P(response), 1);",
          "2604:  }",
          "2605:  zval_ptr_dtor(&params[4]);",
          "",
          "[Removed Lines]",
          "2602:      Z_LVAL_PP(trace) > 0) {",
          "",
          "[Added Lines]",
          "2602:      Z_TYPE_PP(trace) == IS_LONG && Z_LVAL_PP(trace) > 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2904:  }",
          "2908:   HashTable *default_headers = Z_ARRVAL_P(*tmp);",
          "2909:   if (soap_headers) {",
          "2910:    if (!free_soap_headers) {",
          "",
          "[Removed Lines]",
          "2907:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\"), (void **) &tmp)==SUCCESS) {",
          "",
          "[Added Lines]",
          "2907:  if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"__default_headers\", sizeof(\"__default_headers\"), (void **) &tmp) == SUCCESS && Z_TYPE_PP(tmp) == IS_ARRAY) {",
          "",
          "---------------"
        ],
        "ext/soap/tests/bugs/bug69085.phpt||ext/soap/tests/bugs/bug69085.phpt": [
          "File: ext/soap/tests/bugs/bug69085.phpt -> ext/soap/tests/bugs/bug69085.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #69085 (SoapClient's __call() type confusion through unserialize())",
          "3: --SKIPIF--",
          "4: <?php require_once('skipif.inc'); ?>",
          "5: --INI--",
          "6: soap.wsdl_cache_enabled=0",
          "7: --FILE--",
          "8: <?php",
          "10: $dummy = unserialize('O:10:\"SoapClient\":5:{s:3:\"uri\";s:1:\"a\";s:8:\"location\";s:22:\"http://localhost/a.xml\";s:17:\"__default_headers\";i:1337;s:15:\"__last_response\";s:1:\"a\";s:5:\"trace\";s:1:\"x\";}');",
          "11: try {",
          "12:  $dummy->whatever();",
          "13: } catch (Exception $e) {",
          "14:  echo \"okey\";",
          "15: }",
          "16: --EXPECT--",
          "17: okey",
          "",
          "---------------"
        ]
      }
    }
  ]
}