{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "60379d424341391776e3270f989f0a489db0539c",
      "candidate_info": {
        "commit_hash": "60379d424341391776e3270f989f0a489db0539c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/60379d424341391776e3270f989f0a489db0539c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the CLI so that the \".open --hexdb\" command works even if it is contained in a subscript that is read using \".read\".\n\nFossilOrigin-Name: 67a87399b8ad8f1ce3052ee3159906f5c6df3d7b5691b3acac856bd2f1c82088",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3bf1d3ea5f748c5142c2403813fdace5aedc1fc68f0dcd5eae40a2fe763fedb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3595: }",
          "",
          "[Removed Lines]",
          "3598: static int process_input(ShellState *p, FILE *in);",
          "",
          "[Added Lines]",
          "3599: static int process_input(ShellState *p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3749:       return 0;",
          "3750:     }",
          "3751:   }else{",
          "3753:   }",
          "3755:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "",
          "[Removed Lines]",
          "3752:     in = stdin;",
          "",
          "[Added Lines]",
          "3753:     in = p->in;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3789:     }",
          "3790:   }",
          "3793:   return a;",
          "3795: readHexDb_error:",
          "3796:   if( in!=stdin ){",
          "3797:     fclose(in);",
          "3798:   }else{",
          "3800:       if(strncmp(zLine, \"| end \", 6)==0 ) break;",
          "3801:     }",
          "3802:   }",
          "",
          "[Removed Lines]",
          "3792:   if( in!=stdin ) fclose(in);",
          "3799:     while( fgets(zLine, sizeof(zLine), in)!=0 ){",
          "",
          "[Added Lines]",
          "3793:   if( in!=p->in ) fclose(in);",
          "3800:     while( fgets(zLine, sizeof(zLine), p->in)!=0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6970:   }else",
          "6972:   if( c=='r' && n>=3 && strncmp(azArg[0], \"read\", n)==0 ){",
          "6974:     if( nArg!=2 ){",
          "6975:       raw_printf(stderr, \"Usage: .read FILE\\n\");",
          "6976:       rc = 1;",
          "6977:       goto meta_command_exit;",
          "6978:     }",
          "6981:       utf8_printf(stderr,\"Error: cannot open \\\"%s\\\"\\n\", azArg[1]);",
          "6982:       rc = 1;",
          "6983:     }else{",
          "6986:     }",
          "6987:   }else",
          "6989:   if( c=='r' && n>=3 && strncmp(azArg[0], \"restore\", n)==0 ){",
          "",
          "[Removed Lines]",
          "6973:     FILE *alt;",
          "6979:     alt = fopen(azArg[1], \"rb\");",
          "6980:     if( alt==0 ){",
          "6984:       rc = process_input(p, alt);",
          "6985:       fclose(alt);",
          "",
          "[Added Lines]",
          "6974:     FILE *inSaved = p->in;",
          "6980:     p->in = fopen(azArg[1], \"rb\");",
          "6981:     if( p->in==0 ){",
          "6985:       rc = process_input(p);",
          "6986:       fclose(p->in);",
          "6988:     p->in = inSaved;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "8327: static int process_input(ShellState *p, FILE *in){",
          "",
          "[Added Lines]",
          "8329: static int process_input(ShellState *p){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8340:     fflush(p->out);",
          "8342:     if( zLine==0 ){",
          "8345:       break;",
          "8346:     }",
          "8347:     if( seenInterrupt ){",
          "8349:       seenInterrupt = 0;",
          "8350:     }",
          "8351:     lineno++;",
          "",
          "[Removed Lines]",
          "8339:   while( errCnt==0 || !bail_on_error || (in==0 && stdin_is_interactive) ){",
          "8341:     zLine = one_input_line(in, zLine, nSql>0);",
          "8344:       if( in==0 && stdin_is_interactive ) printf(\"\\n\");",
          "8348:       if( in!=0 ) break;",
          "",
          "[Added Lines]",
          "8341:   while( errCnt==0 || !bail_on_error || (p->in==0 && stdin_is_interactive) ){",
          "8343:     zLine = one_input_line(p->in, zLine, nSql>0);",
          "8346:       if( p->in==0 && stdin_is_interactive ) printf(\"\\n\");",
          "8350:       if( p->in!=0 ) break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8389:     }",
          "8390:     if( nSql && line_contains_semicolon(&zSql[nSqlPrior], nSql-nSqlPrior)",
          "8391:                 && sqlite3_complete(zSql) ){",
          "8393:       nSql = 0;",
          "8394:       if( p->outCount ){",
          "8395:         output_reset(p);",
          "",
          "[Removed Lines]",
          "8392:       errCnt += runOneSqlLine(p, zSql, in, startline);",
          "",
          "[Added Lines]",
          "8394:       errCnt += runOneSqlLine(p, zSql, p->in, startline);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8403:     }",
          "8404:   }",
          "8405:   if( nSql && !_all_whitespace(zSql) ){",
          "8407:   }",
          "8408:   free(zSql);",
          "8409:   free(zLine);",
          "",
          "[Removed Lines]",
          "8406:     errCnt += runOneSqlLine(p, zSql, in, startline);",
          "",
          "[Added Lines]",
          "8408:     errCnt += runOneSqlLine(p, zSql, p->in, startline);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8492:   char *home_dir = NULL;",
          "8493:   const char *sqliterc = sqliterc_override;",
          "8494:   char *zBuf = 0;",
          "8497:   if (sqliterc == NULL) {",
          "8498:     home_dir = find_home_dir(0);",
          "",
          "[Removed Lines]",
          "8495:   FILE *in = NULL;",
          "",
          "[Added Lines]",
          "8497:   FILE *inSaved = p->in;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8504:     zBuf = sqlite3_mprintf(\"%s/.sqliterc\",home_dir);",
          "8505:     sqliterc = zBuf;",
          "8506:   }",
          "8509:     if( stdin_is_interactive ){",
          "8510:       utf8_printf(stderr,\"-- Loading resources from %s\\n\",sqliterc);",
          "8511:     }",
          "8514:   }",
          "8515:   sqlite3_free(zBuf);",
          "8516: }",
          "",
          "[Removed Lines]",
          "8507:   in = fopen(sqliterc,\"rb\");",
          "8508:   if( in ){",
          "8512:     process_input(p,in);",
          "8513:     fclose(in);",
          "",
          "[Added Lines]",
          "8509:   p->in = fopen(sqliterc,\"rb\");",
          "8510:   if( p->in ){",
          "8514:     process_input(p);",
          "8515:     fclose(p->in);",
          "8517:   p->in = inSaved;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "9123: #elif HAVE_LINENOISE",
          "9124:       linenoiseSetCompletionCallback(linenoise_completion);",
          "9125: #endif",
          "9127:       if( zHistory ){",
          "9128:         shell_stifle_history(2000);",
          "9129:         shell_write_history(zHistory);",
          "9130:         free(zHistory);",
          "9131:       }",
          "9132:     }else{",
          "9134:     }",
          "9135:   }",
          "9136:   set_table_name(&data, 0);",
          "",
          "[Removed Lines]",
          "9126:       rc = process_input(&data, 0);",
          "9133:       rc = process_input(&data, stdin);",
          "",
          "[Added Lines]",
          "9129:       data.in = 0;",
          "9130:       rc = process_input(&data);",
          "9137:       data.in = stdin;",
          "9138:       rc = process_input(&data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42be2ad30bad38f15a4c33956d6fe2b9c4b00989",
      "candidate_info": {
        "commit_hash": "42be2ad30bad38f15a4c33956d6fe2b9c4b00989",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42be2ad30bad38f15a4c33956d6fe2b9c4b00989",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/in.test"
        ],
        "message": "Make sure the affinity of the RHS of an IN operator does not affect the outcome even if the RHS expression contains a COLLATE clause. Ticket [57353f8243c637c0]\n\nFossilOrigin-Name: 0f748fe58bbbb7ce3f30303da25ec811b2bbce249549aa9c7927979ac5b38013",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d4755aca4b435eed62b54af84013f7f176d3fa5b7b1c243555d59de5749fcde5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: char sqlite3ExprAffinity(Expr *pExpr){",
          "46:   int op;",
          "48:   if( pExpr->flags & EP_Generic ) return 0;",
          "49:   op = pExpr->op;",
          "50:   if( op==TK_SELECT ){",
          "51:     assert( pExpr->flags&EP_xIsSelect );",
          "",
          "[Removed Lines]",
          "47:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "48:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "734:   ORDER BY a DESC, b;",
          "735: } {}",
          "739: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737: # 2019-06-11",
          "738: # https://www.sqlite.org/src/info/57353f8243c637c0",
          "739: #",
          "740: do_execsql_test in-17.1 {",
          "741:   SELECT 1 IN ('1');",
          "742: } 0",
          "743: do_execsql_test in-17.2 {",
          "744:   SELECT 1 IN ('1' COLLATE nocase);",
          "745: } 0",
          "746: do_execsql_test in-17.3 {",
          "747:   SELECT 1 IN (CAST('1' AS text));",
          "748: } 0",
          "749: do_execsql_test in-17.4 {",
          "750:   SELECT 1 IN (CAST('1' AS text) COLLATE nocase);",
          "751: } 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a9c6bcc158633596ea7c7d9778c4e7671fd183b",
      "candidate_info": {
        "commit_hash": "5a9c6bcc158633596ea7c7d9778c4e7671fd183b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5a9c6bcc158633596ea7c7d9778c4e7671fd183b",
        "files": [
          "Makefile.in",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "tool/index_usage.c"
        ],
        "message": "Enhancements to the index_usage utility program.\n\nFossilOrigin-Name: 19c739b4a8a43d894e37a99fa34838f3e3fa1fe0d019aefbc33f1d38d76af1a4",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "tool/index_usage.c||tool/index_usage.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1335:  $(LTLINK) -o $@ $(TOP)/tool/showshm.c",
          "1337: index_usage$(TEXE): $(TOP)/tool/index_usage.c sqlite3.lo",
          "1340: changeset$(TEXE): $(TOP)/ext/session/changeset.c sqlite3.lo",
          "1341:  $(LTLINK) -o $@ $(TOP)/ext/session/changeset.c sqlite3.lo $(TLIBS)",
          "",
          "[Removed Lines]",
          "1338:  $(LTLINK) -o $@ $(TOP)/tool/index_usage.c sqlite3.lo $(TLIBS)",
          "",
          "[Added Lines]",
          "1338:  $(LTLINK) $(SHELL_OPT) -o $@ $(TOP)/tool/index_usage.c sqlite3.lo $(TLIBS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "1021:  $(TCC) -o showshm$(EXE) $(TOP)/tool/showshm.c",
          "1023: index_usage$(EXE): $(TOP)/tool/index_usage.c sqlite3.o",
          "1025:   $(TOP)/tool/index_usage.c sqlite3.o $(THREADLIB)",
          "1027: changeset$(EXE): $(TOP)/ext/session/changeset.c sqlite3.o",
          "",
          "[Removed Lines]",
          "1024:  $(TCC) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_DEPRECATED -o index_usage$(EXE) \\",
          "",
          "[Added Lines]",
          "1024:  $(TCC) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_DEPRECATED $(SHELL_OPTS) -o index_usage$(EXE) \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 760d14374d40bcd9ce3a89771c18dc236c9728553c4747c9b7452ee7b24f4140",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/index_usage.c||tool/index_usage.c": [
          "File: tool/index_usage.c -> tool/index_usage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:            argv[2], sqlite3_errmsg(db));",
          "91:     goto errorOut;",
          "92:   }",
          "94:                           -1, &pStmt, 0);",
          "95:   if( rc ){",
          "96:     printf(\"Cannot read the SQLLOG table in the LOG database \\\"%s\\\" - %s\\n\",",
          "",
          "[Removed Lines]",
          "93:   rc = sqlite3_prepare_v2(db, \"SELECT sql, rowid FROM log.sqllog\",",
          "",
          "[Added Lines]",
          "93:   rc = sqlite3_prepare_v2(db,",
          "94:      \"SELECT sql, rowid FROM log.sqllog\"",
          "95:      \" WHERE upper(substr(sql,1,5)) NOT IN ('BEGIN','COMMI','ROLLB','PRAGM')\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "821afa44c13e1bbe0de726dbace1145bf38b057f",
      "candidate_info": {
        "commit_hash": "821afa44c13e1bbe0de726dbace1145bf38b057f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/821afa44c13e1bbe0de726dbace1145bf38b057f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "test/collate1.test"
        ],
        "message": "Fix the implementation of the built-in RTRIM collating sequence so that it works for control characters at the end of the string. Ticket [f1580ba1b574e9e9]\n\nFossilOrigin-Name: 86fa0087cd1f5c79ed51b99a226ec2eef5b0fa0a23981d469bec0e02fadf2a68",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "test/collate1.test||test/collate1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b4a9e09e60213ccff925d09f0b6e549e2a3e3862856c710f108779e2867dec76",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "875:   return rc;",
          "876: }",
          "894: static int binCollFunc(",
          "896:   int nKey1, const void *pKey1,",
          "897:   int nKey2, const void *pKey2",
          "898: ){",
          "899:   int rc, n;",
          "900:   n = nKey1<nKey2 ? nKey1 : nKey2;",
          "",
          "[Removed Lines]",
          "882: static int allSpaces(const char *z, int n){",
          "883:   while( n>0 && z[n-1]==' ' ){ n--; }",
          "884:   return n==0;",
          "885: }",
          "895:   void *padFlag,",
          "",
          "[Added Lines]",
          "883:   void *NotUsed,",
          "888:   UNUSED_PARAMETER(NotUsed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:   assert( pKey1 && pKey2 );",
          "905:   rc = memcmp(pKey1, pKey2, n);",
          "906:   if( rc==0 ){",
          "919:   }",
          "920:   return rc;",
          "921: }",
          "926: int sqlite3IsBinary(const CollSeq *p){",
          "930: }",
          "",
          "[Removed Lines]",
          "907:     if( padFlag",
          "908:      && allSpaces(((char*)pKey1)+n, nKey1-n)",
          "909:      && allSpaces(((char*)pKey2)+n, nKey2-n)",
          "910:     ){",
          "916:     }else{",
          "917:       rc = nKey1 - nKey2;",
          "918:     }",
          "927:   assert( p==0 || p->xCmp!=binCollFunc || p->pUser!=0",
          "928:             || strcmp(p->zName,\"BINARY\")==0 );",
          "929:   return p==0 || (p->xCmp==binCollFunc && p->pUser==0);",
          "",
          "[Added Lines]",
          "896:     rc = nKey1 - nKey2;",
          "905: static int rtrimCollFunc(",
          "906:   void *pUser,",
          "907:   int nKey1, const void *pKey1,",
          "908:   int nKey2, const void *pKey2",
          "909: ){",
          "910:   const u8 *pK1 = (const u8*)pKey1;",
          "911:   const u8 *pK2 = (const u8*)pKey2;",
          "912:   while( nKey1 && pK1[nKey1-1]==' ' ) nKey1--;",
          "913:   while( nKey2 && pK2[nKey2-1]==' ' ) nKey2--;",
          "914:   return binCollFunc(pUser, nKey1, pKey1, nKey2, pKey2);",
          "915: }",
          "921:   assert( p==0 || p->xCmp!=binCollFunc || strcmp(p->zName,\"BINARY\")==0 );",
          "922:   return p==0 || p->xCmp==binCollFunc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3128:   createCollation(db, sqlite3StrBINARY, SQLITE_UTF16BE, 0, binCollFunc, 0);",
          "3129:   createCollation(db, sqlite3StrBINARY, SQLITE_UTF16LE, 0, binCollFunc, 0);",
          "3130:   createCollation(db, \"NOCASE\", SQLITE_UTF8, 0, nocaseCollatingFunc, 0);",
          "3132:   if( db->mallocFailed ){",
          "3133:     goto opendb_out;",
          "3134:   }",
          "",
          "[Removed Lines]",
          "3131:   createCollation(db, \"RTRIM\", SQLITE_UTF8, (void*)1, binCollFunc, 0);",
          "",
          "[Added Lines]",
          "3124:   createCollation(db, \"RTRIM\", SQLITE_UTF8, 0, rtrimCollFunc, 0);",
          "",
          "---------------"
        ],
        "test/collate1.test||test/collate1.test": [
          "File: test/collate1.test -> test/collate1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:     ORDER BY 1 COLLATE binary COLLATE binary COLLATE binary COLLATE nocase;",
          "401: } {abc DEF}",
          "404: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: # 2019-06-14",
          "404: # https://sqlite.org/src/info/f1580ba1b574e9e9",
          "405: #",
          "406: do_execsql_test 8.0 {",
          "407:   SELECT ' ' > char(20) COLLATE rtrim;",
          "408: } 0",
          "409: do_execsql_test 8.1 {",
          "410:   SELECT '' < char(20) COLLATE rtrim;",
          "411: } 1",
          "412: do_execsql_test 8.2 {",
          "413:   DROP TABLE IF EXISTS t0;",
          "414:   CREATE TABLE t0(c0 COLLATE RTRIM, c1 BLOB UNIQUE,",
          "415:                   PRIMARY KEY (c0, c1)) WITHOUT ROWID;",
          "416:   INSERT INTO t0 VALUES (123, 3), (' ', 1), (' ', 2), ('', 4);",
          "417:   SELECT * FROM t0 WHERE c1 = 1;",
          "418: } {{ } 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e4fe01dda7240dd6550406f9d3e9f56f6fc0ccf",
      "candidate_info": {
        "commit_hash": "8e4fe01dda7240dd6550406f9d3e9f56f6fc0ccf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e4fe01dda7240dd6550406f9d3e9f56f6fc0ccf",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test"
        ],
        "message": "Do not run shmlock.test as part of the journaltest permutation.\n\nFossilOrigin-Name: 5b7d0c784e6467154d9549af0163d788b69d5e5a6478a735834cdea945e7dbb7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a7126a4f4fb4e3e25be95d673323f835252bb2b427469616046a90b2acf64071",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:   async4.test bigfile.test backcompat.test e_wal* fstat.test mmap2.test",
          "967:   pager1.test syscall.test tkt3457.test *malloc* mmap* multiplex* nolock*",
          "968:   pager2.test *fault* rowal* snapshot* superlock* symlink.test",
          "970: }]",
          "972: if {[info commands register_demovfs] != \"\"} {",
          "",
          "[Removed Lines]",
          "969:   delete_db.test",
          "",
          "[Added Lines]",
          "969:   delete_db.test shmlock.test",
          "",
          "---------------"
        ]
      }
    }
  ]
}