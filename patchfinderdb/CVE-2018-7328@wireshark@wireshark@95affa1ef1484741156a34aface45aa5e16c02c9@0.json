{
  "cve_id": "CVE-2018-7328",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.4 and 2.2.0 to 2.2.12, epan/dissectors/packet-usb.c had an infinite loop that was addressed by rejecting short frame header lengths.",
  "repo": "wireshark/wireshark",
  "patch_hash": "95affa1ef1484741156a34aface45aa5e16c02c9",
  "patch_info": {
    "commit_hash": "95affa1ef1484741156a34aface45aa5e16c02c9",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/95affa1ef1484741156a34aface45aa5e16c02c9",
    "files": [
      "epan/dissectors/packet-usb.c"
    ],
    "message": "USB: Sanity check Darwin USB header to prevent infinite loop.\n\nBug: 14421\nChange-Id: Ifb492b776182507c10664d067f99312af250e6ff\nReviewed-on: https://code.wireshark.org/review/25872\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c": [
      "File: epan/dissectors/packet-usb.c -> epan/dissectors/packet-usb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4253:         frame_header_length = tvb_get_guint32(tvb, offset, ENC_LITTLE_ENDIAN);",
      "4254:         frame_length        = tvb_get_guint32(tvb, offset + 4, ENC_LITTLE_ENDIAN);",
      "4257:             break;",
      "4258:         }",
      "",
      "[Removed Lines]",
      "4256:         if (len < frame_header_length) {",
      "",
      "[Added Lines]",
      "4256:         if ((len < frame_header_length) || (frame_header_length < 20)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "69d09028c956f6e049145485ce9b3e2858789b2b",
      "candidate_info": {
        "commit_hash": "69d09028c956f6e049145485ce9b3e2858789b2b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/69d09028c956f6e049145485ce9b3e2858789b2b",
        "files": [
          "epan/dissectors/packet-usb.c"
        ],
        "message": "USB: Sanity check Darwin USB header to prevent infinite loop.\n\nBug: 14421\nChange-Id: Ifb492b776182507c10664d067f99312af250e6ff\nReviewed-on: https://code.wireshark.org/review/25872\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 95affa1ef1484741156a34aface45aa5e16c02c9)\nReviewed-on: https://code.wireshark.org/review/25875",
        "before_after_code_files": [
          "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c"
          ],
          "candidate": [
            "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c": [
          "File: epan/dissectors/packet-usb.c -> epan/dissectors/packet-usb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4110:         frame_header_length = tvb_get_guint32(tvb, offset, ENC_LITTLE_ENDIAN);",
          "4111:         frame_length        = tvb_get_guint32(tvb, offset + 4, ENC_LITTLE_ENDIAN);",
          "4114:             break;",
          "4115:         }",
          "",
          "[Removed Lines]",
          "4113:         if (len < frame_header_length) {",
          "",
          "[Added Lines]",
          "4113:         if ((len < frame_header_length) || (frame_header_length < 20)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62d78199eee5d239b826442c6edd95aeeef1540b",
      "candidate_info": {
        "commit_hash": "62d78199eee5d239b826442c6edd95aeeef1540b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/62d78199eee5d239b826442c6edd95aeeef1540b",
        "files": [
          "epan/dissectors/packet-usb.c",
          "epan/dissectors/packet-usb.h",
          "wiretap/pcap-common.c",
          "wiretap/wtap.c",
          "wiretap/wtap.h"
        ],
        "message": "Add packet capture support for Darwin USB\n\nChange-Id: Iec9e4ac2362cf8e88a3cf6ae3483cefe938967e5\nReviewed-on: https://code.wireshark.org/review/20814\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Guy Harris <guy@alum.mit.edu>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c",
          "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h",
          "wiretap/pcap-common.c||wiretap/pcap-common.c",
          "wiretap/wtap.c||wiretap/wtap.c",
          "wiretap/wtap.h||wiretap/wtap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c"
          ],
          "candidate": [
            "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-usb.c||epan/dissectors/packet-usb.c": [
          "File: epan/dissectors/packet-usb.c -> epan/dissectors/packet-usb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: static int hf_usb_dst = -1;",
          "236: static int hf_usb_addr = -1;",
          "238: static gint ett_usb_hdr = -1;",
          "239: static gint ett_usb_setup_hdr = -1;",
          "240: static gint ett_usb_isodesc = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239: static int hf_usb_darwin_bcd_version = -1;",
          "240: static int hf_usb_darwin_header_len = -1;",
          "241: static int hf_usb_darwin_request_type = -1;",
          "242: static int hf_usb_darwin_io_len = -1;",
          "243: static int hf_usb_darwin_io_status = -1;",
          "244: static int hf_usb_darwin_iso_num_packets = -1;",
          "245: static int hf_usb_darwin_io_id = -1;",
          "246: static int hf_usb_darwin_device_location = -1;",
          "247: static int hf_usb_darwin_speed = -1;",
          "248: static int hf_usb_darwin_device_address = -1;",
          "249: static int hf_usb_darwin_endpoint_address = -1;",
          "250: static int hf_usb_darwin_endpoint_type = -1;",
          "251: static int hf_usb_darwin_iso_status = -1;",
          "252: static int hf_usb_darwin_iso_frame_number = -1;",
          "253: static int hf_usb_darwin_iso_timestamp = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1256: };",
          "1257: static value_string_ext usb_app_usb_test_and_measurement_protocol_vals_ext = VALUE_STRING_EXT_INIT(usb_app_usb_test_and_measurement_protocol_vals);",
          "1259: void proto_register_usb(void);",
          "1260: void proto_reg_handoff_usb(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1279: #define DARWIN_IO_SUBMIT   0",
          "1280: #define DARWIN_IO_COMPLETE 1",
          "1283: static const value_string usb_darwin_request_type_vals[] = {",
          "1284:     {DARWIN_IO_SUBMIT,   \"SUBMIT\"},",
          "1285:     {DARWIN_IO_COMPLETE, \"COMPLETE\"},",
          "1286:     {0, NULL}",
          "1287: };",
          "1290: static const value_string usb_darwin_endpoint_type_vals[] = {",
          "1291:     {USB_EP_CONTROL,     \"Control\"},",
          "1292:     {USB_EP_ISOCHRONOUS, \"Isochronous\"},",
          "1293:     {USB_EP_BULK,        \"Bulk\"},",
          "1294:     {USB_EP_INTERRUPT,   \"Interrupt\"},",
          "1295:     {0, NULL}",
          "1296: };",
          "1299: #define DARWIN_SPEED_LOW         0",
          "1300: #define DARWIN_SPEED_FULL        1",
          "1301: #define DARWIN_SPEED_HIGH        2",
          "1302: #define DARWIN_SPEED_SUPER       3",
          "1303: #define DARWIN_SPEED_SUPERPLUS   4",
          "1305: static const value_string usb_darwin_speed_vals[] = {",
          "1306:     {DARWIN_SPEED_LOW,       \"Low\"},",
          "1307:     {DARWIN_SPEED_FULL,      \"Full\"},",
          "1308:     {DARWIN_SPEED_HIGH,      \"High\"},",
          "1309:     {DARWIN_SPEED_SUPER,     \"Super\"},",
          "1310:     {DARWIN_SPEED_SUPERPLUS, \"Super+\"},",
          "1311:     {0, NULL}",
          "1312: };",
          "1314: static const value_string darwin_usb_status_vals[] = {",
          "1315:     {0x00000000, \"kIOReturnSuccess\"},",
          "1316:     {0xe00002bc, \"kIOReturnError\"},",
          "1317:     {0xe00002bd, \"kIOReturnNoMemory\"},",
          "1318:     {0xe00002be, \"kIOReturnNoResources\"},",
          "1319:     {0xe00002bf, \"kIOReturnIPCError\"},",
          "1320:     {0xe00002c0, \"kIOReturnNoDevice\"},",
          "1321:     {0xe00002c1, \"kIOReturnNotPrivileged\"},",
          "1322:     {0xe00002c2, \"kIOReturnBadArgument\"},",
          "1323:     {0xe00002c3, \"kIOReturnLockedRead\"},",
          "1324:     {0xe00002c4, \"kIOReturnLockedWrite\"},",
          "1325:     {0xe00002c5, \"kIOReturnExclusiveAccess\"},",
          "1326:     {0xe00002c6, \"kIOReturnBadMessageID\"},",
          "1327:     {0xe00002c7, \"kIOReturnUnsupported\"},",
          "1328:     {0xe00002c8, \"kIOReturnVMError\"},",
          "1329:     {0xe00002c9, \"kIOReturnInternalError\"},",
          "1330:     {0xe00002ca, \"kIOReturnIOError\"},",
          "1332:     {0xe00002cc, \"kIOReturnCannotLock\"},",
          "1333:     {0xe00002cd, \"kIOReturnNotOpen\"},",
          "1334:     {0xe00002ce, \"kIOReturnNotReadable\"},",
          "1335:     {0xe00002cf, \"kIOReturnNotWritable\"},",
          "1336:     {0xe00002d0, \"kIOReturnNotAligned\"},",
          "1337:     {0xe00002d1, \"kIOReturnBadMedia\"},",
          "1338:     {0xe00002d2, \"kIOReturnStillOpen\"},",
          "1339:     {0xe00002d3, \"kIOReturnRLDError\"},",
          "1340:     {0xe00002d4, \"kIOReturnDMAError\"},",
          "1341:     {0xe00002d5, \"kIOReturnBusy\"},",
          "1342:     {0xe00002d6, \"kIOReturnTimeout\"},",
          "1343:     {0xe00002d7, \"kIOReturnOffline\"},",
          "1344:     {0xe00002d8, \"kIOReturnNotReady\"},",
          "1345:     {0xe00002d9, \"kIOReturnNotAttached\"},",
          "1346:     {0xe00002da, \"kIOReturnNoChannels\"},",
          "1347:     {0xe00002db, \"kIOReturnNoSpace\"},",
          "1349:     {0xe00002eb, \"kIOReturnAborted\"},",
          "1350:     {0, NULL}",
          "1351: };",
          "1353: static const guint32 darwin_endpoint_to_linux[] =",
          "1354: {",
          "1355:     URB_CONTROL,",
          "1356:     URB_ISOCHRONOUS,",
          "1357:     URB_BULK,",
          "1358:     URB_INTERRUPT",
          "1359: };",
          "1361: static value_string_ext usb_darwin_status_vals_ext = VALUE_STRING_EXT_INIT(darwin_usb_status_vals);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3513:     return 27;",
          "3514: }",
          "3517: static void",
          "3518: usb_set_addr(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, guint16 bus_id, guint16 device_address,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3622: static gint",
          "3623: dissect_darwin_buffer_packet_header(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3624:         usb_conv_info_t *usb_conv_info, guint64 *id)",
          "3625: {",
          "3626:     guint8   transfer_type;",
          "3627:     guint8   request_type;",
          "3628:     guint8   endpoint_byte;",
          "3629:     guint8   transfer_type_and_direction;",
          "3630:     guint8   header_length;",
          "3632:     proto_tree_add_item(tree, hf_usb_darwin_bcd_version, tvb, 0, 2, ENC_LITTLE_ENDIAN);",
          "3634:     header_length = tvb_get_guint8(tvb, 2);",
          "3635:     proto_tree_add_item(tree, hf_usb_darwin_header_len, tvb, 2, 1, ENC_LITTLE_ENDIAN);",
          "3637:     request_type = tvb_get_guint8(tvb, 3);",
          "3638:     usb_conv_info->is_request = (request_type == DARWIN_IO_SUBMIT);",
          "3639:     proto_tree_add_uint(tree, hf_usb_darwin_request_type, tvb, 3, 1, request_type);",
          "3641:     proto_tree_add_item(tree, hf_usb_darwin_io_len, tvb, 4, 4, ENC_LITTLE_ENDIAN);",
          "3643:     proto_tree_add_item(tree, hf_usb_darwin_io_status, tvb, 8, 4, ENC_LITTLE_ENDIAN);",
          "3645:     proto_tree_add_item(tree, hf_usb_darwin_iso_num_packets, tvb, 12, 4, ENC_LITTLE_ENDIAN);",
          "3648:     proto_tree_add_uint64(tree, hf_usb_darwin_io_id, tvb, 16, 8, *id);",
          "3650:     proto_tree_add_item(tree, hf_usb_darwin_device_location, tvb, 24, 4, ENC_LITTLE_ENDIAN);",
          "3651:     usb_conv_info->bus_id = tvb_get_letohl(tvb, 24) >> 24;",
          "3653:     proto_tree_add_item(tree, hf_usb_darwin_speed, tvb, 28, 1, ENC_LITTLE_ENDIAN);",
          "3655:     usb_conv_info->device_address = (guint16)tvb_get_guint8(tvb, 29);",
          "3656:     proto_tree_add_uint(tree, hf_usb_darwin_device_address, tvb, 29, 1, usb_conv_info->device_address);",
          "3659:     usb_conv_info->endpoint = endpoint_byte & 0x7F;",
          "3660:     if (endpoint_byte & URB_TRANSFER_IN) {",
          "3661:         usb_conv_info->direction = P2P_DIR_RECV;",
          "3662:     }",
          "3663:     else {",
          "3664:         usb_conv_info->direction = P2P_DIR_SENT;",
          "3665:     }",
          "3666:     proto_tree_add_uint(tree, hf_usb_darwin_endpoint_address, tvb, 30, 1, endpoint_byte);",
          "3667:     proto_tree_add_bitmask(tree, tvb, 30, hf_usb_endpoint_number, ett_usb_endpoint, usb_endpoint_fields, ENC_LITTLE_ENDIAN);",
          "3669:     transfer_type = tvb_get_guint8(tvb, 31);",
          "3670:     usb_conv_info->transfer_type = darwin_endpoint_to_linux[transfer_type];",
          "3671:     proto_tree_add_uint(tree, hf_usb_darwin_endpoint_type, tvb, 31, 1, transfer_type);",
          "3673:     transfer_type_and_direction = darwin_endpoint_to_linux[transfer_type] | (endpoint_byte & 0x80);",
          "3674:     col_append_str(pinfo->cinfo, COL_INFO,",
          "3675:                    val_to_str(transfer_type_and_direction, usb_transfer_type_and_direction_vals, \"Unknown type %x\"));",
          "3676:     col_append_str(pinfo->cinfo, COL_INFO, usb_conv_info->is_request == TRUE ? \" (submitted)\" : \" (completed)\");",
          "3678:     usb_conv_info->is_setup = FALSE;",
          "3679:     if ((usb_conv_info->is_request == TRUE) && (usb_conv_info->transfer_type == URB_CONTROL)) {",
          "3680:         usb_conv_info->is_setup = TRUE;",
          "3681:     }",
          "3683:     usb_conv_info->setup_requesttype = 0;",
          "3686:     return header_length;",
          "3687: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3905:     return desc_offset;",
          "3906: }",
          "3908: static gint",
          "3909: dissect_usb_payload(tvbuff_t *tvb, packet_info *pinfo,",
          "3910:                     proto_tree *parent, proto_tree *tree,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4081: static gint",
          "4082: dissect_darwin_usb_iso_transfer(packet_info *pinfo _U_, proto_tree *tree, usb_header_t header_type _U_,",
          "4083:                     guint8 urb_type _U_, tvbuff_t *tvb, gint32 offset, usb_conv_info_t *usb_conv_info)",
          "4084: {",
          "4085:     guint32     frame_length;",
          "4086:     guint32     frame_header_length;",
          "4087:     guint32     status;",
          "4088:     guint32     iso_tree_start;",
          "4089:     guint32     i;",
          "4090:     guint32     iso_numdesc;",
          "4091:     guint32     len;",
          "4092:     proto_item *tii;",
          "4094:     len  = (gint32)tvb_captured_length(tvb);",
          "4095:     len -= offset;",
          "4097:     tii = proto_tree_add_uint(tree, hf_usb_bInterfaceClass, tvb, offset, 0, usb_conv_info->interfaceClass);",
          "4098:     PROTO_ITEM_SET_GENERATED(tii);",
          "4100:     status      = tvb_get_guint32(tvb, 8, ENC_LITTLE_ENDIAN);",
          "4101:     iso_numdesc = tvb_get_guint32(tvb, 12, ENC_LITTLE_ENDIAN);",
          "4103:     iso_tree_start = offset;",
          "4104:     for (i = 0; (i < iso_numdesc) && (len > 8 /* header len + frame len */); i++) {",
          "4105:         proto_item   *iso_desc_ti;",
          "4106:         proto_tree   *iso_desc_tree;",
          "4109:         frame_header_length = tvb_get_guint32(tvb, offset, ENC_LITTLE_ENDIAN);",
          "4110:         frame_length        = tvb_get_guint32(tvb, offset + 4, ENC_LITTLE_ENDIAN);",
          "4112:         if (len < frame_header_length) {",
          "4113:             break;",
          "4114:         }",
          "4116:         iso_desc_ti = proto_tree_add_protocol_format(tree, proto_usb, tvb, offset,",
          "4117:                 20, \"Frame %u [%s]\", i, val_to_str_ext(status, &usb_darwin_status_vals_ext, \"Error %d\"));",
          "4119:         iso_desc_tree = proto_item_add_subtree(iso_desc_ti, ett_usb_isodesc);",
          "4121:         proto_tree_add_item(iso_desc_tree, hf_usb_darwin_iso_frame_number, tvb, offset + 12, 8, ENC_LITTLE_ENDIAN);",
          "4123:         proto_tree_add_item(iso_desc_tree, hf_usb_iso_len, tvb, offset + 4, 4, ENC_LITTLE_ENDIAN);",
          "4125:         if (usb_conv_info->is_request == FALSE) {",
          "4126:             proto_tree_add_item(iso_desc_tree, hf_usb_darwin_iso_timestamp, tvb, offset + 20, 8, ENC_LITTLE_ENDIAN);",
          "4127:             proto_tree_add_item(iso_desc_tree, hf_usb_darwin_iso_status, tvb, offset + 8, 4, ENC_LITTLE_ENDIAN);",
          "4130:             if (frame_length > len) {",
          "4131:                 frame_length = len;",
          "4132:             }",
          "4134:             proto_tree_add_item(iso_desc_tree, hf_usb_iso_data, tvb, offset + frame_header_length, frame_length, ENC_NA);",
          "4135:             proto_tree_set_appendix(iso_desc_tree, tvb, (gint)iso_tree_start, (gint)(offset - iso_tree_start));",
          "4137:             len    -= frame_length;",
          "4138:             offset += frame_length;",
          "4139:         }",
          "4142:         offset        += frame_header_length;",
          "4143:         offset         = ((offset + 3) & ~3);",
          "4144:         iso_tree_start = offset;",
          "4146:         len -= frame_header_length;",
          "4147:     }",
          "4149:     return offset;",
          "4150: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4042:     guint32               win32_data_len = 0;",
          "4043:     guint32               iso_numdesc = 0;",
          "4044:     guint32               desc_offset = 0;",
          "4045:     proto_item           *urb_tree_ti;",
          "4046:     proto_tree           *tree;",
          "4047:     proto_item           *item;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4289:     guint32               location = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4091:         endpoint = ip_header->ep;",
          "4092:         break;",
          "4094:     default:",
          "4096:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4339:     case USB_HEADER_DARWIN:",
          "4340:         urb_type = tvb_get_guint8(tvb, 1);",
          "4341:         endpoint = tvb_get_guint8(tvb, 30) & 0x7F;",
          "4342:         device_address = (guint16)tvb_get_guint8(tvb, 29);",
          "4343:         location = tvb_get_letohl(tvb, 23);",
          "4344:         bus_id = location >> 24;",
          "4345:         break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4147:         usb_id = 0;",
          "4148:         break;",
          "4150:     default:",
          "4151:         usb_id = 0;",
          "4152:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4403:     case USB_HEADER_DARWIN:",
          "4404:         offset = dissect_darwin_buffer_packet_header(tvb, pinfo, tree, usb_conv_info, &usb_id);",
          "4405:         proto_item_set_len(urb_tree_ti, offset);",
          "4406:         break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4185:         case USB_HEADER_USBIP:",
          "4186:             break;",
          "4187:         }",
          "4188:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4446:         case USB_HEADER_DARWIN:",
          "4447:             break;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4223:                 case USB_HEADER_USBIP:",
          "4224:                     break;",
          "4225:                 }",
          "4226:             }",
          "4227:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4487:                 case USB_HEADER_DARWIN:",
          "4488:                     break;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4257:             case USB_HEADER_USBIP:",
          "4258:                 break;",
          "4259:             }",
          "4261:             offset = dissect_usb_setup_response(pinfo, tree, tvb, offset,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4524:             case USB_HEADER_DARWIN:",
          "4525:                 break;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4283:             offset = dissect_usbip_iso_transfer(pinfo, tree,",
          "4284:                     tvb, offset, iso_numdesc, desc_offset, usb_conv_info);",
          "4285:             break;",
          "4286:         }",
          "4287:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4554:         case USB_HEADER_DARWIN:",
          "4555:             offset = dissect_darwin_usb_iso_transfer(pinfo, tree, header_type,",
          "4556:                     urb_type, tvb, offset, usb_conv_info);",
          "4557:             break;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4307:         case USB_HEADER_USBIP:",
          "4308:             break;",
          "4309:         }",
          "4310:         break;",
          "4311:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4582:         case USB_HEADER_DARWIN:",
          "4583:             break;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4336:     return tvb_captured_length(tvb);",
          "4337: }",
          "4339: void",
          "4340: proto_register_usb(void)",
          "4341: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4614: static int",
          "4615: dissect_darwin_usb(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent, void* data _U_)",
          "4616: {",
          "4617:     dissect_usb_common(tvb, pinfo, parent, USB_HEADER_DARWIN, NULL);",
          "4618:     return tvb_captured_length(tvb);",
          "4619: }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4760:             FT_UINT32, BASE_HEX | BASE_EXT_STRING, &win32_usbd_status_vals_ext, 0x0,",
          "4761:             NULL, HFILL }},",
          "4764:         { &hf_usb_bmRequestType,",
          "4765:           { \"bmRequestType\", \"usb.bmRequestType\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5046:         { &hf_usb_darwin_bcd_version,",
          "5047:           { \"Darwin header bcdVersion\", \"usb.darwin.bcdVersion\",",
          "5048:             FT_UINT16, BASE_HEX, NULL, 0x0,",
          "5049:             NULL, HFILL }},",
          "5051:         { &hf_usb_darwin_header_len,",
          "5052:           { \"Darwin header length\", \"usb.darwin.header_len\",",
          "5053:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5054:             NULL, HFILL }},",
          "5056:         { &hf_usb_darwin_request_type,",
          "5057:           { \"Request type\", \"usb.darwin.request_type\",",
          "5058:             FT_UINT8, BASE_DEC, VALS(usb_darwin_request_type_vals), 0x0,",
          "5059:             NULL, HFILL }},",
          "5061:         { &hf_usb_darwin_io_len,",
          "5062:           { \"I/O length [bytes]\", \"usb.darwin.io_len\",",
          "5063:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "5064:             \"Request length in bytes\", HFILL }},",
          "5066:         { &hf_usb_darwin_io_status,",
          "5067:           { \"Request status\", \"usb.darwin.io_status\",",
          "5068:             FT_UINT32, BASE_HEX | BASE_EXT_STRING, &usb_darwin_status_vals_ext, 0x0,",
          "5069:             \"USB request status\", HFILL }},",
          "5071:         { &hf_usb_darwin_iso_num_packets,",
          "5072:           { \"Isochronous transfer number of frames\", \"usb.darwin.io_frame_count\",",
          "5073:             FT_UINT32, BASE_DEC, NULL, 0x0,",
          "5074:             NULL, HFILL }},",
          "5076:         { &hf_usb_darwin_io_id,",
          "5077:           { \"I/O ID\", \"usb.darwin.io_id\",",
          "5078:             FT_UINT64, BASE_HEX, NULL, 0x0,",
          "5079:             NULL, HFILL }},",
          "5081:         { &hf_usb_darwin_device_location,",
          "5082:           { \"Device location ID\", \"usb.darwin.location_id\",",
          "5083:             FT_UINT32, BASE_HEX, NULL, 0x0,",
          "5084:             NULL, HFILL }},",
          "5086:         { &hf_usb_darwin_speed,",
          "5087:           { \"Device speed\", \"usb.darwin_device_speed\",",
          "5088:             FT_UINT8, BASE_DEC, VALS(usb_darwin_speed_vals), 0x0,",
          "5089:             NULL, HFILL }},",
          "5091:         { &hf_usb_darwin_device_address,",
          "5092:           { \"USB device index\", \"usb.darwin.device_address\",",
          "5093:             FT_UINT8, BASE_DEC, NULL, 0x0,",
          "5094:             NULL, HFILL }},",
          "5096:         { &hf_usb_darwin_endpoint_address,",
          "5097:           { \"Endpoint address\", \"usb.darwin.endpoint_address\",",
          "5098:             FT_UINT8, BASE_HEX, NULL, 0x0,",
          "5099:             \"Endpoint address and direction\", HFILL }},",
          "5101:         { &hf_usb_darwin_endpoint_type,",
          "5102:           { \"Endpoint transfer type\", \"usb.darwin.endpoint_type\",",
          "5103:             FT_UINT8, BASE_DEC, VALS(usb_darwin_endpoint_type_vals), 0x0,",
          "5104:             NULL, HFILL }},",
          "5106:         { &hf_usb_darwin_iso_status,",
          "5107:           { \"Frame status\", \"usb.darwin.iso.status\",",
          "5108:             FT_UINT32, BASE_HEX | BASE_EXT_STRING, &usb_darwin_status_vals_ext, 0x0,",
          "5109:             NULL, HFILL }},",
          "5111:         { &hf_usb_darwin_iso_timestamp,",
          "5112:           { \"Frame timestamp\", \"usb.darwin.iso.timestamp\",",
          "5113:             FT_UINT64, BASE_HEX, NULL, 0x0,",
          "5114:             NULL, HFILL }},",
          "5116:         { &hf_usb_darwin_iso_frame_number,",
          "5117:           { \"Frame number\", \"usb.darwin.iso.frame_number\",",
          "5118:             FT_UINT64, BASE_HEX, NULL, 0x0,",
          "5119:             NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5325:     dissector_handle_t  linux_usb_mmapped_handle;",
          "5326:     dissector_handle_t  win32_usb_handle;",
          "5327:     dissector_handle_t  freebsd_usb_handle;",
          "5329:     linux_usb_handle = create_dissector_handle(dissect_linux_usb, proto_usb);",
          "5330:     linux_usb_mmapped_handle = create_dissector_handle(dissect_linux_usb_mmapped,",
          "5331:                                                        proto_usb);",
          "5332:     win32_usb_handle = create_dissector_handle(dissect_win32_usb, proto_usb);",
          "5333:     freebsd_usb_handle = create_dissector_handle(dissect_freebsd_usb, proto_usb);",
          "5335:     dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_USB_LINUX, linux_usb_handle);",
          "5336:     dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_USB_LINUX_MMAPPED, linux_usb_mmapped_handle);",
          "5337:     dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_USBPCAP, win32_usb_handle);",
          "5338:     dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_USB_FREEBSD, freebsd_usb_handle);",
          "5339: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5685:     dissector_handle_t  darwin_usb_handle;",
          "5692:     darwin_usb_handle = create_dissector_handle(dissect_darwin_usb, proto_usb);",
          "5698:     dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_USB_DARWIN, darwin_usb_handle);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-usb.h||epan/dissectors/packet-usb.h": [
          "File: epan/dissectors/packet-usb.h -> epan/dissectors/packet-usb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     USB_HEADER_LINUX_64_BYTES,",
          "48:     USB_HEADER_USBPCAP,",
          "49:     USB_HEADER_MAUSB,",
          "51: } usb_header_t;",
          "53: #define USB_HEADER_IS_LINUX(type) \\",
          "",
          "[Removed Lines]",
          "50:     USB_HEADER_USBIP",
          "",
          "[Added Lines]",
          "50:     USB_HEADER_USBIP,",
          "51:     USB_HEADER_DARWIN",
          "",
          "---------------"
        ],
        "wiretap/pcap-common.c||wiretap/pcap-common.c": [
          "File: wiretap/pcap-common.c -> wiretap/pcap-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:  { 264,  WTAP_ENCAP_ISO14443 },",
          "441:  { 268,  WTAP_ENCAP_SDLC },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:  { 266,          WTAP_ENCAP_USB_DARWIN },",
          "",
          "---------------"
        ],
        "wiretap/wtap.c||wiretap/wtap.c": [
          "File: wiretap/wtap.c -> wiretap/wtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "920:  { \"Juniper VN\", \"juniper-vn\" },",
          "921: };",
          "923: WS_DLL_LOCAL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "923:  { \"Darwin USB\", \"darwin-usb\" },",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "269: #define WTAP_ENCAP_GFP_F                        179",
          "270: #define WTAP_ENCAP_IP_OVER_IB_PCAP              180",
          "271: #define WTAP_ENCAP_JUNIPER_VN                   181",
          "274: #define WTAP_NUM_ENCAP_TYPES                    wtap_get_num_encap_types()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272: #define WTAP_ENCAP_USB_DARWIN                   182",
          "",
          "---------------"
        ]
      }
    }
  ]
}