{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c285ded26c1a8b368777691cf40ad7385f27919b",
      "candidate_info": {
        "commit_hash": "c285ded26c1a8b368777691cf40ad7385f27919b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c285ded26c1a8b368777691cf40ad7385f27919b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbemem.c",
          "test/cast.test",
          "test/e_expr.test"
        ],
        "message": "Make sure a CAST to \"NUMERIC\" results in an integer if the value can be losslessly expressed as an integer, as the documentation requires. Ticket [dd6bffbfb6e61db9].\n\nFossilOrigin-Name: c0c90961b4fa1c1185772d04fe1915bc1a1af27ed8ddb8db1c524bf90d68ccbf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test",
          "test/e_expr.test||test/e_expr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 567b13093956185b5d5e971b81ba4788fd9d26c03688f643b380f0f1c1a94da0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: static int alsoAnInt(Mem *pRec, double rValue, i64 *piValue){",
          "286:   i64 iValue = (double)rValue;",
          "287:   if( sqlite3RealSameAsInt(rValue,iValue) ){",
          "299:   }",
          "300:   return 0==sqlite3Atoi64(pRec->z, piValue, pRec->n, pRec->enc);",
          "301: }",
          "",
          "[Removed Lines]",
          "288:     testcase( iValue<-2251799813685248 );",
          "289:     testcase( iValue==-2251799813685248 );",
          "290:     testcase( iValue==-2251799813685247 );",
          "291:     testcase( iValue>-2251799813685247 && iValue<+2251799813685247 );",
          "292:     testcase( iValue==+2251799813685247 );",
          "293:     testcase( iValue==+2251799813685248 );",
          "294:     testcase( iValue>+2251799813685248 );",
          "295:     if( iValue > -2251799813685248 && iValue < 2251799813685248 ){",
          "297:       return 1;",
          "298:     }",
          "",
          "[Added Lines]",
          "289:     return 1;",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "703: }",
          "",
          "[Removed Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0;",
          "",
          "[Added Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "703:       && i > -2251799813685248 && i < 2251799813685248;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "721:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "722:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "723:     rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "732:       pMem->u.i = ix;",
          "733:       MemSetTypeFlag(pMem, MEM_Int);",
          "734:     }else{",
          "",
          "[Removed Lines]",
          "724:     if( rc<=0 ){",
          "725:       if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "726:         pMem->u.i = ix;",
          "727:         MemSetTypeFlag(pMem, MEM_Int);",
          "728:       }else{",
          "729:         MemSetTypeFlag(pMem, MEM_Real);",
          "730:       }",
          "731:     }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "",
          "[Added Lines]",
          "725:     if( ((rc==0 || rc==1) && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1)",
          "726:      || sqlite3RealSameAsInt(pMem->u.r, (ix = (i64)pMem->u.r))",
          "727:     ){",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "371: do_execsql_test case-5.3 {",
          "372:   SELECT CAST('123e+5' AS INTEGER);",
          "373:   SELECT CAST('123e+5' AS NUMERIC);",
          "377: # The following does not have anything to do with the CAST operator,",
          "",
          "[Removed Lines]",
          "374: } {123 12300000.0}",
          "",
          "[Added Lines]",
          "374:   SELECT CAST('123e+5' AS REAL);",
          "375: } {123 12300000 12300000.0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:   SELECT '' - 1;",
          "416: } {-1}",
          "418: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419: # 2019-06-10",
          "420: # https://www.sqlite.org/src/info/dd6bffbfb6e61db9",
          "421: #",
          "422: # EVIDENCE-OF: R-09295-61337 Casting a TEXT or BLOB value into NUMERIC",
          "423: # first does a forced conversion into REAL but then further converts the",
          "424: # result into INTEGER if and only if the conversion from REAL to INTEGER",
          "425: # is lossless and reversible.",
          "426: #",
          "427: do_execsql_test cast-7.20 {",
          "428:   DROP TABLE IF EXISTS t0;",
          "429:   CREATE TABLE t0 (c0 TEXT);",
          "430:   INSERT INTO t0(c0) VALUES ('1.0');",
          "431:   SELECT CAST(c0 AS NUMERIC) FROM t0;",
          "432: } {1}",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: # is lossless and reversible.",
          "1651: #",
          "1652: do_expr_test e_expr-32.1.1 { CAST('45'   AS NUMERIC)  } integer 45",
          "1654: do_expr_test e_expr-32.1.3 { CAST('45.2' AS NUMERIC)  } real 45.2",
          "1655: do_expr_test e_expr-32.1.4 { CAST('11abc' AS NUMERIC) } integer 11",
          "1656: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "",
          "[Removed Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } real 45.0",
          "",
          "[Added Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } integer 45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1709:  real 9.22337203685478e+18 \\",
          "1710:  real 9.22337203685478e+18 \\",
          "1711:  real 9.22337203685478e+18 \\",
          "1714: ]",
          "1716: # EVIDENCE-OF: R-64550-29191 Note that the result from casting any",
          "",
          "[Removed Lines]",
          "1712:  real -5.0 \\",
          "1713:  real -5.0 \\",
          "",
          "[Added Lines]",
          "1712:  integer -5 \\",
          "1713:  integer -5 \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b28c4e564ab4ac8603f28e662a3a591a40a069b2",
      "candidate_info": {
        "commit_hash": "b28c4e564ab4ac8603f28e662a3a591a40a069b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b28c4e564ab4ac8603f28e662a3a591a40a069b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Minor tweak to patch on this branch to reclaim some cycles.\n\nFossilOrigin-Name: 81eed055de856068109a7e332cca0c3ff1120ebe2bfa5ed6383b165c726e0a7c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28aa1702f7f0334abd1b30e7aa48ea3679539b11bfbba32bc9f0d6049cf18a7b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6240:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6241: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6244: #endif",
          "6245:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6246:     }",
          "",
          "[Removed Lines]",
          "6243:       sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "6243:       if( pExpr->y.pFilter ){",
          "6244:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "6245:       }",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:   WINDOW win AS (ORDER BY 1);",
          "425: }",
          "429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: execsql_test 4.10 {",
          "428:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "429: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:   set {} {}",
          "894: } {}",
          "896: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "896: do_execsql_test 4.10 {",
          "897:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "898: } {3   3   3   6   6   6}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25050f26206456c62f400bdd95215701095b00a0",
      "candidate_info": {
        "commit_hash": "25050f26206456c62f400bdd95215701095b00a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25050f26206456c62f400bdd95215701095b00a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Use an unsigned integer to count free pages in btree.c:freePage2().\n\nFossilOrigin-Name: 8820408597341344b308277ce6ef41b47c7514d6c613520789b05ee52cbedae8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80704a16f6dbbeacc65fa36a3623df10292a28aeacf9e2c1d2891258479e3b89",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    },
    {
      "candidate_hash": "10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
      "candidate_info": {
        "commit_hash": "10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/malloc.c",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqlite.h.in",
          "src/sqlite3ext.h",
          "src/test1.c",
          "src/treeview.c",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Add the sqlite3_hard_heap_limit64() interface and the corresponding \"PRAGMA hard_heap_limit=N\" command.\n\nFossilOrigin-Name: b0ccef61a7f92d20228becbf4f997bf0f4e46dad2deaf0896dc63b976ad1dd11",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/malloc.c||src/malloc.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h",
          "src/test1.c||src/test1.c",
          "src/treeview.c||src/treeview.c",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7be6222c9ec44596e4eddd906c831eb1272b90fbdf68641d791f216264feb7cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "461: #endif",
          "463:   sqlite3_stmt_isexplain,",
          "465: };",
          "",
          "[Removed Lines]",
          "464:   sqlite3_value_frombind",
          "",
          "[Added Lines]",
          "464:   sqlite3_value_frombind,",
          "466:   sqlite3_hard_heap_limit64",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     sqlite3_mutex_leave(mem0.mutex);",
          "92:     return priorLimit;",
          "93:   }",
          "94:   mem0.alarmThreshold = n;",
          "95:   nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "96:   mem0.nearlyFull = (n>0 && n<=nUsed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   if( mem0.hardLimit>0 && (n>mem0.hardLimit || n==0) ){",
          "103:     n = mem0.hardLimit;",
          "104:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   sqlite3_soft_heap_limit64(n);",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){",
          "131:   sqlite3_int64 priorLimit;",
          "132: #ifndef SQLITE_OMIT_AUTOINIT",
          "133:   int rc = sqlite3_initialize();",
          "134:   if( rc ) return -1;",
          "135: #endif",
          "136:   sqlite3_mutex_enter(mem0.mutex);",
          "137:   priorLimit = mem0.hardLimit;",
          "138:   if( n>=0 ){",
          "139:     mem0.hardLimit = n;",
          "140:     if( n<mem0.alarmThreshold || mem0.alarmThreshold==0 ){",
          "141:       mem0.alarmThreshold = n;",
          "142:     }",
          "143:   }",
          "144:   sqlite3_mutex_leave(mem0.mutex);",
          "145:   return priorLimit;",
          "146: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:     if( nUsed >= mem0.alarmThreshold - nFull ){",
          "204:       mem0.nearlyFull = 1;",
          "205:       sqlite3MallocAlarm(nFull);",
          "206:     }else{",
          "207:       mem0.nearlyFull = 0;",
          "208:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:       if( mem0.hardLimit ){",
          "249:         nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "250:         if( nUsed >= mem0.hardLimit - nFull ){",
          "252:           return;",
          "253:         }",
          "254:       }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2064:     break;",
          "2065:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2078:   case PragTyp_HARD_HEAP_LIMIT: {",
          "2079:     sqlite3_int64 N;",
          "2080:     if( zRight && sqlite3DecOrHexToI64(zRight, &N)==SQLITE_OK ){",
          "2081:       sqlite3_int64 iPrior = sqlite3_hard_heap_limit64(-1);",
          "2082:       if( N>0 && (iPrior==0 || iPrior>N) ) sqlite3_hard_heap_limit64(N);",
          "2083:     }",
          "2084:     returnSingleInt(v, sqlite3_soft_heap_limit64(-1));",
          "2085:     break;",
          "2086:   }",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define PragTyp_FOREIGN_KEY_CHECK             13",
          "22: #define PragTyp_FOREIGN_KEY_LIST              14",
          "23: #define PragTyp_FUNCTION_LIST                 15",
          "",
          "[Removed Lines]",
          "24: #define PragTyp_INCREMENTAL_VACUUM            16",
          "25: #define PragTyp_INDEX_INFO                    17",
          "26: #define PragTyp_INDEX_LIST                    18",
          "27: #define PragTyp_INTEGRITY_CHECK               19",
          "28: #define PragTyp_JOURNAL_MODE                  20",
          "29: #define PragTyp_JOURNAL_SIZE_LIMIT            21",
          "30: #define PragTyp_LOCK_PROXY_FILE               22",
          "31: #define PragTyp_LOCKING_MODE                  23",
          "32: #define PragTyp_PAGE_COUNT                    24",
          "33: #define PragTyp_MMAP_SIZE                     25",
          "34: #define PragTyp_MODULE_LIST                   26",
          "35: #define PragTyp_OPTIMIZE                      27",
          "36: #define PragTyp_PAGE_SIZE                     28",
          "37: #define PragTyp_PRAGMA_LIST                   29",
          "38: #define PragTyp_SECURE_DELETE                 30",
          "39: #define PragTyp_SHRINK_MEMORY                 31",
          "40: #define PragTyp_SOFT_HEAP_LIMIT               32",
          "41: #define PragTyp_SYNCHRONOUS                   33",
          "42: #define PragTyp_TABLE_INFO                    34",
          "43: #define PragTyp_TEMP_STORE                    35",
          "44: #define PragTyp_TEMP_STORE_DIRECTORY          36",
          "45: #define PragTyp_THREADS                       37",
          "46: #define PragTyp_WAL_AUTOCHECKPOINT            38",
          "47: #define PragTyp_WAL_CHECKPOINT                39",
          "48: #define PragTyp_ACTIVATE_EXTENSIONS           40",
          "49: #define PragTyp_HEXKEY                        41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "52: #define PragTyp_STATS                         44",
          "",
          "[Added Lines]",
          "24: #define PragTyp_HARD_HEAP_LIMIT               16",
          "25: #define PragTyp_INCREMENTAL_VACUUM            17",
          "26: #define PragTyp_INDEX_INFO                    18",
          "27: #define PragTyp_INDEX_LIST                    19",
          "28: #define PragTyp_INTEGRITY_CHECK               20",
          "29: #define PragTyp_JOURNAL_MODE                  21",
          "30: #define PragTyp_JOURNAL_SIZE_LIMIT            22",
          "31: #define PragTyp_LOCK_PROXY_FILE               23",
          "32: #define PragTyp_LOCKING_MODE                  24",
          "33: #define PragTyp_PAGE_COUNT                    25",
          "34: #define PragTyp_MMAP_SIZE                     26",
          "35: #define PragTyp_MODULE_LIST                   27",
          "36: #define PragTyp_OPTIMIZE                      28",
          "37: #define PragTyp_PAGE_SIZE                     29",
          "38: #define PragTyp_PRAGMA_LIST                   30",
          "39: #define PragTyp_SECURE_DELETE                 31",
          "40: #define PragTyp_SHRINK_MEMORY                 32",
          "41: #define PragTyp_SOFT_HEAP_LIMIT               33",
          "42: #define PragTyp_SYNCHRONOUS                   34",
          "43: #define PragTyp_TABLE_INFO                    35",
          "44: #define PragTyp_TEMP_STORE                    36",
          "45: #define PragTyp_TEMP_STORE_DIRECTORY          37",
          "46: #define PragTyp_THREADS                       38",
          "47: #define PragTyp_WAL_AUTOCHECKPOINT            39",
          "48: #define PragTyp_WAL_CHECKPOINT                40",
          "49: #define PragTyp_ACTIVATE_EXTENSIONS           41",
          "50: #define PragTyp_HEXKEY                        42",
          "51: #define PragTyp_KEY                           43",
          "52: #define PragTyp_LOCK_STATUS                   44",
          "53: #define PragTyp_STATS                         45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319: #endif",
          "320: #endif",
          "321: #if defined(SQLITE_HAS_CODEC)",
          "322:  {/* zName:     */ \"hexkey\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:  {/* zName:     */ \"hard_heap_limit\",",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6089: sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6103: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:   int (*stmt_isexplain)(sqlite3_stmt*);",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "325: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:   sqlite3_int64 (*hard_heap_limit64)(sqlite3_int64);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615: #define sqlite3_stmt_isexplain         sqlite3_api->isexplain",
          "616: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "619: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620: #define sqlite3_hard_heap_limit64      sqlite3_api->hard_heap_limit64",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5477:   return TCL_OK;",
          "5478: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5487: static int SQLITE_TCLAPI test_hard_heap_limit(",
          "5488:   void * clientData,",
          "5489:   Tcl_Interp *interp,",
          "5490:   int objc,",
          "5491:   Tcl_Obj *CONST objv[]",
          "5492: ){",
          "5493:   sqlite3_int64 amt;",
          "5494:   Tcl_WideInt N = -1;",
          "5495:   if( objc!=1 && objc!=2 ){",
          "5496:     Tcl_WrongNumArgs(interp, 1, objv, \"?N?\");",
          "5497:     return TCL_ERROR;",
          "5498:   }",
          "5499:   if( objc==2 ){",
          "5500:     if( Tcl_GetWideIntFromObj(interp, objv[1], &N) ) return TCL_ERROR;",
          "5501:   }",
          "5502:   amt = sqlite3_hard_heap_limit64(N);",
          "5503:   Tcl_SetObjResult(interp, Tcl_NewWideIntObj(amt));",
          "5504:   return TCL_OK;",
          "5505: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7880:      { \"sqlite3_db_filename\",           test_db_filename,        0},",
          "7881:      { \"sqlite3_db_readonly\",           test_db_readonly,        0},",
          "7882:      { \"sqlite3_soft_heap_limit\",       test_soft_heap_limit,    0},",
          "7883:      { \"sqlite3_thread_cleanup\",        test_thread_cleanup,     0},",
          "7884:      { \"sqlite3_pager_refcounts\",       test_pager_refcounts,    0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7910:      { \"sqlite3_soft_heap_limit64\",     test_soft_heap_limit,    0},",
          "7911:      { \"sqlite3_hard_heap_limit64\",     test_hard_heap_limit,    0},",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     va_start(ap, zFormat);",
          "67:     sqlite3_str_vappendf(&acc, zFormat, ap);",
          "68:     va_end(ap);",
          "70:     sqlite3_str_append(&acc, \"\\n\", 1);",
          "71:   }",
          "72:   sqlite3StrAccumFinish(&acc);",
          "",
          "[Removed Lines]",
          "69:     assert( acc.nChar>0 );",
          "",
          "[Added Lines]",
          "69:     assert( acc.nChar>0 || acc.accError );",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:   NAME: soft_heap_limit",
          "406:   FLAG: Result0",
          "408:   NAME: threads",
          "409:   FLAG: Result0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:   NAME: hard_heap_limit",
          "409:   FLAG: Result0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3664dcb4837e94f685606a00aa5da1d4f4c3d3d",
      "candidate_info": {
        "commit_hash": "e3664dcb4837e94f685606a00aa5da1d4f4c3d3d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3664dcb4837e94f685606a00aa5da1d4f4c3d3d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_demovfs.c"
        ],
        "message": "Fix minor problems in the test code in test_demovfs.c.\n\nFossilOrigin-Name: ca4ddfefc1be1afbf366d87c47f0dd1122350d7ab34ba60020c5babb64a654a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_demovfs.c||src/test_demovfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0bbceebb126c94b5159079a341fa16e8424b7f2f6b9364561516964e871fb6e0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_demovfs.c||src/test_demovfs.c": [
          "File: src/test_demovfs.c -> src/test_demovfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:   if( nRead==iAmt ){",
          "241:     return SQLITE_OK;",
          "242:   }else if( nRead>=0 ){",
          "243:     return SQLITE_IOERR_SHORT_READ;",
          "244:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:     if( nRead<iAmt ){",
          "244:       memset(&((char*)zBuf)[nRead], 0, iAmt-nRead);",
          "245:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371: static int demoFileControl(sqlite3_file *pFile, int op, void *pArg){",
          "373: }",
          "",
          "[Removed Lines]",
          "372:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "375:   return SQLITE_NOTFOUND;",
          "",
          "---------------"
        ]
      }
    }
  ]
}