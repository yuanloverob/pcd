{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "03e689fae45ce31282b588f424988f90c9d652bb",
      "candidate_info": {
        "commit_hash": "03e689fae45ce31282b588f424988f90c9d652bb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/03e689fae45ce31282b588f424988f90c9d652bb",
        "files": [
          "lib/util.js"
        ],
        "message": "Revert \"util: always display a warning for module in debug mode\"\n\nThis reverts commit df62005ece4bb0be0d5af645fd9093b1506ce63d.",
        "before_after_code_files": [
          "lib/util.js||liutil.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/util.js||liutil.js": [
          "File: lib/util.js -> liutil.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "522: var deprecationWarnings;",
          "524: exports._deprecationWarning = function(moduleId, message) {",
          "526:     console.trace(message);",
          "533:     console.error(message);",
          "537: };",
          "",
          "[Removed Lines]",
          "525:   if ((new RegExp('\\\\b' + moduleId + '\\\\b')).test(process.env.NODE_DEBUG)) {",
          "527:   } else {",
          "528:     if (!deprecationWarnings) {",
          "529:       deprecationWarnings = {};",
          "530:     } else if (message in deprecationWarnings) {",
          "531:       return;",
          "532:     }",
          "535:     deprecationWarnings[message] = true;",
          "536:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "772b3bf4c806f881528718d1e0240392d0228c19",
      "candidate_info": {
        "commit_hash": "772b3bf4c806f881528718d1e0240392d0228c19",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/772b3bf4c806f881528718d1e0240392d0228c19",
        "files": [
          "src/node_object_wrap.h"
        ],
        "message": "unix: don't explicitly instantiate v8::Persistent<x> templates\n\nThese explicit instantiations were added to make MSVC happy. It turns\nout that some older versions of gcc and llvm now complain about duplicate\nsymbols, so we instantiate these templates only when MSVC is used.",
        "before_after_code_files": [
          "src/node_object_wrap.h||src/node_object_wrap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_object_wrap.h||src/node_object_wrap.h": [
          "File: src/node_object_wrap.h -> src/node_object_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: namespace node {",
          "",
          "[Removed Lines]",
          "32: template class NODE_EXTERN v8::Persistent<v8::Object>;",
          "33: template class NODE_EXTERN v8::Persistent<v8::FunctionTemplate>;",
          "",
          "[Added Lines]",
          "32: #ifdef _MSC_VER",
          "33:   template class NODE_EXTERN v8::Persistent<v8::Object>;",
          "34:   template class NODE_EXTERN v8::Persistent<v8::FunctionTemplate>;",
          "35: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f101f7c9babb31f077c78b52de7cc45ad687f57e",
      "candidate_info": {
        "commit_hash": "f101f7c9babb31f077c78b52de7cc45ad687f57e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f101f7c9babb31f077c78b52de7cc45ad687f57e",
        "files": [
          "src/node_buffer.cc",
          "test/simple/test-buffer.js"
        ],
        "message": "buffers: honor length argument in base64 decoder\n\nHonor the length argument in `buf.write(s, 0, buf.length, 'base64')`. Before\nthis commit, the length argument was ignored. The decoder would keep writing\nuntil it hit the end of the buffer. Since most buffers in Node are slices of\na parent buffer (the slab), this bug would overwrite the content of adjacent\nbuffers.\n\nThe bug is trivially demonstrated with the following test case:\n\n    var assert = require('assert');\n    var a = Buffer(3);\n    var b = Buffer('xxx');\n    a.write('aaaaaaaa', 'base64');\n    assert.equal(b.toString(), 'xxx');\n\nThis commit coincidentally also fixes a bug where Buffer._charsWritten was not\nupdated for zero length buffers.",
        "before_after_code_files": [
          "src/node_buffer.cc||src/node_buffer.cc",
          "test/simple/test-buffer.js||test/simple/test-buffer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_buffer.cc||src/node_buffer.cc": [
          "File: src/node_buffer.cc -> src/node_buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "584: Handle<Value> Buffer::Base64Write(const Arguments &args) {",
          "585:   HandleScope scope;",
          "598:   Buffer *buffer = ObjectWrap::Unwrap<Buffer>(args.This());",
          "600:   if (!args[0]->IsString()) {",
          "",
          "[Removed Lines]",
          "587:   assert(unbase64('/') == 63);",
          "588:   assert(unbase64('+') == 62);",
          "589:   assert(unbase64('T') == 19);",
          "590:   assert(unbase64('Z') == 25);",
          "591:   assert(unbase64('t') == 45);",
          "592:   assert(unbase64('z') == 51);",
          "594:   assert(unbase64(' ') == -2);",
          "595:   assert(unbase64('\\n') == -2);",
          "596:   assert(unbase64('\\r') == -2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "605:   String::AsciiValue s(args[0]->ToString());",
          "606:   size_t offset = args[1]->Int32Value();",
          "613:   if (offset >= buffer->length_) {",
          "614:     return ThrowException(Exception::TypeError(String::New(",
          "615:             \"Offset is out of bounds\")));",
          "616:   }",
          "625:   char a, b, c, d;",
          "626:   char* start = buffer->data_ + offset;",
          "627:   char* dst = start;",
          "632:     int remaining = srcEnd - src;",
          "638:     if (remaining == 0 || *src == '=') break;",
          "639:     a = unbase64(*src++);",
          "645:     if (remaining <= 1 || *src == '=') break;",
          "646:     b = unbase64(*src++);",
          "653:     if (remaining <= 2 || *src == '=') break;",
          "654:     c = unbase64(*src++);",
          "661:     if (remaining <= 3 || *src == '=') break;",
          "662:     d = unbase64(*src++);",
          "664:   }",
          "666:   constructor_template->GetFunction()->Set(chars_written_sym,",
          "669:   return scope.Close(Integer::New(dst - start));",
          "670: }",
          "",
          "[Removed Lines]",
          "609:   if (offset == 0 && buffer->length_ == 0) {",
          "610:     return scope.Close(Integer::New(0));",
          "611:   }",
          "618:   const size_t size = base64_decoded_size(*s, s.length());",
          "619:   if (size > buffer->length_ - offset) {",
          "621:     return ThrowException(Exception::TypeError(String::New(",
          "622:             \"Buffer too small\")));",
          "623:   }",
          "628:   const char *src = *s;",
          "629:   const char *const srcEnd = src + s.length();",
          "631:   while (src < srcEnd) {",
          "634:     while (unbase64(*src) < 0 && src < srcEnd) {",
          "635:       src++;",
          "636:       remaining--;",
          "637:     }",
          "641:     while (unbase64(*src) < 0 && src < srcEnd) {",
          "642:       src++;",
          "643:       remaining--;",
          "644:     }",
          "649:     while (unbase64(*src) < 0 && src < srcEnd) {",
          "650:       src++;",
          "651:       remaining--;",
          "652:     }",
          "657:     while (unbase64(*src) < 0 && src < srcEnd) {",
          "658:       src++;",
          "659:       remaining--;",
          "660:     }",
          "667:                                            Integer::New(s.length()));",
          "",
          "[Added Lines]",
          "596:   size_t max_length = args[2]->IsUndefined() ? buffer->length_ - offset",
          "597:                                              : args[2]->Uint32Value();",
          "598:   max_length = MIN(s.length(), MIN(buffer->length_ - offset, max_length));",
          "608:   char* const dstEnd = dst + max_length;",
          "609:   const char* src = *s;",
          "610:   const char* const srcEnd = src + s.length();",
          "612:   while (src < srcEnd && dst < dstEnd) {",
          "615:     while (unbase64(*src) < 0 && src < srcEnd) src++, remaining--;",
          "619:     while (unbase64(*src) < 0 && src < srcEnd) src++, remaining--;",
          "624:     if (dst == dstEnd) break;",
          "626:     while (unbase64(*src) < 0 && src < srcEnd) src++, remaining--;",
          "631:     if (dst == dstEnd) break;",
          "633:     while (unbase64(*src) < 0 && src < srcEnd) src++, remaining--;",
          "641:                                            Integer::New(dst - start));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "759: void Buffer::Initialize(Handle<Object> target) {",
          "760:   HandleScope scope;",
          "762:   length_symbol = Persistent<String>::New(String::NewSymbol(\"length\"));",
          "763:   chars_written_sym = Persistent<String>::New(String::NewSymbol(\"_charsWritten\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737:   assert(unbase64('/') == 63);",
          "738:   assert(unbase64('+') == 62);",
          "739:   assert(unbase64('T') == 19);",
          "740:   assert(unbase64('Z') == 25);",
          "741:   assert(unbase64('t') == 45);",
          "742:   assert(unbase64('z') == 51);",
          "743:   assert(unbase64(' ') == -2);",
          "744:   assert(unbase64('\\n') == -2);",
          "745:   assert(unbase64('\\r') == -2);",
          "",
          "---------------"
        ],
        "test/simple/test-buffer.js||test/simple/test-buffer.js": [
          "File: test/simple/test-buffer.js -> test/simple/test-buffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "687: buf.write('0123456789', 'binary');",
          "688: assert.equal(Buffer._charsWritten, 9);",
          "689: buf.write('123456', 'base64');",
          "691: buf.write('00010203040506070809', 'hex');",
          "692: assert.equal(Buffer._charsWritten, 18);",
          "",
          "[Removed Lines]",
          "690: assert.equal(Buffer._charsWritten, 6);",
          "",
          "[Added Lines]",
          "690: assert.equal(Buffer._charsWritten, 4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "704: assert.equal(Buffer('99').length, 2);",
          "705: assert.equal(Buffer('13.37').length, 5);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: 'ascii utf8 hex base64 binary'.split(' ').forEach(function(enc) {",
          "709:   assert.equal(Buffer(1).write('aaaaaa', 0, 1, enc), 1);",
          "710: });",
          "713: var a = Buffer(3);",
          "714: var b = Buffer('xxx');",
          "715: a.write('aaaaaaaa', 'base64');",
          "716: assert.equal(b.toString(), 'xxx');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a72120190a8ffdbcd3d6ad2a2e6ceecd2087111e",
      "candidate_info": {
        "commit_hash": "a72120190a8ffdbcd3d6ad2a2e6ceecd2087111e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a72120190a8ffdbcd3d6ad2a2e6ceecd2087111e",
        "files": [
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.06.19, Version 0.7.12 (unstable)\n\n* npm: Upgrade to 1.1.30\n  - Improved 'npm init'\n  - Fix the 'cb never called' error from 'oudated' and 'update'\n  - Add --save-bundle|-B config\n  - Fix isaacs/npm#2465: Make npm script and windows shims cygwin-aware\n  - Fix isaacs/npm#2452 Use --save(-dev|-optional) in npm rm\n  - `logstream` option to replace removed `logfd` (Rod Vagg)\n  - Read default descriptions from README.md files\n\n* Shims to support deprecated ev_* and eio_* methods (Ben Noordhuis)\n\n* #3118 net.Socket: Delay pause/resume until after connect (isaacs)\n\n* #3465 Add ./configure --no-ifaddrs flag (isaacs)\n\n* child_process: add .stdin stream to forks (Fedor Indutny)\n\n* build: fix `make install DESTDIR=/path` (Ben Noordhuis)\n\n* tls: fix off-by-one error in renegotiation check (Ben Noordhuis)\n\n* crypto: Fix diffie-hellman key generation UTF-8 errors (Fedor Indutny)\n\n* node: change the constructor name of process from EventEmitter to process (Andreas Madsen)\n\n* net: Prevent property access throws during close (Reid Burke)\n\n* querystring: improved speed and code cleanup (Felix B\u00f6hm)\n\n* sunos: fix assertion errors breaking fs.watch() (Fedor Indutny)\n\n* unix: stat: detect sub-second changes (Ben Noordhuis)\n\n* add stat() based file watcher (Ben Noordhuis)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 7",
          "27: #define NODE_PATCH_VERSION 12",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca003f4f3ee9a8d44f941b046ca5a5a16b49a314",
      "candidate_info": {
        "commit_hash": "ca003f4f3ee9a8d44f941b046ca5a5a16b49a314",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ca003f4f3ee9a8d44f941b046ca5a5a16b49a314",
        "files": [
          "tools/license2rtf.js"
        ],
        "message": "license2rtf: collapse whitespace",
        "before_after_code_files": [
          "tools/license2rtf.js||tools/license2rtf.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/license2rtf.js||tools/license2rtf.js": [
          "File: tools/license2rtf.js -> tools/license2rtf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:       }",
          "211:     }",
          "213:     self.emit('data', paragraph);",
          "214:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     for (i = 0; i < lines.length; i++) {",
          "217:       lines[i] = lines[i].replace(/\\s+/g, ' ').replace(/\\s+$/, '');",
          "218:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}