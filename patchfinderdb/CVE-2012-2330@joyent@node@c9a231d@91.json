{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "26b11915b1c16440468a4b5f4b07d2409b98c68c",
      "candidate_info": {
        "commit_hash": "26b11915b1c16440468a4b5f4b07d2409b98c68c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/26b11915b1c16440468a4b5f4b07d2409b98c68c",
        "files": [
          "test/simple/test-domain.js"
        ],
        "message": "test-domain: fix the test to work on Windows\n\nOn Windows, full pathnames are stored in the Error object when\na file i/o error happens. This is not the case on Unix. Before\nthis fix the test would break because of these full paths.",
        "before_after_code_files": [
          "test/simple/test-domain.js||test/simple/test-domain.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-domain.js||test/simple/test-domain.js": [
          "File: test/simple/test-domain.js -> test/simple/test-domain.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: d.on('error', function(er) {",
          "36:   console.error('caught', er);",
          "38:     case 'emitted':",
          "39:       assert.equal(er.domain, d);",
          "40:       assert.equal(er.domain_emitter, e);",
          "",
          "[Removed Lines]",
          "37:   switch (er.message) {",
          "",
          "[Added Lines]",
          "38:   var er_message = er.message;",
          "39:   var er_path = er.path",
          "43:   if (typeof er_path === 'string') {",
          "44:     var slash = er_path.lastIndexOf('\\\\');",
          "45:     if (slash !== -1) {",
          "46:       var dir = er_path.slice(0, slash + 1);",
          "47:       er_path = er_path.replace(dir, '');",
          "48:       er_message = er_message.replace(dir, '');",
          "49:     }",
          "50:   }",
          "52:   switch (er_message) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:       assert.equal(typeof er.domain_bound, 'function');",
          "61:       assert.ok(!er.domain_emitter);",
          "62:       assert.equal(er.code, 'ENOENT');",
          "64:       assert.equal(typeof er.errno, 'number');",
          "65:       break;",
          "67:     case \"ENOENT, open 'stream for nonexistent file'\":",
          "68:       assert.equal(typeof er.errno, 'number');",
          "69:       assert.equal(er.code, 'ENOENT');",
          "71:       assert.equal(er.domain, d);",
          "72:       assert.equal(er.domain_emitter, fst);",
          "73:       assert.ok(!er.domain_bound);",
          "",
          "[Removed Lines]",
          "63:       assert.equal(er.path, 'this file does not exist');",
          "70:       assert.equal(er.path, 'stream for nonexistent file');",
          "",
          "[Added Lines]",
          "78:       assert.equal(er_path, 'this file does not exist');",
          "85:       assert.equal(er_path, 'stream for nonexistent file');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0d2795fe9501218dd8c953252fffe2d05d59c2a",
      "candidate_info": {
        "commit_hash": "b0d2795fe9501218dd8c953252fffe2d05d59c2a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b0d2795fe9501218dd8c953252fffe2d05d59c2a",
        "files": [
          "lib/child_process.js",
          "test/fixtures/child-process-message-and-exit.js",
          "test/simple/test-child-process-fork-close.js"
        ],
        "message": "child process: fix processes with IPC channel don't emit 'close'\n\nWith this patch the IPC socket is no longer available in the\nChildProcess.stdio array. This shouldn't be very problematic, since\nthis socket was effectively non-functional; it would never emit any\nevents.",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "test/fixtures/child-process-message-and-exit.js||test/fixtures/child-process-message-and-exit.js",
          "test/simple/test-child-process-fork-close.js||test/simple/test-child-process-fork-close.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:     } else {",
          "301:       this.buffering = false;",
          "302:       target.disconnect();",
          "303:     }",
          "304:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:       ipc = createPipe(true);",
          "746:       ipcFd = i;",
          "749:     } else if (typeof stdio === 'number' || typeof stdio.fd === 'number') {",
          "750:       acc.push({ type: 'fd', fd: stdio.fd || stdio });",
          "751:     } else if (getHandleWrapType(stdio) || getHandleWrapType(stdio.handle) ||",
          "",
          "[Removed Lines]",
          "748:       acc.push({ type: 'pipe', handle: ipc });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796:   stdio.forEach(function(stdio, i) {",
          "797:     if (stdio.type === 'ignore') return;",
          "799:     if (stdio.handle) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fixtures/child-process-message-and-exit.js||test/fixtures/child-process-message-and-exit.js": [
          "File: test/fixtures/child-process-message-and-exit.js -> test/fixtures/child-process-message-and-exit.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: process.send('hello');",
          "3: process.exit(0);",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-fork-close.js||test/simple/test-child-process-fork-close.js": [
          "File: test/simple/test-child-process-fork-close.js -> test/simple/test-child-process-fork-close.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var assert = require('assert'),",
          "23:     common = require('../common'),",
          "24:     fork = require('child_process').fork,",
          "25:     fork = require('child_process').fork;",
          "27: var cp = fork(common.fixturesDir + '/child-process-message-and-exit.js');",
          "29: var gotMessage = false,",
          "30:     gotExit = false,",
          "31:     gotClose = false;",
          "33: cp.on('message', function(message) {",
          "34:   assert(!gotMessage);",
          "35:   assert(!gotClose);",
          "36:   assert.strictEqual(message, 'hello');",
          "37:   gotMessage = true;",
          "38: });",
          "40: cp.on('exit', function() {",
          "41:   assert(!gotExit);",
          "42:   assert(!gotClose);",
          "43:   gotExit = true;",
          "44: });",
          "46: cp.on('close', function() {",
          "47:   assert(gotMessage);",
          "48:   assert(gotExit);",
          "49:   assert(!gotClose);",
          "50:   gotClose = true;",
          "51: });",
          "53: process.on('exit', function() {",
          "54:   assert(gotMessage);",
          "55:   assert(gotExit);",
          "56:   assert(gotClose);",
          "57: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f82b9f482f50c68064e4a27a03e05068b517516",
      "candidate_info": {
        "commit_hash": "6f82b9f482f50c68064e4a27a03e05068b517516",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6f82b9f482f50c68064e4a27a03e05068b517516",
        "files": [
          "src/node_file.cc"
        ],
        "message": "64bit offsets for fs calls",
        "before_after_code_files": [
          "src/node_file.cc||src/node_file.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: static Persistent<String> oncomplete_sym;",
          "106:   }",
          "110: static void After(uv_fs_t *req) {",
          "",
          "[Removed Lines]",
          "72: #ifndef _LARGEFILE_SOURCE",
          "73:   typedef off_t node_off_t;",
          "74: # define ASSERT_OFFSET(a) \\",
          "75:    STATIC_ASSERT(sizeof(node_off_t) * CHAR_BIT >= 32); \\",
          "76:    if (!(a)->IsUndefined() && !(a)->IsNull() && !(a)->IsInt32()) { \\",
          "77:      return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "78:    }",
          "79: # define ASSERT_TRUNCATE_LENGTH(a) \\",
          "80:    if (!(a)->IsUndefined() && !(a)->IsNull() && !(a)->IsUint32()) { \\",
          "81:      return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "82:    }",
          "83: # define GET_OFFSET(a) ((a)->IsNumber() ? (a)->Int32Value() : -1)",
          "84: # define GET_TRUNCATE_LENGTH(a) ((a)->Uint32Value())",
          "85: #else",
          "86: # ifdef _WIN32",
          "87: #   define NODE_USE_64BIT_UV_FS_API",
          "88:     typedef int64_t node_off_t;",
          "89: # else",
          "90:     typedef off_t node_off_t;",
          "91: # endif",
          "92: # define ASSERT_OFFSET(a) \\",
          "93:    STATIC_ASSERT(sizeof(node_off_t) * CHAR_BIT >= 64); \\",
          "94:    if (!(a)->IsUndefined() && !(a)->IsNull() && !IsInt64((a)->NumberValue())) { \\",
          "95:      return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "96:    }",
          "97: # define ASSERT_TRUNCATE_LENGTH(a) \\",
          "98:    if (!(a)->IsUndefined() && !(a)->IsNull() && !IsInt64((a)->NumberValue())) { \\",
          "99:      return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "100:    }",
          "101: # define GET_OFFSET(a) ((a)->IsNumber() ? (a)->IntegerValue() : -1)",
          "102: # define GET_TRUNCATE_LENGTH(a) ((a)->IntegerValue())",
          "104:   static inline int IsInt64(double x) {",
          "105:     return x == static_cast<double>(static_cast<int64_t>(x));",
          "107: #endif",
          "",
          "[Added Lines]",
          "72: #define ASSERT_OFFSET(a) \\",
          "73:   if (!(a)->IsUndefined() && !(a)->IsNull() && !IsInt64((a)->NumberValue())) { \\",
          "74:     return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "76: #define ASSERT_TRUNCATE_LENGTH(a) \\",
          "77:   if (!(a)->IsUndefined() && !(a)->IsNull() && !IsInt64((a)->NumberValue())) { \\",
          "78:     return ThrowException(Exception::TypeError(String::New(\"Not an integer\"))); \\",
          "79:   }",
          "80: #define GET_OFFSET(a) ((a)->IsNumber() ? (a)->IntegerValue() : -1)",
          "81: #define GET_TRUNCATE_LENGTH(a) ((a)->IntegerValue())",
          "83: static inline int IsInt64(double x) {",
          "84:   return x == static_cast<double>(static_cast<int64_t>(x));",
          "85: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:   int fd = args[0]->Int32Value();",
          "517:   ASSERT_TRUNCATE_LENGTH(args[1]);",
          "520:   if (args[2]->IsFunction()) {",
          "521: #ifdef NODE_USE_64BIT_UV_FS_API",
          "",
          "[Removed Lines]",
          "518:   node_off_t len = GET_TRUNCATE_LENGTH(args[1]);",
          "",
          "[Added Lines]",
          "496:   int64_t len = GET_TRUNCATE_LENGTH(args[1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "738:   }",
          "740:   ASSERT_OFFSET(args[4]);",
          "743:   char * buf = (char*)buffer_data + off;",
          "744:   Local<Value> cb = args[5];",
          "",
          "[Removed Lines]",
          "741:   node_off_t pos = GET_OFFSET(args[4]);",
          "",
          "[Added Lines]",
          "719:   int64_t pos = GET_OFFSET(args[4]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "783:   Local<Value> cb;",
          "785:   size_t len;",
          "788:   char * buf = NULL;",
          "",
          "[Removed Lines]",
          "786:   node_off_t pos;",
          "",
          "[Added Lines]",
          "764:   int64_t pos;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26f1bc8e8c7e640376a911356d48d5fc7e8a433f",
      "candidate_info": {
        "commit_hash": "26f1bc8e8c7e640376a911356d48d5fc7e8a433f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/26f1bc8e8c7e640376a911356d48d5fc7e8a433f",
        "files": [
          "src/node_crypto.cc"
        ],
        "message": "crypto: fix DecipherUpdate() memory leak\n\nFix a memory leak in the the code path that deals with partial hex strings.",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2641:         char* complete_hex = new char[len+2];",
          "2642:         memcpy(complete_hex, &cipher->incomplete_hex, 1);",
          "2643:         memcpy(complete_hex+1, buf, len);",
          "2648:         buf = complete_hex;",
          "2649:         len += 1;",
          "2650:       }",
          "",
          "[Removed Lines]",
          "2644:         if (alloc_buf) {",
          "2645:           delete [] buf;",
          "2646:           alloc_buf = false;",
          "2647:         }",
          "",
          "[Added Lines]",
          "2644:         if (alloc_buf) delete [] buf;",
          "2645:         alloc_buf = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78dc13fbf97e2e3003e6f3baacdd5ff60e8de3f7",
      "candidate_info": {
        "commit_hash": "78dc13fbf97e2e3003e6f3baacdd5ff60e8de3f7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/78dc13fbf97e2e3003e6f3baacdd5ff60e8de3f7",
        "files": [
          "lib/events.js",
          "test/simple/test-event-emitter-remove-all-listeners.js"
        ],
        "message": "events: don't delete the listeners array\n\nThe documentation implies that .removeAllListeners() leaves the listeners array\nuntouched. Make it so.",
        "before_after_code_files": [
          "lib/events.js||lievents.js",
          "test/simple/test-event-emitter-remove-all-listeners.js||test/simple/test-event-emitter-remove-all-listeners.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/events.js||lievents.js": [
          "File: lib/events.js -> lievents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     return this;",
          "204:   }",
          "208:   return this;",
          "209: };",
          "",
          "[Removed Lines]",
          "207:   if (type && this._events && this._events[type]) this._events[type] = null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-event-emitter-remove-all-listeners.js||test/simple/test-event-emitter-remove-all-listeners.js": [
          "File: test/simple/test-event-emitter-remove-all-listeners.js -> test/simple/test-event-emitter-remove-all-listeners.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: var e1 = new events.EventEmitter();",
          "30: e1.on('foo', listener);",
          "31: e1.on('bar', listener);",
          "32: e1.removeAllListeners('foo');",
          "37: var e2 = new events.EventEmitter();",
          "38: e2.on('foo', listener);",
          "",
          "[Removed Lines]",
          "33: assert.deepEqual([], e1.listeners('foo'));",
          "34: assert.deepEqual([listener], e1.listeners('bar'));",
          "",
          "[Added Lines]",
          "32: var fooListeners = e1.listeners('foo');",
          "33: var barListeners = e1.listeners('bar');",
          "35: assert.deepEqual(e1.listeners('foo'), []);",
          "36: assert.deepEqual(e1.listeners('bar'), [listener]);",
          "38: assert.equal(e1.listeners('foo'), fooListeners);",
          "39: assert.equal(e1.listeners('bar'), barListeners);",
          "",
          "---------------"
        ]
      }
    }
  ]
}