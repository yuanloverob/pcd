{
  "cve_id": "CVE-2017-9226",
  "cve_desc": "An issue was discovered in Oniguruma 6.2.0, as used in Oniguruma-mod in Ruby through 2.4.1 and mbstring in PHP through 7.1.5. A heap out-of-bounds write or read occurs in next_state_val() during regular expression compilation. Octal numbers larger than 0xff are not handled correctly in fetch_token() and fetch_token_in_cc(). A malformed regular expression containing an octal number in the form of '\\700' would produce an invalid code point value larger than 0xff in next_state_val(), resulting in an out-of-bounds write memory corruption.",
  "repo": "kkos/oniguruma",
  "patch_hash": "f015fbdd95f76438cd86366467bb2b39870dd7c6",
  "patch_info": {
    "commit_hash": "f015fbdd95f76438cd86366467bb2b39870dd7c6",
    "repo": "kkos/oniguruma",
    "commit_url": "https://github.com/kkos/oniguruma/commit/f015fbdd95f76438cd86366467bb2b39870dd7c6",
    "files": [
      "src/regparse.c"
    ],
    "message": "fix #55 : Byte value expressed in octal must be smaller than 256",
    "before_after_code_files": [
      "src/regparse.c||src/regparse.c"
    ]
  },
  "patch_diff": {
    "src/regparse.c||src/regparse.c": [
      "File: src/regparse.c -> src/regparse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3020:         PUNFETCH;",
      "3021:         prev = p;",
      "3022:         num = scan_unsigned_octal_number(&p, end, 3, enc);",
      "3026:         }",
      "",
      "[Removed Lines]",
      "3023:         if (num < 0) return ONIGERR_TOO_BIG_NUMBER;",
      "",
      "[Added Lines]",
      "3023:         if (num < 0 || num >= 256) return ONIGERR_TOO_BIG_NUMBER;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3392:       if (IS_SYNTAX_OP(syn, ONIG_SYN_OP_ESC_OCTAL3)) {",
      "3393:         prev = p;",
      "3394:         num = scan_unsigned_octal_number(&p, end, (c == '0' ? 2:3), enc);",
      "3398:         }",
      "",
      "[Removed Lines]",
      "3395:         if (num < 0) return ONIGERR_TOO_BIG_NUMBER;",
      "",
      "[Added Lines]",
      "3395:         if (num < 0 || num >= 256) return ONIGERR_TOO_BIG_NUMBER;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4bf968ad52afe14e60a2dc8a95d3555c543353a",
      "candidate_info": {
        "commit_hash": "b4bf968ad52afe14e60a2dc8a95d3555c543353a",
        "repo": "kkos/oniguruma",
        "commit_url": "https://github.com/kkos/oniguruma/commit/b4bf968ad52afe14e60a2dc8a95d3555c543353a",
        "files": [
          "src/regparse.c"
        ],
        "message": "fix #55 : check too big code point value for single byte value in next_state_val()",
        "before_after_code_files": [
          "src/regparse.c||src/regparse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "src/regparse.c||src/regparse.c"
          ],
          "candidate": [
            "src/regparse.c||src/regparse.c"
          ]
        }
      },
      "candidate_diff": {
        "src/regparse.c||src/regparse.c": [
          "File: src/regparse.c -> src/regparse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4044:   switch (*state) {",
          "4045:   case CCS_VALUE:",
          "4046:     if (*type == CCV_SB) {",
          "4047:       BITSET_SET_BIT(cc->bs, (int )(*vs));",
          "4048:     }",
          "4049:     else if (*type == CCV_CODE_POINT) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4047:       if (*vs > 0xff)",
          "4048:           return ONIGERR_INVALID_CODE_POINT_VALUE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}