{
  "cve_id": "CVE-2013-4350",
  "cve_desc": "The IPv6 SCTP implementation in net/sctp/ipv6.c in the Linux kernel through 3.11.1 uses data structures and function calls that do not trigger an intended configuration of IPsec encryption, which allows remote attackers to obtain sensitive information by sniffing the network.",
  "repo": "torvalds/linux",
  "patch_hash": "95ee62083cb6453e056562d91f597552021e6ae7",
  "patch_info": {
    "commit_hash": "95ee62083cb6453e056562d91f597552021e6ae7",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/95ee62083cb6453e056562d91f597552021e6ae7",
    "files": [
      "net/sctp/ipv6.c"
    ],
    "message": "net: sctp: fix ipv6 ipsec encryption bug in sctp_v6_xmit\n\nAlan Chester reported an issue with IPv6 on SCTP that IPsec traffic is not\nbeing encrypted, whereas on IPv4 it is. Setting up an AH + ESP transport\ndoes not seem to have the desired effect:\n\nSCTP + IPv4:\n\n  22:14:20.809645 IP (tos 0x2,ECT(0), ttl 64, id 0, offset 0, flags [DF], proto AH (51), length 116)\n    192.168.0.2 > 192.168.0.5: AH(spi=0x00000042,sumlen=16,seq=0x1): ESP(spi=0x00000044,seq=0x1), length 72\n  22:14:20.813270 IP (tos 0x2,ECT(0), ttl 64, id 0, offset 0, flags [DF], proto AH (51), length 340)\n    192.168.0.5 > 192.168.0.2: AH(spi=0x00000043,sumlen=16,seq=0x1):\n\nSCTP + IPv6:\n\n  22:31:19.215029 IP6 (class 0x02, hlim 64, next-header SCTP (132) payload length: 364)\n    fe80::222:15ff:fe87:7fc.3333 > fe80::92e6:baff:fe0d:5a54.36767: sctp\n    1) [INIT ACK] [init tag: 747759530] [rwnd: 62464] [OS: 10] [MIS: 10]\n\nMoreover, Alan says:\n\n  This problem was seen with both Racoon and Racoon2. Other people have seen\n  this with OpenSwan. When IPsec is configured to encrypt all upper layer\n  protocols the SCTP connection does not initialize. After using Wireshark to\n  follow packets, this is because the SCTP packet leaves Box A unencrypted and\n  Box B believes all upper layer protocols are to be encrypted so it drops\n  this packet, causing the SCTP connection to fail to initialize. When IPsec\n  is configured to encrypt just SCTP, the SCTP packets are observed unencrypted.\n\nIn fact, using `socat sctp6-listen:3333 -` on one end and transferring \"plaintext\"\nstring on the other end, results in cleartext on the wire where SCTP eventually\ndoes not report any errors, thus in the latter case that Alan reports, the\nnon-paranoid user might think he's communicating over an encrypted transport on\nSCTP although he's not (tcpdump ... -X):\n\n  ...\n  0x0030: 5d70 8e1a 0003 001a 177d eb6c 0000 0000  ]p.......}.l....\n  0x0040: 0000 0000 706c 6169 6e74 6578 740a 0000  ....plaintext...\n\nOnly in /proc/net/xfrm_stat we can see XfrmInTmplMismatch increasing on the\nreceiver side. Initial follow-up analysis from Alan's bug report was done by\nAlexey Dobriyan. Also thanks to Vlad Yasevich for feedback on this.\n\nSCTP has its own implementation of sctp_v6_xmit() not calling inet6_csk_xmit().\nThis has the implication that it probably never really got updated along with\nchanges in inet6_csk_xmit() and therefore does not seem to invoke xfrm handlers.\n\nSCTP's IPv4 xmit however, properly calls ip_queue_xmit() to do the work. Since\na call to inet6_csk_xmit() would solve this problem, but result in unecessary\nroute lookups, let us just use the cached flowi6 instead that we got through\nsctp_v6_get_dst(). Since all SCTP packets are being sent through sctp_packet_transmit(),\nwe do the route lookup / flow caching in sctp_transport_route(), hold it in\ntp->dst and skb_dst_set() right after that. If we would alter fl6->daddr in\nsctp_v6_xmit() to np->opt->srcrt, we possibly could run into the same effect\nof not having xfrm layer pick it up, hence, use fl6_update_dst() in sctp_v6_get_dst()\ninstead to get the correct source routed dst entry, which we assign to the skb.\n\nAlso source address routing example from 625034113 (\"sctp: fix sctp to work with\nipv6 source address routing\") still works with this patch! Nevertheless, in RFC5095\nit is actually 'recommended' to not use that anyway due to traffic amplification [1].\nSo it seems we're not supposed to do that anyway in sctp_v6_xmit(). Moreover, if\nwe overwrite the flow destination here, the lower IPv6 layer will be unable to\nput the correct destination address into IP header, as routing header is added in\nipv6_push_nfrag_opts() but then probably with wrong final destination. Things aside,\nresult of this patch is that we do not have any XfrmInTmplMismatch increase plus on\nthe wire with this patch it now looks like:\n\nSCTP + IPv6:\n\n  08:17:47.074080 IP6 2620:52:0:102f:7a2b:cbff:fe27:1b0a > 2620:52:0:102f:213:72ff:fe32:7eba:\n    AH(spi=0x00005fb4,seq=0x1): ESP(spi=0x00005fb5,seq=0x1), length 72\n  08:17:47.074264 IP6 2620:52:0:102f:213:72ff:fe32:7eba > 2620:52:0:102f:7a2b:cbff:fe27:1b0a:\n    AH(spi=0x00003d54,seq=0x1): ESP(spi=0x00003d55,seq=0x1), length 296\n\nThis fixes Kernel Bugzilla 24412. This security issue seems to be present since\n2.6.18 kernels. Lets just hope some big passive adversary in the wild didn't have\nits fun with that. lksctp-tools IPv6 regression test suite passes as well with\nthis patch.\n\n [1] http://www.secdev.org/conf/IPv6_RH_security-csw07.pdf\n\nReported-by: Alan Chester <alan.chester@tekelec.com>\nReported-by: Alexey Dobriyan <adobriyan@gmail.com>\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nCc: Steffen Klassert <steffen.klassert@secunet.com>\nCc: Hannes Frederic Sowa <hannes@stressinduktion.org>\nAcked-by: Vlad Yasevich <vyasevich@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/sctp/ipv6.c||net/sctp/ipv6.c"
    ]
  },
  "patch_diff": {
    "net/sctp/ipv6.c||net/sctp/ipv6.c": [
      "File: net/sctp/ipv6.c -> net/sctp/ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "204:   in6_dev_put(idev);",
      "205: }",
      "208: static int sctp_v6_xmit(struct sk_buff *skb, struct sctp_transport *transport)",
      "209: {",
      "210:  struct sock *sk = skb->sk;",
      "211:  struct ipv6_pinfo *np = inet6_sk(sk);",
      "236:  pr_debug(\"%s: skb:%p, len:%d, src:%pI6 dst:%pI6\\n\", __func__, skb,",
      "241:  if (!(transport->param_flags & SPP_PMTUD_ENABLE))",
      "242:   skb->local_df = 1;",
      "245: }",
      "",
      "[Removed Lines]",
      "212:  struct flowi6 fl6;",
      "214:  memset(&fl6, 0, sizeof(fl6));",
      "216:  fl6.flowi6_proto = sk->sk_protocol;",
      "221:  fl6.daddr = transport->ipaddr.v6.sin6_addr;",
      "222:  fl6.saddr = transport->saddr.v6.sin6_addr;",
      "224:  fl6.flowlabel = np->flow_label;",
      "225:  IP6_ECN_flow_xmit(sk, fl6.flowlabel);",
      "226:  if (ipv6_addr_type(&fl6.saddr) & IPV6_ADDR_LINKLOCAL)",
      "227:   fl6.flowi6_oif = transport->saddr.v6.sin6_scope_id;",
      "228:  else",
      "229:   fl6.flowi6_oif = sk->sk_bound_dev_if;",
      "231:  if (np->opt && np->opt->srcrt) {",
      "232:   struct rt0_hdr *rt0 = (struct rt0_hdr *) np->opt->srcrt;",
      "233:   fl6.daddr = *rt0->addr;",
      "234:  }",
      "237:    skb->len, &fl6.saddr, &fl6.daddr);",
      "239:  SCTP_INC_STATS(sock_net(sk), SCTP_MIB_OUTSCTPPACKS);",
      "244:  return ip6_xmit(sk, skb, &fl6, np->opt, np->tclass);",
      "",
      "[Added Lines]",
      "211:  struct flowi6 *fl6 = &transport->fl.u.ip6;",
      "214:    skb->len, &fl6->saddr, &fl6->daddr);",
      "216:  IP6_ECN_flow_xmit(sk, fl6->flowlabel);",
      "221:  SCTP_INC_STATS(sock_net(sk), SCTP_MIB_OUTSCTPPACKS);",
      "223:  return ip6_xmit(sk, skb, fl6, np->opt, np->tclass);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "254:  struct dst_entry *dst = NULL;",
      "255:  struct flowi6 *fl6 = &fl->u.ip6;",
      "256:  struct sctp_bind_addr *bp;",
      "257:  struct sctp_sockaddr_entry *laddr;",
      "258:  union sctp_addr *baddr = NULL;",
      "259:  union sctp_addr *daddr = &t->ipaddr;",
      "260:  union sctp_addr dst_saddr;",
      "261:  __u8 matchlen = 0;",
      "262:  __u8 bmatchlen;",
      "263:  sctp_scope_t scope;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:  struct ipv6_pinfo *np = inet6_sk(sk);",
      "241:  struct in6_addr *final_p, final;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "281:   pr_debug(\"src=%pI6 - \", &fl6->saddr);",
      "282:  }",
      "285:  if (!asoc || saddr)",
      "286:   goto out;",
      "",
      "[Removed Lines]",
      "284:  dst = ip6_dst_lookup_flow(sk, fl6, NULL, false);",
      "",
      "[Added Lines]",
      "265:  final_p = fl6_update_dst(fl6, np->opt, &final);",
      "266:  dst = ip6_dst_lookup_flow(sk, fl6, final_p, false);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "333:   }",
      "334:  }",
      "335:  rcu_read_unlock();",
      "336:  if (baddr) {",
      "337:   fl6->saddr = baddr->v6.sin6_addr;",
      "338:   fl6->fl6_sport = baddr->v6.sin6_port;",
      "340:  }",
      "342: out:",
      "",
      "[Removed Lines]",
      "339:   dst = ip6_dst_lookup_flow(sk, fl6, NULL, false);",
      "",
      "[Added Lines]",
      "322:   final_p = fl6_update_dst(fl6, np->opt, &final);",
      "323:   dst = ip6_dst_lookup_flow(sk, fl6, final_p, false);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0e0d44ab4275549998567cd4700b43f7496eb62b",
      "candidate_info": {
        "commit_hash": "0e0d44ab4275549998567cd4700b43f7496eb62b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0e0d44ab4275549998567cd4700b43f7496eb62b",
        "files": [
          "include/net/flow.h",
          "include/net/ipv6.h",
          "include/net/route.h",
          "net/dccp/ipv4.c",
          "net/dccp/ipv6.c",
          "net/decnet/dn_route.c",
          "net/ipv4/af_inet.c",
          "net/ipv4/datagram.c",
          "net/ipv4/raw.c",
          "net/ipv4/tcp_ipv4.c",
          "net/ipv4/udp.c",
          "net/ipv6/af_inet6.c",
          "net/ipv6/datagram.c",
          "net/ipv6/inet6_connection_sock.c",
          "net/ipv6/ip6_output.c",
          "net/ipv6/ping.c",
          "net/ipv6/raw.c",
          "net/ipv6/syncookies.c",
          "net/ipv6/tcp_ipv6.c",
          "net/ipv6/udp.c",
          "net/l2tp/l2tp_ip6.c",
          "net/sctp/ipv6.c"
        ],
        "message": "net: Remove FLOWI_FLAG_CAN_SLEEP\n\nFLOWI_FLAG_CAN_SLEEP was used to notify xfrm about the posibility\nto sleep until the needed states are resolved. This code is gone,\nso FLOWI_FLAG_CAN_SLEEP is not needed anymore.\n\nSigned-off-by: Steffen Klassert <steffen.klassert@secunet.com>",
        "before_after_code_files": [
          "include/net/flow.h||include/net/flow.h",
          "include/net/ipv6.h||include/net/ipv6.h",
          "include/net/route.h||include/net/route.h",
          "net/dccp/ipv4.c||net/dccp/ipv4.c",
          "net/dccp/ipv6.c||net/dccp/ipv6.c",
          "net/decnet/dn_route.c||net/decnet/dn_route.c",
          "net/ipv4/af_inet.c||net/ipv4/af_inet.c",
          "net/ipv4/datagram.c||net/ipv4/datagram.c",
          "net/ipv4/raw.c||net/ipv4/raw.c",
          "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c",
          "net/ipv4/udp.c||net/ipv4/udp.c",
          "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c",
          "net/ipv6/datagram.c||net/ipv6/datagram.c",
          "net/ipv6/inet6_connection_sock.c||net/ipv6/inet6_connection_sock.c",
          "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c",
          "net/ipv6/ping.c||net/ipv6/ping.c",
          "net/ipv6/raw.c||net/ipv6/raw.c",
          "net/ipv6/syncookies.c||net/ipv6/syncookies.c",
          "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
          "net/ipv6/udp.c||net/ipv6/udp.c",
          "net/l2tp/l2tp_ip6.c||net/l2tp/l2tp_ip6.c",
          "net/sctp/ipv6.c||net/sctp/ipv6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/sctp/ipv6.c||net/sctp/ipv6.c"
          ],
          "candidate": [
            "net/sctp/ipv6.c||net/sctp/ipv6.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/flow.h||include/net/flow.h": [
          "File: include/net/flow.h -> include/net/flow.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  __u8 flowic_proto;",
          "21:  __u8 flowic_flags;",
          "22: #define FLOWI_FLAG_ANYSRC  0x01",
          "25:  __u32 flowic_secid;",
          "26: };",
          "",
          "[Removed Lines]",
          "23: #define FLOWI_FLAG_CAN_SLEEP  0x02",
          "24: #define FLOWI_FLAG_KNOWN_NH  0x04",
          "",
          "[Added Lines]",
          "23: #define FLOWI_FLAG_KNOWN_NH  0x02",
          "",
          "---------------"
        ],
        "include/net/ipv6.h||include/net/ipv6.h": [
          "File: include/net/ipv6.h -> include/net/ipv6.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "712: int ip6_dst_lookup(struct sock *sk, struct dst_entry **dst, struct flowi6 *fl6);",
          "713: struct dst_entry *ip6_dst_lookup_flow(struct sock *sk, struct flowi6 *fl6,",
          "716: struct dst_entry *ip6_sk_dst_lookup_flow(struct sock *sk, struct flowi6 *fl6,",
          "719: struct dst_entry *ip6_blackhole_route(struct net *net,",
          "720:           struct dst_entry *orig_dst);",
          "",
          "[Removed Lines]",
          "714:           const struct in6_addr *final_dst,",
          "715:           bool can_sleep);",
          "717:       const struct in6_addr *final_dst,",
          "718:       bool can_sleep);",
          "",
          "[Added Lines]",
          "714:           const struct in6_addr *final_dst);",
          "716:       const struct in6_addr *final_dst);",
          "",
          "---------------"
        ],
        "include/net/route.h||include/net/route.h": [
          "File: include/net/route.h -> include/net/route.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: static inline void ip_route_connect_init(struct flowi4 *fl4, __be32 dst, __be32 src,",
          "240:       u32 tos, int oif, u8 protocol,",
          "241:       __be16 sport, __be16 dport,",
          "243: {",
          "244:  __u8 flow_flags = 0;",
          "246:  if (inet_sk(sk)->transparent)",
          "247:   flow_flags |= FLOWI_FLAG_ANYSRC;",
          "251:  flowi4_init_output(fl4, oif, sk->sk_mark, tos, RT_SCOPE_UNIVERSE,",
          "252:       protocol, flow_flags, dst, src, dport, sport);",
          "",
          "[Removed Lines]",
          "242:       struct sock *sk, bool can_sleep)",
          "248:  if (can_sleep)",
          "249:   flow_flags |= FLOWI_FLAG_CAN_SLEEP;",
          "",
          "[Added Lines]",
          "242:       struct sock *sk)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:            __be32 dst, __be32 src, u32 tos,",
          "257:            int oif, u8 protocol,",
          "258:            __be16 sport, __be16 dport,",
          "260: {",
          "261:  struct net *net = sock_net(sk);",
          "262:  struct rtable *rt;",
          "264:  ip_route_connect_init(fl4, dst, src, tos, oif, protocol,",
          "267:  if (!dst || !src) {",
          "268:   rt = __ip_route_output_key(net, fl4);",
          "",
          "[Removed Lines]",
          "259:            struct sock *sk, bool can_sleep)",
          "265:          sport, dport, sk, can_sleep);",
          "",
          "[Added Lines]",
          "257:            struct sock *sk)",
          "263:          sport, dport, sk);",
          "",
          "---------------"
        ],
        "net/dccp/ipv4.c||net/dccp/ipv4.c": [
          "File: net/dccp/ipv4.c -> net/dccp/ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  rt = ip_route_connect(fl4, nexthop, inet->inet_saddr,",
          "76:          RT_CONN_FLAGS(sk), sk->sk_bound_dev_if,",
          "77:          IPPROTO_DCCP,",
          "79:  if (IS_ERR(rt))",
          "80:   return PTR_ERR(rt);",
          "",
          "[Removed Lines]",
          "78:          orig_sport, orig_dport, sk, true);",
          "",
          "[Added Lines]",
          "78:          orig_sport, orig_dport, sk);",
          "",
          "---------------"
        ],
        "net/dccp/ipv6.c||net/dccp/ipv6.c": [
          "File: net/dccp/ipv6.c -> net/dccp/ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:  final_p = fl6_update_dst(&fl6, np->opt, &final);",
          "241:  if (IS_ERR(dst)) {",
          "242:   err = PTR_ERR(dst);",
          "243:   dst = NULL;",
          "",
          "[Removed Lines]",
          "240:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p, false);",
          "",
          "[Added Lines]",
          "240:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301:  security_skb_classify_flow(rxskb, flowi6_to_flowi(&fl6));",
          "305:  if (!IS_ERR(dst)) {",
          "306:   skb_dst_set(skb, dst);",
          "307:   ip6_xmit(ctl_sk, skb, &fl6, NULL, 0);",
          "",
          "[Removed Lines]",
          "304:  dst = ip6_dst_lookup_flow(ctl_sk, &fl6, NULL, false);",
          "",
          "[Added Lines]",
          "304:  dst = ip6_dst_lookup_flow(ctl_sk, &fl6, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "512:   fl6.fl6_sport = htons(ireq->ir_num);",
          "513:   security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
          "516:   if (IS_ERR(dst))",
          "517:    goto out;",
          "518:  }",
          "",
          "[Removed Lines]",
          "515:   dst = ip6_dst_lookup_flow(sk, &fl6, final_p, false);",
          "",
          "[Added Lines]",
          "515:   dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "933:  final_p = fl6_update_dst(&fl6, np->opt, &final);",
          "936:  if (IS_ERR(dst)) {",
          "937:   err = PTR_ERR(dst);",
          "938:   goto failure;",
          "",
          "[Removed Lines]",
          "935:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p, true);",
          "",
          "[Added Lines]",
          "935:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------"
        ],
        "net/decnet/dn_route.c||net/decnet/dn_route.c": [
          "File: net/decnet/dn_route.c -> net/decnet/dn_route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1289:  err = __dn_route_output_key(pprt, fl, flags & MSG_TRYHARD);",
          "1290:  if (err == 0 && fl->flowidn_proto) {",
          "1294:         flowidn_to_flowi(fl), sk, 0);",
          "1295:   if (IS_ERR(*pprt)) {",
          "",
          "[Removed Lines]",
          "1291:   if (!(flags & MSG_DONTWAIT))",
          "1292:    fl->flowidn_flags |= FLOWI_FLAG_CAN_SLEEP;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/ipv4/af_inet.c||net/ipv4/af_inet.c": [
          "File: net/ipv4/af_inet.c -> net/ipv4/af_inet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1133:  fl4 = &inet->cork.fl.u.ip4;",
          "1134:  rt = ip_route_connect(fl4, daddr, 0, RT_CONN_FLAGS(sk),",
          "1135:          sk->sk_bound_dev_if, sk->sk_protocol,",
          "1137:  if (IS_ERR(rt))",
          "1138:   return PTR_ERR(rt);",
          "",
          "[Removed Lines]",
          "1136:          inet->inet_sport, inet->inet_dport, sk, false);",
          "",
          "[Added Lines]",
          "1136:          inet->inet_sport, inet->inet_dport, sk);",
          "",
          "---------------"
        ],
        "net/ipv4/datagram.c||net/ipv4/datagram.c": [
          "File: net/ipv4/datagram.c -> net/ipv4/datagram.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:  rt = ip_route_connect(fl4, usin->sin_addr.s_addr, saddr,",
          "54:          RT_CONN_FLAGS(sk), oif,",
          "55:          sk->sk_protocol,",
          "57:  if (IS_ERR(rt)) {",
          "58:   err = PTR_ERR(rt);",
          "59:   if (err == -ENETUNREACH)",
          "",
          "[Removed Lines]",
          "56:          inet->inet_sport, usin->sin_port, sk, true);",
          "",
          "[Added Lines]",
          "56:          inet->inet_sport, usin->sin_port, sk);",
          "",
          "---------------"
        ],
        "net/ipv4/raw.c||net/ipv4/raw.c": [
          "File: net/ipv4/raw.c -> net/ipv4/raw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:  flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,",
          "576:       RT_SCOPE_UNIVERSE,",
          "577:       inet->hdrincl ? IPPROTO_RAW : sk->sk_protocol,",
          "579:        (inet->hdrincl ? FLOWI_FLAG_KNOWN_NH : 0),",
          "580:       daddr, saddr, 0, 0);",
          "",
          "[Removed Lines]",
          "578:       inet_sk_flowi_flags(sk) | FLOWI_FLAG_CAN_SLEEP |",
          "",
          "[Added Lines]",
          "578:       inet_sk_flowi_flags(sk) |",
          "",
          "---------------"
        ],
        "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c": [
          "File: net/ipv4/tcp_ipv4.c -> net/ipv4/tcp_ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:  rt = ip_route_connect(fl4, nexthop, inet->inet_saddr,",
          "174:          RT_CONN_FLAGS(sk), sk->sk_bound_dev_if,",
          "175:          IPPROTO_TCP,",
          "177:  if (IS_ERR(rt)) {",
          "178:   err = PTR_ERR(rt);",
          "179:   if (err == -ENETUNREACH)",
          "",
          "[Removed Lines]",
          "176:          orig_sport, orig_dport, sk, true);",
          "",
          "[Added Lines]",
          "176:          orig_sport, orig_dport, sk);",
          "",
          "---------------"
        ],
        "net/ipv4/udp.c||net/ipv4/udp.c": [
          "File: net/ipv4/udp.c -> net/ipv4/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "990:   fl4 = &fl4_stack;",
          "991:   flowi4_init_output(fl4, ipc.oif, sk->sk_mark, tos,",
          "992:        RT_SCOPE_UNIVERSE, sk->sk_protocol,",
          "994:        faddr, saddr, dport, inet->inet_sport);",
          "996:   security_sk_classify_flow(sk, flowi4_to_flowi(fl4));",
          "",
          "[Removed Lines]",
          "993:        inet_sk_flowi_flags(sk)|FLOWI_FLAG_CAN_SLEEP,",
          "",
          "[Added Lines]",
          "993:        inet_sk_flowi_flags(sk),",
          "",
          "---------------"
        ],
        "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c": [
          "File: net/ipv6/af_inet6.c -> net/ipv6/af_inet6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662:   final_p = fl6_update_dst(&fl6, np->opt, &final);",
          "665:   if (IS_ERR(dst)) {",
          "666:    sk->sk_route_caps = 0;",
          "667:    sk->sk_err_soft = -PTR_ERR(dst);",
          "",
          "[Removed Lines]",
          "664:   dst = ip6_dst_lookup_flow(sk, &fl6, final_p, false);",
          "",
          "[Added Lines]",
          "664:   dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------"
        ],
        "net/ipv6/datagram.c||net/ipv6/datagram.c": [
          "File: net/ipv6/datagram.c -> net/ipv6/datagram.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:  opt = flowlabel ? flowlabel->opt : np->opt;",
          "172:  final_p = fl6_update_dst(&fl6, opt, &final);",
          "175:  err = 0;",
          "176:  if (IS_ERR(dst)) {",
          "177:   err = PTR_ERR(dst);",
          "",
          "[Removed Lines]",
          "174:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p, true);",
          "",
          "[Added Lines]",
          "174:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------"
        ],
        "net/ipv6/inet6_connection_sock.c||net/ipv6/inet6_connection_sock.c": [
          "File: net/ipv6/inet6_connection_sock.c -> net/ipv6/inet6_connection_sock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  fl6->fl6_sport = htons(ireq->ir_num);",
          "87:  security_req_classify_flow(req, flowi6_to_flowi(fl6));",
          "90:  if (IS_ERR(dst))",
          "91:   return NULL;",
          "",
          "[Removed Lines]",
          "89:  dst = ip6_dst_lookup_flow(sk, fl6, final_p, false);",
          "",
          "[Added Lines]",
          "89:  dst = ip6_dst_lookup_flow(sk, fl6, final_p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:  dst = __inet6_csk_dst_check(sk, np->dst_cookie);",
          "218:  if (!dst) {",
          "221:   if (!IS_ERR(dst))",
          "222:    __inet6_csk_dst_store(sk, dst, NULL, NULL);",
          "",
          "[Removed Lines]",
          "219:   dst = ip6_dst_lookup_flow(sk, fl6, final_p, false);",
          "",
          "[Added Lines]",
          "219:   dst = ip6_dst_lookup_flow(sk, fl6, final_p);",
          "",
          "---------------"
        ],
        "net/ipv6/ip6_output.c||net/ipv6/ip6_output.c": [
          "File: net/ipv6/ip6_output.c -> net/ipv6/ip6_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "948: struct dst_entry *ip6_dst_lookup_flow(struct sock *sk, struct flowi6 *fl6,",
          "951: {",
          "952:  struct dst_entry *dst = NULL;",
          "953:  int err;",
          "",
          "[Removed Lines]",
          "949:           const struct in6_addr *final_dst,",
          "950:           bool can_sleep)",
          "",
          "[Added Lines]",
          "948:           const struct in6_addr *final_dst)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "957:   return ERR_PTR(err);",
          "958:  if (final_dst)",
          "959:   fl6->daddr = *final_dst;",
          "963:  return xfrm_lookup(sock_net(sk), dst, flowi6_to_flowi(fl6), sk, 0);",
          "964: }",
          "",
          "[Removed Lines]",
          "960:  if (can_sleep)",
          "961:   fl6->flowi6_flags |= FLOWI_FLAG_CAN_SLEEP;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "982: struct dst_entry *ip6_sk_dst_lookup_flow(struct sock *sk, struct flowi6 *fl6,",
          "985: {",
          "986:  struct dst_entry *dst = sk_dst_check(sk, inet6_sk(sk)->dst_cookie);",
          "987:  int err;",
          "",
          "[Removed Lines]",
          "983:       const struct in6_addr *final_dst,",
          "984:       bool can_sleep)",
          "",
          "[Added Lines]",
          "978:       const struct in6_addr *final_dst)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "993:   return ERR_PTR(err);",
          "994:  if (final_dst)",
          "995:   fl6->daddr = *final_dst;",
          "999:  return xfrm_lookup(sock_net(sk), dst, flowi6_to_flowi(fl6), sk, 0);",
          "1000: }",
          "",
          "[Removed Lines]",
          "996:  if (can_sleep)",
          "997:   fl6->flowi6_flags |= FLOWI_FLAG_CAN_SLEEP;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/ipv6/ping.c||net/ipv6/ping.c": [
          "File: net/ipv6/ping.c -> net/ipv6/ping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:  else if (!fl6.flowi6_oif)",
          "146:   fl6.flowi6_oif = np->ucast_oif;",
          "149:  if (IS_ERR(dst))",
          "150:   return PTR_ERR(dst);",
          "151:  rt = (struct rt6_info *) dst;",
          "",
          "[Removed Lines]",
          "148:  dst = ip6_sk_dst_lookup_flow(sk, &fl6,  daddr, 1);",
          "",
          "[Added Lines]",
          "148:  dst = ip6_sk_dst_lookup_flow(sk, &fl6,  daddr);",
          "",
          "---------------"
        ],
        "net/ipv6/raw.c||net/ipv6/raw.c": [
          "File: net/ipv6/raw.c -> net/ipv6/raw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "865:   fl6.flowi6_oif = np->ucast_oif;",
          "866:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
          "869:  if (IS_ERR(dst)) {",
          "870:   err = PTR_ERR(dst);",
          "871:   goto out;",
          "",
          "[Removed Lines]",
          "868:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p, true);",
          "",
          "[Added Lines]",
          "868:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------"
        ],
        "net/ipv6/syncookies.c||net/ipv6/syncookies.c": [
          "File: net/ipv6/syncookies.c -> net/ipv6/syncookies.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:   fl6.fl6_sport = inet_sk(sk)->inet_sport;",
          "248:   security_req_classify_flow(req, flowi6_to_flowi(&fl6));",
          "251:   if (IS_ERR(dst))",
          "252:    goto out_free;",
          "253:  }",
          "",
          "[Removed Lines]",
          "250:   dst = ip6_dst_lookup_flow(sk, &fl6, final_p, false);",
          "",
          "[Added Lines]",
          "250:   dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------"
        ],
        "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
          "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
          "262:  if (IS_ERR(dst)) {",
          "263:   err = PTR_ERR(dst);",
          "264:   goto failure;",
          "",
          "[Removed Lines]",
          "261:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p, true);",
          "",
          "[Added Lines]",
          "261:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "805:  if (!IS_ERR(dst)) {",
          "806:   skb_dst_set(buff, dst);",
          "807:   ip6_xmit(ctl_sk, buff, &fl6, NULL, tclass);",
          "",
          "[Removed Lines]",
          "804:  dst = ip6_dst_lookup_flow(ctl_sk, &fl6, NULL, false);",
          "",
          "[Added Lines]",
          "804:  dst = ip6_dst_lookup_flow(ctl_sk, &fl6, NULL);",
          "",
          "---------------"
        ],
        "net/ipv6/udp.c||net/ipv6/udp.c": [
          "File: net/ipv6/udp.c -> net/ipv6/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1222:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
          "1225:  if (IS_ERR(dst)) {",
          "1226:   err = PTR_ERR(dst);",
          "1227:   dst = NULL;",
          "",
          "[Removed Lines]",
          "1224:  dst = ip6_sk_dst_lookup_flow(sk, &fl6, final_p, true);",
          "",
          "[Added Lines]",
          "1224:  dst = ip6_sk_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------"
        ],
        "net/l2tp/l2tp_ip6.c||net/l2tp/l2tp_ip6.c": [
          "File: net/l2tp/l2tp_ip6.c -> net/l2tp/l2tp_ip6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "599:  security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));",
          "602:  if (IS_ERR(dst)) {",
          "603:   err = PTR_ERR(dst);",
          "604:   goto out;",
          "",
          "[Removed Lines]",
          "601:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p, true);",
          "",
          "[Added Lines]",
          "601:  dst = ip6_dst_lookup_flow(sk, &fl6, final_p);",
          "",
          "---------------"
        ],
        "net/sctp/ipv6.c||net/sctp/ipv6.c": [
          "File: net/sctp/ipv6.c -> net/sctp/ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:  }",
          "265:  final_p = fl6_update_dst(fl6, np->opt, &final);",
          "267:  if (!asoc || saddr)",
          "268:   goto out;",
          "",
          "[Removed Lines]",
          "266:  dst = ip6_dst_lookup_flow(sk, fl6, final_p, false);",
          "",
          "[Added Lines]",
          "266:  dst = ip6_dst_lookup_flow(sk, fl6, final_p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:   fl6->saddr = baddr->v6.sin6_addr;",
          "323:   fl6->fl6_sport = baddr->v6.sin6_port;",
          "324:   final_p = fl6_update_dst(fl6, np->opt, &final);",
          "326:  }",
          "328: out:",
          "",
          "[Removed Lines]",
          "325:   dst = ip6_dst_lookup_flow(sk, fl6, final_p, false);",
          "",
          "[Added Lines]",
          "325:   dst = ip6_dst_lookup_flow(sk, fl6, final_p);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb33381d0c97cdee25f2cdab540b6e2bd16fa03b",
      "candidate_info": {
        "commit_hash": "bb33381d0c97cdee25f2cdab540b6e2bd16fa03b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/bb33381d0c97cdee25f2cdab540b6e2bd16fa03b",
        "files": [
          "include/net/sctp/sctp.h",
          "net/sctp/Kconfig",
          "net/sctp/associola.c",
          "net/sctp/chunk.c",
          "net/sctp/debug.c",
          "net/sctp/endpointola.c",
          "net/sctp/input.c",
          "net/sctp/inqueue.c",
          "net/sctp/ipv6.c",
          "net/sctp/output.c",
          "net/sctp/outqueue.c",
          "net/sctp/protocol.c",
          "net/sctp/sm_make_chunk.c",
          "net/sctp/sm_sideeffect.c",
          "net/sctp/sm_statefuns.c",
          "net/sctp/socket.c",
          "net/sctp/transport.c"
        ],
        "message": "net: sctp: rework debugging framework to use pr_debug and friends\n\nWe should get rid of all own SCTP debug printk macros and use the ones\nthat the kernel offers anyway instead. This makes the code more readable\nand conform to the kernel code, and offers all the features of dynamic\ndebbuging that pr_debug() et al has, such as only turning on/off portions\nof debug messages at runtime through debugfs. The runtime cost of having\nCONFIG_DYNAMIC_DEBUG enabled, but none of the debug statements printing,\nis negligible [1]. If kernel debugging is completly turned off, then these\nstatements will also compile into \"empty\" functions.\n\nWhile we're at it, we also need to change the Kconfig option as it /now/\nonly refers to the ifdef'ed code portions in outqueue.c that enable further\ndebugging/tracing of SCTP transaction fields. Also, since SCTP_ASSERT code\nwas enabled with this Kconfig option and has now been removed, we\ntransform those code parts into WARNs resp. where appropriate BUG_ONs so\nthat those bugs can be more easily detected as probably not many people\nhave SCTP debugging permanently turned on.\n\nTo turn on all SCTP debugging, the following steps are needed:\n\n # mount -t debugfs none /sys/kernel/debug\n # echo -n 'module sctp +p' > /sys/kernel/debug/dynamic_debug/control\n\nThis can be done more fine-grained on a per file, per line basis and others\nas described in [2].\n\n [1] https://www.kernel.org/doc/ols/2009/ols2009-pages-39-46.pdf\n [2] Documentation/dynamic-debug-howto.txt\n\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/sctp/sctp.h||include/net/sctp/sctp.h",
          "net/sctp/associola.c||net/sctp/associola.c",
          "net/sctp/chunk.c||net/sctp/chunk.c",
          "net/sctp/debug.c||net/sctp/debug.c",
          "net/sctp/endpointola.c||net/sctp/endpointola.c",
          "net/sctp/input.c||net/sctp/input.c",
          "net/sctp/inqueue.c||net/sctp/inqueue.c",
          "net/sctp/ipv6.c||net/sctp/ipv6.c",
          "net/sctp/output.c||net/sctp/output.c",
          "net/sctp/outqueue.c||net/sctp/outqueue.c",
          "net/sctp/protocol.c||net/sctp/protocol.c",
          "net/sctp/sm_make_chunk.c||net/sctp/sm_make_chunk.c",
          "net/sctp/sm_sideeffect.c||net/sctp/sm_sideeffect.c",
          "net/sctp/sm_statefuns.c||net/sctp/sm_statefuns.c",
          "net/sctp/socket.c||net/sctp/socket.c",
          "net/sctp/transport.c||net/sctp/transport.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/sctp/ipv6.c||net/sctp/ipv6.c"
          ],
          "candidate": [
            "net/sctp/ipv6.c||net/sctp/ipv6.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/sctp/sctp.h||include/net/sctp/sctp.h": [
          "File: include/net/sctp/sctp.h -> include/net/sctp/sctp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: #include <net/sctp/structs.h>",
          "84: #include <net/sctp/constants.h>",
          "96: #ifdef CONFIG_IP_SCTP_MODULE",
          "97: #define SCTP_PROTOSW_FLAG 0",
          "",
          "[Removed Lines]",
          "88: #ifndef SCTP_DEBUG",
          "89: #ifdef CONFIG_SCTP_DBG_MSG",
          "90: #define SCTP_DEBUG 1",
          "91: #else",
          "92: #define SCTP_DEBUG      0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:  }",
          "271: }",
          "",
          "[Removed Lines]",
          "274: #if SCTP_DEBUG",
          "275: extern int sctp_debug_flag;",
          "276: #define SCTP_DEBUG_PRINTK(fmt, args...)   \\",
          "277: do {       \\",
          "278:  if (sctp_debug_flag)    \\",
          "279:   printk(KERN_DEBUG pr_fmt(fmt), ##args); \\",
          "280: } while (0)",
          "281: #define SCTP_DEBUG_PRINTK_CONT(fmt, args...)  \\",
          "282: do {       \\",
          "283:  if (sctp_debug_flag)    \\",
          "284:   pr_cont(fmt, ##args);   \\",
          "285: } while (0)",
          "286: #define SCTP_DEBUG_PRINTK_IPADDR(fmt_lead, fmt_trail,   \\",
          "287:      args_lead, addr, args_trail...) \\",
          "288: do {         \\",
          "289:  const union sctp_addr *_addr = (addr);    \\",
          "290:  if (sctp_debug_flag) {      \\",
          "291:   if (_addr->sa.sa_family == AF_INET6) {   \\",
          "292:    printk(KERN_DEBUG    \\",
          "293:           pr_fmt(fmt_lead \"%pI6\" fmt_trail), \\",
          "294:           args_lead,    \\",
          "295:           &_addr->v6.sin6_addr,   \\",
          "296:           args_trail);    \\",
          "297:   } else {      \\",
          "298:    printk(KERN_DEBUG    \\",
          "299:           pr_fmt(fmt_lead \"%pI4\" fmt_trail), \\",
          "300:           args_lead,    \\",
          "301:           &_addr->v4.sin_addr.s_addr,  \\",
          "302:           args_trail);    \\",
          "303:   }       \\",
          "304:  }        \\",
          "305: } while (0)",
          "306: #define SCTP_ENABLE_DEBUG { sctp_debug_flag = 1; }",
          "307: #define SCTP_DISABLE_DEBUG { sctp_debug_flag = 0; }",
          "309: #define SCTP_ASSERT(expr, str, func) \\",
          "310:  if (!(expr)) { \\",
          "311:   SCTP_DEBUG_PRINTK(\"Assertion Failed: %s(%s) at %s:%s:%d\\n\", \\",
          "312:    str, (#expr), __FILE__, __func__, __LINE__); \\",
          "313:   func; \\",
          "314:  }",
          "318: #define SCTP_DEBUG_PRINTK(whatever...)",
          "319: #define SCTP_DEBUG_PRINTK_CONT(fmt, args...)",
          "320: #define SCTP_DEBUG_PRINTK_IPADDR(whatever...)",
          "321: #define SCTP_ENABLE_DEBUG",
          "322: #define SCTP_DISABLE_DEBUG",
          "323: #define SCTP_ASSERT(expr, str, func)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "597:  }",
          "598: }",
          "612: static inline int sctp_phashfn(struct net *net, __u16 lport)",
          "",
          "[Removed Lines]",
          "601: static inline int sctp_sanity_check(void)",
          "602: {",
          "603:  SCTP_ASSERT(sizeof(struct sctp_ulpevent) <=",
          "604:       sizeof(((struct sk_buff *)0)->cb),",
          "605:       \"SCTP: ulpevent does not fit in skb!\\n\", return 0);",
          "607:  return 1;",
          "608: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/sctp/associola.c||net/sctp/associola.c": [
          "File: net/sctp/associola.c -> net/sctp/associola.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:   goto fail_init;",
          "359:  SCTP_DBG_OBJCNT_INC(assoc);",
          "362:  return asoc;",
          "",
          "[Removed Lines]",
          "360:  SCTP_DEBUG_PRINTK(\"Created asoc %p\\n\", asoc);",
          "",
          "[Added Lines]",
          "361:  pr_debug(\"Created asoc %p\\n\", asoc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456: static void sctp_association_destroy(struct sctp_association *asoc)",
          "457: {",
          "460:  sctp_endpoint_put(asoc->ep);",
          "461:  sock_put(asoc->base.sk);",
          "",
          "[Removed Lines]",
          "458:  SCTP_ASSERT(asoc->base.dead, \"Assoc is not dead\", return);",
          "",
          "[Added Lines]",
          "459:  if (unlikely(!asoc->base.dead)) {",
          "460:   WARN(1, \"Attempt to destroy undead association %p!\\n\", asoc);",
          "461:   return;",
          "462:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536:  struct list_head *pos;",
          "537:  struct sctp_transport *transport;",
          "",
          "[Removed Lines]",
          "539:  SCTP_DEBUG_PRINTK_IPADDR(\"sctp_assoc_rm_peer:association %p addr: \",",
          "540:      \" port: %d\\n\",",
          "541:      asoc,",
          "542:      (&peer->ipaddr),",
          "543:      ntohs(peer->ipaddr.v4.sin_port));",
          "",
          "[Added Lines]",
          "543:  pr_debug(\"%s: association:%p addr:%pISpc\\n\",",
          "544:    __func__, asoc, &peer->ipaddr.sa);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "637:  port = ntohs(addr->v4.sin_port);",
          "647:  if (0 == asoc->peer.port)",
          "",
          "[Removed Lines]",
          "639:  SCTP_DEBUG_PRINTK_IPADDR(\"sctp_assoc_add_peer:association %p addr: \",",
          "640:      \" port: %d state:%d\\n\",",
          "641:      asoc,",
          "642:      addr,",
          "643:      port,",
          "644:      peer_state);",
          "",
          "[Added Lines]",
          "640:  pr_debug(\"%s: association:%p addr:%pISpc state:%d\\n\", __func__,",
          "641:    asoc, &addr->sa, peer_state);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "708:  else",
          "709:   asoc->pathmtu = peer->pathmtu;",
          "713:  peer->pmtu_pending = 0;",
          "715:  asoc->frag_point = sctp_frag_point(asoc, asoc->pathmtu);",
          "",
          "[Removed Lines]",
          "711:  SCTP_DEBUG_PRINTK(\"sctp_assoc_add_peer:association %p PMTU set to \"",
          "712:      \"%d\\n\", asoc, asoc->pathmtu);",
          "",
          "[Added Lines]",
          "708:  pr_debug(\"%s: association:%p PMTU set to %d\\n\", __func__, asoc,",
          "709:    asoc->pathmtu);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1349:  else",
          "1350:   t = asoc->peer.retran_path;",
          "1358: }",
          "",
          "[Removed Lines]",
          "1352:  SCTP_DEBUG_PRINTK_IPADDR(\"sctp_assoc_update_retran_path:association\"",
          "1353:      \" %p addr: \",",
          "1354:      \" port: %d\\n\",",
          "1355:      asoc,",
          "1356:      (&t->ipaddr),",
          "1357:      ntohs(t->ipaddr.v4.sin_port));",
          "",
          "[Added Lines]",
          "1350:  pr_debug(\"%s: association:%p addr:%pISpc\\n\", __func__, asoc,",
          "1351:    &t->ipaddr.sa);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1401:   asoc->frag_point = sctp_frag_point(asoc, pmtu);",
          "1402:  }",
          "1406: }",
          "",
          "[Removed Lines]",
          "1404:  SCTP_DEBUG_PRINTK(\"%s: asoc:%p, pmtu:%d, frag_point:%d\\n\",",
          "1405:      __func__, asoc, asoc->pathmtu, asoc->frag_point);",
          "",
          "[Added Lines]",
          "1398:  pr_debug(\"%s: asoc:%p, pmtu:%d, frag_point:%d\\n\", __func__, asoc,",
          "1399:    asoc->pathmtu, asoc->frag_point);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1454:   asoc->rwnd_press -= change;",
          "1455:  }",
          "",
          "[Removed Lines]",
          "1457:  SCTP_DEBUG_PRINTK(\"%s: asoc %p rwnd increased by %d to (%u, %u) \"",
          "1458:      \"- %u\\n\", __func__, asoc, len, asoc->rwnd,",
          "1459:      asoc->rwnd_over, asoc->a_rwnd);",
          "",
          "[Added Lines]",
          "1451:  pr_debug(\"%s: asoc:%p rwnd increased by %d to (%u, %u) - %u\\n\",",
          "1452:    __func__, asoc, len, asoc->rwnd, asoc->rwnd_over,",
          "1453:    asoc->a_rwnd);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1466:  if (sctp_peer_needs_update(asoc)) {",
          "1467:   asoc->a_rwnd = asoc->rwnd;",
          "1471:   sack = sctp_make_sack(asoc);",
          "1472:   if (!sack)",
          "1473:    return;",
          "",
          "[Removed Lines]",
          "1468:   SCTP_DEBUG_PRINTK(\"%s: Sending window update SACK- asoc: %p \"",
          "1469:       \"rwnd: %u a_rwnd: %u\\n\", __func__,",
          "1470:       asoc, asoc->rwnd, asoc->a_rwnd);",
          "",
          "[Added Lines]",
          "1463:   pr_debug(\"%s: sending window update SACK- asoc:%p rwnd:%u \"",
          "1464:     \"a_rwnd:%u\\n\", __func__, asoc, asoc->rwnd,",
          "1465:     asoc->a_rwnd);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1489:  int rx_count;",
          "1490:  int over = 0;",
          "1495:  if (asoc->ep->rcvbuf_policy)",
          "1496:   rx_count = atomic_read(&asoc->rmem_alloc);",
          "",
          "[Removed Lines]",
          "1492:  SCTP_ASSERT(asoc->rwnd, \"rwnd zero\", return);",
          "1493:  SCTP_ASSERT(!asoc->rwnd_over, \"rwnd_over not zero\", return);",
          "",
          "[Added Lines]",
          "1488:  if (unlikely(!asoc->rwnd || asoc->rwnd_over))",
          "1489:   pr_debug(\"%s: association:%p has asoc->rwnd:%u, \"",
          "1490:     \"asoc->rwnd_over:%u!\\n\", __func__, asoc,",
          "1491:     asoc->rwnd, asoc->rwnd_over);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1515:   asoc->rwnd_over = len - asoc->rwnd;",
          "1516:   asoc->rwnd = 0;",
          "1517:  }",
          "1521: }",
          "",
          "[Removed Lines]",
          "1518:  SCTP_DEBUG_PRINTK(\"%s: asoc %p rwnd decreased by %d to (%u, %u, %u)\\n\",",
          "1519:      __func__, asoc, len, asoc->rwnd,",
          "1520:      asoc->rwnd_over, asoc->rwnd_press);",
          "",
          "[Added Lines]",
          "1517:  pr_debug(\"%s: asoc:%p rwnd decreased by %d to (%u, %u, %u)\\n\",",
          "1518:    __func__, asoc, len, asoc->rwnd, asoc->rwnd_over,",
          "1519:    asoc->rwnd_press);",
          "",
          "---------------"
        ],
        "net/sctp/chunk.c||net/sctp/chunk.c": [
          "File: net/sctp/chunk.c -> net/sctp/chunk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:   msg->expires_at = jiffies +",
          "194:         msecs_to_jiffies(sinfo->sinfo_timetolive);",
          "195:   msg->can_abandon = 1;",
          "198:  }",
          "",
          "[Removed Lines]",
          "196:   SCTP_DEBUG_PRINTK(\"%s: msg:%p expires_at: %ld jiffies:%ld\\n\",",
          "197:       __func__, msg, msg->expires_at, jiffies);",
          "",
          "[Added Lines]",
          "197:   pr_debug(\"%s: msg:%p expires_at:%ld jiffies:%ld\\n\", __func__,",
          "198:     msg, msg->expires_at, jiffies);",
          "",
          "---------------"
        ],
        "net/sctp/debug.c||net/sctp/debug.c": [
          "File: net/sctp/debug.c -> net/sctp/debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #include <net/sctp/sctp.h>",
          "55: static const char *const sctp_cid_tbl[SCTP_NUM_BASE_CHUNK_TYPES] = {",
          "56:  \"DATA\",",
          "",
          "[Removed Lines]",
          "50: #if SCTP_DEBUG",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/sctp/endpointola.c||net/sctp/endpointola.c": [
          "File: net/sctp/endpointola.c -> net/sctp/endpointola.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "249: {",
          "250:  struct sock *sk;",
          "255:  kfree(ep->digest);",
          "",
          "[Removed Lines]",
          "252:  SCTP_ASSERT(ep->base.dead, \"Endpoint is not dead\", return);",
          "",
          "[Added Lines]",
          "252:  if (unlikely(!ep->base.dead)) {",
          "253:   WARN(1, \"Attempt to destroy undead endpoint %p!\\n\", ep);",
          "254:   return;",
          "255:  }",
          "",
          "---------------"
        ],
        "net/sctp/input.c||net/sctp/input.c": [
          "File: net/sctp/input.c -> net/sctp/input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:       struct sctp_association *asoc,",
          "455:       struct sctp_transport *t)",
          "456: {",
          "459:  if (sock_owned_by_user(sk)) {",
          "460:   if (timer_pending(&t->proto_unreach_timer))",
          "461:    return;",
          "",
          "[Removed Lines]",
          "457:  SCTP_DEBUG_PRINTK(\"%s\\n\",  __func__);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:       jiffies + (HZ/20)))",
          "465:     sctp_association_hold(asoc);",
          "466:   }",
          "468:  } else {",
          "469:   struct net *net = sock_net(sk);",
          "471:   if (del_timer(&t->proto_unreach_timer))",
          "472:    sctp_association_put(asoc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:   pr_debug(\"%s: unrecognized next header type \"",
          "469:     \"encountered!\\n\", __func__);",
          "",
          "---------------"
        ],
        "net/sctp/inqueue.c||net/sctp/inqueue.c": [
          "File: net/sctp/inqueue.c -> net/sctp/inqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   chunk->end_of_packet = 1;",
          "220:  }",
          "226:  return chunk;",
          "227: }",
          "",
          "[Removed Lines]",
          "222:  SCTP_DEBUG_PRINTK(\"+++sctp_inq_pop+++ chunk %p[%s],\"",
          "223:      \" length %d, skb->len %d\\n\",chunk,",
          "224:      sctp_cname(SCTP_ST_CHUNK(chunk->chunk_hdr->type)),",
          "225:      ntohs(chunk->chunk_hdr->length), chunk->skb->len);",
          "",
          "[Added Lines]",
          "222:  pr_debug(\"+++sctp_inq_pop+++ chunk:%p[%s], length:%d, skb->len:%d\\n\",",
          "223:    chunk, sctp_cname(SCTP_ST_CHUNK(chunk->chunk_hdr->type)),",
          "224:    ntohs(chunk->chunk_hdr->length), chunk->skb->len);",
          "",
          "---------------"
        ],
        "net/sctp/ipv6.c||net/sctp/ipv6.c": [
          "File: net/sctp/ipv6.c -> net/sctp/ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:   fl6.daddr = *rt0->addr;",
          "240:  }",
          "246:  SCTP_INC_STATS(sock_net(sk), SCTP_MIB_OUTSCTPPACKS);",
          "",
          "[Removed Lines]",
          "242:  SCTP_DEBUG_PRINTK(\"%s: skb:%p, len:%d, src:%pI6 dst:%pI6\\n\",",
          "243:      __func__, skb, skb->len,",
          "244:      &fl6.saddr, &fl6.daddr);",
          "",
          "[Added Lines]",
          "242:  pr_debug(\"%s: skb:%p, len:%d, src:%pI6 dst:%pI6\\n\", __func__, skb,",
          "243:    skb->len, &fl6.saddr, &fl6.daddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:  if (ipv6_addr_type(&daddr->v6.sin6_addr) & IPV6_ADDR_LINKLOCAL)",
          "277:   fl6->flowi6_oif = daddr->v6.sin6_scope_id;",
          "281:  if (asoc)",
          "282:   fl6->fl6_sport = htons(asoc->base.bind_addr.port);",
          "",
          "[Removed Lines]",
          "279:  SCTP_DEBUG_PRINTK(\"%s: DST=%pI6 \", __func__, &fl6->daddr);",
          "",
          "[Added Lines]",
          "278:  pr_debug(\"%s: dst=%pI6 \", __func__, &fl6->daddr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "284:  if (saddr) {",
          "285:   fl6->saddr = saddr->v6.sin6_addr;",
          "286:   fl6->fl6_sport = saddr->v6.sin6_port;",
          "288:  }",
          "290:  dst = ip6_dst_lookup_flow(sk, fl6, NULL, false);",
          "",
          "[Removed Lines]",
          "287:   SCTP_DEBUG_PRINTK(\"SRC=%pI6 - \", &fl6->saddr);",
          "",
          "[Added Lines]",
          "287:   pr_debug(\"src=%pI6 - \", &fl6->saddr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "348: out:",
          "349:  if (!IS_ERR_OR_NULL(dst)) {",
          "350:   struct rt6_info *rt;",
          "351:   rt = (struct rt6_info *)dst;",
          "352:   t->dst = dst;",
          "355:  } else {",
          "356:   t->dst = NULL;",
          "358:  }",
          "359: }",
          "",
          "[Removed Lines]",
          "353:   SCTP_DEBUG_PRINTK(\"rt6_dst:%pI6 rt6_src:%pI6\\n\",",
          "354:    &rt->rt6i_dst.addr, &fl6->saddr);",
          "357:   SCTP_DEBUG_PRINTK(\"NO ROUTE\\n\");",
          "",
          "[Added Lines]",
          "355:   pr_debug(\"rt6_dst:%pI6 rt6_src:%pI6\\n\", &rt->rt6i_dst.addr,",
          "356:     &fl6->saddr);",
          "360:   pr_debug(\"no route\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "377:  struct flowi6 *fl6 = &fl->u.ip6;",
          "378:  union sctp_addr *saddr = &t->saddr;",
          "382:  if (t->dst) {",
          "383:   saddr->v6.sin6_family = AF_INET6;",
          "",
          "[Removed Lines]",
          "380:  SCTP_DEBUG_PRINTK(\"%s: asoc:%p dst:%p\\n\", __func__, t->asoc, t->dst);",
          "",
          "[Added Lines]",
          "383:  pr_debug(\"%s: asoc:%p dst:%p\\n\", __func__, t->asoc, t->dst);",
          "",
          "---------------"
        ],
        "net/sctp/output.c||net/sctp/output.c": [
          "File: net/sctp/output.c -> net/sctp/output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: {",
          "94:  struct sctp_chunk *chunk = NULL;",
          "99:  packet->vtag = vtag;",
          "",
          "[Removed Lines]",
          "96:  SCTP_DEBUG_PRINTK(\"%s: packet:%p vtag:0x%x\\n\", __func__,",
          "97:      packet, vtag);",
          "",
          "[Added Lines]",
          "96:  pr_debug(\"%s: packet:%p vtag:0x%x\\n\", __func__, packet, vtag);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:  struct sctp_association *asoc = transport->asoc;",
          "120:  size_t overhead;",
          "125:  packet->transport = transport;",
          "126:  packet->source_port = sport;",
          "",
          "[Removed Lines]",
          "122:  SCTP_DEBUG_PRINTK(\"%s: packet:%p transport:%p\\n\", __func__,",
          "123:      packet, transport);",
          "",
          "[Added Lines]",
          "121:  pr_debug(\"%s: packet:%p transport:%p\\n\", __func__, packet, transport);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145: {",
          "146:  struct sctp_chunk *chunk, *tmp;",
          "150:  list_for_each_entry_safe(chunk, tmp, &packet->chunk_list, list) {",
          "151:   list_del_init(&chunk->list);",
          "",
          "[Removed Lines]",
          "148:  SCTP_DEBUG_PRINTK(\"%s: packet:%p\\n\", __func__, packet);",
          "",
          "[Added Lines]",
          "146:  pr_debug(\"%s: packet:%p\\n\", __func__, packet);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:  sctp_xmit_t retval;",
          "168:  int error = 0;",
          "173:  switch ((retval = (sctp_packet_append_chunk(packet, chunk)))) {",
          "174:  case SCTP_XMIT_PMTU_FULL:",
          "",
          "[Removed Lines]",
          "170:  SCTP_DEBUG_PRINTK(\"%s: packet:%p chunk:%p\\n\", __func__,",
          "171:      packet, chunk);",
          "",
          "[Added Lines]",
          "168:  pr_debug(\"%s: packet:%p chunk:%p\\n\", __func__, packet, chunk);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334: {",
          "335:  sctp_xmit_t retval = SCTP_XMIT_OK;",
          "",
          "[Removed Lines]",
          "337:  SCTP_DEBUG_PRINTK(\"%s: packet:%p chunk:%p\\n\", __func__, packet,",
          "338:      chunk);",
          "",
          "[Added Lines]",
          "334:  pr_debug(\"%s: packet:%p chunk:%p\\n\", __func__, packet, chunk);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "403:  __u32 cksum_buf_len = sizeof(struct sctphdr);",
          "408:  if (list_empty(&packet->chunk_list))",
          "",
          "[Removed Lines]",
          "405:  SCTP_DEBUG_PRINTK(\"%s: packet:%p\\n\", __func__, packet);",
          "",
          "[Added Lines]",
          "401:  pr_debug(\"%s: packet:%p\\n\", __func__, packet);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "476:  list_for_each_entry_safe(chunk, tmp, &packet->chunk_list, list) {",
          "477:   list_del_init(&chunk->list);",
          "478:   if (sctp_chunk_is_data(chunk)) {",
          "",
          "[Removed Lines]",
          "475:  SCTP_DEBUG_PRINTK(\"***sctp_transmit_packet***\\n\");",
          "",
          "[Added Lines]",
          "472:  pr_debug(\"***sctp_transmit_packet***\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "505:   memcpy(skb_put(nskb, chunk->skb->len),",
          "506:           chunk->skb->data, chunk->skb->len);",
          "",
          "[Removed Lines]",
          "508:   SCTP_DEBUG_PRINTK(\"%s %p[%s] %s 0x%x, %s %d, %s %d, %s %d\\n\",",
          "509:       \"*** Chunk\", chunk,",
          "510:       sctp_cname(SCTP_ST_CHUNK(",
          "511:        chunk->chunk_hdr->type)),",
          "512:       chunk->has_tsn ? \"TSN\" : \"No TSN\",",
          "513:       chunk->has_tsn ?",
          "514:       ntohl(chunk->subh.data_hdr->tsn) : 0,",
          "515:       \"length\", ntohs(chunk->chunk_hdr->length),",
          "516:       \"chunk->skb->len\", chunk->skb->len,",
          "517:       \"rtt_in_progress\", chunk->rtt_in_progress);",
          "",
          "[Added Lines]",
          "506:   pr_debug(\"*** Chunk:%p[%s] %s 0x%x, length:%d, chunk->skb->len:%d, \"",
          "507:     \"rtt_in_progress:%d\\n\", chunk,",
          "508:     sctp_cname(SCTP_ST_CHUNK(chunk->chunk_hdr->type)),",
          "509:     chunk->has_tsn ? \"TSN\" : \"No TSN\",",
          "510:     chunk->has_tsn ? ntohl(chunk->subh.data_hdr->tsn) : 0,",
          "511:     ntohs(chunk->chunk_hdr->length), chunk->skb->len,",
          "512:     chunk->rtt_in_progress);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "606:   }",
          "607:  }",
          "612:  nskb->local_df = packet->ipfragok;",
          "613:  (*tp->af_specific->sctp_xmit)(nskb, tp);",
          "",
          "[Removed Lines]",
          "609:  SCTP_DEBUG_PRINTK(\"***sctp_transmit_packet*** skb len %d\\n\",",
          "610:      nskb->len);",
          "",
          "[Added Lines]",
          "604:  pr_debug(\"***sctp_transmit_packet*** skb->len:%d\\n\", nskb->len);",
          "",
          "---------------"
        ],
        "net/sctp/outqueue.c||net/sctp/outqueue.c": [
          "File: net/sctp/outqueue.c -> net/sctp/outqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:  struct net *net = sock_net(q->asoc->base.sk);",
          "300:  int error = 0;",
          "",
          "[Removed Lines]",
          "302:  SCTP_DEBUG_PRINTK(\"sctp_outq_tail(%p, %p[%s])\\n\",",
          "303:      q, chunk, chunk && chunk->chunk_hdr ?",
          "304:      sctp_cname(SCTP_ST_CHUNK(chunk->chunk_hdr->type))",
          "305:      : \"Illegal Chunk\");",
          "",
          "[Added Lines]",
          "302:  pr_debug(\"%s: outq:%p, chunk:%p[%s]\\n\", __func__, q, chunk,",
          "303:    chunk && chunk->chunk_hdr ?",
          "304:    sctp_cname(SCTP_ST_CHUNK(chunk->chunk_hdr->type)) :",
          "305:    \"illegal chunk\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:    break;",
          "330:   default:",
          "336:    sctp_outq_tail_data(q, chunk);",
          "337:    if (chunk->chunk_hdr->flags & SCTP_DATA_UNORDERED)",
          "",
          "[Removed Lines]",
          "331:    SCTP_DEBUG_PRINTK(\"outqueueing (%p, %p[%s])\\n\",",
          "332:      q, chunk, chunk && chunk->chunk_hdr ?",
          "333:      sctp_cname(SCTP_ST_CHUNK(chunk->chunk_hdr->type))",
          "334:      : \"Illegal Chunk\");",
          "",
          "[Added Lines]",
          "331:    pr_debug(\"%s: outqueueing: outq:%p, chunk:%p[%s])\\n\",",
          "332:      __func__, q, chunk, chunk && chunk->chunk_hdr ?",
          "333:      sctp_cname(SCTP_ST_CHUNK(chunk->chunk_hdr->type)) :",
          "334:      \"illegal chunk\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "460:   }",
          "461:  }",
          "471: }",
          "",
          "[Removed Lines]",
          "463:  SCTP_DEBUG_PRINTK(\"%s: transport: %p, reason: %d, \"",
          "464:      \"cwnd: %d, ssthresh: %d, flight_size: %d, \"",
          "465:      \"pba: %d\\n\", __func__,",
          "466:      transport, reason,",
          "467:      transport->cwnd, transport->ssthresh,",
          "468:      transport->flight_size,",
          "469:      transport->partial_bytes_acked);",
          "",
          "[Added Lines]",
          "463:  pr_debug(\"%s: transport:%p, reason:%d, cwnd:%d, ssthresh:%d, \"",
          "464:    \"flight_size:%d, pba:%d\\n\", __func__, transport, reason,",
          "465:    transport->cwnd, transport->ssthresh, transport->flight_size,",
          "466:    transport->partial_bytes_acked);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1014:     sctp_transport_burst_limited(transport);",
          "1015:    }",
          "1032:    status = sctp_packet_transmit_chunk(packet, chunk, 0);",
          "",
          "[Removed Lines]",
          "1017:    SCTP_DEBUG_PRINTK(\"sctp_outq_flush(%p, %p[%s]), \",",
          "1018:        q, chunk,",
          "1019:        chunk && chunk->chunk_hdr ?",
          "1020:        sctp_cname(SCTP_ST_CHUNK(",
          "1021:         chunk->chunk_hdr->type))",
          "1022:        : \"Illegal Chunk\");",
          "1024:    SCTP_DEBUG_PRINTK(\"TX TSN 0x%x skb->head \"",
          "1025:      \"%p skb->users %d.\\n\",",
          "1026:      ntohl(chunk->subh.data_hdr->tsn),",
          "1027:      chunk->skb ?chunk->skb->head : NULL,",
          "1028:      chunk->skb ?",
          "1029:      atomic_read(&chunk->skb->users) : -1);",
          "",
          "[Added Lines]",
          "1013:    pr_debug(\"%s: outq:%p, chunk:%p[%s], tx-tsn:0x%x skb->head:%p \"",
          "1014:      \"skb->users:%d\\n\",",
          "1015:      __func__, q, chunk, chunk && chunk->chunk_hdr ?",
          "1016:      sctp_cname(SCTP_ST_CHUNK(chunk->chunk_hdr->type)) :",
          "1017:      \"illegal chunk\", ntohl(chunk->subh.data_hdr->tsn),",
          "1018:      chunk->skb ? chunk->skb->head : NULL, chunk->skb ?",
          "1019:      atomic_read(&chunk->skb->users) : -1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1045:     sctp_outq_head_data(q, chunk);",
          "1046:     goto sctp_flush_out;",
          "1047:     break;",
          "",
          "[Removed Lines]",
          "1041:     SCTP_DEBUG_PRINTK(\"sctp_outq_flush: could \"",
          "1042:      \"not transmit TSN: 0x%x, status: %d\\n\",",
          "1043:      ntohl(chunk->subh.data_hdr->tsn),",
          "1044:      status);",
          "",
          "[Added Lines]",
          "1031:     pr_debug(\"%s: could not transmit tsn:0x%x, status:%d\\n\",",
          "1032:       __func__, ntohl(chunk->subh.data_hdr->tsn),",
          "1033:       status);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1285:  sctp_generate_fwdtsn(q, sack_ctsn);",
          "",
          "[Removed Lines]",
          "1287:  SCTP_DEBUG_PRINTK(\"%s: sack Cumulative TSN Ack is 0x%x.\\n\",",
          "1288:      __func__, sack_ctsn);",
          "1289:  SCTP_DEBUG_PRINTK(\"%s: Cumulative TSN Ack of association, \"",
          "1290:      \"%p is 0x%x. Adv peer ack point: 0x%x\\n\",",
          "1291:      __func__, asoc, ctsn, asoc->adv_peer_ack_point);",
          "",
          "[Added Lines]",
          "1277:  pr_debug(\"%s: sack cumulative tsn ack:0x%x\\n\", __func__, sack_ctsn);",
          "1278:  pr_debug(\"%s: cumulative tsn ack of assoc:%p is 0x%x, \"",
          "1279:    \"advertised peer ack point:0x%x\\n\", __func__, asoc, ctsn,",
          "1280:    asoc->adv_peer_ack_point);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1304:    goto finish;",
          "1305:  }",
          "1308: finish:",
          "1309:  return q->empty;",
          "1310: }",
          "",
          "[Removed Lines]",
          "1307:  SCTP_DEBUG_PRINTK(\"sack queue is empty.\\n\");",
          "",
          "[Added Lines]",
          "1296:  pr_debug(\"%s: sack queue is empty\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1351: #if SCTP_DEBUG",
          "",
          "[Added Lines]",
          "1340: #ifdef CONFIG_SCTP_DBG_TSNS",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1483:     list_add_tail(lchunk, &tlist);",
          "1484:    }",
          "1487:    switch (dbg_prt_state) {",
          "1489:     if (dbg_last_ack_tsn + 1 == tsn) {",
          "",
          "[Removed Lines]",
          "1486: #if SCTP_DEBUG",
          "",
          "[Added Lines]",
          "1475: #ifdef CONFIG_SCTP_DBG_TSNS",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1502:     }",
          "1506:     dbg_ack_tsn = tsn;",
          "1507:     break;",
          "1510:     if (dbg_last_kept_tsn != dbg_kept_tsn) {",
          "1514:     }",
          "1519:    default:",
          "1523:     dbg_prt_state = 0;",
          "1524:     dbg_ack_tsn = tsn;",
          "1525:    }",
          "1527:    dbg_last_ack_tsn = tsn;",
          "1530:   } else {",
          "1531:    if (tchunk->tsn_gap_acked) {",
          "1536:     tchunk->tsn_gap_acked = 0;",
          "1538:     if (tchunk->transport)",
          "",
          "[Removed Lines]",
          "1500:      SCTP_DEBUG_PRINTK_CONT(\"-%08x\",",
          "1501:               dbg_last_ack_tsn);",
          "1505:     SCTP_DEBUG_PRINTK_CONT(\",%08x\", tsn);",
          "1512:      SCTP_DEBUG_PRINTK_CONT(\"-%08x\",",
          "1513:               dbg_last_kept_tsn);",
          "1516:     SCTP_DEBUG_PRINTK_CONT(\"\\n\");",
          "1522:     SCTP_DEBUG_PRINTK(\"ACKed: %08x\", tsn);",
          "1532:     SCTP_DEBUG_PRINTK(\"%s: Receiver reneged on \"",
          "1533:         \"data TSN: 0x%x\\n\",",
          "1534:         __func__,",
          "1535:         tsn);",
          "",
          "[Added Lines]",
          "1489:      pr_cont(\"-%08x\", dbg_last_ack_tsn);",
          "1493:     pr_cont(\",%08x\", tsn);",
          "1500:      pr_cont(\"-%08x\", dbg_last_kept_tsn);",
          "1503:     pr_cont(\"\\n\");",
          "1508:     pr_debug(\"ACKed: %08x\", tsn);",
          "1519:     pr_debug(\"%s: receiver reneged on data TSN:0x%x\\n\",",
          "1520:       __func__, tsn);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1553:    list_add_tail(lchunk, &tlist);",
          "1557:    switch (dbg_prt_state) {",
          "1558:    case 1:",
          "",
          "[Removed Lines]",
          "1555: #if SCTP_DEBUG",
          "",
          "[Added Lines]",
          "1541: #ifdef CONFIG_SCTP_DBG_TSNS",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1560:      break;",
          "1562:     if (dbg_last_kept_tsn != dbg_kept_tsn)",
          "1567:     dbg_kept_tsn = tsn;",
          "1568:     break;",
          "1570:    case 0:",
          "1571:     if (dbg_last_ack_tsn != dbg_ack_tsn)",
          "1577:    default:",
          "1579:     dbg_prt_state = 1;",
          "1580:     dbg_kept_tsn = tsn;",
          "1581:    }",
          "1583:    dbg_last_kept_tsn = tsn;",
          "1585:   }",
          "1586:  }",
          "1590:  switch (dbg_prt_state) {",
          "1591:  case 0:",
          "1599:  case 1:",
          "1605:  }",
          "1607:  if (transport) {",
          "1608:   if (bytes_acked) {",
          "1609:    struct sctp_association *asoc = transport->asoc;",
          "",
          "[Removed Lines]",
          "1563:      SCTP_DEBUG_PRINTK_CONT(\"-%08x\",",
          "1564:               dbg_last_kept_tsn);",
          "1566:     SCTP_DEBUG_PRINTK_CONT(\",%08x\", tsn);",
          "1572:      SCTP_DEBUG_PRINTK_CONT(\"-%08x\",",
          "1573:               dbg_last_ack_tsn);",
          "1574:     SCTP_DEBUG_PRINTK_CONT(\"\\n\");",
          "1578:     SCTP_DEBUG_PRINTK(\"KEPT: %08x\",tsn);",
          "1588: #if SCTP_DEBUG",
          "1592:   if (dbg_last_ack_tsn != dbg_ack_tsn) {",
          "1593:    SCTP_DEBUG_PRINTK_CONT(\"-%08x\\n\", dbg_last_ack_tsn);",
          "1594:   } else {",
          "1595:    SCTP_DEBUG_PRINTK_CONT(\"\\n\");",
          "1596:   }",
          "1597:  break;",
          "1600:   if (dbg_last_kept_tsn != dbg_kept_tsn) {",
          "1601:    SCTP_DEBUG_PRINTK_CONT(\"-%08x\\n\", dbg_last_kept_tsn);",
          "1602:   } else {",
          "1603:    SCTP_DEBUG_PRINTK_CONT(\"\\n\");",
          "1604:   }",
          "",
          "[Added Lines]",
          "1549:      pr_cont(\"-%08x\", dbg_last_kept_tsn);",
          "1551:     pr_cont(\",%08x\", tsn);",
          "1557:      pr_cont(\"-%08x\", dbg_last_ack_tsn);",
          "1559:     pr_cont(\"\\n\");",
          "1562:     pr_debug(\"KEPT: %08x\", tsn);",
          "1573: #ifdef CONFIG_SCTP_DBG_TSNS",
          "1577:   if (dbg_last_ack_tsn != dbg_ack_tsn)",
          "1578:    pr_cont(\"-%08x\\n\", dbg_last_ack_tsn);",
          "1579:   else",
          "1580:    pr_cont(\"\\n\");",
          "1581:   break;",
          "1583:   if (dbg_last_kept_tsn != dbg_kept_tsn)",
          "1584:    pr_cont(\"-%08x\\n\", dbg_last_kept_tsn);",
          "1585:   else",
          "1586:    pr_cont(\"\\n\");",
          "1587:   break;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1676:        !list_empty(&tlist) &&",
          "1677:        (sack_ctsn+2 == q->asoc->next_tsn) &&",
          "1678:        q->asoc->state < SCTP_STATE_SHUTDOWN_PENDING) {",
          "1682:     q->asoc->overall_error_count = 0;",
          "1683:     transport->error_count = 0;",
          "1684:    }",
          "",
          "[Removed Lines]",
          "1679:     SCTP_DEBUG_PRINTK(\"%s: SACK received for zero \"",
          "1680:         \"window probe: %u\\n\",",
          "1681:         __func__, sack_ctsn);",
          "",
          "[Added Lines]",
          "1662:     pr_debug(\"%s: sack received for zero window \"",
          "1663:       \"probe:%u\\n\", __func__, sack_ctsn);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1739:       count_of_newacks, tsn)) {",
          "1740:     chunk->tsn_missing_report++;",
          "1746:    }",
          "1747:   }",
          "",
          "[Removed Lines]",
          "1742:     SCTP_DEBUG_PRINTK(",
          "1743:      \"%s: TSN 0x%x missing counter: %d\\n\",",
          "1744:      __func__, tsn,",
          "1745:      chunk->tsn_missing_report);",
          "",
          "[Added Lines]",
          "1725:     pr_debug(\"%s: tsn:0x%x missing counter:%d\\n\",",
          "1726:       __func__, tsn, chunk->tsn_missing_report);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1762:   if (do_fast_retransmit)",
          "1763:    sctp_retransmit(q, transport, SCTP_RTXR_FAST_RTX);",
          "1770:  }",
          "1771: }",
          "",
          "[Removed Lines]",
          "1765:   SCTP_DEBUG_PRINTK(\"%s: transport: %p, cwnd: %d, \"",
          "1766:       \"ssthresh: %d, flight_size: %d, pba: %d\\n\",",
          "1767:       __func__, transport, transport->cwnd,",
          "1768:       transport->ssthresh, transport->flight_size,",
          "1769:       transport->partial_bytes_acked);",
          "",
          "[Added Lines]",
          "1746:   pr_debug(\"%s: transport:%p, cwnd:%d, ssthresh:%d, \"",
          "1747:     \"flight_size:%d, pba:%d\\n\",  __func__, transport,",
          "1748:     transport->cwnd, transport->ssthresh,",
          "1749:     transport->flight_size, transport->partial_bytes_acked);",
          "",
          "---------------"
        ],
        "net/sctp/protocol.c||net/sctp/protocol.c": [
          "File: net/sctp/protocol.c -> net/sctp/protocol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:   fl4->fl4_sport = saddr->v4.sin_port;",
          "452:  }",
          "457:  rt = ip_route_output_key(sock_net(sk), fl4);",
          "458:  if (!IS_ERR(rt))",
          "",
          "[Removed Lines]",
          "454:  SCTP_DEBUG_PRINTK(\"%s: DST:%pI4, SRC:%pI4 - \",",
          "455:      __func__, &fl4->daddr, &fl4->saddr);",
          "",
          "[Added Lines]",
          "454:  pr_debug(\"%s: dst:%pI4, src:%pI4 - \", __func__, &fl4->daddr,",
          "455:    &fl4->saddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "513: out:",
          "514:  t->dst = dst;",
          "515:  if (dst)",
          "518:  else",
          "520: }",
          "",
          "[Removed Lines]",
          "516:   SCTP_DEBUG_PRINTK(\"rt_dst:%pI4, rt_src:%pI4\\n\",",
          "517:       &fl4->daddr, &fl4->saddr);",
          "519:   SCTP_DEBUG_PRINTK(\"NO ROUTE\\n\");",
          "",
          "[Added Lines]",
          "516:   pr_debug(\"rt_dst:%pI4, rt_src:%pI4\\n\",",
          "517:     &fl4->daddr, &fl4->saddr);",
          "519:   pr_debug(\"no route\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "604:  spin_lock_bh(&net->sctp.addr_wq_lock);",
          "606:  list_for_each_entry_safe(addrw, temp, &net->sctp.addr_waitq, list) {",
          "611: #if IS_ENABLED(CONFIG_IPV6)",
          "",
          "[Removed Lines]",
          "607:   SCTP_DEBUG_PRINTK_IPADDR(\"sctp_addrwq_timo_handler: the first ent in wq %p is \",",
          "608:       \" for cmd %d at entry %p\\n\", &net->sctp.addr_waitq, &addrw->a, addrw->state,",
          "609:       addrw);",
          "",
          "[Added Lines]",
          "607:   pr_debug(\"%s: the first ent in wq:%p is addr:%pISc for cmd:%d at \"",
          "608:     \"entry:%p\\n\", __func__, &net->sctp.addr_waitq, &addrw->a.sa,",
          "609:     addrw->state, addrw);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "623:        addrw->state == SCTP_ADDR_NEW) {",
          "624:     unsigned long timeo_val;",
          "628:     timeo_val = jiffies;",
          "629:     timeo_val += msecs_to_jiffies(SCTP_ADDRESS_TICK_DELAY);",
          "630:     mod_timer(&net->sctp.addr_wq_timer, timeo_val);",
          "",
          "[Removed Lines]",
          "626:     SCTP_DEBUG_PRINTK(\"sctp_timo_handler: this is on DAD, trying %d sec later\\n\",",
          "627:         SCTP_ADDRESS_TICK_DELAY);",
          "",
          "[Added Lines]",
          "626:     pr_debug(\"%s: this is on DAD, trying %d sec \"",
          "627:       \"later\\n\", __func__,",
          "628:       SCTP_ADDRESS_TICK_DELAY);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "641:     continue;",
          "642:    sctp_bh_lock_sock(sk);",
          "643:    if (sctp_asconf_mgmt(sp, addrw) < 0)",
          "645:    sctp_bh_unlock_sock(sk);",
          "646:   }",
          "647: #if IS_ENABLED(CONFIG_IPV6)",
          "",
          "[Removed Lines]",
          "644:     SCTP_DEBUG_PRINTK(\"sctp_addrwq_timo_handler: sctp_asconf_mgmt failed\\n\");",
          "",
          "[Added Lines]",
          "646:     pr_debug(\"%s: sctp_asconf_mgmt failed\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "707:  addrw = sctp_addr_wq_lookup(net, addr);",
          "708:  if (addrw) {",
          "709:   if (addrw->state != cmd) {",
          "713:    list_del(&addrw->list);",
          "714:    kfree(addrw);",
          "715:   }",
          "",
          "[Removed Lines]",
          "710:    SCTP_DEBUG_PRINTK_IPADDR(\"sctp_addr_wq_mgmt offsets existing entry for %d \",",
          "711:        \" in wq %p\\n\", addrw->state, &addrw->a,",
          "712:        &net->sctp.addr_waitq);",
          "",
          "[Added Lines]",
          "712:    pr_debug(\"%s: offsets existing entry for %d, addr:%pISc \"",
          "713:      \"in wq:%p\\n\", __func__, addrw->state, &addrw->a.sa,",
          "714:      &net->sctp.addr_waitq);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "725:  }",
          "726:  addrw->state = cmd;",
          "727:  list_add_tail(&addrw->list, &net->sctp.addr_waitq);",
          "731:  if (!timer_pending(&net->sctp.addr_wq_timer)) {",
          "732:   timeo_val = jiffies;",
          "",
          "[Removed Lines]",
          "728:  SCTP_DEBUG_PRINTK_IPADDR(\"sctp_addr_wq_mgmt add new entry for cmd:%d \",",
          "729:      \" in wq %p\\n\", addrw->state, &addrw->a, &net->sctp.addr_waitq);",
          "",
          "[Added Lines]",
          "732:  pr_debug(\"%s: add new entry for cmd:%d, addr:%pISc in wq:%p\\n\",",
          "733:    __func__, addrw->state, &addrw->a.sa, &net->sctp.addr_waitq);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "952: {",
          "953:  struct inet_sock *inet = inet_sk(skb->sk);",
          "960:  inet->pmtudisc = transport->param_flags & SPP_PMTUD_ENABLE ?",
          "961:     IP_PMTUDISC_DO : IP_PMTUDISC_DONT;",
          "963:  SCTP_INC_STATS(sock_net(&inet->sk), SCTP_MIB_OUTSCTPPACKS);",
          "964:  return ip_queue_xmit(skb, &transport->fl);",
          "965: }",
          "",
          "[Removed Lines]",
          "955:  SCTP_DEBUG_PRINTK(\"%s: skb:%p, len:%d, src:%pI4, dst:%pI4\\n\",",
          "956:      __func__, skb, skb->len,",
          "957:      &transport->fl.u.ip4.saddr,",
          "958:      &transport->fl.u.ip4.daddr);",
          "",
          "[Added Lines]",
          "959:  pr_debug(\"%s: skb:%p, len:%d, src:%pI4, dst:%pI4\\n\", __func__, skb,",
          "960:    skb->len, &transport->fl.u.ip4.saddr, &transport->fl.u.ip4.daddr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1321:  int max_share;",
          "1322:  int order;",
          "1329:  status = -ENOBUFS;",
          "",
          "[Removed Lines]",
          "1325:  if (!sctp_sanity_check())",
          "1326:   goto out;",
          "",
          "[Added Lines]",
          "1327:  BUILD_BUG_ON(sizeof(struct sctp_ulpevent) >",
          "1328:        sizeof(((struct sk_buff *) 0)->cb));",
          "",
          "---------------"
        ],
        "net/sctp/sm_make_chunk.c||net/sctp/sm_make_chunk.c": [
          "File: net/sctp/sm_make_chunk.c -> net/sctp/sm_make_chunk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "742:  memset(gabs, 0, sizeof(gabs));",
          "743:  ctsn = sctp_tsnmap_get_ctsn(map);",
          "747:  num_gabs = sctp_tsnmap_num_gabs(map, gabs);",
          "",
          "[Removed Lines]",
          "744:  SCTP_DEBUG_PRINTK(\"sackCTSNAck sent:  0x%x.\\n\", ctsn);",
          "",
          "[Added Lines]",
          "745:  pr_debug(\"%s: sackCTSNAck sent:0x%x\\n\", __func__, ctsn);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1288:  if (!retval)",
          "1289:   goto nodata;",
          "1295:  INIT_LIST_HEAD(&retval->list);",
          "1296:  retval->skb  = skb;",
          "",
          "[Removed Lines]",
          "1291:  if (!sk) {",
          "1292:   SCTP_DEBUG_PRINTK(\"chunkifying skb %p w/o an sk\\n\", skb);",
          "1293:  }",
          "",
          "[Added Lines]",
          "1291:  if (!sk)",
          "1292:   pr_debug(\"%s: chunkifying skb:%p w/o an sk\\n\", __func__, skb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2191:   break;",
          "2192: fallthrough:",
          "2193:  default:",
          "2196:   retval = sctp_process_unk_param(asoc, param, chunk, err_chunk);",
          "2197:   break;",
          "2198:  }",
          "",
          "[Removed Lines]",
          "2194:   SCTP_DEBUG_PRINTK(\"Unrecognized param: %d for chunk %d.\\n\",",
          "2195:     ntohs(param.p->type), cid);",
          "",
          "[Added Lines]",
          "2193:   pr_debug(\"%s: unrecognized param:%d for chunk:%d\\n\",",
          "2194:     __func__, ntohs(param.p->type), cid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2516:   break;",
          "2518:  case SCTP_PARAM_HOST_NAME_ADDRESS:",
          "2520:   break;",
          "2522:  case SCTP_PARAM_SUPPORTED_ADDRESS_TYPES:",
          "",
          "[Removed Lines]",
          "2519:   SCTP_DEBUG_PRINTK(\"unimplemented SCTP_HOST_NAME_ADDRESS\\n\");",
          "",
          "[Added Lines]",
          "2519:   pr_debug(\"%s: unimplemented SCTP_HOST_NAME_ADDRESS\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2667:   break;",
          "2668:  }",
          "",
          "[Removed Lines]",
          "2665:   SCTP_DEBUG_PRINTK(\"Ignoring param: %d for association %p.\\n\",",
          "2666:       ntohs(param.p->type), asoc);",
          "",
          "[Added Lines]",
          "2665:   pr_debug(\"%s: ignoring param:%d for association:%p.\\n\",",
          "2666:     __func__, ntohs(param.p->type), asoc);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2805:    totallen += paramlen;",
          "2806:    totallen += addr_param_len;",
          "2807:    del_pickup = 1;",
          "2809:   }",
          "2810:  }",
          "",
          "[Removed Lines]",
          "2808:    SCTP_DEBUG_PRINTK(\"mkasconf_update_ip: picked same-scope del_pending addr, totallen for all addresses is %d\\n\", totallen);",
          "",
          "[Added Lines]",
          "2809:    pr_debug(\"%s: picked same-scope del_pending addr, \"",
          "2810:      \"totallen for all addresses is %d\\n\",",
          "2811:      __func__, totallen);",
          "",
          "---------------"
        ],
        "net/sctp/sm_sideeffect.c||net/sctp/sm_sideeffect.c": [
          "File: net/sctp/sm_sideeffect.c -> net/sctp/sm_sideeffect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:  sctp_bh_lock_sock(asoc->base.sk);",
          "259:  if (sock_owned_by_user(asoc->base.sk)) {",
          "263:   if (!mod_timer(&transport->T3_rtx_timer, jiffies + (HZ/20)))",
          "",
          "[Removed Lines]",
          "260:   SCTP_DEBUG_PRINTK(\"%s:Sock is busy.\\n\", __func__);",
          "",
          "[Added Lines]",
          "260:   pr_debug(\"%s: sock is busy\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:  sctp_bh_lock_sock(asoc->base.sk);",
          "299:  if (sock_owned_by_user(asoc->base.sk)) {",
          "305:   if (!mod_timer(&asoc->timers[timeout_type], jiffies + (HZ/20)))",
          "",
          "[Removed Lines]",
          "300:   SCTP_DEBUG_PRINTK(\"%s:Sock is busy: timer %d\\n\",",
          "301:       __func__,",
          "302:       timeout_type);",
          "",
          "[Added Lines]",
          "300:   pr_debug(\"%s: sock is busy: timer %d\\n\", __func__,",
          "301:     timeout_type);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:  sctp_bh_lock_sock(asoc->base.sk);",
          "379:  if (sock_owned_by_user(asoc->base.sk)) {",
          "383:   if (!mod_timer(&transport->hb_timer, jiffies + (HZ/20)))",
          "",
          "[Removed Lines]",
          "380:   SCTP_DEBUG_PRINTK(\"%s:Sock is busy.\\n\", __func__);",
          "",
          "[Added Lines]",
          "379:   pr_debug(\"%s: sock is busy\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "416:  sctp_bh_lock_sock(asoc->base.sk);",
          "417:  if (sock_owned_by_user(asoc->base.sk)) {",
          "421:   if (!mod_timer(&transport->proto_unreach_timer,",
          "",
          "[Removed Lines]",
          "418:   SCTP_DEBUG_PRINTK(\"%s:Sock is busy.\\n\", __func__);",
          "",
          "[Added Lines]",
          "417:   pr_debug(\"%s: sock is busy\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "522:  if (transport->state != SCTP_INACTIVE &&",
          "523:      (transport->error_count > transport->pathmaxrxt)) {",
          "529:   sctp_assoc_control_transport(asoc, transport,",
          "530:           SCTP_TRANSPORT_DOWN,",
          "531:           SCTP_FAILED_THRESHOLD);",
          "",
          "[Removed Lines]",
          "524:   SCTP_DEBUG_PRINTK_IPADDR(\"transport_strike:association %p\",",
          "525:       \" transport IP: port:%d failed.\\n\",",
          "526:       asoc,",
          "527:       (&transport->ipaddr),",
          "528:       ntohs(transport->ipaddr.v4.sin_port));",
          "",
          "[Added Lines]",
          "523:   pr_debug(\"%s: association:%p transport addr:%pISpc failed\\n\",",
          "524:     __func__, asoc, &transport->ipaddr.sa);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "805:  asoc->state = state;",
          "810:  if (sctp_style(sk, TCP)) {",
          "",
          "[Removed Lines]",
          "807:  SCTP_DEBUG_PRINTK(\"sctp_cmd_new_state: asoc %p[%s]\\n\",",
          "808:      asoc, sctp_state_tbl[state]);",
          "",
          "[Added Lines]",
          "804:  pr_debug(\"%s: asoc:%p[%s]\\n\", __func__, asoc, sctp_state_tbl[state]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1017:    asoc->timeouts[timer] = asoc->max_init_timeo;",
          "1018:   }",
          "1019:   asoc->init_cycle++;",
          "1029:  }",
          "1031: }",
          "",
          "[Removed Lines]",
          "1020:   SCTP_DEBUG_PRINTK(",
          "1021:    \"T1 %s Timeout adjustment\"",
          "1022:    \" init_err_counter: %d\"",
          "1023:    \" cycle: %d\"",
          "1024:    \" timeout: %ld\\n\",",
          "1025:    name,",
          "1026:    asoc->init_err_counter,",
          "1027:    asoc->init_cycle,",
          "1028:    asoc->timeouts[timer]);",
          "",
          "[Added Lines]",
          "1017:   pr_debug(\"%s: T1[%s] timeout adjustment init_err_counter:%d\"",
          "1018:     \" cycle:%d timeout:%ld\\n\", __func__, name,",
          "1019:     asoc->init_err_counter, asoc->init_cycle,",
          "1020:     asoc->timeouts[timer]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1083: #define DEBUG_PRE \\",
          "1084:  SCTP_DEBUG_PRINTK(\"sctp_do_sm prefn: \" \\",
          "1085:      \"ep %p, %s, %s, asoc %p[%s], %s\\n\", \\",
          "1086:      ep, sctp_evttype_tbl[event_type], \\",
          "1087:      (*debug_fn)(subtype), asoc, \\",
          "1088:      sctp_state_tbl[state], state_fn->name)",
          "1090: #define DEBUG_POST \\",
          "1091:  SCTP_DEBUG_PRINTK(\"sctp_do_sm postfn: \" \\",
          "1092:      \"asoc %p, status: %s\\n\", \\",
          "1093:      asoc, sctp_status_tbl[status])",
          "1095: #define DEBUG_POST_SFX \\",
          "1096:  SCTP_DEBUG_PRINTK(\"sctp_do_sm post sfx: error %d, asoc %p[%s]\\n\", \\",
          "1097:      error, asoc, \\",
          "1098:      sctp_state_tbl[(asoc && sctp_id2assoc(ep->base.sk, \\",
          "1099:      sctp_assoc2id(asoc)))?asoc->state:SCTP_STATE_CLOSED])",
          "",
          "[Added Lines]",
          "1075: #define debug_pre_sfn() \\",
          "1076:  pr_debug(\"%s[pre-fn]: ep:%p, %s, %s, asoc:%p[%s], %s\\n\", __func__, \\",
          "1077:    ep, sctp_evttype_tbl[event_type], (*debug_fn)(subtype),   \\",
          "1078:    asoc, sctp_state_tbl[state], state_fn->name)",
          "1080: #define debug_post_sfn() \\",
          "1081:  pr_debug(\"%s[post-fn]: asoc:%p, status:%s\\n\", __func__, asoc, \\",
          "1082:    sctp_status_tbl[status])",
          "1084: #define debug_post_sfx() \\",
          "1085:  pr_debug(\"%s[post-sfx]: error:%d, asoc:%p[%s]\\n\", __func__, error, \\",
          "1086:    asoc, sctp_state_tbl[(asoc && sctp_id2assoc(ep->base.sk, \\",
          "1087:    sctp_assoc2id(asoc))) ? asoc->state : SCTP_STATE_CLOSED])",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1130:  sctp_init_cmd_seq(&commands);",
          "1133:  status = (*state_fn->fn)(net, ep, asoc, subtype, event_arg, &commands);",
          "1136:  error = sctp_side_effects(event_type, subtype, state,",
          "1137:       ep, asoc, event_arg, status,",
          "1138:       &commands, gfp);",
          "1141:  return error;",
          "1142: }",
          "",
          "[Removed Lines]",
          "1132:  DEBUG_PRE;",
          "1134:  DEBUG_POST;",
          "1139:  DEBUG_POST_SFX;",
          "1144: #undef DEBUG_PRE",
          "1145: #undef DEBUG_POST",
          "",
          "[Added Lines]",
          "1119:  debug_pre_sfn();",
          "1121:  debug_post_sfn();",
          "1126:  debug_post_sfx();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1173:  switch (status) {",
          "1174:  case SCTP_DISPOSITION_DISCARD:",
          "1178:   break;",
          "1180:  case SCTP_DISPOSITION_NOMEM:",
          "",
          "[Removed Lines]",
          "1175:   SCTP_DEBUG_PRINTK(\"Ignored sctp protocol event - state %d, \"",
          "1176:       \"event_type %d, event_id %d\\n\",",
          "1177:       state, event_type, subtype.chunk);",
          "",
          "[Added Lines]",
          "1159:   pr_debug(\"%s: ignored sctp protocol event - state:%d, \"",
          "1160:     \"event_type:%d, event_id:%d\\n\", __func__, state,",
          "1161:     event_type, subtype.chunk);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1426:   case SCTP_CMD_CHUNK_ULP:",
          "1431:    sctp_ulpq_tail_data(&asoc->ulpq, cmd->obj.chunk,",
          "1432:          GFP_ATOMIC);",
          "1433:    break;",
          "1435:   case SCTP_CMD_EVENT_ULP:",
          "1440:    sctp_ulpq_tail_event(&asoc->ulpq, cmd->obj.ulpevent);",
          "1441:    break;",
          "",
          "[Removed Lines]",
          "1428:    SCTP_DEBUG_PRINTK(\"sm_sideff: %s %p, %s %p.\\n\",",
          "1429:        \"chunk_up:\", cmd->obj.chunk,",
          "1430:        \"ulpq:\", &asoc->ulpq);",
          "1437:    SCTP_DEBUG_PRINTK(\"sm_sideff: %s %p, %s %p.\\n\",",
          "1438:        \"event_up:\",cmd->obj.ulpevent,",
          "1439:        \"ulpq:\",&asoc->ulpq);",
          "",
          "[Added Lines]",
          "1412:    pr_debug(\"%s: sm_sideff: chunk_up:%p, ulpq:%p\\n\",",
          "1413:      __func__, cmd->obj.chunk, &asoc->ulpq);",
          "1421:    pr_debug(\"%s: sm_sideff: event_up:%p, ulpq:%p\\n\",",
          "1422:      __func__, cmd->obj.ulpevent, &asoc->ulpq);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1601:    break;",
          "1603:   case SCTP_CMD_REPORT_BAD_TAG:",
          "1605:    break;",
          "1607:   case SCTP_CMD_STRIKE:",
          "",
          "[Removed Lines]",
          "1604:    SCTP_DEBUG_PRINTK(\"vtag mismatch!\\n\");",
          "",
          "[Added Lines]",
          "1588:    pr_debug(\"%s: vtag mismatch!\\n\", __func__);",
          "",
          "---------------"
        ],
        "net/sctp/sm_statefuns.c||net/sctp/sm_statefuns.c": [
          "File: net/sctp/sm_statefuns.c -> net/sctp/sm_statefuns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1180:  if (time_after(hbinfo->sent_at, jiffies) ||",
          "1181:      time_after(jiffies, hbinfo->sent_at + max_interval)) {",
          "1185:   return SCTP_DISPOSITION_DISCARD;",
          "1186:  }",
          "",
          "[Removed Lines]",
          "1182:   SCTP_DEBUG_PRINTK(\"%s: HEARTBEAT ACK with invalid timestamp \"",
          "1183:       \"received for transport: %p\\n\",",
          "1184:        __func__, link);",
          "",
          "[Added Lines]",
          "1182:   pr_debug(\"%s: HEARTBEAT ACK with invalid timestamp received \"",
          "1183:     \"for transport:%p\\n\", __func__, link);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2562:         const struct sctp_association *asoc,",
          "2563:         struct sctp_transport *transport)",
          "2564: {",
          "2566:  sctp_add_cmd_sf(commands, SCTP_CMD_NEW_STATE,",
          "2567:    SCTP_STATE(SCTP_STATE_CLOSED));",
          "2568:  SCTP_INC_STATS(net, SCTP_MIB_ABORTEDS);",
          "",
          "[Removed Lines]",
          "2565:  SCTP_DEBUG_PRINTK(\"ABORT received (INIT).\\n\");",
          "",
          "[Added Lines]",
          "2565:  pr_debug(\"%s: ABORT received (INIT)\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2637:  ctsn = ntohl(sdh->cum_tsn_ack);",
          "2639:  if (TSN_lt(ctsn, asoc->ctsn_ack_point)) {",
          "2642:   return SCTP_DISPOSITION_DISCARD;",
          "2643:  }",
          "",
          "[Removed Lines]",
          "2640:   SCTP_DEBUG_PRINTK(\"ctsn %x\\n\", ctsn);",
          "2641:   SCTP_DEBUG_PRINTK(\"ctsn_ack_point %x\\n\", asoc->ctsn_ack_point);",
          "",
          "[Added Lines]",
          "2642:   pr_debug(\"%s: ctsn:%x, ctsn_ack_point:%x\\n\", __func__, ctsn,",
          "2643:     asoc->ctsn_ack_point);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2721:  ctsn = ntohl(sdh->cum_tsn_ack);",
          "2723:  if (TSN_lt(ctsn, asoc->ctsn_ack_point)) {",
          "2726:   return SCTP_DISPOSITION_DISCARD;",
          "2727:  }",
          "",
          "[Removed Lines]",
          "2724:   SCTP_DEBUG_PRINTK(\"ctsn %x\\n\", ctsn);",
          "2725:   SCTP_DEBUG_PRINTK(\"ctsn_ack_point %x\\n\", asoc->ctsn_ack_point);",
          "",
          "[Added Lines]",
          "2727:   pr_debug(\"%s: ctsn:%x, ctsn_ack_point:%x\\n\", __func__, ctsn,",
          "2728:     asoc->ctsn_ack_point);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3176:  if (TSN_lt(ctsn, asoc->ctsn_ack_point)) {",
          "3179:   return SCTP_DISPOSITION_DISCARD;",
          "3180:  }",
          "",
          "[Removed Lines]",
          "3177:   SCTP_DEBUG_PRINTK(\"ctsn %x\\n\", ctsn);",
          "3178:   SCTP_DEBUG_PRINTK(\"ctsn_ack_point %x\\n\", asoc->ctsn_ack_point);",
          "",
          "[Added Lines]",
          "3181:   pr_debug(\"%s: ctsn:%x, ctsn_ack_point:%x\\n\", __func__, ctsn,",
          "3182:     asoc->ctsn_ack_point);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3859:  skb_pull(chunk->skb, len);",
          "3861:  tsn = ntohl(fwdtsn_hdr->new_cum_tsn);",
          "",
          "[Removed Lines]",
          "3862:  SCTP_DEBUG_PRINTK(\"%s: TSN 0x%x.\\n\", __func__, tsn);",
          "",
          "[Added Lines]",
          "3867:  pr_debug(\"%s: TSN 0x%x\\n\", __func__, tsn);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3927:  skb_pull(chunk->skb, len);",
          "3929:  tsn = ntohl(fwdtsn_hdr->new_cum_tsn);",
          "",
          "[Removed Lines]",
          "3930:  SCTP_DEBUG_PRINTK(\"%s: TSN 0x%x.\\n\", __func__, tsn);",
          "",
          "[Added Lines]",
          "3935:  pr_debug(\"%s: TSN 0x%x\\n\", __func__, tsn);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4166:  struct sctp_chunk *err_chunk;",
          "4167:  sctp_chunkhdr_t *hdr;",
          "4171:  if (!sctp_vtag_verify(unk_chunk, asoc))",
          "4172:   return sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);",
          "",
          "[Removed Lines]",
          "4169:  SCTP_DEBUG_PRINTK(\"Processing the unknown chunk id %d.\\n\", type.chunk);",
          "",
          "[Added Lines]",
          "4174:  pr_debug(\"%s: processing unknown chunk id:%d\\n\", __func__, type.chunk);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4256:   return sctp_sf_violation_chunklen(net, ep, asoc, type, arg,",
          "4257:         commands);",
          "4260:  return SCTP_DISPOSITION_DISCARD;",
          "4261: }",
          "",
          "[Removed Lines]",
          "4259:  SCTP_DEBUG_PRINTK(\"Chunk %d is discarded\\n\", type.chunk);",
          "",
          "[Added Lines]",
          "4264:  pr_debug(\"%s: chunk:%d is discarded\\n\", __func__, type.chunk);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5184:  void *arg,",
          "5185:  sctp_cmd_seq_t *commands)",
          "5186: {",
          "5188:  return SCTP_DISPOSITION_DISCARD;",
          "5189: }",
          "",
          "[Removed Lines]",
          "5187:  SCTP_DEBUG_PRINTK(\"Primitive type %d is ignored.\\n\", type.primitive);",
          "",
          "[Added Lines]",
          "5193:  pr_debug(\"%s: primitive type:%d is ignored\\n\", __func__,",
          "5194:    type.primitive);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5379:      void *arg,",
          "5380:      sctp_cmd_seq_t *commands)",
          "5381: {",
          "5383:  return SCTP_DISPOSITION_DISCARD;",
          "5384: }",
          "",
          "[Removed Lines]",
          "5382:  SCTP_DEBUG_PRINTK(\"The event other type %d is ignored\\n\", type.other);",
          "",
          "[Added Lines]",
          "5390:  pr_debug(\"%s: the event other type:%d is ignored\\n\",",
          "5391:    __func__, type.other);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5527:  struct sctp_bind_addr *bp;",
          "5528:  int attempts = asoc->init_err_counter + 1;",
          "5531:  SCTP_INC_STATS(net, SCTP_MIB_T1_INIT_EXPIREDS);",
          "5533:  if (attempts <= asoc->max_init_attempts) {",
          "",
          "[Removed Lines]",
          "5530:  SCTP_DEBUG_PRINTK(\"Timer T1 expired (INIT).\\n\");",
          "",
          "[Added Lines]",
          "5540:  pr_debug(\"%s: timer T1 expired (INIT)\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5547:   sctp_add_cmd_sf(commands, SCTP_CMD_REPLY, SCTP_CHUNK(repl));",
          "5548:  } else {",
          "5552:   sctp_add_cmd_sf(commands, SCTP_CMD_SET_SK_ERR,",
          "5553:     SCTP_ERROR(ETIMEDOUT));",
          "5554:   sctp_add_cmd_sf(commands, SCTP_CMD_INIT_FAILED,",
          "",
          "[Removed Lines]",
          "5549:   SCTP_DEBUG_PRINTK(\"Giving up on INIT, attempts: %d\"",
          "5550:       \" max_init_attempts: %d\\n\",",
          "5551:       attempts, asoc->max_init_attempts);",
          "",
          "[Added Lines]",
          "5560:   pr_debug(\"%s: giving up on INIT, attempts:%d \"",
          "5561:     \"max_init_attempts:%d\\n\", __func__, attempts,",
          "5562:     asoc->max_init_attempts);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5588:  struct sctp_chunk *repl = NULL;",
          "5589:  int attempts = asoc->init_err_counter + 1;",
          "5592:  SCTP_INC_STATS(net, SCTP_MIB_T1_COOKIE_EXPIREDS);",
          "5594:  if (attempts <= asoc->max_init_attempts) {",
          "",
          "[Removed Lines]",
          "5591:  SCTP_DEBUG_PRINTK(\"Timer T1 expired (COOKIE-ECHO).\\n\");",
          "",
          "[Added Lines]",
          "5603:  pr_debug(\"%s: timer T1 expired (COOKIE-ECHO)\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5636: {",
          "5637:  struct sctp_chunk *reply = NULL;",
          "5640:  SCTP_INC_STATS(net, SCTP_MIB_T2_SHUTDOWN_EXPIREDS);",
          "5642:  ((struct sctp_association *)asoc)->shutdown_retries++;",
          "",
          "[Removed Lines]",
          "5639:  SCTP_DEBUG_PRINTK(\"Timer T2 expired.\\n\");",
          "",
          "[Added Lines]",
          "5652:  pr_debug(\"%s: timer T2 expired\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5777: {",
          "5778:  struct sctp_chunk *reply = NULL;",
          "5781:  SCTP_INC_STATS(net, SCTP_MIB_T5_SHUTDOWN_GUARD_EXPIREDS);",
          "5783:  reply = sctp_make_abort(asoc, NULL, 0);",
          "",
          "[Removed Lines]",
          "5780:  SCTP_DEBUG_PRINTK(\"Timer T5 expired.\\n\");",
          "",
          "[Added Lines]",
          "5794:  pr_debug(\"%s: timer T5 expired\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5892:      void *arg,",
          "5893:      sctp_cmd_seq_t *commands)",
          "5894: {",
          "5896:  return SCTP_DISPOSITION_CONSUME;",
          "5897: }",
          "",
          "[Removed Lines]",
          "5895:  SCTP_DEBUG_PRINTK(\"Timer %d ignored.\\n\", type.chunk);",
          "",
          "[Added Lines]",
          "5910:  pr_debug(\"%s: timer %d ignored\\n\", __func__, type.chunk);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6102:  skb_pull(chunk->skb, sizeof(sctp_datahdr_t));",
          "6104:  tsn = ntohl(data_hdr->tsn);",
          "",
          "[Removed Lines]",
          "6105:  SCTP_DEBUG_PRINTK(\"eat_data: TSN 0x%x.\\n\", tsn);",
          "",
          "[Added Lines]",
          "6121:  pr_debug(\"%s: TSN 0x%x\\n\", __func__, tsn);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6180:   if (sctp_tsnmap_has_gap(map) &&",
          "6181:       (sctp_tsnmap_get_ctsn(map) + 1) == tsn) {",
          "6183:    deliver = SCTP_CMD_RENEGE;",
          "6184:   } else {",
          "6188:    return SCTP_IERROR_IGNORE_TSN;",
          "6189:   }",
          "6190:  }",
          "",
          "[Removed Lines]",
          "6182:    SCTP_DEBUG_PRINTK(\"Reneging for tsn:%u\\n\", tsn);",
          "6185:    SCTP_DEBUG_PRINTK(\"Discard tsn: %u len: %Zd, \"",
          "6186:        \"rwnd: %d\\n\", tsn, datalen,",
          "6187:        asoc->rwnd);",
          "",
          "[Added Lines]",
          "6198:    pr_debug(\"%s: reneging for tsn:%u\\n\", __func__, tsn);",
          "6201:    pr_debug(\"%s: discard tsn:%u len:%zu, rwnd:%d\\n\",",
          "6202:      __func__, tsn, datalen, asoc->rwnd);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6199:  if (*sk->sk_prot_creator->memory_pressure) {",
          "6200:   if (sctp_tsnmap_has_gap(map) &&",
          "6201:             (sctp_tsnmap_get_ctsn(map) + 1) == tsn) {",
          "6203:    deliver = SCTP_CMD_RENEGE;",
          "6204:    }",
          "6205:  }",
          "",
          "[Removed Lines]",
          "6202:    SCTP_DEBUG_PRINTK(\"Under Pressure! Reneging for tsn:%u\\n\", tsn);",
          "",
          "[Added Lines]",
          "6218:    pr_debug(\"%s: under pressure, reneging for tsn:%u\\n\",",
          "6219:      __func__, tsn);",
          "",
          "---------------"
        ],
        "net/sctp/socket.c||net/sctp/socket.c": [
          "File: net/sctp/socket.c -> net/sctp/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:  sctp_lock_sock(sk);",
          "288:  if (!sctp_sk(sk)->ep->base.bind_addr.port)",
          "",
          "[Removed Lines]",
          "284:  SCTP_DEBUG_PRINTK(\"sctp_bind(sk: %p, addr: %p, addr_len: %d)\\n\",",
          "285:      sk, addr, addr_len);",
          "",
          "[Added Lines]",
          "284:  pr_debug(\"%s: sk:%p, addr:%p, addr_len:%d\\n\", __func__, sk,",
          "285:    addr, addr_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:  af = sctp_sockaddr_af(sp, addr, len);",
          "344:  if (!af) {",
          "347:   return -EINVAL;",
          "348:  }",
          "350:  snum = ntohs(addr->v4.sin_port);",
          "360:  if (!sp->pf->bind_verify(sp, addr))",
          "",
          "[Removed Lines]",
          "345:   SCTP_DEBUG_PRINTK(\"sctp_do_bind(sk: %p, newaddr: %p, len: %d) EINVAL\\n\",",
          "346:       sk, addr, len);",
          "352:  SCTP_DEBUG_PRINTK_IPADDR(\"sctp_do_bind(sk: %p, new addr: \",",
          "353:      \", port: %d, new port: %d, len: %d)\\n\",",
          "354:      sk,",
          "355:      addr,",
          "356:      bp->port, snum,",
          "357:      len);",
          "",
          "[Added Lines]",
          "345:   pr_debug(\"%s: sk:%p, newaddr:%p, len:%d EINVAL\\n\",",
          "346:     __func__, sk, addr, len);",
          "352:  pr_debug(\"%s: sk:%p, new addr:%pISc, port:%d, new port:%d, len:%d\\n\",",
          "353:    __func__, sk, &addr->sa, bp->port, snum, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:   if (!snum)",
          "369:    snum = bp->port;",
          "370:   else if (snum != bp->port) {",
          "374:    return -EINVAL;",
          "375:   }",
          "376:  }",
          "",
          "[Removed Lines]",
          "371:    SCTP_DEBUG_PRINTK(\"sctp_do_bind:\"",
          "372:       \" New port %d does not match existing port \"",
          "373:       \"%d.\\n\", snum, bp->port);",
          "",
          "[Added Lines]",
          "367:    pr_debug(\"%s: new port %d doesn't match existing port \"",
          "368:      \"%d\\n\", __func__, snum, bp->port);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "468:  struct sockaddr *sa_addr;",
          "469:  struct sctp_af *af;",
          "474:  addr_buf = addrs;",
          "475:  for (cnt = 0; cnt < addrcnt; cnt++) {",
          "",
          "[Removed Lines]",
          "471:  SCTP_DEBUG_PRINTK(\"sctp_bindx_add (sk: %p, addrs: %p, addrcnt: %d)\\n\",",
          "472:      sk, addrs, addrcnt);",
          "",
          "[Added Lines]",
          "466:  pr_debug(\"%s: sk:%p, addrs:%p, addrcnt:%d\\n\", __func__, sk,",
          "467:    addrs, addrcnt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "535:  sp = sctp_sk(sk);",
          "536:  ep = sp->ep;",
          "541:  list_for_each_entry(asoc, &ep->asocs, asocs) {",
          "543:   if (!asoc->peer.asconf_capable)",
          "544:    continue;",
          "",
          "[Removed Lines]",
          "538:  SCTP_DEBUG_PRINTK(\"%s: (sk: %p, addrs: %p, addrcnt: %d)\\n\",",
          "539:      __func__, sk, addrs, addrcnt);",
          "",
          "[Added Lines]",
          "533:  pr_debug(\"%s: sk:%p, addrs:%p, addrcnt:%d\\n\",",
          "534:    __func__, sk, addrs, addrcnt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "646:  union sctp_addr *sa_addr;",
          "647:  struct sctp_af *af;",
          "652:  addr_buf = addrs;",
          "653:  for (cnt = 0; cnt < addrcnt; cnt++) {",
          "",
          "[Removed Lines]",
          "649:  SCTP_DEBUG_PRINTK(\"sctp_bindx_rem (sk: %p, addrs: %p, addrcnt: %d)\\n\",",
          "650:      sk, addrs, addrcnt);",
          "",
          "[Added Lines]",
          "643:  pr_debug(\"%s: sk:%p, addrs:%p, addrcnt:%d\\n\",",
          "644:    __func__, sk, addrs, addrcnt);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "740:  sp = sctp_sk(sk);",
          "741:  ep = sp->ep;",
          "746:  list_for_each_entry(asoc, &ep->asocs, asocs) {",
          "",
          "[Removed Lines]",
          "743:  SCTP_DEBUG_PRINTK(\"%s: (sk: %p, addrs: %p, addrcnt: %d)\\n\",",
          "744:      __func__, sk, addrs, addrcnt);",
          "",
          "[Added Lines]",
          "737:  pr_debug(\"%s: sk:%p, addrs:%p, addrcnt:%d\\n\",",
          "738:    __func__, sk, addrs, addrcnt);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "808:     sin6 = (struct sockaddr_in6 *)addrs;",
          "809:     asoc->asconf_addr_del_pending->v6.sin6_addr = sin6->sin6_addr;",
          "810:    }",
          "814:    asoc->src_out_of_asoc_ok = 1;",
          "815:    stored = 1;",
          "816:    goto skip_mkasconf;",
          "",
          "[Removed Lines]",
          "811:    SCTP_DEBUG_PRINTK_IPADDR(\"send_asconf_del_ip: keep the last address asoc: %p \",",
          "812:        \" at %p\\n\", asoc, asoc->asconf_addr_del_pending,",
          "813:        asoc->asconf_addr_del_pending);",
          "",
          "[Added Lines]",
          "806:    pr_debug(\"%s: keep the last address asoc:%p %pISc at %p\\n\",",
          "807:      __func__, asoc, &asoc->asconf_addr_del_pending->sa,",
          "808:      asoc->asconf_addr_del_pending);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "972:  void *addr_buf;",
          "973:  struct sctp_af *af;",
          "978:  if (unlikely(addrs_size <= 0))",
          "979:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "975:  SCTP_DEBUG_PRINTK(\"sctp_setsockopt_bindx: sk %p addrs %p\"",
          "976:      \" addrs_size %d opt %d\\n\", sk, addrs, addrs_size, op);",
          "",
          "[Added Lines]",
          "971:  pr_debug(\"%s: sk:%p addrs:%p addrs_size:%d opt:%d\\n\",",
          "972:    __func__, sk, addrs, addrs_size, op);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1231:  asoc = NULL;",
          "1233: out_free:",
          "1238:  if (asoc) {",
          "",
          "[Removed Lines]",
          "1235:  SCTP_DEBUG_PRINTK(\"About to exit __sctp_connect() free asoc: %p\"",
          "1236:      \" kaddrs: %p err: %d\\n\",",
          "1237:      asoc, kaddrs, err);",
          "",
          "[Added Lines]",
          "1230:  pr_debug(\"%s: took out_free path with asoc:%p kaddrs:%p err:%d\\n\",",
          "1231:    __func__, asoc, kaddrs, err);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1316:  int err = 0;",
          "1317:  struct sockaddr *kaddrs;",
          "1322:  if (unlikely(addrs_size <= 0))",
          "1323:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "1319:  SCTP_DEBUG_PRINTK(\"%s - sk %p addrs %p addrs_size %d\\n\",",
          "1320:      __func__, sk, addrs, addrs_size);",
          "",
          "[Added Lines]",
          "1314:  pr_debug(\"%s: sk:%p addrs:%p addrs_size:%d\\n\",",
          "1315:    __func__, sk, addrs, addrs_size);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1468:  struct list_head *pos, *temp;",
          "1469:  unsigned int data_was_unread;",
          "1473:  sctp_lock_sock(sk);",
          "1474:  sk->sk_shutdown = SHUTDOWN_MASK;",
          "",
          "[Removed Lines]",
          "1471:  SCTP_DEBUG_PRINTK(\"sctp_close(sk: 0x%p, timeout:%ld)\\n\", sk, timeout);",
          "",
          "[Added Lines]",
          "1466:  pr_debug(\"%s: sk:%p, timeout:%ld\\n\", __func__, sk, timeout);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1594:  struct sctp_datamsg *datamsg;",
          "1595:  int msg_flags = msg->msg_flags;",
          "1600:  err = 0;",
          "1601:  sp = sctp_sk(sk);",
          "1602:  ep = sp->ep;",
          "1607:  if (sctp_style(sk, TCP) && sctp_sstate(sk, LISTENING)) {",
          "",
          "[Removed Lines]",
          "1597:  SCTP_DEBUG_PRINTK(\"sctp_sendmsg(sk: %p, msg: %p, msg_len: %zu)\\n\",",
          "1598:      sk, msg, msg_len);",
          "1604:  SCTP_DEBUG_PRINTK(\"Using endpoint: %p.\\n\", ep);",
          "",
          "[Added Lines]",
          "1596:  pr_debug(\"%s: sk:%p, msg:%p, msg_len:%zu ep:%p\\n\", __func__, sk,",
          "1597:    msg, msg_len, ep);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1613:  err = sctp_msghdr_parse(msg, &cmsgs);",
          "1615:  if (err) {",
          "1617:   goto out_nounlock;",
          "1618:  }",
          "",
          "[Removed Lines]",
          "1616:   SCTP_DEBUG_PRINTK(\"msghdr parse err = %x\\n\", err);",
          "",
          "[Added Lines]",
          "1608:   pr_debug(\"%s: msghdr parse err:%x\\n\", __func__, err);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1645:   associd = sinfo->sinfo_assoc_id;",
          "1646:  }",
          "1652:  if (sctp_style(sk, TCP) && (sinfo_flags & (SCTP_EOF | SCTP_ABORT))) {",
          "",
          "[Removed Lines]",
          "1648:  SCTP_DEBUG_PRINTK(\"msg_len: %zu, sinfo_flags: 0x%x\\n\",",
          "1649:      msg_len, sinfo_flags);",
          "",
          "[Added Lines]",
          "1640:  pr_debug(\"%s: msg_len:%zu, sinfo_flags:0x%x\\n\", __func__,",
          "1641:    msg_len, sinfo_flags);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1676:  transport = NULL;",
          "1680:  sctp_lock_sock(sk);",
          "",
          "[Removed Lines]",
          "1678:  SCTP_DEBUG_PRINTK(\"About to look up association.\\n\");",
          "",
          "[Added Lines]",
          "1670:  pr_debug(\"%s: about to look up association\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1705:  }",
          "1707:  if (asoc) {",
          "",
          "[Removed Lines]",
          "1708:   SCTP_DEBUG_PRINTK(\"Just looked up association: %p.\\n\", asoc);",
          "",
          "[Added Lines]",
          "1700:   pr_debug(\"%s: just looked up association:%p\\n\", __func__, asoc);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1718:   }",
          "1720:   if (sinfo_flags & SCTP_EOF) {",
          "1723:    sctp_primitive_SHUTDOWN(net, asoc, NULL);",
          "1724:    err = 0;",
          "1725:    goto out_unlock;",
          "",
          "[Removed Lines]",
          "1721:    SCTP_DEBUG_PRINTK(\"Shutting down association: %p\\n\",",
          "1722:        asoc);",
          "",
          "[Added Lines]",
          "1713:    pr_debug(\"%s: shutting down association:%p\\n\",",
          "1714:      __func__, asoc);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1732:     goto out_unlock;",
          "1733:    }",
          "1736:    sctp_primitive_ABORT(net, asoc, chunk);",
          "1737:    err = 0;",
          "1738:    goto out_unlock;",
          "",
          "[Removed Lines]",
          "1735:    SCTP_DEBUG_PRINTK(\"Aborting association: %p\\n\", asoc);",
          "",
          "[Added Lines]",
          "1728:    pr_debug(\"%s: aborting association:%p\\n\",",
          "1729:      __func__, asoc);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1743:  if (!asoc) {",
          "1746:   if (sinfo_flags & (SCTP_EOF | SCTP_ABORT)) {",
          "1747:    err = -EINVAL;",
          "",
          "[Removed Lines]",
          "1744:   SCTP_DEBUG_PRINTK(\"There is no association yet.\\n\");",
          "",
          "[Added Lines]",
          "1739:   pr_debug(\"%s: there is no association yet\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1840:  }",
          "1845:  if (!sinfo) {",
          "",
          "[Removed Lines]",
          "1843:  SCTP_DEBUG_PRINTK(\"We have a valid association.\\n\");",
          "",
          "[Added Lines]",
          "1838:  pr_debug(\"%s: we have a valid association\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1909:   err = sctp_primitive_ASSOCIATE(net, asoc, NULL);",
          "1910:   if (err < 0)",
          "1911:    goto out_free;",
          "1913:  }",
          "",
          "[Removed Lines]",
          "1912:   SCTP_DEBUG_PRINTK(\"We associated primitively.\\n\");",
          "",
          "[Added Lines]",
          "1908:   pr_debug(\"%s: we associated primitively\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1937:  err = sctp_primitive_SEND(net, asoc, datamsg);",
          "1940:   sctp_datamsg_free(datamsg);",
          "",
          "[Removed Lines]",
          "1939:  if (err)",
          "1941:  else",
          "1942:   sctp_datamsg_put(datamsg);",
          "1944:  SCTP_DEBUG_PRINTK(\"We sent primitively.\\n\");",
          "1946:  if (err)",
          "1947:   goto out_free;",
          "1948:  else",
          "1949:   err = msg_len;",
          "",
          "[Added Lines]",
          "1935:  if (err) {",
          "1937:   goto out_free;",
          "1938:  }",
          "1940:  pr_debug(\"%s: we sent primitively\\n\", __func__);",
          "1942:  sctp_datamsg_put(datamsg);",
          "1943:  err = msg_len;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2041:  int err = 0;",
          "2042:  int skb_len;",
          "2049:  sctp_lock_sock(sk);",
          "",
          "[Removed Lines]",
          "2044:  SCTP_DEBUG_PRINTK(\"sctp_recvmsg(%s: %p, %s: %p, %s: %zd, %s: %d, %s: \"",
          "2045:      \"0x%x, %s: %p)\\n\", \"sk\", sk, \"msghdr\", msg,",
          "2046:      \"len\", len, \"knoblauch\", noblock,",
          "2047:      \"flags\", flags, \"addr_len\", addr_len);",
          "",
          "[Added Lines]",
          "2038:  pr_debug(\"%s: sk:%p, msghdr:%p, len:%zd, noblock:%d, flags:0x%x, \"",
          "2039:    \"addr_len:%p)\\n\", __func__, sk, msg, len, noblock, flags,",
          "2040:    addr_len);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3087:  err = sctp_send_asconf(asoc, chunk);",
          "3091:  return err;",
          "3092: }",
          "",
          "[Removed Lines]",
          "3089:  SCTP_DEBUG_PRINTK(\"We set peer primary addr primitively.\\n\");",
          "",
          "[Added Lines]",
          "3082:  pr_debug(\"%s: we set peer primary addr primitively\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3561: {",
          "3562:  int retval = 0;",
          "",
          "[Removed Lines]",
          "3564:  SCTP_DEBUG_PRINTK(\"sctp_setsockopt(sk: %p... optname: %d)\\n\",",
          "3565:      sk, optname);",
          "",
          "[Added Lines]",
          "3557:  pr_debug(\"%s: sk:%p, optname:%d\\n\", __func__, sk, optname);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3725:  sctp_lock_sock(sk);",
          "3731:  af = sctp_get_af_specific(addr->sa_family);",
          "",
          "[Removed Lines]",
          "3727:  SCTP_DEBUG_PRINTK(\"%s - sk: %p, sockaddr: %p, addr_len: %d\\n\",",
          "3728:      __func__, sk, addr, addr_len);",
          "",
          "[Added Lines]",
          "3719:  pr_debug(\"%s: sk:%p, sockaddr:%p, addr_len:%d\\n\", __func__, sk,",
          "3720:    addr, addr_len);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3855:  struct net *net = sock_net(sk);",
          "3856:  struct sctp_sock *sp;",
          "3860:  sp = sctp_sk(sk);",
          "",
          "[Removed Lines]",
          "3858:  SCTP_DEBUG_PRINTK(\"sctp_init_sock(sk: %p)\\n\", sk);",
          "",
          "[Added Lines]",
          "3850:  pr_debug(\"%s: sk:%p\\n\", __func__, sk);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3990: {",
          "3991:  struct sctp_sock *sp;",
          "3996:  sp = sctp_sk(sk);",
          "",
          "[Removed Lines]",
          "3993:  SCTP_DEBUG_PRINTK(\"sctp_destroy_sock(sk: %p)\\n\", sk);",
          "",
          "[Added Lines]",
          "3985:  pr_debug(\"%s: sk:%p\\n\", __func__, sk);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4123:   goto out;",
          "4124:  }",
          "4130:  if (copy_to_user(optval, &status, len)) {",
          "4131:   retval = -EFAULT;",
          "",
          "[Removed Lines]",
          "4126:  SCTP_DEBUG_PRINTK(\"sctp_getsockopt_sctp_status(%d): %d %d %d\\n\",",
          "4127:      len, status.sstat_state, status.sstat_rwnd,",
          "4128:      status.sstat_assoc_id);",
          "",
          "[Added Lines]",
          "4118:  pr_debug(\"%s: len:%d, state:%d, rwnd:%d, assoc_id:%d\\n\",",
          "4119:    __func__, len, status.sstat_state, status.sstat_rwnd,",
          "4120:    status.sstat_assoc_id);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4333:   return PTR_ERR(newfile);",
          "4334:  }",
          "4340:  if (put_user(len, optlen)) {",
          "",
          "[Removed Lines]",
          "4336:  SCTP_DEBUG_PRINTK(\"%s: sk: %p newsk: %p sd: %d\\n\",",
          "4337:      __func__, sk, newsock->sk, retval);",
          "",
          "[Added Lines]",
          "4328:  pr_debug(\"%s: sk:%p, newsk:%p, sd:%d\\n\", __func__, sk, newsock->sk,",
          "4329:    retval);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4467:   trans = sctp_addr_id2transport(sk, &params.spp_address,",
          "4468:             params.spp_assoc_id);",
          "4469:   if (!trans) {",
          "4471:    return -EINVAL;",
          "4472:   }",
          "4473:  }",
          "",
          "[Removed Lines]",
          "4470:    SCTP_DEBUG_PRINTK(\"Failed no transport\\n\");",
          "",
          "[Added Lines]",
          "4462:    pr_debug(\"%s: failed no transport\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4479:  asoc = sctp_id2assoc(sk, params.spp_assoc_id);",
          "4480:  if (!asoc && params.spp_assoc_id && sctp_style(sk, UDP)) {",
          "4482:   return -EINVAL;",
          "4483:  }",
          "",
          "[Removed Lines]",
          "4481:   SCTP_DEBUG_PRINTK(\"Failed no association\\n\");",
          "",
          "[Added Lines]",
          "4473:   pr_debug(\"%s: failed no association\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "5698:  if (put_user(len, optlen))",
          "5699:   return -EFAULT;",
          "5704:  if (copy_to_user(optval, &sas, len))",
          "5705:   return -EFAULT;",
          "",
          "[Removed Lines]",
          "5701:  SCTP_DEBUG_PRINTK(\"sctp_getsockopt_assoc_stat(%d): %d\\n\",",
          "5702:      len, sas.sas_assoc_id);",
          "",
          "[Added Lines]",
          "5693:  pr_debug(\"%s: len:%d, assoc_id:%d\\n\", __func__, len, sas.sas_assoc_id);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "5713:  int retval = 0;",
          "5714:  int len;",
          "",
          "[Removed Lines]",
          "5716:  SCTP_DEBUG_PRINTK(\"sctp_getsockopt(sk: %p... optname: %d)\\n\",",
          "5717:      sk, optname);",
          "",
          "[Added Lines]",
          "5707:  pr_debug(\"%s: sk:%p, optname:%d\\n\", __func__, sk, optname);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "5895:  snum = ntohs(addr->v4.sin_port);",
          "5898:  sctp_local_bh_disable();",
          "5900:  if (snum == 0) {",
          "",
          "[Removed Lines]",
          "5897:  SCTP_DEBUG_PRINTK(\"sctp_get_port() begins, snum=%d\\n\", snum);",
          "",
          "[Added Lines]",
          "5887:  pr_debug(\"%s: begins, snum:%d\\n\", __func__, snum);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "5960:   int reuse = sk->sk_reuse;",
          "5961:   struct sock *sk2;",
          "5964:   if (pp->fastreuse && sk->sk_reuse &&",
          "5965:    sk->sk_state != SCTP_SS_LISTENING)",
          "5966:    goto success;",
          "",
          "[Removed Lines]",
          "5963:   SCTP_DEBUG_PRINTK(\"sctp_get_port() found a possible match\\n\");",
          "",
          "[Added Lines]",
          "5954:   pr_debug(\"%s: found a possible match\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "5990:     goto fail_unlock;",
          "5991:    }",
          "5992:   }",
          "5994:  }",
          "5995: pp_not_found:",
          "",
          "[Removed Lines]",
          "5993:   SCTP_DEBUG_PRINTK(\"sctp_get_port(): Found a match\\n\");",
          "",
          "[Added Lines]",
          "5986:   pr_debug(\"%s: found a match\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "6480:  timeo = sock_rcvtimeo(sk, noblock);",
          "6485:  do {",
          "",
          "[Removed Lines]",
          "6482:  SCTP_DEBUG_PRINTK(\"Timeout: timeo: %ld, MAX: %ld.\\n\",",
          "6483:      timeo, MAX_SCHEDULE_TIMEOUT);",
          "",
          "[Added Lines]",
          "6475:  pr_debug(\"%s: timeo:%ld, max:%ld\\n\", __func__, timeo,",
          "6476:    MAX_SCHEDULE_TIMEOUT);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "6611:  long current_timeo = *timeo_p;",
          "6612:  DEFINE_WAIT(wait);",
          "6618:  sctp_association_hold(asoc);",
          "",
          "[Removed Lines]",
          "6614:  SCTP_DEBUG_PRINTK(\"wait_for_sndbuf: asoc=%p, timeo=%ld, msg_len=%zu\\n\",",
          "6615:      asoc, (long)(*timeo_p), msg_len);",
          "",
          "[Added Lines]",
          "6607:  pr_debug(\"%s: asoc:%p, timeo:%ld, msg_len:%zu\\n\", __func__, asoc,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "6718:  long current_timeo = *timeo_p;",
          "6719:  DEFINE_WAIT(wait);",
          "6725:  sctp_association_hold(asoc);",
          "",
          "[Removed Lines]",
          "6721:  SCTP_DEBUG_PRINTK(\"%s: asoc=%p, timeo=%ld\\n\", __func__, asoc,",
          "6722:      (long)(*timeo_p));",
          "",
          "[Added Lines]",
          "6714:  pr_debug(\"%s: asoc:%p, timeo:%ld\\n\", __func__, asoc, *timeo_p);",
          "",
          "---------------"
        ],
        "net/sctp/transport.c||net/sctp/transport.c": [
          "File: net/sctp/transport.c -> net/sctp/transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: static void sctp_transport_destroy(struct sctp_transport *transport)",
          "178: {",
          "181:  call_rcu(&transport->rcu, sctp_transport_destroy_rcu);",
          "",
          "[Removed Lines]",
          "179:  SCTP_ASSERT(transport->dead, \"Transport is not dead\", return);",
          "",
          "[Added Lines]",
          "179:  if (unlikely(!transport->dead)) {",
          "180:   WARN(1, \"Attempt to destroy undead transport %p!\\n\", transport);",
          "181:   return;",
          "182:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318: void sctp_transport_update_rto(struct sctp_transport *tp, __u32 rtt)",
          "319: {",
          "326:  if (tp->rttvar || tp->srtt) {",
          "327:   struct net *net = sock_net(tp->asoc->base.sk);",
          "",
          "[Removed Lines]",
          "321:  SCTP_ASSERT(tp, \"NULL transport\", return);",
          "324:  SCTP_ASSERT(tp->rto_pending, \"rto_pending not set\", return);",
          "",
          "[Added Lines]",
          "323:  if (unlikely(!tp->rto_pending))",
          "325:   pr_debug(\"%s: rto_pending not set on transport %p!\\n\", __func__, tp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:  tp->rto_pending = 0;",
          "383: }",
          "",
          "[Removed Lines]",
          "380:  SCTP_DEBUG_PRINTK(\"%s: transport: %p, rtt: %d, srtt: %d \"",
          "381:      \"rttvar: %d, rto: %ld\\n\", __func__,",
          "382:      tp, rtt, tp->srtt, tp->rttvar, tp->rto);",
          "",
          "[Added Lines]",
          "381:  pr_debug(\"%s: transport:%p, rtt:%d, srtt:%d rttvar:%d, rto:%ld\\n\",",
          "382:    __func__, tp, rtt, tp->srtt, tp->rttvar, tp->rto);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "433:    cwnd += pmtu;",
          "434:   else",
          "435:    cwnd += bytes_acked;",
          "442:  } else {",
          "",
          "[Removed Lines]",
          "436:   SCTP_DEBUG_PRINTK(\"%s: SLOW START: transport: %p, \"",
          "437:       \"bytes_acked: %d, cwnd: %d, ssthresh: %d, \"",
          "438:       \"flight_size: %d, pba: %d\\n\",",
          "439:       __func__,",
          "440:       transport, bytes_acked, cwnd,",
          "441:       ssthresh, flight_size, pba);",
          "",
          "[Added Lines]",
          "437:   pr_debug(\"%s: slow start: transport:%p, bytes_acked:%d, \"",
          "438:     \"cwnd:%d, ssthresh:%d, flight_size:%d, pba:%d\\n\",",
          "439:     __func__, transport, bytes_acked, cwnd, ssthresh,",
          "440:     flight_size, pba);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "459:    cwnd += pmtu;",
          "460:    pba = ((cwnd < pba) ? (pba - cwnd) : 0);",
          "461:   }",
          "468:  }",
          "470:  transport->cwnd = cwnd;",
          "",
          "[Removed Lines]",
          "462:   SCTP_DEBUG_PRINTK(\"%s: CONGESTION AVOIDANCE: \"",
          "463:       \"transport: %p, bytes_acked: %d, cwnd: %d, \"",
          "464:       \"ssthresh: %d, flight_size: %d, pba: %d\\n\",",
          "465:       __func__,",
          "466:       transport, bytes_acked, cwnd,",
          "467:       ssthresh, flight_size, pba);",
          "",
          "[Added Lines]",
          "462:   pr_debug(\"%s: congestion avoidance: transport:%p, \"",
          "463:     \"bytes_acked:%d, cwnd:%d, ssthresh:%d, \"",
          "464:     \"flight_size:%d, pba:%d\\n\", __func__,",
          "465:     transport, bytes_acked, cwnd, ssthresh,",
          "466:     flight_size, pba);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "558:  }",
          "560:  transport->partial_bytes_acked = 0;",
          "565: }",
          "",
          "[Removed Lines]",
          "561:  SCTP_DEBUG_PRINTK(\"%s: transport: %p reason: %d cwnd: \"",
          "562:      \"%d ssthresh: %d\\n\", __func__,",
          "563:      transport, reason,",
          "564:      transport->cwnd, transport->ssthresh);",
          "",
          "[Added Lines]",
          "561:  pr_debug(\"%s: transport:%p, reason:%d, cwnd:%d, ssthresh:%d\\n\",",
          "562:    __func__, transport, reason, transport->cwnd,",
          "563:    transport->ssthresh);",
          "",
          "---------------"
        ]
      }
    }
  ]
}