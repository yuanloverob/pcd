{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73f940c89eba2daede2e4fba4ee84b2f1922cb52",
      "candidate_info": {
        "commit_hash": "73f940c89eba2daede2e4fba4ee84b2f1922cb52",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73f940c89eba2daede2e4fba4ee84b2f1922cb52",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix additional compiler warnings introduced by the previous check-in and found by MSVC.\n\nFossilOrigin-Name: 6fc0deffa4eed902fd13eefe6d2765f338f3dadc5b29f7cae5064e135417746b",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   MatchinfoBuffer *pRet;",
          "133:   sqlite3_int64 nByte = sizeof(u32) * (2*(sqlite3_int64)nElem + 1)",
          "134:                            + sizeof(MatchinfoBuffer);",
          "",
          "[Removed Lines]",
          "131: static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){",
          "",
          "[Added Lines]",
          "131: static MatchinfoBuffer *fts3MIBufferNew(size_t nElem, const char *zMatchinfo){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:   if( pRet ){",
          "139:     memset(pRet, 0, nByte);",
          "140:     pRet->aMatchinfo[0] = (u8*)(&pRet->aMatchinfo[1]) - (u8*)pRet;",
          "143:     pRet->zMatchinfo = ((char*)pRet) + nByte;",
          "144:     memcpy(pRet->zMatchinfo, zMatchinfo, nStr+1);",
          "145:     pRet->aRef[0] = 1;",
          "",
          "[Removed Lines]",
          "141:     pRet->aMatchinfo[1+nElem] = pRet->aMatchinfo[0] + sizeof(u32)*(nElem+1);",
          "142:     pRet->nElem = nElem;",
          "",
          "[Added Lines]",
          "141:     pRet->aMatchinfo[1+nElem] = pRet->aMatchinfo[0]",
          "142:                                       + sizeof(u32)*((int)nElem+1);",
          "143:     pRet->nElem = (int)nElem;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c28c973ad6debd63f13e5d4d3da036f680baaec9d863eda039f2747db9f1cfd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94e02d9c2cabefe2ebcef47c4fb68cdb88d3e47a",
      "candidate_info": {
        "commit_hash": "94e02d9c2cabefe2ebcef47c4fb68cdb88d3e47a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94e02d9c2cabefe2ebcef47c4fb68cdb88d3e47a",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/shmlock.test"
        ],
        "message": "Fix the shmlock.test script so that it works with the Windows restriction that UnlockFile must exactly correspond to a prior LockFile.\n\nFossilOrigin-Name: df939c89fa90b7f9ccf961027ca4eca4f987c49eabf530b5719a83e5ab0d346d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/shmlock.test||test/shmlock.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fbcd72565f4425016cebbbf5dfd6aa510234cfb31c785cf364f04fff444aacae",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/shmlock.test||test/shmlock.test": [
          "File: test/shmlock.test -> test/shmlock.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: sqlite3 db1 test.db",
          "115: do_test 3.1 { execsql { SELECT * FROM t1 } db0 } {1 2}",
          "116: do_test 3.2 { execsql { SELECT * FROM t1 } db1 } {1 2}",
          "118: set L(0) {n n n n n n n n}",
          "119: set L(1) {n n n n n n n n}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: if {$tcl_platform(platform)==\"windows\"} {",
          "118:   set isWindows 1",
          "119: } else {",
          "120:   set isWindows 0",
          "121: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:       if {$locktype==\"e\"} {",
          "135:         for {set l $iSlot} {$l<8 && [lindex $L($idx) $l]==\"n\"} {incr l} {}",
          "136:         set n [expr int(rand()*($l-$iSlot))+1]",
          "137:         # puts \"iSlot=$iSlot l=$l L=$L($idx)\"",
          "138:         # puts \"$iSlot $n\"",
          "139:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:         # The LockFile() and UnlockFile() apis on windows require that",
          "143:         # every unlock correspond exactly to a prior lock.  Hence, we cannot",
          "144:         # lock arbitrary ranges in this test on windows.",
          "145:         if {$::isWindows} {set n 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42d2fce7f5b5e5776f3e881b4685deae2e0266ff",
      "candidate_info": {
        "commit_hash": "42d2fce7f5b5e5776f3e881b4685deae2e0266ff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42d2fce7f5b5e5776f3e881b4685deae2e0266ff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/main.c",
          "src/resolve.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/tclsqlite.c",
          "src/treeview.c",
          "test/func.test",
          "test/tclsqlite.test"
        ],
        "message": "Provide the SQLITE_DIRECTONLY flag for app-defined functions that prohibits the use of those functions within triggers or views.\n\nFossilOrigin-Name: fc745845d8d76adc165575e2192f4176e3c28e614c72571d56f4011560499fe1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tclsqlite.c||src/tclsqlite.c",
          "src/treeview.c||src/treeview.c",
          "test/func.test||test/func.test",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98357d8c1263920b33a3648ef9214a63c99728bafa7a8d3dd6a1241b2303fd42",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561: ){",
          "562:   while( pExpr ){",
          "563:     if( pExpr->op==TK_VARIABLE ){",
          "564:       if( pFix->pParse->db->init.busy ){",
          "565:         pExpr->op = TK_NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:     ExprSetProperty(pExpr, EP_Indirect);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1720:   }",
          "1722:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1724:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1726: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1723:   extraFlags = enc &  SQLITE_DETERMINISTIC;",
          "",
          "[Added Lines]",
          "1723:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1724:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1783:   p->u.pDestructor = pDestructor;",
          "1784:   p->funcFlags = (p->funcFlags & SQLITE_FUNC_ENCMASK) | extraFlags;",
          "1785:   testcase( p->funcFlags & SQLITE_DETERMINISTIC );",
          "1786:   p->xSFunc = xSFunc ? xSFunc : xStep;",
          "1787:   p->xFinalize = xFinal;",
          "1788:   p->xValue = xValue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1787:   testcase( p->funcFlags & SQLITE_DIRECTONLY );",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:           no_such_func = 1;",
          "825:           pDef = 0;",
          "826:         }",
          "827:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:         }else",
          "827:         if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "828:          && ExprHasProperty(pExpr, EP_Indirect)",
          "829:          && !IN_RENAME_OBJECT",
          "830:         ){",
          "833:           sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "834:                           pDef->zName);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4969: #define SQLITE_DETERMINISTIC    0x800",
          "",
          "[Added Lines]",
          "4979: #define SQLITE_DETERMINISTIC    0x000000800",
          "4980: #define SQLITE_DIRECTONLY       0x000080000",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2777:       if( n>1 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2778:         flags |= SQLITE_DETERMINISTIC;",
          "2779:       }else",
          "2780:       if( n>1 && strncmp(z, \"-returntype\", n)==0 ){",
          "2781:         const char *azType[] = {\"integer\", \"real\", \"text\", \"blob\", \"any\", 0};",
          "2782:         assert( SQLITE_INTEGER==1 && SQLITE_FLOAT==2 && SQLITE_TEXT==3 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2786:       if( n>1 && strncmp(z, \"-directonly\",n)==0 ){",
          "2787:         flags |= SQLITE_DIRECTONLY;",
          "2788:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2792:         eType++;",
          "2793:       }else{",
          "2794:         Tcl_AppendResult(interp, \"bad option \\\"\", z,",
          "2796:         );",
          "2797:         return TCL_ERROR;",
          "2798:       }",
          "",
          "[Removed Lines]",
          "2795:             \"\\\": must be -argcount, -deterministic or -returntype\", (char*)0",
          "",
          "[Added Lines]",
          "2804:             \"\\\": must be -argcount, -deterministic, -directonly,\"",
          "2805:             \" or -returntype\", (char*)0",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "557: #endif",
          "558:       }",
          "559:       if( pExpr->op==TK_AGG_FUNCTION ){",
          "562:       }else{",
          "564:       }",
          "565:       if( pFarg ){",
          "566:         sqlite3TreeViewExprList(pView, pFarg, pWin!=0, 0);",
          "",
          "[Removed Lines]",
          "560:         sqlite3TreeViewLine(pView, \"AGG_FUNCTION%d %Q\",",
          "561:                              pExpr->op2, pExpr->u.zToken);",
          "563:         sqlite3TreeViewLine(pView, \"FUNCTION %Q\", pExpr->u.zToken);",
          "",
          "[Added Lines]",
          "560:         sqlite3TreeViewLine(pView, \"AGG_FUNCTION%d %Q%s\",",
          "561:                              pExpr->op2, pExpr->u.zToken, zFlgs);",
          "563:         sqlite3TreeViewLine(pView, \"FUNCTION %Q%s\", pExpr->u.zToken, zFlgs);",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1419:   SELECT test_frombind(x.a,y.b,x.c,:123,y.e,x.f,$xyz+y.f) FROM t1 x, t1 y;",
          "1420: } {8}",
          "1425: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1422: # 2019-08-15",
          "1423: # Direct-only functions.",
          "1424: #",
          "1425: proc testdirectonly {x} {return [expr {$x*2}]}",
          "1426: do_test func-33.1 {",
          "1427:   db func testdirectonly -directonly testdirectonly",
          "1428:   db eval {SELECT testdirectonly(15)}",
          "1429: } {30}",
          "1430: do_catchsql_test func-33.2 {",
          "1431:   CREATE VIEW v33(y) AS SELECT testdirectonly(15);",
          "1432:   SELECT * FROM v33;",
          "1433: } {1 {testdirectonly() prohibited in triggers and views}}",
          "1434: do_execsql_test func-33.3 {",
          "1435:   SELECT * FROM (SELECT testdirectonly(15)) AS v33;",
          "1436: } {30}",
          "1437: do_execsql_test func-33.4 {",
          "1438:   WITH c(x) AS (SELECT testdirectonly(15))",
          "1439:   SELECT * FROM c;",
          "1440: } {30}",
          "1441: do_catchsql_test func-33.5 {",
          "1442:   WITH c(x) AS (SELECT * FROM v33)",
          "1443:   SELECT * FROM c;",
          "1444: } {1 {testdirectonly() prohibited in triggers and views}}",
          "1445: do_execsql_test func-33.10 {",
          "1446:   CREATE TABLE t33a(a,b);",
          "1447:   CREATE TABLE t33b(x,y);",
          "1448:   CREATE TRIGGER r1 AFTER INSERT ON t33a BEGIN",
          "1449:     INSERT INTO t33b(x,y) VALUES(testdirectonly(new.a),new.b);",
          "1450:   END;",
          "1451: } {}",
          "1452: do_catchsql_test func-33.11 {",
          "1453:   INSERT INTO t33a VALUES(1,2);",
          "1454: } {1 {testdirectonly() prohibited in triggers and views}}",
          "1455: do_execsql_test func-33.20 {",
          "1456:   ALTER TABLE t33a RENAME COLUMN a TO aaa;",
          "1457:   SELECT sql FROM sqlite_master WHERE name='r1';",
          "1458: } {{CREATE TRIGGER r1 AFTER INSERT ON t33a BEGIN",
          "1459:     INSERT INTO t33b(x,y) VALUES(testdirectonly(new.aaa),new.b);",
          "1460:   END}}",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "790: do_test 17.6.3 {",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "794: # 2019-02-28: The \"bind_fallback\" command.",
          "795: #",
          "",
          "[Removed Lines]",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "[Added Lines]",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic, -directonly, or -returntype}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2381f6d7e57a8857e1e05343508124e8fe6df285",
      "candidate_info": {
        "commit_hash": "2381f6d7e57a8857e1e05343508124e8fe6df285",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2381f6d7e57a8857e1e05343508124e8fe6df285",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab3.test"
        ],
        "message": "Fix a potential dangling pointer deference in an ALTER TABLE run on a schema that contains constructs of the form \"PRIMARY KEY(column COLLATE collation)\".\n\nFossilOrigin-Name: b9e2393cf201e3fc24519c5ae65d0a5953147d78884e53d44a7958747b4a7e13",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f0f02d46e40667d0fc31c57eb26d459ce2f3a3c222c767fa371100b36e5335d1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1404:    && sortOrder!=SQLITE_SO_DESC",
          "1405:   ){",
          "1406:     if( IN_RENAME_OBJECT && pList ){",
          "1408:     }",
          "1409:     pTab->iPKey = iCol;",
          "1410:     pTab->keyConf = (u8)onError;",
          "",
          "[Removed Lines]",
          "1407:       sqlite3RenameTokenRemap(pParse, &pTab->iPKey, pList->a[0].pExpr);",
          "",
          "[Added Lines]",
          "1407:       Expr *pCExpr = sqlite3ExprSkipCollate(pList->a[0].pExpr);",
          "1408:       sqlite3RenameTokenRemap(pParse, &pTab->iPKey, pCExpr);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "115: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "117: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: #-------------------------------------------------------------------------",
          "118: reset_db",
          "119: do_execsql_test 5.0 {",
          "120:   CREATE TABLE t1 (",
          "121:       c1 integer, c2, PRIMARY KEY(c1 collate rtrim),",
          "122:       UNIQUE(c2)",
          "123:   )",
          "124: }",
          "125: do_execsql_test 5.1 {",
          "126:   ALTER TABLE t1 RENAME c1 TO c3;",
          "127: }",
          "129: #-------------------------------------------------------------------------",
          "130: reset_db",
          "131: do_execsql_test 6.0 {",
          "132:   CREATE TEMPORARY TABLE Table0 (",
          "133:     Col0 INTEGER,",
          "134:     PRIMARY KEY(Col0 COLLATE RTRIM),",
          "135:     FOREIGN KEY (Col0) REFERENCES Table0",
          "136:   );",
          "137: }",
          "139: do_execsql_test 6.1 {",
          "140:   ALTER TABLE Table0 RENAME Col0 TO Col0;",
          "141: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c7e44cddd76c19d8ac034dcce2da1ed978a6f02",
      "candidate_info": {
        "commit_hash": "9c7e44cddd76c19d8ac034dcce2da1ed978a6f02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c7e44cddd76c19d8ac034dcce2da1ed978a6f02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Improved oversized cell detection when updating ptrmap pages in balance_nonroot().\n\nFossilOrigin-Name: aa61435a4c3800f023788081c1342ad6a05a41449a424fa6c039d5ca46072256",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 167b91df77fff1a84791f6ab5f72239b90475475be690a838248119b6dd312f0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7747:     MemPage *p = apOld[i];",
          "7748:     b.apEnd[k] = p->aDataEnd;",
          "7749:     b.ixNx[k] = cntOld[i];",
          "7750:     if( !leafData ){",
          "7751:       k++;",
          "7752:       b.apEnd[k] = pParent->aDataEnd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7755:     if( k && b.ixNx[k]==b.ixNx[k-1] ){",
          "7757:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7978:   if( ISAUTOVACUUM ){",
          "7979:     MemPage *pOld;",
          "7980:     MemPage *pNew = pOld = apNew[0];",
          "7982:     int cntOldNext = pNew->nCell + pNew->nOverflow;",
          "7984:     int iNew = 0;",
          "7985:     int iOld = 0;",
          "7987:     for(i=0; i<b.nCell; i++){",
          "7988:       u8 *pCell = b.apCell[i];",
          "7991:         cntOldNext += pOld->nCell + pOld->nOverflow + !leafData;",
          "7993:       }",
          "7994:       if( i==cntNew[iNew] ){",
          "7995:         pNew = apNew[++iNew];",
          "",
          "[Removed Lines]",
          "7981:     u8 *aOld = pNew->aData;",
          "7983:     int usableSize = pBt->usableSize;",
          "7989:       if( i==cntOldNext ){",
          "7990:         pOld = (++iOld)<nNew ? apNew[iOld] : apOld[iOld];",
          "7992:         aOld = pOld->aData;",
          "",
          "[Added Lines]",
          "7995:       while( i==cntOldNext ){",
          "7996:         iOld++;",
          "7997:         assert( iOld<nNew || iOld<nOld );",
          "7998:         pOld = iOld<nNew ? apNew[iOld] : apOld[iOld];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8005:       if( iOld>=nNew",
          "8006:        || pNew->pgno!=aPgno[iOld]",
          "8008:       ){",
          "8009:         if( !leafCorrection ){",
          "8010:           ptrmapPut(pBt, get4byte(pCell), PTRMAP_BTREE, pNew->pgno, &rc);",
          "",
          "[Removed Lines]",
          "8007:        || !SQLITE_WITHIN(pCell,aOld,&aOld[usableSize])",
          "",
          "[Added Lines]",
          "8014:        || !SQLITE_WITHIN(pCell,pOld->aData,pOld->aDataEnd)",
          "",
          "---------------"
        ]
      }
    }
  ]
}