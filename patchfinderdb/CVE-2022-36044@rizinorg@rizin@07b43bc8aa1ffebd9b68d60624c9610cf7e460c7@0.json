{
  "cve_id": "CVE-2022-36044",
  "cve_desc": "Rizin is a UNIX-like reverse engineering framework and command-line toolset. Versions 0.4.0 and prior are vulnerable to an out-of-bounds write when getting data from Luac files. A user opening a malicious Luac file could be affected by this vulnerability, allowing an attacker to execute code on the user's machine. Commits 07b43bc8aa1ffebd9b68d60624c9610cf7e460c7 and 05bbd147caccc60162d6fba9baaaf24befa281cd contain fixes for the issue.",
  "repo": "rizinorg/rizin",
  "patch_hash": "07b43bc8aa1ffebd9b68d60624c9610cf7e460c7",
  "patch_info": {
    "commit_hash": "07b43bc8aa1ffebd9b68d60624c9610cf7e460c7",
    "repo": "rizinorg/rizin",
    "commit_url": "https://github.com/rizinorg/rizin/commit/07b43bc8aa1ffebd9b68d60624c9610cf7e460c7",
    "files": [
      "librz/bin/bobj.c",
      "librz/bin/format/luac/luac_bin.c"
    ],
    "message": "fix oob read on luac",
    "before_after_code_files": [
      "librz/bin/bobj.c||librz/bin/bobj.c",
      "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c"
    ]
  },
  "patch_diff": {
    "librz/bin/bobj.c||librz/bin/bobj.c": [
      "File: librz/bin/bobj.c -> librz/bin/bobj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "244:  RzBinSymbol *sym;",
      "245:  RzListIter *iter;",
      "246:  rz_list_foreach (bf->o->symbols, iter, sym) {",
      "248:    continue;",
      "249:   }",
      "250:   const char *cn = sym->classname;",
      "",
      "[Removed Lines]",
      "247:   if (sym->name[0] != '_') {",
      "",
      "[Added Lines]",
      "247:   if (!sym->name || sym->name[0] != '_') {",
      "",
      "---------------"
    ],
    "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c": [
      "File: librz/bin/format/luac/luac_bin.c -> librz/bin/format/luac/luac_bin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "303:  }",
      "307:  if (real_upvalue_cnt > 0) {",
      "308:   LuaDbgUpvalueEntry *debug_upv_entry;",
      "309:   upvalue_names = RZ_NEWS0(char *, real_upvalue_cnt);",
      "",
      "[Removed Lines]",
      "306:  size_t real_upvalue_cnt = rz_list_length(proto->upvalue_entries);",
      "",
      "[Added Lines]",
      "306:  size_t real_upvalue_cnt = RZ_MAX(rz_list_length(proto->upvalue_entries), rz_list_length(proto->dbg_upvalue_entries));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "328:  LuaConstEntry *const_entry;",
      "329:  rz_list_foreach (proto->const_entries, iter, const_entry) {",
      "330:   symbol_name = get_constant_symbol_name(proto_name, const_entry);",
      "331:   luac_add_symbol(",
      "332:    info->symbol_list,",
      "333:    symbol_name,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331:   if (!symbol_name) {",
      "332:    continue;",
      "333:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9443604d5555cd02b1ca43c6fc0ec4896a73982",
      "candidate_info": {
        "commit_hash": "b9443604d5555cd02b1ca43c6fc0ec4896a73982",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/b9443604d5555cd02b1ca43c6fc0ec4896a73982",
        "files": [
          "librz/bin/bobj.c",
          "librz/bin/format/luac/luac_bin.c"
        ],
        "message": "fix oob read on luac",
        "before_after_code_files": [
          "librz/bin/bobj.c||librz/bin/bobj.c",
          "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "librz/bin/bobj.c||librz/bin/bobj.c",
            "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c"
          ],
          "candidate": [
            "librz/bin/bobj.c||librz/bin/bobj.c",
            "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/bin/bobj.c||librz/bin/bobj.c": [
          "File: librz/bin/bobj.c -> librz/bin/bobj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:  RzBinSymbol *sym;",
          "207:  RzListIter *iter;",
          "208:  rz_list_foreach (bf->o->symbols, iter, sym) {",
          "210:    continue;",
          "211:   }",
          "212:   const char *cn = sym->classname;",
          "",
          "[Removed Lines]",
          "209:   if (sym->name[0] != '_') {",
          "",
          "[Added Lines]",
          "209:   if (!sym->name || sym->name[0] != '_') {",
          "",
          "---------------"
        ],
        "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c": [
          "File: librz/bin/format/luac/luac_bin.c -> librz/bin/format/luac/luac_bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:  }",
          "306:  if (real_upvalue_cnt > 0) {",
          "307:   LuaDbgUpvalueEntry *debug_upv_entry;",
          "308:   upvalue_names = RZ_NEWS0(char *, real_upvalue_cnt);",
          "",
          "[Removed Lines]",
          "305:  size_t real_upvalue_cnt = rz_list_length(proto->upvalue_entries);",
          "",
          "[Added Lines]",
          "305:  size_t real_upvalue_cnt = RZ_MAX(rz_list_length(proto->upvalue_entries), rz_list_length(proto->dbg_upvalue_entries));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:  LuaConstEntry *const_entry;",
          "328:  rz_list_foreach (proto->const_entries, iter, const_entry) {",
          "329:   symbol_name = get_constant_symbol_name(proto_name, const_entry);",
          "330:   luac_add_symbol(",
          "331:    info->symbol_list,",
          "332:    symbol_name,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:   if (!symbol_name) {",
          "331:    continue;",
          "332:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05a6d43786cdd58a8ab7027297a874f077ee4df4",
      "candidate_info": {
        "commit_hash": "05a6d43786cdd58a8ab7027297a874f077ee4df4",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/05a6d43786cdd58a8ab7027297a874f077ee4df4",
        "files": [
          "librz/bin/format/mach0/mach0.c",
          "librz/bin/format/mach0/mach0_relocs.c"
        ],
        "message": "fix integer overflow in mach0",
        "before_after_code_files": [
          "librz/bin/format/mach0/mach0.c||librz/bin/format/mach0/mach0.c",
          "librz/bin/format/mach0/mach0_relocs.c||librz/bin/format/mach0/mach0_relocs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2940"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/format/mach0/mach0.c||librz/bin/format/mach0/mach0.c": [
          "File: librz/bin/format/mach0/mach0.c -> librz/bin/format/mach0/mach0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2762: const struct symbol_t *MACH0_(get_symbols)(struct MACH0_(obj_t) * bin) {",
          "2763:  struct symbol_t *symbols;",
          "2767:  if (bin->symbols) {",
          "2768:   return bin->symbols;",
          "",
          "[Removed Lines]",
          "2764:  int j, s, stridx, symbols_size, symbols_count;",
          "2765:  ut32 to, from, i;",
          "",
          "[Added Lines]",
          "2764:  int j = 0, s = 0, stridx = 0;",
          "2765:  size_t symbols_size = 0, symbols_count = 0;",
          "2766:  ut64 to = 0, from = 0, i = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2785:   symbols_count = (bin->dysymtab.nextdefsym +",
          "2786:    bin->dysymtab.nlocalsym +",
          "2787:    bin->dysymtab.nundefsym);",
          "2791:    ht_pp_free(hash);",
          "2792:    return NULL;",
          "2793:   }",
          "2801:    ht_pp_free(hash);",
          "2802:    return NULL;",
          "2803:   }",
          "",
          "[Removed Lines]",
          "2788:   symbols_count += bin->nsymtab;",
          "2789:   if (symbols_count < 0 || ((st64)symbols_count * 2) > ST32_MAX) {",
          "2790:    eprintf(\"Symbols count overflow\\n\");",
          "2794:   symbols_size = (symbols_count + 1) * 2 * sizeof(struct symbol_t);",
          "2796:   if (symbols_size < 1) {",
          "2797:    ht_pp_free(hash);",
          "2798:    return NULL;",
          "2799:   }",
          "2800:   if (!(symbols = calloc(1, symbols_size))) {",
          "",
          "[Added Lines]",
          "2789:   symbols_count += (bin->nsymtab + 1);",
          "2790:   if (SZT_MUL_OVFCHK(symbols_count, 2)) {",
          "2791:    RZ_LOG_ERROR(\"mach0: detected symbols count overflow\\n\");",
          "2795:   symbols_size = symbols_count * 2;",
          "2796:   symbols = RZ_NEWS0(struct symbol_t, symbols_size);",
          "2797:   if (!symbols) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2823:     continue;",
          "2824:    }",
          "2830:    if (symbols_count >= maxsymbols) {",
          "2831:     symbols_count = maxsymbols - 1;",
          "2833:    }",
          "2834:    for (i = from; i < to && j < symbols_count; i++, j++) {",
          "2835:     symbols[j].offset = MACH0_(vaddr_to_paddr)(bin, bin->symtab[i].n_value);",
          "",
          "[Removed Lines]",
          "2826:    from = RZ_MIN(RZ_MAX(0, from), symbols_size / sizeof(struct symbol_t));",
          "2827:    to = RZ_MIN(RZ_MIN(to, bin->nsymtab), symbols_size / sizeof(struct symbol_t));",
          "2829:    ut32 maxsymbols = symbols_size / sizeof(struct symbol_t);",
          "2832:     eprintf(\"macho warning: Symbol table truncated\\n\");",
          "",
          "[Added Lines]",
          "2823:    from = RZ_MIN(RZ_MAX(0, from), symbols_size);",
          "2824:    to = RZ_MIN(RZ_MIN(to, bin->nsymtab), symbols_size);",
          "2826:    ut32 maxsymbols = symbols_size;",
          "2829:     RZ_LOG_WARN(\"mach0: symbol table is truncated\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2896:     if (sym_name) {",
          "2897:      symbols[j].name = sym_name;",
          "2898:     } else {",
          "2900:     }",
          "2902:     if (inSymtab(hash, symbols[j].name, symbols[j].addr)) {",
          "2903:      RZ_FREE(symbols[j].name);",
          "2904:     } else {",
          "",
          "[Removed Lines]",
          "2899:      symbols[j].name = rz_str_newf(\"entry%d\", i);",
          "2901:     symbols[j].last = 0;",
          "",
          "[Added Lines]",
          "2896:      symbols[j].name = rz_str_newf(\"entry%\" PFMT64u, i);",
          "2898:     symbols[j].last = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2921:   ht_pp_free(hash);",
          "2922:   return NULL;",
          "2923:  } else {",
          "2926:    ht_pp_free(hash);",
          "2927:    return NULL;",
          "2928:   }",
          "2930:    ht_pp_free(hash);",
          "2931:    return NULL;",
          "2932:   }",
          "",
          "[Removed Lines]",
          "2924:   symbols_size = (symbols_count + 1) * sizeof(struct symbol_t);",
          "2925:   if (symbols_size < 1) {",
          "2929:   if (!(symbols = calloc(1, symbols_size))) {",
          "",
          "[Added Lines]",
          "2921:   if (SZT_ADD_OVFCHK(symbols_count, 1)) {",
          "2925:   symbols_size = symbols_count + 1;",
          "2926:   if (!(symbols = RZ_NEWS0(struct symbol_t, symbols_size))) {",
          "",
          "---------------"
        ],
        "librz/bin/format/mach0/mach0_relocs.c||librz/bin/format/mach0/mach0_relocs.c": [
          "File: librz/bin/format/mach0/mach0_relocs.c -> librz/bin/format/mach0/mach0_relocs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "461:  }",
          "463:  if (bin->symtab && bin->symstr && bin->sects && bin->indirectsyms) {",
          "465:   int amount = bin->dysymtab.nundefsym;",
          "466:   if (amount < 0) {",
          "467:    amount = 0;",
          "",
          "[Removed Lines]",
          "464:   int j;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:     return NULL;",
          "473:    }",
          "474:   }",
          "476:    struct reloc_t *reloc = RZ_NEW0(struct reloc_t);",
          "478:     break;",
          "479:    }",
          "486:   }",
          "487:  }",
          "",
          "[Removed Lines]",
          "475:   for (j = 0; j < amount; j++) {",
          "477:    if (!reloc) {",
          "480:    if (parse_import_ptr(bin, reloc, bin->dysymtab.iundefsym + j)) {",
          "481:     reloc->ord = j;",
          "482:     rz_skiplist_insert(relocs, reloc);",
          "483:    } else {",
          "484:     RZ_FREE(reloc);",
          "485:    }",
          "",
          "[Added Lines]",
          "474:   for (int j = 0; j < amount; j++) {",
          "476:    if (!reloc || !parse_import_ptr(bin, reloc, bin->dysymtab.iundefsym + j)) {",
          "477:     free(reloc);",
          "480:    reloc->ord = j;",
          "481:    rz_skiplist_insert(relocs, reloc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b19edb79bb50f1bfe12ad42575cd88470d98dbfc",
      "candidate_info": {
        "commit_hash": "b19edb79bb50f1bfe12ad42575cd88470d98dbfc",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/b19edb79bb50f1bfe12ad42575cd88470d98dbfc",
        "files": [
          "librz/bin/p/bin_symbols.c"
        ],
        "message": "refactor bin_symbols code to detect bad values.",
        "before_after_code_files": [
          "librz/bin/p/bin_symbols.c||librz/bin/p/bin_symbols.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2940"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/p/bin_symbols.c||librz/bin/p/bin_symbols.c": [
          "File: librz/bin/p/bin_symbols.c -> librz/bin/p/bin_symbols.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  ut32 namelen;",
          "33:  ut32 name;",
          "34:  bool valid;",
          "38:  int bits;",
          "39:  const char *arch;",
          "40:  const char *cpu;",
          "",
          "[Removed Lines]",
          "35:  ut32 size;",
          "37:  ut32 addr;",
          "",
          "[Added Lines]",
          "35:  ut64 size;",
          "37:  ut64 addr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  return sh;",
          "60: }",
          "75:  }",
          "82:  }",
          "84: }",
          "118:  }",
          "120: }",
          "122: static RzBinSection *bin_section_from_section(RzCoreSymCacheElementSection *sect) {",
          "",
          "[Removed Lines]",
          "62: static const char *typeString(ut32 n, int *bits) {",
          "64:  if (n == 12) { // CPU_SUBTYPE_ARM_V7) {",
          "65:   return \"arm\";",
          "66:  }",
          "67:  if (n == 0x0100000c) { // arm64",
          "69:   return \"arm\";",
          "70:  }",
          "71:  if (n == 0x0200000c) { // arm64-32",
          "74:   return \"arm\";",
          "76:  return \"x86\";",
          "77: }",
          "79: static const char *subtypeString(int n) {",
          "80:  if (n == 9) { // CPU_SUBTYPE_ARM_V7) {",
          "81:   return \"armv7\";",
          "83:  return \"?\";",
          "87: static SymbolsMetadata parseMetadata(RzBuffer *buf, int off) {",
          "88:  SymbolsMetadata sm = { 0 };",
          "89:  ut8 b[0x100] = { 0 };",
          "90:  (void)rz_buf_read_at(buf, off, b, sizeof(b));",
          "91:  sm.addr = off;",
          "92:  sm.cputype = rz_read_le32(b);",
          "93:  sm.arch = typeString(sm.cputype, &sm.bits);",
          "96:  sm.subtype = rz_read_le32(b + 4);",
          "97:  sm.cpu = subtypeString(sm.subtype);",
          "99:  sm.n_segments = rz_read_le32(b + 8);",
          "101:  sm.namelen = rz_read_le32(b + 0xc);",
          "105:  int delta = 16;",
          "107:  sm.size = (sm.n_segments * 32) + sm.namelen + delta;",
          "110:  ut32 nm, nm2, nm3;",
          "111:  rz_buf_read_at(buf, off + sm.size, (ut8 *)&nm, sizeof(nm));",
          "112:  rz_buf_read_at(buf, off + sm.size + 4, (ut8 *)&nm2, sizeof(nm2));",
          "113:  rz_buf_read_at(buf, off + sm.size + 8, (ut8 *)&nm3, sizeof(nm3));",
          "115:  if (rz_read_le32(&nm3) != 0xa1b22b1a) {",
          "116:   sm.size -= 8;",
          "119:  return sm;",
          "",
          "[Added Lines]",
          "62: static void set_arch_and_bits(SymbolsMetadata *sm) {",
          "64:  switch (sm->cputype) {",
          "65:  case 12: // CPU_SUBTYPE_ARM_V7",
          "66:   sm->arch = \"arm\";",
          "67:   sm->bits = 32;",
          "68:   break;",
          "69:  case 0x0100000c: // arm64",
          "71:  case 0x0200000c: // arm64-32",
          "72:   sm->arch = \"arm\";",
          "73:   sm->bits = 64;",
          "74:   break;",
          "75:  default:",
          "76:   sm->arch = \"x86\";",
          "77:   sm->bits = 32;",
          "78:   break;",
          "82:  switch (sm->subtype) {",
          "83:  case 9: // CPU_SUBTYPE_ARM_V7",
          "84:   sm->cpu = \"armv7\";",
          "85:   break;",
          "86:  default:",
          "87:   sm->cpu = \"?\";",
          "88:   break;",
          "93: static bool parseMetadata(RzBuffer *buf, ut64 address, SymbolsMetadata *sm) {",
          "94:  ut64 segments_size = 0, buf_size = rz_buf_size(buf);",
          "96:  ut64 offset = address;",
          "97:  if (!rz_buf_read_le32_offset(buf, &offset, &sm->cputype) ||",
          "98:   !rz_buf_read_le32_offset(buf, &offset, &sm->subtype) ||",
          "99:   !rz_buf_read_le32_offset(buf, &offset, &sm->n_segments) ||",
          "100:   !rz_buf_read_le32_offset(buf, &offset, &sm->namelen)) {",
          "101:   RZ_LOG_ERROR(\"bin_sym: cannot read symbols_metadata_t.\\n\");",
          "102:   return false;",
          "103:  } else if (sm->namelen >= buf_size) {",
          "104:   RZ_LOG_ERROR(\"bin_sym: detected symbols_metadata_t name length overflow.\\n\");",
          "105:   return false;",
          "106:  } else if (UT64_MUL_OVFCHK(sm->n_segments, 32)) {",
          "107:   RZ_LOG_ERROR(\"bin_sym: detected symbols_metadata_t segments size overflow (mul).\\n\");",
          "108:   return false;",
          "109:  }",
          "110:  segments_size = sm->n_segments * 32;",
          "111:  if (UT64_ADD_OVFCHK(segments_size, (sm->namelen + 16))) {",
          "112:   RZ_LOG_ERROR(\"bin_sym: detected symbols_metadata_t segments size overflow (mul).\\n\");",
          "113:   return false;",
          "114:  }",
          "115:  segments_size += (sm->namelen + 16);",
          "116:  sm->size = segments_size;",
          "117:  sm->addr = address;",
          "118:  set_arch_and_bits(sm);",
          "121:  ut32 unk_value;",
          "122:  if (!rz_buf_read_le32_at(buf, address + sm->size + 8, &unk_value)) {",
          "123:   return false;",
          "124:  } else if (unk_value != 0xa1b22b1a) {",
          "125:   sm->size -= 8;",
          "127:  return true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:  SymbolsHeader sh = parseHeader(buf);",
          "273:  if (!sh.valid) {",
          "275:   return false;",
          "276:  }",
          "278:  char *file_name = NULL;",
          "279:  if (sm.namelen) {",
          "285:    return false;",
          "286:   }",
          "287:  }",
          "",
          "[Removed Lines]",
          "274:   eprintf(\"Invalid headers\\n\");",
          "277:  SymbolsMetadata sm = parseMetadata(buf, 0x40);",
          "280:   file_name = calloc(sm.namelen + 1, 1);",
          "281:   if (!file_name) {",
          "282:    return false;",
          "283:   }",
          "284:   if (rz_buf_read_at(buf, 0x50, (ut8 *)file_name, sm.namelen) != sm.namelen) {",
          "",
          "[Added Lines]",
          "282:   RZ_LOG_ERROR(\"bin_sym: invalid headers\\n\");",
          "283:   return false;",
          "284:  }",
          "285:  SymbolsMetadata sm = { 0 };",
          "286:  if (!parseMetadata(buf, 0x40, &sm)) {",
          "291:   file_name = calloc(1, sm.namelen + 1);",
          "292:   if (!file_name || rz_buf_read_at(buf, 0x50, (ut8 *)file_name, sm.namelen) != sm.namelen) {",
          "293:    free(file_name);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "318: }",
          "320: static RzBinInfo *info(RzBinFile *bf) {",
          "322:  RzBinInfo *ret = RZ_NEW0(RzBinInfo);",
          "323:  if (!ret) {",
          "324:   return NULL;",
          "",
          "[Removed Lines]",
          "321:  SymbolsMetadata sm = parseMetadata(bf->buf, 0x40);",
          "",
          "[Added Lines]",
          "330:  SymbolsMetadata sm = { 0 };",
          "331:  if (!parseMetadata(bf->buf, 0x40, &sm)) {",
          "332:   return NULL;",
          "333:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05bbd147caccc60162d6fba9baaaf24befa281cd",
      "candidate_info": {
        "commit_hash": "05bbd147caccc60162d6fba9baaaf24befa281cd",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/05bbd147caccc60162d6fba9baaaf24befa281cd",
        "files": [
          "librz/bin/format/luac/luac_bin.c",
          "librz/bin/format/luac/luac_common.h",
          "librz/bin/p/bin_luac.c"
        ],
        "message": "Fix oob read on _luac_build_info and luac memleaks",
        "before_after_code_files": [
          "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c",
          "librz/bin/format/luac/luac_common.h||librz/bin/format/luac/luac_common.h",
          "librz/bin/p/bin_luac.c||librz/bin/p/bin_luac.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c"
          ],
          "candidate": [
            "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/bin/format/luac/luac_bin.c||librz/bin/format/luac/luac_bin.c": [
          "File: librz/bin/format/luac/luac_bin.c -> librz/bin/format/luac/luac_bin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  rz_list_append(string_list, bin_string);",
          "71: }",
          "79: static void free_rz_section(RzBinSection *section) {",
          "80:  if (!section) {",
          "81:   return;",
          "",
          "[Removed Lines]",
          "73: static void try_free_empty_list(RzList *list) {",
          "74:  if (list != NULL) {",
          "75:   rz_list_free(list);",
          "76:  }",
          "77: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:  RZ_FREE(addr);",
          "112: }",
          "114: LuacBinInfo *luac_build_info(LuaProto *proto) {",
          "115:  if (!proto) {",
          "116:   RZ_LOG_ERROR(\"Invalid luac file\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: void luac_build_info_free(LuacBinInfo *bin_info) {",
          "109:  if (!bin_info) {",
          "110:   return;",
          "111:  }",
          "112:  rz_list_free(bin_info->entry_list);",
          "113:  rz_list_free(bin_info->symbol_list);",
          "114:  rz_list_free(bin_info->section_list);",
          "115:  rz_list_free(bin_info->string_list);",
          "116:  free(bin_info);",
          "117: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  ret->string_list = rz_list_newf((RzListFree)free_rz_string);",
          "130:  if (!(ret->entry_list && ret->symbol_list && ret->section_list && ret->string_list)) {",
          "135:  }",
          "137:  _luac_build_info(proto, ret);",
          "",
          "[Removed Lines]",
          "131:   try_free_empty_list(ret->entry_list);",
          "132:   try_free_empty_list(ret->symbol_list);",
          "133:   try_free_empty_list(ret->section_list);",
          "134:   try_free_empty_list(ret->string_list);",
          "",
          "[Added Lines]",
          "136:   rz_list_free(ret->entry_list);",
          "137:   rz_list_free(ret->symbol_list);",
          "138:   rz_list_free(ret->section_list);",
          "139:   rz_list_free(ret->string_list);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:  char *section_name;",
          "228:  char *symbol_name;",
          "229:  char *proto_name;",
          "230:  RzListIter *iter;",
          "232:  ut64 current_offset;",
          "233:  ut64 current_size;",
          "238:  if (proto->name_size == 0 || proto->proto_name == NULL) {",
          "",
          "[Removed Lines]",
          "235:  int i = 0; // iter",
          "",
          "[Added Lines]",
          "235:  char **upvalue_names = NULL;",
          "237:  int i = 0; // iter",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "295:  }",
          "313:  }",
          "",
          "[Removed Lines]",
          "298:  char **upvalue_names;",
          "299:  int real_upvalue_cnt;",
          "300:  LuaDbgUpvalueEntry *debug_upv_entry;",
          "301:  real_upvalue_cnt = rz_list_length(proto->upvalue_entries);",
          "302:  upvalue_names = RZ_NEWS0(char *, real_upvalue_cnt);",
          "303:  if (!upvalue_names) {",
          "304:   return;",
          "305:  }",
          "306:  rz_list_foreach (proto->dbg_upvalue_entries, iter, debug_upv_entry) {",
          "307:   upvalue_names[i] = (char *)debug_upv_entry->upvalue_name;",
          "308:   luac_add_string(",
          "309:    info->string_list,",
          "310:    upvalue_names[i],",
          "311:    debug_upv_entry->offset,",
          "312:    debug_upv_entry->name_len);",
          "",
          "[Added Lines]",
          "303:  size_t real_upvalue_cnt = rz_list_length(proto->upvalue_entries);",
          "304:  if (real_upvalue_cnt > 0) {",
          "305:   LuaDbgUpvalueEntry *debug_upv_entry;",
          "306:   upvalue_names = RZ_NEWS0(char *, real_upvalue_cnt);",
          "307:   if (!upvalue_names) {",
          "308:    free(proto_name);",
          "309:    return;",
          "310:   }",
          "312:   i = 0;",
          "313:   rz_list_foreach (proto->dbg_upvalue_entries, iter, debug_upv_entry) {",
          "314:    upvalue_names[i] = (char *)debug_upv_entry->upvalue_name;",
          "315:    luac_add_string(",
          "316:     info->string_list,",
          "317:     upvalue_names[i],",
          "318:     debug_upv_entry->offset,",
          "319:     debug_upv_entry->name_len);",
          "320:    i++;",
          "321:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352:   _luac_build_info(sub_proto, info);",
          "353:  }",
          "356: }",
          "",
          "[Removed Lines]",
          "355:  RZ_FREE(proto_name);",
          "",
          "[Added Lines]",
          "364:  free(upvalue_names);",
          "365:  free(proto_name);",
          "",
          "---------------"
        ],
        "librz/bin/format/luac/luac_common.h||librz/bin/format/luac/luac_common.h": [
          "File: librz/bin/format/luac/luac_common.h -> librz/bin/format/luac/luac_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: void luac_add_string(RzList *string_list, char *string, ut64 offset, ut64 size);",
          "195: LuacBinInfo *luac_build_info(LuaProto *proto);",
          "196: void _luac_build_info(LuaProto *proto, LuacBinInfo *info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: void luac_build_info_free(LuacBinInfo *bin_info);",
          "",
          "---------------"
        ],
        "librz/bin/p/bin_luac.c||librz/bin/p/bin_luac.c": [
          "File: librz/bin/p/bin_luac.c -> librz/bin/p/bin_luac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   return NULL;",
          "101:  }",
          "104: }",
          "106: static RzList *entries(RzBinFile *bf) {",
          "",
          "[Removed Lines]",
          "103:  return bin_info_obj->symbol_list;",
          "",
          "[Added Lines]",
          "103:  return rz_list_clone(bin_info_obj->symbol_list);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:   return NULL;",
          "113:  }",
          "116: }",
          "118: static RzList *strings(RzBinFile *bf) {",
          "",
          "[Removed Lines]",
          "115:  return bin_info_obj->entry_list;",
          "",
          "[Added Lines]",
          "115:  return rz_list_clone(bin_info_obj->entry_list);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:   return NULL;",
          "125:  }",
          "128: }",
          "130: RzBinPlugin rz_bin_plugin_luac = {",
          "",
          "[Removed Lines]",
          "127:  return bin_info_obj->string_list;",
          "",
          "[Added Lines]",
          "127:  return rz_list_clone(bin_info_obj->string_list);",
          "128: }",
          "130: static void destroy(RzBinFile *bf) {",
          "131:  LuacBinInfo *bin_info_obj = GET_INTERNAL_BIN_INFO_OBJ(bf);",
          "132:  luac_build_info_free(bin_info_obj);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:  .license = \"LGPL3\",",
          "134:  .get_sdb = NULL,",
          "135:  .load_buffer = &load_buffer,",
          "136:  .check_buffer = &check_buffer,",
          "137:  .baddr = NULL,",
          "138:  .entries = &entries,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:  .destroy = &destroy,",
          "",
          "---------------"
        ]
      }
    }
  ]
}