{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "43c9c6adec77276746fc9de49272c14b7608aac8",
      "candidate_info": {
        "commit_hash": "43c9c6adec77276746fc9de49272c14b7608aac8",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/43c9c6adec77276746fc9de49272c14b7608aac8",
        "files": [
          "lib/DebugUI/html/bind.jsi",
          "lib/DebugUI/html/main.htmli",
          "lib/Module.jsi",
          "lib/Websrv.jsi",
          "lib/www/Websrv.htmli",
          "lib/www/docs/App.js",
          "lib/www/include.min.js",
          "lib/www/js/Jsish.js",
          "lib/www/js/highcharts-vue.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiInterp.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.9\": Enhance Info.version, WebSocket poll\n\nFossilOrigin-Name: c3469e6dd397c8009dd867fcb2dc9e9c1696189c20d27711a175cf8caea7a843",
        "before_after_code_files": [
          "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli",
          "lib/Module.jsi||lib/Module.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/www/Websrv.htmli||lib/www/Websrv.htmli",
          "lib/www/include.min.js||lib/www/include.min.js",
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "lib/www/js/highcharts-vue.js||lib/www/js/highcharts-vue.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/DebugUI/html/main.htmli||lib/DebugUI/html/main.htmli": [
          "File: lib/DebugUI/html/main.htmli -> lib/DebugUI/html/main.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     <link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\">",
          "8:     <script src=\"/jsi/js/Jsish.js\"></script>",
          "10: <?",
          "12:     include(['debugui.jsi', 'debugui.cssi']);",
          "",
          "[Removed Lines]",
          "9:     <script src=\"/jsi/bind.js\"></script>",
          "",
          "[Added Lines]",
          "9:     <script src=\"bind.jsi\"></script>",
          "",
          "---------------"
        ],
        "lib/Module.jsi||lib/Module.jsi": [
          "File: lib/Module.jsi -> lib/Module.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         if (!name)",
          "49:             name = dname;",
          "51:         var proj = name.toUpperCase();",
          "52:         if (app.toLowerCase() == proj)",
          "53:             throw 'can not use name same as app: '+name;",
          "54:         var pfn = name+'.fossil';",
          "56:         if (url[0] == '/' && File.exists(url+'.fossil'))",
          "57:             url += '.fossil';",
          "58:         var ccmd = 'fossil clone '+url+' '+pfn;",
          "",
          "[Removed Lines]",
          "55:         var url = self.repo+'/'+app;",
          "",
          "[Added Lines]",
          "51:         var url = app;",
          "52:         if (!app.match(/^[-0-9a-zA-Z_]+$/)) {",
          "53:             app = File.rootname(File.tail(app));",
          "54:             if (!app.match(/^[-0-9a-zA-Z_]+$/))",
          "55:                 throw 'app name invalid: '+app;",
          "56:         } else",
          "57:             url = self.repo+'/'+app;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:             return;",
          "73:         exec('fossil open '+pfn);",
          "74:         exec('fossil remote-url off');",
          "76:         var dfn = 'html/index.html';",
          "77:         if (!File.exists('index.html') && File.exists(dfn)) {",
          "78:             var idat = File.read(dfn);",
          "79:             idat = idat.map(['\"../', '\"']);",
          "80:             File.write('index.html', idat);",
          "81:         }",
          "85:         if (File.exists('main.jsi'))",
          "87:     }",
          "89:     function supdate() {",
          "",
          "[Removed Lines]",
          "75:         Jsi_CopyDir('/zvfs/lib/www', 'jsi');",
          "82:         exec('fossil add jsi');",
          "83:         exec('fossil commit -m Subclone --no-warnings');",
          "84:         puts('DONE! Change password with: fossil user password '+Util.getuser().user+' NEWPASS');",
          "86:             puts('To finish setup run: \"jsish .\"');",
          "",
          "[Added Lines]",
          "81:         if (!File.isdir('jsi')) {",
          "82:             Jsi_CopyDir('/zvfs/lib/www', 'jsi');",
          "83:             exec('fossil add jsi');",
          "84:         }",
          "91:         exec('fossil commit -m sclone --no-warnings');",
          "93:             puts('DONE! To finish setup run: \"jsish .\"');",
          "94:         else",
          "95:             puts('DONE! Change password with: fossil user password '+Util.getuser().user+' NEWPASS');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:             url = url.substr(1,url.length-3);",
          "95:         var dif = exec('fossil diff');",
          "96:         if (dif)",
          "98:         return exec('fossil pull --from-parent-project '+url);",
          "99:     }",
          "",
          "[Removed Lines]",
          "97:             throw 'sorry: run \"fossil commit\" first';",
          "",
          "[Added Lines]",
          "106:             throw 'must run \"fossil commit\" first';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:     }",
          "115:     function es5lint(d) {",
          "118:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "119:         else",
          "120:             lst = [d];",
          "121:         for (i of lst) {",
          "123:             delete int;",
          "124:         }",
          "125:     }",
          "",
          "[Removed Lines]",
          "116:         var i, lst;",
          "117:         if (File.isdir(d))",
          "122:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "",
          "[Added Lines]",
          "125:         var i, lst, isdir = File.isdir(d);",
          "126:         if (isdir)",
          "131:             if (i.substr(i.length-7) == '.min.js') continue;",
          "132:             var ft = File.tail(i);",
          "133:             if (ft=='prism.js' || ft.substr(0,3)=='vue') continue;",
          "134:             var di = i;",
          "135:             if (isdir) di = d+'/'+i;",
          "136:             var int = new Interp({noEval:true, noES6:true, scriptFile:di});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:     }",
          "167:     var cmdList = [",
          "169:         [\"es5lint\",     es5lint,    \"Perform lint check with ES6 features disabled\"],",
          "170:         [\"getfossil\",   getfossil,  \"Download fossil executable\"],",
          "171:         [\"jsonify\",     jsonify,    \"Normalize a json file\"],",
          "",
          "[Removed Lines]",
          "168:         [\"createmod\",   createmod,     \"Create a .jsi module from template\" ],",
          "",
          "[Added Lines]",
          "182:         [\"createmod\",   createmod,  \"Create a .jsi module from template\" ],",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:         }",
          "401:     }",
          "407:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "408:         else",
          "409:             lst = [d];",
          "410:         for (i of lst) {",
          "412:             delete int;",
          "413:         }",
          "416:     if (self.es5lint)",
          "419:     if (self.srcFile !== '')",
          "420:         source(self.srcFile);",
          "",
          "[Removed Lines]",
          "403:     function es5lint() {",
          "404:         var d = self.es5lint;",
          "405:         var i, lst;",
          "406:         if (File.isdir(d))",
          "411:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "414:     }",
          "417:         return es5lint();",
          "",
          "[Added Lines]",
          "403:     function es5lint(d) {",
          "404:         var i, lst, isdir = File.isdir(d);",
          "405:         if (isdir)",
          "410:             if (i.substr(i.length-7) == '.min.js') continue;",
          "411:             var ft = File.tail(i);",
          "412:             if (ft=='prism.js' || ft.substr(0,3)=='vue') continue;",
          "413:             var di = i;",
          "414:             if (isdir) di = d+'/'+i;",
          "415:             var int = new Interp({noEval:true, noES6:true, scriptFile:di});",
          "418:     }",
          "420:         return es5lint(self.es5lint);",
          "",
          "---------------"
        ],
        "lib/www/Websrv.htmli||lib/www/Websrv.htmli": [
          "File: lib/www/Websrv.htmli -> lib/www/Websrv.htmli",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     <link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\">",
          "7:     <link rel=\"stylesheet\" href=\"/jsi/www/jsiweb.css\" type=\"text/css\" media=\"screen\" />",
          "8:     <script src=\"/jsi/www/jsi.js\"></script>",
          "10:   </head>",
          "12: <script>",
          "",
          "[Removed Lines]",
          "9:     <script src=\"/jsi/www/bind.js\"></script>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/include.min.js||lib/www/include.min.js": [
          "File: lib/www/include.min.js -> lib/www/include.min.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:         });",
          "366:         if (!opts.url) throw('url is required');",
          "369:         if (!opts.success) opts.success = none;",
          "370:         if (!opts.error) opts.error = none;",
          "371:         if (!opts.complete) opts.complete = none;",
          "",
          "[Removed Lines]",
          "368:         var req, qd = null, dt = opts.dataType;",
          "",
          "[Added Lines]",
          "368:         var req, key, i, qd = null, dt = opts.dataType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:             };",
          "387:             qd = '?';",
          "389:                 qd += encodeURIComponent(key) + '=' + encodeURIComponent(opts.data[key]) +'&';",
          "391:             req.src = opts.url + qd;",
          "",
          "[Removed Lines]",
          "388:             for (var key in opts.data)",
          "",
          "[Added Lines]",
          "388:             for (key in opts.data)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397:             req = new XMLHttpRequest();",
          "398:             req.open(opts.type, opts.url, opts.async);",
          "399:             opts.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";",
          "401:                 req.setRequestHeader(key, opts.headers[key]);",
          "403:             req.onload = req.onerror = function onload() {",
          "",
          "[Removed Lines]",
          "400:             for (var key in opts.headers)",
          "",
          "[Added Lines]",
          "400:             for (key in opts.headers)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "427:     conf: function(vals) { $jsig('vals:object', arguments)();",
          "429:         if (!vals)",
          "430:             return jsi.config;",
          "432:             var ti, tt = gettype(jsi.config[i]), vv = vals[i];",
          "433:             if (tt == 'undefined')",
          "434:                 errorCmd('Option \"'+i+'\": not one of: '+Object.keys(jsi.config).join(', '));",
          "",
          "[Removed Lines]",
          "431:         for (var i in vals) {",
          "",
          "[Added Lines]",
          "429:         var i;",
          "432:         for (i in vals) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "456:     },",
          "457:     parseOpts: function(target, opts, vals) { $jsig('target:object,opts:object,vals:object=void', arguments)();",
          "460:             if (typeof(target[i]) === 'undefined')",
          "461:                 target[i] = opts[i];",
          "463:             var ti, tt = gettype(opts[i]);",
          "464:             if (tt == 'undefined')",
          "465:                 LogWarn(\"option \"+i+\" not one of: \"+Object.keys(opts).join(', '));",
          "",
          "[Removed Lines]",
          "459:         for (var i in opts)",
          "462:         for (var i in vals) {",
          "",
          "[Added Lines]",
          "460:         var i;",
          "461:         for (i in opts)",
          "464:         for (i in vals) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474:      getOpts: function(opts, vals, target) {",
          "476:         if (typeof(target) == 'undefined')",
          "477:             target = Object.assign(opts);",
          "478:         else",
          "480:                 if (typeof(target[i]) === 'undefined')",
          "481:                     target[i] = opts[i];",
          "483:             var ti, tt = gettype(opts[i]);",
          "484:             if (tt == 'undefined')",
          "485:                 LogWarn(\"option \"+i+\" not one of: \"+Object.keys(opts).join(', '));",
          "",
          "[Removed Lines]",
          "479:             for (var i in opts)",
          "482:         for (var i in vals) {",
          "",
          "[Added Lines]",
          "478:         var i;",
          "482:             for (i in opts)",
          "485:         for (i in vals) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "520:         var h = document.querySelector(\"body\");",
          "521:         h.appendChild(f);",
          "522:     },",
          "525:     inc: function(fn, onload, onerror) {",
          "526:         var f=document.createElement('script');",
          "",
          "[Removed Lines]",
          "523:     htmladd: function(str) { output(str) },",
          "",
          "[Added Lines]",
          "526:     htmladd: function(str) { output(str); },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "694:     },",
          "696:     setopts: function(obj, opts) { // Set opts in obj and return.",
          "698:             if (opts[i] === undefined)",
          "699:                 throw(\"unknown option: \"+i+' is not one of: '+Object.keys(opts).join(', '));",
          "701:             if (obj[i] === undefined)",
          "702:                 obj[i] = opts[i];",
          "703:         return obj;",
          "",
          "[Removed Lines]",
          "697:         for (var i in obj)",
          "700:         for (var i in opts)",
          "",
          "[Added Lines]",
          "700:         var i;",
          "701:         for (i in obj)",
          "704:         for (i in opts)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "742:                                 }",
          "743:                             }",
          "744:                             if (w.onchange)",
          "746:                         return;",
          "747:                         default: puts('unknown * cmd');",
          "748:                     }",
          "",
          "[Removed Lines]",
          "745:                                 w.onchange(fname, fext)",
          "",
          "[Added Lines]",
          "749:                                 w.onchange(fname, fext);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "890:     }",
          "891: };",
          "894: window['$jsi'] = jsi;",
          "895: window['$jsig'] = jsi.$jsig;",
          "896: window['$matchObj'] = jsi.matchObj;",
          "",
          "[Removed Lines]",
          "893: window['Jsish'] = jsi",
          "",
          "[Added Lines]",
          "897: window['Jsish'] = jsi;",
          "",
          "---------------"
        ],
        "lib/www/js/highcharts-vue.js||lib/www/js/highcharts-vue.js": [
          "File: lib/www/js/highcharts-vue.js -> lib/www/js/highcharts-vue.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "975:     Jsi_RC rc = JSI_OK;",
          "976:     if (argc==2) {",
          "977:         if (ver < n)",
          "979:         if (rc != JSI_OK)",
          "980:             return rc;",
          "981:         return jsi_PkgDumpInfo(interp, name, ret, n);",
          "",
          "[Removed Lines]",
          "978:             rc = Jsi_LogType(\"package '%s' downlevel: %.\" JSI_NUMGFMT \" < %.\" JSI_VERFMT_LEN JSI_NUMGFMT, name, ver, n);",
          "",
          "[Added Lines]",
          "978:             rc = Jsi_LogType(\"package '%s' downlevel: %.\" JSI_VERFMT_LEN JSI_NUMGFMT \" < %.\" JSI_VERFMT_LEN JSI_NUMGFMT, name, ver, n);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2729:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2730: {",
          "2731:     Jsi_Value *full = Jsi_ValueArrayIndex(interp, args, 0);",
          "2732:     if (!full)",
          "2736:     else if (!Jsi_ValueIsTrue(interp, full))",
          "2738:     else {",
          "2739:         char buf[JSI_BUFSIZ];",
          "2740:         snprintf(buf, sizeof(buf),",
          "2744:         return Jsi_JSONParse(interp, buf, ret, 0);",
          "2745:     }",
          "2746:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2733:         Jsi_ValueMakeNumber(interp, ret, Jsi_Version());",
          "2734:     else if (!Jsi_ValueIsBoolean(interp, full))",
          "2735:         return Jsi_LogError(\"arg1: expected bool 'full'\");",
          "2737:         Jsi_ValueMakeNumber(interp, ret, Jsi_Version());",
          "2741:             \"{major:%d, minor:%d, release:%d, verStr:\\\"%d.%d.%d\\\"}\",",
          "2742:             JSI_VERSION_MAJOR, JSI_VERSION_MINOR, JSI_VERSION_RELEASE,",
          "2743:             JSI_VERSION_MAJOR, JSI_VERSION_MINOR, JSI_VERSION_RELEASE);",
          "",
          "[Added Lines]",
          "2732:     Jsi_Value *uver = Jsi_ValueArrayIndex(interp, args, 1);",
          "2733:     Jsi_Number v, n = Jsi_Version();",
          "2734:     if (uver && jsi_GetVerFromVal(interp, uver, &n, 0) != JSI_OK)",
          "2735:         return JSI_ERROR;",
          "2737:         Jsi_ValueMakeNumber(interp, ret, n);",
          "2738:     else if (Jsi_ValueIsNumber(interp, full) || Jsi_ValueIsString(interp, full)) {",
          "2739:         if (uver)",
          "2740:             return Jsi_LogError(\"no arg2 when arg1 is a string|number\");",
          "2741:         if (jsi_GetVerFromVal(interp, full, &n, 0) != JSI_OK)",
          "2742:             return JSI_ERROR;",
          "2743:         Jsi_ValueMakeNumber(interp, ret, n);",
          "2744:     } else if (!Jsi_ValueIsBoolean(interp, full))",
          "2745:         return Jsi_LogError(\"arg1: expected 'full' to be boolean|string|number\");",
          "2747:         Jsi_ValueMakeNumber(interp, ret, n);",
          "2750:         int major=JSI_VERSION_MAJOR, minor=JSI_VERSION_MINOR, release=JSI_VERSION_RELEASE;",
          "2751:         v = n;",
          "2752:         if (uver) {",
          "2753:             major=n;",
          "2754:             n = (n+.00001-major)*100.0;",
          "2755:             minor = n;",
          "2756:             n = (n+.001-minor)*100.0;",
          "2757:             release = n;",
          "2758:         }",
          "2760:             \"{major:%d, minor:%d, release:%d, verStr:\\\"%d.%d.%d\\\", version:%g}\",",
          "2761:             major, minor, release, major, minor, release, v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5027:     { \"script\",     InfoScriptCmd,      0,  1, \"func:function|regexp=void\", .help=\"Get current script file name, or file containing function\", .retType=(uint)JSI_TT_STRING|JSI_TT_ARRAY|JSI_TT_VOID },",
          "5028:     { \"scriptDir\",  InfoScriptDirCmd,   0,  0, \"\", .help=\"Get directory of current script\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "5029:     { \"vars\",       InfoVarsCmd,        0,  1, \"val:string|regexp|object=void\", .help=\"Return details or list of matching variables\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT, .flags=0, .info=FN_infovars },",
          "5031:     { NULL, 0,0,0,0, .help=\"Commands for inspecting internal state information in JSI\"  }",
          "5032: };",
          "5033: static Jsi_RC SysSqlValuesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "5030:     { \"version\",    InfoVersionCmd,     0,  1, \"full:boolean=false\", .help=\"JSI version: returns object when full=true\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT  },",
          "",
          "[Added Lines]",
          "5048:     { \"version\",    InfoVersionCmd,     0,  2, \"full:boolean|number|string=false, ver:number|string=void\", .help=\"Return version: when full=true returns as object\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT  },",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "787:           \"  -d\\t\\tDebug: console script debugger.\\n\"",
          "788:           \"  -e CODE\\tEvaluate javascript and exit.\\n\"",
          "789:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "792:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "793:           \"  -t\\t\\tTesting of scripts or directories of scripts with .js/.jsi extension.\\n\"",
          "794:           \"  -w\\t\\tWget: web client to download file from url.\\n\"",
          "",
          "[Removed Lines]",
          "790:           \"  -m\\t\\tInvoke named Module.\\n\"",
          "791:           \"  -M\\t\\tModule utilities\\n\"",
          "",
          "[Added Lines]",
          "790:           \"  -i MOD\\tInvoke named Module.\\n\"",
          "791:           \"  -m\\t\\tModule utilities\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "833:             case 'J':",
          "834:                 rc = Jsi_EvalString(interp, \"moduleRun('Jspp');\", JSI_EVAL_ISMAIN);",
          "835:                 break;",
          "837:                 rc = Jsi_EvalString(interp, \"moduleRun('Module');\", JSI_EVAL_ISMAIN);",
          "838:                 break;",
          "840:                 if (argc <= 2)",
          "842:                 else {",
          "843:                     Jsi_DString dStr = {}, eStr = {};",
          "844:                     const char *cps, *cpe;",
          "",
          "[Removed Lines]",
          "836:             case 'M':",
          "839:             case 'm':",
          "841:                     rc = Jsi_LogError(\"expected a module-name: see available with 'jsish -M run'\");",
          "",
          "[Added Lines]",
          "836:             case 'm':",
          "839:             case 'i':",
          "841:                     rc = Jsi_LogError(\"expected a module-name to invoke: or use 'jsish -m run'\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "892:                 break;",
          "893:             default:",
          "894:                 puts(\"usage: jsish [ --E CODE | --I OPT:VAL | --T ] \\n\\t\"",
          "896:                 return jsi_DoExit(interp, 1);",
          "897:         }",
          "898:     } else {",
          "",
          "[Removed Lines]",
          "895:                 \"-a | -c | -d | -D | -e CODE | -h | J | -m  | -M | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "[Added Lines]",
          "895:                 \"-a | -c | -d | -D | -e | -h | -i | J | -m  | -s | -S | -u | -v | -w | -W | -z | FILE ...\\nUse -help for long help.\");",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:     JSI_OPT(FUNC,   jsi_wsCmdObj, onUpload,   .help=\"Function to call handle http-post\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean\"),",
          "360:     JSI_OPT(FUNC,   jsi_wsCmdObj, onRecv,     .help=\"Function to call when websock data recieved\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, data:string\"),",
          "361:     JSI_OPT(OBJ,    jsi_wsCmdObj, pathAliases,.help=\"Alias document root  ({jsi:'/zvfs/lib/www'}) \", jsi_IIOF),",
          "363:     JSI_OPT(INT,    jsi_wsCmdObj, port,       .help=\"Port for server to listen on (8080)\", jsi_IIOF),",
          "364:     JSI_OPT(STRING, jsi_wsCmdObj, post,       .help=\"Post string to serve\", jsi_IIOF),",
          "365:     JSI_OPT(STRKEY, jsi_wsCmdObj, protocol,   .help=\"Name of protocol (ws/wss)\"),",
          "",
          "[Removed Lines]",
          "362:     JSI_OPT(INT,    jsi_wsCmdObj, pollms,     .help=\"Poll wait time in ms (0)\"),",
          "",
          "[Added Lines]",
          "362:     JSI_OPT(INT,    jsi_wsCmdObj, pollms,     .help=\"Poll wait time in ms (5)\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3354:     cmdPtr->maxUpload = 100000;",
          "3355:     cmdPtr->interp = interp;",
          "3356:     cmdPtr->ietf_version = -1;",
          "3357:     cmdPtr->bufferPwr2 = 0;",
          "3358:     cmdPtr->ws_gid = -1;",
          "3359:     cmdPtr->ws_uid = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3357:     cmdPtr->pollms = 5;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: Info.prototype.script = function(func:function|regexp=void):string|array|void {};",
          "119: Info.prototype.scriptDir = function():string|void {};",
          "120: Info.prototype.vars = function(val:string|regexp|object=void):array|object {};",
          "122: var Interp = function(cmd,args) {};",
          "123: Interp.prototype.alias = function(name:string=void, func:function|null=void, args:array|null=void, async=false):any {};",
          "124: Interp.prototype.call = function(funcName:string, args:array, wait:boolean=false):any {};",
          "",
          "[Removed Lines]",
          "121: Info.prototype.version = function(full:boolean=false):number|object {};",
          "",
          "[Added Lines]",
          "121: Info.prototype.version = function(full:boolean|number|string=false, ver:number|string=void):number|object {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cd7078d7edcec9cf5822f52cd325f999b69b727",
      "candidate_info": {
        "commit_hash": "9cd7078d7edcec9cf5822f52cd325f999b69b727",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/9cd7078d7edcec9cf5822f52cd325f999b69b727",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/parser.y"
        ],
        "message": "Release \"3.0.48\": add Object.assign, export default */+, and object shortform functions.\n\nFossilOrigin-Name: b27bc08882fc2d649369caffd589b41fcfe7bc659b2a184353b2f4dfdf48076d",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/parser.y||src/parser.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 47",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 48",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3497:     return rc;",
          "3498: }",
          "3502: {",
          "3509:     Jsi_ValueMakeObject(interp, ret, NULL);",
          "3510:     Jsi_Value *cs = interp->framePtr->incsc;",
          "3511:     Jsi_Obj *nobj = (*ret)->d.obj;",
          "",
          "[Removed Lines]",
          "3500: static Jsi_RC InfoLocalsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3501:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3505:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3506:     bool varsOnly = 0;",
          "3507:     if (arg)",
          "3508:         Jsi_ValueGetBoolean(interp, arg, &varsOnly);",
          "",
          "[Added Lines]",
          "3500: Jsi_RC jsi_InfoLocalsCmd(Jsi_Interp *interp, bool funcs, bool vars, Jsi_Value **ret)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3516:         Jsi_Value *v = (Jsi_Value*)Jsi_TreeValueGet(tPtr);",
          "3517:         if (v==NULL) continue;",
          "3518:         if (Jsi_ValueIsFunction(interp, v)) {",
          "3520:         } else {",
          "3522:         }",
          "3524:         const char* key = (char*)Jsi_TreeKeyGet(tPtr);",
          "",
          "[Removed Lines]",
          "3519:             if (varsOnly) continue;",
          "3521:             if (arg && !varsOnly) continue;",
          "",
          "[Added Lines]",
          "3514:             if (!funcs) continue;",
          "3516:             if (!vars) continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3529:     return JSI_OK;",
          "3530: }",
          "3532: static Jsi_RC InfoCompletionsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3533:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3534: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3527: static Jsi_RC InfoLocalsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3528:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3529: {",
          "3530:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3531:     bool vars = 1, funcs = 1;",
          "3532:     if (arg) {",
          "3533:         Jsi_ValueGetBoolean(interp, arg, &funcs);",
          "3534:         if (funcs)",
          "3535:             vars = 0;",
          "3536:     }",
          "3537:     return jsi_InfoLocalsCmd(interp, funcs, vars, ret);",
          "3538: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4885:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4886:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
          "4887:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"arg:string|regexp|function|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "4889:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
          "4890:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4891:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
          "4892:     { \"level\",      InfoLevelCmd,       0,  1, \"level:number=void\", .help=\"Return current level or details of a call-stack frame\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT|JSI_TT_NUMBER, .flags=0, .info=FN_infolevel },",
          "4893:     { \"lookup\",     InfoLookupCmd,      1,  1, \"name:string\", .help=\"Given string name, lookup and return value, eg: function\", .retType=(uint)JSI_TT_ANY },",
          "4894:     { \"methods\",    InfoMethodsCmd,     1,  1, \"val:string|regexp\", .help=\"Return functions and commands\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "4895:     { \"named\",      InfoNamedCmd,       0,  1, \"name:string=void\", .help=\"Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_USEROBJ },",
          "",
          "[Removed Lines]",
          "4888:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "[Added Lines]",
          "4900:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; if filter=true/false omit vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     \"EWITH\",",
          "95:     \"RESERVED\",",
          "96:     \"DEBUG\"",
          "97: };",
          "101: void jsi_FreeOpcodes(Jsi_OpCodes *ops) {",
          "102:     int i;",
          "",
          "[Removed Lines]",
          "99: static int jsiOpCodesCnt[3] = {0,0,0};",
          "",
          "[Added Lines]",
          "97:     \"EXPORT\"",
          "100: int jsiOpCodesCnt[4] = {0,0,0, (sizeof(jsi_op_names)/sizeof(jsi_op_names[0]))};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:     jsi_FuncCallCheck(p,line,argc,1, name, NULL, argCodes); JSI_NEW_CODESLN(0,OP_NEWFCALL, argc);",
          "313: }",
          "314: static Jsi_OpCodes *code_ret(jsi_Pstate *p, jsi_Pline *line, int n) { JSI_NEW_CODESLN(0,OP_RET, n); }",
          "315: static Jsi_OpCodes *code_delete(int n) { JSI_NEW_CODES(0,OP_DELETE, n); }",
          "316: static Jsi_OpCodes *code_chthis(jsi_Pstate *p, jsi_Pline *line, int n) { JSI_NEW_CODESLN(0,OP_CHTHIS, n); }",
          "317: static Jsi_OpCodes *code_pop(int n) { JSI_NEW_CODES(0,OP_POP, n); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316: static Jsi_OpCodes *code_export(jsi_Pstate *p, jsi_Pline *line, int n) { JSI_NEW_CODESLN(0,OP_EXPORT, n); }",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056:     while(ip < end && rc == JSI_OK) {",
          "1057:         int plop = ip->op;",
          "1071:         if (ip->logidx) { // Mask out LogDebug, etc if not enabled.",
          "1072:             uint oli = ip->logidx, logflag2 = jsi_GetLogFlag(interp, ip->logidx, NULL);",
          "1073:             interp->curIp = ip;",
          "",
          "[Removed Lines]",
          "1060:     ip++;\\",
          "1061:     if (ip->logflag != n)  {\\",
          "1062:         if (ip->op == OP_POP) ip++; \\",
          "1063:         else if (ip->op == OP_RET || ip->op == OP_ASSIGN) { \\",
          "1064:           rc = Jsi_LogError(\"invalid use of return/= here\"); \\",
          "1065:         ip++;\\",
          "1066:       }}\\",
          "1067:     continue;\\",
          "1068: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1077:                     ip++;",
          "1078:                 if (ip->op == OP_POP)",
          "1079:                     ip++;",
          "1081:                     rc = Jsi_LogError(\"invalid use of =/return here\");",
          "1082:                     ip++;",
          "1083:                 }",
          "",
          "[Removed Lines]",
          "1080:                 else if (ip->op == OP_RET || ip->op == OP_ASSIGN) {",
          "",
          "[Added Lines]",
          "1068:                 else if (ip->op == OP_RET || ip->op == OP_EXPORT || ip->op == OP_ASSIGN) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1744:                 }",
          "1745:                 break;",
          "1746:             }",
          "1747:             case OP_RET: {",
          "1748:                 if (fp->Sp>=1 && ip->data) {",
          "1749:                     jsiVarDeref(interp,1);",
          "1751:                 }",
          "1752:                 jsiPop(interp, (uintptr_t)ip->data);",
          "1753:                 interp->didReturn = 1;",
          "",
          "[Removed Lines]",
          "1750:                     Jsi_ValueMove(interp, vret, _jsi_TOP);",
          "",
          "[Added Lines]",
          "1735:             case OP_EXPORT:",
          "1736:                 if (!((ip+1) == end ||",
          "1737:                     (ip[1].op == OP_NOP && (ip+2) == end)))",
          "1738:                     Jsi_LogWarn(\"export is not the last statement\");",
          "1742:                     Jsi_Value *vtop = _jsi_TOP;",
          "1743:                     if (ip->op == OP_RET || !interp->framePtr->evalFuncPtr",
          "1744:                         || (vtop->vt != JSI_VT_NULL && vtop->vt != JSI_VT_UNDEF))",
          "1745:                         Jsi_ValueMove(interp, vret, vtop);",
          "1746:                     else {",
          "1747:                         jsi_InfoLocalsCmd(interp, 1, (vtop->vt == JSI_VT_UNDEF), &vret);",
          "1748:                     }",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "434: } jsi_Eopcode;",
          "436: typedef struct jsi_OpCode {",
          "437:     jsi_Eopcode op;",
          "438:     void *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437: extern int jsiOpCodesCnt[4];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1538: extern char *jsi_TrimStr(char *str);",
          "1539: extern bool jsi_ModBlacklisted(Jsi_Interp *interp, const char *mod);",
          "1540: extern bool jsi_FuncIsNoop(Jsi_Interp* interp, Jsi_Value *func);",
          "1542: typedef enum {",
          "1543:     _JSI_CDATA_INFO=0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1544: extern Jsi_RC jsi_InfoLocalsCmd(Jsi_Interp *interp, bool funcsOnly, bool varsOnly, Jsi_Value **ret);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1069: {",
          "1070:     Jsi_Interp* interp;",
          "1071:     Jsi_RC rc = JSI_OK;",
          "1072:     if (parent && parent->noSubInterps) {",
          "1073:         interp = parent;",
          "1074:         Jsi_LogError(\"subinterps disallowed\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1072:     assert(jsiOpCodesCnt[3]==OP_LASTOP);",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:     return JSI_OK;",
          "521: }",
          "523: #if (JSI_HAS___PROTO__==1)",
          "524: static Jsi_RC jsi_GetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "525:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523: static Jsi_RC ObjectAssignCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "524:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "525: {",
          "526:     if (_this->vt != JSI_VT_OBJECT || _this->d.obj->ot != JSI_OT_FUNCTION ||",
          "527:         _this->d.obj->d.fobj->func->callback != ObjectConstructor)",
          "528:         return Jsi_LogError(\"must call via Object.assign\");",
          "530:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "531:     if (!v || v->vt != JSI_VT_OBJECT || v->d.obj->ot != JSI_OT_OBJECT)",
          "532:         return Jsi_LogError(\"arg1: expected object\");",
          "533:     Jsi_Obj *obj = v->d.obj;",
          "534:     Jsi_ValueMakeObject(interp, ret, obj);",
          "535:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "536:     for (i=1; i<argc; i++) {",
          "537:         Jsi_TreeEntry *tPtr;",
          "538:         Jsi_TreeSearch search;",
          "539:         Jsi_Value *vs = Jsi_ValueArrayIndex(interp, args, i);",
          "540:         if (!vs || vs->vt != JSI_VT_OBJECT || vs->d.obj->ot != JSI_OT_OBJECT)",
          "541:             return Jsi_LogError(\"arg%d: expected object\", i+1);",
          "542:         for (tPtr = Jsi_TreeSearchFirst(vs->d.obj->tree, &search, 0, NULL);",
          "543:             tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "544:             Jsi_Value *v2 = (Jsi_Value *)Jsi_TreeValueGet(tPtr);",
          "545:             if (v2 && v2->f.bits.dontenum == 0)",
          "546:                 Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v2, 0);",
          "547:         }",
          "548:         Jsi_TreeSearchDone(&search);",
          "549:     }",
          "550:     return JSI_OK;",
          "551: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698: static Jsi_CmdSpec objectCmds[] = {",
          "699: #ifndef __JSI_OMITDECL",
          "700:     { \"Object\",         ObjectConstructor,      0, 1,  \"val:object|function|null=void\", .help=\"Object constructor\", .retType=(uint)JSI_TT_OBJECT, .flags=JSI_CMD_IS_CONSTRUCTOR },",
          "701:     { \"create\",         ObjectCreateCmd,        1, 2, \"proto:null|object, properties:object=void\", .help=\"Create a new object with prototype object and properties\", .retType=(uint)JSI_TT_OBJECT },",
          "702: #if (JSI_HAS___PROTO__>0)",
          "703:     { \"getPrototypeOf\", jsi_GetPrototypeOfCmd,  1, 1, \"name:object|function\", .help=\"Return prototype of an object\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_FUNCTION },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731:     { \"assign\",         ObjectAssignCmd,        1, -1, \"obj:object,...\", .help=\"Return arg1 object with assigned values\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: %destructor { } <str>",
          "45: %type <opcodes> fcall_exprs for_cond for_init for_statement func_expr func_statement func_statement_block if_statement item items iterstatement lvalue",
          "46: %type <opcodes> object objectident statement statements statement_or_empty switch_statement try_statement value vardec vardecs while_statement with_statement",
          "47: %type <scopes> args args_opt argsa arrowargs",
          "",
          "[Removed Lines]",
          "44: %type <opcodes> array commonstatement delete_statement do_statement expr expr_opt exprlist exprlist_opt itemident",
          "",
          "[Added Lines]",
          "44: %type <opcodes> array commonstatement delete_statement do_statement expr expr_opt exprlist exprlist_opt itemident itemfunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155: objectident:",
          "156:     object { $$ = $1; }",
          "158:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "159:         $$ = lval;",
          "160:         lval->lvalue_flag = 1;",
          "161:         lval->lvalue_name = $1;",
          "162:     }",
          "163: ;",
          "",
          "[Removed Lines]",
          "157:     | IDENTIFIER {",
          "",
          "[Added Lines]",
          "163:     | '*' {",
          "164:         $$ = code_push_null();",
          "165:     }",
          "166:     | '+' {",
          "167:         $$ = code_push_undef();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:     | ';'                   { $$ = code_nop(); }",
          "181:     | '{' statements '}'    { $$ = $2; }",
          "182:     | func_statement        { $$ = $1; }",
          "184: ;",
          "186: func_statement:",
          "",
          "[Removed Lines]",
          "183:     | EXPORT DEFAULT objectident { $$ = codes_join($3, code_ret(pstate, &@3, 1)); }",
          "",
          "[Added Lines]",
          "189:     | EXPORT DEFAULT objectident { $$ = codes_join($3, code_export(pstate, &@3, 1)); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "815:     '{' items '}'   { $$ = codes_join($2, code_object(pstate, &@2, ($2)->expr_counter)); }",
          "816: ;",
          "818: itemident:",
          "820:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "821:         lval->lvalue_flag = 1;",
          "822:         lval->lvalue_name = $1;",
          "",
          "[Removed Lines]",
          "819:     IDENTIFIER  {",
          "",
          "[Added Lines]",
          "824: itemfunc:",
          "825:     IDENTIFIER '(' args_opt ')' func_statement_block {",
          "826:         Jsi_OpCodes *lval = code_push_func(pstate, &@3, jsi_FuncMake(pstate, $3, $5, &@1, $1, 0));",
          "827:         lval->lvalue_flag = 1;",
          "828:         lval->lvalue_name = $1;",
          "829:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "830:         jsi_PstatePop(pstate);",
          "831:     }",
          "832: ;",
          "835:     itemfunc { $$ = $1; }",
          "836:     | IDENTIFIER  {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd0bd2616cbe5ad13247bf1d80a26de3f051bfc6",
      "candidate_info": {
        "commit_hash": "bd0bd2616cbe5ad13247bf1d80a26de3f051bfc6",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/bd0bd2616cbe5ad13247bf1d80a26de3f051bfc6",
        "files": [
          "src/jsi.h",
          "src/jsiSocket.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.4\". Cleanup\n\nFossilOrigin-Name: 2026124dc835167ddf9a39f0fc26898376e1171cad69d91fdf7eac4aa1a8cf42",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiSocket.c||src/jsiSocket.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "---------------"
        ],
        "src/jsiSocket.c||src/jsiSocket.c": [
          "File: src/jsiSocket.c -> src/jsiSocket.c"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     lws_fop_fd_t fop_fd;",
          "197:     int wid;",
          "199:     bool isWebsock, echo;",
          "200:     const char *clientName;",
          "201:     const char *clientIP;",
          "",
          "[Removed Lines]",
          "198:     int sfd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:         pss->stats.createTime = time(NULL);",
          "416:         pss->cnt = cmdPtr->idx++;",
          "417:         pss->wid = sid;",
          "419:         pss->udata = Jsi_ValueNewObj(cmdPtr->interp, NULL);",
          "420:         Jsi_IncrRefCount(cmdPtr->interp, pss->udata);",
          "",
          "[Removed Lines]",
          "418:         pss->sfd = sfd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "448: static void",
          "449: jsi_wsdeletePss(jsi_wsPss *pss)",
          "450: {",
          "451:     if (pss->sig == 0)",
          "452:         return;",
          "453:     WSSIGASSERT(pss, PWS);",
          "454:     if (pss->state == PWS_DEAD)",
          "455:         return;",
          "457:         fprintf(stderr, \"PSS DELETE: %p\\n\", pss);",
          "460:     if (pss->hPtr) {",
          "461:         Jsi_HashValueSet(pss->hPtr, NULL);",
          "462:         Jsi_HashEntryDelete(pss->hPtr);",
          "463:         pss->hPtr = NULL;",
          "464:     }",
          "466:     if (pss->stack) {",
          "467:         Jsi_StackFreeElements(interp, pss->stack, jsi_wsDelPss);",
          "468:         Jsi_StackFree(pss->stack);",
          "469:     }",
          "474:     Jsi_DSFree(&pss->dHdrs);",
          "475:     if (pss->isWebsock)",
          "476:         pss->cmdPtr->stats.connectCnt--;",
          "478:     pss->state = PWS_DEAD;",
          "479:     Jsi_DSFree(&pss->resultStr);",
          "480:     Jsi_DSFree(&pss->paramDS);",
          "",
          "[Removed Lines]",
          "456:     if (pss->cmdPtr && pss->cmdPtr->debug>3)",
          "459:     jsi_wsrecv_flush(pss->cmdPtr, pss);",
          "465:     Jsi_Interp *interp = pss->cmdPtr->interp;",
          "470:     jsi_wsCmdObj*cmdPtr = pss->cmdPtr;",
          "471:     cmdPtr->sfd = pss->sfd;",
          "",
          "[Added Lines]",
          "451:     jsi_wsCmdObj*cmdPtr = pss->cmdPtr;",
          "457:     if (cmdPtr && cmdPtr->debug>3)",
          "460:     jsi_wsrecv_flush(cmdPtr, pss);",
          "466:     Jsi_Interp *interp = cmdPtr->interp;",
          "474:     Jsi_OptionsFree(cmdPtr->interp, WPSOptions, pss, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "483:     pss->lastData = NULL;",
          "484:     if (pss->spa)",
          "485:         lws_spa_destroy(pss->spa);",
          "487:     Jsi_Free(pss);",
          "488: }",
          "",
          "[Removed Lines]",
          "486:     Jsi_OptionsFree(cmdPtr->interp, WPSOptions, pss, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "92ed157603a00d173cdae919994a6c22853fd9ef",
      "candidate_info": {
        "commit_hash": "92ed157603a00d173cdae919994a6c22853fd9ef",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/92ed157603a00d173cdae919994a6c22853fd9ef",
        "files": [
          "lib/Websrv.jsi",
          "lib/www/js/Jsish.js",
          "src/jsi.h",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.2\": add ip address in WS connections, Websrv -es5test\n\nFossilOrigin-Name: 903c89e828af1dd8fa4f1b858aa3fa0e8d2f6936a2f0254842782dbaf379084a",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "30:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "31:         ignoreExit  :false,     // Ignore exit request.",
          "32:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 all .js scripts within dir and below, then exit.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:             File.write(to, out);",
          "399:         }",
          "400:     }",
          "402:     if (self.srcFile !== '')",
          "403:         source(self.srcFile);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403:     function es5test() {",
          "404:         var d = self.es5test;",
          "405:         if (!File.isdir(d))",
          "406:             throw 'not a directory: '+d;",
          "407:         var i, lst = File.glob('*.js', {dir:d, recurse:true});",
          "408:         for (i of lst) {",
          "409:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "410:             delete int;",
          "411:         }",
          "412:     }",
          "414:     if (self.es5test)",
          "415:         return es5test();",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     return fn.substr(i+1);",
          "243: }",
          "246:     var f=document.createElement('script');",
          "247:     f.setAttribute(\"type\",\"text/javascript\");",
          "249:         f.innerHTML = fn;",
          "250:     else {",
          "251:         f.setAttribute(\"src\", fn);",
          "",
          "[Removed Lines]",
          "245: function addScript(fn, asData) { // Add script into page.",
          "248:     if (asData)",
          "",
          "[Added Lines]",
          "245: function addScript(fn) { // Add script into page.",
          "248:     if (fn.indexOf('\\n')>=0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:     },",
          "500:     htmladd: function(str) { output(str) },",
          "503:         var f=document.createElement('script');",
          "504:         f.setAttribute(\"type\",\"text/javascript\");",
          "505:         f.setAttribute(\"src\", fn);",
          "",
          "[Removed Lines]",
          "502:     inc: function(fn, onload, onerror) {",
          "",
          "[Added Lines]",
          "502:     inc: function(fn, onload, onerror) { $jsig('fn:string, success:function, error:function', arguments)();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531:                         str = SigConvert(str);",
          "533:                     }",
          "536:                 },",
          "537:                 error:function(str) {",
          "",
          "[Removed Lines]",
          "534:                     addScript(str, true);",
          "",
          "[Added Lines]",
          "534:                     if (str.indexOf('\\n')>=0)",
          "535:                         addScript(str);",
          "536:                     else",
          "537:                         console.warn('no newline', str);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2521:         break;",
          "2523:     case LWS_CALLBACK_FILTER_PROTOCOL_CONNECTION:",
          "2530:         if (cmdPtr->onFilter && !cmdPtr->deleted) {",
          "2533:             int killcon = 0, n = 0;",
          "2534:             Jsi_Obj *oarg1;",
          "2535:             Jsi_Value *vpargs, *vargs[10], *ret = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "2524:         pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 1);",
          "2525:         Jsi_DSSet(&pss->url, inPtr);",
          "2526:         if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "2527:             pss->clientName = cmdPtr->clientName;",
          "2528:             pss->clientIP = cmdPtr->clientIP;",
          "2529:         }",
          "2531:             if (!pss)",
          "2532:                 pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 0);",
          "",
          "[Added Lines]",
          "2525:             pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 0);",
          "2526:             Jsi_DSSet(&pss->url, inPtr);",
          "2527:             if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "2528:                 pss->clientName = cmdPtr->clientName;",
          "2529:                 pss->clientIP = cmdPtr->clientIP;",
          "2530:                 if (cmdPtr->debug>1)",
          "2531:                     fprintf(stderr,  \"Filter ws msg %d from %s (%s)\\n\", pss->wid,",
          "2532:                          pss->clientName, pss->clientIP);",
          "2534:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2569:         }",
          "2570:         if (!pss)",
          "2571:             pss = jsi_wsgetPss(cmdPtr, wsi, user, 1, 0);",
          "2574:             Jsi_Obj *oarg1;",
          "2575:             Jsi_Value *vpargs, *vargs[10];",
          "",
          "[Removed Lines]",
          "2572:         if (cmdPtr->onOpen && !cmdPtr->deleted) {",
          "",
          "[Added Lines]",
          "2574:         if (cmdPtr->instCtx == context && (cmdPtr->clientName[0] || cmdPtr->clientIP[0])) {",
          "2575:             pss->clientName = cmdPtr->clientName;",
          "2576:             pss->clientIP = cmdPtr->clientIP;",
          "2577:             if (cmdPtr->debug>1)",
          "2578:                 fprintf(stderr,  \"Establish WS msg %d from %s (%s)\\n\", pss->wid,",
          "2579:                      pss->clientName, pss->clientIP);",
          "2580:         }",
          "2581:          if (cmdPtr->onOpen && !cmdPtr->deleted) {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "35d5f6bb10187f96bd4ba4900a15b260abb99e41",
      "candidate_info": {
        "commit_hash": "35d5f6bb10187f96bd4ba4900a15b260abb99e41",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/35d5f6bb10187f96bd4ba4900a15b260abb99e41",
        "files": [
          "src/jsi.h",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiValue.c",
          "src/parser.y",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.49\": const now complains on modify\n\nFossilOrigin-Name: 4e191a96b7390c67b91878a96421f0104fbe0fc83b3a9c13837e67ab644853a3",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 48",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 49",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:     }",
          "467: }",
          "470: {",
          "472:     int i = 0;",
          "473:     if (ops == NULL || ops->codes == NULL)",
          "474:         return;",
          "475:     while (i < ops->code_len) {",
          "476:         if (ops->codes[i].op == OP_PUSHVAR)",
          "478:         i++;",
          "479:     }",
          "480: }",
          "",
          "[Removed Lines]",
          "469: void jsi_mark_local(Jsi_OpCodes *ops) // Mark variables as declared with \"var\"",
          "471:     return;",
          "477:             ops->codes[i].local = 1;",
          "",
          "[Added Lines]",
          "469: void jsi_mark_local(Jsi_OpCodes *ops, int v) // Mark variables as declared with \"var\"",
          "471:     if (v != LOCALCONST)",
          "472:         return;",
          "478:             ops->codes[i].readonly = 1;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:         }",
          "171:         if (v == src)",
          "172:             return JSI_OK;",
          "174:             if (interp->typeCheck.strict)",
          "175:                 return Jsi_LogError(\"assign to readonly variable\");",
          "176:             return JSI_OK;",
          "",
          "[Removed Lines]",
          "173:         if (v->f.bits.readonly) {",
          "",
          "[Added Lines]",
          "173:         bool ro = v->f.bits.readonly;",
          "174:         if (ro && v->vt != JSI_VT_UNDEF) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:         else",
          "181:             Jsi_ValueCopy(interp,v, src);",
          "182:         SIGASSERT(v, VALUE);",
          "184: #ifdef JSI_MEM_DEBUG",
          "185:     if (!v->VD.label2)",
          "186:         v->VD.label2 = \"ValueAssign\";",
          "",
          "[Removed Lines]",
          "183:         v->f.bits.readonly = 0;",
          "",
          "[Added Lines]",
          "184:         v->f.bits.readonly = ro;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "875:                     Jsi_HashValueSet(hPtr, 0);",
          "876:             }",
          "877:         }",
          "879:         Jsi_IncrRefCount(interp, v);",
          "881:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:         if (ip->readonly)",
          "880:             v->f.bits.readonly = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "936:     Jsi_RC rc = JSI_OK;",
          "937:     uint flags = (uintptr_t)ip->data, right_val = flags&1; // isident=flags&2;",
          "938:     jsiVarDeref(interp,2);",
          "939:     Jsi_String *str = jsi_ValueString(src);",
          "940:     Jsi_Obj *obj = (src->vt==JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT?src->d.obj:NULL);",
          "941:     int bsc, arrayindex = (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0) ?  (int)idx->d.num : -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941:     bool ro = src->f.bits.readonly;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1010:                 assert(vp != resPtr);",
          "1011:                 res.vt = JSI_VT_VARIABLE;",
          "1012:                 res.d.lval = vp;",
          "1013:                 Jsi_ValueCopy(interp, src, resPtr);",
          "1014:             }",
          "1015:             Jsi_DecrRefCount(interp, vp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1016:                 if (ro)",
          "1017:                     vp->f.bits.readonly = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1618:                 }",
          "1619:                 Jsi_Value *v = _jsi_TOP->d.lval;",
          "1620:                 SIGASSERT(v, VALUE);",
          "1621:                 Jsi_ValueToNumber(interp, v);",
          "1622:                 rc = _jsi_StrictChk(v);",
          "1623:                 v->d.num += inc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1626:                 if (v->f.bits.readonly)",
          "1627:                     return Jsi_LogError(\"assign to readonly variable\");",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:     jsi_Eopcode op;",
          "441:     void *data;",
          "442:     unsigned int Line:16;",
          "444:     unsigned char alloc:1;",
          "445:     unsigned char nodebug:1;",
          "446:     unsigned char hit:1;",
          "",
          "[Removed Lines]",
          "443:     unsigned int Lofs:8;",
          "",
          "[Added Lines]",
          "443:     unsigned int Lofs:7;",
          "444:     unsigned int  readonly:1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815: typedef struct {",
          "816:     jsi_Sig sig;",
          "818:     unsigned int local:1;",
          "819:     jsi_Pstate *ps;",
          "820:     char *varname;",
          "",
          "[Removed Lines]",
          "817:     int context_id:31;",
          "",
          "[Added Lines]",
          "818:     int context_id:30;",
          "819:     unsigned int const:1;",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:     (*to)->VD.label3 = \"ValueDup2\";",
          "313: #endif",
          "314:     Jsi_ValueCopy(interp, *to, from);",
          "316: }",
          "318: Jsi_Value *Jsi_ValueDupJSON(Jsi_Interp *interp, Jsi_Value *val)",
          "",
          "[Removed Lines]",
          "315:     (*to)->f.bits.readonly = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: localvar:",
          "150:     LOCAL { $$ = LOCAL; }",
          "153: ;",
          "155: objectident:",
          "",
          "[Removed Lines]",
          "151:     | LOCALLET { $$ = LOCAL; }",
          "152:     | LOCALCONST { $$ = LOCAL; }",
          "",
          "[Added Lines]",
          "151:     | LOCALLET { $$ = LOCALLET; }",
          "152:     | LOCALCONST { $$ = LOCALCONST; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:     | RETURN expr ';'   { $$ = codes_join($2, code_ret(pstate, &@2, 1)); }",
          "178:     | RETURN ';'        { $$ = code_ret(pstate, &@1, 0); }",
          "179:     | localvar vardecs ';' {",
          "181:         $$ = $2;",
          "182:     }",
          "183:     | THROW expr ';'    { $$ = codes_join($2, code_throw(pstate, &@2)); }",
          "",
          "[Removed Lines]",
          "180:         jsi_mark_local($2);",
          "",
          "[Added Lines]",
          "180:         jsi_mark_local($2, $1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "406:         jsi_ForinVar *fv;",
          "407:         int inof = $6;",
          "408:         Jsi_OpCodes *loc = code_local(pstate, &@5, $5);",
          "410:         fv = forinvar_new(pstate, $5, loc, NULL);",
          "411:         Jsi_OpCodes *lval;",
          "412:         if (fv->varname) lval = code_push_index(pstate, &@2, fv->varname, 1);",
          "",
          "[Removed Lines]",
          "409:         jsi_mark_local(loc);",
          "",
          "[Added Lines]",
          "409:         jsi_mark_local(loc, $4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "449:     ';'                 { $$ = code_nop(); }",
          "450:     | expr ';'          { $$ = codes_join($1, code_pop(1)); }",
          "451:     | localvar vardecs ';' {",
          "453:         $$ = $2;",
          "454:     }",
          "455: ;",
          "",
          "[Removed Lines]",
          "452:         jsi_mark_local($2);",
          "",
          "[Added Lines]",
          "452:         jsi_mark_local($2, $1);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}