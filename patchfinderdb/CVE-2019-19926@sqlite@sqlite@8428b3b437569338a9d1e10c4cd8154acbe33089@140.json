{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c90653365027c505e13d45f2c8bc986306b24744",
      "candidate_info": {
        "commit_hash": "c90653365027c505e13d45f2c8bc986306b24744",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c90653365027c505e13d45f2c8bc986306b24744",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved comments on the VDBE branch coverage testing logic.  Fix the VDBE branch coverage measurement on the OP_MustBeInt opcode.\n\nFossilOrigin-Name: 8681750e855a020ee374cb9f973f701a72068e33f97d0101a4fab3a228e5ebda",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fcf3307d37f0e8e0c8c54491c609b73c7add6eaa38409a41c7cd6614a877a19",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1734:   pIn1 = &aMem[pOp->p1];",
          "1735:   if( (pIn1->flags & MEM_Int)==0 ){",
          "1736:     applyAffinity(pIn1, SQLITE_AFF_NUMERIC, encoding);",
          "1738:     if( (pIn1->flags & MEM_Int)==0 ){",
          "1739:       if( pOp->p2==0 ){",
          "1740:         rc = SQLITE_MISMATCH;",
          "1741:         goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "1737:     VdbeBranchTaken((pIn1->flags&MEM_Int)==0, 2);",
          "",
          "[Added Lines]",
          "1758:       VdbeBranchTaken(1, 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1744:       }",
          "1745:     }",
          "1746:   }",
          "1747:   MemSetTypeFlag(pIn1, MEM_Int);",
          "1748:   break;",
          "1749: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1767:   VdbeBranchTaken(0, 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a3e50dc97e83e7f2501c6ce96adc9cbf50c6cd4",
      "candidate_info": {
        "commit_hash": "7a3e50dc97e83e7f2501c6ce96adc9cbf50c6cd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a3e50dc97e83e7f2501c6ce96adc9cbf50c6cd4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Minor simplification of NULL value handling for STAT4.\n\nFossilOrigin-Name: 5718a9d5fc3fdfc89db869501c81fda39b3ec5c7e11fa0038fc258e316f5d8a1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 03f2e78899fad99b0a0951b3a408268276954d4cd785389ed9a0192c9217f6fe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1511:   }else if( op==TK_NULL ){",
          "1512:     pVal = valueNew(db, pCtx);",
          "1513:     if( pVal==0 ) goto no_mem;",
          "1515:   }",
          "1516: #ifndef SQLITE_OMIT_BLOB_LITERAL",
          "1517:   else if( op==TK_BLOB ){",
          "",
          "[Removed Lines]",
          "1514:     sqlite3VdbeMemNumerify(pVal);",
          "",
          "[Added Lines]",
          "1514:     sqlite3VdbeMemSetNull(pVal);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a634c9e653713cfed97f4409486470bc817f514f",
      "candidate_info": {
        "commit_hash": "a634c9e653713cfed97f4409486470bc817f514f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a634c9e653713cfed97f4409486470bc817f514f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Window functions are never constant.\n\nFossilOrigin-Name: 35f0b5a8c7921f7419eeb11be8201fd6988047042fcaeffa297fc322bc480c1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54410f0e7710542d5159d0449898598d2b7f7676bfd993644ca47da1bf1fcdac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1943:     case TK_FUNCTION:",
          "1945:         return WRC_Continue;",
          "1946:       }else{",
          "1947:         pWalker->eCode = 0;",
          "",
          "[Removed Lines]",
          "1944:       if( pWalker->eCode>=4 || ExprHasProperty(pExpr,EP_ConstFunc) ){",
          "",
          "[Added Lines]",
          "1944:       if( (pWalker->eCode>=4 || ExprHasProperty(pExpr,EP_ConstFunc))",
          "1945:        && !ExprHasProperty(pExpr, EP_WinFunc)",
          "1946:       ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1efcc9dd965c5b48a1a9e27ce760b38f9d892cb4",
      "candidate_info": {
        "commit_hash": "1efcc9dd965c5b48a1a9e27ce760b38f9d892cb4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1efcc9dd965c5b48a1a9e27ce760b38f9d892cb4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Another very small performance improvement.\n\nFossilOrigin-Name: 7a1e30a17f57ca006dd84b6f97b0c7811bf4c6da4b02903452ffc4bc363cab9b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 81eed055de856068109a7e332cca0c3ff1120ebe2bfa5ed6383b165c726e0a7c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:   rc = sParse.rc;",
          "637: #ifndef SQLITE_OMIT_EXPLAIN",
          "639:     static const char * const azColName[] = {",
          "640:        \"addr\", \"opcode\", \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"comment\",",
          "641:        \"id\", \"parent\", \"notused\", \"detail\"",
          "",
          "[Removed Lines]",
          "638:   if( rc==SQLITE_OK && sParse.pVdbe && sParse.explain ){",
          "",
          "[Added Lines]",
          "638:   if( sParse.explain && rc==SQLITE_OK && sParse.pVdbe ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:   if( db->init.busy==0 ){",
          "661:     sqlite3VdbeSetSql(sParse.pVdbe, zSql, (int)(sParse.zTail-zSql), prepFlags);",
          "662:   }",
          "665:     assert(!(*ppStmt));",
          "666:   }else{",
          "",
          "[Removed Lines]",
          "663:   if( sParse.pVdbe && (rc!=SQLITE_OK || db->mallocFailed) ){",
          "664:     sqlite3VdbeFinalize(sParse.pVdbe);",
          "",
          "[Added Lines]",
          "663:   if( rc!=SQLITE_OK || db->mallocFailed ){",
          "664:     if( sParse.pVdbe ) sqlite3VdbeFinalize(sParse.pVdbe);",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "428:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "429: }",
          "433: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "431: execsql_test 4.11 {",
          "432:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "433: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "897:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "898: } {3   3   3   6   6   6}",
          "900: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "900: do_execsql_test 4.11 {",
          "901:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "902: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee751fab4c078ca21fe4821a433060efd585e5ce",
      "candidate_info": {
        "commit_hash": "ee751fab4c078ca21fe4821a433060efd585e5ce",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee751fab4c078ca21fe4821a433060efd585e5ce",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "test/vacuum-into.test"
        ],
        "message": "Raise an error if the argument to VACUUM INTO is an identifier.\n\nFossilOrigin-Name: 6c6fb1c6ea452c70b56fd4ac796affebee21512adba0455ae81c291b715f544f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 911342f7512145a8a189bb0ec59e70e4c9ddc9f20f3e84816ab25139ead5dc45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1662: }",
          "1681: ){",
          "1686:   memset(&sNC, 0, sizeof(sNC));",
          "1687:   memset(&sSrc, 0, sizeof(sSrc));",
          "1692:   sNC.pParse = pParse;",
          "1693:   sNC.pSrcList = &sSrc;",
          "1694:   sNC.ncFlags = type;",
          "1697: }",
          "",
          "[Removed Lines]",
          "1675: void sqlite3ResolveSelfReference(",
          "1685:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr );",
          "1688:   sSrc.nSrc = 1;",
          "1689:   sSrc.a[0].zName = pTab->zName;",
          "1690:   sSrc.a[0].pTab = pTab;",
          "1691:   sSrc.a[0].iCursor = -1;",
          "1695:   if( sqlite3ResolveExprNames(&sNC, pExpr) ) return;",
          "1696:   if( pList ) sqlite3ResolveExprListNames(&sNC, pList);",
          "",
          "[Added Lines]",
          "1679: int sqlite3ResolveSelfReference(",
          "1688:   int rc;",
          "1690:   assert( type==0 || pTab!=0 );",
          "1691:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr || pTab==0 );",
          "1694:   if( pTab ){",
          "1695:     sSrc.nSrc = 1;",
          "1696:     sSrc.a[0].zName = pTab->zName;",
          "1697:     sSrc.a[0].pTab = pTab;",
          "1698:     sSrc.a[0].iCursor = -1;",
          "1699:   }",
          "1703:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1704:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1705:   return rc;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4271: int sqlite3ResolveExprNames(NameContext*, Expr*);",
          "4272: int sqlite3ResolveExprListNames(NameContext*, ExprList*);",
          "4273: void sqlite3ResolveSelectNames(Parse*, Select*, NameContext*);",
          "4275: int sqlite3ResolveOrderGroupBy(Parse*, Select*, ExprList*, const char*);",
          "4276: void sqlite3ColumnDefault(Vdbe *, Table *, int, int);",
          "4277: void sqlite3AlterFinishAddColumn(Parse *, Token *);",
          "",
          "[Removed Lines]",
          "4274: void sqlite3ResolveSelfReference(Parse*,Table*,int,Expr*,ExprList*);",
          "",
          "[Added Lines]",
          "4274: int sqlite3ResolveSelfReference(Parse*,Table*,int,Expr*,ExprList*);",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:   }",
          "125:   if( iDb!=1 ){",
          "126:     int iIntoReg = 0;",
          "128:       iIntoReg = ++pParse->nMem;",
          "129:       sqlite3ExprCode(pParse, pInto, iIntoReg);",
          "130:     }",
          "",
          "[Removed Lines]",
          "127:     if( pInto ){",
          "",
          "[Added Lines]",
          "127:     if( pInto && sqlite3ResolveSelfReference(pParse,0,0,pInto,0)==0 ){",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: do_catchsql_test vacuum-into-310 {",
          "66:   VACUUM INTO null;",
          "67: } {1 {non-text filename}}",
          "69: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: do_catchsql_test vacuum-into-320 {",
          "69:   VACUUM INTO x;",
          "70: } {1 {no such column: x}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}