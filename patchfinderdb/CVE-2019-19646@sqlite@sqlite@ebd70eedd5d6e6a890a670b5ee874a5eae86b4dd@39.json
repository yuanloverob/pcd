{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
      "candidate_info": {
        "commit_hash": "c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/upsert1.test"
        ],
        "message": "Do not allow UPSERT of a view.\n\nFossilOrigin-Name: ebf897e861c19e214c57f1e73841b505182202cc8d7d39e24d5a1e5625e26b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/upsert1.test||test/upsert1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7810062ec2489e1c5ca6638dbeb0892e4ce376c5c1834a31d1a332ebab8a871",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "949:               pTab->zName);",
          "950:       goto insert_cleanup;",
          "951:     }",
          "952:     if( sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget) ){",
          "953:       goto insert_cleanup;",
          "954:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952:     if( pTab->pSelect ){",
          "953:       sqlite3ErrorMsg(pParse, \"cannot UPSERT a view\");",
          "954:       goto insert_cleanup;",
          "955:     }",
          "",
          "---------------"
        ],
        "test/upsert1.test||test/upsert1.test": [
          "File: test/upsert1.test -> test/upsert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   REINDEX;",
          "222: } {ok}",
          "224: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: # 2019-12-06 gramfuzz find",
          "225: sqlite3 db :memory:",
          "226: do_execsql_test upsert1-900 {",
          "227:   CREATE VIEW t1(a) AS SELECT 1;",
          "228:   CREATE TRIGGER t1r1 INSTEAD OF INSERT ON t1 BEGIN",
          "229:      SELECT 2;",
          "230:   END;",
          "231: }",
          "232: do_catchsql_test upsert1-910 {",
          "233:   INSERT INTO t1 VALUES(3) ON CONFLICT(x) DO NOTHING;",
          "234: } {1 {cannot UPSERT a view}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fc836546e035fc18a4bf66c3bb895dc5af10fa0",
      "candidate_info": {
        "commit_hash": "4fc836546e035fc18a4bf66c3bb895dc5af10fa0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fc836546e035fc18a4bf66c3bb895dc5af10fa0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/in.test"
        ],
        "message": "Fix a bug introduced earlier today by check-in [88833a9c2849c959]. Ticket [29f635e0af71234b]\n\nFossilOrigin-Name: 6e7b4527d32cc1be0294614b9d7363d4b59cf654a954b86515b3f6888975ce73",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9490683ae883561fa347cbe54ebdd61188d849b4852d904b508250ba5d0807ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3132:     }",
          "3133:     bLhsReal = sqlite3ExprAffinity(pExpr->pLeft)==SQLITE_AFF_REAL;",
          "3134:     for(ii=0; ii<pList->nExpr; ii++){",
          "3136:       if( bLhsReal ){",
          "3137:         sqlite3VdbeAddOp4(v, OP_Affinity, r2, 1, 0, \"E\", P4_STATIC);",
          "3138:       }",
          "3139:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3140:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "",
          "[Removed Lines]",
          "3135:       r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "",
          "[Added Lines]",
          "3136:         r2 = regToFree = sqlite3GetTempReg(pParse);",
          "3137:         sqlite3ExprCode(pParse, pList->a[ii].pExpr, r2);",
          "3139:       }else{",
          "3140:         r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "763: # For the IN_INDEX_NOOP optimization, apply REAL affinity to the LHS",
          "764: # values prior to comparison if the RHS has REAL affinity.",
          "765: #",
          "766: do_execsql_test in-19.1 {",
          "767:   DROP TABLE IF EXISTS t0;",
          "768:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766: # Also ticket https://sqlite.org/src/info/29f635e0af71234b",
          "767: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "775: do_execsql_test in-19.3 {",
          "776:   SELECT c0 IN ('2070934912552030444',2,3) FROM t0;",
          "777: } {1}",
          "779: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "780: do_execsql_test in-19.4 {",
          "781:   DROP TABLE t0;",
          "782:   CREATE TABLE t0(c0 TEXT, c1 REAL, c2, PRIMARY KEY(c2, c0, c1));",
          "783:   CREATE INDEX i0 ON t0(c1 IN (c0));",
          "784:   INSERT INTO t0(c0, c2) VALUES (0, NULL) ON CONFLICT(c2, c1, c0) DO NOTHING;",
          "785:   PRAGMA integrity_check;",
          "786: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "deb201b8663ebf1793298ecdd8eb83fa1b407c6d",
      "candidate_info": {
        "commit_hash": "deb201b8663ebf1793298ecdd8eb83fa1b407c6d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/deb201b8663ebf1793298ecdd8eb83fa1b407c6d",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use SQLITE_PREPARE_NO_VTAB in rtree as well.\n\nFossilOrigin-Name: 82a2ae7132964eab0dfad9a8314a399ffd3b72366b35e1767df6452125dd1d80",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3423:   };",
          "3424:   sqlite3_stmt **appStmt[N_STATEMENT];",
          "3425:   int i;",
          "3427:   pRtree->db = db;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3426:   const int f = SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3479:     }",
          "3480:     zSql = sqlite3_mprintf(zFormat, zDb, zPrefix);",
          "3481:     if( zSql ){",
          "3484:     }else{",
          "3485:       rc = SQLITE_NOMEM;",
          "3486:     }",
          "",
          "[Removed Lines]",
          "3482:       rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3483:                               appStmt[i], 0);",
          "",
          "[Added Lines]",
          "3483:       rc = sqlite3_prepare_v3(db, zSql, -1, f, appStmt[i], 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3510:       if( zSql==0 ){",
          "3511:         rc = SQLITE_NOMEM;",
          "3512:       }else{",
          "3515:         sqlite3_free(zSql);",
          "3516:       }",
          "3517:     }",
          "",
          "[Removed Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3514:                                 &pRtree->pWriteAux, 0);",
          "",
          "[Added Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, f, &pRtree->pWriteAux, 0);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test": [
          "File: ext/rtree/rtreecirc.test -> ext/rtree/rtreecirc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 Dec 22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: if {![info exists testdir]} {",
          "16:   set testdir [file join [file dirname [info script]] .. .. test]",
          "17: }",
          "18: source [file join [file dirname [info script]] rtree_util.tcl]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix rtreecirc",
          "22: ifcapable !rtree {",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: do_execsql_test 1.0 {",
          "28:   CREATE VIRTUAL TABLE rt USING rtree(id, x1, x2, y1, y2);",
          "29:   SELECT name FROM sqlite_master ORDER BY 1;",
          "30: } {",
          "31:   rt rt_node rt_parent rt_rowid",
          "32: }",
          "33: db_save_and_close",
          "35: foreach {tn schema sql} {",
          "36:   1 {",
          "37:     CREATE TRIGGER tr1 AFTER INSERT ON rt_node BEGIN",
          "38:       SELECT * FROM rt;",
          "39:     END;",
          "40:   } {",
          "41:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "42:   }",
          "43:   2 {",
          "44:     CREATE TRIGGER tr1 AFTER INSERT ON rt_parent BEGIN",
          "45:       SELECT * FROM rt;",
          "46:     END;",
          "47:   } {",
          "48:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "49:   }",
          "50:   3 {",
          "51:     CREATE TRIGGER tr1 AFTER INSERT ON rt_rowid BEGIN",
          "52:       SELECT * FROM rt;",
          "53:     END;",
          "54:   } {",
          "55:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "56:   }",
          "57: } {",
          "58:   db_restore_and_reopen",
          "59:   do_execsql_test  1.1.$tn.1 $schema",
          "60:   do_catchsql_test 1.1.$tn.2 $sql {1 {no such table: main.rt}}",
          "61:   db close",
          "62: }",
          "65: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1999612010e310fc2430d1f00076f69fade0c66d202771dbb0f3d5597ac0a03c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e26ac852a13e8ba1182f6c3d90a750e5a658118",
      "candidate_info": {
        "commit_hash": "9e26ac852a13e8ba1182f6c3d90a750e5a658118",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e26ac852a13e8ba1182f6c3d90a750e5a658118",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/sqllimits1.test"
        ],
        "message": "New test case for SQLITE_TOOBIG errors.\n\nFossilOrigin-Name: 4c77fbbe5d54248821161d708d0631fab65659bef31f95a61af681d4639f5918",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/sqllimits1.test||test/sqllimits1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea2d4b65e20e44e19219c821bf68e97ff3af1760b3b4762250d020ba2a5a6343",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/sqllimits1.test||test/sqllimits1.test": [
          "File: test/sqllimits1.test -> test/sqllimits1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "889: foreach {key value} [array get saved] {",
          "890:   catch {set $key $value}",
          "891: }",
          "892: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893: #-------------------------------------------------------------------------",
          "894: # At one point the following caused an assert() to fail.",
          "895: #",
          "896: sqlite3_limit db SQLITE_LIMIT_LENGTH 10000",
          "897: set nm [string repeat x 10000]",
          "898: do_catchsql_test sqllimits1-17.1 \"",
          "899:   CREATE TABLE $nm (x PRIMARY KEY)",
          "900: \" {1 {string or blob too big}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8083ef029f8a298462aa461bebc6a1c1190504f7",
      "candidate_info": {
        "commit_hash": "8083ef029f8a298462aa461bebc6a1c1190504f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8083ef029f8a298462aa461bebc6a1c1190504f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "In the \"pgidx\" command of the showdb utility, try to identify orphaned pages and show when pages have been zeroed out.\n\nFossilOrigin-Name: eed701ef919c70d891727250be6a1b626aeb894c562d221e319ae6d74fc71d3d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5df2bf62fcd4dfdaa195062dddbd5ce5420bc239b2649ac8f547e0db34e7f0bb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:   }",
          "836: }",
          "842: static void page_usage_btree(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841: static int allZero(unsigned char *a, int n){",
          "842:   while( n && (a++)[0]==0 ){ n--; }",
          "843:   return n==0;",
          "844: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "854:   if( pgno<=0 || pgno>g.mxPage ) return;",
          "855:   a = fileRead((pgno-1)*g.pagesize, g.pagesize);",
          "856:   switch( a[hdr] ){",
          "857:     case 2:  zType = \"interior node of index\";  break;",
          "858:     case 5:  zType = \"interior node of table\";  break;",
          "859:     case 10: zType = \"leaf of index\";           break;",
          "860:     case 13: zType = \"leaf of table\";           break;",
          "861:   }",
          "863:     page_usage_msg(pgno, \"%s [%s], child %d of page %d\",",
          "864:                    zType, zName, idx, parent);",
          "866:     page_usage_msg(pgno, \"root %s [%s]\", zType, zName);",
          "867:   }",
          "868:   nCell = a[hdr+3]*256 + a[hdr+4];",
          "869:   if( a[hdr]==2 || a[hdr]==5 ){",
          "",
          "[Removed Lines]",
          "862:   if( parent ){",
          "865:   }else{",
          "",
          "[Added Lines]",
          "868:     case 0: {",
          "869:       if( allZero(a, g.pagesize) ){",
          "870:         zType = \"zeroed page\";",
          "871:       }else if( parent<0 ){",
          "872:         return;",
          "873:       }else{",
          "874:         zType = \"corrupt node\";",
          "875:       }",
          "876:       break;",
          "877:     }",
          "882:     default: {",
          "883:       if( parent<0 ) return;",
          "884:       zType = \"corrupt node\";",
          "885:     }",
          "887:   if( parent>0 ){",
          "890:   }else if( parent==0 ){",
          "892:   }else{",
          "893:     page_usage_msg(pgno, \"orphaned %s\", zType);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "990:   for(i=1; i<=g.mxPage; i++){",
          "991:     printf(\"%5d: %s\\n\", i, zPageUse[i] ? zPageUse[i] : \"???\");",
          "992:     sqlite3_free(zPageUse[i]);",
          "993:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1018:     if( zPageUse[i]==0 ) page_usage_btree(i, -1, 0, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}