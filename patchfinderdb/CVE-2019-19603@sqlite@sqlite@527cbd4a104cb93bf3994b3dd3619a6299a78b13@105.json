{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6e11892db8919592352b20228b9c9c36f31bf1a8",
      "candidate_info": {
        "commit_hash": "6e11892db8919592352b20228b9c9c36f31bf1a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e11892db8919592352b20228b9c9c36f31bf1a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/where.c",
          "src/window.c",
          "test/nulls1.test",
          "tool/mkkeywordhash.c"
        ],
        "message": "Experimental implementation of NULLS FIRST/LAST. This branch still has problems - the most significant of which is that ORDER BY clauses with a non-default NULLS FIRST/LAST qualifier can never use an index.\n\nFossilOrigin-Name: 07babb0f897fc8c9cb5b30481899c32fdd743f3f3ca508d8d957826252107dd5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/where.c||src/where.c",
          "src/window.c||src/window.c",
          "test/nulls1.test||test/nulls1.test",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 636ca4472c9f41eb3989f28854d4968867837399a2092f389d1b814d98cccbae",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1443:     pTab->keyConf = (u8)onError;",
          "1444:     assert( autoInc==0 || autoInc==1 );",
          "1445:     pTab->tabFlags |= autoInc*TF_Autoincrement;",
          "1447:   }else if( autoInc ){",
          "1448: #ifndef SQLITE_OMIT_AUTOINCREMENT",
          "1449:     sqlite3ErrorMsg(pParse, \"AUTOINCREMENT is only allowed on an \"",
          "",
          "[Removed Lines]",
          "1446:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortOrder;",
          "",
          "[Added Lines]",
          "1446:     if( pList ) pParse->iPkSortOrder = pList->a[0].sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1894:     if( IN_RENAME_OBJECT ){",
          "1895:       sqlite3RenameTokenRemap(pParse, pList->a[0].pExpr, &pTab->iPKey);",
          "1896:     }",
          "1898:     assert( pParse->pNewTable==pTab );",
          "1899:     pTab->iPKey = -1;",
          "1900:     sqlite3CreateIndex(pParse, 0, 0, 0, pList, pTab->keyConf, 0, 0, 0, 0,",
          "",
          "[Removed Lines]",
          "1897:     pList->a[0].sortOrder = pParse->iPkSortOrder;",
          "",
          "[Added Lines]",
          "1897:     pList->a[0].sortFlags = pParse->iPkSortOrder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3368:               sqlite3ExprAlloc(db, TK_ID, &prevCol, 0));",
          "3369:     if( pList==0 ) goto exit_create_index;",
          "3370:     assert( pList->nExpr==1 );",
          "3372:   }else{",
          "3373:     sqlite3ExprListCheckLength(pParse, pList, \"index\");",
          "3374:     if( pParse->nErr ) goto exit_create_index;",
          "",
          "[Removed Lines]",
          "3371:     sqlite3ExprListSetSortOrder(pList, sortOrder);",
          "",
          "[Added Lines]",
          "3371:     sqlite3ExprListSetSortOrder(pList, sortOrder, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3486:       goto exit_create_index;",
          "3487:     }",
          "3488:     pIndex->azColl[i] = zColl;",
          "3490:     pIndex->aSortOrder[i] = (u8)requestedSortOrder;",
          "3491:   }",
          "",
          "[Removed Lines]",
          "3489:     requestedSortOrder = pListItem->sortOrder & sortOrderMask;",
          "",
          "[Added Lines]",
          "3489:     requestedSortOrder = pListItem->sortFlags & sortOrderMask;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4704:       const char *zColl = pIdx->azColl[i];",
          "4705:       pKey->aColl[i] = zColl==sqlite3StrBINARY ? 0 :",
          "4706:                         sqlite3LocateCollSeq(pParse, zColl);",
          "4708:     }",
          "4709:     if( pParse->nErr ){",
          "4710:       assert( pParse->rc==SQLITE_ERROR_MISSING_COLLSEQ );",
          "",
          "[Removed Lines]",
          "4707:       pKey->aSortOrder[i] = pIdx->aSortOrder[i];",
          "",
          "[Added Lines]",
          "4707:       pKey->aSortFlags[i] = pIdx->aSortOrder[i];",
          "4708:       assert( 0==(pKey->aSortFlags[i] & KEYINFO_ORDER_BIGNULL) );",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1404:     }",
          "1405:     pItem->zName = sqlite3DbStrDup(db, pOldItem->zName);",
          "1406:     pItem->zSpan = sqlite3DbStrDup(db, pOldItem->zSpan);",
          "1408:     pItem->done = 0;",
          "1409:     pItem->bSpanIsTab = pOldItem->bSpanIsTab;",
          "1410:     pItem->bSorterRef = pOldItem->bSorterRef;",
          "",
          "[Removed Lines]",
          "1407:     pItem->sortOrder = pOldItem->sortOrder;",
          "",
          "[Added Lines]",
          "1407:     pItem->sortFlags = pOldItem->sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1661:   if( p==0 ) return;",
          "1663:   assert( p->nExpr>0 );",
          "1667:   }",
          "1669: }",
          "",
          "[Removed Lines]",
          "1660: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){",
          "1662:   assert( SQLITE_SO_UNDEFINED<0 && SQLITE_SO_ASC>=0 && SQLITE_SO_DESC>0 );",
          "1664:   if( iSortOrder<0 ){",
          "1665:     assert( p->a[p->nExpr-1].sortOrder==SQLITE_SO_ASC );",
          "1666:     return;",
          "1668:   p->a[p->nExpr-1].sortOrder = (u8)iSortOrder;",
          "",
          "[Added Lines]",
          "1660: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder, int eNulls){",
          "1664:   assert( SQLITE_SO_UNDEFINED<0 && SQLITE_SO_ASC==0 && SQLITE_SO_DESC>0 );",
          "1665:   assert( iSortOrder==SQLITE_SO_UNDEFINED",
          "1666:        || iSortOrder==SQLITE_SO_ASC",
          "1667:        || iSortOrder==SQLITE_SO_DESC",
          "1668:   );",
          "1669:   assert( eNulls==SQLITE_SO_UNDEFINED",
          "1670:        || eNulls==SQLITE_SO_ASC",
          "1671:        || eNulls==SQLITE_SO_DESC",
          "1672:   );",
          "1674:   if( iSortOrder==SQLITE_SO_UNDEFINED ) iSortOrder = SQLITE_SO_ASC;",
          "1675:   p->a[p->nExpr-1].sortFlags = (u8)iSortOrder;",
          "1676:   if( eNulls!=SQLITE_SO_UNDEFINED && iSortOrder!=eNulls ){",
          "1677:     p->a[p->nExpr-1].sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4909:   for(i=0; i<pA->nExpr; i++){",
          "4910:     Expr *pExprA = pA->a[i].pExpr;",
          "4911:     Expr *pExprB = pB->a[i].pExpr;",
          "4913:     if( sqlite3ExprCompare(0, pExprA, pExprB, iTab) ) return 1;",
          "4914:   }",
          "4915:   return 0;",
          "",
          "[Removed Lines]",
          "4912:     if( pA->a[i].sortOrder!=pB->a[i].sortOrder ) return 1;",
          "",
          "[Added Lines]",
          "4922:     if( pA->a[i].sortFlags!=pB->a[i].sortFlags ) return 1;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   IGNORE IMMEDIATE INITIALLY INSTEAD LIKE_KW MATCH NO PLAN",
          "212:   QUERY KEY OF OFFSET PRAGMA RAISE RECURSIVE RELEASE REPLACE RESTRICT ROW ROWS",
          "213:   ROLLBACK SAVEPOINT TEMP TRIGGER VACUUM VIEW VIRTUAL WITH WITHOUT",
          "214: %ifdef SQLITE_OMIT_COMPOUND_SELECT",
          "215:   EXCEPT INTERSECT UNION",
          "216: %endif SQLITE_OMIT_COMPOUND_SELECT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:   NULLS FIRST LAST",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782: orderby_opt(A) ::= .                          {A = 0;}",
          "783: orderby_opt(A) ::= ORDER BY sortlist(X).      {A = X;}",
          "785:   A = sqlite3ExprListAppend(pParse,A,Y);",
          "787: }",
          "791: }",
          "793: %type sortorder {int}",
          "",
          "[Removed Lines]",
          "784: sortlist(A) ::= sortlist(A) COMMA expr(Y) sortorder(Z). {",
          "786:   sqlite3ExprListSetSortOrder(A,Z);",
          "788: sortlist(A) ::= expr(Y) sortorder(Z). {",
          "790:   sqlite3ExprListSetSortOrder(A,Z);",
          "",
          "[Added Lines]",
          "785: sortlist(A) ::= sortlist(A) COMMA expr(Y) sortorder(Z) nulls(X). {",
          "787:   sqlite3ExprListSetSortOrder(A,Z,X);",
          "789: sortlist(A) ::= expr(Y) sortorder(Z) nulls(X). {",
          "791:   sqlite3ExprListSetSortOrder(A,Z,X);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "796: sortorder(A) ::= DESC.          {A = SQLITE_SO_DESC;}",
          "797: sortorder(A) ::= .              {A = SQLITE_SO_UNDEFINED;}",
          "799: %type groupby_opt {ExprList*}",
          "800: %destructor groupby_opt {sqlite3ExprListDelete(pParse->db, $$);}",
          "801: groupby_opt(A) ::= .                      {A = 0;}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800: %type nulls {int}",
          "801: nulls(A) ::= NULLS FIRST.       {A = SQLITE_SO_ASC;}",
          "802: nulls(A) ::= NULLS LAST.        {A = SQLITE_SO_DESC;}",
          "803: nulls(A) ::= .                  {A = SQLITE_SO_UNDEFINED;}",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1275:   int nExtra = (N+X)*(sizeof(CollSeq*)+1) - sizeof(CollSeq*);",
          "1276:   KeyInfo *p = sqlite3DbMallocRawNN(db, sizeof(KeyInfo) + nExtra);",
          "1277:   if( p ){",
          "1279:     p->nKeyField = (u16)N;",
          "1280:     p->nAllField = (u16)(N+X);",
          "1281:     p->enc = ENC(db);",
          "",
          "[Removed Lines]",
          "1278:     p->aSortOrder = (u8*)&p->aColl[N+X];",
          "",
          "[Added Lines]",
          "1278:     p->aSortFlags = (u8*)&p->aColl[N+X];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1352:     assert( sqlite3KeyInfoIsWriteable(pInfo) );",
          "1353:     for(i=iStart, pItem=pList->a+iStart; i<nExpr; i++, pItem++){",
          "1354:       pInfo->aColl[i-iStart] = sqlite3ExprNNCollSeq(pParse, pItem->pExpr);",
          "1356:     }",
          "1357:   }",
          "1358:   return pInfo;",
          "",
          "[Removed Lines]",
          "1355:       pInfo->aSortOrder[i-iStart] = pItem->sortOrder;",
          "",
          "[Added Lines]",
          "1355:       pInfo->aSortFlags[i-iStart] = pItem->sortFlags;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2253:       }",
          "2254:       assert( sqlite3KeyInfoIsWriteable(pRet) );",
          "2255:       pRet->aColl[i] = pColl;",
          "2257:     }",
          "2258:   }",
          "",
          "[Removed Lines]",
          "2256:       pRet->aSortOrder[i] = pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "2256:       pRet->aSortFlags[i] = pOrderBy->a[i].sortFlags;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3228:       assert( sqlite3KeyInfoIsWriteable(pKeyDup) );",
          "3229:       for(i=0; i<nExpr; i++){",
          "3230:         pKeyDup->aColl[i] = multiSelectCollSeq(pParse, p, i);",
          "3232:       }",
          "3233:     }",
          "3234:   }",
          "",
          "[Removed Lines]",
          "3231:         pKeyDup->aSortOrder[i] = 0;",
          "",
          "[Added Lines]",
          "3231:         pKeyDup->aSortFlags[i] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4425:   }",
          "4427:   assert( pOrderBy!=0 || db->mallocFailed );",
          "4429:   return eRet;",
          "4430: }",
          "",
          "[Removed Lines]",
          "4428:   if( pOrderBy ) pOrderBy->a[0].sortOrder = sortOrder;",
          "",
          "[Added Lines]",
          "4428:   if( pOrderBy ) pOrderBy->a[0].sortFlags = sortOrder;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2141: #define KEYINFO_ORDER_DESC    0x01",
          "2142: #define KEYINFO_ORDER_BIGNULL 0x02",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3881: void sqlite3ExprUnmapAndDelete(Parse*, Expr*);",
          "3882: ExprList *sqlite3ExprListAppend(Parse*,ExprList*,Expr*);",
          "3883: ExprList *sqlite3ExprListAppendVector(Parse*,ExprList*,IdList*,Expr*);",
          "3885: void sqlite3ExprListSetName(Parse*,ExprList*,Token*,int);",
          "3886: void sqlite3ExprListSetSpan(Parse*,ExprList*,const char*,const char*);",
          "3887: void sqlite3ExprListDelete(sqlite3*, ExprList*);",
          "",
          "[Removed Lines]",
          "3884: void sqlite3ExprListSetSortOrder(ExprList*,int);",
          "",
          "[Added Lines]",
          "3887: void sqlite3ExprListSetSortOrder(ExprList*,int,int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2227:     REGISTER_TRACE(p2+idx, &aMem[p2+idx]);",
          "2228:     assert( i<pKeyInfo->nKeyField );",
          "2229:     pColl = pKeyInfo->aColl[i];",
          "2231:     iCompare = sqlite3MemCompare(&aMem[p1+idx], &aMem[p2+idx], pColl);",
          "2232:     if( iCompare ){",
          "2233:       if( bRev ) iCompare = -iCompare;",
          "2234:       break;",
          "2235:     }",
          "",
          "[Removed Lines]",
          "2230:     bRev = pKeyInfo->aSortOrder[i];",
          "",
          "[Added Lines]",
          "2230:     bRev = (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_DESC);",
          "2233:       if( (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_BIGNULL)",
          "2234:        && ((aMem[p1+idx].flags & MEM_Null) || (aMem[p2+idx].flags & MEM_Null))",
          "2235:       ){",
          "2236:         iCompare = -iCompare;",
          "2237:       }",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1493:     case P4_KEYINFO: {",
          "1494:       int j;",
          "1495:       KeyInfo *pKeyInfo = pOp->p4.pKeyInfo;",
          "1497:       sqlite3_str_appendf(&x, \"k(%d\", pKeyInfo->nKeyField);",
          "1498:       for(j=0; j<pKeyInfo->nKeyField; j++){",
          "1499:         CollSeq *pColl = pKeyInfo->aColl[j];",
          "1500:         const char *zColl = pColl ? pColl->zName : \"\";",
          "1501:         if( strcmp(zColl, \"BINARY\")==0 ) zColl = \"B\";",
          "1504:       }",
          "1505:       sqlite3_str_append(&x, \")\", 1);",
          "1506:       break;",
          "",
          "[Removed Lines]",
          "1496:       assert( pKeyInfo->aSortOrder!=0 );",
          "1502:         sqlite3_str_appendf(&x, \",%s%s\",",
          "1503:                pKeyInfo->aSortOrder[j] ? \"-\" : \"\", zColl);",
          "",
          "[Added Lines]",
          "1496:       assert( pKeyInfo->aSortFlags!=0 );",
          "1502:         sqlite3_str_appendf(&x, \",%s%s%s\",",
          "1503:                (pKeyInfo->aSortFlags[j] & KEYINFO_ORDER_DESC) ? \"-\" : \"\",",
          "1504:                (pKeyInfo->aSortFlags[j] & KEYINFO_ORDER_BIGNULL)? \"N.\" : \"\",",
          "1505:                zColl);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3813:   p = (UnpackedRecord *)sqlite3DbMallocRaw(pKeyInfo->db, nByte);",
          "3814:   if( !p ) return 0;",
          "3815:   p->aMem = (Mem*)&((char*)p)[ROUND8(sizeof(UnpackedRecord))];",
          "3817:   p->pKeyInfo = pKeyInfo;",
          "3818:   p->nField = pKeyInfo->nKeyField + 1;",
          "3819:   return p;",
          "",
          "[Removed Lines]",
          "3816:   assert( pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "3818:   assert( pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3912:   if( szHdr1>98307 ) return SQLITE_CORRUPT;",
          "3913:   d1 = szHdr1;",
          "3914:   assert( pKeyInfo->nAllField>=pPKey2->nField || CORRUPT_DB );",
          "3916:   assert( pKeyInfo->nKeyField>0 );",
          "3917:   assert( idx1<=szHdr1 || CORRUPT_DB );",
          "3918:   do{",
          "",
          "[Removed Lines]",
          "3915:   assert( pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "3917:   assert( pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3943:                            pKeyInfo->nAllField>i ? pKeyInfo->aColl[i] : 0);",
          "3944:     if( rc!=0 ){",
          "3948:       }",
          "3949:       goto debugCompareEnd;",
          "",
          "[Removed Lines]",
          "3946:       if( pKeyInfo->aSortOrder[i] ){",
          "",
          "[Added Lines]",
          "3948:       if( (pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_BIGNULL)",
          "3949:        && ((mem1.flags & MEM_Null) || (pPKey2->aMem[i].flags & MEM_Null))",
          "3950:       ){",
          "3951:         rc = -rc;",
          "3952:       }",
          "3953:       if( pKeyInfo->aSortFlags[i] & KEYINFO_ORDER_DESC ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4320:   assert( pPKey2->pKeyInfo->nAllField>=pPKey2->nField",
          "4321:        || CORRUPT_DB );",
          "4323:   assert( pPKey2->pKeyInfo->nKeyField>0 );",
          "4324:   assert( idx1<=szHdr1 || CORRUPT_DB );",
          "4325:   do{",
          "",
          "[Removed Lines]",
          "4322:   assert( pPKey2->pKeyInfo->aSortOrder!=0 );",
          "",
          "[Added Lines]",
          "4329:   assert( pPKey2->pKeyInfo->aSortFlags!=0 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4442:     }",
          "4444:     if( rc!=0 ){",
          "4447:       }",
          "4448:       assert( vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, rc) );",
          "",
          "[Removed Lines]",
          "4445:       if( pPKey2->pKeyInfo->aSortOrder[i] ){",
          "4446:         rc = -rc;",
          "",
          "[Added Lines]",
          "4452:       int sortFlags = pPKey2->pKeyInfo->aSortFlags[i];",
          "4453:       if( sortFlags ){",
          "4454:         if( (sortFlags & KEYINFO_ORDER_BIGNULL)==0",
          "4455:          || ((sortFlags & KEYINFO_ORDER_DESC)",
          "4456:            !=(serial_type==0 || (pRhs->flags&MEM_Null)))",
          "4457:         ){",
          "4458:           rc = -rc;",
          "4459:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4661:   if( p->pKeyInfo->nAllField<=13 ){",
          "4662:     int flags = p->aMem[0].flags;",
          "4664:       p->r1 = 1;",
          "4665:       p->r2 = -1;",
          "4666:     }else{",
          "",
          "[Removed Lines]",
          "4663:     if( p->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "4676:     if( p->pKeyInfo->aSortFlags[0] ){",
          "4677:       if( p->pKeyInfo->aSortFlags[0] & KEYINFO_ORDER_BIGNULL ){",
          "4678:         return sqlite3VdbeRecordCompare;",
          "4679:       }",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "829:       );",
          "830:     }",
          "831:   }else{",
          "833:       res = res * -1;",
          "834:     }",
          "835:   }",
          "",
          "[Removed Lines]",
          "832:     if( pTask->pSorter->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "832:     assert( !(pTask->pSorter->pKeyInfo->aSortFlags[0]&KEYINFO_ORDER_BIGNULL) );",
          "833:     if( pTask->pSorter->pKeyInfo->aSortFlags[0] ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897:           pTask, pbKey2Cached, pKey1, nKey1, pKey2, nKey2",
          "898:       );",
          "899:     }",
          "901:     res = res * -1;",
          "902:   }",
          "",
          "[Removed Lines]",
          "900:   }else if( pTask->pSorter->pKeyInfo->aSortOrder[0] ){",
          "",
          "[Added Lines]",
          "901:   }else if( pTask->pSorter->pKeyInfo->aSortFlags[0] ){",
          "902:     assert( !(pTask->pSorter->pKeyInfo->aSortFlags[0]&KEYINFO_ORDER_BIGNULL) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:     if( pKeyInfo->nAllField<13",
          "1014:      && (pKeyInfo->aColl[0]==0 || pKeyInfo->aColl[0]==db->pDfltColl)",
          "1015:     ){",
          "1016:       pSorter->typeMask = SORTER_TYPE_INTEGER | SORTER_TYPE_TEXT;",
          "1017:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1017:      && (pKeyInfo->aSortFlags[0] & KEYINFO_ORDER_BIGNULL)==0",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1031:   for(i=0; i<nOrderBy; i++){",
          "1032:     Expr *pExpr = pOrderBy->a[i].pExpr;",
          "1033:     pIdxOrderBy[i].iColumn = pExpr->iColumn;",
          "1035:   }",
          "",
          "[Removed Lines]",
          "1034:     pIdxOrderBy[i].desc = pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "1034:     pIdxOrderBy[i].desc = pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3836:               continue;",
          "3837:             }",
          "3838:           }",
          "3839:           if( iColumn!=XN_ROWID ){",
          "3840:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3841:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3839:           if( pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL ) continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3849:         if( isMatch && (wctrlFlags & WHERE_GROUPBY)==0 ){",
          "3852:           if( revSet ){",
          "3854:           }else{",
          "3856:             if( rev ) *pRevMask |= MASKBIT(iLoop);",
          "3857:             revSet = 1;",
          "3858:           }",
          "",
          "[Removed Lines]",
          "3853:             if( (rev ^ revIdx)!=pOrderBy->a[i].sortOrder ) isMatch = 0;",
          "3855:             rev = revIdx ^ pOrderBy->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "3853:           assert( (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL)==0 );",
          "3855:             if( (rev ^ revIdx)!=pOrderBy->a[i].sortFlags ) isMatch = 0;",
          "3857:             rev = revIdx ^ pOrderBy->a[i].sortFlags;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "889:       }",
          "890:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
          "892:     }",
          "893:   }",
          "894:   return pList;",
          "",
          "[Removed Lines]",
          "891:       if( pList ) pList->a[nInit+i].sortOrder = pAppend->a[i].sortOrder;",
          "",
          "[Added Lines]",
          "891:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1296:       pWin->regApp = pParse->nMem+1;",
          "1297:       pParse->nMem += 3;",
          "1298:       if( pKeyInfo && pWin->pFunc->zName[1]=='i' ){",
          "1301:       }",
          "1302:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pWin->csrApp, 2);",
          "1303:       sqlite3VdbeAppendP4(v, pKeyInfo, P4_KEYINFO);",
          "",
          "[Removed Lines]",
          "1299:         assert( pKeyInfo->aSortOrder[0]==0 );",
          "1300:         pKeyInfo->aSortOrder[0] = 1;",
          "",
          "[Added Lines]",
          "1299:         assert( pKeyInfo->aSortFlags[0]==0 );",
          "1300:         pKeyInfo->aSortFlags[0] = KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1861:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1862:   assert( p->pMWin->pOrderBy && p->pMWin->pOrderBy->nExpr==1 );",
          "1864:     switch( op ){",
          "1865:       case OP_Ge: op = OP_Le; break;",
          "1866:       case OP_Gt: op = OP_Lt; break;",
          "",
          "[Removed Lines]",
          "1863:   if( p->pMWin->pOrderBy->a[0].sortOrder ){",
          "",
          "[Added Lines]",
          "1863:   if( p->pMWin->pOrderBy->a[0].sortFlags & KEYINFO_ORDER_DESC ){",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 August 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix nulls1",
          "22: do_execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t3;",
          "24:   CREATE TABLE t3(a INTEGER);",
          "25:   INSERT INTO t3 VALUES(NULL), (10), (30), (20), (NULL);",
          "26: } {}",
          "28: for {set a 0} {$a < 2} {incr a} {",
          "29:   foreach {tn limit} {",
          "30:     1 \"\"",
          "31:     2 \"LIMIT 10\"",
          "32:   } {",
          "33:     do_execsql_test 1.$a.$tn.1 \"",
          "34:       SELECT a FROM t3 ORDER BY a nULLS FIRST $limit",
          "35:     \" {{}   {}   10   20   30}",
          "37:     do_execsql_test 1.$a.$tn.2 \"",
          "38:       SELECT a FROM t3 ORDER BY a nULLS LAST $limit",
          "39:     \" {10   20   30   {}   {}}",
          "41:     do_execsql_test 1.$a.$tn.3 \"",
          "42:       SELECT a FROM t3 ORDER BY a DESC nULLS FIRST $limit",
          "43:     \" {{}   {}   30   20   10}",
          "45:     do_execsql_test 1.$a.$tn.4 \"",
          "46:       SELECT a FROM t3 ORDER BY a DESC nULLS LAST $limit",
          "47:     \" {30   20   10   {}   {}}",
          "48:   }",
          "50:   catchsql { CREATE INDEX i1 ON t3(a) }",
          "51: }",
          "53: finish_test",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN                },",
          "211:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER       },",
          "212:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC             },",
          "213:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC             },",
          "214:   { \"FOR\",              \"TK_FOR\",          TRIGGER                },",
          "215:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS                 },",
          "236:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS                 },",
          "237:   { \"KEY\",              \"TK_KEY\",          ALWAYS                 },",
          "238:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "239:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "240:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:   { \"LAST\",             \"TK_LAST\",         ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT                 },",
          "246:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS                 },",
          "247:   { \"NULL\",             \"TK_NULL\",         ALWAYS                 },",
          "248:   { \"OF\",               \"TK_OF\",           ALWAYS                 },",
          "249:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS                 },",
          "250:   { \"ON\",               \"TK_ON\",           ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dff1d5b61b3c3c74ede5593a4a75673be9e8d974",
      "candidate_info": {
        "commit_hash": "dff1d5b61b3c3c74ede5593a4a75673be9e8d974",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dff1d5b61b3c3c74ede5593a4a75673be9e8d974",
        "files": [
          "ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix RBU handling of partial indexes with comments embedded in their CREATE INDEX statements.\n\nFossilOrigin-Name: e1ccf211aa975a6688a27f7dc4cea80784ed8dcfe1950b2fa6eb0a3cb938838a",
        "before_after_code_files": [
          "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test": [
          "File: ext/rbu/rbupartial.test -> ext/rbu/rbupartial.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     CREATE INDEX i1c3 ON t1(%C%) WHERE %C% IS NOT NULL;",
          "42:     CREATE INDEX i1c4 ON t1(%C%) WHERE %D% < 'd';",
          "43:   }",
          "45:   do_execsql_test $tn.1.1 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     CREATE INDEX i1c5 ON t1(",
          "44:         %C%                   -- for (c = ... expressions",
          "45:     ) WHERE %D% < 'd';",
          "46:     CREATE INDEX i1c6 ON t1(",
          "47:         %C% /* Again, for (c=... expr */, %D%",
          "48:     ) WHERE %D% < 'd';",
          "50:     CREATE INDEX i1c7 ON t1(",
          "51:         %C% /* As before, for (c=... \"expr */) WHERE %D% < 'd';",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2216:             for(i++; 1; i++){",
          "2217:               if( zSql[i]==']' ) break;",
          "2218:             }",
          "2219:           }",
          "2220:         }",
          "2221:         if( zSql[i] ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2219:           }else if( c=='-' && zSql[i+1]=='-' ){",
          "2220:             for(i=i+2; zSql[i] && zSql[i]!='\\n'; i++);",
          "2221:             if( zSql[i]=='\\0' ) break;",
          "2222:           }else if( c=='/' && zSql[i+1]=='*' ){",
          "2223:             for(i=i+2; zSql[i] && (zSql[i]!='*' || zSql[i+1]!='/'); i++);",
          "2224:             if( zSql[i]=='\\0' ) break;",
          "2225:             i++;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 16472112b6886ada18d45cfb409cca2e83dde5a8ba8a36d481e87b61100b0186",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4413265d4eb6eab7dc6c8fde05738fb68990d901",
      "candidate_info": {
        "commit_hash": "4413265d4eb6eab7dc6c8fde05738fb68990d901",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4413265d4eb6eab7dc6c8fde05738fb68990d901",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c"
        ],
        "message": "Add new cases to speedtest1 for measuring performance of binary to/from decimal conversions of floating point values.\n\nFossilOrigin-Name: b84e7057c05338347b4267f7ccc1d7b9b6d4e9a941ce8b76bf2c27c26772000c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ed250b4e18ea042d681bbe8d7ed00895564f4525c22928a003a84585b4756ec3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1191:     speedtest1_run();",
          "1192:   }",
          "1193:   speedtest1_end_test();",
          "1194: }",
          "1196: #ifdef SQLITE_ENABLE_RTREE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1195:   n = g.szTest*5000;",
          "1196:   speedtest1_begin_test(140, \"%d calls to round()\", n);",
          "1197:   speedtest1_exec(\"SELECT sum(round(a,2)+round(b,4)) FROM t1;\");",
          "1198:   speedtest1_end_test();",
          "1201:   speedtest1_begin_test(150, \"%d printf() calls\", n*4);",
          "1202:   speedtest1_exec(",
          "1203:     \"WITH c(fmt) AS (VALUES('%%g'),('%%e'),('%%!g'),('%%.20f'))\"",
          "1204:     \"SELECT sum(printf(fmt,a)) FROM t1, c\"",
          "1205:   );",
          "1206:   speedtest1_end_test();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e08663946ee6d0f5c8429aa035c9db2186ed4766",
      "candidate_info": {
        "commit_hash": "e08663946ee6d0f5c8429aa035c9db2186ed4766",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e08663946ee6d0f5c8429aa035c9db2186ed4766",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/tkt-a7debbe0.test"
        ],
        "message": "Ensure the columns of views and sub-selects in the FROM clause of a select are always assigned implicit collation sequences, just as table columns are. Possible fix for [a7debbe0].\n\nFossilOrigin-Name: 1863b7bf12521bdd2b51c5b8d3a4634bff3e15d3713e0b5343952df7da02f794",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "3482:     }",
          "3483:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3485:         if( pSubst->bFlattener && pExpr ){",
          "3486:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3487:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3488:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "3489:                 (pColl ? pColl->zName : \"BINARY\")",
          "3490:             );",
          "3491:           }",
          "3492:           ExprClearProperty(pExpr, EP_Collate);",
          "3493:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4043:       x.iNewTable = iNewParent;",
          "4044:       x.isLeftJoin = isLeftJoin;",
          "4045:       x.pEList = pSub->pEList;",
          "4046:       substSelect(&x, pParent, 0);",
          "4047:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4059:       x.bFlattener = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4368:       x.iNewTable = iCursor;",
          "4369:       x.isLeftJoin = 0;",
          "4370:       x.pEList = pSubq->pEList;",
          "4371:       pNew = substExpr(&x, pNew);",
          "4372:       if( pSubq->selFlags & SF_Aggregate ){",
          "4373:         pSubq->pHaving = sqlite3ExprAnd(pParse, pSubq->pHaving, pNew);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4385:       x.bFlattener = 0;",
          "",
          "---------------"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket a7debbe0ad1 have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-a7debbe0",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener",
          "23:     optimization_control db query-flattener 0",
          "24:   } else {",
          "25:     # Enable the flattener",
          "26:     optimization_control db query-flattener 1",
          "27:   }",
          "29:   do_execsql_test $tn.1.0 {",
          "30:     CREATE TABLE t0(xyz INTEGER);",
          "31:     INSERT INTO t0(xyz) VALUES(456);",
          "32:     CREATE VIEW v2(a, B) AS",
          "33:         SELECT 'a', 'B' COLLATE NOCASE FROM t0;",
          "34:     CREATE TABLE t2(a, B COLLATE NOCASE);",
          "35:     INSERT INTO t2 VALUES('a', 'B');",
          "36:     CREATE VIEW v3(a, B) AS",
          "37:         SELECT 'a' COLLATE BINARY, 'B' COLLATE NOCASE FROM t0;",
          "39:     CREATE VIEW v4(a, B) AS",
          "40:         SELECT 'a', +CAST('B' COLLATE NOCASE AS TEXT) FROM t0;",
          "42:     CREATE VIEW v5(a, B) AS",
          "43:         SELECT 'a', ('B' COLLATE NOCASE) || '' FROM t0;",
          "44:   }",
          "46:   # Table t2 and views v2 through v5 should all be equivalent.",
          "47:   do_execsql_test $tn.1.1.1 { SELECT a   >= B FROM t2;         } 1",
          "48:   do_execsql_test $tn.1.1.2 { SELECT 'a' >= 'B' COLLATE NOCASE } 0",
          "49:   do_execsql_test $tn.1.1.3 { SELECT a   >= B FROM v2          } 1",
          "50:   do_execsql_test $tn.1.1.4 { SELECT a   >= B FROM v3          } 1",
          "51:   do_execsql_test $tn.1.1.5 { SELECT a   >= B FROM v4          } 1",
          "52:   do_execsql_test $tn.1.1.6 { SELECT a   >= B FROM v5          } 1",
          "54:   do_execsql_test $tn.1.2.1 { SELECT B   < a FROM t2           } 0",
          "55:   do_execsql_test $tn.1.2.2 { SELECT 'B' COLLATE NOCASE < 'a'  } 0",
          "56:   do_execsql_test $tn.1.2.3 { SELECT B   < a FROM v2           } 0",
          "57:   do_execsql_test $tn.1.2.4 { SELECT B   < a FROM v3           } 0",
          "58:   do_execsql_test $tn.1.2.5 { SELECT a  < B FROM v4           } 0",
          "59:   do_execsql_test $tn.1.2.6 { SELECT a  < B FROM v5           } 0",
          "61:   #-------------------------------------------------------------------------",
          "62:   do_execsql_test 2.0 {",
          "63:     CREATE TABLE t5(a, b COLLATE NOCASE);",
          "64:     INSERT INTO t5 VALUES(1, 'XYZ');",
          "65:   }",
          "67:   # Result should be 0, as column \"xyz\" from the sub-query has implicit",
          "68:   # collation sequence BINARY.",
          "69:   do_execsql_test 2.1 {",
          "70:     SELECT xyz==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "71:   } {0}",
          "73:   # Result should be 1, as literal 'xyz' has no collation sequence, so",
          "74:   # the comparison uses the implicit collation sequence of the RHS - NOCASE.",
          "75:   do_execsql_test 2.2 {",
          "76:     SELECT 'xyz'==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "77:   } {1}",
          "79:   #-----------------------------------------------------------------------",
          "80:   # The test case submitted with the ticket.",
          "81:   #",
          "82:   do_execsql_test 3.0 {",
          "83:     DROP TABLE t0;",
          "84:     DROP VIEW v2;",
          "86:     CREATE TABLE t0(c0);",
          "87:     INSERT INTO t0(c0) VALUES('');",
          "88:     CREATE VIEW v2(c0, c1) AS",
          "89:         SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
          "90:     SELECT SUM(count) FROM (",
          "91:       SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2",
          "92:     );",
          "93:   } 1",
          "95:   # The result is 1, as the collation used is the implicit collation sequence",
          "96:   # of v2.c1 - BINARY.",
          "97:   do_execsql_test 3.1 {",
          "98:     SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2;",
          "99:   } 1",
          "100: }",
          "102: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f419b3bba62aadde6ec1f16ce10120f6b0221f0",
      "candidate_info": {
        "commit_hash": "5f419b3bba62aadde6ec1f16ce10120f6b0221f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f419b3bba62aadde6ec1f16ce10120f6b0221f0",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/pragma.test"
        ],
        "message": "Update requirement marks due to changes in documentation wording.\n\nFossilOrigin-Name: 326cdc16f4db23c1d17596e4ef8d9d7abc672d48665950029ba53fd40c1b2d99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/pragma.test||test/pragma.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3bcb9cc104e0265a600b03415ad955187fc6445ea8e46dc656412cba5bc1d621",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/pragma.test||test/pragma.test": [
          "File: test/pragma.test -> test/pragma.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1859:     CREATE INDEX i1 ON t1(b,c);",
          "1860:     CREATE INDEX i2 ON t1(c,d);",
          "1861:     CREATE INDEX i2x ON t1(d COLLATE nocase, c DESC);",
          "1862:     CREATE TABLE t2(x INTEGER REFERENCES t1);",
          "1863:   }",
          "1864:   db2 eval {SELECT name FROM sqlite_master}",
          "1866: do_test 23.2a {",
          "1867:   db eval {",
          "1868:     DROP INDEX i2;",
          "",
          "[Removed Lines]",
          "1865: } {t1 i1 i2 i2x t2}",
          "",
          "[Added Lines]",
          "1862:     CREATE INDEX i3 ON t1(d,b+c,c);",
          "1866: } {t1 i1 i2 i2x i3 t2}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1889: # means left-most. Key columns come before auxiliary columns.)",
          "1890: #",
          "1891: # (The second column of output from PRAGMA index_xinfo is...)",
          "1893: # being indexed, or -1 if the index-column is the rowid of the table",
          "1895: #",
          "1896: # (The third column of output from PRAGMA index_xinfo is...)",
          "1899: #",
          "1900: # (The fourth column of output from PRAGMA index_xinfo is...)",
          "1901: # EVIDENCE-OF: R-11847-09179 1 if the index-column is sorted in reverse",
          "",
          "[Removed Lines]",
          "1892: # EVIDENCE-OF: R-40889-06838 The rank of the column within the table",
          "1894: # being indexed.",
          "1897: # EVIDENCE-OF: R-22751-28901 The name of the column being indexed, or",
          "1898: # NULL if the index-column is the rowid of the table being indexed.",
          "",
          "[Added Lines]",
          "1893: # EVIDENCE-OF: R-06603-49335 The rank of the column within the table",
          "1895: # being indexed and -2 if the index is on an expression.",
          "1898: # EVIDENCE-OF: R-40641-22898 The name of the column being indexed, or",
          "1899: # NULL if the index-column is the rowid of the table being indexed or an",
          "1900: # expression.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1915: do_test 23.2d {",
          "1916:   db2 eval {PRAGMA index_xinfo(i2x)}",
          "1917: } {0 3 d 0 nocase 1 1 2 c 1 BINARY 1 2 -1 {} 0 BINARY 0}",
          "1919: # EVIDENCE-OF: R-64103-17776 PRAGMA schema.index_list(table-name); This",
          "1920: # pragma returns one row for each index associated with the given table.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1920: do_test 23.2e {",
          "1921:   db2 eval {PRAGMA index_xinfo(i3)}",
          "1922: } {0 3 d 0 BINARY 1 1 -2 {} 0 BINARY 1 2 2 c 0 BINARY 1 3 -1 {} 0 BINARY 0}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1936: #",
          "1937: do_test 23.3 {",
          "1938:   db eval {",
          "1939:     CREATE INDEX i3 ON t1(d,b,c);",
          "1940:   }",
          "1941:   capture_pragma db2 out {PRAGMA index_list(t1)}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1944:     DROP INDEX IF EXISTS i3;",
          "",
          "---------------"
        ]
      }
    }
  ]
}