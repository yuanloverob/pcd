{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "64208b50ce364330052aca624e4bd1a36cde83d5",
      "candidate_info": {
        "commit_hash": "64208b50ce364330052aca624e4bd1a36cde83d5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/64208b50ce364330052aca624e4bd1a36cde83d5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Remove an incorrect assert() from the OP_SeekScan opcode.\n\nFossilOrigin-Name: c0400f8c0bcb85ba39004feff753eae2f8e82065539e52b5788febd7644c417b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80ecdb3da4558bb08ee3ec6edbde906ad5b3b8182e672b5ba0d5dfa8041cee0a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4445:   assert( pOp[1].p1==aOp[pOp->p2-1].p1 );",
          "4446:   assert( pOp[1].p2==aOp[pOp->p2-1].p2 );",
          "4447:   assert( pOp[1].p3==aOp[pOp->p2-1].p3 );",
          "4450:   assert( pOp->p1>0 );",
          "4451:   pC = p->apCsr[pOp[1].p1];",
          "",
          "[Removed Lines]",
          "4448:   assert( pOp[1].p4.i==aOp[pOp->p2-1].p4.i );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40e9c8328ecbad58b01da806e4fec14a9c90856b",
      "candidate_info": {
        "commit_hash": "40e9c8328ecbad58b01da806e4fec14a9c90856b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/40e9c8328ecbad58b01da806e4fec14a9c90856b",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Load new dbsqlfuzz test cases into test/fuzzdata8.db.\n\nFossilOrigin-Name: 01aeeb5c4c70a0f19651448e94ad5c6810cab3d6957b5bc7a9b4b8e0b887f3de",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 365dd8b663d5a28af33556b2b3820c6b5482114ef741a1d82b55c6e154f3043a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a22c1c84ccd3bec06dc24c37aab94c870a5a4817",
      "candidate_info": {
        "commit_hash": "a22c1c84ccd3bec06dc24c37aab94c870a5a4817",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a22c1c84ccd3bec06dc24c37aab94c870a5a4817",
        "files": [
          "ext/fts5/tool/fts5txt2db.tcl",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the -trigram option to the fts5txt2db.tcl script.\n\nFossilOrigin-Name: a394dd260252e7b7dcbc90fd321dfd40d9375f0598ea52b01001c568cbdbafce",
        "before_after_code_files": [
          "ext/fts5/tool/fts5txt2db.tcl||ext/fts5/tool/fts5txt2db.tcl",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/tool/fts5txt2db.tcl||ext/fts5/tool/fts5txt2db.tcl": [
          "File: ext/fts5/tool/fts5txt2db.tcl -> ext/fts5/tool/fts5txt2db.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   cmdline::process ::A $::argv {",
          "13:     {fts5                 \"use fts5 (this is the default)\"}",
          "14:     {fts4                 \"use fts4\"}",
          "15:     {colsize   \"10 10 10\" \"list of column sizes\"}",
          "16:     {tblname   \"t1\"       \"table name to create\"}",
          "17:     {detail    \"full\"     \"Fts5 detail mode to use\"}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:     {trigram              \"Use tokenize=trigram\"}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:   set sql    \"CREATE VIRTUAL TABLE IF NOT EXISTS $A(tblname) USING $A(fts) (\"",
          "176:   append sql [join $cols ,]",
          "177:   if {$A(fts)==\"fts5\"} { append sql \",detail=$A(detail)\" }",
          "178:   append sql \", prefix='$A(prefix)');\"",
          "180:   db eval $sql",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:   if {$A(trigram)} { append sql \",tokenize=trigram\" }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 897ced99b44085012aa44d3264940dcbd4c77b295a894a1b58fb2c03a0f7fee8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36e678bc398e864ec0806cf381408a57d6dcd4c4",
      "candidate_info": {
        "commit_hash": "36e678bc398e864ec0806cf381408a57d6dcd4c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/36e678bc398e864ec0806cf381408a57d6dcd4c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "The sqlite3WhereEnd() call now unwinds all Expr modifications made by the sqlite3WhereBegin().\n\nFossilOrigin-Name: 7bfd42f1dc0c94f9bb74516e62fec8e39c20f4749f4e0972f66c2886d3c64f73",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8ee2ce92c082771675d0e8be597043cf9f0fd4f8a73d6a1498bf8743d6b3904a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3018:     pSel->pLimit = sqlite3PExpr(pParse, TK_LIMIT, pLimit, 0);",
          "3019:   }",
          "3020:   pSel->iLimit = 0;",
          "3031:   pExpr->iTable = rReg = dest.iSDParm;",
          "3032:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "3033:   if( addrOnce ){",
          "",
          "[Removed Lines]",
          "3026:   pCopy = sqlite3SelectDup(pParse->db, pSel, 0);",
          "3027:   rc = sqlite3Select(pParse, pCopy, &dest);",
          "3028:   sqlite3SelectDelete(pParse->db, pCopy);",
          "3029:   if( rc ) return 0;",
          "",
          "[Added Lines]",
          "3019:   if( sqlite3Select(pParse, pSel, &dest) ){",
          "3020:     return 0;",
          "3021:   }",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1942:     pWInfo->pLoops = p->pNextLoop;",
          "1943:     whereLoopDelete(db, p);",
          "1944:   }",
          "1945:   sqlite3DbFreeNN(db, pWInfo);",
          "1946: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1945:   assert( pWInfo->pExprMods==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5440:     }",
          "5441:   }",
          "5445:   pParse->nQueryLoop = pWInfo->savedNQueryLoop;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5445:   while( pWInfo->pExprMods ){",
          "5446:     WhereExprMod *p = pWInfo->pExprMods;",
          "5447:     pWInfo->pExprMods = p->pNext;",
          "5448:     memcpy(p->pExpr, &p->orig, sizeof(p->orig));",
          "5449:     sqlite3DbFree(db, p);",
          "5450:   }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "433: # define SQLITE_QUERY_PLANNER_LIMIT_INCR 1000",
          "434: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443: typedef struct WhereExprMod WhereExprMod;",
          "444: struct WhereExprMod {",
          "448: };",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1116: } IdxExprTrans;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1123: static void preserveExpr(IdxExprTrans *pTrans, Expr *pExpr){",
          "1124:   WhereExprMod *pNew;",
          "1125:   pNew = sqlite3DbMallocRaw(pTrans->db, sizeof(*pNew));",
          "1126:   if( pNew==0 ) return;",
          "1127:   pNew->pNext = pTrans->pWInfo->pExprMods;",
          "1128:   pTrans->pWInfo->pExprMods = pNew;",
          "1129:   pNew->pExpr = pExpr;",
          "1130:   memcpy(&pNew->orig, pExpr, sizeof(*pExpr));",
          "1131: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1124: static int whereIndexExprTransNode(Walker *p, Expr *pExpr){",
          "1125:   IdxExprTrans *pX = p->u.pIdxTrans;",
          "1126:   if( sqlite3ExprCompare(0, pExpr, pX->pIdxExpr, pX->iTabCur)==0 ){",
          "1127:     pExpr->affExpr = sqlite3ExprAffinity(pExpr);",
          "1128:     pExpr->op = TK_COLUMN;",
          "1129:     pExpr->iTable = pX->iIdxCur;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1142:     preserveExpr(pX, pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1147:     IdxExprTrans *pX = p->u.pIdxTrans;",
          "1148:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
          "1149:       assert( pExpr->y.pTab!=0 );",
          "1150:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
          "1151:       pExpr->iTable = pX->iIdxCur;",
          "1152:       pExpr->iColumn = pX->iIdxCol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1166:       preserveExpr(pX, pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1188:   w.u.pIdxTrans = &x;",
          "1189:   x.iTabCur = iTabCur;",
          "1190:   x.iIdxCur = iIdxCur;",
          "1191:   for(iIdxCol=0; iIdxCol<pIdx->nColumn; iIdxCol++){",
          "1192:     i16 iRef = pIdx->aiColumn[iIdxCol];",
          "1193:     if( iRef==XN_EXPR ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1208:   x.pWInfo = pWInfo;",
          "1209:   x.db = pWInfo->pParse->db;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8df36bd4e7828619437e7d6eb2bbd622cb8ebad",
      "candidate_info": {
        "commit_hash": "d8df36bd4e7828619437e7d6eb2bbd622cb8ebad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8df36bd4e7828619437e7d6eb2bbd622cb8ebad",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change the zipfile virtual table so that the xBestIndex method gives a reasonable cost estimate even if no filename is specified.  The missing filename error continues to be raised in the xFilter method.  Meanwhile, the more reasonable cost estimate avoids unnecessary wierdness in the query planner.\n\nFossilOrigin-Name: 0e468aa6decc73be307596782a778a739ff1b5dc0eb10fc4bd6776e460f99f8b",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1309:       idx = i;",
          "1310:     }",
          "1311:   }",
          "1312:   if( idx>=0 ){",
          "1313:     pIdxInfo->aConstraintUsage[idx].argvIndex = 1;",
          "1314:     pIdxInfo->aConstraintUsage[idx].omit = 1;",
          "1316:     pIdxInfo->idxNum = 1;",
          "1317:   }else if( unusable ){",
          "1318:     return SQLITE_CONSTRAINT;",
          "",
          "[Removed Lines]",
          "1315:     pIdxInfo->estimatedCost = 1000.0;",
          "",
          "[Added Lines]",
          "1312:   pIdxInfo->estimatedCost = 1000.0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6a999c5aa0d1d5569a5bda50d27e3a15c13e93e69d00db97c5294901522064a3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}