{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "efa363b84c43d63c706e7997085a2e5977aac64d",
      "candidate_info": {
        "commit_hash": "efa363b84c43d63c706e7997085a2e5977aac64d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efa363b84c43d63c706e7997085a2e5977aac64d",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improve the performance of the .recover command.\n\nFossilOrigin-Name: a50768314d10d743a0cc013b434b516f0763e0a6c5b79655d8fefde7de53e869",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: static int dbdataDisconnect(sqlite3_vtab *pVtab){",
          "171:   return SQLITE_OK;",
          "172: }",
          "",
          "[Removed Lines]",
          "170:   sqlite3_free(pVtab);",
          "",
          "[Added Lines]",
          "171:   DbdataTable *pTab = (DbdataTable*)pVtab;",
          "172:   if( pTab ){",
          "173:     sqlite3_finalize(pTab->pStmt);",
          "174:     sqlite3_free(pVtab);",
          "175:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   DbdataTable *pTab = (DbdataTable*)tab;",
          "190:   int i;",
          "191:   int iSchema = -1;",
          "192:   int iPgno = -1;",
          "193:   int colSchema = (pTab->bPtr ? DBPTR_COLUMN_SCHEMA : DBDATA_COLUMN_SCHEMA);",
          "197:     if( p->op==SQLITE_INDEX_CONSTRAINT_EQ ){",
          "198:       if( p->iColumn==colSchema ){",
          "199:         if( p->usable==0 ) return SQLITE_CONSTRAINT;",
          "",
          "[Removed Lines]",
          "188: static int dbdataBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){",
          "195:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "196:     struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];",
          "",
          "[Added Lines]",
          "193: static int dbdataBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdx){",
          "200:   for(i=0; i<pIdx->nConstraint; i++){",
          "201:     struct sqlite3_index_constraint *p = &pIdx->aConstraint[i];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   }",
          "208:   if( iSchema>=0 ){",
          "211:   }",
          "212:   if( iPgno>=0 ){",
          "215:   }",
          "217:   return SQLITE_OK;",
          "218: }",
          "",
          "[Removed Lines]",
          "209:     pIdxInfo->aConstraintUsage[iSchema].argvIndex = 1;",
          "210:     pIdxInfo->aConstraintUsage[iSchema].omit = 1;",
          "213:     pIdxInfo->aConstraintUsage[iPgno].argvIndex = 1 + (iSchema>=0);",
          "214:     pIdxInfo->aConstraintUsage[iPgno].omit = 1;",
          "216:   pIdxInfo->idxNum = (iSchema>=0 ? 0x01 : 0x00) | (iPgno>=0 ? 0x02 : 0x00);",
          "",
          "[Added Lines]",
          "214:     pIdx->aConstraintUsage[iSchema].argvIndex = 1;",
          "215:     pIdx->aConstraintUsage[iSchema].omit = 1;",
          "218:     pIdx->aConstraintUsage[iPgno].argvIndex = 1 + (iSchema>=0);",
          "219:     pIdx->aConstraintUsage[iPgno].omit = 1;",
          "220:     pIdx->estimatedCost = 100;",
          "221:     pIdx->estimatedRows =  50;",
          "223:     if( pTab->bPtr==0 && pIdx->nOrderBy && pIdx->aOrderBy[0].desc==0 ){",
          "224:       int iCol = pIdx->aOrderBy[0].iColumn;",
          "225:       if( pIdx->nOrderBy==1 ){",
          "226:         pIdx->orderByConsumed = (iCol==0 || iCol==1);",
          "227:       }else if( pIdx->nOrderBy==2 && pIdx->aOrderBy[1].desc==0 && iCol==0 ){",
          "228:         pIdx->orderByConsumed = (pIdx->aOrderBy[1].iColumn==1);",
          "229:       }",
          "230:     }",
          "232:   }else{",
          "233:     pIdx->estimatedCost = 100000000;",
          "234:     pIdx->estimatedRows = 1000000000;",
          "236:   pIdx->idxNum = (iSchema>=0 ? 0x01 : 0x00) | (iPgno>=0 ? 0x02 : 0x00);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236: }",
          "238: static void dbdataResetCursor(DbdataCursor *pCsr){",
          "240:   pCsr->pStmt = 0;",
          "241:   pCsr->iPgno = 1;",
          "242:   pCsr->iCell = 0;",
          "",
          "[Removed Lines]",
          "239:   sqlite3_finalize(pCsr->pStmt);",
          "",
          "[Added Lines]",
          "259:   DbdataTable *pTab = (DbdataTable*)(pCsr->base.pVtab);",
          "260:   if( pTab->pStmt==0 ){",
          "261:     pTab->pStmt = pCsr->pStmt;",
          "262:   }else{",
          "263:     sqlite3_finalize(pCsr->pStmt);",
          "264:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "558: ){",
          "559:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;",
          "560:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;",
          "562:   const char *zSchema = \"main\";",
          "564:   dbdataResetCursor(pCsr);",
          "",
          "[Removed Lines]",
          "561:   int rc;",
          "",
          "[Added Lines]",
          "586:   int rc = SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "571:     pCsr->bOnePage = 1;",
          "572:   }",
          "578:   if( rc==SQLITE_OK ){",
          "579:     rc = sqlite3_bind_text(pCsr->pStmt, 1, zSchema, -1, SQLITE_TRANSIENT);",
          "580:   }else{",
          "",
          "[Removed Lines]",
          "574:   rc = sqlite3_prepare_v2(pTab->db,",
          "575:       \"SELECT data FROM sqlite_dbpage(?) WHERE pgno=?\", -1,",
          "576:       &pCsr->pStmt, 0",
          "577:   );",
          "",
          "[Added Lines]",
          "599:   if( pTab->pStmt ){",
          "600:     pCsr->pStmt = pTab->pStmt;",
          "601:     pTab->pStmt = 0;",
          "602:   }else{",
          "603:     rc = sqlite3_prepare_v2(pTab->db,",
          "604:         \"SELECT data FROM sqlite_dbpage(?) WHERE pgno=?\", -1,",
          "605:         &pCsr->pStmt, 0",
          "606:     );",
          "607:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f95f0f02ab6c6cf45f25b613c7ab57f68249689d0a9eddf4c9518ddf0edad365",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6460:     shellFinalize(&rc, pStmt);",
          "6461:   }",
          "6464:   shellPrepare(pState->db, &rc,",
          "6465:       \"SELECT root, intkey, max(maxlen) FROM recovery.map\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6465:   shellPrepare(pState->db, &rc,",
          "6466:       \"SELECT pgno FROM recovery.map WHERE root=?\", &pPages",
          "6467:   );",
          "6468:   shellPrepare(pState->db, &rc,",
          "6469:       \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)), ', ')\"",
          "6470:       \"FROM sqlite_dbdata WHERE pgno = ? AND field != ?\"",
          "6471:       \"GROUP BY cell\", &pCells",
          "6472:   );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6476:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol);",
          "6477:     if( pTab ){",
          "6479:       if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "6480:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6481:       }",
          "6496:       }",
          "6498:     }",
          "6499:     recoverFreeTable(pTab);",
          "6500:   }",
          "6501:   shellFinalize(&rc, pLoop);",
          "6504:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6478:       sqlite3_stmt *pData = 0;",
          "6482:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6483:         \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)),', ')\"",
          "6484:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6485:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6486:         \")\"",
          "6487:         \" AND field!=%d \"",
          "6488:         \"GROUP BY pgno, cell;\", iRoot, pTab->iPk",
          "6489:       );",
          "6490:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pData) ){",
          "6491:         int iMax = sqlite3_column_int(pData, 0);",
          "6492:         const char *zVal = (const char*)sqlite3_column_text(pData, 1);",
          "6493:         raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6494:             pTab->zQuoted, pTab->azlCol[iMax>0?iMax:0], zVal",
          "6495:         );",
          "6497:       shellFinalize(&rc, pData);",
          "",
          "[Added Lines]",
          "6492:       sqlite3_bind_int(pPages, 1, iRoot);",
          "6493:       sqlite3_bind_int(pCells, 2, pTab->iPk);",
          "6494:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPages) ){",
          "6495:         sqlite3_bind_int(pCells, 1, sqlite3_column_int(pPages, 0));",
          "6496:         while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6497:           int iMax = sqlite3_column_int(pCells, 0);",
          "6498:           const char *zVal = (const char*)sqlite3_column_text(pCells, 1);",
          "6499:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6500:               pTab->zQuoted, pTab->azlCol[iMax>0?iMax:0], zVal",
          "6501:           );",
          "6502:         }",
          "6503:         shellReset(&rc, pCells);",
          "6505:       shellReset(&rc, pPages);",
          "6510:   shellFinalize(&rc, pPages);",
          "6511:   shellFinalize(&rc, pCells);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5ea2d474d00c78683ec2739aaeddb8bab2d5e16",
      "candidate_info": {
        "commit_hash": "c5ea2d474d00c78683ec2739aaeddb8bab2d5e16",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5ea2d474d00c78683ec2739aaeddb8bab2d5e16",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Use _strdup() instead of strdup() on Windows builds of the CLI, to avoid a compiler warning reported on the mailing list.\n\nFossilOrigin-Name: a7126a4f4fb4e3e25be95d673323f835252bb2b427469616046a90b2acf64071",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9eccef7825c61980678599358b62bc394283124653061ce163ead0c653f481d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: # ifndef unlink",
          "139: #  define unlink _unlink",
          "140: # endif",
          "141: # undef popen",
          "142: # define popen _popen",
          "143: # undef pclose",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: # ifndef strdup",
          "142: #  define strdup _strdup",
          "143: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "945a3527d5edd76dbb2dd0839434caf2d9c06024",
      "candidate_info": {
        "commit_hash": "945a3527d5edd76dbb2dd0839434caf2d9c06024",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/945a3527d5edd76dbb2dd0839434caf2d9c06024",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test",
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/test1.c",
          "src/treeview.c",
          "test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test",
          "tool/lemon.c"
        ],
        "message": "Merge latest trunk changes with this branch.\n\nFossilOrigin-Name: 14ef7543465dd14d8fa141fcceb1950b5c2d265a3e862323969d747b39c0cd8c",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test",
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/test1.c||src/test1.c",
          "src/treeview.c||src/treeview.c",
          "test/tkt-18458b1a.test||test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "695: i64 sqlite3Fts5ExprRowid(Fts5Expr*);",
          "697: void sqlite3Fts5ExprFree(Fts5Expr*);",
          "700: int sqlite3Fts5ExprInit(Fts5Global*, sqlite3*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:   }",
          "310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2){",
          "313:   Fts5Parse sParse;",
          "314:   memset(&sParse, 0, sizeof(sParse));",
          "316:   if( *pp1 ){",
          "317:     Fts5Expr *p1 = *pp1;",
          "318:     int nPhrase = p1->nPhrase + p2->nPhrase;",
          "320:     p1->pRoot = sqlite3Fts5ParseNode(&sParse, FTS5_AND, p1->pRoot, p2->pRoot,0);",
          "321:     p2->pRoot = 0;",
          "323:     if( sParse.rc==SQLITE_OK ){",
          "324:       Fts5ExprPhrase **ap = (Fts5ExprPhrase**)sqlite3_realloc(",
          "325:           p1->apExprPhrase, nPhrase * sizeof(Fts5ExprPhrase*)",
          "326:       );",
          "327:       if( ap==0 ){",
          "328:         sParse.rc = SQLITE_NOMEM;",
          "329:       }else{",
          "330:         int i;",
          "331:         memmove(&ap[p2->nPhrase], ap, p1->nPhrase*sizeof(Fts5ExprPhrase*));",
          "332:         for(i=0; i<p2->nPhrase; i++){",
          "333:           ap[i] = p2->apExprPhrase[i];",
          "334:         }",
          "335:         p1->nPhrase = nPhrase;",
          "336:         p1->apExprPhrase = ap;",
          "337:       }",
          "338:     }",
          "339:     sqlite3_free(p2->apExprPhrase);",
          "340:     sqlite3_free(p2);",
          "341:   }else{",
          "343:   }",
          "345:   return sParse.rc;",
          "346: }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:   Fts5Config *pConfig = pTab->pConfig;",
          "504:   const int nCol = pConfig->nCol;",
          "508:   int i;",
          "533:   assert( SQLITE_INDEX_CONSTRAINT_EQ<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "534:   assert( SQLITE_INDEX_CONSTRAINT_GT<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "",
          "[Removed Lines]",
          "506:   int bHasMatch;",
          "507:   int iNext;",
          "510:   struct Constraint {",
          "516:   } aConstraint[] = {",
          "517:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "518:                                     FTS5_BI_MATCH,    1, 1, -1},",
          "519:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "520:                                     FTS5_BI_RANK,     2, 1, -1},",
          "521:     {SQLITE_INDEX_CONSTRAINT_EQ,    FTS5_BI_ROWID_EQ, 0, 0, -1},",
          "522:     {SQLITE_INDEX_CONSTRAINT_LT|SQLITE_INDEX_CONSTRAINT_LE,",
          "523:                                     FTS5_BI_ROWID_LE, 0, 0, -1},",
          "524:     {SQLITE_INDEX_CONSTRAINT_GT|SQLITE_INDEX_CONSTRAINT_GE,",
          "525:                                     FTS5_BI_ROWID_GE, 0, 0, -1},",
          "526:   };",
          "528:   int aColMap[3];",
          "529:   aColMap[0] = -1;",
          "530:   aColMap[1] = nCol;",
          "531:   aColMap[2] = nCol+1;",
          "",
          "[Added Lines]",
          "530:   char *idxStr;",
          "531:   int iIdxStr = 0;",
          "532:   int iCons = 0;",
          "534:   int bSeenEq = 0;",
          "535:   int bSeenGt = 0;",
          "536:   int bSeenLt = 0;",
          "537:   int bSeenMatch = 0;",
          "538:   int bSeenRank = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "543:     return SQLITE_ERROR;",
          "544:   }",
          "547:   for(i=0; i<pInfo->nConstraint; i++){",
          "548:     struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "549:     int iCol = p->iColumn;",
          "553:     ){",
          "561:         pInfo->estimatedCost = 1e50;",
          "562:         return SQLITE_OK;",
          "563:       }",
          "571:         }",
          "572:       }",
          "573:     }",
          "574:   }",
          "577:   if( pInfo->nOrderBy==1 ){",
          "578:     int iSort = pInfo->aOrderBy[0].iColumn;",
          "580:       idxFlags |= FTS5_BI_ORDER_RANK;",
          "581:     }else if( iSort==-1 ){",
          "582:       idxFlags |= FTS5_BI_ORDER_ROWID;",
          "",
          "[Removed Lines]",
          "551:     if( (p->op==SQLITE_INDEX_CONSTRAINT_MATCH && iCol>=0 && iCol<=nCol)",
          "552:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol==nCol)",
          "555:       if( p->usable ){",
          "556:         idxFlags = (idxFlags & 0xFFFF) | FTS5_BI_MATCH | (iCol << 16);",
          "557:         aConstraint[0].iConsIndex = i;",
          "558:       }else{",
          "564:     }else if( p->op<=SQLITE_INDEX_CONSTRAINT_MATCH ){",
          "565:       int j;",
          "566:       for(j=1; j<ArraySize(aConstraint); j++){",
          "567:         struct Constraint *pC = &aConstraint[j];",
          "568:         if( iCol==aColMap[pC->iCol] && (p->op & pC->op) && p->usable ){",
          "569:           pC->iConsIndex = i;",
          "570:           idxFlags |= pC->fts5op;",
          "579:     if( iSort==(pConfig->nCol+1) && BitFlagTest(idxFlags, FTS5_BI_MATCH) ){",
          "",
          "[Added Lines]",
          "554:   idxStr = (char*)sqlite3_malloc(pInfo->nConstraint * 6 + 1);",
          "555:   if( idxStr==0 ) return SQLITE_NOMEM;",
          "556:   pInfo->idxStr = idxStr;",
          "557:   pInfo->needToFreeIdxStr = 1;",
          "562:     if( p->op==SQLITE_INDEX_CONSTRAINT_MATCH",
          "563:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol>=nCol)",
          "566:       if( p->usable==0 || iCol<0 ){",
          "570:         assert( iIdxStr < pInfo->nConstraint*6 + 1 );",
          "571:         idxStr[iIdxStr] = 0;",
          "573:       }else{",
          "574:         if( iCol==nCol+1 ){",
          "575:           if( bSeenRank ) continue;",
          "576:           idxStr[iIdxStr++] = 'r';",
          "577:           bSeenRank = 1;",
          "578:         }else{",
          "579:           bSeenMatch = 1;",
          "580:           idxStr[iIdxStr++] = 'm';",
          "581:           if( iCol<nCol ){",
          "582:             sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "583:             idxStr += strlen(&idxStr[iIdxStr]);",
          "584:             assert( idxStr[iIdxStr]=='\\0' );",
          "585:           }",
          "586:         }",
          "587:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "588:         pInfo->aConstraintUsage[i].omit = 1;",
          "590:     }",
          "591:     else if( p->usable && bSeenEq==0",
          "592:       && p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol<0",
          "593:     ){",
          "594:       idxStr[iIdxStr++] = '=';",
          "595:       bSeenEq = 1;",
          "596:       pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "597:     }",
          "598:   }",
          "600:   if( bSeenEq==0 ){",
          "601:     for(i=0; i<pInfo->nConstraint; i++){",
          "602:       struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "603:       if( p->iColumn<0 && p->usable ){",
          "604:         int op = p->op;",
          "605:         if( op==SQLITE_INDEX_CONSTRAINT_LT || op==SQLITE_INDEX_CONSTRAINT_LE ){",
          "606:           if( bSeenLt ) continue;",
          "607:           idxStr[iIdxStr++] = '<';",
          "608:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "609:           bSeenLt = 1;",
          "610:         }else",
          "611:         if( op==SQLITE_INDEX_CONSTRAINT_GT || op==SQLITE_INDEX_CONSTRAINT_GE ){",
          "612:           if( bSeenGt ) continue;",
          "613:           idxStr[iIdxStr++] = '>';",
          "614:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "615:           bSeenGt = 1;",
          "620:   idxStr[iIdxStr] = '\\0';",
          "625:     if( iSort==(pConfig->nCol+1) && bSeenMatch ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590:   }",
          "601:   }else{",
          "613:   }",
          "615:   pInfo->idxNum = idxFlags;",
          "",
          "[Removed Lines]",
          "593:   bHasMatch = BitFlagTest(idxFlags, FTS5_BI_MATCH);",
          "594:   if( BitFlagTest(idxFlags, FTS5_BI_ROWID_EQ) ){",
          "595:     pInfo->estimatedCost = bHasMatch ? 100.0 : 10.0;",
          "596:     if( bHasMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "597:   }else if( BitFlagAllTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "598:     pInfo->estimatedCost = bHasMatch ? 500.0 : 250000.0;",
          "599:   }else if( BitFlagTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "600:     pInfo->estimatedCost = bHasMatch ? 750.0 : 750000.0;",
          "602:     pInfo->estimatedCost = bHasMatch ? 1000.0 : 1000000.0;",
          "603:   }",
          "606:   iNext = 1;",
          "607:   for(i=0; i<ArraySize(aConstraint); i++){",
          "608:     struct Constraint *pC = &aConstraint[i];",
          "609:     if( pC->iConsIndex>=0 ){",
          "610:       pInfo->aConstraintUsage[pC->iConsIndex].argvIndex = iNext++;",
          "611:       pInfo->aConstraintUsage[pC->iConsIndex].omit = (unsigned char)pC->omit;",
          "612:     }",
          "",
          "[Added Lines]",
          "639:   if( bSeenEq ){",
          "640:     pInfo->estimatedCost = bSeenMatch ? 100.0 : 10.0;",
          "641:     if( bSeenMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "642:   }else if( bSeenLt && bSeenGt ){",
          "643:     pInfo->estimatedCost = bSeenMatch ? 500.0 : 250000.0;",
          "644:   }else if( bSeenLt || bSeenGt ){",
          "645:     pInfo->estimatedCost = bSeenMatch ? 750.0 : 750000.0;",
          "647:     pInfo->estimatedCost = bSeenMatch ? 1000.0 : 1000000.0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1140:   Fts5Config *pConfig = pTab->p.pConfig;",
          "1141:   Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "1152:   char **pzErrmsg = pConfig->pzErrmsg;",
          "1157:   if( pCsr->ePlan ){",
          "1158:     fts5FreeCursorComponents(pCsr);",
          "",
          "[Removed Lines]",
          "1154:   UNUSED_PARAM(zUnused);",
          "1155:   UNUSED_PARAM(nVal);",
          "",
          "[Added Lines]",
          "1186:   int i;",
          "1187:   int iIdxStr = 0;",
          "1188:   Fts5Expr *pExpr = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1165:   assert( pCsr->pRank==0 );",
          "1166:   assert( pCsr->zRank==0 );",
          "1167:   assert( pCsr->zRankArgs==0 );",
          "1169:   assert( pzErrmsg==0 || pzErrmsg==&pTab->p.base.zErrMsg );",
          "1170:   pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "1185:   bOrderByRank = ((idxNum & FTS5_BI_ORDER_RANK) ? 1 : 0);",
          "1186:   pCsr->bDesc = bDesc = ((idxNum & FTS5_BI_ORDER_DESC) ? 1 : 0);",
          "",
          "[Removed Lines]",
          "1177:   if( BitFlagTest(idxNum, FTS5_BI_MATCH) ) pMatch = apVal[iVal++];",
          "1178:   if( BitFlagTest(idxNum, FTS5_BI_RANK) ) pRank = apVal[iVal++];",
          "1179:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_EQ) ) pRowidEq = apVal[iVal++];",
          "1180:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_LE) ) pRowidLe = apVal[iVal++];",
          "1181:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_GE) ) pRowidGe = apVal[iVal++];",
          "1182:   iCol = (idxNum>>16);",
          "1183:   assert( iCol>=0 && iCol<=pConfig->nCol );",
          "1184:   assert( iVal==nVal );",
          "",
          "[Added Lines]",
          "1201:   assert( pTab->pSortCsr==0 || nVal==0 );",
          "1207:   for(i=0; i<nVal; i++){",
          "1208:     switch( idxStr[iIdxStr++] ){",
          "1209:       case 'r':",
          "1210:         pRank = apVal[i];",
          "1211:         break;",
          "1212:       case 'm': {",
          "1213:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "1214:         if( zText==0 ) zText = \"\";",
          "1216:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "1217:           iCol = 0;",
          "1218:           do{",
          "1219:             iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1220:             iIdxStr++;",
          "1221:           }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1222:         }else{",
          "1223:           iCol = pConfig->nCol;",
          "1224:         }",
          "1226:         if( zText[0]=='*' ){",
          "1230:           rc = fts5SpecialMatch(pTab, pCsr, &zText[1]);",
          "1231:           goto filter_out;",
          "1232:         }else{",
          "1233:           char **pzErr = &pTab->p.base.zErrMsg;",
          "1234:           rc = sqlite3Fts5ExprNew(pConfig, iCol, zText, &pExpr, pzErr);",
          "1235:           if( rc==SQLITE_OK ){",
          "1236:             rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "1237:             pExpr = 0;",
          "1238:           }",
          "1239:           if( rc!=SQLITE_OK ) goto filter_out;",
          "1240:         }",
          "1242:         break;",
          "1243:       }",
          "1244:       case '=':",
          "1245:         pRowidEq = apVal[i];",
          "1246:         break;",
          "1247:       case '<':",
          "1248:         pRowidLe = apVal[i];",
          "1249:         break;",
          "1250:       default: assert( idxStr[iIdxStr-1]=='>' );",
          "1251:         pRowidGe = apVal[i];",
          "1252:         break;",
          "1253:     }",
          "1254:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1210:     assert( pRowidEq==0 && pRowidLe==0 && pRowidGe==0 && pRank==0 );",
          "1212:     assert( pCsr->iLastRowid==LARGEST_INT64 );",
          "1213:     assert( pCsr->iFirstRowid==SMALLEST_INT64 );",
          "1214:     if( pTab->pSortCsr->bDesc ){",
          "",
          "[Removed Lines]",
          "1211:     assert( nVal==0 && pMatch==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "[Added Lines]",
          "1281:     assert( nVal==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1221:     pCsr->ePlan = FTS5_PLAN_SOURCE;",
          "1222:     pCsr->pExpr = pTab->pSortCsr->pExpr;",
          "1223:     rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1228:     rc = fts5CursorParseRank(pConfig, pCsr, pRank);",
          "1229:     if( rc==SQLITE_OK ){",
          "1235:       }else{",
          "1247:       }",
          "1248:     }",
          "1249:   }else if( pConfig->zContent==0 ){",
          "",
          "[Removed Lines]",
          "1224:   }else if( pMatch ){",
          "1225:     const char *zExpr = (const char*)sqlite3_value_text(apVal[0]);",
          "1226:     if( zExpr==0 ) zExpr = \"\";",
          "1230:       if( zExpr[0]=='*' ){",
          "1234:         rc = fts5SpecialMatch(pTab, pCsr, &zExpr[1]);",
          "1236:         char **pzErr = &pTab->p.base.zErrMsg;",
          "1237:         rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, &pCsr->pExpr, pzErr);",
          "1238:         if( rc==SQLITE_OK ){",
          "1239:           if( bOrderByRank ){",
          "1240:             pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1241:             rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1242:           }else{",
          "1243:             pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1244:             rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1245:           }",
          "1246:         }",
          "",
          "[Added Lines]",
          "1294:   }else if( pCsr->pExpr ){",
          "1297:       if( bOrderByRank ){",
          "1298:         pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1299:         rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1301:         pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1302:         rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1260:     );",
          "1261:     if( rc==SQLITE_OK ){",
          "1262:       if( pCsr->ePlan==FTS5_PLAN_ROWID ){",
          "1264:       }else{",
          "1265:         sqlite3_bind_int64(pCsr->pStmt, 1, pCsr->iFirstRowid);",
          "1266:         sqlite3_bind_int64(pCsr->pStmt, 2, pCsr->iLastRowid);",
          "",
          "[Removed Lines]",
          "1263:         sqlite3_bind_value(pCsr->pStmt, 1, apVal[0]);",
          "",
          "[Added Lines]",
          "1319:         sqlite3_bind_value(pCsr->pStmt, 1, pRowidEq);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1269:     }",
          "1270:   }",
          "1272:   pConfig->pzErrmsg = pzErrmsg;",
          "1273:   return rc;",
          "1274: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1328:  filter_out:",
          "1329:   sqlite3Fts5ExprFree(pExpr);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test": [
          "File: ext/fts5/test/fts5faultB.test -> ext/fts5/test/fts5faultB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   faultsim_test_result {0 {1 4}}",
          "148: }",
          "151: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: #-------------------------------------------------------------------------",
          "151: # Test OOM injection in a query with two MATCH expressions",
          "152: #",
          "153: reset_db",
          "154: do_execsql_test 6.0 {",
          "155:   CREATE VIRTUAL TABLE t1 USING fts5(a);",
          "156:   INSERT INTO t1 VALUES('a b c d');  -- 1",
          "157:   INSERT INTO t1 VALUES('d a b c');  -- 2",
          "158:   INSERT INTO t1 VALUES('c d a b');  -- 3",
          "159:   INSERT INTO t1 VALUES('b c d a');  -- 4",
          "160: }",
          "161: do_faultsim_test 6.1 -faults oom* -body {",
          "162:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a' AND t1 MATCH 'b' }",
          "163: } -test {",
          "164:   faultsim_test_result {0 {1 2 3 4}}",
          "165: }",
          "166: do_faultsim_test 6.2 -faults oom* -body {",
          "167:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a OR b' AND t1 MATCH 'c OR d' }",
          "168: } -test {",
          "169:   faultsim_test_result {0 {1 2 3 4}}",
          "170: }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test": [
          "File: ext/fts5/test/fts5multi.test -> ext/fts5/test/fts5multi.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 September 13",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5multi",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: fts5_aux_test_functions db",
          "26: do_execsql_test 1.0 {",
          "27:   CREATE VIRTUAL TABLE t1 USING fts5(a, b, c);",
          "28:   INSERT INTO t1 VALUES('gg bb bb'   ,'gg ff gg'   ,'ii ii');",
          "29:   INSERT INTO t1 VALUES('dd dd hh kk','jj'         ,'aa');",
          "30:   INSERT INTO t1 VALUES('kk gg ee'   ,'hh cc'      ,'hh jj aa cc');",
          "31:   INSERT INTO t1 VALUES('hh'         ,'bb jj cc'   ,'kk ii');",
          "32:   INSERT INTO t1 VALUES('kk dd kk ii','aa ee aa'   ,'ee');",
          "33:   INSERT INTO t1 VALUES('ee'         ,'ff gg kk aa','ee ff ee');",
          "34:   INSERT INTO t1 VALUES('ff jj'      ,'gg ee'      ,'kk ee gg kk');",
          "35:   INSERT INTO t1 VALUES('ff ee dd hh','kk ee'      ,'gg dd');",
          "36:   INSERT INTO t1 VALUES('bb'         ,'aa'         ,'bb aa');",
          "37:   INSERT INTO t1 VALUES('hh cc bb'   ,'ff bb'      ,'cc');",
          "38:   INSERT INTO t1 VALUES('jj'         ,'ff dd bb aa','dd dd ff ff');",
          "39:   INSERT INTO t1 VALUES('ff dd gg dd','gg aa bb ff','cc');",
          "40:   INSERT INTO t1 VALUES('ff aa cc jj','kk'         ,'ii dd');",
          "41:   INSERT INTO t1 VALUES('jj dd'      ,'cc'         ,'ii hh ee aa');",
          "42:   INSERT INTO t1 VALUES('ff ii hh'   ,'dd'         ,'gg');",
          "43:   INSERT INTO t1 VALUES('ff dd gg hh','hh'         ,'ff dd');",
          "44:   INSERT INTO t1 VALUES('cc cc'      ,'ff dd ff'   ,'bb');",
          "45:   INSERT INTO t1 VALUES('ii'         ,'bb ii'      ,'jj kk');",
          "46:   INSERT INTO t1 VALUES('ff hh'      ,'hh bb'      ,'bb dd ee');",
          "47:   INSERT INTO t1 VALUES('jj kk'      ,'jj'         ,'gg ff cc');",
          "48:   INSERT INTO t1 VALUES('dd kk'      ,'ii gg'      ,'dd');",
          "49:   INSERT INTO t1 VALUES('cc'         ,'aa ff'      ,'ii');",
          "50:   INSERT INTO t1 VALUES('bb ff bb ii','bb kk bb aa','hh ff ii dd');",
          "51:   INSERT INTO t1 VALUES('aa'         ,'ee bb jj jj','dd');",
          "52:   INSERT INTO t1 VALUES('kk dd cc'   ,'aa jj'      ,'ee aa ff');",
          "53:   INSERT INTO t1 VALUES('aa gg aa'   ,'jj'         ,'ii kk hh gg');",
          "54:   INSERT INTO t1 VALUES('ff hh aa'   ,'jj ii'      ,'hh dd bb jj');",
          "55:   INSERT INTO t1 VALUES('hh'         ,'aa gg kk'   ,'bb ee');",
          "56:   INSERT INTO t1 VALUES('bb'         ,'ee'         ,'gg');",
          "57:   INSERT INTO t1 VALUES('dd kk'      ,'kk bb aa'   ,'ee');",
          "58: }",
          "60: foreach {tn c1 e1 c2 e2} {",
          "61:   1     t1 aa     t1 bb",
          "62:   2     a  aa     b  bb",
          "63:   3     a  \"aa OR bb OR cc\"    b  \"jj OR ii OR hh\"",
          "64:   4     t1  \"aa AND bb\"       t1  \"cc\"",
          "65:   5     c   \"kk\"               b  \"aa OR bb OR cc OR dd OR ee\"",
          "66: } {",
          "67:   if {$c1==\"t1\"} {",
          "68:     set lhs \"( $e1 )\"",
          "69:   } else {",
          "70:     set lhs \"$c1 : ( $e1 )\"",
          "71:   }",
          "72:   if {$c2==\"t1\"} {",
          "73:     set rhs \"( $e2 )\"",
          "74:   } else {",
          "75:     set rhs \"$c2 : ( $e2 )\"",
          "76:   }",
          "78:   set q1 \"t1 MATCH '($lhs) AND ($rhs)'\"",
          "79:   set q2 \"$c1 MATCH '$e1' AND $c2 MATCH '$e2'\"",
          "81:   set ret [execsql \"SELECT rowid FROM t1 WHERE $q1\"]",
          "82:   set N [llength $ret]",
          "83:   do_execsql_test 1.$tn.1.($N) \"SELECT rowid FROM t1 WHERE $q2\" $ret",
          "85:   set ret [execsql \"SELECT fts5_test_poslist(t1) FROM t1 WHERE $q1\"]",
          "86:   do_execsql_test 1.$tn.2.($N) \"",
          "87:     SELECT fts5_test_poslist(t1) FROM t1 WHERE $q2",
          "88:   \" $ret",
          "89: }",
          "91: do_catchsql_test 2.1.1 {",
          "92:   SELECT rowid FROM t1 WHERE t1 MATCH '(NOT' AND t1 MATCH 'aa bb';",
          "93: } {1 {fts5: syntax error near \"NOT\"}}",
          "94: do_catchsql_test 2.1.2 {",
          "95:   SELECT rowid FROM t1 WHERE t1 MATCH 'aa bb' AND t1 MATCH '(NOT';",
          "96: } {1 {fts5: syntax error near \"NOT\"}}",
          "98: finish_test",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test": [
          "File: ext/fts5/test/fts5plan.test -> ext/fts5/test/fts5plan.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: } {",
          "32:   QUERY PLAN",
          "33:   |--SCAN TABLE t1",
          "35: }",
          "37: do_eqp_test 1.2 {",
          "",
          "[Removed Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   SELECT * FROM f1 WHERE f1 MATCH ? ORDER BY ff",
          "47: } {",
          "48:   QUERY PLAN",
          "50:   `--USE TEMP B-TREE FOR ORDER BY",
          "51: }",
          "",
          "[Removed Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: do_eqp_test 1.5 {",
          "62:   SELECT * FROM f1 WHERE rank MATCH ?",
          "65: finish_test",
          "",
          "[Removed Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 2:}",
          "",
          "[Added Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 0:r}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test": [
          "File: ext/fts5/test/fts5simple.test -> ext/fts5/test/fts5simple.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:   SELECT rowid FROM x1($doc);",
          "468: } {11112}",
          "470: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470: #-------------------------------------------------------------------------",
          "471: reset_db",
          "472: do_execsql_test 22.0 {",
          "473:   CREATE VIRTUAL TABLE x1 USING fts5(x);",
          "474:   INSERT INTO x1(x) VALUES('a b c');",
          "475:   INSERT INTO x1(x) VALUES('x y z');",
          "476:   INSERT INTO x1(x) VALUES('c b a');",
          "477:   INSERT INTO x1(x) VALUES('z y x');",
          "478: }",
          "480: do_catchsql_test 22.1 {SELECT * FROM x1('')}   {1 {fts5: syntax error near \"\"}}",
          "481: do_catchsql_test 22.2 {SELECT * FROM x1(NULL)} {1 {fts5: syntax error near \"\"}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6aa438ce41d460a6782ae63503128b9140c28ff59c2b2eed48b004acf83e0560",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "3482:     }",
          "3483:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3484:         if( pExpr ){",
          "3485:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3486:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3487:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "3488:                 (pColl ? pColl->zName : \"BINARY\")",
          "3489:             );",
          "3490:           }",
          "3491:           ExprClearProperty(pExpr, EP_Collate);",
          "3492:         }",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7200:     { \"omit-noop-join\",      SQLITE_OmitNoopJoin   },",
          "7201:     { \"stat4\",               SQLITE_Stat4          },",
          "7202:     { \"skip-scan\",           SQLITE_SkipScan       },",
          "7203:   };",
          "7205:   if( objc!=4 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7203:     { \"push-down\",           SQLITE_PushDown       },",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     }",
          "538:     case TK_COLLATE: {",
          "540:       sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "541:       break;",
          "542:     }",
          "",
          "[Removed Lines]",
          "539:       sqlite3TreeViewLine(pView, \"COLLATE %Q\", pExpr->u.zToken);",
          "",
          "[Added Lines]",
          "543:       sqlite3TreeViewLine(pView, \"%sCOLLATE %Q%s\",",
          "544:         !ExprHasProperty(pExpr, EP_Collate) ? \"SOFT-\" : \"\",",
          "545:         pExpr->u.zToken, zFlgs);",
          "",
          "---------------"
        ],
        "test/tkt-18458b1a.test||test/tkt-18458b1a.test": [
          "File: test/tkt-18458b1a.test -> test/tkt-18458b1a.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket [18458b1a] have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-18458b1a",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener and push-down optimizations",
          "23:     optimization_control db query-flattener 0",
          "24:     optimization_control db push-down 0",
          "25:   } else {",
          "26:     # Enable them",
          "27:     optimization_control db query-flattener 1",
          "28:     optimization_control db push-down 1",
          "29:   }",
          "31:   db cache size 0",
          "33:   do_execsql_test $tn.1.1 {",
          "34:     CREATE TABLE t0(c0 COLLATE NOCASE);",
          "35:     INSERT INTO t0(c0) VALUES ('B');",
          "36:     CREATE VIEW v0(c0, c1) AS SELECT DISTINCT t0.c0, 'a' FROM t0;",
          "37:   }",
          "39:   do_execsql_test $tn.1.2 {",
          "40:     SELECT count(*) FROM v0 WHERE c1 >= c0;",
          "41:   } 1",
          "43:   do_execsql_test $tn.1.3 {",
          "44:     SELECT count(*) FROM v0 WHERE NOT NOT (c1 >= c0);",
          "45:   } 1",
          "47:   do_execsql_test $tn.1.4 {",
          "48:     SELECT count(*) FROM v0 WHERE ((c1 >= c0) OR 0+0);",
          "49:   } 1",
          "50: }",
          "52: finish_test",
          "",
          "---------------"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket a7debbe0ad1 have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-a7debbe0",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener",
          "23:     optimization_control db query-flattener 0",
          "24:   } else {",
          "25:     # Enable the flattener",
          "26:     optimization_control db query-flattener 1",
          "27:   }",
          "29:   do_execsql_test $tn.1.0 {",
          "30:     CREATE TABLE t0(xyz INTEGER);",
          "31:     INSERT INTO t0(xyz) VALUES(456);",
          "32:     CREATE VIEW v2(a, B) AS",
          "33:         SELECT 'a', 'B' COLLATE NOCASE FROM t0;",
          "34:     CREATE TABLE t2(a, B COLLATE NOCASE);",
          "35:     INSERT INTO t2 VALUES('a', 'B');",
          "36:     CREATE VIEW v3(a, B) AS",
          "37:         SELECT 'a' COLLATE BINARY, 'B' COLLATE NOCASE FROM t0;",
          "39:     CREATE VIEW v4(a, B) AS",
          "40:         SELECT 'a', +CAST('B' COLLATE NOCASE AS TEXT) FROM t0;",
          "42:     CREATE VIEW v5(a, B) AS",
          "43:         SELECT 'a', ('B' COLLATE NOCASE) || '' FROM t0;",
          "44:   }",
          "46:   # Table t2 and views v2 through v5 should all be equivalent.",
          "47:   do_execsql_test $tn.1.1.1 { SELECT a   >= B FROM t2;         } 1",
          "48:   do_execsql_test $tn.1.1.2 { SELECT 'a' >= 'B' COLLATE NOCASE } 0",
          "49:   do_execsql_test $tn.1.1.3 { SELECT a   >= B FROM v2          } 1",
          "50:   do_execsql_test $tn.1.1.4 { SELECT a   >= B FROM v3          } 1",
          "51:   do_execsql_test $tn.1.1.5 { SELECT a   >= B FROM v4          } 1",
          "52:   do_execsql_test $tn.1.1.6 { SELECT a   >= B FROM v5          } 1",
          "54:   do_execsql_test $tn.1.2.1 { SELECT B   < a FROM t2           } 0",
          "55:   do_execsql_test $tn.1.2.2 { SELECT 'B' COLLATE NOCASE < 'a'  } 0",
          "56:   do_execsql_test $tn.1.2.3 { SELECT B   < a FROM v2           } 0",
          "57:   do_execsql_test $tn.1.2.4 { SELECT B   < a FROM v3           } 0",
          "58:   do_execsql_test $tn.1.2.5 { SELECT a  < B FROM v4           } 0",
          "59:   do_execsql_test $tn.1.2.6 { SELECT a  < B FROM v5           } 0",
          "61:   #-------------------------------------------------------------------------",
          "62:   do_execsql_test $tn.2.0 {",
          "63:     CREATE TABLE t5(a, b COLLATE NOCASE);",
          "64:     INSERT INTO t5 VALUES(1, 'XYZ');",
          "65:   }",
          "67:   # Result should be 0, as column \"xyz\" from the sub-query has implicit",
          "68:   # collation sequence BINARY.",
          "69:   do_execsql_test $tn.2.1 {",
          "70:     SELECT xyz==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "71:   } {0}",
          "73:   # Result should be 1, as literal 'xyz' has no collation sequence, so",
          "74:   # the comparison uses the implicit collation sequence of the RHS - NOCASE.",
          "75:   do_execsql_test $tn.2.2 {",
          "76:     SELECT 'xyz'==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "77:   } {1}",
          "79:   #-----------------------------------------------------------------------",
          "80:   # The test case submitted with the ticket.",
          "81:   #",
          "82:   do_execsql_test $tn.3.0 {",
          "83:     DROP TABLE t0;",
          "84:     DROP VIEW v2;",
          "86:     CREATE TABLE t0(c0);",
          "87:     INSERT INTO t0(c0) VALUES('');",
          "88:     CREATE VIEW v2(c0, c1) AS",
          "89:         SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
          "90:     SELECT SUM(count) FROM (",
          "91:       SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2",
          "92:     );",
          "93:   } 1",
          "95:   # The result is 1, as the collation used is the implicit collation sequence",
          "96:   # of v2.c1 - BINARY.",
          "97:   do_execsql_test $tn.3.1 {",
          "98:     SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2;",
          "99:   } 1",
          "100: }",
          "102: finish_test",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4426:     }",
          "4427:     i++;",
          "4428:   }",
          "4430:   fprintf(out, \"};\\n\"); lineno++;",
          "",
          "[Removed Lines]",
          "4429:   if( j>0 ) fprintf(out, \"\\n\"); lineno++;",
          "",
          "[Added Lines]",
          "4429:   if( j>0 ){ fprintf(out, \"\\n\"); lineno++; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab0992f022b4e9ee5f0ac79a2fb6b3556e8a9cb2",
      "candidate_info": {
        "commit_hash": "ab0992f022b4e9ee5f0ac79a2fb6b3556e8a9cb2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ab0992f022b4e9ee5f0ac79a2fb6b3556e8a9cb2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Fix incorrect arguments to testcase() macros.\n\nFossilOrigin-Name: 812467fbf04ce00228a8381a5eee471e4e35cc63184a4538129fcd70b7cec979",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3de57145a18c62ff9b556c7218d8b276000d0052e4890212fa9335235f22d03c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1407:           pCol->zName);",
          "1408: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1409:     }else if( pCol->colFlags & COLFLAG_GENERATED ){",
          "1412:       sqlite3ErrorMsg(pParse, \"cannot use DEFAULT on a generated column\");",
          "1413: #endif",
          "1414:     }else{",
          "",
          "[Removed Lines]",
          "1410:       testcase( pCol->colflags & COLFLAG_VIRTUAL );",
          "1411:       testcase( pCol->colflags & COLFLAG_STORED );",
          "",
          "[Added Lines]",
          "1410:       testcase( pCol->colFlags & COLFLAG_VIRTUAL );",
          "1411:       testcase( pCol->colFlags & COLFLAG_STORED );",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:   for(i=0; i<pTab->nCol; i++){",
          "224:     if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "227:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "228:     }",
          "229:   }",
          "",
          "[Removed Lines]",
          "225:       testcase( pTab->aCol[i].colflags & COLFLAG_VIRTUAL );",
          "226:       testcase( pTab->aCol[i].colflags & COLFLAG_STORED );",
          "",
          "[Added Lines]",
          "225:       testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "226:       testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2441:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2442:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2446:       }",
          "2447:     }",
          "",
          "[Removed Lines]",
          "2443:         testcase( pDestCol->colflags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colflags & COLFLAG_STORED );",
          "",
          "[Added Lines]",
          "2443:         testcase( pDestCol->colFlags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colFlags & COLFLAG_STORED );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37d296a717abb896c72368e3e09d833de2415838",
      "candidate_info": {
        "commit_hash": "37d296a717abb896c72368e3e09d833de2415838",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/37d296a717abb896c72368e3e09d833de2415838",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Bug fixes for window frames of the form (... RANGE BETWEEN b PRECEDING AND a PRECEDING) or (... RANGE a FOLLOWING AND b FOLLOWING) where (a > b).\n\nFossilOrigin-Name: 040e196a8be3ca41b9365310ab88c2a3cc84b918a6511c77a6d95d4b4e0da3ed",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f907395ef5a2dc1d084b6a286af00de4c742cf12d4f347c21e1b757786508f57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1408:   return (pList ? pList->nExpr : 0);",
          "1409: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1411: typedef struct WindowCodeArg WindowCodeArg;",
          "1412: typedef struct WindowCsrAndReg WindowCsrAndReg;",
          "1417: struct WindowCsrAndReg {",
          "1420: };",
          "1477: struct WindowCodeArg {",
          "1488:   WindowCsrAndReg start;",
          "1489:   WindowCsrAndReg current;",
          "1490:   WindowCsrAndReg end;",
          "1491: };",
          "1497: static void windowReadPeerValues(",
          "1498:   WindowCodeArg *p,",
          "1499:   int csr,",
          "1500:   int reg",
          "1501: ){",
          "1502:   Window *pMWin = p->pMWin;",
          "1503:   ExprList *pOrderBy = pMWin->pOrderBy;",
          "1504:   if( pOrderBy ){",
          "1505:     Vdbe *v = sqlite3GetVdbe(p->pParse);",
          "1506:     ExprList *pPart = pMWin->pPartition;",
          "1507:     int iColOff = pMWin->nBufferCol + (pPart ? pPart->nExpr : 0);",
          "1508:     int i;",
          "1509:     for(i=0; i<pOrderBy->nExpr; i++){",
          "1510:       sqlite3VdbeAddOp3(v, OP_Column, csr, iColOff+i, reg+i);",
          "1511:     }",
          "1512:   }",
          "1513: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1430: static void windowAggStep(",
          "1436: ){",
          "1437:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1438:   Window *pWin;",
          "1439:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "",
          "[Removed Lines]",
          "1431:   Parse *pParse,",
          "",
          "[Added Lines]",
          "1535:   WindowCodeArg *p,",
          "1541:   Parse *pParse = p->pParse;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1479:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1480:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1481:       int addrIf = 0;",
          "1482:       if( pWin->pFilter ){",
          "1483:         int regTmp;",
          "1484:         assert( pWin->bExprArgs || !nArg ||nArg==pWin->pOwner->x.pList->nExpr );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1587:       int addrIf2 = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1489:         VdbeCoverage(v);",
          "1490:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1491:       }",
          "1492:       if( pWin->bExprArgs ){",
          "1493:         int iStart = sqlite3VdbeCurrentAddr(v);",
          "1494:         VdbeOp *pOp, *pEnd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1607:       if( pWin->eFrmType==TK_RANGE",
          "1608:        && pWin->eStart==pWin->eEnd",
          "1609:        && pWin->eStart==TK_PRECEDING",
          "1610:       ){",
          "1611:         int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "1612:         int regPeer = sqlite3GetTempReg(pParse);",
          "1613:         int regString = sqlite3GetTempReg(pParse);",
          "1614:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1615:         VdbeModuleComment((v, \"windowAggStep \\\"peer is numeric?\\\" test\"));",
          "1616:         sqlite3VdbeAddOp3(v, op, p->regStart, lbl, p->regEnd);",
          "1619:         windowReadPeerValues(p, csr, regPeer);",
          "1620:         sqlite3VdbeAddOp2(v, OP_IsNull, regPeer, lbl);",
          "1621:         sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1622:         addrIf2 = sqlite3VdbeAddOp3(v, OP_Lt, regString, 0, regPeer);",
          "1623:         sqlite3ReleaseTempReg(pParse, regPeer);",
          "1624:         sqlite3ReleaseTempReg(pParse, regString);",
          "1625:         sqlite3VdbeResolveLabel(v, lbl);",
          "1626:         VdbeModuleComment((v, \"windowAggStep end \\\"peer is numeric?\\\"\"));",
          "1627:         assert( pWin->eStart==TK_PRECEDING || pWin->eStart==TK_FOLLOWING );",
          "1628:         assert( pMWin->pOrderBy && pMWin->pOrderBy->nExpr==1 );",
          "1629:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1518:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1519:       }",
          "1520:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1521:     }",
          "1522:   }",
          "1523: }",
          "",
          "[Removed Lines]",
          "1525: typedef struct WindowCodeArg WindowCodeArg;",
          "1526: typedef struct WindowCsrAndReg WindowCsrAndReg;",
          "1531: struct WindowCsrAndReg {",
          "1534: };",
          "1591: struct WindowCodeArg {",
          "1600:   WindowCsrAndReg start;",
          "1601:   WindowCsrAndReg current;",
          "1602:   WindowCsrAndReg end;",
          "1603: };",
          "",
          "[Added Lines]",
          "1660:       if( addrIf2 ) sqlite3VdbeJumpHere(v, addrIf2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1609: #define WINDOW_AGGINVERSE 2",
          "1610: #define WINDOW_AGGSTEP    3",
          "",
          "[Removed Lines]",
          "1616: static void windowReadPeerValues(",
          "1617:   WindowCodeArg *p,",
          "1618:   int csr,",
          "1619:   int reg",
          "1620: ){",
          "1621:   Window *pMWin = p->pMWin;",
          "1622:   ExprList *pOrderBy = pMWin->pOrderBy;",
          "1623:   if( pOrderBy ){",
          "1624:     Vdbe *v = sqlite3GetVdbe(p->pParse);",
          "1625:     ExprList *pPart = pMWin->pPartition;",
          "1626:     int iColOff = pMWin->nBufferCol + (pPart ? pPart->nExpr : 0);",
          "1627:     int i;",
          "1628:     for(i=0; i<pOrderBy->nExpr; i++){",
          "1629:       sqlite3VdbeAddOp3(v, OP_Column, csr, iColOff+i, reg+i);",
          "1630:     }",
          "1631:   }",
          "1632: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1693:   int addrNext;",
          "1694:   int csr;",
          "1696:   assert( pMWin!=0 );",
          "1697:   csr = pMWin->csrApp;",
          "1698:   nPeer = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1734:   VdbeModuleComment((v, \"windowFullScan begin\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1749:     if( addrEq ) sqlite3VdbeJumpHere(v, addrEq);",
          "1750:   }",
          "1754:   sqlite3VdbeResolveLabel(v, lblNext);",
          "1755:   sqlite3VdbeAddOp2(v, OP_Next, csr, addrNext);",
          "",
          "[Removed Lines]",
          "1752:   windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "",
          "[Added Lines]",
          "1792:   windowAggStep(p, pMWin, csr, 0, p->regArg);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1764:   }",
          "1766:   windowAggFinal(p, 1);",
          "1767: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1807:   VdbeModuleComment((v, \"windowFullScan end\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2094:   Window *pMWin = p->pMWin;",
          "2095:   int ret = 0;",
          "2096:   Vdbe *v = p->pVdbe;",
          "2098:   int addrContinue = 0;",
          "2100:   int bPeer = (pMWin->eFrmType!=TK_ROWS);",
          "2102:   int lblDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "2097:   int addrIf = 0;",
          "2099:   int addrGoto = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2129:         );",
          "2130:       }",
          "2131:     }else{",
          "2133:       VdbeCoverage(v);",
          "2134:     }",
          "2135:   }",
          "",
          "[Removed Lines]",
          "2132:       addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "",
          "[Added Lines]",
          "2171:       sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, lblDone, 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2152:         assert( pMWin->regEndRowid );",
          "2153:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regStartRowid, 1);",
          "2154:       }else{",
          "2156:       }",
          "2157:       break;",
          "",
          "[Removed Lines]",
          "2155:         windowAggStep(pParse, pMWin, csr, 1, p->regArg);",
          "",
          "[Added Lines]",
          "2194:         windowAggStep(p, pMWin, csr, 1, p->regArg);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2164:         assert( pMWin->regEndRowid );",
          "2165:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regEndRowid, 1);",
          "2166:       }else{",
          "2168:       }",
          "2169:       break;",
          "2170:   }",
          "",
          "[Removed Lines]",
          "2167:         windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "",
          "[Added Lines]",
          "2206:         windowAggStep(p, pMWin, csr, 0, p->regArg);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2182:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1+bPeer);",
          "2183:     VdbeCoverage(v);",
          "2184:     if( bPeer ){",
          "2186:     }",
          "2187:   }",
          "2189:   if( bPeer ){",
          "2190:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "2192:     windowReadPeerValues(p, csr, regTmp);",
          "2193:     windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg, addrContinue);",
          "2194:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "",
          "[Removed Lines]",
          "2185:       addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2191:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "[Added Lines]",
          "2224:       sqlite3VdbeAddOp2(v, OP_Goto, 0, lblDone);",
          "2230:     int regTmp;",
          "2235:     if( pMWin->eStart==TK_FOLLOWING && pMWin->eEnd==TK_FOLLOWING",
          "2236:      && pMWin->eFrmType==TK_RANGE && op==WINDOW_AGGINVERSE",
          "2237:     ){",
          "2238:       int regRowid1 = sqlite3GetTempReg(pParse);",
          "2239:       int regRowid2 = sqlite3GetTempReg(pParse);",
          "2240:       sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2241:       sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2242:       sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2243:       sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2244:       sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2245:     }",
          "2246:     regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2198:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNextRange);",
          "2199:   }",
          "2200:   sqlite3VdbeResolveLabel(v, lblDone);",
          "2203:   return ret;",
          "2204: }",
          "",
          "[Removed Lines]",
          "2201:   if( addrGoto ) sqlite3VdbeJumpHere(v, addrGoto);",
          "2202:   if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2707:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "2709:   }",
          "2710:   if( pMWin->eEnd==TK_PRECEDING || pMWin->eEnd==TK_FOLLOWING ){",
          "2712:   }",
          "",
          "[Removed Lines]",
          "2708:     regStart = ++pParse->nMem;",
          "2711:     regEnd = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "2759:     s.regStart = ++pParse->nMem;",
          "2762:     s.regEnd = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2764:   s.regArg = windowInitAccum(pParse, pMWin);",
          "2769:   }",
          "2773:   }",
          "2776:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2780:     windowAggFinal(&s, 0);",
          "",
          "[Removed Lines]",
          "2766:   if( regStart ){",
          "2767:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2768:     windowCheckValue(pParse, regStart, 0 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2770:   if( regEnd ){",
          "2771:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2772:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2775:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && regStart ){",
          "2777:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "",
          "[Added Lines]",
          "2817:   if( s.regStart ){",
          "2818:     sqlite3ExprCode(pParse, pMWin->pStart, s.regStart);",
          "2819:     windowCheckValue(pParse, s.regStart, 0 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2821:   if( s.regEnd ){",
          "2822:     sqlite3ExprCode(pParse, pMWin->pEnd, s.regEnd);",
          "2823:     windowCheckValue(pParse, s.regEnd, 1 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2826:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && s.regStart ){",
          "2828:     int addrGe = sqlite3VdbeAddOp3(v, op, s.regStart, 0, s.regEnd);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2785:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2786:     sqlite3VdbeJumpHere(v, addrGe);",
          "2787:   }",
          "2789:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "2791:   }",
          "2793:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "2788:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && regEnd ){",
          "2790:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "",
          "[Added Lines]",
          "2839:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && s.regEnd ){",
          "2841:     sqlite3VdbeAddOp3(v, OP_Subtract, s.regStart, s.regEnd, s.regStart);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2819:       if( pMWin->eFrmType==TK_RANGE ){",
          "2820:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "2821:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "2824:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2825:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "2826:         sqlite3VdbeResolveLabel(v, lbl);",
          "2827:       }else{",
          "2830:       }",
          "2831:     }",
          "2832:   }else",
          "2833:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2834:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2837:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2839:   }else{",
          "2840:     int addr = 0;",
          "2841:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2822:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2823:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2828:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "2829:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2835:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2836:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2838:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2873:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, s.regEnd, s.end.csr, lbl);",
          "2874:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2879:         windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 0);",
          "2880:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2886:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2887:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2889:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2843:       if( pMWin->eFrmType==TK_RANGE ){",
          "2844:         int lbl = 0;",
          "2845:         addr = sqlite3VdbeCurrentAddr(v);",
          "2847:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "2849:         }",
          "2850:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2853:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "2854:           sqlite3VdbeResolveLabel(v, lbl);",
          "2855:         }",
          "2856:       }else{",
          "2859:           VdbeCoverage(v);",
          "2860:         }",
          "2861:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2864:       }",
          "2865:     }",
          "2866:   }",
          "",
          "[Removed Lines]",
          "2846:         if( regEnd ){",
          "2848:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2851:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2852:         if( regEnd ){",
          "2857:         if( regEnd ){",
          "2858:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2862:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2863:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "2897:         if( s.regEnd ){",
          "2899:           windowCodeRangeTest(&s, OP_Ge, s.current.csr,s.regEnd,s.end.csr,lbl);",
          "2902:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2903:         if( s.regEnd ){",
          "2908:         if( s.regEnd ){",
          "2909:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, s.regEnd, 0, 1);",
          "2913:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2914:         if( s.regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2879:   VdbeCoverage(v);",
          "2880:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2881:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2884:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2885:   }else if( pMWin->eStart==TK_FOLLOWING ){",
          "2886:     int addrStart;",
          "",
          "[Removed Lines]",
          "2882:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2883:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2933:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2934:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2890:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2891:     if( pMWin->eFrmType==TK_RANGE ){",
          "2892:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2894:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2895:     }else",
          "2896:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "2897:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2899:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, 0, 1);",
          "2900:     }else{",
          "2901:       assert( pMWin->eEnd==TK_FOLLOWING );",
          "2902:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2905:     }",
          "2906:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2907:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "",
          "[Removed Lines]",
          "2893:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2898:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "2903:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 1);",
          "2904:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "",
          "[Added Lines]",
          "2944:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "2949:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regStart, 1);",
          "2954:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 1);",
          "2955:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2916:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2917:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2918:     addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2920:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2921:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2922:   }",
          "",
          "[Removed Lines]",
          "2919:     windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2970:     windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   SELECT 1 WINDOW win AS (PARTITION BY fake_column);",
          "231: } {0 1}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: #-------------------------------------------------------------------------",
          "234: reset_db",
          "235: do_execsql_test 5.0 {",
          "236:   CREATE TABLE t1(a, c);",
          "237:   CREATE INDEX i1 ON t1(a);",
          "239:   INSERT INTO t1 VALUES(0, 421);",
          "240:   INSERT INTO t1 VALUES(1, 844);",
          "241:   INSERT INTO t1 VALUES(2, 1001);",
          "242: }",
          "244: do_execsql_test 5.1 {",
          "245:   SELECT a, sum(c) OVER (",
          "246:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 3 PRECEDING",
          "247:   ) FROM t1;",
          "248: } {0 {} 1 {} 2 {}}",
          "250: do_execsql_test 5.2 {",
          "251:   INSERT INTO t1 VALUES(NULL, 123);",
          "252:   INSERT INTO t1 VALUES(NULL, 111);",
          "253:   INSERT INTO t1 VALUES('xyz', 222);",
          "254:   INSERT INTO t1 VALUES('xyz', 333);",
          "256:   SELECT a, sum(c) OVER (",
          "257:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 3 PRECEDING",
          "258:   ) FROM t1;",
          "259: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "261: do_execsql_test 5.3 {",
          "262:   SELECT a, sum(c) OVER (",
          "263:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "264:   ) FROM t1;",
          "265: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "267: do_execsql_test 5.4 {",
          "268:   SELECT a, sum(c) OVER (",
          "269:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 3 PRECEDING EXCLUDE NO OTHERS",
          "270:   ) FROM t1;",
          "271: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "273: do_execsql_test 5.5 {",
          "274:   SELECT a, sum(c) OVER (",
          "275:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING EXCLUDE NO OTHERS",
          "276:   ) FROM t1;",
          "277: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "279: #-------------------------------------------------------------------------",
          "280: reset_db",
          "281: do_execsql_test 6.0 {",
          "282:   CREATE TABLE t1(a, c);",
          "283:   CREATE INDEX i1 ON t1(a);",
          "285:   INSERT INTO t1 VALUES(7,  997);",
          "286:   INSERT INTO t1 VALUES(8,  997);",
          "287:   INSERT INTO t1 VALUES('abc', 1001);",
          "288: }",
          "289: do_execsql_test 6.1 {",
          "290:   SELECT a, sum(c) OVER (",
          "291:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "292:   ) FROM t1;",
          "293: } {7 {} 8 {} abc 1001}",
          "294: do_execsql_test 6.2 {",
          "295:   SELECT a, sum(c) OVER (",
          "296:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING EXCLUDE NO OTHERS",
          "297:   ) FROM t1;",
          "298: } {7 {} 8 {} abc 1001}",
          "",
          "---------------"
        ]
      }
    }
  ]
}