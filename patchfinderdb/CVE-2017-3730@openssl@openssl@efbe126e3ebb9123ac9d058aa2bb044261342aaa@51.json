{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05f754f6a6a2aaceef18069a6ce11aacdb86c84c",
      "candidate_info": {
        "commit_hash": "05f754f6a6a2aaceef18069a6ce11aacdb86c84c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/05f754f6a6a2aaceef18069a6ce11aacdb86c84c",
        "files": [
          "crypto/stack/stack.c"
        ],
        "message": "Prevent overflows in stack API\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit 9731a9ce7d0f404d21ed418f9bc983b174e130cb)",
        "before_after_code_files": [
          "crypto/stack/stack.c||crypto/stack/stack.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/stack/stack.c||crypto/stack/stack.c": [
          "File: crypto/stack/stack.c -> crypto/stack/stack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: OPENSSL_STACK *OPENSSL_sk_dup(const OPENSSL_STACK *sk)",
          "40: {",
          "41:     OPENSSL_STACK *ret;",
          "43:     if ((ret = OPENSSL_malloc(sizeof(*ret))) == NULL)",
          "44:         return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     if ( sk->num_alloc < 0 || sk->num < 0 ) {",
          "43:         return NULL;",
          "44:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     OPENSSL_STACK *ret;",
          "63:     int i;",
          "65:     if ((ret = OPENSSL_malloc(sizeof(*ret))) == NULL)",
          "66:         return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     if ( sk->num < 0 ) {",
          "69:         return NULL;",
          "70:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: int OPENSSL_sk_insert(OPENSSL_STACK *st, const void *data, int loc)",
          "115: {",
          "119:         return 0;",
          "120:     if (st->num_alloc <= st->num + 1) {",
          "124:             return (0);",
          "126:         st->num_alloc *= 2;",
          "127:     }",
          "128:     if ((loc >= (int)st->num) || (loc < 0))",
          "129:         st->data[st->num] = data;",
          "130:     else {",
          "131:         memmove(&st->data[loc + 1], &st->data[loc],",
          "132:                 sizeof(st->data[0]) * (st->num - loc));",
          "133:         st->data[loc] = data;",
          "",
          "[Removed Lines]",
          "116:     const char **s;",
          "118:     if (st == NULL)",
          "121:         s = OPENSSL_realloc((char *)st->data,",
          "122:                             (unsigned int)sizeof(char *) * st->num_alloc * 2);",
          "123:         if (s == NULL)",
          "125:         st->data = s;",
          "",
          "[Added Lines]",
          "123:     if ( st == NULL || st->num < 0 || st->num == INT_MAX || st->num_alloc < 0 ) {",
          "125:     }",
          "132:         if ( (size_t)(st->num_alloc) * 2 < (size_t)(st->num_alloc) ) {",
          "133:             return 0;",
          "134:         }",
          "136:         if ( (size_t)(st->num_alloc) * 2 > INT_MAX )",
          "137:         {",
          "138:             return 0;",
          "139:         }",
          "142:         if ( (size_t)(st->num_alloc) * 2 > (~(size_t)0) / sizeof(char*) ) {",
          "143:             return 0;",
          "144:         }",
          "147:         st->data = OPENSSL_realloc((char *)st->data,",
          "148:                             sizeof(char *) * st->num_alloc * 2);",
          "149:         if (st->data == NULL) {",
          "153:             st->num_alloc = 0;",
          "154:             st->num = 0;",
          "156:         }",
          "162:         if ( loc == INT_MAX ) {",
          "163:             return 0;",
          "164:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151: {",
          "152:     const char *ret;",
          "155:         return NULL;",
          "157:     ret = st->data[loc];",
          "",
          "[Removed Lines]",
          "154:     if (st == NULL || loc < 0 || loc >= st->num)",
          "",
          "[Added Lines]",
          "188:     if (st == NULL || loc < 0 || loc >= st->num )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b431b094330da3e54805c49fb262192e34bc3864",
      "candidate_info": {
        "commit_hash": "b431b094330da3e54805c49fb262192e34bc3864",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b431b094330da3e54805c49fb262192e34bc3864",
        "files": [
          "crypto/x509/x_all.c",
          "crypto/x509/x_crl.c"
        ],
        "message": "X509_CRL_digest() - ensure precomputed sha1 hash before returning it\n\nX509_CRL_digest() didn't check if the precomputed sha1 hash was actually\npresent.  This also makes sure there's an appropriate flag to check.\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2314)\n(cherry picked from commit 6195848b2eea627c47f74b63eb2ba3dc3d5b6436)",
        "before_after_code_files": [
          "crypto/x509/x_all.c||crypto/x509/x_all.c",
          "crypto/x509/x_crl.c||crypto/x509/x_crl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377: int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,",
          "378:                     unsigned char *md, unsigned int *len)",
          "379: {",
          "382:         if (len != NULL)",
          "",
          "[Removed Lines]",
          "380:     if (type == EVP_sha1()) {",
          "",
          "[Added Lines]",
          "380:     if (type == EVP_sha1() && (data->flags & EXFLAG_SET) != 0) {",
          "",
          "---------------"
        ],
        "crypto/x509/x_crl.c||crypto/x509/x_crl.c": [
          "File: crypto/x509/x_crl.c -> crypto/x509/x_crl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:             if (crl->meth->crl_init(crl) == 0)",
          "227:                 return 0;",
          "228:         }",
          "229:         break;",
          "231:     case ASN1_OP_FREE_POST:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:         crl->flags |= EXFLAG_SET;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "daa67522e0d33deadf6ac130ebe08805bb78c3a3",
      "candidate_info": {
        "commit_hash": "daa67522e0d33deadf6ac130ebe08805bb78c3a3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/daa67522e0d33deadf6ac130ebe08805bb78c3a3",
        "files": [
          "crypto/bn/bn_recp.c"
        ],
        "message": "Missing BN_RECP_CTX field init.\n\nBN_RECP_CTX_new direclty use bn_init to avoid twice memset calls\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1879)\n(cherry picked from commit 318447bceb3aa2c50ac0081bdb4e917f8704e7da)",
        "before_after_code_files": [
          "crypto/bn/bn_recp.c||crypto/bn/bn_recp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_recp.c||crypto/bn/bn_recp.c": [
          "File: crypto/bn/bn_recp.c -> crypto/bn/bn_recp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: void BN_RECP_CTX_init(BN_RECP_CTX *recp)",
          "14: {",
          "15:     bn_init(&(recp->N));",
          "16:     bn_init(&(recp->Nr));",
          "19: }",
          "21: BN_RECP_CTX *BN_RECP_CTX_new(void)",
          "",
          "[Removed Lines]",
          "17:     recp->num_bits = 0;",
          "18:     recp->flags = 0;",
          "",
          "[Added Lines]",
          "15:     memset(recp, 0, sizeof(*recp));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     if ((ret = OPENSSL_zalloc(sizeof(*ret))) == NULL)",
          "26:         return (NULL);",
          "29:     ret->flags = BN_FLG_MALLOCED;",
          "30:     return (ret);",
          "31: }",
          "",
          "[Removed Lines]",
          "28:     BN_RECP_CTX_init(ret);",
          "",
          "[Added Lines]",
          "27:     bn_init(&(ret->N));",
          "28:     bn_init(&(ret->Nr));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c25d172a5845824e225db91ef87c7f8d0ea803e6",
      "candidate_info": {
        "commit_hash": "c25d172a5845824e225db91ef87c7f8d0ea803e6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c25d172a5845824e225db91ef87c7f8d0ea803e6",
        "files": [
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Fix SSL_VERIFY_CLIENT_ONCE\n\nThe flag SSL_VERIFY_CLIENT_ONCE is documented as follows:\n\n  B<Server mode:> only request a client certificate on the initial TLS/SSL\n  handshake. Do not ask for a client certificate again in case of a\n  renegotiation. This flag must be used together with SSL_VERIFY_PEER.\n\n  B<Client mode:> ignored\n\nBut the implementation actually did nothing. After the server sends its\nServerKeyExchange message, the code was checking s->session->peer to see if\nit is NULL. If it was set then it did not ask for another client\ncertificate. However s->session->peer will only be set in the event of a\nresumption, but a ServerKeyExchange message is only sent in the event of a\nfull handshake (i.e. no resumption).\n\nThe documentation suggests that the original intention was for this to\nhave an effect on renegotiation, and resumption doesn't come into it.\n\nThe fix is to properly check for renegotiation, not whether there is already\na client certificate in the session.\n\nAs far as I can tell this has been broken for a *long* time.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1983)",
        "before_after_code_files": [
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:                !(s->verify_mode & SSL_VERIFY_CLIENT_ONCE))",
          "",
          "[Removed Lines]",
          "279:            && ((s->session->peer == NULL) ||",
          "",
          "[Added Lines]",
          "279:            && (s->s3->tmp.finish_md_len == 0 ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa7130eb6832bcdccb335dd0f6bb535fe9a3e868",
      "candidate_info": {
        "commit_hash": "fa7130eb6832bcdccb335dd0f6bb535fe9a3e868",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fa7130eb6832bcdccb335dd0f6bb535fe9a3e868",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0e-dev\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010004fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-fips  26 Jan 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d  26 Jan 2017\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100050L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-dev  xx XXX xxxx\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}