{
  "cve_id": "CVE-2019-15239",
  "cve_desc": "In the Linux kernel, a certain net/ipv4/tcp_output.c change, which was properly incorporated into 4.16.12, was incorrectly backported to the earlier longterm kernels, introducing a new vulnerability that was potentially more severe than the issue that was intended to be fixed by backporting. Specifically, by adding to a write queue between disconnection and re-connection, a local attacker can trigger multiple use-after-free conditions. This can result in a kernel crash, or potentially in privilege escalation. NOTE: this affects (for example) Linux distributions that use 4.9.x longterm kernels before 4.9.190 or 4.14.x longterm kernels before 4.14.139.",
  "repo": "torvalds/linux",
  "patch_hash": "7f582b248d0a86bae5788c548d7bb5bca6f7691a",
  "patch_info": {
    "commit_hash": "7f582b248d0a86bae5788c548d7bb5bca6f7691a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/7f582b248d0a86bae5788c548d7bb5bca6f7691a",
    "files": [
      "net/ipv4/tcp_output.c"
    ],
    "message": "tcp: purge write queue in tcp_connect_init()\n\nsyzkaller found a reliable way to crash the host, hitting a BUG()\nin __tcp_retransmit_skb()\n\nMalicous MSG_FASTOPEN is the root cause. We need to purge write queue\nin tcp_connect_init() at the point we init snd_una/write_seq.\n\nThis patch also replaces the BUG() by a less intrusive WARN_ON_ONCE()\n\nkernel BUG at net/ipv4/tcp_output.c:2837!\ninvalid opcode: 0000 [#1] SMP KASAN\nDumping ftrace buffer:\n   (ftrace buffer empty)\nModules linked in:\nCPU: 0 PID: 5276 Comm: syz-executor0 Not tainted 4.17.0-rc3+ #51\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nRIP: 0010:__tcp_retransmit_skb+0x2992/0x2eb0 net/ipv4/tcp_output.c:2837\nRSP: 0000:ffff8801dae06ff8 EFLAGS: 00010206\nRAX: ffff8801b9fe61c0 RBX: 00000000ffc18a16 RCX: ffffffff864e1a49\nRDX: 0000000000000100 RSI: ffffffff864e2e12 RDI: 0000000000000005\nRBP: ffff8801dae073a0 R08: ffff8801b9fe61c0 R09: ffffed0039c40dd2\nR10: ffffed0039c40dd2 R11: ffff8801ce206e93 R12: 00000000421eeaad\nR13: ffff8801ce206d4e R14: ffff8801ce206cc0 R15: ffff8801cd4f4a80\nFS:  0000000000000000(0000) GS:ffff8801dae00000(0063) knlGS:00000000096bc900\nCS:  0010 DS: 002b ES: 002b CR0: 0000000080050033\nCR2: 0000000020000000 CR3: 00000001c47b6000 CR4: 00000000001406f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n <IRQ>\n tcp_retransmit_skb+0x2e/0x250 net/ipv4/tcp_output.c:2923\n tcp_retransmit_timer+0xc50/0x3060 net/ipv4/tcp_timer.c:488\n tcp_write_timer_handler+0x339/0x960 net/ipv4/tcp_timer.c:573\n tcp_write_timer+0x111/0x1d0 net/ipv4/tcp_timer.c:593\n call_timer_fn+0x230/0x940 kernel/time/timer.c:1326\n expire_timers kernel/time/timer.c:1363 [inline]\n __run_timers+0x79e/0xc50 kernel/time/timer.c:1666\n run_timer_softirq+0x4c/0x70 kernel/time/timer.c:1692\n __do_softirq+0x2e0/0xaf5 kernel/softirq.c:285\n invoke_softirq kernel/softirq.c:365 [inline]\n irq_exit+0x1d1/0x200 kernel/softirq.c:405\n exiting_irq arch/x86/include/asm/apic.h:525 [inline]\n smp_apic_timer_interrupt+0x17e/0x710 arch/x86/kernel/apic/apic.c:1052\n apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:863\n\nFixes: cf60af03ca4e (\"net-tcp: Fast Open client - sendmsg(MSG_FASTOPEN)\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Yuchung Cheng <ycheng@google.com>\nCc: Neal Cardwell <ncardwell@google.com>\nReported-by: syzbot <syzkaller@googlegroups.com>\nAcked-by: Neal Cardwell <ncardwell@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv4/tcp_output.c||net/ipv4/tcp_output.c"
    ]
  },
  "patch_diff": {
    "net/ipv4/tcp_output.c||net/ipv4/tcp_output.c": [
      "File: net/ipv4/tcp_output.c -> net/ipv4/tcp_output.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2833:   return -EBUSY;",
      "2835:  if (before(TCP_SKB_CB(skb)->seq, tp->snd_una)) {",
      "2838:   if (tcp_trim_head(sk, skb, tp->snd_una - TCP_SKB_CB(skb)->seq))",
      "2839:    return -ENOMEM;",
      "2840:  }",
      "",
      "[Removed Lines]",
      "2836:   if (before(TCP_SKB_CB(skb)->end_seq, tp->snd_una))",
      "2837:    BUG();",
      "",
      "[Added Lines]",
      "2836:   if (unlikely(before(TCP_SKB_CB(skb)->end_seq, tp->snd_una))) {",
      "2837:    WARN_ON_ONCE(1);",
      "2838:    return -EINVAL;",
      "2839:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3342:  sock_reset_flag(sk, SOCK_DONE);",
      "3343:  tp->snd_wnd = 0;",
      "3344:  tcp_init_wl(tp, 0);",
      "3345:  tp->snd_una = tp->write_seq;",
      "3346:  tp->snd_sml = tp->write_seq;",
      "3347:  tp->snd_up = tp->write_seq;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3347:  tcp_write_queue_purge(sk);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5691484df961aff897d824bcc26cd1a2aa036b5b",
      "candidate_info": {
        "commit_hash": "5691484df961aff897d824bcc26cd1a2aa036b5b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5691484df961aff897d824bcc26cd1a2aa036b5b",
        "files": [
          "net/ipv6/ip6_gre.c"
        ],
        "message": "net: ip6_gre: Fix headroom request in ip6erspan_tunnel_xmit()\n\ndev->needed_headroom is not primed until ip6_tnl_xmit(), so it starts\nout zero. Thus the call to skb_cow_head() fails to actually make sure\nthere's enough headroom to push the ERSPAN headers to. That can lead to\nthe panic cited below. (Reproducer below that).\n\nFix by requesting either needed_headroom if already primed, or just the\nbare minimum needed for the header otherwise.\n\n[  190.703567] kernel BUG at net/core/skbuff.c:104!\n[  190.708384] invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI\n[  190.714007] Modules linked in: act_mirred cls_matchall ip6_gre ip6_tunnel tunnel6 gre sch_ingress vrf veth x86_pkg_temp_thermal mlx_platform nfsd e1000e leds_mlxcpld\n[  190.728975] CPU: 1 PID: 959 Comm: kworker/1:2 Not tainted 4.17.0-rc4-net_master-custom-139 #10\n[  190.737647] Hardware name: Mellanox Technologies Ltd. \"MSN2410-CB2F\"/\"SA000874\", BIOS 4.6.5 03/08/2016\n[  190.747006] Workqueue: ipv6_addrconf addrconf_dad_work\n[  190.752222] RIP: 0010:skb_panic+0xc3/0x100\n[  190.756358] RSP: 0018:ffff8801d54072f0 EFLAGS: 00010282\n[  190.761629] RAX: 0000000000000085 RBX: ffff8801c1a8ecc0 RCX: 0000000000000000\n[  190.768830] RDX: 0000000000000085 RSI: dffffc0000000000 RDI: ffffed003aa80e54\n[  190.776025] RBP: ffff8801bd1ec5a0 R08: ffffed003aabce19 R09: ffffed003aabce19\n[  190.783226] R10: 0000000000000001 R11: ffffed003aabce18 R12: ffff8801bf695dbe\n[  190.790418] R13: 0000000000000084 R14: 00000000000006c0 R15: ffff8801bf695dc8\n[  190.797621] FS:  0000000000000000(0000) GS:ffff8801d5400000(0000) knlGS:0000000000000000\n[  190.805786] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  190.811582] CR2: 000055fa929aced0 CR3: 0000000003228004 CR4: 00000000001606e0\n[  190.818790] Call Trace:\n[  190.821264]  <IRQ>\n[  190.823314]  ? ip6erspan_tunnel_xmit+0x5e4/0x1982 [ip6_gre]\n[  190.828940]  ? ip6erspan_tunnel_xmit+0x5e4/0x1982 [ip6_gre]\n[  190.834562]  skb_push+0x78/0x90\n[  190.837749]  ip6erspan_tunnel_xmit+0x5e4/0x1982 [ip6_gre]\n[  190.843219]  ? ip6gre_tunnel_ioctl+0xd90/0xd90 [ip6_gre]\n[  190.848577]  ? debug_check_no_locks_freed+0x210/0x210\n[  190.853679]  ? debug_check_no_locks_freed+0x210/0x210\n[  190.858783]  ? print_irqtrace_events+0x120/0x120\n[  190.863451]  ? sched_clock_cpu+0x18/0x210\n[  190.867496]  ? cyc2ns_read_end+0x10/0x10\n[  190.871474]  ? skb_network_protocol+0x76/0x200\n[  190.875977]  dev_hard_start_xmit+0x137/0x770\n[  190.880317]  ? do_raw_spin_trylock+0x6d/0xa0\n[  190.884624]  sch_direct_xmit+0x2ef/0x5d0\n[  190.888589]  ? pfifo_fast_dequeue+0x3fa/0x670\n[  190.892994]  ? pfifo_fast_change_tx_queue_len+0x810/0x810\n[  190.898455]  ? __lock_is_held+0xa0/0x160\n[  190.902422]  __qdisc_run+0x39e/0xfc0\n[  190.906041]  ? _raw_spin_unlock+0x29/0x40\n[  190.910090]  ? pfifo_fast_enqueue+0x24b/0x3e0\n[  190.914501]  ? sch_direct_xmit+0x5d0/0x5d0\n[  190.918658]  ? pfifo_fast_dequeue+0x670/0x670\n[  190.923047]  ? __dev_queue_xmit+0x172/0x1770\n[  190.927365]  ? preempt_count_sub+0xf/0xd0\n[  190.931421]  __dev_queue_xmit+0x410/0x1770\n[  190.935553]  ? ___slab_alloc+0x605/0x930\n[  190.939524]  ? print_irqtrace_events+0x120/0x120\n[  190.944186]  ? memcpy+0x34/0x50\n[  190.947364]  ? netdev_pick_tx+0x1c0/0x1c0\n[  190.951428]  ? __skb_clone+0x2fd/0x3d0\n[  190.955218]  ? __copy_skb_header+0x270/0x270\n[  190.959537]  ? rcu_read_lock_sched_held+0x93/0xa0\n[  190.964282]  ? kmem_cache_alloc+0x344/0x4d0\n[  190.968520]  ? cyc2ns_read_end+0x10/0x10\n[  190.972495]  ? skb_clone+0x123/0x230\n[  190.976112]  ? skb_split+0x820/0x820\n[  190.979747]  ? tcf_mirred+0x554/0x930 [act_mirred]\n[  190.984582]  tcf_mirred+0x554/0x930 [act_mirred]\n[  190.989252]  ? tcf_mirred_act_wants_ingress.part.2+0x10/0x10 [act_mirred]\n[  190.996109]  ? __lock_acquire+0x706/0x26e0\n[  191.000239]  ? sched_clock_cpu+0x18/0x210\n[  191.004294]  tcf_action_exec+0xcf/0x2a0\n[  191.008179]  tcf_classify+0xfa/0x340\n[  191.011794]  __netif_receive_skb_core+0x8e1/0x1c60\n[  191.016630]  ? debug_check_no_locks_freed+0x210/0x210\n[  191.021732]  ? nf_ingress+0x500/0x500\n[  191.025458]  ? process_backlog+0x347/0x4b0\n[  191.029619]  ? print_irqtrace_events+0x120/0x120\n[  191.034302]  ? lock_acquire+0xd8/0x320\n[  191.038089]  ? process_backlog+0x1b6/0x4b0\n[  191.042246]  ? process_backlog+0xc2/0x4b0\n[  191.046303]  process_backlog+0xc2/0x4b0\n[  191.050189]  net_rx_action+0x5cc/0x980\n[  191.053991]  ? napi_complete_done+0x2c0/0x2c0\n[  191.058386]  ? mark_lock+0x13d/0xb40\n[  191.062001]  ? clockevents_program_event+0x6b/0x1d0\n[  191.066922]  ? print_irqtrace_events+0x120/0x120\n[  191.071593]  ? __lock_is_held+0xa0/0x160\n[  191.075566]  __do_softirq+0x1d4/0x9d2\n[  191.079282]  ? ip6_finish_output2+0x524/0x1460\n[  191.083771]  do_softirq_own_stack+0x2a/0x40\n[  191.087994]  </IRQ>\n[  191.090130]  do_softirq.part.13+0x38/0x40\n[  191.094178]  __local_bh_enable_ip+0x135/0x190\n[  191.098591]  ip6_finish_output2+0x54d/0x1460\n[  191.102916]  ? ip6_forward_finish+0x2f0/0x2f0\n[  191.107314]  ? ip6_mtu+0x3c/0x2c0\n[  191.110674]  ? ip6_finish_output+0x2f8/0x650\n[  191.114992]  ? ip6_output+0x12a/0x500\n[  191.118696]  ip6_output+0x12a/0x500\n[  191.122223]  ? ip6_route_dev_notify+0x5b0/0x5b0\n[  191.126807]  ? ip6_finish_output+0x650/0x650\n[  191.131120]  ? ip6_fragment+0x1a60/0x1a60\n[  191.135182]  ? icmp6_dst_alloc+0x26e/0x470\n[  191.139317]  mld_sendpack+0x672/0x830\n[  191.143021]  ? igmp6_mcf_seq_next+0x2f0/0x2f0\n[  191.147429]  ? __local_bh_enable_ip+0x77/0x190\n[  191.151913]  ipv6_mc_dad_complete+0x47/0x90\n[  191.156144]  addrconf_dad_completed+0x561/0x720\n[  191.160731]  ? addrconf_rs_timer+0x3a0/0x3a0\n[  191.165036]  ? mark_held_locks+0xc9/0x140\n[  191.169095]  ? __local_bh_enable_ip+0x77/0x190\n[  191.173570]  ? addrconf_dad_work+0x50d/0xa20\n[  191.177886]  ? addrconf_dad_work+0x529/0xa20\n[  191.182194]  addrconf_dad_work+0x529/0xa20\n[  191.186342]  ? addrconf_dad_completed+0x720/0x720\n[  191.191088]  ? __lock_is_held+0xa0/0x160\n[  191.195059]  ? process_one_work+0x45d/0xe20\n[  191.199302]  ? process_one_work+0x51e/0xe20\n[  191.203531]  ? rcu_read_lock_sched_held+0x93/0xa0\n[  191.208279]  process_one_work+0x51e/0xe20\n[  191.212340]  ? pwq_dec_nr_in_flight+0x200/0x200\n[  191.216912]  ? get_lock_stats+0x4b/0xf0\n[  191.220788]  ? preempt_count_sub+0xf/0xd0\n[  191.224844]  ? worker_thread+0x219/0x860\n[  191.228823]  ? do_raw_spin_trylock+0x6d/0xa0\n[  191.233142]  worker_thread+0xeb/0x860\n[  191.236848]  ? process_one_work+0xe20/0xe20\n[  191.241095]  kthread+0x206/0x300\n[  191.244352]  ? process_one_work+0xe20/0xe20\n[  191.248587]  ? kthread_stop+0x570/0x570\n[  191.252459]  ret_from_fork+0x3a/0x50\n[  191.256082] Code: 14 3e ff 8b 4b 78 55 4d 89 f9 41 56 41 55 48 c7 c7 a0 cf db 82 41 54 44 8b 44 24 2c 48 8b 54 24 30 48 8b 74 24 20 e8 16 94 13 ff <0f> 0b 48 c7 c7 60 8e 1f 85 48 83 c4 20 e8 55 ef a6 ff 89 74 24\n[  191.275327] RIP: skb_panic+0xc3/0x100 RSP: ffff8801d54072f0\n[  191.281024] ---[ end trace 7ea51094e099e006 ]---\n[  191.285724] Kernel panic - not syncing: Fatal exception in interrupt\n[  191.292168] Kernel Offset: disabled\n[  191.295697] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---\n\nReproducer:\n\n\tip link add h1 type veth peer name swp1\n\tip link add h3 type veth peer name swp3\n\n\tip link set dev h1 up\n\tip address add 192.0.2.1/28 dev h1\n\n\tip link add dev vh3 type vrf table 20\n\tip link set dev h3 master vh3\n\tip link set dev vh3 up\n\tip link set dev h3 up\n\n\tip link set dev swp3 up\n\tip address add dev swp3 2001:db8:2::1/64\n\n\tip link set dev swp1 up\n\ttc qdisc add dev swp1 clsact\n\n\tip link add name gt6 type ip6erspan \\\n\t\tlocal 2001:db8:2::1 remote 2001:db8:2::2 oseq okey 123\n\tip link set dev gt6 up\n\n\tsleep 1\n\n\ttc filter add dev swp1 ingress pref 1000 matchall skip_hw \\\n\t\taction mirred egress mirror dev gt6\n\tping -I h1 192.0.2.2\n\nFixes: e41c7c68ea77 (\"ip6erspan: make sure enough headroom at xmit.\")\nSigned-off-by: Petr Machata <petrm@mellanox.com>\nAcked-by: William Tu <u9012063@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/ip6_gre.c||net/ipv6/ip6_gre.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/ipv6/ip6_gre.c||net/ipv6/ip6_gre.c": [
          "File: net/ipv6/ip6_gre.c -> net/ipv6/ip6_gre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "911:   truncate = true;",
          "912:  }",
          "915:   goto tx_err;",
          "917:  t->parms.o_flags &= ~TUNNEL_KEY;",
          "",
          "[Removed Lines]",
          "914:  if (skb_cow_head(skb, dev->needed_headroom))",
          "",
          "[Added Lines]",
          "914:  if (skb_cow_head(skb, dev->needed_headroom ?: t->hlen))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3336254263c3b6a7734379084f4873a335f1577",
      "candidate_info": {
        "commit_hash": "f3336254263c3b6a7734379084f4873a335f1577",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f3336254263c3b6a7734379084f4873a335f1577",
        "files": [
          "drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c"
        ],
        "message": "drm/amdgpu/uvd7: add emit_reg_write_reg_wait ring callback\n\nFix the NULL pointer dereference while running amdgpu_test:\n\n[   54.972246] BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n[   54.972265] IP:           (null)\n[   54.972273] PGD 0 P4D 0\n[   54.972280] Oops: 0010 [#1] SMP PTI\n[   54.972288] Modules linked in: amdkfd amd_iommu_v2 amdgpu(OE) chash gpu_sched ttm drm_kms_helper drm i2c_algo_bit fb_sys_fops syscopyarea sysfillrect sysimgblt snd_hda_codec_realtek snd_hda_codec_generic snd_hda_codec_hdmi snd_hda_intel snd_hda_codec snd_hda_core snd_hwdep intel_rapl snd_pcm snd_seq_midi snd_seq_midi_event snd_rawmidi x86_pkg_temp_thermal intel_powerclamp coretemp kvm_intel snd_seq snd_seq_device kvm irqbypass snd_timer crct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcbc snd soundcore joydev input_leds aesni_intel aes_x86_64 crypto_simd glue_helper cryptd idma64 virt_dma mei_me intel_lpss_pci serio_raw intel_cstate intel_rapl_perf shpchp intel_pch_thermal mei mac_hid intel_lpss acpi_pad parport_pc ppdev nfsd lp auth_rpcgss nfs_acl lockd grace sunrpc parport autofs4 hid_generic\n[   54.972434]  usbhid mxm_wmi e1000e psmouse ahci hid libahci wmi pinctrl_sunrisepoint video pinctrl_intel\n[   54.972457] CPU: 6 PID: 1393 Comm: uvd Tainted: G           OE    4.16.0-rc7-27fb84fda777 #1\n[   54.972473] Hardware name: MSI MS-7984/Z170 KRAIT GAMING (MS-7984), BIOS B.80 05/11/2016\n[   54.972489] RIP: 0010:          (null)\n[   54.972497] RSP: 0018:ffffaea002c8bcc0 EFLAGS: 00010202\n[   54.972508] RAX: 0000000000000000 RBX: ffff9d30d3c56f60 RCX: 00000000007c0002\n[   54.972522] RDX: 000000000001a6fb RSI: 000000000001a6e9 RDI: ffff9d30d3c56f60\n[   54.972536] RBP: ffffaea002c8bd10 R08: 0000000000000002 R09: ffffffffc06977d0\n[   54.972550] R10: 0000000000000040 R11: 0000000000000000 R12: 0000000000000002\n[   54.972564] R13: ffff9d30d3c5001c R14: ffff9d30d3c50000 R15: 0000000000000006\n[   54.972579] FS:  0000000000000000(0000) GS:ffff9d30eed80000(0000) knlGS:0000000000000000\n[   54.972594] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[   54.972606] CR2: 0000000000000000 CR3: 00000002dbc0a001 CR4: 00000000003606e0\n[   54.972620] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[   54.972634] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n[   54.972648] Call Trace:\n[   54.972685]  ? gmc_v9_0_emit_flush_gpu_tlb+0x111/0x140 [amdgpu]\n[   54.972721]  uvd_v7_0_ring_emit_vm_flush+0x31/0x70 [amdgpu]\n[   54.972751]  amdgpu_vm_flush+0x5dc/0x6c0 [amdgpu]\n[   54.972787]  ? pp_dpm_powergate_uvd+0x50/0x80 [amdgpu]\n[   54.972816]  amdgpu_ib_schedule+0x120/0x4e0 [amdgpu]\n[   54.972850]  amdgpu_job_run+0x17b/0x1c0 [amdgpu]\n[   54.972861]  drm_sched_main+0x2cc/0x490 [gpu_sched]\n[   54.972873]  ? wait_woken+0x80/0x80\n[   54.972882]  kthread+0x121/0x140\n[   54.972891]  ? drm_sched_job_finish+0xf0/0xf0 [gpu_sched]\n[   54.972902]  ? kthread_create_worker_on_cpu+0x70/0x70\n[   54.972914]  ret_from_fork+0x35/0x40\n[   54.972922] Code:  Bad RIP value.\n[   54.972932] RIP:           (null) RSP: ffffaea002c8bcc0\n[   54.972943] CR2: 0000000000000000\n[   54.972951] ---[ end trace 5feb349263bbf633 ]---\n\nSigned-off-by: Xiaojie Yuan <Xiaojie.Yuan@amd.com>\nReviewed-by: Alex Deucher <alexander.deucher@amd.com>\nSigned-off-by: Alex Deucher <alexander.deucher@amd.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c||drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c||drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c": [
          "File: drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c -> drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1671:  .end_use = amdgpu_uvd_ring_end_use,",
          "1672:  .emit_wreg = uvd_v7_0_ring_emit_wreg,",
          "1673:  .emit_reg_wait = uvd_v7_0_ring_emit_reg_wait,",
          "1674: };",
          "1676: static const struct amdgpu_ring_funcs uvd_v7_0_enc_ring_vm_funcs = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1674:  .emit_reg_write_reg_wait = amdgpu_ring_emit_reg_write_reg_wait_helper,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c42a0e2675721e1444f56e6132a07b7b1ec169ac",
      "candidate_info": {
        "commit_hash": "c42a0e2675721e1444f56e6132a07b7b1ec169ac",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c42a0e2675721e1444f56e6132a07b7b1ec169ac",
        "files": [
          "drivers/md/md.c"
        ],
        "message": "md: fix NULL dereference of mddev->pers in remove_and_add_spares()\n\nWe met NULL pointer BUG as follow:\n\n[  151.760358] BUG: unable to handle kernel NULL pointer dereference at 0000000000000060\n[  151.761340] PGD 80000001011eb067 P4D 80000001011eb067 PUD 1011ea067 PMD 0\n[  151.762039] Oops: 0000 [#1] SMP PTI\n[  151.762406] Modules linked in:\n[  151.762723] CPU: 2 PID: 3561 Comm: mdadm-test Kdump: loaded Not tainted 4.17.0-rc1+ #238\n[  151.763542] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1.fc26 04/01/2014\n[  151.764432] RIP: 0010:remove_and_add_spares.part.56+0x13c/0x3a0\n[  151.765061] RSP: 0018:ffffc90001d7fcd8 EFLAGS: 00010246\n[  151.765590] RAX: 0000000000000000 RBX: ffff88013601d600 RCX: 0000000000000000\n[  151.766306] RDX: 0000000000000000 RSI: ffff88013601d600 RDI: ffff880136187000\n[  151.767014] RBP: ffff880136187018 R08: 0000000000000003 R09: 0000000000000051\n[  151.767728] R10: ffffc90001d7fed8 R11: 0000000000000000 R12: ffff88013601d600\n[  151.768447] R13: ffff8801298b1300 R14: ffff880136187000 R15: 0000000000000000\n[  151.769160] FS:  00007f2624276700(0000) GS:ffff88013ae80000(0000) knlGS:0000000000000000\n[  151.769971] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  151.770554] CR2: 0000000000000060 CR3: 0000000111aac000 CR4: 00000000000006e0\n[  151.771272] Call Trace:\n[  151.771542]  md_ioctl+0x1df2/0x1e10\n[  151.771906]  ? __switch_to+0x129/0x440\n[  151.772295]  ? __schedule+0x244/0x850\n[  151.772672]  blkdev_ioctl+0x4bd/0x970\n[  151.773048]  block_ioctl+0x39/0x40\n[  151.773402]  do_vfs_ioctl+0xa4/0x610\n[  151.773770]  ? dput.part.23+0x87/0x100\n[  151.774151]  ksys_ioctl+0x70/0x80\n[  151.774493]  __x64_sys_ioctl+0x16/0x20\n[  151.774877]  do_syscall_64+0x5b/0x180\n[  151.775258]  entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\nFor raid6, when two disk of the array are offline, two spare disks can\nbe added into the array. Before spare disks recovery completing,\nsystem reboot and mdadm thinks it is ok to restart the degraded\narray by md_ioctl(). Since disks in raid6 is not only_parity(),\nraid5_run() will abort, when there is no PPL feature or not setting\n'start_dirty_degraded' parameter. Therefore, mddev->pers is NULL.\n\nBut, mddev->raid_disks has been set and it will not be cleared when\nraid5_run abort. md_ioctl() can execute cmd 'HOT_REMOVE_DISK' to\nremove a disk by mdadm, which will cause NULL pointer dereference\nin remove_and_add_spares() finally.\n\nSigned-off-by: Yufen Yu <yuyufen@huawei.com>\nSigned-off-by: Shaohua Li <shli@fb.com>",
        "before_after_code_files": [
          "drivers/md/md.c||drivers/md/md.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/md/md.c||drivers/md/md.c": [
          "File: drivers/md/md.c -> drivers/md/md.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6525:  char b[BDEVNAME_SIZE];",
          "6526:  struct md_rdev *rdev;",
          "6528:  rdev = find_rdev(mddev, dev);",
          "6529:  if (!rdev)",
          "6530:   return -ENXIO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6528:  if (!mddev->pers)",
          "6529:   return -ENODEV;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01b8d064d58b4c1f0eff47f8fe8a8508cb3b3840",
      "candidate_info": {
        "commit_hash": "01b8d064d58b4c1f0eff47f8fe8a8508cb3b3840",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/01b8d064d58b4c1f0eff47f8fe8a8508cb3b3840",
        "files": [
          "net/ipv6/ip6_gre.c"
        ],
        "message": "net: ip6_gre: Request headroom in __gre6_xmit()\n\n__gre6_xmit() pushes GRE headers before handing over to ip6_tnl_xmit()\nfor generic IP-in-IP processing. However it doesn't make sure that there\nis enough headroom to push the header to. That can lead to the panic\ncited below. (Reproducer below that).\n\nFix by requesting either needed_headroom if already primed, or just the\nbare minimum needed for the header otherwise.\n\n[  158.576725] kernel BUG at net/core/skbuff.c:104!\n[  158.581510] invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI\n[  158.587174] Modules linked in: act_mirred cls_matchall ip6_gre ip6_tunnel tunnel6 gre sch_ingress vrf veth x86_pkg_temp_thermal mlx_platform nfsd e1000e leds_mlxcpld\n[  158.602268] CPU: 1 PID: 16 Comm: ksoftirqd/1 Not tainted 4.17.0-rc4-net_master-custom-139 #10\n[  158.610938] Hardware name: Mellanox Technologies Ltd. \"MSN2410-CB2F\"/\"SA000874\", BIOS 4.6.5 03/08/2016\n[  158.620426] RIP: 0010:skb_panic+0xc3/0x100\n[  158.624586] RSP: 0018:ffff8801d3f27110 EFLAGS: 00010286\n[  158.629882] RAX: 0000000000000082 RBX: ffff8801c02cc040 RCX: 0000000000000000\n[  158.637127] RDX: 0000000000000082 RSI: dffffc0000000000 RDI: ffffed003a7e4e18\n[  158.644366] RBP: ffff8801bfec8020 R08: ffffed003aabce19 R09: ffffed003aabce19\n[  158.651574] R10: 000000000000000b R11: ffffed003aabce18 R12: ffff8801c364de66\n[  158.658786] R13: 000000000000002c R14: 00000000000000c0 R15: ffff8801c364de68\n[  158.666007] FS:  0000000000000000(0000) GS:ffff8801d5400000(0000) knlGS:0000000000000000\n[  158.674212] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  158.680036] CR2: 00007f4b3702dcd0 CR3: 0000000003228002 CR4: 00000000001606e0\n[  158.687228] Call Trace:\n[  158.689752]  ? __gre6_xmit+0x246/0xd80 [ip6_gre]\n[  158.694475]  ? __gre6_xmit+0x246/0xd80 [ip6_gre]\n[  158.699141]  skb_push+0x78/0x90\n[  158.702344]  __gre6_xmit+0x246/0xd80 [ip6_gre]\n[  158.706872]  ip6gre_tunnel_xmit+0x3bc/0x610 [ip6_gre]\n[  158.711992]  ? __gre6_xmit+0xd80/0xd80 [ip6_gre]\n[  158.716668]  ? debug_check_no_locks_freed+0x210/0x210\n[  158.721761]  ? print_irqtrace_events+0x120/0x120\n[  158.726461]  ? sched_clock_cpu+0x18/0x210\n[  158.730572]  ? sched_clock_cpu+0x18/0x210\n[  158.734692]  ? cyc2ns_read_end+0x10/0x10\n[  158.738705]  ? skb_network_protocol+0x76/0x200\n[  158.743216]  ? netif_skb_features+0x1b2/0x550\n[  158.747648]  dev_hard_start_xmit+0x137/0x770\n[  158.752010]  sch_direct_xmit+0x2ef/0x5d0\n[  158.755992]  ? pfifo_fast_dequeue+0x3fa/0x670\n[  158.760460]  ? pfifo_fast_change_tx_queue_len+0x810/0x810\n[  158.765975]  ? __lock_is_held+0xa0/0x160\n[  158.770002]  __qdisc_run+0x39e/0xfc0\n[  158.773673]  ? _raw_spin_unlock+0x29/0x40\n[  158.777781]  ? pfifo_fast_enqueue+0x24b/0x3e0\n[  158.782191]  ? sch_direct_xmit+0x5d0/0x5d0\n[  158.786372]  ? pfifo_fast_dequeue+0x670/0x670\n[  158.790818]  ? __dev_queue_xmit+0x172/0x1770\n[  158.795195]  ? preempt_count_sub+0xf/0xd0\n[  158.799313]  __dev_queue_xmit+0x410/0x1770\n[  158.803512]  ? ___slab_alloc+0x605/0x930\n[  158.807525]  ? ___slab_alloc+0x605/0x930\n[  158.811540]  ? memcpy+0x34/0x50\n[  158.814768]  ? netdev_pick_tx+0x1c0/0x1c0\n[  158.818895]  ? __skb_clone+0x2fd/0x3d0\n[  158.822712]  ? __copy_skb_header+0x270/0x270\n[  158.827079]  ? rcu_read_lock_sched_held+0x93/0xa0\n[  158.831903]  ? kmem_cache_alloc+0x344/0x4d0\n[  158.836199]  ? skb_clone+0x123/0x230\n[  158.839869]  ? skb_split+0x820/0x820\n[  158.843521]  ? tcf_mirred+0x554/0x930 [act_mirred]\n[  158.848407]  tcf_mirred+0x554/0x930 [act_mirred]\n[  158.853104]  ? tcf_mirred_act_wants_ingress.part.2+0x10/0x10 [act_mirred]\n[  158.860005]  ? __lock_acquire+0x706/0x26e0\n[  158.864162]  ? mark_lock+0x13d/0xb40\n[  158.867832]  tcf_action_exec+0xcf/0x2a0\n[  158.871736]  tcf_classify+0xfa/0x340\n[  158.875402]  __netif_receive_skb_core+0x8e1/0x1c60\n[  158.880334]  ? nf_ingress+0x500/0x500\n[  158.884059]  ? process_backlog+0x347/0x4b0\n[  158.888241]  ? lock_acquire+0xd8/0x320\n[  158.892050]  ? process_backlog+0x1b6/0x4b0\n[  158.896228]  ? process_backlog+0xc2/0x4b0\n[  158.900291]  process_backlog+0xc2/0x4b0\n[  158.904210]  net_rx_action+0x5cc/0x980\n[  158.908047]  ? napi_complete_done+0x2c0/0x2c0\n[  158.912525]  ? rcu_read_unlock+0x80/0x80\n[  158.916534]  ? __lock_is_held+0x34/0x160\n[  158.920541]  __do_softirq+0x1d4/0x9d2\n[  158.924308]  ? trace_event_raw_event_irq_handler_exit+0x140/0x140\n[  158.930515]  run_ksoftirqd+0x1d/0x40\n[  158.934152]  smpboot_thread_fn+0x32b/0x690\n[  158.938299]  ? sort_range+0x20/0x20\n[  158.941842]  ? preempt_count_sub+0xf/0xd0\n[  158.945940]  ? schedule+0x5b/0x140\n[  158.949412]  kthread+0x206/0x300\n[  158.952689]  ? sort_range+0x20/0x20\n[  158.956249]  ? kthread_stop+0x570/0x570\n[  158.960164]  ret_from_fork+0x3a/0x50\n[  158.963823] Code: 14 3e ff 8b 4b 78 55 4d 89 f9 41 56 41 55 48 c7 c7 a0 cf db 82 41 54 44 8b 44 24 2c 48 8b 54 24 30 48 8b 74 24 20 e8 16 94 13 ff <0f> 0b 48 c7 c7 60 8e 1f 85 48 83 c4 20 e8 55 ef a6 ff 89 74 24\n[  158.983235] RIP: skb_panic+0xc3/0x100 RSP: ffff8801d3f27110\n[  158.988935] ---[ end trace 5af56ee845aa6cc8 ]---\n[  158.993641] Kernel panic - not syncing: Fatal exception in interrupt\n[  159.000176] Kernel Offset: disabled\n[  159.003767] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---\n\nReproducer:\n\n\tip link add h1 type veth peer name swp1\n\tip link add h3 type veth peer name swp3\n\n\tip link set dev h1 up\n\tip address add 192.0.2.1/28 dev h1\n\n\tip link add dev vh3 type vrf table 20\n\tip link set dev h3 master vh3\n\tip link set dev vh3 up\n\tip link set dev h3 up\n\n\tip link set dev swp3 up\n\tip address add dev swp3 2001:db8:2::1/64\n\n\tip link set dev swp1 up\n\ttc qdisc add dev swp1 clsact\n\n\tip link add name gt6 type ip6gretap \\\n\t\tlocal 2001:db8:2::1 remote 2001:db8:2::2\n\tip link set dev gt6 up\n\n\tsleep 1\n\n\ttc filter add dev swp1 ingress pref 1000 matchall skip_hw \\\n\t\taction mirred egress mirror dev gt6\n\tping -I h1 192.0.2.2\n\nFixes: c12b395a4664 (\"gre: Support GRE over IPv6\")\nSigned-off-by: Petr Machata <petrm@mellanox.com>\nAcked-by: William Tu <u9012063@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/ip6_gre.c||net/ipv6/ip6_gre.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/ipv6/ip6_gre.c||net/ipv6/ip6_gre.c": [
          "File: net/ipv6/ip6_gre.c -> net/ipv6/ip6_gre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:  else",
          "699:   fl6->daddr = tunnel->parms.raddr;",
          "702:  protocol = (dev->type == ARPHRD_ETHER) ? htons(ETH_P_TEB) : proto;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701:  if (skb_cow_head(skb, dev->needed_headroom ?: tunnel->hlen))",
          "702:   return -ENOMEM;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "378831e4daec75fbba6d3612bcf3b4dd00ddbf08",
      "candidate_info": {
        "commit_hash": "378831e4daec75fbba6d3612bcf3b4dd00ddbf08",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/378831e4daec75fbba6d3612bcf3b4dd00ddbf08",
        "files": [
          "fs/afs/security.c"
        ],
        "message": "afs: Fix directory permissions check\n\nDoing faccessat(\"/afs/some/directory\", 0) triggers a BUG in the permissions\ncheck code.\n\nFix this by just removing the BUG section.  If no permissions are asked\nfor, just return okay if the file exists.\n\nAlso:\n\n (1) Split up the directory check so that it has separate if-statements\n     rather than if-else-if (e.g. checking for MAY_EXEC shouldn't skip the\n     check for MAY_READ and MAY_WRITE).\n\n (2) Check for MAY_CHDIR as MAY_EXEC.\n\nWithout the main fix, the following BUG may occur:\n\n kernel BUG at fs/afs/security.c:386!\n invalid opcode: 0000 [#1] SMP PTI\n ...\n RIP: 0010:afs_permission+0x19d/0x1a0 [kafs]\n ...\n Call Trace:\n  ? inode_permission+0xbe/0x180\n  ? do_faccessat+0xdc/0x270\n  ? do_syscall_64+0x60/0x1f0\n  ? entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nFixes: 00d3b7a4533e (\"[AFS]: Add security support.\")\nReported-by: Jonathan Billings <jsbillings@jsbillings.org>\nSigned-off-by: David Howells <dhowells@redhat.com>",
        "before_after_code_files": [
          "fs/afs/security.c||fs/afs/security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/afs/security.c||fs/afs/security.c": [
          "File: fs/afs/security.c -> fs/afs/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:         mask, access, S_ISDIR(inode->i_mode) ? \"dir\" : \"file\");",
          "374:  if (S_ISDIR(inode->i_mode)) {",
          "376:    if (!(access & AFS_ACE_LOOKUP))",
          "377:     goto permission_denied;",
          "384:     goto permission_denied;",
          "387:   }",
          "388:  } else {",
          "389:   if (!(access & AFS_ACE_LOOKUP))",
          "",
          "[Removed Lines]",
          "375:   if (mask & MAY_EXEC) {",
          "378:   } else if (mask & MAY_READ) {",
          "379:    if (!(access & AFS_ACE_LOOKUP))",
          "380:     goto permission_denied;",
          "381:   } else if (mask & MAY_WRITE) {",
          "385:   } else {",
          "386:    BUG();",
          "",
          "[Added Lines]",
          "375:   if (mask & (MAY_EXEC | MAY_READ | MAY_CHDIR)) {",
          "378:   }",
          "379:   if (mask & MAY_WRITE) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}