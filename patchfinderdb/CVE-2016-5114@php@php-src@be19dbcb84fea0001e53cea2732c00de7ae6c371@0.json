{
  "cve_id": "CVE-2016-5114",
  "cve_desc": "sapi/fpm/fpm/fpm_log.c in PHP before 5.5.31, 5.6.x before 5.6.17, and 7.x before 7.0.2 misinterprets the semantics of the snprintf return value, which allows attackers to obtain sensitive information from process memory or cause a denial of service (out-of-bounds read and buffer overflow) via a long string, as demonstrated by a long URI in a configuration with custom REQUEST_URI logging.",
  "repo": "php/php-src",
  "patch_hash": "be19dbcb84fea0001e53cea2732c00de7ae6c371",
  "patch_info": {
    "commit_hash": "be19dbcb84fea0001e53cea2732c00de7ae6c371",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/be19dbcb84fea0001e53cea2732c00de7ae6c371",
    "files": [
      "NEWS",
      "sapi/fpm/fpm/fpm_log.c"
    ],
    "message": "Fixed bug #70755: fpm_log.c memory leak and buffer overflow",
    "before_after_code_files": [
      "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
    ]
  },
  "patch_diff": {
    "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c": [
      "File: sapi/fpm/fpm/fpm_log.c -> sapi/fpm/fpm/fpm_log.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "448:     b += len2;",
      "449:     len += len2;",
      "450:    }",
      "451:    continue;",
      "452:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "451:    if (len >= FPM_LOG_BUFFER) {",
      "452:     zlog(ZLOG_NOTICE, \"the log buffer is full (%d). The access log request has been truncated.\", FPM_LOG_BUFFER);",
      "453:     len = FPM_LOG_BUFFER;",
      "454:     break;",
      "455:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2eaa7556605ffc0d78c89965f5e905cf801207ef",
      "candidate_info": {
        "commit_hash": "2eaa7556605ffc0d78c89965f5e905cf801207ef",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/2eaa7556605ffc0d78c89965f5e905cf801207ef",
        "files": [
          "sapi/fpm/fpm/fpm_log.c"
        ],
        "message": "Fixed bug #70755: fpm_log.c memory leak and buffer overflow",
        "before_after_code_files": [
          "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
          ],
          "candidate": [
            "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
          ]
        }
      },
      "candidate_diff": {
        "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c": [
          "File: sapi/fpm/fpm/fpm_log.c -> sapi/fpm/fpm/fpm_log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:     b += len2;",
          "449:     len += len2;",
          "450:    }",
          "451:    continue;",
          "452:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:    if (len >= FPM_LOG_BUFFER) {",
          "452:     zlog(ZLOG_NOTICE, \"the log buffer is full (%d). The access log request has been truncated.\", FPM_LOG_BUFFER);",
          "453:     len = FPM_LOG_BUFFER;",
          "454:     break;",
          "455:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2721a0148649e07ed74468f097a28899741eb58f",
      "candidate_info": {
        "commit_hash": "2721a0148649e07ed74468f097a28899741eb58f",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/2721a0148649e07ed74468f097a28899741eb58f",
        "files": [
          "sapi/fpm/fpm/fpm_log.c"
        ],
        "message": "Fixed bug #70755: fpm_log.c memory leak and buffer overflow",
        "before_after_code_files": [
          "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
          ],
          "candidate": [
            "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
          ]
        }
      },
      "candidate_diff": {
        "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c": [
          "File: sapi/fpm/fpm/fpm_log.c -> sapi/fpm/fpm/fpm_log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:     b += len2;",
          "449:     len += len2;",
          "450:    }",
          "451:    continue;",
          "452:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:    if (len >= FPM_LOG_BUFFER) {",
          "452:     zlog(ZLOG_NOTICE, \"the log buffer is full (%d). The access log request has been truncated.\", FPM_LOG_BUFFER);",
          "453:     len = FPM_LOG_BUFFER;",
          "454:     break;",
          "455:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9ae4f079570306bef3b221935cdd240c8c1c7e5",
      "candidate_info": {
        "commit_hash": "e9ae4f079570306bef3b221935cdd240c8c1c7e5",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/e9ae4f079570306bef3b221935cdd240c8c1c7e5",
        "files": [
          "ext/gd/libgd/gd_interpolation.c",
          "ext/gd/tests/bug70976.phpt",
          "ext/wddx/tests/bug70661.phpt",
          "ext/wddx/tests/bug70741.phpt",
          "ext/wddx/wddx.c",
          "ext/xmlrpc/tests/bug70728.phpt",
          "ext/xmlrpc/xmlrpc-epi-php.c",
          "sapi/fpm/fpm/fpm_log.c"
        ],
        "message": "Merge branch 'PHP-5.5' into PHP-5.6\n\n* PHP-5.5:\n  Update NEWS\n  Improve fix for bug #70976\n  Fixed bug #70661 (Use After Free Vulnerability in WDDX Packet Deserialization)\n  Fixed bug #70741: Session WDDX Packet Deserialization Type Confusion Vulnerability\n  Fixed #70728\n  Fixed bug #70755: fpm_log.c memory leak and buffer overflow\n  Fix bug #70976: fix boundary check on gdImageRotateInterpolated\n  typofix",
        "before_after_code_files": [
          "ext/gd/libgd/gd_interpolation.c||ext/gd/libgd/gd_interpolation.c",
          "ext/gd/tests/bug70976.phpt||ext/gd/tests/bug70976.phpt",
          "ext/wddx/tests/bug70661.phpt||ext/wddx/tests/bug70661.phpt",
          "ext/wddx/tests/bug70741.phpt||ext/wddx/tests/bug70741.phpt",
          "ext/wddx/wddx.c||ext/wddx/wddx.c",
          "ext/xmlrpc/tests/bug70728.phpt||ext/xmlrpc/tests/bug70728.phpt",
          "ext/xmlrpc/xmlrpc-epi-php.c||ext/xmlrpc/xmlrpc-epi-php.c",
          "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
          ],
          "candidate": [
            "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/libgd/gd_interpolation.c||ext/gd/libgd/gd_interpolation.c": [
          "File: ext/gd/libgd/gd_interpolation.c -> ext/gd/libgd/gd_interpolation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2162: {",
          "2163:  const int angle_rounded = (int)floor(angle * 100);",
          "2166:   return NULL;",
          "2167:  }",
          "",
          "[Removed Lines]",
          "2165:  if (bgcolor < 0) {",
          "",
          "[Added Lines]",
          "2165:  if (bgcolor < 0 || (!src->trueColor && bgcolor >= gdMaxColors)) {",
          "",
          "---------------"
        ],
        "ext/gd/tests/bug70976.phpt||ext/gd/tests/bug70976.phpt": [
          "File: ext/gd/tests/bug70976.phpt -> ext/gd/tests/bug70976.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70976 (Memory Read via gdImageRotateInterpolated Array Index Out of Bounds)",
          "3: --SKIPIF--",
          "4: <?php",
          "5:  if(!extension_loaded('gd')){ die('skip gd extension not available'); }",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "9: $img = imagerotate(imagecreate(1,1),45,0x7ffffff9);",
          "10: var_dump($img);",
          "11: ?>",
          "12: --EXPECTF--",
          "13: bool(false)",
          "",
          "---------------"
        ],
        "ext/wddx/tests/bug70661.phpt||ext/wddx/tests/bug70661.phpt": [
          "File: ext/wddx/tests/bug70661.phpt -> ext/wddx/tests/bug70661.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70661 (Use After Free Vulnerability in WDDX Packet Deserialization)",
          "3: --SKIPIF--",
          "4: <?php",
          "5: if (!extension_loaded(\"wddx\")) print \"skip\";",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "9: $fakezval = ptr2str(1122334455);",
          "10: $fakezval .= ptr2str(0);",
          "11: $fakezval .= \"\\x00\\x00\\x00\\x00\";",
          "12: $fakezval .= \"\\x01\";",
          "13: $fakezval .= \"\\x00\";",
          "14: $fakezval .= \"\\x00\\x00\";",
          "16: $x = <<<EOT",
          "17: <?xml version='1.0'?>",
          "18: <wddxPacket version='1.0'>",
          "19: <header/>",
          "20:  <data>",
          "21:   <struct>",
          "22:    <recordset rowCount='1' fieldNames='ryat'>",
          "23:     <field name='ryat'>",
          "24:      <var name='php_class_name'>",
          "25:       <string>stdClass</string>",
          "26:      </var>",
          "27:      <null/>",
          "28:     </field>",
          "29:    </recordset>",
          "30:   </struct>",
          "31:  </data>",
          "32: </wddxPacket>",
          "33: EOT;",
          "35: $y = wddx_deserialize($x);",
          "37: for ($i = 0; $i < 5; $i++) {",
          "38:  $v[$i] = $fakezval.$i;",
          "39: }",
          "41: var_dump($y);",
          "43: function ptr2str($ptr)",
          "44: {",
          "45:  $out = '';",
          "47:  for ($i = 0; $i < 8; $i++) {",
          "48:   $out .= chr($ptr & 0xff);",
          "49:   $ptr >>= 8;",
          "50:  }",
          "52:  return $out;",
          "53: }",
          "54: ?>",
          "55: DONE",
          "56: --EXPECTF--",
          "57: array(1) {",
          "58:   [0]=>",
          "59:   array(1) {",
          "60:     [\"ryat\"]=>",
          "61:     array(2) {",
          "62:       [\"php_class_name\"]=>",
          "63:       string(8) \"stdClass\"",
          "64:       [0]=>",
          "65:       NULL",
          "66:     }",
          "67:   }",
          "68: }",
          "69: DONE",
          "",
          "---------------"
        ],
        "ext/wddx/tests/bug70741.phpt||ext/wddx/tests/bug70741.phpt": [
          "File: ext/wddx/tests/bug70741.phpt -> ext/wddx/tests/bug70741.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70741 (Session WDDX Packet Deserialization Type Confusion Vulnerability)",
          "3: --SKIPIF--",
          "4: <?php",
          "5: if (!extension_loaded(\"wddx\")) print \"skip\";",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "9: ini_set('session.serialize_handler', 'wddx');",
          "10: session_start();",
          "12: $hashtable = str_repeat('A', 66);",
          "13: $wddx = \"<?xml version='1.0'?>",
          "14: <wddxPacket version='1.0'>",
          "15: <header/>",
          "16:  <data>",
          "17:   <string>$hashtable</string>",
          "18:  </data>",
          "19: </wddxPacket>\";",
          "20: session_decode($wddx);",
          "21: ?>",
          "22: DONE",
          "23: --EXPECTF--",
          "25: Warning: session_decode(): Failed to decode session object. Session has been destroyed in %s on line %d",
          "26: DONE",
          "",
          "---------------"
        ],
        "ext/wddx/wddx.c||ext/wddx/wddx.c": [
          "File: ext/wddx/wddx.c -> ext/wddx/wddx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     efree(((st_entry *)stack->elements[i])->varname);",
          "238:    }",
          "239:    efree(stack->elements[i]);",
          "241:   efree(stack->elements);",
          "242:  }",
          "243:  return SUCCESS;",
          "",
          "[Removed Lines]",
          "240:   }",
          "",
          "[Added Lines]",
          "240:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:  if (vallen == 0) {",
          "303:   return SUCCESS;",
          "304:  }",
          "306:  MAKE_STD_ZVAL(retval);",
          "308:  if ((ret = php_wddx_deserialize_ex((char *)val, vallen, retval)) == SUCCESS) {",
          "310:   for (zend_hash_internal_pointer_reset(Z_ARRVAL_P(retval));",
          "311:     zend_hash_get_current_data(Z_ARRVAL_P(retval), (void **) &ent) == SUCCESS;",
          "312:     zend_hash_move_forward(Z_ARRVAL_P(retval))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:   if (Z_TYPE_P(retval) != IS_ARRAY) {",
          "310:    zval_ptr_dtor(&retval);",
          "311:    return FAILURE;",
          "312:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:  php_session_register_serializer(\"wddx\",",
          "342:          PS_SERIALIZER_ENCODE_NAME(wddx),",
          "343:          PS_SERIALIZER_DECODE_NAME(wddx));",
          "346:  return SUCCESS;",
          "347: }",
          "",
          "[Removed Lines]",
          "344: #endif",
          "",
          "[Added Lines]",
          "347: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "385: void php_wddx_packet_end(wddx_packet *packet)",
          "386: {",
          "387:  php_wddx_add_chunk_static(packet, WDDX_DATA_E);",
          "389: }",
          "",
          "[Removed Lines]",
          "388:  php_wddx_add_chunk_static(packet, WDDX_PACKET_E);",
          "",
          "[Added Lines]",
          "391:  php_wddx_add_chunk_static(packet, WDDX_PACKET_E);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "421: {",
          "422:  char tmp_buf[WDDX_BUF_LEN];",
          "423:  zval tmp;",
          "425:  tmp = *var;",
          "426:  zval_copy_ctor(&tmp);",
          "427:  convert_to_string(&tmp);",
          "428:  snprintf(tmp_buf, sizeof(tmp_buf), WDDX_NUMBER, Z_STRVAL(tmp));",
          "429:  zval_dtor(&tmp);",
          "432: }",
          "",
          "[Removed Lines]",
          "431:  php_wddx_add_chunk(packet, tmp_buf);",
          "",
          "[Added Lines]",
          "434:  php_wddx_add_chunk(packet, tmp_buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "655:   case IS_NULL:",
          "656:    php_wddx_serialize_unset(packet);",
          "657:    break;",
          "659:   case IS_ARRAY:",
          "660:    ht = Z_ARRVAL_P(var);",
          "661:    if (ht->nApplyCount > 1) {",
          "662:     php_error_docref(NULL TSRMLS_CC, E_RECOVERABLE_ERROR, \"WDDX doesn't support circular references\");",
          "663:     return;",
          "664:    }",
          "666:    php_wddx_serialize_array(packet, var);",
          "667:    ht->nApplyCount--;",
          "668:    break;",
          "",
          "[Removed Lines]",
          "665:    ht->nApplyCount++;",
          "",
          "[Added Lines]",
          "668:    ht->nApplyCount++;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "700:   if (zend_hash_find(EG(active_symbol_table), Z_STRVAL_P(name_var),",
          "701:        Z_STRLEN_P(name_var)+1, (void**)&val) != FAILURE) {",
          "702:    php_wddx_serialize_var(packet, *val, Z_STRVAL_P(name_var), Z_STRLEN_P(name_var) TSRMLS_CC);",
          "704:  } else if (Z_TYPE_P(name_var) == IS_ARRAY || Z_TYPE_P(name_var) == IS_OBJECT) {",
          "705:   int is_array = Z_TYPE_P(name_var) == IS_ARRAY;",
          "707:   target_hash = HASH_OF(name_var);",
          "709:   if (is_array && target_hash->nApplyCount > 1) {",
          "710:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"recursion detected\");",
          "711:    return;",
          "",
          "[Removed Lines]",
          "703:   }",
          "",
          "[Added Lines]",
          "706:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "960:   if (stack->top > 1) {",
          "961:    stack->top--;",
          "962:    wddx_stack_top(stack, (void**)&ent2);",
          "965:    if (ent2->type == ST_FIELD && ent2->data == NULL) {",
          "966:     zval_ptr_dtor(&ent1->data);",
          "967:     efree(ent1);",
          "968:     return;",
          "969:    }",
          "971:    if (Z_TYPE_P(ent2->data) == IS_ARRAY || Z_TYPE_P(ent2->data) == IS_OBJECT) {",
          "972:     target_hash = HASH_OF(ent2->data);",
          "974:     if (ent1->varname) {",
          "975:      if (!strcmp(ent1->varname, PHP_CLASS_NAME_VAR) &&",
          "977:       zend_bool incomplete_class = 0;",
          "979:       zend_str_tolower(Z_STRVAL_P(ent1->data), Z_STRLEN_P(ent1->data));",
          "",
          "[Removed Lines]",
          "976:       Z_TYPE_P(ent1->data) == IS_STRING && Z_STRLEN_P(ent1->data)) {",
          "",
          "[Added Lines]",
          "979:       Z_TYPE_P(ent1->data) == IS_STRING && Z_STRLEN_P(ent1->data) && ent2->type == ST_STRUCT) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1046:  if (!wddx_stack_is_empty(stack) && !stack->done) {",
          "1047:   wddx_stack_top(stack, (void**)&ent);",
          "1048:   switch (Z_TYPE_P(ent)) {",
          "1050:     if (Z_STRLEN_P(ent->data) == 0) {",
          "1051:      STR_FREE(Z_STRVAL_P(ent->data));",
          "1052:      Z_STRVAL_P(ent->data) = estrndup(s, len);",
          "",
          "[Removed Lines]",
          "1049:    case ST_STRING:",
          "",
          "[Added Lines]",
          "1052:    case ST_STRING:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1188:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"+\", &args, &num_args) == FAILURE) {",
          "1189:   return;",
          "1190:  }",
          "1192:  packet = php_wddx_constructor();",
          "1194:  php_wddx_packet_start(packet, NULL, 0);",
          "1195:  php_wddx_add_chunk_static(packet, WDDX_STRUCT_S);",
          "1197:  for (i=0; i<num_args; i++) {",
          "1198:   if (Z_TYPE_PP(args[i]) != IS_ARRAY && Z_TYPE_PP(args[i]) != IS_OBJECT) {",
          "1199:    convert_to_string_ex(args[i]);",
          "1200:   }",
          "1201:   php_wddx_add_var(packet, *args[i]);",
          "1204:  php_wddx_add_chunk_static(packet, WDDX_STRUCT_E);",
          "1205:  php_wddx_packet_end(packet);",
          "",
          "[Removed Lines]",
          "1202:  }",
          "",
          "[Added Lines]",
          "1205:  }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1263: {",
          "1264:  zval *packet_id;",
          "1265:  wddx_packet *packet = NULL;",
          "1267:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"r\", &packet_id) == FAILURE) {",
          "1268:   return;",
          "1269:  }",
          "1271:  ZEND_FETCH_RESOURCE(packet, wddx_packet *, &packet_id, -1, \"WDDX packet ID\", le_wddx);",
          "1275:  php_wddx_packet_end(packet);",
          "1277:  ZVAL_STRINGL(return_value, packet->c, packet->len, 1);",
          "",
          "[Removed Lines]",
          "1273:  php_wddx_add_chunk_static(packet, WDDX_STRUCT_E);",
          "",
          "[Added Lines]",
          "1276:  php_wddx_add_chunk_static(packet, WDDX_STRUCT_E);",
          "",
          "---------------"
        ],
        "ext/xmlrpc/tests/bug70728.phpt||ext/xmlrpc/tests/bug70728.phpt": [
          "File: ext/xmlrpc/tests/bug70728.phpt -> ext/xmlrpc/tests/bug70728.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70728 (Type Confusion Vulnerability in PHP_to_XMLRPC_worker)",
          "3: --SKIPIF--",
          "4: <?php",
          "5: if (!extension_loaded(\"xmlrpc\")) print \"skip\";",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "9: $obj = new stdClass;",
          "10: $obj->xmlrpc_type = 'base64';",
          "11: $obj->scalar = 0x1122334455;",
          "12: var_dump(xmlrpc_encode($obj));",
          "13: var_dump($obj);",
          "14: ?>",
          "15: --EXPECTF--",
          "16: string(135) \"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
          "17: <params>",
          "18: <param>",
          "19:  <value>",
          "20:   <base64>NzM1ODgyMjkyMDU=&#10;</base64>",
          "21:  </value>",
          "22: </param>",
          "23: </params>",
          "24: \"",
          "25: object(stdClass)#1 (2) {",
          "26:   [\"xmlrpc_type\"]=>",
          "27:   string(6) \"base64\"",
          "28:   [\"scalar\"]=>",
          "29:   int(73588229205)",
          "30: }",
          "",
          "---------------"
        ],
        "ext/xmlrpc/xmlrpc-epi-php.c||ext/xmlrpc/xmlrpc-epi-php.c": [
          "File: ext/xmlrpc/xmlrpc-epi-php.c -> ext/xmlrpc/xmlrpc-epi-php.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:       xReturn = XMLRPC_CreateValueEmpty();",
          "533:       XMLRPC_SetValueID(xReturn, key, 0);",
          "534:      } else {",
          "536:      }",
          "537:      break;",
          "538:     case xmlrpc_datetime:",
          "",
          "[Removed Lines]",
          "535:       xReturn = XMLRPC_CreateValueBase64(key, Z_STRVAL_P(val), Z_STRLEN_P(val));",
          "",
          "[Added Lines]",
          "535:       if (Z_TYPE_P(val) != IS_STRING) {",
          "536:        zval *newvalue;",
          "537:        ALLOC_INIT_ZVAL(newvalue);",
          "538:        MAKE_COPY_ZVAL(&val, newvalue);",
          "539:        convert_to_string(newvalue);",
          "540:        xReturn = XMLRPC_CreateValueBase64(key, Z_STRVAL_P(newvalue), Z_STRLEN_P(newvalue));",
          "541:        zval_ptr_dtor(&newvalue);",
          "542:       } else {",
          "543:        xReturn = XMLRPC_CreateValueBase64(key, Z_STRVAL_P(val), Z_STRLEN_P(val));",
          "544:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1451:   if (newvalue) {",
          "1452:    zval** val;",
          "1455:     if (zend_hash_find(Z_OBJPROP_P(value), OBJECT_VALUE_ATTR, sizeof(OBJECT_VALUE_ATTR), (void**) &val) == SUCCESS) {",
          "1457:     }",
          "",
          "[Removed Lines]",
          "1454:    if ((type == xmlrpc_base64 && Z_TYPE_P(value) != IS_NULL) || type == xmlrpc_datetime) {",
          "",
          "[Added Lines]",
          "1463:    if ((type == xmlrpc_base64 && Z_TYPE_P(value) == IS_OBJECT) || type == xmlrpc_datetime) {",
          "",
          "---------------"
        ],
        "sapi/fpm/fpm/fpm_log.c||sapi/fpm/fpm/fpm_log.c": [
          "File: sapi/fpm/fpm/fpm_log.c -> sapi/fpm/fpm/fpm_log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:     b += len2;",
          "449:     len += len2;",
          "450:    }",
          "451:    continue;",
          "452:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:    if (len >= FPM_LOG_BUFFER) {",
          "452:     zlog(ZLOG_NOTICE, \"the log buffer is full (%d). The access log request has been truncated.\", FPM_LOG_BUFFER);",
          "453:     len = FPM_LOG_BUFFER;",
          "454:     break;",
          "455:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}