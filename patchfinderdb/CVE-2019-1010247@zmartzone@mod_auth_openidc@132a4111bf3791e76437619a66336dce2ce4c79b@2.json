{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aca77a82c1ce2f1ec8f363066ffbc480b3bd75c8",
      "candidate_info": {
        "commit_hash": "aca77a82c1ce2f1ec8f363066ffbc480b3bd75c8",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/aca77a82c1ce2f1ec8f363066ffbc480b3bd75c8",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/proto.c"
        ],
        "message": "add sanity check on provider->auth_request_method; closes #382\n\nthanks @jdennis; bump to 2.3.8rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:   rv = oidc_proto_html_post(r, provider->authorization_endpoint_url,",
          "650:     params);",
          "655:   authorization_request = oidc_util_http_query_encoded_url(r,",
          "",
          "[Removed Lines]",
          "652:  } else {",
          "",
          "[Added Lines]",
          "652:  } else if (provider->auth_request_method == OIDC_AUTH_REQUEST_METHOD_GET) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "667:    rv = HTTP_MOVED_TEMPORARILY;",
          "668:   }",
          "669:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669:  } else {",
          "670:   oidc_error(r, \"provider->auth_request_method set to wrong value: %d\",",
          "671:     provider->auth_request_method);",
          "672:   return HTTP_INTERNAL_SERVER_ERROR;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "464283a78483dc9c33107a0484483887b85824cc",
      "candidate_info": {
        "commit_hash": "464283a78483dc9c33107a0484483887b85824cc",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/464283a78483dc9c33107a0484483887b85824cc",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/redis.c"
        ],
        "message": "2.3.6rc4: avoid using pipelining for Redis\n\npipelining appears to render unreliable results in case of errors\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.6rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: static redisReply* oidc_cache_redis_command(request_rec *r,",
          "241:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "242:  redisReply *reply = NULL;",
          "244:  int i = 0;",
          "",
          "[Removed Lines]",
          "239:   oidc_cache_cfg_redis_t *context, const char *format, ...) {",
          "243:  int rv = REDIS_ERR;",
          "",
          "[Added Lines]",
          "239:   oidc_cache_cfg_redis_t *context, const char *command) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:   rctx = oidc_cache_redis_connect(r, context);",
          "251:   if ((rctx == NULL) || (rctx->ctx == NULL))",
          "255:   if (context->passwd != NULL) {",
          "272:     oidc_error(r,",
          "273:       \"Redis AUTH command (attempt=%d to %s:%d) failed: '%s' [%s]\",",
          "274:       i, context->host_str, context->port, rctx->ctx->errstr,",
          "",
          "[Removed Lines]",
          "252:    continue;",
          "256:    redisAppendCommand(rctx->ctx,",
          "257:      apr_psprintf(r->pool, \"AUTH %s\", context->passwd));",
          "258:   }",
          "261:   va_list args;",
          "262:   va_start(args, format);",
          "263:   redisvAppendCommand(rctx->ctx, format, args);",
          "264:   va_end(args);",
          "266:   if (context->passwd != NULL) {",
          "268:    rv = redisGetReply(rctx->ctx, (void **) &reply);",
          "270:    if ((rv != REDIS_OK) || (reply == NULL)",
          "271:      || (reply->type == REDIS_REPLY_ERROR))",
          "",
          "[Added Lines]",
          "251:    break;",
          "255:    reply = redisCommand(rctx->ctx, \"AUTH %s\", context->passwd);",
          "256:    if ((reply == NULL) || (reply->type == REDIS_REPLY_ERROR))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:    oidc_cache_redis_reply_free(&reply);",
          "279:   }",
          "285:   if ((reply != NULL) && (reply->type != REDIS_REPLY_ERROR))",
          "",
          "[Removed Lines]",
          "282:   rv = redisGetReply(rctx->ctx, (void **) &reply);",
          "",
          "[Added Lines]",
          "267:   reply = redisCommand(rctx->ctx, command);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "319:   return FALSE;",
          "325:  if (reply == NULL)",
          "326:   goto end;",
          "",
          "[Removed Lines]",
          "322:  reply = oidc_cache_redis_command(r, context, \"GET %s\",",
          "323:    oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "[Added Lines]",
          "307:  reply = oidc_cache_redis_command(r, context,",
          "308:    apr_psprintf(r->pool, \"GET %s\",",
          "309:      oidc_cache_redis_get_key(r->pool, section, key)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "377:  if (value == NULL) {",
          "383:  } else {",
          "",
          "[Removed Lines]",
          "380:   reply = oidc_cache_redis_command(r, context, \"DEL %s\",",
          "381:     oidc_cache_redis_get_key(r->pool, section, key));",
          "",
          "[Added Lines]",
          "366:   reply = oidc_cache_redis_command(r, context,",
          "367:     apr_psprintf(r->pool, \"DEL %s\",",
          "368:       oidc_cache_redis_get_key(r->pool, section, key)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "386:   timeout = apr_time_sec(expiry - apr_time_now());",
          "393:  }",
          "",
          "[Removed Lines]",
          "389:   reply = oidc_cache_redis_command(r, context, \"SETEX %s %d %s\",",
          "390:     oidc_cache_redis_get_key(r->pool, section, key), timeout,",
          "391:     value);",
          "",
          "[Added Lines]",
          "376:   reply = oidc_cache_redis_command(r, context,",
          "377:     apr_psprintf(r->pool, \"SETEX %s %d %s\",",
          "378:       oidc_cache_redis_get_key(r->pool, section, key),",
          "379:       timeout, value));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21b451750cc41f7a2b1486840aab564f45028511",
      "candidate_info": {
        "commit_hash": "21b451750cc41f7a2b1486840aab564f45028511",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/21b451750cc41f7a2b1486840aab564f45028511",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/jose.c"
        ],
        "message": "release 2.3.8: fix return result FALSE when JWT payload parsing fails\n\nsee #389; thanks @amdonov\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:    &jwt->payload, err) == FALSE) {",
          "780:   oidc_jwt_destroy(jwt);",
          "782:  }",
          "784:  return TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "782:   return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2b62793e17ab04c59ef4d956253339c77a350aa",
      "candidate_info": {
        "commit_hash": "a2b62793e17ab04c59ef4d956253339c77a350aa",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/a2b62793e17ab04c59ef4d956253339c77a350aa",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c",
          "src/proto.c"
        ],
        "message": "use per-provider signing keys in private_key_jwt\n\nfor authentication towards token endpoint\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc13],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc14],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2733:  if (oidc_proto_token_endpoint_auth(r, c, provider->token_endpoint_auth,",
          "2734:    provider->client_id, provider->client_secret,",
          "2737:   goto out;",
          "",
          "[Removed Lines]",
          "2735:    provider->token_endpoint_url, params, NULL, &basic_auth,",
          "2736:    &bearer_auth) == FALSE)",
          "",
          "[Added Lines]",
          "2735:    provider->client_signing_keys, provider->token_endpoint_url, params,",
          "2736:    NULL, &basic_auth, &bearer_auth) == FALSE)",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "622: void oidc_proto_state_set_pkce_state(oidc_proto_state_t *proto_state, const char *pkce_state);",
          "623: void oidc_proto_state_set_timestamp_now(oidc_proto_state_t *proto_state);",
          "627: char *oidc_proto_peek_jwt_header(request_rec *r, const char *jwt, char **alg);",
          "628: int oidc_proto_authorization_request(request_rec *r, struct oidc_provider_t *provider, const char *login_hint, const char *redirect_uri, const char *state, oidc_proto_state_t *proto_state, const char *id_token_hint, const char *code_challenge, const char *auth_request_params, const char *path_scope);",
          "",
          "[Removed Lines]",
          "625: apr_byte_t oidc_proto_token_endpoint_auth(request_rec *r, oidc_cfg *cfg, const char *token_endpoint_auth, const char *client_id, const char *client_secret, const char *audience, apr_table_t *params, const char *bearer_access_token, char **basic_auth_str, char **bearer_auth_str);",
          "",
          "[Added Lines]",
          "625: apr_byte_t oidc_proto_token_endpoint_auth(request_rec *r, oidc_cfg *cfg, const char *token_endpoint_auth, const char *client_id, const char *client_secret, apr_hash_t *client_signing_keys, const char *audience, apr_table_t *params, const char *bearer_access_token, char **basic_auth_str, char **bearer_auth_str);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:  if (oidc_proto_token_endpoint_auth(r, c,",
          "170:    c->oauth.introspection_endpoint_auth, c->oauth.client_id,",
          "173:   return FALSE;",
          "",
          "[Removed Lines]",
          "171:    c->oauth.client_secret, c->oauth.introspection_endpoint_url, params,",
          "172:    bearer_access_token_auth, &basic_auth, &bearer_auth) == FALSE)",
          "",
          "[Added Lines]",
          "171:    c->oauth.client_secret, NULL, c->oauth.introspection_endpoint_url,",
          "172:    params, bearer_access_token_auth, &basic_auth,",
          "173:    &bearer_auth) == FALSE)",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1853: #define OIDC_PROTO_JWT_ASSERTION_ASYMMETRIC_ALG CJOSE_HDR_ALG_RS256",
          "1855: static apr_byte_t oidc_proto_endpoint_auth_private_key_jwt(request_rec *r,",
          "1858:  oidc_jwt_t *jwt = NULL;",
          "1859:  oidc_jwk_t *jwk = NULL;",
          "1861:  oidc_debug(r, \"enter\");",
          "1863:  if (oidc_proto_jwt_create(r, client_id, audience, &jwt) == FALSE)",
          "1864:   return FALSE;",
          "1868:   oidc_error(r,",
          "1869:     \"no private keys have been configured to use for private_key_jwt client authentication (\" OIDCPrivateKeyFiles \")\");",
          "1870:   oidc_jwt_destroy(jwt);",
          "",
          "[Removed Lines]",
          "1856:   oidc_cfg *cfg, const char *client_id, const char *audience,",
          "1857:   apr_table_t *params) {",
          "1867:  if (cfg->private_keys == NULL) {",
          "",
          "[Added Lines]",
          "1856:   oidc_cfg *cfg, const char *client_id, apr_hash_t *client_signing_keys,",
          "1857:   const char *audience, apr_table_t *params) {",
          "1860:  apr_hash_t *signing_keys = NULL;",
          "1867:  if ((client_signing_keys != NULL)",
          "1868:    && (apr_hash_count(client_signing_keys) > 0)) {",
          "1869:   signing_keys = client_signing_keys;",
          "1870:  } else if ((cfg->private_keys != NULL)",
          "1871:    && (apr_hash_count(client_signing_keys) > 0)) {",
          "1872:   signing_keys = cfg->private_keys;",
          "1873:  } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1872:  }",
          "1874:  apr_ssize_t klen = 0;",
          "1876:  apr_hash_this(hi, (const void **) &jwt->header.kid, &klen, (void **) &jwk);",
          "1878:  jwt->header.alg = apr_pstrdup(r->pool, CJOSE_HDR_ALG_RS256);",
          "",
          "[Removed Lines]",
          "1875:  apr_hash_index_t *hi = apr_hash_first(r->pool, cfg->private_keys);",
          "",
          "[Added Lines]",
          "1881:  apr_hash_index_t *hi = apr_hash_first(r->pool, signing_keys);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1887: apr_byte_t oidc_proto_token_endpoint_auth(request_rec *r, oidc_cfg *cfg,",
          "1888:   const char *token_endpoint_auth, const char *client_id,",
          "1890:   const char *bearer_access_token, char **basic_auth_str,",
          "1891:   char **bearer_auth_str) {",
          "",
          "[Removed Lines]",
          "1889:   const char *client_secret, const char *audience, apr_table_t *params,",
          "",
          "[Added Lines]",
          "1895:   const char *client_secret, apr_hash_t *client_signing_keys,",
          "1896:   const char *audience, apr_table_t *params,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1933:  if (apr_strnatcmp(token_endpoint_auth,",
          "1934:    OIDC_PROTO_PRIVATE_KEY_JWT) == 0)",
          "1935:   return oidc_proto_endpoint_auth_private_key_jwt(r, cfg, client_id,",
          "1938:  if (apr_strnatcmp(token_endpoint_auth,",
          "1939:    OIDC_PROTO_BEARER_ACCESS_TOKEN) == 0) {",
          "",
          "[Removed Lines]",
          "1936:     audience, params);",
          "",
          "[Added Lines]",
          "1943:     client_signing_keys, audience, params);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1962:  if (oidc_proto_token_endpoint_auth(r, cfg, provider->token_endpoint_auth,",
          "1963:    provider->client_id, provider->client_secret,",
          "1965:    NULL, &basic_auth, &bearer_auth) == FALSE)",
          "1966:   return FALSE;",
          "",
          "[Removed Lines]",
          "1964:    provider->token_endpoint_url, params,",
          "",
          "[Added Lines]",
          "1971:    provider->client_signing_keys, provider->token_endpoint_url, params,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "365cd73bd65c6561108852a31baec0e9dc07cd25",
      "candidate_info": {
        "commit_hash": "365cd73bd65c6561108852a31baec0e9dc07cd25",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/365cd73bd65c6561108852a31baec0e9dc07cd25",
        "files": [
          "Makefile.in",
          "configure.ac",
          "src/cache/cache.h",
          "src/config.c",
          "src/mod_auth_openidc.h",
          "src/parse.c"
        ],
        "message": "support conditional compilation of memcache support\n\nsupport versions of libapr<1.3 and check for apr_memcache.h availability\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "configure.ac||configure.ac",
          "src/cache/cache.h||src/cache/cache.h",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Source files. mod_auth_openidc.c must be the first file.",
          "2: SRC=src/mod_auth_openidc.c \\",
          "3:  src/cache/file.c \\",
          "5:  src/cache/shm.c \\",
          "6:  src/cache/common.c \\",
          "7:  src/oauth.c \\",
          "",
          "[Removed Lines]",
          "4:  src/cache/memcache.c \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:  src/metadata.c \\",
          "14:  src/jose.c \\",
          "15:  src/parse.c \\",
          "18: ifeq (@HAVE_LIBHIREDIS@, 1)",
          "19: SRC += \\",
          "",
          "[Removed Lines]",
          "16:  src/pcre_subst.c \\",
          "",
          "[Added Lines]",
          "15:  src/pcre_subst.c",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "22: REDIS_LIBS=@HIREDIS_LIBS@",
          "23: endif",
          "25: ifeq (@HAVE_LIBJQ@, 1)",
          "26: JQ_CFLAGS=-DUSE_LIBJQ @JQ_CFLAGS@",
          "27: JQ_LIBS=@JQ_LIBS@",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: ifeq (@HAVE_MEMCACHE@, 1)",
          "25: REDIS_CFLAGS+=-DUSE_MEMCACHE",
          "26: SRC += \\",
          "27:  src/cache/memcache.c",
          "28: endif",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.11rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: AC_SUBST(APR_CFLAGS)",
          "58: AC_SUBST(APR_LIBS)",
          "60: # We need Jansson for JSON parsing.",
          "61: PKG_CHECK_MODULES(JANSSON, jansson)",
          "62: AC_SUBST(JANSSON_CFLAGS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: # older versions of libapr may not have memcache support",
          "61: old_CPPFLAGS=$CPPFLAGS",
          "62: CPPFLAGS=\"${APR_CFLAGS} $CPPFLAGS\"",
          "63: AC_CHECK_HEADERS([apr_memcache.h], [HAVE_MEMCACHE=1], [HAVE_MEMCACHE=0])",
          "64: AC_SUBST(HAVE_MEMCACHE)",
          "65: CPPFLAGS=$old_CPPFLAGS",
          "",
          "---------------"
        ],
        "src/cache/cache.h||src/cache/cache.h": [
          "File: src/cache/cache.h -> src/cache/cache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: #define oidc_cache_set_sid(r, key, value, expiry) oidc_cache_set(r, OIDC_CACHE_SECTION_SID, key, value, expiry)",
          "134: extern oidc_cache_t oidc_cache_file;",
          "136: extern oidc_cache_t oidc_cache_shm;",
          "138: #ifdef USE_LIBHIREDIS",
          "139: extern oidc_cache_t oidc_cache_redis;",
          "140: #endif",
          "",
          "[Removed Lines]",
          "135: extern oidc_cache_t oidc_cache_memcache;",
          "",
          "[Added Lines]",
          "137: #ifdef USE_MEMCACHE",
          "138: extern oidc_cache_t oidc_cache_memcache;",
          "139: #endif",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1154:  c->cache_file_dir = NULL;",
          "1155:  c->cache_file_clean_interval = OIDC_DEFAULT_CACHE_FILE_CLEAN_INTERVAL;",
          "1156:  c->cache_memcache_servers = NULL;",
          "1157:  c->cache_shm_size_max = OIDC_DEFAULT_CACHE_SHM_SIZE;",
          "1158:  c->cache_shm_entry_size_max = OIDC_DEFAULT_CACHE_SHM_ENTRY_SIZE_MAX;",
          "1159: #ifdef USE_LIBHIREDIS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1156: #ifdef USE_MEMCACHE",
          "1158: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1533:      add->cache_file_clean_interval :",
          "1534:      base->cache_file_clean_interval;",
          "1536:  c->cache_memcache_servers =",
          "1537:    add->cache_memcache_servers != NULL ?",
          "1538:      add->cache_memcache_servers : base->cache_memcache_servers;",
          "1539:  c->cache_shm_size_max =",
          "1540:    add->cache_shm_size_max != OIDC_DEFAULT_CACHE_SHM_SIZE ?",
          "1541:      add->cache_shm_size_max : base->cache_shm_size_max;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1538: #ifdef USE_MEMCACHE",
          "1542: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2196:  }",
          "2198:  ap_log_error(APLOG_MARK, APLOG_INFO, 0, s,",
          "2203:    OIDC_JOSE_EC_SUPPORT ? \"yes\" : \"no\",",
          "2205: #ifdef USE_LIBHIREDIS",
          "2207: #else",
          "2209: #endif",
          "2211: #ifdef USE_LIBJQ",
          "2213: #else",
          "2215: #endif",
          "2216:  );",
          "",
          "[Removed Lines]",
          "2199:    \"%s - init - cjose %s, %s, EC=%s, GCM=%s, Redis=%s, JQ=%s\",",
          "2200:    NAMEVERSION,",
          "2201:    cjose_version(),",
          "2202:    OPENSSL_VERSION_TEXT,",
          "2204:    OIDC_JOSE_GCM_SUPPORT ? \"yes\" : \"no\",",
          "2206:    \"yes\"",
          "2208:    \"no\"",
          "2210:    ,",
          "2212:    \"yes\"",
          "2214:    \"no\"",
          "",
          "[Added Lines]",
          "2203:    \"%s - init - cjose %s, %s, EC=%s, GCM=%s, Memcache=%s, Redis=%s, JQ=%s\",",
          "2204:    NAMEVERSION, cjose_version(), OPENSSL_VERSION_TEXT,",
          "2206:      OIDC_JOSE_GCM_SUPPORT ? \"yes\" : \"no\",",
          "2207: #ifdef USE_MEMCACHE",
          "2208:        \"yes\"",
          "2209: #else",
          "2210:        \"no\"",
          "2211: #endif",
          "2212:        ,",
          "2214:        \"yes\"",
          "2216:        \"no\"",
          "2218:        ,",
          "2220:        \"yes\"",
          "2222:        \"no\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2280: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2281: static const authz_provider oidc_authz_claim_provider = {",
          "2282:   &oidc_authz_checker_claim,",
          "2286: #ifdef USE_LIBJQ",
          "2287: static const authz_provider oidc_authz_claims_expr_provider = {",
          "",
          "[Removed Lines]",
          "2283:   NULL,",
          "2284: };",
          "",
          "[Added Lines]",
          "2291:   NULL, };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2784:     (void*)APR_OFFSETOF(oidc_cfg, cache_file_clean_interval),",
          "2785:     RSRC_CONF,",
          "2786:     \"Cache file clean interval in seconds.\"),",
          "2787:   AP_INIT_TAKE1(OIDCMemCacheServers,",
          "2788:     oidc_set_string_slot,",
          "2789:     (void*)APR_OFFSETOF(oidc_cfg, cache_memcache_servers),",
          "2790:     RSRC_CONF,",
          "2791:     \"Memcache servers used for caching (space separated list of <hostname>[:<port>] tuples)\"),",
          "2792:   AP_INIT_TAKE1(OIDCCacheShmMax,",
          "2793:     oidc_set_int_slot,",
          "2794:     (void*)APR_OFFSETOF(oidc_cfg, cache_shm_size_max),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2794: #ifdef USE_MEMCACHE",
          "2800: #endif",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:  char *cache_file_dir;",
          "369:  int cache_file_clean_interval;",
          "371:  char *cache_memcache_servers;",
          "373:  int cache_shm_size_max;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370: #ifdef USE_MEMCACHE",
          "373: #endif",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   oidc_cache_t **type) {",
          "275:  static char *options[] = {",
          "276:    OIDC_CACHE_TYPE_SHM,",
          "277:    OIDC_CACHE_TYPE_MEMCACHE,",
          "278: #ifdef USE_LIBHIREDIS",
          "279:    OIDC_CACHE_TYPE_REDIS,",
          "280: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #ifdef USE_MEMCACHE",
          "279: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:  if (apr_strnatcmp(arg, OIDC_CACHE_TYPE_SHM) == 0) {",
          "289:  } else if (apr_strnatcmp(arg, OIDC_CACHE_TYPE_MEMCACHE) == 0) {",
          "291:  } else if (apr_strnatcmp(arg, OIDC_CACHE_TYPE_FILE) == 0) {",
          "293: #ifdef USE_LIBHIREDIS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291: #ifdef USE_MEMCACHE",
          "294: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}