{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "709e935239764dac5a121d47bd4a05c70e121bcb",
      "candidate_info": {
        "commit_hash": "709e935239764dac5a121d47bd4a05c70e121bcb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/709e935239764dac5a121d47bd4a05c70e121bcb",
        "files": [
          "deps/openssl/openssl/crypto/cryptlib.c"
        ],
        "message": "openssl: use dummy OPENSSL_cpuid_setup function\n\nUse a empty implementation for function OPENSSL_cpuid_setup to resolve link\nerror. We should figure out how to geenrate platform specific implementation\nof OPENSSL_cpuid_setup by leveraging crypto/*cpuid.pl.\n\nThis patch is taken from Chromium.",
        "before_after_code_files": [
          "deps/openssl/openssl/crypto/cryptlib.c||deps/openssl/openssl/crypto/cryptlib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/openssl/openssl/crypto/cryptlib.c||deps/openssl/openssl/crypto/cryptlib.c": [
          "File: deps/openssl/openssl/crypto/cryptlib.c -> deps/openssl/openssl/crypto/cryptlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "718: unsigned long *OPENSSL_ia32cap_loc(void) { return NULL; }",
          "719: #endif",
          "720: int OPENSSL_NONPIC_relocated = 0;",
          "722: void OPENSSL_cpuid_setup(void) {}",
          "723: #endif",
          "",
          "[Removed Lines]",
          "721: #if !defined(OPENSSL_CPUID_SETUP) && !defined(OPENSSL_CPUID_OBJ)",
          "",
          "[Added Lines]",
          "721: #if !defined(OPENSSL_CPUID_SETUP)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c47219a72fcf58c639ccb37ddf6b01b2261e793",
      "candidate_info": {
        "commit_hash": "0c47219a72fcf58c639ccb37ddf6b01b2261e793",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0c47219a72fcf58c639ccb37ddf6b01b2261e793",
        "files": [
          "lib/timers.js",
          "test/simple/test-timers.js"
        ],
        "message": "timers: fix handling of large timeouts\n\nDon't use the double-negate trick to coalesce the timeout argument into a\nnumber, it produces the wrong result for very large timeouts.\n\nExample:\n\n    setTimeout(cb, 1e10); // doesn't work, ~~1e10 == 1410065408",
        "before_after_code_files": [
          "lib/timers.js||litimers.js",
          "test/simple/test-timers.js||test/simple/test-timers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/timers.js||litimers.js": [
          "File: lib/timers.js -> litimers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: exports.setTimeout = function(callback, after) {",
          "171:   var timer;",
          "175:     after = 1; // schedule on next tick, follows browser behaviour",
          "176:   }",
          "",
          "[Removed Lines]",
          "173:   after = ~~after;",
          "174:   if (after < 1 || after > TIMEOUT_MAX) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "223:   if (process.domain) timer.domain = process.domain;",
          "227:     repeat = 1; // schedule on next tick, follows browser behaviour",
          "228:   }",
          "",
          "[Removed Lines]",
          "225:   repeat = ~~repeat;",
          "226:   if (repeat < 1 || repeat > TIMEOUT_MAX) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-timers.js||test/simple/test-timers.js": [
          "File: test/simple/test-timers.js -> test/simple/test-timers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   1,",
          "46:   1.0,",
          "47:   10,",
          "49: ];",
          "51: var timeouts = [];",
          "",
          "[Removed Lines]",
          "48:   2147483648 // browser behaviour: timeouts > 2^31-1 run on next tick",
          "",
          "[Added Lines]",
          "48:   2147483648,     // browser behaviour: timeouts > 2^31-1 run on next tick",
          "49:   12345678901234  // ditto",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef1ffcb717aa16549eb4380badb9709aca3aeb46",
      "candidate_info": {
        "commit_hash": "ef1ffcb717aa16549eb4380badb9709aca3aeb46",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ef1ffcb717aa16549eb4380badb9709aca3aeb46",
        "files": [
          "lib/fs.js",
          "src/node_stat_watcher.cc",
          "src/node_stat_watcher.h"
        ],
        "message": "fs: make fs.watchFile() interval default to 5007",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "src/node_stat_watcher.cc||src/node_stat_watcher.cc",
          "src/node_stat_watcher.h||src/node_stat_watcher.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "913: fs.watchFile = function(filename) {",
          "914:   var stat;",
          "916:   var listener;",
          "918:   if ('object' == typeof arguments[1]) {",
          "920:     listener = arguments[2];",
          "921:   } else {",
          "923:     listener = arguments[1];",
          "924:   }",
          "",
          "[Removed Lines]",
          "915:   var options;",
          "919:     options = arguments[1];",
          "922:     options = {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "927:     throw new Error('watchFile requires a listener function');",
          "928:   }",
          "933:   if (inStatWatchers(filename)) {",
          "934:     stat = statWatchers[filename];",
          "935:   } else {",
          "",
          "[Removed Lines]",
          "930:   if (options.persistent === undefined) options.persistent = true;",
          "931:   if (options.interval === undefined) options.interval = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_stat_watcher.cc||src/node_stat_watcher.cc": [
          "File: src/node_stat_watcher.cc -> src/node_stat_watcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <string.h>",
          "26: #include <stdlib.h>",
          "33: namespace node {",
          "35: using namespace v8;",
          "",
          "[Removed Lines]",
          "31: #define DEFAULT_POLL_INTERVAL 5007",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: Handle<Value> StatWatcher::New(const Arguments& args) {",
          "83:   HandleScope scope;",
          "84:   StatWatcher* s = new StatWatcher();",
          "85:   s->Wrap(args.Holder());",
          "",
          "[Removed Lines]",
          "79:   if (!args.IsConstructCall()) {",
          "80:     return FromConstructorTemplate(constructor_template, args);",
          "81:   }",
          "",
          "[Added Lines]",
          "74:   assert(args.IsConstructCall());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90: Handle<Value> StatWatcher::Start(const Arguments& args) {",
          "91:   HandleScope scope;",
          "97:   StatWatcher* wrap = ObjectWrap::Unwrap<StatWatcher>(args.Holder());",
          "98:   String::Utf8Value path(args[0]);",
          "105:   uv_fs_poll_start(&wrap->watcher_, Callback, *path, interval);",
          "113:   wrap->Ref();",
          "115:   return Undefined();",
          "",
          "[Removed Lines]",
          "93:   if (args.Length() < 1 || !args[0]->IsString()) {",
          "94:     return ThrowException(Exception::TypeError(String::New(\"Bad arguments\")));",
          "95:   }",
          "100:   uint32_t interval = DEFAULT_POLL_INTERVAL;",
          "101:   if (args[2]->IsUint32()) {",
          "102:     interval = args[2]->Uint32Value();",
          "103:   }",
          "107:   wrap->persistent_ = args[1]->IsTrue();",
          "109:   if (!wrap->persistent_) {",
          "110:     uv_unref(reinterpret_cast<uv_handle_t*>(&wrap->watcher_));",
          "111:   }",
          "",
          "[Added Lines]",
          "83:   assert(args.Length() == 3);",
          "88:   const bool persistent = args[1]->BooleanValue();",
          "89:   const uint32_t interval = args[2]->Uint32Value();",
          "91:   if (!persistent) uv_unref(reinterpret_cast<uv_handle_t*>(&wrap->watcher_));",
          "",
          "---------------"
        ],
        "src/node_stat_watcher.h||src/node_stat_watcher.h": [
          "File: src/node_stat_watcher.h -> src/node_stat_watcher.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   static v8::Persistent<v8::FunctionTemplate> constructor_template;",
          "37:   StatWatcher() : ObjectWrap() {",
          "39:     uv_fs_poll_init(uv_default_loop(), &watcher_);",
          "40:   }",
          "",
          "[Removed Lines]",
          "38:     persistent_ = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:                        int status,",
          "53:                        const uv_statbuf_t* prev,",
          "54:                        const uv_statbuf_t* curr);",
          "56:   void Stop();",
          "58:   uv_fs_poll_t watcher_;",
          "60: };",
          "62: }  // namespace node",
          "",
          "[Removed Lines]",
          "59:   bool persistent_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5fca08da45feb6e28c19a0ff2cfd819edf9238c",
      "candidate_info": {
        "commit_hash": "d5fca08da45feb6e28c19a0ff2cfd819edf9238c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d5fca08da45feb6e28c19a0ff2cfd819edf9238c",
        "files": [
          "benchmark/client_latency.js"
        ],
        "message": "A benchmark script for measuring client latency",
        "before_after_code_files": [
          "benchmark/client_latency.js||benchmark/client_latency.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/client_latency.js||benchmark/client_latency.js": [
          "File: benchmark/client_latency.js -> benchmark/client_latency.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: var http = require('http');",
          "4: var latency = [];",
          "6: var numRequests = parseInt(process.argv[2], 10) || 100;",
          "7: var maxSockets = parseInt(process.argv[3], 10) || 100;",
          "8: var runs = parseInt(process.argv[4], 10) || 100;",
          "9: var prefix = process.argv[5] || '';",
          "10: if (prefix) prefix += '_';",
          "11: var request = require('request');",
          "12: var r = 0;",
          "14: var port = parseInt(process.env.PORT, 10) || 8000;",
          "15: var host = process.env.HOST || '127.0.0.1';",
          "17: http.globalAgent.maxSockets = maxSockets;",
          "19: run();",
          "21: function run() {",
          "22:   if (r++ === runs) {",
          "23:     return finish();",
          "24:   }",
          "32:   var c = numRequests;",
          "33:   var lat = [];",
          "34:   latency.push(lat);",
          "35:   for (var i = 0; i < numRequests; i++) (function (i) {",
          "36:     makeRequest(function(l) {",
          "37:       lat[i] = l;",
          "38:       c--;",
          "39:       if (c === 0) run();",
          "40:     });",
          "41:   })(i);",
          "42: }",
          "44: function makeRequest(cb) {",
          "45:   var opts = { host: host,",
          "46:                port: port,",
          "47:                uri: 'http://'+host+':'+port+'/bytes/12',",
          "48:                forever: true,",
          "49:                path: '/bytes/12' };",
          "50:   var pre = Date.now();",
          "51:   var req = http.get(opts, function(res) {",
          "52:     return cb(Date.now() - pre);",
          "53:   });",
          "54: }",
          "56: function finish() {",
          "57:   var data = [];",
          "58:   latency.forEach(function(run, i) {",
          "59:     run.forEach(function(l, j) {",
          "60:       data[j] = data[j] || [];",
          "61:       data[j][i] = l;",
          "62:     });",
          "63:   });",
          "65:   data = data.map(function (l, i) {",
          "66:     return l.join('\\t')",
          "67:   }).join('\\n') + '\\n';",
          "69:   var fname = prefix +",
          "70:               'client_latency_' +",
          "71:               numRequests + '_' +",
          "72:               maxSockets + '_' +",
          "73:               runs + '.tab';",
          "74:   var path = require('path');",
          "75:   fname = path.resolve(__dirname, '..', 'out', fname);",
          "76:   fname = path.relative(process.cwd(), fname);",
          "77:   require('fs').writeFile(fname, data, function(er) {",
          "78:     if (er) throw er;",
          "79:     console.log('written: %s', fname);",
          "80:   });",
          "81: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48d52d85c3e26e91e6e8f084f89af0a7c3f3ec65",
      "candidate_info": {
        "commit_hash": "48d52d85c3e26e91e6e8f084f89af0a7c3f3ec65",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/48d52d85c3e26e91e6e8f084f89af0a7c3f3ec65",
        "files": [
          "lib/http.js",
          "test/simple/test-https-timeout.js"
        ],
        "message": "http, https: fix .setTimeout()\n\nFixes #3107.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "test/simple/test-https-timeout.js||test/simple/test-https-timeout.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1272:       }",
          "1273:       socket.destroy();",
          "1274:     }",
          "1275:     socket.on('error', errorListener);",
          "1277:     socket.ondata = function(d, start, end) {",
          "1278:       var ret = parser.execute(d, start, end - start);",
          "1279:       if (ret instanceof Error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1302:           socket.emit('agentRemove');",
          "1303:           socket.removeListener('close', closeListener);",
          "1304:           socket.removeListener('error', errorListener);",
          "1306:           req.emit(eventName, res, socket, bodyHead);",
          "1307:           req.emit('close');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1409:         if (req.shouldKeepAlive) {",
          "1410:           socket.removeListener('close', closeListener);",
          "1411:           socket.removeListener('error', errorListener);",
          "1412:           socket.emit('free');",
          "1413:         }",
          "1414:       });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-https-timeout.js||test/simple/test-https-timeout.js": [
          "File: test/simple/test-https-timeout.js -> test/simple/test-https-timeout.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: if (!process.versions.openssl) {",
          "23:   console.error('Skipping because node compiled without OpenSSL.');",
          "24:   process.exit(0);",
          "25: }",
          "27: var common = require('../common');",
          "28: var assert = require('assert');",
          "30: var fs = require('fs');",
          "31: var exec = require('child_process').exec;",
          "33: var https = require('https');",
          "35: var options = {",
          "36:   key: fs.readFileSync(common.fixturesDir + '/keys/agent1-key.pem'),",
          "37:   cert: fs.readFileSync(common.fixturesDir + '/keys/agent1-cert.pem')",
          "38: };",
          "41: var server = https.createServer(options, function() {",
          "42:   console.log('Got request.  Doing nothing.');",
          "43: }).listen(common.PORT);",
          "45: var req = https.request({",
          "46:   host: 'localhost',",
          "47:   port: common.PORT,",
          "48:   path: '/',",
          "49:   method: 'GET'",
          "50: });",
          "51: req.end();",
          "52: req.on('response', function(res) {",
          "53:   console.log('got response');",
          "54: });",
          "56: req.on('socket', function() {",
          "57:   console.log('got a socket');",
          "59:   req.socket.on('connect', function() {",
          "60:     console.log('socket connected');",
          "61:   });",
          "63:   setTimeout(function() {",
          "64:     throw new Error('Did not get timeout event');",
          "65:   }, 200);",
          "66: });",
          "68: req.setTimeout(10);",
          "70: req.on('timeout', function() {",
          "71:   console.log('timeout occurred outside');",
          "72:   req.destroy();",
          "73:   server.close();",
          "74:   process.exit(0);",
          "75: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}