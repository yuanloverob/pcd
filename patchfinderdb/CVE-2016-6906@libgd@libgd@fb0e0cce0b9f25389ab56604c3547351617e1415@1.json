{
  "cve_id": "CVE-2016-6906",
  "cve_desc": "The read_image_tga function in gd_tga.c in the GD Graphics Library (aka libgd) before 2.2.4 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted TGA file, related to the decompression buffer.",
  "repo": "libgd/libgd",
  "patch_hash": "fb0e0cce0b9f25389ab56604c3547351617e1415",
  "patch_info": {
    "commit_hash": "fb0e0cce0b9f25389ab56604c3547351617e1415",
    "repo": "libgd/libgd",
    "commit_url": "https://github.com/libgd/libgd/commit/fb0e0cce0b9f25389ab56604c3547351617e1415",
    "files": [
      "src/gd_tga.c",
      "tests/tga/.gitignore",
      "tests/tga/CMakeLists.txt",
      "tests/tga/Makemodule.am",
      "tests/tga/heap_overflow.c",
      "tests/tga/heap_overflow.tga"
    ],
    "message": "Fix OOB reads of the TGA decompression buffer\n\nIt is possible to craft TGA files which will overflow the decompression\nbuffer, but not the image's bitmap. Therefore we augment the check for the\nbitmap's overflow with a check for the buffer's overflow.\n\nThis issue had been reported by Ibrahim El-Sayed to security@libgd.org.\n\nCVE-2016-6906",
    "before_after_code_files": [
      "src/gd_tga.c||src/gd_tga.c",
      "tests/tga/Makemodule.am||tests/tga/Makemodule.am",
      "tests/tga/heap_overflow.c||tests/tga/heap_overflow.c"
    ]
  },
  "patch_diff": {
    "src/gd_tga.c||src/gd_tga.c": [
      "File: src/gd_tga.c -> src/gd_tga.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "300:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & ~TGA_RLE_FLAG ) + 1 );",
      "301:     buffer_caret++;",
      "304:      gdFree( decompression_buffer );",
      "305:      gdFree( conversion_buffer );",
      "306:      return -1;",
      "",
      "[Removed Lines]",
      "303:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size) {",
      "",
      "[Added Lines]",
      "303:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size",
      "304:       || buffer_caret + pixel_block_size > rle_size) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "316:     encoded_pixels = decompression_buffer[ buffer_caret ] + 1;",
      "317:     buffer_caret++;",
      "320:      gdFree( decompression_buffer );",
      "321:      gdFree( conversion_buffer );",
      "322:      return -1;",
      "",
      "[Removed Lines]",
      "319:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size) {",
      "",
      "[Added Lines]",
      "320:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size",
      "321:       || buffer_caret + (encoded_pixels * pixel_block_size) > rle_size) {",
      "",
      "---------------"
    ],
    "tests/tga/Makemodule.am||tests/tga/Makemodule.am": [
      "File: tests/tga/Makemodule.am -> tests/tga/Makemodule.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  tga/bug00247a \\",
      "5:  tga/bug00248 \\",
      "6:  tga/bug00248a \\",
      "7:  tga/tga_null \\",
      "8:  tga/tga_read",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7:  tga/heap_overflow \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14:  tga/bug00247a.tga \\",
      "15:  tga/bug00248.tga \\",
      "16:  tga/bug00248a.tga \\",
      "17:  tga/tga_read_rgb.png \\",
      "18:  tga/tga_read_rgb.tga \\",
      "19:  tga/tga_read_rgb_rle.tga",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:  tga/heap_overflow.tga \\",
      "",
      "---------------"
    ],
    "tests/tga/heap_overflow.c||tests/tga/heap_overflow.c": [
      "File: tests/tga/heap_overflow.c -> tests/tga/heap_overflow.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include \"gd.h\"",
      "7: #include \"gdtest.h\"",
      "10: static size_t read_test_file(char **buffer, char *basename);",
      "13: int main()",
      "14: {",
      "15:     gdImagePtr im;",
      "16:     char *buffer;",
      "17:     size_t size;",
      "19:     size = read_test_file(&buffer, \"heap_overflow.tga\");",
      "20:     im = gdImageCreateFromTgaPtr(size, (void *) buffer);",
      "21:     gdTestAssert(im == NULL);",
      "22:     free(buffer);",
      "24:     return gdNumFailures();",
      "25: }",
      "28: static size_t read_test_file(char **buffer, char *basename)",
      "29: {",
      "30:     char *filename;",
      "31:     FILE *fp;",
      "32:     size_t exp_size, act_size;",
      "34:     filename = gdTestFilePath2(\"tga\", basename);",
      "35:     fp = fopen(filename, \"rb\");",
      "36:     gdTestAssert(fp != NULL);",
      "38:  fseek(fp, 0, SEEK_END);",
      "39:  exp_size = ftell(fp);",
      "40:  fseek(fp, 0, SEEK_SET);",
      "43:     gdTestAssert(*buffer != NULL);",
      "44:     act_size = fread(*buffer, sizeof(**buffer), exp_size, fp);",
      "45:     gdTestAssert(act_size == exp_size);",
      "47:     fclose(fp);",
      "48:     free(filename);",
      "50:     return act_size;",
      "51: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "79650b1392738a3f119eb0ea1dcf2073826a59fd",
      "candidate_info": {
        "commit_hash": "79650b1392738a3f119eb0ea1dcf2073826a59fd",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/79650b1392738a3f119eb0ea1dcf2073826a59fd",
        "files": [
          "src/gd_tga.c",
          "tests/tga/Makemodule.am",
          "tests/tga/heap_overflow.c",
          "tests/tga/heap_overflow_1.tga",
          "tests/tga/heap_overflow_2.tga"
        ],
        "message": "Fix OOB reads of the TGA decompression buffer\n\nIt is possible to craft TGA files which will overflow the decompression\nbuffer, but not the image's bitmap. Therefore we also have to check for\npotential decompression buffer overflows.\n\nThis issue had been reported by Ibrahim El-Sayed to security@libgd.org;\na modified case exposing an off-by-one error of the first patch had been\nprovided by Konrad Beckmann.\n\nThis commit is an amendment to commit fb0e0cce, so we use CVE-2016-6906\nas well.",
        "before_after_code_files": [
          "src/gd_tga.c||src/gd_tga.c",
          "tests/tga/Makemodule.am||tests/tga/Makemodule.am",
          "tests/tga/heap_overflow.c||tests/tga/heap_overflow.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_tga.c||src/gd_tga.c",
            "tests/tga/Makemodule.am||tests/tga/Makemodule.am",
            "tests/tga/heap_overflow.c||tests/tga/heap_overflow.c"
          ],
          "candidate": [
            "src/gd_tga.c||src/gd_tga.c",
            "tests/tga/Makemodule.am||tests/tga/Makemodule.am",
            "tests/tga/heap_overflow.c||tests/tga/heap_overflow.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_tga.c||src/gd_tga.c": [
          "File: src/gd_tga.c -> src/gd_tga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   buffer_caret = 0;",
          "297:   while( bitmap_caret < image_block_size ) {",
          "299:    if ((decompression_buffer[buffer_caret] & TGA_RLE_FLAG) == TGA_RLE_FLAG) {",
          "300:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & ~TGA_RLE_FLAG ) + 1 );",
          "301:     buffer_caret++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:    if (buffer_caret + pixel_block_size > rle_size) {",
          "300:     gdFree( decompression_buffer );",
          "301:     gdFree( conversion_buffer );",
          "302:     return -1;",
          "303:    }",
          "",
          "---------------"
        ],
        "tests/tga/Makemodule.am||tests/tga/Makemodule.am": [
          "File: tests/tga/Makemodule.am -> tests/tga/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  tga/bug00247a.tga \\",
          "16:  tga/bug00248.tga \\",
          "17:  tga/bug00248a.tga \\",
          "19:  tga/tga_read_rgb.png \\",
          "20:  tga/tga_read_rgb.tga \\",
          "21:  tga/tga_read_rgb_rle.tga",
          "",
          "[Removed Lines]",
          "18:  tga/heap_overflow.tga \\",
          "",
          "[Added Lines]",
          "18:  tga/heap_overflow_1.tga \\",
          "19:  tga/heap_overflow_2.tga \\",
          "",
          "---------------"
        ],
        "tests/tga/heap_overflow.c||tests/tga/heap_overflow.c": [
          "File: tests/tga/heap_overflow.c -> tests/tga/heap_overflow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"gdtest.h\"",
          "10: static size_t read_test_file(char **buffer, char *basename);",
          "13: int main()",
          "14: {",
          "15:     gdImagePtr im;",
          "16:     char *buffer;",
          "17:     size_t size;",
          "20:     im = gdImageCreateFromTgaPtr(size, (void *) buffer);",
          "21:     gdTestAssert(im == NULL);",
          "22:     free(buffer);",
          "25: }",
          "",
          "[Removed Lines]",
          "19:     size = read_test_file(&buffer, \"heap_overflow.tga\");",
          "24:     return gdNumFailures();",
          "",
          "[Added Lines]",
          "10: static void check_file(char *basename);",
          "15: {",
          "16:     check_file(\"heap_overflow_1.tga\");",
          "17:     check_file(\"heap_overflow_2.tga\");",
          "19:     return gdNumFailures();",
          "20: }",
          "23: static void check_file(char *basename)",
          "29:     size = read_test_file(&buffer, basename);",
          "",
          "---------------"
        ]
      }
    }
  ]
}