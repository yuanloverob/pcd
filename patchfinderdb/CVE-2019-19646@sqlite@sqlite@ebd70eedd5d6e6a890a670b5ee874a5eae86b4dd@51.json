{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c8ee026ba71b1770a89117df4fb5fb915ad5059",
      "candidate_info": {
        "commit_hash": "2c8ee026ba71b1770a89117df4fb5fb915ad5059",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c8ee026ba71b1770a89117df4fb5fb915ad5059",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the CLI to keep proper track of input line numbers for use in error messages, even after processing in-line hex database inputs using \".open --hexdb\".\n\nFossilOrigin-Name: 7ffa9858162774cba03a565a7b65135d9e8bfea726af1a29de6898f66c4b1261",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 67a87399b8ad8f1ce3052ee3159906f5c6df3d7b5691b3acac856bd2f1c82088",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3735: static unsigned char *readHexDb(ShellState *p, int *pnData){",
          "3736:   unsigned char *a = 0;",
          "3738:   int n = 0;",
          "3739:   int pgsz = 0;",
          "3740:   int iOffset = 0;",
          "",
          "[Removed Lines]",
          "3737:   int nLine = 1;",
          "",
          "[Added Lines]",
          "3738:   int nLine;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3742:   int rc;",
          "3743:   FILE *in;",
          "3744:   unsigned char x[16];",
          "3746:   if( p->zDbFilename ){",
          "3747:     in = fopen(p->zDbFilename, \"r\");",
          "3748:     if( in==0 ){",
          "3749:       utf8_printf(stderr, \"cannot open \\\"%s\\\" for reading\\n\", p->zDbFilename);",
          "3750:       return 0;",
          "3751:     }",
          "3752:   }else{",
          "3753:     in = p->in;",
          "3754:   }",
          "3756:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "3757:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3758:   if( rc!=2 ) goto readHexDb_error;",
          "",
          "[Removed Lines]",
          "3745:   char zLine[100];",
          "",
          "[Added Lines]",
          "3746:   char zLine[1000];",
          "3753:     nLine = 0;",
          "3756:     nLine = p->lineno;",
          "3759:   nLine++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3767:     utf8_printf(stderr, \"invalid pagesize\\n\");",
          "3768:     goto readHexDb_error;",
          "3769:   }",
          "3771:     rc = sscanf(zLine, \"| page %d offset %d\", &j, &k);",
          "3772:     if( rc==2 ){",
          "3773:       iOffset = k;",
          "",
          "[Removed Lines]",
          "3770:   for(nLine=2; fgets(zLine, sizeof(zLine), in)!=0; nLine++){",
          "",
          "[Added Lines]",
          "3774:   for(nLine++; fgets(zLine, sizeof(zLine), in)!=0; nLine++){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3790:     }",
          "3791:   }",
          "3794:   return a;",
          "3796: readHexDb_error:",
          "",
          "[Removed Lines]",
          "3793:   if( in!=p->in ) fclose(in);",
          "",
          "[Added Lines]",
          "3797:   if( in!=p->in ){",
          "3798:     fclose(in);",
          "3799:   }else{",
          "3800:     p->lineno = nLine;",
          "3801:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3798:     fclose(in);",
          "3799:   }else{",
          "3800:     while( fgets(zLine, sizeof(zLine), p->in)!=0 ){",
          "3801:       if(strncmp(zLine, \"| end \", 6)==0 ) break;",
          "3802:     }",
          "3803:   }",
          "3804:   sqlite3_free(a);",
          "3805:   utf8_printf(stderr,\"Error on line %d of --hexdb input\\n\", nLine);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3809:       nLine++;",
          "3812:     p->lineno = nLine;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6973:   if( c=='r' && n>=3 && strncmp(azArg[0], \"read\", n)==0 ){",
          "6974:     FILE *inSaved = p->in;",
          "6975:     if( nArg!=2 ){",
          "6976:       raw_printf(stderr, \"Usage: .read FILE\\n\");",
          "6977:       rc = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6985:     int savedLineno = p->lineno;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6986:       fclose(p->in);",
          "6987:     }",
          "6988:     p->in = inSaved;",
          "6989:   }else",
          "6991:   if( c=='r' && n>=3 && strncmp(azArg[0], \"restore\", n)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7000:     p->lineno = savedLineno;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8341:   while( errCnt==0 || !bail_on_error || (p->in==0 && stdin_is_interactive) ){",
          "8342:     fflush(p->out);",
          "8343:     zLine = one_input_line(p->in, zLine, nSql>0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8352:   p->lineno = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8350:       if( p->in!=0 ) break;",
          "8351:       seenInterrupt = 0;",
          "8352:     }",
          "8354:     if( nSql==0 && _all_whitespace(zLine) ){",
          "8355:       if( ShellHasFlag(p, SHFLG_Echo) ) printf(\"%s\\n\", zLine);",
          "8356:       continue;",
          "",
          "[Removed Lines]",
          "8353:     lineno++;",
          "",
          "[Added Lines]",
          "8365:     p->lineno++;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8382:       for(i=0; zLine[i] && IsSpace(zLine[i]); i++){}",
          "8383:       assert( nAlloc>0 && zSql!=0 );",
          "8384:       memcpy(zSql, zLine+i, nLine+1-i);",
          "8386:       nSql = nLine-i;",
          "8387:     }else{",
          "8388:       zSql[nSql++] = '\\n';",
          "",
          "[Removed Lines]",
          "8385:       startline = lineno;",
          "",
          "[Added Lines]",
          "8397:       startline = p->lineno;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "8495:   const char *sqliterc = sqliterc_override;",
          "8496:   char *zBuf = 0;",
          "8497:   FILE *inSaved = p->in;",
          "8499:   if (sqliterc == NULL) {",
          "8500:     home_dir = find_home_dir(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8510:   int savedLineno = p->lineno;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8515:     fclose(p->in);",
          "8516:   }",
          "8517:   p->in = inSaved;",
          "8518:   sqlite3_free(zBuf);",
          "8519: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8531:   p->lineno = savedLineno;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
      "candidate_info": {
        "commit_hash": "0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a64ddbe76826615b77a806d7a1426fefdfaa4f0",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In the rtree extension, actively suppress extra tokens on the column names, and be pedantic about column affinities.  Ticket [367a86e28859f1ff]\n\nFossilOrigin-Name: 97fb5a72f91a44d579466e67c33aa862384c4d1c95c2010cf4ae9dbd172bbcfb",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "ext/rtree/rtree2.test||ext/rtree/rtree2.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3661:   return rc;",
          "3662: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3668: static int rtreeTokenLength(const char *z){",
          "3669:   int dummy = 0;",
          "3670:   return sqlite3GetToken((const unsigned char*)z,&dummy);",
          "3671: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3728:   pSql = sqlite3_str_new(db);",
          "3730:   for(ii=4; ii<argc; ii++){",
          "3732:       pRtree->nAux++;",
          "3734:     }else if( pRtree->nAux>0 ){",
          "3735:       break;",
          "3736:     }else{",
          "3737:       pRtree->nDim2++;",
          "3739:     }",
          "3740:   }",
          "3741:   sqlite3_str_appendf(pSql, \");\");",
          "",
          "[Removed Lines]",
          "3729:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%s INT\", argv[3]);",
          "3731:     if( argv[ii][0]=='+' ){",
          "3733:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]+1);",
          "3738:       sqlite3_str_appendf(pSql, \",%s\", argv[ii]);",
          "",
          "[Added Lines]",
          "3738:   sqlite3_str_appendf(pSql, \"CREATE TABLE x(%.*s INT\",",
          "3739:                       rtreeTokenLength(argv[3]), argv[3]);",
          "3741:     const char *zArg = argv[ii];",
          "3742:     if( zArg[0]=='+' ){",
          "3744:       sqlite3_str_appendf(pSql, \",%s\", zArg+1);",
          "3749:       sqlite3_str_appendf(pSql, \",%.*s NUM\", rtreeTokenLength(zArg), zArg);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "705:   REINDEX;",
          "706: } {}",
          "708: expand_all_sql db",
          "709: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: reset_db",
          "709: do_execsql_test 18.0 {",
          "710:   CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
          "711:   INSERT INTO rt0(c0,c1,c2) VALUES(9,2,3);",
          "712:   SELECT c0 FROM rt0 WHERE rt0.c1 > '-1';",
          "713:   SELECT rt0.c1 > '-1' FROM rt0;",
          "714: } {9 1}",
          "",
          "---------------"
        ],
        "ext/rtree/rtree2.test||ext/rtree/rtree2.test": [
          "File: ext/rtree/rtree2.test -> ext/rtree/rtree2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: }",
          "35: foreach module {rtree_i32 rtree} {",
          "36:   for {set nDim 1} {$nDim <= 5} {incr nDim} {",
          "38:     do_test rtree2-$module.$nDim.1 {",
          "39:       set cols [list]",
          "40:       foreach c [list c0 c1 c2 c3 c4 c5 c6 c7 c8 c9] {",
          "42:       }",
          "43:       set cols [join [lrange $cols 0 [expr {$nDim*2-1}]] \", \"]",
          "44:       execsql \"",
          "",
          "[Removed Lines]",
          "41:         lappend cols \"$c REAL\"",
          "",
          "[Added Lines]",
          "36:   if {$module==\"rtree_i32\"} {set etype INT} {set etype REAL}",
          "42:         lappend cols \"$c $etype\"",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62f2235adf796c72882b26313489cf49804ec3ec4972e0eee5034176cbb07f84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e6dc5d9081f20a52ae38d6f5009cbfaf3bf72dc",
      "candidate_info": {
        "commit_hash": "7e6dc5d9081f20a52ae38d6f5009cbfaf3bf72dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e6dc5d9081f20a52ae38d6f5009cbfaf3bf72dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Fix the previous check-in [db9acef14d492121] so that the amalgamation build works for systems for which lack HAVE_ISNAN.\n\nFossilOrigin-Name: 3cc55e09e6c1de2059d97bdddf2fdfbdcc62c584b513f56faf9d3a39ef80cddd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db9acef14d49212108c8082cc15a9b9b4a56b8afe4fe1104ddf62783739c1fbe",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"sqliteInt.h\"",
          "19: #include <stdarg.h>",
          "",
          "[Removed Lines]",
          "20: #if HAVE_ISNAN || SQLITE_HAVE_ISNAN",
          "21: # include <math.h>",
          "22: #endif",
          "",
          "[Added Lines]",
          "20: #include <math.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4b331535d7a1f55eb5eb4fdab5ec0a50d1dd73a",
      "candidate_info": {
        "commit_hash": "f4b331535d7a1f55eb5eb4fdab5ec0a50d1dd73a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4b331535d7a1f55eb5eb4fdab5ec0a50d1dd73a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Improvement on the previous check-in.  Parse.rc is less reliable than Parse.nErr for detecting SQLITE_TOOBIG errors.\n\nFossilOrigin-Name: 8d478cfb92fdeb87591403fe1713b290fee309a38b71abee0002012935d1db98",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d85d80ef8b216639244c6f4e6a2c0050af3cf9c3998f372bae4a19c0430f2fd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4797:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "4798:   pTab->tabFlags |= TF_Ephemeral;",
          "4801: }",
          "",
          "[Removed Lines]",
          "4800:   return pParse->rc;",
          "",
          "[Added Lines]",
          "4800:   return pParse->nErr ? SQLITE_ERROR : SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bf3133fef1265b9d600554fb8c3b72ecd3bf509",
      "candidate_info": {
        "commit_hash": "7bf3133fef1265b9d600554fb8c3b72ecd3bf509",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7bf3133fef1265b9d600554fb8c3b72ecd3bf509",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata7.db"
        ],
        "message": "New dbfuzz2 test cases added to test/fuzzdata7.db\n\nFossilOrigin-Name: 25975e1fb2be0c011542c0a6b001385cec8113662df93dc618f725f2a4692bc2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c1ac00706bae45fe9735061ada025880606cdfb8ecfdaa36b4e2d04275820861",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}