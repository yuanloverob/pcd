{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13a8f203d9a03e0f1dfe03225acecd93c8de3022",
      "candidate_info": {
        "commit_hash": "13a8f203d9a03e0f1dfe03225acecd93c8de3022",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13a8f203d9a03e0f1dfe03225acecd93c8de3022",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt.test"
        ],
        "message": "Further improvements to shadow table corruption detection in FTS3.\n\nFossilOrigin-Name: e35d8c76aae59f57cc5193f79b21b4298029bea78e1aab7af67432162ce63e00",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt.test||test/fts3corrupt.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4245:       pWriter->bNoLeafData = (pWriter->nLeafData==0);",
          "4246:       nRoot = sqlite3_column_bytes(pSelect, 4);",
          "4247:       aRoot = sqlite3_column_blob(pSelect, 4);",
          "4248:     }else{",
          "4249:       return sqlite3_reset(pSelect);",
          "4250:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4248:       if( aRoot==0 ){",
          "4249:         sqlite3_reset(pSelect);",
          "4250:         return nRoot ? SQLITE_NOMEM : FTS_CORRUPT_VTAB;",
          "4251:       }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dfcf081d842629a0b177be7eb2eb8ce719324068991040a581e33ea1d5db3d27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt.test||test/fts3corrupt.test": [
          "File: test/fts3corrupt.test -> test/fts3corrupt.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: } {1 {database disk image is malformed}}",
          "166: do_test 5.3.1 { sqlite3_extended_errcode db } SQLITE_CORRUPT_VTAB",
          "169: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: # 2019-11-18 https://bugs.chromium.org/p/chromium/issues/detail?id=1025467",
          "169: # bug1",
          "170: db close",
          "171: sqlite3 db :memory:",
          "172: do_catchsql_test 6.10 {",
          "173:   CREATE VIRTUAL TABLE f using fts3(a,b);",
          "174:   CREATE TABLE f_stat(id INTEGER PRIMARY KEY, value BLOB);",
          "175:   INSERT INTO f_segdir VALUES (2000, 0,0,0, '16', '');",
          "176:   INSERT INTO f_segdir VALUES (1999, 0,0,0, '0 18',",
          "177:                                x'000131030102000103323334050101010200');",
          "178:   INSERT INTO f_segments (blockid) values (16);",
          "179:   INSERT INTO f_segments values (0, x'');",
          "180:   INSERT INTO f_stat VALUES (1,x'cf0f01');",
          "181:   INSERT INTO f(f) VALUES (\"merge=1\");",
          "182: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "463e76ff8f024ca12d1bad4c6ab23e3a7a8247ce",
      "candidate_info": {
        "commit_hash": "463e76ff8f024ca12d1bad4c6ab23e3a7a8247ce",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/463e76ff8f024ca12d1bad4c6ab23e3a7a8247ce",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Get indexes working on virtual columns.\n\nFossilOrigin-Name: 450c48766c8e62653d074c95f69b0576de3880d183a1d1e5992d88b6fce6cc39",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d236698e64b2a4b46f91a25279c406e0bf392fe66116678456f0a034c11d7b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1755:         sqlite3ExprCodeCopy(pParse, pIdx->aColExpr->a[i].pExpr, regIdx+i);",
          "1756:         pParse->iSelfTab = 0;",
          "1757:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1758:       }else{",
          "1766:       }",
          "1767:     }",
          "1768:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regIdx, pIdx->nColumn, aRegIdx[ix]);",
          "",
          "[Removed Lines]",
          "1759:         if( iField==XN_ROWID || iField==pTab->iPKey ){",
          "1760:           x = regNewData;",
          "1761:         }else{",
          "1762:           x = iField + regNewData + 1;",
          "1763:         }",
          "1764:         sqlite3VdbeAddOp2(v, iField<0 ? OP_IntCopy : OP_SCopy, x, regIdx+i);",
          "1765:         VdbeComment((v, \"%s\", iField<0 ? \"rowid\" : pTab->aCol[iField].zName));",
          "",
          "[Added Lines]",
          "1758:       }else if( iField==XN_ROWID || iField==pTab->iPKey ){",
          "1759:         x = regNewData;",
          "1760:         sqlite3VdbeAddOp2(v, OP_IntCopy, x, regIdx+i);",
          "1761:         VdbeComment((v, \"rowid\"));",
          "1762: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1763:       }else if( pTab->aCol[iField].colFlags & COLFLAG_VIRTUAL ){",
          "1764:         pParse->iSelfTab = -(regNewData+1);",
          "1765:         sqlite3ExprCodeCopy(pParse, pTab->aCol[iField].pDflt, regIdx+i);",
          "1766:         pParse->iSelfTab = 0;",
          "1767:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1768: #endif",
          "1770:         x = sqlite3ColumnOfTable(pTab, iField) + regNewData + 1;",
          "1771:         sqlite3VdbeAddOp2(v, OP_SCopy, x, regIdx+i);",
          "1772:         VdbeComment((v, \"%s\", pTab->aCol[iField].zName));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b19131a8c655715c2daa690eb7629cdd827a1dfd",
      "candidate_info": {
        "commit_hash": "b19131a8c655715c2daa690eb7629cdd827a1dfd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b19131a8c655715c2daa690eb7629cdd827a1dfd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Add a missing VdbeCoverage() macro.\n\nFossilOrigin-Name: 36d35dbd5a80dc4a149ed7409cc4b43712622fc4c6a8915b4fbb62fd1d6b7763",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a19884455b9bafcdc769362d61cfd02df1b5643263e004cb533698bbcfca752b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2158:     sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2159:     sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2160:     sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2161:     sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2162:     sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2163:     assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2161:     VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6ad201ac2a17178799e7b530ee4f81876cc3808",
      "candidate_info": {
        "commit_hash": "f6ad201ac2a17178799e7b530ee4f81876cc3808",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f6ad201ac2a17178799e7b530ee4f81876cc3808",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c",
          "ext/rbu/sqlite3rbu.c",
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/hash.c",
          "src/hash.h",
          "src/vdbeaux.c",
          "src/wal.c"
        ],
        "message": "Fixes for harmless compiler warnings.\n\nFossilOrigin-Name: c28c973ad6debd63f13e5d4d3da036f680baaec9d863eda039f2747db9f1cfd5",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/hash.c||src/hash.c",
          "src/hash.h||src/hash.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1000:   return SQLITE_ERROR;",
          "1001: }",
          "1006:   switch( cArg ){",
          "1007:     case FTS3_MATCHINFO_NDOC:",
          "",
          "[Removed Lines]",
          "1003: static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){",
          "",
          "[Added Lines]",
          "1003: static size_t fts3MatchinfoSize(MatchInfo *pInfo, char cArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1286:       case FTS3_MATCHINFO_LHITS_BM:",
          "1287:       case FTS3_MATCHINFO_LHITS: {",
          "1289:         memset(pInfo->aMatchinfo, 0, nZero);",
          "1290:         rc = fts3ExprLHitGather(pCsr->pExpr, pInfo);",
          "1291:         break;",
          "",
          "[Removed Lines]",
          "1288:         int nZero = fts3MatchinfoSize(pInfo, zArg[i]) * sizeof(u32);",
          "",
          "[Added Lines]",
          "1288:         size_t nZero = fts3MatchinfoSize(pInfo, zArg[i]) * sizeof(u32);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3691:     if( aDlidx==0 ){",
          "3692:       p->rc = SQLITE_NOMEM;",
          "3693:     }else{",
          "3695:       memset(&aDlidx[pWriter->nDlidx], 0, nByte);",
          "3696:       pWriter->aDlidx = aDlidx;",
          "3697:       pWriter->nDlidx = nLvl;",
          "",
          "[Removed Lines]",
          "3694:       int nByte = sizeof(Fts5DlidxWriter) * (nLvl - pWriter->nDlidx);",
          "",
          "[Added Lines]",
          "3694:       size_t nByte = sizeof(Fts5DlidxWriter) * (nLvl - pWriter->nDlidx);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2468:   int rc = sqlite3_overload_function(pGlobal->db, zName, -1);",
          "2469:   if( rc==SQLITE_OK ){",
          "2470:     Fts5Auxiliary *pAux;",
          "2475:     nByte = sizeof(Fts5Auxiliary) + nName;",
          "2477:     if( pAux ){",
          "2479:       pAux->zFunc = (char*)&pAux[1];",
          "2480:       memcpy(pAux->zFunc, zName, nName);",
          "2481:       pAux->pGlobal = pGlobal;",
          "",
          "[Removed Lines]",
          "2474:     nName = (int)strlen(zName) + 1;",
          "2476:     pAux = (Fts5Auxiliary*)sqlite3_malloc(nByte);",
          "2478:       memset(pAux, 0, nByte);",
          "",
          "[Added Lines]",
          "2474:     nName = strlen(zName) + 1;",
          "2476:     pAux = (Fts5Auxiliary*)sqlite3_malloc64(nByte);",
          "2478:       memset(pAux, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2505: ){",
          "2506:   Fts5Global *pGlobal = (Fts5Global*)pApi;",
          "2507:   Fts5TokenizerModule *pNew;",
          "2510:   int rc = SQLITE_OK;",
          "2513:   nByte = sizeof(Fts5TokenizerModule) + nName;",
          "2515:   if( pNew ){",
          "2517:     pNew->zName = (char*)&pNew[1];",
          "2518:     memcpy(pNew->zName, zName, nName);",
          "2519:     pNew->pUserData = pUserData;",
          "",
          "[Removed Lines]",
          "2512:   nName = (int)strlen(zName) + 1;",
          "2514:   pNew = (Fts5TokenizerModule*)sqlite3_malloc(nByte);",
          "2516:     memset(pNew, 0, nByte);",
          "",
          "[Added Lines]",
          "2512:   nName = strlen(zName) + 1;",
          "2514:   pNew = (Fts5TokenizerModule*)sqlite3_malloc64(nByte);",
          "2516:     memset(pNew, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:   void *pRet = 0;",
          "1045:   if( p->rc==SQLITE_OK ){",
          "1046:     assert( nByte>0 );",
          "",
          "[Removed Lines]",
          "1043: static void *rbuMalloc(sqlite3rbu *p, int nByte){",
          "",
          "[Added Lines]",
          "1043: static void *rbuMalloc(sqlite3rbu *p, sqlite3_int64 nByte){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1063: static void rbuAllocateIterArrays(sqlite3rbu *p, RbuObjIter *pIter, int nCol){",
          "1065:   char **azNew;",
          "1067:   azNew = (char**)rbuMalloc(p, nByte);",
          "",
          "[Removed Lines]",
          "1064:   int nByte = (2*sizeof(char*) + sizeof(int) + 3*sizeof(u8)) * nCol;",
          "",
          "[Added Lines]",
          "1064:   sqlite3_int64 nByte = (2*sizeof(char*) + sizeof(int) + 3*sizeof(u8)) * nCol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1706: static char *rbuObjIterGetBindlist(sqlite3rbu *p, int nBind){",
          "1707:   char *zRet = 0;",
          "1710:   zRet = (char*)rbuMalloc(p, nByte);",
          "1711:   if( zRet ){",
          "",
          "[Removed Lines]",
          "1708:   int nByte = nBind*2 + 1;",
          "",
          "[Added Lines]",
          "1708:   sqlite3_int64 nByte = 2*(sqlite3_int64)nBind + 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4561:   assert( p->openFlags & (SQLITE_OPEN_MAIN_DB|SQLITE_OPEN_TEMP_DB) );",
          "4562:   if( eStage==RBU_STAGE_OAL || eStage==RBU_STAGE_MOVE ){",
          "4563:     if( iRegion<=p->nShm ){",
          "4565:       char **apNew = (char**)sqlite3_realloc64(p->apShm, nByte);",
          "4566:       if( apNew==0 ){",
          "4567:         rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "4564:       int nByte = (iRegion+1) * sizeof(char*);",
          "",
          "[Added Lines]",
          "4564:       sqlite3_int64 nByte = (iRegion+1) * sizeof(char*);",
          "",
          "---------------"
        ],
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "902:   if( pTab->nChange==0 || pTab->nEntry>=(pTab->nChange/2) ){",
          "903:     int i;",
          "904:     SessionChange **apNew;",
          "907:     apNew = (SessionChange **)sqlite3_malloc64(sizeof(SessionChange *) * nNew);",
          "908:     if( apNew==0 ){",
          "",
          "[Removed Lines]",
          "905:     int nNew = (pTab->nChange ? pTab->nChange : 128) * 2;",
          "",
          "[Added Lines]",
          "905:     sqlite3_int64 nNew = 2*(sqlite3_int64)(pTab->nChange ? pTab->nChange : 128);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:   if( *pRc==SQLITE_OK && p->nAlloc-p->nBuf<nByte ){",
          "1834:     u8 *aNew;",
          "1835:     i64 nNew = p->nAlloc ? p->nAlloc : 128;",
          "",
          "[Removed Lines]",
          "1832: static int sessionBufferGrow(SessionBuffer *p, int nByte, int *pRc){",
          "",
          "[Added Lines]",
          "1832: static int sessionBufferGrow(SessionBuffer *p, size_t nByte, int *pRc){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2947:   }",
          "2949:   if( rc==SQLITE_OK ){",
          "2951:     memset(p->tblhdr.aBuf, 0, iPK);",
          "2952:     memcpy(&p->tblhdr.aBuf[iPK], &p->in.aData[p->in.iNext], nCopy);",
          "2953:     p->in.iNext += nCopy;",
          "",
          "[Removed Lines]",
          "2950:     int iPK = sizeof(sqlite3_value*)*p->nCol*2;",
          "",
          "[Added Lines]",
          "2950:     size_t iPK = sizeof(sqlite3_value*)*p->nCol*2;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4252:     rc = sessionChangesetStart(&pIter2, 0, 0, cons.nBuf, cons.aBuf, 0);",
          "4253:     if( rc==SQLITE_OK ){",
          "4255:       int rc2;",
          "4256:       pIter2->bPatchset = bPatchset;",
          "4257:       pIter2->zTab = (char*)zTab;",
          "",
          "[Removed Lines]",
          "4254:       int nByte = 2*pApply->nCol*sizeof(sqlite3_value*);",
          "",
          "[Added Lines]",
          "4254:       size_t nByte = 2*pApply->nCol*sizeof(sqlite3_value*);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07ee06fd390bfebebc014b47583d489747b0423bb96c810bed5c605ce0e3be71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3769: ){",
          "3770:   char *z;",
          "3772:   if( (n & (n-1))==0 ){",
          "3773:     sqlite3_int64 sz = (n==0) ? 1 : 2*n;",
          "3774:     void *pNew = sqlite3DbRealloc(db, pArray, sz*szEntry);",
          "",
          "[Removed Lines]",
          "3771:   sqlite3_int64 n = *pnEntry;",
          "",
          "[Added Lines]",
          "3771:   sqlite3_int64 n = *pIdx = *pnEntry;",
          "",
          "---------------"
        ],
        "src/hash.c||src/hash.c": [
          "File: src/hash.c -> src/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:     if( pEntry->chain==elem ){",
          "199:       pEntry->chain = elem->next;",
          "200:     }",
          "201:     pEntry->count--;",
          "203:   }",
          "204:   sqlite3_free( elem );",
          "205:   pH->count--;",
          "",
          "[Removed Lines]",
          "202:     assert( pEntry->count>=0 );",
          "",
          "[Added Lines]",
          "201:     assert( pEntry->count>0 );",
          "",
          "---------------"
        ],
        "src/hash.h||src/hash.h": [
          "File: src/hash.h -> src/hash.h"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:                         : (sqlite3_int64)v->nOpAlloc+nOp);",
          "160: #else",
          "161:   sqlite3_int64 nNew = (v->nOpAlloc ? 2*(sqlite3_int64)v->nOpAlloc",
          "163:   UNUSED_PARAMETER(nOp);",
          "164: #endif",
          "",
          "[Removed Lines]",
          "162:                         : (sqlite3_int64)1024/sizeof(Op));",
          "",
          "[Added Lines]",
          "162:                         : (sqlite3_int64)(1024/sizeof(Op)));",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "577:   if( pWal->nWiData<=iPage ){",
          "579:     volatile u32 **apNew;",
          "580:     apNew = (volatile u32 **)sqlite3_realloc64((void *)pWal->apWiData, nByte);",
          "581:     if( !apNew ){",
          "",
          "[Removed Lines]",
          "578:     int nByte = sizeof(u32*)*(iPage+1);",
          "",
          "[Added Lines]",
          "578:     sqlite3_int64 nByte = sizeof(u32*)*(iPage+1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "680:   assert( nByte>=8 );",
          "681:   assert( (nByte&0x00000007)==0 );",
          "683:   if( nativeCksum ){",
          "684:     do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:   assert( nByte<=65536 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a0db87a2fbd50aa8fd22fe4362549f31b1a82b1",
      "candidate_info": {
        "commit_hash": "6a0db87a2fbd50aa8fd22fe4362549f31b1a82b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6a0db87a2fbd50aa8fd22fe4362549f31b1a82b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "If the amalgamation file \"sqlite3.c\" is generated using the SQLITE_ENABLE_UPDATE_DELETE_LIMIT option, but then subsequently (mis-)compiled without that option, and then a particular syntax error could cause a memory leak, but for this fix.\n\nFossilOrigin-Name: 1bb17c863a269ab8b28df94b9fdaac3ee70777ccd0a30300131bf67df6722052",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 507c43537f00d089efb3c3020fb6e826e8f89f3efa2caaa12c5309d35dd0c22e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "826: cmd ::= with DELETE FROM xfullname(X) indexed_opt(I) where_opt(W)",
          "827:         orderby_opt(O) limit_opt(L). {",
          "828:   sqlite3SrcListIndexedBy(pParse, X, &I);",
          "829:   sqlite3DeleteFrom(pParse,X,W,O,L);",
          "830: }",
          "831: %endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829: #ifndef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "830:   sqlite3ExprListDelete(pParse->db, O); O = 0;",
          "831:   sqlite3ExprDelete(pParse->db, L); L = 0;",
          "832: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}