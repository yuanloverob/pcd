{
  "cve_id": "CVE-2016-4817",
  "cve_desc": "lib/http2/connection.c in H2O before 1.7.3 and 2.x before 2.0.0-beta5 mishandles HTTP/2 disconnection, which allows remote attackers to cause a denial of service (use-after-free and application crash) or possibly execute arbitrary code via a crafted packet.",
  "repo": "h2o/h2o",
  "patch_hash": "1c0808d580da09fdec5a9a74ff09e103ea058dd4",
  "patch_info": {
    "commit_hash": "1c0808d580da09fdec5a9a74ff09e103ea058dd4",
    "repo": "h2o/h2o",
    "commit_url": "https://github.com/h2o/h2o/commit/1c0808d580da09fdec5a9a74ff09e103ea058dd4",
    "files": [
      "lib/http2/connection.c"
    ],
    "message": "h2: use after free on premature connection close #920\n\nlib/http2/connection.c:on_read() calls parse_input(), which might free\n`conn`. It does so in particular if the connection preface isn't\nthe expected one in expect_preface(). `conn` is then used after the free\nin `if (h2o_timeout_is_linked(&conn->_write.timeout_entry)`.\nWe fix this by adding a return value to close_connection that returns a\nnegative value if `conn` has been free'd and can't be used anymore.\n\nCredits for finding the bug to Tim Newsham.",
    "before_after_code_files": [
      "lib/http2/connection.c||lib/http2/connection.c"
    ]
  },
  "patch_diff": {
    "lib/http2/connection.c||lib/http2/connection.c": [
      "File: lib/http2/connection.c -> lib/http2/connection.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: static __thread h2o_buffer_prototype_t wbuf_buffer_prototype = {{16}, {H2O_HTTP2_DEFAULT_OUTBUF_SIZE}};",
      "57: static void initiate_graceful_shutdown(h2o_context_t *ctx);",
      "59: static void send_stream_error(h2o_http2_conn_t *conn, uint32_t stream_id, int errnum);",
      "60: static ssize_t expect_default(h2o_http2_conn_t *conn, const uint8_t *src, size_t len, const char **err_desc);",
      "61: static int do_emit_writereq(h2o_http2_conn_t *conn);",
      "",
      "[Removed Lines]",
      "58: static void close_connection(h2o_http2_conn_t *conn);",
      "",
      "[Added Lines]",
      "58: static int close_connection(h2o_http2_conn_t *conn);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "261:     free(conn);",
      "262: }",
      "265: {",
      "266:     conn->state = H2O_HTTP2_CONN_STATE_IS_CLOSING;",
      "",
      "[Removed Lines]",
      "264: void close_connection(h2o_http2_conn_t *conn)",
      "",
      "[Added Lines]",
      "264: int close_connection(h2o_http2_conn_t *conn)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "270:     } else {",
      "271:         close_connection_now(conn);",
      "272:     }",
      "273: }",
      "275: void send_stream_error(h2o_http2_conn_t *conn, uint32_t stream_id, int errnum)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "272:         return -1;",
      "274:     return 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "808:     return CONNECTION_PREFACE.len;",
      "809: }",
      "812: {",
      "813:     size_t http2_max_concurrent_requests_per_connection = conn->super.ctx->globalconf->http2.max_concurrent_requests_per_connection;",
      "814:     int perform_early_exit = 0;",
      "",
      "[Removed Lines]",
      "811: static void parse_input(h2o_http2_conn_t *conn)",
      "",
      "[Added Lines]",
      "813: static int parse_input(h2o_http2_conn_t *conn)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "831:                 enqueue_goaway(conn, (int)ret,",
      "832:                                err_desc != NULL ? (h2o_iovec_t){(char *)err_desc, strlen(err_desc)} : (h2o_iovec_t){});",
      "833:             }",
      "836:         }",
      "838:         h2o_buffer_consume(&conn->sock->input, ret);",
      "",
      "[Removed Lines]",
      "834:             close_connection(conn);",
      "835:             return;",
      "",
      "[Added Lines]",
      "836:             return close_connection(conn);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "841:     if (!h2o_socket_is_reading(conn->sock))",
      "842:         h2o_socket_read_start(conn->sock, on_read);",
      "845: EarlyExit:",
      "846:     if (h2o_socket_is_reading(conn->sock))",
      "847:         h2o_socket_read_stop(conn->sock);",
      "848: }",
      "850: static void on_read(h2o_socket_t *sock, int status)",
      "",
      "[Removed Lines]",
      "843:     return;",
      "",
      "[Added Lines]",
      "844:     return 0;",
      "849:     return 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "858:     }",
      "860:     update_idle_timeout(conn);",
      "864:     if (h2o_timeout_is_linked(&conn->_write.timeout_entry)) {",
      "",
      "[Removed Lines]",
      "861:     parse_input(conn);",
      "",
      "[Added Lines]",
      "863:     if (parse_input(conn) != 0)",
      "864:         return;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8705cc19ea312ad6a4b445029ef27b1c5922527e",
      "candidate_info": {
        "commit_hash": "8705cc19ea312ad6a4b445029ef27b1c5922527e",
        "repo": "h2o/h2o",
        "commit_url": "https://github.com/h2o/h2o/commit/8705cc19ea312ad6a4b445029ef27b1c5922527e",
        "files": [
          "lib/http2/connection.c"
        ],
        "message": "h2: use after free on premature connection close\n\nlib/http2/connection.c:on_read() calls parse_input(), which might free\n`conn`. It does so in particular if the connection preface isn't\nthe expected one in expect_preface(). `conn` is then used after the free\nin `if (h2o_timeout_is_linked(&conn->_write.timeout_entry)`.\nWe fix this by adding a return value to close_connection that returns a\nnegative value if `conn` has been free'd and can't be used anymore.\n\nCredits for finding the bug to Tim Newsham.",
        "before_after_code_files": [
          "lib/http2/connection.c||lib/http2/connection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/http2/connection.c||lib/http2/connection.c"
          ],
          "candidate": [
            "lib/http2/connection.c||lib/http2/connection.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/http2/connection.c||lib/http2/connection.c": [
          "File: lib/http2/connection.c -> lib/http2/connection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: static __thread h2o_buffer_prototype_t wbuf_buffer_prototype = {{16}, {H2O_HTTP2_DEFAULT_OUTBUF_SIZE}};",
          "58: static void initiate_graceful_shutdown(h2o_context_t *ctx);",
          "60: static void send_stream_error(h2o_http2_conn_t *conn, uint32_t stream_id, int errnum);",
          "61: static ssize_t expect_default(h2o_http2_conn_t *conn, const uint8_t *src, size_t len, const char **err_desc);",
          "62: static int do_emit_writereq(h2o_http2_conn_t *conn);",
          "",
          "[Removed Lines]",
          "59: static void close_connection(h2o_http2_conn_t *conn);",
          "",
          "[Added Lines]",
          "59: static int close_connection(h2o_http2_conn_t *conn);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:     free(conn);",
          "266: }",
          "269: {",
          "270:     conn->state = H2O_HTTP2_CONN_STATE_IS_CLOSING;",
          "",
          "[Removed Lines]",
          "268: void close_connection(h2o_http2_conn_t *conn)",
          "",
          "[Added Lines]",
          "268: int close_connection(h2o_http2_conn_t *conn)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274:     } else {",
          "275:         close_connection_now(conn);",
          "276:     }",
          "277: }",
          "279: void send_stream_error(h2o_http2_conn_t *conn, uint32_t stream_id, int errnum)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:         return -1;",
          "278:     return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "815:     return CONNECTION_PREFACE.len;",
          "816: }",
          "819: {",
          "821:     while (conn->state < H2O_HTTP2_CONN_STATE_IS_CLOSING && conn->sock->input->size != 0) {",
          "",
          "[Removed Lines]",
          "818: static void parse_input(h2o_http2_conn_t *conn)",
          "",
          "[Added Lines]",
          "820: static int parse_input(h2o_http2_conn_t *conn)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "829:                 enqueue_goaway(conn, (int)ret,",
          "830:                                err_desc != NULL ? (h2o_iovec_t){(char *)err_desc, strlen(err_desc)} : (h2o_iovec_t){});",
          "831:             }",
          "834:         }",
          "836:         h2o_buffer_consume(&conn->sock->input, ret);",
          "837:     }",
          "838: }",
          "840: static void on_read(h2o_socket_t *sock, const char *err)",
          "",
          "[Removed Lines]",
          "832:             close_connection(conn);",
          "833:             return;",
          "",
          "[Added Lines]",
          "834:             return close_connection(conn);",
          "839:     return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "848:     }",
          "850:     update_idle_timeout(conn);",
          "854:     if (h2o_timeout_is_linked(&conn->_write.timeout_entry)) {",
          "",
          "[Removed Lines]",
          "851:     parse_input(conn);",
          "",
          "[Added Lines]",
          "853:     if (parse_input(conn) != 0)",
          "854:         return;",
          "",
          "---------------"
        ]
      }
    }
  ]
}