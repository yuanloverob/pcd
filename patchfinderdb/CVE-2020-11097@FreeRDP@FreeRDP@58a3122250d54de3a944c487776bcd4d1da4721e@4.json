{
  "cve_id": "CVE-2020-11097",
  "cve_desc": "In FreeRDP before version 2.1.2, an out of bounds read occurs resulting in accessing a memory location that is outside of the boundaries of the static array PRIMARY_DRAWING_ORDER_FIELD_BYTES. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "58a3122250d54de3a944c487776bcd4d1da4721e",
  "patch_info": {
    "commit_hash": "58a3122250d54de3a944c487776bcd4d1da4721e",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/58a3122250d54de3a944c487776bcd4d1da4721e",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
    ],
    "message": "Fixed OOB read in ntlm_av_pair_get\n\nCVE-2020-11097 thanks to @antonio-morales for finding this.",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: #include \"../../log.h\"",
      "40: #define TAG WINPR_TAG(\"sspi.NTLM\")",
      "49: static NTLM_AV_PAIR* ntlm_av_pair_next(NTLM_AV_PAIR* pAvPairList, size_t* pcbAvPairList);",
      "51: static INLINE void ntlm_av_pair_set_id(NTLM_AV_PAIR* pAvPair, UINT16 id)",
      "",
      "[Removed Lines]",
      "42: static const char* const AV_PAIR_STRINGS[] = {",
      "43:  \"MsvAvEOL\",           \"MsvAvNbComputerName\", \"MsvAvNbDomainName\", \"MsvAvDnsComputerName\",",
      "44:  \"MsvAvDnsDomainName\", \"MsvAvDnsTreeName\",    \"MsvAvFlags\",        \"MsvAvTimestamp\",",
      "45:  \"MsvAvRestrictions\",  \"MsvAvTargetName\",     \"MsvChannelBindings\"",
      "46: };",
      "48: static BOOL ntlm_av_pair_check(NTLM_AV_PAIR* pAvPair, size_t cbAvPair);",
      "",
      "[Added Lines]",
      "42: static BOOL ntlm_av_pair_get_next_offset(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pOffset);",
      "44: static BOOL ntlm_av_pair_check_data(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair, size_t size)",
      "45: {",
      "46:  size_t offset;",
      "47:  if (!pAvPair || cbAvPair < sizeof(NTLM_AV_PAIR) + size)",
      "48:   return FALSE;",
      "49:  if (!ntlm_av_pair_get_next_offset(pAvPair, cbAvPair, &offset))",
      "50:   return FALSE;",
      "51:  return cbAvPair >= offset;",
      "52: }",
      "54: static const char* get_av_pair_string(UINT16 pair)",
      "55: {",
      "56:  switch (pair)",
      "57:  {",
      "58:   case MsvAvEOL:",
      "59:    return \"MsvAvEOL\";",
      "60:   case MsvAvNbComputerName:",
      "61:    return \"MsvAvNbComputerName\";",
      "62:   case MsvAvNbDomainName:",
      "63:    return \"MsvAvNbDomainName\";",
      "64:   case MsvAvDnsComputerName:",
      "65:    return \"MsvAvDnsComputerName\";",
      "66:   case MsvAvDnsDomainName:",
      "67:    return \"MsvAvDnsDomainName\";",
      "68:   case MsvAvDnsTreeName:",
      "69:    return \"MsvAvDnsTreeName\";",
      "70:   case MsvAvFlags:",
      "71:    return \"MsvAvFlags\";",
      "72:   case MsvAvTimestamp:",
      "73:    return \"MsvAvTimestamp\";",
      "74:   case MsvAvSingleHost:",
      "75:    return \"MsvAvSingleHost\";",
      "76:   case MsvAvTargetName:",
      "77:    return \"MsvAvTargetName\";",
      "78:   case MsvChannelBindings:",
      "79:    return \"MsvChannelBindings\";",
      "80:   default:",
      "81:    return \"UNKNOWN\";",
      "82:  }",
      "83: }",
      "85: static BOOL ntlm_av_pair_check(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "70:  return TRUE;",
      "71: }",
      "74: {",
      "75:  UINT16 AvId;",
      "77:  Data_Read_UINT16(&pAvPair->AvId, AvId);",
      "80: }",
      "82: ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
      "",
      "[Removed Lines]",
      "73: static INLINE UINT16 ntlm_av_pair_get_id(const NTLM_AV_PAIR* pAvPair)",
      "79:  return AvId;",
      "",
      "[Added Lines]",
      "110: static INLINE BOOL ntlm_av_pair_get_id(const NTLM_AV_PAIR* pAvPair, size_t size, UINT16* pair)",
      "113:  if (!pAvPair || !pair)",
      "114:   return FALSE;",
      "116:  if (size < sizeof(NTLM_AV_PAIR))",
      "117:   return FALSE;",
      "122:  return TRUE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:  return ((PBYTE)pAvPair - (PBYTE)pAvPairList) + sizeof(NTLM_AV_PAIR);",
      "92: }",
      "95: {",
      "96:  UINT16 AvLen;",
      "98:  Data_Read_UINT16(&pAvPair->AvLen, AvLen);",
      "101: }",
      "103: void ntlm_print_av_pair_list(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
      "104: {",
      "105:  size_t cbAvPair = cbAvPairList;",
      "106:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
      "",
      "[Removed Lines]",
      "94: static INLINE SIZE_T ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair)",
      "100:  return AvLen;",
      "",
      "[Added Lines]",
      "137: static INLINE BOOL ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pAvLen)",
      "140:  if (!pAvPair)",
      "141:   return FALSE;",
      "143:  if (size < sizeof(NTLM_AV_PAIR))",
      "144:   return FALSE;",
      "149:  return TRUE;",
      "154:  UINT16 pair;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "111:  WLog_INFO(TAG, \"AV_PAIRs =\");",
      "114:  {",
      "121:   pAvPair = ntlm_av_pair_next(pAvPair, &cbAvPair);",
      "122:  }",
      "",
      "[Removed Lines]",
      "113:  while (pAvPair && ntlm_av_pair_get_id(pAvPair) != MsvAvEOL)",
      "115:   WLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\",",
      "116:             AV_PAIR_STRINGS[ntlm_av_pair_get_id(pAvPair)], ntlm_av_pair_get_id(pAvPair),",
      "117:             ntlm_av_pair_get_len(pAvPair));",
      "118:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair),",
      "119:                 ntlm_av_pair_get_len(pAvPair));",
      "",
      "[Added Lines]",
      "163:  while (pAvPair && ntlm_av_pair_get_id(pAvPair, cbAvPair, &pair) && (pair != MsvAvEOL))",
      "165:   size_t cbLen = 0;",
      "166:   ntlm_av_pair_get_len(pAvPair, cbAvPair, &cbLen);",
      "168:   WLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\", get_av_pair_string(pair), pair);",
      "169:   winpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair), cbLen);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "133:  return (PBYTE)pAvPair + sizeof(NTLM_AV_PAIR);",
      "134: }",
      "137: {",
      "139: }",
      "142: {",
      "146: }",
      "148: static NTLM_AV_PAIR* ntlm_av_pair_next(NTLM_AV_PAIR* pAvPair, size_t* pcbAvPair)",
      "",
      "[Removed Lines]",
      "136: static size_t ntlm_av_pair_get_next_offset(NTLM_AV_PAIR* pAvPair)",
      "138:  return ntlm_av_pair_get_len(pAvPair) + sizeof(NTLM_AV_PAIR);",
      "141: static BOOL ntlm_av_pair_check(NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
      "143:  if (!pAvPair || cbAvPair < sizeof(NTLM_AV_PAIR))",
      "144:   return FALSE;",
      "145:  return cbAvPair >= ntlm_av_pair_get_next_offset(pAvPair);",
      "",
      "[Added Lines]",
      "186: static BOOL ntlm_av_pair_get_next_offset(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pOffset)",
      "188:  size_t avLen;",
      "189:  if (!pOffset)",
      "190:   return FALSE;",
      "192:  if (!ntlm_av_pair_get_len(pAvPair, size, &avLen))",
      "193:   return FALSE;",
      "195:  return TRUE;",
      "198: static BOOL ntlm_av_pair_check(const NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
      "200:  return ntlm_av_pair_check_data(pAvPair, cbAvPair, 0);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "154:  if (!ntlm_av_pair_check(pAvPair, *pcbAvPair))",
      "155:   return NULL;",
      "159:  return (NTLM_AV_PAIR*)((PBYTE)pAvPair + offset);",
      "160: }",
      "",
      "[Removed Lines]",
      "157:  offset = ntlm_av_pair_get_next_offset(pAvPair);",
      "",
      "[Added Lines]",
      "212:  if (!ntlm_av_pair_get_next_offset(pAvPair, *pcbAvPair, &offset))",
      "213:   return NULL;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "162: NTLM_AV_PAIR* ntlm_av_pair_get(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList, NTLM_AV_ID AvId,",
      "163:                                size_t* pcbAvPairListRemaining)",
      "164: {",
      "165:  size_t cbAvPair = cbAvPairList;",
      "166:  NTLM_AV_PAIR* pAvPair = pAvPairList;",
      "168:  if (!ntlm_av_pair_check(pAvPair, cbAvPair))",
      "169:   pAvPair = NULL;",
      "172:  {",
      "175:   if (id == AvId)",
      "176:    break;",
      "177:   if (id == MsvAvEOL)",
      "",
      "[Removed Lines]",
      "171:  while (pAvPair)",
      "173:   UINT16 id = ntlm_av_pair_get_id(pAvPair);",
      "",
      "[Added Lines]",
      "222:  UINT16 id;",
      "229:  while (pAvPair && ntlm_av_pair_get_id(pAvPair, cbAvPair, &id))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "218: static BOOL ntlm_av_pair_add_copy(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList,",
      "219:                                   NTLM_AV_PAIR* pAvPair, size_t cbAvPair)",
      "220: {",
      "221:  if (!ntlm_av_pair_check(pAvPair, cbAvPair))",
      "222:   return FALSE;",
      "226: }",
      "228: static int ntlm_get_target_computer_name(PUNICODE_STRING pName, COMPUTER_NAME_FORMAT type)",
      "",
      "[Removed Lines]",
      "224:  return ntlm_av_pair_add(pAvPairList, cbAvPairList, ntlm_av_pair_get_id(pAvPair),",
      "225:                          ntlm_av_pair_get_value_pointer(pAvPair), ntlm_av_pair_get_len(pAvPair));",
      "",
      "[Added Lines]",
      "277:  UINT16 pair;",
      "278:  size_t avLen;",
      "283:  if (!ntlm_av_pair_get_id(pAvPair, cbAvPair, &pair))",
      "284:   return FALSE;",
      "286:  if (!ntlm_av_pair_get_len(pAvPair, cbAvPair, &avLen))",
      "287:   return FALSE;",
      "289:  return ntlm_av_pair_add(pAvPairList, cbAvPairList, pair,",
      "290:                          ntlm_av_pair_get_value_pointer(pAvPair), avLen);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "501:  if (AvNbDomainName)",
      "502:  {",
      "505:  }",
      "507:  if (AvNbComputerName)",
      "508:  {",
      "511:  }",
      "513:  if (AvDnsDomainName)",
      "514:  {",
      "517:  }",
      "519:  if (AvDnsComputerName)",
      "520:  {",
      "523:  }",
      "525:  if (AvDnsTreeName)",
      "526:  {",
      "529:  }",
      "",
      "[Removed Lines]",
      "504:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbDomainName);",
      "510:   AvPairsValueLength += ntlm_av_pair_get_len(AvNbComputerName);",
      "516:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsDomainName);",
      "522:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsComputerName);",
      "528:   AvPairsValueLength += ntlm_av_pair_get_len(AvDnsTreeName);",
      "",
      "[Added Lines]",
      "568:   size_t avLen;",
      "569:   if (!ntlm_av_pair_get_len(AvNbDomainName, cbAvNbDomainName, &avLen))",
      "570:    goto fail;",
      "572:   AvPairsValueLength += avLen;",
      "577:   size_t avLen;",
      "578:   if (!ntlm_av_pair_get_len(AvNbComputerName, cbAvNbComputerName, &avLen))",
      "579:    goto fail;",
      "581:   AvPairsValueLength += avLen;",
      "586:   size_t avLen;",
      "587:   if (!ntlm_av_pair_get_len(AvDnsDomainName, cbAvDnsDomainName, &avLen))",
      "588:    goto fail;",
      "590:   AvPairsValueLength += avLen;",
      "595:   size_t avLen;",
      "596:   if (!ntlm_av_pair_get_len(AvDnsComputerName, cbAvDnsComputerName, &avLen))",
      "597:    goto fail;",
      "599:   AvPairsValueLength += avLen;",
      "604:   size_t avLen;",
      "605:   if (!ntlm_av_pair_get_len(AvDnsTreeName, cbAvDnsTreeName, &avLen))",
      "606:    goto fail;",
      "608:   AvPairsValueLength += avLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6",
      "candidate_info": {
        "commit_hash": "02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/02c5ec66e5b47fe4cf2fc96e2cd387a18e3f2bb6",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed possible integer overflow in crypto_rsa_common\n\nThanks @anticomputer for pointing this out",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  BIGNUM* exp = NULL;",
          "106:  BIGNUM* x = NULL;",
          "107:  BIGNUM* y = NULL;",
          "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
          "111:   return -1;",
          "113:  if (length > bufferSize)",
          "114:   bufferSize = length;",
          "",
          "[Removed Lines]",
          "108:  size_t bufferSize = 2 * key_length + exponent_size;",
          "",
          "[Added Lines]",
          "108:  size_t bufferSize;",
          "113:  if (exponent_size > SIZE_MAX / 2)",
          "114:   return -1;",
          "116:  if (key_length >= SIZE_MAX / 2 - exponent_size)",
          "117:   return -1;",
          "119:  bufferSize = 2ULL * key_length + exponent_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6726772d8dae00b5c49a153d0be7f769e028d85e",
      "candidate_info": {
        "commit_hash": "6726772d8dae00b5c49a153d0be7f769e028d85e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6726772d8dae00b5c49a153d0be7f769e028d85e",
        "files": [
          "libfreerdp/core/gateway/ntlm.c",
          "libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/gateway/rpc.h",
          "libfreerdp/core/nla.c",
          "winpr/libwinpr/environment/environment.c",
          "winpr/libwinpr/file/file.c",
          "winpr/libwinpr/library/library.c",
          "winpr/libwinpr/sspi/CMakeLists.txt",
          "winpr/libwinpr/sspi/NTLM/ntlm.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.h",
          "winpr/libwinpr/sspi/NTLM/ntlm_export.h",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "winpr/libwinpr/sspi/Negotiate/negotiate.c",
          "winpr/libwinpr/sspi/Negotiate/negotiate.h",
          "winpr/libwinpr/sspi/sspi_winpr.c",
          "winpr/libwinpr/utils/collections/ArrayList.c",
          "winpr/libwinpr/utils/ntlm.c"
        ],
        "message": "Fixed integer warnings",
        "before_after_code_files": [
          "libfreerdp/core/gateway/ntlm.c||libfreerdp/core/gateway/ntlm.c",
          "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/gateway/rpc.h||libfreerdp/core/gateway/rpc.h",
          "libfreerdp/core/nla.c||libfreerdp/core/nla.c",
          "winpr/libwinpr/environment/environment.c||winpr/libwinpr/environment/environment.c",
          "winpr/libwinpr/file/file.c||winpr/libwinpr/file/file.c",
          "winpr/libwinpr/library/library.c||winpr/libwinpr/library/library.c",
          "winpr/libwinpr/sspi/NTLM/ntlm.c||winpr/libwinpr/sspi/NTLM/ntlm.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.h||winpr/libwinpr/sspi/NTLM/ntlm_compute.h",
          "winpr/libwinpr/sspi/NTLM/ntlm_export.h||winpr/libwinpr/sspi/NTLM/ntlm_export.h",
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "winpr/libwinpr/sspi/Negotiate/negotiate.c||winpr/libwinpr/sspi/Negotiate/negotiate.c",
          "winpr/libwinpr/sspi/Negotiate/negotiate.h||winpr/libwinpr/sspi/Negotiate/negotiate.h",
          "winpr/libwinpr/sspi/sspi_winpr.c||winpr/libwinpr/sspi/sspi_winpr.c",
          "winpr/libwinpr/utils/collections/ArrayList.c||winpr/libwinpr/utils/collections/ArrayList.c",
          "winpr/libwinpr/utils/ntlm.c||winpr/libwinpr/utils/ntlm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
          ],
          "candidate": [
            "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/gateway/ntlm.c||libfreerdp/core/gateway/ntlm.c": [
          "File: libfreerdp/core/gateway/ntlm.c -> libfreerdp/core/gateway/ntlm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  LPWSTR hostnameX = NULL;",
          "144:  ConvertToUnicode(CP_UTF8, 0, hostname, -1, (LPWSTR*)&hostnameX, 0);",
          "145: #else",
          "147: #endif",
          "149:  if (!hostnameX)",
          "",
          "[Removed Lines]",
          "146:  LPCSTR hostnameX = _strdup(hostname);",
          "",
          "[Added Lines]",
          "146:  LPSTR hostnameX = _strdup(hostname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:  if (!ServiceClass)",
          "153:  {",
          "160:   return TRUE;",
          "161:  }",
          "",
          "[Removed Lines]",
          "154:   ntlm->ServicePrincipalName = (LPTSTR)_tcsdup(hostnameX);",
          "155:   free(hostnameX);",
          "157:   if (!ntlm->ServicePrincipalName)",
          "158:    return FALSE;",
          "",
          "[Added Lines]",
          "154:   ntlm->ServicePrincipalName = hostnameX;",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c": [
          "File: libfreerdp/core/gateway/rdg.c -> libfreerdp/core/gateway/rdg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1128:  char* base64NtlmToken = NULL;",
          "1130:  if (ntlmToken)",
          "1138:  if (base64NtlmToken)",
          "1139:  {",
          "",
          "[Removed Lines]",
          "1131:  {",
          "1132:   if (ntlmToken->cbBuffer > INT_MAX)",
          "1133:    return FALSE;",
          "1135:   base64NtlmToken = crypto_base64_encode(ntlmToken->pvBuffer, (int)ntlmToken->cbBuffer);",
          "1136:  }",
          "",
          "[Added Lines]",
          "1131:   base64NtlmToken = crypto_base64_encode(ntlmToken->pvBuffer, ntlmToken->cbBuffer);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rpc.h||libfreerdp/core/gateway/rpc.h": [
          "File: libfreerdp/core/gateway/rpc.h -> libfreerdp/core/gateway/rpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:  UINT32 result;",
          "739:  rdpNtlm* ntlm;",
          "742:  RpcClient* client;",
          "",
          "[Removed Lines]",
          "740:  int SendSeqNum;",
          "",
          "[Added Lines]",
          "740:  size_t SendSeqNum;",
          "",
          "---------------"
        ],
        "libfreerdp/core/nla.c||libfreerdp/core/nla.c": [
          "File: libfreerdp/core/nla.c -> libfreerdp/core/nla.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1190:    {",
          "1191:     SECURITY_STATUS status;",
          "1192:     status = nla->table->SetContextAttributes(",
          "1195:     if (status != SEC_E_OK)",
          "1196:     {",
          "",
          "[Removed Lines]",
          "1193:         &nla->context, SECPKG_ATTR_AUTH_NTLM_HASH_CB, peer->ComputeNtlmHash, 0);",
          "",
          "[Added Lines]",
          "1193:         &nla->context, SECPKG_ATTR_AUTH_NTLM_HASH_CB, (void*)peer->ComputeNtlmHash, 0);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/environment/environment.c||winpr/libwinpr/environment/environment.c": [
          "File: winpr/libwinpr/environment/environment.c -> winpr/libwinpr/environment/environment.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   memcpy(lpBuffer, cwd, length + 1);",
          "84:   free(cwd);",
          "86:  }",
          "87: }",
          "",
          "[Removed Lines]",
          "85:   return length;",
          "",
          "[Added Lines]",
          "85:   return (DWORD)length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:  length = strlen(env);",
          "156:  if ((length + 1 > nSize) || (!lpBuffer))",
          "159:  CopyMemory(lpBuffer, env, length);",
          "160:  lpBuffer[length] = '\\0';",
          "163: #else",
          "164:  SetLastError(ERROR_ENVVAR_NOT_FOUND);",
          "165:  return 0;",
          "",
          "[Removed Lines]",
          "157:   return length + 1;",
          "162:  return length;",
          "",
          "[Added Lines]",
          "157:   return (DWORD)length + 1;",
          "162:  return (DWORD)length;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/file/file.c||winpr/libwinpr/file/file.c": [
          "File: winpr/libwinpr/file/file.c -> winpr/libwinpr/file/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   return INVALID_SET_FILE_POINTER;",
          "165:  }",
          "168: }",
          "170: static BOOL FileSetFilePointerEx(HANDLE hFile, LARGE_INTEGER liDistanceToMove,",
          "",
          "[Removed Lines]",
          "167:  return _ftelli64(pFile->fp);",
          "",
          "[Added Lines]",
          "167:  return (DWORD)_ftelli64(pFile->fp);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/library/library.c||winpr/libwinpr/library/library.c": [
          "File: winpr/libwinpr/library/library.c -> winpr/libwinpr/library/library.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   {",
          "290:    CopyMemory(lpFilename, buffer, length);",
          "291:    lpFilename[length] = '\\0';",
          "293:   }",
          "295:   CopyMemory(lpFilename, buffer, nSize - 1);",
          "",
          "[Removed Lines]",
          "292:    return length;",
          "",
          "[Added Lines]",
          "292:    return (DWORD)length;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm.c||winpr/libwinpr/sspi/NTLM/ntlm.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm.c -> winpr/libwinpr/sspi/NTLM/ntlm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #endif",
          "24: #include <winpr/crt.h>",
          "25: #include <winpr/sspi.h>",
          "26: #include <winpr/print.h>",
          "27: #include <winpr/tchar.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <winpr/assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: #include <freerdp/build-config.h>",
          "33: #include \"ntlm.h\"",
          "34: #include \"../sspi.h\"",
          "36: #include \"ntlm_message.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"ntlm_export.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41: #define WINPR_KEY \"Software\\\\\" FREERDP_VENDOR_STRING \"\\\\\" FREERDP_PRODUCT_STRING \"\\\\WinPR\\\\NTLM\"",
          "45: static int ntlm_SetContextWorkstation(NTLM_CONTEXT* context, char* Workstation)",
          "46: {",
          "",
          "[Removed Lines]",
          "43: static const char* NTLM_PACKAGE_NAME = \"NTLM\";",
          "",
          "[Added Lines]",
          "45: static char* NTLM_PACKAGE_NAME = \"NTLM\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "750:   if (credentials->identity.UserLength > 0)",
          "751:   {",
          "755:    if (status <= 0)",
          "756:     return SEC_E_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "752:    status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)credentials->identity.User,",
          "753:                                credentials->identity.UserLength, &UserA, 256, NULL, NULL);",
          "",
          "[Added Lines]",
          "754:    WINPR_ASSERT(credentials->identity.UserLength <= INT_MAX);",
          "755:    status =",
          "756:        ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)credentials->identity.User,",
          "757:                           (int)credentials->identity.UserLength, &UserA, 256, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "761:   if (credentials->identity.DomainLength > 0)",
          "762:   {",
          "767:    if (status <= 0)",
          "768:     return SEC_E_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "763:    status =",
          "764:        ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)credentials->identity.Domain,",
          "765:                           credentials->identity.DomainLength, &DomainA, 256, NULL, NULL);",
          "",
          "[Added Lines]",
          "767:    WINPR_ASSERT(credentials->identity.DomainLength <= INT_MAX);",
          "768:    status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)credentials->identity.Domain,",
          "769:                                (int)credentials->identity.DomainLength, &DomainA, 256,",
          "770:                                NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "965:                                                      PSecBufferDesc pMessage, ULONG MessageSeqNo)",
          "966: {",
          "967:  ULONG index;",
          "969:  void* data;",
          "970:  UINT32 SeqNo;",
          "971:  UINT32 value;",
          "",
          "[Removed Lines]",
          "968:  int length;",
          "",
          "[Added Lines]",
          "973:  size_t length;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1061: static SECURITY_STATUS SEC_ENTRY ntlm_DecryptMessage(PCtxtHandle phContext, PSecBufferDesc pMessage,",
          "1062:                                                      ULONG MessageSeqNo, PULONG pfQOP)",
          "1063: {",
          "1066:  void* data;",
          "1067:  UINT32 SeqNo;",
          "1068:  UINT32 value;",
          "",
          "[Removed Lines]",
          "1064:  int index;",
          "1065:  int length;",
          "",
          "[Added Lines]",
          "1069:  ULONG index;",
          "1070:  size_t length;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1077:  SeqNo = (UINT32)MessageSeqNo;",
          "1078:  context = (NTLM_CONTEXT*)sspi_SecureHandleGetLowerPointer(phContext);",
          "1081:  {",
          "1082:   if (pMessage->pBuffers[index].BufferType == SECBUFFER_DATA)",
          "1083:    data_buffer = &pMessage->pBuffers[index];",
          "",
          "[Removed Lines]",
          "1080:  for (index = 0; index < (int)pMessage->cBuffers; index++)",
          "",
          "[Added Lines]",
          "1085:  for (index = 0; index < pMessage->cBuffers; index++)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: ULONG ntlm_av_pair_list_length(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)",
          "126: {",
          "127:  size_t cbAvPair;",
          "128:  NTLM_AV_PAIR* pAvPair;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  size_t size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:  if (!pAvPair)",
          "132:   return 0;",
          "135: }",
          "137: static INLINE BOOL ntlm_av_pair_get_len(const NTLM_AV_PAIR* pAvPair, size_t size, size_t* pAvLen)",
          "",
          "[Removed Lines]",
          "134:  return ((PBYTE)pAvPair - (PBYTE)pAvPairList) + sizeof(NTLM_AV_PAIR);",
          "",
          "[Added Lines]",
          "135:  size = ((PBYTE)pAvPair - (PBYTE)pAvPairList) + sizeof(NTLM_AV_PAIR);",
          "136:  WINPR_ASSERT(size <= ULONG_MAX);",
          "137:  return (ULONG)size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:  if (!pAvPair || cbAvPair < 2 * sizeof(NTLM_AV_PAIR) + AvLen)",
          "260:   return FALSE;",
          "263:  ntlm_av_pair_set_len(pAvPair, AvLen);",
          "264:  if (AvLen)",
          "265:  {",
          "",
          "[Removed Lines]",
          "262:  ntlm_av_pair_set_id(pAvPair, AvId);",
          "",
          "[Added Lines]",
          "265:  ntlm_av_pair_set_id(pAvPair, (UINT16)AvId);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:  if (!ntlm_av_pair_get_len(pAvPair, cbAvPair, &avLen))",
          "287:   return FALSE;",
          "289:  return ntlm_av_pair_add(pAvPairList, cbAvPairList, pair,",
          "291: }",
          "293: static int ntlm_get_target_computer_name(PUNICODE_STRING pName, COMPUTER_NAME_FORMAT type)",
          "",
          "[Removed Lines]",
          "290:                          ntlm_av_pair_get_value_pointer(pAvPair), avLen);",
          "",
          "[Added Lines]",
          "292:  WINPR_ASSERT(avLen <= UINT16_MAX);",
          "294:                          ntlm_av_pair_get_value_pointer(pAvPair), (UINT16)avLen);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "454: int ntlm_construct_challenge_target_info(NTLM_CONTEXT* context)",
          "455: {",
          "456:  int rc = -1;",
          "458:  ULONG AvPairsCount;",
          "459:  ULONG AvPairsLength;",
          "460:  NTLM_AV_PAIR* pAvPairList;",
          "",
          "[Removed Lines]",
          "457:  int length;",
          "",
          "[Added Lines]",
          "461:  ULONG length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "715:  if (context->SendSingleHostData)",
          "716:  {",
          "717:   if (!ntlm_av_pair_add(AuthenticateTargetInfo, cbAuthenticateTargetInfo, MsvAvSingleHost,",
          "719:    goto fail;",
          "720:  }",
          "",
          "[Removed Lines]",
          "718:                         (PBYTE)&context->SingleHostData, context->SingleHostData.Size))",
          "",
          "[Added Lines]",
          "721:   WINPR_ASSERT(context->SingleHostData.Size <= UINT16_MAX);",
          "723:                         (PBYTE)&context->SingleHostData,",
          "724:                         (UINT16)context->SingleHostData.Size))",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include \"../../log.h\"",
          "39: #define TAG WINPR_TAG(\"sspi.NTLM\")",
          "52: static const BYTE NTLM_NULL_BUFFER[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "53:                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };",
          "",
          "[Removed Lines]",
          "41: const char LM_MAGIC[] = \"KGS!@#$%\";",
          "43: static const char NTLM_CLIENT_SIGN_MAGIC[] =",
          "44:     \"session key to client-to-server signing key magic constant\";",
          "45: static const char NTLM_SERVER_SIGN_MAGIC[] =",
          "46:     \"session key to server-to-client signing key magic constant\";",
          "47: static const char NTLM_CLIENT_SEAL_MAGIC[] =",
          "48:     \"session key to client-to-server sealing key magic constant\";",
          "49: static const char NTLM_SERVER_SEAL_MAGIC[] =",
          "50:     \"session key to server-to-client sealing key magic constant\";",
          "",
          "[Added Lines]",
          "41: static const char LM_MAGIC[] = \"KGS!@#$%\";",
          "43: static char NTLM_CLIENT_SIGN_MAGIC[] = \"session key to client-to-server signing key magic constant\";",
          "44: static char NTLM_SERVER_SIGN_MAGIC[] = \"session key to server-to-client signing key magic constant\";",
          "45: static char NTLM_CLIENT_SEAL_MAGIC[] = \"session key to client-to-server sealing key magic constant\";",
          "46: static char NTLM_SERVER_SEAL_MAGIC[] = \"session key to server-to-client sealing key magic constant\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:  if (size > UINT32_MAX)",
          "140:   return -1;",
          "143:  challenge->AvPairs = (NTLM_AV_PAIR*)malloc(challenge->cbAvPairs);",
          "145:  if (!challenge->AvPairs)",
          "",
          "[Removed Lines]",
          "142:  challenge->cbAvPairs = size;",
          "",
          "[Added Lines]",
          "138:  challenge->cbAvPairs = (UINT32)size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:   WLog_ERR(TAG, \"Error: Could not find user in SAM database\");",
          "257:   return 0;",
          "258:  }",
          "262: }",
          "264: static int ntlm_convert_password_hash(NTLM_CONTEXT* context, BYTE* hash)",
          "265: {",
          "266:  int status;",
          "268:  char* PasswordHash = NULL;",
          "270:  SSPI_CREDENTIALS* credentials = context->credentials;",
          "273:  PasswordHashLength = credentials->identity.PasswordLength - SSPI_CREDENTIALS_HASH_LENGTH_OFFSET;",
          "274:  status = ConvertFromUnicode(CP_UTF8, 0, (LPCWSTR)credentials->identity.Password,",
          "277:  if (status <= 0)",
          "278:   return -1;",
          "282:  for (i = 0; i < 32; i += 2)",
          "283:  {",
          "287:  }",
          "289:  free(PasswordHash);",
          "",
          "[Removed Lines]",
          "260:  SamClose(sam);",
          "261:  return 1;",
          "267:  int i, hn, ln;",
          "269:  UINT32 PasswordHashLength = 0;",
          "275:                              PasswordHashLength, &PasswordHash, 0, NULL, NULL);",
          "280:  CharUpperBuffA(PasswordHash, PasswordHashLength);",
          "284:   hn = PasswordHash[i] > '9' ? PasswordHash[i] - 'A' + 10 : PasswordHash[i] - '0';",
          "285:   ln = PasswordHash[i + 1] > '9' ? PasswordHash[i + 1] - 'A' + 10 : PasswordHash[i + 1] - '0';",
          "286:   hash[i / 2] = (hn << 4) | ln;",
          "",
          "[Added Lines]",
          "260:  int i;",
          "262:  INT64 PasswordHashLength = 0;",
          "267:  WINPR_ASSERT(PasswordHashLength >= 0);",
          "268:  WINPR_ASSERT(PasswordHashLength <= INT_MAX);",
          "270:                              (int)PasswordHashLength, &PasswordHash, 0, NULL, NULL);",
          "275:  CharUpperBuffA(PasswordHash, (DWORD)PasswordHashLength);",
          "279:   BYTE hn =",
          "280:       (BYTE)(PasswordHash[i] > '9' ? PasswordHash[i] - 'A' + 10 : PasswordHash[i] - '0');",
          "281:   BYTE ln = (BYTE)(PasswordHash[i + 1] > '9' ? PasswordHash[i + 1] - 'A' + 10",
          "282:                                              : PasswordHash[i + 1] - '0');",
          "283:   hash[i / 2] = (BYTE)((hn << 4) | ln);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "492: {",
          "493:  WINPR_RC4_CTX* rc4 = winpr_RC4_New(key, 16);",
          "",
          "[Removed Lines]",
          "491: void ntlm_rc4k(BYTE* key, int length, BYTE* plaintext, BYTE* ciphertext)",
          "",
          "[Added Lines]",
          "488: void ntlm_rc4k(BYTE* key, size_t length, BYTE* plaintext, BYTE* ciphertext)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "601:                                      BYTE* signing_key)",
          "602: {",
          "604:  BYTE* value;",
          "605:  length = WINPR_MD5_DIGEST_LENGTH + sign_magic->cbBuffer;",
          "606:  value = (BYTE*)malloc(length);",
          "",
          "[Removed Lines]",
          "600: static int ntlm_generate_signing_key(BYTE* exported_session_key, PSecBuffer sign_magic,",
          "603:  int length;",
          "",
          "[Added Lines]",
          "597: static int ntlm_generate_signing_key(BYTE* exported_session_key, const SecBuffer* sign_magic,",
          "600:  size_t length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "631: void ntlm_generate_client_signing_key(NTLM_CONTEXT* context)",
          "632: {",
          "636:  ntlm_generate_signing_key(context->ExportedSessionKey, &signMagic, context->ClientSigningKey);",
          "637: }",
          "",
          "[Removed Lines]",
          "633:  SecBuffer signMagic;",
          "634:  signMagic.pvBuffer = (void*)NTLM_CLIENT_SIGN_MAGIC;",
          "635:  signMagic.cbBuffer = sizeof(NTLM_CLIENT_SIGN_MAGIC);",
          "",
          "[Added Lines]",
          "630:  const SecBuffer signMagic = { sizeof(NTLM_CLIENT_SIGN_MAGIC), 0, NTLM_CLIENT_SIGN_MAGIC };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "645: void ntlm_generate_server_signing_key(NTLM_CONTEXT* context)",
          "646: {",
          "650:  ntlm_generate_signing_key(context->ExportedSessionKey, &signMagic, context->ServerSigningKey);",
          "651: }",
          "",
          "[Removed Lines]",
          "647:  SecBuffer signMagic;",
          "648:  signMagic.pvBuffer = (void*)NTLM_SERVER_SIGN_MAGIC;",
          "649:  signMagic.cbBuffer = sizeof(NTLM_SERVER_SIGN_MAGIC);",
          "",
          "[Added Lines]",
          "642:  const SecBuffer signMagic = { sizeof(NTLM_SERVER_SIGN_MAGIC), 0, NTLM_SERVER_SIGN_MAGIC };",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "692: void ntlm_generate_client_sealing_key(NTLM_CONTEXT* context)",
          "693: {",
          "697:  ntlm_generate_signing_key(context->ExportedSessionKey, &sealMagic, context->ClientSealingKey);",
          "698: }",
          "",
          "[Removed Lines]",
          "694:  SecBuffer sealMagic;",
          "695:  sealMagic.pvBuffer = (void*)NTLM_CLIENT_SEAL_MAGIC;",
          "696:  sealMagic.cbBuffer = sizeof(NTLM_CLIENT_SEAL_MAGIC);",
          "",
          "[Added Lines]",
          "687:  const SecBuffer sealMagic = { sizeof(NTLM_CLIENT_SEAL_MAGIC), 0, NTLM_CLIENT_SEAL_MAGIC };",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "706: void ntlm_generate_server_sealing_key(NTLM_CONTEXT* context)",
          "707: {",
          "711:  ntlm_generate_signing_key(context->ExportedSessionKey, &sealMagic, context->ServerSealingKey);",
          "712: }",
          "",
          "[Removed Lines]",
          "708:  SecBuffer sealMagic;",
          "709:  sealMagic.pvBuffer = (void*)NTLM_SERVER_SEAL_MAGIC;",
          "710:  sealMagic.cbBuffer = sizeof(NTLM_SERVER_SEAL_MAGIC);",
          "",
          "[Added Lines]",
          "699:  const SecBuffer sealMagic = { sizeof(NTLM_SERVER_SEAL_MAGIC), 0, NTLM_SERVER_SEAL_MAGIC };",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.h||winpr/libwinpr/sspi/NTLM/ntlm_compute.h": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.h -> winpr/libwinpr/sspi/NTLM/ntlm_compute.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: int ntlm_compute_lm_v2_response(NTLM_CONTEXT* context);",
          "42: int ntlm_compute_ntlm_v2_response(NTLM_CONTEXT* context);",
          "45: void ntlm_generate_client_challenge(NTLM_CONTEXT* context);",
          "46: void ntlm_generate_server_challenge(NTLM_CONTEXT* context);",
          "47: void ntlm_generate_key_exchange_key(NTLM_CONTEXT* context);",
          "",
          "[Removed Lines]",
          "44: void ntlm_rc4k(BYTE* key, int length, BYTE* plaintext, BYTE* ciphertext);",
          "",
          "[Added Lines]",
          "44: void ntlm_rc4k(BYTE* key, size_t length, BYTE* plaintext, BYTE* ciphertext);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_export.h||winpr/libwinpr/sspi/NTLM/ntlm_export.h": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_export.h -> winpr/libwinpr/sspi/NTLM/ntlm_export.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #ifndef WINPR_SSPI_NTLM_EXPORT_H",
          "22: #define WINPR_SSPI_NTLM_EXPORT_H",
          "24: extern const SecPkgInfoA NTLM_SecPkgInfoA;",
          "25: extern const SecPkgInfoW NTLM_SecPkgInfoW;",
          "26: extern const SecurityFunctionTableA NTLM_SecurityFunctionTableA;",
          "27: extern const SecurityFunctionTableW NTLM_SecurityFunctionTableW;",
          "29: #endif",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:  }",
          "264:  length = Stream_GetPosition(s);",
          "268:  {",
          "269:   Stream_Free(s, FALSE);",
          "270:   return SEC_E_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "265:  buffer->cbBuffer = length;",
          "267:  if (!sspi_SecBufferAlloc(&context->NegotiateMessage, length))",
          "",
          "[Added Lines]",
          "265:  WINPR_ASSERT(length <= ULONG_MAX);",
          "266:  buffer->cbBuffer = (ULONG)length;",
          "268:  if (!sspi_SecBufferAlloc(&context->NegotiateMessage, (ULONG)length))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:   ntlm_write_version_info(s, &(message->Version));",
          "344:  length = Stream_GetPosition(s);",
          "348:  {",
          "349:   Stream_Free(s, FALSE);",
          "350:   return SEC_E_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "345:  buffer->cbBuffer = length;",
          "347:  if (!sspi_SecBufferAlloc(&context->NegotiateMessage, length))",
          "",
          "[Added Lines]",
          "346:  WINPR_ASSERT(length <= ULONG_MAX);",
          "347:  buffer->cbBuffer = (ULONG)length;",
          "349:  if (!sspi_SecBufferAlloc(&context->NegotiateMessage, (ULONG)length))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:  if (length > buffer->cbBuffer)",
          "463:   goto fail;",
          "466:   goto fail;",
          "468:  if (context->ChallengeMessage.pvBuffer)",
          "",
          "[Removed Lines]",
          "465:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
          "",
          "[Added Lines]",
          "467:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, (ULONG)length))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "621:   ntlm_write_message_fields_buffer(s, &(message->TargetInfo));",
          "623:  length = Stream_GetPosition(s);",
          "627:  {",
          "628:   Stream_Free(s, FALSE);",
          "629:   return SEC_E_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "624:  buffer->cbBuffer = length;",
          "626:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
          "",
          "[Added Lines]",
          "626:  WINPR_ASSERT(length <= ULONG_MAX);",
          "627:  buffer->cbBuffer = (ULONG)length;",
          "629:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, (ULONG)length))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "654:  size_t length;",
          "655:  UINT32 flags = 0;",
          "656:  NTLM_AV_PAIR* AvFlags = NULL;",
          "658:  NTLM_AUTHENTICATE_MESSAGE* message;",
          "659:  SSPI_CREDENTIALS* credentials = context->credentials;",
          "",
          "[Removed Lines]",
          "657:  UINT32 PayloadBufferOffset;",
          "",
          "[Added Lines]",
          "660:  size_t PayloadBufferOffset;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "773:  }",
          "775:  length = Stream_GetPosition(s);",
          "778:   goto fail;",
          "780:  CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);",
          "782:  Stream_SetPosition(s, PayloadBufferOffset);",
          "784:  if (flags & MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK)",
          "",
          "[Removed Lines]",
          "777:  if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))",
          "781:  buffer->cbBuffer = length;",
          "",
          "[Added Lines]",
          "779:  WINPR_ASSERT(length <= ULONG_MAX);",
          "781:  if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, (ULONG)length))",
          "785:  buffer->cbBuffer = (ULONG)length;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "988:  length = Stream_GetPosition(s);",
          "991:  {",
          "992:   Stream_Free(s, FALSE);",
          "993:   return SEC_E_INTERNAL_ERROR;",
          "994:  }",
          "996:  CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);",
          "999:  if (context->UseMIC)",
          "1000:  {",
          "",
          "[Removed Lines]",
          "990:  if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))",
          "997:  buffer->cbBuffer = length;",
          "",
          "[Added Lines]",
          "993:  WINPR_ASSERT(length <= ULONG_MAX);",
          "995:  if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, (ULONG)length))",
          "1002:  buffer->cbBuffer = (ULONG)length;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/Negotiate/negotiate.c||winpr/libwinpr/sspi/Negotiate/negotiate.c": [
          "File: winpr/libwinpr/sspi/Negotiate/negotiate.c -> winpr/libwinpr/sspi/Negotiate/negotiate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: {",
          "73:  if (_tcsnccmp(name, KERBEROS_SSP_NAME, ARRAYSIZE(KERBEROS_SSP_NAME)) == 0)",
          "74:  {",
          "77:   context->kerberos = TRUE;",
          "78:  }",
          "79:  else",
          "80:  {",
          "83:   context->kerberos = FALSE;",
          "84:  }",
          "85: }",
          "",
          "[Removed Lines]",
          "75:   context->sspiA = (SecurityFunctionTableA*)&KERBEROS_SecurityFunctionTableA;",
          "76:   context->sspiW = (SecurityFunctionTableW*)&KERBEROS_SecurityFunctionTableW;",
          "81:   context->sspiA = (SecurityFunctionTableA*)&NTLM_SecurityFunctionTableA;",
          "82:   context->sspiW = (SecurityFunctionTableW*)&NTLM_SecurityFunctionTableW;",
          "",
          "[Added Lines]",
          "75:   context->sspiA = (const SecurityFunctionTableA*)&KERBEROS_SecurityFunctionTableA;",
          "76:   context->sspiW = (const SecurityFunctionTableW*)&KERBEROS_SecurityFunctionTableW;",
          "81:   context->sspiA = (const SecurityFunctionTableA*)&NTLM_SecurityFunctionTableA;",
          "82:   context->sspiW = (const SecurityFunctionTableW*)&NTLM_SecurityFunctionTableW;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/Negotiate/negotiate.h||winpr/libwinpr/sspi/Negotiate/negotiate.h": [
          "File: winpr/libwinpr/sspi/Negotiate/negotiate.h -> winpr/libwinpr/sspi/Negotiate/negotiate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  CtxtHandle SubContext;",
          "47:  BOOL kerberos;",
          "50: };",
          "51: typedef struct _NEGOTIATE_CONTEXT NEGOTIATE_CONTEXT;",
          "",
          "[Removed Lines]",
          "48:  SecurityFunctionTableA* sspiA;",
          "49:  SecurityFunctionTableW* sspiW;",
          "",
          "[Added Lines]",
          "48:  const SecurityFunctionTableA* sspiA;",
          "49:  const SecurityFunctionTableW* sspiW;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/sspi_winpr.c||winpr/libwinpr/sspi/sspi_winpr.c": [
          "File: winpr/libwinpr/sspi/sspi_winpr.c -> winpr/libwinpr/sspi/sspi_winpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: extern const SecPkgInfoA KERBEROS_SecPkgInfoA;",
          "47: extern const SecPkgInfoW KERBEROS_SecPkgInfoW;",
          "",
          "[Removed Lines]",
          "41: extern const SecPkgInfoA NTLM_SecPkgInfoA;",
          "42: extern const SecPkgInfoW NTLM_SecPkgInfoW;",
          "43: extern const SecurityFunctionTableA NTLM_SecurityFunctionTableA;",
          "44: extern const SecurityFunctionTableW NTLM_SecurityFunctionTableW;",
          "",
          "[Added Lines]",
          "41: #include \"NTLM/ntlm_export.h\"",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/collections/ArrayList.c||winpr/libwinpr/utils/collections/ArrayList.c": [
          "File: winpr/libwinpr/utils/collections/ArrayList.c -> winpr/libwinpr/utils/collections/ArrayList.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:  WINPR_ASSERT(arrayList);",
          "286:  if (!ArrayList_Append(arrayList, obj))",
          "287:   return -1;",
          "289: }",
          "",
          "[Removed Lines]",
          "288:  return ArrayList_Count(arrayList) - 1;",
          "",
          "[Added Lines]",
          "288:  return (int)ArrayList_Count(arrayList) - 1;",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/ntlm.c||winpr/libwinpr/utils/ntlm.c": [
          "File: winpr/libwinpr/utils/ntlm.c -> winpr/libwinpr/utils/ntlm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #endif",
          "24: #include <winpr/ntlm.h>",
          "26: #include <winpr/crt.h>",
          "27: #include <winpr/crypto.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <winpr/assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:  if (!(PasswordW = (LPWSTR)calloc(PasswordLength, 2)))",
          "56:   return FALSE;",
          "60:  if (!NTOWFv1W(PasswordW, PasswordLength * 2, NtHash))",
          "61:   goto out_fail;",
          "",
          "[Removed Lines]",
          "58:  MultiByteToWideChar(CP_ACP, 0, Password, PasswordLength, PasswordW, PasswordLength);",
          "",
          "[Added Lines]",
          "59:  WINPR_ASSERT(PasswordLength <= INT_MAX);",
          "60:  MultiByteToWideChar(CP_ACP, 0, Password, (int)PasswordLength, PasswordW, (int)PasswordLength);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:  if (!UserW || !DomainW || !PasswordW)",
          "106:   goto out_fail;",
          "112:  if (!NTOWFv2W(PasswordW, PasswordLength * 2, UserW, UserLength * 2, DomainW, DomainLength * 2,",
          "113:                NtHash))",
          "",
          "[Removed Lines]",
          "108:  MultiByteToWideChar(CP_ACP, 0, User, UserLength, UserW, UserLength);",
          "109:  MultiByteToWideChar(CP_ACP, 0, Domain, DomainLength, DomainW, DomainLength);",
          "110:  MultiByteToWideChar(CP_ACP, 0, Password, PasswordLength, PasswordW, PasswordLength);",
          "",
          "[Added Lines]",
          "110:  WINPR_ASSERT(UserLength <= INT_MAX);",
          "111:  WINPR_ASSERT(DomainLength <= INT_MAX);",
          "112:  WINPR_ASSERT(PasswordLength <= INT_MAX);",
          "113:  MultiByteToWideChar(CP_ACP, 0, User, (int)UserLength, UserW, (int)UserLength);",
          "114:  MultiByteToWideChar(CP_ACP, 0, Domain, (int)DomainLength, DomainW, (int)DomainLength);",
          "115:  MultiByteToWideChar(CP_ACP, 0, Password, (int)PasswordLength, PasswordW, (int)PasswordLength);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:  if (!UserW || !DomainW)",
          "171:   goto out_fail;",
          "176:  if (!NTOWFv2FromHashW(NtHashV1, UserW, UserLength * 2, DomainW, DomainLength * 2, NtHash))",
          "177:   goto out_fail;",
          "",
          "[Removed Lines]",
          "173:  MultiByteToWideChar(CP_ACP, 0, User, UserLength, UserW, UserLength);",
          "174:  MultiByteToWideChar(CP_ACP, 0, Domain, DomainLength, DomainW, DomainLength);",
          "",
          "[Added Lines]",
          "178:  WINPR_ASSERT(UserLength <= INT_MAX);",
          "179:  WINPR_ASSERT(DomainLength <= INT_MAX);",
          "180:  MultiByteToWideChar(CP_ACP, 0, User, (int)UserLength, UserW, (int)UserLength);",
          "181:  MultiByteToWideChar(CP_ACP, 0, Domain, (int)DomainLength, DomainW, (int)DomainLength);",
          "",
          "---------------"
        ]
      }
    }
  ]
}