{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2cd02a5d2a4ea33cd40a3032a2041447adc4d772",
      "candidate_info": {
        "commit_hash": "2cd02a5d2a4ea33cd40a3032a2041447adc4d772",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2cd02a5d2a4ea33cd40a3032a2041447adc4d772",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_win.c"
        ],
        "message": "Add assert()s in os_win.c in an effort to silence false-positives from static analyzers.\n\nFossilOrigin-Name: 22a7c15b262376fb0ce4dd3d044373380d86c5ccd96e2f24576cf04318597c33",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_win.c||src/os_win.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2422534908a85a4cd11784e4c23a74ad121404f73dade587bf27efde1e2b982b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4215:     rc = winOpenSharedMemory(pDbFd);",
          "4216:     if( rc!=SQLITE_OK ) return rc;",
          "4217:     pShm = pDbFd->pShm;",
          "4218:   }",
          "4219:   pShmNode = pShm->pShmNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4218:     assert( pShm!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4517:       }",
          "4518:     }",
          "4519:     if( pFd->mmapSize >= iOff+nAmt ){",
          "4521:       pFd->nFetchOut++;",
          "4522:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4521:       assert( pFd->pMapRegion!=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4485ac1a25e9919b5911a0db2ad7bed58be143d6",
      "candidate_info": {
        "commit_hash": "4485ac1a25e9919b5911a0db2ad7bed58be143d6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4485ac1a25e9919b5911a0db2ad7bed58be143d6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "The previous fix was incomplete.  It is also necessary to disable the Expr.y.pTab field when making the translation.\n\nFossilOrigin-Name: b99d5701312f7472e6b606bd824f9273617e2655920485bf50aa96d408064721",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e0f7e321eca91c49102649f70728de69347cbd7b16599b854203c24cfdc348e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1139:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
          "1140:       pExpr->iTable = pX->iIdxCur;",
          "1141:       pExpr->iColumn = pX->iIdxCol;",
          "1142:     }",
          "1143:   }",
          "1144:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1142:       pExpr->y.pTab = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d406d0726267d7691e7ce121da100e941bc0845a",
      "candidate_info": {
        "commit_hash": "d406d0726267d7691e7ce121da100e941bc0845a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d406d0726267d7691e7ce121da100e941bc0845a",
        "files": [
          "ext/fts5/fts5_hash.c",
          "ext/fts5/test/fts5aa.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a buffer overread that could occur when running fts5 prefix queries inside a transaction.\n\nFossilOrigin-Name: b3fa58dd7403dbd4d2e9f3ae23d7d1337830d6fef2aa2f137ac5174de0d5828e",
        "before_after_code_files": [
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:   for(iSlot=0; iSlot<pHash->nSlot; iSlot++){",
          "457:     Fts5HashEntry *pIter;",
          "458:     for(pIter=pHash->aSlot[iSlot]; pIter; pIter=pIter->pHashNext){",
          "460:         Fts5HashEntry *pEntry = pIter;",
          "461:         pEntry->pScanNext = 0;",
          "462:         for(i=0; ap[i]; i++){",
          "",
          "[Removed Lines]",
          "459:       if( pTerm==0 || 0==memcmp(fts5EntryKey(pIter), pTerm, nTerm) ){",
          "",
          "[Added Lines]",
          "459:       if( pTerm==0",
          "460:        || (pIter->nKey+1>=nTerm && 0==memcmp(fts5EntryKey(pIter), pTerm, nTerm))",
          "461:       ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test": [
          "File: ext/fts5/test/fts5aa.test -> ext/fts5/test/fts5aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:     SELECT * FROM t12('aaaa');",
          "623: } {aaaa}",
          "625: }",
          "627: expand_all_sql db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625: #-------------------------------------------------------------------------",
          "626: do_execsql_test 25.0 {",
          "627:   CREATE VIRTUAL TABLE t13 USING fts5(x, detail=%DETAIL%);",
          "628: }",
          "629: do_execsql_test 25.1 {",
          "630:   BEGIN;",
          "631:   INSERT INTO t13 VALUES('AAAA');",
          "632: SELECT * FROM t13('BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB*');",
          "634:   END;",
          "635: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45c73deb440496e848cb24d4c1326d4105dacfee8bbafb115e567051855e6518",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99490934aeac3111eb3043865d986d90d560ac71",
      "candidate_info": {
        "commit_hash": "99490934aeac3111eb3043865d986d90d560ac71",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/99490934aeac3111eb3043865d986d90d560ac71",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Move variable declaration to address compilation issue (C89).\n\nFossilOrigin-Name: d64f248da3ce7762fe2c17fbc83f7bea9ffca73723bb3ad0982a85320839da90",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4002790d9418289f3e090c694f651a89d8f523119c8ce2f396999b0387148241",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3905: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3906:     else",
          "3907:     if( p->openMode==SHELL_OPEN_DESERIALIZE || p->openMode==SHELL_OPEN_HEXDB ){",
          "3908:       int nData = 0;",
          "3909:       unsigned char *aData;",
          "3910:       if( p->openMode==SHELL_OPEN_DESERIALIZE ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3908:       int rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3916:           return;",
          "3917:         }",
          "3918:       }",
          "3920:                    SQLITE_DESERIALIZE_RESIZEABLE |",
          "3921:                    SQLITE_DESERIALIZE_FREEONCLOSE);",
          "3922:       if( rc ){",
          "",
          "[Removed Lines]",
          "3919:       int rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "",
          "[Added Lines]",
          "3920:       rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
      "candidate_info": {
        "commit_hash": "750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming tables when the schema contains WINDOW definitions with (illegal) non-numeric expressions as part of a PRECEDING or FOLLOWING clause.\n\nFossilOrigin-Name: 348e7f193a963390a0595183d603541f85c5d1a911c98ed2e06599691ffe98f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee076c28d8ee0f5b099cdef83ae6cea6ef5aa209ab528d7c49949dd653ce019c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:   }",
          "32:   return WRC_Continue;",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     if( sqlite3WalkExpr(pWalker, pWin->pStart) ) return WRC_Abort;",
          "32:     if( sqlite3WalkExpr(pWalker, pWin->pEnd) ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:   END}",
          "274: }",
          "276: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #-------------------------------------------------------------------------",
          "278: reset_db",
          "279: do_execsql_test 12.1 {",
          "280: CREATE TABLE t1(a,b,c,d,e,f,g,h,j,jj,Zjj,k,aQ,bb,cc,dd,ee DEFAULT 3.14,",
          "281: ff DEFAULT('hiccup'),gg NOD NULL DEFAULT(false));",
          "282: CREATE TRIGGER AFTER INSERT ON t1 WHEN new.a NOT NULL BEGIN",
          "284: SELECT b () OVER , dense_rank() OVER d, d () OVER w1",
          "285: FROM t1",
          "286: WINDOW",
          "287: w1 AS",
          "288: ( w1 ORDER BY d",
          "289: ROWS BETWEEN 2 NOT IN(SELECT a, sum(d) w2,max(d)OVER FROM t1",
          "290: WINDOW",
          "291: w1 AS",
          "292: (PARTITION BY d",
          "293: ROWS BETWEEN '' PRECEDING AND false FOLLOWING),",
          "294: d AS",
          "295: (PARTITION BY b ORDER BY d",
          "296: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "297: ) PRECEDING AND 1 FOLLOWING),",
          "298: w2 AS",
          "299: (PARTITION BY b ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),",
          "300: w3 AS",
          "301: (PARTITION BY b ORDER BY d",
          "302: ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "303: ;",
          "304: SELECT a, sum(d) w2,max(d)OVER FROM t1",
          "305: WINDOW",
          "306: w1 AS",
          "307: (PARTITION BY d",
          "308: ROWS BETWEEN '' PRECEDING AND false FOLLOWING),",
          "309: d AS",
          "310: (PARTITION BY b ORDER BY d",
          "311: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "312: ;",
          "314: END;",
          "315: }",
          "317: do_execsql_test 12.2 {",
          "318:   ALTER TABLE t1 RENAME TO t1x;",
          "319: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}