{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9c34bc0ad53a05cb4ea4b59e64e956564404b5c7",
      "candidate_info": {
        "commit_hash": "9c34bc0ad53a05cb4ea4b59e64e956564404b5c7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c34bc0ad53a05cb4ea4b59e64e956564404b5c7",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another corruption related buffer overread in the sqlite_dbdata module.\n\nFossilOrigin-Name: 5cd728fb6b3a70f795306d4d6e12151a4de327f801733a8558139e3cd76fe66a",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   pCsr->iCell = 0;",
          "279:   pCsr->iField = 0;",
          "280:   pCsr->bOnePage = 0;",
          "281: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:   sqlite3_free(pCsr->aPage);",
          "282:   sqlite3_free(pCsr->pRec);",
          "283:   pCsr->pRec = 0;",
          "284:   pCsr->aPage = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:   while( 1 ){",
          "460:     int rc;",
          "461:     int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "463:     if( pCsr->aPage==0 ){",
          "464:       while( 1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     int bNextPage = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:         int iHdr;",
          "496:         int U, X;",
          "497:         int nLocal;",
          "500:         switch( pCsr->aPage[iOff] ){",
          "501:           case 0x02:",
          "",
          "[Removed Lines]",
          "498:         int bNextPage = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "603:             pCsr->iField = (bHasRowid ? -1 : 0);",
          "604:           }",
          "605:         }",
          "614:       }else{",
          "615:         pCsr->iField++;",
          "616:         if( pCsr->iField>0 ){",
          "617:           sqlite3_int64 iType;",
          "620:         }",
          "621:       }",
          "625:       }",
          "632:     }",
          "633:   }",
          "",
          "[Removed Lines]",
          "607:         if( bNextPage ){",
          "608:           sqlite3_free(pCsr->aPage);",
          "609:           pCsr->aPage = 0;",
          "610:           if( pCsr->bOnePage ) return SQLITE_OK;",
          "611:           pCsr->iPgno++;",
          "612:           continue;",
          "613:         }",
          "618:           pCsr->pHdrPtr += dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "619:           pCsr->pPtr += dbdataValueBytes(iType);",
          "623:       if( pCsr->iField<0 || pCsr->pHdrPtr<&pCsr->pRec[pCsr->nHdr] ){",
          "624:         return SQLITE_OK;",
          "629:       sqlite3_free(pCsr->pRec);",
          "630:       pCsr->pRec = 0;",
          "631:       pCsr->iCell++;",
          "",
          "[Added Lines]",
          "614:           if( pCsr->pHdrPtr>&pCsr->pRec[pCsr->nRec] ){",
          "615:             bNextPage = 1;",
          "616:           }else{",
          "617:             pCsr->pHdrPtr += dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "618:             pCsr->pPtr += dbdataValueBytes(iType);",
          "619:           }",
          "623:       if( bNextPage ){",
          "624:         sqlite3_free(pCsr->aPage);",
          "625:         sqlite3_free(pCsr->pRec);",
          "626:         pCsr->aPage = 0;",
          "627:         pCsr->pRec = 0;",
          "628:         if( pCsr->bOnePage ) return SQLITE_OK;",
          "629:         pCsr->iPgno++;",
          "630:       }else{",
          "631:         if( pCsr->iField<0 || pCsr->pHdrPtr<&pCsr->pRec[pCsr->nHdr] ){",
          "632:           return SQLITE_OK;",
          "633:         }",
          "637:         sqlite3_free(pCsr->pRec);",
          "638:         pCsr->pRec = 0;",
          "639:         pCsr->iCell++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "737:           iOff += 8;",
          "738:         }else{",
          "739:           iOff += 12 + pCsr->iCell*2;",
          "740:           iOff = get_uint16(&pCsr->aPage[iOff]);",
          "741:         }",
          "743:         break;",
          "744:       }",
          "745:     }",
          "",
          "[Removed Lines]",
          "742:         sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));",
          "",
          "[Added Lines]",
          "749:           if( iOff>pCsr->nPage ) return SQLITE_OK;",
          "752:         if( iOff<=pCsr->nPage ){",
          "753:           sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));",
          "754:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dbc6a9f7f67256dea96d3245e7bec145ba65d64adf322e18f1f3ac9556b4e0b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0de6efe59ee54518f2590d7d5eb8f55a374b9811",
      "candidate_info": {
        "commit_hash": "0de6efe59ee54518f2590d7d5eb8f55a374b9811",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0de6efe59ee54518f2590d7d5eb8f55a374b9811",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/delete.c",
          "src/expr.c",
          "src/fkey.c",
          "src/insert.c",
          "src/pragma.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/update.c",
          "src/vdbe.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "src/where.c",
          "src/wherecode.c",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Merge enhancements and bug fixes from trunk.\n\nFossilOrigin-Name: 9fb646f29c05bca5f677a2c7c4f45c36bfe0a0c6a88cb7968b4a0459bdd63bb2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/fkey.c||src/fkey.c",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/update.c||src/update.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0f1b9ff9e1e6f13e03045fcb7d0907227085054f9eb0b0b8471fb26b0094b13a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1156:     addrNextRow = sqlite3VdbeCurrentAddr(v);",
          "1158:     if( nColTest>0 ){",
          "1161:       aGotoChng = sqlite3DbMallocRawNN(db, sizeof(int)*nColTest);",
          "1162:       if( aGotoChng==0 ) continue;",
          "",
          "[Removed Lines]",
          "1159:       int endDistinctTest = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1159:       int endDistinctTest = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:     if( eOnePass!=ONEPASS_OFF ){",
          "521:     }else{",
          "522:       sqlite3WhereEnd(pWInfo);",
          "523:     }",
          "",
          "[Removed Lines]",
          "520:       addrBypass = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "520:       addrBypass = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:   opSeek = HasRowid(pTab) ? OP_NotExists : OP_NotFound;",
          "711:   if( eMode==ONEPASS_OFF ){",
          "712:     sqlite3VdbeAddOp4Int(v, opSeek, iDataCur, iLabel, iPk, nPk);",
          "",
          "[Removed Lines]",
          "709:   iLabel = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "709:   iLabel = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   int regLeft = 0;",
          "554:   int regRight = 0;",
          "555:   u8 opx = op;",
          "558:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "559:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "556:   int addrDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "556:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3093:   if( eType==IN_INDEX_NOOP ){",
          "3094:     ExprList *pList = pExpr->x.pList;",
          "3095:     CollSeq *pColl = sqlite3ExprCollSeq(pParse, pExpr->pLeft);",
          "3097:     int r2, regToFree;",
          "3098:     int regCkNull = 0;",
          "3099:     int ii;",
          "",
          "[Removed Lines]",
          "3096:     int labelOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3096:     int labelOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3137:   if( destIfNull==destIfFalse ){",
          "3138:     destStep2 = destIfFalse;",
          "3139:   }else{",
          "3141:   }",
          "3142:   for(i=0; i<nVector; i++){",
          "3143:     Expr *p = sqlite3VectorFieldSubexpr(pExpr->pLeft, i);",
          "",
          "[Removed Lines]",
          "3140:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3140:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3195:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, iTab, destIfFalse);",
          "3196:   VdbeCoverage(v);",
          "3197:   if( nVector>1 ){",
          "3199:   }else{",
          "",
          "[Removed Lines]",
          "3198:     destNotNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3198:     destNotNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3762:       if( pDef->funcFlags & SQLITE_FUNC_COALESCE ){",
          "3764:         assert( nFarg>=2 );",
          "3765:         sqlite3ExprCode(pParse, pFarg->a[0].pExpr, target);",
          "3766:         for(i=1; i<nFarg; i++){",
          "",
          "[Removed Lines]",
          "3763:         int endCoalesce = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3763:         int endCoalesce = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3908:       return pExpr->pLeft->iTable + pExpr->iColumn;",
          "3909:     }",
          "3910:     case TK_IN: {",
          "3913:       sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3914:       sqlite3ExprCodeIN(pParse, pExpr, destIfFalse, destIfNull);",
          "3915:       sqlite3VdbeAddOp2(v, OP_Integer, 1, target);",
          "",
          "[Removed Lines]",
          "3911:       int destIfFalse = sqlite3VdbeMakeLabel(v);",
          "3912:       int destIfNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3911:       int destIfFalse = sqlite3VdbeMakeLabel(pParse);",
          "3912:       int destIfNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4049:       pEList = pExpr->x.pList;",
          "4050:       aListelem = pEList->a;",
          "4051:       nExpr = pEList->nExpr;",
          "4053:       if( (pX = pExpr->pLeft)!=0 ){",
          "4054:         tempX = *pX;",
          "4055:         testcase( pX->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "4052:       endLabel = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4052:       endLabel = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4072:         }else{",
          "4073:           pTest = aListelem[i].pExpr;",
          "4074:         }",
          "4076:         testcase( pTest->op==TK_COLUMN );",
          "4077:         sqlite3ExprIfFalse(pParse, pTest, nextCase, SQLITE_JUMPIFNULL);",
          "4078:         testcase( aListelem[i+1].pExpr->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "4075:         nextCase = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4075:         nextCase = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4441:   op = pExpr->op;",
          "4442:   switch( op ){",
          "4443:     case TK_AND: {",
          "4445:       testcase( jumpIfNull==0 );",
          "4446:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,jumpIfNull^SQLITE_JUMPIFNULL);",
          "4447:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Removed Lines]",
          "4444:       int d2 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4444:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4527:     }",
          "4528: #ifndef SQLITE_OMIT_SUBQUERY",
          "4529:     case TK_IN: {",
          "4531:       int destIfNull = jumpIfNull ? dest : destIfFalse;",
          "4532:       sqlite3ExprCodeIN(pParse, pExpr, destIfFalse, destIfNull);",
          "4533:       sqlite3VdbeGoto(v, dest);",
          "",
          "[Removed Lines]",
          "4530:       int destIfFalse = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4530:       int destIfFalse = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4614:       break;",
          "4615:     }",
          "4616:     case TK_OR: {",
          "4618:       testcase( jumpIfNull==0 );",
          "4619:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2, jumpIfNull^SQLITE_JUMPIFNULL);",
          "4620:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Removed Lines]",
          "4617:       int d2 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4617:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4698:       if( jumpIfNull ){",
          "4699:         sqlite3ExprCodeIN(pParse, pExpr, dest, dest);",
          "4700:       }else{",
          "4702:         sqlite3ExprCodeIN(pParse, pExpr, dest, destIfNull);",
          "4703:         sqlite3VdbeResolveLabel(v, destIfNull);",
          "4704:       }",
          "",
          "[Removed Lines]",
          "4701:         int destIfNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4701:         int destIfNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:         if( p->isDeferred || (db->flags & SQLITE_DeferFKs) ) break;",
          "730:       }",
          "731:       if( !p ) return;",
          "733:       sqlite3VdbeAddOp2(v, OP_FkIfZero, 1, iSkip); VdbeCoverage(v);",
          "734:     }",
          "",
          "[Removed Lines]",
          "732:       iSkip = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "732:       iSkip = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:   if( tmask & TRIGGER_BEFORE ){",
          "871:     int regCols = sqlite3GetTempRange(pParse, pTab->nCol+1);",
          "",
          "[Removed Lines]",
          "869:   endOfLoop = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "869:   endOfLoop = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1356:     switch( onError ){",
          "1357:       case OE_Replace: {",
          "1358:         assert( onError==OE_Replace );",
          "1360:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1361:           VdbeCoverage(v);",
          "1362:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "",
          "[Removed Lines]",
          "1359:         addr1 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1359:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1408:         continue;",
          "1409:       }",
          "1411:       sqlite3VdbeVerifyAbortable(v, onError);",
          "1412:       sqlite3ExprIfTrue(pParse, pExpr, allOk, SQLITE_JUMPIFNULL);",
          "1413:       if( onError==OE_Ignore ){",
          "",
          "[Removed Lines]",
          "1410:       allOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1410:       allOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1476:   if( pkChng && pPk==0 ){",
          "1480:     onError = pTab->keyConf;",
          "",
          "[Removed Lines]",
          "1477:     int addrRowidOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1477:     int addrRowidOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1624:       VdbeComment((v, \"Skip upsert subroutine\"));",
          "1625:       sqlite3VdbeJumpHere(v, upsertJump);",
          "1626:     }else{",
          "1628:     }",
          "1629:     if( bAffinityDone==0 && (pUpIdx==0 || pUpIdx==pIdx) ){",
          "1630:       sqlite3TableAffinity(v, pTab, regNewData+1);",
          "",
          "[Removed Lines]",
          "1627:       addrUniqueOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1627:       addrUniqueOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1376:           x = sqlite3FkLocateIndex(pParse, pParent, pFK, &pIdx, &aiCols);",
          "1377:           assert( x==0 );",
          "1378:         }",
          "",
          "[Removed Lines]",
          "1379:         addrOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1379:         addrOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1596:         if( pTab->pCheck && (db->flags & SQLITE_IgnoreChecks)==0 ){",
          "1597:           ExprList *pCheck = sqlite3ExprListDup(db, pTab->pCheck, 0);",
          "1598:           if( db->mallocFailed==0 ){",
          "1601:             char *zErr;",
          "1602:             int k;",
          "1603:             pParse->iSelfTab = iDataCur + 1;",
          "",
          "[Removed Lines]",
          "1599:             int addrCkFault = sqlite3VdbeMakeLabel(v);",
          "1600:             int addrCkOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1599:             int addrCkFault = sqlite3VdbeMakeLabel(pParse);",
          "1600:             int addrCkOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1621:           for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){",
          "1622:             int jmp2, jmp3, jmp4, jmp5;",
          "1624:             if( pPk==pIdx ) continue;",
          "1625:             r1 = sqlite3GenerateIndexKey(pParse, pIdx, iDataCur, 0, 0, &jmp3,",
          "1626:                                          pPrior, r1);",
          "",
          "[Removed Lines]",
          "1623:             int ckUniq = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1623:             int ckUniq = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1643:             if( IsUniqueIndex(pIdx) ){",
          "1645:               int jmp6;",
          "1646:               int kk;",
          "1647:               for(kk=0; kk<pIdx->nKeyCol; kk++){",
          "",
          "[Removed Lines]",
          "1644:               int uniqOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1644:               int uniqOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "631:   }",
          "632:   assert( pSelect->iOffset==0 || pSelect->iLimit!=0 );",
          "633:   iLimit = pSelect->iOffset ? pSelect->iOffset+1 : pSelect->iLimit;",
          "635:   sqlite3ExprCodeExprList(pParse, pSort->pOrderBy, regBase, regOrigData,",
          "636:                           SQLITE_ECEL_DUP | (regOrigData? SQLITE_ECEL_REF : 0));",
          "637:   if( bSeq ){",
          "",
          "[Removed Lines]",
          "634:   pSort->labelDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "634:   pSort->labelDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:                                            pKI->nAllField-pKI->nKeyField-1);",
          "671:     addrJmp = sqlite3VdbeCurrentAddr(v);",
          "672:     sqlite3VdbeAddOp3(v, OP_Jump, addrJmp+1, 0, addrJmp+1); VdbeCoverage(v);",
          "674:     pSort->regReturn = ++pParse->nMem;",
          "675:     sqlite3VdbeAddOp2(v, OP_Gosub, pSort->regReturn, pSort->labelBkOut);",
          "676:     sqlite3VdbeAddOp1(v, OP_ResetSorter, pSort->iECursor);",
          "",
          "[Removed Lines]",
          "673:     pSort->labelBkOut = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "673:     pSort->labelBkOut = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2329:   if( sqlite3AuthCheck(pParse, SQLITE_RECURSIVE, 0, 0, 0) ) return;",
          "2334:   computeLimitRegisters(pParse, p, addrBreak);",
          "2335:   pLimit = p->pLimit;",
          "",
          "[Removed Lines]",
          "2332:   addrBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2332:   addrBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2399:   sqlite3VdbeAddOp1(v, OP_Delete, iQueue);",
          "2403:   codeOffset(v, regOffset, addrCont);",
          "2404:   selectInnerLoop(pParse, p, iCurrent,",
          "2405:       0, 0, pDest, addrCont, addrBreak);",
          "",
          "[Removed Lines]",
          "2402:   addrCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2402:   addrCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2707:         if( dest.eDest!=priorOp ){",
          "2708:           int iCont, iBreak, iStart;",
          "2709:           assert( p->pEList );",
          "2712:           computeLimitRegisters(pParse, p, iBreak);",
          "2713:           sqlite3VdbeAddOp2(v, OP_Rewind, unionTab, iBreak); VdbeCoverage(v);",
          "2714:           iStart = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2710:           iBreak = sqlite3VdbeMakeLabel(v);",
          "2711:           iCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2710:           iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2711:           iCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2778:         assert( p->pEList );",
          "2781:         computeLimitRegisters(pParse, p, iBreak);",
          "2782:         sqlite3VdbeAddOp2(v, OP_Rewind, tab1, iBreak); VdbeCoverage(v);",
          "2783:         r1 = sqlite3GetTempReg(pParse);",
          "",
          "[Removed Lines]",
          "2779:         iBreak = sqlite3VdbeMakeLabel(v);",
          "2780:         iCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2779:         iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2780:         iCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2907:   int addr;",
          "2909:   addr = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2910:   iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2910:   iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3144:   db = pParse->db;",
          "3145:   v = pParse->pVdbe;",
          "",
          "[Removed Lines]",
          "3147:   labelEnd = sqlite3VdbeMakeLabel(v);",
          "3148:   labelCmpr = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3147:   labelEnd = sqlite3VdbeMakeLabel(pParse);",
          "3148:   labelCmpr = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5330:       regAgg = 0;",
          "5331:     }",
          "5332:     if( pF->iDistinct>=0 ){",
          "5336:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5333:       addrNext = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "5333:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6042:   if( (p->selFlags & SF_FixedLimit)==0 ){",
          "6044:   }",
          "",
          "[Removed Lines]",
          "6041:   iEnd = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6041:   iEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6105:     assert( p->pEList==pEList );",
          "6106: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6107:     if( pWin ){",
          "6111:       int regGosub = ++pParse->nMem;",
          "6113:       sqlite3WindowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "6108:       int addrGosub = sqlite3VdbeMakeLabel(v);",
          "6109:       int iCont = sqlite3VdbeMakeLabel(v);",
          "6110:       int iBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6108:       int addrGosub = sqlite3VdbeMakeLabel(pParse);",
          "6109:       int iCont = sqlite3VdbeMakeLabel(pParse);",
          "6110:       int iBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6182:     }",
          "",
          "[Removed Lines]",
          "6185:     addrEnd = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6185:     addrEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6271:       iUseFlag = ++pParse->nMem;",
          "6272:       iAbortFlag = ++pParse->nMem;",
          "6273:       regOutputRow = ++pParse->nMem;",
          "6275:       regReset = ++pParse->nMem;",
          "6277:       iAMem = pParse->nMem + 1;",
          "6278:       pParse->nMem += pGroupBy->nExpr;",
          "6279:       iBMem = pParse->nMem + 1;",
          "",
          "[Removed Lines]",
          "6274:       addrOutputRow = sqlite3VdbeMakeLabel(v);",
          "6276:       addrReset = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6274:       addrOutputRow = sqlite3VdbeMakeLabel(pParse);",
          "6276:       addrReset = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:       if( SQLITE_OK==sqlite3ResolveExprNames(&sNC, pWhen)",
          "945:        && db->mallocFailed==0",
          "946:       ){",
          "948:         sqlite3ExprIfFalse(pSubParse, pWhen, iEndTrigger, SQLITE_JUMPIFNULL);",
          "949:       }",
          "950:       sqlite3ExprDelete(db, pWhen);",
          "",
          "[Removed Lines]",
          "947:         iEndTrigger = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "947:         iEndTrigger = sqlite3VdbeMakeLabel(pSubParse);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441: #endif",
          "",
          "[Removed Lines]",
          "444:   labelContinue = labelBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "444:   labelContinue = labelBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:         VdbeCoverage(v);",
          "577:       }",
          "578:       if( eOnePass!=ONEPASS_SINGLE ){",
          "580:       }",
          "581:       sqlite3VdbeAddOp2(v, OP_IsNull, pPk ? regKey : regOldRowid, labelBreak);",
          "582:       VdbeCoverageIf(v, pPk==0);",
          "583:       VdbeCoverageIf(v, pPk!=0);",
          "584:     }else if( pPk ){",
          "586:       sqlite3VdbeAddOp2(v, OP_Rewind, iEph, labelBreak); VdbeCoverage(v);",
          "587:       addrTop = sqlite3VdbeAddOp2(v, OP_RowData, iEph, regKey);",
          "588:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, labelContinue, regKey, 0);",
          "",
          "[Removed Lines]",
          "579:         labelContinue = sqlite3VdbeMakeLabel(v);",
          "585:       labelContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "579:         labelContinue = sqlite3VdbeMakeLabel(pParse);",
          "585:       labelContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3660:       SQLITE_OPEN_TRANSIENT_DB;",
          "3661:   assert( pOp->p1>=0 );",
          "3662:   assert( pOp->p2>=0 );",
          "3689:       }",
          "3696:     }",
          "3697:   }",
          "3698:   if( rc ) goto abort_due_to_error;",
          "3700:   break;",
          "3701: }",
          "",
          "[Removed Lines]",
          "3663:   pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_BTREE);",
          "3664:   if( pCx==0 ) goto no_mem;",
          "3665:   pCx->nullRow = 1;",
          "3666:   pCx->isEphemeral = 1;",
          "3667:   rc = sqlite3BtreeOpen(db->pVfs, 0, db, &pCx->pBtx,",
          "3668:                         BTREE_OMIT_JOURNAL | BTREE_SINGLE | pOp->p5, vfsFlags);",
          "3669:   if( rc==SQLITE_OK ){",
          "3670:     rc = sqlite3BtreeBeginTrans(pCx->pBtx, 1, 0);",
          "3671:   }",
          "3672:   if( rc==SQLITE_OK ){",
          "3678:     if( (pCx->pKeyInfo = pKeyInfo = pOp->p4.pKeyInfo)!=0 ){",
          "3679:       int pgno;",
          "3680:       assert( pOp->p4type==P4_KEYINFO );",
          "3681:       rc = sqlite3BtreeCreateTable(pCx->pBtx, &pgno, BTREE_BLOBKEY | pOp->p5);",
          "3682:       if( rc==SQLITE_OK ){",
          "3683:         assert( pgno==MASTER_ROOT+1 );",
          "3684:         assert( pKeyInfo->db==db );",
          "3685:         assert( pKeyInfo->enc==ENC(db) );",
          "3686:         pCx->pgnoRoot = pgno;",
          "3687:         rc = sqlite3BtreeCursor(pCx->pBtx, pgno, BTREE_WRCSR,",
          "3688:                                 pKeyInfo, pCx->uc.pCursor);",
          "3690:       pCx->isTable = 0;",
          "3691:     }else{",
          "3692:       rc = sqlite3BtreeCursor(pCx->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "3693:                               0, pCx->uc.pCursor);",
          "3694:       pCx->isTable = 1;",
          "3695:       pCx->pgnoRoot = MASTER_ROOT;",
          "3699:   pCx->isOrdered = (pOp->p5!=BTREE_UNORDERED);",
          "",
          "[Added Lines]",
          "3666:   pCx = p->apCsr[pOp->p1];",
          "3667:   if( pCx ){",
          "3670:     rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);",
          "3671:   }else{",
          "3672:     pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_BTREE);",
          "3673:     if( pCx==0 ) goto no_mem;",
          "3674:     pCx->nullRow = 1;",
          "3675:     pCx->isEphemeral = 1;",
          "3676:     rc = sqlite3BtreeOpen(db->pVfs, 0, db, &pCx->pBtx,",
          "3677:                           BTREE_OMIT_JOURNAL | BTREE_SINGLE | pOp->p5,",
          "3678:                           vfsFlags);",
          "3679:     if( rc==SQLITE_OK ){",
          "3680:       rc = sqlite3BtreeBeginTrans(pCx->pBtx, 1, 0);",
          "3681:     }",
          "3682:     if( rc==SQLITE_OK ){",
          "3688:       if( (pCx->pKeyInfo = pKeyInfo = pOp->p4.pKeyInfo)!=0 ){",
          "3689:         assert( pOp->p4type==P4_KEYINFO );",
          "3690:         rc = sqlite3BtreeCreateTable(pCx->pBtx, (int*)&pCx->pgnoRoot,",
          "3691:                                      BTREE_BLOBKEY | pOp->p5);",
          "3692:         if( rc==SQLITE_OK ){",
          "3693:           assert( pCx->pgnoRoot==MASTER_ROOT+1 );",
          "3694:           assert( pKeyInfo->db==db );",
          "3695:           assert( pKeyInfo->enc==ENC(db) );",
          "3696:           rc = sqlite3BtreeCursor(pCx->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "3697:                                   pKeyInfo, pCx->uc.pCursor);",
          "3698:         }",
          "3699:         pCx->isTable = 0;",
          "3700:       }else{",
          "3701:         pCx->pgnoRoot = MASTER_ROOT;",
          "3702:         rc = sqlite3BtreeCursor(pCx->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "3703:                                 0, pCx->uc.pCursor);",
          "3704:         pCx->isTable = 1;",
          "3707:     pCx->isOrdered = (pOp->p5!=BTREE_UNORDERED);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: #endif",
          "",
          "[Removed Lines]",
          "164: #define ADDR(X)  (-1-(X))",
          "",
          "[Added Lines]",
          "163: #define ADDR(X)  (~(X))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237: void sqlite3VdbeSetP4KeyInfo(Parse*, Index*);",
          "238: void sqlite3VdbeUsesBtree(Vdbe*, int);",
          "239: VdbeOp *sqlite3VdbeGetOp(Vdbe*, int);",
          "241: void sqlite3VdbeRunOnlyOnce(Vdbe*);",
          "242: void sqlite3VdbeReusable(Vdbe*);",
          "243: void sqlite3VdbeDelete(Vdbe*);",
          "",
          "[Removed Lines]",
          "240: int sqlite3VdbeMakeLabel(Vdbe*);",
          "",
          "[Added Lines]",
          "239: int sqlite3VdbeMakeLabel(Parse*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478: }",
          "",
          "[Removed Lines]",
          "466: int sqlite3VdbeMakeLabel(Vdbe *v){",
          "467:   Parse *p = v->pParse;",
          "468:   int i = p->nLabel++;",
          "469:   assert( v->magic==VDBE_MAGIC_INIT );",
          "470:   if( (i & (i-1))==0 ){",
          "471:     p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "472:                                        (i*2+1)*sizeof(p->aLabel[0]));",
          "473:   }",
          "474:   if( p->aLabel ){",
          "475:     p->aLabel[i] = -1;",
          "476:   }",
          "477:   return ADDR(i);",
          "",
          "[Added Lines]",
          "477: int sqlite3VdbeMakeLabel(Parse *pParse){",
          "478:   return --pParse->nLabel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485: void sqlite3VdbeResolveLabel(Vdbe *v, int x){",
          "486:   Parse *p = v->pParse;",
          "487:   int j = ADDR(x);",
          "488:   assert( v->magic==VDBE_MAGIC_INIT );",
          "490:   assert( j>=0 );",
          "492: #ifdef SQLITE_DEBUG",
          "496: #endif",
          "498:     p->aLabel[j] = v->nOp;",
          "499:   }",
          "",
          "[Removed Lines]",
          "489:   assert( j<p->nLabel );",
          "491:   if( p->aLabel ){",
          "493:     if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "494:       printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "495:     }",
          "",
          "[Added Lines]",
          "486: static SQLITE_NOINLINE void resizeResolveLabel(Parse *p, Vdbe *v, int j){",
          "487:   int nNewSize = 10 - p->nLabel;",
          "488:   p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "489:                      nNewSize*sizeof(p->aLabel[0]));",
          "490:   if( p->aLabel==0 ){",
          "491:     p->nLabelAlloc = 0;",
          "492:   }else{",
          "493: #ifdef SQLITE_DEBUG",
          "494:     int i;",
          "495:     for(i=p->nLabelAlloc; i<nNewSize; i++) p->aLabel[i] = -1;",
          "496: #endif",
          "497:     p->nLabelAlloc = nNewSize;",
          "498:     p->aLabel[j] = v->nOp;",
          "499:   }",
          "500: }",
          "505:   assert( j<-p->nLabel );",
          "508:   if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "509:     printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "510:   }",
          "512:   if( p->nLabelAlloc + p->nLabel < 0 ){",
          "513:     resizeResolveLabel(p,v,j);",
          "514:   }else{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "771:             assert( (sqlite3OpcodeProperty[pOp->opcode] & OPFLG_JUMP)!=0 );",
          "773:             pOp->p2 = aLabel[ADDR(pOp->p2)];",
          "774:           }",
          "775:           break;",
          "",
          "[Removed Lines]",
          "772:             assert( ADDR(pOp->p2)<pParse->nLabel );",
          "",
          "[Added Lines]",
          "790:             assert( ADDR(pOp->p2)<-pParse->nLabel );",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837:     addrTop = sqlite3VdbeAddOp1(v, OP_Rewind, pLevel->iTabCur); VdbeCoverage(v);",
          "838:   }",
          "839:   if( pPartial ){",
          "841:     sqlite3ExprIfFalse(pParse, pPartial, iContinue, SQLITE_JUMPIFNULL);",
          "842:     pLoop->wsFlags |= WHERE_PARTIALIDX;",
          "843:   }",
          "",
          "[Removed Lines]",
          "840:     iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "840:     iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4644:   pWInfo->pResultSet = pResultSet;",
          "4645:   pWInfo->aiCurOnePass[0] = pWInfo->aiCurOnePass[1] = -1;",
          "4646:   pWInfo->nLevel = nTabList;",
          "4648:   pWInfo->wctrlFlags = wctrlFlags;",
          "4649:   pWInfo->iLimit = iAuxArg;",
          "4650:   pWInfo->savedNQueryLoop = pParse->nQueryLoop;",
          "",
          "[Removed Lines]",
          "4647:   pWInfo->iBreak = pWInfo->iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4647:   pWInfo->iBreak = pWInfo->iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:     pLoop->wsFlags |= WHERE_IN_ABLE;",
          "568:     if( pLevel->u.in.nIn==0 ){",
          "570:     }",
          "572:     i = pLevel->u.in.nIn;",
          "",
          "[Removed Lines]",
          "569:       pLevel->addrNxt = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "569:       pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1211:   addrBrk = pLevel->addrBrk = pLevel->addrNxt = sqlite3VdbeMakeLabel(v);",
          "1212:   addrCont = pLevel->addrCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1211:   addrBrk = pLevel->addrBrk = pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "1212:   addrCont = pLevel->addrCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:      || pFunc->zName==first_valueName",
          "1331:     ){",
          "1332:       int csr = pWin->csrApp;",
          "1334:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1335:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "",
          "[Removed Lines]",
          "1333:       int lbl = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1333:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1353:       int nArg = pWin->pOwner->x.pList->nExpr;",
          "1354:       int iEph = pMWin->iEphCsr;",
          "1355:       int csr = pWin->csrApp;",
          "1357:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1359:       if( nArg<3 ){",
          "",
          "[Removed Lines]",
          "1356:       int lbl = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1356:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1616:   regFlushPart = ++pParse->nMem;",
          "1620:   regStart = ++pParse->nMem;",
          "1621:   regEnd = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1617:   lblFlushPart = sqlite3VdbeMakeLabel(v);",
          "1618:   lblFlushDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1617:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "1618:   lblFlushDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1725:    || pMWin->eStart==TK_PRECEDING",
          "1726:    || pMWin->eStart==TK_FOLLOWING",
          "1727:   ){",
          "1729:     if( pMWin->eStart==TK_PRECEDING ){",
          "1730:       sqlite3VdbeAddOp3(v, OP_IfPos, regStart, lblSkipInverse, 1);",
          "1731:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1728:     int lblSkipInverse = sqlite3VdbeMakeLabel(v);;",
          "",
          "[Added Lines]",
          "1728:     int lblSkipInverse = sqlite3VdbeMakeLabel(pParse);;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1890:        || (pMWin->eStart==TK_CURRENT && pMWin->eEnd==TK_UNBOUNDED)",
          "1891:   );",
          "1894:   regNewPeer = pParse->nMem+1;",
          "1895:   pParse->nMem += nPeer;",
          "1898:   regFlushPart = ++pParse->nMem;",
          "1901:   csrLead = pParse->nTab++;",
          "1902:   regCtr = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1893:   lblEmpty = sqlite3VdbeMakeLabel(v);",
          "1899:   lblFlushPart = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1893:   lblEmpty = sqlite3VdbeMakeLabel(pParse);",
          "1899:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:   );",
          "621: } {1 2 3}",
          "623: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623: # 2018-12-31",
          "624: # https://www.sqlite.org/src/info/d0866b26f83e9c55",
          "625: # Window function in correlated subquery causes assertion fault",
          "626: #",
          "627: do_catchsql_test 15.0 {",
          "628:   WITH t(id, parent) AS (",
          "629:   SELECT CAST(1 AS INT), CAST(NULL AS INT)",
          "630:   UNION ALL",
          "631:   SELECT 2, NULL",
          "632:   UNION ALL",
          "633:   SELECT 3, 1",
          "634:   UNION ALL",
          "635:   SELECT 4, 1",
          "636:   UNION ALL",
          "637:   SELECT 5, 2",
          "638:   UNION ALL",
          "639:   SELECT 6, 2",
          "640:   ), q AS (",
          "641:   SELECT t.*, ROW_NUMBER() OVER (ORDER BY t.id) AS rn",
          "642:     FROM t",
          "643:    WHERE parent IS NULL",
          "644:    UNION ALL",
          "645:   SELECT t.*, ROW_NUMBER() OVER (ORDER BY t.id) AS rn",
          "646:     FROM q",
          "647:     JOIN t",
          "648:       ON t.parent = q.id",
          "649:   )",
          "650:   SELECT *",
          "651:     FROM q;",
          "652: } {1 {cannot use window functions in recursive queries}}",
          "653: do_execsql_test 15.1 {",
          "654:   DROP TABLE IF EXISTS t1;",
          "655:   DROP TABLE IF EXISTS t2;",
          "656:   CREATE TABLE t1(x);",
          "657:   INSERT INTO t1 VALUES('a'), ('b'), ('c');",
          "658:   CREATE TABLE t2(a, b);",
          "659:   INSERT INTO t2 VALUES('X', 1), ('X', 2), ('Y', 2), ('Y', 3);",
          "660:   SELECT x, (",
          "661:     SELECT sum(b)",
          "662:       OVER (PARTITION BY a ROWS BETWEEN UNBOUNDED PRECEDING",
          "663:                                     AND UNBOUNDED FOLLOWING)",
          "664:     FROM t2 WHERE b<x",
          "665:   ) FROM t1;",
          "666: } {a 3 b 3 c 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f32105708e13eb3ceaa2570374ef2e6824eee337",
      "candidate_info": {
        "commit_hash": "f32105708e13eb3ceaa2570374ef2e6824eee337",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f32105708e13eb3ceaa2570374ef2e6824eee337",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add \"PRAGMA foreign_keys=OFF;\" to the start of the script output by \".recover\", just as is done for \".dump\".\n\nFossilOrigin-Name: bfc29e62eff0ed00c153e18a27815f7e3ba316f46871e9645b84ab1e6709a392",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c8c1092a8ce80e114fcfe8ce780332a6f269b8c87df226242b582d2d825c393",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6709:   if( rc==SQLITE_OK ){",
          "6710:     sqlite3_stmt *pStmt = 0;",
          "6711:     raw_printf(pState->out, \"BEGIN;\\n\");",
          "6712:     raw_printf(pState->out, \"PRAGMA writable_schema = on;\\n\");",
          "6713:     shellPrepare(pState->db, &rc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6715:     raw_printf(pState->out, \"PRAGMA foreign_keys=OFF;\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6099e9b401438b24bf273229c6f0f872cb46cee",
      "candidate_info": {
        "commit_hash": "f6099e9b401438b24bf273229c6f0f872cb46cee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f6099e9b401438b24bf273229c6f0f872cb46cee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Avoid long delays that can occur when \".recover\"ing data from a database with a corrupt freelist.\n\nFossilOrigin-Name: 20f06bf2e659212a68dcf138e444da7bd4220548ec15a97cfd7eb82e028b3630",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac790729d9c8f8612936bab56dca6061408007bc2150ac8c7089132403d7f885",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6579:       \"      FROM trunk WHERE x>0\"",
          "6580:       \"),\"",
          "6581:       \"freelist(data, n, freepgno) AS (\"",
          "6583:       \"      FROM trunk t, sqlite_dbpage s WHERE s.pgno=t.pgno\"",
          "6584:       \"    UNION ALL\"",
          "6585:       \"  SELECT data, n-1, shell_int32(data, 2+n) \"",
          "",
          "[Removed Lines]",
          "6582:       \"  SELECT data, shell_int32(data, 1)-1, t.pgno \"",
          "",
          "[Added Lines]",
          "6582:       \"  SELECT data, min(16384, shell_int32(data, 1)-1), t.pgno \"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f20bbc5f69186e9f04b498b7de2488f3c02f7364",
      "candidate_info": {
        "commit_hash": "f20bbc5f69186e9f04b498b7de2488f3c02f7364",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f20bbc5f69186e9f04b498b7de2488f3c02f7364",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Fix a failure in sqlite3ExprCompare()\n\nFossilOrigin-Name: 835e2cc55feea2f2426c99816c27f9c35d2fd4cdd9bf1c7f46f889ecfd222778",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca7b7aaed010ec67bec5355a9ac1d7f229d6d5f2ba2d796b76f5e908b1267688",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4858:         if( sqlite3WindowCompare(pParse,pA->y.pWin,pB->y.pWin)!=0 ) return 2;",
          "4859:       }",
          "4860: #endif",
          "4861:     }else if( pA->op==TK_COLLATE ){",
          "4862:       if( sqlite3_stricmp(pA->u.zToken,pB->u.zToken)!=0 ) return 2;",
          "4864:       return 2;",
          "4865:     }",
          "4866:   }",
          "",
          "[Removed Lines]",
          "4863:     }else if( strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "",
          "[Added Lines]",
          "4861:     }else if( pA->op==TK_NULL ){",
          "4862:       return 0;",
          "4865:     }else if( ALWAYS(pB->u.zToken!=0) && strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}