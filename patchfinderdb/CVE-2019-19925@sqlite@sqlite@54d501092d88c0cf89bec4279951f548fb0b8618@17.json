{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0efa4d3095f2ce07c084b00594497e17ca523fc",
      "candidate_info": {
        "commit_hash": "c0efa4d3095f2ce07c084b00594497e17ca523fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c0efa4d3095f2ce07c084b00594497e17ca523fc",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use the \"fuzztest\" target in place of \"fastfuzztest\".\n\nFossilOrigin-Name: 7129e468fd182c1820cdfa2c66a81d1697e5d1580680b77c0df9bb0ae0049e0d",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1259: # This is the common case.  Run many tests that do not take too long,",
          "1260: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "1261: #",
          "1264: # Run a test using valgrind.  This can take a really long time",
          "1265: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "1262: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "1262: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2413: # This is the common case.  Run many tests that do not take too long,",
          "2414: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "2415: #",
          "2417:  @set PATH=$(LIBTCLPATH);$(PATH)",
          "2418:  .\\testfixture.exe $(TOP)\\test\\veryquick.test $(TESTOPTS)",
          "",
          "[Removed Lines]",
          "2416: test: $(TESTPROGS) sourcetest fastfuzztest",
          "",
          "[Added Lines]",
          "2416: test: $(TESTPROGS) sourcetest fuzztest",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "952: # The default test case.  Runs most of the faster standard TCL tests,",
          "953: # and fuzz tests, and sqlite3_analyzer and sqldiff tests.",
          "956: # Run a test using valgrind.  This can take a really long time",
          "957: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "954: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "954: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3d44f1ee0f606409bc9c091dae2c9d2e78ada318a0de08437f4f4835a1a5d203",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84422db987f3e26545760984ace02515eed1542c",
      "candidate_info": {
        "commit_hash": "84422db987f3e26545760984ace02515eed1542c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/84422db987f3e26545760984ace02515eed1542c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/util.c"
        ],
        "message": "Optimization to the round() SQL function for large input values without a fractional part.\n\nFossilOrigin-Name: e95138f5f4febde598f39e031d6e4f4d5ad0adbd8dcdd34fd0baaa78ab393417",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea748edecb261f2b862d542daff6e99a6fd8879a8ace94b440d99e110577d1c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:   }else{",
          "395:     zBuf = sqlite3_mprintf(\"%.*f\",n,r);",
          "396:     if( zBuf==0 ){",
          "",
          "[Removed Lines]",
          "390:   if( n==0 && r>=0 && r<LARGEST_INT64-1 ){",
          "391:     r = (double)((sqlite_int64)(r+0.5));",
          "392:   }else if( n==0 && r<0 && (-r)<LARGEST_INT64-1 ){",
          "393:     r = -(double)((sqlite_int64)((-r)+0.5));",
          "",
          "[Added Lines]",
          "390:   if( r<-4503599627370496.0 || r>+4503599627370496.0 ){",
          "392:   }else if( n==0 ){",
          "393:     r = (double)((sqlite_int64)(r+(r<0?-0.5:+0.5)));",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:     int i;",
          "405:     incr = 2;",
          "406:     assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "407:     for(i=3-enc; i<length && z[i]==0; i+=2){}",
          "408:     if( i<length ) eType = -100;",
          "409:     zEnd = &z[i^1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     testcase( enc==SQLITE_UTF16LE );",
          "408:     testcase( enc==SQLITE_UTF16BE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5ea2d474d00c78683ec2739aaeddb8bab2d5e16",
      "candidate_info": {
        "commit_hash": "c5ea2d474d00c78683ec2739aaeddb8bab2d5e16",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5ea2d474d00c78683ec2739aaeddb8bab2d5e16",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Use _strdup() instead of strdup() on Windows builds of the CLI, to avoid a compiler warning reported on the mailing list.\n\nFossilOrigin-Name: a7126a4f4fb4e3e25be95d673323f835252bb2b427469616046a90b2acf64071",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9eccef7825c61980678599358b62bc394283124653061ce163ead0c653f481d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: # ifndef unlink",
          "139: #  define unlink _unlink",
          "140: # endif",
          "141: # undef popen",
          "142: # define popen _popen",
          "143: # undef pclose",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: # ifndef strdup",
          "142: #  define strdup _strdup",
          "143: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e8c88964c7fba0a0f784aa68178c1ef9c231022",
      "candidate_info": {
        "commit_hash": "8e8c88964c7fba0a0f784aa68178c1ef9c231022",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e8c88964c7fba0a0f784aa68178c1ef9c231022",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "src/vtab.c"
        ],
        "message": "Use a statement journal on a CREATE VIRTUAL TABLE statement in case the VCreate opcode fails.\n\nFossilOrigin-Name: aa3b0eb8c3438ddd3b660bc6bce4b1f4a0e3b5ec897079445231ee1b61210d6a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 707a058a22bd00ef14431cee0d02048cf1be745c0ef5254eda76c325435738ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:     int opcode = pOp->opcode;",
          "695:     if( opcode==OP_Destroy || opcode==OP_VUpdate || opcode==OP_VRename",
          "696:      || opcode==OP_VDestroy",
          "697:      || (opcode==OP_ParseSchema && pOp->p4.z==0)",
          "698:      || ((opcode==OP_Halt || opcode==OP_HaltIfNull)",
          "699:       && ((pOp->p1)!=SQLITE_OK && pOp->p2==OE_Abort))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698:      || opcode==OP_VCreate",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:     int iReg;",
          "458:     Vdbe *v;",
          "461:     if( pEnd ){",
          "462:       pParse->sNameToken.n = (int)(pEnd->z - pParse->sNameToken.z) + pEnd->n;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:     sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55b4c827fae95c394729c6968605863f5ce9eac5",
      "candidate_info": {
        "commit_hash": "55b4c827fae95c394729c6968605863f5ce9eac5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55b4c827fae95c394729c6968605863f5ce9eac5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/treeview.c",
          "src/where.c"
        ],
        "message": "In the \".wheretrace 0x100\" debugging mode, show the structure of the main parameters to sqlite3WhereBegin() calls.\n\nFossilOrigin-Name: fd598e475d353363e19adc27a671170f11ae9f6d8cad58cb2303fb2ad8ac6bec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/treeview.c||src/treeview.c",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2660e9292ae2c229eb7c57a6a79bb19f0c970072f86750fbe9cca3113d44ffe4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     sqlite3TreeViewPush(pView, 1);",
          "177:   }",
          "178:   do{",
          "186:     if( cnt++ ) sqlite3TreeViewPop(pView);",
          "187:     if( p->pPrior ){",
          "188:       n = 1000;",
          "",
          "[Removed Lines]",
          "179:     sqlite3TreeViewLine(pView,",
          "180:       \"SELECT%s%s (%u/%p) selFlags=0x%x nSelectRow=%d\",",
          "181:       ((p->selFlags & SF_Distinct) ? \" DISTINCT\" : \"\"),",
          "182:       ((p->selFlags & SF_Aggregate) ? \" agg_flag\" : \"\"),",
          "183:       p->selId, p, p->selFlags,",
          "184:       (int)p->nSelectRow",
          "185:     );",
          "",
          "[Added Lines]",
          "179:     if( p->selFlags & SF_WhereBegin ){",
          "180:       sqlite3TreeViewLine(pView, \"sqlite3WhereBegin()\");",
          "181:     }else{",
          "182:       sqlite3TreeViewLine(pView,",
          "183:         \"SELECT%s%s (%u/%p) selFlags=0x%x nSelectRow=%d\",",
          "184:         ((p->selFlags & SF_Distinct) ? \" DISTINCT\" : \"\"),",
          "185:         ((p->selFlags & SF_Aggregate) ? \" agg_flag\" : \"\"),",
          "186:         p->selId, p, p->selFlags,",
          "187:         (int)p->nSelectRow",
          "188:       );",
          "189:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:       if( p->pWinDefn ) n++;",
          "200: #endif",
          "201:     }",
          "203: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "204:     if( p->pWin ){",
          "205:       Window *pX;",
          "",
          "[Removed Lines]",
          "202:     sqlite3TreeViewExprList(pView, p->pEList, (n--)>0, \"result-set\");",
          "",
          "[Added Lines]",
          "206:     if( p->pEList ){",
          "207:       sqlite3TreeViewExprList(pView, p->pEList, n>0, \"result-set\");",
          "208:     }",
          "209:     n--;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4769:       sqlite3DebugPrintf(\", limit: %d\", iAuxArg);",
          "4770:     }",
          "4771:     sqlite3DebugPrintf(\")\\n\");",
          "4772:   }",
          "4774:     sqlite3WhereClausePrint(sWLB.pWC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4772:     if( sqlite3WhereTrace & 0x100 ){",
          "4773:       Select sSelect;",
          "4774:       memset(&sSelect, 0, sizeof(sSelect));",
          "4775:       sSelect.selFlags = SF_WhereBegin;",
          "4776:       sSelect.pSrc = pTabList;",
          "4777:       sSelect.pWhere = pWhere;",
          "4778:       sSelect.pOrderBy = pOrderBy;",
          "4779:       sSelect.pEList = pResultSet;",
          "4780:       sqlite3TreeViewSelect(0, &sSelect, 0);",
          "4781:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}