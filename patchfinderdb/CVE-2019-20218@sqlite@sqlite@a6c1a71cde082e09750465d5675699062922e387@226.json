{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0062ddd4c946b727cb9b2e876878fa133e5738f7",
      "candidate_info": {
        "commit_hash": "0062ddd4c946b727cb9b2e876878fa133e5738f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0062ddd4c946b727cb9b2e876878fa133e5738f7",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another potential buffer overread in fts5.\n\nFossilOrigin-Name: 14fba4cc5db2bc206f024bfa5dd82fffdbc7577162da2c3b15a91cc1c91f3846",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4784:   Fts5Buffer *pBuf",
          "4785: ){",
          "4786:   int nData = pMulti->base.nData;",
          "4787:   assert( nData>0 );",
          "4789:     fts5BufferSafeAppendVarint(pBuf, iDelta);",
          "4790:     fts5BufferSafeAppendVarint(pBuf, nData*2);",
          "4791:     fts5BufferSafeAppendBlob(pBuf, pMulti->base.pData, nData);",
          "4792:   }",
          "4793: }",
          "",
          "[Removed Lines]",
          "4788:   if( p->rc==SQLITE_OK && 0==fts5BufferGrow(&p->rc, pBuf, nData+9+9) ){",
          "",
          "[Added Lines]",
          "4787:   int nByte = nData + 9 + 9 + FTS5_DATA_ZERO_PADDING;",
          "4789:   if( p->rc==SQLITE_OK && 0==fts5BufferGrow(&p->rc, pBuf, nByte) ){",
          "4793:     memset(&pBuf->p[pBuf->n], 0, FTS5_DATA_ZERO_PADDING);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "7343:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "7344: } {1 {database disk image is malformed}}",
          "7349: sqlite3_fts5_may_be_corrupt 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7346: #-------------------------------------------------------------------------",
          "7347: reset_db",
          "7348: do_test 54.0 {",
          "7349:   sqlite3 db {}",
          "7350:   db deserialize [decode_hexdb {",
          "7351: | size 24576 pagesize 4096 filename crash-03a1855566d9ae.db",
          "7352: | page 1 offset 0",
          "7353: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "7354: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 06   .....@  ........",
          "7355: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "7356: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "7357: |     96: 00 00 00 00 0d 00 00 00 06 0e 0f 00 0f aa 0f 53   ...............S",
          "7358: |    112: 0e e8 0e 8b 0e 33 0e 0f 00 00 00 00 00 00 00 00   .....3..........",
          "7359: |   3584: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22   ................",
          "7360: |   3600: 06 06 17 11 11 01 31 74 61 62 6c 65 62 62 62 62   ......1tablebbbb",
          "7361: |   3616: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 62 62   .CREATE TABLE bb",
          "7362: |   3632: 28 61 29 56 05 06 17 1f 1f 01 7d 74 61 62 6c 65   (a)V.......table",
          "7363: |   3648: 74 31 5f 63 2a 6e 66 69 67 74 31 5f 63 6f 6e 66   t1_c*nfigt1_conf",
          "7364: |   3664: 69 67 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   ig.CREATE TABLE",
          "7365: |   3680: 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b 20 50 52   't1_config'(k PR",
          "7366: |   3696: 49 4d 41 52 59 20 4b 45 59 2c 20 76 29 20 57 49   IMARY KEY, v) WI",
          "7367: |   3712: 54 48 4f 55 54 20 52 4f 57 49 44 5b 04 07 17 21   THOUT ROWID[...!",
          "7368: |   3728: 21 01 81 01 74 61 62 6c 65 74 31 5f 64 6f 73 73   !...tablet1_doss",
          "7369: |   3744: 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65 04 43 52   izet1_docsize.CR",
          "7370: |   3760: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 64   EATE TABLE 't1_d",
          "7371: |   3776: 6f 63 73 69 7a 65 27 28 69 64 20 49 4e 54 45 47   ocsize'(id INTEG",
          "7372: |   3792: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "7373: |   3808: 73 7a 20 42 4c 4f 42 29 69 03 07 17 19 19 01 81   sz BLOB)i.......",
          "7374: |   3824: 2d 74 61 62 6c 65 74 31 5f 69 64 78 74 31 5f 69   -tablet1_idxt1_i",
          "7375: |   3840: 64 78 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   dx.CREATE TABLE",
          "7376: |   3856: 27 74 31 5f 69 64 78 27 28 73 65 67 69 64 2c 20   't1_idx'(segid,",
          "7377: |   3872: 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50 52 49 4d   term, pgno, PRIM",
          "7378: |   3888: 41 52 59 20 4b 45 59 28 73 65 67 69 64 2c 20 74   ARY KEY(segid, t",
          "7379: |   3904: 65 72 6d 29 29 20 57 49 54 48 4f 55 54 20 52 4f   erm)) WITHOUT RO",
          "7380: |   3920: 57 49 44 55 02 07 17 1b 1b 01 81 01 74 61 62 6c   WIDU........tabl",
          "7381: |   3936: 65 74 31 5f 64 61 74 61 74 31 5f 64 61 74 61 02   et1_datat1_data.",
          "7382: |   3952: 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74 31   CREATE TABLE 't1",
          "7383: |   3968: 5f 64 61 74 61 27 28 69 64 20 49 4e 54 45 47 45   _data'(id INTEGE",
          "7384: |   3984: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62   R PRIMARY KEY, b",
          "7385: |   4000: 6c 6f 63 6b 20 42 4c 4f 42 29 54 01 07 17 11 11   lock BLOB)T.....",
          "7386: |   4016: 08 81 15 74 61 62 6c 65 74 31 74 31 43 52 45 41   ...tablet1t1CREA",
          "7387: |   4032: 54 45 20 56 49 52 54 55 41 4c 20 54 41 42 4c 45   TE VIRTUAL TABLE",
          "7388: |   4048: 20 74 31 20 55 53 49 4e 47 20 66 74 73 35 28 61    t1 USING fts5(a",
          "7389: |   4064: 2c 62 2c 70 72 65 66 69 78 3d 22 32 2c 32 2c 33   ,b,prefix=.2,2,3",
          "7390: |   4080: 2c 34 22 2c 20 63 6f 6e 74 65 6e 74 3d 22 22 29   ,4., content=..)",
          "7391: | page 2 offset 4096",
          "7392: |      0: 0d 0b 6a 00 37 09 4c 02 0f e7 09 4c 0f c6 0f a4   ..j.7.L....L....",
          "7393: |     16: 0f 88 0f 6d 0f 4b 0f 2c 0f 0e 0e ec 0e cd 0e ad   ...m.K.,........",
          "7394: |     32: 0e 8e 0e 6c 0e 4b 0e 29 0e 08 0d e6 0d c4 0d b5   ...l.K.)........",
          "7395: |     48: 0d 97 0d 76 0d 54 0d 31 0d 15 0c f3 0c d3 0c b5   ...v.T.1........",
          "7396: |     64: 0c 95 0c 73 0c 54 0c 32 0c 10 0b ee 0b cd 0b b0   ...s.T.2........",
          "7397: |     80: 0b 8d 0b 7e 0b 48 0b 2e 0b 0b 0a ef 0a cc 0a ad   ...~.H..........",
          "7398: |     96: 0a 8c 0a 6d 0a 4d 0a 2b 0a 0c 09 ec 09 ca 09 a8   ...m.M.+........",
          "7399: |    112: 09 86 09 63 0f f1 00 00 00 00 00 00 00 00 00 00   ...c............",
          "7400: |   2368: 00 00 00 00 00 00 00 00 00 00 00 00 15 0a 03 00   ................",
          "7401: |   2384: 30 00 00 00 01 01 03 35 00 03 01 01 12 02 01 12   0......5........",
          "7402: |   2400: 03 01 11 1c 8c 80 80 80 80 10 03 00 3e 00 00 00   ............>...",
          "7403: |   2416: 17 01 05 05 34 74 61 62 6c 03 02 03 01 04 77 68   ....4tabl.....wh",
          "7404: |   2432: 65 72 03 02 06 09 1b 8c 80 80 80 80 0f 03 00 3c   er.............<",
          "7405: |   2448: 00 00 00 16 05 34 66 74 73 34 03 02 02 01 04 6e   .....4fts4.....n",
          "7406: |   2464: 75 6d 62 03 06 01 04 09 1b 8c 80 80 80 80 0e 03   umb.............",
          "7407: |   2480: 00 3c 00 00 00 16 04 33 74 68 65 03 06 01 01 04   .<.....3the.....",
          "7408: |   2496: 01 03 77 68 65 03 02 04 04 0a 1b 8c 80 80 80 80   ..whe...........",
          "7409: |   2512: 0d 03 00 3c 00 00 00 16 04 33 6e 75 6d 03 06 01   ...<.....3num...",
          "7410: |   2528: 01 05 01 03 74 61 62 05 62 03 04 0a 19 8c 80 80   ....tab.b.......",
          "7411: |   2544: 80 80 0c 03 00 38 00 00 00 14 03 39 a7 68 03 02   .....8.....9.h..",
          "7412: |   2560: 04 10 04 33 66 74 73 03 02 02 04 07 18 8c 80 80   ...3fts.........",
          "7413: |   2576: 80 80 0b 03 00 36 00 00 00 13 03 32 74 61 03 02   .....6.....2ta..",
          "7414: |   2592: 03 02 01 68 03 06 01 01 04 04 07 1b 8c 80 80 80   ...h............",
          "7415: |   2608: 80 0a 03 00 3c 00 00 00 16 03 32 6e 75 03 06 01   ....<.....2nu...",
          "7416: |   2624: 01 05 01 02 6f 66 03 06 01 01 06 04 09 19 8c 80   ....of..........",
          "7417: |   2640: 80 80 80 09 03 00 38 00 00 00 14 03 32 66 74 03   ......8.....2ft.",
          "7418: |   2656: 02 02 01 02 69 73 03 06 01 01 03 04 07 18 8c 80   ....is..........",
          "7419: |   2672: 80 80 80 08 03 00 36 00 00 00 13 02 31 74 03 08   ......6.....1t..",
          "7420: |   2688: 03 01 01 04 01 01 77 03 02 04 04 09 1a 8c 80 80   ......w.........",
          "7421: |   2704: 80 80 07 03 00 3a ff 00 00 15 02 31 6e 03 08 01   .....:.....1n...",
          "7422: |   2720: 01 02 05 01 01 6f 03 06 01 01 06 04 09 18 8c 80   .....o..........",
          "7423: |   2736: 80 80 80 06 03 00 36 00 00 00 13 04 02 31 66 03   ......6......1f.",
          "7424: |   2752: 02 02 01 01 69 03 06 01 01 03 05 06 1c 8c 80 80   ....i...........",
          "7425: |   2768: 80 80 05 03 00 3e 00 00 00 17 04 30 74 68 65 03   .....>.....0the.",
          "7426: |   2784: 06 01 01 04 01 05 77 68 65 72 65 03 02 04 0a 15   ......where.....",
          "7427: |   2800: 8c 80 80 80 80 04 03 00 30 00 00 00 11 01 01 06   ........0.......",
          "7428: |   2816: 06 30 74 61 62 6c cc 03 02 03 07 1c 8c 80 80 80   .0tabl..........",
          "7429: |   2832: 80 03 03 00 3e 00 00 00 17 07 30 6e 75 6d 62 65   ....>.....0numbe",
          "7430: |   2848: 72 03 06 01 01 05 01 02 6f 66 03 06 04 0d 13 8c   r.......of......",
          "7431: |   2864: 80 80 80 80 02 03 00 2c 00 00 00 0f 01 01 03 02   .......,........",
          "7432: |   2880: 30 6e 03 06 01 01 02 07 1b 8c 80 80 80 80 01 03   0n..............",
          "7433: |   2896: 00 3c 00 00 00 16 08 30 66 74 73 34 61 75 78 03   .<.....0fts4aux.",
          "7434: |   2912: 02 02 01 02 69 73 03 06 04 0c 00 00 00 14 2a 00   ....is........*.",
          "7435: |   2928: 00 00 01 01 02 24 00 02 01 01 12 02 01 12 08 88   .....$..........",
          "7436: |   2944: 80 80 80 80 12 03 00 16 00 00 00 05 02 1c 88 80   ................",
          "7437: |   2960: 80 80 80 11 03 00 3e 00 00 00 17 05 34 72 6f 77   ......>.....4row",
          "7438: |   2976: 73 02 06 01 01 05 01 04 74 68 65 72 02 02 04 0b   s.......ther....",
          "7439: |   2992: 15 88 80 80 80 80 10 03 00 30 00 00 00 11 02 01   .........0......",
          "7440: |   3008: 01 07 05 34 62 65 74 77 02 02 04 08 1b 88 80 80   ...4betw........",
          "7441: |   3024: 80 80 0f 03 00 3c 00 00 00 16 04 04 33 72 6f 77   .....<......3row",
          "7442: |   3040: 02 06 01 01 05 01 03 74 68 65 02 08 05 0a 1b 88   .......the......",
          "7443: |   3056: 80 80 80 80 0e 03 05 0c 00 00 00 16 01 01 02 04   ................",
          "7444: |   3072: 33 61 72 65 02 02 03 01 03 62 65 74 02 02 07 08   3are.....bet....",
          "7445: |   3088: 1b 88 80 80 80 80 0d 03 00 3c 00 00 00 16 03 32   .........<.....2",
          "7446: |   3104: 84 68 02 08 02 01 01 07 00 04 33 61 6e 64 02 06   .h........3and..",
          "7447: |   3120: 04 0a 1b 88 80 80 80 80 0c 03 00 3c 00 00 00 16   ...........<....",
          "7448: |   3136: 03 32 69 6e 02 06 01 01 06 01 02 72 6f 02 06 01   .2in.......ro...",
          "7449: |   3152: 01 05 04 09 18 88 80 80 80 80 0b 03 00 36 00 00   .............6..",
          "7450: |   3168: 00 13 02 03 32 61 72 02 02 03 01 02 62 65 02 02   ....2ar.....be..",
          "7451: |   3184: 04 05 07 1b 88 80 80 80 80 0a 03 00 3c 00 00 00   ............<...",
          "7452: |   3200: 16 02 31 74 02 08 02 01 01 07 00 03 32 61 6e 02   ..1t........2an.",
          "7453: |   3216: 06 01 01 04 09 19 88 80 80 80 80 09 03 00 38 00   ..............8.",
          "7454: |   3232: 00 00 14 02 31 6e 02 06 01 01 03 01 01 72 02 06   ....1n.......r..",
          "7455: |   3248: 01 01 05 04 08 17 88 80 80 80 80 08 03 00 34 00   ..............4.",
          "7456: |   3264: 00 00 12 02 31 62 02 02 04 01 01 69 02 06 01 01   ....1b.....i....",
          "7457: |   3280: 06 04 06 19 88 80 80 80 80 07 03 00 38 00 00 00   ............8...",
          "7458: |   3296: 14 04 02 31 32 02 02 05 01 01 61 02 08 03 01 01   ...12.....a.....",
          "7459: |   3312: 02 05 06 1b 88 80 80 80 80 06 03 00 3c 00 00 00   ............<...",
          "7460: |   3328: 16 06 30 74 68 65 72 65 02 12 02 00 02 31 31 02   ..0there.....11.",
          "7461: |   3344: 06 11 01 04 0a 15 88 80 80 80 80 05 03 00 30 00   ..............0.",
          "7462: |   3360: 00 00 11 01 01 05 04 30 74 68 65 02 06 01 01 07   .......0the.....",
          "7463: |   3376: 07 1c 88 80 80 80 80 04 03 00 3e 00 00 00 17 01   ..........>.....",
          "7464: |   3392: 01 06 02 30 6e 02 06 01 01 03 01 04 72 6f 77 73   ...0n.......rows",
          "7465: |   3408: 02 06 07 08 1b 88 80 80 80 80 03 03 00 3c 00 00   .............<..",
          "7466: |   3424: 00 16 08 30 62 65 74 77 65 65 6e 02 02 04 01 02   ...0between.....",
          "7467: |   3440: 69 6e 02 06 04 0c 1a 88 80 80 80 80 02 03 00 3a   in.............:",
          "7468: |   3456: 08 f0 00 15 04 30 61 6e 64 02 06 01 01 02 02 02   .....0and.......",
          "7469: |   3472: 72 65 02 02 03 04 0a 17 88 80 80 80 80 01 03 00   re..............",
          "7470: |   3488: 34 00 00 00 12 02 30 31 02 06 01 01 04 01 01 32   4.....01.......2",
          "7471: |   3504: 02 02 06 04 08 08 84 80 80 80 80 12 03 00 16 00   ................",
          "7472: |   3520: 00 00 05 04 1b 84 80 80 80 80 11 03 00 3c 00 00   .............<..",
          "7473: |   3536: 00 16 05 34 74 61 62 6c 01 06 01 01 05 02 03 65   ...4tabl.......e",
          "7474: |   3552: 72 6d 01 02 04 0b 1b 84 80 80 80 80 10 03 00 3c   rm.............<",
          "7475: |   3568: 00 00 00 16 05 34 65 61 63 68 01 02 03 01 04 70   .....4each.....p",
          "7476: |   3584: 72 65 73 01 02 05 04 09 1a 84 80 80 80 80 0f 03   res.............",
          "7477: |   3600: 00 3a 00 00 00 15 04 33 74 65 72 01 02 04 02 02   .:.....3ter.....",
          "7478: |   3616: 68 65 01 06 01 01 03 04 08 1b 84 80 80 80 80 0e   he..............",
          "7479: |   3632: 03 00 3c 00 00 00 16 04 33 70 72 65 01 02 05 01   ..<.....3pre....",
          "7480: |   3648: 03 74 61 62 01 06 01 01 05 04 08 1a 84 80 80 80   .tab............",
          "7481: |   3664: 80 0d 03 00 3a 00 00 00 15 04 33 66 6f 72 01 02   ....:.....3for..",
          "7482: |   3680: 02 02 02 74 73 01 06 01 01 04 04 08 1b 84 80 80   ...ts...........",
          "7483: |   3696: 80 80 0c 03 00 3c 00 00 00 16 03 32 74 68 01 06   .....<.....2th..",
          "7484: |   3712: 01 01 03 00 04 33 65 61 63 01 02 03 04 09 18 84   .....3eac.......",
          "7485: |   3728: 80 80 80 80 0b 03 00 36 00 00 00 13 03 32 74 61   .......6.....2ta",
          "7486: |   3744: 01 06 01 01 05 02 01 65 00 02 04 04 09 19 84 80   .......e........",
          "7487: |   3760: 80 80 80 0a 03 00 38 00 00 00 14 03 32 69 6e 01   ......8.....2in.",
          "7488: |   3776: 06 01 01 02 01 02 70 72 01 02 05 04 09 18 84 80   ......pr........",
          "7489: |   3792: 80 80 80 09 03 00 36 00 00 00 13 03 32 66 6f 01   ......6.....2fo.",
          "7490: |   3808: 02 02 02 01 74 01 06 01 01 04 04 07 1b 84 80 80   ....t...........",
          "7491: |   3824: 80 80 08 03 00 3c 00 00 00 16 02 31 74 01 0a 04   .....<.....1t...",
          "7492: |   3840: 01 01 03 04 00 03 32 65 61 01 02 03 04 0a 17 84   ......2ea.......",
          "7493: |   3856: 80 80 80 80 07 03 00 34 00 00 00 12 02 31 69 01   .......4.....1i.",
          "7494: |   3872: 06 01 01 02 de 01 70 01 02 05 04 08 18 84 80 80   ......p.........",
          "7495: |   3888: 80 80 06 03 00 36 00 00 00 13 02 31 65 01 02 03   .....6.....1e...",
          "7496: |   3904: 01 01 66 01 08 02 01 01 04 04 06 1b 84 80 80 80   ..f.............",
          "7497: |   3920: 80 05 03 00 3c 00 00 00 16 05 30 74 65 72 6d 01   ....<.....0term.",
          "7498: |   3936: 02 04 02 02 68 65 01 06 01 01 03 04 09 14 84 80   ....he..........",
          "7499: |   3952: 80 80 80 04 03 00 2e 00 00 00 10 06 30 74 61 62   ............0tab",
          "7500: |   3968: 6c 65 01 06 01 01 05 04 15 84 80 80 80 80 03 03   le..............",
          "7501: |   3984: 00 30 00 00 00 11 02 08 30 70 72 65 73 65 6e 74   .0......0present",
          "7502: |   4000: 01 02 05 05 1b 84 80 80 80 80 02 03 00 3c 00 00   .............<..",
          "7503: |   4016: 00 16 04 30 66 74 73 01 06 01 01 04 01 02 69 6e   ...0fts.......in",
          "7504: |   4032: 01 06 01 01 04 0a 1a 84 80 80 80 80 01 03 00 3a   ...............:",
          "7505: |   4048: 00 00 00 15 05 30 65 61 63 68 00 f2 03 01 03 66   .....0each.....f",
          "7506: |   4064: 6f 72 01 02 02 04 09 06 01 03 00 12 03 0b 0f 00   or..............",
          "7507: |   4080: 00 08 8c 80 80 80 80 11 03 00 16 00 00 00 05 04   ................",
          "7508: | page 3 offset 8192",
          "7509: |      0: 0a 00 00 00 32 0e 4f 00 0f fa 0f f1 0f e9 0f e1   ....2.O.........",
          "7510: |     16: 0f d8 0f d1 0f c9 0f c1 0f b9 0f b1 0f a9 0f a0   ................",
          "7511: |     32: 0f 98 0f 90 0f 87 0f 80 0f 78 0f 71 0f 68 0f 5f   .........x.q.h._",
          "7512: |     48: 0f 56 0f 4d 0f 41 0f 38 0f 2f 0f 26 0f 1d 0f 13   .V.M.A.8./.&....",
          "7513: |     64: 0f 0a 0f 01 0e f7 0e ee 0e e6 0e dd 0e d6 0e cd   ................",
          "7514: |     80: 0e c3 0e ba 0e b0 0e a8 0e 9f 0e 96 0e 8e 0e 85   ................",
          "7515: |     96: 0e 7c 0e 73 0e 6a 0e 60 0e 58 0e 4f 00 00 00 00   .|.s.j.`.X.O....",
          "7516: |   3648: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08   ................",
          "7517: |   3664: 04 01 10 01 03 34 74 20 07 04 01 0e 01 03 34 1e   .....4t ......4.",
          "7518: |   3680: 09 04 01 12 01 03 33 74 68 1c 08 04 01 10 01 03   ......3th.......",
          "7519: |   3696: 33 6e 1a 08 04 01 10 01 03 32 77 18 08 04 01 10   3n.......2w.....",
          "7520: |   3712: 01 03 32 74 16 08 04 01 10 01 03 32 6e 14 07 04   ..2t.......2n...",
          "7521: |   3728: 01 0e 01 03 32 12 08 04 01 10 01 03 31 74 10 08   ....2.......1t..",
          "7522: |   3744: 04 01 10 01 03 31 6e 0e 07 04 01 0e 01 03 31 0c   .....1n.......1.",
          "7523: |   3760: 09 04 01 12 01 03 30 74 68 0a 08 04 01 10 01 03   ......0th.......",
          "7524: |   3776: 30 74 08 09 04 01 12 01 03 30 6e 75 06 08 04 01   0t.......0nu....",
          "7525: |   3792: 10 01 03 30 6e 04 06 04 01 0c 01 05 52 08 04 01   ...0n.......R...",
          "7526: |   3808: 10 01 02 34 72 22 07 04 01 0e 01 02 34 20 08 04   ...4r.......4 ..",
          "7527: |   3824: 01 10 01 02 33 72 1e 09 04 01 12 01 02 33 61 72   ....3r.......3ar",
          "7528: |   3840: 1c 08 04 01 10 01 02 32 74 1a 08 04 01 10 b3 02   .......2t.......",
          "7529: |   3856: 32 69 18 09 04 01 12 01 02 32 61 72 16 08 04 01   2i.......2ar....",
          "7530: |   3872: 10 01 02 31 74 14 08 04 01 10 01 02 31 6e 12 08   ...1t.......1n..",
          "7531: |   3888: 04 01 10 01 02 31 62 10 08 04 01 10 01 02 31 32   .....1b.......12",
          "7532: |   3904: 0e 0b 04 01 16 01 02 30 74 68 65 72 0c 08 04 01   .......0ther....",
          "7533: |   3920: 10 01 02 30 74 0a 08 04 01 10 01 02 30 6e 08 08   ...0t.......0n..",
          "7534: |   3936: 04 01 10 01 02 30 62 06 08 04 01 10 01 02 30 61   .....0b.......0a",
          "7535: |   3952: 04 06 04 01 0c 01 02 02 07 04 09 10 01 34 74 22   .............4t.",
          "7536: |   3968: 06 04 09 0e 01 34 20 08 04 09 12 01 33 74 65 1e   .....4 .....3te.",
          "7537: |   3984: 07 04 09 10 01 33 70 1c 07 f4 09 11 01 33 66 1a   .....3p......3f.",
          "7538: |   4000: 08 04 09 12 01 32 74 68 18 07 04 09 10 01 32 e4   .....2th......2.",
          "7539: |   4016: 16 07 04 09 10 01 32 69 14 07 04 09 10 01 32 66   ......2i......2f",
          "7540: |   4032: 12 07 04 09 10 01 31 74 10 07 04 09 10 01 31 69   ......1t......1i",
          "7541: |   4048: 0e 06 04 09 0e 01 31 0c 08 04 09 12 01 30 74 65   ......1......0te",
          "7542: |   4064: 0a 07 04 09 10 01 30 74 08 07 04 09 10 01 30 70   ......0t......0p",
          "7543: |   4080: 06 08 04 09 12 01 30 66 74 04 05 04 09 0c 01 02   ......0ft.......",
          "7544: | page 4 offset 12288",
          "7545: |      0: 0d 00 00 00 03 0f eb 00 0f f9 0f f2 0f eb 00 00   ................",
          "7546: |   4064: 00 00 00 00 00 00 00 00 00 00 00 05 03 03 00 10   ................",
          "7547: |   4080: 03 05 05 02 03 00 10 04 06 05 01 03 00 10 04 04   ................",
          "7548: | page 5 offset 16384",
          "7549: |      0: 0a 00 00 00 02 0f eb 00 0f eb 0f f4 00 00 00 00   ................",
          "7550: |   4064: 00 00 00 00 00 00 00 00 00 00 00 08 03 15 01 70   ...............p",
          "7551: |   4080: 67 73 7a 18 0b 03 1b 01 76 65 72 73 69 6f 6e 04   gsz.....version.",
          "7552: | page 6 offset 20480",
          "7553: |      0: 0d 00 00 00 03 0f f2 00 0f fc 0f f7 0f f2 00 00   ................",
          "7554: |   4080: 00 00 23 03 02 01 03 03 02 02 01 02 02 00 f2 09   ..#.............",
          "7555: | end crash-03a1855566d9ae.db",
          "7556: }]} {}",
          "7558: do_catchsql_test 54.1 {",
          "7559:   SELECT rowid==-1 FROM t1('t*');",
          "7560: } {0 {0 0 0}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e608085d3f7e3cc0015fde626e205ee9842ef3cd06dc879fbbc7f2067c592965",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
      "candidate_info": {
        "commit_hash": "ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/gencol1.test"
        ],
        "message": "Correctly generate pre-UPDATE content for virtual columns that are used by foreign key constraints.  Ticket [b9befa4b83a660cc]\n\nFossilOrigin-Name: 40d3282ec285d9f724f6548283f48b601510cf5284da17485723fd650a68f436",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: acedb5c7f7dc1d68bef62098d42ca59e1be7a5083bb03dc07c03b9f9d817158b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:     oldmask |= sqlite3TriggerColmask(pParse,",
          "662:         pTrigger, pChanges, 0, TRIGGER_BEFORE|TRIGGER_AFTER, pTab, onError",
          "663:     );",
          "665:       u32 colFlags = pTab->aCol[i].colFlags;",
          "670:       if( oldmask==0xffffffff",
          "671:        || (i<32 && (oldmask & MASKBIT32(i))!=0)",
          "672:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "",
          "[Removed Lines]",
          "664:     for(i=0, k=regOld; i<pTab->nCol; i++, k++){",
          "666:       if( colFlags & COLFLAG_VIRTUAL ){",
          "667:         k--;",
          "668:         continue;",
          "669:       }",
          "",
          "[Added Lines]",
          "664:     for(i=0; i<pTab->nCol; i++){",
          "666:       k = sqlite3TableColumnToStorage(pTab, i) + regOld;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   } {30 null ntalo | 40 text balaya | 150 integer {} | 1010 real {} |}",
          "146: }",
          "148: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: # 2019-10-31 ticket b9befa4b83a660cc",
          "149: db close",
          "150: sqlite3 db :memory:",
          "151: do_execsql_test gencol1-3.100 {",
          "152:   PRAGMA foreign_keys = true;",
          "153:   CREATE TABLE t0(c0 PRIMARY KEY, c1, c2 AS (c0+c1-c3) REFERENCES t0, c3);",
          "154:   INSERT INTO t0 VALUES (0, 0, 0), (11, 5, 5);",
          "155:   UPDATE t0 SET c1 = c0, c3 = c0;",
          "156:   SELECT *, '|' FROM t0 ORDER BY +c0;",
          "157: } {0 0 0 0 | 11 11 11 11 |}",
          "158: do_catchsql_test gencol1-3.110 {",
          "159:   UPDATE t0 SET c1 = c0, c3 = c0+1;",
          "160: } {1 {FOREIGN KEY constraint failed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b910364bbf531670aa0c02ad004bcdf2f5b66ad",
      "candidate_info": {
        "commit_hash": "6b910364bbf531670aa0c02ad004bcdf2f5b66ad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6b910364bbf531670aa0c02ad004bcdf2f5b66ad",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/callback.c",
          "src/expr.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/where.c",
          "src/whereInt.h",
          "src/whereexpr.c",
          "test/rowvalue.test",
          "tool/lempar.c"
        ],
        "message": "Merge changes on trunk into the generated-columns branch.\n\nFossilOrigin-Name: ba123b8c201053d8f9387de38f3513b06f7721b28d79fab8489f96d336105117",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/callback.c||src/callback.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/whereexpr.c||src/whereexpr.c",
          "test/rowvalue.test||test/rowvalue.test",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: void sqlite3Fts5IterClose(Fts5IndexIter*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: void sqlite3Fts5IndexCloseReader(Fts5Index*);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   if( p->pReader ){",
          "619:     sqlite3_blob *pReader = p->pReader;",
          "620:     p->pReader = 0;",
          "",
          "[Removed Lines]",
          "617: static void fts5CloseReader(Fts5Index *p){",
          "",
          "[Added Lines]",
          "617: void sqlite3Fts5IndexCloseReader(Fts5Index *p){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:       assert( p->pReader==0 );",
          "644:       p->pReader = pBlob;",
          "645:       if( rc!=SQLITE_OK ){",
          "647:       }",
          "648:       if( rc==SQLITE_ABORT ) rc = SQLITE_OK;",
          "649:     }",
          "",
          "[Removed Lines]",
          "646:         fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "646:         sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5204: int sqlite3Fts5IndexSync(Fts5Index *p){",
          "5205:   assert( p->rc==SQLITE_OK );",
          "5206:   fts5IndexFlush(p);",
          "5208:   return fts5IndexReturn(p);",
          "5209: }",
          "",
          "[Removed Lines]",
          "5207:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5207:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5217: int sqlite3Fts5IndexRollback(Fts5Index *p){",
          "5219:   fts5IndexDiscardData(p);",
          "5220:   fts5StructureInvalidate(p);",
          "",
          "[Removed Lines]",
          "5218:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5218:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5456:     if( p->rc ){",
          "5457:       sqlite3Fts5IterClose((Fts5IndexIter*)pRet);",
          "5458:       pRet = 0;",
          "5460:     }",
          "",
          "[Removed Lines]",
          "5459:       fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5459:       sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5529:     Fts5Iter *pIter = (Fts5Iter*)pIndexIter;",
          "5530:     Fts5Index *pIndex = pIter->pIndex;",
          "5531:     fts5MultiIterFree(pIter);",
          "5533:   }",
          "5534: }",
          "",
          "[Removed Lines]",
          "5532:     fts5CloseReader(pIndex);",
          "",
          "[Added Lines]",
          "5532:     sqlite3Fts5IndexCloseReader(pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "744:     sqlite3_free(pCsr->zRankArgs);",
          "745:   }",
          "747:   memset(&pCsr->ePlan, 0, sizeof(Fts5Cursor) - ((u8*)&pCsr->ePlan - (u8*)pCsr));",
          "748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:   sqlite3Fts5IndexCloseReader(pTab->p.pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test": [
          "File: ext/fts5/test/fts5matchinfo.test -> ext/fts5/test/fts5matchinfo.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:   SELECT matchinfo(x1, 'd') FROM x1('a b c');",
          "492: } {1 {unrecognized matchinfo flag: d}}",
          "494: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494: #-------------------------------------------------------------------------",
          "495: # Test using matchinfo() and similar on a non-full-text query",
          "496: #",
          "497: do_execsql_test 15.0 {",
          "498:   CREATE VIRTUAL TABLE t1 USING fts5(x, y);",
          "499:   INSERT INTO t1 VALUES('a', 'b');",
          "500:   INSERT INTO t1 VALUES('c', 'd');",
          "501: }",
          "503: do_execsql_test 15.1 {",
          "504:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "505: } {X'02000000'}",
          "507: do_execsql_test 15.2 {",
          "508:   DELETE FROM t1_content WHERE rowid=1;",
          "509:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "510: } {X'02000000'}",
          "512: fts5_aux_test_functions db",
          "513: do_execsql_test 15.3 {",
          "514:   SELECT fts5_test_all(t1) FROM t1 LIMIT 1;",
          "515: } {",
          "516:   {columnsize {0 0} columntext {c d} columntotalsize {2 2} poslist {} tokenize {c d} rowcount 2}",
          "517: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc368cb090376d33d3844e3689c4f6bd19eed758e39b878ee67fef93b1c839ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1645: #endif",
          "1646: }",
          "",
          "[Removed Lines]",
          "1668: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "1669:   sqlite3 *db = pParse->db;",
          "1670:   u8 enc = ENC(db);",
          "1671:   u8 initbusy = db->init.busy;",
          "1672:   CollSeq *pColl;",
          "1674:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "1675:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "1676:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "1677:   }",
          "1679:   return pColl;",
          "1680: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   return SQLITE_ERROR;",
          "66: }",
          "",
          "[Removed Lines]",
          "82: CollSeq *sqlite3GetCollSeq(",
          "87: ){",
          "88:   CollSeq *p;",
          "89:   sqlite3 *db = pParse->db;",
          "91:   p = pColl;",
          "92:   if( !p ){",
          "93:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "94:   }",
          "95:   if( !p || !p->xCmp ){",
          "99:     callCollNeeded(db, enc, zName);",
          "100:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "101:   }",
          "102:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "103:     p = 0;",
          "104:   }",
          "105:   assert( !p || p->xCmp );",
          "106:   if( p==0 ){",
          "107:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "108:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "109:   }",
          "110:   return p;",
          "111: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204: CollSeq *sqlite3FindCollSeq(",
          "209: ){",
          "210:   CollSeq *pColl;",
          "211:   if( zName ){",
          "",
          "[Removed Lines]",
          "205:   sqlite3 *db,",
          "206:   u8 enc,",
          "207:   const char *zName,",
          "208:   int create",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:   return pColl;",
          "220: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: CollSeq *sqlite3GetCollSeq(",
          "196: ){",
          "197:   CollSeq *p;",
          "198:   sqlite3 *db = pParse->db;",
          "200:   p = pColl;",
          "201:   if( !p ){",
          "202:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "203:   }",
          "204:   if( !p || !p->xCmp ){",
          "208:     callCollNeeded(db, enc, zName);",
          "209:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "210:   }",
          "211:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "212:     p = 0;",
          "213:   }",
          "214:   assert( !p || p->xCmp );",
          "215:   if( p==0 ){",
          "216:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "217:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "218:   }",
          "219:   return p;",
          "220: }",
          "242: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "243:   sqlite3 *db = pParse->db;",
          "244:   u8 enc = ENC(db);",
          "245:   u8 initbusy = db->init.busy;",
          "246:   CollSeq *pColl;",
          "248:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "249:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "250:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "251:   }",
          "253:   return pColl;",
          "254: }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   return pColl;",
          "340: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: CollSeq *sqlite3ExprCompareCollSeq(Parse *pParse, Expr *p){",
          "351:   if( ExprHasProperty(p, EP_Commuted) ){",
          "352:     return sqlite3BinaryCompareCollSeq(pParse, p->pRight, p->pLeft);",
          "353:   }else{",
          "354:     return sqlite3BinaryCompareCollSeq(pParse, p->pLeft, p->pRight);",
          "355:   }",
          "356: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353: ){",
          "354:   int p5;",
          "355:   int addr;",
          "356:   CollSeq *p4;",
          "359:   p5 = binaryCompareP5(pLeft, pRight, jumpIfNull);",
          "360:   addr = sqlite3VdbeAddOp4(pParse->pVdbe, opcode, in2, dest, in1,",
          "361:                            (void*)p4, P4_COLLSEQ);",
          "",
          "[Removed Lines]",
          "358:   p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "",
          "[Added Lines]",
          "375:   if( isCommuted ){",
          "376:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
          "377:   }else{",
          "378:     p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "379:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:   int regRight = 0;",
          "567:   u8 opx = op;",
          "568:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "570:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "571:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "595:     assert( i>=0 && i<nLeft );",
          "596:     r1 = exprVectorRegister(pParse, pLeft, i, regLeft, &pL, &regFree1);",
          "597:     r2 = exprVectorRegister(pParse, pRight, i, regRight, &pR, &regFree2);",
          "599:     testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "600:     testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "601:     testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "598:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5);",
          "",
          "[Added Lines]",
          "620:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5, isCommuted);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3715:         r1 = sqlite3ExprCodeTemp(pParse, pLeft, &regFree1);",
          "3716:         r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "3717:         codeCompare(pParse, pLeft, pExpr->pRight, op,",
          "3719:         assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "3720:         assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "3721:         assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "3718:             r1, r2, inReg, SQLITE_STOREP2 | p5);",
          "",
          "[Added Lines]",
          "3740:             r1, r2, inReg, SQLITE_STOREP2 | p5,",
          "3741:             ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4607:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4608:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4609:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4611:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4612:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4613:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4610:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4633:                   r1, r2, dest, jumpIfNull, ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4782:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4783:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4784:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4786:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4787:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4788:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4785:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4808:                   r1, r2, dest, jumpIfNull,ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4968:       return 2;",
          "4969:     }",
          "4970:   }",
          "4972:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "4973:     if( combinedFlags & EP_xIsSelect ) return 2;",
          "4974:     if( (combinedFlags & EP_FixedCol)==0",
          "",
          "[Removed Lines]",
          "4971:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "",
          "[Added Lines]",
          "4994:   if( (pA->flags & (EP_Distinct|EP_Commuted))",
          "4995:      != (pB->flags & (EP_Distinct|EP_Commuted)) ) return 2;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1703:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1704:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1705:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1706:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "1707:         }else{",
          "1708: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1706:           VdbeCoverage(v);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4170:   if( pRight->op==TK_COLUMN",
          "4171:    && !ExprHasProperty(pRight, EP_FixedCol)",
          "4172:    && sqlite3ExprIsConstant(pLeft)",
          "4174:   ){",
          "4175:     constInsert(pConst, pRight, pLeft);",
          "4176:   }else",
          "4177:   if( pLeft->op==TK_COLUMN",
          "4178:    && !ExprHasProperty(pLeft, EP_FixedCol)",
          "4179:    && sqlite3ExprIsConstant(pRight)",
          "4181:   ){",
          "4182:     constInsert(pConst, pLeft, pRight);",
          "4183:   }",
          "",
          "[Removed Lines]",
          "4173:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "4180:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "",
          "[Added Lines]",
          "4173:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "4180:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4555: #endif",
          "4556: int sqlite3Reprepare(Vdbe*);",
          "4557: void sqlite3ExprListCheckLength(Parse*, ExprList*, const char*);",
          "4558: CollSeq *sqlite3BinaryCompareCollSeq(Parse *, Expr *, Expr *);",
          "4559: int sqlite3TempInMemory(const sqlite3*);",
          "4560: const char *sqlite3JournalModename(int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4558: CollSeq *sqlite3ExprCompareCollSeq(Parse*,Expr*);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:                 continue;",
          "280:               }",
          "281:               assert(pX->pLeft);",
          "284:               if( pColl==0 ) pColl = pParse->db->pDfltColl;",
          "285:               if( sqlite3StrICmp(pColl->zName, pScan->zCollName) ){",
          "286:                 continue;",
          "",
          "[Removed Lines]",
          "282:               pColl = sqlite3BinaryCompareCollSeq(pParse,",
          "283:                                                   pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "282:               pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:         Expr *pX = pTerm->pExpr;",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "803:         pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "804:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2802:   if( pParse->db->flags & SQLITE_EnableQPSG ) pParse = 0;",
          "2803:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "2804:     Expr *pExpr;",
          "2806:     pExpr = pTerm->pExpr;",
          "2807:     if( (!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable==iTab)",
          "2808:      && sqlite3ExprImpliesExpr(pParse, pExpr, pWhere, iTab)",
          "",
          "[Removed Lines]",
          "2805:     if( pTerm->wtFlags & TERM_NOPARTIDX ) continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3265:     int iTerm = pIdxInfo->aConstraint[iCons].iTermOffset;",
          "3266:     Expr *pX = pHidden->pWC->a[iTerm].pExpr;",
          "3267:     if( pX->pLeft ){",
          "3269:     }",
          "3270:     zRet = (pC ? pC->zName : sqlite3StrBINARY);",
          "3271:   }",
          "",
          "[Removed Lines]",
          "3268:       pC = sqlite3BinaryCompareCollSeq(pHidden->pParse, pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "3266:       pC = sqlite3ExprCompareCollSeq(pHidden->pParse, pX);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: static u16 exprCommute(Parse *pParse, Expr *pExpr){",
          "145:   }",
          "146:   SWAP(Expr*,pExpr->pRight,pExpr->pLeft);",
          "147:   if( pExpr->op>=TK_GT ){",
          "",
          "[Removed Lines]",
          "127:   u16 expRight = (pExpr->pRight->flags & EP_Collate);",
          "128:   u16 expLeft = (pExpr->pLeft->flags & EP_Collate);",
          "129:   u16 wtFlags = 0;",
          "130:   assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );",
          "131:   if( expRight==expLeft ){",
          "133:     if( expRight ){",
          "136:       pExpr->pRight->flags &= ~EP_Collate;",
          "137:       wtFlags |= TERM_NOPARTIDX;",
          "138:     }else if( sqlite3ExprCollSeq(pParse, pExpr->pLeft)!=0 ){",
          "142:       pExpr->pLeft->flags |= EP_Collate;",
          "143:       wtFlags |= TERM_NOPARTIDX;",
          "144:     }",
          "",
          "[Added Lines]",
          "114:   if( pExpr->pLeft->op==TK_VECTOR",
          "115:    || pExpr->pRight->op==TK_VECTOR",
          "116:    || sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight) !=",
          "117:       sqlite3BinaryCompareCollSeq(pParse, pExpr->pRight, pExpr->pLeft)",
          "118:   ){",
          "119:     pExpr->flags ^= EP_Commuted;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );",
          "153:     pExpr->op = ((pExpr->op-TK_GT)^2)+TK_GT;",
          "154:   }",
          "156: }",
          "",
          "[Removed Lines]",
          "155:   return wtFlags;",
          "",
          "[Added Lines]",
          "130:   return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "930:   ){",
          "931:     return 0;",
          "932:   }",
          "934:   if( sqlite3IsBinary(pColl) ) return 1;",
          "935:   return sqlite3ExprCollSeqMatch(pParse, pExpr->pLeft, pExpr->pRight);",
          "936: }",
          "",
          "[Removed Lines]",
          "933:   pColl = sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight);",
          "",
          "[Added Lines]",
          "908:   pColl = sqlite3ExprCompareCollSeq(pParse, pExpr);",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:   SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 5,6);",
          "571: } {1 0 1 0 0 1 0 1}",
          "573: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573: # 2019-10-21 Ticket b47e3627ecaadbde",
          "574: #",
          "575: do_execsql_test 23.100 {",
          "576:   DROP TABLE IF EXISTS t0;",
          "577:   CREATE TABLE t0(aa COLLATE NOCASE, bb);",
          "578:   INSERT INTO t0 VALUES('a', 'A');",
          "579:   SELECT (+bb,1) >= (aa, 1), (aa,1)<=(+bb,1) FROM t0;",
          "580:   SELECT 2 FROM t0 WHERE (+bb,1) >= (aa,1);",
          "581:   SELECT 3 FROM t0 WHERE (aa,1) <= (+bb,1);",
          "582: } {0 1 3}",
          "583: do_execsql_test 23.110 {",
          "584:   SELECT (SELECT +bb,1) >= (aa, 1), (aa,1)<=(SELECT +bb,1) FROM t0;",
          "585:   SELECT 2 FROM t0 WHERE (SELECT +bb,1) >= (aa,1);",
          "586:   SELECT 3 FROM t0 WHERE (aa,1) <= (SELECT +bb,1);",
          "587: } {0 1 3}",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1068:   return yyFallback[iToken];",
          "1069: #else",
          "1070:   (void)iToken;",
          "1072:   return 0;",
          "1073: }",
          "",
          "[Removed Lines]",
          "1071: #endif",
          "",
          "[Added Lines]",
          "1072: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
      "candidate_info": {
        "commit_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Performance optimization on sqlite3GenerateConstraintChecks() - bypass the loop that checks each column for NOT NULL constraints if it is known in advance that the table has no NOT NULL constraints.\n\nFossilOrigin-Name: e3c3f4d7872f431a95627d52553101388c1e39458cc7e7f93fc81255f49a89a5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c0042bd5ccd83f8794d19cbb1ec7564584f0dce54bfebc0ada00b836aca065f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1836:         pTab->aCol[i].notNull = OE_Abort;",
          "1837:       }",
          "1838:     }",
          "1839:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1839:     pTab->tabFlags |= TF_HasNotNull;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1385:         onError = OE_Abort;",
          "1388:       }",
          "1403:       }",
          "1409:       }",
          "1410:     }",
          "1411:   }",
          "1415: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "1355:   for(i=0; i<nCol; i++){",
          "1356:     if( i==pTab->iPKey ){",
          "1358:     }",
          "1359:     if( aiChng && aiChng[i]<0 ){",
          "1361:       continue;",
          "1362:     }",
          "1363:     onError = pTab->aCol[i].notNull;",
          "1365:     if( overrideError!=OE_Default ){",
          "1366:       onError = overrideError;",
          "1367:     }else if( onError==OE_Default ){",
          "1368:       onError = OE_Abort;",
          "1369:     }",
          "1370:     if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1371:       onError = OE_Abort;",
          "1372:     }",
          "1373:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1374:         || onError==OE_Ignore || onError==OE_Replace );",
          "1375:     addr1 = 0;",
          "1376:     switch( onError ){",
          "1377:       case OE_Replace: {",
          "1378:         assert( onError==OE_Replace );",
          "1379:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1380:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1381:           VdbeCoverage(v);",
          "1382:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1383:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1384:           VdbeCoverage(v);",
          "1389:       case OE_Abort:",
          "1390:         sqlite3MayAbort(pParse);",
          "1392:       case OE_Rollback:",
          "1393:       case OE_Fail: {",
          "1394:         char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1395:                                     pTab->aCol[i].zName);",
          "1396:         sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL, onError,",
          "1397:                           regNewData+1+i);",
          "1398:         sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1399:         sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1400:         VdbeCoverage(v);",
          "1401:         if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1402:         break;",
          "1404:       default: {",
          "1405:         assert( onError==OE_Ignore );",
          "1406:         sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1407:         VdbeCoverage(v);",
          "1408:         break;",
          "",
          "[Added Lines]",
          "1355:   if( pTab->tabFlags & TF_HasNotNull ){",
          "1356:     for(i=0; i<nCol; i++){",
          "1357:       onError = pTab->aCol[i].notNull;",
          "1359:       assert( pTab->tabFlags & TF_HasNotNull );",
          "1360:       if( i==pTab->iPKey ){",
          "1362:       }",
          "1363:       if( aiChng && aiChng[i]<0 ){",
          "1365:         continue;",
          "1366:       }",
          "1367:       if( overrideError!=OE_Default ){",
          "1368:         onError = overrideError;",
          "1369:       }else if( onError==OE_Default ){",
          "1372:       if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1373:         onError = OE_Abort;",
          "1375:       assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1376:           || onError==OE_Ignore || onError==OE_Replace );",
          "1377:       addr1 = 0;",
          "1378:       switch( onError ){",
          "1379:         case OE_Replace: {",
          "1380:           assert( onError==OE_Replace );",
          "1381:           addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1382:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1383:             VdbeCoverage(v);",
          "1384:           sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1385:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1386:             VdbeCoverage(v);",
          "1387:           onError = OE_Abort;",
          "1390:         }",
          "1391:         case OE_Abort:",
          "1392:           sqlite3MayAbort(pParse);",
          "1394:         case OE_Rollback:",
          "1395:         case OE_Fail: {",
          "1396:           char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1397:                                       pTab->aCol[i].zName);",
          "1398:           sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL,",
          "1399:                             onError, regNewData+1+i);",
          "1400:           sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1401:           sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1402:           VdbeCoverage(v);",
          "1403:           if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1404:           break;",
          "1405:         }",
          "1406:         default: {",
          "1407:           assert( onError==OE_Ignore );",
          "1408:           sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1409:           VdbeCoverage(v);",
          "1410:           break;",
          "1411:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
      "candidate_info": {
        "commit_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d0c51d1a041966bccc598d114aa17a13cf64d662",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab.test"
        ],
        "message": "Do not allow shadow tables to be dropped in defensive mode.\n\nFossilOrigin-Name: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0adb273f7e7671efb0e0a1619887e369500dfd2db7ef1b1e125c2414ea96e96f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2963:     }",
          "2964:   }",
          "2965: #endif",
          "2969:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2970:     goto exit_drop_table;",
          "2971:   }",
          "",
          "[Removed Lines]",
          "2966:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "2967:     && sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)!=0",
          "2968:     && sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)!=0 ){",
          "",
          "[Added Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:     CREATE VIRTUAL TABLE y1 USING fts3;",
          "543:   }",
          "546:     INSERT INTO y1_segments VALUES(1, X'1234567890');",
          "547:   } {1 {table y1_segments may not be modified}}",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "554:     ALTER TABLE y1 RENAME TO z1;",
          "555:   }",
          "558:     SELECT * FROM z1_segments;",
          "559:   }",
          "560: }",
          "",
          "[Removed Lines]",
          "545:   do_catchsql_test 16.1 {",
          "549:   do_catchsql_test 16.2 {",
          "553:   do_execsql_test 16.3 {",
          "557:   do_execsql_test 16.4 {",
          "",
          "[Added Lines]",
          "545:   do_catchsql_test 16.10 {",
          "549:   do_catchsql_test 16.20 {",
          "553:   do_catchsql_test 16.21 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "561:   do_execsql_test 16.40 {",
          "",
          "---------------"
        ]
      }
    }
  ]
}