{
  "cve_id": "CVE-2017-7524",
  "cve_desc": "tpm2-tools versions before 1.1.1 are vulnerable to a password leak due to transmitting password in plaintext from client to server when generating HMAC.",
  "repo": "01org/tpm2.0-tools",
  "patch_hash": "c5d72beaab1cbbbe68271f4bc4b6670d69985157",
  "patch_info": {
    "commit_hash": "c5d72beaab1cbbbe68271f4bc4b6670d69985157",
    "repo": "01org/tpm2.0-tools",
    "commit_url": "https://github.com/01org/tpm2.0-tools/commit/c5d72beaab1cbbbe68271f4bc4b6670d69985157",
    "files": [
      "Makefile.am",
      "configure.ac",
      "lib/tpm_kdfa.c",
      "lib/tpm_kdfa.h",
      "lib/tpm_session.c"
    ],
    "message": "kdfa: use openssl for hmac not tpm\n\nWhile not reachable in the current code base tools, a potential\nsecurity bug lurked in tpm_kdfa().\n\nIf using that routine for an hmac authorization, the hmac was\ncalculated using the tpm. A user of an object wishing to\nauthenticate via hmac, would expect that the password is never\nsent to the tpm. However, since the hmac calculation relies on\npassword, and is performed by the tpm, the password ends up\nbeing sent in plain text to the tpm.\n\nThe fix is to use openssl to generate the hmac on the host.\n\nFixes: CVE-2017-7524\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
    "before_after_code_files": [
      "Makefile.am||Makefile.am",
      "configure.ac||configure.ac",
      "lib/tpm_kdfa.c||lib/tpm_kdfa.c",
      "lib/tpm_kdfa.h||lib/tpm_kdfa.h",
      "lib/tpm_session.c||lib/tpm_session.c"
    ]
  },
  "patch_diff": {
    "Makefile.am||Makefile.am": [
      "File: Makefile.am -> Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
      "36: LIB_COMMON := lib/libcommon.a",
      "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
      "43: sbin_PROGRAMS = \\",
      "44:     tools/tpm2_create \\",
      "",
      "[Removed Lines]",
      "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS)",
      "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS)",
      "",
      "[Added Lines]",
      "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS) $(CRYPTO_CFLAGS)",
      "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS) $(CRYPTO_LIBS)",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:     [AC_MSG_ERROR(",
      "70:         [no TCTIs: at least one TCTI library must be enabled],",
      "71:         [1])])",
      "73: AC_ARG_ENABLE([unit],",
      "74:             [AS_HELP_STRING([--enable-unit],",
      "75:                             [build cmocka unit tests (default is no)])],",
      "",
      "[Removed Lines]",
      "72: PKG_CHECK_MODULES([CURL],[libcurl libcrypto])",
      "",
      "[Added Lines]",
      "72: PKG_CHECK_MODULES([CRYPTO],[libcrypto])",
      "73: PKG_CHECK_MODULES([CURL],[libcurl])",
      "",
      "---------------"
    ],
    "lib/tpm_kdfa.c||lib/tpm_kdfa.c": [
      "File: lib/tpm_kdfa.c -> lib/tpm_kdfa.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: #include <sapi/tpm20.h>",
      "30: #include \"string-bytes.h\"",
      "31: #include \"tpm_hmac.h\"",
      "34:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV, UINT16 bits,",
      "35:         TPM2B_MAX_BUFFER  *resultKey )",
      "36: {",
      "38:     TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2;",
      "39:     UINT8 *tpm2bBitsPtr = &tpm2bBits.t.buffer[0];",
      "40:     UINT8 *tpm2b_i_2Ptr = &tpm2b_i_2.t.buffer[0];",
      "41:     TPM2B_DIGEST *bufferList[8];",
      "42:     UINT32 bitsSwizzled, i_Swizzled;",
      "44:     int i, j;",
      "45:     UINT16 bytes = bits / 8;",
      "",
      "[Removed Lines]",
      "33: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
      "37:     TPM2B_DIGEST tmpResult;",
      "43:     TPM_RC rval;",
      "",
      "[Added Lines]",
      "30:  #include <openssl/err.h>",
      "31: #include <openssl/hmac.h>",
      "35: #include \"log.h\"",
      "37: static const EVP_MD *tpm_algorithm_to_openssl_digest(TPMI_ALG_HASH algorithm) {",
      "39:     switch(algorithm) {",
      "40:     case TPM_ALG_SHA1:",
      "41:         return EVP_sha1();",
      "42:     case ALG_SHA256_VALUE:",
      "43:         return EVP_sha256();",
      "44:     case TPM_ALG_SHA384:",
      "45:         return EVP_sha384();",
      "46:     case TPM_ALG_SHA512:",
      "47:         return EVP_sha512();",
      "48:     default:",
      "49:         return NULL;",
      "50:     }",
      "52: }",
      "54: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
      "63:     TPM_RC rval = TPM_RC_SUCCESS;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:     i = 1;",
      "67:     while( resultKey->t.size < bytes )",
      "68:     {",
      "71:         i_Swizzled = string_bytes_endian_convert_32( i );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:     const EVP_MD *md = tpm_algorithm_to_openssl_digest(hashAlg);",
      "88:     if (!md) {",
      "89:         LOG_ERR(\"Algorithm not supported for hmac: %x\", hashAlg);",
      "90:         return TPM_RC_HASH;",
      "91:     }",
      "93:     HMAC_CTX ctx;",
      "94:     HMAC_CTX_init(&ctx);",
      "95:     int rc = HMAC_Init_ex(&ctx, key->buffer, key->size, md, NULL);",
      "96:     if (!rc) {",
      "97:         LOG_ERR(\"HMAC Init failed: %s\", ERR_error_string(rc, NULL));",
      "98:         return TPM_RC_MEMORY;",
      "99:     }",
      "104:         TPM2B_DIGEST tmpResult;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "77:         bufferList[j++] = (TPM2B_DIGEST *)contextU;",
      "78:         bufferList[j++] = (TPM2B_DIGEST *)contextV;",
      "79:         bufferList[j++] = (TPM2B_DIGEST *)&(tpm2bBits.b);",
      "85:         }",
      "87:         bool res = string_bytes_concat_buffer(resultKey, &(tmpResult.b));",
      "88:         if (!res) {",
      "90:         }",
      "91:     }",
      "94:     resultKey->t.size = bytes;",
      "97: }",
      "",
      "[Removed Lines]",
      "80:         bufferList[j++] = (TPM2B_DIGEST *)0;",
      "81:         rval = tpm_hmac(sapi_context, hashAlg, key, (TPM2B **)&( bufferList[0] ), &tmpResult );",
      "82:         if( rval != TPM_RC_SUCCESS )",
      "83:         {",
      "84:             return( rval );",
      "89:             return TSS2_SYS_RC_BAD_VALUE;",
      "96:     return TPM_RC_SUCCESS;",
      "",
      "[Added Lines]",
      "116:         bufferList[j] = (TPM2B_DIGEST *)0;",
      "118:         int c;",
      "119:         for(c=0; c < j; c++) {",
      "120:             TPM2B_DIGEST *digest = bufferList[c];",
      "121:             int rc =  HMAC_Update(&ctx, digest->b.buffer, digest->b.size);",
      "122:             if (!rc) {",
      "123:                 LOG_ERR(\"HMAC Update failed: %s\", ERR_error_string(rc, NULL));",
      "124:                 rval = TPM_RC_MEMORY;",
      "125:                 goto err;",
      "126:             }",
      "127:         }",
      "129:         unsigned size = sizeof(tmpResult.t.buffer);",
      "130:         int rc = HMAC_Final(&ctx, tmpResult.t.buffer, &size);",
      "131:         if (!rc) {",
      "132:             LOG_ERR(\"HMAC Final failed: %s\", ERR_error_string(rc, NULL));",
      "133:             rval = TPM_RC_MEMORY;",
      "134:             goto err;",
      "137:         tmpResult.t.size = size;",
      "141:             rval = TSS2_SYS_RC_BAD_VALUE;",
      "142:             goto err;",
      "149: err:",
      "150:     HMAC_CTX_cleanup(&ctx);",
      "152:     return rval;",
      "",
      "---------------"
    ],
    "lib/tpm_kdfa.h||lib/tpm_kdfa.h": [
      "File: lib/tpm_kdfa.h -> lib/tpm_kdfa.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV,",
      "47:         UINT16 bits, TPM2B_MAX_BUFFER *resultKey );",
      "",
      "[Removed Lines]",
      "45: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
      "",
      "[Added Lines]",
      "45: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
      "",
      "---------------"
    ],
    "lib/tpm_session.c||lib/tpm_session.c": [
      "File: lib/tpm_session.c -> lib/tpm_session.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "198:             }",
      "199:             else",
      "200:             {",
      "202:                         &( session->nonceOlder.b ), bytes * 8, (TPM2B_MAX_BUFFER *)&( session->sessionKey ) );",
      "203:             }",
      "",
      "[Removed Lines]",
      "201:                 rval = tpm_kdfa(sapi_context, session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
      "",
      "[Added Lines]",
      "201:                 rval = tpm_kdfa(session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6644a07c02d6adb9b613e992968706b1296b5b7",
      "candidate_info": {
        "commit_hash": "d6644a07c02d6adb9b613e992968706b1296b5b7",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/d6644a07c02d6adb9b613e992968706b1296b5b7",
        "files": [
          "Makefile.am"
        ],
        "message": "Makefile.am: fix custom install locations\n\nConfigure.ac was correctly checking the sapi library via\nPKG_CHECK_MODULES and thus setting SAPI_CFLAGS with the\ninclude path. However, this was never being propagated to\nAM_CFLAGS. The end result is that custom install locations\nwouldn't work without hacking on CFLAGS, as it couldn't\nfind the sapi headers. Correct this by passing SAPI_CFLAGS\nto AM_CFLAGS.\n\nFixes: #402\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am"
          ],
          "candidate": [
            "Makefile.am||Makefile.am"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
          "36: LIB_COMMON := lib/libcommon.a",
          "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS) $(CRYPTO_LIBS)",
          "",
          "[Removed Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS) $(CRYPTO_CFLAGS)",
          "",
          "[Added Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(SAPI_CFLAGS) $(TCTI_TABRMD_CFLAGS) $(CRYPTO_CFLAGS)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7e2ccf76b44059058f2f3ca9ed2355609293b4d",
      "candidate_info": {
        "commit_hash": "e7e2ccf76b44059058f2f3ca9ed2355609293b4d",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/e7e2ccf76b44059058f2f3ca9ed2355609293b4d",
        "files": [
          "configure.ac"
        ],
        "message": "configure: libcrypto must be newer than 1.0.2g\n\ntpm2_import has a dependency on:\nRSA_padding_add_PKCS1_OAEP_mgf1\n\nThis is not available in older version of libcrypto.\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     [AC_MSG_ERROR(",
          "76:         [no TCTIs: at least one TCTI library must be enabled],",
          "77:         [1])])",
          "79: PKG_CHECK_MODULES([CURL],[libcurl])",
          "80: AC_ARG_ENABLE([unit],",
          "81:             [AS_HELP_STRING([--enable-unit],",
          "",
          "[Removed Lines]",
          "78: PKG_CHECK_MODULES([CRYPTO],[libcrypto])",
          "",
          "[Added Lines]",
          "78: PKG_CHECK_MODULES([CRYPTO], [libcrypto >= 1.0.2g])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "788a17abbe0000c560935ef9f31c9a6892d9ea33",
      "candidate_info": {
        "commit_hash": "788a17abbe0000c560935ef9f31c9a6892d9ea33",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/788a17abbe0000c560935ef9f31c9a6892d9ea33",
        "files": [
          "Makefile.am",
          "configure.ac",
          "lib/tpm_kdfa.c",
          "lib/tpm_kdfa.h",
          "lib/tpm_session.c"
        ],
        "message": "kdfa: use openssl for hmac not tpm\n\nWhile not reachable in the current code base tools, a potential\nsecurity bug lurked in tpm_kdfa().\n\nIf using that routine for an hmac authorization, the hmac was\ncalculated using the tpm. A user of an object wishing to\nauthenticate via hmac, would expect that the password is never\nsent to the tpm. However, since the hmac calculation relies on\npassword, and is performed by the tpm, the password ends up\nbeing sent in plain text to the tpm.\n\nThe fix is to use openssl to generate the hmac on the host.\n\nFixes: CVE-2017-7524\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "lib/tpm_kdfa.c||lib/tpm_kdfa.c",
          "lib/tpm_kdfa.h||lib/tpm_kdfa.h",
          "lib/tpm_session.c||lib/tpm_session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac",
            "lib/tpm_kdfa.c||lib/tpm_kdfa.c",
            "lib/tpm_kdfa.h||lib/tpm_kdfa.h",
            "lib/tpm_session.c||lib/tpm_session.c"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac",
            "lib/tpm_kdfa.c||lib/tpm_kdfa.c",
            "lib/tpm_kdfa.h||lib/tpm_kdfa.h",
            "lib/tpm_session.c||lib/tpm_session.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
          "36: LIB_COMMON := lib/libcommon.a",
          "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "43: sbin_PROGRAMS = \\",
          "44:     tools/tpm2_create \\",
          "",
          "[Removed Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS)",
          "",
          "[Added Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS) $(CRYPTO_CFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS) $(CRYPTO_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     [AC_MSG_ERROR(",
          "70:         [no TCTIs: at least one TCTI library must be enabled],",
          "71:         [1])])",
          "73: AC_ARG_ENABLE([unit],",
          "74:             [AS_HELP_STRING([--enable-unit],",
          "75:                             [build cmocka unit tests (default is no)])],",
          "",
          "[Removed Lines]",
          "72: PKG_CHECK_MODULES([CURL],[libcurl libcrypto])",
          "",
          "[Added Lines]",
          "72: PKG_CHECK_MODULES([CRYPTO],[libcrypto])",
          "73: PKG_CHECK_MODULES([CURL],[libcurl])",
          "",
          "---------------"
        ],
        "lib/tpm_kdfa.c||lib/tpm_kdfa.c": [
          "File: lib/tpm_kdfa.c -> lib/tpm_kdfa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <sapi/tpm20.h>",
          "30: #include \"string-bytes.h\"",
          "31: #include \"tpm_hmac.h\"",
          "34:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV, UINT16 bits,",
          "35:         TPM2B_MAX_BUFFER  *resultKey )",
          "36: {",
          "38:     TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2;",
          "39:     UINT8 *tpm2bBitsPtr = &tpm2bBits.t.buffer[0];",
          "40:     UINT8 *tpm2b_i_2Ptr = &tpm2b_i_2.t.buffer[0];",
          "41:     TPM2B_DIGEST *bufferList[8];",
          "42:     UINT32 bitsSwizzled, i_Swizzled;",
          "44:     int i, j;",
          "45:     UINT16 bytes = bits / 8;",
          "",
          "[Removed Lines]",
          "33: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
          "37:     TPM2B_DIGEST tmpResult;",
          "43:     TPM_RC rval;",
          "",
          "[Added Lines]",
          "30:  #include <openssl/err.h>",
          "31: #include <openssl/hmac.h>",
          "35: #include \"log.h\"",
          "37: static const EVP_MD *tpm_algorithm_to_openssl_digest(TPMI_ALG_HASH algorithm) {",
          "39:     switch(algorithm) {",
          "40:     case TPM_ALG_SHA1:",
          "41:         return EVP_sha1();",
          "42:     case ALG_SHA256_VALUE:",
          "43:         return EVP_sha256();",
          "44:     case TPM_ALG_SHA384:",
          "45:         return EVP_sha384();",
          "46:     case TPM_ALG_SHA512:",
          "47:         return EVP_sha512();",
          "48:     default:",
          "49:         return NULL;",
          "50:     }",
          "52: }",
          "54: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
          "63:     TPM_RC rval = TPM_RC_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     i = 1;",
          "67:     while( resultKey->t.size < bytes )",
          "68:     {",
          "71:         i_Swizzled = string_bytes_endian_convert_32( i );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     const EVP_MD *md = tpm_algorithm_to_openssl_digest(hashAlg);",
          "88:     if (!md) {",
          "89:         LOG_ERR(\"Algorithm not supported for hmac: %x\", hashAlg);",
          "90:         return TPM_RC_HASH;",
          "91:     }",
          "93:     HMAC_CTX ctx;",
          "94:     HMAC_CTX_init(&ctx);",
          "95:     int rc = HMAC_Init_ex(&ctx, key->buffer, key->size, md, NULL);",
          "96:     if (!rc) {",
          "97:         LOG_ERR(\"HMAC Init failed: %s\", ERR_error_string(rc, NULL));",
          "98:         return TPM_RC_MEMORY;",
          "99:     }",
          "104:         TPM2B_DIGEST tmpResult;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:         bufferList[j++] = (TPM2B_DIGEST *)contextU;",
          "78:         bufferList[j++] = (TPM2B_DIGEST *)contextV;",
          "79:         bufferList[j++] = (TPM2B_DIGEST *)&(tpm2bBits.b);",
          "85:         }",
          "87:         bool res = string_bytes_concat_buffer(resultKey, &(tmpResult.b));",
          "88:         if (!res) {",
          "90:         }",
          "91:     }",
          "94:     resultKey->t.size = bytes;",
          "97: }",
          "",
          "[Removed Lines]",
          "80:         bufferList[j++] = (TPM2B_DIGEST *)0;",
          "81:         rval = tpm_hmac(sapi_context, hashAlg, key, (TPM2B **)&( bufferList[0] ), &tmpResult );",
          "82:         if( rval != TPM_RC_SUCCESS )",
          "83:         {",
          "84:             return( rval );",
          "89:             return TSS2_SYS_RC_BAD_VALUE;",
          "96:     return TPM_RC_SUCCESS;",
          "",
          "[Added Lines]",
          "116:         bufferList[j] = (TPM2B_DIGEST *)0;",
          "118:         int c;",
          "119:         for(c=0; c < j; c++) {",
          "120:             TPM2B_DIGEST *digest = bufferList[c];",
          "121:             int rc =  HMAC_Update(&ctx, digest->b.buffer, digest->b.size);",
          "122:             if (!rc) {",
          "123:                 LOG_ERR(\"HMAC Update failed: %s\", ERR_error_string(rc, NULL));",
          "124:                 rval = TPM_RC_MEMORY;",
          "125:                 goto err;",
          "126:             }",
          "127:         }",
          "129:         unsigned size = sizeof(tmpResult.t.buffer);",
          "130:         int rc = HMAC_Final(&ctx, tmpResult.t.buffer, &size);",
          "131:         if (!rc) {",
          "132:             LOG_ERR(\"HMAC Final failed: %s\", ERR_error_string(rc, NULL));",
          "133:             rval = TPM_RC_MEMORY;",
          "134:             goto err;",
          "137:         tmpResult.t.size = size;",
          "141:             rval = TSS2_SYS_RC_BAD_VALUE;",
          "142:             goto err;",
          "149: err:",
          "150:     HMAC_CTX_cleanup(&ctx);",
          "152:     return rval;",
          "",
          "---------------"
        ],
        "lib/tpm_kdfa.h||lib/tpm_kdfa.h": [
          "File: lib/tpm_kdfa.h -> lib/tpm_kdfa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV,",
          "47:         UINT16 bits, TPM2B_MAX_BUFFER *resultKey );",
          "",
          "[Removed Lines]",
          "45: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
          "",
          "[Added Lines]",
          "45: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
          "",
          "---------------"
        ],
        "lib/tpm_session.c||lib/tpm_session.c": [
          "File: lib/tpm_session.c -> lib/tpm_session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:             }",
          "199:             else",
          "200:             {",
          "202:                         &( session->nonceOlder.b ), bytes * 8, (TPM2B_MAX_BUFFER *)&( session->sessionKey ) );",
          "203:             }",
          "",
          "[Removed Lines]",
          "201:                 rval = tpm_kdfa(sapi_context, session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
          "",
          "[Added Lines]",
          "201:                 rval = tpm_kdfa(session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b214121c888cd10d8d82bc90ac80a1d09c8f75e7",
      "candidate_info": {
        "commit_hash": "b214121c888cd10d8d82bc90ac80a1d09c8f75e7",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/b214121c888cd10d8d82bc90ac80a1d09c8f75e7",
        "files": [
          "Makefile.am",
          "configure.ac",
          "src/kdfa.c"
        ],
        "message": "kdfa: use openssl for hmac not tpm\n\nWhile not reachable in the current code base tools, a potential\nsecurity bug lurked in tpm_kdfa().\n\nIf using that routine for an hmac authorization, the hmac was\ncalculated using the tpm. A user of an object wishing to\nauthenticate via hmac, would expect that the password is never\nsent to the tpm. However, since the hmac calculation relies on\npassword, and is performed by the tpm, the password ends up\nbeing sent in plain text to the tpm.\n\nThe fix is to use openssl to generate the hmac on the host.\n\nFixes: CVE-2017-7524\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "src/kdfa.c||src/kdfa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src",
          "40: TESTS = $(check_PROGRAMS)",
          "42: noinst_LIBRARIES = src/libcommon.a",
          "",
          "[Removed Lines]",
          "37: AM_CFLAGS   = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS)",
          "38: AM_CXXFLAGS = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CXXFLAGS)",
          "39: LDADD = src/libcommon.a $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "",
          "[Added Lines]",
          "37: AM_CFLAGS   = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(CRYPTO_CFLAGS)",
          "38: AM_CXXFLAGS = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CXXFLAGS) $(CRYPTO_CXXFLAGS)",
          "39: LDADD = src/libcommon.a $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(CRYPTO_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: AC_CONFIG_MACRO_DIR([m4])",
          "3: AC_PROG_CC",
          "4: AC_PROG_CXX",
          "",
          "[Removed Lines]",
          "1: AC_INIT([tpm2.0-tools], [1.1.0])",
          "",
          "[Added Lines]",
          "1: AC_INIT([tpm2.0-tools], [1.1.1])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: PKG_CHECK_MODULES([SAPI],[sapi])",
          "10: PKG_CHECK_MODULES([TCTI_SOCK],[tcti-socket])",
          "11: PKG_CHECK_MODULES([TCTI_DEV],[tcti-device])",
          "13: AC_ARG_ENABLE([unit],",
          "14:             [AS_HELP_STRING([--enable-unit],",
          "15:                             [build cmocka unit tests (default is no)])],",
          "",
          "[Removed Lines]",
          "12: PKG_CHECK_MODULES([CURL],[libcurl libcrypto])",
          "",
          "[Added Lines]",
          "12: PKG_CHECK_MODULES([CRYPTO],[libcrypto])",
          "13: PKG_CHECK_MODULES([CURL],[libcurl])",
          "",
          "---------------"
        ],
        "src/kdfa.c||src/kdfa.c": [
          "File: src/kdfa.c -> src/kdfa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <stdlib.h>",
          "32: #include \"changeEndian.h\"",
          "36: TPM_RC KDFa( TPMI_ALG_HASH hashAlg, TPM2B *key, char *label,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <openssl/err.h>",
          "35: #include <openssl/hmac.h>",
          "37: static const EVP_MD *tpm_algorithm_to_openssl_digest(TPMI_ALG_HASH algorithm) {",
          "39:     switch(algorithm) {",
          "40:     case TPM_ALG_SHA1:",
          "41:         return EVP_sha1();",
          "42:     case ALG_SHA256_VALUE:",
          "43:         return EVP_sha256();",
          "44:     case TPM_ALG_SHA384:",
          "45:         return EVP_sha384();",
          "46:     case TPM_ALG_SHA512:",
          "47:         return EVP_sha512();",
          "48:     default:",
          "49:         return NULL;",
          "50:     }",
          "52: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     UINT8 *tpm2b_i_2Ptr = &tpm2b_i_2.t.buffer[0];",
          "43:     TPM2B_DIGEST *bufferList[8];",
          "44:     UINT32 bitsSwizzled, i_Swizzled;",
          "46:     int i, j;",
          "47:     UINT16 bytes = bits / 8;",
          "",
          "[Removed Lines]",
          "45:     TPM_RC rval;",
          "",
          "[Added Lines]",
          "65:     TPM_RC rval = TPM_RC_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:     i = 1;",
          "90:     while( resultKey->t.size < bytes )",
          "91:     {",
          "94:         i_Swizzled = CHANGE_ENDIAN_DWORD( i );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     const EVP_MD *md = tpm_algorithm_to_openssl_digest(hashAlg);",
          "111:     if (!md) {",
          "112:         fprintf(stderr, \"Algorithm not supported for hmac: %x\\n\", hashAlg);",
          "113:         return TPM_RC_HASH;",
          "114:     }",
          "116:     HMAC_CTX ctx;",
          "117:     HMAC_CTX_init(&ctx);",
          "118:     int rc = HMAC_Init_ex(&ctx, key->buffer, key->size, md, NULL);",
          "119:     if (!rc) {",
          "120:         fprintf(stderr, \"HMAC Init failed: %s\\n\", ERR_error_string(rc, NULL));",
          "121:         return TPM_RC_MEMORY;",
          "122:     }",
          "126:         TPM2B_DIGEST tmpResult;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:         bufferList[j++] = (TPM2B_DIGEST *)contextU;",
          "101:         bufferList[j++] = (TPM2B_DIGEST *)contextV;",
          "102:         bufferList[j++] = (TPM2B_DIGEST *)&(tpm2bBits.b);",
          "104: #ifdef DEBUG",
          "105:         OpenOutFile( &outFp );",
          "106:         for( j = 0; bufferList[j] != 0; j++ )",
          "",
          "[Removed Lines]",
          "103:         bufferList[j++] = (TPM2B_DIGEST *)0;",
          "",
          "[Added Lines]",
          "138:         bufferList[j] = (TPM2B_DIGEST *)0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:         }",
          "111:         CloseOutFile( &outFp );",
          "112: #endif",
          "117:         }",
          "119:         ConcatSizedByteBuffer( resultKey, &(tmpResult.b) );",
          "",
          "[Removed Lines]",
          "113:         rval = (*HmacFunctionPtr )( hashAlg, key, (TPM2B **)&( bufferList[0] ), &tmpResult );",
          "114:         if( rval != TPM_RC_SUCCESS )",
          "115:         {",
          "116:             return( rval );",
          "",
          "[Added Lines]",
          "149:         int c;",
          "150:         for(c=0; c < j; c++) {",
          "151:             TPM2B_DIGEST *digest = bufferList[c];",
          "152:             int rc =  HMAC_Update(&ctx, digest->b.buffer, digest->b.size);",
          "153:             if (!rc) {",
          "154:                 fprintf(stderr, \"HMAC Update failed: %s\\n\", ERR_error_string(rc, NULL));",
          "155:                 rval = TPM_RC_MEMORY;",
          "156:                 goto err;",
          "157:             }",
          "158:         }",
          "160:         unsigned size = sizeof(tmpResult.t.buffer);",
          "161:         int rc = HMAC_Final(&ctx, tmpResult.t.buffer, &size);",
          "162:         if (!rc) {",
          "163:             fprintf(stderr, \"HMAC Final failed: %s\\n\", ERR_error_string(rc, NULL));",
          "164:             rval = TPM_RC_MEMORY;",
          "165:             goto err;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "129:     CloseOutFile( &outFp );",
          "130: #endif",
          "133: }",
          "",
          "[Removed Lines]",
          "132:     return TPM_RC_SUCCESS;",
          "",
          "[Added Lines]",
          "181: err:",
          "182:     HMAC_CTX_cleanup(&ctx);",
          "184:     return rval;",
          "",
          "---------------"
        ]
      }
    }
  ]
}