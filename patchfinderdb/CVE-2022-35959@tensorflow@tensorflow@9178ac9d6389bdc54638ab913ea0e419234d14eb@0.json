{
  "cve_id": "CVE-2022-35959",
  "cve_desc": "TensorFlow is an open source platform for machine learning. The implementation of `AvgPool3DGradOp` does not fully validate the input `orig_input_shape`. This results in an overflow that results in a `CHECK` failure which can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 9178ac9d6389bdc54638ab913ea0e419234d14eb. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "9178ac9d6389bdc54638ab913ea0e419234d14eb",
  "patch_info": {
    "commit_hash": "9178ac9d6389bdc54638ab913ea0e419234d14eb",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/9178ac9d6389bdc54638ab913ea0e419234d14eb",
    "files": [
      "tensorflow/compiler/tf2xla/BUILD",
      "tensorflow/compiler/tf2xla/xla_op_kernel.cc",
      "tensorflow/core/kernels/pooling_ops_3d.cc",
      "tensorflow/python/kernel_tests/nn_ops/BUILD",
      "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
    ],
    "message": "Fix security vulnerability with AvgPool3DGrad.\n\nPiperOrigin-RevId: 461244371",
    "before_after_code_files": [
      "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
      "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc",
      "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc": [
      "File: tensorflow/compiler/tf2xlxla_op_kernel.cc -> tensorflow/compiler/tf2xla/xla_op_kernel.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #include \"tensorflow/core/util/overflow.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "448:   int64_t num_elements = 1;",
      "449:   for (auto i = dims.begin(); i != dims.end(); ++i) {",
      "450:     num_elements = MultiplyWithoutOverflow(num_elements, *i);",
      "451:     if (num_elements < 0)",
      "452:       return errors::InvalidArgument(",
      "453:           \"The total elements specified by orig_input_shape is too large.\",",
      "454:           \"Encountered overflow after multiplying\", *i,",
      "455:           \", result: \", num_elements);",
      "456:   }",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc": [
      "File: tensorflow/core/kernels/pooling_ops_3d.cc -> tensorflow/core/kernels/pooling_ops_3d.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "523:     TensorShape output_shape;",
      "524:     auto shape_vec = tensor_in_shape.vec<int32>();",
      "525:     for (int64_t i = 0; i < tensor_in_shape.NumElements(); ++i) {",
      "527:     }",
      "529:     Tensor* output;",
      "",
      "[Removed Lines]",
      "526:       output_shape.AddDim(shape_vec(i));",
      "",
      "[Added Lines]",
      "526:       OP_REQUIRES_OK(context, output_shape.AddDimWithStatus(shape_vec(i)));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py -> tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: from tensorflow.python.eager import context",
      "20: from tensorflow.python.framework import constant_op",
      "21: from tensorflow.python.framework import errors",
      "22: from tensorflow.python.framework import errors_impl",
      "23: from tensorflow.python.framework import test_util",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from tensorflow.python.framework import dtypes",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:     # Initializes the input tensor with array containing incrementing",
      "68:     # numbers from 1.",
      "69:     x = [f * 1.0 for f in range(1, total_size + 1)]",
      "71:       t = constant_op.constant(x, shape=input_sizes)",
      "72:       window = [1] + list(window) + [1]",
      "73:       strides = [1] + list(strides) + [1]",
      "",
      "[Removed Lines]",
      "70:     with self.cached_session(use_gpu=use_gpu) as sess:",
      "",
      "[Added Lines]",
      "71:     with self.cached_session(use_gpu=use_gpu):",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "124:         padding=\"SAME\",",
      "125:         expected=expected_output)",
      "127:   def testMaxPool3dValidPadding(self):",
      "128:     expected_output = [40.0, 41.0, 42.0]",
      "129:     self._VerifyValues(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:   def testMaxPool3dGrad(self):",
      "129:     with self.assertRaises(",
      "130:         (errors.ResourceExhaustedError, errors.InvalidArgumentError)):",
      "131:       with self.cached_session():",
      "132:         orig_input_shape = constant_op.constant(",
      "133:             1879048192, shape=[5], dtype=dtypes.int32)",
      "134:         grad = constant_op.constant(",
      "135:             1, shape=[1, 3, 2, 4, 2], dtype=dtypes.float32)",
      "136:         t = gen_nn_ops.AvgPool3DGrad(",
      "137:             orig_input_shape=orig_input_shape,",
      "138:             grad=grad,",
      "139:             ksize=[1, 1, 1, 1, 1],",
      "140:             strides=[1, 1, 1, 1, 1],",
      "141:             padding=\"SAME\",",
      "142:             data_format=\"NDHWC\")",
      "143:         self.evaluate(t)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c7801a1aa1da9612b69977bf3ae226175336077d",
      "candidate_info": {
        "commit_hash": "c7801a1aa1da9612b69977bf3ae226175336077d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c7801a1aa1da9612b69977bf3ae226175336077d",
        "files": [
          "tensorflow/compiler/tf2xla/BUILD",
          "tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "tensorflow/core/kernels/pooling_ops_3d.cc",
          "tensorflow/python/kernel_tests/nn_ops/BUILD",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
        ],
        "message": "Fix security vulnerability with AvgPool3DGrad.\n\nPiperOrigin-RevId: 461244371",
        "before_after_code_files": [
          "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
            "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
          ],
          "candidate": [
            "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
            "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc": [
          "File: tensorflow/compiler/tf2xlxla_op_kernel.cc -> tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:   int64_t num_elements = 1;",
          "449:   for (auto i = dims.begin(); i != dims.end(); ++i) {",
          "450:     num_elements = MultiplyWithoutOverflow(num_elements, *i);",
          "451:     if (num_elements < 0)",
          "452:       return errors::InvalidArgument(",
          "453:           \"The total elements specified by orig_input_shape is too large.\",",
          "454:           \"Encountered overflow after multiplying\", *i,",
          "455:           \", result: \", num_elements);",
          "456:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc": [
          "File: tensorflow/core/kernels/pooling_ops_3d.cc -> tensorflow/core/kernels/pooling_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:     TensorShape output_shape;",
          "524:     auto shape_vec = tensor_in_shape.vec<int32>();",
          "525:     for (int64_t i = 0; i < tensor_in_shape.NumElements(); ++i) {",
          "527:     }",
          "529:     Tensor* output;",
          "",
          "[Removed Lines]",
          "526:       output_shape.AddDim(shape_vec(i));",
          "",
          "[Added Lines]",
          "526:       OP_REQUIRES_OK(context, output_shape.AddDimWithStatus(shape_vec(i)));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py -> tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.eager import context",
          "20: from tensorflow.python.framework import constant_op",
          "21: from tensorflow.python.framework import errors",
          "22: from tensorflow.python.framework import errors_impl",
          "23: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import dtypes",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     # Initializes the input tensor with array containing incrementing",
          "68:     # numbers from 1.",
          "69:     x = [f * 1.0 for f in range(1, total_size + 1)]",
          "71:       t = constant_op.constant(x, shape=input_sizes)",
          "72:       window = [1] + list(window) + [1]",
          "73:       strides = [1] + list(strides) + [1]",
          "",
          "[Removed Lines]",
          "70:     with self.cached_session(use_gpu=use_gpu) as sess:",
          "",
          "[Added Lines]",
          "71:     with self.cached_session(use_gpu=use_gpu):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         padding=\"SAME\",",
          "125:         expected=expected_output)",
          "127:   def testMaxPool3dValidPadding(self):",
          "128:     expected_output = [40.0, 41.0, 42.0]",
          "129:     self._VerifyValues(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   def testMaxPool3dGrad(self):",
          "129:     with self.assertRaises(",
          "130:         (errors.ResourceExhaustedError, errors.InvalidArgumentError)):",
          "131:       with self.cached_session():",
          "132:         orig_input_shape = constant_op.constant(",
          "133:             1879048192, shape=[5], dtype=dtypes.int32)",
          "134:         grad = constant_op.constant(",
          "135:             1, shape=[1, 3, 2, 4, 2], dtype=dtypes.float32)",
          "136:         t = gen_nn_ops.AvgPool3DGrad(",
          "137:             orig_input_shape=orig_input_shape,",
          "138:             grad=grad,",
          "139:             ksize=[1, 1, 1, 1, 1],",
          "140:             strides=[1, 1, 1, 1, 1],",
          "141:             padding=\"SAME\",",
          "142:             data_format=\"NDHWC\")",
          "143:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a37416fb95a20073c43d8b8591ea161fd3745de",
      "candidate_info": {
        "commit_hash": "5a37416fb95a20073c43d8b8591ea161fd3745de",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5a37416fb95a20073c43d8b8591ea161fd3745de",
        "files": [
          "tensorflow/compiler/tf2xla/BUILD",
          "tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "tensorflow/core/kernels/pooling_ops_3d.cc",
          "tensorflow/python/kernel_tests/nn_ops/BUILD",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
        ],
        "message": "Fix security vulnerability with AvgPool3DGrad.\n\nPiperOrigin-RevId: 461244371",
        "before_after_code_files": [
          "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
            "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
          ],
          "candidate": [
            "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
            "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc": [
          "File: tensorflow/compiler/tf2xlxla_op_kernel.cc -> tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:   int64_t num_elements = 1;",
          "449:   for (auto i = dims.begin(); i != dims.end(); ++i) {",
          "450:     num_elements = MultiplyWithoutOverflow(num_elements, *i);",
          "451:     if (num_elements < 0)",
          "452:       return errors::InvalidArgument(",
          "453:           \"The total elements specified by orig_input_shape is too large.\",",
          "454:           \"Encountered overflow after multiplying\", *i,",
          "455:           \", result: \", num_elements);",
          "456:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc": [
          "File: tensorflow/core/kernels/pooling_ops_3d.cc -> tensorflow/core/kernels/pooling_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:     TensorShape output_shape;",
          "532:     auto shape_vec = tensor_in_shape.vec<int32>();",
          "533:     for (int64_t i = 0; i < tensor_in_shape.NumElements(); ++i) {",
          "535:     }",
          "537:     Tensor* output;",
          "",
          "[Removed Lines]",
          "534:       output_shape.AddDim(shape_vec(i));",
          "",
          "[Added Lines]",
          "534:       OP_REQUIRES_OK(context, output_shape.AddDimWithStatus(shape_vec(i)));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py -> tensorflow/python/kernel_tests/nn_ops/pooling_ops_3d_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.eager import context",
          "20: from tensorflow.python.framework import constant_op",
          "21: from tensorflow.python.framework import errors",
          "22: from tensorflow.python.framework import errors_impl",
          "23: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import dtypes",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     # Initializes the input tensor with array containing incrementing",
          "68:     # numbers from 1.",
          "69:     x = [f * 1.0 for f in range(1, total_size + 1)]",
          "71:       t = constant_op.constant(x, shape=input_sizes)",
          "72:       window = [1] + list(window) + [1]",
          "73:       strides = [1] + list(strides) + [1]",
          "",
          "[Removed Lines]",
          "70:     with self.cached_session(use_gpu=use_gpu) as sess:",
          "",
          "[Added Lines]",
          "71:     with self.cached_session(use_gpu=use_gpu):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         padding=\"SAME\",",
          "125:         expected=expected_output)",
          "127:   def testMaxPool3dValidPadding(self):",
          "128:     expected_output = [40.0, 41.0, 42.0]",
          "129:     self._VerifyValues(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   def testMaxPool3dGrad(self):",
          "129:     with self.assertRaises(",
          "130:         (errors.ResourceExhaustedError, errors.InvalidArgumentError)):",
          "131:       with self.cached_session():",
          "132:         orig_input_shape = constant_op.constant(",
          "133:             1879048192, shape=[5], dtype=dtypes.int32)",
          "134:         grad = constant_op.constant(",
          "135:             1, shape=[1, 3, 2, 4, 2], dtype=dtypes.float32)",
          "136:         t = gen_nn_ops.AvgPool3DGrad(",
          "137:             orig_input_shape=orig_input_shape,",
          "138:             grad=grad,",
          "139:             ksize=[1, 1, 1, 1, 1],",
          "140:             strides=[1, 1, 1, 1, 1],",
          "141:             padding=\"SAME\",",
          "142:             data_format=\"NDHWC\")",
          "143:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a456d6f22857909be78d4daf1c23ebd41d49601e",
      "candidate_info": {
        "commit_hash": "a456d6f22857909be78d4daf1c23ebd41d49601e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a456d6f22857909be78d4daf1c23ebd41d49601e",
        "files": [
          "tensorflow/compiler/tf2xla/BUILD",
          "tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "tensorflow/core/kernels/pooling_ops_3d.cc",
          "tensorflow/python/kernel_tests/nn_ops/BUILD",
          "tensorflow/python/kernel_tests/pooling_ops_3d_test.py"
        ],
        "message": "Fix security vulnerability with AvgPool3DGrad.\n\nPiperOrigin-RevId: 461244371",
        "before_after_code_files": [
          "tensorflow/compiler/tf2xla/xla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc",
          "tensorflow/python/kernel_tests/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/pooling_ops_3d_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/compiler/tf2xlxla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
            "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc"
          ],
          "candidate": [
            "tensorflow/compiler/tf2xla/xla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc",
            "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/compiler/tf2xla/xla_op_kernel.cc||tensorflow/compiler/tf2xla/xla_op_kernel.cc": [
          "File: tensorflow/compiler/tf2xla/xla_op_kernel.cc -> tensorflow/compiler/tf2xla/xla_op_kernel.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"tensorflow/compiler/xla/status_macros.h\"",
          "30: #include \"tensorflow/core/common_runtime/dma_helper.h\"",
          "31: #include \"tensorflow/core/platform/errors.h\"",
          "33: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:   TF_RETURN_IF_ERROR(ConstantInput(index, &literal, mode));",
          "467:   std::vector<int64_t> dims;",
          "468:   TF_RETURN_IF_ERROR(LiteralToInt64Vector(literal, &dims));",
          "470:   return Status::OK();",
          "471: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:   int64_t num_elements = 1;",
          "472:   for (auto i = dims.begin(); i != dims.end(); ++i) {",
          "473:     num_elements = MultiplyWithoutOverflow(num_elements, *i);",
          "474:     if (num_elements < 0)",
          "475:       return errors::InvalidArgument(",
          "476:           \"The total elements specified by orig_input_shape is too large.\",",
          "477:           \"Encountered overflow after multiplying\", *i,",
          "478:           \", result: \", num_elements);",
          "479:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/pooling_ops_3d.cc||tensorflow/core/kernels/pooling_ops_3d.cc": [
          "File: tensorflow/core/kernels/pooling_ops_3d.cc -> tensorflow/core/kernels/pooling_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:     TensorShape output_shape;",
          "527:     auto shape_vec = tensor_in_shape.vec<int32>();",
          "528:     for (int64_t i = 0; i < tensor_in_shape.NumElements(); ++i) {",
          "530:     }",
          "532:     Tensor* output;",
          "",
          "[Removed Lines]",
          "529:       output_shape.AddDim(shape_vec(i));",
          "",
          "[Added Lines]",
          "529:       OP_REQUIRES_OK(context, output_shape.AddDimWithStatus(shape_vec(i)));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/pooling_ops_3d_test.py||tensorflow/python/kernel_tests/pooling_ops_3d_test.py": [
          "File: tensorflow/python/kernel_tests/pooling_ops_3d_test.py -> tensorflow/python/kernel_tests/pooling_ops_3d_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from tensorflow.python.eager import context",
          "24: from tensorflow.python.framework import constant_op",
          "25: from tensorflow.python.framework import errors",
          "26: from tensorflow.python.framework import errors_impl",
          "27: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from tensorflow.python.framework import dtypes",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     # Initializes the input tensor with array containing incrementing",
          "71:     # numbers from 1.",
          "72:     x = [f * 1.0 for f in range(1, total_size + 1)]",
          "74:       t = constant_op.constant(x, shape=input_sizes)",
          "75:       window = [1] + list(window) + [1]",
          "76:       strides = [1] + list(strides) + [1]",
          "",
          "[Removed Lines]",
          "73:     with self.cached_session(use_gpu=use_gpu) as sess:",
          "",
          "[Added Lines]",
          "74:     with self.cached_session(use_gpu=use_gpu):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:         padding=\"SAME\",",
          "128:         expected=expected_output)",
          "130:   def testMaxPool3dValidPadding(self):",
          "131:     expected_output = [40.0, 41.0, 42.0]",
          "132:     self._VerifyValues(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   def testMaxPool3dGrad(self):",
          "132:     with self.assertRaises(",
          "133:         (errors.ResourceExhaustedError, errors.InvalidArgumentError)):",
          "134:       with self.cached_session():",
          "135:         orig_input_shape = constant_op.constant(",
          "136:             1879048192, shape=[5], dtype=dtypes.int32)",
          "137:         grad = constant_op.constant(",
          "138:             1, shape=[1, 3, 2, 4, 2], dtype=dtypes.float32)",
          "139:         t = gen_nn_ops.AvgPool3DGrad(",
          "140:             orig_input_shape=orig_input_shape,",
          "141:             grad=grad,",
          "142:             ksize=[1, 1, 1, 1, 1],",
          "143:             strides=[1, 1, 1, 1, 1],",
          "144:             padding=\"SAME\",",
          "145:             data_format=\"NDHWC\")",
          "146:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    }
  ]
}