{
  "cve_id": "CVE-2022-1289",
  "cve_desc": "A denial of service vulnerability was found in tildearrow Furnace. It has been classified as problematic. This is due to an incomplete fix of CVE-2022-1211. It is possible to initiate the attack remotely but it requires user interaction. The issue got fixed with the patch 0eb02422d5161767e9983bdaa5c429762d3477ce.",
  "repo": "tildearrow/furnace",
  "patch_hash": "0eb02422d5161767e9983bdaa5c429762d3477ce",
  "patch_info": {
    "commit_hash": "0eb02422d5161767e9983bdaa5c429762d3477ce",
    "repo": "tildearrow/furnace",
    "commit_url": "https://github.com/tildearrow/furnace/commit/0eb02422d5161767e9983bdaa5c429762d3477ce",
    "files": [
      "src/gui/pattern.cpp"
    ],
    "message": "fix possible pattern crash\n\nissue #325",
    "before_after_code_files": [
      "src/gui/pattern.cpp||src/gui/pattern.cpp"
    ]
  },
  "patch_diff": {
    "src/gui/pattern.cpp||src/gui/pattern.cpp": [
      "File: src/gui/pattern.cpp -> src/gui/pattern.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "282:           sprintf(id,\"..##PE%d_%d_%d\",k,i,j);",
      "283:           ImGui::PushStyleColor(ImGuiCol_Text,inactiveColor);",
      "284:         } else {",
      "303:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "304:           } else {",
      "306:           }",
      "307:         }",
      "308:         ImGui::SameLine(0.0f,0.0f);",
      "",
      "[Removed Lines]",
      "285:           sprintf(id,\"%.2X##PE%d_%d_%d\",pat->data[i][index],k,i,j);",
      "286:           if (pat->data[i][index]<0x10) {",
      "287:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[pat->data[i][index]]]);",
      "288:           } else if (pat->data[i][index]<0x20) {",
      "289:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
      "290:           } else if (pat->data[i][index]<0x30) {",
      "291:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
      "292:           } else if (pat->data[i][index]<0x48) {",
      "293:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
      "294:           } else if (pat->data[i][index]<0x90) {",
      "295:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "296:           } else if (pat->data[i][index]<0xa0) {",
      "297:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_MISC]);",
      "298:           } else if (pat->data[i][index]<0xc0) {",
      "299:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "300:           } else if (pat->data[i][index]<0xd0) {",
      "301:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
      "302:           } else if (pat->data[i][index]<0xe0) {",
      "305:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[pat->data[i][index]-0xe0]]);",
      "",
      "[Added Lines]",
      "285:           if (pat->data[i][index]>0xff) {",
      "286:             sprintf(id,\"??##PE%d_%d_%d\",k,i,j);",
      "289:             const unsigned char data=pat->data[i][index];",
      "290:             sprintf(id,\"%.2X##PE%d_%d_%d\",data,k,i,j);",
      "291:             if (data<0x10) {",
      "292:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[fxColors[data]]);",
      "293:             } else if (data<0x20) {",
      "294:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
      "295:             } else if (data<0x30) {",
      "296:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
      "297:             } else if (data<0x48) {",
      "298:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
      "299:             } else if (data<0x90) {",
      "300:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "301:             } else if (data<0xa0) {",
      "302:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_MISC]);",
      "303:             } else if (data<0xc0) {",
      "304:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "305:             } else if (data<0xd0) {",
      "306:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
      "307:             } else if (data<0xe0) {",
      "308:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
      "309:             } else {",
      "310:               ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[data-0xe0]]);",
      "311:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "87f225074c13c40eb565764ad059f4791f4761a1",
      "candidate_info": {
        "commit_hash": "87f225074c13c40eb565764ad059f4791f4761a1",
        "repo": "tildearrow/furnace",
        "commit_url": "https://github.com/tildearrow/furnace/commit/87f225074c13c40eb565764ad059f4791f4761a1",
        "files": [
          "src/engine/dispatch.h",
          "src/engine/engine.cpp",
          "src/engine/engine.h",
          "src/engine/fileOps.cpp",
          "src/engine/platform/amiga.cpp",
          "src/engine/platform/amiga.h",
          "src/engine/playback.cpp",
          "src/engine/safeReader.cpp",
          "src/gui/gui.cpp",
          "src/gui/pattern.cpp"
        ],
        "message": ".mod import",
        "before_after_code_files": [
          "src/engine/dispatch.h||src/engine/dispatch.h",
          "src/engine/engine.cpp||src/engine/engine.cpp",
          "src/engine/engine.h||src/engine/engine.h",
          "src/engine/fileOps.cpp||src/engine/fileOps.cpp",
          "src/engine/platform/amiga.cpp||src/engine/platform/amiga.cpp",
          "src/engine/platform/amiga.h||src/engine/platform/amiga.h",
          "src/engine/playback.cpp||src/engine/playback.cpp",
          "src/engine/safeReader.cpp||src/engine/safeReader.cpp",
          "src/gui/gui.cpp||src/gui/gui.cpp",
          "src/gui/pattern.cpp||src/gui/pattern.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gui/pattern.cpp||src/gui/pattern.cpp"
          ],
          "candidate": [
            "src/gui/pattern.cpp||src/gui/pattern.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/engine/dispatch.h||src/engine/dispatch.h": [
          "File: src/engine/dispatch.h -> src/engine/dispatch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   DIV_CMD_SAMPLE_MODE,",
          "55:   DIV_CMD_SAMPLE_FREQ,",
          "56:   DIV_CMD_SAMPLE_BANK,",
          "58:   DIV_CMD_FM_LFO,",
          "59:   DIV_CMD_FM_LFO_WAVE,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   DIV_CMD_SAMPLE_POS,",
          "",
          "---------------"
        ],
        "src/engine/engine.cpp||src/engine/engine.cpp": [
          "File: src/engine/engine.cpp -> src/engine/engine.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:       return \"03xx: Portamento\";",
          "57:     case 0x04:",
          "58:       return \"04xy: Vibrato (x: speed; y: depth)\";",
          "59:     case 0x08:",
          "60:       return \"08xy: Set panning (x: left; y: right)\";",
          "61:     case 0x09:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     case 0x07:",
          "60:       return \"07xy: Tremolo (x: speed; y: depth)\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:       return \"EExx: Send external command\";",
          "97:     case 0xef:",
          "98:       return \"EFxx: Set global tuning (quirky!)\";",
          "99:     case 0xff:",
          "100:       return \"FFxx: Stop song\";",
          "101:     default:",
          "103:         const char* ret=disCont[dispatchOfChan[chan]].dispatch->getEffectName(effect);",
          "104:         if (ret!=NULL) return ret;",
          "105:       }",
          "",
          "[Removed Lines]",
          "102:       if (chan>=0 && chan<chans) {",
          "",
          "[Added Lines]",
          "101:     case 0xf1:",
          "102:       return \"F1xx: Single note slide up\";",
          "103:     case 0xf2:",
          "104:       return \"F2xx: Single note slide down\";",
          "105:     case 0xf8:",
          "106:       return \"F8xx: Single volume slide up\";",
          "107:     case 0xf9:",
          "108:       return \"F9xx: Single volume slide down\";",
          "109:     case 0xfa:",
          "110:       return \"FAxx: Fast volume slide (0y: down; x0: up)\";",
          "114:       if ((effect&0xf0)==0x90) {",
          "115:         return \"9xxx: Set sample offset*256\";",
          "116:       }",
          "117:       else if (chan>=0 && chan<chans) {",
          "",
          "---------------"
        ],
        "src/engine/engine.h||src/engine/engine.h": [
          "File: src/engine/engine.h -> src/engine/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:   bool loadDMF(unsigned char* file, size_t len);",
          "243:   bool loadFur(unsigned char* file, size_t len);",
          "245:   bool initAudioBackend();",
          "246:   bool deinitAudioBackend();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:   bool loadMod(unsigned char* file, size_t len);",
          "",
          "---------------"
        ],
        "src/engine/fileOps.cpp||src/engine/fileOps.cpp": [
          "File: src/engine/fileOps.cpp -> src/engine/fileOps.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1196:   return true;",
          "1197: }",
          "1199: bool DivEngine::load(unsigned char* f, size_t slen) {",
          "1200:   unsigned char* file;",
          "1201:   size_t len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1199: bool DivEngine::loadMod(unsigned char* file, size_t len) {",
          "1200:   bool success=false;",
          "1201:   int chCount;",
          "1202:   int ordCount;",
          "1203:   std::vector<int> patPtr;",
          "1204:   char magic[4]={0,0,0,0};",
          "1205:   short defaultVols[31];",
          "1206:   int sampLens[31];",
          "1208:   bool fxUsage[DIV_MAX_CHANS][5];",
          "1209:   SafeReader reader=SafeReader(file,len);",
          "1210:   warnings=\"\";",
          "1211:   try {",
          "1212:     DivSong ds;",
          "1215:     if (!reader.seek(1080,SEEK_SET)) {",
          "1216:       throw EndOfFileException(&reader,reader.tell());",
          "1217:     }",
          "1218:     reader.read(magic,4);",
          "1219:     if (memcmp(magic,\"M.K.\",4)==0 || memcmp(magic,\"M!K!\",4)==0) {",
          "1220:       chCount=4;",
          "1221:     } else if(memcmp(magic+1,\"CHN\",3)==0 && magic[0]>='1' && magic[0]<='9') {",
          "1222:       chCount=magic[0]-'0';",
          "1223:     } else if((memcmp(magic+2,\"CH\",2)==0 || memcmp(magic+2,\"CN\",2)==0)",
          "1224:         &&(magic[0]>='1' && magic[0]<='9' && magic[1]>='0' && magic[1]<='9')) {",
          "1225:       chCount=((magic[0]-'0')*10)+(magic[1]-'0');",
          "1226:     } else {",
          "1227:       throw std::exception(\"invalid info header!\");",
          "1228:     }",
          "1230:     reader.seek(0,SEEK_SET);",
          "1231:     ds.name=reader.readString(20);",
          "1233:     ds.sampleLen=31;",
          "1234:     for (int i=0;i<31;i++) {",
          "1235:       DivSample* sample=new DivSample;",
          "1236:       sample->depth=8;",
          "1237:       sample->name=reader.readString(22);",
          "1238:       int slen=reader.readS_BE()*2;",
          "1239:       sampLens[i]=slen;",
          "1240:       if (slen==2) slen=0;",
          "1241:       signed char fineTune=reader.readC()&0x0f;",
          "1242:       if (fineTune>=8) fineTune-=16;",
          "1243:       sample->rate=(int)(pow(2,fineTune/96.0)*COLOR_PAL/535);",
          "1244:       sample->centerRate=sample->rate;",
          "1245:       defaultVols[i]=reader.readC();",
          "1246:       int loopStart=reader.readS_BE()*2;",
          "1247:       int loopLen=reader.readS_BE()*2;",
          "1248:       int loopEnd=loopStart+loopLen;",
          "1250:       if (loopStart>loopEnd || loopEnd<4 || loopLen<4) {",
          "1251:         loopStart=0;",
          "1252:         loopLen=0;",
          "1253:       }",
          "1254:       if(loopLen>=2) {",
          "1255:         if(loopEnd<slen) slen=loopEnd;",
          "1256:         sample->loopStart=loopStart;",
          "1257:       }",
          "1258:       sample->samples=slen;",
          "1259:       sample->data8=new signed char[slen];",
          "1260:       ds.sample.push_back(sample);",
          "1261:     }",
          "1263:     ds.ordersLen=ordCount=reader.readC();",
          "1264:     int restartPos=reader.readC();",
          "1265:     int patMax=0;",
          "1266:     for (int i=0;i<128;i++) {",
          "1267:       unsigned char pat=reader.readC();",
          "1268:       if (pat>patMax) patMax=pat;",
          "1269:       for (int j=0;j<chCount;j++) {",
          "1270:         ds.orders.ord[j][i]=pat;",
          "1271:       }",
          "1272:     }",
          "1273:     reader.seek(1084,SEEK_SET);",
          "1275:     ds.patLen=64;",
          "1276:     for (int ch=0;ch<chCount;ch++) {",
          "1277:       for (int i=0;i<5;i++) {",
          "1278:         fxUsage[ch][i]=false;",
          "1279:       }",
          "1280:     }",
          "1281:     for (int pat=0;pat<=patMax;pat++) {",
          "1282:       DivPattern* chpats[DIV_MAX_CHANS];",
          "1283:       for (int ch=0;ch<chCount;ch++) {",
          "1284:         chpats[ch]=ds.pat[ch].getPattern(pat,true);",
          "1285:       }",
          "1286:       for (int row=0;row<64;row++) {",
          "1287:         for (int ch=0;ch<chCount;ch++) {",
          "1288:           auto* dstrow=chpats[ch]->data[row];",
          "1289:           unsigned char data[4];",
          "1290:           reader.read(&data,4);",
          "1292:           short ins=(data[0]&0xf0)|(data[2]>>4);",
          "1293:           if (ins>0) {",
          "1294:             dstrow[2]=ins-1;",
          "1295:             dstrow[3]=defaultVols[ins-1];",
          "1296:           }",
          "1298:           int period=data[1]+((data[0]&0x0f)*256);",
          "1299:           if (period>0 && period<0x0fff) {",
          "1300:             short note=(short)round(log2(3424.0/period)*12);",
          "1301:             dstrow[0]=((note-1)%12)+1;",
          "1302:             dstrow[1]=(note-1)/12+1;",
          "1303:           }",
          "1305:           short fxtyp=data[2]&0x0f;",
          "1306:           short fxval=data[3];",
          "1307:           dstrow[4]=fxtyp;",
          "1308:           dstrow[5]=fxval;",
          "1309:           switch(fxtyp) {",
          "1310:             case 0:",
          "1311:               if(fxval!=0) fxUsage[ch][0]=true;",
          "1312:               break;",
          "1313:             case 1: case 2: case 3:",
          "1314:               fxUsage[ch][1]=true;",
          "1315:               break;",
          "1316:             case 4:",
          "1317:               fxUsage[ch][2]=true;",
          "1318:               break;",
          "1319:             case 5:",
          "1320:               fxUsage[ch][1]=true;",
          "1321:               fxUsage[ch][4]=true;",
          "1322:               break;",
          "1323:             case 6:",
          "1324:               fxUsage[ch][2]=true;",
          "1325:               fxUsage[ch][4]=true;",
          "1326:               break;",
          "1327:             case 7:",
          "1328:               fxUsage[ch][3]=true;",
          "1329:               break;",
          "1330:             case 10:",
          "1331:               if(fxval!=0) fxUsage[ch][4]=true;",
          "1332:               break;",
          "1333:           }",
          "1334:         }",
          "1335:       }",
          "1336:     }",
          "1338:     size_t pos=reader.tell();",
          "1339:     for (int i=0;i<31;i++) {",
          "1340:       reader.seek(pos,SEEK_SET);",
          "1341:       reader.read(ds.sample[i]->data8,ds.sample[i]->samples);",
          "1342:       pos+=sampLens[i];",
          "1343:     }",
          "1346:     for (int ch=0;ch<=chCount;ch++) {",
          "1347:       unsigned char fxCols=1;",
          "1348:       for (int pat=0;pat<=patMax;pat++) {",
          "1349:         auto* data=ds.pat[ch].getPattern(pat,false)->data;",
          "1350:         short lastPitchEffect=-1;",
          "1351:         short lastEffectState[5]={-1,-1,-1,-1,-1};",
          "1352:         short setEffectState[5]={-1,-1,-1,-1,-1};",
          "1353:         for (int row=0;row<64;row++) {",
          "1354:           const short fxUsageTyp[5]={0x00,0x01,0x04,0x07,0xFA};",
          "1355:           short effectState[5]={0,0,0,0,0};",
          "1356:           unsigned char curFxCol=0;",
          "1357:           short fxTyp=data[row][4];",
          "1358:           short fxVal=data[row][5];",
          "1359:           auto writeFxCol=[data,row,&curFxCol](short typ, short val) {",
          "1360:             data[row][4+curFxCol*2]=typ;",
          "1361:             data[row][5+curFxCol*2]=val;",
          "1362:             curFxCol++;",
          "1363:           };",
          "1364:           writeFxCol(-1,-1);",
          "1365:           curFxCol=0;",
          "1366:           switch (fxTyp) {",
          "1367:             case 0: // arp",
          "1368:               effectState[0]=fxVal;",
          "1369:               break;",
          "1370:             case 5: // vol slide + porta",
          "1371:               effectState[4]=fxVal;",
          "1372:               fxTyp=3;",
          "1373:               fxVal=0;",
          "1375:             case 1: // note slide up",
          "1376:             case 2: // note slide down",
          "1377:             case 3: // porta",
          "1378:               if ((fxTyp==3)&&(fxVal==0)) {",
          "1379:                 if (setEffectState[1]<0) break;",
          "1380:                 fxVal=setEffectState[1];",
          "1381:               }",
          "1382:               setEffectState[1]=fxVal;",
          "1383:               effectState[1]=fxVal;",
          "1384:               if((effectState[1]!=lastEffectState[1])||",
          "1385:                  (fxTyp!=lastPitchEffect)||",
          "1386:                  (effectState[1]!=0&&data[row][0]>0)) {",
          "1387:                 writeFxCol(fxTyp,fxVal);",
          "1388:               }",
          "1389:               lastPitchEffect=fxTyp;",
          "1390:               lastEffectState[1]=fxVal;",
          "1391:               break;",
          "1392:             case 6: // vol slide + vibrato",
          "1393:               effectState[4]=fxVal;",
          "1394:               fxTyp=4;",
          "1395:               fxVal=0;",
          "1397:             case 4: // vibrato",
          "1398:               if (fxVal==0) {",
          "1399:                 if (setEffectState[2]<0) break;",
          "1400:                 fxVal=setEffectState[2];",
          "1401:               }",
          "1402:               effectState[2]=fxVal;",
          "1403:               setEffectState[2]=fxVal;",
          "1404:               break;",
          "1405:             case 7: // tremolo",
          "1406:               if (fxVal==0) {",
          "1407:                 if (setEffectState[3]<0) break;",
          "1408:                 fxVal=setEffectState[3];",
          "1409:               }",
          "1410:               effectState[3]=fxVal;",
          "1411:               setEffectState[3]=fxVal;",
          "1412:               break;",
          "1413:             case 9: // set offset",
          "1414:               writeFxCol(0x90,fxVal);",
          "1415:               break;",
          "1416:             case 10: // vol slide",
          "1417:               effectState[4]=fxVal;",
          "1418:               break;",
          "1419:             case 11: // jump to pos",
          "1420:             case 13: // break to row",
          "1421:               writeFxCol(fxTyp,fxVal);",
          "1422:               break;",
          "1423:             case 12: // set vol",
          "1424:               data[row][3]=fxVal;",
          "1425:               break;",
          "1426:             case 15: // set speed",
          "1428:               if (fxVal>=0x20) {",
          "1429:                 writeFxCol(0xc0,(fxVal*2+2)/5);",
          "1430:               } else {",
          "1431:                 writeFxCol(0x09,fxVal);",
          "1432:                 writeFxCol(0x0f,fxVal);",
          "1433:               }",
          "1434:               break;",
          "1435:             case 14: // extended",
          "1436:               fxTyp=fxVal>>4;",
          "1437:               fxVal&=0x0f;",
          "1438:               switch (fxTyp) {",
          "1439:                 case 1: // single note slide up",
          "1440:                 case 2: // single note slide down",
          "1441:                   writeFxCol(fxTyp-1+0xf1,fxVal);",
          "1442:                   break;",
          "1443:                 case 9: // retrigger",
          "1444:                   writeFxCol(0x0c,fxVal);",
          "1445:                   break;",
          "1446:                 case 10: // single vol slide up",
          "1447:                 case 11: // single vol slide down",
          "1448:                   writeFxCol(fxTyp-10+0xf8,fxVal);",
          "1449:                   break;",
          "1450:                 case 12: // note cut",
          "1451:                 case 13: // note delay",
          "1452:                   writeFxCol(fxTyp-12+0xec,fxVal);",
          "1453:                   break;",
          "1454:               }",
          "1455:               break;",
          "1456:           }",
          "1457:           for (int i=0;i<5;i++) {",
          "1460:             if (fxUsage[ch][i]&&((effectState[i]!=lastEffectState[i])||(effectState[i]!=0&&i==4&&data[row][3]>=0))) {",
          "1461:               writeFxCol(fxUsageTyp[i],effectState[i]);",
          "1462:             }",
          "1463:           }",
          "1464:           memcpy(lastEffectState,effectState,sizeof(effectState));",
          "1465:           if (curFxCol>fxCols) {",
          "1466:             fxCols=curFxCol;",
          "1467:           }",
          "1468:         }",
          "1469:       }",
          "1470:       ds.pat[ch].effectRows=fxCols;",
          "1471:     }",
          "1473:     ds.pal=false;",
          "1474:     ds.hz=50;",
          "1475:     ds.customTempo=false;",
          "1476:     ds.systemLen=(chCount+3)/4;",
          "1477:     for(int i=0;i<ds.systemLen;i++) {",
          "1478:       ds.system[i]=DIV_SYSTEM_AMIGA;",
          "1479:       ds.systemFlags[i]=1; // PAL",
          "1480:     }",
          "1481:     for(int i=0;i<chCount;i++) {",
          "1482:       ds.chanShow[i]=true;",
          "1483:     }",
          "1484:     for(int i=chCount;i<ds.systemLen*4;i++) {",
          "1485:       ds.pat[i].effectRows=1;",
          "1486:       ds.chanShow[i]=false;",
          "1487:     }",
          "1489:     ds.insLen=31;",
          "1490:     for(int i=0;i<31;i++) {",
          "1491:       DivInstrument* ins=new DivInstrument;",
          "1492:       ins->type=DIV_INS_AMIGA;",
          "1493:       ins->amiga.initSample=i;",
          "1494:       ins->name=ds.sample[i]->name;",
          "1495:       ds.ins.push_back(ins);",
          "1496:     }",
          "1498:     if (active) quitDispatch();",
          "1499:     isBusy.lock();",
          "1500:     song.unload();",
          "1501:     song=ds;",
          "1502:     recalcChans();",
          "1503:     renderSamples();",
          "1504:     isBusy.unlock();",
          "1505:     if (active) {",
          "1506:       initDispatch();",
          "1507:       syncReset();",
          "1508:     }",
          "1509:     success=true;",
          "1510:   } catch (EndOfFileException e) {",
          "1511:     logE(\"premature end of file!\\n\");",
          "1512:     lastError=\"incomplete file\";",
          "1513:   } catch (std::exception e) {",
          "1514:     logE(\"%s\\n\",e.what());",
          "1515:     lastError=e.what();",
          "1516:   }",
          "1517:   return success;",
          "1518: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1206:     return false;",
          "1207:   }",
          "1208:   if (memcmp(f,DIV_DMF_MAGIC,16)!=0 && memcmp(f,DIV_FUR_MAGIC,16)!=0) {",
          "1209:     logD(\"loading as zlib...\\n\");",
          "1211:     z_stream zl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1531:     logD(\"loading as .mod...\\n\");",
          "1532:     if (loadMod(f,slen)) {",
          "1533:       delete[] f;",
          "1534:       return true;",
          "1535:     }",
          "1537:     lastError=\"not a .mod song\";",
          "",
          "---------------"
        ],
        "src/engine/platform/amiga.cpp||src/engine/platform/amiga.cpp": [
          "File: src/engine/platform/amiga.cpp -> src/engine/platform/amiga.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:       if (chan[c.chan].sample<0 || chan[c.chan].sample>=parent->song.sampleLen) {",
          "185:         chan[c.chan].sample=-1;",
          "186:       }",
          "188:       chan[c.chan].audSub=0;",
          "189:       if (c.value!=DIV_NOTE_NULL) {",
          "190:         chan[c.chan].freqChanged=true;",
          "",
          "[Removed Lines]",
          "187:       chan[c.chan].audPos=0;",
          "",
          "[Added Lines]",
          "187:       if (chan[c.chan].setPos) {",
          "188:         chan[c.chan].setPos=false;",
          "189:       } else {",
          "190:         chan[c.chan].audPos=0;",
          "191:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:       }",
          "277:       chan[c.chan].inPorta=c.value;",
          "278:       break;",
          "279:     case DIV_CMD_GET_VOLMAX:",
          "280:       return 64;",
          "281:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     case DIV_CMD_SAMPLE_POS:",
          "284:       chan[c.chan].audPos=c.value;",
          "285:       chan[c.chan].setPos=true;",
          "286:       break;",
          "",
          "---------------"
        ],
        "src/engine/platform/amiga.h||src/engine/platform/amiga.h": [
          "File: src/engine/platform/amiga.h -> src/engine/platform/amiga.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     unsigned char ins;",
          "37:     int busClock;",
          "38:     int note;",
          "40:     signed char vol, outVol;",
          "41:     DivMacroInt std;",
          "42:     Channel():",
          "",
          "[Removed Lines]",
          "39:     bool active, insChanged, freqChanged, keyOn, keyOff, inPorta, useWave;",
          "",
          "[Added Lines]",
          "39:     bool active, insChanged, freqChanged, keyOn, keyOff, inPorta, useWave, setPos;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:       keyOff(false),",
          "61:       inPorta(false),",
          "62:       useWave(false),",
          "63:       vol(64),",
          "64:       outVol(64) {}",
          "65:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       setPos(false),",
          "",
          "---------------"
        ],
        "src/engine/playback.cpp||src/engine/playback.cpp": [
          "File: src/engine/playback.cpp -> src/engine/playback.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "761:         chan[i].vibratoRate=effectVal>>4;",
          "762:         dispatchCmd(DivCommand(DIV_CMD_PITCH,i,chan[i].pitch+(((chan[i].vibratoDepth*vibTable[chan[i].vibratoPos]*chan[i].vibratoFine)>>4)/15)));",
          "763:         break;",
          "764:       case 0x0a: // volume ramp",
          "765:         if (effectVal!=0) {",
          "766:           if ((effectVal&15)!=0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:       case 0x07: // tremolo",
          "766:         break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:           chan[i].retrigTick=0;",
          "782:         }",
          "783:         break;",
          "784:       case 0xc0: case 0xc1: case 0xc2: case 0xc3: // set Hz",
          "785:         divider=((effect&0x3)<<8)|effectVal;",
          "786:         if (divider<10) divider=10;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787:       case 0x90: case 0x91: case 0x92: case 0x93:",
          "788:       case 0x94: case 0x95: case 0x96: case 0x97:",
          "789:       case 0x98: case 0x99: case 0x9a: case 0x9b:",
          "790:       case 0x9c: case 0x9d: case 0x9e: case 0x9f: // set samp. pos",
          "791:         dispatchCmd(DivCommand(DIV_CMD_SAMPLE_POS,i,(((effect&0x0f)<<8)|effectVal)*256));",
          "792:         break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "862:       case 0xef: // global pitch",
          "863:         globalPitch+=(signed char)(effectVal-0x80);",
          "864:         break;",
          "865:       case 0xff: // stop song",
          "866:         freelance=false;",
          "867:         playing=false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874:       case 0xf1: // single pitch ramp up",
          "875:       case 0xf2: // single pitch ramp down",
          "876:         if (effect==0xf1) {",
          "877:           chan[i].portaNote=song.limitSlides?0x60:255;",
          "878:         } else {",
          "879:           chan[i].portaNote=song.limitSlides?disCont[dispatchOfChan[i]].dispatch->getPortaFloor(dispatchChanOfChan[i]):-60;",
          "880:         }",
          "881:         chan[i].portaSpeed=effectVal;",
          "882:         chan[i].portaStop=true;",
          "883:         chan[i].nowYouCanStop=false;",
          "884:         chan[i].stopOnOff=false;",
          "885:         chan[i].scheduledSlideReset=false;",
          "886:         chan[i].inPorta=false;",
          "887:         if (!song.arpNonPorta) dispatchCmd(DivCommand(DIV_CMD_PRE_PORTA,i,true,0));",
          "888:         dispatchCmd(DivCommand(DIV_CMD_NOTE_PORTA,i,chan[i].portaSpeed,chan[i].portaNote));",
          "889:         chan[i].portaNote=-1;",
          "890:         chan[i].portaSpeed=-1;",
          "891:         chan[i].inPorta=false;",
          "892:         if (!song.arpNonPorta) dispatchCmd(DivCommand(DIV_CMD_PRE_PORTA,i,false,0));",
          "893:         break;",
          "894:       case 0xf8: // single volume ramp up",
          "895:         chan[i].volume=MIN(chan[i].volume+effectVal*256,chan[i].volMax);",
          "896:         dispatchCmd(DivCommand(DIV_CMD_VOLUME,i,chan[i].volume>>8));",
          "897:         break;",
          "898:       case 0xf9: // single volume ramp down",
          "899:         chan[i].volume=MAX(chan[i].volume-effectVal*256,0);",
          "900:         dispatchCmd(DivCommand(DIV_CMD_VOLUME,i,chan[i].volume>>8));",
          "901:         break;",
          "902:       case 0xfa: // fast volume ramp",
          "903:         if (effectVal!=0) {",
          "904:           if ((effectVal&15)!=0) {",
          "905:             chan[i].volSpeed=-(effectVal&15)*256;",
          "906:           } else {",
          "907:             chan[i].volSpeed=(effectVal>>4)*256;",
          "908:           }",
          "909:         } else {",
          "910:           chan[i].volSpeed=0;",
          "911:         }",
          "912:         break;",
          "",
          "---------------"
        ],
        "src/engine/safeReader.cpp||src/engine/safeReader.cpp": [
          "File: src/engine/safeReader.cpp -> src/engine/safeReader.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: }",
          "93: short SafeReader::readS_BE() {",
          "95:   short ret=*(short*)(&buf[curSeek]);",
          "96:   curSeek+=2;",
          "98: }",
          "100: int SafeReader::readI() {",
          "",
          "[Removed Lines]",
          "94:   if (curSeek+1>len) throw EndOfFileException(this,len);",
          "97:   return (ret>>8)|((ret&0xff)<<8);",
          "",
          "[Added Lines]",
          "94:   if (curSeek+2>len) throw EndOfFileException(this,len);",
          "97:   return ((ret>>8)&0xff)|(ret<<8);",
          "",
          "---------------"
        ],
        "src/gui/gui.cpp||src/gui/gui.cpp": [
          "File: src/gui/gui.cpp -> src/gui/gui.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4045:   switch (type) {",
          "4046:     case GUI_FILE_OPEN:",
          "4047:       if (!dirExists(workingDirSong)) workingDirSong=getHomeDir();",
          "4049:       break;",
          "4050:     case GUI_FILE_SAVE:",
          "4051:       if (!dirExists(workingDirSong)) workingDirSong=getHomeDir();",
          "",
          "[Removed Lines]",
          "4048:       ImGuiFileDialog::Instance()->OpenModal(\"FileDialog\",\"Open File\",\"compatible files{.fur,.dmf},.*\",workingDirSong);",
          "",
          "[Added Lines]",
          "4048:       ImGuiFileDialog::Instance()->OpenModal(\"FileDialog\",\"Open File\",\"compatible files{.fur,.dmf,.mod},.*\",workingDirSong);",
          "",
          "---------------"
        ],
        "src/gui/pattern.cpp||src/gui/pattern.cpp": [
          "File: src/gui/pattern.cpp -> src/gui/pattern.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   GUI_COLOR_PATTERN_EFFECT_SPEED, // 0F",
          "46: };",
          "49:   GUI_COLOR_PATTERN_EFFECT_MISC, // E0",
          "50:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E1",
          "51:   GUI_COLOR_PATTERN_EFFECT_PITCH, // E2",
          "",
          "[Removed Lines]",
          "48: const FurnaceGUIColors extFxColors[16]={",
          "",
          "[Added Lines]",
          "48: const FurnaceGUIColors extFxColors[32]={",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   GUI_COLOR_PATTERN_EFFECT_TIME, // ED",
          "63:   GUI_COLOR_PATTERN_EFFECT_SONG, // EE",
          "64:   GUI_COLOR_PATTERN_EFFECT_SONG, // EF",
          "65: };",
          "67: inline float randRange(float min, float max) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:   GUI_COLOR_PATTERN_EFFECT_INVALID, // F0",
          "66:   GUI_COLOR_PATTERN_EFFECT_PITCH, // F1",
          "67:   GUI_COLOR_PATTERN_EFFECT_PITCH, // F2",
          "68:   GUI_COLOR_PATTERN_EFFECT_INVALID, // F3",
          "69:   GUI_COLOR_PATTERN_EFFECT_INVALID, // F4",
          "70:   GUI_COLOR_PATTERN_EFFECT_INVALID, // F5",
          "71:   GUI_COLOR_PATTERN_EFFECT_INVALID, // F6",
          "72:   GUI_COLOR_PATTERN_EFFECT_INVALID, // F7",
          "73:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // F8",
          "74:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // F9",
          "75:   GUI_COLOR_PATTERN_EFFECT_VOLUME, // FA",
          "76:   GUI_COLOR_PATTERN_EFFECT_INVALID, // FB",
          "77:   GUI_COLOR_PATTERN_EFFECT_INVALID, // FC",
          "78:   GUI_COLOR_PATTERN_EFFECT_INVALID, // FD",
          "79:   GUI_COLOR_PATTERN_EFFECT_INVALID, // FE",
          "80:   GUI_COLOR_PATTERN_EFFECT_SONG, // FF",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_SECONDARY]);",
          "257:           } else if (pat->data[i][index]<0x48) {",
          "258:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SYS_PRIMARY]);",
          "259:           } else if (pat->data[i][index]<0xc0) {",
          "260:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "261:           } else if (pat->data[i][index]<0xd0) {",
          "262:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_SPEED]);",
          "263:           } else if (pat->data[i][index]<0xe0) {",
          "264:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "267:           } else {",
          "269:           }",
          "270:         }",
          "271:         ImGui::SameLine(0.0f,0.0f);",
          "",
          "[Removed Lines]",
          "265:           } else if (pat->data[i][index]<0xf0) {",
          "266:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[pat->data[i][index]-0xe0]]);",
          "268:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "",
          "[Added Lines]",
          "275:           } else if (pat->data[i][index]<0x90) {",
          "276:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_INVALID]);",
          "277:           } else if (pat->data[i][index]<0xa0) {",
          "278:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[GUI_COLOR_PATTERN_EFFECT_MISC]);",
          "286:             ImGui::PushStyleColor(ImGuiCol_Text,uiColors[extFxColors[pat->data[i][index]-0xe0]]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}