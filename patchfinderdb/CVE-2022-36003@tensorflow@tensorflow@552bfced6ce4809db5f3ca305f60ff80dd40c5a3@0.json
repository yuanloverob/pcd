{
  "cve_id": "CVE-2022-36003",
  "cve_desc": "TensorFlow is an open source platform for machine learning. When `RandomPoissonV2` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit 552bfced6ce4809db5f3ca305f60ff80dd40c5a3. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "552bfced6ce4809db5f3ca305f60ff80dd40c5a3",
  "patch_info": {
    "commit_hash": "552bfced6ce4809db5f3ca305f60ff80dd40c5a3",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/552bfced6ce4809db5f3ca305f60ff80dd40c5a3",
    "files": [
      "tensorflow/core/kernels/random_op.cc",
      "tensorflow/core/kernels/random_poisson_op.cc",
      "tensorflow/python/kernel_tests/random/random_gamma_test.py",
      "tensorflow/python/kernel_tests/random/random_poisson_test.py"
    ],
    "message": "Fix size check for large input shape and rates.\n\nTo address a check failure for exceedingly large output shapes, we need to\n`AppendShapeWithStatus`.\n\nPiperOrigin-RevId: 462885894",
    "before_after_code_files": [
      "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
      "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
      "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
      "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc": [
      "File: tensorflow/core/kernels/random_op.cc -> tensorflow/core/kernels/random_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "166:     }",
      "167:     const int64_t samples_per_alpha = samples_shape.num_elements();",
      "171:     Tensor* samples_t = nullptr;",
      "172:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));",
      "",
      "[Removed Lines]",
      "169:     samples_shape.AppendShape(alpha_t.shape());",
      "",
      "[Added Lines]",
      "169:     OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(alpha_t.shape()));",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc": [
      "File: tensorflow/core/kernels/random_poisson_op.cc -> tensorflow/core/kernels/random_poisson_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "296:     TensorShape samples_shape;",
      "297:     OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_t, &samples_shape));",
      "298:     const int64_t num_samples = samples_shape.num_elements();",
      "302:     Tensor* samples_t = nullptr;",
      "303:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));",
      "",
      "[Removed Lines]",
      "300:     samples_shape.AppendShape(rate_t.shape());",
      "",
      "[Added Lines]",
      "299:     OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(rate_t.shape()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py": [
      "File: tensorflow/python/kernel_tests/random/random_gamma_test.py -> tensorflow/python/kernel_tests/random/random_gamma_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: import numpy as np",
      "19: from tensorflow.python.framework import dtypes",
      "20: from tensorflow.python.framework import ops",
      "21: from tensorflow.python.framework import random_seed",
      "22: from tensorflow.python.framework import test_util",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from tensorflow.python.eager import context",
      "20: from tensorflow.python.framework import constant_op",
      "22: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:         self.assertEqual(0, math_ops.reduce_sum(math_ops.cast(",
      "217:             math_ops.less_equal(x, 0.), dtype=dtypes.int64)).eval())",
      "220: if __name__ == \"__main__\":",
      "221:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:   def testSizeTooLarge(self):",
      "223:     # Grappler asserts on size overflow, so this error is only caught when",
      "224:     # running eagerly.",
      "225:     if context.executing_eagerly():",
      "226:       with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "227:                                   \"overflow\"):",
      "228:         rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))",
      "229:         self.evaluate(",
      "230:             random_ops.random_gamma(",
      "231:                 shape=[46902, 51188, 34063, 59195], alpha=rate))",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py": [
      "File: tensorflow/python/kernel_tests/random/random_poisson_test.py -> tensorflow/python/kernel_tests/random/random_poisson_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: from tensorflow.python.framework import constant_op",
      "19: from tensorflow.python.framework import dtypes",
      "20: from tensorflow.python.framework import ops",
      "21: from tensorflow.python.framework import test_util",
      "22: from tensorflow.python.kernel_tests.random import util",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171:     sample = random_ops.random_poisson(shape=[2], lam=np.inf)",
      "172:     self.assertAllEqual([np.inf, np.inf], self.evaluate(sample))",
      "175: if __name__ == \"__main__\":",
      "176:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:   def testSizeTooLarge(self):",
      "176:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
      "177:                                 \"overflow\"):",
      "178:       rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))",
      "179:       self.evaluate(",
      "180:           random_ops.random_poisson(",
      "181:               shape=[46902, 51188, 34063, 59195], lam=rate))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d3d3cf0101421a85e136311d7354c78d2b81912f",
      "candidate_info": {
        "commit_hash": "d3d3cf0101421a85e136311d7354c78d2b81912f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d3d3cf0101421a85e136311d7354c78d2b81912f",
        "files": [
          "tensorflow/core/kernels/random_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/python/kernel_tests/random/random_gamma_test.py",
          "tensorflow/python/kernel_tests/random/random_poisson_test.py"
        ],
        "message": "Fix size check for large input shape and rates.\n\nTo address a check failure for exceedingly large output shapes, we need to\n`AppendShapeWithStatus`.\n\nPiperOrigin-RevId: 462885894",
        "before_after_code_files": [
          "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
          "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
            "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
            "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc": [
          "File: tensorflow/core/kernels/random_op.cc -> tensorflow/core/kernels/random_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     }",
          "167:     const int64_t samples_per_alpha = samples_shape.num_elements();",
          "171:     Tensor* samples_t = nullptr;",
          "172:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));",
          "",
          "[Removed Lines]",
          "169:     samples_shape.AppendShape(alpha_t.shape());",
          "",
          "[Added Lines]",
          "169:     OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(alpha_t.shape()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc": [
          "File: tensorflow/core/kernels/random_poisson_op.cc -> tensorflow/core/kernels/random_poisson_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:     TensorShape samples_shape;",
          "297:     OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_t, &samples_shape));",
          "298:     const int64_t num_samples = samples_shape.num_elements();",
          "302:     Tensor* samples_t = nullptr;",
          "303:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));",
          "",
          "[Removed Lines]",
          "300:     samples_shape.AppendShape(rate_t.shape());",
          "",
          "[Added Lines]",
          "299:     OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(rate_t.shape()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py": [
          "File: tensorflow/python/kernel_tests/random/random_gamma_test.py -> tensorflow/python/kernel_tests/random/random_gamma_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import numpy as np",
          "19: from tensorflow.python.framework import dtypes",
          "20: from tensorflow.python.framework import ops",
          "21: from tensorflow.python.framework import random_seed",
          "22: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: from tensorflow.python.eager import context",
          "20: from tensorflow.python.framework import constant_op",
          "22: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:         self.assertEqual(0, math_ops.reduce_sum(math_ops.cast(",
          "217:             math_ops.less_equal(x, 0.), dtype=dtypes.int64)).eval())",
          "220: if __name__ == \"__main__\":",
          "221:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:   def testSizeTooLarge(self):",
          "223:     # Grappler asserts on size overflow, so this error is only caught when",
          "224:     # running eagerly.",
          "225:     if context.executing_eagerly():",
          "226:       with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "227:                                   \"overflow\"):",
          "228:         rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))",
          "229:         self.evaluate(",
          "230:             random_ops.random_gamma(",
          "231:                 shape=[46902, 51188, 34063, 59195], alpha=rate))",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py": [
          "File: tensorflow/python/kernel_tests/random/random_poisson_test.py -> tensorflow/python/kernel_tests/random/random_poisson_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from tensorflow.python.framework import constant_op",
          "19: from tensorflow.python.framework import dtypes",
          "20: from tensorflow.python.framework import ops",
          "21: from tensorflow.python.framework import test_util",
          "22: from tensorflow.python.kernel_tests.random import util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:     sample = random_ops.random_poisson(shape=[2], lam=np.inf)",
          "172:     self.assertAllEqual([np.inf, np.inf], self.evaluate(sample))",
          "175: if __name__ == \"__main__\":",
          "176:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   def testSizeTooLarge(self):",
          "176:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "177:                                 \"overflow\"):",
          "178:       rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))",
          "179:       self.evaluate(",
          "180:           random_ops.random_poisson(",
          "181:               shape=[46902, 51188, 34063, 59195], lam=rate))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cb72d57631c34344fee045a9480d04ab20d1412",
      "candidate_info": {
        "commit_hash": "3cb72d57631c34344fee045a9480d04ab20d1412",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3cb72d57631c34344fee045a9480d04ab20d1412",
        "files": [
          "tensorflow/core/kernels/random_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/python/kernel_tests/random/random_gamma_test.py",
          "tensorflow/python/kernel_tests/random/random_poisson_test.py"
        ],
        "message": "Fix size check for large input shape and rates.\n\nTo address a check failure for exceedingly large output shapes, we need to\n`AppendShapeWithStatus`.\n\nPiperOrigin-RevId: 462885894",
        "before_after_code_files": [
          "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
          "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
            "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
            "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc": [
          "File: tensorflow/core/kernels/random_op.cc -> tensorflow/core/kernels/random_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     }",
          "167:     const int64_t samples_per_alpha = samples_shape.num_elements();",
          "171:     Tensor* samples_t = nullptr;",
          "172:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));",
          "",
          "[Removed Lines]",
          "169:     samples_shape.AppendShape(alpha_t.shape());",
          "",
          "[Added Lines]",
          "169:     OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(alpha_t.shape()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc": [
          "File: tensorflow/core/kernels/random_poisson_op.cc -> tensorflow/core/kernels/random_poisson_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:     TensorShape samples_shape;",
          "297:     OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_t, &samples_shape));",
          "298:     const int64_t num_samples = samples_shape.num_elements();",
          "302:     Tensor* samples_t = nullptr;",
          "303:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));",
          "",
          "[Removed Lines]",
          "300:     samples_shape.AppendShape(rate_t.shape());",
          "",
          "[Added Lines]",
          "299:     OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(rate_t.shape()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py": [
          "File: tensorflow/python/kernel_tests/random/random_gamma_test.py -> tensorflow/python/kernel_tests/random/random_gamma_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import numpy as np",
          "19: from tensorflow.python.framework import dtypes",
          "20: from tensorflow.python.framework import ops",
          "21: from tensorflow.python.framework import random_seed",
          "22: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: from tensorflow.python.eager import context",
          "20: from tensorflow.python.framework import constant_op",
          "22: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:         self.assertEqual(0, math_ops.reduce_sum(math_ops.cast(",
          "217:             math_ops.less_equal(x, 0.), dtype=dtypes.int64)).eval())",
          "220: if __name__ == \"__main__\":",
          "221:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:   def testSizeTooLarge(self):",
          "223:     # Grappler asserts on size overflow, so this error is only caught when",
          "224:     # running eagerly.",
          "225:     if context.executing_eagerly():",
          "226:       with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "227:                                   \"overflow\"):",
          "228:         rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))",
          "229:         self.evaluate(",
          "230:             random_ops.random_gamma(",
          "231:                 shape=[46902, 51188, 34063, 59195], alpha=rate))",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py": [
          "File: tensorflow/python/kernel_tests/random/random_poisson_test.py -> tensorflow/python/kernel_tests/random/random_poisson_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from tensorflow.python.framework import constant_op",
          "19: from tensorflow.python.framework import dtypes",
          "20: from tensorflow.python.framework import ops",
          "21: from tensorflow.python.framework import test_util",
          "22: from tensorflow.python.kernel_tests.random import util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:     sample = random_ops.random_poisson(shape=[2], lam=np.inf)",
          "172:     self.assertAllEqual([np.inf, np.inf], self.evaluate(sample))",
          "175: if __name__ == \"__main__\":",
          "176:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   def testSizeTooLarge(self):",
          "176:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "177:                                 \"overflow\"):",
          "178:       rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))",
          "179:       self.evaluate(",
          "180:           random_ops.random_poisson(",
          "181:               shape=[46902, 51188, 34063, 59195], lam=rate))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf636ce5867f1aedf5029e0ccb109967265152cb",
      "candidate_info": {
        "commit_hash": "bf636ce5867f1aedf5029e0ccb109967265152cb",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bf636ce5867f1aedf5029e0ccb109967265152cb",
        "files": [
          "tensorflow/core/kernels/random_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/python/kernel_tests/random/random_gamma_test.py",
          "tensorflow/python/kernel_tests/random/random_poisson_test.py"
        ],
        "message": "Fix size check for large input shape and rates.\n\nTo address a check failure for exceedingly large output shapes, we need to\n`AppendShapeWithStatus`.\n\nPiperOrigin-RevId: 462885894",
        "before_after_code_files": [
          "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
          "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
          "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
          "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
            "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc",
            "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc",
            "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py",
            "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/random_op.cc||tensorflow/core/kernels/random_op.cc": [
          "File: tensorflow/core/kernels/random_op.cc -> tensorflow/core/kernels/random_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     }",
          "167:     const int64_t samples_per_alpha = samples_shape.num_elements();",
          "171:     Tensor* samples_t = nullptr;",
          "172:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));",
          "",
          "[Removed Lines]",
          "169:     samples_shape.AppendShape(alpha_t.shape());",
          "",
          "[Added Lines]",
          "169:     OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(alpha_t.shape()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/random_poisson_op.cc||tensorflow/core/kernels/random_poisson_op.cc": [
          "File: tensorflow/core/kernels/random_poisson_op.cc -> tensorflow/core/kernels/random_poisson_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:     TensorShape samples_shape;",
          "297:     OP_REQUIRES_OK(ctx, tensor::MakeShape(shape_t, &samples_shape));",
          "298:     const int64_t num_samples = samples_shape.num_elements();",
          "302:     Tensor* samples_t = nullptr;",
          "303:     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, samples_shape, &samples_t));",
          "",
          "[Removed Lines]",
          "300:     samples_shape.AppendShape(rate_t.shape());",
          "",
          "[Added Lines]",
          "299:     OP_REQUIRES_OK(ctx, samples_shape.AppendShapeWithStatus(rate_t.shape()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/random_gamma_test.py||tensorflow/python/kernel_tests/random/random_gamma_test.py": [
          "File: tensorflow/python/kernel_tests/random/random_gamma_test.py -> tensorflow/python/kernel_tests/random/random_gamma_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "22: from six.moves import xrange  # pylint: disable=redefined-builtin",
          "24: from tensorflow.python.framework import dtypes",
          "25: from tensorflow.python.framework import ops",
          "26: from tensorflow.python.framework import random_seed",
          "27: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from tensorflow.python.eager import context",
          "25: from tensorflow.python.framework import constant_op",
          "27: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:         self.assertEqual(0, math_ops.reduce_sum(math_ops.cast(",
          "222:             math_ops.less_equal(x, 0.), dtype=dtypes.int64)).eval())",
          "225: if __name__ == \"__main__\":",
          "226:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:   def testSizeTooLarge(self):",
          "228:     # Grappler asserts on size overflow, so this error is only caught when",
          "229:     # running eagerly.",
          "230:     if context.executing_eagerly():",
          "231:       with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "232:                                   \"overflow\"):",
          "233:         rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))",
          "234:         self.evaluate(",
          "235:             random_ops.random_gamma(",
          "236:                 shape=[46902, 51188, 34063, 59195], alpha=rate))",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/random/random_poisson_test.py||tensorflow/python/kernel_tests/random/random_poisson_test.py": [
          "File: tensorflow/python/kernel_tests/random/random_poisson_test.py -> tensorflow/python/kernel_tests/random/random_poisson_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from tensorflow.python.framework import constant_op",
          "24: from tensorflow.python.framework import dtypes",
          "25: from tensorflow.python.framework import ops",
          "26: from tensorflow.python.framework import test_util",
          "27: from tensorflow.python.kernel_tests.random import util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:     sample = random_ops.random_poisson(shape=[2], lam=np.inf)",
          "177:     self.assertAllEqual([np.inf, np.inf], self.evaluate(sample))",
          "180: if __name__ == \"__main__\":",
          "181:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:   def testSizeTooLarge(self):",
          "181:     with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),",
          "182:                                 \"overflow\"):",
          "183:       rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))",
          "184:       self.evaluate(",
          "185:           random_ops.random_poisson(",
          "186:               shape=[46902, 51188, 34063, 59195], lam=rate))",
          "",
          "---------------"
        ]
      }
    }
  ]
}