{
  "cve_id": "CVE-2021-3622",
  "cve_desc": "A flaw was found in the hivex library. This flaw allows an attacker to input a specially crafted Windows Registry (hive) file, which would cause hivex to recursively call the _get_children() function, leading to a stack overflow. The highest threat from this vulnerability is to system availability.",
  "repo": "libguestfs/hivex",
  "patch_hash": "771728218dac2fbf6997a7e53225e75a4c6b7255",
  "patch_info": {
    "commit_hash": "771728218dac2fbf6997a7e53225e75a4c6b7255",
    "repo": "libguestfs/hivex",
    "commit_url": "https://github.com/libguestfs/hivex/commit/771728218dac2fbf6997a7e53225e75a4c6b7255",
    "files": [
      "lib/node.c"
    ],
    "message": "lib/node.c: Limit recursion in ri-records (CVE-2021-3622)\n\nWindows Registry hive \"ri\"-records are arbitrarily nested B-tree-like\nstructures:\n\n  +-------------+\n  | ri          |\n  |-------------|\n  | nr_offsets  |\n  |   offset[0] ------>  points to another lf/lh/li/ri block\n  |   offset[1] ------>\n  |   offset[2] ------>\n  +-------------+\n\nIt is possible to construct a hive with a very deeply nested tree of\nri-records, causing the internal _get_children function to recurse to\nany depth which can cause programs linked to hivex to crash with a\nstack overflow.\n\nSince it is not thought that deeply nested ri-records occur in real\nhives, limit recursion depth.  If you hit this limit you will see the\nfollowing error and the operation will return an error instead of\ncrashing:\n\n  \\> ls\n  hivex: _get_children: returning EINVAL because: ri-record nested to depth >= 32\n  ls: Invalid argument\n\nThanks to Jeremy Galindo for finding and reporting this bug.\n\nReported-by: Jeremy Galindo, Sr Security Engineer, Datto.com\nSigned-off-by: Richard W.M. Jones <rjones@redhat.com>\nFixes: CVE-2021-3622\nFixes: https://bugzilla.redhat.com/show_bug.cgi?id=1975489\n(cherry picked from commit 781a12c4a49dd81365c9c567c5aa5e19e894ba0e)",
    "before_after_code_files": [
      "lib/node.c||lib/node.c"
    ]
  },
  "patch_diff": {
    "lib/node.c||lib/node.c": [
      "File: lib/node.c -> lib/node.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "204: static int _get_children (hive_h *h, hive_node_h blkoff,",
      "205:                           offset_list *children, offset_list *blocks,",
      "207: static int check_child_is_nk_block (hive_h *h, hive_node_h child, int flags);",
      "",
      "[Removed Lines]",
      "206:                           int flags);",
      "",
      "[Added Lines]",
      "206:                           int flags, unsigned depth);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "335:     goto error;",
      "336:   }",
      "339:     goto error;",
      "",
      "[Removed Lines]",
      "338:   if (_get_children (h, subkey_lf, &children, &blocks, flags) == -1)",
      "",
      "[Added Lines]",
      "338:   if (_get_children (h, subkey_lf, &children, &blocks, flags, 0) == -1)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "383: static int",
      "384: _get_children (hive_h *h, hive_node_h blkoff,",
      "385:                offset_list *children, offset_list *blocks,",
      "387: {",
      "389:   if (_hivex_add_to_offset_list (blocks, blkoff) == -1)",
      "",
      "[Removed Lines]",
      "386:                int flags)",
      "",
      "[Added Lines]",
      "386:                int flags, unsigned depth)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "486:         }",
      "487:       }",
      "490:         return -1;",
      "491:     }",
      "492:   }",
      "",
      "[Removed Lines]",
      "489:       if (_get_children (h, offset, children, blocks, flags) == -1)",
      "",
      "[Added Lines]",
      "494:       if (depth >= 32) {",
      "495:         SET_ERRNO (EINVAL, \"ri-record nested to depth >= %u\", depth);",
      "496:         return -1;",
      "497:       }",
      "499:       if (_get_children (h, offset, children, blocks, flags, depth+1) == -1)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a71071230eb0726a9c9211048dc27b12613058a2",
      "candidate_info": {
        "commit_hash": "a71071230eb0726a9c9211048dc27b12613058a2",
        "repo": "libguestfs/hivex",
        "commit_url": "https://github.com/libguestfs/hivex/commit/a71071230eb0726a9c9211048dc27b12613058a2",
        "files": [
          "lib/node.c"
        ],
        "message": "lib/node.c: Limit recursion in ri-records (CVE-2021-3622)\n\nWindows Registry hive \"ri\"-records are arbitrarily nested B-tree-like\nstructures:\n\n  +-------------+\n  | ri          |\n  |-------------|\n  | nr_offsets  |\n  |   offset[0] ------>  points to another lf/lh/li/ri block\n  |   offset[1] ------>\n  |   offset[2] ------>\n  +-------------+\n\nIt is possible to construct a hive with a very deeply nested tree of\nri-records, causing the internal _get_children function to recurse to\nany depth which can cause programs linked to hivex to crash with a\nstack overflow.\n\nSince it is not thought that deeply nested ri-records occur in real\nhives, limit recursion depth.  If you hit this limit you will see the\nfollowing error and the operation will return an error instead of\ncrashing:\n\n  \\> ls\n  hivex: _get_children: returning EINVAL because: ri-record nested to depth >= 32\n  ls: Invalid argument\n\nThanks to Jeremy Galindo for finding and reporting this bug.\n\nReported-by: Jeremy Galindo, Sr Security Engineer, Datto.com\nSigned-off-by: Richard W.M. Jones <rjones@redhat.com>\nFixes: CVE-2021-3622\nFixes: https://bugzilla.redhat.com/show_bug.cgi?id=1975489\n(cherry picked from commit 781a12c4a49dd81365c9c567c5aa5e19e894ba0e)\n(cherry picked from commit 771728218dac2fbf6997a7e53225e75a4c6b7255)",
        "before_after_code_files": [
          "lib/node.c||lib/node.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/node.c||lib/node.c"
          ],
          "candidate": [
            "lib/node.c||lib/node.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/node.c||lib/node.c": [
          "File: lib/node.c -> lib/node.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: static int _get_children (hive_h *h, hive_node_h blkoff,",
          "205:                           offset_list *children, offset_list *blocks,",
          "207: static int check_child_is_nk_block (hive_h *h, hive_node_h child, int flags);",
          "",
          "[Removed Lines]",
          "206:                           int flags);",
          "",
          "[Added Lines]",
          "206:                           int flags, unsigned depth);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335:     goto error;",
          "336:   }",
          "339:     goto error;",
          "",
          "[Removed Lines]",
          "338:   if (_get_children (h, subkey_lf, &children, &blocks, flags) == -1)",
          "",
          "[Added Lines]",
          "338:   if (_get_children (h, subkey_lf, &children, &blocks, flags, 0) == -1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383: static int",
          "384: _get_children (hive_h *h, hive_node_h blkoff,",
          "385:                offset_list *children, offset_list *blocks,",
          "387: {",
          "389:   if (_hivex_add_to_offset_list (blocks, blkoff) == -1)",
          "",
          "[Removed Lines]",
          "386:                int flags)",
          "",
          "[Added Lines]",
          "386:                int flags, unsigned depth)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "486:         }",
          "487:       }",
          "490:         return -1;",
          "491:     }",
          "492:   }",
          "",
          "[Removed Lines]",
          "489:       if (_get_children (h, offset, children, blocks, flags) == -1)",
          "",
          "[Added Lines]",
          "494:       if (depth >= 32) {",
          "495:         SET_ERRNO (EINVAL, \"ri-record nested to depth >= %u\", depth);",
          "496:         return -1;",
          "497:       }",
          "499:       if (_get_children (h, offset, children, blocks, flags, depth+1) == -1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}