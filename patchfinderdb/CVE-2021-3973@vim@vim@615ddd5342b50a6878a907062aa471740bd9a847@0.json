{
  "cve_id": "CVE-2021-3973",
  "cve_desc": "vim is vulnerable to Heap-based Buffer Overflow",
  "repo": "vim/vim",
  "patch_hash": "615ddd5342b50a6878a907062aa471740bd9a847",
  "patch_info": {
    "commit_hash": "615ddd5342b50a6878a907062aa471740bd9a847",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/615ddd5342b50a6878a907062aa471740bd9a847",
    "files": [
      "src/findfile.c",
      "src/normal.c",
      "src/testdir/test_visual.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.3611: crash when using CTRL-W f without finding a file name\n\nProblem:    Crash when using CTRL-W f without finding a file name.\nSolution:   Bail out when the file name length is zero.",
    "before_after_code_files": [
      "src/findfile.c||src/findfile.c",
      "src/normal.c||src/normal.c",
      "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/findfile.c||src/findfile.c": [
      "File: src/findfile.c -> src/findfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1735:     proc->pr_WindowPtr = (APTR)-1L;",
      "1736: # endif",
      "1738:     if (first == TRUE)",
      "1739:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1738:     if (len == 0)",
      "1739:  return NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2118:     int  c;",
      "2119: # if defined(FEAT_FIND_ID) && defined(FEAT_EVAL)",
      "2120:     char_u *tofree = NULL;",
      "2122:     if ((options & FNAME_INCL) && *curbuf->b_p_inex != NUL)",
      "2123:     {",
      "2124:  tofree = eval_includeexpr(ptr, len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2124: # endif",
      "2126:     if (len == 0)",
      "2127:  return NULL;",
      "2129: # if defined(FEAT_FIND_ID) && defined(FEAT_EVAL)",
      "",
      "---------------"
    ],
    "src/normal.c||src/normal.c": [
      "File: src/normal.c -> src/normal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3883:  }",
      "3887:     }",
      "3888:     reset_VIsual_and_resel();",
      "",
      "[Removed Lines]",
      "3884:  if (has_mbyte)",
      "",
      "[Added Lines]",
      "3884:  if (**pp == NUL)",
      "3886:  if (has_mbyte && *lenp > 0)",
      "",
      "---------------"
    ],
    "src/testdir/test_visual.vim||src/testdir/test_visual.vim": [
      "File: src/testdir/test_visual.vim -> src/testdir/test_visual.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1265:   call delete('XTest_block')",
      "1266: endfunc",
      "1268: func Test_visual_reselect_with_count()",
      "1269:   \" this was causing an illegal memory access",
      "1270:   let lines =<< trim END",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1268: func Test_visual_block_ctrl_w_f()",
      "1269:   \" Emtpy block selected in new buffer should not result in an error.",
      "1270:   au! BufNew foo sil norm \u0016\u0017f",
      "1271:   edit foo",
      "1273:   au! BufNew",
      "1274: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "758: static int included_patches[] =",
      "761:     3610,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "761:     3611,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "395bd1f6d3edc9f7edb5d1f2d7deaf5a9e3ab93c",
      "candidate_info": {
        "commit_hash": "395bd1f6d3edc9f7edb5d1f2d7deaf5a9e3ab93c",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/395bd1f6d3edc9f7edb5d1f2d7deaf5a9e3ab93c",
        "files": [
          "src/normal.c",
          "src/testdir/test_gf.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4956: reading past end of line with \"gf\" in Visual block mode\n\nProblem:    Reading past end of line with \"gf\" in Visual block mode.\nSolution:   Do not include the NUL in the length.",
        "before_after_code_files": [
          "src/normal.c||src/normal.c",
          "src/testdir/test_gf.vim||src/testdir/test_gf.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/normal.c||src/normal.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/normal.c||src/normal.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/normal.c||src/normal.c": [
          "File: src/normal.c -> src/normal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3671:  }",
          "3672:  if (**pp == NUL)",
          "3677:     }",
          "3678:     reset_VIsual_and_resel();",
          "3679:     return OK;",
          "",
          "[Removed Lines]",
          "3674:  if (has_mbyte && *lenp > 0)",
          "",
          "[Added Lines]",
          "3674:  if (*lenp > 0)",
          "3675:  {",
          "3676:      if (has_mbyte)",
          "3680:      else if ((*pp)[*lenp - 1] == NUL)",
          "3683:  }",
          "",
          "---------------"
        ],
        "src/testdir/test_gf.vim||src/testdir/test_gf.vim": [
          "File: src/testdir/test_gf.vim -> src/testdir/test_gf.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   call assert_equal('Xtest_gf_visual', bufname('%'))",
          "139:   call assert_equal(3, getcurpos()[1])",
          "141:   \" line number in visual area is used for file name",
          "142:   if has('unix')",
          "143:     bwipe!",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:   \" do not include the NUL at the end",
          "142:   call writefile(['x'], 'X')",
          "143:   let save_enc = &enc",
          "144:   for enc in ['latin1', 'utf-8']",
          "145:     exe \"set enc=\" .. enc",
          "146:     new",
          "147:     call setline(1, 'X')",
          "148:     set nomodified",
          "149:     exe \"normal \\<C-V>$gf\"",
          "150:     call assert_equal('X', bufname())",
          "151:     bwipe!",
          "152:   endfor",
          "153:   let &enc = save_enc",
          "154:   call delete('X')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: static int included_patches[] =",
          "750:     4955,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:     4956,",
          "",
          "---------------"
        ]
      }
    }
  ]
}