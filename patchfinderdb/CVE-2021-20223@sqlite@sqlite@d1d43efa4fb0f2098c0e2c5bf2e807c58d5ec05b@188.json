{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a9082f6d773fad00926f64650601104827bd319",
      "candidate_info": {
        "commit_hash": "1a9082f6d773fad00926f64650601104827bd319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a9082f6d773fad00926f64650601104827bd319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/gencol1.test"
        ],
        "message": "Omit the optimization that reduces the column-count on rowid-table cursors when the table has generated columns, because we do not know what columns the generator expressions might try to access.\n\nFossilOrigin-Name: e6c96ed91e7a96d2bd30ea9df132644ac02d5a321a62f81f8f3984a8e49ed94b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:       assert( pTabItem->iCursor==pLevel->iTabCur );",
          "5015:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS-1 );",
          "5016:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS );",
          "5018:         Bitmask b = pTabItem->colUsed;",
          "5019:         int n = 0;",
          "5020:         for(; b; b=b>>1, n++){}",
          "",
          "[Removed Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol<BMS && HasRowid(pTab) ){",
          "",
          "[Added Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF",
          "5018:        && pTab->nCol<BMS",
          "5019:        && (pTab->tabFlags & (TF_HasGenerated|TF_WithoutRowid))==0",
          "5020:       ){",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   REPLACE INTO t0(c0,c2,c3) VALUES(0,0,0),(0,0,0);",
          "177: } {1 {FOREIGN KEY constraint failed}}",
          "179: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: # 2019-11-01 Problem found while adding new foreign key test cases in TH3.",
          "180: db close",
          "181: sqlite3 db :memory:",
          "182: do_execsql_test gencol1-5.100 {",
          "183:   PRAGMA foreign_keys=ON;",
          "184:   CREATE TABLE t1(",
          "185:     gcb AS (b*1),",
          "186:     a INTEGER PRIMARY KEY,",
          "187:     gcc AS (c+0),",
          "188:     b UNIQUE,",
          "189:     gca AS (1*a+0),",
          "190:     c UNIQUE",
          "191:   ) WITHOUT ROWID;",
          "192:   INSERT INTO t1 VALUES(1,2,3);",
          "193:   INSERT INTO t1 VALUES(4,5,6);",
          "194:   INSERT INTO t1 VALUES(7,8,9);",
          "195:   CREATE TABLE t1a(",
          "196:     gcx AS (x+0) REFERENCES t1(a) ON DELETE CASCADE,",
          "197:     id,",
          "198:     x,",
          "199:     gcid AS (1*id)",
          "200:   );",
          "201:   INSERT INTO t1a VALUES(1, 1);",
          "202:   INSERT INTO t1a VALUES(2, 4);",
          "203:   INSERT INTO t1a VALUES(3, 7);",
          "204:   DELETE FROM t1 WHERE b=5;",
          "205:   SELECT id,x,'|' FROM t1a ORDER BY id;",
          "206: } {1 1 | 3 7 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72c38d87bf7b77849214136d7b6329e003ff5c45",
      "candidate_info": {
        "commit_hash": "72c38d87bf7b77849214136d7b6329e003ff5c45",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/72c38d87bf7b77849214136d7b6329e003ff5c45",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the miscellaneous 'series' extension to the shell.\n\nFossilOrigin-Name: fc0856dccfab273d50457052fa3c6da768d0eb2504ad04d9540da4e3222fc829",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f5dc83442bf010bc4083e083b3a1acbb9918b7e685ca676dd899a0e09df196bc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028: INCLUDE ../ext/misc/uint.c",
          "1029: INCLUDE ../ext/misc/decimal.c",
          "1030: INCLUDE ../ext/misc/ieee754.c",
          "1031: #ifdef SQLITE_HAVE_ZLIB",
          "1032: INCLUDE ../ext/misc/zipfile.c",
          "1033: INCLUDE ../ext/misc/sqlar.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1031: INCLUDE ../ext/misc/series.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4590:     sqlite3_uint_init(p->db, 0, 0);",
          "4591:     sqlite3_decimal_init(p->db, 0, 0);",
          "4592:     sqlite3_ieee_init(p->db, 0, 0);",
          "4593: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)",
          "4594:     sqlite3_dbdata_init(p->db, 0, 0);",
          "4595: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4594:     sqlite3_series_init(p->db, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c398c65bee850b6b8f24a44852872a27f114535d",
      "candidate_info": {
        "commit_hash": "c398c65bee850b6b8f24a44852872a27f114535d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c398c65bee850b6b8f24a44852872a27f114535d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/os.c",
          "src/os_unix.c",
          "src/os_win.c",
          "src/pager.c",
          "src/sqlite.h.in",
          "src/test_demovfs.c",
          "src/test_vfs.c"
        ],
        "message": "Revise the SQLITE_OPEN_NOFOLLOW so that it actually uses O_NOFOLLOW in the open() system call.  This backs out the SQLITE_ACCESS_SYMLINK value but adds the new SQLITE_OK_SYMLINK return code from the xFullPathname method of sqlite3_vfs when that routine resolves symbolic links. O_NOFOLLOW is always included in open() system calls for journal files.\n\nFossilOrigin-Name: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/os.c||src/os.c",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/pager.c||src/pager.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test_demovfs.c||src/test_demovfs.c",
          "src/test_vfs.c||src/test_vfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac080432b480062507452d3cdbe6c0f759e6f95b65d9862e0462017405ab2b8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2403:         rc = sqlite3OsFullPathname(pVfs, zFilename,",
          "2404:                                    nFullPathname, zFullPathname);",
          "2405:         if( rc ){",
          "2409:         }",
          "2410:       }",
          "2411: #if SQLITE_THREADSAFE",
          "",
          "[Removed Lines]",
          "2406:           sqlite3_free(zFullPathname);",
          "2407:           sqlite3_free(p);",
          "2408:           return rc;",
          "",
          "[Added Lines]",
          "2406:           if( rc==SQLITE_OK_SYMLINK ){",
          "2407:             rc = SQLITE_OK;",
          "2408:           }else{",
          "2409:             sqlite3_free(zFullPathname);",
          "2410:             sqlite3_free(p);",
          "2411:             return rc;",
          "2412:           }",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   assert( rc==SQLITE_OK || pFile->pMethods==0 );",
          "220:   return rc;",
          "221: }",
          "",
          "[Removed Lines]",
          "218:   rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x87f7f, pFlagsOut);",
          "",
          "[Added Lines]",
          "218:   rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x1087f7f, pFlagsOut);",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3685:     if( zDirname[0]!='/' ) zDirname[0] = '.';",
          "3686:     zDirname[1] = 0;",
          "3687:   }",
          "3689:   if( fd>=0 ){",
          "3690:     OSTRACE((\"OPENDIR %-3d %s\\n\", fd, zDirname));",
          "3691:   }",
          "",
          "[Removed Lines]",
          "3688:   fd = robust_open(zDirname, O_RDONLY|O_BINARY, 0);",
          "",
          "[Added Lines]",
          "3688:   fd = robust_open(zDirname, O_RDONLY|O_BINARY|O_NOFOLLOW, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4577:     if( pInode->bProcessLock==0 ){",
          "4578:       if( 0==sqlite3_uri_boolean(pDbFd->zPath, \"readonly_shm\", 0) ){",
          "4580:       }",
          "4581:       if( pShmNode->hShm<0 ){",
          "4583:         if( pShmNode->hShm<0 ){",
          "4584:           rc = unixLogError(SQLITE_CANTOPEN_BKPT, \"open\", zShm);",
          "4585:           goto shm_open_err;",
          "",
          "[Removed Lines]",
          "4579:         pShmNode->hShm = robust_open(zShm, O_RDWR|O_CREAT,(sStat.st_mode&0777));",
          "4582:         pShmNode->hShm = robust_open(zShm, O_RDONLY, (sStat.st_mode&0777));",
          "",
          "[Added Lines]",
          "4579:         pShmNode->hShm = robust_open(zShm, O_RDWR|O_CREAT|O_NOFOLLOW,",
          "4580:                                      (sStat.st_mode&0777));",
          "4583:         pShmNode->hShm = robust_open(zShm, O_RDONLY|O_NOFOLLOW,",
          "4584:                                      (sStat.st_mode&0777));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6039:   if( isReadWrite ) openFlags |= O_RDWR;",
          "6040:   if( isCreate )    openFlags |= O_CREAT;",
          "6041:   if( isExclusive ) openFlags |= (O_EXCL|O_NOFOLLOW);",
          "6044:   if( fd<0 ){",
          "",
          "[Removed Lines]",
          "6042:   openFlags |= (O_LARGEFILE|O_BINARY);",
          "",
          "[Added Lines]",
          "6044:   openFlags |= (O_LARGEFILE|O_BINARY|O_NOFOLLOW);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6251:   SimulateIOError( return SQLITE_IOERR_ACCESS; );",
          "6252:   assert( pResOut!=0 );",
          "6260:   if( flags==SQLITE_ACCESS_EXISTS ){",
          "6261:     struct stat buf;",
          "6265:   }else{",
          "6273:   }",
          "6274:   return SQLITE_OK;",
          "6275: }",
          "",
          "[Removed Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS",
          "6257:        || flags==SQLITE_ACCESS_READWRITE",
          "6258:        || flags==SQLITE_ACCESS_SYMLINK );",
          "6263:   }else if( flags==SQLITE_ACCESS_READWRITE ){",
          "6266: #if !defined(HAVE_LSTAT)",
          "6268: #else",
          "6269:     struct stat buf;",
          "6271: #endif",
          "6272:     assert( flags==SQLITE_ACCESS_SYMLINK );",
          "",
          "[Added Lines]",
          "6258:   assert( flags==SQLITE_ACCESS_EXISTS || flags==SQLITE_ACCESS_READWRITE );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6350:     }",
          "6352:     if( bLink ){",
          "6353:       if( zDel==0 ){",
          "6354:         zDel = sqlite3_malloc(nOut);",
          "6355:         if( zDel==0 ) rc = SQLITE_NOMEM_BKPT;",
          "6357:         rc = SQLITE_CANTOPEN_BKPT;",
          "6358:       }",
          "",
          "[Removed Lines]",
          "6356:       }else if( ++nLink>SQLITE_MAX_SYMLINKS ){",
          "",
          "[Added Lines]",
          "6345:       nLink++;",
          "6349:       }else if( nLink>=SQLITE_MAX_SYMLINKS ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6389:   }while( rc==SQLITE_OK );",
          "6391:   sqlite3_free(zDel);",
          "6392:   return rc;",
          "6394: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6385:   if( rc==SQLITE_OK && nLink ) rc = SQLITE_OK_SYMLINK;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6874:   int fd = -1;",
          "6875:   unixFile *pNew;",
          "6876:   int rc = SQLITE_OK;",
          "6878:   sqlite3_vfs dummyVfs;",
          "6879:   int terrno = 0;",
          "6880:   UnixUnusedFd *pUnused = NULL;",
          "",
          "[Removed Lines]",
          "6877:   int openFlags = O_RDWR | O_CREAT;",
          "",
          "[Added Lines]",
          "6871:   int openFlags = O_RDWR | O_CREAT | O_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6904:     }",
          "6905:   }",
          "6906:   if( fd<0 ){",
          "6908:     fd = robust_open(path, openFlags, 0);",
          "6909:     terrno = errno;",
          "6910:   }",
          "",
          "[Removed Lines]",
          "6907:     openFlags = O_RDONLY;",
          "",
          "[Added Lines]",
          "6901:     openFlags = O_RDONLY | O_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7030:     goto end_breaklock;",
          "7031:   }",
          "7034:   if( fd<0 ){",
          "7035:     sqlite3_snprintf(sizeof(errmsg), errmsg, \"create failed (%d)\", errno);",
          "7036:     goto end_breaklock;",
          "",
          "[Removed Lines]",
          "7033:   fd = robust_open(tPath, (O_RDWR|O_CREAT|O_EXCL), 0);",
          "",
          "[Added Lines]",
          "7027:   fd = robust_open(tPath, (O_RDWR|O_CREAT|O_EXCL|O_NOFOLLOW), 0);",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #  define NTDDI_WINTHRESHOLD                0x06040000",
          "81: #endif",
          "",
          "[Removed Lines]",
          "87: #ifndef FILE_ATTRIBUTE_REPARSE_POINT",
          "88: #  define FILE_ATTRIBUTE_REPARSE_POINT      0x00000400",
          "89: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5480:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5481:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5482:       break;",
          "5487:     default:",
          "5488:       assert(!\"Invalid flags argument\");",
          "5489:   }",
          "",
          "[Removed Lines]",
          "5483:     case SQLITE_ACCESS_SYMLINK:",
          "5484:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5485:              (attr & FILE_ATTRIBUTE_REPARSE_POINT)!=0;",
          "5486:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4791:   if( zFilename && zFilename[0] ){",
          "4792:     const char *z;",
          "4799:     nPathname = pVfs->mxPathname+1;",
          "4800:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "4801:     if( zPathname==0 ){",
          "",
          "[Removed Lines]",
          "4793:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4794:       int isLink = 0;",
          "4795:       int rc = sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink);",
          "4796:       if( rc==SQLITE_OK && isLink ) rc = SQLITE_CANTOPEN_SYMLINK;",
          "4797:       if( rc ) return rc;",
          "4798:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4803:     }",
          "4805:     rc = sqlite3OsFullPathname(pVfs, zFilename, nPathname, zPathname);",
          "4806:     nPathname = sqlite3Strlen30(zPathname);",
          "4807:     z = zUri = &zFilename[sqlite3Strlen30(zFilename)+1];",
          "4808:     while( *z ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4800:     if( rc!=SQLITE_OK ){",
          "4801:       if( rc==SQLITE_OK_SYMLINK ){",
          "4802:         if( vfsFlags & SQLITE_OPEN_NOFOLLOW ){",
          "4803:           rc = SQLITE_CANTOPEN_SYMLINK;",
          "4804:         }else{",
          "4805:           rc = SQLITE_OK;",
          "4806:         }",
          "4807:       }",
          "4808:     }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "541: #define SQLITE_WARNING_AUTOINDEX       (SQLITE_WARNING | (1<<8))",
          "542: #define SQLITE_AUTH_USER               (SQLITE_AUTH | (1<<8))",
          "543: #define SQLITE_OK_LOAD_PERMANENTLY     (SQLITE_OK | (1<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "544: #define SQLITE_OK_SYMLINK              (SQLITE_OK | (2<<8))",
          "",
          "---------------"
        ],
        "src/test_demovfs.c||src/test_demovfs.c": [
          "File: src/test_demovfs.c -> src/test_demovfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:   );",
          "519:   if( flags==SQLITE_ACCESS_READWRITE ) eAccess = R_OK|W_OK;",
          "520:   if( flags==SQLITE_ACCESS_READ )      eAccess = R_OK;",
          "",
          "[Removed Lines]",
          "514:   if( flags==SQLITE_ACCESS_SYMLINK ){",
          "517:     return SQLITE_OK;",
          "518:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:     if( flags==SQLITE_ACCESS_EXISTS ) zArg = \"SQLITE_ACCESS_EXISTS\";",
          "733:     if( flags==SQLITE_ACCESS_READWRITE ) zArg = \"SQLITE_ACCESS_READWRITE\";",
          "734:     if( flags==SQLITE_ACCESS_READ ) zArg = \"SQLITE_ACCESS_READ\";",
          "736:     tvfsExecTcl(p, \"xAccess\",",
          "737:         Tcl_NewStringObj(zPath, -1), Tcl_NewStringObj(zArg, -1), 0, 0",
          "738:     );",
          "",
          "[Removed Lines]",
          "735:     if( flags==SQLITE_ACCESS_SYMLINK ) zArg = \"SQLITE_ACCESS_SYMLINK\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ab0809473ea0c4738594fcbb3e0a07244d3bd0b",
      "candidate_info": {
        "commit_hash": "8ab0809473ea0c4738594fcbb3e0a07244d3bd0b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8ab0809473ea0c4738594fcbb3e0a07244d3bd0b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Remove an artifical limitation on the length of columns in the \"box\" output mode of the command-line shell.\n\nFossilOrigin-Name: 783fa887c9ed1a7d72c310df1dd9de91c016061b05fdeec87fbb2a7eb0b952ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 430c5d1da57af452f236cc862139d84ab97b6020f6d327dae5268c58e6e83a87",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   int i;",
          "554:   int n;",
          "555:   int aw = w<0 ? -w : w;",
          "558:   for(i=n=0; zUtf[i]; i++){",
          "559:     if( (zUtf[i]&0xc0)!=0x80 ){",
          "560:       n++;",
          "",
          "[Removed Lines]",
          "556:   char zBuf[1000];",
          "557:   if( aw>(int)sizeof(zBuf)/3 ) aw = (int)sizeof(zBuf)/3;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c40b8f3daaeb6d59396cdb31c3a1386c03da883",
      "candidate_info": {
        "commit_hash": "2c40b8f3daaeb6d59396cdb31c3a1386c03da883",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c40b8f3daaeb6d59396cdb31c3a1386c03da883",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix compilation issues with MSVC.\n\nFossilOrigin-Name: c5a7e6d2c203ebe5f22ab5c676d33759b542ac57c8bad85d8f561a53bd26917c",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #include <string.h>",
          "83: #include <stdio.h>",
          "84: #include <assert.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419: # define testcase(X)",
          "420: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: #if !defined(SQLITE_DISABLE_INTRINSIC)",
          "429: #  if defined(_MSC_VER) && _MSC_VER>=1400",
          "430: #    if !defined(_WIN32_WCE)",
          "431: #      include <intrin.h>",
          "432: #      pragma intrinsic(_byteswap_ulong)",
          "433: #      pragma intrinsic(_byteswap_uint64)",
          "434: #    else",
          "435: #      include <cmnintrin.h>",
          "436: #    endif",
          "437: #  endif",
          "438: #endif",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d573aa9b1299bc25e46fc8a4b4f7c665263490db86c66f11e2d903dcd7071995",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2273: #ifdef SQLITE_DEBUG",
          "2274:   if( aPermute ){",
          "2275:     int k, mx = 0;",
          "2277:     assert( p1>0 && p1+mx<=(p->nMem+1 - p->nCursor)+1 );",
          "2278:     assert( p2>0 && p2+mx<=(p->nMem+1 - p->nCursor)+1 );",
          "2279:   }else{",
          "",
          "[Removed Lines]",
          "2276:     for(k=0; k<n; k++) if( aPermute[k]>mx ) mx = aPermute[k];",
          "",
          "[Added Lines]",
          "2276:     for(k=0; k<n; k++) if( aPermute[k]>(u32)mx ) mx = aPermute[k];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2623:   pDest = &aMem[pOp->p3];",
          "2624:   memAboutToChange(p, pDest);",
          "2625:   assert( pC!=0 );",
          "2627:   aOffset = pC->aOffset;",
          "2628:   assert( pC->eCurType!=CURTYPE_VTAB );",
          "2629:   assert( pC->eCurType!=CURTYPE_PSEUDO || pC->nullRow );",
          "",
          "[Removed Lines]",
          "2626:   assert( p2<pC->nField );",
          "",
          "[Added Lines]",
          "2626:   assert( p2<(u32)pC->nField );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3812:   }",
          "3813:   if( pOp->p5 & OPFLAG_P2ISREG ){",
          "3814:     assert( p2>0 );",
          "3816:     assert( pOp->opcode==OP_OpenWrite );",
          "3817:     pIn2 = &aMem[p2];",
          "3818:     assert( memIsValid(pIn2) );",
          "",
          "[Removed Lines]",
          "3815:     assert( p2<=(p->nMem+1 - p->nCursor) );",
          "",
          "[Added Lines]",
          "3815:     assert( p2<=(u32)(p->nMem+1 - p->nCursor) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6245:   nRoot = pOp->p2;",
          "6246:   aRoot = pOp->p4.ai;",
          "6247:   assert( nRoot>0 );",
          "6249:   assert( pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) );",
          "6250:   pnErr = &aMem[pOp->p3];",
          "6251:   assert( (pnErr->flags & MEM_Int)!=0 );",
          "",
          "[Removed Lines]",
          "6248:   assert( aRoot[0]==nRoot );",
          "",
          "[Added Lines]",
          "6248:   assert( aRoot[0]==(Pgno)nRoot );",
          "",
          "---------------"
        ]
      }
    }
  ]
}