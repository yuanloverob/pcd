{
  "cve_id": "CVE-2017-5206",
  "cve_desc": "Firejail before 0.9.44.4, when running on a Linux kernel before 4.8, allows context-dependent attackers to bypass a seccomp-based sandbox protection mechanism via the --allow-debuggers argument.",
  "repo": "netblue30/firejail",
  "patch_hash": "6b8dba29d73257311564ee7f27b9b14758cc693e",
  "patch_info": {
    "commit_hash": "6b8dba29d73257311564ee7f27b9b14758cc693e",
    "repo": "netblue30/firejail",
    "commit_url": "https://github.com/netblue30/firejail/commit/6b8dba29d73257311564ee7f27b9b14758cc693e",
    "files": [
      "RELNOTES",
      "src/firejail/main.c",
      "src/man/firejail.txt"
    ],
    "message": "security fix",
    "before_after_code_files": [
      "src/firejail/main.c||src/firejail/main.c"
    ]
  },
  "patch_diff": {
    "src/firejail/main.c||src/firejail/main.c": [
      "File: src/firejail/main.c -> src/firejail/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include <signal.h>",
      "36: #include <time.h>",
      "37: #include <net/if.h>",
      "39: #if 0",
      "40: #include <sys/times.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: #include <sys/utsname.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "803:  for (i = 1; i < argc; i++) {",
      "804:   if (strcmp(argv[i], \"--allow-debuggers\") == 0) {",
      "805:    arg_allow_debuggers = 1;",
      "806:    break;",
      "807:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "807:    struct utsname u;",
      "808:    int rv = uname(&u);",
      "809:    if (rv != 0)",
      "810:     errExit(\"uname\");",
      "811:    int major;",
      "812:    int minor;",
      "813:    if (2 != sscanf(u.release, \"%d.%d\", &major, &minor)) {",
      "814:     fprintf(stderr, \"Error: cannot extract Linux kernel version: %s\\n\", u.version);",
      "815:     exit(1);",
      "816:    }",
      "817:    if (major < 4 || (major == 4 && minor < 8)) {",
      "818:     fprintf(stderr, \"Error: --allow-debuggers is disabled on Linux kernels prior to 4.8. \"",
      "819:      \"A bug in ptrace call allows a full bypass of the seccomp filter. \"",
      "820:      \"Your current kernel version is %d.%d.\\n\", major, minor);",
      "821:     exit(1);",
      "822:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b8dba29d73257311564ee7f27b9b14758cc693e",
      "candidate_info": {
        "commit_hash": "6b8dba29d73257311564ee7f27b9b14758cc693e",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/6b8dba29d73257311564ee7f27b9b14758cc693e",
        "files": [
          "RELNOTES",
          "src/firejail/main.c",
          "src/man/firejail.txt"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/main.c||src/firejail/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/main.c||src/firejail/main.c"
          ],
          "candidate": [
            "src/firejail/main.c||src/firejail/main.c"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/main.c||src/firejail/main.c": [
          "File: src/firejail/main.c -> src/firejail/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <signal.h>",
          "36: #include <time.h>",
          "37: #include <net/if.h>",
          "39: #if 0",
          "40: #include <sys/times.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <sys/utsname.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803:  for (i = 1; i < argc; i++) {",
          "804:   if (strcmp(argv[i], \"--allow-debuggers\") == 0) {",
          "805:    arg_allow_debuggers = 1;",
          "806:    break;",
          "807:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "807:    struct utsname u;",
          "808:    int rv = uname(&u);",
          "809:    if (rv != 0)",
          "810:     errExit(\"uname\");",
          "811:    int major;",
          "812:    int minor;",
          "813:    if (2 != sscanf(u.release, \"%d.%d\", &major, &minor)) {",
          "814:     fprintf(stderr, \"Error: cannot extract Linux kernel version: %s\\n\", u.version);",
          "815:     exit(1);",
          "816:    }",
          "817:    if (major < 4 || (major == 4 && minor < 8)) {",
          "818:     fprintf(stderr, \"Error: --allow-debuggers is disabled on Linux kernels prior to 4.8. \"",
          "819:      \"A bug in ptrace call allows a full bypass of the seccomp filter. \"",
          "820:      \"Your current kernel version is %d.%d.\\n\", major, minor);",
          "821:     exit(1);",
          "822:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9aa81442afc6e00ca177bf0e3e7a025195102f7d",
      "candidate_info": {
        "commit_hash": "9aa81442afc6e00ca177bf0e3e7a025195102f7d",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/9aa81442afc6e00ca177bf0e3e7a025195102f7d",
        "files": [
          "src/firejail/firejail.h",
          "src/firejail/fs_home.c",
          "src/firejail/pulseaudio.c",
          "src/firejail/util.c"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/fs_home.c||src/firejail/fs_home.c",
          "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c",
          "src/firejail/util.c||src/firejail/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "450: void logargs(int argc, char **argv) ;",
          "451: void logerr(const char *msg);",
          "452: int copy_file(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode);",
          "453: int is_dir(const char *fname);",
          "454: int is_link(const char *fname);",
          "455: char *line_remove_spaces(const char *buf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453: void copy_file_as_user(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode);",
          "454: void touch_file_as_user(const char *fname, uid_t uid, gid_t gid, mode_t mode);",
          "",
          "---------------"
        ],
        "src/firejail/fs_home.c||src/firejail/fs_home.c": [
          "File: src/firejail/fs_home.c -> src/firejail/fs_home.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   if (stat(fname, &s) == 0)",
          "44:    return;",
          "45:   if (stat(\"/etc/skel/.zshrc\", &s) == 0) {",
          "49:   }",
          "58:   }",
          "59:   free(fname);",
          "60:  }",
          "",
          "[Removed Lines]",
          "46:    if (copy_file(\"/etc/skel/.zshrc\", fname, u, g, 0644) == 0) {",
          "47:     fs_logger(\"clone /etc/skel/.zshrc\");",
          "48:    }",
          "50:   else { //",
          "51:    FILE *fp = fopen(fname, \"w\");",
          "52:    if (fp) {",
          "53:     fprintf(fp, \"\\n\");",
          "54:     SET_PERMS_STREAM(fp, u, g, S_IRUSR | S_IWUSR);",
          "55:     fclose(fp);",
          "56:     fs_logger2(\"touch\", fname);",
          "57:    }",
          "",
          "[Added Lines]",
          "45:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "46:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "47:    exit(1);",
          "48:   }",
          "50:    copy_file_as_user(\"/etc/skel/.zshrc\", fname, u, g, 0644);",
          "51:    fs_logger(\"clone /etc/skel/.zshrc\");",
          "53:   else {",
          "54:    touch_file_as_user(fname, u, g, 0644);",
          "55:    fs_logger2(\"touch\", fname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   if (asprintf(&fname, \"%s/.cshrc\", homedir) == -1)",
          "65:    errExit(\"asprintf\");",
          "66:   struct stat s;",
          "68:   if (stat(fname, &s) == 0)",
          "69:    return;",
          "70:   if (stat(\"/etc/skel/.cshrc\", &s) == 0) {",
          "74:   }",
          "84:   }",
          "85:   free(fname);",
          "86:  }",
          "",
          "[Removed Lines]",
          "71:    if (copy_file(\"/etc/skel/.cshrc\", fname, u, g, 0644) == 0) {",
          "72:     fs_logger(\"clone /etc/skel/.cshrc\");",
          "73:    }",
          "75:   else { //",
          "77:    FILE *fp = fopen(fname, \"w\");",
          "78:    if (fp) {",
          "79:     fprintf(fp, \"\\n\");",
          "80:     SET_PERMS_STREAM(fp, u, g, S_IRUSR | S_IWUSR);",
          "81:     fclose(fp);",
          "82:     fs_logger2(\"touch\", fname);",
          "83:    }",
          "",
          "[Added Lines]",
          "69:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "70:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "71:    exit(1);",
          "72:   }",
          "74:    copy_file_as_user(\"/etc/skel/.cshrc\", fname, u, g, 0644);",
          "75:    fs_logger(\"clone /etc/skel/.cshrc\");",
          "77:   else {",
          "78:    touch_file_as_user(fname, u, g, 0644);",
          "79:    fs_logger2(\"touch\", fname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:   if (stat(fname, &s) == 0)",
          "95:    return;",
          "96:   if (stat(\"/etc/skel/.bashrc\", &s) == 0) {",
          "100:   }",
          "101:   free(fname);",
          "102:  }",
          "",
          "[Removed Lines]",
          "97:    if (copy_file(\"/etc/skel/.bashrc\", fname, u, g, 0644) == 0) {",
          "98:     fs_logger(\"clone /etc/skel/.bashrc\");",
          "99:    }",
          "",
          "[Added Lines]",
          "92:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "93:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "94:    exit(1);",
          "95:   }",
          "97:    copy_file_as_user(\"/etc/skel/.bashrc\", fname, u, g, 0644);",
          "98:    fs_logger(\"clone /etc/skel/.bashrc\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:    return 0;",
          "125:   }",
          "148:   return 1; // file copied",
          "149:  }",
          "",
          "[Removed Lines]",
          "127:   pid_t child = fork();",
          "128:   if (child < 0)",
          "129:    errExit(\"fork\");",
          "130:   if (child == 0) {",
          "132:    drop_privs(0);",
          "135:    int rv = copy_file(src, dest, getuid(), getgid(), 0600);",
          "136:    if (rv)",
          "137:     fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "138:    else {",
          "139:     fs_logger2(\"clone\", dest);",
          "140:    }",
          "141: #ifdef HAVE_GCOV",
          "142:    __gcov_flush();",
          "143: #endif",
          "144:    _exit(0);",
          "145:   }",
          "147:   waitpid(child, NULL, 0);",
          "",
          "[Added Lines]",
          "126:   copy_file_as_user(src, dest, getuid(), getgid(), 0600);",
          "127:   fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:    free(rp);",
          "183:   }",
          "206:   return 1; // file copied",
          "207:  }",
          "",
          "[Removed Lines]",
          "185:   pid_t child = fork();",
          "186:   if (child < 0)",
          "187:    errExit(\"fork\");",
          "188:   if (child == 0) {",
          "190:    drop_privs(0);",
          "193:    int rv = copy_file(src, dest, getuid(), getgid(), 0644);",
          "194:    if (rv)",
          "195:     fprintf(stderr, \"Warning: cannot transfer .asoundrc in private home directory\\n\");",
          "196:    else {",
          "197:     fs_logger2(\"clone\", dest);",
          "198:    }",
          "199: #ifdef HAVE_GCOV",
          "200:    __gcov_flush();",
          "201: #endif",
          "202:    _exit(0);",
          "203:   }",
          "205:   waitpid(child, NULL, 0);",
          "",
          "[Added Lines]",
          "166:   copy_file_as_user(src, dest, getuid(), getgid(), 0644);",
          "167:   fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:   exit(1);",
          "223:  }",
          "248:  unlink(src);",
          "",
          "[Removed Lines]",
          "225:  pid_t child = fork();",
          "226:  if (child < 0)",
          "227:   errExit(\"fork\");",
          "228:  if (child == 0) {",
          "230:   drop_privs(0);",
          "233:   int rv = copy_file(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "234:   if (rv)",
          "235:    fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "236:   else {",
          "237:    fs_logger2(\"clone\", dest);",
          "238:   }",
          "239: #ifdef HAVE_GCOV",
          "240:   __gcov_flush();",
          "241: #endif",
          "242:   _exit(0);",
          "243:  }",
          "245:  waitpid(child, NULL, 0);",
          "",
          "[Added Lines]",
          "187:  copy_file_as_user(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "188:  fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "261:   exit(1);",
          "262:  }",
          "287:  unlink(src);",
          "",
          "[Removed Lines]",
          "264:  pid_t child = fork();",
          "265:  if (child < 0)",
          "266:   errExit(\"fork\");",
          "267:  if (child == 0) {",
          "269:   drop_privs(0);",
          "272:   int rv = copy_file(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "273:   if (rv)",
          "274:    fprintf(stderr, \"Warning: cannot transfer .asoundrc in private home directory\\n\");",
          "275:   else {",
          "276:    fs_logger2(\"clone\", dest);",
          "277:   }",
          "278: #ifdef HAVE_GCOV",
          "279:   __gcov_flush();",
          "280: #endif",
          "281:   _exit(0);",
          "282:  }",
          "284:  waitpid(child, NULL, 0);",
          "",
          "[Added Lines]",
          "207:  copy_file_as_user(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "208:  fs_logger2(\"clone\", dest);",
          "",
          "---------------"
        ],
        "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c": [
          "File: src/firejail/pulseaudio.c -> src/firejail/pulseaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <sys/stat.h>",
          "23: #include <sys/mount.h>",
          "24: #include <dirent.h>",
          "26: static void disable_file(const char *path, const char *file) {",
          "27:  assert(file);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <sys/wait.h>",
          "",
          "---------------"
        ],
        "src/firejail/util.c||src/firejail/util.c": [
          "File: src/firejail/util.c -> src/firejail/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <grp.h>",
          "29: #include <sys/ioctl.h>",
          "30: #include <termios.h>",
          "32: #define MAX_GROUPS 1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <sys/wait.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:  return 0;",
          "219: }",
          "223: int is_dir(const char *fname) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: void copy_file_as_user(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode) {",
          "224:  pid_t child = fork();",
          "225:  if (child < 0)",
          "226:   errExit(\"fork\");",
          "227:  if (child == 0) {",
          "229:   drop_privs(0);",
          "232:   int rv = copy_file(srcname, destname, uid, gid, mode);",
          "233:   if (rv)",
          "234:    fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "235: #ifdef HAVE_GCOV",
          "236:   __gcov_flush();",
          "237: #endif",
          "238:   _exit(0);",
          "239:  }",
          "241:  waitpid(child, NULL, 0);",
          "242: }",
          "245: void touch_file_as_user(const char *fname, uid_t uid, gid_t gid, mode_t mode) {",
          "246:  pid_t child = fork();",
          "247:  if (child < 0)",
          "248:   errExit(\"fork\");",
          "249:  if (child == 0) {",
          "251:   drop_privs(0);",
          "253:   FILE *fp = fopen(fname, \"w\");",
          "254:   if (fp) {",
          "255:    fprintf(fp, \"\\n\");",
          "256:    SET_PERMS_STREAM(fp, uid, gid, mode);",
          "257:    fclose(fp);",
          "258:   }",
          "259: #ifdef HAVE_GCOV",
          "260:   __gcov_flush();",
          "261: #endif",
          "262:   _exit(0);",
          "263:  }",
          "265:  waitpid(child, NULL, 0);",
          "266: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85517885bece9209bbcace80fec115b0126263ad",
      "candidate_info": {
        "commit_hash": "85517885bece9209bbcace80fec115b0126263ad",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/85517885bece9209bbcace80fec115b0126263ad",
        "files": [
          "RELNOTES",
          "src/firejail/main.c",
          "src/man/firejail.txt"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/main.c||src/firejail/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/main.c||src/firejail/main.c"
          ],
          "candidate": [
            "src/firejail/main.c||src/firejail/main.c"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/main.c||src/firejail/main.c": [
          "File: src/firejail/main.c -> src/firejail/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <signal.h>",
          "36: #include <time.h>",
          "37: #include <net/if.h>",
          "39: #if 0",
          "40: #include <sys/times.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <sys/utsname.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "818:  if (check_arg(argc, argv, \"--quiet\"))",
          "819:   arg_quiet = 1;",
          "821:   arg_allow_debuggers = 1;",
          "824:  EUID_INIT();",
          "",
          "[Removed Lines]",
          "820:  if (check_arg(argc, argv, \"--allow-debuggers\"))",
          "",
          "[Added Lines]",
          "821:  if (check_arg(argc, argv, \"--allow-debuggers\")) {",
          "823:   struct utsname u;",
          "824:   int rv = uname(&u);",
          "825:   if (rv != 0)",
          "826:    errExit(\"uname\");",
          "827:   int major;",
          "828:   int minor;",
          "829:   if (2 != sscanf(u.release, \"%d.%d\", &major, &minor)) {",
          "830:    fprintf(stderr, \"Error: cannot extract Linux kernel version: %s\\n\", u.version);",
          "831:    exit(1);",
          "832:   }",
          "833:   if (major < 4 || (major == 4 && minor < 8)) {",
          "834:    fprintf(stderr, \"Error: --allow-debuggers is disabled on Linux kernels prior to 4.8. \"",
          "835:     \"A bug in ptrace call allows a full bypass of the seccomp filter. \"",
          "836:     \"Your current kernel version is %d.%d.\\n\", major, minor);",
          "837:    exit(1);",
          "838:   }",
          "841:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "903fd8a0789ca3cc3c21d84cd0282481515592ef",
      "candidate_info": {
        "commit_hash": "903fd8a0789ca3cc3c21d84cd0282481515592ef",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/903fd8a0789ca3cc3c21d84cd0282481515592ef",
        "files": [
          "src/firejail/firejail.h",
          "src/firejail/fs_home.c",
          "src/firejail/util.c"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/fs_home.c||src/firejail/fs_home.c",
          "src/firejail/util.c||src/firejail/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: void logargs(int argc, char **argv) ;",
          "390: void logerr(const char *msg);",
          "391: int copy_file(const char *srcname, const char *destname);",
          "392: int is_dir(const char *fname);",
          "393: int is_link(const char *fname);",
          "394: char *line_remove_spaces(const char *buf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392: void copy_file_as_user(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode);",
          "393: void touch_file_as_user(const char *fname, uid_t uid, gid_t gid, mode_t mode);",
          "",
          "---------------"
        ],
        "src/firejail/fs_home.c||src/firejail/fs_home.c": [
          "File: src/firejail/fs_home.c -> src/firejail/fs_home.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   if (stat(fname, &s) == 0)",
          "42:    return;",
          "43:   if (stat(\"/etc/skel/.zshrc\", &s) == 0) {",
          "53:   }",
          "65:   }",
          "66:   free(fname);",
          "67:  }",
          "",
          "[Removed Lines]",
          "44:    if (is_link(\"/etc/skel/.zshrc\")) {",
          "45:     fprintf(stderr, \"Error: invalid /etc/skel/.zshrc file\\n\");",
          "46:     exit(1);",
          "47:    }",
          "48:    if (copy_file(\"/etc/skel/.zshrc\", fname) == 0) {",
          "49:     if (chown(fname, u, g) == -1)",
          "50:      errExit(\"chown\");",
          "51:     fs_logger(\"clone /etc/skel/.zshrc\");",
          "52:    }",
          "54:   else { //",
          "55:    FILE *fp = fopen(fname, \"w\");",
          "56:    if (fp) {",
          "57:     fprintf(fp, \"\\n\");",
          "58:     fclose(fp);",
          "59:     if (chown(fname, u, g) == -1)",
          "60:      errExit(\"chown\");",
          "61:     if (chmod(fname, S_IRUSR | S_IWUSR) < 0)",
          "62:      errExit(\"chown\");",
          "63:     fs_logger2(\"touch\", fname);",
          "64:    }",
          "",
          "[Added Lines]",
          "43:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "44:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "45:    exit(1);",
          "46:   }",
          "48:    copy_file_as_user(\"/etc/skel/.zshrc\", fname, u, g, 0644); // regular user",
          "49:    fs_logger(\"clone /etc/skel/.zshrc\");",
          "51:   else {",
          "52:    touch_file_as_user(fname, u, g, 0644);",
          "53:    fs_logger2(\"touch\", fname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   if (stat(fname, &s) == 0)",
          "76:    return;",
          "77:   if (stat(\"/etc/skel/.cshrc\", &s) == 0) {",
          "87:   }",
          "100:   }",
          "101:   free(fname);",
          "102:  }",
          "",
          "[Removed Lines]",
          "78:    if (is_link(\"/etc/skel/.cshrc\")) {",
          "79:     fprintf(stderr, \"Error: invalid /etc/skel/.cshrc file\\n\");",
          "80:     exit(1);",
          "81:    }",
          "82:    if (copy_file(\"/etc/skel/.cshrc\", fname) == 0) {",
          "83:     if (chown(fname, u, g) == -1)",
          "84:      errExit(\"chown\");",
          "85:     fs_logger(\"clone /etc/skel/.cshrc\");",
          "86:    }",
          "88:   else { //",
          "90:    FILE *fp = fopen(fname, \"w\");",
          "91:    if (fp) {",
          "92:     fprintf(fp, \"\\n\");",
          "93:     fclose(fp);",
          "94:     if (chown(fname, u, g) == -1)",
          "95:      errExit(\"chown\");",
          "96:     if (chmod(fname, S_IRUSR | S_IWUSR) < 0)",
          "97:      errExit(\"chown\");",
          "98:     fs_logger2(\"touch\", fname);",
          "99:    }",
          "",
          "[Added Lines]",
          "66:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "67:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "68:    exit(1);",
          "69:   }",
          "71:    copy_file_as_user(\"/etc/skel/.cshrc\", fname, u, g, 0644); // regular user",
          "72:    fs_logger(\"clone /etc/skel/.cshrc\");",
          "74:   else {",
          "75:    touch_file_as_user(fname, u, g, 0644);",
          "76:    fs_logger2(\"touch\", fname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:    errExit(\"asprintf\");",
          "108:   struct stat s;",
          "111:    return;",
          "112:   if (stat(\"/etc/skel/.bashrc\", &s) == 0) {",
          "123:   }",
          "124:   free(fname);",
          "125:  }",
          "",
          "[Removed Lines]",
          "110:   if (stat(fname, &s) == 0)",
          "113:    if (is_link(\"/etc/skel/.bashrc\")) {",
          "114:     fprintf(stderr, \"Error: invalid /etc/skel/.bashrc file\\n\");",
          "115:     exit(1);",
          "116:    }",
          "117:    if (copy_file(\"/etc/skel/.bashrc\", fname) == 0) {",
          "119:     if (chown(fname, u, g) == -1)",
          "120:      errExit(\"chown\");",
          "121:     fs_logger(\"clone /etc/skel/.bashrc\");",
          "122:    }",
          "",
          "[Added Lines]",
          "87:   if (stat(fname, &s) == 0)",
          "89:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "90:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "91:    exit(1);",
          "92:   }",
          "94:    copy_file_as_user(\"/etc/skel/.bashrc\", fname, u, g, 0644); // regular user",
          "95:    fs_logger(\"clone /etc/skel/.bashrc\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:  char *src;",
          "133:  char *dest = RUN_XAUTHORITY_FILE;",
          "135:  FILE *fp = fopen(dest, \"w\");",
          "136:  if (fp) {",
          "137:   fprintf(fp, \"\\n\");",
          "138:   SET_PERMS_STREAM(fp, getuid(), getgid(), 0600);",
          "139:   fclose(fp);",
          "140:  }",
          "142:  if (asprintf(&src, \"%s/.Xauthority\", cfg.homedir) == -1)",
          "143:   errExit(\"asprintf\");",
          "145:  struct stat s;",
          "146:  if (stat(src, &s) == 0) {",
          "147:   if (is_link(src)) {",
          "168:   }",
          "176:   return 1; // file copied",
          "177:  }",
          "",
          "[Removed Lines]",
          "148:    fprintf(stderr, \"Error: invalid .Xauthority file\\n\");",
          "149:    exit(1);",
          "150:   }",
          "152:   pid_t child = fork();",
          "153:   if (child < 0)",
          "154:    errExit(\"fork\");",
          "155:   if (child == 0) {",
          "157:    drop_privs(0);",
          "160:    int rv = copy_file(src, dest);",
          "161:    if (rv)",
          "162:     fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "163:    else {",
          "164:     fs_logger2(\"clone\", dest);",
          "165:    }",
          "167:    _exit(0);",
          "170:   waitpid(child, NULL, 0);",
          "172:   if (chown(dest, getuid(), getgid()) == -1)",
          "173:    errExit(\"fchown\");",
          "174:   if (chmod(dest, 0600) == -1)",
          "175:    errExit(\"fchmod\");",
          "",
          "[Added Lines]",
          "121:    fprintf(stderr, \"Warning: invalid .Xauthority file\\n\");",
          "122:    return 0;",
          "125:   copy_file_as_user(src, dest, getuid(), getgid(), 0600); // regular user",
          "126:   fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186:  char *src;",
          "187:  char *dest = RUN_ASOUNDRC_FILE;",
          "189:  FILE *fp = fopen(dest, \"w\");",
          "190:  if (fp) {",
          "191:   fprintf(fp, \"\\n\");",
          "192:   SET_PERMS_STREAM(fp, getuid(), getgid(), 0644);",
          "193:   fclose(fp);",
          "194:  }",
          "196:  if (asprintf(&src, \"%s/.asoundrc\", cfg.homedir) == -1)",
          "197:   errExit(\"asprintf\");",
          "199:  struct stat s;",
          "201:   if (is_link(src)) {",
          "219:    }",
          "221:   }",
          "229:   return 1; // file copied",
          "230:  }",
          "",
          "[Removed Lines]",
          "200:  if (stat(src, &s) == 0) {",
          "202:    fprintf(stderr, \"Error: invalid .asoundrc file\\n\");",
          "203:    exit(1);",
          "204:   }",
          "206:   pid_t child = fork();",
          "207:   if (child < 0)",
          "208:    errExit(\"fork\");",
          "209:   if (child == 0) {",
          "211:    drop_privs(0);",
          "214:    int rv = copy_file(src, dest);",
          "215:    if (rv)",
          "216:     fprintf(stderr, \"Warning: cannot transfer .asoundrc in private home directory\\n\");",
          "217:    else {",
          "218:     fs_logger2(\"clone\", dest);",
          "220:    _exit(0);",
          "223:   waitpid(child, NULL, 0);",
          "225:   if (chown(dest, getuid(), getgid()) == -1)",
          "226:    errExit(\"fchown\");",
          "227:   if (chmod(dest, 0644) == -1)",
          "228:    errExit(\"fchmod\");",
          "",
          "[Added Lines]",
          "151:  if (stat(src, &s) == 0) {",
          "155:    char* rp = realpath(src, NULL);",
          "156:    if (!rp) {",
          "157:     fprintf(stderr, \"Error: Cannot access %s\\n\", src);",
          "158:     exit(1);",
          "159:    }",
          "160:    if (strncmp(rp, cfg.homedir, strlen(cfg.homedir)) != 0) {",
          "161:     fprintf(stderr, \"Error: .asoundrc is a symbolic link pointing to a file outside home directory\\n\");",
          "162:     exit(1);",
          "164:    free(rp);",
          "167:   copy_file_as_user(src, dest, getuid(), getgid(), 0644); // regular user",
          "168:   fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "238:  char *dest;",
          "239:  if (asprintf(&dest, \"%s/.Xauthority\", cfg.homedir) == -1)",
          "240:   errExit(\"asprintf\");",
          "243:  if (is_link(dest)) {",
          "244:   fprintf(stderr, \"Error: %s is a symbolic link\\n\", dest);",
          "245:   exit(1);",
          "246:  }",
          "274:  unlink(src);",
          "275: }",
          "",
          "[Removed Lines]",
          "248:  pid_t child = fork();",
          "249:  if (child < 0)",
          "250:   errExit(\"fork\");",
          "251:  if (child == 0) {",
          "253:   drop_privs(0);",
          "256:   int rv = copy_file(src, dest);",
          "257:   if (rv)",
          "258:    fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "259:   else {",
          "260:    fs_logger2(\"clone\", dest);",
          "261:   }",
          "262:   _exit(0);",
          "263:  }",
          "265:  waitpid(child, NULL, 0);",
          "268:  if (chown(dest, getuid(), getgid()) < 0)",
          "269:   errExit(\"chown\");",
          "270:  if (chmod(dest, S_IRUSR | S_IWUSR) < 0)",
          "271:   errExit(\"chmod\");",
          "",
          "[Added Lines]",
          "188:  copy_file_as_user(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR); // regular user",
          "189:  fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "280:  char *dest;",
          "281:  if (asprintf(&dest, \"%s/.asoundrc\", cfg.homedir) == -1)",
          "282:   errExit(\"asprintf\");",
          "285:  if (is_link(dest)) {",
          "286:   fprintf(stderr, \"Error: %s is a symbolic link\\n\", dest);",
          "287:   exit(1);",
          "288:  }",
          "316:  unlink(src);",
          "",
          "[Removed Lines]",
          "290:  pid_t child = fork();",
          "291:  if (child < 0)",
          "292:   errExit(\"fork\");",
          "293:  if (child == 0) {",
          "295:   drop_privs(0);",
          "298:   int rv = copy_file(src, dest);",
          "299:   if (rv)",
          "300:    fprintf(stderr, \"Warning: cannot transfer .asoundrc in private home directory\\n\");",
          "301:   else {",
          "302:    fs_logger2(\"clone\", dest);",
          "303:   }",
          "304:   _exit(0);",
          "305:  }",
          "307:  waitpid(child, NULL, 0);",
          "310:  if (chown(dest, getuid(), getgid()) < 0)",
          "311:   errExit(\"chown\");",
          "312:  if (chmod(dest, S_IRUSR | S_IWUSR) < 0)",
          "313:   errExit(\"chmod\");",
          "",
          "[Added Lines]",
          "208:  copy_file_as_user(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR); // regular user",
          "209:  fs_logger2(\"clone\", dest);",
          "",
          "---------------"
        ],
        "src/firejail/util.c||src/firejail/util.c": [
          "File: src/firejail/util.c -> src/firejail/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:  return 0;",
          "214: }",
          "217: int is_dir(const char *fname) {",
          "218:  assert(fname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: void copy_file_as_user(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode) {",
          "218:  pid_t child = fork();",
          "219:  if (child < 0)",
          "220:   errExit(\"fork\");",
          "221:  if (child == 0) {",
          "223:   drop_privs(0);",
          "226:   int rv = copy_file(srcname, destname); // already a regular user",
          "227:   if (rv)",
          "228:    fprintf(stderr, \"Warning: cannot copy %s\\n\", srcname);",
          "229:   else {",
          "230:    if (chown(destname, uid, gid) == -1)",
          "231:     errExit(\"fchown\");",
          "232:    if (chmod(destname, mode) == -1)",
          "233:     errExit(\"fchmod\");",
          "234:   }",
          "235:   _exit(0);",
          "236:  }",
          "238:  waitpid(child, NULL, 0);",
          "239: }",
          "242: void touch_file_as_user(const char *fname, uid_t uid, gid_t gid, mode_t mode) {",
          "243:  pid_t child = fork();",
          "244:  if (child < 0)",
          "245:   errExit(\"fork\");",
          "246:  if (child == 0) {",
          "248:   drop_privs(0);",
          "250:   FILE *fp = fopen(fname, \"w\");",
          "251:   if (fp) {",
          "252:    fprintf(fp, \"\\n\");",
          "253:    SET_PERMS_STREAM(fp, uid, gid, mode);",
          "254:    fclose(fp);",
          "255:   }",
          "256:   _exit(0);",
          "257:  }",
          "259:  waitpid(child, NULL, 0);",
          "260: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60d4b478f65c60bcc825bb56f85fd6c4fd48b250",
      "candidate_info": {
        "commit_hash": "60d4b478f65c60bcc825bb56f85fd6c4fd48b250",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/60d4b478f65c60bcc825bb56f85fd6c4fd48b250",
        "files": [
          "RELNOTES",
          "src/firejail/fs_home.c",
          "src/firejail/pulseaudio.c"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/fs_home.c||src/firejail/fs_home.c",
          "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/firejail/fs_home.c||src/firejail/fs_home.c": [
          "File: src/firejail/fs_home.c -> src/firejail/fs_home.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:  char *dest;",
          "168:  if (asprintf(&dest, \"%s/.Xauthority\", cfg.homedir) == -1)",
          "169:   errExit(\"asprintf\");",
          "171:  int rv = copy_file(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "172:  if (rv)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:  if (is_link(dest)) {",
          "173:   fprintf(stderr, \"Error: %s is a symbolic link\\n\", dest);",
          "174:   exit(1);",
          "175:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:  char *dest;",
          "186:  if (asprintf(&dest, \"%s/.asoundrc\", cfg.homedir) == -1)",
          "187:   errExit(\"asprintf\");",
          "189:  int rv = copy_file(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR);",
          "190:  if (rv)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:  if (is_link(dest)) {",
          "198:   fprintf(stderr, \"Error: %s is a symbolic link\\n\", dest);",
          "199:   exit(1);",
          "200:  }",
          "",
          "---------------"
        ],
        "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c": [
          "File: src/firejail/pulseaudio.c -> src/firejail/pulseaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     {;} // do nothing",
          "134:   }",
          "135:  }",
          "136:  free(dir1);",
          "137:  if (asprintf(&dir1, \"%s/.config/pulse\", cfg.homedir) == -1)",
          "138:   errExit(\"asprintf\");",
          "139:  if (stat(dir1, &s) == -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:  else {",
          "138:   if (s.st_uid != getuid()) {",
          "139:    fprintf(stderr, \"Error: user .config directory is not owned by the current user\\n\");",
          "140:    exit(1);",
          "141:   }",
          "142:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     {;} // do nothing",
          "145:   }",
          "146:  }",
          "147:  free(dir1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:  else {",
          "157:   if (s.st_uid != getuid()) {",
          "158:    fprintf(stderr, \"Error: user .config/pulse directory is not owned by the current user\\n\");",
          "159:    exit(1);",
          "160:   }",
          "161:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}