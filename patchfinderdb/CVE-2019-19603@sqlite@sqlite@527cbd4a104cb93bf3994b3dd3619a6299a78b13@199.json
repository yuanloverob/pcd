{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4d342827d60d9bb7a63771395c5f36ac53f7f9f8",
      "candidate_info": {
        "commit_hash": "4d342827d60d9bb7a63771395c5f36ac53f7f9f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4d342827d60d9bb7a63771395c5f36ac53f7f9f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/shell1.test"
        ],
        "message": "Fix the shell1.test test for the new format of the .backup command.\n\nFossilOrigin-Name: 9748d7995bc1dd632d66d2d326048d50e29c6f5e6993d5a6294d14421d2cb72f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ab1e58fac9e3f9d7d90cefb39f8f145d211d38ec0cb393208c4531cc646056c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: do_test shell1-3.1.4 {",
          "257:   # too many arguments",
          "258:   catchcmd \"test.db\" \".backup FOO BAR BAD\"",
          "261: # .bail ON|OFF           Stop after hitting an error.  Default OFF",
          "262: do_test shell1-3.2.1 {",
          "",
          "[Removed Lines]",
          "259: } {1 {Usage: .backup ?DB? ?--append? FILENAME}}",
          "",
          "[Added Lines]",
          "259: } {1 {Usage: .backup ?DB? ?OPTIONS? FILENAME}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a9082f6d773fad00926f64650601104827bd319",
      "candidate_info": {
        "commit_hash": "1a9082f6d773fad00926f64650601104827bd319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a9082f6d773fad00926f64650601104827bd319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/gencol1.test"
        ],
        "message": "Omit the optimization that reduces the column-count on rowid-table cursors when the table has generated columns, because we do not know what columns the generator expressions might try to access.\n\nFossilOrigin-Name: e6c96ed91e7a96d2bd30ea9df132644ac02d5a321a62f81f8f3984a8e49ed94b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:       assert( pTabItem->iCursor==pLevel->iTabCur );",
          "5015:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS-1 );",
          "5016:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS );",
          "5018:         Bitmask b = pTabItem->colUsed;",
          "5019:         int n = 0;",
          "5020:         for(; b; b=b>>1, n++){}",
          "",
          "[Removed Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol<BMS && HasRowid(pTab) ){",
          "",
          "[Added Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF",
          "5018:        && pTab->nCol<BMS",
          "5019:        && (pTab->tabFlags & (TF_HasGenerated|TF_WithoutRowid))==0",
          "5020:       ){",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   REPLACE INTO t0(c0,c2,c3) VALUES(0,0,0),(0,0,0);",
          "177: } {1 {FOREIGN KEY constraint failed}}",
          "179: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: # 2019-11-01 Problem found while adding new foreign key test cases in TH3.",
          "180: db close",
          "181: sqlite3 db :memory:",
          "182: do_execsql_test gencol1-5.100 {",
          "183:   PRAGMA foreign_keys=ON;",
          "184:   CREATE TABLE t1(",
          "185:     gcb AS (b*1),",
          "186:     a INTEGER PRIMARY KEY,",
          "187:     gcc AS (c+0),",
          "188:     b UNIQUE,",
          "189:     gca AS (1*a+0),",
          "190:     c UNIQUE",
          "191:   ) WITHOUT ROWID;",
          "192:   INSERT INTO t1 VALUES(1,2,3);",
          "193:   INSERT INTO t1 VALUES(4,5,6);",
          "194:   INSERT INTO t1 VALUES(7,8,9);",
          "195:   CREATE TABLE t1a(",
          "196:     gcx AS (x+0) REFERENCES t1(a) ON DELETE CASCADE,",
          "197:     id,",
          "198:     x,",
          "199:     gcid AS (1*id)",
          "200:   );",
          "201:   INSERT INTO t1a VALUES(1, 1);",
          "202:   INSERT INTO t1a VALUES(2, 4);",
          "203:   INSERT INTO t1a VALUES(3, 7);",
          "204:   DELETE FROM t1 WHERE b=5;",
          "205:   SELECT id,x,'|' FROM t1a ORDER BY id;",
          "206: } {1 1 | 3 7 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b65e5919d3f36d807d9f50e5ef649eacc77e0fe",
      "candidate_info": {
        "commit_hash": "8b65e5919d3f36d807d9f50e5ef649eacc77e0fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b65e5919d3f36d807d9f50e5ef649eacc77e0fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/check.test",
          "test/checkfault.test"
        ],
        "message": "When processing a BETWEEN or CASE expression, avoid transforming a node of the original expression into a TK_REGISTER node. Instead, take a copy and use it instead. Fix for [1be72aab9].\n\nFossilOrigin-Name: 7ef7b23cbb1b9ace9f853238d9133320c153e6c3417e6823ab6394ee1fe56358",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/check.test||test/check.test",
          "test/checkfault.test||test/checkfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84a51a755c18ac8253080db6eec505df894ee3b1e97cfa8e61039ac38001e270",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1086:   return EXPR_FULLSIZE;",
          "1087: }",
          "",
          "[Removed Lines]",
          "1094: static void exprNodeCopy(Expr *pDest, Expr *pSrc){",
          "1095:   memset(pDest, 0, sizeof(Expr));",
          "1096:   memcpy(pDest, pSrc, exprStructSize(pSrc));",
          "1097: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4052:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );",
          "4053:       assert(pExpr->x.pList->nExpr > 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4041:       Expr *pDel = 0;",
          "4042:       sqlite3 *db = pParse->db;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4056:       nExpr = pEList->nExpr;",
          "4057:       endLabel = sqlite3VdbeMakeLabel(pParse);",
          "4058:       if( (pX = pExpr->pLeft)!=0 ){",
          "4060:         testcase( pX->op==TK_COLUMN );",
          "4062:         testcase( regFree1==0 );",
          "4063:         memset(&opCompare, 0, sizeof(opCompare));",
          "4064:         opCompare.op = TK_EQ;",
          "4066:         pTest = &opCompare;",
          "",
          "[Removed Lines]",
          "4059:         exprNodeCopy(&tempX, pX);",
          "4061:         exprToRegister(&tempX, exprCodeVector(pParse, &tempX, &regFree1));",
          "4065:         opCompare.pLeft = &tempX;",
          "",
          "[Added Lines]",
          "4051:         pDel = sqlite3ExprDup(db, pX, 0);",
          "4052:         if( db->mallocFailed ){",
          "4053:           sqlite3ExprDelete(db, pDel);",
          "4054:           break;",
          "4055:         }",
          "4057:         exprToRegister(pDel, exprCodeVector(pParse, pDel, &regFree1));",
          "4061:         opCompare.pLeft = pDel;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4090:       }else{",
          "4091:         sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "4092:       }",
          "4093:       sqlite3VdbeResolveLabel(v, endLabel);",
          "4094:       break;",
          "4095:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4089:       sqlite3ExprDelete(db, pDel);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4373: ){",
          "4380:   memset(&compLeft, 0, sizeof(Expr));",
          "4381:   memset(&compRight, 0, sizeof(Expr));",
          "4382:   memset(&exprAnd, 0, sizeof(Expr));",
          "4384:   assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "4406:   }",
          "4410:   testcase( xJump==sqlite3ExprIfTrue  && jumpIfNull==0 && regFree1==0 );",
          "",
          "[Removed Lines]",
          "4385:   exprNodeCopy(&exprX, pExpr->pLeft);",
          "4386:   exprAnd.op = TK_AND;",
          "4387:   exprAnd.pLeft = &compLeft;",
          "4388:   exprAnd.pRight = &compRight;",
          "4389:   compLeft.op = TK_GE;",
          "4390:   compLeft.pLeft = &exprX;",
          "4391:   compLeft.pRight = pExpr->x.pList->a[0].pExpr;",
          "4392:   compRight.op = TK_LE;",
          "4393:   compRight.pLeft = &exprX;",
          "4394:   compRight.pRight = pExpr->x.pList->a[1].pExpr;",
          "4395:   exprToRegister(&exprX, exprCodeVector(pParse, &exprX, &regFree1));",
          "4396:   if( xJump ){",
          "4397:     xJump(pParse, &exprAnd, dest, jumpIfNull);",
          "4398:   }else{",
          "4404:     exprX.flags |= EP_FromJoin;",
          "4405:     sqlite3ExprCodeTarget(pParse, &exprAnd, dest);",
          "4407:   sqlite3ReleaseTempReg(pParse, regFree1);",
          "",
          "[Added Lines]",
          "4375:   Expr *pDel = 0;",
          "4376:   sqlite3 *db = pParse->db;",
          "4383:   pDel = sqlite3ExprDup(db, pExpr->pLeft, 0);",
          "4384:   if( db->mallocFailed==0 ){",
          "4385:     exprAnd.op = TK_AND;",
          "4386:     exprAnd.pLeft = &compLeft;",
          "4387:     exprAnd.pRight = &compRight;",
          "4388:     compLeft.op = TK_GE;",
          "4389:     compLeft.pLeft = pDel;",
          "4390:     compLeft.pRight = pExpr->x.pList->a[0].pExpr;",
          "4391:     compRight.op = TK_LE;",
          "4392:     compRight.pLeft = pDel;",
          "4393:     compRight.pRight = pExpr->x.pList->a[1].pExpr;",
          "4394:     exprToRegister(pDel, exprCodeVector(pParse, pDel, &regFree1));",
          "4395:     if( xJump ){",
          "4396:       xJump(pParse, &exprAnd, dest, jumpIfNull);",
          "4397:     }else{",
          "4403:       pDel->flags |= EP_FromJoin;",
          "4404:       sqlite3ExprCodeTarget(pParse, &exprAnd, dest);",
          "4405:     }",
          "4406:     sqlite3ReleaseTempReg(pParse, regFree1);",
          "4408:   sqlite3ExprDelete(db, pDel);",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:   PRAGMA integrity_check;",
          "496: } {ok}",
          "498: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: #-------------------------------------------------------------------------",
          "499: reset_db",
          "500: do_execsql_test 11.0 {",
          "501:   CREATE TABLE t1 (Col0 CHECK(1 COLLATE BINARY BETWEEN 1 AND 1) ) ;",
          "502: }",
          "503: do_execsql_test 11.1 {",
          "504:   INSERT INTO t1 VALUES (NULL);",
          "505: }",
          "506: do_execsql_test 11.2 {",
          "507:   INSERT  INTO t1 VALUES (NULL);",
          "508: }",
          "510: do_execsql_test 11.3 {",
          "511:   CREATE TABLE t2(b, a CHECK(",
          "512:       CASE 'abc' COLLATE nocase WHEN a THEN 1 ELSE 0 END)",
          "513:   );",
          "514: }",
          "515: do_execsql_test 11.4 {",
          "516:   INSERT INTO t2(a) VALUES('abc');",
          "517: }",
          "518: do_execsql_test 11.5 {",
          "519:   INSERT INTO t2(b, a) VALUES(1, 'abc'||'');",
          "520: }",
          "521: do_execsql_test 11.6 {",
          "522:   INSERT INTO t2(b, a) VALUES(2, 'abc');",
          "523: }",
          "525: finish_test",
          "",
          "---------------"
        ],
        "test/checkfault.test||test/checkfault.test": [
          "File: test/checkfault.test -> test/checkfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 17",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains fault-injection test cases for the",
          "13: # sqlite3_db_cacheflush API.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: set testprefix cffault",
          "19: source $testdir/malloc_common.tcl",
          "21: do_execsql_test 1.0 {",
          "22:   CREATE TABLE t1 (Col0 CHECK(1 COLLATE BINARY BETWEEN 1 AND 1) ) ;",
          "23:   CREATE TABLE t2(b, a CHECK(",
          "24:       CASE 'abc' COLLATE nocase WHEN a THEN 1 ELSE 0 END)",
          "25:   );",
          "26: }",
          "28: do_faultsim_test 1.1 -faults oom* -body {",
          "29:   execsql { INSERT INTO t1 VALUES ('ABCDEFG') }",
          "30: } -test {",
          "31:   faultsim_test_result {0 {}}",
          "32: }",
          "34: do_faultsim_test 1.2 -faults oom* -body {",
          "35:   execsql { INSERT INTO t2(a) VALUES('abc') }",
          "36: } -test {",
          "37:   faultsim_test_result {0 {}}",
          "38: }",
          "41: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b1904e35da41683dbb2dc71b3c55f68726a5008",
      "candidate_info": {
        "commit_hash": "7b1904e35da41683dbb2dc71b3c55f68726a5008",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b1904e35da41683dbb2dc71b3c55f68726a5008",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "test/without_rowid7.test"
        ],
        "message": "Enhance the \"PRAGMA index_info()\" and \"PRAGMA index_xinfo()\" statements so that they allow a WITHOUT ROWID table as their argument, and in that case show the structure of the underlying index used to implement the WITHOUT ROWID table.\n\nFossilOrigin-Name: 62274ff683ba077d8b0fa34ad653ce235a8c5cbfdb7ab8558469af7333d03698",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "test/without_rowid7.test||test/without_rowid7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd9a47a3a2997bfbf9c8a11c5b7196e362974054e58a2fe701778b1580264de8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:     Index *pIdx;",
          "1158:     Table *pTab;",
          "1159:     pIdx = sqlite3FindIndex(db, zRight, zDb);",
          "1160:     if( pIdx ){",
          "1161:       int iIdxDb = sqlite3SchemaToIndex(db, pIdx->pSchema);",
          "1162:       int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1160:     if( pIdx==0 ){",
          "1164:       pTab = sqlite3LocateTable(pParse, LOCATE_NOERR, zRight, zDb);",
          "1165:       if( pTab && !HasRowid(pTab) ){",
          "1166:         pIdx = sqlite3PrimaryKeyIndex(pTab);",
          "1167:       }",
          "1168:     }",
          "",
          "---------------"
        ],
        "test/without_rowid7.test||test/without_rowid7.test": [
          "File: test/without_rowid7.test -> test/without_rowid7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: do_execsql_test 2.0 {",
          "29: }",
          "31: do_execsql_test 2.1 {",
          "",
          "[Removed Lines]",
          "28:   CREATE TABLE t2(a, b, PRIMARY KEY(a, a COLLATE nocase, a)) WITHOUT ROWID;",
          "",
          "[Added Lines]",
          "28:   CREATE TABLE t2(a, b, PRIMARY KEY(a COLLATE nocase, a)) WITHOUT ROWID;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   SELECT b FROM t2;",
          "34: } {one}",
          "",
          "[Removed Lines]",
          "37: finish_test",
          "",
          "[Added Lines]",
          "36: do_execsql_test 2.2a {",
          "37:   PRAGMA index_info(t2);",
          "38: } {0 0 a 1 0 a}",
          "39: do_execsql_test 2.2b {",
          "40:   SELECT *, '|' FROM pragma_index_info('t2');",
          "41: } {0 0 a | 1 0 a |}",
          "42: do_execsql_test 2.3a {",
          "43:   PRAGMA index_xinfo(t2);",
          "44: } {0 0 a 0 nocase 1 1 0 a 0 BINARY 1 2 1 b 0 BINARY 0}",
          "45: do_execsql_test 2.3b {",
          "46:   SELECT *, '|' FROM pragma_index_xinfo('t2');",
          "47: } {0 0 a 0 nocase 1 | 1 0 a 0 BINARY 1 | 2 1 b 0 BINARY 0 |}",
          "49: do_execsql_test 2.4 {",
          "50:   CREATE TABLE t3(a, b, PRIMARY KEY(a COLLATE nocase, a));",
          "51:   PRAGMA index_info(t3);",
          "52: } {}",
          "56: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c3f46500fb8f1cb8dbd2d325719ebc77c02e0e5",
      "candidate_info": {
        "commit_hash": "2c3f46500fb8f1cb8dbd2d325719ebc77c02e0e5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c3f46500fb8f1cb8dbd2d325719ebc77c02e0e5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c"
        ],
        "message": "Mark an unreachable branch with an ALWAYS macro.\n\nFossilOrigin-Name: d4755aca4b435eed62b54af84013f7f176d3fa5b7b1c243555d59de5749fcde5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e96641f0be7d4454215459b0a95cf1c46ba0133e46d0bae22269741c8f4e5b44",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733: static int renameUnmapSelectCb(Walker *pWalker, Select *p){",
          "735:     Parse *pParse = pWalker->pParse;",
          "736:     int i;",
          "737:     for(i=0; i<p->pSrc->nSrc; i++){",
          "",
          "[Removed Lines]",
          "734:   if( p->pSrc ){",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}