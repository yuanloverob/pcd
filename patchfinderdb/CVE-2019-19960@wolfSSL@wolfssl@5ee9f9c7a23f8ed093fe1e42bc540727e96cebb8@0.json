{
  "cve_id": "CVE-2019-19960",
  "cve_desc": "In wolfSSL before 4.3.0, wc_ecc_mulmod_ex does not properly resist side-channel attacks.",
  "repo": "wolfSSL/wolfssl",
  "patch_hash": "5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8",
  "patch_info": {
    "commit_hash": "5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8",
    "repo": "wolfSSL/wolfssl",
    "commit_url": "https://github.com/wolfSSL/wolfssl/commit/5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8",
    "files": [
      "wolfcrypt/src/ecc.c",
      "IDE/zephyr/README.md",
      "configure.ac",
      "src/crl.c",
      "src/internal.c",
      "src/ocsp.c",
      "src/ssl.c",
      "tests/api.c",
      "wolfcrypt/benchmark/benchmark.c",
      "wolfcrypt/src/aes.c",
      "wolfcrypt/src/asn.c",
      "wolfcrypt/src/dsa.c",
      "wolfcrypt/src/error.c",
      "wolfcrypt/src/evp.c",
      "wolfcrypt/src/integer.c",
      "wolfcrypt/src/pkcs7.c",
      "wolfcrypt/src/sp_int.c",
      "wolfcrypt/src/tfm.c",
      "wolfcrypt/test/test.c",
      "wolfssl/error-ssl.h",
      "wolfssl/internal.h",
      "wolfssl/openssl/ssl.h",
      "wolfssl/ssl.h",
      "wolfssl/wolfcrypt/asn.h",
      "wolfssl/wolfcrypt/asn_public.h",
      "wolfssl/wolfcrypt/ed25519.h",
      "wolfssl/wolfcrypt/pkcs7.h",
      "wolfssl/wolfcrypt/settings.h",
      "wolfssl/wolfcrypt/types.h"
    ],
    "message": "Merge pull request #2637 from SparkiDev/ecc_cache_resist\n\nImprove wc_ecc_mulmod_ex cache attack resistance",
    "before_after_code_files": [
      "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c"
    ]
  },
  "patch_diff": {
    "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c": [
      "File: wolfcrypt/src/ecc.c -> wolfcrypt/src/ecc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2795:            i = (buf >> (DIGIT_BIT - 1)) & 1;",
      "2796:            buf <<= 1;",
      "2798:            if (mode == 0) {",
      "2801:                if (err == MP_OKAY)",
      "2802:                    err = ecc_projective_add_point(M[1], M[2], M[2], a, modulus,",
      "2803:                                                   mp);",
      "2805:                if (err == MP_OKAY)",
      "2806:                    err = ecc_projective_dbl_point(M[2], M[3], a, modulus, mp);",
      "2845:                if (err == MP_OKAY)",
      "2847:            }",
      "2849:            if (err == MP_OKAY)",
      "2853:            if (err == MP_OKAY)",
      "2859:            if (err == MP_OKAY)",
      "2860:                err = mp_copy((mp_int*)",
      "2863:                              M[2]->x);",
      "2864:            if (err == MP_OKAY)",
      "2865:                err = mp_copy((mp_int*)",
      "2868:                              M[2]->y);",
      "2869:            if (err == MP_OKAY)",
      "2870:                err = mp_copy((mp_int*)",
      "2873:                              M[2]->z);",
      "2874:            if (err == MP_OKAY)",
      "2877:            if (err == MP_OKAY)",
      "2879:                              (mp_int*)",
      "2882:            if (err == MP_OKAY)",
      "2884:                              (mp_int*)",
      "2887:            if (err == MP_OKAY)",
      "2889:                              (mp_int*)",
      "2892:            if (err != MP_OKAY)",
      "2893:                break;",
      "2896:    }",
      "",
      "[Removed Lines]",
      "2799:                mode = i;",
      "2804: #ifdef WC_NO_CACHE_RESISTANT",
      "2807: #else",
      "2811:               if (err == MP_OKAY)",
      "2812:                   err = mp_copy((mp_int*)",
      "2813:                              ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +",
      "2814:                                ((wolfssl_word)M[1]->x & wc_off_on_addr[i])),",
      "2815:                              M[2]->x);",
      "2816:               if (err == MP_OKAY)",
      "2817:                   err = mp_copy((mp_int*)",
      "2818:                              ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +",
      "2819:                                ((wolfssl_word)M[1]->y & wc_off_on_addr[i])),",
      "2820:                              M[2]->y);",
      "2821:               if (err == MP_OKAY)",
      "2822:                   err = mp_copy((mp_int*)",
      "2823:                              ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +",
      "2824:                                ((wolfssl_word)M[1]->z & wc_off_on_addr[i])),",
      "2825:                              M[2]->z);",
      "2826:               if (err == MP_OKAY)",
      "2827:                   err = ecc_projective_dbl_point(M[2], M[3], a, modulus, mp);",
      "2829:               if (err == MP_OKAY)",
      "2830:                   err = mp_copy(M[2]->x,",
      "2831:                              (mp_int*)",
      "2832:                              ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +",
      "2833:                                ((wolfssl_word)M[1]->x & wc_off_on_addr[i])) );",
      "2834:               if (err == MP_OKAY)",
      "2835:                   err = mp_copy(M[2]->y,",
      "2836:                              (mp_int*)",
      "2837:                              ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +",
      "2838:                                ((wolfssl_word)M[1]->y & wc_off_on_addr[i])) );",
      "2839:               if (err == MP_OKAY)",
      "2840:                   err = mp_copy(M[2]->z,",
      "2841:                              (mp_int*)",
      "2842:                              ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +",
      "2843:                                ((wolfssl_word)M[1]->z & wc_off_on_addr[i])) );",
      "2844: #endif",
      "2846:                    continue;",
      "2850:                err = ecc_projective_add_point(M[0], M[1], M[i^1], a, modulus,",
      "2851:                                                                        mp);",
      "2852: #ifdef WC_NO_CACHE_RESISTANT",
      "2854:                err = ecc_projective_dbl_point(M[i], M[i], a, modulus, mp);",
      "2855: #else",
      "2861:                              ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +",
      "2862:                                ((wolfssl_word)M[1]->x & wc_off_on_addr[i])),",
      "2866:                              ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +",
      "2867:                                ((wolfssl_word)M[1]->y & wc_off_on_addr[i])),",
      "2871:                              ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +",
      "2872:                                ((wolfssl_word)M[1]->z & wc_off_on_addr[i])),",
      "2875:                err = ecc_projective_dbl_point(M[2], M[2], a, modulus, mp);",
      "2878:                err = mp_copy(M[2]->x,",
      "2880:                              ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +",
      "2881:                                ((wolfssl_word)M[1]->x & wc_off_on_addr[i])) );",
      "2883:                err = mp_copy(M[2]->y,",
      "2885:                              ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +",
      "2886:                                ((wolfssl_word)M[1]->y & wc_off_on_addr[i])) );",
      "2888:                err = mp_copy(M[2]->z,",
      "2890:                              ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +",
      "2891:                                ((wolfssl_word)M[1]->z & wc_off_on_addr[i])) );",
      "",
      "[Added Lines]",
      "2798: #ifdef WC_NO_CACHE_RESISTANT",
      "2806:            }",
      "2807:            else {",
      "2808:                if (err == MP_OKAY)",
      "2809:                    err = ecc_projective_add_point(M[0], M[1], M[i^1], a,",
      "2810:                                                   modulus, mp);",
      "2812:                    err = ecc_projective_dbl_point(M[i], M[i], a, modulus, mp);",
      "2815:            mode |= i;",
      "2816: #else",
      "2818:                err = ecc_projective_add_point(M[0], M[1], M[2], a, modulus,",
      "2819:                                               mp);",
      "2821:                err = mp_copy(M[2]->x,",
      "2822:                              (mp_int*)",
      "2823:                              ( ((size_t)M[0]->x & wc_off_on_addr[mode&(i  )]) +",
      "2824:                                ((size_t)M[1]->x & wc_off_on_addr[mode&(i^1)]) +",
      "2825:                                ((size_t)M[2]->x & wc_off_on_addr[mode^1])) );",
      "2826:            if (err == MP_OKAY)",
      "2827:                err = mp_copy(M[2]->y,",
      "2828:                              (mp_int*)",
      "2829:                              ( ((size_t)M[0]->y & wc_off_on_addr[mode&(i  )]) +",
      "2830:                                ((size_t)M[1]->y & wc_off_on_addr[mode&(i^1)]) +",
      "2831:                                ((size_t)M[2]->y & wc_off_on_addr[mode^1])) );",
      "2832:            if (err == MP_OKAY)",
      "2833:                err = mp_copy(M[2]->z,",
      "2834:                              (mp_int*)",
      "2835:                              ( ((size_t)M[0]->z & wc_off_on_addr[mode&(i  )]) +",
      "2836:                                ((size_t)M[1]->z & wc_off_on_addr[mode&(i^1)]) +",
      "2837:                                ((size_t)M[2]->z & wc_off_on_addr[mode^1])) );",
      "2844:                              ( ((size_t)M[0]->x & wc_off_on_addr[i^1]) +",
      "2845:                                ((size_t)M[1]->x & wc_off_on_addr[i])),",
      "2849:                              ( ((size_t)M[0]->y & wc_off_on_addr[i^1]) +",
      "2850:                                ((size_t)M[1]->y & wc_off_on_addr[i])),",
      "2854:                              ( ((size_t)M[0]->z & wc_off_on_addr[i^1]) +",
      "2855:                                ((size_t)M[1]->z & wc_off_on_addr[i])),",
      "2858:                err = ecc_projective_dbl_point(M[2], M[3], a, modulus, mp);",
      "2861:                err = mp_copy((mp_int*)",
      "2862:                              (((size_t)M[2]->x & wc_off_on_addr[mode^1]) +",
      "2863:                               ((size_t)M[3]->x & wc_off_on_addr[mode])),",
      "2865:                              ( ((size_t)M[0]->x & wc_off_on_addr[i^1]) +",
      "2866:                                ((size_t)M[1]->x & wc_off_on_addr[i])) );",
      "2868:                err = mp_copy((mp_int*)",
      "2869:                              (((size_t)M[2]->y & wc_off_on_addr[mode^1]) +",
      "2870:                               ((size_t)M[3]->y & wc_off_on_addr[mode])),",
      "2872:                              ( ((size_t)M[0]->y & wc_off_on_addr[i^1]) +",
      "2873:                                ((size_t)M[1]->y & wc_off_on_addr[i])) );",
      "2875:                err = mp_copy((mp_int*)",
      "2876:                              (((size_t)M[2]->z & wc_off_on_addr[mode^1]) +",
      "2877:                               ((size_t)M[3]->z & wc_off_on_addr[mode])),",
      "2879:                              ( ((size_t)M[0]->z & wc_off_on_addr[i^1]) +",
      "2880:                                ((size_t)M[1]->z & wc_off_on_addr[i])) );",
      "2884:            mode |= i;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a0c037f98c8d6c02f47fec2df1375338f7f17fe",
      "candidate_info": {
        "commit_hash": "2a0c037f98c8d6c02f47fec2df1375338f7f17fe",
        "repo": "wolfSSL/wolfssl",
        "commit_url": "https://github.com/wolfSSL/wolfssl/commit/2a0c037f98c8d6c02f47fec2df1375338f7f17fe",
        "files": [
          "wolfcrypt/src/ecc.c"
        ],
        "message": "Improve wc_ecc_mulmod_ex cache attack resistance",
        "before_after_code_files": [
          "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/wolfSSL/wolfssl/pull/2637"
        ],
        "olp_code_files": {
          "patch": [
            "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c"
          ],
          "candidate": [
            "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c"
          ]
        }
      },
      "candidate_diff": {
        "wolfcrypt/src/ecc.c||wolfcrypt/src/ecc.c": [
          "File: wolfcrypt/src/ecc.c -> wolfcrypt/src/ecc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2795:            i = (buf >> (DIGIT_BIT - 1)) & 1;",
          "2796:            buf <<= 1;",
          "2798:            if (mode == 0) {",
          "2801:                if (err == MP_OKAY)",
          "2802:                    err = ecc_projective_add_point(M[1], M[2], M[2], a, modulus,",
          "2803:                                                   mp);",
          "2805:                if (err == MP_OKAY)",
          "2806:                    err = ecc_projective_dbl_point(M[2], M[3], a, modulus, mp);",
          "2845:                if (err == MP_OKAY)",
          "2847:            }",
          "2849:            if (err == MP_OKAY)",
          "2853:            if (err == MP_OKAY)",
          "2859:            if (err == MP_OKAY)",
          "2860:                err = mp_copy((mp_int*)",
          "2863:                              M[2]->x);",
          "2864:            if (err == MP_OKAY)",
          "2865:                err = mp_copy((mp_int*)",
          "2868:                              M[2]->y);",
          "2869:            if (err == MP_OKAY)",
          "2870:                err = mp_copy((mp_int*)",
          "2873:                              M[2]->z);",
          "2874:            if (err == MP_OKAY)",
          "2877:            if (err == MP_OKAY)",
          "2879:                              (mp_int*)",
          "2882:            if (err == MP_OKAY)",
          "2884:                              (mp_int*)",
          "2887:            if (err == MP_OKAY)",
          "2889:                              (mp_int*)",
          "2892:            if (err != MP_OKAY)",
          "2893:                break;",
          "2896:    }",
          "",
          "[Removed Lines]",
          "2799:                mode = i;",
          "2804: #ifdef WC_NO_CACHE_RESISTANT",
          "2807: #else",
          "2811:               if (err == MP_OKAY)",
          "2812:                   err = mp_copy((mp_int*)",
          "2813:                              ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +",
          "2814:                                ((wolfssl_word)M[1]->x & wc_off_on_addr[i])),",
          "2815:                              M[2]->x);",
          "2816:               if (err == MP_OKAY)",
          "2817:                   err = mp_copy((mp_int*)",
          "2818:                              ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +",
          "2819:                                ((wolfssl_word)M[1]->y & wc_off_on_addr[i])),",
          "2820:                              M[2]->y);",
          "2821:               if (err == MP_OKAY)",
          "2822:                   err = mp_copy((mp_int*)",
          "2823:                              ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +",
          "2824:                                ((wolfssl_word)M[1]->z & wc_off_on_addr[i])),",
          "2825:                              M[2]->z);",
          "2826:               if (err == MP_OKAY)",
          "2827:                   err = ecc_projective_dbl_point(M[2], M[3], a, modulus, mp);",
          "2829:               if (err == MP_OKAY)",
          "2830:                   err = mp_copy(M[2]->x,",
          "2831:                              (mp_int*)",
          "2832:                              ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +",
          "2833:                                ((wolfssl_word)M[1]->x & wc_off_on_addr[i])) );",
          "2834:               if (err == MP_OKAY)",
          "2835:                   err = mp_copy(M[2]->y,",
          "2836:                              (mp_int*)",
          "2837:                              ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +",
          "2838:                                ((wolfssl_word)M[1]->y & wc_off_on_addr[i])) );",
          "2839:               if (err == MP_OKAY)",
          "2840:                   err = mp_copy(M[2]->z,",
          "2841:                              (mp_int*)",
          "2842:                              ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +",
          "2843:                                ((wolfssl_word)M[1]->z & wc_off_on_addr[i])) );",
          "2844: #endif",
          "2846:                    continue;",
          "2850:                err = ecc_projective_add_point(M[0], M[1], M[i^1], a, modulus,",
          "2851:                                                                        mp);",
          "2852: #ifdef WC_NO_CACHE_RESISTANT",
          "2854:                err = ecc_projective_dbl_point(M[i], M[i], a, modulus, mp);",
          "2855: #else",
          "2861:                              ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +",
          "2862:                                ((wolfssl_word)M[1]->x & wc_off_on_addr[i])),",
          "2866:                              ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +",
          "2867:                                ((wolfssl_word)M[1]->y & wc_off_on_addr[i])),",
          "2871:                              ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +",
          "2872:                                ((wolfssl_word)M[1]->z & wc_off_on_addr[i])),",
          "2875:                err = ecc_projective_dbl_point(M[2], M[2], a, modulus, mp);",
          "2878:                err = mp_copy(M[2]->x,",
          "2880:                              ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +",
          "2881:                                ((wolfssl_word)M[1]->x & wc_off_on_addr[i])) );",
          "2883:                err = mp_copy(M[2]->y,",
          "2885:                              ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +",
          "2886:                                ((wolfssl_word)M[1]->y & wc_off_on_addr[i])) );",
          "2888:                err = mp_copy(M[2]->z,",
          "2890:                              ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +",
          "2891:                                ((wolfssl_word)M[1]->z & wc_off_on_addr[i])) );",
          "",
          "[Added Lines]",
          "2798: #ifdef WC_NO_CACHE_RESISTANT",
          "2806:            }",
          "2807:            else {",
          "2808:                if (err == MP_OKAY)",
          "2809:                    err = ecc_projective_add_point(M[0], M[1], M[i^1], a,",
          "2810:                                                   modulus, mp);",
          "2812:                    err = ecc_projective_dbl_point(M[i], M[i], a, modulus, mp);",
          "2815:            mode |= i;",
          "2816: #else",
          "2818:                err = ecc_projective_add_point(M[0], M[1], M[2], a, modulus,",
          "2819:                                               mp);",
          "2821:                err = mp_copy(M[2]->x,",
          "2822:                              (mp_int*)",
          "2823:                              ( ((size_t)M[0]->x & wc_off_on_addr[mode&(i  )]) +",
          "2824:                                ((size_t)M[1]->x & wc_off_on_addr[mode&(i^1)]) +",
          "2825:                                ((size_t)M[2]->x & wc_off_on_addr[mode^1])) );",
          "2826:            if (err == MP_OKAY)",
          "2827:                err = mp_copy(M[2]->y,",
          "2828:                              (mp_int*)",
          "2829:                              ( ((size_t)M[0]->y & wc_off_on_addr[mode&(i  )]) +",
          "2830:                                ((size_t)M[1]->y & wc_off_on_addr[mode&(i^1)]) +",
          "2831:                                ((size_t)M[2]->y & wc_off_on_addr[mode^1])) );",
          "2832:            if (err == MP_OKAY)",
          "2833:                err = mp_copy(M[2]->z,",
          "2834:                              (mp_int*)",
          "2835:                              ( ((size_t)M[0]->z & wc_off_on_addr[mode&(i  )]) +",
          "2836:                                ((size_t)M[1]->z & wc_off_on_addr[mode&(i^1)]) +",
          "2837:                                ((size_t)M[2]->z & wc_off_on_addr[mode^1])) );",
          "2844:                              ( ((size_t)M[0]->x & wc_off_on_addr[i^1]) +",
          "2845:                                ((size_t)M[1]->x & wc_off_on_addr[i])),",
          "2849:                              ( ((size_t)M[0]->y & wc_off_on_addr[i^1]) +",
          "2850:                                ((size_t)M[1]->y & wc_off_on_addr[i])),",
          "2854:                              ( ((size_t)M[0]->z & wc_off_on_addr[i^1]) +",
          "2855:                                ((size_t)M[1]->z & wc_off_on_addr[i])),",
          "2858:                err = ecc_projective_dbl_point(M[2], M[3], a, modulus, mp);",
          "2861:                err = mp_copy((mp_int*)",
          "2862:                              (((size_t)M[2]->x & wc_off_on_addr[mode^1]) +",
          "2863:                               ((size_t)M[3]->x & wc_off_on_addr[mode])),",
          "2865:                              ( ((size_t)M[0]->x & wc_off_on_addr[i^1]) +",
          "2866:                                ((size_t)M[1]->x & wc_off_on_addr[i])) );",
          "2868:                err = mp_copy((mp_int*)",
          "2869:                              (((size_t)M[2]->y & wc_off_on_addr[mode^1]) +",
          "2870:                               ((size_t)M[3]->y & wc_off_on_addr[mode])),",
          "2872:                              ( ((size_t)M[0]->y & wc_off_on_addr[i^1]) +",
          "2873:                                ((size_t)M[1]->y & wc_off_on_addr[i])) );",
          "2875:                err = mp_copy((mp_int*)",
          "2876:                              (((size_t)M[2]->z & wc_off_on_addr[mode^1]) +",
          "2877:                               ((size_t)M[3]->z & wc_off_on_addr[mode])),",
          "2879:                              ( ((size_t)M[0]->z & wc_off_on_addr[i^1]) +",
          "2880:                                ((size_t)M[1]->z & wc_off_on_addr[i])) );",
          "2884:            mode |= i;",
          "",
          "---------------"
        ]
      }
    }
  ]
}