{
  "cve_id": "CVE-2018-6836",
  "cve_desc": "The netmonrec_comment_destroy function in wiretap/netmon.c in Wireshark through 2.4.4 performs a free operation on an uninitialized memory address, which allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact.",
  "repo": "wireshark/wireshark",
  "patch_hash": "28960d79cca262ac6b974f339697b299a1e28fef",
  "patch_info": {
    "commit_hash": "28960d79cca262ac6b974f339697b299a1e28fef",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/28960d79cca262ac6b974f339697b299a1e28fef",
    "files": [
      "wiretap/netmon.c"
    ],
    "message": "netmon: Initialize struct netmonrec_comment on alloc\n\nThis avoids an illegal pointer to free() on error.\n\nBug: 14397\nChange-Id: Id6e535141c7a3ee7b3d1822875b571e2199a5387\nReviewed-on: https://code.wireshark.org/review/25660\nReviewed-by: Stig Bj\u00f8rlykke <stig@bjorlykke.org>",
    "before_after_code_files": [
      "wiretap/netmon.c||wiretap/netmon.c"
    ]
  },
  "patch_diff": {
    "wiretap/netmon.c||wiretap/netmon.c": [
      "File: wiretap/netmon.c -> wiretap/netmon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "534:     return WTAP_OPEN_ERROR;",
      "535:    }",
      "538:    comment_rec->numFramePerComment = pletoh32(&comment_header.numFramePerComment);",
      "539:    comment_rec->frameOffset = pletoh32(&comment_header.frameOffset);",
      "540:    comment_rec->titleLength = pletoh32(&comment_header.titleLength);",
      "",
      "[Removed Lines]",
      "537:    comment_rec = g_new(struct netmonrec_comment, 1);",
      "",
      "[Added Lines]",
      "537:    comment_rec = g_new0(struct netmonrec_comment, 1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52823805b29a44a83eacd0e5b415b11227ec313b",
      "candidate_info": {
        "commit_hash": "52823805b29a44a83eacd0e5b415b11227ec313b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/52823805b29a44a83eacd0e5b415b11227ec313b",
        "files": [
          "epan/dissectors/packet-netmon.c",
          "wiretap/netmon.c",
          "wiretap/wtap.c",
          "wiretap/wtap.h"
        ],
        "message": "Add support for reading comments in Network Monitor files\n\nThe NetMon wiretap reads the title and description comment fields from a\nNetMon file and saves it in the wiretap private structure.  Then when\nit's time to make a frame, the comment fields are added to a NetMon\npseudoheader with a new WTAP ENCAP type, with the potential for netmon\npseudoheader to contain pseudoheader data from \"base\" wiretap. Then the\nnetmon_header dissector displays the comment fields and passes any \"base\"\nwiretap pseudoheader data when calling the wtap_encap dissector table\nthat the frame dissector normally calls.\n\nBug: 4225\nChange-Id: I8f772bc9494364c98434c78b61eb5a64012ff3b9\nReviewed-on: https://code.wireshark.org/review/23210\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-netmon.c||epan/dissectors/packet-netmon.c",
          "wiretap/netmon.c||wiretap/netmon.c",
          "wiretap/wtap.c||wiretap/wtap.c",
          "wiretap/wtap.h||wiretap/wtap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/netmon.c||wiretap/netmon.c"
          ],
          "candidate": [
            "wiretap/netmon.c||wiretap/netmon.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-netmon.c||epan/dissectors/packet-netmon.c": [
          "File: epan/dissectors/packet-netmon.c -> epan/dissectors/packet-netmon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: };",
          "70: static int proto_netmon_event = -1;",
          "72: static int hf_netmon_event_size = -1;",
          "73: static int hf_netmon_event_header_type = -1;",
          "74: static int hf_netmon_event_flags = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: static int proto_netmon_header = -1;",
          "73: static int hf_netmon_header_title_comment = -1;",
          "74: static int hf_netmon_header_description_comment = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: static gint ett_netmon_event = -1;",
          "118: static gint ett_netmon_event_desc = -1;",
          "119: static gint ett_netmon_event_flags = -1;",
          "120: static gint ett_netmon_event_property = -1;",
          "121: static gint ett_netmon_event_extended_data = -1;",
          "124: static int",
          "125: dissect_netmon_event(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "126: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: static gint ett_netmon_header = -1;",
          "128: static dissector_table_t wtap_encap_table;",
          "131: static int",
          "132: dissect_netmon_header(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)",
          "133: {",
          "134:  proto_item *ti;",
          "135:  proto_tree *header_tree;",
          "136:  union wtap_pseudo_header temp_header;",
          "137:  gchar *comment;",
          "138:  GIConv cd;",
          "140:  ti = proto_tree_add_item(tree, proto_netmon_header, tvb, 0, 0, ENC_NA);",
          "141:  header_tree = proto_item_add_subtree(ti, ett_netmon_header);",
          "143:  if (pinfo->pseudo_header->netmon.title != NULL) {",
          "146:   if ((cd = g_iconv_open(\"UTF-8\", \"UTF-16\")) != (GIConv) -1)",
          "147:   {",
          "148:    comment = g_convert_with_iconv(pinfo->pseudo_header->netmon.title, pinfo->pseudo_header->netmon.titleLength, cd, NULL, NULL, NULL);",
          "149:    g_iconv_close(cd);",
          "151:    ti = proto_tree_add_string(header_tree, hf_netmon_header_title_comment, tvb, 0, 0, comment);",
          "152:    PROTO_ITEM_SET_GENERATED(ti);",
          "153:    g_free(comment);",
          "154:   }",
          "156:  }",
          "158:  if (pinfo->pseudo_header->netmon.description != NULL) {",
          "162:   comment = wmem_strndup(wmem_packet_scope(), pinfo->pseudo_header->netmon.description, pinfo->pseudo_header->netmon.descLength);",
          "164:   ti = proto_tree_add_string(header_tree, hf_netmon_header_description_comment, tvb, 0, 0, comment);",
          "165:   PROTO_ITEM_SET_GENERATED(ti);",
          "166:  }",
          "171:  switch (pinfo->pseudo_header->netmon.sub_encap)",
          "172:  {",
          "173:  case WTAP_ENCAP_ATM_PDUS:",
          "174:   memcpy(&temp_header.atm, &pinfo->pseudo_header->netmon.subheader.atm, sizeof(temp_header.atm));",
          "175:   memcpy(&pinfo->pseudo_header->atm, &temp_header.atm, sizeof(temp_header.atm));",
          "176:   break;",
          "177:  case WTAP_ENCAP_ETHERNET:",
          "178:   memcpy(&temp_header.eth, &pinfo->pseudo_header->netmon.subheader.eth, sizeof(temp_header.eth));",
          "179:   memcpy(&pinfo->pseudo_header->eth, &temp_header.eth, sizeof(temp_header.eth));",
          "180:   break;",
          "181:  case WTAP_ENCAP_IEEE_802_11_NETMON:",
          "182:   memcpy(&temp_header.ieee_802_11, &pinfo->pseudo_header->netmon.subheader.ieee_802_11, sizeof(temp_header.ieee_802_11));",
          "183:   memcpy(&pinfo->pseudo_header->ieee_802_11, &temp_header.ieee_802_11, sizeof(temp_header.ieee_802_11));",
          "184:   break;",
          "185:  }",
          "187:  if (!dissector_try_uint_new(wtap_encap_table,",
          "188:   pinfo->pseudo_header->netmon.sub_encap, tvb, pinfo, tree, TRUE,",
          "189:   (void *)pinfo->pseudo_header)) {",
          "190:   call_data_dissector(tvb, pinfo, tree);",
          "191:  }",
          "193:  return tvb_captured_length(tvb);",
          "194: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240: void proto_register_netmon(void)",
          "241: {",
          "243:   { &hf_netmon_event_size,",
          "244:    { \"Size\", \"netmon_event.size\",",
          "245:    FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL }",
          "",
          "[Removed Lines]",
          "242:  static hf_register_info hf[] = {",
          "",
          "[Added Lines]",
          "314:  static hf_register_info hf_header[] = {",
          "315:   { &hf_netmon_header_title_comment,",
          "316:    { \"Comment title\", \"netmon_header.title_comment\",",
          "317:    FT_STRING, BASE_NONE, NULL, 0x0, NULL, HFILL }",
          "318:   },",
          "319:   { &hf_netmon_header_description_comment,",
          "320:    { \"Comment description\", \"netmon_header.description_comment\",",
          "321:    FT_STRING, BASE_NONE, NULL, 0x0, NULL, HFILL }",
          "322:   },",
          "323:  };",
          "326:  static hf_register_info hf_event[] = {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "411:  };",
          "413:  static gint *ett[] = {",
          "414:   &ett_netmon_event,",
          "415:   &ett_netmon_event_desc,",
          "416:   &ett_netmon_event_flags,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:   &ett_netmon_header,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "418:   &ett_netmon_event_extended_data",
          "419:  };",
          "421:  proto_netmon_event = proto_register_protocol (\"Network Monitor Event\", \"NetMon Event\", \"netmon_event\" );",
          "423:  proto_register_subtree_array(ett, array_length(ett));",
          "424: }",
          "426: void proto_reg_handoff_netmon(void)",
          "427: {",
          "433: }",
          "",
          "[Removed Lines]",
          "422:  proto_register_field_array(proto_netmon_event, hf, array_length(hf));",
          "428:  dissector_handle_t netmon_handle;",
          "430:  netmon_handle = create_dissector_handle(dissect_netmon_event, proto_netmon_event);",
          "432:  dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_NETMON_NET_NETEVENT, netmon_handle);",
          "",
          "[Added Lines]",
          "506:  proto_netmon_header = proto_register_protocol (\"Network Monitor Header\", \"NetMon Header\", \"netmon_header\" );",
          "509:  proto_register_field_array(proto_netmon_header, hf_header, array_length(hf_header));",
          "510:  proto_register_field_array(proto_netmon_event, hf_event, array_length(hf_event));",
          "516:  dissector_handle_t netmon_event_handle, netmon_header_handle;",
          "518:  netmon_event_handle = create_dissector_handle(dissect_netmon_event, proto_netmon_event);",
          "519:  netmon_header_handle = create_dissector_handle(dissect_netmon_header, proto_netmon_header);",
          "521:  dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_NETMON_NET_NETEVENT, netmon_event_handle);",
          "522:  dissector_add_uint(\"wtap_encap\", WTAP_ENCAP_NETMON_HEADER, netmon_header_handle);",
          "524:  wtap_encap_table = find_dissector_table(\"wtap_encap\");",
          "",
          "---------------"
        ],
        "wiretap/netmon.c||wiretap/netmon.c": [
          "File: wiretap/netmon.c -> wiretap/netmon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: struct netmonrec_comment {",
          "130: };",
          "133: struct netmonrec_comment_header {",
          "134:  guint32 numFramePerComment;",
          "135:  guint32 frameOffset;",
          "136:  guint32 titleLength;",
          "137: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: };",
          "133: typedef struct {",
          "138:  guint32 *frame_table;",
          "141: } netmon_t;",
          "",
          "[Removed Lines]",
          "134:  time_t start_secs;",
          "135:  guint32 start_nsecs;",
          "136:  guint8 version_major;",
          "137:  guint8 version_minor;",
          "139:  guint32 frame_table_size;",
          "140:  guint current_frame;",
          "",
          "[Added Lines]",
          "150:  time_t  start_secs;",
          "151:  guint32 start_nsecs;",
          "152:  guint8  version_major;",
          "153:  guint8  version_minor;",
          "155:  guint32 frame_table_size;",
          "156:  GHashTable* comment_table;",
          "157:  guint current_frame;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:     struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info);",
          "181: static gboolean netmon_read_atm_pseudoheader(FILE_T fh,",
          "182:     union wtap_pseudo_header *pseudo_header, int *err, gchar **err_info);",
          "184: static gboolean netmon_dump(wtap_dumper *wdh, const struct wtap_pkthdr *phdr,",
          "185:     const guint8 *pd, int *err, gchar **err_info);",
          "186: static gboolean netmon_dump_finish(wtap_dumper *wdh, int *err);",
          "188: wtap_open_return_val netmon_open(wtap *wth, int *err, gchar **err_info)",
          "189: {",
          "190:  char magic[MAGIC_SIZE];",
          "",
          "[Removed Lines]",
          "183: static void netmon_sequential_close(wtap *wth);",
          "",
          "[Added Lines]",
          "200: static void netmon_close(wtap *wth);",
          "205: static void netmonrec_comment_destroy(gpointer key) {",
          "206:  struct netmonrec_comment *comment = (struct netmonrec_comment*) key;",
          "208:  g_free(comment->title);",
          "209:  g_free(comment->description);",
          "210:  g_free(comment);",
          "211: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:  guint32 frame_table_length;",
          "196:  guint32 frame_table_size;",
          "197:  guint32 *frame_table;",
          "198: #ifdef WORDS_BIGENDIAN",
          "199:  unsigned int i;",
          "200: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:  guint32 comment_table_offset;",
          "224:  guint32 comment_table_size;",
          "225:  GHashTable* comment_table;",
          "226:  struct netmonrec_comment* comment_rec;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:  wth->file_type_subtype = file_type;",
          "248:  wth->priv = (void *)netmon;",
          "249:  wth->subtype_read = netmon_read;",
          "250:  wth->subtype_seek_read = netmon_seek_read;",
          "",
          "[Removed Lines]",
          "247:  netmon = (netmon_t *)g_malloc(sizeof(netmon_t));",
          "251:  wth->subtype_sequential_close = netmon_sequential_close;",
          "",
          "[Added Lines]",
          "276:  netmon = (netmon_t *)g_malloc0(sizeof(netmon_t));",
          "280:  wth->subtype_close = netmon_close;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290:  netmon->version_minor = hdr.ver_minor;",
          "",
          "[Removed Lines]",
          "298:  netmon->frame_table_size = 0;",
          "299:  netmon->frame_table = NULL;",
          "304:  frame_table_offset = pletoh32(&hdr.frametableoffset);",
          "",
          "[Added Lines]",
          "324:  frame_table_offset = pletoh32(&hdr.frametableoffset);",
          "329:  comment_table_offset = pletoh32(&hdr.commentdataoffset);",
          "330:  comment_table_size = pletoh32(&hdr.commentdatalength);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "350:  if (file_seek(wth->fh, frame_table_offset, SEEK_SET, err) == -1) {",
          "351:   return WTAP_OPEN_ERROR;",
          "352:  }",
          "353:  frame_table = (guint32 *)g_try_malloc(frame_table_length);",
          "354:  if (frame_table_length != 0 && frame_table == NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:  if (comment_table_size > 0) {",
          "391:   if (comment_table_size > 512*1024*1024) {",
          "394:     comment_table_size);",
          "395:    return WTAP_OPEN_ERROR;",
          "396:   }",
          "398:   if (comment_table_size < 17) {",
          "401:     comment_table_size);",
          "402:    return WTAP_OPEN_ERROR;",
          "403:   }",
          "405:   if (file_seek(wth->fh, comment_table_offset, SEEK_SET, err) == -1) {",
          "406:    return WTAP_OPEN_ERROR;",
          "407:   }",
          "412:   if (file_seek(wth->fh, frame_table_offset, SEEK_SET, err) == -1) {",
          "413:    return WTAP_OPEN_ERROR;",
          "414:   }",
          "415:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "363:  netmon->frame_table_size = frame_table_size;",
          "364:  netmon->frame_table = frame_table;",
          "366: #ifdef WORDS_BIGENDIAN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:  if (comment_table_size > 0) {",
          "431:   comment_table = g_hash_table_new_full(g_direct_hash, g_direct_equal, NULL, netmonrec_comment_destroy);",
          "432:   if (comment_table == NULL) {",
          "434:     g_free(frame_table);",
          "435:     return WTAP_OPEN_ERROR;",
          "436:   }",
          "439:   if (file_seek(wth->fh, comment_table_offset+comment_table_size, SEEK_SET, err) == -1) {",
          "440:    g_free(frame_table);",
          "441:    g_hash_table_destroy(comment_table);",
          "442:    return WTAP_OPEN_ERROR;",
          "443:   }",
          "445:   if (file_seek(wth->fh, comment_table_offset, SEEK_SET, err) == -1) {",
          "447:    g_free(frame_table);",
          "448:    g_hash_table_destroy(comment_table);",
          "449:    return WTAP_OPEN_ERROR;",
          "450:   }",
          "452:   while (comment_table_size > 16) {",
          "453:    struct netmonrec_comment_header comment_header;",
          "454:    guint32 desc_length;",
          "457:    if (!wtap_read_bytes(wth->fh, &comment_header, 12, err, err_info)) {",
          "458:     g_free(frame_table);",
          "459:     g_hash_table_destroy(comment_table);",
          "460:     return WTAP_OPEN_ERROR;",
          "461:    }",
          "462:    comment_table_size -= 12;",
          "465:    if (pletoh32(&comment_header.titleLength) == 0) {",
          "468:     g_free(frame_table);",
          "469:     g_hash_table_destroy(comment_table);",
          "470:     return WTAP_OPEN_ERROR;",
          "471:    }",
          "472:    if (pletoh32(&comment_header.titleLength) > comment_table_size) {",
          "475:       pletoh32(&comment_header.titleLength), comment_table_size);",
          "476:     g_free(frame_table);",
          "477:     g_hash_table_destroy(comment_table);",
          "478:     return WTAP_OPEN_ERROR;",
          "479:    }",
          "481:    comment_rec = g_new(struct netmonrec_comment, 1);",
          "482:    comment_rec->numFramePerComment = pletoh32(&comment_header.numFramePerComment);",
          "483:    comment_rec->frameOffset = pletoh32(&comment_header.frameOffset);",
          "484:    comment_rec->titleLength = pletoh32(&comment_header.titleLength);",
          "485:    comment_rec->title = (guint8*)g_malloc(comment_rec->titleLength);",
          "487:    g_hash_table_insert(comment_table, GUINT_TO_POINTER(comment_rec->frameOffset), comment_rec);",
          "490:    if (!wtap_read_bytes(wth->fh, comment_rec->title, comment_rec->titleLength, err, err_info)) {",
          "491:     g_free(frame_table);",
          "492:     g_hash_table_destroy(comment_table);",
          "493:     return WTAP_OPEN_ERROR;",
          "494:    }",
          "495:    comment_table_size -= comment_rec->titleLength;",
          "497:    if (comment_table_size < 4) {",
          "500:     g_free(frame_table);",
          "501:     g_hash_table_destroy(comment_table);",
          "502:     return WTAP_OPEN_ERROR;",
          "503:    }",
          "505:    if (!wtap_read_bytes(wth->fh, &desc_length, 4, err, err_info)) {",
          "506:     g_free(frame_table);",
          "507:     g_hash_table_destroy(comment_table);",
          "508:     return WTAP_OPEN_ERROR;",
          "509:    }",
          "510:    comment_table_size -= 4;",
          "512:    comment_rec->descLength = pletoh32(&desc_length);",
          "513:    if (comment_rec->descLength > 0) {",
          "515:     if (comment_rec->descLength > comment_table_size) {",
          "518:         comment_rec->descLength, comment_table_size);",
          "519:      g_free(frame_table);",
          "520:      g_hash_table_destroy(comment_table);",
          "521:      return WTAP_OPEN_ERROR;",
          "522:     }",
          "524:     comment_rec->description = (guint8*)g_malloc(comment_rec->descLength);",
          "527:     if (!wtap_read_bytes(wth->fh, comment_rec->description, comment_rec->descLength, err, err_info)) {",
          "528:      g_free(frame_table);",
          "529:      g_hash_table_destroy(comment_table);",
          "530:      return WTAP_OPEN_ERROR;",
          "531:     }",
          "533:     comment_table_size -= comment_rec->descLength;",
          "534:    }",
          "535:   }",
          "536:   netmon->comment_table = comment_table;",
          "537:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "467:  } trlr;",
          "468:  guint16 network;",
          "469:  int pkt_encap;",
          "472:  switch (netmon->version_major) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "643:  struct netmonrec_comment* comment_rec = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "754:  }",
          "756:  netmon_set_pseudo_header_info(phdr, buf);",
          "757:  return SUCCESS;",
          "758: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "936:  if (netmon->comment_table != NULL) {",
          "937:   comment_rec = (struct netmonrec_comment*)g_hash_table_lookup(netmon->comment_table, GUINT_TO_POINTER(netmon->frame_table[netmon->current_frame-1]));",
          "938:  }",
          "940:  if (comment_rec != NULL) {",
          "941:   union wtap_pseudo_header temp_header;",
          "946:   switch (phdr->pkt_encap)",
          "947:   {",
          "948:   case WTAP_ENCAP_ATM_PDUS:",
          "949:    memcpy(&temp_header.atm, &phdr->pseudo_header.atm, sizeof(temp_header.atm));",
          "950:    break;",
          "951:   case WTAP_ENCAP_ETHERNET:",
          "952:    memcpy(&temp_header.eth, &phdr->pseudo_header.eth, sizeof(temp_header.eth));",
          "953:    break;",
          "954:   case WTAP_ENCAP_IEEE_802_11_NETMON:",
          "955:    memcpy(&temp_header.ieee_802_11, &phdr->pseudo_header.ieee_802_11, sizeof(temp_header.ieee_802_11));",
          "956:    break;",
          "957:   }",
          "958:   memset(&phdr->pseudo_header.netmon, 0, sizeof(phdr->pseudo_header.netmon));",
          "961:   phdr->pseudo_header.netmon.sub_encap = phdr->pkt_encap;",
          "964:   phdr->pseudo_header.netmon.titleLength = comment_rec->titleLength;",
          "965:   phdr->pseudo_header.netmon.title = comment_rec->title;",
          "966:   phdr->pseudo_header.netmon.descLength = comment_rec->descLength;",
          "967:   phdr->pseudo_header.netmon.description = comment_rec->description;",
          "970:   switch (phdr->pkt_encap)",
          "971:   {",
          "972:   case WTAP_ENCAP_ATM_PDUS:",
          "973:    memcpy(&phdr->pseudo_header.netmon.subheader.atm, &temp_header.atm, sizeof(temp_header.atm));",
          "974:    break;",
          "975:   case WTAP_ENCAP_ETHERNET:",
          "976:    memcpy(&phdr->pseudo_header.netmon.subheader.eth, &temp_header.eth, sizeof(temp_header.eth));",
          "977:    break;",
          "978:   case WTAP_ENCAP_IEEE_802_11_NETMON:",
          "979:    memcpy(&phdr->pseudo_header.netmon.subheader.ieee_802_11, &temp_header.ieee_802_11, sizeof(temp_header.ieee_802_11));",
          "980:    break;",
          "981:   }",
          "984:   phdr->pkt_encap = WTAP_ENCAP_NETMON_HEADER;",
          "985:  }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "767:  for (;;) {",
          "769:   if (netmon->current_frame >= netmon->frame_table_size) {",
          "775:    return FALSE;",
          "776:   }",
          "",
          "[Removed Lines]",
          "772:    g_free(netmon->frame_table);",
          "773:    netmon->frame_table = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "867: static void",
          "869: {",
          "870:  netmon_t *netmon = (netmon_t *)wth->priv;",
          "",
          "[Removed Lines]",
          "868: netmon_sequential_close(wtap *wth)",
          "",
          "[Added Lines]",
          "1094: netmon_close(wtap *wth)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "873:   g_free(netmon->frame_table);",
          "874:   netmon->frame_table = NULL;",
          "875:  }",
          "876: }",
          "878: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1103:  if (netmon->comment_table != NULL) {",
          "1104:   g_hash_table_destroy(netmon->comment_table);",
          "1105:   netmon->comment_table = NULL;",
          "1106:  }",
          "",
          "---------------"
        ],
        "wiretap/wtap.c||wiretap/wtap.c": [
          "File: wiretap/wtap.c -> wiretap/wtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "937:  { \"Network Monitor Network Event\", \"netmon_event\" },",
          "938: };",
          "940: WS_DLL_LOCAL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "940:  { \"Network Monitor Header\", \"netmon_header\" },",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "275: #define WTAP_ENCAP_VSOCK                        185",
          "276: #define WTAP_ENCAP_NORDIC_BLE                   186",
          "277: #define WTAP_ENCAP_NETMON_NET_NETEVENT          187",
          "280: #define WTAP_NUM_ENCAP_TYPES                    wtap_get_num_encap_types()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #define WTAP_ENCAP_NETMON_HEADER                188",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1148: };",
          "1151: struct ft_specific_record_phdr {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1153: struct netmon_phdr {",
          "1159:     union sub_wtap_pseudo_header {",
          "1160:         struct eth_phdr     eth;",
          "1161:         struct atm_phdr     atm;",
          "1162:         struct ieee_802_11_phdr ieee_802_11;",
          "1163:     } subheader;",
          "1164: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1179:     struct llcp_phdr    llcp;",
          "1180:     struct logcat_phdr  logcat;",
          "1181:     struct sysdig_event_phdr sysdig_event;",
          "1182:     struct ft_specific_record_phdr ftsrec;",
          "1183: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198:     struct netmon_phdr  netmon;",
          "",
          "---------------"
        ]
      }
    }
  ]
}