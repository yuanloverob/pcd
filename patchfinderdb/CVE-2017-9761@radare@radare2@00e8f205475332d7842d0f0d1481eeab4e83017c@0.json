{
  "cve_id": "CVE-2017-9761",
  "cve_desc": "The find_eoq function in libr/core/cmd.c in radare2 1.5.0 allows remote attackers to cause a denial of service (heap-based out-of-bounds read and application crash) via a crafted binary file.",
  "repo": "radare/radare2",
  "patch_hash": "00e8f205475332d7842d0f0d1481eeab4e83017c",
  "patch_info": {
    "commit_hash": "00e8f205475332d7842d0f0d1481eeab4e83017c",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/00e8f205475332d7842d0f0d1481eeab4e83017c",
    "files": [
      "libr/core/cmd.c",
      "libr/core/cmd_info.c"
    ],
    "message": "Fix #7727 - undefined pointers and out of band string access fixes",
    "before_after_code_files": [
      "libr/core/cmd.c||libr/core/cmd.c",
      "libr/core/cmd_info.c||libr/core/cmd_info.c"
    ]
  },
  "patch_diff": {
    "libr/core/cmd.c||libr/core/cmd.c": [
      "File: libr/core/cmd.c -> libr/core/cmd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1443:    if (haveQuote) {",
      "1445:     cmd++;",
      "1447:     if (!p || !*p) {",
      "1448:      eprintf (\"Missing \\\" in (%s).\", cmd);",
      "1449:      return false;",
      "",
      "[Removed Lines]",
      "1446:     p = find_eoq (cmd + 1);",
      "",
      "[Added Lines]",
      "1446:     p = cmd[0] ? find_eoq (cmd + 1) : NULL;",
      "",
      "---------------"
    ],
    "libr/core/cmd_info.c||libr/core/cmd_info.c": [
      "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     break;",
      "396:    }",
      "397:   case 'h': RBININFO (\"fields\", R_CORE_BIN_ACC_FIELDS, NULL, 0); break;",
      "399:   case 'L':",
      "400:   {",
      "401:    char *ptr = strchr (input, ' ');",
      "",
      "[Removed Lines]",
      "398:   case 'l': RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0); break;",
      "",
      "[Added Lines]",
      "398:   case 'l':",
      "399:      {",
      "400:       RBinObject *obj = r_bin_cur_object (core->bin);",
      "401:       RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0);",
      "402:      }",
      "403:      break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "444:    break;",
      "445:   case 'r': RBININFO (\"relocs\", R_CORE_BIN_ACC_RELOCS, NULL, 0); break;",
      "446:   case 'd': RBININFO (\"dwarf\", R_CORE_BIN_ACC_DWARF, NULL, -1); break;",
      "448:   case 'I': RBININFO (\"info\", R_CORE_BIN_ACC_INFO, NULL, 0); break;",
      "449:   case 'e': RBININFO (\"entries\", R_CORE_BIN_ACC_ENTRIES, NULL, 0); break;",
      "450:   case 'M': RBININFO (\"main\", R_CORE_BIN_ACC_MAIN, NULL, 0); break;",
      "",
      "[Removed Lines]",
      "447:   case 'i': RBININFO (\"imports\",R_CORE_BIN_ACC_IMPORTS, NULL, obj? r_list_length (obj->imports): 0); break;",
      "",
      "[Added Lines]",
      "452:   case 'i': {",
      "453:       RBinObject *obj = r_bin_cur_object (core->bin);",
      "454:       RBININFO (\"imports\", R_CORE_BIN_ACC_IMPORTS, NULL,",
      "455:         obj? r_list_length (obj->imports): 0);",
      "456:      }",
      "457:      break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99c90aad56005a8ee41e06746f9da69580c06758",
      "candidate_info": {
        "commit_hash": "99c90aad56005a8ee41e06746f9da69580c06758",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/99c90aad56005a8ee41e06746f9da69580c06758",
        "files": [
          "libr/bin/format/pe/pe.c",
          "libr/bin/format/pe/pe.h",
          "libr/bin/format/pe/pe_specs.h",
          "libr/core/cbin.c",
          "libr/core/cmd_info.c",
          "libr/include/r_core.h"
        ],
        "message": "Add resource support into radare for PE files",
        "before_after_code_files": [
          "libr/bin/format/pe/pe.c||libr/bin/format/pe/pe.c",
          "libr/bin/format/pe/pe.h||libr/bin/format/pe/pe.h",
          "libr/bin/format/pe/pe_specs.h||libr/bin/format/pe/pe_specs.h",
          "libr/core/cbin.c||libr/core/cbin.c",
          "libr/core/cmd_info.c||libr/core/cmd_info.c",
          "libr/include/r_core.h||libr/include/r_core.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ],
          "candidate": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/pe/pe.c||libr/bin/format/pe/pe.c": [
          "File: libr/bin/format/pe/pe.c -> libr/bin/format/pe/pe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:  return false;",
          "489: }",
          "491: static int bin_pe_init_hdr(struct PE_(r_bin_pe_obj_t)* bin) {",
          "492:  if (!(bin->dos_header = malloc (sizeof(PE_(image_dos_header))))) {",
          "493:   r_sys_perror (\"malloc (dos header)\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491: static char *_time_stamp_to_str(ut32 timeStamp) {",
          "492:  struct my_timezone {",
          "495:  } tz;",
          "496:  struct timeval tv;",
          "497:  int gmtoff;",
          "498:  time_t ts = (time_t) timeStamp;",
          "499:  gettimeofday (&tv, (void*) &tz);",
          "500:  gmtoff = (int) (tz.tz_minuteswest * 60); // in seconds",
          "501:  ts += gmtoff;",
          "502:  return r_str_chop (strdup (ctime (&ts)));",
          "503: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "565:  {",
          "574:   sdb_num_set (bin->kv, \"image_file_header.TimeDateStamp\", bin->nt_headers->file_header.TimeDateStamp, 0);",
          "583:  }",
          "584:  bin->optional_header = &bin->nt_headers->optional_header;",
          "585:  bin->data_directory = (PE_(image_data_directory*)) & bin->optional_header->DataDirectory;",
          "",
          "[Removed Lines]",
          "566:   struct my_timezone {",
          "569:   } tz;",
          "570:   struct timeval tv;",
          "571:   int gmtoff;",
          "572:   char* timestr;",
          "573:   time_t ts = (time_t) bin->nt_headers->file_header.TimeDateStamp;",
          "575:   gettimeofday (&tv, (void*) &tz);",
          "576:   gmtoff = (int) (tz.tz_minuteswest * 60); // in seconds",
          "577:   ts += gmtoff;",
          "578:   timestr = r_str_chop (strdup (ctime (&ts)));",
          "580:   sdb_set_owned (bin->kv,",
          "581:    \"image_file_header.TimeDateStamp_string\",",
          "582:    timestr, 0);",
          "",
          "[Added Lines]",
          "581:   char *timestr = _time_stamp_to_str (bin->nt_headers->file_header.TimeDateStamp);",
          "582:   sdb_set_owned (bin->kv, \"image_file_header.TimeDateStamp_string\", timestr, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1196:  return true;",
          "1197: }",
          "1199: static int bin_pe_init_resource(struct PE_(r_bin_pe_obj_t)* bin) {",
          "1200:  PE_(image_data_directory) * resource_dir = &bin->data_directory[PE_IMAGE_DIRECTORY_ENTRY_RESOURCE];",
          "1201:  PE_DWord resource_dir_paddr = bin_pe_rva_to_paddr (bin, resource_dir->VirtualAddress);",
          "1202:  if (!resource_dir_paddr) {",
          "1203:   return false;",
          "1204:  }",
          "1205:  if (!(bin->resource_directory = malloc (sizeof(*bin->resource_directory)))) {",
          "1206:   r_sys_perror (\"malloc (resource directory)\");",
          "1207:   return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1199: static void _free_resources(r_pe_resource *rs) {",
          "1200:  if (rs) {",
          "1201:   free (rs->timestr);",
          "1202:   free (rs->data);",
          "1203:   free (rs->type);",
          "1204:   free (rs);",
          "1205:  }",
          "1206: }",
          "1216:  bin->resources = r_list_newf ((RListFree)_free_resources);",
          "1217:  if (!bin->resources) {",
          "1218:   return false;",
          "1219:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2028:  return sdb;",
          "2029: }",
          "2037:   return;",
          "2038:  }",
          "2040:  if (!sdb) {",
          "2041:   return;",
          "2042:  }",
          "2047:   Pe_image_resource_directory_entry typeEntry;",
          "2051:   }",
          "2055:   }",
          "2139:    }",
          "2140:   }",
          "2141:  }",
          "2146: }",
          "2149:  ut64 size, vaddr;",
          "2150:  ut8 *data = NULL;",
          "2151:  int len;",
          "",
          "[Removed Lines]",
          "2031: void PE_(r_bin_store_all_resource_version_info)(struct PE_(r_bin_pe_obj_t)* bin) {",
          "2032:  char key[30];",
          "2033:  ut64 off = 0;",
          "2034:  int counter = 0;",
          "2035:  Sdb* sdb = NULL;",
          "2036:  if (!bin || !bin->resource_directory) {",
          "2039:  sdb = sdb_new0 ();",
          "2044:  ut32 totalRes = bin->resource_directory->NumberOfNamedEntries + bin->resource_directory->NumberOfIdEntries;",
          "2045:  ut32 curRes = bin->resource_directory->NumberOfNamedEntries;",
          "2046:  for (; curRes < totalRes; curRes++) {",
          "2048:   off = bin->resource_directory_offset + sizeof (*bin->resource_directory) + curRes * sizeof (typeEntry);",
          "2049:   if (off > bin->size || off + sizeof(Pe_image_resource_directory_entry) > bin->size) {",
          "2050:    goto out_error;",
          "2052:   if (r_buf_read_at (bin->b, off, (ut8*) &typeEntry, sizeof(Pe_image_resource_directory_entry)) < 1) {",
          "2053:    bprintf (\"Warning: read (resource type directory entry)\\n\");",
          "2054:    goto out_error;",
          "2056:   if (!typeEntry.u1.s.NameIsString && typeEntry.u1.Id == PE_RESOURCE_ENTRY_VERSION) {",
          "2057:    Pe_image_resource_directory identDir;",
          "2058:    off = bin->resource_directory_offset + typeEntry.u2.s.OffsetToDirectory;",
          "2059:    if (off > bin->size || off + sizeof(Pe_image_resource_directory) > bin->size) {",
          "2060:     goto out_error;",
          "2061:    }",
          "2062:    if (r_buf_read_at (bin->b, off, (ut8*) &identDir, sizeof(Pe_image_resource_directory)) < 1) {",
          "2063:     bprintf (\"Warning: read (resource identifier directory)\\n\");",
          "2064:     goto out_error;",
          "2065:    }",
          "2066:    ut32 totalIdent = identDir.NumberOfNamedEntries + identDir.NumberOfIdEntries;",
          "2067:    ut32 curIdent = 0;",
          "2068:    for (; curIdent < totalIdent; curIdent++) {",
          "2069:     Pe_image_resource_directory_entry identEntry;",
          "2070:     off = bin->resource_directory_offset + typeEntry.u2.s.OffsetToDirectory +",
          "2071:     sizeof(identDir) + curIdent * sizeof(identEntry);",
          "2072:     if (off > bin->size || off + sizeof(Pe_image_resource_directory_entry) > bin->size) {",
          "2073:      goto out_error;",
          "2074:     }",
          "2075:     if (r_buf_read_at (bin->b, off, (ut8*) &identEntry, sizeof(Pe_image_resource_directory_entry)) < 1) {",
          "2076:      bprintf (\"Warning: read (resource identifier entry)\\n\");",
          "2077:      goto out_error;",
          "2078:     }",
          "2079:     if (!identEntry.u2.s.DataIsDirectory) {",
          "2080:      continue;",
          "2081:     }",
          "2082:     Pe_image_resource_directory langDir;",
          "2083:     off = bin->resource_directory_offset + identEntry.u2.s.OffsetToDirectory;",
          "2084:     if (off > bin->size || off + sizeof (Pe_image_resource_directory) > bin->size) {",
          "2085:      goto out_error;",
          "2086:     }",
          "2087:     if (r_buf_read_at (bin->b, off, (ut8*) &langDir, sizeof(Pe_image_resource_directory)) < 1) {",
          "2088:      bprintf (\"Warning: read (resource language directory)\\n\");",
          "2089:      goto out_error;",
          "2090:     }",
          "2091:     ut32 totalLang = langDir.NumberOfNamedEntries + langDir.NumberOfIdEntries;",
          "2092:     ut32 curLang = 0;",
          "2093:     for (; curLang < totalLang; curLang++) {",
          "2094:      Pe_image_resource_directory_entry langEntry;",
          "2095:      off = bin->resource_directory_offset + identEntry.u2.s.OffsetToDirectory + sizeof(langDir) + curLang * sizeof(langEntry);",
          "2096:      if (off > bin->size || off + sizeof(Pe_image_resource_directory_entry) > bin->size) {",
          "2097:       goto out_error;",
          "2098:      }",
          "2099:      if (r_buf_read_at (bin->b, off, (ut8*) &langEntry, sizeof(Pe_image_resource_directory_entry)) < 1) {",
          "2100:       bprintf (\"Warning: read (resource language entry)\\n\");",
          "2101:       goto out_error;",
          "2102:      }",
          "2103:      if (langEntry.u2.s.DataIsDirectory) {",
          "2104:       continue;",
          "2105:      }",
          "2106:      Pe_image_resource_data_entry data;",
          "2107:      off = bin->resource_directory_offset + langEntry.u2.OffsetToData;",
          "2108:      if (off > bin->size || off + sizeof (Pe_image_resource_data_entry) > bin->size) {",
          "2109:       goto out_error;",
          "2110:      }",
          "2111:      if (r_buf_read_at (bin->b, off, (ut8*) &data, sizeof (data)) != sizeof (data)) {",
          "2112:       bprintf (\"Warning: read (resource data entry)\\n\");",
          "2113:       goto out_error;",
          "2114:      }",
          "2115:      PE_DWord data_paddr = bin_pe_rva_to_paddr (bin, data.OffsetToData);",
          "2116:      if (!data_paddr) {",
          "2117:       bprintf (\"Warning: bad RVA in resource data entry\\n\");",
          "2118:       goto out_error;",
          "2119:      }",
          "2120:      PE_DWord cur_paddr = data_paddr;",
          "2121:      if ((cur_paddr & 0x3) != 0) {",
          "2123:       bprintf (\"Warning: not aligned version info address\\n\");",
          "2124:       continue;",
          "2125:      }",
          "2126:      while(cur_paddr < data_paddr + data.Size && cur_paddr < bin->size) {",
          "2127:       PE_VS_VERSIONINFO* vs_VersionInfo = Pe_r_bin_pe_parse_version_info (bin, cur_paddr);",
          "2128:       if (vs_VersionInfo) {",
          "2129:        snprintf (key, 30, \"VS_VERSIONINFO%d\", counter++);",
          "2130:        sdb_ns_set (sdb, key, Pe_r_bin_store_resource_version_info (vs_VersionInfo));",
          "2131:       } else {",
          "2132:        break;",
          "2133:       }",
          "2134:       cur_paddr += vs_VersionInfo->wLength;",
          "2135:       free_VS_VERSIONINFO (vs_VersionInfo);",
          "2136:       align32 (cur_paddr);",
          "2137:      }",
          "2138:     }",
          "2142:  sdb_ns_set (bin->kv, \"vs_version_info\", sdb);",
          "2143: out_error:",
          "2144:  sdb_free (sdb);",
          "2145:  return;",
          "2148: static void bin_pe_get_certificate (struct PE_ (r_bin_pe_obj_t) * bin) {",
          "",
          "[Added Lines]",
          "2048: static char* _resource_lang_str(int id) {",
          "2049:  switch(id) {",
          "2050:  case 0x00: return \"LANG_NEUTRAL\";",
          "2051:  case 0x7f: return \"LANG_INVARIANT\";",
          "2052:  case 0x36: return \"LANG_AFRIKAANS\";",
          "2053:  case 0x1c: return \"LANG_ALBANIAN \";",
          "2054:  case 0x01: return \"LANG_ARABIC\";",
          "2055:  case 0x2b: return \"LANG_ARMENIAN\";",
          "2056:  case 0x4d: return \"LANG_ASSAMESE\";",
          "2057:  case 0x2c: return \"LANG_AZERI\";",
          "2058:  case 0x2d: return \"LANG_BASQUE\";",
          "2059:  case 0x23: return \"LANG_BELARUSIAN\";",
          "2060:  case 0x45: return \"LANG_BENGALI\";",
          "2061:  case 0x02: return \"LANG_BULGARIAN\";",
          "2062:  case 0x03: return \"LANG_CATALAN\";",
          "2063:  case 0x04: return \"LANG_CHINESE\";",
          "2064:  case 0x1a: return \"LANG_CROATIAN\";",
          "2065:  case 0x05: return \"LANG_CZECH\";",
          "2066:  case 0x06: return \"LANG_DANISH\";",
          "2067:  case 0x65: return \"LANG_DIVEHI\";",
          "2068:  case 0x13: return \"LANG_DUTCH\";",
          "2069:  case 0x09: return \"LANG_ENGLISH\";",
          "2070:  case 0x25: return \"LANG_ESTONIAN\";",
          "2071:  case 0x38: return \"LANG_FAEROESE\";",
          "2072:  case 0x29: return \"LANG_FARSI\";",
          "2073:  case 0x0b: return \"LANG_FINNISH\";",
          "2074:  case 0x0c: return \"LANG_FRENCH\";",
          "2075:  case 0x56: return \"LANG_GALICIAN\";",
          "2076:  case 0x37: return \"LANG_GEORGIAN\";",
          "2077:  case 0x07: return \"LANG_GERMAN\";",
          "2078:  case 0x08: return \"LANG_GREEK\";",
          "2079:  case 0x47: return \"LANG_GUJARATI\";",
          "2080:  case 0x0d: return \"LANG_HEBREW\";",
          "2081:  case 0x39: return \"LANG_HINDI\";",
          "2082:  case 0x0e: return \"LANG_HUNGARIAN\";",
          "2083:  case 0x0f: return \"LANG_ICELANDIC\";",
          "2084:  case 0x21: return \"LANG_INDONESIAN\";",
          "2085:  case 0x10: return \"LANG_ITALIAN\";",
          "2086:  case 0x11: return \"LANG_JAPANESE\";",
          "2087:  case 0x4b: return \"LANG_KANNADA\";",
          "2088:  case 0x60: return \"LANG_KASHMIRI\";",
          "2089:  case 0x3f: return \"LANG_KAZAK\";",
          "2090:  case 0x57: return \"LANG_KONKANI\";",
          "2091:  case 0x12: return \"LANG_KOREAN\";",
          "2092:  case 0x40: return \"LANG_KYRGYZ\";",
          "2093:  case 0x26: return \"LANG_LATVIAN\";",
          "2094:  case 0x27: return \"LANG_LITHUANIAN\";",
          "2095:  case 0x2f: return \"LANG_MACEDONIAN\";",
          "2096:  case 0x3e: return \"LANG_MALAY\";",
          "2097:  case 0x4c: return \"LANG_MALAYALAM\";",
          "2098:  case 0x58: return \"LANG_MANIPURI\";",
          "2099:  case 0x4e: return \"LANG_MARATHI\";",
          "2100:  case 0x50: return \"LANG_MONGOLIAN\";",
          "2101:  case 0x61: return \"LANG_NEPALI\";",
          "2102:  case 0x14: return \"LANG_NORWEGIAN\";",
          "2103:  case 0x48: return \"LANG_ORIYA\";",
          "2104:  case 0x15: return \"LANG_POLISH\";",
          "2105:  case 0x16: return \"LANG_PORTUGUESE\";",
          "2106:  case 0x46: return \"LANG_PUNJABI\";",
          "2107:  case 0x18: return \"LANG_ROMANIAN\";",
          "2108:  case 0x19: return \"LANG_RUSSIAN\";",
          "2109:  case 0x4f: return \"LANG_SANSKRIT\";",
          "2110:  case 0x59: return \"LANG_SINDHI\";",
          "2111:  case 0x1b: return \"LANG_SLOVAK\";",
          "2112:  case 0x24: return \"LANG_SLOVENIAN\";",
          "2113:  case 0x0a: return \"LANG_SPANISH \";",
          "2114:  case 0x41: return \"LANG_SWAHILI\";",
          "2115:  case 0x1d: return \"LANG_SWEDISH\";",
          "2116:  case 0x5a: return \"LANG_SYRIAC\";",
          "2117:  case 0x49: return \"LANG_TAMIL\";",
          "2118:  case 0x44: return \"LANG_TATAR\";",
          "2119:  case 0x4a: return \"LANG_TELUGU\";",
          "2120:  case 0x1e: return \"LANG_THAI\";",
          "2121:  case 0x1f: return \"LANG_TURKISH\";",
          "2122:  case 0x22: return \"LANG_UKRAINIAN\";",
          "2123:  case 0x20: return \"LANG_URDU\";",
          "2124:  case 0x43: return \"LANG_UZBEK\";",
          "2125:  case 0x2a: return \"LANG_VIETNAMESE\";",
          "2126:  case 0x3c: return \"LANG_GAELIC\";",
          "2127:  case 0x3a: return \"LANG_MALTESE\";",
          "2128:  case 0x28: return \"LANG_MAORI\";",
          "2129:  case 0x17: return \"LANG_RHAETO_ROMANCE\";",
          "2130:  case 0x3b: return \"LANG_SAAMI\";",
          "2131:  case 0x2e: return \"LANG_SORBIAN\";",
          "2132:  case 0x30: return \"LANG_SUTU\";",
          "2133:  case 0x31: return \"LANG_TSONGA\";",
          "2134:  case 0x32: return \"LANG_TSWANA\";",
          "2135:  case 0x33: return \"LANG_VENDA\";",
          "2136:  case 0x34: return \"LANG_XHOSA\";",
          "2137:  case 0x35: return \"LANG_ZULU\";",
          "2138:  case 0x8f: return \"LANG_ESPERANTO\";",
          "2139:  case 0x90: return \"LANG_WALON\";",
          "2140:  case 0x91: return \"LANG_CORNISH\";",
          "2141:  case 0x92: return \"LANG_WELSH\";",
          "2142:  case 0x93: return \"LANG_BRETON\";",
          "2143:  default: return \"UNKNOWN\";",
          "2144:  }",
          "2145: }",
          "2147: static char* _resource_type_str(int type) {",
          "2148:  switch (type) {",
          "2149:  case 1: return \"CURSOR\";",
          "2150:  case 2: return \"BITMAP\";",
          "2151:  case 3: return \"ICON\";",
          "2152:  case 4: return \"MENU\";",
          "2153:  case 5: return \"DIALOG\";",
          "2154:  case 6: return \"STRING\";",
          "2155:  case 7: return \"FONTDIR\";",
          "2156:  case 8: return \"FONT\";",
          "2157:  case 9: return \"ACCELERATOR\";",
          "2158:  case 10: return \"RCDATA\";",
          "2159:  case 11: return \"MESSAGETABLE\";",
          "2160:  case 12: return \"GROUP_CURSOR\";",
          "2161:  case 14: return \"GROUP_ICON\";",
          "2162:  case 16: return \"VERSION\";",
          "2163:  case 17: return \"DLGINCLUDE\";",
          "2164:  case 19: return \"PLUGPLAY\";",
          "2165:  case 20: return \"VXD\";",
          "2166:  case 21: return \"ANICURSOR\";",
          "2167:  case 22: return \"ANIICON\";",
          "2168:  case 23: return \"HTML\";",
          "2169:  case 24: return \"MANIFEST\";",
          "2170:  default: return \"UNKNOWN\";",
          "2171:  }",
          "2172: }",
          "2174: static void _parse_resource_directory(struct PE_(r_bin_pe_obj_t) *bin, Pe_image_resource_directory *dir, ut64 offDir, int type, int id, SdbHash *dirs) {",
          "2175:  int index = 0;",
          "2176:  int totalRes = dir->NumberOfNamedEntries + dir->NumberOfIdEntries;",
          "2177:  ut64 rsrc_base = bin->resource_directory_offset;",
          "2178:  ut64 off;",
          "2179:  if (totalRes > R_PE_MAX_RESOURCES) {",
          "2182:  for (index = 0; index < totalRes; index++) {",
          "2183:   Pe_image_resource_directory_entry entry;",
          "2184:   off = rsrc_base + offDir + sizeof(*dir) + index * sizeof(entry);",
          "2185:   char *key = sdb_fmt (0, \"0x%08\"PFMT64x, off);",
          "2186:   if (sdb_ht_find (dirs, key, NULL)) {",
          "2187:    break;",
          "2188:   }",
          "2189:   sdb_ht_insert (dirs, key, \"1\");",
          "2190:   if (off > bin->size || off + sizeof(entry) > bin->size) {",
          "2191:    break;",
          "2192:   }",
          "2193:   if (r_buf_read_at (bin->b, off, (ut8*)&entry, sizeof(entry)) < 1) {",
          "2194:    eprintf (\"Warning: read resource entry\\n\");",
          "2195:    break;",
          "2196:   }",
          "2197:   if (entry.u2.s.DataIsDirectory) {",
          "2199:    Pe_image_resource_directory identEntry;",
          "2200:    off = rsrc_base + entry.u2.s.OffsetToDirectory;",
          "2201:    int len = r_buf_read_at (bin->b, off, (ut8*) &identEntry, sizeof(identEntry));",
          "2202:    if (len < 1 || len != sizeof (Pe_image_resource_directory)) {",
          "2203:     eprintf (\"Warning: parsing resource directory\\n\");",
          "2204:    }",
          "2205:    _parse_resource_directory (bin, &identEntry, entry.u2.s.OffsetToDirectory, type, entry.u1.Id, dirs);",
          "2206:    continue;",
          "2207:   }",
          "2209:   Pe_image_resource_data_entry *data = R_NEW0 (Pe_image_resource_data_entry);",
          "2210:   if (!data) {",
          "2211:    break;",
          "2212:   }",
          "2213:   off = rsrc_base + entry.u2.OffsetToData;",
          "2214:   if (off > bin->size || off + sizeof (data) > bin->size) {",
          "2215:    free (data);",
          "2216:    break;",
          "2217:   }",
          "2218:   if (r_buf_read_at (bin->b, off, (ut8*)data, sizeof (*data)) != sizeof (*data)) {",
          "2219:    eprintf (\"Warning: read (resource data entry)\\n\");",
          "2220:    free (data);",
          "2221:    break;",
          "2222:   }",
          "2223:   if (type == PE_RESOURCE_ENTRY_VERSION) {",
          "2224:    char key[64];",
          "2225:    int counter = 0;",
          "2226:    Sdb *sdb = sdb_new0 ();",
          "2227:    if (!sdb) {",
          "2228:     free (data);",
          "2229:     sdb_free (sdb);",
          "2230:     continue;",
          "2231:    }",
          "2232:    PE_DWord data_paddr = bin_pe_rva_to_paddr (bin, data->OffsetToData);",
          "2233:    if (!data_paddr) {",
          "2234:     bprintf (\"Warning: bad RVA in resource data entry\\n\");",
          "2235:     free (data);",
          "2236:     sdb_free (sdb);",
          "2237:     continue;",
          "2238:    }",
          "2239:    PE_DWord cur_paddr = data_paddr;",
          "2240:    if ((cur_paddr & 0x3) != 0) {",
          "2241:     bprintf (\"Warning: not aligned version info address\\n\");",
          "2242:     free (data);",
          "2243:     sdb_free (sdb);",
          "2244:     continue;",
          "2245:    }",
          "2246:    while (cur_paddr < data_paddr + data->Size && cur_paddr < bin->size) {",
          "2247:     PE_VS_VERSIONINFO* vs_VersionInfo = Pe_r_bin_pe_parse_version_info (bin, cur_paddr);",
          "2248:     if (vs_VersionInfo) {",
          "2249:      snprintf (key, 30, \"VS_VERSIONINFO%d\", counter++);",
          "2250:      sdb_ns_set (sdb, key, Pe_r_bin_store_resource_version_info (vs_VersionInfo));",
          "2251:     } else {",
          "2252:      break;",
          "2253:     }",
          "2254:     cur_paddr += vs_VersionInfo->wLength;",
          "2255:     free_VS_VERSIONINFO (vs_VersionInfo);",
          "2256:     align32 (cur_paddr);",
          "2257:    }",
          "2258:    sdb_ns_set (bin->kv, \"vs_version_info\", sdb);",
          "2259:   }",
          "2260:   r_pe_resource *rs = R_NEW0 (r_pe_resource);",
          "2261:   if (!rs) {",
          "2262:    free (data);",
          "2263:    break;",
          "2264:   }",
          "2265:   rs->timestr = _time_stamp_to_str (dir->TimeDateStamp);",
          "2266:   rs->type = strdup (_resource_type_str (type));",
          "2267:   rs->language = strdup (_resource_lang_str (entry.u1.Name & 0x3ff));",
          "2268:   rs->data = data;",
          "2269:   rs->name = id;",
          "2270:   r_list_append (bin->resources, rs);",
          "2271:  }",
          "2272: }",
          "2274: static void _store_resource_sdb(struct PE_(r_bin_pe_obj_t) *bin) {",
          "2275:  RListIter *iter;",
          "2276:  r_pe_resource *rs;",
          "2277:  int index = 0;",
          "2278:  ut64 paddr = 0;",
          "2279:  char *key;",
          "2280:  Sdb *sdb = sdb_new0 ();",
          "2284:  r_list_foreach (bin->resources, iter, rs) {",
          "2285:   key = sdb_fmt (0, \"resource.%d.timestr\", index);",
          "2286:   sdb_set (sdb, key, rs->timestr, 0);",
          "2287:   key = sdb_fmt (0, \"resource.%d.paddr\", index);",
          "2288:   paddr = bin_pe_rva_to_paddr (bin, rs->data->OffsetToData);",
          "2289:   sdb_num_set (sdb, key, paddr, 0);",
          "2290:   key = sdb_fmt (0, \"resource.%d.name\", index);",
          "2291:   sdb_num_set (sdb, key, rs->name, 0);",
          "2292:   key = sdb_fmt (0, \"resource.%d.size\", index);",
          "2293:   sdb_num_set (sdb, key, rs->data->Size, 0);",
          "2294:   key = sdb_fmt (0, \"resource.%d.type\", index);",
          "2295:   sdb_set (sdb, key, rs->type, 0);",
          "2296:   key = sdb_fmt (0, \"resource.%d.language\", index);",
          "2297:   sdb_set (sdb, key, rs->language, 0);",
          "2298:   index++;",
          "2299:  }",
          "2300:  sdb_ns_set (bin->kv, \"pe_resource\", sdb);",
          "2301: }",
          "2304: R_API void PE_(bin_pe_parse_resource)(struct PE_(r_bin_pe_obj_t) *bin) {",
          "2305:  int index = 0;",
          "2306:  ut64 off = 0, rsrc_base = bin->resource_directory_offset;",
          "2307:  Pe_image_resource_directory *rs_directory = bin->resource_directory;",
          "2308:  ut32 curRes = 0;",
          "2309:  ut32 totalRes = 0;",
          "2310:  SdbHash *dirs = sdb_ht_new (); //to avoid infinite loops",
          "2311:  if (!dirs) {",
          "2312:   return;",
          "2313:  }",
          "2314:  if (!rs_directory) {",
          "2315:   return;",
          "2316:  }",
          "2317:  curRes = rs_directory->NumberOfNamedEntries;",
          "2318:  totalRes = curRes + rs_directory->NumberOfIdEntries;",
          "2319:  if (totalRes > R_PE_MAX_RESOURCES) {",
          "2320:   eprintf (\"Error parsing resource directory\\n\");",
          "2321:   return;",
          "2322:  }",
          "2323:  for (index = 0; index < totalRes; index++) {",
          "2325:   off = rsrc_base + sizeof (*rs_directory) + index * sizeof (typeEntry);",
          "2326:   sdb_ht_insert (dirs, sdb_fmt (0, \"0x%08\"PFMT64x, off), \"1\");",
          "2327:   if (off > bin->size || off + sizeof(typeEntry) > bin->size) {",
          "2328:    break;",
          "2330:   if (r_buf_read_at (bin->b, off, (ut8*)&typeEntry, sizeof(typeEntry)) < 1) {",
          "2331:    eprintf (\"Warning: read resource  directory entry\\n\");",
          "2332:    break;",
          "2334:   if (typeEntry.u2.s.DataIsDirectory) {",
          "2335:    Pe_image_resource_directory identEntry;",
          "2336:    off = rsrc_base + typeEntry.u2.s.OffsetToDirectory;",
          "2337:    int len = r_buf_read_at (bin->b, off, (ut8*)&identEntry, sizeof(identEntry));",
          "2338:    if (len < 1 || len != sizeof (identEntry)) {",
          "2339:     eprintf (\"Warning: parsing resource directory\\n\");",
          "2341:    _parse_resource_directory (bin, &identEntry, typeEntry.u2.s.OffsetToDirectory, typeEntry.u1.Id, 0, dirs);",
          "2344:  sdb_ht_free (dirs);",
          "2345:  _store_resource_sdb (bin);",
          "2348: static void bin_pe_get_certificate(struct PE_ (r_bin_pe_obj_t) * bin) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2205:  bin_pe_init_clr_hdr (bin);",
          "2206:  bin_pe_init_metadata_hdr (bin);",
          "2207:  bin_pe_init_overlay (bin);",
          "2209:  bin->relocs = NULL;",
          "2210:  return true;",
          "2211: }",
          "",
          "[Removed Lines]",
          "2208:  PE_(r_bin_store_all_resource_version_info) (bin);",
          "",
          "[Added Lines]",
          "2408:  PE_(bin_pe_parse_resource) (bin);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2360:    return NULL;",
          "2361:   }",
          "2362:   exports_sz = (bin->export_directory->NumberOfFunctions + 1) * sizeof (struct r_bin_pe_export_t);",
          "2364:    return NULL;",
          "2365:   }",
          "2366:   if (!(exports = malloc (exports_sz))) {",
          "",
          "[Removed Lines]",
          "2363:   if (exports_sz < 0) {",
          "",
          "[Added Lines]",
          "2562:   if (exports_sz < 0 || exports_sz > bin->size) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3173:  free (bin->import_directory);",
          "3174:  free (bin->resource_directory);",
          "3175:  free (bin->delay_import_directory);",
          "3176:  r_pkcs7_free_cms (bin->cms);",
          "3177:  r_buf_free (bin->b);",
          "3178:  bin->b = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3375:  r_list_free (bin->resources);",
          "",
          "---------------"
        ],
        "libr/bin/format/pe/pe.h||libr/bin/format/pe/pe.h": [
          "File: libr/bin/format/pe/pe.h -> libr/bin/format/pe/pe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  int last;",
          "63: };",
          "65: #endif",
          "67: struct PE_(r_bin_pe_obj_t) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: typedef struct _PE_RESOURCE {",
          "67:  char *timestr;",
          "68:  char *type;",
          "69:  char *language;",
          "70:  int name;",
          "71:  Pe_image_resource_data_entry *data;",
          "72: } r_pe_resource;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:  bool verbose;",
          "98:  int big_endian;",
          "99:  RList* relocs;",
          "100:  const char* file;",
          "101:  struct r_buf_t* b;",
          "102:  Sdb *kv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:  RList* resources; //RList of r_pe_resources",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146: struct r_bin_pe_addr_t *PE_(check_unknow) (struct PE_(r_bin_pe_obj_t) *bin);",
          "147: struct r_bin_pe_addr_t *PE_(check_msvcseh) (struct PE_(r_bin_pe_obj_t) *bin);",
          "148: struct r_bin_pe_addr_t *PE_(check_mingw) (struct PE_(r_bin_pe_obj_t) *bin);",
          "",
          "[Removed Lines]",
          "149: bool PE_(r_bin_pe_section_perms)(struct PE_(r_bin_pe_obj_t) *bin, const char *name, int perms);",
          "",
          "[Added Lines]",
          "161: R_API void PE_(bin_pe_parse_resource) (struct PE_(r_bin_pe_obj_t) *bin);",
          "",
          "---------------"
        ],
        "libr/bin/format/pe/pe_specs.h||libr/bin/format/pe/pe_specs.h": [
          "File: libr/bin/format/pe/pe_specs.h -> libr/bin/format/pe/pe_specs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: #define PE_IMAGE_SUBSYSTEM_EFI_ROM                 13",
          "159: #define PE_IMAGE_SUBSYSTEM_XBOX                    14",
          "161: typedef struct {",
          "162:  ut32 VirtualAddress;",
          "163:  ut32 Size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: #define LANG_NEUTRAL       0x00",
          "164: #define LANG_INVARIANT     0x7f",
          "165: #define LANG_AFRIKAANS     0x36",
          "166: #define LANG_ALBANIAN      0x1c",
          "167: #define LANG_ARABIC        0x01",
          "168: #define LANG_ARMENIAN      0x2b",
          "169: #define LANG_ASSAMESE      0x4d",
          "170: #define LANG_AZERI         0x2c",
          "171: #define LANG_BASQUE        0x2d",
          "172: #define LANG_BELARUSIAN    0x23",
          "173: #define LANG_BENGALI       0x45",
          "174: #define LANG_BULGARIAN     0x02",
          "175: #define LANG_CATALAN       0x03",
          "176: #define LANG_CHINESE       0x04",
          "177: #define LANG_CROATIAN      0x1a",
          "178: #define LANG_CZECH         0x05",
          "179: #define LANG_DANISH        0x06",
          "180: #define LANG_DIVEHI        0x65",
          "181: #define LANG_DUTCH         0x13",
          "182: #define LANG_ENGLISH       0x09",
          "183: #define LANG_ESTONIAN      0x25",
          "184: #define LANG_FAEROESE      0x38",
          "185: #define LANG_FARSI         0x29",
          "186: #define LANG_FINNISH       0x0b",
          "187: #define LANG_FRENCH        0x0c",
          "188: #define LANG_GALICIAN      0x56",
          "189: #define LANG_GEORGIAN      0x37",
          "190: #define LANG_GERMAN        0x07",
          "191: #define LANG_GREEK         0x08",
          "192: #define LANG_GUJARATI      0x47",
          "193: #define LANG_HEBREW        0x0d",
          "194: #define LANG_HINDI         0x39",
          "195: #define LANG_HUNGARIAN     0x0e",
          "196: #define LANG_ICELANDIC     0x0f",
          "197: #define LANG_INDONESIAN    0x21",
          "198: #define LANG_ITALIAN       0x10",
          "199: #define LANG_JAPANESE      0x11",
          "200: #define LANG_KANNADA       0x4b",
          "201: #define LANG_KASHMIRI      0x60",
          "202: #define LANG_KAZAK         0x3f",
          "203: #define LANG_KONKANI       0x57",
          "204: #define LANG_KOREAN        0x12",
          "205: #define LANG_KYRGYZ        0x40",
          "206: #define LANG_LATVIAN       0x26",
          "207: #define LANG_LITHUANIAN    0x27",
          "208: #define LANG_MACEDONIAN    0x2f",
          "209: #define LANG_MALAY         0x3e",
          "210: #define LANG_MALAYALAM     0x4c",
          "211: #define LANG_MANIPURI      0x58",
          "212: #define LANG_MARATHI       0x4e",
          "213: #define LANG_MONGOLIAN     0x50",
          "214: #define LANG_NEPALI        0x61",
          "215: #define LANG_NORWEGIAN     0x14",
          "216: #define LANG_ORIYA         0x48",
          "217: #define LANG_POLISH        0x15",
          "218: #define LANG_PORTUGUESE    0x16",
          "219: #define LANG_PUNJABI       0x46",
          "220: #define LANG_ROMANIAN      0x18",
          "221: #define LANG_RUSSIAN       0x19",
          "222: #define LANG_SANSKRIT      0x4f",
          "223: #define LANG_SERBIAN       0x1a",
          "224: #define LANG_SINDHI        0x59",
          "225: #define LANG_SLOVAK        0x1b",
          "226: #define LANG_SLOVENIAN     0x24",
          "227: #define LANG_SPANISH       0x0a",
          "228: #define LANG_SWAHILI       0x41",
          "229: #define LANG_SWEDISH       0x1d",
          "230: #define LANG_SYRIAC        0x5a",
          "231: #define LANG_TAMIL         0x49",
          "232: #define LANG_TATAR         0x44",
          "233: #define LANG_TELUGU        0x4a",
          "234: #define LANG_THAI          0x1e",
          "235: #define LANG_TURKISH       0x1f",
          "236: #define LANG_UKRAINIAN     0x22",
          "237: #define LANG_URDU          0x20",
          "238: #define LANG_UZBEK         0x43",
          "239: #define LANG_VIETNAMESE    0x2a",
          "240: #define LANG_GAELIC        0x3c",
          "241: #define LANG_MALTESE       0x3a",
          "242: #define LANG_MAORI         0x28",
          "243: #define LANG_RHAETO_ROMANCE 0x17",
          "244: #define LANG_SAAMI         0x3b",
          "245: #define LANG_SORBIAN       0x2e",
          "246: #define LANG_SUTU          0x30",
          "247: #define LANG_TSONGA        0x31",
          "248: #define LANG_TSWANA        0x32",
          "249: #define LANG_VENDA         0x33",
          "250: #define LANG_XHOSA         0x34",
          "251: #define LANG_ZULU          0x35",
          "252: #define LANG_ESPERANTO     0x8f",
          "253: #define LANG_WALON         0x90",
          "254: #define LANG_CORNISH       0x91",
          "255: #define LANG_WELSH         0x92",
          "256: #define LANG_BRETON        0x93",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "409:  ut32 Reserved;",
          "410: } Pe_image_resource_data_entry;",
          "412: #define PE_RESOURCE_ENTRY_CURSOR          1",
          "413: #define PE_RESOURCE_ENTRY_BITMAP          2",
          "414: #define PE_RESOURCE_ENTRY_ICON            3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511: #define R_PE_MAX_RESOURCES 2056",
          "",
          "---------------"
        ],
        "libr/core/cbin.c||libr/core/cbin.c": [
          "File: libr/core/cbin.c -> libr/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2662: }",
          "2664: static int bin_versioninfo(RCore *r, int mode) {",
          "2665:  const RBinInfo *info = r_bin_get_info (r->bin);",
          "2666:  if (!info || !info->rclass) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2664: static void bin_pe_resources(RCore *r, int mode) {",
          "2665:  Sdb *sdb = NULL;",
          "2666:  int index = 0;",
          "2667:  const char *pe_path = \"bin/cur/info/pe_resource\";",
          "2668:  if (!(sdb = sdb_ns_path (r->sdb, pe_path, 0))) {",
          "2669:   return;",
          "2670:  }",
          "2671:  if (IS_MODE_SET (mode)) {",
          "2672:   r_flag_space_set (r->flags, \"resources\");",
          "2673:  } else if (IS_MODE_RAD (mode)) {",
          "2674:   r_cons_printf (\"fs resources\\n\");",
          "2675:  } else if (IS_MODE_JSON (mode)) {",
          "2676:   r_cons_printf (\"[\");",
          "2677:  }",
          "2678:  while (true) {",
          "2679:   const char *timestrKey = sdb_fmt (0, \"resource.%d.timestr\", index);",
          "2680:   const char *paddrKey = sdb_fmt (1, \"resource.%d.paddr\", index);",
          "2681:   const char *sizeKey  = sdb_fmt (2, \"resource.%d.size\", index);",
          "2682:   const char *typeKey  = sdb_fmt (3, \"resource.%d.type\", index);",
          "2683:   const char *languageKey = sdb_fmt (4, \"resource.%d.language\", index);",
          "2684:   const char *nameKey = sdb_fmt (5, \"resource.%d.name\", index);",
          "2685:   char *timestr = sdb_get (sdb, timestrKey, 0);",
          "2686:   if (!timestr) {",
          "2687:    break;",
          "2688:   }",
          "2689:   ut64 paddr = sdb_num_get (sdb, paddrKey, 0);",
          "2690:   int size = (int)sdb_num_get (sdb, sizeKey, 0);",
          "2691:   int name = (int)sdb_num_get (sdb, nameKey, 0);",
          "2692:   char *type = sdb_get (sdb, typeKey, 0);",
          "2693:   char *lang = sdb_get (sdb, languageKey, 0);",
          "2695:   if (IS_MODE_SET (mode)) {",
          "2696:    const char *name = sdb_fmt (4, \"resource.%d\", index);",
          "2697:    r_flag_set (r->flags, name, paddr, size);",
          "2698:   } else if (IS_MODE_RAD (mode)) {",
          "2699:    r_cons_printf (\"f resource.%d %d 0x%08\"PFMT32x\"\\n\", index, size, paddr);",
          "2700:   } else if (IS_MODE_JSON (mode)) {",
          "2701:    r_cons_printf(\"%s{\\\"name\\\":%d,\\\"index\\\":%d, \\\"type\\\":\\\"%s\\\",\"",
          "2702:      \"\\\"paddr\\\":%\"PFMT32d\", \\\"size\\\":%d, \\\"lang\\\":\\\"%s\\\"}\",",
          "2703:      index? \",\": \"\", name, index, type, paddr, size, lang);",
          "2704:   } else {",
          "2705:    char *humanSize = r_num_units (NULL, size);",
          "2706:    r_cons_printf (\"Resource %d\\n\", index);",
          "2707:    r_cons_printf (\"\\tname: %d\\n\", name);",
          "2708:    r_cons_printf (\"\\ttimestamp: %s\\n\", timestr);",
          "2709:    r_cons_printf (\"\\tpaddr: 0x%08\"PFMT32x\"\\n\", paddr);",
          "2710:    r_cons_printf (\"\\tsize: %s\\n\", humanSize);",
          "2711:    r_cons_printf (\"\\ttype: %s\\n\", type);",
          "2712:    r_cons_printf (\"\\tlanguage: %s\\n\", lang);",
          "2713:    free (humanSize);",
          "2714:   }",
          "2715:   index++;",
          "2716:  }",
          "2717:  if (IS_MODE_JSON (mode)) {",
          "2718:   r_cons_printf (\"]\");",
          "2719:  } else if (IS_MODE_RAD (mode)) {",
          "2720:   r_cons_printf (\"fs *\");",
          "2721:  }",
          "2722: }",
          "2725: static int bin_resources(RCore *r, int mode) {",
          "2726:  const RBinInfo *info = r_bin_get_info (r->bin);",
          "2727:  if (!info || !info->rclass) {",
          "2728:   return false;",
          "2729:  }",
          "2730:  if (!strncmp (\"pe\", info->rclass, 2)) {",
          "2731:   bin_pe_resources (r, mode);",
          "2732:  }",
          "2733:  return true;",
          "2734: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2790:  if ((action & R_CORE_BIN_ACC_SIZE)) ret &= bin_size (core, mode);",
          "2791:  if ((action & R_CORE_BIN_ACC_MEM)) ret &= bin_mem (core, mode);",
          "2792:  if ((action & R_CORE_BIN_ACC_VERSIONINFO)) ret &= bin_versioninfo (core, mode);",
          "2793:  if ((action & R_CORE_BIN_ACC_SIGNATURE)) ret &= bin_signature (core, mode);",
          "2794:  if ((action & R_CORE_BIN_ACC_FIELDS)) {",
          "2795:   if (IS_MODE_SIMPLE (mode)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2865:  if ((action & R_CORE_BIN_ACC_RESOURCES)) ret &= bin_resources (core, mode);",
          "",
          "---------------"
        ],
        "libr/core/cmd_info.c||libr/core/cmd_info.c": [
          "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:     RBININFO (\"symbols\", R_CORE_BIN_ACC_SYMBOLS, NULL, obj? r_list_length (obj->symbols): 0);",
          "433:     break;",
          "434:    }",
          "436:   case 'r': RBININFO (\"relocs\", R_CORE_BIN_ACC_RELOCS, NULL, 0); break;",
          "437:   case 'd': RBININFO (\"dwarf\", R_CORE_BIN_ACC_DWARF, NULL, -1); break;",
          "438:   case 'i': RBININFO (\"imports\",R_CORE_BIN_ACC_IMPORTS, NULL, obj? r_list_length (obj->imports): 0); break;",
          "",
          "[Removed Lines]",
          "435:   case 'R':",
          "",
          "[Added Lines]",
          "435:   case 'R':",
          "436:    if  (input[1] == '*') {",
          "437:     mode = R_CORE_BIN_RADARE;",
          "438:    } else if (input[1] == 'j') {",
          "439:     mode = R_CORE_BIN_JSON;",
          "440:    }",
          "441:    RBININFO (\"resources\", R_CORE_BIN_ACC_RESOURCES, NULL, 0);",
          "442:    break;",
          "",
          "---------------"
        ],
        "libr/include/r_core.h||libr/include/r_core.h": [
          "File: libr/include/r_core.h -> libr/include/r_core.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: #define R_CORE_BIN_ACC_SIGNATURE 0x20000",
          "469: #define R_CORE_BIN_ACC_RAW_STRINGS 0x40000",
          "470: #define R_CORE_BIN_ACC_HEADER 0x80000",
          "473: #define R_CORE_PRJ_FLAGS 0x0001",
          "474: #define R_CORE_PRJ_EVAL  0x0002",
          "",
          "[Removed Lines]",
          "471: #define R_CORE_BIN_ACC_ALL 0x4FFF",
          "",
          "[Added Lines]",
          "471: #define R_CORE_BIN_ACC_RESOURCES 0x100000",
          "472: #define R_CORE_BIN_ACC_ALL 0x104FFF",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bf80c35d4f84f689edbf42a35cae9762125efc6",
      "candidate_info": {
        "commit_hash": "8bf80c35d4f84f689edbf42a35cae9762125efc6",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/8bf80c35d4f84f689edbf42a35cae9762125efc6",
        "files": [
          "libr/bin/bin.c",
          "libr/core/cmd_info.c",
          "libr/core/file.c"
        ],
        "message": "Fix null derefs in i* when no binobj is loaded",
        "before_after_code_files": [
          "libr/bin/bin.c||libr/bin/bin.c",
          "libr/core/cmd_info.c||libr/core/cmd_info.c",
          "libr/core/file.c||libr/core/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ],
          "candidate": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/bin.c||libr/bin/bin.c": [
          "File: libr/bin/bin.c -> libr/bin/bin.c"
        ],
        "libr/core/cmd_info.c||libr/core/cmd_info.c": [
          "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:    case '.':",
          "276:    case ' ':",
          "277:     if (db) {",
          "280:      free (o);",
          "281:     }",
          "282:     break;",
          "",
          "[Removed Lines]",
          "278:      char *o = sdb_querys (db, NULL, 0, input+2);",
          "279:      if (o && *o) r_cons_print (o);",
          "",
          "[Added Lines]",
          "278:      char *o = sdb_querys (db, NULL, 0, input + 2);",
          "279:      if (o && *o) {",
          "280:       r_cons_print (o);",
          "281:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:    } else  { //iS entropy,sha1",
          "332:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "333:     if (mode == R_CORE_BIN_RADARE || mode == R_CORE_BIN_JSON || mode == R_CORE_BIN_SIMPLE) {",
          "335:     } else {",
          "337:     }",
          "339:     while (*(++input));",
          "",
          "[Removed Lines]",
          "334:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 3, r_list_length (obj->sections));",
          "336:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 2, r_list_length (obj->sections));",
          "",
          "[Added Lines]",
          "336:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 3, obj? r_list_length (obj->sections): 0);",
          "338:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 2, obj? r_list_length (obj->sections): 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "348:     break;",
          "349:    }",
          "350:   case 'h': RBININFO (\"fields\", R_CORE_BIN_ACC_FIELDS, NULL, 0); break;",
          "353:   case 's':",
          "354:    if (input[1] == '.') {",
          "355:     ut64 addr = core->offset + (core->print->cur_enabled? core->print->cur: 0);",
          "",
          "[Removed Lines]",
          "351:   case 'l': RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, r_list_length (obj->libs)); break;",
          "352:   case 'L': r_bin_list (core->bin, input[1]=='j'); break;",
          "",
          "[Added Lines]",
          "353:   case 'l': RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs):0); break;",
          "354:   case 'L':",
          "355:    r_bin_list (core->bin, input[1] == 'j');",
          "356:    break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365:     break;",
          "366:    } else {",
          "367:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "369:     break;",
          "370:    }",
          "371:   case 'R':",
          "372:   case 'r': RBININFO (\"relocs\", R_CORE_BIN_ACC_RELOCS, NULL, 0); break;",
          "373:   case 'd': RBININFO (\"dwarf\", R_CORE_BIN_ACC_DWARF, NULL, -1); break;",
          "375:   case 'I': RBININFO (\"info\", R_CORE_BIN_ACC_INFO, NULL, 0); break;",
          "376:   case 'e': RBININFO (\"entries\", R_CORE_BIN_ACC_ENTRIES, NULL, 0); break;",
          "377:   case 'M': RBININFO (\"main\", R_CORE_BIN_ACC_MAIN, NULL, 0); break;",
          "",
          "[Removed Lines]",
          "368:     RBININFO (\"symbols\", R_CORE_BIN_ACC_SYMBOLS, NULL, r_list_length (obj->symbols));",
          "374:   case 'i': RBININFO (\"imports\",R_CORE_BIN_ACC_IMPORTS, NULL, r_list_length (obj->imports)); break;",
          "",
          "[Added Lines]",
          "372:     RBININFO (\"symbols\", R_CORE_BIN_ACC_SYMBOLS, NULL, obj? r_list_length (obj->symbols): 0);",
          "378:   case 'i': RBININFO (\"imports\",R_CORE_BIN_ACC_IMPORTS, NULL, obj? r_list_length (obj->imports): 0); break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "482:     }",
          "483:    } else {",
          "484:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "486:     RBININFO (\"classes\", R_CORE_BIN_ACC_CLASSES, NULL, len);",
          "487:    }",
          "488:    break;",
          "",
          "[Removed Lines]",
          "485:     int len = r_list_length (obj->classes);",
          "",
          "[Added Lines]",
          "489:     int len = obj? r_list_length (obj->classes): 0;",
          "",
          "---------------"
        ],
        "libr/core/file.c||libr/core/file.c": [
          "File: libr/core/file.c -> libr/core/file.c"
        ]
      }
    },
    {
      "candidate_hash": "0ae4a5c3e8da054e27c0917a8857ba979fa432e0",
      "candidate_info": {
        "commit_hash": "0ae4a5c3e8da054e27c0917a8857ba979fa432e0",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/0ae4a5c3e8da054e27c0917a8857ba979fa432e0",
        "files": [
          "binr/rax2/rax2.c",
          "doc/uncrustify.cfg",
          "libr/core/blaze.c",
          "libr/core/cmd_info.c",
          "libr/core/cmd_project.c",
          "libr/core/file.c",
          "libr/core/graph.c",
          "libr/core/yank.c",
          "sys/indent.sh"
        ],
        "message": "More r2-indent fixes. and reindent a bunch of files",
        "before_after_code_files": [
          "binr/rax2/rax2.c||binr/rax2/rax2.c",
          "libr/core/blaze.c||libr/core/blaze.c",
          "libr/core/cmd_info.c||libr/core/cmd_info.c",
          "libr/core/cmd_project.c||libr/core/cmd_project.c",
          "libr/core/file.c||libr/core/file.c",
          "libr/core/graph.c||libr/core/graph.c",
          "libr/core/yank.c||libr/core/yank.c",
          "sys/indent.sh||sys/indent.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ],
          "candidate": [
            "libr/core/cmd_info.c||libr/core/cmd_info.c"
          ]
        }
      },
      "candidate_diff": {
        "binr/rax2/rax2.c||binr/rax2/rax2.c": [
          "File: binr/rax2/rax2.c -> binr/rax2/rax2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:  return 0;",
          "478: }",
          "481:  int i;",
          "482:  num = r_num_new (NULL, NULL, NULL);",
          "483:  if (argc == 1) {",
          "",
          "[Removed Lines]",
          "480: int main (int argc, char **argv) {",
          "",
          "[Added Lines]",
          "480: int main (int argc, char** argv) {",
          "",
          "---------------"
        ],
        "libr/core/blaze.c||libr/core/blaze.c": [
          "File: libr/core/blaze.c -> libr/core/blaze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  RAnalBlock *bb;",
          "32:  RListIter *iter;",
          "33:  if (abb->bbdb) {",
          "35:  }",
          "36:  r_list_foreach (abb->bbs, iter, bb) {",
          "37:   if (bb->addr == addr) {",
          "",
          "[Removed Lines]",
          "34:   return (int)sdb_num_get (abb->bbdb, sdb_fmt (0, \"0x%08\" PFMT64x, addr), NULL);",
          "",
          "[Added Lines]",
          "34:   return (int) sdb_num_get (abb->bbdb, sdb_fmt (0, \"0x%08\" PFMT64x, addr), NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: }",
          "44: static int fcnExist(AbbState *abb, ut64 addr) {",
          "46:  RListIter *iter;",
          "47: #if 0",
          "48:  if (abb->bbdb) {",
          "50:  }",
          "51: #endif",
          "52:  r_list_foreach (abb->fcnents, iter, a) {",
          "",
          "[Removed Lines]",
          "45:  AbbAddr* a;",
          "49:   return (int)sdb_num_get (abb->bbdb, sdb_fmt (0, \"fcn.0x%08\" PFMT64x, addr), NULL);",
          "",
          "[Added Lines]",
          "45:  AbbAddr *a;",
          "49:   return (int) sdb_num_get (abb->bbdb, sdb_fmt (0, \"fcn.0x%08\" PFMT64x, addr), NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: static RAnalBlock *parseOpcode(AbbState *abb, RAnalOp *aop) {",
          "115:  RFlagItem *fi = r_flag_get_i (abb->core->flags, aop->addr + aop->size);",
          "117:  if (eob) {",
          "118:   aop->fail = UT64_MAX;",
          "119:  }",
          "",
          "[Removed Lines]",
          "116:  bool eob = fi ? true:false; //strncmp (fi->name, \"sym.\", 4): false;",
          "",
          "[Added Lines]",
          "116:  bool eob = fi? true: false; //strncmp (fi->name, \"sym.\", 4): false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:   if (aop->fail != UT64_MAX && !eob) {",
          "151:    appendNextBB (abb, aop->fail, 0, 0);",
          "152:   }",
          "155: #endif",
          "156:   break;",
          "157:  case R_ANAL_OP_TYPE_CJMP:",
          "",
          "[Removed Lines]",
          "153: aop->jump = aop->fail; //UT64_MAX;",
          "154: aop->fail = UT64_MAX;",
          "",
          "[Added Lines]",
          "153:   aop->jump = aop->fail; //UT64_MAX;",
          "154:   aop->fail = UT64_MAX;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "184:   bb->addr = abb->bb_addr;",
          "185:   bb->size = aop->addr - abb->bb_addr + aop->size;",
          "186:   if (bb->size < 1) {",
          "189:    bb->size = aop->size;",
          "190:   }",
          "",
          "[Removed Lines]",
          "187:    eprintf (\"Invalid block size at 0x%08\"PFMT64x\"\\n\", bb->addr);",
          "",
          "[Added Lines]",
          "187:    eprintf (\"Invalid block size at 0x%08\"PFMT64x \"\\n\", bb->addr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "215:  sdb_bool_set (abb->bbdb, sdb_fmt (0, \"bb.0x%08\" PFMT64x \".0x%08\" PFMT64x, fcnaddr, addr), true, 0);",
          "216:  r_cons_printf (\"afb+ 0x%08\" PFMT64x \" 0x%08\" PFMT64x \" %d\", fcnaddr, bb->addr, bb->size);",
          "217:  if (bb->jump != UT64_MAX) {",
          "222:  }",
          "223:  r_cons_newline ();",
          "224:  if (bb->jump != UT64_MAX) {",
          "",
          "[Removed Lines]",
          "218:    r_cons_printf (\" 0x%08\" PFMT64x, bb->jump);",
          "219:    if (bb->fail != UT64_MAX) {",
          "220:     r_cons_printf (\" 0x%08\" PFMT64x, bb->fail);",
          "221:    }",
          "",
          "[Added Lines]",
          "218:   r_cons_printf (\" 0x%08\" PFMT64x, bb->jump);",
          "219:   if (bb->fail != UT64_MAX) {",
          "220:    r_cons_printf (\" 0x%08\" PFMT64x, bb->fail);",
          "221:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "230: }",
          "232: static void printFunction(ut64 addr, const char *name) {",
          "234:  r_cons_printf (\"af+ 0x%08\" PFMT64x \" %s\\n\", addr, _name);",
          "235:  if (!name) {",
          "236:   free (_name);",
          "",
          "[Removed Lines]",
          "233:  char *_name = name? (char *)name: r_str_newf (\"fcn.%\" PFMT64x, addr);",
          "",
          "[Added Lines]",
          "233:  char *_name = name? (char *) name: r_str_newf (\"fcn.%\" PFMT64x, addr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "254:   RFlagItem *fi = r_flag_get_i (core->flags, bb->addr);",
          "255:   if (fi) {",
          "257:   } else {",
          "259:    printFunction (bb->addr, NULL);",
          "260:   }",
          "261:   printBasicBlocks (abb, bb->addr, bb->addr);",
          "264:  }",
          "265: #if 0",
          "",
          "[Removed Lines]",
          "256:    printFunction(bb->addr, fi->name);",
          "",
          "[Added Lines]",
          "256:    printFunction (bb->addr, fi->name);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "289:  ut64 at = core->offset;",
          "290:  abb->addr = at;",
          "292:  int ti = -1;",
          "293:  int oi = 0;",
          "294:  abb->last = at;",
          "",
          "[Removed Lines]",
          "291:  (void)r_io_read_at (core->io, abb->addr, abb->buf, len);",
          "",
          "[Added Lines]",
          "291:  (void) r_io_read_at (core->io, abb->addr, abb->buf, len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "303:   }",
          "304:   oi = i;",
          "305:   ut64 obb_addr = abb->bb_addr;",
          "308:    continue;",
          "309:   }",
          "310:   int next = bbExist (abb, at + i);",
          "",
          "[Removed Lines]",
          "306:  mountain:",
          "307:   if (!r_anal_op (core->anal, &aop, abb->addr + i, abb->buf + i, R_MIN (R_MAX(0, len - i), 16))) {",
          "",
          "[Added Lines]",
          "306: mountain:",
          "307:   if (!r_anal_op (core->anal, &aop, abb->addr + i, abb->buf + i, R_MIN (R_MAX (0, len - i), 16))) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "394:   } else {",
          "395:    name = r_str_newf (\"bb.%\"PFMT64x, bb->addr);",
          "396:   }",
          "398:   free (name);",
          "399:  }",
          "400:  r_list_foreach (abb->bbs, iter, bb) {",
          "401:   if (bb->jump != UT64_MAX) {",
          "403:   }",
          "404:   if (bb->fail != UT64_MAX) {",
          "406:   }",
          "407:  }",
          "408: #endif",
          "",
          "[Removed Lines]",
          "397:   r_cons_printf (\"agn 0x%08\"PFMT64x\" \\\"%s\\\"\\n\", bb->addr, name);",
          "402:    r_cons_printf (\"age 0x%08\"PFMT64x\" 0x%08\"PFMT64x\"\\n\", bb->addr, bb->jump);",
          "405:    r_cons_printf (\"age 0x%08\"PFMT64x\" 0x%08\"PFMT64x\"\\n\", bb->addr, bb->fail);",
          "",
          "[Added Lines]",
          "397:   r_cons_printf (\"agn 0x%08\"PFMT64x \" \\\"%s\\\"\\n\", bb->addr, name);",
          "402:    r_cons_printf (\"age 0x%08\"PFMT64x \" 0x%08\"PFMT64x \"\\n\", bb->addr, bb->jump);",
          "405:    r_cons_printf (\"age 0x%08\"PFMT64x \" 0x%08\"PFMT64x \"\\n\", bb->addr, bb->fail);",
          "",
          "---------------"
        ],
        "libr/core/cmd_info.c||libr/core/cmd_info.c": [
          "File: libr/core/cmd_info.c -> libr/core/cmd_info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   return true;",
          "38:  }",
          "39:  if (res) {",
          "41:   free (res);",
          "42:   return false;",
          "43:  }",
          "",
          "[Removed Lines]",
          "40:   if (*res) printf (\"%s\\n\", res);",
          "",
          "[Added Lines]",
          "40:   if (*res) {",
          "41:    printf (\"%s\\n\", res);",
          "42:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: static int demangle(RCore *core, const char *s) {",
          "48:  char *p, *q;",
          "49:  const char *ss = strchr (s, ' ');",
          "51:  if (!ss) {",
          "52:   const char *lang = r_config_get (core->config, \"bin.lang\");",
          "53:   demangle_internal (core, lang, s);",
          "",
          "[Removed Lines]",
          "50:  if (!*s) return 0;",
          "",
          "[Added Lines]",
          "52:  if (!*s) {",
          "53:   return 0;",
          "54:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:  return 1;",
          "62: }",
          "66:  const char *fn = NULL;",
          "67:  int dbg = r_config_get_i (core->config, \"cfg.debug\");",
          "68:  bool io_cache = r_config_get_i (core->config, \"io.cache\");",
          "",
          "[Removed Lines]",
          "64: #define STR(x) (x)?(x):\"\"",
          "65: static void r_core_file_info (RCore *core, int mode) {",
          "",
          "[Added Lines]",
          "68: #define STR(x) (x)? (x): \"\"",
          "69: static void r_core_file_info(RCore *core, int mode) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:  RBinFile *binfile = r_core_bin_cur (core);",
          "71:  RCoreFile *cf = core->file;",
          "72:  RBinPlugin *plugin = r_bin_file_cur_plugin (binfile);",
          "74:   r_cons_printf (\"{\");",
          "76:   return;",
          "78:   return;",
          "79:  if (info) {",
          "80:   fn = info->file;",
          "81:   switch (mode) {",
          "82:   case R_CORE_BIN_JSON:",
          "84:    break;",
          "85:   default:",
          "86:    pair (\"type\", info->type);",
          "87:    break;",
          "88:   }",
          "89:  } else {",
          "91:  }",
          "92:  if (cf && mode == R_CORE_BIN_JSON) {",
          "93:   const char *uri = fn;",
          "",
          "[Removed Lines]",
          "73:  if (mode == R_CORE_BIN_JSON)",
          "75:  if (mode == R_CORE_BIN_RADARE)",
          "77:  if (mode == R_CORE_BIN_SIMPLE)",
          "83:    r_cons_printf (\"\\\"type\\\":\\\"%s\\\"\", STR(info->type));",
          "90:   fn = (cf && cf->desc) ? cf->desc->name : NULL;",
          "",
          "[Added Lines]",
          "77:  if (mode == R_CORE_BIN_JSON) {",
          "79:  }",
          "80:  if (mode == R_CORE_BIN_RADARE) {",
          "82:  }",
          "83:  if (mode == R_CORE_BIN_SIMPLE) {",
          "85:  }",
          "90:    r_cons_printf (\"\\\"type\\\":\\\"%s\\\"\", STR (info->type));",
          "97:   fn = (cf && cf->desc)? cf->desc->name: NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:    }",
          "100:   }",
          "101:   r_cons_printf (\",\\\"file\\\":\\\"%s\\\"\", uri);",
          "103:   if (cf->desc) {",
          "104:    ut64 fsz = r_io_desc_size (core->io, cf->desc);",
          "105:    r_cons_printf (\",\\\"fd\\\":%d\", cf->desc->fd);",
          "106:    if (fsz != UT64_MAX) {",
          "107:     r_cons_printf (\",\\\"size\\\":%\"PFMT64d, fsz);",
          "108:    }",
          "111:    r_cons_printf (\",\\\"mode\\\":\\\"%s\\\"\", r_str_rwx_i (",
          "115:     r_cons_printf (\",\\\"referer\\\":\\\"%s\\\"\", cf->desc->referer);",
          "116:   }",
          "117:   r_cons_printf (\",\\\"block\\\":%d\", core->blocksize);",
          "118:   if (binfile) {",
          "120:     r_cons_printf (\",\\\"packet\\\":\\\"%s\\\"\",",
          "121:      binfile->curxtr->name);",
          "123:     r_cons_printf (\",\\\"format\\\":\\\"%s\\\"\",",
          "124:      plugin->name);",
          "125:   }",
          "126:   r_cons_printf (\"}\");",
          "127:  } else if (cf && mode != R_CORE_BIN_SIMPLE) {",
          "131:   if (cf->desc) {",
          "132:    ut64 fsz = r_io_desc_size (core->io, cf->desc);",
          "134:     pair (\"referer\", cf->desc->referer);",
          "135:    pair (\"fd\", sdb_fmt (0, \"%d\", cf->desc->fd));",
          "136:    if (fsz != UT64_MAX) {",
          "137:     pair (\"size\", sdb_fmt (0,\"0x%\"PFMT64x, fsz));",
          "138:    }",
          "141:    pair (\"blksz\", sdb_fmt (0, \"0x%\"PFMT64x,",
          "143:    pair (\"mode\", r_str_rwx_i (cf->desc->flags & 7));",
          "144:   }",
          "145:   pair (\"block\", sdb_fmt (0, \"0x%x\", core->blocksize));",
          "147:    pair (\"packet\", binfile->curxtr->name);",
          "149:    pair (\"format\", plugin->name);",
          "150:  }",
          "151: }",
          "154:  RListIter *it;",
          "156:  if (obj) {",
          "157:   if (obj->info && obj->info->arch) {",
          "158:    return true;",
          "159:   }",
          "160:   r_list_foreach (obj->sections, it, sec){",
          "162:     return true;",
          "163:   }",
          "164:  }",
          "165:  return false;",
          "",
          "[Removed Lines]",
          "102:   if (dbg) dbg = R_IO_WRITE | R_IO_EXEC;",
          "109:    r_cons_printf (\",\\\"iorw\\\":%s\", r_str_bool ( io_cache || \\",
          "110:     cf->desc->flags & R_IO_WRITE ));",
          "112:     cf->desc->flags & 7 ));",
          "113:    r_cons_printf (\",\\\"obsz\\\":%\"PFMT64d, (ut64)core->io->desc->obsz);",
          "114:    if (cf->desc->referer && *cf->desc->referer)",
          "119:    if (binfile->curxtr)",
          "122:    if (plugin)",
          "129:   pair (\"file\", fn ? fn : cf->desc->uri);",
          "130:   if (dbg) dbg = R_IO_WRITE | R_IO_EXEC;",
          "133:    if (cf->desc->referer && *cf->desc->referer)",
          "139:    pair (\"iorw\", r_str_bool ( io_cache || \\",
          "140:     cf->desc->flags & R_IO_WRITE ));",
          "142:     (ut64)core->io->desc->obsz));",
          "146:   if (binfile && binfile->curxtr)",
          "148:   if (plugin)",
          "153: static int bin_is_executable (RBinObject *obj){",
          "155:  RBinSection* sec;",
          "161:    if (R_BIN_SCN_EXECUTABLE & sec->srwx)",
          "",
          "[Added Lines]",
          "109:   if (dbg) {",
          "110:    dbg = R_IO_WRITE | R_IO_EXEC;",
          "111:   }",
          "118:    r_cons_printf (\",\\\"iorw\\\":%s\", r_str_bool ( io_cache ||\\",
          "119:      cf->desc->flags & R_IO_WRITE ));",
          "121:      cf->desc->flags & 7 ));",
          "122:    r_cons_printf (\",\\\"obsz\\\":%\"PFMT64d, (ut64) core->io->desc->obsz);",
          "123:    if (cf->desc->referer && *cf->desc->referer) {",
          "125:    }",
          "129:    if (binfile->curxtr) {",
          "132:    }",
          "133:    if (plugin) {",
          "136:    }",
          "141:   pair (\"file\", fn? fn: cf->desc->uri);",
          "142:   if (dbg) {",
          "143:    dbg = R_IO_WRITE | R_IO_EXEC;",
          "144:   }",
          "147:    if (cf->desc->referer && *cf->desc->referer) {",
          "149:    }",
          "154:    pair (\"iorw\", r_str_bool ( io_cache ||\\",
          "155:      cf->desc->flags & R_IO_WRITE ));",
          "157:      (ut64) core->io->desc->obsz));",
          "161:   if (binfile && binfile->curxtr) {",
          "163:   }",
          "164:   if (plugin) {",
          "166:   }",
          "170: static int bin_is_executable(RBinObject *obj){",
          "172:  RBinSection *sec;",
          "178:    if (R_BIN_SCN_EXECUTABLE & sec->srwx) {",
          "180:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "209: }",
          "211: static int cmd_info(void *data, const char *input) {",
          "213:  bool newline = r_config_get_i (core->config, \"scr.interactive\");",
          "214:  RBinObject *o = r_bin_cur_object (core->bin);",
          "215:  RCoreFile *cf = core->file;",
          "",
          "[Removed Lines]",
          "212:  RCore *core = (RCore *)data;",
          "",
          "[Added Lines]",
          "230:  RCore *core = (RCore *) data;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "218:  int is_array = 0;",
          "219:  Sdb *db;",
          "222:   switch (input[i]) {",
          "223:   case '*': mode = R_CORE_BIN_RADARE; break;",
          "224:   case 'j': mode = R_CORE_BIN_JSON; break;",
          "",
          "[Removed Lines]",
          "221:  for (i = 0; input[i] && i<2; i++) {",
          "",
          "[Added Lines]",
          "239:  for (i = 0; input[i] && i < 2; i++) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "227:  }",
          "229:  if (mode == R_CORE_BIN_JSON) {",
          "231:    is_array = 1;",
          "232:  }",
          "233:  if (is_array) {",
          "234:   r_cons_printf (\"{\");",
          "",
          "[Removed Lines]",
          "230:   if (strlen (input+1)>1)",
          "",
          "[Added Lines]",
          "248:   if (strlen (input + 1) > 1) {",
          "250:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "244:  while (*input) {",
          "245:   switch (*input) {",
          "246:   case 'b': // \"ib\"",
          "248:    ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");",
          "249:    if (input[1] == ' ') {",
          "251:    }",
          "",
          "[Removed Lines]",
          "247:    {",
          "250:     baddr = r_num_math (core->num, input+1);",
          "",
          "[Added Lines]",
          "266:   {",
          "269:     baddr = r_num_math (core->num, input + 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "256:    r_core_bin_reload (core, NULL, baddr);",
          "257:    r_core_block_read (core);",
          "258:    newline = false;",
          "261:   case 'k':",
          "264:    switch (input[1]) {",
          "265:    case 'v':",
          "266:     if (db) {",
          "269:      free (o);",
          "270:     }",
          "271:     break;",
          "",
          "[Removed Lines]",
          "259:    }",
          "260:    break;",
          "262:    db = o ? o->kv : NULL;",
          "267:      char *o = sdb_querys (db, NULL, 0, input+3);",
          "268:      if (o && *o) r_cons_print (o);",
          "",
          "[Added Lines]",
          "278:   }",
          "279:   break;",
          "281:    db = o? o->kv: NULL;",
          "286:      char *o = sdb_querys (db, NULL, 0, input + 3);",
          "287:      if (o && *o) {",
          "288:       r_cons_print (o);",
          "289:      }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "285:    case '\\0':",
          "286:     if (db) {",
          "287:      char *o = sdb_querys (db, NULL, 0, \"*\");",
          "289:      free (o);",
          "290:     }",
          "291:     break;",
          "",
          "[Removed Lines]",
          "288:      if (o && *o) r_cons_print (o);",
          "",
          "[Added Lines]",
          "309:      if (o && *o) {",
          "310:       r_cons_print (o);",
          "311:      }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "297:    goto done;",
          "298:    break;",
          "299:   case 'o':",
          "308:    }",
          "317:   case 'A':",
          "318:    newline = false;",
          "320:     r_cons_printf (\"{\");",
          "321:     r_bin_list_archs (core->bin, 'j');",
          "322:     r_cons_printf (\"}\\n\");",
          "",
          "[Removed Lines]",
          "300:    {",
          "301:     if (!cf) {",
          "302:      eprintf (\"Core file not open\\n\");",
          "303:      return 0;",
          "304:     }",
          "305:     const char *fn = input[1]==' '? input+2: cf->desc->name;",
          "306:     ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");",
          "307:     r_core_bin_load (core, fn, baddr);",
          "309:    break;",
          "310:  #define RBININFO(n,x,y,z) \\",
          "311:  if (is_array) { \\",
          "312:   if (is_array == 1) is_array++; else r_cons_printf (\",\"); \\",
          "313:   r_cons_printf (\"\\\"%s\\\":\",n); \\",
          "314:  }\\",
          "315:  if (z) playMsg(core, n, z);\\",
          "316:  r_core_bin_info (core, x, mode, va, NULL, y);",
          "319:    if (input[1]=='j') {",
          "",
          "[Added Lines]",
          "323:   {",
          "324:    if (!cf) {",
          "325:     eprintf (\"Core file not open\\n\");",
          "326:     return 0;",
          "328:    const char *fn = input[1] == ' '? input + 2: cf->desc->name;",
          "329:    ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");",
          "330:    r_core_bin_load (core, fn, baddr);",
          "331:   }",
          "332:   break;",
          "333:    #define RBININFO(n,x,y,z)\\",
          "334:     if (is_array) {\\",
          "335:      if (is_array == 1) { is_array++;\\",
          "336:      } else { r_cons_printf (\",\");}\\",
          "337:      r_cons_printf (\"\\\"%s\\\":\",n);\\",
          "338:     }\\",
          "339:     if (z) { playMsg (core, n, z);}\\",
          "340:     r_core_bin_info (core, x, mode, va, NULL, y);",
          "343:    if (input[1] == 'j') {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "331:    if ((input[1] == 'm' && input[2] == 'z') || !input[1]) {",
          "332:     RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, NULL, 0);",
          "334:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "335:     if (mode == R_CORE_BIN_RADARE || mode == R_CORE_BIN_JSON || mode == R_CORE_BIN_SIMPLE) {",
          "338:     } else {",
          "341:     }",
          "346:     input--;",
          "",
          "[Removed Lines]",
          "333:    } else  { //iS entropy,sha1",
          "336:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 2,",
          "337:         obj ? r_list_length (obj->sections) : 0);",
          "339:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 1,",
          "340:         obj ? r_list_length (obj->sections) : 0);",
          "343:     while (*(++input));",
          "",
          "[Added Lines]",
          "357:    } else {  //iS entropy,sha1",
          "360:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 2,",
          "361:       obj? r_list_length (obj->sections): 0);",
          "363:      RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 1,",
          "364:       obj? r_list_length (obj->sections): 0);",
          "367:     while (*(++input)) ;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "352:     break;",
          "353:    }",
          "354:   case 'h': RBININFO (\"fields\", R_CORE_BIN_ACC_FIELDS, NULL, 0); break;",
          "356:   case 'L':",
          "357:    r_bin_list (core->bin, input[1] == 'j');",
          "358:    break;",
          "",
          "[Removed Lines]",
          "355:   case 'l': RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs):0); break;",
          "",
          "[Added Lines]",
          "379:   case 'l': RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0); break;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "364:      if (f->offset == addr || !f->offset) {",
          "365:       r_cons_printf (\"%s\", f->name);",
          "366:      } else {",
          "368:      }",
          "369:     }",
          "370:     input++;",
          "",
          "[Removed Lines]",
          "367:       r_cons_printf (\"%s+%d\", f->name, (int)(addr-f->offset));",
          "",
          "[Added Lines]",
          "391:       r_cons_printf (\"%s+%d\", f->name, (int) (addr - f->offset));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "401:       mode = R_CORE_BIN_SIMPLE;",
          "402:      }",
          "403:      break;",
          "405:      mode = R_CORE_BIN_PRINT;",
          "406:      break;",
          "407:     }",
          "",
          "[Removed Lines]",
          "404:     default:",
          "",
          "[Added Lines]",
          "428:     default:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "416:      input++;",
          "417:     }",
          "418:     if (obj) {",
          "420:       obj? r_list_length (obj->strings): 0);",
          "421:     }",
          "422:    }",
          "423:    break;",
          "424:   case 'c': // for r2 `ic`",
          "426:     eprintf (\"Usage: ic[ljq*] [class-index]\\n\");",
          "428:     RBinClass *cls;",
          "429:     RBinSymbol *sym;",
          "430:     RListIter *iter, *iter2;",
          "431:     RBinObject *obj = r_bin_cur_object (core->bin);",
          "433:     int count = 0;",
          "434:     if (obj) {",
          "435:      if (input[2]) {",
          "",
          "[Removed Lines]",
          "419:      RBININFO (\"strings\", R_CORE_BIN_ACC_STRINGS, NULL,",
          "425:    if (input[1]== '?') {",
          "427:    } else if (input[1]== ' ' || input[1] == 'q' || input[1] == 'j' || input[1] == 'l') {",
          "432:     int idx = r_num_math (core->num, input +2);",
          "",
          "[Added Lines]",
          "443:      RBININFO (\"strings\", R_CORE_BIN_ACC_STRINGS, NULL,",
          "449:    if (input[1] == '?') {",
          "451:    } else if (input[1] == ' ' || input[1] == 'q' || input[1] == 'j' || input[1] == 'l') {",
          "456:     int idx = r_num_math (core->num, input + 2);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "440:        switch (input[1]) {",
          "441:        case '*':",
          "442:         r_list_foreach (cls->methods, iter2, sym) {",
          "445:         }",
          "446:         input++;",
          "447:         break;",
          "",
          "[Removed Lines]",
          "443:          r_cons_printf (\"f sym.%s @ 0x%\"PFMT64x\"\\n\",",
          "444:            sym->name, sym->vaddr);",
          "",
          "[Added Lines]",
          "467:          r_cons_printf (\"f sym.%s @ 0x%\"PFMT64x \"\\n\",",
          "468:           sym->name, sym->vaddr);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "459:         r_cons_printf (\",\\\"methods\\\":[\");",
          "460:         r_list_foreach (cls->methods, iter2, sym) {",
          "461:          const char *comma = iter2->p? \",\": \"\";",
          "464:         }",
          "465:         r_cons_printf (\"]\");",
          "466:         break;",
          "467:        default:",
          "468:         r_cons_printf (\"class %s\\n\", cls->name);",
          "469:         r_list_foreach (cls->methods, iter2, sym) {",
          "472:         }",
          "473:         break;",
          "474:        }",
          "",
          "[Removed Lines]",
          "462:          r_cons_printf (\"%s{\\\"name\\\":\\\"%s\\\",\\\"vaddr\\\":%\"PFMT64d\"}\",",
          "463:            comma, sym->name, sym->vaddr);",
          "470:          r_cons_printf (\"0x%08\"PFMT64x\" method %s %s\\n\",",
          "471:            sym->vaddr, cls->name, sym->name);",
          "",
          "[Added Lines]",
          "486:          r_cons_printf (\"%s{\\\"name\\\":\\\"%s\\\",\\\"vaddr\\\":%\"PFMT64d \"}\",",
          "487:           comma, sym->name, sym->vaddr);",
          "494:          r_cons_printf (\"0x%08\"PFMT64x \" method %s %s\\n\",",
          "495:           sym->vaddr, cls->name, sym->name);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "498:    }",
          "499:    break;",
          "500:   case 'D':",
          "502:     eprintf (\"|Usage: iD lang symbolname\\n\");",
          "503:    }",
          "504:    return 0;",
          "",
          "[Removed Lines]",
          "501:    if (input[1]!=' ' || !demangle (core, input + 2)) {",
          "",
          "[Added Lines]",
          "525:    if (input[1] != ' ' || !demangle (core, input + 2)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "511:    }",
          "512:    break;",
          "513:   case '?': {",
          "515:     \"Usage: i\", \"\", \"Get info from opened file (see rabin2's manpage)\",",
          "516:     \"Output mode:\", \"\", \"\",",
          "517:     \"'*'\", \"\", \"Output in radare commands\",",
          "",
          "[Removed Lines]",
          "514:    const char * help_message[] = {",
          "",
          "[Added Lines]",
          "538:    const char *help_message[] = {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "546:     \"izz\", \"\", \"Search for Strings in the whole binary\",",
          "547:     \"iZ\", \"\", \"Guess size of binary program\",",
          "548:     NULL",
          "552:    goto done;",
          "553:   case '*':",
          "554:    mode = R_CORE_BIN_RADARE;",
          "",
          "[Removed Lines]",
          "549:     };",
          "550:     r_core_cmd_help (core, help_message);",
          "551:    }",
          "",
          "[Added Lines]",
          "573:    };",
          "574:    r_core_cmd_help (core, help_message);",
          "575:   }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "574:   }",
          "575:  }",
          "576: done:",
          "578:   r_cons_printf (\"}\\n\");",
          "580:  return 0;",
          "581: }",
          "",
          "[Removed Lines]",
          "577:  if (is_array)",
          "579:  if (newline) r_cons_newline();",
          "",
          "[Added Lines]",
          "601:  if (is_array) {",
          "603:  }",
          "604:  if (newline) {",
          "605:   r_cons_newline ();",
          "606:  }",
          "",
          "---------------"
        ],
        "libr/core/cmd_project.c||libr/core/cmd_project.c": [
          "File: libr/core/cmd_project.c -> libr/core/cmd_project.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"r_print.h\"",
          "7: static int cmd_project(void *data, const char *input) {",
          "10:  const char *fileproject = r_config_get (core->config, \"prj.name\");",
          "11:  char *str = NULL;",
          "",
          "[Removed Lines]",
          "8:  RCore *core = (RCore *)data;",
          "9:  const char *file, *arg = (input && *input)? input+1: NULL;",
          "",
          "[Added Lines]",
          "8:  RCore *core = (RCore *) data;",
          "9:  const char *file, *arg = (input && *input)? input + 1: NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  file = arg;",
          "29:  switch (input[0]) {",
          "30:  case 'c':",
          "33:   } else {",
          "34:    eprintf (\"Usage: Pc [prjname]\\n\");",
          "35:   }",
          "36:   break;",
          "37:  case 'o':",
          "39:   if (input[1] == '&') {",
          "40:    r_core_project_open (core, file, true);",
          "41:   } else if (input[1]) {",
          "",
          "[Removed Lines]",
          "31:   if (input[1]==' ') {",
          "32:    r_core_project_cat (core, input+2);",
          "",
          "[Added Lines]",
          "31:   if (input[1] == ' ') {",
          "32:    r_core_project_cat (core, input + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:   break;",
          "64:  case 'S':",
          "65:   if (input[1] == ' ') {",
          "67:   } else {",
          "68:    eprintf (\"Usage: PS [file]\\n\");",
          "69:   }",
          "",
          "[Removed Lines]",
          "66:    r_core_project_save_rdb (core, input+2, R_CORE_PRJ_ALL);",
          "",
          "[Added Lines]",
          "66:    r_core_project_save_rdb (core, input + 2, R_CORE_PRJ_ALL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:  case 'n':",
          "72:   if (!fileproject || !*fileproject) {",
          "73:    eprintf (\"No project\\n\");",
          "78:    {",
          "96:       }",
          "97:      }",
          "125:      fclose (fd);",
          "126:     }",
          "129:    }",
          "130:    break;",
          "142:      }",
          "144:      free (str);",
          "145:     }",
          "150:      char *str = r_core_project_notes_file (core, fileproject);",
          "151:      if (str) {",
          "153:       free (str);",
          "154:      }",
          "156:     }",
          "165:    {",
          "173:    }",
          "174:    break;",
          "176:    {",
          "178:      \"Usage:\", \"Pn[j-?] [...]\", \"Project Notes\",",
          "179:      \"Pn\", \"\", \"show project notes\",",
          "180:      \"Pn\", \" -\", \"edit notes with cfg.editor\",",
          "",
          "[Removed Lines]",
          "74:   } else",
          "75:   switch (input[1]) {",
          "76:   case '-':",
          "79:    FILE *fd = r_sandbox_fopen (str, \"w\");",
          "80:    if (!fd) {",
          "81:     eprintf (\"Cannot open %s\\n\", str);",
          "82:    } else {",
          "83:     char *str = r_core_project_notes_file (core, fileproject);",
          "84:     char *data = r_file_slurp (str, NULL);",
          "85:     int del = 0;",
          "86:     if (data) {",
          "87:      char *ptr, *nl;",
          "88:      for (ptr = data; ptr; ptr = nl)  {",
          "89:       nl = strchr (ptr, '\\n');",
          "90:       if (nl) {",
          "92:        if (strstr (ptr, input+2))",
          "93:         del++;",
          "94:        else",
          "95:         fprintf (fd, \"%s\\n\", ptr);",
          "98:      free (data);",
          "99:     }",
          "100:     if (del>0) {",
          "101:      eprintf (\"Deleted %d lines\\n\", del);",
          "102:     }",
          "103:     free (str);",
          "104:     fclose (fd);",
          "105:    }",
          "106:    }",
          "107:    break;",
          "108:   case ' ':",
          "109:    if (input[2]=='-') {",
          "110:     char *str = r_core_project_notes_file (core, fileproject);",
          "112:     const char *editor = r_config_get (core->config, \"cfg.editor\");",
          "113:     if (str && *str && editor && *editor)",
          "114:      r_sys_cmdf (\"%s %s\", editor, str);",
          "115:     else eprintf (\"No cfg.editor configured\\n\");",
          "116:     free (str);",
          "117:    } else {",
          "120:     char *str = r_core_project_notes_file (core, fileproject);",
          "121:     char *data = r_file_slurp (str, NULL);",
          "122:     FILE *fd = r_sandbox_fopen (str, \"a\");",
          "123:     if (fd) {",
          "124:      fprintf (fd, \"%s\\n\", input+2);",
          "127:     free (str);",
          "128:     free (data);",
          "131:   case 'j':",
          "132:    if (!input[2]) {",
          "133:     int len = 0;",
          "135:     char *str = r_core_project_notes_file (core, fileproject);",
          "136:     if (str) {",
          "137:      char *data = r_file_slurp (str, &len);",
          "138:      char *res = r_base64_encode_dyn (data, len);",
          "139:      if (res) {",
          "140:       r_cons_println (res);",
          "141:       free (res);",
          "143:      free (data);",
          "146:    } else if (input[2] == ' ') {",
          "148:     ut8 *data = r_base64_decode_dyn (input+3, -1);",
          "149:     if (data) {",
          "152:       r_file_dump (str, data, strlen ((const char*)data), 0);",
          "155:      free (data);",
          "157:    } else {",
          "158:     eprintf (\"Usage: `Pnj` or `Pnj ...`\\n\");",
          "159:    }",
          "160:    break;",
          "161:   case 'x':",
          "162:    r_core_project_execute_cmds (core, fileproject);",
          "163:    break;",
          "164:   case 0:",
          "166:    char *str = r_core_project_notes_file (core, fileproject);",
          "167:    char *data = r_file_slurp (str, NULL);",
          "168:    if (data) {",
          "169:     r_cons_println (data);",
          "170:     free (data);",
          "171:    }",
          "172:    free (str);",
          "175:   case '?':",
          "177:     const char* help_msg[] = {",
          "",
          "[Added Lines]",
          "74:   } else {",
          "75:    switch (input[1]) {",
          "76:    case '-':",
          "79:     FILE *fd = r_sandbox_fopen (str, \"w\");",
          "80:     if (!fd) {",
          "81:      eprintf (\"Cannot open %s\\n\", str);",
          "82:     } else {",
          "83:      char *str = r_core_project_notes_file (core, fileproject);",
          "84:      char *data = r_file_slurp (str, NULL);",
          "85:      int del = 0;",
          "86:      if (data) {",
          "87:       char *ptr, *nl;",
          "88:       for (ptr = data; ptr; ptr = nl)  {",
          "89:        nl = strchr (ptr, '\\n');",
          "90:        if (nl) {",
          "92:         if (strstr (ptr, input + 2)) {",
          "93:          del++;",
          "94:         } else {",
          "95:          fprintf (fd, \"%s\\n\", ptr);",
          "96:         }",
          "97:        }",
          "99:       free (data);",
          "101:      if (del > 0) {",
          "102:       eprintf (\"Deleted %d lines\\n\", del);",
          "103:      }",
          "104:      free (str);",
          "109:    case ' ':",
          "110:     if (input[2] == '-') {",
          "111:      char *str = r_core_project_notes_file (core, fileproject);",
          "113:      const char *editor = r_config_get (core->config, \"cfg.editor\");",
          "114:      if (str && *str && editor && *editor) {",
          "115:       r_sys_cmdf (\"%s %s\", editor, str);",
          "116:      } else {",
          "117:       eprintf (\"No cfg.editor configured\\n\");",
          "120:     } else {",
          "123:      char *str = r_core_project_notes_file (core, fileproject);",
          "124:      char *data = r_file_slurp (str, NULL);",
          "125:      FILE *fd = r_sandbox_fopen (str, \"a\");",
          "126:      if (fd) {",
          "127:       fprintf (fd, \"%s\\n\", input + 2);",
          "128:       fclose (fd);",
          "129:      }",
          "130:      free (str);",
          "131:      free (data);",
          "133:     break;",
          "134:    case 'j':",
          "135:     if (!input[2]) {",
          "136:      int len = 0;",
          "140:       char *data = r_file_slurp (str, &len);",
          "141:       char *res = r_base64_encode_dyn (data, len);",
          "142:       if (res) {",
          "143:        r_cons_println (res);",
          "144:        free (res);",
          "145:       }",
          "146:       free (data);",
          "149:     } else if (input[2] == ' ') {",
          "151:      ut8 *data = r_base64_decode_dyn (input + 3, -1);",
          "152:      if (data) {",
          "153:       char *str = r_core_project_notes_file (core, fileproject);",
          "154:       if (str) {",
          "155:        r_file_dump (str, data, strlen ((const char *) data), 0);",
          "156:        free (str);",
          "157:       }",
          "158:       free (data);",
          "159:      }",
          "160:     } else {",
          "161:      eprintf (\"Usage: `Pnj` or `Pnj ...`\\n\");",
          "163:     break;",
          "164:    case 'x':",
          "165:     r_core_project_execute_cmds (core, fileproject);",
          "166:     break;",
          "167:    case 0:",
          "169:     char *str = r_core_project_notes_file (core, fileproject);",
          "170:     char *data = r_file_slurp (str, NULL);",
          "171:     if (data) {",
          "172:      r_cons_println (data);",
          "173:      free (data);",
          "174:     }",
          "175:     free (str);",
          "178:    case '?':",
          "180:     const char *help_msg[] = {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "183:      \"Pnx\", \"\", \"run project note commands\",",
          "184:      \"Pnj\", \"\", \"show notes in base64\",",
          "185:      \"Pnj\", \" [base64]\", \"set notes in base64\",",
          "187:     r_core_cmd_help (core, help_msg);",
          "188:    }",
          "189:    break;",
          "190:   }",
          "191:   break;",
          "192:  case 'i':",
          "",
          "[Removed Lines]",
          "186:      NULL};",
          "",
          "[Added Lines]",
          "189:      NULL",
          "190:     };",
          "194:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "197:   }",
          "198:   break;",
          "199:  default: {",
          "215:   r_core_cmd_help (core, help_msg);",
          "217:   break;",
          "218:  }",
          "219:  free (str);",
          "",
          "[Removed Lines]",
          "200:   const char* help_msg[] = {",
          "201:   \"Usage:\", \"P[?osi] [file]\", \"Project management\",",
          "202:   \"Pc\", \" [file]\", \"show project script to console\",",
          "203:   \"Pd\", \" [file]\", \"delete project\",",
          "204:   \"Pi\", \" [file]\", \"show project information\",",
          "205:   \"Pl\", \"\", \"list all projects\",",
          "206:   \"Pn\", \"[j]\", \"show project notes (Pnj for json)\",",
          "207:   \"Pn\", \" [base64]\", \"set notes text\",",
          "208:   \"Pn\", \" -\", \"edit notes with cfg.editor\",",
          "209:   \"Po\", \" [file]\", \"open project\",",
          "210:   \"Ps\", \" [file]\", \"save project\",",
          "211:   \"PS\", \" [file]\", \"save script file\",",
          "212:   \"NOTE:\", \"\", \"See 'e??prj.'\",",
          "213:   \"NOTE:\", \"\", \"project are stored in ~/.config/radare2/projects\",",
          "214:   NULL};",
          "216:   }",
          "",
          "[Added Lines]",
          "205:   const char *help_msg[] = {",
          "206:    \"Usage:\", \"P[?osi] [file]\", \"Project management\",",
          "207:    \"Pc\", \" [file]\", \"show project script to console\",",
          "208:    \"Pd\", \" [file]\", \"delete project\",",
          "209:    \"Pi\", \" [file]\", \"show project information\",",
          "210:    \"Pl\", \"\", \"list all projects\",",
          "211:    \"Pn\", \"[j]\", \"show project notes (Pnj for json)\",",
          "212:    \"Pn\", \" [base64]\", \"set notes text\",",
          "213:    \"Pn\", \" -\", \"edit notes with cfg.editor\",",
          "214:    \"Po\", \" [file]\", \"open project\",",
          "215:    \"Ps\", \" [file]\", \"save project\",",
          "216:    \"PS\", \" [file]\", \"save script file\",",
          "217:    \"NOTE:\", \"\", \"See 'e??prj.'\",",
          "218:    \"NOTE:\", \"\", \"project are stored in ~/.config/radare2/projects\",",
          "219:    NULL",
          "220:   };",
          "222:  }",
          "",
          "---------------"
        ],
        "libr/core/file.c||libr/core/file.c": [
          "File: libr/core/file.c -> libr/core/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdlib.h>",
          "5: #include <string.h>",
          "12: R_API int r_core_file_reopen(RCore *core, const char *args, int perm, int loadbin) {",
          "13:  int isdebug = r_config_get_i (core->config, \"cfg.debug\");",
          "",
          "[Removed Lines]",
          "7: #define UPDATE_TIME(a) r->times->file_open_time = r_sys_now() - a",
          "9: static int r_core_file_do_load_for_debug (RCore *r, ut64 loadaddr, const char *filenameuri);",
          "10: static int r_core_file_do_load_for_io_plugin (RCore *r, ut64 baseaddr, ut64 loadaddr);",
          "",
          "[Added Lines]",
          "7: #define UPDATE_TIME(a) r->times->file_open_time = r_sys_now () - a",
          "9: static int r_core_file_do_load_for_debug(RCore *r, ut64 loadaddr, const char *filenameuri);",
          "10: static int r_core_file_do_load_for_io_plugin(RCore *r, ut64 baseaddr, ut64 loadaddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:  ut64 ofrom = 0, laddr = r_config_get_i (core->config, \"bin.laddr\");",
          "16:  RCoreFile *file = NULL;",
          "17:  RCoreFile *ofile = core->file;",
          "23:  int newpid, ret = false;",
          "24:  ut64 origoff = core->offset;",
          "25:  if (odesc) {",
          "",
          "[Removed Lines]",
          "18:  RBinFile *bf = (ofile && ofile->desc)",
          "19:    ? r_bin_file_find_by_fd (core->bin, ofile->desc->fd)",
          "20:    : NULL;",
          "21:  RIODesc *odesc = ofile ? ofile->desc : NULL;",
          "22:  char *ofilepath = NULL, *obinfilepath = bf ? strdup (bf->file) : NULL;",
          "",
          "[Added Lines]",
          "18:  RBinFile *bf = (ofile && ofile->desc)",
          "19:  ? r_bin_file_find_by_fd (core->bin, ofile->desc->fd)",
          "20:   : NULL;",
          "21:  RIODesc *odesc = ofile? ofile->desc: NULL;",
          "22:  char *ofilepath = NULL, *obinfilepath = bf? strdup (bf->file): NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:   free (obinfilepath);",
          "42:   return false;",
          "43:  }",
          "46:  if (isdebug) {",
          "47:   r_debug_kill (core->dbg, core->dbg->pid, core->dbg->tid, 9); // KILL",
          "",
          "[Removed Lines]",
          "44:  newpid = odesc ? odesc->fd : -1;",
          "",
          "[Added Lines]",
          "44:  newpid = odesc? odesc->fd: -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:   }",
          "103:   if (core->bin->cur && file->desc && !loadbin) {",
          "105:    core->bin->cur = NULL;",
          "106:   }",
          "108:  } else if (ofile) {",
          "109:   eprintf (\"r_core_file_reopen: Cannot reopen file: %s with perms 0x%04x,\"",
          "113:   r_core_file_set_by_file (core, ofile);",
          "",
          "[Removed Lines]",
          "110:         \" attempting to open read-only.\\n\", path, perm);",
          "",
          "[Added Lines]",
          "110:    \" attempting to open read-only.\\n\", path, perm);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:   r_debug_select (core->dbg, newpid, newtid);",
          "138:  }",
          "139:  if (core->file) {",
          "142:   if (desc) {",
          "143: #if 0",
          "144:    r_io_raise (core->io, desc->fd);",
          "",
          "[Removed Lines]",
          "140:   RCoreFile * cf = core->file;",
          "141:   RIODesc *desc = cf ? cf->desc : NULL;",
          "",
          "[Added Lines]",
          "140:   RCoreFile *cf = core->file;",
          "141:   RIODesc *desc = cf? cf->desc: NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146: #endif",
          "147:    r_core_block_read (core);",
          "148:   } else {",
          "150:    eprintf (\"Error: Unable to switch the view to file: %s\\n\", name);",
          "151:   }",
          "152:  }",
          "",
          "[Removed Lines]",
          "149:    const char *name = (cf && cf->desc) ? cf->desc->name : \"ERROR\";",
          "",
          "[Added Lines]",
          "149:    const char *name = (cf && cf->desc)? cf->desc->name: \"ERROR\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "206:  };",
          "207:  r_core_cmd_help (core, help_msg);",
          "208: }",
          "",
          "[Removed Lines]",
          "178: R_API void r_core_sysenv_help(const RCore* core) {",
          "179:  const char* help_msg[] = {",
          "180:  \"Usage:\", \"!<cmd>\", \"  Run given command as in system(3)\",",
          "181:  \"!\", \"\", \"list all historic commands\",",
          "182:  \"!\", \"ls\", \"execute 'ls' in shell\",",
          "183:  \"!!\", \"\", \"save command history to hist file\",",
          "184:  \"!!\", \"ls~txt\", \"print output of 'ls' and grep for 'txt'\",",
          "185:  \".!\", \"rabin2 -rpsei ${FILE}\", \"run each output line as a r2 cmd\",",
          "186:  \"!\", \"echo $SIZE\", \"display file size\",",
          "187:  \"!=!\", \"\", \"enable remotecmd mode\",",
          "188:  \"=!=\", \"\", \"disable remotecmd mode\",",
          "189:  \"\\nEnvironment:\", \"\", \"\",",
          "190:  \"R2_FILE\", \"\", \"file name\",",
          "191:  \"R2_OFFSET\", \"\", \"10base offset 64bit value\",",
          "192:  \"R2_BYTES\", \"\", \"TODO: variable with bytes in curblock\",",
          "193:  \"R2_XOFFSET\", \"\", \"same as above, but in 16 base\",",
          "194:  \"R2_BSIZE\", \"\", \"block size\",",
          "195:  \"R2_ENDIAN\", \"\", \"'big' or 'little'\",",
          "196:  \"R2_IOVA\", \"\", \"is io.va true? virtual addressing (1,0)\",",
          "197:  \"R2_DEBUG\", \"\", \"debug mode enabled? (1,0)\",",
          "198:  \"R2_BLOCK\", \"\", \"TODO: dump current block to tmp file\",",
          "199:  \"R2_SIZE\", \"\",\"file size\",",
          "200:  \"R2_ARCH\", \"\", \"value of asm.arch\",",
          "201:  \"R2_BITS\", \"\", \"arch reg size (8, 16, 32, 64)\",",
          "202:  \"RABIN2_LANG\", \"\", \"assume this lang to demangle\",",
          "203:  \"RABIN2_DEMANGLE\", \"\", \"demangle or not\",",
          "204:  \"PDB_SERVER\", \"\", \"e pdb.server\",",
          "205:  NULL",
          "",
          "[Added Lines]",
          "178: R_API void r_core_sysenv_help(const RCore *core) {",
          "179:  const char *help_msg[] = {",
          "180:   \"Usage:\", \"!<cmd>\", \"  Run given command as in system(3)\",",
          "181:   \"!\", \"\", \"list all historic commands\",",
          "182:   \"!\", \"ls\", \"execute 'ls' in shell\",",
          "183:   \"!!\", \"\", \"save command history to hist file\",",
          "184:   \"!!\", \"ls~txt\", \"print output of 'ls' and grep for 'txt'\",",
          "185:   \".!\", \"rabin2 -rpsei ${FILE}\", \"run each output line as a r2 cmd\",",
          "186:   \"!\", \"echo $SIZE\", \"display file size\",",
          "187:   \"!=!\", \"\", \"enable remotecmd mode\",",
          "188:   \"=!=\", \"\", \"disable remotecmd mode\",",
          "189:   \"\\nEnvironment:\", \"\", \"\",",
          "190:   \"R2_FILE\", \"\", \"file name\",",
          "191:   \"R2_OFFSET\", \"\", \"10base offset 64bit value\",",
          "192:   \"R2_BYTES\", \"\", \"TODO: variable with bytes in curblock\",",
          "193:   \"R2_XOFFSET\", \"\", \"same as above, but in 16 base\",",
          "194:   \"R2_BSIZE\", \"\", \"block size\",",
          "195:   \"R2_ENDIAN\", \"\", \"'big' or 'little'\",",
          "196:   \"R2_IOVA\", \"\", \"is io.va true? virtual addressing (1,0)\",",
          "197:   \"R2_DEBUG\", \"\", \"debug mode enabled? (1,0)\",",
          "198:   \"R2_BLOCK\", \"\", \"TODO: dump current block to tmp file\",",
          "199:   \"R2_SIZE\", \"\",\"file size\",",
          "200:   \"R2_ARCH\", \"\", \"value of asm.arch\",",
          "201:   \"R2_BITS\", \"\", \"arch reg size (8, 16, 32, 64)\",",
          "202:   \"RABIN2_LANG\", \"\", \"assume this lang to demangle\",",
          "203:   \"RABIN2_DEMANGLE\", \"\", \"demangle or not\",",
          "204:   \"PDB_SERVER\", \"\", \"e pdb.server\",",
          "205:   NULL",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "224: }",
          "226: #if DISCUSS",
          "230: #endif",
          "232:  char *f, *ret = strdup (cmd);",
          "233:  if (strstr (cmd, \"R2_BYTES\")) {",
          "234:   char *s = r_hex_bin2strdup (core->block, core->blocksize);",
          "",
          "[Removed Lines]",
          "227:  EDITOR   r_sys_setenv (\"EDITOR\", r_config_get (core->config, \"cfg.editor\"));",
          "228:  CURSOR   cursor position (offset from curseek)",
          "229:  VERBOSE  cfg.verbose",
          "231: R_API char *r_core_sysenv_begin(RCore *core, const char *cmd) {",
          "",
          "[Added Lines]",
          "227: EDITOR   r_sys_setenv (\"EDITOR\", r_config_get (core->config, \"cfg.editor\"));",
          "228: CURSOR cursor position (offset from curseek)",
          "229: VERBOSE cfg.verbose",
          "231: R_API char *r_core_sysenv_begin(RCore * core, const char *cmd) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "239:  if (core->file && core->file->desc && core->file->desc->name) {",
          "240:   r_sys_setenv (\"R2_FILE\", core->file->desc->name);",
          "241:   r_sys_setenv (\"R2_SIZE\", sdb_fmt (0, \"%\"PFMT64d,",
          "243:   if (strstr (cmd, \"R2_BLOCK\")) {",
          "245:    if ((f = r_file_temp (\"r2block\"))) {",
          "",
          "[Removed Lines]",
          "242:    r_io_desc_size (core->io, core->file->desc)));",
          "",
          "[Added Lines]",
          "242:     r_io_desc_size (core->io, core->file->desc)));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "257:  r_sys_setenv (\"R2_ENDIAN\", core->assembler->big_endian? \"big\": \"little\");",
          "258:  r_sys_setenv (\"R2_BSIZE\", sdb_fmt (0, \"%d\", core->blocksize));",
          "259:  r_sys_setenv (\"R2_ARCH\", r_config_get (core->config, \"asm.arch\"));",
          "261:  r_sys_setenv (\"R2_COLOR\", r_config_get_i (core->config, \"scr.color\")? \"1\": \"0\");",
          "264:  return ret;",
          "265: }",
          "",
          "[Removed Lines]",
          "260:  r_sys_setenv (\"R2_BITS\", sdb_fmt(0, \"%d\", r_config_get_i (core->config, \"asm.bits\")));",
          "262:  r_sys_setenv (\"R2_DEBUG\", r_config_get_i (core->config, \"cfg.debug\")?\"1\":\"0\");",
          "263:  r_sys_setenv (\"R2_IOVA\", r_config_get_i (core->config, \"io.va\")?\"1\":\"0\");",
          "",
          "[Added Lines]",
          "260:  r_sys_setenv (\"R2_BITS\", sdb_fmt (0, \"%d\", r_config_get_i (core->config, \"asm.bits\")));",
          "262:  r_sys_setenv (\"R2_DEBUG\", r_config_get_i (core->config, \"cfg.debug\")? \"1\": \"0\");",
          "263:  r_sys_setenv (\"R2_IOVA\", r_config_get_i (core->config, \"io.va\")? \"1\": \"0\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "275:   if ((map->perm & 5) == 5) {",
          "283:   }",
          "",
          "[Removed Lines]",
          "278:    if (map->name && strstr (map->name, \"copy/\")) return map->addr;",
          "279:    if (map->file && !strcmp (map->file, file)) return map->addr;",
          "280:    if (map->name && !strcmp (map->name, file)) return map->addr;",
          "",
          "[Added Lines]",
          "278:    if (map->name && strstr (map->name, \"copy/\")) {",
          "279:     return map->addr;",
          "280:    }",
          "281:    if (map->file && !strcmp (map->file, file)) {",
          "282:     return map->addr;",
          "283:    }",
          "284:    if (map->name && !strcmp (map->name, file)) {",
          "285:     return map->addr;",
          "286:    }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "296: R_API int r_core_bin_reload(RCore *r, const char *file, ut64 baseaddr) {",
          "297:  int result = 0;",
          "298:  RCoreFile *cf = r_core_file_cur (r);",
          "300:  RBinFile *bf = NULL;",
          "301:  if (desc) {",
          "302:   result = r_bin_reload (r->bin, desc, baseaddr);",
          "",
          "[Removed Lines]",
          "299:  RIODesc *desc = cf ? cf->desc : NULL;",
          "",
          "[Added Lines]",
          "305:  RIODesc *desc = cf? cf->desc: NULL;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "309: static bool setbpint(RCore *r, const char *mode, const char *sym) {",
          "310:  RBreakpointItem *bp;",
          "311:  RFlagItem *fi = r_flag_get (r->flags, sym);",
          "313:  bp = r_bp_add_sw (r->dbg->bp, fi->offset, 1, R_BP_PROT_EXEC);",
          "314:  if (bp) {",
          "315:   bp->internal = true;",
          "",
          "[Removed Lines]",
          "312:  if (!fi) return false;",
          "",
          "[Added Lines]",
          "318:  if (!fi) {",
          "319:   return false;",
          "320:  }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "325: }",
          "329:  RCoreFile *cf = r_core_file_cur (r);",
          "331:  RBinFile *binfile = NULL;",
          "332:  RBinPlugin *plugin;",
          "333:  int xtr_idx = 0; // if 0, load all if xtr is used",
          "",
          "[Removed Lines]",
          "328: static int r_core_file_do_load_for_debug (RCore *r, ut64 baseaddr, const char *filenameuri) {",
          "330:  RIODesc *desc = cf ? cf->desc : NULL;",
          "",
          "[Added Lines]",
          "336: static int r_core_file_do_load_for_debug(RCore *r, ut64 baseaddr, const char *filenameuri) {",
          "338:  RIODesc *desc = cf? cf->desc: NULL;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "394:   r->bin->maxstrbuf = r_config_get_i (r->config, \"bin.maxstrbuf\");",
          "395:  } else if (binfile) {",
          "396:   RBinObject *obj = r_bin_get_object (r->bin);",
          "398:   if (plugin && strcmp (plugin->name, \"any\") && info) {",
          "399:    r_core_bin_set_arch_bits (r, binfile->file, info->arch, info->bits);",
          "400:   }",
          "",
          "[Removed Lines]",
          "397:   RBinInfo * info = obj ? obj->info : NULL;",
          "",
          "[Added Lines]",
          "405:   RBinInfo *info = obj? obj->info: NULL;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "409: static int r_core_file_do_load_for_io_plugin(RCore *r, ut64 baseaddr, ut64 loadaddr) {",
          "410:  RCoreFile *cf = r_core_file_cur (r);",
          "412:  RBinFile *binfile = NULL;",
          "413:  int xtr_idx = 0; // if 0, load all if xtr is used",
          "416:  if (!desc) {",
          "417:   return false;",
          "",
          "[Removed Lines]",
          "411:  RIODesc *desc = cf ? cf->desc : NULL;",
          "414:  RBinPlugin * plugin;",
          "",
          "[Added Lines]",
          "419:  RIODesc *desc = cf? cf->desc: NULL;",
          "422:  RBinPlugin *plugin;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "425:  binfile = r_bin_cur (r->bin);",
          "426:  r_core_bin_set_env (r, binfile);",
          "427:  plugin = r_bin_file_cur_plugin (binfile);",
          "429:   RBinObject *obj = r_bin_get_object (r->bin);",
          "431:   if (!info) {",
          "432:    return false;",
          "433:   }",
          "",
          "[Removed Lines]",
          "428:  if (plugin && !strcmp (plugin->name, \"any\") ) {",
          "430:   RBinInfo * info = obj ? obj->info : NULL;",
          "",
          "[Added Lines]",
          "436:  if (plugin && !strcmp (plugin->name, \"any\")) {",
          "438:   RBinInfo *info = obj? obj->info: NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "440:   r->bin->maxstrbuf = r_config_get_i (r->config, \"bin.maxstrbuf\");",
          "441:  } else if (binfile) {",
          "442:   RBinObject *obj = r_bin_get_object (r->bin);",
          "444:   if (!info) {",
          "445:    return false;",
          "446:   }",
          "",
          "[Removed Lines]",
          "443:   RBinInfo * info = obj ? obj->info : NULL;",
          "",
          "[Added Lines]",
          "451:   RBinInfo *info = obj? obj->info: NULL;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "474:   \"./\",",
          "475:   NULL",
          "476:  };",
          "479:  if (*lib == '/') {",
          "480:   if (try_loadlib (core, lib, libaddr)) {",
          "",
          "[Removed Lines]",
          "477:  const char **libpath = (const char **)&ldlibrarypath;",
          "",
          "[Added Lines]",
          "485:  const char * *libpath = (const char * *) &ldlibrarypath;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "501:  const char *suppress_warning = r_config_get (r->config, \"file.nowarn\");",
          "502:  RCoreFile *cf = r_core_file_cur (r);",
          "503:  RBinFile *binfile = NULL;",
          "505:  RBinPlugin *plugin = NULL;",
          "506:  int is_io_load;",
          "",
          "[Removed Lines]",
          "504:  RIODesc *desc = cf ? cf->desc : NULL;",
          "",
          "[Added Lines]",
          "512:  RIODesc *desc = cf? cf->desc: NULL;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "522:    if (!strcmp (suppress_warning, \"false\")) {",
          "523:     eprintf (\"Error: The filenameuri '%s' is not the same as in RCoreFile: %s\\n\",",
          "525:    }",
          "526:   }",
          "527:  }",
          "",
          "[Removed Lines]",
          "524:         filenameuri, cf->desc->name);",
          "",
          "[Added Lines]",
          "532:      filenameuri, cf->desc->name);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "568:   r->bin->maxstrbuf = r_config_get_i (r->config, \"bin.maxstrbuf\");",
          "569:  } else if (binfile) {",
          "570:   RBinObject *obj = r_bin_get_object (r->bin);",
          "573:    if (strcmp (plugin->name, \"any\")) {",
          "574:     r_core_bin_set_arch_bits (r, binfile->file,",
          "575:      info->arch, info->bits);",
          "576:    }",
          "577:  }",
          "578:  if (plugin && plugin->name && !strcmp (plugin->name, \"dex\")) {",
          "579:   r_core_cmd0 (r, \"\\\"(fix-dex,wx `#sha1 $s-32 @32` @12 ;\"",
          "",
          "[Removed Lines]",
          "571:   RBinInfo * info = obj ? obj->info : NULL;",
          "572:   if (plugin && plugin->name && info)",
          "",
          "[Added Lines]",
          "579:   RBinInfo *info = obj? obj->info: NULL;",
          "580:   if (plugin && plugin->name && info) {",
          "585:   }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "587:   }",
          "588:  }",
          "589:  if (r_config_get_i (r->config, \"bin.libs\")) {",
          "593:   const char *lib;",
          "594:   RListIter *iter;",
          "595:   RList *libs = r_bin_get_libs (r->bin);",
          "",
          "[Removed Lines]",
          "590:   ut64 libaddr = (r->assembler->bits == 64)",
          "591:    ? 0x00007fff00000000LL",
          "592:    : 0x7f000000;",
          "",
          "[Added Lines]",
          "599:   ut64 libaddr = (r->assembler->bits == 64)? 0x00007fff00000000LL: 0x7f000000;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "602:  return true;",
          "603: }",
          "606:  const char *loadmethod = r_config_get (core->config, \"file.loadmethod\");",
          "607:  const char *suppress_warning = r_config_get (core->config, \"file.nowarn\");",
          "608:  ut64 load_align = r_config_get_i (core->config, \"file.loadalign\");",
          "610:  RIOMap *map = NULL;",
          "612:   map = r_io_map_new (core->io, fh->desc->fd, mode, 0, loadaddr, r_io_desc_size (core->io, fh->desc));",
          "614:   map = r_io_map_add (core->io, fh->desc->fd, mode, 0, loadaddr, r_io_desc_size (core->io, fh->desc));",
          "615:  if (!strcmp (loadmethod, \"append\") && load_align) {",
          "616:   map = r_io_map_add_next_available (core->io, fh->desc->fd, mode, 0, loadaddr, r_io_desc_size (core->io, fh->desc), load_align);",
          "617:  }",
          "618:  if (!strcmp (suppress_warning, \"false\")) {",
          "619:   if (!map) {",
          "621:   } else {",
          "625:   }",
          "626:  }",
          "627:  r_io_sort_maps (core->io); //necessary ???",
          "",
          "[Removed Lines]",
          "605: R_API RIOMap *r_core_file_get_next_map (RCore *core, RCoreFile * fh, int mode, ut64 loadaddr) {",
          "609:  if (!loadmethod || !suppress_warning) return NULL;",
          "611:  if (!strcmp (loadmethod, \"overwrite\"))",
          "613:  if (!strcmp (loadmethod, \"fail\"))",
          "620:    eprintf (\"r_core_file_get_next_map: Unable to load specified file to 0x%08\"PFMT64x\"\\n\", loadaddr);",
          "622:    if (map->from != loadaddr)",
          "623:     eprintf (\"r_core_file_get_next_map: Unable to load specified file to 0x%08\"PFMT64x\",\\n\"",
          "624:       \"but loaded to 0x%08\"PFMT64x\"\\n\", loadaddr, map->from);",
          "",
          "[Added Lines]",
          "612: R_API RIOMap *r_core_file_get_next_map(RCore *core, RCoreFile *fh, int mode, ut64 loadaddr) {",
          "616:  if (!loadmethod || !suppress_warning) {",
          "617:   return NULL;",
          "618:  }",
          "620:  if (!strcmp (loadmethod, \"overwrite\")) {",
          "622:  }",
          "623:  if (!strcmp (loadmethod, \"fail\")) {",
          "625:  }",
          "631:    eprintf (\"r_core_file_get_next_map: Unable to load specified file to 0x%08\"PFMT64x \"\\n\", loadaddr);",
          "633:    if (map->from != loadaddr) {",
          "634:     eprintf (\"r_core_file_get_next_map: Unable to load specified file to 0x%08\"PFMT64x \",\\n\"",
          "635:      \"but loaded to 0x%08\"PFMT64x \"\\n\", loadaddr, map->from);",
          "636:    }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "643:  list_fds = r_io_open_many (r->io, file, flags, 0644);",
          "646:   r_list_free (list_fds);",
          "647:   return NULL;",
          "648:  }",
          "650:  cp = r_config_get (r->config, \"file.loadmethod\");",
          "652:  r_config_set (r->config, \"file.loadmethod\", \"append\");",
          "654:  r_list_foreach_safe (list_fds, fd_iter, iter2, fd) {",
          "",
          "[Removed Lines]",
          "645:  if (!list_fds || r_list_length (list_fds) == 0 ) {",
          "651:  if (cp) loadmethod = strdup (cp);",
          "",
          "[Added Lines]",
          "657:  if (!list_fds || r_list_length (list_fds) == 0) {",
          "663:  if (cp) {",
          "664:   loadmethod = strdup (cp);",
          "665:  }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "686:   if (!top_file) {",
          "687:    top_file = fh;",
          "690:   }",
          "691:   r_bin_bind (r->bin, &(fh->binb));",
          "692:   r_list_append (r->files, fh);",
          "",
          "[Removed Lines]",
          "689:    loadaddr =  top_file->map->from;",
          "",
          "[Added Lines]",
          "703:    loadaddr = top_file->map->from;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "704:  r_config_set (r->config, \"file.path\", r_file_abspath (top_file->desc->name));",
          "705:  r_config_set_i (r->config, \"zoom.to\", top_file->map->from + r_io_desc_size (r->io, top_file->desc));",
          "707:  free (loadmethod);",
          "709:  return top_file;",
          "",
          "[Removed Lines]",
          "706:  if (loadmethod) r_config_set (r->config, \"file.loadmethod\", loadmethod);",
          "",
          "[Added Lines]",
          "720:  if (loadmethod) {",
          "721:   r_config_set (r->config, \"file.loadmethod\", loadmethod);",
          "722:  }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "713: R_API RCoreFile *r_core_file_open(RCore *r, const char *file, int flags, ut64 loadaddr) {",
          "715:  const char *suppress_warning = r_config_get (r->config, \"file.nowarn\");",
          "716:  const int openmany = r_config_get_i (r->config, \"file.openmany\");",
          "717:  const char *cp;",
          "",
          "[Removed Lines]",
          "714:  ut64 prev = r_sys_now();",
          "",
          "[Added Lines]",
          "730:  ut64 prev = r_sys_now ();",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "794:   r_config_set_i (r->config, \"dbg.swstep\", swstep);",
          "795:  }",
          "796: beach:",
          "798:  return fh;",
          "799: }",
          "",
          "[Removed Lines]",
          "797:  r->times->file_open_time = r_sys_now() - prev;",
          "",
          "[Added Lines]",
          "813:  r->times->file_open_time = r_sys_now () - prev;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "819:   RIO *io = NULL;",
          "820:   if (cf) {",
          "822:    if (cf->map) {",
          "823:     r_io_map_del (io, cf->map->fd);",
          "824:     cf->map = NULL;",
          "",
          "[Removed Lines]",
          "821:    io = (RIO*)(cf->desc ? cf->desc->io : NULL);",
          "",
          "[Added Lines]",
          "837:    io = (RIO *) (cf->desc? cf->desc->io: NULL);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "834: R_API int r_core_file_close(RCore *r, RCoreFile *fh) {",
          "835:  int ret;",
          "",
          "[Removed Lines]",
          "836:  RIODesc *desc = fh && fh->desc? fh->desc : NULL;",
          "837:  RCoreFile *prev_cf = r && r->file != fh ? r->file : NULL;",
          "",
          "[Added Lines]",
          "852:  RIODesc *desc = fh && fh->desc? fh->desc: NULL;",
          "853:  RCoreFile *prev_cf = r && r->file != fh? r->file: NULL;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "850:   return false;",
          "854:  r_core_file_set_by_fd (r, fh->desc->fd);",
          "855:  r_core_bin_set_by_fd (r, fh->desc->fd);",
          "",
          "[Removed Lines]",
          "849:  if (!r || !desc || r_list_empty (r->files))",
          "852:  if (fh == r->file) r->file = NULL;",
          "",
          "[Added Lines]",
          "865:  if (!r || !desc || r_list_empty (r->files)) {",
          "867:  }",
          "869:  if (fh == r->file) {",
          "870:   r->file = NULL;",
          "871:  }",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "863:  ret = r_list_delete_data (r->files, fh);",
          "864:  if (ret) {",
          "866:    prev_cf = (RCoreFile *) r_list_get_n (r->files, 0);",
          "868:   if (prev_cf) {",
          "869:    RIODesc *desc = prev_cf->desc;",
          "871:     eprintf (\"Error: RCoreFile's found with out a supporting RIODesc.\\n\");",
          "872:    ret = r_core_file_set_by_file (r, prev_cf);",
          "873:   }",
          "874:  }",
          "",
          "[Removed Lines]",
          "865:   if (!prev_cf && r_list_length (r->files) > 0)",
          "870:    if (!desc)",
          "",
          "[Added Lines]",
          "884:   if (!prev_cf && r_list_length (r->files) > 0) {",
          "886:   }",
          "890:    if (!desc) {",
          "892:    }",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "918:   switch (mode) {",
          "919:   case 'j':",
          "920:    r_cons_printf (\"{\\\"raised\\\":%s,\\\"fd\\\":%d,\\\"uri\\\":\\\"%s\\\",\\\"from\\\":%\"",
          "924:     f->desc->flags & R_IO_WRITE? \"true\": \"false\",",
          "928:    break;",
          "929:   case '*':",
          "930:   case 'r':",
          "932:    break;",
          "933:   default:",
          "935:    ut64 sz = r_io_desc_size (core->io, f->desc);",
          "936:    const char *fmt;",
          "937:    if (sz == UT64_MAX) {",
          "939:    } else {",
          "941:    }",
          "942:    r_cons_printf (fmt,",
          "951:   }",
          "952:   count++;",
          "953:  }",
          "955:   r_cons_printf (\"]\\n\");",
          "956:  }",
          "957:  return count;",
          "958: }",
          "962:  RBin *bin = core->bin;",
          "964:  RBinFile *bf = r_list_get_n (bin->binfiles, v);",
          "965:  int res = false;",
          "966:  if (bf) {",
          "967:   res = r_bin_file_set_cur_binfile (bin, bf);",
          "971:  }",
          "972:  return res;",
          "973: }",
          "",
          "[Removed Lines]",
          "921:     PFMT64d\",\\\"writable\\\":%s,\\\"size\\\":%d,\\\"overlaps\\\":%s}%s\",",
          "922:     core->io->raised == f->desc->fd?\"true\":\"false\",",
          "923:     (int)f->desc->fd, f->desc->uri, (ut64)from,",
          "925:     (int)r_io_desc_size (core->io, f->desc),",
          "926:     overlapped?\"true\":\"false\",",
          "927:     iter->n? \",\":\"\");",
          "931:    r_cons_printf (\"o %s 0x%\"PFMT64x\"\\n\", f->desc->uri, (ut64)from);",
          "934:    {",
          "938:     fmt = \"%c %d %d %s @ 0x%\"PFMT64x\" ; %s size=%\"PFMT64d\" %s\\n\";",
          "940:     fmt = \"%c %d %d %s @ 0x%\"PFMT64x\" ; %s size=%\"PFMT64u\" %s\\n\";",
          "943:      core->io->raised == f->desc->fd?'*':'-',",
          "944:      count,",
          "945:      (int)f->desc->fd, f->desc->uri, (ut64)from,",
          "946:      f->desc->flags & R_IO_WRITE? \"rw\": \"r\",",
          "947:      r_io_desc_size (core->io, f->desc),",
          "948:      overlapped?\"overlaps\":\"\");",
          "949:    }",
          "950:    break;",
          "954:  if (mode=='j') {",
          "961: R_API int r_core_file_bin_raise (RCore *core, ut32 binfile_idx) {",
          "963:  int v = binfile_idx > 1 ? binfile_idx : 1;",
          "968:   if (res) r_io_raise (core->io, bf->fd);",
          "969:   res = res ? r_core_file_set_by_fd (core, bf->fd) : res;",
          "970:   if (res) core->switch_file_view = 1;",
          "",
          "[Added Lines]",
          "942:     PFMT64d \",\\\"writable\\\":%s,\\\"size\\\":%d,\\\"overlaps\\\":%s}%s\",",
          "943:     core->io->raised == f->desc->fd? \"true\": \"false\",",
          "944:     (int) f->desc->fd, f->desc->uri, (ut64) from,",
          "946:     (int) r_io_desc_size (core->io, f->desc),",
          "947:     overlapped? \"true\": \"false\",",
          "948:     iter->n? \",\": \"\");",
          "952:    r_cons_printf (\"o %s 0x%\"PFMT64x \"\\n\", f->desc->uri, (ut64) from);",
          "955:   {",
          "959:     fmt = \"%c %d %d %s @ 0x%\"PFMT64x \" ; %s size=%\"PFMT64d \" %s\\n\";",
          "961:     fmt = \"%c %d %d %s @ 0x%\"PFMT64x \" ; %s size=%\"PFMT64u \" %s\\n\";",
          "964:     core->io->raised == f->desc->fd? '*': '-',",
          "965:     count,",
          "966:     (int) f->desc->fd, f->desc->uri, (ut64) from,",
          "967:     f->desc->flags & R_IO_WRITE? \"rw\": \"r\",",
          "968:     r_io_desc_size (core->io, f->desc),",
          "969:     overlapped? \"overlaps\": \"\");",
          "970:   }",
          "971:   break;",
          "975:  if (mode == 'j') {",
          "982: R_API int r_core_file_bin_raise(RCore *core, ut32 binfile_idx) {",
          "984:  int v = binfile_idx > 1? binfile_idx: 1;",
          "989:   if (res) {",
          "990:    r_io_raise (core->io, bf->fd);",
          "991:   }",
          "992:   res = res? r_core_file_set_by_fd (core, bf->fd): res;",
          "993:   if (res) {",
          "994:    core->switch_file_view = 1;",
          "995:   }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "978:  RCoreFile *cur_cf = core->file, *cf = NULL;",
          "979:  RBinFile *binfile = NULL;",
          "980:  RBin *bin = core->bin;",
          "983:  if (!binfiles) {",
          "984:   return false;",
          "",
          "[Removed Lines]",
          "981:  const RList *binfiles = bin ? bin->binfiles: NULL;",
          "",
          "[Added Lines]",
          "1006:  const RList *binfiles = bin? bin->binfiles: NULL;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "987:   int fd = binfile->fd;",
          "988:   cf = r_core_file_get_by_fd (core, fd);",
          "989:   if (cf && cf->map) {",
          "992:     fd, cf->desc->uri, cf->map->from,",
          "993:     cf->desc->flags & R_IO_WRITE? \"rw\": \"r\");",
          "994:   }",
          "",
          "[Removed Lines]",
          "990:    r_cons_printf (\"%c %d %s @ 0x%\"PFMT64x\" ; %s\\n\",",
          "991:     core->io->raised == cf->desc->fd?'*':'-',",
          "",
          "[Added Lines]",
          "1015:    r_cons_printf (\"%c %d %s @ 0x%\"PFMT64x \" ; %s\\n\",",
          "1016:     core->io->raised == cf->desc->fd? '*': '-',",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1008:     core->file = NULL; // deref",
          "1009:    }",
          "1010: #if 0",
          "1012:     core->file = NULL;",
          "1013: #endif",
          "1014:    return true;",
          "1015:   }",
          "",
          "[Removed Lines]",
          "1011:    if (r_list_empty (core->files))",
          "",
          "[Added Lines]",
          "1036:    if (r_list_empty (core->files)) {",
          "1038:    }",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1037:  if (cf && r_io_desc_size (r->io, cf->desc) > limit) {",
          "1038:   return false;",
          "1039:  }",
          "1041:  if (!buf) {",
          "1042:   return false;",
          "1043:  }",
          "",
          "[Removed Lines]",
          "1040:  buf = (ut8*)r_file_slurp (file, &buf_len);",
          "",
          "[Added Lines]",
          "1066:  buf = (ut8 *) r_file_slurp (file, &buf_len);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1065:  return true;",
          "1066: }",
          "1069:  RListIter *iter;",
          "1070:  RCoreFile *cf = NULL;",
          "1071:  r_list_foreach (core->files, iter, cf) {",
          "",
          "[Removed Lines]",
          "1068: R_API RCoreFile * r_core_file_find_by_fd (RCore *core, ut64 fd) {",
          "",
          "[Added Lines]",
          "1094: R_API RCoreFile *r_core_file_find_by_fd(RCore *core, ut64 fd) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1077:  return cf;",
          "1078: }",
          "1081:  RListIter *iter;",
          "1082:  RCoreFile *cf = NULL;",
          "",
          "[Removed Lines]",
          "1080: R_API RCoreFile * r_core_file_find_by_name (RCore * core, const char * name) {",
          "",
          "[Added Lines]",
          "1106: R_API RCoreFile *r_core_file_find_by_name(RCore *core, const char *name) {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1090:  return cf;",
          "1091: }",
          "1094:  RCoreFile *cf = r_core_file_find_by_fd (core, fd);",
          "1095:  return r_core_file_set_by_file (core, cf);",
          "1096: }",
          "1099:  RCoreFile *cf = r_core_file_find_by_name (core, name);",
          "1100:  return r_core_file_set_by_file (core, cf);",
          "1101: }",
          "1104:  if (cf) {",
          "1105:   RIODesc *desc = cf->desc;",
          "1107:   core->file = cf;",
          "1108:   if (desc) {",
          "1109:    r_io_use_desc (core->io, desc);",
          "",
          "[Removed Lines]",
          "1093: R_API int r_core_file_set_by_fd (RCore * core, ut64 fd) {",
          "1098: R_API int r_core_file_set_by_name (RCore * core, const char * name) {",
          "1103: R_API int r_core_file_set_by_file (RCore * core, RCoreFile *cf) {",
          "1106:   core->offset = cf && cf->map ? cf->map->from : 0LL;",
          "",
          "[Added Lines]",
          "1119: R_API int r_core_file_set_by_fd(RCore *core, ut64 fd) {",
          "1124: R_API int r_core_file_set_by_name(RCore *core, const char *name) {",
          "1129: R_API int r_core_file_set_by_file(RCore *core, RCoreFile *cf) {",
          "1132:   core->offset = cf && cf->map? cf->map->from: 0LL;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1114:  return false;",
          "1115: }",
          "1119:  if (desc) {",
          "1120:   return desc->fd;",
          "1121:  }",
          "1122:  return UT32_MAX;",
          "1123: }",
          "1127:  return r->file;",
          "1128: }",
          "",
          "[Removed Lines]",
          "1117: R_API ut32 r_core_file_cur_fd (RCore *core) {",
          "1118:  RIODesc *desc = core->file ? core->file->desc : NULL;",
          "1125: R_API RCoreFile * r_core_file_cur (RCore *r) {",
          "",
          "[Added Lines]",
          "1143: R_API ut32 r_core_file_cur_fd(RCore *core) {",
          "1144:  RIODesc *desc = core->file? core->file->desc: NULL;",
          "1151: R_API RCoreFile *r_core_file_cur(RCore *r) {",
          "",
          "---------------"
        ],
        "libr/core/graph.c||libr/core/graph.c": [
          "File: libr/core/graph.c -> libr/core/graph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #define MIN_NODE_HEIGHT BORDER_HEIGHT",
          "28: #define TITLE_LEN 128",
          "29: #define DEFAULT_SPEED 1",
          "32: #define SMALLNODE_TEXT_CUR \"<@@@@@@>\"",
          "33: #define SMALLNODE_MIN_WIDTH 8",
          "",
          "[Removed Lines]",
          "30: #define PAGEKEY_SPEED (h/2)",
          "",
          "[Added Lines]",
          "30: #define PAGEKEY_SPEED (h / 2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: #define ZOOM_STEP 10",
          "38: #define ZOOM_DEFAULT 100",
          "54: struct len_pos_t {",
          "55:  int len;",
          "",
          "[Removed Lines]",
          "40: #define BODY_OFFSETS 0x1",
          "41: #define BODY_SUMMARY 0x2",
          "43: #define hash_set(sdb,k,v) (sdb_num_set (sdb, sdb_fmt (0, \"%\"PFMT64u, (ut64)(size_t)k), (ut64)(size_t)v, 0))",
          "44: #define hash_get(sdb,k) (sdb_num_get (sdb, sdb_fmt (0, \"%\"PFMT64u, (ut64)(size_t)k), NULL))",
          "45: #define hash_get_rnode(sdb,k) ((RGraphNode *)(size_t)hash_get (sdb, k))",
          "46: #define hash_get_rlist(sdb,k) ((RList *)(size_t)hash_get (sdb, k))",
          "47: #define hash_get_int(sdb,k) ((int)hash_get (sdb, k))",
          "49: #define get_anode(gn) (gn ? (RANode *)gn->data : NULL)",
          "51: #define graph_foreach_anode(list, it, pos, anode) \\",
          "52:  if (list) for (it = list->head; it && (pos = it->data) && (pos) && (anode = (RANode *)pos->data); it = it->n)",
          "",
          "[Added Lines]",
          "40: #define BODY_OFFSETS    0x1",
          "41: #define BODY_SUMMARY    0x2",
          "43: #define hash_set(sdb,k,v) (sdb_num_set (sdb, sdb_fmt (0, \"%\"PFMT64u, (ut64) (size_t) k), (ut64) (size_t) v, 0))",
          "44: #define hash_get(sdb,k) (sdb_num_get (sdb, sdb_fmt (0, \"%\"PFMT64u, (ut64) (size_t) k), NULL))",
          "45: #define hash_get_rnode(sdb,k) ((RGraphNode *) (size_t) hash_get (sdb, k))",
          "46: #define hash_get_rlist(sdb,k) ((RList *) (size_t) hash_get (sdb, k))",
          "47: #define hash_get_int(sdb,k) ((int) hash_get (sdb, k))",
          "49: #define get_anode(gn) (gn? (RANode *) gn->data: NULL)",
          "51: #define graph_foreach_anode(list, it, pos, anode)\\",
          "52:  if (list) for (it = list->head; it && (pos = it->data) && (pos) && (anode = (RANode *) pos->data); it = it->n)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79: struct layer_t {",
          "80:  int n_nodes;",
          "82:  int position;",
          "83:  int height;",
          "84:  int width;",
          "",
          "[Removed Lines]",
          "81:  RGraphNode **nodes;",
          "",
          "[Added Lines]",
          "81:  RGraphNode * *nodes;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87: struct agraph_refresh_data {",
          "88:  RCore *core;",
          "89:  RAGraph *g;",
          "91:  int fs;",
          "92: };",
          "94: #define G(x,y) r_cons_canvas_gotoxy (g->can, x, y)",
          "95: #define W(x) r_cons_canvas_write (g->can, x)",
          "101: static bool is_offset(const RAGraph *g) {",
          "102:  return g->mode == R_AGRAPH_MODE_OFFSET;",
          "",
          "[Removed Lines]",
          "90:  RAnalFunction **fcn;",
          "96: #define B(x,y,w,h) r_cons_canvas_box(g->can, x,y,w,h, g->color_box)",
          "97: #define B1(x,y,w,h) r_cons_canvas_box(g->can, x,y,w,h, g->color_box2)",
          "98: #define B2(x,y,w,h) r_cons_canvas_box(g->can, x,y,w,h, g->color_box3)",
          "99: #define F(x,y,x2,y2,c) r_cons_canvas_fill(g->can, x,y,x2,y2,c,0)",
          "",
          "[Added Lines]",
          "90:  RAnalFunction * *fcn;",
          "96: #define B(x,y,w,h) r_cons_canvas_box (g->can, x,y,w,h, g->color_box)",
          "97: #define B1(x,y,w,h) r_cons_canvas_box (g->can, x,y,w,h, g->color_box2)",
          "98: #define B2(x,y,w,h) r_cons_canvas_box (g->can, x,y,w,h, g->color_box3)",
          "99: #define F(x,y,x2,y2,c) r_cons_canvas_fill (g->can, x,y,x2,y2,c,0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:  static char m[20];",
          "123:  const char *submode;",
          "131:  return m;",
          "132: }",
          "134: static int mode2opts(const RAGraph *g) {",
          "135:  int opts = 0;",
          "138:  return opts;",
          "139: }",
          "142:  return r_str_newf (\"0x%\"PFMT64x, addr);",
          "143: }",
          "",
          "[Removed Lines]",
          "125:  if (is_mini (g)) submode = \"SMALL\";",
          "126:  else if (is_offset (g)) submode = \"OFF\";",
          "127:  else if (is_summary (g)) submode = \"SUMM\";",
          "128:  else submode = \"NORM\";",
          "130:  snprintf(m, sizeof (m), \"%s-%s\", prefix, submode);",
          "136:  if (is_offset (g)) opts |= BODY_OFFSETS;",
          "137:  if (is_summary (g)) opts |= BODY_SUMMARY;",
          "141: static char *get_title (ut64 addr) {",
          "",
          "[Added Lines]",
          "125:  if (is_mini (g)) {",
          "126:   submode = \"SMALL\";",
          "127:  } else if (is_offset (g)) {",
          "128:   submode = \"OFF\";",
          "129:  } else if (is_summary (g)) {",
          "130:   submode = \"SUMM\";",
          "131:  } else {",
          "132:   submode = \"NORM\";",
          "133:  }",
          "135:  snprintf (m, sizeof (m), \"%s-%s\", prefix, submode);",
          "141:  if (is_offset (g)) {",
          "142:   opts |= BODY_OFFSETS;",
          "143:  }",
          "144:  if (is_summary (g)) {",
          "145:   opts |= BODY_SUMMARY;",
          "146:  }",
          "150: static char *get_title(ut64 addr) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:    n->w = SMALLNODE_MIN_WIDTH;",
          "157:   } else {",
          "158:    unsigned int len;",
          "160:    len = strlen (n->title) + MARGIN_TEXT_X;",
          "161:    if (len > INT_MAX) {",
          "162:     len = INT_MAX;",
          "",
          "[Removed Lines]",
          "159:    n->w = r_str_bounds (n->body, (int *)&n->h);",
          "",
          "[Added Lines]",
          "168:    n->w = r_str_bounds (n->body, (int *) &n->h);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "179:  int x, delta_x = 0;",
          "181:  if (!G (n->x + SMALLNODE_CENTER_X, n->y) &&",
          "184:  x = n->x + SMALLNODE_CENTER_X + g->can->sx;",
          "185:  if (x < 0) {",
          "",
          "[Removed Lines]",
          "182:   !G (n->x + SMALLNODE_CENTER_X + n->w, n->y)) return;",
          "",
          "[Added Lines]",
          "191:  !G (n->x + SMALLNODE_CENTER_X + n->w, n->y)) {",
          "192:   return;",
          "193:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "188:  G (n->x + SMALLNODE_CENTER_X + delta_x, n->y);",
          "190:  if (cur) {",
          "193:   snprintf (title, sizeof (title) - 1,",
          "195:   W (title);",
          "197:   W (n->body);",
          "198:  } else {",
          "199:   char *str = \"____\";",
          "",
          "[Removed Lines]",
          "191:   W(&SMALLNODE_TEXT_CUR[delta_x]);",
          "192:   (void)G (-g->can->sx, -g->can->sy + 2);",
          "194:     \"%s:\", n->title);",
          "196:   (void)G (-g->can->sx, -g->can->sy + 3);",
          "",
          "[Added Lines]",
          "202:   W (&SMALLNODE_TEXT_CUR[delta_x]);",
          "203:   (void) G (-g->can->sx, -g->can->sy + 2);",
          "205:    \"%s:\", n->title);",
          "207:   (void) G (-g->can->sx, -g->can->sy + 3);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "206:    }",
          "207:   }",
          "208:   snprintf (title, sizeof (title) - 1, \"[_%s_]\", str);",
          "210:  }",
          "211:  return;",
          "212: }",
          "",
          "[Removed Lines]",
          "209:   W(title + delta_x);",
          "",
          "[Added Lines]",
          "220:   W (title + delta_x);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "216:  int x, delta_x = 0;",
          "218:  if (!G (n->x + SMALLNODE_CENTER_X, n->y) &&",
          "221:  x = n->x + SMALLNODE_CENTER_X + g->can->sx;",
          "222:  if (x < 0) {",
          "223:   delta_x = -x;",
          "224:  }",
          "227:  if (cur) {",
          "229:   snprintf (title, sizeof (title) - 1,",
          "231:   W (title);",
          "232:  } else {",
          "234:   snprintf (title, sizeof (title) - 1,",
          "236:   W (title);",
          "237:  }",
          "238:  return;",
          "",
          "[Removed Lines]",
          "219:   !G (n->x + SMALLNODE_CENTER_X + n->w, n->y)) return;",
          "225:  if (!G (n->x + SMALLNODE_CENTER_X + delta_x, n->y)) return;",
          "228:   W(&SMALLNODE_TEXT_CUR[delta_x]);",
          "230:     \"[ %s ]\", n->title);",
          "233:   W(&SMALLNODE_TEXT_CUR[delta_x]);",
          "235:     \"  %s  \", n->title);",
          "",
          "[Added Lines]",
          "230:  !G (n->x + SMALLNODE_CENTER_X + n->w, n->y)) {",
          "231:   return;",
          "232:  }",
          "238:  if (!G (n->x + SMALLNODE_CENTER_X + delta_x, n->y)) {",
          "239:   return;",
          "240:  }",
          "243:   W (&SMALLNODE_TEXT_CUR[delta_x]);",
          "245:    \"[ %s ]\", n->title);",
          "248:   W (&SMALLNODE_TEXT_CUR[delta_x]);",
          "250:    \"  %s  \", n->title);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "261:  shortcut = sdb_get (g->db, sdb_fmt (2, \"agraph.nodes.%s.shortcut\", n->title), 0);",
          "263:  if (cur) {",
          "265:  } else {",
          "267:  }",
          "268:  if (shortcut) {",
          "269:   strncat (title, sdb_fmt (2, \" ;[%s]\", shortcut), sizeof (title) - strlen (title) - 1);",
          "270:   free (shortcut);",
          "271:  }",
          "274:  }",
          "",
          "[Removed Lines]",
          "264:   snprintf (title, sizeof (title)-1, \"[%s]\", n->title);",
          "266:   snprintf (title, sizeof (title)-1, \" %s\", n->title);",
          "272:  if ((delta_x < strlen (title)) && G(n->x + MARGIN_TEXT_X + delta_x, n->y + 1)) {",
          "273:   W(title + delta_x);",
          "",
          "[Added Lines]",
          "279:   snprintf (title, sizeof (title) - 1, \"[%s]\", n->title);",
          "281:   snprintf (title, sizeof (title) - 1, \" %s\", n->title);",
          "287:  if ((delta_x < strlen (title)) && G (n->x + MARGIN_TEXT_X + delta_x, n->y + 1)) {",
          "288:   W (title + delta_x);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "281:   delta_txt_y = R_MIN (delta_y, center_y);",
          "282:  }",
          "291:   if (body_y + 1 <= body_h) {",
          "292:    body = r_str_ansi_crop (n->body,",
          "296:    if (body) {",
          "297:     W (body);",
          "298:     if (g->zoom < ZOOM_DEFAULT) {",
          "",
          "[Removed Lines]",
          "284:  if (G(n->x + MARGIN_TEXT_X + delta_x + center_x - delta_txt_x,",
          "285:    n->y + MARGIN_TEXT_Y + delta_y + center_y - delta_txt_y)) {",
          "286:   unsigned int body_x = center_x >= delta_x ? 0 : delta_x - center_x;",
          "287:   unsigned int body_y = center_y >= delta_y ? 0 : delta_y - center_y;",
          "288:   unsigned int body_h = BORDER_HEIGHT >= n->h ? 1 : n->h - BORDER_HEIGHT;",
          "290:   if (g->zoom < ZOOM_DEFAULT) body_h--;",
          "293:      body_x, body_y,",
          "294:      n->w - BORDER_WIDTH,",
          "295:      body_h);",
          "",
          "[Added Lines]",
          "299:  if (G (n->x + MARGIN_TEXT_X + delta_x + center_x - delta_txt_x,",
          "300:   n->y + MARGIN_TEXT_Y + delta_y + center_y - delta_txt_y)) {",
          "301:   unsigned int body_x = center_x >= delta_x? 0: delta_x - center_x;",
          "302:   unsigned int body_y = center_y >= delta_y? 0: delta_y - center_y;",
          "303:   unsigned int body_h = BORDER_HEIGHT >= n->h? 1: n->h - BORDER_HEIGHT;",
          "305:   if (g->zoom < ZOOM_DEFAULT) {",
          "306:    body_h--;",
          "307:   }",
          "310:     body_x, body_y,",
          "311:     n->w - BORDER_WIDTH,",
          "312:     body_h);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "322:  }",
          "323: }",
          "331:  m = R_NEWS0 (int *, len);",
          "332:  if (!m) {",
          "",
          "[Removed Lines]",
          "325: static int **get_crossing_matrix (const RGraph *g,",
          "326:   const struct layer_t layers[],",
          "327:   int maxlayer, int i, int from_up,",
          "328:   int *n_rows) {",
          "329:  int j, **m, len = layers[i].n_nodes;",
          "",
          "[Added Lines]",
          "342: static int **get_crossing_matrix(const RGraph *g,",
          "343:                                   const struct layer_t layers[],",
          "344:                                   int maxlayer, int i, int from_up,",
          "345:                                   int *n_rows) {",
          "346:  int j, * *m, len = layers[i].n_nodes;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "369:       at = get_anode (gt);",
          "370:       if (ak->layer != i || at->layer != i) {",
          "373:         ak->title, ak->layer,",
          "374:         at->title, at->layer,",
          "375:         i);",
          "",
          "[Removed Lines]",
          "372:        eprintf(\"(WARNING) \\\"%s\\\" (%d) or \\\"%s\\\" (%d) are not on the right layer (%d)\\n\",",
          "",
          "[Added Lines]",
          "389:        eprintf (\"(WARNING) \\\"%s\\\" (%d) or \\\"%s\\\" (%d) are not on the right layer (%d)\\n\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "400:      RListIter *itt;",
          "401:      const RANode *at, *as = get_anode (gs);",
          "404:      neigh_s = r_graph_get_neighbours (g, gs);",
          "405:      graph_foreach_anode (neigh_s, itt, gt, at) {",
          "407:        m[aj->pos_in_layer][as->pos_in_layer]++;",
          "408:      }",
          "409:     }",
          "410:    }",
          "",
          "[Removed Lines]",
          "403:      if (gs == gj) continue;",
          "406:       if (at->pos_in_layer < ak->pos_in_layer)",
          "",
          "[Added Lines]",
          "420:      if (gs == gj) {",
          "421:       continue;",
          "422:      }",
          "425:       if (at->pos_in_layer < ak->pos_in_layer) {",
          "427:       }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "424:  return NULL;",
          "425: }",
          "430:  RGraphNode *u, *v;",
          "431:  const RANode *au, *av;",
          "432:  int n_rows, j, changed = false;",
          "433:  int len = layers[i].n_nodes;",
          "435:  cross_matrix = get_crossing_matrix (g, layers, maxlayer, i, from_up, &n_rows);",
          "438:  for (j = 0; j < len - 1; ++j) {",
          "439:   int auidx, avidx;",
          "",
          "[Removed Lines]",
          "427: static int layer_sweep (const RGraph *g, const struct layer_t layers[],",
          "428:       int maxlayer, int i, int from_up) {",
          "429:  int **cross_matrix;",
          "436:  if (!cross_matrix) return false;",
          "",
          "[Added Lines]",
          "447: static int layer_sweep(const RGraph *g, const struct layer_t layers[],",
          "448:                         int maxlayer, int i, int from_up) {",
          "449:  int * *cross_matrix;",
          "456:  if (!cross_matrix) {",
          "457:   return false;",
          "458:  }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "467:  return changed;",
          "468: }",
          "472:  RGraphEdge *new_e = R_NEW0 (RGraphEdge);",
          "474:  new_e->from = e->from;",
          "475:  new_e->to = e->to;",
          "476:  new_e->nth = e->nth;",
          "477:  r_list_append (g->back_edges, new_e);",
          "478: }",
          "481:  const RANode *a = get_anode (e->from);",
          "482:  const RANode *b = get_anode (e->to);",
          "484:  if (!a || !b) {",
          "485:   return;",
          "486:  }",
          "488:  if (R_ABS (a->layer - b->layer) > 1) {",
          "489:   RGraphEdge *new_e = R_NEW0 (RGraphEdge);",
          "491:   new_e->from = e->from;",
          "492:   new_e->to = e->to;",
          "493:   new_e->nth = e->nth;",
          "",
          "[Removed Lines]",
          "470: static void view_cyclic_edge (const RGraphEdge *e, const RGraphVisitor *vis) {",
          "471:  const RAGraph *g = (RAGraph *)vis->data;",
          "473:  if (!new_e) return;",
          "480: static void view_dummy (const RGraphEdge *e, const RGraphVisitor *vis) {",
          "483:  RList *long_edges = (RList *)vis->data;",
          "490:   if (!new_e) return;",
          "",
          "[Added Lines]",
          "492: static void view_cyclic_edge(const RGraphEdge *e, const RGraphVisitor *vis) {",
          "493:  const RAGraph *g = (RAGraph *) vis->data;",
          "495:  if (!new_e) {",
          "496:   return;",
          "497:  }",
          "504: static void view_dummy(const RGraphEdge *e, const RGraphVisitor *vis) {",
          "507:  RList *long_edges = (RList *) vis->data;",
          "514:   if (!new_e) {",
          "515:    return;",
          "516:   }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "502:  const RGraphEdge *e;",
          "503:  const RListIter *it;",
          "507:  cyclic_vis.data = g;",
          "508:  r_graph_dfs (g->graph, &cyclic_vis);",
          "510:  r_list_foreach (g->back_edges, it, e) {",
          "511:   RANode *from, *to;",
          "514:   r_agraph_del_edge (g, from, to);",
          "515:   r_agraph_add_edge_at (g, to, from, e->nth);",
          "516:  }",
          "517: }",
          "519: static void add_sorted(RGraphNode *n, RGraphVisitor *vis) {",
          "521:  r_list_prepend (l, n);",
          "522: }",
          "",
          "[Removed Lines]",
          "500: static void remove_cycles (RAGraph *g) {",
          "501:  RGraphVisitor cyclic_vis = { NULL, NULL, NULL, NULL, NULL, NULL };",
          "505:  g->back_edges = r_list_new();",
          "506:  cyclic_vis.back_edge = (RGraphEdgeCallback)view_cyclic_edge;",
          "512:   from = e->from ? get_anode (e->from) : NULL;",
          "513:   to = e->to ? get_anode (e->to) : NULL;",
          "520:  RList *l = (RList *)vis->data;",
          "",
          "[Added Lines]",
          "526: static void remove_cycles(RAGraph *g) {",
          "527:  RGraphVisitor cyclic_vis = {",
          "528:   NULL, NULL, NULL, NULL, NULL, NULL",
          "529:  };",
          "533:  g->back_edges = r_list_new ();",
          "534:  cyclic_vis.back_edge = (RGraphEdgeCallback) view_cyclic_edge;",
          "540:   from = e->from? get_anode (e->from): NULL;",
          "541:   to = e->to? get_anode (e->to): NULL;",
          "548:  RList *l = (RList *) vis->data;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "532:  const RGraphNode *gn;",
          "533:  const RListIter *it;",
          "534:  RANode *n;",
          "535:  RList *topological_sort = r_list_new ();",
          "537:  layer_vis.data = topological_sort;",
          "539:  r_graph_dfs (g->graph, &layer_vis);",
          "541:  graph_foreach_anode (topological_sort, it, gn, n) {",
          "",
          "[Removed Lines]",
          "530: static void assign_layers (const RAGraph *g) {",
          "531:  RGraphVisitor layer_vis = { NULL, NULL, NULL, NULL, NULL, NULL };",
          "538:  layer_vis.finish_node = (RGraphNodeCallback)add_sorted;",
          "",
          "[Added Lines]",
          "558: static void assign_layers(const RAGraph *g) {",
          "559:  RGraphVisitor layer_vis = {",
          "560:   NULL, NULL, NULL, NULL, NULL, NULL",
          "561:  };",
          "568:  layer_vis.finish_node = (RGraphNodeCallback) add_sorted;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "555:  r_list_free (topological_sort);",
          "556: }",
          "560: }",
          "564: }",
          "569:  const RListIter *it;",
          "570:  const RGraphEdge *e;",
          "572:  g->long_edges = r_list_new ();",
          "573:  dummy_vis.data = g->long_edges;",
          "576:  r_graph_dfs (g->graph, &dummy_vis);",
          "578:  r_list_foreach (g->long_edges, it, e) {",
          "579:   RANode *from = get_anode (e->from);",
          "580:   RANode *to = get_anode (e->to);",
          "581:   int diff_layer = R_ABS (from->layer - to->layer);",
          "583:   int i, nth = e->nth;",
          "585:   r_agraph_del_edge (g, from, to);",
          "586:   for (i = 1; i < diff_layer; ++i) {",
          "587:    RANode *dummy = r_agraph_add_node (g, NULL, NULL);",
          "589:    dummy->is_dummy = true;",
          "590:    dummy->layer = from->layer + i;",
          "591:    dummy->is_reversed = is_reversed (g, e);",
          "",
          "[Removed Lines]",
          "558: static int find_edge (const RGraphEdge *a, const RGraphEdge *b) {",
          "559:  return a->from == b->to && a->to == b->from ? 0 : 1;",
          "562: static int is_reversed (const RAGraph *g, const RGraphEdge *e) {",
          "563:  return r_list_find (g->back_edges, e, (RListComparator)find_edge) ? true : false;",
          "567: static void create_dummy_nodes (RAGraph *g) {",
          "568:  RGraphVisitor dummy_vis = { NULL, NULL, NULL, NULL, NULL, NULL };",
          "574:  dummy_vis.tree_edge = (RGraphEdgeCallback)view_dummy;",
          "575:  dummy_vis.fcross_edge = (RGraphEdgeCallback)view_dummy;",
          "582:   RANode *prev = get_anode(e->from);",
          "588:    if (!dummy) return;",
          "",
          "[Added Lines]",
          "588: static int find_edge(const RGraphEdge *a, const RGraphEdge *b) {",
          "589:  return a->from == b->to && a->to == b->from? 0: 1;",
          "592: static int is_reversed(const RAGraph *g, const RGraphEdge *e) {",
          "593:  return r_list_find (g->back_edges, e, (RListComparator) find_edge)? true: false;",
          "597: static void create_dummy_nodes(RAGraph *g) {",
          "598:  RGraphVisitor dummy_vis = {",
          "599:   NULL, NULL, NULL, NULL, NULL, NULL",
          "600:  };",
          "606:  dummy_vis.tree_edge = (RGraphEdgeCallback) view_dummy;",
          "607:  dummy_vis.fcross_edge = (RGraphEdgeCallback) view_dummy;",
          "614:   RANode *prev = get_anode (e->from);",
          "620:    if (!dummy) {",
          "621:     return;",
          "622:    }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "600: }",
          "604:  const RList *nodes = r_graph_get_nodes (g->graph);",
          "605:  RGraphNode *gn;",
          "606:  const RListIter *it;",
          "",
          "[Removed Lines]",
          "603: static void create_layers (RAGraph *g) {",
          "",
          "[Added Lines]",
          "637: static void create_layers(RAGraph *g) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "619:  g->n_layers++;",
          "621:  g->layers = R_NEWS0 (struct layer_t, g->n_layers);",
          "623:  graph_foreach_anode (nodes, it, gn, n) {",
          "",
          "[Removed Lines]",
          "620:  if (sizeof (struct layer_t) * g->n_layers < g->n_layers) return;",
          "",
          "[Added Lines]",
          "654:  if (sizeof (struct layer_t) * g->n_layers < g->n_layers) {",
          "655:   return;",
          "656:  }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "625:  }",
          "627:  for (i = 0; i < g->n_layers; ++i) {",
          "629:    continue;",
          "630:   }",
          "631:   g->layers[i].nodes = R_NEWS0 (RGraphNode *,",
          "",
          "[Removed Lines]",
          "628:   if (sizeof(RGraphNode*) * g->layers[i].n_nodes < g->layers[i].n_nodes) {",
          "",
          "[Added Lines]",
          "664:   if (sizeof(RGraphNode *) * g->layers[i].n_nodes < g->layers[i].n_nodes) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "645:  int i, cross_changed, max_changes = 4096;",
          "647:  do {",
          "",
          "[Removed Lines]",
          "644: static void minimize_crossings (const RAGraph *g) {",
          "",
          "[Added Lines]",
          "680: static void minimize_crossings(const RAGraph *g) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "663:  } while (cross_changed && max_changes);",
          "664: }",
          "668: }",
          "674:  struct dist_t d;",
          "675:  const RANode *aa, *ab;",
          "676:  RListIter *it;",
          "",
          "[Removed Lines]",
          "666: static int find_dist (const struct dist_t *a, const struct dist_t *b) {",
          "667:  return a->from == b->from && a->to == b->to ? 0 : 1;",
          "673: static int dist_nodes (const RAGraph *g, const RGraphNode *a, const RGraphNode *b) {",
          "",
          "[Added Lines]",
          "702: static int find_dist(const struct dist_t *a, const struct dist_t *b) {",
          "703:  return a->from == b->from && a->to == b->to? 0: 1;",
          "709: static int dist_nodes(const RAGraph *g, const RGraphNode *a, const RGraphNode *b) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "679:  if (g->dists) {",
          "680:   d.from = a;",
          "681:   d.to = b;",
          "683:   if (it) {",
          "685:    return old->dist;",
          "686:   }",
          "687:  }",
          "",
          "[Removed Lines]",
          "682:   it = r_list_find (g->dists, &d, (RListComparator)find_dist);",
          "684:    struct dist_t *old = (struct dist_t *)r_list_iter_get_data (it);",
          "",
          "[Added Lines]",
          "718:   it = r_list_find (g->dists, &d, (RListComparator) find_dist);",
          "720:    struct dist_t *old = (struct dist_t *) r_list_iter_get_data (it);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "691:  if (aa && ab && aa->layer == ab->layer) {",
          "692:   int i;",
          "695:   for (i = aa->pos_in_layer; i < ab->pos_in_layer; ++i) {",
          "696:    const RGraphNode *cur = g->layers[aa->layer].nodes[i];",
          "697:    const RGraphNode *next = g->layers[aa->layer].nodes[i + 1];",
          "",
          "[Removed Lines]",
          "694:   res = aa == ab && !aa->is_reversed ? HORIZONTAL_NODE_SPACING : 0;",
          "",
          "[Added Lines]",
          "730:   res = aa == ab && !aa->is_reversed? HORIZONTAL_NODE_SPACING: 0;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "702:    if (g->dists) {",
          "703:     d.from = cur;",
          "704:     d.to = next;",
          "706:     if (it) {",
          "708:      res += old->dist;",
          "709:      found = true;",
          "710:     }",
          "",
          "[Removed Lines]",
          "705:     it = r_list_find (g->dists, &d, (RListComparator)find_dist);",
          "707:      struct dist_t *old = (struct dist_t *)r_list_iter_get_data (it);",
          "",
          "[Added Lines]",
          "741:     it = r_list_find (g->dists, &d, (RListComparator) find_dist);",
          "743:      struct dist_t *old = (struct dist_t *) r_list_iter_get_data (it);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "713:    if (acur && !found) {",
          "714:     int space = HORIZONTAL_NODE_SPACING;",
          "715:     if (acur->is_reversed && anext->is_reversed) {",
          "717:       res += acur->w / 2;",
          "719:       res += anext->w / 2;",
          "720:      res += 1;",
          "721:     } else {",
          "722:      res += acur->w / 2 + anext->w / 2 + space;",
          "",
          "[Removed Lines]",
          "716:      if (!acur->is_reversed)",
          "718:      else if (!anext->is_reversed)",
          "",
          "[Added Lines]",
          "752:      if (!acur->is_reversed) {",
          "754:      } else if (!anext->is_reversed) {",
          "756:      }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "729: }",
          "733:  struct dist_t *d, find_el;",
          "734:  const RGraphNode *vi, *vip;",
          "735:  const RANode *avi, *avip;",
          "736:  RListIter *it;",
          "739:  vi = g->layers[l].nodes[cur];",
          "740:  vip = g->layers[l].nodes[next];",
          "741:  avi = get_anode (vi);",
          "",
          "[Removed Lines]",
          "732: static void set_dist_nodes (const RAGraph *g, int l, int cur, int next) {",
          "738:  if (!g->dists) return;",
          "",
          "[Added Lines]",
          "769: static void set_dist_nodes(const RAGraph *g, int l, int cur, int next) {",
          "775:  if (!g->dists) {",
          "776:   return;",
          "777:  }",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "744:  find_el.from = vi;",
          "745:  find_el.to = vip;",
          "749:  d->from = vi;",
          "750:  d->to = vip;",
          "751:  d->dist = (avip && avi)? avip->x - avi->x: 0;",
          "753:   r_list_push (g->dists, d);",
          "754: }",
          "757:  return pos >= 0 && pos < g->layers[l].n_nodes;",
          "758: }",
          "",
          "[Removed Lines]",
          "746:  it = r_list_find (g->dists, &find_el, (RListComparator)find_dist);",
          "747:  d = it ? (struct dist_t *)r_list_iter_get_data (it) : R_NEW0 (struct dist_t);",
          "752:  if (!it)",
          "756: static int is_valid_pos (const RAGraph *g, int l, int pos) {",
          "",
          "[Added Lines]",
          "785:  it = r_list_find (g->dists, &find_el, (RListComparator) find_dist);",
          "786:  d = it? (struct dist_t *) r_list_iter_get_data (it): R_NEW0 (struct dist_t);",
          "791:  if (!it) {",
          "793:  }",
          "796: static int is_valid_pos(const RAGraph *g, int l, int pos) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "765:  Sdb *res = sdb_new0 ();",
          "766:  int i, j;",
          "",
          "[Removed Lines]",
          "764: static Sdb *compute_vertical_nodes (const RAGraph *g) {",
          "",
          "[Added Lines]",
          "804: static Sdb *compute_vertical_nodes(const RAGraph *g) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "781:      while (anext->is_dummy) {",
          "782:       r_list_append (vert, next);",
          "783:       next = r_graph_nth_neighbour (g->graph, next, 0);",
          "785:       anext = get_anode (next);",
          "786:      }",
          "787:     } else {",
          "",
          "[Removed Lines]",
          "784:       if (!next) break;",
          "",
          "[Added Lines]",
          "824:       if (!next) {",
          "825:        break;",
          "826:       }",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "803:  int i, j, c;",
          "805:  RGraphNode *gn;",
          "806:  const RListIter *it;",
          "807:  RANode *n;",
          "",
          "[Removed Lines]",
          "802: static RList **compute_classes (const RAGraph *g, Sdb *v_nodes, int is_left, int *n_classes) {",
          "804:  RList **res = R_NEWS0 (RList *, g->n_layers);",
          "",
          "[Added Lines]",
          "844: static RList **compute_classes(const RAGraph *g, Sdb *v_nodes, int is_left, int *n_classes) {",
          "846:  RList * *res = R_NEWS0 (RList *, g->n_layers);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "813:  for (i = 0; i < g->n_layers; ++i) {",
          "814:   c = i;",
          "819:    const RGraphNode *gj = g->layers[i].nodes[j];",
          "820:    const RANode *aj = get_anode (gj);",
          "822:    if (aj->klass == -1) {",
          "823:     const RList *laj = hash_get_rlist (v_nodes, gj);",
          "826:      res[c] = r_list_new ();",
          "827:     graph_foreach_anode (laj, it, gn, n) {",
          "828:      r_list_append (res[c], gn);",
          "829:      n->klass = c;",
          "",
          "[Removed Lines]",
          "816:   for (j = is_left ? 0 : g->layers[i].n_nodes - 1;",
          "817:    (is_left && j < g->layers[i].n_nodes) || (!is_left && j >= 0);",
          "818:    j = is_left ? j + 1 : j - 1) {",
          "825:     if (!res[c])",
          "",
          "[Added Lines]",
          "858:   for (j = is_left? 0: g->layers[i].n_nodes - 1;",
          "859:   (is_left && j < g->layers[i].n_nodes) || (!is_left && j >= 0);",
          "860:   j = is_left? j + 1: j - 1) {",
          "867:     if (!res[c]) {",
          "869:     }",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "834:   }",
          "835:  }",
          "839:  return res;",
          "840: }",
          "844: }",
          "847:  RGraphNode *res = NULL;",
          "848:  int pos = n->pos_in_layer;",
          "851:   pos++;",
          "855:   res = g->layers[n->layer].nodes[pos];",
          "856:  return res;",
          "857: }",
          "861:  return hash_get_int (res, gn) - hash_get_int (res, sibl) - dist_nodes (g, sibl, gn);",
          "862: }",
          "867:  const RGraphNode *gn;",
          "868:  const RListIter *it;",
          "869:  const RANode *an;",
          "",
          "[Removed Lines]",
          "837:  if (n_classes)",
          "842: static int cmp_dist (const size_t a, const size_t b) {",
          "843:  return (int)a < (int)b;",
          "846: static RGraphNode *get_sibling (const RAGraph *g, const RANode *n, int is_left, int is_adjust_class) {",
          "850:  if ((is_left && is_adjust_class) || (!is_left && !is_adjust_class))",
          "852:  else pos--;",
          "854:  if (is_valid_pos (g, n->layer, pos))",
          "859: static int adjust_class_val (const RAGraph *g, const RGraphNode *gn, const RGraphNode *sibl, Sdb *res, int is_left) {",
          "860:  if (is_left) return hash_get_int (res, sibl) - hash_get_int (res, gn) - dist_nodes (g, gn, sibl);",
          "866: static void adjust_class (const RAGraph *g, int is_left, RList **classes, Sdb *res, int c) {",
          "",
          "[Added Lines]",
          "880:  if (n_classes) {",
          "882:  }",
          "886: static int cmp_dist(const size_t a, const size_t b) {",
          "887:  return (int) a < (int) b;",
          "890: static RGraphNode *get_sibling(const RAGraph *g, const RANode *n, int is_left, int is_adjust_class) {",
          "894:  if ((is_left && is_adjust_class) || (!is_left && !is_adjust_class)) {",
          "896:  } else {",
          "897:   pos--;",
          "898:  }",
          "900:  if (is_valid_pos (g, n->layer, pos)) {",
          "902:  }",
          "906: static int adjust_class_val(const RAGraph *g, const RGraphNode *gn, const RGraphNode *sibl, Sdb *res, int is_left) {",
          "907:  if (is_left) {",
          "908:   return hash_get_int (res, sibl) - hash_get_int (res, gn) - dist_nodes (g, gn, sibl);",
          "909:  }",
          "915: static void adjust_class(const RAGraph *g, int is_left, RList * *classes, Sdb *res, int c) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "874:   const RANode *sibl_anode;",
          "876:   sibling = get_sibling (g, an, is_left, true);",
          "878:   sibl_anode = get_anode (sibling);",
          "880:   v = adjust_class_val (g, gn, sibling, res, is_left);",
          "882:   is_first = false;",
          "883:  }",
          "",
          "[Removed Lines]",
          "877:   if (!sibling) continue;",
          "879:   if (sibl_anode->klass == c) continue;",
          "881:   dist = is_first ? v : R_MIN (dist, v);",
          "",
          "[Added Lines]",
          "926:   if (!sibling) {",
          "927:    continue;",
          "928:   }",
          "930:   if (sibl_anode->klass == c) {",
          "931:    continue;",
          "932:   }",
          "934:   dist = is_first? v: R_MIN (dist, v);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "893:    const RANode *ak;",
          "895:    graph_foreach_anode (neigh, itk, gk, ak) {",
          "898:    }",
          "899:   }",
          "",
          "[Removed Lines]",
          "896:     if (ak->klass < c)",
          "897:      r_list_append (heap, (void *)(size_t)(ak->x - an->x));",
          "",
          "[Added Lines]",
          "949:     if (ak->klass < c) {",
          "950:      r_list_append (heap, (void *) (size_t) (ak->x - an->x));",
          "951:     }",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "902:   if (len == 0) {",
          "903:    dist = 0;",
          "904:   } else {",
          "907:   }",
          "909:   r_list_free (heap);",
          "",
          "[Removed Lines]",
          "905:    r_list_sort (heap, (RListComparator)cmp_dist);",
          "906:    dist = (int)(size_t)r_list_get_n (heap, len / 2);",
          "",
          "[Added Lines]",
          "959:    r_list_sort (heap, (RListComparator) cmp_dist);",
          "960:    dist = (int) (size_t) r_list_get_n (heap, len / 2);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "912:  graph_foreach_anode (classes[c], it, gn, an) {",
          "913:   const int old_val = hash_get_int (res, gn);",
          "915:   hash_set (res, gn, new_val);",
          "916:  }",
          "917: }",
          "921:  return hash_get_int (res, sibl) - dist_nodes (g, gn, sibl);",
          "922: }",
          "927:  return R_MIN (oldval, newval);",
          "928: }",
          "932:  const RList *lv = hash_get_rlist (v_nodes, gn);",
          "933:  int p = 0, v, is_first = true;",
          "934:  const RGraphNode *gk;",
          "",
          "[Removed Lines]",
          "914:   const int new_val = is_left ?  old_val + dist : old_val - dist;",
          "919: static int place_nodes_val (const RAGraph *g, const RGraphNode *gn, const RGraphNode *sibl, Sdb *res, int is_left) {",
          "920:  if (is_left) return hash_get_int (res, sibl) + dist_nodes (g, sibl, gn);",
          "924: static int place_nodes_sel_p (int newval, int oldval, int is_first, int is_left) {",
          "925:  if (is_first) return newval;",
          "926:  if (is_left) return R_MAX (oldval, newval);",
          "931: static void place_nodes (const RAGraph *g, const RGraphNode *gn, int is_left, Sdb *v_nodes, RList **classes, Sdb *res, Sdb *placed) {",
          "",
          "[Added Lines]",
          "968:   const int new_val = is_left?  old_val + dist: old_val - dist;",
          "973: static int place_nodes_val(const RAGraph *g, const RGraphNode *gn, const RGraphNode *sibl, Sdb *res, int is_left) {",
          "974:  if (is_left) {",
          "975:   return hash_get_int (res, sibl) + dist_nodes (g, sibl, gn);",
          "976:  }",
          "980: static int place_nodes_sel_p(int newval, int oldval, int is_first, int is_left) {",
          "981:  if (is_first) {",
          "982:   return newval;",
          "983:  }",
          "984:  if (is_left) {",
          "985:   return R_MAX (oldval, newval);",
          "986:  }",
          "991: static void place_nodes(const RAGraph *g, const RGraphNode *gn, int is_left, Sdb *v_nodes, RList * *classes, Sdb *res, Sdb *placed) {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "940:   const RANode *sibl_anode;",
          "942:   sibling = get_sibling (g, ak, is_left, false);",
          "944:   sibl_anode = get_anode (sibling);",
          "945:   if (ak->klass == sibl_anode->klass) {",
          "947:     place_nodes (g, sibling, is_left, v_nodes, classes, res, placed);",
          "949:    v = place_nodes_val (g, gk, sibling, res, is_left);",
          "950:    p = place_nodes_sel_p (v, p, is_first, is_left);",
          "",
          "[Removed Lines]",
          "943:   if (!sibling) continue;",
          "946:    if (!hash_get (placed, sibling))",
          "",
          "[Added Lines]",
          "1003:   if (!sibling) {",
          "1004:    continue;",
          "1005:   }",
          "1008:    if (!hash_get (placed, sibling)) {",
          "1010:    }",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "952:   }",
          "953:  }",
          "958:  graph_foreach_anode (lv, itk, gk, ak) {",
          "959:   hash_set (res, gk, p);",
          "",
          "[Removed Lines]",
          "955:  if (is_first)",
          "956:   p = is_left ? 0 : 50;",
          "",
          "[Added Lines]",
          "1018:  if (is_first) {",
          "1019:   p = is_left? 0: 50;",
          "1020:  }",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "962: }",
          "966:  Sdb *res, *placed;",
          "968:  int n_classes, i;",
          "970:  classes = compute_classes (g, v_nodes, is_left, &n_classes);",
          "973:  res = sdb_new0 ();",
          "974:  placed = sdb_new0 ();",
          "",
          "[Removed Lines]",
          "965: static Sdb *compute_pos (const RAGraph *g, int is_left, Sdb *v_nodes) {",
          "967:  RList **classes;",
          "971:  if (!classes) return NULL;",
          "",
          "[Added Lines]",
          "1029: static Sdb *compute_pos(const RAGraph *g, int is_left, Sdb *v_nodes) {",
          "1031:  RList * *classes;",
          "1035:  if (!classes) {",
          "1036:   return NULL;",
          "1037:  }",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "988:  sdb_free (placed);",
          "989:  for (i = 0; i < n_classes; ++i) {",
          "991:    r_list_free (classes[i]);",
          "992:  }",
          "993:  free (classes);",
          "994:  return res;",
          "",
          "[Removed Lines]",
          "990:   if (classes[i])",
          "",
          "[Added Lines]",
          "1056:   if (classes[i]) {",
          "1058:   }",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1001:  const RList *nodes;",
          "1002:  Sdb *xminus, *xplus, *vertical_nodes;",
          "1003:  const RGraphNode *gn;",
          "",
          "[Removed Lines]",
          "1000: static void place_dummies (const RAGraph *g) {",
          "",
          "[Added Lines]",
          "1067: static void place_dummies(const RAGraph *g) {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1005:  RANode *n;",
          "1007:  vertical_nodes = compute_vertical_nodes (g);",
          "1009:  xminus = compute_pos (g, true, vertical_nodes);",
          "1011:  xplus = compute_pos (g, false, vertical_nodes);",
          "1014:  nodes = r_graph_get_nodes (g->graph);",
          "1015:  graph_foreach_anode (nodes, it, gn, n) {",
          "",
          "[Removed Lines]",
          "1008:  if (!vertical_nodes) return;",
          "1010:  if (!xminus) goto xminus_err;",
          "1012:  if (!xplus) goto xplus_err;",
          "",
          "[Added Lines]",
          "1075:  if (!vertical_nodes) {",
          "1076:   return;",
          "1077:  }",
          "1079:  if (!xminus) {",
          "1080:   goto xminus_err;",
          "1081:  }",
          "1083:  if (!xplus) {",
          "1084:   goto xplus_err;",
          "1085:  }",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1023:  sdb_free (vertical_nodes);",
          "1024: }",
          "1027:  const RANode *an = get_anode (n);",
          "1029:  int k, layer = an->layer;",
          "1031:  for (k = an->pos_in_layer + 1; k < g->layers[layer].n_nodes; ++k) {",
          "1032:   RGraphNode *gk = g->layers[layer].nodes[k];",
          "1033:   const RANode *ak = get_anode (gk);",
          "1037:    return gk;",
          "1038:  }",
          "1039:  return NULL;",
          "1040: }",
          "1043:  const RGraphNode *vm = NULL, *wm = NULL;",
          "1044:  const RANode *vma = NULL, *wma = NULL;",
          "1047:  if (i + d < 0 || i + d >= g->n_layers) {",
          "1048:   return;",
          "",
          "[Removed Lines]",
          "1026: static RGraphNode *get_right_dummy (const RAGraph *g, const RGraphNode *n) {",
          "1028:  if (!an) return NULL;",
          "1034:   if (!ak) break;",
          "1036:   if (ak->is_dummy)",
          "1042: static void adjust_directions (const RAGraph *g, int i, int from_up, Sdb *D, Sdb *P) {",
          "1045:  int j, d = from_up ? 1 : -1;",
          "",
          "[Added Lines]",
          "1099: static RGraphNode *get_right_dummy(const RAGraph *g, const RGraphNode *n) {",
          "1101:  if (!an) {",
          "1102:   return NULL;",
          "1103:  }",
          "1109:   if (!ak) {",
          "1110:    break;",
          "1111:   }",
          "1113:   if (ak->is_dummy) {",
          "1115:   }",
          "1120: static void adjust_directions(const RAGraph *g, int i, int from_up, Sdb *D, Sdb *P) {",
          "1123:  int j, d = from_up? 1: -1;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1051:   const RGraphNode *wp, *vp = g->layers[i + d].nodes[j];",
          "1052:   const RANode *wpa, *vpa = get_anode (vp);",
          "1057:   wpa = get_anode (wp);",
          "1058:   if (!wpa || !wpa->is_dummy) {",
          "1059:    continue;",
          "",
          "[Removed Lines]",
          "1054:   if (!vpa->is_dummy) continue;",
          "1055:   if (from_up) wp = r_list_get_n (r_graph_innodes (g->graph, vp), 0);",
          "1056:   else wp = r_graph_nth_neighbour (g->graph, vp, 0);",
          "",
          "[Added Lines]",
          "1132:   if (!vpa->is_dummy) {",
          "1133:    continue;",
          "1134:   }",
          "1135:   if (from_up) {",
          "1136:    wp = r_list_get_n (r_graph_innodes (g->graph, vp), 0);",
          "1137:   } else {",
          "1138:    wp = r_graph_nth_neighbour (g->graph, vp, 0);",
          "1139:   }",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1066:     const RGraphNode *w = g->layers[wma->layer].nodes[k];",
          "1067:     const RANode *aw = get_anode (w);",
          "1070:      p &= hash_get_int (P, w);",
          "1071:    }",
          "1072:    if (p) {",
          "1073:     hash_set (D, vm, from_up);",
          "",
          "[Removed Lines]",
          "1069:     if (aw->is_dummy)",
          "",
          "[Added Lines]",
          "1152:     if (aw->is_dummy) {",
          "1154:     }",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1088: }",
          "1092:  const RGraphNode *gk, *v = g->layers[l].nodes[va];",
          "1093:  const RANode *ak;",
          "1094:  RANode *av = get_anode (v);",
          "",
          "[Removed Lines]",
          "1091: static void place_single (const RAGraph *g, int l, const RGraphNode *bm, const RGraphNode *bp, int from_up, int va) {",
          "",
          "[Added Lines]",
          "1175: static void place_single(const RAGraph *g, int l, const RGraphNode *bm, const RGraphNode *bp, int from_up, int va) {",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1097:  int len;",
          "1099:  neigh = from_up",
          "1101:   : r_graph_get_neighbours (g->graph, v);",
          "1103:  len = r_list_length (neigh);",
          "",
          "[Removed Lines]",
          "1100:   ? r_graph_innodes (g->graph, v)",
          "",
          "[Added Lines]",
          "1184:  ? r_graph_innodes (g->graph, v)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1143:  struct len_pos_t *cx;",
          "1144:  int i;",
          "1151:   const RGraphNode *v, *vi = g->layers[l].nodes[i];",
          "1152:   const RANode *av, *avi = get_anode (vi);",
          "1153:   const RList *neigh;",
          "",
          "[Removed Lines]",
          "1146:  lcmp = is_left ? (RListComparator)RM_listcmp : (RListComparator)RP_listcmp;",
          "1148:  for (i = is_left ? s : e - 1;",
          "1149:   (is_left && i < e) || (!is_left && i >= s);",
          "1150:   i = is_left ? i + 1 : i - 1) {",
          "",
          "[Added Lines]",
          "1230:  lcmp = is_left? (RListComparator) RM_listcmp: (RListComparator) RP_listcmp;",
          "1232:  for (i = is_left? s: e - 1;",
          "1233:  (is_left && i < e) || (!is_left && i >= s);",
          "1234:  i = is_left? i + 1: i - 1) {",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1159:   }",
          "1160:   neigh = from_up",
          "1161:   ? r_graph_innodes (g->graph, vi)",
          "1164:   graph_foreach_anode (neigh, it, v, av) {",
          "1165:    if ((is_left && av->x >= avi->x) || (!is_left && av->x <= avi->x)) {",
          "",
          "[Removed Lines]",
          "1162:   : r_graph_get_neighbours (g->graph, vi);",
          "",
          "[Added Lines]",
          "1246:    : r_graph_get_neighbours (g->graph, vi);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1169:     c--;",
          "1170:     cx->len = 2;",
          "1171:     cx->pos = av->x;",
          "1173:      cx->pos += dist_nodes (g, vi, vt);",
          "1175:      cx->pos -= dist_nodes (g, vtp, vi);",
          "1176:     r_list_add_sorted (list, cx, lcmp);",
          "1177:    }",
          "1178:   }",
          "",
          "[Removed Lines]",
          "1172:     if (is_left)",
          "1174:     else",
          "",
          "[Added Lines]",
          "1256:     if (is_left) {",
          "1258:     } else {",
          "1260:     }",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1180:   cx = R_NEW0 (struct len_pos_t);",
          "1181:   cx->len = c;",
          "1182:   cx->pos = avi->x;",
          "1185:   r_list_add_sorted (list, cx, lcmp);",
          "1186:  }",
          "1188:  if (b) {",
          "1189:   const RANode *ab = get_anode (b);",
          "1190:   cx = R_NEW (struct len_pos_t);",
          "1192:   cx->pos = ab->x;",
          "1193:   if (is_left) {",
          "1194:    cx->pos += dist_nodes (g, b, vt);",
          "",
          "[Removed Lines]",
          "1183:   if (is_left) cx->pos += dist_nodes (g, vi, vt);",
          "1184:   else cx->pos -= dist_nodes (g, vtp, vi);",
          "1191:   cx->len = is_left ? INT_MAX : INT_MIN;",
          "",
          "[Added Lines]",
          "1268:   if (is_left) {",
          "1269:    cx->pos += dist_nodes (g, vi, vt);",
          "1270:   } else {",
          "1271:    cx->pos -= dist_nodes (g, vtp, vi);",
          "1272:   }",
          "1279:   cx->len = is_left? INT_MAX: INT_MIN;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1204:  const RGraphNode *vt, *vtp;",
          "1205:  RANode *at, *atp;",
          "1206:  int rm, rp, t, m, i;",
          "1210:  t = (a + r) / 2;",
          "1211:  vt = g->layers[l].nodes[t - 1];",
          "",
          "[Removed Lines]",
          "1207:  Rm->free = (RListFree)free;",
          "1208:  Rp->free = (RListFree)free;",
          "",
          "[Added Lines]",
          "1295:  Rm->free = (RListFree) free;",
          "1296:  Rp->free = (RListFree) free;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1229:      if (r_list_empty (Rm)) {",
          "1230:       at->x = atp->x - m;",
          "1231:      } else {",
          "1233:       rm = rm + cx->len;",
          "1234:       at->x = R_MAX (cx->pos, atp->x - m);",
          "1235:       free (cx);",
          "",
          "[Removed Lines]",
          "1232:       struct len_pos_t *cx = (struct len_pos_t *)r_list_pop (Rm);",
          "",
          "[Added Lines]",
          "1320:       struct len_pos_t *cx = (struct len_pos_t *) r_list_pop (Rm);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1238:      if (r_list_empty (Rp)) {",
          "1239:       atp->x = at->x + m;",
          "1240:      } else {",
          "1242:       rp = rp + cx->len;",
          "1243:       atp->x = R_MIN (cx->pos, at->x + m);",
          "1244:       free (cx);",
          "",
          "[Removed Lines]",
          "1241:       struct len_pos_t *cx = (struct len_pos_t *)r_list_pop (Rp);",
          "",
          "[Added Lines]",
          "1329:       struct len_pos_t *cx = (struct len_pos_t *) r_list_pop (Rp);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1277:  int vt;",
          "1279:  if (vr == va + 1) {",
          "",
          "[Removed Lines]",
          "1276: static void place_sequence (const RAGraph *g, int l, const RGraphNode *bm, const RGraphNode *bp, int from_up, int va, int vr) {",
          "",
          "[Added Lines]",
          "1364: static void place_sequence(const RAGraph *g, int l, const RGraphNode *bm, const RGraphNode *bp, int from_up, int va, int vr) {",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1293:  int i, k, va, vr;",
          "1298:   int j;",
          "1299:   const RGraphNode *bm = NULL;",
          "1300:   const RANode *bma = NULL;",
          "",
          "[Removed Lines]",
          "1292: static void original_traverse_l (const RAGraph *g, Sdb *D, Sdb *P, int from_up) {",
          "1295:  for (i = from_up ? 0 : g->n_layers - 1;",
          "1296:   (from_up && i < g->n_layers) || (!from_up && i >= 0);",
          "1297:   i = from_up ? i + 1 : i - 1) {",
          "",
          "[Added Lines]",
          "1380: static void original_traverse_l(const RAGraph *g, Sdb *D, Sdb *P, int from_up) {",
          "1383:  for (i = from_up? 0: g->n_layers - 1;",
          "1384:  (from_up && i < g->n_layers) || (!from_up && i >= 0);",
          "1385:  i = from_up? i + 1: i - 1) {",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1334:     for (k = va; k < vr - 1; ++k)",
          "1335:      set_dist_nodes (g, i, k, k + 1);",
          "1338:      set_dist_nodes (g, i, bma->pos_in_layer, va);",
          "1339:    } else if (hash_get_int (D, bm) == from_up) {",
          "1340:     bpa = get_anode (bp);",
          "1341:     va = bma->pos_in_layer + 1;",
          "",
          "[Removed Lines]",
          "1337:     if (is_valid_pos (g, i, va))",
          "",
          "[Added Lines]",
          "1425:     if (is_valid_pos (g, i, va)) {",
          "1427:     }",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1356:  const RList *nodes = r_graph_get_nodes (g->graph);",
          "1357:  Sdb *D, *P;",
          "1358:  const RGraphNode *gn;",
          "",
          "[Removed Lines]",
          "1355: static void place_original (RAGraph *g) {",
          "",
          "[Added Lines]",
          "1444: static void place_original(RAGraph *g) {",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1360:  const RANode *an;",
          "1362:  D = sdb_new0 ();",
          "1364:  P = sdb_new0 ();",
          "1365:  if (!P) {",
          "1366:   sdb_free (D);",
          "",
          "[Removed Lines]",
          "1363:  if (!D) return;",
          "",
          "[Added Lines]",
          "1452:  if (!D) {",
          "1453:   return;",
          "1454:  }",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1395:  sdb_free (D);",
          "1396: }",
          "1399:  const RListIter *it;",
          "1400:  const RGraphEdge *e;",
          "1402:  r_list_foreach (g->long_edges, it, e) {",
          "1403:   RANode *from, *to;",
          "1406:   r_agraph_add_edge_at (g, from, to, e->nth);",
          "1407:  }",
          "1409:  r_list_foreach (g->back_edges, it, e) {",
          "1410:   RANode *from, *to;",
          "1413:   r_agraph_del_edge (g, to, from);",
          "1414:   r_agraph_add_edge_at (g, from, to, e->nth);",
          "1415:  }",
          "1416: }",
          "1419:  RGraphNode *n = an->gnode;",
          "1420:  RGraphNode *from = r_list_get_n (r_graph_innodes (g->graph, n), 0);",
          "1421:  RANode *a_from = get_anode (from);",
          "",
          "[Removed Lines]",
          "1398: static void restore_original_edges (const RAGraph *g) {",
          "1404:   from = e->from ? get_anode (e->from) : NULL;",
          "1405:   to = e->to ? get_anode (e->to) : NULL;",
          "1411:   from = e->from ? get_anode (e->from) : NULL;",
          "1412:   to = e->to ? get_anode (e->to) : NULL;",
          "1418: static void create_edge_from_dummies (const RAGraph *g, RANode *an, RList *toremove) {",
          "",
          "[Added Lines]",
          "1489: static void restore_original_edges(const RAGraph *g) {",
          "1495:   from = e->from? get_anode (e->from): NULL;",
          "1496:   to = e->to? get_anode (e->to): NULL;",
          "1502:   from = e->from? get_anode (e->from): NULL;",
          "1503:   to = e->to? get_anode (e->to): NULL;",
          "1509: static void create_edge_from_dummies(const RAGraph *g, RANode *an, RList *toremove) {",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1430:  if (e->is_reversed) {",
          "1431:   e->to = a_from;",
          "1432:   add_to_list = r_list_prepend;",
          "1435:  } else {",
          "1436:   e->from = a_from;",
          "1437:   add_to_list = r_list_append;",
          "",
          "[Removed Lines]",
          "1433:   add_to_list (e->x, (void *)(size_t)an->x);",
          "1434:   add_to_list (e->y, (void *)(size_t)a_from->y);",
          "",
          "[Added Lines]",
          "1524:   add_to_list (e->x, (void *) (size_t) an->x);",
          "1525:   add_to_list (e->y, (void *) (size_t) a_from->y);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1440:  while (an->is_dummy) {",
          "1441:   add_to_list (toremove, n);",
          "1450:   n = r_graph_nth_neighbour (g->graph, n, 0);",
          "1451:   an = get_anode (n);",
          "",
          "[Removed Lines]",
          "1443:   add_to_list (e->x, (void *)(size_t)an->x);",
          "1444:   add_to_list (e->y, (void *)(size_t)an->y);",
          "1446:   add_to_list (e->x, (void *)(size_t)an->x);",
          "1447:   add_to_list (e->y, (void *)(size_t)",
          "1448:     (an->y + g->layers[an->layer].height));",
          "",
          "[Added Lines]",
          "1534:   add_to_list (e->x, (void *) (size_t) an->x);",
          "1535:   add_to_list (e->y, (void *) (size_t) an->y);",
          "1537:   add_to_list (e->x, (void *) (size_t) an->x);",
          "1538:   add_to_list (e->y, (void *) (size_t)",
          "1539:    (an->y + g->layers[an->layer].height));",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1459:  r_list_append (g->edges, e);",
          "1460: }",
          "1463:  const RList *neigh;",
          "1464:  RListIter *itk;",
          "1465:  RGraphNode *gk;",
          "",
          "[Removed Lines]",
          "1462: static void analyze_back_edges (const RAGraph *g, RANode *an) {",
          "",
          "[Added Lines]",
          "1553: static void analyze_back_edges(const RAGraph *g, RANode *an) {",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1502:    if (first == an) {",
          "1503:     r_list_append (e->x,",
          "1506:    } else {",
          "1507:     r_list_append (e->x,",
          "1510:    }",
          "1511:   }",
          "1512:   r_list_append (g->edges, e);",
          "",
          "[Removed Lines]",
          "1504:      (void *)(size_t)(an->x - 2 - j));",
          "1505:     r_list_append (e->y, (void *)(size_t)ak->y);",
          "1508:      (void *)(size_t)(last->x + last->w + 2 + j));",
          "1509:     r_list_append (e->y, (void *)(size_t)ak->y);",
          "",
          "[Added Lines]",
          "1595:      (void *) (size_t) (an->x - 2 - j));",
          "1596:     r_list_append (e->y, (void *) (size_t) ak->y);",
          "1599:      (void *) (size_t) (last->x + last->w + 2 + j));",
          "1600:     r_list_append (e->y, (void *) (size_t) ak->y);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1514:  }",
          "1515: }",
          "1518:  RGraphNode *gn;",
          "1519:  const RListIter *it;",
          "1520:  RList *toremove = r_list_new ();",
          "1521:  int i, j;",
          "1525:  for (i = 0; i < g->n_layers; ++i) {",
          "1526:   for (j = 0; j < g->layers[i].n_nodes; ++j) {",
          "1527:    RGraphNode *n = g->layers[i].nodes[j];",
          "",
          "[Removed Lines]",
          "1517: static void remove_dummy_nodes (const RAGraph *g) {",
          "",
          "[Added Lines]",
          "1608: static void remove_dummy_nodes(const RAGraph *g) {",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1647:   return NULL;",
          "1648:  }",
          "1649:  r_config_save_num (hc, \"asm.fcnlines\", \"asm.lines\", \"asm.bytes\",",
          "1652:  const bool o_comments = r_config_get_i (core->config, \"graph.comments\");",
          "1653:  const bool o_cmtright = r_config_get_i (core->config, \"graph.cmtright\");",
          "1654:  int o_cursor = core->print->cur_enabled;",
          "1659:  r_config_set_i (core->config, \"asm.fcnlines\", false);",
          "",
          "[Removed Lines]",
          "1650:       \"asm.cmtcol\", \"asm.marks\", \"asm.marks\", \"asm.offset\",",
          "1651:       \"asm.comments\", NULL);",
          "1656:  const char *cmd = (opts & BODY_SUMMARY) ? \"pds\" : \"pD\";",
          "",
          "[Added Lines]",
          "1741:   \"asm.cmtcol\", \"asm.marks\", \"asm.marks\", \"asm.offset\",",
          "1742:   \"asm.comments\", NULL);",
          "1747:  const char *cmd = (opts & BODY_SUMMARY)? \"pds\": \"pD\";",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1703:  if (b->parent_stackptr != INT_MAX) {",
          "1704:   core->anal->stackptr = b->parent_stackptr;",
          "1705:  }",
          "1707:  if (b->jump != UT64_MAX) {",
          "1708:   if (b->jump > b->addr) {",
          "1710:    if (jumpbb) {",
          "1711:     if (emu && core->anal->last_disasm_reg != NULL && !jumpbb->parent_reg_arena) {",
          "1712:      jumpbb->parent_reg_arena = r_reg_arena_dup (core->anal->reg, core->anal->last_disasm_reg);",
          "",
          "[Removed Lines]",
          "1706:  char * body = get_body (core, b->addr, b->size, opts);",
          "1709:    RAnalBlock * jumpbb = r_anal_bb_get_jumpbb (fcn, b);",
          "",
          "[Added Lines]",
          "1797:  char *body = get_body (core, b->addr, b->size, opts);",
          "1800:    RAnalBlock *jumpbb = r_anal_bb_get_jumpbb (fcn, b);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1719:  }",
          "1720:  if (b->fail != UT64_MAX) {",
          "1721:   if (b->fail > b->addr) {",
          "1723:    if (failbb) {",
          "1724:     if (emu && core->anal->last_disasm_reg != NULL && !failbb->parent_reg_arena) {",
          "1725:      failbb->parent_reg_arena = r_reg_arena_dup (core->anal->reg, core->anal->last_disasm_reg);",
          "",
          "[Removed Lines]",
          "1722:    RAnalBlock * failbb = r_anal_bb_get_failbb (fcn, b);",
          "",
          "[Added Lines]",
          "1813:    RAnalBlock *failbb = r_anal_bb_get_failbb (fcn, b);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1753:   R_FREE (saved_arena);",
          "1754:   return;",
          "1755:  }",
          "1758:  r_list_foreach (fcn->bbs, iter, bb) {",
          "1759:   RANode *node;",
          "",
          "[Removed Lines]",
          "1756:  r_list_sort (fcn->bbs, (RListComparator)bbcmp);",
          "",
          "[Added Lines]",
          "1847:  r_list_sort (fcn->bbs, (RListComparator) bbcmp);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "1804:  if (emu) {",
          "1805:   saved_arena = r_reg_arena_peek (core->anal->reg);",
          "1806:  }",
          "1809:  core->keep_asmqjmps = false;",
          "1810:  r_list_foreach (fcn->bbs, iter, bb) {",
          "",
          "[Removed Lines]",
          "1807:  r_list_sort (fcn->bbs, (RListComparator)bbcmp);",
          "",
          "[Added Lines]",
          "1898:  r_list_sort (fcn->bbs, (RListComparator) bbcmp);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "1839:   RANode *u, *v;",
          "1840:   char *title;",
          "1843:    continue;",
          "1845:   title = get_title (bb->addr);",
          "1846:   u = r_agraph_get_node (g, title);",
          "",
          "[Removed Lines]",
          "1842:   if (bb->addr == UT64_MAX)",
          "",
          "[Added Lines]",
          "1933:   if (bb->addr == UT64_MAX) {",
          "1935:   }",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "1893:  RAnalRef *ref;",
          "1894:  char *title, *body;",
          "1898:  r_core_seek (core, f->addr, 1);",
          "",
          "[Removed Lines]",
          "1896:  if (!f) return false;",
          "",
          "[Added Lines]",
          "1988:  if (!f) {",
          "1989:   return false;",
          "1990:  }",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "1911:  r_list_foreach (fcn->refs, iter, ref) {",
          "1915:   title = get_title (ref->addr);",
          "1918:   free (title);",
          "1920:   int size = 0;",
          "1921:   RAnalBlock *bb = r_anal_bb_from_offset (core->anal, ref->addr);",
          "1924:   body = get_body (core, ref->addr, size, mode2opts (g));",
          "1925:   title = get_title (ref->addr);",
          "1927:   node = r_agraph_add_node (g, title, body);",
          "1930:   free (title);",
          "1931:   free (body);",
          "",
          "[Removed Lines]",
          "1916:   if (r_agraph_get_node (g, title) != NULL)",
          "1917:     continue;",
          "1922:   if (bb) size = bb->size;",
          "1928:   if (!node) return false;",
          "",
          "[Added Lines]",
          "2010:   if (r_agraph_get_node (g, title) != NULL) {",
          "2011:    continue;",
          "2012:   }",
          "2017:   if (bb) {",
          "2018:    size = bb->size;",
          "2019:   }",
          "2025:   if (!node) {",
          "2026:    return false;",
          "2027:   }",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "1945: static int reload_nodes(RAGraph *g, RCore *core, RAnalFunction *fcn) {",
          "1946:  int is_c = g->is_callgraph;",
          "1948: }",
          "1950: static void update_seek(RConsCanvas *can, RANode *n, int force) {",
          "",
          "[Removed Lines]",
          "1947:  return is_c ? get_cgnodes (g, core, fcn) : get_bbnodes (g, core, fcn);",
          "",
          "[Added Lines]",
          "2046:  return is_c? get_cgnodes (g, core, fcn): get_bbnodes (g, core, fcn);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "1967:  }",
          "1968: }",
          "1971:  if (is_next) {",
          "1972:   return (n->y == y && n->x > x) || n->y > y;",
          "1973:  }",
          "",
          "[Removed Lines]",
          "1970: static int is_near (const RANode *n, int x, int y, int is_next) {",
          "",
          "[Added Lines]",
          "2069: static int is_near(const RANode *n, int x, int y, int is_next) {",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "1975: }",
          "1979:  if (is_next) {",
          "1980:   return (n->x == x && n->y > y) || n->x > x;",
          "1981:  }",
          "1982:  return (n->x == x && n->y < y) || n->x < x;",
          "1983: }",
          "1987:  const RList *nodes = r_graph_get_nodes (g->graph);",
          "1988:  const RListIter *it;",
          "1989:  const RGraphNode *gn, *resgn = NULL;",
          "1995:  graph_foreach_anode (nodes, it, gn, n) {",
          "1996:   bool isNear = g->layout",
          "1998:    : is_near_h (n, start_x, start_y, is_next);",
          "1999:   if (isNear) {",
          "2000:    const RANode *resn;",
          "",
          "[Removed Lines]",
          "1978: static int is_near_h (const RANode *n, int x, int y, int is_next) {",
          "1985: static const RGraphNode *find_near_of (const RAGraph *g, const RGraphNode *cur, int is_next) {",
          "1990:  const RANode *n, *acur = cur ? get_anode (cur) : NULL;",
          "1991:  int default_v = is_next ? INT_MIN : INT_MAX;",
          "1992:  int start_y = acur ? acur->y : default_v;",
          "1993:  int start_x = acur ? acur->x : default_v;",
          "1997:    ? is_near (n, start_x, start_y, is_next)",
          "",
          "[Added Lines]",
          "2077: static int is_near_h(const RANode *n, int x, int y, int is_next) {",
          "2084: static const RGraphNode *find_near_of(const RAGraph *g, const RGraphNode *cur, int is_next) {",
          "2089:  const RANode *n, *acur = cur? get_anode (cur): NULL;",
          "2090:  int default_v = is_next? INT_MIN: INT_MAX;",
          "2091:  int start_y = acur? acur->y: default_v;",
          "2092:  int start_x = acur? acur->x: default_v;",
          "2096:   ? is_near (n, start_x, start_y, is_next)",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2008:    if ((is_next && resn->y > n->y) || (!is_next && resn->y < n->y)) {",
          "2009:     resgn = gn;",
          "2010:    } else if ((is_next && resn->y == n->y && resn->x > n->x) ||",
          "2012:     resgn = gn;",
          "2013:    }",
          "2014:   }",
          "",
          "[Removed Lines]",
          "2011:      (!is_next && resn->y == n->y && resn->x < n->x)) {",
          "",
          "[Added Lines]",
          "2110:    (!is_next && resn->y == n->y && resn->x < n->x)) {",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2019:  return resgn;",
          "2020: }",
          "2023:  RListIter *it;",
          "2024:  RGraphNode *gk;",
          "2025:  RANode *ak, *min_gn, *max_gn;",
          "",
          "[Removed Lines]",
          "2022: static void update_graph_sizes (RAGraph *g) {",
          "",
          "[Added Lines]",
          "2121: static void update_graph_sizes(RAGraph *g) {",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2032:  min_gn = max_gn = NULL;",
          "2034:  graph_foreach_anode (r_graph_get_nodes (g->graph), it, gk, ak) {",
          "2036:   if (ak->y < g->y) {",
          "2037:    g->y = ak->y;",
          "2038:    min_gn = ak;",
          "2039:   }",
          "2041:   if (ak->y + ak->h > max_y) {",
          "2042:    max_y = ak->y + ak->h;",
          "2043:    max_gn = ak;",
          "",
          "[Removed Lines]",
          "2035:   if (ak->x < g->x) g->x = ak->x;",
          "2040:   if (ak->x + ak->w > max_x) max_x = ak->x + ak->w;",
          "",
          "[Added Lines]",
          "2134:   if (ak->x < g->x) {",
          "2135:    g->x = ak->x;",
          "2136:   }",
          "2141:   if (ak->x + ak->w > max_x) {",
          "2142:    max_x = ak->x + ak->w;",
          "2143:   }",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2056:    if (r_cons_is_breaked ()) {",
          "2057:     break;",
          "2058:    }",
          "2062:   }",
          "2063:   r_list_foreach (e->y, kt, vv) {",
          "2064:    if (r_cons_is_breaked ()) {",
          "2065:     break;",
          "2066:    }",
          "2070:   }",
          "2071:  }",
          "2072:  r_cons_break_pop ();",
          "",
          "[Removed Lines]",
          "2059:    v = (int)(size_t)vv;",
          "2060:    if (v < g->x) g->x = v;",
          "2061:    if (v + 1 > max_x) max_x = v + 1;",
          "2067:    v = (int)(size_t)vv;",
          "2068:    if (v < g->y) g->y = v;",
          "2069:    if (v + 1 > max_y) max_y = v + 1;",
          "",
          "[Added Lines]",
          "2162:    v = (int) (size_t) vv;",
          "2163:    if (v < g->x) {",
          "2164:     g->x = v;",
          "2165:    }",
          "2166:    if (v + 1 > max_x) {",
          "2167:     max_x = v + 1;",
          "2168:    }",
          "2174:    v = (int) (size_t) vv;",
          "2175:    if (v < g->y) {",
          "2176:     g->y = v;",
          "2177:    }",
          "2178:    if (v + 1 > max_y) {",
          "2179:     max_y = v + 1;",
          "2180:    }",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2079:   }",
          "2080:   if (max_gn) {",
          "2081:    const RList *neigh = r_graph_get_neighbours (g->graph, min_gn->gnode);",
          "2083:     max_y++;",
          "2084:   }",
          "2085:  }",
          "",
          "[Removed Lines]",
          "2082:    if (r_list_length (neigh) > 0)",
          "",
          "[Added Lines]",
          "2193:    if (r_list_length (neigh) > 0) {",
          "2195:    }",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2088:   g->w = max_x - g->x;",
          "2089:   if (g->title) {",
          "2090:    size_t len = strlen (g->title);",
          "2093:   }",
          "2094:   g->h = max_y - g->y;",
          "2095:  } else {",
          "",
          "[Removed Lines]",
          "2091:    if (len > INT_MAX) g->w = INT_MAX;",
          "2092:    if ((int)len > g->w) g->w = len;",
          "",
          "[Added Lines]",
          "2203:    if (len > INT_MAX) {",
          "2204:     g->w = INT_MAX;",
          "2205:    }",
          "2206:    if ((int) len > g->w) {",
          "2207:     g->w = len;",
          "2208:    }",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2100:  sdb_num_set (g->db, \"agraph.w\", g->w, 0);",
          "2101:  sdb_num_set (g->db, \"agraph.h\", g->h, 0);",
          "2106:  sdb_num_set (g->db, \"agraph.delta_x\", delta_x, 0);",
          "2107:  sdb_num_set (g->db, \"agraph.delta_y\", delta_y, 0);",
          "2108: }",
          "",
          "[Removed Lines]",
          "2104:  delta_x = g->x < 0 ? -g->x : 0;",
          "2105:  delta_y = g->y < 0 ? -g->y : 0;",
          "",
          "[Added Lines]",
          "2220:  delta_x = g->x < 0? -g->x: 0;",
          "2221:  delta_y = g->y < 0? -g->y: 0;",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2121: }",
          "2123: static ut64 rebase(RAGraph *g, int v) {",
          "2125: }",
          "2127: static void agraph_set_layout(RAGraph *g, bool is_interactive) {",
          "",
          "[Removed Lines]",
          "2124:  return g->x < 0 ? -g->x + v : v;",
          "",
          "[Added Lines]",
          "2240:  return g->x < 0? -g->x + v: v;",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2167:   } else {",
          "2168:    if (n->h < 4) {",
          "2169:     int titlen = strlen (n->title);",
          "2171:     if (titlen > n->w) {",
          "2172:      n->w = titlen + 6;",
          "2173:     } else {",
          "",
          "[Removed Lines]",
          "2170:     n->w = r_str_bounds (n->body, (int *)&n->h);",
          "",
          "[Added Lines]",
          "2286:     n->w = r_str_bounds (n->body, (int *) &n->h);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2198:  }",
          "2199: }",
          "2203: }",
          "",
          "[Removed Lines]",
          "2201: static int find_ascii_edge (const AEdge *a, const AEdge *b) {",
          "2202:  return a->from == b->from && a->to == b->to ? 0 : 1;",
          "",
          "[Added Lines]",
          "2317: static int find_ascii_edge(const AEdge *a, const AEdge *b) {",
          "2318:  return a->from == b->from && a->to == b->to? 0: 1;",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2217:  xinc = 4 + 2 * (nth + 1);",
          "2218:  x = a->x + xinc;",
          "2219:  y = a->y + a->h;",
          "2222:  switch (nth) {",
          "2223:  case 0: style.color = LINE_TRUE; break;",
          "",
          "[Removed Lines]",
          "2220:  if (nth > 1) nth = 1;",
          "",
          "[Added Lines]",
          "2336:  if (nth > 1) {",
          "2337:   nth = 1;",
          "2338:  }",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2230:  e.from = a;",
          "2231:  e.to = b;",
          "2234:  switch (g->layout) {",
          "2235:  case 0:",
          "2236:  default:",
          "2238:   if (it) {",
          "2239:    int i, len;",
          "",
          "[Removed Lines]",
          "2232:  it = r_list_find (g->edges, &e, (RListComparator)find_ascii_edge);",
          "2237:   it = r_list_find (g->edges, &e, (RListComparator)find_ascii_edge);",
          "",
          "[Added Lines]",
          "2350:  it = r_list_find (g->edges, &e, (RListComparator) find_ascii_edge);",
          "2355:   it = r_list_find (g->edges, &e, (RListComparator) find_ascii_edge);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2242:    len = r_list_length (edg->x);",
          "2244:    for (i = 0; i < len; ++i) {",
          "2248:     if (is_first && nth == 0 && x2 > x) {",
          "2249:      xinc += 4;",
          "",
          "[Removed Lines]",
          "2245:     x2 = (int)(size_t)r_list_get_n (edg->x, i);",
          "2246:     y2 = (int)(size_t)r_list_get_n (edg->y, i) - 1;",
          "",
          "[Added Lines]",
          "2363:     x2 = (int) (size_t) r_list_get_n (edg->x, i);",
          "2364:     y2 = (int) (size_t) r_list_get_n (edg->y, i) - 1;",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "2321:  g->force_update_seek = true;",
          "2322: }",
          "2326:  g->zoom = R_MAX (0, v);",
          "2327:  g->need_update_dim = true;",
          "2328:  g->need_set_layout = true;",
          "",
          "[Removed Lines]",
          "2324: static void agraph_set_zoom (RAGraph *g, int v) {",
          "2325:  g->mode = v <= 0 ? R_AGRAPH_MODE_MINI : R_AGRAPH_MODE_NORMAL;",
          "",
          "[Added Lines]",
          "2442: static void agraph_set_zoom(RAGraph *g, int v) {",
          "2443:  g->mode = v <= 0? R_AGRAPH_MODE_MINI: R_AGRAPH_MODE_NORMAL;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "2344: }",
          "2346: #if GRAPH_MERGE_FEATURE",
          "2348: static void agraph_merge_child(RAGraph *g, int idx) {",
          "2349:  const RGraphNode *nn = r_graph_nth_neighbour (g->graph, g->curnode, idx);",
          "2350:  const RGraphNode *cn = g->curnode;",
          "",
          "[Removed Lines]",
          "2347: #define K_NEIGHBOURS(x) (sdb_fmt(2, \"agraph.nodes.%s.neighbours\", x->title))",
          "",
          "[Added Lines]",
          "2465: #define K_NEIGHBOURS(x) (sdb_fmt (2, \"agraph.nodes.%s.neighbours\", x->title))",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "2378:  RANode *n = get_anode (g->curnode);",
          "2379:  n->mini = !n->mini;",
          "2380:  agraph_refresh (r_cons_singleton ()->event_data);",
          "2382: }",
          "2384: static void agraph_follow_true(RAGraph *g) {",
          "",
          "[Removed Lines]",
          "2381:  agraph_set_layout ((RAGraph *)g, r_cons_singleton() ->is_interactive);",
          "",
          "[Added Lines]",
          "2499:  agraph_set_layout ((RAGraph *) g, r_cons_singleton ()->is_interactive);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "2403:  agraph_update_seek (g, get_anode (g->curnode), false);",
          "2404: }",
          "2408:  char *new_title = r_str_newf (",
          "2412:  r_agraph_set_title (g, new_title);",
          "2413:  r_str_free (new_title);",
          "2414: }",
          "",
          "[Removed Lines]",
          "2406: static void agraph_update_title (RAGraph *g, RAnalFunction *fcn) {",
          "2407:  const char *mode_str = g->is_callgraph ? mode2str (g, \"CG\") : mode2str (g, \"BB\");",
          "2409:    \"[0x%08\"PFMT64x\"]> VV @ %s (nodes %d edges %d zoom %d%%) %s mouse:%s movements-speed:%d\",",
          "2410:    fcn->addr, fcn->name, g->graph->n_nodes, g->graph->n_edges,",
          "2411:    g->zoom, mode_str, mousemodes[mousemode], g->movspeed);",
          "",
          "[Added Lines]",
          "2524: static void agraph_update_title(RAGraph *g, RAnalFunction *fcn) {",
          "2525:  const char *mode_str = g->is_callgraph? mode2str (g, \"CG\"): mode2str (g, \"BB\");",
          "2527:   \"[0x%08\"PFMT64x \"]> VV @ %s (nodes %d edges %d zoom %d%%) %s mouse:%s movements-speed:%d\",",
          "2528:   fcn->addr, fcn->name, g->graph->n_nodes, g->graph->n_edges,",
          "2529:   g->zoom, mode_str, mousemodes[mousemode], g->movspeed);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "2418: static int check_changes(RAGraph *g, int is_interactive,",
          "2421:  if (g->need_reload_nodes && core) {",
          "2422:   if (!g->update_seek_on && !g->force_update_seek) {",
          "",
          "[Removed Lines]",
          "2419:   RCore *core, RAnalFunction *fcn) {",
          "2420:  int oldpos[2] = {0, 0};",
          "",
          "[Added Lines]",
          "2537:                          RCore *core, RAnalFunction *fcn) {",
          "2538:  int oldpos[2] = {",
          "2539:   0, 0",
          "2540:  };",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "2442:   char *title = get_title (off);",
          "2443:   RANode *cur_anode = get_anode (g->curnode);",
          "2444:   if (fcn && ((is_interactive && !cur_anode) ||",
          "2446:    g->update_seek_on = r_agraph_get_node (g, title);",
          "2447:    if (g->update_seek_on) {",
          "2448:     r_agraph_set_curnode (g, g->update_seek_on);",
          "",
          "[Removed Lines]",
          "2445:    (cur_anode && strcmp (cur_anode->title, title) != 0))) {",
          "",
          "[Added Lines]",
          "2565:   (cur_anode && strcmp (cur_anode->title, title) != 0))) {",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "2455:  }",
          "2456:  if (g->update_seek_on || g->force_update_seek) {",
          "2457:   RANode *n = g->update_seek_on;",
          "2460:  }",
          "2461:  if (oldpos[0] || oldpos[1]) {",
          "2462:   g->can->sx = oldpos[0];",
          "",
          "[Removed Lines]",
          "2458:   if (!n && g->curnode) n = get_anode (g->curnode);",
          "2459:   if (n) update_seek (g->can, n, g->force_update_seek);",
          "",
          "[Added Lines]",
          "2578:   if (!n && g->curnode) {",
          "2579:    n = get_anode (g->curnode);",
          "2580:   }",
          "2581:   if (n) {",
          "2582:    update_seek (g->can, n, g->force_update_seek);",
          "2583:   }",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "2473: static int agraph_print(RAGraph *g, int is_interactive, RCore *core, RAnalFunction *fcn) {",
          "2474:  int h, w = r_cons_get_size (&h);",
          "2475:  int ret = check_changes (g, is_interactive, core, fcn);",
          "2478:  if (is_interactive) {",
          "2479:   r_cons_clear00 ();",
          "",
          "[Removed Lines]",
          "2476:  if (!ret) return false;",
          "",
          "[Added Lines]",
          "2600:  if (!ret) {",
          "2601:   return false;",
          "2602:  }",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "2482:   update_graph_sizes (g);",
          "2483:  }",
          "2487:  r_cons_canvas_resize (g->can, w, h);",
          "2489:  if (!is_interactive) {",
          "",
          "[Removed Lines]",
          "2485:  h = is_interactive ? h : g->h + 1;",
          "2486:  w = is_interactive ? w : g->w;",
          "",
          "[Added Lines]",
          "2611:  h = is_interactive? h: g->h + 1;",
          "2612:  w = is_interactive? w: g->w;",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "2495:  agraph_print_nodes (g);",
          "2499:  W (g->title);",
          "2500:  if (is_interactive && g->title) {",
          "2501:   int title_len = strlen (g->title);",
          "2502:   r_cons_canvas_fill (g->can, -g->can->sx + title_len, -g->can->sy,",
          "2504:  }",
          "2506:  r_cons_canvas_print_region (g->can);",
          "",
          "[Removed Lines]",
          "2498:  (void)G (-g->can->sx, -g->can->sy);",
          "2503:     w - title_len, 1, ' ', true);",
          "",
          "[Added Lines]",
          "2624:  (void) G (-g->can->sx, -g->can->sy);",
          "2629:    w - title_len, 1, ' ', true);",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "2520: static int agraph_refresh(struct agraph_refresh_data *grd) {",
          "2521:  RCore *core = grd->core;",
          "2522:  RAGraph *g = grd->g;",
          "2526:  if (g->is_instep && core->io->debug) {",
          "",
          "[Removed Lines]",
          "2523:  RAnalFunction *f, **fcn = grd->fcn;",
          "",
          "[Added Lines]",
          "2649:  RAnalFunction *f, * *fcn = grd->fcn;",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "2554:   }",
          "2555:  }",
          "2558: }",
          "2561:  int alt = r_config_get_i (core->config, \"graph.scroll\");",
          "2563: }",
          "2565: static void agraph_init(RAGraph *g) {",
          "",
          "[Removed Lines]",
          "2557:  return agraph_print (g, grd->fs, core, fcn != NULL ? *fcn : NULL);",
          "2560: static void agraph_toggle_speed (RAGraph *g, RCore *core) {",
          "2562:  g->movspeed = g->movspeed == DEFAULT_SPEED ? alt : DEFAULT_SPEED;",
          "",
          "[Added Lines]",
          "2683:  return agraph_print (g, grd->fs, core, fcn != NULL? *fcn: NULL);",
          "2686: static void agraph_toggle_speed(RAGraph *g, RCore *core) {",
          "2688:  g->movspeed = g->movspeed == DEFAULT_SPEED? alt: DEFAULT_SPEED;",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "2577:  g->db = sdb_new0 ();",
          "2578: }",
          "2581:  free (n->title);",
          "2582:  free (n->body);",
          "2583: }",
          "2588:  free_anode (n);",
          "2589:  return 1;",
          "2590: }",
          "2594:  sdb_free (g->nodes);",
          "2595: }",
          "2599:  sdb_set (db, key, estr, cas);",
          "2600:  free (estr);",
          "2601: }",
          "2604:  sdb_bool_set (g->db, \"agraph.is_callgraph\", g->is_callgraph, 0);",
          "2605:  sdb_set_enc (g->db, \"agraph.color_box\", g->color_box, 0);",
          "2606:  sdb_set_enc (g->db, \"agraph.color_box2\", g->color_box2, 0);",
          "",
          "[Removed Lines]",
          "2580: static void free_anode (RANode *n) {",
          "2585: static int free_anode_cb (void *user UNUSED, const char *k UNUSED, const char *v) {",
          "2586:  RANode *n = (RANode *)(size_t)sdb_atoi(v);",
          "2587:  if (!n) return 0;",
          "2592: static void agraph_free_nodes (const RAGraph *g) {",
          "2593:  sdb_foreach (g->nodes, (SdbForeachCallback)free_anode_cb, NULL);",
          "2597: static void sdb_set_enc (Sdb *db, const char *key, const char *v, ut32 cas) {",
          "2598:  char *estr = sdb_encode ((const void *)v, -1);",
          "2603: static void agraph_sdb_init (const RAGraph *g) {",
          "",
          "[Added Lines]",
          "2706: static void free_anode(RANode *n) {",
          "2711: static int free_anode_cb(void *user UNUSED, const char *k UNUSED, const char *v) {",
          "2712:  RANode *n = (RANode *) (size_t) sdb_atoi (v);",
          "2713:  if (!n) {",
          "2714:   return 0;",
          "2715:  }",
          "2720: static void agraph_free_nodes(const RAGraph *g) {",
          "2721:  sdb_foreach (g->nodes, (SdbForeachCallback) free_anode_cb, NULL);",
          "2725: static void sdb_set_enc(Sdb *db, const char *key, const char *v, ut32 cas) {",
          "2726:  char *estr = sdb_encode ((const void *) v, -1);",
          "2731: static void agraph_sdb_init(const RAGraph *g) {",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "2609:  sdb_set_enc (g->db, \"agraph.color_false\", g->color_false, 0);",
          "2610: }",
          "2613:  g->need_update_dim = true;",
          "2614:  g->need_set_layout = true;",
          "2615:  check_changes (g, false, NULL, NULL);",
          "2616:  return g->db;",
          "2617: }",
          "2620:  agraph_print (g, false, NULL, NULL);",
          "2621:  if (g->graph->n_nodes > 0) {",
          "2622:   r_cons_newline ();",
          "2623:  }",
          "2624: }",
          "2627:  free (g->title);",
          "2629:  sdb_set (g->db, \"agraph.title\", g->title, 0);",
          "2630: }",
          "",
          "[Removed Lines]",
          "2612: R_API Sdb *r_agraph_get_sdb (RAGraph *g) {",
          "2619: R_API void r_agraph_print (RAGraph *g) {",
          "2626: R_API void r_agraph_set_title (RAGraph *g, const char *title) {",
          "2628:  g->title = title ? strdup (title) : NULL;",
          "",
          "[Added Lines]",
          "2740: R_API Sdb *r_agraph_get_sdb(RAGraph *g) {",
          "2747: R_API void r_agraph_print(RAGraph *g) {",
          "2754: R_API void r_agraph_set_title(RAGraph *g, const char *title) {",
          "2756:  g->title = title? strdup (title): NULL;",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "2638:  if (!res) {",
          "2639:   return NULL;",
          "2640:  }",
          "2643:  res->layer = -1;",
          "2644:  res->pos_in_layer = -1;",
          "2645:  res->is_dummy = false;",
          "2646:  res->is_reversed = false;",
          "2647:  res->klass = -1;",
          "2648:  res->gnode = r_graph_add_node (g->graph, res);",
          "2650:  if (res->title) {",
          "2651:   char *s, *estr, *b;",
          "2652:   size_t len;",
          "",
          "[Removed Lines]",
          "2641:  res->title = title ? strdup (title) : strdup (\"\");",
          "2642:  res->body = body ? strdup (body) : strdup (\"\");",
          "2649:  sdb_num_set (g->nodes, title, (ut64)(size_t)res, 0);",
          "",
          "[Added Lines]",
          "2769:  res->title = title? strdup (title): strdup (\"\");",
          "2770:  res->body = body? strdup (body): strdup (\"\");",
          "2777:  sdb_num_set (g->nodes, title, (ut64) (size_t) res, 0);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "2656:   if (len > 0 && b[len - 1] == '\\n') {",
          "2657:    b[len - 1] = '\\0';",
          "2658:   }",
          "2660:   s = sdb_fmt (1, \"base64:%s\", estr);",
          "2661:   free (estr);",
          "2662:   free (b);",
          "",
          "[Removed Lines]",
          "2659:   estr = sdb_encode ((const void *)b, -1);",
          "",
          "[Added Lines]",
          "2787:   estr = sdb_encode ((const void *) b, -1);",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "2700: static int user_node_cb(struct g_cb *user, const char *k UNUSED, const char *v) {",
          "2701:  RANodeCallback cb = user->node_cb;",
          "2702:  void *user_data = user->data;",
          "2705:  return 1;",
          "2706: }",
          "",
          "[Removed Lines]",
          "2703:  RANode *n = (RANode *)(size_t)sdb_atoi (v);",
          "2704:  if (n) cb (n, user_data);",
          "",
          "[Added Lines]",
          "2831:  RANode *n = (RANode *) (size_t) sdb_atoi (v);",
          "2832:  if (n) {",
          "2833:   cb (n, user_data);",
          "2834:  }",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "2709:  RAEdgeCallback cb = user->edge_cb;",
          "2710:  RAGraph *g = user->graph;",
          "2711:  void *user_data = user->data;",
          "2714:  const RList *neigh = r_graph_get_neighbours (g->graph, n->gnode);",
          "2715:  RListIter *it;",
          "2716:  RGraphNode *gn;",
          "",
          "[Removed Lines]",
          "2712:  RANode *an, *n = (RANode *)(size_t)sdb_atoi (v);",
          "2713:  if (!n) return 0;",
          "",
          "[Added Lines]",
          "2842:  RANode *an, *n = (RANode *) (size_t) sdb_atoi (v);",
          "2843:  if (!n) {",
          "2844:   return 0;",
          "2845:  }",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "2725:  struct g_cb u;",
          "2726:  u.node_cb = cb;",
          "2727:  u.data = user;",
          "2729: }",
          "2731: R_API void r_agraph_foreach_edge(RAGraph *g, RAEdgeCallback cb, void *user) {",
          "",
          "[Removed Lines]",
          "2728:  sdb_foreach (g->nodes, (SdbForeachCallback)user_node_cb, &u);",
          "",
          "[Added Lines]",
          "2860:  sdb_foreach (g->nodes, (SdbForeachCallback) user_node_cb, &u);",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "2733:  u.graph = g;",
          "2734:  u.edge_cb = cb;",
          "2735:  u.data = user;",
          "2737: }",
          "2739: R_API RANode *r_agraph_get_first_node(const RAGraph *g) {",
          "",
          "[Removed Lines]",
          "2736:  sdb_foreach (g->nodes, (SdbForeachCallback)user_edge_cb, &u);",
          "",
          "[Added Lines]",
          "2868:  sdb_foreach (g->nodes, (SdbForeachCallback) user_edge_cb, &u);",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "2743: }",
          "2745: R_API RANode *r_agraph_get_node(const RAGraph *g, const char *title) {",
          "2747: }",
          "2749: R_API void r_agraph_add_edge(const RAGraph *g, RANode *a, RANode *b) {",
          "2751:  r_graph_add_edge (g->graph, a->gnode, b->gnode);",
          "2752:  if (a->title && b->title) {",
          "2753:   char *k = sdb_fmt (1, \"agraph.nodes.%s.neighbours\", a->title);",
          "",
          "[Removed Lines]",
          "2746:  return (RANode *)(size_t)sdb_num_get (g->nodes, title, NULL);",
          "2750:  if (!g || !a || !b) return;",
          "",
          "[Added Lines]",
          "2878:  return (RANode *) (size_t) sdb_num_get (g->nodes, title, NULL);",
          "2882:  if (!g || !a || !b) {",
          "2883:   return;",
          "2884:  }",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "2756: }",
          "2758: R_API void r_agraph_add_edge_at(const RAGraph *g, RANode *a, RANode *b, int nth) {",
          "2760:  if (a->title && b->title) {",
          "2761:   char *k = sdb_fmt (1, \"agraph.nodes.%s.neighbours\", a->title);",
          "2762:   sdb_array_insert (g->db, k, nth, b->title, 0);",
          "",
          "[Removed Lines]",
          "2759:  if (!g || !a || !b) return;",
          "",
          "[Added Lines]",
          "2893:  if (!g || !a || !b) {",
          "2894:   return;",
          "2895:  }",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "2765: }",
          "2767: R_API void r_agraph_del_edge(const RAGraph *g, RANode *a, RANode *b) {",
          "2769:  if (a->title && b->title) {",
          "2770:   char *k = sdb_fmt (1, \"agraph.nodes.%s.neighbours\", a->title);",
          "2771:   sdb_array_remove (g->db, k, b->title, 0);",
          "",
          "[Removed Lines]",
          "2768:  if (!g || !a || !b) return;",
          "",
          "[Added Lines]",
          "2904:  if (!g || !a || !b) {",
          "2905:   return;",
          "2906:  }",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "2773:  r_graph_del_edge (g->graph, a->gnode, b->gnode);",
          "2774: }",
          "2777:  r_graph_reset (g->graph);",
          "2778:  agraph_free_nodes (g);",
          "2779:  r_agraph_set_title (g, NULL);",
          "",
          "[Removed Lines]",
          "2776: R_API void r_agraph_reset (RAGraph *g) {",
          "",
          "[Added Lines]",
          "2914: R_API void r_agraph_reset(RAGraph *g) {",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "2803: R_API RAGraph *r_agraph_new(RConsCanvas *can) {",
          "2804:  RAGraph *g = R_NEW0 (RAGraph);",
          "2806:  g->can = can;",
          "2807:  agraph_init (g);",
          "2808:  agraph_sdb_init (g);",
          "2809:  return g;",
          "2810: }",
          "2813:  char buf[256];",
          "2814:  int rows;",
          "2815:  r_cons_get_size (&rows);",
          "",
          "[Removed Lines]",
          "2805:  if (!g) return NULL;",
          "2812: static void visual_offset (RAGraph *g, RCore *core) {",
          "",
          "[Added Lines]",
          "2943:  if (!g) {",
          "2944:   return NULL;",
          "2945:  }",
          "2952: static void visual_offset(RAGraph *g, RCore *core) {",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "2844:   obuf[i++] = ch;",
          "2845:   r_cons_printf (\"%c\", ch);",
          "2846:   r_cons_flush ();",
          "2848:  } while (i < R_CORE_ASMQJMPS_LEN_LETTERS && cont);",
          "2850:  obuf[i] = '\\0';",
          "",
          "[Removed Lines]",
          "2847:   cont = isalpha ((ut8)ch) && !islower ((ut8)ch);",
          "",
          "[Added Lines]",
          "2987:   cont = isalpha ((ut8) ch) && !islower ((ut8) ch);",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "2907:  r_config_save_num (hc, \"asm.cmtright\", NULL);",
          "2908:  if (!g) {",
          "2909:   graph_allocated = true;",
          "2911:   if (!fcn) {",
          "2912:    eprintf (\"No function in current seek\\n\");",
          "2913:    r_config_restore (hc);",
          "",
          "[Removed Lines]",
          "2910:   fcn = _fcn ? _fcn : r_anal_get_fcn_in (core->anal, core->offset, 0);",
          "",
          "[Added Lines]",
          "3050:   fcn = _fcn? _fcn: r_anal_get_fcn_in (core->anal, core->offset, 0);",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "2928:  r_config_set_i (core->config, \"scr.interactive\", false);",
          "2929:  g->can = can;",
          "2930:  g->movspeed = r_config_get_i (core->config, \"graph.scroll\");",
          "2932:  g->on_curnode_change_data = core;",
          "2933:  bool asm_comments = r_config_get_i (core->config, \"asm.comments\");",
          "2938:  core->is_asmqjmps_letter = true;",
          "",
          "[Removed Lines]",
          "2931:  g->on_curnode_change = (RANodeCallback)seek_to_node;",
          "2934:  r_config_set (core->config, \"asm.comments\",",
          "2935:     r_str_bool (r_config_get_i (core->config, \"graph.comments\")));",
          "",
          "[Added Lines]",
          "3071:  g->on_curnode_change = (RANodeCallback) seek_to_node;",
          "3074:  r_config_set (core->config, \"asm.comments\",",
          "3075:   r_str_bool (r_config_get_i (core->config, \"graph.comments\")));",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "2948:  grd->g = g;",
          "2949:  grd->fs = is_interactive;",
          "2950:  grd->core = core;",
          "2952:  ret = agraph_refresh (grd);",
          "2953:  if (!ret || !is_interactive) {",
          "2954:   r_cons_newline ();",
          "",
          "[Removed Lines]",
          "2951:  grd->fcn = fcn != NULL ? &fcn : NULL;",
          "",
          "[Added Lines]",
          "3091:  grd->fcn = fcn != NULL? &fcn: NULL;",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "2957:  }",
          "2959:  core->cons->event_data = grd;",
          "2961:  r_cons_break_push (NULL, NULL);",
          "2963:  while (!exit_graph && !is_error && !r_cons_is_breaked ()) {",
          "",
          "[Removed Lines]",
          "2960:  core->cons->event_resize = (RConsEvent)agraph_refresh;",
          "",
          "[Added Lines]",
          "3100:  core->cons->event_resize = (RConsEvent) agraph_refresh;",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "2986:    case 'k':",
          "2987:     switch (mousemode) {",
          "2988:     case 0: break;",
          "2992:     }",
          "2993:     break;",
          "2994:    }",
          "",
          "[Removed Lines]",
          "2989:     case 1: key = key=='k'?'h':'l'; break;",
          "2990:     case 2: key = key=='k'?'J':'K'; break;",
          "2991:     case 3: key = key=='k'?'L':'H'; break;",
          "",
          "[Added Lines]",
          "3129:     case 1: key = key == 'k'? 'h': 'l'; break;",
          "3130:     case 2: key = key == 'k'? 'J': 'K'; break;",
          "3131:     case 3: key = key == 'k'? 'L': 'H'; break;",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "3008:    agraph_update_seek (g, get_anode (g->curnode), true);",
          "3009:    break;",
          "3010:   case '|':",
          "3021:   case '>':",
          "3022:    r_core_cmd0 (core, \"ag-;.agc* $$;aggi\");",
          "3023:    break;",
          "",
          "[Removed Lines]",
          "3011:    { // TODO: edit",
          "3012:     const char *buf = NULL;",
          "3013:     const char *cmd = r_config_get (core->config, \"cmd.gprompt\");",
          "3014:     r_line_set_prompt (\"cmd.gprompt> \");",
          "3015:     core->cons->line->contents = strdup (cmd);",
          "3016:     buf = r_line_readline ();",
          "3017:     core->cons->line->contents = NULL;",
          "3018:     r_config_set (core->config, \"cmd.gprompt\", buf);",
          "3019:    }",
          "3020:    break;",
          "",
          "[Added Lines]",
          "3151:   {         // TODO: edit",
          "3152:    const char *buf = NULL;",
          "3153:    const char *cmd = r_config_get (core->config, \"cmd.gprompt\");",
          "3154:    r_line_set_prompt (\"cmd.gprompt> \");",
          "3155:    core->cons->line->contents = strdup (cmd);",
          "3156:    buf = r_line_readline ();",
          "3157:    core->cons->line->contents = NULL;",
          "3158:    r_config_set (core->config, \"cmd.gprompt\", buf);",
          "3159:   }",
          "3160:   break;",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "3063:   case 'x':",
          "3064:   case 'X':",
          "3065:   {",
          "3068:    ut64 old_off = core->offset;",
          "3069:    ut64 off = r_core_anal_get_bbaddr (core, core->offset);",
          "3070:    r_core_seek (core, off, 0);",
          "3071:    if ((key == 'x' && !r_core_visual_xrefs_x (core)) ||",
          "3073:     r_core_seek (core, old_off, 0);",
          "3074:    }",
          "3075:    break;",
          "",
          "[Removed Lines]",
          "3066:    if (!fcn) break;",
          "3072:     (key == 'X' && !r_core_visual_xrefs_X (core))) {",
          "",
          "[Added Lines]",
          "3206:    if (!fcn) {",
          "3207:     break;",
          "3208:    }",
          "3214:    (key == 'X' && !r_core_visual_xrefs_X (core))) {",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "3080:   case '?':",
          "3081:    r_cons_clear00 ();",
          "3082:    r_cons_printf (\"Visual Ascii Art graph keybindings:\\n\"",
          "3119:    r_cons_flush ();",
          "3120:    r_cons_any_key (NULL);",
          "3121:    break;",
          "",
          "[Removed Lines]",
          "3083:      \" +/-/0        - zoom in/out/default\\n\"",
          "3084:      \" ;            - add comment in current basic block\\n\"",
          "3085:      \" .            - center graph to the current node\\n\"",
          "3086:      \" :cmd         - run radare command\\n\"",
          "3087:      \" '            - toggle graph.comments\\n\"",
          "3088:      \" \\\"            - toggle graph.refs\\n\"",
          "3089:      \" /            - highlight text\\n\"",
          "3090:      \" |            - set cmd.gprompt\\n\"",
          "3091:      \" >            - show function callgraph (see graph.refs)\\n\"",
          "3092:      \" <            - show program callgraph (see graph.refs)\\n\"",
          "3093:      \" Home/End     - go to the top/bottom of the canvas\\n\"",
          "3094:      \" Page-UP/DOWN - scroll canvas up/down\\n\"",
          "3095:      \" C            - toggle scr.colors\\n\"",
          "3096:      \" d            - rename function\\n\"",
          "3097:      \" hjkl         - scroll canvas\\n\"",
          "3098:      \" HJKL         - move node\\n\"",
          "3099:      \" m/M          - change mouse modes\\n\"",
          "3100:      \" y            - toggle node folding/minification\\n\"",
          "3101:      \" n/N          - next/previous scr.nkey (function/flag..)\\n\"",
          "3102:      \" tab          - select next node\\n\"",
          "3103:      \" TAB          - select previous node\\n\"",
          "3104:      \" t/f          - follow true/false edges\\n\"",
          "3105:      \" g([A-Za-z]*) - follow jmp/call identified by shortcut\\n\"",
          "3106:      \" G            - debug trace callgraph (generated with dtc)\\n\"",
          "3107:      \" F            - enter flag selector\\n\"",
          "3108:      \" _            - enter hud selector\\n\"",
          "3109:      \" o            - go/seek to given offset\\n\"",
          "3110:      \" r            - refresh graph\\n\"",
          "3111:      \" R            - randomize colors\\n\"",
          "3112:      \" u/U          - undo/redo seek\\n\"",
          "3113:      \" p/P          - rotate graph modes (normal, display offsets, minigraph, summary)\\n\"",
          "3114:      \" s/S          - step / step over\\n\"",
          "3115:      \" V            - toggle basicblock / call graphs\\n\"",
          "3116:      \" w            - toggle between movements speed 1 and graph.scroll\\n\"",
          "3117:      \" x/X          - jump to xref/ref\\n\"",
          "3118:      \" Z            - follow parent node\");",
          "",
          "[Added Lines]",
          "3225:     \" +/-/0        - zoom in/out/default\\n\"",
          "3226:     \" ;            - add comment in current basic block\\n\"",
          "3227:     \" .            - center graph to the current node\\n\"",
          "3228:     \" :cmd         - run radare command\\n\"",
          "3229:     \" '            - toggle graph.comments\\n\"",
          "3230:     \" \\\"            - toggle graph.refs\\n\"",
          "3231:     \" /            - highlight text\\n\"",
          "3232:     \" |            - set cmd.gprompt\\n\"",
          "3233:     \" >            - show function callgraph (see graph.refs)\\n\"",
          "3234:     \" <            - show program callgraph (see graph.refs)\\n\"",
          "3235:     \" Home/End     - go to the top/bottom of the canvas\\n\"",
          "3236:     \" Page-UP/DOWN - scroll canvas up/down\\n\"",
          "3237:     \" C            - toggle scr.colors\\n\"",
          "3238:     \" d            - rename function\\n\"",
          "3239:     \" hjkl         - scroll canvas\\n\"",
          "3240:     \" HJKL         - move node\\n\"",
          "3241:     \" m/M          - change mouse modes\\n\"",
          "3242:     \" y            - toggle node folding/minification\\n\"",
          "3243:     \" n/N          - next/previous scr.nkey (function/flag..)\\n\"",
          "3244:     \" tab          - select next node\\n\"",
          "3245:     \" TAB          - select previous node\\n\"",
          "3246:     \" t/f          - follow true/false edges\\n\"",
          "3247:     \" g([A-Za-z]*) - follow jmp/call identified by shortcut\\n\"",
          "3248:     \" G            - debug trace callgraph (generated with dtc)\\n\"",
          "3249:     \" F            - enter flag selector\\n\"",
          "3250:     \" _            - enter hud selector\\n\"",
          "3251:     \" o            - go/seek to given offset\\n\"",
          "3252:     \" r            - refresh graph\\n\"",
          "3253:     \" R            - randomize colors\\n\"",
          "3254:     \" u/U          - undo/redo seek\\n\"",
          "3255:     \" p/P          - rotate graph modes (normal, display offsets, minigraph, summary)\\n\"",
          "3256:     \" s/S          - step / step over\\n\"",
          "3257:     \" V            - toggle basicblock / call graphs\\n\"",
          "3258:     \" w            - toggle between movements speed 1 and graph.scroll\\n\"",
          "3259:     \" x/X          - jump to xref/ref\\n\"",
          "3260:     \" Z            - follow parent node\");",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "3123:    r_config_toggle (core->config, \"graph.refs\");",
          "3124:    break;",
          "3125:   case 'p':",
          "3127:    g->mode = next_mode (g->mode);",
          "3128:    g->need_reload_nodes = true;",
          "3129:    break;",
          "3130:   case 'P':",
          "3132:    g->mode = prev_mode (g->mode);",
          "3133:    g->need_reload_nodes = true;",
          "3134:    break;",
          "",
          "[Removed Lines]",
          "3126:    if (!fcn) break;",
          "3131:    if (!fcn) break;",
          "",
          "[Added Lines]",
          "3268:    if (!fcn) {",
          "3269:     break;",
          "3270:    }",
          "3275:    if (!fcn) {",
          "3276:     break;",
          "3277:    }",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "3140:    break;",
          "3141:   case 'u':",
          "3142:   {",
          "3144:    RIOUndos *undo = r_io_sundo (core->io, core->offset);",
          "3145:    if (undo) {",
          "3146:     r_core_seek (core, undo->off, 0);",
          "",
          "[Removed Lines]",
          "3143:    if (!fcn) break;",
          "",
          "[Added Lines]",
          "3289:    if (!fcn) {",
          "3290:     break;",
          "3291:    }",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "3151:   }",
          "3152:   case 'U':",
          "3153:   {",
          "3155:    RIOUndos *undo = r_io_sundo_redo (core->io);",
          "3156:    if (undo) {",
          "3157:     r_core_seek (core, undo->off, 0);",
          "",
          "[Removed Lines]",
          "3154:    if (!fcn) break;",
          "",
          "[Added Lines]",
          "3302:    if (!fcn) {",
          "3303:     break;",
          "3304:    }",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "3167:    }",
          "3168:    break;",
          "3169:   case 'R':",
          "3171:    if (r_config_get_i (core->config, \"scr.randpal\")) {",
          "3172:     r_core_cmd0 (core, \"ecr\");",
          "3173:    } else {",
          "",
          "[Removed Lines]",
          "3170:    if (!fcn) break;",
          "",
          "[Added Lines]",
          "3320:    if (!fcn) {",
          "3321:     break;",
          "3322:    }",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "3215:    }",
          "3216:    break;",
          "3217:   case 'd':",
          "3226:     }",
          "3227:    }",
          "3229:   case 'n':",
          "3230:    r_core_seek_next (core, r_config_get (core->config, \"scr.nkey\"));",
          "3231:    break;",
          "",
          "[Removed Lines]",
          "3218:    {",
          "3219:     char *newname = r_cons_input (\"New function name:\");",
          "3220:     if (newname) {",
          "3221:      if (*newname) {",
          "3222:       r_core_cmdf (core, \"\\\"afn %s\\\"\", newname);",
          "3223:       get_bbupdate (g, core, fcn);",
          "3224:      }",
          "3225:      free (newname);",
          "3228:    break;",
          "",
          "[Added Lines]",
          "3370:   {",
          "3371:    char *newname = r_cons_input (\"New function name:\");",
          "3372:    if (newname) {",
          "3373:     if (*newname) {",
          "3374:      r_core_cmdf (core, \"\\\"afn %s\\\"\", newname);",
          "3375:      get_bbupdate (g, core, fcn);",
          "3377:     free (newname);",
          "3379:   }",
          "3380:   break;",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "3238:   case 'J':",
          "3239:    if (okey == 27) { // && r_cons_readchar () == 126) {",
          "3242:    } else {",
          "3243:     RANode *n = get_anode (g->curnode);",
          "3244:     if (n) {",
          "",
          "[Removed Lines]",
          "3241:     can->sy -= PAGEKEY_SPEED * (invscroll ? -1 : 1);",
          "",
          "[Added Lines]",
          "3393:     can->sy -= PAGEKEY_SPEED * (invscroll? -1: 1);",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "3249:   case 'K':",
          "3250:    if (okey == 27) { // && r_cons_readchar () == 126) {",
          "3253:    } else {",
          "3254:     RANode *n = get_anode (g->curnode);",
          "3255:     if (n) {",
          "",
          "[Removed Lines]",
          "3252:     can->sy += PAGEKEY_SPEED * (invscroll ? -1 : 1);",
          "",
          "[Added Lines]",
          "3404:     can->sy += PAGEKEY_SPEED * (invscroll? -1: 1);",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "3272:   case 'v':",
          "3273:    r_core_visual_anal (core);",
          "3274:    break;",
          "3287:   case '.':",
          "3288:    agraph_update_seek (g, get_anode (g->curnode), true);",
          "3289:    break;",
          "",
          "[Removed Lines]",
          "3275:   case 'L':",
          "3276:     {",
          "3277:     RANode *n = get_anode (g->curnode);",
          "3278:     if (n) {",
          "3279:      n->x += movspeed;",
          "3280:     }",
          "3281:     break;",
          "3282:     }",
          "3283:   case 'j': can->sy -= movspeed * (invscroll ? -1 : 1); break;",
          "3284:   case 'k': can->sy += movspeed * (invscroll ? -1 : 1); break;",
          "3285:   case 'l': can->sx -= movspeed * (invscroll ? -1 : 1); break;",
          "3286:   case 'h': can->sx += movspeed * (invscroll ? -1 : 1); break;",
          "",
          "[Added Lines]",
          "3427:   case 'L':",
          "3428:   {",
          "3429:    RANode *n = get_anode (g->curnode);",
          "3430:    if (n) {",
          "3431:     n->x += movspeed;",
          "3432:    }",
          "3433:    break;",
          "3434:   }",
          "3435:   case 'j': can->sy -= movspeed * (invscroll? -1: 1); break;",
          "3436:   case 'k': can->sy += movspeed * (invscroll? -1: 1); break;",
          "3437:   case 'l': can->sx -= movspeed * (invscroll? -1: 1); break;",
          "3438:   case 'h': can->sx += movspeed * (invscroll? -1: 1); break;",
          "",
          "---------------"
        ],
        "libr/core/yank.c||libr/core/yank.c": [
          "File: libr/core/yank.c -> libr/core/yank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  RIODesc *yankfd = NULL;",
          "43:  int res = false;",
          "45:  if (filename && *filename) {",
          "46:   ut64 load_align = r_config_get_i (core->config, \"file.loadalign\");",
          "48:   yankfd = r_io_open_nomap (core->io, filename, R_IO_READ, 0644);",
          "50:   if (yankfd && load_align) {",
          "51:    yank_file_sz = r_io_size (core->io);",
          "52:    map = r_io_map_add_next_available (core->io, yankfd->fd, R_IO_READ, 0, 0, yank_file_sz, load_align);",
          "54:    if (yankfd && map && loadaddr != -1) {",
          "",
          "[Removed Lines]",
          "41:  ut64 fd = core->file ? core->file->desc->fd : -1, yank_file_sz = 0,",
          "42:    loadaddr = 0, addr = offset;",
          "47:   RIOMap * map = NULL;",
          "53:    loadaddr = map ? map->from : -1;",
          "",
          "[Added Lines]",
          "41:  ut64 fd = core->file? core->file->desc->fd: -1, yank_file_sz = 0,",
          "42:  loadaddr = 0, addr = offset;",
          "47:   RIOMap *map = NULL;",
          "53:    loadaddr = map? map->from: -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:  if (yankfd) {",
          "76:   ut64 res = r_io_seek (core->io, addr, R_IO_SEEK_SET);",
          "78:   ut8 *buf = NULL;",
          "79:   if (actual_len > 0 && res == addr) {",
          "80:    buf = malloc (actual_len);",
          "",
          "[Removed Lines]",
          "77:   ut64 actual_len = len <= yank_file_sz ? len : 0;",
          "",
          "[Added Lines]",
          "77:   ut64 actual_len = len <= yank_file_sz? len: 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   } else if (actual_len == 0) {",
          "92:    eprintf (",
          "93:     \"ERROR: Unable to yank from file: addr+len (0x%\"",
          "95:     yank_file_sz );",
          "96:   }",
          "97:   r_io_close (core->io, yankfd);",
          "",
          "[Removed Lines]",
          "94:     PFMT64x \") > file_sz (0x%\"PFMT64x \")\\n\", addr+len,",
          "",
          "[Added Lines]",
          "94:     PFMT64x \") > file_sz (0x%\"PFMT64x \")\\n\", addr + len,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119: R_API int r_core_yank_set_str(RCore *core, ut64 addr, const char *str, ut32 len) {",
          "122:  if (res == true) {",
          "124:  }",
          "125:  return res;",
          "126: }",
          "",
          "[Removed Lines]",
          "121:  int res = r_core_yank_set (core, addr, (ut8*)str, len);",
          "123:   core->yank_buf->buf[len-1] = 0;",
          "",
          "[Added Lines]",
          "121:  int res = r_core_yank_set (core, addr, (ut8 *) str, len);",
          "123:   core->yank_buf->buf[len - 1] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171:  r_core_read_at (core, addr, buf, core->blocksize);",
          "172:  if (maxlen == 0) {",
          "175:  } else if (maxlen > core->blocksize) {",
          "176:   maxlen = core->blocksize;",
          "177:  }",
          "",
          "[Removed Lines]",
          "174:   maxlen = r_str_nlen ((const char*)buf, core->blocksize);",
          "",
          "[Added Lines]",
          "174:   maxlen = r_str_nlen ((const char *) buf, core->blocksize);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "200:  char *str, *arg;",
          "201:  int res = false;",
          "204:   _arg++;",
          "205:  }",
          "206:  arg = strdup (_arg);",
          "",
          "[Removed Lines]",
          "203:  while (*_arg==' ') {",
          "",
          "[Added Lines]",
          "203:  while (*_arg == ' ') {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "208:  if (str) {",
          "209:   str[0] = '\\0';",
          "210:   len = r_num_math (core->num, arg);",
          "212:   str[0] = ' ';",
          "213:  }",
          "214:  if (len < 1) {",
          "",
          "[Removed Lines]",
          "211:   pos = r_num_math (core->num, str+1);",
          "",
          "[Added Lines]",
          "211:   pos = r_num_math (core->num, str + 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "231:  int res = false, i = 0;",
          "232:  int ybl = core->yank_buf->length;",
          "233:  if (ybl > 0) {",
          "235:    r_cons_printf (\"0x%08\"PFMT64x \" %d \",",
          "238:    for (i = pos; i < core->yank_buf->length; i++) {",
          "239:     r_cons_printf (\"%02x\",",
          "240:      core->yank_buf->buf[i]);",
          "",
          "[Removed Lines]",
          "234:   if (pos<ybl) {",
          "236:     core->yank_buf->base+pos,",
          "237:     core->yank_buf->length-pos);",
          "",
          "[Added Lines]",
          "234:   if (pos < ybl) {",
          "236:     core->yank_buf->base + pos,",
          "237:     core->yank_buf->length - pos);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "272:  int ybl = core->yank_buf->length;",
          "273:  if (ybl > 0) {",
          "274:   if (pos < ybl) {",
          "276:     core->yank_buf->length - pos);",
          "277:    r_cons_newline ();",
          "278:    return true;",
          "",
          "[Removed Lines]",
          "275:    r_cons_memcat ((const char*)core->yank_buf->buf + pos,",
          "",
          "[Added Lines]",
          "275:    r_cons_memcat ((const char *) core->yank_buf->buf + pos,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "288:  int ybl = core->yank_buf->length;",
          "289:  if (ybl > 0) {",
          "290:   if (pos < ybl) {",
          "293:    r_cons_newline ();",
          "294:    return true;",
          "295:   }",
          "",
          "[Removed Lines]",
          "291:    int len = r_str_nlen ((const char *)core->yank_buf->buf + pos, ybl - pos);",
          "292:    r_cons_memcat ((const char*)core->yank_buf->buf + pos, len);",
          "",
          "[Added Lines]",
          "291:    int len = r_str_nlen ((const char *) core->yank_buf->buf + pos, ybl - pos);",
          "292:    r_cons_memcat ((const char *) core->yank_buf->buf + pos, len);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "312:  }",
          "313:  buf = r_cons_hud_file (input);",
          "315:  res = r_core_yank_set_str (core, R_CORE_FOREIGN_ADDR, buf, len);",
          "316:  free (buf);",
          "317:  return res;",
          "",
          "[Removed Lines]",
          "314:  len = buf ? strlen ((const char*)buf) + 1 : 0;",
          "",
          "[Added Lines]",
          "314:  len = buf? strlen ((const char *) buf) + 1: 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "321:  char *buf = NULL;",
          "322:  ut32 len = 0;",
          "323:  int res;",
          "326:  }",
          "327:  buf = r_cons_hud_path (input, dir);",
          "329:  res = r_core_yank_set_str (core, R_CORE_FOREIGN_ADDR, buf, len);",
          "330:  free (buf);",
          "331:  return res;",
          "",
          "[Removed Lines]",
          "324:  for (input++; *input==' '; input++) {",
          "328:  len = buf ? strlen ((const char*)buf) + 1 : 0;",
          "",
          "[Added Lines]",
          "324:  for (input++; *input == ' '; input++) {",
          "328:  len = buf? strlen ((const char *) buf) + 1: 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "340:  }",
          "342:  adv = consume_chars (input, ' ');",
          "344:  if (len == 0) {",
          "345:   eprintf (\"ERROR: Number of bytes read must be > 0\\n\");",
          "346:   return res;",
          "347:  }",
          "350:  if (adv == 0) {",
          "351:   eprintf (\"ERROR: Address must be specified\\n\");",
          "352:   return res;",
          "",
          "[Removed Lines]",
          "343:  len = r_num_math (core->num, input+adv);",
          "349:  adv += find_next_char (input+adv, ' ');",
          "",
          "[Added Lines]",
          "343:  len = r_num_math (core->num, input + adv);",
          "349:  adv += find_next_char (input + adv, ' ');",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "354:  adv++;",
          "360:  if (adv == 0) {",
          "361:   eprintf (\"ERROR: File must be specified\\n\");",
          "362:   return res;",
          "",
          "[Removed Lines]",
          "357:  addr = r_num_math (core->num, input+adv);",
          "359:  adv += find_next_char (input+adv, ' ');",
          "",
          "[Added Lines]",
          "357:  addr = r_num_math (core->num, input + adv);",
          "359:  adv += find_next_char (input + adv, ' ');",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "369: }",
          "371: R_API int r_core_yank_file_all(RCore *core, const char *input) {",
          "",
          "[Removed Lines]",
          "368:  return perform_mapped_file_yank (core, addr, len, input+adv);",
          "",
          "[Added Lines]",
          "368:  return perform_mapped_file_yank (core, addr, len, input + adv);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "374:   return false;",
          "375:  }",
          "376:  adv = consume_chars (input, ' ');",
          "378: }",
          "",
          "[Removed Lines]",
          "377:  return perform_mapped_file_yank (core, 0, -1, input+adv);",
          "",
          "[Added Lines]",
          "377:  return perform_mapped_file_yank (core, 0, -1, input + adv);",
          "",
          "---------------"
        ],
        "sys/indent.sh||sys/indent.sh": [
          "File: sys/indent.sh -> sys/indent.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/sh",
          "3: IFILE=\"$1\"",
          "4: P=`readlink $0`",
          "5: cd `dirname $P`/..",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: # known bugs",
          "4: # ----------",
          "5: # - labels are indented",
          "6: # - #if 0 code is indented",
          "7: # - //comment should be // comment",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "234a3ca5fc2d9de9dc3ad314123833af519d36dd",
      "candidate_info": {
        "commit_hash": "234a3ca5fc2d9de9dc3ad314123833af519d36dd",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/234a3ca5fc2d9de9dc3ad314123833af519d36dd",
        "files": [
          "libr/cons/cons.c",
          "libr/core/cmd.c",
          "libr/core/cmd_help.c"
        ],
        "message": "clean up the code coding style mainly",
        "before_after_code_files": [
          "libr/cons/cons.c||libr/cons/cons.c",
          "libr/core/cmd.c||libr/core/cmd.c",
          "libr/core/cmd_help.c||libr/core/cmd_help.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd.c||libr/core/cmd.c"
          ],
          "candidate": [
            "libr/core/cmd.c||libr/core/cmd.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/cons/cons.c||libr/cons/cons.c": [
          "File: libr/cons/cons.c -> libr/cons/cons.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "578: #if COUNT_LINES",
          "579:    int i, lines = 0;",
          "580:    for (i = 0; I.buffer[i]; i++) {",
          "582:      lines ++;",
          "583:     }",
          "584:    }",
          "",
          "[Removed Lines]",
          "581:     if (I.buffer[i]=='\\n') {",
          "",
          "[Added Lines]",
          "581:     if (I.buffer[i] == '\\n') {",
          "",
          "---------------"
        ],
        "libr/core/cmd.c||libr/core/cmd.c": [
          "File: libr/core/cmd.c -> libr/core/cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   return;",
          "59:  }",
          "60:  char *msg = r_core_cmd_str (core, cmd);",
          "62:   return;",
          "63:  line = msg;",
          "64:  r_cons_print (msg);",
          "65:  (void) r_str_ansi_filter (msg, NULL, NULL, strlen (msg));",
          "",
          "[Removed Lines]",
          "61:  if (NULL == msg)",
          "",
          "[Added Lines]",
          "61:  if (!msg) {",
          "63:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1039:     RCoreTask *task = r_core_task_get (core, tid);",
          "1040:     if (task) {",
          "1041:      r_core_task_join (core, task);",
          "1043:    } else {",
          "1044:     RCoreTask *task = r_core_task_add (core, r_core_task_new (",
          "1045:        core, input+1, (RCoreTaskCallback)task_finished, core));",
          "",
          "[Removed Lines]",
          "1042:     } else eprintf (\"Cannot find task\\n\");",
          "",
          "[Added Lines]",
          "1042:     } else {",
          "1043:      eprintf (\"Cannot find task\\n\");",
          "1044:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1404:    while (IS_WHITESPACE (p[1])) p++;",
          "1405:    if (p[1]=='@' || (p[1] && p[2]=='@')) {",
          "1406:     char *q = strchr (p+1, '\"');",
          "1408:     oseek = core->offset;",
          "1411:     if (q) {",
          "1413:      p = q;",
          "1415:    }",
          "1416:    if (p && *p && p[1] == '>') {",
          "1417:     str = p + 2;",
          "",
          "[Removed Lines]",
          "1407:     if (q) *q = 0;",
          "1409:     r_core_seek (core, r_num_math (",
          "1410:      core->num, p+2), 1);",
          "1414:     } else p = NULL;",
          "",
          "[Added Lines]",
          "1409:     if (q) {",
          "1411:     }",
          "1413:     r_core_seek (core,",
          "1414:           r_num_math (core->num, p + 2), 1);",
          "1418:     } else {",
          "1419:      p = NULL;",
          "1420:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1428:    line = r_str_replace (line, \"\\\\\\\"\", \"\\\"\", true);",
          "1429:    if (p && p[1]=='|') {",
          "1430:     str = p+2;",
          "1432:     r_core_cmd_pipe (core, cmd, str);",
          "1433:    } else {",
          "1434:     r_cmd_call (core->rcmd, line);",
          "",
          "[Removed Lines]",
          "1431:     while (IS_WHITESPACE (*str)) str++;",
          "",
          "[Added Lines]",
          "1437:     while (IS_WHITESPACE (*str)) {",
          "1438:      str++;",
          "1439:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1473:    if (r_core_cmd_subst (core, cmd) == -1) {",
          "1474:     return -1;",
          "1475:    }",
          "1477:    ret = r_core_cmd_subst (core, cmd);",
          "1479:    return ret;",
          "",
          "[Removed Lines]",
          "1476:    cmd = ptr+1;",
          "",
          "[Added Lines]",
          "1484:    cmd = ptr + 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1493:     cmd = r_str_clean (cmd);",
          "1494:     int value = core->num->value;",
          "1497:     core->num->value = value;",
          "1498:     return 0;",
          "1499:    }",
          "",
          "[Removed Lines]",
          "1495:     if (*cmd) r_core_cmd_pipe (core, cmd, ptr+1);",
          "1496:     else r_io_system (core->io, ptr+1);",
          "",
          "[Added Lines]",
          "1503:     if (*cmd) {",
          "1504:      r_core_cmd_pipe (core, cmd, ptr + 1);",
          "1505:     } else {",
          "1506:      r_io_system (core->io, ptr + 1);",
          "1507:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1511:    eprintf (\"command error(%s)\\n\", cmd);",
          "1512:    return ret;",
          "1513:   }",
          "1515:   ptr = strchr (cmd, '&');",
          "1516:  }",
          "",
          "[Removed Lines]",
          "1514:   for (cmd=ptr+2; cmd && *cmd==' '; cmd++);",
          "",
          "[Added Lines]",
          "1525:   for (cmd = ptr + 2; cmd && *cmd==' '; cmd++);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1543:     eprintf (\"==> Reading from stdin until '%s'\\n\", str);",
          "1544:     free (core->oobi);",
          "1545:     core->oobi = malloc (1);",
          "1547:      core->oobi[0] = '\\0';",
          "1548:     core->oobi_len = 0;",
          "1549:     for (;;) {",
          "1550:      char buf[1024];",
          "1551:      int ret;",
          "1552:      write (1, \"> \", 2);",
          "1555:       break;",
          "1556:      if (*buf) buf[strlen (buf)-1]='\\0';",
          "1557:      ret = strlen (buf);",
          "1558:      core->oobi_len += ret;",
          "1559:      core->oobi = realloc (core->oobi, core->oobi_len+1);",
          "1560:      if (core->oobi) {",
          "1562:        break;",
          "1563:       strcat ((char *)core->oobi, buf);",
          "1564:      }",
          "1565:     }",
          "1567:    } else {",
          "1570:     eprintf (\"Slurping file '%s'\\n\", str);",
          "1571:     free (core->oobi);",
          "1572:     core->oobi = (ut8*)r_file_slurp (str, &core->oobi_len);",
          "1574:      eprintf (\"cannot open file\\n\");",
          "1576:      return r_core_cmd_buffer (core, (const char *)core->oobi);",
          "1577:    }",
          "1578:   } else {",
          "1579:    eprintf (\"Cannot slurp with << in non-interactive mode\\n\");",
          "",
          "[Removed Lines]",
          "1542:     for (str=ptr+2; str[0]==' '; str++);",
          "1546:     if (core->oobi)",
          "1553:      fgets (buf, sizeof (buf)-1, stdin); // XXX use r_line ??",
          "1554:      if (feof (stdin))",
          "1561:       if (!strcmp (buf, str))",
          "1568:     for (str=ptr+1; *str== ' '; str++);",
          "1569:     if (!*str) goto next;",
          "1573:     if (!core->oobi)",
          "1575:     else if (ptr == cmd)",
          "",
          "[Added Lines]",
          "1553:     for (str = ptr + 2; str[0] == ' '; str++) {",
          "1555:     }",
          "1559:     if (core->oobi) {",
          "1561:     }",
          "1567:      fgets (buf, sizeof (buf) - 1, stdin); // XXX use r_line ??",
          "1568:      if (feof (stdin)) {",
          "1570:      }",
          "1576:       if (!strcmp (buf, str)) {",
          "1578:       }",
          "1584:     for (str = ptr + 1; *str == ' '; str++) {",
          "1586:     }",
          "1587:     if (!*str) {",
          "1588:      goto next;",
          "1589:     }",
          "1593:     if (!core->oobi) {",
          "1595:     } else if (ptr == cmd) {",
          "1597:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1654:  if (ptr) {",
          "1655:   int empty = 0;",
          "1656:   int oneline = 1;",
          "1658:    memmove (ptr, ptr + 1, strlen (ptr));",
          "1659:    oneline = 0;",
          "1660:    empty = 1;",
          "1661:   }",
          "1663:   if (empty) {",
          "1665:   } else if (!ptr2) {",
          "",
          "[Removed Lines]",
          "1657:   if (ptr[1]=='`') {",
          "1662:   ptr2 = strchr (ptr+1, '`');",
          "",
          "[Added Lines]",
          "1678:   if (ptr[1] == '`') {",
          "1683:   ptr2 = strchr (ptr + 1, '`');",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1725:  if (*cmd!='(' && *cmd!='\"') {",
          "1726:   ptr = strchr (cmd, '@');",
          "1728:    ptr = NULL;",
          "1729:   }",
          "1730:  } else {",
          "",
          "[Removed Lines]",
          "1727:   if (ptr == cmd + 1 && *cmd=='?') {",
          "",
          "[Added Lines]",
          "1748:   if (ptr == cmd + 1 && *cmd == '?') {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1734:  core->tmpseek = ptr? true: false;",
          "1735:  if (ptr) {",
          "1737:   ut64 addr = UT64_MAX;",
          "1738:   const char *tmpbits = NULL;",
          "1739:   const char *offstr = NULL;",
          "",
          "[Removed Lines]",
          "1736:   char *f, *ptr2 = strchr (ptr+1, '!');",
          "",
          "[Added Lines]",
          "1757:   char *f, *ptr2 = strchr (ptr + 1, '!');",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1746:   ut8 *buf;",
          "1750:   if (*ptr && ptr[1]==':') {",
          "1752:   } else {",
          "1753:    ptr--;",
          "1754:   }",
          "1756:   if (ptr[0] && ptr[1] && ptr[2]) {",
          "1757:    arroba = strchr (ptr + 2, '@');",
          "1758:   } else {",
          "",
          "[Removed Lines]",
          "1749:   for (ptr++; *ptr== ' '; ptr++);",
          "",
          "[Added Lines]",
          "1770:   for (ptr++; *ptr== ' '; ptr++) {",
          "1772:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1766:    usemyblock = 1;",
          "1767:    switch (ptr[0]) {",
          "1768:    case 'f': // \"@f:\" // slurp file in block",
          "1770:     if (f) {",
          "1771:      buf = malloc (sz);",
          "1772:      if (buf) {",
          "",
          "[Removed Lines]",
          "1769:     f = r_file_slurp (ptr+2, &sz);",
          "",
          "[Added Lines]",
          "1791:     f = r_file_slurp (ptr + 2, &sz);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1774:       core->block = buf;",
          "1775:       core->blocksize = sz;",
          "1776:       memcpy (core->block, f, sz);",
          "1778:      free (f);",
          "1780:     break;",
          "1781:    case 'r': // \"@r:\" // regname",
          "1782:     if (ptr[1]==':') {",
          "",
          "[Removed Lines]",
          "1777:      } else eprintf (\"cannot alloc %d\", sz);",
          "1779:     } else eprintf (\"cannot open '%s'\\n\", ptr+3);",
          "",
          "[Added Lines]",
          "1799:      } else {",
          "1800:       eprintf (\"cannot alloc %d\", sz);",
          "1801:      }",
          "1803:     } else {",
          "1804:      eprintf (\"cannot open '%s'\\n\", ptr+3);",
          "1805:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1789:    case 'b': // \"@b:\" // bits",
          "1790:     tmpbits = strdup (r_config_get (core->config, \"asm.bits\"));",
          "1791:     r_config_set_i (core->config, \"asm.bits\",",
          "1793:     break;",
          "1794:    case 'i': // \"@i:\"",
          "1795:     {",
          "",
          "[Removed Lines]",
          "1792:      r_num_math (core->num, ptr+2));",
          "",
          "[Added Lines]",
          "1818:      r_num_math (core->num, ptr + 2));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1798:       r_core_cmdf (core, \"so %s\", ptr + 2);",
          "1799:      }",
          "1800:     }",
          "1802:     break;",
          "1803:    case 'e': // \"@e:\"",
          "1804:     tmpeval = parse_tmp_evals (core, ptr+2);",
          "1805:     break;",
          "1806:    case 'x': // \"@x:\" // hexpairs",
          "1808:      buf = malloc (strlen (ptr+2)+1);",
          "1809:      if (buf) {",
          "1810:       len = r_hex_str2bin (ptr+2, buf);",
          "",
          "[Removed Lines]",
          "1807:     if (ptr[1]==':') {",
          "",
          "[Added Lines]",
          "1832:     if (ptr[1] == ':') {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1812:       memcpy (core->block, buf, core->blocksize);",
          "1813:       core->fixedblock = true;",
          "1814:       free (buf);",
          "1817:     break;",
          "1818:    case 'k': // \"@k\"",
          "1819:      {",
          "",
          "[Removed Lines]",
          "1815:      } else eprintf (\"cannot allocate\\n\");",
          "1816:     } else eprintf (\"Invalid @x: syntax\\n\");",
          "",
          "[Added Lines]",
          "1840:      } else {",
          "1841:       eprintf (\"cannot allocate\\n\");",
          "1842:      }",
          "1843:     } else {",
          "1844:      eprintf (\"Invalid @x: syntax\\n\");",
          "1845:     }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1825:      }",
          "1826:     break;",
          "1827:    case 'o': // \"@o:3\"",
          "1829:      tmpfd = core->io->raised;",
          "1830:      r_io_raise (core->io, atoi (ptr + 2));",
          "1831:     }",
          "1832:     break;",
          "1833:    case 'a': // \"@a:\"",
          "1836:      tmpasm = strdup (r_config_get (core->config, \"asm.arch\"));",
          "1837:      if (q) {",
          "",
          "[Removed Lines]",
          "1828:     if (ptr[1] ==':') {",
          "1834:     if (ptr[1]==':') {",
          "1835:      char *q = strchr (ptr+2, ':');",
          "",
          "[Added Lines]",
          "1857:     if (ptr[1] == ':') {",
          "1863:     if (ptr[1] == ':') {",
          "1864:      char *q = strchr (ptr + 2, ':');",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1846:     }",
          "1847:     break;",
          "1848:    case 's': // \"@s:\"",
          "1850:     r_core_block_size (core, len);",
          "1852:     break;",
          "1853:    default:",
          "1854:     goto ignore;",
          "",
          "[Removed Lines]",
          "1849:     len = strlen (ptr+2);",
          "1851:     memcpy (core->block, ptr+2, len);",
          "",
          "[Added Lines]",
          "1878:     len = strlen (ptr + 2);",
          "1880:     memcpy (core->block, ptr + 2, len);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1863:   cmd = r_str_clean (cmd);",
          "1864:   if (ptr2) {",
          "1871:    } else {",
          "1873:     if (!ptr2[1]) {",
          "1874:      goto fail;",
          "1875:     }",
          "1877:    }",
          "1878:   }",
          "1880:   offstr = r_str_trim_head (ptr+1);",
          "1882:   addr = r_num_math (core->num, offstr);",
          "1886:     goto fail;",
          "1889:    char ch = *offstr;",
          "1891:     addr = core->offset + addr;",
          "1892:    }",
          "1893:   }",
          "",
          "[Removed Lines]",
          "1865:    if (strlen (ptr+1)==13 && strlen (ptr2+1)==6 && \\",
          "1866:     !memcmp (ptr+1,\"0x\", 2) && !memcmp (ptr2+1, \"0x\", 2)) {",
          "1868:    } else",
          "1869:    if (strlen (ptr+1)==9 && strlen (ptr2+1)==4) {",
          "1876:     r_core_block_size (core, r_num_math (core->num, ptr2+1));",
          "1883:                 if (isalpha ((unsigned char)ptr[1]) && addr== 0) {",
          "1884:                         if (!r_flag_get (core->flags, ptr+1)) {",
          "1885:                                 eprintf (\"Invalid address (%s)\\n\", ptr + 1);",
          "1887:                         }",
          "1888:                 } else {",
          "1890:    if (ch=='-' || ch=='+') {",
          "",
          "[Added Lines]",
          "1894:    if (strlen (ptr + 1) == 13 && strlen (ptr2 + 1) == 6 &&",
          "1895:        !memcmp (ptr + 1, \"0x\", 2) &&",
          "1896:        !memcmp (ptr2 + 1, \"0x\", 2)) {",
          "1898:    } else if (strlen (ptr + 1) == 9 && strlen (ptr2 + 1) == 4) {",
          "1905:     r_core_block_size (",
          "1906:      core, r_num_math (core->num, ptr2 + 1));",
          "1913:   if (isalpha ((unsigned char)ptr[1]) && !addr) {",
          "1914:    if (!r_flag_get (core->flags, ptr+1)) {",
          "1915:     eprintf (\"Invalid address (%s)\\n\", ptr + 1);",
          "1917:    }",
          "1918:   } else {",
          "1920:    if (ch == '-' || ch == '+') {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1897:    arroba = NULL;",
          "1898:    goto repeat_arroba;",
          "1899:   }",
          "1902:    if (ptr[2] == '@') {",
          "1903:     char *rule = ptr + 3;",
          "",
          "[Removed Lines]",
          "1900:   if (ptr[1]=='@') {",
          "",
          "[Added Lines]",
          "1930:   if (ptr[1] == '@') {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2602:     break;",
          "2603:    }",
          "2604:    r_cons_flush ();",
          "2606:     if (data[1] == '!') {",
          "2607:      ret = -1;",
          "2608:     } else {",
          "",
          "[Removed Lines]",
          "2605:    if (data[0]=='q') {",
          "",
          "[Added Lines]",
          "2631:    if (data[0] == 'q') {",
          "",
          "---------------"
        ],
        "libr/core/cmd_help.c||libr/core/cmd_help.c": [
          "File: libr/core/cmd_help.c -> libr/core/cmd_help.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:   }",
          "571:   break;",
          "572:  case 'E': // clippy echo",
          "574:   break;",
          "575:  case 'e': // echo",
          "576:   {",
          "",
          "[Removed Lines]",
          "573:   clippy (r_str_chop_ro (input+1));",
          "",
          "[Added Lines]",
          "573:   clippy (r_str_chop_ro (input + 1));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2df1e547ae889349c8e2530dc13de4fa626f176a",
      "candidate_info": {
        "commit_hash": "2df1e547ae889349c8e2530dc13de4fa626f176a",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/2df1e547ae889349c8e2530dc13de4fa626f176a",
        "files": [
          "libr/core/cmd.c"
        ],
        "message": "Fix #6677 - Quoted multicommands issue",
        "before_after_code_files": [
          "libr/core/cmd.c||libr/core/cmd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd.c||libr/core/cmd.c"
          ],
          "candidate": [
            "libr/core/cmd.c||libr/core/cmd.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/core/cmd.c||libr/core/cmd.c": [
          "File: libr/core/cmd.c -> libr/core/cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:  int i, ret = 0, pipefd;",
          "1400:  bool usemyblock = false;",
          "1401:  int scr_html = -1;",
          "1403:  if (!cmd) {",
          "1404:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1402:  bool eos = false;",
          "1403:  bool haveQuote = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1413:   }",
          "1414:   break;",
          "1415:  case '\"':",
          "1417:    int pipefd = -1;",
          "1418:    ut64 oseek = UT64_MAX;",
          "1431:     }",
          "1440:     }",
          "1441:    }",
          "1446:     }",
          "1449:     }",
          "1452:    }",
          "1453:    line = strdup (cmd);",
          "1454:    line = r_str_replace (line, \"\\\\\\\"\", \"\\\"\", true);",
          "1456:     str = p + 2;",
          "1457:     while (IS_WHITESPACE (*str)) {",
          "1458:      str++;",
          "",
          "[Removed Lines]",
          "1416:   for (cmd++; *cmd; ) {",
          "1419:    char *line, *p = find_eoq (cmd);",
          "1420:    if (!p || !*p) {",
          "1421:     eprintf (\"Missing \\\" in (%s).\", cmd);",
          "1422:     return false;",
          "1423:    }",
          "1426:    while (IS_WHITESPACE (p[1])) p++;",
          "1427:    if (p[1] == '@' || (p[1] && p[2] == '@')) {",
          "1428:     char *q = strchr (p + 1, '\"');",
          "1429:     if (q) {",
          "1432:     oseek = core->offset;",
          "1433:     r_core_seek (core,",
          "1434:           r_num_math (core->num, p + 2), 1);",
          "1435:     if (q) {",
          "1437:      p = q;",
          "1438:     } else {",
          "1439:      p = NULL;",
          "1442:    if (p && *p && p[1] == '>') {",
          "1443:     str = p + 2;",
          "1444:     while (*str == '>') {",
          "1445:      str++;",
          "1447:     while (IS_WHITESPACE (*str)) {",
          "1448:      str++;",
          "1450:     r_cons_flush ();",
          "1451:     pipefd = r_cons_pipe_open (str, 1, p[2] == '>');",
          "1455:    if (p && p[1] == '|') {",
          "",
          "[Added Lines]",
          "1418:   for (; *cmd; ) {",
          "1421:    char *line, *p;",
          "1422:    haveQuote = *cmd == '\"';",
          "1423:    if (haveQuote) {",
          "1425:     cmd++;",
          "1426:     p = find_eoq (cmd + 1);",
          "1427:     if (!p || !*p) {",
          "1428:      eprintf (\"Missing \\\" in (%s).\", cmd);",
          "1429:      return false;",
          "1432:     if (!*p) {",
          "1433:      eos = true;",
          "1434:     }",
          "1435:    } else {",
          "1436:     char *sc = strchr (cmd, ';');",
          "1437:     if (sc) {",
          "1439:     }",
          "1440:     r_core_cmd0 (core, cmd);",
          "1441:     if (!sc) {",
          "1442:      break;",
          "1444:     cmd = sc + 1;",
          "1445:     continue;",
          "1447:    if (p[0]) {",
          "1449:     if (p[0] == '@') {",
          "1450:      p--;",
          "1452:     while (p[1] == ';' || IS_WHITESPACE (p[1])) {",
          "1453:      p++;",
          "1454:     }",
          "1455:     if (p[1] == '@' || (p[1] && p[2] == '@')) {",
          "1456:      char *q = strchr (p + 1, '\"');",
          "1457:      if (q) {",
          "1459:      }",
          "1460:      haveQuote = q != NULL;",
          "1461:      oseek = core->offset;",
          "1462:      r_core_seek (core,",
          "1463:            r_num_math (core->num, p + 2), 1);",
          "1464:      if (q) {",
          "1466:       p = q;",
          "1467:      } else {",
          "1468:       p = strchr (p + 1, ';');",
          "1469:      }",
          "1470:     }",
          "1471:     if (p && *p && p[1] == '>') {",
          "1472:      str = p + 2;",
          "1473:      while (*str == '>') {",
          "1474:       str++;",
          "1475:      }",
          "1476:      while (IS_WHITESPACE (*str)) {",
          "1477:       str++;",
          "1478:      }",
          "1479:      r_cons_flush ();",
          "1480:      pipefd = r_cons_pipe_open (str, 1, p[2] == '>');",
          "1485:    if (p && *p && p[1] == '|') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1473:    if (!p) {",
          "1474:     break;",
          "1475:    }",
          "1478:   }",
          "1479:   return true;",
          "1480:  case '(':",
          "",
          "[Removed Lines]",
          "1477:    cmd = p + 1;",
          "",
          "[Added Lines]",
          "1506:    if (eos) {",
          "1507:     break;",
          "1508:    }",
          "1509:    if (haveQuote) {",
          "1510:     if (*p == ';') {",
          "1511:      cmd = p + 1;",
          "1512:     } else {",
          "1513:      if (*p == '\"') {",
          "1514:       cmd = p + 1;",
          "1515:      } else {",
          "1517:       cmd = p;",
          "1518:      }",
          "1519:     }",
          "1520:    } else {",
          "1521:     cmd = p + 1;",
          "1522:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}