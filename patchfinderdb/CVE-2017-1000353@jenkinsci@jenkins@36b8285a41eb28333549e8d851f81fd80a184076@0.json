{
  "cve_id": "CVE-2017-1000353",
  "cve_desc": "Jenkins versions 2.56 and earlier as well as 2.46.1 LTS and earlier are vulnerable to an unauthenticated remote code execution. An unauthenticated remote code execution vulnerability allowed attackers to transfer a serialized Java `SignedObject` object to the Jenkins CLI, that would be deserialized using a new `ObjectInputStream`, bypassing the existing blacklist-based protection mechanism. We're fixing this issue by adding `SignedObject` to the blacklist. We're also backporting the new HTTP CLI protocol from Jenkins 2.54 to LTS 2.46.2, and deprecating the remoting-based (i.e. Java serialization) CLI protocol, disabling it by default.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "36b8285a41eb28333549e8d851f81fd80a184076",
  "patch_info": {
    "commit_hash": "36b8285a41eb28333549e8d851f81fd80a184076",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/36b8285a41eb28333549e8d851f81fd80a184076",
    "files": [
      "core/src/main/java/jenkins/model/Jenkins.java",
      "pom.xml",
      "test/src/test/java/jenkins/security/Security218CliTest.java"
    ],
    "message": "[SECURITY-429] Fixing by blacklisting SignedObject.",
    "before_after_code_files": [
      "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
      "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
      "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "296: import static hudson.Util.*;",
      "297: import static hudson.init.InitMilestone.*;",
      "298: import hudson.util.LogTaskListener;",
      "299: import static java.util.logging.Level.*;",
      "300: import static javax.servlet.http.HttpServletResponse.*;",
      "301: import org.kohsuke.stapler.WebMethod;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "298: import hudson.remoting.ClassFilter;",
      "301: import java.util.regex.Pattern;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "813:             adjuncts = new AdjunctManager(servletContext, pluginManager.uberClassLoader,\"adjuncts/\"+SESSION_HASH, TimeUnit2.DAYS.toMillis(365));",
      "816:             executeReactor( is,",
      "817:                     pluginManager.initTasks(is),    // loading and preparing plugins",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "817:             ClassFilter.appendDefaultFilter(Pattern.compile(\"java[.]security[.]SignedObject\")); // TODO move to standard blacklist",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java": [
      "File: test/src/test/java/jenkins/security/Security218CliTest.java -> test/src/test/java/jenkins/security/Security218CliTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: import java.io.PrintStream;",
      "33: import jenkins.security.security218.Payload;",
      "34: import org.jenkinsci.remoting.RoleChecker;",
      "36: import org.junit.Test;",
      "37: import static org.junit.Assert.*;",
      "38: import org.junit.Rule;",
      "",
      "[Removed Lines]",
      "35: import org.junit.Ignore;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:         probe(Payload.Ldap, PayloadCaller.EXIT_CODE_REJECTED);",
      "171:     }",
      "174:     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)",
      "175:     @Test",
      "176:     @Issue(\"SECURITY-429\")",
      "",
      "[Removed Lines]",
      "173:     @Ignore(\"TODO fails unless ^java[.]security[.]SignedObject is blacklisted\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9137d6be0b6ab0f83a7c3f51f924ed2c8596fd52",
      "candidate_info": {
        "commit_hash": "9137d6be0b6ab0f83a7c3f51f924ed2c8596fd52",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/9137d6be0b6ab0f83a7c3f51f924ed2c8596fd52",
        "files": [
          "core/src/main/java/jenkins/model/Jenkins.java"
        ],
        "message": "Need to also handle a different format in newer Remoting releases.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "820:                 try {",
          "821:                     Field blacklistPatternsF = ClassFilter.DEFAULT.getClass().getDeclaredField(\"blacklistPatterns\");",
          "822:                     blacklistPatternsF.setAccessible(true);",
          "826:                 } catch (NoSuchFieldException | IllegalAccessException x) {",
          "827:                     throw new Error(x);",
          "828:                 }",
          "",
          "[Removed Lines]",
          "823:                     @SuppressWarnings(\"unchecked\")",
          "824:                     List<Pattern> blacklistPatterns = (List) blacklistPatternsF.get(ClassFilter.DEFAULT);",
          "825:                     blacklistPatterns.add(Pattern.compile(\"java[.]security[.]SignedObject\"));",
          "",
          "[Added Lines]",
          "823:                     Object blacklistPatterns = blacklistPatternsF.get(ClassFilter.DEFAULT);",
          "824:                     if (blacklistPatterns instanceof List) {",
          "825:                         @SuppressWarnings(\"unchecked\")",
          "826:                         List<Pattern> blacklistPatternsL = (List) blacklistPatterns;",
          "827:                         blacklistPatternsL.add(Pattern.compile(\"java[.]security[.]SignedObject\"));",
          "828:                     } else { // remoting 2.62+",
          "829:                         Object[] blacklistPatternsA = (Object[]) blacklistPatterns;",
          "830:                         boolean found = false;",
          "831:                         for (int i = 0; i < blacklistPatternsA.length; i++) {",
          "832:                             if (blacklistPatternsA[i] instanceof Pattern) {",
          "833:                                 blacklistPatternsA[i] = Pattern.compile(blacklistPatternsA[i] + \"|java[.]security[.]SignedObject\");",
          "834:                                 found = true;",
          "835:                                 break;",
          "836:                             }",
          "837:                         }",
          "838:                         if (!found) {",
          "839:                             throw new Error(\"no Pattern found among \" + Arrays.toString(blacklistPatternsA));",
          "840:                         }",
          "841:                     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "903b4461d37170ccda49ce6637adf7cf4a261b93",
      "candidate_info": {
        "commit_hash": "903b4461d37170ccda49ce6637adf7cf4a261b93",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/903b4461d37170ccda49ce6637adf7cf4a261b93",
        "files": [
          "core/src/main/java/hudson/util/XStream2.java",
          "core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/java/jenkins/security/ClassFilterImpl.java",
          "core/src/main/java/jenkins/security/CustomClassFilter.java",
          "core/src/main/resources/jenkins/security/whitelisted-classes.txt",
          "pom.xml",
          "test/pom.xml",
          "test/src/test/groovy/hudson/cli/BuildCommandTest.groovy",
          "test/src/test/java/hudson/cli/BuildCommand2Test.java",
          "test/src/test/java/hudson/util/XStream2Security383Test.java",
          "test/src/test/java/jenkins/install/InstallUtilTest.java",
          "test/src/test/java/jenkins/install/SetupWizardTest.java",
          "test/src/test/java/jenkins/security/ClassFilterImplTest.java",
          "test/src/test/java/jenkins/security/CustomClassFilterTest.java",
          "test/src/test/java/jenkins/security/Security218CliTest.java",
          "test/src/test/java/jenkins/security/Security218Test.java",
          "test/src/test/resources/plugins/custom-class-filter.jpi"
        ],
        "message": "[JENKINS-47736] Switch Remoting/XStream blacklist to a whitelist.",
        "before_after_code_files": [
          "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java",
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/java/jenkins/security/ClassFilterImpl.java||core/src/main/java/jenkins/security/ClassFilterImpl.java",
          "core/src/main/java/jenkins/security/CustomClassFilter.java||core/src/main/java/jenkins/security/CustomClassFilter.java",
          "test/src/test/groovy/hudson/cli/BuildCommandTest.groovy||test/src/test/groovy/hudson/cli/BuildCommandTest.groovy",
          "test/src/test/java/hudson/cli/BuildCommand2Test.java||test/src/test/java/hudson/cli/BuildCommand2Test.java",
          "test/src/test/java/hudson/util/XStream2Security383Test.java||test/src/test/java/hudson/util/XStream2Security383Test.java",
          "test/src/test/java/jenkins/install/InstallUtilTest.java||test/src/test/java/jenkins/install/InstallUtilTest.java",
          "test/src/test/java/jenkins/install/SetupWizardTest.java||test/src/test/java/jenkins/install/SetupWizardTest.java",
          "test/src/test/java/jenkins/security/ClassFilterImplTest.java||test/src/test/java/jenkins/security/ClassFilterImplTest.java",
          "test/src/test/java/jenkins/security/CustomClassFilterTest.java||test/src/test/java/jenkins/security/CustomClassFilterTest.java",
          "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java",
          "test/src/test/java/jenkins/security/Security218Test.java||test/src/test/java/jenkins/security/Security218Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java": [
          "File: core/src/main/java/hudson/util/XStream2.java -> core/src/main/java/hudson/util/XStream2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import java.util.Map;",
          "69: import java.util.concurrent.ConcurrentHashMap;",
          "70: import javax.annotation.CheckForNull;",
          "",
          "[Removed Lines]",
          "71: import org.kohsuke.accmod.Restricted;",
          "72: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462:             if (type == null) {",
          "463:                 return false;",
          "464:             }",
          "473:         }",
          "474:     }",
          "475: }",
          "",
          "[Removed Lines]",
          "465:             try {",
          "466:                 ClassFilter.DEFAULT.check(type);",
          "467:                 ClassFilter.DEFAULT.check(type.getName());",
          "468:             } catch (SecurityException se) {",
          "470:                 return true;",
          "471:             }",
          "472:             return false;",
          "",
          "[Added Lines]",
          "464:             return ClassFilter.DEFAULT.isBlacklisted(type.getName()) || ClassFilter.DEFAULT.isBlacklisted(type);",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: import hudson.model.listeners.SCMListener;",
          "107: import hudson.model.listeners.SaveableListener;",
          "108: import hudson.remoting.Callable;",
          "110: import hudson.remoting.LocalChannel;",
          "111: import hudson.remoting.VirtualChannel;",
          "112: import hudson.scm.RepositoryBrowser;",
          "",
          "[Removed Lines]",
          "109: import hudson.remoting.ClassFilter;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182: import jenkins.install.InstallUtil;",
          "183: import jenkins.install.SetupWizard;",
          "184: import jenkins.model.ProjectNamingStrategy.DefaultProjectNamingStrategy;",
          "185: import jenkins.security.ConfidentialKey;",
          "186: import jenkins.security.ConfidentialStore;",
          "187: import jenkins.security.SecurityListener;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184: import jenkins.security.ClassFilterImpl;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "284: import java.util.logging.Level;",
          "285: import java.util.logging.LogRecord;",
          "286: import java.util.logging.Logger;",
          "288: import java.util.stream.Collectors;",
          "290: import static hudson.Util.*;",
          "",
          "[Removed Lines]",
          "287: import java.util.regex.Pattern;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "895:             adjuncts = new AdjunctManager(servletContext, pluginManager.uberClassLoader,\"adjuncts/\"+SESSION_HASH, TimeUnit.DAYS.toMillis(365));",
          "904:             executeReactor( is,",
          "",
          "[Removed Lines]",
          "897:             try {",
          "898:                 ClassFilter.appendDefaultFilter(Pattern.compile(\"java[.]security[.]SignedObject\")); // TODO move to standard blacklist",
          "899:             } catch (ClassFilter.ClassFilterException ex) {",
          "900:                 throw new IOException(\"Remoting library rejected the java[.]security[.]SignedObject blacklist pattern\", ex);",
          "901:             }",
          "",
          "[Added Lines]",
          "896:             ClassFilterImpl.register();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3278:             if (JenkinsJVM.isJenkinsJVM()) {",
          "3279:                 JenkinsJVMAccess._setJenkinsJVM(oldJenkinsJVM);",
          "3280:             }",
          "3281:         }",
          "3282:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3276:             ClassFilterImpl.unregister();",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/ClassFilterImpl.java||core/src/main/java/jenkins/security/ClassFilterImpl.java": [
          "File: core/src/main/java/jenkins/security/ClassFilterImpl.java -> core/src/main/java/jenkins/security/ClassFilterImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package jenkins.security;",
          "27: import com.google.common.collect.ImmutableSet;",
          "28: import hudson.ExtensionList;",
          "29: import hudson.Main;",
          "30: import hudson.remoting.ClassFilter;",
          "31: import java.io.File;",
          "32: import java.io.FileInputStream;",
          "33: import java.io.IOException;",
          "34: import java.io.InputStream;",
          "35: import java.net.URI;",
          "36: import java.net.URL;",
          "37: import java.nio.charset.StandardCharsets;",
          "38: import java.security.CodeSource;",
          "39: import java.util.Collections;",
          "40: import java.util.HashMap;",
          "41: import java.util.Map;",
          "42: import java.util.Set;",
          "43: import java.util.WeakHashMap;",
          "44: import java.util.jar.Attributes;",
          "45: import java.util.jar.JarFile;",
          "46: import java.util.jar.Manifest;",
          "47: import java.util.logging.Level;",
          "48: import java.util.logging.Logger;",
          "49: import java.util.regex.Matcher;",
          "50: import java.util.regex.Pattern;",
          "51: import jenkins.model.Jenkins;",
          "52: import org.apache.commons.io.IOUtils;",
          "53: import org.kohsuke.accmod.Restricted;",
          "54: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "64: @Restricted(NoExternalUse.class)",
          "65: public class ClassFilterImpl extends ClassFilter {",
          "67:     private static final Logger LOGGER = Logger.getLogger(ClassFilterImpl.class.getName());",
          "72:     public static void register() {",
          "73:         if (Main.isUnitTest && Jenkins.class.getProtectionDomain().getCodeSource().getLocation() == null) {",
          "74:             mockOff();",
          "75:             return;",
          "76:         }",
          "77:         ClassFilter.setDefault(new ClassFilterImpl());",
          "78:     }",
          "83:     public static void unregister() {",
          "84:         ClassFilter.setDefault(ClassFilter.STANDARD);",
          "85:     }",
          "87:     private static void mockOff() {",
          "88:         LOGGER.warning(\"Disabling class filtering since we appear to be in a special test environment, perhaps Mockito/PowerMock\");",
          "89:         ClassFilter.setDefault(ClassFilter.NONE); // even Method on the standard blacklist is going to explode",
          "90:     }",
          "92:     private ClassFilterImpl() {}",
          "95:     private final Map<Class<?>, Boolean> cache = Collections.synchronizedMap(new WeakHashMap<>());",
          "97:     private final Map<String, Boolean> codeSourceCache = Collections.synchronizedMap(new HashMap<>());",
          "99:     static final Set<String> WHITELISTED_CLASSES;",
          "100:     static {",
          "101:         try (InputStream is = ClassFilterImpl.class.getResourceAsStream(\"whitelisted-classes.txt\")) {",
          "102:             WHITELISTED_CLASSES = ImmutableSet.copyOf(IOUtils.readLines(is, StandardCharsets.UTF_8));",
          "103:         } catch (IOException x) {",
          "104:             throw new ExceptionInInitializerError(x);",
          "105:         }",
          "106:     }",
          "108:     @SuppressWarnings(\"rawtypes\")",
          "109:     @Override",
          "110:     public boolean isBlacklisted(Class _c) {",
          "111:         for (CustomClassFilter f : ExtensionList.lookup(CustomClassFilter.class)) {",
          "112:             Boolean r = f.permits(_c);",
          "113:             if (r != null) {",
          "114:                 LOGGER.log(Level.FINER, \"{0} specifies a policy for {1}: {2}\", new Object[] {f, _c.getName(), r});",
          "115:                 return !r;",
          "116:             }",
          "117:         }",
          "118:         return cache.computeIfAbsent(_c, c -> {",
          "119:             if (ClassFilter.STANDARD.isBlacklisted(c)) { // currently never true: only the name overload is overridden",
          "120:                 return true;",
          "121:             }",
          "122:             String name = c.getName();",
          "123:             if (Main.isUnitTest && name.contains(\"$$EnhancerByMockitoWithCGLIB$$\")) {",
          "124:                 mockOff();",
          "125:                 return false;",
          "126:             }",
          "127:             if (c.isArray()) {",
          "128:                 LOGGER.log(Level.FINE, \"permitting {0} since it is an array\", name);",
          "129:                 return false;",
          "130:             }",
          "131:             if (Throwable.class.isAssignableFrom(c)) {",
          "132:                 LOGGER.log(Level.FINE, \"permitting {0} since it is a throwable\", name);",
          "133:                 return false;",
          "134:             }",
          "135:             if (Enum.class.isAssignableFrom(c)) { // Class.isEnum seems to be false for, e.g., java.util.concurrent.TimeUnit$6",
          "136:                 LOGGER.log(Level.FINE, \"permitting {0} since it is an enum\", name);",
          "137:                 return false;",
          "138:             }",
          "139:             CodeSource codeSource = c.getProtectionDomain().getCodeSource();",
          "140:             URL location = codeSource != null ? codeSource.getLocation() : null;",
          "141:             if (location != null) {",
          "142:                 if (isLocationWhitelisted(location.toString())) {",
          "143:                     LOGGER.log(Level.FINE, \"permitting {0} due to its location in {1}\", new Object[] {name, location});",
          "144:                     return false;",
          "145:                 }",
          "146:             } else {",
          "147:                 ClassLoader loader = c.getClassLoader();",
          "148:                 if (loader != null && loader.getClass().getName().equals(\"hudson.remoting.RemoteClassLoader\")) {",
          "149:                     LOGGER.log(Level.FINE, \"permitting {0} since it was loaded by a remote class loader\", name);",
          "150:                     return false;",
          "151:                 }",
          "152:             }",
          "153:             if (WHITELISTED_CLASSES.contains(name)) {",
          "154:                 LOGGER.log(Level.FINE, \"tolerating {0} by whitelist\", name);",
          "155:                 return false;",
          "156:             }",
          "157:             LOGGER.log(Level.WARNING, \"{0} in {1} might be dangerous, so rejecting; see https://jenkins.io/redirect/class-filter/\", new Object[] {name, location != null ? location : \"JRE\"});",
          "158:             return true;",
          "159:         });",
          "160:     }",
          "162:     private static final Pattern CLASSES_JAR = Pattern.compile(\"(file:/.+/)WEB-INF/lib/classes[.]jar\");",
          "163:     private boolean isLocationWhitelisted(String _loc) {",
          "164:         return codeSourceCache.computeIfAbsent(_loc, loc -> {",
          "165:             if (loc.equals(Jenkins.class.getProtectionDomain().getCodeSource().getLocation().toString())) {",
          "166:                 LOGGER.log(Level.FINE, \"{0} seems to be the location of Jenkins core, OK\", loc);",
          "167:                 return true;",
          "168:             }",
          "169:             if (loc.equals(ClassFilter.class.getProtectionDomain().getCodeSource().getLocation().toString())) {",
          "170:                 LOGGER.log(Level.FINE, \"{0} seems to be the location of Remoting, OK\", loc);",
          "171:                 return true;",
          "172:             }",
          "173:             if (loc.matches(\"file:/.+[.]jar\")) {",
          "174:                 try (JarFile jf = new JarFile(new File(new URI(loc)), false)) {",
          "175:                     Manifest mf = jf.getManifest();",
          "176:                     if (mf != null) {",
          "177:                         if (isPluginManifest(mf)) {",
          "178:                             LOGGER.log(Level.FINE, \"{0} seems to be a Jenkins plugin, OK\", loc);",
          "179:                             return true;",
          "180:                         } else {",
          "181:                             LOGGER.log(Level.FINE, \"{0} does not look like a Jenkins plugin\", loc);",
          "182:                         }",
          "183:                     } else {",
          "184:                         LOGGER.log(Level.FINE, \"ignoring {0} with no manifest\", loc);",
          "185:                     }",
          "186:                 } catch (Exception x) {",
          "187:                     LOGGER.log(Level.WARNING, \"problem checking \" + loc, x);",
          "188:                 }",
          "189:             }",
          "190:             Matcher m = CLASSES_JAR.matcher(loc);",
          "191:             if (m.matches()) {",
          "193:                 try {",
          "194:                     File manifestFile = new File(new URI(m.group(1) + \"META-INF/MANIFEST.MF\"));",
          "195:                     if (manifestFile.isFile()) {",
          "196:                         try (InputStream is = new FileInputStream(manifestFile)) {",
          "197:                             if (isPluginManifest(new Manifest(is))) {",
          "198:                                 LOGGER.log(Level.FINE, \"{0} looks like a Jenkins plugin based on {1}, OK\", new Object[] {loc, manifestFile});",
          "199:                                 return true;",
          "200:                             } else {",
          "201:                                 LOGGER.log(Level.FINE, \"{0} does not look like a Jenkins plugin\", manifestFile);",
          "202:                             }",
          "203:                         }",
          "204:                     } else {",
          "205:                         LOGGER.log(Level.FINE, \"{0} has no matching {1}\", new Object[] {loc, manifestFile});",
          "206:                     }",
          "207:                 } catch (Exception x) {",
          "208:                     LOGGER.log(Level.WARNING, \"problem checking \" + loc, x);",
          "209:                 }",
          "210:             }",
          "211:             if (Main.isUnitTest) {",
          "212:                 if (loc.endsWith(\"/target/classes/\")) {",
          "213:                     LOGGER.log(Level.FINE, \"{0} seems to be current plugin classes, OK\", loc);",
          "214:                     return true;",
          "215:                 }",
          "216:                 if (loc.endsWith(\"/target/test-classes/\") || loc.endsWith(\"-tests.jar\")) {",
          "217:                     LOGGER.log(Level.FINE, \"{0} seems to be test classes, OK\", loc);",
          "218:                     return true;",
          "219:                 }",
          "220:                 if (loc.matches(\".+/jenkins-test-harness-.+[.]jar\")) {",
          "221:                     LOGGER.log(Level.FINE, \"{0} seems to be jenkins-test-harness, OK\", loc);",
          "222:                     return true;",
          "223:                 }",
          "224:             }",
          "225:             LOGGER.log(Level.FINE, \"{0} is not recognized; rejecting\", loc);",
          "226:             return false;",
          "227:         });",
          "228:     }",
          "230:     private static boolean isPluginManifest(Manifest mf) {",
          "231:         Attributes attr = mf.getMainAttributes();",
          "232:         return attr.getValue(\"Short-Name\") != null && (attr.getValue(\"Plugin-Version\") != null || attr.getValue(\"Jenkins-Version\") != null);",
          "233:     }",
          "235:     @Override",
          "236:     public boolean isBlacklisted(String name) {",
          "237:         if (Main.isUnitTest && name.contains(\"$$EnhancerByMockitoWithCGLIB$$\")) {",
          "238:             mockOff();",
          "239:             return false;",
          "240:         }",
          "241:         for (CustomClassFilter f : ExtensionList.lookup(CustomClassFilter.class)) {",
          "242:             Boolean r = f.permits(name);",
          "243:             if (r != null) {",
          "244:                 LOGGER.log(Level.FINER, \"{0} specifies a policy for {1}: {2}\", new Object[] {f, name, r});",
          "245:                 return !r;",
          "246:             }",
          "247:         }",
          "249:         if (ClassFilter.STANDARD.isBlacklisted(name)) {",
          "250:             LOGGER.log(Level.WARNING, \"rejecting {0} according to standard blacklist; see https://jenkins.io/redirect/class-filter/\", name);",
          "251:             return true;",
          "252:         } else {",
          "253:             return false;",
          "254:         }",
          "255:     }",
          "257: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/CustomClassFilter.java||core/src/main/java/jenkins/security/CustomClassFilter.java": [
          "File: core/src/main/java/jenkins/security/CustomClassFilter.java -> core/src/main/java/jenkins/security/CustomClassFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package jenkins.security;",
          "27: import hudson.Extension;",
          "28: import hudson.ExtensionList;",
          "29: import hudson.ExtensionPoint;",
          "30: import hudson.init.InitMilestone;",
          "31: import hudson.init.Initializer;",
          "32: import hudson.remoting.ClassFilter;",
          "33: import java.io.IOException;",
          "34: import java.io.InputStream;",
          "35: import java.net.URL;",
          "36: import java.nio.charset.StandardCharsets;",
          "37: import java.util.Enumeration;",
          "38: import java.util.HashMap;",
          "39: import java.util.Map;",
          "40: import java.util.logging.Level;",
          "41: import java.util.logging.Logger;",
          "42: import javax.annotation.CheckForNull;",
          "43: import jenkins.model.Jenkins;",
          "44: import jenkins.util.SystemProperties;",
          "45: import org.apache.commons.io.IOUtils;",
          "46: import org.kohsuke.accmod.Restricted;",
          "47: import org.kohsuke.accmod.restrictions.DoNotUse;",
          "48: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "55: @Restricted(NoExternalUse.class) // until a use case is identified for a _dynamic_ extension from some plugin",
          "56: public interface CustomClassFilter extends ExtensionPoint {",
          "65:     default @CheckForNull Boolean permits(Class<?> c) {",
          "66:         return null;",
          "67:     }",
          "76:     default @CheckForNull Boolean permits(String name) {",
          "77:         return null;",
          "78:     }",
          "86:     @Restricted(DoNotUse.class)",
          "87:     @Extension",
          "88:     public class Static implements CustomClassFilter {",
          "95:         public final Map<String, Boolean> overrides = new HashMap<>();",
          "97:         public Static() {",
          "98:             String entries = SystemProperties.getString(\"hudson.remoting.ClassFilter\");",
          "99:             if (entries != null) {",
          "100:                 for (String entry : entries.split(\",\")) {",
          "101:                     if (entry.startsWith(\"!\")) {",
          "102:                         overrides.put(entry.substring(1), false);",
          "103:                     } else {",
          "104:                         overrides.put(entry, true);",
          "105:                     }",
          "106:                 }",
          "107:                 Logger.getLogger(Static.class.getName()).log(Level.FINE, \"user-defined entries: {0}\", overrides);",
          "108:             }",
          "109:         }",
          "111:         @Override",
          "112:         public Boolean permits(Class<?> c) {",
          "113:             return permits(c.getName());",
          "114:         }",
          "116:         @Override",
          "117:         public Boolean permits(String name) {",
          "118:             return overrides.get(name);",
          "119:         }",
          "121:     }",
          "134:     @Restricted(DoNotUse.class)",
          "135:     @Extension",
          "136:     public class Contributed implements CustomClassFilter {",
          "142:         private final Map<String, Boolean> overrides = new HashMap<>();",
          "144:         @Override",
          "145:         public Boolean permits(Class<?> c) {",
          "146:             return permits(c.getName());",
          "147:         }",
          "149:         @Override",
          "150:         public Boolean permits(String name) {",
          "151:             return overrides.get(name);",
          "152:         }",
          "154:         @Initializer(after = InitMilestone.PLUGINS_PREPARED, before = InitMilestone.PLUGINS_STARTED, fatal = false)",
          "155:         public static void load() throws IOException {",
          "156:             Map<String, Boolean> overrides = ExtensionList.lookup(CustomClassFilter.class).get(Contributed.class).overrides;",
          "157:             Enumeration<URL> resources = Jenkins.getInstance().getPluginManager().uberClassLoader.getResources(\"META-INF/hudson.remoting.ClassFilter\");",
          "158:             while (resources.hasMoreElements()) {",
          "159:                 try (InputStream is = resources.nextElement().openStream()) {",
          "160:                     for (String entry : IOUtils.readLines(is, StandardCharsets.UTF_8)) {",
          "161:                         if (entry.startsWith(\"!\")) {",
          "162:                             overrides.put(entry.substring(1), false);",
          "163:                         } else {",
          "164:                             overrides.put(entry, true);",
          "165:                         }",
          "166:                     }",
          "167:                 }",
          "168:             }",
          "169:             Logger.getLogger(Contributed.class.getName()).log(Level.FINE, \"plugin-defined entries: {0}\", overrides);",
          "170:         }",
          "172:     }",
          "174: }",
          "",
          "---------------"
        ],
        "test/src/test/groovy/hudson/cli/BuildCommandTest.groovy||test/src/test/groovy/hudson/cli/BuildCommandTest.groovy": [
          "File: test/src/test/groovy/hudson/cli/BuildCommandTest.groovy -> test/src/test/groovy/hudson/cli/BuildCommandTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     @Rule public JenkinsRule j = new JenkinsRule();",
          "",
          "[Removed Lines]",
          "78:     @Test void async() {",
          "79:         def p = j.createFreeStyleProject();",
          "80:         def started = new OneShotEvent();",
          "81:         def completed = new OneShotEvent();",
          "82:         p.buildersList.add([perform: {AbstractBuild build, Launcher launcher, BuildListener listener ->",
          "83:             started.signal();",
          "84:             completed.block();",
          "85:             return true;",
          "86:         }] as TestBuilder);",
          "89:         def cli = new CLI(j.URL)",
          "90:         try {",
          "91:             assertEquals(0,cli.execute([\"build\", p.name]))",
          "92:             started.block()",
          "93:             assertTrue(p.getBuildByNumber(1).isBuilding())",
          "94:             completed.signal()",
          "95:         } finally {",
          "96:             cli.close();",
          "97:         }",
          "98:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/BuildCommand2Test.java||test/src/test/java/hudson/cli/BuildCommand2Test.java": [
          "File: test/src/test/java/hudson/cli/BuildCommand2Test.java -> test/src/test/java/hudson/cli/BuildCommand2Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import hudson.model.FreeStyleBuild;",
          "32: import hudson.model.FreeStyleProject;",
          "33: import hudson.model.ParametersDefinitionProperty;",
          "34: import java.io.ByteArrayInputStream;",
          "35: import java.io.IOException;",
          "36: import org.junit.ClassRule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import hudson.util.OneShotEvent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:         r.assertLogContains(\"uploaded content here\", b);",
          "72:     }",
          "74: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     @Test",
          "79:     public void async() throws Exception {",
          "80:         FreeStyleProject p = r.createFreeStyleProject();",
          "81:         OneShotEvent started = new OneShotEvent();",
          "82:         OneShotEvent completed = new OneShotEvent();",
          "83:         p.getBuildersList().add(new TestBuilder() {",
          "84:             @Override",
          "85:             public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {",
          "86:                 started.signal();",
          "87:                 completed.block();",
          "88:                 return true;",
          "89:             }",
          "90:         });",
          "93:         CLI cli = new CLI(r.getURL());",
          "94:         try {",
          "95:             assertEquals(0, cli.execute(\"build\", p.getName()));",
          "96:             started.block();",
          "97:             assertTrue(p.getBuildByNumber(1).isBuilding());",
          "98:             completed.signal();",
          "99:         } finally {",
          "100:             cli.close();",
          "101:         }",
          "102:     }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/util/XStream2Security383Test.java||test/src/test/java/hudson/util/XStream2Security383Test.java": [
          "File: test/src/test/java/hudson/util/XStream2Security383Test.java -> test/src/test/java/hudson/util/XStream2Security383Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.io.File;",
          "20: import java.io.IOException;",
          "21: import java.io.InputStream;",
          "23: import static org.junit.Assert.assertFalse;",
          "24: import static org.mockito.Mockito.when;",
          "26: public class XStream2Security383Test {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.logging.Level;",
          "23: import jenkins.security.ClassFilterImpl;",
          "26: import org.jvnet.hudson.test.LoggerRule;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     @Rule",
          "32:     public TemporaryFolder f = new TemporaryFolder();",
          "34:     @Mock",
          "35:     private StaplerRequest req;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     @Rule",
          "38:     public LoggerRule logging = new LoggerRule().record(ClassFilterImpl.class, Level.FINE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:             try {",
          "65:                 Items.load(j.jenkins, tempJobDir);",
          "66:             } catch (Exception e) {",
          "68:             }",
          "69:             assertFalse(\"no file should be created here\", exploitFile.exists());",
          "70:         } finally {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:                 e.printStackTrace();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:             try {",
          "98:                 j.jenkins.doCreateItem(req, rsp);",
          "99:             } catch (Exception e) {",
          "101:             }",
          "103:             assertFalse(\"no file should be created here\", exploitFile.exists());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:                 e.printStackTrace();",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/install/InstallUtilTest.java||test/src/test/java/jenkins/install/InstallUtilTest.java": [
          "File: test/src/test/java/jenkins/install/InstallUtilTest.java -> test/src/test/java/jenkins/install/InstallUtilTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     @Test",
          "119:     public void test_getLastExecVersion() throws Exception {",
          "122:         InstallUtil.getConfigFile().delete();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:         Main.isUnitTest = true;",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/install/SetupWizardTest.java||test/src/test/java/jenkins/install/SetupWizardTest.java": [
          "File: test/src/test/java/jenkins/install/SetupWizardTest.java -> test/src/test/java/jenkins/install/SetupWizardTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import java.io.File;",
          "33: import java.io.IOException;",
          "34: import java.net.MalformedURLException;",
          "36: import jenkins.AgentProtocolTest;",
          "38: import org.apache.commons.io.FileUtils;",
          "39: import static org.hamcrest.Matchers.*;",
          "40: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "35: import java.util.Set;",
          "37: import jenkins.slaves.DeprecatedAgentProtocolMonitor;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import org.junit.Test;",
          "43: import org.jvnet.hudson.test.JenkinsRule;",
          "44: import static org.junit.Assert.assertThat;",
          "46: import org.junit.rules.TemporaryFolder;",
          "47: import org.jvnet.hudson.test.Issue;",
          "",
          "[Removed Lines]",
          "45: import static org.junit.Assert.assertFalse;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:     @Issue(\"JENKINS-34833\")",
          "89:     public void shouldReturnUpdateSiteJSONIfSpecified() throws Exception {",
          "92:         us.init();",
          "93:         j.jenkins.getUpdateCenter().getSites().add(us);",
          "",
          "[Removed Lines]",
          "91:         CustomUpdateSite us = new CustomUpdateSite(tmpdir);",
          "",
          "[Added Lines]",
          "88:         CustomUpdateSite us = new CustomUpdateSite(tmpdir.getRoot());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:     private static final class CustomUpdateSite extends UpdateSite {",
          "148:             this.tmpdir = tmpdir;",
          "149:         }",
          "151:         public void init() throws IOException {",
          "153:             FileUtils.write(newFile, \"[ { \"",
          "154:                     + \"\\\"category\\\":\\\"Organization and Administration\\\", \"",
          "155:                     + \"\\\"plugins\\\": [ { \\\"name\\\": \\\"dashboard-view\\\"}, { \\\"name\\\": \\\"antisamy-markup-formatter\\\" } ]\"",
          "",
          "[Removed Lines]",
          "144:         private final TemporaryFolder tmpdir;",
          "146:         public CustomUpdateSite(TemporaryFolder tmpdir) throws MalformedURLException {",
          "147:             super(\"custom-uc\", tmpdir.getRoot().toURI().toURL().toString() + \"update-center.json\");",
          "152:             File newFile = tmpdir.newFile(\"platform-plugins.json\");",
          "",
          "[Added Lines]",
          "141:         private final File tmpdir;",
          "143:         CustomUpdateSite(File tmpdir) throws MalformedURLException {",
          "144:             super(\"custom-uc\", tmpdir.toURI().toURL().toString() + \"update-center.json\");",
          "149:             File newFile = new File(tmpdir, \"platform-plugins.json\");",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/ClassFilterImplTest.java||test/src/test/java/jenkins/security/ClassFilterImplTest.java": [
          "File: test/src/test/java/jenkins/security/ClassFilterImplTest.java -> test/src/test/java/jenkins/security/ClassFilterImplTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package jenkins.security;",
          "27: import com.google.common.collect.LinkedListMultimap;",
          "28: import hudson.Launcher;",
          "29: import hudson.model.AbstractBuild;",
          "30: import hudson.model.AbstractProject;",
          "31: import hudson.model.BuildListener;",
          "32: import hudson.model.FreeStyleProject;",
          "33: import hudson.model.Result;",
          "34: import hudson.tasks.BuildStepDescriptor;",
          "35: import hudson.tasks.Builder;",
          "36: import java.io.IOException;",
          "37: import java.io.InputStream;",
          "38: import java.util.List;",
          "39: import java.util.TreeSet;",
          "40: import java.util.logging.Level;",
          "41: import jenkins.model.GlobalConfiguration;",
          "42: import org.apache.commons.io.IOUtils;",
          "43: import org.junit.Test;",
          "44: import static org.hamcrest.Matchers.*;",
          "45: import static org.junit.Assert.*;",
          "46: import static org.junit.Assume.*;",
          "47: import org.junit.ClassRule;",
          "48: import org.junit.Rule;",
          "49: import org.jvnet.hudson.test.BuildWatcher;",
          "50: import org.jvnet.hudson.test.JenkinsRule;",
          "51: import org.jvnet.hudson.test.LoggerRule;",
          "52: import org.jvnet.hudson.test.TestExtension;",
          "53: import org.jvnet.hudson.test.WithoutJenkins;",
          "55: public class ClassFilterImplTest {",
          "57:     @ClassRule",
          "58:     public static BuildWatcher buildWatcher = new BuildWatcher();",
          "60:     @Rule",
          "61:     public JenkinsRule r = new JenkinsRule();",
          "63:     @Rule",
          "64:     public LoggerRule logging = new LoggerRule().record(ClassFilterImpl.class, Level.FINE);",
          "66:     @WithoutJenkins",
          "67:     @Test",
          "68:     public void whitelistSanity() throws Exception {",
          "69:         try (InputStream is = ClassFilterImpl.class.getResourceAsStream(\"whitelisted-classes.txt\")) {",
          "70:             List<String> lines = IOUtils.readLines(is);",
          "71:             assertThat(\"whitelist is ordered\", new TreeSet<>(lines), contains(lines.toArray(new String[0])));",
          "72:             for (String line : lines) {",
          "73:                 try {",
          "74:                     Class.forName(line);",
          "75:                 } catch (ClassNotFoundException x) {",
          "76:                     System.err.println(\"skipping checks of unknown class \" + line);",
          "77:                 }",
          "78:             }",
          "79:         }",
          "80:     }",
          "82:     @Test",
          "83:     public void masterToSlaveBypassesWhitelist() throws Exception {",
          "84:         assumeThat(ClassFilterImpl.WHITELISTED_CLASSES, not(contains(LinkedListMultimap.class.getName())));",
          "85:         FreeStyleProject p = r.createFreeStyleProject();",
          "86:         p.setAssignedNode(r.createSlave());",
          "87:         p.getBuildersList().add(new M2SBuilder());",
          "88:         r.assertLogContains(\"sent {}\", r.buildAndAssertSuccess(p));",
          "89:     }",
          "90:     public static class M2SBuilder extends Builder {",
          "91:         @Override",
          "92:         public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {",
          "93:             listener.getLogger().println(\"sent \" + launcher.getChannel().call(new M2S()));",
          "94:             return true;",
          "95:         }",
          "96:         @TestExtension(\"masterToSlaveBypassesWhitelist\")",
          "97:         public static class DescriptorImpl extends BuildStepDescriptor<Builder> {",
          "98:             @SuppressWarnings(\"rawtypes\")",
          "99:             @Override",
          "100:             public boolean isApplicable(Class<? extends AbstractProject> jobType) {",
          "101:                 return true;",
          "102:             }",
          "103:         }",
          "104:     }",
          "105:     private static class M2S extends MasterToSlaveCallable<String, RuntimeException> {",
          "106:         private final LinkedListMultimap<?, ?> obj = LinkedListMultimap.create();",
          "107:         @Override",
          "108:         public String call() throws RuntimeException {",
          "109:             return obj.toString();",
          "110:         }",
          "111:     }",
          "115:     @Test",
          "116:     public void slaveToMasterRequiresWhitelist() throws Exception {",
          "117:         assumeThat(ClassFilterImpl.WHITELISTED_CLASSES, not(contains(LinkedListMultimap.class.getName())));",
          "118:         FreeStyleProject p = r.createFreeStyleProject();",
          "119:         p.setAssignedNode(r.createSlave());",
          "120:         p.getBuildersList().add(new S2MBuilder());",
          "121:         r.assertBuildStatus(Result.FAILURE, p.scheduleBuild2(0));",
          "122:     }",
          "123:     public static class S2MBuilder extends Builder {",
          "124:         @Override",
          "125:         public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {",
          "126:             listener.getLogger().println(\"received \" + launcher.getChannel().call(new S2M()));",
          "127:             return true;",
          "128:         }",
          "129:         @TestExtension(\"slaveToMasterRequiresWhitelist\")",
          "130:         public static class DescriptorImpl extends BuildStepDescriptor<Builder> {",
          "131:             @SuppressWarnings(\"rawtypes\")",
          "132:             @Override",
          "133:             public boolean isApplicable(Class<? extends AbstractProject> jobType) {",
          "134:                 return true;",
          "135:             }",
          "136:         }",
          "137:     }",
          "138:     private static class S2M extends MasterToSlaveCallable<LinkedListMultimap<?, ?>, RuntimeException> {",
          "139:         @Override",
          "140:         public LinkedListMultimap<?, ?> call() throws RuntimeException {",
          "141:             return LinkedListMultimap.create();",
          "142:         }",
          "143:     }",
          "145:     @Test",
          "146:     public void xstreamRequiresWhitelist() throws Exception {",
          "147:         assumeThat(ClassFilterImpl.WHITELISTED_CLASSES, not(contains(LinkedListMultimap.class.getName())));",
          "148:         Config config = GlobalConfiguration.all().get(Config.class);",
          "149:         config.obj = LinkedListMultimap.create();",
          "150:         try {",
          "151:             config.save();",
          "152:             fail(\"should not have been accepted\");",
          "153:         } catch (Exception x) {",
          "154:             x.printStackTrace();",
          "156:         }",
          "157:     }",
          "158:     @TestExtension(\"xstreamRequiresWhitelist\")",
          "159:     public static class Config extends GlobalConfiguration {",
          "160:         LinkedListMultimap<?, ?> obj;",
          "161:     }",
          "163: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/CustomClassFilterTest.java||test/src/test/java/jenkins/security/CustomClassFilterTest.java": [
          "File: test/src/test/java/jenkins/security/CustomClassFilterTest.java -> test/src/test/java/jenkins/security/CustomClassFilterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package jenkins.security;",
          "27: import hudson.remoting.ClassFilter;",
          "28: import java.util.logging.Level;",
          "29: import javax.script.ScriptEngineManager;",
          "30: import javax.script.ScriptException;",
          "31: import javax.script.SimpleBindings;",
          "32: import jenkins.util.BuildListenerAdapter;",
          "33: import jenkins.util.TreeString;",
          "34: import jenkins.util.TreeStringBuilder;",
          "35: import org.junit.Test;",
          "36: import static org.hamcrest.Matchers.*;",
          "37: import org.junit.Rule;",
          "38: import org.junit.rules.ErrorCollector;",
          "39: import org.jvnet.hudson.test.JenkinsRule;",
          "40: import org.jvnet.hudson.test.LoggerRule;",
          "41: import org.jvnet.hudson.test.recipes.WithPlugin;",
          "43: public class CustomClassFilterTest {",
          "45:     static {",
          "46:         System.setProperty(\"hudson.remoting.ClassFilter\", \"javax.script.SimpleBindings,!jenkins.util.TreeString\");",
          "47:     }",
          "49:     @Rule",
          "50:     public JenkinsRule r = new JenkinsRule();",
          "52:     @Rule",
          "53:     public ErrorCollector errors = new ErrorCollector();",
          "55:     @Rule",
          "56:     public LoggerRule logging = new LoggerRule().record(\"jenkins.security\", Level.FINER);",
          "58:     @WithPlugin(\"custom-class-filter.jpi\")",
          "59:     @Test",
          "60:     public void smokes() throws Exception {",
          "61:         assertBlacklisted(\"enabled via system property\", SimpleBindings.class, false);",
          "62:         assertBlacklisted(\"enabled via plugin\", ScriptException.class, false);",
          "63:         assertBlacklisted(\"disabled by ClassFilter.STANDARD\", ScriptEngineManager.class, true);",
          "64:         assertBlacklisted(\"part of Jenkins core, so why not?\", BuildListenerAdapter.class, false);",
          "66:         assertBlacklisted(\"disabled via system property\", TreeString.class, true);",
          "67:         assertBlacklisted(\"disabled via plugin\", TreeStringBuilder.class, true);",
          "68:     }",
          "70:     private void assertBlacklisted(String message, Class<?> c, boolean blacklisted) {",
          "71:         String name = c.getName();",
          "72:         errors.checkThat(name + \": \" + message, ClassFilter.DEFAULT.isBlacklisted(c) || ClassFilter.DEFAULT.isBlacklisted(name), is(blacklisted));",
          "73:     }",
          "75: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java": [
          "File: test/src/test/java/jenkins/security/Security218CliTest.java -> test/src/test/java/jenkins/security/Security218CliTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:         try (CLI cli = new CLI(r.getURL())) {",
          "187:             int exitCode = cli.execute(\"send-payload\",",
          "188:                     payload.toString(), \"mv \" + file.getAbsolutePath() + \" \" + moved.getAbsolutePath());",
          "190:             assertTrue(\"Payload should not invoke the move operation \" + file, !moved.exists());",
          "191:             file.delete();",
          "192:         }",
          "193:     }",
          "",
          "[Removed Lines]",
          "189:             assertEquals(\"Unexpected result code.\", expectedResultCode, exitCode);",
          "",
          "[Added Lines]",
          "190:             assertEquals(\"Unexpected result code.\", expectedResultCode, exitCode);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:                     }",
          "255:                 });",
          "256:             } catch (Exception ex) {",
          "257:                 Throwable cause = ex;",
          "258:                 while (cause.getCause() != null) {",
          "259:                     cause = cause.getCause();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:                 ex.printStackTrace();",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/Security218Test.java||test/src/test/java/jenkins/security/Security218Test.java": [
          "File: test/src/test/java/jenkins/security/Security218Test.java -> test/src/test/java/jenkins/security/Security218Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import hudson.model.Node.Mode;",
          "4: import hudson.model.Slave;",
          "5: import hudson.remoting.Channel;",
          "7: import hudson.slaves.DumbSlave;",
          "8: import hudson.slaves.JNLPLauncher;",
          "9: import hudson.slaves.RetentionStrategy;",
          "10: import org.apache.tools.ant.util.JavaEnvUtils;",
          "12: import org.junit.After;",
          "13: import org.junit.Rule;",
          "14: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "6: import hudson.remoting.Which;",
          "11: import org.codehaus.groovy.runtime.Security218;",
          "",
          "[Added Lines]",
          "9: import java.io.File;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: import java.io.Serializable;",
          "19: import java.util.Collections;",
          "21: import static org.junit.Assert.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import java.util.logging.Level;",
          "20: import org.apache.commons.io.FileUtils;",
          "21: import org.codehaus.groovy.runtime.MethodClosure;",
          "22: import static org.hamcrest.Matchers.containsString;",
          "25: import org.junit.rules.TemporaryFolder;",
          "26: import org.jvnet.hudson.test.LoggerRule;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:     @Rule",
          "29:     public transient JenkinsRule j = new JenkinsRule();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     @Rule",
          "37:     public TemporaryFolder tmp = new TemporaryFolder();",
          "39:     @Rule",
          "40:     public LoggerRule logging = new LoggerRule().record(ClassFilterImpl.class, Level.FINE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     @SuppressWarnings(\"ConstantConditions\")",
          "63:     private void check(DumbSlave s) throws Exception {",
          "64:         try {",
          "71:         } catch (SecurityException e) {",
          "73:         }",
          "74:     }",
          "",
          "[Removed Lines]",
          "65:             s.getComputer().getChannel().call(new MasterToSlaveCallable<Object, RuntimeException>() {",
          "66:                 public Object call() {",
          "67:                     return new Security218();",
          "68:                 }",
          "69:             });",
          "70:             fail(\"Expected the connection to die\");",
          "72:             assertTrue(e.getMessage().contains(Security218.class.getName()));",
          "",
          "[Added Lines]",
          "76:             Object o = s.getComputer().getChannel().call(new EvilReturnValue());",
          "77:             fail(\"Expected the connection to die: \" + o);",
          "79:             assertThat(e.getMessage(), containsString(MethodClosure.class.getName()));",
          "80:         }",
          "81:     }",
          "82:     private static class EvilReturnValue extends MasterToSlaveCallable<Object, RuntimeException> {",
          "83:         @Override",
          "84:         public Object call() {",
          "85:             return new MethodClosure(\"oops\", \"trim\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:     public Channel launchJnlpSlave(Slave slave) throws Exception {",
          "93:         j.createWebClient().goTo(\"computer/\"+slave.getNodeName()+\"/slave-agent.jnlp?encrypt=true\", \"application/octet-stream\");",
          "94:         String secret = slave.getComputer().getJnlpMac();",
          "96:         ProcessBuilder pb = new ProcessBuilder(JavaEnvUtils.getJreExecutable(\"java\"),",
          "98:                 \"-jnlpUrl\", j.getURL() + \"computer/\"+slave.getNodeName()+\"/slave-agent.jnlp\", \"-secret\", secret);",
          "100:         pb.inheritIO();",
          "",
          "[Removed Lines]",
          "97:                 \"-jar\", Which.jarFile(hudson.remoting.Launcher.class).getAbsolutePath(),",
          "",
          "[Added Lines]",
          "108:         File slaveJar = tmp.newFile();",
          "109:         FileUtils.copyURLToFile(new Slave.JnlpJar(\"slave.jar\").getURL(), slaveJar);",
          "112:                 \"-jar\", slaveJar.getAbsolutePath(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc8000cc1e36399595883858c3aae8f135177d49",
      "candidate_info": {
        "commit_hash": "dc8000cc1e36399595883858c3aae8f135177d49",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/dc8000cc1e36399595883858c3aae8f135177d49",
        "files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/java/jenkins/model/Jenkins.java",
          "pom.xml"
        ],
        "message": "Upgrade Remoting to 3.11 (#2988)\n\n* Use ClassFilter.appendDefaultFilter.\n\n* FindBugs\n\n* Update Jenkins Remoting to 3.11, fix reported FindBugs issues",
        "before_after_code_files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java": [
          "File: core/src/main/java/hudson/slaves/SlaveComputer.java -> core/src/main/java/hudson/slaves/SlaveComputer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:         }",
          "455:         @Override public Integer call() {",
          "456:             Channel c = Channel.current();",
          "457:             return resource ? c.resourceLoadingCount.get() : c.classLoadingCount.get();",
          "458:         }",
          "459:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:             if (c == null) {",
          "458:                 return -1;",
          "459:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "471:         }",
          "472:         @Override public Long call() {",
          "473:             Channel c = Channel.current();",
          "474:             return resource ? c.resourceLoadingTime.get() : c.classLoadingTime.get();",
          "475:         }",
          "476:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477:             if (c == null) {",
          "478:                 return Long.valueOf(-1);",
          "479:             }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "251: import java.io.IOException;",
          "252: import java.io.InputStream;",
          "253: import java.io.PrintWriter;",
          "255: import java.net.BindException;",
          "256: import java.net.HttpURLConnection;",
          "257: import java.net.URL;",
          "",
          "[Removed Lines]",
          "254: import java.lang.reflect.Field;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:             adjuncts = new AdjunctManager(servletContext, pluginManager.uberClassLoader,\"adjuncts/\"+SESSION_HASH, TimeUnit2.DAYS.toMillis(365));",
          "926:             }",
          "",
          "[Removed Lines]",
          "907:             if (System.getProperty(ClassFilter.FILE_OVERRIDE_LOCATION_PROPERTY) == null) { // not using SystemProperties since ClassFilter does not either",
          "908:                 try {",
          "909:                     Field blacklistPatternsF = ClassFilter.DEFAULT.getClass().getDeclaredField(\"blacklistPatterns\");",
          "910:                     blacklistPatternsF.setAccessible(true);",
          "911:                     Object[] blacklistPatternsA = (Object[]) blacklistPatternsF.get(ClassFilter.DEFAULT);",
          "912:                     boolean found = false;",
          "913:                     for (int i = 0; i < blacklistPatternsA.length; i++) {",
          "914:                         if (blacklistPatternsA[i] instanceof Pattern) {",
          "915:                             blacklistPatternsA[i] = Pattern.compile(\"(\" + blacklistPatternsA[i] + \")|(java[.]security[.]SignedObject)\");",
          "916:                             found = true;",
          "917:                             break;",
          "918:                         }",
          "919:                     }",
          "920:                     if (!found) {",
          "921:                         throw new Error(\"no Pattern found among \" + Arrays.toString(blacklistPatternsA));",
          "922:                     }",
          "923:                 } catch (NoSuchFieldException | IllegalAccessException x) {",
          "924:                     throw new Error(\"Unexpected ClassFilter implementation in bundled remoting.jar: \" + x, x);",
          "925:                 }",
          "",
          "[Added Lines]",
          "905:             try {",
          "906:                 ClassFilter.appendDefaultFilter(Pattern.compile(\"java[.]security[.]SignedObject\")); // TODO move to standard blacklist",
          "907:             } catch (ClassFilter.ClassFilterException ex) {",
          "908:                 throw new IOException(\"Remoting library rejected the java[.]security[.]SignedObject blacklist pattern\", ex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43435096fc28302fe217f5af7357935d6e0afc09",
      "candidate_info": {
        "commit_hash": "43435096fc28302fe217f5af7357935d6e0afc09",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/43435096fc28302fe217f5af7357935d6e0afc09",
        "files": [
          "core/src/main/java/jenkins/model/Jenkins.java"
        ],
        "message": "Reminder to switch to SystemProperties.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:             adjuncts = new AdjunctManager(servletContext, pluginManager.uberClassLoader,\"adjuncts/\"+SESSION_HASH, TimeUnit2.DAYS.toMillis(365));",
          "820:                 try {",
          "821:                     Field blacklistPatternsF = ClassFilter.DEFAULT.getClass().getDeclaredField(\"blacklistPatterns\");",
          "822:                     blacklistPatternsF.setAccessible(true);",
          "",
          "[Removed Lines]",
          "819:             if (System.getProperty(ClassFilter.FILE_OVERRIDE_LOCATION_PROPERTY) == null) {",
          "",
          "[Added Lines]",
          "819:             if (System.getProperty(ClassFilter.FILE_OVERRIDE_LOCATION_PROPERTY) == null) { // TODO 2.4+ SystemProperties",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fb7172c31bcafc0b033fe58e4e6e3f4c886f8a8",
      "candidate_info": {
        "commit_hash": "4fb7172c31bcafc0b033fe58e4e6e3f4c886f8a8",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/4fb7172c31bcafc0b033fe58e4e6e3f4c886f8a8",
        "files": [
          "core/src/main/java/jenkins/model/Jenkins.java"
        ],
        "message": "Safer to wrap patterns in new groups.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "830:                         boolean found = false;",
          "831:                         for (int i = 0; i < blacklistPatternsA.length; i++) {",
          "832:                             if (blacklistPatternsA[i] instanceof Pattern) {",
          "834:                                 found = true;",
          "835:                                 break;",
          "836:                             }",
          "",
          "[Removed Lines]",
          "833:                                 blacklistPatternsA[i] = Pattern.compile(blacklistPatternsA[i] + \"|java[.]security[.]SignedObject\");",
          "",
          "[Added Lines]",
          "833:                                 blacklistPatternsA[i] = Pattern.compile(\"(\" + blacklistPatternsA[i] + \")|(java[.]security[.]SignedObject)\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}