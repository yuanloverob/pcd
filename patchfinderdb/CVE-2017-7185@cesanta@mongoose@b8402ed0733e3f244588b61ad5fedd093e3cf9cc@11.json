{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70b5f4130ed57c3f33b2bf689c3d5cc59aab61f7",
      "candidate_info": {
        "commit_hash": "70b5f4130ed57c3f33b2bf689c3d5cc59aab61f7",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/70b5f4130ed57c3f33b2bf689c3d5cc59aab61f7",
        "files": [
          "mongoose.c"
        ],
        "message": "Add http post example\n\nPUBLISHED_FROM=94f830a5fa4b806fb2cf60c93a9e8744022ff8d7",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5826:     mbuf_remove(io, req_len);",
          "5827:   }",
          "5830: }",
          "5832: #define CONTENT_DISPOSITION \"Content-Disposition: \"",
          "",
          "[Removed Lines]",
          "5828: exit_mp:",
          "5829:   ;",
          "",
          "[Added Lines]",
          "5828: exit_mp:;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7189:             if (*p == '\\0' || *p == DIRSEP",
          "7190: #ifdef _WIN32",
          "7194: #endif",
          "7195:                 ) {",
          "7196:               ok = 0;",
          "",
          "[Removed Lines]",
          "7192:                 ||",
          "",
          "[Added Lines]",
          "7191:                 || *p == '/'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7732:     mg_basic_auth_header(user, pass, &auth);",
          "7733:   }",
          "7735:   mg_printf(nc, \"%s %s HTTP/1.1\\r\\nHost: %s\\r\\nContent-Length: %\" SIZE_T_FMT",
          "7736:                 \"\\r\\n%.*s%s\\r\\n%s\",",
          "7743:   mbuf_free(&auth);",
          "7744:   MG_FREE(user);",
          "",
          "[Removed Lines]",
          "7737:             post_data == NULL ? \"GET\" : \"POST\", path, addr,",
          "7738:             post_data == NULL ? 0 : strlen(post_data), (int) auth.len,",
          "7739:             (auth.buf == NULL ? \"\" : auth.buf),",
          "7740:             extra_headers == NULL ? \"\" : extra_headers,",
          "7741:             post_data == NULL ? \"\" : post_data);",
          "",
          "[Added Lines]",
          "7733:   if (post_data == NULL) post_data = \"\";",
          "7734:   if (extra_headers == NULL) extra_headers = \"\";",
          "7738:             post_data[0] == '\\0' ? \"GET\" : \"POST\", path, addr,",
          "7739:             strlen(post_data), (int) auth.len,",
          "7740:             (auth.buf == NULL ? \"\" : auth.buf), extra_headers, post_data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "104106b9cff5692a49849f405ec095427403a81a",
      "candidate_info": {
        "commit_hash": "104106b9cff5692a49849f405ec095427403a81a",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/104106b9cff5692a49849f405ec095427403a81a",
        "files": [
          "mongoose.c"
        ],
        "message": "Invoke tcp_accepted() on the listening pcb\n\nAs required by the LWIP API\n\nPUBLISHED_FROM=7bfc6d816aa69f8fdd7592ade48b2d52e2d4991a",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14481: }",
          "14483: static err_t mg_lwip_accept_cb(void *arg, struct tcp_pcb *newtpcb, err_t err) {",
          "14486:        IPADDR_NTOA(ipX_2_ip(&newtpcb->remote_ip)), newtpcb->remote_port));",
          "14488:   if (nc == NULL) {",
          "14489:     tcp_abort(newtpcb);",
          "14490:     return ERR_ABRT;",
          "14491:   }",
          "14493:   cs->lc = lc;",
          "14494:   cs->pcb.tcp = newtpcb;",
          "",
          "[Removed Lines]",
          "14484:   struct mg_connection *lc = (struct mg_connection *) arg;",
          "14485:   DBG((\"%p conn %p from %s:%u\", lc, newtpcb,",
          "14487:   struct mg_connection *nc = mg_if_accept_new_conn(lc);",
          "14492:   struct mg_lwip_conn_state *cs = (struct mg_lwip_conn_state *) nc->sock;",
          "",
          "[Added Lines]",
          "14484:   struct mg_connection *lc = (struct mg_connection *) arg, *nc;",
          "14485:   struct mg_lwip_conn_state *lcs, *cs;",
          "14486:   struct tcp_pcb_listen *lpcb;",
          "14487:   LOG(LL_INFO,",
          "14488:       (\"%p conn %p from %s:%u\", lc, newtpcb,",
          "14490:   if (lc == NULL) {",
          "14491:     tcp_abort(newtpcb);",
          "14492:     return ERR_ABRT;",
          "14493:   }",
          "14494:   lcs = (struct mg_lwip_conn_state *) lc->sock;",
          "14495:   lpcb = (struct tcp_pcb_listen *) lcs->pcb.tcp;",
          "14496: #if TCP_LISTEN_BACKLOG",
          "14497:   tcp_accepted(lpcb);",
          "14498: #endif",
          "14499:   nc = mg_if_accept_new_conn(lc);",
          "14504:   cs = (struct mg_lwip_conn_state *) nc->sock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14503: #endif",
          "14504:   mg_lwip_post_signal(MG_SIG_ACCEPT, nc);",
          "14505:   (void) err;",
          "14506:   return ERR_OK;",
          "14507: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14518:   (void) lpcb;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06670d340196c56f8305ed9588eb50632b980e50",
      "candidate_info": {
        "commit_hash": "06670d340196c56f8305ed9588eb50632b980e50",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/06670d340196c56f8305ed9588eb50632b980e50",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix double-removal of send_mbuf data with SSL on\n\nOther minor fixes.\nAlso decrease idle poll interval to 100 ms, as a workaround for some cases of incorrect next poll delay computation.\n\nAdded HW tests for SSL fetches.\n\nFixes cesanta/mongoose-os#262\n\nPUBLISHED_FROM=4d19f845768b4b3b990d25959d4211972368d7fc",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2461: }",
          "2463: void mg_if_sent_cb(struct mg_connection *nc, int num_sent) {",
          "2464: #if !defined(NO_LIBC) && MG_ENABLE_HEXDUMP",
          "2465:   if (nc->mgr && nc->mgr->hexdump_file != NULL) {",
          "2466:     char *buf = nc->send_mbuf.buf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2464:   DBG((\"%p %d\", nc, num_sent));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5508:   if (pd->file.type == DATA_FILE) {",
          "5509:     struct mbuf *io = &nc->send_mbuf;",
          "5512:     }",
          "5515:       to_read = left;",
          "5516:     }",
          "5524:     } else {",
          "5525:       if (!pd->file.keepalive) nc->flags |= MG_F_SEND_AND_CLOSE;",
          "5526:       mg_http_free_proto_data_file(&pd->file);",
          "5527:     }",
          "",
          "[Removed Lines]",
          "5510:     if (io->len < sizeof(buf)) {",
          "5511:       to_read = sizeof(buf) - io->len;",
          "5514:     if (left > 0 && to_read > left) {",
          "5518:     if (to_read == 0) {",
          "5520:     } else if (pd->file.sent < pd->file.cl &&",
          "5521:                (n = mg_fread(buf, 1, to_read, pd->file.fp)) > 0) {",
          "5522:       mg_send(nc, buf, n);",
          "5523:       pd->file.sent += n;",
          "",
          "[Added Lines]",
          "5511:     if (io->len >= MG_MAX_HTTP_SEND_MBUF) {",
          "5512:       to_read = 0;",
          "5513:     } else {",
          "5514:       to_read = MG_MAX_HTTP_SEND_MBUF - io->len;",
          "5516:     if (to_read > left) {",
          "5519:     if (to_read > 0) {",
          "5520:       n = mg_fread(buf, 1, to_read, pd->file.fp);",
          "5521:       if (n > 0) {",
          "5522:         mg_send(nc, buf, n);",
          "5523:         pd->file.sent += n;",
          "5524:         DBG((\"%p sent %d (total %d)\", nc, (int) n, (int) pd->file.sent));",
          "5525:       }",
          "5528:     }",
          "5529:     if (pd->file.sent >= pd->file.cl) {",
          "5530:       LOG(LL_DEBUG, (\"%p done, %d bytes\", nc, (int) pd->file.sent));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "14259: static err_t mg_lwip_tcp_sent_cb(void *arg, struct tcp_pcb *tpcb,",
          "14260:                                  u16_t num_sent) {",
          "14261:   struct mg_connection *nc = (struct mg_connection *) arg;",
          "14263:   if (nc == NULL) return ERR_OK;",
          "14264:   if ((nc->flags & MG_F_SEND_AND_CLOSE) && !(nc->flags & MG_F_WANT_WRITE) &&",
          "14266:     mg_lwip_post_signal(MG_SIG_CLOSE_CONN, nc);",
          "14267:   }",
          "14268:   return ERR_OK;",
          "",
          "[Removed Lines]",
          "14262:   DBG((\"%p %p %u\", nc, tpcb, num_sent));",
          "14265:       nc->send_mbuf.len == 0 && tpcb->unacked == 0) {",
          "",
          "[Added Lines]",
          "14268:   DBG((\"%p %p %u %u %u\", nc, tpcb, num_sent, tpcb->unsent, tpcb->unacked));",
          "14271:       nc->send_mbuf.len == 0 && tpcb->unsent == 0 && tpcb->unacked == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "14530:   struct mg_connection *nc = ctx->nc;",
          "14531:   struct mg_lwip_conn_state *cs = (struct mg_lwip_conn_state *) nc->sock;",
          "14532:   struct tcp_pcb *tpcb = cs->pcb.tcp;",
          "14534:   if (len == 0) {",
          "14535:     DBG((\"%p no buf avail %u %u %u %p %p\", tpcb, tpcb->acked, tpcb->snd_buf,",
          "14536:          tpcb->snd_queuelen, tpcb->unsent, tpcb->unacked));",
          "",
          "[Removed Lines]",
          "14533:   uint16_t len = MIN(tpcb->mss, MIN(ctx->len, tpcb->snd_buf));",
          "",
          "[Added Lines]",
          "14539:   size_t len = MIN(tpcb->mss, MIN(ctx->len, tpcb->snd_buf));",
          "14540:   size_t unsent, unacked;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "14538:     ctx->ret = 0;",
          "14539:     return;",
          "14540:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14548:   unsent = (tpcb->unsent != NULL ? tpcb->unsent->len : 0);",
          "14549:   unacked = (tpcb->unacked != NULL ? tpcb->unacked->len : 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "14547: #if CS_PLATFORM == CS_P_ESP8266",
          "14549:     ctx->ret = 0;",
          "14550:     return;",
          "14551:   }",
          "14555: #endif",
          "14556:   cs->err = tcp_write(tpcb, ctx->data, len, TCP_WRITE_FLAG_COPY);",
          "14558:   if (cs->err != ERR_OK) {",
          "",
          "[Removed Lines]",
          "14548:   if (tpcb->unacked != NULL) {",
          "14552:   if (tpcb->unsent != NULL) {",
          "14553:     len = MIN(len, (TCP_MSS - tpcb->unsent->len));",
          "14554:   }",
          "14557:   DBG((\"%p tcp_write %u = %d\", tpcb, len, cs->err));",
          "",
          "[Added Lines]",
          "14557:   if (unacked > 0) {",
          "14561:   len = MIN(len, (TCP_MSS - unsent));",
          "14564:   unsent = (tpcb->unsent != NULL ? tpcb->unsent->len : 0);",
          "14565:   unacked = (tpcb->unacked != NULL ? tpcb->unacked->len : 0);",
          "14566:   DBG((\"%p tcp_write %u = %d, %u %u\", tpcb, len, cs->err, unsent, unacked));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "14984:       }",
          "14985:       num_timers++;",
          "14986:     }",
          "14988:       int can_send = 0;",
          "14990:       if (nc->flags & MG_F_UDP) {",
          "",
          "[Removed Lines]",
          "14987:     if (nc->send_mbuf.len > 0) {",
          "",
          "[Added Lines]",
          "14996:     if (nc->send_mbuf.len > 0",
          "14997: #if MG_ENABLE_SSL",
          "14998:         || (nc->flags & MG_F_WANT_WRITE)",
          "14999: #endif",
          "15000:             ) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "15097:     len = MIN(MG_LWIP_SSL_IO_SIZE, nc->send_mbuf.len);",
          "15098:   }",
          "15099:   int ret = mg_ssl_if_write(nc, nc->send_mbuf.buf, len);",
          "15101:   if (ret > 0) {",
          "15102:     mg_if_sent_cb(nc, ret);",
          "15105:     cs->last_ssl_write_size = 0;",
          "15106:   } else if (ret < 0) {",
          "",
          "[Removed Lines]",
          "15100:   DBG((\"%p SSL_write %u = %d, %d\", nc, len, ret));",
          "15103:     mbuf_remove(&nc->send_mbuf, ret);",
          "15104:     mbuf_trim(&nc->send_mbuf);",
          "",
          "[Added Lines]",
          "15113:   DBG((\"%p SSL_write %u = %d\", nc, len, ret));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "15186:   struct mg_connection *nc = (struct mg_connection *) ctx;",
          "15187:   struct mg_lwip_conn_state *cs = (struct mg_lwip_conn_state *) nc->sock;",
          "15188:   int ret = mg_lwip_tcp_write(cs->nc, buf, len);",
          "15190:   if (ret == 0) ret = MBEDTLS_ERR_SSL_WANT_WRITE;",
          "15191:   return ret;",
          "15192: }",
          "",
          "[Removed Lines]",
          "15189:   LOG(LL_DEBUG, (\"%p %d -> %d\", nc, len, ret));",
          "",
          "[Added Lines]",
          "15201:   LOG(LL_DEBUG, (\"%p %d -> %d\", nc, len, ret));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "202300952ceab6d166990ba47dae880bedfad59d",
      "candidate_info": {
        "commit_hash": "202300952ceab6d166990ba47dae880bedfad59d",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/202300952ceab6d166990ba47dae880bedfad59d",
        "files": [
          "mongoose.h"
        ],
        "message": "CC3220: GPIO, sys_config and mgos_init support\n\n```\nUsing port /dev/ttyACM0\n[Aug 30 19:33:02.105]\n[Aug 30 19:33:02.114] cc32xx_init          c_no_libs 1.0 (20170830-163205/mos8@6587ffd6+)\n[Aug 30 19:33:02.123] cc32xx_init          Mongoose OS 2017083016 (20170830-163205/mos8@6587ffd6+)\n[Aug 30 19:33:02.130] cc32xx_init          RAM: 253588 total, 240044 free\n[Aug 30 19:33:04.430] cc32xx_start_nwp     NWP v3.4.0.0 started, host driver v2.0.1.19\n[Aug 30 19:33:04.437] mgos_vfs_dev_open    slfs_container ({\"prefix\": \"spiffs.img.0\"}) -> 20005a64\n[Aug 30 19:33:04.450] cc32xx_vfs_dev_slfs_ 20005a64 spiffs.img.0.0 262144 0xfffffffffffffffe\n[Aug 30 19:33:04.457] mgos_vfs_mount       Mount SPIFFS @ / (dev 20005a64, opts ) -> 20005a74\n[Aug 30 19:33:06.102] mgos_vfs_mount       /: size 233681, used: 4016, free: 229665\n[Aug 30 19:33:06.108] mgos_vfs_mount       Mount SLFS @ /slfs (dev 0, opts ) -> 20005ed4\n[Aug 30 19:33:06.114] mgos_vfs_mount       /slfs: size 0, used: 0, free: 0\n[Aug 30 19:33:06.718] mgos_sys_config_init MAC: 04A316459442\n[Aug 30 19:33:06.720] mgos_sys_config_init WDT: 30 seconds\n[Aug 30 19:33:06.724] Hello, world!\n[Aug 30 19:33:06.728] mgos_init            Init done, RAM: 253588 total, 236544 free, 235864 min free\n```\n\nPUBLISHED_FROM=7e83c9ddcc642bd324a40e125d6636ece824fb18",
        "before_after_code_files": [
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226: #define SL_ERROR_FS_NOT_SUPPORTED SL_FS_ERR_NOT_SUPPORTED",
          "1227: #define SL_ERROR_FS_WRONG_FILE_NAME SL_FS_WRONG_FILE_NAME",
          "1228: #define SL_ERROR_FS_INVALID_HANDLE SL_FS_ERR_INVALID_HANDLE",
          "1229: #define SL_SOCKET_FD_ZERO SL_FD_ZERO",
          "1230: #define SL_SOCKET_FD_SET SL_FD_SET",
          "1231: #define SL_SOCKET_FD_ISSET SL_FD_ISSET",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1229: #define SL_NETCFG_MAC_ADDRESS_GET SL_MAC_ADDRESS_GET",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a3b433849b2088aaceeac6d258b3ade029ff9e3",
      "candidate_info": {
        "commit_hash": "3a3b433849b2088aaceeac6d258b3ade029ff9e3",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/3a3b433849b2088aaceeac6d258b3ade029ff9e3",
        "files": [
          "mongoose.c"
        ],
        "message": "Don't ignore userdata in mg_bind\n\nPUBLISHED_FROM=0ffcd770535efa66ff1b6f9201f2caf832bd5055",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2783:   struct mg_add_sock_opts add_sock_opts;",
          "2784:   char host[MG_MAX_HOST_LEN];",
          "2786:   MG_COPY_COMMON_CONNECTION_OPTIONS(&add_sock_opts, &opts);",
          "2788: #if MG_ENABLE_TUN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2786: #if MG_ENABLE_CALLBACK_USERDATA",
          "2787:   opts.user_data = user_data;",
          "2788: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2846:   }",
          "2847:   mg_add_conn(nc->mgr, nc);",
          "2852:   return nc;",
          "2853: }",
          "",
          "[Removed Lines]",
          "2849: #if MG_ENABLE_CALLBACK_USERDATA",
          "2850:   (void) user_data;",
          "2851: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}