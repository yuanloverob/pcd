{
  "cve_id": "CVE-2014-9620",
  "cve_desc": "The ELF parser in file 5.08 through 5.21 allows remote attackers to cause a denial of service via a large number of notes.",
  "repo": "file/file",
  "patch_hash": "ce90e05774dd77d86cfc8dfa6da57b32816841c4",
  "patch_info": {
    "commit_hash": "ce90e05774dd77d86cfc8dfa6da57b32816841c4",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/ce90e05774dd77d86cfc8dfa6da57b32816841c4",
    "files": [
      "ChangeLog",
      "doc/file.man",
      "doc/libmagic.man",
      "src/apprentice.c",
      "src/elfclass.h",
      "src/file.c",
      "src/file.h",
      "src/file_opts.h",
      "src/magic.c",
      "src/magic.h.in",
      "src/readelf.c"
    ],
    "message": "- Add a limit to the number of ELF notes processed (Suggested by Alexander   Cherepanov) - Restructure ELF note printing so that we don't print the same message   multiple times on repeated notes of the same kind.",
    "before_after_code_files": [
      "src/apprentice.c||src/apprentice.c",
      "src/elfclass.h||src/elfclass.h",
      "src/file.c||src/file.c",
      "src/file.h||src/file.h",
      "src/file_opts.h||src/file_opts.h",
      "src/magic.c||src/magic.c",
      "src/magic.h.in||src/magic.h.in",
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/apprentice.c||src/apprentice.c": [
      "File: src/apprentice.c -> src/apprentice.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.226 2014/11/28 02:35:05 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.227 2014/11/28 02:46:39 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "528:  ms->name_max = FILE_NAME_MAX;",
      "529:  ms->elf_shnum_max = FILE_ELF_SHNUM_MAX;",
      "530:  ms->elf_phnum_max = FILE_ELF_PHNUM_MAX;",
      "531:  return ms;",
      "532: free:",
      "533:  free(ms);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "531:  ms->elf_notes_max = FILE_ELF_NOTES_MAX;",
      "",
      "---------------"
    ],
    "src/elfclass.h||src/elfclass.h": [
      "File: src/elfclass.h -> src/elfclass.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  swap = (u.c[sizeof(int32_t) - 1] + 1) != elfhdr.e_ident[EI_DATA];",
      "34:  type = elf_getu16(swap, elfhdr.e_type);",
      "35:  switch (type) {",
      "36: #ifdef ELFCORE",
      "37:  case ET_CORE:",
      "38:   phnum = elf_getu16(swap, elfhdr.e_phnum);",
      "39:   if (phnum > ms->elf_phnum_max)",
      "41:   flags |= FLAGS_IS_CORE;",
      "42:   if (dophn_core(ms, clazz, swap, fd,",
      "43:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
      "44:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
      "46:    return -1;",
      "47:   break;",
      "48: #endif",
      "",
      "[Removed Lines]",
      "40:    return toomany(ms, \"program\", phnum);",
      "45:       fsize, &flags) == -1)",
      "",
      "[Added Lines]",
      "35:  notecount = ms->elf_notes_max;",
      "41:    return toomany(ms, \"program headers\", phnum);",
      "46:       fsize, &flags, &notecount) == -1)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57:   if (dophn_exec(ms, clazz, swap, fd,",
      "58:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
      "59:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
      "61:    return -1;",
      "63:  case ET_REL:",
      "64:   shnum = elf_getu16(swap, elfhdr.e_shnum);",
      "65:   if (shnum > ms->elf_shnum_max)",
      "67:   if (doshn(ms, clazz, swap, fd,",
      "68:       (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,",
      "69:       (size_t)elf_getu16(swap, elfhdr.e_shentsize),",
      "72:    return -1;",
      "73:   break;",
      "75:  default:",
      "76:   break;",
      "77:  }",
      "78:  return 1;",
      "",
      "[Removed Lines]",
      "60:       fsize, &flags, shnum) == -1)",
      "66:    return toomany(ms, \"section\", shnum);",
      "70:       fsize, &flags, elf_getu16(swap, elfhdr.e_machine),",
      "71:       (int)elf_getu16(swap, elfhdr.e_shstrndx)) == -1)",
      "",
      "[Added Lines]",
      "61:       fsize, shnum, &flags, &notecount) == -1)",
      "67:    return toomany(ms, \"section headers\", shnum);",
      "71:       fsize, elf_getu16(swap, elfhdr.e_machine),",
      "72:       (int)elf_getu16(swap, elfhdr.e_shstrndx),",
      "73:       &flags, &notecount) == -1)",
      "80:  if (notecount == 0)",
      "81:   return toomany(ms, \"notes\", ms->elf_notes_max);",
      "",
      "---------------"
    ],
    "src/file.c||src/file.c": [
      "File: src/file.c -> src/file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: file.c,v 1.158 2014/11/28 02:35:05 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: file.c,v 1.159 2014/11/28 02:46:39 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:  { \"name\", MAGIC_PARAM_NAME_MAX, 0 },",
      "126:  { \"elf_phnum\", MAGIC_PARAM_ELF_PHNUM_MAX, 0 },",
      "127:  { \"elf_shnum\", MAGIC_PARAM_ELF_SHNUM_MAX, 0 },",
      "128: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:  { \"elf_notes\", MAGIC_PARAM_ELF_NOTES_MAX, 0 },",
      "",
      "---------------"
    ],
    "src/file.h||src/file.h": [
      "File: src/file.h -> src/file.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "407:  uint16_t name_max;",
      "408:  uint16_t elf_shnum_max;",
      "409:  uint16_t elf_phnum_max;",
      "410: #define FILE_INDIR_MAX   15",
      "411: #define FILE_NAME_MAX   30",
      "412: #define FILE_ELF_SHNUM_MAX  32768",
      "413: #define FILE_ELF_PHNUM_MAX  128",
      "414: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "410:  uint16_t elf_notes_max;",
      "415: #define FILE_ELF_NOTES_MAX  256",
      "",
      "---------------"
    ],
    "src/file_opts.h||src/file_opts.h": [
      "File: src/file_opts.h -> src/file_opts.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: OPT('P', \"parameter\", 0, \"            set file engine parameter limits\\n\"",
      "47:     \"                               indir        15 recursion limit for indirection\\n\"",
      "48:     \"                               name         30 use limit for name/use magic\\n\"",
      "49:     \"                               elf_phnum   128 max ELF prog sections processed\\n\"",
      "50:     \"                               elf_shnum 32768 max ELF sections processed\\n\")",
      "51: OPT('r', \"raw\", 0, \"                  don't translate unprintable chars to \\\\ooo\\n\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:     \"                               elf_notes   256 max ELF notes processed\\n\"",
      "",
      "---------------"
    ],
    "src/magic.c||src/magic.c": [
      "File: src/magic.c -> src/magic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #include \"file.h\"",
      "35: #ifndef lint",
      "39: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.89 2014/11/28 02:46:39 christos Exp $\")",
      "",
      "[Added Lines]",
      "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.90 2014/12/04 15:56:46 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "554:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
      "555:   ms->elf_shnum_max = *(const size_t *)val;",
      "556:   return 0;",
      "557:  default:",
      "558:   errno = EINVAL;",
      "559:   return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "557:  case MAGIC_PARAM_ELF_NOTES_MAX:",
      "558:   ms->elf_notes_max = *(const size_t *)val;",
      "559:   return 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "576:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
      "578:   return 0;",
      "579:  default:",
      "580:   errno = EINVAL;",
      "581:   return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "582:  case MAGIC_PARAM_ELF_NOTES_MAX:",
      "584:   return 0;",
      "",
      "---------------"
    ],
    "src/magic.h.in||src/magic.h.in": [
      "File: src/magic.h.in -> src/magic.h.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "107: #define MAGIC_PARAM_NAME_MAX  1",
      "108: #define MAGIC_PARAM_ELF_PHNUM_MAX 2",
      "109: #define MAGIC_PARAM_ELF_SHNUM_MAX 3",
      "111: int magic_setparam(magic_t, int, const void *);",
      "112: int magic_getparam(magic_t, int, void *);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110: #define MAGIC_PARAM_ELF_NOTES_MAX 4",
      "",
      "---------------"
    ],
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.114 2014/12/11 14:19:36 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.115 2014/12/16 20:53:05 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44: #ifdef ELFCORE",
      "45: private int dophn_core(struct magic_set *, int, int, int, off_t, int, size_t,",
      "47: #endif",
      "48: private int dophn_exec(struct magic_set *, int, int, int, off_t, int, size_t,",
      "50: private int doshn(struct magic_set *, int, int, int, off_t, int, size_t,",
      "52: private size_t donote(struct magic_set *, void *, size_t, size_t, int,",
      "55: #define ELF_ALIGN(a) ((((a) + align - 1) / align) * align)",
      "",
      "[Removed Lines]",
      "46:     off_t, int *);",
      "49:     off_t, int *, int);",
      "51:     off_t, int *, int, int);",
      "53:     int, size_t, int *);",
      "",
      "[Added Lines]",
      "46:     off_t, int *, uint16_t *);",
      "49:     off_t, int, int *, uint16_t *);",
      "51:     off_t, int, int, int *, uint16_t *);",
      "53:     int, size_t, int *, uint16_t *);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "67: private int",
      "68: toomany(struct magic_set *ms, const char *name, uint16_t num)",
      "69: {",
      "71:      ) == -1)",
      "72:   return -1;",
      "73:  return 0;",
      "",
      "[Removed Lines]",
      "70:  if (file_printf(ms, \", too many %s header sections (%u)\", name, num",
      "",
      "[Added Lines]",
      "70:  if (file_printf(ms, \", too many %s (%u)\", name, num",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "293:  \"NetBSD\",",
      "294: };",
      "302: private int",
      "303: dophn_core(struct magic_set *ms, int clazz, int swap, int fd, off_t off,",
      "305: {",
      "306:  Elf32_Phdr ph32;",
      "307:  Elf64_Phdr ph64;",
      "",
      "[Removed Lines]",
      "296: #define FLAGS_DID_CORE  0x01",
      "297: #define FLAGS_DID_NOTE  0x02",
      "298: #define FLAGS_DID_BUILD_ID 0x04",
      "299: #define FLAGS_DID_CORE_STYLE 0x08",
      "300: #define FLAGS_IS_CORE  0x10",
      "304:     int num, size_t size, off_t fsize, int *flags)",
      "",
      "[Added Lines]",
      "296: #define FLAGS_DID_CORE   0x001",
      "297: #define FLAGS_DID_OS_NOTE  0x002",
      "298: #define FLAGS_DID_BUILD_ID  0x004",
      "299: #define FLAGS_DID_CORE_STYLE  0x008",
      "300: #define FLAGS_DID_NETBSD_PAX  0x010",
      "301: #define FLAGS_DID_NETBSD_MARCH  0x020",
      "302: #define FLAGS_DID_NETBSD_CMODEL  0x040",
      "303: #define FLAGS_DID_NETBSD_UNKNOWN 0x080",
      "304: #define FLAGS_IS_CORE   0x100",
      "308:     int num, size_t size, off_t fsize, int *flags, uint16_t *notecount)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "347:    if (offset >= (size_t)bufsize)",
      "348:     break;",
      "349:    offset = donote(ms, nbuf, offset, (size_t)bufsize,",
      "351:    if (offset == 0)",
      "352:     break;",
      "",
      "[Removed Lines]",
      "350:        clazz, swap, 4, flags);",
      "",
      "[Added Lines]",
      "354:        clazz, swap, 4, flags, notecount);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "477:  }",
      "478: }",
      "483: {",
      "542:  }",
      "548:  if (namesz == 5 && strcmp((char *)&nbuf[noff], \"SuSE\") == 0 &&",
      "550:      file_printf(ms, \", for SuSE %d.%d\", nbuf[doff], nbuf[doff + 1]);",
      "551:  }",
      "552:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "554:   uint32_t desc[4];",
      "555:   (void)memcpy(desc, &nbuf[doff], sizeof(desc));",
      "557:   if (file_printf(ms, \", for GNU/\") == -1)",
      "559:   switch (elf_getu32(swap, desc[0])) {",
      "560:   case GNU_OS_LINUX:",
      "561:    if (file_printf(ms, \"Linux\") == -1)",
      "563:    break;",
      "564:   case GNU_OS_HURD:",
      "565:    if (file_printf(ms, \"Hurd\") == -1)",
      "567:    break;",
      "568:   case GNU_OS_SOLARIS:",
      "569:    if (file_printf(ms, \"Solaris\") == -1)",
      "571:    break;",
      "572:   case GNU_OS_KFREEBSD:",
      "573:    if (file_printf(ms, \"kFreeBSD\") == -1)",
      "575:    break;",
      "576:   case GNU_OS_KNETBSD:",
      "577:    if (file_printf(ms, \"kNetBSD\") == -1)",
      "579:    break;",
      "580:   default:",
      "581:    if (file_printf(ms, \"<unknown>\") == -1)",
      "583:   }",
      "584:   if (file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),",
      "585:       elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])) == -1)",
      "589:  }",
      "603:  }",
      "605:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"PaX\") == 0 &&",
      "607:   static const char *pax[] = {",
      "608:       \"+mprotect\",",
      "609:       \"-mprotect\",",
      "",
      "[Removed Lines]",
      "480: private size_t",
      "481: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
      "482:     int clazz, int swap, size_t align, int *flags)",
      "484:  Elf32_Nhdr nh32;",
      "485:  Elf64_Nhdr nh64;",
      "486:  size_t noff, doff;",
      "487: #ifdef ELFCORE",
      "488:  int os_style = -1;",
      "489: #endif",
      "490:  uint32_t namesz, descsz;",
      "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
      "492:  char sbuf[512];",
      "494:  if (xnh_sizeof + offset > size) {",
      "498:   return xnh_sizeof + offset;",
      "499:  }",
      "501:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
      "502:  offset += xnh_sizeof;",
      "504:  namesz = xnh_namesz;",
      "505:  descsz = xnh_descsz;",
      "506:  if ((namesz == 0) && (descsz == 0)) {",
      "510:   return (offset >= size) ? offset : size;",
      "511:  }",
      "513:  if (namesz & 0x80000000) {",
      "514:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
      "515:   (unsigned long)namesz);",
      "516:      return 0;",
      "517:  }",
      "519:  if (descsz & 0x80000000) {",
      "520:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
      "521:   (unsigned long)descsz);",
      "522:      return 0;",
      "523:  }",
      "526:  noff = offset;",
      "527:  doff = ELF_ALIGN(offset + namesz);",
      "529:  if (offset + namesz > size) {",
      "533:   return doff;",
      "534:  }",
      "536:  offset = ELF_ALIGN(doff + descsz);",
      "537:  if (doff + descsz > size) {",
      "541:   return (offset >= size) ? offset : size;",
      "544:  if ((*flags & (FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID)) ==",
      "545:      (FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID))",
      "546:   goto core;",
      "549:      xnh_type == NT_GNU_VERSION && descsz == 2) {",
      "553:      xnh_type == NT_GNU_VERSION && descsz == 16) {",
      "558:    return size;",
      "562:     return size;",
      "566:     return size;",
      "570:     return size;",
      "574:     return size;",
      "578:     return size;",
      "582:     return size;",
      "586:    return size;",
      "588:   return size;",
      "591:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "592:      xnh_type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {",
      "593:      uint8_t desc[20];",
      "594:      uint32_t i;",
      "595:      if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
      "596:   \"sha1\") == -1)",
      "597:       return size;",
      "598:      (void)memcpy(desc, &nbuf[doff], descsz);",
      "599:      for (i = 0; i < descsz; i++)",
      "600:   if (file_printf(ms, \"%02x\", desc[i]) == -1)",
      "601:       return size;",
      "606:      xnh_type == NT_NETBSD_PAX && descsz == 4) {",
      "",
      "[Added Lines]",
      "484: private int",
      "485: do_bid_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "486:     int swap __attribute__((__unused__)), uint32_t namesz, uint32_t descsz,",
      "487:     size_t noff, size_t doff, int *flags)",
      "489:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "490:      type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {",
      "491:   uint8_t desc[20];",
      "492:   uint32_t i;",
      "494:   if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
      "495:       \"sha1\") == -1)",
      "496:    return 1;",
      "497:   (void)memcpy(desc, &nbuf[doff], descsz);",
      "498:   for (i = 0; i < descsz; i++)",
      "499:       if (file_printf(ms, \"%02x\", desc[i]) == -1)",
      "500:    return 1;",
      "501:   return 1;",
      "503:  return 0;",
      "504: }",
      "506: private int",
      "507: do_os_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "508:     int swap, uint32_t namesz, uint32_t descsz,",
      "509:     size_t noff, size_t doff, int *flags)",
      "510: {",
      "512:      type == NT_GNU_VERSION && descsz == 2) {",
      "515:      return 1;",
      "519:      type == NT_GNU_VERSION && descsz == 16) {",
      "525:    return 1;",
      "529:     return 1;",
      "533:     return 1;",
      "537:     return 1;",
      "541:     return 1;",
      "545:     return 1;",
      "549:     return 1;",
      "553:    return 1;",
      "554:   return 1;",
      "557:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "558:       if (type == NT_NETBSD_VERSION && descsz == 4) {",
      "560:    do_note_netbsd_version(ms, swap, &nbuf[doff]);",
      "561:    return 1;",
      "562:   }",
      "563:  }",
      "565:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
      "566:       if (type == NT_FREEBSD_VERSION && descsz == 4) {",
      "568:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
      "569:    return 1;",
      "570:   }",
      "573:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
      "574:      type == NT_OPENBSD_VERSION && descsz == 4) {",
      "576:   if (file_printf(ms, \", for OpenBSD\") == -1)",
      "577:    return 1;",
      "579:   return 1;",
      "580:  }",
      "582:  if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&",
      "583:      type == NT_DRAGONFLY_VERSION && descsz == 4) {",
      "584:   uint32_t desc;",
      "586:   if (file_printf(ms, \", for DragonFly\") == -1)",
      "587:    return 1;",
      "588:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
      "589:   desc = elf_getu32(swap, desc);",
      "590:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
      "591:       desc / 10000 % 10, desc % 10000) == -1)",
      "592:    return 1;",
      "593:   return 1;",
      "594:  }",
      "595:  return 0;",
      "596: }",
      "598: private int",
      "599: do_pax_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "600:     int swap, uint32_t namesz, uint32_t descsz,",
      "601:     size_t noff, size_t doff, int *flags)",
      "602: {",
      "604:      type == NT_NETBSD_PAX && descsz == 4) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "616:   size_t i;",
      "617:   int did = 0;",
      "619:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
      "620:   desc = elf_getu32(swap, desc);",
      "622:   if (desc && file_printf(ms, \", PaX: \") == -1)",
      "625:   for (i = 0; i < __arraycount(pax); i++) {",
      "626:    if (((1 << i) & desc) == 0)",
      "627:     continue;",
      "628:    if (file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",",
      "629:        pax[i]) == -1)",
      "666:   }",
      "667:  }",
      "",
      "[Removed Lines]",
      "623:    return size;",
      "630:     return size;",
      "631:   }",
      "632:  }",
      "634:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "635:   switch (xnh_type) {",
      "636:   case NT_NETBSD_VERSION:",
      "637:    if (descsz == 4) {",
      "638:     do_note_netbsd_version(ms, swap, &nbuf[doff]);",
      "640:     return size;",
      "641:    }",
      "642:    break;",
      "643:   case NT_NETBSD_MARCH:",
      "644:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
      "645:        (const char *)&nbuf[doff]) == -1)",
      "646:     return size;",
      "647:    break;",
      "648:   case NT_NETBSD_CMODEL:",
      "649:    if (file_printf(ms, \", compiler model: %.*s\",",
      "650:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
      "651:     return size;",
      "652:    break;",
      "653:   default:",
      "654:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
      "655:     return size;",
      "656:    break;",
      "657:   }",
      "658:   return size;",
      "659:  }",
      "661:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
      "662:       if (xnh_type == NT_FREEBSD_VERSION && descsz == 4) {",
      "663:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
      "665:    return size;",
      "669:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
      "670:      xnh_type == NT_OPENBSD_VERSION && descsz == 4) {",
      "671:   if (file_printf(ms, \", for OpenBSD\") == -1)",
      "672:    return size;",
      "675:   return size;",
      "676:  }",
      "678:  if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&",
      "679:      xnh_type == NT_DRAGONFLY_VERSION && descsz == 4) {",
      "680:   uint32_t desc;",
      "681:   if (file_printf(ms, \", for DragonFly\") == -1)",
      "682:    return size;",
      "683:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
      "684:   desc = elf_getu32(swap, desc);",
      "685:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
      "686:       desc / 10000 % 10, desc % 10000) == -1)",
      "687:    return size;",
      "689:   return size;",
      "690:  }",
      "692: core:",
      "",
      "[Added Lines]",
      "622:    return 1;",
      "629:     return 1;",
      "631:   return 1;",
      "633:  return 0;",
      "634: }",
      "636: private int",
      "637: do_core_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,",
      "638:     int swap, uint32_t namesz, uint32_t descsz,",
      "639:     size_t noff, size_t doff, int *flags, size_t size, int clazz)",
      "640: {",
      "641: #ifdef ELFCORE",
      "642:  int os_style = -1;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "718:   os_style = OS_STYLE_NETBSD;",
      "719:  }",
      "725:  if (os_style != -1 && (*flags & FLAGS_DID_CORE_STYLE) == 0) {",
      "726:   if (file_printf(ms, \", %s-style\", os_style_names[os_style])",
      "727:       == -1)",
      "730:  }",
      "732:  switch (os_style) {",
      "733:  case OS_STYLE_NETBSD:",
      "735:    uint32_t signo;",
      "",
      "[Removed Lines]",
      "721: #ifdef ELFCORE",
      "722:  if ((*flags & FLAGS_DID_CORE) != 0)",
      "723:   return size;",
      "728:    return size;",
      "734:   if (xnh_type == NT_NETBSD_CORE_PROCINFO) {",
      "",
      "[Added Lines]",
      "674:    return 1;",
      "680:   if (type == NT_NETBSD_CORE_PROCINFO) {",
      "681:    char sbuf[512];",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "741:    if (file_printf(ms, \", from '%.31s'\",",
      "742:        file_printable(sbuf, sizeof(sbuf),",
      "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
      "",
      "[Removed Lines]",
      "744:     return size;",
      "",
      "[Added Lines]",
      "691:     return 1;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "751:        sizeof(signo));",
      "752:    if (file_printf(ms, \" (signal %u)\",",
      "753:        elf_getu32(swap, signo)) == -1)",
      "757:   }",
      "758:   break;",
      "760:  default:",
      "762:    size_t i, j;",
      "763:    unsigned char c;",
      "",
      "[Removed Lines]",
      "754:     return size;",
      "756:    return size;",
      "761:   if (xnh_type == NT_PRPSINFO && *flags & FLAGS_IS_CORE) {",
      "",
      "[Added Lines]",
      "701:     return 1;",
      "703:    return 1;",
      "708:   if (type == NT_PRPSINFO && *flags & FLAGS_IS_CORE) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "830:      size_t no;",
      "831:      int adjust = 1;",
      "832:      if (prpsoffsets(k) >= prpsoffsets(i))",
      "",
      "[Removed Lines]",
      "829:     for (k = i + 1 ; k < NOFFSETS ; k++) {",
      "",
      "[Added Lines]",
      "776:     for (k = i + 1 ; k < NOFFSETS; k++) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "851:      cp--;",
      "852:     if (file_printf(ms, \", from '%.*s'\",",
      "853:         (int)(cp - cname), cname) == -1)",
      "858:    tryanother:",
      "859:     ;",
      "",
      "[Removed Lines]",
      "854:      return size;",
      "856:     return size;",
      "",
      "[Added Lines]",
      "801:      return 1;",
      "803:     return 1;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "862:   break;",
      "863:  }",
      "864: #endif",
      "865:  return offset;",
      "866: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "812:  return 0;",
      "813: }",
      "815: private size_t",
      "816: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
      "817:     int clazz, int swap, size_t align, int *flags, uint16_t *notecount)",
      "818: {",
      "819:  Elf32_Nhdr nh32;",
      "820:  Elf64_Nhdr nh64;",
      "821:  size_t noff, doff;",
      "822:  uint32_t namesz, descsz;",
      "823:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
      "825:  if (*notecount == 0)",
      "826:   return 0;",
      "827:  --*notecount;",
      "829:  if (xnh_sizeof + offset > size) {",
      "833:   return xnh_sizeof + offset;",
      "834:  }",
      "836:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
      "837:  offset += xnh_sizeof;",
      "839:  namesz = xnh_namesz;",
      "840:  descsz = xnh_descsz;",
      "841:  if ((namesz == 0) && (descsz == 0)) {",
      "845:   return (offset >= size) ? offset : size;",
      "846:  }",
      "848:  if (namesz & 0x80000000) {",
      "849:      (void)file_printf(ms, \", bad note name size 0x%lx\",",
      "850:   (unsigned long)namesz);",
      "851:      return 0;",
      "852:  }",
      "854:  if (descsz & 0x80000000) {",
      "855:      (void)file_printf(ms, \", bad note description size 0x%lx\",",
      "856:   (unsigned long)descsz);",
      "857:      return 0;",
      "858:  }",
      "860:  noff = offset;",
      "861:  doff = ELF_ALIGN(offset + namesz);",
      "863:  if (offset + namesz > size) {",
      "867:   return doff;",
      "868:  }",
      "870:  offset = ELF_ALIGN(doff + descsz);",
      "871:  if (doff + descsz > size) {",
      "875:   return (offset >= size) ? offset : size;",
      "876:  }",
      "878:  if ((*flags & FLAGS_DID_OS_NOTE) == 0) {",
      "879:   if (do_os_note(ms, nbuf, xnh_type, swap,",
      "880:       namesz, descsz, noff, doff, flags))",
      "881:    return size;",
      "882:  }",
      "884:  if ((*flags & FLAGS_DID_BUILD_ID) == 0) {",
      "885:   if (do_bid_note(ms, nbuf, xnh_type, swap,",
      "886:       namesz, descsz, noff, doff, flags))",
      "887:    return size;",
      "888:  }",
      "890:  if ((*flags & FLAGS_DID_NETBSD_PAX) == 0) {",
      "891:   if (do_pax_note(ms, nbuf, xnh_type, swap,",
      "892:       namesz, descsz, noff, doff, flags))",
      "893:    return size;",
      "894:  }",
      "896:  if ((*flags & FLAGS_DID_CORE) == 0) {",
      "897:   if (do_core_note(ms, nbuf, xnh_type, swap,",
      "898:       namesz, descsz, noff, doff, flags, size, clazz))",
      "899:    return size;",
      "900:  }",
      "902:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
      "903:   switch (xnh_type) {",
      "904:       case NT_NETBSD_VERSION:",
      "905:    return size;",
      "906:   case NT_NETBSD_MARCH:",
      "907:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
      "908:     return size;",
      "909:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
      "910:        (const char *)&nbuf[doff]) == -1)",
      "911:     return size;",
      "912:    break;",
      "913:   case NT_NETBSD_CMODEL:",
      "914:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
      "915:     return size;",
      "916:    if (file_printf(ms, \", compiler model: %.*s\",",
      "917:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
      "918:     return size;",
      "919:    break;",
      "920:   default:",
      "921:    if (*flags & FLAGS_DID_NETBSD_UNKNOWN)",
      "922:     return size;",
      "923:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
      "924:     return size;",
      "925:    break;",
      "926:   }",
      "927:   return size;",
      "928:  }",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "918: private int",
      "919: doshn(struct magic_set *ms, int clazz, int swap, int fd, off_t off, int num,",
      "921: {",
      "922:  Elf32_Shdr sh32;",
      "923:  Elf64_Shdr sh64;",
      "",
      "[Removed Lines]",
      "920:     size_t size, off_t fsize, int *flags, int mach, int strtab)",
      "",
      "[Added Lines]",
      "985:     size_t size, off_t fsize, int mach, int strtab, int *flags,",
      "986:     uint16_t *notecount)",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "994:     if (noff >= (off_t)xsh_size)",
      "995:      break;",
      "996:     noff = donote(ms, nbuf, (size_t)noff,",
      "998:     if (noff == 0)",
      "999:      break;",
      "1000:    }",
      "",
      "[Removed Lines]",
      "997:         xsh_size, clazz, swap, 4, flags);",
      "",
      "[Added Lines]",
      "1063:         xsh_size, clazz, swap, 4, flags, notecount);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1162: private int",
      "1163: dophn_exec(struct magic_set *ms, int clazz, int swap, int fd, off_t off,",
      "1165: {",
      "1166:  Elf32_Phdr ph32;",
      "1167:  Elf64_Phdr ph64;",
      "",
      "[Removed Lines]",
      "1164:     int num, size_t size, off_t fsize, int *flags, int sh_num)",
      "",
      "[Added Lines]",
      "1230:     int num, size_t size, off_t fsize, int sh_num, int *flags,",
      "1231:     uint16_t *notecount)",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1242:      break;",
      "1243:     offset = donote(ms, nbuf, offset,",
      "1244:         (size_t)bufsize, clazz, swap, align,",
      "1246:     if (offset == 0)",
      "1247:      break;",
      "1248:    }",
      "",
      "[Removed Lines]",
      "1245:         flags);",
      "",
      "[Added Lines]",
      "1312:         flags, notecount);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1277:  int flags = 0;",
      "1278:  Elf32_Ehdr elf32hdr;",
      "1279:  Elf64_Ehdr elf64hdr;",
      "1282:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))",
      "1283:   return 0;",
      "",
      "[Removed Lines]",
      "1280:  uint16_t type, phnum, shnum;",
      "",
      "[Added Lines]",
      "1347:  uint16_t type, phnum, shnum, notecount;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "21f9d5f0e0340ada998f7f9d316368c7167a4afa",
      "candidate_info": {
        "commit_hash": "21f9d5f0e0340ada998f7f9d316368c7167a4afa",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/21f9d5f0e0340ada998f7f9d316368c7167a4afa",
        "files": [
          "src/file.c",
          "src/file_opts.h"
        ],
        "message": "Fix bug with long options and explicitly number them to avoid this in the future.",
        "before_after_code_files": [
          "src/file.c||src/file.c",
          "src/file_opts.h||src/file_opts.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/file.c||src/file.c",
            "src/file_opts.h||src/file_opts.h"
          ],
          "candidate": [
            "src/file.c||src/file.c",
            "src/file_opts.h||src/file_opts.h"
          ]
        }
      },
      "candidate_diff": {
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.163 2015/04/09 20:01:41 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.164 2015/06/03 18:21:24 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: private const struct option long_options[] = {",
          "92: #define OPT(shortname, longname, opt, doc)      \\",
          "93:     {longname, opt, NULL, shortname},",
          "96: #include \"file_opts.h\"",
          "97: #undef OPT",
          "98: #undef OPT_LONGONLY",
          "",
          "[Removed Lines]",
          "94: #define OPT_LONGONLY(longname, opt, doc)        \\",
          "95:     {longname, opt, NULL, 0},",
          "",
          "[Added Lines]",
          "92: #define OPT_HELP  1",
          "93: #define OPT_APPLE  2",
          "94: #define OPT_EXTENSIONS  3",
          "95: #define OPT_MIME_TYPE  4",
          "96: #define OPT_MIME_ENCODING 5",
          "99: #define OPT_LONGONLY(longname, opt, doc, id)        \\",
          "100:     {longname, opt, NULL, id},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:  while ((c = getopt_long(argc, argv, OPTSTRING, long_options,",
          "183:      &longindex)) != -1)",
          "184:   switch (c) {",
          "203:    break;",
          "204:   case '0':",
          "205:    nulsep = 1;",
          "",
          "[Removed Lines]",
          "185:   case 0 :",
          "186:    switch (longindex) {",
          "187:    case 0:",
          "188:     help();",
          "189:     break;",
          "190:    case 10:",
          "191:     flags |= MAGIC_APPLE;",
          "192:     break;",
          "193:    case 11:",
          "194:     flags |= MAGIC_EXTENSION;",
          "195:     break;",
          "196:    case 12:",
          "197:     flags |= MAGIC_MIME_TYPE;",
          "198:     break;",
          "199:    case 13:",
          "200:     flags |= MAGIC_MIME_ENCODING;",
          "201:     break;",
          "202:    }",
          "",
          "[Added Lines]",
          "190:   case OPT_HELP:",
          "191:    help();",
          "192:    break;",
          "193:   case OPT_APPLE:",
          "194:    flags |= MAGIC_APPLE;",
          "195:    break;",
          "196:   case OPT_EXTENSIONS:",
          "197:    flags |= MAGIC_EXTENSION;",
          "198:    break;",
          "199:   case OPT_MIME_TYPE:",
          "200:    flags |= MAGIC_MIME_TYPE;",
          "201:    break;",
          "202:   case OPT_MIME_ENCODING:",
          "203:    flags |= MAGIC_MIME_ENCODING;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "595: #define OPT(shortname, longname, opt, doc)      \\",
          "596:  fprintf(stdout, \"  -%c, --\" longname, shortname), \\",
          "597:  docprint(doc);",
          "599:  fprintf(stdout, \"      --\" longname), \\",
          "600:  docprint(doc);",
          "601: #include \"file_opts.h\"",
          "",
          "[Removed Lines]",
          "598: #define OPT_LONGONLY(longname, opt, doc)        \\",
          "",
          "[Added Lines]",
          "599: #define OPT_LONGONLY(longname, opt, doc, id)        \\",
          "",
          "---------------"
        ],
        "src/file_opts.h||src/file_opts.h": [
          "File: src/file_opts.h -> src/file_opts.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: OPT('v', \"version\", 0, \"              output version information and exit\\n\")",
          "17: OPT('m', \"magic-file\", 1, \" LIST      use LIST as a colon-separated list of magic\\n\"",
          "18:     \"                               number files\\n\")",
          "",
          "[Removed Lines]",
          "15: OPT_LONGONLY(\"help\", 0, \"                 display this help and exit\\n\")",
          "",
          "[Added Lines]",
          "15: OPT_LONGONLY(\"help\", 0, \"                 display this help and exit\\n\", OPT_HELP)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: OPT('F', \"separator\", 1, \" STRING     use string as separator instead of `:'\\n\")",
          "30: OPT('i', \"mime\", 0, \"                 output MIME type strings (--mime-type and\\n\"",
          "31:     \"                               --mime-encoding)\\n\")",
          "36: OPT('k', \"keep-going\", 0, \"           don't stop at the first match\\n\")",
          "37: OPT('l', \"list\", 0, \"                 list magic strength\\n\")",
          "38: #ifdef S_IFLNK",
          "",
          "[Removed Lines]",
          "32: OPT_LONGONLY(\"apple\", 0, \"                output the Apple CREATOR/TYPE\\n\")",
          "33: OPT_LONGONLY(\"extension\", 0, \"            output a slash-separated list of extnsions\\n\")",
          "34: OPT_LONGONLY(\"mime-type\", 0, \"            output the MIME type\\n\")",
          "35: OPT_LONGONLY(\"mime-encoding\", 0, \"        output the MIME encoding\\n\")",
          "",
          "[Added Lines]",
          "32: OPT_LONGONLY(\"apple\", 0, \"                output the Apple CREATOR/TYPE\\n\", OPT_APPLE)",
          "33: OPT_LONGONLY(\"extension\", 0, \"            output a slash-separated list of extensions\\n\", OPT_EXTENSIONS)",
          "34: OPT_LONGONLY(\"mime-type\", 0, \"            output the MIME type\\n\", OPT_MIME_TYPE)",
          "35: OPT_LONGONLY(\"mime-encoding\", 0, \"        output the MIME encoding\\n\", OPT_MIME_ENCODING)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24afd020b48d38d90350579b707773bf9d08c6ba",
      "candidate_info": {
        "commit_hash": "24afd020b48d38d90350579b707773bf9d08c6ba",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/24afd020b48d38d90350579b707773bf9d08c6ba",
        "files": [
          "ChangeLog",
          "doc/magic.man",
          "magic/Magdir/jpeg",
          "src/apprentice.c",
          "src/file.h",
          "src/softmagic.c"
        ],
        "message": "Add indirect relative offsets; make Exif use them. All other indirect magic is absolute by default.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/file.h||src/file.h",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c",
            "src/file.h||src/file.h"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c",
            "src/file.h||src/file.h"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.227 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.228 2014/12/16 23:18:40 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1605: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1608: private int",
          "1609: parse_indirect_modifier(struct magic_set *ms, struct magic *m, const char **lp)",
          "1610: {",
          "1611:  const char *l = *lp;",
          "1613:  while (!isspace((unsigned char)*++l))",
          "1614:   switch (*l) {",
          "1615:   case CHAR_INDIRECT_RELATIVE:",
          "1616:    m->str_flags |= INDIRECT_RELATIVE;",
          "1617:    break;",
          "1618:   default:",
          "1619:    if (ms->flags & MAGIC_CHECK)",
          "1620:     file_magwarn(ms, \"indirect modifier `%c' \"",
          "1621:      \"invalid\", *l);",
          "1623:    return -1;",
          "1624:   }",
          "1626:  return 0;",
          "1627: }",
          "1629: private void",
          "1630: parse_op_modifier(struct magic_set *ms, struct magic *m, const char **lp,",
          "1631:     int op)",
          "1632: {",
          "1633:  const char *l = *lp;",
          "1634:  char *t;",
          "1635:  uint64_t val;",
          "1637:  ++l;",
          "1638:  m->mask_op |= op;",
          "1639:  val = (uint64_t)strtoull(l, &t, 0);",
          "1640:  l = t;",
          "1641:  m->num_mask = file_signextend(ms, m, val);",
          "1642:  eatsize(&l);",
          "1644: }",
          "1646: private int",
          "1647: parse_string_modifier(struct magic_set *ms, struct magic *m, const char **lp)",
          "1648: {",
          "1649:  const char *l = *lp;",
          "1650:  char *t;",
          "1651:  int have_range = 0;",
          "1653:  while (!isspace((unsigned char)*++l)) {",
          "1654:   switch (*l) {",
          "1655:   case '0':  case '1':  case '2':",
          "1656:   case '3':  case '4':  case '5':",
          "1657:   case '6':  case '7':  case '8':",
          "1658:   case '9':",
          "1659:    if (have_range && (ms->flags & MAGIC_CHECK))",
          "1660:     file_magwarn(ms, \"multiple ranges\");",
          "1661:    have_range = 1;",
          "1662:    m->str_range = CAST(uint32_t, strtoul(l, &t, 0));",
          "1663:    if (m->str_range == 0)",
          "1664:     file_magwarn(ms, \"zero range\");",
          "1665:    l = t - 1;",
          "1666:    break;",
          "1667:   case CHAR_COMPACT_WHITESPACE:",
          "1668:    m->str_flags |= STRING_COMPACT_WHITESPACE;",
          "1669:    break;",
          "1670:   case CHAR_COMPACT_OPTIONAL_WHITESPACE:",
          "1671:    m->str_flags |= STRING_COMPACT_OPTIONAL_WHITESPACE;",
          "1672:    break;",
          "1673:   case CHAR_IGNORE_LOWERCASE:",
          "1674:    m->str_flags |= STRING_IGNORE_LOWERCASE;",
          "1675:    break;",
          "1676:   case CHAR_IGNORE_UPPERCASE:",
          "1677:    m->str_flags |= STRING_IGNORE_UPPERCASE;",
          "1678:    break;",
          "1679:   case CHAR_REGEX_OFFSET_START:",
          "1680:    m->str_flags |= REGEX_OFFSET_START;",
          "1681:    break;",
          "1682:   case CHAR_BINTEST:",
          "1683:    m->str_flags |= STRING_BINTEST;",
          "1684:    break;",
          "1685:   case CHAR_TEXTTEST:",
          "1686:    m->str_flags |= STRING_TEXTTEST;",
          "1687:    break;",
          "1688:   case CHAR_TRIM:",
          "1689:    m->str_flags |= STRING_TRIM;",
          "1690:    break;",
          "1691:   case CHAR_PSTRING_1_LE:",
          "1692: #define SET_LENGTH(a) m->str_flags = (m->str_flags & ~PSTRING_LEN) | (a)",
          "1693:    if (m->type != FILE_PSTRING)",
          "1694:     goto bad;",
          "1695:    SET_LENGTH(PSTRING_1_LE);",
          "1696:    break;",
          "1697:   case CHAR_PSTRING_2_BE:",
          "1698:    if (m->type != FILE_PSTRING)",
          "1699:     goto bad;",
          "1700:    SET_LENGTH(PSTRING_2_BE);",
          "1701:    break;",
          "1702:   case CHAR_PSTRING_2_LE:",
          "1703:    if (m->type != FILE_PSTRING)",
          "1704:     goto bad;",
          "1705:    SET_LENGTH(PSTRING_2_LE);",
          "1706:    break;",
          "1707:   case CHAR_PSTRING_4_BE:",
          "1708:    if (m->type != FILE_PSTRING)",
          "1709:     goto bad;",
          "1710:    SET_LENGTH(PSTRING_4_BE);",
          "1711:    break;",
          "1712:   case CHAR_PSTRING_4_LE:",
          "1713:    switch (m->type) {",
          "1714:    case FILE_PSTRING:",
          "1715:    case FILE_REGEX:",
          "1716:     break;",
          "1717:    default:",
          "1718:     goto bad;",
          "1719:    }",
          "1720:    SET_LENGTH(PSTRING_4_LE);",
          "1721:    break;",
          "1722:   case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "1723:    if (m->type != FILE_PSTRING)",
          "1724:     goto bad;",
          "1725:    m->str_flags |= PSTRING_LENGTH_INCLUDES_ITSELF;",
          "1726:    break;",
          "1727:   default:",
          "1728:   bad:",
          "1729:    if (ms->flags & MAGIC_CHECK)",
          "1730:     file_magwarn(ms, \"string modifier `%c' \"",
          "1731:      \"invalid\", *l);",
          "1732:    goto out;",
          "1733:   }",
          "1735:   if (l[1] == '/' && !isspace((unsigned char)l[2]))",
          "1736:    l++;",
          "1737:  }",
          "1738:  if (string_modifier_check(ms, m) == -1)",
          "1739:   goto out;",
          "1741:  return 0;",
          "1742: out:",
          "1744:  return -1;",
          "1745: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1874:  m->str_range = 0;",
          "1875:  m->str_flags = m->type == FILE_PSTRING ? PSTRING_1_LE : 0;",
          "1876:  if ((op = get_op(*l)) != -1) {",
          "1979:    }",
          "1981:     return -1;",
          "1988:  }",
          "",
          "[Removed Lines]",
          "1877:   if (!IS_STRING(m->type)) {",
          "1878:    uint64_t val;",
          "1879:    ++l;",
          "1880:    m->mask_op |= op;",
          "1881:    val = (uint64_t)strtoull(l, &t, 0);",
          "1882:    l = t;",
          "1883:    m->num_mask = file_signextend(ms, m, val);",
          "1884:    eatsize(&l);",
          "1885:   }",
          "1886:   else if (op == FILE_OPDIVIDE) {",
          "1887:    int have_range = 0;",
          "1888:    while (!isspace((unsigned char)*++l)) {",
          "1889:     switch (*l) {",
          "1890:     case '0':  case '1':  case '2':",
          "1891:     case '3':  case '4':  case '5':",
          "1892:     case '6':  case '7':  case '8':",
          "1893:     case '9':",
          "1894:      if (have_range &&",
          "1895:          (ms->flags & MAGIC_CHECK))",
          "1896:       file_magwarn(ms,",
          "1897:           \"multiple ranges\");",
          "1898:      have_range = 1;",
          "1899:      m->str_range = CAST(uint32_t,",
          "1900:          strtoul(l, &t, 0));",
          "1901:      if (m->str_range == 0)",
          "1902:       file_magwarn(ms,",
          "1903:           \"zero range\");",
          "1904:      l = t - 1;",
          "1905:      break;",
          "1906:     case CHAR_COMPACT_WHITESPACE:",
          "1907:      m->str_flags |=",
          "1908:          STRING_COMPACT_WHITESPACE;",
          "1909:      break;",
          "1910:     case CHAR_COMPACT_OPTIONAL_WHITESPACE:",
          "1911:      m->str_flags |=",
          "1912:          STRING_COMPACT_OPTIONAL_WHITESPACE;",
          "1913:      break;",
          "1914:     case CHAR_IGNORE_LOWERCASE:",
          "1915:      m->str_flags |= STRING_IGNORE_LOWERCASE;",
          "1916:      break;",
          "1917:     case CHAR_IGNORE_UPPERCASE:",
          "1918:      m->str_flags |= STRING_IGNORE_UPPERCASE;",
          "1919:      break;",
          "1920:     case CHAR_REGEX_OFFSET_START:",
          "1921:      m->str_flags |= REGEX_OFFSET_START;",
          "1922:      break;",
          "1923:     case CHAR_BINTEST:",
          "1924:      m->str_flags |= STRING_BINTEST;",
          "1925:      break;",
          "1926:     case CHAR_TEXTTEST:",
          "1927:      m->str_flags |= STRING_TEXTTEST;",
          "1928:      break;",
          "1929:     case CHAR_TRIM:",
          "1930:      m->str_flags |= STRING_TRIM;",
          "1931:      break;",
          "1932:     case CHAR_PSTRING_1_LE:",
          "1933:      if (m->type != FILE_PSTRING)",
          "1934:       goto bad;",
          "1935:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_1_LE;",
          "1936:      break;",
          "1937:     case CHAR_PSTRING_2_BE:",
          "1938:      if (m->type != FILE_PSTRING)",
          "1939:       goto bad;",
          "1940:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_2_BE;",
          "1941:      break;",
          "1942:     case CHAR_PSTRING_2_LE:",
          "1943:      if (m->type != FILE_PSTRING)",
          "1944:       goto bad;",
          "1945:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_2_LE;",
          "1946:      break;",
          "1947:     case CHAR_PSTRING_4_BE:",
          "1948:      if (m->type != FILE_PSTRING)",
          "1949:       goto bad;",
          "1950:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_BE;",
          "1951:      break;",
          "1952:     case CHAR_PSTRING_4_LE:",
          "1953:      switch (m->type) {",
          "1954:      case FILE_PSTRING:",
          "1955:      case FILE_REGEX:",
          "1956:       break;",
          "1957:      default:",
          "1958:       goto bad;",
          "1959:      }",
          "1960:      m->str_flags = (m->str_flags & ~PSTRING_LEN) | PSTRING_4_LE;",
          "1961:      break;",
          "1962:     case CHAR_PSTRING_LENGTH_INCLUDES_ITSELF:",
          "1963:      if (m->type != FILE_PSTRING)",
          "1964:       goto bad;",
          "1965:      m->str_flags |= PSTRING_LENGTH_INCLUDES_ITSELF;",
          "1966:      break;",
          "1967:     default:",
          "1968:     bad:",
          "1969:      if (ms->flags & MAGIC_CHECK)",
          "1970:       file_magwarn(ms,",
          "1971:           \"string extension `%c' \"",
          "1972:           \"invalid\", *l);",
          "1973:      return -1;",
          "1974:     }",
          "1976:     if (l[1] == '/' &&",
          "1977:         !isspace((unsigned char)l[2]))",
          "1978:      l++;",
          "1980:    if (string_modifier_check(ms, m) == -1)",
          "1982:   }",
          "1983:   else {",
          "1984:    if (ms->flags & MAGIC_CHECK)",
          "1985:     file_magwarn(ms, \"invalid string op: %c\", *t);",
          "1986:    return -1;",
          "1987:   }",
          "",
          "[Added Lines]",
          "2016:   if (IS_STRING(m->type)) {",
          "2017:    int r;",
          "2019:    if (op != FILE_OPDIVIDE) {",
          "2020:     if (ms->flags & MAGIC_CHECK)",
          "2021:      file_magwarn(ms,",
          "2022:          \"invalid string/indirect op: \"",
          "2023:          \"`%c'\", *t);",
          "2024:     return -1;",
          "2027:    if (m->type == FILE_INDIRECT)",
          "2028:     r = parse_indirect_modifier(ms, m, &l);",
          "2029:    else",
          "2030:     r = parse_string_modifier(ms, m, &l);",
          "2031:    if (r == -1)",
          "2033:   } else",
          "2034:    parse_op_modifier(ms, m, &l, op);",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:   (t) == FILE_LESTRING16 || \\",
          "235:   (t) == FILE_REGEX || \\",
          "236:   (t) == FILE_SEARCH || \\",
          "237:   (t) == FILE_NAME || \\",
          "238:   (t) == FILE_USE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:   (t) == FILE_INDIRECT || \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346: #define STRING_IGNORE_CASE  (STRING_IGNORE_LOWERCASE|STRING_IGNORE_UPPERCASE)",
          "347: #define STRING_DEFAULT_RANGE  100",
          "351: struct mlist {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: #define INDIRECT_RELATIVE   BIT(0)",
          "351: #define CHAR_INDIRECT_RELATIVE   'r'",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.204 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.205 2015/01/01 04:12:23 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1665:   break;",
          "1667:  case FILE_INDIRECT:",
          "1669:   if (offset == 0)",
          "1670:    return 0;",
          "",
          "[Removed Lines]",
          "1668:   offset += o;",
          "",
          "[Added Lines]",
          "1668:   if (m->str_flags & INDIRECT_RELATIVE)",
          "1669:    offset += o;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7866426f4a66f8939f5010819bd4b58f8862499d",
      "candidate_info": {
        "commit_hash": "7866426f4a66f8939f5010819bd4b58f8862499d",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/7866426f4a66f8939f5010819bd4b58f8862499d",
        "files": [
          "src/apprentice.c"
        ],
        "message": "Always add the map to the head of the list; this way we can always dependably free it with mlist_free().",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.219 2014/10/28 22:10:46 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.220 2014/10/28 22:25:17 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: {",
          "405:  struct mlist *ml;",
          "407:  if ((ml = CAST(struct mlist *, malloc(sizeof(*ml)))) == NULL)",
          "408:   return -1;",
          "411:  ml->magic = map->magic[idx];",
          "412:  ml->nmagic = map->nmagic[idx];",
          "",
          "[Removed Lines]",
          "410:  ml->map = idx == 0 ? map : NULL;",
          "",
          "[Added Lines]",
          "407:  mlp->map = idx == 0 ? map : NULL;",
          "411:  ml->map = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "457:  for (i = 0; i < MAGIC_SETS; i++) {",
          "458:   if (add_mlist(ms->mlist[i], map, i) == -1) {",
          "459:    file_oomem(ms, sizeof(*ml));",
          "462:   }",
          "463:  }",
          "",
          "[Removed Lines]",
          "460:    apprentice_unmap(map);",
          "461:    return -1;",
          "",
          "[Added Lines]",
          "461:    goto fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "471:    apprentice_list(ms->mlist[i], TEXTTEST);",
          "472:   }",
          "473:  }",
          "475:  return 0;",
          "476: }",
          "478: protected void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475: fail:",
          "476:  for (i = 0; i < MAGIC_SETS; i++) {",
          "477:   mlist_free(ms->mlist[i]);",
          "478:   ms->mlist[i] = NULL;",
          "479:  }",
          "480:  return -1;",
          "481: #else",
          "482:  return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "605:   for (j = 0; j < MAGIC_SETS; j++) {",
          "606:    if (add_mlist(ms->mlist[j], map, j) == -1) {",
          "607:     file_oomem(ms, sizeof(*ml));",
          "609:     goto fail;",
          "610:    }",
          "611:   }",
          "",
          "[Removed Lines]",
          "608:     apprentice_unmap(map);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18a8f7732cf6820174ec3be52954af9e32ded2c0",
      "candidate_info": {
        "commit_hash": "18a8f7732cf6820174ec3be52954af9e32ded2c0",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/18a8f7732cf6820174ec3be52954af9e32ded2c0",
        "files": [
          "src/apprentice.c"
        ],
        "message": "PR/474: be more careful about updating string positions: 1. if the numeric conversion failed, don't move the string pointer. 2. on escape parse failure restore the string position",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/apprentice.c||src/apprentice.c"
          ],
          "candidate": [
            "src/apprentice.c||src/apprentice.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.236 2015/09/10 14:39:55 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.237 2015/09/11 17:24:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2561:  case FILE_LEFLOAT:",
          "2562:   if (m->reln != 'x') {",
          "2563:    char *ep;",
          "2564: #ifdef HAVE_STRTOF",
          "2565:    m->value.f = strtof(*p, &ep);",
          "2566: #else",
          "2567:    m->value.f = (float)strtod(*p, &ep);",
          "2568: #endif",
          "2570:   }",
          "2571:   return 0;",
          "2572:  case FILE_DOUBLE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2564:    errno = 0;",
          "2570:    if (errno == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2574:  case FILE_LEDOUBLE:",
          "2575:   if (m->reln != 'x') {",
          "2576:    char *ep;",
          "2577:    m->value.d = strtod(*p, &ep);",
          "2579:   }",
          "2580:   return 0;",
          "2581:  default:",
          "2582:   if (m->reln != 'x') {",
          "2583:    char *ep;",
          "2584:    m->value.q = file_signextend(ms, m,",
          "2585:        (uint64_t)strtoull(*p, &ep, 0));",
          "2588:   }",
          "2589:   return 0;",
          "2590:  }",
          "",
          "[Removed Lines]",
          "2587:    eatsize(p);",
          "",
          "[Added Lines]",
          "2579:    errno = 0;",
          "2581:    if (errno == 0)",
          "2588:    errno = 0;",
          "2591:    if (errno == 0) {",
          "2593:     eatsize(p);",
          "2594:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2620:    case '\\0':",
          "2621:     if (warn)",
          "2622:      file_magwarn(ms, \"incomplete escape\");",
          "2623:     goto out;",
          "2625:    case '\\t':",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2630:     s--;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7269d7b7ef4b0f99b702077658776ab728183e1",
      "candidate_info": {
        "commit_hash": "b7269d7b7ef4b0f99b702077658776ab728183e1",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b7269d7b7ef4b0f99b702077658776ab728183e1",
        "files": [
          "src/readelf.c"
        ],
        "message": "remove debugging printf.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.100 2014/03/11 15:52:54 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.101 2014/03/11 17:13:18 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "951:    break;",
          "952:   }",
          "956:   switch (xsh_type) {",
          "957:   case SHT_NOTE:",
          "",
          "[Removed Lines]",
          "954: printf(\"name %s type %d\\n\", name, xsh_type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}