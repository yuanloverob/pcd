{
  "cve_id": "CVE-2018-9275",
  "cve_desc": "In check_user_token in util.c in the Yubico PAM module (aka pam_yubico) 2.18 through 2.25, successful logins can leak file descriptors to the auth mapping file, which can lead to information disclosure (serial number of a device) and/or DoS (reaching the maximum number of file descriptors).",
  "repo": "Yubico/yubico-pam",
  "patch_hash": "0f6ceabab0a8849b47f67d727aa526c2656089ba",
  "patch_info": {
    "commit_hash": "0f6ceabab0a8849b47f67d727aa526c2656089ba",
    "repo": "Yubico/yubico-pam",
    "commit_url": "https://github.com/Yubico/yubico-pam/commit/0f6ceabab0a8849b47f67d727aa526c2656089ba",
    "files": [
      "util.c"
    ],
    "message": "util: make sure to close the authfile before returning success\n\nfixes #136",
    "before_after_code_files": [
      "util.c||util.c"
    ]
  },
  "patch_diff": {
    "util.c||util.c": [
      "File: util.c -> util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "167:   {",
      "168:     if(verbose)",
      "169:         D (debug_file, \"Match user/token as %s/%s\", username, otp_id);",
      "170:     return AUTH_FOUND;",
      "171:   }",
      "172:      }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171:     fclose(opwfile);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b595ee1cdef6cbe0dc4123e3b09c999dc1b6968",
      "candidate_info": {
        "commit_hash": "0b595ee1cdef6cbe0dc4123e3b09c999dc1b6968",
        "repo": "Yubico/yubico-pam",
        "commit_url": "https://github.com/Yubico/yubico-pam/commit/0b595ee1cdef6cbe0dc4123e3b09c999dc1b6968",
        "files": [
          "pam_yubico.c"
        ],
        "message": "Use mkotemp() instead of mkstemp()\n\nThis uses mkostemp() instead of mkstemp(), passing along the `O_CLOEXEC` flag,\nwhich makes sure that the file descriptor is closed and won't be leaked into\nany child process, which was previously an issue due to a missing fclose()\n(#136).",
        "before_after_code_files": [
          "pam_yubico.c||pam_yubico.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pam_yubico.c||pam_yubico.c": [
          "File: pam_yubico.c -> pam_yubico.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "654:   strcpy(tmpfile, userfile);",
          "655:   strcat(tmpfile, TMPFILE_SUFFIX);",
          "658:   if (fd < 0) {",
          "659:       DBG (\"Cannot open file: %s (%s)\", tmpfile, strerror(errno));",
          "660:       goto restpriv_out;",
          "",
          "[Removed Lines]",
          "657:   fd = mkstemp(tmpfile);",
          "",
          "[Added Lines]",
          "657:   fd = mkostemp(tmpfile, O_CLOEXEC);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d51124e8846d1c43a8fb328ccec5672690b564fe",
      "candidate_info": {
        "commit_hash": "d51124e8846d1c43a8fb328ccec5672690b564fe",
        "repo": "Yubico/yubico-pam",
        "commit_url": "https://github.com/Yubico/yubico-pam/commit/d51124e8846d1c43a8fb328ccec5672690b564fe",
        "files": [
          "pam_yubico.c",
          "util.c",
          "ykpamcfg.c"
        ],
        "message": "Add \"e\" flag to fopen() calls\n\nThis adds the `e` flag to fopen() calls, making sure the `O_CLOEXEC` flag is\nused. This makes sure that the file descriptor is being closed and not leaked\ninto child processes. This was an issues previously due to a missing fclose()\n(#136).",
        "before_after_code_files": [
          "pam_yubico.c||pam_yubico.c",
          "util.c||util.c",
          "ykpamcfg.c||ykpamcfg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "pam_yubico.c||pam_yubico.c": [
          "File: pam_yubico.c -> pam_yubico.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "819:                 {",
          "820:                   if(S_ISREG(st.st_mode))",
          "821:                     {",
          "823:                       if(file)",
          "824:                         {",
          "825:                           cfg->debug_file = file;",
          "",
          "[Removed Lines]",
          "822:                       file = fopen(filename, \"a\");",
          "",
          "[Added Lines]",
          "822:                       file = fopen(filename, \"ae\");",
          "",
          "---------------"
        ],
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:  FILE *u;",
          "189:  int res;",
          "192:  if (!u) {",
          "193:   return -1;",
          "194:  }",
          "",
          "[Removed Lines]",
          "191:  u = fopen(\"/dev/urandom\", \"r\");",
          "",
          "[Added Lines]",
          "191:  u = fopen(\"/dev/urandom\", \"re\");",
          "",
          "---------------"
        ],
        "ykpamcfg.c||ykpamcfg.c": [
          "File: ykpamcfg.c -> ykpamcfg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:   umask(077);",
          "241:   if (! f) {",
          "242:     fprintf (stderr, \"Failed opening '%s' for writing : %s\\n\", fn, strerror (errno));",
          "243:     goto out;",
          "",
          "[Removed Lines]",
          "240:   f = fopen (fn, \"w\");",
          "",
          "[Added Lines]",
          "240:   f = fopen (fn, \"we\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5bd2ef8449799d06f6f8dad3e602cc047e3c1af",
      "candidate_info": {
        "commit_hash": "e5bd2ef8449799d06f6f8dad3e602cc047e3c1af",
        "repo": "Yubico/yubico-pam",
        "commit_url": "https://github.com/Yubico/yubico-pam/commit/e5bd2ef8449799d06f6f8dad3e602cc047e3c1af",
        "files": [
          "pam_yubico.c",
          "util.c",
          "ykpamcfg.c"
        ],
        "message": "Open file handlers manually using open() and fdopen() instead of using fopen()\n\nA previous commit (d51124e) added the `e` flag to the `fopen()` calls. However\nthis flag is not supported on all platforms (MacOS) and will be silently\ndropped (see #145). This patch works around those issues by manually opening\nthe file descriptor using `open()` with the `O_CLOEXEC` flag, and invoking\n`fd_open()` on the resulting file descriptor to open an appropriate `FILE`\nstream.\n\nThis makes sure that all files used by pam_yubico will be opened with the\n`O_CLOEXEC` flag on all supported platforms to mitigate issues with missing\n`fclose()` invocation (see #136).",
        "before_after_code_files": [
          "pam_yubico.c||pam_yubico.c",
          "util.c||util.c",
          "ykpamcfg.c||ykpamcfg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "pam_yubico.c||pam_yubico.c": [
          "File: pam_yubico.c -> pam_yubico.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:           else",
          "815:             {",
          "816:               struct stat st;",
          "817:               FILE *file;",
          "818:               if(lstat(filename, &st) == 0)",
          "819:                 {",
          "820:                   if(S_ISREG(st.st_mode))",
          "821:                     {",
          "824:                         {",
          "826:                         }",
          "827:                     }",
          "828:                 }",
          "",
          "[Removed Lines]",
          "822:                       file = fopen(filename, \"ae\");",
          "823:                       if(file)",
          "825:                           cfg->debug_file = file;",
          "",
          "[Added Lines]",
          "817:               int fd;",
          "823:                       fd = open(filename, O_WRONLY | O_CREAT | O_APPEND | O_CLOEXEC, S_IRUSR | S_IWUSR | S_IRGRP);",
          "824:                       if (fd >= 0)",
          "826:                           file = fdopen(fd, \"a\");",
          "827:                           if (file)",
          "828:                             {",
          "829:                               cfg->debug_file = file;",
          "830:                             }",
          "",
          "---------------"
        ],
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187: {",
          "188:  FILE *u;",
          "189:  int res;",
          "192:  if (!u) {",
          "193:   return -1;",
          "194:  }",
          "",
          "[Removed Lines]",
          "191:  u = fopen(\"/dev/urandom\", \"re\");",
          "",
          "[Added Lines]",
          "190:  int fd;",
          "192:  fd = open(\"/dev/urandom\", O_RDONLY | O_CLOEXEC);",
          "193:  if (fd < 0) {",
          "194:   return -1;",
          "195:  }",
          "197:  u = fdopen(fd, \"r\");",
          "",
          "---------------"
        ],
        "ykpamcfg.c||ykpamcfg.c": [
          "File: ykpamcfg.c -> ykpamcfg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <errno.h>",
          "39: #include <sys/stat.h>",
          "40: #include <sys/types.h>",
          "42: #include <ykpers.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: #include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:   unsigned int response_len;",
          "144:   char *fn;",
          "145:   struct passwd *p;",
          "146:   FILE *f = NULL;",
          "147:   struct stat st;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   int fd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:   umask(077);",
          "242:     fprintf (stderr, \"Failed opening '%s' for writing : %s\\n\", fn, strerror (errno));",
          "243:     goto out;",
          "244:   }",
          "246:   if (! write_chalresp_state (f, &state))",
          "247:     goto out;",
          "",
          "[Removed Lines]",
          "240:   f = fopen (fn, \"we\");",
          "241:   if (! f) {",
          "",
          "[Added Lines]",
          "242:   fd = open (fn, O_WRONLY | O_CREAT | O_TRUNC | O_CLOEXEC, S_IRUSR | S_IWUSR);",
          "243:   if (fd < 0) {",
          "247:   f = fdopen (fd, \"w\");",
          "248:   if (! f) {",
          "249:     fprintf (stderr, \"fdopen: %s\\n\", strerror (errno));",
          "250:     goto out;",
          "251:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "079b975469efb6b80b24d50013ff2bf9572112d8",
      "candidate_info": {
        "commit_hash": "079b975469efb6b80b24d50013ff2bf9572112d8",
        "repo": "Yubico/yubico-pam",
        "commit_url": "https://github.com/Yubico/yubico-pam/commit/079b975469efb6b80b24d50013ff2bf9572112d8",
        "files": [
          "pam_yubico.c",
          "util.c"
        ],
        "message": "Open file descriptors with O_CLOEXEC\n\nThis opens any file descriptors with the O_CLOEXEC flag, which will make sure\nthat file descriptors won't be leaked into any child process. This was\npreviously an issue due to a forgotten fclose() (#136).",
        "before_after_code_files": [
          "pam_yubico.c||pam_yubico.c",
          "util.c||util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "pam_yubico.c||pam_yubico.c": [
          "File: pam_yubico.c -> pam_yubico.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "535:     }",
          "536:   }",
          "539:   if (fd < 0) {",
          "540:       DBG (\"Cannot open file: %s (%s)\", userfile, strerror(errno));",
          "541:       goto restpriv_out;",
          "",
          "[Removed Lines]",
          "538:   fd = open(userfile, O_RDONLY, 0);",
          "",
          "[Added Lines]",
          "538:   fd = open(userfile, O_RDONLY | O_CLOEXEC, 0);",
          "",
          "---------------"
        ],
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   struct stat st;",
          "110:   FILE *opwfile;",
          "113:   if (fd < 0) {",
          "114:       if(verbose)",
          "115:    D (debug_file, \"Cannot open file: %s (%s)\", authfile, strerror(errno));",
          "",
          "[Removed Lines]",
          "112:   fd = open(authfile, O_RDONLY, 0);",
          "",
          "[Added Lines]",
          "112:   fd = open(authfile, O_RDONLY | O_CLOEXEC, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}