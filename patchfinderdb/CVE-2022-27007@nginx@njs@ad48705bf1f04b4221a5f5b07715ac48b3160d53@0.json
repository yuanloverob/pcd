{
  "cve_id": "CVE-2022-27007",
  "cve_desc": "nginx njs 0.7.2 is affected suffers from Use-after-free in njs_function_frame_alloc() when it try to invoke from a restored frame saved with njs_function_frame_save().",
  "repo": "nginx/njs",
  "patch_hash": "ad48705bf1f04b4221a5f5b07715ac48b3160d53",
  "patch_info": {
    "commit_hash": "ad48705bf1f04b4221a5f5b07715ac48b3160d53",
    "repo": "nginx/njs",
    "commit_url": "https://github.com/nginx/njs/commit/ad48705bf1f04b4221a5f5b07715ac48b3160d53",
    "files": [
      "src/njs_function.c",
      "test/js/async_recursive_large.t.js",
      "test/js/async_recursive_mid.t.js"
    ],
    "message": "Fixed frame allocation from an awaited frame.\n\nnjs_function_frame_save() is used to save the awaited frame when \"await\"\ninstruction is encountered. The saving was done as a memcpy() of\nexisting runtime frame.\n\nnjs_function_frame_alloc() is used to alloc a new function frame, this\nfunction tries to use a spare preallocated memory from the previous\nframe first.  Previously, this function might result in \"use-after-free\"\nwhen invoked from a restored frame saved with njs_function_frame_save().\nBecause njs_function_frame_save() left pointers to the spare memory of\nthe original frame which may be already free when saved frame is\nrestored.\n\nThe fix is to erase fields for the spare memory from the saved frame.\n\nThis closes #469 issue on Github.",
    "before_after_code_files": [
      "src/njs_function.c||src/njs_function.c",
      "test/js/async_recursive_large.t.js||test/js/async_recursive_large.t.js",
      "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js"
    ]
  },
  "patch_diff": {
    "src/njs_function.c||src/njs_function.c": [
      "File: src/njs_function.c -> src/njs_function.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "811:     njs_native_frame_t  *active, *native;",
      "814:     frame->previous_active_frame = NULL;",
      "816:     native = &frame->native;",
      "818:     active = &vm->active_frame->native;",
      "819:     value_count = njs_function_frame_value_count(active);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "818:     native->size = 0;",
      "819:     native->free = NULL;",
      "820:     native->free_size = 0;",
      "",
      "---------------"
    ],
    "test/js/async_recursive_large.t.js||test/js/async_recursive_large.t.js": [
      "File: test/js/async_recursive_large.t.js -> test/js/async_recursive_large.t.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: includes: [compareArray.js]",
      "3: flags: [async]",
      "6: let stages = [];",
      "8: async function f(v) {",
      "9:     if (v == 1000) {",
      "10:         return;",
      "11:     }",
      "13:     stages.push(`f>${v}`);",
      "15:     await \"X\";",
      "17:     await f(v + 1);",
      "19:     stages.push(`f<${v}`);",
      "20: }",
      "22: f(0)",
      "23: .then(v => {",
      "24:     assert.sameValue(stages.length, 2000);",
      "25: })",
      "26: .then($DONE, $DONE);",
      "",
      "---------------"
    ],
    "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js": [
      "File: test/js/async_recursive_mid.t.js -> test/js/async_recursive_mid.t.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: let stages = [];",
      "8: async function f(v) {",
      "10:         return;",
      "11:     }",
      "",
      "[Removed Lines]",
      "9:     if (v == 3) {",
      "",
      "[Added Lines]",
      "9:     if (v == 1000) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6a07c2156a07ef307b6dcf3c2ca8571a5f1af7a6",
      "candidate_info": {
        "commit_hash": "6a07c2156a07ef307b6dcf3c2ca8571a5f1af7a6",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/6a07c2156a07ef307b6dcf3c2ca8571a5f1af7a6",
        "files": [
          "src/njs_async.c",
          "src/njs_function.c",
          "src/njs_function.h",
          "src/njs_value.h",
          "src/njs_vm.c",
          "src/njs_vmcode.c",
          "src/njs_vmcode.h",
          "test/js/async_recursive_last.t.js",
          "test/js/async_recursive_mid.t.js"
        ],
        "message": "Fixed recursive async function calls.\n\nPreviously, PromiseCapability record was stored (function->context)\ndirectly in function object during a function invocation.  This is\nnot correct, because PromiseCapability record should be linked to\ncurrent execution context.  As a result, function->context is\noverwritten with consecutive recursive calls which results in\nuse-after-free.\n\nThis closes #451 issue on Github.",
        "before_after_code_files": [
          "src/njs_async.c||src/njs_async.c",
          "src/njs_function.c||src/njs_function.c",
          "src/njs_function.h||src/njs_function.h",
          "src/njs_value.h||src/njs_value.h",
          "src/njs_vm.c||src/njs_vm.c",
          "src/njs_vmcode.c||src/njs_vmcode.c",
          "src/njs_vmcode.h||src/njs_vmcode.h",
          "test/js/async_recursive_last.t.js||test/js/async_recursive_last.t.js",
          "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_function.c||src/njs_function.c",
            "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js"
          ],
          "candidate": [
            "src/njs_function.c||src/njs_function.c",
            "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_async.c||src/njs_async.c": [
          "File: src/njs_async.c -> src/njs_async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         return NJS_ERROR;",
          "30:     }",
          "36:     if (ret == NJS_OK) {",
          "37:         ret = njs_function_call(vm, njs_function(&capability->resolve),",
          "",
          "[Removed Lines]",
          "32:     frame->function->context = capability;",
          "34:     ret = njs_function_lambda_call(vm);",
          "",
          "[Added Lines]",
          "32:     ret = njs_function_lambda_call(vm, capability, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     njs_int_t           ret;",
          "64:     njs_value_t         **cur_local, **cur_closures, **cur_temp, *value;",
          "65:     njs_frame_t         *frame, *async_frame;",
          "67:     njs_async_ctx_t     *ctx;",
          "68:     njs_native_frame_t  *top, *async;",
          "",
          "[Removed Lines]",
          "66:     njs_function_t      *function;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     async = &async_frame->native;",
          "79:     async->previous = vm->top_frame;",
          "83:     cur_local = vm->levels[NJS_LEVEL_LOCAL];",
          "84:     cur_closures = vm->levels[NJS_LEVEL_CLOSURE];",
          "85:     cur_temp = vm->levels[NJS_LEVEL_TEMP];",
          "",
          "[Removed Lines]",
          "81:     function = async->function;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:     vm->top_frame->retval = &vm->retval;",
          "109:     vm->levels[NJS_LEVEL_LOCAL] = cur_local;",
          "110:     vm->levels[NJS_LEVEL_CLOSURE] = cur_closures;",
          "",
          "[Removed Lines]",
          "101:     function->context = ctx->capability;",
          "102:     function->await = ctx;",
          "104:     ret = njs_vmcode_interpreter(vm, ctx->pc);",
          "106:     function->context = NULL;",
          "107:     function->await = NULL;",
          "",
          "[Added Lines]",
          "96:     ret = njs_vmcode_interpreter(vm, ctx->pc, ctx->capability, ctx);",
          "",
          "---------------"
        ],
        "src/njs_function.c||src/njs_function.c": [
          "File: src/njs_function.c -> src/njs_function.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "610: njs_int_t",
          "612: {",
          "613:     uint32_t               n;",
          "614:     njs_int_t              ret;",
          "",
          "[Removed Lines]",
          "611: njs_function_lambda_call(njs_vm_t *vm)",
          "",
          "[Added Lines]",
          "611: njs_function_lambda_call(njs_vm_t *vm, void *promise_cap, void *async_ctx)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "622:     frame = (njs_frame_t *) vm->top_frame;",
          "623:     function = frame->native.function;",
          "625:     if (function->global && !function->closure_copied) {",
          "626:         ret = njs_function_capture_global_closures(vm, function);",
          "627:         if (njs_slow_path(ret != NJS_OK)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625:     njs_assert(function->context == NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "698:         }",
          "699:     }",
          "704:     vm->levels[NJS_LEVEL_LOCAL] = cur_local;",
          "",
          "[Removed Lines]",
          "701:     ret = njs_vmcode_interpreter(vm, lambda->start);",
          "",
          "[Added Lines]",
          "703:     ret = njs_vmcode_interpreter(vm, lambda->start, promise_cap, async_ctx);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "775:         return njs_function_native_call(vm);",
          "777:     } else {",
          "779:     }",
          "780: }",
          "",
          "[Removed Lines]",
          "778:         return njs_function_lambda_call(vm);",
          "",
          "[Added Lines]",
          "780:         return njs_function_lambda_call(vm, NULL, NULL);",
          "",
          "---------------"
        ],
        "src/njs_function.h||src/njs_function.h": [
          "File: src/njs_function.h -> src/njs_function.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: njs_int_t njs_function_call2(njs_vm_t *vm, njs_function_t *function,",
          "113:     const njs_value_t *this, const njs_value_t *args,",
          "114:     njs_uint_t nargs, njs_value_t *retval, njs_bool_t ctor);",
          "116: njs_int_t njs_function_native_call(njs_vm_t *vm);",
          "117: njs_native_frame_t *njs_function_frame_alloc(njs_vm_t *vm, size_t size);",
          "118: void njs_function_frame_free(njs_vm_t *vm, njs_native_frame_t *frame);",
          "",
          "[Removed Lines]",
          "115: njs_int_t njs_function_lambda_call(njs_vm_t *vm);",
          "",
          "[Added Lines]",
          "115: njs_int_t njs_function_lambda_call(njs_vm_t *vm, void *promise_cap,",
          "116:     void *async_ctx);",
          "",
          "---------------"
        ],
        "src/njs_value.h||src/njs_value.h": [
          "File: src/njs_value.h -> src/njs_value.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:     } u;",
          "272:     void                              *context;",
          "275:     njs_value_t                       *bound;",
          "276: };",
          "",
          "[Removed Lines]",
          "273:     void                              *await;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/njs_vm.c||src/njs_vm.c": [
          "File: src/njs_vm.c -> src/njs_vm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "490:         return ret;",
          "491:     }",
          "495:     return (ret == NJS_ERROR) ? NJS_ERROR : NJS_OK;",
          "496: }",
          "",
          "[Removed Lines]",
          "493:     ret = njs_vmcode_interpreter(vm, vm->start);",
          "",
          "[Added Lines]",
          "493:     ret = njs_vmcode_interpreter(vm, vm->start, NULL, NULL);",
          "",
          "---------------"
        ],
        "src/njs_vmcode.c||src/njs_vmcode.c": [
          "File: src/njs_vmcode.c -> src/njs_vmcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: static njs_jump_off_t njs_vmcode_return(njs_vm_t *vm, njs_value_t *invld,",
          "43:     njs_value_t *retval);",
          "47: static njs_jump_off_t njs_vmcode_try_start(njs_vm_t *vm, njs_value_t *value,",
          "48:     njs_value_t *offset, u_char *pc);",
          "",
          "[Removed Lines]",
          "45: static njs_jump_off_t njs_vmcode_await(njs_vm_t *vm, njs_vmcode_await_t *await);",
          "",
          "[Added Lines]",
          "45: static njs_jump_off_t njs_vmcode_await(njs_vm_t *vm, njs_vmcode_await_t *await,",
          "46:     njs_promise_capability_t *pcap, njs_async_ctx_t *actx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: njs_int_t",
          "81: {",
          "82:     u_char                       *catch;",
          "83:     double                       num, exponent;",
          "",
          "[Removed Lines]",
          "80: njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc)",
          "",
          "[Added Lines]",
          "81: njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc, void *promise_cap,",
          "82:     void *async_ctx)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "827:             case NJS_VMCODE_AWAIT:",
          "828:                 await = (njs_vmcode_await_t *) pc;",
          "831:             case NJS_VMCODE_TRY_START:",
          "832:                 ret = njs_vmcode_try_start(vm, value1, value2, pc);",
          "",
          "[Removed Lines]",
          "829:                 return njs_vmcode_await(vm, await);",
          "",
          "[Added Lines]",
          "831:                 return njs_vmcode_await(vm, await, promise_cap, async_ctx);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1814: static njs_jump_off_t",
          "1816: {",
          "1817:     size_t              size;",
          "1818:     njs_int_t           ret;",
          "",
          "[Removed Lines]",
          "1815: njs_vmcode_await(njs_vm_t *vm, njs_vmcode_await_t *await)",
          "",
          "[Added Lines]",
          "1817: njs_vmcode_await(njs_vm_t *vm, njs_vmcode_await_t *await,",
          "1818:     njs_promise_capability_t *pcap, njs_async_ctx_t *ctx)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1820:     njs_value_t         ctor, val, on_fulfilled, on_rejected, *value;",
          "1821:     njs_promise_t       *promise;",
          "1822:     njs_function_t      *fulfilled, *rejected;",
          "1824:     njs_native_frame_t  *active;",
          "1826:     active = &vm->active_frame->native;",
          "",
          "[Removed Lines]",
          "1823:     njs_async_ctx_t     *ctx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1837:         return NJS_ERROR;",
          "1838:     }",
          "1842:     if (ctx == NULL) {",
          "1843:         ctx = njs_mp_alloc(vm->mem_pool, sizeof(njs_async_ctx_t));",
          "1844:         if (njs_slow_path(ctx == NULL)) {",
          "",
          "[Removed Lines]",
          "1840:     ctx = active->function->await;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1854:         }",
          "1856:         ctx->await = fulfilled->context;",
          "1861:         ret = njs_function_frame_save(vm, ctx->await, NULL);",
          "1862:         if (njs_slow_path(ret != NJS_OK)) {",
          "",
          "[Removed Lines]",
          "1857:         ctx->capability = active->function->context;",
          "1859:         active->function->context = NULL;",
          "",
          "[Added Lines]",
          "1857:         ctx->capability = pcap;",
          "",
          "---------------"
        ],
        "src/njs_vmcode.h||src/njs_vmcode.h": [
          "File: src/njs_vmcode.h -> src/njs_vmcode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "437: } njs_vmcode_await_t;",
          "442: njs_object_t *njs_function_new_object(njs_vm_t *vm, njs_value_t *constructor);",
          "",
          "[Removed Lines]",
          "440: njs_int_t njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc);",
          "",
          "[Added Lines]",
          "440: njs_int_t njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc,",
          "441:     void *promise_cap, void *async_ctx);",
          "",
          "---------------"
        ],
        "test/js/async_recursive_last.t.js||test/js/async_recursive_last.t.js": [
          "File: test/js/async_recursive_last.t.js -> test/js/async_recursive_last.t.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: includes: [compareArray.js]",
          "3: flags: [async]",
          "6: let stages = [];",
          "8: async function f(v) {",
          "9:     if (v == 3) {",
          "10:         return;",
          "11:     }",
          "13:     stages.push(`f>${v}`);",
          "15:     f(v + 1);",
          "17:     stages.push(`f<${v}`);",
          "19:     await \"X\";",
          "20: }",
          "22: f(0)",
          "23: .then(v => {",
          "24:     assert.compareArray(stages, ['f>0', 'f>1', 'f>2', 'f<2', 'f<1', 'f<0']);",
          "25: })",
          "26: .then($DONE, $DONE);",
          "",
          "---------------"
        ],
        "test/js/async_recursive_mid.t.js||test/js/async_recursive_mid.t.js": [
          "File: test/js/async_recursive_mid.t.js -> test/js/async_recursive_mid.t.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: includes: [compareArray.js]",
          "3: flags: [async]",
          "6: let stages = [];",
          "8: async function f(v) {",
          "9:     if (v == 3) {",
          "10:         return;",
          "11:     }",
          "13:     stages.push(`f>${v}`);",
          "15:     await \"X\";",
          "17:     f(v + 1);",
          "19:     stages.push(`f<${v}`);",
          "20: }",
          "22: f(0)",
          "23: .then(v => {",
          "24:     assert.compareArray(stages, ['f>0','f>1','f<0','f>2','f<1']);",
          "25: })",
          "26: .then($DONE, $DONE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}