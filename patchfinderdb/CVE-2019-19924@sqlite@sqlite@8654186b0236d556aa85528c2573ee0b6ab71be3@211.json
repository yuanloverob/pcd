{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "08652b5ea00316539c913fc936e2966c8d58d283",
      "candidate_info": {
        "commit_hash": "08652b5ea00316539c913fc936e2966c8d58d283",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/08652b5ea00316539c913fc936e2966c8d58d283",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/pragma.c",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Provide the SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA compile-time option to omit the case_sensitive_like pragma.  This change, in combination with documentation changes, is the current solution to ticket [a340eef47b0cad5].\n\nFossilOrigin-Name: eabe7f2d4ff0e0dd868dcab7ec1d4a9168a25f80d3a52f0eeea2f90bd33782f2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 658b84d7f4a0886591c5aab30ed9e31c4a0f56db303eb863f24833ca37085d14",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1824:   }",
          "1825:   sqlite3CreateFunc(db, \"like\", 2, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1826:   sqlite3CreateFunc(db, \"like\", 3, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1830:   setLikeOptFlag(db, \"like\",",
          "1831:       caseSensitive ? (SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE) : SQLITE_FUNC_LIKE);",
          "1832: }",
          "",
          "[Removed Lines]",
          "1827:   sqlite3CreateFunc(db, \"glob\", 2, SQLITE_UTF8,",
          "1828:       (struct compareInfo*)&globInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1829:   setLikeOptFlag(db, \"glob\", SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1424: #ifndef SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: #endif",
          "181:  {/* zName:     */ \"case_sensitive_like\",",
          "186:  {/* zName:     */ \"cell_size_check\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: #if !defined(SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA)",
          "187: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   NAME: case_sensitive_like",
          "303:   FLAG: NoColumns",
          "305:   NAME: integrity_check",
          "306:   FLAG: NeedSchema Result0 Result1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:   IF:   !defined(SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed09dddece0bb6d0a68717ebd0d901c139644d06",
      "candidate_info": {
        "commit_hash": "ed09dddece0bb6d0a68717ebd0d901c139644d06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed09dddece0bb6d0a68717ebd0d901c139644d06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/filter1.test"
        ],
        "message": "Fix a problem with queries containing a min() or max() function for which the FILTER clause excludes all rows.\n\nFossilOrigin-Name: b1d7e104e034655fe41bc55c562d91e8074a2973d538b8b29301458db45afc57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/filter1.test||test/filter1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 601ce9532d34f97a5faa170b6d8a272e5c54f2eabff84660201a1840e0fd9929",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5343:   int i;",
          "5344:   int regHit = 0;",
          "5345:   int addrHitTest = 0;",
          "5346:   struct AggInfo_func *pF;",
          "5347:   struct AggInfo_col *pC;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5346:   int bFilterMinMax = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5356:     assert( !IsWindowFunc(pF->pExpr) );",
          "5357:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5358:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "5359:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5360:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5361:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5360:       if( pAggInfo->nAccumulator",
          "5361:        && (pF->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL)",
          "5362:       ){",
          "5363:         bFilterMinMax = 1;",
          "5364:         if( regHit==0 ) regHit = ++pParse->nMem;",
          "5369:         sqlite3VdbeAddOp2(v, OP_Copy, regAcc, regHit);",
          "5370:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5406:   for(i=0, pC=pAggInfo->aCol; i<pAggInfo->nAccumulator; i++, pC++){",
          "5407:     sqlite3ExprCode(pParse, pC->pExpr, pC->iMem);",
          "5408:   }",
          "5409:   pAggInfo->directMode = 0;",
          "5410:   if( addrHitTest ){",
          "5411:     sqlite3VdbeJumpHere(v, addrHitTest);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5421:   if( bFilterMinMax ){",
          "5425:     sqlite3VdbeAddOp2(v, OP_Integer, 1, regHit);",
          "5426:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6581:       {",
          "6589:         if( sAggInfo.nAccumulator ){",
          "6590:           for(i=0; i<sAggInfo.nFunc; i++){",
          "6591:             if( sAggInfo.aFunc[i].pFunc->funcFlags&SQLITE_FUNC_NEEDCOLL ) break;",
          "6592:           }",
          "6593:           if( i==sAggInfo.nFunc ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6614:             if( ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_WinFunc) ) continue;",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "102: } {1 {misuse of aggregate function count()}}",
          "104: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #-------------------------------------------------------------------------",
          "105: reset_db",
          "106: do_execsql_test 3.0 {",
          "107:   CREATE TABLE t1(a,b);",
          "108:   INSERT INTO t1 VALUES(1, 1);",
          "109: }",
          "110: do_execsql_test 3.1 {",
          "111:   SELECT b, max(a) FILTER (WHERE b='x') FROM t1;",
          "112: } {1 {}}",
          "114: do_execsql_test 3.2 {",
          "115:   CREATE TABLE t2(a, b, c);",
          "116:   INSERT INTO t2 VALUES(1, 2, 3);",
          "117:   INSERT INTO t2 VALUES(1, 3, 4);",
          "118:   INSERT INTO t2 VALUES(2, 5, 6);",
          "119:   INSERT INTO t2 VALUES(2, 7, 8);",
          "120: }",
          "121: do_execsql_test 3.3 {",
          "122:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "123: } {1 3 {} 2 6 {}}",
          "125: do_execsql_test 3.4 {",
          "126:   DELETE FROM t2;",
          "127:   INSERT INTO t2 VALUES(1, 5, 'x');",
          "128:   INSERT INTO t2 VALUES(1, 2, 3);",
          "129:   INSERT INTO t2 VALUES(1, 4, 'x');",
          "130:   INSERT INTO t2 VALUES(2, 5, 6);",
          "131:   INSERT INTO t2 VALUES(2, 7, 8);",
          "132: }",
          "133: do_execsql_test 3.5 {",
          "134:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "135: } {1 x 5 2 6 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
      "candidate_info": {
        "commit_hash": "5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5976b2c80533728e974c2dfb2a6abc8f1acaf3b6",
        "files": [
          "ext/lsm1/lsm_vtab.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix to the query planner for the LSM1 extension.\n\nFossilOrigin-Name: 7496e872a1a50ac65ad04709365a43038fb015ac9c690196de3cb02ce54c2e57",
        "before_after_code_files": [
          "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c": [
          "File: ext/lsm1/lsm_vtab.c -> ext/lsm1/lsm_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:   const struct sqlite3_index_constraint *pConstraint;",
          "844:   pConstraint = pIdxInfo->aConstraint;",
          "846:     if( pConstraint->usable==0 ) continue;",
          "847:     if( pConstraint->iColumn!=0 ) continue;",
          "848:     switch( pConstraint->op ){",
          "",
          "[Removed Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint && idxNum<16; i++, pConstraint++){",
          "",
          "[Added Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
      "candidate_info": {
        "commit_hash": "b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6f2deac3c817bc6a13cce1e7f5316ad1e8fbec0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Avoid allocating excessive registers for the PARTITION BY expressions when processing window functions.\n\nFossilOrigin-Name: 180be266238e18c01f8bd52c75dd9aa3e26e553620258141cd95189a0ae59ddb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6ad553192051eaa0c6d929baacde2de07b93c6d09de861028bbce55a2c9bfdd3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3571:   int regResult;",
          "",
          "[Removed Lines]",
          "3574:   int regPart;            /* First in a set of registers holding PARTITION BY",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1118: void sqlite3WindowCodeInit(Parse *pParse, Window *pMWin){",
          "1119:   Window *pWin;",
          "1120:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1124:     pMWin->regPart = pParse->nMem+1;",
          "1127:   }",
          "1129:   pMWin->regFirst = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1121:   int nPart = (pMWin->pPartition ? pMWin->pPartition->nExpr : 0);",
          "1122:   nPart += (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1123:   if( nPart ){",
          "1125:     pParse->nMem += nPart;",
          "1126:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nPart-1);",
          "",
          "[Added Lines]",
          "1124:   if( pMWin->pPartition ){",
          "1125:     int nExpr = pMWin->pPartition->nExpr;",
          "1127:     pParse->nMem += nExpr;",
          "1128:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nExpr-1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2302:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "2303:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2307:   sqlite3VdbeJumpHere(v, addrIfNot);",
          "2308:   if( regPeer ){",
          "2309:     windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2306:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2354:       }",
          "2355:     }",
          "2356:   }",
          "2360:   sqlite3VdbeResolveLabel(v, lblWhereEnd);",
          "",
          "[Removed Lines]",
          "2357:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2366:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2367:   }",
          "2370:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2371:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2372:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2369:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2414:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2415:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2417:   if( pMWin->pPartition ){",
          "2418:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2419:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "",
          "[Removed Lines]",
          "2416:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
      "candidate_info": {
        "commit_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/sqlite.h.in",
          "test/jrnlmode.test"
        ],
        "message": "Disable PRAGMA journal_mode=OFF when SQLITE_DBCONFIG_DEFENSIVE is turned on. Ticket [f4ec250930342e0c].\n\nFossilOrigin-Name: a0f5eb5c79cc33b7224f3421d2baa02a2a19eb9d6eaa8117dda4a1878b229cb5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/jrnlmode.test||test/jrnlmode.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14c00b1016ba53ab2dc177c59a27b6b9209202973685f0f274112d296ba7dfcb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:         eMode = PAGER_JOURNALMODE_QUERY;",
          "646:       }",
          "647:     }",
          "648:     if( eMode==PAGER_JOURNALMODE_QUERY && pId2->n==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647:       if( eMode==PAGER_JOURNALMODE_OFF && (db->flags & SQLITE_Defensive)!=0 ){",
          "650:         eMode = PAGER_JOURNALMODE_QUERY;",
          "651:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/jrnlmode.test||test/jrnlmode.test": [
          "File: test/jrnlmode.test -> test/jrnlmode.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     PRAGMA temp.journal_mode;",
          "66:   }",
          "67: } [list persist persist [temp_journal_mode persist]]",
          "69:   execsql {",
          "70:     PRAGMA journal_mode = off;",
          "71:   }",
          "",
          "[Removed Lines]",
          "68: do_test jrnlmode-1.4 {",
          "",
          "[Added Lines]",
          "68: do_test jrnlmode-1.4a {",
          "69:   # When defensive is on, unable to set journal_mode to OFF",
          "70:   sqlite3_db_config db DEFENSIVE 1",
          "71:   execsql {",
          "72:     PRAGMA journal_mode = off;",
          "73:   }",
          "74: } {persist}",
          "75: do_test jrnlmode-1.4b {",
          "76:   # When defensive is on, unable to set journal_mode to OFF",
          "77:   sqlite3_db_config db DEFENSIVE 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}