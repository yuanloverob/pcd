{
  "cve_id": "CVE-2015-2189",
  "cve_desc": "Off-by-one error in the pcapng_read function in wiretap/pcapng.c in the pcapng file parser in Wireshark 1.10.x before 1.10.13 and 1.12.x before 1.12.4 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via an invalid Interface Statistics Block (ISB) interface ID in a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "a835c85e3d662343d7283f1dcdacb8a11d1d0727",
  "patch_info": {
    "commit_hash": "a835c85e3d662343d7283f1dcdacb8a11d1d0727",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/a835c85e3d662343d7283f1dcdacb8a11d1d0727",
    "files": [
      "wiretap/pcapng.c"
    ],
    "message": "Pcapng: Don't fetch past the end of a GArray.\n\nDue to an off-by-one error an invalid ISB interface ID could make us\nfetch past the end of a GArray. Found using American Fuzzy Lop.\n\nBug: 10895\nChange-Id: I7d4049ad7a386ae7e8013b8e741d54a31f353f1f\nReviewed-on: https://code.wireshark.org/review/6798\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
    "before_after_code_files": [
      "wiretap/pcapng.c||wiretap/pcapng.c"
    ]
  },
  "patch_diff": {
    "wiretap/pcapng.c||wiretap/pcapng.c": [
      "File: wiretap/pcapng.c -> wiretap/pcapng.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2470:             case(BLOCK_TYPE_ISB):",
      "2472:                 pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
      "2475:                 } else {",
      "2477:                     wtapng_if_descr = &g_array_index(wth->interface_data, wtapng_if_descr_t, wblock.data.if_stats.interface_id);",
      "",
      "[Removed Lines]",
      "2473:                 if (wth->interface_data->len < wblock.data.if_stats.interface_id) {",
      "2474:                     pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u > number_of_interfaces\", wblock.data.if_stats.interface_id);",
      "",
      "[Added Lines]",
      "2473:                 if (wth->interface_data->len <= wblock.data.if_stats.interface_id) {",
      "2474:                     pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u >= number_of_interfaces\", wblock.data.if_stats.interface_id);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2509: got_packet:",
      "2514:     return TRUE;",
      "2515: }",
      "",
      "[Removed Lines]",
      "2512:     pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset + bytes_read);",
      "",
      "[Added Lines]",
      "2512:     pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de0eeb5d6e34b26ab934bdf3e39884783c8afddd",
      "candidate_info": {
        "commit_hash": "de0eeb5d6e34b26ab934bdf3e39884783c8afddd",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/de0eeb5d6e34b26ab934bdf3e39884783c8afddd",
        "files": [
          "docbook/release-notes.asciidoc",
          "wiretap/pcapng.c"
        ],
        "message": "Pcapng: Don't fetch past the end of a GArray.\n\nDue to an off-by-one error an invalid ISB interface ID could make us\nfetch past the end of a GArray. Found using American Fuzzy Lop.\n\nBug: 10895\nChange-Id: I7d4049ad7a386ae7e8013b8e741d54a31f353f1f\nReviewed-on: https://code.wireshark.org/review/6798\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>\n(cherry picked from commit a835c85e3d662343d7283f1dcdacb8a11d1d0727)\nConflicts: wiretap/pcapng.c\nReviewed-on: https://code.wireshark.org/review/6801\n(cherry picked from commit 175ede45a2f9c94f1a60abdc8e3a91a798179d0f)\nConflicts:\n\tdocbook/release-notes.asciidoc\n\twiretap/pcapng.c\nReviewed-on: https://code.wireshark.org/review/6802",
        "before_after_code_files": [
          "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc",
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc": [
          "File: docbook/release-notes.asciidoc -> docbook/release-notes.asciidoc",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: The following bugs have been fixed:",
          "",
          "[Removed Lines]",
          "18: A dissector went awry.",
          "22: (ws-buglink:XXX[])",
          "23: cve-idlink:2015-XXX[]",
          "",
          "[Added Lines]",
          "18: The pcapng file parser could crash.",
          "22: (ws-buglink:10895[])",
          "",
          "---------------"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2262:                         pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2264:                         pcapng_debug1(\"pcapng_read: *data_offset is updated to %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2266:                                 pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u > number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2267:                         } else {",
          "",
          "[Removed Lines]",
          "2265:                         if (wth->number_of_interfaces < wblock.data.if_stats.interface_id) {",
          "",
          "[Added Lines]",
          "2265:                         if (wth->number_of_interfaces <= wblock.data.if_stats.interface_id) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "175ede45a2f9c94f1a60abdc8e3a91a798179d0f",
      "candidate_info": {
        "commit_hash": "175ede45a2f9c94f1a60abdc8e3a91a798179d0f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/175ede45a2f9c94f1a60abdc8e3a91a798179d0f",
        "files": [
          "docbook/release-notes.asciidoc",
          "wiretap/pcapng.c"
        ],
        "message": "Pcapng: Don't fetch past the end of a GArray.\n\nDue to an off-by-one error an invalid ISB interface ID could make us\nfetch past the end of a GArray. Found using American Fuzzy Lop.\n\nBug: 10895\nChange-Id: I7d4049ad7a386ae7e8013b8e741d54a31f353f1f\nReviewed-on: https://code.wireshark.org/review/6798\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>\n(cherry picked from commit a835c85e3d662343d7283f1dcdacb8a11d1d0727)\nConflicts: wiretap/pcapng.c\nReviewed-on: https://code.wireshark.org/review/6801",
        "before_after_code_files": [
          "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc",
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc": [
          "File: docbook/release-notes.asciidoc -> docbook/release-notes.asciidoc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "18: A dissector went awry.",
          "22: (ws-buglink:XXX[])",
          "",
          "[Added Lines]",
          "18: The pcapng file parser could crash.",
          "22: (ws-buglink:10895[])",
          "",
          "---------------"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2385:                         pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2387:                         pcapng_debug1(\"pcapng_read: *data_offset is updated to %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2389:                                 pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u > number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2390:                         } else {",
          "",
          "[Removed Lines]",
          "2388:                         if (wth->interface_data->len < wblock.data.if_stats.interface_id) {",
          "",
          "[Added Lines]",
          "2388:                         if (wth->interface_data->len <= wblock.data.if_stats.interface_id) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf4ed6e1ed9f3b29c9a7208e37a332aebe6b5ca5",
      "candidate_info": {
        "commit_hash": "bf4ed6e1ed9f3b29c9a7208e37a332aebe6b5ca5",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/bf4ed6e1ed9f3b29c9a7208e37a332aebe6b5ca5",
        "files": [
          "wiretap/pcapng.c"
        ],
        "message": "Pcapng: Don't fetch past the end of a GArray.\n\nDue to an off-by-one error an invalid ISB interface ID could make us\nfetch past the end of a GArray. Found using American Fuzzy Lop.\n\nBug: 10895\nChange-Id: I7d4049ad7a386ae7e8013b8e741d54a31f353f1f\nReviewed-on: https://code.wireshark.org/review/6798\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>\n(cherry picked from commit a835c85e3d662343d7283f1dcdacb8a11d1d0727)\nConflicts: wiretap/pcapng.c\nReviewed-on: https://code.wireshark.org/review/6801\nReviewed-on: https://code.wireshark.org/review/7704\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nTested-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2385:                         pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2387:                         pcapng_debug1(\"pcapng_read: *data_offset is updated to %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2389:                                 pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u > number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2390:                         } else {",
          "",
          "[Removed Lines]",
          "2388:                         if (wth->interface_data->len < wblock.data.if_stats.interface_id) {",
          "",
          "[Added Lines]",
          "2388:                         if (wth->interface_data->len <= wblock.data.if_stats.interface_id) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "beca96a9ca90ad1e79f780937c9f0652666a5be4",
      "candidate_info": {
        "commit_hash": "beca96a9ca90ad1e79f780937c9f0652666a5be4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/beca96a9ca90ad1e79f780937c9f0652666a5be4",
        "files": [
          "wiretap/pcapng.c"
        ],
        "message": "Pcapng: Don't fetch past the end of a GArray.\n\nDue to an off-by-one error an invalid ISB interface ID could make us\nfetch past the end of a GArray. Found using American Fuzzy Lop.\n\nBug: 10895\nChange-Id: I7d4049ad7a386ae7e8013b8e741d54a31f353f1f\nReviewed-on: https://code.wireshark.org/review/6798\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>\n(cherry picked from commit a835c85e3d662343d7283f1dcdacb8a11d1d0727)\nConflicts: wiretap/pcapng.c\nReviewed-on: https://code.wireshark.org/review/6801\nConflicts: wiretap/pcapng.c\nReviewed-on: https://code.wireshark.org/review/7713\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nTested-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "wiretap/pcapng.c||wiretap/pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2185:                     pcapng_debug0(\"pcapng_read: block type BLOCK_TYPE_ISB\");",
          "2187:                     pcapng_debug1(\"pcapng_read: *data_offset is updated to %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2189:                         pcapng_debug1(\"pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u > number_of_interfaces\", wblock.data.if_stats.interface_id);",
          "2190:                     } else {",
          "",
          "[Removed Lines]",
          "2188:                     if (wth->number_of_interfaces < wblock.data.if_stats.interface_id) {",
          "",
          "[Added Lines]",
          "2188:                     if (wth->number_of_interfaces <= wblock.data.if_stats.interface_id) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b13a3b0f6a5617e0e352f87cc5a20afea226aa8",
      "candidate_info": {
        "commit_hash": "7b13a3b0f6a5617e0e352f87cc5a20afea226aa8",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7b13a3b0f6a5617e0e352f87cc5a20afea226aa8",
        "files": [
          "cfile.c",
          "cfile.h",
          "epan/epan-int.h",
          "epan/epan.c",
          "epan/epan.h",
          "file.c",
          "wiretap/pcapng.c",
          "wiretap/wtap.c",
          "wiretap/wtap.h"
        ],
        "message": "Allow pcapng interface options to be available to dissectors.\n\nInterface options[1], and more generally pcapng options[2], are useful\ninformation that can provide improved dissector output.\n\nPrior to this change, only certain pcapng interface options were interpreted\nand made available to dissectors, e.g. the interface name or description.\nThis change augments the situation by providing epan_get_interface_option( ),\nwhich returns an array of byte arrays if the option code exists\n(otherwise NULL).  Each element of the array is a byte buffer containing\nthe raw data of the option.  An array-of-buffers is used because pcapng\nallows for multiple instances of the same option to be present in the file.\nAll interface options found in a pcapng file are thus made available to the\ndissector.\n\nThe implementation also provides infrastructure to collect options from\nother pcapng blocks such as the section header.  Currently these options\nare discarded, but could be retained in the future to support more features.\n\n[1] http://www.winpcap.org/ntar/draft/PCAP-DumpFileFormat.html#sectionidb\n[2] http://www.winpcap.org/ntar/draft/PCAP-DumpFileFormat.html#sectionopt\n\nChange-Id: I944b6f0f03dde9b8e7d1348b76acde6f9d312f37\nReviewed-on: https://code.wireshark.org/review/331\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "cfile.c||cfile.c",
          "cfile.h||cfile.h",
          "epan/epan-int.h||epan/epan-int.h",
          "epan/epan.c||epan/epan.c",
          "epan/epan.h||epan/epan.h",
          "file.c||file.c",
          "wiretap/pcapng.c||wiretap/pcapng.c",
          "wiretap/wtap.c||wiretap/wtap.c",
          "wiretap/wtap.h||wiretap/wtap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ],
          "candidate": [
            "wiretap/pcapng.c||wiretap/pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "cfile.c||cfile.c": [
          "File: cfile.c -> cfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"cfile.h\"",
          "34: {",
          "35:   capture_file *cf = (capture_file *) data;",
          "36:   wtapng_iface_descriptions_t *idb_info;",
          "",
          "[Removed Lines]",
          "32: const char *",
          "33: cap_file_get_interface_name(void *data, guint32 interface_id)",
          "",
          "[Added Lines]",
          "32: static const wtapng_if_descr_t *",
          "33: cap_file_get_interface_desc(void *data, guint32 interface_id)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     wtapng_if_descr = &g_array_index(idb_info->interface_data, wtapng_if_descr_t, interface_id);",
          "44:   g_free(idb_info);",
          "46:   if (wtapng_if_descr) {",
          "47:     if (wtapng_if_descr->if_name)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   return wtapng_if_descr;",
          "46: }",
          "48: const char *",
          "49: cap_file_get_interface_name(void *data, guint32 interface_id)",
          "50: {",
          "51:   const wtapng_if_descr_t *wtapng_if_descr = cap_file_get_interface_desc(data, interface_id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   return \"unknown\";",
          "53: }",
          "55: void",
          "56: cap_file_init(capture_file *cf)",
          "57: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: const GArray *",
          "63: cap_file_get_interface_option(void *data, guint32 interface_id, guint16 option_code)",
          "64: {",
          "65:   const wtapng_if_descr_t *wtapng_if_descr = cap_file_get_interface_desc(data, interface_id);",
          "67:   if (wtapng_if_descr && wtapng_if_descr->if_options) {",
          "68:     gint code = (gint) option_code;",
          "69:     return (const GArray *) g_hash_table_lookup(wtapng_if_descr->if_options, &code);",
          "70:   }",
          "71:   return NULL;",
          "72: }",
          "",
          "---------------"
        ],
        "cfile.h||cfile.h": [
          "File: cfile.h -> cfile.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: extern const char *cap_file_get_interface_name(void *data, guint32 interface_id);",
          "136: #ifdef __cplusplus",
          "137: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: extern const GArray *cap_file_get_interface_option(void *data, guint32 interface_id, guint16 option_code);",
          "",
          "---------------"
        ],
        "epan/epan-int.h||epan/epan-int.h": [
          "File: epan/epan-int.h -> epan/epan-int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  const nstime_t *(*get_frame_ts)(void *data, guint32 frame_num);",
          "32:  const char *(*get_interface_name)(void *data, guint32 interface_id);",
          "33:  const char *(*get_user_comment)(void *data, const frame_data *fd);",
          "34: };",
          "36: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:  const GArray *(*get_interface_option)(void *data, guint32 interface_id,",
          "35:            guint16 option_code);",
          "",
          "---------------"
        ],
        "epan/epan.c||epan/epan.c": [
          "File: epan/epan.c -> epan/epan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:  return NULL;",
          "179: }",
          "181: const nstime_t *",
          "182: epan_get_frame_ts(const epan_t *session, guint32 frame_num)",
          "183: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: const GArray *",
          "182: epan_get_interface_option(const epan_t *session, guint32 interface_id, guint16 option_code)",
          "183: {",
          "184:  if (session->get_interface_option)",
          "185:   return session->get_interface_option(session->data, interface_id, option_code);",
          "187:  return NULL;",
          "188: }",
          "",
          "---------------"
        ],
        "epan/epan.h||epan/epan.h": [
          "File: epan/epan.h -> epan/epan.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: const char *epan_get_interface_name(const epan_t *session, guint32 interface_id);",
          "139: const nstime_t *epan_get_frame_ts(const epan_t *session, guint32 frame_num);",
          "141: WS_DLL_PUBLIC void epan_free(epan_t *session);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: const GArray *epan_get_interface_option(const epan_t *session, guint32 interface_id, guint16 option_code);",
          "",
          "---------------"
        ],
        "file.c||file.c": [
          "File: file.c -> file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:   epan->get_frame_ts = ws_get_frame_ts;",
          "330:   epan->get_interface_name = cap_file_get_interface_name;",
          "331:   epan->get_user_comment = ws_get_user_comment;",
          "333:   return epan;",
          "334: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:   epan->get_interface_option = cap_file_get_interface_option;",
          "",
          "---------------"
        ],
        "wiretap/pcapng.c||wiretap/pcapng.c": [
          "File: wiretap/pcapng.c -> wiretap/pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:                 wtapng_if_stats_t       if_stats;",
          "345:         } data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:         GHashTable * pcapng_options;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:         int *file_encap;",
          "358: } wtapng_block_t;",
          "361: typedef struct interface_data_s {",
          "362:         int wtap_encap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363: static void",
          "364: pcapng_destroy_option_key(gpointer data)",
          "365: {",
          "366:         g_free(data);",
          "367: }",
          "369: static void",
          "370: pcapng_destroy_option_value(gpointer data)",
          "371: {",
          "372:         GArray * pval = (GArray *) data;",
          "373:         if (pval) {",
          "374:                 guint i;",
          "375:                 for(i=0; i<pval->len; i++) {",
          "376:                         GByteArray * element = g_array_index(pval, GByteArray *, i);",
          "377:                         g_byte_array_unref(element);",
          "378:                 }",
          "379:                 g_array_unref(pval);",
          "380:         }",
          "381: }",
          "383: static void",
          "384: pcapng_init_block_options(wtapng_block_t *wblock)",
          "385: {",
          "386:         wblock->pcapng_options = g_hash_table_new_full(g_int_hash,",
          "387:              g_int_equal,",
          "388:              pcapng_destroy_option_key,",
          "389:              pcapng_destroy_option_value);",
          "390: }",
          "392: static void",
          "393: pcapng_unref_block_options(wtapng_block_t *wblock)",
          "394: {",
          "395:         if (wblock->pcapng_options) {",
          "396:                 g_hash_table_destroy(wblock->pcapng_options);",
          "397:                 wblock->pcapng_options = NULL;",
          "398:  }",
          "399: }",
          "401: static void",
          "402: pcapng_collect_block_option(wtapng_block_t *wblock, guint16 code,",
          "403:        const guint8 *data, gsize len)",
          "404: {",
          "405:         if (wblock->pcapng_options) {",
          "406:                 gint tempkey = (gint) code;",
          "407:                 GArray * pval = (GArray *) g_hash_table_lookup(wblock->pcapng_options, &tempkey);",
          "408:                 if(!pval) {",
          "410:                            new key and new array for its first value,",
          "412:                         gpointer pkey = g_try_malloc(sizeof(gint));",
          "413:                         if (pkey) {",
          "414:                             pval = g_array_new(FALSE, TRUE, sizeof(GByteArray *));",
          "415:                             g_hash_table_insert(wblock->pcapng_options, pkey, pval);",
          "416:                         }",
          "417:                 }",
          "418:                 if (pval) {",
          "419:                         GByteArray * optionbuf = g_byte_array_new_take(g_strndup(data, len), len);",
          "420:                         g_array_append_val(pval, optionbuf);",
          "421:                 }",
          "422:         }",
          "423: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "607:                 block_read += bytes_read;",
          "608:                 to_read -= bytes_read;",
          "611:                 switch (oh.option_code) {",
          "612:                     case(OPT_EOFOPT):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676:                 if (oh.option_code) {",
          "678:                         pcapng_collect_block_option(wblock, oh.option_code, option_content, oh.option_length);",
          "679:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "779:                 block_read += bytes_read;",
          "780:                 to_read -= bytes_read;",
          "783:                 switch (oh.option_code) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:                 if (oh.option_code) {",
          "855:                         pcapng_collect_block_option(wblock, oh.option_code, option_content, oh.option_length);",
          "856:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1206:                 block_read += bytes_read;",
          "1207:                 to_read -= bytes_read;",
          "1210:                 switch (oh.option_code) {",
          "1211:                     case(OPT_EOFOPT):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1285:                 if (oh.option_code) {",
          "1287:                         pcapng_collect_block_option(wblock, oh.option_code, option_content, oh.option_length);",
          "1288:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1827:                 block_read += bytes_read;",
          "1828:                 to_read -= bytes_read;",
          "1831:                 switch (oh.option_code) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1911:                 if (oh.option_code) {",
          "1913:                         pcapng_collect_block_option(wblock, oh.option_code, option_content, oh.option_length);",
          "1914:                 }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2132:         int_data.num_stat_entries = 0;",
          "2133:         int_data.interface_statistics = NULL;",
          "2135:         g_array_append_val(wth->interface_data, int_data);",
          "2136:         wth->number_of_interfaces++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2221:         int_data.if_options = wblock->pcapng_options;",
          "2222:         wblock->pcapng_options = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2154:         pcapng_block_header_t bh;",
          "2155:         gint64 saved_offset;",
          "2157:         pn.shb_read = FALSE;",
          "2159:         pn.byte_swapped = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2246:         pcapng_init_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2174:         bytes_read = pcapng_read_block(wth->fh, TRUE, &pn, &wblock, err, err_info);",
          "2175:         if (bytes_read <= 0) {",
          "2176:                 pcapng_debug0(\"pcapng_open: couldn't read first SHB\");",
          "2178:                 if (*err != 0 && *err != WTAP_ERR_SHORT_READ)",
          "2179:                         return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2268:                 pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2190:                 pcapng_debug1(\"pcapng_open: first block type %u not SHB\", wblock.type);",
          "2191:                 return 0;",
          "2192:         }",
          "2193:         pn.shb_read = TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2283:                 pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2233:                 if (bytes_read != sizeof bh) {",
          "2235:                         pcapng_debug3(\"pcapng_open:  Check for more IDB:s, file_read() returned %d instead of %u, err = %d.\", bytes_read, (unsigned int)sizeof bh, *err);",
          "2236:                         if (*err == 0)",
          "2238:                         return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2329:                         pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2258:                 if (bytes_read <= 0) {",
          "2259:                         pcapng_debug0(\"pcapng_open: couldn't read IDB\");",
          "2261:                         if (*err == 0)",
          "2263:                         return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355:                         pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2265:                 pcapng_process_idb(wth, pcapng, &wblock);",
          "2266:                 pcapng_debug2(\"pcapng_open: Read IDB number_of_interfaces %u, wtap_encap %i\", wth->number_of_interfaces, *wblock.file_encap);",
          "2267:         }",
          "2268:         return 1;",
          "2269: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2363:         pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2279:         wtapng_if_descr_t *wtapng_if_descr;",
          "2280:         wtapng_if_stats_t if_stats;",
          "2283:         pcapng_debug1(\"pcapng_read: data_offset is initially %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2378:         pcapng_init_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2295:                 if (bytes_read <= 0) {",
          "2296:                         pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset);",
          "2297:                         pcapng_debug0(\"pcapng_read: couldn't read packet block\");",
          "2298:                         return FALSE;",
          "2299:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2396:                         pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2305:                         wth->phdr.pkt_encap = WTAP_ENCAP_UNKNOWN;",
          "2308:                         return FALSE;",
          "2310:                 case(BLOCK_TYPE_PB):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2407:                         pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2375:         pcapng_debug1(\"pcapng_read: data_offset is finally %\" G_GINT64_MODIFIER \"d\", *data_offset + bytes_read);",
          "2377:         return TRUE;",
          "2378: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2476:         pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2389:         int bytes_read;",
          "2390:         wtapng_block_t wblock;",
          "2394:         bytes_read64 = file_seek(wth->random_fh, seek_off, SEEK_SET, err);",
          "2395:         if (bytes_read64 <= 0) {",
          "2397:         }",
          "2398:         pcapng_debug1(\"pcapng_seek_read: reading at offset %\" G_GINT64_MODIFIER \"u\", seek_off);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2493:         pcapng_init_block_options(&wblock);",
          "2498:   pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2406:         if (bytes_read <= 0) {",
          "2407:                 pcapng_debug3(\"pcapng_seek_read: couldn't read packet block (err=%d, errno=%d, bytes_read=%d).\",",
          "2409:                 return FALSE;",
          "2410:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2512:                 pcapng_unref_block_options(&wblock);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2414:         if (wblock.type != BLOCK_TYPE_PB && wblock.type != BLOCK_TYPE_EPB &&",
          "2415:             wblock.type != BLOCK_TYPE_SPB) {",
          "2416:                 pcapng_debug1(\"pcapng_seek_read: block type %u not PB/EPB/SPB\", wblock.type);",
          "2417:                 return FALSE;",
          "2418:         }",
          "2420:         return TRUE;",
          "2421: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2521:                 pcapng_unref_block_options(&wblock);",
          "2525:         pcapng_unref_block_options(&wblock);",
          "",
          "---------------"
        ],
        "wiretap/wtap.c||wiretap/wtap.c": [
          "File: wiretap/wtap.c -> wiretap/wtap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "925:   if(wtapng_if_descr->num_stat_entries != 0){",
          "926:     g_array_free(wtapng_if_descr->interface_statistics, TRUE);",
          "927:   }",
          "928:  }",
          "929:  if(wth->number_of_interfaces != 0){",
          "930:    g_array_free(wth->interface_data, TRUE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "928:   if(wtapng_if_descr->if_options){",
          "929:     g_hash_table_destroy(wtapng_if_descr->if_options);",
          "930:   }",
          "",
          "---------------"
        ],
        "wiretap/wtap.h||wiretap/wtap.h": [
          "File: wiretap/wtap.h -> wiretap/wtap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1118:     guint8                 num_stat_entries;",
          "1119:     GArray                *interface_statistics;  /**< An array holding the interface statistics from",
          "1121: } wtapng_if_descr_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1121:     GHashTable            *if_options;",
          "",
          "---------------"
        ]
      }
    }
  ]
}