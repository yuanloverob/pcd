{
  "cve_id": "CVE-2021-3119",
  "cve_desc": "Zetetic SQLCipher 4.x before 4.4.3 has a NULL pointer dereferencing issue related to sqlcipher_export in crypto.c and sqlite3StrICmp in sqlite3.c. This may allow an attacker to perform a remote denial of service attack. For example, an SQL injection can be used to execute the crafted SQL command sequence, which causes a segmentation fault.",
  "repo": "sqlcipher/sqlcipher",
  "patch_hash": "cb71f53e8cea4802509f182fa5bead0ac6ab0e7f",
  "patch_info": {
    "commit_hash": "cb71f53e8cea4802509f182fa5bead0ac6ab0e7f",
    "repo": "sqlcipher/sqlcipher",
    "commit_url": "https://github.com/sqlcipher/sqlcipher/commit/cb71f53e8cea4802509f182fa5bead0ac6ab0e7f",
    "files": [
      "src/crypto.c",
      "test/sqlcipher-compatibility.test"
    ],
    "message": "fix sqlcipher_export handling of NULL parameters",
    "before_after_code_files": [
      "src/crypto.c||src/crypto.c",
      "test/sqlcipher-compatibility.test||test/sqlcipher-compatibility.test"
    ]
  },
  "patch_diff": {
    "src/crypto.c||src/crypto.c": [
      "File: src/crypto.c -> src/crypto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1075:     goto end_of_export;",
      "1076:   }",
      "1083:   targetDb_idx =  sqlcipher_find_db_index(db, targetDb);",
      "1085:     rc = SQLITE_ERROR;",
      "1086:     pzErrMsg = sqlite3_mprintf(\"unknown database %s\", targetDb);",
      "1087:     goto end_of_export;",
      "",
      "[Removed Lines]",
      "1078:   targetDb = (const char*) sqlite3_value_text(argv[0]);",
      "1079:   sourceDb = (argc == 2) ? (char *) sqlite3_value_text(argv[1]) : \"main\";",
      "1084:   if(targetDb_idx == 0 && sqlite3StrICmp(\"main\", targetDb) != 0) {",
      "",
      "[Added Lines]",
      "1078:   if(sqlite3_value_type(argv[0]) == SQLITE_NULL) {",
      "1079:     rc = SQLITE_ERROR;",
      "1080:     pzErrMsg = sqlite3_mprintf(\"target database can't be NULL\");",
      "1081:     goto end_of_export;",
      "1082:   }",
      "1084:   targetDb = (const char*) sqlite3_value_text(argv[0]);",
      "1085:   sourceDb = \"main\";",
      "1087:   if(argc == 2) {",
      "1088:     if(sqlite3_value_type(argv[1]) == SQLITE_NULL) {",
      "1089:       rc = SQLITE_ERROR;",
      "1090:       pzErrMsg = sqlite3_mprintf(\"target database can't be NULL\");",
      "1091:       goto end_of_export;",
      "1092:     }",
      "1093:     sourceDb = (char *) sqlite3_value_text(argv[1]);",
      "1094:   }",
      "1100:   if(targetDb_idx == 0 && targetDb != NULL && sqlite3StrICmp(\"main\", targetDb) != 0) {",
      "",
      "---------------"
    ],
    "test/sqlcipher-compatibility.test||test/sqlcipher-compatibility.test": [
      "File: test/sqlcipher-compatibility.test -> test/sqlcipher-compatibility.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "444: db close",
      "445: file delete -force test.db",
      "447: # use the sqlcipher_export function",
      "448: # to copy a complicated database.",
      "449: # tests autoincrement fields,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "447: # verify sqlcipher_export with NULL parameters",
      "448: do_test export-nulls {",
      "449:   sqlite_orig db test.db",
      "451:   catchsql {",
      "452:     SELECT sqlcipher_export(NULL);",
      "453:   }",
      "455: } {1 {target database can't be NULL}}",
      "456: db close",
      "457: file delete -force test.db",
      "459: do_test export-nulls {",
      "460:   sqlite_orig db test.db",
      "462:   catchsql {",
      "463:     SELECT sqlcipher_export('main', NULL);",
      "464:   }",
      "466: } {1 {target database can't be NULL}}",
      "467: db close",
      "468: file delete -force test.db",
      "471: # use the sqlcipher_export function",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32b2109f57fd8297e4b219f5a0be0350e18fb658",
      "candidate_info": {
        "commit_hash": "32b2109f57fd8297e4b219f5a0be0350e18fb658",
        "repo": "sqlcipher/sqlcipher",
        "commit_url": "https://github.com/sqlcipher/sqlcipher/commit/32b2109f57fd8297e4b219f5a0be0350e18fb658",
        "files": [
          "src/crypto.c",
          "src/crypto_impl.c"
        ],
        "message": "replace use of sqlite3StrICmp with public sqlite3_stricmp API",
        "before_after_code_files": [
          "src/crypto.c||src/crypto.c",
          "src/crypto_impl.c||src/crypto_impl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/crypto.c||src/crypto.c"
          ],
          "candidate": [
            "src/crypto.c||src/crypto.c"
          ]
        }
      },
      "candidate_diff": {
        "src/crypto.c||src/crypto.c": [
          "File: src/crypto.c -> src/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:   CODEC_TRACE(\"sqlcipher_codec_pragma: entered db=%p iDb=%d pParse=%p zLeft=%s zRight=%s ctx=%p\\n\", db, iDb, pParse, zLeft, zRight, ctx);",
          "99: #ifdef SQLCIPHER_EXT",
          "101:     char *license_result = sqlite3_mprintf(\"%d\", sqlcipher_license_key(zRight));",
          "102:     codec_vdbe_return_string(pParse, \"cipher_license\", license_result, P4_DYNAMIC);",
          "103:   } else",
          "105:       if(ctx) {",
          "106:         char *license_result = sqlite3_mprintf(\"%d\", ctx",
          "107:                                                ? sqlcipher_license_key_status(ctx->provider)",
          "",
          "[Removed Lines]",
          "100:   if( sqlite3StrICmp(zLeft, \"cipher_license\")==0 && zRight ){",
          "104:     if( sqlite3StrICmp(zLeft, \"cipher_license\")==0 && !zRight ){",
          "",
          "[Added Lines]",
          "100:   if( sqlite3_stricmp(zLeft, \"cipher_license\")==0 && zRight ){",
          "104:     if( sqlite3_stricmp(zLeft, \"cipher_license\")==0 && !zRight ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:   } else",
          "112: #endif",
          "113: #ifdef SQLCIPHER_TEST",
          "115:     if( zRight ) {",
          "116:       unsigned int flags = sqlcipher_get_test_flags();",
          "118:         flags |= TEST_FAIL_ENCRYPT;",
          "119:       } else",
          "121:         flags |= TEST_FAIL_DECRYPT;",
          "122:       } else",
          "124:         flags |= TEST_FAIL_MIGRATE;",
          "125:       }",
          "126:       sqlcipher_set_test_flags(flags);",
          "127:     }",
          "128:   } else",
          "130:     if( zRight ) {",
          "131:       unsigned int flags = sqlcipher_get_test_flags();",
          "133:         flags &= ~TEST_FAIL_ENCRYPT;",
          "134:       } else",
          "136:         flags &= ~TEST_FAIL_DECRYPT;",
          "137:       } else",
          "139:         flags &= ~TEST_FAIL_MIGRATE;",
          "140:       }",
          "141:       sqlcipher_set_test_flags(flags);",
          "142:     }",
          "143:   } else",
          "145:     char *flags = sqlite3_mprintf(\"%u\", sqlcipher_get_test_flags());",
          "146:     codec_vdbe_return_string(pParse, \"cipher_test\", flags, P4_DYNAMIC);",
          "147:   }else",
          "149:     if( zRight ) {",
          "150:       int rand = atoi(zRight);",
          "151:       sqlcipher_set_test_rand(rand);",
          "",
          "[Removed Lines]",
          "114:   if( sqlite3StrICmp(zLeft,\"cipher_test_on\")==0 ){",
          "117:       if(sqlite3StrICmp(zRight, \"fail_encrypt\")==0) {",
          "120:       if(sqlite3StrICmp(zRight, \"fail_decrypt\")==0) {",
          "123:       if(sqlite3StrICmp(zRight, \"fail_migrate\")==0) {",
          "129:   if( sqlite3StrICmp(zLeft,\"cipher_test_off\")==0 ){",
          "132:       if(sqlite3StrICmp(zRight, \"fail_encrypt\")==0) {",
          "135:       if(sqlite3StrICmp(zRight, \"fail_decrypt\")==0) {",
          "138:       if(sqlite3StrICmp(zRight, \"fail_migrate\")==0) {",
          "144:   if( sqlite3StrICmp(zLeft,\"cipher_test\")==0 ){",
          "148:   if( sqlite3StrICmp(zLeft,\"cipher_test_rand\")==0 ){",
          "",
          "[Added Lines]",
          "114:   if( sqlite3_stricmp(zLeft,\"cipher_test_on\")==0 ){",
          "117:       if(sqlite3_stricmp(zRight, \"fail_encrypt\")==0) {",
          "120:       if(sqlite3_stricmp(zRight, \"fail_decrypt\")==0) {",
          "123:       if(sqlite3_stricmp(zRight, \"fail_migrate\")==0) {",
          "129:   if( sqlite3_stricmp(zLeft,\"cipher_test_off\")==0 ){",
          "132:       if(sqlite3_stricmp(zRight, \"fail_encrypt\")==0) {",
          "135:       if(sqlite3_stricmp(zRight, \"fail_decrypt\")==0) {",
          "138:       if(sqlite3_stricmp(zRight, \"fail_migrate\")==0) {",
          "144:   if( sqlite3_stricmp(zLeft,\"cipher_test\")==0 ){",
          "148:   if( sqlite3_stricmp(zLeft,\"cipher_test_rand\")==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     }",
          "156:   } else",
          "157: #endif",
          "159:     if(ctx) {",
          "160:       char *fips_mode_status = sqlite3_mprintf(\"%d\", sqlcipher_codec_fips_status(ctx));",
          "161:       codec_vdbe_return_string(pParse, \"cipher_fips_status\", fips_mode_status, P4_DYNAMIC);",
          "162:     }",
          "163:   } else",
          "165:     if(ctx) {",
          "166:       char *deprecation = \"PRAGMA cipher_store_pass is deprecated, please remove from use\";",
          "167:       sqlcipher_codec_set_store_pass(ctx, sqlite3GetBoolean(zRight, 1));",
          "",
          "[Removed Lines]",
          "158:   if( sqlite3StrICmp(zLeft, \"cipher_fips_status\")== 0 && !zRight ){",
          "164:   if( sqlite3StrICmp(zLeft, \"cipher_store_pass\")==0 && zRight ) {",
          "",
          "[Added Lines]",
          "158:   if( sqlite3_stricmp(zLeft, \"cipher_fips_status\")== 0 && !zRight ){",
          "164:   if( sqlite3_stricmp(zLeft, \"cipher_store_pass\")==0 && zRight ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:       sqlite3_log(SQLITE_WARNING, deprecation);",
          "170:     }",
          "171:   } else",
          "173:     if(ctx){",
          "174:       char *store_pass_value = sqlite3_mprintf(\"%d\", sqlcipher_codec_get_store_pass(ctx));",
          "175:       codec_vdbe_return_string(pParse, \"cipher_store_pass\", store_pass_value, P4_DYNAMIC);",
          "176:     }",
          "177:   }",
          "179:       char *profile_status = sqlite3_mprintf(\"%d\", sqlcipher_cipher_profile(db, zRight));",
          "180:       codec_vdbe_return_string(pParse, \"cipher_profile\", profile_status, P4_DYNAMIC);",
          "181:   } else",
          "183:     if(ctx) {",
          "184:       char *add_random_status = sqlite3_mprintf(\"%d\", sqlcipher_codec_add_random(ctx, zRight, sqlite3Strlen30(zRight)));",
          "185:       codec_vdbe_return_string(pParse, \"cipher_add_random\", add_random_status, P4_DYNAMIC);",
          "186:     }",
          "187:   } else",
          "189:     if(ctx){",
          "190:       int status = sqlcipher_codec_ctx_migrate(ctx);",
          "191:       char *migrate_status = sqlite3_mprintf(\"%d\", status);",
          "",
          "[Removed Lines]",
          "172:   if( sqlite3StrICmp(zLeft, \"cipher_store_pass\")==0 && !zRight ) {",
          "178:   if( sqlite3StrICmp(zLeft, \"cipher_profile\")== 0 && zRight ){",
          "182:   if( sqlite3StrICmp(zLeft, \"cipher_add_random\")==0 && zRight ){",
          "188:   if( sqlite3StrICmp(zLeft, \"cipher_migrate\")==0 && !zRight ){",
          "",
          "[Added Lines]",
          "172:   if( sqlite3_stricmp(zLeft, \"cipher_store_pass\")==0 && !zRight ) {",
          "178:   if( sqlite3_stricmp(zLeft, \"cipher_profile\")== 0 && zRight ){",
          "182:   if( sqlite3_stricmp(zLeft, \"cipher_add_random\")==0 && zRight ){",
          "188:   if( sqlite3_stricmp(zLeft, \"cipher_migrate\")==0 && !zRight ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196:       }",
          "197:     }",
          "198:   } else",
          "200:     if(ctx) { codec_vdbe_return_string(pParse, \"cipher_provider\",",
          "201:                                               sqlcipher_codec_get_cipher_provider(ctx), P4_TRANSIENT);",
          "202:     }",
          "203:   } else",
          "205:     if(ctx) { codec_vdbe_return_string(pParse, \"cipher_provider_version\",",
          "206:                                               sqlcipher_codec_get_provider_version(ctx), P4_TRANSIENT);",
          "207:     }",
          "208:   } else",
          "210:     codec_vdbe_return_string(pParse, \"cipher_version\", sqlcipher_version(), P4_DYNAMIC);",
          "211:   }else",
          "213:     if(ctx) {",
          "214:       if( zRight ) {",
          "215:         const char* message = \"PRAGMA cipher is no longer supported.\";",
          "",
          "[Removed Lines]",
          "199:   if( sqlite3StrICmp(zLeft, \"cipher_provider\")==0 && !zRight ){",
          "204:   if( sqlite3StrICmp(zLeft, \"cipher_provider_version\")==0 && !zRight){",
          "209:   if( sqlite3StrICmp(zLeft, \"cipher_version\")==0 && !zRight ){",
          "212:   if( sqlite3StrICmp(zLeft, \"cipher\")==0 ){",
          "",
          "[Added Lines]",
          "199:   if( sqlite3_stricmp(zLeft, \"cipher_provider\")==0 && !zRight ){",
          "204:   if( sqlite3_stricmp(zLeft, \"cipher_provider_version\")==0 && !zRight){",
          "209:   if( sqlite3_stricmp(zLeft, \"cipher_version\")==0 && !zRight ){",
          "212:   if( sqlite3_stricmp(zLeft, \"cipher\")==0 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "220:       }",
          "221:     }",
          "222:   }else",
          "224:     const char* message = \"PRAGMA rekey_cipher is no longer supported.\";",
          "225:     codec_vdbe_return_string(pParse, \"rekey_cipher\", message, P4_TRANSIENT);",
          "226:     sqlite3_log(SQLITE_WARNING, message);",
          "227:   }else",
          "229:     if( zRight ) {",
          "231:     } else {",
          "",
          "[Removed Lines]",
          "223:   if( sqlite3StrICmp(zLeft, \"rekey_cipher\")==0 && zRight ){",
          "228:   if( sqlite3StrICmp(zLeft,\"cipher_default_kdf_iter\")==0 ){",
          "",
          "[Added Lines]",
          "223:   if( sqlite3_stricmp(zLeft, \"rekey_cipher\")==0 && zRight ){",
          "228:   if( sqlite3_stricmp(zLeft,\"cipher_default_kdf_iter\")==0 ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "233:       codec_vdbe_return_string(pParse, \"cipher_default_kdf_iter\", kdf_iter, P4_DYNAMIC);",
          "234:     }",
          "235:   }else",
          "237:     if(ctx) {",
          "238:       if( zRight ) {",
          "",
          "[Removed Lines]",
          "236:   if( sqlite3StrICmp(zLeft, \"kdf_iter\")==0 ){",
          "",
          "[Added Lines]",
          "236:   if( sqlite3_stricmp(zLeft, \"kdf_iter\")==0 ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "243:       }",
          "244:     }",
          "245:   }else",
          "247:     if(ctx) {",
          "248:       if( zRight ) {",
          "249:         char *deprecation = \"PRAGMA fast_kdf_iter is deprecated, please remove from use\";",
          "",
          "[Removed Lines]",
          "246:   if( sqlite3StrICmp(zLeft, \"fast_kdf_iter\")==0){",
          "",
          "[Added Lines]",
          "246:   if( sqlite3_stricmp(zLeft, \"fast_kdf_iter\")==0){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "256:       }",
          "257:     }",
          "258:   }else",
          "260:     const char* message = \"PRAGMA rekey_kdf_iter is no longer supported.\";",
          "261:     codec_vdbe_return_string(pParse, \"rekey_kdf_iter\", message, P4_TRANSIENT);",
          "262:     sqlite3_log(SQLITE_WARNING, message);",
          "263:   }else",
          "265:     if(ctx) {",
          "266:       if( zRight ) {",
          "267:         int size = atoi(zRight);",
          "",
          "[Removed Lines]",
          "259:   if( sqlite3StrICmp(zLeft, \"rekey_kdf_iter\")==0 && zRight ){",
          "264:   if( sqlite3StrICmp(zLeft,\"cipher_page_size\")==0 ){",
          "",
          "[Added Lines]",
          "259:   if( sqlite3_stricmp(zLeft, \"rekey_kdf_iter\")==0 && zRight ){",
          "264:   if( sqlite3_stricmp(zLeft,\"cipher_page_size\")==0 ){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "275:       }",
          "276:     }",
          "277:   }else",
          "279:     if( zRight ) {",
          "280:       sqlcipher_set_default_pagesize(atoi(zRight));",
          "281:     } else {",
          "",
          "[Removed Lines]",
          "278:   if( sqlite3StrICmp(zLeft,\"cipher_default_page_size\")==0 ){",
          "",
          "[Added Lines]",
          "278:   if( sqlite3_stricmp(zLeft,\"cipher_default_page_size\")==0 ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "283:       codec_vdbe_return_string(pParse, \"cipher_default_page_size\", default_page_size, P4_DYNAMIC);",
          "284:     }",
          "285:   }else",
          "287:     if( zRight ) {",
          "288:       sqlcipher_set_default_use_hmac(sqlite3GetBoolean(zRight,1));",
          "289:     } else {",
          "",
          "[Removed Lines]",
          "286:   if( sqlite3StrICmp(zLeft,\"cipher_default_use_hmac\")==0 ){",
          "",
          "[Added Lines]",
          "286:   if( sqlite3_stricmp(zLeft,\"cipher_default_use_hmac\")==0 ){",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "291:       codec_vdbe_return_string(pParse, \"cipher_default_use_hmac\", default_use_hmac, P4_DYNAMIC);",
          "292:     }",
          "293:   }else",
          "295:     if(ctx) {",
          "296:       if( zRight ) {",
          "297:         rc = sqlcipher_codec_ctx_set_use_hmac(ctx, sqlite3GetBoolean(zRight,1));",
          "",
          "[Removed Lines]",
          "294:   if( sqlite3StrICmp(zLeft,\"cipher_use_hmac\")==0 ){",
          "",
          "[Added Lines]",
          "294:   if( sqlite3_stricmp(zLeft,\"cipher_use_hmac\")==0 ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "305:       }",
          "306:     }",
          "307:   }else",
          "309:     if(ctx) {",
          "310:       if(zRight) {",
          "311:         char *deprecation = \"PRAGMA cipher_hmac_pgno is deprecated, please remove from use\";",
          "314:           sqlcipher_codec_ctx_unset_flag(ctx, CIPHER_FLAG_BE_PGNO);",
          "315:           sqlcipher_codec_ctx_set_flag(ctx, CIPHER_FLAG_LE_PGNO);",
          "317:           sqlcipher_codec_ctx_unset_flag(ctx, CIPHER_FLAG_LE_PGNO);",
          "318:           sqlcipher_codec_ctx_set_flag(ctx, CIPHER_FLAG_BE_PGNO);",
          "320:           sqlcipher_codec_ctx_unset_flag(ctx, CIPHER_FLAG_LE_PGNO);",
          "321:           sqlcipher_codec_ctx_unset_flag(ctx, CIPHER_FLAG_BE_PGNO);",
          "322:         }",
          "",
          "[Removed Lines]",
          "308:   if( sqlite3StrICmp(zLeft,\"cipher_hmac_pgno\")==0 ){",
          "313:         if(sqlite3StrICmp(zRight, \"le\") == 0) {",
          "316:         } else if(sqlite3StrICmp(zRight, \"be\") == 0) {",
          "319:         } else if(sqlite3StrICmp(zRight, \"native\") == 0) {",
          "",
          "[Added Lines]",
          "308:   if( sqlite3_stricmp(zLeft,\"cipher_hmac_pgno\")==0 ){",
          "313:         if(sqlite3_stricmp(zRight, \"le\") == 0) {",
          "316:         } else if(sqlite3_stricmp(zRight, \"be\") == 0) {",
          "319:         } else if(sqlite3_stricmp(zRight, \"native\") == 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "334:       }",
          "335:     }",
          "336:   }else",
          "338:     if(ctx) {",
          "339:       if(zRight) {",
          "340:         char *deprecation = \"PRAGMA cipher_hmac_salt_mask is deprecated, please remove from use\";",
          "",
          "[Removed Lines]",
          "337:   if( sqlite3StrICmp(zLeft,\"cipher_hmac_salt_mask\")==0 ){",
          "",
          "[Added Lines]",
          "337:   if( sqlite3_stricmp(zLeft,\"cipher_hmac_salt_mask\")==0 ){",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "352:       }",
          "353:     }",
          "354:   }else",
          "356:     if(ctx) {",
          "357:       if( zRight ) {",
          "358:         int size = atoi(zRight);",
          "",
          "[Removed Lines]",
          "355:   if( sqlite3StrICmp(zLeft,\"cipher_plaintext_header_size\")==0 ){",
          "",
          "[Added Lines]",
          "355:   if( sqlite3_stricmp(zLeft,\"cipher_plaintext_header_size\")==0 ){",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "365:       }",
          "366:     }",
          "367:   }else",
          "369:     if( zRight ) {",
          "370:       sqlcipher_set_default_plaintext_header_size(atoi(zRight));",
          "371:     } else {",
          "",
          "[Removed Lines]",
          "368:   if( sqlite3StrICmp(zLeft,\"cipher_default_plaintext_header_size\")==0 ){",
          "",
          "[Added Lines]",
          "368:   if( sqlite3_stricmp(zLeft,\"cipher_default_plaintext_header_size\")==0 ){",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "373:       codec_vdbe_return_string(pParse, \"cipher_default_plaintext_header_size\", size, P4_DYNAMIC);",
          "374:     }",
          "375:   }else",
          "377:     if(ctx) {",
          "378:       if(zRight) {",
          "379:         if (sqlite3StrNICmp(zRight ,\"x'\", 2) == 0 && sqlite3Strlen30(zRight) == (FILE_HEADER_SZ*2)+3) {",
          "",
          "[Removed Lines]",
          "376:   if( sqlite3StrICmp(zLeft,\"cipher_salt\")==0 ){",
          "",
          "[Added Lines]",
          "376:   if( sqlite3_stricmp(zLeft,\"cipher_salt\")==0 ){",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "396:       }",
          "397:     }",
          "398:   }else",
          "400:     if(ctx) {",
          "401:       if(zRight) {",
          "402:         rc = SQLITE_ERROR;",
          "404:           rc = sqlcipher_codec_ctx_set_hmac_algorithm(ctx, SQLCIPHER_HMAC_SHA1);",
          "406:           rc = sqlcipher_codec_ctx_set_hmac_algorithm(ctx, SQLCIPHER_HMAC_SHA256);",
          "408:           rc = sqlcipher_codec_ctx_set_hmac_algorithm(ctx, SQLCIPHER_HMAC_SHA512);",
          "409:         }",
          "410:         if (rc != SQLITE_OK) sqlcipher_codec_ctx_set_error(ctx, SQLITE_ERROR);",
          "",
          "[Removed Lines]",
          "399:   if( sqlite3StrICmp(zLeft,\"cipher_hmac_algorithm\")==0 ){",
          "403:         if(sqlite3StrICmp(zRight, SQLCIPHER_HMAC_SHA1_LABEL) == 0) {",
          "405:         } else if(sqlite3StrICmp(zRight, SQLCIPHER_HMAC_SHA256_LABEL) == 0) {",
          "407:         } else if(sqlite3StrICmp(zRight, SQLCIPHER_HMAC_SHA512_LABEL) == 0) {",
          "",
          "[Added Lines]",
          "399:   if( sqlite3_stricmp(zLeft,\"cipher_hmac_algorithm\")==0 ){",
          "403:         if(sqlite3_stricmp(zRight, SQLCIPHER_HMAC_SHA1_LABEL) == 0) {",
          "405:         } else if(sqlite3_stricmp(zRight, SQLCIPHER_HMAC_SHA256_LABEL) == 0) {",
          "407:         } else if(sqlite3_stricmp(zRight, SQLCIPHER_HMAC_SHA512_LABEL) == 0) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "422:       }",
          "423:     }",
          "424:   }else",
          "426:     if(zRight) {",
          "427:       rc = SQLITE_ERROR;",
          "429:         rc = sqlcipher_set_default_hmac_algorithm(SQLCIPHER_HMAC_SHA1);",
          "431:         rc = sqlcipher_set_default_hmac_algorithm(SQLCIPHER_HMAC_SHA256);",
          "433:         rc = sqlcipher_set_default_hmac_algorithm(SQLCIPHER_HMAC_SHA512);",
          "434:       }",
          "435:     } else {",
          "",
          "[Removed Lines]",
          "425:   if( sqlite3StrICmp(zLeft,\"cipher_default_hmac_algorithm\")==0 ){",
          "428:       if(sqlite3StrICmp(zRight, SQLCIPHER_HMAC_SHA1_LABEL) == 0) {",
          "430:       } else if(sqlite3StrICmp(zRight, SQLCIPHER_HMAC_SHA256_LABEL) == 0) {",
          "432:       } else if(sqlite3StrICmp(zRight, SQLCIPHER_HMAC_SHA512_LABEL) == 0) {",
          "",
          "[Added Lines]",
          "425:   if( sqlite3_stricmp(zLeft,\"cipher_default_hmac_algorithm\")==0 ){",
          "428:       if(sqlite3_stricmp(zRight, SQLCIPHER_HMAC_SHA1_LABEL) == 0) {",
          "430:       } else if(sqlite3_stricmp(zRight, SQLCIPHER_HMAC_SHA256_LABEL) == 0) {",
          "432:       } else if(sqlite3_stricmp(zRight, SQLCIPHER_HMAC_SHA512_LABEL) == 0) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "443:       }",
          "444:     }",
          "445:   }else",
          "447:     if(ctx) {",
          "448:       if(zRight) {",
          "449:         rc = SQLITE_ERROR;",
          "451:           rc = sqlcipher_codec_ctx_set_kdf_algorithm(ctx, SQLCIPHER_PBKDF2_HMAC_SHA1);",
          "453:           rc = sqlcipher_codec_ctx_set_kdf_algorithm(ctx, SQLCIPHER_PBKDF2_HMAC_SHA256);",
          "455:           rc = sqlcipher_codec_ctx_set_kdf_algorithm(ctx, SQLCIPHER_PBKDF2_HMAC_SHA512);",
          "456:         }",
          "457:         if (rc != SQLITE_OK) sqlcipher_codec_ctx_set_error(ctx, SQLITE_ERROR);",
          "",
          "[Removed Lines]",
          "446:   if( sqlite3StrICmp(zLeft,\"cipher_kdf_algorithm\")==0 ){",
          "450:         if(sqlite3StrICmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL) == 0) {",
          "452:         } else if(sqlite3StrICmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL) == 0) {",
          "454:         } else if(sqlite3StrICmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL) == 0) {",
          "",
          "[Added Lines]",
          "446:   if( sqlite3_stricmp(zLeft,\"cipher_kdf_algorithm\")==0 ){",
          "450:         if(sqlite3_stricmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL) == 0) {",
          "452:         } else if(sqlite3_stricmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL) == 0) {",
          "454:         } else if(sqlite3_stricmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL) == 0) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "467:       }",
          "468:     }",
          "469:   }else",
          "471:     if(zRight) {",
          "472:       rc = SQLITE_ERROR;",
          "474:         rc = sqlcipher_set_default_kdf_algorithm(SQLCIPHER_PBKDF2_HMAC_SHA1);",
          "476:         rc = sqlcipher_set_default_kdf_algorithm(SQLCIPHER_PBKDF2_HMAC_SHA256);",
          "478:         rc = sqlcipher_set_default_kdf_algorithm(SQLCIPHER_PBKDF2_HMAC_SHA512);",
          "479:       }",
          "480:     } else {",
          "",
          "[Removed Lines]",
          "470:   if( sqlite3StrICmp(zLeft,\"cipher_default_kdf_algorithm\")==0 ){",
          "473:       if(sqlite3StrICmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL) == 0) {",
          "475:       } else if(sqlite3StrICmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL) == 0) {",
          "477:       } else if(sqlite3StrICmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL) == 0) {",
          "",
          "[Added Lines]",
          "470:   if( sqlite3_stricmp(zLeft,\"cipher_default_kdf_algorithm\")==0 ){",
          "473:       if(sqlite3_stricmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL) == 0) {",
          "475:       } else if(sqlite3_stricmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL) == 0) {",
          "477:       } else if(sqlite3_stricmp(zRight, SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL) == 0) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "488:       }",
          "489:     }",
          "490:   }else",
          "492:     if(ctx) {",
          "493:       if(zRight) {",
          "494:         int version = atoi(zRight);",
          "",
          "[Removed Lines]",
          "491:   if( sqlite3StrICmp(zLeft,\"cipher_compatibility\")==0 ){",
          "",
          "[Added Lines]",
          "491:   if( sqlite3_stricmp(zLeft,\"cipher_compatibility\")==0 ){",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "552:       }",
          "553:     }",
          "554:   }else",
          "556:     if(zRight) {",
          "557:       int version = atoi(zRight);",
          "558:       switch(version) {",
          "",
          "[Removed Lines]",
          "555:   if( sqlite3StrICmp(zLeft,\"cipher_default_compatibility\")==0 ){",
          "",
          "[Added Lines]",
          "555:   if( sqlite3_stricmp(zLeft,\"cipher_default_compatibility\")==0 ){",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "590:       }",
          "591:     }",
          "592:   }else",
          "594:     if( zRight ) {",
          "595:       sqlcipher_set_mem_security(sqlite3GetBoolean(zRight,1));",
          "596:     } else {",
          "",
          "[Removed Lines]",
          "593:   if( sqlite3StrICmp(zLeft,\"cipher_memory_security\")==0 ){",
          "",
          "[Added Lines]",
          "593:   if( sqlite3_stricmp(zLeft,\"cipher_memory_security\")==0 ){",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "598:       codec_vdbe_return_string(pParse, \"cipher_memory_security\", on, P4_DYNAMIC);",
          "599:     }",
          "600:   }else",
          "602:     if(ctx) {",
          "603:       int algorithm;",
          "604:       char *pragma;",
          "",
          "[Removed Lines]",
          "601:   if( sqlite3StrICmp(zLeft,\"cipher_settings\")==0 ){",
          "",
          "[Added Lines]",
          "601:   if( sqlite3_stricmp(zLeft,\"cipher_settings\")==0 ){",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "640:     }",
          "641:   }else",
          "643:     int algorithm;",
          "644:     char *pragma;",
          "",
          "[Removed Lines]",
          "642:   if( sqlite3StrICmp(zLeft,\"cipher_default_settings\")==0 ){",
          "",
          "[Added Lines]",
          "642:   if( sqlite3_stricmp(zLeft,\"cipher_default_settings\")==0 ){",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "677:     }",
          "678:     codec_vdbe_return_string(pParse, \"pragma\", pragma, P4_DYNAMIC);",
          "679:   }else",
          "681:     if(ctx) {",
          "682:       sqlcipher_codec_ctx_integrity_check(ctx, pParse, \"cipher_integrity_check\");",
          "683:     }",
          "684:   } else",
          "686:       unsigned int filter = 0;",
          "687:       printf(\"%s\\n\",zRight);",
          "688:       if(sqlite3_strlike(\"%CORE%\", zRight, '\\'')==0) filter |= SQLCIPHER_TRACE_CORE;",
          "",
          "[Removed Lines]",
          "680:   if( sqlite3StrICmp(zLeft,\"cipher_integrity_check\")==0 ){",
          "685:   if( sqlite3StrICmp(zLeft, \"cipher_trace_filter\")==0 && zRight){",
          "",
          "[Added Lines]",
          "680:   if( sqlite3_stricmp(zLeft,\"cipher_integrity_check\")==0 ){",
          "685:   if( sqlite3_stricmp(zLeft, \"cipher_trace_filter\")==0 && zRight){",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "693:       sqlcipher_set_trace_filter(filter);",
          "694:       codec_vdbe_return_string(pParse, \"cipher_trace_filter\", sqlite3_mprintf(\"%u\", filter), P4_DYNAMIC);",
          "695:   } else",
          "697:       char *profile_status = sqlite3_mprintf(\"%d\", sqlcipher_set_trace(zRight));",
          "698:       codec_vdbe_return_string(pParse, \"cipher_trace\", profile_status, P4_DYNAMIC);",
          "699:   }else {",
          "",
          "[Removed Lines]",
          "696:   if( sqlite3StrICmp(zLeft, \"cipher_trace\")== 0 && zRight ){",
          "",
          "[Added Lines]",
          "696:   if( sqlite3_stricmp(zLeft, \"cipher_trace\")== 0 && zRight ){",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1156:   targetDb_idx =  sqlcipher_find_db_index(db, targetDb);",
          "1158:     rc = SQLITE_ERROR;",
          "1159:     pzErrMsg = sqlite3_mprintf(\"unknown database %s\", targetDb);",
          "1160:     goto end_of_export;",
          "",
          "[Removed Lines]",
          "1157:   if(targetDb_idx == 0 && targetDb != NULL && sqlite3StrICmp(\"main\", targetDb) != 0) {",
          "",
          "[Added Lines]",
          "1157:   if(targetDb_idx == 0 && targetDb != NULL && sqlite3_stricmp(\"main\", targetDb) != 0) {",
          "",
          "---------------"
        ],
        "src/crypto_impl.c||src/crypto_impl.c": [
          "File: src/crypto_impl.c -> src/crypto_impl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1615:   return SQLITE_ERROR;",
          "1616: #else",
          "1617:   FILE *f;",
          "1619:     f = stdout;",
          "1621:     f = stderr;",
          "1623:     f = 0;",
          "1624:   }else{",
          "1625: #if !defined(SQLCIPHER_PROFILE_USE_FOPEN) && (defined(_WIN32) && (__STDC_VERSION__ > 199901L) || defined(SQLITE_OS_WINRT))",
          "",
          "[Removed Lines]",
          "1618:   if(sqlite3StrICmp(destination, \"stdout\") == 0){",
          "1620:   }else if(sqlite3StrICmp(destination, \"stderr\") == 0){",
          "1622:   }else if(sqlite3StrICmp(destination, \"off\") == 0){",
          "",
          "[Added Lines]",
          "1618:   if(sqlite3_stricmp(destination, \"stdout\") == 0){",
          "1620:   }else if(sqlite3_stricmp(destination, \"stderr\") == 0){",
          "1622:   }else if(sqlite3_stricmp(destination, \"off\") == 0){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1677:   sqlcipher_trace_file = NULL;",
          "1678:   sqlcipher_trace_logcat = 0;",
          "1681:     sqlcipher_trace_logcat = 1;",
          "1683:     sqlcipher_trace_file = stdout;",
          "1685:     sqlcipher_trace_file = stderr;",
          "1687: #if !defined(SQLCIPHER_PROFILE_USE_FOPEN) && (defined(_WIN32) && (__STDC_VERSION__ > 199901L) || defined(SQLITE_OS_WINRT))",
          "1688:     if(fopen_s(&sqlcipher_trace_file, destination, \"a\") != 0) return SQLITE_ERROR;",
          "1689: #else",
          "",
          "[Removed Lines]",
          "1680:   if(sqlite3StrICmp(destination, \"logcat\") == 0){",
          "1682:   } else if(sqlite3StrICmp(destination, \"stdout\") == 0){",
          "1684:   }else if(sqlite3StrICmp(destination, \"stderr\") == 0){",
          "1686:   }else if(sqlite3StrICmp(destination, \"off\") != 0){",
          "",
          "[Added Lines]",
          "1680:   if(sqlite3_stricmp(destination, \"logcat\") == 0){",
          "1682:   } else if(sqlite3_stricmp(destination, \"stdout\") == 0){",
          "1684:   }else if(sqlite3_stricmp(destination, \"stderr\") == 0){",
          "1686:   }else if(sqlite3_stricmp(destination, \"off\") != 0){",
          "",
          "---------------"
        ]
      }
    }
  ]
}