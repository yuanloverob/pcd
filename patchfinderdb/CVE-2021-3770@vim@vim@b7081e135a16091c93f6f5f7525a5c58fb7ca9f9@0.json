{
  "cve_id": "CVE-2021-3770",
  "cve_desc": "vim is vulnerable to Heap-based Buffer Overflow",
  "repo": "vim/vim",
  "patch_hash": "b7081e135a16091c93f6f5f7525a5c58fb7ca9f9",
  "patch_info": {
    "commit_hash": "b7081e135a16091c93f6f5f7525a5c58fb7ca9f9",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/b7081e135a16091c93f6f5f7525a5c58fb7ca9f9",
    "files": [
      "src/indent.c",
      "src/option.c",
      "src/optionstr.c",
      "src/testdir/test_retab.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.3402: invalid memory access when using :retab with large value\n\nProblem:    Invalid memory access when using :retab with large value.\nSolution:   Check the number is positive.",
    "before_after_code_files": [
      "src/indent.c||src/indent.c",
      "src/option.c||src/option.c",
      "src/optionstr.c||src/optionstr.c",
      "src/testdir/test_retab.vim||src/testdir/test_retab.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/indent.c||src/indent.c": [
      "File: src/indent.c -> src/indent.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "22:     int",
      "23: tabstop_set(char_u *var, int **array)",
      "24: {",
      "29:     if (var[0] == NUL || (var[0] == '0' && var[1] == NUL))",
      "30:     {",
      "33:     }",
      "35:     for (cp = var; *cp != NUL; ++cp)",
      "",
      "[Removed Lines]",
      "25:     int valcount = 1;",
      "26:     int t;",
      "27:     char_u *cp;",
      "32:  return TRUE;",
      "",
      "[Added Lines]",
      "26:     int     valcount = 1;",
      "27:     int     t;",
      "28:     char_u  *cp;",
      "33:  return OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:   if (cp != end)",
      "44:       emsg(_(e_positive));",
      "45:   else",
      "48:      }",
      "49:  }",
      "",
      "[Removed Lines]",
      "46:       emsg(_(e_invarg));",
      "47:   return FALSE;",
      "",
      "[Added Lines]",
      "47:       semsg(_(e_invarg2), cp);",
      "48:   return FAIL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55:      ++valcount;",
      "56:      continue;",
      "57:  }",
      "60:     }",
      "63:     if (*array == NULL)",
      "65:     (*array)[0] = valcount;",
      "67:     t = 1;",
      "68:     for (cp = var; *cp != NUL;)",
      "69:     {",
      "72:      ++cp;",
      "73:  if (*cp != NUL)",
      "74:      ++cp;",
      "75:     }",
      "78: }",
      "",
      "[Removed Lines]",
      "58:  emsg(_(e_invarg));",
      "59:  return FALSE;",
      "64:  return FALSE;",
      "70:  (*array)[t++] = atoi((char *)cp);",
      "71:  while (*cp  != NUL && *cp != ',')",
      "77:     return TRUE;",
      "",
      "[Added Lines]",
      "59:  semsg(_(e_invarg2), var);",
      "60:  return FAIL;",
      "65:  return FAIL;",
      "71:  int n = atoi((char *)cp);",
      "73:  if (n < 0 || n > 9999)",
      "74:  {",
      "75:      semsg(_(e_invarg2), cp);",
      "76:      return FAIL;",
      "77:  }",
      "78:  (*array)[t++] = n;",
      "79:  while (*cp != NUL && *cp != ',')",
      "85:     return OK;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1592: #ifdef FEAT_VARTABS",
      "1593:     new_ts_str = eap->arg;",
      "1595:  return;",
      "1596:     while (vim_isdigit(*(eap->arg)) || *(eap->arg) == ',')",
      "1597:  ++(eap->arg);",
      "",
      "[Removed Lines]",
      "1594:     if (!tabstop_set(eap->arg, &new_vts_array))",
      "",
      "[Added Lines]",
      "1602:     if (tabstop_set(eap->arg, &new_vts_array) == FAIL)",
      "",
      "---------------"
    ],
    "src/option.c||src/option.c": [
      "File: src/option.c -> src/option.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2449: #endif",
      "2450: #ifdef FEAT_VARTABS",
      "2451:     vim_free(curbuf->b_p_vsts_array);",
      "2453:     vim_free(curbuf->b_p_vts_array);",
      "2455: #endif",
      "2456: }",
      "",
      "[Removed Lines]",
      "2452:     tabstop_set(curbuf->b_p_vsts, &curbuf->b_p_vsts_array);",
      "2454:     tabstop_set(curbuf->b_p_vts,  &curbuf->b_p_vts_array);",
      "",
      "[Added Lines]",
      "2452:     (void)tabstop_set(curbuf->b_p_vsts, &curbuf->b_p_vsts_array);",
      "2454:     (void)tabstop_set(curbuf->b_p_vts,  &curbuf->b_p_vts_array);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5947:      buf->b_p_vsts = vim_strsave(p_vsts);",
      "5948:      COPY_OPT_SCTX(buf, BV_VSTS);",
      "5949:      if (p_vsts && p_vsts != empty_option)",
      "5951:      else",
      "5952:   buf->b_p_vsts_array = 0;",
      "5953:      buf->b_p_vsts_nopaste = p_vsts_nopaste",
      "",
      "[Removed Lines]",
      "5950:   tabstop_set(p_vsts, &buf->b_p_vsts_array);",
      "",
      "[Added Lines]",
      "5950:   (void)tabstop_set(p_vsts, &buf->b_p_vsts_array);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "6107:   buf->b_p_isk = save_p_isk;",
      "6108: #ifdef FEAT_VARTABS",
      "6109:   if (p_vts && p_vts != empty_option && !buf->b_p_vts_array)",
      "6111:   else",
      "6112:       buf->b_p_vts_array = NULL;",
      "6113: #endif",
      "",
      "[Removed Lines]",
      "6110:       tabstop_set(p_vts, &buf->b_p_vts_array);",
      "",
      "[Added Lines]",
      "6110:       (void)tabstop_set(p_vts, &buf->b_p_vts_array);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6122:   buf->b_p_vts = vim_strsave(p_vts);",
      "6123:   COPY_OPT_SCTX(buf, BV_VTS);",
      "6124:   if (p_vts && p_vts != empty_option && !buf->b_p_vts_array)",
      "6126:   else",
      "6127:       buf->b_p_vts_array = NULL;",
      "6128: #endif",
      "",
      "[Removed Lines]",
      "6125:       tabstop_set(p_vts, &buf->b_p_vts_array);",
      "",
      "[Added Lines]",
      "6125:       (void)tabstop_set(p_vts, &buf->b_p_vts_array);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "6818:      if (buf->b_p_vsts_array)",
      "6819:   vim_free(buf->b_p_vsts_array);",
      "6820:      if (buf->b_p_vsts && buf->b_p_vsts != empty_option)",
      "6822:      else",
      "6823:   buf->b_p_vsts_array = 0;",
      "6824: #endif",
      "",
      "[Removed Lines]",
      "6821:   tabstop_set(buf->b_p_vsts, &buf->b_p_vsts_array);",
      "",
      "[Added Lines]",
      "6821:   (void)tabstop_set(buf->b_p_vsts, &buf->b_p_vsts_array);",
      "",
      "---------------"
    ],
    "src/optionstr.c||src/optionstr.c": [
      "File: src/optionstr.c -> src/optionstr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2240:      if (errmsg == NULL)",
      "2241:      {",
      "2242:   int *oldarray = curbuf->b_p_vsts_array;",
      "2244:   {",
      "2245:       if (oldarray)",
      "2246:    vim_free(oldarray);",
      "",
      "[Removed Lines]",
      "2243:   if (tabstop_set(*varp, &(curbuf->b_p_vsts_array)))",
      "",
      "[Added Lines]",
      "2243:   if (tabstop_set(*varp, &(curbuf->b_p_vsts_array)) == OK)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2279:      {",
      "2280:   int *oldarray = curbuf->b_p_vts_array;",
      "2283:   {",
      "2284:       vim_free(oldarray);",
      "2285: #ifdef FEAT_FOLDING",
      "",
      "[Removed Lines]",
      "2282:   if (tabstop_set(*varp, &(curbuf->b_p_vts_array)))",
      "",
      "[Added Lines]",
      "2282:   if (tabstop_set(*varp, &(curbuf->b_p_vts_array)) == OK)",
      "",
      "---------------"
    ],
    "src/testdir/test_retab.vim||src/testdir/test_retab.vim": [
      "File: src/testdir/test_retab.vim -> src/testdir/test_retab.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "75: func Test_retab_error()",
      "76:   call assert_fails('retab -1',  'E487:')",
      "77:   call assert_fails('retab! -1', 'E487:')",
      "78: endfunc",
      "80: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:   call assert_fails('ret -1000', 'E487:')",
      "79:   call assert_fails('ret 10000', 'E475:')",
      "80:   call assert_fails('ret 80000000000000000000', 'E475:')",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "756: static int included_patches[] =",
      "759:     3401,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "759:     3402,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fc88df42f1ae64bcc4d6cbc0fbd3445f8c59afdf",
      "candidate_info": {
        "commit_hash": "fc88df42f1ae64bcc4d6cbc0fbd3445f8c59afdf",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/fc88df42f1ae64bcc4d6cbc0fbd3445f8c59afdf",
        "files": [
          "src/indent.c",
          "src/testdir/test_vartabs.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4298: divide by zero with huge tabstop value\n\nProblem:    Divide by zero with huge tabstop value.\nSolution:   Reject tabstop value that overflows to zero.",
        "before_after_code_files": [
          "src/indent.c||src/indent.c",
          "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/indent.c||src/indent.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/indent.c||src/indent.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/indent.c||src/indent.c": [
          "File: src/indent.c -> src/indent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  int n = atoi((char *)cp);",
          "75:  {",
          "76:      semsg(_(e_invalid_argument_str), cp);",
          "77:      vim_free(*array);",
          "",
          "[Removed Lines]",
          "74:  if (n < 0 || n > TABSTOP_MAX)",
          "",
          "[Added Lines]",
          "74:  if (n <= 0 || n > TABSTOP_MAX)",
          "",
          "---------------"
        ],
        "src/testdir/test_vartabs.vim||src/testdir/test_vartabs.vim": [
          "File: src/testdir/test_vartabs.vim -> src/testdir/test_vartabs.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   bwipeout!",
          "147: endfunc",
          "149: func Test_vartabs_breakindent()",
          "150:   CheckOption breakindent",
          "151:   new",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: func Test_retab_invalid_arg()",
          "150:   new",
          "151:   call setline(1, \"\\ttext\")",
          "152:   retab 0",
          "153:   call assert_fails(\"retab -8\", 'E487: Argument must be positive')",
          "154:   call assert_fails(\"retab 10000\", 'E475:')",
          "155:   call assert_fails(\"retab 720575940379279360\", 'E475:')",
          "156:   bwipe!",
          "157: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: static int included_patches[] =",
          "750:     4297,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:     4298,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "652dee448618589de5528a9e9a36995803f5557a",
      "candidate_info": {
        "commit_hash": "652dee448618589de5528a9e9a36995803f5557a",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/652dee448618589de5528a9e9a36995803f5557a",
        "files": [
          "src/indent.c",
          "src/option.c",
          "src/testdir/test_options.vim",
          "src/version.c",
          "src/vim.h"
        ],
        "message": "patch 8.2.4245: \":retab 0\" may cause illegal memory access\n\nProblem:    \":retab 0\" may cause illegal memory access.\nSolution:   Limit the value of 'tabstop' to 10000.",
        "before_after_code_files": [
          "src/indent.c||src/indent.c",
          "src/option.c||src/option.c",
          "src/testdir/test_options.vim||src/testdir/test_options.vim",
          "src/version.c||src/version.c",
          "src/vim.h||src/vim.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/indent.c||src/indent.c",
            "src/option.c||src/option.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/indent.c||src/indent.c",
            "src/option.c||src/option.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/indent.c||src/indent.c": [
          "File: src/indent.c -> src/indent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  int n = atoi((char *)cp);",
          "75:  {",
          "76:      semsg(_(e_invalid_argument_str), cp);",
          "77:      vim_free(*array);",
          "",
          "[Removed Lines]",
          "74:  if (n < 0 || n > 9999)",
          "",
          "[Added Lines]",
          "74:  if (n < 0 || n > TABSTOP_MAX)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1649:  emsg(_(e_argument_must_be_positive));",
          "1650:  return;",
          "1651:     }",
          "1653:     {",
          "1654:  semsg(_(e_invalid_argument_str), eap->arg);",
          "1655:  return;",
          "",
          "[Removed Lines]",
          "1652:     if (new_ts < 0 || new_ts > 9999)",
          "",
          "[Added Lines]",
          "1652:     if (new_ts < 0 || new_ts > TABSTOP_MAX)",
          "",
          "---------------"
        ],
        "src/option.c||src/option.c": [
          "File: src/option.c -> src/option.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3752:  errmsg = e_argument_must_be_positive;",
          "3753:  curbuf->b_p_ts = 8;",
          "3754:     }",
          "3755:     if (p_tm < 0)",
          "3756:     {",
          "3757:  errmsg = e_argument_must_be_positive;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3755:     else if (curbuf->b_p_ts > TABSTOP_MAX)",
          "3756:     {",
          "3757:  errmsg = e_invalid_argument;",
          "3758:  curbuf->b_p_ts = 8;",
          "3759:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5983:      if (p_vsts && p_vsts != empty_option)",
          "5984:   (void)tabstop_set(p_vsts, &buf->b_p_vsts_array);",
          "5985:      else",
          "5987:      buf->b_p_vsts_nopaste = p_vsts_nopaste",
          "5988:      ? vim_strsave(p_vsts_nopaste) : NULL;",
          "5989: #endif",
          "",
          "[Removed Lines]",
          "5986:   buf->b_p_vsts_array = 0;",
          "",
          "[Added Lines]",
          "5991:   buf->b_p_vsts_array = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6803:      if (buf->b_p_vsts)",
          "6804:   free_string_option(buf->b_p_vsts);",
          "6805:      buf->b_p_vsts = empty_option;",
          "6809: #endif",
          "6810:  }",
          "",
          "[Removed Lines]",
          "6806:      if (buf->b_p_vsts_array)",
          "6807:   vim_free(buf->b_p_vsts_array);",
          "6808:      buf->b_p_vsts_array = 0;",
          "",
          "[Added Lines]",
          "6811:      VIM_CLEAR(buf->b_p_vsts_array);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6851:   free_string_option(buf->b_p_vsts);",
          "6852:      buf->b_p_vsts = buf->b_p_vsts_nopaste",
          "6853:     ? vim_strsave(buf->b_p_vsts_nopaste) : empty_option;",
          "6856:      if (buf->b_p_vsts && buf->b_p_vsts != empty_option)",
          "6857:   (void)tabstop_set(buf->b_p_vsts, &buf->b_p_vsts_array);",
          "6858:      else",
          "6860: #endif",
          "6861:  }",
          "",
          "[Removed Lines]",
          "6854:      if (buf->b_p_vsts_array)",
          "6855:   vim_free(buf->b_p_vsts_array);",
          "6859:   buf->b_p_vsts_array = 0;",
          "",
          "[Added Lines]",
          "6857:      vim_free(buf->b_p_vsts_array);",
          "6861:   buf->b_p_vsts_array = NULL;",
          "",
          "---------------"
        ],
        "src/testdir/test_options.vim||src/testdir/test_options.vim": [
          "File: src/testdir/test_options.vim -> src/testdir/test_options.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:   call assert_fails('set shiftwidth=-1', 'E487:')",
          "369:   call assert_fails('set sidescroll=-1', 'E487:')",
          "370:   call assert_fails('set tabstop=-1', 'E487:')",
          "371:   call assert_fails('set textwidth=-1', 'E487:')",
          "372:   call assert_fails('set timeoutlen=-1', 'E487:')",
          "373:   call assert_fails('set updatecount=-1', 'E487:')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:   call assert_fails('set tabstop=10000', 'E474:')",
          "372:   call assert_fails('set tabstop=5500000000', 'E474:')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4244,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4245,",
          "",
          "---------------"
        ],
        "src/vim.h||src/vim.h": [
          "File: src/vim.h -> src/vim.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2086: #define DICT_MAXNEST 100 // maximum nesting of lists and dicts",
          "2088: #ifdef FEAT_CLIPBOARD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2088: #define TABSTOP_MAX 9999",
          "",
          "---------------"
        ]
      }
    }
  ]
}