{
  "cve_id": "CVE-2013-0166",
  "cve_desc": "OpenSSL before 0.9.8y, 1.0.0 before 1.0.0k, and 1.0.1 before 1.0.1d does not properly perform signature verification for OCSP responses, which allows remote OCSP servers to cause a denial of service (NULL pointer dereference and application crash) via an invalid key.",
  "repo": "openssl/openssl",
  "patch_hash": "b48310627d1fdc58f64ccf208ac82c732e654dca",
  "patch_info": {
    "commit_hash": "b48310627d1fdc58f64ccf208ac82c732e654dca",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/b48310627d1fdc58f64ccf208ac82c732e654dca",
    "files": [
      "CHANGES",
      "crypto/asn1/a_verify.c",
      "crypto/ocsp/ocsp_vfy.c"
    ],
    "message": "Don't try and verify signatures if key is NULL (CVE-2013-0166) Add additional check to catch this in ASN1_item_verify too. (cherry picked from commit 66e8211c0b1347970096e04b18aa52567c325200)",
    "before_after_code_files": [
      "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
      "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
    ]
  },
  "patch_diff": {
    "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
      "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:  int mdnid, pknid;",
      "143:  EVP_MD_CTX_init(&ctx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:  if (!pkey)",
      "144:   {",
      "145:   ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_PASSED_NULL_PARAMETER);",
      "146:   return -1;",
      "147:   }",
      "",
      "---------------"
    ],
    "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c": [
      "File: crypto/ocsp/ocsp_vfy.c -> crypto/ocsp/ocsp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   {",
      "92:   EVP_PKEY *skey;",
      "93:   skey = X509_get_pubkey(signer);",
      "97:    {",
      "98:    OCSPerr(OCSP_F_OCSP_BASIC_VERIFY, OCSP_R_SIGNATURE_FAILURE);",
      "99:    goto end;",
      "",
      "[Removed Lines]",
      "94:   ret = OCSP_BASICRESP_verify(bs, skey, 0);",
      "95:   EVP_PKEY_free(skey);",
      "96:   if(ret <= 0)",
      "",
      "[Added Lines]",
      "94:   if (skey)",
      "95:    {",
      "96:    ret = OCSP_BASICRESP_verify(bs, skey, 0);",
      "97:    EVP_PKEY_free(skey);",
      "98:    }",
      "99:   if(!skey || ret <= 0)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ca5efc2874e094d6382b30416824eda6dde52fe",
      "candidate_info": {
        "commit_hash": "4ca5efc2874e094d6382b30416824eda6dde52fe",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4ca5efc2874e094d6382b30416824eda6dde52fe",
        "files": [
          "crypto/ocsp/ocsp_vfy.c"
        ],
        "message": "Make OCSP response verification more flexible.\n\nIf a set of certificates is supplied to OCSP_basic_verify use those in\naddition to any present in the OCSP response as untrusted CAs when\nverifying a certificate chain.\n\nPR#3668\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ],
          "candidate": [
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c": [
          "File: crypto/ocsp/ocsp_vfy.c -> crypto/ocsp/ocsp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: {",
          "85:     X509 *signer, *x;",
          "86:     STACK_OF(X509) *chain = NULL;",
          "87:     X509_STORE_CTX ctx;",
          "88:     int i, ret = 0;",
          "89:     ret = ocsp_find_signer(&signer, bs, certs, st, flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     STACK_OF(X509) *untrusted = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     }",
          "109:     if (!(flags & OCSP_NOVERIFY)) {",
          "110:         int init_res;",
          "115:         if (!init_res) {",
          "116:             ret = -1;",
          "117:             OCSPerr(OCSP_F_OCSP_BASIC_VERIFY, ERR_R_X509_LIB);",
          "",
          "[Removed Lines]",
          "111:         if (flags & OCSP_NOCHAIN)",
          "112:             init_res = X509_STORE_CTX_init(&ctx, st, signer, NULL);",
          "113:         else",
          "114:             init_res = X509_STORE_CTX_init(&ctx, st, signer, bs->certs);",
          "",
          "[Added Lines]",
          "112:         if (flags & OCSP_NOCHAIN) {",
          "113:             untrusted = NULL;",
          "114:         } else if (bs->certs && certs) {",
          "115:             untrusted = sk_X509_dup(bs->certs);",
          "116:             for (i = 0; i < sk_X509_num(certs); i++) {",
          "117:                 if (!sk_X509_push(untrusted, sk_X509_value(certs, i))) {",
          "118:                     OCSPerr(OCSP_F_OCSP_BASIC_VERIFY, ERR_R_MALLOC_FAILURE);",
          "119:                     goto end;",
          "120:                 }",
          "121:             }",
          "122:         } else {",
          "123:             untrusted = bs->certs;",
          "124:         }",
          "125:         init_res = X509_STORE_CTX_init(&ctx, st, signer, untrusted);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:  end:",
          "163:     if (chain)",
          "164:         sk_X509_pop_free(chain, X509_free);",
          "165:     return ret;",
          "166: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     if (bs->certs && certs)",
          "177:         sk_X509_free(untrusted);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ebc71865f0506a293242bd4aec97cdc7a8ef24b0",
      "candidate_info": {
        "commit_hash": "ebc71865f0506a293242bd4aec97cdc7a8ef24b0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ebc71865f0506a293242bd4aec97cdc7a8ef24b0",
        "files": [
          "CHANGES",
          "crypto/asn1/a_verify.c",
          "crypto/ocsp/ocsp_vfy.c"
        ],
        "message": "Don't try and verify signatures if key is NULL (CVE-2013-0166) Add additional check to catch this in ASN1_item_verify too.",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
          "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:  int mdnid, pknid;",
          "139:  EVP_MD_CTX_init(&ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:  if (!pkey)",
          "140:   {",
          "141:   ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_PASSED_NULL_PARAMETER);",
          "142:   return -1;",
          "143:   }",
          "",
          "---------------"
        ],
        "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c": [
          "File: crypto/ocsp/ocsp_vfy.c -> crypto/ocsp/ocsp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   {",
          "92:   EVP_PKEY *skey;",
          "93:   skey = X509_get_pubkey(signer);",
          "97:    {",
          "98:    OCSPerr(OCSP_F_OCSP_BASIC_VERIFY, OCSP_R_SIGNATURE_FAILURE);",
          "99:    goto end;",
          "",
          "[Removed Lines]",
          "94:   ret = OCSP_BASICRESP_verify(bs, skey, 0);",
          "95:   EVP_PKEY_free(skey);",
          "96:   if(ret <= 0)",
          "",
          "[Added Lines]",
          "94:   if (skey)",
          "95:    {",
          "96:    ret = OCSP_BASICRESP_verify(bs, skey, 0);",
          "97:    EVP_PKEY_free(skey);",
          "98:    }",
          "99:   if(!skey || ret <= 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62e4506a7d4cec1c8e1ff687f6b220f6a62a57c7",
      "candidate_info": {
        "commit_hash": "62e4506a7d4cec1c8e1ff687f6b220f6a62a57c7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/62e4506a7d4cec1c8e1ff687f6b220f6a62a57c7",
        "files": [
          "CHANGES",
          "crypto/asn1/a_verify.c",
          "crypto/ocsp/ocsp_vfy.c"
        ],
        "message": "Don't try and verify signatures if key is NULL (CVE-2013-0166) Add additional check to catch this in ASN1_item_verify too.",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
          "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:  int mdnid, pknid;",
          "143:  EVP_MD_CTX_init(&ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:  if (!pkey)",
          "144:   {",
          "145:   ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_PASSED_NULL_PARAMETER);",
          "146:   return -1;",
          "147:   }",
          "",
          "---------------"
        ],
        "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c": [
          "File: crypto/ocsp/ocsp_vfy.c -> crypto/ocsp/ocsp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   {",
          "92:   EVP_PKEY *skey;",
          "93:   skey = X509_get_pubkey(signer);",
          "97:    {",
          "98:    OCSPerr(OCSP_F_OCSP_BASIC_VERIFY, OCSP_R_SIGNATURE_FAILURE);",
          "99:    goto end;",
          "",
          "[Removed Lines]",
          "94:   ret = OCSP_BASICRESP_verify(bs, skey, 0);",
          "95:   EVP_PKEY_free(skey);",
          "96:   if(ret <= 0)",
          "",
          "[Added Lines]",
          "94:   if (skey)",
          "95:    {",
          "96:    ret = OCSP_BASICRESP_verify(bs, skey, 0);",
          "97:    EVP_PKEY_free(skey);",
          "98:    }",
          "99:   if(!skey || ret <= 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}