{
  "cve_id": "CVE-2019-20805",
  "cve_desc": "p_lx_elf.cpp in UPX before 3.96 has an integer overflow during unpacking via crafted values in a PT_DYNAMIC segment.",
  "repo": "upx/upx",
  "patch_hash": "8be9da8280dfa69d5df4417d4d81bda1cab78010",
  "patch_info": {
    "commit_hash": "8be9da8280dfa69d5df4417d4d81bda1cab78010",
    "repo": "upx/upx",
    "commit_url": "https://github.com/upx/upx/commit/8be9da8280dfa69d5df4417d4d81bda1cab78010",
    "files": [
      "src/p_lx_elf.cpp"
    ],
    "message": "Avoid bogus values in PT_DYNAMIC segment.\n\nDetect duplicate DT_*.\nDetect out-of-bounds hashtab and gashtab.\nDetect missing DT_REL, DT_RELA.\nDetect out-of-bounds d_val.\nhttps://github.com/upx/upx/issues/317\n\tmodified:   p_lx_elf.cpp",
    "before_after_code_files": [
      "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
    ]
  },
  "patch_diff": {
    "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
      "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1574:     for (; ; ++ndx, ++dynp) {",
      "1575:         unsigned const d_tag = get_te32(&dynp->d_tag);",
      "1576:         if (d_tag < DT_NUM) {",
      "1577:             dt_table[d_tag] = ndx;",
      "1578:         }",
      "1579:         if (Elf32_Dyn::DT_NULL == d_tag) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1577:             if (dt_table[d_tag]",
      "1578:             &&    get_te32(&dynp->d_val)",
      "1579:                != get_te32(&dynp0[-1+ dt_table[d_tag]].d_val)) {",
      "1580:                 char msg[50]; snprintf(msg, sizeof(msg),",
      "1581:                     \"duplicate DT_%#x: [%#x] [%#x]\",",
      "1582:                     d_tag, -1+ dt_table[d_tag], -1+ ndx);",
      "1583:                 throwCantPack(msg);",
      "1584:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1607:         }",
      "1608:     }",
      "1611:     if (v_hsh && file_image) {",
      "1613:         unsigned const nbucket = get_te32(&hashtab[0]);",
      "1614:         unsigned const *const buckets = &hashtab[2];",
      "1615:         unsigned const *const chains = &buckets[nbucket]; (void)chains;",
      "",
      "[Removed Lines]",
      "1610:     unsigned const v_hsh = elf_unsigned_dynamic(Elf64_Dyn::DT_HASH);",
      "1612:         hashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_HASH);",
      "",
      "[Added Lines]",
      "1618:     unsigned const v_hsh = elf_unsigned_dynamic(Elf32_Dyn::DT_HASH);",
      "1620:         hashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_HASH);",
      "1621:         if (!hashtab) {",
      "1622:             char msg[40]; snprintf(msg, sizeof(msg),",
      "1623:                \"bad DT_HASH %#x\", v_hsh);",
      "1624:             throwCantPack(msg);",
      "1625:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1632:     unsigned const v_gsh = elf_unsigned_dynamic(Elf32_Dyn::DT_GNU_HASH);",
      "1633:     if (v_gsh && file_image) {",
      "1634:         gashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_GNU_HASH);",
      "1635:         unsigned const n_bucket = get_te32(&gashtab[0]);",
      "1636:         unsigned const n_bitmask = get_te32(&gashtab[2]);",
      "1637:         unsigned const gnu_shift = get_te32(&gashtab[3]);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1648:         if (!gashtab) {",
      "1649:             char msg[40]; snprintf(msg, sizeof(msg),",
      "1650:                \"bad DT_GNU_HASH %#x\", v_gsh);",
      "1651:             throwCantPack(msg);",
      "1652:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1796: bool PackLinuxElf64::calls_crt1(Elf64_Rela const *rela, int sz)",
      "1797: {",
      "1799:         return false;",
      "1800:     }",
      "1801:     for (unsigned relnum= 0; 0 < sz; (sz -= sizeof(Elf64_Rela)), ++rela, ++relnum) {",
      "",
      "[Removed Lines]",
      "1798:     if (!dynsym || !dynstr) {",
      "",
      "[Added Lines]",
      "1816:     if (!dynsym || !dynstr || !rela) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1833: bool PackLinuxElf32::calls_crt1(Elf32_Rel const *rel, int sz)",
      "1834: {",
      "1836:         return false;",
      "1837:     }",
      "1838:     for (unsigned relnum= 0; 0 < sz; (sz -= sizeof(Elf32_Rel)), ++rel, ++relnum) {",
      "",
      "[Removed Lines]",
      "1835:     if (!dynsym || !dynstr) {",
      "",
      "[Added Lines]",
      "1853:     if (!dynsym || !dynstr || !rel) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4901:     for (; (unsigned)((char const *)dynp - (char const *)dynseg) < sz_dynseg",
      "4902:             && Elf32_Dyn::DT_NULL!=dynp->d_tag; ++dynp) if (get_te32(&dynp->d_tag)==key) {",
      "4903:         unsigned const t= elf_get_offset_from_address(get_te32(&dynp->d_val));",
      "4905:             return t + file_image;",
      "4906:         }",
      "4907:         break;",
      "",
      "[Removed Lines]",
      "4904:         if (t) {",
      "",
      "[Added Lines]",
      "4922:         if (t && t < file_size) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "5011:             throwCantPack(msg);",
      "5012:         }",
      "5013:         if (d_tag < DT_NUM) {",
      "5014:             dt_table[d_tag] = ndx;",
      "5015:         }",
      "5016:         if (Elf64_Dyn::DT_NULL == d_tag) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5032:             if (dt_table[d_tag]",
      "5033:             &&    get_te64(&dynp->d_val)",
      "5034:                != get_te64(&dynp0[-1+ dt_table[d_tag]].d_val)) {",
      "5035:                 char msg[50]; snprintf(msg, sizeof(msg),",
      "5036:                     \"duplicate DT_%#x: [%#x] [%#x]\",",
      "5037:                     (unsigned)d_tag, -1+ dt_table[d_tag], -1+ ndx);",
      "5038:                 throwCantPack(msg);",
      "5039:             }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "5049:     unsigned const v_hsh = elf_unsigned_dynamic(Elf64_Dyn::DT_HASH);",
      "5050:     if (v_hsh && file_image) {",
      "5051:         hashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_HASH);",
      "5052:         unsigned const nbucket = get_te32(&hashtab[0]);",
      "5053:         unsigned const *const buckets = &hashtab[2];",
      "5054:         unsigned const *const chains = &buckets[nbucket]; (void)chains;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5078:         if (!hashtab) {",
      "5079:             char msg[40]; snprintf(msg, sizeof(msg),",
      "5080:                \"bad DT_HASH %#x\", v_hsh);",
      "5081:             throwCantPack(msg);",
      "5082:         }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5071:     unsigned const v_gsh = elf_unsigned_dynamic(Elf64_Dyn::DT_GNU_HASH);",
      "5072:     if (v_gsh && file_image) {",
      "5073:         gashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_GNU_HASH);",
      "5074:         unsigned const n_bucket = get_te32(&gashtab[0]);",
      "5075:         unsigned const n_bitmask = get_te32(&gashtab[2]);",
      "5076:         unsigned const gnu_shift = get_te32(&gashtab[3]);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5105:         if (!gashtab) {",
      "5106:             char msg[40]; snprintf(msg, sizeof(msg),",
      "5107:                \"bad DT_GNU_HASH %#x\", v_gsh);",
      "5108:             throwCantPack(msg);",
      "5109:         }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "5116:     for (; (unsigned)((char const *)dynp - (char const *)dynseg) < sz_dynseg",
      "5117:             && Elf64_Dyn::DT_NULL!=dynp->d_tag; ++dynp) if (get_te64(&dynp->d_tag)==key) {",
      "5118:         upx_uint64_t const t= elf_get_offset_from_address(get_te64(&dynp->d_val));",
      "5121:         }",
      "5122:         break;",
      "5123:     }",
      "",
      "[Removed Lines]",
      "5119:         if (t) {",
      "5120:             return &((unsigned char const *)file_image)[(size_t)t];",
      "",
      "[Added Lines]",
      "5155:         if (t && t < (upx_uint64_t)file_size) {",
      "5156:             return t + file_image;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "780a4347b81c7c397fc1f1ca8d8e88d551044519",
      "candidate_info": {
        "commit_hash": "780a4347b81c7c397fc1f1ca8d8e88d551044519",
        "repo": "upx/upx",
        "commit_url": "https://github.com/upx/upx/commit/780a4347b81c7c397fc1f1ca8d8e88d551044519",
        "files": [
          "src/p_lx_elf.cpp",
          "src/p_lx_elf.h"
        ],
        "message": "Check DT_HASH and DT_GNU_HASH.\n\nhttps://github.com/upx/upx/issues/235  POC2,POC4\nAlso cleanup checking of symbol number and .st_name\nin POC1,POC3,POC5,POC7,POC9,POC11\n\tmodified:   p_lx_elf.cpp\n\tmodified:   p_lx_elf.h",
        "before_after_code_files": [
          "src/p_lx_elf.cpp||src/p_lx_elf.cpp",
          "src/p_lx_elf.h||src/p_lx_elf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ],
          "candidate": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
          "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1598:             symnum_end = (v_str - v_sym) / sz_sym;",
          "1599:         }",
          "1600:     }",
          "1601: }",
          "1603: Elf32_Phdr const *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1602:     unsigned const v_hsh = elf_unsigned_dynamic(Elf64_Dyn::DT_HASH);",
          "1603:     if (v_hsh && file_image) {",
          "1604:         hashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_HASH);",
          "1605:         unsigned const nbucket = get_te32(&hashtab[0]);",
          "1606:         unsigned const *const buckets = &hashtab[2];",
          "1607:         unsigned const *const chains = &buckets[nbucket];",
          "1609:         unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "1610:         if (v_hsh < v_sym",
          "1611:         && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers",
          "1612:            + sizeof(*buckets)*nbucket  // buckets",
          "1613:            + sizeof(*chains) *nbucket  // chains",
          "1614:            )) {",
          "1615:             char msg[90]; snprintf(msg, sizeof(msg),",
          "1616:                 \"bad DT_HASH nbucket=%#x  len=%#x\",",
          "1617:                 nbucket, (v_sym - v_hsh));",
          "1618:             throwCantPack(msg);",
          "1619:         }",
          "1620:     }",
          "1622:     unsigned const v_gsh = elf_unsigned_dynamic(Elf32_Dyn::DT_GNU_HASH);",
          "1623:     if (v_gsh && file_image) {",
          "1624:         gashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_GNU_HASH);",
          "1625:         unsigned const n_bucket = get_te32(&gashtab[0]);",
          "1626:         unsigned const n_bitmask = get_te32(&gashtab[2]);",
          "1627:         unsigned const *const bitmask = (unsigned const *)(void const *)&gashtab[4];",
          "1628:         unsigned     const *const buckets = (unsigned const *)&bitmask[n_bitmask];",
          "1629:         unsigned     const *const hasharr = &buckets[n_bucket];",
          "1632:         unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "1633:         if (v_gsh < v_sym",
          "1634:         && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers",
          "1635:            + sizeof(*bitmask)*n_bitmask  // bitmask",
          "1636:            + sizeof(*buckets)*n_bucket  // buckets",
          "1637:            + sizeof(*hasharr)*n_bucket  // hasharr",
          "1638:            )) {",
          "1639:             char msg[90]; snprintf(msg, sizeof(msg),",
          "1640:                 \"bad DT_GNU_HASH n_bucket=%#x  n_bitmask=%#x  len=%#x\",",
          "1641:                 n_bucket, n_bitmask, v_sym - v_gsh);",
          "1642:             throwCantPack(msg);",
          "1643:         }",
          "1644:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1691:     return 0;",
          "1692: }",
          "1694: char const *PackLinuxElf64::get_dynsym_name(unsigned symnum, unsigned relnum) const",
          "1695: {",
          "1696:     if (symnum_end <= symnum) {",
          "1698:             \"bad symnum %#x in Elf64_Rel[%d]\\n\", symnum, relnum);",
          "1699:         throwCantPack(msg);",
          "1700:     }",
          "1708: }",
          "1710: bool PackLinuxElf64::calls_crt1(Elf64_Rela const *rela, int sz)",
          "",
          "[Removed Lines]",
          "1697:         char msg[50]; snprintf(msg, sizeof(msg),",
          "1701:     unsigned st_name = get_te64(&dynsym[symnum].st_name);",
          "1702:     if (strtab_end <= st_name) {",
          "1703:         char msg[50]; snprintf(msg, sizeof(msg),",
          "1704:             \"bad .st_name %#x in DT_STRTAB[%d]\\n\", st_name, symnum);",
          "1705:         throwCantPack(msg);",
          "1706:     }",
          "1707:     return &dynstr[st_name];",
          "",
          "[Added Lines]",
          "1738: char const *PackLinuxElf64::get_str_name(upx_uint64_t st_name, unsigned symnum) const",
          "1739: {",
          "1740:     if (strtab_end <= st_name) {",
          "1741:         char msg[70]; snprintf(msg, sizeof(msg),",
          "1742:             \"bad .st_name %#lx in DT_SYMTAB[%d]\\n\", (unsigned long)st_name, symnum);",
          "1743:         throwCantPack(msg);",
          "1744:     }",
          "1745:     return &dynstr[st_name];",
          "1746: }",
          "1751:         char msg[70]; snprintf(msg, sizeof(msg),",
          "1755:     return get_str_name(get_te64(&dynsym[symnum].st_name), symnum);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1724:     return false;",
          "1725: }",
          "1727: char const *PackLinuxElf32::get_dynsym_name(unsigned symnum, unsigned relnum) const",
          "1728: {",
          "1729:     if (symnum_end <= symnum) {",
          "1731:             \"bad symnum %#x in Elf32_Rel[%d]\\n\", symnum, relnum);",
          "1732:         throwCantPack(msg);",
          "1733:     }",
          "1741: }",
          "1743: bool PackLinuxElf32::calls_crt1(Elf32_Rel const *rel, int sz)",
          "",
          "[Removed Lines]",
          "1730:         char msg[50]; snprintf(msg, sizeof(msg),",
          "1734:     unsigned st_name = get_te32(&dynsym[symnum].st_name);",
          "1735:     if (strtab_end <= st_name) {",
          "1736:         char msg[50]; snprintf(msg, sizeof(msg),",
          "1737:             \"bad .st_name %#x in DT_STRTAB[%d]\\n\", st_name, symnum);",
          "1738:         throwCantPack(msg);",
          "1739:     }",
          "1740:     return &dynstr[st_name];",
          "",
          "[Added Lines]",
          "1775: char const *PackLinuxElf32::get_str_name(unsigned st_name, unsigned symnum) const",
          "1776: {",
          "1777:     if (strtab_end <= st_name) {",
          "1778:         char msg[70]; snprintf(msg, sizeof(msg),",
          "1779:             \"bad .st_name %#x in DT_SYMTAB[%d]\\n\", st_name, symnum);",
          "1780:         throwCantPack(msg);",
          "1781:     }",
          "1782:     return &dynstr[st_name];",
          "1783: }",
          "1788:         char msg[70]; snprintf(msg, sizeof(msg),",
          "1792:     return get_str_name(get_te32(&dynsym[symnum].st_name), symnum);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2738: PackLinuxElf32::adjABS(Elf32_Sym *sym, unsigned delta)",
          "2739: {",
          "2740:     for (int j = 0; abs_symbol_names[j][0]; ++j) {",
          "2742:             sym->st_value += delta;",
          "2743:             return 1;",
          "2744:         }",
          "",
          "[Removed Lines]",
          "2741:         if (!strcmp(abs_symbol_names[j], &dynstr[sym->st_name])) {",
          "",
          "[Added Lines]",
          "2793:         unsigned st_name = get_te32(&sym->st_name);",
          "2794:         if (!strcmp(abs_symbol_names[j], get_str_name(st_name, -1))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2750: PackLinuxElf64::adjABS(Elf64_Sym *sym, unsigned delta)",
          "2751: {",
          "2752:     for (int j = 0; abs_symbol_names[j][0]; ++j) {",
          "2754:             sym->st_value += delta;",
          "2755:             return 1;",
          "2756:         }",
          "",
          "[Removed Lines]",
          "2753:         if (!strcmp(abs_symbol_names[j], &dynstr[sym->st_name])) {",
          "",
          "[Added Lines]",
          "2806:         upx_uint64_t st_name = get_te64(&sym->st_name);",
          "2807:         if (!strcmp(abs_symbol_names[j], get_str_name(st_name, -1))) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4669:             symnum_end = (v_str - v_sym) / sz_sym;",
          "4670:         }",
          "4671:     }",
          "4672: }",
          "4674: void const *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4729:     unsigned const v_hsh = elf_unsigned_dynamic(Elf64_Dyn::DT_HASH);",
          "4730:     if (v_hsh && file_image) {",
          "4731:         hashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_HASH);",
          "4732:         unsigned const nbucket = get_te32(&hashtab[0]);",
          "4733:         unsigned const *const buckets = &hashtab[2];",
          "4734:         unsigned const *const chains = &buckets[nbucket];",
          "4736:         unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "4737:         if (v_hsh < v_sym",
          "4738:         && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers",
          "4739:            + sizeof(*buckets)*nbucket  // buckets",
          "4740:            + sizeof(*chains) *nbucket  // chains",
          "4741:            )) {",
          "4742:             char msg[90]; snprintf(msg, sizeof(msg),",
          "4743:                 \"bad DT_HASH nbucket=%#x  len=%#x\",",
          "4744:                 nbucket, (v_sym - v_hsh));",
          "4745:             throwCantPack(msg);",
          "4746:         }",
          "4747:     }",
          "4749:     unsigned const v_gsh = elf_unsigned_dynamic(Elf64_Dyn::DT_GNU_HASH);",
          "4750:     if (v_gsh && file_image) {",
          "4751:         gashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_GNU_HASH);",
          "4752:         unsigned const n_bucket = get_te32(&gashtab[0]);",
          "4753:         unsigned const n_bitmask = get_te32(&gashtab[2]);",
          "4754:         upx_uint64_t const *const bitmask = (upx_uint64_t const *)(void const *)&gashtab[4];",
          "4755:         unsigned     const *const buckets = (unsigned const *)&bitmask[n_bitmask];",
          "4756:         unsigned     const *const hasharr = &buckets[n_bucket];",
          "4759:         upx_uint64_t const v_sym = get_te64(&dynp0[-1+ x_sym].d_val);",
          "4760:         if (v_gsh < v_sym",
          "4761:         && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers",
          "4762:            + sizeof(*bitmask)*n_bitmask  // bitmask",
          "4763:            + sizeof(*buckets)*n_bucket  // buckets",
          "4764:            + sizeof(*hasharr)*n_bucket  // hasharr",
          "4765:            )) {",
          "4766:             char msg[90]; snprintf(msg, sizeof(msg),",
          "4767:                 \"bad DT_GNU_HASH n_bucket=%#x  n_bitmask=%#x  len=%#lx\",",
          "4768:                 n_bucket, n_bitmask, (long unsigned)(v_sym - v_gsh));",
          "4769:             throwCantPack(msg);",
          "4770:         }",
          "4771:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4733:         unsigned const m = elf_hash(name) % nbucket;",
          "4734:         unsigned si;",
          "4735:         for (si= get_te32(&buckets[m]); 0!=si; si= get_te32(&chains[si])) {",
          "4737:             if (0==strcmp(name, p)) {",
          "4738:                 return &dynsym[si];",
          "4739:             }",
          "",
          "[Removed Lines]",
          "4736:             char const *const p= get_dynsym_name(si, 0);",
          "",
          "[Added Lines]",
          "4836:             char const *const p= get_dynsym_name(si, -1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4746:         unsigned const gnu_shift = get_te32(&gashtab[3]);",
          "4747:         unsigned const *const bitmask = &gashtab[4];",
          "4748:         unsigned const *const buckets = &bitmask[n_bitmask];",
          "4750:         unsigned const h = gnu_hash(name);",
          "4751:         unsigned const hbit1 = 037& h;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4849:         unsigned const *const hasharr = &buckets[n_bucket];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4755:         if (1& (w>>hbit1) & (w>>hbit2)) {",
          "4756:             unsigned bucket = get_te32(&buckets[h % n_bucket]);",
          "4757:             if (0!=bucket) {",
          "4760:                 unsigned const *hp = &hasharr[bucket - symbias];",
          "4763:                 do if (0==((h ^ get_te32(hp))>>1)) {",
          "4765:                     if (0==strcmp(name, p)) {",
          "4766:                         return dsp;",
          "4767:                     }",
          "",
          "[Removed Lines]",
          "4758:                 Elf32_Sym const *dsp = dynsym;",
          "4759:                 unsigned const *const hasharr = &buckets[n_bucket];",
          "4762:                 dsp += bucket;",
          "4764:                     char const *const p = get_te32(&dsp->st_name) + dynstr;",
          "",
          "[Added Lines]",
          "4859:                 Elf32_Sym const *dsp = &dynsym[bucket];",
          "4863:                     unsigned st_name = get_te32(&dsp->st_name);",
          "4864:                     char const *const p = get_str_name(st_name, -1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4782:         unsigned const m = elf_hash(name) % nbucket;",
          "4783:         unsigned si;",
          "4784:         for (si= get_te32(&buckets[m]); 0!=si; si= get_te32(&chains[si])) {",
          "4786:             if (0==strcmp(name, p)) {",
          "4787:                 return &dynsym[si];",
          "4788:             }",
          "",
          "[Removed Lines]",
          "4785:             char const *const p= get_dynsym_name(si, 0);",
          "",
          "[Added Lines]",
          "4885:             char const *const p= get_dynsym_name(si, -1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4795:         unsigned const gnu_shift = get_te32(&gashtab[3]);",
          "4796:         upx_uint64_t const *const bitmask = (upx_uint64_t const *)(void const *)&gashtab[4];",
          "4797:         unsigned     const *const buckets = (unsigned const *)&bitmask[n_bitmask];",
          "4799:         unsigned const h = gnu_hash(name);",
          "4800:         unsigned const hbit1 = 077& h;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4898:         unsigned     const *const hasharr = &buckets[n_bucket];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4804:         if (1& (w>>hbit1) & (w>>hbit2)) {",
          "4805:             unsigned bucket = get_te32(&buckets[h % n_bucket]);",
          "4806:             if (0!=bucket) {",
          "4809:                 unsigned const *hp = &hasharr[bucket - symbias];",
          "4812:                 do if (0==((h ^ get_te32(hp))>>1)) {",
          "4814:                     if (0==strcmp(name, p)) {",
          "4815:                         return dsp;",
          "4816:                     }",
          "",
          "[Removed Lines]",
          "4807:                 Elf64_Sym const *dsp = dynsym;",
          "4808:                 unsigned const *const hasharr = &buckets[n_bucket];",
          "4811:                 dsp += bucket;",
          "4813:                     char const *const p = get_te64(&dsp->st_name) + dynstr;",
          "",
          "[Added Lines]",
          "4908:                 Elf64_Sym const *dsp = &dynsym[bucket];",
          "4912:                     upx_uint64_t st_name = get_te64(&dsp->st_name);",
          "4913:                     char const *const p = get_str_name(st_name, -1);",
          "",
          "---------------"
        ],
        "src/p_lx_elf.h||src/p_lx_elf.h": [
          "File: src/p_lx_elf.h -> src/p_lx_elf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:     virtual upx_uint64_t elf_unsigned_dynamic(unsigned) const;",
          "164:     virtual int adjABS(Elf32_Sym *sym, unsigned delta);",
          "166:     char const *get_dynsym_name(unsigned symnum, unsigned relnum) const;",
          "167: protected:",
          "168:     Elf32_Ehdr  ehdri; // from input file",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:     char const *get_str_name(unsigned st_name, unsigned symnum) const;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:     virtual upx_uint64_t elf_unsigned_dynamic(unsigned) const;",
          "299:     virtual int adjABS(Elf64_Sym *sym, unsigned delta);",
          "301:     char const *get_dynsym_name(unsigned symnum, unsigned relnum) const;",
          "302: protected:",
          "303:     Elf64_Ehdr  ehdri; // from input file",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:     char const *get_str_name(upx_uint64_t st_name, unsigned symnum) const;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a784284b7f68293ab6e26540b0cc1b45449ad904",
      "candidate_info": {
        "commit_hash": "a784284b7f68293ab6e26540b0cc1b45449ad904",
        "repo": "upx/upx",
        "commit_url": "https://github.com/upx/upx/commit/a784284b7f68293ab6e26540b0cc1b45449ad904",
        "files": [
          "src/p_lx_elf.cpp"
        ],
        "message": "Check user_init_off.  Also remove '\\n' from error messages.\n\nhttps://github.com/upx/upx/issues/235  POC11\n\tmodified:   p_lx_elf.cpp",
        "before_after_code_files": [
          "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ],
          "candidate": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
          "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1760: {",
          "1761:     if (strtab_end <= st_name) {",
          "1762:         char msg[70]; snprintf(msg, sizeof(msg),",
          "1764:         throwCantPack(msg);",
          "1765:     }",
          "1766:     return &dynstr[st_name];",
          "",
          "[Removed Lines]",
          "1763:             \"bad .st_name %#x in DT_SYMTAB[%d]\\n\", st_name, symnum);",
          "",
          "[Added Lines]",
          "1763:             \"bad .st_name %#x in DT_SYMTAB[%d]\", st_name, symnum);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1770: {",
          "1771:     if (symnum_end <= symnum) {",
          "1772:         char msg[70]; snprintf(msg, sizeof(msg),",
          "1774:         throwCantPack(msg);",
          "1775:     }",
          "1776:     return get_str_name(get_te32(&dynsym[symnum].st_name), symnum);",
          "",
          "[Removed Lines]",
          "1773:             \"bad symnum %#x in Elf64_Rel[%d]\\n\", symnum, relnum);",
          "",
          "[Added Lines]",
          "1773:             \"bad symnum %#x in Elf64_Rel[%d]\", symnum, relnum);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2054:                     ||  (     Elf32_Dyn::DT_INIT_ARRAY   ==upx_dt_init",
          "2055:                         &&  Elf32_Shdr::SHT_INIT_ARRAY   ==sh_type) ) {",
          "2056:                         user_init_off = get_te32(&shdr->sh_offset);",
          "2057:                         user_init_va = get_te32(&file_image[user_init_off]);",
          "2058:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2057:                         if (file_size <= user_init_off) {",
          "2058:                             char msg[70]; snprintf(msg, sizeof(msg),",
          "2059:                                 \"bad Elf32_Shdr[%d].sh_offset %#x\",",
          "2060:                                 -1+ e_shnum - j, user_init_off);",
          "2061:                             throwCantPack(msg);",
          "2062:                         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2322:                     ||  (     Elf64_Dyn::DT_INIT_ARRAY   ==upx_dt_init",
          "2323:                         &&  Elf64_Shdr::SHT_INIT_ARRAY   ==sh_type) ) {",
          "2324:                         user_init_off = get_te64(&shdr->sh_offset);",
          "2325:                         user_init_va = get_te64(&file_image[user_init_off]);",
          "2326:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2331:                         if (file_size <= user_init_off) {",
          "2332:                             char msg[70]; snprintf(msg, sizeof(msg),",
          "2333:                                 \"bad Elf64_Shdr[%d].sh_offset %#x\",",
          "2334:                                 -1+ e_shnum - j, user_init_off);",
          "2335:                             throwCantPack(msg);",
          "2336:                         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0509edf08d3203d5314e24f7f23f33b71339423e",
      "candidate_info": {
        "commit_hash": "0509edf08d3203d5314e24f7f23f33b71339423e",
        "repo": "upx/upx",
        "commit_url": "https://github.com/upx/upx/commit/0509edf08d3203d5314e24f7f23f33b71339423e",
        "files": [
          "src/p_lx_elf.cpp",
          "src/p_lx_elf.h"
        ],
        "message": "ElfXX_Sym.st_name is always 32 bits\n\n\tmodified:   p_lx_elf.cpp\n\tmodified:   p_lx_elf.h",
        "before_after_code_files": [
          "src/p_lx_elf.cpp||src/p_lx_elf.cpp",
          "src/p_lx_elf.h||src/p_lx_elf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ],
          "candidate": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
          "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1756:     return 0;",
          "1757: }",
          "1760: {",
          "1761:     if (strtab_end <= st_name) {",
          "1762:         char msg[70]; snprintf(msg, sizeof(msg),",
          "1764:         throwCantPack(msg);",
          "1765:     }",
          "1766:     return &dynstr[st_name];",
          "",
          "[Removed Lines]",
          "1759: char const *PackLinuxElf64::get_str_name(upx_uint64_t st_name, unsigned symnum) const",
          "1763:             \"bad .st_name %#lx in DT_SYMTAB[%d]\\n\", (unsigned long)st_name, symnum);",
          "",
          "[Added Lines]",
          "1759: char const *PackLinuxElf64::get_str_name(unsigned st_name, unsigned symnum) const",
          "1763:             \"bad .st_name %#x in DT_SYMTAB[%d]\\n\", st_name, symnum);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1773:             \"bad symnum %#x in Elf64_Rel[%d]\\n\", symnum, relnum);",
          "1774:         throwCantPack(msg);",
          "1775:     }",
          "1777: }",
          "1779: bool PackLinuxElf64::calls_crt1(Elf64_Rela const *rela, int sz)",
          "",
          "[Removed Lines]",
          "1776:     return get_str_name(get_te64(&dynsym[symnum].st_name), symnum);",
          "",
          "[Added Lines]",
          "1776:     return get_str_name(get_te32(&dynsym[symnum].st_name), symnum);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2860: PackLinuxElf64::adjABS(Elf64_Sym *sym, unsigned delta)",
          "2861: {",
          "2862:     for (int j = 0; abs_symbol_names[j][0]; ++j) {",
          "2864:         if (!strcmp(abs_symbol_names[j], get_str_name(st_name, -1))) {",
          "2865:             sym->st_value += delta;",
          "2866:             return 1;",
          "",
          "[Removed Lines]",
          "2863:         upx_uint64_t st_name = get_te64(&sym->st_name);",
          "",
          "[Added Lines]",
          "2863:         unsigned st_name = get_te32(&sym->st_name);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4993:                 unsigned const *hp = &hasharr[bucket - symbias];",
          "4995:                 do if (0==((h ^ get_te32(hp))>>1)) {",
          "4997:                     char const *const p = get_str_name(st_name, -1);",
          "4998:                     if (0==strcmp(name, p)) {",
          "4999:                         return dsp;",
          "",
          "[Removed Lines]",
          "4996:                     upx_uint64_t st_name = get_te64(&dsp->st_name);",
          "",
          "[Added Lines]",
          "4996:                     unsigned st_name = get_te32(&dsp->st_name);",
          "",
          "---------------"
        ],
        "src/p_lx_elf.h||src/p_lx_elf.h": [
          "File: src/p_lx_elf.h -> src/p_lx_elf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:     virtual upx_uint64_t elf_unsigned_dynamic(unsigned) const;",
          "300:     virtual int adjABS(Elf64_Sym *sym, unsigned delta);",
          "303:     char const *get_dynsym_name(unsigned symnum, unsigned relnum) const;",
          "304: protected:",
          "305:     Elf64_Ehdr  ehdri; // from input file",
          "",
          "[Removed Lines]",
          "302:     char const *get_str_name(upx_uint64_t st_name, unsigned symnum) const;",
          "",
          "[Added Lines]",
          "302:     char const *get_str_name(unsigned st_name, unsigned symnum) const;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c097233bf3992b25afa4e2e96c938af3fa3be6ed",
      "candidate_info": {
        "commit_hash": "c097233bf3992b25afa4e2e96c938af3fa3be6ed",
        "repo": "upx/upx",
        "commit_url": "https://github.com/upx/upx/commit/c097233bf3992b25afa4e2e96c938af3fa3be6ed",
        "files": [
          "src/p_lx_elf.cpp"
        ],
        "message": "Stronger checks for DT_HASH, DT_GNU_HASH\n\nhttps://github.com/upx/upx/issues/238\n\tmodified:   p_lx_elf.cpp",
        "before_after_code_files": [
          "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ],
          "candidate": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
          "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1609:         unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "1610:         if (!nbucket",
          "1611:         || ((v_hsh < v_sym) && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers",
          "1612:                 + sizeof(*buckets)*nbucket  // buckets",
          "1613:                 + sizeof(*chains) *nbucket  // chains",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1611:         || (nbucket>>31) || (file_size/sizeof(unsigned)) <= (2*nbucket)  // FIXME: weak",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1619:             throwCantPack(msg);",
          "1620:         }",
          "1621:     }",
          "1623:     unsigned const v_gsh = elf_unsigned_dynamic(Elf32_Dyn::DT_GNU_HASH);",
          "1624:     if (v_gsh && file_image) {",
          "1625:         gashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_GNU_HASH);",
          "1626:         unsigned const n_bucket = get_te32(&gashtab[0]);",
          "1627:         unsigned const n_bitmask = get_te32(&gashtab[2]);",
          "1628:         unsigned const *const bitmask = (unsigned const *)(void const *)&gashtab[4];",
          "1629:         unsigned     const *const buckets = (unsigned const *)&bitmask[n_bitmask];",
          "1630:         unsigned     const *const hasharr = &buckets[n_bucket];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1629:         unsigned const gnu_shift = get_te32(&gashtab[3]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1633:         unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "1634:         if (!n_bucket || !n_bitmask",
          "1635:         || ((v_gsh < v_sym) && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers",
          "1636:                 + sizeof(*bitmask)*n_bitmask  // bitmask",
          "1637:                 + sizeof(*buckets)*n_bucket  // buckets",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1637:         || (-1+ n_bitmask) & n_bitmask  // not a power of 2",
          "1638:         || 8*sizeof(unsigned) <= gnu_shift  // shifted result always == 0",
          "1639:         || (n_bucket>>30)  // fie on fuzzers",
          "1640:         || (n_bitmask>>30)",
          "1641:         || (file_size / sizeof(unsigned)) <= (n_bitmask + 2*n_bucket)  // FIXME: weak",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4838:         unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "4839:         if (!nbucket",
          "4840:         || ((v_hsh < v_sym) && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers",
          "4841:                 + sizeof(*buckets)*nbucket  // buckets",
          "4842:                 + sizeof(*chains) *nbucket  // chains",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4848:         || (nbucket>>31) || (file_size/sizeof(unsigned)) <= (2*nbucket)  // FIXME: weak",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4848:             throwCantPack(msg);",
          "4849:         }",
          "4850:     }",
          "4852:     unsigned const v_gsh = elf_unsigned_dynamic(Elf64_Dyn::DT_GNU_HASH);",
          "4853:     if (v_gsh && file_image) {",
          "4854:         gashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_GNU_HASH);",
          "4855:         unsigned const n_bucket = get_te32(&gashtab[0]);",
          "4856:         unsigned const n_bitmask = get_te32(&gashtab[2]);",
          "4857:         upx_uint64_t const *const bitmask = (upx_uint64_t const *)(void const *)&gashtab[4];",
          "4858:         unsigned     const *const buckets = (unsigned const *)&bitmask[n_bitmask];",
          "4859:         unsigned     const *const hasharr = &buckets[n_bucket];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4866:         unsigned const gnu_shift = get_te32(&gashtab[3]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4862:         upx_uint64_t const v_sym = get_te64(&dynp0[-1+ x_sym].d_val);",
          "4863:         if (!n_bucket || !n_bitmask",
          "4864:         || ((v_gsh < v_sym) && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers",
          "4865:                 + sizeof(*bitmask)*n_bitmask  // bitmask",
          "4866:                 + sizeof(*buckets)*n_bucket  // buckets",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4874:         || (-1+ n_bitmask) & n_bitmask  // not a power of 2",
          "4875:         || 8*sizeof(upx_uint64_t) <= gnu_shift  // shifted result always == 0",
          "4876:         || (n_bucket>>30)  // fie on fuzzers",
          "4877:         || (n_bitmask>>30)",
          "4878:         || (file_size/sizeof(unsigned)) <= ((sizeof(*bitmask)/sizeof(unsigned))*n_bitmask + 2*n_bucket)  // FIXME: weak",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "606ad08dd1ffb942f21d584f6fc690405f8b7616",
      "candidate_info": {
        "commit_hash": "606ad08dd1ffb942f21d584f6fc690405f8b7616",
        "repo": "upx/upx",
        "commit_url": "https://github.com/upx/upx/commit/606ad08dd1ffb942f21d584f6fc690405f8b7616",
        "files": [
          "src/p_elf_enum.h",
          "src/p_lx_elf.cpp",
          "src/p_lx_elf.h"
        ],
        "message": "Check symbol number and .st_name\n\nhttps://github.com/upx/upx/issues/235  POC1,POC3,POC7,POC9\n\tmodified:   p_elf_enum.h\n\tmodified:   p_lx_elf.h\n\tmodified:   p_lx_elf.cpp",
        "before_after_code_files": [
          "src/p_elf_enum.h||src/p_elf_enum.h",
          "src/p_lx_elf.cpp||src/p_lx_elf.cpp",
          "src/p_lx_elf.h||src/p_lx_elf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ],
          "candidate": [
            "src/p_lx_elf.cpp||src/p_lx_elf.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/p_elf_enum.h||src/p_elf_enum.h": [
          "File: src/p_elf_enum.h -> src/p_elf_enum.h"
        ],
        "src/p_lx_elf.cpp||src/p_lx_elf.cpp": [
          "File: src/p_lx_elf.cpp -> src/p_lx_elf.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:     jni_onload_sym(NULL),",
          "673:     shstrtab(NULL),",
          "674:     sec_strndx(NULL), sec_dynsym(NULL), sec_dynstr(NULL)",
          "675: {",
          "676:     memset(&ehdri, 0, sizeof(ehdri));",
          "677:     if (f) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "675:     , symnum_end(0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "693:     jni_onload_sym(NULL),",
          "694:     shstrtab(NULL),",
          "695:     sec_strndx(NULL), sec_dynsym(NULL), sec_dynstr(NULL)",
          "696: {",
          "697:     memset(&ehdri, 0, sizeof(ehdri));",
          "698:     if (f) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "697:     , symnum_end(0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1558:     if (dt_table[Elf32_Dyn::DT_NULL]) {",
          "1559:         return;  // not 1st time; do not change upx_dt_init",
          "1560:     }",
          "1561:     unsigned ndx = 1+ 0;",
          "1562:     if (dynp)",
          "1563:     for (; ; ++ndx, ++dynp) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1563:     Elf32_Dyn const *const dynp0 = dynp;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1573:          if (dt_table[Elf32_Dyn::DT_INIT])          upx_dt_init = Elf32_Dyn::DT_INIT;",
          "1574:     else if (dt_table[Elf32_Dyn::DT_PREINIT_ARRAY]) upx_dt_init = Elf32_Dyn::DT_PREINIT_ARRAY;",
          "1575:     else if (dt_table[Elf32_Dyn::DT_INIT_ARRAY])    upx_dt_init = Elf32_Dyn::DT_INIT_ARRAY;",
          "1576: }",
          "1578: Elf32_Phdr const *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1580:     unsigned const z_str = dt_table[Elf32_Dyn::DT_STRSZ];",
          "1581:     if (z_str) {",
          "1582:         strtab_end = get_te32(&dynp0[-1+ z_str].d_val);",
          "1583:         if (file_size <= strtab_end) { // FIXME: not tight enough",
          "1584:             char msg[50]; snprintf(msg, sizeof(msg),",
          "1585:                 \"bad DT_STRSZ %#x\", strtab_end);",
          "1586:             throwCantPack(msg);",
          "1587:         }",
          "1588:     }",
          "1589:     unsigned const x_sym = dt_table[Elf32_Dyn::DT_SYMTAB];",
          "1590:     unsigned const x_str = dt_table[Elf32_Dyn::DT_STRTAB];",
          "1591:     if (x_sym && x_str) {",
          "1592:         upx_uint32_t const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);",
          "1593:         upx_uint32_t const v_str = get_te32(&dynp0[-1+ x_str].d_val);",
          "1594:         unsigned const  z_sym = dt_table[Elf32_Dyn::DT_SYMENT];",
          "1595:         unsigned const sz_sym = !z_sym ? sizeof(Elf32_Sym)",
          "1596:             : get_te32(&dynp0[-1+ z_sym].d_val);",
          "1597:         if (v_sym < v_str) {",
          "1598:             symnum_end = (v_str - v_sym) / sz_sym;",
          "1599:         }",
          "1600:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1666:     return 0;",
          "1667: }",
          "1669: bool PackLinuxElf64::calls_crt1(Elf64_Rela const *rela, int sz)",
          "1670: {",
          "1671:     if (!dynsym || !dynstr) {",
          "1672:         return false;",
          "1673:     }",
          "1675:         unsigned const symnum = get_te64(&rela->r_info) >> 32;",
          "1677:         if (0==strcmp(symnam, \"__libc_start_main\")  // glibc",
          "1678:         ||  0==strcmp(symnam, \"__libc_init\")  // Android",
          "1679:         ||  0==strcmp(symnam, \"__uClibc_main\")",
          "",
          "[Removed Lines]",
          "1674:     for (; 0 < sz; (sz -= sizeof(Elf64_Rela)), ++rela) {",
          "1676:         char const *const symnam = get_te32(&dynsym[symnum].st_name) + dynstr;",
          "",
          "[Added Lines]",
          "1694: char const *PackLinuxElf64::get_dynsym_name(unsigned symnum, unsigned relnum) const",
          "1695: {",
          "1696:     if (symnum_end <= symnum) {",
          "1697:         char msg[50]; snprintf(msg, sizeof(msg),",
          "1698:             \"bad symnum %#x in Elf64_Rel[%d]\\n\", symnum, relnum);",
          "1699:         throwCantPack(msg);",
          "1700:     }",
          "1701:     unsigned st_name = get_te64(&dynsym[symnum].st_name);",
          "1702:     if (strtab_end <= st_name) {",
          "1703:         char msg[50]; snprintf(msg, sizeof(msg),",
          "1704:             \"bad .st_name %#x in DT_STRTAB[%d]\\n\", st_name, symnum);",
          "1705:         throwCantPack(msg);",
          "1706:     }",
          "1707:     return &dynstr[st_name];",
          "1708: }",
          "1715:     for (unsigned relnum= 0; 0 < sz; (sz -= sizeof(Elf64_Rela)), ++rela, ++relnum) {",
          "1717:         char const *const symnam = get_dynsym_name(symnum, relnum);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1683:     return false;",
          "1684: }",
          "1686: bool PackLinuxElf32::calls_crt1(Elf32_Rel const *rel, int sz)",
          "1687: {",
          "1688:     if (!dynsym || !dynstr) {",
          "1689:         return false;",
          "1690:     }",
          "1692:         unsigned const symnum = get_te32(&rel->r_info) >> 8;",
          "1694:         if (0==strcmp(symnam, \"__libc_start_main\")  // glibc",
          "1695:         ||  0==strcmp(symnam, \"__libc_init\")  // Android",
          "1696:         ||  0==strcmp(symnam, \"__uClibc_main\")",
          "",
          "[Removed Lines]",
          "1691:     for (; 0 < sz; (sz -= sizeof(Elf32_Rel)), ++rel) {",
          "1693:         char const *const symnam = get_te32(&dynsym[symnum].st_name) + dynstr;",
          "",
          "[Added Lines]",
          "1727: char const *PackLinuxElf32::get_dynsym_name(unsigned symnum, unsigned relnum) const",
          "1728: {",
          "1729:     if (symnum_end <= symnum) {",
          "1730:         char msg[50]; snprintf(msg, sizeof(msg),",
          "1731:             \"bad symnum %#x in Elf32_Rel[%d]\\n\", symnum, relnum);",
          "1732:         throwCantPack(msg);",
          "1733:     }",
          "1734:     unsigned st_name = get_te32(&dynsym[symnum].st_name);",
          "1735:     if (strtab_end <= st_name) {",
          "1736:         char msg[50]; snprintf(msg, sizeof(msg),",
          "1737:             \"bad .st_name %#x in DT_STRTAB[%d]\\n\", st_name, symnum);",
          "1738:         throwCantPack(msg);",
          "1739:     }",
          "1740:     return &dynstr[st_name];",
          "1741: }",
          "1748:     for (unsigned relnum= 0; 0 < sz; (sz -= sizeof(Elf32_Rel)), ++rel, ++relnum) {",
          "1750:         char const *const symnam = get_dynsym_name(symnum, relnum);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4574:     if (dt_table[Elf64_Dyn::DT_NULL]) {",
          "4575:         return;  // not 1st time; do not change upx_dt_init",
          "4576:     }",
          "4577:     unsigned ndx = 1+ 0;",
          "4578:     if (dynp)",
          "4579:     for (; ; ++ndx, ++dynp) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4634:     Elf64_Dyn const *const dynp0 = dynp;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4589:          if (dt_table[Elf64_Dyn::DT_INIT])          upx_dt_init = Elf64_Dyn::DT_INIT;",
          "4590:     else if (dt_table[Elf64_Dyn::DT_PREINIT_ARRAY]) upx_dt_init = Elf64_Dyn::DT_PREINIT_ARRAY;",
          "4591:     else if (dt_table[Elf64_Dyn::DT_INIT_ARRAY])    upx_dt_init = Elf64_Dyn::DT_INIT_ARRAY;",
          "4592: }",
          "4594: void const *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4651:     unsigned const z_str = dt_table[Elf64_Dyn::DT_STRSZ];",
          "4652:     if (z_str) {",
          "4653:         strtab_end = get_te64(&dynp0[-1+ z_str].d_val);",
          "4654:         if (file_size <= strtab_end) { // FIXME: not tight enough",
          "4655:             char msg[50]; snprintf(msg, sizeof(msg),",
          "4656:                 \"bad DT_STRSZ %#x\", strtab_end);",
          "4657:             throwCantPack(msg);",
          "4658:         }",
          "4659:     }",
          "4660:     unsigned const x_sym = dt_table[Elf64_Dyn::DT_SYMTAB];",
          "4661:     unsigned const x_str = dt_table[Elf64_Dyn::DT_STRTAB];",
          "4662:     if (x_sym && x_str) {",
          "4663:         upx_uint64_t const v_sym = get_te64(&dynp0[-1+ x_sym].d_val);",
          "4664:         upx_uint64_t const v_str = get_te64(&dynp0[-1+ x_str].d_val);",
          "4665:         unsigned const  z_sym = dt_table[Elf64_Dyn::DT_SYMENT];",
          "4666:         unsigned const sz_sym = !z_sym ? sizeof(Elf64_Sym)",
          "4667:             : get_te64(&dynp0[-1+ z_sym].d_val);",
          "4668:         if (v_sym < v_str) {",
          "4669:             symnum_end = (v_str - v_sym) / sz_sym;",
          "4670:         }",
          "4671:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4653:         unsigned const m = elf_hash(name) % nbucket;",
          "4654:         unsigned si;",
          "4655:         for (si= get_te32(&buckets[m]); 0!=si; si= get_te32(&chains[si])) {",
          "4657:             if (0==strcmp(name, p)) {",
          "4658:                 return &dynsym[si];",
          "4659:             }",
          "",
          "[Removed Lines]",
          "4656:             char const *const p= get_te32(&dynsym[si].st_name) + dynstr;",
          "",
          "[Added Lines]",
          "4736:             char const *const p= get_dynsym_name(si, 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4702:         unsigned const m = elf_hash(name) % nbucket;",
          "4703:         unsigned si;",
          "4704:         for (si= get_te32(&buckets[m]); 0!=si; si= get_te32(&chains[si])) {",
          "4706:             if (0==strcmp(name, p)) {",
          "4707:                 return &dynsym[si];",
          "4708:             }",
          "",
          "[Removed Lines]",
          "4705:             char const *const p= get_te64(&dynsym[si].st_name) + dynstr;",
          "",
          "[Added Lines]",
          "4785:             char const *const p= get_dynsym_name(si, 0);",
          "",
          "---------------"
        ],
        "src/p_lx_elf.h||src/p_lx_elf.h": [
          "File: src/p_lx_elf.h -> src/p_lx_elf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:     virtual upx_uint64_t elf_unsigned_dynamic(unsigned) const;",
          "164:     virtual int adjABS(Elf32_Sym *sym, unsigned delta);",
          "166: protected:",
          "167:     Elf32_Ehdr  ehdri; // from input file",
          "168:     MemBuffer lowmem;  // especially for shlib",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:     char const *get_dynsym_name(unsigned symnum, unsigned relnum) const;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:     Elf32_Shdr       *sec_strndx;",
          "190:     Elf32_Shdr const *sec_dynsym;",
          "191:     Elf32_Shdr const *sec_dynstr;",
          "193:     __packed_struct(cprElfHdr1)",
          "194:         Elf32_Ehdr ehdr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:     unsigned symnum_end;",
          "194:     unsigned strtab_end;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:     virtual upx_uint64_t elf_unsigned_dynamic(unsigned) const;",
          "296:     virtual int adjABS(Elf64_Sym *sym, unsigned delta);",
          "298: protected:",
          "299:     Elf64_Ehdr  ehdri; // from input file",
          "300:     MemBuffer lowmem;  // especially for shlib",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301:     char const *get_dynsym_name(unsigned symnum, unsigned relnum) const;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321:     Elf64_Shdr       *sec_strndx;",
          "322:     Elf64_Shdr const *sec_dynsym;",
          "323:     Elf64_Shdr const *sec_dynstr;",
          "325:     __packed_struct(cprElfHdr1)",
          "326:         Elf64_Ehdr ehdr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:     unsigned symnum_end;",
          "329:     unsigned strtab_end;",
          "",
          "---------------"
        ]
      }
    }
  ]
}