{
  "cve_id": "CVE-2011-4131",
  "cve_desc": "The NFSv4 implementation in the Linux kernel before 3.2.2 does not properly handle bitmap sizes in GETACL replies, which allows remote NFS servers to cause a denial of service (OOPS) by sending an excessive number of bitmap words.",
  "repo": "torvalds/linux",
  "patch_hash": "bf118a342f10dafe44b14451a1392c3254629a1f",
  "patch_info": {
    "commit_hash": "bf118a342f10dafe44b14451a1392c3254629a1f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bf118a342f10dafe44b14451a1392c3254629a1f",
    "files": [
      "fs/nfs/nfs4proc.c",
      "fs/nfs/nfs4xdr.c",
      "include/linux/nfs_xdr.h",
      "include/linux/sunrpc/xdr.h",
      "net/sunrpc/xdr.c"
    ],
    "message": "NFSv4: include bitmap in nfsv4 get acl data\n\nThe NFSv4 bitmap size is unbounded: a server can return an arbitrary\nsized bitmap in an FATTR4_WORD0_ACL request.  Replace using the\nnfs4_fattr_bitmap_maxsz as a guess to the maximum bitmask returned by a server\nwith the inclusion of the bitmap (xdr length plus bitmasks) and the acl data\nxdr length to the (cached) acl page data.\n\nThis is a general solution to commit e5012d1f \"NFSv4.1: update\nnfs4_fattr_bitmap_maxsz\" and fixes hitting a BUG_ON in xdr_shrink_bufhead\nwhen getting ACLs.\n\nFix a bug in decode_getacl that returned -EINVAL on ACLs > page when getxattr\nwas called with a NULL buffer, preventing ACL > PAGE_SIZE from being retrieved.\n\nCc: stable@kernel.org\nSigned-off-by: Andy Adamson <andros@netapp.com>\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
    "before_after_code_files": [
      "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
      "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c",
      "include/linux/nfs_xdr.h||include/linux/nfs_xdr.h",
      "include/linux/sunrpc/xdr.h||include/linux/sunrpc/xdr.h",
      "net/sunrpc/xdr.c||net/sunrpc/xdr.c"
    ]
  },
  "patch_diff": {
    "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c": [
      "File: fs/nfs/nfs4proc.c -> fs/nfs/nfs4proc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3427: #define NFS4ACL_MAXPAGES (XATTR_SIZE_MAX >> PAGE_CACHE_SHIFT)",
      "3442: static int buf_to_pages_noslab(const void *buf, size_t buflen,",
      "3443:   struct page **pages, unsigned int *pgbase)",
      "3444: {",
      "",
      "[Removed Lines]",
      "3429: static void buf_to_pages(const void *buf, size_t buflen,",
      "3430:   struct page **pages, unsigned int *pgbase)",
      "3431: {",
      "3432:  const void *p = buf;",
      "3435:  p -= *pgbase;",
      "3436:  while (p < buf + buflen) {",
      "3438:   p += PAGE_CACHE_SIZE;",
      "3439:  }",
      "3440: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3535:  nfs4_set_cached_acl(inode, acl);",
      "3536: }",
      "3538: static ssize_t __nfs4_get_acl_uncached(struct inode *inode, void *buf, size_t buflen)",
      "3539: {",
      "3541:  struct nfs_getaclargs args = {",
      "3542:   .fh = NFS_FH(inode),",
      "3543:   .acl_pages = pages,",
      "",
      "[Removed Lines]",
      "3540:  struct page *pages[NFS4ACL_MAXPAGES];",
      "",
      "[Added Lines]",
      "3537:  struct page *pages[NFS4ACL_MAXPAGES] = {NULL, };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3552:   .rpc_argp = &args,",
      "3553:   .rpc_resp = &res,",
      "3554:  };",
      "3571:  }",
      "3573:  if (ret)",
      "3574:   goto out_free;",
      "3577:  else",
      "3579:  if (buf) {",
      "3580:   ret = -ERANGE;",
      "3582:    goto out_free;",
      "3585:  }",
      "3587: out_free:",
      "3590:  return ret;",
      "3591: }",
      "",
      "[Removed Lines]",
      "3555:  struct page *localpage = NULL;",
      "3556:  int ret;",
      "3558:  if (buflen < PAGE_SIZE) {",
      "3561:   localpage = alloc_page(GFP_KERNEL);",
      "3562:   resp_buf = page_address(localpage);",
      "3563:   if (localpage == NULL)",
      "3564:    return -ENOMEM;",
      "3565:   args.acl_pages[0] = localpage;",
      "3566:   args.acl_pgbase = 0;",
      "3567:   args.acl_len = PAGE_SIZE;",
      "3568:  } else {",
      "3569:   resp_buf = buf;",
      "3570:   buf_to_pages(buf, buflen, args.acl_pages, &args.acl_pgbase);",
      "3572:  ret = nfs4_call_sync(NFS_SERVER(inode)->client, NFS_SERVER(inode), &msg, &args.seq_args, &res.seq_res, 0);",
      "3575:  if (res.acl_len > args.acl_len)",
      "3576:   nfs4_write_cached_acl(inode, NULL, res.acl_len);",
      "3578:   nfs4_write_cached_acl(inode, resp_buf, res.acl_len);",
      "3581:   if (res.acl_len > buflen)",
      "3583:   if (localpage)",
      "3584:    memcpy(buf, resp_buf, res.acl_len);",
      "3586:  ret = res.acl_len;",
      "3588:  if (localpage)",
      "3589:   __free_page(localpage);",
      "",
      "[Added Lines]",
      "3552:  int ret = -ENOMEM, npages, i, acl_len = 0;",
      "3554:  npages = (buflen + PAGE_SIZE - 1) >> PAGE_SHIFT;",
      "3557:  if (npages == 0)",
      "3558:   npages = 1;",
      "3560:  for (i = 0; i < npages; i++) {",
      "3561:   pages[i] = alloc_page(GFP_KERNEL);",
      "3562:   if (!pages[i])",
      "3563:    goto out_free;",
      "3564:  }",
      "3565:  if (npages > 1) {",
      "3567:   args.acl_scratch = alloc_page(GFP_KERNEL);",
      "3568:   if (!args.acl_scratch)",
      "3569:    goto out_free;",
      "3571:  args.acl_len = npages * PAGE_SIZE;",
      "3572:  args.acl_pgbase = 0;",
      "3575:  if (buf == NULL)",
      "3576:   res.acl_flags |= NFS4_ACL_LEN_REQUEST;",
      "3577:  resp_buf = page_address(pages[0]);",
      "3579:  dprintk(\"%s  buf %p buflen %ld npages %d args.acl_len %ld\\n\",",
      "3580:   __func__, buf, buflen, npages, args.acl_len);",
      "3581:  ret = nfs4_call_sync(NFS_SERVER(inode)->client, NFS_SERVER(inode),",
      "3582:         &msg, &args.seq_args, &res.seq_res, 0);",
      "3586:  acl_len = res.acl_len - res.acl_data_offset;",
      "3587:  if (acl_len > args.acl_len)",
      "3588:   nfs4_write_cached_acl(inode, NULL, acl_len);",
      "3590:   nfs4_write_cached_acl(inode, resp_buf + res.acl_data_offset,",
      "3591:           acl_len);",
      "3594:   if (acl_len > buflen)",
      "3596:   _copy_from_pages(buf, pages, res.acl_data_offset,",
      "3597:     res.acl_len);",
      "3599:  ret = acl_len;",
      "3601:  for (i = 0; i < npages; i++)",
      "3602:   if (pages[i])",
      "3603:    __free_page(pages[i]);",
      "3604:  if (args.acl_scratch)",
      "3605:   __free_page(args.acl_scratch);",
      "",
      "---------------"
    ],
    "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c": [
      "File: fs/nfs/nfs4xdr.c -> fs/nfs/nfs4xdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2517:  encode_compound_hdr(xdr, req, &hdr);",
      "2518:  encode_sequence(xdr, &args->seq_args, &hdr);",
      "2519:  encode_putfh(xdr, args->fh, &hdr);",
      "2521:  encode_getattr_two(xdr, FATTR4_WORD0_ACL, 0, &hdr);",
      "2523:  xdr_inline_pages(&req->rq_rcv_buf, replen << 2,",
      "2524:   args->acl_pages, args->acl_pgbase, args->acl_len);",
      "2525:  encode_nops(&hdr);",
      "2526: }",
      "",
      "[Removed Lines]",
      "2520:  replen = hdr.replen + op_decode_hdr_maxsz + nfs4_fattr_bitmap_maxsz + 1;",
      "",
      "[Added Lines]",
      "2520:  replen = hdr.replen + op_decode_hdr_maxsz + 1;",
      "2525:  xdr_set_scratch_buffer(xdr, page_address(args->acl_scratch), PAGE_SIZE);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4957: }",
      "4959: static int decode_getacl(struct xdr_stream *xdr, struct rpc_rqst *req,",
      "4961: {",
      "4963:  uint32_t attrlen,",
      "4964:    bitmap[3] = {0};",
      "4965:  struct kvec *iov = req->rq_rcv_buf.head;",
      "4966:  int status;",
      "4969:  if ((status = decode_op_hdr(xdr, OP_GETATTR)) != 0)",
      "4970:   goto out;",
      "4971:  if ((status = decode_attr_bitmap(xdr, bitmap)) != 0)",
      "4972:   goto out;",
      "4973:  if ((status = decode_attr_length(xdr, &attrlen, &savep)) != 0)",
      "",
      "[Removed Lines]",
      "4960:   size_t *acl_len)",
      "4962:  __be32 *savep;",
      "",
      "[Added Lines]",
      "4962:     struct nfs_getaclres *res)",
      "4964:  __be32 *savep, *bm_p;",
      "4970:  res->acl_len = 0;",
      "4973:  bm_p = xdr->p;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4979:   size_t hdrlen;",
      "4980:   u32 recvd;",
      "4984:   hdrlen = (u8 *)xdr->p - (u8 *)iov->iov_base;",
      "4985:   recvd = req->rq_rcv_buf.len - hdrlen;",
      "4986:   if (attrlen > recvd) {",
      "4989:      attrlen, recvd);",
      "4990:    return -EINVAL;",
      "4991:   }",
      "4992:   xdr_read_pages(xdr, attrlen);",
      "4994:  } else",
      "4995:   status = -EOPNOTSUPP;",
      "",
      "[Removed Lines]",
      "4987:    dprintk(\"NFS: server cheating in getattr\"",
      "4988:      \" acl reply: attrlen %u > recvd %u\\n\",",
      "",
      "[Added Lines]",
      "4988:   xdr->p = bm_p;",
      "4989:   res->acl_data_offset = be32_to_cpup(bm_p) + 2;",
      "4990:   res->acl_data_offset <<= 2;",
      "4995:   attrlen += res->acl_data_offset;",
      "4998:    if (res->acl_flags & NFS4_ACL_LEN_REQUEST) {",
      "5000:     res->acl_len = attrlen;",
      "5001:     goto out;",
      "5002:    }",
      "5003:    dprintk(\"NFS: acl reply: attrlen %u > recvd %u\\n\",",
      "5008:   res->acl_len = attrlen;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6028:  status = decode_putfh(xdr);",
      "6029:  if (status)",
      "6030:   goto out;",
      "6033: out:",
      "6034:  return status;",
      "",
      "[Removed Lines]",
      "6031:  status = decode_getacl(xdr, rqstp, &res->acl_len);",
      "",
      "[Added Lines]",
      "6046:  status = decode_getacl(xdr, rqstp, res);",
      "",
      "---------------"
    ],
    "include/linux/nfs_xdr.h||include/linux/nfs_xdr.h": [
      "File: include/linux/nfs_xdr.h -> include/linux/nfs_xdr.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "602:  size_t    acl_len;",
      "603:  unsigned int   acl_pgbase;",
      "604:  struct page **   acl_pages;",
      "605:  struct nfs4_sequence_args  seq_args;",
      "606: };",
      "608: struct nfs_getaclres {",
      "609:  size_t    acl_len;",
      "610:  struct nfs4_sequence_res seq_res;",
      "611: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "605:  struct page *   acl_scratch;",
      "613:  size_t    acl_data_offset;",
      "614:  int    acl_flags;",
      "",
      "---------------"
    ],
    "include/linux/sunrpc/xdr.h||include/linux/sunrpc/xdr.h": [
      "File: include/linux/sunrpc/xdr.h -> include/linux/sunrpc/xdr.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:         struct xdr_array2_desc *desc);",
      "192: extern int xdr_encode_array2(struct xdr_buf *buf, unsigned int base,",
      "193:         struct xdr_array2_desc *desc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "194: extern void _copy_from_pages(char *p, struct page **pages, size_t pgbase,",
      "195:         size_t len);",
      "",
      "---------------"
    ],
    "net/sunrpc/xdr.c||net/sunrpc/xdr.c": [
      "File: net/sunrpc/xdr.c -> net/sunrpc/xdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: _copy_from_pages(char *p, struct page **pages, size_t pgbase, size_t len)",
      "301: {",
      "302:  struct page **pgfrom;",
      "",
      "[Removed Lines]",
      "299: static void",
      "",
      "[Added Lines]",
      "299: void",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "325:  } while ((len -= copy) != 0);",
      "326: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "327: EXPORT_SYMBOL_GPL(_copy_from_pages);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "256e48bb473b631fbb5aa03d6ed38c652ad3caa7",
      "candidate_info": {
        "commit_hash": "256e48bb473b631fbb5aa03d6ed38c652ad3caa7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/256e48bb473b631fbb5aa03d6ed38c652ad3caa7",
        "files": [
          "fs/nfs/nfs4xdr.c"
        ],
        "message": "NFSv4: Simplify the GETATTR attribute length calculation\n\nUse the xdr_stream position counter as the basis for the calculation\ninstead of assuming that we can calculate an offset to the start\nof the iovec.\n\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
        "before_after_code_files": [
          "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
          ],
          "candidate": [
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c": [
          "File: fs/nfs/nfs4xdr.c -> fs/nfs/nfs4xdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3078:  return -EIO;",
          "3079: }",
          "3082: {",
          "3083:  __be32 *p;",
          "",
          "[Removed Lines]",
          "3081: static inline int decode_attr_length(struct xdr_stream *xdr, uint32_t *attrlen, __be32 **savep)",
          "",
          "[Added Lines]",
          "3081: static int decode_attr_length(struct xdr_stream *xdr, uint32_t *attrlen, unsigned int *savep)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4068:  return status;",
          "4069: }",
          "4072: {",
          "4073:  unsigned int attrwords = XDR_QUADLEN(attrlen);",
          "4076:  if (unlikely(attrwords != nwords)) {",
          "4077:   dprintk(\"%s: server returned incorrect attribute length: \"",
          "",
          "[Removed Lines]",
          "4071: static int verify_attr_len(struct xdr_stream *xdr, __be32 *savep, uint32_t attrlen)",
          "4074:  unsigned int nwords = xdr->p - savep;",
          "",
          "[Added Lines]",
          "4071: static int verify_attr_len(struct xdr_stream *xdr, unsigned int savep, uint32_t attrlen)",
          "4074:  unsigned int nwords = (xdr_stream_pos(xdr) - savep) >> 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4194: static int decode_server_caps(struct xdr_stream *xdr, struct nfs4_server_caps_res *res)",
          "4195: {",
          "4197:  uint32_t attrlen, bitmap[3] = {0};",
          "4198:  int status;",
          "",
          "[Removed Lines]",
          "4196:  __be32 *savep;",
          "",
          "[Added Lines]",
          "4196:  unsigned int savep;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4223: static int decode_statfs(struct xdr_stream *xdr, struct nfs_fsstat *fsstat)",
          "4224: {",
          "4226:  uint32_t attrlen, bitmap[3] = {0};",
          "4227:  int status;",
          "",
          "[Removed Lines]",
          "4225:  __be32 *savep;",
          "",
          "[Added Lines]",
          "4225:  unsigned int savep;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4255: static int decode_pathconf(struct xdr_stream *xdr, struct nfs_pathconf *pathconf)",
          "4256: {",
          "4258:  uint32_t attrlen, bitmap[3] = {0};",
          "4259:  int status;",
          "",
          "[Removed Lines]",
          "4257:  __be32 *savep;",
          "",
          "[Added Lines]",
          "4257:  unsigned int savep;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4299: static int decode_first_threshold_item4(struct xdr_stream *xdr,",
          "4300:      struct nfs4_threshold *res)",
          "4301: {",
          "4303:  uint32_t bitmap[3] = {0,}, attrlen;",
          "4304:  int status;",
          "",
          "[Removed Lines]",
          "4302:  __be32 *p, *savep;",
          "",
          "[Added Lines]",
          "4302:  __be32 *p;",
          "4303:  unsigned int savep;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4503:   struct nfs_fh *fh, struct nfs4_fs_locations *fs_loc,",
          "4504:   const struct nfs_server *server)",
          "4505: {",
          "4507:  uint32_t attrlen,",
          "4508:    bitmap[3] = {0};",
          "4509:  int status;",
          "",
          "[Removed Lines]",
          "4506:  __be32 *savep;",
          "",
          "[Added Lines]",
          "4507:  unsigned int savep;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4616: static int decode_fsinfo(struct xdr_stream *xdr, struct nfs_fsinfo *fsinfo)",
          "4617: {",
          "4619:  uint32_t attrlen, bitmap[3];",
          "4620:  int status;",
          "",
          "[Removed Lines]",
          "4618:  __be32 *savep;",
          "",
          "[Added Lines]",
          "4619:  unsigned int savep;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5044: static int decode_getacl(struct xdr_stream *xdr, struct rpc_rqst *req,",
          "5045:     struct nfs_getaclres *res)",
          "5046: {",
          "5048:  uint32_t attrlen,",
          "5049:    bitmap[3] = {0};",
          "5050:  int status;",
          "",
          "[Removed Lines]",
          "5047:  __be32 *savep, *bm_p;",
          "",
          "[Added Lines]",
          "5048:  unsigned int savep;",
          "5049:  __be32 *bm_p;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7076: int nfs4_decode_dirent(struct xdr_stream *xdr, struct nfs_entry *entry,",
          "7077:          int plus)",
          "7078: {",
          "7079:  uint32_t bitmap[3] = {0};",
          "7080:  uint32_t len;",
          "7081:  __be32 *p = xdr_inline_decode(xdr, 4);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7081:  unsigned int savep;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7114:  if (decode_attr_bitmap(xdr, bitmap) < 0)",
          "7115:   goto out_overflow;",
          "7118:   goto out_overflow;",
          "7120:  if (decode_getfattr_attrs(xdr, bitmap, entry->fattr, entry->fh,",
          "",
          "[Removed Lines]",
          "7117:  if (decode_attr_length(xdr, &len, &p) < 0)",
          "",
          "[Added Lines]",
          "7120:  if (decode_attr_length(xdr, &len, &savep) < 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de040beccd52bb5fcac90031505384d037b1111c",
      "candidate_info": {
        "commit_hash": "de040beccd52bb5fcac90031505384d037b1111c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/de040beccd52bb5fcac90031505384d037b1111c",
        "files": [
          "fs/nfs/nfs4proc.c"
        ],
        "message": "NFS4: fix compile warnings in nfs4proc.c\n\ncompile in nfs-for-3.3 branch shows following warnings. Fix it here.\n\nfs/nfs/nfs4proc.c: In function \u2018__nfs4_get_acl_uncached\u2019:\nfs/nfs/nfs4proc.c:3589: warning: format \u2018%ld\u2019 expects type \u2018long int\u2019, but argument 4 has type \u2018size_t\u2019\nfs/nfs/nfs4proc.c:3589: warning: format \u2018%ld\u2019 expects type \u2018long int\u2019, but argument 6 has type \u2018size_t\u2019\n\nSigned-off-by: Peng Tao <peng_tao@emc.com>\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
        "before_after_code_files": [
          "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c"
          ],
          "candidate": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c": [
          "File: fs/nfs/nfs4proc.c -> fs/nfs/nfs4proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3587:   res.acl_flags |= NFS4_ACL_LEN_REQUEST;",
          "3588:  resp_buf = page_address(pages[0]);",
          "3591:   __func__, buf, buflen, npages, args.acl_len);",
          "3592:  ret = nfs4_call_sync(NFS_SERVER(inode)->client, NFS_SERVER(inode),",
          "3593:         &msg, &args.seq_args, &res.seq_res, 0);",
          "",
          "[Removed Lines]",
          "3590:  dprintk(\"%s  buf %p buflen %ld npages %d args.acl_len %ld\\n\",",
          "",
          "[Added Lines]",
          "3590:  dprintk(\"%s  buf %p buflen %zu npages %d args.acl_len %zu\\n\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "519d3959e30a98f8e135e7a16647c10af5ad63d5",
      "candidate_info": {
        "commit_hash": "519d3959e30a98f8e135e7a16647c10af5ad63d5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/519d3959e30a98f8e135e7a16647c10af5ad63d5",
        "files": [
          "fs/nfs/nfs4proc.c",
          "fs/nfs/nfs4xdr.c"
        ],
        "message": "NFSv4: Fix pointer arithmetic in decode_getacl\n\nResetting the cursor xdr->p to a previous value is not a safe\npractice: if the xdr_stream has crossed out of the initial iovec,\nthen a bunch of other fields would need to be reset too.\n\nFix this issue by using xdr_enter_page() so that the buffer gets\npage aligned at the bitmap _before_ we decode it.\n\nAlso fix the confusion of the ACL length with the page buffer length\nby not adding the base offset to the ACL length...\n\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>\nCc: stable@vger.kernel.org",
        "before_after_code_files": [
          "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
          "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
          ],
          "candidate": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c": [
          "File: fs/nfs/nfs4proc.c -> fs/nfs/nfs4proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3819:  if (ret)",
          "3820:   goto out_free;",
          "3823:  if (acl_len > args.acl_len)",
          "3824:   nfs4_write_cached_acl(inode, NULL, 0, acl_len);",
          "3825:  else",
          "",
          "[Removed Lines]",
          "3822:  acl_len = res.acl_len - res.acl_data_offset;",
          "",
          "[Added Lines]",
          "3822:  acl_len = res.acl_len;",
          "",
          "---------------"
        ],
        "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c": [
          "File: fs/nfs/nfs4xdr.c -> fs/nfs/nfs4xdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5049:  uint32_t attrlen,",
          "5050:    bitmap[3] = {0};",
          "5051:  int status;",
          "5054:  res->acl_len = 0;",
          "5055:  if ((status = decode_op_hdr(xdr, OP_GETATTR)) != 0)",
          "5056:   goto out;",
          "5058:  bm_p = xdr->p;",
          "5065:  if ((status = decode_attr_bitmap(xdr, bitmap)) != 0)",
          "5066:   goto out;",
          "",
          "[Removed Lines]",
          "5052:  size_t page_len = xdr->buf->page_len;",
          "5059:  res->acl_data_offset = be32_to_cpup(bm_p) + 2;",
          "5060:  res->acl_data_offset <<= 2;",
          "5062:  if (res->acl_data_offset > page_len)",
          "5063:   return -ERANGE;",
          "",
          "[Added Lines]",
          "5057:  xdr_enter_page(xdr, xdr->buf->page_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5083:    if (res->acl_flags & NFS4_ACL_LEN_REQUEST) {",
          "5086:     goto out;",
          "5087:    }",
          "5090:    return -EINVAL;",
          "5091:   }",
          "5094:  } else",
          "5095:   status = -EOPNOTSUPP;",
          "",
          "[Removed Lines]",
          "5077:   xdr->p = bm_p;",
          "5081:   attrlen += res->acl_data_offset;",
          "5082:   if (attrlen > page_len) {",
          "5085:     res->acl_len = attrlen;",
          "5088:    dprintk(\"NFS: acl reply: attrlen %u > page_len %zu\\n\",",
          "5089:      attrlen, page_len);",
          "5092:   xdr_read_pages(xdr, attrlen);",
          "5093:   res->acl_len = attrlen;",
          "",
          "[Added Lines]",
          "5073:   res->acl_data_offset = (xdr->p - bm_p) << 2;",
          "5077:   res->acl_len = attrlen;",
          "5078:   if (attrlen + res->acl_data_offset > xdr->buf->page_len) {",
          "5083:    dprintk(\"NFS: acl reply: attrlen %u > page_len %u\\n\",",
          "5084:      attrlen, xdr->buf->page_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a00689930ab975fdd1b37b034475017e460cf2a",
      "candidate_info": {
        "commit_hash": "5a00689930ab975fdd1b37b034475017e460cf2a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5a00689930ab975fdd1b37b034475017e460cf2a",
        "files": [
          "fs/nfs/nfs4proc.c",
          "fs/nfs/nfs4xdr.c"
        ],
        "message": "Avoid reading past buffer when calling GETACL\n\nBug noticed in commit\nbf118a342f10dafe44b14451a1392c3254629a1f\n\nWhen calling GETACL, if the size of the bitmap array, the length\nattribute and the acl returned by the server is greater than the\nallocated buffer(args.acl_len), we can Oops with a General Protection\nfault at _copy_from_pages() when we attempt to read past the pages\nallocated.\n\nThis patch allocates an extra PAGE for the bitmap and checks to see that\nthe bitmap + attribute_length + ACLs don't exceed the buffer space\nallocated to it.\n\nSigned-off-by: Sachin Prabhu <sprabhu@redhat.com>\nReported-by: Jian Li <jiali@redhat.com>\n[Trond: Fixed a size_t vs unsigned int printk() warning]\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
        "before_after_code_files": [
          "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
          "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
          ],
          "candidate": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c": [
          "File: fs/nfs/nfs4proc.c -> fs/nfs/nfs4proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3684:  if (npages == 0)",
          "3685:   npages = 1;",
          "3687:  for (i = 0; i < npages; i++) {",
          "3688:   pages[i] = alloc_page(GFP_KERNEL);",
          "3689:   if (!pages[i])",
          "3690:    goto out_free;",
          "3691:  }",
          "3698:  args.acl_len = npages * PAGE_SIZE;",
          "3699:  args.acl_pgbase = 0;",
          "3702:  if (buf == NULL)",
          "",
          "[Removed Lines]",
          "3692:  if (npages > 1) {",
          "3694:   res.acl_scratch = alloc_page(GFP_KERNEL);",
          "3695:   if (!res.acl_scratch)",
          "3696:    goto out_free;",
          "3697:  }",
          "",
          "[Added Lines]",
          "3688:  npages++;",
          "3697:  res.acl_scratch = alloc_page(GFP_KERNEL);",
          "3698:  if (!res.acl_scratch)",
          "3699:   goto out_free;",
          "",
          "---------------"
        ],
        "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c": [
          "File: fs/nfs/nfs4xdr.c -> fs/nfs/nfs4xdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4902:    bitmap[3] = {0};",
          "4903:  struct kvec *iov = req->rq_rcv_buf.head;",
          "4904:  int status;",
          "4906:  res->acl_len = 0;",
          "4907:  if ((status = decode_op_hdr(xdr, OP_GETATTR)) != 0)",
          "4908:   goto out;",
          "4909:  bm_p = xdr->p;",
          "4910:  if ((status = decode_attr_bitmap(xdr, bitmap)) != 0)",
          "4911:   goto out;",
          "4912:  if ((status = decode_attr_length(xdr, &attrlen, &savep)) != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4905:  size_t page_len = xdr->buf->page_len;",
          "4912:  res->acl_data_offset = be32_to_cpup(bm_p) + 2;",
          "4913:  res->acl_data_offset <<= 2;",
          "4915:  if (res->acl_data_offset > page_len)",
          "4916:   return -ERANGE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4916:   return -EIO;",
          "4917:  if (likely(bitmap[0] & FATTR4_WORD0_ACL)) {",
          "4918:   size_t hdrlen;",
          "4924:   xdr->p = bm_p;",
          "4930:   hdrlen = (u8 *)xdr->p - (u8 *)iov->iov_base;",
          "4931:   attrlen += res->acl_data_offset;",
          "4934:    if (res->acl_flags & NFS4_ACL_LEN_REQUEST) {",
          "4936:     res->acl_len = attrlen;",
          "4937:     goto out;",
          "4938:    }",
          "4941:    return -EINVAL;",
          "4942:   }",
          "4943:   xdr_read_pages(xdr, attrlen);",
          "",
          "[Removed Lines]",
          "4919:   u32 recvd;",
          "4925:   res->acl_data_offset = be32_to_cpup(bm_p) + 2;",
          "4926:   res->acl_data_offset <<= 2;",
          "4932:   recvd = req->rq_rcv_buf.len - hdrlen;",
          "4933:   if (attrlen > recvd) {",
          "4939:    dprintk(\"NFS: acl reply: attrlen %u > recvd %u\\n\",",
          "4940:      attrlen, recvd);",
          "",
          "[Added Lines]",
          "4937:   if (attrlen > page_len) {",
          "4943:    dprintk(\"NFS: acl reply: attrlen %zu > page_len %u\\n\",",
          "4944:      attrlen, page_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "331818f1c468a24e581aedcbe52af799366a9dfe",
      "candidate_info": {
        "commit_hash": "331818f1c468a24e581aedcbe52af799366a9dfe",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/331818f1c468a24e581aedcbe52af799366a9dfe",
        "files": [
          "fs/nfs/nfs4proc.c",
          "fs/nfs/nfs4xdr.c",
          "include/linux/nfs_xdr.h"
        ],
        "message": "NFSv4: Fix an Oops in the NFSv4 getacl code\n\nCommit bf118a342f10dafe44b14451a1392c3254629a1f (NFSv4: include bitmap\nin nfsv4 get acl data) introduces the 'acl_scratch' page for the case\nwhere we may need to decode multi-page data. However it fails to take\ninto account the fact that the variable may be NULL (for the case where\nwe're not doing multi-page decode), and it also attaches it to the\nencoding xdr_stream rather than the decoding one.\n\nThe immediate result is an Oops in nfs4_xdr_enc_getacl due to the\ncall to page_address() with a NULL page pointer.\n\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>\nCc: Andy Adamson <andros@netapp.com>\nCc: stable@vger.kernel.org",
        "before_after_code_files": [
          "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
          "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c",
          "include/linux/nfs_xdr.h||include/linux/nfs_xdr.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c",
            "include/linux/nfs_xdr.h||include/linux/nfs_xdr.h"
          ],
          "candidate": [
            "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c",
            "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c",
            "include/linux/nfs_xdr.h||include/linux/nfs_xdr.h"
          ]
        }
      },
      "candidate_diff": {
        "fs/nfs/nfs4proc.c||fs/nfs/nfs4proc.c": [
          "File: fs/nfs/nfs4proc.c -> fs/nfs/nfs4proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3575:  }",
          "3576:  if (npages > 1) {",
          "3580:    goto out_free;",
          "3581:  }",
          "3582:  args.acl_len = npages * PAGE_SIZE;",
          "",
          "[Removed Lines]",
          "3578:   args.acl_scratch = alloc_page(GFP_KERNEL);",
          "3579:   if (!args.acl_scratch)",
          "",
          "[Added Lines]",
          "3578:   res.acl_scratch = alloc_page(GFP_KERNEL);",
          "3579:   if (!res.acl_scratch)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3612:  for (i = 0; i < npages; i++)",
          "3613:   if (pages[i])",
          "3614:    __free_page(pages[i]);",
          "3617:  return ret;",
          "3618: }",
          "",
          "[Removed Lines]",
          "3615:  if (args.acl_scratch)",
          "3616:   __free_page(args.acl_scratch);",
          "",
          "[Added Lines]",
          "3615:  if (res.acl_scratch)",
          "3616:   __free_page(res.acl_scratch);",
          "",
          "---------------"
        ],
        "fs/nfs/nfs4xdr.c||fs/nfs/nfs4xdr.c": [
          "File: fs/nfs/nfs4xdr.c -> fs/nfs/nfs4xdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2523:  xdr_inline_pages(&req->rq_rcv_buf, replen << 2,",
          "2524:   args->acl_pages, args->acl_pgbase, args->acl_len);",
          "2527:  encode_nops(&hdr);",
          "2528: }",
          "",
          "[Removed Lines]",
          "2525:  xdr_set_scratch_buffer(xdr, page_address(args->acl_scratch), PAGE_SIZE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6032:  struct compound_hdr hdr;",
          "6033:  int status;",
          "6035:  status = decode_compound_hdr(xdr, &hdr);",
          "6036:  if (status)",
          "6037:   goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6034:  if (res->acl_scratch != NULL) {",
          "6035:   void *p = page_address(res->acl_scratch);",
          "6036:   xdr_set_scratch_buffer(xdr, p, PAGE_SIZE);",
          "6037:  }",
          "",
          "---------------"
        ],
        "include/linux/nfs_xdr.h||include/linux/nfs_xdr.h": [
          "File: include/linux/nfs_xdr.h -> include/linux/nfs_xdr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:  size_t    acl_len;",
          "615:  unsigned int   acl_pgbase;",
          "616:  struct page **   acl_pages;",
          "618:  struct nfs4_sequence_args  seq_args;",
          "619: };",
          "",
          "[Removed Lines]",
          "617:  struct page *   acl_scratch;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "624:  size_t    acl_len;",
          "625:  size_t    acl_data_offset;",
          "626:  int    acl_flags;",
          "627:  struct nfs4_sequence_res seq_res;",
          "628: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:  struct page *   acl_scratch;",
          "",
          "---------------"
        ]
      }
    }
  ]
}