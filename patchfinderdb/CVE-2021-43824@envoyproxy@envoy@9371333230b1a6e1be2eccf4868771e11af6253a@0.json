{
  "cve_id": "CVE-2021-43824",
  "cve_desc": "Envoy is an open source edge and service proxy, designed for cloud-native applications. In affected versions a crafted request crashes Envoy when a CONNECT request is sent to JWT filter configured with regex match. This provides a denial of service attack vector. The only workaround is to not use regex in the JWT filter. Users are advised to upgrade.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "9371333230b1a6e1be2eccf4868771e11af6253a",
  "patch_info": {
    "commit_hash": "9371333230b1a6e1be2eccf4868771e11af6253a",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/9371333230b1a6e1be2eccf4868771e11af6253a",
    "files": [
      "docs/root/version_history/current.rst",
      "source/extensions/filters/http/jwt_authn/matcher.cc",
      "test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
      "test/extensions/filters/http/jwt_authn/test_common.h"
    ],
    "message": "CVE-2021-43824\n\njwt_atuhn: fixed the crash when a CONNECT request is sent to JWT filter\nconfigured with regex match.\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
    "before_after_code_files": [
      "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
      "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
      "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
    ]
  },
  "patch_diff": {
    "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc": [
      "File: source/extensions/filters/http/jwt_authn/matcher.cc -> source/extensions/filters/http/jwt_authn/matcher.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:   bool matches(const Http::RequestHeaderMap& headers) const override {",
      "119:     if (BaseMatcherImpl::matchRoute(headers)) {",
      "120:       const Http::HeaderString& path = headers.Path()->value();",
      "121:       const absl::string_view query_string = Http::Utility::findQueryStringStart(path);",
      "122:       absl::string_view path_view = path.getStringView();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "120:       if (headers.Path() == nullptr) {",
      "121:         return false;",
      "122:       }",
      "",
      "---------------"
    ],
    "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc": [
      "File: test/extensions/filters/http/jwt_authn/filter_integration_test.cc -> test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "326:   }",
      "327: }",
      "330: class RemoteJwksIntegrationTest : public HttpProtocolIntegrationTest {",
      "331: public:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "330: TEST_P(LocalJwksIntegrationTest, ConnectRequestWithRegExMatch) {",
      "331:   config_helper_.prependFilter(getAuthFilterConfig(ExampleConfigWithRegEx, true));",
      "332:   initialize();",
      "334:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "336:   auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{",
      "337:       {\":method\", \"CONNECT\"},",
      "338:       {\":authority\", \"host.com:80\"},",
      "339:       {\"authorization\", \"Bearer \" + std::string(GoodToken)},",
      "340:   });",
      "341:   request_encoder_ = &encoder_decoder.first;",
      "342:   auto response = std::move(encoder_decoder.second);",
      "344:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
      "347:     ASSERT_TRUE(response->waitForEndStream());",
      "348:     ASSERT_TRUE(response->complete());",
      "349:     EXPECT_EQ(\"404\", response->headers().getStatusValue());",
      "350:   } else {",
      "351:     ASSERT_TRUE(response->waitForReset());",
      "352:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
      "353:   }",
      "354: }",
      "",
      "---------------"
    ],
    "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h": [
      "File: test/extensions/filters/http/jwt_authn/test_common.h -> test/extensions/filters/http/jwt_authn/test_common.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: bypass_cors_preflight: true",
      "86: )\";",
      "89: const char ProviderName[] = \"example_provider\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88: const char ExampleConfigWithRegEx[] = R\"(",
      "89: providers:",
      "90:   example_provider:",
      "91:     issuer: https://example.com",
      "92:     audiences:",
      "93:     - example_service",
      "94:     - http://example_service1",
      "95:     - https://example_service2/",
      "96:     remote_jwks:",
      "97:       http_uri:",
      "98:         uri: https://pubkey_server/pubkey_path",
      "99:         cluster: pubkey_cluster",
      "100:         timeout:",
      "101:           seconds: 5",
      "102:       cache_duration:",
      "103:         seconds: 600",
      "104:     forward_payload_header: sec-istio-auth-userinfo",
      "105: rules:",
      "106: - match:",
      "107:     safe_regex:",
      "108:       google_re2: {}",
      "109:       regex: \"/somethig/.*\"",
      "110:   requires:",
      "111:     provider_name: \"example_provider\"",
      "112: - match:",
      "113:     path: \"/\"",
      "114:   requires:",
      "115:     provider_name: \"example_provider\"",
      "116: bypass_cors_preflight: true",
      "117: )\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ac02715d687b72b901e870f3b1e9b005289365e4",
      "candidate_info": {
        "commit_hash": "ac02715d687b72b901e870f3b1e9b005289365e4",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/ac02715d687b72b901e870f3b1e9b005289365e4",
        "files": [
          "changelogs/current.yaml",
          "source/common/http/http2/codec_impl.cc",
          "source/common/quic/envoy_quic_client_stream.cc",
          "source/common/runtime/runtime_features.cc",
          "source/common/tcp_proxy/upstream.cc",
          "test/common/http/http2/codec_impl_test.cc",
          "test/common/tcp_proxy/BUILD",
          "test/common/tcp_proxy/upstream_test.cc",
          "test/extensions/filters/http/compressor/compressor_integration_tests.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/integration/BUILD",
          "test/integration/protocol_integration_test.cc",
          "test/integration/tcp_tunneling_integration_test.cc"
        ],
        "message": "http: fixing up CONNECT to be RFC compliant (#21440)\n\nRisk Level: Medium (data plane changes)\nTesting: updated tests\nDocs Changes: n/a\nRelease Notes: inline\nRuntime guard: envoy.reloadable_features.use_rfc_connect\nFixes #20378\n\nSigned-off-by: Alyssa Wilk <alyssar@chromium.org>",
        "before_after_code_files": [
          "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc",
          "source/common/quic/envoy_quic_client_stream.cc||source/common/quic/envoy_quic_client_stream.cc",
          "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
          "source/common/tcp_proxy/upstream.cc||source/common/tcp_proxy/upstream.cc",
          "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc",
          "test/common/tcp_proxy/upstream_test.cc||test/common/tcp_proxy/upstream_test.cc",
          "test/extensions/filters/http/compressor/compressor_integration_tests.cc||test/extensions/filters/http/compressor/compressor_integration_tests.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc",
          "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc"
          ],
          "candidate": [
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc": [
          "File: source/common/http/http2/codec_impl.cc -> source/common/http/http2/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:     modified_headers = createHeaderMap<RequestHeaderMapImpl>(headers);",
          "306:     }",
          "307:     encodeHeadersBase(*modified_headers, end_stream);",
          "308:   } else {",
          "",
          "[Removed Lines]",
          "303:     modified_headers->setProtocol(Headers::get().ProtocolValues.Bytestream);",
          "304:     if (!headers.Path()) {",
          "305:       modified_headers->setPath(\"/\");",
          "",
          "[Added Lines]",
          "303:     if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.use_rfc_connect\")) {",
          "304:       modified_headers->removeScheme();",
          "305:       modified_headers->removePath();",
          "306:       modified_headers->removeProtocol();",
          "307:     } else {",
          "308:       modified_headers->setProtocol(Headers::get().ProtocolValues.Bytestream);",
          "309:       if (!headers.Path()) {",
          "310:         modified_headers->setPath(\"/\");",
          "311:       }",
          "",
          "---------------"
        ],
        "source/common/quic/envoy_quic_client_stream.cc||source/common/quic/envoy_quic_client_stream.cc": [
          "File: source/common/quic/envoy_quic_client_stream.cc -> source/common/quic/envoy_quic_client_stream.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   auto spdy_headers = envoyHeadersToSpdyHeaderBlock(headers);",
          "45:   if (headers.Method()) {",
          "46:     if (headers.Method()->value() == \"CONNECT\") {",
          "55:       }",
          "56:     } else if (headers.Method()->value() == \"HEAD\") {",
          "57:       sent_head_request_ = true;",
          "",
          "[Removed Lines]",
          "52:       spdy_headers[\":protocol\"] = Http::Headers::get().ProtocolValues.Bytestream;",
          "53:       if (!headers.Path()) {",
          "54:         spdy_headers[\":path\"] = \"/\";",
          "",
          "[Added Lines]",
          "47:       if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.use_rfc_connect\")) {",
          "48:         spdy_headers.erase(\":scheme\");",
          "49:         spdy_headers.erase(\":path\");",
          "50:         spdy_headers.erase(\":protocol\");",
          "51:       } else {",
          "54:         spdy_headers[\":protocol\"] = Http::Headers::get().ProtocolValues.Bytestream;",
          "55:         if (!headers.Path()) {",
          "56:           spdy_headers[\":path\"] = \"/\";",
          "57:         }",
          "",
          "---------------"
        ],
        "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
          "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: RUNTIME_GUARD(envoy_reloadable_features_udp_listener_updates_filter_chain_in_place);",
          "72: RUNTIME_GUARD(envoy_reloadable_features_update_expected_rq_timeout_on_retry);",
          "73: RUNTIME_GUARD(envoy_reloadable_features_update_grpc_response_error_tag);",
          "74: RUNTIME_GUARD(envoy_reloadable_features_validate_connect);",
          "75: RUNTIME_GUARD(envoy_restart_features_explicit_wildcard_resource);",
          "76: RUNTIME_GUARD(envoy_restart_features_remove_runtime_singleton);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: RUNTIME_GUARD(envoy_reloadable_features_use_rfc_connect);",
          "",
          "---------------"
        ],
        "source/common/tcp_proxy/upstream.cc||source/common/tcp_proxy/upstream.cc": [
          "File: source/common/tcp_proxy/upstream.cc -> source/common/tcp_proxy/upstream.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   auto headers = Http::createHeaderMap<Http::RequestHeaderMapImpl>({",
          "279:       {Http::Headers::get().Method, config_.usePost() ? \"POST\" : \"CONNECT\"},",
          "280:       {Http::Headers::get().Host, config_.hostname()},",
          "283:   });",
          "286:     headers->addReference(Http::Headers::get().Protocol,",
          "287:                           Http::Headers::get().ProtocolValues.Bytestream);",
          "288:   }",
          "",
          "[Removed Lines]",
          "281:       {Http::Headers::get().Path, \"/\"},",
          "282:       {Http::Headers::get().Scheme, scheme},",
          "285:   if (!config_.usePost()) {",
          "",
          "[Added Lines]",
          "283:   if (config_.usePost()) {",
          "284:     headers->addReference(Http::Headers::get().Path, \"/\");",
          "285:     headers->addReference(Http::Headers::get().Scheme, scheme);",
          "286:   } else if (!Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.use_rfc_connect\")) {",
          "287:     headers->addReference(Http::Headers::get().Path, \"/\");",
          "288:     headers->addReference(Http::Headers::get().Scheme, scheme);",
          "",
          "---------------"
        ],
        "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc": [
          "File: test/common/http/http2/codec_impl_test.cc -> test/common/http/http2/codec_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3613: }",
          "3617:   client_http2_options_.set_allow_connect(true);",
          "3618:   server_http2_options_.set_allow_connect(true);",
          "3619:   initialize();",
          "",
          "[Removed Lines]",
          "3616: TEST_P(Http2CodecImplTest, ConnectTest) {",
          "",
          "[Added Lines]",
          "3616: TEST_P(Http2CodecImplTest, ConnectTestOld) {",
          "3617:   scoped_runtime_.mergeValues({{\"envoy.reloadable_features.use_rfc_connect\", \"false\"}});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3639:   driveToCompletion();",
          "3640: }",
          "3642: TEST_P(Http2CodecImplTest, ShouldWaitForDeferredBodyToProcessBeforeProcessingTrailers) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3643: TEST_P(Http2CodecImplTest, ConnectTest) {",
          "3644:   client_http2_options_.set_allow_connect(true);",
          "3645:   server_http2_options_.set_allow_connect(true);",
          "3646:   initialize();",
          "3647:   MockStreamCallbacks callbacks;",
          "3648:   request_encoder_->getStream().addCallbacks(callbacks);",
          "3650:   TestRequestHeaderMapImpl request_headers;",
          "3651:   HttpTestUtility::addDefaultHeaders(request_headers);",
          "3652:   request_headers.setReferenceKey(Headers::get().Method, Http::Headers::get().MethodValues.Connect);",
          "3653:   request_headers.setReferenceKey(Headers::get().Protocol, \"bytestream\");",
          "3654:   TestRequestHeaderMapImpl expected_headers;",
          "3655:   expected_headers.setReferenceKey(Headers::get().Host, \"host\");",
          "3656:   expected_headers.setReferenceKey(Headers::get().Method,",
          "3657:                                    Http::Headers::get().MethodValues.Connect);",
          "3658:   EXPECT_CALL(request_decoder_, decodeHeaders_(HeaderMapEqual(&expected_headers), false));",
          "3659:   EXPECT_TRUE(request_encoder_->encodeHeaders(request_headers, false).ok());",
          "3660:   driveToCompletion();",
          "3662:   EXPECT_CALL(callbacks, onResetStream(StreamResetReason::ConnectError, _));",
          "3663:   EXPECT_CALL(server_stream_callbacks_, onResetStream(StreamResetReason::ConnectError, _));",
          "3664:   response_encoder_->getStream().resetStream(StreamResetReason::ConnectError);",
          "3665:   driveToCompletion();",
          "3666: }",
          "",
          "---------------"
        ],
        "test/common/tcp_proxy/upstream_test.cc||test/common/tcp_proxy/upstream_test.cc": [
          "File: test/common/tcp_proxy/upstream_test.cc -> test/common/tcp_proxy/upstream_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"test/mocks/tcp/mocks.h\"",
          "10: #include \"test/test_common/environment.h\"",
          "11: #include \"test/test_common/network_utility.h\"",
          "13: #include \"gmock/gmock.h\"",
          "14: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"test/test_common/test_runtime.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224: TYPED_TEST_SUITE(HttpUpstreamRequestEncoderTest, Implementations);",
          "227:   this->setupUpstream();",
          "228:   std::unique_ptr<Http::RequestHeaderMapImpl> expected_headers;",
          "229:   expected_headers = Http::createHeaderMap<Http::RequestHeaderMapImpl>({",
          "",
          "[Removed Lines]",
          "226: TYPED_TEST(HttpUpstreamRequestEncoderTest, RequestEncoder) {",
          "",
          "[Added Lines]",
          "227: TYPED_TEST(HttpUpstreamRequestEncoderTest, RequestEncoderOld) {",
          "228:   TestScopedRuntime scoped_runtime;",
          "229:   scoped_runtime.mergeValues({{\"envoy.reloadable_features.use_rfc_connect\", \"false\"}});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:   this->upstream_->setRequestEncoder(this->encoder_, false);",
          "244: }",
          "246: TYPED_TEST(HttpUpstreamRequestEncoderTest, RequestEncoderUsePost) {",
          "247:   this->config_message_.set_use_post(true);",
          "248:   this->setupUpstream();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250: TYPED_TEST(HttpUpstreamRequestEncoderTest, RequestEncoder) {",
          "251:   this->setupUpstream();",
          "252:   std::unique_ptr<Http::RequestHeaderMapImpl> expected_headers;",
          "253:   expected_headers = Http::createHeaderMap<Http::RequestHeaderMapImpl>({",
          "254:       {Http::Headers::get().Method, \"CONNECT\"},",
          "255:       {Http::Headers::get().Host, this->config_->hostname()},",
          "256:   });",
          "258:   EXPECT_CALL(this->encoder_, encodeHeaders(HeaderMapEqualRef(expected_headers.get()), false));",
          "259:   this->upstream_->setRequestEncoder(this->encoder_, false);",
          "260: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "287:       {Http::Headers::get().Host, this->config_->hostname()},",
          "288:   });",
          "298:   expected_headers->setCopy(Http::LowerCaseString(\"header0\"), \"value0\");",
          "299:   expected_headers->addCopy(Http::LowerCaseString(\"header1\"), \"value1\");",
          "300:   expected_headers->addCopy(Http::LowerCaseString(\"header1\"), \"value2\");",
          "",
          "[Removed Lines]",
          "290:   if (this->is_http2_) {",
          "291:     expected_headers->setReferenceKey(Http::Headers::get().Path, \"/\");",
          "292:     expected_headers->setReferenceKey(Http::Headers::get().Scheme,",
          "293:                                       Http::Headers::get().SchemeValues.Http);",
          "294:     expected_headers->setReferenceKey(Http::Headers::get().Protocol,",
          "295:                                       Http::Headers::get().ProtocolValues.Bytestream);",
          "296:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "323:       {Http::Headers::get().Host, this->config_->hostname()},",
          "324:   });",
          "334:   expected_headers->setCopy(Http::LowerCaseString(\"key\"), \"value1\");",
          "335:   expected_headers->addCopy(Http::LowerCaseString(\"key\"), \"value2\");",
          "345:   expected_headers->setCopy(Http::LowerCaseString(\"key\"), \"value1\");",
          "346:   expected_headers->addCopy(Http::LowerCaseString(\"key\"), \"value2\");",
          "",
          "[Removed Lines]",
          "326:   if (this->is_http2_) {",
          "327:     expected_headers->setReferenceKey(Http::Headers::get().Path, \"/\");",
          "328:     expected_headers->setReferenceKey(Http::Headers::get().Scheme,",
          "329:                                       Http::Headers::get().SchemeValues.Http);",
          "330:     expected_headers->setReferenceKey(Http::Headers::get().Protocol,",
          "331:                                       Http::Headers::get().ProtocolValues.Bytestream);",
          "332:   }",
          "337:   if (this->is_http2_) {",
          "338:     expected_headers->setReferenceKey(Http::Headers::get().Path, \"/\");",
          "339:     expected_headers->setReferenceKey(Http::Headers::get().Scheme,",
          "340:                                       Http::Headers::get().SchemeValues.Http);",
          "341:     expected_headers->setReferenceKey(Http::Headers::get().Protocol,",
          "342:                                       Http::Headers::get().ProtocolValues.Bytestream);",
          "343:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "382:       {Http::Headers::get().Host, this->config_->hostname()},",
          "383:   });",
          "393:   expected_headers->setCopy(Http::LowerCaseString(\"header0\"), \"value0\");",
          "394:   expected_headers->addCopy(Http::LowerCaseString(\"downstream_local_port\"), \"80\");",
          "395:   auto ip_versions = TestEnvironment::getIpVersionsForTest();",
          "",
          "[Removed Lines]",
          "385:   if (this->is_http2_) {",
          "386:     expected_headers->setReferenceKey(Http::Headers::get().Path, \"/\");",
          "387:     expected_headers->setReferenceKey(Http::Headers::get().Scheme,",
          "388:                                       Http::Headers::get().SchemeValues.Http);",
          "389:     expected_headers->setReferenceKey(Http::Headers::get().Protocol,",
          "390:                                       Http::Headers::get().ProtocolValues.Bytestream);",
          "391:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/compressor/compressor_integration_tests.cc||test/extensions/filters/http/compressor/compressor_integration_tests.cc": [
          "File: test/extensions/filters/http/compressor/compressor_integration_tests.cc -> test/extensions/filters/http/compressor/compressor_integration_tests.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:   RELEASE_ASSERT(result, result.message());",
          "269:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
          "270:   EXPECT_EQ(upstream_request_->headers().get(Http::Headers::get().Method)[0]->value(), \"CONNECT\");",
          "279:   upstream_request_->encodeHeaders(default_response_headers_, false);",
          "",
          "[Removed Lines]",
          "271:   if (upstreamProtocol() == Http::CodecType::HTTP1) {",
          "272:     EXPECT_TRUE(upstream_request_->headers().get(Http::Headers::get().Protocol).empty());",
          "273:   } else {",
          "274:     EXPECT_EQ(upstream_request_->headers().get(Http::Headers::get().Protocol)[0]->value(),",
          "275:               \"bytestream\");",
          "276:   }",
          "",
          "[Added Lines]",
          "271:   EXPECT_TRUE(upstream_request_->headers().get(Http::Headers::get().Protocol).empty());",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/filter_integration_test.cc -> test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   request_encoder_ = &encoder_decoder.first;",
          "304:   auto response = std::move(encoder_decoder.second);",
          "316: }",
          "",
          "[Removed Lines]",
          "306:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
          "309:     ASSERT_TRUE(response->waitForEndStream());",
          "310:     ASSERT_TRUE(response->complete());",
          "311:     EXPECT_EQ(\"404\", response->headers().getStatusValue());",
          "312:   } else {",
          "313:     ASSERT_TRUE(response->waitForReset());",
          "314:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "315:   }",
          "",
          "[Added Lines]",
          "308:   ASSERT_TRUE(response->waitForEndStream());",
          "309:   ASSERT_TRUE(response->complete());",
          "310:   EXPECT_EQ(\"404\", response->headers().getStatusValue());",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2733:   request_encoder_ = &encoder_decoder.first;",
          "2734:   auto response = std::move(encoder_decoder.second);",
          "2746: }",
          "2748: TEST_P(DownstreamProtocolIntegrationTest, ExtendedConnectIsBlocked) {",
          "2749:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
          "2750:     return;",
          "2751:   }",
          "",
          "[Removed Lines]",
          "2736:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
          "2739:     ASSERT_TRUE(response->waitForEndStream());",
          "2740:     EXPECT_EQ(\"404\", response->headers().getStatusValue());",
          "2741:     EXPECT_TRUE(response->complete());",
          "2742:   } else {",
          "2743:     ASSERT_TRUE(response->waitForReset());",
          "2744:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "2745:   }",
          "",
          "[Added Lines]",
          "2738:   ASSERT_TRUE(response->waitForEndStream());",
          "2739:   EXPECT_EQ(\"404\", response->headers().getStatusValue());",
          "2740:   EXPECT_TRUE(response->complete());",
          "2744:   config_helper_.addRuntimeOverride(\"envoy.reloadable_features.use_rfc_connect\", \"false\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2785:   auto response = codec_client_->makeHeaderOnlyRequest(",
          "2786:       Http::TestRequestHeaderMapImpl{{\":method\", \"CONNECT\"}, {\":authority\", \"sni.lyft.com\"}});",
          "2789:   EXPECT_FALSE(codec_client_->disconnected());",
          "2790: }",
          "",
          "[Removed Lines]",
          "2788:   ASSERT_TRUE(response->waitForReset());",
          "",
          "[Added Lines]",
          "2784:   ASSERT_TRUE(response->waitForEndStream());",
          "2785:   EXPECT_EQ(\"404\", response->headers().getStatusValue());",
          "",
          "---------------"
        ],
        "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc": [
          "File: test/integration/tcp_tunneling_integration_test.cc -> test/integration/tcp_tunneling_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:             auto* route_config = hcm.mutable_route_config();",
          "34:             ASSERT_EQ(1, route_config->virtual_hosts_size());",
          "35:             route_config->mutable_virtual_hosts(0)->clear_domains();",
          "37:           }",
          "38:         });",
          "39:     HttpIntegrationTest::initialize();",
          "",
          "[Removed Lines]",
          "36:             route_config->mutable_virtual_hosts(0)->add_domains(\"host:80\");",
          "",
          "[Added Lines]",
          "36:             route_config->mutable_virtual_hosts(0)->add_domains(\"foo.lyft.com:80\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:                                                   {\":path\", \"/\"},",
          "68:                                                   {\":protocol\", \"bytestream\"},",
          "69:                                                   {\":scheme\", \"https\"},",
          "71:   void clearExtendedConnectHeaders() {",
          "72:     connect_headers_.removeProtocol();",
          "73:     connect_headers_.removePath();",
          "",
          "[Removed Lines]",
          "70:                                                   {\":authority\", \"host:80\"}};",
          "",
          "[Added Lines]",
          "70:                                                   {\":authority\", \"foo.lyft.com:80\"}};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:                                      {\":path\", \"/\"},",
          "228:                                      {\":protocol\", \"bytestream\"},",
          "229:                                      {\":scheme\", \"https\"},",
          "233:   if (fake_upstreams_[0]->waitForRawConnection(fake_raw_upstream_connection_) &&",
          "",
          "[Removed Lines]",
          "230:                                      {\":authority\", \"host:80\"}});",
          "",
          "[Added Lines]",
          "230:                                      {\":authority\", \"foo.lyft.com:80\"}});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:   }",
          "302:   Http::TestRequestHeaderMapImpl connect_headers_{{\":method\", \"CONNECT\"},",
          "307:   IntegrationStreamDecoderPtr response_;",
          "308: };",
          "317: TEST_P(ProxyingConnectIntegrationTest, ProxyConnect) {",
          "318:   initialize();",
          "",
          "[Removed Lines]",
          "303:                                                   {\":path\", \"/\"},",
          "304:                                                   {\":protocol\", \"bytestream\"},",
          "305:                                                   {\":scheme\", \"https\"},",
          "306:                                                   {\":authority\", \"host:80\"}};",
          "310: INSTANTIATE_TEST_SUITE_P(Protocols, ProxyingConnectIntegrationTest,",
          "311:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams(",
          "312:                              {Http::CodecType::HTTP1, Http::CodecType::HTTP2,",
          "313:                               Http::CodecType::HTTP3},",
          "314:                              {Http::CodecType::HTTP1})),",
          "315:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "",
          "[Added Lines]",
          "303:                                                   {\":authority\", \"foo.lyft.com:80\"}};",
          "307: INSTANTIATE_TEST_SUITE_P(",
          "308:     Protocols, ProxyingConnectIntegrationTest,",
          "309:     testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams(",
          "310:         {Http::CodecType::HTTP1, Http::CodecType::HTTP2, Http::CodecType::HTTP3},",
          "311:         {Http::CodecType::HTTP1, Http::CodecType::HTTP2, Http::CodecType::HTTP3})),",
          "312:     HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "314: TEST_P(ProxyingConnectIntegrationTest, ProxyConnectLegacy) {",
          "315:   config_helper_.addRuntimeOverride(\"envoy.reloadable_features.use_rfc_connect\", \"false\");",
          "317:   initialize();",
          "319:   Http::TestRequestHeaderMapImpl legacy_connect_headers{{\":method\", \"CONNECT\"},",
          "320:                                                         {\":path\", \"/\"},",
          "321:                                                         {\":protocol\", \"bytestream\"},",
          "322:                                                         {\":scheme\", \"https\"},",
          "323:                                                         {\":authority\", \"foo.lyft.com:80\"}};",
          "325:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "326:   auto encoder_decoder = codec_client_->startRequest(legacy_connect_headers);",
          "327:   request_encoder_ = &encoder_decoder.first;",
          "328:   response_ = std::move(encoder_decoder.second);",
          "331:   AssertionResult result =",
          "332:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_);",
          "333:   RELEASE_ASSERT(result, result.message());",
          "334:   result = fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_);",
          "335:   RELEASE_ASSERT(result, result.message());",
          "336:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
          "337:   EXPECT_EQ(upstream_request_->headers().get(Http::Headers::get().Method)[0]->value(), \"CONNECT\");",
          "338:   if (upstreamProtocol() == Http::CodecType::HTTP1) {",
          "339:     EXPECT_TRUE(upstream_request_->headers().get(Http::Headers::get().Protocol).empty());",
          "340:   } else {",
          "341:     EXPECT_EQ(upstream_request_->headers().getProtocolValue(), \"bytestream\");",
          "342:   }",
          "345:   upstream_request_->encodeHeaders(default_response_headers_, false);",
          "348:   response_->waitForHeaders();",
          "349:   EXPECT_EQ(\"200\", response_->headers().getStatusValue());",
          "352:   codec_client_->sendData(*request_encoder_, \"hello\", false);",
          "353:   ASSERT_TRUE(upstream_request_->waitForData(*dispatcher_, 5));",
          "356:   upstream_request_->encodeData(12, false);",
          "357:   response_->waitForBodyData(12);",
          "359:   cleanupUpstreamAndDownstream();",
          "360: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334:   if (upstreamProtocol() == Http::CodecType::HTTP1) {",
          "335:     EXPECT_TRUE(upstream_request_->headers().get(Http::Headers::get().Protocol).empty());",
          "336:   } else {",
          "339:   }",
          "",
          "[Removed Lines]",
          "337:     EXPECT_EQ(upstream_request_->headers().get(Http::Headers::get().Protocol)[0]->value(),",
          "338:               \"bytestream\");",
          "",
          "[Added Lines]",
          "382:     EXPECT_EQ(\"\", upstream_request_->headers().getSchemeValue());",
          "383:     EXPECT_EQ(\"\", upstream_request_->headers().getProtocolValue());",
          "384:     EXPECT_EQ(\"\", upstream_request_->headers().getSchemeValue());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "384:   RELEASE_ASSERT(result, result.message());",
          "385:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
          "386:   EXPECT_EQ(upstream_request_->headers().getMethodValue(), \"CONNECT\");",
          "393:   auto stripped_host = upstream_request_->headers().get(Http::LowerCaseString(\"host-in-envoy\"));",
          "394:   ASSERT_EQ(stripped_host.size(), 1);",
          "398:   upstream_request_->encodeHeaders(default_response_headers_, false);",
          "",
          "[Removed Lines]",
          "387:   EXPECT_EQ(upstream_request_->headers().getHostValue(), \"host:80\");",
          "388:   if (upstreamProtocol() == Http::CodecType::HTTP1) {",
          "389:     EXPECT_TRUE(upstream_request_->headers().getProtocolValue().empty());",
          "390:   } else {",
          "391:     EXPECT_EQ(upstream_request_->headers().getProtocolValue(), \"bytestream\");",
          "392:   }",
          "395:   EXPECT_EQ(stripped_host[0]->value(), \"host\");",
          "",
          "[Added Lines]",
          "433:   EXPECT_EQ(upstream_request_->headers().getHostValue(), \"foo.lyft.com:80\");",
          "436:   EXPECT_EQ(stripped_host[0]->value(), \"foo.lyft.com\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "430:   RELEASE_ASSERT(result, result.message());",
          "431:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
          "432:   EXPECT_EQ(upstream_request_->headers().get(Http::Headers::get().Method)[0]->value(), \"CONNECT\");",
          "441:   upstream_request_->encodeHeaders(default_response_headers_, false);",
          "",
          "[Removed Lines]",
          "433:   if (upstreamProtocol() == Http::CodecType::HTTP1) {",
          "434:     EXPECT_TRUE(upstream_request_->headers().get(Http::Headers::get().Protocol).empty());",
          "435:   } else {",
          "436:     EXPECT_EQ(upstream_request_->headers().get(Http::Headers::get().Protocol)[0]->value(),",
          "437:               \"bytestream\");",
          "438:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "467:           envoy::extensions::filters::network::tcp_proxy::v3::TcpProxy proxy_config;",
          "468:           proxy_config.set_stat_prefix(\"tcp_stats\");",
          "469:           proxy_config.set_cluster(\"cluster_0\");",
          "472:           auto* listener = bootstrap.mutable_static_resources()->add_listeners();",
          "473:           listener->set_name(\"tcp_proxy\");",
          "",
          "[Removed Lines]",
          "470:           proxy_config.mutable_tunneling_config()->set_hostname(\"host.com:80\");",
          "",
          "[Added Lines]",
          "505:           proxy_config.mutable_tunneling_config()->set_hostname(\"foo.lyft.com:80\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "568:     envoy::extensions::filters::network::tcp_proxy::v3::TcpProxy proxy_config;",
          "569:     proxy_config.set_stat_prefix(\"tcp_stats\");",
          "570:     proxy_config.set_cluster(\"cluster_0\");",
          "572:     proxy_config.mutable_tunneling_config()->set_use_post(true);",
          "574:     auto* listeners = bootstrap.mutable_static_resources()->mutable_listeners();",
          "",
          "[Removed Lines]",
          "571:     proxy_config.mutable_tunneling_config()->set_hostname(\"host.com:80\");",
          "",
          "[Added Lines]",
          "606:     proxy_config.mutable_tunneling_config()->set_hostname(\"foo.lyft.com:80\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "605:     envoy::extensions::filters::network::tcp_proxy::v3::TcpProxy proxy_config;",
          "606:     proxy_config.set_stat_prefix(\"tcp_stats\");",
          "607:     proxy_config.set_cluster(\"cluster_0\");",
          "609:     auto new_header = proxy_config.mutable_tunneling_config()->mutable_headers_to_add()->Add();",
          "610:     new_header->mutable_header()->set_key(\"downstream-local-ip\");",
          "611:     new_header->mutable_header()->set_value(\"%DOWNSTREAM_LOCAL_ADDRESS_WITHOUT_PORT%\");",
          "",
          "[Removed Lines]",
          "608:     proxy_config.mutable_tunneling_config()->set_hostname(\"host.com:80\");",
          "",
          "[Added Lines]",
          "643:     proxy_config.mutable_tunneling_config()->set_hostname(\"foo.lyft.com:80\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "657:   config_helper_.addConfigModifier([&](envoy::config::bootstrap::v3::Bootstrap& bootstrap) -> void {",
          "658:     proxy_config.set_stat_prefix(\"tcp_stats\");",
          "659:     proxy_config.set_cluster(\"cluster_0\");",
          "661:     auto address_header = proxy_config.mutable_tunneling_config()->mutable_headers_to_add()->Add();",
          "662:     address_header->mutable_header()->set_key(\"config-version\");",
          "663:     address_header->mutable_header()->set_value(\"1\");",
          "",
          "[Removed Lines]",
          "660:     proxy_config.mutable_tunneling_config()->set_hostname(\"host.com:80\");",
          "",
          "[Added Lines]",
          "695:     proxy_config.mutable_tunneling_config()->set_hostname(\"foo.lyft.com:80\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "858:     envoy::extensions::filters::network::tcp_proxy::v3::TcpProxy proxy_config;",
          "859:     proxy_config.set_stat_prefix(\"tcp_stats\");",
          "860:     proxy_config.set_cluster(\"cluster_0\");",
          "",
          "[Removed Lines]",
          "861:     proxy_config.mutable_tunneling_config()->set_hostname(\"host.com:80\");",
          "",
          "[Added Lines]",
          "896:     proxy_config.mutable_tunneling_config()->set_hostname(\"foo.lyft.com:80\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1206:   std::string data;",
          "1207:   ASSERT_TRUE(fake_upstream_connection->waitForData(",
          "1208:       FakeRawConnection::waitForInexactMatch(\"\\r\\n\\r\\n\"), &data));",
          "1212:   ASSERT_TRUE(",
          "",
          "[Removed Lines]",
          "1209:   ASSERT_THAT(data, testing::HasSubstr(\"CONNECT host.com:80 HTTP/1.1\"));",
          "",
          "[Added Lines]",
          "1244:   ASSERT_THAT(data, testing::HasSubstr(\"CONNECT foo.lyft.com:80 HTTP/1.1\"));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1295:   tcp_client_->close();",
          "1296: }",
          "1304: } // namespace",
          "1305: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "1298: INSTANTIATE_TEST_SUITE_P(IpAndHttpVersions, TcpTunnelingIntegrationTest,",
          "1299:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams(",
          "1300:                              {Http::CodecType::HTTP1},",
          "1301:                              {Http::CodecType::HTTP1, Http::CodecType::HTTP2,",
          "1302:                               Http::CodecType::HTTP3})),",
          "1303:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "",
          "[Added Lines]",
          "1333: INSTANTIATE_TEST_SUITE_P(",
          "1334:     IpAndHttpVersions, TcpTunnelingIntegrationTest,",
          "1335:     testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams(",
          "1336:         {Http::CodecType::HTTP1, Http::CodecType::HTTP2, Http::CodecType::HTTP3},",
          "1337:         {Http::CodecType::HTTP1, Http::CodecType::HTTP2, Http::CodecType::HTTP3})),",
          "1338:     HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11e461a0fa1d3aa46ccfe9c5f20d3a8a5ef70c78",
      "candidate_info": {
        "commit_hash": "11e461a0fa1d3aa46ccfe9c5f20d3a8a5ef70c78",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/11e461a0fa1d3aa46ccfe9c5f20d3a8a5ef70c78",
        "files": [
          "docs/root/version_history/current.rst",
          "source/extensions/filters/http/jwt_authn/matcher.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/extensions/filters/http/jwt_authn/test_common.h"
        ],
        "message": "[1.18] CVE-2021-43824\n\njwt_atuhn: fixed the crash when a CONNECT request is sent to JWT filter\nconfigured with regex match.\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
            "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
          ],
          "candidate": [
            "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
            "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc": [
          "File: source/extensions/filters/http/jwt_authn/matcher.cc -> source/extensions/filters/http/jwt_authn/matcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   bool matches(const Http::RequestHeaderMap& headers) const override {",
          "127:     if (BaseMatcherImpl::matchRoute(headers)) {",
          "128:       const Http::HeaderString& path = headers.Path()->value();",
          "129:       const absl::string_view query_string = Http::Utility::findQueryStringStart(path);",
          "130:       absl::string_view path_view = path.getStringView();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:       if (headers.Path() == nullptr) {",
          "129:         return false;",
          "130:       }",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/filter_integration_test.cc -> test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:   }",
          "315: }",
          "318: class RemoteJwksIntegrationTest : public HttpProtocolIntegrationTest {",
          "319: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318: TEST_P(LocalJwksIntegrationTest, ConnectRequestWithRegExMatch) {",
          "319:   config_helper_.addFilter(getAuthFilterConfig(ExampleConfigWithRegEx, true));",
          "320:   initialize();",
          "322:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "324:   auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{",
          "325:       {\":method\", \"CONNECT\"},",
          "326:       {\":authority\", \"host.com:80\"},",
          "327:       {\"authorization\", \"Bearer \" + std::string(GoodToken)},",
          "328:   });",
          "329:   request_encoder_ = &encoder_decoder.first;",
          "330:   auto response = std::move(encoder_decoder.second);",
          "332:   if (downstreamProtocol() == Http::CodecClient::Type::HTTP1) {",
          "335:     ASSERT_TRUE(response->waitForEndStream());",
          "336:     ASSERT_TRUE(response->complete());",
          "337:     EXPECT_EQ(\"404\", response->headers().getStatusValue());",
          "338:   } else {",
          "339:     ASSERT_TRUE(response->waitForReset());",
          "340:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "341:   }",
          "342: }",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h": [
          "File: test/extensions/filters/http/jwt_authn/test_common.h -> test/extensions/filters/http/jwt_authn/test_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: bypass_cors_preflight: true",
          "86: )\";",
          "89: const char ProviderName[] = \"example_provider\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: const char ExampleConfigWithRegEx[] = R\"(",
          "89: providers:",
          "90:   example_provider:",
          "91:     issuer: https://example.com",
          "92:     audiences:",
          "93:     - example_service",
          "94:     - http://example_service1",
          "95:     - https://example_service2/",
          "96:     remote_jwks:",
          "97:       http_uri:",
          "98:         uri: https://pubkey_server/pubkey_path",
          "99:         cluster: pubkey_cluster",
          "100:         timeout:",
          "101:           seconds: 5",
          "102:       cache_duration:",
          "103:         seconds: 600",
          "104:     forward_payload_header: sec-istio-auth-userinfo",
          "105: rules:",
          "106: - match:",
          "107:     safe_regex:",
          "108:       google_re2: {}",
          "109:       regex: \"/somethig/.*\"",
          "110:   requires:",
          "111:     provider_name: \"example_provider\"",
          "112: - match:",
          "113:     path: \"/\"",
          "114:   requires:",
          "115:     provider_name: \"example_provider\"",
          "116: bypass_cors_preflight: true",
          "117: )\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1aa9da394f84229f886b06b10b7db2e9b98d9df1",
      "candidate_info": {
        "commit_hash": "1aa9da394f84229f886b06b10b7db2e9b98d9df1",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/1aa9da394f84229f886b06b10b7db2e9b98d9df1",
        "files": [
          "docs/root/version_history/current.rst",
          "source/extensions/filters/http/jwt_authn/matcher.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/extensions/filters/http/jwt_authn/test_common.h"
        ],
        "message": "[1.21] CVE-2021-43824\n\njwt_atuhn: fixed the crash when a CONNECT request is sent to JWT filter\nconfigured with regex match.\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
            "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
          ],
          "candidate": [
            "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
            "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc": [
          "File: source/extensions/filters/http/jwt_authn/matcher.cc -> source/extensions/filters/http/jwt_authn/matcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   bool matches(const Http::RequestHeaderMap& headers) const override {",
          "119:     if (BaseMatcherImpl::matchRoute(headers)) {",
          "120:       const Http::HeaderString& path = headers.Path()->value();",
          "121:       const absl::string_view query_string = Http::Utility::findQueryStringStart(path);",
          "122:       absl::string_view path_view = path.getStringView();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:       if (headers.Path() == nullptr) {",
          "121:         return false;",
          "122:       }",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/filter_integration_test.cc -> test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:   }",
          "327: }",
          "330: class RemoteJwksIntegrationTest : public HttpProtocolIntegrationTest {",
          "331: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330: TEST_P(LocalJwksIntegrationTest, ConnectRequestWithRegExMatch) {",
          "331:   config_helper_.prependFilter(getAuthFilterConfig(ExampleConfigWithRegEx, true));",
          "332:   initialize();",
          "334:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "336:   auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{",
          "337:       {\":method\", \"CONNECT\"},",
          "338:       {\":authority\", \"host.com:80\"},",
          "339:       {\"authorization\", \"Bearer \" + std::string(GoodToken)},",
          "340:   });",
          "341:   request_encoder_ = &encoder_decoder.first;",
          "342:   auto response = std::move(encoder_decoder.second);",
          "344:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
          "347:     ASSERT_TRUE(response->waitForEndStream());",
          "348:     ASSERT_TRUE(response->complete());",
          "349:     EXPECT_EQ(\"404\", response->headers().getStatusValue());",
          "350:   } else {",
          "351:     ASSERT_TRUE(response->waitForReset());",
          "352:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "353:   }",
          "354: }",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h": [
          "File: test/extensions/filters/http/jwt_authn/test_common.h -> test/extensions/filters/http/jwt_authn/test_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: bypass_cors_preflight: true",
          "86: )\";",
          "89: const char ProviderName[] = \"example_provider\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: const char ExampleConfigWithRegEx[] = R\"(",
          "89: providers:",
          "90:   example_provider:",
          "91:     issuer: https://example.com",
          "92:     audiences:",
          "93:     - example_service",
          "94:     - http://example_service1",
          "95:     - https://example_service2/",
          "96:     remote_jwks:",
          "97:       http_uri:",
          "98:         uri: https://pubkey_server/pubkey_path",
          "99:         cluster: pubkey_cluster",
          "100:         timeout:",
          "101:           seconds: 5",
          "102:       cache_duration:",
          "103:         seconds: 600",
          "104:     forward_payload_header: sec-istio-auth-userinfo",
          "105: rules:",
          "106: - match:",
          "107:     safe_regex:",
          "108:       google_re2: {}",
          "109:       regex: \"/somethig/.*\"",
          "110:   requires:",
          "111:     provider_name: \"example_provider\"",
          "112: - match:",
          "113:     path: \"/\"",
          "114:   requires:",
          "115:     provider_name: \"example_provider\"",
          "116: bypass_cors_preflight: true",
          "117: )\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccc19042a36f73f505317d31f033786735c6e966",
      "candidate_info": {
        "commit_hash": "ccc19042a36f73f505317d31f033786735c6e966",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/ccc19042a36f73f505317d31f033786735c6e966",
        "files": [
          "docs/root/version_history/current.rst",
          "source/extensions/filters/http/jwt_authn/matcher.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/extensions/filters/http/jwt_authn/test_common.h"
        ],
        "message": "[1.20] CVE-2021-43824\n\njwt_atuhn: fixed the crash when a CONNECT request is sent to JWT filter\nconfigured with regex match.\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
            "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
          ],
          "candidate": [
            "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
            "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc": [
          "File: source/extensions/filters/http/jwt_authn/matcher.cc -> source/extensions/filters/http/jwt_authn/matcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   bool matches(const Http::RequestHeaderMap& headers) const override {",
          "119:     if (BaseMatcherImpl::matchRoute(headers)) {",
          "120:       const Http::HeaderString& path = headers.Path()->value();",
          "121:       const absl::string_view query_string = Http::Utility::findQueryStringStart(path);",
          "122:       absl::string_view path_view = path.getStringView();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:       if (headers.Path() == nullptr) {",
          "121:         return false;",
          "122:       }",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/filter_integration_test.cc -> test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:   }",
          "327: }",
          "330: class RemoteJwksIntegrationTest : public HttpProtocolIntegrationTest {",
          "331: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330: TEST_P(LocalJwksIntegrationTest, ConnectRequestWithRegExMatch) {",
          "331:   config_helper_.prependFilter(getAuthFilterConfig(ExampleConfigWithRegEx, true));",
          "332:   initialize();",
          "334:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "336:   auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{",
          "337:       {\":method\", \"CONNECT\"},",
          "338:       {\":authority\", \"host.com:80\"},",
          "339:       {\"authorization\", \"Bearer \" + std::string(GoodToken)},",
          "340:   });",
          "341:   request_encoder_ = &encoder_decoder.first;",
          "342:   auto response = std::move(encoder_decoder.second);",
          "344:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
          "347:     ASSERT_TRUE(response->waitForEndStream());",
          "348:     ASSERT_TRUE(response->complete());",
          "349:     EXPECT_EQ(\"404\", response->headers().getStatusValue());",
          "350:   } else {",
          "351:     ASSERT_TRUE(response->waitForReset());",
          "352:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "353:   }",
          "354: }",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h": [
          "File: test/extensions/filters/http/jwt_authn/test_common.h -> test/extensions/filters/http/jwt_authn/test_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: bypass_cors_preflight: true",
          "86: )\";",
          "89: const char ProviderName[] = \"example_provider\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: const char ExampleConfigWithRegEx[] = R\"(",
          "89: providers:",
          "90:   example_provider:",
          "91:     issuer: https://example.com",
          "92:     audiences:",
          "93:     - example_service",
          "94:     - http://example_service1",
          "95:     - https://example_service2/",
          "96:     remote_jwks:",
          "97:       http_uri:",
          "98:         uri: https://pubkey_server/pubkey_path",
          "99:         cluster: pubkey_cluster",
          "100:         timeout:",
          "101:           seconds: 5",
          "102:       cache_duration:",
          "103:         seconds: 600",
          "104:     forward_payload_header: sec-istio-auth-userinfo",
          "105: rules:",
          "106: - match:",
          "107:     safe_regex:",
          "108:       google_re2: {}",
          "109:       regex: \"/somethig/.*\"",
          "110:   requires:",
          "111:     provider_name: \"example_provider\"",
          "112: - match:",
          "113:     path: \"/\"",
          "114:   requires:",
          "115:     provider_name: \"example_provider\"",
          "116: bypass_cors_preflight: true",
          "117: )\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d9eea1222ecf7448e280a0ec1e2eac12e51e01b",
      "candidate_info": {
        "commit_hash": "6d9eea1222ecf7448e280a0ec1e2eac12e51e01b",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/6d9eea1222ecf7448e280a0ec1e2eac12e51e01b",
        "files": [
          "docs/root/version_history/current.rst",
          "source/extensions/filters/http/jwt_authn/matcher.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/extensions/filters/http/jwt_authn/test_common.h"
        ],
        "message": "[1.19] CVE-2021-43824\n\njwt_atuhn: fixed the crash when a CONNECT request is sent to JWT filter\nconfigured with regex match.\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
          "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
            "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
          ],
          "candidate": [
            "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc",
            "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
            "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/jwt_authn/matcher.cc||source/extensions/filters/http/jwt_authn/matcher.cc": [
          "File: source/extensions/filters/http/jwt_authn/matcher.cc -> source/extensions/filters/http/jwt_authn/matcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   bool matches(const Http::RequestHeaderMap& headers) const override {",
          "119:     if (BaseMatcherImpl::matchRoute(headers)) {",
          "120:       const Http::HeaderString& path = headers.Path()->value();",
          "121:       const absl::string_view query_string = Http::Utility::findQueryStringStart(path);",
          "122:       absl::string_view path_view = path.getStringView();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:       if (headers.Path() == nullptr) {",
          "121:         return false;",
          "122:       }",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/filter_integration_test.cc||test/extensions/filters/http/jwt_authn/filter_integration_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/filter_integration_test.cc -> test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:   }",
          "327: }",
          "330: class RemoteJwksIntegrationTest : public HttpProtocolIntegrationTest {",
          "331: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330: TEST_P(LocalJwksIntegrationTest, ConnectRequestWithRegExMatch) {",
          "331:   config_helper_.addFilter(getAuthFilterConfig(ExampleConfigWithRegEx, true));",
          "332:   initialize();",
          "334:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "336:   auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{",
          "337:       {\":method\", \"CONNECT\"},",
          "338:       {\":authority\", \"host.com:80\"},",
          "339:       {\"authorization\", \"Bearer \" + std::string(GoodToken)},",
          "340:   });",
          "341:   request_encoder_ = &encoder_decoder.first;",
          "342:   auto response = std::move(encoder_decoder.second);",
          "344:   if (downstreamProtocol() == Http::CodecType::HTTP1) {",
          "347:     ASSERT_TRUE(response->waitForEndStream());",
          "348:     ASSERT_TRUE(response->complete());",
          "349:     EXPECT_EQ(\"404\", response->headers().getStatusValue());",
          "350:   } else {",
          "351:     ASSERT_TRUE(response->waitForReset());",
          "352:     ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "353:   }",
          "354: }",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/test_common.h||test/extensions/filters/http/jwt_authn/test_common.h": [
          "File: test/extensions/filters/http/jwt_authn/test_common.h -> test/extensions/filters/http/jwt_authn/test_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: bypass_cors_preflight: true",
          "86: )\";",
          "89: const char ProviderName[] = \"example_provider\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: )\";",
          "88: const char ExampleConfigWithRegEx[] = R\"(",
          "89: providers:",
          "90:   example_provider:",
          "91:     issuer: https://example.com",
          "92:     audiences:",
          "93:     - example_service",
          "94:     - http://example_service1",
          "95:     - https://example_service2/",
          "96:     remote_jwks:",
          "97:       http_uri:",
          "98:         uri: https://pubkey_server/pubkey_path",
          "99:         cluster: pubkey_cluster",
          "100:         timeout:",
          "101:           seconds: 5",
          "102:       cache_duration:",
          "103:         seconds: 600",
          "104:     forward_payload_header: sec-istio-auth-userinfo",
          "105: rules:",
          "106: - match:",
          "107:     safe_regex:",
          "108:       google_re2: {}",
          "109:       regex: \"/somethig/.*\"",
          "110:   requires:",
          "111:     provider_name: \"example_provider\"",
          "112: - match:",
          "113:     path: \"/\"",
          "114:   requires:",
          "115:     provider_name: \"example_provider\"",
          "116: bypass_cors_preflight: true",
          "",
          "---------------"
        ]
      }
    }
  ]
}