{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5a58539ca57685cff239b3e2fe62e07b01043e20",
      "candidate_info": {
        "commit_hash": "5a58539ca57685cff239b3e2fe62e07b01043e20",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/5a58539ca57685cff239b3e2fe62e07b01043e20",
        "files": [
          "www/js/domoticz.js"
        ],
        "message": "Corrected water graph display",
        "before_after_code_files": [
          "www/js/domoticz.js||www/js/domoticz.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/js/domoticz.js||www/js/domoticz.js": [
          "File: www/js/domoticz.js -> www/js/domoticz.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5791:  if (typeof data.ValueQuantity != 'undefined') {",
          "5792:   valueQuantity = data.ValueQuantity;",
          "5793:  }",
          "5795:  var valueUnits = \"\";",
          "5796:  if (typeof data.ValueUnits != 'undefined') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5795:  $.DividerWater = 1000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e15845fd3adae5a549302c771e0ad3239e88a84a",
      "candidate_info": {
        "commit_hash": "e15845fd3adae5a549302c771e0ad3239e88a84a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e15845fd3adae5a549302c771e0ad3239e88a84a",
        "files": [
          "main/SignalHandler.cpp"
        ],
        "message": "Do not abort while debugging (for now)",
        "before_after_code_files": [
          "main/SignalHandler.cpp||main/SignalHandler.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SignalHandler.cpp||main/SignalHandler.cpp": [
          "File: main/SignalHandler.cpp -> main/SignalHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:  if (diff > 60)",
          "515:  {",
          "516:   _log.Log(LOG_ERROR, \"mainworker seems to have ended or hung unexpectedly (last update %f seconds ago)\", diff);",
          "517: #ifdef WIN32",
          "518:   abort();",
          "519: #else",
          "520:   raise(SIGUSR1);",
          "521: #endif",
          "522:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517: #ifndef _DEBUG",
          "522: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:  if (diff > 60)",
          "526:  {",
          "527:   _log.Log(LOG_ERROR, \"main thread seems to have ended or hung unexpectedly (last update %f seconds ago)\", diff);",
          "528: #ifdef WIN32",
          "529:   abort();",
          "530: #else",
          "531:   raise(SIGUSR1);",
          "532: #endif",
          "533:  }",
          "534: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530: #ifndef _DEBUG",
          "535: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f84e1f6b7f0c0d47ba7ca1a51d553c38b44b4cd",
      "candidate_info": {
        "commit_hash": "3f84e1f6b7f0c0d47ba7ca1a51d553c38b44b4cd",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3f84e1f6b7f0c0d47ba7ca1a51d553c38b44b4cd",
        "files": [
          "hardware/RFXBase.h",
          "main/mainworker.cpp"
        ],
        "message": "RFXCom: printing noise level in log at startup",
        "before_after_code_files": [
          "hardware/RFXBase.h||hardware/RFXBase.h",
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/RFXBase.h||hardware/RFXBase.h": [
          "File: hardware/RFXBase.h -> hardware/RFXBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  CRFXBase();",
          "15:     ~CRFXBase();",
          "16:  std::string m_Version;",
          "18:  bool SetRFXCOMHardwaremodes(const unsigned char Mode1, const unsigned char Mode2, const unsigned char Mode3, const unsigned char Mode4, const unsigned char Mode5, const unsigned char Mode6);",
          "19:  void SendResetCommand();",
          "20: private:",
          "",
          "[Removed Lines]",
          "17:  uint8_t m_NoiseLevel;",
          "",
          "[Added Lines]",
          "17:  int m_NoiseLevel;",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2513:    }",
          "2514:    int FWType = 0;",
          "2515:    int FWVersion = 0;",
          "2516:    if (mlen > 13)",
          "2517:    {",
          "2518:     FWType = pResponse->IRESPONSE.msg10;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2516:    int NoiseLevel = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2558:      break;",
          "2559:     case FWtypePro1:",
          "2560:      strcpy(szTmp, \"Pro1\");",
          "2561:      break;",
          "2562:     case FWtypePro2:",
          "2563:      strcpy(szTmp, \"Pro2\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2562:      NoiseLevel = static_cast<int>(pResponse->IRESPONSE.msg11);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2582:     if (FWType == FWtypePro1)",
          "2583:     {",
          "2585:     }",
          "2586:    }",
          "",
          "[Removed Lines]",
          "2584:      pMyHardware->m_NoiseLevel = pResponse->IRESPONSE.msg11;",
          "",
          "[Added Lines]",
          "2586:      pMyHardware->m_NoiseLevel = NoiseLevel;",
          "2587:      sprintf(szTmp, \"Noise Level: %d dB\", pMyHardware->m_NoiseLevel);",
          "2588:      WriteMessage(szTmp);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4755cd845a5d26b9a6314c72709a5a88990ce522",
      "candidate_info": {
        "commit_hash": "4755cd845a5d26b9a6314c72709a5a88990ce522",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4755cd845a5d26b9a6314c72709a5a88990ce522",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Removed duplicate code line (OneWireSwitchPollPeriod)",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7937:    m_sql.UpdatePreferencesVar(\"OneWireSensorPollPeriod\", atoi(request::findValue(&req, \"OneWireSensorPollPeriod\").c_str()));",
          "7938:    m_sql.UpdatePreferencesVar(\"OneWireSwitchPollPeriod\", atoi(request::findValue(&req, \"OneWireSwitchPollPeriod\").c_str()));",
          "7942:    std::string IFTTTEnabled = request::findValue(&req, \"IFTTTEnabled\");",
          "7943:    int iIFTTTEnabled = (IFTTTEnabled == \"on\" ? 1 : 0);",
          "7944:    m_sql.UpdatePreferencesVar(\"IFTTTEnabled\", iIFTTTEnabled);",
          "",
          "[Removed Lines]",
          "7940:    m_sql.UpdatePreferencesVar(\"OneWireSwitchPollPeriod\", atoi(request::findValue(&req, \"OneWireSwitchPollPeriod\").c_str()));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d462ee5b9d116b893ce2e18df06b6b70eaa94f2",
      "candidate_info": {
        "commit_hash": "9d462ee5b9d116b893ce2e18df06b6b70eaa94f2",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9d462ee5b9d116b893ce2e18df06b6b70eaa94f2",
        "files": [
          "hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h"
        ],
        "message": "Add experimental support for WebSockets protocol",
        "before_after_code_files": [
          "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp": [
          "File: hardware/plugins/PluginProtocols.cpp -> hardware/plugins/PluginProtocols.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1615:   + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +",
          "1616:   |                     Payload Data continued ...                |",
          "1617:   +---------------------------------------------------------------+",
          "1620:  void CPluginProtocolWS::ProcessInbound(const ReadEvent * Message)",
          "1621:  {",
          "1622:  }",
          "1624:  std::vector<byte> CPluginProtocolWS::ProcessOutbound(const WriteDirective * WriteMessage)",
          "1625:  {",
          "1627:  }",
          "1628: }",
          "1629: #endif",
          "",
          "[Removed Lines]",
          "1626:   return std::vector<byte>();",
          "",
          "[Added Lines]",
          "1621:  bool CPluginProtocolWS::ProcessWholeMessage(std::vector<byte> &vMessage, const ReadEvent * Message)",
          "1622:  {",
          "1623:   while (vMessage.size())",
          "1624:   {",
          "1626:    std::vector<byte> vPayload;",
          "1627:    int   iOffset = 0;",
          "1628:    int   iOpCode = 0;",
          "1629:    long  lMaskingKey = 0;",
          "1630:    bool  bFinish = false;",
          "1632:    bFinish = (vMessage[iOffset] & 0x80);    // Indicates that this is the final fragment in a message if true",
          "1633:    if (vMessage[iOffset] & 0x0F)",
          "1634:    {",
          "1635:     iOpCode = (vMessage[iOffset] & 0x0F);   // %x0 denotes a continuation frame",
          "1636:    }",
          "1642:    iOffset++;",
          "1643:    bool bMasked = (vMessage[iOffset] & 0x80);   // Is the payload masked?",
          "1644:    long lPayloadLength = (vMessage[iOffset] & 0x7F); // if < 126 then this is the length",
          "1645:    if (lPayloadLength == 126)",
          "1646:    {",
          "1647:     if (vMessage.size() < (iOffset + 2))",
          "1648:      return false;",
          "1649:     lPayloadLength = (vMessage[iOffset + 1] << 8) + vMessage[iOffset + 2];",
          "1650:     iOffset += 2;",
          "1651:    }",
          "1652:    else if (lPayloadLength == 127)       // 64 bit lengths not supported",
          "1653:    {",
          "1654:     _log.Log(LOG_ERROR, \"(%s) 64 bit WebSocket messages lengths not supported.\", __func__);",
          "1655:     vMessage.clear();",
          "1656:     iOffset += 5;",
          "1657:     return false;",
          "1658:    }",
          "1659:    iOffset++;",
          "1661:    byte* pbMask = NULL;",
          "1662:    if (bMasked)",
          "1663:    {",
          "1664:     if (vMessage.size() < iOffset)",
          "1665:      return false;",
          "1666:     lMaskingKey = (long)vMessage[iOffset];",
          "1667:     pbMask = &vMessage[iOffset];",
          "1668:     iOffset += 4;",
          "1669:    }",
          "1672:    if (lPayloadLength)",
          "1673:    {",
          "1674:     if (vMessage.size() < (iOffset + lPayloadLength))",
          "1675:      return false;",
          "1676:     vPayload.reserve(vPayload.size() + lPayloadLength);",
          "1677:     for (int i = iOffset; i < iOffset + lPayloadLength; i++)",
          "1678:     {",
          "1679:      vPayload.push_back(vMessage[i]);",
          "1680:     }",
          "1681:     iOffset += lPayloadLength;",
          "1682:    }",
          "1684:    PyObject* pDataDict = (PyObject*)PyDict_New();",
          "1685:    PyObject* pPayload = NULL;",
          "1688:    PyObject *pObj = Py_BuildValue(\"N\", PyBool_FromLong(bFinish));",
          "1689:    if (PyDict_SetItemString(pDataDict, \"Finish\", pObj) == -1)",
          "1690:     _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, \"Finish\", bFinish ? \"True\" : \"False\");",
          "1691:    Py_DECREF(pObj);",
          "1694:    if (lMaskingKey)",
          "1695:    {",
          "1697:     for (int i = 0; i < lPayloadLength; i++)",
          "1698:     {",
          "1699:      vPayload[i] ^= pbMask[i % 4];",
          "1700:     }",
          "1701:     PyObject* pObj = Py_BuildValue(\"i\", lMaskingKey);",
          "1702:     if (PyDict_SetItemString(pDataDict, \"Mask\", pObj) == -1)",
          "1703:      _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%d' to dictionary.\", __func__, \"Mask\", lMaskingKey);",
          "1704:     Py_DECREF(pObj);",
          "1705:    }",
          "1707:    switch (iOpCode)",
          "1708:    {",
          "1709:    case 0x01: // Text message",
          "1710:    {",
          "1711:     std::string  sPayload(vPayload.begin(), vPayload.end());",
          "1712:     pPayload = Py_BuildValue(\"s\", sPayload.c_str());",
          "1713:     break;",
          "1714:    }",
          "1715:    case 0x02: // Binary message",
          "1716:     break;",
          "1717:    case 0x08: // Connection Close",
          "1718:    {",
          "1719:     PyObject* pObj = Py_BuildValue(\"s\", \"Close\");",
          "1720:     if (PyDict_SetItemString(pDataDict, \"Operation\", pObj) == -1)",
          "1721:      _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, \"Operation\", \"Close\");",
          "1722:     Py_DECREF(pObj);",
          "1723:     if (vPayload.size() == 2)",
          "1724:     {",
          "1725:      int  iReasonCode = (vPayload[0] << 8) + vPayload[1];",
          "1726:      pPayload = Py_BuildValue(\"i\", iReasonCode);",
          "1727:     }",
          "1728:     break;",
          "1729:    }",
          "1730:    case 0x09: // Ping",
          "1731:    {",
          "1732:     pDataDict = (PyObject*)PyDict_New();",
          "1733:     PyObject* pObj = Py_BuildValue(\"s\", \"Ping\");",
          "1734:     if (PyDict_SetItemString(pDataDict, \"Operation\", pObj) == -1)",
          "1735:      _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, \"Operation\", \"Ping\");",
          "1736:     Py_DECREF(pObj);",
          "1737:     break;",
          "1738:    }",
          "1739:    case 0x0A: // Pong",
          "1740:    {",
          "1741:     pDataDict = (PyObject*)PyDict_New();",
          "1742:     PyObject* pObj = Py_BuildValue(\"s\", \"Pong\");",
          "1743:     if (PyDict_SetItemString(pDataDict, \"Operation\", pObj) == -1)",
          "1744:      _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, \"Operation\", \"Pong\");",
          "1745:     Py_DECREF(pObj);",
          "1746:     break;",
          "1747:    }",
          "1748:    default:",
          "1749:     _log.Log(LOG_ERROR, \"(%s) Unknown Operation Code (%d) encountered.\", __func__, iOpCode);",
          "1750:    }",
          "1753:    if (vPayload.size() && !pPayload)",
          "1754:    {",
          "1755:     pPayload = Py_BuildValue(\"y#\", &vPayload[0], vPayload.size());",
          "1756:    }",
          "1759:    if (pPayload)",
          "1760:    {",
          "1761:     if (PyDict_SetItemString(pDataDict, \"Payload\", pPayload) == -1)",
          "1762:      _log.Log(LOG_ERROR, \"(%s) failed to add key '%s' to dictionary.\", __func__, \"Payload\");",
          "1763:     Py_DECREF(pPayload);",
          "1764:    }",
          "1766:    Message->m_pPlugin->MessagePlugin(new onMessageCallback(Message->m_pPlugin, Message->m_pConnection, pDataDict));",
          "1769:    vMessage.erase(vMessage.begin(), vMessage.begin() + iOffset);",
          "1771:    return true;",
          "1772:   }",
          "1774:   return false;",
          "1775:  }",
          "1782:   if ((m_sRetainedData.size() && (m_sRetainedData[0] & 0x7F) > 32) ||  // If there is already a partial message check that one",
          "1783:    (Message->m_Buffer.size() && (Message->m_Buffer[0] & 0x7F) > 32)) // otherwise check the incoming message",
          "1784:   {",
          "1786:    CPluginProtocolHTTP::ProcessInbound(Message);",
          "1787:   }",
          "1788:   else",
          "1789:   {",
          "1792:    std::vector<byte> Buffer = Message->m_Buffer;",
          "1793:    if (ProcessWholeMessage(Buffer, Message))",
          "1794:    {",
          "1795:     return;  // Message processed",
          "1796:    }",
          "1799:    m_sRetainedData.insert(m_sRetainedData.end(), Message->m_Buffer.begin(), Message->m_Buffer.end());",
          "1802:    if (ProcessWholeMessage(m_sRetainedData, Message))",
          "1803:    {",
          "1804:     return;  // Message processed",
          "1805:    }",
          "1807:   }",
          "1812:   std::vector<byte> retVal;",
          "1818:   if (!WriteMessage->m_Object || !PyDict_Check(WriteMessage->m_Object))",
          "1819:   {",
          "1820:    _log.Log(LOG_ERROR, \"(%s) Dictionary parameter expected.\", __func__);",
          "1821:   }",
          "1822:   else",
          "1823:   {",
          "1824:    PyObject *pURL = PyDict_GetItemString(WriteMessage->m_Object, \"URL\");",
          "1825:    if (pURL)",
          "1826:    {",
          "1828:     PyObject *pVerb = PyDict_GetItemString(WriteMessage->m_Object, \"Verb\");",
          "1829:     if (!pVerb)",
          "1830:     {",
          "1831:      PyObject* pObj = Py_BuildValue(\"s\", \"GET\");",
          "1832:      if (PyDict_SetItemString(WriteMessage->m_Object, \"Verb\", pObj) == -1)",
          "1833:       _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, \"Verb\", \"GET\");",
          "1834:      Py_DECREF(pObj);",
          "1835:     }",
          "1838:     PyObject *pHeaders = PyDict_GetItemString(WriteMessage->m_Object, \"Headers\");",
          "1839:     if (!pHeaders)",
          "1840:     {",
          "1841:      pHeaders = (PyObject*)PyDict_New();",
          "1842:      if (PyDict_SetItemString(WriteMessage->m_Object, \"Headers\", (PyObject*)pHeaders) == -1)",
          "1843:       _log.Log(LOG_ERROR, \"(%s) failed to add key '%s' to dictionary.\", \"WS\", \"Headers\");",
          "1844:      Py_DECREF(pHeaders);",
          "1845:     }",
          "1846:     PyObject *pConnection = PyDict_GetItemString(pHeaders, \"Connection\");",
          "1847:     if (!pConnection)",
          "1848:     {",
          "1849:      PyObject* pObj = Py_BuildValue(\"s\", \"keep-alive, Upgrade\");",
          "1850:      if (PyDict_SetItemString(pHeaders, \"Connection\", pObj) == -1)",
          "1851:       _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, \"Connection\", \"Upgrade\");",
          "1852:      Py_DECREF(pObj);",
          "1853:     }",
          "1854:     PyObject *pUpgrade = PyDict_GetItemString(pHeaders, \"Upgrade\");",
          "1855:     if (!pUpgrade)",
          "1856:     {",
          "1857:      PyObject* pObj = Py_BuildValue(\"s\", \"websocket\");",
          "1858:      if (PyDict_SetItemString(pHeaders, \"Upgrade\", pObj) == -1)",
          "1859:       _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, \"Upgrade\", \"websocket\");",
          "1860:      Py_DECREF(pObj);",
          "1861:     }",
          "1862:     PyObject *pUserAgent = PyDict_GetItemString(pHeaders, \"User-Agent\");",
          "1863:     if (!pUserAgent)",
          "1864:     {",
          "1865:      PyObject* pObj = Py_BuildValue(\"s\", \"Domoticz/1.0\");",
          "1866:      if (PyDict_SetItemString(pHeaders, \"User-Agent\", pObj) == -1)",
          "1867:       _log.Log(LOG_ERROR, \"(%s) failed to add key '%s', value '%s' to dictionary.\", __func__, \"User-Agent\", \"Domoticz/1.0\");",
          "1868:      Py_DECREF(pObj);",
          "1869:     }",
          "1872:     return CPluginProtocolHTTP::ProcessOutbound(WriteMessage);",
          "1873:    }",
          "1874:    else",
          "1875:    {",
          "1876:     int   iOpCode = 0;",
          "1877:     long  lMaskingKey = 0;",
          "1878:     long  lPayloadLength = 0;",
          "1879:     byte  bMaskBit = 0x00;",
          "1881:     PyObject *pOperation = PyDict_GetItemString(WriteMessage->m_Object, \"Operation\");",
          "1882:     PyObject *pPayload = PyDict_GetItemString(WriteMessage->m_Object, \"Payload\");",
          "1883:     PyObject *pMask = PyDict_GetItemString(WriteMessage->m_Object, \"Mask\");",
          "1885:     if (pOperation)",
          "1886:     {",
          "1887:      if (!PyUnicode_Check(pOperation))",
          "1888:      {",
          "1889:       _log.Log(LOG_ERROR, \"(%s) Expected dictionary 'Operation' key to have a string value.\", __func__);",
          "1890:       return retVal;",
          "1891:      }",
          "1893:      std::string sOperation = PyUnicode_AsUTF8(pOperation);",
          "1894:      if (sOperation == \"Ping\")",
          "1895:      {",
          "1896:       iOpCode = 0x09;",
          "1897:      }",
          "1898:      else if (sOperation == \"Pong\")",
          "1899:      {",
          "1900:       iOpCode = 0x0A;",
          "1901:      }",
          "1902:      else if (sOperation == \"Close\")",
          "1903:      {",
          "1904:       iOpCode = 0x08;",
          "1905:      }",
          "1906:     }",
          "1909:     if (pPayload)",
          "1910:     {",
          "1911:      if (PyUnicode_Check(pPayload))",
          "1912:      {",
          "1913:       lPayloadLength = PyUnicode_GetLength(pPayload);",
          "1914:       if (!iOpCode) iOpCode = 0x01;    // Text message",
          "1915:      }",
          "1916:      else if (PyBytes_Check(pPayload))",
          "1917:      {",
          "1918:       lPayloadLength = PyBytes_Size(pPayload);",
          "1919:       if (!iOpCode) iOpCode = 0x02;    // Binary message",
          "1920:      }",
          "1921:      else if (pPayload->ob_type->tp_name == std::string(\"bytearray\"))",
          "1922:      {",
          "1923:       lPayloadLength = PyByteArray_Size(pPayload);",
          "1924:       if (!iOpCode) iOpCode = 0x02;    // Binary message",
          "1925:      }",
          "1926:     }",
          "1928:     if (pMask)",
          "1929:     {",
          "1930:      if (PyLong_Check(pMask))",
          "1931:      {",
          "1932:       lMaskingKey = PyLong_AsLong(pMask);",
          "1933:       bMaskBit = 0x80;       // Set mask bit in header",
          "1934:      }",
          "1935:      else if (PyUnicode_Check(pMask))",
          "1936:      {",
          "1937:       std::string sMask = PyUnicode_AsUTF8(pMask);",
          "1938:       lMaskingKey = atoi(sMask.c_str());",
          "1939:       bMaskBit = 0x80;       // Set mask bit in header",
          "1940:      }",
          "1941:      else",
          "1942:      {",
          "1943:       _log.Log(LOG_ERROR, \"(%s) Invalid mask, expected number (integer or string).\", __func__);",
          "1944:       return retVal;",
          "1945:      }",
          "1946:     }",
          "1949:     retVal.reserve(lPayloadLength+16);  // Masking relies on vector not reallocating during message assembly",
          "1950:     retVal.push_back(0x80 | iOpCode);",
          "1951:     if (lPayloadLength < 126)",
          "1952:     {",
          "1953:      retVal.push_back(bMaskBit | lPayloadLength); // Short length",
          "1954:     }",
          "1955:     else",
          "1956:     {",
          "1957:      retVal.push_back(bMaskBit | 126);",
          "1958:      retVal.push_back(lPayloadLength >> 24);",
          "1959:      retVal.push_back(lPayloadLength >> 16);",
          "1960:      retVal.push_back(lPayloadLength >> 8);",
          "1961:      retVal.push_back(lPayloadLength);    // Longer length",
          "1962:     }",
          "1964:     byte* pbMask = NULL;",
          "1965:     if (bMaskBit)",
          "1966:     {",
          "1967:      retVal.push_back(lMaskingKey >> 24);",
          "1968:      pbMask = &retVal[retVal.size()-1];",
          "1969:      retVal.push_back(lMaskingKey >> 16);",
          "1970:      retVal.push_back(lMaskingKey >> 8);",
          "1971:      retVal.push_back(lMaskingKey);     // Encode mask",
          "1972:     }",
          "1974:     if (pPayload)",
          "1975:     {",
          "1976:      if (PyUnicode_Check(pPayload))",
          "1977:      {",
          "1978:       std::string sPayload = PyUnicode_AsUTF8(pPayload);",
          "1979:       for (int i = 0; i < lPayloadLength; i++)",
          "1980:       {",
          "1981:        retVal.push_back(sPayload[i] ^ pbMask[i%4]);",
          "1982:       }",
          "1983:      }",
          "1984:      else if (PyBytes_Check(pPayload))",
          "1985:      {",
          "1986:       byte* pByte = (byte*)PyBytes_AsString(pPayload);",
          "1987:       for (int i = 0; i < lPayloadLength; i++)",
          "1988:       {",
          "1989:        retVal.push_back(pByte[i] ^ pbMask[i % 4]);",
          "1990:       }",
          "1991:      }",
          "1992:      else if (pPayload->ob_type->tp_name == std::string(\"bytearray\"))",
          "1993:      {",
          "1994:       byte* pByte = (byte*)PyByteArray_AsString(pPayload);",
          "1995:       for (int i = 0; i < lPayloadLength; i++)",
          "1996:       {",
          "1997:        retVal.push_back(pByte[i] ^ pbMask[i % 4]);",
          "1998:       }",
          "1999:      }",
          "2000:     }",
          "2002:    }",
          "2003:   }",
          "2005:   return retVal;",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h": [
          "File: hardware/plugins/PluginProtocols.h -> hardware/plugins/PluginProtocols.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   virtual void ProcessInbound(const ReadEvent* Message);",
          "43:  };",
          "46:  {",
          "47:  private:",
          "48:   std::string  m_Status;",
          "49:   int    m_ContentLength;",
          "50:   void*   m_Headers;",
          "53:   bool   m_Chunked;",
          "54:   size_t   m_RemainingChunk;",
          "56:   void   ExtractHeaders(std::string* pData);",
          "57:  public:",
          "58:   CPluginProtocolHTTP(bool Secure) : m_ContentLength(0), m_Headers(NULL), m_Chunked(false), m_RemainingChunk(0) { m_Secure = Secure; };",
          "",
          "[Removed Lines]",
          "45:  class CPluginProtocolHTTP : CPluginProtocol",
          "51:   std::string  m_Username;",
          "52:   std::string  m_Password;",
          "",
          "[Added Lines]",
          "45:  class CPluginProtocolHTTP : public CPluginProtocol",
          "53:  protected:",
          "54:   std::string  m_Username;",
          "55:   std::string  m_Password;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   };",
          "66:  };",
          "68:  class CPluginProtocolICMP : CPluginProtocol",
          "69:  {",
          "70:   virtual void ProcessInbound(const ReadEvent* Message);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:  class CPluginProtocolWS : public CPluginProtocolHTTP",
          "69:  {",
          "70:  private:",
          "71:   bool ProcessWholeMessage(std::vector<byte> &vMessage, const ReadEvent * Message);",
          "72:  public:",
          "73:   CPluginProtocolWS(bool Secure) : CPluginProtocolHTTP(Secure) {};",
          "74:   virtual void    ProcessInbound(const ReadEvent* Message);",
          "75:   virtual std::vector<byte> ProcessOutbound(const WriteDirective* WriteMessage);",
          "76:  };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:    m_Password = Password;",
          "88:   };",
          "89:  };",
          "106: }",
          "",
          "[Removed Lines]",
          "91:  class CPluginProtocolWS : CPluginProtocol",
          "92:  {",
          "93:  private:",
          "94:   std::string  m_Username;",
          "95:   std::string  m_Password;",
          "96:  public:",
          "97:   CPluginProtocolWS(bool Secure) { m_Secure = Secure; };",
          "98:   virtual void    ProcessInbound(const ReadEvent* Message);",
          "99:   virtual std::vector<byte> ProcessOutbound(const WriteDirective* WriteMessage);",
          "100:   void      AuthenticationDetails(const std::string &Username, const std::string &Password)",
          "101:   {",
          "102:    m_Username = Username;",
          "103:    m_Password = Password;",
          "104:   };",
          "105:  };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}