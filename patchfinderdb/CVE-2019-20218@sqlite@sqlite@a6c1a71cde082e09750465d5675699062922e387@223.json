{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
      "candidate_info": {
        "commit_hash": "ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a double-quoted string literal used in the \".schema\" command of the CLI.\n\nFossilOrigin-Name: fcd937d9786a82ef4147e657d54ea0beb6ac87e2eb1677186b318493d473077b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee293e5aeac0b05a8b809095610fd8b4fdaf8e68cd368de90ec0d45e3582ffe5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8388:         zDiv = \" UNION ALL \";",
          "8389:         appendText(&sSelect, \"SELECT shell_add_schema(sql,\", 0);",
          "8390:         if( sqlite3_stricmp(zDb, \"main\")!=0 ){",
          "8392:         }else{",
          "8393:           appendText(&sSelect, \"NULL\", 0);",
          "8394:         }",
          "",
          "[Removed Lines]",
          "8391:           appendText(&sSelect, zDb, '\"');",
          "",
          "[Added Lines]",
          "8391:           appendText(&sSelect, zDb, '\\'');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8397:         appendText(&sSelect, \" AS snum, \", 0);",
          "8398:         appendText(&sSelect, zDb, '\\'');",
          "8399:         appendText(&sSelect, \" AS sname FROM \", 0);",
          "8401:         appendText(&sSelect, \".sqlite_master\", 0);",
          "8402:       }",
          "8403:       sqlite3_finalize(pStmt);",
          "",
          "[Removed Lines]",
          "8400:         appendText(&sSelect, zDb, '\"');",
          "",
          "[Added Lines]",
          "8400:         appendText(&sSelect, zDb, quoteChar(zDb));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
      "candidate_info": {
        "commit_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0578084507ee2d5f951409b61029093e1408ec7b",
        "files": [
          "ext/fts3/fts3Int.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the assert_fts3_nc() macro so that it works for test builds that omit SQLITE_DEBUG.\n\nFossilOrigin-Name: b10df2b569e356551cf51ca179f307e4f8827413ee9feb886db1f1e0650e6c5f",
        "before_after_code_files": [
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: extern int sqlite3_fts3_may_be_corrupt;",
          "139: # define assert_fts3_nc(x) assert(sqlite3_fts3_may_be_corrupt || (x))",
          "140: #else",
          "",
          "[Removed Lines]",
          "137: #ifdef SQLITE_DEBUG",
          "",
          "[Added Lines]",
          "137: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a82539665718c8183d9d0bb7bcb3adcb1a23294b8c30f364829a982dab89a332",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f6a4ea2e2b5a12bc425615a8a01af920c1bc65d",
      "candidate_info": {
        "commit_hash": "5f6a4ea2e2b5a12bc425615a8a01af920c1bc65d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f6a4ea2e2b5a12bc425615a8a01af920c1bc65d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Additional simplifications of the WHERE loop code generator logic for NULLS LAST.\n\nFossilOrigin-Name: 1383680d927d7d703933be7653c0019199845e7f7e82bcc76d9ca3808093e9d8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3ed2f496f51234a8f81d90d47ba603b06dbed38b8bd8f1934294379cde74d3a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1708:       assert( bSeekPastNull==0 || bStopAtNull==0 );",
          "1709:       if( regBignull ){",
          "1710:         assert( bSeekPastNull==1 || bStopAtNull==1 );",
          "1711:         assert( bStopAtNull==startEq );",
          "1712:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1713:         op = aStartOp[(nConstraint>1)*4 + 2 + bRev];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1711:         assert( bSeekPastNull==!bStopAtNull );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1778:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1779:     }",
          "1780:     if( regBignull ){",
          "1781:       sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1782:       VdbeComment((v, \"If NULL-scan pending\"));",
          "1783:       VdbeCoverage(v);",
          "1798:     }",
          "1800:     if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "",
          "[Removed Lines]",
          "1784:       if( bStopAtNull ){",
          "1785:         op = aEndOp[bRev*2 + 0];",
          "1786:         assert( op==OP_IdxGE || op==OP_IdxLE );",
          "1787:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1788:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1789:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1790:       }else{",
          "1791:         op = aEndOp[bRev*2 + endEq];",
          "1792:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint+1);",
          "1793:         testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1794:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1795:         testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1796:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1797:       }",
          "",
          "[Added Lines]",
          "1785:       assert( bSeekPastNull==!bStopAtNull );",
          "1786:       assert( bSeekPastNull+bStopAtNull==1 );",
          "1787:       assert( nConstraint+bSeekPastNull>0 );",
          "1791:       op = aEndOp[bRev*2 + bSeekPastNull];",
          "1792:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase,",
          "1793:                            nConstraint+bSeekPastNull);",
          "1794:       testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1795:       testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1796:       testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1797:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2ba6df9f0bbbf084db504c9559e7a5c7ebe023d",
      "candidate_info": {
        "commit_hash": "e2ba6df9f0bbbf084db504c9559e7a5c7ebe023d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2ba6df9f0bbbf084db504c9559e7a5c7ebe023d",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Add the SQLITE_SUBTYPE flag, which can be passed to sqlite3_create_function() and similar to indicate to the core that a user function is likely to use sqlite3_result_subtype().\n\nFossilOrigin-Name: 6aa438ce41d460a6782ae63503128b9140c28ff59c2b2eed48b004acf83e0560",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #endif",
          "2505:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2506:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2510:   }",
          "2511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2512:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "",
          "[Removed Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2508:                                  (void*)&aFunc[i].flag,",
          "2509:                                  aFunc[i].xFunc, 0, 0);",
          "",
          "[Added Lines]",
          "2507:                         SQLITE_UTF8 | SQLITE_DETERMINISTIC | SQLITE_SUBTYPE,",
          "2508:                         (void*)&aFunc[i].flag,",
          "2509:                         aFunc[i].xFunc, 0, 0);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1720:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1721:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1723:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1725: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY);",
          "",
          "[Added Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY|SQLITE_SUBTYPE);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4991: #define SQLITE_DETERMINISTIC    0x000000800",
          "4992: #define SQLITE_DIRECTONLY       0x000080000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4997: #define SQLITE_SUBTYPE          0x000100000",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:   int regStartRowid;",
          "3613:   int regEndRowid;",
          "3614: };",
          "3616: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:   u8 bExprArgs;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "869: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875: int exprListContainsSubtype(Parse *pParse, ExprList *pList){",
          "876:   if( pList ){",
          "877:     sqlite3 *db = pParse->db;",
          "878:     int i;",
          "879:     for(i=0; i<pList->nExpr; i++){",
          "880:       Expr *p = pList->a[i].pExpr;",
          "881:       if( p->op==TK_FUNCTION ){",
          "882:         FuncDef *pDef;",
          "883:         int nArg = 0;",
          "884:         if( !ExprHasProperty(p, EP_TokenOnly) && p->x.pList ){",
          "885:           nArg = p->x.pList->nExpr;",
          "886:         }",
          "887:         pDef = sqlite3FindFunction(db, p->u.zToken, nArg, db->enc, 0);",
          "888:         if( pDef && (pDef->funcFlags & SQLITE_FUNC_SUBTYPE) ){",
          "889:           return 1;",
          "890:         }",
          "891:       }",
          "892:     }",
          "893:   }",
          "894:   return 0;",
          "895: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "967:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "970:       if( pWin->pFilter ){",
          "971:         Expr *pFilter = sqlite3ExprDup(db, pWin->pFilter, 0);",
          "972:         pSublist = sqlite3ExprListAppend(pParse, pSublist, pFilter);",
          "",
          "[Removed Lines]",
          "968:       pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "969:       pSublist = exprListAppendList(pParse, pSublist, pWin->pOwner->x.pList, 0);",
          "",
          "[Added Lines]",
          "994:       ExprList *pArgs = pWin->pOwner->x.pList;",
          "995:       if( exprListContainsSubtype(pParse, pArgs) ){",
          "996:         selectWindowRewriteEList(pParse, pMWin, pSrc, pArgs, pTab, &pSublist);",
          "997:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "998:         pWin->bExprArgs = 1;",
          "999:       }else{",
          "1000:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "1001:         pSublist = exprListAppendList(pParse, pSublist, pArgs, 0);",
          "1002:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1432:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1433:     FuncDef *pFunc = pWin->pFunc;",
          "1434:     int regArg;",
          "1436:     int i;",
          "1438:     assert( bInverse==0 || pWin->eStart!=TK_UNBOUNDED );",
          "",
          "[Removed Lines]",
          "1435:     int nArg = windowArgCount(pWin);",
          "",
          "[Added Lines]",
          "1468:     int nArg = pWin->bExprArgs ? 0 : windowArgCount(pWin);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1482:         VdbeCoverage(v);",
          "1483:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1484:       }",
          "1485:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "1486:         CollSeq *pColl;",
          "1487:         assert( nArg>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1518:       if( pWin->bExprArgs ){",
          "1519:         nArg = pWin->pOwner->x.pList->nExpr;",
          "1520:         regArg = sqlite3GetTempRange(pParse, nArg);",
          "1521:         sqlite3ExprCodeExprList(pParse, pWin->pOwner->x.pList, regArg, 0, 0);",
          "1522:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1492:                         bInverse, regArg, pWin->regAccum);",
          "1493:       sqlite3VdbeAppendP4(v, pFunc, P4_FUNCDEF);",
          "1494:       sqlite3VdbeChangeP5(v, (u8)nArg);",
          "1495:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1496:     }",
          "1497:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1533:       if( pWin->bExprArgs ){",
          "1534:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1535:       }",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Test cases for RANGE BETWEEN and especially with NULLS LAST",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix windowB",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   INSERT INTO t1 VALUES(NULL, 1);",
          "26:   INSERT INTO t1 VALUES(NULL, 2);",
          "27:   INSERT INTO t1 VALUES(NULL, 3);",
          "28: } {}",
          "30: foreach {tn win} {",
          "31:   1 { ORDER BY a RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "32:   2 { ORDER BY a NULLS LAST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "33:   3 { ORDER BY a DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "34:   4 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "36:   5 { ORDER BY a      NULLS LAST  RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "37:   6 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "39:   7 { ORDER BY a      NULLS LAST  RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "40:   8 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "41: } {",
          "42:   do_execsql_test 1.$tn \"",
          "43:     SELECT sum(b) OVER win FROM t1",
          "44:     WINDOW win AS ( $win )",
          "45:   \" {6 6 6}",
          "46: }",
          "48: do_execsql_test 1.2 {",
          "49:   SELECT sum(b) OVER win FROM t1",
          "50:   WINDOW win AS (",
          "51:     ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "52:   )",
          "53: } {6 6 6}",
          "55: #-------------------------------------------------------------------------",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   CREATE TABLE t1(a, b);",
          "59:   INSERT INTO t1 VALUES(1, NULL);",
          "60:   INSERT INTO t1 VALUES(2, 45);",
          "61:   INSERT INTO t1 VALUES(3, 66.2);",
          "62:   INSERT INTO t1 VALUES(4, 'hello world');",
          "63:   INSERT INTO t1 VALUES(5, 'hello world');",
          "64:   INSERT INTO t1 VALUES(6, X'1234');",
          "65:   INSERT INTO t1 VALUES(7, X'1234');",
          "66:   INSERT INTO t1 VALUES(8, NULL);",
          "67: }",
          "69: foreach {tn win} {",
          "70:   1 \"ORDER BY b RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "71:   2 \"ORDER BY b RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "72:   3 \"ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "73:   4 \"ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "74: } {",
          "75:   do_execsql_test 2.1.$tn \"",
          "76:     SELECT a, sum(a) OVER win FROM t1",
          "77:     WINDOW win AS ( $win )",
          "78:     ORDER BY 1",
          "79:   \" {1 9   2 {}  3 {}  4 9  5 9  6 13  7 13  8 9}",
          "80: }",
          "82: #-------------------------------------------------------------------------",
          "83: reset_db",
          "84: do_execsql_test 3.0 {",
          "85:   CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "86:   INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "87:   INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "88: }",
          "90: do_execsql_test 3.1 {",
          "91:   SELECT json_group_array(json(j)) FROM testjson;",
          "92: } {",
          "93:   {[{\"a\":1},{\"b\":2}]}",
          "94: }",
          "96: breakpoint",
          "97: do_execsql_test 3.2 {",
          "98:   SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99: } {",
          "100:   {[{\"a\":1}]}",
          "101:   {[{\"a\":1},{\"b\":2}]}",
          "102: }",
          "105: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff1032e5c24c56a108715033dcca5e1efd507bd9",
      "candidate_info": {
        "commit_hash": "ff1032e5c24c56a108715033dcca5e1efd507bd9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff1032e5c24c56a108715033dcca5e1efd507bd9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "When a virtual table reports orderByConsumed, that tells us nothing about whether or not the SQLITE_DISTINCTBY constraint is met. Fix for ticket [7e59041f9c4e5102]. Test cases in TH3.\n\nFossilOrigin-Name: b59f94e4da9b1653f2004b214407a50340dd476b27e6ec7e29e501a95db9c963",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 34f64f11ca481996b1ff1686bdc5e278946635b6856cd1fe2355fce8e298e0f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3696:       pLoop = pLast;",
          "3697:     }",
          "3698:     if( pLoop->wsFlags & WHERE_VIRTUALTABLE ){",
          "3700:       break;",
          "3701:     }else if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3702:       pLoop->u.btree.nDistinctCol = 0;",
          "",
          "[Removed Lines]",
          "3699:       if( pLoop->u.vtab.isOrdered ) obSat = obDone;",
          "",
          "[Added Lines]",
          "3699:       if( pLoop->u.vtab.isOrdered && (wctrlFlags & WHERE_DISTINCTBY)==0 ){",
          "3700:         obSat = obDone;",
          "3701:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}