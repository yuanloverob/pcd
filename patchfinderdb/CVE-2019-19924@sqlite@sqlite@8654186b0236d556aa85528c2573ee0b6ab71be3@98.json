{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "87c3ad453781bbfbce6b78e1216a92d1687bddc1",
      "candidate_info": {
        "commit_hash": "87c3ad453781bbfbce6b78e1216a92d1687bddc1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87c3ad453781bbfbce6b78e1216a92d1687bddc1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Enhance the btree search routine so that it does early detection of impossibly large keys and thereby avoids a large malloc() call.\n\nFossilOrigin-Name: 3ecaaee69f49e43d38047b7d53b82689eba7f7d33541fcac3c32b6dc8a568458",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 505ed9a47825240979338a24044559613fbbd2a7850bdff70c7164da054ec63d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5479:             rc = SQLITE_CORRUPT_PAGE(pPage);",
          "5480:             goto moveto_finish;",
          "5481:           }",
          "",
          "[Removed Lines]",
          "5478:           if( nCell<2 ){",
          "",
          "[Added Lines]",
          "5478:           if( nCell<2 || nCell/pCur->pBt->usableSize>pCur->pBt->nPage ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99778c4b211b78134152b38ee1798c54b5c268a8",
      "candidate_info": {
        "commit_hash": "99778c4b211b78134152b38ee1798c54b5c268a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/99778c4b211b78134152b38ee1798c54b5c268a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Improvements to the documentation for the xAccess method of the VFS. Ticket [5e0423b058fa5adf]\n\nFossilOrigin-Name: 7078d77effc296c63c91ec032c866e2b320f081d58e57e9e83cc58373169bda3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c0c90961b4fa1c1185772d04fe1915bc1a1af27ed8ddb8db1c524bf90d68ccbf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "6fcc1ecc99dbf222394bbfe207496b1148ece800",
      "candidate_info": {
        "commit_hash": "6fcc1ecc99dbf222394bbfe207496b1148ece800",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6fcc1ecc99dbf222394bbfe207496b1148ece800",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "In \"PRAGMA vdbe_trace\" output, show the results of OP_Affinity opcodes.\n\nFossilOrigin-Name: 56604bb60a8ebac8d2854628d1b052d594d7effe14be8333977995dc07b65114",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36dd5b0804797a35d0dc596b6ca4f71813a155c5a470237ab6e3d1bcd9ccc6be",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2769:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2770:     assert( memIsValid(pIn1) );",
          "2771:     applyAffinity(pIn1, *(zAffinity++), encoding);",
          "2772:     pIn1++;",
          "2773:   }while( zAffinity[0] );",
          "2774:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2772:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c143114460ec0c214218978baa98b6585649cc22",
      "candidate_info": {
        "commit_hash": "c143114460ec0c214218978baa98b6585649cc22",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c143114460ec0c214218978baa98b6585649cc22",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/pragma.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/vtab.c"
        ],
        "message": "Some (but not all) INSERT and UPDATE statements now work for STORED columns.\n\nFossilOrigin-Name: fe7517bf4d360597576ab9aba29627d7926d23f2bbbfb3e7bf4d32761617574c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8f67b89b04622c1509dc102a83be7a80057dc791625804fc2c294089c98b97e4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1564:       goto generated_error;",
          "1565:     }",
          "1566:   }",
          "1568:   pCol->colFlags |= eType;",
          "1569:   pCol->pDflt = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "1570:   goto generated_done;",
          "",
          "[Removed Lines]",
          "1567:   pTab->nVCol++;",
          "",
          "[Added Lines]",
          "1567:   if( eType==COLFLAG_VIRTUAL ) pTab->nVCol++;",
          "1569:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1570:   assert( TF_HasStored==COLFLAG_STORED );",
          "1571:   pTab->tabFlags |= eType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2177:   }",
          "2179: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2181:     int ii;",
          "2182:     for(ii=0; ii<p->nCol; ii++){",
          "2183:       if( (p->aCol[ii].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "",
          "[Removed Lines]",
          "2180:   if( p->nVCol ){",
          "",
          "[Added Lines]",
          "2183:   if( p->tabFlags & (TF_HasVirtual|TF_HasStored) ){",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   return 0;",
          "203: }",
          "205: #ifndef SQLITE_OMIT_AUTOINCREMENT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "213: void sqlite3ComputeStoredColumns(",
          "217: ){",
          "218:   int i;",
          "219:   pParse->iSelfTab = -iRegStore;",
          "220:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "221:     u32 colFlags = pTab->aCol[i].colFlags;",
          "222:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "224:       iRegStore--;",
          "225:     }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "227:       sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "228:     }",
          "229:   }",
          "230:   pParse->iSelfTab = 0;",
          "231: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1028:           iRegStore--;",
          "1029:           continue;",
          "1033:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1034:           continue;",
          "1035:         }",
          "",
          "[Removed Lines]",
          "1030:         }else if( (colFlags & COLFLAG_STORED)!=0 || pColumn==0 ){",
          "",
          "[Added Lines]",
          "1060:         }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "1062:           continue;",
          "1063:         }else if( pColumn==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1061:       }",
          "1062:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1096: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1099:     if( pTab->tabFlags & TF_HasStored ){",
          "1100:       sqlite3ComputeStoredColumns(pParse, regRowid+1, pTab);",
          "1101:     }",
          "1102: #endif",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1108:           }",
          "1109:           if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1115:           }",
          "1116:         }",
          "",
          "[Removed Lines]",
          "1111:           }else if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1113:           }else{",
          "",
          "[Added Lines]",
          "1111:           }else if( pCol->colFlags & COLFLAG_STORED ){",
          "1113:           }else{ assert( pCol->colFlags & COLFLAG_HIDDEN );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4020: # define sqlite3AutoincrementEnd(X)",
          "4021: #endif",
          "4022: void sqlite3Insert(Parse*, SrcList*, Select*, IdList*, int, Upsert*);",
          "4023: void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);",
          "4024: IdList *sqlite3IdListAppend(Parse*, IdList*, Token*);",
          "4025: int sqlite3IdListIndex(IdList*,const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4030: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "4031:   void sqlite3ComputeStoredColumns(Parse*, int, Table*);",
          "4032: #endif",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "671:   for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "672:     if( i==pTab->iPKey ){",
          "673:       sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "676:     }else{",
          "677:       j = aXRef[i];",
          "678:       if( j>=0 ){",
          "",
          "[Removed Lines]",
          "674:     }else if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "675:       k--;",
          "",
          "[Added Lines]",
          "674:     }else if( (pTab->aCol[i].colFlags & COLFLAG_GENERATED)!=0 ){",
          "675:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) k--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691:       }",
          "692:     }",
          "693:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "695:   if( pTab->tabFlags & TF_HasStored ){",
          "696:     sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "697:   }",
          "698: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:     for(i=0, k=regNew; i<pTab->nCol; i++, k++){",
          "729:       }else if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "730:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, k);",
          "731:       }",
          "732:     }",
          "733:   }",
          "735:   if( !isView ){",
          "",
          "[Removed Lines]",
          "727:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "728:         k--;",
          "",
          "[Added Lines]",
          "732:       if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "733:         if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) k--;",
          "738: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "739:     if( pTab->tabFlags & TF_HasStored ){",
          "740:       sqlite3ComputeStoredColumns(pParse, regNew, pTab);",
          "741:     }",
          "742: #endif",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:       rc = SQLITE_ERROR;",
          "625:     }else{",
          "626:       int iCol;",
          "",
          "[Removed Lines]",
          "627:       u8 oooHidden = 0;",
          "",
          "[Added Lines]",
          "627:       u16 oooHidden = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba01634cd393040ade90cf5449e3642663e80699",
      "candidate_info": {
        "commit_hash": "ba01634cd393040ade90cf5449e3642663e80699",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba01634cd393040ade90cf5449e3642663e80699",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Ensure that the same subquery does not go through the window-function rewrite more than once, even when that subquery is part of a virtual table constraint that lacks the omit flag.\n\nFossilOrigin-Name: d0bc7db6b0a53edc04815622c46250d26f526f56e59f14875f4e18c75b49000d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7e3151855fd4370fb7d4fff20516c2c2d1980134620df924106e6989bc130583",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "904: int sqlite3WindowRewrite(Parse *pParse, Select *p){",
          "905:   int rc = SQLITE_OK;",
          "907:     Vdbe *v = sqlite3GetVdbe(pParse);",
          "908:     sqlite3 *db = pParse->db;",
          "",
          "[Removed Lines]",
          "906:   if( p->pWin && p->pPrior==0 ){",
          "",
          "[Added Lines]",
          "906:   if( p->pWin && p->pPrior==0 && (p->selFlags & SF_WinRewrite)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "928:     p->pGroupBy = 0;",
          "929:     p->pHaving = 0;",
          "930:     p->selFlags &= ~SF_Aggregate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:     p->selFlags |= SF_WinRewrite;",
          "",
          "---------------"
        ]
      }
    }
  ]
}