{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc8b231098ae2cbc7528370ab722579f5d3b23fc",
      "candidate_info": {
        "commit_hash": "bc8b231098ae2cbc7528370ab722579f5d3b23fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc8b231098ae2cbc7528370ab722579f5d3b23fc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/backup.c"
        ],
        "message": "Fix harmless compiler warning seen with MSVC.\n\nFossilOrigin-Name: 5862b83eb36b93016d37e5b86ebb183d891bb553901facab1e5d83e114a38ec3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/backup.c||src/backup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5a8a23ee5f60a31dbd167a0966d1ab3d0f1c07df2251906cb73f23d1f5466b46",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   if( nSrcReserve!=nDestReserve ){",
          "275:     u32 newPgsz = nSrcPgsz;",
          "276:     rc = sqlite3PagerSetPagesize(pDestPager, &newPgsz, nSrcReserve);",
          "278:   }",
          "279: #endif",
          "",
          "[Removed Lines]",
          "277:     if( rc==SQLITE_OK && newPgsz!=nSrcPgsz ) rc = SQLITE_READONLY;",
          "",
          "[Added Lines]",
          "277:     if( rc==SQLITE_OK && newPgsz!=(u32)nSrcPgsz ) rc = SQLITE_READONLY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7d6db6ac05cb7d51c19494feba51a65c6a21cd2",
      "candidate_info": {
        "commit_hash": "a7d6db6ac05cb7d51c19494feba51a65c6a21cd2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a7d6db6ac05cb7d51c19494feba51a65c6a21cd2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/func3.test"
        ],
        "message": "The affinity of the unlikely() function and its cousins should be \"none\". Ticket [0c620df60bffd9ef]\n\nFossilOrigin-Name: 614ecb0af47038848e8ba2aed6b92db6f33ddc4aea6361795dbde440380f5a35",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/func3.test||test/func3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0f748fe58bbbb7ce3f30303da25ec811b2bbce249549aa9c7927979ac5b38013",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: char sqlite3ExprAffinity(Expr *pExpr){",
          "46:   int op;",
          "47:   if( pExpr->flags & EP_Generic ) return 0;",
          "49:   op = pExpr->op;",
          "50:   if( op==TK_SELECT ){",
          "51:     assert( pExpr->flags&EP_xIsSelect );",
          "",
          "[Removed Lines]",
          "48:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "48:   while( ExprHasProperty(pExpr, EP_Skip) ){",
          "49:     assert( pExpr->op==TK_COLLATE );",
          "50:     pExpr = pExpr->pLeft;",
          "51:     assert( pExpr!=0 );",
          "52:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "110:     if( ExprHasProperty(pExpr, EP_Unlikely) ){",
          "111:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "112:       assert( pExpr->x.pList->nExpr>0 );",
          "",
          "[Removed Lines]",
          "109:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "",
          "[Added Lines]",
          "113:   while( pExpr && ExprHasProperty(pExpr, EP_Skip|EP_Unlikely) ){",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747:       }else{",
          "748:         is_agg = pDef->xFinalize!=0;",
          "749:         if( pDef->funcFlags & SQLITE_FUNC_UNLIKELY ){",
          "751:           if( n==2 ){",
          "752:             pExpr->iTable = exprProbability(pList->a[1].pExpr);",
          "753:             if( pExpr->iTable<0 ){",
          "",
          "[Removed Lines]",
          "750:           ExprSetProperty(pExpr, EP_Unlikely|EP_Skip);",
          "",
          "[Added Lines]",
          "750:           ExprSetProperty(pExpr, EP_Unlikely);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/func3.test||test/func3.test": [
          "File: test/func3.test -> test/func3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   db eval {EXPLAIN SELECT unlikely(min(1.0+'2.0',4*11))}",
          "154: } [db eval {EXPLAIN SELECT min(1.0+'2.0',4*11)}]",
          "157: # EVIDENCE-OF: R-23735-03107 The likely(X) function returns the argument",
          "158: # X unchanged.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: # Unlikely() does not preserve the affinity of X.",
          "157: # ticket https://www.sqlite.org/src/tktview/0c620df60b",
          "158: #",
          "159: do_execsql_test func3-5.40 {",
          "160:   SELECT likely(CAST(1 AS INT))=='1';",
          "161: } 0",
          "162: do_execsql_test func3-5.41 {",
          "163:   SELECT unlikely(CAST(1 AS INT))=='1';",
          "164: } 0",
          "165: do_execsql_test func3-5.41 {",
          "166:   SELECT likelihood(CAST(1 AS INT),0.5)=='1';",
          "167: } 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74e1b861ad749a00966583c29f0e2d8dfb510c82",
      "candidate_info": {
        "commit_hash": "74e1b861ad749a00966583c29f0e2d8dfb510c82",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/74e1b861ad749a00966583c29f0e2d8dfb510c82",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "Extra VDBE comments in the NULLS LAST logic provide landmarks to help understand the EXPLAIN output.\n\nFossilOrigin-Name: 649b08ead50f10a9ec0357a5e1ed020195d9f93be61ef703ea036a8e53f07a34",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d3531f5be7d3769689e2cd8bdc9bab5608759de027d44cc123996f32a4a89583",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5219:       if( pLevel->regBignull ){",
          "5220:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5221:         addr = sqlite3VdbeAddOp1(v, OP_If, pLevel->regBignull);",
          "5222:         VdbeCoverage(v);",
          "5223:         sqlite3VdbeAddOp2(v, OP_Integer, 1, pLevel->regBignull);",
          "5224:         sqlite3VdbeAddOp2(v, OP_Goto, 0, pLevel->p2-1);",
          "5225:         sqlite3VdbeJumpHere(v, addr);",
          "5226:       }",
          "5227: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5222:         VdbeComment((v, \"If NULL-scan done\"));",
          "5226:         VdbeComment((v, \"Do the NULL-scan\"));",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1555:     pIdx = pLoop->u.btree.pIndex;",
          "1556:     iIdxCur = pLevel->iIdxCur;",
          "",
          "[Removed Lines]",
          "1553:     int regBignull = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1691:       }",
          "1692:       if( regBignull ){",
          "1693:         sqlite3VdbeAddOp2(v, OP_Integer, 0, regBignull);",
          "1694:       }",
          "1696:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1694:         VdbeComment((v, \"NULL-scan flag\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1776:     if( nConstraint ){",
          "1777:       if( regBignull ){",
          "1778:         sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1779:         VdbeCoverage(v);",
          "1780:       }",
          "1781:       op = aEndOp[bRev*2 + endEq];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1780:         VdbeComment((v, \"If in NULL-scan\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1787:     }",
          "1788:     if( regBignull ){",
          "1789:       sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1790:       VdbeCoverage(v);",
          "1791:       if( bStopAtNull ){",
          "1792:         op = aEndOp[bRev*2 + 0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1792:       VdbeComment((v, \"If not in NULL-scan\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fe25c64f13a8e5d3ca44d003441a7353cd6aca2",
      "candidate_info": {
        "commit_hash": "8fe25c64f13a8e5d3ca44d003441a7353cd6aca2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8fe25c64f13a8e5d3ca44d003441a7353cd6aca2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/createtab.test"
        ],
        "message": "Early detection of too many columns in an index avoid a possible 16-bit signed integer overflow.\n\nFossilOrigin-Name: 8af0caeb6d1e55f66ad2f12af94845dccfe1d0420faf326f5917fc07f8aa6050",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/createtab.test||test/createtab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d03b611302f68483770d49b113b4ed685ba03526d2007647c306f8ec7ae697d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3265:     sqlite3ExprListSetSortOrder(pList, sortOrder);",
          "3266:   }else{",
          "3267:     sqlite3ExprListCheckLength(pParse, pList, \"index\");",
          "3268:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3268:     if( pParse->nErr ) goto exit_create_index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3284:   nName = sqlite3Strlen30(zName);",
          "3285:   nExtraCol = pPk ? pPk->nKeyCol : 1;",
          "3286:   pIndex = sqlite3AllocateIndexObject(db, pList->nExpr + nExtraCol,",
          "3287:                                       nName + nExtra + 1, &zExtra);",
          "3288:   if( db->mallocFailed ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3287:   assert( pList->nExpr + nExtraCol <= 32767 /* Fits in i16 */ );",
          "",
          "---------------"
        ],
        "test/createtab.test||test/createtab.test": [
          "File: test/createtab.test -> test/createtab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # focus of this file is testing that it is OK to create new tables",
          "13: # and indices while creating existing tables and indices.",
          "14: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "15: # $Id: createtab.test,v 1.3 2007/09/12 17:01:45 danielk1977 Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   integrity_check createtab-$av.40",
          "144: }",
          "146: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: # 2019-03-31 Ensure that a proper error is returned for an index",
          "146: # with too many columns.",
          "147: #",
          "148: do_test createtab-3.1 {",
          "149:   db eval {DROP TABLE IF EXISTS t1;}",
          "150:   set sql \"CREATE TABLE t1(x,UNIQUE(x[string repeat ,x 100000]))\"",
          "151:   catchsql $sql",
          "152: } {1 {too many columns in index}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c46c66c46b84290567efb552fb09e80bc758fca",
      "candidate_info": {
        "commit_hash": "9c46c66c46b84290567efb552fb09e80bc758fca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c46c66c46b84290567efb552fb09e80bc758fca",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Ensure that the Walker.pParse structure is initialized when walking the source tree to gather the WINDOW clauses on a query with window functions.\n\nFossilOrigin-Name: 4ca9d5d53d41d08fbce29f9da8cc0948df9c4c3136210af88b499cf889b5ccb8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e5924939c9c8f39367900360fa294cdb1220e9f68d183e32882e0926f775869d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1363:   w.xExprCallback = gatherSelectWindowsCallback;",
          "1364:   w.xSelectCallback = gatherSelectWindowsSelectCallback;",
          "1365:   w.xSelectCallback2 = 0;",
          "1366:   w.u.pSelect = p;",
          "1367:   sqlite3WalkSelect(&w, p);",
          "1368: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1366:   w.pParse = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}