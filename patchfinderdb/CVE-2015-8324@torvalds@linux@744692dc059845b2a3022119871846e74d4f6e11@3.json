{
  "cve_id": "CVE-2015-8324",
  "cve_desc": "The ext4 implementation in the Linux kernel before 2.6.34 does not properly track the initialization of certain data structures, which allows physically proximate attackers to cause a denial of service (NULL pointer dereference and panic) via a crafted USB device, related to the ext4_fill_super function.",
  "repo": "torvalds/linux",
  "patch_hash": "744692dc059845b2a3022119871846e74d4f6e11",
  "patch_info": {
    "commit_hash": "744692dc059845b2a3022119871846e74d4f6e11",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/744692dc059845b2a3022119871846e74d4f6e11",
    "files": [
      "fs/ext4/ext4.h",
      "fs/ext4/ext4_jbd2.h",
      "fs/ext4/extents.c",
      "fs/ext4/inode.c",
      "fs/ext4/super.c"
    ],
    "message": "ext4: use ext4_get_block_write in buffer write\n\nAllocate uninitialized extent before ext4 buffer write and\nconvert the extent to initialized after io completes.\nThe purpose is to make sure an extent can only be marked\ninitialized after it has been written with new data so\nwe can safely drop the i_mutex lock in ext4 DIO read without\nexposing stale data. This helps to improve multi-thread DIO\nread performance on high-speed disks.\n\nSkip the nobh and data=journal mount cases to make things simple for now.\n\nSigned-off-by: Jiaying Zhang <jiayingz@google.com>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
    "before_after_code_files": [
      "fs/ext4/ext4.h||fs/ext4/ext4.h",
      "fs/ext4/ext4_jbd2.h||fs/ext4/ext4_jbd2.h",
      "fs/ext4/extents.c||fs/ext4/extents.c",
      "fs/ext4/inode.c||fs/ext4/inode.c",
      "fs/ext4/super.c||fs/ext4/super.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/ext4.h||fs/ext4/ext4.h": [
      "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "361:       EXT4_GET_BLOCKS_CREATE_UNINIT_EXT)",
      "363: #define EXT4_GET_BLOCKS_IO_CONVERT_EXT  (EXT4_GET_BLOCKS_CONVERT|\\",
      "",
      "[Removed Lines]",
      "364:       EXT4_GET_BLOCKS_IO_CREATE_EXT)",
      "",
      "[Added Lines]",
      "364:       EXT4_GET_BLOCKS_CREATE_UNINIT_EXT)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "704:  struct list_head i_completed_io_list;",
      "706:  ext4_io_end_t *cur_aio_dio;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "705:  spinlock_t i_completed_io_lock;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1781:         __u64 len, __u64 *moved_len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1787: enum ext4_state_bits {",
      "1789:    = BH_JBDPrivateStart,",
      "1790: };",
      "1792: BUFFER_FNS(Uninit, uninit)",
      "1793: TAS_BUFFER_FNS(Uninit, uninit)",
      "",
      "---------------"
    ],
    "fs/ext4/ext4_jbd2.h||fs/ext4/ext4_jbd2.h": [
      "File: fs/ext4/ext4_jbd2.h -> fs/ext4/ext4_jbd2.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "304:  return 0;",
      "305: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "316: static inline int ext4_should_dioread_nolock(struct inode *inode)",
      "317: {",
      "318:  if (!test_opt(inode->i_sb, DIOREAD_NOLOCK))",
      "319:   return 0;",
      "320:  if (test_opt(inode->i_sb, NOBH))",
      "321:   return 0;",
      "322:  if (!S_ISREG(inode->i_mode))",
      "323:   return 0;",
      "324:  if (!(EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL))",
      "325:   return 0;",
      "326:  if (ext4_should_journal_data(inode))",
      "327:   return 0;",
      "328:  return 1;",
      "329: }",
      "",
      "---------------"
    ],
    "fs/ext4/extents.c||fs/ext4/extents.c": [
      "File: fs/ext4/extents.c -> fs/ext4/extents.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1619:  BUG_ON(path[depth].p_hdr == NULL);",
      "1623:   && ext4_can_extents_be_merged(inode, ex, newext)) {",
      "1624:   ext_debug(\"append [%d]%d block to %d:[%d]%d (from %llu)\\n\",",
      "1625:     ext4_ext_is_uninitialized(newext),",
      "",
      "[Removed Lines]",
      "1622:  if (ex && (flag != EXT4_GET_BLOCKS_PRE_IO)",
      "",
      "[Added Lines]",
      "1622:  if (ex && !(flag & EXT4_GET_BLOCKS_PRE_IO)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1741: merge:",
      "1744:   ext4_ext_try_to_merge(inode, path, nearex);",
      "",
      "[Removed Lines]",
      "1743:  if (flag != EXT4_GET_BLOCKS_PRE_IO)",
      "",
      "[Added Lines]",
      "1743:  if (!(flag & EXT4_GET_BLOCKS_PRE_IO))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3065:  ext4_ext_show_leaf(inode, path);",
      "3069:   ret = ext4_split_unwritten_extents(handle,",
      "3070:       inode, path, iblock,",
      "3071:       max_blocks, flags);",
      "",
      "[Removed Lines]",
      "3068:  if (flags == EXT4_GET_BLOCKS_PRE_IO) {",
      "",
      "[Added Lines]",
      "3068:  if ((flags & EXT4_GET_BLOCKS_PRE_IO)) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3078:    io->flag = EXT4_IO_UNWRITTEN;",
      "3079:   else",
      "3080:    ext4_set_inode_state(inode, EXT4_STATE_DIO_UNWRITTEN);",
      "3081:   goto out;",
      "3082:  }",
      "3085:   ret = ext4_convert_unwritten_extents_endio(handle, inode,",
      "3086:        path);",
      "3087:   if (ret >= 0)",
      "",
      "[Removed Lines]",
      "3084:  if (flags == EXT4_GET_BLOCKS_CONVERT) {",
      "",
      "[Added Lines]",
      "3081:   if (ext4_should_dioread_nolock(inode))",
      "3082:    set_buffer_uninit(bh_result);",
      "3086:  if ((flags & EXT4_GET_BLOCKS_CONVERT)) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3351:  if (flags & EXT4_GET_BLOCKS_UNINIT_EXT){",
      "3352:   ext4_ext_mark_uninitialized(&newex);",
      "3363:    if (io)",
      "3364:     io->flag = EXT4_IO_UNWRITTEN;",
      "3365:    else",
      "3366:     ext4_set_inode_state(inode,",
      "3367:            EXT4_STATE_DIO_UNWRITTEN);",
      "3368:   }",
      "3369:  }",
      "3371:  if (unlikely(EXT4_I(inode)->i_flags & EXT4_EOFBLOCKS_FL)) {",
      "",
      "[Removed Lines]",
      "3362:   if (flags == EXT4_GET_BLOCKS_PRE_IO) {",
      "",
      "[Added Lines]",
      "3362:   if ((flags & EXT4_GET_BLOCKS_PRE_IO)) {",
      "3369:   if (ext4_should_dioread_nolock(inode))",
      "3370:    set_buffer_uninit(bh_result);",
      "",
      "---------------"
    ],
    "fs/ext4/inode.c||fs/ext4/inode.c": [
      "File: fs/ext4/inode.c -> fs/ext4/inode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: #include <linux/uio.h>",
      "39: #include <linux/bio.h>",
      "40: #include <linux/workqueue.h>",
      "42: #include \"ext4_jbd2.h\"",
      "43: #include \"xattr.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41: #include <linux/kernel.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1534:  ext4_truncate(inode);",
      "1535: }",
      "1537: static int ext4_write_begin(struct file *file, struct address_space *mapping,",
      "1538:        loff_t pos, unsigned len, unsigned flags,",
      "1539:        struct page **pagep, void **fsdata)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1538: static int ext4_get_block_write(struct inode *inode, sector_t iblock,",
      "1539:      struct buffer_head *bh_result, int create);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1575:  }",
      "1581:  if (!ret && ext4_should_journal_data(inode)) {",
      "1582:   ret = walk_page_buffers(handle, page_buffers(page),",
      "",
      "[Removed Lines]",
      "1578:  ret = block_write_begin(file, mapping, pos, len, flags, pagep, fsdata,",
      "1579:     ext4_get_block);",
      "",
      "[Added Lines]",
      "1581:  if (ext4_should_dioread_nolock(inode))",
      "1582:   ret = block_write_begin(file, mapping, pos, len, flags, pagep,",
      "1583:     fsdata, ext4_get_block_write);",
      "1584:  else",
      "1585:   ret = block_write_begin(file, mapping, pos, len, flags, pagep,",
      "1586:     fsdata, ext4_get_block);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2092:     } else if (buffer_mapped(bh))",
      "2093:      BUG_ON(bh->b_blocknr != pblock);",
      "2095:     cur_logical++;",
      "2096:     pblock++;",
      "2097:    } while ((bh = bh->b_this_page) != head);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2102:     if (buffer_uninit(exbh))",
      "2103:      set_buffer_uninit(bh);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2222:  new.b_state = 0;",
      "2223:  get_blocks_flags = EXT4_GET_BLOCKS_CREATE;",
      "2224:  if (mpd->b_state & (1 << BH_Delay))",
      "2225:   get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2233:  if (ext4_should_dioread_nolock(mpd->inode))",
      "2234:   get_blocks_flags |= EXT4_GET_BLOCKS_IO_CREATE_EXT;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2636:  return ret;",
      "2637: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2650: static int ext4_set_bh_endio(struct buffer_head *bh, struct inode *inode);",
      "2651: static void ext4_end_io_buffer_write(struct buffer_head *bh, int uptodate);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2683:  int ret = 0;",
      "2684:  loff_t size;",
      "2685:  unsigned int len;",
      "2687:  struct inode *inode = page->mapping->host;",
      "2689:  trace_ext4_writepage(inode, page);",
      "",
      "[Removed Lines]",
      "2686:  struct buffer_head *page_bufs;",
      "",
      "[Added Lines]",
      "2700:  struct buffer_head *page_bufs = NULL;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2760:  if (test_opt(inode->i_sb, NOBH) && ext4_should_writeback_data(inode))",
      "2761:   ret = nobh_writepage(page, noalloc_get_block_write, wbc);",
      "2763:   ret = block_write_full_page(page, noalloc_get_block_write,",
      "2764:          wbc);",
      "",
      "[Removed Lines]",
      "2762:  else",
      "",
      "[Added Lines]",
      "2776:  else if (page_bufs && buffer_uninit(page_bufs)) {",
      "2777:   ext4_set_bh_endio(page_bufs, inode);",
      "2778:   ret = block_write_full_page_endio(page, noalloc_get_block_write,",
      "2779:          wbc, ext4_end_io_buffer_write);",
      "2780:  } else",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "3347:  return mpage_readpages(mapping, pages, nr_pages, ext4_get_block);",
      "3348: }",
      "3350: static void ext4_invalidatepage(struct page *page, unsigned long offset)",
      "3351: {",
      "3352:  journal_t *journal = EXT4_JOURNAL(page->mapping->host);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3368: static void ext4_free_io_end(ext4_io_end_t *io)",
      "3369: {",
      "3370:  BUG_ON(!io);",
      "3371:  if (io->page)",
      "3372:   put_page(io->page);",
      "3373:  iput(io->inode);",
      "3374:  kfree(io);",
      "3375: }",
      "3377: static void ext4_invalidatepage_free_endio(struct page *page, unsigned long offset)",
      "3378: {",
      "3379:  struct buffer_head *head, *bh;",
      "3380:  unsigned int curr_off = 0;",
      "3382:  if (!page_has_buffers(page))",
      "3383:   return;",
      "3384:  head = bh = page_buffers(page);",
      "3385:  do {",
      "3386:   if (offset <= curr_off && test_clear_buffer_uninit(bh)",
      "3387:      && bh->b_private) {",
      "3388:    ext4_free_io_end(bh->b_private);",
      "3389:    bh->b_private = NULL;",
      "3390:    bh->b_end_io = NULL;",
      "3391:   }",
      "3392:   curr_off = curr_off + bh->b_size;",
      "3393:   bh = bh->b_this_page;",
      "3394:  } while (bh != head);",
      "3395: }",
      "3404:  if (ext4_should_dioread_nolock(page->mapping->host))",
      "3405:   ext4_invalidatepage_free_endio(page, offset);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "3471: static int ext4_get_block_write(struct inode *inode, sector_t iblock,",
      "3472:      struct buffer_head *bh_result, int create)",
      "3473: {",
      "3475:  int ret = 0;",
      "3476:  unsigned max_blocks = bh_result->b_size >> inode->i_blkbits;",
      "3477:  int dio_credits;",
      "3479:  ext4_debug(\"ext4_get_block_write: inode %lu, create flag %d\\n\",",
      "3480:      inode->i_ino, create);",
      "",
      "[Removed Lines]",
      "3474:  handle_t *handle = NULL;",
      "",
      "[Added Lines]",
      "3526:  handle_t *handle = ext4_journal_current_handle();",
      "3530:  int started = 0;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "3486:  create = EXT4_GET_BLOCKS_IO_CREATE_EXT;",
      "3495:  }",
      "3496:  ret = ext4_get_blocks(handle, inode, iblock, max_blocks, bh_result,",
      "3497:          create);",
      "3498:  if (ret > 0) {",
      "3499:   bh_result->b_size = (ret << inode->i_blkbits);",
      "3500:   ret = 0;",
      "3501:  }",
      "3503: out:",
      "3504:  return ret;",
      "3505: }",
      "3514: static void dump_completed_IO(struct inode * inode)",
      "3515: {",
      "3516: #ifdef EXT4_DEBUG",
      "3517:  struct list_head *cur, *before, *after;",
      "3518:  ext4_io_end_t *io, *io0, *io1;",
      "3520:  if (list_empty(&EXT4_I(inode)->i_completed_io_list)){",
      "3521:   ext4_debug(\"inode %lu completed_io list is empty\\n\", inode->i_ino);",
      "",
      "[Removed Lines]",
      "3488:  if (max_blocks > DIO_MAX_BLOCKS)",
      "3489:   max_blocks = DIO_MAX_BLOCKS;",
      "3490:  dio_credits = ext4_chunk_trans_blocks(inode, max_blocks);",
      "3491:  handle = ext4_journal_start(inode, dio_credits);",
      "3492:  if (IS_ERR(handle)) {",
      "3493:   ret = PTR_ERR(handle);",
      "3494:   goto out;",
      "3502:  ext4_journal_stop(handle);",
      "3507: static void ext4_free_io_end(ext4_io_end_t *io)",
      "3508: {",
      "3509:  BUG_ON(!io);",
      "3510:  iput(io->inode);",
      "3511:  kfree(io);",
      "3512: }",
      "",
      "[Added Lines]",
      "3541:  if (!handle) {",
      "3542:   if (max_blocks > DIO_MAX_BLOCKS)",
      "3543:    max_blocks = DIO_MAX_BLOCKS;",
      "3544:   dio_credits = ext4_chunk_trans_blocks(inode, max_blocks);",
      "3545:   handle = ext4_journal_start(inode, dio_credits);",
      "3546:   if (IS_ERR(handle)) {",
      "3547:    ret = PTR_ERR(handle);",
      "3548:    goto out;",
      "3549:   }",
      "3550:   started = 1;",
      "3559:  if (started)",
      "3560:   ext4_journal_stop(handle);",
      "3570:  unsigned long flags;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "3523:  }",
      "3525:  ext4_debug(\"Dump inode %lu completed_io list \\n\", inode->i_ino);",
      "3526:  list_for_each_entry(io, &EXT4_I(inode)->i_completed_io_list, list){",
      "3527:   cur = &io->list;",
      "3528:   before = cur->prev;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3578:  spin_lock_irqsave(&EXT4_I(inode)->i_completed_io_lock, flags);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "3533:   ext4_debug(\"io 0x%p from inode %lu,prev 0x%p,next 0x%p\\n\",",
      "3534:        io, inode->i_ino, io0, io1);",
      "3535:  }",
      "3536: #endif",
      "3537: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3589:  spin_unlock_irqrestore(&EXT4_I(inode)->i_completed_io_lock, flags);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "3556:  if (io->flag != EXT4_IO_UNWRITTEN)",
      "3557:   return ret;",
      "3562:  if (ret < 0) {",
      "3563:   printk(KERN_EMERG \"%s: failed to convert unwritten\"",
      "3564:    \"extents to written extents, error is %d\"",
      "",
      "[Removed Lines]",
      "3559:  if (offset + size <= i_size_read(inode))",
      "3560:   ret = ext4_convert_unwritten_extents(inode, offset, size);",
      "",
      "[Added Lines]",
      "3613:  ret = ext4_convert_unwritten_extents(inode, offset, size);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "3578: static void ext4_end_io_work(struct work_struct *work)",
      "3579: {",
      "3584:  mutex_lock(&inode->i_mutex);",
      "3585:  ret = ext4_end_io_nolock(io);",
      "3590:  }",
      "3591:  mutex_unlock(&inode->i_mutex);",
      "3592: }",
      "",
      "[Removed Lines]",
      "3580:  ext4_io_end_t *io  = container_of(work, ext4_io_end_t, work);",
      "3581:  struct inode *inode = io->inode;",
      "3582:  int ret = 0;",
      "3586:  if (ret >= 0) {",
      "3587:   if (!list_empty(&io->list))",
      "3588:    list_del_init(&io->list);",
      "3589:   ext4_free_io_end(io);",
      "",
      "[Added Lines]",
      "3632:  ext4_io_end_t  *io = container_of(work, ext4_io_end_t, work);",
      "3633:  struct inode  *inode = io->inode;",
      "3634:  struct ext4_inode_info *ei = EXT4_I(inode);",
      "3635:  unsigned long  flags;",
      "3636:  int   ret;",
      "3640:  if (ret < 0) {",
      "3641:   mutex_unlock(&inode->i_mutex);",
      "3642:   return;",
      "3645:  spin_lock_irqsave(&ei->i_completed_io_lock, flags);",
      "3646:  if (!list_empty(&io->list))",
      "3647:   list_del_init(&io->list);",
      "3648:  spin_unlock_irqrestore(&ei->i_completed_io_lock, flags);",
      "3650:  ext4_free_io_end(io);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "3607: int flush_completed_IO(struct inode *inode)",
      "3608: {",
      "3609:  ext4_io_end_t *io;",
      "3610:  int ret = 0;",
      "3611:  int ret2 = 0;",
      "3614:   return ret;",
      "3616:  dump_completed_IO(inode);",
      "3619:     ext4_io_end_t, list);",
      "",
      "[Removed Lines]",
      "3613:  if (list_empty(&EXT4_I(inode)->i_completed_io_list))",
      "3617:  while (!list_empty(&EXT4_I(inode)->i_completed_io_list)){",
      "3618:   io = list_entry(EXT4_I(inode)->i_completed_io_list.next,",
      "",
      "[Added Lines]",
      "3669:  struct ext4_inode_info *ei = EXT4_I(inode);",
      "3670:  unsigned long flags;",
      "3674:  if (list_empty(&ei->i_completed_io_list))",
      "3678:  spin_lock_irqsave(&ei->i_completed_io_lock, flags);",
      "3679:  while (!list_empty(&ei->i_completed_io_list)){",
      "3680:   io = list_entry(ei->i_completed_io_list.next,",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "3634:   ret = ext4_end_io_nolock(io);",
      "3635:   if (ret < 0)",
      "3636:    ret2 = ret;",
      "3637:   else",
      "3638:    list_del_init(&io->list);",
      "3639:  }",
      "3640:  return (ret2 < 0) ? ret2 : 0;",
      "3641: }",
      "3644: {",
      "3645:  ext4_io_end_t *io = NULL;",
      "3649:  if (io) {",
      "3650:   igrab(inode);",
      "",
      "[Removed Lines]",
      "3643: static ext4_io_end_t *ext4_init_io_end (struct inode *inode)",
      "3647:  io = kmalloc(sizeof(*io), GFP_NOFS);",
      "",
      "[Added Lines]",
      "3696:   spin_unlock_irqrestore(&ei->i_completed_io_lock, flags);",
      "3698:   spin_lock_irqsave(&ei->i_completed_io_lock, flags);",
      "3704:  spin_unlock_irqrestore(&ei->i_completed_io_lock, flags);",
      "3708: static ext4_io_end_t *ext4_init_io_end (struct inode *inode, gfp_t flags)",
      "3712:  io = kmalloc(sizeof(*io), flags);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "3652:   io->flag = 0;",
      "3653:   io->offset = 0;",
      "3654:   io->size = 0;",
      "3656:   INIT_WORK(&io->work, ext4_end_io_work);",
      "3657:   INIT_LIST_HEAD(&io->list);",
      "3658:  }",
      "",
      "[Removed Lines]",
      "3655:   io->error = 0;",
      "",
      "[Added Lines]",
      "3720:   io->page = NULL;",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "3665: {",
      "3666:         ext4_io_end_t *io_end = iocb->private;",
      "3667:  struct workqueue_struct *wq;",
      "3670:  if (!io_end || !size)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3733:  unsigned long flags;",
      "3734:  struct ext4_inode_info *ei;",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "3685:  io_end->offset = offset;",
      "3686:  io_end->size = size;",
      "3687:  wq = EXT4_SB(io_end->inode->i_sb)->dio_unwritten_wq;",
      "3690:  queue_work(wq, &io_end->work);",
      "3695:  iocb->private = NULL;",
      "3696: }",
      "",
      "[Removed Lines]",
      "3693:  list_add_tail(&io_end->list,",
      "3694:    &EXT4_I(io_end->inode)->i_completed_io_list);",
      "",
      "[Added Lines]",
      "3754:  io_end->flag = EXT4_IO_UNWRITTEN;",
      "3761:  ei = EXT4_I(io_end->inode);",
      "3762:  spin_lock_irqsave(&ei->i_completed_io_lock, flags);",
      "3763:  list_add_tail(&io_end->list, &ei->i_completed_io_list);",
      "3764:  spin_unlock_irqrestore(&ei->i_completed_io_lock, flags);",
      "3768: static void ext4_end_io_buffer_write(struct buffer_head *bh, int uptodate)",
      "3769: {",
      "3770:  ext4_io_end_t *io_end = bh->b_private;",
      "3771:  struct workqueue_struct *wq;",
      "3772:  struct inode *inode;",
      "3773:  unsigned long flags;",
      "3775:  if (!test_clear_buffer_uninit(bh) || !io_end)",
      "3776:   goto out;",
      "3778:  if (!(io_end->inode->i_sb->s_flags & MS_ACTIVE)) {",
      "3779:   printk(\"sb umounted, discard end_io request for inode %lu\\n\",",
      "3780:    io_end->inode->i_ino);",
      "3781:   ext4_free_io_end(io_end);",
      "3782:   goto out;",
      "3783:  }",
      "3785:  io_end->flag = EXT4_IO_UNWRITTEN;",
      "3786:  inode = io_end->inode;",
      "3789:  spin_lock_irqsave(&EXT4_I(inode)->i_completed_io_lock, flags);",
      "3790:  list_add_tail(&io_end->list, &EXT4_I(inode)->i_completed_io_list);",
      "3791:  spin_unlock_irqrestore(&EXT4_I(inode)->i_completed_io_lock, flags);",
      "3793:  wq = EXT4_SB(inode->i_sb)->dio_unwritten_wq;",
      "3795:  queue_work(wq, &io_end->work);",
      "3796: out:",
      "3797:  bh->b_private = NULL;",
      "3798:  bh->b_end_io = NULL;",
      "3799:  clear_buffer_uninit(bh);",
      "3800:  end_buffer_async_write(bh, uptodate);",
      "3801: }",
      "3803: static int ext4_set_bh_endio(struct buffer_head *bh, struct inode *inode)",
      "3804: {",
      "3805:  ext4_io_end_t *io_end;",
      "3806:  struct page *page = bh->b_page;",
      "3807:  loff_t offset = (sector_t)page->index << PAGE_CACHE_SHIFT;",
      "3808:  size_t size = bh->b_size;",
      "3810: retry:",
      "3811:  io_end = ext4_init_io_end(inode, GFP_ATOMIC);",
      "3812:  if (!io_end) {",
      "3813:   if (printk_ratelimit())",
      "3814:    printk(KERN_WARNING \"%s: allocation fail\\n\", __func__);",
      "3815:   schedule();",
      "3816:   goto retry;",
      "3817:  }",
      "3818:  io_end->offset = offset;",
      "3819:  io_end->size = size;",
      "3825:  io_end->page = page;",
      "3826:  get_page(io_end->page);",
      "3828:  bh->b_private = io_end;",
      "3829:  bh->b_end_io = ext4_end_io_buffer_write;",
      "3830:  return 0;",
      "3831: }",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "3748:   iocb->private = NULL;",
      "3749:   EXT4_I(inode)->cur_aio_dio = NULL;",
      "3750:   if (!is_sync_kiocb(iocb)) {",
      "3752:    if (!iocb->private)",
      "3753:     return -ENOMEM;",
      "",
      "[Removed Lines]",
      "3751:    iocb->private = ext4_init_io_end(inode);",
      "",
      "[Added Lines]",
      "3886:    iocb->private = ext4_init_io_end(inode, GFP_NOFS);",
      "",
      "---------------"
    ],
    "fs/ext4/super.c||fs/ext4/super.c": [
      "File: fs/ext4/super.c -> fs/ext4/super.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "709:  ei->i_reserved_quota = 0;",
      "710: #endif",
      "711:  INIT_LIST_HEAD(&ei->i_completed_io_list);",
      "712:  ei->cur_aio_dio = NULL;",
      "713:  ei->i_sync_tid = 0;",
      "714:  ei->i_datasync_tid = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "712:  spin_lock_init(&ei->i_completed_io_lock);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "926:  if (test_opt(sb, NOLOAD))",
      "927:   seq_puts(seq, \",norecovery\");",
      "929:  ext4_show_quota_options(seq, sb);",
      "931:  return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "930:  if (test_opt(sb, DIOREAD_NOLOCK))",
      "931:   seq_puts(seq, \",dioread_nolock\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1109:  Opt_stripe, Opt_delalloc, Opt_nodelalloc,",
      "1110:  Opt_block_validity, Opt_noblock_validity,",
      "1111:  Opt_inode_readahead_blks, Opt_journal_ioprio,",
      "1112:  Opt_discard, Opt_nodiscard,",
      "1113: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:  Opt_dioread_nolock, Opt_dioread_lock,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1176:  {Opt_auto_da_alloc, \"auto_da_alloc=%u\"},",
      "1177:  {Opt_auto_da_alloc, \"auto_da_alloc\"},",
      "1178:  {Opt_noauto_da_alloc, \"noauto_da_alloc\"},",
      "1179:  {Opt_discard, \"discard\"},",
      "1180:  {Opt_nodiscard, \"nodiscard\"},",
      "1181:  {Opt_err, NULL},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1184:  {Opt_dioread_nolock, \"dioread_nolock\"},",
      "1185:  {Opt_dioread_lock, \"dioread_lock\"},",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1640:   case Opt_nodiscard:",
      "1641:    clear_opt(sbi->s_mount_opt, DISCARD);",
      "1642:    break;",
      "1643:   default:",
      "1644:    ext4_msg(sb, KERN_ERR,",
      "1645:           \"Unrecognized mount option \\\"%s\\\" \"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1650:   case Opt_dioread_nolock:",
      "1651:    set_opt(sbi->s_mount_opt, DIOREAD_NOLOCK);",
      "1652:    break;",
      "1653:   case Opt_dioread_lock:",
      "1654:    clear_opt(sbi->s_mount_opt, DIOREAD_NOLOCK);",
      "1655:    break;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2795:        EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_RECOVER)) {",
      "2796:   ext4_msg(sb, KERN_ERR, \"required journal recovery \"",
      "2797:          \"suppressed and not mounted read-only\");",
      "2799:  } else {",
      "2800:   clear_opt(sbi->s_mount_opt, DATA_FLAGS);",
      "2801:   set_opt(sbi->s_mount_opt, WRITEBACK_DATA);",
      "",
      "[Removed Lines]",
      "2798:   goto failed_mount4;",
      "",
      "[Added Lines]",
      "2811:   goto failed_mount_wq;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2808:      !jbd2_journal_set_features(EXT4_SB(sb)->s_journal, 0, 0,",
      "2809:            JBD2_FEATURE_INCOMPAT_64BIT)) {",
      "2810:   ext4_msg(sb, KERN_ERR, \"Failed to set 64-bit journal feature\");",
      "2812:  }",
      "2814:  if (test_opt(sb, JOURNAL_ASYNC_COMMIT)) {",
      "",
      "[Removed Lines]",
      "2811:   goto failed_mount4;",
      "",
      "[Added Lines]",
      "2824:   goto failed_mount_wq;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2847:       (sbi->s_journal, 0, 0, JBD2_FEATURE_INCOMPAT_REVOKE)) {",
      "2848:    ext4_msg(sb, KERN_ERR, \"Journal does not support \"",
      "2849:           \"requested data journaling mode\");",
      "2851:   }",
      "2852:  default:",
      "2853:   break;",
      "",
      "[Removed Lines]",
      "2850:    goto failed_mount4;",
      "",
      "[Added Lines]",
      "2863:    goto failed_mount_wq;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2855:  set_task_ioprio(sbi->s_journal->j_task, journal_ioprio);",
      "2857: no_journal:",
      "2859:  if (test_opt(sb, NOBH)) {",
      "2860:   if (!(test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_WRITEBACK_DATA)) {",
      "2861:    ext4_msg(sb, KERN_WARNING, \"Ignoring nobh option - \"",
      "2862:     \"its supported only with writeback mode\");",
      "2863:    clear_opt(sbi->s_mount_opt, NOBH);",
      "2864:   }",
      "2865:  }",
      "2866:  EXT4_SB(sb)->dio_unwritten_wq = create_workqueue(\"ext4-dio-unwritten\");",
      "2867:  if (!EXT4_SB(sb)->dio_unwritten_wq) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2877:   if (test_opt(sb, DIOREAD_NOLOCK)) {",
      "2878:    ext4_msg(sb, KERN_WARNING, \"dioread_nolock option is \"",
      "2879:     \"not supported with nobh mode\");",
      "2880:    goto failed_mount_wq;",
      "2881:   }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2926:     \"requested data journaling mode\");",
      "2927:   clear_opt(sbi->s_mount_opt, DELALLOC);",
      "2928:  }",
      "2930:  err = ext4_setup_system_zone(sb);",
      "2931:  if (err) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2946:  if (test_opt(sb, DIOREAD_NOLOCK)) {",
      "2947:   if (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_JOURNAL_DATA) {",
      "2948:    ext4_msg(sb, KERN_WARNING, \"Ignoring dioread_nolock \"",
      "2949:     \"option - requested data journaling mode\");",
      "2950:    clear_opt(sbi->s_mount_opt, DIOREAD_NOLOCK);",
      "2951:   }",
      "2952:   if (sb->s_blocksize < PAGE_SIZE) {",
      "2953:    ext4_msg(sb, KERN_WARNING, \"Ignoring dioread_nolock \"",
      "2954:     \"option - block size is too small\");",
      "2955:    clear_opt(sbi->s_mount_opt, DIOREAD_NOLOCK);",
      "2956:   }",
      "2957:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e35fd6609b2fee54484d520deccb8f18bf7d38f3",
      "candidate_info": {
        "commit_hash": "e35fd6609b2fee54484d520deccb8f18bf7d38f3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e35fd6609b2fee54484d520deccb8f18bf7d38f3",
        "files": [
          "fs/ext4/ext4.h",
          "fs/ext4/extents.c",
          "fs/ext4/inode.c"
        ],
        "message": "ext4: Add new abstraction ext4_map_blocks() underneath ext4_get_blocks()\n\nJack up ext4_get_blocks() and add a new function, ext4_map_blocks()\nwhich uses a much smaller structure, struct ext4_map_blocks which is\n20 bytes, as opposed to a struct buffer_head, which nearly 5 times\nbigger on an x86_64 machine.  By switching things to use\next4_map_blocks(), we can save stack space by using ext4_map_blocks()\nsince we can avoid allocating a struct buffer_head on the stack.\n\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/extents.c||fs/ext4/extents.c",
          "fs/ext4/inode.c||fs/ext4/inode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/extents.c||fs/ext4/extents.c",
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ],
          "candidate": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/extents.c||fs/ext4/extents.c",
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:  unsigned int flags;",
          "126: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: #define EXT4_MAP_NEW  (1 << BH_New)",
          "136: #define EXT4_MAP_MAPPED  (1 << BH_Mapped)",
          "137: #define EXT4_MAP_UNWRITTEN (1 << BH_Unwritten)",
          "138: #define EXT4_MAP_BOUNDARY (1 << BH_Boundary)",
          "139: #define EXT4_MAP_UNINIT  (1 << BH_Uninit)",
          "140: #define EXT4_MAP_FLAGS  (EXT4_MAP_NEW | EXT4_MAP_MAPPED |\\",
          "141:      EXT4_MAP_UNWRITTEN | EXT4_MAP_BOUNDARY |\\",
          "142:      EXT4_MAP_UNINIT)",
          "144: struct ext4_map_blocks {",
          "145:  ext4_fsblk_t m_pblk;",
          "146:  ext4_lblk_t m_lblk;",
          "147:  unsigned int m_len;",
          "148:  unsigned int m_flags;",
          "149: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1773: extern int ext4_ext_writepage_trans_blocks(struct inode *, int);",
          "1774: extern int ext4_ext_index_trans_blocks(struct inode *inode, int nrblocks,",
          "1775:            int chunk);",
          "1779: extern void ext4_ext_truncate(struct inode *);",
          "1780: extern void ext4_ext_init(struct super_block *);",
          "1781: extern void ext4_ext_release(struct super_block *);",
          "",
          "[Removed Lines]",
          "1776: extern int ext4_ext_get_blocks(handle_t *handle, struct inode *inode,",
          "1777:           ext4_lblk_t iblock, unsigned int max_blocks,",
          "1778:           struct buffer_head *bh_result, int flags);",
          "",
          "[Added Lines]",
          "1799: extern int ext4_ext_map_blocks(handle_t *handle, struct inode *inode,",
          "1800:           struct ext4_map_blocks *map, int flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1783:      loff_t len);",
          "1784: extern int ext4_convert_unwritten_extents(struct inode *inode, loff_t offset,",
          "1785:      ssize_t len);",
          "1786: extern int ext4_get_blocks(handle_t *handle, struct inode *inode,",
          "1787:       sector_t block, unsigned int max_blocks,",
          "1788:       struct buffer_head *bh, int flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1808: extern int ext4_map_blocks(handle_t *handle, struct inode *inode,",
          "1809:       struct ext4_map_blocks *map, int flags);",
          "",
          "---------------"
        ],
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2623: static int ext4_ext_convert_to_initialized(handle_t *handle,",
          "2628: {",
          "2629:  struct ext4_extent *ex, newex, orig_ex;",
          "2630:  struct ext4_extent *ex1 = NULL;",
          "",
          "[Removed Lines]",
          "2624:       struct inode *inode,",
          "2625:       struct ext4_ext_path *path,",
          "2626:       ext4_lblk_t iblock,",
          "2627:       unsigned int max_blocks)",
          "",
          "[Added Lines]",
          "2624:         struct inode *inode,",
          "2625:         struct ext4_map_blocks *map,",
          "2626:         struct ext4_ext_path *path)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2641:  ext_debug(\"ext4_ext_convert_to_initialized: inode %lu, logical\"",
          "2642:   \"block %llu, max_blocks %u\\n\", inode->i_ino,",
          "2645:  eof_block = (inode->i_size + inode->i_sb->s_blocksize - 1) >>",
          "2646:   inode->i_sb->s_blocksize_bits;",
          "2650:  depth = ext_depth(inode);",
          "2651:  eh = path[depth].p_hdr;",
          "2652:  ex = path[depth].p_ext;",
          "2653:  ee_block = le32_to_cpu(ex->ee_block);",
          "2654:  ee_len = ext4_ext_get_actual_len(ex);",
          "2658:  ex2 = ex;",
          "2659:  orig_ex.ee_block = ex->ee_block;",
          "",
          "[Removed Lines]",
          "2643:   (unsigned long long)iblock, max_blocks);",
          "2647:  if (eof_block < iblock + max_blocks)",
          "2648:   eof_block = iblock + max_blocks;",
          "2655:  allocated = ee_len - (iblock - ee_block);",
          "2656:  newblock = iblock - ee_block + ext_pblock(ex);",
          "",
          "[Added Lines]",
          "2642:   (unsigned long long)map->m_lblk, map->m_len);",
          "2646:  if (eof_block < map->m_lblk + map->m_len)",
          "2647:   eof_block = map->m_lblk + map->m_len;",
          "2654:  allocated = ee_len - (map->m_lblk - ee_block);",
          "2655:  newblock = map->m_lblk - ee_block + ext_pblock(ex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2683:   return allocated;",
          "2684:  }",
          "2688:   ex1 = ex;",
          "2690:   ext4_ext_mark_uninitialized(ex1);",
          "2691:   ex2 = &newex;",
          "2692:  }",
          "",
          "[Removed Lines]",
          "2687:  if (iblock > ee_block) {",
          "2689:   ex1->ee_len = cpu_to_le16(iblock - ee_block);",
          "",
          "[Added Lines]",
          "2686:  if (map->m_lblk > ee_block) {",
          "2688:   ex1->ee_len = cpu_to_le16(map->m_lblk - ee_block);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2702:   unsigned int newdepth;",
          "2704:   if (allocated <= EXT4_EXT_ZERO_LEN && may_zeroout) {",
          "",
          "[Removed Lines]",
          "2698:  if (!ex1 && allocated > max_blocks)",
          "2699:   ex2->ee_len = cpu_to_le16(max_blocks);",
          "2701:  if (allocated > max_blocks) {",
          "",
          "[Added Lines]",
          "2697:  if (!ex1 && allocated > map->m_len)",
          "2698:   ex2->ee_len = cpu_to_le16(map->m_len);",
          "2700:  if (allocated > map->m_len) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2716:    ext4_ext_dirty(handle, inode, path + depth);",
          "2718:    ex3 = &newex;",
          "2720:    ext4_ext_store_pblock(ex3, newblock);",
          "2721:    ex3->ee_len = cpu_to_le16(allocated);",
          "2722:    err = ext4_ext_insert_extent(handle, inode, path,",
          "",
          "[Removed Lines]",
          "2719:    ex3->ee_block = cpu_to_le32(iblock);",
          "",
          "[Added Lines]",
          "2718:    ex3->ee_block = cpu_to_le32(map->m_lblk);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2752:     depth = ext_depth(inode);",
          "2753:     ext4_ext_drop_refs(path);",
          "2756:     if (IS_ERR(path)) {",
          "2757:      err = PTR_ERR(path);",
          "2758:      return err;",
          "",
          "[Removed Lines]",
          "2754:     path = ext4_ext_find_extent(inode,",
          "2755:         iblock, path);",
          "",
          "[Added Lines]",
          "2753:     path = ext4_ext_find_extent(inode, map->m_lblk,",
          "2754:            path);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2772:    return allocated;",
          "2773:   }",
          "2774:   ex3 = &newex;",
          "2778:   ext4_ext_mark_uninitialized(ex3);",
          "2779:   err = ext4_ext_insert_extent(handle, inode, path, ex3, 0);",
          "2780:   if (err == -ENOSPC && may_zeroout) {",
          "",
          "[Removed Lines]",
          "2775:   ex3->ee_block = cpu_to_le32(iblock + max_blocks);",
          "2776:   ext4_ext_store_pblock(ex3, newblock + max_blocks);",
          "2777:   ex3->ee_len = cpu_to_le16(allocated - max_blocks);",
          "",
          "[Added Lines]",
          "2774:   ex3->ee_block = cpu_to_le32(map->m_lblk + map->m_len);",
          "2775:   ext4_ext_store_pblock(ex3, newblock + map->m_len);",
          "2776:   ex3->ee_len = cpu_to_le16(allocated - map->m_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2808:   depth = newdepth;",
          "2809:   ext4_ext_drop_refs(path);",
          "2811:   if (IS_ERR(path)) {",
          "2812:    err = PTR_ERR(path);",
          "2813:    goto out;",
          "",
          "[Removed Lines]",
          "2810:   path = ext4_ext_find_extent(inode, iblock, path);",
          "",
          "[Added Lines]",
          "2809:   path = ext4_ext_find_extent(inode, map->m_lblk, path);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2821:   if (err)",
          "2822:    goto out;",
          "2830:   if (le16_to_cpu(orig_ex.ee_len) <= EXT4_EXT_ZERO_LEN &&",
          "2832:    err =  ext4_ext_zeroout(inode, &orig_ex);",
          "2833:    if (err)",
          "2834:     goto fix_extent_len;",
          "",
          "[Removed Lines]",
          "2824:   allocated = max_blocks;",
          "2831:    iblock != ee_block && may_zeroout) {",
          "",
          "[Added Lines]",
          "2823:   allocated = map->m_len;",
          "2830:    map->m_lblk != ee_block && may_zeroout) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2850:  if (ex1 && ex1 != ex) {",
          "2851:   ex1 = ex;",
          "2853:   ext4_ext_mark_uninitialized(ex1);",
          "2854:   ex2 = &newex;",
          "2855:  }",
          "2858:  ext4_ext_store_pblock(ex2, newblock);",
          "2859:  ex2->ee_len = cpu_to_le16(allocated);",
          "2860:  if (ex2 != ex)",
          "",
          "[Removed Lines]",
          "2852:   ex1->ee_len = cpu_to_le16(iblock - ee_block);",
          "2857:  ex2->ee_block = cpu_to_le32(iblock);",
          "",
          "[Added Lines]",
          "2851:   ex1->ee_len = cpu_to_le16(map->m_lblk - ee_block);",
          "2856:  ex2->ee_block = cpu_to_le32(map->m_lblk);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2948: static int ext4_split_unwritten_extents(handle_t *handle,",
          "2949:      struct inode *inode,",
          "2950:      struct ext4_ext_path *path,",
          "2953:      int flags)",
          "2954: {",
          "2955:  struct ext4_extent *ex, newex, orig_ex;",
          "",
          "[Removed Lines]",
          "2951:      ext4_lblk_t iblock,",
          "2952:      unsigned int max_blocks,",
          "",
          "[Added Lines]",
          "2949:      struct ext4_map_blocks *map,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2966:  ext_debug(\"ext4_split_unwritten_extents: inode %lu, logical\"",
          "2967:   \"block %llu, max_blocks %u\\n\", inode->i_ino,",
          "2970:  eof_block = (inode->i_size + inode->i_sb->s_blocksize - 1) >>",
          "2971:   inode->i_sb->s_blocksize_bits;",
          "2975:  depth = ext_depth(inode);",
          "2976:  eh = path[depth].p_hdr;",
          "2977:  ex = path[depth].p_ext;",
          "2978:  ee_block = le32_to_cpu(ex->ee_block);",
          "2979:  ee_len = ext4_ext_get_actual_len(ex);",
          "2983:  ex2 = ex;",
          "2984:  orig_ex.ee_block = ex->ee_block;",
          "",
          "[Removed Lines]",
          "2968:   (unsigned long long)iblock, max_blocks);",
          "2972:  if (eof_block < iblock + max_blocks)",
          "2973:   eof_block = iblock + max_blocks;",
          "2980:  allocated = ee_len - (iblock - ee_block);",
          "2981:  newblock = iblock - ee_block + ext_pblock(ex);",
          "",
          "[Added Lines]",
          "2966:   (unsigned long long)map->m_lblk, map->m_len);",
          "2970:  if (eof_block < map->m_lblk + map->m_len)",
          "2971:   eof_block = map->m_lblk + map->m_len;",
          "2978:  allocated = ee_len - (map->m_lblk - ee_block);",
          "2979:  newblock = map->m_lblk - ee_block + ext_pblock(ex);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3000:   return allocated;",
          "3002:  err = ext4_ext_get_access(handle, inode, path + depth);",
          "3003:  if (err)",
          "3004:   goto out;",
          "3007:   ex1 = ex;",
          "3009:   ext4_ext_mark_uninitialized(ex1);",
          "3010:   ex2 = &newex;",
          "3011:  }",
          "",
          "[Removed Lines]",
          "2999:  if ((iblock == ee_block) && (allocated <= max_blocks))",
          "3006:  if (iblock > ee_block) {",
          "3008:   ex1->ee_len = cpu_to_le16(iblock - ee_block);",
          "",
          "[Added Lines]",
          "2997:  if ((map->m_lblk == ee_block) && (allocated <= map->m_len))",
          "3004:  if (map->m_lblk > ee_block) {",
          "3006:   ex1->ee_len = cpu_to_le16(map->m_lblk - ee_block);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3021:   unsigned int newdepth;",
          "3022:   ex3 = &newex;",
          "3026:   ext4_ext_mark_uninitialized(ex3);",
          "3027:   err = ext4_ext_insert_extent(handle, inode, path, ex3, flags);",
          "3028:   if (err == -ENOSPC && may_zeroout) {",
          "",
          "[Removed Lines]",
          "3017:  if (!ex1 && allocated > max_blocks)",
          "3018:   ex2->ee_len = cpu_to_le16(max_blocks);",
          "3020:  if (allocated > max_blocks) {",
          "3023:   ex3->ee_block = cpu_to_le32(iblock + max_blocks);",
          "3024:   ext4_ext_store_pblock(ex3, newblock + max_blocks);",
          "3025:   ex3->ee_len = cpu_to_le16(allocated - max_blocks);",
          "",
          "[Added Lines]",
          "3015:  if (!ex1 && allocated > map->m_len)",
          "3016:   ex2->ee_len = cpu_to_le16(map->m_len);",
          "3018:  if (allocated > map->m_len) {",
          "3021:   ex3->ee_block = cpu_to_le32(map->m_lblk + map->m_len);",
          "3022:   ext4_ext_store_pblock(ex3, newblock + map->m_len);",
          "3023:   ex3->ee_len = cpu_to_le16(allocated - map->m_len);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3056:   depth = newdepth;",
          "3057:   ext4_ext_drop_refs(path);",
          "3059:   if (IS_ERR(path)) {",
          "3060:    err = PTR_ERR(path);",
          "3061:    goto out;",
          "",
          "[Removed Lines]",
          "3058:   path = ext4_ext_find_extent(inode, iblock, path);",
          "",
          "[Added Lines]",
          "3056:   path = ext4_ext_find_extent(inode, map->m_lblk, path);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3069:   if (err)",
          "3070:    goto out;",
          "3073:  }",
          "",
          "[Removed Lines]",
          "3072:   allocated = max_blocks;",
          "",
          "[Added Lines]",
          "3070:   allocated = map->m_len;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3079:  if (ex1 && ex1 != ex) {",
          "3080:   ex1 = ex;",
          "3082:   ext4_ext_mark_uninitialized(ex1);",
          "3083:   ex2 = &newex;",
          "3084:  }",
          "3090:  ext4_ext_store_pblock(ex2, newblock);",
          "3091:  ex2->ee_len = cpu_to_le16(allocated);",
          "3092:  ext4_ext_mark_uninitialized(ex2);",
          "",
          "[Removed Lines]",
          "3081:   ex1->ee_len = cpu_to_le16(iblock - ee_block);",
          "3089:  ex2->ee_block = cpu_to_le32(iblock);",
          "",
          "[Added Lines]",
          "3079:   ex1->ee_len = cpu_to_le16(map->m_lblk - ee_block);",
          "3087:  ex2->ee_block = cpu_to_le32(map->m_lblk);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3189: static int",
          "3190: ext4_ext_handle_uninitialized_extents(handle_t *handle, struct inode *inode,",
          "3192:    struct ext4_ext_path *path, int flags,",
          "3195: {",
          "3196:  int ret = 0;",
          "3197:  int err = 0;",
          "",
          "[Removed Lines]",
          "3191:    ext4_lblk_t iblock, unsigned int max_blocks,",
          "3193:    unsigned int allocated, struct buffer_head *bh_result,",
          "3194:    ext4_fsblk_t newblock)",
          "",
          "[Added Lines]",
          "3189:    struct ext4_map_blocks *map,",
          "3191:    unsigned int allocated, ext4_fsblk_t newblock)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3200:  ext_debug(\"ext4_ext_handle_uninitialized_extents: inode %lu, logical\"",
          "3201:     \"block %llu, max_blocks %u, flags %d, allocated %u\",",
          "3203:     flags, allocated);",
          "3204:  ext4_ext_show_leaf(inode, path);",
          "3207:  if ((flags & EXT4_GET_BLOCKS_PRE_IO)) {",
          "",
          "[Removed Lines]",
          "3202:     inode->i_ino, (unsigned long long)iblock, max_blocks,",
          "3208:   ret = ext4_split_unwritten_extents(handle,",
          "3209:       inode, path, iblock,",
          "3210:       max_blocks, flags);",
          "",
          "[Added Lines]",
          "3199:     inode->i_ino, (unsigned long long)map->m_lblk, map->m_len,",
          "3205:   ret = ext4_split_unwritten_extents(handle, inode, map,",
          "3206:          path, flags);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3218:   else",
          "3219:    ext4_set_inode_state(inode, EXT4_STATE_DIO_UNWRITTEN);",
          "3220:   if (ext4_should_dioread_nolock(inode))",
          "3222:   goto out;",
          "3223:  }",
          "",
          "[Removed Lines]",
          "3221:    set_buffer_uninit(bh_result);",
          "",
          "[Added Lines]",
          "3217:    map->m_flags |= EXT4_MAP_UNINIT;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3250:   goto out1;",
          "3251:  }",
          "3257:  if (ret >= 0)",
          "3258:   ext4_update_inode_fsync_trans(handle, inode, 1);",
          "3259: out:",
          "",
          "[Removed Lines]",
          "3249:   set_buffer_unwritten(bh_result);",
          "3254:  ret = ext4_ext_convert_to_initialized(handle, inode,",
          "3255:       path, iblock,",
          "3256:       max_blocks);",
          "",
          "[Added Lines]",
          "3245:   map->m_flags |= EXT4_MAP_UNWRITTEN;",
          "3250:  ret = ext4_ext_convert_to_initialized(handle, inode, map, path);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3262:   goto out2;",
          "3263:  } else",
          "3264:   allocated = ret;",
          "",
          "[Removed Lines]",
          "3265:  set_buffer_new(bh_result);",
          "",
          "[Added Lines]",
          "3259:  map->m_flags |= EXT4_MAP_NEW;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3274:   unmap_underlying_metadata_blocks(inode->i_sb->s_bdev,",
          "3278:  }",
          "",
          "[Removed Lines]",
          "3273:  if (allocated > max_blocks) {",
          "3275:      newblock + max_blocks,",
          "3276:      allocated - max_blocks);",
          "3277:   allocated = max_blocks;",
          "",
          "[Added Lines]",
          "3267:  if (allocated > map->m_len) {",
          "3269:      newblock + map->m_len,",
          "3270:      allocated - map->m_len);",
          "3271:   allocated = map->m_len;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3288:   ext4_da_update_reserve_space(inode, allocated, 0);",
          "3290: map_out:",
          "3292: out1:",
          "3295:  ext4_ext_show_leaf(inode, path);",
          "3298: out2:",
          "3299:  if (path) {",
          "3300:   ext4_ext_drop_refs(path);",
          "",
          "[Removed Lines]",
          "3291:  set_buffer_mapped(bh_result);",
          "3293:  if (allocated > max_blocks)",
          "3294:   allocated = max_blocks;",
          "3296:  bh_result->b_bdev = inode->i_sb->s_bdev;",
          "3297:  bh_result->b_blocknr = newblock;",
          "",
          "[Added Lines]",
          "3285:  map->m_flags |= EXT4_MAP_MAPPED;",
          "3287:  if (allocated > map->m_len)",
          "3288:   allocated = map->m_len;",
          "3290:  map->m_pblk = newblock;",
          "3291:  map->m_len = allocated;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3327: {",
          "3328:  struct ext4_ext_path *path = NULL;",
          "3329:  struct ext4_extent_header *eh;",
          "",
          "[Removed Lines]",
          "3323: int ext4_ext_get_blocks(handle_t *handle, struct inode *inode,",
          "3324:    ext4_lblk_t iblock,",
          "3325:    unsigned int max_blocks, struct buffer_head *bh_result,",
          "3326:    int flags)",
          "",
          "[Added Lines]",
          "3317: int ext4_ext_map_blocks(handle_t *handle, struct inode *inode,",
          "3318:    struct ext4_map_blocks *map, int flags)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3334:  struct ext4_allocation_request ar;",
          "3335:  ext4_io_end_t *io = EXT4_I(inode)->cur_aio_dio;",
          "3338:  ext_debug(\"blocks %u/%u requested for inode %lu\\n\",",
          "3343:  if (cache_type) {",
          "3344:   if (cache_type == EXT4_EXT_CACHE_GAP) {",
          "3345:    if ((flags & EXT4_GET_BLOCKS_CREATE) == 0) {",
          "",
          "[Removed Lines]",
          "3337:  __clear_bit(BH_New, &bh_result->b_state);",
          "3339:    iblock, max_blocks, inode->i_ino);",
          "3342:  cache_type = ext4_ext_in_cache(inode, iblock, &newex);",
          "",
          "[Added Lines]",
          "3330:     map->m_lblk, map->m_len, inode->i_ino);",
          "3333:  cache_type = ext4_ext_in_cache(inode, map->m_lblk, &newex);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3353:   } else if (cache_type == EXT4_EXT_CACHE_EXTENT) {",
          "3356:        - le32_to_cpu(newex.ee_block)",
          "3357:        + ext_pblock(&newex);",
          "3359:    allocated = ext4_ext_get_actual_len(&newex) -",
          "3361:    goto out;",
          "3362:   } else {",
          "3363:    BUG();",
          "",
          "[Removed Lines]",
          "3355:    newblock = iblock",
          "3360:      (iblock - le32_to_cpu(newex.ee_block));",
          "",
          "[Added Lines]",
          "3346:    newblock = map->m_lblk",
          "3351:     (map->m_lblk - le32_to_cpu(newex.ee_block));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3365:  }",
          "3369:  if (IS_ERR(path)) {",
          "3370:   err = PTR_ERR(path);",
          "3371:   path = NULL;",
          "",
          "[Removed Lines]",
          "3368:  path = ext4_ext_find_extent(inode, iblock, NULL);",
          "",
          "[Added Lines]",
          "3359:  path = ext4_ext_find_extent(inode, map->m_lblk, NULL);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3382:  if (unlikely(path[depth].p_ext == NULL && depth != 0)) {",
          "3383:   EXT4_ERROR_INODE(inode, \"bad extent address \"",
          "3384:      \"iblock: %d, depth: %d pblock %lld\",",
          "3386:   err = -EIO;",
          "3387:   goto out2;",
          "3388:  }",
          "",
          "[Removed Lines]",
          "3385:      iblock, depth, path[depth].p_block);",
          "",
          "[Added Lines]",
          "3376:      map->m_lblk, depth, path[depth].p_block);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3401:   ee_len = ext4_ext_get_actual_len(ex);",
          "3411:    if (!ext4_ext_is_uninitialized(ex)) {",
          "",
          "[Removed Lines]",
          "3403:   if (in_range(iblock, ee_block, ee_len)) {",
          "3404:    newblock = iblock - ee_block + ee_start;",
          "3406:    allocated = ee_len - (iblock - ee_block);",
          "3407:    ext_debug(\"%u fit into %u:%d -> %llu\\n\", iblock,",
          "3408:      ee_block, ee_len, newblock);",
          "",
          "[Added Lines]",
          "3394:   if (in_range(map->m_lblk, ee_block, ee_len)) {",
          "3395:    newblock = map->m_lblk - ee_block + ee_start;",
          "3397:    allocated = ee_len - (map->m_lblk - ee_block);",
          "3398:    ext_debug(\"%u fit into %u:%d -> %llu\\n\", map->m_lblk,",
          "3399:       ee_block, ee_len, newblock);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3415:     goto out;",
          "3416:    }",
          "3417:    ret = ext4_ext_handle_uninitialized_extents(handle,",
          "3420:    return ret;",
          "3421:   }",
          "3422:  }",
          "",
          "[Removed Lines]",
          "3418:      inode, iblock, max_blocks, path,",
          "3419:      flags, allocated, bh_result, newblock);",
          "",
          "[Added Lines]",
          "3409:      inode, map, path, flags, allocated,",
          "3410:      newblock);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3434:   goto out2;",
          "3435:  }",
          "",
          "[Removed Lines]",
          "3433:   ext4_ext_put_gap_in_cache(inode, path, iblock);",
          "",
          "[Added Lines]",
          "3424:   ext4_ext_put_gap_in_cache(inode, path, map->m_lblk);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3442:  err = ext4_ext_search_left(inode, path, &ar.lleft, &ar.pleft);",
          "3443:  if (err)",
          "3444:   goto out2;",
          "3446:  err = ext4_ext_search_right(inode, path, &ar.lright, &ar.pright);",
          "3447:  if (err)",
          "3448:   goto out2;",
          "",
          "[Removed Lines]",
          "3441:  ar.lleft = iblock;",
          "3445:  ar.lright = iblock;",
          "",
          "[Added Lines]",
          "3432:  ar.lleft = map->m_lblk;",
          "3436:  ar.lright = map->m_lblk;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3457:      !(flags & EXT4_GET_BLOCKS_UNINIT_EXT))",
          "3460:    (flags & EXT4_GET_BLOCKS_UNINIT_EXT))",
          "3466:  err = ext4_ext_check_overlap(inode, &newex, path);",
          "3467:  if (err)",
          "3468:   allocated = ext4_ext_get_actual_len(&newex);",
          "3469:  else",
          "3473:  ar.inode = inode;",
          "3476:  ar.len = allocated;",
          "3477:  if (S_ISREG(inode->i_mode))",
          "3478:   ar.flags = EXT4_MB_HINT_DATA;",
          "",
          "[Removed Lines]",
          "3456:  if (max_blocks > EXT_INIT_MAX_LEN &&",
          "3458:   max_blocks = EXT_INIT_MAX_LEN;",
          "3459:  else if (max_blocks > EXT_UNINIT_MAX_LEN &&",
          "3461:   max_blocks = EXT_UNINIT_MAX_LEN;",
          "3464:  newex.ee_block = cpu_to_le32(iblock);",
          "3465:  newex.ee_len = cpu_to_le16(max_blocks);",
          "3470:   allocated = max_blocks;",
          "3474:  ar.goal = ext4_ext_find_goal(inode, path, iblock);",
          "3475:  ar.logical = iblock;",
          "",
          "[Added Lines]",
          "3447:  if (map->m_len > EXT_INIT_MAX_LEN &&",
          "3449:   map->m_len = EXT_INIT_MAX_LEN;",
          "3450:  else if (map->m_len > EXT_UNINIT_MAX_LEN &&",
          "3452:   map->m_len = EXT_UNINIT_MAX_LEN;",
          "3455:  newex.ee_block = cpu_to_le32(map->m_lblk);",
          "3456:  newex.ee_len = cpu_to_le16(map->m_len);",
          "3461:   allocated = map->m_len;",
          "3465:  ar.goal = ext4_ext_find_goal(inode, path, map->m_lblk);",
          "3466:  ar.logical = map->m_lblk;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3506:            EXT4_STATE_DIO_UNWRITTEN);",
          "3507:   }",
          "3508:   if (ext4_should_dioread_nolock(inode))",
          "3510:  }",
          "3512:  if (unlikely(EXT4_I(inode)->i_flags & EXT4_EOFBLOCKS_FL)) {",
          "",
          "[Removed Lines]",
          "3509:    set_buffer_uninit(bh_result);",
          "",
          "[Added Lines]",
          "3500:    map->m_flags |= EXT4_MAP_UNINIT;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3518:    goto out2;",
          "3519:   }",
          "3520:   last_ex = EXT_LAST_EXTENT(eh);",
          "3522:       + ext4_ext_get_actual_len(last_ex))",
          "3523:    EXT4_I(inode)->i_flags &= ~EXT4_EOFBLOCKS_FL;",
          "3524:  }",
          "",
          "[Removed Lines]",
          "3521:   if (iblock + ar.len > le32_to_cpu(last_ex->ee_block)",
          "",
          "[Added Lines]",
          "3512:   if (map->m_lblk + ar.len > le32_to_cpu(last_ex->ee_block)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3537:  newblock = ext_pblock(&newex);",
          "3538:  allocated = ext4_ext_get_actual_len(&newex);",
          "",
          "[Removed Lines]",
          "3539:  if (allocated > max_blocks)",
          "3540:   allocated = max_blocks;",
          "3541:  set_buffer_new(bh_result);",
          "",
          "[Added Lines]",
          "3530:  if (allocated > map->m_len)",
          "3531:   allocated = map->m_len;",
          "3532:  map->m_flags |= EXT4_MAP_NEW;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3554:  if ((flags & EXT4_GET_BLOCKS_UNINIT_EXT) == 0) {",
          "3556:       EXT4_EXT_CACHE_EXTENT);",
          "3557:   ext4_update_inode_fsync_trans(handle, inode, 1);",
          "3558:  } else",
          "3559:   ext4_update_inode_fsync_trans(handle, inode, 0);",
          "3560: out:",
          "3563:  ext4_ext_show_leaf(inode, path);",
          "3567: out2:",
          "3568:  if (path) {",
          "3569:   ext4_ext_drop_refs(path);",
          "",
          "[Removed Lines]",
          "3555:   ext4_ext_put_in_cache(inode, iblock, allocated, newblock,",
          "3561:  if (allocated > max_blocks)",
          "3562:   allocated = max_blocks;",
          "3564:  set_buffer_mapped(bh_result);",
          "3565:  bh_result->b_bdev = inode->i_sb->s_bdev;",
          "3566:  bh_result->b_blocknr = newblock;",
          "",
          "[Added Lines]",
          "3546:   ext4_ext_put_in_cache(inode, map->m_lblk, allocated, newblock,",
          "3552:  if (allocated > map->m_len)",
          "3553:   allocated = map->m_len;",
          "3555:  map->m_flags |= EXT4_MAP_MAPPED;",
          "3556:  map->m_pblk = newblock;",
          "3557:  map->m_len = allocated;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3729:   if (ret <= 0) {",
          "3730: #ifdef EXT4FS_DEBUG",
          "3731:    WARN_ON(ret <= 0);",
          "3733:         \"returned error inode#%lu, block=%u, \"",
          "3734:         \"max_blocks=%u\", __func__,",
          "3735:         inode->i_ino, block, max_blocks);",
          "",
          "[Removed Lines]",
          "3732:    printk(KERN_ERR \"%s: ext4_ext_get_blocks \"",
          "",
          "[Added Lines]",
          "3723:    printk(KERN_ERR \"%s: ext4_ext_map_blocks \"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3806:           EXT4_GET_BLOCKS_IO_CONVERT_EXT);",
          "3807:   if (ret <= 0) {",
          "3808:    WARN_ON(ret <= 0);",
          "3810:         \"returned error inode#%lu, block=%u, \"",
          "3811:         \"max_blocks=%u\", __func__,",
          "3812:         inode->i_ino, block, max_blocks);",
          "",
          "[Removed Lines]",
          "3809:    printk(KERN_ERR \"%s: ext4_ext_get_blocks \"",
          "",
          "[Added Lines]",
          "3800:    printk(KERN_ERR \"%s: ext4_ext_map_blocks \"",
          "",
          "---------------"
        ],
        "fs/ext4/inode.c||fs/ext4/inode.c": [
          "File: fs/ext4/inode.c -> fs/ext4/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "923:           int flags)",
          "924: {",
          "925:  int err = -EIO;",
          "",
          "[Removed Lines]",
          "920: static int ext4_ind_get_blocks(handle_t *handle, struct inode *inode,",
          "921:           ext4_lblk_t iblock, unsigned int maxblocks,",
          "922:           struct buffer_head *bh_result,",
          "",
          "[Added Lines]",
          "920: static int ext4_ind_map_blocks(handle_t *handle, struct inode *inode,",
          "921:           struct ext4_map_blocks *map,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "936:  J_ASSERT(!(EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL));",
          "937:  J_ASSERT(handle != NULL || (flags & EXT4_GET_BLOCKS_CREATE) == 0);",
          "939:        &blocks_to_boundary);",
          "941:  if (depth == 0)",
          "",
          "[Removed Lines]",
          "938:  depth = ext4_block_to_path(inode, iblock, offsets,",
          "",
          "[Added Lines]",
          "937:  depth = ext4_block_to_path(inode, map->m_lblk, offsets,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "947:  if (!partial) {",
          "948:   first_block = le32_to_cpu(chain[depth - 1].key);",
          "950:   count++;",
          "953:    ext4_fsblk_t blk;",
          "955:    blk = le32_to_cpu(*(chain[depth-1].p + count));",
          "",
          "[Removed Lines]",
          "949:   clear_buffer_new(bh_result);",
          "952:   while (count < maxblocks && count <= blocks_to_boundary) {",
          "",
          "[Added Lines]",
          "950:   while (count < map->m_len && count <= blocks_to_boundary) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "975:  indirect_blks = (chain + depth) - partial - 1;",
          "",
          "[Removed Lines]",
          "972:  goal = ext4_find_goal(inode, iblock, partial);",
          "",
          "[Added Lines]",
          "970:  goal = ext4_find_goal(inode, map->m_lblk, partial);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "981:  count = ext4_blks_to_allocate(partial, indirect_blks,",
          "987:     &count, goal,",
          "988:     offsets + (partial - chain), partial);",
          "",
          "[Removed Lines]",
          "982:      maxblocks, blocks_to_boundary);",
          "986:  err = ext4_alloc_branch(handle, inode, iblock, indirect_blks,",
          "",
          "[Added Lines]",
          "980:           map->m_len, blocks_to_boundary);",
          "984:  err = ext4_alloc_branch(handle, inode, map->m_lblk, indirect_blks,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "997:  if (!err)",
          "999:       partial, indirect_blks, count);",
          "1000:  if (err)",
          "1001:   goto cleanup;",
          "1005:  ext4_update_inode_fsync_trans(handle, inode, 1);",
          "1006: got_it:",
          "1008:  if (count > blocks_to_boundary)",
          "1010:  err = count;",
          "",
          "[Removed Lines]",
          "998:   err = ext4_splice_branch(handle, inode, iblock,",
          "1003:  set_buffer_new(bh_result);",
          "1007:  map_bh(bh_result, inode->i_sb, le32_to_cpu(chain[depth-1].key));",
          "1009:   set_buffer_boundary(bh_result);",
          "",
          "[Added Lines]",
          "996:   err = ext4_splice_branch(handle, inode, map->m_lblk,",
          "1001:  map->m_flags |= EXT4_MAP_NEW;",
          "1005:  map->m_flags |= EXT4_MAP_MAPPED;",
          "1006:  map->m_pblk = le32_to_cpu(chain[depth-1].key);",
          "1007:  map->m_len = count;",
          "1009:   map->m_flags |= EXT4_MAP_BOUNDARY;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1016:   brelse(partial->bh);",
          "1017:   partial--;",
          "1018:  }",
          "1020: out:",
          "1021:  return err;",
          "1022: }",
          "",
          "[Removed Lines]",
          "1019:  BUFFER_TRACE(bh_result, \"returned\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1230: {",
          "1231:  int retval;",
          "1243:  down_read((&EXT4_I(inode)->i_data_sem));",
          "1244:  if (EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL) {",
          "1247:  } else {",
          "1250:  }",
          "1251:  up_read((&EXT4_I(inode)->i_data_sem));",
          "1254:   int ret = check_block_validity(inode, \"file system corruption\",",
          "1256:   if (ret != 0)",
          "1257:    return ret;",
          "1258:  }",
          "",
          "[Removed Lines]",
          "1227: int ext4_get_blocks(handle_t *handle, struct inode *inode, sector_t block,",
          "1228:       unsigned int max_blocks, struct buffer_head *bh,",
          "1229:       int flags)",
          "1233:  clear_buffer_mapped(bh);",
          "1234:  clear_buffer_unwritten(bh);",
          "1236:  ext_debug(\"ext4_get_blocks(): inode %lu, flag %d, max_blocks %u,\"",
          "1237:     \"logical block %lu\\n\", inode->i_ino, flags, max_blocks,",
          "1238:     (unsigned long)block);",
          "1245:   retval =  ext4_ext_get_blocks(handle, inode, block, max_blocks,",
          "1246:     bh, 0);",
          "1248:   retval = ext4_ind_get_blocks(handle, inode, block, max_blocks,",
          "1249:           bh, 0);",
          "1253:  if (retval > 0 && buffer_mapped(bh)) {",
          "1255:             block, bh->b_blocknr, retval);",
          "",
          "[Added Lines]",
          "1226: int ext4_map_blocks(handle_t *handle, struct inode *inode,",
          "1227:       struct ext4_map_blocks *map, int flags)",
          "1231:  map->m_flags = 0;",
          "1232:  ext_debug(\"ext4_map_blocks(): inode %lu, flag %d, max_blocks %u,\"",
          "1233:     \"logical block %lu\\n\", inode->i_ino, flags, map->m_len,",
          "1234:     (unsigned long) map->m_lblk);",
          "1241:   retval = ext4_ext_map_blocks(handle, inode, map, 0);",
          "1243:   retval = ext4_ind_map_blocks(handle, inode, map, 0);",
          "1247:  if (retval > 0 && map->m_flags & EXT4_MAP_MAPPED) {",
          "1249:      map->m_lblk, map->m_pblk, retval);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1272:   return retval;",
          "",
          "[Removed Lines]",
          "1271:  if (retval > 0 && buffer_mapped(bh))",
          "",
          "[Added Lines]",
          "1265:  if (retval > 0 && map->m_flags & EXT4_MAP_MAPPED)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1284:  clear_buffer_unwritten(bh);",
          "",
          "[Added Lines]",
          "1278:  map->m_flags &= ~EXT4_MAP_UNWRITTEN;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1306:  if (EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL) {",
          "1309:  } else {",
          "",
          "[Removed Lines]",
          "1307:   retval =  ext4_ext_get_blocks(handle, inode, block, max_blocks,",
          "1308:            bh, flags);",
          "1310:   retval = ext4_ind_get_blocks(handle, inode, block,",
          "1311:           max_blocks, bh, flags);",
          "1313:   if (retval > 0 && buffer_new(bh)) {",
          "",
          "[Added Lines]",
          "1301:   retval = ext4_ext_map_blocks(handle, inode, map, flags);",
          "1303:   retval = ext4_ind_map_blocks(handle, inode, map, flags);",
          "1305:   if (retval > 0 && map->m_flags & EXT4_MAP_NEW) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1333:   EXT4_I(inode)->i_delalloc_reserved_flag = 0;",
          "1335:  up_write((&EXT4_I(inode)->i_data_sem));",
          "1337:   int ret = check_block_validity(inode, \"file system \"",
          "1338:             \"corruption after allocation\",",
          "1340:   if (ret != 0)",
          "1341:    return ret;",
          "1342:  }",
          "1343:  return retval;",
          "1344: }",
          "1347: #define DIO_MAX_BLOCKS 4096",
          "",
          "[Removed Lines]",
          "1336:  if (retval > 0 && buffer_mapped(bh)) {",
          "1339:             block, bh->b_blocknr, retval);",
          "",
          "[Added Lines]",
          "1328:  if (retval > 0 && map->m_flags & EXT4_MAP_MAPPED) {",
          "1331:             map->m_lblk, map->m_pblk,",
          "1332:             retval);",
          "1339: int ext4_get_blocks(handle_t *handle, struct inode *inode, sector_t block,",
          "1340:       unsigned int max_blocks, struct buffer_head *bh,",
          "1341:       int flags)",
          "1342: {",
          "1343:  struct ext4_map_blocks map;",
          "1344:  int ret;",
          "1346:  map.m_lblk = block;",
          "1347:  map.m_len = max_blocks;",
          "1349:  ret = ext4_map_blocks(handle, inode, &map, flags);",
          "1350:  if (ret < 0)",
          "1351:   return ret;",
          "1353:  bh->b_blocknr = map.m_pblk;",
          "1354:  bh->b_size = inode->i_sb->s_blocksize * map.m_len;",
          "1355:  bh->b_bdev = inode->i_sb->s_bdev;",
          "1356:  bh->b_state = (bh->b_state & ~EXT4_MAP_FLAGS) | map.m_flags;",
          "1357:  return ret;",
          "1358: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0031462b5b392f90d17f1d75abb795883c44e969",
      "candidate_info": {
        "commit_hash": "0031462b5b392f90d17f1d75abb795883c44e969",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0031462b5b392f90d17f1d75abb795883c44e969",
        "files": [
          "fs/ext4/ext4.h",
          "fs/ext4/ext4_extents.h",
          "fs/ext4/extents.c",
          "fs/ext4/inode.c",
          "fs/ext4/migrate.c",
          "fs/ext4/move_extent.c"
        ],
        "message": "ext4: Split uninitialized extents for direct I/O\n\nWhen writing into an unitialized extent via direct I/O, and the direct\nI/O doesn't exactly cover the unitialized extent, split the extent\ninto uninitialized and initialized extents before submitting the I/O.\nThis avoids needing to deal with an ENOSPC error in the end_io\ncallback that gets used for direct I/O.\n\nWhen the IO is complete, the written extent will be marked as initialized.\n\nSinged-Off-By: Mingming Cao <cmm@us.ibm.com> \nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/ext4_extents.h||fs/ext4/ext4_extents.h",
          "fs/ext4/extents.c||fs/ext4/extents.c",
          "fs/ext4/inode.c||fs/ext4/inode.c",
          "fs/ext4/migrate.c||fs/ext4/migrate.c",
          "fs/ext4/move_extent.c||fs/ext4/move_extent.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/extents.c||fs/ext4/extents.c",
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ],
          "candidate": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/extents.c||fs/ext4/extents.c",
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:  int retval;",
          "129: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: typedef struct ext4_io_end {",
          "138: } ext4_io_end_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349: #define EXT4_GET_BLOCKS_UPDATE_RESERVE_SPACE 0x0008",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:  unitialized extents if not allocated, split the uninitialized",
          "362: #define EXT4_GET_BLOCKS_DIO   0x0010",
          "363: #define EXT4_GET_BLOCKS_CONVERT   0x0020",
          "364: #define EXT4_GET_BLOCKS_DIO_CREATE_EXT  (EXT4_GET_BLOCKS_DIO|\\",
          "365:       EXT4_GET_BLOCKS_CREATE_UNINIT_EXT)",
          "367: #define EXT4_GET_BLOCKS_DIO_CONVERT_EXT  (EXT4_GET_BLOCKS_CONVERT|\\",
          "368:       EXT4_GET_BLOCKS_DIO_CREATE_EXT)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1700: extern void ext4_ext_release(struct super_block *);",
          "1701: extern long ext4_fallocate(struct inode *inode, int mode, loff_t offset,",
          "1702:      loff_t len);",
          "1703: extern int ext4_get_blocks(handle_t *handle, struct inode *inode,",
          "1704:       sector_t block, unsigned int max_blocks,",
          "1705:       struct buffer_head *bh, int flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1721: extern int ext4_convert_unwritten_extents(struct inode *inode, loff_t offset,",
          "1722:      loff_t len);",
          "",
          "---------------"
        ],
        "fs/ext4/ext4_extents.h||fs/ext4/ext4_extents.h": [
          "File: fs/ext4/ext4_extents.h -> fs/ext4/ext4_extents.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   (le16_to_cpu(ext->ee_len) - EXT_INIT_MAX_LEN));",
          "221: }",
          "223: extern int ext4_ext_calc_metadata_amount(struct inode *inode, int blocks);",
          "224: extern ext4_fsblk_t ext_pblock(struct ext4_extent *ex);",
          "225: extern ext4_fsblk_t idx_pblock(struct ext4_extent_idx *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: static inline void ext4_ext_mark_initialized(struct ext4_extent *ext)",
          "224: {",
          "225:  ext->ee_len = cpu_to_le16(ext4_ext_get_actual_len(ext));",
          "226: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:      struct ext4_ext_path *path,",
          "236:      struct ext4_extent *);",
          "237: extern unsigned int ext4_ext_check_overlap(struct inode *, struct ext4_extent *, struct ext4_ext_path *);",
          "239: extern int ext4_ext_walk_space(struct inode *, ext4_lblk_t, ext4_lblk_t,",
          "240:        ext_prepare_callback, void *);",
          "241: extern struct ext4_ext_path *ext4_ext_find_extent(struct inode *, ext4_lblk_t,",
          "",
          "[Removed Lines]",
          "238: extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *);",
          "",
          "[Added Lines]",
          "243: extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);",
          "",
          "---------------"
        ],
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "727:     struct ext4_ext_path *curp,",
          "728:     int logical, ext4_fsblk_t ptr)",
          "729: {",
          "",
          "[Removed Lines]",
          "726: static int ext4_ext_insert_index(handle_t *handle, struct inode *inode,",
          "",
          "[Added Lines]",
          "726: int ext4_ext_insert_index(handle_t *handle, struct inode *inode,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1587: int ext4_ext_insert_extent(handle_t *handle, struct inode *inode,",
          "1588:     struct ext4_ext_path *path,",
          "1590: {",
          "1591:  struct ext4_extent_header *eh;",
          "1592:  struct ext4_extent *ex, *fex;",
          "",
          "[Removed Lines]",
          "1589:     struct ext4_extent *newext)",
          "",
          "[Added Lines]",
          "1589:     struct ext4_extent *newext, int flag)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1602:  BUG_ON(path[depth].p_hdr == NULL);",
          "1606:   ext_debug(\"append [%d]%d block to %d:[%d]%d (from %llu)\\n\",",
          "1607:     ext4_ext_is_uninitialized(newext),",
          "1608:     ext4_ext_get_actual_len(newext),",
          "",
          "[Removed Lines]",
          "1605:  if (ex && ext4_can_extents_be_merged(inode, ex, newext)) {",
          "",
          "[Added Lines]",
          "1605:  if (ex && (flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT)",
          "1606:   && ext4_can_extents_be_merged(inode, ex, newext)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1723: merge:",
          "",
          "[Removed Lines]",
          "1725:  ext4_ext_try_to_merge(inode, path, nearex);",
          "",
          "[Added Lines]",
          "1726:  if (flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT)",
          "1727:   ext4_ext_try_to_merge(inode, path, nearex);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2583:    ex3->ee_block = cpu_to_le32(iblock);",
          "2584:    ext4_ext_store_pblock(ex3, newblock);",
          "2585:    ex3->ee_len = cpu_to_le16(allocated);",
          "2587:    if (err == -ENOSPC) {",
          "2588:     err =  ext4_ext_zeroout(inode, &orig_ex);",
          "2589:     if (err)",
          "",
          "[Removed Lines]",
          "2586:    err = ext4_ext_insert_extent(handle, inode, path, ex3);",
          "",
          "[Added Lines]",
          "2587:    err = ext4_ext_insert_extent(handle, inode, path,",
          "2588:        ex3, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2639:   ext4_ext_store_pblock(ex3, newblock + max_blocks);",
          "2640:   ex3->ee_len = cpu_to_le16(allocated - max_blocks);",
          "2641:   ext4_ext_mark_uninitialized(ex3);",
          "2643:   if (err == -ENOSPC) {",
          "2644:    err =  ext4_ext_zeroout(inode, &orig_ex);",
          "2645:    if (err)",
          "",
          "[Removed Lines]",
          "2642:   err = ext4_ext_insert_extent(handle, inode, path, ex3);",
          "",
          "[Added Lines]",
          "2644:   err = ext4_ext_insert_extent(handle, inode, path, ex3, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2757:  err = ext4_ext_dirty(handle, inode, path + depth);",
          "2758:  goto out;",
          "2759: insert:",
          "2761:  if (err == -ENOSPC) {",
          "2762:   err =  ext4_ext_zeroout(inode, &orig_ex);",
          "2763:   if (err)",
          "",
          "[Removed Lines]",
          "2760:  err = ext4_ext_insert_extent(handle, inode, path, &newex);",
          "",
          "[Added Lines]",
          "2762:  err = ext4_ext_insert_extent(handle, inode, path, &newex, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2784:  return err;",
          "2785: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2809: static int ext4_split_unwritten_extents(handle_t *handle,",
          "2810:      struct inode *inode,",
          "2811:      struct ext4_ext_path *path,",
          "2812:      ext4_lblk_t iblock,",
          "2813:      unsigned int max_blocks,",
          "2814:      int flags)",
          "2815: {",
          "2816:  struct ext4_extent *ex, newex, orig_ex;",
          "2817:  struct ext4_extent *ex1 = NULL;",
          "2818:  struct ext4_extent *ex2 = NULL;",
          "2819:  struct ext4_extent *ex3 = NULL;",
          "2820:  struct ext4_extent_header *eh;",
          "2821:  ext4_lblk_t ee_block;",
          "2822:  unsigned int allocated, ee_len, depth;",
          "2823:  ext4_fsblk_t newblock;",
          "2824:  int err = 0;",
          "2825:  int ret = 0;",
          "2827:  ext_debug(\"ext4_split_unwritten_extents: inode %lu,\"",
          "2828:     \"iblock %llu, max_blocks %u\\n\", inode->i_ino,",
          "2829:     (unsigned long long)iblock, max_blocks);",
          "2830:  depth = ext_depth(inode);",
          "2831:  eh = path[depth].p_hdr;",
          "2832:  ex = path[depth].p_ext;",
          "2833:  ee_block = le32_to_cpu(ex->ee_block);",
          "2834:  ee_len = ext4_ext_get_actual_len(ex);",
          "2835:  allocated = ee_len - (iblock - ee_block);",
          "2836:  newblock = iblock - ee_block + ext_pblock(ex);",
          "2837:  ex2 = ex;",
          "2838:  orig_ex.ee_block = ex->ee_block;",
          "2839:  orig_ex.ee_len   = cpu_to_le16(ee_len);",
          "2840:  ext4_ext_store_pblock(&orig_ex, ext_pblock(ex));",
          "2847:   if (allocated <= max_blocks)",
          "2848:   return ret;",
          "2850:  err = ext4_ext_get_access(handle, inode, path + depth);",
          "2851:  if (err)",
          "2852:   goto out;",
          "2854:  if (iblock > ee_block) {",
          "2855:   ex1 = ex;",
          "2856:   ex1->ee_len = cpu_to_le16(iblock - ee_block);",
          "2857:   ext4_ext_mark_uninitialized(ex1);",
          "2858:   ex2 = &newex;",
          "2859:  }",
          "2865:  if (!ex1 && allocated > max_blocks)",
          "2866:   ex2->ee_len = cpu_to_le16(max_blocks);",
          "2868:  if (allocated > max_blocks) {",
          "2869:   unsigned int newdepth;",
          "2870:   ex3 = &newex;",
          "2871:   ex3->ee_block = cpu_to_le32(iblock + max_blocks);",
          "2872:   ext4_ext_store_pblock(ex3, newblock + max_blocks);",
          "2873:   ex3->ee_len = cpu_to_le16(allocated - max_blocks);",
          "2874:   ext4_ext_mark_uninitialized(ex3);",
          "2875:   err = ext4_ext_insert_extent(handle, inode, path, ex3, flags);",
          "2876:   if (err == -ENOSPC) {",
          "2877:    err =  ext4_ext_zeroout(inode, &orig_ex);",
          "2878:    if (err)",
          "2879:     goto fix_extent_len;",
          "2881:    ex->ee_block = orig_ex.ee_block;",
          "2882:    ex->ee_len   = orig_ex.ee_len;",
          "2883:    ext4_ext_store_pblock(ex, ext_pblock(&orig_ex));",
          "2884:    ext4_ext_dirty(handle, inode, path + depth);",
          "2887:    return allocated;",
          "2889:   } else if (err)",
          "2890:    goto fix_extent_len;",
          "2895:   newdepth = ext_depth(inode);",
          "2900:   orig_ex.ee_len = cpu_to_le16(ee_len -",
          "2901:       ext4_ext_get_actual_len(ex3));",
          "2902:   depth = newdepth;",
          "2903:   ext4_ext_drop_refs(path);",
          "2904:   path = ext4_ext_find_extent(inode, iblock, path);",
          "2905:   if (IS_ERR(path)) {",
          "2906:    err = PTR_ERR(path);",
          "2907:    goto out;",
          "2908:   }",
          "2909:   eh = path[depth].p_hdr;",
          "2910:   ex = path[depth].p_ext;",
          "2911:   if (ex2 != &newex)",
          "2912:    ex2 = ex;",
          "2914:   err = ext4_ext_get_access(handle, inode, path + depth);",
          "2915:   if (err)",
          "2916:    goto out;",
          "2918:   allocated = max_blocks;",
          "2919:  }",
          "2925:  if (ex1 && ex1 != ex) {",
          "2926:   ex1 = ex;",
          "2927:   ex1->ee_len = cpu_to_le16(iblock - ee_block);",
          "2928:   ext4_ext_mark_uninitialized(ex1);",
          "2929:   ex2 = &newex;",
          "2930:  }",
          "2935:  ex2->ee_block = cpu_to_le32(iblock);",
          "2936:  ext4_ext_store_pblock(ex2, newblock);",
          "2937:  ex2->ee_len = cpu_to_le16(allocated);",
          "2938:  ext4_ext_mark_uninitialized(ex2);",
          "2939:  if (ex2 != ex)",
          "2940:   goto insert;",
          "2942:  err = ext4_ext_dirty(handle, inode, path + depth);",
          "2943:  ext_debug(\"out here\\n\");",
          "2944:  goto out;",
          "2945: insert:",
          "2946:  err = ext4_ext_insert_extent(handle, inode, path, &newex, flags);",
          "2947:  if (err == -ENOSPC) {",
          "2948:   err =  ext4_ext_zeroout(inode, &orig_ex);",
          "2949:   if (err)",
          "2950:    goto fix_extent_len;",
          "2952:   ex->ee_block = orig_ex.ee_block;",
          "2953:   ex->ee_len   = orig_ex.ee_len;",
          "2954:   ext4_ext_store_pblock(ex, ext_pblock(&orig_ex));",
          "2955:   ext4_ext_dirty(handle, inode, path + depth);",
          "2957:   return allocated;",
          "2958:  } else if (err)",
          "2959:   goto fix_extent_len;",
          "2960: out:",
          "2961:  ext4_ext_show_leaf(inode, path);",
          "2962:  return err ? err : allocated;",
          "2964: fix_extent_len:",
          "2965:  ex->ee_block = orig_ex.ee_block;",
          "2966:  ex->ee_len   = orig_ex.ee_len;",
          "2967:  ext4_ext_store_pblock(ex, ext_pblock(&orig_ex));",
          "2968:  ext4_ext_mark_uninitialized(ex);",
          "2969:  ext4_ext_dirty(handle, inode, path + depth);",
          "2970:  return err;",
          "2971: }",
          "2972: static int ext4_convert_unwritten_extents_dio(handle_t *handle,",
          "2973:            struct inode *inode,",
          "2974:            struct ext4_ext_path *path)",
          "2975: {",
          "2976:  struct ext4_extent *ex;",
          "2977:  struct ext4_extent_header *eh;",
          "2978:  int depth;",
          "2979:  int err = 0;",
          "2980:  int ret = 0;",
          "2982:  depth = ext_depth(inode);",
          "2983:  eh = path[depth].p_hdr;",
          "2984:  ex = path[depth].p_ext;",
          "2986:  err = ext4_ext_get_access(handle, inode, path + depth);",
          "2987:  if (err)",
          "2988:   goto out;",
          "2990:  ext4_ext_mark_initialized(ex);",
          "2996:  if (ex > EXT_FIRST_EXTENT(eh)) {",
          "3001:   ret = ext4_ext_try_to_merge(inode, path, ex - 1);",
          "3002:   if (ret) {",
          "3003:    err = ext4_ext_correct_indexes(handle, inode, path);",
          "3004:    if (err)",
          "3005:     goto out;",
          "3006:    depth = ext_depth(inode);",
          "3007:    ex--;",
          "3008:   }",
          "3009:  }",
          "3013:  ret = ext4_ext_try_to_merge(inode, path, ex);",
          "3014:  if (ret) {",
          "3015:   err = ext4_ext_correct_indexes(handle, inode, path);",
          "3016:   if (err)",
          "3017:    goto out;",
          "3018:   depth = ext_depth(inode);",
          "3019:  }",
          "3021:  err = ext4_ext_dirty(handle, inode, path + depth);",
          "3022: out:",
          "3023:  ext4_ext_show_leaf(inode, path);",
          "3024:  return err;",
          "3025: }",
          "3027: static int",
          "3028: ext4_ext_handle_uninitialized_extents(handle_t *handle, struct inode *inode,",
          "3029:    ext4_lblk_t iblock, unsigned int max_blocks,",
          "3030:    struct ext4_ext_path *path, int flags,",
          "3031:    unsigned int allocated, struct buffer_head *bh_result,",
          "3032:    ext4_fsblk_t newblock)",
          "3033: {",
          "3034:  int ret = 0;",
          "3035:  int err = 0;",
          "3037:  ext_debug(\"ext4_ext_handle_uninitialized_extents: inode %lu, logical\"",
          "3038:     \"block %llu, max_blocks %u, flags %d, allocated %u\",",
          "3039:     inode->i_ino, (unsigned long long)iblock, max_blocks,",
          "3040:     flags, allocated);",
          "3041:  ext4_ext_show_leaf(inode, path);",
          "3044:  if (flags == EXT4_GET_BLOCKS_DIO_CREATE_EXT) {",
          "3045:   ret = ext4_split_unwritten_extents(handle,",
          "3046:       inode, path, iblock,",
          "3047:       max_blocks, flags);",
          "3048:   goto out;",
          "3049:  }",
          "3051:  if (flags == EXT4_GET_BLOCKS_DIO_CONVERT_EXT) {",
          "3052:   ret = ext4_convert_unwritten_extents_dio(handle, inode,",
          "3053:        path);",
          "3054:   goto out2;",
          "3055:  }",
          "3061:  if (flags & EXT4_GET_BLOCKS_UNINIT_EXT)",
          "3062:   goto map_out;",
          "3065:  if ((flags & EXT4_GET_BLOCKS_CREATE) == 0) {",
          "3073:   set_buffer_unwritten(bh_result);",
          "3074:   goto out1;",
          "3075:  }",
          "3078:  ret = ext4_ext_convert_to_initialized(handle, inode,",
          "3079:       path, iblock,",
          "3080:       max_blocks);",
          "3081: out:",
          "3082:  if (ret <= 0) {",
          "3083:   err = ret;",
          "3084:   goto out2;",
          "3085:  } else",
          "3086:   allocated = ret;",
          "3087:  set_buffer_new(bh_result);",
          "3088: map_out:",
          "3089:  set_buffer_mapped(bh_result);",
          "3090: out1:",
          "3091:  if (allocated > max_blocks)",
          "3092:   allocated = max_blocks;",
          "3093:  ext4_ext_show_leaf(inode, path);",
          "3094:  bh_result->b_bdev = inode->i_sb->s_bdev;",
          "3095:  bh_result->b_blocknr = newblock;",
          "3096: out2:",
          "3097:  if (path) {",
          "3098:   ext4_ext_drop_refs(path);",
          "3099:   kfree(path);",
          "3100:  }",
          "3101:  return err ? err : allocated;",
          "3102: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2889:        EXT4_EXT_CACHE_EXTENT);",
          "2890:     goto out;",
          "2891:    }",
          "2919:   }",
          "2920:  }",
          "",
          "[Removed Lines]",
          "2892:    if (flags & EXT4_GET_BLOCKS_UNINIT_EXT)",
          "2893:     goto out;",
          "2894:    if ((flags & EXT4_GET_BLOCKS_CREATE) == 0) {",
          "2895:     if (allocated > max_blocks)",
          "2896:      allocated = max_blocks;",
          "2904:     set_buffer_unwritten(bh_result);",
          "2905:     bh_result->b_bdev = inode->i_sb->s_bdev;",
          "2906:     bh_result->b_blocknr = newblock;",
          "2907:     goto out2;",
          "2908:    }",
          "2910:    ret = ext4_ext_convert_to_initialized(handle, inode,",
          "2911:         path, iblock,",
          "2912:         max_blocks);",
          "2913:    if (ret <= 0) {",
          "2914:     err = ret;",
          "2915:     goto out2;",
          "2916:    } else",
          "2917:     allocated = ret;",
          "2918:    goto outnew;",
          "",
          "[Added Lines]",
          "3208:    ret = ext4_ext_handle_uninitialized_extents(handle,",
          "3209:      inode, iblock, max_blocks, path,",
          "3210:      flags, allocated, bh_result, newblock);",
          "3211:    return ret;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2988:  newex.ee_len = cpu_to_le16(ar.len);",
          "2990:   ext4_ext_mark_uninitialized(&newex);",
          "2992:  if (err) {",
          "",
          "[Removed Lines]",
          "2991:  err = ext4_ext_insert_extent(handle, inode, path, &newex);",
          "",
          "[Added Lines]",
          "3284:  err = ext4_ext_insert_extent(handle, inode, path, &newex, flags);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3003:  newblock = ext_pblock(&newex);",
          "3004:  allocated = ext4_ext_get_actual_len(&newex);",
          "3006:  set_buffer_new(bh_result);",
          "",
          "[Removed Lines]",
          "3005: outnew:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3200:  return ret > 0 ? ret2 : ret;",
          "3201: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3504: int ext4_convert_unwritten_extents(struct inode *inode, loff_t offset,",
          "3505:         loff_t len)",
          "3506: {",
          "3507:  handle_t *handle;",
          "3508:  ext4_lblk_t block;",
          "3509:  unsigned int max_blocks;",
          "3510:  int ret = 0;",
          "3511:  int ret2 = 0;",
          "3512:  struct buffer_head map_bh;",
          "3513:  unsigned int credits, blkbits = inode->i_blkbits;",
          "3515:  block = offset >> blkbits;",
          "3520:  max_blocks = (EXT4_BLOCK_ALIGN(len + offset, blkbits) >> blkbits)",
          "3521:        - block;",
          "3525:  credits = ext4_chunk_trans_blocks(inode, max_blocks);",
          "3526:  while (ret >= 0 && ret < max_blocks) {",
          "3527:   block = block + ret;",
          "3528:   max_blocks = max_blocks - ret;",
          "3529:   handle = ext4_journal_start(inode, credits);",
          "3530:   if (IS_ERR(handle)) {",
          "3531:    ret = PTR_ERR(handle);",
          "3532:    break;",
          "3533:   }",
          "3534:   map_bh.b_state = 0;",
          "3535:   ret = ext4_get_blocks(handle, inode, block,",
          "3536:           max_blocks, &map_bh,",
          "3537:           EXT4_GET_BLOCKS_DIO_CONVERT_EXT);",
          "3538:   if (ret <= 0) {",
          "3539:    WARN_ON(ret <= 0);",
          "3540:    printk(KERN_ERR \"%s: ext4_ext_get_blocks \"",
          "3541:         \"returned error inode#%lu, block=%u, \"",
          "3542:         \"max_blocks=%u\", __func__,",
          "3543:         inode->i_ino, block, max_blocks);",
          "3544:   }",
          "3545:   ext4_mark_inode_dirty(handle, inode);",
          "3546:   ret2 = ext4_journal_stop(handle);",
          "3547:   if (ret <= 0 || ret2 )",
          "3548:    break;",
          "3549:  }",
          "3550:  return ret > 0 ? ret2 : ret;",
          "3551: }",
          "",
          "---------------"
        ],
        "fs/ext4/inode.c||fs/ext4/inode.c": [
          "File: fs/ext4/inode.c -> fs/ext4/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1233:  clear_buffer_mapped(bh);",
          "1234:  clear_buffer_unwritten(bh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1236:  ext_debug(\"ext4_get_blocks(): inode %lu, flag %d, max_blocks %u,\"",
          "1237:     \"logical block %lu\\n\", inode->i_ino, flags, max_blocks,",
          "1238:     (unsigned long)block);",
          "",
          "---------------"
        ],
        "fs/ext4/migrate.c||fs/ext4/migrate.c": [
          "File: fs/ext4/migrate.c -> fs/ext4/migrate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     goto err_out;",
          "76:   }",
          "77:  }",
          "79: err_out:",
          "80:  if (path) {",
          "81:   ext4_ext_drop_refs(path);",
          "",
          "[Removed Lines]",
          "78:  retval = ext4_ext_insert_extent(handle, inode, path, &newext);",
          "",
          "[Added Lines]",
          "78:  retval = ext4_ext_insert_extent(handle, inode, path, &newext, 0);",
          "",
          "---------------"
        ],
        "fs/ext4/move_extent.c||fs/ext4/move_extent.c": [
          "File: fs/ext4/move_extent.c -> fs/ext4/move_extent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:    goto out;",
          "324:   if (ext4_ext_insert_extent(handle, orig_inode,",
          "326:    goto out;",
          "327:  }",
          "",
          "[Removed Lines]",
          "325:      orig_path, new_ext))",
          "",
          "[Added Lines]",
          "325:      orig_path, new_ext, 0))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:    goto out;",
          "335:   if (ext4_ext_insert_extent(handle, orig_inode,",
          "337:    goto out;",
          "338:  }",
          "339: out:",
          "",
          "[Removed Lines]",
          "336:         orig_path, end_ext))",
          "",
          "[Added Lines]",
          "336:         orig_path, end_ext, 0))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c21770573319922e3f3fcb331cfaa290c49f1c81",
      "candidate_info": {
        "commit_hash": "c21770573319922e3f3fcb331cfaa290c49f1c81",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c21770573319922e3f3fcb331cfaa290c49f1c81",
        "files": [
          "fs/ext4/dir.c",
          "fs/ext4/ext4.h",
          "fs/ext4/extents.c",
          "fs/ext4/inode.c"
        ],
        "message": "ext4: Define a new set of flags for ext4_get_blocks()\n\nThe functions ext4_get_blocks(), ext4_ext_get_blocks(), and\next4_ind_get_blocks() used an ad-hoc set of integer variables used as\nboolean flags passed in as arguments.  Use a single flags parameter\nand a setandard set of bitfield flags instead.  This saves space on\nthe call stack, and it also makes the code a bit more understandable.\n\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/dir.c||fs/ext4/dir.c",
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/extents.c||fs/ext4/extents.c",
          "fs/ext4/inode.c||fs/ext4/inode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/extents.c||fs/ext4/extents.c",
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ],
          "candidate": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/extents.c||fs/ext4/extents.c",
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/dir.c||fs/ext4/dir.c": [
          "File: fs/ext4/dir.c -> fs/ext4/dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:   struct buffer_head *bh = NULL;",
          "133:   map_bh.b_state = 0;",
          "135:   if (err > 0) {",
          "136:    pgoff_t index = map_bh.b_blocknr >>",
          "137:      (PAGE_CACHE_SHIFT - inode->i_blkbits);",
          "",
          "[Removed Lines]",
          "134:   err = ext4_get_blocks(NULL, inode, blk, 1, &map_bh, 0, 0, 0);",
          "",
          "[Added Lines]",
          "134:   err = ext4_get_blocks(NULL, inode, blk, 1, &map_bh, 0);",
          "",
          "---------------"
        ],
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: };",
          "",
          "[Removed Lines]",
          "320: #define EXT4_CREATE_UNINITIALIZED_EXT  2",
          "",
          "[Added Lines]",
          "321: #define EXT4_GET_BLOCKS_CREATE   1",
          "323: #define EXT4_GET_BLOCKS_UNINIT_EXT  2",
          "324: #define EXT4_GET_BLOCKS_CREATE_UNINIT_EXT (EXT4_GET_BLOCKS_UNINIT_EXT|\\",
          "325:        EXT4_GET_BLOCKS_CREATE)",
          "327: #define EXT4_GET_BLOCKS_EXTEND_DISKSIZE  4",
          "330: #define EXT4_GET_BLOCKS_DELALLOC_RESERVE 8",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1610:            int chunk);",
          "1611: extern int ext4_ext_get_blocks(handle_t *handle, struct inode *inode,",
          "1612:           ext4_lblk_t iblock, unsigned int max_blocks,",
          "1615: extern void ext4_ext_truncate(struct inode *);",
          "1616: extern void ext4_ext_init(struct super_block *);",
          "1617: extern void ext4_ext_release(struct super_block *);",
          "",
          "[Removed Lines]",
          "1613:           struct buffer_head *bh_result,",
          "1614:           int create, int extend_disksize);",
          "",
          "[Added Lines]",
          "1623:           struct buffer_head *bh_result, int flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1619:      loff_t len);",
          "1620: extern int ext4_get_blocks(handle_t *handle, struct inode *inode,",
          "1621:       sector_t block, unsigned int max_blocks,",
          "1624: extern int ext4_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,",
          "1625:    __u64 start, __u64 len);",
          "",
          "[Removed Lines]",
          "1622:       struct buffer_head *bh, int create,",
          "1623:       int extend_disksize, int flag);",
          "",
          "[Added Lines]",
          "1631:       struct buffer_head *bh, int flags);",
          "",
          "---------------"
        ],
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2784: int ext4_ext_get_blocks(handle_t *handle, struct inode *inode,",
          "2785:    ext4_lblk_t iblock,",
          "2786:    unsigned int max_blocks, struct buffer_head *bh_result,",
          "2788: {",
          "2789:  struct ext4_ext_path *path = NULL;",
          "2790:  struct ext4_extent_header *eh;",
          "",
          "[Removed Lines]",
          "2787:    int create, int extend_disksize)",
          "",
          "[Added Lines]",
          "2787:    int flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2803:  cache_type = ext4_ext_in_cache(inode, iblock, &newex);",
          "2804:  if (cache_type) {",
          "2805:   if (cache_type == EXT4_EXT_CACHE_GAP) {",
          "",
          "[Removed Lines]",
          "2806:    if (!create) {",
          "",
          "[Added Lines]",
          "2806:    if ((flags & EXT4_GET_BLOCKS_CREATE) == 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2869:        EXT4_EXT_CACHE_EXTENT);",
          "2870:     goto out;",
          "2871:    }",
          "2873:     goto out;",
          "2875:     if (allocated > max_blocks)",
          "2876:      allocated = max_blocks;",
          "",
          "[Removed Lines]",
          "2872:    if (create == EXT4_CREATE_UNINITIALIZED_EXT)",
          "2874:    if (!create) {",
          "",
          "[Added Lines]",
          "2872:    if (flags & EXT4_GET_BLOCKS_UNINIT_EXT)",
          "2874:    if ((flags & EXT4_GET_BLOCKS_CREATE) == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2906:  if (!create) {",
          "",
          "[Added Lines]",
          "2906:  if ((flags & EXT4_GET_BLOCKS_CREATE) == 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2934:  if (max_blocks > EXT_INIT_MAX_LEN &&",
          "2936:   max_blocks = EXT_INIT_MAX_LEN;",
          "2937:  else if (max_blocks > EXT_UNINIT_MAX_LEN &&",
          "2939:   max_blocks = EXT_UNINIT_MAX_LEN;",
          "",
          "[Removed Lines]",
          "2935:      create != EXT4_CREATE_UNINITIALIZED_EXT)",
          "2938:    create == EXT4_CREATE_UNINITIALIZED_EXT)",
          "",
          "[Added Lines]",
          "2935:      !(flags & EXT4_GET_BLOCKS_UNINIT_EXT))",
          "2938:    (flags & EXT4_GET_BLOCKS_UNINIT_EXT))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2983:  newblock = ext_pblock(&newex);",
          "2984:  allocated = ext4_ext_get_actual_len(&newex);",
          "2985: outnew:",
          "2987:   disksize = ((loff_t) iblock + ar.len) << inode->i_blkbits;",
          "2988:   if (disksize > i_size_read(inode))",
          "2989:    disksize = i_size_read(inode);",
          "",
          "[Removed Lines]",
          "2986:  if (extend_disksize) {",
          "",
          "[Added Lines]",
          "2986:  if (flags & EXT4_GET_BLOCKS_EXTEND_DISKSIZE) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2994:  set_buffer_new(bh_result);",
          "2998:   ext4_ext_put_in_cache(inode, iblock, allocated, newblock,",
          "2999:       EXT4_EXT_CACHE_EXTENT);",
          "3000: out:",
          "",
          "[Removed Lines]",
          "2997:  if (create != EXT4_CREATE_UNINITIALIZED_EXT)",
          "",
          "[Added Lines]",
          "2997:  if ((flags & EXT4_GET_BLOCKS_UNINIT_EXT) == 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3153:   map_bh.b_state = 0;",
          "3154:   ret = ext4_get_blocks(handle, inode, block,",
          "3155:           max_blocks, &map_bh,",
          "3157:   if (ret <= 0) {",
          "3158: #ifdef EXT4FS_DEBUG",
          "3159:    WARN_ON(ret <= 0);",
          "",
          "[Removed Lines]",
          "3156:           EXT4_CREATE_UNINITIALIZED_EXT, 0, 0);",
          "",
          "[Added Lines]",
          "3156:           EXT4_GET_BLOCKS_CREATE_UNINIT_EXT);",
          "",
          "---------------"
        ],
        "fs/ext4/inode.c||fs/ext4/inode.c": [
          "File: fs/ext4/inode.c -> fs/ext4/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "917: static int ext4_ind_get_blocks(handle_t *handle, struct inode *inode,",
          "918:       ext4_lblk_t iblock, unsigned int maxblocks,",
          "919:       struct buffer_head *bh_result,",
          "921: {",
          "922:  int err = -EIO;",
          "923:  ext4_lblk_t offsets[4];",
          "",
          "[Removed Lines]",
          "920:       int create, int extend_disksize)",
          "",
          "[Added Lines]",
          "920:       int flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "936:  J_ASSERT(!(EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL));",
          "938:  depth = ext4_block_to_path(inode, iblock, offsets,",
          "939:      &blocks_to_boundary);",
          "",
          "[Removed Lines]",
          "937:  J_ASSERT(handle != NULL || create == 0);",
          "",
          "[Added Lines]",
          "937:  J_ASSERT(handle != NULL || (flags & EXT4_GET_BLOCKS_CREATE) == 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "963:  }",
          "967:   goto cleanup;",
          "",
          "[Removed Lines]",
          "966:  if (!create || err == -EIO)",
          "",
          "[Added Lines]",
          "966:  if ((flags & EXT4_GET_BLOCKS_CREATE) == 0 || err == -EIO)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1006:   disksize = ((loff_t) iblock + count) << inode->i_blkbits;",
          "1007:   if (disksize > i_size_read(inode))",
          "1008:    disksize = i_size_read(inode);",
          "",
          "[Removed Lines]",
          "1005:  if (!err && extend_disksize) {",
          "",
          "[Added Lines]",
          "1005:  if (!err && (flags & EXT4_GET_BLOCKS_EXTEND_DISKSIZE)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1145: int ext4_get_blocks(handle_t *handle, struct inode *inode, sector_t block,",
          "1146:       unsigned int max_blocks, struct buffer_head *bh,",
          "1148: {",
          "1149:  int retval;",
          "",
          "[Removed Lines]",
          "1147:       int create, int extend_disksize, int flag)",
          "",
          "[Added Lines]",
          "1147:       int flags)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1158:  down_read((&EXT4_I(inode)->i_data_sem));",
          "1159:  if (EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL) {",
          "1160:   retval =  ext4_ext_get_blocks(handle, inode, block, max_blocks,",
          "1162:  } else {",
          "1163:   retval = ext4_ind_get_blocks(handle, inode, block, max_blocks,",
          "1165:  }",
          "1166:  up_read((&EXT4_I(inode)->i_data_sem));",
          "1170:   return retval;",
          "",
          "[Removed Lines]",
          "1161:     bh, 0, 0);",
          "1164:           bh, 0, 0);",
          "1169:  if (!create)",
          "",
          "[Added Lines]",
          "1161:     bh, 0);",
          "1164:           bh, 0);",
          "1169:  if ((flags & EXT4_GET_BLOCKS_CREATE) == 0)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1209:   EXT4_I(inode)->i_delalloc_reserved_flag = 1;",
          "",
          "[Removed Lines]",
          "1208:  if (flag)",
          "",
          "[Added Lines]",
          "1208:  if (flags & EXT4_GET_BLOCKS_DELALLOC_RESERVE)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1214:  if (EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL) {",
          "1215:   retval =  ext4_ext_get_blocks(handle, inode, block, max_blocks,",
          "1217:  } else {",
          "1218:   retval = ext4_ind_get_blocks(handle, inode, block,",
          "1221:   if (retval > 0 && buffer_new(bh)) {",
          "",
          "[Removed Lines]",
          "1216:     bh, create, extend_disksize);",
          "1219:     max_blocks, bh, create, extend_disksize);",
          "",
          "[Added Lines]",
          "1216:            bh, flags);",
          "1219:           max_blocks, bh, flags);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1229:   }",
          "1230:  }",
          "1233:   EXT4_I(inode)->i_delalloc_reserved_flag = 0;",
          "",
          "[Removed Lines]",
          "1232:  if (flag) {",
          "",
          "[Added Lines]",
          "1232:  if (flags & EXT4_GET_BLOCKS_DELALLOC_RESERVE) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1269:  }",
          "1271:  ret = ext4_get_blocks(handle, inode, iblock, max_blocks, bh_result,",
          "1273:  if (ret > 0) {",
          "1274:   bh_result->b_size = (ret << inode->i_blkbits);",
          "1275:   ret = 0;",
          "",
          "[Removed Lines]",
          "1272:          create, 0, 0);",
          "",
          "[Added Lines]",
          "1272:          create ? EXT4_GET_BLOCKS_CREATE : 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1288: {",
          "1289:  struct buffer_head dummy;",
          "1290:  int fatal = 0, err;",
          "1292:  J_ASSERT(handle != NULL || create == 0);",
          "1294:  dummy.b_state = 0;",
          "1295:  dummy.b_blocknr = -1000;",
          "1296:  buffer_trace_init(&dummy.b_history);",
          "1302:  if (err > 0) {",
          "1303:   if (err > 1)",
          "",
          "[Removed Lines]",
          "1297:  err = ext4_get_blocks(handle, inode, block, 1, &dummy, create, 1, 0);",
          "",
          "[Added Lines]",
          "1291:  int flags = EXT4_GET_BLOCKS_EXTEND_DISKSIZE;",
          "1298:  if (create)",
          "1299:   flags |= EXT4_GET_BLOCKS_CREATE;",
          "1300:  err = ext4_get_blocks(handle, inode, block, 1, &dummy, flags);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1997:  return;",
          "1998: }",
          "2001: static int ext4_da_get_block_write(struct inode *inode, sector_t iblock,",
          "2002:        struct buffer_head *bh_result)",
          "2003: {",
          "",
          "[Removed Lines]",
          "2000: #define  EXT4_DELALLOC_RSVED 1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2009:  handle = ext4_journal_current_handle();",
          "2010:  BUG_ON(!handle);",
          "2011:  ret = ext4_get_blocks(handle, inode, iblock, max_blocks,",
          "2013:  if (ret <= 0)",
          "2014:   return ret;",
          "",
          "[Removed Lines]",
          "2012:          bh_result, 1, 0, EXT4_DELALLOC_RSVED);",
          "",
          "[Added Lines]",
          "2014:          bh_result, EXT4_GET_BLOCKS_CREATE|",
          "2015:          EXT4_GET_BLOCKS_DELALLOC_RESERVE);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2366:  if ((ret == 0) && !buffer_delay(bh_result)) {",
          "",
          "[Removed Lines]",
          "2365:  ret = ext4_get_blocks(NULL, inode, iblock, 1,  bh_result, 0, 0, 0);",
          "",
          "[Added Lines]",
          "2369:  ret = ext4_get_blocks(NULL, inode, iblock, 1,  bh_result, 0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2411:  if (ret > 0) {",
          "2412:   bh_result->b_size = (ret << inode->i_blkbits);",
          "2413:   ret = 0;",
          "",
          "[Removed Lines]",
          "2409:  ret = ext4_get_blocks(NULL, inode, iblock, max_blocks,",
          "2410:          bh_result, 0, 0, 0);",
          "",
          "[Added Lines]",
          "2413:  ret = ext4_get_blocks(NULL, inode, iblock, max_blocks, bh_result, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd8c37eccdda21153298997417144b38b1623196",
      "candidate_info": {
        "commit_hash": "fd8c37eccdda21153298997417144b38b1623196",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fd8c37eccdda21153298997417144b38b1623196",
        "files": [
          "fs/ext4/ext4.h",
          "fs/ext4/mballoc.c",
          "fs/ext4/super.c"
        ],
        "message": "ext4: Simplify the usage of clear_opt() and set_opt() macros\n\nChange clear_opt() and set_opt() to take a superblock pointer instead\nof a pointer to EXT4_SB(sb)->s_mount_opt.  This makes it easier for us\nto support a second mount option field.\n\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/mballoc.c||fs/ext4/mballoc.c",
          "fs/ext4/super.c||fs/ext4/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/super.c||fs/ext4/super.c"
          ],
          "candidate": [
            "fs/ext4/ext4.h||fs/ext4/ext4.h",
            "fs/ext4/super.c||fs/ext4/super.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "922: #define test_opt(sb, opt)  (EXT4_SB(sb)->s_mount_opt & \\",
          "923:       EXT4_MOUNT_##opt)",
          "",
          "[Removed Lines]",
          "920: #define clear_opt(o, opt)  o &= ~EXT4_MOUNT_##opt",
          "921: #define set_opt(o, opt)   o |= EXT4_MOUNT_##opt",
          "",
          "[Added Lines]",
          "920: #define clear_opt(sb, opt)  EXT4_SB(sb)->s_mount_opt &= \\",
          "921:       ~EXT4_MOUNT_##opt",
          "922: #define set_opt(sb, opt)  EXT4_SB(sb)->s_mount_opt |= \\",
          "923:       EXT4_MOUNT_##opt",
          "",
          "---------------"
        ],
        "fs/ext4/mballoc.c||fs/ext4/mballoc.c": [
          "File: fs/ext4/mballoc.c -> fs/ext4/mballoc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2617:  ret = sb_issue_discard(sb, discard_block, count, GFP_NOFS, 0);",
          "2618:  if (ret == -EOPNOTSUPP) {",
          "2619:   ext4_warning(sb, \"discard not supported, disabling\");",
          "2621:  }",
          "2622:  return ret;",
          "2623: }",
          "",
          "[Removed Lines]",
          "2620:   clear_opt(EXT4_SB(sb)->s_mount_opt, DISCARD);",
          "",
          "[Added Lines]",
          "2620:   clear_opt(sb, DISCARD);",
          "",
          "---------------"
        ],
        "fs/ext4/super.c||fs/ext4/super.c": [
          "File: fs/ext4/super.c -> fs/ext4/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1386:   sbi->s_qf_names[qtype] = NULL;",
          "1387:   return 0;",
          "1388:  }",
          "1390:  return 1;",
          "1391: }",
          "",
          "[Removed Lines]",
          "1389:  set_opt(sbi->s_mount_opt, QUOTA);",
          "",
          "[Added Lines]",
          "1389:  set_opt(sb, QUOTA);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1441:   switch (token) {",
          "1442:   case Opt_bsd_df:",
          "1443:    ext4_msg(sb, KERN_WARNING, deprecated_msg, p, \"2.6.38\");",
          "1445:    break;",
          "1446:   case Opt_minix_df:",
          "1447:    ext4_msg(sb, KERN_WARNING, deprecated_msg, p, \"2.6.38\");",
          "1450:    break;",
          "1451:   case Opt_grpid:",
          "1452:    ext4_msg(sb, KERN_WARNING, deprecated_msg, p, \"2.6.38\");",
          "1455:    break;",
          "1456:   case Opt_nogrpid:",
          "1457:    ext4_msg(sb, KERN_WARNING, deprecated_msg, p, \"2.6.38\");",
          "1460:    break;",
          "1461:   case Opt_resuid:",
          "",
          "[Removed Lines]",
          "1444:    clear_opt(sbi->s_mount_opt, MINIX_DF);",
          "1448:    set_opt(sbi->s_mount_opt, MINIX_DF);",
          "1453:    set_opt(sbi->s_mount_opt, GRPID);",
          "1458:    clear_opt(sbi->s_mount_opt, GRPID);",
          "",
          "[Added Lines]",
          "1444:    clear_opt(sb, MINIX_DF);",
          "1448:    set_opt(sb, MINIX_DF);",
          "1453:    set_opt(sb, GRPID);",
          "1458:    clear_opt(sb, GRPID);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1474:    break;",
          "1475:   case Opt_err_panic:",
          "1479:    break;",
          "1480:   case Opt_err_ro:",
          "1484:    break;",
          "1485:   case Opt_err_cont:",
          "1489:    break;",
          "1490:   case Opt_nouid32:",
          "1492:    break;",
          "1493:   case Opt_debug:",
          "1495:    break;",
          "1496:   case Opt_oldalloc:",
          "1498:    break;",
          "1499:   case Opt_orlov:",
          "1501:    break;",
          "1502: #ifdef CONFIG_EXT4_FS_XATTR",
          "1503:   case Opt_user_xattr:",
          "1505:    break;",
          "1506:   case Opt_nouser_xattr:",
          "1508:    break;",
          "1509: #else",
          "1510:   case Opt_user_xattr:",
          "",
          "[Removed Lines]",
          "1476:    clear_opt(sbi->s_mount_opt, ERRORS_CONT);",
          "1477:    clear_opt(sbi->s_mount_opt, ERRORS_RO);",
          "1478:    set_opt(sbi->s_mount_opt, ERRORS_PANIC);",
          "1481:    clear_opt(sbi->s_mount_opt, ERRORS_CONT);",
          "1482:    clear_opt(sbi->s_mount_opt, ERRORS_PANIC);",
          "1483:    set_opt(sbi->s_mount_opt, ERRORS_RO);",
          "1486:    clear_opt(sbi->s_mount_opt, ERRORS_RO);",
          "1487:    clear_opt(sbi->s_mount_opt, ERRORS_PANIC);",
          "1488:    set_opt(sbi->s_mount_opt, ERRORS_CONT);",
          "1491:    set_opt(sbi->s_mount_opt, NO_UID32);",
          "1494:    set_opt(sbi->s_mount_opt, DEBUG);",
          "1497:    set_opt(sbi->s_mount_opt, OLDALLOC);",
          "1500:    clear_opt(sbi->s_mount_opt, OLDALLOC);",
          "1504:    set_opt(sbi->s_mount_opt, XATTR_USER);",
          "1507:    clear_opt(sbi->s_mount_opt, XATTR_USER);",
          "",
          "[Added Lines]",
          "1476:    clear_opt(sb, ERRORS_CONT);",
          "1477:    clear_opt(sb, ERRORS_RO);",
          "1478:    set_opt(sb, ERRORS_PANIC);",
          "1481:    clear_opt(sb, ERRORS_CONT);",
          "1482:    clear_opt(sb, ERRORS_PANIC);",
          "1483:    set_opt(sb, ERRORS_RO);",
          "1486:    clear_opt(sb, ERRORS_RO);",
          "1487:    clear_opt(sb, ERRORS_PANIC);",
          "1488:    set_opt(sb, ERRORS_CONT);",
          "1491:    set_opt(sb, NO_UID32);",
          "1494:    set_opt(sb, DEBUG);",
          "1497:    set_opt(sb, OLDALLOC);",
          "1500:    clear_opt(sb, OLDALLOC);",
          "1504:    set_opt(sb, XATTR_USER);",
          "1507:    clear_opt(sb, XATTR_USER);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1514: #endif",
          "1515: #ifdef CONFIG_EXT4_FS_POSIX_ACL",
          "1516:   case Opt_acl:",
          "1518:    break;",
          "1519:   case Opt_noacl:",
          "1521:    break;",
          "1522: #else",
          "1523:   case Opt_acl:",
          "",
          "[Removed Lines]",
          "1517:    set_opt(sbi->s_mount_opt, POSIX_ACL);",
          "1520:    clear_opt(sbi->s_mount_opt, POSIX_ACL);",
          "",
          "[Added Lines]",
          "1517:    set_opt(sb, POSIX_ACL);",
          "1520:    clear_opt(sb, POSIX_ACL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1536:       \"Cannot specify journal on remount\");",
          "1537:     return 0;",
          "1538:    }",
          "1540:    break;",
          "1541:   case Opt_journal_dev:",
          "1542:    if (is_remount) {",
          "",
          "[Removed Lines]",
          "1539:    set_opt(sbi->s_mount_opt, UPDATE_JOURNAL);",
          "",
          "[Added Lines]",
          "1539:    set_opt(sb, UPDATE_JOURNAL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1550:    break;",
          "1551:   case Opt_journal_checksum:",
          "1553:    break;",
          "1554:   case Opt_journal_async_commit:",
          "1557:    break;",
          "1558:   case Opt_noload:",
          "1560:    break;",
          "1561:   case Opt_commit:",
          "1562:    if (match_int(&args[0], &option))",
          "",
          "[Removed Lines]",
          "1552:    set_opt(sbi->s_mount_opt, JOURNAL_CHECKSUM);",
          "1555:    set_opt(sbi->s_mount_opt, JOURNAL_ASYNC_COMMIT);",
          "1556:    set_opt(sbi->s_mount_opt, JOURNAL_CHECKSUM);",
          "1559:    set_opt(sbi->s_mount_opt, NOLOAD);",
          "",
          "[Added Lines]",
          "1552:    set_opt(sb, JOURNAL_CHECKSUM);",
          "1555:    set_opt(sb, JOURNAL_ASYNC_COMMIT);",
          "1556:    set_opt(sb, JOURNAL_CHECKSUM);",
          "1559:    set_opt(sb, NOLOAD);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1599:      return 0;",
          "1600:     }",
          "1601:    } else {",
          "1603:     sbi->s_mount_opt |= data_opt;",
          "1604:    }",
          "1605:    break;",
          "1606:   case Opt_data_err_abort:",
          "1608:    break;",
          "1609:   case Opt_data_err_ignore:",
          "1611:    break;",
          "1612: #ifdef CONFIG_QUOTA",
          "1613:   case Opt_usrjquota:",
          "",
          "[Removed Lines]",
          "1602:     clear_opt(sbi->s_mount_opt, DATA_FLAGS);",
          "1607:    set_opt(sbi->s_mount_opt, DATA_ERR_ABORT);",
          "1610:    clear_opt(sbi->s_mount_opt, DATA_ERR_ABORT);",
          "",
          "[Added Lines]",
          "1602:     clear_opt(sb, DATA_FLAGS);",
          "1607:    set_opt(sb, DATA_ERR_ABORT);",
          "1610:    clear_opt(sb, DATA_ERR_ABORT);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1647:    break;",
          "1648:   case Opt_quota:",
          "1649:   case Opt_usrquota:",
          "1652:    break;",
          "1653:   case Opt_grpquota:",
          "1656:    break;",
          "1657:   case Opt_noquota:",
          "1658:    if (sb_any_quota_loaded(sb)) {",
          "",
          "[Removed Lines]",
          "1650:    set_opt(sbi->s_mount_opt, QUOTA);",
          "1651:    set_opt(sbi->s_mount_opt, USRQUOTA);",
          "1654:    set_opt(sbi->s_mount_opt, QUOTA);",
          "1655:    set_opt(sbi->s_mount_opt, GRPQUOTA);",
          "",
          "[Added Lines]",
          "1650:    set_opt(sb, QUOTA);",
          "1651:    set_opt(sb, USRQUOTA);",
          "1654:    set_opt(sb, QUOTA);",
          "1655:    set_opt(sb, GRPQUOTA);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1660:      \"options when quota turned on\");",
          "1661:     return 0;",
          "1662:    }",
          "1666:    break;",
          "1667: #else",
          "1668:   case Opt_quota:",
          "",
          "[Removed Lines]",
          "1663:    clear_opt(sbi->s_mount_opt, QUOTA);",
          "1664:    clear_opt(sbi->s_mount_opt, USRQUOTA);",
          "1665:    clear_opt(sbi->s_mount_opt, GRPQUOTA);",
          "",
          "[Added Lines]",
          "1663:    clear_opt(sb, QUOTA);",
          "1664:    clear_opt(sb, USRQUOTA);",
          "1665:    clear_opt(sb, GRPQUOTA);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1688:    sbi->s_mount_flags |= EXT4_MF_FS_ABORTED;",
          "1689:    break;",
          "1690:   case Opt_nobarrier:",
          "1692:    break;",
          "1693:   case Opt_barrier:",
          "1694:    if (args[0].from) {",
          "",
          "[Removed Lines]",
          "1691:    clear_opt(sbi->s_mount_opt, BARRIER);",
          "",
          "[Added Lines]",
          "1691:    clear_opt(sb, BARRIER);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1697:    } else",
          "1699:    if (option)",
          "1701:    else",
          "1703:    break;",
          "1704:   case Opt_ignore:",
          "1705:    break;",
          "",
          "[Removed Lines]",
          "1700:     set_opt(sbi->s_mount_opt, BARRIER);",
          "1702:     clear_opt(sbi->s_mount_opt, BARRIER);",
          "",
          "[Added Lines]",
          "1700:     set_opt(sb, BARRIER);",
          "1702:     clear_opt(sb, BARRIER);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1723:      \"Ignoring deprecated bh option\");",
          "1724:    break;",
          "1725:   case Opt_i_version:",
          "1727:    sb->s_flags |= MS_I_VERSION;",
          "1728:    break;",
          "1729:   case Opt_nodelalloc:",
          "1731:    break;",
          "1732:   case Opt_mblk_io_submit:",
          "1734:    break;",
          "1735:   case Opt_nomblk_io_submit:",
          "1737:    break;",
          "1738:   case Opt_stripe:",
          "1739:    if (match_int(&args[0], &option))",
          "",
          "[Removed Lines]",
          "1726:    set_opt(sbi->s_mount_opt, I_VERSION);",
          "1730:    clear_opt(sbi->s_mount_opt, DELALLOC);",
          "1733:    set_opt(sbi->s_mount_opt, MBLK_IO_SUBMIT);",
          "1736:    clear_opt(sbi->s_mount_opt, MBLK_IO_SUBMIT);",
          "",
          "[Added Lines]",
          "1726:    set_opt(sb, I_VERSION);",
          "1730:    clear_opt(sb, DELALLOC);",
          "1733:    set_opt(sb, MBLK_IO_SUBMIT);",
          "1736:    clear_opt(sb, MBLK_IO_SUBMIT);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1743:    sbi->s_stripe = option;",
          "1744:    break;",
          "1745:   case Opt_delalloc:",
          "1747:    break;",
          "1748:   case Opt_block_validity:",
          "1750:    break;",
          "1751:   case Opt_noblock_validity:",
          "1753:    break;",
          "1754:   case Opt_inode_readahead_blks:",
          "1755:    if (match_int(&args[0], &option))",
          "",
          "[Removed Lines]",
          "1746:    set_opt(sbi->s_mount_opt, DELALLOC);",
          "1749:    set_opt(sbi->s_mount_opt, BLOCK_VALIDITY);",
          "1752:    clear_opt(sbi->s_mount_opt, BLOCK_VALIDITY);",
          "",
          "[Added Lines]",
          "1746:    set_opt(sb, DELALLOC);",
          "1749:    set_opt(sb, BLOCK_VALIDITY);",
          "1752:    clear_opt(sb, BLOCK_VALIDITY);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1773:            option);",
          "1774:    break;",
          "1775:   case Opt_noauto_da_alloc:",
          "1777:    break;",
          "1778:   case Opt_auto_da_alloc:",
          "1779:    if (args[0].from) {",
          "",
          "[Removed Lines]",
          "1776:    set_opt(sbi->s_mount_opt,NO_AUTO_DA_ALLOC);",
          "",
          "[Added Lines]",
          "1776:    set_opt(sb, NO_AUTO_DA_ALLOC);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1782:    } else",
          "1784:    if (option)",
          "1786:    else",
          "1788:    break;",
          "1789:   case Opt_discard:",
          "1791:    break;",
          "1792:   case Opt_nodiscard:",
          "1794:    break;",
          "1795:   case Opt_dioread_nolock:",
          "1797:    break;",
          "1798:   case Opt_dioread_lock:",
          "1800:    break;",
          "1801:   case Opt_init_inode_table:",
          "1803:    if (args[0].from) {",
          "1804:     if (match_int(&args[0], &option))",
          "1805:      return 0;",
          "",
          "[Removed Lines]",
          "1785:     clear_opt(sbi->s_mount_opt, NO_AUTO_DA_ALLOC);",
          "1787:     set_opt(sbi->s_mount_opt,NO_AUTO_DA_ALLOC);",
          "1790:    set_opt(sbi->s_mount_opt, DISCARD);",
          "1793:    clear_opt(sbi->s_mount_opt, DISCARD);",
          "1796:    set_opt(sbi->s_mount_opt, DIOREAD_NOLOCK);",
          "1799:    clear_opt(sbi->s_mount_opt, DIOREAD_NOLOCK);",
          "1802:    set_opt(sbi->s_mount_opt, INIT_INODE_TABLE);",
          "",
          "[Added Lines]",
          "1785:     clear_opt(sb, NO_AUTO_DA_ALLOC);",
          "1787:     set_opt(sb,NO_AUTO_DA_ALLOC);",
          "1790:    set_opt(sb, DISCARD);",
          "1793:    clear_opt(sb, DISCARD);",
          "1796:    set_opt(sb, DIOREAD_NOLOCK);",
          "1799:    clear_opt(sb, DIOREAD_NOLOCK);",
          "1802:    set_opt(sb, INIT_INODE_TABLE);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1810:    sbi->s_li_wait_mult = option;",
          "1811:    break;",
          "1812:   case Opt_noinit_inode_table:",
          "1814:    break;",
          "1815:   default:",
          "1816:    ext4_msg(sb, KERN_ERR,",
          "",
          "[Removed Lines]",
          "1813:    clear_opt(sbi->s_mount_opt, INIT_INODE_TABLE);",
          "",
          "[Added Lines]",
          "1813:    clear_opt(sb, INIT_INODE_TABLE);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1822: #ifdef CONFIG_QUOTA",
          "1823:  if (sbi->s_qf_names[USRQUOTA] || sbi->s_qf_names[GRPQUOTA]) {",
          "1824:   if (test_opt(sb, USRQUOTA) && sbi->s_qf_names[USRQUOTA])",
          "1827:   if (test_opt(sb, GRPQUOTA) && sbi->s_qf_names[GRPQUOTA])",
          "1830:   if (test_opt(sb, GRPQUOTA) || test_opt(sb, USRQUOTA)) {",
          "1831:    ext4_msg(sb, KERN_ERR, \"old and new quota \"",
          "",
          "[Removed Lines]",
          "1825:    clear_opt(sbi->s_mount_opt, USRQUOTA);",
          "1828:    clear_opt(sbi->s_mount_opt, GRPQUOTA);",
          "",
          "[Added Lines]",
          "1825:    clear_opt(sb, USRQUOTA);",
          "1828:    clear_opt(sb, GRPQUOTA);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3073:  def_mount_opts = le32_to_cpu(es->s_default_mount_opts);",
          "3075:  if (def_mount_opts & EXT4_DEFM_DEBUG)",
          "3077:  if (def_mount_opts & EXT4_DEFM_BSDGROUPS) {",
          "3078:   ext4_msg(sb, KERN_WARNING, deprecated_msg, \"bsdgroups\",",
          "3079:    \"2.6.38\");",
          "3081:  }",
          "3082:  if (def_mount_opts & EXT4_DEFM_UID16)",
          "3084: #ifdef CONFIG_EXT4_FS_XATTR",
          "3085:  if (def_mount_opts & EXT4_DEFM_XATTR_USER)",
          "3087: #endif",
          "3088: #ifdef CONFIG_EXT4_FS_POSIX_ACL",
          "3089:  if (def_mount_opts & EXT4_DEFM_ACL)",
          "3091: #endif",
          "3092:  if ((def_mount_opts & EXT4_DEFM_JMODE) == EXT4_DEFM_JMODE_DATA)",
          "3094:  else if ((def_mount_opts & EXT4_DEFM_JMODE) == EXT4_DEFM_JMODE_ORDERED)",
          "3096:  else if ((def_mount_opts & EXT4_DEFM_JMODE) == EXT4_DEFM_JMODE_WBACK)",
          "3099:  if (le16_to_cpu(sbi->s_es->s_errors) == EXT4_ERRORS_PANIC)",
          "3101:  else if (le16_to_cpu(sbi->s_es->s_errors) == EXT4_ERRORS_CONTINUE)",
          "3103:  else",
          "3105:  if (def_mount_opts & EXT4_DEFM_BLOCK_VALIDITY)",
          "3107:  if (def_mount_opts & EXT4_DEFM_DISCARD)",
          "3110:  sbi->s_resuid = le16_to_cpu(es->s_def_resuid);",
          "3111:  sbi->s_resgid = le16_to_cpu(es->s_def_resgid);",
          "",
          "[Removed Lines]",
          "3074:  set_opt(sbi->s_mount_opt, INIT_INODE_TABLE);",
          "3076:   set_opt(sbi->s_mount_opt, DEBUG);",
          "3080:   set_opt(sbi->s_mount_opt, GRPID);",
          "3083:   set_opt(sbi->s_mount_opt, NO_UID32);",
          "3086:   set_opt(sbi->s_mount_opt, XATTR_USER);",
          "3090:   set_opt(sbi->s_mount_opt, POSIX_ACL);",
          "3093:   set_opt(sbi->s_mount_opt, JOURNAL_DATA);",
          "3095:   set_opt(sbi->s_mount_opt, ORDERED_DATA);",
          "3097:   set_opt(sbi->s_mount_opt, WRITEBACK_DATA);",
          "3100:   set_opt(sbi->s_mount_opt, ERRORS_PANIC);",
          "3102:   set_opt(sbi->s_mount_opt, ERRORS_CONT);",
          "3104:   set_opt(sbi->s_mount_opt, ERRORS_RO);",
          "3106:   set_opt(sbi->s_mount_opt, BLOCK_VALIDITY);",
          "3108:   set_opt(sbi->s_mount_opt, DISCARD);",
          "",
          "[Added Lines]",
          "3074:  set_opt(sb, INIT_INODE_TABLE);",
          "3076:   set_opt(sb, DEBUG);",
          "3080:   set_opt(sb, GRPID);",
          "3083:   set_opt(sb, NO_UID32);",
          "3086:   set_opt(sb, XATTR_USER);",
          "3090:   set_opt(sb, POSIX_ACL);",
          "3093:   set_opt(sb, JOURNAL_DATA);",
          "3095:   set_opt(sb, ORDERED_DATA);",
          "3097:   set_opt(sb, WRITEBACK_DATA);",
          "3100:   set_opt(sb, ERRORS_PANIC);",
          "3102:   set_opt(sb, ERRORS_CONT);",
          "3104:   set_opt(sb, ERRORS_RO);",
          "3106:   set_opt(sb, BLOCK_VALIDITY);",
          "3108:   set_opt(sb, DISCARD);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3114:  sbi->s_max_batch_time = EXT4_DEF_MAX_BATCH_TIME;",
          "3116:  if ((def_mount_opts & EXT4_DEFM_NOBARRIER) == 0)",
          "",
          "[Removed Lines]",
          "3117:   set_opt(sbi->s_mount_opt, BARRIER);",
          "",
          "[Added Lines]",
          "3117:   set_opt(sb, BARRIER);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3123:  if (!IS_EXT3_SB(sb) &&",
          "3124:      ((def_mount_opts & EXT4_DEFM_NODELALLOC) == 0))",
          "3127:  if (!parse_options((char *) sbi->s_es->s_mount_opts, sb,",
          "3128:       &journal_devnum, &journal_ioprio, NULL, 0)) {",
          "",
          "[Removed Lines]",
          "3125:   set_opt(sbi->s_mount_opt, DELALLOC);",
          "",
          "[Added Lines]",
          "3125:   set_opt(sb, DELALLOC);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3425:          \"suppressed and not mounted read-only\");",
          "3426:   goto failed_mount_wq;",
          "3427:  } else {",
          "3430:   sbi->s_journal = NULL;",
          "3431:   needs_recovery = 0;",
          "3432:   goto no_journal;",
          "",
          "[Removed Lines]",
          "3428:   clear_opt(sbi->s_mount_opt, DATA_FLAGS);",
          "3429:   set_opt(sbi->s_mount_opt, WRITEBACK_DATA);",
          "",
          "[Added Lines]",
          "3428:   clear_opt(sb, DATA_FLAGS);",
          "3429:   set_opt(sb, WRITEBACK_DATA);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3465:   if (jbd2_journal_check_available_features",
          "3466:       (sbi->s_journal, 0, 0, JBD2_FEATURE_INCOMPAT_REVOKE))",
          "3468:   else",
          "3470:   break;",
          "3472:  case EXT4_MOUNT_ORDERED_DATA:",
          "",
          "[Removed Lines]",
          "3467:    set_opt(sbi->s_mount_opt, ORDERED_DATA);",
          "3469:    set_opt(sbi->s_mount_opt, JOURNAL_DATA);",
          "",
          "[Added Lines]",
          "3467:    set_opt(sb, ORDERED_DATA);",
          "3469:    set_opt(sb, JOURNAL_DATA);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3556:      (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_JOURNAL_DATA)) {",
          "3557:   ext4_msg(sb, KERN_WARNING, \"Ignoring delalloc option - \"",
          "3558:     \"requested data journaling mode\");",
          "3560:  }",
          "3561:  if (test_opt(sb, DIOREAD_NOLOCK)) {",
          "3562:   if (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_JOURNAL_DATA) {",
          "3563:    ext4_msg(sb, KERN_WARNING, \"Ignoring dioread_nolock \"",
          "3564:     \"option - requested data journaling mode\");",
          "3566:   }",
          "3567:   if (sb->s_blocksize < PAGE_SIZE) {",
          "3568:    ext4_msg(sb, KERN_WARNING, \"Ignoring dioread_nolock \"",
          "3569:     \"option - block size is too small\");",
          "3571:   }",
          "3572:  }",
          "",
          "[Removed Lines]",
          "3559:   clear_opt(sbi->s_mount_opt, DELALLOC);",
          "3565:    clear_opt(sbi->s_mount_opt, DIOREAD_NOLOCK);",
          "3570:    clear_opt(sbi->s_mount_opt, DIOREAD_NOLOCK);",
          "",
          "[Added Lines]",
          "3559:   clear_opt(sb, DELALLOC);",
          "3565:    clear_opt(sb, DIOREAD_NOLOCK);",
          "3570:    clear_opt(sb, DIOREAD_NOLOCK);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da1dafca84413145f5ac59998b4cdd06fb89f721",
      "candidate_info": {
        "commit_hash": "da1dafca84413145f5ac59998b4cdd06fb89f721",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/da1dafca84413145f5ac59998b4cdd06fb89f721",
        "files": [
          "fs/ext4/inode.c"
        ],
        "message": "ext4: explicitly remove inode from orphan list after failed direct io\n\nOtherwise non-empty orphan list will be triggered on umount.\n\nSigned-off-by: Dmitry Monakhov <dmonakhov@openvz.org>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/ext4/inode.c||fs/ext4/inode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ],
          "candidate": [
            "fs/ext4/inode.c||fs/ext4/inode.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/inode.c||fs/ext4/inode.c": [
          "File: fs/ext4/inode.c -> fs/ext4/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3440:    ret = PTR_ERR(handle);",
          "3441:    goto out;",
          "3442:   }",
          "3443:   if (inode->i_nlink)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3441:    if (inode->i_nlink)",
          "3442:     ext4_orphan_del(NULL, inode);",
          "",
          "---------------"
        ]
      }
    }
  ]
}