{
  "cve_id": "CVE-2017-13083",
  "cve_desc": "Akeo Consulting Rufus prior to version 2.17.1187 does not adequately validate the integrity of updates downloaded over HTTP, allowing an attacker to easily convince a user to execute arbitrary code",
  "repo": "pbatard/rufus",
  "patch_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
  "patch_info": {
    "commit_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "repo": "pbatard/rufus",
    "commit_url": "https://github.com/pbatard/rufus/commit/c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "files": [
      "res/localization/rufus.loc",
      "src/pki.c",
      "src/rufus.rc",
      "src/stdlg.c"
    ],
    "message": "[pki] fix https://www.kb.cert.org/vuls/id/403768\n\n* This commit effectively fixes https://www.kb.cert.org/vuls/id/403768 (CVE-2017-13083) as\n  it is described per its revision 11, which is the latest revision at the time of this commit,\n  by disabling Windows prompts, enacted during signature validation, that allow the user to\n  bypass the intended signature verification checks.\n* It needs to be pointed out that the vulnerability (\"allow(ing) the use of a self-signed\n  certificate\"), which relies on the end-user actively ignoring a Windows prompt that tells\n  them that the update failed the signature validation whilst also advising against running it,\n  is being fully addressed, even as the update protocol remains HTTP.\n* It also need to be pointed out that the extended delay (48 hours) between the time the\n  vulnerability was reported and the moment it is fixed in our codebase has to do with\n  the fact that the reporter chose to deviate from standard security practices by not\n  disclosing the details of the vulnerability with us, be it publicly or privately,\n  before creating the cert.org report. The only advance notification we received was a\n  generic note about the use of HTTP vs HTTPS, which, as have established, is not\n  immediately relevant to addressing the reported vulnerability.\n* Closes #1009\n* Note: The other vulnerability scenario described towards the end of #1009, which\n  doesn't have to do with the \"lack of CA checking\", will be addressed separately.",
    "before_after_code_files": [
      "res/localization/rufus.loc||res/localization/rufus.loc",
      "src/pki.c||src/pki.c",
      "src/rufus.rc||src/rufus.rc",
      "src/stdlg.c||src/stdlg.c"
    ]
  },
  "patch_diff": {
    "res/localization/rufus.loc||res/localization/rufus.loc": [
      "File: res/localization/rufus.loc -> res/localization/rufus.loc",
      "--- Hunk 1 ---",
      "[Context before]",
      "487: # eg. \"Partitioning (MBR)...\"",
      "488: t MSG_238 \"Partitioning (%s)...\"",
      "489: t MSG_239 \"Deleting partitions...\"",
      "490: t MSG_241 \"Downloading: %0.1f%%\"",
      "491: t MSG_242 \"Failed to download file.\"",
      "492: t MSG_243 \"Checking for Rufus updates...\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: t MSG_240 \"The signature for the downloaded update can not be validated. This could mean that your \"",
      "491:  \"system is improperly configured for signature validation or indicate a malicious download.\\n\\n\"",
      "492:  \"The download will be deleted. Please check the log for more details.\"",
      "",
      "---------------"
    ],
    "src/pki.c||src/pki.c": [
      "File: src/pki.c -> src/pki.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:  static char error_string[64];",
      "54:  DWORD error_code = GetLastError();",
      "57:   return WindowsErrorString();",
      "59:  switch (error_code) {",
      "",
      "[Removed Lines]",
      "56:  if ((error_code >> 16) != 0x8009)",
      "",
      "[Added Lines]",
      "56:  if (((error_code >> 16) != 0x8009) && ((error_code >> 16) != 0x800B))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:   return \"Cannot complete usage check.\";",
      "114:  case CRYPT_E_NO_TRUSTED_SIGNER:",
      "115:   return \"None of the signers of the cryptographic message or certificate trust list is trusted.\";",
      "116:  default:",
      "117:   static_sprintf(error_string, \"Unknown PKI error 0x%08lX\", error_code);",
      "118:   return error_string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  case CERT_E_UNTRUSTEDROOT:",
      "117:   return \"The root certificate is not trusted.\";",
      "118:  case TRUST_E_NOSIGNATURE:",
      "119:   return \"Not digitally signed.\";",
      "120:  case TRUST_E_EXPLICIT_DISTRUST:",
      "121:   return \"One of the certificates used was marked as untrusted by the user.\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:  }",
      "270:  trust_data.cbStruct = sizeof(trust_data);",
      "273:  trust_data.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;",
      "",
      "[Removed Lines]",
      "271:  trust_data.dwUIChoice = WTD_UI_ALL;",
      "",
      "[Added Lines]",
      "283:  trust_data.dwUIChoice = WTD_UI_NONE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "279:  r = WinVerifyTrust(NULL, &guid_generic_verify, &trust_data);",
      "280:  safe_free(trust_file.pcwszFilePath);",
      "282:  return r;",
      "283: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293:  switch (r) {",
      "294:  case ERROR_SUCCESS:",
      "295:   break;",
      "296:  case TRUST_E_NOSIGNATURE:",
      "298:   uprintf(\"PKI: File does not appear to be signed: %s\", WinPKIErrorString());",
      "299:   MessageBoxExU(hDlg, lmprintf(MSG_284), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "300:   break;",
      "301:  default:",
      "302:   uprintf(\"PKI: Failed to validate signature: %s\", WinPKIErrorString());",
      "303:   MessageBoxExU(hDlg, lmprintf(MSG_240), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "304:   break;",
      "305:  }",
      "",
      "---------------"
    ],
    "src/rufus.rc||src/rufus.rc": [
      "File: src/rufus.rc -> src/rufus.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
      "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
      "35: EXSTYLE WS_EX_ACCEPTFILES",
      "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
      "38: BEGIN",
      "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
      "",
      "[Removed Lines]",
      "36: CAPTION \"Rufus 2.17.1186\"",
      "",
      "[Added Lines]",
      "36: CAPTION \"Rufus 2.17.1187\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: VS_VERSION_INFO VERSIONINFO",
      "371:  FILEFLAGSMASK 0x3fL",
      "372: #ifdef _DEBUG",
      "373:  FILEFLAGS 0x1L",
      "",
      "[Removed Lines]",
      "369:  FILEVERSION 2,17,1186,0",
      "370:  PRODUCTVERSION 2,17,1186,0",
      "",
      "[Added Lines]",
      "369:  FILEVERSION 2,17,1187,0",
      "370:  PRODUCTVERSION 2,17,1187,0",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "384:         BEGIN",
      "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
      "386:             VALUE \"FileDescription\", \"Rufus\"",
      "388:             VALUE \"InternalName\", \"Rufus\"",
      "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
      "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
      "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
      "392:             VALUE \"ProductName\", \"Rufus\"",
      "394:         END",
      "395:     END",
      "396:     BLOCK \"VarFileInfo\"",
      "",
      "[Removed Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1186\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1186\"",
      "",
      "[Added Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1187\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1187\"",
      "",
      "---------------"
    ],
    "src/stdlg.c||src/stdlg.c": [
      "File: src/stdlg.c -> src/stdlg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674:    case 2:  // Launch newer version and close this one",
      "1675:     Sleep(1000); // Add a delay on account of antivirus scanners",
      "1678:      break;",
      "1680:     memset(&si, 0, sizeof(si));",
      "1681:     memset(&pi, 0, sizeof(pi));",
      "",
      "[Removed Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR)",
      "",
      "[Added Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR) {",
      "1679:      _unlinkU(filepath);",
      "1680:      EnableWindow(GetDlgItem(hDlg, IDC_DOWNLOAD), FALSE);",
      "1682:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c43c49eb17c3d64605cfe576650626089a77f9ca",
      "candidate_info": {
        "commit_hash": "c43c49eb17c3d64605cfe576650626089a77f9ca",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/c43c49eb17c3d64605cfe576650626089a77f9ca",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] update Slovenian translation to latest",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "14425: ################################################################################",
          "14426: l \"sl-SI\" \"Slovenian (Sloven\u0161\u010dina)\" 0x0424",
          "14428: b \"en-US\"",
          "14430: # Main dialog",
          "14431: g IDD_DIALOG",
          "14432: t IDS_DEVICE_TXT \"Naprava\"",
          "14435: t IDS_FILE_SYSTEM_TXT \"Datote\u010dni sistem\"",
          "14436: t IDS_CLUSTER_SIZE_TXT \"Velikost gru\u010de\"",
          "14440: t IDC_QUICK_FORMAT \"Hitro formatiranje\"",
          "14441: t IDC_EXTENDED_LABEL \"Ustvari datoteki za ikono in podalj\u0161ano oznako\"",
          "14442: t IDCANCEL \"Zapri\"",
          "14443: t IDC_START \"Za\u010dni\"",
          "14448: # About dialog",
          "14449: g IDD_ABOUTBOX",
          "",
          "[Removed Lines]",
          "14427: v 1.0.22",
          "14433: t IDS_BOOT_SELECTION_TXT \"Na\u010din zagona\"",
          "14434: t IDS_PARTITION_TYPE_TXT \"Particijska shema in vrsta ciljnega sistema\"",
          "14437: t IDS_LABEL_TXT \"Oznaka novega nosilca\"",
          "14438: t IDS_FORMAT_OPTIONS_TXT \"Mo\u017enosti formatiranja\"",
          "14439: t IDC_BAD_BLOCKS \"Odkrij slabe bloke\"",
          "14444: t IDC_LIST_USB_HDD \"Na\u0161tej USB trde diske\"",
          "14445: t IDC_OLD_BIOS_FIXES \"Dodaj popravke za stare BIOSe\"",
          "14446: t IDC_RUFUS_MBR \"Rufusov MBR z BIOS ID\"",
          "",
          "[Added Lines]",
          "14427: v 1.0.23",
          "14432: t IDS_DRIVE_PROPERTIES_TXT \"Lastnosti pogona\"",
          "14434: t IDS_BOOT_SELECTION_TXT \"Izbira zagona\"",
          "14435: t IDC_SELECT \"Izberi\"",
          "14436: t IDS_IMAGE_OPTION_TXT \"Mo\u017enosti slike\"",
          "14437: t IDS_PARTITION_TYPE_TXT \"Particijska shema\"",
          "14438: t IDS_TARGET_SYSTEM_TXT \"Ciljni sistem\"",
          "14439: t IDC_LIST_USB_HDD \"Na\u0161tej USB trde diske\"",
          "14440: t IDC_OLD_BIOS_FIXES \"Dodaj popravke za stare BIOSe\"",
          "14441: t IDC_RUFUS_MBR \"Rufusov MBR z BIOS ID\"",
          "14442: t IDS_FORMAT_OPTIONS_TXT \"Mo\u017enosti formatiranja\"",
          "14445: t IDS_LABEL_TXT \"Oznaka nosilca\"",
          "14447: t IDC_BAD_BLOCKS \"Odkrij slabe bloke\"",
          "14449: t IDS_STATUS_TXT \"Stanje\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14503: t MSG_009 \"Ne\"",
          "14504: t MSG_010 \"Slabi bloki najdeni\"",
          "14505: t MSG_011 \"Preizkus kon\u010dan: %d slabih blokov najdenih\\n\"",
          "14507: # The following will contain the formatted message above as well as the name of the bad blocks logfile",
          "14508: t MSG_012 \"%s\\nPodrobnej\u0161e poro\u010dilo lahko najdete v datoteki\\n%s\"",
          "14509: t MSG_013 \"onemogo\u010deno\"",
          "",
          "[Removed Lines]",
          "14506:  \"  Napak pri branju: %d\\n  Napak pri pisanju: %d\\n  %d corruption error(s)\\n\"",
          "",
          "[Added Lines]",
          "14511:  \"  Napak pri branju: %d\\n  Napak pri pisanju: %d\\n  Nezanesljivih blokov: %d\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "14527: t MSG_029 \"Privzeto\"",
          "14528: # The following gets appended to the file system, cluster size, etc.",
          "14529: t MSG_030 \"%s (privzeto)\"",
          "14533: # Number of bad block check passes (singular for 1 pass, plural for 2 or more passes)",
          "14534: t MSG_034 \"%d prehod\"",
          "14535: t MSG_035 \"%d prehoda/-i\"",
          "",
          "[Removed Lines]",
          "14530: #t MSG_031 \"%s particijska shema za BIOS ali %s\"",
          "14531: #t MSG_032 \"%s particijska shema za BIOS\"",
          "14532: #t MSG_033 \"%s particijska shema za UEFI\"",
          "",
          "[Added Lines]",
          "14535: t MSG_031 \"BIOS (oz. UEFI-CSM)\"",
          "14536: t MSG_032 \"UEFI (brez CSM)\"",
          "14537: t MSG_033 \"BIOS ali UEFI\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "14666:  \"- Izberite \\\"Prekli\u010di\\\", da prekinete dejanje.\\n\\n\"",
          "14667:  \"Opomba: datoteka bo prene\u0161ena v mapo, kjer je name\u0161\u010den Rufus, in bo v prihodnje ponovno uporabljena. \"",
          "14668:  \"\u010ce Rufus ne more najti ustrezne datoteke, bo uporabljena privzeta verzija.\"",
          "14670: # Tooltips",
          "14678: t MSG_153 \"Testni vzorec: 0x%02X\"",
          "14679: t MSG_154 \"Testni vzorec: 0x%02X, 0x%02X\"",
          "14680: t MSG_155 \"Testni vzorec: 0x%02X, 0x%02X, 0x%02X\"",
          "",
          "[Removed Lines]",
          "14671: # Partition Scheme and Target Type",
          "14672: t MSG_150 \"To je navadno najvarnej\u0161a izbira, \u010de pa imate ra\u010dunalnik UEFI in \u017eelite namestiti \"",
          "14673:  \"operacijski sistem v na\u010dinu EFI, izberite eno od ostalih mo\u017enosti.\"",
          "14674: t MSG_151 \"To mo\u017enost izberite, \u010de \u017eelite namestiti operacijski sistem v na\u010dinu EFI, toda morate dostopati \"",
          "14675:  \"do naprave USB iz operacijskega sistema Windows XP.\"",
          "14676: t MSG_152 \"To je za\u017eelena mo\u017enost za namestitev operacijskega sistema v na\u010dinu EFI, ko dostop do naprave USB ni \"",
          "14677:  \"zahtevan iz operacijskega sistema Windows XP.\"",
          "",
          "[Added Lines]",
          "14674: t MSG_117 \"Standardna namestitev operacijskega sistema Windows\"",
          "14675: t MSG_119 \"napredne lastnosti pogona\"",
          "14676: t MSG_120 \"napredne mo\u017enosti formatiranja\"",
          "14677: t MSG_121 \"Poka\u017ei %s\"",
          "14678: t MSG_122 \"Skrij %s\"",
          "14681: t MSG_150 \"Vrsta ra\u010dunalnika, ki jo nameravate zagnati s tem pogonom. To \"",
          "14682:  \"morate ugotoviti, preden ustvarite pogon, druga\u010de zagon morda ne bo uspel.\"",
          "14683: t MSG_151 \"'UEFI-CSM' pomeni, da se bo v UEFI s pogona mogo\u010de zagnati le v na\u010dinu emulacije BIOS (imenovanem tudi 'Legacy Mode') in ne v obi\u010dajnem UEFI na\u010dinu.\"",
          "14684: t MSG_152 \"'brez CSM' pomeni, da se bo v UEFI s pogona mogo\u010de zagnati le v obi\u010dajnem UEFI na\u010dinu in ne v na\u010dinu emulacije BIOS (imenovanem tudi 'Legacy Mode').\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "14685: t MSG_160 \"Prika\u017ee ali skrije dodatne mo\u017enosti.\"",
          "14686: t MSG_161 \"Preveri, ali so na napravi slabi bloki z uporabo testnega vzorca.\"",
          "14687: t MSG_162 \"To mo\u017enost odzna\u010dite za \\\"po\u010dasen\\\" na\u010din formatiranja.\"",
          "14688: t MSG_164 \"Metoda, ki bo uporabljena, da bo s pogona mogo\u010de zagnati ra\u010dunalnik.\"",
          "14689: t MSG_165 \"Kliknite, da izberete sliko\u2026\"",
          "14690: t MSG_166 \"To mo\u017enost izberite, \u010de \u017eelite omogo\u010diti prikaz \\\"mednarodnih\\\" oznak nosilca \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14695: t MSG_163 \"Metoda, ki bo uporabljena za ustvarjanje particij.\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "14700: # The following will appear in the about dialog",
          "14701: t MSG_174 \"Rufus - zanesljivi pripomo\u010dek za USB formatiranje\"",
          "14702: t MSG_175 \"Verzija %d.%d (izgradnja %d)\"",
          "14704: t MSG_177 \"Prijavite hro\u0161\u010de ali zahtevajte izbolj\u0161ave na:\"",
          "14705: t MSG_178 \"Dodatne avtorske pravice:\"",
          "14706: t MSG_179 \"Politika posodobitev:\"",
          "",
          "[Removed Lines]",
          "14703: t MSG_176 \"V sloven\u0161\u010dino prevedel Matej Horvat <matej.horvat@guest.arnes.si>\"",
          "",
          "[Added Lines]",
          "14711: t MSG_176 \"V sloven\u0161\u010dino prevedel Matej Horvat <mailto:matej.horvat@guest.arnes.si>\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "14803: t MSG_268 \"Name\u0161\u010dam sliko za Windows\u2026\"",
          "14804: t MSG_269 \"Ohranjanje \u010dasov datotek\"",
          "14805: t MSG_270 \"Razhro\u0161\u010devanje USB\"",
          "14809: t MSG_274 \"Zaznana je bila slika ISOHybrid\"",
          "14810: t MSG_275 \"Slika, ki ste jo izbrali, je vrste \\\"ISOHybrid\\\". To pomeni, da jo lahko zapi\u0161ete kot \"",
          "14811:  \"%s (s kopiranjem datotek) ali pa kot %s (s kopiranjem cele slike).\\n\"",
          "",
          "[Removed Lines]",
          "14806: t MSG_271 \"Ra\u010dunam kontrolni vsoti: %0.1f%%\"",
          "14807: t MSG_272 \"Izra\u010duna kontrolni vsoti MD5, SHA1 in SHA256 za izbrano sliko\"",
          "14808: t MSG_273 \"Spremeni jezik aplikacije\"",
          "",
          "[Added Lines]",
          "14814: t MSG_271 \"Ra\u010dunam zgo\u0161\u010dene vrednosti: %0.1f%%\"",
          "14815: t MSG_272 \"Izra\u010duna zgo\u0161\u010dene vrednosti MD5, SHA1 in SHA256 za izbrano sliko.\"",
          "14816: t MSG_273 \"Spremeni jezik aplikacije.\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "14814:  \"Izberite, kako jo \u017eelite zapisati:\"",
          "14815: t MSG_276 \"Zapi\u0161i kot %s (priporo\u010deno)\"",
          "14816: t MSG_277 \"Zapi\u0161i kot %s\"",
          "14817: t MSG_279 \"Nezagonska\"",
          "14820: t MSG_282 \"Ekskluzivno zaklepanje nosilca USB\"",
          "14821: t MSG_283 \"Neveljaven podpis\"",
          "14822: t MSG_284 \"Prenesena datoteka nima digitalnega podpisa.\"",
          "",
          "[Removed Lines]",
          "14818: t MSG_280 \"Izbira slike\"",
          "14819: t MSG_281 \"(Izberite sliko)\"",
          "",
          "[Added Lines]",
          "14825: t MSG_278 \"Preverjam, ali se izvajajo konfliktni procesi\u2026\"",
          "14827: t MSG_280 \"Slika diska oz. ISO\"",
          "14828: t MSG_281 \"%s (izberite)\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "14837: t MSG_298 \"Datoteka ISO, ki ste jo izbrali, ni pri\u010dakovane velikosti: %s njenih podatkov manjka.\\n\\n\"",
          "14838:  \"\u010ce ste jo prenesli z interneta, jo prenesite \u0161e enkrat in preverite, ali se vrednosti MD5 in SHA \"",
          "14839:  \"ujemata z uradnima.\\n\\nV Rufusu ju lahko izra\u010dunate z gumbom (\u2713).\"",
          "14842: ################################################################################",
          "14843: l \"es-ES\" \"Spanish (Espa\u00f1ol)\" 0x040a, 0x080a, 0x0c0a, 0x100a, 0x140a, 0x180a, 0x1c0a, 0x200a, 0x240a, 0x280a, 0x2c0a, 0x300a, 0x340a, 0x380a, 0x3c0a, 0x400a, 0x440a, 0x480a, 0x4c0a, 0x500a, 0x540a, 0x580a",
          "",
          "[Removed Lines]",
          "14840: t MSG_118 \"Standardna Windows namestitev\"",
          "",
          "[Added Lines]",
          "14849: t MSG_299 \"Napaka pri preverjanju \u010dasovnega \u017eiga\"",
          "14850: t MSG_300 \"Ni bilo mogo\u010de ugotoviti, da je \u010dasovni \u017eig prenesene posodobitve res novej\u0161i od va\u0161e trenutne verzije Rufusa.\\n\\n\"",
          "14851:  \"Da ne bi pri\u0161lo do potencialnega napada, je bil postopek posodobitve prekinjen, prenesena posodobitev pa bo izbrisana. \"",
          "14852:  \"Za ve\u010d podrobnosti preverite zapisnik.\"",
          "14853: t MSG_301 \"Poka\u017ee nastavitve aplikacije.\"",
          "14854: t MSG_302 \"Poka\u017ee informacije o tej aplikaciji.\"",
          "14855: t MSG_303 \"Poka\u017ee zapisnik.\"",
          "14856: t MSG_304 \"Ustvari sliko izbrane naprave.\"",
          "14857: t MSG_305 \"Tu izberete, ali \u017eelite uporabiti to napravo, da bi namestili operacijski sistem Windows na drug disk, \"",
          "14858:  \"ali da bi ga neposredno izvajali s tega pogona (Windows To Go).\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.0.1296\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.0.1297\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391: VS_VERSION_INFO VERSIONINFO",
          "394:  FILEFLAGSMASK 0x3fL",
          "395: #ifdef _DEBUG",
          "396:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "392:  FILEVERSION 3,0,1296,0",
          "393:  PRODUCTVERSION 3,0,1296,0",
          "",
          "[Added Lines]",
          "392:  FILEVERSION 3,0,1297,0",
          "393:  PRODUCTVERSION 3,0,1297,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:         BEGIN",
          "408:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "409:             VALUE \"FileDescription\", \"Rufus\"",
          "411:             VALUE \"InternalName\", \"Rufus\"",
          "412:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "413:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "414:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "415:             VALUE \"ProductName\", \"Rufus\"",
          "417:         END",
          "418:     END",
          "419:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "410:             VALUE \"FileVersion\", \"3.0.1296\"",
          "416:             VALUE \"ProductVersion\", \"3.0.1296\"",
          "",
          "[Added Lines]",
          "410:             VALUE \"FileVersion\", \"3.0.1297\"",
          "416:             VALUE \"ProductVersion\", \"3.0.1297\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5170706695dae32d5c0f33c11ff52d77c0a76b44",
      "candidate_info": {
        "commit_hash": "5170706695dae32d5c0f33c11ff52d77c0a76b44",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/5170706695dae32d5c0f33c11ff52d77c0a76b44",
        "files": [
          "_coverity.cmd",
          "src/dev.c",
          "src/format.c",
          "src/rufus.rc"
        ],
        "message": "[misc] fix coverity warnings",
        "before_after_code_files": [
          "_coverity.cmd||_coverity.cmd",
          "src/dev.c||src/dev.c",
          "src/format.c||src/format.c",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "_coverity.cmd||_coverity.cmd": [
          "File: _coverity.cmd -> _coverity.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: rmdir cov-int /s /q >NUL 2>NUL",
          "6: del cov-int.zip >NUL 2>NUL",
          "7: mkdir cov-int",
          "8: cov-build --dir cov-int wdk_build.cmd",
          "9: rem *** zip script by Peter Mortensen - http://superuser.com/a/111266/286681",
          "10: echo Set objArgs = WScript.Arguments> zip.vbs",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: rem *** for when/if Coverity manage to clean their act",
          "9: rem cov-build --dir cov-int msbuild rufus.sln /p:Configuration=Release,Platform=x86_32 /maxcpucount",
          "10: rem cov-build --dir cov-int C:\\msys64\\usr\\bin\\bash -cl \"export PATH=/mingw32/bin:$PATH; cd /c/rufus; ./configure --build=i686-w64-mingw32 --host=i686-w64-mingw32 --disable-debug; make -j4\"",
          "",
          "---------------"
        ],
        "src/dev.c||src/dev.c": [
          "File: src/dev.c -> src/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:    buffer = malloc(2048);",
          "228:    if ((buffer != NULL) && (SetFilePointerEx(hDrive, li, NULL, FILE_BEGIN)) &&",
          "229:     ReadFile(hDrive, buffer, 2048, &size, NULL) && (size == 2048)) {",
          "232:      label[k] = 0;",
          "233:     img_save->Label = label;",
          "234:    }",
          "",
          "[Removed Lines]",
          "230:     safe_strcpy(label, sizeof(label), (char*)&buffer[0x28]);",
          "231:     for (k = safe_strlen(label) - 1; (k >= 0) && (label[k] == 0x20); k--)",
          "",
          "[Added Lines]",
          "230:     memcpy(label, &buffer[0x28], sizeof(label) - 1);",
          "231:     label[sizeof(label) - 1] = 0;",
          "232:     for (k = strlen(label) - 1; (k >= 0) && (label[k] == 0x20); k--)",
          "",
          "---------------"
        ],
        "src/format.c||src/format.c": [
          "File: src/format.c -> src/format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1216:   uprintf(\"Could not read file %s: %s\\n\", dst, WindowsErrorString());",
          "1217:   goto out;",
          "1218:  }",
          "1222:  uprintf(\"Patching file %s\\n\", dst);",
          "",
          "[Removed Lines]",
          "1219:  SetFilePointerEx(handle, liZero, NULL, FILE_BEGIN);",
          "",
          "[Added Lines]",
          "1219:  if (!SetFilePointerEx(handle, liZero, NULL, FILE_BEGIN)) {",
          "1220:   uprintf(\"Could not rewind file %s: %s\\n\", dst, WindowsErrorString());",
          "1221:   goto out;",
          "1222:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1553:     if ((s) && (wSize == rSize))",
          "1554:      break;",
          "1555:     if (s)",
          "1557:     else",
          "1558:      uprintf(\"write error: %s\", WindowsErrorString());",
          "1559:     if (i < WRITE_RETRIES - 1) {",
          "1560:      li.QuadPart = wb;",
          "1562:      uprintf(\"  RETRYING...\\n\");",
          "1563:     } else {",
          "1564:      FormatStatus = ERROR_SEVERITY_ERROR | FAC(FACILITY_STORAGE) | ERROR_WRITE_FAULT;",
          "1565:      goto out;",
          "",
          "[Removed Lines]",
          "1556:      uprintf(\"write error: Wrote %d bytes, expected %d bytes\\n\", wSize, rSize);",
          "1561:      SetFilePointerEx(hPhysicalDrive, li, NULL, FILE_BEGIN);",
          "",
          "[Added Lines]",
          "1559:      uprintf(\"write error: Wrote %d bytes, expected %d bytes\", wSize, rSize);",
          "1565:      if (!SetFilePointerEx(hPhysicalDrive, li, NULL, FILE_BEGIN)) {",
          "1566:       uprintf(\"write error: could not reset position - %s\", WindowsErrorString());",
          "1567:       goto out;",
          "1568:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2136:     uprintf(\"write error: %s\", WindowsErrorString());",
          "2137:    if (i < WRITE_RETRIES-1) {",
          "2138:     li.QuadPart = wb;",
          "2140:     uprintf(\"  RETRYING...\\n\");",
          "2141:    } else {",
          "2142:     FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|ERROR_WRITE_FAULT;",
          "2143:     goto out;",
          "",
          "[Removed Lines]",
          "2139:     SetFilePointerEx(hDestImage, li, NULL, FILE_BEGIN);",
          "",
          "[Added Lines]",
          "2146:     if (!SetFilePointerEx(hDestImage, li, NULL, FILE_BEGIN)) {",
          "2147:      uprintf(\"write error: could not reset position - %s\", WindowsErrorString());",
          "2148:      goto out;",
          "2149:     }",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.12.1014\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.12.1015\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,12,1014,0",
          "338:  PRODUCTVERSION 2,12,1014,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,12,1015,0",
          "338:  PRODUCTVERSION 2,12,1015,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1014\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1014\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1015\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1015\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90dc847e24b693c90e1dcd44077901bca0f2ea66",
      "candidate_info": {
        "commit_hash": "90dc847e24b693c90e1dcd44077901bca0f2ea66",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/90dc847e24b693c90e1dcd44077901bca0f2ea66",
        "files": [
          "configure",
          "configure.ac",
          "res/appstore/AppxManifest.xml",
          "res/appstore/packme.cmd",
          "src/dev.c",
          "src/dos.c",
          "src/dos_locale.c",
          "src/drive.c",
          "src/format.c",
          "src/icon.c",
          "src/iso.c",
          "src/net.c",
          "src/process.c",
          "src/registry.h",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/settings.h",
          "src/smart.c",
          "src/stdfn.c",
          "src/stdio.c",
          "src/stdlg.c",
          "src/vhd.c"
        ],
        "message": "[misc] add static_strcat & static_strcpy and use static_ calls wherever possible\n\n* Also set Rufus next to 2.17 and fix a warning",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "res/appstore/packme.cmd||res/appstore/packme.cmd",
          "src/dev.c||src/dev.c",
          "src/dos.c||src/dos.c",
          "src/dos_locale.c||src/dos_locale.c",
          "src/drive.c||src/drive.c",
          "src/format.c||src/format.c",
          "src/icon.c||src/icon.c",
          "src/iso.c||src/iso.c",
          "src/net.c||src/net.c",
          "src/process.c||src/process.c",
          "src/registry.h||src/registry.h",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/settings.h||src/settings.h",
          "src/smart.c||src/smart.c",
          "src/stdfn.c||src/stdfn.c",
          "src/stdio.c||src/stdio.c",
          "src/stdlg.c||src/stdlg.c",
          "src/vhd.c||src/vhd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: AM_INIT_AUTOMAKE([-Wno-portability foreign no-dist no-dependencies])",
          "3: AC_CONFIG_SRCDIR([src/rufus.c])",
          "4: AC_CONFIG_MACRO_DIR([m4])",
          "",
          "[Removed Lines]",
          "1: AC_INIT([rufus], [2.16], [https://github.com/pbatard/rufus/issues], [rufus], [https://rufus.akeo.ie])",
          "",
          "[Added Lines]",
          "1: AC_INIT([rufus], [2.17], [https://github.com/pbatard/rufus/issues], [rufus], [https://rufus.akeo.ie])",
          "",
          "---------------"
        ],
        "res/appstore/packme.cmd||res/appstore/packme.cmd": [
          "File: res/appstore/packme.cmd -> res/appstore/packme.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: @echo off",
          "4: rem Make sure you don't have anything you don't want included in the package, as anything residing in the",
          "5: rem current directory will be included, including any previous .appx, which makes for nice recursion...",
          "",
          "[Removed Lines]",
          "2: set VERSION=2.16",
          "",
          "[Added Lines]",
          "2: set VERSION=2.17",
          "",
          "---------------"
        ],
        "src/dev.c||src/dev.c": [
          "File: src/dev.c -> src/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   if (!SetupDiGetDeviceRegistryPropertyU(dev_info, &dev_info_data, SPDRP_FRIENDLYNAME,",
          "185:    &datatype, (LPBYTE)str, sizeof(str), &size)) {",
          "186:    uprintf(\"SetupDiGetDeviceRegistryProperty (Friendly Name) failed: %s\\n\", WindowsErrorString());",
          "188:   }",
          "189:   uprintf(\"Found '%s' optical device\", str);",
          "190:   devint_data.cbSize = sizeof(devint_data);",
          "",
          "[Removed Lines]",
          "187:    safe_strcpy(str, sizeof(str), \"Generic Optical Drive\");",
          "",
          "[Added Lines]",
          "187:    static_strcpy(str, \"Generic Optical Drive\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:      label[k] = 0;",
          "246:     img_save->Label = label;",
          "247:    }",
          "249:    img_save->DevicePath = str;",
          "250:    img_save->DeviceSize = DiskGeometry->DiskSize.QuadPart;",
          "251:    safe_closehandle(hDrive);",
          "",
          "[Removed Lines]",
          "248:    safe_strcpy(str, sizeof(str), devint_detail_data->DevicePath);",
          "",
          "[Added Lines]",
          "248:    static_strcpy(str, devint_detail_data->DevicePath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:     &datatype, (LPBYTE)buffer, sizeof(buffer), &size)) {",
          "508:    uprintf(\"SetupDiGetDeviceRegistryProperty (Friendly Name) failed: %s\\n\", WindowsErrorString());",
          "511:   } else if ((!props.is_VHD) && (devid_list != NULL)) {",
          "",
          "[Removed Lines]",
          "510:    safe_strcpy(buffer, sizeof(buffer), lmprintf(MSG_045));",
          "",
          "[Added Lines]",
          "510:    static_strcpy(buffer, lmprintf(MSG_045));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "580: #ifdef FORCED_DEVICE",
          "581:      props.vid = FORCED_VID;",
          "582:      props.pid = FORCED_PID;",
          "584: #endif",
          "585:     }",
          "586:     break;",
          "",
          "[Removed Lines]",
          "583:      safe_strcpy(buffer, sizeof(buffer), FORCED_NAME);",
          "",
          "[Added Lines]",
          "583:      static_strcpy(buffer, FORCED_NAME);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "605:      uuprintf(\"Found non-USB non-removable device '%s' => Eliminated\", buffer);",
          "606:      continue;",
          "607:     }",
          "609:    } else {",
          "610:     static_sprintf(str, \"%04X:%04X\", props.vid, props.pid);",
          "611:    }",
          "",
          "[Removed Lines]",
          "608:     safe_strcpy(str, sizeof(str), \"????:????\"); // Couldn't figure VID:PID",
          "",
          "[Added Lines]",
          "608:     static_strcpy(str, \"????:????\"); // Couldn't figure VID:PID",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "731:      }",
          "735:       lmprintf(MSG_047):label));",
          "736:      for (k=0, remove_drive=0; drive_letters[k] && (!remove_drive); k++) {",
          "738:       letter_name[2] = drive_letters[k];",
          "739:       if (right_to_left_mode)",
          "742:       if (drive_letters[k] == (PathGetDriveNumberU(app_dir) + 'A'))",
          "743:        remove_drive = 1;",
          "744:       if (drive_letters[k] == (PathGetDriveNumberU(system_dir) + 'A'))",
          "",
          "[Removed Lines]",
          "734:      safe_strcpy(entry_msg, sizeof(entry_msg), (((drive_letters[0] != 0) && (drive_letters[1] != 0))?",
          "740:        safe_strcat(entry_msg, sizeof(entry_msg), RIGHT_TO_LEFT_MARK);",
          "741:       safe_strcat(entry_msg, sizeof(entry_msg), letter_name);",
          "",
          "[Added Lines]",
          "734:      static_strcpy(entry_msg, (((drive_letters[0] != 0) && (drive_letters[1] != 0))?",
          "740:        static_strcat(entry_msg, RIGHT_TO_LEFT_MARK);",
          "741:       static_strcat(entry_msg, letter_name);",
          "",
          "---------------"
        ],
        "src/dos.c||src/dos.c": [
          "File: src/dos.c -> src/dos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   return FALSE;",
          "306:  CreateDirectoryA(locale_path, NULL);",
          "308:  len = GetSystemDirectoryA(dllname, sizeof(dllname));",
          "",
          "[Removed Lines]",
          "304:  safe_strcpy(locale_path, sizeof(locale_path), path);",
          "305:  safe_strcat(locale_path, sizeof(locale_path), \"LOCALE\\\\\");",
          "",
          "[Added Lines]",
          "304:  static_strcpy(locale_path, path);",
          "305:  static_strcat(locale_path, \"LOCALE\\\\\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:   uprintf(\"Unable to get system directory: %s\\n\", WindowsErrorString());",
          "311:   goto out;",
          "312:  }",
          "314:  hDLL = LoadLibraryA(dllname);",
          "315:  if (hDLL == NULL) {",
          "316:   uprintf(\"Unable to open %s: %s\\n\", dllname, WindowsErrorString());",
          "",
          "[Removed Lines]",
          "313:  safe_strcat(dllname, sizeof(dllname), \"\\\\diskcopy.dll\");",
          "",
          "[Added Lines]",
          "313:  static_strcat(dllname, \"\\\\diskcopy.dll\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "375:  }",
          "380:  CreateDirectoryA(locale_path, NULL);",
          "382:  for (i=0; i<ARRAYSIZE(res_name); i++) {",
          "383:   res_data = (BYTE*)GetResource(hMainInstance, MAKEINTRESOURCEA(res_id[i]), _RT_RCDATA, res_name[i], &res_size, FALSE);",
          "388:   hFile = CreateFileA(filename, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ, NULL,",
          "389:    CREATE_ALWAYS, (i<2)?(FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_SYSTEM):FILE_ATTRIBUTE_NORMAL, NULL);",
          "",
          "[Removed Lines]",
          "378:  safe_strcpy(locale_path, sizeof(locale_path), path);",
          "379:  safe_strcat(locale_path, sizeof(locale_path), \"LOCALE\\\\\");",
          "385:   safe_strcpy(filename, sizeof(filename), ((i<2)?path:locale_path));",
          "386:   safe_strcat(filename, sizeof(filename), res_name[i]);",
          "",
          "[Added Lines]",
          "378:  static_strcpy(locale_path, path);",
          "379:  static_strcat(locale_path, \"LOCALE\\\\\");",
          "385:   static_strcpy(filename, ((i<2)?path:locale_path));",
          "386:   static_strcat(filename, res_name[i]);",
          "",
          "---------------"
        ],
        "src/dos_locale.c||src/dos_locale.c": [
          "File: src/dos_locale.c -> src/dos_locale.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:  if ((cp == 437) && (strcmp(kb, \"us\") == 0)) {",
          "997:   fd = fopen(filename, \"w+\");",
          "998:   if (fd == NULL) {",
          "999:    uprintf(\"Unable to create 'AUTOEXEC.BAT': %s.\\n\", WindowsErrorString());",
          "",
          "[Removed Lines]",
          "995:   safe_strcpy(filename, sizeof(filename), path);",
          "996:   safe_strcat(filename, sizeof(filename), \"\\\\AUTOEXEC.BAT\");",
          "",
          "[Added Lines]",
          "995:   static_strcpy(filename, path);",
          "996:   static_strcat(filename, \"\\\\AUTOEXEC.BAT\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1008:  }",
          "1013:  fd = fopen(filename, \"w+\");",
          "1014:  if (fd == NULL) {",
          "1015:   uprintf(\"Unable to create 'CONFIG.SYS': %s.\\n\", WindowsErrorString());",
          "",
          "[Removed Lines]",
          "1011:  safe_strcpy(filename, sizeof(filename), path);",
          "1012:  safe_strcat(filename, sizeof(filename), \"\\\\CONFIG.SYS\");",
          "",
          "[Added Lines]",
          "1011:  static_strcpy(filename, path);",
          "1012:  static_strcat(filename, \"\\\\CONFIG.SYS\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1033:  uprintf(\"Successfully wrote 'CONFIG.SYS'\\n\");",
          "1038:  fd = fopen(filename, \"w+\");",
          "1039:  if (fd == NULL) {",
          "1040:   uprintf(\"Unable to create 'AUTOEXEC.BAT': %s.\\n\", WindowsErrorString());",
          "",
          "[Removed Lines]",
          "1036:  safe_strcpy(filename, sizeof(filename), path);",
          "1037:  safe_strcat(filename, sizeof(filename), \"\\\\AUTOEXEC.BAT\");",
          "",
          "[Added Lines]",
          "1036:  static_strcpy(filename, path);",
          "1037:  static_strcat(filename, \"\\\\AUTOEXEC.BAT\");",
          "",
          "---------------"
        ],
        "src/drive.c||src/drive.c": [
          "File: src/drive.c -> src/drive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:  char physical_name[24];",
          "206:  CheckDriveIndex(DriveIndex);",
          "208:  success = TRUE;",
          "209: out:",
          "210:  return (success)?safe_strdup(physical_name):NULL;",
          "",
          "[Removed Lines]",
          "207:  safe_sprintf(physical_name, sizeof(physical_name), \"\\\\\\\\.\\\\PHYSICALDRIVE%lu\", DriveIndex);",
          "",
          "[Added Lines]",
          "207:  static_sprintf(physical_name, \"\\\\\\\\.\\\\PHYSICALDRIVE%lu\", DriveIndex);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:   if ((_drive_type != DRIVE_REMOVABLE) && (_drive_type != DRIVE_FIXED))",
          "445:    continue;",
          "448:   hDrive = CreateFileA(logical_drive, GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_WRITE,",
          "449:    NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);",
          "450:   if (hDrive == INVALID_HANDLE_VALUE) {",
          "",
          "[Removed Lines]",
          "447:   safe_sprintf(logical_drive, sizeof(logical_drive), \"\\\\\\\\.\\\\%c:\", drive[0]);",
          "",
          "[Added Lines]",
          "447:   static_sprintf(logical_drive, \"\\\\\\\\.\\\\%c:\", drive[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "552:  safe_closehandle(hPhysical);",
          "553:  if (AutorunLabel != NULL) {",
          "554:   uprintf(\"Using autorun.inf label for drive %c: '%s'\\n\", letters[0], AutorunLabel);",
          "556:   safe_free(AutorunLabel);",
          "558:  } else if (GetVolumeInformationU(DrivePath, VolumeLabel, ARRAYSIZE(VolumeLabel),",
          "",
          "[Removed Lines]",
          "555:   safe_strcpy(VolumeLabel, sizeof(VolumeLabel), AutorunLabel);",
          "",
          "[Added Lines]",
          "555:   static_strcpy(VolumeLabel, AutorunLabel);",
          "",
          "---------------"
        ],
        "src/format.c||src/format.c": [
          "File: src/format.c -> src/format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:  if (PathFileExistsA(path)) {",
          "718:   uprintf(\"Windows selected the UEFI:NTFS partition for formatting - Retry needed\", VolumeName);",
          "719:   FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|ERROR_RETRY;",
          "",
          "[Removed Lines]",
          "715:  safe_strcpy(path, MAX_PATH, VolumeName);",
          "716:  safe_strcat(path, MAX_PATH, \"EFI\\\\Rufus\\\\ntfs_x64.efi\");",
          "",
          "[Added Lines]",
          "715:  static_strcpy(path, VolumeName);",
          "716:  static_strcat(path, \"EFI\\\\Rufus\\\\ntfs_x64.efi\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1168:  index = ((img_report.winpe&WINPE_I386) == WINPE_I386)?0:1;",
          "1175:  CopyFileA(src, dst, TRUE);",
          "1176:  if (!img_report.uses_minint) {",
          "1180:   if (!CopyFileA(src, dst, TRUE)) {",
          "1181:    uprintf(\"Did not copy %s as %s: %s\\n\", src, dst, WindowsErrorString());",
          "1182:   }",
          "",
          "[Removed Lines]",
          "1170:  safe_sprintf(setupsrcdev, sizeof(setupsrcdev),",
          "1171:   \"SetupSourceDevice = \\\"\\\\device\\\\harddisk%d\\\\partition1\\\"\", ComboBox_GetCurSel(hDiskID));",
          "1173:  safe_sprintf(src, sizeof(src), \"%c:\\\\%s\\\\ntdetect.com\", drive_letter, basedir[index]);",
          "1174:  safe_sprintf(dst, sizeof(dst), \"%c:\\\\ntdetect.com\", drive_letter);",
          "1178:   safe_sprintf(src, sizeof(src), \"%c:\\\\%s\\\\txtsetup.sif\", drive_letter, basedir[index]);",
          "1179:   safe_sprintf(dst, sizeof(dst), \"%c:\\\\txtsetup.sif\", drive_letter);",
          "",
          "[Added Lines]",
          "1170:  static_sprintf(setupsrcdev, \"SetupSourceDevice = \\\"\\\\device\\\\harddisk%d\\\\partition1\\\"\",",
          "1171:   ComboBox_GetCurSel(hDiskID));",
          "1173:  static_sprintf(src, \"%c:\\\\%s\\\\ntdetect.com\", drive_letter, basedir[index]);",
          "1174:  static_sprintf(dst, \"%c:\\\\ntdetect.com\", drive_letter);",
          "1178:   static_sprintf(src, \"%c:\\\\%s\\\\txtsetup.sif\", drive_letter, basedir[index]);",
          "1179:   static_sprintf(dst, \"%c:\\\\txtsetup.sif\", drive_letter);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1187:   uprintf(\"Successfully added '%s' to %s\\n\", setupsrcdev, dst);",
          "1188:  }",
          "1192:  if (!CopyFileA(src, dst, TRUE)) {",
          "1193:   uprintf(\"Did not copy %s as %s: %s\\n\", src, dst, WindowsErrorString());",
          "1194:  }",
          "",
          "[Removed Lines]",
          "1190:  safe_sprintf(src, sizeof(src), \"%c:\\\\%s\\\\setupldr.bin\", drive_letter,  basedir[index]);",
          "1191:  safe_sprintf(dst, sizeof(dst), \"%c:\\\\BOOTMGR\", drive_letter);",
          "",
          "[Added Lines]",
          "1190:  static_sprintf(src, \"%c:\\\\%s\\\\setupldr.bin\", drive_letter,  basedir[index]);",
          "1191:  static_sprintf(dst, \"%c:\\\\BOOTMGR\", drive_letter);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1309:   || (GetTempFileNameU(tmp_path, APPLICATION_NAME, 0, xml_file) == 0)",
          "1310:   || (xml_file[0] == 0)) {",
          "1313:  }",
          "1315:  DeleteFileU(xml_file);",
          "",
          "[Removed Lines]",
          "1312:   safe_strcpy(xml_file, sizeof(xml_file), \".\\\\RufVXml.tmp\");",
          "",
          "[Added Lines]",
          "1312:   static_strcpy(xml_file, \".\\\\RufVXml.tmp\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1773:    userdir = getenvU(\"USERPROFILE\");",
          "1775:    safe_free(userdir);",
          "1776:    GetLocalTime(&lt);",
          "1777:    safe_sprintf(&logfile[strlen(logfile)], sizeof(logfile)-strlen(logfile)-1,",
          "",
          "[Removed Lines]",
          "1774:    safe_strcpy(logfile, MAX_PATH, userdir);",
          "",
          "[Added Lines]",
          "1774:    static_strcpy(logfile, userdir);",
          "",
          "---------------"
        ],
        "src/icon.c||src/icon.c": [
          "File: src/icon.c -> src/icon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:  char filename[64];",
          "161:  wchar_t wlabel[128], wRufusVersion[32];",
          "164:  fd = fopen(filename, \"r\"); // If there's an existing autorun, don't overwrite",
          "165:  if (fd != NULL) {",
          "166:   uprintf(\"%s already exists - keeping it\", filename);",
          "",
          "[Removed Lines]",
          "163:  safe_sprintf(filename, sizeof(filename), \"%sautorun.inf\", path);",
          "",
          "[Added Lines]",
          "163:  static_sprintf(filename, \"%sautorun.inf\", path);",
          "",
          "---------------"
        ],
        "src/iso.c||src/iso.c": [
          "File: src/iso.c -> src/iso.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:   if ((img_report.reactos_path[0] == 0) && (safe_stricmp(psz_basename, reactos_name) == 0))",
          "208:   if (!HAS_EFI_IMG(img_report) && (safe_stricmp(psz_basename, efi_img_name) == 0))",
          "212:   if (safe_stricmp(psz_dirname, efi_dirname) == 0) {",
          "",
          "[Removed Lines]",
          "205:    safe_strcpy(img_report.reactos_path, sizeof(img_report.reactos_path), psz_fullpath);",
          "209:    safe_strcpy(img_report.efi_img_path, sizeof(img_report.efi_img_path), psz_fullpath);",
          "",
          "[Added Lines]",
          "205:    static_strcpy(img_report.reactos_path, psz_fullpath);",
          "209:    static_strcpy(img_report.efi_img_path, psz_fullpath);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "633:  for (i=0; i<buf_size; i++) {",
          "634:   if (memcmp(&buf[i], grub_version_str, sizeof(grub_version_str)) == 0) {",
          "636:    break;",
          "637:   }",
          "638:  }",
          "",
          "[Removed Lines]",
          "635:    safe_strcpy(img_report.grub2_version, sizeof(img_report.grub2_version), &buf[i + sizeof(grub_version_str)]);",
          "",
          "[Added Lines]",
          "635:    static_strcpy(img_report.grub2_version, &buf[i + sizeof(grub_version_str)]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "738:  i_joliet_level = iso9660_ifs_get_joliet_level(p_iso);",
          "739:  if (scan_only) {",
          "740:   if (iso9660_ifs_get_volume_id(p_iso, &tmp)) {",
          "742:    safe_free(tmp);",
          "743:   } else",
          "744:    img_report.label[0] = 0;",
          "",
          "[Removed Lines]",
          "741:    safe_strcpy(img_report.label, sizeof(img_report.label), tmp);",
          "",
          "[Added Lines]",
          "741:    static_strcpy(img_report.label, tmp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "780:     if ( (_stricmp(config_path.String[i], \"/boot/i386/loader/isolinux.cfg\") == 0) ||",
          "781:       (_stricmp(config_path.String[i], \"/boot/x86_64/loader/isolinux.cfg\") == 0)) {",
          "783:      img_report.needs_syslinux_overwrite = TRUE;",
          "784:      break;",
          "785:     }",
          "",
          "[Removed Lines]",
          "782:      safe_strcpy(img_report.cfg_path, sizeof(img_report.cfg_path), config_path.String[i]);",
          "",
          "[Added Lines]",
          "782:      static_strcpy(img_report.cfg_path, config_path.String[i]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "791:     if (safe_strlen(img_report.cfg_path) >= safe_strlen(config_path.String[i]))",
          "793:    }",
          "794:    uprintf(\"  Will use '%s' for Syslinux\", img_report.cfg_path);",
          "",
          "[Removed Lines]",
          "792:      safe_strcpy(img_report.cfg_path, sizeof(img_report.cfg_path), config_path.String[i]);",
          "",
          "[Added Lines]",
          "792:      static_strcpy(img_report.cfg_path, config_path.String[i]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "811:      fclose(fd);",
          "812:      sl_version = GetSyslinuxVersion(buf, size, &ext);",
          "813:      if (img_report.sl_version == 0) {",
          "815:       img_report.sl_version = sl_version;",
          "816:       sl_index = i;",
          "817:      } else if ((img_report.sl_version != sl_version) || (safe_strcmp(img_report.sl_version_ext, ext) != 0)) {",
          "",
          "[Removed Lines]",
          "814:       safe_strcpy(img_report.sl_version_ext, sizeof(img_report.sl_version_ext), ext);",
          "",
          "[Added Lines]",
          "814:       static_strcpy(img_report.sl_version_ext, ext);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "823:       for (j=safe_strlen(img_report.cfg_path); (j>0) && (img_report.cfg_path[j]!='/'); j--);",
          "824:       if (safe_strnicmp(img_report.cfg_path, isolinux_path.String[i], j) == 0) {",
          "826:        img_report.sl_version = sl_version;",
          "827:        sl_index = i;",
          "828:       }",
          "",
          "[Removed Lines]",
          "825:        safe_strcpy(img_report.sl_version_ext, sizeof(img_report.sl_version_ext), ext);",
          "",
          "[Added Lines]",
          "825:        static_strcpy(img_report.sl_version_ext, ext);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "859:     basedir[((img_report.winpe&WINPE_I386) == WINPE_I386)?0:1]);",
          "860:    ExtractISOFile(src_iso, path, tmp_sif, FILE_ATTRIBUTE_NORMAL);",
          "861:    tmp = get_token_data_file(\"OsLoadOptions\", tmp_sif);",
          "",
          "[Removed Lines]",
          "858:    safe_sprintf(path, sizeof(path), \"/%s/txtsetup.sif\",",
          "",
          "[Added Lines]",
          "858:    static_sprintf(path, \"/%s/txtsetup.sif\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "903:   if (img_report.has_efi == 0x80)",
          "904:    ExtractEfiImgFiles(dest_dir);",
          "905:   if (HAS_SYSLINUX(img_report)) {",
          "908:    fd = fopen(path, \"r\");",
          "909:    if (fd != NULL && img_report.needs_syslinux_overwrite) {",
          "910:     fclose(fd);",
          "911:     fd = NULL;",
          "913:     uprintf(\"Renaming: %s \u2794 %s\", path, path2);",
          "914:     IGNORE_RETVAL(rename(path, path2));",
          "915:    }",
          "",
          "[Removed Lines]",
          "906:    safe_sprintf(path, sizeof(path), \"%s\\\\syslinux.cfg\", dest_dir);",
          "912:     safe_sprintf(path2, sizeof(path2), \"%s\\\\syslinux.org\", dest_dir);",
          "",
          "[Added Lines]",
          "906:    static_sprintf(path, \"%s\\\\syslinux.cfg\", dest_dir);",
          "912:     static_sprintf(path2, \"%s\\\\syslinux.org\", dest_dir);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1166:  iso9660_readfat_private* p_private = NULL;",
          "1167:  libfat_sector_t s;",
          "1168:  int32_t dc, c;",
          "1170:  struct libfat_direntry direntry;",
          "1171:  char name[12] = { 0 };",
          "1172:  char path[64];",
          "",
          "[Removed Lines]",
          "1169:  struct libfat_filesystem *fs;",
          "",
          "[Added Lines]",
          "1169:  struct libfat_filesystem *fs = NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1244:      uprintf(\"Could not create directory '%s': %s\\n\", path, WindowsErrorString());",
          "1245:      continue;",
          "1246:     }",
          "1248:     if (!CreateDirectoryA(path, 0) && (GetLastError() != ERROR_ALREADY_EXISTS)) {",
          "1249:      uprintf(\"Could not create directory '%s': %s\\n\", path, WindowsErrorString());",
          "1250:      continue;",
          "1251:     }",
          "1254:     uprintf(\"Extracting: %s (from '%s', %s)\", path, img_report.efi_img_path,",
          "1255:      SizeToHumanReadable(file_size, FALSE, FALSE));",
          "1256:     handle = CreateFileA(path, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ,",
          "",
          "[Removed Lines]",
          "1247:     safe_strcat(path, sizeof(path), \"\\\\boot\");",
          "1252:     safe_strcat(path, sizeof(path), \"\\\\\");",
          "1253:     safe_strcat(path, sizeof(path), efi_bootname[i]);",
          "",
          "[Added Lines]",
          "1247:     static_strcat(path, \"\\\\boot\");",
          "1252:     static_strcat(path, \"\\\\\");",
          "1253:     static_strcat(path, efi_bootname[i]);",
          "",
          "---------------"
        ],
        "src/net.c||src/net.c": [
          "File: src/net.c -> src/net.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   InternetGetLastResponseInfoA(&error_code, error_string, &size);",
          "206:   return error_string;",
          "207:  default:",
          "209:   return error_string;",
          "210:  }",
          "211: }",
          "",
          "[Removed Lines]",
          "208:   safe_sprintf(error_string, sizeof(error_string), \"Unknown internet error 0x%08lX\", error_code);",
          "",
          "[Added Lines]",
          "208:   static_sprintf(error_string, \"Unknown internet error 0x%08lX\", error_code);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:   uprintf(\"Network is unavailable: %s\\n\", WinInetErrorString());",
          "276:   goto out;",
          "277:  }",
          "279:   rufus_version[0], rufus_version[1], rufus_version[2],",
          "280:   nWindowsVersion>>4, nWindowsVersion&0x0F, is_x64()?\"; WOW64\":\"\");",
          "281:  hSession = InternetOpenA(agent, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);",
          "",
          "[Removed Lines]",
          "278:  safe_sprintf(agent, ARRAYSIZE(agent), APPLICATION_NAME \"/%d.%d.%d (Windows NT %d.%d%s)\",",
          "",
          "[Added Lines]",
          "278:  static_sprintf(agent, APPLICATION_NAME \"/%d.%d.%d (Windows NT %d.%d%s)\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467:   goto out;",
          "468:  hostname[sizeof(hostname)-1] = 0;",
          "471:   rufus_version[0], rufus_version[1], rufus_version[2],",
          "472:   nWindowsVersion >> 4, nWindowsVersion & 0x0F, is_x64() ? \"; WOW64\" : \"\");",
          "473:  hSession = InternetOpenA(agent, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);",
          "",
          "[Removed Lines]",
          "470:  safe_sprintf(agent, ARRAYSIZE(agent), APPLICATION_NAME \"/%d.%d.%d (Windows NT %d.%d%s)\",",
          "",
          "[Added Lines]",
          "470:  static_sprintf(agent, APPLICATION_NAME \"/%d.%d.%d (Windows NT %d.%d%s)\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "497:    (k==0)?\"\":channel[k], archname[is_x64()?1:0], os_version.dwMajorVersion, os_version.dwMinorVersion);",
          "498:   vuprintf(\"Base update check: %s\\n\", urlpath);",
          "499:   for (i=0, j=(int)safe_strlen(urlpath)-5; (j>0)&&(i<ARRAYSIZE(verpos)); j--) {",
          "",
          "[Removed Lines]",
          "496:   safe_sprintf(urlpath, sizeof(urlpath), \"%s%s%s_%s_%lu.%lu.ver\", APPLICATION_NAME, (k==0)?\"\":\"_\",",
          "",
          "[Added Lines]",
          "496:   static_sprintf(urlpath, \"%s%s%s_%s_%lu.%lu.ver\", APPLICATION_NAME, (k==0)?\"\":\"_\",",
          "",
          "---------------"
        ],
        "src/process.c||src/process.c": [
          "File: src/process.c -> src/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:  case STATUS_NOT_SUPPORTED:",
          "105:   return \"Operation is not supported\";",
          "106:  default:",
          "108:   return unknown;",
          "109:  }",
          "110: }",
          "",
          "[Removed Lines]",
          "107:   safe_sprintf(unknown, sizeof(unknown), \"Unknown error 0x%08lx\", Status);",
          "",
          "[Added Lines]",
          "107:   static_sprintf(unknown, \"Unknown error 0x%08lx\", Status);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "512:   if (!bGotExePath) {",
          "514:     (ULONGLONG)handleInfo->UniqueProcessId);",
          "515:   }",
          "516:  }",
          "",
          "[Removed Lines]",
          "513:    safe_sprintf(exe_path, MAX_PATH, \"Unknown_Process_%\" PRIu64,",
          "",
          "[Added Lines]",
          "513:    static_sprintf(exe_path, \"Unknown_Process_%\" PRIu64,",
          "",
          "---------------"
        ],
        "src/registry.h||src/registry.h": [
          "File: src/registry.h -> src/registry.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:    if (i + sizeof(software_prefix) >= sizeof(long_key_name))",
          "90:     return FALSE;",
          "91:    strcpy(long_key_name, software_prefix);",
          "93:    long_key_name[sizeof(software_prefix) + i - 1] = 0;",
          "94:   } else {",
          "95:    if (i >= sizeof(long_key_name))",
          "96:     return FALSE;",
          "98:    long_key_name[i] = 0;",
          "99:   }",
          "100:   i++;",
          "",
          "[Removed Lines]",
          "92:    safe_strcat(long_key_name, sizeof(long_key_name), key_name);",
          "97:    safe_strcpy(long_key_name, sizeof(long_key_name), key_name);",
          "",
          "[Added Lines]",
          "92:    static_strcat(long_key_name, key_name);",
          "97:    static_strcpy(long_key_name, key_name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:    if (i + sizeof(software_prefix) >= sizeof(long_key_name))",
          "165:     goto out;",
          "166:    strcpy(long_key_name, software_prefix);",
          "168:    long_key_name[sizeof(software_prefix) + i - 1] = 0;",
          "169:   } else {",
          "170:    if (i >= sizeof(long_key_name))",
          "171:     goto out;",
          "173:    long_key_name[i] = 0;",
          "174:   }",
          "175:   i++;",
          "",
          "[Removed Lines]",
          "167:    safe_strcat(long_key_name, sizeof(long_key_name), key_name);",
          "172:    safe_strcpy(long_key_name, sizeof(long_key_name), key_name);",
          "",
          "[Added Lines]",
          "167:    static_strcat(long_key_name, key_name);",
          "172:    static_strcpy(long_key_name, key_name);",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:    tmp[0] = 0;",
          "307:    if ((fs == FS_FAT32) && ((SelectedDrive.DiskSize > LARGE_FAT32_SIZE) || (force_large_fat32)))",
          "310:    if (default_fs == FS_UNKNOWN) {",
          "311:     entry = lmprintf(MSG_030, tmp);",
          "312:     default_fs = fs;",
          "",
          "[Removed Lines]",
          "308:     safe_strcat(tmp, sizeof(tmp), \"Large \");",
          "309:    safe_strcat(tmp, sizeof(tmp), FileSystemLabel[fs]);",
          "",
          "[Added Lines]",
          "308:     static_strcat(tmp, \"Large \");",
          "309:    static_strcat(tmp, FileSystemLabel[fs]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "665:  EnableBootOptions(TRUE, TRUE);",
          "669:   SizeToHumanReadable(SelectedDrive.DiskSize, FALSE, use_fake_units));",
          "",
          "[Removed Lines]",
          "668:  safe_sprintf(SelectedDrive.proposed_label, sizeof(SelectedDrive.proposed_label),",
          "",
          "[Added Lines]",
          "668:  static_sprintf(SelectedDrive.proposed_label,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "925: static void CALLBACK ClockTimer(HWND hWnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime)",
          "926: {",
          "927:  timer++;",
          "930:  SendMessageA(hStatus, SB_SETTEXTA, SBT_OWNERDRAW | SB_SECTION_RIGHT, (LPARAM)szTimer);",
          "931: }",
          "",
          "[Removed Lines]",
          "928:  safe_sprintf(szTimer, sizeof(szTimer), \"%02d:%02d:%02d\",",
          "929:   timer/3600, (timer%3600)/60, timer%60);",
          "",
          "[Added Lines]",
          "928:  static_sprintf(szTimer, \"%02d:%02d:%02d\", timer/3600, (timer%3600)/60, timer%60);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1402:      if ((grub2_len == 0) && (DownloadStatus == 404)) {",
          "1404:       uprintf(\"Extended version was not found, trying main version...\");",
          "1407:       for (i = 0; ((tmp2[i] >= '0') && (tmp2[i] <= '9')) || (tmp2[i] == '.'); i++);",
          "1408:       tmp2[i] = 0;",
          "",
          "[Removed Lines]",
          "1405:       safe_strcpy(tmp2, sizeof(tmp2), img_report.grub2_version);",
          "",
          "[Added Lines]",
          "1404:       static_strcpy(tmp2, img_report.grub2_version);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1752:   } else {",
          "1753:    embedded_sl_version[i] = GetSyslinuxVersion(buf, len, &ext);",
          "1754:    static_sprintf(embedded_sl_version_str[i], \"%d.%02d\", SL_MAJOR(embedded_sl_version[i]), SL_MINOR(embedded_sl_version[i]));",
          "1756:    free(buf);",
          "1757:   }",
          "1758:  }",
          "",
          "[Removed Lines]",
          "1755:    safe_strcpy(embedded_sl_version_ext[i], sizeof(embedded_sl_version_ext[i]), ext);",
          "",
          "[Added Lines]",
          "1754:    static_strcpy(embedded_sl_version_ext[i], ext);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1972:    static_sprintf(lang, LEFT_TO_RIGHT_EMBEDDING \"(%s) \" POP_DIRECTIONAL_FORMATTING \"%s\", r, l);",
          "1973:    safe_free(str);",
          "1974:   } else {",
          "1976:   }",
          "1977:   InsertMenuU(menu, -1, MF_BYPOSITION|((selected_locale == lcmd)?MF_CHECKED:0), UM_LANGUAGE_MENU_MAX++, lang);",
          "1978:  }",
          "",
          "[Removed Lines]",
          "1975:    safe_strcpy(lang, sizeof(lang), lcmd->txt[1]);",
          "",
          "[Added Lines]",
          "1974:    static_strcpy(lang, lcmd->txt[1]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2047:  ULARGE_INTEGER free_space;",
          "2049:  if (DriveIndex >= 0)",
          "2051:  if ((DriveIndex != CB_ERR) && (!format_op_in_progress) && (format_thid == NULL)) {",
          "2052:   img_save.Type = IMG_SAVE_TYPE_VHD;",
          "2053:   img_save.DeviceNum = (DWORD)ComboBox_GetItemData(hDeviceList, DriveIndex);",
          "",
          "[Removed Lines]",
          "2050:   safe_sprintf(filename, sizeof(filename), \"%s.vhd\", DriveLabel.String[DriveIndex]);",
          "",
          "[Added Lines]",
          "2049:   static_sprintf(filename, \"%s.vhd\", DriveLabel.String[DriveIndex]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2075:      uprintf(\"\\r\\nSave to VHD operation started\");",
          "2076:      PrintInfo(0, -1);",
          "2077:      timer = 0;",
          "2079:      SendMessageA(hStatus, SB_SETTEXTA, SBT_OWNERDRAW | SB_SECTION_RIGHT, (LPARAM)szTimer);",
          "2080:      SetTimer(hMainDialog, TID_APP_TIMER, 1000, ClockTimer);",
          "2081:     } else {",
          "",
          "[Removed Lines]",
          "2078:      safe_sprintf(szTimer, sizeof(szTimer), \"00:00:00\");",
          "",
          "[Added Lines]",
          "2077:      static_sprintf(szTimer, \"00:00:00\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2120:   (img_save.BufSize > 8 * MB) && (img_save.DeviceSize <= img_save.BufSize * 64);",
          "2121:   img_save.BufSize /= 2);",
          "2122:  if ((img_save.Label != NULL) && (img_save.Label[0] != 0))",
          "2124:  uprintf(\"ISO media size %s\", SizeToHumanReadable(img_save.DeviceSize, FALSE, FALSE));",
          "2126:  img_save.ImagePath = FileDialog(TRUE, NULL, &img_ext, 0);",
          "",
          "[Removed Lines]",
          "2123:   safe_sprintf(filename, sizeof(filename), \"%s.iso\", img_save.Label);",
          "",
          "[Added Lines]",
          "2122:   static_sprintf(filename, \"%s.iso\", img_save.Label);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2141:   uprintf(\"\\r\\nSave to ISO operation started\");",
          "2142:   PrintInfo(0, -1);",
          "2143:   timer = 0;",
          "2145:   SendMessageA(hStatus, SB_SETTEXTA, SBT_OWNERDRAW | SB_SECTION_RIGHT, (LPARAM)szTimer);",
          "2146:   SetTimer(hMainDialog, TID_APP_TIMER, 1000, ClockTimer);",
          "2147:  } else {",
          "",
          "[Removed Lines]",
          "2144:   safe_sprintf(szTimer, sizeof(szTimer), \"00:00:00\");",
          "",
          "[Added Lines]",
          "2143:   static_sprintf(szTimer, \"00:00:00\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2612:      uprintf(\"\\r\\nFormat operation started\");",
          "2613:      PrintInfo(0, -1);",
          "2614:      timer = 0;",
          "2616:      SendMessageA(hStatus, SB_SETTEXTA, SBT_OWNERDRAW | SB_SECTION_RIGHT, (LPARAM)szTimer);",
          "2617:      SetTimer(hMainDialog, TID_APP_TIMER, 1000, ClockTimer);",
          "2618:     }",
          "",
          "[Removed Lines]",
          "2615:      safe_sprintf(szTimer, sizeof(szTimer), \"00:00:00\");",
          "",
          "[Added Lines]",
          "2614:      static_sprintf(szTimer, \"00:00:00\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2645:     if (format_thid != NULL) {",
          "2646:      PrintInfo(0, -1);",
          "2647:      timer = 0;",
          "2649:      SendMessageA(hStatus, SB_SETTEXTA, SBT_OWNERDRAW | SB_SECTION_RIGHT, (LPARAM)szTimer);",
          "2650:      SetTimer(hMainDialog, TID_APP_TIMER, 1000, ClockTimer);",
          "2651:     } else {",
          "",
          "[Removed Lines]",
          "2648:      safe_sprintf(szTimer, sizeof(szTimer), \"00:00:00\");",
          "",
          "[Added Lines]",
          "2647:      static_sprintf(szTimer, \"00:00:00\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3116:  }",
          "3117:  if (GetSystemDirectoryU(system_dir, sizeof(system_dir)) == 0) {",
          "3118:   uprintf(\"Could not get system directory: %s\", WindowsErrorString());",
          "3120:  }",
          "3121:  if (GetTempPathU(sizeof(temp_dir), temp_dir) == 0) {",
          "3122:   uprintf(\"Could not get temp directory: %s\", WindowsErrorString());",
          "3124:  }",
          "3130: #if (!defined(_WIN64) && !defined(BUILD64))",
          "3131:  if (is_x64()) {",
          "3132:   if (GetSystemWindowsDirectoryU(sysnative_dir, sizeof(sysnative_dir)) == 0) {",
          "3133:    uprintf(\"Could not get Windows directory: %s\", WindowsErrorString());",
          "3135:   }",
          "3137:  }",
          "3138: #endif",
          "",
          "[Removed Lines]",
          "3119:   safe_strcpy(system_dir, sizeof(system_dir), \"C:\\\\Windows\\\\System32\");",
          "3123:   safe_strcpy(temp_dir, sizeof(temp_dir), \".\\\\\");",
          "3128:  safe_strcpy(sysnative_dir, sizeof(sysnative_dir), system_dir);",
          "3134:    safe_strcpy(sysnative_dir, sizeof(sysnative_dir), \"C:\\\\Windows\");",
          "3136:   safe_strcat(sysnative_dir, sizeof(sysnative_dir), \"\\\\Sysnative\");",
          "",
          "[Added Lines]",
          "3118:   static_strcpy(system_dir, \"C:\\\\Windows\\\\System32\");",
          "3122:   static_strcpy(temp_dir, \".\\\\\");",
          "3127:  static_strcpy(sysnative_dir, system_dir);",
          "3133:    static_strcpy(sysnative_dir, \"C:\\\\Windows\");",
          "3135:   static_strcat(sysnative_dir, \"\\\\Sysnative\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3181:   loc_data = (BYTE*)GetResource(hMainInstance, MAKEINTRESOURCEA(IDR_LC_RUFUS_LOC), _RT_RCDATA, \"embedded.loc\", &loc_size, FALSE);",
          "3182:   if ( (GetTempFileNameU(temp_dir, APPLICATION_NAME, 0, loc_file) == 0) || (loc_file[0] == 0) ) {",
          "3185:   }",
          "3187:   hFile = CreateFileU(loc_file, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ,",
          "",
          "[Removed Lines]",
          "3184:    safe_strcpy(loc_file, sizeof(loc_file), rufus_loc);",
          "",
          "[Added Lines]",
          "3183:    static_strcpy(loc_file, rufus_loc);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3194:   uprintf(\"localization: extracted data to '%s'\", loc_file);",
          "3195:   safe_closehandle(hFile);",
          "3196:  } else {",
          "3198:   external_loc_file = TRUE;",
          "3199:   uprintf(\"using external loc file '%s'\", loc_file);",
          "3200:  }",
          "",
          "[Removed Lines]",
          "3197:   safe_sprintf(loc_file, sizeof(loc_file), \"%s\\\\%s\", app_dir, rufus_loc);",
          "",
          "[Added Lines]",
          "3196:   static_sprintf(loc_file, \"%s\\\\%s\", app_dir, rufus_loc);",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: #define safe_strcp(dst, dst_max, src, count) do {memcpy(dst, src, safe_min(count, dst_max)); \\",
          "96:  ((char*)dst)[safe_min(count, dst_max)-1] = 0;} while(0)",
          "97: #define safe_strcpy(dst, dst_max, src) safe_strcp(dst, dst_max, src, safe_strlen(src)+1)",
          "98: #define safe_strncat(dst, dst_max, src, count) strncat(dst, src, safe_min(count, dst_max - safe_strlen(dst) - 1))",
          "99: #define safe_strcat(dst, dst_max, src) safe_strncat(dst, dst_max, src, safe_strlen(src)+1)",
          "100: #define safe_strcmp(str1, str2) strcmp(((str1==NULL)?\"<NULL>\":str1), ((str2==NULL)?\"<NULL>\":str2))",
          "101: #define safe_strstr(str1, str2) strstr(((str1==NULL)?\"<NULL>\":str1), ((str2==NULL)?\"<NULL>\":str2))",
          "102: #define safe_stricmp(str1, str2) _stricmp(((str1==NULL)?\"<NULL>\":str1), ((str2==NULL)?\"<NULL>\":str2))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: #define static_strcpy(dst, src) safe_strcpy(dst, sizeof(dst), src)",
          "101: #define static_strcat(dst, src) safe_strcat(dst, sizeof(dst), src)",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.16.1174\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.17.1175\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,16,1174,0",
          "370:  PRODUCTVERSION 2,16,1174,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,17,1175,0",
          "370:  PRODUCTVERSION 2,17,1175,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1174\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1174\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.17.1175\"",
          "393:             VALUE \"ProductVersion\", \"2.17.1175\"",
          "",
          "---------------"
        ],
        "src/settings.h||src/settings.h": [
          "File: src/settings.h -> src/settings.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:  str[0] = 0;",
          "95:  val = get_token_data_file(key, ini_file);",
          "96:  if (val != NULL) {",
          "98:   free(val);",
          "99:  }",
          "100:  return str;",
          "",
          "[Removed Lines]",
          "97:   safe_strcpy(str, sizeof(str), val);",
          "",
          "[Added Lines]",
          "97:   static_strcpy(str, val);",
          "",
          "---------------"
        ],
        "src/smart.c||src/smart.c": [
          "File: src/smart.c -> src/smart.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  static char scsi_err[64];",
          "70:  if ((errcode > 0) && (errcode <= 0xff)) {",
          "72:   return (const char*)scsi_err;",
          "73:  }",
          "",
          "[Removed Lines]",
          "71:   safe_sprintf(scsi_err, sizeof(scsi_err), \"SCSI status: 0x%02X\", (uint8_t)errcode);",
          "",
          "[Added Lines]",
          "71:   static_sprintf(scsi_err, \"SCSI status: 0x%02X\", (uint8_t)errcode);",
          "",
          "---------------"
        ],
        "src/stdfn.c||src/stdfn.c": [
          "File: src/stdfn.c -> src/stdfn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:  BOOL ws;",
          "237:  nWindowsVersion = WINDOWS_UNDEFINED;",
          "240:  memset(&vi, 0, sizeof(vi));",
          "241:  vi.dwOSVersionInfoSize = sizeof(vi);",
          "",
          "[Removed Lines]",
          "238:  safe_strcpy(WindowsVersionStr, sizeof(WindowsVersionStr), \"Windows Undefined\");",
          "",
          "[Added Lines]",
          "238:  static_strcpy(WindowsVersionStr, \"Windows Undefined\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:   GetRegistryKeyStr(REGKEY_HKLM, \"Microsoft\\\\Windows NT\\\\CurrentVersion\\\\CurrentBuildNumber\", build_number, sizeof(build_number));",
          "330:   if (build_number[0] != 0) {",
          "331:    nWindowsBuildNumber = atoi(build_number); // Keep a global copy",
          "335:   }",
          "336:  }",
          "",
          "[Removed Lines]",
          "332:    safe_strcat(WindowsVersionStr, sizeof(WindowsVersionStr), \" (Build \");",
          "333:    safe_strcat(WindowsVersionStr, sizeof(WindowsVersionStr), build_number);",
          "334:    safe_strcat(WindowsVersionStr, sizeof(WindowsVersionStr), \")\");",
          "",
          "[Added Lines]",
          "332:    static_strcat(WindowsVersionStr, \" (Build \");",
          "333:    static_strcat(WindowsVersionStr, build_number);",
          "334:    static_strcat(WindowsVersionStr, \")\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "905:    (pfLCIDToLocaleName(GetUserDefaultUILanguage(), wmui_str, LOCALE_NAME_MAX_LENGTH, 0) > 0) ) {",
          "906:   wchar_to_utf8_no_alloc(wmui_str, mui_str, LOCALE_NAME_MAX_LENGTH);",
          "907:  } else {",
          "909:  }",
          "910:  return mui_str;",
          "911: }",
          "",
          "[Removed Lines]",
          "908:   safe_strcpy(mui_str, LOCALE_NAME_MAX_LENGTH, \"en-US\");",
          "",
          "[Added Lines]",
          "908:   static_strcpy(mui_str, \"en-US\");",
          "",
          "---------------"
        ],
        "src/stdio.c||src/stdio.c": [
          "File: src/stdio.c -> src/stdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:  error_code = GetLastError();",
          "156:  size = FormatMessageU(FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS, NULL, HRESULT_CODE(error_code),",
          "157:   MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), &err_string[strlen(err_string)],",
          "",
          "[Removed Lines]",
          "154:  safe_sprintf(err_string, sizeof(err_string), \"[0x%08lX] \", error_code);",
          "",
          "[Added Lines]",
          "154:  static_sprintf(err_string, \"[0x%08lX] \", error_code);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:  if (size == 0) {",
          "160:   format_error = GetLastError();",
          "161:   if ((format_error) && (format_error != 0x13D))  // 0x13D, decode error, is returned for unknown codes",
          "164:   else",
          "166:  }",
          "168:  SetLastError(error_code); // Make sure we don't change the errorcode on exit",
          "",
          "[Removed Lines]",
          "162:    safe_sprintf(err_string, sizeof(err_string),",
          "163:     \"Windows error code 0x%08lX (FormatMessage error code 0x%08lX)\", error_code, format_error);",
          "165:    safe_sprintf(err_string, sizeof(err_string), \"Unknown error 0x%08lX\", error_code);",
          "",
          "[Added Lines]",
          "162:    static_sprintf(err_string, \"Windows error code 0x%08lX (FormatMessage error code 0x%08lX)\",",
          "163:     error_code, format_error);",
          "165:    static_sprintf(err_string, \"Unknown error 0x%08lX\", error_code);",
          "",
          "---------------"
        ],
        "src/stdlg.c||src/stdlg.c": [
          "File: src/stdlg.c -> src/stdlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:      if (tmp_path == NULL) {",
          "203:       uprintf(\"Could not convert path\\n\");",
          "204:      } else {",
          "206:       safe_free(tmp_path);",
          "207:      }",
          "208:     } else {",
          "",
          "[Removed Lines]",
          "205:       safe_strcpy(szFolderPath, MAX_PATH, tmp_path);",
          "",
          "[Added Lines]",
          "205:       static_strcpy(szFolderPath, tmp_path);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:   CenterDialog(hDlg);",
          "631:   if (settings_commcheck)",
          "632:    ShowWindow(GetDlgItem(hDlg, IDC_ABOUT_UPDATES), SW_SHOW);",
          "634:    lmprintf(MSG_175|MSG_RTF, rufus_version[0], rufus_version[1], rufus_version[2]),",
          "635:    right_to_left_mode?\"Akeo \\\\\\\\ Pete Batard 2011-2017 \u00a9 Copyright\":\"Copyright \u00a9 2011-2017 Pete Batard / Akeo\",",
          "636:    lmprintf(MSG_176|MSG_RTF), lmprintf(MSG_177|MSG_RTF), lmprintf(MSG_178|MSG_RTF));",
          "",
          "[Removed Lines]",
          "633:   safe_sprintf(about_blurb, sizeof(about_blurb), about_blurb_format, lmprintf(MSG_174|MSG_RTF),",
          "",
          "[Added Lines]",
          "633:   static_sprintf(about_blurb, about_blurb_format, lmprintf(MSG_174|MSG_RTF),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1459:   IGNORE_RETVAL(ComboBox_SetCurSel(hBeta, ReadSettingBool(SETTING_INCLUDE_BETAS)?0:1));",
          "1460:   hPolicy = GetDlgItem(hDlg, IDC_POLICY);",
          "1461:   SendMessage(hPolicy, EM_AUTOURLDETECT, 1, 0);",
          "1463:    lmprintf(MSG_180|MSG_RTF), lmprintf(MSG_181|MSG_RTF), lmprintf(MSG_182|MSG_RTF), lmprintf(MSG_183|MSG_RTF),",
          "1464:    lmprintf(MSG_184|MSG_RTF), lmprintf(MSG_185|MSG_RTF), lmprintf(MSG_186|MSG_RTF));",
          "1465:   SendMessageA(hPolicy, EM_SETTEXTEX, (WPARAM)&friggin_microsoft_unicode_amateurs, (LPARAM)update_policy_text);",
          "",
          "[Removed Lines]",
          "1462:   safe_sprintf(update_policy_text, sizeof(update_policy_text), update_policy, lmprintf(MSG_179|MSG_RTF),",
          "",
          "[Added Lines]",
          "1462:   static_sprintf(update_policy_text, update_policy, lmprintf(MSG_179|MSG_RTF),",
          "",
          "---------------"
        ],
        "src/vhd.c||src/vhd.c": [
          "File: src/vhd.c -> src/vhd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: {",
          "111:  if ( (GetRegistryKeyStr(REGKEY_HKCU, \"7-Zip\\\\Path\", sevenzip_path, sizeof(sevenzip_path)))",
          "112:    || (GetRegistryKeyStr(REGKEY_HKLM, \"7-Zip\\\\Path\", sevenzip_path, sizeof(sevenzip_path))) ) {",
          "114:   return (_access(sevenzip_path, 0) != -1);",
          "115:  }",
          "116:  return FALSE;",
          "",
          "[Removed Lines]",
          "113:   safe_strcat(sevenzip_path, sizeof(sevenzip_path), \"\\\\7z.exe\");",
          "",
          "[Added Lines]",
          "113:   static_strcat(sevenzip_path, \"\\\\7z.exe\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:  for (n = 0; n < 2; n++) {",
          "475:   for (i = strlen(tmpdst) - 1; (i > 0) && (tmpdst[i] != '\\\\') && (tmpdst[i] != '/'); i--);",
          "476:   tmpdst[i] = 0;",
          "479:    image, (n == 0) ? index_prefix : \"\", src);",
          "480:   if (RunCommand(cmdline, tmpdst, FALSE) != 0) {",
          "481:    uprintf(\"  Could not launch 7z.exe: %s\", WindowsErrorString());",
          "",
          "[Removed Lines]",
          "474:   safe_strcpy(tmpdst, sizeof(tmpdst), dst);",
          "478:   safe_sprintf(cmdline, sizeof(cmdline), \"\\\"%s\\\" -y e \\\"%s\\\" %s%s\", sevenzip_path,",
          "",
          "[Added Lines]",
          "474:   static_strcpy(tmpdst, dst);",
          "478:   static_sprintf(cmdline, \"\\\"%s\\\" -y e \\\"%s\\\" %s%s\", sevenzip_path,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:   for (i = safe_strlen(src); (i > 0) && (src[i] != '\\\\') && (src[i] != '/'); i--);",
          "486:   if (i == 0)",
          "489:   if (_access(tmpdst, 0) == 0)",
          "491:    break;",
          "",
          "[Removed Lines]",
          "487:    safe_strcat(tmpdst, sizeof(tmpdst), \"\\\\\");",
          "488:   safe_strcat(tmpdst, sizeof(tmpdst), &src[i]);",
          "",
          "[Added Lines]",
          "487:    static_strcat(tmpdst, \"\\\\\");",
          "488:   static_strcat(tmpdst, &src[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f81e4f177a3603f6a29b11e3f8b7721728e232c",
      "candidate_info": {
        "commit_hash": "2f81e4f177a3603f6a29b11e3f8b7721728e232c",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/2f81e4f177a3603f6a29b11e3f8b7721728e232c",
        "files": [
          "src/dos.c",
          "src/drive.c",
          "src/drive.h",
          "src/format.c",
          "src/icon.c",
          "src/iso.c",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/syslinux.c",
          "src/vhd.c"
        ],
        "message": "[core] avoid the use of FILE_SHARE_WRITE\n\n* Not having FILE_SHARE_WRITE on a disk or volume handle helps\n  prevent spurious accesses from the OS or other apps while we\n  are repartitioning/refomatting.",
        "before_after_code_files": [
          "src/dos.c||src/dos.c",
          "src/drive.c||src/drive.c",
          "src/drive.h||src/drive.h",
          "src/format.c||src/format.c",
          "src/icon.c||src/icon.c",
          "src/iso.c||src/iso.c",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/syslinux.c||src/syslinux.c",
          "src/vhd.c||src/vhd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/dos.c||src/dos.c": [
          "File: src/dos.c -> src/dos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:  }",
          "252:   NULL, CREATE_ALWAYS, dir_entry->Attributes, NULL);",
          "253:  if (hFile == INVALID_HANDLE_VALUE) {",
          "254:   uprintf(\"Unable to create file '%s': %s.\\n\", filename, WindowsErrorString());",
          "",
          "[Removed Lines]",
          "251:  hFile = CreateFileA(filename, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE,",
          "",
          "[Added Lines]",
          "251:  hFile = CreateFileA(filename, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:   safe_strcpy(filename, sizeof(filename), ((i<2)?path:locale_path));",
          "386:   safe_strcat(filename, sizeof(filename), res_name[i]);",
          "389:    CREATE_ALWAYS, (i<2)?(FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_SYSTEM):FILE_ATTRIBUTE_NORMAL, NULL);",
          "390:   if ((hFile == NULL) || (hFile == INVALID_HANDLE_VALUE)) {",
          "391:    uprintf(\"Unable to create file '%s': %s.\\n\", filename, WindowsErrorString());",
          "",
          "[Removed Lines]",
          "388:   hFile = CreateFileA(filename, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL,",
          "",
          "[Added Lines]",
          "388:   hFile = CreateFileA(filename, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ, NULL,",
          "",
          "---------------"
        ],
        "src/drive.c||src/drive.c": [
          "File: src/drive.c -> src/drive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: {",
          "122:  int i;",
          "123:  DWORD size;",
          "",
          "[Removed Lines]",
          "120: static HANDLE GetHandle(char* Path, BOOL bWriteAccess, BOOL bLockDrive)",
          "",
          "[Added Lines]",
          "120: static HANDLE GetHandle(char* Path, BOOL bWriteAccess, BOOL bLockDrive, BOOL bWriteShare)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:  if (Path == NULL)",
          "127:   goto out;",
          "130:  if (hDrive == INVALID_HANDLE_VALUE) {",
          "131:   uprintf(\"Could not open drive %s: %s\\n\", Path, WindowsErrorString());",
          "132:   goto out;",
          "",
          "[Removed Lines]",
          "128:  hDrive = CreateFileA(Path, GENERIC_READ|(bWriteAccess?GENERIC_WRITE:0),",
          "129:   FILE_SHARE_READ|(bWriteAccess?FILE_SHARE_WRITE:0), NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);",
          "",
          "[Added Lines]",
          "128:  for (i = 0; i < DRIVE_ACCESS_RETRIES; i++) {",
          "134:   hDrive = CreateFileA(Path, GENERIC_READ|(bWriteAccess?GENERIC_WRITE:0),",
          "135:    FILE_SHARE_READ|(bWriteShare?FILE_SHARE_WRITE:0), NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);",
          "136:   if (hDrive != INVALID_HANDLE_VALUE)",
          "137:    break;",
          "138:   if ((GetLastError() != ERROR_SHARING_VIOLATION) && (GetLastError() != ERROR_ACCESS_DENIED))",
          "139:    break;",
          "140:   if (i == 0)",
          "141:    uprintf(\"Waiting for access...\");",
          "142:   Sleep(DRIVE_ACCESS_TIMEOUT / DRIVE_ACCESS_RETRIES);",
          "143:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180: {",
          "181:  HANDLE hPhysical = INVALID_HANDLE_VALUE;",
          "182:  char* PhysicalPath = GetPhysicalName(DriveIndex);",
          "184:  safe_free(PhysicalPath);",
          "185:  return hPhysical;",
          "186: }",
          "",
          "[Removed Lines]",
          "183:  hPhysical = GetHandle(PhysicalPath, bWriteAccess, bLockDrive);",
          "",
          "[Added Lines]",
          "197:  hPhysical = GetHandle(PhysicalPath, bWriteAccess, bLockDrive, FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305: {",
          "306:  HANDLE hLogical = INVALID_HANDLE_VALUE;",
          "307:  char* LogicalPath = GetLogicalName(DriveIndex, FALSE, FALSE);",
          "",
          "[Removed Lines]",
          "304: HANDLE GetLogicalHandle(DWORD DriveIndex, BOOL bWriteAccess, BOOL bLockDrive)",
          "",
          "[Added Lines]",
          "318: HANDLE GetLogicalHandle(DWORD DriveIndex, BOOL bWriteAccess, BOOL bLockDrive, BOOL bWriteShare)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "311:   return NULL;",
          "312:  }",
          "315:  free(LogicalPath);",
          "316:  return hLogical;",
          "317: }",
          "",
          "[Removed Lines]",
          "314:  hLogical = GetHandle(LogicalPath, bWriteAccess, bLockDrive);",
          "",
          "[Added Lines]",
          "328:  hLogical = GetHandle(LogicalPath, bWriteAccess, bLockDrive, bWriteShare);",
          "",
          "---------------"
        ],
        "src/drive.h||src/drive.h": [
          "File: src/drive.h -> src/drive.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: HANDLE GetPhysicalHandle(DWORD DriveIndex, BOOL bWriteAccess, BOOL bLockDrive);",
          "83: char* GetLogicalName(DWORD DriveIndex, BOOL bKeepTrailingBackslash, BOOL bSilent);",
          "84: BOOL WaitForLogical(DWORD DriveIndex);",
          "86: int GetDriveNumber(HANDLE hDrive, char* path);",
          "87: BOOL GetDriveLetters(DWORD DriveIndex, char* drive_letters);",
          "88: UINT GetDriveTypeFromIndex(DWORD DriveIndex);",
          "",
          "[Removed Lines]",
          "85: HANDLE GetLogicalHandle(DWORD DriveIndex, BOOL bWriteAccess, BOOL bLockDrive);",
          "",
          "[Added Lines]",
          "85: HANDLE GetLogicalHandle(DWORD DriveIndex, BOOL bWriteAccess, BOOL bLockDrive, BOOL bWriteShare);",
          "",
          "---------------"
        ],
        "src/format.c||src/format.c": [
          "File: src/format.c -> src/format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:  VolumeId = GetVolumeID();",
          "418:  if (IS_ERROR(FormatStatus)) goto out;",
          "419:  if ((hLogicalVolume == INVALID_HANDLE_VALUE) || (hLogicalVolume == NULL))",
          "420:   die(\"Invalid logical volume handle\\n\", ERROR_INVALID_HANDLE);",
          "",
          "[Removed Lines]",
          "417:  hLogicalVolume = GetLogicalHandle(DriveIndex, TRUE, TRUE);",
          "",
          "[Added Lines]",
          "417:  hLogicalVolume = GetLogicalHandle(DriveIndex, TRUE, TRUE, FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1198:  }",
          "1202:   NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);",
          "1203:  if (handle == INVALID_HANDLE_VALUE) {",
          "1204:   uprintf(\"Could not open %s for patching: %s\\n\", dst, WindowsErrorString());",
          "",
          "[Removed Lines]",
          "1201:  handle = CreateFileA(dst, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE,",
          "",
          "[Added Lines]",
          "1201:  handle = CreateFileA(dst, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1680:  uprintf(\"Will use '%c:' as volume mountpoint\\n\", drive_name[0]);",
          "1684:  if (hLogicalVolume == INVALID_HANDLE_VALUE) {",
          "1685:   uprintf(\"Could not lock volume\\n\");",
          "1686:   FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|ERROR_OPEN_FAILED;",
          "",
          "[Removed Lines]",
          "1683:  hLogicalVolume = GetLogicalHandle(DriveIndex, FALSE, TRUE);",
          "",
          "[Added Lines]",
          "1683:  hLogicalVolume = GetLogicalHandle(DriveIndex, FALSE, TRUE, FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1917:     (!HAS_WINDOWS(img_report) || !allow_dual_uefi_bios)) ) {",
          "1918:    if (!InstallSyslinux(DriveIndex, drive_name[0], fs)) {",
          "1919:     FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|ERROR_INSTALL_FAILURE;",
          "1920:    }",
          "1921:   } else {",
          "1925:    if ((hLogicalVolume == INVALID_HANDLE_VALUE) || (hLogicalVolume == NULL)) {",
          "1926:     uprintf(\"Could not re-mount volume for partition boot record access\\n\");",
          "1927:     FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|ERROR_OPEN_FAILED;",
          "",
          "[Removed Lines]",
          "1924:    hLogicalVolume = GetLogicalHandle(DriveIndex, TRUE, FALSE);",
          "",
          "[Added Lines]",
          "1920:     goto out;",
          "1925:    hLogicalVolume = GetLogicalHandle(DriveIndex, TRUE, FALSE, FALSE);",
          "",
          "---------------"
        ],
        "src/icon.c||src/icon.c": [
          "File: src/icon.c -> src/icon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  icondir = (GRPICONDIR*)GetResource(hMainInstance, MAKEINTRESOURCEA(IDI_ICON), _RT_GROUP_ICON, \"icon\", &res_size, FALSE);",
          "105:    NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);",
          "106:  if (hFile == INVALID_HANDLE_VALUE) {",
          "107:   uprintf(\"Unable to create icon '%s': %s.\", filename, WindowsErrorString());",
          "",
          "[Removed Lines]",
          "104:  hFile = CreateFileA(filename, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE,",
          "",
          "[Added Lines]",
          "104:  hFile = CreateFileA(filename, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ,",
          "",
          "---------------"
        ],
        "src/iso.c||src/iso.c": [
          "File: src/iso.c -> src/iso.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350: static void __inline set_directory_timestamp(char* path, LPFILETIME creation, LPFILETIME last_access, LPFILETIME modify)",
          "351: {",
          "352:  HANDLE dir_handle = CreateFileU(path, GENERIC_READ | GENERIC_WRITE,",
          "354:  if ((dir_handle == INVALID_HANDLE_VALUE) || (!SetFileTime(dir_handle, creation, last_access, modify)))",
          "355:   uprintf(\"  Could not set timestamp for directory '%s': %s\", path, WindowsErrorString());",
          "356:  safe_closehandle(dir_handle);",
          "",
          "[Removed Lines]",
          "353:   FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);",
          "",
          "[Added Lines]",
          "353:   FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:    if (!is_identical)",
          "428:     uprintf(\"  File name sanitized to '%s'\", psz_sanpath);",
          "429:    file_handle = CreateFileU(psz_sanpath, GENERIC_READ | GENERIC_WRITE,",
          "431:    if (file_handle == INVALID_HANDLE_VALUE) {",
          "432:     err = GetLastError();",
          "433:     uprintf(\"  Unable to create file: %s\", WindowsErrorString());",
          "",
          "[Removed Lines]",
          "430:     FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "",
          "[Added Lines]",
          "430:     FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "573:     safe_free(p_statbuf->rr.psz_symlink);",
          "574:    }",
          "575:    file_handle = CreateFileU(psz_sanpath, GENERIC_READ | GENERIC_WRITE,",
          "577:    if (file_handle == INVALID_HANDLE_VALUE) {",
          "578:     err = GetLastError();",
          "579:     uprintf(\"  Unable to create file: %s\", WindowsErrorString());",
          "",
          "[Removed Lines]",
          "576:     FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "",
          "[Added Lines]",
          "576:     FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "936:  HANDLE file_handle = INVALID_HANDLE_VALUE;",
          "938:  file_handle = CreateFileU(dest_file, GENERIC_READ | GENERIC_WRITE,",
          "940:  if (file_handle == INVALID_HANDLE_VALUE) {",
          "941:   uprintf(\"  Unable to create file %s: %s\\n\", dest_file, WindowsErrorString());",
          "942:   goto out;",
          "",
          "[Removed Lines]",
          "939:   FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, CREATE_ALWAYS, attributes, NULL);",
          "",
          "[Added Lines]",
          "939:   FILE_SHARE_READ, NULL, CREATE_ALWAYS, attributes, NULL);",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2854:   hogmutex = CreateMutexA(NULL, TRUE, \"Global/Rufus_CmdLine\");",
          "2858:    NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "2859:   if (hFile != INVALID_HANDLE_VALUE) {",
          "",
          "[Removed Lines]",
          "2857:   hFile = CreateFileA(cmdline_hogger, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE,",
          "",
          "[Added Lines]",
          "2857:   hFile = CreateFileA(cmdline_hogger, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3076:    safe_strcpy(loc_file, sizeof(loc_file), rufus_loc);",
          "3077:   }",
          "3080:    NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "3081:   if ((hFile == INVALID_HANDLE_VALUE) || (!WriteFileWithRetry(hFile, loc_data, loc_size, &size, WRITE_RETRIES))) {",
          "3082:    uprintf(\"localization: unable to extract '%s': %s\", loc_file, WindowsErrorString());",
          "",
          "[Removed Lines]",
          "3079:   hFile = CreateFileU(loc_file, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE,",
          "",
          "[Added Lines]",
          "3079:   hFile = CreateFileU(loc_file, GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ,",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #define POP_DIRECTIONAL_FORMATTING  \"\u202c\"",
          "51: #define RIGHT_TO_LEFT_OVERRIDE      \"\u202e\"",
          "52: #define DRIVE_ACCESS_TIMEOUT        15000  // How long we should retry drive access (in ms)",
          "54: #define DRIVE_INDEX_MIN             0x00000080",
          "55: #define DRIVE_INDEX_MAX             0x000000C0",
          "56: #define MIN_DRIVE_SIZE              8   // Minimum size a drive must have, to be formattable (in MB)",
          "",
          "[Removed Lines]",
          "53: #define DRIVE_ACCESS_RETRIES        60   // How many times we should retry",
          "",
          "[Added Lines]",
          "53: #define DRIVE_ACCESS_RETRIES        150   // How many times we should retry",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.13.1062\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.13.1063\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,13,1062,0",
          "338:  PRODUCTVERSION 2,13,1062,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,13,1063,0",
          "338:  PRODUCTVERSION 2,13,1063,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.13.1062\"",
          "361:             VALUE \"ProductVersion\", \"2.13.1062\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.13.1063\"",
          "361:             VALUE \"ProductVersion\", \"2.13.1063\"",
          "",
          "---------------"
        ],
        "src/syslinux.c||src/syslinux.c": [
          "File: src/syslinux.c -> src/syslinux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:  if (sectbuf == NULL)",
          "133:   goto out;",
          "137:  if ((d_handle == INVALID_HANDLE_VALUE) || (d_handle == NULL)) {",
          "138:   uprintf(\"Could open volume for Syslinux installation\");",
          "139:   goto out;",
          "",
          "[Removed Lines]",
          "136:  d_handle = GetLogicalHandle(drive_index, TRUE, FALSE);",
          "",
          "[Added Lines]",
          "140:  d_handle = GetLogicalHandle(drive_index, TRUE, FALSE, TRUE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:      FILE_ATTRIBUTE_HIDDEN, NULL);",
          "200:  if (f_handle == INVALID_HANDLE_VALUE) {",
          "202:   goto out;",
          "203:  }",
          "",
          "[Removed Lines]",
          "201:   uprintf(\"Unable to create '%s'\", &path[3]);",
          "",
          "[Added Lines]",
          "205:   uprintf(\"Unable to create '%s': %s\", &path[3], WindowsErrorString());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "386:  safe_free(syslinux_ldlinux[0]);",
          "387:  safe_free(syslinux_ldlinux[1]);",
          "388:  safe_free(sectors);",
          "390:  safe_closehandle(f_handle);",
          "391:  return r;",
          "392: }",
          "",
          "[Removed Lines]",
          "389:  safe_closehandle(d_handle);",
          "",
          "[Added Lines]",
          "393:  safe_unlockclose(d_handle);",
          "",
          "---------------"
        ],
        "src/vhd.c||src/vhd.c": [
          "File: src/vhd.c -> src/vhd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:    uprintf(\"  Could not access WIM info: %s\", WindowsErrorString());",
          "414:    goto out;",
          "415:   }",
          "417:    NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "418:   if ((hFile == INVALID_HANDLE_VALUE) || (!WriteFile(hFile, wim_info, dw, &dw, NULL))) {",
          "419:    uprintf(\"  Could not extract file: %s\", WindowsErrorString());",
          "",
          "[Removed Lines]",
          "416:   hFile = CreateFileW(wdst, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE,",
          "",
          "[Added Lines]",
          "416:   hFile = CreateFileW(wdst, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6451a090f3f6d6f2e0e303d262155ec5f9e92ddd",
      "candidate_info": {
        "commit_hash": "6451a090f3f6d6f2e0e303d262155ec5f9e92ddd",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/6451a090f3f6d6f2e0e303d262155ec5f9e92ddd",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] update Greek translation to latest\n\n* Closes #1138",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5843: ################################################################################",
          "5844: l \"el-GR\" \"Greek (\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac)\" 0x0408",
          "5846: b \"en-US\"",
          "5848: # Main dialog",
          "5849: g IDD_DIALOG",
          "5850: t IDS_DEVICE_TXT \"\u03a3\u03c5\u03c3\u03ba\u03b5\u03c5\u03ae\"",
          "5851: t IDS_BOOT_SELECTION_TXT \"\u03a4\u03cd\u03c0\u03bf\u03c2 \u03b5\u03ba\u03ba\u03af\u03bd\u03b7\u03c3\u03b7\u03c2\"",
          "5854: t IDS_FILE_SYSTEM_TXT \"\u03a3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1 \u03b1\u03c1\u03c7\u03b5\u03af\u03c9\u03bd\"",
          "5855: t IDS_CLUSTER_SIZE_TXT \"\u039c\u03ad\u03b3\u03b5\u03b8\u03bf\u03c2 \u03bc\u03bf\u03bd\u03ac\u03b4\u03b1\u03c2 \u03b5\u03ba\u03c7\u03ce\u03c1\u03b7\u03c3\u03b7\u03c2\"",
          "5856: t IDS_LABEL_TXT \"\u0395\u03c4\u03b9\u03ba\u03ad\u03c4\u03b1 \u03c4\u03cc\u03bc\u03bf\u03c5\"",
          "",
          "[Removed Lines]",
          "5845: v 1.0.22",
          "5852: t IDS_PARTITION_TYPE_TXT \"\u03a3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1 \u03b4\u03b9\u03b1\u03bc\u03b5\u03c1\u03b9\u03c3\u03bc\u03bf\u03cd\"",
          "5853: t IDS_TARGET_SYSTEM_TXT \"\u03a4\u03cd\u03c0\u03bf\u03c2 \u03c3\u03c5\u03c3\u03c4\u03ae\u03bc\u03b1\u03c4\u03bf\u03c2\"",
          "",
          "[Added Lines]",
          "5845: v 1.0.23",
          "5850: t IDS_DRIVE_PROPERTIES_TXT \"\u0399\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 \u0394\u03af\u03c3\u03ba\u03bf\u03c5\"",
          "5851: t IDS_BOOT_SELECTION_TXT \"\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03b5\u03ba\u03ba\u03af\u03bd\u03b7\u03c3\u03b7\u03c2\"",
          "5852: t IDC_SELECT \"\u0395\u03c0\u03b9\u03bb\u03ad\u03be\u03c4\u03b5\"",
          "5853: t IDS_IMAGE_OPTION_TXT \"\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ad\u03c2 \u03b5\u03b9\u03b4\u03ce\u03bb\u03bf\u03c5 ISO\"",
          "5856: t IDS_PARTITION_TYPE_TXT \"\u03a3\u03c7\u03ad\u03b4\u03b9\u03bf \u03b4\u03b9\u03b1\u03bc\u03b5\u03c1\u03b9\u03c3\u03bc\u03bf\u03cd\"",
          "5857: t IDS_TARGET_SYSTEM_TXT \"\u0395\u03c0\u03b9\u03b8\u03c5\u03bc\u03b7\u03c4\u03cc \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03b9\u03ba\u03cc \u03c3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5863: t IDC_LIST_USB_HDD \"\u0395\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03c3\u03ba\u03bb\u03b7\u03c1\u03ce\u03bd \u03b4\u03af\u03c3\u03ba\u03c9\u03bd USB\"",
          "5864: t IDC_OLD_BIOS_FIXES \"\u03a0\u03c1\u03bf\u03c3\u03b8\u03ae\u03ba\u03b7 \u03b4\u03b9\u03bf\u03c1\u03b8\u03ce\u03c3\u03b5\u03c9\u03bd \u03b3\u03b9\u03b1 \u03c0\u03b1\u03bb\u03b1\u03b9\u03cc\u03c4\u03b5\u03c1\u03b1 BIOS(\u03b5\u03c0\u03b9\u03c0\u03bb\u03ad\u03bf\u03bd \u03b4\u03b9\u03b1\u03bc\u03ad\u03c1\u03b9\u03c3\u03b7, \u03b5\u03c5\u03b8\u03c5\u03b3\u03c1\u03ac\u03bc\u03bc\u03b9\u03c3\u03b7, \u03ba\u03bb\u03c0.)\"",
          "5865: t IDC_RUFUS_MBR \"\u03a7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03af\u03b7\u03c3\u03b7 \u03c4\u03bf\u03c5 Rufus MBR \u03bc\u03b5 BIOS ID\"",
          "5867: # About dialog",
          "5868: g IDD_ABOUTBOX",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5870: t IDS_STATUS_TXT \"\u03a4\u03c1\u03ad\u03c7\u03c9\u03bd \u03ba\u03b1\u03c4\u03ac\u03c3\u03c4\u03b1\u03c3\u03b7\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5945: t MSG_029 \"\u03a0\u03c1\u03bf\u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae\"",
          "5946: # The following gets appended to the file system, cluster size, etc.",
          "5947: t MSG_030 \"%s (\u03a0\u03c1\u03bf\u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae)\"",
          "5951: # Number of bad block check passes (singular for 1 pass, plural for 2 or more passes)",
          "5952: t MSG_034 \"%d \u03a0\u03ad\u03c1\u03b1\u03c3\u03bc\u03b1\"",
          "5953: t MSG_035 \"%d \u03a0\u03b5\u03c1\u03ac\u03c3\u03bc\u03b1\u03c4\u03b1\"",
          "",
          "[Removed Lines]",
          "5948: #t MSG_031 \"%s \u03a3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1 \u03b4\u03b9\u03b1\u03bc\u03b5\u03c1\u03b9\u03c3\u03bc\u03bf\u03cd \u03b3\u03b9\u03b1 BIOS \u03ae %s\"",
          "5949: #t MSG_032 \"%s \u03a3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1 \u03b4\u03b9\u03b1\u03bc\u03b5\u03c1\u03b9\u03c3\u03bc\u03bf\u03cd \u03b3\u03b9\u03b1 BIOS\"",
          "5950: #t MSG_033 \"%s \u03a3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1 \u03b4\u03b9\u03b1\u03bc\u03b5\u03c1\u03b9\u03c3\u03bc\u03bf\u03cd \u03b3\u03b9\u03b1 UEFI\"",
          "",
          "[Added Lines]",
          "5953: t MSG_031 \"BIOS (\u03ae UEFI-CSM)\"",
          "5954: t MSG_032 \"UEFI (\u03b5\u03ba\u03c4\u03cc\u03c2 \u03b1\u03c0\u03cc CSM)\"",
          "5955: t MSG_033 \"BIOS \u03ae UEFI\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6084:  \"\u03a3\u03b7\u03bc\u03b5\u03af\u03c9\u03c3\u03b7: \u0397 \u03bb\u03ae\u03c8\u03b7 \u03c4\u03c9\u03bd \u03bd\u03ad\u03c9\u03bd \u03b1\u03c1\u03c7\u03b5\u03af\u03c9\u03bd \u03b8\u03b1 \u03b3\u03af\u03bd\u03b5\u03b9 \u03c3\u03c4\u03bf\u03bd \u03c4\u03c1\u03ad\u03c7\u03bf\u03bd\u03c4\u03b1 \u03ba\u03b1\u03c4\u03ac\u03bb\u03bf\u03b3\u03bf \u03ba\u03b1\u03b9 \u03b5\u03c6\u03cc\u03c3\u03bf\u03bd \u03c4\u03b1 \"",
          "6085:  \"\u03b1\u03c1\u03c7\u03b5\u03af\u03b1 \u03c5\u03c0\u03ac\u03c1\u03c7\u03bf\u03c5\u03bd \u03b5\u03ba\u03b5\u03af, \u03b8\u03b1 \u03b5\u03c0\u03b1\u03bd\u03b1\u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b7\u03b8\u03bf\u03cd\u03bd \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1. \u0395\u03ac\u03bd \u03b4\u03b5 \u03b2\u03c1\u03b5\u03b8\u03b5\u03af \u03ba\u03b1\u03c0\u03bf\u03b9\u03bf \u03c3\u03c5\u03bc\u03b2\u03b1\u03c4\u03cc \u03b5\u03af\u03b4\u03c9\u03bb\u03bf \u03c4\u03cc\u03c4\u03b5 \"",
          "6086:  \"\u03b7 \u03c0\u03c1\u03bf\u03b5\u03c0\u03b9\u03bb\u03b5\u03b3\u03bc\u03ad\u03bd\u03b7 \u03ad\u03ba\u03b4\u03bf\u03c3\u03b7 \u03b8\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b7\u03b8\u03b5\u03af.\\n\"",
          "6087: # Tooltips",
          "6096: t MSG_153 \"\u039c\u03bf\u03c4\u03af\u03b2\u03bf \u03b4\u03bf\u03ba\u03b9\u03bc\u03ae\u03c2: 0x%02X\"",
          "6097: t MSG_154 \"\u039c\u03bf\u03c4\u03af\u03b2\u03bf \u03b4\u03bf\u03ba\u03b9\u03bc\u03ae\u03c2: 0x%02X, 0x%02X\"",
          "6098: t MSG_155 \"\u039c\u03bf\u03c4\u03af\u03b2\u03bf \u03b4\u03bf\u03ba\u03b9\u03bc\u03ae\u03c2: 0x%02X, 0x%02X, 0x%02X\"",
          "",
          "[Removed Lines]",
          "6088: # Partition Scheme and Target Type",
          "6089: t MSG_150 \"\u03a3\u03c5\u03bd\u03ae\u03b8\u03c9\u03c2 \u03b7 \u03b1\u03c3\u03c6\u03b1\u03bb\u03ad\u03c3\u03c4\u03b5\u03c1\u03b7 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae. \u03a0\u03b1\u03c1\u03cc\u03bb\u03b1 \u03b1\u03c5\u03c4\u03ac \u03b5\u03ac\u03bd \u03ad\u03c7\u03b5\u03c4\u03b5 \u03ad\u03bd\u03b1\u03bd \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ae \u03bc\u03b5 UEFI \u03ba\u03b1\u03b9 \"",
          "6090:  \"\u03b8\u03ad\u03bb\u03b5\u03c4\u03b5 \u03bd\u03b1 \u03b5\u03b3\u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03ae\u03c3\u03b5\u03c4\u03b5 \u03ad\u03bd\u03b1 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03b9\u03ba\u03cc \u03c3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1(OS) \u03c3\u03b5 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 EFI, \u03b8\u03b1 \u03c0\u03c1\u03ad\u03c0\u03b5\u03b9 \"",
          "6091:  \"\u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03b5\u03c4\u03b5 \u03bc\u03af\u03b1 \u03b1\u03c0\u03cc \u03c4\u03b9\u03c2 \u03ac\u03bb\u03bb\u03b5\u03c2 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ad\u03c2.\"",
          "6092: t MSG_151 \"\u03a7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03c4\u03b5 \u03b1\u03c5\u03c4\u03cc \u03b1\u03bd \u03b8\u03ad\u03bb\u03b5\u03c4\u03b5 \u03bd\u03b1 \u03b5\u03b3\u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03ae\u03c3\u03b5\u03c4\u03b5 \u03ad\u03bd\u03b1 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03b9\u03ba\u03cc \u03c3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1(OS) \u03c3\u03b5 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 EFI, \"",
          "6093:  \"\u03b1\u03bb\u03bb\u03ac \u03c7\u03c1\u03b5\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03ad\u03c7\u03b5\u03c4\u03b5 \u03c0\u03c1\u03cc\u03c3\u03b2\u03b1\u03c3\u03b7 \u03c3\u03c4\u03bf \u03c0\u03b5\u03c1\u03b9\u03b5\u03c7\u03cc\u03bc\u03b5\u03bd\u03bf \u03c4\u03bf\u03c5 USB \u03b1\u03c0\u03cc \u03c4\u03b1 Windows XP.\"",
          "6094: t MSG_152 \"\u0397 \u03c0\u03c1\u03bf\u03c4\u03b9\u03bc\u03ce\u03bc\u03b5\u03bd\u03b7 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03b5\u03b3\u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03ae\u03c3\u03b5\u03c4\u03b5 \u03ad\u03bd\u03b1 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03b9\u03ba\u03cc \u03c3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1(OS) \u03c3\u03b5 \"",
          "6095:  \"\u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 EFI \u03ba\u03b1\u03b9 \u03b4\u03b5\u03bd \u03b1\u03c0\u03b1\u03b9\u03c4\u03b5\u03af\u03c4\u03b1\u03b9 \u03c0\u03c1\u03cc\u03c3\u03b2\u03b1\u03c3\u03b7 \u03c3\u03c4\u03bf USB \u03c3\u03c4\u03b1 Windows XP.\"",
          "",
          "[Added Lines]",
          "6092: t MSG_117 \"\u03a0\u03c1\u03bf\u03c3\u03b1\u03c1\u03bc\u03bf\u03c3\u03bc\u03ad\u03bd\u03b7 \u03b5\u03b3\u03ba\u03b1\u03c4\u03ac\u03c3\u03c4\u03b1\u03c3\u03b7 \u03b3\u03b9\u03b1 Windows\"",
          "6093: t MSG_118 \"Windows To Go (USB \u03bc\u03b5 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1 \u03b5\u03ba\u03ba\u03af\u03bd\u03b7\u03c3\u03b7\u03c2)\"",
          "6094: t MSG_119 \"\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ce\u03bd \u03b4\u03af\u03c3\u03ba\u03bf\u03c5 \u03b3\u03b9\u03b1 \u03c0\u03c1\u03bf\u03c7\u03c9\u03c1\u03b7\u03bc\u03ad\u03bd\u03bf\u03c5\u03c2\"",
          "6095: t MSG_120 \"\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ce\u03bd \u03b4\u03b9\u03b1\u03bc\u03cc\u03c1\u03c6\u03c9\u03c3\u03b7\u03c2 \u03b3\u03b9\u03b1 \u03c0\u03c1\u03bf\u03c7\u03c9\u03c1\u03b7\u03bc\u03ad\u03bd\u03bf\u03c5\u03c2\"",
          "6096: t MSG_121 \"\u0395\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 %s\"",
          "6097: t MSG_122 \"\u0391\u03c0\u03cc\u03ba\u03c1\u03c5\u03c8\u03b7 %s\"",
          "6100: t MSG_150 \"\u0395\u03c0\u03b9\u03bb\u03ad\u03be\u03c4\u03b5 \u03c4\u03bf\u03bd \u03c4\u03cd\u03c0\u03bf \u03c4\u03bf\u03c5 \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ae \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b5\u03c4\u03b5 \u03bc\u03b5\u03c4\u03ac, \u03b3\u03b9\u03b1 \u03c4\u03b7\u03bd \u03b5\u03b3\u03ba\u03b1\u03c4\u03ac\u03c3\u03c4\u03b1\u03c3\u03b7 \u03c4\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03b5\u03c7\u03bf\u03bc\u03ad\u03bd\u03bf\u03c5 \u03c4\u03bf\u03c5 \u03b4\u03af\u03c3\u03ba\u03bf\u03c5 \u03bc\u03b5 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1 \u03b5\u03ba\u03ba\u03af\u03bd\u03b7\u03c3\u03b7\u03c2. \"",
          "6101:  \"\u0395\u03af\u03bd\u03b1\u03b9 \u03b4\u03b9\u03ba\u03ae \u03c3\u03b1\u03c2 \u03b1\u03c1\u03bc\u03bf\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b1 \u03bd\u03b1 \u03b3\u03bd\u03c9\u03c1\u03af\u03b6\u03b5\u03c4\u03b5 \u03ac\u03bd \u03b8\u03ad\u03bb\u03b5\u03c4\u03b5 \u03bd\u03b1 \u03c0\u03c1\u03bf\u03b2\u03b5\u03af\u03c4\u03b5 \u03c3\u03b5 \u03b5\u03b3\u03ba\u03b1\u03c4\u03ac\u03c3\u03c4\u03b1\u03c3\u03b7 \u03c3\u03b5 BIOS \u03ae UEFI. \"",
          "6102:  \"\u039c\u03b9\u03b1 \u03bb\u03ac\u03b8\u03bf\u03c2 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03ba\u03ac\u03bd\u03b5\u03b9 \u03c4\u03b7\u03bd \u03c3\u03c5\u03c3\u03ba\u03b5\u03c5\u03ae \u03bd\u03b1 \u03bc\u03b7 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03b5\u03af \u03c3\u03c4\u03bf \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf \u03c3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1.\"",
          "6103: t MSG_151 \"\u0386\u03bd \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03b5\u03c4\u03b5 'UEFI-CSM' \u03b7 \u03c3\u03c5\u03c3\u03ba\u03b5\u03c5\u03ae \u03b8\u03b1 \u03bc\u03b9\u03bc\u03b7\u03b8\u03b5\u03af \u03c4\u03b7\u03bd \u03b5\u03ba\u03ba\u03af\u03bd\u03b7\u03c3\u03b7 \u03b3\u03b9\u03b1 BIOS \u03b5\u03bd\u03c4\u03cc\u03c2 UEFI (\u03cc\u03c7\u03b9 native)\"",
          "6104: t MSG_152 \"\u0386\u03bd \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03b5\u03c4\u03b5 '\u03b5\u03ba\u03c4\u03cc\u03c2 \u03b1\u03c0\u03cc CSM' \u03b7 \u03c3\u03c5\u03c3\u03ba\u03b5\u03c5\u03ae \u03b8\u03b1 \u03c4\u03c1\u03ad\u03c7\u03b5\u03b9 \u03bc\u03cc\u03bd\u03bf \u03c3\u03b5 UEFI \u03c3\u03c5\u03c3\u03c4\u03ae\u03bc\u03b1\u03c4\u03b1 (native)\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6104: t MSG_160 \"\u0395\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ce\u03bd \u03b3\u03b9\u03b1 \u03c0\u03c1\u03bf\u03c7\u03c9\u03c1\u03b7\u03bc\u03ad\u03bd\u03bf\u03c5\u03c2\"",
          "6105: t MSG_161 \"\u0395\u03bb\u03ad\u03b3\u03be\u03c4\u03b5 \u03c4\u03b7 \u03c3\u03c5\u03c3\u03ba\u03b5\u03c5\u03ae \u03b3\u03b9\u03b1 \u03ba\u03b1\u03c4\u03b5\u03c3\u03c4\u03c1\u03b1\u03bc\u03bc\u03ad\u03bd\u03bf\u03c5\u03c2 \u03c4\u03bf\u03bc\u03b5\u03af\u03c2 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03bc\u03bf\u03c4\u03af\u03b2\u03bf \u03b4\u03bf\u03ba\u03b9\u03bc\u03ae\u03c2\"",
          "6106: t MSG_162 \"\u0391\u03c0\u03bf\u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03c4\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03c0\u03bb\u03b1\u03af\u03c3\u03b9\u03bf \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b5\u03c4\u03b5 \u03c4\u03b7\u03bd \\\"\u03b1\u03c1\u03b3\u03ae\\\" \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf \u03b4\u03b9\u03b1\u03bc\u03cc\u03c1\u03c6\u03c9\u03c3\u03b7\u03c2\"",
          "6107: t MSG_164 \"\u0397 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b7\u03b8\u03b5\u03af \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03b7\u03b8\u03b5\u03af \u03bf \u03b4\u03af\u03c3\u03ba\u03bf\u03c2 \u03bc\u03b5 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1 \u03b5\u03ba\u03ba\u03af\u03bd\u03b7\u03c3\u03b7\u03c2\"",
          "6108: t MSG_165 \"\u039a\u03ac\u03bd\u03c4\u03b5 \u03ba\u03bb\u03b9\u03ba \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03b5\u03c4\u03b5 \u03ad\u03bd\u03b1 \u03b5\u03af\u03b4\u03c9\u03bb\u03bf (ISO)...\"",
          "6109: t MSG_166 \"\u0395\u03c0\u03b9\u03bb\u03ad\u03be\u03c4\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03c0\u03bb\u03b1\u03af\u03c3\u03b9\u03bf \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03b5\u03c0\u03b9\u03c4\u03c1\u03b1\u03c0\u03b5\u03af \u03b7 \u03b5\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03c4\u03c9\u03bd \u03b4\u03b9\u03b5\u03b8\u03bd\u03ce\u03bd \u03b5\u03c4\u03b9\u03ba\u03b5\u03c4\u03ce\u03bd \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6116: t MSG_163 \"\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 \u03b3\u03b9\u03b1 \u03c4\u03b7\u03bd \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03b4\u03b9\u03b1\u03bc\u03b5\u03c1\u03b9\u03c3\u03bc\u03ce\u03bd \u03b4\u03af\u03c3\u03ba\u03bf\u03c5\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6244:  \"\u03a0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03ce \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03c4\u03b5 \u03c4\u03bf\u03bd \u03c4\u03c1\u03cc\u03c0\u03bf \u03bc\u03b5 \u03c4\u03bf\u03bd \u03bf\u03c0\u03bf\u03af\u03bf \u03b8\u03ad\u03bb\u03b5\u03c4\u03b5 \u03bd\u03b1 \u03ba\u03ac\u03bd\u03b5\u03c4\u03b5 \u03c4\u03b7\u03bd \u03b5\u03b3\u03b3\u03c1\u03b1\u03c6\u03ae \u03c4\u03bf\u03c5 \u03b5\u03b9\u03b4\u03ce\u03bb\u03bf\u03c5.\"",
          "6245: t MSG_276 \"\u0395\u03b3\u03b3\u03c1\u03b1\u03c6\u03ae \u03c9\u03c2 %s (\u03a0\u03c1\u03bf\u03c4\u03b5\u03b9\u03bd\u03cc\u03bc\u03b5\u03bd\u03bf)\"",
          "6246: t MSG_277 \"\u0395\u03b3\u03b3\u03c1\u03b1\u03c6\u03ae \u03c9\u03c2 %s\"",
          "6247: t MSG_279 \"\u0394\u03b5\u03bd \u03b4\u03b9\u03b1\u03b8\u03ad\u03c4\u03b5\u03b9 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1 \u03b5\u03ba\u03ba\u03af\u03bd\u03b7\u03c3\u03b7\u03c2\"",
          "6250: t MSG_282 \"\u039a\u03bb\u03b5\u03af\u03b4\u03c9\u03bc\u03b1 \u03bc\u03bf\u03bd\u03ac\u03b4\u03b1\u03c2 USB\"",
          "6251: t MSG_283 \"\u039c\u03b7 \u03ad\u03b3\u03ba\u03c5\u03c1\u03b7 \u03c8\u03b7\u03c6\u03b9\u03b1\u03ba\u03ae \u03c5\u03c0\u03bf\u03b3\u03c1\u03b1\u03c6\u03ae\"",
          "6252: t MSG_284 \"\u03a4\u03bf \u03b5\u03ba\u03c4\u03b5\u03bb\u03ad\u03c3\u03b9\u03bc\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03c0\u03bf\u03c5 \u03ba\u03b1\u03c4\u03b5\u03b2\u03ac\u03c3\u03b1\u03c4\u03b5 \u03b4\u03b5\u03bd \u03c0\u03b5\u03c1\u03b9\u03bb\u03b1\u03bc\u03b2\u03ac\u03bd\u03b5\u03b9 \u03c8\u03b7\u03c6\u03b9\u03b1\u03ba\u03ae \u03c5\u03c0\u03bf\u03b3\u03c1\u03b1\u03c6\u03ae.\"",
          "",
          "[Removed Lines]",
          "6248: t MSG_280 \"\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03b5\u03b9\u03b4\u03ce\u03bb\u03bf\u03c5\"",
          "6249: t MSG_281 \"(\u03a0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03ce \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03c4\u03b5 \u03ba\u03ac\u03c0\u03bf\u03b9\u03bf \u03b5\u03af\u03b4\u03c9\u03bb\u03bf)\"",
          "",
          "[Added Lines]",
          "6257: t MSG_278 \"\u0393\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03ad\u03bb\u03b5\u03b3\u03c7\u03bf\u03c2 \u03b3\u03b9\u03b1 \u03b1\u03bd\u03c4\u03b9\u03ba\u03c1\u03bf\u03c5\u03cc\u03bc\u03b5\u03bd\u03b5\u03c2 \u03b4\u03b9\u03b1\u03b4\u03b9\u03ba\u03b1\u03c3\u03af\u03b5\u03c2...\"",
          "6259: t MSG_280 \"\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03b4\u03af\u03c3\u03ba\u03bf\u03c5 \u03ae \u03b5\u03b9\u03b4\u03ce\u03bb\u03bf\u03c5 ISO\"",
          "6260: t MSG_281 \"%s (\u03a0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03ce \u0395\u03c0\u03b9\u03bb\u03ad\u03be\u03c4\u03b5)\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6268: t MSG_298 \"\u03a4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf ISO \u03c0\u03bf\u03c5 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03b1\u03c4\u03b5 \u03b4\u03b5\u03bd \u03b5\u03b9\u03bd\u03b1\u03b9 \u03ad\u03b3\u03ba\u03c5\u03c1\u03bf/\u03bf\u03bb\u03cc\u03ba\u03bb\u03b7\u03c1\u03bf. %s \u03b1\u03c0\u03cc \u03c4\u03b1 \u03b4\u03b5\u03b4\u03bf\u03bc\u03ad\u03bd\u03b1 \u03c4\u03bf\u03c5 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5 \u03bb\u03b5\u03af\u03c0\u03bf\u03c5\u03bd.\\n\\n\u0386\u03bd \u03ba\u03b1\u03c4\u03b5\u03b2\u03ac\u03c3\u03b1\u03c4\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03b1\u03c0\u03bf \u03c4\u03bf \u03b4\u03b9\u03b1\u03b4\u03af\u03ba\u03c4\u03c5\u03bf, \"",
          "6269:  \"\u03c0\u03c1\u03bf\u03c3\u03c0\u03b1\u03b8\u03ae\u03c3\u03c4\u03b5 \u03bd\u03b1 \u03b5\u03c0\u03b1\u03bd\u03b1\u03bb\u03ac\u03b2\u03b5\u03c4\u03b5 \u03c4\u03b7\u03bd \u03bb\u03ae\u03c8\u03b7 \u03c4\u03bf\u03c5 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u0392\u03b5\u03b2\u03b1\u03b9\u03c9\u03b8\u03b5\u03af\u03c4\u03b5 \u03cc\u03c4\u03b9 \u03bf\u03b9 MD5 \u03ae SHA \u03c3\u03c6\u03c1\u03b1\u03b3\u03af\u03b4\u03b5\u03c2 \u03c4\u03bf\u03c5 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5 \u03c0\u03bf\u03c5 \u03ba\u03b1\u03c4\u03b5\u03b2\u03ac\u03c3\u03b1\u03c4\u03b5 \u03b5\u03af\u03bd\u03b1\u03b9 \u03af\u03b4\u03b9\u03b5\u03c2 \u03bc\u03b5 \u03b1\u03c5\u03c4\u03b5\u03c2 \u03c4\u03bf\u03c5 \u03b1\u03c1\u03c7\u03b5\u03b9\u03bf\u03c5 \"",
          "6270:  \"\u03c0\u03bf\u03c5 \u03b8\u03ad\u03bb\u03b1\u03c4\u03b5 \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b5\u03b2\u03ac\u03c3\u03b5\u03c4\u03b5.\\n\\n\u039c\u03c0\u03bf\u03c1\u03b5\u03af\u03c4\u03b5 \u03bd\u03b1 \u03b5\u03bb\u03ad\u03b3\u03be\u03b5\u03c4\u03b5 \u03c4\u03b9\u03c2 \u03c3\u03c6\u03c1\u03b1\u03b3\u03af\u03b4\u03b5\u03c2 MD5 \u03ae SHA \u03bc\u03ad\u03c3\u03c9 \u03c4\u03bf\u03c5 Rufus \u03c0\u03b1\u03c4\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03ba\u03bf\u03c5\u03bc\u03c0\u03af (\u2713).\"",
          "6274: ################################################################################",
          "6275: l \"he-IL\" \"Hebrew (\u05e2\u05d1\u05e8\u05d9\u05ea)\" 0x040d",
          "",
          "[Removed Lines]",
          "6271: t MSG_117 \"\u03a0\u03c1\u03bf\u03c3\u03b1\u03c1\u03bc\u03bf\u03c3\u03bc\u03ad\u03bd\u03b7 \u03b5\u03b3\u03ba\u03b1\u03c4\u03ac\u03c3\u03c4\u03b1\u03c3\u03b7 \u03c4\u03c9\u03bd Windows\"",
          "6272: t MSG_118 \"Windows To Go (USB \u03bc\u03b5 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1 \u03b5\u03ba\u03ba\u03af\u03bd\u03b7\u03c3\u03b7\u03c2)\"",
          "",
          "[Added Lines]",
          "6282: t MSG_299 \"\u03a3\u03c6\u03ac\u03bb\u03bc\u03b1 \u03b5\u03c0\u03b9\u03ba\u03cd\u03c1\u03c9\u03c3\u03b7\u03c2 \u03c7\u03c1\u03cc\u03bd\u03bf\u03c5 (timestamp)\"",
          "6283: t MSG_300 \"\u03a4\u03bf Rufus \u03b4\u03b5\u03bd \u03ba\u03b1\u03c4\u03ac\u03c6\u03b5\u03c1\u03b5 \u03bd\u03b1 \u03b4\u03b9\u03b1\u03b2\u03b5\u03b2\u03b1\u03b9\u03ce\u03c3\u03b5\u03b9 \u03cc\u03c4\u03b9 \u03b7 \u03ad\u03ba\u03b4\u03bf\u03c3\u03b7 \u03b1\u03bd\u03b1\u03b2\u03ac\u03b8\u03bc\u03b9\u03c3\u03b7\u03c2 \u03ad\u03c7\u03b5\u03b9 \u03b5\u03ba\u03b4\u03c9\u03b8\u03b5\u03af \u03c3\u03b5 \u03bd\u03b5\u03ce\u03c4\u03b5\u03c1\u03b7 \u03b7\u03bc\u03b5\u03c1\u03bf\u03bc\u03b7\u03bd\u03af\u03b1 \u03b1\u03c0\u03bf \u03c4\u03b7\u03bd \u03ad\u03ba\u03b4\u03bf\u03c3\u03b7 \u03c0\u03bf\u03c5 \u03ad\u03c7\u03b5\u03c4\u03b5 \u03ae\u03b4\u03b7.\"",
          "6284:  \"\\n\\n\u0393\u03b9\u03b1 \u03bb\u03cc\u03b3\u03bf\u03c5\u03c2 \u03b1\u03c3\u03c6\u03b1\u03bb\u03b5\u03af\u03b1\u03c2 \u03b7 \u03b5\u03b3\u03ba\u03b1\u03c4\u03ac\u03c3\u03c4\u03b1\u03c3\u03b7 \u03ad\u03c7\u03b5\u03b9 \u03b1\u03ba\u03c5\u03c1\u03c9\u03b8\u03b5\u03af \u03ba\u03b1\u03b9 \u03b7 \u03ad\u03ba\u03b4\u03bf\u03c3\u03b7 \u03c0\u03bf\u03c5 \u03ba\u03b1\u03c4\u03b5\u03b2\u03ac\u03c3\u03b1\u03c4\u03b5 \u03b8\u03b1 \u03b4\u03b9\u03b1\u03b3\u03c1\u03b1\u03c6\u03b5\u03af. \"",
          "6285:  \"\u0393\u03b9\u03b1 \u03c0\u03b5\u03c1\u03b9\u03c3\u03c3\u03cc\u03c4\u03b5\u03c1\u03b5\u03c2 \u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03af\u03b5\u03c2, \u03b5\u03bb\u03ad\u03b3\u03be\u03c4\u03b5 \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03ba\u03b1\u03c4\u03b1\u03b3\u03c1\u03b1\u03c6\u03ae\u03c2.\"",
          "6286: t MSG_301 \"\u0395\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03c1\u03c5\u03b8\u03bc\u03af\u03c3\u03b5\u03c9\u03bd \u03b5\u03c6\u03b1\u03c1\u03bc\u03bf\u03b3\u03ae\u03c2\"",
          "6287: t MSG_302 \"\u0395\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ce\u03bd \u03b5\u03c6\u03b1\u03c1\u03c6\u03bf\u03b3\u03ae\u03c2\"",
          "6288: t MSG_303 \"\u0395\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03ba\u03b1\u03c4\u03b1\u03b3\u03c1\u03b1\u03c6\u03ce\u03bd \u03b5\u03c6\u03b1\u03c1\u03bc\u03bf\u03b3\u03ae\u03c2 (log)\"",
          "6289: t MSG_304 \"\u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03b5\u03b9\u03b4\u03ce\u03bb\u03bf\u03c5 \u03b4\u03af\u03c3\u03ba\u03bf\u03c5 \u03b1\u03c0\u03cc \u03c4\u03b7\u03bd \u03b5\u03c0\u03b9\u03bb\u03b5\u03b3\u03bc\u03ad\u03bd\u03b7 \u03c3\u03c5\u03c3\u03ba\u03b5\u03c5\u03ae\"",
          "6290: t MSG_305 \"\u0395\u03c0\u03b9\u03bb\u03ad\u03be\u03c4\u03b5 \u03b1\u03c5\u03c4\u03cc \u03b1\u03bd \u03b8\u03ad\u03bb\u03b5\u03c4\u03b5 \u03bd\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b5\u03c4\u03b5 \u03b1\u03c5\u03c4\u03ae \u03c4\u03b7 \u03c3\u03c5\u03c3\u03ba\u03b5\u03c5\u03ae \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03b5\u03b3\u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03ae\u03c3\u03b5\u03c4\u03b5 \u03c4\u03b1 Windows \u03c3\u03b5 \u03ba\u03ac\u03c0\u03bf\u03b9\u03bf \u03b4\u03af\u03c3\u03ba\u03bf, \"",
          "6291:  \"\u03ae \u03b8\u03ad\u03bb\u03b5\u03c4\u03b5 \u03bd\u03b1 \u03c4\u03b1 \u03c4\u03c1\u03ad\u03c7\u03b5\u03c4\u03b5 \u03ba\u03b1\u03c4\u03b5\u03c5\u03b8\u03b5\u03af\u03b1\u03bd \u03b1\u03c0\u03cc \u03c4\u03b7\u03bd \u03c3\u03c5\u03c3\u03ba\u03b5\u03c5\u03ae (Windows To Go).\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.0.1298\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.0.1299\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391: VS_VERSION_INFO VERSIONINFO",
          "394:  FILEFLAGSMASK 0x3fL",
          "395: #ifdef _DEBUG",
          "396:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "392:  FILEVERSION 3,0,1298,0",
          "393:  PRODUCTVERSION 3,0,1298,0",
          "",
          "[Added Lines]",
          "392:  FILEVERSION 3,0,1299,0",
          "393:  PRODUCTVERSION 3,0,1299,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:         BEGIN",
          "408:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "409:             VALUE \"FileDescription\", \"Rufus\"",
          "411:             VALUE \"InternalName\", \"Rufus\"",
          "412:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "413:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "414:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "415:             VALUE \"ProductName\", \"Rufus\"",
          "417:         END",
          "418:     END",
          "419:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "410:             VALUE \"FileVersion\", \"3.0.1298\"",
          "416:             VALUE \"ProductVersion\", \"3.0.1298\"",
          "",
          "[Added Lines]",
          "410:             VALUE \"FileVersion\", \"3.0.1299\"",
          "416:             VALUE \"ProductVersion\", \"3.0.1299\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}