{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2b3ba3f538e9ff22cdb4172799ee38d06818165f",
      "candidate_info": {
        "commit_hash": "2b3ba3f538e9ff22cdb4172799ee38d06818165f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2b3ba3f538e9ff22cdb4172799ee38d06818165f",
        "files": [
          "lib/http.js",
          "lib/https.js"
        ],
        "message": "http/https: pass request to .createConnection()\n\nIt's useful for passing some additional options of request object to the\nunderlying API",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "lib/https.js||lihttps.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:   }",
          "1068:   if (this.sockets[name].length < this.maxSockets) {",
          "1071:   } else {",
          "1073:     if (!this.requests[name]) {",
          "",
          "[Removed Lines]",
          "1070:     req.onSocket(this.createSocket(name, host, port, localAddress));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1076:     this.requests[name].push(req);",
          "1077:   }",
          "1078: };",
          "1080:   var self = this;",
          "1081:   var options = util._extend({}, self.options);",
          "1082:   options.port = port;",
          "1083:   options.host = host;",
          "1084:   options.localAddress = localAddress;",
          "1086:   if (!self.sockets[name]) {",
          "1087:     self.sockets[name] = [];",
          "1088:   }",
          "",
          "[Removed Lines]",
          "1079: Agent.prototype.createSocket = function(name, host, port, localAddress) {",
          "1085:   var s = self.createConnection(options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1123:   }",
          "1124:   if (this.requests[name] && this.requests[name].length) {",
          "1127:   }",
          "1128: };",
          "",
          "[Removed Lines]",
          "1126:     this.createSocket(name, host, port, localAddress).emit('free');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1135:   var self = this;",
          "1136:   OutgoingMessage.call(self);",
          "1138:   self.agent = options.agent === undefined ? globalAgent : options.agent;",
          "1140:   var defaultPort = options.defaultPort || 80;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1194:     self._last = true;",
          "1195:     self.shouldKeepAlive = false;",
          "1196:     if (options.createConnection) {",
          "1198:     } else {",
          "1199:       self.onSocket(net.createConnection(self.socketPath));",
          "1200:     }",
          "",
          "[Removed Lines]",
          "1197:       self.onSocket(options.createConnection(self.socketPath));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1210:     if (options.createConnection) {",
          "1211:       options.port = port;",
          "1212:       options.host = host;",
          "1214:     } else {",
          "1215:       var conn = net.createConnection({",
          "1216:         port: port,",
          "",
          "[Removed Lines]",
          "1213:       var conn = options.createConnection(options);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/https.js||lihttps.js": [
          "File: lib/https.js -> lihttps.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var tls = require('tls');",
          "23: var http = require('http');",
          "26: function Server(opts, requestListener) {",
          "27:   if (!(this instanceof Server)) return new Server(opts, requestListener);",
          "",
          "[Removed Lines]",
          "24: var inherits = require('util').inherits;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: function createConnection(/* [port, host, options] */) {",
          "57:   if (typeof arguments[0] === 'object') {",
          "59:   } else if (typeof arguments[1] === 'object') {",
          "61:     options.port = arguments[0];",
          "62:   } else if (typeof arguments[2] === 'object') {",
          "64:     options.port = arguments[0];",
          "65:     options.host = arguments[1];",
          "66:   } else {",
          "",
          "[Removed Lines]",
          "55:   var options = {};",
          "58:     options = arguments[0];",
          "60:     options = arguments[1];",
          "63:     options = arguments[2];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75670d3f630cbd96cadc75c62f40747dcbf966bd",
      "candidate_info": {
        "commit_hash": "75670d3f630cbd96cadc75c62f40747dcbf966bd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/75670d3f630cbd96cadc75c62f40747dcbf966bd",
        "files": [
          "test/simple/test-stdout-close-catch.js"
        ],
        "message": "test: wait for 'close' event for stdout\n\nAt the 'exit' event, it is sometimes not done writing to stdout.",
        "before_after_code_files": [
          "test/simple/test-stdout-close-catch.js||test/simple/test-stdout-close-catch.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-stdout-close-catch.js||test/simple/test-stdout-close-catch.js": [
          "File: test/simple/test-stdout-close-catch.js -> test/simple/test-stdout-close-catch.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   output += c;",
          "44: });",
          "47:   try {",
          "48:     output = JSON.parse(output);",
          "49:   } catch (er) {",
          "",
          "[Removed Lines]",
          "46: child.on('exit', function(code) {",
          "",
          "[Added Lines]",
          "46: child.on('close', function(code) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61be6844aaea681ce7269447ef850ce17dfa0b3e",
      "candidate_info": {
        "commit_hash": "61be6844aaea681ce7269447ef850ce17dfa0b3e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/61be6844aaea681ce7269447ef850ce17dfa0b3e",
        "files": [
          "test/pummel/test-fs-watch-file.js",
          "test/pummel/test-watch-file.js"
        ],
        "message": "disable fs.watchFile tests on windows",
        "before_after_code_files": [
          "test/pummel/test-fs-watch-file.js||test/pummel/test-fs-watch-file.js",
          "test/pummel/test-watch-file.js||test/pummel/test-watch-file.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/pummel/test-fs-watch-file.js||test/pummel/test-fs-watch-file.js": [
          "File: test/pummel/test-fs-watch-file.js -> test/pummel/test-fs-watch-file.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var common = require('../common');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: if (process.platform === 'win32') {",
          "24:   process.exit(0);",
          "25: }",
          "",
          "---------------"
        ],
        "test/pummel/test-watch-file.js||test/pummel/test-watch-file.js": [
          "File: test/pummel/test-watch-file.js -> test/pummel/test-watch-file.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: if (process.platform === 'win32') {",
          "24:   process.exit(0);",
          "25: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "726ebad9bc89061b20f7b3f857e9683f727c70f9",
      "candidate_info": {
        "commit_hash": "726ebad9bc89061b20f7b3f857e9683f727c70f9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/726ebad9bc89061b20f7b3f857e9683f727c70f9",
        "files": [
          "src/stream_wrap.cc"
        ],
        "message": "StreamWrap::WriteBuffer: remove superfluous arguments",
        "before_after_code_files": [
          "src/stream_wrap.cc||src/stream_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:   UNWRAP",
          "257:   Local<Object> buffer_obj = args[0]->ToObject();",
          "258:   size_t offset = 0;",
          "259:   size_t length = Buffer::Length(buffer_obj);",
          "269:   if (length > INT_MAX) {",
          "270:     uv_err_t err;",
          "271:     err.code = UV_ENOBUFS;",
          "",
          "[Removed Lines]",
          "252:   bool ipc_pipe = wrap->stream_->type == UV_NAMED_PIPE &&",
          "253:                   ((uv_pipe_t*)wrap->stream_)->ipc;",
          "256:   assert(Buffer::HasInstance(args[0]));",
          "261:   if (args.Length() > 1) {",
          "262:     offset = args[1]->IntegerValue();",
          "263:   }",
          "265:   if (args.Length() > 2) {",
          "266:     length = args[2]->IntegerValue();",
          "267:   }",
          "",
          "[Added Lines]",
          "253:   assert(args.Length() >= 1 && Buffer::HasInstance(args[0]));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282:   buf.base = Buffer::Data(buffer_obj) + offset;",
          "283:   buf.len = length;",
          "308:   req_wrap->Dispatched();",
          "309:   req_wrap->object_->Set(bytes_sym, Number::New((uint32_t) length));",
          "",
          "[Removed Lines]",
          "285:   int r;",
          "287:   if (!ipc_pipe) {",
          "288:     r = uv_write(&req_wrap->req_, wrap->stream_, &buf, 1, StreamWrap::AfterWrite);",
          "289:   } else {",
          "290:     uv_stream_t* send_stream = NULL;",
          "292:     if (args[3]->IsObject()) {",
          "293:       Local<Object> send_stream_obj = args[3]->ToObject();",
          "294:       assert(send_stream_obj->InternalFieldCount() > 0);",
          "295:       StreamWrap* send_stream_wrap = static_cast<StreamWrap*>(",
          "296:           send_stream_obj->GetPointerFromInternalField(0));",
          "297:       send_stream = send_stream_wrap->GetStream();",
          "298:     }",
          "300:     r = uv_write2(&req_wrap->req_,",
          "301:                   wrap->stream_,",
          "302:                   &buf,",
          "303:                   1,",
          "304:                   send_stream,",
          "305:                   StreamWrap::AfterWrite);",
          "306:   }",
          "",
          "[Added Lines]",
          "274:   int r = uv_write(&req_wrap->req_,",
          "275:                    wrap->stream_,",
          "276:                    &buf,",
          "277:                    1,",
          "278:                    StreamWrap::AfterWrite);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "985e3a25cb93f82dbef9b1b4279b8614f508898c",
      "candidate_info": {
        "commit_hash": "985e3a25cb93f82dbef9b1b4279b8614f508898c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/985e3a25cb93f82dbef9b1b4279b8614f508898c",
        "files": [
          "lib/path.js",
          "lib/timers.js",
          "src/node.js"
        ],
        "message": "lint",
        "before_after_code_files": [
          "lib/path.js||lipath.js",
          "lib/timers.js||litimers.js",
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/path.js||lipath.js": [
          "File: lib/path.js -> lipath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:   exports._makeLong = function(path) {",
          "451:     return path;",
          "452:   };",
          "",
          "[Removed Lines]",
          "453: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/timers.js||litimers.js": [
          "File: lib/timers.js -> litimers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:     if (immediate.domain) immediate.domain.exit();",
          "310:   }",
          "314: exports.setImmediate = function(callback) {",
          "",
          "[Removed Lines]",
          "311: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:         wrap.unref();",
          "585:         var signum = startup.lazyConstants()[type];",
          "586:         var r = wrap.start(signum);",
          "587:         if (r) {",
          "588:           wrap.close();",
          "590:         }",
          "592:         signalWraps[type] = wrap;",
          "",
          "[Removed Lines]",
          "583:         wrap.onsignal = function () { process.emit(type); };",
          "589:           throw errnoException(errno, \"uv_signal_start\");",
          "",
          "[Added Lines]",
          "583:         wrap.onsignal = function() { process.emit(type); };",
          "589:           throw errnoException(errno, 'uv_signal_start');",
          "",
          "---------------"
        ]
      }
    }
  ]
}