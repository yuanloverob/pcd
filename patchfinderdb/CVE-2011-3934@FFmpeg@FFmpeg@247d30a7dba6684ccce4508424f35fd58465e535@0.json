{
  "cve_id": "CVE-2011-3934",
  "cve_desc": "Double free vulnerability in the vp3_update_thread_context function in libavcodec/vp3.c in FFmpeg before 0.10 allows remote attackers to have an unspecified impact via crafted vp3 data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "247d30a7dba6684ccce4508424f35fd58465e535",
  "patch_info": {
    "commit_hash": "247d30a7dba6684ccce4508424f35fd58465e535",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/247d30a7dba6684ccce4508424f35fd58465e535",
    "files": [
      "libavcodec/vp3.c"
    ],
    "message": "vp3: Copy all 3 frames for thread updates.\n\nThis fixes a double release of the current frame on deinit.\nFixes CVE-2011-3934\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/vp3.c||libavcodec/vp3.c"
    ]
  },
  "patch_diff": {
    "libavcodec/vp3.c||libavcodec/vp3.c": [
      "File: libavcodec/vp3.c -> libavcodec/vp3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1859:         ||s->width != s1->width",
      "1860:         ||s->height!= s1->height) {",
      "1861:         if (s != s1)",
      "1863:         return -1;",
      "1864:     }",
      "",
      "[Removed Lines]",
      "1862:             copy_fields(s, s1, golden_frame, current_frame);",
      "",
      "[Added Lines]",
      "1862:             copy_fields(s, s1, golden_frame, keyframe);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8370e426e42f2e4b9d14a1fb8107ecfe5163ce7f",
      "candidate_info": {
        "commit_hash": "8370e426e42f2e4b9d14a1fb8107ecfe5163ce7f",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/8370e426e42f2e4b9d14a1fb8107ecfe5163ce7f",
        "files": [
          "libavcodec/vp3.c"
        ],
        "message": "vp3: fix oob read for negative tokens and memleaks on error.",
        "before_after_code_files": [
          "libavcodec/vp3.c||libavcodec/vp3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vp3.c||libavcodec/vp3.c"
          ],
          "candidate": [
            "libavcodec/vp3.c||libavcodec/vp3.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vp3.c||libavcodec/vp3.c": [
          "File: libavcodec/vp3.c -> libavcodec/vp3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #define FRAGMENT_PIXELS 8",
          "47: static av_cold int vp3_decode_end(AVCodecContext *avctx);",
          "50: typedef struct Vp3Fragment {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: static void vp3_decode_flush(AVCodecContext *avctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "891:             token = get_vlc2(gb, vlc_table, 11, 3);",
          "894:                 eob_run = eob_run_base[token];",
          "895:                 if (eob_run_get_bits[token])",
          "896:                     eob_run += get_bits(gb, eob_run_get_bits[token]);",
          "",
          "[Removed Lines]",
          "893:             if (token <= 6) {",
          "",
          "[Added Lines]",
          "894:             if ((unsigned) token <= 6U) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "908:                     coeff_i        += eob_run;",
          "909:                     eob_run = 0;",
          "910:                 }",
          "912:                 bits_to_get = coeff_get_bits[token];",
          "913:                 if (bits_to_get)",
          "914:                     bits_to_get = get_bits(gb, bits_to_get);",
          "",
          "[Removed Lines]",
          "911:             } else {",
          "",
          "[Added Lines]",
          "912:             } else if (token >= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "942:                 for (i = coeff_index+1; i <= coeff_index+zero_run; i++)",
          "943:                     s->num_coded_frags[plane][i]--;",
          "944:                 coeff_i++;",
          "945:             }",
          "946:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "946:             } else {",
          "947:                 av_log(s->avctx, AV_LOG_ERROR,",
          "948:                        \"Invalid token %d\\n\", token);",
          "949:                 return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "992:     residual_eob_run = unpack_vlcs(s, gb, &s->dc_vlc[dc_y_table], 0,",
          "993:         0, residual_eob_run);",
          "996:     reverse_dc_prediction(s, 0, s->fragment_width[0], s->fragment_height[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999:     if (residual_eob_run < 0)",
          "1000:         return residual_eob_run;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "999:     residual_eob_run = unpack_vlcs(s, gb, &s->dc_vlc[dc_c_table], 0,",
          "1000:         1, residual_eob_run);",
          "1001:     residual_eob_run = unpack_vlcs(s, gb, &s->dc_vlc[dc_c_table], 0,",
          "1002:         2, residual_eob_run);",
          "1005:     if (!(s->avctx->flags & CODEC_FLAG_GRAY))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008:     if (residual_eob_run < 0)",
          "1009:         return residual_eob_run;",
          "1012:     if (residual_eob_run < 0)",
          "1013:         return residual_eob_run;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1036:     for (i = 1; i <= 63; i++) {",
          "1037:             residual_eob_run = unpack_vlcs(s, gb, y_tables[i], i,",
          "1038:                 0, residual_eob_run);",
          "1040:             residual_eob_run = unpack_vlcs(s, gb, c_tables[i], i,",
          "1041:                 1, residual_eob_run);",
          "1042:             residual_eob_run = unpack_vlcs(s, gb, c_tables[i], i,",
          "1043:                 2, residual_eob_run);",
          "1044:     }",
          "1046:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1050:             if (residual_eob_run < 0)",
          "1051:                 return residual_eob_run;",
          "1055:             if (residual_eob_run < 0)",
          "1056:                 return residual_eob_run;",
          "1059:             if (residual_eob_run < 0)",
          "1060:                 return residual_eob_run;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1777:     Vp3DecodeContext *s = dst->priv_data, *s1 = src->priv_data;",
          "1778:     int qps_changed = 0, i, err;",
          "1780:     if (!s1->current_frame.data[0]",
          "1781:         ||s->width != s1->width",
          "1783:         return -1;",
          "1785:     if (s != s1) {",
          "",
          "[Removed Lines]",
          "1782:         ||s->height!= s1->height)",
          "",
          "[Added Lines]",
          "1797: #define copy_fields(to, from, start_field, end_field) memcpy(&to->start_field, &from->start_field, (char*)&to->end_field - (char*)&to->start_field)",
          "1801:         ||s->height!= s1->height) {",
          "1802:         if (s != s1)",
          "1803:             copy_fields(s, s1, golden_frame, current_frame);",
          "1805:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1796:             memcpy(s->motion_val[1], s1->motion_val[1], c_fragment_count * sizeof(*s->motion_val[1]));",
          "1797:         }",
          "1802:         copy_fields(s, s1, golden_frame, dsp);",
          "",
          "[Removed Lines]",
          "1799: #define copy_fields(to, from, start_field, end_field) memcpy(&to->start_field, &from->start_field, (char*)&to->end_field - (char*)&to->start_field)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1987:     Vp3DecodeContext *s = avctx->priv_data;",
          "1988:     int i;",
          "1993:     av_free(s->superblock_coding);",
          "1994:     av_free(s->all_fragments);",
          "1995:     av_free(s->coded_fragment_list[0]);",
          "",
          "[Removed Lines]",
          "1990:     if (avctx->is_copy && !s->current_frame.data[0])",
          "1991:         return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2016:     free_vlc(&s->motion_vector_vlc);",
          "2026:     return 0;",
          "2027: }",
          "",
          "[Removed Lines]",
          "2019:     if (s->golden_frame.data[0])",
          "2020:         ff_thread_release_buffer(avctx, &s->golden_frame);",
          "2021:     if (s->last_frame.data[0] && s->last_frame.type != FF_BUFFER_TYPE_COPY)",
          "2022:         ff_thread_release_buffer(avctx, &s->last_frame);",
          "",
          "[Added Lines]",
          "2036:     vp3_decode_flush(avctx);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2341:         ff_thread_release_buffer(avctx, &s->current_frame);",
          "2342: }",
          "2344: AVCodec ff_theora_decoder = {",
          "2345:     .name           = \"theora\",",
          "2346:     .type           = AVMEDIA_TYPE_VIDEO,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2356: static int vp3_init_thread_copy(AVCodecContext *avctx)",
          "2357: {",
          "2358:     Vp3DecodeContext *s = avctx->priv_data;",
          "2360:     s->superblock_coding      = NULL;",
          "2361:     s->all_fragments          = NULL;",
          "2362:     s->coded_fragment_list[0] = NULL;",
          "2363:     s->dct_tokens_base        = NULL;",
          "2364:     s->superblock_fragments   = NULL;",
          "2365:     s->macroblock_coding      = NULL;",
          "2366:     s->motion_val[0]          = NULL;",
          "2367:     s->motion_val[1]          = NULL;",
          "2368:     s->edge_emu_buffer        = NULL;",
          "2370:     return 0;",
          "2371: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2352:     .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_DRAW_HORIZ_BAND | CODEC_CAP_FRAME_THREADS,",
          "2353:     .flush = vp3_decode_flush,",
          "2354:     .long_name = NULL_IF_CONFIG_SMALL(\"Theora\"),",
          "2355:     .update_thread_context = ONLY_IF_THREADS_ENABLED(vp3_update_thread_context)",
          "2356: };",
          "2357: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2384:     .init_thread_copy      = ONLY_IF_THREADS_ENABLED(vp3_init_thread_copy),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2367:     .capabilities   = CODEC_CAP_DR1 | CODEC_CAP_DRAW_HORIZ_BAND | CODEC_CAP_FRAME_THREADS,",
          "2368:     .flush = vp3_decode_flush,",
          "2369:     .long_name = NULL_IF_CONFIG_SMALL(\"On2 VP3\"),",
          "2370:     .update_thread_context = ONLY_IF_THREADS_ENABLED(vp3_update_thread_context)",
          "2371: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2400:     .init_thread_copy      = ONLY_IF_THREADS_ENABLED(vp3_init_thread_copy),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d23845f311f04e98777612cae1b55e28923ccdc6",
      "candidate_info": {
        "commit_hash": "d23845f311f04e98777612cae1b55e28923ccdc6",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/d23845f311f04e98777612cae1b55e28923ccdc6",
        "files": [
          "libavcodec/vp3.c"
        ],
        "message": "vp3: Frame-based multithreading support\n\nDecode times for big_buck_bunny_720p_stereo:\n\n1 thread:\nreal    1m14.227s\nuser    1m13.104s\nsys     0m1.108s\n\n2 threads: (33% faster)\nreal    0m49.329s\nuser    1m33.735s\nsys     0m1.834s\n\n3 threads: (44% faster)\nreal    0m41.593s\nuser    1m44.884s\nsys     0m1.967s",
        "before_after_code_files": [
          "libavcodec/vp3.c||libavcodec/vp3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vp3.c||libavcodec/vp3.c"
          ],
          "candidate": [
            "libavcodec/vp3.c||libavcodec/vp3.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vp3.c||libavcodec/vp3.c": [
          "File: libavcodec/vp3.c -> libavcodec/vp3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"vp3data.h\"",
          "42: #include \"xiph.h\"",
          "44: #define FRAGMENT_PIXELS 8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include \"thread.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1318:     int h, cy;",
          "1319:     int offset[4];",
          "1321:     if(s->avctx->draw_horiz_band==NULL)",
          "1322:         return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1322:     if (HAVE_PTHREADS && s->avctx->active_thread_type&FF_THREAD_FRAME) {",
          "1323:         int y_flipped = s->flipped_image ? s->avctx->height-y : y;",
          "1328:         ff_thread_report_progress(&s->current_frame, y_flipped==s->avctx->height ? INT_MAX : y_flipped-1, 0);",
          "1329:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1339:     s->avctx->draw_horiz_band(s->avctx, &s->current_frame, offset, y, 3, h);",
          "1340: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1356: static void await_reference_row(Vp3DecodeContext *s, Vp3Fragment *fragment, int motion_y, int y)",
          "1357: {",
          "1358:     AVFrame *ref_frame;",
          "1359:     int ref_row;",
          "1360:     int border = motion_y&1;",
          "1362:     if (fragment->coding_method == MODE_USING_GOLDEN ||",
          "1363:         fragment->coding_method == MODE_GOLDEN_MV)",
          "1364:         ref_frame = &s->golden_frame;",
          "1365:     else",
          "1366:         ref_frame = &s->last_frame;",
          "1368:     ref_row = y + (motion_y>>1);",
          "1369:     ref_row = FFMAX(FFABS(ref_row), ref_row + 8 + border);",
          "1371:     ff_thread_await_progress(ref_frame, ref_row, 0);",
          "1372: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1371:         int fragment_width    = s->fragment_width[!!plane];",
          "1372:         int fragment_height   = s->fragment_height[!!plane];",
          "1373:         int fragment_start    = s->fragment_start[plane];",
          "1375:         if (!s->flipped_image) stride = -stride;",
          "1376:         if (CONFIG_GRAY && plane && (s->avctx->flags & CODEC_FLAG_GRAY))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1406:         int do_await          = !plane && HAVE_PTHREADS && (s->avctx->active_thread_type&FF_THREAD_FRAME);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1401:                 first_pixel = 8*y*stride + 8*x;",
          "1404:                 if (s->all_fragments[i].coding_method != MODE_COPY) {",
          "1405:                     if ((s->all_fragments[i].coding_method == MODE_USING_GOLDEN) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1436:                 if (do_await && s->all_fragments[i].coding_method != MODE_INTRA)",
          "1437:                     await_reference_row(s, &s->all_fragments[i], motion_val[fragment][1], (16*y) >> s->chroma_y_shift);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1721:     return -1;",
          "1722: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1761: static void update_frames(AVCodecContext *avctx)",
          "1762: {",
          "1763:     Vp3DecodeContext *s = avctx->priv_data;",
          "1767:     if (s->last_frame.data[0] && s->last_frame.type != FF_BUFFER_TYPE_COPY)",
          "1768:         ff_thread_release_buffer(avctx, &s->last_frame);",
          "1771:     s->last_frame= s->current_frame;",
          "1773:     if (s->keyframe) {",
          "1774:         if (s->golden_frame.data[0])",
          "1775:             ff_thread_release_buffer(avctx, &s->golden_frame);",
          "1776:         s->golden_frame = s->current_frame;",
          "1777:         s->last_frame.type = FF_BUFFER_TYPE_COPY;",
          "1778:     }",
          "1781: }",
          "1783: static int vp3_update_thread_context(AVCodecContext *dst, const AVCodecContext *src)",
          "1784: {",
          "1785:     Vp3DecodeContext *s = dst->priv_data, *s1 = src->priv_data;",
          "1786:     int qps_changed = 0, i, err;",
          "1788:     if (!s1->current_frame.data[0]",
          "1789:         ||s->width != s1->width",
          "1790:         ||s->height!= s1->height)",
          "1791:         return -1;",
          "1793:     if (s != s1) {",
          "1795:         if (!s->current_frame.data[0]) {",
          "1796:             int y_fragment_count, c_fragment_count;",
          "1797:             s->avctx = dst;",
          "1798:             err = allocate_tables(dst);",
          "1799:             if (err)",
          "1800:                 return err;",
          "1801:             y_fragment_count = s->fragment_width[0] * s->fragment_height[0];",
          "1802:             c_fragment_count = s->fragment_width[1] * s->fragment_height[1];",
          "1803:             memcpy(s->motion_val[0], s1->motion_val[0], y_fragment_count * sizeof(*s->motion_val[0]));",
          "1804:             memcpy(s->motion_val[1], s1->motion_val[1], c_fragment_count * sizeof(*s->motion_val[1]));",
          "1805:         }",
          "1807: #define copy_fields(to, from, start_field, end_field) memcpy(&to->start_field, &from->start_field, (char*)&to->end_field - (char*)&to->start_field)",
          "1810:         copy_fields(s, s1, golden_frame, dsp);",
          "1813:         for (i = 0; i < 3; i++) {",
          "1814:             if (s->qps[i] != s1->qps[1]) {",
          "1815:                 qps_changed = 1;",
          "1816:                 memcpy(&s->qmat[i], &s1->qmat[i], sizeof(s->qmat[i]));",
          "1817:             }",
          "1818:         }",
          "1820:         if (s->qps[0] != s1->qps[0]) {",
          "1821:             memcpy(&s->qscale_table, &s1->qscale_table, sizeof(s->qscale_table));",
          "1822:             memcpy(&s->bounding_values_array, &s1->bounding_values_array, sizeof(s->bounding_values_array));",
          "1823:         }",
          "1825:         if (qps_changed)",
          "1826:             copy_fields(s, s1, qps, superblock_count);",
          "1827: #undef copy_fields",
          "1828:     }",
          "1830:     update_frames(dst);",
          "1832:     return 0;",
          "1833: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1777:     s->current_frame.reference = 3;",
          "1778:     s->current_frame.pict_type = s->keyframe ? FF_I_TYPE : FF_P_TYPE;",
          "1780:         av_log(s->avctx, AV_LOG_ERROR, \"get_buffer() failed\\n\");",
          "1781:         goto error;",
          "1782:     }",
          "",
          "[Removed Lines]",
          "1779:     if (avctx->get_buffer(avctx, &s->current_frame) < 0) {",
          "",
          "[Added Lines]",
          "1890:     if (ff_thread_get_buffer(avctx, &s->current_frame) < 0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1806:             s->golden_frame.reference = 3;",
          "1807:             s->golden_frame.pict_type = FF_I_TYPE;",
          "1809:                 av_log(s->avctx, AV_LOG_ERROR, \"get_buffer() failed\\n\");",
          "1810:                 goto error;",
          "1811:             }",
          "",
          "[Removed Lines]",
          "1808:             if (avctx->get_buffer(avctx, &s->golden_frame) < 0) {",
          "",
          "[Added Lines]",
          "1919:             if (ff_thread_get_buffer(avctx, &s->golden_frame) < 0) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1818:     s->current_frame.qstride= 0;",
          "1820:     memset(s->all_fragments, 0, s->fragment_count * sizeof(Vp3Fragment));",
          "1822:     if (unpack_superblocks(s, &gb)){",
          "1823:         av_log(s->avctx, AV_LOG_ERROR, \"error in unpack_superblocks\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1932:     ff_thread_finish_setup(avctx);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1882:     return buf_size;",
          "1884: error:",
          "1886:         avctx->release_buffer(avctx, &s->current_frame);",
          "1887:     return -1;",
          "1888: }",
          "",
          "[Removed Lines]",
          "1867:     if (s->last_frame.data[0] && s->last_frame.type != FF_BUFFER_TYPE_COPY)",
          "1868:         avctx->release_buffer(avctx, &s->last_frame);",
          "1871:     s->last_frame= s->current_frame;",
          "1873:     if (s->keyframe) {",
          "1874:         if (s->golden_frame.data[0])",
          "1875:             avctx->release_buffer(avctx, &s->golden_frame);",
          "1876:         s->golden_frame = s->current_frame;",
          "1877:         s->last_frame.type = FF_BUFFER_TYPE_COPY;",
          "1878:     }",
          "1885:     if (s->current_frame.data[0])",
          "",
          "[Added Lines]",
          "1977:     if (!HAVE_PTHREADS || !(s->avctx->active_thread_type&FF_THREAD_FRAME))",
          "1978:         update_frames(avctx);",
          "1983:     ff_thread_report_progress(&s->current_frame, INT_MAX, 0);",
          "1985:     if (!HAVE_PTHREADS || !(s->avctx->active_thread_type&FF_THREAD_FRAME))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1895:     Vp3DecodeContext *s = avctx->priv_data;",
          "1896:     int i;",
          "1898:     av_free(s->superblock_coding);",
          "1899:     av_free(s->all_fragments);",
          "1900:     av_free(s->coded_fragment_list[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1999:     if (avctx->is_copy && !s->current_frame.data[0])",
          "2000:         return 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1904:     av_free(s->motion_val[0]);",
          "1905:     av_free(s->motion_val[1]);",
          "1907:     for (i = 0; i < 16; i++) {",
          "1908:         free_vlc(&s->dc_vlc[i]);",
          "1909:         free_vlc(&s->ac_vlc_1[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2011:     if (avctx->is_copy) return 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1921:     if (s->golden_frame.data[0])",
          "1923:     if (s->last_frame.data[0] && s->last_frame.type != FF_BUFFER_TYPE_COPY)",
          "",
          "[Removed Lines]",
          "1922:         avctx->release_buffer(avctx, &s->golden_frame);",
          "1924:         avctx->release_buffer(avctx, &s->last_frame);",
          "",
          "[Added Lines]",
          "2028:         ff_thread_release_buffer(avctx, &s->golden_frame);",
          "2030:         ff_thread_release_buffer(avctx, &s->last_frame);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2232:     NULL,",
          "2233:     vp3_decode_end,",
          "2234:     vp3_decode_frame,",
          "2236:     NULL,",
          "2237:     .long_name = NULL_IF_CONFIG_SMALL(\"Theora\"),",
          "2238: };",
          "2239: #endif",
          "",
          "[Removed Lines]",
          "2235:     CODEC_CAP_DR1 | CODEC_CAP_DRAW_HORIZ_BAND,",
          "",
          "[Added Lines]",
          "2341:     CODEC_CAP_DR1 | CODEC_CAP_DRAW_HORIZ_BAND | CODEC_CAP_FRAME_THREADS,",
          "2344:     .update_thread_context = ONLY_IF_THREADS_ENABLED(vp3_update_thread_context)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2247:     NULL,",
          "2248:     vp3_decode_end,",
          "2249:     vp3_decode_frame,",
          "2251:     NULL,",
          "2252:     .long_name = NULL_IF_CONFIG_SMALL(\"On2 VP3\"),",
          "2253: };",
          "",
          "[Removed Lines]",
          "2250:     CODEC_CAP_DR1 | CODEC_CAP_DRAW_HORIZ_BAND,",
          "",
          "[Added Lines]",
          "2357:     CODEC_CAP_DR1 | CODEC_CAP_DRAW_HORIZ_BAND | CODEC_CAP_FRAME_THREADS,",
          "2360:     .update_thread_context = ONLY_IF_THREADS_ENABLED(vp3_update_thread_context)",
          "",
          "---------------"
        ]
      }
    }
  ]
}