{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9e00fc27d001e118a71ad58c4e101067c432d32c",
      "candidate_info": {
        "commit_hash": "9e00fc27d001e118a71ad58c4e101067c432d32c",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/9e00fc27d001e118a71ad58c4e101067c432d32c",
        "files": [
          "lib/hx509/data/openssl.1.1.cnf"
        ],
        "message": "For https://github.com/heimdal/heimdal/issues/392\n\nCorrectly reference the OID so gen-cert.sh works correctly\n\n(cherry picked from commit 2d193d380d13e0c8b3c9312c26613d58fa7837df)",
        "before_after_code_files": [
          "lib/hx509/data/openssl.1.1.cnf||lib/hx509/data/openssl.1.1.cnf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hx509/data/openssl.1.1.cnf||lib/hx509/data/openssl.1.1.cnf": [
          "File: lib/hx509/data/openssl.1.1.cnf -> lib/hx509/data/openssl.1.1.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: [pkinit_kdc_cert]",
          "131: basicConstraints=CA:FALSE",
          "132: keyUsage = nonRepudiation, digitalSignature, keyEncipherment",
          "134: subjectKeyIdentifier = hash",
          "135: subjectAltName=otherName:1.3.6.1.5.2.2;SEQUENCE:pkinitkdc_princ_name",
          "",
          "[Removed Lines]",
          "133: extendedKeyUsage = pkkdcekuoid",
          "",
          "[Added Lines]",
          "133: extendedKeyUsage = 1.3.6.1.5.2.3.5",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e89e3be1346ad4dcd6f8edbd70d5061865ee11b5",
      "candidate_info": {
        "commit_hash": "e89e3be1346ad4dcd6f8edbd70d5061865ee11b5",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/e89e3be1346ad4dcd6f8edbd70d5061865ee11b5",
        "files": [
          "lib/kadm5/get_s.c",
          "tests/kdc/check-iprop.in"
        ],
        "message": "Do not recover log in kadm5_get_principal()",
        "before_after_code_files": [
          "lib/kadm5/get_s.c||lib/kadm5/get_s.c",
          "tests/kdc/check-iprop.in||tests/kdc/check-iprop.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/kadm5/get_s.c||lib/kadm5/get_s.c": [
          "File: lib/kadm5/get_s.c -> lib/kadm5/get_s.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     kadm5_server_context *context = server_handle;",
          "124:     kadm5_ret_t ret;",
          "125:     hdb_entry_ex ent;",
          "128:     memset(&ent, 0, sizeof(ent));",
          "129:     memset(out, 0, sizeof(*out));",
          "131:     if (!context->keep_open) {",
          "137:  if (ret)",
          "138:      return ret;",
          "139:     }",
          "152:     ret = context->db->hdb_fetch_kvno(context->context, context->db, princ,",
          "153:           HDB_F_DECRYPT|HDB_F_ALL_KVNOS|",
          "",
          "[Removed Lines]",
          "126:     int hdb_is_rw = 1;",
          "132:  ret = context->db->hdb_open(context->context, context->db, O_RDWR, 0);",
          "133:         if (ret == EPERM || ret == EACCES) {",
          "134:             ret = context->db->hdb_open(context->context, context->db, O_RDONLY, 0);",
          "135:             hdb_is_rw = 0;",
          "136:         }",
          "149:     if (hdb_is_rw && kadm5_log_init_nb(context) == 0)",
          "150:         (void) kadm5_log_end(context);",
          "",
          "[Added Lines]",
          "131:         ret = context->db->hdb_open(context->context, context->db, O_RDONLY, 0);",
          "",
          "---------------"
        ],
        "tests/kdc/check-iprop.in||tests/kdc/check-iprop.in": [
          "File: tests/kdc/check-iprop.in -> tests/kdc/check-iprop.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: echo \"Test log recovery\"",
          "158: ${kadmin} -l add --random-key --use-defaults recovtest@${R} || exit 1",
          "159: # Test theory: save the log, make a change and save the record it",
          "162: # Save the log",
          "163: cp current.log current.log.tmp",
          "",
          "[Removed Lines]",
          "160: # produced, restore the log, append to it the saved record, then get",
          "",
          "[Added Lines]",
          "160: # produced, restore the log, append to it the saved record, then add dummy",
          "161: # record.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180: # Append the saved record",
          "181: cat current.log.tmp.saved-record >> current.log",
          "182: rm current.log.tmp.saved-record",
          "184: ${kadmin} -l get recovtest@${R} | grep 'Attributes: requires-pre-auth$' > /dev/null || exit 1",
          "186: # -- foo",
          "",
          "[Removed Lines]",
          "183: # Check that we still see the principal as modified",
          "",
          "[Added Lines]",
          "184: # Check that we still see the principal as modified after another write forcing",
          "185: # log recovery.",
          "186: ${kadmin} -l add --random-key --use-defaults dummy@${R} || exit 1",
          "187: ${kadmin} -l del dummy@${R} || exit 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b2c4985384bee6a95ae3a06bcbaaff6fb5063d6",
      "candidate_info": {
        "commit_hash": "8b2c4985384bee6a95ae3a06bcbaaff6fb5063d6",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/8b2c4985384bee6a95ae3a06bcbaaff6fb5063d6",
        "files": [
          "include/heim_threads.h"
        ],
        "message": "sunpro c defines __SUNPRO_C not __SUNPRO_CC\n\nCC is the c++ compiler; C is the c compiler. use the correct define",
        "before_after_code_files": [
          "include/heim_threads.h||include/heim_threads.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/heim_threads.h||include/heim_threads.h": [
          "File: include/heim_threads.h -> include/heim_threads.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #else",
          "56: #define HEIMDAL_THREAD_LOCAL __thread",
          "57: #else",
          "58: #error \"thread-local attribute not defined for your compiler\"",
          "",
          "[Removed Lines]",
          "55: #if defined(__clang__) || defined(__GNUC__) || defined(__SUNPRO_CC)",
          "",
          "[Added Lines]",
          "55: #if defined(__clang__) || defined(__GNUC__) || defined(__SUNPRO_C)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4cff6859d183a40fb35a76e2bc1ce084b3a6d67",
      "candidate_info": {
        "commit_hash": "c4cff6859d183a40fb35a76e2bc1ce084b3a6d67",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/c4cff6859d183a40fb35a76e2bc1ce084b3a6d67",
        "files": [
          "lib/hx509/Makefile.am"
        ],
        "message": "hx509: fix dependency, hxtool requires ASN.1 headers",
        "before_after_code_files": [
          "lib/hx509/Makefile.am||lib/hx509/Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hx509/Makefile.am||lib/hx509/Makefile.am": [
          "File: lib/hx509/Makefile.am -> lib/hx509/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: dist_hxtool_SOURCES = hxtool.c",
          "165: nodist_hxtool_SOURCES = hxtool-commands.c hxtool-commands.h",
          "169: hxtool_LDADD = \\",
          "170:  libhx509.la \\",
          "",
          "[Removed Lines]",
          "167: $(hxtool_OBJECTS): hxtool-commands.h hx509_err.h",
          "",
          "[Added Lines]",
          "167: $(hxtool_OBJECTS): hxtool-commands.h $(nodist_include_HEADERS)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f611f7f577665fb5d2f37ce3c2ea755966022b6",
      "candidate_info": {
        "commit_hash": "2f611f7f577665fb5d2f37ce3c2ea755966022b6",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/2f611f7f577665fb5d2f37ce3c2ea755966022b6",
        "files": [
          "admin/add.c",
          "appl/otp/otp.c",
          "kadmin/ank.c",
          "kadmin/cpw.c",
          "kadmin/stash.c",
          "kdc/kstash.c",
          "kpasswd/kpasswd.c",
          "lib/hcrypto/ui.c",
          "lib/hcrypto/ui.h"
        ],
        "message": "cherry pick libhcrypto: UI_UTIL_FLAG_VERIFY_SILENT (#690)\n\n* libhcrypto: UI_UTIL_FLAG_VERIFY_SILENT\n\n(cherry picked from commit 014f16883c7c911b2804fb081e885e0571528e85)",
        "before_after_code_files": [
          "admin/add.c||admin/add.c",
          "appl/otp/otp.c||appl/otp/otp.c",
          "kadmin/ank.c||kadmin/ank.c",
          "kadmin/cpw.c||kadmin/cpw.c",
          "kadmin/stash.c||kadmin/stash.c",
          "kdc/kstash.c||kdc/kstash.c",
          "kpasswd/kpasswd.c||kpasswd/kpasswd.c",
          "lib/hcrypto/ui.c||lib/hcrypto/ui.c",
          "lib/hcrypto/ui.h||lib/hcrypto/ui.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "admin/add.c||admin/add.c": [
          "File: admin/add.c -> admin/add.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:      goto out;",
          "95:     }",
          "96:     if(opt->password_string == NULL && opt->random_flag == 0) {",
          "98:      ret = 1;",
          "99:      goto out;",
          "100:  }",
          "",
          "[Removed Lines]",
          "97:  if(UI_UTIL_read_pw_string(buf, sizeof(buf), \"Password: \", 1)) {",
          "",
          "[Added Lines]",
          "97:  if(UI_UTIL_read_pw_string(buf, sizeof(buf), \"Password: \",",
          "98:       UI_UTIL_FLAG_VERIFY)) {",
          "",
          "---------------"
        ],
        "appl/otp/otp.c||appl/otp/otp.c": [
          "File: appl/otp/otp.c -> appl/otp/otp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     strlcpy (ctx.seed, argv[1], sizeof(ctx.seed));",
          "154:     strlwr(ctx.seed);",
          "155:     do {",
          "157:      return 1;",
          "158:  if (strlen (pw) < OTP_MIN_PASSPHRASE)",
          "159:      printf (\"Too short pass-phrase.  Use at least %d characters\\n\",",
          "",
          "[Removed Lines]",
          "156:  if (UI_UTIL_read_pw_string (pw, sizeof(pw), \"Pass-phrase: \", 1))",
          "",
          "[Added Lines]",
          "156:  if (UI_UTIL_read_pw_string (pw, sizeof(pw), \"Pass-phrase: \",",
          "157:      UI_UTIL_FLAG_VERIFY))",
          "",
          "---------------"
        ],
        "kadmin/ank.c||kadmin/ank.c": [
          "File: kadmin/ank.c -> kadmin/ank.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:      krb5_set_error_message(context, ret, \"out of memory\");",
          "138:      goto out;",
          "139:  }",
          "141:  free (prompt);",
          "142:  if (ret) {",
          "143:      ret = KRB5_LIBOS_BADPWDMATCH;",
          "",
          "[Removed Lines]",
          "140:  ret = UI_UTIL_read_pw_string (pwbuf, sizeof(pwbuf), prompt, 1);",
          "",
          "[Added Lines]",
          "140:  ret = UI_UTIL_read_pw_string (pwbuf, sizeof(pwbuf), prompt,",
          "141:           UI_UTIL_FLAG_VERIFY |",
          "142:           UI_UTIL_FLAG_VERIFY_SILENT);",
          "",
          "---------------"
        ],
        "kadmin/cpw.c||kadmin/cpw.c": [
          "File: kadmin/cpw.c -> kadmin/cpw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  free (princ_name);",
          "99:  if (aret == -1)",
          "100:      return ENOMEM;",
          "102:  free (prompt);",
          "103:  if(ret){",
          "",
          "[Removed Lines]",
          "101:  ret = UI_UTIL_read_pw_string(pwbuf, sizeof(pwbuf), prompt, 1);",
          "",
          "[Added Lines]",
          "101:  ret = UI_UTIL_read_pw_string(pwbuf, sizeof(pwbuf), prompt,",
          "102:          UI_UTIL_FLAG_VERIFY |",
          "103:          UI_UTIL_FLAG_VERIFY_SILENT);",
          "",
          "---------------"
        ],
        "kadmin/stash.c||kadmin/stash.c": [
          "File: kadmin/stash.c -> kadmin/stash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:      random_password (buf, sizeof(buf));",
          "100:      printf(\"Using random master stash password: %s\\n\", buf);",
          "101:  } else {",
          "103:   hdb_free_master_key(context, mkey);",
          "104:   return 0;",
          "105:      }",
          "",
          "[Removed Lines]",
          "102:      if(UI_UTIL_read_pw_string(buf, sizeof(buf), \"Master key: \", 1)) {",
          "",
          "[Added Lines]",
          "102:      if(UI_UTIL_read_pw_string(buf, sizeof(buf), \"Master key: \",",
          "103:           UI_UTIL_FLAG_VERIFY)) {",
          "",
          "---------------"
        ],
        "kdc/kstash.c||kdc/kstash.c": [
          "File: kdc/kstash.c -> kdc/kstash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:   buf[strcspn(buf, \"\\r\\n\")] = '\\0';",
          "126:      } else {",
          "128:       exit(1);",
          "129:      }",
          "130:      krb5_string_to_key_salt(context, enctype, buf, salt, &key);",
          "",
          "[Removed Lines]",
          "127:   if(UI_UTIL_read_pw_string(buf, sizeof(buf), \"Master key: \", 1))",
          "",
          "[Added Lines]",
          "127:   if(UI_UTIL_read_pw_string(buf, sizeof(buf), \"Master key: \",",
          "128:        UI_UTIL_FLAG_VERIFY))",
          "",
          "---------------"
        ],
        "kpasswd/kpasswd.c||kpasswd/kpasswd.c": [
          "File: kpasswd/kpasswd.c -> kpasswd/kpasswd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     if (aret == -1 || msg == NULL)",
          "84:  krb5_errx (context, 1, \"out of memory\");",
          "87:     free(msg);",
          "88:     if (name)",
          "89:  free(name);",
          "",
          "[Removed Lines]",
          "86:     ret = UI_UTIL_read_pw_string (pwbuf, sizeof(pwbuf), msg, 1);",
          "",
          "[Added Lines]",
          "86:     ret = UI_UTIL_read_pw_string (pwbuf, sizeof(pwbuf), msg,",
          "87:       UI_UTIL_FLAG_VERIFY);",
          "",
          "---------------"
        ],
        "lib/hcrypto/ui.c||lib/hcrypto/ui.c": [
          "File: lib/hcrypto/ui.c -> lib/hcrypto/ui.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:     if (ret)",
          "195:  return ret;",
          "198:  char *buf2;",
          "199:  buf2 = malloc(length);",
          "200:  if (buf2 == NULL)",
          "",
          "[Removed Lines]",
          "197:     if (verify) {",
          "",
          "[Added Lines]",
          "197:     if (verify & UI_UTIL_FLAG_VERIFY) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:      free(buf2);",
          "206:      return ret;",
          "207:  }",
          "209:      ret = 1;",
          "210:  free(buf2);",
          "211:     }",
          "212:     return ret;",
          "",
          "[Removed Lines]",
          "208:  if (strcmp(buf2, buf) != 0)",
          "",
          "[Added Lines]",
          "208:  if (strcmp(buf2, buf) != 0) {",
          "209:      if (!(verify & UI_UTIL_FLAG_VERIFY_SILENT)) {",
          "210:   fprintf(stderr, \"Verify failure\\n\");",
          "211:   fflush(stderr);",
          "212:      }",
          "214:  }",
          "",
          "---------------"
        ],
        "lib/hcrypto/ui.h||lib/hcrypto/ui.h": [
          "File: lib/hcrypto/ui.h -> lib/hcrypto/ui.h"
        ]
      }
    }
  ]
}