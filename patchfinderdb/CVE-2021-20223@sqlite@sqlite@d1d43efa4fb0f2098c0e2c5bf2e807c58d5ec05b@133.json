{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7f05d52c4cb84b06c90c325e34d9d1a334357554",
      "candidate_info": {
        "commit_hash": "7f05d52c4cb84b06c90c325e34d9d1a334357554",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f05d52c4cb84b06c90c325e34d9d1a334357554",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/nulls1.test"
        ],
        "message": "Ensure that the NULL-scan pass counter is initialized when a ORDER BY NULLS LAST is used on the right table of a LEFT JOIN.  Ticket [e12a0ae526bb51c7].\n\nFossilOrigin-Name: 704bb9a39acbee420c1d6ac9eb1466a02dd77d3334b938bfddf235973129b5fe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e174ed0d29366eb56ad1a0cc8defcb440b426bfd9525aed2f93468248606efc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1711:       nExtraReg = 1;",
          "1712:       bSeekPastNull = 1;",
          "1713:       pLevel->regBignull = regBignull = ++pParse->nMem;",
          "1714:       pLevel->addrBignull = sqlite3VdbeMakeLabel(pParse);",
          "1715:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1714:       if( pLevel->iLeftJoin ){",
          "1715:         sqlite3VdbeAddOp2(v, OP_Integer, 0, regBignull);",
          "1716:       }",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "297: } {SEARCH TABLE v0 USING COVERING INDEX v3 (ANY(c1) AND c2=?)}",
          "301: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300: # 2020-03-01 ticket e12a0ae526bb51c7",
          "301: # NULLS LAST on a LEFT JOIN",
          "302: #",
          "303: reset_db",
          "304: do_execsql_test 10.10 {",
          "305:   CREATE TABLE t1(x);",
          "306:   INSERT INTO t1(x) VALUES('X');",
          "307:   CREATE TABLE t2(c, d);",
          "308:   CREATE INDEX t2dc ON t2(d, c);",
          "309:   SELECT c FROM t1 LEFT JOIN t2 ON d=NULL ORDER BY d, c NULLS LAST;",
          "310: } {{}}",
          "311: do_execsql_test 10.20 {",
          "312:   INSERT INTO t2(c,d) VALUES(5,'X'),(6,'Y'),(7,'Z'),(3,'A'),(4,'B');",
          "313:   SELECT c FROM t1 LEFT JOIN t2 ON d=x ORDER BY d, c NULLS LAST;",
          "314: } {5}",
          "315: do_execsql_test 10.30 {",
          "316:   UPDATE t2 SET d='X';",
          "317:   UPDATE t2 SET c=NULL WHERE c=6;",
          "318:   SELECT c FROM t1 LEFT JOIN t2 ON d=x ORDER BY d NULLS FIRST, c NULLS FIRST;",
          "319: } {{} 3 4 5 7}",
          "320: do_execsql_test 10.40 {",
          "321:   SELECT c FROM t1 LEFT JOIN t2 ON d=x ORDER BY d NULLS LAST, c NULLS LAST;",
          "322: } {3 4 5 7 {}}",
          "323: do_execsql_test 10.41 {",
          "324:   SELECT c FROM t1 LEFT JOIN t2 ON d=x ORDER BY c NULLS LAST;",
          "325: } {3 4 5 7 {}}",
          "326: do_execsql_test 10.42 {",
          "327:   SELECT c FROM t1 LEFT JOIN t2 ON d=x ORDER BY +d NULLS LAST, +c NULLS LAST;",
          "328: } {3 4 5 7 {}}",
          "329: do_execsql_test 10.50 {",
          "330:   INSERT INTO t1(x) VALUES(NULL),('Y');",
          "331:   SELECT x, c, d, '|' FROM t1 LEFT JOIN t2 ON d=x",
          "332:    ORDER BY d NULLS LAST, c NULLS LAST;",
          "333: } {X 3 X | X 4 X | X 5 X | X 7 X | X {} X | {} {} {} | Y {} {} |}",
          "334: do_execsql_test 10.51 {",
          "335:   SELECT x, c, d, '|' FROM t1 LEFT JOIN t2 ON d=x",
          "336:    ORDER BY +d NULLS LAST, +c NULLS LAST;",
          "337: } {X 3 X | X 4 X | X 5 X | X 7 X | X {} X | {} {} {} | Y {} {} |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "861889e4f8e63e5f9f7508419fe01fe5de8ccb49",
      "candidate_info": {
        "commit_hash": "861889e4f8e63e5f9f7508419fe01fe5de8ccb49",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/861889e4f8e63e5f9f7508419fe01fe5de8ccb49",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c"
        ],
        "message": "When doing an UPDATE or DELETE using a multi-column index where only a few of the earlier columns of the index are useful for the index lookup, postpone doing the main table seek until after all WHERE clause constraints have been evaluated, in case those constraints can be covered by unused later terms of the index, thus avoiding unnecessary main table seeks.\n\nFossilOrigin-Name: 7fee0b1075d622835dc6828c061be516102da9e2809f52d9ab7c4bbef7dfb871",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70f34f3df5358d36c8578afbc05756450c46da36b8dce339ed87fc0b9d4057cb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:   }else",
          "427:   {",
          "429:     if( sNC.ncFlags & NC_VarSelect ) bComplex = 1;",
          "430:     wcf |= (bComplex ? 0 : WHERE_ONEPASS_MULTIROW);",
          "431:     if( HasRowid(pTab) ){",
          "",
          "[Removed Lines]",
          "428:     u16 wcf = WHERE_ONEPASS_DESIRED|WHERE_DUPLICATES_OK|WHERE_SEEK_TABLE;",
          "",
          "[Added Lines]",
          "428:     u16 wcf = WHERE_ONEPASS_DESIRED|WHERE_DUPLICATES_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:     assert( IsVirtual(pTab)==0 || eOnePass!=ONEPASS_MULTI );",
          "462:     assert( IsVirtual(pTab) || bComplex || eOnePass!=ONEPASS_OFF );",
          "463:     if( eOnePass!=ONEPASS_SINGLE ) sqlite3MultiWrite(pParse);",
          "466:     if( memCnt ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464:     if( sqlite3WhereUsesDeferredSeek(pWInfo) ){",
          "465:       sqlite3VdbeAddOp1(v, OP_FinishSeek, iTabCur);",
          "466:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:       if( aiCurOnePass[0]>=0 ) aToOpen[aiCurOnePass[0]-iTabCur] = 0;",
          "496:       if( aiCurOnePass[1]>=0 ) aToOpen[aiCurOnePass[1]-iTabCur] = 0;",
          "497:       if( addrEphOpen ) sqlite3VdbeChangeToNoop(v, addrEphOpen);",
          "498:     }else{",
          "499:       if( pPk ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:       addrBypass = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "509:         sqlite3VdbeAddOp2(v, OP_RowSetAdd, iRowSet, iKey);",
          "510:       }",
          "518:       sqlite3WhereEnd(pWInfo);",
          "519:     }",
          "",
          "[Removed Lines]",
          "511:     }",
          "515:     if( eOnePass!=ONEPASS_OFF ){",
          "516:       addrBypass = sqlite3VdbeMakeLabel(pParse);",
          "517:     }else{",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:       if( !pParse->nested && !pTrigger && !hasFK && !chngKey && !bReplace ){",
          "710:         flags |= WHERE_ONEPASS_MULTIROW;",
          "711:       }",
          "",
          "[Removed Lines]",
          "708:       flags = WHERE_ONEPASS_DESIRED|WHERE_SEEK_UNIQ_TABLE;",
          "",
          "[Added Lines]",
          "708:       flags = WHERE_ONEPASS_DESIRED;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5248:   VdbeModuleComment((v, \"Begin WHERE-core\"));",
          "5249:   return pWInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5249:   pWInfo->iEndWhere = sqlite3VdbeCurrentAddr(v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5289:   WhereLoop *pLoop;",
          "5290:   SrcList *pTabList = pWInfo->pTabList;",
          "5291:   sqlite3 *db = pParse->db;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5293:   int iEnd = sqlite3VdbeCurrentAddr(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5426:   assert( pWInfo->nLevel<=pTabList->nSrc );",
          "5427:   for(i=0, pLevel=pWInfo->a; i<pWInfo->nLevel; i++, pLevel++){",
          "5428:     int k, last;",
          "5430:     Index *pIdx = 0;",
          "5431:     struct SrcList_item *pTabItem = &pTabList->a[pLevel->iFrom];",
          "5432:     Table *pTab = pTabItem->pTab;",
          "",
          "[Removed Lines]",
          "5429:     VdbeOp *pOp;",
          "",
          "[Added Lines]",
          "5431:     VdbeOp *pOp, *pLastOp;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5484:       pIdx = pLevel->u.pCovidx;",
          "5485:     }",
          "5486:     if( pIdx",
          "5488:      && !db->mallocFailed",
          "5489:     ){",
          "5492: #ifdef SQLITE_DEBUG",
          "5493:       if( db->flags & SQLITE_VdbeAddopTrace ){",
          "5494:         printf(\"TRANSLATE opcodes in range %d..%d\\n\", k, last-1);",
          "5495:       }",
          "5496: #endif",
          "5497:       pOp = sqlite3VdbeGetOp(v, k);",
          "5501: #ifdef SQLITE_ENABLE_OFFSET_SQL_FUNC",
          "5502:          || pOp->opcode==OP_Offset",
          "5503: #endif",
          "",
          "[Removed Lines]",
          "5487:      && (pWInfo->eOnePass==ONEPASS_OFF || !HasRowid(pIdx->pTable))",
          "5490:       last = sqlite3VdbeCurrentAddr(v);",
          "5491:       k = pLevel->addrBody;",
          "5498:       for(; k<last; k++, pOp++){",
          "5499:         if( pOp->p1!=pLevel->iTabCur ) continue;",
          "5500:         if( pOp->opcode==OP_Column",
          "",
          "[Added Lines]",
          "5491:       if( pWInfo->eOnePass==ONEPASS_OFF || !HasRowid(pIdx->pTable) ){",
          "5492:         last = iEnd;",
          "5493:       }else{",
          "5494:         last = pWInfo->iEndWhere;",
          "5495:       }",
          "5496:       k = pLevel->addrBody + 1;",
          "5502:       pOp = sqlite3VdbeGetOp(v, k - 1);",
          "5503:       assert( pOp->opcode!=OP_Column || pOp->p1!=pLevel->iTabCur );",
          "5504:       assert( pOp->opcode!=OP_Rowid  || pOp->p1!=pLevel->iTabCur );",
          "5505:       assert( pOp->opcode!=OP_IfNullRow || pOp->p1!=pLevel->iTabCur );",
          "5508:       pLastOp = pOp + (last - k);",
          "5509:       assert( pOp<pLastOp );",
          "5510:       do{",
          "5511:         if( pOp->p1!=pLevel->iTabCur ){",
          "5513:         }else if( pOp->opcode==OP_Column",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5528:           pOp->p1 = pLevel->iIdxCur;",
          "5529:           OpcodeRewriteTrace(db, k, pOp);",
          "5530:         }",
          "5532: #ifdef SQLITE_DEBUG",
          "5533:       if( db->flags & SQLITE_VdbeAddopTrace ) printf(\"TRANSLATE complete\\n\");",
          "5534: #endif",
          "",
          "[Removed Lines]",
          "5531:       }",
          "",
          "[Added Lines]",
          "5544: #ifdef SQLITE_DEBUG",
          "5545:         k++;",
          "5546: #endif",
          "5547:       }while( (++pOp)<pLastOp );",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1909:     if( omitTable ){",
          "1911:     }else if( HasRowid(pIdx->pTable) ){",
          "1923:     }else if( iCur!=iIdxCur ){",
          "1924:       Index *pPk = sqlite3PrimaryKeyIndex(pIdx->pTable);",
          "1925:       iRowidReg = sqlite3GetTempRange(pParse, pPk->nKeyCol);",
          "",
          "[Removed Lines]",
          "1912:       if( (pWInfo->wctrlFlags & WHERE_SEEK_TABLE)",
          "1913:        || ( (pWInfo->wctrlFlags & WHERE_SEEK_UNIQ_TABLE)!=0",
          "1914:            && (pWInfo->eOnePass==ONEPASS_SINGLE || pLoop->nLTerm==0) )",
          "1915:       ){",
          "1916:         iRowidReg = ++pParse->nMem;",
          "1917:         sqlite3VdbeAddOp2(v, OP_IdxRowid, iIdxCur, iRowidReg);",
          "1918:         sqlite3VdbeAddOp3(v, OP_NotExists, iCur, 0, iRowidReg);",
          "1919:         VdbeCoverage(v);",
          "1920:       }else{",
          "1921:         codeDeferredSeek(pWInfo, pIdx, iCur, iIdxCur);",
          "1922:       }",
          "",
          "[Added Lines]",
          "1912:       codeDeferredSeek(pWInfo, pIdx, iCur, iIdxCur);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2151:     ExplainQueryPlan((pParse, 1, \"MULTI-INDEX OR\"));",
          "2152:     for(ii=0; ii<pOrWc->nTerm; ii++){",
          "2153:       WhereTerm *pOrTerm = &pOrWc->a[ii];",
          "",
          "[Removed Lines]",
          "2150:     wctrlFlags =  WHERE_OR_SUBCLAUSE | (pWInfo->wctrlFlags & WHERE_SEEK_TABLE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2166:         ExplainQueryPlan((pParse, 1, \"INDEX %d\", ii+1));",
          "2167:         WHERETRACE(0xffff, (\"Subplan for OR-clause:\\n\"));",
          "2168:         pSubWInfo = sqlite3WhereBegin(pParse, pOrTab, pOrExpr, 0, 0,",
          "2170:         assert( pSubWInfo || pParse->nErr || db->mallocFailed );",
          "2171:         if( pSubWInfo ){",
          "2172:           WhereLoop *pSubLoop;",
          "",
          "[Removed Lines]",
          "2169:                                       wctrlFlags, iCovCur);",
          "",
          "[Added Lines]",
          "2157:                                       WHERE_OR_SUBCLAUSE, iCovCur);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2264:           }else{",
          "2265:             pCov = 0;",
          "2266:           }",
          "2269:           sqlite3WhereEnd(pSubWInfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2255:           if( sqlite3WhereUsesDeferredSeek(pSubWInfo) ){",
          "2256:             pWInfo->bDeferredSeek = 1;",
          "2257:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "346a70ca1edd53f37e4c04a0eb11c63869ed8bc3",
      "candidate_info": {
        "commit_hash": "346a70ca1edd53f37e4c04a0eb11c63869ed8bc3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/346a70ca1edd53f37e4c04a0eb11c63869ed8bc3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/btree.c",
          "src/build.c",
          "src/shell.c.in",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/vacuum.c",
          "src/vdbe.c",
          "src/vtab.c",
          "test/where.test",
          "test/without_rowid3.test"
        ],
        "message": "Provide \"sqlite_schema\" as an alternative name to the table that holds the database schema.\n\nFossilOrigin-Name: 61782a7ae3c25cf59d7a676cb295eb024d17c46e532ae78c6fe871a91d712fa9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/vacuum.c||src/vacuum.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vtab.c||src/vtab.c",
          "test/where.test||test/where.test",
          "test/without_rowid3.test||test/without_rowid3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9472f1fe58222b738ad10fc93ceb365dc33b65c2bbca571f52bcd5bdb74b347e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: static void renameTestSchema(Parse *pParse, const char *zDb, int bTemp){",
          "53:   sqlite3NestedParse(pParse,",
          "54:       \"SELECT 1 \"",
          "56:       \"WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X'\"",
          "57:       \" AND sql NOT LIKE 'create virtual%%'\"",
          "58:       \" AND sqlite_rename_test(%Q, sql, type, name, %d)=NULL \",",
          "60:       zDb, bTemp",
          "61:   );",
          "63:   if( bTemp==0 ){",
          "64:     sqlite3NestedParse(pParse,",
          "65:         \"SELECT 1 \"",
          "67:         \"WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X'\"",
          "68:         \" AND sql NOT LIKE 'create virtual%%'\"",
          "69:         \" AND sqlite_rename_test(%Q, sql, type, name, 1)=NULL \",",
          "71:     );",
          "72:   }",
          "73: }",
          "",
          "[Removed Lines]",
          "55:       \"FROM \\\"%w\\\".%s \"",
          "59:       zDb, MASTER_NAME,",
          "66:         \"FROM temp.%s \"",
          "70:         MASTER_NAME, zDb",
          "",
          "[Added Lines]",
          "55:       \"FROM \\\"%w\\\".\" DFLT_SCHEMA_TABLE \" \"",
          "59:       zDb,",
          "66:         \"FROM temp.\" DFLT_SCHEMA_TABLE \" \"",
          "70:         zDb",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:   sqlite3NestedParse(pParse,",
          "189:       \"sql = sqlite_rename_table(%Q, type, name, sql, %Q, %Q, %d) \"",
          "190:       \"WHERE (type!='index' OR tbl_name=%Q COLLATE nocase)\"",
          "191:       \"AND   name NOT LIKE 'sqliteX_%%' ESCAPE 'X'\"",
          "193:   );",
          "197:   sqlite3NestedParse(pParse,",
          "199:           \"tbl_name = %Q, \"",
          "200:           \"name = CASE \"",
          "201:             \"WHEN type='table' THEN %Q \"",
          "",
          "[Removed Lines]",
          "188:       \"UPDATE \\\"%w\\\".%s SET \"",
          "192:       , zDb, MASTER_NAME, zDb, zTabName, zName, (iDb==1), zTabName",
          "198:       \"UPDATE %Q.%s SET \"",
          "",
          "[Added Lines]",
          "188:       \"UPDATE \\\"%w\\\".\" DFLT_SCHEMA_TABLE \" SET \"",
          "192:       , zDb, zDb, zTabName, zName, (iDb==1), zTabName",
          "198:       \"UPDATE %Q.\" DFLT_SCHEMA_TABLE \" SET \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:             \"ELSE name END \"",
          "206:       \"WHERE tbl_name=%Q COLLATE nocase AND \"",
          "207:           \"(type='table' OR type='index' OR type='trigger');\",",
          "209:       zName, zName, zName,",
          "210:       nTabName, zTabName",
          "211:   );",
          "",
          "[Removed Lines]",
          "208:       zDb, MASTER_NAME,",
          "",
          "[Added Lines]",
          "208:       zDb,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:     }",
          "383:     db->mDbFlags |= DBFLAG_PreferBuiltin;",
          "384:     sqlite3NestedParse(pParse,",
          "386:           \"sql = substr(sql,1,%d) || ', ' || %Q || substr(sql,%d) \"",
          "387:         \"WHERE type = 'table' AND name = %Q\",",
          "389:       zTab",
          "390:     );",
          "391:     sqlite3DbFree(db, zCol);",
          "",
          "[Removed Lines]",
          "385:         \"UPDATE \\\"%w\\\".%s SET \"",
          "388:       zDb, MASTER_NAME, pNew->addColOffset, zCol, pNew->addColOffset+1,",
          "",
          "[Added Lines]",
          "385:         \"UPDATE \\\"%w\\\".\" DFLT_SCHEMA_TABLE \" SET \"",
          "388:       zDb, pNew->addColOffset, zCol, pNew->addColOffset+1,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "595:   assert( pNew->n>0 );",
          "596:   bQuote = sqlite3Isquote(pNew->z[0]);",
          "597:   sqlite3NestedParse(pParse,",
          "599:       \"sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, %d) \"",
          "600:       \"WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X' \"",
          "601:       \" AND (type != 'index' OR tbl_name = %Q)\"",
          "602:       \" AND sql NOT LIKE 'create virtual%%'\",",
          "604:       zDb, pTab->zName, iCol, zNew, bQuote, iSchema==1,",
          "605:       pTab->zName",
          "606:   );",
          "608:   sqlite3NestedParse(pParse,",
          "610:       \"sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, 1) \"",
          "611:       \"WHERE type IN ('trigger', 'view')\",",
          "613:       zDb, pTab->zName, iCol, zNew, bQuote",
          "614:   );",
          "",
          "[Removed Lines]",
          "598:       \"UPDATE \\\"%w\\\".%s SET \"",
          "603:       zDb, MASTER_NAME,",
          "609:       \"UPDATE temp.%s SET \"",
          "612:       MASTER_NAME,",
          "",
          "[Added Lines]",
          "598:       \"UPDATE \\\"%w\\\".\" DFLT_SCHEMA_TABLE \" SET \"",
          "603:       zDb,",
          "609:       \"UPDATE temp.\" DFLT_SCHEMA_TABLE \" SET \"",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3433:   if( SQLITE_OK!=rc ) goto trans_begun;",
          "3435:   pBt->btsFlags &= ~BTS_INITIALLY_EMPTY;",
          "",
          "[Removed Lines]",
          "3432:   rc = querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK);",
          "",
          "[Added Lines]",
          "3432:   rc = querySharedCacheTableLock(p, SCHEMA_ROOT, READ_LOCK);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9478:   sqlite3BtreeEnter(p);",
          "9479:   assert( p->inTrans>TRANS_NONE );",
          "9481:   assert( pBt->pPage1 );",
          "9482:   assert( idx>=0 && idx<=15 );",
          "",
          "[Removed Lines]",
          "9480:   assert( SQLITE_OK==querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK) );",
          "",
          "[Added Lines]",
          "9480:   assert( SQLITE_OK==querySharedCacheTableLock(p, SCHEMA_ROOT, READ_LOCK) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10360:   int rc;",
          "10361:   assert( sqlite3_mutex_held(p->db->mutex) );",
          "10362:   sqlite3BtreeEnter(p);",
          "10364:   assert( rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE );",
          "10365:   sqlite3BtreeLeave(p);",
          "10366:   return rc;",
          "",
          "[Removed Lines]",
          "10363:   rc = querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK);",
          "",
          "[Added Lines]",
          "10363:   rc = querySharedCacheTableLock(p, SCHEMA_ROOT, READ_LOCK);",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:       }",
          "336:     }",
          "337:     p = sqlite3HashFind(&db->aDb[i].pSchema->tblHash, zName);",
          "341:     }",
          "342:   }else{",
          "",
          "[Removed Lines]",
          "338:     if( p==0 && i==1 && sqlite3StrICmp(zName, MASTER_NAME)==0 ){",
          "340:       p = sqlite3HashFind(&db->aDb[1].pSchema->tblHash, TEMP_MASTER_NAME);",
          "",
          "[Added Lines]",
          "338:     if( p==0 && sqlite3StrNICmp(zName, \"sqlite_\", 7)==0 ){",
          "339:       if( i==1 ){",
          "340:         if( sqlite3StrICmp(zName+7, ALT_TEMP_SCHEMA_TABLE+7)==0",
          "341:          || sqlite3StrICmp(zName+7, ALT_SCHEMA_TABLE+7)==0",
          "342:          || sqlite3StrICmp(zName+7, DFLT_SCHEMA_TABLE+7)==0",
          "343:         ){",
          "344:           p = sqlite3HashFind(&db->aDb[1].pSchema->tblHash,",
          "345:                               DFLT_TEMP_SCHEMA_TABLE);",
          "346:         }",
          "347:       }else{",
          "348:         if( sqlite3StrICmp(zName+7, ALT_SCHEMA_TABLE+7)==0 ){",
          "349:           p = sqlite3HashFind(&db->aDb[i].pSchema->tblHash,",
          "350:                               DFLT_SCHEMA_TABLE);",
          "351:         }",
          "352:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:       p = sqlite3HashFind(&db->aDb[i].pSchema->tblHash, zName);",
          "353:       if( p ) break;",
          "354:     }",
          "355:   }",
          "356:   return p;",
          "357: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:     if( p==0 && sqlite3StrNICmp(zName, \"sqlite_\", 7)==0 ){",
          "368:       if( sqlite3StrICmp(zName+7, ALT_SCHEMA_TABLE+7)==0 ){",
          "369:         p = sqlite3HashFind(&db->aDb[0].pSchema->tblHash, DFLT_SCHEMA_TABLE);",
          "370:       }else if( sqlite3StrICmp(zName+7, ALT_TEMP_SCHEMA_TABLE+7)==0 ){",
          "371:         p = sqlite3HashFind(&db->aDb[1].pSchema->tblHash,",
          "372:                             DFLT_TEMP_SCHEMA_TABLE);",
          "373:       }",
          "374:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "750:   Vdbe *v = sqlite3GetVdbe(p);",
          "753:   if( p->nTab==0 ){",
          "754:     p->nTab = 1;",
          "755:   }",
          "",
          "[Removed Lines]",
          "749: void sqlite3OpenMasterTable(Parse *p, int iDb){",
          "751:   sqlite3TableLock(p, iDb, MASTER_ROOT, 1, MASTER_NAME);",
          "752:   sqlite3VdbeAddOp4Int(v, OP_OpenWrite, 0, MASTER_ROOT, iDb, 5);",
          "",
          "[Added Lines]",
          "769: void sqlite3OpenSchemaTable(Parse *p, int iDb){",
          "771:   sqlite3TableLock(p, iDb, SCHEMA_ROOT, 1, DFLT_SCHEMA_TABLE);",
          "772:   sqlite3VdbeAddOp4Int(v, OP_OpenWrite, 0, SCHEMA_ROOT, iDb, 5);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189:       pParse->addrCrTab =",
          "1190:          sqlite3VdbeAddOp3(v, OP_CreateBtree, iDb, reg2, BTREE_INTKEY);",
          "1191:     }",
          "1193:     sqlite3VdbeAddOp2(v, OP_NewRowid, 0, reg1);",
          "1194:     sqlite3VdbeAddOp4(v, OP_Blob, 6, reg3, 0, nullRow, P4_STATIC);",
          "1195:     sqlite3VdbeAddOp3(v, OP_Insert, 0, reg3, reg1);",
          "",
          "[Removed Lines]",
          "1192:     sqlite3OpenMasterTable(pParse, iDb);",
          "",
          "[Added Lines]",
          "1212:     sqlite3OpenSchemaTable(pParse, iDb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2466:     }",
          "2472:     sqlite3NestedParse(pParse,",
          "2477:       zType,",
          "2478:       p->zName,",
          "2479:       p->zName,",
          "",
          "[Removed Lines]",
          "2473:       \"UPDATE %Q.%s \"",
          "2474:          \"SET type='%s', name=%Q, tbl_name=%Q, rootpage=#%d, sql=%Q \"",
          "2475:        \"WHERE rowid=#%d\",",
          "2476:       db->aDb[iDb].zDbSName, MASTER_NAME,",
          "",
          "[Added Lines]",
          "2493:       \"UPDATE %Q.\" DFLT_SCHEMA_TABLE",
          "2494:       \" SET type='%s', name=%Q, tbl_name=%Q, rootpage=#%d, sql=%Q\"",
          "2495:       \" WHERE rowid=#%d\",",
          "2496:       db->aDb[iDb].zDbSName,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2839:   sqlite3NestedParse(pParse,",
          "2842: #endif",
          "2843:   sqlite3ReleaseTempReg(pParse, r1);",
          "2844: }",
          "",
          "[Removed Lines]",
          "2840:      \"UPDATE %Q.%s SET rootpage=%d WHERE #%d AND rootpage=#%d\",",
          "2841:      pParse->db->aDb[iDb].zDbSName, MASTER_NAME, iTable, r1, r1);",
          "",
          "[Added Lines]",
          "2860:      \"UPDATE %Q.\" DFLT_SCHEMA_TABLE",
          "2861:      \" SET rootpage=%d WHERE #%d AND rootpage=#%d\",",
          "2862:      pParse->db->aDb[iDb].zDbSName, iTable, r1, r1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2973:   sqlite3NestedParse(pParse,",
          "2976:   if( !isView && !IsVirtual(pTab) ){",
          "2977:     destroyTable(pParse, pTab);",
          "2978:   }",
          "",
          "[Removed Lines]",
          "2974:       \"DELETE FROM %Q.%s WHERE tbl_name=%Q and type!='trigger'\",",
          "2975:       pDb->zDbSName, MASTER_NAME, pTab->zName);",
          "",
          "[Added Lines]",
          "2995:       \"DELETE FROM %Q.\" DFLT_SCHEMA_TABLE",
          "2996:       \" WHERE tbl_name=%Q and type!='trigger'\",",
          "2997:       pDb->zDbSName, pTab->zName);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3981:       sqlite3NestedParse(pParse,",
          "3984:           pIndex->zName,",
          "3985:           pTab->zName,",
          "3986:           iMem,",
          "",
          "[Removed Lines]",
          "3982:           \"INSERT INTO %Q.%s VALUES('index',%Q,%Q,#%d,%Q);\",",
          "3983:           db->aDb[iDb].zDbSName, MASTER_NAME,",
          "",
          "[Added Lines]",
          "4004:           \"INSERT INTO %Q.\" DFLT_SCHEMA_TABLE \" VALUES('index',%Q,%Q,#%d,%Q);\",",
          "4005:           db->aDb[iDb].zDbSName,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4150:   if( v ){",
          "4151:     sqlite3BeginWriteOperation(pParse, 1, iDb);",
          "4152:     sqlite3NestedParse(pParse,",
          "4155:     );",
          "4156:     sqlite3ClearStatTables(pParse, iDb, \"idx\", pIndex->zName);",
          "4157:     sqlite3ChangeCookie(pParse, iDb);",
          "",
          "[Removed Lines]",
          "4153:        \"DELETE FROM %Q.%s WHERE name=%Q AND type='index'\",",
          "4154:        db->aDb[iDb].zDbSName, MASTER_NAME, pIndex->zName",
          "",
          "[Added Lines]",
          "4175:        \"DELETE FROM %Q.\" DFLT_SCHEMA_TABLE \" WHERE name=%Q AND type='index'\",",
          "4176:        db->aDb[iDb].zDbSName, pIndex->zName",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9030:       }",
          "9031:     }",
          "9032:     if( zName!=0 ){",
          "9035:         char *new_argv[2], *new_colv[2];",
          "9036:         new_argv[0] = sqlite3_mprintf(",
          "9037:                       \"CREATE TABLE %s (\\n\"",
          "",
          "[Removed Lines]",
          "9033:       int isMaster = sqlite3_strlike(zName, \"sqlite_master\", '\\\\')==0;",
          "9034:       if( isMaster || sqlite3_strlike(zName,\"sqlite_temp_master\", '\\\\')==0 ){",
          "",
          "[Added Lines]",
          "9033:       int isMaster = sqlite3_strlike(zName, \"sqlite_master\", '\\\\')==0",
          "9034:                   || sqlite3_strlike(zName, \"sqlite_schema\", '\\\\')==0",
          "9035:                   || sqlite3_strlike(zName,\"sqlite_temp_master\", '\\\\')==0",
          "9036:                   || sqlite3_strlike(zName,\"sqlite_temp_schema\", '\\\\')==0;",
          "9037:       if( isMaster ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9040:                       \"  tbl_name text,\\n\"",
          "9041:                       \"  rootpage integer,\\n\"",
          "9042:                       \"  sql text\\n\"",
          "9044:         new_argv[1] = 0;",
          "9045:         new_colv[0] = \"sql\";",
          "9046:         new_colv[1] = 0;",
          "",
          "[Removed Lines]",
          "9043:                       \")\", isMaster ? \"sqlite_master\" : \"sqlite_temp_master\");",
          "",
          "[Added Lines]",
          "9046:                       \")\", zName);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1014: #define MASTER_NAME       \"sqlite_master\"",
          "1015: #define TEMP_MASTER_NAME  \"sqlite_temp_master\"",
          "1020: #define MASTER_ROOT       1",
          "1025: #define SCHEMA_TABLE(x)  ((!OMIT_TEMPDB)&&(x==1)?TEMP_MASTER_NAME:MASTER_NAME)",
          "",
          "[Added Lines]",
          "1016: #define DFLT_SCHEMA_TABLE          \"sqlite_master\"",
          "1017: #define DFLT_TEMP_SCHEMA_TABLE     \"sqlite_temp_master\"",
          "1018: #define ALT_SCHEMA_TABLE           \"sqlite_schema\"",
          "1019: #define ALT_TEMP_SCHEMA_TABLE      \"sqlite_temp_schema\"",
          "1025: #define SCHEMA_ROOT    1",
          "1030: #define SCHEMA_TABLE(x) \\",
          "1031:     ((!OMIT_TEMPDB)&&(x==1)?DFLT_TEMP_SCHEMA_TABLE:DFLT_SCHEMA_TABLE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4144: int sqlite3ColumnsFromExprList(Parse*,ExprList*,i16*,Column**);",
          "4145: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*,char);",
          "4146: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "4148: Index *sqlite3PrimaryKeyIndex(Table*);",
          "4149: i16 sqlite3TableColumnToIndex(Index*, i16);",
          "4150: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "",
          "[Removed Lines]",
          "4147: void sqlite3OpenMasterTable(Parse *, int);",
          "",
          "[Added Lines]",
          "4153: void sqlite3OpenSchemaTable(Parse *, int);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:     z = sqlite3DbStrNDup(db, (char*)pAll->z, pAll->n);",
          "332:     testcase( z==0 );",
          "333:     sqlite3NestedParse(pParse,",
          "336:        pTrig->table, z);",
          "337:     sqlite3DbFree(db, z);",
          "338:     sqlite3ChangeCookie(pParse, iDb);",
          "",
          "[Removed Lines]",
          "334:        \"INSERT INTO %Q.%s VALUES('trigger',%Q,%Q,0,'CREATE TRIGGER %q')\",",
          "335:        db->aDb[iDb].zDbSName, MASTER_NAME, zName,",
          "",
          "[Added Lines]",
          "334:        \"INSERT INTO %Q.\" DFLT_SCHEMA_TABLE",
          "335:        \" VALUES('trigger',%Q,%Q,0,'CREATE TRIGGER %q')\",",
          "336:        db->aDb[iDb].zDbSName, zName,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "640:   if( (v = sqlite3GetVdbe(pParse))!=0 ){",
          "641:     sqlite3NestedParse(pParse,",
          "644:     );",
          "645:     sqlite3ChangeCookie(pParse, iDb);",
          "646:     sqlite3VdbeAddOp4(v, OP_DropTrigger, iDb, 0, 0, pTrigger->zName, 0);",
          "",
          "[Removed Lines]",
          "642:        \"DELETE FROM %Q.%s WHERE name=%Q AND type='trigger'\",",
          "643:        db->aDb[iDb].zDbSName, MASTER_NAME, pTrigger->zName",
          "",
          "[Added Lines]",
          "643:        \"DELETE FROM %Q.\" DFLT_SCHEMA_TABLE \" WHERE name=%Q AND type='trigger'\",",
          "644:        db->aDb[iDb].zDbSName, pTrigger->zName",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3950:         rc = sqlite3BtreeCreateTable(pCx->pBtx, (int*)&pCx->pgnoRoot,",
          "3951:                                      BTREE_BLOBKEY | pOp->p5);",
          "3952:         if( rc==SQLITE_OK ){",
          "3954:           assert( pKeyInfo->db==db );",
          "3955:           assert( pKeyInfo->enc==ENC(db) );",
          "3956:           rc = sqlite3BtreeCursor(pCx->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "",
          "[Removed Lines]",
          "3953:           assert( pCx->pgnoRoot==MASTER_ROOT+1 );",
          "",
          "[Added Lines]",
          "3953:           assert( pCx->pgnoRoot==SCHEMA_ROOT+1 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3958:         }",
          "3959:         pCx->isTable = 0;",
          "3960:       }else{",
          "3963:                                 0, pCx->uc.pCursor);",
          "3964:         pCx->isTable = 1;",
          "3965:       }",
          "",
          "[Removed Lines]",
          "3961:         pCx->pgnoRoot = MASTER_ROOT;",
          "3962:         rc = sqlite3BtreeCursor(pCx->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "",
          "[Added Lines]",
          "3961:         pCx->pgnoRoot = SCHEMA_ROOT;",
          "3962:         rc = sqlite3BtreeCursor(pCx->pBtx, SCHEMA_ROOT, BTREE_WRCSR,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6103:   }else",
          "6104: #endif",
          "6105:   {",
          "6107:     initData.db = db;",
          "6108:     initData.iDb = iDb;",
          "6109:     initData.pzErrMsg = &p->zErrMsg;",
          "",
          "[Removed Lines]",
          "6106:     zMaster = MASTER_NAME;",
          "",
          "[Added Lines]",
          "6106:     zMaster = DFLT_SCHEMA_TABLE;",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:     iDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "477:     sqlite3NestedParse(pParse,",
          "479:          \"SET type='table', name=%Q, tbl_name=%Q, rootpage=0, sql=%Q \"",
          "480:        \"WHERE rowid=#%d\",",
          "482:       pTab->zName,",
          "483:       pTab->zName,",
          "484:       zStmt,",
          "",
          "[Removed Lines]",
          "478:       \"UPDATE %Q.%s \"",
          "481:       db->aDb[iDb].zDbSName, MASTER_NAME,",
          "",
          "[Added Lines]",
          "478:       \"UPDATE %Q.\" DFLT_SCHEMA_TABLE \" \"",
          "481:       db->aDb[iDb].zDbSName,",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1496:   INSERT INTO t2 VALUES(3, 'three', 'iii');",
          "1498:   PRAGMA writable_schema = 1;",
          "1501:   ) WHERE name = 'i1';",
          "1502: }",
          "1503: db close",
          "",
          "[Removed Lines]",
          "1499:   UPDATE sqlite_master SET rootpage = (",
          "1500:     SELECT rootpage FROM sqlite_master WHERE name = 'i2'",
          "",
          "[Added Lines]",
          "1499:   UPDATE sqlite_schema SET rootpage = (",
          "1500:     SELECT rootpage FROM sqlite_schema WHERE name = 'i2'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1524:   INSERT INTO t2 VALUES(3, 'three', 'iii');",
          "1526:   PRAGMA writable_schema = 1;",
          "1529:   ) WHERE name = 'i1';",
          "1530: }",
          "1531: db close",
          "",
          "[Removed Lines]",
          "1527:   UPDATE sqlite_master SET rootpage = (",
          "1528:     SELECT rootpage FROM sqlite_master WHERE name = 'i2'",
          "",
          "[Added Lines]",
          "1527:   UPDATE sqlite_schema SET rootpage = (",
          "1528:     SELECT rootpage FROM sqlite_schema WHERE name = 'i2'",
          "",
          "---------------"
        ],
        "test/without_rowid3.test||test/without_rowid3.test": [
          "File: test/without_rowid3.test -> test/without_rowid3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "942:       PRAGMA foreign_keys = off;",
          "943:       ALTER TABLE t2 ADD COLUMN h DEFAULT 'text' REFERENCES t1;",
          "944:       PRAGMA foreign_keys = on;",
          "946:     }",
          "947:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "",
          "[Removed Lines]",
          "945:       SELECT sql FROM sqlite_master WHERE name='t2';",
          "",
          "[Added Lines]",
          "945:       SELECT sql FROM sqlite_schema WHERE name='t2';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "976:             WITHOUT rowid;",
          "977:       CREATE TABLE t3(a REFERENCES t1, b REFERENCES t2, c REFERENCES t1);",
          "978:     }",
          "980:   } [list \\",
          "981:     {CREATE TABLE t1(a PRIMARY KEY, b REFERENCES t1) WITHOUT rowid}       \\",
          "982:     {CREATE TABLE t2(a PRIMARY KEY, b REFERENCES t1, c REFERENCES t2)",
          "",
          "[Removed Lines]",
          "979:     execsql { SELECT sql FROM sqlite_master WHERE type = 'table'}",
          "",
          "[Added Lines]",
          "979:     execsql { SELECT sql FROM sqlite_schema WHERE type = 'table'}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "985:   ]",
          "986:   do_test without_rowid3-14.2.2.2 {",
          "987:     execsql { ALTER TABLE t1 RENAME TO t4 }",
          "989:   } [list \\",
          "990:     {CREATE TABLE \"t4\"(a PRIMARY KEY, b REFERENCES \"t4\") WITHOUT rowid}      \\",
          "991:     {CREATE TABLE t2(a PRIMARY KEY, b REFERENCES \"t4\", c REFERENCES t2)",
          "",
          "[Removed Lines]",
          "988:     execsql { SELECT sql FROM sqlite_master WHERE type = 'table'}",
          "",
          "[Added Lines]",
          "988:     execsql { SELECT sql FROM sqlite_schema WHERE type = 'table'}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037:       PRAGMA foreign_keys = off;",
          "1038:       ALTER TABLE t2 ADD COLUMN h DEFAULT 'text' REFERENCES t1;",
          "1039:       PRAGMA foreign_keys = on;",
          "1041:     }",
          "1042:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "",
          "[Removed Lines]",
          "1040:       SELECT sql FROM temp.sqlite_master WHERE name='t2';",
          "",
          "[Added Lines]",
          "1040:       SELECT sql FROM temp.sqlite_schema WHERE name='t2';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1063:             WITHOUT rowid;",
          "1064:       CREATE TEMP TABLE t3(a REFERENCES t1, b REFERENCES t2, c REFERENCES t1);",
          "1065:     }",
          "1067:   } [list \\",
          "1068:     {CREATE TABLE t1(a PRIMARY KEY, b REFERENCES t1) WITHOUT rowid}       \\",
          "1069:     {CREATE TABLE t2(a PRIMARY KEY, b REFERENCES t1, c REFERENCES t2)",
          "",
          "[Removed Lines]",
          "1066:     execsql { SELECT sql FROM sqlite_temp_master WHERE type = 'table'}",
          "",
          "[Added Lines]",
          "1066:     execsql { SELECT sql FROM sqlite_temp_schema WHERE type = 'table'}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1072:   ]",
          "1073:   do_test without_rowid3-14.2tmp.2.2 {",
          "1074:     execsql { ALTER TABLE t1 RENAME TO t4 }",
          "1076:   } [list \\",
          "1077:     {CREATE TABLE \"t4\"(a PRIMARY KEY, b REFERENCES \"t4\") WITHOUT rowid}      \\",
          "1078:     {CREATE TABLE t2(a PRIMARY KEY, b REFERENCES \"t4\", c REFERENCES t2)",
          "",
          "[Removed Lines]",
          "1075:     execsql { SELECT sql FROM temp.sqlite_master WHERE type = 'table'}",
          "",
          "[Added Lines]",
          "1075:     execsql { SELECT sql FROM temp.sqlite_schema WHERE type = 'table'}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1125:       PRAGMA foreign_keys = off;",
          "1126:       ALTER TABLE t2 ADD COLUMN h DEFAULT 'text' REFERENCES t1;",
          "1127:       PRAGMA foreign_keys = on;",
          "1129:     }",
          "1130:   } {{CREATE TABLE t2(a, b, c REFERENCES t1, d DEFAULT NULL REFERENCES t1, e REFERENCES t1 DEFAULT NULL, h DEFAULT 'text' REFERENCES t1)}}",
          "",
          "[Removed Lines]",
          "1128:       SELECT sql FROM aux.sqlite_master WHERE name='t2';",
          "",
          "[Added Lines]",
          "1128:       SELECT sql FROM aux.sqlite_schema WHERE name='t2';",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1151:             WITHOUT rowid;",
          "1152:       CREATE TABLE aux.t3(a REFERENCES t1, b REFERENCES t2, c REFERENCES t1);",
          "1153:     }",
          "1155:   } [list \\",
          "1156:     {CREATE TABLE t1(a PRIMARY KEY, b REFERENCES t1) WITHOUT rowid}       \\",
          "1157:     {CREATE TABLE t2(a PRIMARY KEY, b REFERENCES t1, c REFERENCES t2)",
          "",
          "[Removed Lines]",
          "1154:     execsql { SELECT sql FROM aux.sqlite_master WHERE type = 'table'}",
          "",
          "[Added Lines]",
          "1154:     execsql { SELECT sql FROM aux.sqlite_schema WHERE type = 'table'}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1160:   ]",
          "1161:   do_test without_rowid3-14.2aux.2.2 {",
          "1162:     execsql { ALTER TABLE t1 RENAME TO t4 }",
          "1164:   } [list \\",
          "1165:     {CREATE TABLE \"t4\"(a PRIMARY KEY, b REFERENCES \"t4\") WITHOUT rowid}      \\",
          "1166:     {CREATE TABLE t2(a PRIMARY KEY, b REFERENCES \"t4\", c REFERENCES t2)",
          "",
          "[Removed Lines]",
          "1163:     execsql { SELECT sql FROM aux.sqlite_master WHERE type = 'table'}",
          "",
          "[Added Lines]",
          "1163:     execsql { SELECT sql FROM aux.sqlite_schema WHERE type = 'table'}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2928a15b3c4c16bb3894bcd809c0626c469bf7ba",
      "candidate_info": {
        "commit_hash": "2928a15b3c4c16bb3894bcd809c0626c469bf7ba",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2928a15b3c4c16bb3894bcd809c0626c469bf7ba",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/vtab.c"
        ],
        "message": "Refactor names of flags for improved legibility.\n\nFossilOrigin-Name: 411e8ec2219bb4181aaf2209fb1e7baf5e8df8b8c8adb82a69b48cf7e8e7e7d4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65d7d39a858c51ffd781f5a6335e029895e597aeb1e1ccdadea8ce79c8ad412f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   pFix->pSchema = db->aDb[iDb].pSchema;",
          "478:   pFix->zType = zType;",
          "479:   pFix->pName = pName;",
          "481: }",
          "",
          "[Removed Lines]",
          "480:   pFix->bVarOnly = (iDb==1);",
          "",
          "[Added Lines]",
          "480:   pFix->bTemp = (iDb==1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "505:   if( NEVER(pList==0) ) return 0;",
          "506:   zDb = pFix->zDb;",
          "507:   for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "509:       if( pItem->zDatabase && sqlite3StrICmp(pItem->zDatabase, zDb) ){",
          "510:         sqlite3ErrorMsg(pFix->pParse,",
          "511:             \"%s %T cannot reference objects in database %s\",",
          "",
          "[Removed Lines]",
          "508:     if( pFix->bVarOnly==0 ){",
          "",
          "[Added Lines]",
          "508:     if( pFix->bTemp==0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:       sqlite3DbFree(pFix->pParse->db, pItem->zDatabase);",
          "516:       pItem->zDatabase = 0;",
          "517:       pItem->pSchema = pFix->pSchema;",
          "518:     }",
          "519: #if !defined(SQLITE_OMIT_VIEW) || !defined(SQLITE_OMIT_TRIGGER)",
          "520:     if( sqlite3FixSelect(pFix, pItem->pSelect) ) return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "518:       pItem->fg.fromDDL = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "571: ){",
          "572:   while( pExpr ){",
          "574:     if( pExpr->op==TK_VARIABLE ){",
          "575:       if( pFix->pParse->db->init.busy ){",
          "576:         pExpr->op = TK_NULL;",
          "",
          "[Removed Lines]",
          "573:     ExprSetProperty(pExpr, EP_Indirect);",
          "",
          "[Added Lines]",
          "574:     if( !pFix->bTemp ) ExprSetProperty(pExpr, EP_FromDDL);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "887:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "888:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "889:         { SQLITE_DBCONFIG_LEGACY_FILE_FORMAT,    SQLITE_LegacyFileFmt  },",
          "891:       };",
          "892:       unsigned int i;",
          "",
          "[Removed Lines]",
          "890:         { SQLITE_DBCONFIG_ENABLE_UNSAFE_DDL,     SQLITE_UnsafeDDL      },",
          "",
          "[Added Lines]",
          "890:         { SQLITE_DBCONFIG_UNTRUSTED_SCHEMA,      SQLITE_UnsafeSchema   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3127:                  | SQLITE_EnableTrigger",
          "3128:                  | SQLITE_EnableView",
          "3129:                  | SQLITE_CacheSpill",
          "",
          "[Removed Lines]",
          "3130:                  | SQLITE_UnsafeDDL",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "887:           pDef = 0;",
          "888:         }else",
          "889:         if( (pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_UNSAFE))!=0",
          "891:          && !IN_RENAME_OBJECT",
          "892:         ){",
          "893:           if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "895:           ){",
          "902:             sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "903:                             pDef->zName);",
          "",
          "[Removed Lines]",
          "890:          && ExprHasProperty(pExpr, EP_Indirect)",
          "894:            || (pParse->db->flags & SQLITE_UnsafeDDL)==0",
          "",
          "[Added Lines]",
          "890:          && ExprHasProperty(pExpr, EP_FromDDL)",
          "894:            || (pParse->db->flags & SQLITE_UnsafeSchema)!=0",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7165:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "7166:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "7167:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "7169:         { \"enable_view\",        SQLITE_DBCONFIG_ENABLE_VIEW           },",
          "7170:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7171:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "",
          "[Removed Lines]",
          "7168:         { \"enable_unsafe_ddl\",  SQLITE_DBCONFIG_ENABLE_UNSAFE_DDL     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7174:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "7175:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7176:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7177:         { \"writable_schema\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7178:     };",
          "7179:     int ii, v;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7176:         { \"untrusted_schema\",   SQLITE_DBCONFIG_UNTRUSTED_SCHEMA      },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8933: #define SQLITE_VTAB_CONSTRAINT_SUPPORT 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8959: #define SQLITE_VTAB_INNOCUOUS          2",
          "8960: #define SQLITE_VTAB_DIRECTONLY         3",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1584: #define SQLITE_UnsafeDDL      0x00000080  /* Allow unsafe functions and vtabs",
          "",
          "[Added Lines]",
          "1584: #define SQLITE_UnsafeSchema   0x00000080  /* Disallow unsafe functions and",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2072: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2077: #define SQLITE_VTABRISK_Low          0",
          "2078: #define SQLITE_VTABRISK_Normal       1",
          "2079: #define SQLITE_VTABRISK_High         2",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:   }",
          "588:   pVTable->db = db;",
          "589:   pVTable->pMod = pMod;",
          "591:   iDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "592:   pTab->azModuleArg[1] = db->aDb[iDb].zDbSName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:   pVTable->eVtabRisk = SQLITE_VTABRISK_Normal;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1276: int sqlite3_vtab_config(sqlite3 *db, int op, ...){",
          "1277:   va_list ap;",
          "1278:   int rc = SQLITE_OK;",
          "1280: #ifdef SQLITE_ENABLE_API_ARMOR",
          "1281:   if( !sqlite3SafetyCheckOk(db) ) return SQLITE_MISUSE_BKPT;",
          "1282: #endif",
          "1283:   sqlite3_mutex_enter(db->mutex);",
          "1292:         p->pVTable->bConstraint = (u8)va_arg(ap, int);",
          "1293:       }",
          "1295:     }",
          "1299:   }",
          "1302:   if( rc!=SQLITE_OK ) sqlite3Error(db, rc);",
          "1303:   sqlite3_mutex_leave(db->mutex);",
          "",
          "[Removed Lines]",
          "1284:   va_start(ap, op);",
          "1285:   switch( op ){",
          "1286:     case SQLITE_VTAB_CONSTRAINT_SUPPORT: {",
          "1287:       VtabCtx *p = db->pVtabCtx;",
          "1288:       if( !p ){",
          "1289:         rc = SQLITE_MISUSE_BKPT;",
          "1290:       }else{",
          "1291:         assert( p->pTab==0 || IsVirtual(p->pTab) );",
          "1294:       break;",
          "1296:     default:",
          "1297:       rc = SQLITE_MISUSE_BKPT;",
          "1298:       break;",
          "1300:   va_end(ap);",
          "",
          "[Added Lines]",
          "1280:   VtabCtx *p;",
          "1286:   p = db->pVtabCtx;",
          "1287:   if( !p ){",
          "1288:     rc = SQLITE_MISUSE_BKPT;",
          "1289:   }else{",
          "1290:     assert( p->pTab==0 || IsVirtual(p->pTab) );",
          "1291:     va_start(ap, op);",
          "1292:     switch( op ){",
          "1293:       case SQLITE_VTAB_CONSTRAINT_SUPPORT: {",
          "1295:         break;",
          "1296:       }",
          "1297:       case SQLITE_VTAB_INNOCUOUS: {",
          "1298:         p->pVTable->eVtabRisk = SQLITE_VTABRISK_Low;",
          "1299:         break;",
          "1300:       }",
          "1301:       case SQLITE_VTAB_DIRECTONLY: {",
          "1302:         p->pVTable->eVtabRisk = SQLITE_VTABRISK_High;",
          "1303:         break;",
          "1304:       }",
          "1305:       default: {",
          "1306:         rc = SQLITE_MISUSE_BKPT;",
          "1307:         break;",
          "1310:     va_end(ap);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "088489e8d9ebbcbbbd99093a83bc93bfcd1a39a0",
      "candidate_info": {
        "commit_hash": "088489e8d9ebbcbbbd99093a83bc93bfcd1a39a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/088489e8d9ebbcbbbd99093a83bc93bfcd1a39a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/default.test"
        ],
        "message": "The sqlite3ExprCodeFactorable() routine should make a copy of non-factorable expressions, as they might be coming from a DEFAULT or generated column in a table constraint.\n\nFossilOrigin-Name: a2d6f108c5d07559b125823a04c9cb072c80be80d7913097891a6192c7e1e225",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/default.test||test/default.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3df07e5a9a3781a4cf866fc6ee0e5c6f9cd7ca35ce0a6eb3aa7f5f3502e0ffae",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2852:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2853:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2854:     pExpr->y.sub.iAddr =",
          "2855:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2853:     assert( !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4604:   if( pParse->okConstFactor && sqlite3ExprIsConstantNotJoin(pExpr) ){",
          "4605:     sqlite3ExprCodeAtInit(pParse, pExpr, target);",
          "4606:   }else{",
          "4608:   }",
          "4609: }",
          "",
          "[Removed Lines]",
          "4607:     sqlite3ExprCode(pParse, pExpr, target);",
          "",
          "[Added Lines]",
          "4608:     sqlite3ExprCodeCopy(pParse, pExpr, target);",
          "",
          "---------------"
        ],
        "test/default.test||test/default.test": [
          "File: test/default.test -> test/default.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:   CREATE TABLE t2(a TEXT, b TEXT DEFAULT(98+coalesce(5,:xyz)));",
          "129: } {1 {default value of column [b] is not constant}}",
          "131: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: # 2020-03-09 out-of-bounds memory access discovered by \"Eternal Sakura\"",
          "132: # and reported to chromium.",
          "133: #",
          "134: reset_db",
          "135: do_catchsql_test default-5.1 {",
          "136:   CREATE TABLE t1 (a,b DEFAULT(random() NOTNULL IN (RAISE(IGNORE),2,3)));",
          "137:   INSERT INTO t1(a) VALUES(1);",
          "138: } {1 {RAISE() may only be used within a trigger-program}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}