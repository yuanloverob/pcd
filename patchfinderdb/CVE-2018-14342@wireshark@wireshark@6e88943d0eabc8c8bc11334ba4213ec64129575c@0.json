{
  "cve_id": "CVE-2018-14342",
  "cve_desc": "In Wireshark 2.6.0 to 2.6.1, 2.4.0 to 2.4.7, and 2.2.0 to 2.2.15, the BGP protocol dissector could go into a large loop. This was addressed in epan/dissectors/packet-bgp.c by validating Path Attribute lengths.",
  "repo": "wireshark/wireshark",
  "patch_hash": "6e88943d0eabc8c8bc11334ba4213ec64129575c",
  "patch_info": {
    "commit_hash": "6e88943d0eabc8c8bc11334ba4213ec64129575c",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/6e88943d0eabc8c8bc11334ba4213ec64129575c",
    "files": [
      "epan/dissectors/packet-bgp.c"
    ],
    "message": "BGP: Validate length of Path Attribute records.\n\nBug 13741 showed a case where the BGP dissector's failure to validate the\nlength of the Path Attribute record allowed a pathological BGP UPDATE packet to\ngenerate more than one million items in the protocol tree by repeatedly\ndissecting certain segments of the packet.\n\nIt's easy enough to detect when the Path Attribute length cannot be valid, so\nlet's do so.  When the condition arises, let's raise an Expert Info error in\nthe same style and format as used elsewhere in the same routine, and abandon\ndissection of the Path Attributes list.\n\nWith this check in place, an incorrect length computation is revealed at a\ncallsite.  This would only have prevented a small (less than 5 bytes) Path\nAttribute from being dissected if it was at the very end of the Path Attributes\nlist, but the bounds checking added in this change makes this problem much more\napparent, so we fix the length computation while we're here.\n\nTesting Done: Built wireshark on Linux amd64.  Using bgp.pcap from the Sample\n   Captures page on the wiki, verified that the dissection of the UPDATE\n   packets were unaltered by this fix.  Using the capture attached to bug 13741\n   (clusterfuzz-testcase-minimized-6689222578667520.pcap), verified that the\n   packet no longer triggers the \"too many items\" exception, instead we see\n   an Expert Info for each oversized Path Attribute length, and eventually an\n   exception for \"length of contained item exceeds length of containing item\".\n   30,000 iterations of fuzz test with bgp.pcap as input, and many iterations\n   of randpkt-test too.  Crafted a packet with a 3-byte ATOMIC_AGGREGATE Path\n   Attribute at the end of the Path Attributes list; Before this change, an\n   exception is raised during dissection, but after this change it is dissected\n   correctly.\n\nBug: 13741\nChange-Id: I80f506b114a61e5b060d93b59bed6b94fb188b3e\nReviewed-on: https://code.wireshark.org/review/27466\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c": [
      "File: epan/dissectors/packet-bgp.c -> epan/dissectors/packet-bgp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6918:         attr_len_item = proto_tree_add_item(subtree2, hf_bgp_update_path_attribute_length, tvb, o + i + BGP_SIZE_OF_PATH_ATTRIBUTE,",
      "6919:                                             aoff - BGP_SIZE_OF_PATH_ATTRIBUTE, ENC_BIG_ENDIAN);",
      "6922:         switch (bgpa_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6920:         if (aoff + tlen > path_attr_len - i) {",
      "6921:             proto_tree_add_expert_format(subtree2, pinfo, &ei_bgp_length_invalid, tvb, o + i + aoff, tlen,",
      "6922:                                          \"Path attribute length is invalid: %u byte%s\", tlen,",
      "6923:                                          plurality(tlen, \"\", \"s\"));",
      "6924:             return;",
      "6925:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7706:         ti =  proto_tree_add_item(tree, hf_bgp_update_path_attributes, tvb, o+2, len, ENC_NA);",
      "7707:         subtree = proto_item_add_subtree(ti, ett_bgp_attrs);",
      "7711:         o += 2 + len;",
      "",
      "[Removed Lines]",
      "7709:         dissect_bgp_path_attr(subtree, tvb, len-4, o+2, pinfo);",
      "",
      "[Added Lines]",
      "7715:         dissect_bgp_path_attr(subtree, tvb, len, o+2, pinfo);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5eb6f114a0c208861e3e391e196531cf42506c0d",
      "candidate_info": {
        "commit_hash": "5eb6f114a0c208861e3e391e196531cf42506c0d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5eb6f114a0c208861e3e391e196531cf42506c0d",
        "files": [
          "epan/dissectors/packet-bgp.c"
        ],
        "message": "BGP: Validate length of Path Attribute records.\n\nBug 13741 showed a case where the BGP dissector's failure to validate the\nlength of the Path Attribute record allowed a pathological BGP UPDATE packet to\ngenerate more than one million items in the protocol tree by repeatedly\ndissecting certain segments of the packet.\n\nIt's easy enough to detect when the Path Attribute length cannot be valid, so\nlet's do so.  When the condition arises, let's raise an Expert Info error in\nthe same style and format as used elsewhere in the same routine, and abandon\ndissection of the Path Attributes list.\n\nWith this check in place, an incorrect length computation is revealed at a\ncallsite.  This would only have prevented a small (less than 5 bytes) Path\nAttribute from being dissected if it was at the very end of the Path Attributes\nlist, but the bounds checking added in this change makes this problem much more\napparent, so we fix the length computation while we're here.\n\nTesting Done: Built wireshark on Linux amd64.  Using bgp.pcap from the Sample\n   Captures page on the wiki, verified that the dissection of the UPDATE\n   packets were unaltered by this fix.  Using the capture attached to bug 13741\n   (clusterfuzz-testcase-minimized-6689222578667520.pcap), verified that the\n   packet no longer triggers the \"too many items\" exception, instead we see\n   an Expert Info for each oversized Path Attribute length, and eventually an\n   exception for \"length of contained item exceeds length of containing item\".\n   30,000 iterations of fuzz test with bgp.pcap as input, and many iterations\n   of randpkt-test too.  Crafted a packet with a 3-byte ATOMIC_AGGREGATE Path\n   Attribute at the end of the Path Attributes list; Before this change, an\n   exception is raised during dissection, but after this change it is dissected\n   correctly.\n\nBug: 13741\nChange-Id: I80f506b114a61e5b060d93b59bed6b94fb188b3e\nReviewed-on: https://code.wireshark.org/review/27466\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 6e88943d0eabc8c8bc11334ba4213ec64129575c)\nReviewed-on: https://code.wireshark.org/review/28402\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c": [
          "File: epan/dissectors/packet-bgp.c -> epan/dissectors/packet-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6904:         attr_len_item = proto_tree_add_item(subtree2, hf_bgp_update_path_attribute_length, tvb, o + i + BGP_SIZE_OF_PATH_ATTRIBUTE,",
          "6905:                                             aoff - BGP_SIZE_OF_PATH_ATTRIBUTE, ENC_BIG_ENDIAN);",
          "6908:         switch (bgpa_type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6906:         if (aoff + tlen > path_attr_len - i) {",
          "6907:             proto_tree_add_expert_format(subtree2, pinfo, &ei_bgp_length_invalid, tvb, o + i + aoff, tlen,",
          "6908:                                          \"Path attribute length is invalid: %u byte%s\", tlen,",
          "6909:                                          plurality(tlen, \"\", \"s\"));",
          "6910:             return;",
          "6911:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7609:         ti =  proto_tree_add_item(tree, hf_bgp_update_path_attributes, tvb, o+2, len, ENC_NA);",
          "7610:         subtree = proto_item_add_subtree(ti, ett_bgp_attrs);",
          "7614:         o += 2 + len;",
          "",
          "[Removed Lines]",
          "7612:         dissect_bgp_path_attr(subtree, tvb, len-4, o+2, pinfo);",
          "",
          "[Added Lines]",
          "7618:         dissect_bgp_path_attr(subtree, tvb, len, o+2, pinfo);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c280333ba6027323de71ae655e8ea12563bdb69a",
      "candidate_info": {
        "commit_hash": "c280333ba6027323de71ae655e8ea12563bdb69a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c280333ba6027323de71ae655e8ea12563bdb69a",
        "files": [
          "epan/dissectors/packet-bgp.c"
        ],
        "message": "BGP: Validate length of Path Attribute records.\n\nBug 13741 showed a case where the BGP dissector's failure to validate the\nlength of the Path Attribute record allowed a pathological BGP UPDATE packet to\ngenerate more than one million items in the protocol tree by repeatedly\ndissecting certain segments of the packet.\n\nIt's easy enough to detect when the Path Attribute length cannot be valid, so\nlet's do so.  When the condition arises, let's raise an Expert Info error in\nthe same style and format as used elsewhere in the same routine, and abandon\ndissection of the Path Attributes list.\n\nWith this check in place, an incorrect length computation is revealed at a\ncallsite.  This would only have prevented a small (less than 5 bytes) Path\nAttribute from being dissected if it was at the very end of the Path Attributes\nlist, but the bounds checking added in this change makes this problem much more\napparent, so we fix the length computation while we're here.\n\nTesting Done: Built wireshark on Linux amd64.  Using bgp.pcap from the Sample\n   Captures page on the wiki, verified that the dissection of the UPDATE\n   packets were unaltered by this fix.  Using the capture attached to bug 13741\n   (clusterfuzz-testcase-minimized-6689222578667520.pcap), verified that the\n   packet no longer triggers the \"too many items\" exception, instead we see\n   an Expert Info for each oversized Path Attribute length, and eventually an\n   exception for \"length of contained item exceeds length of containing item\".\n   30,000 iterations of fuzz test with bgp.pcap as input, and many iterations\n   of randpkt-test too.  Crafted a packet with a 3-byte ATOMIC_AGGREGATE Path\n   Attribute at the end of the Path Attributes list; Before this change, an\n   exception is raised during dissection, but after this change it is dissected\n   correctly.\n\nBug: 13741\nChange-Id: I80f506b114a61e5b060d93b59bed6b94fb188b3e\nReviewed-on: https://code.wireshark.org/review/27466\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 6e88943d0eabc8c8bc11334ba4213ec64129575c)\nReviewed-on: https://code.wireshark.org/review/28401\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c": [
          "File: epan/dissectors/packet-bgp.c -> epan/dissectors/packet-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6918:         attr_len_item = proto_tree_add_item(subtree2, hf_bgp_update_path_attribute_length, tvb, o + i + BGP_SIZE_OF_PATH_ATTRIBUTE,",
          "6919:                                             aoff - BGP_SIZE_OF_PATH_ATTRIBUTE, ENC_BIG_ENDIAN);",
          "6922:         switch (bgpa_type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6920:         if (aoff + tlen > path_attr_len - i) {",
          "6921:             proto_tree_add_expert_format(subtree2, pinfo, &ei_bgp_length_invalid, tvb, o + i + aoff, tlen,",
          "6922:                                          \"Path attribute length is invalid: %u byte%s\", tlen,",
          "6923:                                          plurality(tlen, \"\", \"s\"));",
          "6924:             return;",
          "6925:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7706:         ti =  proto_tree_add_item(tree, hf_bgp_update_path_attributes, tvb, o+2, len, ENC_NA);",
          "7707:         subtree = proto_item_add_subtree(ti, ett_bgp_attrs);",
          "7711:         o += 2 + len;",
          "",
          "[Removed Lines]",
          "7709:         dissect_bgp_path_attr(subtree, tvb, len-4, o+2, pinfo);",
          "",
          "[Added Lines]",
          "7715:         dissect_bgp_path_attr(subtree, tvb, len, o+2, pinfo);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36af43dbb7673495948cd65d0346e8b9812b941c",
      "candidate_info": {
        "commit_hash": "36af43dbb7673495948cd65d0346e8b9812b941c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/36af43dbb7673495948cd65d0346e8b9812b941c",
        "files": [
          "epan/dissectors/packet-bgp.c"
        ],
        "message": "BGP: Validate length of Path Attribute records.\n\nBug 13741 showed a case where the BGP dissector's failure to validate the\nlength of the Path Attribute record allowed a pathological BGP UPDATE packet to\ngenerate more than one million items in the protocol tree by repeatedly\ndissecting certain segments of the packet.\n\nIt's easy enough to detect when the Path Attribute length cannot be valid, so\nlet's do so.  When the condition arises, let's raise an Expert Info error in\nthe same style and format as used elsewhere in the same routine, and abandon\ndissection of the Path Attributes list.\n\nWith this check in place, an incorrect length computation is revealed at a\ncallsite.  This would only have prevented a small (less than 5 bytes) Path\nAttribute from being dissected if it was at the very end of the Path Attributes\nlist, but the bounds checking added in this change makes this problem much more\napparent, so we fix the length computation while we're here.\n\nTesting Done: Built wireshark on Linux amd64.  Using bgp.pcap from the Sample\n   Captures page on the wiki, verified that the dissection of the UPDATE\n   packets were unaltered by this fix.  Using the capture attached to bug 13741\n   (clusterfuzz-testcase-minimized-6689222578667520.pcap), verified that the\n   packet no longer triggers the \"too many items\" exception, instead we see\n   an Expert Info for each oversized Path Attribute length, and eventually an\n   exception for \"length of contained item exceeds length of containing item\".\n   30,000 iterations of fuzz test with bgp.pcap as input, and many iterations\n   of randpkt-test too.  Crafted a packet with a 3-byte ATOMIC_AGGREGATE Path\n   Attribute at the end of the Path Attributes list; Before this change, an\n   exception is raised during dissection, but after this change it is dissected\n   correctly.\n\nBug: 13741\nChange-Id: I80f506b114a61e5b060d93b59bed6b94fb188b3e\nReviewed-on: https://code.wireshark.org/review/27466\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 6e88943d0eabc8c8bc11334ba4213ec64129575c)\nReviewed-on: https://code.wireshark.org/review/28403\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c": [
          "File: epan/dissectors/packet-bgp.c -> epan/dissectors/packet-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6194:         attr_len_item = proto_tree_add_item(subtree2, hf_bgp_update_path_attribute_length, tvb, o + i + BGP_SIZE_OF_PATH_ATTRIBUTE,",
          "6195:                                             aoff - BGP_SIZE_OF_PATH_ATTRIBUTE, ENC_BIG_ENDIAN);",
          "6198:         switch (bgpa_type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6196:         if (aoff + tlen > path_attr_len - i) {",
          "6197:             proto_tree_add_expert_format(subtree2, pinfo, &ei_bgp_length_invalid, tvb, o + i + aoff, tlen,",
          "6198:                                          \"Path attribute length is invalid: %u byte%s\", tlen,",
          "6199:                                          plurality(tlen, \"\", \"s\"));",
          "6200:             return;",
          "6201:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6869:         ti =  proto_tree_add_item(tree, hf_bgp_update_path_attributes, tvb, o+2, len, ENC_NA);",
          "6870:         subtree = proto_item_add_subtree(ti, ett_bgp_attrs);",
          "6874:         o += 2 + len;",
          "",
          "[Removed Lines]",
          "6872:         dissect_bgp_path_attr(subtree, tvb, len-4, o+2, pinfo);",
          "",
          "[Added Lines]",
          "6878:         dissect_bgp_path_attr(subtree, tvb, len, o+2, pinfo);",
          "",
          "---------------"
        ]
      }
    }
  ]
}