{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9d5bb41445d9f229f8633555fccf983e068de627",
      "candidate_info": {
        "commit_hash": "9d5bb41445d9f229f8633555fccf983e068de627",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9d5bb41445d9f229f8633555fccf983e068de627",
        "files": [
          "channels/cliprdr/cliprdr_common.c",
          "libfreerdp/core/test/TestSettings.c",
          "winpr/libwinpr/utils/collections/StreamPool.c"
        ],
        "message": "Removed unused variable warnings\n\n(cherry picked from commit 8052708f3354a686de98b62d641e9d0eb61a74db)",
        "before_after_code_files": [
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c",
          "libfreerdp/core/test/TestSettings.c||libfreerdp/core/test/TestSettings.c",
          "winpr/libwinpr/utils/collections/StreamPool.c||winpr/libwinpr/utils/collections/StreamPool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395: UINT cliprdr_read_format_list(wStream* s, CLIPRDR_FORMAT_LIST* formatList, BOOL useLongFormatNames)",
          "396: {",
          "397:  UINT32 index;",
          "399:  BOOL asciiNames;",
          "400:  int formatNameLength;",
          "401:  char* szFormatName;",
          "",
          "[Removed Lines]",
          "398:  size_t position;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libfreerdp/core/test/TestSettings.c||libfreerdp/core/test/TestSettings.c": [
          "File: libfreerdp/core/test/TestSettings.c -> libfreerdp/core/test/TestSettings.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:  {",
          "186:   const size_t key = pointer_list_indices[x];",
          "187:   const void* val = freerdp_settings_get_pointer(settings, key);",
          "188:  }",
          "190: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:   WINPR_UNUSED(val);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/collections/StreamPool.c||winpr/libwinpr/utils/collections/StreamPool.c": [
          "File: winpr/libwinpr/utils/collections/StreamPool.c -> winpr/libwinpr/utils/collections/StreamPool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:  pool->aArray[(pool->aSize)++] = s;",
          "233:  StreamPool_RemoveUsed(pool, s);",
          "236:  if (pool->synchronized)",
          "237:   LeaveCriticalSection(&pool->lock);",
          "238: }",
          "",
          "[Removed Lines]",
          "235: out_fail:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a11f129abb1115e622354a963c61bda1841de95",
      "candidate_info": {
        "commit_hash": "1a11f129abb1115e622354a963c61bda1841de95",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/1a11f129abb1115e622354a963c61bda1841de95",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Fixed unaligned access\n\n(cherry picked from commit cb2ed7f09ad68242bfdfad8967024b063f785d97)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:  {",
          "286:   ptrconv.bp = Stream_Pointer(s);",
          "289:   {",
          "290:    WLog_ERR(TAG, \"protocol error: clientAddress must be null terminated\");",
          "291:    return FALSE;",
          "",
          "[Removed Lines]",
          "288:   if (ptrconv.wp[cbClientAddress / 2 - 1])",
          "",
          "[Added Lines]",
          "288:   if ((cbClientAddress < sizeof(WCHAR)) || (ptrconv.bp[cbClientAddress - 1]) ||",
          "289:       (ptrconv.bp[cbClientAddress - 2]))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:  {",
          "335:   ptrconv.bp = Stream_Pointer(s);",
          "338:   {",
          "339:    WLog_ERR(TAG, \"protocol error: clientDir must be null terminated\");",
          "340:    return FALSE;",
          "",
          "[Removed Lines]",
          "337:   if (ptrconv.wp[cbClientDir / 2 - 1])",
          "",
          "[Added Lines]",
          "338:   if ((cbClientDir < sizeof(WCHAR)) || (ptrconv.bp[cbClientDir - 1]) ||",
          "339:       (ptrconv.bp[cbClientDir - 2]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5fc0ddeff5c81c592c467c2ecea2491309bd669c",
      "candidate_info": {
        "commit_hash": "5fc0ddeff5c81c592c467c2ecea2491309bd669c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5fc0ddeff5c81c592c467c2ecea2491309bd669c",
        "files": [
          "libfreerdp/core/rdp.c",
          "libfreerdp/core/rdp.h",
          "libfreerdp/core/security.c"
        ],
        "message": "Fixed #6156: Enforce synchronized encrypt count\n\nOld style RDP encryption uses a counter, synchronize this for\npackets send from different threads.\n\n(cherry picked from commit 873a9bef42017ff694659538f70909f679eb1eac)",
        "before_after_code_files": [
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c",
          "libfreerdp/core/rdp.h||libfreerdp/core/rdp.h",
          "libfreerdp/core/security.c||libfreerdp/core/security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1751:  if (!rdp)",
          "1752:   return NULL;",
          "1754:  rdp->context = context;",
          "1755:  rdp->instance = context->instance;",
          "1756:  flags = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1754:  InitializeCriticalSection(&rdp->critical);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1763:   context->settings = freerdp_settings_new(flags);",
          "1765:   if (!context->settings)",
          "1768:   newSettings = TRUE;",
          "1769:  }",
          "",
          "[Removed Lines]",
          "1766:    goto out_free;",
          "",
          "[Added Lines]",
          "1767:    goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1784:  rdp->transport = transport_new(context);",
          "1786:  if (!rdp->transport)",
          "1789:  rdp->license = license_new(rdp);",
          "1791:  if (!rdp->license)",
          "1794:  rdp->input = input_new(rdp);",
          "1796:  if (!rdp->input)",
          "1799:  rdp->update = update_new(rdp);",
          "1801:  if (!rdp->update)",
          "1804:  rdp->fastpath = fastpath_new(rdp);",
          "1806:  if (!rdp->fastpath)",
          "1809:  rdp->nego = nego_new(rdp->transport);",
          "1811:  if (!rdp->nego)",
          "1814:  rdp->mcs = mcs_new(rdp->transport);",
          "1816:  if (!rdp->mcs)",
          "1819:  rdp->redirection = redirection_new();",
          "1821:  if (!rdp->redirection)",
          "1824:  rdp->autodetect = autodetect_new();",
          "1826:  if (!rdp->autodetect)",
          "1829:  rdp->heartbeat = heartbeat_new();",
          "1831:  if (!rdp->heartbeat)",
          "1834:  rdp->multitransport = multitransport_new();",
          "1836:  if (!rdp->multitransport)",
          "1839:  rdp->bulk = bulk_new(context);",
          "1841:  if (!rdp->bulk)",
          "1844:  return rdp;",
          "1874:  return NULL;",
          "1875: }",
          "",
          "[Removed Lines]",
          "1787:   goto out_free_settings;",
          "1792:   goto out_free_transport;",
          "1797:   goto out_free_license;",
          "1802:   goto out_free_input;",
          "1807:   goto out_free_update;",
          "1812:   goto out_free_fastpath;",
          "1817:   goto out_free_nego;",
          "1822:   goto out_free_mcs;",
          "1827:   goto out_free_redirection;",
          "1832:   goto out_free_autodetect;",
          "1837:   goto out_free_heartbeat;",
          "1842:   goto out_free_multitransport;",
          "1845: out_free_multitransport:",
          "1846:  multitransport_free(rdp->multitransport);",
          "1847: out_free_heartbeat:",
          "1848:  heartbeat_free(rdp->heartbeat);",
          "1849: out_free_autodetect:",
          "1850:  autodetect_free(rdp->autodetect);",
          "1851: out_free_redirection:",
          "1852:  redirection_free(rdp->redirection);",
          "1853: out_free_mcs:",
          "1854:  mcs_free(rdp->mcs);",
          "1855: out_free_nego:",
          "1856:  nego_free(rdp->nego);",
          "1857: out_free_fastpath:",
          "1858:  fastpath_free(rdp->fastpath);",
          "1859: out_free_update:",
          "1860:  update_free(rdp->update);",
          "1861: out_free_input:",
          "1862:  input_free(rdp->input);",
          "1863: out_free_license:",
          "1864:  license_free(rdp->license);",
          "1865: out_free_transport:",
          "1866:  transport_free(rdp->transport);",
          "1867: out_free_settings:",
          "1869:  if (newSettings)",
          "1870:   freerdp_settings_free(rdp->settings);",
          "1872: out_free:",
          "1873:  free(rdp);",
          "",
          "[Added Lines]",
          "1788:   goto fail;",
          "1793:   goto fail;",
          "1798:   goto fail;",
          "1803:   goto fail;",
          "1808:   goto fail;",
          "1813:   goto fail;",
          "1818:   goto fail;",
          "1823:   goto fail;",
          "1828:   goto fail;",
          "1833:   goto fail;",
          "1838:   goto fail;",
          "1843:   goto fail;",
          "1847: fail:",
          "1848:  rdp_free(rdp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1950: {",
          "1951:  if (rdp)",
          "1952:  {",
          "1953:   winpr_RC4_Free(rdp->rc4_decrypt_key);",
          "1954:   winpr_RC4_Free(rdp->rc4_encrypt_key);",
          "1955:   winpr_Cipher_Free(rdp->fips_encrypt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1928:   DeleteCriticalSection(&rdp->critical);",
          "",
          "---------------"
        ],
        "libfreerdp/core/rdp.h||libfreerdp/core/rdp.h": [
          "File: libfreerdp/core/rdp.h -> libfreerdp/core/rdp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:  UINT64 inPackets;",
          "180:  UINT64 outBytes;",
          "181:  UINT64 outPackets;",
          "182: };",
          "184: FREERDP_LOCAL BOOL rdp_read_security_header(wStream* s, UINT16* flags, UINT16* length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:  CRITICAL_SECTION critical;",
          "",
          "---------------"
        ],
        "libfreerdp/core/security.c||libfreerdp/core/security.c": [
          "File: libfreerdp/core/security.c -> libfreerdp/core/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "713: BOOL security_encrypt(BYTE* data, size_t length, rdpRdp* rdp)",
          "714: {",
          "715:  if (rdp->encrypt_use_count >= 4096)",
          "716:  {",
          "717:   if (!security_key_update(rdp->encrypt_key, rdp->encrypt_update_key, rdp->rc4_key_len, rdp))",
          "720:   winpr_RC4_Free(rdp->rc4_encrypt_key);",
          "721:   rdp->rc4_encrypt_key = winpr_RC4_New(rdp->encrypt_key, rdp->rc4_key_len);",
          "723:   if (!rdp->rc4_encrypt_key)",
          "726:   rdp->encrypt_use_count = 0;",
          "727:  }",
          "729:  if (!winpr_RC4_Update(rdp->rc4_encrypt_key, length, data, data))",
          "732:  rdp->encrypt_use_count++;",
          "733:  rdp->encrypt_checksum_use_count++;",
          "735: }",
          "737: BOOL security_decrypt(BYTE* data, size_t length, rdpRdp* rdp)",
          "",
          "[Removed Lines]",
          "718:    return FALSE;",
          "724:    return FALSE;",
          "730:   return FALSE;",
          "734:  return TRUE;",
          "",
          "[Added Lines]",
          "715:  BOOL rc = FALSE;",
          "716:  EnterCriticalSection(&rdp->critical);",
          "720:    goto fail;",
          "726:    goto fail;",
          "732:   goto fail;",
          "736:  rc = TRUE;",
          "737: fail:",
          "738:  LeaveCriticalSection(&rdp->critical);",
          "739:  return rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "794: BOOL security_fips_encrypt(BYTE* data, size_t length, rdpRdp* rdp)",
          "795: {",
          "796:  size_t olen;",
          "798:  if (!winpr_Cipher_Update(rdp->fips_encrypt, data, length, data, &olen))",
          "801:  rdp->encrypt_use_count++;",
          "803: }",
          "805: BOOL security_fips_decrypt(BYTE* data, size_t length, rdpRdp* rdp)",
          "",
          "[Removed Lines]",
          "799:   return FALSE;",
          "802:  return TRUE;",
          "",
          "[Added Lines]",
          "801:  BOOL rc = FALSE;",
          "804:  EnterCriticalSection(&rdp->critical);",
          "806:   goto fail;",
          "809:  rc = TRUE;",
          "810: fail:",
          "811:  LeaveCriticalSection(&rdp->critical);",
          "812:  return rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79cea7b5b67520bfac784c766cb70b953766b04a",
      "candidate_info": {
        "commit_hash": "79cea7b5b67520bfac784c766cb70b953766b04a",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/79cea7b5b67520bfac784c766cb70b953766b04a",
        "files": [
          "channels/printer/client/cups/printer_cups.c"
        ],
        "message": "Fixed #6157: Reset cups instance on disconnect.\n\n(cherry picked from commit 13906f3ec629af4b2b2aeb5b92845f99b7bf7747)",
        "before_after_code_files": [
          "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c": [
          "File: channels/printer/client/cups/printer_cups.c -> channels/printer/client/cups/printer_cups.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "364: }",
          "369: static void printer_cups_release_ref_driver(rdpPrinterDriver* driver)",
          "370: {",
          "371:  rdpCupsPrinterDriver* cups_driver = (rdpCupsPrinterDriver*)driver;",
          "372:  if (cups_driver->references <= 1)",
          "373:  {",
          "374:   free(cups_driver);",
          "375:   cups_driver = NULL;",
          "376:  }",
          "",
          "[Removed Lines]",
          "367: static rdpCupsPrinterDriver* cups_driver = NULL;",
          "",
          "[Added Lines]",
          "367: static rdpCupsPrinterDriver* uniq_cups_driver = NULL;",
          "374:   if (uniq_cups_driver == cups_driver)",
          "375:    uniq_cups_driver = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384: FREERDP_API rdpPrinterDriver* freerdp_printer_client_subsystem_entry(void)",
          "385: #endif",
          "386: {",
          "388:  {",
          "392:    return NULL;",
          "403:  }",
          "406: }",
          "",
          "[Removed Lines]",
          "387:  if (!cups_driver)",
          "389:   cups_driver = (rdpCupsPrinterDriver*)calloc(1, sizeof(rdpCupsPrinterDriver));",
          "391:   if (!cups_driver)",
          "394:   cups_driver->driver.EnumPrinters = printer_cups_enum_printers;",
          "395:   cups_driver->driver.ReleaseEnumPrinters = printer_cups_release_enum_printers;",
          "396:   cups_driver->driver.GetPrinter = printer_cups_get_printer;",
          "398:   cups_driver->driver.AddRef = printer_cups_add_ref_driver;",
          "399:   cups_driver->driver.ReleaseRef = printer_cups_release_ref_driver;",
          "401:   cups_driver->id_sequence = 1;",
          "402:   cups_driver->driver.AddRef(&cups_driver->driver);",
          "405:  return &cups_driver->driver;",
          "",
          "[Added Lines]",
          "389:  if (!uniq_cups_driver)",
          "391:   uniq_cups_driver = (rdpCupsPrinterDriver*)calloc(1, sizeof(rdpCupsPrinterDriver));",
          "393:   if (!uniq_cups_driver)",
          "396:   uniq_cups_driver->driver.EnumPrinters = printer_cups_enum_printers;",
          "397:   uniq_cups_driver->driver.ReleaseEnumPrinters = printer_cups_release_enum_printers;",
          "398:   uniq_cups_driver->driver.GetPrinter = printer_cups_get_printer;",
          "400:   uniq_cups_driver->driver.AddRef = printer_cups_add_ref_driver;",
          "401:   uniq_cups_driver->driver.ReleaseRef = printer_cups_release_ref_driver;",
          "403:   uniq_cups_driver->id_sequence = 1;",
          "404:   uniq_cups_driver->driver.AddRef(&uniq_cups_driver->driver);",
          "407:  return &uniq_cups_driver->driver;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e348b9a18eb5dfabf431ab8fdc7f9cbb59ec967",
      "candidate_info": {
        "commit_hash": "6e348b9a18eb5dfabf431ab8fdc7f9cbb59ec967",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6e348b9a18eb5dfabf431ab8fdc7f9cbb59ec967",
        "files": [
          "winpr/libwinpr/utils/sam.c"
        ],
        "message": "Fixed invalid argument to strtok_s\n\n(cherry picked from commit dc4ac3ba17b6a340b96aa3f6363c6fac866696b7)",
        "before_after_code_files": [
          "winpr/libwinpr/utils/sam.c||winpr/libwinpr/utils/sam.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/sam.c||winpr/libwinpr/utils/sam.c": [
          "File: winpr/libwinpr/utils/sam.c -> winpr/libwinpr/utils/sam.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   }",
          "312:   SamResetEntry(entry);",
          "314:  }",
          "316: out_fail:",
          "",
          "[Removed Lines]",
          "313:   sam->line = strtok_s(NULL, \"\\n\", sam->context);",
          "",
          "[Added Lines]",
          "313:   sam->line = strtok_s(NULL, \"\\n\", &sam->context);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:   }",
          "427:   SamResetEntry(entry);",
          "429:  }",
          "431: out_fail:",
          "",
          "[Removed Lines]",
          "428:   sam->line = strtok_s(NULL, \"\\n\", sam->context);",
          "",
          "[Added Lines]",
          "428:   sam->line = strtok_s(NULL, \"\\n\", &sam->context);",
          "",
          "---------------"
        ]
      }
    }
  ]
}