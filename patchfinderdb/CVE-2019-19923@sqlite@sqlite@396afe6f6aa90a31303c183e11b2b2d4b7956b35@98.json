{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0f55a571fcd028d57fcde0d25150aa3a933b2d8d",
      "candidate_info": {
        "commit_hash": "0f55a571fcd028d57fcde0d25150aa3a933b2d8d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f55a571fcd028d57fcde0d25150aa3a933b2d8d",
        "files": [
          "ext/fts5/fts5_index.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid an \"unitialized value read\" problem in fts5 that can occur with a corrupt database.\n\nFossilOrigin-Name: 6cae81cd1ffb0180e0260d5ba921502c7dee2f54637bff3558a4d1cb5dfd3f32",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "690:         pRet = 0;",
          "691:       }else{",
          "694:         pRet->p[nByte] = 0x00;",
          "695:       }",
          "696:     }",
          "697:     p->rc = rc;",
          "",
          "[Removed Lines]",
          "693:         pRet->szLeaf = fts5GetU16(&pRet->p[2]);",
          "",
          "[Added Lines]",
          "694:         pRet->szLeaf = fts5GetU16(&pRet->p[2]);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bad745d373f4686a2726c3f77a2ccad60e7181645d7ed483a2e43075a4ef30c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc15f4c52830c9152e4fdaebb4cfb8487bc86977",
      "candidate_info": {
        "commit_hash": "fc15f4c52830c9152e4fdaebb4cfb8487bc86977",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fc15f4c52830c9152e4fdaebb4cfb8487bc86977",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/treeview.c",
          "src/window.c"
        ],
        "message": "Improved TreeView display of Window objects. Change the Window.eType field to Window.eFrmType to avoid confusion with other \"eType\" values.\n\nFossilOrigin-Name: ec2f207dedb223077bbd3e4584499250eb12219712c917e930acccfa2c46e23b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/treeview.c||src/treeview.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85e53ff13300132250221de769a2aa7d92d81bb48d60f6e99000bc69a5b1e6fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3555: struct Window {",
          "",
          "[Removed Lines]",
          "3564:   u8 eExclude;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311: void sqlite3TreeViewWindow(TreeView *pView, const Window *pWin, u8 more){",
          "312:   pView = sqlite3TreeViewPush(pView, more);",
          "313:   if( pWin->zName ){",
          "314:     sqlite3TreeViewLine(pView, \"OVER %s\", pWin->zName);",
          "315:   }else{",
          "316:     sqlite3TreeViewLine(pView, \"OVER\");",
          "317:   }",
          "318:   if( pWin->pPartition ){",
          "320:   }",
          "321:   if( pWin->pOrderBy ){",
          "323:   }",
          "326:     sqlite3TreeViewBound(pView, pWin->eStart, pWin->pStart, 1);",
          "327:     sqlite3TreeViewBound(pView, pWin->eEnd, pWin->pEnd, 0);",
          "328:     sqlite3TreeViewPop(pView);",
          "329:   }",
          "330:   sqlite3TreeViewPop(pView);",
          "331: }",
          "",
          "[Removed Lines]",
          "319:     sqlite3TreeViewExprList(pView, pWin->pPartition, 1, \"PARTITION-BY\");",
          "322:     sqlite3TreeViewExprList(pView, pWin->pOrderBy, 1, \"ORDER-BY\");",
          "324:   if( pWin->eType ){",
          "325:     sqlite3TreeViewItem(pView, pWin->eType==TK_RANGE ? \"RANGE\" : \"ROWS\", 0);",
          "",
          "[Added Lines]",
          "312:   int nElement = 0;",
          "319:   if( pWin->pFilter )  nElement++;",
          "320:   if( pWin->zBase )    nElement++;",
          "321:   if( pWin->pOrderBy ) nElement++;",
          "322:   if( pWin->eFrmType ) nElement++;",
          "323:   if( pWin->eExclude ) nElement++;",
          "324:   if( pWin->pFilter ){",
          "325:     sqlite3TreeViewItem(pView, \"FILTER\", (--nElement)>0);",
          "326:     sqlite3TreeViewExpr(pView, pWin->pFilter, 0);",
          "327:     sqlite3TreeViewPop(pView);",
          "328:   }",
          "329:   if( pWin->zBase ){",
          "330:     sqlite3TreeViewPush(pView, (--nElement)>0);",
          "331:     sqlite3TreeViewLine(pView, \"window: %s\", pWin->zBase);",
          "332:     sqlite3TreeViewPop(pView);",
          "333:   }",
          "335:     sqlite3TreeViewExprList(pView, pWin->pPartition, nElement>0,\"PARTITION-BY\");",
          "338:     sqlite3TreeViewExprList(pView, pWin->pOrderBy, (--nElement)>0, \"ORDER-BY\");",
          "340:   if( pWin->eFrmType ){",
          "341:     const char *zFrmType = \"ROWS\";",
          "342:     if( pWin->eFrmType==TK_RANGE ) zFrmType = \"RANGE\";",
          "343:     if( pWin->eFrmType==TK_GROUPS ) zFrmType = \"GROUPS\";",
          "344:     sqlite3TreeViewItem(pView, zFrmType, (--nElement)>0);",
          "349:   if( pWin->eExclude ){",
          "350:     char zBuf[30];",
          "351:     const char *zExclude;",
          "352:     switch( pWin->eExclude ){",
          "353:       case TK_NO:      zExclude = \"NO OTHERS\";   break;",
          "354:       case TK_CURRENT: zExclude = \"CURRENT ROW\"; break;",
          "355:       case TK_GROUP:   zExclude = \"GROUP\";       break;",
          "356:       case TK_TIES:    zExclude = \"TIES\";        break;",
          "357:       default:",
          "358:         sqlite3_snprintf(sizeof(zBuf),zBuf,\"invalid(%d)\", pWin->eExclude);",
          "359:         zExclude = zBuf;",
          "360:         break;",
          "361:     }",
          "362:     sqlite3TreeViewPush(pView, 0);",
          "363:     sqlite3TreeViewLine(pView, \"EXCLUDE %s\", zExclude);",
          "364:     sqlite3TreeViewPop(pView);",
          "365:   }",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664: ){",
          "666:     Window *p = windowFind(pParse, pList, pWin->zName);",
          "667:     if( p==0 ) return;",
          "668:     pWin->pPartition = sqlite3ExprListDup(pParse->db, p->pPartition, 0);",
          "",
          "[Removed Lines]",
          "665:   if( pWin->zName && pWin->eType==0 ){",
          "",
          "[Added Lines]",
          "665:   if( pWin->zName && pWin->eFrmType==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "671:     pWin->pEnd = sqlite3ExprDup(pParse->db, p->pEnd, 0);",
          "672:     pWin->eStart = p->eStart;",
          "673:     pWin->eEnd = p->eEnd;",
          "675:     pWin->eExclude = p->eExclude;",
          "676:   }else{",
          "677:     sqlite3WindowChain(pParse, pWin, pList);",
          "678:   }",
          "680:    && (pWin->pStart || pWin->pEnd)",
          "681:    && (pWin->pOrderBy==0 || pWin->pOrderBy->nExpr!=1)",
          "682:   ){",
          "",
          "[Removed Lines]",
          "674:     pWin->eType = p->eType;",
          "679:   if( (pWin->eType==TK_RANGE)",
          "",
          "[Added Lines]",
          "674:     pWin->eFrmType = p->eFrmType;",
          "679:   if( (pWin->eFrmType==TK_RANGE)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "693:     }else{",
          "694:       struct WindowUpdate {",
          "695:         const char *zFunc;",
          "697:         int eStart;",
          "698:         int eEnd;",
          "699:       } aUp[] = {",
          "",
          "[Removed Lines]",
          "696:         int eType;",
          "",
          "[Added Lines]",
          "696:         int eFrmType;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "712:           sqlite3ExprDelete(db, pWin->pStart);",
          "713:           sqlite3ExprDelete(db, pWin->pEnd);",
          "714:           pWin->pEnd = pWin->pStart = 0;",
          "716:           pWin->eStart = aUp[i].eStart;",
          "717:           pWin->eEnd = aUp[i].eEnd;",
          "718:           pWin->eExclude = 0;",
          "",
          "[Removed Lines]",
          "715:           pWin->eType = aUp[i].eType;",
          "",
          "[Added Lines]",
          "715:           pWin->eFrmType = aUp[i].eFrmType;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1090:   pWin = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1091:   if( pWin==0 ) goto windowAllocErr;",
          "1093:   pWin->eStart = eStart;",
          "1094:   pWin->eEnd = eEnd;",
          "1095:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_QueryFlattener) ){",
          "",
          "[Removed Lines]",
          "1092:   pWin->eType = eType;",
          "",
          "[Added Lines]",
          "1092:   pWin->eFrmType = eType;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1200: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2){",
          "1202:   if( p1->eStart!=p2->eStart ) return 1;",
          "1203:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "1204:   if( p1->eExclude!=p2->eExclude ) return 1;",
          "",
          "[Removed Lines]",
          "1201:   if( p1->eType!=p2->eType ) return 1;",
          "",
          "[Added Lines]",
          "1201:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1861:   int addrIf = 0;",
          "1862:   int addrContinue = 0;",
          "1863:   int addrGoto = 0;",
          "1866:   int lblDone = sqlite3VdbeMakeLabel(pParse);",
          "1867:   int addrNextRange = 0;",
          "",
          "[Removed Lines]",
          "1864:   int bPeer = (pMWin->eType!=TK_ROWS);",
          "",
          "[Added Lines]",
          "1864:   int bPeer = (pMWin->eFrmType!=TK_ROWS);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1874:   }",
          "1876:   if( regCountdown>0 ){",
          "1878:       addrNextRange = sqlite3VdbeCurrentAddr(v);",
          "1879:       assert( op==WINDOW_AGGINVERSE || op==WINDOW_AGGSTEP );",
          "1880:       if( op==WINDOW_AGGINVERSE ){",
          "",
          "[Removed Lines]",
          "1877:     if( pMWin->eType==TK_RANGE ){",
          "",
          "[Added Lines]",
          "1877:     if( pMWin->eFrmType==TK_RANGE ){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1983:       pNew->pFunc = p->pFunc;",
          "1984:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "1985:       pNew->pOrderBy = sqlite3ExprListDup(db, p->pOrderBy, 0);",
          "1987:       pNew->eEnd = p->eEnd;",
          "1988:       pNew->eStart = p->eStart;",
          "1989:       pNew->eExclude = p->eExclude;",
          "",
          "[Removed Lines]",
          "1986:       pNew->eType = p->eType;",
          "",
          "[Added Lines]",
          "1986:       pNew->eFrmType = p->eFrmType;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2428:   switch( pMWin->eStart ){",
          "2429:     case TK_FOLLOWING:",
          "2431:         s.eDelete = WINDOW_RETURN_ROW;",
          "2432:       }",
          "2433:       break;",
          "2434:     case TK_UNBOUNDED:",
          "2435:       if( windowCacheFrame(pMWin)==0 ){",
          "2436:         if( pMWin->eEnd==TK_PRECEDING ){",
          "2438:             s.eDelete = WINDOW_AGGSTEP;",
          "2439:           }",
          "2440:         }else{",
          "",
          "[Removed Lines]",
          "2430:       if( pMWin->eType!=TK_RANGE && windowExprGtZero(pParse, pMWin->pStart) ){",
          "2437:           if( pMWin->eType!=TK_RANGE && windowExprGtZero(pParse, pMWin->pEnd) ){",
          "",
          "[Added Lines]",
          "2430:       if( pMWin->eFrmType!=TK_RANGE",
          "2431:        && windowExprGtZero(pParse, pMWin->pStart)",
          "2432:       ){",
          "2439:           if( pMWin->eFrmType!=TK_RANGE",
          "2440:            && windowExprGtZero(pParse, pMWin->pEnd)",
          "2441:           ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2472:     int nPeer = (pOrderBy ? pOrderBy->nExpr : 0);",
          "2473:     regNewPeer = regNew + pMWin->nBufferCol;",
          "2474:     if( pMWin->pPartition ) regNewPeer += pMWin->pPartition->nExpr;",
          "",
          "[Removed Lines]",
          "2471:   if( pMWin->eType!=TK_ROWS ){",
          "",
          "[Added Lines]",
          "2475:   if( pMWin->eFrmType!=TK_ROWS ){",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2520:   if( regStart ){",
          "2521:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2523:   }",
          "2524:   if( regEnd ){",
          "2525:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2527:   }",
          "2529:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "",
          "[Removed Lines]",
          "2522:     windowCheckValue(pParse, regStart, 0 + (pMWin->eType==TK_RANGE ? 3 : 0));",
          "2526:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eType==TK_RANGE ? 3 : 0));",
          "",
          "[Added Lines]",
          "2526:     windowCheckValue(pParse, regStart, 0 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2530:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2538:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2539:     sqlite3VdbeJumpHere(v, addrGe);",
          "2540:   }",
          "2542:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "2543:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "2544:   }",
          "",
          "[Removed Lines]",
          "2541:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eType!=TK_RANGE && regEnd ){",
          "",
          "[Added Lines]",
          "2545:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && regEnd ){",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2567:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2568:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2569:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "2571:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "2572:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "2573:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "",
          "[Removed Lines]",
          "2570:       if( pMWin->eType==TK_RANGE ){",
          "",
          "[Added Lines]",
          "2574:       if( pMWin->eFrmType==TK_RANGE ){",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2589:     int addr = 0;",
          "2590:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2591:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "2593:         int lbl = 0;",
          "2594:         addr = sqlite3VdbeCurrentAddr(v);",
          "2595:         if( regEnd ){",
          "",
          "[Removed Lines]",
          "2592:       if( pMWin->eType==TK_RANGE ){",
          "",
          "[Added Lines]",
          "2596:       if( pMWin->eFrmType==TK_RANGE ){",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2635:     int addrBreak2;",
          "2636:     int addrBreak3;",
          "2637:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2639:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2640:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2641:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "",
          "[Removed Lines]",
          "2638:     if( pMWin->eType==TK_RANGE ){",
          "",
          "[Added Lines]",
          "2642:     if( pMWin->eFrmType==TK_RANGE ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56b99ebc3245ce03f4242849284656c9d32aba05",
      "candidate_info": {
        "commit_hash": "56b99ebc3245ce03f4242849284656c9d32aba05",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56b99ebc3245ce03f4242849284656c9d32aba05",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptL.test"
        ],
        "message": "Add test case for the previous commit.\n\nFossilOrigin-Name: 197edb235b785c68fda7be788efbc61137d9452886599415a927b959ade93c65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f21c6f1343edc4ba68f9f8e68caac34da0d1c651526ecaf61c0e2d66593a555e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:   INSERT INTO t1(b) VALUES(zeroblob(40000));",
          "579: } {1 {database disk image is malformed}}",
          "583: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581: #-------------------------------------------------------------------------",
          "582: reset_db",
          "583: do_test 6.0 {",
          "584:   sqlite3 db {}",
          "585:   db deserialize [decode_hexdb {",
          "586: | size 20480 pagesize 4096 filename crash-d260f001fa015c.db",
          "587: | page 1 offset 0",
          "588: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "589: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 05   .....@  ........",
          "590: |     32: 00 00 00 00 00 ff ff f0 00 00 00 02 00 00 00 04   ................",
          "591: |     48: 00 00 00 00 00 00 00 64 00 00 00 01 00 00 00 00   .......d........",
          "592: |     96: 00 00 00 00 0d 0f f8 00 04 0e ce 00 0f 4c 0f d3   .............L..",
          "593: |    112: 0e fa 0e ce 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "594: |   3776: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2a 04   ..............*.",
          "595: |   3792: 06 17 13 11 01 3f 69 6e 64 65 78 74 31 62 74 31   .....?indext1bt1",
          "596: |   3808: 05 43 52 45 41 54 45 20 49 4e 44 45 58 20 74 31   .CREATE INDEX t1",
          "597: |   3824: 62 20 4f 4e 20 74 31 28 62 29 50 03 06 17 2b 2b   b ON t1(b)P...++",
          "598: |   3840: 01 59 74 61 62 6c 65 73 71 6c 69 74 65 5f 73 65   .Ytablesqlite_se",
          "599: |   3856: 71 75 65 6e 63 65 73 71 6c 69 74 65 5f 73 65 71   quencesqlite_seq",
          "600: |   3872: 75 65 6e 63 65 04 43 52 45 41 54 45 20 54 41 42   uence.CREATE TAB",
          "601: |   3888: 4c 45 20 73 71 6c 69 74 65 5f 73 65 71 75 65 6e   LE sqlite_sequen",
          "602: |   3904: 63 65 28 6e 61 6d 65 2c 73 65 71 29 81 04 01 07   ce(name,seq)....",
          "603: |   3920: 17 11 11 01 81 73 74 61 c2 6c 65 74 31 74 31 02   .....sta.let1t1.",
          "604: |   3936: 43 52 45 41 54 45 20 54 41 42 4c 45 20 74 31 28   CREATE TABLE t1(",
          "605: |   3952: 61 20 52 45 41 4c 20 4e 4f 54 20 4e 55 4c 4c 20   a REAL NOT NULL",
          "606: |   3968: 44 45 46 41 55 4c 54 28 32 35 2b 33 32 29 2c 62   DEFAULT(25+32),b",
          "607: |   3984: 20 46 4c 4f 41 54 2c 63 20 44 4f 55 42 4c 45 20    FLOAT,c DOUBLE",
          "608: |   4000: 55 4e 49 51 55 45 2c 0a 64 20 43 4c 4f 42 2c 65   UNIQUE,.d CLOB,e",
          "609: |   4016: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "610: |   4032: 20 4b 45 59 20 41 55 54 4f 49 4e 43 52 45 4d 45    KEY AUTOINCREME",
          "611: |   4048: 4e 54 29 23 02 06 17 37 11 01 00 69 6e 64 65 78   NT)#...7...index",
          "612: |   4064: 73 71 6c 69 74 65 5f 61 75 74 6f 69 6e 64 65 78   sqlite_autoindex",
          "613: |   4080: 5f 74 31 5f 31 74 31 05 00 00 00 08 00 00 00 00   _t1_1t1.........",
          "614: | page 2 offset 4096",
          "615: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "616: | page 3 offset 8192",
          "617: |      0: 0a 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "618: | page 4 offset 12288",
          "619: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "620: | page 5 offset 16384",
          "621: |      0: 0a 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "622: | end crash-d260f001fa015c.db",
          "623: }]} {}",
          "625: do_catchsql_test 6.1 {",
          "626:   BEGIN;",
          "627:     INSERT INTO t1(b) VALUES(1);",
          "628:     INSERT INTO t1(b) VALUES(2);",
          "629:   COMMIT;",
          "630: } {1 {malformed database schema (t1b) - invalid root page}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6ad201ac2a17178799e7b530ee4f81876cc3808",
      "candidate_info": {
        "commit_hash": "f6ad201ac2a17178799e7b530ee4f81876cc3808",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f6ad201ac2a17178799e7b530ee4f81876cc3808",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c",
          "ext/rbu/sqlite3rbu.c",
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/hash.c",
          "src/hash.h",
          "src/vdbeaux.c",
          "src/wal.c"
        ],
        "message": "Fixes for harmless compiler warnings.\n\nFossilOrigin-Name: c28c973ad6debd63f13e5d4d3da036f680baaec9d863eda039f2747db9f1cfd5",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/hash.c||src/hash.c",
          "src/hash.h||src/hash.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1000:   return SQLITE_ERROR;",
          "1001: }",
          "1006:   switch( cArg ){",
          "1007:     case FTS3_MATCHINFO_NDOC:",
          "",
          "[Removed Lines]",
          "1003: static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){",
          "",
          "[Added Lines]",
          "1003: static size_t fts3MatchinfoSize(MatchInfo *pInfo, char cArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1286:       case FTS3_MATCHINFO_LHITS_BM:",
          "1287:       case FTS3_MATCHINFO_LHITS: {",
          "1289:         memset(pInfo->aMatchinfo, 0, nZero);",
          "1290:         rc = fts3ExprLHitGather(pCsr->pExpr, pInfo);",
          "1291:         break;",
          "",
          "[Removed Lines]",
          "1288:         int nZero = fts3MatchinfoSize(pInfo, zArg[i]) * sizeof(u32);",
          "",
          "[Added Lines]",
          "1288:         size_t nZero = fts3MatchinfoSize(pInfo, zArg[i]) * sizeof(u32);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3691:     if( aDlidx==0 ){",
          "3692:       p->rc = SQLITE_NOMEM;",
          "3693:     }else{",
          "3695:       memset(&aDlidx[pWriter->nDlidx], 0, nByte);",
          "3696:       pWriter->aDlidx = aDlidx;",
          "3697:       pWriter->nDlidx = nLvl;",
          "",
          "[Removed Lines]",
          "3694:       int nByte = sizeof(Fts5DlidxWriter) * (nLvl - pWriter->nDlidx);",
          "",
          "[Added Lines]",
          "3694:       size_t nByte = sizeof(Fts5DlidxWriter) * (nLvl - pWriter->nDlidx);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2468:   int rc = sqlite3_overload_function(pGlobal->db, zName, -1);",
          "2469:   if( rc==SQLITE_OK ){",
          "2470:     Fts5Auxiliary *pAux;",
          "2475:     nByte = sizeof(Fts5Auxiliary) + nName;",
          "2477:     if( pAux ){",
          "2479:       pAux->zFunc = (char*)&pAux[1];",
          "2480:       memcpy(pAux->zFunc, zName, nName);",
          "2481:       pAux->pGlobal = pGlobal;",
          "",
          "[Removed Lines]",
          "2474:     nName = (int)strlen(zName) + 1;",
          "2476:     pAux = (Fts5Auxiliary*)sqlite3_malloc(nByte);",
          "2478:       memset(pAux, 0, nByte);",
          "",
          "[Added Lines]",
          "2474:     nName = strlen(zName) + 1;",
          "2476:     pAux = (Fts5Auxiliary*)sqlite3_malloc64(nByte);",
          "2478:       memset(pAux, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2505: ){",
          "2506:   Fts5Global *pGlobal = (Fts5Global*)pApi;",
          "2507:   Fts5TokenizerModule *pNew;",
          "2510:   int rc = SQLITE_OK;",
          "2513:   nByte = sizeof(Fts5TokenizerModule) + nName;",
          "2515:   if( pNew ){",
          "2517:     pNew->zName = (char*)&pNew[1];",
          "2518:     memcpy(pNew->zName, zName, nName);",
          "2519:     pNew->pUserData = pUserData;",
          "",
          "[Removed Lines]",
          "2512:   nName = (int)strlen(zName) + 1;",
          "2514:   pNew = (Fts5TokenizerModule*)sqlite3_malloc(nByte);",
          "2516:     memset(pNew, 0, nByte);",
          "",
          "[Added Lines]",
          "2512:   nName = strlen(zName) + 1;",
          "2514:   pNew = (Fts5TokenizerModule*)sqlite3_malloc64(nByte);",
          "2516:     memset(pNew, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:   void *pRet = 0;",
          "1045:   if( p->rc==SQLITE_OK ){",
          "1046:     assert( nByte>0 );",
          "",
          "[Removed Lines]",
          "1043: static void *rbuMalloc(sqlite3rbu *p, int nByte){",
          "",
          "[Added Lines]",
          "1043: static void *rbuMalloc(sqlite3rbu *p, sqlite3_int64 nByte){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1063: static void rbuAllocateIterArrays(sqlite3rbu *p, RbuObjIter *pIter, int nCol){",
          "1065:   char **azNew;",
          "1067:   azNew = (char**)rbuMalloc(p, nByte);",
          "",
          "[Removed Lines]",
          "1064:   int nByte = (2*sizeof(char*) + sizeof(int) + 3*sizeof(u8)) * nCol;",
          "",
          "[Added Lines]",
          "1064:   sqlite3_int64 nByte = (2*sizeof(char*) + sizeof(int) + 3*sizeof(u8)) * nCol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1706: static char *rbuObjIterGetBindlist(sqlite3rbu *p, int nBind){",
          "1707:   char *zRet = 0;",
          "1710:   zRet = (char*)rbuMalloc(p, nByte);",
          "1711:   if( zRet ){",
          "",
          "[Removed Lines]",
          "1708:   int nByte = nBind*2 + 1;",
          "",
          "[Added Lines]",
          "1708:   sqlite3_int64 nByte = 2*(sqlite3_int64)nBind + 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4561:   assert( p->openFlags & (SQLITE_OPEN_MAIN_DB|SQLITE_OPEN_TEMP_DB) );",
          "4562:   if( eStage==RBU_STAGE_OAL || eStage==RBU_STAGE_MOVE ){",
          "4563:     if( iRegion<=p->nShm ){",
          "4565:       char **apNew = (char**)sqlite3_realloc64(p->apShm, nByte);",
          "4566:       if( apNew==0 ){",
          "4567:         rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "4564:       int nByte = (iRegion+1) * sizeof(char*);",
          "",
          "[Added Lines]",
          "4564:       sqlite3_int64 nByte = (iRegion+1) * sizeof(char*);",
          "",
          "---------------"
        ],
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "902:   if( pTab->nChange==0 || pTab->nEntry>=(pTab->nChange/2) ){",
          "903:     int i;",
          "904:     SessionChange **apNew;",
          "907:     apNew = (SessionChange **)sqlite3_malloc64(sizeof(SessionChange *) * nNew);",
          "908:     if( apNew==0 ){",
          "",
          "[Removed Lines]",
          "905:     int nNew = (pTab->nChange ? pTab->nChange : 128) * 2;",
          "",
          "[Added Lines]",
          "905:     sqlite3_int64 nNew = 2*(sqlite3_int64)(pTab->nChange ? pTab->nChange : 128);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:   if( *pRc==SQLITE_OK && p->nAlloc-p->nBuf<nByte ){",
          "1834:     u8 *aNew;",
          "1835:     i64 nNew = p->nAlloc ? p->nAlloc : 128;",
          "",
          "[Removed Lines]",
          "1832: static int sessionBufferGrow(SessionBuffer *p, int nByte, int *pRc){",
          "",
          "[Added Lines]",
          "1832: static int sessionBufferGrow(SessionBuffer *p, size_t nByte, int *pRc){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2947:   }",
          "2949:   if( rc==SQLITE_OK ){",
          "2951:     memset(p->tblhdr.aBuf, 0, iPK);",
          "2952:     memcpy(&p->tblhdr.aBuf[iPK], &p->in.aData[p->in.iNext], nCopy);",
          "2953:     p->in.iNext += nCopy;",
          "",
          "[Removed Lines]",
          "2950:     int iPK = sizeof(sqlite3_value*)*p->nCol*2;",
          "",
          "[Added Lines]",
          "2950:     size_t iPK = sizeof(sqlite3_value*)*p->nCol*2;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4252:     rc = sessionChangesetStart(&pIter2, 0, 0, cons.nBuf, cons.aBuf, 0);",
          "4253:     if( rc==SQLITE_OK ){",
          "4255:       int rc2;",
          "4256:       pIter2->bPatchset = bPatchset;",
          "4257:       pIter2->zTab = (char*)zTab;",
          "",
          "[Removed Lines]",
          "4254:       int nByte = 2*pApply->nCol*sizeof(sqlite3_value*);",
          "",
          "[Added Lines]",
          "4254:       size_t nByte = 2*pApply->nCol*sizeof(sqlite3_value*);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07ee06fd390bfebebc014b47583d489747b0423bb96c810bed5c605ce0e3be71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3769: ){",
          "3770:   char *z;",
          "3772:   if( (n & (n-1))==0 ){",
          "3773:     sqlite3_int64 sz = (n==0) ? 1 : 2*n;",
          "3774:     void *pNew = sqlite3DbRealloc(db, pArray, sz*szEntry);",
          "",
          "[Removed Lines]",
          "3771:   sqlite3_int64 n = *pnEntry;",
          "",
          "[Added Lines]",
          "3771:   sqlite3_int64 n = *pIdx = *pnEntry;",
          "",
          "---------------"
        ],
        "src/hash.c||src/hash.c": [
          "File: src/hash.c -> src/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:     if( pEntry->chain==elem ){",
          "199:       pEntry->chain = elem->next;",
          "200:     }",
          "201:     pEntry->count--;",
          "203:   }",
          "204:   sqlite3_free( elem );",
          "205:   pH->count--;",
          "",
          "[Removed Lines]",
          "202:     assert( pEntry->count>=0 );",
          "",
          "[Added Lines]",
          "201:     assert( pEntry->count>0 );",
          "",
          "---------------"
        ],
        "src/hash.h||src/hash.h": [
          "File: src/hash.h -> src/hash.h"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:                         : (sqlite3_int64)v->nOpAlloc+nOp);",
          "160: #else",
          "161:   sqlite3_int64 nNew = (v->nOpAlloc ? 2*(sqlite3_int64)v->nOpAlloc",
          "163:   UNUSED_PARAMETER(nOp);",
          "164: #endif",
          "",
          "[Removed Lines]",
          "162:                         : (sqlite3_int64)1024/sizeof(Op));",
          "",
          "[Added Lines]",
          "162:                         : (sqlite3_int64)(1024/sizeof(Op)));",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "577:   if( pWal->nWiData<=iPage ){",
          "579:     volatile u32 **apNew;",
          "580:     apNew = (volatile u32 **)sqlite3_realloc64((void *)pWal->apWiData, nByte);",
          "581:     if( !apNew ){",
          "",
          "[Removed Lines]",
          "578:     int nByte = sizeof(u32*)*(iPage+1);",
          "",
          "[Added Lines]",
          "578:     sqlite3_int64 nByte = sizeof(u32*)*(iPage+1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "680:   assert( nByte>=8 );",
          "681:   assert( (nByte&0x00000007)==0 );",
          "683:   if( nativeCksum ){",
          "684:     do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:   assert( nByte<=65536 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b4d0e2cbad230860c724088bcdacaed000b2a99",
      "candidate_info": {
        "commit_hash": "8b4d0e2cbad230860c724088bcdacaed000b2a99",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b4d0e2cbad230860c724088bcdacaed000b2a99",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3misc.test"
        ],
        "message": "Ensure fts3/4 prefix indexes are flushed to disk before an 'optimize' command. Fix for [745f1abc].\n\nFossilOrigin-Name: 4ed905b18847d4dbf5a2570052abced338065f824137b90300f62d77b3159d80",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3482:   int rc;",
          "3483:   sqlite3_stmt *pAllLangid = 0;",
          "3486:   if( rc==SQLITE_OK ){",
          "3487:     int rc2;",
          "3488:     sqlite3_bind_int(pAllLangid, 1, p->iPrevLangid);",
          "",
          "[Removed Lines]",
          "3485:   rc = fts3SqlStmt(p, SQL_SELECT_ALL_LANGID, &pAllLangid, 0);",
          "",
          "[Added Lines]",
          "3485:   rc = sqlite3Fts3PendingTermsFlush(p);",
          "3486:   if( rc==SQLITE_OK ){",
          "3487:     rc = fts3SqlStmt(p, SQL_SELECT_ALL_LANGID, &pAllLangid, 0);",
          "3488:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3503:   }",
          "3505:   sqlite3Fts3SegmentsClose(p);",
          "3508:   return (rc==SQLITE_OK && bReturnDone && bSeenDone) ? SQLITE_DONE : rc;",
          "3509: }",
          "",
          "[Removed Lines]",
          "3506:   sqlite3Fts3PendingTermsClear(p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5863546df99abd1ad4ebcaba18dec647be4368e2c13ce0b28e48c8608d3e87ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: }",
          "240: #-------------------------------------------------------------------------",
          "241: #",
          "242: reset_db",
          "243: do_execsql_test 7.0.1 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: # Ticket [8a6fa2bb].",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "267: }",
          "271: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #-------------------------------------------------------------------------",
          "270: # Ticket [745f1abc].",
          "271: #",
          "272: reset_db",
          "273: do_execsql_test 8.1 {",
          "274:   CREATE VIRTUAL TABLE vt0 USING fts4(c0, prefix=1);",
          "275: }",
          "276: do_execsql_test 8.2 {",
          "277:   BEGIN;",
          "278:     INSERT INTO vt0 VALUES (0);",
          "279:     INSERT INTO vt0(vt0) VALUES('optimize');",
          "280:   COMMIT;",
          "281: }",
          "282: do_execsql_test 8.3 {",
          "283:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "284: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}