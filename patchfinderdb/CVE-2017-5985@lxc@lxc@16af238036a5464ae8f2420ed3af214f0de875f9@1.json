{
  "cve_id": "CVE-2017-5985",
  "cve_desc": "lxc-user-nic in Linux Containers (LXC) allows local users with a lxc-usernet allocation to create network interfaces on the host and choose the name of those interfaces by leveraging lack of netns ownership check.",
  "repo": "lxc/lxc",
  "patch_hash": "16af238036a5464ae8f2420ed3af214f0de875f9",
  "patch_info": {
    "commit_hash": "16af238036a5464ae8f2420ed3af214f0de875f9",
    "repo": "lxc/lxc",
    "commit_url": "https://github.com/lxc/lxc/commit/16af238036a5464ae8f2420ed3af214f0de875f9",
    "files": [
      "src/lxc/lxc_user_nic.c"
    ],
    "message": "CVE-2017-5985: Ensure target netns is caller-owned\n\nBefore this commit, lxc-user-nic could potentially have been tricked into\noperating on a network namespace over which the caller did not hold privilege.\n\nThis commit ensures that the caller is privileged over the network namespace by\ntemporarily dropping privilege.\n\nLaunchpad: https://bugs.launchpad.net/ubuntu/+source/lxc/+bug/1654676\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
    "before_after_code_files": [
      "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
    ]
  },
  "patch_diff": {
    "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
      "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: #include \"utils.h\"",
      "51: #include \"network.h\"",
      "53: static void usage(char *me, bool fail)",
      "54: {",
      "55:  fprintf(stderr, \"Usage: %s lxcpath name pid type bridge nicname\\n\", me);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: #define usernic_debug_stream(stream, format, ...)                              \\",
      "54:  do {                                                                   \\",
      "55:   fprintf(stream, \"%s: %d: %s: \" format, __FILE__, __LINE__,     \\",
      "56:    __func__, __VA_ARGS__);                                \\",
      "57:  } while (false)",
      "59: #define usernic_error(format, ...) usernic_debug_stream(stderr, format, __VA_ARGS__)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "670: }",
      "672: #define VETH_DEF_NAME \"eth%d\"",
      "674: static int rename_in_ns(int pid, char *oldname, char **newnamep)",
      "675: {",
      "677:  bool grab_newname = false;",
      "679:  ofd = lxc_preserve_ns(getpid(), \"net\");",
      "680:  if (ofd < 0) {",
      "683:  }",
      "685:  fd = lxc_preserve_ns(pid, \"net\");",
      "686:  if (fd < 0) {",
      "689:  }",
      "694:  }",
      "696:  if (!*newnamep) {",
      "697:   grab_newname = true;",
      "702:   }",
      "703:  }",
      "707:  }",
      "708:  if (grab_newname) {",
      "710:   if (!if_indextoname(ifindex, namep)) {",
      "713:   }",
      "715:   if (!*newnamep)",
      "717:  }",
      "722:  }",
      "732:  if (fd >= 0)",
      "733:   close(fd);",
      "735: }",
      "",
      "[Removed Lines]",
      "676:  int fd = -1, ofd = -1, ret, ifindex = -1;",
      "681:   fprintf(stderr, \"Failed opening network namespace path for '%d'.\", getpid());",
      "682:   return -1;",
      "687:   fprintf(stderr, \"Failed opening network namespace path for '%d'.\", pid);",
      "688:   return -1;",
      "691:  if (setns(fd, 0) < 0) {",
      "692:   fprintf(stderr, \"setns to container network namespace\\n\");",
      "693:   goto out_err;",
      "695:  close(fd); fd = -1;",
      "699:   if (!(ifindex = if_nametoindex(oldname))) {",
      "700:    fprintf(stderr, \"failed to get netdev index\\n\");",
      "701:    goto out_err;",
      "704:  if ((ret = lxc_netdev_rename_by_name(oldname, *newnamep)) < 0) {",
      "705:   fprintf(stderr, \"Error %d renaming netdev %s to %s in container\\n\", ret, oldname, *newnamep);",
      "706:   goto out_err;",
      "709:   char ifname[IFNAMSIZ], *namep = ifname;",
      "711:    fprintf(stderr, \"Failed to get new netdev name\\n\");",
      "712:    goto out_err;",
      "716:    goto out_err;",
      "718:  if (setns(ofd, 0) < 0) {",
      "719:   fprintf(stderr, \"Error returning to original netns\\n\");",
      "720:   close(ofd);",
      "721:   return -1;",
      "723:  close(ofd);",
      "725:  return 0;",
      "727: out_err:",
      "728:  if (ofd >= 0)",
      "729:   close(ofd);",
      "730:  if (setns(ofd, 0) < 0)",
      "731:   fprintf(stderr, \"Error returning to original network namespace\\n\");",
      "734:  return -1;",
      "",
      "[Added Lines]",
      "683:  uid_t ruid, suid, euid;",
      "684:  int fret = -1;",
      "685:  int fd = -1, ifindex = -1, ofd = -1, ret;",
      "690:   usernic_error(\"Failed opening network namespace path for '%d'.\", getpid());",
      "691:   return fret;",
      "696:   usernic_error(\"Failed opening network namespace path for '%d'.\", pid);",
      "697:   goto do_partial_cleanup;",
      "700:  ret = getresuid(&ruid, &euid, &suid);",
      "701:  if (ret < 0) {",
      "702:   usernic_error(\"Failed to retrieve real, effective, and saved \"",
      "703:          \"user IDs: %s\\n\",",
      "704:          strerror(errno));",
      "705:   goto do_partial_cleanup;",
      "708:  ret = setns(fd, CLONE_NEWNET);",
      "709:  close(fd);",
      "710:  fd = -1;",
      "711:  if (ret < 0) {",
      "712:   usernic_error(\"Failed to setns() to the network namespace of \"",
      "713:          \"the container with PID %d: %s.\\n\",",
      "714:          pid, strerror(errno));",
      "715:   goto do_partial_cleanup;",
      "716:  }",
      "718:  ret = setresuid(ruid, ruid, 0);",
      "719:  if (ret < 0) {",
      "720:   usernic_error(\"Failed to drop privilege by setting effective \"",
      "721:          \"user id and real user id to %d, and saved user \"",
      "722:          \"ID to 0: %s.\\n\",",
      "723:          ruid, strerror(errno));",
      "727:   goto do_full_cleanup;",
      "728:  }",
      "734:   ifindex = if_nametoindex(oldname);",
      "735:   if (!ifindex) {",
      "736:    usernic_error(\"Failed to get netdev index: %s.\\n\", strerror(errno));",
      "737:    goto do_full_cleanup;",
      "741:  ret = lxc_netdev_rename_by_name(oldname, *newnamep);",
      "742:  if (ret < 0) {",
      "743:   usernic_error(\"Error %d renaming netdev %s to %s in container.\\n\", ret, oldname, *newnamep);",
      "744:   goto do_full_cleanup;",
      "748:   char ifname[IFNAMSIZ];",
      "749:   char *namep = ifname;",
      "752:    usernic_error(\"Failed to get new netdev name: %s.\\n\", strerror(errno));",
      "753:    goto do_full_cleanup;",
      "758:    goto do_full_cleanup;",
      "761:  fret = 0;",
      "763: do_full_cleanup:",
      "764:  ret = setresuid(ruid, euid, suid);",
      "765:  if (ret < 0) {",
      "766:   usernic_error(\"Failed to restore privilege by setting effective \"",
      "767:          \"user id to %d, real user id to %d, and saved user \"",
      "768:          \"ID to %d: %s.\\n\",",
      "769:          ruid, euid, suid, strerror(errno));",
      "770:   fret = -1;",
      "776:  ret = setns(ofd, CLONE_NEWNET);",
      "777:  if (ret < 0) {",
      "778:   usernic_error(\"Failed to setns() to original network namespace \"",
      "779:          \"of PID %d: %s.\\n\",",
      "780:          ofd, strerror(errno));",
      "781:   fret = -1;",
      "782:  }",
      "784: do_partial_cleanup:",
      "787:  close(ofd);",
      "789:  return fret;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0059379ff44bd52cf17d72300e60432686f2fba0",
      "candidate_info": {
        "commit_hash": "0059379ff44bd52cf17d72300e60432686f2fba0",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/0059379ff44bd52cf17d72300e60432686f2fba0",
        "files": [
          "src/lxc/Makefile.am",
          "src/lxc/af_unix.c",
          "src/lxc/attach.c",
          "src/lxc/cgroups/cgfs.c",
          "src/lxc/cgroups/cgmanager.c",
          "src/lxc/console.c",
          "src/lxc/lsm/apparmor.c",
          "src/lxc/lxc_init.c",
          "src/lxc/lxc_monitord.c",
          "src/lxc/lxc_user_nic.c",
          "src/lxc/lxccontainer.c",
          "src/lxc/network.c",
          "src/lxc/start.c",
          "src/lxc/utils.c",
          "src/lxc/utils.h"
        ],
        "message": "tree-wide: s/getpid()/lxc_raw_getpid()/g\n\nThis is to avoid bad surprises caused by older glibc's pid cache (up to 2.25)\nwhen using clone().\n\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/Makefile.am||src/lxc/Makefile.am",
          "src/lxc/af_unix.c||src/lxc/af_unix.c",
          "src/lxc/attach.c||src/lxc/attach.c",
          "src/lxc/cgroups/cgfs.c||src/lxc/cgroups/cgfs.c",
          "src/lxc/cgroups/cgmanager.c||src/lxc/cgroups/cgmanager.c",
          "src/lxc/console.c||src/lxc/console.c",
          "src/lxc/lsm/apparmor.c||src/lxc/lsm/apparmor.c",
          "src/lxc/lxc_init.c||src/lxc/lxc_init.c",
          "src/lxc/lxc_monitord.c||src/lxc/lxc_monitord.c",
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c",
          "src/lxc/lxccontainer.c||src/lxc/lxccontainer.c",
          "src/lxc/network.c||src/lxc/network.c",
          "src/lxc/start.c||src/lxc/start.c",
          "src/lxc/utils.c||src/lxc/utils.c",
          "src/lxc/utils.h||src/lxc/utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/Makefile.am||src/lxc/Makefile.am": [
          "File: src/lxc/Makefile.am -> src/lxc/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "290: lxc_snapshot_SOURCES = tools/lxc_snapshot.c tools/arguments.c",
          "291: lxc_usernsexec_SOURCES = tools/lxc_usernsexec.c tools/arguments.c",
          "292: lxc_checkpoint_SOURCES = tools/lxc_checkpoint.c tools/arguments.c",
          "294: lxc_monitord_SOURCES = lxc_monitord.c tools/arguments.c",
          "296: if ENABLE_DEPRECATED",
          "",
          "[Removed Lines]",
          "293: lxc_user_nic_SOURCES = lxc_user_nic.c network.c network.h tools/arguments.c",
          "",
          "[Added Lines]",
          "293: lxc_user_nic_SOURCES = lxc_user_nic.c namespace.c network.c tools/arguments.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304: if HAVE_STATIC_LIBCAP",
          "305: sbin_PROGRAMS += init.lxc.static",
          "309: if !HAVE_GETLINE",
          "310: if HAVE_FGETLN",
          "",
          "[Removed Lines]",
          "307: init_lxc_static_SOURCES = lxc_init.c error.c log.c initutils.c caps.c parse.c",
          "",
          "[Added Lines]",
          "307: init_lxc_static_SOURCES = lxc_init.c error.c log.c initutils.c caps.c parse.c namespace.c",
          "",
          "---------------"
        ],
        "src/lxc/af_unix.c||src/lxc/af_unix.c": [
          "File: src/lxc/af_unix.c -> src/lxc/af_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <sys/un.h>",
          "36: #include \"log.h\"",
          "38: lxc_log_define(lxc_af_unix, lxc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:  struct iovec iov;",
          "218:  struct cmsghdr *cmsg;",
          "219:  struct ucred cred = {",
          "221:  };",
          "222:  char cmsgbuf[CMSG_SPACE(sizeof(cred))] = {0};",
          "223:  char buf[1] = {0};",
          "",
          "[Removed Lines]",
          "220:      .pid = getpid(), .uid = getuid(), .gid = getgid(),",
          "",
          "[Added Lines]",
          "221:      .pid = lxc_raw_getpid(), .uid = getuid(), .gid = getgid(),",
          "",
          "---------------"
        ],
        "src/lxc/attach.c||src/lxc/attach.c": [
          "File: src/lxc/attach.c -> src/lxc/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1121:   }",
          "1122:  }",
          "1125:  for (i = 0; i < LXC_NS_MAX; i++) {",
          "1126:   int j, saved_errno;",
          "",
          "[Removed Lines]",
          "1124:  pid = syscall(SYS_getpid);",
          "",
          "[Added Lines]",
          "1124:  pid = lxc_raw_getpid();",
          "",
          "---------------"
        ],
        "src/lxc/cgroups/cgfs.c||src/lxc/cgroups/cgfs.c": [
          "File: src/lxc/cgroups/cgfs.c -> src/lxc/cgroups/cgfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:  struct cgroup_process_info *i;",
          "765:  i = lxc_cgroup_process_info_getx(\"/proc/self/cgroup\", meta);",
          "766:  if (!i)",
          "768:  return i;",
          "769: }",
          "",
          "[Removed Lines]",
          "767:   i = lxc_cgroup_process_info_get(getpid(), meta);",
          "",
          "[Added Lines]",
          "767:   i = lxc_cgroup_process_info_get(lxc_raw_getpid(), meta);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2480:   if (!f)",
          "2481:    goto out;",
          "2484:   fclose(f);",
          "2485:   if (written < 0) {",
          "2486:    SYSERROR(\"writing tasks failed\\n\");",
          "",
          "[Removed Lines]",
          "2483:   written = fprintf(f, \"%d\\n\", getpid());",
          "",
          "[Added Lines]",
          "2483:   written = fprintf(f, \"%d\\n\", lxc_raw_getpid());",
          "",
          "---------------"
        ],
        "src/lxc/cgroups/cgmanager.c||src/lxc/cgroups/cgmanager.c": [
          "File: src/lxc/cgroups/cgmanager.c -> src/lxc/cgroups/cgmanager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"error.h\"",
          "45: #include \"commands.h\"",
          "46: #include \"list.h\"",
          "47: #include \"conf.h\"",
          "48: #include \"utils.h\"",
          "49: #include \"log.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include \"namespace.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303: static bool cgm_escape(void *hdata)",
          "304: {",
          "305:  bool ret = true, cgm_needs_disconnect = false;",
          "307:  char **slist = subsystems;",
          "308:  int i;",
          "",
          "[Removed Lines]",
          "306:  pid_t me = getpid();",
          "",
          "[Added Lines]",
          "307:  pid_t me = lxc_raw_getpid();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:   uid_t newuid)",
          "360: {",
          "361:  int sv[2] = {-1, -1}, optval = 1, ret = -1;",
          "362:  char buf[1];",
          "363:  struct pollfd fds;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:  pid_t pid_self;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "395:   ERROR(\"Error getting reply from server over socketpair\");",
          "396:   goto out;",
          "397:  }",
          "399:   SYSERROR(\"Error sending pid over SCM_CREDENTIAL\");",
          "400:   goto out;",
          "401:  }",
          "",
          "[Removed Lines]",
          "398:  if (send_creds(sv[0], getpid(), getuid(), getgid())) {",
          "",
          "[Added Lines]",
          "401:  pid_self = lxc_raw_getpid();",
          "402:  if (send_creds(sv[0], pid_self, getuid(), getgid())) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "410:   ERROR(\"Error getting reply from server over socketpair\");",
          "411:   goto out;",
          "412:  }",
          "414:   SYSERROR(\"Error sending pid over SCM_CREDENTIAL\");",
          "415:   goto out;",
          "416:  }",
          "",
          "[Removed Lines]",
          "413:  if (send_creds(sv[0], getpid(), newuid, 0)) {",
          "",
          "[Added Lines]",
          "417:  if (send_creds(sv[0], pid_self, newuid, 0)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "898:   exit(1);",
          "899:  }",
          "902:   WARN(\"Failed to enter container cgroup %s:%s\", controller, cgroup);",
          "903:   ret = write(outp, &len, sizeof(len));",
          "904:   if (ret != sizeof(len))",
          "",
          "[Removed Lines]",
          "901:  if (!lxc_cgmanager_enter(getpid(), controller, cgroup, abs_cgroup_supported())) {",
          "",
          "[Added Lines]",
          "905:  if (!lxc_cgmanager_enter(lxc_raw_getpid(), controller, cgroup, abs_cgroup_supported())) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1038:   exit(1);",
          "1039:  }",
          "1042:   ERROR(\"Failed to enter container cgroup %s:%s\", controller, cgroup);",
          "1043:   ret = write(outp, &retval, sizeof(retval));",
          "1044:   if (ret != sizeof(retval))",
          "",
          "[Removed Lines]",
          "1041:  if (!lxc_cgmanager_enter(getpid(), controller, cgroup, abs_cgroup_supported())) {",
          "",
          "[Added Lines]",
          "1045:  if (!lxc_cgmanager_enter(lxc_raw_getpid(), controller, cgroup, abs_cgroup_supported())) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1278:  }",
          "1280:  cgroup_pattern = lxc_global_config_value(\"lxc.cgroup.pattern\");",
          "1282:  if (i < 0 || i >= 50) {",
          "1283:   ERROR(\"Attack - format string modified?\");",
          "1284:   return false;",
          "",
          "[Removed Lines]",
          "1281:  i = snprintf(tmpnam, 50, \"lxcprobe-%d\", getpid());",
          "",
          "[Added Lines]",
          "1285:  i = snprintf(tmpnam, 50, \"lxcprobe-%d\", lxc_raw_getpid());",
          "",
          "---------------"
        ],
        "src/lxc/console.c||src/lxc/console.c": [
          "File: src/lxc/console.c -> src/lxc/console.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:  console->peerpty.busy = sockfd;",
          "415:  lxc_console_mainloop_add_peer(console);",
          "418:  return 0;",
          "420: err1:",
          "",
          "[Removed Lines]",
          "417:  DEBUG(\"%d %s peermaster:%d sockfd:%d\", getpid(), __FUNCTION__, console->peerpty.master, sockfd);",
          "",
          "[Added Lines]",
          "417:  DEBUG(\"%d %s peermaster:%d sockfd:%d\", lxc_raw_getpid(), __FUNCTION__, console->peerpty.master, sockfd);",
          "",
          "---------------"
        ],
        "src/lxc/lsm/apparmor.c||src/lxc/lsm/apparmor.c": [
          "File: src/lxc/lsm/apparmor.c -> src/lxc/lsm/apparmor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: static bool apparmor_am_unconfined(void)",
          "137: {",
          "139:  bool ret = false;",
          "140:  if (!p || strcmp(p, \"unconfined\") == 0)",
          "141:   ret = true;",
          "",
          "[Removed Lines]",
          "138:  char *p = apparmor_process_label_get(getpid());",
          "",
          "[Added Lines]",
          "138:  char *p = apparmor_process_label_get(lxc_raw_getpid());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:   return 0;",
          "187:  }",
          "191:  if (!aa_stacking_supported() && aa_needs_transition(curlabel)) {",
          "",
          "[Removed Lines]",
          "189:  curlabel = apparmor_process_label_get(getpid());",
          "",
          "[Added Lines]",
          "189:  curlabel = apparmor_process_label_get(lxc_raw_getpid());",
          "",
          "---------------"
        ],
        "src/lxc/lxc_init.c||src/lxc/lxc_init.c": [
          "File: src/lxc/lxc_init.c -> src/lxc/lxc_init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include \"error.h\"",
          "41: #include \"initutils.h\"",
          "42: #include \"log.h\"",
          "43: #include \"parse.h\"",
          "44: #include \"version.h\"",
          "47: #define OPT_USAGE 0x1000",
          "50: #define QUOTE(macro) #macro",
          "51: #define QUOTEVAL(macro) QUOTE(macro)",
          "",
          "[Removed Lines]",
          "48: #define OPT_VERSION OPT_USAGE - 1",
          "",
          "[Added Lines]",
          "43: #include \"namespace.h\"",
          "49: #define OPT_VERSION OPT_USAGE - 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: }",
          "63: static struct option long_options[] = {",
          "72:      { 0,             0,                 0, 0           }",
          "73:  };",
          "74: static char short_options[] = \"n:hqo:l:P:\";",
          "",
          "[Removed Lines]",
          "64:      { \"name\",        required_argument, 0, 'n'         },",
          "65:           { \"help\",        no_argument,       0, 'h'         },",
          "66:      { \"usage\",       no_argument,       0, OPT_USAGE   },",
          "67:      { \"version\",     no_argument,       0, OPT_VERSION },",
          "68:      { \"quiet\",       no_argument,       0, 'q'         },",
          "69:      { \"logfile\",     required_argument, 0, 'o'         },",
          "70:      { \"logpriority\", required_argument, 0, 'l'         },",
          "71:      { \"lxcpath\",     required_argument, 0, 'P'         },",
          "",
          "[Added Lines]",
          "65:      { \"name\",        required_argument, 0, 'n'         },",
          "66:           { \"help\",        no_argument,       0, 'h'         },",
          "67:      { \"usage\",       no_argument,       0, OPT_USAGE   },",
          "68:      { \"version\",     no_argument,       0, OPT_VERSION },",
          "69:      { \"quiet\",       no_argument,       0, 'q'         },",
          "70:      { \"logfile\",     required_argument, 0, 'o'         },",
          "71:      { \"logpriority\", required_argument, 0, 'l'         },",
          "72:      { \"lxcpath\",     required_argument, 0, 'P'         },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:   case SIGPWR:",
          "360:   case SIGTERM:",
          "361:    if (!shutdown) {",
          "364:     shutdown = 1;",
          "365:     prevent_forking();",
          "",
          "[Removed Lines]",
          "362:     pid_t mypid = getpid();",
          "",
          "[Added Lines]",
          "363:     pid_t mypid = lxc_raw_getpid();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "375:    }",
          "376:    break;",
          "377:   case SIGALRM: {",
          "380:    prevent_forking();",
          "381:    if (mypid != 1) {",
          "",
          "[Removed Lines]",
          "378:    pid_t mypid = getpid();",
          "",
          "[Added Lines]",
          "379:    pid_t mypid = lxc_raw_getpid();",
          "",
          "---------------"
        ],
        "src/lxc/lxc_monitord.c||src/lxc/lxc_monitord.c": [
          "File: src/lxc/lxc_monitord.c -> src/lxc/lxc_monitord.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:  }",
          "429:  NOTICE(\"lxc-monitord with pid %d is now monitoring lxcpath %s.\",",
          "431:  for (;;) {",
          "432:   ret = lxc_mainloop(&mon.descr, 1000 * 30);",
          "433:   if (ret) {",
          "",
          "[Removed Lines]",
          "430:         getpid(), mon.lxcpath);",
          "",
          "[Added Lines]",
          "430:         lxc_raw_getpid(), mon.lxcpath);",
          "",
          "---------------"
        ],
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include <sys/types.h>",
          "48: #include \"config.h\"",
          "49: #include \"network.h\"",
          "50: #include \"utils.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #include \"namespace.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "814:          int *container_veth_ifidx)",
          "815: {",
          "816:  int ret;",
          "817:  uid_t ruid, suid, euid;",
          "818:  char ifname[IFNAMSIZ];",
          "819:  char *string_ret = NULL, *name = NULL;",
          "820:  int fd = -1, ifindex = -1, ofd = -1;",
          "823:  if (ofd < 0) {",
          "825:   return NULL;",
          "826:  }",
          "",
          "[Removed Lines]",
          "822:  ofd = lxc_preserve_ns(getpid(), \"net\");",
          "824:   usernic_error(\"Failed opening network namespace path for %d\", getpid());",
          "",
          "[Added Lines]",
          "818:  pid_t pid_self;",
          "824:  pid_self = lxc_raw_getpid();",
          "825:  ofd = lxc_preserve_ns(pid_self, \"net\");",
          "827:   usernic_error(\"Failed opening network namespace path for %d\", pid_self);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "993: static bool is_privileged_over_netns(int netns_fd)",
          "994: {",
          "995:  int ret;",
          "996:  uid_t euid, ruid, suid;",
          "997:  bool bret = false;",
          "998:  int ofd = -1;",
          "1001:  if (ofd < 0) {",
          "1003:   return false;",
          "1004:  }",
          "",
          "[Removed Lines]",
          "1000:  ofd = lxc_preserve_ns(getpid(), \"net\");",
          "1002:   usernic_error(\"Failed opening network namespace path for %d\", getpid());",
          "",
          "[Added Lines]",
          "999:  pid_t pid_self;",
          "1004:  pid_self = lxc_raw_getpid();",
          "1005:  ofd = lxc_preserve_ns(pid_self, \"net\");",
          "1007:   usernic_error(\"Failed opening network namespace path for %d\", pid_self);",
          "",
          "---------------"
        ],
        "src/lxc/lxccontainer.c||src/lxc/lxccontainer.c": [
          "File: src/lxc/lxccontainer.c -> src/lxc/lxccontainer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "942:   ret = setsid();",
          "943:   if (ret < 0)",
          "945:  } else {",
          "946:   if (!am_single_threaded()) {",
          "947:    ERROR(\"Cannot start non-daemonized container when threaded\");",
          "",
          "[Removed Lines]",
          "944:    TRACE(\"Process %d is already process group leader\", getpid());",
          "",
          "[Added Lines]",
          "944:    TRACE(\"Process %d is already process group leader\", lxc_raw_getpid());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "966:    return false;",
          "967:   }",
          "970:    SYSERROR(\"Failed to write '%s'\", c->pidfile);",
          "971:    fclose(pid_fp);",
          "972:    pid_fp = NULL;",
          "",
          "[Removed Lines]",
          "969:   if (fprintf(pid_fp, \"%d\\n\", getpid()) < 0) {",
          "",
          "[Added Lines]",
          "969:   if (fprintf(pid_fp, \"%d\\n\", lxc_raw_getpid()) < 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4451:   return false;",
          "4452:  }",
          "4455:  pid = fork();",
          "4456:  if (pid < 0) {",
          "4457:   ERROR(\"Failed to fork\");",
          "",
          "[Removed Lines]",
          "4454:  pid_outside = getpid();",
          "",
          "[Added Lines]",
          "4454:  pid_outside = lxc_raw_getpid();",
          "",
          "---------------"
        ],
        "src/lxc/network.c||src/lxc/network.c": [
          "File: src/lxc/network.c -> src/lxc/network.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2369:  }",
          "2371:  ret = snprintf(netns_path, sizeof(netns_path), \"/proc/%d/fd/%d\",",
          "2373:  if (ret < 0 || ret >= sizeof(netns_path))",
          "2374:   return false;",
          "",
          "[Removed Lines]",
          "2372:          getpid(), handler->nsfd[LXC_NS_NET]);",
          "",
          "[Added Lines]",
          "2372:          lxc_raw_getpid(), handler->nsfd[LXC_NS_NET]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2694:  TRACE(\"Moving physical network devices back to parent network namespace\");",
          "2697:  if (oldfd < 0) {",
          "2698:   SYSERROR(\"Failed to preserve network namespace\");",
          "2699:   return -1;",
          "",
          "[Removed Lines]",
          "2696:  oldfd = lxc_preserve_ns(getpid(), \"net\");",
          "",
          "[Added Lines]",
          "2696:  oldfd = lxc_preserve_ns(lxc_raw_getpid(), \"net\");",
          "",
          "---------------"
        ],
        "src/lxc/start.c||src/lxc/start.c": [
          "File: src/lxc/start.c -> src/lxc/start.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "727:  lxc_set_state(name, handler, STOPPING);",
          "730:  for (i = 0; i < LXC_NS_MAX; i++) {",
          "731:   if (handler->nsfd[i] < 0)",
          "732:    continue;",
          "",
          "[Removed Lines]",
          "729:  self = getpid();",
          "",
          "[Added Lines]",
          "729:  self = lxc_raw_getpid();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1006:  }",
          "1008:  if (handler->clone_flags & CLONE_NEWCGROUP) {",
          "1010:   if (fd < 0) {",
          "1011:    ERROR(\"%s - Failed to preserve cgroup namespace\", strerror(errno));",
          "1012:    close(handler->data_sock[0]);",
          "",
          "[Removed Lines]",
          "1009:   fd = lxc_preserve_ns(syscall(SYS_getpid), \"cgroup\");",
          "",
          "[Added Lines]",
          "1009:   fd = lxc_preserve_ns(lxc_raw_getpid(), \"cgroup\");",
          "",
          "---------------"
        ],
        "src/lxc/utils.c||src/lxc/utils.c": [
          "File: src/lxc/utils.c -> src/lxc/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1701:   return -1;",
          "1702:  }",
          "1705:  INFO(\"I am %d, /proc/self points to \\\"%s\\\"\", mypid, link);",
          "1707:  if (lxc_safe_int(link, &link_to_pid) < 0)",
          "",
          "[Removed Lines]",
          "1704:  mypid = getpid();",
          "",
          "[Added Lines]",
          "1704:  mypid = lxc_raw_getpid();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2389:  return fd;",
          "2390: }",
          "2403: int parse_byte_size_string(const char *s, int64_t *converted)",
          "2404: {",
          "2405:  int ret, suffix_len;",
          "",
          "[Removed Lines]",
          "2392: uint64_t lxc_getpagesize(void)",
          "2393: {",
          "2394:  int64_t pgsz;",
          "2396:  pgsz = sysconf(_SC_PAGESIZE);",
          "2397:  if (pgsz <= 0)",
          "2398:   pgsz = 1 << 12;",
          "2400:  return pgsz;",
          "2401: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lxc/utils.h||src/lxc/utils.h": [
          "File: src/lxc/utils.h -> src/lxc/utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "519: extern bool is_fs_type(const struct statfs *fs, fs_type_magic magic_val);",
          "520: extern bool lxc_nic_exists(char *nic);",
          "521: extern int lxc_make_tmpfile(char *template, bool rm);",
          "",
          "[Removed Lines]",
          "522: extern uint64_t lxc_getpagesize(void);",
          "",
          "[Added Lines]",
          "523: static inline uint64_t lxc_getpagesize(void)",
          "524: {",
          "525:  int64_t pgsz;",
          "527:  pgsz = sysconf(_SC_PAGESIZE);",
          "528:  if (pgsz <= 0)",
          "529:   pgsz = 1 << 12;",
          "531:  return pgsz;",
          "532: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cffb6769da95b9c5980d7e2e01e9a75238461d3",
      "candidate_info": {
        "commit_hash": "0cffb6769da95b9c5980d7e2e01e9a75238461d3",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/0cffb6769da95b9c5980d7e2e01e9a75238461d3",
        "files": [
          "src/lxc/conf.c",
          "src/lxc/lxc_user_nic.c"
        ],
        "message": "network: send ifindex for unpriv networks\n\nWe use the ifindex as an indicator that liblxc created the network so let's\nrecord it for the unprivileged case as well.\n\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/conf.c||src/lxc/conf.c",
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/conf.c||src/lxc/conf.c": [
          "File: src/lxc/conf.c -> src/lxc/conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3274: static int unpriv_assign_nic(const char *lxcpath, char *lxcname,",
          "3275:         struct lxc_netdev *netdev, pid_t pid)",
          "3276: {",
          "3277:  pid_t child;",
          "3278:  int bytes, pipefd[2];",
          "3279:  char *token, *saveptr = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3277:  int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3387:   return -1;",
          "3388:  }",
          "3390:  return 0;",
          "3391: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3392:  token = strtok_r(NULL, \":\", &saveptr);",
          "3393:  if (!token)",
          "3394:   return -1;",
          "3396:  ret = lxc_safe_int(token, &netdev->ifindex);",
          "3397:  if (ret < 0) {",
          "3398:   ERROR(\"Failed to parse ifindex for network device \\\"%s\\\"\", netdev->name);",
          "3399:   return -1;",
          "3400:  }",
          "",
          "---------------"
        ],
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "767:  goto again;",
          "768: }",
          "771: {",
          "772:  int ret;",
          "773:  uid_t ruid, suid, euid;",
          "",
          "[Removed Lines]",
          "770: static char *lxc_secure_rename_in_ns(int pid, char *oldname, char *newname)",
          "",
          "[Added Lines]",
          "770: static char *lxc_secure_rename_in_ns(int pid, char *oldname, char *newname,",
          "771:          int *ifidx)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "944: int main(int argc, char *argv[])",
          "945: {",
          "947:  char *me, *newname;",
          "948:  char *cnic = NULL, *nicname = NULL;",
          "949:  struct alloted_s *alloted = NULL;",
          "",
          "[Removed Lines]",
          "946:  int fd, n, pid, ret;",
          "",
          "[Added Lines]",
          "948:  int fd, ifindex, n, pid, ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1018:  }",
          "1022:  if (!newname) {",
          "1023:   usernic_error(\"%s\", \"Failed to rename the link\\n\");",
          "1024:   ret = lxc_netdev_delete_by_name(cnic);",
          "",
          "[Removed Lines]",
          "1021:  newname = lxc_secure_rename_in_ns(pid, cnic, args.veth_name);",
          "",
          "[Added Lines]",
          "1023:  newname = lxc_secure_rename_in_ns(pid, cnic, args.veth_name, &ifindex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1029:  }",
          "1033:  free(newname);",
          "1034:  free(nicname);",
          "1035:  exit(EXIT_SUCCESS);",
          "",
          "[Removed Lines]",
          "1032:  fprintf(stdout, \"%s:%s\\n\", newname, nicname);",
          "",
          "[Added Lines]",
          "1034:  fprintf(stdout, \"%s:%s:%d\\n\", newname, nicname, ifindex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d512bd5efb0e407eba350c4e649c464a65b712a3",
      "candidate_info": {
        "commit_hash": "d512bd5efb0e407eba350c4e649c464a65b712a3",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/d512bd5efb0e407eba350c4e649c464a65b712a3",
        "files": [
          "src/lxc/lxc_user_nic.c"
        ],
        "message": "CVE-2017-5985: Ensure target netns is caller-owned\n\nBefore this commit, lxc-user-nic could potentially have been tricked into\noperating on a network namespace over which the caller did not hold privilege.\n\nThis commit ensures that the caller is privileged over the network namespace by\ntemporarily dropping privilege.\n\nLaunchpad: https://bugs.launchpad.net/ubuntu/+source/lxc/+bug/1654676\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include \"utils.h\"",
          "51: #include \"network.h\"",
          "53: static void usage(char *me, bool fail)",
          "54: {",
          "55:  fprintf(stderr, \"Usage: %s lxcpath name pid type bridge nicname\\n\", me);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #define usernic_debug_stream(stream, format, ...)                              \\",
          "54:  do {                                                                   \\",
          "55:   fprintf(stream, \"%s: %d: %s: \" format, __FILE__, __LINE__,     \\",
          "56:    __func__, __VA_ARGS__);                                \\",
          "57:  } while (false)",
          "59: #define usernic_error(format, ...) usernic_debug_stream(stderr, format, __VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670: }",
          "672: #define VETH_DEF_NAME \"eth%d\"",
          "674: static int rename_in_ns(int pid, char *oldname, char **newnamep)",
          "675: {",
          "677:  bool grab_newname = false;",
          "679:  ofd = lxc_preserve_ns(getpid(), \"net\");",
          "680:  if (ofd < 0) {",
          "683:  }",
          "685:  fd = lxc_preserve_ns(pid, \"net\");",
          "686:  if (fd < 0) {",
          "689:  }",
          "694:  }",
          "696:  if (!*newnamep) {",
          "697:   grab_newname = true;",
          "702:   }",
          "703:  }",
          "707:  }",
          "708:  if (grab_newname) {",
          "710:   if (!if_indextoname(ifindex, namep)) {",
          "713:   }",
          "715:   if (!*newnamep)",
          "717:  }",
          "722:  }",
          "732:  if (fd >= 0)",
          "733:   close(fd);",
          "735: }",
          "",
          "[Removed Lines]",
          "676:  int fd = -1, ofd = -1, ret, ifindex = -1;",
          "681:   fprintf(stderr, \"Failed opening network namespace path for '%d'.\", getpid());",
          "682:   return -1;",
          "687:   fprintf(stderr, \"Failed opening network namespace path for '%d'.\", pid);",
          "688:   return -1;",
          "691:  if (setns(fd, 0) < 0) {",
          "692:   fprintf(stderr, \"setns to container network namespace\\n\");",
          "693:   goto out_err;",
          "695:  close(fd); fd = -1;",
          "699:   if (!(ifindex = if_nametoindex(oldname))) {",
          "700:    fprintf(stderr, \"failed to get netdev index\\n\");",
          "701:    goto out_err;",
          "704:  if ((ret = lxc_netdev_rename_by_name(oldname, *newnamep)) < 0) {",
          "705:   fprintf(stderr, \"Error %d renaming netdev %s to %s in container\\n\", ret, oldname, *newnamep);",
          "706:   goto out_err;",
          "709:   char ifname[IFNAMSIZ], *namep = ifname;",
          "711:    fprintf(stderr, \"Failed to get new netdev name\\n\");",
          "712:    goto out_err;",
          "716:    goto out_err;",
          "718:  if (setns(ofd, 0) < 0) {",
          "719:   fprintf(stderr, \"Error returning to original netns\\n\");",
          "720:   close(ofd);",
          "721:   return -1;",
          "723:  close(ofd);",
          "725:  return 0;",
          "727: out_err:",
          "728:  if (ofd >= 0)",
          "729:   close(ofd);",
          "730:  if (setns(ofd, 0) < 0)",
          "731:   fprintf(stderr, \"Error returning to original network namespace\\n\");",
          "734:  return -1;",
          "",
          "[Added Lines]",
          "683:  uid_t ruid, suid, euid;",
          "684:  int fret = -1;",
          "685:  int fd = -1, ifindex = -1, ofd = -1, ret;",
          "690:   usernic_error(\"Failed opening network namespace path for '%d'.\", getpid());",
          "691:   return fret;",
          "696:   usernic_error(\"Failed opening network namespace path for '%d'.\", pid);",
          "697:   goto do_partial_cleanup;",
          "700:  ret = getresuid(&ruid, &euid, &suid);",
          "701:  if (ret < 0) {",
          "702:   usernic_error(\"Failed to retrieve real, effective, and saved \"",
          "703:          \"user IDs: %s\\n\",",
          "704:          strerror(errno));",
          "705:   goto do_partial_cleanup;",
          "708:  ret = setns(fd, CLONE_NEWNET);",
          "709:  close(fd);",
          "710:  fd = -1;",
          "711:  if (ret < 0) {",
          "712:   usernic_error(\"Failed to setns() to the network namespace of \"",
          "713:          \"the container with PID %d: %s.\\n\",",
          "714:          pid, strerror(errno));",
          "715:   goto do_partial_cleanup;",
          "716:  }",
          "718:  ret = setresuid(ruid, ruid, 0);",
          "719:  if (ret < 0) {",
          "720:   usernic_error(\"Failed to drop privilege by setting effective \"",
          "721:          \"user id and real user id to %d, and saved user \"",
          "722:          \"ID to 0: %s.\\n\",",
          "723:          ruid, strerror(errno));",
          "727:   goto do_full_cleanup;",
          "728:  }",
          "734:   ifindex = if_nametoindex(oldname);",
          "735:   if (!ifindex) {",
          "736:    usernic_error(\"Failed to get netdev index: %s.\\n\", strerror(errno));",
          "737:    goto do_full_cleanup;",
          "741:  ret = lxc_netdev_rename_by_name(oldname, *newnamep);",
          "742:  if (ret < 0) {",
          "743:   usernic_error(\"Error %d renaming netdev %s to %s in container.\\n\", ret, oldname, *newnamep);",
          "744:   goto do_full_cleanup;",
          "748:   char ifname[IFNAMSIZ];",
          "749:   char *namep = ifname;",
          "752:    usernic_error(\"Failed to get new netdev name: %s.\\n\", strerror(errno));",
          "753:    goto do_full_cleanup;",
          "758:    goto do_full_cleanup;",
          "761:  fret = 0;",
          "763: do_full_cleanup:",
          "764:  ret = setresuid(ruid, euid, suid);",
          "765:  if (ret < 0) {",
          "766:   usernic_error(\"Failed to restore privilege by setting effective \"",
          "767:          \"user id to %d, real user id to %d, and saved user \"",
          "768:          \"ID to %d: %s.\\n\",",
          "769:          ruid, euid, suid, strerror(errno));",
          "770:   fret = -1;",
          "776:  ret = setns(ofd, CLONE_NEWNET);",
          "777:  if (ret < 0) {",
          "778:   usernic_error(\"Failed to setns() to original network namespace \"",
          "779:          \"of PID %d: %s.\\n\",",
          "780:          ofd, strerror(errno));",
          "781:   fret = -1;",
          "782:  }",
          "784: do_partial_cleanup:",
          "787:  close(ofd);",
          "789:  return fret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e678d3d2a297abe8a6e2d673a7ada3994ebe4e5",
      "candidate_info": {
        "commit_hash": "7e678d3d2a297abe8a6e2d673a7ada3994ebe4e5",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/7e678d3d2a297abe8a6e2d673a7ada3994ebe4e5",
        "files": [
          "src/lxc/lxc_user_nic.c"
        ],
        "message": "CVE-2017-5985: Ensure target netns is caller-owned\n\nBefore this commit, lxc-user-nic could potentially have been tricked into\noperating on a network namespace over which the caller did not hold privilege.\n\nThis commit ensures that the caller is privileged over the network namespace by\ntemporarily dropping privilege.\n\nLaunchpad: https://bugs.launchpad.net/ubuntu/+source/lxc/+bug/1654676\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include \"utils.h\"",
          "51: #include \"network.h\"",
          "53: static void usage(char *me, bool fail)",
          "54: {",
          "55:  fprintf(stderr, \"Usage: %s pid type bridge nicname\\n\", me);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #define usernic_debug_stream(stream, format, ...)                              \\",
          "54:  do {                                                                   \\",
          "55:   fprintf(stream, \"%s: %d: %s: \" format, __FILE__, __LINE__,     \\",
          "56:    __func__, __VA_ARGS__);                                \\",
          "57:  } while (false)",
          "59: #define usernic_error(format, ...) usernic_debug_stream(stderr, format, __VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "474: static int rename_in_ns(int pid, char *oldname, char **newnamep)",
          "475: {",
          "476:  char nspath[MAXPATHLEN];",
          "477:  int fd = -1, ofd = -1, ret, ifindex = -1;",
          "478:  bool grab_newname = false;",
          "480:  ret = snprintf(nspath, MAXPATHLEN, \"/proc/%d/ns/net\", getpid());",
          "481:  if (ret < 0 || ret >= MAXPATHLEN)",
          "483:  if ((ofd = open(nspath, O_RDONLY)) < 0) {",
          "486:  }",
          "487:  ret = snprintf(nspath, MAXPATHLEN, \"/proc/%d/ns/net\", pid);",
          "488:  if (ret < 0 || ret >= MAXPATHLEN)",
          "491:  if ((fd = open(nspath, O_RDONLY)) < 0) {",
          "494:  }",
          "498:  }",
          "500:  if (!*newnamep) {",
          "501:   grab_newname = true;",
          "506:   }",
          "507:  }",
          "511:  }",
          "512:  if (grab_newname) {",
          "514:   if (!if_indextoname(ifindex, namep)) {",
          "517:   }",
          "519:   if (!*newnamep)",
          "526:  }",
          "536:  if (fd >= 0)",
          "537:   close(fd);",
          "539: }",
          "",
          "[Removed Lines]",
          "482:   return -1;",
          "484:   fprintf(stderr, \"Opening %s\\n\", nspath);",
          "485:   return -1;",
          "489:   goto out_err;",
          "492:   fprintf(stderr, \"Opening %s\\n\", nspath);",
          "493:   goto out_err;",
          "495:  if (setns(fd, 0) < 0) {",
          "496:   fprintf(stderr, \"setns to container network namespace\\n\");",
          "497:   goto out_err;",
          "499:  close(fd); fd = -1;",
          "503:   if (!(ifindex = if_nametoindex(oldname))) {",
          "504:    fprintf(stderr, \"failed to get netdev index\\n\");",
          "505:    goto out_err;",
          "508:  if ((ret = lxc_netdev_rename_by_name(oldname, *newnamep)) < 0) {",
          "509:   fprintf(stderr, \"Error %d renaming netdev %s to %s in container\\n\", ret, oldname, *newnamep);",
          "510:   goto out_err;",
          "513:   char ifname[IFNAMSIZ], *namep = ifname;",
          "515:    fprintf(stderr, \"Failed to get new netdev name\\n\");",
          "516:    goto out_err;",
          "520:    goto out_err;",
          "521:  }",
          "522:  if (setns(ofd, 0) < 0) {",
          "523:   fprintf(stderr, \"Error returning to original netns\\n\");",
          "524:   close(ofd);",
          "525:   return -1;",
          "527:  close(ofd);",
          "529:  return 0;",
          "531: out_err:",
          "532:  if (ofd >= 0)",
          "533:   close(ofd);",
          "534:  if (setns(ofd, 0) < 0)",
          "535:   fprintf(stderr, \"Error returning to original network namespace\\n\");",
          "538:  return -1;",
          "",
          "[Added Lines]",
          "485:  uid_t ruid, suid, euid;",
          "486:  int fret = -1;",
          "492:   goto do_partial_cleanup;",
          "495:   usernic_error(\"Failed opening network namespace path for '%d'.\", getpid());",
          "496:   goto do_partial_cleanup;",
          "501:   goto do_partial_cleanup;",
          "504:   usernic_error(\"Failed opening network namespace path for '%d'.\", pid);",
          "505:   goto do_partial_cleanup;",
          "508:  ret = getresuid(&ruid, &euid, &suid);",
          "509:  if (ret < 0) {",
          "510:   usernic_error(\"Failed to retrieve real, effective, and saved \"",
          "511:          \"user IDs: %s\\n\",",
          "512:          strerror(errno));",
          "513:   goto do_partial_cleanup;",
          "514:  }",
          "516:  ret = setns(fd, CLONE_NEWNET);",
          "517:  close(fd);",
          "518:  fd = -1;",
          "519:  if (ret < 0) {",
          "520:   usernic_error(\"Failed to setns() to the network namespace of \"",
          "521:          \"the container with PID %d: %s.\\n\",",
          "522:          pid, strerror(errno));",
          "523:   goto do_partial_cleanup;",
          "524:  }",
          "526:  ret = setresuid(ruid, ruid, 0);",
          "527:  if (ret < 0) {",
          "528:   usernic_error(\"Failed to drop privilege by setting effective \"",
          "529:          \"user id and real user id to %d, and saved user \"",
          "530:          \"ID to 0: %s.\\n\",",
          "531:          ruid, strerror(errno));",
          "535:   goto do_full_cleanup;",
          "542:   ifindex = if_nametoindex(oldname);",
          "543:   if (!ifindex) {",
          "544:    usernic_error(\"Failed to get netdev index: %s.\\n\",",
          "545:           strerror(errno));",
          "546:    goto do_full_cleanup;",
          "550:  ret = lxc_netdev_rename_by_name(oldname, *newnamep);",
          "551:  if (ret < 0) {",
          "552:   usernic_error(",
          "553:       \"Error %d renaming netdev %s to %s in container.\\n\", ret,",
          "554:       oldname, *newnamep);",
          "555:   goto do_full_cleanup;",
          "559:   char ifname[IFNAMSIZ];",
          "560:   char *namep = ifname;",
          "562:    usernic_error(\"Failed to get new netdev name: %s.\\n\",",
          "563:           strerror(errno));",
          "564:    goto do_full_cleanup;",
          "568:    goto do_full_cleanup;",
          "571:  fret = 0;",
          "573: do_full_cleanup:",
          "574:  ret = setresuid(ruid, euid, suid);",
          "575:  if (ret < 0) {",
          "576:   usernic_error(",
          "577:       \"Failed to restore privilege by setting effective \"",
          "578:       \"user id to %d, real user id to %d, and saved user \"",
          "579:       \"ID to %d: %s.\\n\",",
          "580:       ruid, euid, suid, strerror(errno));",
          "581:   fret = -1;",
          "585:  }",
          "587:  ret = setns(ofd, CLONE_NEWNET);",
          "588:  if (ret < 0) {",
          "589:   usernic_error(\"Failed to setns() to original network namespace \"",
          "590:          \"of PID %d: %s.\\n\",",
          "591:          ofd, strerror(errno));",
          "592:   fret = -1;",
          "593:  }",
          "595: do_partial_cleanup:",
          "598:  close(ofd);",
          "600:  return fret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c905f00ad78b78a5e9c0d67504b86e00dfe085ec",
      "candidate_info": {
        "commit_hash": "c905f00ad78b78a5e9c0d67504b86e00dfe085ec",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/c905f00ad78b78a5e9c0d67504b86e00dfe085ec",
        "files": [
          "src/lxc/lxc_user_nic.c"
        ],
        "message": "CVE-2017-5985: Ensure target netns is caller-owned\n\nBefore this commit, lxc-user-nic could potentially have been tricked into\noperating on a network namespace over which the caller did not hold privilege.\n\nThis commit ensures that the caller is privileged over the network namespace by\ntemporarily dropping privilege.\n\nLaunchpad: https://bugs.launchpad.net/ubuntu/+source/lxc/+bug/1654676\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include \"utils.h\"",
          "50: #include \"network.h\"",
          "52: static void usage(char *me, bool fail)",
          "53: {",
          "54:  fprintf(stderr, \"Usage: %s pid type bridge nicname\\n\", me);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #define usernic_debug_stream(stream, format, ...)                              \\",
          "53:  do {                                                                   \\",
          "54:   fprintf(stream, \"%s: %d: %s: \" format, __FILE__, __LINE__,     \\",
          "55:    __func__, __VA_ARGS__);                                \\",
          "56:  } while (false)",
          "58: #define usernic_error(format, ...) usernic_debug_stream(stderr, format, __VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473: static int rename_in_ns(int pid, char *oldname, char **newnamep)",
          "474: {",
          "475:  char nspath[MAXPATHLEN];",
          "476:  int fd = -1, ofd = -1, ret, ifindex = -1;",
          "477:  bool grab_newname = false;",
          "479:  ret = snprintf(nspath, MAXPATHLEN, \"/proc/%d/ns/net\", getpid());",
          "480:  if (ret < 0 || ret >= MAXPATHLEN)",
          "482:  if ((ofd = open(nspath, O_RDONLY)) < 0) {",
          "485:  }",
          "486:  ret = snprintf(nspath, MAXPATHLEN, \"/proc/%d/ns/net\", pid);",
          "487:  if (ret < 0 || ret >= MAXPATHLEN)",
          "490:  if ((fd = open(nspath, O_RDONLY)) < 0) {",
          "493:  }",
          "497:  }",
          "499:  if (!*newnamep) {",
          "500:   grab_newname = true;",
          "505:   }",
          "506:  }",
          "510:  }",
          "511:  if (grab_newname) {",
          "513:   if (!if_indextoname(ifindex, namep)) {",
          "516:   }",
          "518:   if (!*newnamep)",
          "525:  }",
          "535:  if (fd >= 0)",
          "536:   close(fd);",
          "538: }",
          "",
          "[Removed Lines]",
          "481:   return -1;",
          "483:   fprintf(stderr, \"Opening %s\\n\", nspath);",
          "484:   return -1;",
          "488:   goto out_err;",
          "491:   fprintf(stderr, \"Opening %s\\n\", nspath);",
          "492:   goto out_err;",
          "494:  if (setns(fd, 0) < 0) {",
          "495:   fprintf(stderr, \"setns to container network namespace\\n\");",
          "496:   goto out_err;",
          "498:  close(fd); fd = -1;",
          "502:   if (!(ifindex = if_nametoindex(oldname))) {",
          "503:    fprintf(stderr, \"failed to get netdev index\\n\");",
          "504:    goto out_err;",
          "507:  if ((ret = lxc_netdev_rename_by_name(oldname, *newnamep)) < 0) {",
          "508:   fprintf(stderr, \"Error %d renaming netdev %s to %s in container\\n\", ret, oldname, *newnamep);",
          "509:   goto out_err;",
          "512:   char ifname[IFNAMSIZ], *namep = ifname;",
          "514:    fprintf(stderr, \"Failed to get new netdev name\\n\");",
          "515:    goto out_err;",
          "519:    goto out_err;",
          "520:  }",
          "521:  if (setns(ofd, 0) < 0) {",
          "522:   fprintf(stderr, \"Error returning to original netns\\n\");",
          "523:   close(ofd);",
          "524:   return -1;",
          "526:  close(ofd);",
          "528:  return 0;",
          "530: out_err:",
          "531:  if (ofd >= 0)",
          "532:   close(ofd);",
          "533:  if (setns(ofd, 0) < 0)",
          "534:   fprintf(stderr, \"Error returning to original network namespace\\n\");",
          "537:  return -1;",
          "",
          "[Added Lines]",
          "484:  uid_t ruid, suid, euid;",
          "485:  int fret = -1;",
          "491:   goto do_partial_cleanup;",
          "494:   usernic_error(\"Failed opening network namespace path for '%d'.\", getpid());",
          "495:   goto do_partial_cleanup;",
          "500:   goto do_partial_cleanup;",
          "503:   usernic_error(\"Failed opening network namespace path for '%d'.\", pid);",
          "504:   goto do_partial_cleanup;",
          "507:  ret = getresuid(&ruid, &euid, &suid);",
          "508:  if (ret < 0) {",
          "509:   usernic_error(\"Failed to retrieve real, effective, and saved \"",
          "510:          \"user IDs: %s\\n\",",
          "511:          strerror(errno));",
          "512:   goto do_partial_cleanup;",
          "513:  }",
          "515:  ret = setns(fd, CLONE_NEWNET);",
          "516:  close(fd);",
          "517:  fd = -1;",
          "518:  if (ret < 0) {",
          "519:   usernic_error(\"Failed to setns() to the network namespace of \"",
          "520:          \"the container with PID %d: %s.\\n\",",
          "521:          pid, strerror(errno));",
          "522:   goto do_partial_cleanup;",
          "523:  }",
          "525:  ret = setresuid(ruid, ruid, 0);",
          "526:  if (ret < 0) {",
          "527:   usernic_error(\"Failed to drop privilege by setting effective \"",
          "528:          \"user id and real user id to %d, and saved user \"",
          "529:          \"ID to 0: %s.\\n\",",
          "530:          ruid, strerror(errno));",
          "534:   goto do_full_cleanup;",
          "541:   ifindex = if_nametoindex(oldname);",
          "542:   if (!ifindex) {",
          "543:    usernic_error(\"Failed to get netdev index: %s.\\n\",",
          "544:           strerror(errno));",
          "545:    goto do_full_cleanup;",
          "549:  ret = lxc_netdev_rename_by_name(oldname, *newnamep);",
          "550:  if (ret < 0) {",
          "551:   usernic_error(",
          "552:       \"Error %d renaming netdev %s to %s in container.\\n\", ret,",
          "553:       oldname, *newnamep);",
          "554:   goto do_full_cleanup;",
          "558:   char ifname[IFNAMSIZ];",
          "559:   char *namep = ifname;",
          "561:    usernic_error(\"Failed to get new netdev name: %s.\\n\",",
          "562:           strerror(errno));",
          "563:    goto do_full_cleanup;",
          "567:    goto do_full_cleanup;",
          "570:  fret = 0;",
          "572: do_full_cleanup:",
          "573:  ret = setresuid(ruid, euid, suid);",
          "574:  if (ret < 0) {",
          "575:   usernic_error(",
          "576:       \"Failed to restore privilege by setting effective \"",
          "577:       \"user id to %d, real user id to %d, and saved user \"",
          "578:       \"ID to %d: %s.\\n\",",
          "579:       ruid, euid, suid, strerror(errno));",
          "580:   fret = -1;",
          "584:  }",
          "586:  ret = setns(ofd, CLONE_NEWNET);",
          "587:  if (ret < 0) {",
          "588:   usernic_error(\"Failed to setns() to original network namespace \"",
          "589:          \"of PID %d: %s.\\n\",",
          "590:          ofd, strerror(errno));",
          "591:   fret = -1;",
          "592:  }",
          "594: do_partial_cleanup:",
          "597:  close(ofd);",
          "599:  return fret;",
          "",
          "---------------"
        ]
      }
    }
  ]
}