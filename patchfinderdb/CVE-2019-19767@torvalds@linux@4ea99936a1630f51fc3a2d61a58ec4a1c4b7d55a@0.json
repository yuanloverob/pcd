{
  "cve_id": "CVE-2019-19767",
  "cve_desc": "The Linux kernel before 5.4.2 mishandles ext4_expand_extra_isize, as demonstrated by use-after-free errors in __ext4_expand_extra_isize and ext4_xattr_set_entry, related to fs/ext4/inode.c and fs/ext4/super.c, aka CID-4ea99936a163.",
  "repo": "torvalds/linux",
  "patch_hash": "4ea99936a1630f51fc3a2d61a58ec4a1c4b7d55a",
  "patch_info": {
    "commit_hash": "4ea99936a1630f51fc3a2d61a58ec4a1c4b7d55a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/4ea99936a1630f51fc3a2d61a58ec4a1c4b7d55a",
    "files": [
      "fs/ext4/inode.c",
      "fs/ext4/super.c"
    ],
    "message": "ext4: add more paranoia checking in ext4_expand_extra_isize handling\n\nIt's possible to specify a non-zero s_want_extra_isize via debugging\noption, and this can cause bad things(tm) to happen when using a file\nsystem with an inode size of 128 bytes.\n\nAdd better checking when the file system is mounted, as well as when\nwe are actually doing the trying to do the inode expansion.\n\nLink: https://lore.kernel.org/r/20191110121510.GH23325@mit.edu\nReported-by: syzbot+f8d6f8386ceacdbfff57@syzkaller.appspotmail.com\nReported-by: syzbot+33d7ea72e47de3bdf4e1@syzkaller.appspotmail.com\nReported-by: syzbot+44b6763edfc17144296f@syzkaller.appspotmail.com\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nCc: stable@kernel.org",
    "before_after_code_files": [
      "fs/ext4/inode.c||fs/ext4/inode.c",
      "fs/ext4/super.c||fs/ext4/super.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/inode.c||fs/ext4/inode.c": [
      "File: fs/ext4/inode.c -> fs/ext4/inode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5569: {",
      "5570:  struct ext4_inode *raw_inode;",
      "5571:  struct ext4_xattr_ibody_header *header;",
      "5572:  int error;",
      "5574:  raw_inode = ext4_raw_inode(iloc);",
      "5576:  header = IHDR(inode, raw_inode);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5572:  unsigned int inode_size = EXT4_INODE_SIZE(inode->i_sb);",
      "5573:  struct ext4_inode_info *ei = EXT4_I(inode);",
      "5577:  if ((EXT4_GOOD_OLD_INODE_SIZE + ei->i_extra_isize > inode_size) ||",
      "5578:      (ei->i_extra_isize & 3)) {",
      "5579:   EXT4_ERROR_INODE(inode, \"bad extra_isize %u (inode size %u)\",",
      "5580:      ei->i_extra_isize,",
      "5581:      EXT4_INODE_SIZE(inode->i_sb));",
      "5582:   return -EFSCORRUPTED;",
      "5583:  }",
      "5584:  if ((new_extra_isize < ei->i_extra_isize) ||",
      "5585:      (new_extra_isize < 4) ||",
      "5586:      (new_extra_isize > inode_size - EXT4_GOOD_OLD_INODE_SIZE))",
      "",
      "---------------"
    ],
    "fs/ext4/super.c||fs/ext4/super.c": [
      "File: fs/ext4/super.c -> fs/ext4/super.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3545: {",
      "3546:  struct ext4_sb_info *sbi = EXT4_SB(sb);",
      "3547:  struct ext4_super_block *es = sbi->s_es;",
      "3554:   if (ext4_has_feature_extra_isize(sb)) {",
      "3555:    if (sbi->s_want_extra_isize <",
      "3556:        le16_to_cpu(es->s_want_extra_isize))",
      "",
      "[Removed Lines]",
      "3550:  if (sbi->s_inode_size > EXT4_GOOD_OLD_INODE_SIZE &&",
      "3551:      sbi->s_want_extra_isize == 0) {",
      "3552:   sbi->s_want_extra_isize = sizeof(struct ext4_inode) -",
      "3553:            EXT4_GOOD_OLD_INODE_SIZE;",
      "",
      "[Added Lines]",
      "3548:  unsigned def_extra_isize = sizeof(struct ext4_inode) -",
      "3549:       EXT4_GOOD_OLD_INODE_SIZE;",
      "3551:  if (sbi->s_inode_size == EXT4_GOOD_OLD_INODE_SIZE) {",
      "3552:   sbi->s_want_extra_isize = 0;",
      "3553:   return;",
      "3554:  }",
      "3555:  if (sbi->s_want_extra_isize < 4) {",
      "3556:   sbi->s_want_extra_isize = def_extra_isize;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3563:   }",
      "3564:  }",
      "3570:   ext4_msg(sb, KERN_INFO,",
      "3571:     \"required extra inode space not available\");",
      "3572:  }",
      "",
      "[Removed Lines]",
      "3566:  if (EXT4_GOOD_OLD_INODE_SIZE + sbi->s_want_extra_isize >",
      "3567:        sbi->s_inode_size) {",
      "3568:   sbi->s_want_extra_isize = sizeof(struct ext4_inode) -",
      "3569:              EXT4_GOOD_OLD_INODE_SIZE;",
      "",
      "[Added Lines]",
      "3569:  if ((sbi->s_want_extra_isize > sbi->s_inode_size) ||",
      "3570:      (EXT4_GOOD_OLD_INODE_SIZE + sbi->s_want_extra_isize >",
      "3571:        sbi->s_inode_size)) {",
      "3572:   sbi->s_want_extra_isize = def_extra_isize;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7bc04c5c2cc467c5b40f2b03ba08da174a0d5fa7",
      "candidate_info": {
        "commit_hash": "7bc04c5c2cc467c5b40f2b03ba08da174a0d5fa7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7bc04c5c2cc467c5b40f2b03ba08da174a0d5fa7",
        "files": [
          "fs/ext4/super.c"
        ],
        "message": "ext4: fix use-after-free race with debug_want_extra_isize\n\nWhen remounting with debug_want_extra_isize, we were not performing the\nsame checks that we do during a normal mount.  That allowed us to set a\nvalue for s_want_extra_isize that reached outside the s_inode_size.\n\nFixes: e2b911c53584 (\"ext4: clean up feature test macros with predicate functions\")\nReported-by: syzbot+f584efa0ac7213c226b7@syzkaller.appspotmail.com\nReviewed-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Barret Rhoden <brho@google.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nCc: stable@vger.kernel.org",
        "before_after_code_files": [
          "fs/ext4/super.c||fs/ext4/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/super.c||fs/ext4/super.c"
          ],
          "candidate": [
            "fs/ext4/super.c||fs/ext4/super.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/super.c||fs/ext4/super.c": [
          "File: fs/ext4/super.c -> fs/ext4/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3513:  return 0;",
          "3514: }",
          "3516: static void ext4_set_resv_clusters(struct super_block *sb)",
          "3517: {",
          "3518:  ext4_fsblk_t resv_clusters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3516: static void ext4_clamp_want_extra_isize(struct super_block *sb)",
          "3517: {",
          "3518:  struct ext4_sb_info *sbi = EXT4_SB(sb);",
          "3519:  struct ext4_super_block *es = sbi->s_es;",
          "3522:  if (sbi->s_inode_size > EXT4_GOOD_OLD_INODE_SIZE &&",
          "3523:      sbi->s_want_extra_isize == 0) {",
          "3524:   sbi->s_want_extra_isize = sizeof(struct ext4_inode) -",
          "3525:            EXT4_GOOD_OLD_INODE_SIZE;",
          "3526:   if (ext4_has_feature_extra_isize(sb)) {",
          "3527:    if (sbi->s_want_extra_isize <",
          "3528:        le16_to_cpu(es->s_want_extra_isize))",
          "3529:     sbi->s_want_extra_isize =",
          "3530:      le16_to_cpu(es->s_want_extra_isize);",
          "3531:    if (sbi->s_want_extra_isize <",
          "3532:        le16_to_cpu(es->s_min_extra_isize))",
          "3533:     sbi->s_want_extra_isize =",
          "3534:      le16_to_cpu(es->s_min_extra_isize);",
          "3535:   }",
          "3536:  }",
          "3538:  if (EXT4_GOOD_OLD_INODE_SIZE + sbi->s_want_extra_isize >",
          "3539:        sbi->s_inode_size) {",
          "3540:   sbi->s_want_extra_isize = sizeof(struct ext4_inode) -",
          "3541:              EXT4_GOOD_OLD_INODE_SIZE;",
          "3542:   ext4_msg(sb, KERN_INFO,",
          "3543:     \"required extra inode space not available\");",
          "3544:  }",
          "3545: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4387:  } else if (ret)",
          "4388:   goto failed_mount4a;",
          "4415:  ext4_set_resv_clusters(sb);",
          "",
          "[Removed Lines]",
          "4391:  if (sbi->s_inode_size > EXT4_GOOD_OLD_INODE_SIZE &&",
          "4392:      sbi->s_want_extra_isize == 0) {",
          "4393:   sbi->s_want_extra_isize = sizeof(struct ext4_inode) -",
          "4394:            EXT4_GOOD_OLD_INODE_SIZE;",
          "4395:   if (ext4_has_feature_extra_isize(sb)) {",
          "4396:    if (sbi->s_want_extra_isize <",
          "4397:        le16_to_cpu(es->s_want_extra_isize))",
          "4398:     sbi->s_want_extra_isize =",
          "4399:      le16_to_cpu(es->s_want_extra_isize);",
          "4400:    if (sbi->s_want_extra_isize <",
          "4401:        le16_to_cpu(es->s_min_extra_isize))",
          "4402:     sbi->s_want_extra_isize =",
          "4403:      le16_to_cpu(es->s_min_extra_isize);",
          "4404:   }",
          "4405:  }",
          "4407:  if (EXT4_GOOD_OLD_INODE_SIZE + sbi->s_want_extra_isize >",
          "4408:        sbi->s_inode_size) {",
          "4409:   sbi->s_want_extra_isize = sizeof(struct ext4_inode) -",
          "4410:              EXT4_GOOD_OLD_INODE_SIZE;",
          "4411:   ext4_msg(sb, KERN_INFO, \"required extra inode space not\"",
          "4412:     \"available\");",
          "4413:  }",
          "",
          "[Added Lines]",
          "4421:  ext4_clamp_want_extra_isize(sb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5194:   goto restore_opts;",
          "5195:  }",
          "5197:  if ((old_opts.s_mount_opt & EXT4_MOUNT_JOURNAL_CHECKSUM) ^",
          "5198:      test_opt(sb, JOURNAL_CHECKSUM)) {",
          "5199:   ext4_msg(sb, KERN_ERR, \"changing journal_checksum \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5205:  ext4_clamp_want_extra_isize(sb);",
          "",
          "---------------"
        ]
      }
    }
  ]
}