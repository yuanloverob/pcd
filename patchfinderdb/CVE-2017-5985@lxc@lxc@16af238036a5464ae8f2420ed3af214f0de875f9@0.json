{
  "cve_id": "CVE-2017-5985",
  "cve_desc": "lxc-user-nic in Linux Containers (LXC) allows local users with a lxc-usernet allocation to create network interfaces on the host and choose the name of those interfaces by leveraging lack of netns ownership check.",
  "repo": "lxc/lxc",
  "patch_hash": "16af238036a5464ae8f2420ed3af214f0de875f9",
  "patch_info": {
    "commit_hash": "16af238036a5464ae8f2420ed3af214f0de875f9",
    "repo": "lxc/lxc",
    "commit_url": "https://github.com/lxc/lxc/commit/16af238036a5464ae8f2420ed3af214f0de875f9",
    "files": [
      "src/lxc/lxc_user_nic.c"
    ],
    "message": "CVE-2017-5985: Ensure target netns is caller-owned\n\nBefore this commit, lxc-user-nic could potentially have been tricked into\noperating on a network namespace over which the caller did not hold privilege.\n\nThis commit ensures that the caller is privileged over the network namespace by\ntemporarily dropping privilege.\n\nLaunchpad: https://bugs.launchpad.net/ubuntu/+source/lxc/+bug/1654676\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
    "before_after_code_files": [
      "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
    ]
  },
  "patch_diff": {
    "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
      "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: #include \"utils.h\"",
      "51: #include \"network.h\"",
      "53: static void usage(char *me, bool fail)",
      "54: {",
      "55:  fprintf(stderr, \"Usage: %s lxcpath name pid type bridge nicname\\n\", me);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: #define usernic_debug_stream(stream, format, ...)                              \\",
      "54:  do {                                                                   \\",
      "55:   fprintf(stream, \"%s: %d: %s: \" format, __FILE__, __LINE__,     \\",
      "56:    __func__, __VA_ARGS__);                                \\",
      "57:  } while (false)",
      "59: #define usernic_error(format, ...) usernic_debug_stream(stderr, format, __VA_ARGS__)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "670: }",
      "672: #define VETH_DEF_NAME \"eth%d\"",
      "674: static int rename_in_ns(int pid, char *oldname, char **newnamep)",
      "675: {",
      "677:  bool grab_newname = false;",
      "679:  ofd = lxc_preserve_ns(getpid(), \"net\");",
      "680:  if (ofd < 0) {",
      "683:  }",
      "685:  fd = lxc_preserve_ns(pid, \"net\");",
      "686:  if (fd < 0) {",
      "689:  }",
      "694:  }",
      "696:  if (!*newnamep) {",
      "697:   grab_newname = true;",
      "702:   }",
      "703:  }",
      "707:  }",
      "708:  if (grab_newname) {",
      "710:   if (!if_indextoname(ifindex, namep)) {",
      "713:   }",
      "715:   if (!*newnamep)",
      "717:  }",
      "722:  }",
      "732:  if (fd >= 0)",
      "733:   close(fd);",
      "735: }",
      "",
      "[Removed Lines]",
      "676:  int fd = -1, ofd = -1, ret, ifindex = -1;",
      "681:   fprintf(stderr, \"Failed opening network namespace path for '%d'.\", getpid());",
      "682:   return -1;",
      "687:   fprintf(stderr, \"Failed opening network namespace path for '%d'.\", pid);",
      "688:   return -1;",
      "691:  if (setns(fd, 0) < 0) {",
      "692:   fprintf(stderr, \"setns to container network namespace\\n\");",
      "693:   goto out_err;",
      "695:  close(fd); fd = -1;",
      "699:   if (!(ifindex = if_nametoindex(oldname))) {",
      "700:    fprintf(stderr, \"failed to get netdev index\\n\");",
      "701:    goto out_err;",
      "704:  if ((ret = lxc_netdev_rename_by_name(oldname, *newnamep)) < 0) {",
      "705:   fprintf(stderr, \"Error %d renaming netdev %s to %s in container\\n\", ret, oldname, *newnamep);",
      "706:   goto out_err;",
      "709:   char ifname[IFNAMSIZ], *namep = ifname;",
      "711:    fprintf(stderr, \"Failed to get new netdev name\\n\");",
      "712:    goto out_err;",
      "716:    goto out_err;",
      "718:  if (setns(ofd, 0) < 0) {",
      "719:   fprintf(stderr, \"Error returning to original netns\\n\");",
      "720:   close(ofd);",
      "721:   return -1;",
      "723:  close(ofd);",
      "725:  return 0;",
      "727: out_err:",
      "728:  if (ofd >= 0)",
      "729:   close(ofd);",
      "730:  if (setns(ofd, 0) < 0)",
      "731:   fprintf(stderr, \"Error returning to original network namespace\\n\");",
      "734:  return -1;",
      "",
      "[Added Lines]",
      "683:  uid_t ruid, suid, euid;",
      "684:  int fret = -1;",
      "685:  int fd = -1, ifindex = -1, ofd = -1, ret;",
      "690:   usernic_error(\"Failed opening network namespace path for '%d'.\", getpid());",
      "691:   return fret;",
      "696:   usernic_error(\"Failed opening network namespace path for '%d'.\", pid);",
      "697:   goto do_partial_cleanup;",
      "700:  ret = getresuid(&ruid, &euid, &suid);",
      "701:  if (ret < 0) {",
      "702:   usernic_error(\"Failed to retrieve real, effective, and saved \"",
      "703:          \"user IDs: %s\\n\",",
      "704:          strerror(errno));",
      "705:   goto do_partial_cleanup;",
      "708:  ret = setns(fd, CLONE_NEWNET);",
      "709:  close(fd);",
      "710:  fd = -1;",
      "711:  if (ret < 0) {",
      "712:   usernic_error(\"Failed to setns() to the network namespace of \"",
      "713:          \"the container with PID %d: %s.\\n\",",
      "714:          pid, strerror(errno));",
      "715:   goto do_partial_cleanup;",
      "716:  }",
      "718:  ret = setresuid(ruid, ruid, 0);",
      "719:  if (ret < 0) {",
      "720:   usernic_error(\"Failed to drop privilege by setting effective \"",
      "721:          \"user id and real user id to %d, and saved user \"",
      "722:          \"ID to 0: %s.\\n\",",
      "723:          ruid, strerror(errno));",
      "727:   goto do_full_cleanup;",
      "728:  }",
      "734:   ifindex = if_nametoindex(oldname);",
      "735:   if (!ifindex) {",
      "736:    usernic_error(\"Failed to get netdev index: %s.\\n\", strerror(errno));",
      "737:    goto do_full_cleanup;",
      "741:  ret = lxc_netdev_rename_by_name(oldname, *newnamep);",
      "742:  if (ret < 0) {",
      "743:   usernic_error(\"Error %d renaming netdev %s to %s in container.\\n\", ret, oldname, *newnamep);",
      "744:   goto do_full_cleanup;",
      "748:   char ifname[IFNAMSIZ];",
      "749:   char *namep = ifname;",
      "752:    usernic_error(\"Failed to get new netdev name: %s.\\n\", strerror(errno));",
      "753:    goto do_full_cleanup;",
      "758:    goto do_full_cleanup;",
      "761:  fret = 0;",
      "763: do_full_cleanup:",
      "764:  ret = setresuid(ruid, euid, suid);",
      "765:  if (ret < 0) {",
      "766:   usernic_error(\"Failed to restore privilege by setting effective \"",
      "767:          \"user id to %d, real user id to %d, and saved user \"",
      "768:          \"ID to %d: %s.\\n\",",
      "769:          ruid, euid, suid, strerror(errno));",
      "770:   fret = -1;",
      "776:  ret = setns(ofd, CLONE_NEWNET);",
      "777:  if (ret < 0) {",
      "778:   usernic_error(\"Failed to setns() to original network namespace \"",
      "779:          \"of PID %d: %s.\\n\",",
      "780:          ofd, strerror(errno));",
      "781:   fret = -1;",
      "782:  }",
      "784: do_partial_cleanup:",
      "787:  close(ofd);",
      "789:  return fret;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e771c51d9fb8cd3aa4ab88a87a52f00142973bce",
      "candidate_info": {
        "commit_hash": "e771c51d9fb8cd3aa4ab88a87a52f00142973bce",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/e771c51d9fb8cd3aa4ab88a87a52f00142973bce",
        "files": [
          "src/lxc/lxc_user_nic.c"
        ],
        "message": "lxc-user-nic: non-functional changes\n\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  fd = open(path, O_RDWR|O_CREAT, S_IWUSR | S_IRUSR);",
          "75:  if (fd < 0) {",
          "77:   return -1;",
          "78:  }",
          "",
          "[Removed Lines]",
          "76:   usernic_error(\"Failed to open %s: %s.\\n\", path, strerror(errno));",
          "",
          "[Added Lines]",
          "76:   usernic_error(\"Failed to open %s: %s\\n\", path, strerror(errno));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:  lk.l_start = 0;",
          "83:  lk.l_len = 0;",
          "84:  if (fcntl(fd, F_SETLKW, &lk) < 0) {",
          "86:   close(fd);",
          "87:   return -1;",
          "88:  }",
          "",
          "[Removed Lines]",
          "85:   usernic_error(\"Failed to lock %s: %s.\\n\", path, strerror(errno));",
          "",
          "[Added Lines]",
          "85:   usernic_error(\"Failed to lock %s: %s\\n\", path, strerror(errno));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:  pwd = getpwuid(getuid());",
          "99:  if (!pwd) {",
          "101:   return NULL;",
          "102:  }",
          "",
          "[Removed Lines]",
          "100:   usernic_error(\"Failed to call get username: %s.\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "100:   usernic_error(\"Failed to call get username: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:  ngroups = getgroups(0, NULL);",
          "129:  if (ngroups < 0) {",
          "130:   usernic_error(",
          "132:       strerror(errno));",
          "133:   return NULL;",
          "134:  }",
          "",
          "[Removed Lines]",
          "131:       \"Failed to get number of groups the user belongs to: %s.\\n\",",
          "",
          "[Added Lines]",
          "131:       \"Failed to get number of groups the user belongs to: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:  group_ids = malloc(sizeof(gid_t) * ngroups);",
          "139:  if (!group_ids) {",
          "140:   usernic_error(\"Failed to allocate memory while getting groups \"",
          "142:          strerror(errno));",
          "143:   return NULL;",
          "144:  }",
          "",
          "[Removed Lines]",
          "141:          \"the user belongs to: %s.\\n\",",
          "",
          "[Added Lines]",
          "141:          \"the user belongs to: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146:  ret = getgroups(ngroups, group_ids);",
          "147:  if (ret < 0) {",
          "148:   free(group_ids);",
          "150:          strerror(errno));",
          "151:   return NULL;",
          "152:  }",
          "",
          "[Removed Lines]",
          "149:   usernic_error(\"Failed to get process groups: %s.\\n\",",
          "",
          "[Added Lines]",
          "149:   usernic_error(\"Failed to get process groups: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "155:  if (!groupnames) {",
          "156:   free(group_ids);",
          "157:   usernic_error(\"Failed to allocate memory while getting group \"",
          "159:          strerror(errno));",
          "160:   return NULL;",
          "161:  }",
          "",
          "[Removed Lines]",
          "158:          \"names: %s.\\n\",",
          "",
          "[Added Lines]",
          "158:          \"names: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "165:  for (i = 0; i < ngroups; i++) {",
          "166:   gr = getgrgid(group_ids[i]);",
          "167:   if (!gr) {",
          "169:           strerror(errno));",
          "170:    free(group_ids);",
          "171:    free_groupnames(groupnames);",
          "",
          "[Removed Lines]",
          "168:    usernic_error(\"Failed to get group name: %s.\\n\",",
          "",
          "[Added Lines]",
          "168:    usernic_error(\"Failed to get group name: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "175:   groupnames[i] = strdup(gr->gr_name);",
          "176:   if (!groupnames[i]) {",
          "178:           gr->gr_name);",
          "179:    free(group_ids);",
          "180:    free_groupnames(groupnames);",
          "",
          "[Removed Lines]",
          "177:    usernic_error(\"Failed to copy group name \\\"%s\\\".\",",
          "",
          "[Added Lines]",
          "177:    usernic_error(\"Failed to copy group name \\\"%s\\\"\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "210:  if (!head || !name) {",
          "213:   return NULL;",
          "214:  }",
          "216:  al = malloc(sizeof(struct alloted_s));",
          "217:  if (!al) {",
          "219:   return NULL;",
          "220:  }",
          "",
          "[Removed Lines]",
          "212:   usernic_error(\"%s\\n\", \"Unexpected NULL argument.\");",
          "218:   usernic_error(\"Failed to allocate memory: %s.\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "212:   usernic_error(\"%s\\n\", \"Unexpected NULL argument\");",
          "218:   usernic_error(\"Failed to allocate memory: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "280:  fin = fopen(LXC_USERNIC_CONF, \"r\");",
          "281:  if (!fin) {",
          "283:   return -1;",
          "284:  }",
          "",
          "[Removed Lines]",
          "282:   usernic_error(\"Failed to open \\\"%s\\\": %s.\\n\", LXC_USERNIC_CONF, strerror(errno));",
          "",
          "[Added Lines]",
          "282:   usernic_error(\"Failed to open \\\"%s\\\": %s\\n\", LXC_USERNIC_CONF, strerror(errno));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "412:  err = snprintf(*n2, IFNAMSIZ, \"%sp\", n1);",
          "413:  if (err < 0 || err >= IFNAMSIZ) {",
          "415:   return -1;",
          "416:  }",
          "",
          "[Removed Lines]",
          "414:   usernic_error(\"%s\\n\", \"Could not create nic name.\");",
          "",
          "[Added Lines]",
          "414:   usernic_error(\"%s\\n\", \"Could not create nic name\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "427:  err = setup_private_host_hw_addr(n1);",
          "428:  if (err)",
          "429:   usernic_error(\"Failed to change mac address of host interface \"",
          "431:          n1, strerror(-err));",
          "433:  return netdev_set_flag(n1, IFF_UP);",
          "",
          "[Removed Lines]",
          "430:          \"%s : %s.\\n\",",
          "",
          "[Added Lines]",
          "430:          \"%s : %s\\n\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "449:  veth1buf = alloca(IFNAMSIZ);",
          "450:  veth2buf = alloca(IFNAMSIZ);",
          "451:  if (!veth1buf || !veth2buf) {",
          "453:   return false;",
          "454:  }",
          "456:  ret = snprintf(veth1buf, IFNAMSIZ, \"%s\", nic);",
          "457:  if (ret < 0 || ret >= IFNAMSIZ) {",
          "459:   return false;",
          "460:  }",
          "463:  if (instantiate_veth(veth1buf, &veth2buf) < 0) {",
          "465:   return false;",
          "466:  }",
          "",
          "[Removed Lines]",
          "452:   usernic_error(\"Failed allocate memory: %s.\\n\", strerror(errno));",
          "458:   usernic_error(\"%s\", \"Could not create nic name.\\n\");",
          "464:   usernic_error(\"%s\", \"Error creating veth tunnel.\\n\");",
          "",
          "[Added Lines]",
          "452:   usernic_error(\"Failed allocate memory: %s\\n\", strerror(errno));",
          "458:   usernic_error(\"%s\", \"Could not create nic name\\n\");",
          "464:   usernic_error(\"%s\", \"Error creating veth tunnel\\n\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "471:   if (mtu > 0) {",
          "472:    ret = lxc_netdev_set_mtu(veth1buf, mtu);",
          "473:    if (ret < 0) {",
          "475:     goto out_del;",
          "476:    }",
          "478:    ret = lxc_netdev_set_mtu(veth2buf, mtu);",
          "479:    if (ret < 0) {",
          "481:     goto out_del;",
          "482:    }",
          "483:   }",
          "",
          "[Removed Lines]",
          "474:     usernic_error(\"Failed to set mtu to %d on %s.\\n\", mtu, veth1buf);",
          "480:     usernic_error(\"Failed to set mtu to %d on %s.\\n\", mtu, veth2buf);",
          "",
          "[Added Lines]",
          "474:     usernic_error(\"Failed to set mtu to %d on %s\\n\", mtu, veth1buf);",
          "480:     usernic_error(\"Failed to set mtu to %d on %s\\n\", mtu, veth2buf);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "486:   ret = lxc_bridge_attach(lxcpath, lxcname, br, veth1buf);",
          "487:   if (ret < 0) {",
          "489:    goto out_del;",
          "490:   }",
          "491:  }",
          "",
          "[Removed Lines]",
          "488:    usernic_error(\"Error attaching %s to %s.\\n\", veth1buf, br);",
          "",
          "[Added Lines]",
          "488:    usernic_error(\"Error attaching %s to %s\\n\", veth1buf, br);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "494:  ret = lxc_netdev_move_by_name(veth2buf, pid, NULL);",
          "495:  if (ret < 0) {",
          "497:   goto out_del;",
          "498:  }",
          "501:  if (!*cnic) {",
          "503:   return false;",
          "504:  }",
          "",
          "[Removed Lines]",
          "496:   usernic_error(\"Error moving %s to network namespace of %d.\\n\", veth2buf, pid);",
          "502:   usernic_error(\"Failed to copy string \\\"%s\\\".\\n\", veth2buf);",
          "",
          "[Added Lines]",
          "496:   usernic_error(\"Error moving %s to network namespace of %d\\n\", veth2buf, pid);",
          "502:   usernic_error(\"Failed to copy string \\\"%s\\\"\\n\", veth2buf);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "562:   return false;",
          "564:  if (fstat(fd, &sb) < 0) {",
          "566:   return false;",
          "567:  }",
          "",
          "[Removed Lines]",
          "565:   usernic_error(\"Failed to fstat: %s.\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "565:   usernic_error(\"Failed to fstat: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "573:  buf = mmap(NULL, len, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);",
          "574:  if (buf == MAP_FAILED) {",
          "576:   return false;",
          "577:  }",
          "",
          "[Removed Lines]",
          "575:   usernic_error(\"Failed to establish shared memory mapping: %s.\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "575:   usernic_error(\"Failed to establish shared memory mapping: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "618:  munmap(buf, sb.st_size);",
          "619:  if (ftruncate(fd, p - buf))",
          "622:  return true;",
          "623: }",
          "",
          "[Removed Lines]",
          "620:   usernic_error(\"Failed to set new file size: %s.\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "620:   usernic_error(\"Failed to set new file size: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "663:  owner = names->name;",
          "665:  if (fstat(fd, &sb) < 0) {",
          "667:   return false;",
          "668:  }",
          "",
          "[Removed Lines]",
          "666:   usernic_error(\"Failed to fstat: %s.\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "666:   usernic_error(\"Failed to fstat: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "671:  if (len > 0) {",
          "672:   buf = mmap(NULL, len, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);",
          "673:   if (buf == MAP_FAILED) {",
          "675:    return false;",
          "676:   }",
          "",
          "[Removed Lines]",
          "674:    usernic_error(\"Failed to establish shared memory mapping: %s.\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "674:    usernic_error(\"Failed to establish shared memory mapping: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "697:  slen = strlen(owner) + strlen(intype) + strlen(br) + strlen(*nicname) + 5;",
          "698:  newline = alloca(slen);",
          "699:  if (!newline) {",
          "701:   return false;",
          "702:  }",
          "704:  ret = snprintf(newline, slen, \"%s %s %s %s\\n\", owner, intype, br, *nicname);",
          "705:  if (ret < 0 || ret >= slen) {",
          "706:   if (lxc_netdev_delete_by_name(*nicname) != 0)",
          "708:   return false;",
          "709:  }",
          "710:  if (len)",
          "711:   munmap(buf, len);",
          "713:  if (ftruncate(fd, len + slen))",
          "716:  buf = mmap(NULL, len + slen, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);",
          "717:  if (buf == MAP_FAILED) {",
          "719:   if (lxc_netdev_delete_by_name(*nicname) != 0)",
          "721:   return false;",
          "722:  }",
          "",
          "[Removed Lines]",
          "700:   usernic_error(\"Failed allocate memory: %s.\\n\", strerror(errno));",
          "707:    usernic_error(\"Error unlinking %s.\\n\", *nicname);",
          "714:   usernic_error(\"Failed to set new file size: %s.\\n\", strerror(errno));",
          "718:   usernic_error(\"Failed to establish shared memory mapping: %s.\\n\", strerror(errno));",
          "720:    usernic_error(\"Error unlinking %s.\\n\", *nicname);",
          "",
          "[Added Lines]",
          "700:   usernic_error(\"Failed allocate memory: %s\\n\", strerror(errno));",
          "707:    usernic_error(\"Error unlinking %s\\n\", *nicname);",
          "714:   usernic_error(\"Failed to set new file size: %s\\n\", strerror(errno));",
          "718:   usernic_error(\"Failed to establish shared memory mapping: %s\\n\", strerror(errno));",
          "720:    usernic_error(\"Error unlinking %s\\n\", *nicname);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "746:  if (mkdir(fnam, 0755) && errno != EEXIST) {",
          "749:   return false;",
          "750:  }",
          "",
          "[Removed Lines]",
          "747:   usernic_error(\"Failed to create %s: %s.\\n\", fnam, strerror(errno));",
          "",
          "[Added Lines]",
          "747:   usernic_error(\"Failed to create %s: %s\\n\", fnam, strerror(errno));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "764:  ofd = lxc_preserve_ns(getpid(), \"net\");",
          "765:  if (ofd < 0) {",
          "767:   return fret;",
          "768:  }",
          "770:  fd = lxc_preserve_ns(pid, \"net\");",
          "771:  if (fd < 0) {",
          "773:   goto do_partial_cleanup;",
          "774:  }",
          "",
          "[Removed Lines]",
          "766:   usernic_error(\"Failed opening network namespace path for '%d'.\", getpid());",
          "772:   usernic_error(\"Failed opening network namespace path for '%d'.\", pid);",
          "",
          "[Added Lines]",
          "766:   usernic_error(\"Failed opening network namespace path for %d\", getpid());",
          "772:   usernic_error(\"Failed opening network namespace path for %d\", pid);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "786:  fd = -1;",
          "787:  if (ret < 0) {",
          "788:   usernic_error(\"Failed to setns() to the network namespace of \"",
          "790:          pid, strerror(errno));",
          "791:   goto do_partial_cleanup;",
          "792:  }",
          "",
          "[Removed Lines]",
          "789:          \"the container with PID %d: %s.\\n\",",
          "",
          "[Added Lines]",
          "789:          \"the container with PID %d: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "795:  if (ret < 0) {",
          "796:   usernic_error(\"Failed to drop privilege by setting effective \"",
          "797:          \"user id and real user id to %d, and saved user \"",
          "799:          ruid, strerror(errno));",
          "",
          "[Removed Lines]",
          "798:          \"ID to 0: %s.\\n\",",
          "",
          "[Added Lines]",
          "798:          \"ID to 0: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "811:   ifindex = if_nametoindex(oldname);",
          "812:   if (!ifindex) {",
          "814:    goto do_full_cleanup;",
          "815:   }",
          "816:  }",
          "818:  ret = lxc_netdev_rename_by_name(oldname, *newnamep);",
          "819:  if (ret < 0) {",
          "821:   goto do_full_cleanup;",
          "822:  }",
          "",
          "[Removed Lines]",
          "813:    usernic_error(\"Failed to get netdev index: %s.\\n\", strerror(errno));",
          "820:   usernic_error(\"Error %d renaming netdev %s to %s in container.\\n\", ret, oldname, *newnamep);",
          "",
          "[Added Lines]",
          "813:    usernic_error(\"Failed to get netdev index: %s\\n\", strerror(errno));",
          "820:   usernic_error(\"Error %d renaming netdev %s to %s in container\\n\", ret, oldname, *newnamep);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "826:   char *namep = ifname;",
          "828:   if (!if_indextoname(ifindex, namep)) {",
          "830:    goto do_full_cleanup;",
          "831:   }",
          "",
          "[Removed Lines]",
          "829:    usernic_error(\"Failed to get new netdev name: %s.\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "829:    usernic_error(\"Failed to get new netdev name: %s\\n\", strerror(errno));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "842:  if (ret < 0) {",
          "843:   usernic_error(\"Failed to restore privilege by setting effective \"",
          "844:          \"user id to %d, real user id to %d, and saved user \"",
          "846:          ruid, euid, suid, strerror(errno));",
          "847:   fret = -1;",
          "848:  }",
          "",
          "[Removed Lines]",
          "845:          \"ID to %d: %s.\\n\",",
          "",
          "[Added Lines]",
          "845:          \"ID to %d: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "850:  ret = setns(ofd, CLONE_NEWNET);",
          "851:  if (ret < 0) {",
          "852:   usernic_error(\"Failed to setns() to original network namespace \"",
          "854:          ofd, strerror(errno));",
          "855:   fret = -1;",
          "856:  }",
          "",
          "[Removed Lines]",
          "853:          \"of PID %d: %s.\\n\",",
          "",
          "[Added Lines]",
          "853:          \"of PID %d: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "885:  if (ret < 0) {",
          "886:   usernic_error(\"Failed to drop privilege by setting effective \"",
          "887:          \"user id and real user id to %d, and saved user \"",
          "889:          ruid, euid, strerror(errno));",
          "890:   return false;",
          "891:  }",
          "",
          "[Removed Lines]",
          "888:          \"ID to %d: %s.\\n\",",
          "",
          "[Added Lines]",
          "888:          \"ID to %d: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "904:  ret = setresuid(ruid, euid, suid);",
          "905:  if (ret < 0) {",
          "906:   usernic_error(\"Failed to restore user id to %d, real user id \"",
          "908:          ruid, euid, suid, strerror(errno));",
          "909:   may_access = false;",
          "910:  }",
          "",
          "[Removed Lines]",
          "907:          \"to %d, and saved user ID to %d: %s.\\n\",",
          "",
          "[Added Lines]",
          "907:          \"to %d, and saved user ID to %d: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "926:  nicname = alloca(40);",
          "927:  if (!nicname) {",
          "929:   exit(EXIT_FAILURE);",
          "930:  }",
          "933:  if (clearenv() < 0) {",
          "935:   exit(EXIT_FAILURE);",
          "936:  }",
          "937:  if (setenv(\"PATH\", \"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\", 1) < 0) {",
          "939:   exit(EXIT_FAILURE);",
          "940:  }",
          "941:  if ((me = get_username()) == NULL) {",
          "943:   exit(EXIT_FAILURE);",
          "944:  }",
          "",
          "[Removed Lines]",
          "928:   usernic_error(\"Failed allocate memory: %s.\\n\", strerror(errno));",
          "934:   usernic_error(\"%s\", \"Failed to clear environment.\\n\");",
          "938:   usernic_error(\"%s\", \"Failed to set PATH, exiting.\\n\");",
          "942:   usernic_error(\"%s\", \"Failed to get username.\\n\");",
          "",
          "[Added Lines]",
          "928:   usernic_error(\"Failed allocate memory: %s\\n\", strerror(errno));",
          "934:   usernic_error(\"%s\", \"Failed to clear environment\\n\");",
          "938:   usernic_error(\"%s\", \"Failed to set PATH, exiting\\n\");",
          "942:   usernic_error(\"%s\", \"Failed to get username\\n\");",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "955:  errno = 0;",
          "956:  pid = strtol(argv[3], NULL, 10);",
          "957:  if (errno) {",
          "959:   exit(EXIT_FAILURE);",
          "960:  }",
          "962:  if (!create_db_dir(LXC_USERNIC_DB)) {",
          "964:   exit(EXIT_FAILURE);",
          "965:  }",
          "967:  if ((fd = open_and_lock(LXC_USERNIC_DB)) < 0) {",
          "969:   exit(EXIT_FAILURE);",
          "970:  }",
          "972:  if (!may_access_netns(pid)) {",
          "974:   exit(EXIT_FAILURE);",
          "975:  }",
          "",
          "[Removed Lines]",
          "958:   usernic_error(\"Could not read pid: %s.\\n\", argv[1]);",
          "963:   usernic_error(\"%s\", \"Failed to create directory for db file.\\n\");",
          "968:   usernic_error(\"Failed to lock %s.\\n\", LXC_USERNIC_DB);",
          "973:   usernic_error(\"User %s may not modify netns for pid %d.\\n\", me, pid);",
          "",
          "[Added Lines]",
          "958:   usernic_error(\"Could not read pid: %s\\n\", argv[1]);",
          "963:   usernic_error(\"%s\", \"Failed to create directory for db file\\n\");",
          "968:   usernic_error(\"Failed to lock %s\\n\", LXC_USERNIC_DB);",
          "973:   usernic_error(\"User %s may not modify netns for pid %d\\n\", me, pid);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "981:  close(fd);",
          "982:  free_alloted(&alloted);",
          "983:  if (!gotone) {",
          "985:   exit(EXIT_FAILURE);",
          "986:  }",
          "989:  if (rename_in_ns(pid, cnic, &vethname) < 0) {",
          "991:   if (lxc_netdev_delete_by_name(cnic) < 0)",
          "993:   exit(EXIT_FAILURE);",
          "994:  }",
          "",
          "[Removed Lines]",
          "984:   usernic_error(\"%s\", \"Quota reached.\\n\");",
          "990:   usernic_error(\"%s\", \"Failed to rename the link.\\n\");",
          "992:    usernic_error(\"Failed to delete link \\\"%s\\\" the link. Manual cleanup needed.\\n\", cnic);",
          "",
          "[Added Lines]",
          "984:   usernic_error(\"%s\", \"Quota reached\\n\");",
          "990:   usernic_error(\"%s\", \"Failed to rename the link\\n\");",
          "992:    usernic_error(\"Failed to delete link \\\"%s\\\" the link. Manual cleanup needed\\n\", cnic);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a055595ca6ebc0d7b64b3b0fcd454a9443a044b9",
      "candidate_info": {
        "commit_hash": "a055595ca6ebc0d7b64b3b0fcd454a9443a044b9",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/a055595ca6ebc0d7b64b3b0fcd454a9443a044b9",
        "files": [
          "src/lxc/conf.c",
          "src/lxc/conf.h",
          "src/lxc/lxc_user_nic.c"
        ],
        "message": "network: delete ovs for unprivileged networks\n\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/conf.c||src/lxc/conf.c",
          "src/lxc/conf.h||src/lxc/conf.h",
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/conf.c||src/lxc/conf.c": [
          "File: src/lxc/conf.c -> src/lxc/conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3221:   }",
          "3225:   if (netdev->type != LXC_NET_VETH)",
          "3226:    continue;",
          "3229:    continue;",
          "",
          "[Removed Lines]",
          "3210:   ret = lxc_netdev_delete_by_index(netdev->ifindex);",
          "3211:   if (-ret == ENODEV) {",
          "3212:    INFO(\"Interface \\\"%s\\\" with index %d already deleted \"",
          "3213:         \"or existing in different network namespace\",",
          "3214:         netdev->name ? netdev->name : \"(null)\", netdev->ifindex);",
          "3215:   } else if (ret < 0) {",
          "3216:    deleted_all = false;",
          "3217:    WARN(\"Failed to remove interface \\\"%s\\\" with index %d: \"",
          "3218:         \"%s\", netdev->name ? netdev->name : \"(null)\",",
          "3219:         netdev->ifindex, strerror(-ret));",
          "3220:    continue;",
          "3222:   INFO(\"Removed interface \\\"%s\\\" with index %d\",",
          "3223:        netdev->name ? netdev->name : \"(null)\", netdev->ifindex);",
          "3228:   if (am_unpriv())",
          "",
          "[Added Lines]",
          "3210:   if (!am_unpriv()) {",
          "3211:    ret = lxc_netdev_delete_by_index(netdev->ifindex);",
          "3212:    if (-ret == ENODEV) {",
          "3213:     INFO(\"Interface \\\"%s\\\" with index %d already \"",
          "3214:          \"deleted or existing in different network \"",
          "3215:          \"namespace\",",
          "3216:          netdev->name ? netdev->name : \"(null)\",",
          "3217:          netdev->ifindex);",
          "3218:    } else if (ret < 0) {",
          "3219:     deleted_all = false;",
          "3220:     WARN(\"Failed to remove interface \\\"%s\\\" with \"",
          "3221:          \"index %d: %s\",",
          "3222:          netdev->name ? netdev->name : \"(null)\",",
          "3223:          netdev->ifindex, strerror(-ret));",
          "3224:     continue;",
          "3225:    }",
          "3226:    INFO(\"Removed interface \\\"%s\\\" with index %d\",",
          "3227:         netdev->name ? netdev->name : \"(null)\",",
          "3228:         netdev->ifindex);",
          "3234:   if (am_unpriv()) {",
          "3235:    if (is_ovs_bridge(netdev->link)) {",
          "3236:     ret = lxc_unpriv_delete_nic(handler->lxcpath,",
          "3237:            handler->name, \"ovs\",",
          "3238:            netdev, getpid());",
          "3239:     if (ret < 0)",
          "3240:      WARN(\"Failed to remove port \\\"%s\\\" \"",
          "3241:           \"from openvswitch bridge \\\"%s\\\"\",",
          "3242:           netdev->priv.veth_attr.pair,",
          "3243:           netdev->link);",
          "3244:    }",
          "3247:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5125:  return result;",
          "5126: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5146: int lxc_unpriv_delete_nic(const char *lxcpath, char *lxcname, char *type,",
          "5147:      struct lxc_netdev *netdev, pid_t pid)",
          "5148: {",
          "5149:  pid_t child;",
          "5150:  int bytes, pipefd[2];",
          "5151:  char netdev_link[IFNAMSIZ + 1];",
          "5152:  char buffer[MAX_BUFFER_SIZE] = {0};",
          "5154:  if (netdev->type != LXC_NET_VETH) {",
          "5155:   ERROR(\"nic type %d not support for unprivileged use\",",
          "5156:         netdev->type);",
          "5157:   return -1;",
          "5158:  }",
          "5160:  if (pipe(pipefd) < 0) {",
          "5161:   SYSERROR(\"pipe failed\");",
          "5162:   return -1;",
          "5163:  }",
          "5165:  child = fork();",
          "5166:  if (child < 0) {",
          "5167:   SYSERROR(\"fork\");",
          "5168:   close(pipefd[0]);",
          "5169:   close(pipefd[1]);",
          "5170:   return -1;",
          "5171:  }",
          "5175:   int ret;",
          "5176:   char pidstr[LXC_NUMSTRLEN64];",
          "5181:   ret = dup2(pipefd[1], STDOUT_FILENO);",
          "5182:   if (ret >= 0)",
          "5183:    ret = dup2(pipefd[1], STDERR_FILENO);",
          "5185:   if (ret < 0) {",
          "5186:    SYSERROR(\"Failed to dup2() to redirect stdout to pipe file descriptor.\");",
          "5187:    exit(EXIT_FAILURE);",
          "5188:   }",
          "5190:   if (netdev->link)",
          "5191:    strncpy(netdev_link, netdev->link, IFNAMSIZ);",
          "5192:   else",
          "5193:    strncpy(netdev_link, \"none\", IFNAMSIZ);",
          "5195:   ret = snprintf(pidstr, LXC_NUMSTRLEN64, \"%d\", pid);",
          "5196:   if (ret < 0 || ret >= LXC_NUMSTRLEN64)",
          "5197:    exit(EXIT_FAILURE);",
          "5198:   pidstr[LXC_NUMSTRLEN64 - 1] = '\\0';",
          "5200:   INFO(\"Execing lxc-user-nic delete %s %s %s ovs %s %s\", lxcpath,",
          "5201:        lxcname, pidstr, netdev_link, netdev->priv.veth_attr.pair);",
          "5202:   execlp(LXC_USERNIC_PATH, LXC_USERNIC_PATH, \"delete\", lxcpath,",
          "5203:          lxcname, pidstr, \"ovs\", netdev_link,",
          "5204:          netdev->priv.veth_attr.pair, (char *)NULL);",
          "5205:   SYSERROR(\"Failed to exec lxc-user-nic.\");",
          "5206:   exit(EXIT_FAILURE);",
          "5207:  }",
          "5210:  close(pipefd[1]);",
          "5212:  bytes = read(pipefd[0], &buffer, MAX_BUFFER_SIZE);",
          "5213:  if (bytes < 0) {",
          "5214:   SYSERROR(\"Failed to read from pipe file descriptor.\");",
          "5215:   close(pipefd[0]);",
          "5216:   return -1;",
          "5217:  }",
          "5218:  buffer[bytes - 1] = '\\0';",
          "5220:  if (wait_for_pid(child) != 0) {",
          "5221:   ERROR(\"lxc-user-nic failed to delete requested network: %s\",",
          "5222:         buffer[0] != '\\0' ? buffer : \"(null)\");",
          "5223:   close(pipefd[0]);",
          "5224:   return -1;",
          "5225:  }",
          "5226:  TRACE(\"Received output \\\"%s\\\" from lxc-user-nic\", buffer);",
          "5229:  close(pipefd[0]);",
          "5231:  return 0;",
          "5232: }",
          "",
          "---------------"
        ],
        "src/lxc/conf.h||src/lxc/conf.h": [
          "File: src/lxc/conf.h -> src/lxc/conf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "500: extern struct lxc_list *sort_cgroup_settings(struct lxc_list *cgroup_settings);",
          "501: extern unsigned long add_required_remount_flags(const char *s, const char *d,",
          "502:       unsigned long flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503: extern int lxc_unpriv_delete_nic(const char *lxcpath, char *lxcname, char *type,",
          "504:      struct lxc_netdev *netdev, pid_t pid);",
          "",
          "---------------"
        ],
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "836:   name = \"eth%d\";",
          "838:  ret = lxc_netdev_rename_by_name(oldname, name);",
          "839:  if (ret < 0) {",
          "840:   usernic_error(\"Error %d renaming netdev %s to %s in container\\n\",",
          "842:   goto do_full_cleanup;",
          "843:  }",
          "",
          "[Removed Lines]",
          "841:          ret, oldname, name);",
          "",
          "[Added Lines]",
          "839:  name = NULL;",
          "842:          ret, oldname, newname ? newname : \"eth%d\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1007:   exit(EXIT_FAILURE);",
          "1008:  }",
          "1010:  n = get_alloted(me, args.type, args.link, &alloted);",
          "1011:  if (n > 0)",
          "1012:   nicname = get_nic_if_avail(fd, alloted, pid, args.type,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:  if (!strcmp(args.cmd, \"delete\")) {",
          "1012:   close(fd);",
          "1014:   if (strcmp(args.type, \"ovs\")) {",
          "1015:    usernic_error(\"%s\", \"Deletion of non ovs type network \"",
          "1016:          \"devics not implemented\\n\");",
          "1017:    exit(EXIT_FAILURE);",
          "1018:   }",
          "1020:   ret = lxc_ovs_delete_port(args.link, args.veth_name);",
          "1021:   if (ret < 0) {",
          "1022:    usernic_error(\"Failed to remove port \\\"%s\\\" from \"",
          "1023:           \"openvswitch bridge \\\"%s\\\"\",",
          "1024:           args.veth_name, args.link);",
          "1025:    exit(EXIT_FAILURE);",
          "1026:   }",
          "1027:   exit(EXIT_SUCCESS);",
          "1028:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d04811edfe9b9ef9aac6fb645560202575b96b8",
      "candidate_info": {
        "commit_hash": "5d04811edfe9b9ef9aac6fb645560202575b96b8",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/5d04811edfe9b9ef9aac6fb645560202575b96b8",
        "files": [
          "src/lxc/lxc_user_nic.c"
        ],
        "message": "lxc_user_nic: use lxc_preserve_ns()\n\nSigned-off-by: Christian Brauner <christian.brauner@canonical.com>",
        "before_after_code_files": [
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "674: static int rename_in_ns(int pid, char *oldname, char **newnamep)",
          "675: {",
          "677:  int fd = -1, ofd = -1, ret, ifindex = -1;",
          "678:  bool grab_newname = false;",
          "685:   return -1;",
          "686:  }",
          "694:  }",
          "695:  if (setns(fd, 0) < 0) {",
          "696:   fprintf(stderr, \"setns to container network namespace\\n\");",
          "697:   goto out_err;",
          "",
          "[Removed Lines]",
          "676:  char nspath[MAXPATHLEN];",
          "680:  ret = snprintf(nspath, MAXPATHLEN, \"/proc/%d/ns/net\", getpid());",
          "681:  if (ret < 0 || ret >= MAXPATHLEN)",
          "682:   return -1;",
          "683:  if ((ofd = open(nspath, O_RDONLY)) < 0) {",
          "684:   fprintf(stderr, \"Opening %s\\n\", nspath);",
          "687:  ret = snprintf(nspath, MAXPATHLEN, \"/proc/%d/ns/net\", pid);",
          "688:  if (ret < 0 || ret >= MAXPATHLEN)",
          "689:   goto out_err;",
          "691:  if ((fd = open(nspath, O_RDONLY)) < 0) {",
          "692:   fprintf(stderr, \"Opening %s\\n\", nspath);",
          "693:   goto out_err;",
          "",
          "[Added Lines]",
          "679:  ofd = lxc_preserve_ns(getpid(), \"net\");",
          "680:  if (ofd < 0) {",
          "681:   fprintf(stderr, \"Failed opening network namespace path for '%d'.\", getpid());",
          "685:  fd = lxc_preserve_ns(pid, \"net\");",
          "686:  if (fd < 0) {",
          "687:   fprintf(stderr, \"Failed opening network namespace path for '%d'.\", pid);",
          "688:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74c6e2b015147f345f144a23fcee2eee86c0534e",
      "candidate_info": {
        "commit_hash": "74c6e2b015147f345f144a23fcee2eee86c0534e",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/74c6e2b015147f345f144a23fcee2eee86c0534e",
        "files": [
          "src/lxc/lxc_user_nic.c",
          "src/lxc/network.c",
          "src/lxc/network.h",
          "src/lxc/start.c"
        ],
        "message": "network: rework network creation\n\n- On unprivileged veth network creation have lxc-user-nic send the names of the\n  veth devices and their respective ifindeces. The advantage of retrieving this\n  information from lxc-user-nic is that we spare us sending around more stuff\n  via the netpipe in start.c. Also, lxc-user-nic operates in both namespaces\n  (the container's namespace and the hosts's namespace) via setns and so is\n  guaranteed to retrieve the correct ifindex via if_nametoindex() which is an\n  network namespace aware ioctl() call. While I'm pretty sure the ifindeces for\n  veth devices are identical across network namespaces I'm weary to rely on\n  this. We need the ifindexes to guarantee safe deletion of unprivileged\n  network devices via lxc-user-nic later on since we use them to identify the\n  network devices in their corresponding network namespaces.\n- Move the network device logging from the child to the parent. The child does\n  not have all of the information about the network devices available only the\n  few bits it actually needs to now. The monitor process is the only process\n  that needs all this information.\n- The network creation code for privileged and unprivileged networks was\n  previously mangled into one single function but at the same time some of the\n  privileged code had additional functions that were called in other places in\n  start.c. Let's divide and conquer and split out the privileged and\n  unprivileged network creation into completely separate functions. This makes\n  what's happening way more clear. This will also have no performance impact\n  since either you are privileged and only execute the privileged network\n  creation functions or you are unprivileged and only execute the unprivileged\n  network creation functions.\n\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c",
          "src/lxc/network.c||src/lxc/network.c",
          "src/lxc/network.h||src/lxc/network.h",
          "src/lxc/start.c||src/lxc/start.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "797: }",
          "799: static char *lxc_secure_rename_in_ns(int pid, char *oldname, char *newname,",
          "801: {",
          "802:  int ret;",
          "803:  uid_t ruid, suid, euid;",
          "",
          "[Removed Lines]",
          "800:          int *ifidx)",
          "",
          "[Added Lines]",
          "800:          int *container_veth_ifidx)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1054: int main(int argc, char *argv[])",
          "1055: {",
          "1057:  char *me, *newname;",
          "1058:  struct user_nic_args args;",
          "1059:  int netns_fd = -1;",
          "",
          "[Removed Lines]",
          "1056:  int fd, ifindex, n, pid, request, ret;",
          "",
          "[Added Lines]",
          "1056:  int container_veth_ifidx, fd, host_veth_ifidx, n, pid, request, ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1204:  }",
          "1208:  if (!newname) {",
          "1209:   usernic_error(\"%s\", \"Failed to rename the link\\n\");",
          "1210:   ret = lxc_netdev_delete_by_name(cnic);",
          "",
          "[Removed Lines]",
          "1207:  newname = lxc_secure_rename_in_ns(pid, cnic, args.veth_name, &ifindex);",
          "",
          "[Added Lines]",
          "1207:  newname = lxc_secure_rename_in_ns(pid, cnic, args.veth_name,",
          "1208:        &container_veth_ifidx);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1213:   free(nicname);",
          "1214:   exit(EXIT_FAILURE);",
          "1215:  }",
          "1219:  free(newname);",
          "1220:  free(nicname);",
          "1221:  exit(EXIT_SUCCESS);",
          "",
          "[Removed Lines]",
          "1218:  fprintf(stdout, \"%s:%s:%d\\n\", newname, nicname, ifindex);",
          "",
          "[Added Lines]",
          "1217:  host_veth_ifidx = if_nametoindex(nicname);",
          "1222:  fprintf(stdout, \"%s:%d:%s:%d\\n\", newname, container_veth_ifidx, nicname,",
          "1223:   host_veth_ifidx);",
          "",
          "---------------"
        ],
        "src/lxc/network.c||src/lxc/network.c": [
          "File: src/lxc/network.c -> src/lxc/network.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #include \"conf.h\"",
          "49: #include \"config.h\"",
          "51: #include \"log.h\"",
          "52: #include \"network.h\"",
          "53: #include \"nl.h\"",
          "",
          "[Removed Lines]",
          "50: #include \"confile_utils.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2033: }",
          "2035: #define LXC_USERNIC_PATH LIBEXECDIR \"/lxc/lxc-user-nic\"",
          "2038: {",
          "2039:  int ret;",
          "2040:  pid_t child;",
          "",
          "[Removed Lines]",
          "2036: static int lxc_create_network_unpriv(const char *lxcpath, char *lxcname,",
          "2037:          struct lxc_netdev *netdev, pid_t pid)",
          "",
          "[Added Lines]",
          "2035: static int lxc_create_network_unpriv_exec(const char *lxcpath, char *lxcname,",
          "2036:        struct lxc_netdev *netdev, pid_t pid)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2108:  bytes = read(pipefd[0], &buffer, MAXPATHLEN);",
          "2109:  if (bytes < 0) {",
          "2111:   close(pipefd[0]);",
          "2112:   return -1;",
          "2113:  }",
          "",
          "[Removed Lines]",
          "2110:   SYSERROR(\"Failed to read from pipe file descriptor.\");",
          "",
          "[Added Lines]",
          "2109:   SYSERROR(\"Failed to read from pipe file descriptor\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2126:  token = strtok_r(buffer, \":\", &saveptr);",
          "2128:   return -1;",
          "2130:  netdev->name = malloc(IFNAMSIZ + 1);",
          "2131:  if (!netdev->name) {",
          "2133:   return -1;",
          "2134:  }",
          "2135:  memset(netdev->name, 0, IFNAMSIZ + 1);",
          "2136:  strncpy(netdev->name, token, IFNAMSIZ);",
          "2139:  token = strtok_r(NULL, \":\", &saveptr);",
          "2141:   return -1;",
          "2146:   return -1;",
          "2147:  }",
          "2150:  token = strtok_r(NULL, \":\", &saveptr);",
          "2152:   return -1;",
          "2155:  if (ret < 0) {",
          "2157:   return -1;",
          "2158:  }",
          "",
          "[Removed Lines]",
          "2127:  if (!token)",
          "2132:   SYSERROR(\"Failed to allocate memory.\");",
          "2140:  if (!token)",
          "2143:  netdev->priv.veth_attr.pair = strdup(token);",
          "2144:  if (!netdev->priv.veth_attr.pair) {",
          "2145:   ERROR(\"Failed to allocate memory.\");",
          "2151:  if (!token)",
          "2154:  ret = lxc_safe_int(token, &netdev->ifindex);",
          "2156:   ERROR(\"Failed to parse ifindex for network device \\\"%s\\\"\", netdev->name);",
          "",
          "[Added Lines]",
          "2126:  if (!token) {",
          "2127:   ERROR(\"Failed to parse lxc-user-nic output\");",
          "2129:  }",
          "2133:   SYSERROR(\"Failed to allocate memory\");",
          "2141:  if (!token) {",
          "2142:   ERROR(\"Failed to parse lxc-user-nic output\");",
          "2144:  }",
          "2146:  ret = lxc_safe_int(token, &netdev->ifindex);",
          "2147:  if (ret < 0) {",
          "2148:   ERROR(\"%s - Failed to convert string \\\"%s\\\" to integer\",",
          "2149:         strerror(-ret), token);",
          "2155:  if (!token) {",
          "2156:   ERROR(\"Failed to parse lxc-user-nic output\");",
          "2158:  }",
          "2160:  if (strlen(token) >= IFNAMSIZ) {",
          "2161:   ERROR(\"Host side veth device name returned by lxc-user-nic is \"",
          "2162:         \"too long\");",
          "2163:   return -E2BIG;",
          "2164:  }",
          "2165:  strcpy(netdev->priv.veth_attr.veth1, token);",
          "2168:  token = strtok_r(NULL, \":\", &saveptr);",
          "2169:  if (!token) {",
          "2170:   ERROR(\"Failed to parse lxc-user-nic output\");",
          "2171:   return -1;",
          "2172:  }",
          "2174:  ret = lxc_safe_int(token, &netdev->priv.veth_attr.ifindex);",
          "2176:   ERROR(\"%s - Failed to convert string \\\"%s\\\" to integer\",",
          "2177:         strerror(-ret), token);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2202:    exit(EXIT_FAILURE);",
          "2203:   }",
          "2206:    SYSERROR(\"Network link for network device \\\"%s\\\" is \"",
          "2209:   INFO(\"Execing lxc-user-nic delete %s %s %s veth %s %s\", lxcpath,",
          "2211:   execlp(LXC_USERNIC_PATH, LXC_USERNIC_PATH, \"delete\", lxcpath,",
          "2212:          lxcname, netns_path, \"veth\", netdev->link,",
          "2214:   SYSERROR(\"Failed to exec lxc-user-nic.\");",
          "2215:   exit(EXIT_FAILURE);",
          "2216:  }",
          "",
          "[Removed Lines]",
          "2205:   if (!netdev->link)",
          "2207:      \"missing\", netdev->priv.veth_attr.pair);",
          "2210:        lxcname, netns_path, netdev->link, netdev->priv.veth_attr.pair);",
          "2213:          netdev->priv.veth_attr.pair, (char *)NULL);",
          "",
          "[Added Lines]",
          "2226:   if (netdev->priv.veth_attr.veth1[0] == '\\0') {",
          "2227:    SYSERROR(\"Host side veth device name is missing\");",
          "2228:    exit(EXIT_FAILURE);",
          "2229:   }",
          "2231:   if (!netdev->link) {",
          "2233:      \"missing\", netdev->priv.veth_attr.veth1);",
          "2234:    exit(EXIT_FAILURE);",
          "2235:   }",
          "2238:        lxcname, netns_path, netdev->link, netdev->priv.veth_attr.veth1);",
          "2241:          netdev->priv.veth_attr.veth1, (char *)NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2312:    deleted_all = false;",
          "2313:    WARN(\"Failed to remove port \\\"%s\\\" from openvswitch \"",
          "2314:         \"bridge \\\"%s\\\"\",",
          "2316:    continue;",
          "2317:   }",
          "2318:   INFO(\"Removed interface \\\"%s\\\" from \\\"%s\\\"\", hostveth,",
          "",
          "[Removed Lines]",
          "2315:         netdev->priv.veth_attr.pair, netdev->link);",
          "",
          "[Added Lines]",
          "2343:         netdev->priv.veth_attr.veth1, netdev->link);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2351:  return 0;",
          "2352: }",
          "2356: {",
          "2357:  int err;",
          "2359:  char ifname[IFNAMSIZ];",
          "2360:  struct lxc_list *iterator;",
          "2364:  lxc_list_for_each(iterator, network) {",
          "2365:   struct lxc_netdev *netdev = iterator->elem;",
          "2381:   if (!netdev->ifindex)",
          "2382:    continue;",
          "",
          "[Removed Lines]",
          "2354: int lxc_create_network(const char *lxcpath, char *lxcname,",
          "2355:          struct lxc_list *network, pid_t pid)",
          "2358:  bool am_root;",
          "2362:  am_root = (getuid() == 0);",
          "2367:   if (netdev->type == LXC_NET_VETH && !am_root) {",
          "2368:    if (netdev->mtu)",
          "2369:     INFO(\"mtu ignored due to insufficient privilege\");",
          "2370:    if (lxc_create_network_unpriv(lxcpath, lxcname, netdev, pid))",
          "2371:     return -1;",
          "2377:    continue;",
          "2378:   }",
          "",
          "[Added Lines]",
          "2382: int lxc_network_move_created_netdev_priv(const char *lxcpath, char *lxcname,",
          "2383:       struct lxc_list *network, pid_t pid)",
          "2389:  if (am_unpriv())",
          "2390:   return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2404:  return 0;",
          "2405: }",
          "2407: bool lxc_delete_network_priv(struct lxc_handler *handler)",
          "2408: {",
          "2409:  int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2421: int lxc_create_network_unpriv(const char *lxcpath, char *lxcname,",
          "2422:          struct lxc_list *network, pid_t pid)",
          "2423: {",
          "2424:  struct lxc_list *iterator;",
          "2426:  if (!am_unpriv())",
          "2427:   return 0;",
          "2429:  lxc_list_for_each(iterator, network) {",
          "2430:   struct lxc_netdev *netdev = iterator->elem;",
          "2432:   if (netdev->type == LXC_NET_EMPTY)",
          "2433:    continue;",
          "2435:   if (netdev->type == LXC_NET_NONE)",
          "2436:    continue;",
          "2438:   if (netdev->type != LXC_NET_VETH) {",
          "2439:    ERROR(\"Networks of type %s are not supported by \"",
          "2440:          \"unprivileged containers\",",
          "2441:          lxc_net_type_to_str(netdev->type));",
          "2442:    return -1;",
          "2443:   }",
          "2445:   if (netdev->mtu)",
          "2446:    INFO(\"mtu ignored due to insufficient privilege\");",
          "2448:   if (lxc_create_network_unpriv_exec(lxcpath, lxcname, netdev, pid))",
          "2449:    return -1;",
          "2450:  }",
          "2452:  return 0;",
          "2453: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2854:   }",
          "2855:  }",
          "2859:  return 0;",
          "2860: }",
          "",
          "[Removed Lines]",
          "2857:  DEBUG(\"Network devie \\\"%s\\\" has been setup\", current_ifname);",
          "",
          "[Added Lines]",
          "2905:  DEBUG(\"Network device \\\"%s\\\" has been setup\", current_ifname);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2865:  struct lxc_list *iterator;",
          "2866:  struct lxc_netdev *netdev;",
          "2870:  lxc_list_for_each(iterator, network) {",
          "2871:   netdev = iterator->elem;",
          "",
          "[Removed Lines]",
          "2868:  lxc_log_configured_netdevs(conf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lxc/network.h||src/lxc/network.h": [
          "File: src/lxc/network.h -> src/lxc/network.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: extern int setup_private_host_hw_addr(char *veth1);",
          "259: extern int netdev_get_mtu(int ifindex);",
          "260: extern int lxc_create_network_priv(struct lxc_handler *handler);",
          "261: extern bool lxc_delete_network_priv(struct lxc_handler *handler);",
          "262: extern bool lxc_delete_network_unpriv(struct lxc_handler *handler);",
          "263: extern int lxc_find_gateway_addresses(struct lxc_handler *handler);",
          "266: extern int lxc_requests_empty_network(struct lxc_handler *handler);",
          "267: extern void lxc_restore_phys_nics_to_netns(int netnsfd, struct lxc_conf *conf);",
          "268: extern int lxc_setup_network_in_child_namespaces(const struct lxc_conf *conf,",
          "",
          "[Removed Lines]",
          "264: extern int lxc_create_network(const char *lxcpath, char *lxcname,",
          "265:          struct lxc_list *network, pid_t pid);",
          "",
          "[Added Lines]",
          "261: extern int lxc_network_move_created_netdev_priv(const char *lxcpath,",
          "262:       char *lxcname,",
          "263:       struct lxc_list *network,",
          "264:       pid_t pid);",
          "268: extern int lxc_create_network_unpriv(const char *lxcpath, char *lxcname,",
          "269:          struct lxc_list *network, pid_t pid);",
          "",
          "---------------"
        ],
        "src/lxc/start.c||src/lxc/start.c": [
          "File: src/lxc/start.c -> src/lxc/start.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #include \"commands.h\"",
          "69: #include \"commands_utils.h\"",
          "70: #include \"conf.h\"",
          "71: #include \"console.h\"",
          "72: #include \"error.h\"",
          "73: #include \"log.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: #include \"confile_utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "810:  if (netpipe == -1)",
          "811:   return 0;",
          "812:  lxc_list_for_each(iterator, network) {",
          "813:   netdev = iterator->elem;",
          "814:   if (netdev->type != LXC_NET_VETH)",
          "815:    continue;",
          "817:    ERROR(\"Out of memory.\");",
          "818:    close(netpipe);",
          "819:    return -1;",
          "820:   }",
          "821:   if (read(netpipe, netdev->name, IFNAMSIZ) != IFNAMSIZ) {",
          "822:    close(netpipe);",
          "823:    return -1;",
          "",
          "[Removed Lines]",
          "816:   if (!(netdev->name = malloc(IFNAMSIZ))) {",
          "",
          "[Added Lines]",
          "819:   netdev->name = malloc(IFNAMSIZ);",
          "820:   if (!netdev->name) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1374:  if (handler->clone_flags & CLONE_NEWNET) {",
          "1377:    ERROR(\"Failed to create the configured network.\");",
          "1378:    goto out_delete_net;",
          "1379:   }",
          "1380:  }",
          "1382:  if (netpipe != -1) {",
          "",
          "[Removed Lines]",
          "1375:   if (lxc_create_network(handler->lxcpath, handler->name,",
          "1376:            &handler->conf->network, handler->pid)) {",
          "",
          "[Added Lines]",
          "1380:   if (lxc_network_move_created_netdev_priv(handler->lxcpath,",
          "1381:         handler->name,",
          "1382:         &handler->conf->network,",
          "1383:         handler->pid)) {",
          "1388:   if (lxc_create_network_unpriv(handler->lxcpath, handler->name,",
          "1389:            &handler->conf->network,",
          "1390:            handler->pid)) {",
          "1391:    ERROR(\"Failed to create the configured network.\");",
          "1392:    goto out_delete_net;",
          "1393:   }",
          "1399:   lxc_log_configured_netdevs(handler->conf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c92dfebd9eb246e1b0e159e41e903f66aeac5274",
      "candidate_info": {
        "commit_hash": "c92dfebd9eb246e1b0e159e41e903f66aeac5274",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/c92dfebd9eb246e1b0e159e41e903f66aeac5274",
        "files": [
          "src/lxc/lxc_user_nic.c"
        ],
        "message": "lxc-user-nic: rework renaming net devices\n\nThis should make things a little less convoluted.\n\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ],
          "candidate": [
            "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/lxc_user_nic.c||src/lxc/lxc_user_nic.c": [
          "File: src/lxc/lxc_user_nic.c -> src/lxc/lxc_user_nic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "767:  goto again;",
          "768: }",
          "772: {",
          "773:  uid_t ruid, suid, euid;",
          "778:  ofd = lxc_preserve_ns(getpid(), \"net\");",
          "779:  if (ofd < 0) {",
          "780:   usernic_error(\"Failed opening network namespace path for %d\", getpid());",
          "782:  }",
          "784:  fd = lxc_preserve_ns(pid, \"net\");",
          "",
          "[Removed Lines]",
          "770: #define VETH_DEF_NAME \"eth%d\"",
          "771: static int rename_in_ns(int pid, char *oldname, char **newnamep)",
          "774:  int fret = -1;",
          "775:  int fd = -1, ifindex = -1, ofd = -1, ret;",
          "776:  bool grab_newname = false;",
          "781:   return fret;",
          "",
          "[Added Lines]",
          "770: static char *lxc_secure_rename_in_ns(int pid, char *oldname, char *newname)",
          "772:  int ret;",
          "774:  char ifname[IFNAMSIZ];",
          "775:  char *string_ret = NULL, *name = NULL;",
          "776:  int fd = -1, ifindex = -1, ofd = -1;",
          "781:   return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "818:   goto do_full_cleanup;",
          "819:  }",
          "830:  }",
          "833:  if (ret < 0) {",
          "835:   goto do_full_cleanup;",
          "836:  }",
          "850:  }",
          "854: do_full_cleanup:",
          "855:  ret = setresuid(ruid, euid, suid);",
          "856:  if (ret < 0) {",
          "862:  }",
          "864:  ret = setns(ofd, CLONE_NEWNET);",
          "865:  if (ret < 0) {",
          "866:   usernic_error(\"Failed to setns() to original network namespace \"",
          "870:  }",
          "872: do_partial_cleanup:",
          "873:  if (fd >= 0)",
          "874:   close(fd);",
          "875:  close(ofd);",
          "878: }",
          "",
          "[Removed Lines]",
          "821:  if (!*newnamep) {",
          "822:   grab_newname = true;",
          "825:   ifindex = if_nametoindex(oldname);",
          "826:   if (!ifindex) {",
          "827:    usernic_error(\"Failed to get netdev index: %s\\n\", strerror(errno));",
          "828:    goto do_full_cleanup;",
          "829:   }",
          "832:  ret = lxc_netdev_rename_by_name(oldname, *newnamep);",
          "834:   usernic_error(\"Error %d renaming netdev %s to %s in container\\n\", ret, oldname, *newnamep);",
          "838:  if (grab_newname) {",
          "839:   char ifname[IFNAMSIZ];",
          "840:   char *namep = ifname;",
          "842:   if (!if_indextoname(ifindex, namep)) {",
          "843:    usernic_error(\"Failed to get new netdev name: %s\\n\", strerror(errno));",
          "844:    goto do_full_cleanup;",
          "845:   }",
          "848:   if (!*newnamep)",
          "849:    goto do_full_cleanup;",
          "852:  fret = 0;",
          "857:   usernic_error(\"Failed to restore privilege by setting effective \"",
          "858:          \"user id to %d, real user id to %d, and saved user \"",
          "859:          \"ID to %d: %s\\n\",",
          "860:          ruid, euid, suid, strerror(errno));",
          "861:   fret = -1;",
          "867:          \"of PID %d: %s\\n\",",
          "868:          ofd, strerror(errno));",
          "869:   fret = -1;",
          "877:  return fret;",
          "",
          "[Added Lines]",
          "822:  ifindex = if_nametoindex(oldname);",
          "823:  if (!ifindex) {",
          "824:   usernic_error(\"Failed to get netdev index: %s\\n\", strerror(errno));",
          "825:   goto do_full_cleanup;",
          "832:  if (newname)",
          "833:   name = newname;",
          "834:  else",
          "835:   name = \"eth%d\";",
          "837:  ret = lxc_netdev_rename_by_name(oldname, name);",
          "839:   usernic_error(\"Error %d renaming netdev %s to %s in container\\n\",",
          "840:          ret, oldname, name);",
          "845:  if (!if_indextoname(ifindex, ifname)) {",
          "846:   usernic_error(\"Failed to get new netdev name: %s\\n\", strerror(errno));",
          "847:   goto do_full_cleanup;",
          "851:  name = strdup(ifname);",
          "852:  string_ret = name;",
          "857:   usernic_error(\"Failed to restore privilege by setting \"",
          "858:          \"effective user id to %d, real user id to %d, \"",
          "859:          \"and saved user ID to %d: %s\\n\", ruid, euid, suid,",
          "860:          strerror(errno));",
          "862:   string_ret = NULL;",
          "868:          \"of PID %d: %s\\n\", ofd, strerror(errno));",
          "870:   string_ret = NULL;",
          "877:  if (!string_ret && name)",
          "878:   free(name);",
          "882:  return string_ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "939: int main(int argc, char *argv[])",
          "940: {",
          "941:  int fd, n, pid, ret;",
          "943:  char *cnic = NULL, *nicname = NULL;",
          "944:  struct alloted_s *alloted = NULL;",
          "945:  struct user_nic_args args;",
          "",
          "[Removed Lines]",
          "942:  char *me;",
          "",
          "[Added Lines]",
          "947:  char *me, *newname;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1013:  }",
          "1018:   usernic_error(\"%s\", \"Failed to rename the link\\n\");",
          "1019:   ret = lxc_netdev_delete_by_name(cnic);",
          "1020:   if (ret < 0)",
          "",
          "[Removed Lines]",
          "1016:  ret = rename_in_ns(pid, cnic, &args.veth_name);",
          "1017:  if (ret < 0) {",
          "",
          "[Added Lines]",
          "1021:  newname = lxc_secure_rename_in_ns(pid, cnic, args.veth_name);",
          "1022:  if (!newname) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1024:  }",
          "1028:  free(nicname);",
          "1029:  exit(EXIT_SUCCESS);",
          "1030: }",
          "",
          "[Removed Lines]",
          "1027:  fprintf(stdout, \"%s:%s\\n\", args.veth_name, nicname);",
          "",
          "[Added Lines]",
          "1032:  fprintf(stdout, \"%s:%s\\n\", newname, nicname);",
          "1033:  free(newname);",
          "",
          "---------------"
        ]
      }
    }
  ]
}