{
  "cve_id": "CVE-2017-2609",
  "cve_desc": "jenkins before versions 2.44, 2.32.2 is vulnerable to an information disclosure vulnerability in search suggestions (SECURITY-385). The autocomplete feature on the search box discloses the names of the views in its suggestions, including the ones for which the current user does not have access to.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "246a0fa90a05b729eaabca6d697016015f622e57",
  "patch_info": {
    "commit_hash": "246a0fa90a05b729eaabca6d697016015f622e57",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/246a0fa90a05b729eaabca6d697016015f622e57",
    "files": [
      "core/src/main/java/jenkins/model/Jenkins.java",
      "test/src/test/java/hudson/search/SearchTest.java"
    ],
    "message": "[FIX SECURITY-385] Only suggest visible views in search",
    "before_after_code_files": [
      "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
      "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
      "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1887:             })",
      "1888:             .add(new CollectionSearchIndex() {// for views",
      "1889:                 protected View get(String key) { return getView(key); }",
      "1891:             });",
      "1892:     }",
      "",
      "[Removed Lines]",
      "1890:                 protected Collection<View> all() { return views; }",
      "",
      "[Added Lines]",
      "1890:                 protected Collection<View> all() { return viewGroupMixIn.getViews(); }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/search/SearchTest.java||test/src/test/java/hudson/search/SearchTest.java": [
      "File: test/src/test/java/hudson/search/SearchTest.java -> test/src/test/java/hudson/search/SearchTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: import hudson.model.FreeStyleProject;",
      "33: import hudson.model.ListView;",
      "35: import java.net.URL;",
      "37: import java.util.ArrayList;",
      "38: import java.util.List;",
      "40: import net.sf.json.JSONArray;",
      "41: import net.sf.json.JSONObject;",
      "42: import net.sf.json.JSONSerializer;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: import java.io.IOException;",
      "41: import hudson.model.User;",
      "42: import hudson.model.View;",
      "43: import hudson.security.ACL;",
      "44: import hudson.security.AuthorizationStrategy;",
      "45: import hudson.security.GlobalMatrixAuthorizationStrategy;",
      "46: import jenkins.model.Jenkins;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "379:         assertTrue(suggest(j.jenkins.getSearchIndex(),\"foo\").contains(p));",
      "380:     }",
      "382:     @Test",
      "383:     public void testSearchWithinFolders() throws Exception {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "389:     @Issue(\"SECURITY-385\")",
      "390:     @Test",
      "391:     public void testInaccessibleViews() throws IOException {",
      "392:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
      "393:         GlobalMatrixAuthorizationStrategy strategy = new GlobalMatrixAuthorizationStrategy();",
      "394:         strategy.add(Jenkins.READ, \"alice\");",
      "395:         j.jenkins.setAuthorizationStrategy(strategy);",
      "397:         j.jenkins.addView(new ListView(\"foo\", j.jenkins));",
      "400:         assertEquals(\"two views exist\", 2, Jenkins.getInstance().getViews().size());",
      "401:         List<SearchItem> results = new ArrayList<>();",
      "402:         j.jenkins.getSearchIndex().suggest(\"foo\", results);",
      "403:         assertEquals(\"nonempty results list\", 1, results.size());",
      "407:         assertFalse(\"no permission\", j.jenkins.getView(\"foo\").getACL().hasPermission(User.get(\"alice\").impersonate(), View.READ));",
      "408:         ACL.impersonate(User.get(\"alice\").impersonate(), new Runnable() {",
      "409:             @Override",
      "410:             public void run() {",
      "411:                 assertEquals(\"no visible views\", 0, Jenkins.getInstance().getViews().size());",
      "413:                 List<SearchItem> results = new ArrayList<>();",
      "414:                 j.jenkins.getSearchIndex().suggest(\"foo\", results);",
      "415:                 assertEquals(\"empty results list\", 0, results.size());",
      "416:             }",
      "417:         });",
      "418:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51e46505b9748258925af248beebee8a5f0a6b6b",
      "candidate_info": {
        "commit_hash": "51e46505b9748258925af248beebee8a5f0a6b6b",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/51e46505b9748258925af248beebee8a5f0a6b6b",
        "files": [
          "core/src/main/java/hudson/model/ViewGroup.java",
          "core/src/main/java/hudson/model/ViewGroupMixIn.java",
          "core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/test/java/hudson/model/ViewTest.java",
          "test/src/test/java/hudson/model/ViewTest.java"
        ],
        "message": "[JENKINS-43322] Nested views searchable by name",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/ViewGroup.java||core/src/main/java/hudson/model/ViewGroup.java",
          "core/src/main/java/hudson/model/ViewGroupMixIn.java||core/src/main/java/hudson/model/ViewGroupMixIn.java",
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/test/java/hudson/model/ViewTest.java||core/src/test/java/hudson/model/ViewTest.java",
          "test/src/test/java/hudson/model/ViewTest.java||test/src/test/java/hudson/model/ViewTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/ViewGroup.java||core/src/main/java/hudson/model/ViewGroup.java": [
          "File: core/src/main/java/hudson/model/ViewGroup.java -> core/src/main/java/hudson/model/ViewGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import java.io.IOException;",
          "31: import java.util.Collection;",
          "32: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import java.util.LinkedHashSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     Collection<View> getViews();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     default Collection<View> getAllViews() {",
          "70:         final Collection<View> views = new LinkedHashSet<>(getViews());",
          "72:         for (View view : getViews()) {",
          "73:             if (view instanceof ViewGroup) {",
          "74:                 views.addAll(((ViewGroup) view).getAllViews());",
          "75:             }",
          "76:         }",
          "78:         return views;",
          "79:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/ViewGroupMixIn.java||core/src/main/java/hudson/model/ViewGroupMixIn.java": [
          "File: core/src/main/java/hudson/model/ViewGroupMixIn.java -> core/src/main/java/hudson/model/ViewGroupMixIn.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     }",
          "94:     public View getView(String name) {",
          "97:                 return v;",
          "98:         }",
          "99:         if (name != null && !name.equals(primaryView())) {",
          "",
          "[Removed Lines]",
          "95:         for (View v : views()) {",
          "96:             if(v.getViewName().equals(name))",
          "",
          "[Added Lines]",
          "95:         for (View v : getAllViews()) {",
          "96:             if (v.getViewName().equals(name)) {",
          "98:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:         return copy;",
          "130:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     private Collection<View> getAllViews() {",
          "135:         return owner.getAllViews();",
          "136:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1811:         return viewGroupMixIn.getViews();",
          "1812:     }",
          "1814:     @Override",
          "1815:     public void addView(View v) throws IOException {",
          "1816:         viewGroupMixIn.addView(v);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1814:     @Exported     //Just to be exported - @Exported on default methods in interface is not supported",
          "1815:     public Collection<View> getAllViews() {",
          "1816:         return super.getAllViews();",
          "1817:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2266:                 })",
          "2267:                 .add(new CollectionSearchIndex() {// for views",
          "2268:                     protected View get(String key) { return getView(key); }",
          "2270:                 });",
          "2271:         return builder;",
          "2272:     }",
          "",
          "[Removed Lines]",
          "2269:                     protected Collection<View> all() { return viewGroupMixIn.getViews(); }",
          "",
          "[Added Lines]",
          "2274:                     protected Collection<View> all() { return getAllViews(); }",
          "",
          "---------------"
        ],
        "core/src/test/java/hudson/model/ViewTest.java||core/src/test/java/hudson/model/ViewTest.java": [
          "File: core/src/test/java/hudson/model/ViewTest.java -> core/src/test/java/hudson/model/ViewTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import javax.servlet.ServletException;",
          "20: import org.junit.Test;",
          "21: import org.kohsuke.stapler.StaplerRequest;",
          "22: import org.kohsuke.stapler.StaplerResponse;",
          "23: import org.mockito.Mockito;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.jvnet.hudson.test.Issue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         assertArrayEquals(expected, rootView.getAllItems().toArray());",
          "106:     }",
          "108:     private TopLevelItem createJob(String jobName) {",
          "109:         final TopLevelItem rootJob = Mockito.mock(TopLevelItem.class);",
          "110:         Mockito.when(rootJob.getDisplayName()).thenReturn(jobName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     @Test",
          "110:     @Issue(\"JENKINS-43322\")",
          "111:     public void getAllViewsRecursively() {",
          "113:         View left2ndNestedView = Mockito.mock(View.class);",
          "114:         View right2ndNestedView = Mockito.mock(View.class);",
          "115:         CompositeView rightNestedGroupView = new CompositeView(\"rightNestedGroupView\", left2ndNestedView, right2ndNestedView);",
          "117:         View leftTopLevelView = Mockito.mock(View.class);",
          "118:         CompositeView rootView = new CompositeView(\"rootGroupView\", leftTopLevelView, rightNestedGroupView);",
          "120:         Collection<View> allViews = rootView.getAllViews();",
          "122:         assertEquals(4, allViews.size());",
          "123:     }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ViewTest.java||test/src/test/java/hudson/model/ViewTest.java": [
          "File: test/src/test/java/hudson/model/ViewTest.java -> test/src/test/java/hudson/model/ViewTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import com.gargoylesoftware.htmlunit.WebRequest;",
          "27: import com.gargoylesoftware.htmlunit.html.DomNodeUtil;",
          "28: import jenkins.model.Jenkins;",
          "29: import org.jvnet.hudson.test.Issue;",
          "30: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import hudson.views.ViewsTabBar;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import hudson.model.Node.Mode;",
          "44: import org.jvnet.hudson.test.Email;",
          "45: import org.w3c.dom.Text;",
          "47: import static hudson.model.Messages.Hudson_ViewName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.kohsuke.stapler.StaplerRequest;",
          "47: import org.kohsuke.stapler.StaplerResponse;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: import java.io.File;",
          "54: import java.io.IOException;",
          "55: import java.util.Arrays;",
          "56: import java.util.List;",
          "57: import java.util.logging.Level;",
          "58: import java.util.logging.LogRecord;",
          "59: import jenkins.model.ProjectNamingStrategy;",
          "60: import jenkins.security.NotReallyRoleSensitiveCallable;",
          "61: import static org.junit.Assert.*;",
          "62: import org.junit.Ignore;",
          "63: import org.junit.Rule;",
          "64: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import java.util.Collection;",
          "66: import static org.mockito.BDDMockito.given;",
          "67: import static org.mockito.Mockito.mock;",
          "69: import javax.servlet.ServletException;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "555:         assertNull(j.getInstance().getView(\"All\"));",
          "556:     }",
          "558: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:     @Test",
          "568:     @Issue(\"JENKINS-43322\")",
          "569:     public void shouldFindNestedViewByName() throws Exception {",
          "571:         String testNestedViewName = \"right2ndNestedView\";",
          "572:         View right2ndNestedView = mockedViewWithName(testNestedViewName);",
          "574:         View left2ndNestedView = mockedViewWithName(\"left2ndNestedView\");",
          "575:         DummyCompositeView rightNestedGroupView = new DummyCompositeView(\"rightNestedGroupView\", left2ndNestedView, right2ndNestedView);",
          "577:         listView(\"leftTopLevelView\");",
          "578:         j.jenkins.addView(rightNestedGroupView);",
          "580:         View foundNestedView = j.jenkins.getView(testNestedViewName);",
          "582:         assertEquals(right2ndNestedView, foundNestedView);",
          "583:     }",
          "585:     private View mockedViewWithName(String viewName) {",
          "586:         return given(mock(View.class).getViewName()).willReturn(viewName).getMock();",
          "587:     }",
          "590:     private static class DummyCompositeView extends View implements ViewGroup {",
          "592:         private View[] views;",
          "593:         private TopLevelItem[] jobs;",
          "595:         protected DummyCompositeView(final String name, View... views) {",
          "596:             super(name);",
          "597:             this.views = views;",
          "598:         }",
          "600:         private DummyCompositeView withJobs(TopLevelItem... jobs) {",
          "601:             this.jobs = jobs;",
          "602:             return this;",
          "603:         }",
          "605:         @Override",
          "606:         public Collection<TopLevelItem> getItems() {",
          "607:             return Arrays.asList(this.jobs);",
          "608:         }",
          "610:         @Override",
          "611:         public Collection<View> getViews() {",
          "612:             return Arrays.asList(this.views);",
          "613:         }",
          "615:         @Override",
          "616:         public boolean canDelete(View view) {",
          "617:             return false;",
          "618:         }",
          "620:         @Override",
          "621:         public void deleteView(View view) throws IOException {",
          "622:         }",
          "624:         @Override",
          "625:         public View getView(String name) {",
          "626:             return null;",
          "627:         }",
          "629:         @Override",
          "630:         public View getPrimaryView() {",
          "631:             return null;",
          "632:         }",
          "634:         @Override",
          "635:         public void onViewRenamed(View view, String oldName, String newName) {",
          "636:         }",
          "638:         @Override",
          "639:         public ViewsTabBar getViewsTabBar() {",
          "640:             return null;",
          "641:         }",
          "643:         @Override",
          "644:         public ItemGroup<? extends TopLevelItem> getItemGroup() {",
          "645:             return null;",
          "646:         }",
          "648:         @Override",
          "649:         public List<Action> getViewActions() {",
          "650:             return null;",
          "651:         }",
          "653:         @Override",
          "654:         public boolean contains(TopLevelItem item) {",
          "655:             return false;",
          "656:         }",
          "658:         @Override",
          "659:         protected void submit(StaplerRequest req) throws IOException, ServletException, Descriptor.FormException {",
          "660:         }",
          "662:         @Override",
          "663:         public Item doCreateItem(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {",
          "664:             return null;",
          "665:         }",
          "666:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}