{
  "cve_id": "CVE-2019-3852",
  "cve_desc": "A vulnerability was found in moodle before version 3.6.3. The get_with_capability_join and get_users_by_capability functions were not taking context freezing into account when checking user capabilities",
  "repo": "moodle/moodle",
  "patch_hash": "54c2b176040c4cd65d921bf10123b5146eb486f5",
  "patch_info": {
    "commit_hash": "54c2b176040c4cd65d921bf10123b5146eb486f5",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/54c2b176040c4cd65d921bf10123b5146eb486f5",
    "files": [
      "lib/tests/accesslib_test.php"
    ],
    "message": "MDL-64410 access: Unit tests for context locking SQL",
    "before_after_code_files": [
      "lib/tests/accesslib_test.php||lib/tests/accesslib_test.php"
    ]
  },
  "patch_diff": {
    "lib/tests/accesslib_test.php||lib/tests/accesslib_test.php": [
      "File: lib/tests/accesslib_test.php -> lib/tests/accesslib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "3724:         $this->assertEquals(3, count_role_users($roleid1, context_course::instance($course->id), true));",
      "3725:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3730:     public function test_get_users_by_capability() {",
      "3731:         global $DB;",
      "3733:         $this->resetAfterTest();",
      "3735:         $course = $this->getDataGenerator()->create_course();",
      "3736:         $coursecontext = context_course::instance($course->id);",
      "3737:         $teacherrole = $DB->get_record('role', array('shortname' => 'editingteacher'), '*', MUST_EXIST);",
      "3738:         $teacher = $this->getDataGenerator()->create_user();",
      "3739:         $studentrole = $DB->get_record('role', array('shortname' => 'student'), '*', MUST_EXIST);",
      "3740:         $student = $this->getDataGenerator()->create_user();",
      "3741:         $guest = $DB->get_record('user', array('username' => 'guest'));",
      "3743:         role_assign($teacherrole->id, $teacher->id, $coursecontext);",
      "3744:         role_assign($studentrole->id, $student->id, $coursecontext);",
      "3745:         $admin = $DB->get_record('user', array('username' => 'admin'));",
      "3749:         $this->assertTrue($DB->record_exists('capabilities', array('name' => 'moodle/backup:backupcourse')));",
      "3750:         $this->assertTrue($DB->record_exists('capabilities', array('name' => 'moodle/site:approvecourse')));",
      "3752:         $users = get_users_by_capability($coursecontext, 'moodle/backup:backupcourse');",
      "3754:         $this->assertTrue(array_key_exists($teacher->id, $users));",
      "3755:         $this->assertFalse(array_key_exists($admin->id, $users));",
      "3756:         $this->assertFalse(array_key_exists($student->id, $users));",
      "3757:         $this->assertFalse(array_key_exists($guest->id, $users));",
      "3759:         $users = get_users_by_capability($coursecontext, 'moodle/site:approvecourse');",
      "3761:         $this->assertFalse(array_key_exists($teacher->id, $users));",
      "3762:         $this->assertFalse(array_key_exists($admin->id, $users));",
      "3763:         $this->assertFalse(array_key_exists($student->id, $users));",
      "3764:         $this->assertFalse(array_key_exists($guest->id, $users));",
      "3767:         assign_capability('moodle/backup:backupcourse', CAP_PROHIBIT, $teacherrole->id, $coursecontext, true);",
      "3768:         assign_capability('moodle/backup:backupcourse', CAP_ALLOW, $studentrole->id, $coursecontext, true);",
      "3770:         $users = get_users_by_capability($coursecontext, 'moodle/backup:backupcourse');",
      "3772:         $this->assertFalse(array_key_exists($teacher->id, $users));",
      "3773:         $this->assertFalse(array_key_exists($admin->id, $users));",
      "3774:         $this->assertTrue(array_key_exists($student->id, $users));",
      "3775:         $this->assertFalse(array_key_exists($guest->id, $users));",
      "3776:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3957:         $this->assertLessThanOrEqual(3, $DB->perf_get_reads() - $predbqueries);",
      "3958:     }",
      "3959: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4014:     public function test_get_with_capability_sql_locked() {",
      "4015:         global $DB;",
      "4017:         $this->resetAfterTest();",
      "4019:         $generator = $this->getDataGenerator();",
      "4021:         $cat1 = $generator->create_category();",
      "4022:         $cat2 = $generator->create_category();",
      "4023:         $cat1course1 = $generator->create_course(['category' => $cat1->id]);",
      "4024:         $cat1course1forum = $generator->create_module('forum', ['course' => $cat1course1]);",
      "4026:         $contexts = (object) [",
      "4027:             'system' => \\context_system::instance(),",
      "4028:             'cat1' => \\context_coursecat::instance($cat1->id),",
      "4029:             'cat2' => \\context_coursecat::instance($cat2->id),",
      "4030:             'cat1course1' => \\context_course::instance($cat1course1->id),",
      "4031:             'cat1course1forum' => \\context_module::instance($cat1course1forum->cmid),",
      "4032:         ];",
      "4035:         $caput = 'mod/forum:startdiscussion';",
      "4038:         $uut = $generator->create_and_enrol($cat1course1, 'teacher');",
      "4041:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
      "4042:         $users = $DB->get_records_sql($sql, $params);",
      "4043:         $this->assertArrayHasKey($uut->id, $users);",
      "4046:         set_config('contextlocking', 1);",
      "4047:         $contexts->cat1course1forum->set_locked(true);",
      "4048:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
      "4049:         $users = $DB->get_records_sql($sql, $params);",
      "4050:         $this->assertArrayNotHasKey($uut->id, $users);",
      "4053:         set_config('contextlocking', 0);",
      "4054:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
      "4055:         $users = $DB->get_records_sql($sql, $params);",
      "4056:         $this->assertArrayHasKey($uut->id, $users);",
      "4058:         $contexts->cat1course1forum->set_locked(false);",
      "4061:         set_config('contextlocking', 1);",
      "4062:         $contexts->cat1course1->set_locked(true);",
      "4063:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
      "4064:         $users = $DB->get_records_sql($sql, $params);",
      "4065:         $this->assertArrayNotHasKey($uut->id, $users);",
      "4068:         set_config('contextlocking', 0);",
      "4069:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
      "4070:         $users = $DB->get_records_sql($sql, $params);",
      "4071:         $this->assertArrayHasKey($uut->id, $users);",
      "4073:         $contexts->cat1course1->set_locked(false);",
      "4076:         set_config('contextlocking', 1);",
      "4077:         $contexts->cat1->set_locked(true);",
      "4078:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
      "4079:         $users = $DB->get_records_sql($sql, $params);",
      "4080:         $this->assertArrayNotHasKey($uut->id, $users);",
      "4083:         set_config('contextlocking', 0);",
      "4084:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
      "4085:         $users = $DB->get_records_sql($sql, $params);",
      "4086:         $this->assertArrayHasKey($uut->id, $users);",
      "4088:         $contexts->cat1->set_locked(false);",
      "4091:         set_config('contextlocking', 1);",
      "4092:         $contexts->cat2->set_locked(true);",
      "4093:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
      "4094:         $users = $DB->get_records_sql($sql, $params);",
      "4095:         $this->assertArrayHasKey($uut->id, $users);",
      "4096:     }",
      "4101:     public function test_get_users_by_capability_locked() {",
      "4102:         $this->resetAfterTest();",
      "4104:         $generator = $this->getDataGenerator();",
      "4106:         $cat1 = $generator->create_category();",
      "4107:         $cat2 = $generator->create_category();",
      "4108:         $cat1course1 = $generator->create_course(['category' => $cat1->id]);",
      "4109:         $cat1course1forum = $generator->create_module('forum', ['course' => $cat1course1]);",
      "4111:         $contexts = (object) [",
      "4112:             'system' => \\context_system::instance(),",
      "4113:             'cat1' => \\context_coursecat::instance($cat1->id),",
      "4114:             'cat2' => \\context_coursecat::instance($cat2->id),",
      "4115:             'cat1course1' => \\context_course::instance($cat1course1->id),",
      "4116:             'cat1course1forum' => \\context_module::instance($cat1course1forum->cmid),",
      "4117:         ];",
      "4120:         $caput = 'mod/forum:startdiscussion';",
      "4123:         $uut = $generator->create_and_enrol($cat1course1, 'teacher');",
      "4126:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
      "4127:         $this->assertArrayHasKey($uut->id, $users);",
      "4130:         set_config('contextlocking', 1);",
      "4131:         $contexts->cat1course1forum->set_locked(true);",
      "4132:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
      "4133:         $this->assertArrayNotHasKey($uut->id, $users);",
      "4136:         set_config('contextlocking', 0);",
      "4137:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
      "4138:         $this->assertArrayHasKey($uut->id, $users);",
      "4140:         $contexts->cat1course1forum->set_locked(false);",
      "4143:         set_config('contextlocking', 1);",
      "4144:         $contexts->cat1course1->set_locked(true);",
      "4145:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
      "4146:         $this->assertArrayNotHasKey($uut->id, $users);",
      "4149:         set_config('contextlocking', 0);",
      "4150:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
      "4151:         $this->assertArrayHasKey($uut->id, $users);",
      "4153:         $contexts->cat1course1->set_locked(false);",
      "4156:         set_config('contextlocking', 1);",
      "4157:         $contexts->cat1->set_locked(true);",
      "4158:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
      "4159:         $this->assertArrayNotHasKey($uut->id, $users);",
      "4162:         set_config('contextlocking', 0);",
      "4163:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
      "4164:         $this->assertArrayHasKey($uut->id, $users);",
      "4166:         $contexts->cat1->set_locked(false);",
      "4169:         set_config('contextlocking', 1);",
      "4170:         $contexts->cat2->set_locked(true);",
      "4171:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
      "4172:         $this->assertArrayHasKey($uut->id, $users);",
      "4173:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5ee3cbc624c1c4d39adc08c2121a1738d6b5e700",
      "candidate_info": {
        "commit_hash": "5ee3cbc624c1c4d39adc08c2121a1738d6b5e700",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/5ee3cbc624c1c4d39adc08c2121a1738d6b5e700",
        "files": [
          "lib/tests/accesslib_test.php"
        ],
        "message": "MDL-64410 access: Unit tests for context locking SQL",
        "before_after_code_files": [
          "lib/tests/accesslib_test.php||lib/tests/accesslib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/tests/accesslib_test.php||lib/tests/accesslib_test.php"
          ],
          "candidate": [
            "lib/tests/accesslib_test.php||lib/tests/accesslib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/tests/accesslib_test.php||lib/tests/accesslib_test.php": [
          "File: lib/tests/accesslib_test.php -> lib/tests/accesslib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3724:         $this->assertEquals(3, count_role_users($roleid1, context_course::instance($course->id), true));",
          "3725:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3730:     public function test_get_users_by_capability() {",
          "3731:         global $DB;",
          "3733:         $this->resetAfterTest();",
          "3735:         $course = $this->getDataGenerator()->create_course();",
          "3736:         $coursecontext = context_course::instance($course->id);",
          "3737:         $teacherrole = $DB->get_record('role', array('shortname' => 'editingteacher'), '*', MUST_EXIST);",
          "3738:         $teacher = $this->getDataGenerator()->create_user();",
          "3739:         $studentrole = $DB->get_record('role', array('shortname' => 'student'), '*', MUST_EXIST);",
          "3740:         $student = $this->getDataGenerator()->create_user();",
          "3741:         $guest = $DB->get_record('user', array('username' => 'guest'));",
          "3743:         role_assign($teacherrole->id, $teacher->id, $coursecontext);",
          "3744:         role_assign($studentrole->id, $student->id, $coursecontext);",
          "3745:         $admin = $DB->get_record('user', array('username' => 'admin'));",
          "3749:         $this->assertTrue($DB->record_exists('capabilities', array('name' => 'moodle/backup:backupcourse')));",
          "3750:         $this->assertTrue($DB->record_exists('capabilities', array('name' => 'moodle/site:approvecourse')));",
          "3752:         $users = get_users_by_capability($coursecontext, 'moodle/backup:backupcourse');",
          "3754:         $this->assertTrue(array_key_exists($teacher->id, $users));",
          "3755:         $this->assertFalse(array_key_exists($admin->id, $users));",
          "3756:         $this->assertFalse(array_key_exists($student->id, $users));",
          "3757:         $this->assertFalse(array_key_exists($guest->id, $users));",
          "3759:         $users = get_users_by_capability($coursecontext, 'moodle/site:approvecourse');",
          "3761:         $this->assertFalse(array_key_exists($teacher->id, $users));",
          "3762:         $this->assertFalse(array_key_exists($admin->id, $users));",
          "3763:         $this->assertFalse(array_key_exists($student->id, $users));",
          "3764:         $this->assertFalse(array_key_exists($guest->id, $users));",
          "3767:         assign_capability('moodle/backup:backupcourse', CAP_PROHIBIT, $teacherrole->id, $coursecontext, true);",
          "3768:         assign_capability('moodle/backup:backupcourse', CAP_ALLOW, $studentrole->id, $coursecontext, true);",
          "3770:         $users = get_users_by_capability($coursecontext, 'moodle/backup:backupcourse');",
          "3772:         $this->assertFalse(array_key_exists($teacher->id, $users));",
          "3773:         $this->assertFalse(array_key_exists($admin->id, $users));",
          "3774:         $this->assertTrue(array_key_exists($student->id, $users));",
          "3775:         $this->assertFalse(array_key_exists($guest->id, $users));",
          "3776:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3957:         $this->assertLessThanOrEqual(3, $DB->perf_get_reads() - $predbqueries);",
          "3958:     }",
          "3959: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4014:     public function test_get_with_capability_sql_locked() {",
          "4015:         global $DB;",
          "4017:         $this->resetAfterTest();",
          "4019:         $generator = $this->getDataGenerator();",
          "4021:         $cat1 = $generator->create_category();",
          "4022:         $cat2 = $generator->create_category();",
          "4023:         $cat1course1 = $generator->create_course(['category' => $cat1->id]);",
          "4024:         $cat1course1forum = $generator->create_module('forum', ['course' => $cat1course1]);",
          "4026:         $contexts = (object) [",
          "4027:             'system' => \\context_system::instance(),",
          "4028:             'cat1' => \\context_coursecat::instance($cat1->id),",
          "4029:             'cat2' => \\context_coursecat::instance($cat2->id),",
          "4030:             'cat1course1' => \\context_course::instance($cat1course1->id),",
          "4031:             'cat1course1forum' => \\context_module::instance($cat1course1forum->cmid),",
          "4032:         ];",
          "4035:         $caput = 'mod/forum:startdiscussion';",
          "4038:         $uut = $generator->create_and_enrol($cat1course1, 'teacher');",
          "4041:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
          "4042:         $users = $DB->get_records_sql($sql, $params);",
          "4043:         $this->assertArrayHasKey($uut->id, $users);",
          "4046:         set_config('contextlocking', 1);",
          "4047:         $contexts->cat1course1forum->set_locked(true);",
          "4048:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
          "4049:         $users = $DB->get_records_sql($sql, $params);",
          "4050:         $this->assertArrayNotHasKey($uut->id, $users);",
          "4053:         set_config('contextlocking', 0);",
          "4054:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
          "4055:         $users = $DB->get_records_sql($sql, $params);",
          "4056:         $this->assertArrayHasKey($uut->id, $users);",
          "4058:         $contexts->cat1course1forum->set_locked(false);",
          "4061:         set_config('contextlocking', 1);",
          "4062:         $contexts->cat1course1->set_locked(true);",
          "4063:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
          "4064:         $users = $DB->get_records_sql($sql, $params);",
          "4065:         $this->assertArrayNotHasKey($uut->id, $users);",
          "4068:         set_config('contextlocking', 0);",
          "4069:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
          "4070:         $users = $DB->get_records_sql($sql, $params);",
          "4071:         $this->assertArrayHasKey($uut->id, $users);",
          "4073:         $contexts->cat1course1->set_locked(false);",
          "4076:         set_config('contextlocking', 1);",
          "4077:         $contexts->cat1->set_locked(true);",
          "4078:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
          "4079:         $users = $DB->get_records_sql($sql, $params);",
          "4080:         $this->assertArrayNotHasKey($uut->id, $users);",
          "4083:         set_config('contextlocking', 0);",
          "4084:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
          "4085:         $users = $DB->get_records_sql($sql, $params);",
          "4086:         $this->assertArrayHasKey($uut->id, $users);",
          "4088:         $contexts->cat1->set_locked(false);",
          "4091:         set_config('contextlocking', 1);",
          "4092:         $contexts->cat2->set_locked(true);",
          "4093:         list($sql, $params) = get_with_capability_sql($contexts->cat1course1forum, $caput);",
          "4094:         $users = $DB->get_records_sql($sql, $params);",
          "4095:         $this->assertArrayHasKey($uut->id, $users);",
          "4096:     }",
          "4101:     public function test_get_users_by_capability_locked() {",
          "4102:         $this->resetAfterTest();",
          "4104:         $generator = $this->getDataGenerator();",
          "4106:         $cat1 = $generator->create_category();",
          "4107:         $cat2 = $generator->create_category();",
          "4108:         $cat1course1 = $generator->create_course(['category' => $cat1->id]);",
          "4109:         $cat1course1forum = $generator->create_module('forum', ['course' => $cat1course1]);",
          "4111:         $contexts = (object) [",
          "4112:             'system' => \\context_system::instance(),",
          "4113:             'cat1' => \\context_coursecat::instance($cat1->id),",
          "4114:             'cat2' => \\context_coursecat::instance($cat2->id),",
          "4115:             'cat1course1' => \\context_course::instance($cat1course1->id),",
          "4116:             'cat1course1forum' => \\context_module::instance($cat1course1forum->cmid),",
          "4117:         ];",
          "4120:         $caput = 'mod/forum:startdiscussion';",
          "4123:         $uut = $generator->create_and_enrol($cat1course1, 'teacher');",
          "4126:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
          "4127:         $this->assertArrayHasKey($uut->id, $users);",
          "4130:         set_config('contextlocking', 1);",
          "4131:         $contexts->cat1course1forum->set_locked(true);",
          "4132:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
          "4133:         $this->assertArrayNotHasKey($uut->id, $users);",
          "4136:         set_config('contextlocking', 0);",
          "4137:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
          "4138:         $this->assertArrayHasKey($uut->id, $users);",
          "4140:         $contexts->cat1course1forum->set_locked(false);",
          "4143:         set_config('contextlocking', 1);",
          "4144:         $contexts->cat1course1->set_locked(true);",
          "4145:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
          "4146:         $this->assertArrayNotHasKey($uut->id, $users);",
          "4149:         set_config('contextlocking', 0);",
          "4150:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
          "4151:         $this->assertArrayHasKey($uut->id, $users);",
          "4153:         $contexts->cat1course1->set_locked(false);",
          "4156:         set_config('contextlocking', 1);",
          "4157:         $contexts->cat1->set_locked(true);",
          "4158:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
          "4159:         $this->assertArrayNotHasKey($uut->id, $users);",
          "4162:         set_config('contextlocking', 0);",
          "4163:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
          "4164:         $this->assertArrayHasKey($uut->id, $users);",
          "4166:         $contexts->cat1->set_locked(false);",
          "4169:         set_config('contextlocking', 1);",
          "4170:         $contexts->cat2->set_locked(true);",
          "4171:         $users = get_users_by_capability($contexts->cat1course1forum, $caput);",
          "4172:         $this->assertArrayHasKey($uut->id, $users);",
          "4173:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}