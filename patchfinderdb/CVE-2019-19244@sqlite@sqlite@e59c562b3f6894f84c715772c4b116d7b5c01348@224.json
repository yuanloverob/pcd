{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "677525756b729e1afc7de103bc586226db19b841",
      "candidate_info": {
        "commit_hash": "677525756b729e1afc7de103bc586226db19b841",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/677525756b729e1afc7de103bc586226db19b841",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vacuum.c"
        ],
        "message": "Simplification of the recent VACUUM changes that make the code more like what it was before the change.  Also, make the VACUUM command a no-inline procedure to work around a performance regression.\n\nFossilOrigin-Name: 9cac5ac145d62117c918539baaa8a3c124230e031842e35fa1ba59f658c99518",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vacuum.c||src/vacuum.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d293fb43f2eb64026ac1e0422f54d4839b101898cc9913fc7746760c08ed41f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "142: int sqlite3RunVacuum(",
          "",
          "[Added Lines]",
          "142: SQLITE_NOINLINE int sqlite3RunVacuum(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     return SQLITE_ERROR;",
          "171:   }",
          "172:   saved_openFlags = db->openFlags;",
          "174:   if( pOut ){",
          "175:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "176:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "",
          "[Removed Lines]",
          "173:   saved_mDbFlags = db->mDbFlags;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:     zOut = (const char*)sqlite3_value_text(pOut);",
          "180:     db->openFlags &= ~SQLITE_OPEN_READONLY;",
          "181:     db->openFlags |= SQLITE_OPEN_CREATE|SQLITE_OPEN_READWRITE;",
          "183:   }else{",
          "184:     zOut = \"\";",
          "186:   }",
          "191:   saved_flags = db->flags;",
          "192:   saved_nChange = db->nChange;",
          "193:   saved_nTotalChange = db->nTotalChange;",
          "194:   saved_mTrace = db->mTrace;",
          "195:   db->flags |= SQLITE_WriteSchema | SQLITE_IgnoreChecks;",
          "196:   db->flags &= ~(u64)(SQLITE_ForeignKeys | SQLITE_ReverseOrder",
          "197:                    | SQLITE_Defensive | SQLITE_CountRows);",
          "198:   db->mTrace = 0;",
          "",
          "[Removed Lines]",
          "182:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum | DBFLAG_VacuumInto;",
          "185:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "189:   saved_mDbFlags = db->mDbFlags;",
          "194:   db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "231:       sqlite3SetString(pzErrMsg, db, \"output file already exists\");",
          "232:       goto end_of_vacuum;",
          "233:     }",
          "234:   }",
          "235:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     db->mDbFlags |= DBFLAG_VacuumInto;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "308:       zDbMain",
          "309:   );",
          "310:   assert( (db->mDbFlags & DBFLAG_Vacuum)!=0 );",
          "312:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "311:   db->mDbFlags &= ~(DBFLAG_Vacuum|DBFLAG_VacuumInto);",
          "",
          "[Added Lines]",
          "311:   db->mDbFlags &= ~DBFLAG_Vacuum;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5776ee5cf5773f4e4580db3860fe7d9194c75151",
      "candidate_info": {
        "commit_hash": "5776ee5cf5773f4e4580db3860fe7d9194c75151",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5776ee5cf5773f4e4580db3860fe7d9194c75151",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/global.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Omit the sqlite3IntTokens array constant for a code simplification.\n\nFossilOrigin-Name: f907395ef5a2dc1d084b6a286af00de4c742cf12d4f347c21e1b757786508f57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/global.c||src/global.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 82e5dcf5c1d500ed82f398b38fdae0f30033804e897fbab3c10f1e15e2abedef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "906:     sqlite3ExprUnmapAndDelete(pParse, pLeft);",
          "907:     sqlite3ExprUnmapAndDelete(pParse, pRight);",
          "909:   }else{",
          "910:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "911:   }",
          "",
          "[Removed Lines]",
          "908:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "",
          "[Added Lines]",
          "908:     return sqlite3Expr(db, TK_INTEGER, \"0\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2965:     sqlite3 *db = pParse->db;",
          "2967:     if( pLimit ){",
          "2968:       pLimit->affExpr = SQLITE_AFF_NUMERIC;",
          "2969:       pLimit = sqlite3PExpr(pParse, TK_NE,",
          "",
          "[Removed Lines]",
          "2966:     pLimit = sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "",
          "[Added Lines]",
          "2966:     pLimit = sqlite3Expr(db, TK_INTEGER, \"0\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2973:     pSel->pLimit->pLeft = pLimit;",
          "2974:   }else{",
          "2977:     pSel->pLimit = sqlite3PExpr(pParse, TK_LIMIT, pLimit, 0);",
          "2978:   }",
          "2979:   pSel->iLimit = 0;",
          "",
          "[Removed Lines]",
          "2976:     pLimit = sqlite3ExprAlloc(pParse->db, TK_INTEGER, &sqlite3IntTokens[1], 0);",
          "",
          "[Added Lines]",
          "2976:     pLimit = sqlite3Expr(pParse->db, TK_INTEGER, \"1\");",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272: FuncDefHash sqlite3BuiltinFunctions;",
          "282: #ifdef VDBE_PROFILE",
          "",
          "[Removed Lines]",
          "277: const Token sqlite3IntTokens[] = {",
          "278:    { \"0\", 1 },",
          "279:    { \"1\", 1 }",
          "280: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1183:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "1185:     }else{",
          "1186:       A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "1187:       if( A ){",
          "",
          "[Removed Lines]",
          "1184:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "",
          "[Added Lines]",
          "1184:       A = sqlite3Expr(pParse->db, TK_INTEGER, N ? \"1\" : \"0\");",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5465:     Select *pS = pWalker->u.pSelect;",
          "5466:     if( sqlite3ExprIsConstantOrGroupBy(pWalker->pParse, pExpr, pS->pGroupBy) ){",
          "5467:       sqlite3 *db = pWalker->pParse->db;",
          "5469:       if( pNew ){",
          "5470:         Expr *pWhere = pS->pWhere;",
          "5471:         SWAP(Expr, *pNew, *pExpr);",
          "",
          "[Removed Lines]",
          "5468:       Expr *pNew = sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[1], 0);",
          "",
          "[Added Lines]",
          "5468:       Expr *pNew = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4318: extern const char sqlite3StrBINARY[];",
          "4319: extern const unsigned char sqlite3UpperToLower[];",
          "4320: extern const unsigned char sqlite3CtypeMap[];",
          "4322: extern SQLITE_WSD struct Sqlite3Config sqlite3Config;",
          "4323: extern FuncDefHash sqlite3BuiltinFunctions;",
          "4324: #ifndef SQLITE_OMIT_WSD",
          "",
          "[Removed Lines]",
          "4321: extern const Token sqlite3IntTokens[];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:     if( pSublist==0 ){",
          "993:       pSublist = sqlite3ExprListAppend(pParse, 0,",
          "995:       );",
          "996:     }",
          "",
          "[Removed Lines]",
          "994:           sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0)",
          "",
          "[Added Lines]",
          "994:         sqlite3Expr(db, TK_INTEGER, \"0\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db586e48432ac81c81d454af4f5e879743dd9f7b",
      "candidate_info": {
        "commit_hash": "db586e48432ac81c81d454af4f5e879743dd9f7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db586e48432ac81c81d454af4f5e879743dd9f7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Add a missing VdbeCoverage() macro.\n\nFossilOrigin-Name: 33da6092d3d04b6eb6ab396b8c4f668e3529e26bf11e26f5fcb9b61fe3470197",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47cd634c98b502d40a493455ba6d73cbd0dae74944f9cf06fcbcd025f4b49d6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5217:       if( pLevel->regBignull ){",
          "5218:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5219:         sqlite3VdbeAddOp2(v, OP_IfNotZero, pLevel->regBignull, pLevel->p2-1);",
          "5220:       }",
          "5221: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "5222:       if( addrSeek ) sqlite3VdbeJumpHere(v, addrSeek);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5220:         VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1129c423f0cda7c76a3664dd91e84701f431cc5",
      "candidate_info": {
        "commit_hash": "b1129c423f0cda7c76a3664dd91e84701f431cc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1129c423f0cda7c76a3664dd91e84701f431cc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/gencol1.test"
        ],
        "message": "Fix the handling of NOT NULL constraint violations for generated columns in a REPLACE statement.  Ticket [2399f5986134f79c]\n\nFossilOrigin-Name: 77b1c90add514050fe62f22751362fecacd99f9775346cffc60e09c326e64e10",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5710845b6314f924b490434b4446169f4bb50576aaa940472af68150db16e127",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1518:           addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1519:           sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1520:             VdbeCoverage(v);",
          "1524:           onError = OE_Abort;",
          "",
          "[Removed Lines]",
          "1521:           sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1522:           sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1523:             VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1521:           if( (pTab->aCol[i].colFlags & COLFLAG_GENERATED)==0 ){",
          "1522:             sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1523:             sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1524:               VdbeCoverage(v);",
          "1525:           }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   SELECT id,x,'|' FROM t1a ORDER BY id;",
          "206: } {1 1 | 3 7 |}",
          "208: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208: do_catchsql_test gencol1-6.10 {",
          "209:   DROP TABLE IF EXISTS t0;",
          "210:   CREATE TABLE t0(c0 NOT NULL AS(c1), c1);",
          "211:   REPLACE INTO t0(c1) VALUES(NULL);",
          "212: } {1 {NOT NULL constraint failed: t0.c0}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98c94e60d0b6a59c63cb0618be8307d34e3b97a6",
      "candidate_info": {
        "commit_hash": "98c94e60d0b6a59c63cb0618be8307d34e3b97a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/98c94e60d0b6a59c63cb0618be8307d34e3b97a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/rowvalue.test"
        ],
        "message": "Previous check-in to fix [b47e3627ecaadbde] was incomplete.  This check-in completes the fix and adds a test cases.\n\nFossilOrigin-Name: c7da1c01f1f239e68c2173ac5748b8c5798271e43bdcee68f51f97cd0ca92bd5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ff80a9bf8fee776e2f282d0597215b77d48093ebc71d047ad1457da0582ddbc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: static u16 exprCommute(Parse *pParse, Expr *pExpr){",
          "116:     pExpr->flags ^= EP_Commuted;",
          "117:   }",
          "118:   SWAP(Expr*,pExpr->pRight,pExpr->pLeft);",
          "",
          "[Removed Lines]",
          "114:   if( sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight) !=",
          "115:       sqlite3BinaryCompareCollSeq(pParse, pExpr->pRight, pExpr->pLeft) ){",
          "",
          "[Added Lines]",
          "114:   if( pExpr->pLeft->op==TK_VECTOR",
          "115:    || pExpr->pRight->op==TK_VECTOR",
          "116:    || sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight) !=",
          "117:       sqlite3BinaryCompareCollSeq(pParse, pExpr->pRight, pExpr->pLeft)",
          "118:   ){",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:   SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 5,6);",
          "571: } {1 0 1 0 0 1 0 1}",
          "573: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573: # 2019-10-21 Ticket b47e3627ecaadbde",
          "574: #",
          "575: do_execsql_test 23.100 {",
          "576:   DROP TABLE IF EXISTS t0;",
          "577:   CREATE TABLE t0(aa COLLATE NOCASE, bb);",
          "578:   INSERT INTO t0 VALUES('a', 'A');",
          "579:   SELECT (+bb,1) >= (aa, 1), (aa,1)<=(+bb,1) FROM t0;",
          "580:   SELECT 2 FROM t0 WHERE (+bb,1) >= (aa,1);",
          "581:   SELECT 3 FROM t0 WHERE (aa,1) <= (+bb,1);",
          "582: } {0 1 3}",
          "583: do_execsql_test 23.110 {",
          "584:   SELECT (SELECT +bb,1) >= (aa, 1), (aa,1)<=(SELECT +bb,1) FROM t0;",
          "585:   SELECT 2 FROM t0 WHERE (SELECT +bb,1) >= (aa,1);",
          "586:   SELECT 3 FROM t0 WHERE (aa,1) <= (SELECT +bb,1);",
          "587: } {0 1 3}",
          "",
          "---------------"
        ]
      }
    }
  ]
}