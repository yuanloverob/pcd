{
  "cve_id": "CVE-2013-7299",
  "cve_desc": "framework/common/messageheaderparser.cpp in Tntnet before 2.2.1 allows remote attackers to obtain sensitive information via a header that ends in \\n instead of \\r\\n, which prevents a null terminator from being added and causes Tntnet to include headers from other requests.",
  "repo": "maekitalo/tntnet",
  "patch_hash": "9bd3b14042e12d84f39ea9f55731705ba516f525",
  "patch_info": {
    "commit_hash": "9bd3b14042e12d84f39ea9f55731705ba516f525",
    "repo": "maekitalo/tntnet",
    "commit_url": "https://github.com/maekitalo/tntnet/commit/9bd3b14042e12d84f39ea9f55731705ba516f525",
    "files": [
      "framework/common/messageheaderparser.cpp"
    ],
    "message": "fix possible information leak",
    "before_after_code_files": [
      "framework/common/messageheaderparser.cpp||framework/common/messageheaderparser.cpp"
    ]
  },
  "patch_diff": {
    "framework/common/messageheaderparser.cpp||framework/common/messageheaderparser.cpp": [
      "File: framework/common/messageheaderparser.cpp -> framework/common/messageheaderparser.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "259:   void Messageheader::Parser::checkHeaderspace(unsigned chars) const",
      "260:   {",
      "261:     if (headerdataPtr + chars >= header.rawdata + sizeof(header.rawdata))",
      "262:       throw HttpError(HTTP_REQUEST_ENTITY_TOO_LARGE, \"header too large\");",
      "263:   }",
      "265:   void Messageheader::Parser::reset()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263:     {",
      "264:       header.rawdata[sizeof(header.rawdata) - 1] = '\\0';",
      "266:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d372cf252ff6aee4409e60d9e023215a2aa59b47",
      "candidate_info": {
        "commit_hash": "d372cf252ff6aee4409e60d9e023215a2aa59b47",
        "repo": "maekitalo/tntnet",
        "commit_url": "https://github.com/maekitalo/tntnet/commit/d372cf252ff6aee4409e60d9e023215a2aa59b47",
        "files": [
          "framework/common/messageheaderparser.cpp"
        ],
        "message": "fix possible information leak",
        "before_after_code_files": [
          "framework/common/messageheaderparser.cpp||framework/common/messageheaderparser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "framework/common/messageheaderparser.cpp||framework/common/messageheaderparser.cpp"
          ],
          "candidate": [
            "framework/common/messageheaderparser.cpp||framework/common/messageheaderparser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "framework/common/messageheaderparser.cpp||framework/common/messageheaderparser.cpp": [
          "File: framework/common/messageheaderparser.cpp -> framework/common/messageheaderparser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:   void Messageheader::Parser::checkHeaderspace(unsigned chars) const",
          "260:   {",
          "261:     if (headerdataPtr + chars >= header.rawdata + sizeof(header.rawdata))",
          "262:       throw HttpError(HTTP_REQUEST_ENTITY_TOO_LARGE, \"header too large\");",
          "263:   }",
          "265:   void Messageheader::Parser::reset()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:     {",
          "264:       header.rawdata[sizeof(header.rawdata) - 1] = '\\0';",
          "266:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}