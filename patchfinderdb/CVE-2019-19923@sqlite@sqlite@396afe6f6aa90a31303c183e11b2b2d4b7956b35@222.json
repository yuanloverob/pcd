{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff119f04b42a7ad3a16c306446af7e301d34026a",
      "candidate_info": {
        "commit_hash": "ff119f04b42a7ad3a16c306446af7e301d34026a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff119f04b42a7ad3a16c306446af7e301d34026a",
        "files": [
          "ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c",
          "ext/misc/closure.c",
          "ext/misc/fileio.c",
          "ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c",
          "ext/session/changeset.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix harmless compiler warnings from MSVC.\n\nFossilOrigin-Name: f0f02d46e40667d0fc31c57eb26d459ce2f3a3c222c767fa371100b36e5335d1",
        "before_after_code_files": [
          "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c||ext/misc/amatch.c",
          "ext/misc/closure.c||ext/misc/closure.c",
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "ext/misc/fuzzer.c||ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c||ext/misc/unionvtab.c",
          "ext/session/changeset.c||ext/session/changeset.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c": [
          "File: ext/fts3/fts3_term.c -> ext/fts3/fts3_term.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   nByte = sizeof(Fts3termTable) + sizeof(Fts3Table) + nDb + nFts3 + 2;",
          "99:   p = (Fts3termTable *)sqlite3_malloc64(nByte);",
          "100:   if( !p ) return SQLITE_NOMEM;",
          "103:   p->pFts3Tab = (Fts3Table *)&p[1];",
          "104:   p->pFts3Tab->zDb = (char *)&p->pFts3Tab[1];",
          "",
          "[Removed Lines]",
          "101:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "101:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:         int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "739:         int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "740:         for(; i<128 && i<n; i++){",
          "742:         }",
          "743:         iTbl++;",
          "744:       }",
          "",
          "[Removed Lines]",
          "741:           aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "741:           aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:     if( p==0 ){",
          "582:       rc = SQLITE_NOMEM;",
          "583:     }else{",
          "585:       p->nPhrase = nPhrase;",
          "586:       p->aIDF = (double*)&p[1];",
          "587:       p->aFreq = &p->aIDF[nPhrase];",
          "",
          "[Removed Lines]",
          "584:       memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "584:       memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       return 1;",
          "29:     }else{",
          "31:       pBuf->p = pNew;",
          "32:     }",
          "33:   }",
          "",
          "[Removed Lines]",
          "30:       pBuf->nSpace = nNew;",
          "",
          "[Added Lines]",
          "30:       pBuf->nSpace = (int)nNew;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:     if( pRet==0 ){",
          "252:       if( nByte>0 ) *pRc = SQLITE_NOMEM;",
          "253:     }else{",
          "255:     }",
          "256:   }",
          "257:   return pRet;",
          "",
          "[Removed Lines]",
          "254:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "254:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:           rc = SQLITE_ERROR;",
          "326:         }else{",
          "327:           rc = sqlite3Fts5GetTokenizer(pGlobal,",
          "329:               pzErr",
          "330:           );",
          "331:         }",
          "",
          "[Removed Lines]",
          "328:               (const char**)azArg, nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "[Added Lines]",
          "328:               (const char**)azArg, (int)nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:   if( zOut==0 ){",
          "437:   }else{",
          "439:     if( fts5_isopenquote(zOut[0]) ){",
          "440:       int ii = fts5Dequote(zOut);",
          "441:       zRet = &zIn[ii];",
          "",
          "[Removed Lines]",
          "438:     memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "438:     memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1487:       if( pRet==0 ){",
          "1488:         pParse->rc = SQLITE_NOMEM;",
          "1489:       }else{",
          "1491:       }",
          "1492:     }else if( (pNear->nPhrase % SZALLOC)==0 ){",
          "1493:       int nNew = pNear->nPhrase + SZALLOC;",
          "",
          "[Removed Lines]",
          "1490:         memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "1490:         memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:     if( pSyn==0 ){",
          "1564:       rc = SQLITE_NOMEM;",
          "1565:     }else{",
          "1567:       pSyn->zTerm = ((char*)pSyn) + sizeof(Fts5ExprTerm) + sizeof(Fts5Buffer);",
          "1568:       memcpy(pSyn->zTerm, pToken, nToken);",
          "1569:       pSyn->pSynonym = pPhrase->aTerm[pPhrase->nTerm-1].pSynonym;",
          "",
          "[Removed Lines]",
          "1566:       memset(pSyn, 0, nByte);",
          "",
          "[Added Lines]",
          "1566:       memset(pSyn, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1723:       nByte = sizeof(Fts5Colset) + (pColsetOrig->nCol-1) * sizeof(int);",
          "1724:       pColset = (Fts5Colset*)sqlite3Fts5MallocZero(&rc, nByte);",
          "1725:       if( pColset ){",
          "1727:       }",
          "1728:       pNew->pRoot->pNear->pColset = pColset;",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1726:         memcpy(pColset, pColsetOrig, nByte);",
          "",
          "[Added Lines]",
          "1726:         memcpy(pColset, pColsetOrig, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1940:     sqlite3_int64 nByte = sizeof(Fts5Colset) + (pOrig->nCol-1) * sizeof(int);",
          "1941:     pRet = (Fts5Colset*)sqlite3Fts5MallocZero(pRc, nByte);",
          "1942:     if( pRet ){",
          "1944:     }",
          "1945:   }else{",
          "1946:     pRet = 0;",
          "",
          "[Removed Lines]",
          "1943:       memcpy(pRet, pOrig, nByte);",
          "",
          "[Added Lines]",
          "1943:       memcpy(pRet, pOrig, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:       rc = SQLITE_NOMEM;",
          "105:     }else{",
          "107:     }",
          "108:   }",
          "109:   return rc;",
          "",
          "[Removed Lines]",
          "106:       memset(pNew->aSlot, 0, nByte);",
          "",
          "[Added Lines]",
          "106:       memset(pNew->aSlot, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:     p = (Fts5HashEntry*)sqlite3_malloc64(nByte);",
          "285:     if( !p ) return SQLITE_NOMEM;",
          "286:     memset(p, 0, sizeof(Fts5HashEntry));",
          "288:     zKey = fts5EntryKey(p);",
          "289:     zKey[0] = bByte;",
          "290:     memcpy(&zKey[1], pToken, nToken);",
          "",
          "[Removed Lines]",
          "287:     p->nAlloc = nByte;",
          "",
          "[Added Lines]",
          "287:     p->nAlloc = (int)nByte;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     pCsr = (Fts5Cursor*)sqlite3_malloc64(nByte);",
          "634:     if( pCsr ){",
          "635:       Fts5Global *pGlobal = pTab->pGlobal;",
          "637:       pCsr->aColumnSize = (int*)&pCsr[1];",
          "638:       pCsr->pNext = pGlobal->pCsr;",
          "639:       pGlobal->pCsr = pCsr;",
          "",
          "[Removed Lines]",
          "636:       memset(pCsr, 0, nByte);",
          "",
          "[Added Lines]",
          "636:       memset(pCsr, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "914:   nByte = sizeof(Fts5Sorter) + sizeof(int) * (nPhrase-1);",
          "915:   pSorter = (Fts5Sorter*)sqlite3_malloc64(nByte);",
          "916:   if( pSorter==0 ) return SQLITE_NOMEM;",
          "918:   pSorter->nIdx = nPhrase;",
          "",
          "[Removed Lines]",
          "917:   memset(pSorter, 0, nByte);",
          "",
          "[Added Lines]",
          "917:   memset(pSorter, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:   if( !p ) return SQLITE_NOMEM;",
          "293:   p->aTotalSize = (i64*)&p[1];",
          "294:   p->pConfig = pConfig;",
          "295:   p->pIndex = pIndex;",
          "",
          "[Removed Lines]",
          "292:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "292:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "770:     int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "771:     for(; i<128 && i<n; i++){",
          "773:     }",
          "774:     iTbl++;",
          "775:   }",
          "",
          "[Removed Lines]",
          "772:       aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "772:       aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/misc/amatch.c||ext/misc/amatch.c": [
          "File: ext/misc/amatch.c -> ext/misc/amatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "751:     }else{",
          "",
          "[Removed Lines]",
          "750:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "750:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/closure.c||ext/misc/closure.c": [
          "File: ext/misc/closure.c -> ext/misc/closure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "435:     }else{",
          "",
          "[Removed Lines]",
          "434:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "434:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "",
          "[Removed Lines]",
          "161:   if( nIn==fread(pBuf, 1, nIn, in) ){",
          "",
          "[Added Lines]",
          "161:   if( nIn==fread(pBuf, 1, (size_t)nIn, in) ){",
          "",
          "---------------"
        ],
        "ext/misc/fuzzer.c||ext/misc/fuzzer.c": [
          "File: ext/misc/fuzzer.c -> ext/misc/fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "460:     }else{",
          "",
          "[Removed Lines]",
          "459:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "459:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:       memset(pNew, 0, sizeof(*pNew));",
          "526:       pNew->zClassName = (char*)&pNew[1];",
          "529:       zTab = fuzzerDequote(argv[3]);",
          "530:       if( zTab==0 ){",
          "",
          "[Removed Lines]",
          "527:       memcpy(pNew->zClassName, zModule, nModule+1);",
          "",
          "[Added Lines]",
          "527:       memcpy(pNew->zClassName, zModule, (size_t)(nModule+1));",
          "",
          "---------------"
        ],
        "ext/misc/unionvtab.c||ext/misc/unionvtab.c": [
          "File: ext/misc/unionvtab.c -> ext/misc/unionvtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   if( *pRc==SQLITE_OK ){",
          "257:     pRet = sqlite3_malloc64(nByte);",
          "258:     if( pRet ){",
          "260:     }else{",
          "262:     }",
          "",
          "[Removed Lines]",
          "259:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "259:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:     sqlite3_int64 nByte = strlen(zIn) + 1;",
          "280:     zRet = unionMalloc(pRc, nByte);",
          "281:     if( zRet ){",
          "283:     }",
          "284:   }",
          "285:   return zRet;",
          "",
          "[Removed Lines]",
          "282:       memcpy(zRet, zIn, nByte);",
          "",
          "[Added Lines]",
          "282:       memcpy(zRet, zIn, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/session/changeset.c||ext/session/changeset.c": [
          "File: ext/session/changeset.c -> ext/session/changeset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "56:   if( pBuf==0 ){",
          "57:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "59:     exit(1);",
          "60:   }",
          "61:   if( sz>0 ){",
          "64:       exit(1);",
          "65:     }",
          "66:     fclose(f);",
          "67:   }",
          "70: }",
          "",
          "[Removed Lines]",
          "58:             sz, zFilename);",
          "62:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "58:             (int)sz, zFilename);",
          "62:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "64:               (int)sz, zFilename);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 90acdbfce9c088582d5165589f7eac462b00062bbfffacdcc786eb9cf3ea5377",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2015:   assert( pPage->nCell>0",
          "2017:        || CORRUPT_DB );",
          "2019:   pPage->isInit = 1;",
          "",
          "[Removed Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==(int)pBt->usableSize",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "535:   for(i=k=0; i<n; i++){",
          "536:     unsigned char c = (unsigned char)zIn[i];",
          "537:     if( isxdigit(c) ){",
          "",
          "[Removed Lines]",
          "534:   memset(a, 0, nAlloc);",
          "",
          "[Added Lines]",
          "534:   memset(a, 0, (size_t)nAlloc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "",
          "[Removed Lines]",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "",
          "[Added Lines]",
          "571:           memset(a+nAlloc, 0, (size_t)(newSize - nAlloc));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b96b6969ae7f2f8dfa6a07b97fea1057dbcdab5",
      "candidate_info": {
        "commit_hash": "2b96b6969ae7f2f8dfa6a07b97fea1057dbcdab5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b96b6969ae7f2f8dfa6a07b97fea1057dbcdab5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Improved detection of corruption on the freeblock list of a btree page.\n\nFossilOrigin-Name: 4b00799bdf107fce8a9dd84fd5bf6597e4f3373659b89aae4a1242be5964726f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2ac0e42f8ab7a9184c2a2efd13bd50ab51bc01f9f34e9e63591fd18db02dff54",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1647:   if( (data[hdr+2] || data[hdr+1]) && gap+2<=top ){",
          "1648:     u8 *pSpace = pageFindSlot(pPage, nByte, &rc);",
          "1649:     if( pSpace ){",
          "1653:     }else if( rc ){",
          "1654:       return rc;",
          "1655:     }",
          "",
          "[Removed Lines]",
          "1650:       assert( pSpace>=data && (pSpace - data)<65536 );",
          "1652:       return SQLITE_OK;",
          "",
          "[Added Lines]",
          "1650:       assert( pSpace+nByte<=data+pPage->pBt->usableSize );",
          "1651:       if( (*pIdx = (int)(pSpace-data))<=gap ){",
          "1652:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1653:       }else{",
          "1654:         return SQLITE_OK;",
          "1655:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6897:   assert( i<iEnd );",
          "6898:   j = get2byte(&aData[hdr+5]);",
          "6900:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6902:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6899:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "[Added Lines]",
          "6902:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea5c040f878dbe8416cc85ece8d16fdec412e059",
      "candidate_info": {
        "commit_hash": "ea5c040f878dbe8416cc85ece8d16fdec412e059",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea5c040f878dbe8416cc85ece8d16fdec412e059",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "test/e_expr.test"
        ],
        "message": "Simplification to the logic underlying PRAGMA case_sensitive_like.\n\nFossilOrigin-Name: ef0015fde4c87e992ffd3d7dea8586951bdd65ff98d30d436b126b85b1cc9c74",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "test/e_expr.test||test/e_expr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8658574e3f435f03a87c04f398bd05078ebc53ecb4a477d3b24902d701d935c4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1795:   }",
          "1796: }",
          "",
          "[Removed Lines]",
          "1801: static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){",
          "1802:   FuncDef *pDef;",
          "1803:   pDef = sqlite3FindFunction(db, zName, 2, SQLITE_UTF8, 0);",
          "1804:   if( ALWAYS(pDef) ){",
          "1805:     pDef->funcFlags |= flagVal;",
          "1806:   }",
          "1807:   pDef = sqlite3FindFunction(db, zName, 3, SQLITE_UTF8, 0);",
          "1808:   if( pDef ){",
          "1809:     pDef->funcFlags |= flagVal;",
          "1810:   }",
          "1811: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1818: void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){",
          "1819:   struct compareInfo *pInfo;",
          "1820:   if( caseSensitive ){",
          "1821:     pInfo = (struct compareInfo*)&likeInfoAlt;",
          "1822:   }else{",
          "1823:     pInfo = (struct compareInfo*)&likeInfoNorm;",
          "1824:   }",
          "1825:   sqlite3CreateFunc(db, \"like\", 2, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1826:   sqlite3CreateFunc(db, \"like\", 3, SQLITE_UTF8, pInfo, likeFunc, 0, 0, 0, 0, 0);",
          "1829: }",
          "",
          "[Removed Lines]",
          "1827:   setLikeOptFlag(db, \"like\",",
          "1828:       caseSensitive ? (SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE) : SQLITE_FUNC_LIKE);",
          "",
          "[Added Lines]",
          "1805:   int flags;",
          "1808:     flags = SQLITE_FUNC_LIKE | SQLITE_FUNC_CASE;",
          "1811:     flags = SQLITE_FUNC_LIKE;",
          "1815:   sqlite3FindFunction(db, \"like\", 2, SQLITE_UTF8, 0)->funcFlags |= flags;",
          "1816:   sqlite3FindFunction(db, \"like\", 3, SQLITE_UTF8, 0)->funcFlags |= flags;",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1013: # EVIDENCE-OF: R-22868-25880 The LIKE operator can be made case",
          "1014: # sensitive using the case_sensitive_like pragma.",
          "1015: #",
          "1024: # EVIDENCE-OF: R-52087-12043 The GLOB operator is similar to LIKE but",
          "1025: # uses the Unix file globbing syntax for its wildcards.",
          "",
          "[Removed Lines]",
          "1016: do_execsql_test e_expr-16.1.1 { SELECT 'abcxyz' LIKE 'ABC%' } 1",
          "1017: do_execsql_test e_expr-16.1.2 { PRAGMA case_sensitive_like = 1 } {}",
          "1018: do_execsql_test e_expr-16.1.3 { SELECT 'abcxyz' LIKE 'ABC%' } 0",
          "1019: do_execsql_test e_expr-16.1.4 { SELECT 'ABCxyz' LIKE 'ABC%' } 1",
          "1020: do_execsql_test e_expr-16.1.5 { PRAGMA case_sensitive_like = 0 } {}",
          "1021: do_execsql_test e_expr-16.1.6 { SELECT 'abcxyz' LIKE 'ABC%' } 1",
          "1022: do_execsql_test e_expr-16.1.7 { SELECT 'ABCxyz' LIKE 'ABC%' } 1",
          "",
          "[Added Lines]",
          "1016: do_execsql_test e_expr-16.1.1  { SELECT 'abcxyz' LIKE 'ABC%' } 1",
          "1017: do_execsql_test e_expr-16.1.1b { SELECT 'abc%xyz' LIKE 'ABC\\%x%' ESCAPE '\\' } 1",
          "1018: do_execsql_test e_expr-16.1.2  { PRAGMA case_sensitive_like = 1 } {}",
          "1019: do_execsql_test e_expr-16.1.3  { SELECT 'abcxyz' LIKE 'ABC%' } 0",
          "1020: do_execsql_test e_expr-16.1.3b { SELECT 'abc%xyz' LIKE 'ABC\\%X%' ESCAPE '\\' } 0",
          "1021: do_execsql_test e_expr-16.1.4  { SELECT 'ABCxyz' LIKE 'ABC%' } 1",
          "1022: do_execsql_test e_expr-16.1.4b { SELECT 'ABC%xyz' LIKE 'ABC\\%x%' ESCAPE '\\' } 1",
          "1023: do_execsql_test e_expr-16.1.5  { PRAGMA case_sensitive_like = 0 } {}",
          "1024: do_execsql_test e_expr-16.1.6  { SELECT 'abcxyz' LIKE 'ABC%' } 1",
          "1025: do_execsql_test e_expr-16.1.6b { SELECT 'abc%xyz' LIKE 'ABC\\%X%' ESCAPE '\\' } 1",
          "1026: do_execsql_test e_expr-16.1.7  { SELECT 'ABCxyz' LIKE 'ABC%' } 1",
          "1027: do_execsql_test e_expr-16.1.7b { SELECT 'ABC%xyz' LIKE 'ABC\\%X%' ESCAPE '\\' } 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e6d83bc498c7f3c49c72ac96887228336966db3",
      "candidate_info": {
        "commit_hash": "2e6d83bc498c7f3c49c72ac96887228336966db3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e6d83bc498c7f3c49c72ac96887228336966db3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/main.c",
          "src/os.c",
          "src/shell.c.in",
          "src/test1.c",
          "test/dbfuzz2.c",
          "test/fuzzcheck.c"
        ],
        "message": "Give the SQLITE_TESTCTRL_PRNG_SEED two arguments.  The second argument if not NULL is a pointer to a database connection which seeds the connection from its schema cookie.  In this way, fuzzers can control the PRNG seed.\n\nFossilOrigin-Name: 49aa34480622cce4d7a72c59d9cfa8336886387acec8ee15b72f295ea1a52d8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/main.c||src/main.c",
          "src/os.c||src/os.c",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c71098409c98af8360f8f28b9238a12ec764018a5782e8ff03fdf5db54031d6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6897:   assert( i<iEnd );",
          "6898:   j = get2byte(&aData[hdr+5]);",
          "6900:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6902:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6899:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "[Added Lines]",
          "6899:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3824:       break;",
          "3825:     }",
          "3832:     case SQLITE_TESTCTRL_PRNG_SEED: {",
          "3834:       break;",
          "3835:     }",
          "",
          "[Removed Lines]",
          "3833:       sqlite3Config.iPrngSeed = va_arg(ap, unsigned int);",
          "",
          "[Added Lines]",
          "3848:       int x = va_arg(ap, int);",
          "3849:       int y;",
          "3850:       sqlite3 *db = va_arg(ap, sqlite3*);",
          "3851:       assert( db==0 || db->aDb[0].pSchema!=0 );",
          "3852:       if( db && (y = db->aDb[0].pSchema->schema_cookie)!=0 ){ x = y; }",
          "3853:       sqlite3Config.iPrngSeed = x;",
          "3854:       sqlite3_randomness(0,0);",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){",
          "261:   if( sqlite3Config.iPrngSeed ){",
          "262:     memset(zBufOut, 0, nByte);",
          "264:     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);",
          "265:     return SQLITE_OK;",
          "266:   }else{",
          "",
          "[Removed Lines]",
          "263:     if( nByte>sizeof(unsigned) ) nByte = sizeof(unsigned int);",
          "",
          "[Added Lines]",
          "263:     if( ALWAYS(nByte>sizeof(unsigned)) ) nByte = sizeof(unsigned int);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9152:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"           },",
          "9153:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"                   },",
          "9154:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"                   },",
          "9156:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,       \"BYTES-OF-RESERVE\"   },",
          "9157:     };",
          "9158:     int testctrl = -1;",
          "",
          "[Removed Lines]",
          "9155:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED\"               },",
          "",
          "[Added Lines]",
          "9155:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"          },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9229:         case SQLITE_TESTCTRL_PENDING_BYTE:",
          "9231:           if( nArg==3 ){",
          "9232:             unsigned int opt = (unsigned int)integerValue(azArg[2]);",
          "9233:             rc2 = sqlite3_test_control(testctrl, opt);",
          "",
          "[Removed Lines]",
          "9230:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9235:           }",
          "9236:           break;",
          "9239:         case SQLITE_TESTCTRL_ASSERT:",
          "9240:         case SQLITE_TESTCTRL_ALWAYS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9238:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "9239:           if( nArg==3 || nArg==4 ){",
          "9240:             int i = (int)integerValue(azArg[2]);",
          "9241:             sqlite3 *db;",
          "9242:             if( nArg==3 ){",
          "9243:               db = 0;",
          "9244:             }else{",
          "9245:               db = p->db;",
          "9247:               sqlite3_table_column_metadata(db, 0, \"x\", 0, 0, 0, 0, 0, 0);",
          "9248:             }",
          "9249:             rc2 = sqlite3_test_control(testctrl, i, db);",
          "9250:             isOk = 3;",
          "9251:           }",
          "9252:           break;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6389: ){",
          "6393:     return TCL_ERROR;",
          "6394:   }",
          "6395:   if( Tcl_GetIntFromObj(interp,objv[0],&i) ) return TCL_ERROR;",
          "6398:   return TCL_OK;",
          "6399: }",
          "",
          "[Removed Lines]",
          "6390:   unsigned int i;",
          "6391:   if( objc!=2 ){",
          "6392:     Tcl_WrongNumArgs(interp, 1, objv, \"PRNG-SEED-TEXT\");",
          "6396:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, (unsigned int)i);",
          "6397:   sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "6400:   int i = 0;",
          "6401:   sqlite3 *db = 0;",
          "6402:   if( objc!=2 && objc!=3 ){",
          "6403:     Tcl_WrongNumArgs(interp, 1, objv, \"SEED ?DB?\");",
          "6407:   if( objc==3 && getDbPointer(interp, Tcl_GetString(objv[2]), &db) ){",
          "6408:     return TCL_ERROR;",
          "6409:   }",
          "6410:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, i, db);",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "214: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "217: #endif",
          "218:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "219:     if( eVerbosity>=1 ){",
          "",
          "[Removed Lines]",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "216:   sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1807:           }",
          "1808: #endif",
          "1809: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1812: #endif",
          "1813:           do{",
          "1814:             runSql(db, (char*)pSql->a, runFlags);",
          "",
          "[Removed Lines]",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "1811:           sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b531aa8fd9ca317c1ce586d1156c6c084a734264",
      "candidate_info": {
        "commit_hash": "b531aa8fd9ca317c1ce586d1156c6c084a734264",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b531aa8fd9ca317c1ce586d1156c6c084a734264",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "In a query that uses a partial index, the expression that is the WHERE clause of the partial index must always be true.  Use this fact to avoid evaluating identical terms in the WHERE clause of the query.\n\nFossilOrigin-Name: 9b2879629c34fc0a8e99d94648903eb93aabbc7a3682c80cb7382f9a9ca5ffb7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1f9fa58541dc974989eee9c9a5d453956f7dbcf42965ece2db2cb5dee3f3f5e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1159:   }",
          "1160: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1169: static void whereApplyPartialIndexConstraints(",
          "1170:   Expr *pTruth,",
          "1171:   int iTabCur,",
          "1172:   WhereClause *pWC",
          "1173: ){",
          "1174:   int i;",
          "1175:   WhereTerm *pTerm;",
          "1176:   while( pTruth->op==TK_AND ){",
          "1177:     whereApplyPartialIndexConstraints(pTruth->pLeft, iTabCur, pWC);",
          "1178:     pTruth = pTruth->pRight;",
          "1179:   }",
          "1180:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "1181:     Expr *pExpr;",
          "1182:     if( pTerm->wtFlags & TERM_CODED ) continue;",
          "1183:     pExpr = pTerm->pExpr;",
          "1184:     if( sqlite3ExprCompare(0, pExpr, pTruth, iTabCur)==0 ){",
          "1185:       pTerm->wtFlags |= TERM_CODED;",
          "1186:     }",
          "1187:   }",
          "1188: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1768:       whereIndexExprTrans(pIdx, iCur, iIdxCur, pWInfo);",
          "1769:     }",
          "1772:     if( pLoop->wsFlags & WHERE_ONEROW ){",
          "1773:       pLevel->op = OP_Noop;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1803:     if( pIdx->pPartIdxWhere ){",
          "1804:       whereApplyPartialIndexConstraints(pIdx->pPartIdxWhere, iCur, pWC);",
          "1805:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}