{
  "cve_id": "CVE-2021-41220",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions the async implementation of `CollectiveReduceV2` suffers from a memory leak and a use after free. This occurs due to the asynchronous computation and the fact that objects that have been `std::move()`d from are still accessed. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, as this version is the only one that is also affected.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ca38dab9d3ee66c5de06f11af9a4b1200da5ef75",
  "patch_info": {
    "commit_hash": "ca38dab9d3ee66c5de06f11af9a4b1200da5ef75",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75",
    "files": [
      "tensorflow/core/kernels/collective_ops.cc",
      "tensorflow/python/kernel_tests/collective_ops_test.py"
    ],
    "message": "Fix undefined behavior in CollectiveReduceV2 and others\n\nWe should not call done after it's moved.\n\nPiperOrigin-RevId: 400838185\nChange-Id: Ifc979740054b8f8c6f4d50acc89472fe60c4fdb1",
    "before_after_code_files": [
      "tensorflow/core/kernels/collective_ops.cc||tensorflow/core/kernels/collective_ops.cc",
      "tensorflow/python/kernel_tests/collective_ops_test.py||tensorflow/python/kernel_tests/collective_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/collective_ops.cc||tensorflow/core/kernels/collective_ops.cc": [
      "File: tensorflow/core/kernels/collective_ops.cc -> tensorflow/core/kernels/collective_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "494:                               const Tensor& group_size, const Tensor& group_key,",
      "495:                               const Tensor& instance_key) {",
      "496:     if (group_size.dims() > 0) {",
      "499:     }",
      "500:     if (group_key.dims() > 0) {",
      "503:     }",
      "504:     if (instance_key.dims() > 0) {",
      "506:           \"Unexpected dimensions on input instance_key, got \",",
      "507:           instance_key.shape().DebugString());",
      "508:     }",
      "",
      "[Removed Lines]",
      "497:       return errors::Internal(\"Unexpected dimensions on input group_size, got \",",
      "498:                               group_size.shape().DebugString());",
      "501:       return errors::Internal(\"Unexpected dimensions on input group_key, got \",",
      "502:                               group_key.shape().DebugString());",
      "505:       return errors::Internal(",
      "",
      "[Added Lines]",
      "497:       return errors::InvalidArgument(",
      "498:           \"Unexpected dimensions on input group_size, got \",",
      "499:           group_size.shape().DebugString());",
      "502:       return errors::InvalidArgument(",
      "503:           \"Unexpected dimensions on input group_key, got \",",
      "504:           group_key.shape().DebugString());",
      "507:       return errors::InvalidArgument(",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "629:     col_params->instance.shape = c->input(0).shape();",
      "630:     col_params->merge_op = merge_op_.get();",
      "631:     col_params->final_op = final_op_.get();",
      "",
      "[Removed Lines]",
      "628:                          done);",
      "",
      "[Added Lines]",
      "630:                          done_with_cleanup);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "856:   Status CheckInputs(Tensor group_size_t, Tensor group_key_t) {",
      "857:     if (group_size_t.dims() > 0) {",
      "859:           \"Unexpected dimensions on input group_size. \"",
      "860:           \"It shoulbe a scalar, got tensor with shape \",",
      "861:           group_size_t.shape().DebugString());",
      "862:     }",
      "863:     if (group_key_t.dims() > 0) {",
      "866:     }",
      "868:     auto group_size = group_size_t.unaligned_flat<int32>()(0);",
      "",
      "[Removed Lines]",
      "858:       return errors::Internal(",
      "864:       return errors::Internal(\"Unexpected dimensions on input group_key, got \",",
      "865:                               group_key_t.shape().DebugString());",
      "",
      "[Added Lines]",
      "860:       return errors::InvalidArgument(",
      "866:       return errors::InvalidArgument(",
      "867:           \"Unexpected dimensions on input group_key, got \",",
      "868:           group_key_t.shape().DebugString());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1084:     };",
      "1085:     core::RefCountPtr<CollectiveGroupResource> resource;",
      "1086:     OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),",
      "1089:     Tensor group_assignment = c->input(2);",
      "",
      "[Removed Lines]",
      "1087:                          done);",
      "",
      "[Added Lines]",
      "1090:                          done_with_cleanup);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1134:     };",
      "1135:     core::RefCountPtr<CollectiveGroupResource> resource;",
      "1136:     OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),",
      "1139:     Tensor group_assignment = c->input(2);",
      "",
      "[Removed Lines]",
      "1137:                          done);",
      "",
      "[Added Lines]",
      "1140:                          done_with_cleanup);",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/collective_ops_test.py||tensorflow/python/kernel_tests/collective_ops_test.py": [
      "File: tensorflow/python/kernel_tests/collective_ops_test.py -> tensorflow/python/kernel_tests/collective_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1182:     self.assertAllEqual(self.evaluate(f()), [[3.], [3.]])",
      "1185: class CollectiveOpsV3Test(test.TestCase, parameterized.TestCase):",
      "1187:   def setUp(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1185: @combinations.generate(",
      "1186:     combinations.times(",
      "1187:         combinations.combine(collective_op=[",
      "1188:             combinations.NamedObject('all_reduce_v2',",
      "1189:                                      CollectiveOpsV2.all_reduce),",
      "1190:             combinations.NamedObject('all_gather_v2',",
      "1191:                                      CollectiveOpsV2.all_gather)",
      "1192:         ]), device_combination))",
      "1193: class InvalidInputTest(test.TestCase, parameterized.TestCase):",
      "1195:   def setUp(self):",
      "1196:     _setup_context()",
      "1197:     super().setUp()",
      "1199:   def testInvalidGroupKey(self, collective_op, device, communication):",
      "1200:     dev0 = '/device:%s:0' % device",
      "1201:     group_size = 2",
      "1202:     group_key = [100]",
      "1203:     instance_key = 100",
      "1204:     in_tensor = constant_op.constant([1.])",
      "1206:     with self.assertRaises(errors.InvalidArgumentError):",
      "1207:       with ops.device(dev0):",
      "1208:         collective_op(",
      "1209:             in_tensor,",
      "1210:             group_size,",
      "1211:             group_key,",
      "1212:             instance_key,",
      "1213:             communication_hint=communication)",
      "1215:   def testInvalidGroupSize(self, collective_op, device, communication):",
      "1216:     dev0 = '/device:%s:0' % device",
      "1217:     group_size = -2",
      "1218:     group_key = 100",
      "1219:     instance_key = 100",
      "1220:     in_tensor = constant_op.constant([1.])",
      "1222:     with self.assertRaises(errors.InvalidArgumentError):",
      "1223:       with ops.device(dev0):",
      "1224:         collective_op(",
      "1225:             in_tensor,",
      "1226:             group_size,",
      "1227:             group_key,",
      "1228:             instance_key,",
      "1229:             communication_hint=communication)",
      "1231:   def testInvalidInstanceKey(self, collective_op, device, communication):",
      "1232:     dev0 = '/device:%s:0' % device",
      "1233:     group_size = 2",
      "1234:     group_key = 100",
      "1235:     instance_key = [100]",
      "1236:     in_tensor = constant_op.constant([1.])",
      "1238:     with self.assertRaises(errors.InvalidArgumentError):",
      "1239:       with ops.device(dev0):",
      "1240:         collective_op(",
      "1241:             in_tensor,",
      "1242:             group_size,",
      "1243:             group_key,",
      "1244:             instance_key,",
      "1245:             communication_hint=communication)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe8ea9adc81ed2d05e210572cf5203f1f465f2c3",
      "candidate_info": {
        "commit_hash": "fe8ea9adc81ed2d05e210572cf5203f1f465f2c3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/fe8ea9adc81ed2d05e210572cf5203f1f465f2c3",
        "files": [
          "tensorflow/core/kernels/collective_ops.cc",
          "tensorflow/python/kernel_tests/collective_ops_test.py"
        ],
        "message": "Fix undefined behavior in CollectiveReduceV2 and others\n\nWe should not call done after it's moved.\n\nPiperOrigin-RevId: 400838185\nChange-Id: Ifc979740054b8f8c6f4d50acc89472fe60c4fdb1",
        "before_after_code_files": [
          "tensorflow/core/kernels/collective_ops.cc||tensorflow/core/kernels/collective_ops.cc",
          "tensorflow/python/kernel_tests/collective_ops_test.py||tensorflow/python/kernel_tests/collective_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/collective_ops.cc||tensorflow/core/kernels/collective_ops.cc",
            "tensorflow/python/kernel_tests/collective_ops_test.py||tensorflow/python/kernel_tests/collective_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/collective_ops.cc||tensorflow/core/kernels/collective_ops.cc",
            "tensorflow/python/kernel_tests/collective_ops_test.py||tensorflow/python/kernel_tests/collective_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/collective_ops.cc||tensorflow/core/kernels/collective_ops.cc": [
          "File: tensorflow/core/kernels/collective_ops.cc -> tensorflow/core/kernels/collective_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:                               const Tensor& group_size, const Tensor& group_key,",
          "495:                               const Tensor& instance_key) {",
          "496:     if (group_size.dims() > 0) {",
          "499:     }",
          "500:     if (group_key.dims() > 0) {",
          "503:     }",
          "504:     if (instance_key.dims() > 0) {",
          "506:           \"Unexpected dimensions on input instance_key, got \",",
          "507:           instance_key.shape().DebugString());",
          "508:     }",
          "",
          "[Removed Lines]",
          "497:       return errors::Internal(\"Unexpected dimensions on input group_size, got \",",
          "498:                               group_size.shape().DebugString());",
          "501:       return errors::Internal(\"Unexpected dimensions on input group_key, got \",",
          "502:                               group_key.shape().DebugString());",
          "505:       return errors::Internal(",
          "",
          "[Added Lines]",
          "497:       return errors::InvalidArgument(",
          "498:           \"Unexpected dimensions on input group_size, got \",",
          "499:           group_size.shape().DebugString());",
          "502:       return errors::InvalidArgument(",
          "503:           \"Unexpected dimensions on input group_key, got \",",
          "504:           group_key.shape().DebugString());",
          "507:       return errors::InvalidArgument(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "629:     col_params->instance.shape = c->input(0).shape();",
          "630:     col_params->merge_op = merge_op_.get();",
          "631:     col_params->final_op = final_op_.get();",
          "",
          "[Removed Lines]",
          "628:                          done);",
          "",
          "[Added Lines]",
          "630:                          done_with_cleanup);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "856:   Status CheckInputs(Tensor group_size_t, Tensor group_key_t) {",
          "857:     if (group_size_t.dims() > 0) {",
          "859:           \"Unexpected dimensions on input group_size. \"",
          "860:           \"It shoulbe a scalar, got tensor with shape \",",
          "861:           group_size_t.shape().DebugString());",
          "862:     }",
          "863:     if (group_key_t.dims() > 0) {",
          "866:     }",
          "868:     auto group_size = group_size_t.unaligned_flat<int32>()(0);",
          "",
          "[Removed Lines]",
          "858:       return errors::Internal(",
          "864:       return errors::Internal(\"Unexpected dimensions on input group_key, got \",",
          "865:                               group_key_t.shape().DebugString());",
          "",
          "[Added Lines]",
          "860:       return errors::InvalidArgument(",
          "866:       return errors::InvalidArgument(",
          "867:           \"Unexpected dimensions on input group_key, got \",",
          "868:           group_key_t.shape().DebugString());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1084:     };",
          "1085:     core::RefCountPtr<CollectiveGroupResource> resource;",
          "1086:     OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),",
          "1089:     Tensor group_assignment = c->input(2);",
          "",
          "[Removed Lines]",
          "1087:                          done);",
          "",
          "[Added Lines]",
          "1090:                          done_with_cleanup);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1134:     };",
          "1135:     core::RefCountPtr<CollectiveGroupResource> resource;",
          "1136:     OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),",
          "1139:     Tensor group_assignment = c->input(2);",
          "",
          "[Removed Lines]",
          "1137:                          done);",
          "",
          "[Added Lines]",
          "1140:                          done_with_cleanup);",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/collective_ops_test.py||tensorflow/python/kernel_tests/collective_ops_test.py": [
          "File: tensorflow/python/kernel_tests/collective_ops_test.py -> tensorflow/python/kernel_tests/collective_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1186:     self.assertAllEqual(self.evaluate(f()), [[3.], [3.]])",
          "1189: class CollectiveOpsV3Test(test.TestCase, parameterized.TestCase):",
          "1191:   def setUp(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1189: @combinations.generate(",
          "1190:     combinations.times(",
          "1191:         combinations.combine(collective_op=[",
          "1192:             combinations.NamedObject('all_reduce_v2',",
          "1193:                                      CollectiveOpsV2.all_reduce),",
          "1194:             combinations.NamedObject('all_gather_v2',",
          "1195:                                      CollectiveOpsV2.all_gather)",
          "1196:         ]), device_combination))",
          "1197: class InvalidInputTest(test.TestCase, parameterized.TestCase):",
          "1199:   def setUp(self):",
          "1200:     _setup_context()",
          "1201:     super().setUp()",
          "1203:   def testInvalidGroupKey(self, collective_op, device, communication):",
          "1204:     dev0 = '/device:%s:0' % device",
          "1205:     group_size = 2",
          "1206:     group_key = [100]",
          "1207:     instance_key = 100",
          "1208:     in_tensor = constant_op.constant([1.])",
          "1210:     with self.assertRaises(errors.InvalidArgumentError):",
          "1211:       with ops.device(dev0):",
          "1212:         collective_op(",
          "1213:             in_tensor,",
          "1214:             group_size,",
          "1215:             group_key,",
          "1216:             instance_key,",
          "1217:             communication_hint=communication)",
          "1219:   def testInvalidGroupSize(self, collective_op, device, communication):",
          "1220:     dev0 = '/device:%s:0' % device",
          "1221:     group_size = -2",
          "1222:     group_key = 100",
          "1223:     instance_key = 100",
          "1224:     in_tensor = constant_op.constant([1.])",
          "1226:     with self.assertRaises(errors.InvalidArgumentError):",
          "1227:       with ops.device(dev0):",
          "1228:         collective_op(",
          "1229:             in_tensor,",
          "1230:             group_size,",
          "1231:             group_key,",
          "1232:             instance_key,",
          "1233:             communication_hint=communication)",
          "1235:   def testInvalidInstanceKey(self, collective_op, device, communication):",
          "1236:     dev0 = '/device:%s:0' % device",
          "1237:     group_size = 2",
          "1238:     group_key = 100",
          "1239:     instance_key = [100]",
          "1240:     in_tensor = constant_op.constant([1.])",
          "1242:     with self.assertRaises(errors.InvalidArgumentError):",
          "1243:       with ops.device(dev0):",
          "1244:         collective_op(",
          "1245:             in_tensor,",
          "1246:             group_size,",
          "1247:             group_key,",
          "1248:             instance_key,",
          "1249:             communication_hint=communication)",
          "",
          "---------------"
        ]
      }
    }
  ]
}