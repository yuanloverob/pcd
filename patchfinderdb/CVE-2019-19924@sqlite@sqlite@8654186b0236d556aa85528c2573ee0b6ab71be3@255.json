{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "323096175ee537ccf20ff370868170ebc32a2c32",
      "candidate_info": {
        "commit_hash": "323096175ee537ccf20ff370868170ebc32a2c32",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/323096175ee537ccf20ff370868170ebc32a2c32",
        "files": [
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the vfslog.c extension from the testfixture target in main.mk, as that extension has no TCL bindings and is inaccessible.\n\nFossilOrigin-Name: d71f8bbc4efd8af935671c4e7626862d6e5a4c2e51527b9e82b2f0c94ddf6e93",
        "before_after_code_files": [
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:   $(TOP)/ext/misc/totype.c \\",
          "379:   $(TOP)/ext/misc/unionvtab.c \\",
          "380:   $(TOP)/ext/misc/wholenumber.c \\",
          "382:   $(TOP)/ext/misc/zipfile.c \\",
          "383:   $(TOP)/ext/fts5/fts5_tcl.c \\",
          "384:   $(TOP)/ext/fts5/fts5_test_mi.c \\",
          "",
          "[Removed Lines]",
          "381:   $(TOP)/ext/misc/vfslog.c \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 31eb27f438ad727b095a518bfe0f7ed37cb806fc1e6929b821eddcc6cc9de260",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a5f9bc49ce598fa3a3829f5f2c24179d1f44455",
      "candidate_info": {
        "commit_hash": "3a5f9bc49ce598fa3a3829f5f2c24179d1f44455",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3a5f9bc49ce598fa3a3829f5f2c24179d1f44455",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/delete.c",
          "src/sqliteInt.h",
          "test/altertab.test"
        ],
        "message": "More restrictions on changes to shadow tables when in defensive mode.\n\nFossilOrigin-Name: bae76a5c40703871e5ce4cd23d6fae5a3836606f524a63b01ac828c7a602c5e9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: static int isAlterableTable(Parse *pParse, Table *pTab){",
          "32:   if( 0==sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)",
          "33: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "37:    )",
          "38: #endif",
          "39:   ){",
          "",
          "[Removed Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)",
          "35:      && (pParse->db->flags & SQLITE_Defensive)",
          "36:      && pParse->db->nVdbeExec==0",
          "",
          "[Added Lines]",
          "34:    || ( (pTab->tabFlags & TF_Shadow)!=0",
          "35:         && sqlite3ReadOnlyShadowTables(pParse->db)",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "856:       }",
          "857:     }",
          "858:   }else{",
          "861:     ){",
          "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
          "863:                       zName);",
          "864:       return SQLITE_ERROR;",
          "865:     }",
          "866:   }",
          "867:   return SQLITE_OK;",
          "868: }",
          "",
          "[Removed Lines]",
          "859:     if( pParse->nested==0",
          "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
          "",
          "[Added Lines]",
          "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
          "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
          "",
          "[Added Lines]",
          "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
          "2148:   return pMod->pModule->xShadowName(zTail+1);",
          "2149: }",
          "",
          "[Removed Lines]",
          "2150: #else",
          "2151: # define isShadowTableName(x,y) 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2190:   p = pParse->pNewTable;",
          "2191:   if( p==0 ) return;",
          "2194:     p->tabFlags |= TF_Shadow;",
          "2195:   }",
          "",
          "[Removed Lines]",
          "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "",
          "[Added Lines]",
          "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "[Removed Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "",
          "[Added Lines]",
          "2900: int sqlite3ReadOnlyShadowTables(sqlite3 *db){",
          "2901: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "2902:   if( (db->flags & SQLITE_Defensive)!=0",
          "2903:    && db->pVtabCtx==0",
          "2904:    && db->nVdbeExec==0",
          "2905:   ){",
          "2906:     return 1;",
          "2907:   }",
          "2908: #endif",
          "2909:   return 0;",
          "2910: }",
          "2915: static int tableMayNotBeDropped(sqlite3 *db, Table *pTab){",
          "2921:   if( (pTab->tabFlags & TF_Shadow)!=0 && sqlite3ReadOnlyShadowTables(db) ){",
          "2922:     return 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2979:     }",
          "2980:   }",
          "2981: #endif",
          "2983:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2984:     goto exit_drop_table;",
          "2985:   }",
          "",
          "[Removed Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "[Added Lines]",
          "2996:   if( tableMayNotBeDropped(db, pTab) ){",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     return sqlite3WritableSchema(db)==0 && pParse->nested==0;",
          "71:   }",
          "72:   assert( pTab->tabFlags & TF_Shadow );",
          "78: }",
          "",
          "[Removed Lines]",
          "73:   return (db->flags & SQLITE_Defensive)!=0",
          "74: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "75:           && db->pVtabCtx==0",
          "76: #endif",
          "77:           && db->nVdbeExec==0;",
          "",
          "[Added Lines]",
          "73:   return sqlite3ReadOnlyShadowTables(db);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4547:    );",
          "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
          "4549: #endif",
          "4550: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
          "4551: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
          "4552: void sqlite3VtabMakeWritable(Parse*,Table*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
          "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
          "4553: #else",
          "4554: # define sqlite3ShadowTableName(A,B) 0",
          "4555: #endif",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:   } {1 {table y1_segments may not be modified}}",
          "549:   do_catchsql_test 16.20 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "558:     ALTER TABLE y1 RENAME TO z1;",
          "559:   }",
          "",
          "[Removed Lines]",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "553:   do_catchsql_test 16.21 {",
          "",
          "[Added Lines]",
          "553:   do_catchsql_test 16.20 {",
          "554:     ALTER TABLE y1_segments RENAME TO abc;",
          "555:   } {1 {table y1_segments may not be altered}}",
          "556:   sqlite3_db_config db DEFENSIVE 0",
          "557:   do_catchsql_test 16.22 {",
          "558:     ALTER TABLE y1_segments RENAME TO abc;",
          "559:   } {0 {}}",
          "560:   sqlite3_db_config db DEFENSIVE 1",
          "561:   do_catchsql_test 16.23 {",
          "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
          "563:   } {1 {object name reserved for internal use: y1_segments}}",
          "564:   do_catchsql_test 16.24 {",
          "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
          "566:   } {1 {object name reserved for internal use: y1_segments}}",
          "567:   sqlite3_db_config db DEFENSIVE 0",
          "568:   do_catchsql_test 16.25 {",
          "569:     ALTER TABLE abc RENAME TO y1_segments;",
          "570:   } {0 {}}",
          "571:   sqlite3_db_config db DEFENSIVE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6c628e98ca26a3f3cc3b2d832ef118a1eac16dc",
      "candidate_info": {
        "commit_hash": "e6c628e98ca26a3f3cc3b2d832ef118a1eac16dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6c628e98ca26a3f3cc3b2d832ef118a1eac16dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Make sure the extra bytes allocated for the saved cursor position by check-in [160b1e31c0f27257] are initialized to zero.\n\nFossilOrigin-Name: 2737564929e86ead84a3ff6512369268198d38b46e3e02866f8ce34babc76cb9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1e12fa2a8eb5648a96cc2d8d39899d6f87c5e2269cec7de486964c8b915e724",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:     if( pKey ){",
          "673:       rc = sqlite3BtreePayload(pCur, 0, (int)pCur->nKey, pKey);",
          "674:       if( rc==SQLITE_OK ){",
          "675:         pCur->pKey = pKey;",
          "676:       }else{",
          "677:         sqlite3_free(pKey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "675:         memset(((u8*)pKey)+pCur->nKey, 0, 9+8);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
      "candidate_info": {
        "commit_hash": "01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Trivial performance improvement for balance().\n\nFossilOrigin-Name: c7920f5569022f645ec4dbfce8c228880263785c708c2c0ac065e770c438b1d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 777fec84a5db968e033883920586ec0afef65578be0c1eb3021fce525111edde",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8307:   VVA_ONLY( int balance_deeper_called = 0 );",
          "8309:   do {",
          "8311:     MemPage *pPage = pCur->pPage;",
          "8313:     if( NEVER(pPage->nFree<0) && btreeComputeFreeSpace(pPage) ) break;",
          "8315:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8310:     int iPage = pCur->iPage;",
          "8314:     if( iPage==0 ){",
          "",
          "[Added Lines]",
          "8310:     int iPage;",
          "8314:     if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8315:       break;",
          "8316:     }else if( (iPage = pCur->iPage)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8332:       }else{",
          "8333:         break;",
          "8334:       }",
          "8337:     }else{",
          "8338:       MemPage * const pParent = pCur->apPage[iPage-1];",
          "8339:       int const iIdx = pCur->aiIdx[iPage-1];",
          "",
          "[Removed Lines]",
          "8335:     }else if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8336:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "594b124f216641e7d6df059cca84c45d4f0ab393",
      "candidate_info": {
        "commit_hash": "594b124f216641e7d6df059cca84c45d4f0ab393",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/594b124f216641e7d6df059cca84c45d4f0ab393",
        "files": [
          "ext/misc/sha1.c",
          "manifest",
          "manifest.uuid",
          "src/hwtime.h",
          "tool/dbhash.c"
        ],
        "message": "Changes to extensions and test logic so that the build works with gcc and with -std=iso9899:1999\n\nFossilOrigin-Name: 2575a68c3965e72f2ab211d933012442755afe6a9b7de9e9e50cdd2155fd1ec8",
        "before_after_code_files": [
          "ext/misc/sha1.c||ext/misc/sha1.c",
          "manifest.uuid||manifest.uuid",
          "src/hwtime.h||src/hwtime.h",
          "tool/dbhash.c||tool/dbhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/sha1.c||ext/misc/sha1.c": [
          "File: ext/misc/sha1.c -> ext/misc/sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   unsigned char buffer[64];",
          "40: };",
          "56: #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))",
          "57: #define rol(x,k) SHA_ROT(x,k,32-(k))",
          "58: #define ror(x,k) SHA_ROT(x,32-(k),k)",
          "62: #define blk0le(i) (block[i] = (ror(block[i],8)&0xFF00FF00) \\",
          "63:     |(rol(block[i],8)&0x00FF00FF))",
          "",
          "[Removed Lines]",
          "43: #if __GNUC__ && (defined(__i386__) || defined(__x86_64__))",
          "49: #define SHA_ROT(op, x, k) \\",
          "50:         ({ unsigned int y; asm(op \" %1,%0\" : \"=r\" (y) : \"I\" (k), \"0\" (x)); y; })",
          "51: #define rol(x,k) SHA_ROT(\"roll\", x, k)",
          "52: #define ror(x,k) SHA_ROT(\"rorl\", x, k)",
          "54: #else",
          "59: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a48f6e17599d7ec794cfcd60858d6a69cf05caaae9321048b111fedd86a3b5b2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/hwtime.h||src/hwtime.h": [
          "File: src/hwtime.h -> src/hwtime.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   #if defined(__GNUC__)",
          "",
          "[Removed Lines]",
          "25: #if (defined(__GNUC__) || defined(_MSC_VER)) && \\",
          "26:       (defined(i386) || defined(__i386__) || defined(_M_IX86))",
          "",
          "[Added Lines]",
          "25: #if !defined(__STRICT_ANSI__) && \\",
          "26:     (defined(__GNUC__) || defined(_MSC_VER)) && \\",
          "27:     (defined(i386) || defined(__i386__) || defined(_M_IX86))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   #endif",
          "49:   __inline__ sqlite_uint64 sqlite3Hwtime(void){",
          "50:       unsigned long val;",
          "",
          "[Removed Lines]",
          "47: #elif (defined(__GNUC__) && defined(__x86_64__))",
          "",
          "[Added Lines]",
          "48: #elif !defined(__STRICT_ANSI__) && (defined(__GNUC__) && defined(__x86_64__))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:       return val;",
          "53:   }",
          "57:   __inline__ sqlite_uint64 sqlite3Hwtime(void){",
          "58:       unsigned long long retval;",
          "",
          "[Removed Lines]",
          "55: #elif (defined(__GNUC__) && defined(__ppc__))",
          "",
          "[Added Lines]",
          "56: #elif !defined(__STRICT_ANSI__) && (defined(__GNUC__) && defined(__ppc__))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70: #else",
          "81:   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }",
          "",
          "[Removed Lines]",
          "72:   #error Need implementation of sqlite3Hwtime() for your platform.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbhash.c||tool/dbhash.c": [
          "File: tool/dbhash.c -> tool/dbhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: #define SHA_ROT(x,l,r) ((x) << (l) | (x) >> (r))",
          "79: #define rol(x,k) SHA_ROT(x,k,32-(k))",
          "80: #define ror(x,k) SHA_ROT(x,32-(k),k)",
          "84: #define blk0le(i) (block[i] = (ror(block[i],8)&0xFF00FF00) \\",
          "85:     |(rol(block[i],8)&0x00FF00FF))",
          "",
          "[Removed Lines]",
          "65: #if __GNUC__ && (defined(__i386__) || defined(__x86_64__))",
          "71: #define SHA_ROT(op, x, k) \\",
          "72:         ({ unsigned int y; asm(op \" %1,%0\" : \"=r\" (y) : \"I\" (k), \"0\" (x)); y; })",
          "73: #define rol(x,k) SHA_ROT(\"roll\", x, k)",
          "74: #define ror(x,k) SHA_ROT(\"rorl\", x, k)",
          "76: #else",
          "81: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}