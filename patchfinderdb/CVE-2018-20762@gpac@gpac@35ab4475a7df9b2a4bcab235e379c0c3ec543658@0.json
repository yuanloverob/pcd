{
  "cve_id": "CVE-2018-20762",
  "cve_desc": "GPAC version 0.7.1 and earlier has a buffer overflow vulnerability in the cat_multiple_files function in applications/mp4box/fileimport.c when MP4Box is used for a local directory containing crafted filenames.",
  "repo": "gpac/gpac",
  "patch_hash": "35ab4475a7df9b2a4bcab235e379c0c3ec543658",
  "patch_info": {
    "commit_hash": "35ab4475a7df9b2a4bcab235e379c0c3ec543658",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/35ab4475a7df9b2a4bcab235e379c0c3ec543658",
    "files": [
      "applications/mp4box/fileimport.c",
      "applications/mp4client/main.c",
      "modules/ffmpeg_in/ffmpeg_demux.c",
      "src/scene_manager/scene_manager.c"
    ],
    "message": "fix some overflows due to strcpy\n\nfixes #1184, #1186, #1187 among other things",
    "before_after_code_files": [
      "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c",
      "applications/mp4client/main.c||applications/mp4client/main.c",
      "modules/ffmpeg_in/ffmpeg_demux.c||modules/ffmpeg_in/ffmpeg_demux.c",
      "src/scene_manager/scene_manager.c||src/scene_manager/scene_manager.c"
    ]
  },
  "patch_diff": {
    "applications/mp4box/fileimport.c||applications/mp4box/fileimport.c": [
      "File: applications/mp4box/fileimport.c -> applications/mp4box/fileimport.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2356:  cat_enum.align_timelines = align_timelines;",
      "2357:  cat_enum.allow_add_in_command = allow_add_in_command;",
      "2359:  strcpy(cat_enum.szPath, fileName);",
      "2360:  sep = strrchr(cat_enum.szPath, GF_PATH_SEPARATOR);",
      "2361:  if (!sep) sep = strrchr(cat_enum.szPath, '/');",
      "2362:  if (!sep) {",
      "2363:   strcpy(cat_enum.szPath, \".\");",
      "2364:   strcpy(cat_enum.szRad1, fileName);",
      "2365:  } else {",
      "2366:   strcpy(cat_enum.szRad1, sep+1);",
      "2367:   sep[0] = 0;",
      "2368:  }",
      "2369:  sep = strchr(cat_enum.szRad1, '*');",
      "2370:  strcpy(cat_enum.szRad2, sep+1);",
      "2371:  sep[0] = 0;",
      "2372:  sep = strchr(cat_enum.szRad2, '%');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2359:  if (strlen(fileName) >= sizeof(cat_enum.szPath)) {",
      "2360:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"File name %s is too long.\\n\", fileName));",
      "2361:   return GF_NOT_SUPPORTED;",
      "2362:  }",
      "2368:   if (strlen(fileName) >= sizeof(cat_enum.szRad1)) {",
      "2369:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"File name %s is too long.\\n\", fileName));",
      "2370:    return GF_NOT_SUPPORTED;",
      "2371:   }",
      "2374:   if (strlen(sep + 1) >= sizeof(cat_enum.szRad1)) {",
      "2375:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"File name %s is too long.\\n\", (sep + 1)));",
      "2376:    return GF_NOT_SUPPORTED;",
      "2377:   }",
      "2382:  if (strlen(sep + 1) >= sizeof(cat_enum.szRad2)) {",
      "2383:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"File name %s is too long.\\n\", (sep + 1)));",
      "2384:   return GF_NOT_SUPPORTED;",
      "2385:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2374:  if (!sep) sep = strchr(cat_enum.szRad2, ':');",
      "2375:  strcpy(cat_enum.szOpt, \"\");",
      "2376:  if (sep) {",
      "2377:   strcpy(cat_enum.szOpt, sep);",
      "2378:   sep[0] = 0;",
      "2379:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2393:   if (strlen(sep) >= sizeof(cat_enum.szOpt)) {",
      "2394:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"Invalid option: %s.\\n\", sep));",
      "2395:    return GF_NOT_SUPPORTED;",
      "2396:   }",
      "",
      "---------------"
    ],
    "applications/mp4client/main.c||applications/mp4client/main.c": [
      "File: applications/mp4client/main.c -> applications/mp4client/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "910:   break;",
      "911:  case GF_EVENT_NAVIGATE:",
      "912:   if (gf_term_is_supported_url(term, evt->navigate.to_url, 1, no_mime_check)) {",
      "914:    fprintf(stderr, \"Navigating to URL %s\\n\", the_url);",
      "915:    gf_term_navigate_to(term, evt->navigate.to_url);",
      "916:    return 1;",
      "",
      "[Removed Lines]",
      "913:    strcpy(the_url, evt->navigate.to_url);",
      "",
      "[Added Lines]",
      "913:    strncpy(the_url, evt->navigate.to_url, sizeof(the_url)-1);",
      "914:    the_url[sizeof(the_url) - 1] = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1099:  }",
      "1100:  {",
      "1101:   const size_t sepIdx = sep - opt_string;",
      "1102:   strncpy(szSec, opt_string, sepIdx);",
      "1103:   szSec[sepIdx] = 0;",
      "1104:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1103:   if (sepIdx >= sizeof(szSec)) {",
      "1104:    fprintf(stderr, \"Badly formatted option %s - Section name is too long\\n\", opt_string);",
      "1105:    return;",
      "1106:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1110:  }",
      "1111:  {",
      "1112:   const size_t sepIdx = sep2 - sep;",
      "1113:   strncpy(szKey, sep, sepIdx);",
      "1114:   szKey[sepIdx] = 0;",
      "1115:   strcpy(szVal, sep2+1);",
      "1116:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1119:   if (sepIdx >= sizeof(szKey)) {",
      "1120:    fprintf(stderr, \"Badly formatted option %s - key name is too long\\n\", opt_string);",
      "1121:    return;",
      "1122:   }",
      "1125:   if (strlen(sep2 + 1) >= sizeof(szVal)) {",
      "1126:    fprintf(stderr, \"Badly formatted option %s - value is too long\\n\", opt_string);",
      "1127:    return;",
      "1128:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1680:  else if (!gui_mode && url_arg) {",
      "1681:   char *ext;",
      "1684:   ext = strrchr(the_url, '.');",
      "1685:   if (ext && (!stricmp(ext, \".m3u\") || !stricmp(ext, \".pls\"))) {",
      "1686:    GF_Err e = GF_OK;",
      "",
      "[Removed Lines]",
      "1683:   strcpy(the_url, url_arg);",
      "",
      "[Added Lines]",
      "1697:   if (strlen(url_arg) >= sizeof(the_url)) {",
      "1698:    fprintf(stderr, \"Input url %s is too long, truncating to %d chars.\\n\", url_arg, (int)(sizeof(the_url) - 1));",
      "1699:    strncpy(the_url, url_arg, sizeof(the_url)-1);",
      "1700:    the_url[sizeof(the_url) - 1] = 0;",
      "1701:   }",
      "1702:   else {",
      "1703:    strcpy(the_url, url_arg);",
      "1704:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1692:     GF_DownloadSession *sess = gf_dm_sess_new(term->downloader, the_url, GF_NETIO_SESSION_NOT_THREADED, NULL, NULL, &e);",
      "1693:     if (sess) {",
      "1694:      e = gf_dm_sess_process(sess);",
      "1696:      gf_dm_sess_del(sess);",
      "1697:     }",
      "1698:    }",
      "",
      "[Removed Lines]",
      "1695:      if (!e) strcpy(the_url, gf_dm_sess_get_cache_name(sess));",
      "",
      "[Added Lines]",
      "1716:      if (!e) {",
      "1717:       strncpy(the_url, gf_dm_sess_get_cache_name(sess), sizeof(the_url) - 1);",
      "1718:       the_url[sizeof(the_cfg) - 1] = 0;",
      "1719:      }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1715:   fprintf(stderr, \"Hit 'h' for help\\n\\n\");",
      "1716:   str = gf_cfg_get_key(cfg_file, \"General\", \"StartupFile\");",
      "1717:   if (str) {",
      "1719:    gf_term_connect(term, str);",
      "1720:    startup_file = 1;",
      "1721:    is_connected = 1;",
      "",
      "[Removed Lines]",
      "1718:    strcpy(the_url, \"MP4Client \"GPAC_FULL_VERSION);",
      "",
      "[Added Lines]",
      "1742:    strncpy(the_url, \"MP4Client \"GPAC_FULL_VERSION , sizeof(the_url)-1);",
      "1743:    the_url[sizeof(the_url) - 1] = 0;",
      "",
      "---------------"
    ],
    "modules/ffmpeg_in/ffmpeg_demux.c||modules/ffmpeg_in/ffmpeg_demux.c": [
      "File: modules/ffmpeg_in/ffmpeg_demux.c -> modules/ffmpeg_in/ffmpeg_demux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:  AVFormatContext *ctx;",
      "228:  AVOutputFormat *fmt_out;",
      "229:  Bool ret = GF_FALSE;",
      "231:  const char *szExtList;",
      "232:  FFDemux *ffd;",
      "233:  if (!plug || !url)",
      "",
      "[Removed Lines]",
      "230:  char *ext, szName[1000], szExt[20];",
      "",
      "[Added Lines]",
      "230:  char *ext, szName[1024], szExt[20];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "244:  ffd = (FFDemux*)plug->priv;",
      "246:  strcpy(szName, url);",
      "247:  ext = strrchr(szName, '#');",
      "248:  if (ext) ext[0] = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246:  if (strlen(url) >= sizeof(szName))",
      "247:   return GF_FALSE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "252:  ext = strrchr(szName, '.');",
      "253:  if (ext && strlen(ext) > 19) ext = NULL;",
      "256:   strcpy(szExt, &ext[1]);",
      "257:   strlwr(szExt);",
      "258: #ifndef FFMPEG_DEMUX_ENABLE_MPEG2TS",
      "",
      "[Removed Lines]",
      "255:  if (ext && strlen(ext) > 1) {",
      "",
      "[Added Lines]",
      "258:  if (ext && strlen(ext) > 1 && strlen(ext) <= sizeof(szExt)) {",
      "",
      "---------------"
    ],
    "src/scene_manager/scene_manager.c||src/scene_manager/scene_manager.c": [
      "File: src/scene_manager/scene_manager.c -> src/scene_manager/scene_manager.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "646:     ext[0] = '.';",
      "647:     ext = anext;",
      "648:    }",
      "649:    strcpy(szExt, &ext[1]);",
      "650:    strlwr(szExt);",
      "651:    if (strstr(szExt, \"bt\")) load->type = GF_SM_LOAD_BT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "649:    if (strlen(ext) < 2 || strlen(ext) > sizeof(szExt)) {",
      "650:     GF_LOG(GF_LOG_ERROR, GF_LOG_SCENE, (\"[Scene Manager] invalid extension in file name %s\\n\", load->fileName));",
      "651:     return GF_NOT_SUPPORTED;",
      "652:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1c449a34fe0b50aaffb881bfb9d7c5ab0bb18cdd",
      "candidate_info": {
        "commit_hash": "1c449a34fe0b50aaffb881bfb9d7c5ab0bb18cdd",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/1c449a34fe0b50aaffb881bfb9d7c5ab0bb18cdd",
        "files": [
          "applications/mp4client/main.c",
          "src/media_tools/text_import.c"
        ],
        "message": "add some boundary checks on gf_text_get_utf8_line (#1188)",
        "before_after_code_files": [
          "applications/mp4client/main.c||applications/mp4client/main.c",
          "src/media_tools/text_import.c||src/media_tools/text_import.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "applications/mp4client/main.c||applications/mp4client/main.c"
          ],
          "candidate": [
            "applications/mp4client/main.c||applications/mp4client/main.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4client/main.c||applications/mp4client/main.c": [
          "File: applications/mp4client/main.c -> applications/mp4client/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1715:      e = gf_dm_sess_process(sess);",
          "1716:      if (!e) {",
          "1717:       strncpy(the_url, gf_dm_sess_get_cache_name(sess), sizeof(the_url) - 1);",
          "1719:      }",
          "1720:      gf_dm_sess_del(sess);",
          "1721:     }",
          "",
          "[Removed Lines]",
          "1718:       the_url[sizeof(the_cfg) - 1] = 0;",
          "",
          "[Added Lines]",
          "1718:       the_url[sizeof(the_url) - 1] = 0;",
          "",
          "---------------"
        ],
        "src/media_tools/text_import.c||src/media_tools/text_import.c": [
          "File: src/media_tools/text_import.c -> src/media_tools/text_import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:  if (unicode_type<=1) {",
          "206:   j=0;",
          "207:   len = (u32) strlen(szLine);",
          "209:    if (!unicode_type && (szLine[i] & 0x80)) {",
          "211:     if ((szLine[i+1] & 0xc0) != 0x80) {",
          "215:     }",
          "217:     else if ( (szLine[i] & 0xe0) == 0xc0) {",
          "221:     }",
          "223:     else if ( (szLine[i] & 0xf0) == 0xe0) {",
          "230:     }",
          "232:     else if ( (szLine[i] & 0xf8) == 0xf0) {",
          "242:     } else {",
          "243:      i+=1;",
          "244:      continue;",
          "245:     }",
          "246:    }",
          "249:   }",
          "251:   strcpy(szLine, szLineConv);",
          "252:   return sOK;",
          "253:  }",
          "",
          "[Removed Lines]",
          "208:   for (i=0; i<len; i++) {",
          "212:      szLineConv[j] = 0xc0 | ( (szLine[i] >> 6) & 0x3 );",
          "213:      j++;",
          "214:      szLine[i] &= 0xbf;",
          "218:      szLineConv[j] = szLine[i];",
          "219:      i++;",
          "220:      j++;",
          "224:      szLineConv[j] = szLine[i];",
          "225:      i++;",
          "226:      j++;",
          "227:      szLineConv[j] = szLine[i];",
          "228:      i++;",
          "229:      j++;",
          "233:      szLineConv[j] = szLine[i];",
          "234:      i++;",
          "235:      j++;",
          "236:      szLineConv[j] = szLine[i];",
          "237:      i++;",
          "238:      j++;",
          "239:      szLineConv[j] = szLine[i];",
          "240:      i++;",
          "241:      j++;",
          "247:    szLineConv[j] = szLine[i];",
          "248:    j++;",
          "250:   szLineConv[j] = 0;",
          "",
          "[Added Lines]",
          "208:   for (i=0; i<len && j < sizeof(szLineConv) - 1; i++, j++) {",
          "213:      if (j + 1 < sizeof(szLineConv) - 1) {",
          "214:       szLineConv[j] = 0xc0 | ((szLine[i] >> 6) & 0x3);",
          "215:       j++;",
          "216:       szLine[i] &= 0xbf;",
          "217:      }",
          "218:      else",
          "219:       break;",
          "225:      if (j + 1 < sizeof(szLineConv) - 1 && i + 1 < len) {",
          "226:       szLineConv[j] = szLine[i];",
          "227:       i++;",
          "228:       j++;",
          "229:      }",
          "230:      else {",
          "231:       break;",
          "232:      }",
          "236:      if (j + 2 < sizeof(szLineConv) - 1 && i + 2 < len) {",
          "237:       szLineConv[j] = szLine[i];",
          "238:       i++;",
          "239:       j++;",
          "240:       szLineConv[j] = szLine[i];",
          "241:       i++;",
          "242:       j++;",
          "243:      }",
          "244:      else {",
          "245:       break;",
          "246:      }",
          "250:      if (j + 3 < sizeof(szLineConv) - 1 && i + 3 < len) {",
          "251:       szLineConv[j] = szLine[i];",
          "252:       i++;",
          "253:       j++;",
          "254:       szLineConv[j] = szLine[i];",
          "255:       i++;",
          "256:       j++;",
          "257:       szLineConv[j] = szLine[i];",
          "258:       i++;",
          "259:       j++;",
          "260:      }",
          "261:      else {",
          "262:       break;",
          "263:      }",
          "269:    if (j < sizeof(szLineConv)-1 && i<len)",
          "270:     szLineConv[j] = szLine[i];",
          "273:   if (j >= sizeof(szLineConv))",
          "274:    szLineConv[sizeof(szLineConv) - 1] = 0;",
          "275:   else",
          "276:    szLineConv[j] = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}