{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b747068bad531f0300891e6f569f67d55abb93b",
      "candidate_info": {
        "commit_hash": "9b747068bad531f0300891e6f569f67d55abb93b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b747068bad531f0300891e6f569f67d55abb93b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Improvements to \"PRAGMA parser_trace=ON\": Make it a flag pragma, and then use the flag to show the complete SQL text at the beginning of the parse.\n\nFossilOrigin-Name: 507c43537f00d089efb3c3020fb6e826e8f89f3efa2caaa12c5309d35dd0c22e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 916c52dad414b224695d455a42af36f85dff216504c2aa67d1d2c5818cdca8d6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1424: #ifndef NDEBUG",
          "1425:   case PragTyp_PARSER_TRACE: {",
          "1426:     if( zRight ){",
          "1427:       if( sqlite3GetBoolean(zRight, 0) ){",
          "1428:         sqlite3ParserTrace(stdout, \"parser: \");",
          "1429:       }else{",
          "1430:         sqlite3ParserTrace(0, 0);",
          "1431:       }",
          "1432:     }",
          "1433:   }",
          "1434:   break;",
          "1435: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define PragTyp_HEXKEY                        41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "",
          "[Removed Lines]",
          "52: #define PragTyp_PARSER_TRACE                  44",
          "53: #define PragTyp_STATS                         45",
          "",
          "[Added Lines]",
          "52: #define PragTyp_STATS                         44",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475: #endif",
          "477:  {/* zName:     */ \"parser_trace\",",
          "482: #endif",
          "483: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "484:  {/* zName:     */ \"pragma_list\",",
          "",
          "[Removed Lines]",
          "476: #if defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_PARSER_TRACE)",
          "",
          "[Added Lines]",
          "475: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "476: #if defined(SQLITE_DEBUG)",
          "482: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "572:   pParse->rc = SQLITE_OK;",
          "573:   pParse->zTail = zSql;",
          "574:   assert( pzErrMsg!=0 );",
          "576: #ifdef sqlite3Parser_ENGINEALWAYSONSTACK",
          "577:   pEngine = &sEngine;",
          "578:   sqlite3ParserInit(pEngine, pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575: #ifdef SQLITE_DEBUG",
          "576:   if( db->flags & SQLITE_ParserTrace ){",
          "577:     printf(\"parser: [[[%s]]]\\n\", zSql);",
          "578:     sqlite3ParserTrace(stdout, \"parser: \");",
          "579:   }else{",
          "580:     sqlite3ParserTrace(0, 0);",
          "581:   }",
          "582: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   IF:   !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "304:   NAME: parser_trace",
          "307:   NAME: case_sensitive_like",
          "308:   FLAG: NoColumns",
          "",
          "[Removed Lines]",
          "305:   IF:   defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_PARSER_TRACE)",
          "",
          "[Added Lines]",
          "305:   TYPE: FLAG",
          "306:   ARG:  SQLITE_ParserTrace",
          "307:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "308:   IF:   defined(SQLITE_DEBUG)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc8b231098ae2cbc7528370ab722579f5d3b23fc",
      "candidate_info": {
        "commit_hash": "bc8b231098ae2cbc7528370ab722579f5d3b23fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc8b231098ae2cbc7528370ab722579f5d3b23fc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/backup.c"
        ],
        "message": "Fix harmless compiler warning seen with MSVC.\n\nFossilOrigin-Name: 5862b83eb36b93016d37e5b86ebb183d891bb553901facab1e5d83e114a38ec3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/backup.c||src/backup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5a8a23ee5f60a31dbd167a0966d1ab3d0f1c07df2251906cb73f23d1f5466b46",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   if( nSrcReserve!=nDestReserve ){",
          "275:     u32 newPgsz = nSrcPgsz;",
          "276:     rc = sqlite3PagerSetPagesize(pDestPager, &newPgsz, nSrcReserve);",
          "278:   }",
          "279: #endif",
          "",
          "[Removed Lines]",
          "277:     if( rc==SQLITE_OK && newPgsz!=nSrcPgsz ) rc = SQLITE_READONLY;",
          "",
          "[Added Lines]",
          "277:     if( rc==SQLITE_OK && newPgsz!=(u32)nSrcPgsz ) rc = SQLITE_READONLY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a51ddb1ed7ae699d6fc2c49e3dbc3b3c15d49f00",
      "candidate_info": {
        "commit_hash": "a51ddb1ed7ae699d6fc2c49e3dbc3b3c15d49f00",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a51ddb1ed7ae699d6fc2c49e3dbc3b3c15d49f00",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/filter1.test",
          "test/window2.tcl",
          "test/window2.test",
          "test/window9.test"
        ],
        "message": "Fix a window-functions problem that could occur if an ORDER BY clause contains an alias for a window-function that is not a top-level expression.\n\nFossilOrigin-Name: 1cc6cf6407c6e25aeafeca379a93d0ad2614839c07fb3644e46926fce5f1cfab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/filter1.test||test/filter1.test",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36d35dbd5a80dc4a149ed7409cc4b43712622fc4c6a8915b4fbb62fd1d6b7763",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:       pExpr->u.zToken = sqlite3DbStrDup(db, pExpr->u.zToken);",
          "97:       pExpr->flags |= EP_MemToken;",
          "98:     }",
          "99:     sqlite3DbFree(db, pDup);",
          "100:   }",
          "101:   ExprSetProperty(pExpr, EP_Alias);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "100:       pExpr->y.pWin->pOwner = pExpr;",
          "101:     }",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "135: } {1 x 5 2 6 {}}",
          "137: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #-------------------------------------------------------------------------",
          "138: reset_db",
          "139: do_execsql_test 4.0 {",
          "140:   CREATE TABLE t1(a, b, c);",
          "141:   INSERT INTO t1 VALUES('a', 0, 5);",
          "142:   INSERT INTO t1 VALUES('a', 1, 10);",
          "143:   INSERT INTO t1 VALUES('a', 0, 15);",
          "145:   INSERT INTO t1 VALUES('b', 0, 5);",
          "146:   INSERT INTO t1 VALUES('b', 1, 1000);",
          "147:   INSERT INTO t1 VALUES('b', 0, 5);",
          "149:   INSERT INTO t1 VALUES('c', 0, 1);",
          "150:   INSERT INTO t1 VALUES('c', 1, 2);",
          "151:   INSERT INTO t1 VALUES('c', 0, 3);",
          "152: }",
          "154: do_execsql_test 4.1 {",
          "155:   SELECT avg(c) FILTER (WHERE b!=1) AS h FROM t1 GROUP BY a ORDER BY h;",
          "156: } {2.0 5.0 10.0}",
          "157: do_execsql_test 4.2 {",
          "158:   SELECT avg(c) FILTER (WHERE b!=1) AS h FROM t1 GROUP BY a ORDER BY (h+1.0);",
          "159: } {2.0 5.0 10.0}",
          "160: do_execsql_test 4.3 {",
          "161:   SELECT a, avg(c) FILTER (WHERE b!=1) AS h FROM t1 GROUP BY a ORDER BY avg(c);",
          "162: } {c 2.0 a 10.0 b 5.0}",
          "163: do_execsql_test 4.4 {",
          "164:   SELECT a, avg(c) FILTER (WHERE b!=1) FROM t1 GROUP BY a ORDER BY 2",
          "165: } {c 2.0 b 5.0 a 10.0}",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "433: }",
          "436: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435: ==========",
          "437: execsql_test 5.0 {",
          "438:   DROP TABLE IF EXISTS t1;",
          "439:   CREATE TABLE t1(x INTEGER, y INTEGER);",
          "440:   INSERT INTO t1 VALUES(10, 1);",
          "441:   INSERT INTO t1 VALUES(20, 2);",
          "442:   INSERT INTO t1 VALUES(3, 3);",
          "443:   INSERT INTO t1 VALUES(2, 4);",
          "444:   INSERT INTO t1 VALUES(1, 5);",
          "445: }",
          "447: execsql_float_test 5.1 {",
          "448:   SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z;",
          "449: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "902: } {3}",
          "904: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904: #==========================================================================",
          "906: do_execsql_test 5.0 {",
          "907:   DROP TABLE IF EXISTS t1;",
          "908:   CREATE TABLE t1(x INTEGER, y INTEGER);",
          "909:   INSERT INTO t1 VALUES(10, 1);",
          "910:   INSERT INTO t1 VALUES(20, 2);",
          "911:   INSERT INTO t1 VALUES(3, 3);",
          "912:   INSERT INTO t1 VALUES(2, 4);",
          "913:   INSERT INTO t1 VALUES(1, 5);",
          "914: } {}",
          "917: do_test 5.1 {",
          "918:   set myres {}",
          "919:   foreach r [db eval {SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z;}] {",
          "920:     lappend myres [format %.4f [set r]]",
          "921:   }",
          "922:   set res2 {7.2000 8.7500 10.0000 11.0000 15.0000}",
          "923:   set i 0",
          "924:   foreach r [set myres] r2 [set res2] {",
          "925:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "926:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "927:     }",
          "928:     incr i",
          "929:   }",
          "930:   set {} {}",
          "931: } {}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:   BETWEEN 1 AND 1;",
          "196: } {0}",
          "199: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198: #-------------------------------------------------------------------------",
          "199: reset_db",
          "200: do_execsql_test 7.0 {",
          "201:   DROP TABLE IF EXISTS t1;",
          "202:   CREATE TABLE t1(x, y);",
          "203:   INSERT INTO t1 VALUES(10, 1);",
          "204:   INSERT INTO t1 VALUES(20, 2);",
          "205:   INSERT INTO t1 VALUES(3, 3);",
          "206:   INSERT INTO t1 VALUES(2, 4);",
          "207:   INSERT INTO t1 VALUES(1, 5);",
          "208: } {}",
          "211: do_execsql_test 7.1 {",
          "212:   SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z",
          "213: } {",
          "214:   7.2 8.75 10.0 11.0 15.0",
          "215: }",
          "217: do_execsql_test 7.2 {",
          "218:   SELECT avg(x) OVER (ORDER BY y) z FROM t1 ORDER BY (z IS y);",
          "219: } {",
          "220:   10.0 15.0 11.0 8.75 7.2",
          "221: }",
          "223: do_execsql_test 7.3 {",
          "224:   SELECT avg(x) OVER (ORDER BY y) z FROM t1 ORDER BY (y IS z);",
          "225: } {",
          "226:   10.0 15.0 11.0 8.75 7.2",
          "227: }",
          "229: do_execsql_test 7.4 {",
          "230:   SELECT avg(x) OVER (ORDER BY y) z FROM t1 ORDER BY z + 0.0;",
          "231: } {",
          "232:   7.2 8.75 10.0 11.0 15.0",
          "233: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eefc72d12fa7b76393e9a1092dfc8278260da1d9",
      "candidate_info": {
        "commit_hash": "eefc72d12fa7b76393e9a1092dfc8278260da1d9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eefc72d12fa7b76393e9a1092dfc8278260da1d9",
        "files": [
          "ext/fts5/fts5_tokenize.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid an undefined left-shift operation in fts5 caused by malformed utf-8 text.\n\nFossilOrigin-Name: c3a3a11194586bef80a9d7ca54caae8af30d4e7b464b8bb3d257ba2d2ec4791f",
        "before_after_code_files": [
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:       const unsigned char *zCsr = (const unsigned char*)z;",
          "263:       const unsigned char *zTerm = (const unsigned char*)&z[n];",
          "264:       while( zCsr<zTerm ){",
          "266:         int bToken;",
          "267:         READ_UTF8(zCsr, zTerm, iCode);",
          "268:         if( iCode<128 ){",
          "269:           p->aTokenChar[iCode] = (unsigned char)bTokenChars;",
          "270:         }else{",
          "272:           assert( (bToken==0 || bToken==1) );",
          "273:           assert( (bTokenChars==0 || bTokenChars==1) );",
          "274:           if( bToken!=bTokenChars && sqlite3Fts5UnicodeIsdiacritic(iCode)==0 ){",
          "",
          "[Removed Lines]",
          "265:         int iCode;",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory((u32)iCode)];",
          "",
          "[Added Lines]",
          "265:         u32 iCode;",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory(iCode)];",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a385298df264dbfa6765f63ad8708f74bc8e8a1404239c1049890b39a1bda888",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
      "candidate_info": {
        "commit_hash": "e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6e96b1b45b28a1fdb96af673604bb33dc9f5658",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/dbfuzz2.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fixes to the PRNG_SEED pragma idea.\n\nFossilOrigin-Name: c71098409c98af8360f8f28b9238a12ec764018a5782e8ff03fdf5db54031d6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ac5723164ae801e209ce525a5d94692767136f9d06be2a84883dcea677d02da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6392:     Tcl_WrongNumArgs(interp, 1, objv, \"PRNG-SEED-TEXT\");",
          "6393:     return TCL_ERROR;",
          "6394:   }",
          "6396:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, (unsigned int)i);",
          "6397:   sqlite3_randomness(0,0);",
          "6398:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "6395:   if( Tcl_GetIntFromObj(objv[0],&i) ) return TCL_ERROR;",
          "",
          "[Added Lines]",
          "6395:   if( Tcl_GetIntFromObj(interp,objv[0],&i) ) return TCL_ERROR;",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   if( mxCb>0 ){",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "214:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "215:     if( eVerbosity>=1 ){",
          "216:       printf(\"%s\\n\", azSql[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "216:   sqlite3_randomness(0,0);",
          "217: #endif",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1805:             sqlite3_progress_handler(db, 100000, progressHandler,",
          "1806:                                      &vdbeLimitFlag);",
          "1807:           }",
          "1808: #endif",
          "1809:           do{",
          "1810:             runSql(db, (char*)pSql->a, runFlags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1808: #endif",
          "1809: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "1811:           sqlite3_randomness(0,0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}