{
  "cve_id": "CVE-2022-3296",
  "cve_desc": "Stack-based Buffer Overflow in GitHub repository vim/vim prior to 9.0.0577.",
  "repo": "vim/vim",
  "patch_hash": "96b9bf8f74af8abf1e30054f996708db7dc285be",
  "patch_info": {
    "commit_hash": "96b9bf8f74af8abf1e30054f996708db7dc285be",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/96b9bf8f74af8abf1e30054f996708db7dc285be",
    "files": [
      "src/ex_eval.c",
      "src/testdir/test_trycatch.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.0577: buffer underflow with unexpected :finally\n\nProblem:    Buffer underflow with unexpected :finally.\nSolution:   Check CSF_TRY can be found.",
    "before_after_code_files": [
      "src/ex_eval.c||src/ex_eval.c",
      "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ex_eval.c||src/ex_eval.c": [
      "File: src/ex_eval.c -> src/ex_eval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1935:     if (cmdmod_error(FALSE))",
      "1936:  return;",
      "1939:  eap->errmsg = _(e_finally_without_try);",
      "1941:     {",
      "1957:  {",
      "1961:  }",
      "1976:  {",
      "2001:      {",
      "2006:      }",
      "2059:  }",
      "2060:     }",
      "2061: }",
      "",
      "[Removed Lines]",
      "1938:     if (cstack->cs_trylevel <= 0 || cstack->cs_idx < 0)",
      "1940:     else",
      "1942:  if (!(cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
      "1943:  {",
      "1944:      eap->errmsg = get_end_emsg(cstack);",
      "1945:      for (idx = cstack->cs_idx - 1; idx > 0; --idx)",
      "1946:   if (cstack->cs_flags[idx] & CSF_TRY)",
      "1947:       break;",
      "1951:      pending = CSTP_ERROR;",
      "1952:  }",
      "1953:  else",
      "1954:      idx = cstack->cs_idx;",
      "1956:  if (cstack->cs_flags[idx] & CSF_FINALLY)",
      "1959:      eap->errmsg = _(e_multiple_finally);",
      "1960:      return;",
      "1962:  rewind_conditionals(cstack, idx, CSF_WHILE | CSF_FOR,",
      "1963:              &cstack->cs_looplevel);",
      "1973:  skip = !(cstack->cs_flags[cstack->cs_idx] & CSF_TRUE);",
      "1975:  if (!skip)",
      "1980:      if (dbg_check_skipped(eap))",
      "1981:      {",
      "1986:   (void)do_intthrow(cstack);",
      "1987:      }",
      "1997:      cleanup_conditionals(cstack, CSF_TRY, FALSE);",
      "1999:      if (cstack->cs_idx >= 0",
      "2000:           && (cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
      "2004:   leave_block(cstack);",
      "2005:   enter_block(cstack);",
      "2023:      if (pending == CSTP_ERROR || did_emsg || got_int || did_throw)",
      "2024:      {",
      "2025:   if (cstack->cs_pending[cstack->cs_idx] == CSTP_RETURN)",
      "2026:   {",
      "2027:       report_discard_pending(CSTP_RETURN,",
      "2028:         cstack->cs_rettv[cstack->cs_idx]);",
      "2029:       discard_pending_return(cstack->cs_rettv[cstack->cs_idx]);",
      "2030:   }",
      "2031:   if (pending == CSTP_ERROR && !did_emsg)",
      "2032:       pending |= (THROW_ON_ERROR) ? CSTP_THROW : 0;",
      "2033:   else",
      "2034:       pending |= did_throw ? CSTP_THROW : 0;",
      "2035:   pending |= did_emsg  ? CSTP_ERROR     : 0;",
      "2036:   pending |= got_int   ? CSTP_INTERRUPT : 0;",
      "2037:   cstack->cs_pending[cstack->cs_idx] = pending;",
      "2046:   if (did_throw && cstack->cs_exception[cstack->cs_idx]",
      "2047:         != current_exception)",
      "2048:       internal_error(\"ex_finally()\");",
      "2049:      }",
      "2058:      cstack->cs_lflags |= CSL_HAD_FINA;",
      "",
      "[Added Lines]",
      "1938:     for (idx = cstack->cs_idx; idx >= 0; --idx)",
      "1939:  if (cstack->cs_flags[idx] & CSF_TRY)",
      "1940:      break;",
      "1941:     if (cstack->cs_trylevel <= 0 || idx < 0)",
      "1942:     {",
      "1944:  return;",
      "1945:     }",
      "1947:     if (!(cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
      "1949:  eap->errmsg = get_end_emsg(cstack);",
      "1953:  pending = CSTP_ERROR;",
      "1954:     }",
      "1956:     if (cstack->cs_flags[idx] & CSF_FINALLY)",
      "1957:     {",
      "1959:  eap->errmsg = _(e_multiple_finally);",
      "1960:  return;",
      "1961:     }",
      "1962:     rewind_conditionals(cstack, idx, CSF_WHILE | CSF_FOR,",
      "1963:          &cstack->cs_looplevel);",
      "1973:     skip = !(cstack->cs_flags[cstack->cs_idx] & CSF_TRUE);",
      "1975:     if (!skip)",
      "1976:     {",
      "1980:  if (dbg_check_skipped(eap))",
      "1986:      (void)do_intthrow(cstack);",
      "1997:  cleanup_conditionals(cstack, CSF_TRY, FALSE);",
      "1999:  if (cstack->cs_idx >= 0",
      "2000:       && (cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
      "2004:      leave_block(cstack);",
      "2005:      enter_block(cstack);",
      "2006:  }",
      "2023:  if (pending == CSTP_ERROR || did_emsg || got_int || did_throw)",
      "2024:  {",
      "2025:      if (cstack->cs_pending[cstack->cs_idx] == CSTP_RETURN)",
      "2027:   report_discard_pending(CSTP_RETURN,",
      "2028:            cstack->cs_rettv[cstack->cs_idx]);",
      "2029:   discard_pending_return(cstack->cs_rettv[cstack->cs_idx]);",
      "2031:      if (pending == CSTP_ERROR && !did_emsg)",
      "2032:   pending |= (THROW_ON_ERROR) ? CSTP_THROW : 0;",
      "2033:      else",
      "2034:   pending |= did_throw ? CSTP_THROW : 0;",
      "2035:      pending |= did_emsg  ? CSTP_ERROR     : 0;",
      "2036:      pending |= got_int   ? CSTP_INTERRUPT : 0;",
      "2037:      cstack->cs_pending[cstack->cs_idx] = pending;",
      "2046:      if (did_throw && cstack->cs_exception[cstack->cs_idx]",
      "2047:            != current_exception)",
      "2048:   internal_error(\"ex_finally()\");",
      "2058:  cstack->cs_lflags |= CSL_HAD_FINA;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2076:     if (cmdmod_error(FALSE))",
      "2077:  return;",
      "2082:     {",
      "2095:         || !(cstack->cs_flags[cstack->cs_idx] & CSF_TRUE);",
      "2129:        && (cstack->cs_flags[idx] & (CSF_CATCH|CSF_FINALLY)) == 0)",
      "2158:  {",
      "2172:  }",
      "2181:  {",
      "2188:  }",
      "2210:       (pending == CSTP_RETURN) ? rettv :",
      "2211:       (pending & CSTP_THROW) ? (void *)current_exception : NULL);",
      "2252:  }",
      "2257:     }",
      "2258: }",
      "",
      "[Removed Lines]",
      "2079:     if (cstack->cs_trylevel <= 0 || cstack->cs_idx < 0)",
      "2080:  eap->errmsg = _(e_endtry_without_try);",
      "2081:     else",
      "2094:  skip = did_emsg || got_int || did_throw",
      "2097:  if (!(cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
      "2098:  {",
      "2099:      eap->errmsg = get_end_emsg(cstack);",
      "2102:      idx = cstack->cs_idx;",
      "2103:      do",
      "2104:   --idx;",
      "2105:      while (idx > 0 && !(cstack->cs_flags[idx] & CSF_TRY));",
      "2106:      rewind_conditionals(cstack, idx, CSF_WHILE | CSF_FOR,",
      "2107:              &cstack->cs_looplevel);",
      "2108:      skip = TRUE;",
      "2117:      if (did_throw)",
      "2118:   discard_current_exception();",
      "2121:      did_emsg = FALSE;",
      "2122:  }",
      "2123:  else",
      "2124:  {",
      "2125:      idx = cstack->cs_idx;",
      "2128:      if (!skip && in_vim9script()",
      "2130:      {",
      "2133:   eap->errmsg = _(e_missing_catch_or_finally);",
      "2134:      }",
      "2142:      if (did_throw && (cstack->cs_flags[idx] & CSF_TRUE)",
      "2143:       && !(cstack->cs_flags[idx] & CSF_FINALLY))",
      "2144:   rethrow = TRUE;",
      "2145:  }",
      "2154:  if ((rethrow || (!skip",
      "2155:    && !(cstack->cs_flags[idx] & CSF_FINALLY)",
      "2156:    && !cstack->cs_pending[idx]))",
      "2157:   && dbg_check_skipped(eap))",
      "2162:      if (got_int)",
      "2163:      {",
      "2164:   skip = TRUE;",
      "2165:   (void)do_intthrow(cstack);",
      "2168:   rethrow = FALSE;",
      "2169:   if (did_throw && !(cstack->cs_flags[idx] & CSF_FINALLY))",
      "2170:       rethrow = TRUE;",
      "2171:      }",
      "2180:  if (!skip)",
      "2182:      pending = cstack->cs_pending[idx];",
      "2183:      cstack->cs_pending[idx] = CSTP_NONE;",
      "2184:      if (pending == CSTP_RETURN)",
      "2185:   rettv = cstack->cs_rettv[idx];",
      "2186:      else if (pending & CSTP_THROW)",
      "2187:   current_exception = cstack->cs_exception[idx];",
      "2200:  (void)cleanup_conditionals(cstack, CSF_TRY | CSF_SILENT, TRUE);",
      "2202:  if (cstack->cs_idx >= 0",
      "2203:           && (cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
      "2204:      leave_block(cstack);",
      "2205:  --cstack->cs_trylevel;",
      "2207:  if (!skip)",
      "2208:  {",
      "2209:      report_resume_pending(pending,",
      "2212:      switch (pending)",
      "2213:      {",
      "2214:   case CSTP_NONE:",
      "2215:       break;",
      "2224:   case CSTP_CONTINUE:",
      "2225:       ex_continue(eap);",
      "2226:       break;",
      "2227:   case CSTP_BREAK:",
      "2228:       ex_break(eap);",
      "2229:       break;",
      "2230:   case CSTP_RETURN:",
      "2231:       do_return(eap, FALSE, FALSE, rettv);",
      "2232:       break;",
      "2233:   case CSTP_FINISH:",
      "2234:       do_finish(eap, FALSE);",
      "2235:       break;",
      "2243:   default:",
      "2244:       if (pending & CSTP_ERROR)",
      "2245:    did_emsg = TRUE;",
      "2246:       if (pending & CSTP_INTERRUPT)",
      "2247:    got_int = TRUE;",
      "2248:       if (pending & CSTP_THROW)",
      "2249:    rethrow = TRUE;",
      "2250:       break;",
      "2251:      }",
      "2254:  if (rethrow)",
      "2256:      do_throw(cstack);",
      "",
      "[Added Lines]",
      "2078:     for (idx = cstack->cs_idx; idx >= 0; --idx)",
      "2079:  if (cstack->cs_flags[idx] & CSF_TRY)",
      "2080:      break;",
      "2081:     if (cstack->cs_trylevel <= 0 || idx < 0)",
      "2083:  eap->errmsg = _(e_endtry_without_try);",
      "2084:  return;",
      "2085:     }",
      "2098:     skip = did_emsg || got_int || did_throw",
      "2101:     if (!(cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
      "2102:     {",
      "2103:  eap->errmsg = get_end_emsg(cstack);",
      "2106:  rewind_conditionals(cstack, idx, CSF_WHILE | CSF_FOR,",
      "2107:        &cstack->cs_looplevel);",
      "2108:  skip = TRUE;",
      "2117:  if (did_throw)",
      "2118:      discard_current_exception();",
      "2121:  did_emsg = FALSE;",
      "2122:     }",
      "2123:     else",
      "2124:     {",
      "2125:  idx = cstack->cs_idx;",
      "2128:  if (!skip && in_vim9script()",
      "2133:      eap->errmsg = _(e_missing_catch_or_finally);",
      "2142:  if (did_throw && (cstack->cs_flags[idx] & CSF_TRUE)",
      "2143:   && !(cstack->cs_flags[idx] & CSF_FINALLY))",
      "2144:      rethrow = TRUE;",
      "2145:     }",
      "2154:     if ((rethrow || (!skip && !(cstack->cs_flags[idx] & CSF_FINALLY)",
      "2155:       && !cstack->cs_pending[idx]))",
      "2156:      && dbg_check_skipped(eap))",
      "2157:     {",
      "2161:  if (got_int)",
      "2163:      skip = TRUE;",
      "2164:      (void)do_intthrow(cstack);",
      "2167:      rethrow = FALSE;",
      "2168:      if (did_throw && !(cstack->cs_flags[idx] & CSF_FINALLY))",
      "2169:   rethrow = TRUE;",
      "2171:     }",
      "2179:     if (!skip)",
      "2180:     {",
      "2181:  pending = cstack->cs_pending[idx];",
      "2182:  cstack->cs_pending[idx] = CSTP_NONE;",
      "2183:  if (pending == CSTP_RETURN)",
      "2184:      rettv = cstack->cs_rettv[idx];",
      "2185:  else if (pending & CSTP_THROW)",
      "2186:      current_exception = cstack->cs_exception[idx];",
      "2187:     }",
      "2199:     (void)cleanup_conditionals(cstack, CSF_TRY | CSF_SILENT, TRUE);",
      "2201:     if (cstack->cs_idx >= 0 && (cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
      "2202:  leave_block(cstack);",
      "2203:     --cstack->cs_trylevel;",
      "2205:     if (!skip)",
      "2206:     {",
      "2207:  report_resume_pending(pending,",
      "2210:  switch (pending)",
      "2211:  {",
      "2212:      case CSTP_NONE:",
      "2213:   break;",
      "2222:      case CSTP_CONTINUE:",
      "2223:   ex_continue(eap);",
      "2224:   break;",
      "2225:      case CSTP_BREAK:",
      "2226:   ex_break(eap);",
      "2227:   break;",
      "2228:      case CSTP_RETURN:",
      "2229:   do_return(eap, FALSE, FALSE, rettv);",
      "2230:   break;",
      "2231:      case CSTP_FINISH:",
      "2232:   do_finish(eap, FALSE);",
      "2233:   break;",
      "2241:      default:",
      "2242:   if (pending & CSTP_ERROR)",
      "2243:       did_emsg = TRUE;",
      "2244:   if (pending & CSTP_INTERRUPT)",
      "2245:       got_int = TRUE;",
      "2246:   if (pending & CSTP_THROW)",
      "2247:       rethrow = TRUE;",
      "2248:   break;",
      "2252:     if (rethrow)",
      "2254:  do_throw(cstack);",
      "",
      "---------------"
    ],
    "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim": [
      "File: src/testdir/test_trycatch.vim -> src/testdir/test_trycatch.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: source check.vim",
      "5: source shared.vim",
      "7: \"-------------------------------------------------------------------------------",
      "8: \" Test environment           {{{1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import './vim9.vim' as v9",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2008:   call assert_fails('try | for i in range(5) | endif | endtry', 'E580:')",
      "2009:   call assert_fails('try | while v:true | endtry', 'E170:')",
      "2010:   call assert_fails('try | if v:true | endtry', 'E171:')",
      "2011: endfunc",
      "2013: \" Test for verbose messages with :try :catch, and :finally                 {{{1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2013:   \" this was using a negative index in cstack[]",
      "2014:   let lines =<< trim END",
      "2015:       try",
      "2016:       for",
      "2017:       if",
      "2018:       endwhile",
      "2019:       if",
      "2020:       finally",
      "2021:   END",
      "2022:   call v9.CheckScriptFailure(lines, 'E690:')",
      "2024:   let lines =<< trim END",
      "2025:       try",
      "2026:       for",
      "2027:       if",
      "2028:       endwhile",
      "2029:       if",
      "2030:       endtry",
      "2031:   END",
      "2032:   call v9.CheckScriptFailure(lines, 'E690:')",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "700: static int included_patches[] =",
      "703:     576,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "703:     577,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "28bf649a5732ffe5a47951b5e437b765cebc5b38",
      "candidate_info": {
        "commit_hash": "28bf649a5732ffe5a47951b5e437b765cebc5b38",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/28bf649a5732ffe5a47951b5e437b765cebc5b38",
        "files": [
          "src/ex_eval.c",
          "src/testdir/test_vim9_script.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4499: Vim9: at the script level declarations leak to next block\n\nProblem:    Vim9: at the script level declarations leak from try block to\n            catch and finally block.\nSolution:   End the block and start a new one. (closes #9883)",
        "before_after_code_files": [
          "src/ex_eval.c||src/ex_eval.c",
          "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_eval.c||src/ex_eval.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_eval.c||src/ex_eval.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_eval.c||src/ex_eval.c": [
          "File: src/ex_eval.c -> src/ex_eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1827:      cstack->cs_flags[idx] |= CSF_ACTIVE | CSF_CAUGHT;",
          "1828:      did_emsg = got_int = did_throw = FALSE;",
          "1829:      catch_exception((except_T *)cstack->cs_exception[idx]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1831:      if (cstack->cs_idx >= 0",
          "1832:           && (cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
          "1833:      {",
          "1836:   leave_block(cstack);",
          "1837:   enter_block(cstack);",
          "1838:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1931:      cleanup_conditionals(cstack, CSF_TRY, FALSE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1943:      if (cstack->cs_idx >= 0",
          "1944:           && (cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
          "1945:      {",
          "1948:   leave_block(cstack);",
          "1949:   enter_block(cstack);",
          "1950:      }",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim": [
          "File: src/testdir/test_vim9_script.vim -> src/testdir/test_vim9_script.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "763:   v9.CheckDefAndScriptSuccess(lines)",
          "764: enddef",
          "766: def Test_try_ends_in_return()",
          "767:   var lines =<< trim END",
          "768:       vim9script",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766: def Test_try_var_decl()",
          "767:   var lines =<< trim END",
          "768:       vim9script",
          "769:       try",
          "770:         var in_try = 1",
          "771:         assert_equal(1, get(s:, 'in_try', -1))",
          "772:         throw \"getout\"",
          "773:       catch",
          "774:         var in_catch = 2",
          "775:         assert_equal(-1, get(s:, 'in_try', -1))",
          "776:         assert_equal(2, get(s:, 'in_catch', -1))",
          "777:       finally",
          "778:         var in_finally = 3",
          "779:         assert_equal(-1, get(s:, 'in_try', -1))",
          "780:         assert_equal(-1, get(s:, 'in_catch', -1))",
          "781:         assert_equal(3, get(s:, 'in_finally', -1))",
          "782:       endtry",
          "783:       assert_equal(-1, get(s:, 'in_try', -1))",
          "784:       assert_equal(-1, get(s:, 'in_catch', -1))",
          "785:       assert_equal(-1, get(s:, 'in_finally', -1))",
          "786:   END",
          "787:   v9.CheckScriptSuccess(lines)",
          "788: enddef",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755: static int included_patches[] =",
          "758:     4498,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758:     4499,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cce81e9673fe8d056e8eef310d9919620eccb2f2",
      "candidate_info": {
        "commit_hash": "cce81e9673fe8d056e8eef310d9919620eccb2f2",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/cce81e9673fe8d056e8eef310d9919620eccb2f2",
        "files": [
          "src/ex_eval.c",
          "src/testdir/test_trycatch.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3486: illegal memory access with invalid sequence of commands\n\nProblem:    Illegal memory access with invalid sequence of commands.\nSolution:   Do not call leave_block() when not in a try block. (closes #8966)\n            Reset did_emsg so that exception is shown as an error.",
        "before_after_code_files": [
          "src/ex_eval.c||src/ex_eval.c",
          "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_eval.c||src/ex_eval.c",
            "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_eval.c||src/ex_eval.c",
            "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_eval.c||src/ex_eval.c": [
          "File: src/ex_eval.c -> src/ex_eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1385:  eap->errmsg = _(err);",
          "1386:     else",
          "1387:     {",
          "1389:  if (!(fl & csf))",
          "1390:  {",
          "",
          "[Removed Lines]",
          "1388:  fl =  cstack->cs_flags[cstack->cs_idx];",
          "",
          "[Added Lines]",
          "1388:  fl = cstack->cs_flags[cstack->cs_idx];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2026:      if (did_throw)",
          "2027:   discard_current_exception();",
          "2028:  }",
          "2029:  else",
          "2030:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2031:      did_emsg = FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2106:  (void)cleanup_conditionals(cstack, CSF_TRY | CSF_SILENT, TRUE);",
          "2109:  --cstack->cs_trylevel;",
          "2111:  if (!skip)",
          "",
          "[Removed Lines]",
          "2108:  leave_block(cstack);",
          "",
          "[Added Lines]",
          "2112:  if (cstack->cs_idx >= 0",
          "2113:           && (cstack->cs_flags[cstack->cs_idx] & CSF_TRY))",
          "2114:      leave_block(cstack);",
          "",
          "---------------"
        ],
        "src/testdir/test_trycatch.vim||src/testdir/test_trycatch.vim": [
          "File: src/testdir/test_trycatch.vim -> src/testdir/test_trycatch.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2295:   call delete('XtestCatchAndFinally')",
          "2296: endfunc",
          "2298: \" Modeline            {{{1",
          "2299: \" vim: ts=8 sw=2 sts=2 expandtab tw=80 fdm=marker",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2298: \" This was causing an illegal memory access",
          "2299: func Test_leave_block_in_endtry_not_called()",
          "2300:   let lines =<< trim END",
          "2301:       vim9script",
          "2302:       try #",
          "2303:       for x in []",
          "2304:       if",
          "2305:       endwhile",
          "2306:       if",
          "2307:       endtry",
          "2308:   END",
          "2309:   call writefile(lines, 'XtestEndtry')",
          "2310:   try",
          "2311:     source XtestEndtry",
          "2312:   catch /E171:/",
          "2313:   endtry",
          "2315:   call delete('XtestEndtry')",
          "2316: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758: static int included_patches[] =",
          "761:     3485,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     3486,",
          "",
          "---------------"
        ]
      }
    }
  ]
}