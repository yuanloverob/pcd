{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1c960269dd94cf6898f330c22ce0005ef370b3f6",
      "candidate_info": {
        "commit_hash": "1c960269dd94cf6898f330c22ce0005ef370b3f6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1c960269dd94cf6898f330c22ce0005ef370b3f6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Fix a faulty assert() statement in balance_nonroot() - the assert() should use get2byteNotZero() instead of get2byte() for the corner case where the number cells is zero on a 65536-byte page.\n\nFossilOrigin-Name: bcbe7d96df3c9515f679ccf671ca9ba89d081b53501495d4218eb5126196838b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 919fec91dac4cb0d5f67404d4f47a65f353d752f5da0aa7b071bf3caf19e0522",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8166:     rc = defragmentPage(apNew[0], -1);",
          "8167:     testcase( rc!=SQLITE_OK );",
          "8168:     assert( apNew[0]->nFree ==",
          "8170:       || rc!=SQLITE_OK",
          "8171:     );",
          "8172:     copyNodeContent(apNew[0], pParent, &rc);",
          "",
          "[Removed Lines]",
          "8169:         (get2byte(&apNew[0]->aData[5])-apNew[0]->cellOffset-apNew[0]->nCell*2)",
          "",
          "[Added Lines]",
          "8169:         (get2byteNotZero(&apNew[0]->aData[5]) - apNew[0]->cellOffset",
          "8170:           - apNew[0]->nCell*2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fe25c64f13a8e5d3ca44d003441a7353cd6aca2",
      "candidate_info": {
        "commit_hash": "8fe25c64f13a8e5d3ca44d003441a7353cd6aca2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8fe25c64f13a8e5d3ca44d003441a7353cd6aca2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/createtab.test"
        ],
        "message": "Early detection of too many columns in an index avoid a possible 16-bit signed integer overflow.\n\nFossilOrigin-Name: 8af0caeb6d1e55f66ad2f12af94845dccfe1d0420faf326f5917fc07f8aa6050",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/createtab.test||test/createtab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d03b611302f68483770d49b113b4ed685ba03526d2007647c306f8ec7ae697d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3265:     sqlite3ExprListSetSortOrder(pList, sortOrder);",
          "3266:   }else{",
          "3267:     sqlite3ExprListCheckLength(pParse, pList, \"index\");",
          "3268:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3268:     if( pParse->nErr ) goto exit_create_index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3284:   nName = sqlite3Strlen30(zName);",
          "3285:   nExtraCol = pPk ? pPk->nKeyCol : 1;",
          "3286:   pIndex = sqlite3AllocateIndexObject(db, pList->nExpr + nExtraCol,",
          "3287:                                       nName + nExtra + 1, &zExtra);",
          "3288:   if( db->mallocFailed ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3287:   assert( pList->nExpr + nExtraCol <= 32767 /* Fits in i16 */ );",
          "",
          "---------------"
        ],
        "test/createtab.test||test/createtab.test": [
          "File: test/createtab.test -> test/createtab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # focus of this file is testing that it is OK to create new tables",
          "13: # and indices while creating existing tables and indices.",
          "14: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "15: # $Id: createtab.test,v 1.3 2007/09/12 17:01:45 danielk1977 Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   integrity_check createtab-$av.40",
          "144: }",
          "146: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: # 2019-03-31 Ensure that a proper error is returned for an index",
          "146: # with too many columns.",
          "147: #",
          "148: do_test createtab-3.1 {",
          "149:   db eval {DROP TABLE IF EXISTS t1;}",
          "150:   set sql \"CREATE TABLE t1(x,UNIQUE(x[string repeat ,x 100000]))\"",
          "151:   catchsql $sql",
          "152: } {1 {too many columns in index}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54975cdff9d5e7e4490fbf6012d82143136b1e0b",
      "candidate_info": {
        "commit_hash": "54975cdff9d5e7e4490fbf6012d82143136b1e0b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/54975cdff9d5e7e4490fbf6012d82143136b1e0b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Fix other \"ROWS BETWEEN\" cases on this branch.\n\nFossilOrigin-Name: a5f68f66472610b5beb4fe28669fbbfe83a32742be73cecad9b2ae28f8a17b30",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 093d2b25f1b656bba57d665aac68109436861b157a5769432b612176dae3f6eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1542:   return regArg;",
          "1543: }",
          "",
          "[Removed Lines]",
          "1666: static void windowCodeRowExprStep(",
          "1667:   Parse *pParse,",
          "1668:   Select *p,",
          "1669:   WhereInfo *pWInfo,",
          "1670:   int regGosub,",
          "1671:   int addrGosub",
          "1672: ){",
          "1673:   Window *pMWin = p->pWin;",
          "1674:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1679:   int regArg;",
          "1680:   int addr;",
          "1681:   int csrStart = pParse->nTab++;",
          "1682:   int csrEnd = pParse->nTab++;",
          "1685:   int addrGoto;",
          "1686:   int addrTop;",
          "1687:   int addrIfPos1 = 0;",
          "1688:   int addrIfPos2 = 0;",
          "1689:   int regSize = 0;",
          "1691:   assert( pMWin->eStart==TK_PRECEDING",
          "1692:        || pMWin->eStart==TK_CURRENT",
          "1693:        || pMWin->eStart==TK_FOLLOWING",
          "1694:        || pMWin->eStart==TK_UNBOUNDED",
          "1695:   );",
          "1696:   assert( pMWin->eEnd==TK_FOLLOWING",
          "1697:        || pMWin->eEnd==TK_CURRENT",
          "1698:        || pMWin->eEnd==TK_UNBOUNDED",
          "1699:        || pMWin->eEnd==TK_PRECEDING",
          "1700:   );",
          "1703:   regFlushPart = ++pParse->nMem;",
          "1704:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "1705:   lblFlushDone = sqlite3VdbeMakeLabel(pParse);",
          "1707:   regStart = ++pParse->nMem;",
          "1708:   regEnd = ++pParse->nMem;",
          "1710:   windowPartitionCache(pParse, p, pWInfo, regFlushPart, lblFlushPart, &regSize);",
          "1712:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1715:   sqlite3VdbeResolveLabel(v, lblFlushPart);",
          "1716:   sqlite3VdbeAddOp2(v, OP_Once, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "1717:   VdbeCoverage(v);",
          "1718:   VdbeComment((v, \"Flush_partition subroutine\"));",
          "1719:   sqlite3VdbeAddOp2(v, OP_OpenDup, csrStart, pMWin->iEphCsr);",
          "1720:   sqlite3VdbeAddOp2(v, OP_OpenDup, csrEnd, pMWin->iEphCsr);",
          "1724:   if( pMWin->pStart ){",
          "1725:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1726:     windowCheckIntValue(pParse, regStart, 0);",
          "1727:   }",
          "1728:   if( pMWin->pEnd ){",
          "1729:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1730:     windowCheckIntValue(pParse, regEnd, 1);",
          "1731:   }",
          "1741:   if( pMWin->pEnd && pMWin->eStart==TK_FOLLOWING ){",
          "1742:     assert( pMWin->pStart!=0 );",
          "1743:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1744:     sqlite3VdbeAddOp3(v, OP_Ge, regStart, sqlite3VdbeCurrentAddr(v)+2, regEnd);",
          "1745:     VdbeCoverageNeverNull(v);",
          "1746:     sqlite3VdbeAddOp2(v, OP_Copy, regSize, regStart);",
          "1747:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regEnd);",
          "1748:   }",
          "1750:   if( pMWin->pStart && pMWin->eEnd==TK_PRECEDING ){",
          "1751:     assert( pMWin->pEnd!=0 );",
          "1752:     assert( pMWin->eStart==TK_PRECEDING );",
          "1753:     sqlite3VdbeAddOp3(v, OP_Le, regStart, sqlite3VdbeCurrentAddr(v)+3, regEnd);",
          "1754:     VdbeCoverageNeverNull(v);",
          "1755:     sqlite3VdbeAddOp2(v, OP_Copy, regSize, regStart);",
          "1756:     sqlite3VdbeAddOp2(v, OP_Copy, regSize, regEnd);",
          "1757:   }",
          "1760:   regArg = windowInitAccum(pParse, pMWin);",
          "1762:   sqlite3VdbeAddOp2(v, OP_Rewind, pMWin->iEphCsr, lblFlushDone);",
          "1763:   VdbeCoverage(v);",
          "1764:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, lblFlushDone);",
          "1765:   VdbeCoverageNeverTaken(v);",
          "1766:   sqlite3VdbeChangeP5(v, 1);",
          "1767:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, lblFlushDone);",
          "1768:   VdbeCoverageNeverTaken(v);",
          "1769:   sqlite3VdbeChangeP5(v, 1);",
          "1774:   addrTop = sqlite3VdbeCurrentAddr(v);",
          "1775:   if( pMWin->eEnd==TK_PRECEDING ){",
          "1776:     addrIfPos1 = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0 , 1);",
          "1777:     VdbeCoverage(v);",
          "1778:   }",
          "1779:   sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+2);",
          "1780:   VdbeCoverage(v);",
          "1781:   addr = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1782:   windowAggStep(pParse, pMWin, csrEnd, 0, regArg, regSize);",
          "1783:   if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1784:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrTop);",
          "1785:     sqlite3VdbeJumpHere(v, addr);",
          "1786:     addrTop = sqlite3VdbeCurrentAddr(v);",
          "1787:   }else{",
          "1788:     sqlite3VdbeJumpHere(v, addr);",
          "1789:     if( pMWin->eEnd==TK_PRECEDING ){",
          "1790:       sqlite3VdbeJumpHere(v, addrIfPos1);",
          "1791:     }",
          "1792:   }",
          "1794:   if( pMWin->eEnd==TK_FOLLOWING ){",
          "1795:     addrIfPos1 = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0 , 1);",
          "1796:     VdbeCoverage(v);",
          "1797:   }",
          "1798:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1799:     addrIfPos2 = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0 , 1);",
          "1800:     VdbeCoverage(v);",
          "1801:   }",
          "1802:   windowAggFinal(pParse, pMWin, 0);",
          "1803:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1804:   sqlite3VdbeAddOp2(v, OP_Next, pMWin->iEphCsr, sqlite3VdbeCurrentAddr(v)+2);",
          "1805:   VdbeCoverage(v);",
          "1806:   sqlite3VdbeAddOp2(v, OP_Goto, 0, lblFlushDone);",
          "1807:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1808:     sqlite3VdbeJumpHere(v, addrIfPos2);",
          "1809:   }",
          "1811:   if( pMWin->eStart==TK_CURRENT",
          "1812:    || pMWin->eStart==TK_PRECEDING",
          "1813:    || pMWin->eStart==TK_FOLLOWING",
          "1814:   ){",
          "1815:     int lblSkipInverse = sqlite3VdbeMakeLabel(pParse);;",
          "1816:     if( pMWin->eStart==TK_PRECEDING ){",
          "1817:       sqlite3VdbeAddOp3(v, OP_IfPos, regStart, lblSkipInverse, 1);",
          "1818:       VdbeCoverage(v);",
          "1819:     }",
          "1820:     if( pMWin->eStart==TK_FOLLOWING ){",
          "1821:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "1822:       VdbeCoverage(v);",
          "1823:       sqlite3VdbeAddOp2(v, OP_Goto, 0, lblSkipInverse);",
          "1824:     }else{",
          "1825:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1826:       VdbeCoverageAlwaysTaken(v);",
          "1827:     }",
          "1828:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, regSize);",
          "1829:     sqlite3VdbeResolveLabel(v, lblSkipInverse);",
          "1830:   }",
          "1831:   if( pMWin->eEnd==TK_FOLLOWING ){",
          "1832:     sqlite3VdbeJumpHere(v, addrIfPos1);",
          "1833:   }",
          "1834:   sqlite3VdbeAddOp2(v, OP_Goto, 0, addrTop);",
          "1837:   sqlite3VdbeResolveLabel(v, lblFlushDone);",
          "1838:   sqlite3VdbeAddOp1(v, OP_ResetSorter, pMWin->iEphCsr);",
          "1839:   sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "1840:   VdbeComment((v, \"end flush_partition subroutine\"));",
          "1843:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1844: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1884:  int regCountdown,",
          "1885:  int jumpOnEof",
          "1886: ){",
          "1887:   int ret = 0;",
          "1888:   Vdbe *v = p->pVdbe;",
          "1889:   int addrIf = 0;",
          "1891:   if( regCountdown>0 ){",
          "1892:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1893:   }",
          "1895:   switch( op ){",
          "1896:     case WINDOW_RETURN_ROW:",
          "1899:       break;",
          "1901:     case WINDOW_AGGINVERSE:",
          "1903:       break;",
          "1905:     case WINDOW_AGGSTEP:",
          "1907:       break;",
          "1908:   }",
          "",
          "[Removed Lines]",
          "1897:       windowAggFinal(p->pParse, p->pMWin, 0);",
          "1898:       windowReturnOneRow(p->pParse, p->pMWin, p->regGosub, p->addrGosub);",
          "1902:       windowAggStep(p->pParse, p->pMWin, csr, 1, p->regArg, p->pMWin->regSize);",
          "1906:       windowAggStep(p->pParse, p->pMWin, csr, 0, p->regArg, p->pMWin->regSize);",
          "",
          "[Added Lines]",
          "1586:   Window *pMWin = p->pMWin;",
          "1593:   if( op==WINDOW_AGGINVERSE && pMWin->eStart==TK_UNBOUNDED ){",
          "1594:     assert( regCountdown==0 && jumpOnEof==0 );",
          "1595:     return 0;",
          "1596:   }",
          "1604:       windowAggFinal(p->pParse, pMWin, 0);",
          "1605:       windowReturnOneRow(p->pParse, pMWin, p->regGosub, p->addrGosub);",
          "1609:       windowAggStep(p->pParse, pMWin, csr, 1, p->regArg, pMWin->regSize);",
          "1613:       windowAggStep(p->pParse, pMWin, csr, 0, p->regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2040:   pParse->nMem += 1 + nSub + 1;",
          "2042:   regFlushPart = ++pParse->nMem;",
          "2046:   assert( pMWin->eStart==TK_PRECEDING",
          "2047:        || pMWin->eStart==TK_CURRENT",
          "",
          "[Removed Lines]",
          "2043:   regStart = ++pParse->nMem;",
          "2044:   regEnd = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "1752:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "1753:     regStart = ++pParse->nMem;",
          "1754:   }",
          "1755:   if( pMWin->eEnd==TK_PRECEDING || pMWin->eEnd==TK_FOLLOWING ){",
          "1756:     regEnd = ++pParse->nMem;",
          "1757:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2108:   s.regArg = regArg = windowInitAccum(pParse, pMWin);",
          "2118:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2119:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2120:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Removed Lines]",
          "2110:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2111:   windowCheckIntValue(pParse, regStart, 0);",
          "2112:   sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2113:   windowCheckIntValue(pParse, regEnd, 1);",
          "2115:   if( pMWin->eStart==pMWin->eEnd",
          "2116:    && pMWin->eStart!=TK_CURRENT && pMWin->eStart!=TK_UNBOUNDED",
          "2117:   ){",
          "",
          "[Added Lines]",
          "1823:   if( regStart ){",
          "1824:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1825:     windowCheckIntValue(pParse, regStart, 0);",
          "1826:   }",
          "1827:   if( regEnd ){",
          "1828:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1829:     windowCheckIntValue(pParse, regEnd, 1);",
          "1830:   }",
          "1832:   if( pMWin->eStart==pMWin->eEnd && regStart && regEnd ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2131:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2132:     sqlite3VdbeJumpHere(v, addrGe);",
          "2133:   }",
          "2135:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "2136:   }",
          "2139:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "2140:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1);",
          "",
          "[Removed Lines]",
          "2134:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2138:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);",
          "",
          "[Added Lines]",
          "1849:   if( pMWin->eStart==TK_FOLLOWING && regEnd ){",
          "1850:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1854:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "1855:     sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);",
          "1856:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2151:   }",
          "2152:   if( pMWin->eStart==TK_FOLLOWING ){",
          "2153:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2156:   }else",
          "2157:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2158:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2154:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 0);",
          "2155:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "",
          "[Added Lines]",
          "1872:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1873:       windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 0);",
          "1874:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "1875:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2161:   }else{",
          "2162:     int addr;",
          "2163:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2168:   }",
          "2169:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.SECOND_ROW_CODE\"));",
          "",
          "[Removed Lines]",
          "2164:     addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2165:     windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "2166:     windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "2167:     sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "1884:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1885:       if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1886:       windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, 0, 0);",
          "1887:       windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 0);",
          "1888:       if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "1889:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2195:     int addrBreak2;",
          "2196:     int addrBreak3;",
          "2197:     windowCodeOp(&s, WINDOW_AGGSTEP, csrEnd, 0, 0);",
          "2201:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2202:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "2203:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2198:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2199:     addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "2200:     addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "",
          "[Added Lines]",
          "1920:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1921:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1922:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regStart, 1);",
          "1923:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, 0, 1);",
          "1924:     }else{",
          "1925:       assert( pMWin->eEnd==TK_FOLLOWING );",
          "1926:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1927:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, csrCurrent, regEnd, 1);",
          "1928:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, csrStart, regStart, 1);",
          "1929:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2706:   }else{",
          "2707:     Window *pWin;",
          "",
          "[Removed Lines]",
          "2691:   if( pMWin->eType==TK_ROWS",
          "2692:    && (pMWin->eStart!=TK_UNBOUNDED||pMWin->eEnd!=TK_CURRENT||!pMWin->pOrderBy)",
          "2693:   ){",
          "2694:     int bCache = windowCachePartition(pMWin);",
          "2695:     if( (pMWin->eEnd!=TK_FOLLOWING   && pMWin->eEnd!=TK_PRECEDING)",
          "2696:      || (pMWin->eStart!=TK_FOLLOWING && pMWin->eStart!=TK_PRECEDING)",
          "2697:     ){",
          "2698:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2699:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2700:       VdbeModuleComment((pParse->pVdbe, \"End RowExprStep()\"));",
          "2701:     }else{",
          "2702:       VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2703:       windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2704:       VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "2705:     }",
          "",
          "[Added Lines]",
          "2420:   if( pMWin->eType==TK_ROWS ){",
          "2421:     VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2422:     windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2423:     VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3722b3abf1da4e9bde859df68e679e00c6829f41",
      "candidate_info": {
        "commit_hash": "3722b3abf1da4e9bde859df68e679e00c6829f41",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3722b3abf1da4e9bde859df68e679e00c6829f41",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "src/vtab.c"
        ],
        "message": "Fix a typo and a harmless compiler warning.\n\nFossilOrigin-Name: ec4c63e00c957f98d61ddc1b9d20406c7e1072d6ab0c12ac6939db6c63d90cb8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e2c6fed8f84929ed51a4e876bb09c85ac4b86a2e4cf0832a7da724bb9f4df5bf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1125: ){",
          "1127:   sqlite3 *db;",
          "1129:   if( argc!=2 ){",
          "",
          "[Removed Lines]",
          "1126:   int rc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: int sqlite3_drop_modules(sqlite3 *db, const char** azNames){",
          "141:   HashElem *pThis, *pNext;",
          "142: #ifdef SQLITE_ENABLE_API_ARMOR",
          "144: #endif",
          "145:   for(pThis=sqliteHashFirst(&db->aModule); pThis; pThis=pNext){",
          "146:     Module *pMod = (Module*)sqliteHashData(pThis);",
          "",
          "[Removed Lines]",
          "143:   if( !sqlite3SafetyCheckOk(db) || zName==0 ) return SQLITE_MISUSE_BKPT;",
          "",
          "[Added Lines]",
          "143:   if( !sqlite3SafetyCheckOk(db) ) return SQLITE_MISUSE_BKPT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c01f41cfa63e413767101a0e71f54f888e446ab4",
      "candidate_info": {
        "commit_hash": "c01f41cfa63e413767101a0e71f54f888e446ab4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c01f41cfa63e413767101a0e71f54f888e446ab4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Updates to a comment to keep it in alignment to the changes on this branch.\n\nFossilOrigin-Name: 7499f74351415e601eb48eff6b6fccd3a78d137f5ea9cd7cac46b904772966de",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9285899120dec24ff2944431ad455d7ae217ef408ae2f1a3e7bdfb897099028c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    }
  ]
}