{
  "cve_id": "CVE-2019-19067",
  "cve_desc": "Four memory leaks in the acp_hw_init() function in drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c in the Linux kernel before 5.3.8 allow attackers to cause a denial of service (memory consumption) by triggering mfd_add_hotplug_devices() or pm_genpd_add_device() failures, aka CID-57be09c6e874. NOTE: third parties dispute the relevance of this because the attacker must already have privileges for module loading",
  "repo": "torvalds/linux",
  "patch_hash": "57be09c6e8747bf48704136d9e3f92bfb93f5725",
  "patch_info": {
    "commit_hash": "57be09c6e8747bf48704136d9e3f92bfb93f5725",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/57be09c6e8747bf48704136d9e3f92bfb93f5725",
    "files": [
      "drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c"
    ],
    "message": "drm/amdgpu: fix multiple memory leaks in acp_hw_init\n\nIn acp_hw_init there are some allocations that needs to be released in\ncase of failure:\n\n1- adev->acp.acp_genpd should be released if any allocation attemp for\nadev->acp.acp_cell, adev->acp.acp_res or i2s_pdata fails.\n2- all of those allocations should be released if\nmfd_add_hotplug_devices or pm_genpd_add_device fail.\n3- Release is needed in case of time out values expire.\n\nReviewed-by: Christian K\u00f6nig <christian.koenig@amd.com>\nSigned-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>\nSigned-off-by: Alex Deucher <alexander.deucher@amd.com>",
    "before_after_code_files": [
      "drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c||drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c"
    ]
  },
  "patch_diff": {
    "drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c||drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c": [
      "File: drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c -> drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:  u32 val = 0;",
      "190:  u32 count = 0;",
      "191:  struct device *dev;",
      "194:  struct amdgpu_device *adev = (struct amdgpu_device *)handle;",
      "",
      "[Removed Lines]",
      "192:  struct i2s_platform_data *i2s_pdata;",
      "",
      "[Added Lines]",
      "192:  struct i2s_platform_data *i2s_pdata = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "231:  adev->acp.acp_cell = kcalloc(ACP_DEVS, sizeof(struct mfd_cell),",
      "232:        GFP_KERNEL);",
      "237:  adev->acp.acp_res = kcalloc(5, sizeof(struct resource), GFP_KERNEL);",
      "238:  if (adev->acp.acp_res == NULL) {",
      "241:  }",
      "243:  i2s_pdata = kcalloc(3, sizeof(struct i2s_platform_data), GFP_KERNEL);",
      "244:  if (i2s_pdata == NULL) {",
      "248:  }",
      "250:  switch (adev->asic_type) {",
      "",
      "[Removed Lines]",
      "234:  if (adev->acp.acp_cell == NULL)",
      "235:   return -ENOMEM;",
      "239:   kfree(adev->acp.acp_cell);",
      "240:   return -ENOMEM;",
      "245:   kfree(adev->acp.acp_res);",
      "246:   kfree(adev->acp.acp_cell);",
      "247:   return -ENOMEM;",
      "",
      "[Added Lines]",
      "234:  if (adev->acp.acp_cell == NULL) {",
      "235:   r = -ENOMEM;",
      "236:   goto failure;",
      "237:  }",
      "241:   r = -ENOMEM;",
      "242:   goto failure;",
      "247:   r = -ENOMEM;",
      "248:   goto failure;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "341:  r = mfd_add_hotplug_devices(adev->acp.parent, adev->acp.acp_cell,",
      "342:         ACP_DEVS);",
      "343:  if (r)",
      "346:  for (i = 0; i < ACP_DEVS ; i++) {",
      "347:   dev = get_mfd_cell_dev(adev->acp.acp_cell[i].name, i);",
      "348:   r = pm_genpd_add_device(&adev->acp.acp_genpd->gpd, dev);",
      "349:   if (r) {",
      "350:    dev_err(dev, \"Failed to add dev to genpd\\n\");",
      "352:   }",
      "353:  }",
      "",
      "[Removed Lines]",
      "344:   return r;",
      "351:    return r;",
      "",
      "[Added Lines]",
      "345:   goto failure;",
      "352:    goto failure;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "367:    break;",
      "368:   if (--count == 0) {",
      "369:    dev_err(&adev->pdev->dev, \"Failed to reset ACP\\n\");",
      "371:   }",
      "372:   udelay(100);",
      "373:  }",
      "",
      "[Removed Lines]",
      "370:    return -ETIMEDOUT;",
      "",
      "[Added Lines]",
      "371:    r = -ETIMEDOUT;",
      "372:    goto failure;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "384:    break;",
      "385:   if (--count == 0) {",
      "386:    dev_err(&adev->pdev->dev, \"Failed to reset ACP\\n\");",
      "388:   }",
      "389:   udelay(100);",
      "390:  }",
      "",
      "[Removed Lines]",
      "387:    return -ETIMEDOUT;",
      "",
      "[Added Lines]",
      "389:    r = -ETIMEDOUT;",
      "390:    goto failure;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "393:  val &= ~ACP_SOFT_RESET__SoftResetAud_MASK;",
      "394:  cgs_write_register(adev->acp.cgs_device, mmACP_SOFT_RESET, val);",
      "395:  return 0;",
      "396: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "400: failure:",
      "401:  kfree(i2s_pdata);",
      "402:  kfree(adev->acp.acp_res);",
      "403:  kfree(adev->acp.acp_cell);",
      "404:  kfree(adev->acp.acp_genpd);",
      "405:  return r;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1104057562ecc1a48ce75b7ae17af948b3f63d7b",
      "candidate_info": {
        "commit_hash": "1104057562ecc1a48ce75b7ae17af948b3f63d7b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1104057562ecc1a48ce75b7ae17af948b3f63d7b",
        "files": [
          "drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c"
        ],
        "message": "drm/amdgpu: fix multiple memory leaks in acp_hw_init\n\nIn acp_hw_init there are some allocations that needs to be released in\ncase of failure:\n\n1- adev->acp.acp_genpd should be released if any allocation attemp for\nadev->acp.acp_cell, adev->acp.acp_res or i2s_pdata fails.\n2- all of those allocations should be released if\nmfd_add_hotplug_devices or pm_genpd_add_device fail.\n3- Release is needed in case of time out values expire.\n\nReviewed-by: Christian K\u00f6nig <christian.koenig@amd.com>\nSigned-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>\nSigned-off-by: Alex Deucher <alexander.deucher@amd.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c||drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c||drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c"
          ],
          "candidate": [
            "drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c||drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c||drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c": [
          "File: drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c -> drivers/gpu/drm/amd/amdgpu/amdgpu_acp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:  u32 val = 0;",
          "190:  u32 count = 0;",
          "191:  struct device *dev;",
          "194:  struct amdgpu_device *adev = (struct amdgpu_device *)handle;",
          "",
          "[Removed Lines]",
          "192:  struct i2s_platform_data *i2s_pdata;",
          "",
          "[Added Lines]",
          "192:  struct i2s_platform_data *i2s_pdata = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:  adev->acp.acp_cell = kcalloc(ACP_DEVS, sizeof(struct mfd_cell),",
          "232:        GFP_KERNEL);",
          "237:  adev->acp.acp_res = kcalloc(5, sizeof(struct resource), GFP_KERNEL);",
          "238:  if (adev->acp.acp_res == NULL) {",
          "241:  }",
          "243:  i2s_pdata = kcalloc(3, sizeof(struct i2s_platform_data), GFP_KERNEL);",
          "244:  if (i2s_pdata == NULL) {",
          "248:  }",
          "250:  switch (adev->asic_type) {",
          "",
          "[Removed Lines]",
          "234:  if (adev->acp.acp_cell == NULL)",
          "235:   return -ENOMEM;",
          "239:   kfree(adev->acp.acp_cell);",
          "240:   return -ENOMEM;",
          "245:   kfree(adev->acp.acp_res);",
          "246:   kfree(adev->acp.acp_cell);",
          "247:   return -ENOMEM;",
          "",
          "[Added Lines]",
          "234:  if (adev->acp.acp_cell == NULL) {",
          "235:   r = -ENOMEM;",
          "236:   goto failure;",
          "237:  }",
          "241:   r = -ENOMEM;",
          "242:   goto failure;",
          "247:   r = -ENOMEM;",
          "248:   goto failure;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:  r = mfd_add_hotplug_devices(adev->acp.parent, adev->acp.acp_cell,",
          "342:         ACP_DEVS);",
          "343:  if (r)",
          "346:  for (i = 0; i < ACP_DEVS ; i++) {",
          "347:   dev = get_mfd_cell_dev(adev->acp.acp_cell[i].name, i);",
          "348:   r = pm_genpd_add_device(&adev->acp.acp_genpd->gpd, dev);",
          "349:   if (r) {",
          "350:    dev_err(dev, \"Failed to add dev to genpd\\n\");",
          "352:   }",
          "353:  }",
          "",
          "[Removed Lines]",
          "344:   return r;",
          "351:    return r;",
          "",
          "[Added Lines]",
          "345:   goto failure;",
          "352:    goto failure;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "367:    break;",
          "368:   if (--count == 0) {",
          "369:    dev_err(&adev->pdev->dev, \"Failed to reset ACP\\n\");",
          "371:   }",
          "372:   udelay(100);",
          "373:  }",
          "",
          "[Removed Lines]",
          "370:    return -ETIMEDOUT;",
          "",
          "[Added Lines]",
          "371:    r = -ETIMEDOUT;",
          "372:    goto failure;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "384:    break;",
          "385:   if (--count == 0) {",
          "386:    dev_err(&adev->pdev->dev, \"Failed to reset ACP\\n\");",
          "388:   }",
          "389:   udelay(100);",
          "390:  }",
          "",
          "[Removed Lines]",
          "387:    return -ETIMEDOUT;",
          "",
          "[Added Lines]",
          "389:    r = -ETIMEDOUT;",
          "390:    goto failure;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "393:  val &= ~ACP_SOFT_RESET__SoftResetAud_MASK;",
          "394:  cgs_write_register(adev->acp.cgs_device, mmACP_SOFT_RESET, val);",
          "395:  return 0;",
          "396: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: failure:",
          "401:  kfree(i2s_pdata);",
          "402:  kfree(adev->acp.acp_res);",
          "403:  kfree(adev->acp.acp_cell);",
          "404:  kfree(adev->acp.acp_genpd);",
          "405:  return r;",
          "",
          "---------------"
        ]
      }
    }
  ]
}