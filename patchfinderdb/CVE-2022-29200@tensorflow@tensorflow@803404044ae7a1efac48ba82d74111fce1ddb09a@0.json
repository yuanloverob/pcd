{
  "cve_id": "CVE-2022-29200",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.LSTMBlockCell` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code does not validate the ranks of any of the arguments to this API call. This results in `CHECK`-failures when the elements of the tensor are accessed. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "803404044ae7a1efac48ba82d74111fce1ddb09a",
  "patch_info": {
    "commit_hash": "803404044ae7a1efac48ba82d74111fce1ddb09a",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/803404044ae7a1efac48ba82d74111fce1ddb09a",
    "files": [
      "tensorflow/core/kernels/rnn/lstm_ops.cc",
      "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
    ],
    "message": "Fix security vulnerability with LSTMBlockCellOp\n\nPiperOrigin-RevId: 446028341",
    "before_after_code_files": [
      "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc",
      "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc": [
      "File: tensorflow/core/kernels/rnn/lstm_ops.cc -> tensorflow/core/kernels/rnn/lstm_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "417:     const Device& device = ctx->eigen_device<Device>();",
      "419:     functor::LSTMBlockCellFprop<Device, T, USE_CUBLAS, gate_layout>(",
      "420:         batch_size, input_size, cell_size)(",
      "421:         ctx, device, forget_bias_, cell_clip_, use_peephole_,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "420:     OP_REQUIRES(ctx, x_tensor->dims() == 2,",
      "421:                 errors::InvalidArgument(\"x_tensor must be rank 2 but is rank \",",
      "422:                                         x_tensor->dims(), \".\"));",
      "423:     OP_REQUIRES(",
      "424:         ctx, cs_prev_tensor->dims() == 2,",
      "425:         errors::InvalidArgument(\"cs_prev_tensor must be rank 2 but is rank \",",
      "426:                                 cs_prev_tensor->dims(), \".\"));",
      "427:     OP_REQUIRES(",
      "428:         ctx, h_prev_tensor->dims() == 2,",
      "429:         errors::InvalidArgument(\"h_prev_tensor must be rank 2 but is rank \",",
      "430:                                 h_prev_tensor->dims(), \".\"));",
      "431:     OP_REQUIRES(ctx, w_tensor->dims() == 2,",
      "432:                 errors::InvalidArgument(\"w_tensor must be rank 2 but is rank \",",
      "433:                                         w_tensor->dims(), \".\"));",
      "434:     OP_REQUIRES(",
      "435:         ctx, wci_tensor->dims() == 1,",
      "436:         errors::InvalidArgument(\"wci_tensor must be rank 1 but is rank \",",
      "437:                                 wci_tensor->dims(), \".\"));",
      "438:     OP_REQUIRES(",
      "439:         ctx, wcf_tensor->dims() == 1,",
      "440:         errors::InvalidArgument(\"wcf_tensor must be rank 1 but is rank \",",
      "441:                                 wci_tensor->dims(), \".\"));",
      "442:     OP_REQUIRES(",
      "443:         ctx, wco_tensor->dims() == 1,",
      "444:         errors::InvalidArgument(\"wco_tensor must be rank 1 but is rank \",",
      "445:                                 wco_tensor->dims(), \".\"));",
      "446:     OP_REQUIRES(ctx, b_tensor->dims() == 1,",
      "447:                 errors::InvalidArgument(\"b_tensor must be rank 1 but is rank \",",
      "448:                                         b_tensor->dims(), \".\"));",
      "449:     OP_REQUIRES(ctx, xh_tensor.dims() == 2,",
      "450:                 errors::InvalidArgument(\"xh_tensor must be rank 2 but is rank \",",
      "451:                                         xh_tensor.dims(), \".\"));",
      "452:     OP_REQUIRES(ctx, i_tensor->dims() == 2,",
      "453:                 errors::InvalidArgument(\"i_tensor must be rank 2 but is rank \",",
      "454:                                         i_tensor->dims(), \".\"));",
      "455:     OP_REQUIRES(ctx, cs_tensor->dims() == 2,",
      "456:                 errors::InvalidArgument(\"cs_tensor must be rank 2 but is rank \",",
      "457:                                         cs_tensor->dims(), \".\"));",
      "458:     OP_REQUIRES(ctx, f_tensor->dims() == 2,",
      "459:                 errors::InvalidArgument(\"f_tensor must be rank 2 but is rank \",",
      "460:                                         f_tensor->dims(), \".\"));",
      "461:     OP_REQUIRES(ctx, o_tensor->dims() == 2,",
      "462:                 errors::InvalidArgument(\"o_tensor must be rank 2 but is rank \",",
      "463:                                         o_tensor->dims(), \".\"));",
      "464:     OP_REQUIRES(ctx, ci_tensor->dims() == 2,",
      "465:                 errors::InvalidArgument(\"ci_tensor must be rank 2 but is rank \",",
      "466:                                         ci_tensor->dims(), \".\"));",
      "467:     OP_REQUIRES(ctx, co_tensor->dims() == 2,",
      "468:                 errors::InvalidArgument(\"co_tensor must be rank 2 but is rank \",",
      "469:                                         co_tensor->dims(), \".\"));",
      "470:     OP_REQUIRES(",
      "471:         ctx, gates_tensor.dims() == 2,",
      "472:         errors::InvalidArgument(\"gates_tensor must be rank 2 but is rank \",",
      "473:                                 gates_tensor.dims(), \".\"));",
      "474:     OP_REQUIRES(ctx, h_tensor->dims() == 2,",
      "475:                 errors::InvalidArgument(\"h_tensor must be rank 2 but is rank \",",
      "476:                                         h_tensor->dims(), \".\"));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py -> tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: from tensorflow.python.framework import test_util",
      "34: from tensorflow.python.ops import   array_ops",
      "35: from tensorflow.python.ops import control_flow_ops",
      "36: from tensorflow.python.ops import gradients_impl",
      "37: from tensorflow.python.ops import init_ops",
      "38: from tensorflow.python.ops import math_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36: from tensorflow.python.ops import gen_rnn_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1323:   def testDynamicEquivalentToStaticRNNWithSequenceLength(self):",
      "1324:     self._testDynamicEquivalentToStaticRNN(use_sequence_length=True)",
      "1327: class BidirectionalRNNTest(test.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1327:   @test_util.run_in_graph_and_eager_modes",
      "1328:   def testLSTMBlockCellErrorHandling(self):",
      "1329:     forget_bias = 1",
      "1330:     cell_clip = 0",
      "1331:     use_peephole = False",
      "1332:     x = constant_op.constant(0.837607, shape=[28, 29], dtype=dtypes.float32)",
      "1333:     cs_prev = constant_op.constant(0, shape=[28, 17], dtype=dtypes.float32)",
      "1334:     h_prev = constant_op.constant(",
      "1335:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
      "1336:     w = constant_op.constant(0.887386262, shape=[46, 68], dtype=dtypes.float32)",
      "1337:     wci = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
      "1338:     wcf = constant_op.constant(0, shape=[17], dtype=dtypes.float32)",
      "1339:     wco = constant_op.constant(",
      "1340:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
      "1341:     b = constant_op.constant(0.75259006, shape=[68], dtype=dtypes.float32)",
      "1342:     with self.assertRaises(errors_impl.InvalidArgumentError):",
      "1343:       self.evaluate(",
      "1344:           gen_rnn_ops.lstm_block_cell(",
      "1345:               x=x,",
      "1346:               cs_prev=cs_prev,",
      "1347:               h_prev=h_prev,",
      "1348:               w=w,",
      "1349:               wci=wci,",
      "1350:               wcf=wcf,",
      "1351:               wco=wco,",
      "1352:               b=b,",
      "1353:               forget_bias=forget_bias,",
      "1354:               cell_clip=cell_clip,",
      "1355:               use_peephole=use_peephole))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d66e942e684857cfbbd160dc86d40eb5fc988a6",
      "candidate_info": {
        "commit_hash": "5d66e942e684857cfbbd160dc86d40eb5fc988a6",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5d66e942e684857cfbbd160dc86d40eb5fc988a6",
        "files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc"
        ],
        "message": "Fix typo in lstm_ops.cc\n\nFix typo in line 441. Change \"wci_tensor->dims()\" to \"wcf_tensor->dims()\". Fixes #https://github.com/tensorflow/tensorflow/issues/60114",
        "before_after_code_files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc": [
          "File: tensorflow/core/kernels/rnn/lstm_ops.cc -> tensorflow/core/kernels/rnn/lstm_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:     OP_REQUIRES(",
          "439:         ctx, wcf_tensor->dims() == 1,",
          "440:         errors::InvalidArgument(\"wcf_tensor must be rank 1 but is rank \",",
          "442:     OP_REQUIRES(",
          "443:         ctx, wco_tensor->dims() == 1,",
          "444:         errors::InvalidArgument(\"wco_tensor must be rank 1 but is rank \",",
          "",
          "[Removed Lines]",
          "441:                                 wci_tensor->dims(), \".\"));",
          "",
          "[Added Lines]",
          "441:                                 wcf_tensor->dims(), \".\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64d4c4bfc2209f87c183ca79a5e05c073c32c382",
      "candidate_info": {
        "commit_hash": "64d4c4bfc2209f87c183ca79a5e05c073c32c382",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/64d4c4bfc2209f87c183ca79a5e05c073c32c382",
        "files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc",
          "tensorflow/python/kernel_tests/rnn_cell_test.py"
        ],
        "message": "Fix security vulnerability with LSTMBlockCellOp\n\nPiperOrigin-RevId: 446028341",
        "before_after_code_files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc",
          "tensorflow/python/kernel_tests/rnn_cell_test.py||tensorflow/python/kernel_tests/rnn_cell_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc": [
          "File: tensorflow/core/kernels/rnn/lstm_ops.cc -> tensorflow/core/kernels/rnn/lstm_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:     const Device& device = ctx->eigen_device<Device>();",
          "419:     functor::LSTMBlockCellFprop<Device, T, USE_CUBLAS, gate_layout>(",
          "420:         batch_size, input_size, cell_size)(",
          "421:         ctx, device, forget_bias_, cell_clip_, use_peephole_,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420:     OP_REQUIRES(ctx, x_tensor->dims() == 2,",
          "421:                 errors::InvalidArgument(\"x_tensor must be rank 2 but is rank \",",
          "422:                                         x_tensor->dims(), \".\"));",
          "423:     OP_REQUIRES(",
          "424:         ctx, cs_prev_tensor->dims() == 2,",
          "425:         errors::InvalidArgument(\"cs_prev_tensor must be rank 2 but is rank \",",
          "426:                                 cs_prev_tensor->dims(), \".\"));",
          "427:     OP_REQUIRES(",
          "428:         ctx, h_prev_tensor->dims() == 2,",
          "429:         errors::InvalidArgument(\"h_prev_tensor must be rank 2 but is rank \",",
          "430:                                 h_prev_tensor->dims(), \".\"));",
          "431:     OP_REQUIRES(ctx, w_tensor->dims() == 2,",
          "432:                 errors::InvalidArgument(\"w_tensor must be rank 2 but is rank \",",
          "433:                                         w_tensor->dims(), \".\"));",
          "434:     OP_REQUIRES(",
          "435:         ctx, wci_tensor->dims() == 1,",
          "436:         errors::InvalidArgument(\"wci_tensor must be rank 1 but is rank \",",
          "437:                                 wci_tensor->dims(), \".\"));",
          "438:     OP_REQUIRES(",
          "439:         ctx, wcf_tensor->dims() == 1,",
          "440:         errors::InvalidArgument(\"wcf_tensor must be rank 1 but is rank \",",
          "441:                                 wci_tensor->dims(), \".\"));",
          "442:     OP_REQUIRES(",
          "443:         ctx, wco_tensor->dims() == 1,",
          "444:         errors::InvalidArgument(\"wco_tensor must be rank 1 but is rank \",",
          "445:                                 wco_tensor->dims(), \".\"));",
          "446:     OP_REQUIRES(ctx, b_tensor->dims() == 1,",
          "447:                 errors::InvalidArgument(\"b_tensor must be rank 1 but is rank \",",
          "448:                                         b_tensor->dims(), \".\"));",
          "449:     OP_REQUIRES(ctx, xh_tensor.dims() == 2,",
          "450:                 errors::InvalidArgument(\"xh_tensor must be rank 2 but is rank \",",
          "451:                                         xh_tensor.dims(), \".\"));",
          "452:     OP_REQUIRES(ctx, i_tensor->dims() == 2,",
          "453:                 errors::InvalidArgument(\"i_tensor must be rank 2 but is rank \",",
          "454:                                         i_tensor->dims(), \".\"));",
          "455:     OP_REQUIRES(ctx, cs_tensor->dims() == 2,",
          "456:                 errors::InvalidArgument(\"cs_tensor must be rank 2 but is rank \",",
          "457:                                         cs_tensor->dims(), \".\"));",
          "458:     OP_REQUIRES(ctx, f_tensor->dims() == 2,",
          "459:                 errors::InvalidArgument(\"f_tensor must be rank 2 but is rank \",",
          "460:                                         f_tensor->dims(), \".\"));",
          "461:     OP_REQUIRES(ctx, o_tensor->dims() == 2,",
          "462:                 errors::InvalidArgument(\"o_tensor must be rank 2 but is rank \",",
          "463:                                         o_tensor->dims(), \".\"));",
          "464:     OP_REQUIRES(ctx, ci_tensor->dims() == 2,",
          "465:                 errors::InvalidArgument(\"ci_tensor must be rank 2 but is rank \",",
          "466:                                         ci_tensor->dims(), \".\"));",
          "467:     OP_REQUIRES(ctx, co_tensor->dims() == 2,",
          "468:                 errors::InvalidArgument(\"co_tensor must be rank 2 but is rank \",",
          "469:                                         co_tensor->dims(), \".\"));",
          "470:     OP_REQUIRES(",
          "471:         ctx, gates_tensor.dims() == 2,",
          "472:         errors::InvalidArgument(\"gates_tensor must be rank 2 but is rank \",",
          "473:                                 gates_tensor.dims(), \".\"));",
          "474:     OP_REQUIRES(ctx, h_tensor->dims() == 2,",
          "475:                 errors::InvalidArgument(\"h_tensor must be rank 2 but is rank \",",
          "476:                                         h_tensor->dims(), \".\"));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/rnn_cell_test.py||tensorflow/python/kernel_tests/rnn_cell_test.py": [
          "File: tensorflow/python/kernel_tests/rnn_cell_test.py -> tensorflow/python/kernel_tests/rnn_cell_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: from tensorflow.python.framework import test_util",
          "38: from tensorflow.python.ops import   array_ops",
          "39: from tensorflow.python.ops import control_flow_ops",
          "40: from tensorflow.python.ops import gradients_impl",
          "41: from tensorflow.python.ops import init_ops",
          "42: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: from tensorflow.python.ops import gen_rnn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1328:   def testDynamicEquivalentToStaticRNNWithSequenceLength(self):",
          "1329:     self._testDynamicEquivalentToStaticRNN(use_sequence_length=True)",
          "1332: class BidirectionalRNNTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1332:   @test_util.run_in_graph_and_eager_modes",
          "1333:   def testLSTMBlockCellErrorHandling(self):",
          "1334:     forget_bias = 1",
          "1335:     cell_clip = 0",
          "1336:     use_peephole = False",
          "1337:     x = constant_op.constant(0.837607, shape=[28, 29], dtype=dtypes.float32)",
          "1338:     cs_prev = constant_op.constant(0, shape=[28, 17], dtype=dtypes.float32)",
          "1339:     h_prev = constant_op.constant(",
          "1340:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
          "1341:     w = constant_op.constant(0.887386262, shape=[46, 68], dtype=dtypes.float32)",
          "1342:     wci = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "1343:     wcf = constant_op.constant(0, shape=[17], dtype=dtypes.float32)",
          "1344:     wco = constant_op.constant(",
          "1345:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
          "1346:     b = constant_op.constant(0.75259006, shape=[68], dtype=dtypes.float32)",
          "1347:     with self.assertRaises(errors_impl.InvalidArgumentError):",
          "1348:       self.evaluate(",
          "1349:           gen_rnn_ops.lstm_block_cell(",
          "1350:               x=x,",
          "1351:               cs_prev=cs_prev,",
          "1352:               h_prev=h_prev,",
          "1353:               w=w,",
          "1354:               wci=wci,",
          "1355:               wcf=wcf,",
          "1356:               wco=wco,",
          "1357:               b=b,",
          "1358:               forget_bias=forget_bias,",
          "1359:               cell_clip=cell_clip,",
          "1360:               use_peephole=use_peephole))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ed2bd0c7f9e8ede4136df9bc13cb15d4fd77b74",
      "candidate_info": {
        "commit_hash": "6ed2bd0c7f9e8ede4136df9bc13cb15d4fd77b74",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6ed2bd0c7f9e8ede4136df9bc13cb15d4fd77b74",
        "files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc",
          "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
        ],
        "message": "Fix security vulnerability with LSTMBlockCellOp\n\nPiperOrigin-RevId: 446028341",
        "before_after_code_files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc",
          "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc",
            "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc",
            "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc": [
          "File: tensorflow/core/kernels/rnn/lstm_ops.cc -> tensorflow/core/kernels/rnn/lstm_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:     const Device& device = ctx->eigen_device<Device>();",
          "419:     functor::LSTMBlockCellFprop<Device, T, USE_CUBLAS, gate_layout>(",
          "420:         batch_size, input_size, cell_size)(",
          "421:         ctx, device, forget_bias_, cell_clip_, use_peephole_,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420:     OP_REQUIRES(ctx, x_tensor->dims() == 2,",
          "421:                 errors::InvalidArgument(\"x_tensor must be rank 2 but is rank \",",
          "422:                                         x_tensor->dims(), \".\"));",
          "423:     OP_REQUIRES(",
          "424:         ctx, cs_prev_tensor->dims() == 2,",
          "425:         errors::InvalidArgument(\"cs_prev_tensor must be rank 2 but is rank \",",
          "426:                                 cs_prev_tensor->dims(), \".\"));",
          "427:     OP_REQUIRES(",
          "428:         ctx, h_prev_tensor->dims() == 2,",
          "429:         errors::InvalidArgument(\"h_prev_tensor must be rank 2 but is rank \",",
          "430:                                 h_prev_tensor->dims(), \".\"));",
          "431:     OP_REQUIRES(ctx, w_tensor->dims() == 2,",
          "432:                 errors::InvalidArgument(\"w_tensor must be rank 2 but is rank \",",
          "433:                                         w_tensor->dims(), \".\"));",
          "434:     OP_REQUIRES(",
          "435:         ctx, wci_tensor->dims() == 1,",
          "436:         errors::InvalidArgument(\"wci_tensor must be rank 1 but is rank \",",
          "437:                                 wci_tensor->dims(), \".\"));",
          "438:     OP_REQUIRES(",
          "439:         ctx, wcf_tensor->dims() == 1,",
          "440:         errors::InvalidArgument(\"wcf_tensor must be rank 1 but is rank \",",
          "441:                                 wci_tensor->dims(), \".\"));",
          "442:     OP_REQUIRES(",
          "443:         ctx, wco_tensor->dims() == 1,",
          "444:         errors::InvalidArgument(\"wco_tensor must be rank 1 but is rank \",",
          "445:                                 wco_tensor->dims(), \".\"));",
          "446:     OP_REQUIRES(ctx, b_tensor->dims() == 1,",
          "447:                 errors::InvalidArgument(\"b_tensor must be rank 1 but is rank \",",
          "448:                                         b_tensor->dims(), \".\"));",
          "449:     OP_REQUIRES(ctx, xh_tensor.dims() == 2,",
          "450:                 errors::InvalidArgument(\"xh_tensor must be rank 2 but is rank \",",
          "451:                                         xh_tensor.dims(), \".\"));",
          "452:     OP_REQUIRES(ctx, i_tensor->dims() == 2,",
          "453:                 errors::InvalidArgument(\"i_tensor must be rank 2 but is rank \",",
          "454:                                         i_tensor->dims(), \".\"));",
          "455:     OP_REQUIRES(ctx, cs_tensor->dims() == 2,",
          "456:                 errors::InvalidArgument(\"cs_tensor must be rank 2 but is rank \",",
          "457:                                         cs_tensor->dims(), \".\"));",
          "458:     OP_REQUIRES(ctx, f_tensor->dims() == 2,",
          "459:                 errors::InvalidArgument(\"f_tensor must be rank 2 but is rank \",",
          "460:                                         f_tensor->dims(), \".\"));",
          "461:     OP_REQUIRES(ctx, o_tensor->dims() == 2,",
          "462:                 errors::InvalidArgument(\"o_tensor must be rank 2 but is rank \",",
          "463:                                         o_tensor->dims(), \".\"));",
          "464:     OP_REQUIRES(ctx, ci_tensor->dims() == 2,",
          "465:                 errors::InvalidArgument(\"ci_tensor must be rank 2 but is rank \",",
          "466:                                         ci_tensor->dims(), \".\"));",
          "467:     OP_REQUIRES(ctx, co_tensor->dims() == 2,",
          "468:                 errors::InvalidArgument(\"co_tensor must be rank 2 but is rank \",",
          "469:                                         co_tensor->dims(), \".\"));",
          "470:     OP_REQUIRES(",
          "471:         ctx, gates_tensor.dims() == 2,",
          "472:         errors::InvalidArgument(\"gates_tensor must be rank 2 but is rank \",",
          "473:                                 gates_tensor.dims(), \".\"));",
          "474:     OP_REQUIRES(ctx, h_tensor->dims() == 2,",
          "475:                 errors::InvalidArgument(\"h_tensor must be rank 2 but is rank \",",
          "476:                                         h_tensor->dims(), \".\"));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py -> tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: from tensorflow.python.framework import test_util",
          "34: from tensorflow.python.ops import   array_ops",
          "35: from tensorflow.python.ops import control_flow_ops",
          "36: from tensorflow.python.ops import gradients_impl",
          "37: from tensorflow.python.ops import init_ops",
          "38: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: from tensorflow.python.ops import gen_rnn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1323:   def testDynamicEquivalentToStaticRNNWithSequenceLength(self):",
          "1324:     self._testDynamicEquivalentToStaticRNN(use_sequence_length=True)",
          "1327: class BidirectionalRNNTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1327:   @test_util.run_in_graph_and_eager_modes",
          "1328:   def testLSTMBlockCellErrorHandling(self):",
          "1329:     forget_bias = 1",
          "1330:     cell_clip = 0",
          "1331:     use_peephole = False",
          "1332:     x = constant_op.constant(0.837607, shape=[28, 29], dtype=dtypes.float32)",
          "1333:     cs_prev = constant_op.constant(0, shape=[28, 17], dtype=dtypes.float32)",
          "1334:     h_prev = constant_op.constant(",
          "1335:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
          "1336:     w = constant_op.constant(0.887386262, shape=[46, 68], dtype=dtypes.float32)",
          "1337:     wci = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "1338:     wcf = constant_op.constant(0, shape=[17], dtype=dtypes.float32)",
          "1339:     wco = constant_op.constant(",
          "1340:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
          "1341:     b = constant_op.constant(0.75259006, shape=[68], dtype=dtypes.float32)",
          "1342:     with self.assertRaises(errors_impl.InvalidArgumentError):",
          "1343:       self.evaluate(",
          "1344:           gen_rnn_ops.lstm_block_cell(",
          "1345:               x=x,",
          "1346:               cs_prev=cs_prev,",
          "1347:               h_prev=h_prev,",
          "1348:               w=w,",
          "1349:               wci=wci,",
          "1350:               wcf=wcf,",
          "1351:               wco=wco,",
          "1352:               b=b,",
          "1353:               forget_bias=forget_bias,",
          "1354:               cell_clip=cell_clip,",
          "1355:               use_peephole=use_peephole))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d247110e83ff4b26064d3579ee7411889947aca",
      "candidate_info": {
        "commit_hash": "2d247110e83ff4b26064d3579ee7411889947aca",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2d247110e83ff4b26064d3579ee7411889947aca",
        "files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc",
          "tensorflow/python/kernel_tests/rnn_cell_test.py"
        ],
        "message": "Fix security vulnerability with LSTMBlockCellOp\n\nPiperOrigin-RevId: 446028341",
        "before_after_code_files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc",
          "tensorflow/python/kernel_tests/rnn_cell_test.py||tensorflow/python/kernel_tests/rnn_cell_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc": [
          "File: tensorflow/core/kernels/rnn/lstm_ops.cc -> tensorflow/core/kernels/rnn/lstm_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:     const Device& device = ctx->eigen_device<Device>();",
          "419:     functor::LSTMBlockCellFprop<Device, T, USE_CUBLAS, gate_layout>(",
          "420:         batch_size, input_size, cell_size)(",
          "421:         ctx, device, forget_bias_, cell_clip_, use_peephole_,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420:     OP_REQUIRES(ctx, x_tensor->dims() == 2,",
          "421:                 errors::InvalidArgument(\"x_tensor must be rank 2 but is rank \",",
          "422:                                         x_tensor->dims(), \".\"));",
          "423:     OP_REQUIRES(",
          "424:         ctx, cs_prev_tensor->dims() == 2,",
          "425:         errors::InvalidArgument(\"cs_prev_tensor must be rank 2 but is rank \",",
          "426:                                 cs_prev_tensor->dims(), \".\"));",
          "427:     OP_REQUIRES(",
          "428:         ctx, h_prev_tensor->dims() == 2,",
          "429:         errors::InvalidArgument(\"h_prev_tensor must be rank 2 but is rank \",",
          "430:                                 h_prev_tensor->dims(), \".\"));",
          "431:     OP_REQUIRES(ctx, w_tensor->dims() == 2,",
          "432:                 errors::InvalidArgument(\"w_tensor must be rank 2 but is rank \",",
          "433:                                         w_tensor->dims(), \".\"));",
          "434:     OP_REQUIRES(",
          "435:         ctx, wci_tensor->dims() == 1,",
          "436:         errors::InvalidArgument(\"wci_tensor must be rank 1 but is rank \",",
          "437:                                 wci_tensor->dims(), \".\"));",
          "438:     OP_REQUIRES(",
          "439:         ctx, wcf_tensor->dims() == 1,",
          "440:         errors::InvalidArgument(\"wcf_tensor must be rank 1 but is rank \",",
          "441:                                 wci_tensor->dims(), \".\"));",
          "442:     OP_REQUIRES(",
          "443:         ctx, wco_tensor->dims() == 1,",
          "444:         errors::InvalidArgument(\"wco_tensor must be rank 1 but is rank \",",
          "445:                                 wco_tensor->dims(), \".\"));",
          "446:     OP_REQUIRES(ctx, b_tensor->dims() == 1,",
          "447:                 errors::InvalidArgument(\"b_tensor must be rank 1 but is rank \",",
          "448:                                         b_tensor->dims(), \".\"));",
          "449:     OP_REQUIRES(ctx, xh_tensor.dims() == 2,",
          "450:                 errors::InvalidArgument(\"xh_tensor must be rank 2 but is rank \",",
          "451:                                         xh_tensor.dims(), \".\"));",
          "452:     OP_REQUIRES(ctx, i_tensor->dims() == 2,",
          "453:                 errors::InvalidArgument(\"i_tensor must be rank 2 but is rank \",",
          "454:                                         i_tensor->dims(), \".\"));",
          "455:     OP_REQUIRES(ctx, cs_tensor->dims() == 2,",
          "456:                 errors::InvalidArgument(\"cs_tensor must be rank 2 but is rank \",",
          "457:                                         cs_tensor->dims(), \".\"));",
          "458:     OP_REQUIRES(ctx, f_tensor->dims() == 2,",
          "459:                 errors::InvalidArgument(\"f_tensor must be rank 2 but is rank \",",
          "460:                                         f_tensor->dims(), \".\"));",
          "461:     OP_REQUIRES(ctx, o_tensor->dims() == 2,",
          "462:                 errors::InvalidArgument(\"o_tensor must be rank 2 but is rank \",",
          "463:                                         o_tensor->dims(), \".\"));",
          "464:     OP_REQUIRES(ctx, ci_tensor->dims() == 2,",
          "465:                 errors::InvalidArgument(\"ci_tensor must be rank 2 but is rank \",",
          "466:                                         ci_tensor->dims(), \".\"));",
          "467:     OP_REQUIRES(ctx, co_tensor->dims() == 2,",
          "468:                 errors::InvalidArgument(\"co_tensor must be rank 2 but is rank \",",
          "469:                                         co_tensor->dims(), \".\"));",
          "470:     OP_REQUIRES(",
          "471:         ctx, gates_tensor.dims() == 2,",
          "472:         errors::InvalidArgument(\"gates_tensor must be rank 2 but is rank \",",
          "473:                                 gates_tensor.dims(), \".\"));",
          "474:     OP_REQUIRES(ctx, h_tensor->dims() == 2,",
          "475:                 errors::InvalidArgument(\"h_tensor must be rank 2 but is rank \",",
          "476:                                         h_tensor->dims(), \".\"));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/rnn_cell_test.py||tensorflow/python/kernel_tests/rnn_cell_test.py": [
          "File: tensorflow/python/kernel_tests/rnn_cell_test.py -> tensorflow/python/kernel_tests/rnn_cell_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: from tensorflow.python.framework import test_util",
          "38: from tensorflow.python.ops import   array_ops",
          "39: from tensorflow.python.ops import control_flow_ops",
          "40: from tensorflow.python.ops import gradients_impl",
          "41: from tensorflow.python.ops import init_ops",
          "42: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: from tensorflow.python.ops import gen_rnn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1328:   def testDynamicEquivalentToStaticRNNWithSequenceLength(self):",
          "1329:     self._testDynamicEquivalentToStaticRNN(use_sequence_length=True)",
          "1332: class BidirectionalRNNTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1332:   @test_util.run_in_graph_and_eager_modes",
          "1333:   def testLSTMBlockCellErrorHandling(self):",
          "1334:     forget_bias = 1",
          "1335:     cell_clip = 0",
          "1336:     use_peephole = False",
          "1337:     x = constant_op.constant(0.837607, shape=[28, 29], dtype=dtypes.float32)",
          "1338:     cs_prev = constant_op.constant(0, shape=[28, 17], dtype=dtypes.float32)",
          "1339:     h_prev = constant_op.constant(",
          "1340:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
          "1341:     w = constant_op.constant(0.887386262, shape=[46, 68], dtype=dtypes.float32)",
          "1342:     wci = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "1343:     wcf = constant_op.constant(0, shape=[17], dtype=dtypes.float32)",
          "1344:     wco = constant_op.constant(",
          "1345:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
          "1346:     b = constant_op.constant(0.75259006, shape=[68], dtype=dtypes.float32)",
          "1347:     with self.assertRaises(errors_impl.InvalidArgumentError):",
          "1348:       self.evaluate(",
          "1349:           gen_rnn_ops.lstm_block_cell(",
          "1350:               x=x,",
          "1351:               cs_prev=cs_prev,",
          "1352:               h_prev=h_prev,",
          "1353:               w=w,",
          "1354:               wci=wci,",
          "1355:               wcf=wcf,",
          "1356:               wco=wco,",
          "1357:               b=b,",
          "1358:               forget_bias=forget_bias,",
          "1359:               cell_clip=cell_clip,",
          "1360:               use_peephole=use_peephole))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da9a69a36dd115d18871388b6149f0f9df0da4db",
      "candidate_info": {
        "commit_hash": "da9a69a36dd115d18871388b6149f0f9df0da4db",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/da9a69a36dd115d18871388b6149f0f9df0da4db",
        "files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc",
          "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
        ],
        "message": "Fix security vulnerability with LSTMBlockCellOp\n\nPiperOrigin-RevId: 446028341",
        "before_after_code_files": [
          "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc",
          "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc",
            "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc",
            "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/rnn/lstm_ops.cc||tensorflow/core/kernels/rnn/lstm_ops.cc": [
          "File: tensorflow/core/kernels/rnn/lstm_ops.cc -> tensorflow/core/kernels/rnn/lstm_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:     const Device& device = ctx->eigen_device<Device>();",
          "419:     functor::LSTMBlockCellFprop<Device, T, USE_CUBLAS, gate_layout>(",
          "420:         batch_size, input_size, cell_size)(",
          "421:         ctx, device, forget_bias_, cell_clip_, use_peephole_,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420:     OP_REQUIRES(ctx, x_tensor->dims() == 2,",
          "421:                 errors::InvalidArgument(\"x_tensor must be rank 2 but is rank \",",
          "422:                                         x_tensor->dims(), \".\"));",
          "423:     OP_REQUIRES(",
          "424:         ctx, cs_prev_tensor->dims() == 2,",
          "425:         errors::InvalidArgument(\"cs_prev_tensor must be rank 2 but is rank \",",
          "426:                                 cs_prev_tensor->dims(), \".\"));",
          "427:     OP_REQUIRES(",
          "428:         ctx, h_prev_tensor->dims() == 2,",
          "429:         errors::InvalidArgument(\"h_prev_tensor must be rank 2 but is rank \",",
          "430:                                 h_prev_tensor->dims(), \".\"));",
          "431:     OP_REQUIRES(ctx, w_tensor->dims() == 2,",
          "432:                 errors::InvalidArgument(\"w_tensor must be rank 2 but is rank \",",
          "433:                                         w_tensor->dims(), \".\"));",
          "434:     OP_REQUIRES(",
          "435:         ctx, wci_tensor->dims() == 1,",
          "436:         errors::InvalidArgument(\"wci_tensor must be rank 1 but is rank \",",
          "437:                                 wci_tensor->dims(), \".\"));",
          "438:     OP_REQUIRES(",
          "439:         ctx, wcf_tensor->dims() == 1,",
          "440:         errors::InvalidArgument(\"wcf_tensor must be rank 1 but is rank \",",
          "441:                                 wci_tensor->dims(), \".\"));",
          "442:     OP_REQUIRES(",
          "443:         ctx, wco_tensor->dims() == 1,",
          "444:         errors::InvalidArgument(\"wco_tensor must be rank 1 but is rank \",",
          "445:                                 wco_tensor->dims(), \".\"));",
          "446:     OP_REQUIRES(ctx, b_tensor->dims() == 1,",
          "447:                 errors::InvalidArgument(\"b_tensor must be rank 1 but is rank \",",
          "448:                                         b_tensor->dims(), \".\"));",
          "449:     OP_REQUIRES(ctx, xh_tensor.dims() == 2,",
          "450:                 errors::InvalidArgument(\"xh_tensor must be rank 2 but is rank \",",
          "451:                                         xh_tensor.dims(), \".\"));",
          "452:     OP_REQUIRES(ctx, i_tensor->dims() == 2,",
          "453:                 errors::InvalidArgument(\"i_tensor must be rank 2 but is rank \",",
          "454:                                         i_tensor->dims(), \".\"));",
          "455:     OP_REQUIRES(ctx, cs_tensor->dims() == 2,",
          "456:                 errors::InvalidArgument(\"cs_tensor must be rank 2 but is rank \",",
          "457:                                         cs_tensor->dims(), \".\"));",
          "458:     OP_REQUIRES(ctx, f_tensor->dims() == 2,",
          "459:                 errors::InvalidArgument(\"f_tensor must be rank 2 but is rank \",",
          "460:                                         f_tensor->dims(), \".\"));",
          "461:     OP_REQUIRES(ctx, o_tensor->dims() == 2,",
          "462:                 errors::InvalidArgument(\"o_tensor must be rank 2 but is rank \",",
          "463:                                         o_tensor->dims(), \".\"));",
          "464:     OP_REQUIRES(ctx, ci_tensor->dims() == 2,",
          "465:                 errors::InvalidArgument(\"ci_tensor must be rank 2 but is rank \",",
          "466:                                         ci_tensor->dims(), \".\"));",
          "467:     OP_REQUIRES(ctx, co_tensor->dims() == 2,",
          "468:                 errors::InvalidArgument(\"co_tensor must be rank 2 but is rank \",",
          "469:                                         co_tensor->dims(), \".\"));",
          "470:     OP_REQUIRES(",
          "471:         ctx, gates_tensor.dims() == 2,",
          "472:         errors::InvalidArgument(\"gates_tensor must be rank 2 but is rank \",",
          "473:                                 gates_tensor.dims(), \".\"));",
          "474:     OP_REQUIRES(ctx, h_tensor->dims() == 2,",
          "475:                 errors::InvalidArgument(\"h_tensor must be rank 2 but is rank \",",
          "476:                                         h_tensor->dims(), \".\"));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py||tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py -> tensorflow/python/kernel_tests/nn_ops/rnn_cell_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: from tensorflow.python.framework import test_util",
          "34: from tensorflow.python.ops import   array_ops",
          "35: from tensorflow.python.ops import control_flow_ops",
          "36: from tensorflow.python.ops import gradients_impl",
          "37: from tensorflow.python.ops import init_ops",
          "38: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: from tensorflow.python.ops import gen_rnn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1324:   def testDynamicEquivalentToStaticRNNWithSequenceLength(self):",
          "1325:     self._testDynamicEquivalentToStaticRNN(use_sequence_length=True)",
          "1328: class BidirectionalRNNTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1328:   @test_util.run_in_graph_and_eager_modes",
          "1329:   def testLSTMBlockCellErrorHandling(self):",
          "1330:     forget_bias = 1",
          "1331:     cell_clip = 0",
          "1332:     use_peephole = False",
          "1333:     x = constant_op.constant(0.837607, shape=[28, 29], dtype=dtypes.float32)",
          "1334:     cs_prev = constant_op.constant(0, shape=[28, 17], dtype=dtypes.float32)",
          "1335:     h_prev = constant_op.constant(",
          "1336:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
          "1337:     w = constant_op.constant(0.887386262, shape=[46, 68], dtype=dtypes.float32)",
          "1338:     wci = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "1339:     wcf = constant_op.constant(0, shape=[17], dtype=dtypes.float32)",
          "1340:     wco = constant_op.constant(",
          "1341:         0.592631638, shape=[28, 17], dtype=dtypes.float32)",
          "1342:     b = constant_op.constant(0.75259006, shape=[68], dtype=dtypes.float32)",
          "1343:     with self.assertRaises(errors_impl.InvalidArgumentError):",
          "1344:       self.evaluate(",
          "1345:           gen_rnn_ops.lstm_block_cell(",
          "1346:               x=x,",
          "1347:               cs_prev=cs_prev,",
          "1348:               h_prev=h_prev,",
          "1349:               w=w,",
          "1350:               wci=wci,",
          "1351:               wcf=wcf,",
          "1352:               wco=wco,",
          "1353:               b=b,",
          "1354:               forget_bias=forget_bias,",
          "1355:               cell_clip=cell_clip,",
          "1356:               use_peephole=use_peephole))",
          "",
          "---------------"
        ]
      }
    }
  ]
}