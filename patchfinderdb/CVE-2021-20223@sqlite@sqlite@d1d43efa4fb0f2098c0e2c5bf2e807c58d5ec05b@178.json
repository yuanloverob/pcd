{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45248de39acbf885d5580bf53f23a4e769374957",
      "candidate_info": {
        "commit_hash": "45248de39acbf885d5580bf53f23a4e769374957",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45248de39acbf885d5580bf53f23a4e769374957",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/btreeInt.h",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/vacuum.c"
        ],
        "message": "The SQLITE_TESTCTRL_RESERVE operator is removed.  In its place is the more generate SQLITE_FCNTL_RESERVE_BYTES which is an API and which can operator on more than just the main schema.\n\nFossilOrigin-Name: abc1aad74f7b6a1e72fb09936239f2224aa942d16296c6a3de0b8daef4bc8471",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/btreeInt.h||src/btreeInt.h",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/vacuum.c||src/vacuum.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4135cb024456288d9c85aef5fb572dbb591527dd33d9a60ca5946b712c269941",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2857: int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){",
          "2858:   int rc = SQLITE_OK;",
          "2859:   BtShared *pBt = p->pBt;",
          "2861:   sqlite3BtreeEnter(p);",
          "2862:   if( pBt->btsFlags & BTS_PAGESIZE_FIXED ){",
          "2863:     sqlite3BtreeLeave(p);",
          "2864:     return SQLITE_READONLY;",
          "",
          "[Removed Lines]",
          "2860:   assert( nReserve>=-1 && nReserve<=255 );",
          "",
          "[Added Lines]",
          "2860:   assert( nReserve>=-1 && nReserve<=254 );",
          "2862:   if( nReserve>=0 ){",
          "2863:     pBt->nReserveWanted = nReserve + 1;",
          "2864:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2915:   int n;",
          "2916:   sqlite3BtreeEnter(p);",
          "2918:   sqlite3BtreeLeave(p);",
          "2919:   return n;",
          "2920: }",
          "",
          "[Removed Lines]",
          "2914: int sqlite3BtreeGetOptimalReserve(Btree *p){",
          "2917:   n = sqlite3BtreeGetReserveNoMutex(p);",
          "",
          "[Added Lines]",
          "2917: int sqlite3BtreeGetRequestedReserve(Btree *p){",
          "2920:   n = ((int)p->pBt->nReserveWanted) - 1;",
          "2921:   if( n<0 ) n = sqlite3BtreeGetReserveNoMutex(p);",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: int sqlite3BtreeMaxPageCount(Btree*,int);",
          "75: u32 sqlite3BtreeLastPage(Btree*);",
          "76: int sqlite3BtreeSecureDelete(Btree*,int);",
          "78: int sqlite3BtreeGetReserveNoMutex(Btree *p);",
          "79: int sqlite3BtreeSetAutoVacuum(Btree *, int);",
          "80: int sqlite3BtreeGetAutoVacuum(Btree *);",
          "",
          "[Removed Lines]",
          "77: int sqlite3BtreeGetOptimalReserve(Btree*);",
          "",
          "[Added Lines]",
          "77: int sqlite3BtreeGetRequestedReserve(Btree*);",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3843:     }else if( op==SQLITE_FCNTL_DATA_VERSION ){",
          "3845:       rc = SQLITE_OK;",
          "3846:     }else{",
          "3847:       rc = sqlite3OsFileControl(fd, op, pArg);",
          "3848:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3846:     }else if( op==SQLITE_FCNTL_RESERVE_BYTES ){",
          "3847:       int iNew = *(int*)pArg;",
          "3849:       if( iNew>=0 && iNew<=254 ){",
          "3850:         sqlite3BtreeSetPageSize(pBtree, 0, iNew, 0);",
          "3851:       }",
          "3852:       rc = SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4059:       break;",
          "4060:     }",
          "",
          "[Removed Lines]",
          "4067:     case SQLITE_TESTCTRL_RESERVE: {",
          "4068:       sqlite3 *db = va_arg(ap, sqlite3*);",
          "4069:       int x = va_arg(ap,int);",
          "4070:       sqlite3_mutex_enter(db->mutex);",
          "4071:       sqlite3BtreeSetPageSize(db->aDb[0].pBt, 0, x, 0);",
          "4072:       sqlite3_mutex_leave(db->mutex);",
          "4073:       break;",
          "4074:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9471:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"               },",
          "9472:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"               },",
          "9473:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"      },",
          "9475:     };",
          "9476:     int testctrl = -1;",
          "9477:     int iCtrl = -1;",
          "",
          "[Removed Lines]",
          "9474:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,      \"BYTES-OF-RESERVE\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9526:         case SQLITE_TESTCTRL_OPTIMIZATIONS:",
          "9528:           if( nArg==3 ){",
          "9529:             int opt = (int)strtol(azArg[2], 0, 0);",
          "9530:             rc2 = sqlite3_test_control(testctrl, p->db, opt);",
          "",
          "[Removed Lines]",
          "9527:         case SQLITE_TESTCTRL_RESERVE:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157: #define SQLITE_FCNTL_DATA_VERSION           35",
          "1158: #define SQLITE_FCNTL_SIZE_LIMIT             36",
          "1159: #define SQLITE_FCNTL_CKPT_DONE              37",
          "1162: #define SQLITE_GET_LOCKPROXYFILE      SQLITE_FCNTL_GET_LOCKPROXYFILE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1160: #define SQLITE_FCNTL_RESERVE_BYTES          38",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7652: #define SQLITE_TESTCTRL_PENDING_BYTE            11",
          "7653: #define SQLITE_TESTCTRL_ASSERT                  12",
          "7654: #define SQLITE_TESTCTRL_ALWAYS                  13",
          "7656: #define SQLITE_TESTCTRL_OPTIMIZATIONS           15",
          "",
          "[Removed Lines]",
          "7655: #define SQLITE_TESTCTRL_RESERVE                 14",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:     }",
          "234:     db->mDbFlags |= DBFLAG_VacuumInto;",
          "235:   }",
          "238:   sqlite3BtreeSetCacheSize(pTemp, db->aDb[iDb].pSchema->cache_size);",
          "239:   sqlite3BtreeSetSpillSize(pTemp, sqlite3BtreeSetSpillSize(pMain,0));",
          "",
          "[Removed Lines]",
          "236:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Added Lines]",
          "236:   nRes = sqlite3BtreeGetRequestedReserve(pMain);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45d827cb6aaf9c2ac4392a4781ca7010be1f69d2",
      "candidate_info": {
        "commit_hash": "45d827cb6aaf9c2ac4392a4781ca7010be1f69d2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45d827cb6aaf9c2ac4392a4781ca7010be1f69d2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Optimization of the sqlite3SrcListDelete() routine.\n\nFossilOrigin-Name: 1b4acd1ac4a8d24f8804c6d0770f5b0022f569d51742b6954b26e525f04d38ca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7dc932197665f0ebde3ffb8f0785c22da07ce307cfd5f0eab69e86e4b38fcde",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4464:   struct SrcList_item *pItem;",
          "4465:   if( pList==0 ) return;",
          "4466:   for(pItem=pList->a, i=0; i<pList->nSrc; i++, pItem++){",
          "4468:     sqlite3DbFree(db, pItem->zName);",
          "4470:     if( pItem->fg.isIndexedBy ) sqlite3DbFree(db, pItem->u1.zIndexedBy);",
          "4471:     if( pItem->fg.isTabFunc ) sqlite3ExprListDelete(db, pItem->u1.pFuncArg);",
          "4472:     sqlite3DeleteTable(db, pItem->pTab);",
          "4476:   }",
          "4477:   sqlite3DbFreeNN(db, pList);",
          "4478: }",
          "",
          "[Removed Lines]",
          "4467:     sqlite3DbFree(db, pItem->zDatabase);",
          "4469:     sqlite3DbFree(db, pItem->zAlias);",
          "4473:     sqlite3SelectDelete(db, pItem->pSelect);",
          "4474:     sqlite3ExprDelete(db, pItem->pOn);",
          "4475:     sqlite3IdListDelete(db, pItem->pUsing);",
          "",
          "[Added Lines]",
          "4467:     if( pItem->zDatabase ) sqlite3DbFreeNN(db, pItem->zDatabase);",
          "4469:     if( pItem->zAlias ) sqlite3DbFreeNN(db, pItem->zAlias);",
          "4473:     if( pItem->pSelect ) sqlite3SelectDelete(db, pItem->pSelect);",
          "4474:     if( pItem->pOn ) sqlite3ExprDelete(db, pItem->pOn);",
          "4475:     if( pItem->pUsing ) sqlite3IdListDelete(db, pItem->pUsing);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d124549fce09c73d7069e96b9502ca62bfea863b",
      "candidate_info": {
        "commit_hash": "d124549fce09c73d7069e96b9502ca62bfea863b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d124549fce09c73d7069e96b9502ca62bfea863b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/aggnested.test",
          "test/window9.test"
        ],
        "message": "Ensure that aggregate functions that (a) are part of SELECT statements with no FROM clause and (b) have one or more scalar sub-selects as arguments are assigned to the correct aggregate context. Fix for ticket [7c6d876f84e6e7e2]\n\nFossilOrigin-Name: c29a9e484e1dd245962afbbf511b183462af5e86c511261ccf018345e773f940",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/aggnested.test||test/aggnested.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 232431f32ef77a9dfc4eeb7765dca24af72051fd5460f648d0c5ba318c8a01fc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5655: struct SrcCount {",
          "5659: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5668: static int selectSrcCount(Walker *pWalker, Select *pSel){",
          "5669:   struct SrcCount *p = pWalker->u.pSrcCount;",
          "5670:   if( p->iSrcInner==0x7FFFFFFF && ALWAYS(pSel->pSrc) && pSel->pSrc->nSrc ){",
          "5671:     pWalker->u.pSrcCount->iSrcInner = pSel->pSrc->a[0].iCursor;",
          "5672:   }",
          "5673:   return WRC_Continue;",
          "5674: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5678:     }",
          "5679:     if( i<nSrc ){",
          "5680:       p->nThis++;",
          "",
          "[Removed Lines]",
          "5681:     }else if( nSrc==0 || pExpr->iTable<pSrc->a[0].iCursor ){",
          "",
          "[Added Lines]",
          "5696:     }else if( pExpr->iTable<p->iSrcInner ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5700:   assert( pExpr->op==TK_AGG_FUNCTION );",
          "5701:   memset(&w, 0, sizeof(w));",
          "5702:   w.xExprCallback = exprSrcCount;",
          "5704:   w.u.pSrcCount = &cnt;",
          "5705:   cnt.pSrc = pSrcList;",
          "5706:   cnt.nThis = 0;",
          "5707:   cnt.nOther = 0;",
          "5708:   sqlite3WalkExprList(&w, pExpr->x.pList);",
          "",
          "[Removed Lines]",
          "5703:   w.xSelectCallback = sqlite3SelectWalkNoop;",
          "",
          "[Added Lines]",
          "5718:   w.xSelectCallback = selectSrcCount;",
          "5721:   cnt.iSrcInner = (pSrcList&&pSrcList->nSrc)?pSrcList->a[0].iCursor:0x7FFFFFFF;",
          "",
          "---------------"
        ],
        "test/aggnested.test||test/aggnested.test": [
          "File: test/aggnested.test -> test/aggnested.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "21: do_test aggnested-1.1 {",
          "22:   db eval {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: set testprefix aggnested",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:   SELECT max((SELECT a FROM (SELECT count(*) AS a FROM ty) AS s)) FROM tx;",
          "260: } {3}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: #--------------------------------------------------------------------------",
          "264: #",
          "265: reset_db",
          "266: do_execsql_test 5.0 {",
          "267:   CREATE TABLE x1(a, b);",
          "268:   INSERT INTO x1 VALUES(1, 2);",
          "269:   CREATE TABLE x2(x);",
          "270:   INSERT INTO x2 VALUES(NULL), (NULL), (NULL);",
          "271: }",
          "273: # At one point, aggregate \"total()\" in the query below was being processed",
          "274: # as part of the outer SELECT, not as part of the sub-select with no FROM",
          "275: # clause.",
          "276: do_execsql_test 5.1 {",
          "277:   SELECT ( SELECT total( (SELECT b FROM x1) ) ) FROM x2;",
          "278: } {2.0 2.0 2.0}",
          "280: do_execsql_test 5.2 {",
          "281:   SELECT ( SELECT total( (SELECT 2 FROM x1) ) ) FROM x2;",
          "282: } {2.0 2.0 2.0}",
          "284: do_execsql_test 5.3 {",
          "285:   CREATE TABLE t1(a);",
          "286:   CREATE TABLE t2(b);",
          "287: }",
          "289: do_execsql_test 5.4 {",
          "290:   SELECT(",
          "291:     SELECT max(b) LIMIT (",
          "292:       SELECT total( (SELECT a FROM t1) )",
          "293:     )",
          "294:   )",
          "295:   FROM t2;",
          "296: } {{}}",
          "298: do_execsql_test 5.5 {",
          "299:   CREATE TABLE a(b);",
          "300:   WITH c AS(SELECT a)",
          "301:     SELECT(SELECT(SELECT group_concat(b, b)",
          "302:           LIMIT(SELECT 0.100000 *",
          "303:             AVG(DISTINCT(SELECT 0 FROM a ORDER BY b, b, b))))",
          "304:         FROM a GROUP BY b,",
          "305:         b, b) FROM a EXCEPT SELECT b FROM a ORDER BY b,",
          "306:     b, b;",
          "307: }",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: do_catchsql_test 8.3 {",
          "257:   SELECT min( max((SELECT x FROM v1)) ) OVER()",
          "260: do_execsql_test 8.4 {",
          "261:   SELECT(",
          "",
          "[Removed Lines]",
          "258: } {1 {misuse of aggregate: max()}}",
          "",
          "[Added Lines]",
          "258: } {0 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:       SELECT sum( avg((SELECT x FROM v1)) ) OVER()",
          "264:   )",
          "265:   FROM v1;",
          "268: finish_test",
          "",
          "[Removed Lines]",
          "266: } {0.0}",
          "",
          "[Added Lines]",
          "266: } {0.0 0.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b647186186cc01237d600ace86602d72d4f58d0",
      "candidate_info": {
        "commit_hash": "6b647186186cc01237d600ace86602d72d4f58d0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6b647186186cc01237d600ace86602d72d4f58d0",
        "files": [
          "ext/misc/decimal.c",
          "manifest",
          "manifest.uuid",
          "test/decimal.test"
        ],
        "message": "Avoid unnecessary normalization in decimal_sum().  Trim excess trailing zeros off the result of decimal_mul().\n\nFossilOrigin-Name: 0294ce071c863eb517e97beff31c3d95a4370e979a969415162302a90d3fda0e",
        "before_after_code_files": [
          "ext/misc/decimal.c||ext/misc/decimal.c",
          "manifest.uuid||manifest.uuid",
          "test/decimal.test||test/decimal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/decimal.c||ext/misc/decimal.c": [
          "File: ext/misc/decimal.c -> ext/misc/decimal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     z[i++] = '0';",
          "205:   }",
          "206:   j = 0;",
          "207:   while( n>0  ){",
          "208:     z[i++] = p->a[j] + '0';",
          "209:     j++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:   while( n>1 && p->a[j]==0 ){",
          "208:     j++;",
          "209:     n--;",
          "210:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:   decimal_free(pB);",
          "298: }",
          "",
          "[Removed Lines]",
          "304: static void decimal_normalize(Decimal *p){",
          "305:   int i;",
          "306:   int nSig;",
          "307:   if( p==0 ) return;",
          "308:   nSig = p->nDigit - p->nFrac;",
          "309:   for(i=0; i<nSig && p->a[i]==0; i++){}",
          "310:   if( i ){",
          "311:     memmove(p->a, p->a+i, p->nDigit - i);",
          "312:     p->nDigit -= i;",
          "313:   }",
          "314:   while( p->nFrac && p->a[p->nDigit-1]==0 ){",
          "315:     p->nFrac--;",
          "316:     p->nDigit--;",
          "317:   }",
          "318: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365:     return;",
          "366:   }",
          "367:   nSig = pA->nDigit - pA->nFrac;",
          "369:   nFrac = pA->nFrac;",
          "370:   if( nFrac<pB->nFrac ) nFrac = pB->nFrac;",
          "371:   nDigit = nSig + nFrac + 1;",
          "",
          "[Removed Lines]",
          "368:   if( nSig<pB->nDigit-pB->nFrac ) nSig = pB->nDigit - pB->nFrac;",
          "",
          "[Added Lines]",
          "352:   if( nSig && pA->a[0]==0 ) nSig--;",
          "353:   if( nSig<pB->nDigit-pB->nFrac ){",
          "354:     nSig = pB->nDigit - pB->nFrac;",
          "355:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "410:       }",
          "411:     }",
          "412:   }",
          "414: }",
          "",
          "[Removed Lines]",
          "413:   decimal_normalize(pA);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "518: static void decimalSumValue(sqlite3_context *context){",
          "519:   Decimal *p = sqlite3_aggregate_context(context, 0);",
          "520:   if( p==0 ) return;",
          "522:   decimal_result(context, p);",
          "523: }",
          "524: static void decimalSumFinalize(sqlite3_context *context){",
          "525:   Decimal *p = sqlite3_aggregate_context(context, 0);",
          "526:   if( p==0 ) return;",
          "528:   decimal_result(context, p);",
          "529:   decimal_clear(p);",
          "530: }",
          "",
          "[Removed Lines]",
          "521:   decimal_normalize(p);",
          "527:   decimal_normalize(p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "543:   Decimal *pB = decimal_new(context, argv[1], 0, 0);",
          "544:   signed char *acc = 0;",
          "545:   int i, j, k;",
          "546:   if( pA==0 || pA->oom || pA->isNull",
          "547:    || pB==0 || pB->oom || pB->isNull",
          "548:   ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535:   int minFrac;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "554:     goto mul_end;",
          "555:   }",
          "556:   memset(acc, 0, pA->nDigit + pB->nDigit + 2);",
          "557:   for(i=pA->nDigit-1; i>=0; i--){",
          "558:     signed char f = pA->a[i];",
          "559:     int carry = 0, x;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "547:   minFrac = pA->nFrac;",
          "548:   if( pB->nFrac<minFrac ) minFrac = pB->nFrac;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "572:   pA->nDigit += pB->nDigit + 2;",
          "573:   pA->nFrac += pB->nFrac;",
          "574:   pA->sign ^= pB->sign;",
          "576:   decimal_result(context, pA);",
          "578: mul_end:",
          "",
          "[Removed Lines]",
          "575:   decimal_normalize(pA);",
          "",
          "[Added Lines]",
          "567:   while( pA->nFrac>minFrac && pA->a[pA->nDigit-1]==0 ){",
          "568:     pA->nFrac--;",
          "569:     pA->nDigit--;",
          "570:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 72eee04b67268ad38fd51ff32849f08c0a54cf1b481d5ecb11d77cc9c729ee03",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/decimal.test||test/decimal.test": [
          "File: test/decimal.test -> test/decimal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:   SELECT count(*) FROM c WHERE decimal_mul(y,z)='1';",
          "126: } {33}",
          "128: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: do_execsql_test 5100 {",
          "129:   SELECT decimal_mul('1234.00','2.00');",
          "130: } {2468.00}",
          "131: do_execsql_test 5101 {",
          "132:   SELECT decimal_mul('1234.00','2.0000');",
          "133: } {2468.00}",
          "134: do_execsql_test 5102 {",
          "135:   SELECT decimal_mul('1234.0000','2.000');",
          "136: } {2468.000}",
          "137: do_execsql_test 5103 {",
          "138:   SELECT decimal_mul('1234.0000','2');",
          "139: } {2468}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "512aa78ca28981229858e0fd98aaba1158b6e8af",
      "candidate_info": {
        "commit_hash": "512aa78ca28981229858e0fd98aaba1158b6e8af",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/512aa78ca28981229858e0fd98aaba1158b6e8af",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "In the Lemon output, add a prefix comment that explains that the output file is automatically generated and shows the name of the source file.\n\nFossilOrigin-Name: d34caf3bb63d0512ea116a8c8c8343b76aa39441bd4b3e98231747a705b91d54",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84d54eb35716174195ee7e5ac846f47308e5dbb0056e8ff568daa133860bab74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4389:   }",
          "4390:   lineno = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4392:   fprintf(out,",
          "4393:      \"/* This file is automatically generated by Lemon from input grammar\\n\"",
          "4394:      \"** source file \\\"%s\\\". */\\n\", lemp->filename); lineno += 2;",
          "",
          "---------------"
        ]
      }
    }
  ]
}