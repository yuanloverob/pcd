{
  "cve_id": "CVE-2013-2132",
  "cve_desc": "bson/_cbsonmodule.c in the mongo-python-driver (aka. pymongo) before 2.5.2, as used in MongoDB, allows context-dependent attackers to cause a denial of service (NULL pointer dereference and crash) via vectors related to decoding of an \"invalid DBRef.\"",
  "repo": "mongodb/mongo-python-driver",
  "patch_hash": "a060c15ef87e0f0e72974c7c0e57fe811bbd06a2",
  "patch_info": {
    "commit_hash": "a060c15ef87e0f0e72974c7c0e57fe811bbd06a2",
    "repo": "mongodb/mongo-python-driver",
    "commit_url": "https://github.com/mongodb/mongo-python-driver/commit/a060c15ef87e0f0e72974c7c0e57fe811bbd06a2",
    "files": [
      "bson/__init__.py",
      "bson/_cbsonmodule.c",
      "test/test_collection.py"
    ],
    "message": "Fix null pointer when decoding invalid DBRef PYTHON-532",
    "before_after_code_files": [
      "bson/__init__.py||bson/__init__.py",
      "bson/_cbsonmodule.c||bson/_cbsonmodule.c",
      "test/test_collection.py||test/test_collection.py"
    ]
  },
  "patch_diff": {
    "bson/__init__.py||bson/__init__.py": [
      "File: bson/__init__.py -> bson/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:     object = _elements_to_dict(encoded, as_class, tz_aware, uuid_subtype)",
      "151:     position += obj_size",
      "152:     if \"$ref\" in object:",
      "154:                       object.pop(\"$db\", None), object), position)",
      "155:     return object, position",
      "",
      "[Removed Lines]",
      "153:         return (DBRef(object.pop(\"$ref\"), object.pop(\"$id\"),",
      "",
      "[Added Lines]",
      "153:         return (DBRef(object.pop(\"$ref\"), object.pop(\"$id\", None),",
      "",
      "---------------"
    ],
    "bson/_cbsonmodule.c||bson/_cbsonmodule.c": [
      "File: bson/_cbsonmodule.c -> bson/_cbsonmodule.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1203:                 Py_INCREF(collection);",
      "1204:                 PyDict_DelItemString(value, \"$ref\");",
      "1208:                 if (database == NULL) {",
      "1209:                     database = Py_None;",
      "",
      "[Removed Lines]",
      "1205:                 Py_INCREF(id);",
      "1206:                 PyDict_DelItemString(value, \"$id\");",
      "",
      "[Added Lines]",
      "1206:                 if (id == NULL) {",
      "1207:                     id = Py_None;",
      "1208:                     Py_INCREF(id);",
      "1209:                 } else {",
      "1210:                     Py_INCREF(id);",
      "1211:                     PyDict_DelItemString(value, \"$id\");",
      "1212:                 }",
      "",
      "---------------"
    ],
    "test/test_collection.py||test/test_collection.py": [
      "File: test/test_collection.py -> test/test_collection.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: from bson.binary import Binary, UUIDLegacy, OLD_UUID_SUBTYPE, UUID_SUBTYPE",
      "32: from bson.code import Code",
      "33: from bson.objectid import ObjectId",
      "34: from bson.py3compat import b",
      "35: from bson.son import SON",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from bson.dbref import DBRef",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1675:         self.assertRaises(InvalidDocument, c.save, {\"x\": c})",
      "1676:         warnings.simplefilter(\"default\")",
      "1678:     def test_as_class(self):",
      "1679:         c = self.db.test",
      "1680:         c.drop()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1679:     def test_bad_dbref(self):",
      "1680:         c = self.db.test",
      "1681:         c.drop()",
      "1683:         # Incomplete DBRefs.",
      "1684:         self.assertRaises(",
      "1685:             InvalidDocument,",
      "1686:             c.insert, {'ref': {'$ref': 'collection'}})",
      "1688:         self.assertRaises(",
      "1689:             InvalidDocument,",
      "1690:             c.insert, {'ref': {'$id': ObjectId()}})",
      "1692:         ref_only = {'ref': {'$ref': 'collection'}}",
      "1693:         id_only = {'ref': {'$id': ObjectId()}}",
      "1695:         # Force insert of ref without $id.",
      "1696:         c.insert(ref_only, check_keys=False)",
      "1697:         self.assertEqual(DBRef('collection', id=None), c.find_one()['ref'])",
      "1698:         c.drop()",
      "1700:         # DBRef without $ref is decoded as normal subdocument.",
      "1701:         c.insert(id_only, check_keys=False)",
      "1702:         self.assertEqual(id_only, c.find_one())",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "842e675299318e02d8d223c458df87c029f66efc",
      "candidate_info": {
        "commit_hash": "842e675299318e02d8d223c458df87c029f66efc",
        "repo": "mongodb/mongo-python-driver",
        "commit_url": "https://github.com/mongodb/mongo-python-driver/commit/842e675299318e02d8d223c458df87c029f66efc",
        "files": [
          "bson/__init__.py",
          "bson/_cbsonmodule.c",
          "test/test_collection.py"
        ],
        "message": "Fix null pointer when decoding invalid DBRef PYTHON-532",
        "before_after_code_files": [
          "bson/__init__.py||bson/__init__.py",
          "bson/_cbsonmodule.c||bson/_cbsonmodule.c",
          "test/test_collection.py||test/test_collection.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bson/__init__.py||bson/__init__.py",
            "bson/_cbsonmodule.c||bson/_cbsonmodule.c",
            "test/test_collection.py||test/test_collection.py"
          ],
          "candidate": [
            "bson/__init__.py||bson/__init__.py",
            "bson/_cbsonmodule.c||bson/_cbsonmodule.c",
            "test/test_collection.py||test/test_collection.py"
          ]
        }
      },
      "candidate_diff": {
        "bson/__init__.py||bson/__init__.py": [
          "File: bson/__init__.py -> bson/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     object = _elements_to_dict(encoded, as_class, tz_aware, uuid_subtype)",
          "151:     position += obj_size",
          "152:     if \"$ref\" in object:",
          "154:                       object.pop(\"$db\", None), object), position)",
          "155:     return object, position",
          "",
          "[Removed Lines]",
          "153:         return (DBRef(object.pop(\"$ref\"), object.pop(\"$id\"),",
          "",
          "[Added Lines]",
          "153:         return (DBRef(object.pop(\"$ref\"), object.pop(\"$id\", None),",
          "",
          "---------------"
        ],
        "bson/_cbsonmodule.c||bson/_cbsonmodule.c": [
          "File: bson/_cbsonmodule.c -> bson/_cbsonmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203:                 Py_INCREF(collection);",
          "1204:                 PyDict_DelItemString(value, \"$ref\");",
          "1208:                 if (database == NULL) {",
          "1209:                     database = Py_None;",
          "",
          "[Removed Lines]",
          "1205:                 Py_INCREF(id);",
          "1206:                 PyDict_DelItemString(value, \"$id\");",
          "",
          "[Added Lines]",
          "1206:                 if (id == NULL) {",
          "1207:                     id = Py_None;",
          "1208:                     Py_INCREF(id);",
          "1209:                 } else {",
          "1210:                     Py_INCREF(id);",
          "1211:                     PyDict_DelItemString(value, \"$id\");",
          "1212:                 }",
          "",
          "---------------"
        ],
        "test/test_collection.py||test/test_collection.py": [
          "File: test/test_collection.py -> test/test_collection.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: from bson.binary import Binary, UUIDLegacy, OLD_UUID_SUBTYPE, UUID_SUBTYPE",
          "32: from bson.code import Code",
          "33: from bson.objectid import ObjectId",
          "34: from bson.py3compat import b",
          "35: from bson.son import SON",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: from bson.dbref import DBRef",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1675:         self.assertRaises(InvalidDocument, c.save, {\"x\": c})",
          "1676:         warnings.simplefilter(\"default\")",
          "1678:     def test_as_class(self):",
          "1679:         c = self.db.test",
          "1680:         c.drop()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1679:     def test_bad_dbref(self):",
          "1680:         c = self.db.test",
          "1681:         c.drop()",
          "1683:         # Incomplete DBRefs.",
          "1684:         self.assertRaises(",
          "1685:             InvalidDocument,",
          "1686:             c.insert, {'ref': {'$ref': 'collection'}})",
          "1688:         self.assertRaises(",
          "1689:             InvalidDocument,",
          "1690:             c.insert, {'ref': {'$id': ObjectId()}})",
          "1692:         ref_only = {'ref': {'$ref': 'collection'}}",
          "1693:         id_only = {'ref': {'$id': ObjectId()}}",
          "1695:         # Force insert of ref without $id.",
          "1696:         c.insert(ref_only, check_keys=False)",
          "1697:         self.assertEqual(DBRef('collection', id=None), c.find_one()['ref'])",
          "1698:         c.drop()",
          "1700:         # DBRef without $ref is decoded as normal subdocument.",
          "1701:         c.insert(id_only, check_keys=False)",
          "1702:         self.assertEqual(id_only, c.find_one())",
          "",
          "---------------"
        ]
      }
    }
  ]
}