{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "daa229ace3f15e985ce0873e881163d748f6d969",
      "candidate_info": {
        "commit_hash": "daa229ace3f15e985ce0873e881163d748f6d969",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/daa229ace3f15e985ce0873e881163d748f6d969",
        "files": [
          "include/uv.h",
          "src/unix/tcp.c",
          "src/uv-common.c",
          "src/uv-common.h",
          "src/win/tcp.c",
          "test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c",
          "test/benchmark-pump.c",
          "test/blackhole-server.c",
          "test/dns-server.c",
          "test/echo-server.c",
          "test/test-connection-fail.c",
          "test/test-delayed-accept.c",
          "test/test-getsockname.c",
          "test/test-ipc-send-recv.c",
          "test/test-ipc.c",
          "test/test-multiple-listen.c",
          "test/test-tcp-bind-error.c",
          "test/test-tcp-bind6-error.c",
          "test/test-tcp-close.c",
          "test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c"
        ],
        "message": "include: uv_tcp_bind{6} now takes sockaddr_in*\n\nPassing or returning structs as values makes life hard for people that\nwork with libuv through a foreign function interface. Switch to a\npointer-based approach.\n\nFixes #684.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/tcp.c||src/unix/tcp.c",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "src/win/tcp.c||src/win/tcp.c",
          "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c",
          "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c",
          "test/benchmark-pump.c||test/benchmark-pump.c",
          "test/blackhole-server.c||test/blackhole-server.c",
          "test/dns-server.c||test/dns-server.c",
          "test/echo-server.c||test/echo-server.c",
          "test/test-connection-fail.c||test/test-connection-fail.c",
          "test/test-delayed-accept.c||test/test-delayed-accept.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-ipc-send-recv.c||test/test-ipc-send-recv.c",
          "test/test-ipc.c||test/test-ipc.c",
          "test/test-multiple-listen.c||test/test-multiple-listen.c",
          "test/test-tcp-bind-error.c||test/test-tcp-bind-error.c",
          "test/test-tcp-bind6-error.c||test/test-tcp-bind6-error.c",
          "test/test-tcp-close.c||test/test-tcp-close.c",
          "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c",
          "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "760: UV_EXTERN int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable);",
          "764: UV_EXTERN int uv_tcp_getsockname(uv_tcp_t* handle, struct sockaddr* name,",
          "765:     int* namelen);",
          "766: UV_EXTERN int uv_tcp_getpeername(uv_tcp_t* handle, struct sockaddr* name,",
          "",
          "[Removed Lines]",
          "762: UV_EXTERN int uv_tcp_bind(uv_tcp_t* handle, struct sockaddr_in);",
          "763: UV_EXTERN int uv_tcp_bind6(uv_tcp_t* handle, struct sockaddr_in6);",
          "",
          "[Added Lines]",
          "762: UV_EXTERN int uv_tcp_bind(uv_tcp_t* handle, const struct sockaddr_in* addr);",
          "763: UV_EXTERN int uv_tcp_bind6(uv_tcp_t* handle, const struct sockaddr_in6* addr);",
          "",
          "---------------"
        ],
        "src/unix/tcp.c||src/unix/tcp.c": [
          "File: src/unix/tcp.c -> src/unix/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: }",
          "63:   int err;",
          "64:   int on;",
          "67:   if (err)",
          "68:     return err;",
          "",
          "[Removed Lines]",
          "59: static int uv__bind(uv_tcp_t* tcp,",
          "60:                     int domain,",
          "61:                     struct sockaddr* addr,",
          "62:                     int addrsize) {",
          "66:   err = maybe_new_socket(tcp, domain, UV_STREAM_READABLE | UV_STREAM_WRITABLE);",
          "",
          "[Added Lines]",
          "59: int uv__tcp_bind(uv_tcp_t* tcp,",
          "60:                  const struct sockaddr* addr,",
          "61:                  unsigned int addrlen) {",
          "65:   err = maybe_new_socket(tcp,",
          "66:                          addr->sa_family,",
          "67:                          UV_STREAM_READABLE | UV_STREAM_WRITABLE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     return -errno;",
          "74:   errno = 0;",
          "76:     return -errno;",
          "78:   tcp->delayed_error = -errno;",
          "",
          "[Removed Lines]",
          "75:   if (bind(tcp->io_watcher.fd, addr, addrsize) && errno != EADDRINUSE)",
          "",
          "[Added Lines]",
          "76:   if (bind(tcp->io_watcher.fd, addr, addrlen) && errno != EADDRINUSE)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133: }",
          "152: int uv_tcp_open(uv_tcp_t* handle, uv_os_sock_t sock) {",
          "153:   return uv__stream_open((uv_stream_t*)handle,",
          "154:                          sock,",
          "",
          "[Removed Lines]",
          "136: int uv__tcp_bind(uv_tcp_t* handle, struct sockaddr_in addr) {",
          "137:   return uv__bind(handle,",
          "138:                   AF_INET,",
          "139:                   (struct sockaddr*)&addr,",
          "140:                   sizeof(struct sockaddr_in));",
          "141: }",
          "144: int uv__tcp_bind6(uv_tcp_t* handle, struct sockaddr_in6 addr) {",
          "145:   return uv__bind(handle,",
          "146:                   AF_INET6,",
          "147:                   (struct sockaddr*)&addr,",
          "148:                   sizeof(struct sockaddr_in6));",
          "149: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: }",
          "190:   else",
          "192: }",
          "198:   else",
          "200: }",
          "",
          "[Removed Lines]",
          "187: int uv_tcp_bind(uv_tcp_t* handle, struct sockaddr_in addr) {",
          "188:   if (handle->type != UV_TCP || addr.sin_family != AF_INET)",
          "189:     return UV_EINVAL;",
          "191:     return uv__tcp_bind(handle, addr);",
          "195: int uv_tcp_bind6(uv_tcp_t* handle, struct sockaddr_in6 addr) {",
          "196:   if (handle->type != UV_TCP || addr.sin6_family != AF_INET6)",
          "197:     return UV_EINVAL;",
          "199:     return uv__tcp_bind6(handle, addr);",
          "",
          "[Added Lines]",
          "187: int uv_tcp_bind(uv_tcp_t* handle, const struct sockaddr_in* addr) {",
          "188:   if (handle->type == UV_TCP && addr->sin_family == AF_INET)",
          "189:     return uv__tcp_bind(handle, (const struct sockaddr*) addr, sizeof(*addr));",
          "191:     return UV_EINVAL;",
          "195: int uv_tcp_bind6(uv_tcp_t* handle, const struct sockaddr_in6* addr) {",
          "196:   if (handle->type == UV_TCP && addr->sin6_family == AF_INET6)",
          "197:     return uv__tcp_bind(handle, (const struct sockaddr*) addr, sizeof(*addr));",
          "199:     return UV_EINVAL;",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: # define UV__HANDLE_CLOSING   0x01",
          "60: #endif",
          "65: int uv__udp_bind(uv_udp_t* handle, struct sockaddr_in addr, unsigned flags);",
          "66: int uv__udp_bind6(uv_udp_t* handle, struct sockaddr_in6 addr, unsigned flags);",
          "",
          "[Removed Lines]",
          "62: int uv__tcp_bind(uv_tcp_t* handle, struct sockaddr_in addr);",
          "63: int uv__tcp_bind6(uv_tcp_t* handle, struct sockaddr_in6 addr);",
          "",
          "[Added Lines]",
          "62: int uv__tcp_bind(uv_tcp_t* tcp,",
          "63:                  const struct sockaddr* addr,",
          "64:                  unsigned int addrlen);",
          "",
          "---------------"
        ],
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: }",
          "242:   DWORD err;",
          "243:   int r;",
          "245:   if (handle->socket == INVALID_SOCKET) {",
          "247:     if (sock == INVALID_SOCKET) {",
          "248:       return WSAGetLastError();",
          "249:     }",
          "",
          "[Removed Lines]",
          "238: static int uv__bind(uv_tcp_t* handle,",
          "239:                     int family,",
          "240:                     struct sockaddr* addr,",
          "241:                     int addrsize) {",
          "246:     SOCKET sock = socket(family, SOCK_STREAM, 0);",
          "",
          "[Added Lines]",
          "238: static int uv_tcp_try_bind(uv_tcp_t* handle,",
          "239:                            const struct sockaddr* addr,",
          "240:                            unsigned int addrlen) {",
          "245:     SOCKET sock = socket(addr->sa_family, SOCK_STREAM, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:       return err;",
          "256:     }",
          "259:     if (err) {",
          "260:       closesocket(sock);",
          "261:       return err;",
          "262:     }",
          "263:   }",
          "267:   if (r == SOCKET_ERROR) {",
          "268:     err = WSAGetLastError();",
          "",
          "[Removed Lines]",
          "258:     err = uv_tcp_set_socket(handle->loop, handle, sock, family, 0);",
          "265:   r = bind(handle->socket, addr, addrsize);",
          "",
          "[Added Lines]",
          "257:     err = uv_tcp_set_socket(handle->loop, handle, sock, addr->sa_family, 0);",
          "264:   r = bind(handle->socket, addr, addrlen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281: }",
          "296: static void CALLBACK post_completion(void* context, BOOLEAN timed_out) {",
          "297:   uv_req_t* req;",
          "298:   uv_tcp_t* handle;",
          "",
          "[Removed Lines]",
          "284: int uv__tcp_bind(uv_tcp_t* handle, struct sockaddr_in addr) {",
          "285:   return uv_translate_sys_error(",
          "286:       uv__bind(handle, AF_INET, (struct sockaddr*) &addr, sizeof(addr)));",
          "287: }",
          "290: int uv__tcp_bind6(uv_tcp_t* handle, struct sockaddr_in6 addr) {",
          "291:   return uv_translate_sys_error(",
          "292:       uv__bind(handle, AF_INET6, (struct sockaddr*) &addr, sizeof(addr)));",
          "293: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "511:   }",
          "513:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "515:     if (err)",
          "516:       return err;",
          "517:   }",
          "",
          "[Removed Lines]",
          "514:     err = uv_tcp_bind(handle, uv_addr_ip4_any_);",
          "",
          "[Added Lines]",
          "501:     err = uv_tcp_try_bind(handle,",
          "502:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "503:                           sizeof(uv_addr_ip4_any_));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "688:   }",
          "690:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "692:     if (err)",
          "693:       return err;",
          "694:   }",
          "",
          "[Removed Lines]",
          "691:     err = uv_tcp_bind(handle, uv_addr_ip4_any_);",
          "",
          "[Added Lines]",
          "680:     err = uv_tcp_try_bind(handle,",
          "681:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "682:                           sizeof(uv_addr_ip4_any_));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "745:   }",
          "747:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "749:     if (err)",
          "750:       return err;",
          "751:   }",
          "",
          "[Removed Lines]",
          "748:     err = uv_tcp_bind6(handle, uv_addr_ip6_any_);",
          "",
          "[Added Lines]",
          "739:     err = uv_tcp_try_bind(handle,",
          "740:                           (const struct sockaddr*) &uv_addr_ip6_any_,",
          "741:                           sizeof(uv_addr_ip6_any_));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1414:   return 0;",
          "1415: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1414: int uv__tcp_bind(uv_tcp_t* handle,",
          "1415:                  const struct sockaddr* addr,",
          "1416:                  unsigned int addrlen) {",
          "1417:   int err;",
          "1419:   err = uv_tcp_try_bind(handle, addr, addrlen);",
          "1420:   if (err)",
          "1421:     return uv_translate_sys_error(err);",
          "1423:   return 0;",
          "1424: }",
          "",
          "---------------"
        ],
        "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c": [
          "File: test/benchmark-multi-accept.c -> test/benchmark-multi-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   if (type == UV_TCP) {",
          "211:     ASSERT(0 == uv_tcp_init(loop, (uv_tcp_t*) &ctx.server_handle));",
          "213:   }",
          "214:   else",
          "215:     ASSERT(0);",
          "",
          "[Removed Lines]",
          "212:     ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle, listen_addr));",
          "",
          "[Added Lines]",
          "212:     ASSERT(0 == uv_tcp_bind((uv_tcp_t*) &ctx.server_handle, &listen_addr));",
          "",
          "---------------"
        ],
        "test/benchmark-ping-pongs.c||test/benchmark-ping-pongs.c": [
          "File: test/benchmark-ping-pongs.c -> test/benchmark-ping-pongs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:   pinger->tcp.data = pinger;",
          "196:   r = uv_tcp_connect(&pinger->connect_req, &pinger->tcp, server_addr, pinger_connect_cb);",
          "197:   ASSERT(!r);",
          "",
          "[Removed Lines]",
          "194:   uv_tcp_bind(&pinger->tcp, client_addr);",
          "",
          "[Added Lines]",
          "194:   uv_tcp_bind(&pinger->tcp, &client_addr);",
          "",
          "---------------"
        ],
        "test/benchmark-pump.c||test/benchmark-pump.c": [
          "File: test/benchmark-pump.c -> test/benchmark-pump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   server = (uv_stream_t*)&tcpServer;",
          "367:   r = uv_tcp_init(loop, &tcpServer);",
          "368:   ASSERT(r == 0);",
          "370:   ASSERT(r == 0);",
          "371:   r = uv_listen((uv_stream_t*)&tcpServer, MAX_WRITE_HANDLES, connection_cb);",
          "372:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "369:   r = uv_tcp_bind(&tcpServer, listen_addr);",
          "",
          "[Added Lines]",
          "369:   r = uv_tcp_bind(&tcpServer, &listen_addr);",
          "",
          "---------------"
        ],
        "test/blackhole-server.c||test/blackhole-server.c": [
          "File: test/blackhole-server.c -> test/blackhole-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   r = uv_tcp_init(loop, &tcp_server);",
          "109:   ASSERT(r == 0);",
          "112:   ASSERT(r == 0);",
          "114:   r = uv_listen((uv_stream_t*)&tcp_server, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "111:   r = uv_tcp_bind(&tcp_server, addr);",
          "",
          "[Added Lines]",
          "111:   r = uv_tcp_bind(&tcp_server, &addr);",
          "",
          "---------------"
        ],
        "test/dns-server.c||test/dns-server.c": [
          "File: test/dns-server.c -> test/dns-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     return 1;",
          "306:   }",
          "309:   if (r) {",
          "311:     fprintf(stderr, \"Bind error\\n\");",
          "",
          "[Removed Lines]",
          "308:   r = uv_tcp_bind(&server, addr);",
          "",
          "[Added Lines]",
          "308:   r = uv_tcp_bind(&server, &addr);",
          "",
          "---------------"
        ],
        "test/echo-server.c||test/echo-server.c": [
          "File: test/echo-server.c -> test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     return 1;",
          "230:   }",
          "233:   if (r) {",
          "235:     fprintf(stderr, \"Bind error\\n\");",
          "",
          "[Removed Lines]",
          "232:   r = uv_tcp_bind(&tcpServer, addr);",
          "",
          "[Added Lines]",
          "232:   r = uv_tcp_bind(&tcpServer, &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:   }",
          "268:   if (r) {",
          "270:     fprintf(stderr, \"IPv6 not supported\\n\");",
          "",
          "[Removed Lines]",
          "267:   r = uv_tcp_bind6(&tcpServer, addr6);",
          "",
          "[Added Lines]",
          "267:   r = uv_tcp_bind6(&tcpServer, &addr6);",
          "",
          "---------------"
        ],
        "test/test-connection-fail.c||test/test-connection-fail.c": [
          "File: test/test-connection-fail.c -> test/test-connection-fail.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   r = uv_tcp_connect(&req, &tcp, server_addr, connect_cb);",
          "106:   ASSERT(!r);",
          "",
          "[Removed Lines]",
          "104:   uv_tcp_bind(&tcp, client_addr);",
          "",
          "[Added Lines]",
          "104:   uv_tcp_bind(&tcp, &client_addr);",
          "",
          "---------------"
        ],
        "test/test-delayed-accept.c||test/test-delayed-accept.c": [
          "File: test/test-delayed-accept.c -> test/test-delayed-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   r = uv_tcp_init(uv_default_loop(), server);",
          "110:   ASSERT(r == 0);",
          "112:   ASSERT(r == 0);",
          "114:   r = uv_listen((uv_stream_t*)server, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "111:   r = uv_tcp_bind(server, addr);",
          "",
          "[Added Lines]",
          "111:   r = uv_tcp_bind(server, &addr);",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:     return 1;",
          "181:   }",
          "184:   if (r) {",
          "185:     fprintf(stderr, \"Bind error\\n\");",
          "186:     return 1;",
          "",
          "[Removed Lines]",
          "183:   r = uv_tcp_bind(&tcpServer, addr);",
          "",
          "[Added Lines]",
          "183:   r = uv_tcp_bind(&tcpServer, &addr);",
          "",
          "---------------"
        ],
        "test/test-ipc-send-recv.c||test/test-ipc-send-recv.c": [
          "File: test/test-ipc-send-recv.c -> test/test-ipc-send-recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   r = uv_tcp_init(uv_default_loop(), &ctx.send.tcp);",
          "146:   ASSERT(r == 0);",
          "149:   ASSERT(r == 0);",
          "151:   r = run_test();",
          "",
          "[Removed Lines]",
          "148:   r = uv_tcp_bind(&ctx.send.tcp, addr);",
          "",
          "[Added Lines]",
          "148:   r = uv_tcp_bind(&ctx.send.tcp, &addr);",
          "",
          "---------------"
        ],
        "test/test-ipc.c||test/test-ipc.c": [
          "File: test/test-ipc.c -> test/test-ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:   r = uv_tcp_init(uv_default_loop(), &server);",
          "376:   ASSERT(r == 0);",
          "379:   ASSERT(r == 0);",
          "381:   r = uv_tcp_simultaneous_accepts(&server, 1);",
          "",
          "[Removed Lines]",
          "378:   r = uv_tcp_bind(&server, addr);",
          "",
          "[Added Lines]",
          "378:   r = uv_tcp_bind(&server, &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:   r = uv_tcp_init(uv_default_loop(), &server);",
          "401:   ASSERT(r == 0);",
          "404:   ASSERT(r == 0);",
          "406:   r = uv_tcp_simultaneous_accepts(&server, 0);",
          "",
          "[Removed Lines]",
          "403:   r = uv_tcp_bind(&server, addr);",
          "",
          "[Added Lines]",
          "403:   r = uv_tcp_bind(&server, &addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:   r = uv_tcp_init(uv_default_loop(), &tcp_server);",
          "567:   ASSERT(r == 0);",
          "570:   ASSERT(r == 0);",
          "572:   if (!listen_after_write) {",
          "",
          "[Removed Lines]",
          "569:   r = uv_tcp_bind(&tcp_server, addr);",
          "",
          "[Added Lines]",
          "569:   r = uv_tcp_bind(&tcp_server, &addr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "619:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "622:   ASSERT(r == 0);",
          "624:   r = uv_listen((uv_stream_t*)&tcp_server, 12, ipc_on_connection_tcp_conn);",
          "",
          "[Removed Lines]",
          "621:   r = uv_tcp_bind(&tcp_server, addr);",
          "",
          "[Added Lines]",
          "621:   r = uv_tcp_bind(&tcp_server, &addr);",
          "",
          "---------------"
        ],
        "test/test-multiple-listen.c||test/test-multiple-listen.c": [
          "File: test/test-multiple-listen.c -> test/test-multiple-listen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   r = uv_tcp_init(uv_default_loop(), &server);",
          "54:   ASSERT(r == 0);",
          "57:   ASSERT(r == 0);",
          "59:   r = uv_listen((uv_stream_t*)&server, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "56:   r = uv_tcp_bind(&server, addr);",
          "",
          "[Added Lines]",
          "56:   r = uv_tcp_bind(&server, &addr);",
          "",
          "---------------"
        ],
        "test/test-tcp-bind-error.c||test/test-tcp-bind-error.c": [
          "File: test/test-tcp-bind-error.c -> test/test-tcp-bind-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "43:   r = uv_tcp_init(uv_default_loop(), &server1);",
          "44:   ASSERT(r == 0);",
          "46:   ASSERT(r == 0);",
          "48:   r = uv_tcp_init(uv_default_loop(), &server2);",
          "49:   ASSERT(r == 0);",
          "51:   ASSERT(r == 0);",
          "53:   r = uv_listen((uv_stream_t*)&server1, 128, NULL);",
          "",
          "[Removed Lines]",
          "45:   r = uv_tcp_bind(&server1, addr);",
          "50:   r = uv_tcp_bind(&server2, addr);",
          "",
          "[Added Lines]",
          "45:   r = uv_tcp_bind(&server1, &addr);",
          "50:   r = uv_tcp_bind(&server2, &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   ASSERT(r == 0);",
          "82:   ASSERT(r == 0 || r == UV_EADDRNOTAVAIL);",
          "84:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "81:   r = uv_tcp_bind(&server, addr);",
          "",
          "[Added Lines]",
          "81:   r = uv_tcp_bind(&server, &addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   r = uv_tcp_init(uv_default_loop(), &server);",
          "103:   ASSERT(r == 0);",
          "105:   ASSERT(r == UV_EADDRNOTAVAIL);",
          "107:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "104:   r = uv_tcp_bind(&server, addr);",
          "",
          "[Added Lines]",
          "104:   r = uv_tcp_bind(&server, &addr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:   r = uv_tcp_init(uv_default_loop(), &server);",
          "127:   ASSERT(r == 0);",
          "129:   ASSERT(r == UV_EINVAL);",
          "131:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "128:   r = uv_tcp_bind(&server, *garbage_addr);",
          "",
          "[Added Lines]",
          "128:   r = uv_tcp_bind(&server, garbage_addr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:   r = uv_tcp_init(uv_default_loop(), &server);",
          "153:   ASSERT(r == 0);",
          "155:   ASSERT(r == 0);",
          "157:   ASSERT(r == UV_EINVAL);",
          "159:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "154:   r = uv_tcp_bind(&server, addr1);",
          "156:   r = uv_tcp_bind(&server, addr2);",
          "",
          "[Added Lines]",
          "154:   r = uv_tcp_bind(&server, &addr1);",
          "156:   r = uv_tcp_bind(&server, &addr2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "177:   r = uv_tcp_init(uv_default_loop(), &server);",
          "178:   ASSERT(r == 0);",
          "180:   ASSERT(r == 0);",
          "182:   MAKE_VALGRIND_HAPPY();",
          "",
          "[Removed Lines]",
          "179:   r = uv_tcp_bind(&server, addr);",
          "",
          "[Added Lines]",
          "179:   r = uv_tcp_bind(&server, &addr);",
          "",
          "---------------"
        ],
        "test/test-tcp-bind6-error.c||test/test-tcp-bind6-error.c": [
          "File: test/test-tcp-bind6-error.c -> test/test-tcp-bind6-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   r = uv_tcp_init(uv_default_loop(), &server1);",
          "45:   ASSERT(r == 0);",
          "47:   ASSERT(r == 0);",
          "49:   r = uv_tcp_init(uv_default_loop(), &server2);",
          "50:   ASSERT(r == 0);",
          "52:   ASSERT(r == 0);",
          "54:   r = uv_listen((uv_stream_t*)&server1, 128, NULL);",
          "",
          "[Removed Lines]",
          "46:   r = uv_tcp_bind6(&server1, addr);",
          "51:   r = uv_tcp_bind6(&server2, addr);",
          "",
          "[Added Lines]",
          "46:   r = uv_tcp_bind6(&server1, &addr);",
          "51:   r = uv_tcp_bind6(&server2, &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   r = uv_tcp_init(uv_default_loop(), &server);",
          "79:   ASSERT(r == 0);",
          "81:   ASSERT(r == UV_EADDRNOTAVAIL);",
          "83:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "80:   r = uv_tcp_bind6(&server, addr);",
          "",
          "[Added Lines]",
          "80:   r = uv_tcp_bind6(&server, &addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   r = uv_tcp_init(uv_default_loop(), &server);",
          "103:   ASSERT(r == 0);",
          "105:   ASSERT(r == UV_EINVAL);",
          "107:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "104:   r = uv_tcp_bind6(&server, *garbage_addr);",
          "",
          "[Added Lines]",
          "104:   r = uv_tcp_bind6(&server, garbage_addr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:   r = uv_tcp_init(uv_default_loop(), &server);",
          "129:   ASSERT(r == 0);",
          "131:   ASSERT(r == 0);",
          "133:   ASSERT(r == UV_EINVAL);",
          "135:   uv_close((uv_handle_t*)&server, close_cb);",
          "",
          "[Removed Lines]",
          "130:   r = uv_tcp_bind6(&server, addr1);",
          "132:   r = uv_tcp_bind6(&server, addr2);",
          "",
          "[Added Lines]",
          "130:   r = uv_tcp_bind6(&server, &addr1);",
          "132:   r = uv_tcp_bind6(&server, &addr2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:   r = uv_tcp_init(uv_default_loop(), &server);",
          "154:   ASSERT(r == 0);",
          "156:   ASSERT(r == 0);",
          "158:   MAKE_VALGRIND_HAPPY();",
          "",
          "[Removed Lines]",
          "155:   r = uv_tcp_bind6(&server, addr);",
          "",
          "[Added Lines]",
          "155:   r = uv_tcp_bind6(&server, &addr);",
          "",
          "---------------"
        ],
        "test/test-tcp-close.c||test/test-tcp-close.c": [
          "File: test/test-tcp-close.c -> test/test-tcp-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   r = uv_tcp_init(loop, handle);",
          "86:   ASSERT(r == 0);",
          "89:   ASSERT(r == 0);",
          "91:   r = uv_listen((uv_stream_t*)handle, 128, connection_cb);",
          "",
          "[Removed Lines]",
          "88:   r = uv_tcp_bind(handle, addr);",
          "",
          "[Added Lines]",
          "88:   r = uv_tcp_bind(handle, &addr);",
          "",
          "---------------"
        ],
        "test/test-tcp-unexpected-read.c||test/test-tcp-unexpected-read.c": [
          "File: test/test-tcp-unexpected-read.c -> test/test-tcp-unexpected-read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   ASSERT(0 == uv_tcp_init(loop, &server_handle));",
          "99:   ASSERT(0 == uv_tcp_init(loop, &client_handle));",
          "100:   ASSERT(0 == uv_tcp_init(loop, &peer_handle));",
          "102:   ASSERT(0 == uv_listen((uv_stream_t*) &server_handle, 1, connection_cb));",
          "103:   ASSERT(0 == uv_tcp_connect(&connect_req, &client_handle, addr, connect_cb));",
          "104:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "",
          "[Removed Lines]",
          "101:   ASSERT(0 == uv_tcp_bind(&server_handle, addr));",
          "",
          "[Added Lines]",
          "101:   ASSERT(0 == uv_tcp_bind(&server_handle, &addr));",
          "",
          "---------------"
        ],
        "test/test-tcp-write-to-half-open-connection.c||test/test-tcp-write-to-half-open-connection.c": [
          "File: test/test-tcp-write-to-half-open-connection.c -> test/test-tcp-write-to-half-open-connection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   r = uv_tcp_init(loop, &tcp_server);",
          "116:   ASSERT(r == 0);",
          "119:   ASSERT(r == 0);",
          "121:   r = uv_listen((uv_stream_t*)&tcp_server, 1, connection_cb);",
          "",
          "[Removed Lines]",
          "118:   r = uv_tcp_bind(&tcp_server, addr);",
          "",
          "[Added Lines]",
          "118:   r = uv_tcp_bind(&tcp_server, &addr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b018dc5b72452e3db6fbab00ac1f2b71c4747c43",
      "candidate_info": {
        "commit_hash": "b018dc5b72452e3db6fbab00ac1f2b71c4747c43",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b018dc5b72452e3db6fbab00ac1f2b71c4747c43",
        "files": [
          "test/test-tcp-try-write.c"
        ],
        "message": "test: simplify test-tcp-try-write\n\nUse a smaller buffer thus making sure that uv_try_write will succeed at\nleast once",
        "before_after_code_files": [
          "test/test-tcp-try-write.c||test/test-tcp-try-write.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-tcp-try-write.c||test/test-tcp-try-write.c": [
          "File: test/test-tcp-try-write.c -> test/test-tcp-try-write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: static void connect_cb(uv_connect_t* req, int status) {",
          "58:   int r;",
          "59:   uv_buf_t buf;",
          "60:   ASSERT(status == 0);",
          "61:   connect_cb_called++;",
          "63:   do {",
          "65:     r = uv_try_write((uv_stream_t*) &client, &buf, 1);",
          "66:     ASSERT(r > 0 || r == UV_EAGAIN);",
          "67:     if (r > 0) {",
          "68:       bytes_written += r;",
          "73:     }",
          "74:   } while (1);",
          "75:   uv_close((uv_handle_t*) &client, close_cb);",
          "",
          "[Removed Lines]",
          "57:   static char zeroes[1024];",
          "64:     buf = uv_buf_init(zeroes, sizeof(zeroes));",
          "71:       if (r != (int) sizeof(zeroes))",
          "72:         break;",
          "",
          "[Added Lines]",
          "63:     buf = uv_buf_init(\"PING\", 4);",
          "68:       break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b9cfe2261f5a97c81a496b7b6c840fde848e736",
      "candidate_info": {
        "commit_hash": "3b9cfe2261f5a97c81a496b7b6c840fde848e736",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3b9cfe2261f5a97c81a496b7b6c840fde848e736",
        "files": [
          "configure.ac"
        ],
        "message": "build: use AM_SILENT_RULES conditionally\n\nIt's not supported by older automake versions.",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: AC_PREREQ(2.57)",
          "16: AC_INIT([libuv], [0.11.5], [https://github.com/joyent/libuv/issues])",
          "17: AM_INIT_AUTOMAKE([foreign -Wall -Werror])",
          "19: AC_CONFIG_MACRO_DIR([m4])",
          "20: AC_CANONICAL_HOST",
          "21: AC_ENABLE_SHARED",
          "",
          "[Removed Lines]",
          "18: AM_SILENT_RULES([yes])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: AC_PROG_CC",
          "24: # AM_PROG_AR is not available in automake v0.11 but it's essential in v0.12.",
          "25: m4_ifdef([AM_PROG_AR], [AM_PROG_AR])",
          "26: LT_INIT",
          "27: # TODO(bnoordhuis) Check for -pthread vs. -pthreads",
          "28: AC_CHECK_LIB([dl], [dlopen])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e524f89beb6556fbf929651ea80f8ac04498b90e",
      "candidate_info": {
        "commit_hash": "e524f89beb6556fbf929651ea80f8ac04498b90e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e524f89beb6556fbf929651ea80f8ac04498b90e",
        "files": [
          "Makefile.am",
          "configure.ac",
          "include/uv-version.h",
          "uv.gyp"
        ],
        "message": "core: update version to 1.0.0",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "include/uv-version.h||include/uv-version.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: lib_LTLIBRARIES = libuv.la",
          "25: libuv_la_CFLAGS = @CFLAGS@",
          "27: libuv_la_SOURCES = src/fs-poll.c \\",
          "28:                    src/heap-inl.h \\",
          "29:                    src/inet.c \\",
          "",
          "[Removed Lines]",
          "26: libuv_la_LDFLAGS = -no-undefined -version-info 11:0:0",
          "",
          "[Added Lines]",
          "26: libuv_la_LDFLAGS = -no-undefined -version-info 1:0:0",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: m4_include([m4/as_case.m4])",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [0.11.30], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [1.0.0], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ],
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define UV_VERSION_H",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Removed Lines]",
          "33: #define UV_VERSION_MAJOR 0",
          "34: #define UV_VERSION_MINOR 11",
          "35: #define UV_VERSION_PATCH 29",
          "",
          "[Added Lines]",
          "33: #define UV_VERSION_MAJOR 1",
          "34: #define UV_VERSION_MINOR 0",
          "35: #define UV_VERSION_PATCH 0",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:               'link_settings': {",
          "177:                 # Must correspond with UV_VERSION_MAJOR and UV_VERSION_MINOR",
          "178:                 # in src/version.c",
          "180:               },",
          "181:             }],",
          "182:           ],",
          "",
          "[Removed Lines]",
          "179:                 'libraries': [ '-Wl,-soname,libuv.so.0.11' ],",
          "",
          "[Added Lines]",
          "179:                 'libraries': [ '-Wl,-soname,libuv.so.1.0' ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3193b67ff0c9b1e2a237534eff04aeb54a37ccf4",
      "candidate_info": {
        "commit_hash": "3193b67ff0c9b1e2a237534eff04aeb54a37ccf4",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3193b67ff0c9b1e2a237534eff04aeb54a37ccf4",
        "files": [
          "Makefile.am",
          "configure.ac"
        ],
        "message": "build: add DragonFly BSD support in autotools",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:                     src/unix/proctitle.c",
          "272: endif",
          "274: if FREEBSD",
          "275: include_HEADERS += include/uv-bsd.h",
          "276: libuv_la_SOURCES += src/unix/freebsd.c src/unix/kqueue.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274: if DRAGONFLY",
          "275: include_HEADERS += include/uv-bsd.h",
          "276: libuv_la_SOURCES += src/unix/kqueue.c src/unix/freebsd.c",
          "277: endif",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: AC_CHECK_LIB([sendfile], [sendfile])",
          "41: AC_CHECK_LIB([socket], [socket])",
          "42: AC_SYS_LARGEFILE",
          "52: PANDORA_ENABLE_DTRACE",
          "53: AC_CHECK_PROG(PKG_CONFIG, pkg-config, yes)",
          "54: AM_CONDITIONAL([HAVE_PKG_CONFIG], [test \"x$PKG_CONFIG\" != \"x\"])",
          "",
          "[Removed Lines]",
          "43: AM_CONDITIONAL([AIX],    [AS_CASE([$host_os],[aix*],          [true], [false])])",
          "44: AM_CONDITIONAL([ANDROID],[AS_CASE([$host_os],[linux-android*],[true], [false])])",
          "45: AM_CONDITIONAL([DARWIN], [AS_CASE([$host_os],[darwin*],       [true], [false])])",
          "46: AM_CONDITIONAL([FREEBSD],[AS_CASE([$host_os],[freebsd*],      [true], [false])])",
          "47: AM_CONDITIONAL([LINUX],  [AS_CASE([$host_os],[linux*],        [true], [false])])",
          "48: AM_CONDITIONAL([NETBSD], [AS_CASE([$host_os],[netbsd*],       [true], [false])])",
          "49: AM_CONDITIONAL([OPENBSD],[AS_CASE([$host_os],[openbsd*],      [true], [false])])",
          "50: AM_CONDITIONAL([SUNOS],  [AS_CASE([$host_os],[solaris*],      [true], [false])])",
          "51: AM_CONDITIONAL([WINNT],  [AS_CASE([$host_os],[mingw*],        [true], [false])])",
          "",
          "[Added Lines]",
          "43: AM_CONDITIONAL([AIX],      [AS_CASE([$host_os],[aix*],          [true], [false])])",
          "44: AM_CONDITIONAL([ANDROID],  [AS_CASE([$host_os],[linux-android*],[true], [false])])",
          "45: AM_CONDITIONAL([DARWIN],   [AS_CASE([$host_os],[darwin*],       [true], [false])])",
          "46: AM_CONDITIONAL([DRAGONFLY],[AS_CASE([$host_os],[dragonfly*],    [true], [false])])",
          "47: AM_CONDITIONAL([FREEBSD],  [AS_CASE([$host_os],[freebsd*],      [true], [false])])",
          "48: AM_CONDITIONAL([LINUX],    [AS_CASE([$host_os],[linux*],        [true], [false])])",
          "49: AM_CONDITIONAL([NETBSD],   [AS_CASE([$host_os],[netbsd*],       [true], [false])])",
          "50: AM_CONDITIONAL([OPENBSD],  [AS_CASE([$host_os],[openbsd*],      [true], [false])])",
          "51: AM_CONDITIONAL([SUNOS],    [AS_CASE([$host_os],[solaris*],      [true], [false])])",
          "52: AM_CONDITIONAL([WINNT],    [AS_CASE([$host_os],[mingw*],        [true], [false])])",
          "",
          "---------------"
        ]
      }
    }
  ]
}