{
  "cve_id": "CVE-2022-2208",
  "cve_desc": "NULL Pointer Dereference in GitHub repository vim/vim prior to 8.2.5163.",
  "repo": "vim/vim",
  "patch_hash": "cd38bb4d83c942c4bad596835c6766cbf32e5195",
  "patch_info": {
    "commit_hash": "cd38bb4d83c942c4bad596835c6766cbf32e5195",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/cd38bb4d83c942c4bad596835c6766cbf32e5195",
    "files": [
      "src/diff.c",
      "src/testdir/test_diffmode.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.5163: crash when deleting buffers in diff mode\n\nProblem:    Crash when deleting buffers in diff mode.\nSolution:   Recompute diffs later.  Skip window without a valid buffer.",
    "before_after_code_files": [
      "src/diff.c||src/diff.c",
      "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/diff.c||src/diff.c": [
      "File: src/diff.c -> src/diff.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "119:      tp->tp_diffbuf[i] = NULL;",
      "120:      tp->tp_diff_invalid = TRUE;",
      "121:      if (tp == curtab)",
      "123:  }",
      "124:     }",
      "125: }",
      "",
      "[Removed Lines]",
      "122:   diff_redraw(TRUE);",
      "",
      "[Added Lines]",
      "122:      {",
      "125:   need_diff_redraw = TRUE;",
      "126:   redraw_later(VALID);",
      "127:      }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "671:     need_diff_redraw = FALSE;",
      "672:     FOR_ALL_WINDOWS(wp)",
      "674:  {",
      "675:      redraw_win_later(wp, SOME_VALID);",
      "676:      if (wp != curwin)",
      "",
      "[Removed Lines]",
      "673:  if (wp->w_p_diff)",
      "",
      "[Added Lines]",
      "679:  if (wp->w_p_diff && buf_valid(wp->w_buffer))",
      "",
      "---------------"
    ],
    "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim": [
      "File: src/testdir/test_diffmode.vim -> src/testdir/test_diffmode.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1603:   call delete('Xright')",
      "1604: endfunc",
      "1607: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1606: \" This was trying to update diffs for a buffer being closed",
      "1607: func Test_diff_only()",
      "1608:   silent! lfile",
      "1609:   set diff",
      "1610:   lopen",
      "1611:   norm \u0017\u0018\u0017\u000eo",
      "1612:   silent! norm \u0017\u000e\u0017o",
      "1614:   set nodiff",
      "1615:   %bwipe!",
      "1616: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "736: static int included_patches[] =",
      "739:     5162,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:     5163,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04626c243c47af91c2580eaf23e12286180e0e81",
      "candidate_info": {
        "commit_hash": "04626c243c47af91c2580eaf23e12286180e0e81",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/04626c243c47af91c2580eaf23e12286180e0e81",
        "files": [
          "src/diff.c",
          "src/move.c",
          "src/testdir/dumps/Test_diff_scroll_change_01.dump",
          "src/testdir/dumps/Test_diff_scroll_change_02.dump",
          "src/testdir/test_diffmode.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3394: filler lines are wrong when changing text in diff mode\n\nProblem:    Filler lines are wrong when changing text in diff mode.\nSolution:   Don't change the filler lines on every change.  Check\n            scrollbinding when updating the filler lines. (closes #8809)",
        "before_after_code_files": [
          "src/diff.c||src/diff.c",
          "src/move.c||src/move.c",
          "src/testdir/dumps/Test_diff_scroll_change_01.dump||src/testdir/dumps/Test_diff_scroll_change_01.dump",
          "src/testdir/dumps/Test_diff_scroll_change_02.dump||src/testdir/dumps/Test_diff_scroll_change_02.dump",
          "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/diff.c||src/diff.c",
            "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/diff.c||src/diff.c",
            "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/diff.c||src/diff.c": [
          "File: src/diff.c -> src/diff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "655:     int  dofold)     // also recompute the folds",
          "656: {",
          "657:     win_T *wp;",
          "658:     int  n;",
          "660:     need_diff_redraw = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "658:     win_T *wp_other = NULL;",
          "659:     int  used_max_fill = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:  if (wp->w_p_diff)",
          "663:  {",
          "664:      redraw_win_later(wp, SOME_VALID);",
          "665: #ifdef FEAT_FOLDING",
          "666:      if (dofold && foldmethodIsDiff(wp))",
          "667:   foldUpdateAll(wp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "667:      if (wp != curwin)",
          "668:   wp_other = wp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "674:   if (wp->w_topfill > n)",
          "675:       wp->w_topfill = (n < 0 ? 0 : n);",
          "676:   else if (n > 0 && n > wp->w_topfill)",
          "677:       wp->w_topfill = n;",
          "678:   check_topfill(wp, FALSE);",
          "679:      }",
          "680:  }",
          "681: }",
          "683:     static void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681:   {",
          "683:       if (wp == curwin)",
          "684:    used_max_fill = TRUE;",
          "685:   }",
          "690:     if (wp_other != NULL && used_max_fill && curwin->w_p_scb)",
          "693:  diff_set_topline(wp_other, curwin);",
          "",
          "---------------"
        ],
        "src/move.c||src/move.c": [
          "File: src/move.c -> src/move.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "535:     void",
          "536: set_topline(win_T *wp, linenr_T lnum)",
          "537: {",
          "538: #ifdef FEAT_FOLDING",
          "540:     (void)hasFoldingWin(wp, lnum, &lnum, NULL, TRUE, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: #ifdef FEAT_DIFF",
          "539:     linenr_T prev_topline = wp->w_topline;",
          "540: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "546:     wp->w_topline = lnum;",
          "547:     wp->w_topline_was_set = TRUE;",
          "548: #ifdef FEAT_DIFF",
          "550: #endif",
          "551:     wp->w_valid &= ~(VALID_WROW|VALID_CROW|VALID_BOTLINE|VALID_TOPLINE);",
          "",
          "[Removed Lines]",
          "549:     wp->w_topfill = 0;",
          "",
          "[Added Lines]",
          "553:     if (lnum != prev_topline)",
          "555:  wp->w_topfill = 0;",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_diff_scroll_change_01.dump||src/testdir/dumps/Test_diff_scroll_change_01.dump": [
          "File: src/testdir/dumps/Test_diff_scroll_change_01.dump -> src/testdir/dumps/Test_diff_scroll_change_01.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0#0000e05#a8a8a8255@1|-+0#4040ff13#afffff255@34||+1#0000000#ffffff0| +0#0000e05#a8a8a8255@1|6+0#0000000#5fd7ff255| @33",
          "2: | +0#0000e05#a8a8a8255@1|-+0#4040ff13#afffff255@34||+1#0000000#ffffff0| +0#0000e05#a8a8a8255@1|7+0#0000000#5fd7ff255| @33",
          "3: | +0#0000e05#a8a8a8255@1|-+0#4040ff13#afffff255@34||+1#0000000#ffffff0| +0#0000e05#a8a8a8255@1|8+0#0000000#5fd7ff255| @33",
          "4: | +0#0000e05#a8a8a8255@1|9+0#0000000#ffffff0| @33||+1&&| +0#0000e05#a8a8a8255@1|9+0#0000000#ffffff0| @33",
          "5: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|0| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|0| @32",
          "6: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0@1| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0@1| @32",
          "7: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|2| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|2| @32",
          "8: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|3| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|3| @32",
          "9: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|4| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|4| @32",
          "10: |-+0#0000e05#a8a8a8255| |1+0#0000000#ffffff0>5| @32||+1&&|-+0#0000e05#a8a8a8255| |1+0#0000000#ffffff0|5| @32",
          "11: |~+0#4040ff13&| @35||+1#0000000&|~+0#4040ff13&| @35",
          "12: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "13: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "14: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "15: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "16: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "17: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "18: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "19: |[+3#0000000&|N|o| |N|a|m|e|]| |[|+|]| @5|7|,|2| @11|A|l@1| |[+1&&|N|o| |N|a|m|e|]| |[|+|]| @5|1|5|,|2| @10|B|o|t",
          "20: | +0&&@74",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_diff_scroll_change_02.dump||src/testdir/dumps/Test_diff_scroll_change_02.dump": [
          "File: src/testdir/dumps/Test_diff_scroll_change_02.dump -> src/testdir/dumps/Test_diff_scroll_change_02.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0#0000e05#a8a8a8255@1|-+0#4040ff13#afffff255@34||+1#0000000#ffffff0| +0#0000e05#a8a8a8255@1|6+0#0000000#5fd7ff255| @33",
          "2: | +0#0000e05#a8a8a8255@1|-+0#4040ff13#afffff255@34||+1#0000000#ffffff0| +0#0000e05#a8a8a8255@1|7+0#0000000#5fd7ff255| @33",
          "3: | +0#0000e05#a8a8a8255@1|-+0#4040ff13#afffff255@34||+1#0000000#ffffff0| +0#0000e05#a8a8a8255@1|8+0#0000000#5fd7ff255| @33",
          "4: | +0#0000e05#a8a8a8255@1|9+0#0000000#ffffff0| @33||+1&&| +0#0000e05#a8a8a8255@1|9+0#0000000#ffffff0| @33",
          "5: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|0| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|0| @32",
          "6: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0@1| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0@1| @32",
          "7: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|2| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|2| @32",
          "8: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|3| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|3| @32",
          "9: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|4| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|4| @32",
          "10: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffd7ff255|5>x+2&#ff404010| +0&#ffd7ff255@31||+1&#ffffff0| +0#0000e05#a8a8a8255@1|1+0#0000000#ffd7ff255|5| @32",
          "11: |~+0#4040ff13#ffffff0| @35||+1#0000000&|~+0#4040ff13&| @35",
          "12: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "13: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "14: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "15: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "16: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "17: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "18: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "19: |[+3#0000000&|N|o| |N|a|m|e|]| |[|+|]| @5|7|,|3| @11|A|l@1| |[+1&&|N|o| |N|a|m|e|]| |[|+|]| @5|1|5|,|3| @10|B|o|t",
          "20: | +0&&@74",
          "",
          "---------------"
        ],
        "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim": [
          "File: src/testdir/test_diffmode.vim -> src/testdir/test_diffmode.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:   call delete('XdiffSetup')",
          "994: endfunc",
          "996: func Test_diff_with_cursorline()",
          "997:   CheckScreendump",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "996: func Test_diff_with_scroll_and_change()",
          "997:   CheckScreendump",
          "999:   let lines =<< trim END",
          "1000:  call setline(1, range(1, 15))",
          "1001:  vnew",
          "1002:  call setline(1, range(9, 15))",
          "1003:  windo diffthis",
          "1004:  wincmd h",
          "1005:  exe \"normal Gl5\\<C-E>\"",
          "1006:   END",
          "1007:   call writefile(lines, 'Xtest_scroll_change')",
          "1008:   let buf = RunVimInTerminal('-S Xtest_scroll_change', {})",
          "1010:   call VerifyScreenDump(buf, 'Test_diff_scroll_change_01', {})",
          "1012:   call term_sendkeys(buf, \"ax\\<Esc>\")",
          "1013:   call VerifyScreenDump(buf, 'Test_diff_scroll_change_02', {})",
          "1015:   \" clean up",
          "1016:   call StopVimInTerminal(buf)",
          "1017:   call delete('Xtest_scroll_change')",
          "1018: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "756: static int included_patches[] =",
          "759:     3393,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:     3394,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "841c225b9ef8c5bdf5e02968a0bd62521fff6ca8",
      "candidate_info": {
        "commit_hash": "841c225b9ef8c5bdf5e02968a0bd62521fff6ca8",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/841c225b9ef8c5bdf5e02968a0bd62521fff6ca8",
        "files": [
          "src/diff.c",
          "src/testdir/dumps/Test_diff_scroll_change_03.dump",
          "src/testdir/test_diffmode.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3556: filler lines are incorrect for other window in diff mode\n\nProblem:    Filler lines are incorrect for other window in diff mode after\n            making a change.\nSolution:   Copy filler lines from the current window. (closes #8809)",
        "before_after_code_files": [
          "src/diff.c||src/diff.c",
          "src/testdir/dumps/Test_diff_scroll_change_03.dump||src/testdir/dumps/Test_diff_scroll_change_03.dump",
          "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/diff.c||src/diff.c",
            "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/diff.c||src/diff.c",
            "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/diff.c||src/diff.c": [
          "File: src/diff.c -> src/diff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "656: {",
          "657:     win_T *wp;",
          "658:     win_T *wp_other = NULL;",
          "660:     int  n;",
          "662:     need_diff_redraw = FALSE;",
          "",
          "[Removed Lines]",
          "659:     int  used_max_fill = FALSE;",
          "",
          "[Added Lines]",
          "659:     int  used_max_fill_other = FALSE;",
          "660:     int  used_max_fill_curwin = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "681:   {",
          "682:       wp->w_topfill = n;",
          "683:       if (wp == curwin)",
          "685:   }",
          "686:   check_topfill(wp, FALSE);",
          "687:      }",
          "688:  }",
          "694: }",
          "696:     static void",
          "",
          "[Removed Lines]",
          "684:    used_max_fill = TRUE;",
          "690:     if (wp_other != NULL && used_max_fill && curwin->w_p_scb)",
          "693:  diff_set_topline(wp_other, curwin);",
          "",
          "[Added Lines]",
          "685:    used_max_fill_curwin = TRUE;",
          "686:       else if (wp_other != NULL)",
          "687:    used_max_fill_other = TRUE;",
          "693:     if (wp_other != NULL && curwin->w_p_scb)",
          "694:     {",
          "695:  if (used_max_fill_curwin)",
          "698:      diff_set_topline(wp_other, curwin);",
          "699:  else if (used_max_fill_other)",
          "702:      diff_set_topline(curwin, wp_other);",
          "703:     }",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_diff_scroll_change_03.dump||src/testdir/dumps/Test_diff_scroll_change_03.dump": [
          "File: src/testdir/dumps/Test_diff_scroll_change_03.dump -> src/testdir/dumps/Test_diff_scroll_change_03.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: | +0#0000e05#a8a8a8255@1|-+0#4040ff13#afffff255@34||+1#0000000#ffffff0| +0#0000e05#a8a8a8255@1|6+0#0000000#5fd7ff255| @33",
          "2: | +0#0000e05#a8a8a8255@1|-+0#4040ff13#afffff255@34||+1#0000000#ffffff0| +0#0000e05#a8a8a8255@1|7+0#0000000#5fd7ff255| @33",
          "3: | +0#0000e05#a8a8a8255@1|-+0#4040ff13#afffff255@34||+1#0000000#ffffff0| +0#0000e05#a8a8a8255@1|8+0#0000000#5fd7ff255| @33",
          "4: | +0#0000e05#a8a8a8255@1|9+0#0000000#ffffff0| @33||+1&&| +0#0000e05#a8a8a8255@1|9+0#0000000#ffffff0| @33",
          "5: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|0| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|0| @32",
          "6: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0@1| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0@1| @32",
          "7: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|2| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|2| @32",
          "8: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|3| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|3| @32",
          "9: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|4| @32||+1&&| +0#0000e05#a8a8a8255@1|1+0#0000000#ffffff0|4| @32",
          "10: | +0#0000e05#a8a8a8255@1|1+0#0000000#ffd7ff255|5|x+2&#ff404010| +0&#ffd7ff255@31||+1&#ffffff0| +0#0000e05#a8a8a8255@1|1+0#0000000#ffd7ff255|5>y+2&#ff404010| +0&#ffd7ff255@31",
          "11: |~+0#4040ff13#ffffff0| @35||+1#0000000&|~+0#4040ff13&| @35",
          "12: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "13: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "14: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "15: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "16: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "17: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "18: |~| @35||+1#0000000&|~+0#4040ff13&| @35",
          "19: |[+1#0000000&|N|o| |N|a|m|e|]| |[|+|]| @5|7|,|3| @11|A|l@1| |[+3&&|N|o| |N|a|m|e|]| |[|+|]| @5|1|5|,|3| @10|B|o|t",
          "20: | +0&&@74",
          "",
          "---------------"
        ],
        "src/testdir/test_diffmode.vim||src/testdir/test_diffmode.vim": [
          "File: src/testdir/test_diffmode.vim -> src/testdir/test_diffmode.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1013:   call term_sendkeys(buf, \"ax\\<Esc>\")",
          "1014:   call VerifyScreenDump(buf, 'Test_diff_scroll_change_02', {})",
          "1016:   \" clean up",
          "1017:   call StopVimInTerminal(buf)",
          "1018:   call delete('Xtest_scroll_change')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1016:   call term_sendkeys(buf, \"\\<C-W>lay\\<Esc>\")",
          "1017:   call VerifyScreenDump(buf, 'Test_diff_scroll_change_03', {})",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758: static int included_patches[] =",
          "761:     3555,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     3556,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "101d57b34b72f4fbc7df1b6edfd64c64a6be14fc",
      "candidate_info": {
        "commit_hash": "101d57b34b72f4fbc7df1b6edfd64c64a6be14fc",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/101d57b34b72f4fbc7df1b6edfd64c64a6be14fc",
        "files": [
          "src/arglist.c",
          "src/diff.c",
          "src/edit.c",
          "src/help.c",
          "src/normal.c",
          "src/syntax.c",
          "src/version.c",
          "src/window.c"
        ],
        "message": "patch 9.0.0124: code has more indent than needed\n\nProblem:    Code has more indent than needed.\nSolution:   Use continue and return statements. (closes #10824)",
        "before_after_code_files": [
          "src/arglist.c||src/arglist.c",
          "src/diff.c||src/diff.c",
          "src/edit.c||src/edit.c",
          "src/help.c||src/help.c",
          "src/normal.c||src/normal.c",
          "src/syntax.c||src/syntax.c",
          "src/version.c||src/version.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/diff.c||src/diff.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/diff.c||src/diff.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/arglist.c||src/arglist.c": [
          "File: src/arglist.c -> src/arglist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1241:  for (idx = 0; idx < ARGCOUNT; ++idx)",
          "1242:  {",
          "1243:      p = alist_name(&ARGLIST[idx]);",
          "1245:      {",
          "1256: #ifndef BACKSLASH_IN_FILENAME",
          "1258: #endif",
          "1266:       if (retval != NULL)",
          "1268:       ++len;",
          "1269:   }",
          "1270:      }",
          "1271:  }",
          "",
          "[Removed Lines]",
          "1244:      if (p != NULL)",
          "1246:   if (len > 0)",
          "1247:   {",
          "1249:       if (retval != NULL)",
          "1250:    retval[len] = ' ';",
          "1251:       ++len;",
          "1252:   }",
          "1253:   for ( ; *p != NUL; ++p)",
          "1254:   {",
          "1255:       if (*p == ' '",
          "1257:        || *p == '\\\\'",
          "1259:        || *p == '`')",
          "1260:       {",
          "1262:    if (retval != NULL)",
          "1263:        retval[len] = '\\\\';",
          "1264:    ++len;",
          "1265:       }",
          "1267:    retval[len] = *p;",
          "",
          "[Added Lines]",
          "1244:      if (p == NULL)",
          "1245:   continue;",
          "1246:      if (len > 0)",
          "1249:   if (retval != NULL)",
          "1250:       retval[len] = ' ';",
          "1251:   ++len;",
          "1252:      }",
          "1253:      for ( ; *p != NUL; ++p)",
          "1254:      {",
          "1255:   if (*p == ' '",
          "1257:    || *p == '\\\\'",
          "1259:    || *p == '`')",
          "1260:   {",
          "1263:    retval[len] = '\\\\';",
          "1266:   if (retval != NULL)",
          "1267:       retval[len] = *p;",
          "1268:   ++len;",
          "",
          "---------------"
        ],
        "src/diff.c||src/diff.c": [
          "File: src/diff.c -> src/diff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "679:     need_diff_redraw = FALSE;",
          "680:     FOR_ALL_WINDOWS(wp)",
          "687: #ifdef FEAT_FOLDING",
          "690: #endif",
          "695:      {",
          "707:      }",
          "708:  }",
          "710:     if (wp_other != NULL && curwin->w_p_scb)",
          "711:     {",
          "",
          "[Removed Lines]",
          "682:  if (wp->w_p_diff && buf_valid(wp->w_buffer))",
          "683:  {",
          "684:      redraw_win_later(wp, SOME_VALID);",
          "685:      if (wp != curwin)",
          "686:   wp_other = wp;",
          "688:      if (dofold && foldmethodIsDiff(wp))",
          "689:   foldUpdateAll(wp);",
          "693:      n = diff_check(wp, wp->w_topline);",
          "694:      if ((wp != curwin && wp->w_topfill > 0) || n > 0)",
          "696:   if (wp->w_topfill > n)",
          "697:       wp->w_topfill = (n < 0 ? 0 : n);",
          "698:   else if (n > 0 && n > wp->w_topfill)",
          "699:   {",
          "700:       wp->w_topfill = n;",
          "701:       if (wp == curwin)",
          "702:    used_max_fill_curwin = TRUE;",
          "703:       else if (wp_other != NULL)",
          "704:    used_max_fill_other = TRUE;",
          "705:   }",
          "706:   check_topfill(wp, FALSE);",
          "",
          "[Added Lines]",
          "681:     {",
          "683:  if (!wp->w_p_diff || !buf_valid(wp->w_buffer))",
          "684:      continue;",
          "686:  redraw_win_later(wp, SOME_VALID);",
          "687:  if (wp != curwin)",
          "688:      wp_other = wp;",
          "690:  if (dofold && foldmethodIsDiff(wp))",
          "691:      foldUpdateAll(wp);",
          "695:  n = diff_check(wp, wp->w_topline);",
          "696:  if ((wp != curwin && wp->w_topfill > 0) || n > 0)",
          "697:  {",
          "698:      if (wp->w_topfill > n)",
          "699:   wp->w_topfill = (n < 0 ? 0 : n);",
          "700:      else if (n > 0 && n > wp->w_topfill)",
          "702:   wp->w_topfill = n;",
          "703:   if (wp == curwin)",
          "704:       used_max_fill_curwin = TRUE;",
          "705:   else if (wp_other != NULL)",
          "706:       used_max_fill_other = TRUE;",
          "708:      check_topfill(wp, FALSE);",
          "710:     }",
          "",
          "---------------"
        ],
        "src/edit.c||src/edit.c": [
          "File: src/edit.c -> src/edit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3749:     static int",
          "3750: ins_start_select(int c)",
          "3751: {",
          "3761: # ifdef MACOS_X",
          "3768: # endif",
          "3797:     return FALSE;",
          "3798: }",
          "",
          "[Removed Lines]",
          "3752:     if (km_startsel)",
          "3753:  switch (c)",
          "3754:  {",
          "3755:      case K_KHOME:",
          "3756:      case K_KEND:",
          "3757:      case K_PAGEUP:",
          "3758:      case K_KPAGEUP:",
          "3759:      case K_PAGEDOWN:",
          "3760:      case K_KPAGEDOWN:",
          "3762:      case K_LEFT:",
          "3763:      case K_RIGHT:",
          "3764:      case K_UP:",
          "3765:      case K_DOWN:",
          "3766:      case K_END:",
          "3767:      case K_HOME:",
          "3769:   if (!(mod_mask & MOD_MASK_SHIFT))",
          "3770:       break;",
          "3772:      case K_S_LEFT:",
          "3773:      case K_S_RIGHT:",
          "3774:      case K_S_UP:",
          "3775:      case K_S_DOWN:",
          "3776:      case K_S_END:",
          "3777:      case K_S_HOME:",
          "3780:   start_selection();",
          "3783:   stuffcharReadbuff(Ctrl_O);",
          "3784:   if (mod_mask)",
          "3785:   {",
          "3786:       char_u     buf[4];",
          "3788:       buf[0] = K_SPECIAL;",
          "3789:       buf[1] = KS_MODIFIER;",
          "3790:       buf[2] = mod_mask;",
          "3791:       buf[3] = NUL;",
          "3792:       stuffReadbuff(buf);",
          "3793:   }",
          "3794:   stuffcharReadbuff(c);",
          "3795:   return TRUE;",
          "3796:  }",
          "",
          "[Added Lines]",
          "3752:     if (!km_startsel)",
          "3753:  return FALSE;",
          "3754:     switch (c)",
          "3755:     {",
          "3756:  case K_KHOME:",
          "3757:  case K_KEND:",
          "3758:  case K_PAGEUP:",
          "3759:  case K_KPAGEUP:",
          "3760:  case K_PAGEDOWN:",
          "3761:  case K_KPAGEDOWN:",
          "3763:  case K_LEFT:",
          "3764:  case K_RIGHT:",
          "3765:  case K_UP:",
          "3766:  case K_DOWN:",
          "3767:  case K_END:",
          "3768:  case K_HOME:",
          "3770:      if (!(mod_mask & MOD_MASK_SHIFT))",
          "3771:   break;",
          "3773:  case K_S_LEFT:",
          "3774:  case K_S_RIGHT:",
          "3775:  case K_S_UP:",
          "3776:  case K_S_DOWN:",
          "3777:  case K_S_END:",
          "3778:  case K_S_HOME:",
          "3781:      start_selection();",
          "3784:      stuffcharReadbuff(Ctrl_O);",
          "3785:      if (mod_mask)",
          "3786:      {",
          "3787:   char_u     buf[4];",
          "3789:   buf[0] = K_SPECIAL;",
          "3790:   buf[1] = KS_MODIFIER;",
          "3791:   buf[2] = mod_mask;",
          "3792:   buf[3] = NUL;",
          "3793:   stuffReadbuff(buf);",
          "3794:      }",
          "3795:      stuffcharReadbuff(c);",
          "3796:      return TRUE;",
          "3797:     }",
          "",
          "---------------"
        ],
        "src/help.c||src/help.c": [
          "File: src/help.c -> src/help.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1220:     for (i = 0; i < filecount; ++i)",
          "1221:     {",
          "1222:  len = (int)STRLEN(files[i]);",
          "1224:  {",
          "1255:  }",
          "1256:     }",
          "",
          "[Removed Lines]",
          "1223:  if (len > 4)",
          "1225:      if (STRICMP(files[i] + len - 4, \".txt\") == 0)",
          "1226:      {",
          "1228:   lang[0] = 'e';",
          "1229:   lang[1] = 'n';",
          "1230:      }",
          "1231:      else if (files[i][len - 4] == '.'",
          "1232:       && ASCII_ISALPHA(files[i][len - 3])",
          "1233:       && ASCII_ISALPHA(files[i][len - 2])",
          "1234:       && TOLOWER_ASC(files[i][len - 1]) == 'x')",
          "1235:      {",
          "1237:   lang[0] = TOLOWER_ASC(files[i][len - 3]);",
          "1238:   lang[1] = TOLOWER_ASC(files[i][len - 2]);",
          "1239:      }",
          "1240:      else",
          "1241:   continue;",
          "1244:      for (j = 0; j < ga.ga_len; j += 2)",
          "1245:   if (STRNCMP(lang, ((char_u *)ga.ga_data) + j, 2) == 0)",
          "1246:       break;",
          "1247:      if (j == ga.ga_len)",
          "1248:      {",
          "1250:   if (ga_grow(&ga, 2) == FAIL)",
          "1251:       break;",
          "1252:   ((char_u *)ga.ga_data)[ga.ga_len++] = lang[0];",
          "1253:   ((char_u *)ga.ga_data)[ga.ga_len++] = lang[1];",
          "1254:      }",
          "",
          "[Added Lines]",
          "1223:  if (len <= 4)",
          "1224:      continue;",
          "1226:  if (STRICMP(files[i] + len - 4, \".txt\") == 0)",
          "1229:      lang[0] = 'e';",
          "1230:      lang[1] = 'n';",
          "1231:  }",
          "1232:  else if (files[i][len - 4] == '.'",
          "1233:   && ASCII_ISALPHA(files[i][len - 3])",
          "1234:   && ASCII_ISALPHA(files[i][len - 2])",
          "1235:   && TOLOWER_ASC(files[i][len - 1]) == 'x')",
          "1236:  {",
          "1238:      lang[0] = TOLOWER_ASC(files[i][len - 3]);",
          "1239:      lang[1] = TOLOWER_ASC(files[i][len - 2]);",
          "1240:  }",
          "1241:  else",
          "1242:      continue;",
          "1245:  for (j = 0; j < ga.ga_len; j += 2)",
          "1246:      if (STRNCMP(lang, ((char_u *)ga.ga_data) + j, 2) == 0)",
          "1247:   break;",
          "1248:  if (j == ga.ga_len)",
          "1249:  {",
          "1251:      if (ga_grow(&ga, 2) == FAIL)",
          "1252:   break;",
          "1253:      ((char_u *)ga.ga_data)[ga.ga_len++] = lang[0];",
          "1254:      ((char_u *)ga.ga_data)[ga.ga_len++] = lang[1];",
          "",
          "---------------"
        ],
        "src/normal.c||src/normal.c": [
          "File: src/normal.c -> src/normal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1916:     FOR_ALL_WINDOWS(curwin)",
          "1917:     {",
          "1918:  curbuf = curwin->w_buffer;",
          "1921:  {",
          "1925: #ifdef FEAT_DIFF",
          "1950:      }",
          "1954:      {",
          "1957:      }",
          "1958:  }",
          "1959:     }",
          "",
          "[Removed Lines]",
          "1920:  if (curwin != old_curwin && curwin->w_p_scb)",
          "1923:      if (want_ver)",
          "1924:      {",
          "1926:   if (old_curwin->w_p_diff && curwin->w_p_diff)",
          "1927:   {",
          "1928:       diff_set_topline(old_curwin, curwin);",
          "1929:   }",
          "1930:   else",
          "1931: #endif",
          "1932:   {",
          "1933:       curwin->w_scbind_pos += topline_diff;",
          "1934:       topline = curwin->w_scbind_pos;",
          "1935:       if (topline > curbuf->b_ml.ml_line_count)",
          "1936:    topline = curbuf->b_ml.ml_line_count;",
          "1937:       if (topline < 1)",
          "1938:    topline = 1;",
          "1940:       y = topline - curwin->w_topline;",
          "1941:       if (y > 0)",
          "1942:    scrollup(y, FALSE);",
          "1943:       else",
          "1944:    scrolldown(-y, FALSE);",
          "1945:   }",
          "1947:   redraw_later(VALID);",
          "1948:   cursor_correct();",
          "1949:   curwin->w_redr_status = TRUE;",
          "1953:      if (want_hor && curwin->w_leftcol != tgt_leftcol)",
          "1955:   curwin->w_leftcol = tgt_leftcol;",
          "1956:   leftcol_changed();",
          "",
          "[Added Lines]",
          "1920:  if (curwin == old_curwin || !curwin->w_p_scb)",
          "1921:      continue;",
          "1924:  if (want_ver)",
          "1927:      if (old_curwin->w_p_diff && curwin->w_p_diff)",
          "1928:      {",
          "1929:   diff_set_topline(old_curwin, curwin);",
          "1931:      else",
          "1932: #endif",
          "1934:   curwin->w_scbind_pos += topline_diff;",
          "1935:   topline = curwin->w_scbind_pos;",
          "1936:   if (topline > curbuf->b_ml.ml_line_count)",
          "1937:       topline = curbuf->b_ml.ml_line_count;",
          "1938:   if (topline < 1)",
          "1939:       topline = 1;",
          "1941:   y = topline - curwin->w_topline;",
          "1942:   if (y > 0)",
          "1943:       scrollup(y, FALSE);",
          "1944:   else",
          "1945:       scrolldown(-y, FALSE);",
          "1948:      redraw_later(VALID);",
          "1949:      cursor_correct();",
          "1950:      curwin->w_redr_status = TRUE;",
          "1951:  }",
          "1954:  if (want_hor && curwin->w_leftcol != tgt_leftcol)",
          "1955:  {",
          "1956:      curwin->w_leftcol = tgt_leftcol;",
          "1957:      leftcol_changed();",
          "",
          "---------------"
        ],
        "src/syntax.c||src/syntax.c": [
          "File: src/syntax.c -> src/syntax.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1485:     reg_extmatch_T *six, *bsx;",
          "1498:  {",
          "1503:      {",
          "1512:       break;",
          "1533:       break;",
          "1534:      }",
          "1535:  }",
          "1538:     }",
          "1540: }",
          "",
          "[Removed Lines]",
          "1488:     if (sp->sst_stacksize == current_state.ga_len",
          "1489:      && sp->sst_next_list == current_next_list)",
          "1490:     {",
          "1492:  if (sp->sst_stacksize > SST_FIX_STATES)",
          "1493:      bp = SYN_STATE_P(&(sp->sst_union.sst_ga));",
          "1494:  else",
          "1495:      bp = sp->sst_union.sst_stack;",
          "1497:  for (i = current_state.ga_len; --i >= 0; )",
          "1500:      if (bp[i].bs_idx != CUR_STATE(i).si_idx)",
          "1501:   break;",
          "1502:      if (bp[i].bs_extmatch != CUR_STATE(i).si_extmatch)",
          "1507:   bsx = bp[i].bs_extmatch;",
          "1508:   six = CUR_STATE(i).si_extmatch;",
          "1511:   if (bsx == NULL || six == NULL)",
          "1513:   for (j = 0; j < NSUBEXP; ++j)",
          "1514:   {",
          "1517:       if (bsx->matches[j] != six->matches[j])",
          "1518:       {",
          "1522:    if (bsx->matches[j] == NULL",
          "1523:     || six->matches[j] == NULL)",
          "1524:        break;",
          "1525:    if ((SYN_ITEMS(syn_block)[CUR_STATE(i).si_idx]).sp_ic",
          "1526:     ? MB_STRICMP(bsx->matches[j],",
          "1527:         six->matches[j]) != 0",
          "1528:     : STRCMP(bsx->matches[j], six->matches[j]) != 0)",
          "1529:        break;",
          "1530:       }",
          "1531:   }",
          "1532:   if (j != NSUBEXP)",
          "1536:  if (i < 0)",
          "1537:      return TRUE;",
          "1539:     return FALSE;",
          "",
          "[Added Lines]",
          "1488:     if (sp->sst_stacksize != current_state.ga_len",
          "1489:      || sp->sst_next_list != current_next_list)",
          "1490:  return FALSE;",
          "1493:     if (sp->sst_stacksize > SST_FIX_STATES)",
          "1494:  bp = SYN_STATE_P(&(sp->sst_union.sst_ga));",
          "1495:     else",
          "1496:  bp = sp->sst_union.sst_stack;",
          "1498:     for (i = current_state.ga_len; --i >= 0; )",
          "1499:     {",
          "1501:  if (bp[i].bs_idx != CUR_STATE(i).si_idx)",
          "1502:      break;",
          "1503:  if (bp[i].bs_extmatch == CUR_STATE(i).si_extmatch)",
          "1504:      continue;",
          "1507:  bsx = bp[i].bs_extmatch;",
          "1508:  six = CUR_STATE(i).si_extmatch;",
          "1510:  if (bsx == NULL || six == NULL)",
          "1511:      break;",
          "1512:  for (j = 0; j < NSUBEXP; ++j)",
          "1515:      if (bsx->matches[j] != six->matches[j])",
          "1520:   if (bsx->matches[j] == NULL || six->matches[j] == NULL)",
          "1522:   if ((SYN_ITEMS(syn_block)[CUR_STATE(i).si_idx]).sp_ic",
          "1523:    ? MB_STRICMP(bsx->matches[j], six->matches[j]) != 0",
          "1524:    : STRCMP(bsx->matches[j], six->matches[j]) != 0)",
          "1528:  if (j != NSUBEXP)",
          "1529:      break;",
          "1531:     return i < 0 ? TRUE : FALSE;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736: static int included_patches[] =",
          "739:     123,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     124,",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2004:   next_curwin_size = -1;",
          "2005:   FOR_ALL_FRAMES(fr, topfr->fr_child)",
          "2006:   {",
          "2011:       {",
          "2032:       }",
          "2033:   }",
          "2034:   if (next_curwin_size == -1)",
          "2035:   {",
          "",
          "[Removed Lines]",
          "2010:       if (frame_fixed_width(fr))",
          "2012:    n = frame_minwidth(fr, NOWIN);",
          "2013:    new_size = fr->fr_width;",
          "2014:    if (frame_has_win(fr, next_curwin))",
          "2015:    {",
          "2016:        room += p_wiw - p_wmw;",
          "2017:        next_curwin_size = 0;",
          "2018:        if (new_size < p_wiw)",
          "2019:     new_size = p_wiw;",
          "2020:    }",
          "2021:    else",
          "2023:        totwincount -= (n + (fr->fr_next == NULL",
          "2024:            ? extra_sep : 0)) / (p_wmw + 1);",
          "2025:    room -= new_size - n;",
          "2026:    if (room < 0)",
          "2027:    {",
          "2028:        new_size += room;",
          "2029:        room = 0;",
          "2030:    }",
          "2031:    fr->fr_newwidth = new_size;",
          "",
          "[Added Lines]",
          "2007:       if (!frame_fixed_width(fr))",
          "2008:    continue;",
          "2011:       n = frame_minwidth(fr, NOWIN);",
          "2012:       new_size = fr->fr_width;",
          "2013:       if (frame_has_win(fr, next_curwin))",
          "2015:    room += p_wiw - p_wmw;",
          "2016:    next_curwin_size = 0;",
          "2017:    if (new_size < p_wiw)",
          "2018:        new_size = p_wiw;",
          "2020:       else",
          "2022:    totwincount -= (n + (fr->fr_next == NULL",
          "2023:             ? extra_sep : 0)) / (p_wmw + 1);",
          "2024:       room -= new_size - n;",
          "2025:       if (room < 0)",
          "2026:       {",
          "2027:    new_size += room;",
          "2028:    room = 0;",
          "2029:       }",
          "2030:       fr->fr_newwidth = new_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2145:   next_curwin_size = -1;",
          "2146:   FOR_ALL_FRAMES(fr, topfr->fr_child)",
          "2147:   {",
          "2152:       {",
          "2173:       }",
          "2174:   }",
          "2175:   if (next_curwin_size == -1)",
          "2176:   {",
          "",
          "[Removed Lines]",
          "2151:       if (frame_fixed_height(fr))",
          "2153:    n = frame_minheight(fr, NOWIN);",
          "2154:    new_size = fr->fr_height;",
          "2155:    if (frame_has_win(fr, next_curwin))",
          "2156:    {",
          "2157:        room += p_wh - p_wmh;",
          "2158:        next_curwin_size = 0;",
          "2159:        if (new_size < p_wh)",
          "2160:     new_size = p_wh;",
          "2161:    }",
          "2162:    else",
          "2164:        totwincount -= (n + (fr->fr_next == NULL",
          "2165:            ? extra_sep : 0)) / (p_wmh + 1);",
          "2166:    room -= new_size - n;",
          "2167:    if (room < 0)",
          "2168:    {",
          "2169:        new_size += room;",
          "2170:        room = 0;",
          "2171:    }",
          "2172:    fr->fr_newheight = new_size;",
          "",
          "[Added Lines]",
          "2146:       if (!frame_fixed_height(fr))",
          "2147:    continue;",
          "2151:       n = frame_minheight(fr, NOWIN);",
          "2152:       new_size = fr->fr_height;",
          "2153:       if (frame_has_win(fr, next_curwin))",
          "2155:    room += p_wh - p_wmh;",
          "2156:    next_curwin_size = 0;",
          "2157:    if (new_size < p_wh)",
          "2158:        new_size = p_wh;",
          "2159:       }",
          "2160:       else",
          "2162:    totwincount -= (n + (fr->fr_next == NULL",
          "2163:             ? extra_sep : 0)) / (p_wmh + 1);",
          "2164:       room -= new_size - n;",
          "2165:       if (room < 0)",
          "2166:       {",
          "2167:    new_size += room;",
          "2168:    room = 0;",
          "2170:       fr->fr_newheight = new_size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3752:     for (wp = firstwin; win_valid(wp); wp = nextwp)",
          "3753:     {",
          "3754:  nextwp = wp->w_next;",
          "3767: #if defined(FEAT_GUI_DIALOG) || defined(FEAT_CON_DIALOG)",
          "3770:   {",
          "3780:       continue;",
          "3781:      }",
          "3784:  }",
          "3785:     }",
          "3787:     if (message && !ONE_WINDOW)",
          "",
          "[Removed Lines]",
          "3755:  if (wp != curwin)  // don't close current window",
          "3756:  {",
          "3759:      r = can_abandon(wp->w_buffer, forceit);",
          "3760:      if (!win_valid(wp))  // autocommands messed wp up",
          "3761:      {",
          "3762:   nextwp = firstwin;",
          "3763:   continue;",
          "3764:      }",
          "3765:      if (!r)",
          "3766:      {",
          "3768:   if (message && (p_confirm",
          "3769:         || (cmdmod.cmod_flags & CMOD_CONFIRM)) && p_write)",
          "3771:       dialog_changed(wp->w_buffer, FALSE);",
          "3772:       if (!win_valid(wp))  // autocommands messed wp up",
          "3773:       {",
          "3774:    nextwp = firstwin;",
          "3775:    continue;",
          "3776:       }",
          "3777:   }",
          "3778:   if (bufIsChanged(wp->w_buffer))",
          "3779: #endif",
          "3782:      win_close(wp, !buf_hide(wp->w_buffer)",
          "3783:             && !bufIsChanged(wp->w_buffer));",
          "",
          "[Added Lines]",
          "3752:  if (wp == curwin)  // don't close current window",
          "3753:      continue;",
          "3756:  r = can_abandon(wp->w_buffer, forceit);",
          "3757:  if (!win_valid(wp))  // autocommands messed wp up",
          "3758:  {",
          "3759:      nextwp = firstwin;",
          "3760:      continue;",
          "3761:  }",
          "3762:  if (!r)",
          "3763:  {",
          "3765:      if (message && (p_confirm",
          "3766:     || (cmdmod.cmod_flags & CMOD_CONFIRM)) && p_write)",
          "3767:      {",
          "3768:   dialog_changed(wp->w_buffer, FALSE);",
          "3769:   if (!win_valid(wp))  // autocommands messed wp up",
          "3771:       nextwp = firstwin;",
          "3773:   }",
          "3775:      if (bufIsChanged(wp->w_buffer))",
          "3776: #endif",
          "3777:   continue;",
          "3779:  win_close(wp, !buf_hide(wp->w_buffer) && !bufIsChanged(wp->w_buffer));",
          "",
          "---------------"
        ]
      }
    }
  ]
}