{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4a4dd6ebcbd1d43f916fcd7f8d91d91ca762c08",
      "candidate_info": {
        "commit_hash": "d4a4dd6ebcbd1d43f916fcd7f8d91d91ca762c08",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4a4dd6ebcbd1d43f916fcd7f8d91d91ca762c08",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "test/normalize.test"
        ],
        "message": "Fix an imbalanced lock problem in sqlite3Normalize() introduced by the simplification in [94ea6379178e3ff6a].\n\nFossilOrigin-Name: f69624373e33c4d370a9264a317ffdb0adbce967a950f243de2b41161a8c7ded",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8f8d682825d065bcaebda4cba63f8b67789b923d8b62eb7c576a5bc01536f577",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "741:   }",
          "742:   if( sqlite3IsRowid(zId) ){",
          "743:     bFound = 1;",
          "745:   }",
          "746:   if( nToken>0 ){",
          "747:     int hash = SQLITE_FUNC_HASH(sqlite3UpperToLower[(u8)zToken[0]], nToken);",
          "748:     if( sqlite3FunctionSearch(hash, zId) ){",
          "749:       bFound = 1;",
          "751:     }",
          "752:   }",
          "753:   assert( db!=0 );",
          "",
          "[Removed Lines]",
          "744:     goto done;",
          "750:       goto done;",
          "",
          "[Added Lines]",
          "744:     goto done1;",
          "750:       goto done1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:         }else{",
          "783:           bFound = 0;",
          "785:         }",
          "786:       }",
          "787:       if( pHash && sqlite3HashFind(pHash, zId) ){",
          "788:         bFound = 1;",
          "790:       }",
          "791:     }",
          "792:   }",
          "794:   sqlite3BtreeLeaveAll(db);",
          "795:   sqlite3_mutex_leave(db->mutex);",
          "796:   if( zId!=zSpace ) sqlite3DbFree(db, zId);",
          "797:   return bFound;",
          "798: }",
          "",
          "[Removed Lines]",
          "784:           goto done;",
          "789:         goto done;",
          "793: done:",
          "",
          "[Added Lines]",
          "784:           goto done2;",
          "789:         goto done2;",
          "793: done2:",
          "796: done1:",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: } {}",
          "87: do_test 202 {",
          "88:   sqlite3_normalized_sql $STMT",
          "90: do_test 203 {",
          "91:   sqlite3_finalize $STMT",
          "92: } {SQLITE_OK}",
          "",
          "[Removed Lines]",
          "89: } {}",
          "",
          "[Added Lines]",
          "89: } {SELECT a,b FROM t1 WHERE b=?ORDER BY a;}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6099e9b401438b24bf273229c6f0f872cb46cee",
      "candidate_info": {
        "commit_hash": "f6099e9b401438b24bf273229c6f0f872cb46cee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f6099e9b401438b24bf273229c6f0f872cb46cee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Avoid long delays that can occur when \".recover\"ing data from a database with a corrupt freelist.\n\nFossilOrigin-Name: 20f06bf2e659212a68dcf138e444da7bd4220548ec15a97cfd7eb82e028b3630",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac790729d9c8f8612936bab56dca6061408007bc2150ac8c7089132403d7f885",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6579:       \"      FROM trunk WHERE x>0\"",
          "6580:       \"),\"",
          "6581:       \"freelist(data, n, freepgno) AS (\"",
          "6583:       \"      FROM trunk t, sqlite_dbpage s WHERE s.pgno=t.pgno\"",
          "6584:       \"    UNION ALL\"",
          "6585:       \"  SELECT data, n-1, shell_int32(data, 2+n) \"",
          "",
          "[Removed Lines]",
          "6582:       \"  SELECT data, shell_int32(data, 1)-1, t.pgno \"",
          "",
          "[Added Lines]",
          "6582:       \"  SELECT data, min(16384, shell_int32(data, 1)-1), t.pgno \"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f20bbc5f69186e9f04b498b7de2488f3c02f7364",
      "candidate_info": {
        "commit_hash": "f20bbc5f69186e9f04b498b7de2488f3c02f7364",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f20bbc5f69186e9f04b498b7de2488f3c02f7364",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Fix a failure in sqlite3ExprCompare()\n\nFossilOrigin-Name: 835e2cc55feea2f2426c99816c27f9c35d2fd4cdd9bf1c7f46f889ecfd222778",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca7b7aaed010ec67bec5355a9ac1d7f229d6d5f2ba2d796b76f5e908b1267688",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4858:         if( sqlite3WindowCompare(pParse,pA->y.pWin,pB->y.pWin)!=0 ) return 2;",
          "4859:       }",
          "4860: #endif",
          "4861:     }else if( pA->op==TK_COLLATE ){",
          "4862:       if( sqlite3_stricmp(pA->u.zToken,pB->u.zToken)!=0 ) return 2;",
          "4864:       return 2;",
          "4865:     }",
          "4866:   }",
          "",
          "[Removed Lines]",
          "4863:     }else if( strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "",
          "[Added Lines]",
          "4861:     }else if( pA->op==TK_NULL ){",
          "4862:       return 0;",
          "4865:     }else if( ALWAYS(pB->u.zToken!=0) && strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfc45b1021d779cd3031bdfb8480173bb84f0e47",
      "candidate_info": {
        "commit_hash": "cfc45b1021d779cd3031bdfb8480173bb84f0e47",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cfc45b1021d779cd3031bdfb8480173bb84f0e47",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Reduce the size of the parser tables generated by Lemon by splitting the yyRuleInfo structure into separate yyRuleInfoLhs and yyRuleInfoNRhs arrays.\n\nFossilOrigin-Name: 70fe8ec2ae3099b8773834c7ac2e56768addbecd57956ac523e71a7dc264049c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7149dacf1d440a19f62808b4591c3fa8da202b2ec742d5490a63f2ec005ff9e7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4590:   tplt_print(out,lemp,lemp->overflow,&lineno);",
          "4591:   tplt_xfer(lemp->name,in,out,&lineno);",
          "4598:   for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4600:     rule_print(out, rp);",
          "4601:     fprintf(out,\" */\\n\"); lineno++;",
          "4602:   }",
          "",
          "[Removed Lines]",
          "4599:     fprintf(out,\"  { %4d, %4d }, /* (%d) \",rp->lhs->index,-rp->nrhs,i);",
          "",
          "[Added Lines]",
          "4600:     fprintf(out,\"  %4d,  /* (%d) \", rp->lhs->index, i);",
          "4601:      rule_print(out, rp);",
          "4602:     fprintf(out,\" */\\n\"); lineno++;",
          "4603:   }",
          "4604:   tplt_xfer(lemp->name,in,out,&lineno);",
          "4605:   for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4606:     fprintf(out,\"  %3d,  /* (%d) \", -rp->nrhs, i);",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "686:   yyTraceShift(yypParser, yyNewState, \"Shift\");",
          "687: }",
          "696: %%",
          "697: };",
          "",
          "[Removed Lines]",
          "692: static const struct {",
          "695: } yyRuleInfo[] = {",
          "",
          "[Added Lines]",
          "691: static const YYCODETYPE yyRuleInfoLhs[] = {",
          "692: %%",
          "693: };",
          "697: static const signed char yyRuleInfoNRhs[] = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:   yymsp = yypParser->yytos;",
          "726: #ifndef NDEBUG",
          "727:   if( yyTraceFILE && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){",
          "729:     if( yysize ){",
          "730:       fprintf(yyTraceFILE, \"%sReduce %d [%s], go to state %d.\\n\",",
          "731:         yyTracePrompt,",
          "",
          "[Removed Lines]",
          "728:     yysize = yyRuleInfo[yyruleno].nrhs;",
          "",
          "[Added Lines]",
          "730:     yysize = yyRuleInfoNRhs[yyruleno];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "744: #ifdef YYTRACKMAXSTACKDEPTH",
          "745:     if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){",
          "746:       yypParser->yyhwm++;",
          "",
          "[Removed Lines]",
          "743:   if( yyRuleInfo[yyruleno].nrhs==0 ){",
          "",
          "[Added Lines]",
          "745:   if( yyRuleInfoNRhs[yyruleno]==0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "782: %%",
          "784:   };",
          "788:   yyact = yy_find_reduce_action(yymsp[yysize].stateno,(YYCODETYPE)yygoto);",
          "",
          "[Removed Lines]",
          "785:   assert( yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );",
          "786:   yygoto = yyRuleInfo[yyruleno].lhs;",
          "787:   yysize = yyRuleInfo[yyruleno].nrhs;",
          "",
          "[Added Lines]",
          "787:   assert( yyruleno<sizeof(yyRuleInfoLhs)/sizeof(yyRuleInfoLhs[0]) );",
          "788:   yygoto = yyRuleInfoLhs[yyruleno];",
          "789:   yysize = yyRuleInfoNRhs[yyruleno];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4e5039316e0c8fee98913d6f3433074d28a4b6b",
      "candidate_info": {
        "commit_hash": "b4e5039316e0c8fee98913d6f3433074d28a4b6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b4e5039316e0c8fee98913d6f3433074d28a4b6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the \".eqp trace\" command to the CLI when using SQLITE_DEBUG, as a convenient shorthand for \"PRAGMA vdbe_debug=ON\" but with automatic indentation feature for program listings provided by the CLI.\n\nFossilOrigin-Name: 626502faa17b5b7a0fa36cabfd12e463eb09aec048d01c587a18d3977cf04662",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 13f6942eb0da2d92a0830f18640ce64208bd0cd6ff6d0c97e4a4c57ac3d65ba6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3401:   \"     --newlines             Allow unescaped newline characters in output\",",
          "3402:   \"   TABLE is LIKE pattern for the tables to dump\",",
          "3403:   \".echo on|off             Turn command echo on or off\",",
          "3405:   \".excel                   Display the output of next command in a spreadsheet\",",
          "3406:   \".exit ?CODE?             Exit this program with return-code CODE\",",
          "3407:   \".expert                  EXPERIMENTAL. Suggest indexes for specified queries\",",
          "",
          "[Removed Lines]",
          "3404:   \".eqp on|off|full         Enable or disable automatic EXPLAIN QUERY PLAN\",",
          "",
          "[Added Lines]",
          "3405:   \".eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN\",",
          "3406:   \"   Other Modes:\",",
          "3407: #ifdef SQLITE_DEBUG",
          "3408:   \"      test                  Show raw EXPLAIN QUERY PLAN output\",",
          "3409:   \"      trace                 Like \\\"full\\\" but also enable \\\"PRAGMA vdbe_trace\\\"\",",
          "3410: #endif",
          "3411:   \"      trigger               Like \\\"full\\\" but also show trigger bytecode\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6264:   if( c=='e' && strncmp(azArg[0], \"eqp\", n)==0 ){",
          "6265:     if( nArg==2 ){",
          "6266:       p->autoEQPtest = 0;",
          "6267:       if( strcmp(azArg[1],\"full\")==0 ){",
          "6268:         p->autoEQP = AUTOEQP_full;",
          "6269:       }else if( strcmp(azArg[1],\"trigger\")==0 ){",
          "6270:         p->autoEQP = AUTOEQP_trigger;",
          "6271:       }else if( strcmp(azArg[1],\"test\")==0 ){",
          "6272:         p->autoEQP = AUTOEQP_on;",
          "6273:         p->autoEQPtest = 1;",
          "6274:       }else{",
          "6275:         p->autoEQP = (u8)booleanValue(azArg[1]);",
          "6276:       }",
          "6277:     }else{",
          "6279:       rc = 1;",
          "6280:     }",
          "6281:   }else",
          "",
          "[Removed Lines]",
          "6278:       raw_printf(stderr, \"Usage: .eqp off|on|trigger|full\\n\");",
          "",
          "[Added Lines]",
          "6274:       if( p->autoEQPtrace ){",
          "6275:         if( p->db ) sqlite3_exec(p->db, \"PRAGMA vdbe_trace=OFF;\", 0, 0, 0);",
          "6276:         p->autoEQPtrace = 0;",
          "6277:       }",
          "6282: #ifdef SQLITE_DEBUG",
          "6286:       }else if( strcmp(azArg[1],\"trace\")==0 ){",
          "6287:         p->autoEQP = AUTOEQP_full;",
          "6288:         p->autoEQPtrace = 1;",
          "6289:         open_db(p, 0);",
          "6290:         (void)sqlite3_table_column_metadata(p->db, \"x\",\"x\",0,0,0,0,0,0);",
          "6291:         sqlite3_exec(p->db, \"PRAGMA vdbe_trace=ON;\", 0, 0, 0);",
          "6292: #endif",
          "6297:       raw_printf(stderr, \"Usage: .eqp off|on|trace|trigger|full\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}