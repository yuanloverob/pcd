{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5ad1251a60ae792b58de473a0bd22e67224ea3ec",
      "candidate_info": {
        "commit_hash": "5ad1251a60ae792b58de473a0bd22e67224ea3ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5ad1251a60ae792b58de473a0bd22e67224ea3ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved debugging output from the OP_MakeRecord opcode.\n\nFossilOrigin-Name: ac790729d9c8f8612936bab56dca6061408007bc2150ac8c7089132403d7f885",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5cd728fb6b3a70f795306d4d6e12151a4de327f801733a8558139e3cd76fe66a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2882:   if( zAffinity ){",
          "2883:     pRec = pData0;",
          "2884:     do{",
          "2886:       assert( zAffinity[0]==0 || pRec<=pLast );",
          "2887:     }while( zAffinity[0] );",
          "2888:   }",
          "",
          "[Removed Lines]",
          "2885:       applyAffinity(pRec++, *(zAffinity++), encoding);",
          "",
          "[Added Lines]",
          "2885:       applyAffinity(pRec, zAffinity[0], encoding);",
          "2886:       REGISTER_TRACE((int)(pRec-aMem), pRec);",
          "2887:       zAffinity++;",
          "2888:       pRec++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe9a832e806ea2796a8f362f21168725c610687b",
      "candidate_info": {
        "commit_hash": "fe9a832e806ea2796a8f362f21168725c610687b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe9a832e806ea2796a8f362f21168725c610687b",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json104.test"
        ],
        "message": "Fix a problem with handling with handling quoted path elements in extension functions json_set() and json_insert() reported on the mailing list.\n\nFossilOrigin-Name: 45bfcb88e71451a656982e217375e257fc8e68374349c2984be1266bf86fb8cf",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json104.test||test/json104.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123:       u32 iStart, iLabel;",
          "1124:       JsonNode *pNode;",
          "1125:       iStart = jsonParseAddNode(pParse, JSON_OBJECT, 2, 0);",
          "1127:       zPath += i;",
          "1128:       pNode = jsonLookupAppend(pParse, zPath, pApnd, pzErr);",
          "1129:       if( pParse->oom ) return 0;",
          "",
          "[Removed Lines]",
          "1126:       iLabel = jsonParseAddNode(pParse, JSON_STRING, i, zPath);",
          "",
          "[Added Lines]",
          "1126:       iLabel = jsonParseAddNode(pParse, JSON_STRING, nKey, zKey);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a61db8ff6713d66778a0500ca4049229c081a3ae95991f05eba09729434444b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json104.test||test/json104.test": [
          "File: test/json104.test -> test/json104.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: ifcapable !json1 {",
          "18:   finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: set testprefix json104",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   SELECT json_patch('{}','{\"a\":{\"bb\":{\"ccc\":null}}}');",
          "126: } {{{\"a\":{\"bb\":{}}}}}",
          "130: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: #-------------------------------------------------------------------------",
          "131: do_execsql_test 401 {",
          "132:   CREATE TABLE obj(x);",
          "133:   INSERT INTO obj VALUES('{\"a\":1,\"b\":2}');",
          "134:   SELECT * FROM obj;",
          "135: } {{{\"a\":1,\"b\":2}}}",
          "136: do_execsql_test 402 {",
          "137:   UPDATE obj SET x = json_insert(x, '$.c', 3);",
          "138:   SELECT * FROM obj;",
          "139: } {{{\"a\":1,\"b\":2,\"c\":3}}}",
          "140: do_execsql_test 403 {",
          "141:   SELECT json_extract(x, '$.b') FROM obj;",
          "142:   SELECT json_extract(x, '$.\"b\"') FROM obj;",
          "143: } {2 2}",
          "144: do_execsql_test 404 {",
          "145:   UPDATE obj SET x = json_set(x, '$.\"b\"', 555);",
          "146:   SELECT json_extract(x, '$.b') FROM obj;",
          "147:   SELECT json_extract(x, '$.\"b\"') FROM obj;",
          "148: } {555 555}",
          "149: do_execsql_test 405 {",
          "150:   UPDATE obj SET x = json_set(x, '$.\"d\"', 4);",
          "151:   SELECT json_extract(x, '$.\"d\"') FROM obj;",
          "152: } {4}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5976552a72f33438c293ab0584d981909955e866",
      "candidate_info": {
        "commit_hash": "5976552a72f33438c293ab0584d981909955e866",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5976552a72f33438c293ab0584d981909955e866",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the --max-data and --max-as options to dbfuzz2.  Also cause dbfuzz2 to show its maximum RSS size upon exit in standalone mode with the -v option.\n\nFossilOrigin-Name: 7ce93e824a954d1e0cf8d7343e59a2660175f42bd4dac02aed8ad77644e7eb2f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c11ae4fed89484f0a0061002861b5d599bbda8e40a1f0c33fdbe8cb072134d5c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         bVdbeDebug = 1;",
          "151:         continue;",
          "152:       }",
          "154:         struct rlimit x,y;",
          "155:         if( i+1==argc ){",
          "156:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "157:           exit(1);",
          "158:         }",
          "159:         memset(&x,0,sizeof(x));",
          "161:         y.rlim_cur = atoi(argv[++i]);",
          "162:         y.rlim_max = x.rlim_cur;",
          "164:         memset(&y,0,sizeof(y));",
          "168:         continue;",
          "169:       }",
          "170:     }",
          "",
          "[Removed Lines]",
          "153:       if( strcmp(z,\"max-stack\")==0 ){",
          "160:         getrlimit(RLIMIT_STACK, &x);",
          "163:         setrlimit(RLIMIT_STACK, &y);",
          "165:         getrlimit(RLIMIT_STACK, &y);",
          "166:         printf(\"Stack size limit changed from %d to %d\\n\",",
          "167:                (int)x.rlim_cur, (int)y.rlim_cur);",
          "",
          "[Added Lines]",
          "153:       if( strcmp(z,\"max-stack\")==0",
          "154:        || strcmp(z,\"max-data\")==0",
          "155:        || strcmp(z,\"max-as\")==0",
          "156:       ){",
          "158:         int resource = RLIMIT_STACK;",
          "159:         char *zType = \"RLIMIT_STACK\";",
          "164:         if( z[4]=='d' ){",
          "165:           resource = RLIMIT_DATA;",
          "166:           zType = \"RLIMIT_DATA\";",
          "167:         }",
          "168:         if( z[4]=='a' ){",
          "169:           resource = RLIMIT_AS;",
          "170:           zType = \"RLIMIT_AS\";",
          "171:         }",
          "173:         getrlimit(resource, &x);",
          "176:         setrlimit(resource, &y);",
          "178:         getrlimit(resource, &y);",
          "179:         printf(\"%s changed from %d to %d\\n\",",
          "180:                zType, (int)x.rlim_cur, (int)y.rlim_cur);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     }",
          "218:   }",
          "219:   if( eVerbosity>0 ){",
          "220:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "221:   }",
          "222:   return 0;",
          "223: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     struct rusage x;",
          "235:     memset(&x, 0, sizeof(x));",
          "236:     if( getrusage(RUSAGE_SELF, &x)==0 ){",
          "237:       printf(\"Maximum RSS = %ld KB\\n\", x.ru_maxrss);",
          "238:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c59136498547fefb69e3edaff4d949b0bf1113e",
      "candidate_info": {
        "commit_hash": "6c59136498547fefb69e3edaff4d949b0bf1113e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c59136498547fefb69e3edaff4d949b0bf1113e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix a minor typo in a comment.  No changes to code.\n\nFossilOrigin-Name: 95209072176ff21a91e96d5bd014b35ef100da2b0b93958baf6df4294a8daa85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af53c41a127c314c0608f3fd016d3a26896783745e46cd180976a188400cdb75",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c"
        ]
      }
    },
    {
      "candidate_hash": "55f66b341a55f418fac2e6ce4554dc9702309616",
      "candidate_info": {
        "commit_hash": "55f66b341a55f418fac2e6ce4554dc9702309616",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55f66b341a55f418fac2e6ce4554dc9702309616",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/backup.c",
          "src/btree.c",
          "src/build.c",
          "src/fkey.c",
          "src/parse.y",
          "src/pcache.c",
          "src/pcache1.c",
          "src/select.c",
          "src/trigger.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/wal.c",
          "src/where.c",
          "src/window.c",
          "tool/lempar.c"
        ],
        "message": "Add new assert() statements in an attempt to help static analyzers avoid false-positives.\n\nFossilOrigin-Name: 9e66458592d40fbd96ea5f21339573110ca1cfe328238a020c9420a87d35dd72",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/backup.c||src/backup.c",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "src/fkey.c||src/fkey.c",
          "src/parse.y||src/parse.y",
          "src/pcache.c||src/pcache.c",
          "src/pcache1.c||src/pcache1.c",
          "src/select.c||src/select.c",
          "src/trigger.c||src/trigger.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/wal.c||src/wal.c",
          "src/where.c||src/where.c",
          "src/window.c||src/window.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/vdbeaux.c||src/vdbeaux.c",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 22a7c15b262376fb0ce4dd3d044373380d86c5ccd96e2f24576cf04318597c33",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619:   }",
          "620:   if( p->isAttached ){",
          "621:     pp = sqlite3PagerBackupPtr(sqlite3BtreePager(p->pSrc));",
          "622:     while( *pp!=p ){",
          "623:       pp = &(*pp)->pNext;",
          "624:     }",
          "626:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "622:     assert( pp!=0 );",
          "625:       assert( pp!=0 );",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7962:   ));",
          "7964:   assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "7965:   put4byte(pRight, apNew[nNew-1]->pgno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7965:   assert( nNew>=1 && nNew<=ArraySize(apNew) );",
          "7966:   assert( apNew[nNew-1]!=0 );",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3632:       if( pStart ){",
          "3633:         int n = (int)(pParse->sLastToken.z - pName->z) + pParse->sLastToken.n;",
          "3634:         if( pName->z[n-1]==';' ) n--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3632:       assert( pName!=0 || pStart==0 );",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1332:       return 0;",
          "1333:     }",
          "1334:     assert( pStep!=0 );",
          "1336:     switch( action ){",
          "1337:       case OE_Restrict:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1335:     assert( pTrigger!=0 );",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:   static void parserDoubleLinkSelect(Parse *pParse, Select *p){",
          "461:     if( p->pPrior ){",
          "462:       Select *pNext = 0, *pLoop;",
          "463:       int mxSelect, cnt = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:     assert( p!=0 );",
          "",
          "---------------"
        ],
        "src/pcache.c||src/pcache.c": [
          "File: src/pcache.c -> src/pcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:     sqlite3PCacheSetDefault();",
          "265:   }",
          "266:   return sqlite3GlobalConfig.pcache2.xInit(sqlite3GlobalConfig.pcache2.pArg);",
          "267: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     assert( sqlite3GlobalConfig.pcache2.xInit!=0 );",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:   assert( sqlite3_mutex_held(pCache->pGroup->mutex) );",
          "426:   if( pCache->pFree || (pCache->nPage==0 && pcache1InitBulk(pCache)) ){",
          "427:     p = pCache->pFree;",
          "428:     pCache->pFree = p->pNext;",
          "429:     p->pNext = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:     assert( pCache->pFree!=0 );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3949:   for(pParent=p; pParent; pParent=pParent->pPrior, pSub=pSub->pPrior){",
          "3950:     int nSubSrc;",
          "3951:     u8 jointype = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3952:     assert( pSub!=0 );",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:     Trigger *pLink = pTrig;",
          "341:     Hash *pHash = &db->aDb[iDb].pSchema->trigHash;",
          "342:     assert( sqlite3SchemaMutexHeld(db, iDb, 0) );",
          "343:     pTrig = sqlite3HashInsert(pHash, zName, pTrig);",
          "344:     if( pTrig ){",
          "345:       sqlite3OomFault(db);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:     assert( pLink!=0 );",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1908:       int j;",
          "1909:       i -= p->nOp;",
          "1910:       for(j=0; i>=apSub[j]->nOp; j++){",
          "1911:         i -= apSub[j]->nOp;",
          "1912:       }",
          "1913:       pOp = &apSub[j]->aOp[i];",
          "1914:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1910:       assert( apSub!=0 );",
          "1911:       assert( nSub>0 );",
          "1914:         assert( i<apSub[j]->nOp || j+1<nSub );",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1728:       rc = vdbeSorterListToPMA(&pSorter->aTask[nWorker], &pSorter->list);",
          "1729:     }else{",
          "1734:       assert( pTask->pThread==0 && pTask->bDone==0 );",
          "1735:       assert( pTask->list.pList==0 );",
          "1736:       assert( pTask->list.aMemory==0 || pSorter->list.aMemory!=0 );",
          "1738:       pSorter->iPrev = (u8)(pTask - pSorter->aTask);",
          "1739:       pTask->list = pSorter->list;",
          "1740:       pSorter->list.pList = 0;",
          "",
          "[Removed Lines]",
          "1731:       u8 *aMem = pTask->list.aMemory;",
          "1732:       void *pCtx = (void*)pTask;",
          "",
          "[Added Lines]",
          "1731:       u8 *aMem;",
          "1732:       void *pCtx;",
          "1734:       assert( pTask!=0 );",
          "1739:       aMem = pTask->list.aMemory;",
          "1740:       pCtx = (void*)pTask;",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         if( rc ) return rc;",
          "3479:         iOffset += szFrame;",
          "3480:         nExtra++;",
          "3481:       }",
          "3482:     }",
          "3483:     if( bSync ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3481:         assert( pLast!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3510:     iFrame++;",
          "3511:     rc = walIndexAppend(pWal, iFrame, p->pgno);",
          "3512:   }",
          "3513:   while( rc==SQLITE_OK && nExtra>0 ){",
          "3514:     iFrame++;",
          "3515:     nExtra--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3514:   assert( pLast!=0 || nExtra==0 );",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2271:   assert( (pLoop->wsFlags & WHERE_AUTO_INDEX)==0 );",
          "2272:   for(i=pWC->nTerm, pTerm=pWC->a; i>0; i--, pTerm++){",
          "2273:     if( (pTerm->wtFlags & TERM_VIRTUAL)!=0 ) break;",
          "2274:     if( (pTerm->prereqAll & pLoop->maskSelf)==0 ) continue;",
          "2275:     if( (pTerm->prereqAll & notAllowed)!=0 ) continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2273:     assert( pTerm!=0 );",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "748: static int selectWindowRewriteExprCb(Walker *pWalker, Expr *pExpr){",
          "749:   struct WindowRewrite *p = pWalker->u.pRewrite;",
          "750:   Parse *pParse = pWalker->pParse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751:   assert( p!=0 );",
          "752:   assert( p->pWin!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "847:   Walker sWalker;",
          "848:   WindowRewrite sRewrite;",
          "850:   memset(&sWalker, 0, sizeof(Walker));",
          "851:   memset(&sRewrite, 0, sizeof(WindowRewrite));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:   assert( pWin!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1567:   int lblNext;",
          "1568:   int lblBrk;",
          "1569:   int addrNext;",
          "1572:   nPeer = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1574:   lblNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "1570:   int csr = pMWin->csrApp;",
          "",
          "[Added Lines]",
          "1573:   int csr;",
          "1575:   assert( pMWin!=0 );",
          "1576:   csr = pMWin->csrApp;",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:       return yy_default[stateno];",
          "569:     }else{",
          "570:       return yy_action[i];",
          "571:     }",
          "572:   }while(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:       assert( i>=0 && i<sizeof(yy_action)/sizeof(yy_action[0]) );",
          "",
          "---------------"
        ]
      }
    }
  ]
}