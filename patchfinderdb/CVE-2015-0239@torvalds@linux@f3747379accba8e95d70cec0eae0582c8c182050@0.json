{
  "cve_id": "CVE-2015-0239",
  "cve_desc": "The em_sysenter function in arch/x86/kvm/emulate.c in the Linux kernel before 3.18.5, when the guest OS lacks SYSENTER MSR initialization, allows guest OS users to gain guest OS privileges or cause a denial of service (guest OS crash) by triggering use of a 16-bit code segment for emulation of a SYSENTER instruction.",
  "repo": "torvalds/linux",
  "patch_hash": "f3747379accba8e95d70cec0eae0582c8c182050",
  "patch_info": {
    "commit_hash": "f3747379accba8e95d70cec0eae0582c8c182050",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f3747379accba8e95d70cec0eae0582c8c182050",
    "files": [
      "arch/x86/kvm/emulate.c"
    ],
    "message": "KVM: x86: SYSENTER emulation is broken\n\nSYSENTER emulation is broken in several ways:\n1. It misses the case of 16-bit code segments completely (CVE-2015-0239).\n2. MSR_IA32_SYSENTER_CS is checked in 64-bit mode incorrectly (bits 0 and 1 can\n   still be set without causing #GP).\n3. MSR_IA32_SYSENTER_EIP and MSR_IA32_SYSENTER_ESP are not masked in\n   legacy-mode.\n4. There is some unneeded code.\n\nFix it.\n\nCc: stable@vger.linux.org\nSigned-off-by: Nadav Amit <namit@cs.technion.ac.il>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c": [
      "File: arch/x86/kvm/emulate.c -> arch/x86/kvm/emulate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2352:      && !vendor_intel(ctxt))",
      "2353:   return emulate_ud(ctxt);",
      "",
      "[Removed Lines]",
      "2351:  if ((ctxt->mode == X86EMUL_MODE_PROT32) && (efer & EFER_LMA)",
      "",
      "[Added Lines]",
      "2351:  if ((ctxt->mode != X86EMUL_MODE_PROT64) && (efer & EFER_LMA)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2359:  setup_syscalls_segments(ctxt, &cs, &ss);",
      "2361:  ops->get_msr(ctxt, MSR_IA32_SYSENTER_CS, &msr_data);",
      "2375:  ctxt->eflags &= ~(EFLG_VM | EFLG_IF);",
      "2378:  ss_sel = cs_sel + 8;",
      "2381:   cs.d = 0;",
      "2382:   cs.l = 1;",
      "2383:  }",
      "",
      "[Removed Lines]",
      "2362:  switch (ctxt->mode) {",
      "2363:  case X86EMUL_MODE_PROT32:",
      "2364:   if ((msr_data & 0xfffc) == 0x0)",
      "2365:    return emulate_gp(ctxt, 0);",
      "2366:   break;",
      "2367:  case X86EMUL_MODE_PROT64:",
      "2368:   if (msr_data == 0x0)",
      "2369:    return emulate_gp(ctxt, 0);",
      "2370:   break;",
      "2371:  default:",
      "2372:   break;",
      "2373:  }",
      "2376:  cs_sel = (u16)msr_data;",
      "2377:  cs_sel &= ~SELECTOR_RPL_MASK;",
      "2379:  ss_sel &= ~SELECTOR_RPL_MASK;",
      "2380:  if (ctxt->mode == X86EMUL_MODE_PROT64 || (efer & EFER_LMA)) {",
      "",
      "[Added Lines]",
      "2362:  if ((msr_data & 0xfffc) == 0x0)",
      "2363:   return emulate_gp(ctxt, 0);",
      "2366:  cs_sel = (u16)msr_data & ~SELECTOR_RPL_MASK;",
      "2368:  if (efer & EFER_LMA) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2386:  ops->set_segment(ctxt, ss_sel, &ss, 0, VCPU_SREG_SS);",
      "2388:  ops->get_msr(ctxt, MSR_IA32_SYSENTER_EIP, &msr_data);",
      "2391:  ops->get_msr(ctxt, MSR_IA32_SYSENTER_ESP, &msr_data);",
      "2394:  return X86EMUL_CONTINUE;",
      "2395: }",
      "",
      "[Removed Lines]",
      "2389:  ctxt->_eip = msr_data;",
      "",
      "[Added Lines]",
      "2377:  ctxt->_eip = (efer & EFER_LMA) ? msr_data : (u32)msr_data;",
      "2381:              (u32)msr_data;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c6cb69b8e974049cca2cc4480052fb9e7df767b",
      "candidate_info": {
        "commit_hash": "6c6cb69b8e974049cca2cc4480052fb9e7df767b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6c6cb69b8e974049cca2cc4480052fb9e7df767b",
        "files": [
          "arch/x86/kvm/emulate.c"
        ],
        "message": "KVM: x86: Cleanup of rflags.rf cleaning\n\nRFLAGS.RF was cleaned in several functions (e.g., syscall) in the x86 emulator.\nNow that we clear it before the execution of an instruction in the emulator, we\ncan remove the specific cleanup of RFLAGS.RF.\n\nSigned-off-by: Nadav Amit <namit@cs.technion.ac.il>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
          ],
          "candidate": [
            "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c": [
          "File: arch/x86/kvm/emulate.c -> arch/x86/kvm/emulate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2219:   ctxt->_eip = msr_data;",
          "2221:   ops->get_msr(ctxt, MSR_SYSCALL_MASK, &msr_data);",
          "2223: #endif",
          "2224:  } else {",
          "2226:   ops->get_msr(ctxt, MSR_STAR, &msr_data);",
          "2227:   ctxt->_eip = (u32)msr_data;",
          "2230:  }",
          "2232:  return X86EMUL_CONTINUE;",
          "",
          "[Removed Lines]",
          "2222:   ctxt->eflags &= ~(msr_data | EFLG_RF);",
          "2229:   ctxt->eflags &= ~(EFLG_VM | EFLG_IF | EFLG_RF);",
          "",
          "[Added Lines]",
          "2222:   ctxt->eflags &= ~msr_data;",
          "2229:   ctxt->eflags &= ~(EFLG_VM | EFLG_IF);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2275:   break;",
          "2276:  }",
          "2279:  cs_sel = (u16)msr_data;",
          "2280:  cs_sel &= ~SELECTOR_RPL_MASK;",
          "2281:  ss_sel = cs_sel + 8;",
          "",
          "[Removed Lines]",
          "2278:  ctxt->eflags &= ~(EFLG_VM | EFLG_IF | EFLG_RF);",
          "",
          "[Added Lines]",
          "2278:  ctxt->eflags &= ~(EFLG_VM | EFLG_IF);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b32a99180027ec980af971d548781eac1f6bb9b5",
      "candidate_info": {
        "commit_hash": "b32a99180027ec980af971d548781eac1f6bb9b5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b32a99180027ec980af971d548781eac1f6bb9b5",
        "files": [
          "arch/x86/include/asm/kvm_host.h",
          "arch/x86/kvm/emulate.c",
          "arch/x86/kvm/vmx.c"
        ],
        "message": "KVM: x86: Remove redundant definitions\n\nSome constants are redfined in emulate.c. Avoid it.\n\ns/SELECTOR_RPL_MASK/SEGMENT_RPL_MASK\ns/SELECTOR_TI_MASK/SEGMENT_TI_MASK\n\nNo functional change.\n\nSigned-off-by: Nadav Amit <namit@cs.technion.ac.il>\nMessage-Id: <1427635984-8113-3-git-send-email-namit@cs.technion.ac.il>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "arch/x86/include/asm/kvm_host.h||arch/x86/include/asm/kvm_host.h",
          "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c",
          "arch/x86/kvm/vmx.c||arch/x86/kvm/vmx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
          ],
          "candidate": [
            "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/kvm_host.h||arch/x86/include/asm/kvm_host.h": [
          "File: arch/x86/include/asm/kvm_host.h -> arch/x86/include/asm/kvm_host.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   (base_gfn >> KVM_HPAGE_GFN_SHIFT(level));",
          "82: }",
          "87: #define KVM_PERMILLE_MMU_PAGES 20",
          "88: #define KVM_MIN_ALLOC_MMU_PAGES 64",
          "89: #define KVM_MMU_HASH_SHIFT 10",
          "",
          "[Removed Lines]",
          "84: #define SELECTOR_TI_MASK (1 << 2)",
          "85: #define SELECTOR_RPL_MASK 0x03",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c": [
          "File: arch/x86/kvm/emulate.c -> arch/x86/kvm/emulate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2435:   return emulate_gp(ctxt, 0);",
          "2437:  ctxt->eflags &= ~(X86_EFLAGS_VM | X86_EFLAGS_IF);",
          "2439:  ss_sel = cs_sel + 8;",
          "2440:  if (efer & EFER_LMA) {",
          "2441:   cs.d = 0;",
          "",
          "[Removed Lines]",
          "2438:  cs_sel = (u16)msr_data & ~SELECTOR_RPL_MASK;",
          "",
          "[Added Lines]",
          "2438:  cs_sel = (u16)msr_data & ~SEGMENT_RPL_MASK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2502:    return emulate_gp(ctxt, 0);",
          "2503:   break;",
          "2504:  }",
          "2508:  ops->set_segment(ctxt, cs_sel, &cs, 0, VCPU_SREG_CS);",
          "2509:  ops->set_segment(ctxt, ss_sel, &ss, 0, VCPU_SREG_SS);",
          "",
          "[Removed Lines]",
          "2505:  cs_sel |= SELECTOR_RPL_MASK;",
          "2506:  ss_sel |= SELECTOR_RPL_MASK;",
          "",
          "[Added Lines]",
          "2505:  cs_sel |= SEGMENT_RPL_MASK;",
          "2506:  ss_sel |= SEGMENT_RPL_MASK;",
          "",
          "---------------"
        ],
        "arch/x86/kvm/vmx.c||arch/x86/kvm/vmx.c": [
          "File: arch/x86/kvm/vmx.c -> arch/x86/kvm/vmx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3265:   if (seg == VCPU_SREG_CS || seg == VCPU_SREG_SS)",
          "3268:   save->s = 1;",
          "3269:  }",
          "3270:  vmx_set_segment(vcpu, save, seg);",
          "",
          "[Removed Lines]",
          "3266:    save->selector &= ~SELECTOR_RPL_MASK;",
          "3267:   save->dpl = save->selector & SELECTOR_RPL_MASK;",
          "",
          "[Added Lines]",
          "3266:    save->selector &= ~SEGMENT_RPL_MASK;",
          "3267:   save->dpl = save->selector & SEGMENT_RPL_MASK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3837:  unsigned int cs_rpl;",
          "3839:  vmx_get_segment(vcpu, &cs, VCPU_SREG_CS);",
          "3842:  if (cs.unusable)",
          "3843:   return false;",
          "",
          "[Removed Lines]",
          "3840:  cs_rpl = cs.selector & SELECTOR_RPL_MASK;",
          "",
          "[Added Lines]",
          "3840:  cs_rpl = cs.selector & SEGMENT_RPL_MASK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3865:  unsigned int ss_rpl;",
          "3867:  vmx_get_segment(vcpu, &ss, VCPU_SREG_SS);",
          "3870:  if (ss.unusable)",
          "3871:   return true;",
          "",
          "[Removed Lines]",
          "3868:  ss_rpl = ss.selector & SELECTOR_RPL_MASK;",
          "",
          "[Added Lines]",
          "3868:  ss_rpl = ss.selector & SEGMENT_RPL_MASK;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3887:  unsigned int rpl;",
          "3889:  vmx_get_segment(vcpu, &var, seg);",
          "3892:  if (var.unusable)",
          "3893:   return true;",
          "",
          "[Removed Lines]",
          "3890:  rpl = var.selector & SELECTOR_RPL_MASK;",
          "",
          "[Added Lines]",
          "3890:  rpl = var.selector & SEGMENT_RPL_MASK;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3949:  vmx_get_segment(vcpu, &cs, VCPU_SREG_CS);",
          "3950:  vmx_get_segment(vcpu, &ss, VCPU_SREG_SS);",
          "3954: }",
          "",
          "[Removed Lines]",
          "3952:  return ((cs.selector & SELECTOR_RPL_MASK) ==",
          "3953:    (ss.selector & SELECTOR_RPL_MASK));",
          "",
          "[Added Lines]",
          "3952:  return ((cs.selector & SEGMENT_RPL_MASK) ==",
          "3953:    (ss.selector & SEGMENT_RPL_MASK));",
          "",
          "---------------"
        ]
      }
    }
  ]
}