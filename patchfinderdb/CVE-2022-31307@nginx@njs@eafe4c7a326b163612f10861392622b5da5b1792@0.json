{
  "cve_id": "CVE-2022-31307",
  "cve_desc": "Nginx NJS v0.7.2 was discovered to contain a segmentation violation in the function njs_string_offset at src/njs_string.c.",
  "repo": "nginx/njs",
  "patch_hash": "eafe4c7a326b163612f10861392622b5da5b1792",
  "patch_info": {
    "commit_hash": "eafe4c7a326b163612f10861392622b5da5b1792",
    "repo": "nginx/njs",
    "commit_url": "https://github.com/nginx/njs/commit/eafe4c7a326b163612f10861392622b5da5b1792",
    "files": [
      "src/njs_iterator.c",
      "src/test/njs_unit_test.c"
    ],
    "message": "Fixed Array.prototype.lastIndexOf() with unicode string as \"this\".\n\nPreviously, when lastIndexOf() was called with unicode string as \"this\"\nargument and a negative \"fromIndex\" argument null-pointer dererence\nmight occur because njs_string_offset() was called with invalid index\nvalue whereas njs_string_offset() should always be called with valid\nindex argument.\n\nThe fix is to verify that from index is valid.\n\nThis closes #482 issue on Github.",
    "before_after_code_files": [
      "src/njs_iterator.c||src/njs_iterator.c",
      "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
    ]
  },
  "patch_diff": {
    "src/njs_iterator.c||src/njs_iterator.c": [
      "File: src/njs_iterator.c -> src/njs_iterator.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "560:         } else {",
      "566:             i = from + 1;",
      "568:             while (i-- > to) {",
      "569:                 pos = njs_utf8_prev(p);",
      "",
      "[Removed Lines]",
      "563:             p = njs_string_offset(string_prop.start, end, from);",
      "564:             p = njs_utf8_next(p, end);",
      "",
      "[Added Lines]",
      "563:             p = NULL;",
      "566:             if (i > to) {",
      "567:                 p = njs_string_offset(string_prop.start, end, from);",
      "568:                 p = njs_utf8_next(p, end);",
      "569:             }",
      "",
      "---------------"
    ],
    "src/test/njs_unit_test.c||src/test/njs_unit_test.c": [
      "File: src/test/njs_unit_test.c -> src/test/njs_unit_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5103:     { njs_str(\"Array.prototype.lastIndexOf.call({0:'undefined', length:0}, 'undefined')\"),",
      "5104:       njs_str(\"-1\") },",
      "5106:     { njs_str(\"[''].lastIndexOf.call('00000000000000000000000000000\u043000')\"),",
      "5107:       njs_str(\"-1\") },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5106:     { njs_str(\"[1,0,-1,-2].map(v => Array.prototype.lastIndexOf.call('\u0424', '\u0424', v))\"),",
      "5107:       njs_str(\"0,0,0,-1\") },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea0a09cd4400ab8073e48cc490c51939019f5305",
      "candidate_info": {
        "commit_hash": "ea0a09cd4400ab8073e48cc490c51939019f5305",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/ea0a09cd4400ab8073e48cc490c51939019f5305",
        "files": [
          "src/njs_iterator.c",
          "src/njs_json.c",
          "src/njs_parser.c",
          "src/njs_regexp.c",
          "src/njs_string.c",
          "src/njs_string.h"
        ],
        "message": "Introduced njs_string_offset() which support any string.",
        "before_after_code_files": [
          "src/njs_iterator.c||src/njs_iterator.c",
          "src/njs_json.c||src/njs_json.c",
          "src/njs_parser.c||src/njs_parser.c",
          "src/njs_regexp.c||src/njs_regexp.c",
          "src/njs_string.c||src/njs_string.c",
          "src/njs_string.h||src/njs_string.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_iterator.c||src/njs_iterator.c"
          ],
          "candidate": [
            "src/njs_iterator.c||src/njs_iterator.c"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_iterator.c||src/njs_iterator.c": [
          "File: src/njs_iterator.c -> src/njs_iterator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "558:             i = from + 1;",
          "560:             if (i > to) {",
          "562:                 p = njs_utf8_next(p, end);",
          "563:             }",
          "",
          "[Removed Lines]",
          "561:                 p = njs_string_offset(string_prop.start, end, from);",
          "",
          "[Added Lines]",
          "561:                 p = njs_string_utf8_offset(string_prop.start, end, from);",
          "",
          "---------------"
        ],
        "src/njs_json.c||src/njs_json.c": [
          "File: src/njs_json.c -> src/njs_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:             return NJS_ERROR;",
          "234:         }",
          "243:         stringify->space.start = prop.start;",
          "244:         stringify->space.length = p - prop.start;",
          "",
          "[Removed Lines]",
          "236:         if (length > 10) {",
          "237:             p = njs_string_offset(prop.start, prop.start + prop.size, 10);",
          "239:         } else {",
          "240:             p = prop.start + prop.size;",
          "241:         }",
          "",
          "[Added Lines]",
          "236:         p = njs_string_offset(&prop, njs_min(length, 10));",
          "",
          "---------------"
        ],
        "src/njs_parser.c||src/njs_parser.c": [
          "File: src/njs_parser.c -> src/njs_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8589:     njs_decode_utf8(&dst, &token->text);",
          "8591:     if (length > NJS_STRING_MAP_STRIDE && dst.length != length) {",
          "8593:     }",
          "8595:     return NJS_OK;",
          "",
          "[Removed Lines]",
          "8592:         njs_string_offset_map_init(value->long_string.data->start, dst.length);",
          "",
          "[Added Lines]",
          "8592:         njs_string_utf8_offset_map_init(value->long_string.data->start,",
          "8593:                                         dst.length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8833:     }",
          "8835:     if (length > NJS_STRING_MAP_STRIDE && length != size) {",
          "8837:     }",
          "8839:     return NJS_TOKEN_STRING;",
          "",
          "[Removed Lines]",
          "8836:         njs_string_offset_map_init(start, size);",
          "",
          "[Added Lines]",
          "8837:         njs_string_utf8_offset_map_init(start, size);",
          "",
          "---------------"
        ],
        "src/njs_regexp.c||src/njs_regexp.c": [
          "File: src/njs_regexp.c -> src/njs_regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "891:         offset = last_index;",
          "893:     } else {",
          "897:     }",
          "899:     ret = njs_regexp_match(vm, &pattern->regex[type], string.start, offset,",
          "",
          "[Removed Lines]",
          "895:         offset = njs_string_offset(string.start, string.start + string.size,",
          "896:                                    last_index) - string.start;",
          "",
          "[Added Lines]",
          "894:         offset = njs_string_utf8_offset(string.start,",
          "895:                                         string.start + string.size, last_index)",
          "896:                  - string.start;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1361:         if ((size_t) length != s.size) {",
          "1364:         }",
          "1366:         pos = njs_max(njs_min(pos, (int64_t) s.size), 0);",
          "",
          "[Removed Lines]",
          "1363:             pos = njs_string_offset(s.start, s.start + s.size, pos) - s.start;",
          "",
          "[Added Lines]",
          "1363:             pos = njs_string_utf8_offset(s.start, s.start + s.size, pos)",
          "1364:                   - s.start;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1643:         }",
          "1645:         if (utf8 == NJS_STRING_UTF8) {",
          "1649:         } else {",
          "1650:             start = &s.start[p];",
          "",
          "[Removed Lines]",
          "1646:             start = njs_string_offset(s.start, s.start + s.size, p);",
          "1647:             end = njs_string_offset(s.start, s.start + s.size, q);",
          "",
          "[Added Lines]",
          "1647:             start = njs_string_utf8_offset(s.start, s.start + s.size, p);",
          "1648:             end = njs_string_utf8_offset(s.start, s.start + s.size, q);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1691:     end = &s.start[s.size];",
          "1693:     if (utf8 == NJS_STRING_UTF8) {",
          "1695:                              : end;",
          "1697:     } else {",
          "",
          "[Removed Lines]",
          "1694:         start = (p < length) ? njs_string_offset(s.start, s.start + s.size, p)",
          "",
          "[Added Lines]",
          "1695:         start = (p < length) ? njs_string_utf8_offset(s.start, s.start + s.size,",
          "1696:                                                       p)",
          "",
          "---------------"
        ],
        "src/njs_string.c||src/njs_string.c": [
          "File: src/njs_string.c -> src/njs_string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1147:             end = string.start + string.size;",
          "1151:             length = slice.length;",
          "",
          "[Removed Lines]",
          "1149:             s = njs_string_offset(string.start, end, slice.start);",
          "",
          "[Added Lines]",
          "1149:             s = njs_string_utf8_offset(string.start, end, slice.start);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1503:         end = start + string->size;",
          "1505:         if (slice->start < slice->string_length) {",
          "1509:             p = start;",
          "",
          "[Removed Lines]",
          "1506:             start = njs_string_offset(start, end, slice->start);",
          "",
          "[Added Lines]",
          "1506:             start = njs_string_utf8_offset(start, end, slice->start);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1584:     } else {",
          "1585:         njs_utf8_decode_init(&ctx);",
          "1588:         end = string.start + string.size;",
          "1590:         code = njs_utf8_decode(&ctx, &start, end);",
          "1591:     }",
          "",
          "[Removed Lines]",
          "1589:         start = njs_string_offset(string.start, end, index);",
          "",
          "[Added Lines]",
          "1588:         start = njs_string_utf8_offset(string.start, end, index);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2151:         } else {",
          "2155:             end -= search->size - 1;",
          "2157:             while (p < end) {",
          "",
          "[Removed Lines]",
          "2154:             p = njs_string_offset(string->start, end, index);",
          "",
          "[Added Lines]",
          "2153:             p = njs_string_utf8_offset(string->start, end, index);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2296:             goto done;",
          "2297:         }",
          "2301:         for (; p >= string.start; p = njs_utf8_prev(p)) {",
          "2302:             if ((p + s.size) <= end && memcmp(p, s.start, s.size) == 0) {",
          "",
          "[Removed Lines]",
          "2299:         p = njs_string_offset(string.start, end, index);",
          "",
          "[Added Lines]",
          "2298:         p = njs_string_utf8_offset(string.start, end, index);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2377:         if (length - index >= search_length) {",
          "2378:             end = string.start + string.size;",
          "2389:             end -= search.size - 1;",
          "",
          "[Removed Lines]",
          "2380:             if (string.size == (size_t) length) {",
          "2382:                 p = string.start + index;",
          "2384:             } else {",
          "2386:                 p = njs_string_offset(string.start, end, index);",
          "2387:             }",
          "",
          "[Added Lines]",
          "2378:             p = njs_string_offset(&string, index);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2482:         }",
          "2484:         end = string.start + string.size;",
          "2495:         if ((size_t) (end - p) >= search.size",
          "2496:             && memcmp(p, search.start, search.size) == 0)",
          "",
          "[Removed Lines]",
          "2486:         if (string.size == (size_t) length) {",
          "2488:             p = string.start + index;",
          "2490:         } else {",
          "2492:             p = njs_string_offset(string.start, end, index);",
          "2493:         }",
          "",
          "[Added Lines]",
          "2476:         p = njs_string_offset(&string, index);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2518: const u_char *",
          "2520: {",
          "2521:     uint32_t    *map;",
          "2522:     njs_uint_t  skip;",
          "",
          "[Removed Lines]",
          "2519: njs_string_offset(const u_char *start, const u_char *end, size_t index)",
          "",
          "[Added Lines]",
          "2502: njs_string_utf8_offset(const u_char *start, const u_char *end, size_t index)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2525:         map = njs_string_map_start(end);",
          "2527:         if (map[0] == 0) {",
          "2529:         }",
          "2531:         start += map[index / NJS_STRING_MAP_STRIDE - 1];",
          "",
          "[Removed Lines]",
          "2528:             njs_string_offset_map_init(start, end - start);",
          "",
          "[Added Lines]",
          "2511:             njs_string_utf8_offset_map_init(start, end - start);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2562:         map = njs_string_map_start(end);",
          "2564:         if (map[0] == 0) {",
          "2566:         }",
          "2568:         while (index + NJS_STRING_MAP_STRIDE < string->length",
          "",
          "[Removed Lines]",
          "2565:             njs_string_offset_map_init(string->start, string->size);",
          "",
          "[Added Lines]",
          "2548:             njs_string_utf8_offset_map_init(string->start, string->size);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2589: void",
          "2591: {",
          "2592:     size_t        offset;",
          "2593:     uint32_t      *map;",
          "",
          "[Removed Lines]",
          "2590: njs_string_offset_map_init(const u_char *start, size_t size)",
          "",
          "[Added Lines]",
          "2573: njs_string_utf8_offset_map_init(const u_char *start, size_t size)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3055:         if (pad_string.size != (size_t) pad_length) {",
          "3057:             end = pad_string.start + pad_string.size;",
          "3060:             trunc = end - pad_string.start;",
          "3061:             padding = pad_string.size * n + trunc;",
          "",
          "[Removed Lines]",
          "3058:             end = njs_string_offset(pad_string.start, end, trunc);",
          "",
          "[Added Lines]",
          "3041:             end = njs_string_utf8_offset(pad_string.start, end, trunc);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3799:             }",
          "3800:         }",
          "3811:         (void) njs_string_prop(&ret_string, &retval);",
          "",
          "[Removed Lines]",
          "3802:         if (njs_is_byte_or_ascii_string(&string)) {",
          "3803:             p = string.start + pos;",
          "3805:         } else {",
          "3807:             p = njs_string_offset(string.start, string.start + string.size,",
          "3808:                                   pos);",
          "3809:         }",
          "",
          "[Added Lines]",
          "3785:         p = njs_string_offset(&string, pos);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3867:             p = string.start + pos;",
          "3869:         } else {",
          "3873:         }",
          "3875:         (void) njs_string_prop(&ret_string, &retval);",
          "",
          "[Removed Lines]",
          "3871:             p = njs_string_offset(string.start, string.start + string.size,",
          "3872:                                   pos);",
          "",
          "[Added Lines]",
          "3846:             p = njs_string_utf8_offset(string.start, string.start + string.size,",
          "3847:                                        pos);",
          "",
          "---------------"
        ],
        "src/njs_string.h||src/njs_string.h": [
          "File: src/njs_string.h -> src/njs_string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:     const njs_string_prop_t *string, const njs_slice_prop_t *slice);",
          "244: njs_int_t njs_string_slice(njs_vm_t *vm, njs_value_t *dst,",
          "245:     const njs_string_prop_t *string, const njs_slice_prop_t *slice);",
          "247:     size_t index);",
          "248: uint32_t njs_string_index(njs_string_prop_t *string, uint32_t offset);",
          "250: double njs_string_to_index(const njs_value_t *value);",
          "251: njs_int_t njs_string_encode_uri(njs_vm_t *vm, njs_value_t *args,",
          "252:     njs_uint_t nargs, njs_index_t component);",
          "",
          "[Removed Lines]",
          "246: const u_char *njs_string_offset(const u_char *start, const u_char *end,",
          "249: void njs_string_offset_map_init(const u_char *start, size_t size);",
          "",
          "[Added Lines]",
          "246: const u_char *njs_string_utf8_offset(const u_char *start, const u_char *end,",
          "249: void njs_string_utf8_offset_map_init(const u_char *start, size_t size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:     njs_value_t *groups, njs_value_t *replacement, njs_value_t *retval);",
          "269: extern const njs_object_init_t  njs_string_instance_init;",
          "270: extern const njs_object_type_init_t  njs_string_type_init;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: njs_inline const u_char *",
          "270: njs_string_offset(njs_string_prop_t *string, int64_t index)",
          "271: {",
          "272:     if (njs_is_byte_or_ascii_string(string)) {",
          "273:         return string->start + index;",
          "274:     }",
          "278:     return njs_string_utf8_offset(string->start, string->start + string->size,",
          "279:                                   index);",
          "280: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f67c50163566785b563d4c08a5c89a95eb2eb21d",
      "candidate_info": {
        "commit_hash": "f67c50163566785b563d4c08a5c89a95eb2eb21d",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/f67c50163566785b563d4c08a5c89a95eb2eb21d",
        "files": [
          "src/njs_array.c",
          "src/njs_array.h",
          "src/njs_iterator.c",
          "src/njs_iterator.h"
        ],
        "message": "Moving generic iterator code to a proper location.",
        "before_after_code_files": [
          "src/njs_array.c||src/njs_array.c",
          "src/njs_array.h||src/njs_array.h",
          "src/njs_iterator.c||src/njs_iterator.c",
          "src/njs_iterator.h||src/njs_iterator.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_iterator.c||src/njs_iterator.c"
          ],
          "candidate": [
            "src/njs_iterator.c||src/njs_iterator.c"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_array.c||src/njs_array.c": [
          "File: src/njs_array.c -> src/njs_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include <njs_main.h>",
          "14: #define njs_array_func(type)                                                  \\",
          "15:     ((type << 1) | NJS_ARRAY_FUNC)",
          "",
          "[Removed Lines]",
          "11: #define njs_fast_object(_sz)        ((_sz) <= NJS_ARRAY_FAST_OBJECT_LENGTH)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: } njs_array_iterator_arg_t;",
          "68: static njs_int_t njs_array_prototype_slice_copy(njs_vm_t *vm,",
          "69:     njs_value_t *this, int64_t start, int64_t length);",
          "",
          "[Removed Lines]",
          "52: typedef struct {",
          "53:     njs_function_t  *function;",
          "54:     njs_value_t     *argument;",
          "55:     njs_value_t     *value;",
          "57:     njs_array_t     *array;",
          "59:     int64_t        from;",
          "60:     int64_t        to;",
          "61: } njs_array_iterator_args_t;",
          "64: typedef njs_int_t (*njs_array_iterator_handler_t)(njs_vm_t *vm,",
          "65:     njs_array_iterator_args_t *args, njs_value_t *entry, int64_t n);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2067: njs_inline njs_int_t",
          "2069:     const njs_value_t *entry, uint32_t n)",
          "2070: {",
          "2071:     njs_value_t  arguments[3];",
          "",
          "[Removed Lines]",
          "2068: njs_array_iterator_call(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2049: njs_array_iterator_call(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2084: static njs_int_t",
          "2283:     njs_value_t *entry, int64_t n)",
          "2284: {",
          "2285:     njs_int_t  ret;",
          "",
          "[Removed Lines]",
          "2085: njs_array_object_handler(njs_vm_t *vm, njs_array_iterator_handler_t handler,",
          "2086:     njs_array_iterator_args_t *args, njs_value_t *key, int64_t i)",
          "2087: {",
          "2088:     njs_int_t    ret;",
          "2089:     njs_value_t  prop, *entry;",
          "2091:     if (key != NULL) {",
          "2092:         ret = njs_value_property(vm, args->value, key, &prop);",
          "2093:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "2094:             return ret;",
          "2095:         }",
          "2097:     } else {",
          "2098:         ret = njs_value_property_i64(vm, args->value, i, &prop);",
          "2099:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "2100:             return ret;",
          "2101:         }",
          "2102:     }",
          "2104:     entry = (ret == NJS_OK) ? &prop : njs_value_arg(&njs_value_invalid);",
          "2106:     ret = handler(vm, args, entry, i);",
          "2107:     if (njs_slow_path(ret != NJS_OK)) {",
          "2108:         if (ret == NJS_DONE) {",
          "2109:             return NJS_DONE;",
          "2110:         }",
          "2112:         return NJS_ERROR;",
          "2113:     }",
          "2115:     return ret;",
          "2116: }",
          "2119: njs_inline njs_int_t",
          "2120: njs_array_iterator(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "2121:     njs_array_iterator_handler_t handler)",
          "2122: {",
          "2123:     double             idx;",
          "2124:     int64_t            length, i, from, to;",
          "2125:     njs_int_t          ret;",
          "2126:     njs_array_t        *array, *keys;",
          "2127:     njs_value_t        *value, *entry, prop, character, string_obj;",
          "2128:     njs_object_t       *object;",
          "2129:     const u_char       *p, *end, *pos;",
          "2130:     njs_string_prop_t  string_prop;",
          "2132:     value = args->value;",
          "2133:     from = args->from;",
          "2134:     to = args->to;",
          "2136:     if (njs_is_array(value)) {",
          "2137:         array = njs_array(value);",
          "2139:         for (; from < to; from++) {",
          "2140:             if (njs_slow_path(!array->object.fast_array)) {",
          "2141:                 goto process_object;",
          "2142:             }",
          "2144:             if (njs_fast_path(from < array->length",
          "2145:                               && njs_is_valid(&array->start[from])))",
          "2146:             {",
          "2147:                 ret = handler(vm, args, &array->start[from], from);",
          "2149:             } else {",
          "2150:                 entry = njs_value_arg(&njs_value_invalid);",
          "2151:                 ret = njs_value_property_i64(vm, value, from, &prop);",
          "2152:                 if (njs_slow_path(ret != NJS_DECLINED)) {",
          "2153:                     if (ret == NJS_ERROR) {",
          "2154:                         return NJS_ERROR;",
          "2155:                     }",
          "2157:                     entry = &prop;",
          "2158:                 }",
          "2160:                 ret = handler(vm, args, entry, from);",
          "2161:             }",
          "2163:             if (njs_slow_path(ret != NJS_OK)) {",
          "2164:                 if (ret == NJS_DONE) {",
          "2165:                     return NJS_DONE;",
          "2166:                 }",
          "2168:                 return NJS_ERROR;",
          "2169:             }",
          "2170:         }",
          "2172:         return NJS_OK;",
          "2173:     }",
          "2175:     if (njs_is_string(value) || njs_is_object_string(value)) {",
          "2177:         if (njs_is_string(value)) {",
          "2178:             object = njs_object_value_alloc(vm, value, NJS_STRING);",
          "2179:             if (njs_slow_path(object == NULL)) {",
          "2180:                 return NJS_ERROR;",
          "2181:             }",
          "2183:             njs_set_type_object(&string_obj, object, NJS_OBJECT_STRING);",
          "2185:             args->value = &string_obj;",
          "2186:         }",
          "2187:         else {",
          "2188:             value = njs_object_value(value);",
          "2189:         }",
          "2191:         length = njs_string_prop(&string_prop, value);",
          "2193:         p = string_prop.start;",
          "2194:         end = p + string_prop.size;",
          "2196:         if ((size_t) length == string_prop.size) {",
          "2199:             for (i = from; i < to; i++) {",
          "2201:                 (void) njs_string_new(vm, &character, p + i, 1, 1);",
          "2203:                 ret = handler(vm, args, &character, i);",
          "2204:                 if (njs_slow_path(ret != NJS_OK)) {",
          "2205:                     if (ret == NJS_DONE) {",
          "2206:                         return NJS_DONE;",
          "2207:                     }",
          "2209:                     return NJS_ERROR;",
          "2210:                 }",
          "2211:             }",
          "2213:         } else {",
          "2216:             for (i = from; i < to; i++) {",
          "2217:                 pos = njs_utf8_next(p, end);",
          "2220:                 (void) njs_string_new(vm, &character, p, pos - p, 1);",
          "2222:                 ret = handler(vm, args, &character, i);",
          "2223:                 if (njs_slow_path(ret != NJS_OK)) {",
          "2224:                     if (ret == NJS_DONE) {",
          "2225:                         return NJS_DONE;",
          "2226:                     }",
          "2228:                     return NJS_ERROR;",
          "2229:                 }",
          "2231:                 p = pos;",
          "2232:             }",
          "2233:         }",
          "2235:         return NJS_OK;",
          "2236:     }",
          "2238:     if (!njs_is_object(value)) {",
          "2239:         return NJS_OK;",
          "2240:     }",
          "2242: process_object:",
          "2244:     if (!njs_fast_object(to - from)) {",
          "2245:         keys = njs_array_indices(vm, value);",
          "2246:         if (njs_slow_path(keys == NULL)) {",
          "2247:             return NJS_ERROR;",
          "2248:         }",
          "2250:         for (i = 0; i < keys->length; i++) {",
          "2251:             idx = njs_string_to_index(&keys->start[i]);",
          "2253:             if (idx < from || idx >= to) {",
          "2254:                 continue;",
          "2255:             }",
          "2257:             ret = njs_array_object_handler(vm, handler, args, &keys->start[i],",
          "2258:                                            idx);",
          "2259:             if (njs_slow_path(ret != NJS_OK)) {",
          "2260:                 njs_array_destroy(vm, keys);",
          "2261:                 return ret;",
          "2262:             }",
          "2263:         }",
          "2265:         njs_array_destroy(vm, keys);",
          "2267:         return NJS_OK;",
          "2268:     }",
          "2270:     for (i = from; i < to; i++) {",
          "2271:         ret = njs_array_object_handler(vm, handler, args, NULL, i);",
          "2272:         if (njs_slow_path(ret != NJS_OK)) {",
          "2273:             return ret;",
          "2274:         }",
          "2275:     }",
          "2277:     return NJS_OK;",
          "2278: }",
          "2281: static njs_int_t",
          "2282: njs_array_handler_every(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2066: njs_array_handler_every(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2303: static njs_int_t",
          "2305:     njs_value_t *entry, int64_t n)",
          "2306: {",
          "2307:     njs_int_t  ret;",
          "",
          "[Removed Lines]",
          "2304: njs_array_handler_some(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2088: njs_array_handler_some(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2325: static njs_int_t",
          "2327:     njs_value_t *entry, int64_t n)",
          "2328: {",
          "2329:     if (!njs_is_valid(entry)) {",
          "",
          "[Removed Lines]",
          "2326: njs_array_handler_includes(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2110: njs_array_handler_includes(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2343: static njs_int_t",
          "2345:     njs_value_t *entry, int64_t n)",
          "2346: {",
          "2347:     if (njs_values_strict_equal(args->argument, entry)) {",
          "",
          "[Removed Lines]",
          "2344: njs_array_handler_index_of(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2128: njs_array_handler_index_of(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2357: static njs_int_t",
          "2359:     njs_value_t *entry, int64_t n)",
          "2360: {",
          "2361:     if (njs_is_valid(entry)) {",
          "",
          "[Removed Lines]",
          "2358: njs_array_handler_for_each(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2142: njs_array_handler_for_each(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2369: static njs_int_t",
          "2371:     njs_value_t *entry, int64_t n)",
          "2372: {",
          "2373:     njs_int_t    ret;",
          "",
          "[Removed Lines]",
          "2370: njs_array_handler_find(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2154: njs_array_handler_find(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2398: static njs_int_t",
          "2400:     njs_value_t *entry, int64_t n)",
          "2401: {",
          "2402:     njs_int_t    ret;",
          "",
          "[Removed Lines]",
          "2399: njs_array_handler_find_index(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2183: njs_array_handler_find_index(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2427: static njs_int_t",
          "2429:     njs_value_t *entry, int64_t n)",
          "2430: {",
          "2431:     njs_int_t    ret;",
          "",
          "[Removed Lines]",
          "2428: njs_array_handler_reduce(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2212: njs_array_handler_reduce(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2459: static njs_int_t",
          "2461:     njs_value_t *entry, int64_t n)",
          "2462: {",
          "2463:     njs_int_t    ret;",
          "",
          "[Removed Lines]",
          "2460: njs_array_handler_filter(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2244: njs_array_handler_filter(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2486: static njs_int_t",
          "2488:     njs_value_t *entry, int64_t n)",
          "2489: {",
          "2490:     njs_int_t    ret;",
          "",
          "[Removed Lines]",
          "2487: njs_array_handler_map(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "",
          "[Added Lines]",
          "2271: njs_array_handler_map(njs_vm_t *vm, njs_iterator_args_t *args,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2526: njs_array_prototype_iterator(njs_vm_t *vm, njs_value_t *args, njs_uint_t nargs,",
          "2527:     njs_index_t magic)",
          "2528: {",
          "2536:     iargs.value = njs_argument(args, 0);",
          "",
          "[Removed Lines]",
          "2529:     int64_t                       i, length;",
          "2530:     njs_int_t                     ret;",
          "2531:     njs_array_t                   *array;",
          "2532:     njs_value_t                   accumulator;",
          "2533:     njs_array_iterator_args_t     iargs;",
          "2534:     njs_array_iterator_handler_t  handler;",
          "",
          "[Added Lines]",
          "2313:     int64_t                 i, length;",
          "2314:     njs_int_t               ret;",
          "2315:     njs_array_t             *array;",
          "2316:     njs_value_t             accumulator;",
          "2317:     njs_iterator_args_t     iargs;",
          "2318:     njs_iterator_handler_t  handler;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2652:         break;",
          "2653:     }",
          "2656:     if (njs_slow_path(ret == NJS_ERROR)) {",
          "2657:         return ret;",
          "2658:     }",
          "",
          "[Removed Lines]",
          "2655:     ret = njs_array_iterator(vm, &iargs, handler);",
          "",
          "[Added Lines]",
          "2439:     ret = njs_object_iterate(vm, &iargs, handler);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2704: }",
          "2884: static njs_int_t",
          "2885: njs_array_prototype_reverse_iterator(njs_vm_t *vm, njs_value_t *args,",
          "2886:     njs_uint_t nargs, njs_index_t type)",
          "2887: {",
          "2894:     iargs.value = njs_argument(args, 0);",
          "",
          "[Removed Lines]",
          "2707: njs_inline njs_int_t",
          "2708: njs_array_reverse_iterator(njs_vm_t *vm, njs_array_iterator_args_t *args,",
          "2709:     njs_array_iterator_handler_t handler)",
          "2710: {",
          "2711:     double             idx;",
          "2712:     int64_t            i, from, to, length;",
          "2713:     njs_int_t          ret;",
          "2714:     njs_array_t        *array, *keys;",
          "2715:     njs_value_t        *entry, *value, prop, character, string_obj;",
          "2716:     njs_object_t       *object;",
          "2717:     const u_char       *p, *end, *pos;",
          "2718:     njs_string_prop_t  string_prop;",
          "2720:     value = args->value;",
          "2721:     from = args->from;",
          "2722:     to = args->to;",
          "2724:     if (njs_is_array(value)) {",
          "2725:         array = njs_array(value);",
          "2727:         from += 1;",
          "2729:         while (from-- > to) {",
          "2730:             if (njs_slow_path(!array->object.fast_array)) {",
          "2731:                 goto process_object;",
          "2732:             }",
          "2734:             if (njs_fast_path(from < array->length",
          "2735:                               && njs_is_valid(&array->start[from])))",
          "2736:             {",
          "2737:                 ret = handler(vm, args, &array->start[from], from);",
          "2739:             } else {",
          "2740:                 entry = njs_value_arg(&njs_value_invalid);",
          "2741:                 ret = njs_value_property_i64(vm, value, from, &prop);",
          "2742:                 if (njs_slow_path(ret != NJS_DECLINED)) {",
          "2743:                     if (ret == NJS_ERROR) {",
          "2744:                         return NJS_ERROR;",
          "2745:                     }",
          "2747:                     entry = &prop;",
          "2748:                 }",
          "2750:                 ret = handler(vm, args, entry, from);",
          "2751:             }",
          "2753:             if (njs_slow_path(ret != NJS_OK)) {",
          "2754:                 if (ret == NJS_DONE) {",
          "2755:                     return NJS_DONE;",
          "2756:                 }",
          "2758:                 return NJS_ERROR;",
          "2759:             }",
          "2760:         }",
          "2762:         return NJS_OK;",
          "2763:     }",
          "2765:     if (njs_is_string(value) || njs_is_object_string(value)) {",
          "2767:         if (njs_is_string(value)) {",
          "2768:             object = njs_object_value_alloc(vm, value, NJS_STRING);",
          "2769:             if (njs_slow_path(object == NULL)) {",
          "2770:                 return NJS_ERROR;",
          "2771:             }",
          "2773:             njs_set_type_object(&string_obj, object, NJS_OBJECT_STRING);",
          "2775:             args->value = &string_obj;",
          "2776:         }",
          "2777:         else {",
          "2778:             value = njs_object_value(value);",
          "2779:         }",
          "2781:         length = njs_string_prop(&string_prop, value);",
          "2782:         end = string_prop.start + string_prop.size;",
          "2784:         if ((size_t) length == string_prop.size) {",
          "2787:             p = string_prop.start + from;",
          "2789:             i = from + 1;",
          "2791:             while (i-- > to) {",
          "2793:                 (void) njs_string_new(vm, &character, p, 1, 1);",
          "2795:                 ret = handler(vm, args, &character, i);",
          "2796:                 if (njs_slow_path(ret != NJS_OK)) {",
          "2797:                     if (ret == NJS_DONE) {",
          "2798:                         return NJS_DONE;",
          "2799:                     }",
          "2801:                     return NJS_ERROR;",
          "2802:                 }",
          "2804:                 p--;",
          "2805:             }",
          "2807:         } else {",
          "2810:             p = njs_string_offset(string_prop.start, end, from);",
          "2811:             p = njs_utf8_next(p, end);",
          "2813:             i = from + 1;",
          "2815:             while (i-- > to) {",
          "2816:                 pos = njs_utf8_prev(p);",
          "2819:                 (void) njs_string_new(vm, &character, pos, p - pos , 1);",
          "2821:                 ret = handler(vm, args, &character, i);",
          "2822:                 if (njs_slow_path(ret != NJS_OK)) {",
          "2823:                     if (ret == NJS_DONE) {",
          "2824:                         return NJS_DONE;",
          "2825:                     }",
          "2827:                     return NJS_ERROR;",
          "2828:                 }",
          "2830:                 p = pos;",
          "2831:             }",
          "2832:         }",
          "2834:         return NJS_OK;",
          "2835:     }",
          "2837:     if (!njs_is_object(value)) {",
          "2838:         return NJS_OK;",
          "2839:     }",
          "2841: process_object:",
          "2843:     if (!njs_fast_object(from - to)) {",
          "2844:         keys = njs_array_indices(vm, value);",
          "2845:         if (njs_slow_path(keys == NULL)) {",
          "2846:             return NJS_ERROR;",
          "2847:         }",
          "2849:         i = keys->length;",
          "2851:         while (i > 0) {",
          "2852:             idx = njs_string_to_index(&keys->start[--i]);",
          "2854:             if (idx < to || idx > from) {",
          "2855:                 continue;",
          "2856:             }",
          "2858:             ret = njs_array_object_handler(vm, handler, args, &keys->start[i],",
          "2859:                                            idx);",
          "2860:             if (njs_slow_path(ret != NJS_OK)) {",
          "2861:                 njs_array_destroy(vm, keys);",
          "2862:                 return ret;",
          "2863:             }",
          "2864:         }",
          "2866:         njs_array_destroy(vm, keys);",
          "2868:         return NJS_OK;",
          "2869:     }",
          "2871:     i = from + 1;",
          "2873:     while (i-- > to) {",
          "2874:         ret = njs_array_object_handler(vm, handler, args, NULL, i);",
          "2875:         if (njs_slow_path(ret != NJS_OK)) {",
          "2876:             return ret;",
          "2877:         }",
          "2878:     }",
          "2880:     return NJS_OK;",
          "2881: }",
          "2888:     int64_t                       from, length;",
          "2889:     njs_int_t                     ret;",
          "2890:     njs_value_t                   accumulator;",
          "2891:     njs_array_iterator_args_t     iargs;",
          "2892:     njs_array_iterator_handler_t  handler;",
          "",
          "[Added Lines]",
          "2495:     int64_t                 from, length;",
          "2496:     njs_int_t               ret;",
          "2497:     njs_value_t             accumulator;",
          "2498:     njs_iterator_args_t     iargs;",
          "2499:     njs_iterator_handler_t  handler;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2960:     iargs.from = from;",
          "2961:     iargs.to = 0;",
          "2964:     if (njs_fast_path(ret == NJS_ERROR)) {",
          "2965:         return NJS_ERROR;",
          "2966:     }",
          "",
          "[Removed Lines]",
          "2963:     ret = njs_array_reverse_iterator(vm, &iargs, handler);",
          "",
          "[Added Lines]",
          "2570:     ret = njs_object_iterate_reverse(vm, &iargs, handler);",
          "",
          "---------------"
        ],
        "src/njs_array.h||src/njs_array.h": [
          "File: src/njs_array.h -> src/njs_array.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #define NJS_ARRAY_LARGE_OBJECT_LENGTH  (32768)",
          "17: #define NJS_ARRAY_FLAT_MAX_LENGTH      (1048576)",
          "19: njs_array_t *njs_array_alloc(njs_vm_t *vm, njs_bool_t flat, uint64_t length,",
          "20:     uint32_t spare);",
          "21: void njs_array_destroy(njs_vm_t *vm, njs_array_t *array);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #define njs_fast_object(_sz)           ((_sz) <= NJS_ARRAY_FAST_OBJECT_LENGTH)",
          "",
          "---------------"
        ],
        "src/njs_iterator.c||src/njs_iterator.c": [
          "File: src/njs_iterator.c -> src/njs_iterator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static const njs_value_t  string_value = njs_string(\"value\");",
          "25: njs_int_t",
          "26: njs_array_iterator_create(njs_vm_t *vm, const njs_value_t *target,",
          "27:     njs_value_t *retval, njs_object_enum_t kind)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: static njs_int_t njs_iterator_object_handler(njs_vm_t *vm,",
          "26:     njs_iterator_handler_t handler, njs_iterator_args_t *args,",
          "27:     njs_value_t *key, int64_t i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:     .prototype_props = &njs_array_iterator_prototype_init,",
          "298:     .prototype_value = { .object = { .type = NJS_OBJECT } },",
          "299: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: njs_int_t",
          "308: njs_object_iterate(njs_vm_t *vm, njs_iterator_args_t *args,",
          "309:     njs_iterator_handler_t handler)",
          "310: {",
          "311:     double             idx;",
          "312:     int64_t            length, i, from, to;",
          "313:     njs_int_t          ret;",
          "314:     njs_array_t        *array, *keys;",
          "315:     njs_value_t        *value, *entry, prop, character, string_obj;",
          "316:     njs_object_t       *object;",
          "317:     const u_char       *p, *end, *pos;",
          "318:     njs_string_prop_t  string_prop;",
          "320:     value = args->value;",
          "321:     from = args->from;",
          "322:     to = args->to;",
          "324:     if (njs_is_array(value)) {",
          "325:         array = njs_array(value);",
          "327:         for (; from < to; from++) {",
          "328:             if (njs_slow_path(!array->object.fast_array)) {",
          "329:                 goto process_object;",
          "330:             }",
          "332:             if (njs_fast_path(from < array->length",
          "333:                               && njs_is_valid(&array->start[from])))",
          "334:             {",
          "335:                 ret = handler(vm, args, &array->start[from], from);",
          "337:             } else {",
          "338:                 entry = njs_value_arg(&njs_value_invalid);",
          "339:                 ret = njs_value_property_i64(vm, value, from, &prop);",
          "340:                 if (njs_slow_path(ret != NJS_DECLINED)) {",
          "341:                     if (ret == NJS_ERROR) {",
          "342:                         return NJS_ERROR;",
          "343:                     }",
          "345:                     entry = &prop;",
          "346:                 }",
          "348:                 ret = handler(vm, args, entry, from);",
          "349:             }",
          "351:             if (njs_slow_path(ret != NJS_OK)) {",
          "352:                 if (ret == NJS_DONE) {",
          "353:                     return NJS_DONE;",
          "354:                 }",
          "356:                 return NJS_ERROR;",
          "357:             }",
          "358:         }",
          "360:         return NJS_OK;",
          "361:     }",
          "363:     if (njs_is_string(value) || njs_is_object_string(value)) {",
          "365:         if (njs_is_string(value)) {",
          "366:             object = njs_object_value_alloc(vm, value, NJS_STRING);",
          "367:             if (njs_slow_path(object == NULL)) {",
          "368:                 return NJS_ERROR;",
          "369:             }",
          "371:             njs_set_type_object(&string_obj, object, NJS_OBJECT_STRING);",
          "373:             args->value = &string_obj;",
          "374:         }",
          "375:         else {",
          "376:             value = njs_object_value(value);",
          "377:         }",
          "379:         length = njs_string_prop(&string_prop, value);",
          "381:         p = string_prop.start;",
          "382:         end = p + string_prop.size;",
          "384:         if ((size_t) length == string_prop.size) {",
          "387:             for (i = from; i < to; i++) {",
          "389:                 (void) njs_string_new(vm, &character, p + i, 1, 1);",
          "391:                 ret = handler(vm, args, &character, i);",
          "392:                 if (njs_slow_path(ret != NJS_OK)) {",
          "393:                     if (ret == NJS_DONE) {",
          "394:                         return NJS_DONE;",
          "395:                     }",
          "397:                     return NJS_ERROR;",
          "398:                 }",
          "399:             }",
          "401:         } else {",
          "404:             for (i = from; i < to; i++) {",
          "405:                 pos = njs_utf8_next(p, end);",
          "408:                 (void) njs_string_new(vm, &character, p, pos - p, 1);",
          "410:                 ret = handler(vm, args, &character, i);",
          "411:                 if (njs_slow_path(ret != NJS_OK)) {",
          "412:                     if (ret == NJS_DONE) {",
          "413:                         return NJS_DONE;",
          "414:                     }",
          "416:                     return NJS_ERROR;",
          "417:                 }",
          "419:                 p = pos;",
          "420:             }",
          "421:         }",
          "423:         return NJS_OK;",
          "424:     }",
          "426:     if (!njs_is_object(value)) {",
          "427:         return NJS_OK;",
          "428:     }",
          "430: process_object:",
          "432:     if (!njs_fast_object(to - from)) {",
          "433:         keys = njs_array_indices(vm, value);",
          "434:         if (njs_slow_path(keys == NULL)) {",
          "435:             return NJS_ERROR;",
          "436:         }",
          "438:         for (i = 0; i < keys->length; i++) {",
          "439:             idx = njs_string_to_index(&keys->start[i]);",
          "441:             if (idx < from || idx >= to) {",
          "442:                 continue;",
          "443:             }",
          "445:             ret = njs_iterator_object_handler(vm, handler, args, &keys->start[i],",
          "446:                                            idx);",
          "447:             if (njs_slow_path(ret != NJS_OK)) {",
          "448:                 njs_array_destroy(vm, keys);",
          "449:                 return ret;",
          "450:             }",
          "451:         }",
          "453:         njs_array_destroy(vm, keys);",
          "455:         return NJS_OK;",
          "456:     }",
          "458:     for (i = from; i < to; i++) {",
          "459:         ret = njs_iterator_object_handler(vm, handler, args, NULL, i);",
          "460:         if (njs_slow_path(ret != NJS_OK)) {",
          "461:             return ret;",
          "462:         }",
          "463:     }",
          "465:     return NJS_OK;",
          "466: }",
          "469: njs_int_t",
          "470: njs_object_iterate_reverse(njs_vm_t *vm, njs_iterator_args_t *args,",
          "471:     njs_iterator_handler_t handler)",
          "472: {",
          "473:     double             idx;",
          "474:     int64_t            i, from, to, length;",
          "475:     njs_int_t          ret;",
          "476:     njs_array_t        *array, *keys;",
          "477:     njs_value_t        *entry, *value, prop, character, string_obj;",
          "478:     njs_object_t       *object;",
          "479:     const u_char       *p, *end, *pos;",
          "480:     njs_string_prop_t  string_prop;",
          "482:     value = args->value;",
          "483:     from = args->from;",
          "484:     to = args->to;",
          "486:     if (njs_is_array(value)) {",
          "487:         array = njs_array(value);",
          "489:         from += 1;",
          "491:         while (from-- > to) {",
          "492:             if (njs_slow_path(!array->object.fast_array)) {",
          "493:                 goto process_object;",
          "494:             }",
          "496:             if (njs_fast_path(from < array->length",
          "497:                               && njs_is_valid(&array->start[from])))",
          "498:             {",
          "499:                 ret = handler(vm, args, &array->start[from], from);",
          "501:             } else {",
          "502:                 entry = njs_value_arg(&njs_value_invalid);",
          "503:                 ret = njs_value_property_i64(vm, value, from, &prop);",
          "504:                 if (njs_slow_path(ret != NJS_DECLINED)) {",
          "505:                     if (ret == NJS_ERROR) {",
          "506:                         return NJS_ERROR;",
          "507:                     }",
          "509:                     entry = &prop;",
          "510:                 }",
          "512:                 ret = handler(vm, args, entry, from);",
          "513:             }",
          "515:             if (njs_slow_path(ret != NJS_OK)) {",
          "516:                 if (ret == NJS_DONE) {",
          "517:                     return NJS_DONE;",
          "518:                 }",
          "520:                 return NJS_ERROR;",
          "521:             }",
          "522:         }",
          "524:         return NJS_OK;",
          "525:     }",
          "527:     if (njs_is_string(value) || njs_is_object_string(value)) {",
          "529:         if (njs_is_string(value)) {",
          "530:             object = njs_object_value_alloc(vm, value, NJS_STRING);",
          "531:             if (njs_slow_path(object == NULL)) {",
          "532:                 return NJS_ERROR;",
          "533:             }",
          "535:             njs_set_type_object(&string_obj, object, NJS_OBJECT_STRING);",
          "537:             args->value = &string_obj;",
          "538:         }",
          "539:         else {",
          "540:             value = njs_object_value(value);",
          "541:         }",
          "543:         length = njs_string_prop(&string_prop, value);",
          "544:         end = string_prop.start + string_prop.size;",
          "546:         if ((size_t) length == string_prop.size) {",
          "549:             p = string_prop.start + from;",
          "551:             i = from + 1;",
          "553:             while (i-- > to) {",
          "555:                 (void) njs_string_new(vm, &character, p, 1, 1);",
          "557:                 ret = handler(vm, args, &character, i);",
          "558:                 if (njs_slow_path(ret != NJS_OK)) {",
          "559:                     if (ret == NJS_DONE) {",
          "560:                         return NJS_DONE;",
          "561:                     }",
          "563:                     return NJS_ERROR;",
          "564:                 }",
          "566:                 p--;",
          "567:             }",
          "569:         } else {",
          "572:             p = njs_string_offset(string_prop.start, end, from);",
          "573:             p = njs_utf8_next(p, end);",
          "575:             i = from + 1;",
          "577:             while (i-- > to) {",
          "578:                 pos = njs_utf8_prev(p);",
          "581:                 (void) njs_string_new(vm, &character, pos, p - pos , 1);",
          "583:                 ret = handler(vm, args, &character, i);",
          "584:                 if (njs_slow_path(ret != NJS_OK)) {",
          "585:                     if (ret == NJS_DONE) {",
          "586:                         return NJS_DONE;",
          "587:                     }",
          "589:                     return NJS_ERROR;",
          "590:                 }",
          "592:                 p = pos;",
          "593:             }",
          "594:         }",
          "596:         return NJS_OK;",
          "597:     }",
          "599:     if (!njs_is_object(value)) {",
          "600:         return NJS_OK;",
          "601:     }",
          "603: process_object:",
          "605:     if (!njs_fast_object(from - to)) {",
          "606:         keys = njs_array_indices(vm, value);",
          "607:         if (njs_slow_path(keys == NULL)) {",
          "608:             return NJS_ERROR;",
          "609:         }",
          "611:         i = keys->length;",
          "613:         while (i > 0) {",
          "614:             idx = njs_string_to_index(&keys->start[--i]);",
          "616:             if (idx < to || idx > from) {",
          "617:                 continue;",
          "618:             }",
          "620:             ret = njs_iterator_object_handler(vm, handler, args,",
          "621:                                               &keys->start[i], idx);",
          "622:             if (njs_slow_path(ret != NJS_OK)) {",
          "623:                 njs_array_destroy(vm, keys);",
          "624:                 return ret;",
          "625:             }",
          "626:         }",
          "628:         njs_array_destroy(vm, keys);",
          "630:         return NJS_OK;",
          "631:     }",
          "633:     i = from + 1;",
          "635:     while (i-- > to) {",
          "636:         ret = njs_iterator_object_handler(vm, handler, args, NULL, i);",
          "637:         if (njs_slow_path(ret != NJS_OK)) {",
          "638:             return ret;",
          "639:         }",
          "640:     }",
          "642:     return NJS_OK;",
          "643: }",
          "646: static njs_int_t",
          "647: njs_iterator_object_handler(njs_vm_t *vm, njs_iterator_handler_t handler,",
          "648:     njs_iterator_args_t *args, njs_value_t *key, int64_t i)",
          "649: {",
          "650:     njs_int_t    ret;",
          "651:     njs_value_t  prop, *entry;",
          "653:     if (key != NULL) {",
          "654:         ret = njs_value_property(vm, args->value, key, &prop);",
          "655:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "656:             return ret;",
          "657:         }",
          "659:     } else {",
          "660:         ret = njs_value_property_i64(vm, args->value, i, &prop);",
          "661:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "662:             return ret;",
          "663:         }",
          "664:     }",
          "666:     entry = (ret == NJS_OK) ? &prop : njs_value_arg(&njs_value_invalid);",
          "668:     ret = handler(vm, args, entry, i);",
          "669:     if (njs_slow_path(ret != NJS_OK)) {",
          "670:         if (ret == NJS_DONE) {",
          "671:             return NJS_DONE;",
          "672:         }",
          "674:         return NJS_ERROR;",
          "675:     }",
          "677:     return ret;",
          "678: }",
          "",
          "---------------"
        ],
        "src/njs_iterator.h||src/njs_iterator.h": [
          "File: src/njs_iterator.h -> src/njs_iterator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #define _NJS_ITERATOR_H_INCLUDED_",
          "11: njs_int_t njs_array_iterator_create(njs_vm_t *vm, const njs_value_t *src,",
          "12:     njs_value_t *dst, njs_object_enum_t kind);",
          "14: njs_int_t njs_array_iterator_next(njs_vm_t *vm, njs_value_t *iterator,",
          "15:     njs_value_t *retval);",
          "18: extern const njs_object_type_init_t  njs_iterator_type_init;",
          "19: extern const njs_object_type_init_t  njs_array_iterator_type_init;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: typedef struct {",
          "12:     njs_function_t  *function;",
          "13:     njs_value_t     *argument;",
          "14:     njs_value_t     *value;",
          "16:     njs_array_t     *array;",
          "18:     int64_t         from;",
          "19:     int64_t         to;",
          "20: } njs_iterator_args_t;",
          "23: typedef njs_int_t (*njs_iterator_handler_t)(njs_vm_t *vm,",
          "24:     njs_iterator_args_t *args, njs_value_t *entry, int64_t n);",
          "33: njs_int_t njs_object_iterate(njs_vm_t *vm, njs_iterator_args_t *args,",
          "34:     njs_iterator_handler_t handler);",
          "36: njs_int_t njs_object_iterate_reverse(njs_vm_t *vm, njs_iterator_args_t *args,",
          "37:     njs_iterator_handler_t handler);",
          "",
          "---------------"
        ]
      }
    }
  ]
}