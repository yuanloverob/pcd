{
  "cve_id": "CVE-2020-22873",
  "cve_desc": "Buffer overflow vulnerability in function NumberToPrecisionCmd in jsish before 3.0.7, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
  "patch_info": {
    "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
    "files": [
      "src/jsi.h",
      "src/jsiCmds.c",
      "src/jsiCode.c",
      "src/jsiEval.c",
      "src/jsiFilesys.c",
      "src/jsiFunc.c",
      "src/jsiHash.c",
      "src/jsiInterp.c",
      "src/jsiJSON.c",
      "src/jsiMySql.c",
      "src/jsiNumber.c",
      "src/jsiOptions.c",
      "src/jsiPstate.c",
      "src/jsiRegexp.c",
      "src/jsiSqlite.c",
      "src/jsiString.c",
      "src/jsiTree.c",
      "src/jsiUtils.c",
      "src/jsiValue.c",
      "src/jsiWebSocket.c"
    ],
    "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiCmds.c||src/jsiCmds.c",
      "src/jsiCode.c||src/jsiCode.c",
      "src/jsiEval.c||src/jsiEval.c",
      "src/jsiFilesys.c||src/jsiFilesys.c",
      "src/jsiFunc.c||src/jsiFunc.c",
      "src/jsiHash.c||src/jsiHash.c",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiJSON.c||src/jsiJSON.c",
      "src/jsiMySql.c||src/jsiMySql.c",
      "src/jsiNumber.c||src/jsiNumber.c",
      "src/jsiOptions.c||src/jsiOptions.c",
      "src/jsiPstate.c||src/jsiPstate.c",
      "src/jsiRegexp.c||src/jsiRegexp.c",
      "src/jsiSqlite.c||src/jsiSqlite.c",
      "src/jsiString.c||src/jsiString.c",
      "src/jsiTree.c||src/jsiTree.c",
      "src/jsiUtils.c||src/jsiUtils.c",
      "src/jsiValue.c||src/jsiValue.c",
      "src/jsiWebSocket.c||src/jsiWebSocket.c"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     JSI_BUFSIZ=8192",
      "",
      "[Removed Lines]",
      "216:     JSI_MAX_NUMBER_STRING=50,",
      "",
      "[Added Lines]",
      "216:     JSI_MAX_NUMBER_STRING=100,",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
      "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
      "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
      "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
      "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
      "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
      "",
      "[Removed Lines]",
      "848:         char buf[200];",
      "",
      "[Added Lines]",
      "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1192:     Jsi_Value *vres;",
      "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
      "1194:     Jsi_Value *nnv;",
      "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
      "",
      "[Removed Lines]",
      "1195:     char *val, nam[200];",
      "",
      "[Added Lines]",
      "1195:     char *val, nam[JSI_BUFSIZ/2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2700:     }",
      "2701:     if (bp.line<=0 && !bp.func)",
      "2702:         return Jsi_LogError(\"bad number\");",
      "2704:     bp.id = ++interp->debugOpts.breakIdx;",
      "2705:     bp.enabled = 1;",
      "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
      "",
      "[Removed Lines]",
      "2703:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2718:     if (interp->breakpointHash)",
      "2719:     {",
      "2720:         int num;",
      "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2723:             return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2721:         char nbuf[100];",
      "",
      "[Added Lines]",
      "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
      "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
      "2768:     int num;",
      "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2771:         return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2769:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
      "3801:     if (!val) goto bail;",
      "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
      "3804:         Jsi_Number n;",
      "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
      "3806:             goto bail;",
      "",
      "[Removed Lines]",
      "3803:         char buf[200];",
      "",
      "[Added Lines]",
      "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3953:         if (bv)",
      "3954:             interp->timesStart = now;",
      "3955:         else {",
      "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
      "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
      "3959:         }",
      "",
      "[Removed Lines]",
      "3956:             char buf[100];",
      "",
      "[Added Lines]",
      "3956:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiCode.c||src/jsiCode.c": [
      "File: src/jsiCode.c -> src/jsiCode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
      "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
      "438:     }",
      "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
      "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
      "",
      "[Removed Lines]",
      "439:     char nbuf[100];",
      "",
      "[Added Lines]",
      "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiEval.c||src/jsiEval.c": [
      "File: src/jsiEval.c -> src/jsiEval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: static const char *jsi_evalprint(Jsi_Value *v)",
      "289: {",
      "291:     if (!v)",
      "292:         return \"nil\";",
      "293:     if (v->vt == JSI_VT_NUMBER) {",
      "295:     } else if (v->vt == JSI_VT_BOOL) {",
      "297:     } else if (v->vt == JSI_VT_STRING) {",
      "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
      "301:     } else if (v->vt == JSI_VT_NULL) {",
      "303:     } else if (v->vt == JSI_VT_OBJECT) {",
      "305:     } else if (v->vt == JSI_VT_UNDEF) {",
      "307:     }",
      "308:     return buf;",
      "309: }",
      "",
      "[Removed Lines]",
      "290:     static char buf[100];",
      "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, 100, \"NULL\");",
      "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, 100, \"UNDEFINED\");",
      "",
      "[Added Lines]",
      "290:     static char buf[JSI_MAX_NUMBER_STRING];",
      "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, sizeof(buf), \"NULL\");",
      "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
      "404: {",
      "405:     int i;",
      "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
      "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
      "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
      "",
      "[Removed Lines]",
      "406:     char buf[200];",
      "",
      "[Added Lines]",
      "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1538:                     break;",
      "1539:                 }",
      "1540:                 int bval = 0;",
      "1542:                 Jsi_Value *vv;",
      "1543:                 Jsi_Obj *obj = v->d.obj;",
      "1544:                 if (!cp) {",
      "",
      "[Removed Lines]",
      "1541:                 char nbuf[100];",
      "",
      "[Added Lines]",
      "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2155:     Jsi_IncrRefCount(interp, fargs);",
      "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
      "2157:     Jsi_DecrRefCount(interp, fargs);",
      "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
      "2160:             Jsi_ValueMakeUndef(interp, vret);",
      "",
      "[Removed Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited) {",
      "",
      "[Added Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
      "",
      "---------------"
    ],
    "src/jsiFilesys.c||src/jsiFilesys.c": [
      "File: src/jsiFilesys.c -> src/jsiFilesys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
      "1179:         struct passwd pwd, *pw;",
      "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
      "1182:             str = pw->pw_dir;",
      "1183:     }",
      "",
      "[Removed Lines]",
      "1180:         char buf[20000];",
      "",
      "[Added Lines]",
      "1180:         char buf[JSI_BUFSIZ*3];",
      "",
      "---------------"
    ],
    "src/jsiFunc.c||src/jsiFunc.c": [
      "File: src/jsiFunc.c -> src/jsiFunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
      "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
      "191:     Jsi_RC rc = JSI_OK;",
      "193:     idxBuf[0] = 0;",
      "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
      "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "192:     char idxBuf[200];",
      "",
      "[Added Lines]",
      "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         Jsi_DString dStr = {};",
      "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
      "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
      "299:         idxBuf[0] = 0;",
      "300:         if (index>0)",
      "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "298:         char idxBuf[200];",
      "",
      "[Added Lines]",
      "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:     if (ss==NULL && spec == NULL)",
      "340:         return JSI_OK;",
      "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
      "343:     if (func->type == FC_BUILDIN) {",
      "344:         varargs =  (spec->maxArgs<0);",
      "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
      "",
      "[Removed Lines]",
      "342:     char nbuf[100];",
      "",
      "[Added Lines]",
      "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiHash.c||src/jsiHash.c": [
      "File: src/jsiHash.c -> src/jsiHash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     void *key = Jsi_HashKeyGet(hPtr);",
      "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "629: }",
      "",
      "[Removed Lines]",
      "626:     char nbuf[100];",
      "",
      "[Added Lines]",
      "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
      "702: {",
      "704:     Jsi_Interp* interp = NULL;",
      "705:     int argc = 0, first = 1;",
      "706:     char **argv = NULL;",
      "",
      "[Removed Lines]",
      "703:     int rc = 0;",
      "",
      "[Added Lines]",
      "703:     Jsi_RC rc = JSI_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "929:     }",
      "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
      "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
      "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
      "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
      "",
      "[Removed Lines]",
      "932:     if (rc == 0) {",
      "",
      "[Added Lines]",
      "932:     if (rc == JSI_OK) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "940:         }",
      "941:     } else {",
      "942:         if (!interp->parent && !interp->isHelp)",
      "944:         return jsi_DoExit(interp, 1);",
      "945:     }",
      "",
      "[Removed Lines]",
      "943:             fputs(\"ERROR\\n\", stderr);",
      "",
      "[Added Lines]",
      "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
      "",
      "---------------"
    ],
    "src/jsiJSON.c||src/jsiJSON.c": [
      "File: src/jsiJSON.c -> src/jsiJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
      "8: {",
      "10:     const char *cp = str;",
      "11:     int ulen;",
      "",
      "[Removed Lines]",
      "9:     char buf[100], *dp = buf;",
      "",
      "[Added Lines]",
      "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
      "",
      "---------------"
    ],
    "src/jsiMySql.c||src/jsiMySql.c": [
      "File: src/jsiMySql.c -> src/jsiMySql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1171:     Jsi_Interp *interp = p->jdb->interp;",
      "1173:     MysqlPrep *prep = p->prep;",
      "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1175:     if (field->isnull) {",
      "",
      "[Removed Lines]",
      "1172:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1223:     MysqlPrep *prep = p->prep;",
      "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1225:     Jsi_Interp *interp = p->jdb->interp;",
      "",
      "[Removed Lines]",
      "1222:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiNumber.c||src/jsiNumber.c": [
      "File: src/jsiNumber.c -> src/jsiNumber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "125: {",
      "127:     int prec = 0, skip = 0;",
      "128:     Jsi_Number num;",
      "129:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "126:     char buf[100];",
      "",
      "[Added Lines]",
      "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "143: {",
      "145:     int prec = 0, skip = 0;",
      "146:     Jsi_Number num;",
      "147:     Jsi_Value *v;",
      "148:     ChkStringN(_this, funcPtr, v);",
      "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
      "150:         return JSI_ERROR;",
      "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
      "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
      "154:     if (num<0)",
      "",
      "[Removed Lines]",
      "144:     char buf[100];",
      "151:     if (prec<=0) return JSI_ERROR;",
      "",
      "[Added Lines]",
      "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "165: {",
      "167:     int prec = 0, skip = 0;",
      "168:     Jsi_Number num;",
      "169:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "166:     char buf[100];",
      "",
      "[Added Lines]",
      "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "193: {",
      "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
      "196:     Jsi_Number num;",
      "197:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "194:     char buf[500];",
      "",
      "[Added Lines]",
      "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------"
    ],
    "src/jsiOptions.c||src/jsiOptions.c": [
      "File: src/jsiOptions.c -> src/jsiOptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
      "1877:             return JSI_ERROR;",
      "1878:     } else if (outStr) {",
      "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
      "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
      "1882:     } else {",
      "",
      "[Removed Lines]",
      "1879:         char obuf[100];",
      "",
      "[Added Lines]",
      "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiPstate.c||src/jsiPstate.c": [
      "File: src/jsiPstate.c -> src/jsiPstate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     l->d.fp = fp;",
      "240:     Jsi_Rewind(ps->interp, fp);",
      "241:     if (skipbang) {",
      "244:             Jsi_Rewind(ps->interp, fp);",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "242:         char buf[1000];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "[Added Lines]",
      "242:         char buf[JSI_BUFSIZ];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "---------------"
    ],
    "src/jsiRegexp.c||src/jsiRegexp.c": [
      "File: src/jsiRegexp.c -> src/jsiRegexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
      "164:     if (r >= REG_BADPAT) {",
      "167:         regerror(r, reg, buf, sizeof(buf));",
      "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "165:         char buf[100];",
      "",
      "[Added Lines]",
      "165:         char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiSqlite.c||src/jsiSqlite.c": [
      "File: src/jsiSqlite.c -> src/jsiSqlite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1396:     bool b;",
      "1397:     if( rc != JSI_OK) {",
      "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
      "1400:         sqlite3_result_error(context, buf, -1);",
      "",
      "[Removed Lines]",
      "1398:         char buf[250];",
      "",
      "[Added Lines]",
      "1398:         char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1762:     Jsi_Interp *interp = p->jdb->interp;",
      "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1763:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1812:     Jsi_Interp *interp = p->jdb->interp;",
      "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1813:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
      "2562:   int i;",
      "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
      "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
      "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
      "",
      "[Removed Lines]",
      "2563:   char out[100], *zBlob = (char *)pBlob;",
      "",
      "[Added Lines]",
      "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4394:     DbEvalContext sEval = {};",
      "4395:     int insert = 0, replace = 0, update = 0;",
      "4397: #ifdef JSI_DB_DSTRING_SIZE",
      "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
      "4399: #else",
      "",
      "[Removed Lines]",
      "4396:     char nbuf[100], *bPtr;",
      "",
      "[Added Lines]",
      "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
      "",
      "---------------"
    ],
    "src/jsiString.c||src/jsiString.c": [
      "File: src/jsiString.c -> src/jsiString.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
      "726:         if (match >= REG_BADPAT) {",
      "729:             regerror(match, regex, buf, sizeof(buf));",
      "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "727:             char buf[100];",
      "",
      "[Added Lines]",
      "727:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "895:             return JSI_OK;",
      "896:         }",
      "897:         if (r >= REG_BADPAT) {",
      "900:             regerror(r, reg, buf, sizeof(buf));",
      "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "898:             char buf[100];",
      "",
      "[Added Lines]",
      "898:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiTree.c||src/jsiTree.c": [
      "File: src/jsiTree.c -> src/jsiTree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "946:         int n;",
      "947:         int m;",
      "948:     } t1, t2;",
      "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
      "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
      "",
      "[Removed Lines]",
      "949:     char nbuf[100];",
      "",
      "[Added Lines]",
      "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
      "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:     char nbuf[100];",
      "",
      "[Added Lines]",
      "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiUtils.c||src/jsiUtils.c": [
      "File: src/jsiUtils.c -> src/jsiUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
      "627: {",
      "629:     Jsi_DString eStr;",
      "630:     Jsi_DSInit(&eStr);",
      "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
      "",
      "[Removed Lines]",
      "628:     char buf[100], *str;",
      "",
      "[Added Lines]",
      "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "943: }",
      "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
      "947:     const char *cp, *fnam = \"Info.completions\";",
      "948:     int i = 0, len;",
      "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
      "",
      "[Removed Lines]",
      "946:     char buf[1000], pre[1000], hpre[6] = {};",
      "",
      "[Added Lines]",
      "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     assert(args->vt == JSI_VT_OBJECT);",
      "402:     if (obj->isarrlist && obj->arr)",
      "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
      "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
      "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
      "407:     return v;",
      "",
      "[Removed Lines]",
      "404:     char unibuf[100];",
      "",
      "[Added Lines]",
      "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     if (!v)",
      "532:         goto done;",
      "533:     if (lenPtr) *lenPtr = 0;",
      "535:     switch(v->vt) {",
      "536:         case JSI_VT_STRING:",
      "537:             ntxt = v->d.s.str;",
      "",
      "[Removed Lines]",
      "534:     char unibuf[200];",
      "",
      "[Added Lines]",
      "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1182:             if (Jsi_ValueIsString(interp, key)) {",
      "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
      "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
      "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
      "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
      "1188:                     if (vv)",
      "",
      "[Removed Lines]",
      "1185:                     char fbuf[100];",
      "",
      "[Added Lines]",
      "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1379:         }",
      "1380:         return JSI_ERROR;",
      "1381:     }",
      "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
      "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
      "1385:     return JSI_OK;",
      "",
      "[Removed Lines]",
      "1382:     char unibuf[100];",
      "",
      "[Added Lines]",
      "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiWebSocket.c||src/jsiWebSocket.c": [
      "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
      "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
      "210:     char *lastData;",
      "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
      "213:     char filename[PATH_MAX];",
      "214:     long file_length;",
      "",
      "[Removed Lines]",
      "211:     char key[100]; // Lookup key.",
      "",
      "[Added Lines]",
      "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
      "570: {",
      "571:     int n = 0, i = 0, nlen;",
      "573:     const char *cp;",
      "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
      "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
      "",
      "[Removed Lines]",
      "572:     char buf[1000];",
      "",
      "[Added Lines]",
      "572:     char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1344:     Jsi_DSFree(&sStr);",
      "1345:     if (cmdPtr->debug>1)",
      "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
      "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
      "1349:     bool isgzip = 0;",
      "1350:     if (!ext || !ext[1])",
      "",
      "[Removed Lines]",
      "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "[Added Lines]",
      "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1836:         if (cmdPtr->post) {",
      "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
      "1838:             int n = 0;",
      "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
      "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
      "",
      "[Removed Lines]",
      "1839:             char buf[100];",
      "",
      "[Added Lines]",
      "1839:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
      "2229:     case LWS_CALLBACK_ESTABLISHED:",
      "2230:         if (cmdPtr->bufferPwr2>0) {",
      "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
      "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
      "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
      "",
      "[Removed Lines]",
      "2231:             char nbuf[100];",
      "",
      "[Added Lines]",
      "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2870:     const char *verStr = NULL;",
      "2871:     verStr = lws_get_library_version();",
      "2872:     if (verStr) {",
      "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
      "2875:         cp = Jsi_Strchr(buf, ' ');",
      "2876:         if (cp) *cp = 0;",
      "",
      "[Removed Lines]",
      "2873:         char buf[100], *cp;",
      "",
      "[Added Lines]",
      "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2734645bfc4b245550e864db5eb462ce03caee46",
      "candidate_info": {
        "commit_hash": "2734645bfc4b245550e864db5eb462ce03caee46",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2734645bfc4b245550e864db5eb462ce03caee46",
        "files": [
          "src/jsi.h",
          "src/jsiEval.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.17\": workaround crash when using \"x=assert(...)\", etc. Still needs to warn user/avoid memory leak.\n\nFossilOrigin-Name: 0f81e6a593d206d94de23aa801de2f00e6d8745e74cb4851be6df9889a6b9641",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 16",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 17",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1059:     while(ip < end && rc == JSI_OK) {",
          "1060:         int plop = ip->op;",
          "1062:         if (ip->logflag) { // Mask out LogDebug, etc if not enabled.",
          "1063:             interp->curIp = ip;",
          "1064:             switch (ip->logflag) {",
          "1065:                 case jsi_Oplf_assert:",
          "1072:                     break;",
          "1073:                 case jsi_Oplf_debug:",
          "1080:                     break;",
          "1081:                 case jsi_Oplf_test:",
          "1088:                     break;",
          "1089:                 case jsi_Oplf_trace:",
          "1096:                     break;",
          "1097:                 default:",
          "1098:                     break;",
          "",
          "[Removed Lines]",
          "1066:                     if (!interp->asserts) {",
          "1067:                         ip++;",
          "1068:                         if (ip->logflag != jsi_Oplf_assert && (ip->op == OP_POP || ip->op == OP_RET))",
          "1069:                             ip++;",
          "1070:                         continue;",
          "1071:                     }",
          "1074:                     if (!interp->logOpts.Debug && !(interp->framePtr->logflag &(1<<jsi_Oplf_debug))) {",
          "1075:                         ip++;",
          "1076:                         if (ip->logflag != jsi_Oplf_debug && (ip->op == OP_POP || ip->op == OP_RET))",
          "1077:                             ip++;",
          "1078:                         continue;",
          "1079:                     }",
          "1082:                     if (!interp->logOpts.Test && !(interp->framePtr->logflag &(1<<jsi_Oplf_test))) {",
          "1083:                         ip++;",
          "1084:                         if (ip->logflag != jsi_Oplf_test && (ip->op == OP_POP || ip->op == OP_RET))",
          "1085:                             ip++;",
          "1086:                         continue;",
          "1087:                     }",
          "1090:                     if (!interp->logOpts.Trace && !(interp->framePtr->logflag &(1<<jsi_Oplf_trace))) {",
          "1091:                         ip++;",
          "1092:                         if (ip->logflag != jsi_Oplf_trace && (ip->op == OP_POP || ip->op == OP_RET))",
          "1093:                             ip++;",
          "1094:                         continue;",
          "1095:                     }",
          "",
          "[Added Lines]",
          "1062: #define _JSI_BI_OP_SKIP_SUB(n) {\\",
          "1063:     ip++;\\",
          "1064:     if (ip->logflag != n && (ip->op == OP_POP || ip->op == OP_RET || ip->op == OP_ASSIGN))\\",
          "1065:         ip++;\\",
          "1066:     continue;\\",
          "1067: }",
          "1068: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && !(interp->framePtr->logflag &(1<<n))) _JSI_BI_OP_SKIP_SUB(n)",
          "1074:                     if (!interp->asserts) { _JSI_BI_OP_SKIP_SUB(jsi_Oplf_assert) }",
          "1077:                     _JSI_BI_OP_SKIP(Debug, jsi_Oplf_debug)",
          "1080:                     _JSI_BI_OP_SKIP(Test, jsi_Oplf_test)",
          "1083:                     _JSI_BI_OP_SKIP(Trace, jsi_Oplf_trace)",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "9cd7078d7edcec9cf5822f52cd325f999b69b727",
      "candidate_info": {
        "commit_hash": "9cd7078d7edcec9cf5822f52cd325f999b69b727",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/9cd7078d7edcec9cf5822f52cd325f999b69b727",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/parser.y"
        ],
        "message": "Release \"3.0.48\": add Object.assign, export default */+, and object shortform functions.\n\nFossilOrigin-Name: b27bc08882fc2d649369caffd589b41fcfe7bc659b2a184353b2f4dfdf48076d",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/parser.y||src/parser.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiInterp.c||src/jsiInterp.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiInterp.c||src/jsiInterp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 47",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 48",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3497:     return rc;",
          "3498: }",
          "3502: {",
          "3509:     Jsi_ValueMakeObject(interp, ret, NULL);",
          "3510:     Jsi_Value *cs = interp->framePtr->incsc;",
          "3511:     Jsi_Obj *nobj = (*ret)->d.obj;",
          "",
          "[Removed Lines]",
          "3500: static Jsi_RC InfoLocalsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3501:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3505:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3506:     bool varsOnly = 0;",
          "3507:     if (arg)",
          "3508:         Jsi_ValueGetBoolean(interp, arg, &varsOnly);",
          "",
          "[Added Lines]",
          "3500: Jsi_RC jsi_InfoLocalsCmd(Jsi_Interp *interp, bool funcs, bool vars, Jsi_Value **ret)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3516:         Jsi_Value *v = (Jsi_Value*)Jsi_TreeValueGet(tPtr);",
          "3517:         if (v==NULL) continue;",
          "3518:         if (Jsi_ValueIsFunction(interp, v)) {",
          "3520:         } else {",
          "3522:         }",
          "3524:         const char* key = (char*)Jsi_TreeKeyGet(tPtr);",
          "",
          "[Removed Lines]",
          "3519:             if (varsOnly) continue;",
          "3521:             if (arg && !varsOnly) continue;",
          "",
          "[Added Lines]",
          "3514:             if (!funcs) continue;",
          "3516:             if (!vars) continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3529:     return JSI_OK;",
          "3530: }",
          "3532: static Jsi_RC InfoCompletionsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3533:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3534: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3527: static Jsi_RC InfoLocalsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3528:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3529: {",
          "3530:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3531:     bool vars = 1, funcs = 1;",
          "3532:     if (arg) {",
          "3533:         Jsi_ValueGetBoolean(interp, arg, &funcs);",
          "3534:         if (funcs)",
          "3535:             vars = 0;",
          "3536:     }",
          "3537:     return jsi_InfoLocalsCmd(interp, funcs, vars, ret);",
          "3538: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4885:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4886:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
          "4887:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"arg:string|regexp|function|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "4889:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
          "4890:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4891:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
          "4892:     { \"level\",      InfoLevelCmd,       0,  1, \"level:number=void\", .help=\"Return current level or details of a call-stack frame\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT|JSI_TT_NUMBER, .flags=0, .info=FN_infolevel },",
          "4893:     { \"lookup\",     InfoLookupCmd,      1,  1, \"name:string\", .help=\"Given string name, lookup and return value, eg: function\", .retType=(uint)JSI_TT_ANY },",
          "4894:     { \"methods\",    InfoMethodsCmd,     1,  1, \"val:string|regexp\", .help=\"Return functions and commands\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "4895:     { \"named\",      InfoNamedCmd,       0,  1, \"name:string=void\", .help=\"Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_USEROBJ },",
          "",
          "[Removed Lines]",
          "4888:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "[Added Lines]",
          "4900:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; if filter=true/false omit vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     \"EWITH\",",
          "95:     \"RESERVED\",",
          "96:     \"DEBUG\"",
          "97: };",
          "101: void jsi_FreeOpcodes(Jsi_OpCodes *ops) {",
          "102:     int i;",
          "",
          "[Removed Lines]",
          "99: static int jsiOpCodesCnt[3] = {0,0,0};",
          "",
          "[Added Lines]",
          "97:     \"EXPORT\"",
          "100: int jsiOpCodesCnt[4] = {0,0,0, (sizeof(jsi_op_names)/sizeof(jsi_op_names[0]))};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:     jsi_FuncCallCheck(p,line,argc,1, name, NULL, argCodes); JSI_NEW_CODESLN(0,OP_NEWFCALL, argc);",
          "313: }",
          "314: static Jsi_OpCodes *code_ret(jsi_Pstate *p, jsi_Pline *line, int n) { JSI_NEW_CODESLN(0,OP_RET, n); }",
          "315: static Jsi_OpCodes *code_delete(int n) { JSI_NEW_CODES(0,OP_DELETE, n); }",
          "316: static Jsi_OpCodes *code_chthis(jsi_Pstate *p, jsi_Pline *line, int n) { JSI_NEW_CODESLN(0,OP_CHTHIS, n); }",
          "317: static Jsi_OpCodes *code_pop(int n) { JSI_NEW_CODES(0,OP_POP, n); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316: static Jsi_OpCodes *code_export(jsi_Pstate *p, jsi_Pline *line, int n) { JSI_NEW_CODESLN(0,OP_EXPORT, n); }",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056:     while(ip < end && rc == JSI_OK) {",
          "1057:         int plop = ip->op;",
          "1071:         if (ip->logidx) { // Mask out LogDebug, etc if not enabled.",
          "1072:             uint oli = ip->logidx, logflag2 = jsi_GetLogFlag(interp, ip->logidx, NULL);",
          "1073:             interp->curIp = ip;",
          "",
          "[Removed Lines]",
          "1060:     ip++;\\",
          "1061:     if (ip->logflag != n)  {\\",
          "1062:         if (ip->op == OP_POP) ip++; \\",
          "1063:         else if (ip->op == OP_RET || ip->op == OP_ASSIGN) { \\",
          "1064:           rc = Jsi_LogError(\"invalid use of return/= here\"); \\",
          "1065:         ip++;\\",
          "1066:       }}\\",
          "1067:     continue;\\",
          "1068: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1077:                     ip++;",
          "1078:                 if (ip->op == OP_POP)",
          "1079:                     ip++;",
          "1081:                     rc = Jsi_LogError(\"invalid use of =/return here\");",
          "1082:                     ip++;",
          "1083:                 }",
          "",
          "[Removed Lines]",
          "1080:                 else if (ip->op == OP_RET || ip->op == OP_ASSIGN) {",
          "",
          "[Added Lines]",
          "1068:                 else if (ip->op == OP_RET || ip->op == OP_EXPORT || ip->op == OP_ASSIGN) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1744:                 }",
          "1745:                 break;",
          "1746:             }",
          "1747:             case OP_RET: {",
          "1748:                 if (fp->Sp>=1 && ip->data) {",
          "1749:                     jsiVarDeref(interp,1);",
          "1751:                 }",
          "1752:                 jsiPop(interp, (uintptr_t)ip->data);",
          "1753:                 interp->didReturn = 1;",
          "",
          "[Removed Lines]",
          "1750:                     Jsi_ValueMove(interp, vret, _jsi_TOP);",
          "",
          "[Added Lines]",
          "1735:             case OP_EXPORT:",
          "1736:                 if (!((ip+1) == end ||",
          "1737:                     (ip[1].op == OP_NOP && (ip+2) == end)))",
          "1738:                     Jsi_LogWarn(\"export is not the last statement\");",
          "1742:                     Jsi_Value *vtop = _jsi_TOP;",
          "1743:                     if (ip->op == OP_RET || !interp->framePtr->evalFuncPtr",
          "1744:                         || (vtop->vt != JSI_VT_NULL && vtop->vt != JSI_VT_UNDEF))",
          "1745:                         Jsi_ValueMove(interp, vret, vtop);",
          "1746:                     else {",
          "1747:                         jsi_InfoLocalsCmd(interp, 1, (vtop->vt == JSI_VT_UNDEF), &vret);",
          "1748:                     }",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "434: } jsi_Eopcode;",
          "436: typedef struct jsi_OpCode {",
          "437:     jsi_Eopcode op;",
          "438:     void *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437: extern int jsiOpCodesCnt[4];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1538: extern char *jsi_TrimStr(char *str);",
          "1539: extern bool jsi_ModBlacklisted(Jsi_Interp *interp, const char *mod);",
          "1540: extern bool jsi_FuncIsNoop(Jsi_Interp* interp, Jsi_Value *func);",
          "1542: typedef enum {",
          "1543:     _JSI_CDATA_INFO=0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1544: extern Jsi_RC jsi_InfoLocalsCmd(Jsi_Interp *interp, bool funcsOnly, bool varsOnly, Jsi_Value **ret);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1069: {",
          "1070:     Jsi_Interp* interp;",
          "1071:     Jsi_RC rc = JSI_OK;",
          "1072:     if (parent && parent->noSubInterps) {",
          "1073:         interp = parent;",
          "1074:         Jsi_LogError(\"subinterps disallowed\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1072:     assert(jsiOpCodesCnt[3]==OP_LASTOP);",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:     return JSI_OK;",
          "521: }",
          "523: #if (JSI_HAS___PROTO__==1)",
          "524: static Jsi_RC jsi_GetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "525:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523: static Jsi_RC ObjectAssignCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "524:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "525: {",
          "526:     if (_this->vt != JSI_VT_OBJECT || _this->d.obj->ot != JSI_OT_FUNCTION ||",
          "527:         _this->d.obj->d.fobj->func->callback != ObjectConstructor)",
          "528:         return Jsi_LogError(\"must call via Object.assign\");",
          "530:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "531:     if (!v || v->vt != JSI_VT_OBJECT || v->d.obj->ot != JSI_OT_OBJECT)",
          "532:         return Jsi_LogError(\"arg1: expected object\");",
          "533:     Jsi_Obj *obj = v->d.obj;",
          "534:     Jsi_ValueMakeObject(interp, ret, obj);",
          "535:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "536:     for (i=1; i<argc; i++) {",
          "537:         Jsi_TreeEntry *tPtr;",
          "538:         Jsi_TreeSearch search;",
          "539:         Jsi_Value *vs = Jsi_ValueArrayIndex(interp, args, i);",
          "540:         if (!vs || vs->vt != JSI_VT_OBJECT || vs->d.obj->ot != JSI_OT_OBJECT)",
          "541:             return Jsi_LogError(\"arg%d: expected object\", i+1);",
          "542:         for (tPtr = Jsi_TreeSearchFirst(vs->d.obj->tree, &search, 0, NULL);",
          "543:             tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "544:             Jsi_Value *v2 = (Jsi_Value *)Jsi_TreeValueGet(tPtr);",
          "545:             if (v2 && v2->f.bits.dontenum == 0)",
          "546:                 Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v2, 0);",
          "547:         }",
          "548:         Jsi_TreeSearchDone(&search);",
          "549:     }",
          "550:     return JSI_OK;",
          "551: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698: static Jsi_CmdSpec objectCmds[] = {",
          "699: #ifndef __JSI_OMITDECL",
          "700:     { \"Object\",         ObjectConstructor,      0, 1,  \"val:object|function|null=void\", .help=\"Object constructor\", .retType=(uint)JSI_TT_OBJECT, .flags=JSI_CMD_IS_CONSTRUCTOR },",
          "701:     { \"create\",         ObjectCreateCmd,        1, 2, \"proto:null|object, properties:object=void\", .help=\"Create a new object with prototype object and properties\", .retType=(uint)JSI_TT_OBJECT },",
          "702: #if (JSI_HAS___PROTO__>0)",
          "703:     { \"getPrototypeOf\", jsi_GetPrototypeOfCmd,  1, 1, \"name:object|function\", .help=\"Return prototype of an object\", .retType=(uint)JSI_TT_OBJECT|JSI_TT_FUNCTION },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731:     { \"assign\",         ObjectAssignCmd,        1, -1, \"obj:object,...\", .help=\"Return arg1 object with assigned values\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: %destructor { } <str>",
          "45: %type <opcodes> fcall_exprs for_cond for_init for_statement func_expr func_statement func_statement_block if_statement item items iterstatement lvalue",
          "46: %type <opcodes> object objectident statement statements statement_or_empty switch_statement try_statement value vardec vardecs while_statement with_statement",
          "47: %type <scopes> args args_opt argsa arrowargs",
          "",
          "[Removed Lines]",
          "44: %type <opcodes> array commonstatement delete_statement do_statement expr expr_opt exprlist exprlist_opt itemident",
          "",
          "[Added Lines]",
          "44: %type <opcodes> array commonstatement delete_statement do_statement expr expr_opt exprlist exprlist_opt itemident itemfunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155: objectident:",
          "156:     object { $$ = $1; }",
          "158:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "159:         $$ = lval;",
          "160:         lval->lvalue_flag = 1;",
          "161:         lval->lvalue_name = $1;",
          "162:     }",
          "163: ;",
          "",
          "[Removed Lines]",
          "157:     | IDENTIFIER {",
          "",
          "[Added Lines]",
          "163:     | '*' {",
          "164:         $$ = code_push_null();",
          "165:     }",
          "166:     | '+' {",
          "167:         $$ = code_push_undef();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:     | ';'                   { $$ = code_nop(); }",
          "181:     | '{' statements '}'    { $$ = $2; }",
          "182:     | func_statement        { $$ = $1; }",
          "184: ;",
          "186: func_statement:",
          "",
          "[Removed Lines]",
          "183:     | EXPORT DEFAULT objectident { $$ = codes_join($3, code_ret(pstate, &@3, 1)); }",
          "",
          "[Added Lines]",
          "189:     | EXPORT DEFAULT objectident { $$ = codes_join($3, code_export(pstate, &@3, 1)); }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "815:     '{' items '}'   { $$ = codes_join($2, code_object(pstate, &@2, ($2)->expr_counter)); }",
          "816: ;",
          "818: itemident:",
          "820:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "821:         lval->lvalue_flag = 1;",
          "822:         lval->lvalue_name = $1;",
          "",
          "[Removed Lines]",
          "819:     IDENTIFIER  {",
          "",
          "[Added Lines]",
          "824: itemfunc:",
          "825:     IDENTIFIER '(' args_opt ')' func_statement_block {",
          "826:         Jsi_OpCodes *lval = code_push_func(pstate, &@3, jsi_FuncMake(pstate, $3, $5, &@1, $1, 0));",
          "827:         lval->lvalue_flag = 1;",
          "828:         lval->lvalue_name = $1;",
          "829:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "830:         jsi_PstatePop(pstate);",
          "831:     }",
          "832: ;",
          "835:     itemfunc { $$ = $1; }",
          "836:     | IDENTIFIER  {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aba08f26723780343aba70c2c1009eda1e18d39e",
      "candidate_info": {
        "commit_hash": "aba08f26723780343aba70c2c1009eda1e18d39e",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/aba08f26723780343aba70c2c1009eda1e18d39e",
        "files": [
          "Configs/make_devel.conf",
          "Makefile",
          "lws/Makefile",
          "src/jsi.h",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.24\": switch from libwebsocket to lws.\n\nFossilOrigin-Name: 744e7806cafdf1ada5625983a525d064af31cd482cc2d69f1d08fefff027832f",
        "before_after_code_files": [
          "Configs/make_devel.conf||Configs/make_devel.conf",
          "src/jsi.h||src/jsi.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "Configs/make_devel.conf||Configs/make_devel.conf": [
          "File: Configs/make_devel.conf -> Configs/make_devel.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: JSI__LOAD=1",
          "12: JSI__MATH=1",
          "13: JSI__MD5=1",
          "14: JSI__READLINE=1",
          "15: JSI__SHA1=1",
          "16: JSI__SHA256=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: JSI__MINIZ=0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: XCPREFIX=",
          "37: BUILDMODS=",
          "40: MODFLAGS=",
          "42: # command: ./configure --ext=+sqlite,websocket,mysql --label=Devel --opt=+sanitize,memdebug",
          "",
          "[Removed Lines]",
          "39: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__REGEX=0 -DJSI__SANITIZE=1 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=1",
          "",
          "[Added Lines]",
          "40: PROGFLAGS=  -DJSI__BASE64=1 -DJSI__CDATA=1 -DJSI__DEBUG=1 -DJSI__ENCRYPT=1 -DJSI__EVENT=1 -DJSI__FILESYS=1 -DJSI__INFO=1 -DJSI__LOAD=1 -DJSI__MATH=1 -DJSI__MD5=1 -DJSI__READLINE=1 -DJSI__SHA1=1 -DJSI__SHA256=1 -DJSI__SIGNAL=1 -DJSI__STUBS=1 -DJSI__THREADS=1 -DJSI__ZVFS=1 -DJSI__MEMDEBUG=1 -DJSI__MINIZ=0 -DJSI__REGEX=0 -DJSI__SANITIZE=1 -DJSI__SOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__SQLITE=1 -DJSI__WEBSOCKET=1 -DJSI__MYSQL=1",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 23",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 24",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include <signal.h>",
          "58: static const int jsi_WsPkgVersion = 2;",
          "",
          "[Removed Lines]",
          "55: #include <libwebsockets.h>",
          "",
          "[Added Lines]",
          "55: #include <liblws.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:         cmdPtr->mimeTypes = Jsi_ValueMakeObject(interp, NULL, NULL);",
          "1217:         Jsi_IncrRefCount(interp, cmdPtr->mimeTypes);",
          "1218:     }",
          "1220:     int i;",
          "1221:     for (i=0; jsi_ws_mtypes[i]; i+=2)",
          "1222:         if (!ex || !Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, jsi_ws_mtypes[i], 1))",
          "",
          "[Removed Lines]",
          "1219:     Jsi_Obj *obj = cmdPtr->mimeTypes->d.obj;",
          "",
          "[Added Lines]",
          "1219:     Jsi_Obj *obj = Jsi_ValueGetObj(interp, cmdPtr->mimeTypes);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "c4fe315afadb935008de5466f60855e663caa653",
      "candidate_info": {
        "commit_hash": "c4fe315afadb935008de5466f60855e663caa653",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/c4fe315afadb935008de5466f60855e663caa653",
        "files": [
          "README.md",
          "jsish.c",
          "lib/Zip.jsi",
          "lib/web/app",
          "lib/web/md/Building.md",
          "lib/web/md/Reference.md",
          "lib/web/md/Start.md",
          "lib/web/md/dev/Ledger.md",
          "lib/web/md/dev/jsi.js.md",
          "lib/web/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiZvfs.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4\": fix zip handling of dirs.\n\nFossilOrigin-Name: 9393cad26fca4ffe3a1388f50e08fcd55b4762cbeb9058205ba269721659fd4c",
        "before_after_code_files": [
          "jsish.c||jsish.c",
          "lib/Zip.jsi||lib/Zip.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ]
        }
      },
      "candidate_diff": {
        "jsish.c||jsish.c": [
          "File: jsish.c -> jsish.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"regex/tre-mem.c\"",
          "13: #include \"src/parser.h\"",
          "14: #include \"src/jsiInt.h\"",
          "15: #if JSI__MINIZ",
          "16: #include \"miniz/miniz.c\"",
          "17: #endif //JSI__MINIZ",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include \"src/linenoise.h\"",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:             return usage(\"must give a directory to zip: \" + zdir);",
          "99:         var i = 0, zargs = [];",
          "100:         zargs[i++] = File.realpath(fname);",
          "102:         zargs[i++] = zdir;",
          "103:         for (var n = 3; n<args.length; n++) {",
          "104:             var ldir = args[n];",
          "107:             zargs[i++] = null;",
          "108:         }",
          "109:         Zvfs.create.apply({},zargs);",
          "",
          "[Removed Lines]",
          "101:         zargs[i++] = File.glob('*', {dir:zdir, recurse:true});",
          "105:             zargs[i++] = File.glob(ldir, {recurse:true});",
          "106:             zargs[i-1].push(ldir);",
          "",
          "[Added Lines]",
          "101:         zargs[i++] = File.glob('*', {dir:zdir, recurse:true}).sort();",
          "105:             zargs[i++] = File.glob(ldir, {recurse:true}).concat([ldir]).sort();",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define __JSI_H__",
          "5: #define JSI_VERSION_MAJOR   3",
          "7: #define JSI_VERSION_RELEASE 0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "6: #define JSI_VERSION_MINOR   3",
          "",
          "[Added Lines]",
          "6: #define JSI_VERSION_MINOR   4",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5062: #endif",
          "5063:     { \"log\",        SysLogCmd,       1, -1, \"val, ...\", .help=\"Same as puts, but includes file:line\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5064:     { \"matchObj\",   SysMatchObjCmd,  1,  4, \"obj:object, match:string=void, partial=false, noerror=false\", .help=\"Validate that object matches given name:type string. With single arg returns generated string\", .retType=(uint)JSI_TT_BOOLEAN|JSI_TT_STRING },",
          "5066:     { \"moduleOpts\", SysModuleOptsCmd,1,  3, \"options:object, self:object|userobj=void, conf:object|null|undefined=void\", .help=\"Parse module options\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5067:     { \"moduleRun\",  SysModuleRunCmd, 1,  2, \"cmd:string|function, args:array=undefined\", .help=\"Invoke named module with given args or command-line args\", .retType=(uint)JSI_TT_ANY},",
          "5068:     { \"noOp\",       jsi_NoOpCmd,     0, -1, \"\", .help=\"A No-Op. A zero overhead command call that is useful for debugging\" },",
          "",
          "[Removed Lines]",
          "5065:     { \"module\",     SysModuleCmd,    1,  3, \"cmd:string|function, version:number|string=1, options:object=void\", .help=\"Same as provide, but also invokes the function/name if isMain is true\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions },",
          "",
          "[Added Lines]",
          "5065:     { \"module\",     SysModuleCmd,    1,  3, \"cmd:string|function, version:number|string=1, options:object=void\", .help=\"Same as provide, but will invoke cmd if isMain is true\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5070:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "5071:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5072:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5074:     { \"puts\",       SysPutsCmd,      1, -1, \"val:any, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "5075:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "5076:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "",
          "[Removed Lines]",
          "5073:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|function=void, version:number|string=1, options:object=void\", .help=\"Provide a package for use with require\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions  },",
          "",
          "[Added Lines]",
          "5073:     { \"provide\",    SysProvideCmd,   0,  3, \"cmd:string|function=void, version:number|string=1, options:object=void\", .help=\"Make a package available for use by require\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=jsiModuleOptions  },",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1730:     Jsi_Write(interp, out, zHdr, 30);",
          "",
          "[Removed Lines]",
          "1731:     Jsi_Write(interp, out, zDest, nameLen);",
          "",
          "[Added Lines]",
          "1730:     Jsi_Write(interp, out, p->zName, nameLen);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: System.prototype.parseInt = function(val:any, base:number=10):number {};",
          "287: System.prototype.parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):object {};",
          "288: System.prototype.printf = function(format:string, ...):void {};",
          "290: System.prototype.puts = function(val:any, ...):void {};",
          "291: System.prototype.quote = function(val:string):string {};",
          "292: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "289: System.prototype.provide = function(name:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "[Added Lines]",
          "289: System.prototype.provide = function(cmd:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385: var parseInt = function(val:any, base:number=10):number {};",
          "386: var parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):object {};",
          "387: var printf = function(format:string, ...):void {};",
          "389: var puts = function(val:any, ...):void {};",
          "390: var quote = function(val:string):string {};",
          "391: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "388: var provide = function(name:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "[Added Lines]",
          "388: var provide = function(cmd:string|function=void, version:number|string=1, options:object=void):void {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c5fdf0c963f3b54efdff6b43f2f158f687d4a8c",
      "candidate_info": {
        "commit_hash": "8c5fdf0c963f3b54efdff6b43f2f158f687d4a8c",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/8c5fdf0c963f3b54efdff6b43f2f158f687d4a8c",
        "files": [
          "lib/Cdata.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.42\": add Object.freeze and use in moduleOpts\n\nFossilOrigin-Name: 2a422416c84e10b15012de8195d1a9390b71533893631fe4d243cfdb2eb7965f",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:         enumvals:{}, indata:'', infile:'', outFile:null, rootname:null,",
          "34:         lnstart:0, setCons:0, icode:[], outcode:'', addflags:'',",
          "35:         preface: '// DO NOT EDIT: file generated by ',",
          "37:     };",
          "38:     self.pkg = require('Cdata', 0);",
          "39:     self.version = self.pkg.version;",
          "",
          "[Removed Lines]",
          "36:         Trace       :false,",
          "",
          "[Added Lines]",
          "36:         Trace       :false, jscHeaderStr:'', parmFlags:'',",
          "37:         objOptCmdStr:'', objCmdStr:'', selfSuffix:'',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     var EV = { enum:[], struct:[], vars:[] };",
          "44:     moduleOpts(self, options, conf);",
          "46:     var defs = {structs:[], enums:[], types:[], vars:[], cmds:[]};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     Object.freeze(self, true, true);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 41",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 42",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     int traceCall;",
          "399:     bool coverage;",
          "400:     bool profile;",
          "401:     Jsi_Value *udata;",
          "402: } Jsi_ModuleConf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:     bool freeze;",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:     JSI_OPT(CUSTOM,Jsi_ModuleConf, log,     .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "856:     JSI_OPT(CUSTOM,Jsi_ModuleConf, logmask, .help=\"Logging mask flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "857:     JSI_OPT(BOOL,  Jsi_ModuleConf, coverage,.help=\"On exit generate detailed code coverage for function calls (with profile)\" ),",
          "858:     JSI_OPT(OBJ,   Jsi_ModuleConf, info,    .help=\"Info provided by module\", .flags=JSI_OPT_INIT_ONLY ),",
          "859:     JSI_OPT(BOOL,  Jsi_ModuleConf, profile, .help=\"On exit generate profile of function calls\" ),",
          "860:     JSI_OPT(CUSTOM,Jsi_ModuleConf, traceCall,.help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, freeze,  .help=\"Freeze self object: first arg to moduleOpts\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1085:             return JSI_ERROR;",
          "1086:         if (rc == JSI_OK) {",
          "1087:             Jsi_PkgOpts po = {};",
          "1088:             v = Jsi_ValueArrayIndex(interp, args, 2);",
          "1089:             if (v && Jsi_OptionsProcess(interp, jsiModuleOptions, &po.conf, v, 0) < 0)",
          "1090:                 rc = JSI_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1089:             po.conf.freeze = interp->subOpts.freeze;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1102:     return rc;",
          "1103: }",
          "1105: static Jsi_RC SysProvideCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1106:     Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "1107:     return SysProvideCmdInt(interp, args, _this, ret, funcPtr, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1107: #define FN_provide \"Default is the file tail-rootname\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4609: static Jsi_RC SysModuleOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4610:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4611: {",
          "4612:     Jsi_TreeEntry *tPtr, *tPtr2;",
          "4613:     Jsi_TreeSearch search = {};",
          "4614:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4615:     bool freeze = interp->subOpts.freeze;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4764:             mo = &pf->pkg->popts.conf;",
          "4765:             pf->pkg->logmask = mo->logmask;",
          "4766:             pf->pkg->log = mo->log;",
          "4767:         }",
          "4768:         uint i;",
          "4769:         for (i=JSI_LOG_ASSERT; mo && i<=JSI_LOG_TEST; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4771:             freeze = mo->freeze;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4780:             }",
          "4781:         }",
          "4782:     }",
          "4783:     return rc;",
          "4784: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4788:     if (rc == JSI_OK && freeze) {",
          "4789:         Jsi_Obj *obj = v1->d.obj;",
          "4790:         obj->freeze = 1;",
          "4791:         obj->freezeModifyOk = 1;",
          "4792:         obj->freezeReadBad = 1;",
          "4793:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4943:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "4944:     { \"parseOpts\",  SysModuleOptsCmd,2,  3, \"self:object|userobj, options:object, conf:object|null|undefined=void\", .help=\"Parse module options: same as moduleOpts\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "4945:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4947:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "4948:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "4949:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "",
          "[Removed Lines]",
          "4946:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, opts:object|function=void\", .help=\"Provide a package for use with require. Default is the file tail-rootname\", .retType=(uint)JSI_TT_VOID },",
          "",
          "[Added Lines]",
          "4957:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, options:object|function=void\", .help=\"Provide a package for use with require.\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_provide, .opts=jsiModuleOptions  },",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:                 Jsi_Value key = VALINIT, *kPtr = &key; // Note: a string key so no reset needed.",
          "865:                 Jsi_ValueMakeStringKey(interp, &kPtr, varname);",
          "866:                 v = jsi_ValueObjKeyAssign(interp, global_scope, &key, NULL, JSI_OM_DONTENUM);",
          "867:                 if (v->vt == JSI_VT_UNDEF) {",
          "868:                     v->d.lookupFail = varname;",
          "869:                     v->f.bits.lookupfailed = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:                 if (!v)",
          "868:                     return JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "941:         jsiPop(interp, 1);",
          "942:         return JSI_ERROR;",
          "943:     }",
          "944:     Jsi_String *str = jsi_ValueString(src);",
          "945:     if (str && Jsi_ValueIsNumber(interp, idx)) {",
          "946:         int bLen, cLen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "946:     int arrayindex = -1;",
          "948:     if (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0) {",
          "949:         arrayindex = (int)idx->d.num;",
          "950:     }",
          "952:     if (src->vt == JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT && src->d.obj->freeze && src->d.obj->freezeReadBad) {",
          "953:         Jsi_Value *v;",
          "954:         char keyBuf[100], *keyStr = keyBuf;",
          "955:         if (arrayindex>=0)",
          "956:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "957:         else",
          "958:             keyStr = Jsi_ValueString(interp, idx, NULL);",
          "959:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, src, keyStr, 0))) {",
          "960:             return Jsi_LogError(\"frozen read undefined key: %s\", keyStr);",
          "961:         }",
          "962:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1227:                     if (v3->vt == JSI_VT_OBJECT) {",
          "1228:                         if (strict && sval->vt == JSI_VT_UNDEF)",
          "1229:                             rc = jsiValueAssignCheck(interp, sval, lop);",
          "1231:                         jsi_ValueDebugLabel(sval, \"assign\", NULL);",
          "1232:                     } else if (strict)",
          "1233:                         rc = Jsi_LogError(\"assign to a non-exist object\");",
          "",
          "[Removed Lines]",
          "1230:                         jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0);",
          "",
          "[Added Lines]",
          "1250:                         if (!jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0))",
          "1251:                             rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2027:                 line = fp->child->filePtr->pkg->loadLine;",
          "2028:             }",
          "2029:         }",
          "2030:         if (fn && ((cp=Jsi_Strrchr(fn, '/'))))",
          "2031:             fn = cp +1;",
          "2032:         Jsi_DSPrintf(&dStr, \"#%d: %s:%d: \", fp->level, fn, line);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2051:         if (!line && fp->level == interp->framePtr->level)",
          "2052:             line = interp->curIp->Line;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:     uint isNoOp:1;",
          "523:     uint isBlob:1;",
          "526:         int val;",
          "527:         Jsi_Number num;",
          "",
          "[Removed Lines]",
          "524:     uint unused2:16;",
          "",
          "[Added Lines]",
          "524:     uint freeze:1;",
          "525:     uint freezeModifyOk:1;",
          "526:     uint freezeReadBad:1;",
          "527:     uint unused2:13;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1027:     bool outUndef;",
          "1028:     bool logAllowDups;",
          "1029:     bool logColNums;",
          "1030:     bool privKeys;",
          "1031:     bool compat;",
          "1032:     bool mutexUnlock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1033:     bool freeze;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     JSI_OPT(BOOL,  jsi_SubOptions, compat,      .help=\"Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser\" ),",
          "64:     JSI_OPT(INT,   jsi_SubOptions, dblPrec,     .help=\"Format precision of double where 0=max, -1=max-1, ... (max-1)\" ),",
          "65:     JSI_OPT(BOOL,  jsi_SubOptions, istty,       .help=\"Indicates interp is in interactive mode\", jsi_IIRO),",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, logColNums,  .help=\"Display column numbers in error messages\"),",
          "67:     JSI_OPT(BOOL,  jsi_SubOptions, logAllowDups,.help=\"Log should not filter out duplicate messages\"),",
          "68:     JSI_OPT(BOOL,  jsi_SubOptions, mutexUnlock, .help=\"Unlock own mutex when evaling in other interps (true)\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, freeze,      .help=\"Default freeze self object in: first arg to moduleOpts\" ),",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     return Jsi_FunctionCall(interp, args, _this, ret);",
          "363: }",
          "366: static Jsi_RC ObjectKeysCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "367:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: static Jsi_RC ObjectFreezeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "366:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "367: {",
          "368:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "372:     if (!val || !Jsi_ValueIsObjType(interp, val, JSI_OT_OBJECT))",
          "373:         return Jsi_LogError(\"arg 1: expected object\");",
          "374:     if (bval && !Jsi_ValueIsBoolean(interp, bval))",
          "375:         return Jsi_LogError(\"arg 2: expected bool\");",
          "376:     if (rval && !Jsi_ValueIsBoolean(interp, rval))",
          "377:         return Jsi_LogError(\"arg 3: expected bool\");",
          "378:     bool bnum = 0, rnum = 0, fnum = 0;",
          "379:     if (bval)",
          "380:         Jsi_GetBoolFromValue(interp, bval, &bnum);",
          "381:     if (rval)",
          "382:         Jsi_GetBoolFromValue(interp, rval, &rnum);",
          "383:     if (fval)",
          "384:         Jsi_GetBoolFromValue(interp, fval, &fnum);",
          "385:     Jsi_Obj *obj = val->d.obj;",
          "386:     obj->freeze = !fnum;",
          "387:     obj->freezeModifyOk = bnum;",
          "388:     obj->freezeReadBad = rnum;",
          "389:     return JSI_OK;",
          "391: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:     { \"hasOwnProperty\", jsi_HasOwnPropertyCmd,  1, 1, \"name:string\", .help=\"Returns a true if object has the specified property\", .retType=(uint)JSI_TT_BOOLEAN },",
          "674:     { \"is\",             ObjectIsCmd, 2, 2, \"value1, value2\", .help=\"Tests if two values are equal\", .retType=(uint)JSI_TT_BOOLEAN },",
          "675:     { \"isPrototypeOf\",  ObjectIsPrototypeOfCmd, 1, 1, \"name\", .help=\"Tests for an object in another object's prototype chain\", .retType=(uint)JSI_TT_BOOLEAN },",
          "676:     { \"keys\",           ObjectKeysCmd,          0, 1, \"obj:object|function=void\", .help=\"Return the keys of an object or array\", .retType=(uint)JSI_TT_ARRAY },",
          "677:     { \"merge\",          ObjectMergeCmd,         1, 1, \"obj:object|function\", .help=\"Return new object containing merged values\", .retType=(uint)JSI_TT_OBJECT },",
          "678:     { \"propertyIsEnumerable\", ObjectPropertyIsEnumerableCmd,1, 1, \"name\", .help=\"Determine if a property is enumerable\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     { \"freeze\",         ObjectFreezeCmd,        1, 4, \"obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false\", .help=\"Freeze an object optionally allowing modify (but not add)\", .retType=(uint)JSI_TT_VOID },",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "999:     }",
          "1002:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "1003:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1004:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1002:     if (value && target->vt == JSI_VT_OBJECT && target->d.obj->ot == JSI_OT_OBJECT && target->d.obj->freeze) {",
          "1003:         Jsi_Obj *obj = target->d.obj;",
          "1004:         Jsi_Value *v;",
          "1005:         char keyBuf[100], *keyStr = keyBuf;",
          "1006:         if (arrayindex>=0)",
          "1007:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "1008:         else",
          "1009:             keyStr = Jsi_ValueString(interp, keyval, NULL);",
          "1010:         if (!obj->freezeModifyOk) {",
          "1011:             Jsi_LogError(\"frozen assign/modify key: %s\", keyStr);",
          "1012:             return NULL;",
          "1013:         }",
          "1014:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, target, keyStr, 0))) {",
          "1015:             Jsi_LogError(\"frozen assign key: %s\", keyStr);",
          "1016:             return NULL;",
          "1017:         }",
          "1018:     }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: Number.prototype.toString = function(radix:number=10):string {};",
          "218: var Object = function(cmd,args) {};",
          "219: Object.prototype.create = function(proto:null|object, properties:object=void):object {};",
          "220: Object.prototype.getPrototypeOf = function(name:object|function):function|object {};",
          "221: Object.prototype.hasOwnProperty = function(name:string):boolean {};",
          "222: Object.prototype.is = function(value1, value2):boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: Object.prototype.freeze = function(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314: System.prototype.parseInt = function(val:any, base:number=10):number {};",
          "315: System.prototype.parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined=void):object {};",
          "316: System.prototype.printf = function(format:string, ...):void {};",
          "318: System.prototype.puts = function(val, ...):void {};",
          "319: System.prototype.quote = function(val:string):string {};",
          "320: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "317: System.prototype.provide = function(name:string|null|function=void, version:number|string=void, opts:object|function=void):void {};",
          "",
          "[Added Lines]",
          "318: System.prototype.provide = function(name:string|null|function=void, version:number|string=void, options:object|function=void):void {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "408: var parseInt = function(val:any, base:number=10):number {};",
          "409: var parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined=void):object {};",
          "410: var printf = function(format:string, ...):void {};",
          "412: var puts = function(val, ...):void {};",
          "413: var quote = function(val:string):string {};",
          "414: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "",
          "[Removed Lines]",
          "411: var provide = function(name:string|null|function=void, version:number|string=void, opts:object|function=void):void {};",
          "",
          "[Added Lines]",
          "412: var provide = function(name:string|null|function=void, version:number|string=void, options:object|function=void):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "722: <tr><td>compat</td><td><i>BOOL</i></td><td>Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser.</td><td><i></i></td></tr>",
          "723: <tr><td>dblPrec</td><td><i>INT</i></td><td>Format precision of double where 0=max, -1=max-1, ... (max-1).</td><td><i></i></td></tr>",
          "724: <tr><td>istty</td><td><i>BOOL</i></td><td>Indicates interp is in interactive mode.</td><td><i>readOnly</i></td></tr>",
          "725: <tr><td>logColNums</td><td><i>BOOL</i></td><td>Display column numbers in error messages.</td><td><i></i></td></tr>",
          "726: <tr><td>logAllowDups</td><td><i>BOOL</i></td><td>Log should not filter out duplicate messages.</td><td><i></i></td></tr>",
          "727: <tr><td>mutexUnlock</td><td><i>BOOL</i></td><td>Unlock own mutex when evaling in other interps (true).</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725: <tr><td>freeze</td><td><i>BOOL</i></td><td>Default freeze self object in: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "964: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "965: <tr><td>Object</td><td>new Object(val:object|function|null=void):object </td><td>Object constructor.</td></tr>",
          "966: <tr><td>create</td><td>create(proto:null|object, properties:object=void):object </td><td>Create a new object with prototype object and properties.</td></tr>",
          "967: <tr><td>getPrototypeOf</td><td>getPrototypeOf(name:object|function):function|object </td><td>Return prototype of an object.</td></tr>",
          "968: <tr><td>hasOwnProperty</td><td>hasOwnProperty(name:string):boolean </td><td>Returns a true if object has the specified property.</td></tr>",
          "969: <tr><td>is</td><td>is(value1, value2):boolean </td><td>Tests if two values are equal.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968: <tr><td>freeze</td><td>freeze(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void </td><td>Freeze an object optionally allowing modify (but not add).</td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1372: <tr><td>parseInt</td><td>parseInt(val:any, base:number=10):number </td><td>Convert string to an integer.</td></tr>",
          "1373: <tr><td>parseOpts</td><td>parseOpts(self:object|userobj, options:object, conf:object|null|undefined=void):object </td><td>Parse module options: same as moduleOpts.</td></tr>",
          "1374: <tr><td>printf</td><td>printf(format:string, ...):void </td><td>Formatted output to stdout.</td></tr>",
          "1376: <tr><td>puts</td><td>puts(val, ...):void </td><td>Output one or more values to stdout. Each argument is quoted.  Use Interp.logOpts to control source line and/or timestamps output.</td></tr>",
          "1377: <tr><td>quote</td><td>quote(val:string):string </td><td>Return quoted string.</td></tr>",
          "1378: <tr><td>require</td><td>require(name:string=void, version:number|string=1, <a href='#System.requireOptions'>options</a>:object=void):number|array|object </td><td>Load/query packages. With no arguments, returns the list of all loaded packages.",
          "",
          "[Removed Lines]",
          "1375: <tr><td>provide</td><td>provide(name:string|null|function=void, version:number|string=void, opts:object|function=void):void </td><td>Provide a package for use with require. Default is the file tail-rootname.</td></tr>",
          "",
          "[Added Lines]",
          "1377: <tr><td>provide</td><td>provide(name:string|null|function=void, version:number|string=void, <a href='#System.provideOptions'>options</a>:object|function=void):void </td><td>Provide a package for use with require.. Default is the file tail-rootname</td></tr>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1421: </table>",
          "1424: <a name=\"System.requireOptions\"></a>",
          "1425: <a name=\"System.confOptions\"></a>",
          "1426: <h2>Options for \"System.require\"</h2>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1426: <a name=\"System.provideOptions\"></a>",
          "1427: <a name=\"System.confOptions\"></a>",
          "1428: <h2>Options for \"System.provide\"</h2>",
          "1429: <table border=\"1\" class=\"optstbl table\">",
          "1430: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "1431: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1432: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1433: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1434: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "1435: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1436: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1437: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "1438: <tr><td>udata</td><td><i>OBJ</i></td><td>User data settable by require.</td><td><i></i></td></tr>",
          "1439: </table>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1429: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1430: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1431: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1432: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1433: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1434: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1450: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    }
  ]
}