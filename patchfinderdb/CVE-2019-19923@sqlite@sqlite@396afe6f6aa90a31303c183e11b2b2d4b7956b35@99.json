{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0933aad72c5ac1a763891c03b231ce72b1d19b03",
      "candidate_info": {
        "commit_hash": "0933aad72c5ac1a763891c03b231ce72b1d19b03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0933aad72c5ac1a763891c03b231ce72b1d19b03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c",
          "src/os_win.c",
          "src/pager.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/tclsqlite.c",
          "src/test_demovfs.c",
          "src/test_vfs.c",
          "test/symlink.test",
          "test/tclsqlite.test"
        ],
        "message": "Add support for SQLITE_OPEN_NOFOLLOW.\n\nFossilOrigin-Name: cb79c828496a703f1410f61458ebc1e15a92a63412b36f51945b2b5a32ec6e88",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/pager.c||src/pager.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/tclsqlite.c||src/tclsqlite.c",
          "src/test_demovfs.c||src/test_demovfs.c",
          "src/test_vfs.c||src/test_vfs.c",
          "test/symlink.test||test/symlink.test",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b67eba54e7b4887a8cdab7537b12a95e9f17bcdaa0b423af5ed5bd91f69f2c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6251:   SimulateIOError( return SQLITE_IOERR_ACCESS; );",
          "6252:   assert( pResOut!=0 );",
          "6258:   if( flags==SQLITE_ACCESS_EXISTS ){",
          "6259:     struct stat buf;",
          "6263:   }",
          "6264:   return SQLITE_OK;",
          "6265: }",
          "",
          "[Removed Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS || flags==SQLITE_ACCESS_READWRITE );",
          "6261:   }else{",
          "",
          "[Added Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS",
          "6257:        || flags==SQLITE_ACCESS_READWRITE",
          "6258:        || flags==SQLITE_ACCESS_SYMLINK );",
          "6263:   }else if( flags==SQLITE_ACCESS_READWRITE ){",
          "6265:   }else{",
          "6266: #if !defined(HAVE_LSTAT)",
          "6268: #else",
          "6269:     struct stat buf;",
          "6271: #endif",
          "6272:     assert( flags==SQLITE_ACCESS_SYMLINK );",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5472:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5473:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5474:       break;",
          "5475:     default:",
          "5476:       assert(!\"Invalid flags argument\");",
          "5477:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5475:     case SQLITE_ACCESS_SYMLINK:",
          "5477:       break;",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4789:   if( zFilename && zFilename[0] ){",
          "4790:     const char *z;",
          "4791:     nPathname = pVfs->mxPathname+1;",
          "4792:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "4793:     if( zPathname==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4791:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4792:       int isLink = 0;",
          "4793:       if( sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink)==0",
          "4794:        && isLink",
          "4795:       ){",
          "4796:         return SQLITE_CANTOPEN_SYMLINK;",
          "4797:       }",
          "4798:     }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3562:   \"        --maxsize N     Maximum size for --hexdb or --deserialized database\",",
          "3563: #endif",
          "3564:   \"        --new           Initialize FILE to an empty database\",",
          "3565:   \"        --readonly      Open FILE readonly\",",
          "3566:   \"        --zip           FILE is a ZIP archive\",",
          "3567:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3566:   \"        --nofollow      Do not follow symbolic links\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4126:     switch( p->openMode ){",
          "4127:       case SHELL_OPEN_APPENDVFS: {",
          "4128:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4130:         break;",
          "4131:       }",
          "4132:       case SHELL_OPEN_HEXDB:",
          "",
          "[Removed Lines]",
          "4129:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, \"apndvfs\");",
          "",
          "[Added Lines]",
          "4131:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, \"apndvfs\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4139:         break;",
          "4140:       }",
          "4141:       case SHELL_OPEN_READONLY: {",
          "4143:         break;",
          "4144:       }",
          "4145:       case SHELL_OPEN_UNSPEC:",
          "4146:       case SHELL_OPEN_NORMAL: {",
          "4148:         break;",
          "4149:       }",
          "4150:     }",
          "",
          "[Removed Lines]",
          "4142:         sqlite3_open_v2(p->zDbFilename, &p->db, SQLITE_OPEN_READONLY, 0);",
          "4147:         sqlite3_open(p->zDbFilename, &p->db);",
          "",
          "[Added Lines]",
          "4144:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4145:             SQLITE_OPEN_READONLY|p->openFlags, 0);",
          "4150:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4151:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8042:     sqlite3_free(p->zFreeOnClose);",
          "8043:     p->zFreeOnClose = 0;",
          "8044:     p->openMode = SHELL_OPEN_UNSPEC;",
          "8045:     p->szMax = 0;",
          "8047:     for(iName=1; iName<nArg && azArg[iName][0]=='-'; iName++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8049:     p->openFlags = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8056:         p->openMode = SHELL_OPEN_APPENDVFS;",
          "8057:       }else if( optionMatch(z, \"readonly\") ){",
          "8058:         p->openMode = SHELL_OPEN_READONLY;",
          "8059: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "8060:       }else if( optionMatch(z, \"deserialize\") ){",
          "8061:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8064:       }else if( optionMatch(z, \"nofollow\") ){",
          "8065:         p->openFlags |= SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9976:   \"   -multiplex           enable the multiplexor VFS\\n\"",
          "9977: #endif",
          "9978:   \"   -newline SEP         set output row separator. Default: '\\\\n'\\n\"",
          "9979:   \"   -nullvalue TEXT      set text string for NULL values. Default ''\\n\"",
          "9980:   \"   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory\\n\"",
          "9981:   \"   -quote               set output mode to 'quote'\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9986:   \"   -nofollow            refuse to open symbolic links to database files\\n\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10286: #endif",
          "10287:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "10288:       data.openMode = SHELL_OPEN_READONLY;",
          "10289: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)",
          "10290:     }else if( strncmp(z, \"-A\",2)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10297:     }else if( strcmp(z,\"-nofollow\")==0 ){",
          "10298:       data.openFlags = SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10389: #endif",
          "10390:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "10391:       data.openMode = SHELL_OPEN_READONLY;",
          "10392:     }else if( strcmp(z,\"-ascii\")==0 ){",
          "10393:       data.mode = MODE_Ascii;",
          "10394:       sqlite3_snprintf(sizeof(data.colSeparator), data.colSeparator,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10402:     }else if( strcmp(z,\"-nofollow\")==0 ){",
          "10403:       data.openFlags |= SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "516: #define SQLITE_CANTOPEN_FULLPATH       (SQLITE_CANTOPEN | (3<<8))",
          "517: #define SQLITE_CANTOPEN_CONVPATH       (SQLITE_CANTOPEN | (4<<8))",
          "519: #define SQLITE_CORRUPT_VTAB            (SQLITE_CORRUPT | (1<<8))",
          "520: #define SQLITE_CORRUPT_SEQUENCE        (SQLITE_CORRUPT | (2<<8))",
          "521: #define SQLITE_READONLY_RECOVERY       (SQLITE_READONLY | (1<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: #define SQLITE_CANTOPEN_SYMLINK        (SQLITE_CANTOPEN | (6<<8))",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3670: ){",
          "3671:   Tcl_WrongNumArgs(interp, 1, objv,",
          "3672:     \"HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN?\"",
          "3673:     \" ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "3674: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3675:     \" ?-key CODECKEY?\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3673:     \" ?-nofollow BOOLEAN?\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3779:       }else{",
          "3780:         flags &= ~SQLITE_OPEN_CREATE;",
          "3781:       }",
          "3782:     }else if( strcmp(zArg, \"-nomutex\")==0 ){",
          "3783:       int b;",
          "3784:       if( Tcl_GetBooleanFromObj(interp, objv[i], &b) ) return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3784:     }else if( strcmp(zArg, \"-nofollow\")==0 ){",
          "3785:       int b;",
          "3786:       if( Tcl_GetBooleanFromObj(interp, objv[i], &b) ) return TCL_ERROR;",
          "3787:       if( b ){",
          "3788:         flags |= SQLITE_OPEN_NOFOLLOW;",
          "3789:       }else{",
          "3790:         flags &= ~SQLITE_OPEN_NOFOLLOW;",
          "3791:       }",
          "",
          "---------------"
        ],
        "src/test_demovfs.c||src/test_demovfs.c": [
          "File: src/test_demovfs.c -> src/test_demovfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:   );",
          "513:   if( flags==SQLITE_ACCESS_READWRITE ) eAccess = R_OK|W_OK;",
          "514:   if( flags==SQLITE_ACCESS_READ )      eAccess = R_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:   if( flags==SQLITE_ACCESS_SYMLINK ){",
          "517:     return SQLITE_OK;",
          "518:   }",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:     if( flags==SQLITE_ACCESS_EXISTS ) zArg = \"SQLITE_ACCESS_EXISTS\";",
          "733:     if( flags==SQLITE_ACCESS_READWRITE ) zArg = \"SQLITE_ACCESS_READWRITE\";",
          "734:     if( flags==SQLITE_ACCESS_READ ) zArg = \"SQLITE_ACCESS_READ\";",
          "735:     tvfsExecTcl(p, \"xAccess\",",
          "736:         Tcl_NewStringObj(zPath, -1), Tcl_NewStringObj(zArg, -1), 0, 0",
          "737:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735:     if( flags==SQLITE_ACCESS_SYMLINK ) zArg = \"SQLITE_ACCESS_SYMLINK\";",
          "",
          "---------------"
        ],
        "test/symlink.test||test/symlink.test": [
          "File: test/symlink.test -> test/symlink.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3_db_filename db2 main",
          "38: } [file join [pwd] test.db]",
          "40: # Test that if the symlink points to a file that does not exists, it is",
          "41: # created when it is opened.",
          "42: #",
          "43: do_test 1.2.1 {",
          "45:   db close",
          "46:   forcedelete test.db",
          "47:   file exists test.db",
          "",
          "[Removed Lines]",
          "44:   db2 close",
          "",
          "[Added Lines]",
          "40: # But not with the -nofollow flag",
          "41: #",
          "42: do_test 1.1.2 {",
          "43:   db2 close",
          "44:   set rc [catch {sqlite3 db2 test.db2 -nofollow 1} msg]",
          "45:   lappend rc $msg",
          "46: } {1 {unable to open database file}}",
          "48: # If the main database is successfully opened with -nofollow, then -nofollow",
          "49: # is also used for ATTACH.",
          "50: #",
          "51: do_test 1.1.3 {",
          "52:   catch {db2 close}",
          "53:   sqlite3 db2 test.db -nofollow 1",
          "54: } {}",
          "55: do_test 1.1.4 {",
          "56:   catchsql {ATTACH 'test.db2' AS aux1;} db2",
          "57: } {1 {unable to open database: test.db2}}",
          "63:   catch {db2 close}",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: # Check the error messages generated by tclsqlite",
          "27: #",
          "29: if {[sqlite3 -has-codec]} {",
          "30:   append r \" ?-key CODECKEY?\"",
          "31: }",
          "",
          "[Removed Lines]",
          "28: set r \"sqlite_orig HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN? ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "",
          "[Added Lines]",
          "28: set r \"sqlite_orig HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN? ?-nofollow BOOLEAN? ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d950af311f8db2c34efa5da0256477794b9c3dd",
      "candidate_info": {
        "commit_hash": "0d950af311f8db2c34efa5da0256477794b9c3dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d950af311f8db2c34efa5da0256477794b9c3dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/where.c",
          "src/whereexpr.c",
          "test/whereG.test"
        ],
        "message": "Fix the likely(), unlikely(), and likelihood() functions so that they have no affinity, just like any other function. Ticket [7e07a3dbf5a8cd26]\n\nFossilOrigin-Name: 44578865fa7baf9760e355691ca9ce753295aaba7a4ee0bba29d4f85d9335bab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e62eddbb048cbc2c15cb8eeb5b7a907e7cb08c21a27ebba96a069f62dbcb0f30",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: }",
          "112: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "113:   while( pExpr && ExprHasProperty(pExpr, EP_Skip|EP_Unlikely) ){",
          "114:     if( ExprHasProperty(pExpr, EP_Unlikely) ){",
          "115:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "113:     assert( pExpr->op==TK_COLLATE );",
          "114:     pExpr = pExpr->pLeft;",
          "115:   }",
          "116:   return pExpr;",
          "117: }",
          "124: Expr *sqlite3ExprSkipCollateAndLikely(Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3384: static void exprToRegister(Expr *pExpr, int iReg){",
          "3386:   p->op2 = p->op;",
          "3387:   p->op = TK_REGISTER;",
          "3388:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3385:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "3397:   Expr *p = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4191: int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){",
          "4192:   int r2;",
          "4194:   if( ConstFactorOk(pParse)",
          "4195:    && pExpr->op!=TK_REGISTER",
          "4196:    && sqlite3ExprIsConstantNotJoin(pExpr)",
          "",
          "[Removed Lines]",
          "4193:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "4205:   pExpr = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4934: int sqlite3ExprCompareSkip(Expr *pA, Expr *pB, int iTab){",
          "4935:   return sqlite3ExprCompare(0,",
          "4938:              iTab);",
          "4939: }",
          "",
          "[Removed Lines]",
          "4936:              sqlite3ExprSkipCollate(pA),",
          "4937:              sqlite3ExprSkipCollate(pB),",
          "",
          "[Added Lines]",
          "4948:              sqlite3ExprSkipCollateAndLikely(pA),",
          "4949:              sqlite3ExprSkipCollateAndLikely(pB),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5143: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5144:   Walker w;",
          "5146:   while( p ){",
          "5147:     if( p->op==TK_NOTNULL ){",
          "5148:       p = p->pLeft;",
          "",
          "[Removed Lines]",
          "5145:   p = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "5157:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:     }",
          "974:     case TK_IS:",
          "975:     case TK_ISNOT: {",
          "977:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "",
          "[Removed Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "",
          "[Added Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollateAndLikely(pExpr->pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1184:       int iCol = -1;",
          "1185:       Expr *pE, *pDup;",
          "1186:       if( pItem->done ) continue;",
          "1188:       if( sqlite3ExprIsInteger(pE, &iCol) ){",
          "1189:         if( iCol<=0 || iCol>pEList->nExpr ){",
          "1190:           resolveOutOfRangeError(pParse, \"ORDER\", i+1, pEList->nExpr);",
          "",
          "[Removed Lines]",
          "1187:       pE = sqlite3ExprSkipCollate(pItem->pExpr);",
          "",
          "[Added Lines]",
          "1187:       pE = sqlite3ExprSkipCollateAndLikely(pItem->pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1363:   pParse = pNC->pParse;",
          "1364:   for(i=0, pItem=pOrderBy->a; i<pOrderBy->nExpr; i++, pItem++){",
          "1365:     Expr *pE = pItem->pExpr;",
          "1367:     if( zType[0]!='G' ){",
          "1368:       iCol = resolveAsName(pParse, pSelect->pEList, pE2);",
          "1369:       if( iCol>0 ){",
          "",
          "[Removed Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollate(pE);",
          "",
          "[Added Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1960:     if( (zName = pEList->a[i].zName)!=0 ){",
          "1962:     }else{",
          "1964:       while( pColExpr->op==TK_DOT ){",
          "1965:         pColExpr = pColExpr->pRight;",
          "1966:         assert( pColExpr!=0 );",
          "",
          "[Removed Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollate(pEList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4274: Expr *sqlite3ExprAddCollateToken(Parse *pParse, Expr*, const Token*, int);",
          "4275: Expr *sqlite3ExprAddCollateString(Parse*,Expr*,const char*);",
          "4276: Expr *sqlite3ExprSkipCollate(Expr*);",
          "4277: int sqlite3CheckCollSeq(Parse *, CollSeq *);",
          "4278: int sqlite3WritableSchema(sqlite3*);",
          "4279: int sqlite3CheckObjectName(Parse*, const char*,const char*,const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4277: Expr *sqlite3ExprSkipCollateAndLikely(Expr*);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:         ){",
          "254:           if( (pTerm->eOperator & WO_EQUIV)!=0",
          "255:            && pScan->nEquiv<ArraySize(pScan->aiCur)",
          "257:           ){",
          "258:             int j;",
          "259:             for(j=0; j<pScan->nEquiv; j++){",
          "",
          "[Removed Lines]",
          "256:            && (pX = sqlite3ExprSkipCollate(pTerm->pExpr->pRight))->op==TK_COLUMN",
          "",
          "[Added Lines]",
          "256:            && (pX = sqlite3ExprSkipCollateAndLikely(pTerm->pExpr->pRight))->op",
          "257:                ==TK_COLUMN",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:   const char *zColl = pIdx->azColl[iCol];",
          "451:   for(i=0; i<pList->nExpr; i++){",
          "453:     if( p->op==TK_COLUMN",
          "454:      && p->iColumn==pIdx->aiColumn[iCol]",
          "455:      && p->iTable==iBase",
          "",
          "[Removed Lines]",
          "452:     Expr *p = sqlite3ExprSkipCollate(pList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "453:     Expr *p = sqlite3ExprSkipCollateAndLikely(pList->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:   for(i=0; i<pDistinct->nExpr; i++){",
          "517:     if( p->op==TK_COLUMN && p->iTable==iBase && p->iColumn<0 ) return 1;",
          "518:   }",
          "",
          "[Removed Lines]",
          "516:     Expr *p = sqlite3ExprSkipCollate(pDistinct->a[i].pExpr);",
          "",
          "[Added Lines]",
          "517:     Expr *p = sqlite3ExprSkipCollateAndLikely(pDistinct->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2769:   if( pIndex->bUnordered ) return 0;",
          "2770:   if( (pOB = pBuilder->pWInfo->pOrderBy)==0 ) return 0;",
          "2771:   for(ii=0; ii<pOB->nExpr; ii++){",
          "2773:     if( pExpr->op==TK_COLUMN && pExpr->iTable==iCursor ){",
          "2774:       if( pExpr->iColumn<0 ) return 1;",
          "2775:       for(jj=0; jj<pIndex->nKeyCol; jj++){",
          "",
          "[Removed Lines]",
          "2772:     Expr *pExpr = sqlite3ExprSkipCollate(pOB->a[ii].pExpr);",
          "",
          "[Added Lines]",
          "2773:     Expr *pExpr = sqlite3ExprSkipCollateAndLikely(pOB->a[ii].pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3710:     for(i=0; i<nOrderBy; i++){",
          "3711:       if( MASKBIT(i) & obSat ) continue;",
          "3713:       if( pOBExpr->op!=TK_COLUMN ) continue;",
          "3714:       if( pOBExpr->iTable!=iCur ) continue;",
          "3715:       pTerm = sqlite3WhereFindTerm(&pWInfo->sWC, iCur, pOBExpr->iColumn,",
          "",
          "[Removed Lines]",
          "3712:       pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3713:       pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3829:         isMatch = 0;",
          "3830:         for(i=0; bOnce && i<nOrderBy; i++){",
          "3831:           if( MASKBIT(i) & obSat ) continue;",
          "3833:           testcase( wctrlFlags & WHERE_GROUPBY );",
          "3834:           testcase( wctrlFlags & WHERE_DISTINCTBY );",
          "3835:           if( (wctrlFlags & (WHERE_GROUPBY|WHERE_DISTINCTBY))==0 ) bOnce = 0;",
          "",
          "[Removed Lines]",
          "3832:           pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3833:           pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   }else{",
          "85:     pTerm->truthProb = 1;",
          "86:   }",
          "88:   pTerm->wtFlags = wtFlags;",
          "89:   pTerm->pWC = pWC;",
          "90:   pTerm->iParent = -1;",
          "",
          "[Removed Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453: void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){",
          "1455:   pWC->op = op;",
          "1456:   if( pE2==0 ) return;",
          "1457:   if( pE2->op!=op ){",
          "",
          "[Removed Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   SELECT coalesce(a,a), x FROM t1, t2 ORDER BY 1, 2;",
          "267: } {1 3 1 4 9 3 9 4}",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: # 2019-08-22",
          "270: # Ticket https://www.sqlite.org/src/info/7e07a3dbf5a8cd26",
          "271: #",
          "272: do_execsql_test 8.1 {",
          "273:   DROP TABLE IF EXISTS t0;",
          "274:   CREATE TABLE t0 (c0);",
          "275:   INSERT INTO t0(c0) VALUES ('a');",
          "276:   SELECT LIKELY(t0.rowid) <= '0' FROM t0;",
          "277: } {1}",
          "278: do_execsql_test 8.2 {",
          "279:   SELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0';",
          "280: } {a}",
          "281: do_execsql_test 8.3 {",
          "282:   SELECT (t0.rowid) <= '0' FROM t0;",
          "283: } {0}",
          "284: do_execsql_test 8.4 {",
          "285:   SELECT * FROM t0 WHERE (t0.rowid) <= '0';",
          "286: } {}",
          "287: do_execsql_test 8.5 {",
          "288:   SELECT unlikely(t0.rowid) <= '0', likelihood(t0.rowid,0.5) <= '0' FROM t0;",
          "289: } {1 1}",
          "290: do_execsql_test 8.6 {",
          "291:   SELECT * FROM t0 WHERE unlikely(t0.rowid) <= '0';",
          "292: } {a}",
          "293: do_execsql_test 8.7 {",
          "294:   SELECT * FROM t0 WHERE likelihood(t0.rowid, 0.5) <= '0';",
          "295: } {a}",
          "296: do_execsql_test 8.8 {",
          "297:   SELECT unlikely(t0.rowid <= '0'),",
          "298:          likely(t0.rowid <= '0'),",
          "299:          likelihood(t0.rowid <= '0',0.5)",
          "300:     FROM t0;",
          "301: } {0 0 0}",
          "302: do_execsql_test 8.9 {",
          "303:   SELECT * FROM t0 WHERE unlikely(t0.rowid <= '0');",
          "304: } {}",
          "305: do_execsql_test 8.10 {",
          "306:   SELECT * FROM t0 WHERE likelihood(t0.rowid <= '0', 0.5);",
          "307: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba14c69b4fc447c3749308a3d889b0da55083e5d",
      "candidate_info": {
        "commit_hash": "ba14c69b4fc447c3749308a3d889b0da55083e5d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ba14c69b4fc447c3749308a3d889b0da55083e5d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/corruptL.test"
        ],
        "message": "Fix a couple of assert() statments in btree.c that could fail with corrupt databases.\n\nFossilOrigin-Name: 5eb5e8289fa71e5e29e081d33d4a59c64b463bf6b06d7070c05c46d77d808ad4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0d5689371577b2861d4a9464443d055f3256f3f51d89e0388233a4cbe2601ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6110:     TRACE((\"ALLOCATE: %d from end of file\\n\", *pPgno));",
          "6111:   }",
          "6115: end_allocate_page:",
          "6116:   releasePage(pTrunk);",
          "",
          "[Removed Lines]",
          "6113:   assert( *pPgno!=PENDING_BYTE_PAGE(pBt) );",
          "",
          "[Added Lines]",
          "6113:   assert( CORRUPT_DB || *pPgno!=PENDING_BYTE_PAGE(pBt) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7175:     CellArray b;",
          "7177:     assert( sqlite3PagerIswriteable(pNew->pDbPage) );",
          "7179:     zeroPage(pNew, PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF);",
          "7180:     b.nCell = 1;",
          "7181:     b.pRef = pPage;",
          "",
          "[Removed Lines]",
          "7178:     assert( pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) );",
          "",
          "[Added Lines]",
          "7178:     assert( CORRUPT_DB || pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) );",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "376: } {1 {database disk image is malformed}}",
          "379: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379: #-------------------------------------------------------------------------",
          "380: reset_db",
          "381: do_test 5.0 {",
          "382:   sqlite3 db {}",
          "383:   db deserialize [decode_hexdb {",
          "384: | size 192512 pagesize 4096 filename crash-9ae5502296c949.db",
          "385: | page 1 offset 0",
          "386: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "387: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 2f   .....@  ......./",
          "388: |     32: 00 00 00 1b 00 00 00 13 00 00 00 03 00 00 00 04   ................",
          "389: |     48: 00 00 00 00 00 00 00 06 00 00 00 01 00 00 00 00   ................",
          "390: |     64: 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "391: |     96: 00 00 00 00 0d 00 00 00 04 0e e2 00 0f 96 0f 44   ...............D",
          "392: |    112: 0f 10 0e e2 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "393: |   3808: 00 00 2c 04 06 17 15 11 01 41 69 6e 64 65 78 74   ..,......Aindext",
          "394: |   3824: 31 78 32 74 31 06 43 52 45 41 54 45 20 49 4e 44   1x2t1.CREATE IND",
          "395: |   3840: 45 58 20 74 31 78 32 20 4f 4e 20 74 31 28 62 29   EX t1x2 ON t1(b)",
          "396: |   3856: 32 03 06 17 15 11 01 4d 69 6e 64 65 78 74 31 78   2......Mindext1x",
          "397: |   3872: 31 74 31 05 43 52 45 41 54 45 20 49 4e 44 45 58   1t1.CREATE INDEX",
          "398: |   3888: 20 74 31 78 31 20 4f 4e 20 74 31 28 67 2b 68 2c    t1x1 ON t1(g+h,",
          "399: |   3904: 6a 2c 6b 29 50 02 06 17 2b 2b 01 59 74 61 62 6c   j,k)P...++.Ytabl",
          "400: |   3920: 65 73 71 6c 69 74 65 5f 73 65 71 75 65 6e 63 65   esqlite_sequence",
          "401: |   3936: 73 71 6c 69 74 65 5f 73 65 71 75 65 6e 63 65 04   sqlite_sequence.",
          "402: |   3952: 43 52 45 41 54 45 20 54 41 42 4c 45 20 73 71 6c   CREATE TABLE sql",
          "403: |   3968: 69 74 65 5f 73 65 71 75 65 6e 63 65 28 6e 61 6d   ite_sequence(nam",
          "404: |   3984: 65 2c 73 65 71 29 68 01 07 17 11 11 01 81 3b 74   e,seq)h.......;t",
          "405: |   4000: 61 62 6c 65 74 31 74 31 03 43 52 45 41 54 45 20   ablet1t1.CREATE",
          "406: |   4016: 54 41 42 4c 45 20 74 31 28 61 20 49 4e 54 45 47   TABLE t1(a INTEG",
          "407: |   4032: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 20 41   ER PRIMARY KEY A",
          "408: |   4048: 55 54 4f 49 4e 43 52 45 4d 45 4e 54 2c 0a 62 2c   UTOINCREMENT,.b,",
          "409: |   4064: 63 2c 64 2c 65 2c 66 2c 67 2c 68 2c 6a 2c 6b 2c   c,d,e,f,g,h,j,k,",
          "410: |   4080: 6c 2c 6d 2c 6e 2c 6f 2c 70 2c 71 2c 72 2c 73 29   l,m,n,o,p,q,r,s)",
          "411: | page 2 offset 4096",
          "412: |      0: 01 00 00 00 00 01 00 00 00 00 01 00 00 00 00 01   ................",
          "413: |     16: 00 00 00 00 02 10 00 00 00 05 00 00 00 03 02 00   ................",
          "414: |     32: 00 00 00 05 00 00 00 03 02 00 00 00 00 05 00 00   ................",
          "415: |     48: 00 03 02 00 00 00 00 05 00 00 00 03 02 00 00 00   ................",
          "416: |     64: 00 05 00 00 00 03 02 00 00 00 00 05 00 00 00 03   ................",
          "417: |     80: 02 00 00 00 00 05 00 00 00 03 02 00 00 00 00 05   ................",
          "418: |     96: 00 00 00 03 02 00 00 00 00 05 00 00 00 03 05 00   ................",
          "419: |    112: 00 00 03 03 00 00 00 23 02 00 00 00 00 03 00 00   .......#........",
          "420: |    128: 00 23 02 00 00 00 00 03 00 00 00 23 02 00 00 00   .#.........#....",
          "421: |    144: 00 03 00 00 00 23 02 00 00 00 00 03 00 00 00 23   .....#.........#",
          "422: |    160: 05 00 00 00 06 05 00 00 00 06 02 00 00 00 00 03   ................",
          "423: |    176: 00 00 00 06 02 00 00 00 00 03 00 00 00 24 02 00   .............$..",
          "424: |    192: 00 00 00 03 00 00 00 24 02 00 00 00 00 03 00 00   .......$........",
          "425: |    208: 00 24 02 00 00 00 00 02 00 00 00 00 03 00 00 00   .$..............",
          "426: |    224: 24 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   $...............",
          "427: | page 3 offset 8192",
          "428: |      0: 05 00 00 00 09 0f d0 00 00 00 00 19 0f fb 0f f6   ................",
          "429: |     16: 0f f1 0f ec 0f e7 0f e2 0f dc 0f d6 0f d0 0f a0   ................",
          "430: |     32: 0f a0 0f a0 0f a0 0f a0 0f a0 0f a0 0f a0 0f a0   ................",
          "431: |   1072: 00 97 4c 0a 14 00 ae 7c 00 00 00 00 00 00 00 00   ..L....|........",
          "432: |   1088: 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00   ................",
          "433: |   4000: 0f ac 00 06 00 00 00 00 00 30 00 00 00 00 00 00   .........0......",
          "434: |   4048: 00 00 00 16 81 2a 00 00 00 14 81 16 00 00 00 12   .....*..........",
          "435: |   4064: 81 02 00 00 00 10 6e 00 00 00 0e 5a 00 00 00 0c   ......n....Z....",
          "436: |   4080: 46 00 00 00 0a 32 00 00 00 08 1e 00 00 00 18 0a   F....2..........",
          "437: | page 4 offset 12288",
          "438: |      0: 0d 00 00 00 01 0f f7 00 0f f7 00 00 00 00 00 00   ................",
          "439: |   4080: 00 00 00 00 00 00 00 07 01 03 11 02 74 31 00 be   ............t1..",
          "440: | page 5 offset 16384",
          "441: |      0: 0a 0f 7c 00 0a 0f 74 00 0f f9 0f eb 0f dd 0f cf   ..|...t.........",
          "442: |     16: 0f c1 0f b3 0f a4 0f 94 0f 84 0f 74 0f 74 0f 74   ...........t.t.t",
          "443: |     32: 0f 74 0f 74 0f 74 0f 74 0f 74 0f 74 0f 74 00 00   .t.t.t.t.t.t.t..",
          "444: |   3952: 00 00 00 00 07 05 00 00 00 02 00 be 0f 8c 00 08   ................",
          "445: |   3968: 00 00 00 00 07 05 00 00 00 02 00 aa 0f 9c 00 08   ................",
          "446: |   3984: 00 00 00 00 07 05 00 00 00 02 00 96 0f ac 00 08   ................",
          "447: |   4000: 00 00 00 00 07 05 00 00 00 02 00 82 0f ba 00 07   ................",
          "448: |   4016: 00 00 00 06 05 00 00 00 01 6e 0f c8 00 07 00 00   .........n......",
          "449: |   4032: 00 06 05 00 00 00 01 5a 0f d6 00 07 00 00 00 06   .......Z........",
          "450: |   4048: 05 00 00 00 01 46 0f e4 00 07 00 00 00 06 05 00   .....F..........",
          "451: |   4064: 00 00 01 32 0f f2 00 07 00 00 00 06 05 00 00 00   ...2............",
          "452: |   4080: 01 1e 00 00 00 07 00 00 00 06 05 00 00 00 01 0a   ................",
          "453: | page 6 offset 20480",
          "454: |      0: 02 00 00 00 01 0e 0d 00 00 00 00 24 0e 0d 0c 1a   ...........$....",
          "455: |     16: 06 55 04 66 02 77 00 88 00 00 00 00 00 00 00 00   .U.f.w..........",
          "456: |    128: 00 00 00 00 00 00 00 00 97 3d 04 ae 7c 01 00 00   .........=..|...",
          "457: |    624: 00 00 00 00 00 00 21 97 3d 04 ae 7c 01 00 00 00   ......!.=..|....",
          "458: |   1120: 00 00 00 00 00 20 97 3d 04 ae 7c 01 00 00 00 00   ..... .=..|.....",
          "459: |   1616: 00 00 00 00 1f 97 3d 04 ae 7c 01 00 00 00 00 00   ......=..|......",
          "460: |   2112: 00 00 00 1e 97 3d 04 ae 7c 01 00 00 00 00 00 00   .....=..|.......",
          "461: |   2608: 00 00 1d 97 3d 04 ae 7c 01 00 00 00 00 00 00 00   ....=..|........",
          "462: |   3088: 00 00 00 00 00 00 00 00 00 00 00 00 01 f3 00 00   ................",
          "463: |   3600: 23 97 3d 04 ae 7c 01 00 00 00 00 00 00 00 00 00   #.=..|..........",
          "464: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 26   ...............&",
          "465: | page 8 offset 28672",
          "466: |      0: 0d 00 00 00 01 04 30 00 04 30 00 00 00 00 00 00   ......0..0......",
          "467: |   1072: 97 4d 1e 14 00 ae 7c 00 00 00 00 00 00 00 00 00   .M....|.........",
          "468: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "469: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03   ................",
          "470: | page 10 offset 36864",
          "471: |    256: 0d 00 00 00 01 04 30 00 04 30 00 00 00 00 00 00   ......0..0......",
          "472: |   1072: 97 4d 32 14 00 ae 7c 00 00 00 00 00 00 00 00 00   .M2...|.........",
          "473: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "474: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05   ................",
          "475: | page 12 offset 45056",
          "476: |      0: 0d 00 00 00 01 04 30 00 04 30 00 00 00 00 00 00   ......0..0......",
          "477: |   1072: 97 4d 46 14 00 ae 7c 00 00 00 00 00 00 00 00 00   .MF...|.........",
          "478: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "479: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07   ................",
          "480: | page 14 offset 53248",
          "481: |      0: 0d 00 00 00 01 04 30 00 04 30 00 00 00 00 00 00   ......0..0......",
          "482: |   1072: 97 4d 5a 14 00 ae 7c 00 00 00 00 00 00 00 00 00   .MZ...|.........",
          "483: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "484: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09   ................",
          "485: | page 16 offset 61440",
          "486: |      0: 0d 00 00 00 01 04 30 00 04 30 00 00 00 00 00 00   ......0..0......",
          "487: |   1072: 97 4d 6e 14 00 ae 7c 00 00 00 00 00 00 00 00 00   .Mn...|.........",
          "488: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "489: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0b   ................",
          "490: | page 18 offset 69632",
          "491: |      0: 0d 00 00 00 01 04 2f 00 04 2f 00 00 00 00 00 00   ....../../......",
          "492: |   1056: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 97   ................",
          "493: |   1072: 4d 81 02 14 00 ae 7c 00 00 00 00 00 00 00 00 00   M.....|.........",
          "494: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "495: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0d   ................",
          "496: | page 20 offset 77824",
          "497: |      0: 0d 00 00 00 01 04 2f 00 04 2f 00 00 00 00 00 00   ....../../......",
          "498: |   1056: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 97   ................",
          "499: |   1072: 4d 81 16 14 00 ae 7c 00 00 00 00 00 00 00 00 00   M.....|.........",
          "500: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "501: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f   ................",
          "502: | page 22 offset 86016",
          "503: |      0: 0d 00 00 00 01 04 2f 00 04 2f 00 00 00 00 00 00   ....../../......",
          "504: |   1056: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 97   ................",
          "505: |   1072: 4d 81 2a 14 00 ae 7c 00 00 00 00 00 00 00 00 00   M.*...|.........",
          "506: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "507: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11   ................",
          "508: | page 24 offset 94208",
          "509: |      0: 0d 00 00 00 01 04 31 00 04 31 00 00 00 00 00 00   ......1..1......",
          "510: |   1072: 00 97 4c 0a 14 00 ae 7c 00 00 00 00 00 00 00 00   ..L....|........",
          "511: |   1088: 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00   ................",
          "512: | page 25 offset 98304",
          "513: |      0: 0d 00 00 00 01 04 2f 00 04 2f 00 00 00 00 00 00   ....../../......",
          "514: |   1056: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 97   ................",
          "515: |   1072: 4d 81 3e 14 00 ae 7c 00 00 00 00 00 00 00 00 00   M.>...|.........",
          "516: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "517: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13   ................",
          "518: | page 26 offset 102400",
          "519: |   2512: 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 00   ................",
          "520: | page 27 offset 106496",
          "521: |      0: 00 00 00 00 00 00 00 12 00 00 00 07 00 00 00 1d   ................",
          "522: |     16: 00 00 00 09 00 00 00 1f 00 00 00 0b 00 00 00 21   ...............!",
          "523: |     32: 00 00 00 0d 00 00 00 25 00 00 00 0f 00 00 00 19   .......%........",
          "524: |     48: 00 00 00 11 00 00 00 29 00 00 00 13 00 00 00 2b   .......).......+",
          "525: |     64: 00 00 00 15 00 00 00 2d 00 00 00 2e 00 00 00 17   .......-........",
          "526: | page 28 offset 110592",
          "527: |   2512: 00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00 00   ................",
          "528: | page 30 offset 118784",
          "529: |   2512: 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 00   .......2........",
          "530: | page 32 offset 126976",
          "531: |   2512: 00 00 00 00 00 00 00 46 00 00 00 00 00 00 00 00   .......F........",
          "532: | page 34 offset 135168",
          "533: |   2512: 00 00 00 00 00 00 00 5a 00 00 00 00 00 00 00 00   .......Z........",
          "534: | page 35 offset 139264",
          "535: |      0: 0a 08 44 00 05 02 77 00 0e 11 0a 33 06 55 02 77   ..D...w....3.U.w",
          "536: |     16: 04 66 00 88 00 88 00 88 00 00 00 00 00 00 00 00   .f..............",
          "537: |    128: 00 00 00 00 00 00 00 00 04 66 01 ef 00 00 00 00   .........f......",
          "538: |    624: 00 00 00 00 00 00 00 97 3d 04 ae 7c 01 00 00 00   ........=..|....",
          "539: |   1120: 00 00 00 00 00 20 97 3d 04 ae 7c 01 00 00 00 00   ..... .=..|.....",
          "540: |   1616: 00 00 00 00 22 97 3d 04 ae 7c 01 00 00 00 00 00   ......=..|......",
          "541: |   2112: 00 00 00 1e 0c 22 01 ef 00 00 00 00 00 00 00 00   ................",
          "542: |   2608: 00 00 00 97 3d 04 ae 7c 01 00 00 00 00 00 00 00   ....=..|........",
          "543: |   3104: 00 1c 00 00 01 ef 00 00 00 00 00 00 00 00 00 00   ................",
          "544: |   3600: 00 97 3d 04 ae 7c 01 00 00 00 00 00 00 00 00 00   ..=..|..........",
          "545: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1a   ................",
          "546: | page 36 offset 143360",
          "547: |      0: 0a 08 44 00 04 02 77 00 06 55 02 77 04 66 0e 11   ..D...w..U.w.f..",
          "548: |     16: 00 88 00 88 00 88 0e 11 00 00 00 00 00 00 00 00   ................",
          "549: |    128: 00 00 00 00 00 00 00 00 04 76 01 ef 00 00 00 00   .........v......",
          "550: |    624: 00 00 00 00 00 00 00 97 3e 04 ae 7c 02 00 00 00   ........>..|....",
          "551: |   1120: 00 00 00 00 00 2a 97 3e 04 ae 7c 02 00 00 00 00   .....*.>..|.....",
          "552: |   1616: 00 00 00 00 2c 97 3e 04 ae 7c 02 00 00 00 00 00   ....,.>..|......",
          "553: |   2112: 00 00 00 28 00 00 05 cd 00 00 00 00 00 00 00 00   ...(............",
          "554: |   3600: 00 97 3e 04 ae 7c 02 00 00 00 00 00 00 00 00 00   ..>..|..........",
          "555: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2f   .............../",
          "556: | page 38 offset 151552",
          "557: |   2512: 00 00 00 00 00 00 00 6e 00 00 00 00 00 00 00 00   .......n........",
          "558: | page 40 offset 159744",
          "559: |   2512: 00 00 00 00 00 00 00 00 82 00 00 00 00 00 00 00   ................",
          "560: | page 42 offset 167936",
          "561: |   2512: 00 00 00 00 00 00 00 00 96 00 00 00 00 00 00 00   ................",
          "562: | page 44 offset 176128",
          "563: |   2512: 00 00 00 00 00 00 00 00 aa 00 00 00 00 00 00 00   ................",
          "564: | page 47 offset 188416",
          "565: |   2512: 00 00 00 00 00 00 00 00 be 00 00 00 00 00 00 00   ................",
          "566: | end crash-9ae5502296c949.db",
          "567: }]} {}",
          "569: do_catchsql_test 5.1 {",
          "570:   INSERT INTO t1(b) VALUES(zeroblob(40000));",
          "571: } {1 {database disk image is malformed}}",
          "573: do_catchsql_test 5.2 {",
          "574:   DROP INDEX t1x2;",
          "575: } {0 {}}",
          "577: do_catchsql_test 5.3 {",
          "578:   INSERT INTO t1(b) VALUES(zeroblob(40000));",
          "579: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2829df082cdf5feea6cc0be95bf517dd49d33319",
      "candidate_info": {
        "commit_hash": "2829df082cdf5feea6cc0be95bf517dd49d33319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2829df082cdf5feea6cc0be95bf517dd49d33319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Remove an unused variable.\n\nFossilOrigin-Name: a19884455b9bafcdc769362d61cfd02df1b5643263e004cb533698bbcfca752b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5fe15c1d8383989257e11d1806e6b035acacd1b504ae385ba58d20db10f26eee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1587:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1588:       int addrIf = 0;",
          "1590:       if( pWin->pFilter ){",
          "1591:         int regTmp;",
          "1592:         assert( pWin->bExprArgs || !nArg ||nArg==pWin->pOwner->x.pList->nExpr );",
          "",
          "[Removed Lines]",
          "1589:       int addrIf2 = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1627:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1628:       }",
          "1629:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1631:     }",
          "1632:   }",
          "1633: }",
          "",
          "[Removed Lines]",
          "1630:       if( addrIf2 ) sqlite3VdbeJumpHere(v, addrIf2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a015d3c82f295994186f1b95b1f0004ad2004d03",
      "candidate_info": {
        "commit_hash": "a015d3c82f295994186f1b95b1f0004ad2004d03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a015d3c82f295994186f1b95b1f0004ad2004d03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a problem in the legacy \".explain on\" formatting when it is used on a query with more than 8 output columns.\n\nFossilOrigin-Name: 070b49825c5f87cce15be4b758f0dfdd65226ec379465ca527a18706a1f3b8f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 346bdd49fb93aa58e8bd14250974d8c0c32cc7e8317c8b12da1fa44db10d8a3a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1855:       const int *colWidth;",
          "1856:       int showHdr;",
          "1857:       char *rowSep;",
          "1858:       if( p->cMode==MODE_Column ){",
          "1859:         colWidth = p->colWidth;",
          "1860:         showHdr = p->showHeader;",
          "1861:         rowSep = p->rowSeparator;",
          "1862:       }else{",
          "1863:         colWidth = aExplainWidths;",
          "1864:         showHdr = 1;",
          "1865:         rowSep = SEP_Row;",
          "1866:       }",
          "1867:       if( p->cnt++==0 ){",
          "1868:         for(i=0; i<nArg; i++){",
          "1869:           int w, n;",
          "1871:             w = colWidth[i];",
          "1872:           }else{",
          "1873:             w = 0;",
          "",
          "[Removed Lines]",
          "1870:           if( i<ArraySize(p->colWidth) ){",
          "",
          "[Added Lines]",
          "1858:       int nWidth;",
          "1861:         nWidth = ArraySize(p->colWidth);",
          "1866:         nWidth = ArraySize(aExplainWidths);",
          "1873:           if( i<nWidth ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}