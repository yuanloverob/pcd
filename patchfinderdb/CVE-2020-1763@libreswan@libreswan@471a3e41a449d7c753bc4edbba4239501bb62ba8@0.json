{
  "cve_id": "CVE-2020-1763",
  "cve_desc": "An out-of-bounds buffer read flaw was found in the pluto daemon of libreswan from versions 3.27 till 3.31 where, an unauthenticated attacker could use this flaw to crash libreswan by sending specially-crafted IKEv1 Informational Exchange packets. The daemon respawns after the crash.",
  "repo": "libreswan/libreswan",
  "patch_hash": "471a3e41a449d7c753bc4edbba4239501bb62ba8",
  "patch_info": {
    "commit_hash": "471a3e41a449d7c753bc4edbba4239501bb62ba8",
    "repo": "libreswan/libreswan",
    "commit_url": "https://github.com/libreswan/libreswan/commit/471a3e41a449d7c753bc4edbba4239501bb62ba8",
    "files": [
      "programs/pluto/ikev1.c"
    ],
    "message": "security: Fix for CVE-2020-1763\n\npluto will crash on a null pointer dereference when trying to log an error\nfor an IKEv1 packet containing bogus information and/or flags.\n\nSigned-off-by: Paul Wouters <pwouters@redhat.com>",
    "before_after_code_files": [
      "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
    ]
  },
  "patch_diff": {
    "programs/pluto/ikev1.c||programs/pluto/ikev1.c": [
      "File: programs/pluto/ikev1.c -> programs/pluto/ikev1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2129:       \"%smessage ignored because it contains a payload type (%s) unexpected by state %s\",",
      "2130:       excuse,",
      "2131:       enum_show(&ikev1_payload_names, np),",
      "2133:      if (!md->encrypted) {",
      "2134:       SEND_NOTIFICATION(INVALID_PAYLOAD_TYPE);",
      "2135:      }",
      "",
      "[Removed Lines]",
      "2132:       st->st_state->name);",
      "",
      "[Added Lines]",
      "2132:       finite_states[smc->state]->name);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f556fdd2eae5889b60fc2a4ce338e2141a1d765b",
      "candidate_info": {
        "commit_hash": "f556fdd2eae5889b60fc2a4ce338e2141a1d765b",
        "repo": "libreswan/libreswan",
        "commit_url": "https://github.com/libreswan/libreswan/commit/f556fdd2eae5889b60fc2a4ce338e2141a1d765b",
        "files": [
          "include/pluto_constants.h",
          "programs/pluto/ikev1.c",
          "programs/pluto/ikev1_aggr.c",
          "programs/pluto/ikev1_dpd.c",
          "programs/pluto/ikev1_main.c",
          "programs/pluto/ikev1_msgid.c",
          "programs/pluto/ikev1_quick.c",
          "programs/pluto/ikev1_send.c",
          "programs/pluto/ikev1_spdb_struct.c",
          "programs/pluto/ikev1_xauth.c",
          "programs/pluto/ikev2.c",
          "programs/pluto/ikev2_child.c",
          "programs/pluto/ikev2_crypto.c",
          "programs/pluto/ikev2_msgid.c",
          "programs/pluto/ikev2_parent.c",
          "programs/pluto/ikev2_psk.c",
          "programs/pluto/ipsec_doi.c",
          "programs/pluto/log.c",
          "programs/pluto/log.h",
          "programs/pluto/nat_traversal.c",
          "programs/pluto/pluto_stats.c",
          "programs/pluto/rcv_whack.c",
          "programs/pluto/retransmit.c",
          "programs/pluto/retry.c",
          "programs/pluto/show.c",
          "programs/pluto/state.c",
          "programs/pluto/state.h",
          "programs/pluto/state_db.c",
          "programs/pluto/timer.c"
        ],
        "message": "state: rename .st_finite_state to .st_state; drop .fs_ prefix\n\nAnd eliminate any compat macros such as st_state_name.",
        "before_after_code_files": [
          "include/pluto_constants.h||include/pluto_constants.h",
          "programs/pluto/ikev1.c||programs/pluto/ikev1.c",
          "programs/pluto/ikev1_aggr.c||programs/pluto/ikev1_aggr.c",
          "programs/pluto/ikev1_dpd.c||programs/pluto/ikev1_dpd.c",
          "programs/pluto/ikev1_main.c||programs/pluto/ikev1_main.c",
          "programs/pluto/ikev1_msgid.c||programs/pluto/ikev1_msgid.c",
          "programs/pluto/ikev1_quick.c||programs/pluto/ikev1_quick.c",
          "programs/pluto/ikev1_send.c||programs/pluto/ikev1_send.c",
          "programs/pluto/ikev1_spdb_struct.c||programs/pluto/ikev1_spdb_struct.c",
          "programs/pluto/ikev1_xauth.c||programs/pluto/ikev1_xauth.c",
          "programs/pluto/ikev2.c||programs/pluto/ikev2.c",
          "programs/pluto/ikev2_child.c||programs/pluto/ikev2_child.c",
          "programs/pluto/ikev2_crypto.c||programs/pluto/ikev2_crypto.c",
          "programs/pluto/ikev2_msgid.c||programs/pluto/ikev2_msgid.c",
          "programs/pluto/ikev2_parent.c||programs/pluto/ikev2_parent.c",
          "programs/pluto/ikev2_psk.c||programs/pluto/ikev2_psk.c",
          "programs/pluto/ipsec_doi.c||programs/pluto/ipsec_doi.c",
          "programs/pluto/log.c||programs/pluto/log.c",
          "programs/pluto/log.h||programs/pluto/log.h",
          "programs/pluto/nat_traversal.c||programs/pluto/nat_traversal.c",
          "programs/pluto/pluto_stats.c||programs/pluto/pluto_stats.c",
          "programs/pluto/rcv_whack.c||programs/pluto/rcv_whack.c",
          "programs/pluto/retransmit.c||programs/pluto/retransmit.c",
          "programs/pluto/retry.c||programs/pluto/retry.c",
          "programs/pluto/show.c||programs/pluto/show.c",
          "programs/pluto/state.c||programs/pluto/state.c",
          "programs/pluto/state.h||programs/pluto/state.h",
          "programs/pluto/state_db.c||programs/pluto/state_db.c",
          "programs/pluto/timer.c||programs/pluto/timer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
          ],
          "candidate": [
            "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
          ]
        }
      },
      "candidate_diff": {
        "include/pluto_constants.h||include/pluto_constants.h": [
          "File: include/pluto_constants.h -> include/pluto_constants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "746:       LELEM(STATE_MODE_CFG_I1))",
          "751: #define IS_PHASE1(s) (STATE_MAIN_R0 <= (s) && (s) <= STATE_AGGR_R2)",
          "",
          "[Removed Lines]",
          "749: #define IS_PHASE1_INIT(s) ((LELEM(s) & PHASE1_INITIATOR_STATES) != LEMPTY)",
          "",
          "[Added Lines]",
          "749: #define IS_PHASE1_INIT(s) ((LELEM(s->kind) & PHASE1_INITIATOR_STATES) != LEMPTY)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "763: #define IS_ISAKMP_ENCRYPTED(s) ((LELEM(s) & ISAKMP_ENCRYPTED_STATES) != LEMPTY)",
          "770: #define IKEV2_ISAKMP_INITIATOR_STATES (LELEM(STATE_PARENT_I0) | \\",
          "771:            LELEM(STATE_PARENT_I1) | \\",
          "",
          "[Removed Lines]",
          "766: #define IS_ISAKMP_AUTHENTICATED(s) (STATE_MAIN_R3 <= (s) && \\",
          "767:         STATE_AGGR_R0 != (s) && \\",
          "768:         STATE_AGGR_I1 != (s))",
          "",
          "[Added Lines]",
          "766: #define IS_ISAKMP_AUTHENTICATED(s) (STATE_MAIN_R3 <= (s->kind) && \\",
          "767:         STATE_AGGR_R0 != (s->kind) && \\",
          "768:         STATE_AGGR_I1 != (s->kind))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "786:            LELEM(STATE_PARENT_I3) | \\",
          "787:            LELEM(STATE_PARENT_R2))",
          "791: #define IPSECSA_PENDING_STATES (LELEM(STATE_V2_CREATE_I) | \\",
          "792:     LELEM(STATE_V2_CREATE_I0) | \\",
          "",
          "[Removed Lines]",
          "789: #define IS_ISAKMP_SA_ESTABLISHED(s) ((LELEM(s) & ISAKMP_SA_ESTABLISHED_STATES) != LEMPTY)",
          "",
          "[Added Lines]",
          "789: #define IS_ISAKMP_SA_ESTABLISHED(s) ((LELEM(s->kind) & ISAKMP_SA_ESTABLISHED_STATES) != LEMPTY)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "798: #define IS_IPSEC_SA_ESTABLISHED(s) (IS_CHILD_SA(s) && \\",
          "815: #define IS_IKE_SA_ESTABLISHED(st) \\",
          "816:  ( IS_ISAKMP_SA_ESTABLISHED(st->st_state) || \\",
          "",
          "[Removed Lines]",
          "799:         ((s->st_state) == STATE_QUICK_I2 || \\",
          "800:         (s->st_state) == STATE_QUICK_R1 || \\",
          "801:         (s->st_state) == STATE_QUICK_R2 || \\",
          "802:         (s->st_state) == STATE_V2_IPSEC_I || \\",
          "803:         (s->st_state) == STATE_V2_IPSEC_R))",
          "805: #define IS_MODE_CFG_ESTABLISHED(s) ((s) == STATE_MODE_CFG_R2)",
          "811: #define IS_V2_ESTABLISHED(s) ((s) == STATE_PARENT_R2 || \\",
          "812:   (s) == STATE_PARENT_I3 || (s) == STATE_V2_IPSEC_I || \\",
          "813:   (s) == STATE_V2_IPSEC_R)",
          "",
          "[Added Lines]",
          "799:         ((s->st_state->kind) == STATE_QUICK_I2 || \\",
          "800:         (s->st_state->kind) == STATE_QUICK_R1 || \\",
          "801:         (s->st_state->kind) == STATE_QUICK_R2 || \\",
          "802:         (s->st_state->kind) == STATE_V2_IPSEC_I || \\",
          "803:         (s->st_state->kind) == STATE_V2_IPSEC_R))",
          "805: #define IS_MODE_CFG_ESTABLISHED(s) ((s->kind) == STATE_MODE_CFG_R2)",
          "811: #define IS_V2_ESTABLISHED(s) ((s->kind) == STATE_PARENT_R2 || \\",
          "812:   (s->kind) == STATE_PARENT_I3 || (s->kind) == STATE_V2_IPSEC_I || \\",
          "813:   (s->kind) == STATE_V2_IPSEC_R)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "825: #define IS_CHILD_SA_ESTABLISHED(st) \\",
          "827:       IS_CHILD_SA(st))",
          "829: #define IS_PARENT_SA_ESTABLISHED(st) \\",
          "831:     !IS_CHILD_SA(st))",
          "833: #define IS_CHILD_SA(st)  ((st)->st_clonedfrom != SOS_NOBODY)",
          "",
          "[Removed Lines]",
          "826:     ((st->st_state == STATE_V2_IPSEC_I || st->st_state == STATE_V2_IPSEC_R) && \\",
          "830:     (((st)->st_state == STATE_PARENT_I3 || (st)->st_state == STATE_PARENT_R2) && \\",
          "",
          "[Added Lines]",
          "826:     ((st->st_state->kind == STATE_V2_IPSEC_I || st->st_state->kind == STATE_V2_IPSEC_R) && \\",
          "830:     (((st)->st_state->kind == STATE_PARENT_I3 || (st)->st_state->kind == STATE_PARENT_R2) && \\",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1.c||programs/pluto/ikev1.c": [
          "File: programs/pluto/ikev1.c -> programs/pluto/ikev1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "629:   struct finite_state *fs = &v1_states[kind - STATE_IKEv1_FLOOR];",
          "631:   finite_states[kind] = fs;",
          "",
          "[Removed Lines]",
          "630:   fs->fs_kind = kind;",
          "633:   fs->fs_name = enum_name(&state_names, fs->fs_kind);",
          "634:   fs->fs_short_name = enum_short_name(&state_names, fs->fs_kind);",
          "635:   fs->fs_story = enum_name(&state_stories, fs->fs_kind);",
          "",
          "[Added Lines]",
          "630:   fs->kind = kind;",
          "633:   fs->name = enum_name(&state_names, fs->kind);",
          "634:   fs->short_name = enum_short_name(&state_names, fs->kind);",
          "635:   fs->story = enum_name(&state_stories, fs->kind);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:   enum state_category cat;",
          "646:   case STATE_AGGR_R0:",
          "647:   case STATE_AGGR_I1:",
          "",
          "[Removed Lines]",
          "644:   switch (fs->fs_kind) {",
          "",
          "[Added Lines]",
          "644:   switch (fs->kind) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "714:    break;",
          "716:   default:",
          "718:   }",
          "720:  }",
          "",
          "[Removed Lines]",
          "717:    bad_case(fs->fs_kind);",
          "719:   fs->fs_category = cat;",
          "",
          "[Added Lines]",
          "717:    bad_case(fs->kind);",
          "719:   fs->category = cat;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "746:   passert(to != NULL);",
          "748:   DBGF(DBG_TMI, \"processing IKEv1 state transition %s -> %s\",",
          "",
          "[Removed Lines]",
          "749:        from->fs_short_name, to->fs_short_name);",
          "",
          "[Added Lines]",
          "749:        from->short_name, to->short_name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "761:   } else {",
          "762:    passert(t[-1].state == t->state);",
          "763:   }",
          "",
          "[Removed Lines]",
          "759:   if (from->fs_v1_transitions == NULL) {",
          "760:    from->fs_v1_transitions = t;",
          "764:   from->fs_nr_transitions++;",
          "",
          "[Added Lines]",
          "759:   if (from->v1_transitions == NULL) {",
          "760:    from->v1_transitions = t;",
          "764:   from->nr_transitions++;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "789:    DBGF(DBG_BASE, \"transition %s -> %s missing flags 0x%\"PRIxLSET,",
          "791:   }",
          "793:  }",
          "",
          "[Removed Lines]",
          "788:   if ((t->flags & from->fs_flags) != from->fs_flags) {",
          "790:         from->fs_short_name, to->fs_short_name, from->fs_flags);",
          "792:   from->fs_flags |= t->flags & SMF_RETRANSMIT_ON_DUPLICATE;",
          "",
          "[Added Lines]",
          "788:   if ((t->flags & from->flags) != from->flags) {",
          "790:         from->short_name, to->short_name, from->flags);",
          "792:   from->flags |= t->flags & SMF_RETRANSMIT_ON_DUPLICATE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "803:     lswlogs(buf, \"  \");",
          "804:     lswlog_finite_state(buf, from);",
          "805:     lswlogs(buf, \":\");",
          "807:      lswlogs(buf, \" <none>\");",
          "808:     }",
          "809:    }",
          "812:     const struct finite_state *to = finite_states[t->next_state];",
          "814:      enum_short_name(&timer_event_names,",
          "815:        t->timeout_event));",
          "816:    }",
          "",
          "[Removed Lines]",
          "806:     if (from->fs_nr_transitions == 0) {",
          "810:    for (unsigned ti = 0; ti < from->fs_nr_transitions; ti++) {",
          "811:     const struct state_v1_microcode *t = &from->fs_v1_transitions[ti];",
          "813:     DBG_log(\"    -> %s %s\", to->fs_short_name,",
          "",
          "[Added Lines]",
          "806:     if (from->nr_transitions == 0) {",
          "810:    for (unsigned ti = 0; ti < from->nr_transitions; ti++) {",
          "811:     const struct state_v1_microcode *t = &from->v1_transitions[ti];",
          "813:     DBG_log(\"    -> %s %s\", to->short_name,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "822: static stf_status unexpected(struct state *st, struct msg_digest *md UNUSED)",
          "823: {",
          "824:  loglog(RC_LOG_SERIOUS, \"unexpected message received in state %s\",",
          "826:  return STF_IGNORE;",
          "827: }",
          "",
          "[Removed Lines]",
          "825:         st->st_state_name);",
          "",
          "[Added Lines]",
          "825:         st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1145:   bool replied = (st->st_v1_last_transition != NULL &&",
          "1146:     (st->st_v1_last_transition->flags & SMF_REPLY));",
          "1147:   bool retransmit_on_duplicate =",
          "1149:   if (replied && retransmit_on_duplicate) {",
          "",
          "[Removed Lines]",
          "1148:    (st->st_finite_state->fs_flags & SMF_RETRANSMIT_ON_DUPLICATE);",
          "",
          "[Added Lines]",
          "1148:    (st->st_state->flags & SMF_RETRANSMIT_ON_DUPLICATE);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1156:        count_duplicate(st, MAXIMUM_v1_ACCEPTED_DUPLICATES)) {",
          "1157:     loglog(RC_RETRANSMISSION,",
          "1158:            \"retransmitting in response to duplicate packet; already %s\",",
          "1160:     resend_recorded_v1_ike_msg(st, \"retransmit in response to duplicate\");",
          "1161:    } else {",
          "1162:     loglog(RC_LOG_SERIOUS,",
          "1163:            \"discarding duplicate packet -- exhausted retransmission; already %s\",",
          "1165:    }",
          "1166:   } else {",
          "1167:    LSWDBGP(DBG_CONTROLMORE, buf) {",
          "1168:     lswlog_log_prefix(buf);",
          "1169:     lswlogf(buf, \"discarding duplicate packet; already %s;\",",
          "1171:     lswlogf(buf, \" replied=%s\", replied ? \"T\" : \"F\");",
          "1172:     lswlogf(buf, \" retransmit_on_duplicate=%s\",",
          "1173:      retransmit_on_duplicate ? \"T\" : \"F\");",
          "",
          "[Removed Lines]",
          "1159:            st->st_state_name);",
          "1164:            st->st_state_name);",
          "1170:      st->st_state_name);",
          "",
          "[Added Lines]",
          "1159:            st->st_state->name);",
          "1164:            st->st_state->name);",
          "1170:      st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1252:      libreswan_log(\"discarding initial packet; already %s\",",
          "1254:     }",
          "1255:     pop_cur_state(old_state);",
          "1256:     return;",
          "",
          "[Removed Lines]",
          "1253:             st->st_state_name);",
          "",
          "[Added Lines]",
          "1253:             st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1283:     }",
          "1284:    }",
          "1285:    set_cur_state(st);",
          "1287:   }",
          "1288:   break;",
          "",
          "[Removed Lines]",
          "1286:    from_state = st->st_state;",
          "",
          "[Added Lines]",
          "1286:    from_state = st->st_state->kind;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1326:     return;",
          "1327:    }",
          "1330:     if (!quiet) {",
          "1331:      loglog(RC_LOG_SERIOUS, \"encrypted Informational Exchange message is invalid because no key is known\");",
          "1332:     }",
          "",
          "[Removed Lines]",
          "1329:    if (!IS_ISAKMP_ENCRYPTED(st->st_state)) {",
          "",
          "[Added Lines]",
          "1329:    if (!IS_ISAKMP_ENCRYPTED(st->st_state->kind)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1416:    }",
          "1421:     change_state(st, STATE_MAIN_R3);",
          "1422:    }",
          "1424: #ifdef SOFTREMOTE_CLIENT_WORKAROUND",
          "1427:     libreswan_log(",
          "1428:      \"SoftRemote workaround: Cannot do Quick Mode until MODECFG done.\");",
          "1429:     return;",
          "",
          "[Removed Lines]",
          "1419:    if (st->st_state == STATE_MODE_CFG_R2) {",
          "1426:    if (st->st_state == STATE_MODE_CFG_R1) {",
          "",
          "[Added Lines]",
          "1419:    if (st->st_state->kind == STATE_MODE_CFG_R2) {",
          "1426:    if (st->st_state->kind == STATE_MODE_CFG_R1) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1457:     return;",
          "1458:    }",
          "1459:    set_cur_state(st);",
          "1461:   }",
          "1463:   break;",
          "",
          "[Removed Lines]",
          "1460:    from_state = st->st_state;",
          "",
          "[Added Lines]",
          "1460:    from_state = st->st_state->kind;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1525:    if (!IS_ISAKMP_SA_ESTABLISHED(st->st_state)) {",
          "1526:     DBG(DBG_CONTROLMORE, DBG_log(",
          "1527:      \"Mode Config message is unacceptable because it is for an incomplete ISAKMP SA (state=%s)\",",
          "1530:     return;",
          "1531:    }",
          "",
          "[Removed Lines]",
          "1528:      st->st_state_name));",
          "",
          "[Added Lines]",
          "1528:      st->st_state->name));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1556:    const struct end *this = &st->st_connection->spd.this;",
          "1558:    if (this->xauth_server &&",
          "1560:        st->quirks.xauth_ack_msgid) {",
          "1561:     from_state = STATE_XAUTH_R1;",
          "1562:     DBG(DBG_CONTROLMORE, DBG_log(",
          "1563:      \" set from_state to %s state is STATE_XAUTH_R1 and quirks.xauth_ack_msgid is TRUE\",",
          "1567:    } else if (this->xauth_client &&",
          "1569:     from_state = STATE_XAUTH_I0;",
          "1570:     DBG(DBG_CONTROLMORE, DBG_log(",
          "1571:      \" set from_state to %s this is xauthclient and IS_PHASE1() is TRUE\",",
          "1575:    } else if (this->xauth_client &&",
          "",
          "[Removed Lines]",
          "1559:        st->st_state == STATE_XAUTH_R1 &&",
          "1564:          enum_name(&state_names,",
          "1565:             st->st_state",
          "1566:             )));",
          "1568:        IS_PHASE1(st->st_state)) {",
          "1572:          enum_name(&state_names,",
          "1573:             st->st_state",
          "1574:             )));",
          "1576:        st->st_state == STATE_XAUTH_I1) {",
          "",
          "[Added Lines]",
          "1559:        st->st_state->kind == STATE_XAUTH_R1 &&",
          "1564:      st->st_state->name));",
          "1566:        IS_PHASE1(st->st_state->kind)) {",
          "1570:      st->st_state->name));",
          "1572:        st->st_state->kind == STATE_XAUTH_I1) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1581:     from_state = STATE_XAUTH_I0;",
          "1582:     DBG(DBG_CONTROLMORE, DBG_log(",
          "1583:      \" set from_state to %s this is xauthclient and state == STATE_XAUTH_I1\",",
          "1587:    } else if (this->modecfg_server &&",
          "1589:     from_state = STATE_MODE_CFG_R0;",
          "1590:     DBG(DBG_CONTROLMORE, DBG_log(",
          "1591:      \" set from_state to %s this is modecfgserver and IS_PHASE1() is TRUE\",",
          "1595:    } else if (this->modecfg_client &&",
          "1597:     from_state = STATE_MODE_CFG_R1;",
          "1598:     DBG(DBG_CONTROLMORE, DBG_log(",
          "1599:      \" set from_state to %s this is modecfgclient and IS_PHASE1() is TRUE\",",
          "1603:    } else {",
          "1604:     DBG(DBG_CONTROLMORE, DBG_log(",
          "1605:      \"received isakmp_xchg_type %s\",",
          "",
          "[Removed Lines]",
          "1584:          enum_name(&state_names,",
          "1585:             st->st_state",
          "1586:             )));",
          "1588:        IS_PHASE1(st->st_state)) {",
          "1592:          enum_name(&state_names,",
          "1593:             st->st_state",
          "1594:             )));",
          "1596:        IS_PHASE1(st->st_state)) {",
          "1600:          enum_name(&state_names,",
          "1601:             st->st_state",
          "1602:             )));",
          "",
          "[Added Lines]",
          "1580:      st->st_state->name));",
          "1582:        IS_PHASE1(st->st_state->kind)) {",
          "1586:      st->st_state->name));",
          "1588:        IS_PHASE1(st->st_state->kind)) {",
          "1592:      st->st_state->name));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1621:          ->spd.this.modecfg_client  ?",
          "1622:          \" modecfgclient\" :",
          "1623:          \"\",",
          "1627:          ));",
          "1628:     return;",
          "1629:    }",
          "1630:   } else {",
          "1631:    if (st->st_connection->spd.this.xauth_server &&",
          "1634:     DBG(DBG_CONTROL, DBG_log(",
          "1635:      \"We were in phase 1, with no state, so we went to XAUTH_R0\"));",
          "",
          "[Removed Lines]",
          "1624:          enum_name(&",
          "1625:             state_names,",
          "1626:             st->st_state)",
          "1632:        IS_PHASE1(st->st_state)) {",
          "",
          "[Added Lines]",
          "1614:          st->st_state->name",
          "1620:        IS_PHASE1(st->st_state->kind)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1640:    set_cur_state(st);",
          "1642:   }",
          "1644:   break;",
          "",
          "[Removed Lines]",
          "1641:    from_state = st->st_state;",
          "",
          "[Added Lines]",
          "1629:    from_state = st->st_state->kind;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1813:  passert(STATE_IKEv1_FLOOR <= from_state && from_state < STATE_IKEv1_ROOF);",
          "1814:  const struct finite_state *fs = finite_states[from_state];",
          "1815:  passert(fs != NULL);",
          "1817:  passert(smc != NULL);",
          "",
          "[Removed Lines]",
          "1816:  smc = fs->fs_v1_transitions;",
          "",
          "[Added Lines]",
          "1804:  smc = fs->v1_transitions;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2160:       \"%smessage ignored because it contains a payload type (%s) unexpected by state %s\",",
          "2161:       excuse,",
          "2162:       enum_show(&ikev1_payload_names, np),",
          "2164:      if (!md->encrypted) {",
          "2165:       SEND_NOTIFICATION(INVALID_PAYLOAD_TYPE);",
          "2166:      }",
          "",
          "[Removed Lines]",
          "2163:       st->st_state_name);",
          "",
          "[Added Lines]",
          "2151:       st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2580:   if (st->st_connection->spd.this.xauth_client &&",
          "2581:       st->hidden_variables.st_xauth_client_done &&",
          "2582:       !st->st_connection->spd.this.modecfg_client &&",
          "2584:   {",
          "2585:    bool aggrmode = LHAS(st->st_connection->policy, POLICY_AGGRESSIVE_IX);",
          "",
          "[Removed Lines]",
          "2583:       st->st_state == STATE_XAUTH_I1)",
          "",
          "[Added Lines]",
          "2571:       st->st_state->kind == STATE_XAUTH_I1)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2651:     IMPAIR(SEND_NO_MAIN_R2)) {",
          "2653:     record_outbound_ike_msg(st, &reply_stream,",
          "",
          "[Removed Lines]",
          "2650:    if (st->st_state == STATE_MAIN_R2 &&",
          "",
          "[Added Lines]",
          "2638:    if (st->st_state->kind == STATE_MAIN_R2 &&",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2671:    if (c->spd.this.xauth_client &&",
          "2672:        st->hidden_variables.st_xauth_client_done &&",
          "2673:        !c->spd.this.modecfg_client &&",
          "2675:    {",
          "2676:     DBG(DBG_CONTROL, DBG_log(\"fixup XAUTH without ModeCFG event from EVENT_RETRANSMIT to EVENT_SA_REPLACE\"));",
          "2677:     kind = EVENT_SA_REPLACE;",
          "",
          "[Removed Lines]",
          "2674:        (st->st_state == STATE_MAIN_I4 || st->st_state == STATE_AGGR_I2))",
          "",
          "[Added Lines]",
          "2662:        (st->st_state->kind == STATE_MAIN_I4 || st->st_state->kind == STATE_AGGR_I2))",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2683:     break;",
          "",
          "[Removed Lines]",
          "2686:     if (IS_PHASE1(st->st_state) ||",
          "2687:         IS_PHASE15(st->st_state )) {",
          "",
          "[Added Lines]",
          "2674:     if (IS_PHASE1(st->st_state->kind) ||",
          "2675:         IS_PHASE15(st->st_state->kind)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2798:    } else {",
          "2799:     log_details = NULL;",
          "2801:    }",
          "2806:    LSWLOG_RC(w, buf) {",
          "2810:     if (log_details != NULL) {",
          "2811:      log_details(buf, st);",
          "",
          "[Removed Lines]",
          "2800:     w = RC_NEW_STATE + st->st_state;",
          "2803:    passert(st->st_state < STATE_IKEv1_ROOF);",
          "2807:     lswlogf(buf, \"%s: %s\", st->st_finite_state->fs_name,",
          "2808:      st->st_finite_state->fs_story);",
          "",
          "[Added Lines]",
          "2788:     w = RC_NEW_STATE + st->st_state->kind;",
          "2791:    passert(st->st_state->kind < STATE_IKEv1_ROOF);",
          "2795:     lswlogf(buf, \"%s: %s\", st->st_state->name,",
          "2796:      st->st_state->story);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2845:       st->st_connection->spd.this.xauth_client &&",
          "2846:       !st->hidden_variables.st_xauth_client_done) {",
          "2847:    DBG(DBG_CONTROL,",
          "",
          "[Removed Lines]",
          "2844:   if (!IS_QUICK(st->st_state) &&",
          "",
          "[Added Lines]",
          "2832:   if (!IS_QUICK(st->st_state->kind) &&",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2953:       IS_IPSEC_SA_ESTABLISHED(st))",
          "2954:    release_whack(st);",
          "2957:    break;",
          "2959:   break;",
          "",
          "[Removed Lines]",
          "2956:   if (IS_QUICK(st->st_state))",
          "",
          "[Added Lines]",
          "2944:   if (IS_QUICK(st->st_state->kind))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2966:   whack_log(RC_INTERNALERR + md->v1_note,",
          "2967:      \"%s: internal error\",",
          "2970:   DBG(DBG_CONTROL,",
          "2971:       DBG_log(\"state transition function for %s had internal error\",",
          "",
          "[Removed Lines]",
          "2968:      st->st_state_name);",
          "",
          "[Added Lines]",
          "2956:      st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2979:   whack_log(RC_FATAL,",
          "2980:      \"encountered fatal error in state %s\",",
          "2982: #ifdef HAVE_NM",
          "2983:   if (st->st_connection->remotepeertype == CISCO &&",
          "2984:       st->st_connection->nmconfigured) {",
          "",
          "[Removed Lines]",
          "2981:      st->st_state_name);",
          "",
          "[Added Lines]",
          "2969:      st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3023:   whack_log(RC_NOTIFICATION + md->v1_note,",
          "3026:   if (md->v1_note != NOTHING_WRONG)",
          "3027:    SEND_NOTIFICATION(md->v1_note);",
          "3029:   dbg(\"state transition function for %s failed: %s\",",
          "3032: #ifdef HAVE_NM",
          "3033:   if (st->st_connection->remotepeertype == CISCO &&",
          "",
          "[Removed Lines]",
          "3024:      \"%s: %s\", st->st_state_name, notify_name);",
          "3030:       st->st_state_name, notify_name);",
          "",
          "[Added Lines]",
          "3012:      \"%s: %s\", st->st_state->name, notify_name);",
          "3018:       st->st_state->name, notify_name);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3039:         DBG_log(\"sending disconnect to NM failed, you may need to do it manually\"));",
          "3040:   }",
          "3041: #endif",
          "3043:    delete_state(st);",
          "3045:    md->st = NULL;",
          "",
          "[Removed Lines]",
          "3042:   if (IS_QUICK(st->st_state)) {",
          "",
          "[Added Lines]",
          "3030:   if (IS_QUICK(st->st_state->kind)) {",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_aggr.c||programs/pluto/ikev1_aggr.c": [
          "File: programs/pluto/ikev1_aggr.c -> programs/pluto/ikev1_aggr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:  start_retransmits(st);",
          "1228:  whack_log(RC_NEW_STATE + STATE_AGGR_I1,",
          "1230:  reset_cur_state();",
          "1231:  return STF_IGNORE;",
          "1232: }",
          "",
          "[Removed Lines]",
          "1229:     \"%s: initiate\", st->st_state_name);",
          "",
          "[Added Lines]",
          "1229:     \"%s: initiate\", st->st_state->name);",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_dpd.c||programs/pluto/ikev1_dpd.c": [
          "File: programs/pluto/ikev1_dpd.c -> programs/pluto/ikev1_dpd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:  set_cur_state(st);",
          "364:   p1_dpd_outI1(st);",
          "365:  else",
          "366:   p2_dpd_outI1(st);",
          "",
          "[Removed Lines]",
          "363:  if (IS_PHASE1(st->st_state) || IS_PHASE15(st->st_state))",
          "",
          "[Added Lines]",
          "363:  if (IS_PHASE1(st->st_state->kind) || IS_PHASE15(st->st_state->kind))",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_main.c||programs/pluto/ikev1_main.c": [
          "File: programs/pluto/ikev1_main.c -> programs/pluto/ikev1_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   update_pending(predecessor, st);",
          "211:   whack_log(RC_NEW_STATE + STATE_MAIN_I1,",
          "212:    \"%s: initiate, replacing #%lu\",",
          "214:    predecessor->st_serialno);",
          "215:  } else {",
          "216:   whack_log(RC_NEW_STATE + STATE_MAIN_I1,",
          "217:    \"%s: initiate\",",
          "219:  }",
          "220:  reset_cur_state();",
          "221: }",
          "",
          "[Removed Lines]",
          "213:    st->st_state_name,",
          "218:    st->st_state_name);",
          "",
          "[Added Lines]",
          "213:    st->st_state->name,",
          "218:    st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2044:   break;",
          "2045:  }",
          "2048:   encst = NULL;",
          "2050:  {",
          "",
          "[Removed Lines]",
          "2047:  if (encst != NULL && !IS_ISAKMP_ENCRYPTED(encst->st_state))",
          "",
          "[Added Lines]",
          "2047:  if (encst != NULL && !IS_ISAKMP_ENCRYPTED(encst->st_state->kind))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2158:  passert(st != NULL);",
          "2160:  if (from_state == STATE_UNDEFINED)",
          "2163:  if (IS_QUICK(from_state)) {",
          "2164:   p1st = find_phase1_state(st->st_connection,",
          "",
          "[Removed Lines]",
          "2161:   from_state = st->st_state;",
          "",
          "[Added Lines]",
          "2161:   from_state = st->st_state->kind;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2211:  struct state fake_state = {",
          "2212:   .st_serialno = SOS_NOBODY,",
          "2215:  };",
          "2217:  passert(md != NULL);",
          "",
          "[Removed Lines]",
          "2214:   .st_finite_state = finite_states[STATE_UNDEFINED],",
          "",
          "[Added Lines]",
          "2214:   .st_state = finite_states[STATE_UNDEFINED],",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_msgid.c||programs/pluto/ikev1_msgid.c": [
          "File: programs/pluto/ikev1_msgid.c -> programs/pluto/ikev1_msgid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:  struct msgid_list *p;",
          "75:  passert(msgid != v1_MAINMODE_MSGID);",
          "78:  for (p = st->st_used_msgids; p != NULL; p = p->next)",
          "79:   if (p->msgid == msgid)",
          "",
          "[Removed Lines]",
          "76:  passert(IS_ISAKMP_ENCRYPTED(st->st_state));",
          "",
          "[Added Lines]",
          "76:  passert(IS_ISAKMP_ENCRYPTED(st->st_state->kind));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: {",
          "87:  struct msgid_list *p;",
          "90:  p = alloc_thing(struct msgid_list, \"msgid\");",
          "91:  p->msgid = msgid;",
          "92:  p->next = st->st_used_msgids;",
          "",
          "[Removed Lines]",
          "89:  passert(IS_PHASE1(st->st_state) || IS_PHASE15(st->st_state));",
          "",
          "[Added Lines]",
          "89:  passert(IS_PHASE1(st->st_state->kind) || IS_PHASE15(st->st_state->kind));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:  msgid_t msgid;",
          "103:  for (;; ) {",
          "104:   get_rnd_bytes((void *) &msgid, sizeof(msgid));",
          "",
          "[Removed Lines]",
          "101:  passert(IS_ISAKMP_ENCRYPTED(st->st_state));",
          "",
          "[Added Lines]",
          "101:  passert(IS_ISAKMP_ENCRYPTED(st->st_state->kind));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119: {",
          "120:  struct msgid_list *p = st->st_used_msgids;",
          "123:  while (p != NULL) {",
          "124:   struct msgid_list *q = p;",
          "",
          "[Removed Lines]",
          "122:  passert(st->st_state == STATE_UNDEFINED);",
          "",
          "[Added Lines]",
          "122:  passert(st->st_state->kind == STATE_UNDEFINED);",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_quick.c||programs/pluto/ikev1_quick.c": [
          "File: programs/pluto/ikev1_quick.c -> programs/pluto/ikev1_quick.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1032:  if (st->st_ipsec_pred == SOS_NOBODY) {",
          "1033:   whack_log(RC_NEW_STATE + STATE_QUICK_I1,",
          "1034:      \"%s: initiate\",",
          "1036:  } else {",
          "1037:   whack_log(RC_NEW_STATE + STATE_QUICK_I1,",
          "1038:      \"%s: initiate to replace #%lu\",",
          "1040:      st->st_ipsec_pred);",
          "1041:   st->st_ipsec_pred = SOS_NOBODY;",
          "1042:  }",
          "",
          "[Removed Lines]",
          "1035:      st->st_state_name);",
          "1039:      st->st_state_name,",
          "",
          "[Added Lines]",
          "1035:      st->st_state->name);",
          "1039:      st->st_state->name,",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_send.c||programs/pluto/ikev1_send.c": [
          "File: programs/pluto/ikev1_send.c -> programs/pluto/ikev1_send.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:      should_fragment_ike_msg(st, len + natt_bonus, resending)) {",
          "174:   return send_v1_frags(st, where);",
          "175:  } else {",
          "",
          "[Removed Lines]",
          "172:  if (st->st_state != STATE_MAIN_I1 &&",
          "",
          "[Added Lines]",
          "172:  if (st->st_state->kind != STATE_MAIN_I1 &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181: {",
          "182:  bool ret = send_or_resend_v1_ike_msg_from_state(st, where, TRUE);",
          "185:      !LIN(POLICY_AGGRESSIVE, st->st_connection->policy)) {",
          "187:   event_schedule(EVENT_v1_SEND_XAUTH, deltatime_ms(EVENT_v1_SEND_XAUTH_DELAY_MS), st);",
          "",
          "[Removed Lines]",
          "184:  if (st->st_state == STATE_XAUTH_R0 &&",
          "",
          "[Added Lines]",
          "184:  if (st->st_state->kind == STATE_XAUTH_R0 &&",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_spdb_struct.c||programs/pluto/ikev1_spdb_struct.c": [
          "File: programs/pluto/ikev1_spdb_struct.c -> programs/pluto/ikev1_spdb_struct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:   return FALSE;",
          "115:  }",
          "118:   DBG_log(\"Received sec ctx in responder state\");",
          "",
          "[Removed Lines]",
          "117:  if (st->sec_ctx == NULL && st->st_state == STATE_QUICK_R0) {",
          "",
          "[Added Lines]",
          "117:  if (st->sec_ctx == NULL && st->st_state->kind == STATE_QUICK_R0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:   st->sec_ctx = clone_thing(uctx, \"struct xfrm_user_sec_ctx_ike\");",
          "143:   DBG_log(\"Received sec ctx in responder state again: ignoring this one\");",
          "145:   DBG(DBG_PARSING,",
          "146:       DBG_log(\"Initiator state received security context from responder state, now verifying if both are same\"));",
          "147:   if (streq(st->sec_ctx->sec_ctx_value, uctx.sec_ctx_value)) {",
          "",
          "[Removed Lines]",
          "140:  } else if (st->st_state == STATE_QUICK_R0) {",
          "144:  } else if (st->st_state == STATE_QUICK_I1) {",
          "",
          "[Added Lines]",
          "140:  } else if (st->st_state->kind == STATE_QUICK_R0) {",
          "144:  } else if (st->st_state->kind == STATE_QUICK_I1) {",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_xauth.c||programs/pluto/ikev1_xauth.c": [
          "File: programs/pluto/ikev1_xauth.c -> programs/pluto/ikev1_xauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "605:  pb_stream rbody;",
          "606:  unsigned char buf[256];",
          "607:  u_char *r_hash_start, *r_hashval;",
          "611:  init_out_pbs(&reply, buf, sizeof(buf), \"xauth_buf\");",
          "613:  libreswan_log(\"XAUTH: Sending Username/Password request (%s->XAUTH_R0)\",",
          "617:  st->st_msgid_phase15 = generate_msgid(st);",
          "",
          "[Removed Lines]",
          "608:  const enum state_kind p_state = st->st_state;",
          "614:         enum_short_name(&state_names, st->st_state));",
          "",
          "[Added Lines]",
          "608:  const enum state_kind p_state = st->st_state->kind;",
          "614:         st->st_state->short_name);",
          "",
          "---------------"
        ],
        "programs/pluto/ikev2.c||programs/pluto/ikev2.c": [
          "File: programs/pluto/ikev2.c -> programs/pluto/ikev2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:   struct finite_state *fs = &v2_states[kind - STATE_IKEv2_FLOOR];",
          "666:   finite_states[kind] = fs;",
          "",
          "[Removed Lines]",
          "665:   fs->fs_kind = kind;",
          "668:   fs->fs_name = enum_name(&state_names, fs->fs_kind);",
          "669:   fs->fs_short_name = enum_short_name(&state_names, fs->fs_kind);",
          "670:   fs->fs_story = enum_name(&state_stories, fs->fs_kind);",
          "",
          "[Added Lines]",
          "665:   fs->kind = kind;",
          "668:   fs->name = enum_name(&state_names, fs->kind);",
          "669:   fs->short_name = enum_short_name(&state_names, fs->kind);",
          "670:   fs->story = enum_name(&state_stories, fs->kind);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "678:   enum state_category cat;",
          "681:   case STATE_PARENT_I0:",
          "",
          "[Removed Lines]",
          "679:   switch (fs->fs_kind) {",
          "",
          "[Added Lines]",
          "679:   switch (fs->kind) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "750:    break;",
          "752:   default:",
          "754:   }",
          "756:  }",
          "",
          "[Removed Lines]",
          "753:    bad_case(fs->fs_kind);",
          "755:   fs->fs_category = cat;",
          "",
          "[Added Lines]",
          "753:    bad_case(fs->kind);",
          "755:   fs->category = cat;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "772:   passert(to != NULL);",
          "774:   DBGF(DBG_TMI, \"processing IKEv2 state transition %s -> %s (%s)\",",
          "",
          "[Removed Lines]",
          "775:        from->fs_short_name, to->fs_short_name, t->story);",
          "",
          "[Added Lines]",
          "775:        from->short_name, to->short_name, t->story);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "785:   } else {",
          "786:    passert(t[-1].state == t->state);",
          "787:   }",
          "",
          "[Removed Lines]",
          "783:   if (from->fs_v2_transitions == NULL) {",
          "784:    from->fs_v2_transitions = t;",
          "788:   from->fs_nr_transitions++;",
          "",
          "[Added Lines]",
          "783:   if (from->v2_transitions == NULL) {",
          "784:    from->v2_transitions = t;",
          "788:   from->nr_transitions++;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "817:     jam(buf, \"  \");",
          "818:     lswlog_finite_state(buf, from);",
          "819:     jam(buf, \":\");",
          "821:      lswlogs(buf, \" <none>\");",
          "822:     }",
          "823:    }",
          "826:     const struct finite_state *to = finite_states[t->next_state];",
          "827:     const char *send;",
          "828:     switch (t->send) {",
          "",
          "[Removed Lines]",
          "820:     if (from->fs_nr_transitions == 0) {",
          "824:    for (unsigned ti = 0; ti < from->fs_nr_transitions; ti++) {",
          "825:     const struct state_v2_microcode *t = &from->fs_v2_transitions[ti];",
          "",
          "[Added Lines]",
          "820:     if (from->nr_transitions == 0) {",
          "824:    for (unsigned ti = 0; ti < from->nr_transitions; ti++) {",
          "825:     const struct state_v2_microcode *t = &from->v2_transitions[ti];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "831:     case MESSAGE_RESPONSE: send = \" send-request\"; break;",
          "832:     default: bad_case(t->send);",
          "833:     }",
          "835:      enum_short_name(&timer_event_names,",
          "836:        t->timeout_event),",
          "837:      send, t->story);",
          "",
          "[Removed Lines]",
          "834:     DBG_log(\"    -> %s %s%s (%s)\", to->fs_short_name,",
          "",
          "[Added Lines]",
          "834:     DBG_log(\"    -> %s %s%s (%s)\", to->short_name,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1305:     st->st_connection->name,",
          "1306:     fmt_conn_instance(st->st_connection, cb),",
          "1307:     st->st_serialno,",
          "1309:     st_busy ? \"is busy processing a response drop this message\" :",
          "1310:      \"will process it further\");",
          "1311:   });",
          "",
          "[Removed Lines]",
          "1308:     st->st_state_name,",
          "",
          "[Added Lines]",
          "1308:     st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1376:    lswlog_retransmit_prefix(buf, st);",
          "1377:    lswlogf(buf, \"state #%lu %s is working on message ID: %u %s, retransmission ignored\",",
          "1378:     cst->st_serialno,",
          "1380:     st->st_msgid_lastrecv,",
          "1381:     enum_name(&ikev2_exchange_names, ix));",
          "1382:   }",
          "",
          "[Removed Lines]",
          "1379:     st->st_state_name,",
          "",
          "[Added Lines]",
          "1379:     st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1827:  const struct finite_state *from_state =",
          "1829:  dbg(\"#%lu in state %s: %s\",",
          "1830:       st != NULL ? st->st_serialno : 0,",
          "1833:  struct ikev2_payload_errors message_payload_status = { .bad = false };",
          "1834:  struct ikev2_payload_errors encrypted_payload_status = { .bad = false };",
          "",
          "[Removed Lines]",
          "1828:   st == NULL ? finite_states[STATE_PARENT_R0] : st->st_finite_state;",
          "1831:       from_state->fs_short_name, from_state->fs_story);",
          "",
          "[Added Lines]",
          "1828:   st == NULL ? finite_states[STATE_PARENT_R0] : st->st_state;",
          "1831:       from_state->short_name, from_state->story);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1846:    continue;",
          "1847:   if (svm->recv_type != ix)",
          "1848:    continue;",
          "",
          "[Removed Lines]",
          "1845:   if (svm->state != from_state->fs_kind && ix != ISAKMP_v2_CREATE_CHILD_SA)",
          "",
          "[Added Lines]",
          "1845:   if (svm->state != from_state->kind && ix != ISAKMP_v2_CREATE_CHILD_SA)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2102:    continue;",
          "2103:   }",
          "",
          "[Removed Lines]",
          "2105:   if (svm->state != from_state->fs_kind && ix == ISAKMP_v2_CREATE_CHILD_SA) {",
          "",
          "[Added Lines]",
          "2105:   if (svm->state != from_state->kind && ix == ISAKMP_v2_CREATE_CHILD_SA) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2676:  if (is_msg_request(md) &&",
          "2681:   ike->sa.st_msgid_nextuse += 1;",
          "2684:   ike->sa.st_msgid_nextuse += 1;",
          "2685:  }",
          "",
          "[Removed Lines]",
          "2677:    (st->st_state == STATE_PARENT_I1 ||",
          "2678:     st->st_state == STATE_V2_REKEY_IKE_I ||",
          "2679:     st->st_state == STATE_V2_REKEY_CHILD_I ||",
          "2680:     st->st_state == STATE_V2_CREATE_I)) {",
          "2683:  } else if (st->st_state == STATE_PARENT_I2) {",
          "",
          "[Added Lines]",
          "2677:    (st->st_state->kind == STATE_PARENT_I1 ||",
          "2678:     st->st_state->kind == STATE_V2_REKEY_IKE_I ||",
          "2679:     st->st_state->kind == STATE_V2_REKEY_CHILD_I ||",
          "2680:     st->st_state->kind == STATE_V2_CREATE_I)) {",
          "2683:  } else if (st->st_state->kind == STATE_PARENT_I2) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2722:  LSWDBGP(DBG_BASE, buf) {",
          "2723:   lswlogf(buf, \"Message ID: '%s' IKE #%lu %s\",",
          "2724:    st->st_connection->name,",
          "2726:   if (&ike->sa != st) {",
          "2727:    lswlogf(buf, \"; CHILD #%lu %s\",",
          "2729:   }",
          "2730:   lswlogf(buf, \"; message-%s msgid=%u\",",
          "2731:    is_msg_response(md) ? \"response\" : \"request\",",
          "",
          "[Removed Lines]",
          "2725:    ike->sa.st_serialno, ike->sa.st_finite_state->fs_short_name);",
          "2728:     st->st_serialno, st->st_finite_state->fs_short_name);",
          "",
          "[Added Lines]",
          "2725:    ike->sa.st_serialno, ike->sa.st_state->short_name);",
          "2728:     st->st_serialno, st->st_state->short_name);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2854:   v2_msgid_update_sent(ike_sa(st), st, md, svm->send);",
          "2855:  }",
          "2867:  if (svm->flags & SMF2_ESTABLISHED) {",
          "",
          "[Removed Lines]",
          "2857:  w = RC_NEW_STATE + st->st_state;",
          "2864:  passert(st->st_state >= STATE_IKEv2_FLOOR);",
          "2865:  passert(st->st_state <  STATE_IKEv2_ROOF);",
          "",
          "[Added Lines]",
          "2857:  w = RC_NEW_STATE + st->st_state->kind;",
          "2864:  passert(st->st_state->kind >= STATE_IKEv2_FLOOR);",
          "2865:  passert(st->st_state->kind <  STATE_IKEv2_ROOF);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2881:   log_details = lswlog_child_sa_established;",
          "2883:   w = RC_SUCCESS;",
          "2885:   log_details = lswlog_ike_sa_established;",
          "2886:  } else {",
          "2887:   log_details = NULL;",
          "",
          "[Removed Lines]",
          "2884:  } else if (st->st_state == STATE_PARENT_I2 || st->st_state == STATE_PARENT_R1) {",
          "",
          "[Added Lines]",
          "2884:  } else if (st->st_state->kind == STATE_PARENT_I2 || st->st_state->kind == STATE_PARENT_R1) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2894:  if ((svm->flags & SMF2_SUPPRESS_SUCCESS_LOG) ||",
          "2895:      (c != NULL && (c->policy & POLICY_OPPORTUNISTIC))) {",
          "2896:   LSWDBGP(DBG_BASE, buf) {",
          "2900:    if (log_details != NULL) {",
          "2901:     log_details(buf, st);",
          "",
          "[Removed Lines]",
          "2897:    lswlogf(buf, \"%s: %s\", st->st_finite_state->fs_name,",
          "2898:     st->st_finite_state->fs_story);",
          "",
          "[Added Lines]",
          "2897:    lswlogf(buf, \"%s: %s\", st->st_state->name,",
          "2898:     st->st_state->story);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2903:   }",
          "2904:  } else {",
          "2905:   LSWLOG_RC(w, buf) {",
          "2909:    if (log_details != NULL) {",
          "2910:     log_details(buf, st);",
          "",
          "[Removed Lines]",
          "2906:    lswlogf(buf, \"%s: %s\", st->st_finite_state->fs_name,",
          "2907:     st->st_finite_state->fs_story);",
          "",
          "[Added Lines]",
          "2906:    lswlogf(buf, \"%s: %s\", st->st_state->name,",
          "2907:     st->st_state->story);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3036:    IS_CHILD_SA_ESTABLISHED(st) &&",
          "3037:    dpd_active_locally(st)) {",
          "3038:    DBG(DBG_DPD,",
          "",
          "[Removed Lines]",
          "3034:   if (st->st_state != from_state &&",
          "3035:    st->st_state != STATE_UNDEFINED &&",
          "",
          "[Added Lines]",
          "3034:   if (st->st_state->kind != from_state &&",
          "3035:    st->st_state->kind != STATE_UNDEFINED &&",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3053:  LSWDBGP(DBG_CONTROL, buf) {",
          "3054:   lswlogf(buf, \"\\\"%s\\\"%s #%lu complete v2 state %s transition with \",",
          "3055:    st->st_connection->name, b, st->st_serialno,",
          "3057:   lswlog_v2_stf_status(buf, result);",
          "3058:   lswlogf(buf, \" suspended from %s:%d\",",
          "3059:    st->st_suspended_md_func,",
          "",
          "[Removed Lines]",
          "3056:    st->st_state_name);",
          "",
          "[Added Lines]",
          "3056:    st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3152:  struct msg_digest *md = (mdp != NULL ? (*mdp) /*NULL?*/ : NULL);",
          "3156:        : finite_states[STATE_UNDEFINED]);",
          "",
          "[Removed Lines]",
          "3155:  const struct finite_state *from_state = (st != NULL ? st->st_finite_state",
          "3157:  const char *from_state_name = from_state->fs_name;",
          "",
          "[Added Lines]",
          "3155:  const struct finite_state *from_state = (st != NULL ? st->st_state",
          "3157:  const char *from_state_name = from_state->name;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3181:  LSWDBGP(DBG_CONTROL, buf) {",
          "3182:   lswlogf(buf, \"#%lu complete v2 state transition from %s\",",
          "3183:    (st == NULL ? SOS_NOBODY : st->st_serialno),",
          "3185:   if (md != NULL) {",
          "3187:     lswlogs(buf, \" md.from_state=\");",
          "3188:     lswlog_enum_short(buf, &state_names, md->from_state);",
          "3189:    }",
          "3190:    if (md->svm != NULL) {",
          "3192:      lswlogs(buf, \" svm.state=\");",
          "3193:      lswlog_enum_short(buf, &state_names, md->svm->state);",
          "3194:     }",
          "",
          "[Removed Lines]",
          "3184:    from_state->fs_short_name);",
          "3186:    if (md->from_state != from_state->fs_kind) {",
          "3191:     if (md->svm->state != from_state->fs_kind) {",
          "",
          "[Added Lines]",
          "3184:    from_state->short_name);",
          "3186:    if (md->from_state != from_state->kind) {",
          "3191:     if (md->svm->state != from_state->kind) {",
          "",
          "---------------"
        ],
        "programs/pluto/ikev2_child.c||programs/pluto/ikev2_child.c": [
          "File: programs/pluto/ikev2_child.c -> programs/pluto/ikev2_child.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:  if (c->spd.that.has_lease &&",
          "160:      md->chain[ISAKMP_NEXT_v2CP] != NULL &&",
          "162:   ikev2_send_cp(&ike->sa, ISAKMP_NEXT_v2SA, outpbs);",
          "163:  } else if (md->chain[ISAKMP_NEXT_v2CP] != NULL) {",
          "164:   DBG(DBG_CONTROL, DBG_log(\"#%lu %s ignoring unexpected v2CP payload\",",
          "167:  }",
          "",
          "[Removed Lines]",
          "161:      cst->st_state != STATE_V2_REKEY_IKE_R) {",
          "165:      cst->st_serialno,",
          "166:      enum_name(&state_names, cst->st_state)));",
          "",
          "[Added Lines]",
          "161:      cst->st_state->kind != STATE_V2_REKEY_IKE_R) {",
          "165:       cst->st_serialno,",
          "166:       cst->st_state->name));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393: static void ikev2_set_domain(pb_stream *cp_a_pbs, struct state *st)",
          "394: {",
          "397:  if (!responder) {",
          "398:   char *safestr = cisco_stringify(cp_a_pbs, \"INTERNAL_DNS_DOMAIN\");",
          "",
          "[Removed Lines]",
          "395:  bool responder = (st->st_state != STATE_PARENT_I2);",
          "",
          "[Added Lines]",
          "395:  bool responder = (st->st_state->kind != STATE_PARENT_I2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:  ip_address ip;",
          "408:  struct connection *c = st->st_connection;",
          "409:  err_t ugh = initaddr(cp_a_pbs->cur, pbs_left(cp_a_pbs), af, &ip);",
          "412:  if (c->policy & POLICY_OPPORTUNISTIC) {",
          "413:   libreswan_log(\"ignored INTERNAL_IP%s_DNS CP payload for Opportunistic IPsec\",",
          "",
          "[Removed Lines]",
          "410:  bool responder = (st->st_state != STATE_PARENT_I2);",
          "",
          "[Added Lines]",
          "410:  bool responder = (st->st_state->kind != STATE_PARENT_I2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "418:  ip_address_buf ip_buf;",
          "419:  const char *ip_str = ipstr(&ip, &ip_buf);",
          "422:   libreswan_log(\"ERROR INTERNAL_IP%s_DNS malformed: %s\",",
          "423:    af == AF_INET ? \"4\" : \"6\", ugh);",
          "424:   return FALSE;",
          "",
          "[Removed Lines]",
          "421:  if ((ugh != NULL && st->st_state == STATE_PARENT_I2)) {",
          "",
          "[Added Lines]",
          "421:  if ((ugh != NULL && st->st_state->kind == STATE_PARENT_I2)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "450:  ipstr_buf ip_str;",
          "451:  struct connection *c = st->st_connection;",
          "452:  err_t ugh = initaddr(cp_a_pbs->cur, pbs_left(cp_a_pbs), af, &ip);",
          "456:   libreswan_log(\"ERROR INTERNAL_IP%s_ADDRESS malformed: %s\",",
          "457:    af == AF_INET ? \"4\" : \"6\", ugh);",
          "458:   return FALSE;",
          "",
          "[Removed Lines]",
          "453:  bool responder = st->st_state != STATE_PARENT_I2;",
          "455:  if ((ugh != NULL && st->st_state == STATE_PARENT_I2) || isanyaddr(&ip)) {",
          "",
          "[Added Lines]",
          "453:  bool responder = st->st_state->kind != STATE_PARENT_I2;",
          "455:  if ((ugh != NULL && st->st_state->kind == STATE_PARENT_I2) || isanyaddr(&ip)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "526:  DBG(DBG_CONTROLMORE, DBG_log(\"#%lu %s[%lu] parsing ISAKMP_NEXT_v2CP payload\",",
          "527:     st->st_serialno, c->name, c->instance_serial));",
          "530:   loglog(RC_LOG_SERIOUS, \"ERROR expected IKEv2_CP_CFG_REPLY got a %s\",",
          "531:    enum_name(&ikev2_cp_type_names, cp->isacp_type));",
          "532:   return FALSE;",
          "533:  }",
          "536:   loglog(RC_LOG_SERIOUS, \"ERROR expected IKEv2_CP_CFG_REQUEST got a %s\",",
          "537:    enum_name(&ikev2_cp_type_names, cp->isacp_type));",
          "538:   return FALSE;",
          "",
          "[Removed Lines]",
          "529:  if (st->st_state == STATE_PARENT_I2 && cp->isacp_type !=  IKEv2_CP_CFG_REPLY) {",
          "535:  if (st->st_state == STATE_PARENT_R1 && cp->isacp_type !=  IKEv2_CP_CFG_REQUEST) {",
          "",
          "[Added Lines]",
          "529:  if (st->st_state->kind == STATE_PARENT_I2 && cp->isacp_type !=  IKEv2_CP_CFG_REPLY) {",
          "535:  if (st->st_state->kind == STATE_PARENT_R1 && cp->isacp_type !=  IKEv2_CP_CFG_REQUEST) {",
          "",
          "---------------"
        ],
        "programs/pluto/ikev2_crypto.c||programs/pluto/ikev2_crypto.c": [
          "File: programs/pluto/ikev2_crypto.c -> programs/pluto/ikev2_crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  if (st->st_pfs_group != NULL) {",
          "116:   DBG(DBG_CRYPT, DBG_log(\"#%lu %s add g^ir to child key %p\",",
          "117:      st->st_serialno,",
          "119:      st->st_shared_nss));",
          "120:   shared = st->st_shared_nss;",
          "121:  }",
          "",
          "[Removed Lines]",
          "118:      st->st_state_name,",
          "",
          "[Added Lines]",
          "118:      st->st_state->name,",
          "",
          "---------------"
        ],
        "programs/pluto/ikev2_msgid.c||programs/pluto/ikev2_msgid.c": [
          "File: programs/pluto/ikev2_msgid.c -> programs/pluto/ikev2_msgid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: {",
          "37:  lswlogf(buf, \"Message ID: IKE #%lu %s\",",
          "38:   ike->sa.st_serialno,",
          "41:  lswlogf(buf, \"; %s \", what);",
          "42:  switch (message) {",
          "",
          "[Removed Lines]",
          "39:   ike->sa.st_finite_state->fs_short_name);",
          "",
          "[Added Lines]",
          "39:   ike->sa.st_state->short_name);",
          "",
          "---------------"
        ],
        "programs/pluto/ikev2_parent.c||programs/pluto/ikev2_parent.c": [
          "File: programs/pluto/ikev2_parent.c -> programs/pluto/ikev2_parent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "244: {",
          "245:  struct msg_digest *fake_md = alloc_md(\"fake IKEv2 msg_digest\");",
          "246:  fake_md->st = st;",
          "248:  fake_md->hdr.isa_msgid = v2_INVALID_MSGID;",
          "249:  fake_md->hdr.isa_version = (IKEv2_MAJOR_VERSION << ISA_MAJ_SHIFT);",
          "250:  fake_md->fake_dne = true;",
          "253:  return fake_md;",
          "254: }",
          "",
          "[Removed Lines]",
          "247:  fake_md->from_state = st->st_finite_state->fs_kind;",
          "252:  fake_md->svm = st->st_finite_state->fs_v2_transitions;",
          "",
          "[Added Lines]",
          "247:  fake_md->from_state = st->st_state->kind;",
          "252:  fake_md->svm = st->st_state->v2_transitions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "535:  initialize_new_state(st, c, policy, try, whack_sock);",
          "536:  passert(st->st_ike_version == IKEv2);",
          "538:  st->st_original_role = ORIGINAL_INITIATOR;",
          "539:  passert(st->st_sa_role == SA_INITIATOR);",
          "540:  passert(st->st_msgid_lastack == v2_INVALID_MSGID);",
          "",
          "[Removed Lines]",
          "537:  passert(st->st_state_kind == STATE_PARENT_I0);",
          "",
          "[Added Lines]",
          "537:  passert(st->st_state->kind == STATE_PARENT_I0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "571:   update_pending(predecessor, st);",
          "572:   whack_log(RC_NEW_STATE + STATE_PARENT_I1,",
          "573:      \"%s: initiate, replacing #%lu\",",
          "575:      predecessor->st_serialno);",
          "576:  } else {",
          "577:   if ((c->policy & POLICY_OPPORTUNISTIC) == LEMPTY) {",
          "",
          "[Removed Lines]",
          "574:      st->st_state_name,",
          "",
          "[Added Lines]",
          "574:      st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "927:  struct state *st = new_v2_state(STATE_PARENT_R0, SA_RESPONDER,",
          "928:      md->hdr.isa_ike_spis.initiator,",
          "929:      ike_responder_spi(&md->sender));",
          "",
          "[Removed Lines]",
          "926:  pexpect(md->svm == finite_states[STATE_PARENT_R0]->fs_v2_transitions);",
          "",
          "[Added Lines]",
          "926:  pexpect(md->svm == finite_states[STATE_PARENT_R0]->v2_transitions);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "931:  initialize_new_state(st, c, policy, 0, null_fd);",
          "932:  update_ike_endpoints(st, md);",
          "933:  passert(st->st_ike_version == IKEv2);",
          "935:  st->st_original_role = ORIGINAL_RESPONDER;",
          "936:  passert(st->st_sa_role == SA_RESPONDER);",
          "937:  passert(st->st_msgid_lastack == v2_INVALID_MSGID);",
          "",
          "[Removed Lines]",
          "934:  passert(st->st_state_kind == STATE_PARENT_R0);",
          "",
          "[Added Lines]",
          "934:  passert(st->st_state->kind == STATE_PARENT_R0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "956:  md->st = st;",
          "958:  pexpect(md->from_state == STATE_PARENT_R0);",
          "962:  struct ikev2_proposals *ike_proposals =",
          "",
          "[Removed Lines]",
          "959:  pexpect(md->svm == finite_states[STATE_PARENT_R0]->fs_v2_transitions);",
          "",
          "[Added Lines]",
          "959:  pexpect(md->svm == finite_states[STATE_PARENT_R0]->v2_transitions);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1383:    change_state(st, STATE_PARENT_I0);",
          "",
          "[Removed Lines]",
          "1382:    md->svm = finite_states[STATE_PARENT_I0]->fs_v2_transitions;",
          "",
          "[Added Lines]",
          "1382:    md->svm = finite_states[STATE_PARENT_I0]->v2_transitions;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1491:    rate_log(\"%s: received unauthenticated %s - ignored\",",
          "1493:      enum_name(&ikev2_notify_names,",
          "1494:         ntfy->payload.v2n.isan_type));",
          "1495:   }",
          "",
          "[Removed Lines]",
          "1492:      st->st_state_name,",
          "",
          "[Added Lines]",
          "1492:      st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1655:   case v2N_NO_PPK_AUTH:",
          "1656:   case v2N_INITIAL_CONTACT:",
          "1657:    DBG(DBG_CONTROL, DBG_log(\"%s: received %s which is not valid in the IKE_SA_INIT Exchange - ignoring it\",",
          "1659:     enum_name(&ikev2_notify_names,",
          "1660:      ntfy->payload.v2n.isan_type)));",
          "1661:    break;",
          "",
          "[Removed Lines]",
          "1658:     st->st_state_name,",
          "",
          "[Added Lines]",
          "1658:     st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1707:   default:",
          "1708:    DBG(DBG_CONTROL, DBG_log(\"%s: received %s but ignoring it\",",
          "1710:     enum_name(&ikev2_notify_names,",
          "1711:      ntfy->payload.v2n.isan_type)));",
          "1712:   }",
          "",
          "[Removed Lines]",
          "1709:     st->st_state_name,",
          "",
          "[Added Lines]",
          "1709:     st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3295:  const char *what;",
          "3296:  struct ikev2_proposals *child_proposals;",
          "3297:  if (isa_xchg == ISAKMP_v2_CREATE_CHILD_SA) {",
          "3299:    what = \"CREATE_CHILD_SA initiator accepting remote ESP/AH proposal\";",
          "3300:   } else {",
          "3301:    what = \"CREATE_CHILD_SA responder matching remote ESP/AH proposals\";",
          "",
          "[Removed Lines]",
          "3298:   if (st->st_state == STATE_V2_CREATE_I) {",
          "",
          "[Added Lines]",
          "3298:   if (st->st_state->kind == STATE_V2_CREATE_I) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3401:  struct state *st = md->st;",
          "3402:  struct connection *c = st->st_connection;",
          "3407:  if (need_configuration_payload(c, st->hidden_variables.st_nat_traversal)) {",
          "",
          "[Removed Lines]",
          "3404:  if (st->st_state == STATE_V2_REKEY_CHILD_I)",
          "",
          "[Added Lines]",
          "3404:  if (st->st_state->kind == STATE_V2_REKEY_CHILD_I)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3443:  }",
          "3445:  libreswan_log(\"rekeyed #%lu %s %s remaining life %lds\", pred,",
          "3447:    rst ==  NULL ? \"and the state is gone\" : \"and expire it\",",
          "3448:    lifetime);",
          "",
          "[Removed Lines]",
          "3446:    st->st_state_name,",
          "",
          "[Added Lines]",
          "3446:    st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3585:  delete_event(st);",
          "3588:   ikev2_rekey_expire_pred(st, st->st_ipsec_pred);",
          "3590:  return STF_OK;",
          "",
          "[Removed Lines]",
          "3587:  if (st->st_state == STATE_V2_REKEY_CHILD_I)",
          "",
          "[Added Lines]",
          "3587:  if (st->st_state->kind == STATE_V2_REKEY_CHILD_I)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3856: {",
          "3857:  struct state *rst = state_with_serialno(st->st_ipsec_pred);",
          "3860:   return TRUE;",
          "3862:  if (rst ==  NULL) {",
          "",
          "[Removed Lines]",
          "3859:  if (st->st_state != STATE_V2_REKEY_CHILD_I0)",
          "",
          "[Added Lines]",
          "3859:  if (st->st_state->kind != STATE_V2_REKEY_CHILD_I0)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4155:  chunk_t local_nonce;",
          "4156:  chunk_t *local_g;",
          "4159:  case STATE_V2_REKEY_IKE_R:",
          "4160:  {",
          "4161:   local_g = &st->st_gr;",
          "",
          "[Removed Lines]",
          "4158:  switch (st->st_state) {",
          "",
          "[Added Lines]",
          "4158:  switch (st->st_state->kind) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4188:   break;",
          "4189:  }",
          "4190:  default:",
          "4192:  }",
          "",
          "[Removed Lines]",
          "4191:   bad_case(st->st_state);",
          "",
          "[Added Lines]",
          "4191:   bad_case(st->st_state->kind);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4287:       struct msg_digest **mdp,",
          "4288:       struct pluto_crypto_req *r)",
          "4289: {",
          "4293:  pexpect(st->st_sa_role == SA_INITIATOR);",
          "",
          "[Removed Lines]",
          "4290:  pexpect(st->st_state == STATE_V2_REKEY_IKE_I);",
          "",
          "[Added Lines]",
          "4290:  pexpect(st->st_state->kind == STATE_V2_REKEY_IKE_I);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4296:  pexpect((*mdp)->st == st);",
          "4298:  dbg(\"%s for #%lu %s\",",
          "4302:  struct ike_sa *ike = ike_sa(st);",
          "",
          "[Removed Lines]",
          "4299:       __func__, st->st_serialno, st->st_state_name);",
          "",
          "[Added Lines]",
          "4299:       __func__, st->st_serialno, st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4365:  const char *desc;",
          "4367:  case STATE_V2_CREATE_I:",
          "4368:   desc = \"ikev2 Child SA initiator pfs=yes\";",
          "4369:   break;",
          "",
          "[Removed Lines]",
          "4366:  switch (st->st_state) {",
          "",
          "[Added Lines]",
          "4366:  switch (st->st_state->kind) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4371:   desc = \"ikev2 Child Rekey SA initiator pfs=yes\";",
          "4372:   break;",
          "4373:  default:",
          "4375:  }",
          "4376:  submit_dh(st, remote_ke, ikev2_child_inR_continue, desc);",
          "4377:  return STF_SUSPEND;",
          "",
          "[Removed Lines]",
          "4374:   bad_case(st->st_state);",
          "",
          "[Added Lines]",
          "4374:   bad_case(st->st_state->kind);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4392:  pexpect(IS_CHILD_SA(st));",
          "",
          "[Removed Lines]",
          "4388:  pexpect(st->st_state == STATE_V2_CREATE_I ||",
          "4389:   st->st_state == STATE_V2_REKEY_CHILD_I);",
          "",
          "[Added Lines]",
          "4388:  pexpect(st->st_state->kind == STATE_V2_CREATE_I ||",
          "4389:   st->st_state->kind == STATE_V2_REKEY_CHILD_I);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4396:  pexpect(v2_msg_role(md) == MESSAGE_RESPONSE);",
          "4398:  dbg(\"%s for #%lu %s\",",
          "4402:  if (ike_sa(st) == NULL) {",
          "",
          "[Removed Lines]",
          "4399:       __func__, st->st_serialno, st->st_state_name);",
          "",
          "[Added Lines]",
          "4399:       __func__, st->st_serialno, st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4483:  case STATE_V2_CREATE_R:",
          "4484:   if (st->st_pfs_group != NULL) {",
          "4485:    request_ke_and_nonce(\"Child Responder KE and nonce nr\",",
          "",
          "[Removed Lines]",
          "4482:  switch (st->st_state) {",
          "",
          "[Added Lines]",
          "4482:  switch (st->st_state->kind) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4501:   }",
          "4502:   return STF_SUSPEND;",
          "4503:  default:",
          "4505:  }",
          "4506: }",
          "",
          "[Removed Lines]",
          "4504:   bad_case(st->st_state);",
          "",
          "[Added Lines]",
          "4504:   bad_case(st->st_state->kind);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4527:  pexpect(IS_CHILD_SA(st));",
          "",
          "[Removed Lines]",
          "4523:  pexpect(st->st_state == STATE_V2_CREATE_R ||",
          "4524:   st->st_state == STATE_V2_REKEY_CHILD_R);",
          "",
          "[Added Lines]",
          "4523:  pexpect(st->st_state->kind == STATE_V2_CREATE_R ||",
          "4524:   st->st_state->kind == STATE_V2_REKEY_CHILD_R);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4530:  pexpect((*mdp)->st == st);",
          "4532:  dbg(\"%s for #%lu %s\",",
          "4536:  struct ike_sa *ike = ike_sa(st);",
          "",
          "[Removed Lines]",
          "4533:       __func__, st->st_serialno, st->st_state_name);",
          "",
          "[Added Lines]",
          "4533:       __func__, st->st_serialno, st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4573:  passert(md != NULL);",
          "",
          "[Removed Lines]",
          "4569:  pexpect(st->st_state == STATE_V2_CREATE_R ||",
          "4570:   st->st_state == STATE_V2_REKEY_CHILD_R);",
          "",
          "[Added Lines]",
          "4569:  pexpect(st->st_state->kind == STATE_V2_CREATE_R ||",
          "4570:   st->st_state->kind == STATE_V2_REKEY_CHILD_R);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4579:  dbg(\"%s for #%lu %s\",",
          "4583:  if (ike_sa(st) == NULL) {",
          "",
          "[Removed Lines]",
          "4580:       __func__, st->st_serialno, st->st_state_name);",
          "",
          "[Added Lines]",
          "4580:       __func__, st->st_serialno, st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4694:           struct msg_digest **mdp,",
          "4695:           struct pluto_crypto_req *r)",
          "4696: {",
          "",
          "[Removed Lines]",
          "4697:  pexpect(st->st_state == STATE_V2_REKEY_IKE_R);",
          "",
          "[Added Lines]",
          "4697:  pexpect(st->st_state->kind == STATE_V2_REKEY_IKE_R);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4704:  pexpect(v2_msg_role(*mdp) == MESSAGE_REQUEST);",
          "4706:  dbg(\"%s for #%lu %s\",",
          "4710:  struct ike_sa *ike = ike_sa(st);",
          "",
          "[Removed Lines]",
          "4707:       __func__, st->st_serialno, st->st_state_name);",
          "",
          "[Added Lines]",
          "4707:       __func__, st->st_serialno, st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4740:             struct msg_digest **mdp,",
          "4741:             struct pluto_crypto_req *r)",
          "4742: {",
          "4746:  passert(*mdp != NULL);",
          "",
          "[Removed Lines]",
          "4743:  pexpect(st->st_state == STATE_V2_REKEY_IKE_R);",
          "",
          "[Added Lines]",
          "4743:  pexpect(st->st_state->kind == STATE_V2_REKEY_IKE_R);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4752:  dbg(\"%s for #%lu %s\",",
          "4756:  if (ike_sa(st) == NULL) {",
          "",
          "[Removed Lines]",
          "4753:       __func__, st->st_serialno, st->st_state_name);",
          "",
          "[Added Lines]",
          "4753:       __func__, st->st_serialno, st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4807:   return STF_INTERNAL_ERROR;",
          "4808:  }",
          "4811:  case STATE_V2_REKEY_IKE_R:",
          "4812:  case STATE_V2_REKEY_IKE_I0:",
          "4813:   ret = ikev2_child_add_ike_payloads(md, &sk.pbs);",
          "",
          "[Removed Lines]",
          "4810:  switch (st->st_state) {",
          "",
          "[Added Lines]",
          "4810:  switch (st->st_state->kind) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4860:   pst->st_msgid_lastreplied = md->hdr.isa_msgid;",
          "4861:  }",
          "4865:   log_ipsec_sa_established(\"negotiated new IPsec SA\", st);",
          "4866:  }",
          "",
          "[Removed Lines]",
          "4863:  if (st->st_state == STATE_V2_CREATE_R ||",
          "4864:    st->st_state == STATE_V2_REKEY_CHILD_R) {",
          "",
          "[Added Lines]",
          "4863:  if (st->st_state->kind == STATE_V2_CREATE_R ||",
          "4864:    st->st_state->kind == STATE_V2_REKEY_CHILD_R) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4881:    loglog(RC_LOG_SERIOUS, \"no viable to parent to initiate CREATE_CHILD_EXCHANGE %s; trying replace\",",
          "4883:    delete_event(&child->sa);",
          "4884:    event_schedule_s(EVENT_SA_REPLACE, REPLACE_ORPHAN, &child->sa);",
          "",
          "[Removed Lines]",
          "4882:           child->sa.st_state_name);",
          "",
          "[Added Lines]",
          "4882:           child->sa.st_state->name);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5403:  if (!responding && st->st_state == STATE_IKESA_DEL) {",
          "",
          "[Added Lines]",
          "5403:  if (!responding && st->st_state->kind == STATE_IKESA_DEL) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "5858: void ikev2_child_outI(struct state *st)",
          "5859: {",
          "5862:  case STATE_V2_REKEY_CHILD_I0:",
          "5863:   if (st->st_pfs_group == NULL) {",
          "",
          "[Removed Lines]",
          "5860:  switch (st->st_state) {",
          "",
          "[Added Lines]",
          "5860:  switch (st->st_state->kind) {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "5890:  default:",
          "5892:  }",
          "5893: }",
          "",
          "[Removed Lines]",
          "5891:   bad_case(st->st_state);",
          "",
          "[Added Lines]",
          "5891:   bad_case(st->st_state->kind);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "5909:  struct child_sa *child = pexpect_child_sa(st);",
          "",
          "[Removed Lines]",
          "5904:  pexpect(st->st_state == STATE_V2_CREATE_I0 ||",
          "5905:   st->st_state == STATE_V2_REKEY_CHILD_I0 ||",
          "5906:   st->st_state == STATE_V2_REKEY_IKE_I0);",
          "",
          "[Added Lines]",
          "5904:  pexpect(st->st_state->kind == STATE_V2_CREATE_I0 ||",
          "5905:   st->st_state->kind == STATE_V2_REKEY_CHILD_I0 ||",
          "5906:   st->st_state->kind == STATE_V2_REKEY_IKE_I0);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "5916:  }",
          "5918:  dbg(\"%s for #%lu %s\",",
          "5922:  if (ike == NULL) {",
          "",
          "[Removed Lines]",
          "5919:       __func__, st->st_serialno, st->st_state_name);",
          "",
          "[Added Lines]",
          "5919:       __func__, st->st_serialno, st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "5927:  }",
          "5932:  unpack_nonce(&st->st_ni, r);",
          "5933:  if (r->pcr_type == pcr_build_ke_and_nonce)",
          "",
          "[Removed Lines]",
          "5930:  pexpect(st->st_state == STATE_V2_REKEY_IKE_I0 ? r->pcr_type == pcr_build_ke_and_nonce : true);",
          "",
          "[Added Lines]",
          "5930:  pexpect(st->st_state->kind == STATE_V2_REKEY_IKE_I0 ? r->pcr_type == pcr_build_ke_and_nonce : true);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "5956: {",
          "5957:  struct connection *c = st->st_connection;",
          "5962:  if (c->newest_ipsec_sa > st->st_serialno) {",
          "",
          "[Removed Lines]",
          "5959:  if (st->st_state !=  STATE_PARENT_I1)",
          "",
          "[Added Lines]",
          "5959:  if (st->st_state->kind !=  STATE_PARENT_I1)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "6347:   }",
          "6348:  }",
          "6351:  case STATE_V2_REKEY_IKE_I0:",
          "6352:  case STATE_V2_REKEY_CHILD_I0:",
          "6353:  case STATE_V2_CREATE_I0:",
          "6354:   if (unack < st->st_connection->ike_window) {",
          "6355:    loglog(RC_LOG_SERIOUS,",
          "6356:     \"expiring %s state. Possible Message Id deadlock?  Parent #%lu unacknowledged %u next Message Id=%u IKE exchange window %u\",",
          "6358:     ike->sa.st_serialno, unack,",
          "6359:     ike->sa.st_msgid_nextuse,",
          "6360:     ike->sa.st_connection->ike_window);",
          "",
          "[Removed Lines]",
          "6350:  switch (st->st_state) {",
          "6357:     st->st_state_name,",
          "",
          "[Added Lines]",
          "6350:  switch (st->st_state->kind) {",
          "6357:     st->st_state->name,",
          "",
          "---------------"
        ],
        "programs/pluto/ikev2_psk.c||programs/pluto/ikev2_psk.c": [
          "File: programs/pluto/ikev2_psk.c -> programs/pluto/ikev2_psk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  passert(authby == AUTH_PSK || authby == AUTH_NULL);",
          "73:  DBG(DBG_CONTROL, DBG_log(\"ikev2_calculate_psk_sighash() called from %s to %s PSK with authby=%s\",",
          "75:   verify ? \"verify\" : \"create\",",
          "76:   enum_name(&ikev2_asym_auth_name, authby)));",
          "",
          "[Removed Lines]",
          "74:   st->st_state_name,",
          "",
          "[Added Lines]",
          "74:   st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  const char *nonce_name;",
          "82:  const chunk_t *nullauth_pss;",
          "85:  case STATE_PARENT_I2:",
          "86:   if (!verify) {",
          "",
          "[Removed Lines]",
          "84:  switch (st->st_state) {",
          "",
          "[Added Lines]",
          "84:  switch (st->st_state->kind) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:   break;",
          "118:  default:",
          "120:  }",
          "",
          "[Removed Lines]",
          "119:   bad_case(st->st_state);",
          "",
          "[Added Lines]",
          "119:   bad_case(st->st_state->kind);",
          "",
          "---------------"
        ],
        "programs/pluto/ipsec_doi.c||programs/pluto/ipsec_doi.c": [
          "File: programs/pluto/ipsec_doi.c -> programs/pluto/ipsec_doi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "509:   dbg(\"#%lu send %s delete notification for %s\",",
          "510:       st->st_serialno,",
          "511:       enum_name(&ike_version_names, st->st_ike_version),",
          "513:   switch (st->st_ike_version) {",
          "514:   case IKEv1:",
          "515:    send_v1_delete(st);",
          "",
          "[Removed Lines]",
          "512:       st->st_state_name);",
          "",
          "[Added Lines]",
          "512:       st->st_state->name);",
          "",
          "---------------"
        ],
        "programs/pluto/log.c||programs/pluto/log.c": [
          "File: programs/pluto/log.c -> programs/pluto/log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:    if (DBGP(DBG_ADD_PREFIX)) {",
          "544:     lswlogf(buf, \" \");",
          "547:    }",
          "548:   }",
          "549:   lswlogs(buf, \": \");",
          "",
          "[Removed Lines]",
          "545:     lswlog_enum_short(buf, &state_names,",
          "546:         cur_state->st_state);",
          "",
          "[Added Lines]",
          "545:     lswlogs(buf, cur_state->st_state->short_name);",
          "",
          "---------------"
        ],
        "programs/pluto/log.h||programs/pluto/log.h": [
          "File: programs/pluto/log.h -> programs/pluto/log.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:         char *ansbuf, size_t ansbuf_len);",
          "62: #define binlog_fake_state(st, new_state) binlog_state((st), (new_state))",
          "63: extern void binlog_state(struct state *st, enum state_kind state);",
          "",
          "[Removed Lines]",
          "61: #define binlog_refresh_state(st) binlog_state((st), (st)->st_state)",
          "",
          "[Added Lines]",
          "61: #define binlog_refresh_state(st) binlog_state((st), (st)->st_state->kind)",
          "",
          "---------------"
        ],
        "programs/pluto/nat_traversal.c||programs/pluto/nat_traversal.c": [
          "File: programs/pluto/nat_traversal.c -> programs/pluto/nat_traversal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1002:      (st->hidden_variables.st_nat_traversal & NAT_T_DETECTED) &&",
          "1003:      st->st_localport != pluto_nat_port) {",
          "1004:   DBG(DBG_NATT,",
          "",
          "[Removed Lines]",
          "999:  if ((st->st_state == STATE_MAIN_I3 ||",
          "1000:       st->st_state == STATE_QUICK_I1 ||",
          "1001:       st->st_state == STATE_AGGR_I2) &&",
          "",
          "[Added Lines]",
          "999:  if ((st->st_state->kind == STATE_MAIN_I3 ||",
          "1000:       st->st_state->kind == STATE_QUICK_I1 ||",
          "1001:       st->st_state->kind == STATE_AGGR_I2) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1106:  natd_lookup_common(st, &md->sender, found_me, found_him);",
          "1109:      (st->hidden_variables.st_nat_traversal & NAT_T_DETECTED)) {",
          "1110:   DBG(DBG_NATT, {",
          "1111:    ipstr_buf b;",
          "",
          "[Removed Lines]",
          "1108:  if (st->st_state == STATE_PARENT_I1 &&",
          "",
          "[Added Lines]",
          "1108:  if (st->st_state->kind == STATE_PARENT_I1 &&",
          "",
          "---------------"
        ],
        "programs/pluto/pluto_stats.c||programs/pluto/pluto_stats.c": [
          "File: programs/pluto/pluto_stats.c -> programs/pluto/pluto_stats.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:  if (IS_IKE_SA(st)) {",
          "186:   if (fail) {",
          "187:    if (st->st_ike_version == IKEv2)",
          "188:     pstats_ikev2_fail++;",
          "",
          "[Removed Lines]",
          "185:   bool fail = !IS_IKE_SA_ESTABLISHED(st) && st->st_state != STATE_IKESA_DEL;",
          "",
          "[Added Lines]",
          "185:   bool fail = !IS_IKE_SA_ESTABLISHED(st) && st->st_state->kind != STATE_IKESA_DEL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:  struct connection *const c = st->st_connection;",
          "258:   pstats_ipsec_sa++;",
          "259:  }",
          "",
          "[Removed Lines]",
          "257:  if (st->st_state == STATE_QUICK_R1) {",
          "",
          "[Added Lines]",
          "257:  if (st->st_state->kind == STATE_QUICK_R1) {",
          "",
          "---------------"
        ],
        "programs/pluto/rcv_whack.c||programs/pluto/rcv_whack.c": [
          "File: programs/pluto/rcv_whack.c -> programs/pluto/rcv_whack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:    log_to_log(\"received whack to delete %s state #%lu %s\",",
          "427:        enum_name(&ike_version_names, st->st_ike_version),",
          "428:        st->st_serialno,",
          "431:    if ((st->st_ike_version == IKEv2) && !IS_CHILD_SA(st)) {",
          "432:     log_to_log(\"Also deleting any corresponding CHILD_SAs\");",
          "",
          "[Removed Lines]",
          "429:        st->st_state_name);",
          "",
          "[Added Lines]",
          "429:        st->st_state->name);",
          "",
          "---------------"
        ],
        "programs/pluto/retransmit.c||programs/pluto/retransmit.c": [
          "File: programs/pluto/retransmit.c -> programs/pluto/retransmit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: size_t lswlog_retransmit_prefix(struct lswlog *buf, struct state *st)",
          "27: {",
          "28:  return lswlogf(buf, \"#%ld %s: retransmits: \",",
          "30: }",
          "32: unsigned long retransmit_count(struct state *st)",
          "",
          "[Removed Lines]",
          "29:          st->st_serialno, st->st_state_name);",
          "",
          "[Added Lines]",
          "29:          st->st_serialno, st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:      monotime_exceeds_limit ||",
          "226:      deltatime_exceeds_limit) {",
          "227:   LSWLOG_RC(RC_NORETRANSMISSION, buf) {",
          "229:    if (retransmit_count_exceeded) {",
          "230:     lswlogf(buf, \"max number of retransmissions (%lu) reached after \",",
          "231:      nr_retransmits);",
          "",
          "[Removed Lines]",
          "228:    lswlogf(buf, \"%s: \", st->st_finite_state->fs_name);",
          "",
          "[Added Lines]",
          "228:    lswlogf(buf, \"%s: \", st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:     lswlogf(buf, \" second timeout exceeded after %lu retransmits\",",
          "237:      nr_retransmits);",
          "238:    }",
          "240:    case STATE_MAIN_I3:",
          "241:    case STATE_AGGR_I2:",
          "242:     lswlogs(buf, \".  Possible authentication failure: no acceptable response to our first encrypted message\");",
          "",
          "[Removed Lines]",
          "239:    switch (st->st_state) {",
          "",
          "[Added Lines]",
          "239:    switch (st->st_state->kind) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "271:  event_schedule(EVENT_RETRANSMIT, rt->delay, st);",
          "272:  LSWLOG_RC(RC_RETRANSMISSION, buf) {",
          "273:   lswlogf(buf, \"%s: retransmission; will wait \",",
          "275:   lswlog_deltatime(buf, rt->delay);",
          "276:   lswlogs(buf, \" seconds for response\");",
          "277:  }",
          "",
          "[Removed Lines]",
          "274:    st->st_finite_state->fs_name);",
          "",
          "[Added Lines]",
          "274:    st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302:  event_schedule(EVENT_RETRANSMIT, rt->delay, st);",
          "303:  LSWLOG_RC(RC_RETRANSMISSION, buf) {",
          "304:   lswlogf(buf, \"%s: suppressing retransmits; will wait \",",
          "306:   lswlog_deltatime(buf, rt->delay);",
          "307:   lswlogs(buf, \" seconds for retry\");",
          "308:  }",
          "",
          "[Removed Lines]",
          "305:    st->st_finite_state->fs_name);",
          "",
          "[Added Lines]",
          "305:    st->st_state->name);",
          "",
          "---------------"
        ],
        "programs/pluto/retry.c||programs/pluto/retry.c": [
          "File: programs/pluto/retry.c -> programs/pluto/retry.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:  if (pst != st) {",
          "222:    pstat_sa_failed(pst, REASON_TOO_MANY_RETRANSMITS);",
          "223:    delete_state(pst);",
          "224:   } else {",
          "",
          "[Removed Lines]",
          "221:   if (pst->st_state == STATE_PARENT_I2) {",
          "",
          "[Added Lines]",
          "221:   if (pst->st_state->kind == STATE_PARENT_I2) {",
          "",
          "---------------"
        ],
        "programs/pluto/show.c||programs/pluto/show.c": [
          "File: programs/pluto/show.c -> programs/pluto/show.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:  }",
          "160:   return;",
          "162:  if (IS_IKE_SA(st)) {",
          "",
          "[Removed Lines]",
          "159:  if (st->st_state == STATE_UNDEFINED)",
          "",
          "[Added Lines]",
          "159:  if (st->st_state->kind == STATE_UNDEFINED)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:   } else {",
          "170:    if (lc->phase1 < p1_init)",
          "171:     lc->phase1 = p1_init;",
          "173:        lc->phase1 < p1_encrypt)",
          "174:     lc->phase1 = p1_encrypt;",
          "175:    if (IS_ISAKMP_AUTHENTICATED(st->st_state) &&",
          "",
          "[Removed Lines]",
          "172:    if (IS_ISAKMP_ENCRYPTED(st->st_state) &&",
          "",
          "[Added Lines]",
          "172:    if (IS_ISAKMP_ENCRYPTED(st->st_state->kind) &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:  if (st->st_connection != lc->conn)",
          "185:   return;",
          "188:   if (lc->tunnel < tun_phase15)",
          "189:    lc->tunnel = tun_phase15;",
          "190:  }",
          "",
          "[Removed Lines]",
          "187:  if (IS_PHASE15(st->st_state)) {",
          "",
          "[Added Lines]",
          "187:  if (IS_PHASE15(st->st_state->kind)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:  };",
          "237:  {",
          "241:   dbg(\"FOR_EACH_STATE_... via for_each_state in %s\", __func__);",
          "242:   for_each_state(connection_state, &lc);",
          "244:  }",
          "246:  {",
          "",
          "[Removed Lines]",
          "238:   const struct finite_state *save_state = st->st_finite_state;",
          "240:   st->st_finite_state = finite_states[new_state];",
          "243:   st->st_finite_state = save_state;",
          "",
          "[Added Lines]",
          "238:   const struct finite_state *save_state = st->st_state;",
          "240:   st->st_state = finite_states[new_state];",
          "243:   st->st_state = save_state;",
          "",
          "---------------"
        ],
        "programs/pluto/state.c||programs/pluto/state.c": [
          "File: programs/pluto/state.c -> programs/pluto/state.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: struct finite_state state_undefined = {",
          "124: };",
          "126: const struct finite_state *finite_states[STATE_IKE_ROOF] = {",
          "",
          "[Removed Lines]",
          "119:  .fs_kind = STATE_UNDEFINED,",
          "120:  .fs_name = \"STATE_UNDEFINED\",",
          "121:  .fs_short_name = \"UNDEFINED\",",
          "122:  .fs_story = \"not defined - either very new or dead (internal)\",",
          "123:  .fs_category = CAT_IGNORE,",
          "",
          "[Added Lines]",
          "119:  .kind = STATE_UNDEFINED,",
          "120:  .name = \"STATE_UNDEFINED\",",
          "121:  .short_name = \"UNDEFINED\",",
          "122:  .story = \"not defined - either very new or dead (internal)\",",
          "123:  .category = CAT_IGNORE,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:  if (fs == NULL) {",
          "240:   lswlogs(buf, \"NULL-FINITE_STATE\");",
          "241:  } else {",
          "243:   lswlogf(buf, \" category: \");",
          "247:  }",
          "248: }",
          "",
          "[Removed Lines]",
          "242:   lswlogf(buf, \"%s:\", fs->fs_short_name);",
          "244:   lswlog_enum_short(buf, &state_category_names, fs->fs_category);",
          "246:   lswlogf(buf, \" flags: \"PRI_LSET, fs->fs_flags);",
          "",
          "[Added Lines]",
          "242:   lswlogf(buf, \"%s:\", fs->short_name);",
          "244:   lswlog_enum_short(buf, &state_category_names, fs->category);",
          "246:   lswlogf(buf, \" flags: \"PRI_LSET, fs->flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:          const struct finite_state *state,",
          "310:          int delta)",
          "311: {",
          "",
          "[Removed Lines]",
          "312:  if (state->fs_category != CAT_IGNORE) {",
          "313:   state_count[state->fs_kind] += delta;",
          "314:   cat_count[state->fs_category] += delta;",
          "",
          "[Added Lines]",
          "312:  if (state->category != CAT_IGNORE) {",
          "313:   state_count[state->kind] += delta;",
          "314:   cat_count[state->category] += delta;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323:   case CAT_ESTABLISHED_IKE_SA:",
          "324:    cat_count_ike_sa[st->st_ikev2_anon] += delta;",
          "325:    break;",
          "",
          "[Removed Lines]",
          "322:   switch (state->fs_category) {",
          "",
          "[Added Lines]",
          "322:   switch (state->category) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "337:           const struct finite_state *new_state)",
          "338: {",
          "343:  update_state_stat(st, old_state, -1);",
          "344:  update_state_stat(st, new_state, +1);",
          "",
          "[Removed Lines]",
          "340:  pexpect(old_state->fs_category != CAT_UNKNOWN);",
          "341:  pexpect(new_state->fs_category != CAT_UNKNOWN);",
          "",
          "[Added Lines]",
          "340:  pexpect(old_state->category != CAT_UNKNOWN);",
          "341:  pexpect(new_state->category != CAT_UNKNOWN);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352:  if (DBGP(DBG_BASE)) {",
          "353:   DBG_log(\"%s state #%lu: %s(%s) => %s(%s)\",",
          "354:    IS_IKE_SA(st) ? \"parent\" : \"child\", st->st_serialno,",
          "360:   cat_t category_states = 0;",
          "361:   for (unsigned cat = 0; cat < elemsof(cat_count); cat++) {",
          "",
          "[Removed Lines]",
          "355:    old_state->fs_short_name,",
          "356:    enum_name(&state_category_names, old_state->fs_category),",
          "357:    new_state->fs_short_name,",
          "358:    enum_name(&state_category_names, new_state->fs_category));",
          "",
          "[Added Lines]",
          "355:    old_state->short_name,",
          "356:    enum_name(&state_category_names, old_state->category),",
          "357:    new_state->short_name,",
          "358:    enum_name(&state_category_names, new_state->category));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "398: void change_state(struct state *st, enum state_kind new_state_kind)",
          "399: {",
          "401:  const struct finite_state *new_state = finite_states[new_state_kind];",
          "402:  passert(new_state != NULL);",
          "403:  if (new_state != old_state) {",
          "404:   update_state_stats(st, old_state, new_state);",
          "405:   binlog_state(st, new_state_kind /* XXX */);",
          "407:  }",
          "408: }",
          "",
          "[Removed Lines]",
          "400:  const struct finite_state *old_state = st->st_finite_state;",
          "406:   st->st_finite_state = new_state;",
          "",
          "[Added Lines]",
          "400:  const struct finite_state *old_state = st->st_state;",
          "406:   st->st_state = new_state;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "514:  struct state *st = &sas->st;",
          "518:   .st_serialno = next_so++,",
          "519:   .st_inception = realnow(),",
          "520:   .st_ike_version = ike_version,",
          "",
          "[Removed Lines]",
          "517:   .st_finite_state = fs,",
          "",
          "[Added Lines]",
          "517:   .st_state = fs,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "571:      st->st_msgid_lastrecv, st->st_msgid_lastreplied);",
          "572:  v2_msgid_init(pexpect_ike_sa(st));",
          "573:  const struct finite_state *fs = finite_states[kind];",
          "582:  return st;",
          "583: }",
          "",
          "[Removed Lines]",
          "574:  change_state(st, fs->fs_kind);",
          "579:  pexpect(fs->fs_v2_transitions != NULL);",
          "580:  pexpect(fs->fs_nr_transitions == 1);",
          "",
          "[Added Lines]",
          "574:  change_state(st, fs->kind);",
          "579:  pexpect(fs->v2_transitions != NULL);",
          "580:  pexpect(fs->nr_transitions == 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "762:       (c->policy & POLICY_DONT_REKEY) == LEMPTY) {",
          "763:    loglog(RC_LOG_SERIOUS, \"reschedule pending child #%lu %s of \"",
          "764:           \"connection \\\"%s\\\"%s - the parent is going away\",",
          "766:           c->name, fmt_conn_instance(c, cib));",
          "",
          "[Removed Lines]",
          "765:           st->st_serialno, st->st_state_name,",
          "",
          "[Added Lines]",
          "765:           st->st_serialno, st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "770:   } else {",
          "771:    loglog(RC_LOG_SERIOUS, \"expire pending child #%lu %s of \"",
          "772:           \"connection \\\"%s\\\"%s - the parent is going away\",",
          "774:           c->name, fmt_conn_instance(c, cib));",
          "776:    event_force(EVENT_SA_EXPIRE, st);",
          "",
          "[Removed Lines]",
          "773:           st->st_serialno, st->st_state_name,",
          "",
          "[Added Lines]",
          "773:           st->st_serialno, st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "830:   libreswan_log(\"deleting state (%s) aged \"PRI_DELTATIME\"s and %ssending notification\",",
          "832:    pri_deltatime(realtimediff(realnow(), st->st_inception)),",
          "833:    del_notify ? \"\" : \"NOT \");",
          "834:  } else if (cur_state != NULL && cur_state->st_connection == st->st_connection) {",
          "835:   libreswan_log(\"deleting other state #%lu (%s) aged \"PRI_DELTATIME\"s and %ssending notification\",",
          "836:    st->st_serialno,",
          "838:    pri_deltatime(realtimediff(realnow(), st->st_inception)),",
          "839:    del_notify ? \"\" : \"NOT \");",
          "840:  } else {",
          "841:   char cib[CONN_INST_BUF];",
          "842:   libreswan_log(\"deleting other state #%lu connection (%s) \\\"%s\\\"%s aged \"PRI_DELTATIME\"s and %ssending notification\",",
          "843:    st->st_serialno,",
          "845:    c->name,",
          "846:    fmt_conn_instance(c, cib),",
          "847:    pri_deltatime(realtimediff(realnow(), st->st_inception)),",
          "",
          "[Removed Lines]",
          "831:    st->st_state_name,",
          "837:    st->st_state_name,",
          "844:    st->st_state_name,",
          "",
          "[Added Lines]",
          "831:    st->st_state->name,",
          "837:    st->st_state->name,",
          "844:    st->st_state->name,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "851:  dbg(\"%s state #%lu: %s(%s) => delete\",",
          "852:      IS_IKE_SA(st) ? \"parent\" : \"child\", st->st_serialno,",
          "855: }",
          "",
          "[Removed Lines]",
          "853:      st->st_finite_state->fs_short_name,",
          "854:      enum_name(&state_category_names, st->st_finite_state->fs_category));",
          "",
          "[Added Lines]",
          "853:      st->st_state->short_name,",
          "854:      enum_name(&state_category_names, st->st_state->category));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "885:   linux_audit_conn(st, LAK_PARENT_DESTROY);",
          "886: #endif",
          "889:  if (IS_IKE_SA(st) && (c->policy & POLICY_OPPORTUNISTIC) &&",
          "891:   ipsec_spi_t failure_shunt = shunt_policy_spi(c, FALSE /* failure_shunt */);",
          "892:   ipsec_spi_t nego_shunt = shunt_policy_spi(c, TRUE /* negotiation shunt */);",
          "",
          "[Removed Lines]",
          "884:  if (IS_IKE_SA_ESTABLISHED(st) || st->st_state == STATE_IKESA_DEL)",
          "890:      (st->st_state == STATE_PARENT_I1 || st->st_state == STATE_PARENT_I2)) {",
          "",
          "[Added Lines]",
          "884:  if (IS_IKE_SA_ESTABLISHED(st) || st->st_state->kind == STATE_IKESA_DEL)",
          "890:      (st->st_state->kind == STATE_PARENT_I1 ||",
          "891:       st->st_state->kind == STATE_PARENT_I2)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1037:  if (IS_IPSEC_SA_ESTABLISHED(st) ||",
          "1038:   IS_CHILD_SA_ESTABLISHED(st) ||",
          "1040:    delete_ipsec_sa(st);",
          "1041:  }",
          "",
          "[Removed Lines]",
          "1039:   st->st_state == STATE_CHILDSA_DEL) {",
          "",
          "[Added Lines]",
          "1040:   st->st_state->kind == STATE_CHILDSA_DEL) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1675:   if (pr->attrs.spi == filter->spi) {",
          "1676:    dbg(\"v2 CHILD SA #%lu found using their inbound (our outbound) SPI, in %s\",",
          "1677:        st->st_serialno,",
          "1679:    return true;",
          "1680:   }",
          "1681: #if 0",
          "",
          "[Removed Lines]",
          "1678:        st->st_state_name);",
          "",
          "[Added Lines]",
          "1679:        st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1683:   if (pr->our_spi == filter->spi) {",
          "1684:    dbg(\"v2 CHILD SA #%lu found using our inbound (their outbound) !?! SPI, in %s\",",
          "1685:        st->st_serialno,",
          "1687:    return true;",
          "1688:   }",
          "1689: #endif",
          "",
          "[Removed Lines]",
          "1686:        st->st_state_name);",
          "",
          "[Added Lines]",
          "1687:        st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1775:       filter->msgid == st->st_msgid_phase15) ||",
          "1776:      filter->msgid == st->st_msgid) {",
          "1777:   dbg(\"p15 state object #%lu found, in %s\",",
          "1779:   return true;",
          "1780:  }",
          "1781:  return false;",
          "",
          "[Removed Lines]",
          "1778:       st->st_serialno, st->st_state_name);",
          "",
          "[Added Lines]",
          "1779:       st->st_serialno, st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1869:  dbg(\"FOR_EACH_STATE_... in %s\", __func__);",
          "1870:  struct state *st = NULL;",
          "1871:  FOR_EACH_STATE_NEW2OLD(st) {",
          "1873:       IS_CHILD_SA(st) &&",
          "1874:       st->st_clonedfrom == psn &&",
          "",
          "[Removed Lines]",
          "1872:   if (LHAS(ok_states, st->st_state) &&",
          "",
          "[Added Lines]",
          "1873:   if (LHAS(ok_states, st->st_state->kind) &&",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1928:  dbg(\"FOR_EACH_STATE_... in %s\", __func__);",
          "1929:  struct state *st;",
          "1930:  FOR_EACH_STATE_NEW2OLD(st) {",
          "1932:       (st->st_ike_version == IKEv2) == is_ikev2 &&",
          "1933:       c->host_pair == st->st_connection->host_pair &&",
          "1934:       same_peer_ids(c, st->st_connection, NULL) &&",
          "",
          "[Removed Lines]",
          "1931:   if (LHAS(ok_states, st->st_state) &&",
          "",
          "[Added Lines]",
          "1932:   if (LHAS(ok_states, st->st_state->kind) &&",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2118:    st->st_serialno,",
          "2119:    c->name, inst,",
          "2120:    st->st_remoteport,",
          "2123:    st->st_event == NULL ? \"none\" :",
          "2124:    enum_name(&timer_event_names, st->st_event->ev_type),",
          "2125:    delta,",
          "",
          "[Removed Lines]",
          "2121:    st->st_state_name,",
          "2122:    st->st_state_story,",
          "",
          "[Added Lines]",
          "2122:    st->st_state->name,",
          "2123:    st->st_state->story,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2933:  if (st->st_suspended_md != NULL) {",
          "2935:   log_to_log(\"discarding packet received during asynchronous work (DNS or crypto) in %s\",",
          "2937:  } else if (st->st_offloaded_task != NULL) {",
          "2938:   libreswan_log(\"message received while calculating. Ignored.\");",
          "2939:  }",
          "",
          "[Removed Lines]",
          "2936:       st->st_state_name);",
          "",
          "[Added Lines]",
          "2937:       st->st_state->name);",
          "",
          "---------------"
        ],
        "programs/pluto/state.h||programs/pluto/state.h": [
          "File: programs/pluto/state.h -> programs/pluto/state.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "283: struct finite_state {",
          "293: };",
          "295: void lswlog_finite_state(struct lswlog *buf, const struct finite_state *fs);",
          "",
          "[Removed Lines]",
          "284:  enum state_kind fs_kind;",
          "285:  const char *fs_name;",
          "286:  const char *fs_short_name;",
          "287:  const char *fs_story;",
          "288:  lset_t fs_flags;",
          "289:  enum state_category fs_category;",
          "290:  const struct state_v1_microcode *fs_v1_transitions;",
          "291:  const struct state_v2_microcode *fs_v2_transitions;",
          "292:  size_t fs_nr_transitions;",
          "",
          "[Added Lines]",
          "284:  enum state_kind kind;",
          "285:  const char *name;",
          "286:  const char *short_name;",
          "287:  const char *story;",
          "288:  lset_t flags;",
          "289:  enum state_category category;",
          "290:  const struct state_v1_microcode *v1_transitions;",
          "291:  const struct state_v2_microcode *v2_transitions;",
          "292:  size_t nr_transitions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:  struct pubkey *st_peer_pubkey;",
          "",
          "[Removed Lines]",
          "555: #define st_state_kind st_finite_state->fs_kind",
          "556: #define st_state_name st_finite_state->fs_name",
          "557: #define st_state_story st_finite_state->fs_story",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "programs/pluto/state_db.c||programs/pluto/state_db.c": [
          "File: programs/pluto/state_db.c -> programs/pluto/state_db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:   }",
          "294:   dbg(\"State DB: %s state object #%lu found, in %s (%s)\",",
          "295:       enum_name(&ike_version_names, ike_version),",
          "297:   return st;",
          "298:  }",
          "299:  dbg(\"State DB: %s state object not found (%s)\",",
          "",
          "[Removed Lines]",
          "296:       st->st_serialno, st->st_state_name, name);",
          "",
          "[Added Lines]",
          "296:       st->st_serialno, st->st_state->name, name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:   }",
          "325:   dbg(\"State DB: %s state object #%lu found, in %s (%s)\",",
          "326:       enum_name(&ike_version_names, ike_version),",
          "328:   return st;",
          "329:  }",
          "330:  dbg(\"State DB: %s state object not found (%s)\",",
          "",
          "[Removed Lines]",
          "327:       st->st_serialno, st->st_state_name, name);",
          "",
          "[Added Lines]",
          "327:       st->st_serialno, st->st_state->name, name);",
          "",
          "---------------"
        ],
        "programs/pluto/timer.c||programs/pluto/timer.c": [
          "File: programs/pluto/timer.c -> programs/pluto/timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:   passert(st != NULL && st->st_send_xauth_event == ev);",
          "277:   DBG(DBG_CONTROLMORE|DBG_XAUTH,",
          "278:       DBG_log(\"XAUTH: event EVENT_v1_SEND_XAUTH #%lu %s\",",
          "280:   st->st_send_xauth_event = NULL;",
          "281:   break;",
          "",
          "[Removed Lines]",
          "279:        st->st_serialno, st->st_state_name));",
          "",
          "[Added Lines]",
          "279:        st->st_serialno, st->st_state->name));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:   passert(st != NULL && st->st_rel_whack_event == ev);",
          "305:   DBG(DBG_CONTROL,",
          "306:    DBG_log(\"event EVENT_v2_RELEASE_WHACK st_rel_whack_event=NULL #%lu %s\",",
          "308:   st->st_rel_whack_event = NULL;",
          "309:   break;",
          "",
          "[Removed Lines]",
          "307:     st->st_serialno, st->st_state_name));",
          "",
          "[Added Lines]",
          "307:     st->st_serialno, st->st_state->name));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:   DBG(DBG_CONTROL, DBG_log(\"%s releasing whack for #%lu %s (sock=\"PRI_FD\")\",",
          "373:      enum_show(&timer_event_names, type),",
          "374:      st->st_serialno,",
          "376:       PRI_fd(st->st_whack_sock)));",
          "377:   release_pending_whacks(st, \"release whack\");",
          "378:   break;",
          "",
          "[Removed Lines]",
          "375:      st->st_state_name,",
          "",
          "[Added Lines]",
          "375:      st->st_state->name,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0424bf7c956939c647982030aa42a46139c5539",
      "candidate_info": {
        "commit_hash": "d0424bf7c956939c647982030aa42a46139c5539",
        "repo": "libreswan/libreswan",
        "commit_url": "https://github.com/libreswan/libreswan/commit/d0424bf7c956939c647982030aa42a46139c5539",
        "files": [
          "programs/pluto/ikev1.c"
        ],
        "message": "ikev1: cleanup ikev1.c's logging\n\n- use dbg() more\n- use log_state() / log_md()\n- better SEND_NOTIFICATION() with LOG_PACKET()\n\nFix code relying on cur_*.",
        "before_after_code_files": [
          "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
          ],
          "candidate": [
            "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
          ]
        }
      },
      "candidate_diff": {
        "programs/pluto/ikev1.c||programs/pluto/ikev1.c": [
          "File: programs/pluto/ikev1.c -> programs/pluto/ikev1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "886: static stf_status unexpected(struct state *st, struct msg_digest *md UNUSED)",
          "887: {",
          "890:  return STF_IGNORE;",
          "891: }",
          "",
          "[Removed Lines]",
          "888:  loglog(RC_LOG_SERIOUS, \"unexpected message received in state %s\",",
          "889:         st->st_state->name);",
          "",
          "[Added Lines]",
          "888:  log_state(RC_LOG_SERIOUS, st, \"unexpected message received in state %s\",",
          "889:     st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:    if (st->st_v1_last_transition->timeout_event == EVENT_SO_DISCARD ||",
          "1219:        count_duplicate(st, MAXIMUM_v1_ACCEPTED_DUPLICATES)) {",
          "1223:     resend_recorded_v1_ike_msg(st, \"retransmit in response to duplicate\");",
          "1224:    } else {",
          "1228:    }",
          "1229:   } else {",
          "1230:    dbg(\"#%lu discarding duplicate packet; already %s; replied=%s retransmit_on_duplicate=%s\",",
          "",
          "[Removed Lines]",
          "1220:     loglog(RC_RETRANSMISSION,",
          "1221:            \"retransmitting in response to duplicate packet; already %s\",",
          "1222:            st->st_state->name);",
          "1225:     loglog(RC_LOG_SERIOUS,",
          "1226:            \"discarding duplicate packet -- exhausted retransmission; already %s\",",
          "1227:            st->st_state->name);",
          "",
          "[Added Lines]",
          "1220:     log_state(RC_RETRANSMISSION, st,",
          "1221:        \"retransmitting in response to duplicate packet; already %s\",",
          "1222:        st->st_state->name);",
          "1225:     log_state(RC_LOG_SERIOUS, st,",
          "1226:        \"discarding duplicate packet -- exhausted retransmission; already %s\",",
          "1227:        st->st_state->name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1253:  struct state *st = NULL;",
          "1259:    send_notification_from_state(st, from_state, t); \\",
          "1263:  switch (md->hdr.isa_xchg) {",
          "1264:  case ISAKMP_XCHG_AGGR:",
          "1266:   if (md->hdr.isa_msgid != v1_MAINMODE_MSGID) {",
          "1269:    SEND_NOTIFICATION(INVALID_MESSAGE_ID);",
          "1270:    return;",
          "1271:   }",
          "1273:   if (ike_spi_is_zero(&md->hdr.isa_ike_initiator_spi)) {",
          "1275:    SEND_NOTIFICATION(INVALID_COOKIE);",
          "1276:    return;",
          "1277:   }",
          "",
          "[Removed Lines]",
          "1256: #define SEND_NOTIFICATION(t) { \\",
          "1257:   pstats(ikev1_sent_notifies_e, t); \\",
          "1258:   if (st != NULL) \\",
          "1260:   else \\",
          "1261:    send_notification_from_md(md, t); }",
          "1267:    plog_md(md, \"Message ID was 0x%08\" PRIx32 \" but should be zero in phase 1\",",
          "1268:     md->hdr.isa_msgid);",
          "1274:    plog_md(md, \"Initiator Cookie must not be zero in phase 1 message\");",
          "",
          "[Added Lines]",
          "1256: #define SEND_NOTIFICATION(t)      \\",
          "1257:  {        \\",
          "1258:   pstats(ikev1_sent_notifies_e, t);   \\",
          "1259:   if (st != NULL)      \\",
          "1261:   else       \\",
          "1262:    send_notification_from_md(md, t);  \\",
          "1263:  }",
          "1265: #define LOG_PACKET(RC, ...)    \\",
          "1266:  {      \\",
          "1267:   if (st != NULL) {   \\",
          "1268:    log_state(RC, st, __VA_ARGS__); \\",
          "1269:   } else {    \\",
          "1270:    log_md(RC, md, __VA_ARGS__); \\",
          "1271:   }     \\",
          "1272:  }",
          "1278:    LOG_PACKET(RC_LOG, \"Message ID was 0x%08\" PRIx32 \" but should be zero in phase 1\",",
          "1279:        md->hdr.isa_msgid);",
          "1285:    LOG_PACKET(RC_LOG, \"Initiator Cookie must not be zero in phase 1 message\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1283:    if (md->hdr.isa_flags & ISAKMP_FLAGS_v1_ENCRYPTION) {",
          "1285:     SEND_NOTIFICATION(INVALID_FLAGS);",
          "1286:     return;",
          "1287:    }",
          "",
          "[Removed Lines]",
          "1284:     plog_md(md, \"initial phase 1 message is invalid: its Encrypted Flag is on\");",
          "",
          "[Added Lines]",
          "1295:     LOG_PACKET(RC_LOG, \"initial phase 1 message is invalid: its Encrypted Flag is on\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1895:  bool self_delete = FALSE;",
          "1897:  if (md->hdr.isa_flags & ISAKMP_FLAGS_v1_ENCRYPTION) {",
          "1898:   endpoint_buf b;",
          "1899:   dbg(\"received encrypted packet from %s\", str_endpoint(&md->sender, &b));",
          "1901:   if (st == NULL) {",
          "1904:    return;",
          "1905:   }",
          "1906:   if (st->st_skeyid_e_nss == NULL) {",
          "1909:    return;",
          "1910:   }",
          "",
          "[Removed Lines]",
          "1902:    libreswan_log(",
          "1903:     \"discarding encrypted message for an unknown ISAKMP SA\");",
          "1907:    loglog(RC_LOG_SERIOUS,",
          "1908:     \"discarding encrypted message because we haven't yet negotiated keying material\");",
          "",
          "[Added Lines]",
          "1914:    LOG_PACKET(RC_LOG,",
          "1915:        \"discarding encrypted message for an unknown ISAKMP SA\");",
          "1919:    LOG_PACKET(RC_LOG_SERIOUS,",
          "1920:        \"discarding encrypted message because we haven't yet negotiated keying material\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1930:   const struct encrypt_desc *e = st->st_oakley.ta_encrypt;",
          "1932:   if (pbs_left(&md->message_pbs) % e->enc_blocksize != 0) {",
          "1934:    return;",
          "1935:   }",
          "",
          "[Removed Lines]",
          "1933:    loglog(RC_LOG_SERIOUS, \"malformed message: not a multiple of encryption blocksize\");",
          "",
          "[Added Lines]",
          "1945:    LOG_PACKET(RC_LOG_SERIOUS, \"malformed message: not a multiple of encryption blocksize\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1977:   if (smc->flags & SMF_INPUT_ENCRYPTED) {",
          "1980:    SEND_NOTIFICATION(INVALID_FLAGS);",
          "1981:    return;",
          "1982:   }",
          "",
          "[Removed Lines]",
          "1978:    loglog(RC_LOG_SERIOUS,",
          "1979:           \"packet rejected: should have been encrypted\");",
          "",
          "[Added Lines]",
          "1990:    LOG_PACKET(RC_LOG_SERIOUS,",
          "1991:        \"packet rejected: should have been encrypted\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2002:    struct_desc *sd = v1_payload_desc(np);",
          "2004:    if (md->digest_roof >= elemsof(md->digest)) {",
          "2008:     if (!md->encrypted) {",
          "2009:      SEND_NOTIFICATION(PAYLOAD_MALFORMED);",
          "2010:     }",
          "",
          "[Removed Lines]",
          "2005:     loglog(RC_LOG_SERIOUS,",
          "2006:            \"more than %zu payloads in message; ignored\",",
          "2007:            elemsof(md->digest));",
          "",
          "[Added Lines]",
          "2017:     LOG_PACKET(RC_LOG_SERIOUS,",
          "2018:         \"more than %zu payloads in message; ignored\",",
          "2019:         elemsof(md->digest));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2034:       sd = NULL;",
          "2035:      }",
          "2036:      break;",
          "",
          "[Removed Lines]",
          "2030:       DBG(DBG_NATT,",
          "2031:           DBG_log(\"st_nat_traversal was: %s\",",
          "2032:            bitnamesof(natt_bit_names,",
          "2033:                st->hidden_variables.st_nat_traversal)));",
          "",
          "[Added Lines]",
          "2042:       dbg(\"st_nat_traversal was: %s\",",
          "2043:           bitnamesof(natt_bit_names,",
          "2044:               st->hidden_variables.st_nat_traversal));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2077:      loglog(RC_LOG_SERIOUS,",
          "2078:       \"%smessage with unsupported payload ISAKMP_NEXT_SAK (or ISAKMP_NEXT_NATD_BADDRAFTS) ignored\",",
          "2079:       excuse);",
          "",
          "[Added Lines]",
          "2088:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2089:          \"%smessage with unsupported payload ISAKMP_NEXT_SAK (or ISAKMP_NEXT_NATD_BADDRAFTS) ignored\",",
          "2090:          excuse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2089:      if (!in_struct(&pd->payload, &isakmp_ignore_desc, &md->message_pbs,",
          "2090:              &pd->pbs)) {",
          "2094:       if (!md->encrypted) {",
          "2095:        SEND_NOTIFICATION(PAYLOAD_MALFORMED);",
          "2096:       }",
          "",
          "[Removed Lines]",
          "2091:       loglog(RC_LOG_SERIOUS,",
          "2092:              \"%smalformed payload in packet\",",
          "2093:              excuse);",
          "",
          "[Added Lines]",
          "2102:       LOG_PACKET(RC_LOG_SERIOUS,",
          "2103:           \"%smalformed payload in packet\",",
          "2104:           excuse);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2103:     default:",
          "2108:      if (!md->encrypted) {",
          "2109:       SEND_NOTIFICATION(INVALID_PAYLOAD_TYPE);",
          "2110:      }",
          "",
          "[Removed Lines]",
          "2104:      loglog(RC_LOG_SERIOUS,",
          "2105:       \"%smessage ignored because it contains an unknown or unexpected payload type (%s) at the outermost level\",",
          "2106:             excuse,",
          "2107:             enum_show(&ikev1_payload_names, np));",
          "",
          "[Added Lines]",
          "2115:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2116:          \"%smessage ignored because it contains an unknown or unexpected payload type (%s) at the outermost level\",",
          "2117:          excuse,",
          "2118:          enum_show(&ikev1_payload_names, np));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2125:            LELEM(ISAKMP_NEXT_D) |",
          "2126:            LELEM(ISAKMP_NEXT_CR) |",
          "2127:            LELEM(ISAKMP_NEXT_CERT))) {",
          "2133:      if (!md->encrypted) {",
          "2134:       SEND_NOTIFICATION(INVALID_PAYLOAD_TYPE);",
          "2135:      }",
          "2136:      return;",
          "2137:     }",
          "2143:     needed &= ~s;",
          "2144:    }",
          "",
          "[Removed Lines]",
          "2128:      loglog(RC_LOG_SERIOUS,",
          "2129:       \"%smessage ignored because it contains a payload type (%s) unexpected by state %s\",",
          "2130:       excuse,",
          "2131:       enum_show(&ikev1_payload_names, np),",
          "2132:       finite_states[smc->state]->name);",
          "2139:     DBG(DBG_PARSING,",
          "2140:         DBG_log(\"got payload 0x%\" PRIxLSET\"  (%s) needed: 0x%\" PRIxLSET \" opt: 0x%\" PRIxLSET,",
          "2141:          s, enum_show(&ikev1_payload_names, np),",
          "2142:          needed, smc->opt_payloads));",
          "",
          "[Added Lines]",
          "2139:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2140:          \"%smessage ignored because it contains a payload type (%s) unexpected by state %s\",",
          "2141:          excuse,",
          "2142:          enum_show(&ikev1_payload_names, np),",
          "2143:          finite_states[smc->state]->name);",
          "2150:     dbg(\"got payload 0x%\" PRIxLSET\"  (%s) needed: 0x%\" PRIxLSET \" opt: 0x%\" PRIxLSET,",
          "2151:         s, enum_show(&ikev1_payload_names, np),",
          "2152:         needed, smc->opt_payloads);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2150:    pd->payload_type = np;",
          "2151:    if (!in_struct(&pd->payload, sd, &md->message_pbs,",
          "2152:            &pd->pbs)) {",
          "2156:     if (!md->encrypted) {",
          "2157:      SEND_NOTIFICATION(PAYLOAD_MALFORMED);",
          "2158:     }",
          "",
          "[Removed Lines]",
          "2153:     loglog(RC_LOG_SERIOUS,",
          "2154:            \"%smalformed payload in packet\",",
          "2155:            excuse);",
          "",
          "[Added Lines]",
          "2163:     LOG_PACKET(RC_LOG_SERIOUS,",
          "2164:         \"%smalformed payload in packet\",",
          "2165:         excuse);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2199:    excuse = \"\";",
          "2200:   }",
          "2208:   md->message_pbs.roof = md->message_pbs.cur;",
          "2212:   if (needed != 0) {",
          "2217:    if (!md->encrypted) {",
          "2218:     SEND_NOTIFICATION(PAYLOAD_MALFORMED);",
          "2219:    }",
          "",
          "[Removed Lines]",
          "2202:   DBG(DBG_PARSING, {",
          "2203:        if (pbs_left(&md->message_pbs) != 0)",
          "2204:         DBG_log(\"removing %d bytes of padding\",",
          "2205:          (int) pbs_left(&md->message_pbs));",
          "2206:       });",
          "2213:    loglog(RC_LOG_SERIOUS,",
          "2214:           \"message for %s is missing payloads %s\",",
          "2215:           finite_states[from_state]->name,",
          "2216:           bitnamesof(payload_name_ikev1, needed));",
          "",
          "[Added Lines]",
          "2212:   if (DBGP(DBG_BASE) &&",
          "2213:       pbs_left(&md->message_pbs) != 0) {",
          "2214:    DBG_log(\"removing %d bytes of padding\",",
          "2215:     (int) pbs_left(&md->message_pbs));",
          "2216:   }",
          "2223:    LOG_PACKET(RC_LOG_SERIOUS,",
          "2224:        \"message for %s is missing payloads %s\",",
          "2225:        finite_states[from_state]->name,",
          "2226:        bitnamesof(payload_name_ikev1, needed));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2235:   if (md->chain[ISAKMP_NEXT_SA] != NULL &&",
          "2236:       md->hdr.isa_np != ISAKMP_NEXT_SA) {",
          "2239:    if (!md->encrypted) {",
          "2240:     SEND_NOTIFICATION(PAYLOAD_MALFORMED);",
          "2241:    }",
          "",
          "[Removed Lines]",
          "2237:    loglog(RC_LOG_SERIOUS,",
          "2238:           \"malformed Phase 1 message: does not start with an SA payload\");",
          "",
          "[Added Lines]",
          "2247:    LOG_PACKET(RC_LOG_SERIOUS,",
          "2248:        \"malformed Phase 1 message: does not start with an SA payload\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2260:   if (md->hdr.isa_np != ISAKMP_NEXT_HASH) {",
          "2263:    if (!md->encrypted) {",
          "2264:     SEND_NOTIFICATION(PAYLOAD_MALFORMED);",
          "2265:    }",
          "",
          "[Removed Lines]",
          "2261:    loglog(RC_LOG_SERIOUS,",
          "2262:           \"malformed Quick Mode message: does not start with a HASH payload\");",
          "",
          "[Added Lines]",
          "2271:    LOG_PACKET(RC_LOG_SERIOUS,",
          "2272:        \"malformed Quick Mode message: does not start with a HASH payload\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2274:    i = 1;",
          "2275:    while (p != NULL) {",
          "2276:     if (p != &md->digest[i]) {",
          "2279:      if (!md->encrypted) {",
          "2280:       SEND_NOTIFICATION(PAYLOAD_MALFORMED);",
          "2281:      }",
          "",
          "[Removed Lines]",
          "2277:      loglog(RC_LOG_SERIOUS,",
          "2278:             \"malformed Quick Mode message: SA payload is in wrong position\");",
          "",
          "[Added Lines]",
          "2287:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2288:          \"malformed Quick Mode message: SA payload is in wrong position\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2297:    if (id != NULL) {",
          "2298:     if (id->next == NULL ||",
          "2299:         id->next->next != NULL) {",
          "2302:      SEND_NOTIFICATION(PAYLOAD_MALFORMED);",
          "2303:      return;",
          "2304:     }",
          "2305:     if (id + 1 != id->next) {",
          "2308:      SEND_NOTIFICATION(PAYLOAD_MALFORMED);",
          "2309:      return;",
          "2310:     }",
          "",
          "[Removed Lines]",
          "2300:      loglog(RC_LOG_SERIOUS,",
          "2301:       \"malformed Quick Mode message: if any ID payload is present, there must be exactly two\");",
          "2306:      loglog(RC_LOG_SERIOUS,",
          "2307:       \"malformed Quick Mode message: the ID payloads are not adjacent\");",
          "",
          "[Added Lines]",
          "2310:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2311:          \"malformed Quick Mode message: if any ID payload is present, there must be exactly two\");",
          "2316:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2317:          \"malformed Quick Mode message: the ID payloads are not adjacent\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2335:    default:",
          "2336:     if (st == NULL) {",
          "2341:     } else {",
          "2349:     }",
          "2350:    }",
          "2351:    if (DBGP(DBG_BASE)) {",
          "",
          "[Removed Lines]",
          "2337:      DBG(DBG_CONTROL, DBG_log(",
          "2338:             \"ignoring informational payload %s, no corresponding state\",",
          "2339:             enum_show(& ikev1_notify_names,",
          "2340:         p->payload.notification.isan_type)));",
          "2342:      loglog(RC_LOG_SERIOUS,",
          "2343:             \"ignoring informational payload %s, msgid=%08\" PRIx32 \", length=%d\",",
          "2344:             enum_show(&ikev1_notify_names,",
          "2345:         p->payload.notification.isan_type),",
          "2346:             st->st_v1_msgid.id,",
          "2347:             p->payload.notification.isan_length);",
          "2348:      DBG_dump_pbs(&p->pbs);",
          "",
          "[Added Lines]",
          "2347:      dbg(\"ignoring informational payload %s, no corresponding state\",",
          "2348:          enum_show(& ikev1_notify_names,",
          "2349:             p->payload.notification.isan_type));",
          "2351:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2352:          \"ignoring informational payload %s, msgid=%08\" PRIx32 \", length=%d\",",
          "2353:          enum_show(&ikev1_notify_names,",
          "2354:             p->payload.notification.isan_type),",
          "2355:          st->st_v1_msgid.id,",
          "2356:          p->payload.notification.isan_length);",
          "2357:      if (DBGP(DBG_BASE)) {",
          "2358:       DBG_dump_pbs(&p->pbs);",
          "2359:      }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2460:  pstats(ike_stf, PMIN(result, STF_FAIL));",
          "2468:  switch (result) {",
          "2469:  case STF_SUSPEND:",
          "",
          "[Removed Lines]",
          "2462:  DBG(DBG_CONTROL,",
          "2463:      DBG_log(\"complete v1 state transition with %s\",",
          "2464:       result > STF_FAIL ?",
          "2465:       enum_name(&ikev1_notify_names, result - STF_FAIL) :",
          "2466:       enum_name(&stf_status_names, result)));",
          "",
          "[Added Lines]",
          "2473:  dbg(\"complete v1 state transition with %s\",",
          "2474:      result > STF_FAIL ?",
          "2475:      enum_name(&ikev1_notify_names, result - STF_FAIL) :",
          "2476:      enum_name(&stf_status_names, result));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2504:   const struct state_v1_microcode *smc = md->smc;",
          "",
          "[Removed Lines]",
          "2506:   DBG(DBG_CONTROL, DBG_log(\"doing_xauth:%s, t_xauth_client_done:%s\",",
          "2507:    bool_str(st->st_oakley.doing_xauth),",
          "2508:    bool_str(st->hidden_variables.st_xauth_client_done)));",
          "",
          "[Added Lines]",
          "2516:   dbg(\"doing_xauth:%s, t_xauth_client_done:%s\",",
          "2517:       bool_str(st->st_oakley.doing_xauth),",
          "2518:       bool_str(st->hidden_variables.st_xauth_client_done));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2569:   {",
          "2570:    bool aggrmode = LHAS(st->st_connection->policy, POLICY_AGGRESSIVE_IX);",
          "2573:    change_state(st, aggrmode ? STATE_AGGR_I2 : STATE_MAIN_I4);",
          "2574:    st->st_v1_msgid.phase15 = v1_MAINMODE_MSGID;",
          "2575:   }",
          "",
          "[Removed Lines]",
          "2572:    libreswan_log(\"XAUTH completed; ModeCFG skipped as per configuration\");",
          "",
          "[Added Lines]",
          "2582:    log_state(RC_LOG, st, \"XAUTH completed; ModeCFG skipped as per configuration\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2585:    DBG(DBG_CONTROL, DBG_log(\"event_already_set, deleting event\"));",
          "",
          "[Added Lines]",
          "2595:    dbg(\"event_already_set, deleting event\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2639:     record_outbound_v1_ike_msg(st, &reply_stream,",
          "2640:           finite_states[from_state]->name);",
          "2642:    } else {",
          "2643:     record_and_send_v1_ike_msg(st, &reply_stream,",
          "2644:           finite_states[from_state]->name);",
          "",
          "[Removed Lines]",
          "2641:     libreswan_log(\"IMPAIR: Skipped sending STATE_MAIN_R2 response packet\");",
          "",
          "[Added Lines]",
          "2651:     log_state(RC_LOG, st, \"IMPAIR: Skipped sending STATE_MAIN_R2 response packet\");",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2649:   if (!md->event_already_set) {",
          "2652:    enum event_type kind = smc->timeout_event;",
          "2653:    bool agreed_time = FALSE;",
          "",
          "[Removed Lines]",
          "2650:    DBG(DBG_CONTROL, DBG_log(\"!event_already_set at reschedule\"));",
          "",
          "[Added Lines]",
          "2660:    dbg(\"!event_already_set at reschedule\");",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2659:        !c->spd.this.modecfg_client &&",
          "2660:        (st->st_state->kind == STATE_MAIN_I4 || st->st_state->kind == STATE_AGGR_I2))",
          "2661:    {",
          "2663:     kind = EVENT_SA_REPLACE;",
          "2664:    }",
          "",
          "[Removed Lines]",
          "2662:     DBG(DBG_CONTROL, DBG_log(\"fixup XAUTH without ModeCFG event from EVENT_RETRANSMIT to EVENT_SA_REPLACE\"));",
          "",
          "[Added Lines]",
          "2672:     dbg(\"fixup XAUTH without ModeCFG event from EVENT_RETRANSMIT to EVENT_SA_REPLACE\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2807:   if (IS_ISAKMP_SA_ESTABLISHED(st->st_state)) {",
          "2808:    if (dpd_init(st) != STF_OK) {",
          "2810:    }",
          "2811:   }",
          "",
          "[Removed Lines]",
          "2809:     loglog(RC_LOG_SERIOUS, \"DPD initialization failed - continuing without DPD\");",
          "",
          "[Added Lines]",
          "2819:     log_state(RC_LOG_SERIOUS, st,",
          "2820:        \"DPD initialization failed - continuing without DPD\");",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2814:   if (st->st_connection->spd.this.xauth_server) {",
          "2815:    if (st->st_oakley.doing_xauth &&",
          "2816:        IS_ISAKMP_SA_ESTABLISHED(st->st_state)) {",
          "2819:     event_schedule(EVENT_v1_SEND_XAUTH,",
          "2820:             deltatime_ms(EVENT_v1_SEND_XAUTH_DELAY_MS),",
          "2821:             st);",
          "",
          "[Removed Lines]",
          "2817:     DBG(DBG_CONTROLMORE|DBG_XAUTH,",
          "2818:         DBG_log(\"XAUTH: Sending XAUTH Login/Password Request\"));",
          "",
          "[Added Lines]",
          "2828:     dbg(\"XAUTH: Sending XAUTH Login/Password Request\");",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2830:   if (!IS_QUICK(st->st_state->kind) &&",
          "2831:       st->st_connection->spd.this.xauth_client &&",
          "2832:       !st->hidden_variables.st_xauth_client_done) {",
          "2835:    break;",
          "2836:   }",
          "",
          "[Removed Lines]",
          "2833:    DBG(DBG_CONTROL,",
          "2834:        DBG_log(\"XAUTH client is not yet authenticated\"));",
          "",
          "[Added Lines]",
          "2843:    dbg(\"XAUTH client is not yet authenticated\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2852:   if (st->st_connection->spd.this.modecfg_client &&",
          "2853:       IS_ISAKMP_SA_ESTABLISHED(st->st_state) &&",
          "2854:       (st->quirks.modecfg_pull_mode ||",
          "2855:        st->st_connection->policy & POLICY_MODECFG_PULL) &&",
          "2856:       !st->hidden_variables.st_modecfg_started) {",
          "2861:    modecfg_send_request(st);",
          "2862:    break;",
          "2863:   }",
          "",
          "[Removed Lines]",
          "2843:   DBG(DBG_CONTROL,",
          "2844:       DBG_log(\"modecfg pull: %s policy:%s %s\",",
          "2845:        (st->quirks.modecfg_pull_mode ?",
          "2846:         \"quirk-poll\" : \"noquirk\"),",
          "2847:        (st->st_connection->policy & POLICY_MODECFG_PULL) ?",
          "2848:        \"pull\" : \"push\",",
          "2849:        (st->st_connection->spd.this.modecfg_client ?",
          "2850:         \"modecfg-client\" : \"not-client\")));",
          "2857:    DBG(DBG_CONTROL,",
          "2858:        DBG_log(\"modecfg client is starting due to %s\",",
          "2859:         st->quirks.modecfg_pull_mode ? \"quirk\" :",
          "2860:         \"policy\"));",
          "",
          "[Added Lines]",
          "2852:   dbg(\"modecfg pull: %s policy:%s %s\",",
          "2853:       (st->quirks.modecfg_pull_mode ?",
          "2854:        \"quirk-poll\" : \"noquirk\"),",
          "2855:       (st->st_connection->policy & POLICY_MODECFG_PULL) ?",
          "2856:       \"pull\" : \"push\",",
          "2857:       (st->st_connection->spd.this.modecfg_client ?",
          "2858:        \"modecfg-client\" : \"not-client\"));",
          "2865:    dbg(\"modecfg client is starting due to %s\",",
          "2866:        st->quirks.modecfg_pull_mode ? \"quirk\" :",
          "2867:        \"policy\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2869:       !(st->st_connection->policy & POLICY_MODECFG_PULL)) {",
          "2870:    change_state(st, STATE_MODE_CFG_R1);",
          "2871:    set_cur_state(st);",
          "",
          "[Removed Lines]",
          "2872:    libreswan_log(\"Sending MODE CONFIG set\");",
          "",
          "[Added Lines]",
          "2879:    log_state(RC_LOG, st, \"Sending MODE CONFIG set\");",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2886:   if (!(smc->flags & SMF_INITIATOR) &&",
          "2887:       IS_MODE_CFG_ESTABLISHED(st->st_state) &&",
          "2888:       (st->st_seen_nortel_vid)) {",
          "2891:    set_cur_state(st);",
          "2892:    quick_outI1(st->st_whack_sock, st, st->st_connection,",
          "",
          "[Removed Lines]",
          "2889:    libreswan_log(\"Nortel 'Contivity Mode' detected, starting Quick Mode\");",
          "",
          "[Added Lines]",
          "2896:    log_state(RC_LOG, st, \"Nortel 'Contivity Mode' detected, starting Quick Mode\");",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2900:   if (st->st_connection->spd.this.modecfg_client &&",
          "2901:       IS_ISAKMP_SA_ESTABLISHED(st->st_state) &&",
          "2902:       !st->hidden_variables.st_modecfg_vars_set) {",
          "2905:    break;",
          "2906:   }",
          "2911:   if (smc->flags & SMF_RELEASE_PENDING_P2) {",
          "",
          "[Removed Lines]",
          "2903:    DBG(DBG_CONTROL,",
          "2904:        DBG_log(\"waiting for modecfg set from server\"));",
          "2908:   DBG(DBG_CONTROL,",
          "2909:       DBG_log(\"phase 1 is done, looking for phase 2 to unpend\"));",
          "",
          "[Added Lines]",
          "2910:    dbg(\"waiting for modecfg set from server\");",
          "2914:   dbg(\"phase 1 is done, looking for phase 2 to unpend\");",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2958:    if (!do_command(st->st_connection,",
          "2959:      &st->st_connection->spd,",
          "2960:      \"disconnectNM\", st))",
          "2963:   }",
          "2964: #endif",
          "2965:   release_pending_whacks(st, \"fatal error\");",
          "",
          "[Removed Lines]",
          "2961:     DBG(DBG_CONTROL,",
          "2962:         DBG_log(\"sending disconnect to NM failed, you may need to do it manually\"));",
          "",
          "[Added Lines]",
          "2966:     dbg(\"sending disconnect to NM failed, you may need to do it manually\");",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3012:    if (!do_command(st->st_connection,",
          "3013:      &st->st_connection->spd,",
          "3014:      \"disconnectNM\", st))",
          "3017:   }",
          "3018: #endif",
          "3019:   if (IS_QUICK(st->st_state->kind)) {",
          "",
          "[Removed Lines]",
          "3015:     DBG(DBG_CONTROL,",
          "3016:         DBG_log(\"sending disconnect to NM failed, you may need to do it manually\"));",
          "",
          "[Added Lines]",
          "3019:     dbg(\"sending disconnect to NM failed, you may need to do it manually\");",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3051:      id->isaid_doi_specific_a == IPPROTO_UDP &&",
          "3052:      (id->isaid_doi_specific_b == 0 ||",
          "3053:       id->isaid_doi_specific_b == pluto_nat_port)) {",
          "3056:  } else if (!(id->isaid_doi_specific_a == 0 &&",
          "3057:        id->isaid_doi_specific_b == 0) &&",
          "3058:      !(id->isaid_doi_specific_a == IPPROTO_UDP &&",
          "3059:        id->isaid_doi_specific_b == pluto_port))",
          "3060:  {",
          "",
          "[Removed Lines]",
          "3054:   DBG_log(\"protocol/port in Phase 1 ID Payload is %d/%d. accepted with port_floating NAT-T\",",
          "3055:    id->isaid_doi_specific_a, id->isaid_doi_specific_b);",
          "3061:   loglog(RC_LOG_SERIOUS,",
          "3062:    \"protocol/port in Phase 1 ID Payload MUST be 0/0 or %d/%d but are %d/%d (attempting to continue)\",",
          "3063:    IPPROTO_UDP, pluto_port,",
          "3064:    id->isaid_doi_specific_a,",
          "3065:    id->isaid_doi_specific_b);",
          "",
          "[Added Lines]",
          "3057:   dbg(\"protocol/port in Phase 1 ID Payload is %d/%d. accepted with port_floating NAT-T\",",
          "3058:       id->isaid_doi_specific_a, id->isaid_doi_specific_b);",
          "3064:   log_state(RC_LOG_SERIOUS, st,",
          "3065:      \"protocol/port in Phase 1 ID Payload MUST be 0/0 or %d/%d but are %d/%d (attempting to continue)\",",
          "3066:      IPPROTO_UDP, pluto_port,",
          "3067:      id->isaid_doi_specific_a,",
          "3068:      id->isaid_doi_specific_b);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3090:  {",
          "3091:   id_buf buf;",
          "3096:  }",
          "3099:  if (!v1_verify_certs(md)) {",
          "3101:   if (initiator || aggrmode) {",
          "3103:    return false;",
          "",
          "[Removed Lines]",
          "3093:   libreswan_log(\"Peer ID is %s: '%s'\",",
          "3094:    enum_show(&ike_idtype_names, id->isaid_idtype),",
          "3095:    str_id(&peer, &buf));",
          "3100:   libreswan_log(\"X509: CERT payload does not match connection ID\");",
          "",
          "[Added Lines]",
          "3096:   log_state(RC_LOG, st, \"Peer ID is %s: '%s'\",",
          "3097:      enum_show(&ike_idtype_names, id->isaid_idtype),",
          "3098:      str_id(&peer, &buf));",
          "3103:   log_state(RC_LOG, st, \"X509: CERT payload does not match connection ID\");",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3123:    id_buf expect;",
          "3124:    id_buf found;",
          "3130:    return FALSE;",
          "3131:   } else if (c->spd.that.id.kind == ID_FROMCERT) {",
          "3132:    if (peer.kind != ID_DER_ASN1_DN) {",
          "3135:     return FALSE;",
          "3136:    }",
          "3137:    duplicate_id(&c->spd.that.id, &peer);",
          "",
          "[Removed Lines]",
          "3126:    loglog(RC_LOG_SERIOUS,",
          "3127:           \"we require IKEv1 peer to have ID '%s', but peer declares '%s'\",",
          "3128:           str_id(&c->spd.that.id, &expect),",
          "3129:           str_id(&peer, &found));",
          "3133:     loglog(RC_LOG_SERIOUS,",
          "3134:            \"peer ID is not a certificate type\");",
          "",
          "[Added Lines]",
          "3129:    log_state(RC_LOG_SERIOUS, st,",
          "3130:       \"we require IKEv1 peer to have ID '%s', but peer declares '%s'\",",
          "3131:       str_id(&c->spd.that.id, &expect),",
          "3132:       str_id(&peer, &found));",
          "3136:     log_state(RC_LOG_SERIOUS, st,",
          "3137:        \"peer ID is not a certificate type\");",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3156:   case OAKLEY_ECDSA_P384:",
          "3157:   case OAKLEY_ECDSA_P521:",
          "3158:   default:",
          "3160:    return FALSE;",
          "3161:   }",
          "",
          "[Removed Lines]",
          "3159:    DBG(DBG_CONTROL, DBG_log(\"ikev1 ike_decode_peer_id bad_case due to not supported policy\"));",
          "",
          "[Added Lines]",
          "3162:    dbg(\"ikev1 ike_decode_peer_id bad_case due to not supported policy\");",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3170:     &fromcert);",
          "3172:   if (r == NULL) {",
          "3180:    if (!md->st->st_peer_alt_id &&",
          "3181:        !same_id(&c->spd.that.id, &peer) &&",
          "3182:        c->spd.that.id.kind != ID_FROMCERT) {",
          "3185:    } else {",
          "3187:     r = c;",
          "3188:    }",
          "3189:   }",
          "3197:   if (r != c) {",
          "3212:    if (r->kind == CK_TEMPLATE || r->kind == CK_GROUP) {",
          "",
          "[Removed Lines]",
          "3173:    DBG(DBG_CONTROL, {",
          "3174:     id_buf buf;",
          "3176:     DBG_log(\"no more suitable connection for peer '%s'\",",
          "3177:      str_id(&peer, &buf));",
          "3178:    });",
          "3183:      libreswan_log(\"Peer mismatch on first found connection and no better connection found\");",
          "3184:      return FALSE;",
          "3186:     DBG(DBG_CONTROL, DBG_log(\"Peer ID matches and no better connection found - continuing with existing connection\"));",
          "3191:   if (DBGP(DBG_BASE)) {",
          "3192:    dn_buf buf;",
          "3193:    DBG_log(\"offered CA: '%s'\",",
          "3194:     str_dn_or_null(r->spd.this.ca, \"%none\", &buf));",
          "3195:   }",
          "3202:    char b1[CONN_INST_BUF];",
          "3203:    char b2[CONN_INST_BUF];",
          "3206:    libreswan_log(\"switched from \\\"%s\\\"%s to \\\"%s\\\"%s\",",
          "3207:     c->name,",
          "3208:     fmt_conn_instance(c, b1),",
          "3209:     r->name,",
          "3210:     fmt_conn_instance(r, b2));",
          "",
          "[Added Lines]",
          "3176:    id_buf buf;",
          "3177:    dbg(\"no more suitable connection for peer '%s'\",",
          "3178:        str_id(&peer, &buf));",
          "3183:     log_state(RC_LOG, md->st, \"Peer mismatch on first found connection and no better connection found\");",
          "3184:     return FALSE;",
          "3186:     dbg(\"Peer ID matches and no better connection found - continuing with existing connection\");",
          "3191:   dn_buf buf;",
          "3192:   dbg(\"offered CA: '%s'\",",
          "3193:       str_dn_or_null(r->spd.this.ca, \"%none\", &buf));",
          "3200:    connection_buf b1, b2;",
          "3203:    log_state(RC_LOG, st, \"switched from \"PRI_CONNECTION\" to \"PRI_CONNECTION\"\",",
          "3204:       pri_connection(c, &b1), pri_connection(r, &b2));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3219:    update_state_connection(st, r);",
          "3223:    passert(!initiator && !aggrmode);",
          "3224:    return ikev1_decode_peer_id(md, FALSE, FALSE);",
          "3225:   } else if (c->spd.that.has_id_wildcards) {",
          "3226:    duplicate_id(&c->spd.that.id, &peer);",
          "3227:    c->spd.that.has_id_wildcards = FALSE;",
          "3228:   } else if (fromcert) {",
          "3230:    duplicate_id(&c->spd.that.id, &peer);",
          "3231:   }",
          "3232:  }",
          "",
          "[Removed Lines]",
          "3222:    DBG(DBG_CONTROL, DBG_log(\"retrying ike_decode_peer_id() with new conn\"));",
          "3229:    DBG(DBG_CONTROL, DBG_log(\"copying ID for fromcert\"));",
          "",
          "[Added Lines]",
          "3216:    dbg(\"retrying ike_decode_peer_id() with new conn\");",
          "3223:    dbg(\"copying ID for fromcert\");",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3252:     bool send_cert,",
          "3253:     bool send_chain)",
          "3254: {",
          "3256:   DBG_log(\"thinking about whether to send my certificate:\");",
          "3258:   struct esb_buf oan;",
          "",
          "[Removed Lines]",
          "3255:  DBG(DBG_CONTROL, {",
          "",
          "[Added Lines]",
          "3249:  if (DBGP(DBG_BASE)) {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3283:   }",
          "3284:   if (send_chain)",
          "3285:    DBG_log(\"Sending one or more authcerts\");",
          "3287: }",
          "",
          "[Removed Lines]",
          "3286:  });",
          "",
          "[Added Lines]",
          "3280:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2be321068052878afd75a007919662789c273ccc",
      "candidate_info": {
        "commit_hash": "2be321068052878afd75a007919662789c273ccc",
        "repo": "libreswan/libreswan",
        "commit_url": "https://github.com/libreswan/libreswan/commit/2be321068052878afd75a007919662789c273ccc",
        "files": [
          "include/constants.h",
          "lib/libswan/constants.c",
          "programs/pluto/connections.c",
          "programs/pluto/crypto.c",
          "programs/pluto/ikev1.c",
          "programs/pluto/ikev1_main.c",
          "programs/pluto/ikev1_quick.c",
          "programs/pluto/ikev1_spdb_struct.c",
          "programs/pluto/ikev1_xauth.c",
          "programs/pluto/ikev2.c",
          "programs/pluto/ikev2_parent.c",
          "programs/pluto/ikev2_spdb_struct.c",
          "programs/pluto/initiate.c",
          "programs/pluto/kernel.c",
          "programs/pluto/keys.c",
          "programs/pluto/packet.c",
          "programs/pluto/timer.c",
          "programs/pluto/unpack.c",
          "programs/pluto/x509.c"
        ],
        "message": "constants: merge enum_showb() into enum_show()\n\ni.e., eliminate non-rentrant variant",
        "before_after_code_files": [
          "include/constants.h||include/constants.h",
          "lib/libswan/constants.c||lilibswan/constants.c",
          "programs/pluto/connections.c||programs/pluto/connections.c",
          "programs/pluto/crypto.c||programs/pluto/crypto.c",
          "programs/pluto/ikev1.c||programs/pluto/ikev1.c",
          "programs/pluto/ikev1_main.c||programs/pluto/ikev1_main.c",
          "programs/pluto/ikev1_quick.c||programs/pluto/ikev1_quick.c",
          "programs/pluto/ikev1_spdb_struct.c||programs/pluto/ikev1_spdb_struct.c",
          "programs/pluto/ikev1_xauth.c||programs/pluto/ikev1_xauth.c",
          "programs/pluto/ikev2.c||programs/pluto/ikev2.c",
          "programs/pluto/ikev2_parent.c||programs/pluto/ikev2_parent.c",
          "programs/pluto/ikev2_spdb_struct.c||programs/pluto/ikev2_spdb_struct.c",
          "programs/pluto/initiate.c||programs/pluto/initiate.c",
          "programs/pluto/kernel.c||programs/pluto/kernel.c",
          "programs/pluto/keys.c||programs/pluto/keys.c",
          "programs/pluto/packet.c||programs/pluto/packet.c",
          "programs/pluto/timer.c||programs/pluto/timer.c",
          "programs/pluto/unpack.c||programs/pluto/unpack.c",
          "programs/pluto/x509.c||programs/pluto/x509.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
          ],
          "candidate": [
            "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
          ]
        }
      },
      "candidate_diff": {
        "include/constants.h||include/constants.h": [
          "File: include/constants.h -> include/constants.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:  char buf[(sizeof(unsigned long) * 241 + 99) / 100 + sizeof(\"??\")];",
          "239: } esb_buf;",
          "242: extern const char *enum_show_short(enum_names *ed, unsigned long val, esb_buf *);",
          "",
          "[Removed Lines]",
          "241: extern const char *enum_showb(enum_names *ed, unsigned long val, esb_buf *);",
          "",
          "[Added Lines]",
          "241: extern const char *enum_show(enum_names *ed, unsigned long val, esb_buf *);",
          "",
          "---------------"
        ],
        "lib/libswan/constants.c||lilibswan/constants.c": [
          "File: lib/libswan/constants.c -> lilibswan/constants.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2359: {",
          "2360:  const char *p = enum_name(ed, val);",
          "",
          "[Removed Lines]",
          "2358: const char *enum_showb(enum_names *ed, unsigned long val, esb_buf *b)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2379:  return name;",
          "2380: }",
          "",
          "[Removed Lines]",
          "2391: const char *enum_show(enum_names *ed, unsigned long val)",
          "2392: {",
          "2395:  return enum_showb(ed, val, &buf);",
          "2396: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2497:   return b->buf;",
          "2498:  }",
          "2501: }",
          "2503: const char *enum_enum_show_short(enum_enum_names *een, unsigned long table,",
          "",
          "[Removed Lines]",
          "2500:  return enum_showb(en, val, b);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "programs/pluto/connections.c||programs/pluto/connections.c": [
          "File: programs/pluto/connections.c -> programs/pluto/connections.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3227:    if (!initiator && tarzan_id != NULL) {",
          "3228:     id_buf tzb;",
          "3229:     dbg(\"peer expects us to be %s (%s) according to its IDr payload\",",
          "3230:         str_id(tarzan_id, &tzb),",
          "3232:     id_buf usb;",
          "3233:     dbg(\"this connection's local id is %s (%s)\",",
          "3234:         str_id(&d->spd.this.id, &usb),",
          "3237:     if (!idr_wildmatch(&d->spd.this, tarzan_id, st->st_logger)) {",
          "3238:      dbg(\"peer IDr payload does not match our expected ID, this connection will not do\");",
          "",
          "[Removed Lines]",
          "3231:         enum_show(&ike_idtype_names, tarzan_id->kind));",
          "3235:         enum_show(&ike_idtype_names, d->spd.this.id.kind));",
          "",
          "[Added Lines]",
          "3229:     esb_buf tzesb;",
          "3232:         enum_show(&ike_idtype_names, tarzan_id->kind, &tzesb));",
          "3234:     esb_buf usesb;",
          "3237:         enum_show(&ike_idtype_names, d->spd.this.id.kind, &usesb));",
          "",
          "---------------"
        ],
        "programs/pluto/crypto.c||programs/pluto/crypto.c": [
          "File: programs/pluto/crypto.c -> programs/pluto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:    show_comment(s,",
          "144:       \"algorithm IKE encrypt: v1id=%d, v1name=%s, v2id=%d, v2name=%s, blocksize=%zu, keydeflen=%u\",",
          "145:       alg->common.ikev1_oakley_id,",
          "150:        : \"n/a\"),",
          "151:       alg->common.id[IKEv2_ALG_ID],",
          "156:        : \"n/a\"),",
          "157:       alg->enc_blocksize,",
          "158:       alg->keydeflen);",
          "",
          "[Removed Lines]",
          "146:       (alg->common.ikev1_oakley_id >= 0",
          "147:        ? enum_showb(&oakley_enc_names,",
          "148:       alg->common.ikev1_oakley_id,",
          "149:       &v1namebuf)",
          "152:       (alg->common.id[IKEv2_ALG_ID] >= 0",
          "153:        ? enum_showb(&ikev2_trans_type_encr_names,",
          "154:       alg->common.id[IKEv2_ALG_ID],",
          "155:       &v2namebuf)",
          "",
          "[Added Lines]",
          "146:       (alg->common.ikev1_oakley_id >= 0 ? enum_show(&oakley_enc_names,",
          "147:           alg->common.ikev1_oakley_id,",
          "148:           &v1namebuf)",
          "151:       (alg->common.id[IKEv2_ALG_ID] >= 0 ? enum_show(&ikev2_trans_type_encr_names,",
          "152:            alg->common.id[IKEv2_ALG_ID],",
          "153:            &v2namebuf)",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1.c||programs/pluto/ikev1.c": [
          "File: programs/pluto/ikev1.c -> programs/pluto/ikev1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1554:    const struct end *this = &st->st_connection->spd.this;",
          "1555:    dbg(\" processing received isakmp_xchg_type %s; this is a%s%s%s%s\",",
          "1557:        this->xauth_server ? \" xauthserver\" : \"\",",
          "1558:        this->xauth_client ? \" xauthclient\" : \"\",",
          "1559:        this->modecfg_server ? \" modecfgserver\" : \"\",",
          "",
          "[Removed Lines]",
          "1556:        enum_show(&ikev1_exchange_names, md->hdr.isa_xchg),",
          "",
          "[Added Lines]",
          "1555:    esb_buf b;",
          "1557:        enum_show(&ikev1_exchange_names, md->hdr.isa_xchg, &b),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1620:     dbg(\" set from_state to %s this is modecfgclient and IS_PHASE1() is TRUE\",",
          "1621:         st->st_state->name);",
          "1622:    } else {",
          "1623:     dbg(\"received isakmp_xchg_type %s; this is a%s%s%s%s in state %s. Reply with UNSUPPORTED_EXCHANGE_TYPE\",",
          "1625:         st->st_connection ->spd.this.xauth_server ? \" xauthserver\" : \"\",",
          "1626:         st->st_connection->spd.this.xauth_client ? \" xauthclient\" : \"\",",
          "1627:         st->st_connection->spd.this.modecfg_server ? \" modecfgserver\" : \"\",",
          "",
          "[Removed Lines]",
          "1624:         enum_show(&ikev1_exchange_names, md->hdr.isa_xchg),",
          "",
          "[Added Lines]",
          "1624:     esb_buf b;",
          "1626:         enum_show(&ikev1_exchange_names, md->hdr.isa_xchg, &b),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1648:  case ISAKMP_XCHG_AO:",
          "1649:  case ISAKMP_XCHG_NGRP:",
          "1650:  default:",
          "1651:   dbg(\"unsupported exchange type %s in message\",",
          "1653:   SEND_NOTIFICATION(UNSUPPORTED_EXCHANGE_TYPE);",
          "1654:   return;",
          "1655:  }",
          "",
          "[Removed Lines]",
          "1652:       enum_show(&ikev1_exchange_names, md->hdr.isa_xchg));",
          "",
          "[Added Lines]",
          "1653:  {",
          "1654:   esb_buf b;",
          "1656:       enum_show(&ikev1_exchange_names, md->hdr.isa_xchg, &b));",
          "1660:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2113:     default:",
          "2114:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2115:          \"%smessage ignored because it contains an unknown or unexpected payload type (%s) at the outermost level\",",
          "2116:          excuse,",
          "2118:      if (!md->encrypted) {",
          "2119:       SEND_NOTIFICATION(INVALID_PAYLOAD_TYPE);",
          "2120:      }",
          "2121:      return;",
          "2122:     }",
          "2123:     passert(sd != NULL);",
          "2124:    }",
          "",
          "[Removed Lines]",
          "2117:          enum_show(&ikev1_payload_names, np));",
          "",
          "[Added Lines]",
          "2119:     {",
          "2120:      esb_buf b;",
          "2124:          enum_show(&ikev1_payload_names, np, &b));",
          "2130:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2135:            LELEM(ISAKMP_NEXT_D) |",
          "2136:            LELEM(ISAKMP_NEXT_CR) |",
          "2137:            LELEM(ISAKMP_NEXT_CERT))) {",
          "2138:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2139:          \"%smessage ignored because it contains a payload type (%s) unexpected by state %s\",",
          "2140:          excuse,",
          "2142:          finite_states[smc->state]->name);",
          "2143:      if (!md->encrypted) {",
          "2144:       SEND_NOTIFICATION(INVALID_PAYLOAD_TYPE);",
          "",
          "[Removed Lines]",
          "2141:          enum_show(&ikev1_payload_names, np),",
          "",
          "[Added Lines]",
          "2146:      esb_buf b;",
          "2150:          enum_show(&ikev1_payload_names, np, &b),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2146:      return;",
          "2147:     }",
          "2149:     dbg(\"got payload 0x%\" PRIxLSET\"  (%s) needed: 0x%\" PRIxLSET \" opt: 0x%\" PRIxLSET,",
          "2151:         needed, smc->opt_payloads);",
          "2152:     needed &= ~s;",
          "2153:    }",
          "",
          "[Removed Lines]",
          "2150:         s, enum_show(&ikev1_payload_names, np),",
          "",
          "[Added Lines]",
          "2158:     esb_buf b;",
          "2160:         s, enum_show(&ikev1_payload_names, np, &b),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2349:    default:",
          "2350:     if (st == NULL) {",
          "2351:      dbg(\"ignoring informational payload %s, no corresponding state\",",
          "2352:          enum_show(& ikev1_notify_names,",
          "2354:     } else {",
          "2355:      LOG_PACKET(RC_LOG_SERIOUS,",
          "2356:          \"ignoring informational payload %s, msgid=%08\" PRIx32 \", length=%d\",",
          "2357:          enum_show(&ikev1_notify_names,",
          "2359:          st->st_v1_msgid.id,",
          "2360:          p->payload.notification.isan_length);",
          "2361:      if (DBGP(DBG_BASE)) {",
          "",
          "[Removed Lines]",
          "2353:             p->payload.notification.isan_type));",
          "2358:             p->payload.notification.isan_type),",
          "",
          "[Added Lines]",
          "2361:      esb_buf b;",
          "2364:             p->payload.notification.isan_type, &b));",
          "2366:      esb_buf b;",
          "2370:             p->payload.notification.isan_type,",
          "2371:             &b),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3096:  {",
          "3097:   id_buf buf;",
          "3099:   log_state(RC_LOG, st, \"Peer ID is %s: '%s'\",",
          "3101:      str_id(&peer, &buf));",
          "3102:  }",
          "",
          "[Removed Lines]",
          "3100:      enum_show(&ike_idtype_names, id->isaid_idtype),",
          "",
          "[Added Lines]",
          "3111:   esb_buf b;",
          "3113:      enum_show(&ike_idtype_names, id->isaid_idtype, &b),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3255:   esb_buf oan;",
          "3256:   esb_buf ictn;",
          "3258:   DBG_log(\"  I have RSA key: %s cert.type: %s \",",
          "3262:   esb_buf cptn;",
          "3264:   DBG_log(\"  sendcert: %s and I did%s get a certificate request \",",
          "3266:    gotcertrequest ? \"\" : \" not\");",
          "3268:   DBG_log(\"  so %ssend cert.\", send_cert ? \"\" : \"do not \");",
          "",
          "[Removed Lines]",
          "3259:    enum_showb(&oakley_auth_names, auth, &oan),",
          "3260:    enum_showb(&ike_cert_type_names, certtype, &ictn));",
          "3265:    enum_showb(&certpolicy_type_names, policy, &cptn),",
          "",
          "[Added Lines]",
          "3271:    enum_show(&oakley_auth_names, auth, &oan),",
          "3272:    enum_show(&ike_cert_type_names, certtype, &ictn));",
          "3276:    enum_show(&certpolicy_type_names, policy, &cptn),",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_main.c||programs/pluto/ikev1_main.c": [
          "File: programs/pluto/ikev1_main.c -> programs/pluto/ikev1_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2273:   return FALSE;",
          "2275:  default:",
          "2276:   log_state(RC_LOG_SERIOUS, st,",
          "2277:      \"ignoring Delete SA payload: unknown Protocol ID (%s)\",",
          "2279:   return false;",
          "2280:  }",
          "2282:  if (d->isad_spisize != sizespi) {",
          "2283:   log_state(RC_LOG_SERIOUS, st,",
          "2284:      \"ignoring Delete SA payload: bad SPI size (%d) for %s\",",
          "2285:      d->isad_spisize,",
          "2287:   return false;",
          "2288:  }",
          "",
          "[Removed Lines]",
          "2278:      enum_show(&ikev1_protocol_names, d->isad_protoid));",
          "2286:      enum_show(&ikev1_protocol_names, d->isad_protoid));",
          "",
          "[Added Lines]",
          "2276:  {",
          "2277:   esb_buf b;",
          "2280:      enum_show(&ikev1_protocol_names, d->isad_protoid, &b));",
          "2283:  }",
          "2286:   esb_buf b;",
          "2290:      enum_show(&ikev1_protocol_names, d->isad_protoid, &b));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2362:    if (dst == NULL) {",
          "2363:     log_state(RC_LOG_SERIOUS, st,",
          "2364:        \"ignoring Delete SA payload: %s SA(0x%08\" PRIx32 \") not found (maybe expired)\",",
          "2367:        ntohl(spi));",
          "2368:    } else {",
          "2369:     if (bogus) {",
          "2370:      log_state(RC_LOG_SERIOUS, st,",
          "2371:         \"warning: Delete SA payload: %s SA(0x%08\" PRIx32 \") is our own SPI (bogus implementation) - deleting anyway\",",
          "2374:         ntohl(spi));",
          "2375:     }",
          "",
          "[Removed Lines]",
          "2365:        enum_show(&ikev1_protocol_names,",
          "2366:           d->isad_protoid),",
          "2372:         enum_show(&ikev1_protocol_names,",
          "2373:            d->isad_protoid),",
          "",
          "[Added Lines]",
          "2367:     esb_buf b;",
          "2370:        enum_show(&ikev1_protocol_names, d->isad_protoid, &b),",
          "2374:      esb_buf b;",
          "2377:         enum_show(&ikev1_protocol_names, d->isad_protoid, &b),",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_quick.c||programs/pluto/ikev1_quick.c": [
          "File: programs/pluto/ikev1_quick.c -> programs/pluto/ikev1_quick.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "371: {",
          "372:  const struct ip_info *afi = NULL;",
          "380:  switch (id->isaiid_idtype) {",
          "381:  case ID_IPV4_ADDR:",
          "",
          "[Removed Lines]",
          "378:  const char *idtypename = enum_show(&ike_idtype_names, id->isaiid_idtype);",
          "",
          "[Added Lines]",
          "377:  esb_buf idb;",
          "378:  const char *idtypename = enum_show(&ike_idtype_names, id->isaiid_idtype, &idb);",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_spdb_struct.c||programs/pluto/ikev1_spdb_struct.c": [
          "File: programs/pluto/ikev1_spdb_struct.c -> programs/pluto/ikev1_spdb_struct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:  }",
          "181:  if (DBGP(DBG_BASE)) {",
          "182:   enum_names *d = attr_val_descs[type];",
          "186:  }",
          "187:  return TRUE;",
          "188: }",
          "",
          "[Removed Lines]",
          "183:   if (d != NULL)",
          "184:    DBG_log(\"    [%lu is %s]\",",
          "185:     val, enum_show(d, val));",
          "",
          "[Added Lines]",
          "183:   if (d != NULL) {",
          "184:    esb_buf b;",
          "185:    DBG_log(\"    [%lu is %s]\", val, enum_show(d, val, &b));",
          "186:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1658:  if (sa->isasa_doi != ISAKMP_DOI_IPSEC) {",
          "1659:   log_state(RC_LOG_SERIOUS, st, \"Unknown/unsupported DOI %s\",",
          "1663:  }",
          "",
          "[Removed Lines]",
          "1660:      enum_show(&doi_names, sa->isasa_doi));",
          "",
          "[Added Lines]",
          "1660:   esb_buf b;",
          "1662:      enum_show(&doi_names, sa->isasa_doi, &b));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1696:  }",
          "1698:  if (proposal.isap_pnp != ISAKMP_NEXT_NONE) {",
          "1699:   log_state(RC_LOG_SERIOUS, st,",
          "1700:      \"Proposal Payload must be alone in Oakley SA; found %s following Proposal\",",
          "1703:  }",
          "1705:  if (proposal.isap_protoid != PROTO_ISAKMP) {",
          "1706:   log_state(RC_LOG_SERIOUS, st,",
          "1707:      \"unexpected Protocol ID (%s) found in Oakley Proposal\",",
          "1710:  }",
          "",
          "[Removed Lines]",
          "1701:      enum_show(&ikev1_payload_names, proposal.isap_pnp));",
          "1708:      enum_show(&ikev1_protocol_names, proposal.isap_protoid));",
          "",
          "[Added Lines]",
          "1701:   esb_buf b;",
          "1704:      enum_show(&ikev1_payload_names, proposal.isap_pnp, &b));",
          "1709:   esb_buf b;",
          "1712:      enum_show(&ikev1_protocol_names, proposal.isap_protoid, &b));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1792:   last_transnum = trans.isat_transnum;",
          "1794:   if (trans.isat_transid != KEY_IKE) {",
          "1795:    log_state(RC_LOG_SERIOUS, st,",
          "1796:       \"expected KEY_IKE but found %s in Oakley Transform\",",
          "1797:       enum_show(&isakmp_transformid_names,",
          "1800:   }",
          "",
          "[Removed Lines]",
          "1798:          trans.isat_transid));",
          "",
          "[Added Lines]",
          "1799:    esb_buf b;",
          "1803:          trans.isat_transid, &b));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1809:   bool ok = true;",
          "1810: #define UGH(FMT, ...)       \\",
          "1811:   {       \\",
          "1812:    ok = false;     \\",
          "1813:    log_state(RC_LOG_SERIOUS, st,   \\",
          "1814:       FMT\".  Attribute %s\",   \\",
          "1815:       ##__VA_ARGS__,   \\",
          "1817:   }",
          "1819:   while (pbs_left(&trans_pbs) >= isakmp_oakley_attribute_desc.size) {",
          "",
          "[Removed Lines]",
          "1816:       enum_show(&oakley_attr_names, a.isaat_af_type)); \\",
          "",
          "[Added Lines]",
          "1817:    esb_buf typeesb_;    \\",
          "1822:       enum_show(&oakley_attr_names,  \\",
          "1823:          a.isaat_af_type, &typeesb_)); \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1831:    passert((a.isaat_af_type & ISAKMP_ATTR_RTYPE_MASK) <",
          "1832:     LELEM_ROOF);",
          "1836:     log_state(RC_LOG_SERIOUS, st,",
          "1837:        \"repeated %s attribute in Oakley Transform %u\",",
          "1840:        trans.isat_transnum);",
          "1842:    }",
          "",
          "[Removed Lines]",
          "1834:    if (LHAS(seen_attrs, a.isaat_af_type &",
          "1835:      ISAKMP_ATTR_RTYPE_MASK)) {",
          "1838:        enum_show(&oakley_attr_names,",
          "1839:           a.isaat_af_type),",
          "",
          "[Added Lines]",
          "1841:    if (LHAS(seen_attrs, a.isaat_af_type & ISAKMP_ATTR_RTYPE_MASK)) {",
          "1842:     esb_buf b;",
          "1845:        enum_show(&oakley_attr_names, a.isaat_af_type, &b),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1869:    {",
          "1870:     const struct encrypt_desc *encrypter = ikev1_get_ike_encrypt_desc(val);",
          "1871:     if (encrypter == NULL) {",
          "1872:      UGH(\"%s is not supported\",",
          "1874:      break;",
          "1875:     }",
          "1876:     ta.ta_encrypt = encrypter;",
          "",
          "[Removed Lines]",
          "1873:          enum_show(&oakley_enc_names, val));",
          "",
          "[Added Lines]",
          "1878:      esb_buf b;",
          "1880:          enum_show(&oakley_enc_names, val, &b));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1881:    case OAKLEY_HASH_ALGORITHM | ISAKMP_ATTR_AF_TV:",
          "1882:     ta.ta_prf = ikev1_get_ike_prf_desc(val);",
          "1883:     if (ta.ta_prf == NULL) {",
          "1884:      UGH(\"%s is not supported\",",
          "1886:     }",
          "1887:     break;",
          "",
          "[Removed Lines]",
          "1885:          enum_show(&oakley_hash_names, val));",
          "",
          "[Added Lines]",
          "1891:      esb_buf b;",
          "1893:          enum_show(&oakley_hash_names, val, &b));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2002:      break;",
          "2004:     default:",
          "2005:      UGH(\"Pluto does not support %s authentication\",",
          "2007:      break;",
          "2008:     }",
          "2009:    }",
          "2010:    break;",
          "",
          "[Removed Lines]",
          "2006:          enum_show(&oakley_auth_names, val));",
          "",
          "[Added Lines]",
          "2013:     {",
          "2014:      esb_buf b;",
          "2016:          enum_show(&oakley_auth_names, val, &b));",
          "2019:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2022:     case OAKLEY_LIFE_SECONDS:",
          "2023:     case OAKLEY_LIFE_KILOBYTES:",
          "2024:      if (LHAS(seen_durations, val)) {",
          "2025:       log_state(RC_LOG_SERIOUS, st,",
          "2026:          \"attribute OAKLEY_LIFE_TYPE value %s repeated\",",
          "2029:      }",
          "2030:      seen_durations |= LELEM(val);",
          "2031:      life_type = val;",
          "2032:      break;",
          "2033:     default:",
          "2034:      UGH(\"unknown value %s\",",
          "2036:      break;",
          "2037:     }",
          "2038:     break;",
          "2040:    case OAKLEY_LIFE_DURATION | ISAKMP_ATTR_AF_TLV:",
          "",
          "[Removed Lines]",
          "2027:          enum_show(&oakley_lifetime_names, val));",
          "2035:          enum_show(&oakley_lifetime_names, val));",
          "",
          "[Added Lines]",
          "2036:       esb_buf b;",
          "2039:          enum_show(&oakley_lifetime_names, val, &b));",
          "2046:     {",
          "2047:      esb_buf b;",
          "2049:          enum_show(&oakley_lifetime_names, val, &b));",
          "2052:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2226:    break;",
          "2227:   }",
          "2228:   if (trans.isat_tnp != ISAKMP_NEXT_T) {",
          "2229:    log_state(RC_LOG_SERIOUS, st,",
          "2230:       \"unexpected %s payload in Oakley Proposal\",",
          "2233:   }",
          "2234:  }",
          "",
          "[Removed Lines]",
          "2231:       enum_show(&ikev1_payload_names, proposal.isap_pnp));",
          "",
          "[Added Lines]",
          "2244:    esb_buf b;",
          "2247:       enum_show(&ikev1_payload_names, proposal.isap_pnp, &b));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2402:   }",
          "2403:   break;",
          "2404:  default:",
          "2405:   log_state(RC_LOG_SERIOUS, st,",
          "2406:      \"expecting Transform Payload, but found %s in Proposal\",",
          "2409:  }",
          "",
          "[Removed Lines]",
          "2407:          enum_show(&ikev1_payload_names, trans->isat_tnp));",
          "2408:   return FALSE;",
          "",
          "[Added Lines]",
          "2421:  {",
          "2422:   esb_buf b;",
          "2425:      enum_show(&ikev1_payload_names, trans->isat_tnp, &b));",
          "2426:   return false;",
          "2427:  }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2458:   } else {",
          "2459:    passert(ty < LELEM_ROOF);",
          "2460:    if (LHAS(seen_attrs, ty)) {",
          "2461:     log_state(RC_LOG_SERIOUS, st,",
          "2462:        \"repeated %s attribute in IPsec Transform %u\",",
          "2464:        trans->isat_transnum);",
          "2465:     return FALSE;",
          "2466:    }",
          "",
          "[Removed Lines]",
          "2463:        enum_show(&ipsec_attr_names, a.isaat_af_type),",
          "",
          "[Added Lines]",
          "2480:     esb_buf b;",
          "2483:        enum_show(&ipsec_attr_names, a.isaat_af_type, &b),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2473:   if (vdesc != NULL) {",
          "2475:    if (enum_name(vdesc, val) == NULL) {",
          "2476:     log_state(RC_LOG_SERIOUS, st,",
          "2477:        \"invalid value %\" PRIu32 \" for attribute %s in IPsec Transform\",",
          "2478:        val,",
          "2481:     return FALSE;",
          "2482:    }",
          "2483:    if (DBGP(DBG_BASE)) {",
          "2486:         ISAKMP_ATTR_AF_TV) {",
          "2487:      DBG_log(\"   [%\" PRIu32 \" is %s]\",",
          "2488:       val,",
          "2490:     }",
          "2491:    }",
          "2492:   }",
          "",
          "[Removed Lines]",
          "2479:            enum_show(&ipsec_attr_names,",
          "2480:        a.isaat_af_type));",
          "2484:     if ((a.isaat_af_type &",
          "2485:          ISAKMP_ATTR_AF_MASK) ==",
          "2489:       enum_show(vdesc, val));",
          "",
          "[Added Lines]",
          "2496:     esb_buf b;",
          "2500:        enum_show(&ipsec_attr_names, a.isaat_af_type, &b));",
          "2504:     if ((a.isaat_af_type & ISAKMP_ATTR_AF_MASK) ==",
          "2506:      esb_buf b;",
          "2509:       enum_show(vdesc, val, &b));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2495:   case SA_LIFE_TYPE | ISAKMP_ATTR_AF_TV:",
          "2496:    ipcomp_inappropriate = FALSE;",
          "2497:    if (LHAS(seen_durations, val)) {",
          "2498:     log_state(RC_LOG_SERIOUS, st,",
          "2499:        \"attribute SA_LIFE_TYPE value %s repeated in message\",",
          "2501:     return FALSE;",
          "2502:    }",
          "2503:    seen_durations |= LELEM(val);",
          "",
          "[Removed Lines]",
          "2500:        enum_show(&sa_lifetime_names, val));",
          "",
          "[Added Lines]",
          "2518:     esb_buf b;",
          "2521:        enum_show(&sa_lifetime_names, val, &b));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2642:     log_state(RC_LOG_SERIOUS, st,",
          "2643:        \"IKEv1 %s integrity algorithm %s not supported\",",
          "2644:        (proto == PROTO_IPSEC_ESP ? \"ESP\" : \"AH\"),",
          "2646:    }",
          "2647:    break;",
          "",
          "[Removed Lines]",
          "2645:        enum_show(&ah_transformid_names, val));",
          "",
          "[Added Lines]",
          "2663:     esb_buf b;",
          "2667:        enum_show(&ah_transformid_names, val, &b));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2669:   }",
          "2671:   default:",
          "2672:    log_state(RC_LOG_SERIOUS, st,",
          "2673:       \"unsupported IPsec attribute %s\",",
          "2675:    return FALSE;",
          "2676:   }",
          "2678:   if (ipcomp_inappropriate) {",
          "2679:    log_state(RC_LOG_SERIOUS, st,",
          "2680:       \"IPsec attribute %s inappropriate for IPCOMP\",",
          "2682:    return FALSE;",
          "2683:   }",
          "2684:  }",
          "",
          "[Removed Lines]",
          "2674:       enum_show(&ipsec_attr_names, a.isaat_af_type));",
          "2681:       enum_show(&ipsec_attr_names, a.isaat_af_type));",
          "",
          "[Added Lines]",
          "2694:   {",
          "2695:    esb_buf b;",
          "2698:       enum_show(&ipsec_attr_names, a.isaat_af_type, &b));",
          "2701:   }",
          "2704:    esb_buf b;",
          "2707:       enum_show(&ipsec_attr_names, a.isaat_af_type, &b));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2852:  if (sa->isasa_doi != ISAKMP_DOI_IPSEC) {",
          "2853:   log_state(RC_LOG_SERIOUS, st, \"Unknown or unsupported DOI %s\",",
          "2857:  }",
          "",
          "[Removed Lines]",
          "2854:      enum_show(&doi_names, sa->isasa_doi));",
          "",
          "[Added Lines]",
          "2879:   esb_buf b;",
          "2881:      enum_show(&doi_names, sa->isasa_doi, &b));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3085:     break;",
          "3087:    default:",
          "3088:     log_state(RC_LOG_SERIOUS, st,",
          "3089:        \"unexpected Protocol ID (%s) in IPsec Proposal\",",
          "3090:        enum_show(&ikev1_protocol_names,",
          "3093:    }",
          "3096:    if (next_proposal.isap_pnp == ISAKMP_NEXT_NONE) {",
          "3097:     next_full = FALSE;",
          "3098:     break;",
          "3099:    } else if (next_proposal.isap_pnp != ISAKMP_NEXT_P) {",
          "3100:     log_state(RC_LOG_SERIOUS, st,",
          "3101:        \"unexpected in Proposal: %s\",",
          "3105:    }",
          "",
          "[Removed Lines]",
          "3091:           next_proposal.isap_protoid));",
          "3102:        enum_show(&ikev1_payload_names,",
          "3103:           next_proposal.isap_pnp));",
          "",
          "[Added Lines]",
          "3115:    {",
          "3116:     esb_buf b;",
          "3120:           next_proposal.isap_protoid, &b));",
          "3123:    }",
          "3130:     esb_buf b;",
          "3133:        enum_show(&ikev1_payload_names, next_proposal.isap_pnp, &b));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3170:     if (ah_trans.isat_transid != ah_attrs.transattrs.ta_integ->integ_ikev1_ah_transform) {",
          "3171:      log_state(RC_LOG_SERIOUS, st,",
          "3172:         \"%s attribute inappropriate in %s Transform\",",
          "3173:         ah_attrs.transattrs.ta_integ->common.fqn,",
          "3174:         enum_show(&ah_transformid_names,",
          "3177:     }",
          "",
          "[Removed Lines]",
          "3175:            ah_trans.isat_transid));",
          "",
          "[Added Lines]",
          "3201:      esb_buf b;",
          "3206:            ah_trans.isat_transid, &b));",
          "",
          "---------------"
        ],
        "programs/pluto/ikev1_xauth.c||programs/pluto/ikev1_xauth.c": [
          "File: programs/pluto/ikev1_xauth.c -> programs/pluto/ikev1_xauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:   break;",
          "312:  }",
          "313:  default:",
          "314:   log_state(RC_LOG, st,",
          "315:      \"attempt to send unsupported mode cfg attribute %s.\",",
          "317:   break;",
          "318:  }",
          "320:  if (!ok)",
          "321:   return STF_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "316:      enum_show(&modecfg_attr_names, attr_type));",
          "",
          "[Added Lines]",
          "314:  {",
          "315:   esb_buf b;",
          "318:      enum_show(&modecfg_attr_names, attr_type, &b));",
          "321:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218: static void log_bad_attr(const char *kind, enum_names *ed, unsigned val)",
          "1219: {",
          "1220:  dbg(\"Unsupported %s %s attribute %s received.\",",
          "1221:      kind,",
          "1222:      (val & ISAKMP_ATTR_AF_MASK) == ISAKMP_ATTR_AF_TV ? \"basic\" : \"long\",",
          "1224: }",
          "",
          "[Removed Lines]",
          "1223:      enum_show(ed, val & ISAKMP_ATTR_RTYPE_MASK));",
          "",
          "[Added Lines]",
          "1223:  esb_buf b;",
          "1227:      enum_show(ed, val & ISAKMP_ATTR_RTYPE_MASK, &b));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1280:   case XAUTH_TYPE | ISAKMP_ATTR_AF_TV:",
          "1282:    if (attr.isaat_lv != XAUTH_TYPE_GENERIC) {",
          "1283:     dbg(\"unsupported XAUTH_TYPE value %s received\",",
          "1285:     return STF_FAIL + NO_PROPOSAL_CHOSEN;",
          "1286:    }",
          "1287:    break;",
          "",
          "[Removed Lines]",
          "1284:         enum_show(&xauth_type_names, attr.isaat_lv));",
          "",
          "[Added Lines]",
          "1287:     esb_buf b;",
          "1289:         enum_show(&xauth_type_names, attr.isaat_lv, &b));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2079:      break;",
          "2081:     default:",
          "2082:      log_state(RC_LOG, st,",
          "2083:       \"trying to send XAUTH reply, sending %s instead.\",",
          "2086:      break;",
          "2087:     }",
          "2088:    }",
          "2090:    xauth_resp >>= 1;",
          "",
          "[Removed Lines]",
          "2084:       enum_show(&modecfg_attr_names,",
          "2085:          attr_type));",
          "",
          "[Added Lines]",
          "2087:     {",
          "2088:      esb_buf b;",
          "2091:         enum_show(&modecfg_attr_names, attr_type, &b));",
          "2094:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2443:     break;",
          "2445:    default:",
          "2446:     log_state(RC_LOG, st,",
          "2447:      \"while waiting for XAUTH_STATUS, got %s %s instead.\",",
          "2448:      (attr.isaat_af_type & ISAKMP_ATTR_AF_MASK) == ISAKMP_ATTR_AF_TV ? \"basic\" : \"long\",",
          "2449:      enum_show(&modecfg_attr_names,",
          "2451:     break;",
          "2452:    }",
          "2453:   }",
          "2454:   break;",
          "2455:  }",
          "",
          "[Removed Lines]",
          "2450:         attr.isaat_af_type & ISAKMP_ATTR_RTYPE_MASK));",
          "",
          "[Added Lines]",
          "2453:    {",
          "2454:     esb_buf b;",
          "2459:         attr.isaat_af_type & ISAKMP_ATTR_RTYPE_MASK, &b));",
          "2462:    }",
          "",
          "---------------"
        ],
        "programs/pluto/ikev2.c||programs/pluto/ikev2.c": [
          "File: programs/pluto/ikev2.c -> programs/pluto/ikev2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "762:  while (np != ISAKMP_NEXT_v2NONE) {",
          "763:   dbg(\"Now let's proceed with payload (%s)\",",
          "766:   if (md->digest_roof >= elemsof(md->digest)) {",
          "767:    llog(RC_LOG_SERIOUS, log,",
          "",
          "[Removed Lines]",
          "764:       enum_show(&ikev2_payload_names, np));",
          "",
          "[Added Lines]",
          "763:   esb_buf b;",
          "765:       enum_show(&ikev2_payload_names, np, &b));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "818:     default:",
          "819:      bad_case(v2_msg_role(md));",
          "820:     }",
          "821:     llog(RC_LOG_SERIOUS, log,",
          "824:     summary.n = v2N_UNSUPPORTED_CRITICAL_PAYLOAD;",
          "825:     summary.data[0] = np;",
          "826:     summary.data_size = 1;",
          "",
          "[Removed Lines]",
          "822:          \"message %s contained an unknown critical payload type (%s)\",",
          "823:          role, enum_show(&ikev2_payload_names, np));",
          "",
          "[Added Lines]",
          "822:     esb_buf b;",
          "824:          \"message %s contained an unknown critical payload type (%s)\",",
          "825:          role, enum_show(&ikev2_payload_names, np, &b));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "828:    }",
          "829:    esb_buf eb;",
          "830:    llog(RC_COMMENT, log,",
          "833:    np = pd->payload.generic.isag_np;",
          "834:    continue;",
          "835:   }",
          "",
          "[Removed Lines]",
          "831:         \"non-critical payload ignored because it contains an unknown or unexpected payload type (%s) at the outermost level\",",
          "832:         enum_showb(&ikev2_payload_names, np, &eb));",
          "",
          "[Added Lines]",
          "833:         \"non-critical payload ignored because it contains an unknown or unexpected payload type (%s) at the outermost level\",",
          "834:         enum_show(&ikev2_payload_names, np, &eb));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "858:   }",
          "860:   dbg(\"processing payload: %s (len=%zu)\",",
          "862:       pbs_left(&pd->pbs));",
          "",
          "[Removed Lines]",
          "861:       enum_show(&ikev2_payload_names, np),",
          "",
          "[Added Lines]",
          "863:       enum_show(&ikev2_payload_names, np, &b),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2803:  if (!(c->policy & POLICY_OPPORTUNISTIC)) {",
          "2804:   id_buf idbuf;",
          "2805:   log_state(RC_LOG, &ike->sa,",
          "2806:      \"IKEv2 mode peer ID is %s: '%s'\",",
          "2808:      str_id(&peer_id, &idbuf));",
          "2809:  } else if (DBGP(DBG_BASE)) {",
          "2810:   id_buf idbuf;",
          "2811:   DBG_log(\"IKEv2 mode peer ID is %s: '%s'\",",
          "2813:    str_id(&peer_id, &idbuf));",
          "2814:  }",
          "",
          "[Removed Lines]",
          "2807:      enum_show(&ikev2_idtype_names, hik),",
          "2812:    enum_show(&ikev2_idtype_names, hik),",
          "",
          "[Added Lines]",
          "2807:   esb_buf b;",
          "2810:      enum_show(&ikev2_idtype_names, hik, &b),",
          "2814:   esb_buf b;",
          "2816:    enum_show(&ikev2_idtype_names, hik, &b),",
          "",
          "---------------"
        ],
        "programs/pluto/ikev2_parent.c||programs/pluto/ikev2_parent.c": [
          "File: programs/pluto/ikev2_parent.c -> programs/pluto/ikev2_parent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "473:  }",
          "475:  if (DBGP(DBG_BASE)) {",
          "476:   const char *err1 = \"%dnsondemand\";",
          "477:   const char *err2 = \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477:   esb_buf eb2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:   }",
          "485:   if (id.kind != ID_FQDN &&",
          "488:    err1 = \" mismatched ID type, that ID is not a FQDN, IPV4_ADDR, or IPV6_ADDR id type=\";",
          "490:   }",
          "492:   id_buf thatid;",
          "",
          "[Removed Lines]",
          "486:     id.kind != ID_IPV4_ADDR &&",
          "487:     id.kind != ID_IPV6_ADDR) {",
          "489:    err2 = enum_show(&ike_idtype_names, id.kind);",
          "",
          "[Added Lines]",
          "488:       id.kind != ID_IPV4_ADDR &&",
          "489:       id.kind != ID_IPV6_ADDR) {",
          "491:    err2 = enum_show(&ike_idtype_names, id.kind, &eb2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2304:    break;",
          "2305:   }",
          "2306:   default:",
          "2307:    dbg(\"Not sending IDr payload for remote ID type %s\",",
          "2309:    break;",
          "2310:   }",
          "2311:  }",
          "2313:  if (ic) {",
          "",
          "[Removed Lines]",
          "2308:        enum_show(&ike_idtype_names, pc->spd.that.id.kind));",
          "",
          "[Added Lines]",
          "2309:   {",
          "2310:    esb_buf b;",
          "2312:        enum_show(&ike_idtype_names, pc->spd.that.id.kind, &b));",
          "2315:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3701:   esb_buf esb;",
          "3702:   log_state(RC_LOG_SERIOUS, &child->sa, \"received ERROR NOTIFY (%d): %s \",",
          "3703:      md->v2N_error,",
          "3705:   return STF_FATAL;",
          "3706:  }",
          "",
          "[Removed Lines]",
          "3704:      enum_showb(&ikev2_notify_names, md->v2N_error, &esb));",
          "",
          "[Added Lines]",
          "3709:      enum_show(&ikev2_notify_names, md->v2N_error, &esb));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4121:  dbg(\"CREATE_CHILD_SA IPsec SA rekey Protocol %s\",",
          "4124:  if (rekey_notify->isan_spisize != sizeof(ipsec_spi_t)) {",
          "4125:   log_state(RC_LOG, &child->sa,",
          "",
          "[Removed Lines]",
          "4122:      enum_show(&ikev2_notify_protocol_id_names, rekey_notify->isan_protoid));",
          "",
          "[Added Lines]",
          "4126:  esb_buf b;",
          "4128:      enum_show(&ikev2_notify_protocol_id_names, rekey_notify->isan_protoid, &b));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4150:  if (rekey_notify->isan_protoid != PROTO_IPSEC_ESP &&",
          "4151:      rekey_notify->isan_protoid != PROTO_IPSEC_AH) {",
          "4152:   log_state(RC_LOG, &child->sa,",
          "4153:      \"CREATE_CHILD_SA IPsec SA rekey invalid Protocol ID %s\",",
          "4155:   record_v2N_spi_response(child->sa.st_logger, ike, md,",
          "4156:      rekey_notify->isan_protoid, &spi,",
          "4157:      v2N_CHILD_SA_NOT_FOUND,",
          "",
          "[Removed Lines]",
          "4154:      enum_show(&ikev2_notify_protocol_id_names, rekey_notify->isan_protoid));",
          "",
          "[Added Lines]",
          "4158:   esb_buf b;",
          "4161:      enum_show(&ikev2_notify_protocol_id_names, rekey_notify->isan_protoid, &b));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4159:   return false;",
          "4160:  }",
          "4162:  dbg(\"CREATE_CHILD_S to rekey IPsec SA(0x%08\" PRIx32 \") Protocol %s\",",
          "4163:      ntohl((uint32_t) spi),",
          "",
          "[Removed Lines]",
          "4164:      enum_show(&ikev2_notify_protocol_id_names, rekey_notify->isan_protoid));",
          "",
          "[Added Lines]",
          "4169:  esb_buf protoesb;",
          "4172:      enum_show(&ikev2_notify_protocol_id_names, rekey_notify->isan_protoid, &protoesb));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4175:  struct child_sa *replaced_child = find_v2_child_sa_by_outbound_spi(ike, rekey_notify->isan_protoid, spi);",
          "4176:  if (replaced_child == NULL) {",
          "4177:   log_state(RC_LOG, &child->sa,",
          "4178:      \"CREATE_CHILD_SA no such IPsec SA to rekey SA(0x%08\" PRIx32 \") Protocol %s\",",
          "4179:      ntohl((uint32_t) spi),",
          "4181:   record_v2N_spi_response(child->sa.st_logger, ike, md,",
          "4182:      rekey_notify->isan_protoid, &spi,",
          "4183:      v2N_CHILD_SA_NOT_FOUND,",
          "",
          "[Removed Lines]",
          "4180:      enum_show(&ikev2_notify_protocol_id_names, rekey_notify->isan_protoid));",
          "",
          "[Added Lines]",
          "4185:   esb_buf b;",
          "4189:      enum_show(&ikev2_notify_protocol_id_names, rekey_notify->isan_protoid, &b));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5691:      }",
          "5693:      dbg(\"delete %s SA(0x%08\" PRIx32 \")\",",
          "5694:          enum_show(&ikev2_delete_protocol_id_names,",
          "5696:          ntohl((uint32_t) spi));",
          "",
          "[Removed Lines]",
          "5695:             v2del->isad_protoid),",
          "",
          "[Added Lines]",
          "5702:      esb_buf b;",
          "5705:             v2del->isad_protoid, &b),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5713:             spi);",
          "5715:      if (dst == NULL) {",
          "5716:       log_state(RC_LOG, &ike->sa,",
          "5717:          \"received delete request for %s SA(0x%08\" PRIx32 \") but corresponding state not found\",",
          "5718:          enum_show(&ikev2_delete_protocol_id_names,",
          "5720:          ntohl((uint32_t)spi));",
          "5721:      } else {",
          "5722:       dbg(\"our side SPI that needs to be deleted: %s SA(0x%08\" PRIx32 \")\",",
          "5723:           enum_show(&ikev2_delete_protocol_id_names,",
          "5727:       dst->sa.st_dont_send_delete = true;",
          "",
          "[Removed Lines]",
          "5719:             v2del->isad_protoid),",
          "5724:              v2del->isad_protoid), ntohl((uint32_t)spi));",
          "",
          "[Added Lines]",
          "5726:       esb_buf b;",
          "5730:             v2del->isad_protoid, &b),",
          "5733:       esb_buf b;",
          "5736:              v2del->isad_protoid, &b),",
          "5737:           ntohl((uint32_t)spi));",
          "",
          "---------------"
        ],
        "programs/pluto/ikev2_spdb_struct.c||programs/pluto/ikev2_spdb_struct.c": [
          "File: programs/pluto/ikev2_spdb_struct.c -> programs/pluto/ikev2_spdb_struct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1632:      esb_buf buf;",
          "1633:      pexpect_fail(logger, HERE,",
          "1634:            \"accepted IKEv2 proposal contains unexpected ENCRYPT %s\",",
          "1637:      return false;",
          "1638:     }",
          "1639:     ta.ta_encrypt = encrypt;",
          "",
          "[Removed Lines]",
          "1635:            enum_showb(&ikev2_trans_type_encr_names,",
          "1636:         transform->id, &buf));",
          "",
          "[Added Lines]",
          "1635:            enum_show(&ikev2_trans_type_encr_names,",
          "1636:               transform->id, &buf));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1654:      esb_buf buf;",
          "1655:      pexpect_fail(logger, HERE,",
          "1656:            \"accepted IKEv2 proposal contains unexpected PRF %s\",",
          "1659:      return false;",
          "1660:     }",
          "1661:     ta.ta_prf = prf;",
          "",
          "[Removed Lines]",
          "1657:            enum_showb(&ikev2_trans_type_prf_names,",
          "1658:         transform->id, &buf));",
          "",
          "[Added Lines]",
          "1657:            enum_show(&ikev2_trans_type_prf_names,",
          "1658:               transform->id, &buf));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1674:      esb_buf buf;",
          "1675:      pexpect_fail(logger, HERE,",
          "1676:            \"accepted IKEv2 proposal contains unexpected INTEG %s\",",
          "1679:      return false;",
          "1680:     }",
          "1681:     ta.ta_integ = integ;",
          "",
          "[Removed Lines]",
          "1677:            enum_showb(&ikev2_trans_type_integ_names,",
          "1678:         transform->id, &buf));",
          "",
          "[Added Lines]",
          "1677:            enum_show(&ikev2_trans_type_integ_names,",
          "1678:               transform->id, &buf));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1695:      esb_buf buf;",
          "1696:      pexpect_fail(logger, HERE,",
          "1697:            \"accepted IKEv2 proposal contains unexpected DH %s\",",
          "1700:      return false;",
          "1701:     }",
          "1702:     ta.ta_dh = group;",
          "",
          "[Removed Lines]",
          "1698:            enum_showb(&oakley_group_names,",
          "1699:         transform->id, &buf));",
          "",
          "[Added Lines]",
          "1698:            enum_show(&oakley_group_names,",
          "1699:               transform->id, &buf));",
          "",
          "---------------"
        ],
        "programs/pluto/initiate.c||programs/pluto/initiate.c": [
          "File: programs/pluto/initiate.c -> programs/pluto/initiate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:   if (address_is_unset(&c->spd.that.host_addr) ||",
          "365:       address_is_any(&c->spd.that.host_addr)) {",
          "366:    if (c->dnshostname != NULL) {",
          "367:     llog(RC_NOPEERIP, c->logger,",
          "368:          \"cannot initiate connection without resolved dynamic peer IP address, will keep retrying (kind=%s)\",",
          "370:     dbg(\"%s() connection '%s' +POLICY_UP\", __func__, c->name);",
          "371:     c->policy |= POLICY_UP;",
          "372:     return true;",
          "373:    } else {",
          "374:     llog(RC_NOPEERIP, c->logger,",
          "375:          \"cannot initiate connection (serial \"PRI_CO\") without knowing peer IP address (kind=%s)\",",
          "376:          pri_co(c->serialno),",
          "378:    }",
          "379:    return false;",
          "380:   }",
          "",
          "[Removed Lines]",
          "369:          enum_show(&connection_kind_names, c->kind));",
          "377:          enum_show(&connection_kind_names, c->kind));",
          "",
          "[Added Lines]",
          "367:     esb_buf b;",
          "370:          enum_show(&connection_kind_names, c->kind, &b));",
          "375:     esb_buf b;",
          "379:          enum_show(&connection_kind_names, c->kind, &b));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:       address_is_any(&c->spd.that.host_addr)) &&",
          "386:      (c->policy & POLICY_IKEV2_ALLOW_NARROWING) ) {",
          "387:   if (c->dnshostname != NULL) {",
          "388:    llog(RC_NOPEERIP, c->logger,",
          "389:         \"cannot initiate connection without resolved dynamic peer IP address, will keep retrying (kind=%s, narrowing=%s)\",",
          "391:         bool_str((c->policy & POLICY_IKEV2_ALLOW_NARROWING) != LEMPTY));",
          "392:    dbg(\"%s() connection '%s' +POLICY_UP\", __func__, c->name);",
          "393:    c->policy |= POLICY_UP;",
          "394:    return true;",
          "395:   } else {",
          "396:    llog(RC_NOPEERIP, c->logger,",
          "397:         \"cannot initiate connection without knowing peer IP address (kind=%s narrowing=%s)\",",
          "399:         bool_str((c->policy & POLICY_IKEV2_ALLOW_NARROWING) != LEMPTY));",
          "400:    return false;",
          "401:   }",
          "",
          "[Removed Lines]",
          "390:         enum_show(&connection_kind_names, c->kind),",
          "398:         enum_show(&connection_kind_names, c->kind),",
          "",
          "[Added Lines]",
          "390:    esb_buf b;",
          "393:         enum_show(&connection_kind_names, c->kind, &b),",
          "399:    esb_buf b;",
          "402:         enum_show(&connection_kind_names, c->kind, &b),",
          "",
          "---------------"
        ],
        "programs/pluto/kernel.c||programs/pluto/kernel.c": [
          "File: programs/pluto/kernel.c -> programs/pluto/kernel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:  if (NEVER_NEGOTIATE(c->policy)) {",
          "531:   jam(buf, \"+NEVER_NEGOTIATE\");",
          "532:  }",
          "536:  jam(buf, \"PLUTO_CONN_ADDRFAMILY='ipv%d' \", address_type(&sr->this.host_addr)->ip_version);",
          "537:  jam(buf, \"XAUTH_FAILED=%d \", (st != NULL && st->st_xauth_soft) ? 1 : 0);",
          "",
          "[Removed Lines]",
          "533:  jam(buf, \"'\");",
          "535:  jam(buf, \"PLUTO_CONN_KIND='%s' \", enum_show(&connection_kind_names, c->kind));",
          "",
          "[Added Lines]",
          "533:  jam(buf, \"' \");",
          "535:  jam(buf, \"PLUTO_CONN_KIND='\");",
          "536:  jam_enum(buf, &connection_kind_names, c->kind);",
          "537:  jam(buf,\"' \");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "893: static enum routability could_route(struct connection *c, struct logger *logger)",
          "894: {",
          "895:  dbg(\"could_route called for %s; kind=%s that.has_client=%s oppo=%s this.host_port=%u\",",
          "896:      c->name,",
          "898:      bool_str(c->spd.that.has_client),",
          "899:      bool_str(c->policy & POLICY_OPPORTUNISTIC),",
          "900:      c->spd.this.host_port);",
          "",
          "[Removed Lines]",
          "897:      enum_show(&connection_kind_names, c->kind),",
          "",
          "[Added Lines]",
          "898:  esb_buf b;",
          "901:      enum_show(&connection_kind_names, c->kind, &b),",
          "",
          "---------------"
        ],
        "programs/pluto/keys.c||programs/pluto/keys.c": [
          "File: programs/pluto/keys.c -> programs/pluto/keys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "831:    id_buf idb;",
          "832:    show_comment(s, \"       %s '%s'\",",
          "835:          str_id(&key->id, &idb));",
          "837:    if (key->issuer.len > 0) {",
          "",
          "[Removed Lines]",
          "833:          enum_show(&ike_idtype_names,",
          "834:             key->id.kind),",
          "",
          "[Added Lines]",
          "832:    esb_buf b;",
          "834:          enum_show(&ike_idtype_names, key->id.kind, &b),",
          "",
          "---------------"
        ],
        "programs/pluto/packet.c||programs/pluto/packet.c": [
          "File: programs/pluto/packet.c -> programs/pluto/packet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1888:     const char *name = enum_name(fp->desc, last_enum);",
          "1889:     if (name == NULL) {",
          "1891:     }",
          "1892:     DBG_log(\"   %s: %s%s (0x%jx)\",",
          "1893:      fp->name,",
          "",
          "[Removed Lines]",
          "1890:      name = enum_show(fp->desc, n);",
          "",
          "[Added Lines]",
          "1890:     esb_buf nb;",
          "1893:      name = enum_show(fp->desc, n, &nb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1901:    case ft_mnpc:",
          "1902:    case ft_pnpc:",
          "1903:    case ft_lss:",
          "1904:     last_enum = n;",
          "1905:     DBG_log(\"   %s: %s (0x%jx)\",",
          "1906:      fp->name,",
          "1908:      n);",
          "1909:     break;",
          "1911:    case ft_loose_enum_enum:",
          "1912:    {",
          "",
          "[Removed Lines]",
          "1907:      enum_show(fp->desc, n),",
          "",
          "[Added Lines]",
          "1907:    {",
          "1909:     esb_buf nb;",
          "1912:      enum_show(fp->desc, n, &nb),",
          "1915:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2248:       outs->last_substructure.sd->name,",
          "2249:       outs->last_substructure.fp->name,",
          "2253:       outs->last_substructure.loc[0],",
          "2257:       outs->desc->nsst);",
          "2258:   pexpect(outs->last_substructure.loc[0] == outs->desc->nsst);",
          "2259:  }",
          "",
          "[Removed Lines]",
          "2251:       enum_showb(outs->last_substructure.fp->desc,",
          "2252:           outs->last_substructure.loc[0], &locb),",
          "2255:       enum_showb(outs->last_substructure.fp->desc,",
          "2256:           outs->desc->nsst, &nsstb),",
          "",
          "[Added Lines]",
          "2257:       enum_show(outs->last_substructure.fp->desc,",
          "2258:          outs->last_substructure.loc[0], &locb),",
          "2261:       enum_show(outs->last_substructure.fp->desc,",
          "2262:          outs->desc->nsst, &nsstb),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2304:   pexpect_fail(outs->outs_logger, HERE,",
          "2305:         \"next payload chain: ignoring supplied '%s'.'%s' value %d:%s\",",
          "2306:         sd->name, fp->name, n,",
          "2308:   n = ISAKMP_NEXT_NONE;",
          "2309:  }",
          "",
          "[Removed Lines]",
          "2307:         enum_showb(fp->desc, n, &npb));",
          "",
          "[Added Lines]",
          "2313:         enum_show(fp->desc, n, &npb));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2325:  if (outs->container == NULL) {",
          "2326:   esb_buf npb;",
          "2327:   dbg(\"next payload chain: no previous for current %s (%d:%s); assumed to be fake\",",
          "2329:   return;",
          "2330:  }",
          "",
          "[Removed Lines]",
          "2328:       sd->name, sd->pt, enum_showb(fp->desc, sd->pt, &npb));",
          "",
          "[Added Lines]",
          "2334:       sd->name, sd->pt, enum_show(fp->desc, sd->pt, &npb));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2367:   esb_buf npb;",
          "2368:   dbg(\"next payload chain: using supplied v2SKF '%s'.'%s' value %d:%s\",",
          "2369:        sd->name, fp->name, n,",
          "2371:  } else if (n != ISAKMP_NEXT_NONE) {",
          "2372:   esb_buf npb;",
          "2373:   pexpect_fail(outs->outs_logger, HERE,",
          "2374:         \"next payload chain: ignoring supplied '%s'.'%s' value %d:%s\",",
          "2375:         sd->name, fp->name, n,",
          "2377:   n = ISAKMP_NEXT_NONE;",
          "2378:  }",
          "",
          "[Removed Lines]",
          "2370:        enum_showb(fp->desc, n, &npb));",
          "2376:         enum_showb(fp->desc, n, &npb));",
          "",
          "[Added Lines]",
          "2376:        enum_show(fp->desc, n, &npb));",
          "2382:         enum_show(fp->desc, n, &npb));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2383:  dbg(\"next payload chain: setting previous '%s'.'%s' to current %s (%d:%s)\",",
          "2384:       message->next_payload_chain.sd->name,",
          "2385:       message->next_payload_chain.fp->name,",
          "",
          "[Removed Lines]",
          "2386:       sd->name, sd->pt, enum_showb(fp->desc, sd->pt, &npb));",
          "",
          "[Added Lines]",
          "2392:       sd->name, sd->pt, enum_show(fp->desc, sd->pt, &npb));",
          "",
          "---------------"
        ],
        "programs/pluto/timer.c||programs/pluto/timer.c": [
          "File: programs/pluto/timer.c -> programs/pluto/timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   passert(st != NULL);",
          "150:   dbg(\"handling event %s for %s state #%lu\",",
          "152:       (st->st_clonedfrom == SOS_NOBODY) ? \"parent\" : \"child\",",
          "153:       st->st_serialno);",
          "",
          "[Removed Lines]",
          "151:       enum_show(&timer_event_names, type),",
          "",
          "[Added Lines]",
          "150:   esb_buf b;",
          "152:       enum_show(&timer_event_names, type, &b),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:   break;",
          "204:  case EVENT_v2_RELEASE_WHACK:",
          "205:   dbg(\"%s releasing whack for #%lu %s (sock=\"PRI_FD\")\",",
          "207:       st->st_serialno,",
          "208:       st->st_state->name,",
          "209:       pri_fd(st->st_logger->object_whackfd));",
          "210:   release_pending_whacks(st, \"release whack\");",
          "211:   break;",
          "213:  case EVENT_RETRANSMIT:",
          "214:   dbg(\"IKEv%d retransmit event\", st->st_ike_version);",
          "",
          "[Removed Lines]",
          "206:       enum_show(&timer_event_names, type),",
          "",
          "[Added Lines]",
          "206:  {",
          "207:   esb_buf b;",
          "209:       enum_show(&timer_event_names, type, &b),",
          "215:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473:    dbg(\"state #%lu has no .%s to delete\", st->st_serialno,",
          "474:        l->name);",
          "475:   } else {",
          "476:    dbg(\"state #%lu deleting .%s %s\",",
          "477:        st->st_serialno, l->name,",
          "480:    delete_pluto_event(l->event);",
          "481:   }",
          "482:  }",
          "",
          "[Removed Lines]",
          "478:        enum_show(&timer_event_names,",
          "479:           (*l->event)->ev_type));",
          "",
          "[Added Lines]",
          "480:    esb_buf b;",
          "483:        enum_show(&timer_event_names, (*l->event)->ev_type, &b));",
          "",
          "---------------"
        ],
        "programs/pluto/unpack.c||programs/pluto/unpack.c": [
          "File: programs/pluto/unpack.c -> programs/pluto/unpack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   }",
          "121: #endif",
          "122:   if (memchr(id_pbs->cur, '\\0', left) != NULL) {",
          "123:    return diag(\"Phase 1 (Parent)ID Payload of type %s contains a NUL\",",
          "125:   }",
          "127:   peer->name = chunk2(id_pbs->cur, left);",
          "",
          "[Removed Lines]",
          "124:         enum_show(&ike_idtype_names, kind));",
          "",
          "[Added Lines]",
          "123:    esb_buf b;",
          "125:         enum_show(&ike_idtype_names, kind, &b));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:  case ID_FQDN:",
          "131:   if (memchr(id_pbs->cur, '\\0', left) != NULL) {",
          "132:    return diag(\"Phase 1 (Parent)ID Payload of type %s contains a NUL\",",
          "134:   }",
          "136:   peer->name = chunk2(id_pbs->cur, left);",
          "",
          "[Removed Lines]",
          "133:         enum_show(&ike_idtype_names, kind));",
          "",
          "[Added Lines]",
          "133:    esb_buf b;",
          "135:         enum_show(&ike_idtype_names, kind, &b));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:   break;",
          "161:  default:",
          "162:   return diag(\"Unsupported identity type (%s) in Phase 1 (Parent) ID Payload\",",
          "164:  }",
          "166:  return NULL;",
          "",
          "[Removed Lines]",
          "163:        enum_show(&ike_idtype_names, kind));",
          "",
          "[Added Lines]",
          "164:  {",
          "165:   esb_buf b;",
          "167:        enum_show(&ike_idtype_names, kind, &b));",
          "168:  }",
          "",
          "---------------"
        ],
        "programs/pluto/x509.c||programs/pluto/x509.c": [
          "File: programs/pluto/x509.c -> programs/pluto/x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "727:  }",
          "729:  default:",
          "730:   llog(RC_LOG_SERIOUS, logger,",
          "731:        \"unhandled ID type %s; cannot match peer's certificate with expected peer ID\",",
          "733:   return false;",
          "734:  }",
          "735: }",
          "",
          "[Removed Lines]",
          "732:        enum_show(&ike_idtype_names, peer_id->kind));",
          "",
          "[Added Lines]",
          "730:  {",
          "731:   esb_buf b;",
          "734:        enum_show(&ike_idtype_names, peer_id->kind, &b));",
          "737:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "970:      str_dn_or_null(ca_name, \"%any\", &buf));",
          "971:    }",
          "972:   } else {",
          "973:    llog(RC_LOG_SERIOUS, logger,",
          "976:   }",
          "977:  }",
          "978: }",
          "",
          "[Removed Lines]",
          "974:         \"ignoring %s certificate request payload\",",
          "975:         enum_show(&ike_cert_type_names, cr->isacr_type));",
          "",
          "[Added Lines]",
          "976:    esb_buf b;",
          "978:         \"ignoring %s certificate request payload\",",
          "979:         enum_show(&ike_cert_type_names, cr->isacr_type, &b));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1019:    break;",
          "1020:   }",
          "1021:   default:",
          "1022:    llog(RC_LOG_SERIOUS, logger,",
          "1025:   }",
          "1026:  }",
          "1027: }",
          "",
          "[Removed Lines]",
          "1023:         \"ignoring CERTREQ payload of unsupported type %s\",",
          "1024:         enum_show(&ikev2_cert_type_names, cr->isacertreq_enc));",
          "",
          "[Added Lines]",
          "1026:   {",
          "1027:    esb_buf b;",
          "1029:         \"ignoring CERTREQ payload of unsupported type %s\",",
          "1030:         enum_show(&ikev2_cert_type_names, cr->isacertreq_enc, &b));",
          "1031:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a53294363a77ac57f076cb24b4c2557d4d0611a",
      "candidate_info": {
        "commit_hash": "6a53294363a77ac57f076cb24b4c2557d4d0611a",
        "repo": "libreswan/libreswan",
        "commit_url": "https://github.com/libreswan/libreswan/commit/6a53294363a77ac57f076cb24b4c2557d4d0611a",
        "files": [
          "programs/pluto/ikev1.c"
        ],
        "message": "security: Fix for CVE-2020-1763\n\npluto will crash on a null pointer dereference when trying to log an error\nfor an IKEv1 packet containing bogus information and/or flags.\n\nSigned-off-by: Paul Wouters <pwouters@redhat.com>",
        "before_after_code_files": [
          "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
          ],
          "candidate": [
            "programs/pluto/ikev1.c||programs/pluto/ikev1.c"
          ]
        }
      },
      "candidate_diff": {
        "programs/pluto/ikev1.c||programs/pluto/ikev1.c": [
          "File: programs/pluto/ikev1.c -> programs/pluto/ikev1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2181:       \"%smessage ignored because it contains a payload type (%s) unexpected by state %s\",",
          "2182:       excuse,",
          "2183:       enum_show(&ikev1_payload_names, np),",
          "2185:      if (!md->encrypted) {",
          "2186:       SEND_NOTIFICATION(INVALID_PAYLOAD_TYPE);",
          "2187:      }",
          "",
          "[Removed Lines]",
          "2184:       st->st_state->name);",
          "",
          "[Added Lines]",
          "2184:       finite_states[smc->state]->name);",
          "",
          "---------------"
        ]
      }
    }
  ]
}