{
  "cve_id": "CVE-2020-22874",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjArraySizer in jsish before 3.0.8, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "858da537bde4de9d8c92466d5a866505310bc328",
  "patch_info": {
    "commit_hash": "858da537bde4de9d8c92466d5a866505310bc328",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/858da537bde4de9d8c92466d5a866505310bc328",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCData.c",
      "src/jsiInt.h",
      "src/jsiInterp.c",
      "src/jsiObj.c",
      "src/jsiValue.c",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.8\": Address Array alloc sizing issues from issue \"integer overflow and buffer overflow #5\".\n\nFossilOrigin-Name: 8c46a1d465b358110dcfb271721d35fe843a1b52f2fa24ccc10094eb8aaf6fe4",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCData.c||src/jsiCData.c",
      "src/jsiInt.h||src/jsiInt.h",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiObj.c||src/jsiObj.c",
      "src/jsiValue.c||src/jsiValue.c",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 8",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:             rc = jsi_ArrayFlatSub(interp, nobj, t , depth-1);",
      "268:         else if (!Jsi_ValueIsUndef(interp, t))",
      "269:             Jsi_ObjArrayAdd(interp, nobj, t);",
      "271:             return Jsi_LogError(\"array size exceeded\");",
      "272:     }",
      "273:     return rc;",
      "",
      "[Removed Lines]",
      "270:         if ((++n + clen)>interp->maxArrayList)",
      "",
      "[Added Lines]",
      "270:         if ((uint)(++n + clen)>interp->maxArrayList)",
      "",
      "---------------"
    ],
    "src/jsiCData.c||src/jsiCData.c": [
      "File: src/jsiCData.c -> src/jsiCData.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1276:             sf->flags |= JSI_OPT_BITSET_ENUM;",
      "1277:         }",
      "1278:         if (sf->arrSize) {",
      "1281:                 goto bail;",
      "1282:             }",
      "1283:             if (sf->bits || isEnum) {",
      "",
      "[Removed Lines]",
      "1279:             if (sf->arrSize>MAX_ARRAY_LIST) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, MAX_ARRAY_LIST);",
      "",
      "[Added Lines]",
      "1279:             if (sf->arrSize>interp->maxArrayList) {",
      "1280:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiInt.h||src/jsiInt.h": [
      "File: src/jsiInt.h -> src/jsiInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:     Jsi_Value *Top_object;",
      "1260:     Jsi_ScopeStrs *scopes[JSI_MAX_SCOPE];",
      "1261:     int cur_scope;",
      "1263:     int delRBCnt;",
      "1264:     Jsi_Func *activeFunc;  // Currently active function call.",
      "1265:     Jsi_Func *prevActiveFunc;  // Prev active function call.",
      "",
      "[Removed Lines]",
      "1262:     int maxArrayList;",
      "",
      "[Added Lines]",
      "1262:     uint maxArrayList;",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:     JSI_OPT(INT,   Jsi_Interp, lockTimeout, .help=\"Thread time-out for mutex lock acquires (milliseconds)\" ),",
      "101:     JSI_OPT(CUSTOM,Jsi_Interp, logOpts,     .help=\"Options for log output to add file/line/time\", .flags=0, .custom=Jsi_Opt_SwitchSuboption, .data=jsi_InterpLogOptions),",
      "102:     JSI_OPT(INT,   Jsi_Interp, maxDepth,    .help=\"Depth limit of recursive function calls (1000)\", .flags=JSI_OPT_LOCKSAFE),",
      "104:     JSI_OPT(INT,   Jsi_Interp, maxIncDepth, .help=\"Maximum allowed source/require nesting depth (50)\", .flags=JSI_OPT_LOCKSAFE),",
      "105:     JSI_OPT(INT,   Jsi_Interp, maxInterpDepth,.help=\"Maximum nested subinterp create depth (10)\", .flags=JSI_OPT_LOCKSAFE),",
      "106:     JSI_OPT(INT,   Jsi_Interp, maxUserObjs, .help=\"Maximum number of 'new' object calls, eg. File, RegExp, etc\", .flags=JSI_OPT_LOCKSAFE ),",
      "",
      "[Removed Lines]",
      "103:     JSI_OPT(INT,   Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "[Added Lines]",
      "103:     JSI_OPT(UINT,  Jsi_Interp, maxArrayList,.help=\"Maximum array convertable to list (100000)\", .flags=JSI_OPT_LOCKSAFE),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1146:     }",
      "1147:     interp->maxDepth = JSI_MAX_EVAL_DEPTH;",
      "1148:     interp->maxIncDepth = JSI_MAX_INCLUDE_DEPTH;",
      "1149:     interp->typeWarnMax = 50;",
      "1150:     interp->subOpts.dblPrec = __DBL_DECIMAL_DIG__-1;",
      "1151:     interp->subOpts.prompt = \"$ \";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1149:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1482: #endif",
      "1483:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
      "1484:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
      "1486:     if (!jsiIntData.isInit) {",
      "1487:         jsiIntData.isInit = 1;",
      "1488:         jsi_InitValue(interp, 0);",
      "",
      "[Removed Lines]",
      "1485:     interp->maxArrayList = MAX_ARRAY_LIST;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/jsiObj.c||src/jsiObj.c": [
      "File: src/jsiObj.c -> src/jsiObj.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:         if (!cp || !isdigit(*cp))",
      "77:             return JSI_OK;",
      "78:         n = (int)strtol(cp, &ep, 0);",
      "80:             return JSI_OK;",
      "81:         hPtr->f.bits.isarrlist = 1;",
      "82:         if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
      "",
      "[Removed Lines]",
      "79:         if (n<0 || n >= interp->maxArrayList)",
      "",
      "[Added Lines]",
      "79:         if (n<0 || (uint)n >= interp->maxArrayList)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "415: int Jsi_ObjArraySizer(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
      "416: {",
      "418:     assert(obj->isarrlist);",
      "419:     if (mod>1)",
      "420:         nsiz = nsiz + ((mod-1) - (nsiz + mod - 1)%mod);",
      "423:         return 0;",
      "424:     }",
      "425:     if (len >= obj->arrMaxSize) {",
      "",
      "[Removed Lines]",
      "417:     int nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (nsiz > MAX_ARRAY_LIST) {",
      "422:         Jsi_LogError(\"array size too large\");",
      "",
      "[Added Lines]",
      "417:     uint nsiz = len + 1, mod = ALLOC_MOD_SIZE;",
      "421:     if (len >= interp->maxArrayList || nsiz > interp->maxArrayList) {",
      "422:         Jsi_LogError(\"array size too big: %u >= %u\", len, interp->maxArrayList);",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:     }",
      "1040:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
      "1041:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
      "1042:     }",
      "",
      "[Removed Lines]",
      "1039:     if (arrayindex >= 0 && arrayindex < MAX_ARRAY_LIST &&",
      "",
      "[Added Lines]",
      "1039:     if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1373:     Jsi_Obj *obj = target->d.obj;",
      "1375:     if (obj->isarrlist) {",
      "1377:             Jsi_ObjArraySet(interp, obj, val, key);",
      "1378:             return JSI_OK;",
      "1379:         }",
      "",
      "[Removed Lines]",
      "1376:         if (key >= 0 && key < interp->maxArrayList) {",
      "",
      "[Added Lines]",
      "1376:         if (key >= 0 && (uint)key < interp->maxArrayList) {",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "633: <tr><td>lockTimeout</td><td><i>INT</i></td><td>Thread time-out for mutex lock acquires (milliseconds).</td><td><i></i></td></tr>",
      "634: <tr><td>logOpts</td><td><i><a href='#logOptsOptions'>options</a></i></td><td>Options for log output to add file/line/time.</td><td><i></i></td></tr>",
      "635: <tr><td>maxDepth</td><td><i>INT</i></td><td>Depth limit of recursive function calls (1000).</td><td><i></i></td></tr>",
      "637: <tr><td>maxIncDepth</td><td><i>INT</i></td><td>Maximum allowed source/require nesting depth (50).</td><td><i></i></td></tr>",
      "638: <tr><td>maxInterpDepth</td><td><i>INT</i></td><td>Maximum nested subinterp create depth (10).</td><td><i></i></td></tr>",
      "639: <tr><td>maxUserObjs</td><td><i>INT</i></td><td>Maximum number of 'new' object calls, eg. File, RegExp, etc.</td><td><i></i></td></tr>",
      "",
      "[Removed Lines]",
      "636: <tr><td>maxArrayList</td><td><i>INT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "[Added Lines]",
      "636: <tr><td>maxArrayList</td><td><i>UINT</i></td><td>Maximum array convertable to list (100000).</td><td><i></i></td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "68c2141cdf979072b01ec5f6ff99796419a56d1f",
      "candidate_info": {
        "commit_hash": "68c2141cdf979072b01ec5f6ff99796419a56d1f",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/68c2141cdf979072b01ec5f6ff99796419a56d1f",
        "files": [
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiObj.c",
          "src/jsiProto.c",
          "src/jsiStubs.h",
          "src/jsiValue.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.1.5\": refactor ObjInsert\n\nFossilOrigin-Name: c9ee31ce057502975b2f91ecb267d5ad74bab4f885d773549ebc059bb8f923b7",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiObj.c||src/jsiObj.c",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 5",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3795:     #endif",
          "3799:         f = func->d.obj->d.fobj->func;",
          "3801:         if (cmdSpec->name)",
          "",
          "[Removed Lines]",
          "3798:         Jsi_ValueInsertFixed(interp, (iscons?NULL:proto), cmdSpec->name, func);",
          "",
          "[Added Lines]",
          "3798:         Jsi_ValueInsertFixed(interp, (iscons||!proto?interp->csc:proto), cmdSpec->name, func);",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1037:     return JSI_OK;",
          "1038: }",
          "1040: Jsi_RC jsiEvalCodeSub(jsi_Pstate *ps, Jsi_OpCodes *opcodes,",
          "1041:      jsi_ScopeChain *scope, Jsi_Value *currentScope,",
          "1042:      Jsi_Value *_this, Jsi_Value *vret)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1041: static Jsi_RC jsi_ObjArraySetDup(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int n)",
          "1042: {",
          "1043:     if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "1044:         return JSI_ERROR;",
          "1045:     if (value->vt == JSI_VT_OBJECT)",
          "1046:         jsi_ObjInsertObjCheck(interp, obj, value, 1);",
          "1048:     if (obj->arr[n])",
          "1049:     {",
          "1050:         Jsi_ValueCopy(interp, obj->arr[n], value);",
          "1051:         return JSI_OK;",
          "1052:     }",
          "1053:     Assert(obj->arrCnt<=obj->arrMaxSize);",
          "1054:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "1055:     int m;",
          "1056:     Jsi_ValueCopy(interp,v, value);",
          "1057:     obj->arr[n] = v;",
          "1058:     m = Jsi_ObjGetLength(interp, obj);",
          "1059:     if ((n+1) > m)",
          "1060:        Jsi_ObjSetLength(interp, obj, n+1);",
          "1061:     return JSI_OK;",
          "1062: }",
          "1065: static Jsi_RC jsi_ValueObjKeyAssign(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *keyval, Jsi_Value *value, int flag)",
          "1066: {",
          "1068:     const char *kstr = NULL;",
          "1070:     int arrayindex = -1;",
          "1071:     if (keyval->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(keyval->d.num) && keyval->d.num >= 0) {",
          "1072:         arrayindex = (int)keyval->d.num;",
          "1073:         if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "1074:             target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1075:             return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "1076:         }",
          "1077:     }",
          "1078:     Jsi_String *jstr = jsi_ValueString(keyval);",
          "1079:     if (jstr)",
          "1080:         kstr = jstr->str;",
          "1081:     else",
          "1082:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1084: #if (defined(JSI_HAS___PROTO__) && JSI_HAS___PROTO__==2)",
          "1085:     if (kstr[0] == '_' && Jsi_Strcmp(kstr, \"__proto__\")==0) {",
          "1086:         Jsi_Obj *obj = target->d.obj;",
          "1087:         obj->__proto__ = Jsi_ValueDup(interp, value);",
          "1089:         return JSI_OK;",
          "1090:     }",
          "1091: #endif",
          "1092:     Jsi_Value *v = Jsi_ValueDup(interp, value);",
          "1094:     if (Jsi_ObjInsert(interp, target->d.obj, kstr, v, flag) != JSI_OK) {",
          "1095:         Jsi_DecrRefCount(interp, v);",
          "1096:         return JSI_ERROR;",
          "1097:     }",
          "1098:     Jsi_DecrRefCount(interp, v);",
          "1099:     return JSI_OK;",
          "1100: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1226:                     if (v3->vt == JSI_VT_OBJECT) {",
          "1227:                         if (strict && sval->vt == JSI_VT_UNDEF)",
          "1228:                             rc = jsiValueAssignCheck(interp, sval, lop);",
          "1233:                         rc = Jsi_LogError(\"assign to a non-exist object\");",
          "1234:                     jsiClearStack(interp,3);",
          "1235:                     Jsi_ValueCopy(interp,v3, sval);",
          "",
          "[Removed Lines]",
          "1229:                         if (!jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0))",
          "1230:                             rc = JSI_ERROR;",
          "1231:                         jsi_ValueDebugLabel(sval, \"assign\", NULL);",
          "1232:                     } else if (strict)",
          "",
          "[Added Lines]",
          "1292:                         if (rc == JSI_OK)",
          "1293:                             rc = jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0);",
          "1294:                     } else",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1465: extern Jsi_Obj *jsi_UserObjFromName(Jsi_Interp *interp, const char *name);",
          "1467: extern Jsi_RC Zvfs_Mount( Jsi_Interp *interp, Jsi_Value *archive, Jsi_Value *mount, Jsi_Value **ret);",
          "1469: extern void jsi_ValueSubscriptLen(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value **ret, int right_val);",
          "1470: extern Jsi_Value* jsi_ValueSubscript(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value **ret);",
          "1472: extern void jsi_ValueObjGetKeys(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *ret, bool isof);",
          "1473: extern Jsi_Value* jsi_ObjArrayLookup(Jsi_Interp *interp, Jsi_Obj *obj, const char *key);",
          "1474: extern Jsi_Value* jsi_ProtoObjValueNew1(Jsi_Interp *interp, const char *name);",
          "",
          "[Removed Lines]",
          "1468: extern Jsi_Value* jsi_ObjArraySetDup(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex);",
          "1471: extern Jsi_Value* jsi_ValueObjKeyAssign(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value *value, int flag);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:     return JSI_OK;",
          "403: }",
          "429: int Jsi_ObjIncrRefCount(Jsi_Interp *interp, Jsi_Obj *obj) {",
          "430:     jsi_DebugObj(obj,\"Incr\", jsi_DebugValueCallIdx(), interp);",
          "431:     SIGASSERT(obj,OBJ);",
          "",
          "[Removed Lines]",
          "406: Jsi_Value *jsi_ObjArraySetDup(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int n)",
          "407: {",
          "408:     if (Jsi_ObjArraySizer(interp, obj, n) <= 0)",
          "409:         return NULL;",
          "410:     if (value->vt == JSI_VT_OBJECT)",
          "411:         jsi_ObjInsertObjCheck(interp, obj, value, 1);",
          "413:     if (obj->arr[n])",
          "414:     {",
          "415:         Jsi_ValueCopy(interp, obj->arr[n], value);",
          "416:         return obj->arr[n];",
          "417:     }",
          "418:     Assert(obj->arrCnt<=obj->arrMaxSize);",
          "419:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "420:     int m;",
          "421:     Jsi_ValueCopy(interp,v, value);",
          "422:     obj->arr[n] = v;",
          "423:     m = Jsi_ObjGetLength(interp, obj);",
          "424:     if ((n+1) > m)",
          "425:        Jsi_ObjSetLength(interp, obj, n+1);",
          "426:     return v;",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:     if (!v || v->vt != JSI_VT_OBJECT || v->d.obj->ot != JSI_OT_OBJECT)",
          "544:         return Jsi_LogError(\"arg1: expected object\");",
          "545:     Jsi_Obj *obj = v->d.obj;",
          "546:     Jsi_ValueMakeObject(interp, ret, obj);",
          "547:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "548:     for (i=1; i<argc; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "546:     Jsi_RC rc = JSI_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:         if (!vs || vs->vt != JSI_VT_OBJECT || vs->d.obj->ot != JSI_OT_OBJECT)",
          "553:             return Jsi_LogError(\"arg%d: expected object\", i+1);",
          "554:         for (tPtr = Jsi_TreeSearchFirst(vs->d.obj->tree, &search, 0, NULL);",
          "556:             Jsi_Value *v2 = (Jsi_Value *)Jsi_TreeValueGet(tPtr);",
          "557:             if (v2 && v2->f.bits.dontenum == 0)",
          "559:         }",
          "560:         Jsi_TreeSearchDone(&search);",
          "561:     }",
          "563: }",
          "565: #if (JSI_HAS___PROTO__==1)",
          "",
          "[Removed Lines]",
          "555:             tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "558:                 Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v2, 0);",
          "562:     return JSI_OK;",
          "",
          "[Added Lines]",
          "556:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "559:                 rc = Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v2, 0);",
          "563:     return rc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "662:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "663:             Jsi_Value *v = (Jsi_Value *)Jsi_TreeValueGet(tPtr);",
          "664:             if (v && v->f.bits.dontenum == 0)",
          "666:         }",
          "667:         Jsi_TreeSearchDone(&search);",
          "668:     }",
          "",
          "[Removed Lines]",
          "665:                 Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v, 0);",
          "",
          "[Added Lines]",
          "666:                 rc = Jsi_ObjInsert(interp, obj, (const char *)Jsi_TreeKeyGet(tPtr), v, 0);",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"10ffca3d3bdee8292c9eb47ab8422550\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"ddf4cf9ca32a54a3ab3b9a21ae172a78\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     const char*(*_Jsi_ObjTypeStr)(Jsi_Interp *interp, Jsi_Obj *obj);",
          "122:     Jsi_otype(*_Jsi_ObjTypeGet)(Jsi_Obj *obj);",
          "123:     void    (*_Jsi_ObjListifyArray)(Jsi_Interp *interp, Jsi_Obj *obj);",
          "127:     void   (*_Jsi_ObjFromDS)(Jsi_DString *dsPtr, Jsi_Obj *obj);",
          "128:     Jsi_Value*(*_Jsi_ValueNew)(Jsi_Interp *interp);",
          "129:     Jsi_Value*(*_Jsi_ValueNew1)(Jsi_Interp *interp);",
          "",
          "[Removed Lines]",
          "124:     Jsi_RC (*_Jsi_ObjArraySet)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex);",
          "125:     Jsi_RC (*_Jsi_ObjArrayAdd)(Jsi_Interp *interp, Jsi_Obj *o, Jsi_Value *v);",
          "126:     Jsi_RC (*_Jsi_ObjInsert)(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *nv, int flags);",
          "",
          "[Added Lines]",
          "124:     Jsi_RC  (*_Jsi_ObjArraySet)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *value, int arrayindex);",
          "125:     Jsi_RC  (*_Jsi_ObjArrayAdd)(Jsi_Interp *interp, Jsi_Obj *o, Jsi_Value *v);",
          "126:     Jsi_RC  (*_Jsi_ObjInsert)(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *nv, int flags);",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "976:     return nret;",
          "977: }",
          "1054: static Jsi_Value *jsi_ValueLookupBase(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, Jsi_Value **ret)",
          "1055: {",
          "1056:     if (!target)",
          "",
          "[Removed Lines]",
          "979: Jsi_Value *jsi_ValueObjKeyAssign(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *keyval, Jsi_Value *value, int flag)",
          "980: {",
          "982:     Jsi_Obj *obj = target->d.obj;",
          "983:     const char *kstr = NULL;",
          "985:     int arrayindex = -1;",
          "986:     if (keyval->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(keyval->d.num) && keyval->d.num >= 0) {",
          "987:         arrayindex = (int)keyval->d.num;",
          "988:         if (arrayindex >= 0 && (uint)arrayindex < interp->maxArrayList &&",
          "989:             target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "990:             return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "991:         }",
          "992:     }",
          "993:     Jsi_String *jstr = jsi_ValueString(keyval);",
          "994:     if (jstr)",
          "995:         kstr = jstr->str;",
          "996:     else",
          "997:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "998:     if (obj && obj->setters && value) {",
          "999:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1000:         if (v) {",
          "1001:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1002:             vargs[0] = value;",
          "1003:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1004:             Jsi_IncrRefCount(interp, value);",
          "1005:             Jsi_IncrRefCount(interp, vpargs);",
          "1006:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1007:             Jsi_DecrRefCount(interp, vpargs);",
          "1008:             Jsi_DecrRefCount(interp, value);",
          "1009:             Jsi_DecrRefCount(interp, retStr);",
          "1010:             if (rc != JSI_OK || flag&JSI_OM_DONTENUM)",
          "1011:                 return NULL;",
          "1012:             return keyval;// TODO, should not return this!!!",
          "1013:         }",
          "1014:     }",
          "1016:     if (obj && value && target->d.obj->freeze) {",
          "1017:         Jsi_Obj *obj = target->d.obj;",
          "1018:         Jsi_Value *v;",
          "1019:         char keyBuf[100], *keyStr = keyBuf;",
          "1020:         if (arrayindex>=0)",
          "1021:             snprintf(keyBuf, sizeof(keyBuf), \"%d\", arrayindex);",
          "1022:         else",
          "1023:             keyStr = Jsi_ValueString(interp, keyval, NULL);",
          "1024:         if (obj->freezeNoModify) {",
          "1025:             Jsi_LogError(\"frozen assign/modify key: %s\", keyStr);",
          "1026:             return NULL;",
          "1027:         }",
          "1028:         if (!keyStr || !(v = Jsi_ValueObjLookup(interp, target, keyStr, 0))) {",
          "1029:             Jsi_LogError(\"frozen assign key: %s\", keyStr);",
          "1030:             return NULL;",
          "1031:         }",
          "1032:     }",
          "1034: #if (defined(JSI_HAS___PROTO__) && JSI_HAS___PROTO__==2)",
          "1035:     if (Jsi_Strcmp(kstr, \"__proto__\")==0) {",
          "1036:         Jsi_Obj *obj = target->d.obj;",
          "1037:         obj->__proto__ = Jsi_ValueDup(interp, value);",
          "1039:         return obj->__proto__;",
          "1040:     }",
          "1041: #endif",
          "1042:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "1043:     if (value)",
          "1044:         Jsi_ValueCopy(interp, v, value);",
          "1046:     if (Jsi_ObjInsert(interp, target->d.obj, kstr, v, flag) != JSI_OK) {",
          "1047:         Jsi_DecrRefCount(interp, v);",
          "1048:         return NULL;",
          "1049:     }",
          "1050:     Jsi_DecrRefCount(interp, v);",
          "1051:     return v;",
          "1052: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1354:     return res;",
          "1355: }",
          "1357: Jsi_RC Jsi_ValueInsert(Jsi_Interp *interp, Jsi_Value *target, const char *key, Jsi_Value *val, int flags)",
          "1358: {",
          "1366:     target->f.flag |= flags;",
          "1370: }",
          "1372: Jsi_RC Jsi_ValueInsertArray(Jsi_Interp *interp, Jsi_Value *target, int key, Jsi_Value *val, int flags)",
          "1373: {",
          "1379:     Jsi_Obj *obj = target->d.obj;",
          "1381:     if (obj->isarrlist) {",
          "",
          "[Removed Lines]",
          "1359:     if (target == NULL)",
          "1360:         target = interp->csc;",
          "1361:     if (target->vt != JSI_VT_OBJECT) {",
          "1362:         if (interp->typeCheck.strict)",
          "1363:             Jsi_LogWarn(\"Target is not object\");",
          "1364:         return JSI_ERROR;",
          "1365:     }",
          "1367:     if (Jsi_ObjInsert(interp, target->d.obj, key, val, flags))",
          "1368:         return JSI_OK;",
          "1369:     return JSI_ERROR;",
          "1374:     if (target->vt != JSI_VT_OBJECT) {",
          "1375:         if (interp->typeCheck.strict)",
          "1376:             Jsi_LogWarn(\"Target is not object\");",
          "1377:         return JSI_ERROR;",
          "1378:     }",
          "",
          "[Added Lines]",
          "1285:     if (target->vt != JSI_VT_OBJECT)",
          "1286:         return Jsi_LogError(\"Target is not object\");",
          "1288:     return Jsi_ObjInsert(interp, target->d.obj, key, val, flags);",
          "1294:     if (target->vt != JSI_VT_OBJECT)",
          "1295:         return Jsi_LogError(\"Target is not object\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1387:     }",
          "1388:     char unibuf[JSI_MAX_NUMBER_STRING];",
          "1389:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
          "1392: }",
          "",
          "[Removed Lines]",
          "1390:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
          "1391:     return JSI_OK;",
          "",
          "[Added Lines]",
          "1307:     return Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1420: {",
          "1421:     Jsi_TreeEntry *hPtr;",
          "1422:     SIGASSERT(val, VALUE);",
          "1423:     if (val->vt == JSI_VT_OBJECT)",
          "1424:         jsi_ObjInsertObjCheck(interp, obj, val, 1);",
          "1425:     hPtr = Jsi_TreeObjSetValue(obj, key, val, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1340:     if (obj && obj->setters && val) {",
          "1341:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, key, 0);",
          "1342:         if (v) {",
          "1343:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1344:             vargs[0] = val;",
          "1345:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1346:             Jsi_IncrRefCount(interp, val);",
          "1347:             Jsi_IncrRefCount(interp, vpargs);",
          "1348:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1349:             Jsi_DecrRefCount(interp, vpargs);",
          "1350:             Jsi_DecrRefCount(interp, val);",
          "1351:             Jsi_DecrRefCount(interp, retStr);",
          "1352:             if (rc != JSI_OK || flags&JSI_OM_DONTENUM)",
          "1353:                 return JSI_ERROR;",
          "1354:             return JSI_OK;",
          "1355:         }",
          "1356:     }",
          "1358:     if (val && obj->freeze) {",
          "1359:         if (obj->freezeNoModify)",
          "1360:             return Jsi_LogError(\"frozen assign/modify key: %s\", key);",
          "1361:         if (!key || !(Jsi_TreeObjGetValue(obj, key, 0)))",
          "1362:             return Jsi_LogError(\"frozen assign key: %s\", key);",
          "1363:     }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "c24abfa77651e7a5d546d794803e0e3bc450ac62",
      "candidate_info": {
        "commit_hash": "c24abfa77651e7a5d546d794803e0e3bc450ac62",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/c24abfa77651e7a5d546d794803e0e3bc450ac62",
        "files": [
          "Makefile",
          "lib/web/jsi.js",
          "lws/Makefile",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiSocket.c"
        ],
        "message": "Pre-switch to liblws\n\nFossilOrigin-Name: 4336b90462cf6b333c8c85639c90ee127cba2396db523ab984373ba2a07ad939",
        "before_after_code_files": [
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiSocket.c||src/jsiSocket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:             if (pat === match)",
          "690:                 return;",
          "691:             if (!partial)",
          "693:             var ss = match.substr(1,match.length-2).split(','), sl = {};",
          "694:             for (i=0; i<ss.length; i++) {",
          "695:                 var st = ss[i].split(':');",
          "",
          "[Removed Lines]",
          "692:                 throw('matchOjb failed: expected \"'+match+'\" not \"'+pat+'\"');",
          "",
          "[Added Lines]",
          "692:                 throw('matchOjb failed: expected \"'+match+'\", not \"'+pat+'\"');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:             }",
          "698:             for (i in msg) {",
          "699:                 if (sl[i] && gettype(msg[i]) === sl[i]) continue;",
          "701:             }",
          "702:         }",
          "",
          "[Removed Lines]",
          "700:                 throw('matchOjb failed: expected \"'+match+'\" not \"'+pat+'\"');",
          "",
          "[Added Lines]",
          "700:                 throw('matchOjb failed: expected \"'+match+'\", not \"'+pat+'\"');",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 22",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 23",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3931: mismatch:",
          "3932:         ok = 0;",
          "3933:         if (interp->asserts && !noerror)",
          "3935:         else",
          "3937:     }",
          "3938: done:",
          "3939:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "3934:             rc = Jsi_LogError(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "3936:             Jsi_LogWarn(\"matchobj failed: expected '%s' got '%s'\", sp, cp);",
          "",
          "[Added Lines]",
          "3934:             rc = Jsi_LogError(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "3936:             Jsi_LogWarn(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "",
          "---------------"
        ],
        "src/jsiSocket.c||src/jsiSocket.c": [
          "File: src/jsiSocket.c -> src/jsiSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <string.h>",
          "18: #include <sys/types.h>",
          "19: #include <assert.h>",
          "21: #ifdef WIN32",
          "22: #define _GET_TIME_OF_DAY_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1103:         Jsi_LogError(\"sock create failed\");",
          "1104:         goto bail;",
          "1105:     }",
          "1106:     on = 1;",
          "1107:     if (cmdPtr->reuse && setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on) )) {",
          "1108:         Jsi_LogError(\"sock reuse failed\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:     fcntl(fd, F_SETFD, FD_CLOEXEC);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3db8e8818f383af885d77528d961f7187269bd7e",
      "candidate_info": {
        "commit_hash": "3db8e8818f383af885d77528d961f7187269bd7e",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/3db8e8818f383af885d77528d961f7187269bd7e",
        "files": [
          "lib/Archive.jsi",
          "lib/Cdata.jsi",
          "lib/Debug.jsi",
          "lib/Help.jsi",
          "lib/Jsi_Vfs.jsi",
          "lib/Safe.jsi",
          "lib/UnitTest.jsi",
          "lib/Websrv.jsi",
          "lib/Wget.jsi",
          "lib/Zip.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiUtils.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.43\": moduleOpts freeze is not default.  Fix dup error msgs.\n\nFossilOrigin-Name: 0f3f68f4f87d0945211e01fefa8cd709701d40313dedf664a4a7881a8205fccb",
        "before_after_code_files": [
          "lib/Archive.jsi||lib/Archive.jsi",
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "lib/Debug.jsi||lib/Debug.jsi",
          "lib/Help.jsi||lib/Help.jsi",
          "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi",
          "lib/Safe.jsi||lib/Safe.jsi",
          "lib/UnitTest.jsi||lib/UnitTest.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "lib/Zip.jsi||lib/Zip.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiInterp.c||src/jsiInterp.c",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Archive.jsi||lib/Archive.jsi": [
          "File: lib/Archive.jsi -> lib/Archive.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     return main();",
          "103: }",
          "106: moduleRun(Archive);",
          "",
          "[Removed Lines]",
          "105: provide(Archive, 1,  {freeze:true, logmask:'debug,trace'});",
          "",
          "[Added Lines]",
          "105: provide(Archive, 1,  {logmask:'debug,trace'});",
          "",
          "---------------"
        ],
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1710:     return retval;",
          "1711: }",
          "1714: moduleRun(Cdata);",
          "",
          "[Removed Lines]",
          "1713: provide(Cdata, \"2\", {freeze:true, logmask:'debug,trace'});",
          "",
          "[Added Lines]",
          "1713: provide(Cdata, \"2\", {logmask:'debug,trace'});",
          "",
          "---------------"
        ],
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:     return main();",
          "495: }",
          "499: if (isMain())",
          "500:     exit( moduleRun(Debug) );",
          "",
          "[Removed Lines]",
          "497: provide(Debug, 1.0, {freeze:true, logmask:'debug,trace'});",
          "",
          "[Added Lines]",
          "497: provide(Debug, 1.0, {logmask:'debug,trace'});",
          "",
          "---------------"
        ],
        "lib/Help.jsi||lib/Help.jsi": [
          "File: lib/Help.jsi -> lib/Help.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:     return main();",
          "372: }",
          "375: moduleRun(Help);",
          "",
          "[Removed Lines]",
          "374: provide(Help, 1, {freeze:true, logmask:'trace'});",
          "",
          "[Added Lines]",
          "374: provide(Help, 1, {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/Jsi_Vfs.jsi||lib/Jsi_Vfs.jsi": [
          "File: lib/Jsi_Vfs.jsi -> lib/Jsi_Vfs.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     var self = {",
          "13:         exec:System.exec,",
          "15:     };",
          "17:     moduleOpts(self, options);",
          "",
          "[Removed Lines]",
          "14:         Trace       :false,",
          "",
          "[Added Lines]",
          "14:         uuid:null,",
          "15:         parent:null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:                 version :''",
          "63:             };",
          "66:             if (self.version === '')",
          "67:                 self.version = mnt.version;",
          "",
          "[Removed Lines]",
          "65:             moduleOpts(info, moptions, mnt.param);",
          "",
          "[Added Lines]",
          "66:             parseOpts(info, moptions, mnt.param);",
          "67:             Object.freeze(info, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:     Vfs.type('sqlar',  {callback:Sqlar});",
          "237: }",
          "241: if (isMain())",
          "242:     moduleRun(Jsi_Vfs);",
          "",
          "[Removed Lines]",
          "239: provide(Jsi_Vfs, 1);",
          "",
          "[Added Lines]",
          "241: provide(Jsi_Vfs, 1, {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/Safe.jsi||lib/Safe.jsi": [
          "File: lib/Safe.jsi -> lib/Safe.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     return main();",
          "130: }",
          "133: moduleRun(Safe);",
          "",
          "[Removed Lines]",
          "132: provide(Safe, 1, {freeze:true, logmask:'trace'});",
          "",
          "[Added Lines]",
          "132: provide(Safe, 1, {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/UnitTest.jsi||lib/UnitTest.jsi": [
          "File: lib/UnitTest.jsi -> lib/UnitTest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:     return main();",
          "289: }",
          "293: if (Info.isMain())",
          "294:     exit(moduleRun(UnitTest));",
          "",
          "[Removed Lines]",
          "291: provide(UnitTest, 1, {freeze:true, logmask:'trace'});",
          "",
          "[Added Lines]",
          "291: provide(UnitTest, 1, {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "528: }",
          "531: moduleRun(Websrv);",
          "",
          "[Removed Lines]",
          "530: provide(Websrv, '1.2.3', {freeze:true, logmask:'debug,trace'});",
          "",
          "[Added Lines]",
          "530: provide(Websrv, '1.2.3', {nofreeze:false, logmask:'debug,trace'});",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     return main();",
          "145: }",
          "149: moduleRun(Wget);",
          "",
          "[Removed Lines]",
          "147: provide(Wget, \"1.2\", {freeze:true, logmask:'trace'});",
          "",
          "[Added Lines]",
          "147: provide(Wget, \"1.2\", {logmask:'trace'});",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     throw(emsg);",
          "159: }",
          "162: runModule(Zip);",
          "",
          "[Removed Lines]",
          "161: provide(Zip, 1, {freeze:true});",
          "",
          "[Added Lines]",
          "161: provide(Zip, 1);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 42",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 43",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     int traceCall;",
          "399:     bool coverage;",
          "400:     bool profile;",
          "402:     Jsi_Value *udata;",
          "403: } Jsi_ModuleConf;",
          "",
          "[Removed Lines]",
          "401:     bool freeze;",
          "",
          "[Added Lines]",
          "401:     bool nofreeze;",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:     JSI_OPT(CUSTOM,Jsi_ModuleConf, log,     .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "856:     JSI_OPT(CUSTOM,Jsi_ModuleConf, logmask, .help=\"Logging mask flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "857:     JSI_OPT(BOOL,  Jsi_ModuleConf, coverage,.help=\"On exit generate detailed code coverage for function calls (with profile)\" ),",
          "859:     JSI_OPT(OBJ,   Jsi_ModuleConf, info,    .help=\"Info provided by module\", .flags=JSI_OPT_INIT_ONLY ),",
          "860:     JSI_OPT(BOOL,  Jsi_ModuleConf, profile, .help=\"On exit generate profile of function calls\" ),",
          "861:     JSI_OPT(CUSTOM,Jsi_ModuleConf, traceCall,.help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "",
          "[Removed Lines]",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, freeze,  .help=\"Freeze self object: first arg to moduleOpts\" ),",
          "",
          "[Added Lines]",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, nofreeze,.help=\"Disable moduleOpts freeze of first arg (self)\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1086:             return JSI_ERROR;",
          "1087:         if (rc == JSI_OK) {",
          "1088:             Jsi_PkgOpts po = {};",
          "1090:             v = Jsi_ValueArrayIndex(interp, args, 2);",
          "1091:             if (v && Jsi_OptionsProcess(interp, jsiModuleOptions, &po.conf, v, 0) < 0)",
          "1092:                 rc = JSI_ERROR;",
          "",
          "[Removed Lines]",
          "1089:             po.conf.freeze = interp->subOpts.freeze;",
          "",
          "[Added Lines]",
          "1089:             po.conf.nofreeze = interp->subOpts.nofreeze;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4609:     return \"\";",
          "4610: }",
          "4614: {",
          "4616:     Jsi_TreeEntry *tPtr, *tPtr2;",
          "4617:     Jsi_TreeSearch search = {};",
          "4618:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "4612: static Jsi_RC SysModuleOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4613:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4615:     bool freeze = interp->subOpts.freeze;",
          "",
          "[Added Lines]",
          "4612: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4613:     Jsi_Value **ret, Jsi_Func *funcPtr, bool parse)",
          "4615:     bool nofreeze = interp->subOpts.nofreeze;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4641:     }",
          "4642:     if (v2)",
          "4643:         Jsi_TreeSearchDone(&search);",
          "4645:         if (Jsi_ValueIsObjType(interp, v3, JSI_OT_ARRAY))",
          "4646:             v3 = Jsi_ValueArrayIndex(interp, v3, 1);",
          "4647:         else {",
          "",
          "[Removed Lines]",
          "4644:     if (!v3 && pf && pf->funcName && !Jsi_Strcmp(pf->funcName, \"moduleRun\") && ((v3=pf->arguments))) {",
          "",
          "[Added Lines]",
          "4644:     if (!parse && !v3 && pf && pf->funcName && !Jsi_Strcmp(pf->funcName, \"moduleRun\") && ((v3=pf->arguments))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4667:                 break;",
          "4668:             }",
          "4671:                 int isLong = 1;//Jsi_ValueIsTrue(interp, val);",
          "4672:                 const char *help = \"\", *es = NULL, *fstr = NULL, *fname = fp->ip->filePtr->fileName;",
          "4673:                 Jsi_TreeSearchDone(&search);",
          "",
          "[Removed Lines]",
          "4670:             if (cnt == 1 && !Jsi_Strcmp(key, \"help\") && v3->d.obj->tree->numEntries==1) {",
          "",
          "[Added Lines]",
          "4670:             if (!parse && cnt == 1 && !Jsi_Strcmp(key, \"help\") && v3->d.obj->tree->numEntries==1) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4721:                 break;",
          "4722:             }",
          "4723:             Jsi_vtype oTyp, vTyp = jsi_getValType(val);",
          "4725:                 oTyp = JSI_VT_BOOL; // Accept these as builtin options.",
          "4726:                 oVal = NULL;",
          "4727:             } else if (!v2) {",
          "",
          "[Removed Lines]",
          "4724:             if (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\")) {",
          "",
          "[Added Lines]",
          "4724:             if (!parse && (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4760:         Jsi_TreeSearchDone(&search);",
          "4761:     }",
          "4765:         Jsi_Func *pf = interp->prevActiveFunc;",
          "4766:         Jsi_ModuleConf *mo = NULL;",
          "",
          "[Removed Lines]",
          "4763:     if (rc == JSI_OK && fp->filePtr && evfunc) {",
          "",
          "[Added Lines]",
          "4763:     if (!parse && rc == JSI_OK && fp->filePtr && evfunc) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4768:             mo = &pf->pkg->popts.conf;",
          "4769:             pf->pkg->logmask = mo->logmask;",
          "4770:             pf->pkg->log = mo->log;",
          "4772:         }",
          "4773:         uint i;",
          "4774:         for (i=JSI_LOG_ASSERT; mo && i<=JSI_LOG_TEST; i++) {",
          "",
          "[Removed Lines]",
          "4771:             freeze = mo->freeze;",
          "",
          "[Added Lines]",
          "4771:             nofreeze = mo->nofreeze;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4785:             }",
          "4786:         }",
          "4787:     }",
          "4789:         Jsi_Obj *obj = v1->d.obj;",
          "4790:         obj->freeze = 1;",
          "4791:         obj->freezeModifyOk = 1;",
          "4793:     }",
          "4794:     return rc;",
          "4795: }",
          "4797: static Jsi_CmdSpec consoleCmds[] = {",
          "4798:     { \"assert\", jsi_AssertCmd,      1,  3, \"expr:boolean|number|function, msg:string=void, options:object=void\",  .help=\"Same as System.assert()\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=0, .opts=AssertOptions},",
          "4799:     { \"error\",  consoleErrorCmd,    1, -1, \"val, ...\", .help=\"Same as log but adding prefix ERROR:\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Removed Lines]",
          "4788:     if (rc == JSI_OK && freeze) {",
          "4792:         obj->freezeReadBad = 1;",
          "",
          "[Added Lines]",
          "4788:     if (rc == JSI_OK && !nofreeze) {",
          "4792:         obj->freezeReadCheck = 1;",
          "4797: static Jsi_RC SysParseOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4798:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4799: {",
          "4800:     return SysModuleOptsCmdEx(interp, args, _this, ret, funcPtr, 1);",
          "4801: }",
          "4802: static Jsi_RC SysModuleOptsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4803:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4804: {",
          "4805:     return SysModuleOptsCmdEx(interp, args, _this, ret, funcPtr, 0);",
          "4806: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4952:     { \"noOp\",       jsi_NoOpCmd,     0, -1, \"\", .help=\"A No-Op. A zero overhead command call that is useful for debugging\" },",
          "4953:     { \"parseInt\",   parseIntCmd,     1,  2, \"val:any, base:number=10\", .help=\"Convert string to an integer\", .retType=(uint)JSI_TT_NUMBER },",
          "4954:     { \"parseFloat\", parseFloatCmd,   1,  1, \"val\", .help=\"Convert string to a double\", .retType=(uint)JSI_TT_NUMBER },",
          "4956:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4957:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, options:object|function=void\", .help=\"Provide a package for use with require.\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_provide, .opts=jsiModuleOptions  },",
          "4958:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "[Removed Lines]",
          "4955:     { \"parseOpts\",  SysModuleOptsCmd,2,  3, \"self:object|userobj, options:object, conf:object|null|undefined=void\", .help=\"Parse module options: same as moduleOpts\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "",
          "[Added Lines]",
          "4966:     { \"parseOpts\",  SysParseOptsCmd, 2,  3, \"self:object|userobj, options:object, conf:object|null|undefined=void\", .help=\"Parse module options: similar to moduleOpts but for non-modules\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348: }",
          "353:      jsi_ScopeChain **scope, Jsi_Value **currentScope, int *context_id, Jsi_Value *top, const char *nam) {",
          "354:     if (Jsi_InterpGone(interp))",
          "355:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "350: #define JSI_DO_THROW(nam) if ((rc=jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam)) != JSI_OK) break;",
          "352: static int jsiDoThrow(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "",
          "[Added Lines]",
          "350: static Jsi_RC jsiDoThrow(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:                 if (!Jsi_Strcmp(nam, \"help\"))",
          "362:                     Jsi_LogError(\"...%s\", str);",
          "363:                 else",
          "365:             }",
          "366:             return JSI_ERROR;",
          "367:         }",
          "",
          "[Removed Lines]",
          "364:                     Jsi_LogError(\"%s: %s\", nam, str);",
          "",
          "[Added Lines]",
          "362:                     Jsi_LogError(\"%s near %s\", nam, str);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "949:         arrayindex = (int)idx->d.num;",
          "950:     }",
          "953:         Jsi_Value *v;",
          "954:         char keyBuf[100], *keyStr = keyBuf;",
          "955:         if (arrayindex>=0)",
          "",
          "[Removed Lines]",
          "952:     if (src->vt == JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT && src->d.obj->freeze && src->d.obj->freezeReadBad) {",
          "",
          "[Added Lines]",
          "950:     if (src->vt == JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT && src->d.obj->freeze && src->d.obj->freezeReadCheck) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1059:     jsi_TryList  *trylist = NULL;",
          "1060:     jsi_Frame *fp = interp->framePtr;",
          "1061:     bool strict = interp->typeCheck.strict;",
          "1064:     if (currentScope->vt != JSI_VT_OBJECT) {",
          "1065:         Jsi_LogBug(\"Eval: current scope is not a object\");",
          "",
          "[Removed Lines]",
          "1062:     const char *curFile = NULL;",
          "",
          "[Added Lines]",
          "1060:     const char *curFile = NULL, *throwStr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1158:             if ((rc = (*interp->debugOpts.hook)(interp, curFile, curLine, fp->level, interp->curFunction, jsi_opcode_string(ip->op), ip, NULL)) != JSI_OK)",
          "1159:                 break;",
          "1160:         }",
          "1162:         switch(ip->op) {",
          "1163:             case OP_NOP:",
          "1164:             case OP_LASTOP:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1159:         throwStr = \"error\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1219:                     case JSI_BREAK:",
          "1220:                         if (fp->tryDepth<=0)",
          "1221:                             interp->isHelp = 1;",
          "1223:                         break;",
          "1224:                     default:",
          "1226:                 }",
          "1227:                 strict = interp->typeCheck.strict;",
          "",
          "[Removed Lines]",
          "1222:                         JSI_DO_THROW(\"help\");",
          "1225:                         JSI_DO_THROW(\"fcall\");",
          "",
          "[Added Lines]",
          "1220:                         rc = JSI_ERROR;",
          "1221:                         throwStr = \"help\";",
          "1224:                         throwStr = \"fcall\";",
          "1225:                         rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1752:                 jsiPush(interp,1);",
          "1754:                 if (r) {",
          "1756:                 }",
          "1757:                 break;",
          "1758:             }",
          "",
          "[Removed Lines]",
          "1755:                     JSI_DO_THROW(\"eval\");",
          "",
          "[Added Lines]",
          "1755:                     rc = JSI_ERROR;",
          "1756:                     throwStr = \"eval\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1853:                     Jsi_LogBug(\"Unexpected SCATCH opcode??\");",
          "1855:                 if (!ip->data) {",
          "1857:                 } else {",
          "1858:                     trylist->inCatch=1;",
          "",
          "[Removed Lines]",
          "1856:                     JSI_DO_THROW(\"catch\");",
          "",
          "[Added Lines]",
          "1857:                     throwStr = \"catch\";",
          "1858:                     rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1907:                 pop_try(trylist);",
          "1909:                 if (last_op == jsi_LOP_THROW) {",
          "1911:                 } else if (last_op == jsi_LOP_JMP) {",
          "1912:                     while (1) {",
          "1913:                         if (trylist == NULL) {",
          "",
          "[Removed Lines]",
          "1910:                     JSI_DO_THROW(\"finally\");",
          "",
          "[Added Lines]",
          "1912:                     throwStr = \"finally\";",
          "1913:                     rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1946:                 jsiVarDeref(interp,1);",
          "1947:                 Jsi_ValueDup2(interp,&ps->last_exception, _jsi_TOP);",
          "1950:                 break;",
          "1951:             }",
          "1952:             case OP_WITH: {",
          "",
          "[Removed Lines]",
          "1949:                 JSI_DO_THROW(\"throw\");",
          "",
          "[Added Lines]",
          "1952:                 throwStr = \"throw\";",
          "1953:                 rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2007:             }",
          "2008: #ifndef __cplusplus",
          "2009:             default:",
          "2011: #endif",
          "2012:         }",
          "2013:         if (rc == JSI_ERROR) {",
          "2016:         }",
          "2017:         lop = plop;",
          "2018:         ip++;",
          "",
          "[Removed Lines]",
          "2010:                 Jsi_LogBug(\"invalid op ceod: %d\", ip->op);",
          "2014:             JSI_DO_THROW(\"error\");",
          "2015:             rc = JSI_OK;",
          "",
          "[Added Lines]",
          "2014:                 Jsi_LogBug(\"invalid op code: %d\", ip->op);",
          "2018:             rc = jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id,",
          "2019:                 (interp->framePtr->Sp?_jsi_TOP:NULL), throwStr);",
          "2020:             if (rc != JSI_OK)",
          "2021:                 break;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:     uint isBlob:1;",
          "524:     uint freeze:1;",
          "525:     uint freezeModifyOk:1;",
          "527:     uint unused2:13;",
          "529:         int val;",
          "",
          "[Removed Lines]",
          "526:     uint freezeReadBad:1;",
          "",
          "[Added Lines]",
          "526:     uint freezeReadCheck:1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:     bool outUndef;",
          "1031:     bool logAllowDups;",
          "1032:     bool logColNums;",
          "1034:     bool privKeys;",
          "1035:     bool compat;",
          "1036:     bool mutexUnlock;",
          "",
          "[Removed Lines]",
          "1033:     bool freeze;",
          "",
          "[Added Lines]",
          "1033:     bool nofreeze;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     JSI_OPT(BOOL,  jsi_SubOptions, compat,      .help=\"Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser\" ),",
          "64:     JSI_OPT(INT,   jsi_SubOptions, dblPrec,     .help=\"Format precision of double where 0=max, -1=max-1, ... (max-1)\" ),",
          "65:     JSI_OPT(BOOL,  jsi_SubOptions, istty,       .help=\"Indicates interp is in interactive mode\", jsi_IIRO),",
          "67:     JSI_OPT(BOOL,  jsi_SubOptions, logColNums,  .help=\"Display column numbers in error messages\"),",
          "68:     JSI_OPT(BOOL,  jsi_SubOptions, logAllowDups,.help=\"Log should not filter out duplicate messages\"),",
          "69:     JSI_OPT(BOOL,  jsi_SubOptions, mutexUnlock, .help=\"Unlock own mutex when evaling in other interps (true)\", jsi_IIOF),",
          "",
          "[Removed Lines]",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, freeze,      .help=\"Default freeze self object in: first arg to moduleOpts\" ),",
          "",
          "[Added Lines]",
          "66:     JSI_OPT(BOOL,  jsi_SubOptions, nofreeze,    .help=\"moduleOpts freeze disabled by default\" ),",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "367: {",
          "368:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "372:     if (!val || !Jsi_ValueIsObjType(interp, val, JSI_OT_OBJECT))",
          "373:         return Jsi_LogError(\"arg 1: expected object\");",
          "375:         return Jsi_LogError(\"arg 2: expected bool\");",
          "377:         return Jsi_LogError(\"arg 3: expected bool\");",
          "379:     if (bval)",
          "380:         Jsi_GetBoolFromValue(interp, bval, &bnum);",
          "381:     if (rval)",
          "",
          "[Removed Lines]",
          "374:     if (bval && !Jsi_ValueIsBoolean(interp, bval))",
          "376:     if (rval && !Jsi_ValueIsBoolean(interp, rval))",
          "378:     bool bnum = 0, rnum = 0, fnum = 0;",
          "",
          "[Added Lines]",
          "374:     if (fval && !Jsi_ValueIsBoolean(interp, fval))",
          "376:     if (bval && !Jsi_ValueIsBoolean(interp, bval))",
          "378:     if (rval && !Jsi_ValueIsBoolean(interp, rval))",
          "379:         return Jsi_LogError(\"arg 4: expected bool\");",
          "380:     bool bnum = 1, rnum = 1, fnum = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:     if (fval)",
          "384:         Jsi_GetBoolFromValue(interp, fval, &fnum);",
          "385:     Jsi_Obj *obj = val->d.obj;",
          "387:     obj->freezeModifyOk = bnum;",
          "389:     return JSI_OK;",
          "391: }",
          "",
          "[Removed Lines]",
          "386:     obj->freeze = !fnum;",
          "388:     obj->freezeReadBad = rnum;",
          "",
          "[Added Lines]",
          "388:     obj->freeze = fnum;",
          "390:     obj->freezeReadCheck = rnum;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "700:     { \"hasOwnProperty\", jsi_HasOwnPropertyCmd,  1, 1, \"name:string\", .help=\"Returns a true if object has the specified property\", .retType=(uint)JSI_TT_BOOLEAN },",
          "701:     { \"is\",             ObjectIsCmd, 2, 2, \"value1, value2\", .help=\"Tests if two values are equal\", .retType=(uint)JSI_TT_BOOLEAN },",
          "702:     { \"isPrototypeOf\",  ObjectIsPrototypeOfCmd, 1, 1, \"name\", .help=\"Tests for an object in another object's prototype chain\", .retType=(uint)JSI_TT_BOOLEAN },",
          "704:     { \"keys\",           ObjectKeysCmd,          0, 1, \"obj:object|function=void\", .help=\"Return the keys of an object or array\", .retType=(uint)JSI_TT_ARRAY },",
          "705:     { \"merge\",          ObjectMergeCmd,         1, 1, \"obj:object|function\", .help=\"Return new object containing merged values\", .retType=(uint)JSI_TT_OBJECT },",
          "706:     { \"propertyIsEnumerable\", ObjectPropertyIsEnumerableCmd,1, 1, \"name\", .help=\"Determine if a property is enumerable\", .retType=(uint)JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "703:     { \"freeze\",         ObjectFreezeCmd,        1, 4, \"obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false\", .help=\"Freeze an object optionally allowing modify (but not add)\", .retType=(uint)JSI_TT_VOID },",
          "",
          "[Added Lines]",
          "705:     { \"freeze\",         ObjectFreezeCmd,        1, 4, \"obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true\", .help=\"Freeze/unfreeze an object with optionally\", .retType=(uint)JSI_TT_VOID },",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     }",
          "145:     if (!log)",
          "146:         return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "148:     char pbuf[JSI_BUFSIZ/8] = \"\";",
          "149:     char buf[JSI_BUFSIZ/2];",
          "150:     const char *term = \"\", *pterm=pbuf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     if (code == JSI_LOG_ERROR) {",
          "148:         if (interp->curIpLastError == interp->curIp)",
          "149:             return JSI_ERROR;",
          "150:         interp->curIpLastError = interp->curIp;",
          "151:     }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: Number.prototype.toString = function(radix:number=10):string {};",
          "218: var Object = function(cmd,args) {};",
          "219: Object.prototype.create = function(proto:null|object, properties:object=void):object {};",
          "221: Object.prototype.getPrototypeOf = function(name:object|function):function|object {};",
          "222: Object.prototype.hasOwnProperty = function(name:string):boolean {};",
          "223: Object.prototype.is = function(value1, value2):boolean {};",
          "",
          "[Removed Lines]",
          "220: Object.prototype.freeze = function(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void {};",
          "",
          "[Added Lines]",
          "220: Object.prototype.freeze = function(obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true):void {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "722: <tr><td>compat</td><td><i>BOOL</i></td><td>Ignore unknown options via JSI_OPTS_IGNORE_EXTRA in option parser.</td><td><i></i></td></tr>",
          "723: <tr><td>dblPrec</td><td><i>INT</i></td><td>Format precision of double where 0=max, -1=max-1, ... (max-1).</td><td><i></i></td></tr>",
          "724: <tr><td>istty</td><td><i>BOOL</i></td><td>Indicates interp is in interactive mode.</td><td><i>readOnly</i></td></tr>",
          "726: <tr><td>logColNums</td><td><i>BOOL</i></td><td>Display column numbers in error messages.</td><td><i></i></td></tr>",
          "727: <tr><td>logAllowDups</td><td><i>BOOL</i></td><td>Log should not filter out duplicate messages.</td><td><i></i></td></tr>",
          "728: <tr><td>mutexUnlock</td><td><i>BOOL</i></td><td>Unlock own mutex when evaling in other interps (true).</td><td><i>initOnly</i></td></tr>",
          "",
          "[Removed Lines]",
          "725: <tr><td>freeze</td><td><i>BOOL</i></td><td>Default freeze self object in: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "725: <tr><td>nofreeze</td><td><i>BOOL</i></td><td>moduleOpts freeze disabled by default.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "965: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "966: <tr><td>Object</td><td>new Object(val:object|function|null=void):object </td><td>Object constructor.</td></tr>",
          "967: <tr><td>create</td><td>create(proto:null|object, properties:object=void):object </td><td>Create a new object with prototype object and properties.</td></tr>",
          "969: <tr><td>getPrototypeOf</td><td>getPrototypeOf(name:object|function):function|object </td><td>Return prototype of an object.</td></tr>",
          "970: <tr><td>hasOwnProperty</td><td>hasOwnProperty(name:string):boolean </td><td>Returns a true if object has the specified property.</td></tr>",
          "971: <tr><td>is</td><td>is(value1, value2):boolean </td><td>Tests if two values are equal.</td></tr>",
          "",
          "[Removed Lines]",
          "968: <tr><td>freeze</td><td>freeze(obj:object, modify:boolean=false, badread:boolean=false, unfreeze:boolean=false):void </td><td>Freeze an object optionally allowing modify (but not add).</td></tr>",
          "",
          "[Added Lines]",
          "968: <tr><td>freeze</td><td>freeze(obj:object, freeze:boolean=true, modifyok:boolean=true, readcheck:boolean=true):void </td><td>Freeze/unfreeze an object with optionally.</td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1372: <tr><td>noOp</td><td>noOp() </td><td>A No-Op. A zero overhead command call that is useful for debugging.</td></tr>",
          "1373: <tr><td>parseFloat</td><td>parseFloat(val):number </td><td>Convert string to a double.</td></tr>",
          "1374: <tr><td>parseInt</td><td>parseInt(val:any, base:number=10):number </td><td>Convert string to an integer.</td></tr>",
          "1376: <tr><td>printf</td><td>printf(format:string, ...):void </td><td>Formatted output to stdout.</td></tr>",
          "1377: <tr><td>provide</td><td>provide(name:string|null|function=void, version:number|string=void, <a href='#System.provideOptions'>options</a>:object|function=void):void </td><td>Provide a package for use with require.. Default is the file tail-rootname</td></tr>",
          "1378: <tr><td>puts</td><td>puts(val, ...):void </td><td>Output one or more values to stdout. Each argument is quoted.  Use Interp.logOpts to control source line and/or timestamps output.</td></tr>",
          "",
          "[Removed Lines]",
          "1375: <tr><td>parseOpts</td><td>parseOpts(self:object|userobj, options:object, conf:object|null|undefined=void):object </td><td>Parse module options: same as moduleOpts.</td></tr>",
          "",
          "[Added Lines]",
          "1375: <tr><td>parseOpts</td><td>parseOpts(self:object|userobj, options:object, conf:object|null|undefined=void):object </td><td>Parse module options: similar to moduleOpts but for non-modules.</td></tr>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1431: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1432: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1433: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1435: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1436: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1437: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1434: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1434: <tr><td>nofreeze</td><td><i>BOOL</i></td><td>Disable moduleOpts freeze of first arg (self).</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1447: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1448: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1449: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1451: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1452: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1453: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1450: <tr><td>freeze</td><td><i>BOOL</i></td><td>Freeze self object: first arg to moduleOpts.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1450: <tr><td>nofreeze</td><td><i>BOOL</i></td><td>Disable moduleOpts freeze of first arg (self).</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35d5f6bb10187f96bd4ba4900a15b260abb99e41",
      "candidate_info": {
        "commit_hash": "35d5f6bb10187f96bd4ba4900a15b260abb99e41",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/35d5f6bb10187f96bd4ba4900a15b260abb99e41",
        "files": [
          "src/jsi.h",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiValue.c",
          "src/parser.y",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.49\": const now complains on modify\n\nFossilOrigin-Name: 4e191a96b7390c67b91878a96421f0104fbe0fc83b3a9c13837e67ab644853a3",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiInt.h||src/jsiInt.h",
            "src/jsiValue.c||src/jsiValue.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 48",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 49",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466:     }",
          "467: }",
          "470: {",
          "472:     int i = 0;",
          "473:     if (ops == NULL || ops->codes == NULL)",
          "474:         return;",
          "475:     while (i < ops->code_len) {",
          "476:         if (ops->codes[i].op == OP_PUSHVAR)",
          "478:         i++;",
          "479:     }",
          "480: }",
          "",
          "[Removed Lines]",
          "469: void jsi_mark_local(Jsi_OpCodes *ops) // Mark variables as declared with \"var\"",
          "471:     return;",
          "477:             ops->codes[i].local = 1;",
          "",
          "[Added Lines]",
          "469: void jsi_mark_local(Jsi_OpCodes *ops, int v) // Mark variables as declared with \"var\"",
          "471:     if (v != LOCALCONST)",
          "472:         return;",
          "478:             ops->codes[i].readonly = 1;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:         }",
          "171:         if (v == src)",
          "172:             return JSI_OK;",
          "174:             if (interp->typeCheck.strict)",
          "175:                 return Jsi_LogError(\"assign to readonly variable\");",
          "176:             return JSI_OK;",
          "",
          "[Removed Lines]",
          "173:         if (v->f.bits.readonly) {",
          "",
          "[Added Lines]",
          "173:         bool ro = v->f.bits.readonly;",
          "174:         if (ro && v->vt != JSI_VT_UNDEF) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:         else",
          "181:             Jsi_ValueCopy(interp,v, src);",
          "182:         SIGASSERT(v, VALUE);",
          "184: #ifdef JSI_MEM_DEBUG",
          "185:     if (!v->VD.label2)",
          "186:         v->VD.label2 = \"ValueAssign\";",
          "",
          "[Removed Lines]",
          "183:         v->f.bits.readonly = 0;",
          "",
          "[Added Lines]",
          "184:         v->f.bits.readonly = ro;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "875:                     Jsi_HashValueSet(hPtr, 0);",
          "876:             }",
          "877:         }",
          "879:         Jsi_IncrRefCount(interp, v);",
          "881:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:         if (ip->readonly)",
          "880:             v->f.bits.readonly = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "936:     Jsi_RC rc = JSI_OK;",
          "937:     uint flags = (uintptr_t)ip->data, right_val = flags&1; // isident=flags&2;",
          "938:     jsiVarDeref(interp,2);",
          "939:     Jsi_String *str = jsi_ValueString(src);",
          "940:     Jsi_Obj *obj = (src->vt==JSI_VT_OBJECT && src->d.obj->ot == JSI_OT_OBJECT?src->d.obj:NULL);",
          "941:     int bsc, arrayindex = (idx->vt == JSI_VT_NUMBER && Jsi_NumberIsInteger(idx->d.num) && idx->d.num >= 0) ?  (int)idx->d.num : -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941:     bool ro = src->f.bits.readonly;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1010:                 assert(vp != resPtr);",
          "1011:                 res.vt = JSI_VT_VARIABLE;",
          "1012:                 res.d.lval = vp;",
          "1013:                 Jsi_ValueCopy(interp, src, resPtr);",
          "1014:             }",
          "1015:             Jsi_DecrRefCount(interp, vp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1016:                 if (ro)",
          "1017:                     vp->f.bits.readonly = 1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1618:                 }",
          "1619:                 Jsi_Value *v = _jsi_TOP->d.lval;",
          "1620:                 SIGASSERT(v, VALUE);",
          "1621:                 Jsi_ValueToNumber(interp, v);",
          "1622:                 rc = _jsi_StrictChk(v);",
          "1623:                 v->d.num += inc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1626:                 if (v->f.bits.readonly)",
          "1627:                     return Jsi_LogError(\"assign to readonly variable\");",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:     jsi_Eopcode op;",
          "441:     void *data;",
          "442:     unsigned int Line:16;",
          "444:     unsigned char alloc:1;",
          "445:     unsigned char nodebug:1;",
          "446:     unsigned char hit:1;",
          "",
          "[Removed Lines]",
          "443:     unsigned int Lofs:8;",
          "",
          "[Added Lines]",
          "443:     unsigned int Lofs:7;",
          "444:     unsigned int  readonly:1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815: typedef struct {",
          "816:     jsi_Sig sig;",
          "818:     unsigned int local:1;",
          "819:     jsi_Pstate *ps;",
          "820:     char *varname;",
          "",
          "[Removed Lines]",
          "817:     int context_id:31;",
          "",
          "[Added Lines]",
          "818:     int context_id:30;",
          "819:     unsigned int const:1;",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:     (*to)->VD.label3 = \"ValueDup2\";",
          "313: #endif",
          "314:     Jsi_ValueCopy(interp, *to, from);",
          "316: }",
          "318: Jsi_Value *Jsi_ValueDupJSON(Jsi_Interp *interp, Jsi_Value *val)",
          "",
          "[Removed Lines]",
          "315:     (*to)->f.bits.readonly = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: localvar:",
          "150:     LOCAL { $$ = LOCAL; }",
          "153: ;",
          "155: objectident:",
          "",
          "[Removed Lines]",
          "151:     | LOCALLET { $$ = LOCAL; }",
          "152:     | LOCALCONST { $$ = LOCAL; }",
          "",
          "[Added Lines]",
          "151:     | LOCALLET { $$ = LOCALLET; }",
          "152:     | LOCALCONST { $$ = LOCALCONST; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:     | RETURN expr ';'   { $$ = codes_join($2, code_ret(pstate, &@2, 1)); }",
          "178:     | RETURN ';'        { $$ = code_ret(pstate, &@1, 0); }",
          "179:     | localvar vardecs ';' {",
          "181:         $$ = $2;",
          "182:     }",
          "183:     | THROW expr ';'    { $$ = codes_join($2, code_throw(pstate, &@2)); }",
          "",
          "[Removed Lines]",
          "180:         jsi_mark_local($2);",
          "",
          "[Added Lines]",
          "180:         jsi_mark_local($2, $1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "406:         jsi_ForinVar *fv;",
          "407:         int inof = $6;",
          "408:         Jsi_OpCodes *loc = code_local(pstate, &@5, $5);",
          "410:         fv = forinvar_new(pstate, $5, loc, NULL);",
          "411:         Jsi_OpCodes *lval;",
          "412:         if (fv->varname) lval = code_push_index(pstate, &@2, fv->varname, 1);",
          "",
          "[Removed Lines]",
          "409:         jsi_mark_local(loc);",
          "",
          "[Added Lines]",
          "409:         jsi_mark_local(loc, $4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "449:     ';'                 { $$ = code_nop(); }",
          "450:     | expr ';'          { $$ = codes_join($1, code_pop(1)); }",
          "451:     | localvar vardecs ';' {",
          "453:         $$ = $2;",
          "454:     }",
          "455: ;",
          "",
          "[Removed Lines]",
          "452:         jsi_mark_local($2);",
          "",
          "[Added Lines]",
          "452:         jsi_mark_local($2, $1);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "a75a11799937b9749637c2e5bdbb9802d08be022",
      "candidate_info": {
        "commit_hash": "a75a11799937b9749637c2e5bdbb9802d08be022",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/a75a11799937b9749637c2e5bdbb9802d08be022",
        "files": [
          "c-demos/cdata/Car.jsc",
          "c-demos/cdata/Makefile",
          "c-demos/cdata/ext_test.jsi",
          "c-demos/dyn.js",
          "lib/Cdata.jsi",
          "lib/Zip.jsi",
          "regex/regcomp.c",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiFilesys.c",
          "src/jsiFunc.c",
          "src/jsiPstate.c",
          "src/jsiSqlite.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.16\": CData adds pkg.info, fixes for ~/ files.\n\nFossilOrigin-Name: c7a1cbf5d385b03bb18120a46367d3e6b928633f4f4a1232fcdeb6d172dd54dc",
        "before_after_code_files": [
          "c-demos/cdata/Car.jsc||c-demos/cdata/Car.jsc",
          "c-demos/cdata/ext_test.jsi||c-demos/cdata/ext_test.jsi",
          "c-demos/dyn.js||c-demos/dyn.js",
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "lib/Zip.jsi||lib/Zip.jsi",
          "regex/regcomp.c||regex/regcomp.c",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "c-demos/cdata/Car.jsc||c-demos/cdata/Car.jsc": [
          "File: c-demos/cdata/Car.jsc -> c-demos/cdata/Car.jsc",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:             puts(\"Unloading Car\");",
          "48:         } else {",
          "49:             puts(\"Loading Car\");",
          "50:         }",
          "51:         return JSI_OK;",
          "52:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:             static const char *info = \"{carstuff:true, mynum:1}\";  // JSON for pkg.info",
          "51:             Car_PkgInfo = info;",
          "",
          "---------------"
        ],
        "c-demos/cdata/ext_test.jsi||c-demos/cdata/ext_test.jsi": [
          "File: c-demos/cdata/ext_test.jsi -> c-demos/cdata/ext_test.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: ;'\\nCar';",
          "36: ;require('Car');",
          "37: ;n=Car.keys();",
          "38: ;m=Info.cmds('Car');",
          "39: ;c=new Car();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: ;require('Car',1).info;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: '",
          "97: Car'",
          "98: require('Car') ==> 1",
          "99: n=Car.keys() ==> [ \"Car\", \"conf\", \"shift\", \"setSpeed\", \"fix\" ]",
          "100: m=Info.cmds('Car') ==> { args:\"options:object=void\", constructor:true, help:\"Extension to create a Car object command.\", name:\"Car\", retType:\"any\", type:\"object\" }",
          "101: c=new Car() ==> \"#Car_1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: require('Car',1).info ==> { carstuff:true, mynum:1 }",
          "",
          "---------------"
        ],
        "c-demos/dyn.js||c-demos/dyn.js": [
          "File: c-demos/dyn.js -> c-demos/dyn.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env jsish",
          "4: require('dyn');",
          "5: dyn(1,2,3);",
          "",
          "[Removed Lines]",
          "3: Interp.conf({pkgDirs:['.']});",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "646:                 self.out += '\\n#define CDATA_CODE_GLOB_VAR_'+name+' 1\\n';",
          "647:             else",
          "648:                 self.out += '\\n#define CDATA_CODE_PER_INTERP_'+name+' 1\\n';",
          "649:         }",
          "651:         for (var ff of def.flds) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "649:             self.out += '\\nstatic const char* '+name+'_PkgInfo = NULL;\\n';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1643:         Jsi_InterpFreeData(interp, \"Demo_InterpData\");",
          "1644: #endif",
          "1645:     if (!isRelease) {",
          "1647: #if (defined(CDATA_CODE_GLOB_VAR_Demo) || defined(CDATA_CODE_PER_INTERP_Demo))",
          "1648:         vr.spec = Demo__Specs;",
          "1649:         vr.data = ddPtr;",
          "1650:         vr.cmdSpec = DemoCmds;",
          "1651: #endif",
          "1655: #ifdef CDATA_CONSTRUCTOR",
          "1656:         Jsi_Hash *wsys;",
          "1657:         if (!(wsys = Jsi_UserObjRegister(interp, &DemoObjReg))) {",
          "",
          "[Removed Lines]",
          "1646:         Jsi_PkgOpts vr = {};",
          "1652:         if (Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, (vr.data?&vr:NULL)) != JSI_OK)",
          "1653:             return JSI_ERROR;",
          "",
          "[Added Lines]",
          "1647:         Jsi_RC rc;",
          "1649:         Jsi_PkgOpts vr = {};",
          "1653:         if (Demo_PkgInfo) {",
          "1654:             vr.info = Jsi_ValueNew1(interp);",
          "1655:             rc = Jsi_JSONParse(interp, Demo_PkgInfo, &vr.info, 0);",
          "1656:         }",
          "1657:         if (rc == JSI_OK)",
          "1658:             rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, &vr);",
          "1659:         if (vr.info)",
          "1660:             Jsi_DecrRefCount(interp, vr.info);",
          "1661: #else",
          "1662:         rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, NULL);",
          "1664:         if (rc != JSI_OK)",
          "1665:             return rc;",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         for (var i in flist) {",
          "85:             var fn = flist[i];",
          "86:             var fdst = fn.substr(zdir.length+1);",
          "89:             if (self.verbose)",
          "90:                 puts(\"\"+fn);",
          "91:             var fdir = File.dirname(ddir+fn);",
          "",
          "[Removed Lines]",
          "87:             var ftyp = File.type(zdir+'/'+fn);",
          "88:             if (ftyp === 'directory') continue;",
          "",
          "[Added Lines]",
          "87:             var ftyp = File.perms(zdir+'/'+fn);",
          "88:             if (ftyp[0] === 'd') continue;",
          "",
          "---------------"
        ],
        "regex/regcomp.c||regex/regcomp.c": [
          "File: regex/regcomp.c -> regex/regcomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2119:             {",
          "2121:               for (i = 0; tags[i] >= 0; i++)",
          "2124:               if (tags[i] < 0)",
          "2125:             {",
          "2126:               tags[i] = lit->code_max;",
          "",
          "[Removed Lines]",
          "2122:             if (tags[i] == lit->code_max)",
          "2123:               break;",
          "",
          "[Added Lines]",
          "2122:                 if (tags[i] == lit->code_max)",
          "2123:                   break;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 15",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 16",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     jsi_Pstate *ps = interp->ps;",
          "79:     Jsi_RC rc = JSI_OK;",
          "80:     int flags = 0;",
          "82:     SourceData data = {.trace = interp->debugOpts.includeTrace, .once = interp->debugOpts.includeOnce};",
          "83:     Jsi_Value *v, *va = Jsi_ValueArrayIndex(interp, args, 0);",
          "84:     Jsi_Value *vo = Jsi_ValueArrayIndex(interp, args, 1);",
          "",
          "[Removed Lines]",
          "81:     int i, argc;",
          "",
          "[Added Lines]",
          "81:     int i, argc = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     const char *sop = (data.once?\" <ONCE>\":\"\");",
          "115:     if (!Jsi_ValueIsArray(interp, va)) {",
          "116:         v = va;",
          "126:     }",
          "127:     argc = Jsi_ValueGetLength(interp, va);",
          "128:     for (i=0; i<argc && rc == JSI_OK; i++) {",
          "129:         v = Jsi_ValueArrayIndex(interp, va, i);",
          "130:         if (v && Jsi_ValueIsString(interp,v)) {",
          "131:             if (data.trace)",
          "132:                 Jsi_LogInfo(\"sourcing: %s%s\", Jsi_ValueString(interp, v, 0), sop);",
          "",
          "[Removed Lines]",
          "117:         if (v && Jsi_ValueIsString(interp,v)) {",
          "118:             if (data.trace)",
          "119:                 Jsi_LogInfo(\"sourcing: %s%s\", Jsi_ValueString(interp, v, 0), sop);",
          "120:             rc = jsi_evalStrFile(ps->interp, v, NULL, flags, data.level);",
          "121:         } else {",
          "122:             Jsi_LogError(\"expected string\");",
          "123:             rc = JSI_ERROR;",
          "124:         }",
          "125:         goto done;",
          "",
          "[Added Lines]",
          "117:         goto doit;",
          "122: doit:",
          "123:         if (!v) continue;",
          "124:         if (interp->isSafe && data.exists) {",
          "125:             Jsi_StatBuf sb;",
          "126:             if (Jsi_Stat(interp, v, &sb))",
          "127:                 continue;",
          "128:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:             break;",
          "138:         }",
          "139:     }",
          "141:     if (rc == JSI_OK)",
          "142:         Jsi_ValueCopy(interp, *ret, interp->retValue);",
          "143:     interp->isMain = oisi;",
          "",
          "[Removed Lines]",
          "140: done:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1394:     else",
          "1395: #endif",
          "1396:     apath = realpath(npath, newname);",
          "1398:         if ((path[0] == '.' && path[1] == '/') || (path[0] != '/' &&",
          "1399:         !(path[0] == '.' && path[1] == '.') && path[1] != ':')) {",
          "1400:             Jsi_GetCwd(interp, &eStr);",
          "",
          "[Removed Lines]",
          "1397:     if (!apath) {",
          "",
          "[Added Lines]",
          "1397:     if (!apath && path[0] != '~') {",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:         case 'b': if (Jsi_Strcmp(tname, \"boolean\")==0) return JSI_TT_BOOLEAN; break;",
          "98:         case 's': if (Jsi_Strcmp(tname, \"string\")==0) return JSI_TT_STRING; break;",
          "99:         case 'n': if (Jsi_Strcmp(tname, \"null\")==0) return JSI_TT_NULL;",
          "101:         case 'o': if (Jsi_Strcmp(tname, \"object\")==0) return JSI_TT_OBJECT; break;",
          "102:         case 'r': if (Jsi_Strcmp(tname, \"regexp\")==0) return JSI_TT_REGEXP; break;",
          "103:         case 'f': if (Jsi_Strcmp(tname, \"function\")==0) return JSI_TT_FUNCTION; break;",
          "104:         case 'i': if (Jsi_Strcmp(tname, \"iterobj\")==0) return JSI_TT_ITEROBJ;",
          "105:         case 'u': if (Jsi_Strcmp(tname, \"userobj\")==0) return JSI_TT_USEROBJ;",
          "107:         case 'a': if (Jsi_Strcmp(tname, \"array\")==0) return JSI_TT_ARRAY;",
          "109:         case 'v': if (Jsi_Strcmp(tname, \"void\")==0) return JSI_TT_VOID; break;",
          "110:     }",
          "111:     Jsi_LogWarn(\"Type \\\"%s\\\" is not one of boolean, string, number, function, array, object, regexp, userobj, null, undefined, void or any\", tname);",
          "",
          "[Removed Lines]",
          "100:                   if (Jsi_Strcmp(tname, \"number\")==0) return JSI_TT_NUMBER; break;",
          "106:                   if (Jsi_Strcmp(tname, \"undefined\")==0) return JSI_TT_UNDEFINED; break;",
          "108:                   if (Jsi_Strcmp(tname, \"any\")==0) return JSI_TT_ANY; break;",
          "",
          "[Added Lines]",
          "100:                   if (Jsi_Strcmp(tname, \"number\")==0) return JSI_TT_NUMBER;",
          "101:                   break;",
          "107:                   if (Jsi_Strcmp(tname, \"undefined\")==0) return JSI_TT_UNDEFINED;",
          "108:                   break;",
          "110:                   if (Jsi_Strcmp(tname, \"any\")==0) return JSI_TT_ANY;",
          "111:                   break;",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         Jsi_IncrRefCount(interp, defValue);",
          "110:         if (a->firstDef==0)",
          "111:             a->firstDef = a->argCnt;",
          "114:     } else {",
          "115:         if (a->firstDef && (interp->typeCheck.run || interp->typeCheck.all) )",
          "116:             Jsi_LogWarn(\"expected default value in argument list: \\\"%s\\\"\", name);",
          "",
          "[Removed Lines]",
          "112:             if (atyp)",
          "113:                 jsi_ArgTypeCheck(interp, atyp, defValue, \"default value\", name, a->argCnt, NULL, 1);",
          "",
          "[Added Lines]",
          "112:         if (atyp)",
          "113:             jsi_ArgTypeCheck(interp, atyp, defValue, \"default value\", name, a->argCnt, NULL, 1);",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4666:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "4667:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", hdrNum:%d, hdrSrcId:\\\"%s\\\", pkgVer:%d}\",",
          "4668:         (char *)sqlite3_libversion(), SQLITE_VERSION, SQLITE_VERSION_NUMBER, SQLITE_SOURCE_ID, jsi_DbPkgVersion);",
          "4670:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"Sqlite\", jsi_DbPkgVersion, Jsi_InitSqlite, &dbPkgOpts);",
          "4671:     Jsi_DecrRefCount(interp, info);",
          "4672:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "4669:     Jsi_PkgOpts dbPkgOpts = { db_ObjCmd_Specs, &dbObjCmd, sqliteCmds, info };",
          "",
          "[Added Lines]",
          "4669:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&dbObjCmd, .cmdSpec=sqliteCmds, .info=info };",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    }
  ]
}