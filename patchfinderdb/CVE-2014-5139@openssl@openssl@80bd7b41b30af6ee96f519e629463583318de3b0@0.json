{
  "cve_id": "CVE-2014-5139",
  "cve_desc": "The ssl_set_client_disabled function in t1_lib.c in OpenSSL 1.0.1 before 1.0.1i allows remote SSL servers to cause a denial of service (NULL pointer dereference and client application crash) via a ServerHello message that includes an SRP ciphersuite without the required negotiation of that ciphersuite with the client.",
  "repo": "openssl/openssl",
  "patch_hash": "80bd7b41b30af6ee96f519e629463583318de3b0",
  "patch_info": {
    "commit_hash": "80bd7b41b30af6ee96f519e629463583318de3b0",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/80bd7b41b30af6ee96f519e629463583318de3b0",
    "files": [
      "ssl/t1_lib.c"
    ],
    "message": "Fix SRP ciphersuite DoS vulnerability.\n\nIf a client attempted to use an SRP ciphersuite and it had not been\nset up correctly it would crash with a null pointer read. A malicious\nserver could exploit this in a DoS attack.\n\nThanks to Joonas Kuorilehto and Riku Hietam\u00e4ki from Codenomicon\nfor reporting this issue.\n\nCVE-2014-2970\nReviewed-by: Tim Hudson <tjh@openssl.org>",
    "before_after_code_files": [
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1088:   c->mask_k |= SSL_kPSK;",
      "1089:   }",
      "1091:  c->valid = 1;",
      "1092:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1091: #ifndef OPENSSL_NO_SRP",
      "1092:  if (!(s->srp_ctx.srp_Mask & SSL_kSRP))",
      "1093:   {",
      "1094:   c->mask_a |= SSL_aSRP;",
      "1095:   c->mask_k |= SSL_kSRP;",
      "1096:   }",
      "1097: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4d69f9e69d2f5069ab37da68f4b93a6f337fb13e",
      "candidate_info": {
        "commit_hash": "4d69f9e69d2f5069ab37da68f4b93a6f337fb13e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4d69f9e69d2f5069ab37da68f4b93a6f337fb13e",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h",
          "ssl/ssl_rsa.c",
          "ssl/t1_lib.c"
        ],
        "message": "move masks out of CERT structure\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/ssl_rsa.c||ssl/ssl_rsa.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "957: {",
          "958:     STACK_OF(SSL_CIPHER) *sk;",
          "959:     const SSL_CIPHER *c;",
          "961:     unsigned char *p, *d;",
          "962:     int i, al = SSL_AD_INTERNAL_ERROR, ok;",
          "963:     unsigned int j;",
          "",
          "[Removed Lines]",
          "960:     CERT *ct = s->cert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1151:     }",
          "1153:     if (!SSL_USE_TLS1_2_CIPHERS(s))",
          "1155:     else",
          "",
          "[Removed Lines]",
          "1154:         ct->mask_ssl = SSL_TLSV1_2;",
          "1156:         ct->mask_ssl = 0;",
          "",
          "[Added Lines]",
          "1153:         s->s3->tmp.mask_ssl = SSL_TLSV1_2;",
          "1155:         s->s3->tmp.mask_ssl = 0;",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3843:     SSL_CIPHER *c, *ret = NULL;",
          "3844:     STACK_OF(SSL_CIPHER) *prio, *allow;",
          "3845:     int i, ii, ok;",
          "3847:     unsigned long alg_k, alg_a, mask_k, mask_a, emask_k, emask_a;",
          "3852: #if 0",
          "",
          "[Removed Lines]",
          "3846:     CERT *cert;",
          "3850:     cert = s->cert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3893:             continue;",
          "3895:         ssl_set_masks(s, c);",
          "3900: #ifndef OPENSSL_NO_SRP",
          "3901:         if (s->srp_ctx.srp_Mask & SSL_kSRP) {",
          "3902:             mask_k |= SSL_kSRP;",
          "",
          "[Removed Lines]",
          "3896:         mask_k = cert->mask_k;",
          "3897:         mask_a = cert->mask_a;",
          "3898:         emask_k = cert->export_mask_k;",
          "3899:         emask_a = cert->export_mask_a;",
          "",
          "[Added Lines]",
          "3894:         mask_k = s->s3->tmp.mask_k;",
          "3895:         mask_a = s->s3->tmp.mask_a;",
          "3896:         emask_k = s->s3->tmp.export_mask_k;",
          "3897:         emask_a = s->s3->tmp.export_mask_a;",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     memset(ret, 0, sizeof(*ret));",
          "198:     ret->key = &ret->pkeys[cert->key - cert->pkeys];",
          "205: #ifndef OPENSSL_NO_RSA",
          "206:     if (cert->rsa_tmp != NULL) {",
          "",
          "[Removed Lines]",
          "199:     ret->valid = cert->valid;",
          "200:     ret->mask_k = cert->mask_k;",
          "201:     ret->mask_a = cert->mask_a;",
          "202:     ret->export_mask_k = cert->export_mask_k;",
          "203:     ret->export_mask_a = cert->export_mask_a;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2114:     emask_a |= SSL_aPSK;",
          "2115: #endif",
          "2122: }",
          "",
          "[Removed Lines]",
          "2117:     c->mask_k = mask_k;",
          "2118:     c->mask_a = mask_a;",
          "2119:     c->export_mask_k = emask_k;",
          "2120:     c->export_mask_a = emask_a;",
          "2121:     c->valid = 1;",
          "",
          "[Added Lines]",
          "2117:     s->s3->tmp.mask_k = mask_k;",
          "2118:     s->s3->tmp.mask_a = mask_a;",
          "2119:     s->s3->tmp.export_mask_k = emask_k;",
          "2120:     s->s3->tmp.export_mask_a = emask_a;",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1303:         int valid_flags[SSL_PKEY_NUM];",
          "1304:     } tmp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1309:         unsigned long mask_k;",
          "1310:         unsigned long mask_a;",
          "1311:         unsigned long export_mask_k;",
          "1312:         unsigned long export_mask_a;",
          "1314:         unsigned long mask_ssl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1511:     CERT_PKEY *key;",
          "1524: # ifndef OPENSSL_NO_RSA",
          "1525:     RSA *rsa_tmp;",
          "1526:     RSA *(*rsa_tmp_cb) (SSL *ssl, int is_export, int keysize);",
          "",
          "[Removed Lines]",
          "1517:     int valid;",
          "1518:     unsigned long mask_k;",
          "1519:     unsigned long mask_a;",
          "1520:     unsigned long export_mask_k;",
          "1521:     unsigned long export_mask_a;",
          "1523:     unsigned long mask_ssl;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_rsa.c||ssl/ssl_rsa.c": [
          "File: ssl/ssl_rsa.c -> ssl/ssl_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     CRYPTO_add(&pkey->references, 1, CRYPTO_LOCK_EVP_PKEY);",
          "217:     c->pkeys[i].privatekey = pkey;",
          "218:     c->key = &(c->pkeys[i]);",
          "220:     return (1);",
          "221: }",
          "",
          "[Removed Lines]",
          "219:     c->valid = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "420:     c->pkeys[i].x509 = x;",
          "421:     c->key = &(c->pkeys[i]);",
          "424:     return (1);",
          "425: }",
          "",
          "[Removed Lines]",
          "423:     c->valid = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1049: void ssl_set_client_disabled(SSL *s)",
          "1050: {",
          "1055:     if (!SSL_CLIENT_USE_TLS1_2_CIPHERS(s))",
          "1057:     else",
          "1070: # ifndef OPENSSL_NO_PSK",
          "1072:     if (!s->psk_client_callback) {",
          "1075:     }",
          "1077: # ifndef OPENSSL_NO_SRP",
          "1078:     if (!(s->srp_ctx.srp_Mask & SSL_kSRP)) {",
          "1081:     }",
          "1082: # endif",
          "1084: }",
          "1086: int ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op)",
          "1087: {",
          "1091:         return 1;",
          "1092:     return !ssl_security(s, op, c->strength_bits, 0, (void *)c);",
          "1093: }",
          "",
          "[Removed Lines]",
          "1051:     CERT *c = s->cert;",
          "1052:     c->mask_a = 0;",
          "1053:     c->mask_k = 0;",
          "1056:         c->mask_ssl = SSL_TLSV1_2;",
          "1058:         c->mask_ssl = 0;",
          "1059:     ssl_set_sig_mask(&c->mask_a, s, SSL_SECOP_SIGALG_MASK);",
          "1064:     if (c->mask_a & SSL_aRSA)",
          "1065:         c->mask_k |= SSL_kDHr | SSL_kECDHr;",
          "1066:     if (c->mask_a & SSL_aDSS)",
          "1067:         c->mask_k |= SSL_kDHd;",
          "1068:     if (c->mask_a & SSL_aECDSA)",
          "1069:         c->mask_k |= SSL_kECDHe;",
          "1073:         c->mask_a |= SSL_aPSK;",
          "1074:         c->mask_k |= SSL_kPSK;",
          "1079:         c->mask_a |= SSL_aSRP;",
          "1080:         c->mask_k |= SSL_kSRP;",
          "1083:     c->valid = 1;",
          "1088:     CERT *ct = s->cert;",
          "1089:     if (c->algorithm_ssl & ct->mask_ssl || c->algorithm_mkey & ct->mask_k",
          "1090:         || c->algorithm_auth & ct->mask_a)",
          "",
          "[Added Lines]",
          "1051:     s->s3->tmp.mask_a = 0;",
          "1052:     s->s3->tmp.mask_k = 0;",
          "1055:         s->s3->tmp.mask_ssl = SSL_TLSV1_2;",
          "1057:         s->s3->tmp.mask_ssl = 0;",
          "1058:     ssl_set_sig_mask(&s->s3->tmp.mask_a, s, SSL_SECOP_SIGALG_MASK);",
          "1063:     if (s->s3->tmp.mask_a & SSL_aRSA)",
          "1064:         s->s3->tmp.mask_k |= SSL_kDHr | SSL_kECDHr;",
          "1065:     if (s->s3->tmp.mask_a & SSL_aDSS)",
          "1066:         s->s3->tmp.mask_k |= SSL_kDHd;",
          "1067:     if (s->s3->tmp.mask_a & SSL_aECDSA)",
          "1068:         s->s3->tmp.mask_k |= SSL_kECDHe;",
          "1072:         s->s3->tmp.mask_a |= SSL_aPSK;",
          "1073:         s->s3->tmp.mask_k |= SSL_kPSK;",
          "1078:         s->s3->tmp.mask_a |= SSL_aSRP;",
          "1079:         s->s3->tmp.mask_k |= SSL_kSRP;",
          "1086:     if (c->algorithm_ssl & s->s3->tmp.mask_ssl",
          "1087:         || c->algorithm_mkey & s->s3->tmp.mask_k",
          "1088:         || c->algorithm_auth & s->s3->tmp.mask_a)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e481f9b90b164fd1053015d1c4e0a0d92076d7a8",
      "candidate_info": {
        "commit_hash": "e481f9b90b164fd1053015d1c4e0a0d92076d7a8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e481f9b90b164fd1053015d1c4e0a0d92076d7a8",
        "files": [
          "Configure",
          "INSTALL.VMS",
          "apps/apps.c",
          "apps/apps.h",
          "apps/s_client.c",
          "apps/s_server.c",
          "doc/ssl/SSL_CTX_set_tlsext_ticket_key_cb.pod",
          "include/openssl/ssl.h",
          "include/openssl/tls1.h",
          "ssl/d1_clnt.c",
          "ssl/d1_srvr.c",
          "ssl/s3_clnt.c",
          "ssl/s3_lib.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_asn1.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_conf.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h",
          "ssl/ssl_rsa.c",
          "ssl/ssl_sess.c",
          "ssl/ssl_txt.c",
          "ssl/t1_ext.c",
          "ssl/t1_lib.c",
          "util/mk1mf.pl",
          "util/mkdef.pl",
          "util/ssleay.num"
        ],
        "message": "Remove support for OPENSSL_NO_TLSEXT\n\nGiven the pervasive nature of TLS extensions it is inadvisable to run\nOpenSSL without support for them. It also means that maintaining\nthe OPENSSL_NO_TLSEXT option within the code is very invasive (and probably\nnot well tested). Therefore it is being removed.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "INSTALL.VMS||INSTALL.VMS",
          "apps/apps.c||apps/apps.c",
          "apps/apps.h||apps/apps.h",
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c",
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "include/openssl/tls1.h||include/openssl/tls1.h",
          "ssl/d1_clnt.c||ssl/d1_clnt.c",
          "ssl/d1_srvr.c||ssl/d1_srvr.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_asn1.c||ssl/ssl_asn1.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_conf.c||ssl/ssl_conf.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/ssl_rsa.c||ssl/ssl_rsa.c",
          "ssl/ssl_sess.c||ssl/ssl_sess.c",
          "ssl/ssl_txt.c||ssl/ssl_txt.c",
          "ssl/t1_ext.c||ssl/t1_ext.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "util/mk1mf.pl||util/mk1mf.pl",
          "util/mkdef.pl||util/mkdef.pl",
          "util/ssleay.num||util/ssleay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "INSTALL.VMS||INSTALL.VMS": [
          "File: INSTALL.VMS -> INSTALL.VMS",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:                         DES, DGRAM, DH, DSA, EC, EC2M, ECDH, ECDSA, ENGINE,",
          "137:                         ERR, GOST, HEARTBEATS, HMAC, IDEA, MD2, MD4,",
          "138:                         MD5, OCB, OCSP, PSK, RC2, RC4, RC5, RMD160, RSA, SCTP,",
          "140:                         example, having the logical name OPENSSL_NO_RSA with",
          "141:                         the value YES means that the LIBCRYPTO.OLB library",
          "142:                         will not contain an RSA implementation.",
          "",
          "[Removed Lines]",
          "139:                         SEED, SOCK, SRP, SRTP, TLSEXT, WHIRLPOOL.  So, for",
          "",
          "[Added Lines]",
          "139:                         SEED, SOCK, SRP, SRTP, WHIRLPOOL.  So, for",
          "",
          "---------------"
        ],
        "apps/apps.c||apps/apps.c": [
          "File: apps/apps.c -> apps/apps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2203: #endif",
          "",
          "[Removed Lines]",
          "2205: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/apps.h||apps/apps.h": [
          "File: apps/apps.h -> apps/apps.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "514: void jpake_server_auth(BIO *out, BIO *conn, const char *secret);",
          "515: # endif",
          "518: unsigned char *next_protos_parse(unsigned short *outlen, const char *in);",
          "521: void print_cert_checks(BIO *bio, X509 *x,",
          "522:                        const char *checkhost,",
          "",
          "[Removed Lines]",
          "517: # ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: static int c_brief = 0;",
          "200: static void print_stuff(BIO *berr, SSL *con, int full);",
          "202: static int ocsp_resp_cb(SSL *s, void *arg);",
          "205: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "201: #ifndef OPENSSL_NO_TLSEXT",
          "203: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269: }",
          "270: #endif",
          "275: typedef struct tlsextctx_st {",
          "276:     BIO *biodebug;",
          "",
          "[Removed Lines]",
          "272: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:     return SSL_TLSEXT_ERR_OK;",
          "290: }",
          "295: typedef struct srp_arg_st {",
          "",
          "[Removed Lines]",
          "292: # ifndef OPENSSL_NO_SRP",
          "",
          "[Added Lines]",
          "288: #ifndef OPENSSL_NO_SRP",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "301:     int strength /* minimal size for N */ ;",
          "302: } SRP_ARG;",
          "306: static int srp_Verify_N_and_g(const BIGNUM *N, const BIGNUM *g)",
          "307: {",
          "",
          "[Removed Lines]",
          "304: #  define SRP_NUMBER_ITERATIONS_FOR_PRIME 64",
          "",
          "[Added Lines]",
          "300: # define SRP_NUMBER_ITERATIONS_FOR_PRIME 64",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "377:     return 0;",
          "378: }",
          "382: static char *ssl_give_srp_client_pwd_cb(SSL *s, void *arg)",
          "383: {",
          "",
          "[Removed Lines]",
          "380: #  define PWD_STRLEN 1024",
          "",
          "[Added Lines]",
          "376: # define PWD_STRLEN 1024",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "398:     return pass;",
          "399: }",
          "403: char *srtp_profiles = NULL;",
          "407: typedef struct tlsextnextprotoctx_st {",
          "408:     unsigned char *data;",
          "",
          "[Removed Lines]",
          "401: # endif",
          "405: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "397: #endif",
          "401: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "457:     return 1;",
          "458: }",
          "462: typedef enum OPTION_choice {",
          "463:     OPT_ERR = -1, OPT_EOF = 0, OPT_HELP,",
          "464:     OPT_HOST, OPT_PORT, OPT_CONNECT, OPT_UNIX, OPT_XMPPHOST, OPT_VERIFY,",
          "",
          "[Removed Lines]",
          "460: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "563:     {\"srp_strength\", OPT_SRP_STRENGTH, 'p', \"Minimal mength in bits for N\"},",
          "564: #endif",
          "565:     {\"name\", OPT_SMTPHOST, 's', \"Hostname to use for \\\"-starttls smtp\\\"\"},",
          "567:     {\"servername\", OPT_SERVERNAME, 's',",
          "568:      \"Set TLS extension servername in ClientHello\"},",
          "569:     {\"tlsextdebug\", OPT_TLSEXTDEBUG, '-',",
          "",
          "[Removed Lines]",
          "566: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "573:      \"types  Send empty ClientHello extensions (comma-separated numbers)\"},",
          "574:     {\"alpn\", OPT_ALPN, 's',",
          "575:      \"Enable ALPN extension, considering named protocols supported (comma-separated list)\"},",
          "577:     {\"nextprotoneg\", OPT_NEXTPROTONEG, 's',",
          "578:      \"Enable NPN extension, considering named protocols supported (comma-separated list)\"},",
          "580: #endif",
          "581:     {\"CRL\", OPT_CRL, '<'},",
          "582:     {\"crl_download\", OPT_CRL_DOWNLOAD, '-'},",
          "",
          "[Removed Lines]",
          "576: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "579: # endif",
          "",
          "[Added Lines]",
          "569: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "673: #if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_NETWARE)",
          "674:     struct timeval tv;",
          "675: #endif",
          "677:     char *servername = NULL;",
          "678:     const char *alpn_in = NULL;",
          "679:     tlsextctx tlsextcbp = { NULL, 0 };",
          "681:     unsigned short serverinfo_types[MAX_SI_TYPES];",
          "682:     int serverinfo_count = 0, start = 0, len;",
          "684:     const char *next_proto_neg_in = NULL;",
          "686: #endif",
          "687: #ifndef OPENSSL_NO_SRP",
          "688:     char *srppass = NULL;",
          "",
          "[Removed Lines]",
          "676: #ifndef OPENSSL_NO_TLSEXT",
          "680: # define MAX_SI_TYPES 100",
          "683: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "685: # endif",
          "",
          "[Added Lines]",
          "671: #define MAX_SI_TYPES 100",
          "674: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "870:         case OPT_DEBUG:",
          "871:             c_debug = 1;",
          "872:             break;",
          "874:         case OPT_TLSEXTDEBUG:",
          "875:             c_tlsextdebug = 1;",
          "876:             break;",
          "877:         case OPT_STATUS:",
          "878:             c_status_req = 1;",
          "879:             break;",
          "881: #ifdef WATT32",
          "882:         case OPT_WDEBUG:",
          "883:             dbug_init();",
          "",
          "[Removed Lines]",
          "873: #ifndef OPENSSL_NO_TLSEXT",
          "880: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1027:         case OPT_VERIFYCAFILE:",
          "1028:             vfyCAfile = opt_arg();",
          "1029:             break;",
          "1031:         case OPT_NEXTPROTONEG:",
          "1032:             next_proto_neg_in = opt_arg();",
          "1033:             break;",
          "",
          "[Removed Lines]",
          "1030: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1046:                 }",
          "1047:             }",
          "1048:             break;",
          "1050:         case OPT_STARTTLS:",
          "1051:             if (!opt_pair(opt_arg(), services, &starttls_proto))",
          "1052:                 goto end;",
          "1054:         case OPT_SERVERNAME:",
          "1055:             servername = opt_arg();",
          "1057:             break;",
          "1059: #ifndef OPENSSL_NO_JPAKE",
          "1060:         case OPT_JPAKE:",
          "1061:             jpake_secret = opt_arg();",
          "",
          "[Removed Lines]",
          "1049: #endif",
          "1053: #ifndef OPENSSL_NO_TLSEXT",
          "1058: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1101:     }",
          "1102: #endif",
          "1105:     next_proto.status = -1;",
          "1106:     if (next_proto_neg_in) {",
          "1107:         next_proto.data =",
          "",
          "[Removed Lines]",
          "1104: #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "1088: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1250:     if (exc)",
          "1251:         ssl_ctx_set_excert(ctx, exc);",
          "1255:     if (next_proto.data)",
          "1256:         SSL_CTX_set_next_proto_select_cb(ctx, next_proto_cb, &next_proto);",
          "1258:     if (alpn_in) {",
          "1259:         unsigned short alpn_len;",
          "1260:         unsigned char *alpn = next_protos_parse(&alpn_len, alpn_in);",
          "",
          "[Removed Lines]",
          "1253: #if !defined(OPENSSL_NO_TLSEXT)",
          "1254: # if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "1257: # endif",
          "",
          "[Added Lines]",
          "1237: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "1240: #endif",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1270:         }",
          "1271:         OPENSSL_free(alpn);",
          "1272:     }",
          "1275:     for (i = 0; i < serverinfo_count; i++) {",
          "1276:         if (!SSL_CTX_add_client_custom_ext(ctx,",
          "1277:                                            serverinfo_types[i],",
          "",
          "[Removed Lines]",
          "1273: #endif",
          "1274: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1282:                     serverinfo_types[i]);",
          "1283:         }",
          "1284:     }",
          "1287:     if (state)",
          "1288:         SSL_CTX_set_info_callback(ctx, apps_ssl_info_callback);",
          "",
          "[Removed Lines]",
          "1285: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1299:     if (!set_cert_key_stuff(ctx, cert, key, chain, build_chain))",
          "1300:         goto end;",
          "1303:     if (servername != NULL) {",
          "1304:         tlsextcbp.biodebug = bio_err;",
          "1305:         SSL_CTX_set_tlsext_servername_callback(ctx, ssl_servername_cb);",
          "",
          "[Removed Lines]",
          "1302: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1321:                                                   ssl_srp_verify_param_cb);",
          "1322:     }",
          "1323: # endif",
          "1326:     con = SSL_new(ctx);",
          "1327:     if (sess_in) {",
          "",
          "[Removed Lines]",
          "1324: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1350:     if (fallback_scsv)",
          "1351:         SSL_set_mode(con, SSL_MODE_SEND_FALLBACK_SCSV);",
          "1354:     if (servername != NULL) {",
          "1355:         if (!SSL_set_tlsext_host_name(con, servername)) {",
          "1356:             BIO_printf(bio_err, \"Unable to set TLS servername extension.\\n\");",
          "",
          "[Removed Lines]",
          "1353: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1358:             goto end;",
          "1359:         }",
          "1360:     }",
          "1363:  re_start:",
          "1364: #ifdef NO_SYS_UN_H",
          "",
          "[Removed Lines]",
          "1361: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1449:             SSL_set_msg_callback(con, msg_cb);",
          "1450:         SSL_set_msg_callback_arg(con, bio_c_msg ? bio_c_msg : bio_c_out);",
          "1451:     }",
          "1453:     if (c_tlsextdebug) {",
          "1454:         SSL_set_tlsext_debug_callback(con, tlsext_cb);",
          "1455:         SSL_set_tlsext_debug_arg(con, bio_c_out);",
          "",
          "[Removed Lines]",
          "1452: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1459:         SSL_CTX_set_tlsext_status_cb(ctx, ocsp_resp_cb);",
          "1460:         SSL_CTX_set_tlsext_status_arg(ctx, bio_c_out);",
          "1461:     }",
          "1463: #ifndef OPENSSL_NO_JPAKE",
          "1464:     if (jpake_secret)",
          "1465:         jpake_client_auth(bio_c_out, sbio, jpake_secret);",
          "",
          "[Removed Lines]",
          "1462: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1680:             tty_on = 1;",
          "1681:             if (in_init) {",
          "1682:                 in_init = 0;",
          "1684:                 if (servername != NULL && !SSL_session_reused(con)) {",
          "1685:                     BIO_printf(bio_c_out,",
          "1686:                                \"Server did %sacknowledge servername extension.\\n\",",
          "1687:                                tlsextcbp.ack ? \"\" : \"not \");",
          "1688:                 }",
          "1690:                 if (sess_out) {",
          "1691:                     BIO *stmp = BIO_new_file(sess_out, \"w\");",
          "1692:                     if (stmp) {",
          "",
          "[Removed Lines]",
          "1683: #ifndef OPENSSL_NO_TLSEXT",
          "1689: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2028:             print_stuff(bio_c_out, con, 1);",
          "2029:         SSL_free(con);",
          "2030:     }",
          "2032:     OPENSSL_free(next_proto.data);",
          "2033: #endif",
          "2034:     SSL_CTX_free(ctx);",
          "",
          "[Removed Lines]",
          "2031: #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "2007: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2155:     }",
          "2156: #endif",
          "2160:     if (next_proto.status != -1) {",
          "2161:         const unsigned char *proto;",
          "2162:         unsigned int proto_len;",
          "",
          "[Removed Lines]",
          "2158: #if !defined(OPENSSL_NO_TLSEXT)",
          "2159: # if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "2134: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2165:         BIO_write(bio, proto, proto_len);",
          "2166:         BIO_write(bio, \"\\n\", 1);",
          "2167:     }",
          "2169:     {",
          "2170:         const unsigned char *proto;",
          "2171:         unsigned int proto_len;",
          "",
          "[Removed Lines]",
          "2168: # endif",
          "",
          "[Added Lines]",
          "2143: #endif",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2177:         } else",
          "2178:             BIO_printf(bio, \"No ALPN negotiated\\n\");",
          "2179:     }",
          "2182: #ifndef OPENSSL_NO_SRTP",
          "2183:     {",
          "",
          "[Removed Lines]",
          "2180: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2216:     (void)BIO_flush(bio);",
          "2217: }",
          "2221: static int ocsp_resp_cb(SSL *s, void *arg)",
          "2222: {",
          "2223:     const unsigned char *p;",
          "",
          "[Removed Lines]",
          "2219: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2241:     OCSP_RESPONSE_free(rsp);",
          "2242:     return 1;",
          "2243: }",
          "",
          "[Removed Lines]",
          "2245: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: static int accept_socket = -1;",
          "220: #define TEST_CERT       \"server.pem\"",
          "225: extern int verify_depth, verify_return_error, verify_quiet;",
          "",
          "[Removed Lines]",
          "221: #ifndef OPENSSL_NO_TLSEXT",
          "222: # define TEST_CERT2      \"server2.pem\"",
          "223: #endif",
          "",
          "[Added Lines]",
          "221: #define TEST_CERT2      \"server2.pem\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229: static const char *s_cert_file = TEST_CERT, *s_key_file =",
          "230:     NULL, *s_chain_file = NULL;",
          "233: static const char *s_cert_file2 = TEST_CERT2, *s_key_file2 = NULL;",
          "235: static char *s_dcert_file = NULL, *s_dkey_file = NULL, *s_dchain_file = NULL;",
          "236: #ifdef FIONBIO",
          "237: static int s_nbio = 0;",
          "",
          "[Removed Lines]",
          "232: #ifndef OPENSSL_NO_TLSEXT",
          "234: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "239: static int s_nbio_test = 0;",
          "240: int s_crlf = 0;",
          "241: static SSL_CTX *ctx = NULL;",
          "243: static SSL_CTX *ctx2 = NULL;",
          "245: static int www = 0;",
          "247: static BIO *bio_s_out = NULL;",
          "248: static BIO *bio_s_msg = NULL;",
          "249: static int s_debug = 0;",
          "251: static int s_tlsextdebug = 0;",
          "252: static int s_tlsextstatus = 0;",
          "253: static int cert_status_cb(SSL *s, void *arg);",
          "255: static int no_resume_ephemeral = 0;",
          "256: static int s_msg = 0;",
          "257: static int s_quiet = 0;",
          "",
          "[Removed Lines]",
          "242: #ifndef OPENSSL_NO_TLSEXT",
          "244: #endif",
          "250: #ifndef OPENSSL_NO_TLSEXT",
          "254: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272: static int cert_chain = 0;",
          "273: #endif",
          "276: static BIO *serverinfo_in = NULL;",
          "277: static const char *s_serverinfo_file = NULL;",
          "281: #ifndef OPENSSL_NO_PSK",
          "282: static char *psk_identity = \"Client_identity\";",
          "",
          "[Removed Lines]",
          "275: #ifndef OPENSSL_NO_TLSEXT",
          "279: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "401:     s_cert_file = TEST_CERT;",
          "402:     s_key_file = NULL;",
          "403:     s_chain_file = NULL;",
          "405:     s_cert_file2 = TEST_CERT2;",
          "406:     s_key_file2 = NULL;",
          "407:     ctx2 = NULL;",
          "409:     s_nbio = 0;",
          "410:     s_nbio_test = 0;",
          "411:     ctx = NULL;",
          "",
          "[Removed Lines]",
          "404: #ifndef OPENSSL_NO_TLSEXT",
          "408: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "575: }",
          "576: #endif",
          "581: typedef struct tlsextctx_st {",
          "582:     char *servername;",
          "",
          "[Removed Lines]",
          "578: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "732:     goto done;",
          "733: }",
          "737: typedef struct tlsextnextprotoctx_st {",
          "738:     unsigned char *data;",
          "",
          "[Removed Lines]",
          "735: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "720: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "849:      \"Turn on peer certificate verification, must have a cert\"},",
          "850:     {\"cert\", OPT_CERT, '<', \"Certificate file to use; default is \" TEST_CERT},",
          "851:     {\"naccept\", OPT_NACCEPT, 'p', \"Terminate after pnum connections\"},",
          "853:     {\"serverinfo\", OPT_SERVERINFO, 's',",
          "854:      \"PEM serverinfo file for certificate\"},",
          "856:     {\"certform\", OPT_CERTFORM, 'F',",
          "857:      \"Certificate format (PEM or DER) PEM default\"},",
          "858:     {\"key\", OPT_KEY, '<',",
          "",
          "[Removed Lines]",
          "852: #ifndef OPENSSL_NO_TLSEXT",
          "855: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "924:      \"Generate SSL/TLS session IDs prefixed by arg\"},",
          "925:     {\"rand\", OPT_RAND, 's',",
          "926:      \"Load the file(s) into the random number generator\"},",
          "928:     {\"servername\", OPT_SERVERNAME, 's',",
          "929:      \"Servername for HostName TLS extension\"},",
          "930:     {\"servername_fatal\", OPT_SERVERNAME_FATAL, '-',",
          "",
          "[Removed Lines]",
          "927: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "935:      \"-Private Key file to use for servername if not in -cert2\"},",
          "936:     {\"tlsextdebug\", OPT_TLSEXTDEBUG, '-',",
          "937:      \"Hex dump of all TLS extensions received\"},",
          "939:     {\"nextprotoneg\", OPT_NEXTPROTONEG, 's',",
          "940:      \"Set the advertised protocols for the NPN extension (comma-separated list)\"},",
          "942:     {\"use_srtp\", OPT_SRTP_PROFILES, '<',",
          "943:      \"Offer SRTP key management with a colon-separated profile list\"},",
          "944:     {\"alpn\", OPT_ALPN, 's',",
          "945:      \"Set the advertised protocols for the ALPN extension (comma-separated list)\"},",
          "947:     {\"keymatexport\", OPT_KEYMATEXPORT, 's',",
          "948:      \"Export keying material using label\"},",
          "949:     {\"keymatexportlen\", OPT_KEYMATEXPORTLEN, 'p',",
          "",
          "[Removed Lines]",
          "938: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "941: # endif",
          "946: #endif",
          "",
          "[Added Lines]",
          "919: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "922: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1016:     unsigned short port = PORT;",
          "1017:     unsigned char *context = NULL;",
          "1018:     OPTION_CHOICE o;",
          "1020:     EVP_PKEY *s_key2 = NULL;",
          "1021:     X509 *s_cert2 = NULL;",
          "1022:     tlsextctx tlsextcbp = { NULL, NULL, SSL_TLSEXT_ERR_ALERT_WARNING };",
          "1024:     const char *next_proto_neg_in = NULL;",
          "1025:     tlsextnextprotoctx next_proto = { NULL, 0 };",
          "1027:     const char *alpn_in = NULL;",
          "1028:     tlsextalpnctx alpn_ctx = { NULL, 0 };",
          "1030: #ifndef OPENSSL_NO_PSK",
          "1032:     static char *psk_identity_hint = NULL;",
          "",
          "[Removed Lines]",
          "1019: #ifndef OPENSSL_NO_TLSEXT",
          "1023: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "1026: # endif",
          "1029: #endif",
          "",
          "[Added Lines]",
          "1002: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1005: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1122:         case OPT_CRL_DOWNLOAD:",
          "1123:             crl_download = 1;",
          "1124:             break;",
          "1126:         case OPT_SERVERINFO:",
          "1127:             s_serverinfo_file = opt_arg();",
          "1128:             break;",
          "1130:         case OPT_CERTFORM:",
          "1131:             if (!opt_format(opt_arg(), OPT_FMT_PEMDER, &s_cert_format))",
          "1132:                 goto opthelp;",
          "",
          "[Removed Lines]",
          "1125: #ifndef OPENSSL_NO_TLSEXT",
          "1129: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1241:         case OPT_DEBUG:",
          "1242:             s_debug = 1;",
          "1243:             break;",
          "1245:         case OPT_TLSEXTDEBUG:",
          "1246:             s_tlsextdebug = 1;",
          "1247:             break;",
          "",
          "[Removed Lines]",
          "1244: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1265:                 goto end;",
          "1266:             }",
          "1267:             break;",
          "1269:         case OPT_MSG:",
          "1270:             s_msg = 1;",
          "1271:             break;",
          "",
          "[Removed Lines]",
          "1268: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1395:         case OPT_RAND:",
          "1396:             inrand = opt_arg();",
          "1397:             break;",
          "1399:         case OPT_SERVERNAME:",
          "1400:             tlsextcbp.servername = opt_arg();",
          "1401:             break;",
          "",
          "[Removed Lines]",
          "1398: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1408:         case OPT_KEY2:",
          "1409:             s_key_file2 = opt_arg();",
          "1410:             break;",
          "1412:         case OPT_NEXTPROTONEG:",
          "1413:             next_proto_neg_in = opt_arg();",
          "1414:             break;",
          "1416:         case OPT_ALPN:",
          "1417:             alpn_in = opt_arg();",
          "1418:             break;",
          "1420: #if !defined(OPENSSL_NO_JPAKE) && !defined(OPENSSL_NO_PSK)",
          "1421:         case OPT_JPAKE:",
          "1422:             jpake_secret = opt_arg();",
          "",
          "[Removed Lines]",
          "1411: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "1415: # endif",
          "1419: #endif",
          "",
          "[Added Lines]",
          "1384: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1388: #endif",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1469:     if (s_key_file == NULL)",
          "1470:         s_key_file = s_cert_file;",
          "1472:     if (s_key_file2 == NULL)",
          "1473:         s_key_file2 = s_cert_file2;",
          "1476:     if (!load_excert(&exc))",
          "1477:         goto end;",
          "",
          "[Removed Lines]",
          "1471: #ifndef OPENSSL_NO_TLSEXT",
          "1474: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1497:             if (!s_chain)",
          "1498:                 goto end;",
          "1499:         }",
          "1501:         if (tlsextcbp.servername) {",
          "1502:             s_key2 = load_key(s_key_file2, s_key_format, 0, pass, e,",
          "1503:                               \"second server certificate private key file\");",
          "",
          "[Removed Lines]",
          "1500: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1514:                 goto end;",
          "1515:             }",
          "1516:         }",
          "1518:     }",
          "1521:     if (next_proto_neg_in) {",
          "1522:         unsigned short len;",
          "1523:         next_proto.data = next_protos_parse(&len, next_proto_neg_in);",
          "",
          "[Removed Lines]",
          "1519: #if !defined(OPENSSL_NO_TLSEXT)",
          "1520: # if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "1489: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1527:     } else {",
          "1528:         next_proto.data = NULL;",
          "1529:     }",
          "1531:     alpn_ctx.data = NULL;",
          "1532:     if (alpn_in) {",
          "1533:         unsigned short len;",
          "",
          "[Removed Lines]",
          "1530: # endif",
          "",
          "[Added Lines]",
          "1499: #endif",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1536:             goto end;",
          "1537:         alpn_ctx.len = len;",
          "1538:     }",
          "1541:     if (crl_file) {",
          "1542:         X509_CRL *crl;",
          "",
          "[Removed Lines]",
          "1539: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1610:         s_key_file = NULL;",
          "1611:         s_dcert_file = NULL;",
          "1612:         s_dkey_file = NULL;",
          "1614:         s_cert_file2 = NULL;",
          "1615:         s_key_file2 = NULL;",
          "1617:     }",
          "1619:     ctx = SSL_CTX_new(meth);",
          "",
          "[Removed Lines]",
          "1613: #ifndef OPENSSL_NO_TLSEXT",
          "1616: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1678:         ERR_print_errors(bio_err);",
          "1679:         goto end;",
          "1680:     }",
          "1682:     if (s_cert2) {",
          "1683:         ctx2 = SSL_CTX_new(meth);",
          "1684:         if (ctx2 == NULL) {",
          "",
          "[Removed Lines]",
          "1681: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1732:         if (!config_ctx(cctx, ssl_args, ctx2, no_ecdhe, jpake_secret == NULL))",
          "1733:             goto end;",
          "1734:     }",
          "1736:     if (next_proto.data)",
          "1737:         SSL_CTX_set_next_protos_advertised_cb(ctx, next_proto_cb,",
          "1738:                                               &next_proto);",
          "1740:     if (alpn_ctx.data)",
          "1741:         SSL_CTX_set_alpn_select_cb(ctx, alpn_cb, &alpn_ctx);",
          "1744: #ifndef OPENSSL_NO_DH",
          "1745:     if (!no_dhe) {",
          "",
          "[Removed Lines]",
          "1735: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "1739: # endif",
          "1742: #endif",
          "",
          "[Added Lines]",
          "1701: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1705: #endif",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1765:             DH_free(dh);",
          "1766:             goto end;",
          "1767:         }",
          "1769:         if (ctx2) {",
          "1770:             if (!dhfile) {",
          "1771:                 DH *dh2 = load_dh_param(s_cert_file2);",
          "",
          "[Removed Lines]",
          "1768: # ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1786:                 goto end;",
          "1787:             }",
          "1788:         }",
          "1790:         DH_free(dh);",
          "1791:     }",
          "1792: #endif",
          "1794:     if (!set_cert_key_stuff(ctx, s_cert, s_key, s_chain, build_chain))",
          "1795:         goto end;",
          "1797:     if (s_serverinfo_file != NULL",
          "1798:         && !SSL_CTX_use_serverinfo_file(ctx, s_serverinfo_file)) {",
          "1799:         ERR_print_errors(bio_err);",
          "1800:         goto end;",
          "1801:     }",
          "1804:     if (ctx2 && !set_cert_key_stuff(ctx2, s_cert2, s_key2, NULL, build_chain))",
          "1805:         goto end;",
          "1807:     if (s_dcert != NULL) {",
          "1808:         if (!set_cert_key_stuff(ctx, s_dcert, s_dkey, s_dchain, build_chain))",
          "1809:             goto end;",
          "",
          "[Removed Lines]",
          "1789: # endif",
          "1796: #ifndef OPENSSL_NO_TLSEXT",
          "1802: #endif",
          "1803: #ifndef OPENSSL_NO_TLSEXT",
          "1806: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1811: #ifndef OPENSSL_NO_RSA",
          "1812:     if (!no_tmp_rsa) {",
          "1813:         SSL_CTX_set_tmp_rsa_callback(ctx, tmp_rsa_cb);",
          "1815:         if (ctx2)",
          "1816:             SSL_CTX_set_tmp_rsa_callback(ctx2, tmp_rsa_cb);",
          "1818:     }",
          "1819: #endif",
          "1821:     if (no_resume_ephemeral) {",
          "1822:         SSL_CTX_set_not_resumable_session_callback(ctx,",
          "1823:                                                    not_resumable_sess_cb);",
          "1825:         if (ctx2)",
          "1826:             SSL_CTX_set_not_resumable_session_callback(ctx2,",
          "1827:                                                        not_resumable_sess_cb);",
          "1829:     }",
          "1830: #ifndef OPENSSL_NO_PSK",
          "1831: # ifdef OPENSSL_NO_JPAKE",
          "",
          "[Removed Lines]",
          "1814: #  ifndef OPENSSL_NO_TLSEXT",
          "1817: #  endif",
          "1824: #ifndef OPENSSL_NO_TLSEXT",
          "1828: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1860:     SSL_CTX_set_cookie_generate_cb(ctx, generate_cookie_callback);",
          "1861:     SSL_CTX_set_cookie_verify_cb(ctx, verify_cookie_callback);",
          "1864:     if (ctx2) {",
          "1865:         SSL_CTX_set_verify(ctx2, s_server_verify, verify_callback);",
          "1866:         if (!SSL_CTX_set_session_id_context(ctx2,",
          "",
          "[Removed Lines]",
          "1863: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1876:         SSL_CTX_set_tlsext_servername_callback(ctx, ssl_servername_cb);",
          "1877:         SSL_CTX_set_tlsext_servername_arg(ctx, &tlsextcbp);",
          "1878:     }",
          "1881: #ifndef OPENSSL_NO_SRP",
          "1882:     if (srp_verifier_file != NULL) {",
          "",
          "[Removed Lines]",
          "1879: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1898: #endif",
          "1899:     if (CAfile != NULL) {",
          "1900:         SSL_CTX_set_client_CA_list(ctx, SSL_load_client_CA_file(CAfile));",
          "1902:         if (ctx2)",
          "1903:             SSL_CTX_set_client_CA_list(ctx2, SSL_load_client_CA_file(CAfile));",
          "1905:     }",
          "1907:     BIO_printf(bio_s_out, \"ACCEPT\\n\");",
          "",
          "[Removed Lines]",
          "1901: #ifndef OPENSSL_NO_TLSEXT",
          "1904: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1937:     OPENSSL_free(dpass);",
          "1938:     X509_VERIFY_PARAM_free(vpm);",
          "1939:     free_sessions();",
          "1941:     OPENSSL_free(tlscstatp.host);",
          "1942:     OPENSSL_free(tlscstatp.port);",
          "1943:     OPENSSL_free(tlscstatp.path);",
          "",
          "[Removed Lines]",
          "1940: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1945:     X509_free(s_cert2);",
          "1946:     EVP_PKEY_free(s_key2);",
          "1947:     BIO_free(serverinfo_in);",
          "1949:     OPENSSL_free(next_proto.data);",
          "1952: #endif",
          "1953:     ssl_excert_free(exc);",
          "1954:     sk_OPENSSL_STRING_free(ssl_args);",
          "1955:     SSL_CONF_CTX_free(cctx);",
          "",
          "[Removed Lines]",
          "1948: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "1950: # endif",
          "1951:     OPENSSL_free(alpn_ctx.data);",
          "",
          "[Added Lines]",
          "1904: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1907:     OPENSSL_free(alpn_ctx.data);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2019:     if (con == NULL) {",
          "2020:         con = SSL_new(ctx);",
          "2022:         if (s_tlsextdebug) {",
          "2023:             SSL_set_tlsext_debug_callback(con, tlsext_cb);",
          "2024:             SSL_set_tlsext_debug_arg(con, bio_s_out);",
          "",
          "[Removed Lines]",
          "2021: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2027:             SSL_CTX_set_tlsext_status_cb(ctx, cert_status_cb);",
          "2028:             SSL_CTX_set_tlsext_status_arg(ctx, &tlscstatp);",
          "2029:         }",
          "2031:         if (context",
          "2032:                 && !SSL_set_session_id_context(con,",
          "2033:                         context, strlen((char *)context))) {",
          "",
          "[Removed Lines]",
          "2030: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2109:             SSL_set_msg_callback(con, msg_cb);",
          "2110:         SSL_set_msg_callback_arg(con, bio_s_msg ? bio_s_msg : bio_s_out);",
          "2111:     }",
          "2113:     if (s_tlsextdebug) {",
          "2114:         SSL_set_tlsext_debug_callback(con, tlsext_cb);",
          "2115:         SSL_set_tlsext_debug_arg(con, bio_s_out);",
          "2116:     }",
          "2119:     width = s + 1;",
          "2120:     for (;;) {",
          "",
          "[Removed Lines]",
          "2112: #ifndef OPENSSL_NO_TLSEXT",
          "2117: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2399:     X509 *peer;",
          "2400:     long verify_error;",
          "2401:     char buf[BUFSIZ];",
          "2403:     const unsigned char *next_proto_neg;",
          "2404:     unsigned next_proto_neg_len;",
          "2405: #endif",
          "",
          "[Removed Lines]",
          "2402: #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "2356: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2476: #endif",
          "2477:     BIO_printf(bio_s_out, \"CIPHER is %s\\n\", (str != NULL) ? str : \"(NONE)\");",
          "2480:     SSL_get0_next_proto_negotiated(con, &next_proto_neg, &next_proto_neg_len);",
          "2481:     if (next_proto_neg) {",
          "2482:         BIO_printf(bio_s_out, \"NEXTPROTO is \");",
          "",
          "[Removed Lines]",
          "2479: #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "2433: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2575:     if ((con = SSL_new(ctx)) == NULL)",
          "2576:         goto err;",
          "2578:     if (s_tlsextdebug) {",
          "2579:         SSL_set_tlsext_debug_callback(con, tlsext_cb);",
          "2580:         SSL_set_tlsext_debug_arg(con, bio_s_out);",
          "2581:     }",
          "2583:     if (context && !SSL_set_session_id_context(con, context,",
          "2584:                         strlen((char *)context)))",
          "2585:         goto err;",
          "",
          "[Removed Lines]",
          "2577: #ifndef OPENSSL_NO_TLSEXT",
          "2582: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2921:     if ((con = SSL_new(ctx)) == NULL)",
          "2922:         goto err;",
          "2924:     if (s_tlsextdebug) {",
          "2925:         SSL_set_tlsext_debug_callback(con, tlsext_cb);",
          "2926:         SSL_set_tlsext_debug_arg(con, bio_s_out);",
          "2927:     }",
          "2929:     if (context && !SSL_set_session_id_context(con, context,",
          "2930:                         strlen((char *)context))) {",
          "2931:         ERR_print_errors(bio_err);",
          "",
          "[Removed Lines]",
          "2923: #ifndef OPENSSL_NO_TLSEXT",
          "2928: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:                                          STACK_OF(SSL_CIPHER) *peer_ciphers,",
          "339:                                          SSL_CIPHER **cipher, void *arg);",
          "345: typedef int (*custom_ext_add_cb) (SSL *s, unsigned int ext_type,",
          "",
          "[Removed Lines]",
          "341: # ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:                                     const unsigned char *in,",
          "354:                                     size_t inlen, int *al, void *parse_arg);",
          "359: # define SSL_OP_LEGACY_SERVER_CONNECT                    0x00000004L",
          "",
          "[Removed Lines]",
          "356: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "771:                                     unsigned *len);",
          "772: # endif",
          "775: __owur int SSL_select_next_proto(unsigned char **out, unsigned char *outlen,",
          "776:                           const unsigned char *in, unsigned int inlen,",
          "777:                           const unsigned char *client,",
          "778:                           unsigned int client_len);",
          "781: # define OPENSSL_NPN_UNSUPPORTED 0",
          "782: # define OPENSSL_NPN_NEGOTIATED  1",
          "",
          "[Removed Lines]",
          "774: # ifndef OPENSSL_NO_TLSEXT",
          "779: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "867: const char *SSL_get_psk_identity(const SSL *s);",
          "868: # endif",
          "873: __owur int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx, unsigned int ext_type,",
          "",
          "[Removed Lines]",
          "870: # ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "887: __owur int SSL_extension_supported(unsigned int ext_type);",
          "891: # define SSL_NOTHING     1",
          "892: # define SSL_WRITING     2",
          "893: # define SSL_READING     3",
          "",
          "[Removed Lines]",
          "889: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1112: # define SSL_CTRL_SET_MAX_CERT_LIST              51",
          "1113: # define SSL_CTRL_SET_MAX_SEND_FRAGMENT          52",
          "1149: # define DTLS_CTRL_GET_TIMEOUT           73",
          "1150: # define DTLS_CTRL_HANDLE_TIMEOUT        74",
          "1151: # define DTLS_CTRL_LISTEN                        75",
          "",
          "[Removed Lines]",
          "1115: # ifndef OPENSSL_NO_TLSEXT",
          "1116: #  define SSL_CTRL_SET_TLSEXT_SERVERNAME_CB       53",
          "1117: #  define SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG      54",
          "1118: #  define SSL_CTRL_SET_TLSEXT_HOSTNAME            55",
          "1119: #  define SSL_CTRL_SET_TLSEXT_DEBUG_CB            56",
          "1120: #  define SSL_CTRL_SET_TLSEXT_DEBUG_ARG           57",
          "1121: #  define SSL_CTRL_GET_TLSEXT_TICKET_KEYS         58",
          "1122: #  define SSL_CTRL_SET_TLSEXT_TICKET_KEYS         59",
          "1126: #  define SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB       63",
          "1127: #  define SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG   64",
          "1128: #  define SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE     65",
          "1129: #  define SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS     66",
          "1130: #  define SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS     67",
          "1131: #  define SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS      68",
          "1132: #  define SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS      69",
          "1133: #  define SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP        70",
          "1134: #  define SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP        71",
          "1135: #  define SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB       72",
          "1136: #  define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB    75",
          "1137: #  define SSL_CTRL_SET_SRP_VERIFY_PARAM_CB                76",
          "1138: #  define SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB             77",
          "1139: #  define SSL_CTRL_SET_SRP_ARG            78",
          "1140: #  define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME               79",
          "1141: #  define SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH               80",
          "1142: #  define SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD               81",
          "1143: #  ifndef OPENSSL_NO_HEARTBEATS",
          "1144: #   define SSL_CTRL_TLS_EXT_SEND_HEARTBEAT                         85",
          "1145: #   define SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING          86",
          "1146: #   define SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS      87",
          "1147: #  endif",
          "",
          "[Added Lines]",
          "1106: # define SSL_CTRL_SET_TLSEXT_SERVERNAME_CB       53",
          "1107: # define SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG      54",
          "1108: # define SSL_CTRL_SET_TLSEXT_HOSTNAME            55",
          "1109: # define SSL_CTRL_SET_TLSEXT_DEBUG_CB            56",
          "1110: # define SSL_CTRL_SET_TLSEXT_DEBUG_ARG           57",
          "1111: # define SSL_CTRL_GET_TLSEXT_TICKET_KEYS         58",
          "1112: # define SSL_CTRL_SET_TLSEXT_TICKET_KEYS         59",
          "1116: # define SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB       63",
          "1117: # define SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG   64",
          "1118: # define SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE     65",
          "1119: # define SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS     66",
          "1120: # define SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS     67",
          "1121: # define SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS      68",
          "1122: # define SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS      69",
          "1123: # define SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP        70",
          "1124: # define SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP        71",
          "1125: # define SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB       72",
          "1126: # define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB    75",
          "1127: # define SSL_CTRL_SET_SRP_VERIFY_PARAM_CB                76",
          "1128: # define SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB             77",
          "1129: # define SSL_CTRL_SET_SRP_ARG            78",
          "1130: # define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME               79",
          "1131: # define SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH               80",
          "1132: # define SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD               81",
          "1133: # ifndef OPENSSL_NO_HEARTBEATS",
          "1134: #  define SSL_CTRL_TLS_EXT_SEND_HEARTBEAT                         85",
          "1135: #  define SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING          86",
          "1136: #  define SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS      87",
          "1137: # endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1390: __owur int SSL_use_certificate(SSL *ssl, X509 *x);",
          "1391: __owur int SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len);",
          "1395: __owur int SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,",
          "1396:                            size_t serverinfo_length);",
          "1398: __owur int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file);",
          "1403: # ifndef OPENSSL_NO_STDIO",
          "1404: __owur int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);",
          "",
          "[Removed Lines]",
          "1393: # ifndef OPENSSL_NO_TLSEXT",
          "1397: #  ifndef OPENSSL_NO_STDIO",
          "1401: # endif",
          "",
          "[Added Lines]",
          "1385: # ifndef OPENSSL_NO_STDIO",
          "",
          "---------------"
        ],
        "include/openssl/tls1.h||include/openssl/tls1.h": [
          "File: include/openssl/tls1.h -> include/openssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "311: # define TLSEXT_curve_P_256                              23",
          "312: # define TLSEXT_curve_P_384                              24",
          "318: __owur const char *SSL_get_servername(const SSL *s, const int type);",
          "319: __owur int SSL_get_servername_type(const SSL *s);",
          "",
          "[Removed Lines]",
          "314: # ifndef OPENSSL_NO_TLSEXT",
          "316: #  define TLSEXT_MAXLEN_host_name 255",
          "",
          "[Added Lines]",
          "314: # define TLSEXT_MAXLEN_host_name 255",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340: __owur int SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain);",
          "343: SSL_ctrl(s,SSL_CTRL_SET_TLSEXT_HOSTNAME,TLSEXT_NAMETYPE_host_name,(char *)name)",
          "346: SSL_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_DEBUG_CB,(void (*)(void))cb)",
          "349: SSL_ctrl(ssl,SSL_CTRL_SET_TLSEXT_DEBUG_ARG,0, (void *)arg)",
          "352: SSL_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE,type, NULL)",
          "355: SSL_ctrl(ssl,SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS,0, (void *)arg)",
          "358: SSL_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS,0, (void *)arg)",
          "361: SSL_ctrl(ssl,SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS,0, (void *)arg)",
          "364: SSL_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS,0, (void *)arg)",
          "367: SSL_ctrl(ssl,SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP,0, (void *)arg)",
          "370: SSL_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP,arglen, (void *)arg)",
          "373: SSL_CTX_callback_ctrl(ctx,SSL_CTRL_SET_TLSEXT_SERVERNAME_CB,(void (*)(void))cb)",
          "381: SSL_CTX_ctrl(ctx,SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG,0, (void *)arg)",
          "384:         SSL_CTX_ctrl((ctx),SSL_CTRL_GET_TLSEXT_TICKET_KEYS,(keylen),(keys))",
          "386:         SSL_CTX_ctrl((ctx),SSL_CTRL_SET_TLSEXT_TICKET_KEYS,(keylen),(keys))",
          "389: SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB,(void (*)(void))cb)",
          "392: SSL_CTX_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG,0, (void *)arg)",
          "395: SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB,(void (*)(void))cb)",
          "403:         SSL_ctrl((ssl),SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING,0,NULL)",
          "405:         SSL_ctrl((ssl),SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS,arg,NULL)",
          "407: # endif",
          "",
          "[Removed Lines]",
          "342: #  define SSL_set_tlsext_host_name(s,name) \\",
          "345: #  define SSL_set_tlsext_debug_callback(ssl, cb) \\",
          "348: #  define SSL_set_tlsext_debug_arg(ssl, arg) \\",
          "351: #  define SSL_set_tlsext_status_type(ssl, type) \\",
          "354: #  define SSL_get_tlsext_status_exts(ssl, arg) \\",
          "357: #  define SSL_set_tlsext_status_exts(ssl, arg) \\",
          "360: #  define SSL_get_tlsext_status_ids(ssl, arg) \\",
          "363: #  define SSL_set_tlsext_status_ids(ssl, arg) \\",
          "366: #  define SSL_get_tlsext_status_ocsp_resp(ssl, arg) \\",
          "369: #  define SSL_set_tlsext_status_ocsp_resp(ssl, arg, arglen) \\",
          "372: #  define SSL_CTX_set_tlsext_servername_callback(ctx, cb) \\",
          "375: #  define SSL_TLSEXT_ERR_OK 0",
          "376: #  define SSL_TLSEXT_ERR_ALERT_WARNING 1",
          "377: #  define SSL_TLSEXT_ERR_ALERT_FATAL 2",
          "378: #  define SSL_TLSEXT_ERR_NOACK 3",
          "380: #  define SSL_CTX_set_tlsext_servername_arg(ctx, arg) \\",
          "383: #  define SSL_CTX_get_tlsext_ticket_keys(ctx, keys, keylen) \\",
          "385: #  define SSL_CTX_set_tlsext_ticket_keys(ctx, keys, keylen) \\",
          "388: #  define SSL_CTX_set_tlsext_status_cb(ssl, cb) \\",
          "391: #  define SSL_CTX_set_tlsext_status_arg(ssl, arg) \\",
          "394: #  define SSL_CTX_set_tlsext_ticket_key_cb(ssl, cb) \\",
          "397: #  ifndef OPENSSL_NO_HEARTBEATS",
          "398: #   define SSL_TLSEXT_HB_ENABLED                           0x01",
          "399: #   define SSL_TLSEXT_HB_DONT_SEND_REQUESTS        0x02",
          "400: #   define SSL_TLSEXT_HB_DONT_RECV_REQUESTS        0x04",
          "402: #   define SSL_get_tlsext_heartbeat_pending(ssl) \\",
          "404: #   define SSL_set_tlsext_heartbeat_no_requests(ssl, arg) \\",
          "406: #  endif",
          "",
          "[Added Lines]",
          "340: # define SSL_set_tlsext_host_name(s,name) \\",
          "343: # define SSL_set_tlsext_debug_callback(ssl, cb) \\",
          "346: # define SSL_set_tlsext_debug_arg(ssl, arg) \\",
          "349: # define SSL_set_tlsext_status_type(ssl, type) \\",
          "352: # define SSL_get_tlsext_status_exts(ssl, arg) \\",
          "355: # define SSL_set_tlsext_status_exts(ssl, arg) \\",
          "358: # define SSL_get_tlsext_status_ids(ssl, arg) \\",
          "361: # define SSL_set_tlsext_status_ids(ssl, arg) \\",
          "364: # define SSL_get_tlsext_status_ocsp_resp(ssl, arg) \\",
          "367: # define SSL_set_tlsext_status_ocsp_resp(ssl, arg, arglen) \\",
          "370: # define SSL_CTX_set_tlsext_servername_callback(ctx, cb) \\",
          "373: # define SSL_TLSEXT_ERR_OK 0",
          "374: # define SSL_TLSEXT_ERR_ALERT_WARNING 1",
          "375: # define SSL_TLSEXT_ERR_ALERT_FATAL 2",
          "376: # define SSL_TLSEXT_ERR_NOACK 3",
          "378: # define SSL_CTX_set_tlsext_servername_arg(ctx, arg) \\",
          "381: # define SSL_CTX_get_tlsext_ticket_keys(ctx, keys, keylen) \\",
          "383: # define SSL_CTX_set_tlsext_ticket_keys(ctx, keys, keylen) \\",
          "386: # define SSL_CTX_set_tlsext_status_cb(ssl, cb) \\",
          "389: # define SSL_CTX_set_tlsext_status_arg(ssl, arg) \\",
          "392: # define SSL_CTX_set_tlsext_ticket_key_cb(ssl, cb) \\",
          "395: # ifndef OPENSSL_NO_HEARTBEATS",
          "396: #  define SSL_TLSEXT_HB_ENABLED                           0x01",
          "397: #  define SSL_TLSEXT_HB_DONT_SEND_REQUESTS        0x02",
          "398: #  define SSL_TLSEXT_HB_DONT_RECV_REQUESTS        0x04",
          "400: #  define SSL_get_tlsext_heartbeat_pending(ssl) \\",
          "402: #  define SSL_set_tlsext_heartbeat_no_requests(ssl, arg) \\",
          "",
          "---------------"
        ],
        "ssl/d1_clnt.c||ssl/d1_clnt.c": [
          "File: ssl/d1_clnt.c -> ssl/d1_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:                 ret = ssl3_get_server_certificate(s);",
          "406:                 if (ret <= 0)",
          "407:                     goto end;",
          "409:                 if (s->tlsext_status_expected)",
          "410:                     s->state = SSL3_ST_CR_CERT_STATUS_A;",
          "411:                 else",
          "",
          "[Removed Lines]",
          "408: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:                 skip = 1;",
          "415:                 s->state = SSL3_ST_CR_KEY_EXCH_A;",
          "416:             }",
          "423:             s->init_num = 0;",
          "424:             break;",
          "",
          "[Removed Lines]",
          "417: #else",
          "418:             } else",
          "419:                 skip = 1;",
          "421:             s->state = SSL3_ST_CR_KEY_EXCH_A;",
          "422: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "640:                          0, NULL);",
          "641: #endif",
          "647:                 if (s->tlsext_ticket_expected)",
          "648:                     s->s3->tmp.next_state = SSL3_ST_CR_SESSION_TICKET_A;",
          "649:                 else",
          "652:                     s->s3->tmp.next_state = SSL3_ST_CR_FINISHED_A;",
          "653:             }",
          "654:             s->init_num = 0;",
          "655:             break;",
          "658:         case SSL3_ST_CR_SESSION_TICKET_A:",
          "659:         case SSL3_ST_CR_SESSION_TICKET_B:",
          "660:             ret = ssl3_get_new_session_ticket(s);",
          "",
          "[Removed Lines]",
          "643: #ifndef OPENSSL_NO_TLSEXT",
          "650: #endif",
          "657: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "672:             s->state = SSL3_ST_CR_KEY_EXCH_A;",
          "673:             s->init_num = 0;",
          "674:             break;",
          "677:         case SSL3_ST_CR_FINISHED_A:",
          "678:         case SSL3_ST_CR_FINISHED_B:",
          "",
          "[Removed Lines]",
          "675: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/d1_srvr.c||ssl/d1_srvr.c": [
          "File: ssl/d1_srvr.c -> ssl/d1_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:                 BIO_ctrl(SSL_get_wbio(s), BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY,",
          "426:                          sizeof(sctpauthkey), sctpauthkey);",
          "427: #endif",
          "429:                 if (s->tlsext_ticket_expected)",
          "430:                     s->state = SSL3_ST_SW_SESSION_TICKET_A;",
          "431:                 else",
          "432:                     s->state = SSL3_ST_SW_CHANGE_A;",
          "436:             } else",
          "437:                 s->state = SSL3_ST_SW_CERT_A;",
          "438:             s->init_num = 0;",
          "",
          "[Removed Lines]",
          "428: #ifndef OPENSSL_NO_TLSEXT",
          "433: #else",
          "434:                 s->state = SSL3_ST_SW_CHANGE_A;",
          "435: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:                 ret = ssl3_send_server_certificate(s);",
          "448:                 if (ret <= 0)",
          "449:                     goto end;",
          "451:                 if (s->tlsext_status_expected)",
          "452:                     s->state = SSL3_ST_SW_CERT_STATUS_A;",
          "453:                 else",
          "",
          "[Removed Lines]",
          "450: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456:                 skip = 1;",
          "457:                 s->state = SSL3_ST_SW_KEY_EXCH_A;",
          "458:             }",
          "465:             s->init_num = 0;",
          "466:             break;",
          "",
          "[Removed Lines]",
          "459: #else",
          "460:             } else",
          "461:                 skip = 1;",
          "463:             s->state = SSL3_ST_SW_KEY_EXCH_A;",
          "464: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "712:             dtls1_stop_timer(s);",
          "713:             if (s->hit)",
          "714:                 s->state = SSL_ST_OK;",
          "716:             else if (s->tlsext_ticket_expected)",
          "717:                 s->state = SSL3_ST_SW_SESSION_TICKET_A;",
          "719:             else",
          "720:                 s->state = SSL3_ST_SW_CHANGE_A;",
          "721:             s->init_num = 0;",
          "722:             break;",
          "725:         case SSL3_ST_SW_SESSION_TICKET_A:",
          "726:         case SSL3_ST_SW_SESSION_TICKET_B:",
          "727:             ret = ssl3_send_newsession_ticket(s);",
          "",
          "[Removed Lines]",
          "715: #ifndef OPENSSL_NO_TLSEXT",
          "718: #endif",
          "724: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:             s->init_num = 0;",
          "741:             break;",
          "745:         case SSL3_ST_SW_CHANGE_A:",
          "746:         case SSL3_ST_SW_CHANGE_B:",
          "",
          "[Removed Lines]",
          "743: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: static int ssl_set_version(SSL *s);",
          "167: static int ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b);",
          "169: static int ssl3_check_finished(SSL *s);",
          "171: static int ssl_cipher_list_to_bytes(SSL *s, STACK_OF(SSL_CIPHER) *sk,",
          "172:                                     unsigned char *p,",
          "173:                                     int (*put_cb) (const SSL_CIPHER *,",
          "",
          "[Removed Lines]",
          "168: #ifndef OPENSSL_NO_TLSEXT",
          "170: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:             if (s->hit) {",
          "311:                 s->state = SSL3_ST_CR_FINISHED_A;",
          "313:                 if (s->tlsext_ticket_expected) {",
          "315:                     s->state = SSL3_ST_CR_SESSION_TICKET_A;",
          "316:                 }",
          "318:             } else {",
          "319:                 s->state = SSL3_ST_CR_CERT_A;",
          "320:             }",
          "",
          "[Removed Lines]",
          "312: #ifndef OPENSSL_NO_TLSEXT",
          "317: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322:             break;",
          "323:         case SSL3_ST_CR_CERT_A:",
          "324:         case SSL3_ST_CR_CERT_B:",
          "327:             ret = ssl3_check_finished(s);",
          "328:             if (ret < 0)",
          "",
          "[Removed Lines]",
          "325: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "333:                 s->init_num = 0;",
          "334:                 break;",
          "335:             }",
          "339:             if (!",
          "",
          "[Removed Lines]",
          "336: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343:                 ret = ssl3_get_server_certificate(s);",
          "344:                 if (ret <= 0)",
          "345:                     goto end;",
          "347:                 if (s->tlsext_status_expected)",
          "348:                     s->state = SSL3_ST_CR_CERT_STATUS_A;",
          "349:                 else",
          "",
          "[Removed Lines]",
          "346: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352:                 skip = 1;",
          "353:                 s->state = SSL3_ST_CR_KEY_EXCH_A;",
          "354:             }",
          "361:             s->init_num = 0;",
          "362:             break;",
          "",
          "[Removed Lines]",
          "355: #else",
          "356:             } else",
          "357:                 skip = 1;",
          "359:             s->state = SSL3_ST_CR_KEY_EXCH_A;",
          "360: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "470:             if (ret <= 0)",
          "471:                 goto end;",
          "474:             s->state = SSL3_ST_CW_FINISHED_A;",
          "475: #else",
          "476:             if (s->s3->next_proto_neg_seen)",
          "",
          "[Removed Lines]",
          "473: #if defined(OPENSSL_NO_TLSEXT) || defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "463: #if defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "506:             break;",
          "509:         case SSL3_ST_CW_NEXT_PROTO_A:",
          "510:         case SSL3_ST_CW_NEXT_PROTO_B:",
          "511:             ret = ssl3_send_next_proto(s);",
          "",
          "[Removed Lines]",
          "508: #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "498: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "538:                     s->s3->delay_buf_pop_ret = 0;",
          "539:                 }",
          "540:             } else {",
          "545:                 if (s->tlsext_ticket_expected)",
          "546:                     s->s3->tmp.next_state = SSL3_ST_CR_SESSION_TICKET_A;",
          "547:                 else",
          "550:                     s->s3->tmp.next_state = SSL3_ST_CR_FINISHED_A;",
          "551:             }",
          "552:             s->init_num = 0;",
          "553:             break;",
          "556:         case SSL3_ST_CR_SESSION_TICKET_A:",
          "557:         case SSL3_ST_CR_SESSION_TICKET_B:",
          "558:             ret = ssl3_get_new_session_ticket(s);",
          "",
          "[Removed Lines]",
          "541: #ifndef OPENSSL_NO_TLSEXT",
          "548: #endif",
          "555: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "570:             s->state = SSL3_ST_CR_KEY_EXCH_A;",
          "571:             s->init_num = 0;",
          "572:             break;",
          "575:         case SSL3_ST_CR_FINISHED_A:",
          "576:         case SSL3_ST_CR_FINISHED_B:",
          "",
          "[Removed Lines]",
          "573: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "783:             goto err;",
          "785:         if ((sess == NULL) || (sess->ssl_version != s->version) ||",
          "793:             (!sess->session_id_length && !sess->tlsext_tick) ||",
          "795:             (sess->not_resumable)) {",
          "796:             if (!ssl_get_new_session(s, 0))",
          "797:                 goto err;",
          "",
          "[Removed Lines]",
          "786: #ifdef OPENSSL_NO_TLSEXT",
          "787:             !sess->session_id_length ||",
          "788: #else",
          "794: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "922: #endif",
          "927:         if (ssl_prepare_clienthello_tlsext(s) <= 0) {",
          "928:             SSLerr(SSL_F_SSL3_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "",
          "[Removed Lines]",
          "925: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "935:             SSLerr(SSL_F_SSL3_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "936:             goto err;",
          "937:         }",
          "940:         l = p - d;",
          "941:         if (!ssl_set_handshake_header(s, SSL3_MT_CLIENT_HELLO, l)) {",
          "",
          "[Removed Lines]",
          "938: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1082:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_SSL3_SESSION_ID_TOO_LONG);",
          "1083:         goto f_err;",
          "1084:     }",
          "",
          "[Removed Lines]",
          "1085: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1237:     }",
          "1238: #endif",
          "1242:     if (!ssl_parse_serverhello_tlsext(s, &p, d, n)) {",
          "1243:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_PARSE_TLSEXT);",
          "1244:         goto err;",
          "1245:     }",
          "1248:     if (p != (d + n)) {",
          "",
          "[Removed Lines]",
          "1240: #ifndef OPENSSL_NO_TLSEXT",
          "1246: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2240:     return (X509_NAME_cmp(*a, *b));",
          "2241: }",
          "2244: int ssl3_get_new_session_ticket(SSL *s)",
          "2245: {",
          "2246:     int ok, al, ret = 0, ticklen;",
          "",
          "[Removed Lines]",
          "2243: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2363:     s->state = SSL_ST_ERR;",
          "2364:     return (-1);",
          "2365: }",
          "2368: int ssl3_get_server_done(SSL *s)",
          "2369: {",
          "",
          "[Removed Lines]",
          "2366: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3457:     return (0);",
          "3458: }",
          "",
          "[Removed Lines]",
          "3460: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3507:     return 0;",
          "3508: }",
          "3511: int ssl3_send_next_proto(SSL *s)",
          "3512: {",
          "3513:     unsigned int len, padding_len;",
          "",
          "[Removed Lines]",
          "3510: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "3483: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3531:     return ssl3_do_write(s, SSL3_RT_HANDSHAKE);",
          "3532: }",
          "3534: #endif",
          "3536: int ssl_do_client_cert_cb(SSL *s, X509 **px509, EVP_PKEY **ppkey)",
          "",
          "[Removed Lines]",
          "3533: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2908:     BIO_free(s->s3->handshake_buffer);",
          "2909:     if (s->s3->handshake_dgst)",
          "2910:         ssl3_free_digest_list(s);",
          "2912:     OPENSSL_free(s->s3->alpn_selected);",
          "2915: #ifndef OPENSSL_NO_SRP",
          "2916:     SSL_SRP_CTX_free(s);",
          "",
          "[Removed Lines]",
          "2911: #ifndef OPENSSL_NO_TLSEXT",
          "2913: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2939: #ifndef OPENSSL_NO_EC",
          "2940:     EC_KEY_free(s->s3->tmp.ecdh);",
          "2941:     s->s3->tmp.ecdh = NULL;",
          "2945:     s->s3->is_probably_safari = 0;",
          "2949:     init_extra = s->s3->init_extra;",
          "2950:     BIO_free(s->s3->handshake_buffer);",
          "",
          "[Removed Lines]",
          "2942: #endif",
          "2943: #ifndef OPENSSL_NO_TLSEXT",
          "2944: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2952:     if (s->s3->handshake_dgst) {",
          "2953:         ssl3_free_digest_list(s);",
          "2954:     }",
          "2956:     if (s->s3->alpn_selected) {",
          "2957:         free(s->s3->alpn_selected);",
          "2958:         s->s3->alpn_selected = NULL;",
          "2959:     }",
          "2961:     memset(s->s3, 0, sizeof(*s->s3));",
          "2962:     s->s3->init_extra = init_extra;",
          "",
          "[Removed Lines]",
          "2955: #if !defined(OPENSSL_NO_TLSEXT)",
          "2960: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2969:     s->s3->in_read_app_data = 0;",
          "2970:     s->version = SSL3_VERSION;",
          "2973:     OPENSSL_free(s->next_proto_negotiated);",
          "2974:     s->next_proto_negotiated = NULL;",
          "2975:     s->next_proto_negotiated_len = 0;",
          "",
          "[Removed Lines]",
          "2972: #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "2966: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3109:             return (ret);",
          "3110:         }",
          "3113:     case SSL_CTRL_SET_TLSEXT_HOSTNAME:",
          "3114:         if (larg == TLSEXT_NAMETYPE_host_name) {",
          "3115:             OPENSSL_free(s->tlsext_hostname);",
          "",
          "[Removed Lines]",
          "3112: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3172:         ret = 1;",
          "3173:         break;",
          "3176:     case SSL_CTRL_TLS_EXT_SEND_HEARTBEAT:",
          "3177:         if (SSL_IS_DTLS(s))",
          "3178:             ret = dtls1_heartbeat(s);",
          "",
          "[Removed Lines]",
          "3175: # ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "[Added Lines]",
          "3168: #ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3191:             s->tlsext_heartbeat &= ~SSL_TLSEXT_HB_DONT_RECV_REQUESTS;",
          "3192:         ret = 1;",
          "3193:         break;",
          "3198:     case SSL_CTRL_CHAIN:",
          "3199:         if (larg)",
          "",
          "[Removed Lines]",
          "3194: # endif",
          "",
          "[Added Lines]",
          "3187: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3443:         }",
          "3444:         break;",
          "3445: #endif",
          "3447:     case SSL_CTRL_SET_TLSEXT_DEBUG_CB:",
          "3448:         s->tlsext_debug_cb = (void (*)(SSL *, int, int,",
          "3449:                                        unsigned char *, int, void *))fp;",
          "3450:         break;",
          "3452:     case SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB:",
          "3453:         {",
          "3454:             s->not_resumable_session_cb = (int (*)(SSL *, int))fp;",
          "",
          "[Removed Lines]",
          "3446: #ifndef OPENSSL_NO_TLSEXT",
          "3451: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3578:             return (0);",
          "3579:         }",
          "3582:     case SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG:",
          "3583:         ctx->tlsext_servername_arg = parg;",
          "3584:         break;",
          "",
          "[Removed Lines]",
          "3581: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3608:         ctx->tlsext_status_arg = parg;",
          "3609:         return 1;",
          "3612:     case SSL_CTRL_SET_TLS_EXT_SRP_USERNAME:",
          "3613:         ctx->srp_ctx.srp_Mask |= SSL_kSRP;",
          "3614:         OPENSSL_free(ctx->srp_ctx.login);",
          "",
          "[Removed Lines]",
          "3611: # ifndef OPENSSL_NO_SRP",
          "",
          "[Added Lines]",
          "3600: #ifndef OPENSSL_NO_SRP",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3638:     case SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH:",
          "3639:         ctx->srp_ctx.strength = larg;",
          "3640:         break;",
          "3644:     case SSL_CTRL_SET_CURVES:",
          "3645:         return tls1_set_curves(&ctx->tlsext_ellipticcurvelist,",
          "3646:                                &ctx->tlsext_ellipticcurvelist_length,",
          "",
          "[Removed Lines]",
          "3641: # endif",
          "3643: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "3630: #endif",
          "3632: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3650:         return tls1_set_curves_list(&ctx->tlsext_ellipticcurvelist,",
          "3651:                                     &ctx->tlsext_ellipticcurvelist_length,",
          "3652:                                     parg);",
          "3654:     case SSL_CTRL_SET_ECDH_AUTO:",
          "3655:         ctx->cert->ecdh_tmp_auto = larg;",
          "3656:         return 1;",
          "3659:     case SSL_CTRL_SET_SIGALGS:",
          "3660:         return tls1_set_sigalgs(ctx->cert, parg, larg, 0);",
          "",
          "[Removed Lines]",
          "3653: #  ifndef OPENSSL_NO_EC",
          "3657: #  endif",
          "3658: # endif",
          "",
          "[Added Lines]",
          "3645: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3759:         }",
          "3760:         break;",
          "3761: #endif",
          "3763:     case SSL_CTRL_SET_TLSEXT_SERVERNAME_CB:",
          "3764:         ctx->tlsext_servername_callback = (int (*)(SSL *, int *, void *))fp;",
          "3765:         break;",
          "",
          "[Removed Lines]",
          "3762: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3775:                                              HMAC_CTX *, int))fp;",
          "3776:         break;",
          "3779:     case SSL_CTRL_SET_SRP_VERIFY_PARAM_CB:",
          "3780:         ctx->srp_ctx.srp_Mask |= SSL_kSRP;",
          "3781:         ctx->srp_ctx.SRP_verify_param_callback = (int (*)(SSL *, void *))fp;",
          "",
          "[Removed Lines]",
          "3778: # ifndef OPENSSL_NO_SRP",
          "",
          "[Added Lines]",
          "3762: #ifndef OPENSSL_NO_SRP",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3790:         ctx->srp_ctx.SRP_give_srp_client_pwd_callback =",
          "3791:             (char *(*)(SSL *, void *))fp;",
          "3792:         break;",
          "3794: #endif",
          "3795:     case SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB:",
          "3796:         {",
          "",
          "[Removed Lines]",
          "3793: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3927: #endif",
          "3928:         }",
          "3931: # ifndef OPENSSL_NO_EC",
          "",
          "[Removed Lines]",
          "3930: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3946:             if (!ssl_security(s, SSL_SECOP_CIPHER_SHARED,",
          "3947:                               c->strength_bits, 0, c))",
          "3948:                 continue;",
          "3950:             if ((alg_k & SSL_kECDHE) && (alg_a & SSL_aECDSA)",
          "3951:                 && s->s3->is_probably_safari) {",
          "3952:                 if (!ret)",
          "",
          "[Removed Lines]",
          "3949: #if !defined(OPENSSL_NO_EC) && !defined(OPENSSL_NO_TLSEXT)",
          "",
          "[Added Lines]",
          "3930: #if !defined(OPENSSL_NO_EC)",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:             ret = ssl3_send_server_hello(s);",
          "388:             if (ret <= 0)",
          "389:                 goto end;",
          "391:             if (s->hit) {",
          "392:                 if (s->tlsext_ticket_expected)",
          "393:                     s->state = SSL3_ST_SW_SESSION_TICKET_A;",
          "394:                 else",
          "395:                     s->state = SSL3_ST_SW_CHANGE_A;",
          "402:                 s->state = SSL3_ST_SW_CERT_A;",
          "403:             s->init_num = 0;",
          "404:             break;",
          "",
          "[Removed Lines]",
          "390: #ifndef OPENSSL_NO_TLSEXT",
          "396:             }",
          "397: #else",
          "398:             if (s->hit)",
          "399:                 s->state = SSL3_ST_SW_CHANGE_A;",
          "400: #endif",
          "401:             else",
          "",
          "[Added Lines]",
          "396:             } else {",
          "398:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:                 ret = ssl3_send_server_certificate(s);",
          "415:                 if (ret <= 0)",
          "416:                     goto end;",
          "418:                 if (s->tlsext_status_expected)",
          "419:                     s->state = SSL3_ST_SW_CERT_STATUS_A;",
          "420:                 else",
          "",
          "[Removed Lines]",
          "417: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "423:                 skip = 1;",
          "424:                 s->state = SSL3_ST_SW_KEY_EXCH_A;",
          "425:             }",
          "432:             s->init_num = 0;",
          "433:             break;",
          "",
          "[Removed Lines]",
          "426: #else",
          "427:             } else",
          "428:                 skip = 1;",
          "430:             s->state = SSL3_ST_SW_KEY_EXCH_A;",
          "431: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "591:                 s->state = SSL3_ST_SR_FINISHED_A;",
          "592: #else",
          "593:                 if (s->s3->next_proto_neg_seen)",
          "",
          "[Removed Lines]",
          "590: #if defined(OPENSSL_NO_TLSEXT) || defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "580: #if defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "666:             if (ret <= 0)",
          "667:                 goto end;",
          "670:             s->state = SSL3_ST_SR_FINISHED_A;",
          "671: #else",
          "672:             if (s->s3->next_proto_neg_seen)",
          "",
          "[Removed Lines]",
          "669: #if defined(OPENSSL_NO_TLSEXT) || defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "659: #if defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "677:             s->init_num = 0;",
          "678:             break;",
          "681:         case SSL3_ST_SR_NEXT_PROTO_A:",
          "682:         case SSL3_ST_SR_NEXT_PROTO_B:",
          "",
          "[Removed Lines]",
          "680: #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "670: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "718:                 goto end;",
          "719:             if (s->hit)",
          "720:                 s->state = SSL_ST_OK;",
          "722:             else if (s->tlsext_ticket_expected)",
          "723:                 s->state = SSL3_ST_SW_SESSION_TICKET_A;",
          "725:             else",
          "726:                 s->state = SSL3_ST_SW_CHANGE_A;",
          "727:             s->init_num = 0;",
          "728:             break;",
          "731:         case SSL3_ST_SW_SESSION_TICKET_A:",
          "732:         case SSL3_ST_SW_SESSION_TICKET_B:",
          "733:             ret = ssl3_send_newsession_ticket(s);",
          "",
          "[Removed Lines]",
          "721: #ifndef OPENSSL_NO_TLSEXT",
          "724: #endif",
          "730: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "746:             s->init_num = 0;",
          "747:             break;",
          "751:         case SSL3_ST_SW_CHANGE_A:",
          "752:         case SSL3_ST_SW_CHANGE_B:",
          "",
          "[Removed Lines]",
          "749: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "790:                 goto end;",
          "791:             s->state = SSL3_ST_SW_FLUSH;",
          "792:             if (s->hit) {",
          "794:                 s->s3->tmp.next_state = SSL3_ST_SR_FINISHED_A;",
          "795: #else",
          "796:                 if (s->s3->next_proto_neg_seen) {",
          "",
          "[Removed Lines]",
          "793: #if defined(OPENSSL_NO_TLSEXT) || defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "778: #if defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1361:         }",
          "1362:     }",
          "1366:     if (s->version >= SSL3_VERSION) {",
          "1367:         if (!ssl_parse_clienthello_tlsext(s, &p, d, n)) {",
          "",
          "[Removed Lines]",
          "1364: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1418:             s->cipher_list_by_id = sk_SSL_CIPHER_dup(s->session->ciphers);",
          "1419:         }",
          "1420:     }",
          "",
          "[Removed Lines]",
          "1421: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1603:     if (s->state == SSL3_ST_SW_SRVR_HELLO_A) {",
          "1604:         buf = (unsigned char *)s->init_buf->data;",
          "1606:         p = s->s3->server_random;",
          "1607:         if (ssl_fill_hello_random(s, 1, p, SSL3_RANDOM_SIZE) <= 0) {",
          "1608:             s->state = SSL_ST_ERR;",
          "1609:             return -1;",
          "1610:         }",
          "1613:         d = p = ssl_handshake_start(s);",
          "",
          "[Removed Lines]",
          "1605: #ifdef OPENSSL_NO_TLSEXT",
          "1611: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1663:         else",
          "1665: #endif",
          "1667:         if (ssl_prepare_serverhello_tlsext(s) <= 0) {",
          "1668:             SSLerr(SSL_F_SSL3_SEND_SERVER_HELLO, SSL_R_SERVERHELLO_TLSEXT);",
          "1669:             s->state = SSL_ST_ERR;",
          "",
          "[Removed Lines]",
          "1666: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1677:             s->state = SSL_ST_ERR;",
          "1678:             return -1;",
          "1679:         }",
          "1682:         l = (p - d);",
          "1683:         if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_HELLO, l)) {",
          "",
          "[Removed Lines]",
          "1680: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3266:     return ssl_do_write(s);",
          "3267: }",
          "3271: int ssl3_send_newsession_ticket(SSL *s)",
          "3272: {",
          "",
          "[Removed Lines]",
          "3269: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3454:     return (ssl3_do_write(s, SSL3_RT_HANDSHAKE));",
          "3455: }",
          "",
          "[Removed Lines]",
          "3457: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "3439: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3534:     return 1;",
          "3535: }",
          "3538: #endif",
          "3540: #define SSLV2_CIPHER_LEN    3",
          "",
          "[Removed Lines]",
          "3536: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_asn1.c||ssl/ssl_asn1.c": [
          "File: ssl/ssl_asn1.c -> ssl/ssl_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     X509 *peer;",
          "102:     ASN1_OCTET_STRING *session_id_context;",
          "103:     long verify_result;",
          "105:     ASN1_OCTET_STRING *tlsext_hostname;",
          "106:     long tlsext_tick_lifetime_hint;",
          "107:     ASN1_OCTET_STRING *tlsext_tick;",
          "109: #ifndef OPENSSL_NO_PSK",
          "110:     ASN1_OCTET_STRING *psk_identity_hint;",
          "111:     ASN1_OCTET_STRING *psk_identity;",
          "",
          "[Removed Lines]",
          "104: #ifndef OPENSSL_NO_TLSEXT",
          "108: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     ASN1_EXP_OPT(SSL_SESSION_ASN1, peer, X509, 3),",
          "129:     ASN1_EXP_OPT(SSL_SESSION_ASN1, session_id_context, ASN1_OCTET_STRING, 4),",
          "130:     ASN1_EXP_OPT(SSL_SESSION_ASN1, verify_result, ZLONG, 5),",
          "132:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_hostname, ASN1_OCTET_STRING, 6),",
          "134: #ifndef OPENSSL_NO_PSK",
          "135:     ASN1_EXP_OPT(SSL_SESSION_ASN1, psk_identity_hint, ASN1_OCTET_STRING, 7),",
          "136:     ASN1_EXP_OPT(SSL_SESSION_ASN1, psk_identity, ASN1_OCTET_STRING, 8),",
          "137: #endif",
          "139:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_tick_lifetime_hint, ZLONG, 9),",
          "140:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_tick, ASN1_OCTET_STRING, 10),",
          "142:     ASN1_EXP_OPT(SSL_SESSION_ASN1, comp_id, ASN1_OCTET_STRING, 11),",
          "143: #ifndef OPENSSL_NO_SRP",
          "144:     ASN1_EXP_OPT(SSL_SESSION_ASN1, srp_username, ASN1_OCTET_STRING, 12),",
          "",
          "[Removed Lines]",
          "131: #ifndef OPENSSL_NO_TLSEXT",
          "133: #endif",
          "138: #ifndef OPENSSL_NO_TLSEXT",
          "141: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:     unsigned char comp_id_data;",
          "186: #endif",
          "189:     ASN1_OCTET_STRING tlsext_hostname, tlsext_tick;",
          "192: #ifndef OPENSSL_NO_SRP",
          "193:     ASN1_OCTET_STRING srp_username;",
          "",
          "[Removed Lines]",
          "188: #ifndef OPENSSL_NO_TLSEXT",
          "190: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:     as.peer = in->peer;",
          "242:     ssl_session_sinit(&as.tlsext_hostname, &tlsext_hostname,",
          "243:                       in->tlsext_hostname);",
          "244:     if (in->tlsext_tick) {",
          "",
          "[Removed Lines]",
          "241: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "374:     ret->verify_result = as->verify_result;",
          "377:     if (!ssl_session_strndup(&ret->tlsext_hostname, as->tlsext_hostname))",
          "378:         goto err;",
          "381: #ifndef OPENSSL_NO_PSK",
          "382:     if (!ssl_session_strndup(&ret->psk_identity_hint, as->psk_identity_hint))",
          "",
          "[Removed Lines]",
          "376: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "385:         goto err;",
          "386: #endif",
          "389:     ret->tlsext_tick_lifetime_hint = as->tlsext_tick_lifetime_hint;",
          "390:     if (as->tlsext_tick) {",
          "391:         ret->tlsext_tick = as->tlsext_tick->data;",
          "",
          "[Removed Lines]",
          "388: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:                 goto err;",
          "266:             }",
          "267:         }",
          "269:         if (cert->pkeys[i].serverinfo != NULL) {",
          "271:             ret->pkeys[i].serverinfo =",
          "",
          "[Removed Lines]",
          "268: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "268:         rpk->valid_flags = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:                    cert->pkeys[i].serverinfo,",
          "281:                    cert->pkeys[i].serverinfo_length);",
          "282:         }",
          "284:     }",
          "286:     ret->references = 1;",
          "",
          "[Removed Lines]",
          "283: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:     ret->sec_level = cert->sec_level;",
          "335:     ret->sec_ex = cert->sec_ex;",
          "338:     if (!custom_exts_copy(&ret->cli_ext, &cert->cli_ext))",
          "339:         goto err;",
          "340:     if (!custom_exts_copy(&ret->srv_ext, &cert->srv_ext))",
          "341:         goto err;",
          "344:     return (ret);",
          "",
          "[Removed Lines]",
          "337: #ifndef OPENSSL_NO_TLSEXT",
          "342: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "364:         cpk->privatekey = NULL;",
          "365:         sk_X509_pop_free(cpk->chain, X509_free);",
          "366:         cpk->chain = NULL;",
          "368:         OPENSSL_free(cpk->serverinfo);",
          "369:         cpk->serverinfo = NULL;",
          "370:         cpk->serverinfo_length = 0;",
          "372:     }",
          "373: }",
          "",
          "[Removed Lines]",
          "367: #ifndef OPENSSL_NO_TLSEXT",
          "371: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "409:     OPENSSL_free(c->ctypes);",
          "410:     X509_STORE_free(c->verify_store);",
          "411:     X509_STORE_free(c->chain_store);",
          "413:     custom_exts_free(&c->cli_ext);",
          "414:     custom_exts_free(&c->srv_ext);",
          "416:     OPENSSL_free(c);",
          "417: }",
          "",
          "[Removed Lines]",
          "412: #ifndef OPENSSL_NO_TLSEXT",
          "415: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_conf.c||ssl/ssl_conf.c": [
          "File: ssl/ssl_conf.c -> ssl/ssl_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     SSL_CONF_CMD_SWITCH(\"bugs\", 0),",
          "434:     SSL_CONF_CMD_SWITCH(\"no_comp\", 0),",
          "435:     SSL_CONF_CMD_SWITCH(\"ecdh_single\", SSL_CONF_FLAG_SERVER),",
          "437:     SSL_CONF_CMD_SWITCH(\"no_ticket\", 0),",
          "439:     SSL_CONF_CMD_SWITCH(\"serverpref\", SSL_CONF_FLAG_SERVER),",
          "440:     SSL_CONF_CMD_SWITCH(\"legacy_renegotiation\", 0),",
          "441:     SSL_CONF_CMD_SWITCH(\"legacy_server_connect\", SSL_CONF_FLAG_SERVER),",
          "",
          "[Removed Lines]",
          "436: #ifndef OPENSSL_NO_TLSEXT",
          "438: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485:     {SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION, 0},",
          "",
          "[Removed Lines]",
          "480: #ifndef OPENSSL_NO_TLSEXT",
          "482: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:     CRYPTO_add(&ctx->references, 1, CRYPTO_LOCK_SSL_CTX);",
          "317:     s->ctx = ctx;",
          "319:     s->tlsext_debug_cb = 0;",
          "320:     s->tlsext_debug_arg = NULL;",
          "321:     s->tlsext_ticket_expected = 0;",
          "",
          "[Removed Lines]",
          "318: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:                s->ctx->alpn_client_proto_list_len);",
          "361:         s->alpn_client_proto_list_len = s->ctx->alpn_client_proto_list_len;",
          "362:     }",
          "365:     s->verify_result = X509_V_OK;",
          "",
          "[Removed Lines]",
          "363: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "557:     ssl_cert_free(s->cert);",
          "561:     OPENSSL_free(s->tlsext_hostname);",
          "562:     SSL_CTX_free(s->initial_ctx);",
          "564:     OPENSSL_free(s->tlsext_ecpointformatlist);",
          "565:     OPENSSL_free(s->tlsext_ellipticcurvelist);",
          "567:     sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts, X509_EXTENSION_free);",
          "568:     sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids, OCSP_RESPID_free);",
          "569:     OPENSSL_free(s->tlsext_ocsp_resp);",
          "570:     OPENSSL_free(s->alpn_client_proto_list);",
          "573:     sk_X509_NAME_pop_free(s->client_CA, X509_NAME_free);",
          "",
          "[Removed Lines]",
          "560: #ifndef OPENSSL_NO_TLSEXT",
          "563: # ifndef OPENSSL_NO_EC",
          "571: #endif",
          "",
          "[Added Lines]",
          "560: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "580:     SSL_CTX_free(s->ctx);",
          "583:     OPENSSL_free(s->next_proto_negotiated);",
          "584: #endif",
          "",
          "[Removed Lines]",
          "582: #if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "[Added Lines]",
          "578: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1394:     return (buf);",
          "1395: }",
          "",
          "[Removed Lines]",
          "1397: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1476:     return status;",
          "1477: }",
          "",
          "[Removed Lines]",
          "1479: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "1474: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1537:     ctx->next_proto_select_cb = cb;",
          "1538:     ctx->next_proto_select_cb_arg = arg;",
          "1539: }",
          "",
          "[Removed Lines]",
          "1540: # endif",
          "",
          "[Added Lines]",
          "1535: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1766:     ret->max_send_fragment = SSL3_RT_MAX_PLAIN_LENGTH;",
          "1769:     ret->tlsext_servername_callback = 0;",
          "1770:     ret->tlsext_servername_arg = NULL;",
          "",
          "[Removed Lines]",
          "1768: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1777:     ret->tlsext_status_cb = 0;",
          "1778:     ret->tlsext_status_arg = NULL;",
          "1781:     ret->next_protos_advertised_cb = 0;",
          "1782:     ret->next_proto_select_cb = 0;",
          "1784: #endif",
          "1785: #ifndef OPENSSL_NO_PSK",
          "1786:     ret->psk_identity_hint = NULL;",
          "",
          "[Removed Lines]",
          "1780: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "1783: # endif",
          "",
          "[Added Lines]",
          "1773: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1881:         ENGINE_finish(a->client_cert_engine);",
          "1882: #endif",
          "1886:     OPENSSL_free(a->tlsext_ecpointformatlist);",
          "1887:     OPENSSL_free(a->tlsext_ellipticcurvelist);",
          "1890: #endif",
          "1892:     OPENSSL_free(a);",
          "1893: }",
          "",
          "[Removed Lines]",
          "1884: #ifndef OPENSSL_NO_TLSEXT",
          "1885: # ifndef OPENSSL_NO_EC",
          "1888: # endif",
          "1889:     OPENSSL_free(a->alpn_client_proto_list);",
          "",
          "[Added Lines]",
          "1876: #ifndef OPENSSL_NO_EC",
          "1880:     OPENSSL_free(a->alpn_client_proto_list);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2273:     return c->pkeys[idx].privatekey;",
          "2274: }",
          "2277: int ssl_get_server_cert_serverinfo(SSL *s, const unsigned char **serverinfo,",
          "2278:                                    size_t *serverinfo_length)",
          "2279: {",
          "",
          "[Removed Lines]",
          "2276: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2294:     return 1;",
          "2295: }",
          "2298: void ssl_update_cache(SSL *s, int mode)",
          "2299: {",
          "",
          "[Removed Lines]",
          "2296: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2818:     CERT *new_cert;",
          "2819:     if (ssl->ctx == ctx)",
          "2820:         return ssl->ctx;",
          "2822:     if (ctx == NULL)",
          "2823:         ctx = ssl->initial_ctx;",
          "2825:     new_cert = ssl_cert_dup(ctx->cert);",
          "2826:     if (new_cert == NULL) {",
          "2827:         return NULL;",
          "",
          "[Removed Lines]",
          "2821: #ifndef OPENSSL_NO_TLSEXT",
          "2824: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "654:     struct ssl_session_st *prev, *next;",
          "656:     char *tlsext_hostname;",
          "658:     size_t tlsext_ecpointformatlist_length;",
          "660:     size_t tlsext_ellipticcurvelist_length;",
          "668: # ifndef OPENSSL_NO_SRP",
          "669:     char *srp_username;",
          "670: # endif",
          "",
          "[Removed Lines]",
          "655: # ifndef OPENSSL_NO_TLSEXT",
          "657: #  ifndef OPENSSL_NO_EC",
          "667: # endif",
          "",
          "[Added Lines]",
          "656: # ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "850:     ENGINE *client_cert_engine;",
          "851: #  endif",
          "855:     int (*tlsext_servername_callback) (SSL *, int *, void *);",
          "856:     void *tlsext_servername_arg;",
          "",
          "[Removed Lines]",
          "853: #  ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "869:     int (*tlsext_status_cb) (SSL *ssl, void *arg);",
          "870:     void *tlsext_status_arg;",
          "873: #  ifndef OPENSSL_NO_PSK",
          "874:     char *psk_identity_hint;",
          "",
          "[Removed Lines]",
          "871: #  endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "887: #  endif",
          "",
          "[Removed Lines]",
          "889: #  ifndef OPENSSL_NO_TLSEXT",
          "891: #   ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "885: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "908:                                  const unsigned char *in,",
          "909:                                  unsigned int inlen, void *arg);",
          "910:     void *next_proto_select_cb_arg;",
          "",
          "[Removed Lines]",
          "911: #   endif",
          "",
          "[Added Lines]",
          "905: #  endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "943:     STACK_OF(SRTP_PROTECTION_PROFILE) *srtp_profiles;",
          "",
          "[Removed Lines]",
          "944: #  endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1097:     int client_version;",
          "1098:     unsigned int max_send_fragment;",
          "1101:     void (*tlsext_debug_cb) (SSL *s, int client_server, int type,",
          "1102:                              unsigned char *data, int len, void *arg);",
          "",
          "[Removed Lines]",
          "1099: #  ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1122:     int tlsext_ocsp_resplen;",
          "1124:     int tlsext_ticket_expected;",
          "1126:     size_t tlsext_ecpointformatlist_length;",
          "1128:     unsigned char *tlsext_ecpointformatlist;",
          "1129:     size_t tlsext_ellipticcurvelist_length;",
          "1131:     unsigned char *tlsext_ellipticcurvelist;",
          "1134:     TLS_SESSION_TICKET_EXT *tlsext_session_ticket;",
          "",
          "[Removed Lines]",
          "1125: #   ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "1118: #  ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1139:     tls_session_secret_cb_fn tls_session_secret_cb;",
          "1140:     void *tls_session_secret_cb_arg;",
          "",
          "[Removed Lines]",
          "1142: #   ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "1135: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1150:     unsigned char *next_proto_negotiated;",
          "1151:     unsigned char next_proto_negotiated_len;",
          "1155:     STACK_OF(SRTP_PROTECTION_PROFILE) *srtp_profiles;",
          "",
          "[Removed Lines]",
          "1152: #   endif",
          "1153: #   define session_ctx initial_ctx",
          "",
          "[Added Lines]",
          "1145: #  endif",
          "1146: #  define session_ctx initial_ctx",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1173:     unsigned char *alpn_client_proto_list;",
          "1174:     unsigned alpn_client_proto_list_len;",
          "",
          "[Removed Lines]",
          "1175: #  else",
          "1176: #   define session_ctx ctx",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1328:     int next_proto_neg_seen;",
          "1329: #  endif",
          "",
          "[Removed Lines]",
          "1331: #  ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1462:     EVP_PKEY *privatekey;",
          "1464:     STACK_OF(X509) *chain;",
          "",
          "[Removed Lines]",
          "1465: # ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1473:     unsigned char *serverinfo;",
          "1474:     size_t serverinfo_length;",
          "1476: } CERT_PKEY;",
          "1478: # define tls1_suiteb(s)  (s->cert->cert_flags & SSL_CERT_FLAG_SUITEB_128_LOS)",
          "",
          "[Removed Lines]",
          "1475: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1916: __owur int ssl_undefined_void_function(void);",
          "1917: __owur int ssl_undefined_const_function(const SSL *s);",
          "1918: __owur CERT_PKEY *ssl_get_server_send_pkey(SSL *s);",
          "1920: __owur int ssl_get_server_cert_serverinfo(SSL *s, const unsigned char **serverinfo,",
          "1921:                                    size_t *serverinfo_length);",
          "1923: __owur EVP_PKEY *ssl_get_sign_pkey(SSL *s, const SSL_CIPHER *c, const EVP_MD **pmd);",
          "1924: __owur int ssl_cert_type(X509 *x, EVP_PKEY *pkey);",
          "1925: void ssl_set_masks(SSL *s, const SSL_CIPHER *cipher);",
          "",
          "[Removed Lines]",
          "1919: #  ifndef OPENSSL_NO_TLSEXT",
          "1922: #  endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2031: __owur int ssl3_get_key_exchange(SSL *s);",
          "2032: __owur int ssl3_get_server_certificate(SSL *s);",
          "2033: __owur int ssl3_check_cert_and_algorithm(SSL *s);",
          "2036: __owur int ssl3_send_next_proto(SSL *s);",
          "2038: #  endif",
          "2040: int dtls1_client_hello(SSL *s);",
          "",
          "[Removed Lines]",
          "2034: #  ifndef OPENSSL_NO_TLSEXT",
          "2035: #   ifndef OPENSSL_NO_NEXTPROTONEG",
          "2037: #   endif",
          "",
          "[Added Lines]",
          "2018: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2106: __owur int tls1_check_ec_tmp_key(SSL *s, unsigned long id);",
          "2110: __owur int tls1_shared_list(SSL *s,",
          "2111:                      const unsigned char *l1, size_t l1len,",
          "2112:                      const unsigned char *l2, size_t l2len, int nmatch);",
          "",
          "[Removed Lines]",
          "2109: #  ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2123: __owur int ssl_prepare_clienthello_tlsext(SSL *s);",
          "2124: __owur int ssl_prepare_serverhello_tlsext(SSL *s);",
          "2127: __owur int tls1_heartbeat(SSL *s);",
          "2128: __owur int dtls1_heartbeat(SSL *s);",
          "2129: __owur int tls1_process_heartbeat(SSL *s, unsigned char *p, unsigned int length);",
          "2130: __owur int dtls1_process_heartbeat(SSL *s, unsigned char *p, unsigned int length);",
          "2133: __owur int tls1_process_ticket(SSL *s, unsigned char *session_id, int len,",
          "2134:                         const unsigned char *limit, SSL_SESSION **ret);",
          "",
          "[Removed Lines]",
          "2126: #   ifndef OPENSSL_NO_HEARTBEATS",
          "2131: #   endif",
          "",
          "[Added Lines]",
          "2107: #  ifndef OPENSSL_NO_HEARTBEATS",
          "2112: #  endif",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2145:                      int idx);",
          "2146: void tls1_set_cert_validity(SSL *s);",
          "2149: #  ifndef OPENSSL_NO_DH",
          "2150: __owur DH *ssl_get_auto_dh(SSL *s);",
          "2151: #  endif",
          "",
          "[Removed Lines]",
          "2148: #  endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_rsa.c||ssl/ssl_rsa.c": [
          "File: ssl/ssl_rsa.c -> ssl/ssl_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "738: }",
          "739: #endif",
          "742: static int serverinfo_find_extension(const unsigned char *serverinfo,",
          "743:                                      size_t serverinfo_length,",
          "744:                                      unsigned int extension_type,",
          "",
          "[Removed Lines]",
          "741: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:     return 1;",
          "911: }",
          "914: int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file)",
          "915: {",
          "916:     unsigned char *serverinfo = NULL;",
          "",
          "[Removed Lines]",
          "913: # ifndef OPENSSL_NO_STDIO",
          "",
          "[Added Lines]",
          "912: #ifndef OPENSSL_NO_STDIO",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:     ss->prev = NULL;",
          "208:     ss->next = NULL;",
          "209:     ss->compress_meth = 0;",
          "211:     ss->tlsext_hostname = NULL;",
          "213:     ss->tlsext_ecpointformatlist_length = 0;",
          "214:     ss->tlsext_ecpointformatlist = NULL;",
          "215:     ss->tlsext_ellipticcurvelist_length = 0;",
          "216:     ss->tlsext_ellipticcurvelist = NULL;",
          "218: #endif",
          "219:     CRYPTO_new_ex_data(CRYPTO_EX_INDEX_SSL_SESSION, ss, &ss->ex_data);",
          "220: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "210: #ifndef OPENSSL_NO_TLSEXT",
          "212: # ifndef OPENSSL_NO_EC",
          "217: # endif",
          "",
          "[Added Lines]",
          "211: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:             SSL_SESSION_free(ss);",
          "323:             return (0);",
          "324:         }",
          "",
          "[Removed Lines]",
          "325: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "342:             ss->session_id_length = 0;",
          "343:             goto sess_id_done;",
          "344:         }",
          "347:         CRYPTO_r_lock(CRYPTO_LOCK_SSL_CTX);",
          "348:         if (s->generate_session_id)",
          "",
          "[Removed Lines]",
          "345: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:             SSL_SESSION_free(ss);",
          "379:             return (0);",
          "380:         }",
          "382:  sess_id_done:",
          "383:         if (s->tlsext_hostname) {",
          "384:             ss->tlsext_hostname = BUF_strdup(s->tlsext_hostname);",
          "",
          "[Removed Lines]",
          "381: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "388:                 return 0;",
          "389:             }",
          "390:         }",
          "392:     } else {",
          "393:         ss->session_id_length = 0;",
          "394:     }",
          "",
          "[Removed Lines]",
          "391: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "435:     SSL_SESSION *ret = NULL;",
          "436:     int fatal = 0;",
          "437:     int try_session_cache = 1;",
          "439:     int r;",
          "442:     if (len < 0 || len > SSL_MAX_SSL_SESSION_ID_LENGTH)",
          "443:         goto err;",
          "",
          "[Removed Lines]",
          "438: #ifndef OPENSSL_NO_TLSEXT",
          "440: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "450:     if (len == 0)",
          "451:         try_session_cache = 0;",
          "455:     r = tls1_process_ticket(s, session_id, len, limit, &ret);",
          "456:     switch (r) {",
          "",
          "[Removed Lines]",
          "453: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "467:     default:",
          "468:         abort();",
          "469:     }",
          "472:     if (try_session_cache &&",
          "473:         ret == NULL &&",
          "",
          "[Removed Lines]",
          "470: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "589:  err:",
          "590:     if (ret != NULL) {",
          "591:         SSL_SESSION_free(ret);",
          "593:         if (!try_session_cache) {",
          "",
          "[Removed Lines]",
          "592: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "598:             s->tlsext_ticket_expected = 1;",
          "599:         }",
          "601:     }",
          "602:     if (fatal)",
          "603:         return -1;",
          "",
          "[Removed Lines]",
          "600: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "734:     ssl_sess_cert_free(ss->sess_cert);",
          "735:     X509_free(ss->peer);",
          "736:     sk_SSL_CIPHER_free(ss->ciphers);",
          "738:     OPENSSL_free(ss->tlsext_hostname);",
          "739:     OPENSSL_free(ss->tlsext_tick);",
          "741:     ss->tlsext_ecpointformatlist_length = 0;",
          "742:     OPENSSL_free(ss->tlsext_ecpointformatlist);",
          "743:     ss->tlsext_ellipticcurvelist_length = 0;",
          "744:     OPENSSL_free(ss->tlsext_ellipticcurvelist);",
          "747: #ifndef OPENSSL_NO_PSK",
          "748:     OPENSSL_free(ss->psk_identity_hint);",
          "749:     OPENSSL_free(ss->psk_identity);",
          "",
          "[Removed Lines]",
          "737: #ifndef OPENSSL_NO_TLSEXT",
          "740: # ifndef OPENSSL_NO_EC",
          "746: #endif",
          "",
          "[Added Lines]",
          "731: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "877:     return (s->session_timeout);",
          "878: }",
          "881: int SSL_set_session_secret_cb(SSL *s,",
          "882:                               int (*tls_session_secret_cb) (SSL *s,",
          "883:                                                             void *secret,",
          "",
          "[Removed Lines]",
          "880: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_txt.c||ssl/ssl_txt.c": [
          "File: ssl/ssl_txt.c -> ssl/ssl_txt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     if (BIO_printf(bp, \"%s\", x->srp_username ? x->srp_username : \"None\") <= 0)",
          "183:         goto err;",
          "184: #endif",
          "186:     if (x->tlsext_tick_lifetime_hint) {",
          "187:         if (BIO_printf(bp,",
          "188:                        \"\\n    TLS session ticket lifetime hint: %ld (seconds)\",",
          "",
          "[Removed Lines]",
          "185: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:             <= 0)",
          "197:             goto err;",
          "198:     }",
          "201: #ifndef OPENSSL_NO_COMP",
          "202:     if (x->compress_meth != 0) {",
          "",
          "[Removed Lines]",
          "199: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_ext.c||ssl/t1_ext.c": [
          "File: ssl/t1_ext.c -> ssl/t1_ext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: #include \"ssl_locl.h\"",
          "63: static custom_ext_method *custom_ext_find(custom_ext_methods *exts,",
          "",
          "[Removed Lines]",
          "60: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:     case TLSEXT_TYPE_srp:",
          "284:     case TLSEXT_TYPE_status_request:",
          "285:     case TLSEXT_TYPE_use_srtp:",
          "287:     case TLSEXT_TYPE_encrypt_then_mac:",
          "289:         return 1;",
          "290:     default:",
          "291:         return 0;",
          "292:     }",
          "293: }",
          "",
          "[Removed Lines]",
          "286: # ifdef TLSEXT_TYPE_encrypt_then_mac",
          "288: # endif",
          "294: #endif",
          "",
          "[Added Lines]",
          "285: #ifdef TLSEXT_TYPE_encrypt_then_mac",
          "287: #endif",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: const char tls1_version_str[] = \"TLSv1\" OPENSSL_VERSION_PTEXT;",
          "127: static int tls_decrypt_ticket(SSL *s, const unsigned char *tick, int ticklen,",
          "128:                               const unsigned char *sess_id, int sesslen,",
          "129:                               SSL_SESSION **psess);",
          "130: static int ssl_check_clienthello_tlsext_early(SSL *s);",
          "131: int ssl_check_serverhello_tlsext(SSL *s);",
          "134: SSL3_ENC_METHOD const TLSv1_enc_data = {",
          "135:     tls1_enc,",
          "",
          "[Removed Lines]",
          "126: #ifndef OPENSSL_NO_TLSEXT",
          "132: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209: void tls1_free(SSL *s)",
          "210: {",
          "212:     OPENSSL_free(s->tlsext_session_ticket);",
          "214:     ssl3_free(s);",
          "215: }",
          "",
          "[Removed Lines]",
          "211: #ifndef OPENSSL_NO_TLSEXT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "941:                 tlsext_sigalg_rsa(md) \\",
          "942:                 tlsext_sigalg_dsa(md) \\",
          "943:                 tlsext_sigalg_ecdsa(md)",
          "",
          "[Removed Lines]",
          "915: #ifndef OPENSSL_NO_TLSEXT",
          "922: # ifdef OPENSSL_NO_RSA",
          "924: # else",
          "925: #  define tlsext_sigalg_rsa(md) md, TLSEXT_signature_rsa,",
          "926: # endif",
          "928: # ifdef OPENSSL_NO_DSA",
          "930: # else",
          "931: #  define tlsext_sigalg_dsa(md) md, TLSEXT_signature_dsa,",
          "932: # endif",
          "934: # ifdef OPENSSL_NO_EC",
          "936: # else",
          "937: #  define tlsext_sigalg_ecdsa(md) md, TLSEXT_signature_ecdsa,",
          "938: # endif",
          "940: # define tlsext_sigalg(md) \\",
          "",
          "[Added Lines]",
          "916: #ifdef OPENSSL_NO_RSA",
          "918: #else",
          "919: # define tlsext_sigalg_rsa(md) md, TLSEXT_signature_rsa,",
          "920: #endif",
          "922: #ifdef OPENSSL_NO_DSA",
          "924: #else",
          "925: # define tlsext_sigalg_dsa(md) md, TLSEXT_signature_dsa,",
          "926: #endif",
          "928: #ifdef OPENSSL_NO_EC",
          "930: #else",
          "931: # define tlsext_sigalg_ecdsa(md) md, TLSEXT_signature_ecdsa,",
          "932: #endif",
          "934: #define tlsext_sigalg(md) \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "950:         tlsext_sigalg(TLSEXT_hash_sha1)",
          "951: };",
          "954: static const unsigned char suiteb_sigalgs[] = {",
          "955:     tlsext_sigalg_ecdsa(TLSEXT_hash_sha256)",
          "956:         tlsext_sigalg_ecdsa(TLSEXT_hash_sha384)",
          "957: };",
          "959: size_t tls12_get_psigalgs(SSL *s, const unsigned char **psigs)",
          "960: {",
          "966:     switch (tls1_suiteb(s)) {",
          "967:     case SSL_CERT_FLAG_SUITEB_128_LOS:",
          "",
          "[Removed Lines]",
          "953: # ifndef OPENSSL_NO_EC",
          "958: # endif",
          "965: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "947: #ifndef OPENSSL_NO_EC",
          "952: #endif",
          "959: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "977:         return 2;",
          "978:     }",
          "981:     if (s->server && s->cert->client_sigalgs) {",
          "",
          "[Removed Lines]",
          "979: # endif",
          "",
          "[Added Lines]",
          "973: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1008:         SSLerr(SSL_F_TLS12_CHECK_PEER_SIGALG, SSL_R_WRONG_SIGNATURE_TYPE);",
          "1009:         return 0;",
          "1010:     }",
          "1012:     if (pkey->type == EVP_PKEY_EC) {",
          "1013:         unsigned char curve_id[2], comp_id;",
          "",
          "[Removed Lines]",
          "1011: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "1005: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1039:         }",
          "1040:     } else if (tls1_suiteb(s))",
          "1041:         return 0;",
          "1045:     sent_sigslen = tls12_get_psigalgs(s, &sent_sigs);",
          "",
          "[Removed Lines]",
          "1042: # endif",
          "",
          "[Added Lines]",
          "1036: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1105:         s->s3->tmp.mask_a |= SSL_aPSK;",
          "1106:         s->s3->tmp.mask_k |= SSL_kPSK;",
          "1107:     }",
          "1110:     if (!(s->srp_ctx.srp_Mask & SSL_kSRP)) {",
          "1111:         s->s3->tmp.mask_a |= SSL_aSRP;",
          "1112:         s->s3->tmp.mask_k |= SSL_kSRP;",
          "1113:     }",
          "1115: }",
          "1117: int ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op)",
          "",
          "[Removed Lines]",
          "1109: # ifndef OPENSSL_NO_SRP",
          "1114: # endif",
          "",
          "[Added Lines]",
          "1103: #ifndef OPENSSL_NO_SRP",
          "1108: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1136:     int extdatalen = 0;",
          "1137:     unsigned char *orig = buf;",
          "1138:     unsigned char *ret = buf;",
          "1141:     int using_ecc = 0;",
          "1142:     if (s->version >= TLS1_VERSION || SSL_IS_DTLS(s)) {",
          "",
          "[Removed Lines]",
          "1139: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "1133: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1156:             }",
          "1157:         }",
          "1158:     }",
          "1161:     ret += 2;",
          "",
          "[Removed Lines]",
          "1159: # endif",
          "",
          "[Added Lines]",
          "1153: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1221:         memcpy(ret, s->tlsext_hostname, size_str);",
          "1222:         ret += size_str;",
          "1223:     }",
          "1226:     if (s->srp_ctx.login != NULL) { /* Add TLS extension SRP username to the",
          "",
          "[Removed Lines]",
          "1224: # ifndef OPENSSL_NO_SRP",
          "",
          "[Added Lines]",
          "1218: #ifndef OPENSSL_NO_SRP",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1248:         memcpy(ret, s->srp_ctx.login, login_len);",
          "1249:         ret += login_len;",
          "1250:     }",
          "1254:     if (using_ecc) {",
          "",
          "[Removed Lines]",
          "1251: # endif",
          "1253: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "1245: #endif",
          "1247: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1407:         if (extlen > 0)",
          "1408:             i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, &ret);",
          "1409:     }",
          "1412:     if ((limit - ret - 4 - 1) < 0)",
          "1413:         return NULL;",
          "",
          "[Removed Lines]",
          "1410: # ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "[Added Lines]",
          "1404: #ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1423:     else",
          "1428:     if (s->ctx->next_proto_select_cb && !s->s3->tmp.finish_md_len) {",
          "",
          "[Removed Lines]",
          "1425: # endif",
          "1427: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "1419: #endif",
          "1421: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1435:         s2n(TLSEXT_TYPE_next_proto_neg, ret);",
          "1436:         s2n(0, ret);",
          "1437:     }",
          "1440:     if (s->alpn_client_proto_list && !s->s3->tmp.finish_md_len) {",
          "1441:         if ((size_t)(limit - ret) < 6 + s->alpn_client_proto_list_len)",
          "",
          "[Removed Lines]",
          "1438: # endif",
          "",
          "[Added Lines]",
          "1432: #endif",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1446:         memcpy(ret, s->alpn_client_proto_list, s->alpn_client_proto_list_len);",
          "1447:         ret += s->alpn_client_proto_list_len;",
          "1448:     }",
          "1450:     if (SSL_IS_DTLS(s) && SSL_get_srtp_profiles(s)) {",
          "1451:         int el;",
          "",
          "[Removed Lines]",
          "1449: # ifndef OPENSSL_NO_SRTP",
          "",
          "[Added Lines]",
          "1443: #ifndef OPENSSL_NO_SRTP",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1468:         }",
          "1469:         ret += el;",
          "1470:     }",
          "1472:     custom_ext_init(&s->cert->cli_ext);",
          "1474:     if (!custom_ext_add(s, 0, &ret, limit, al))",
          "1475:         return NULL;",
          "1477:     s2n(TLSEXT_TYPE_encrypt_then_mac, ret);",
          "1478:     s2n(0, ret);",
          "1480:     s2n(TLSEXT_TYPE_extended_master_secret, ret);",
          "1481:     s2n(0, ret);",
          "",
          "[Removed Lines]",
          "1471: # endif",
          "1476: # ifdef TLSEXT_TYPE_encrypt_then_mac",
          "1479: # endif",
          "",
          "[Added Lines]",
          "1465: #endif",
          "1470: #ifdef TLSEXT_TYPE_encrypt_then_mac",
          "1473: #endif",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1518:     int extdatalen = 0;",
          "1519:     unsigned char *orig = buf;",
          "1520:     unsigned char *ret = buf;",
          "1522:     int next_proto_neg_seen;",
          "1525:     unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "1526:     unsigned long alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "1527:     int using_ecc = (alg_k & (SSL_kECDHE | SSL_kECDHr | SSL_kECDHe))",
          "1528:         || (alg_a & SSL_aECDSA);",
          "1529:     using_ecc = using_ecc && (s->session->tlsext_ecpointformatlist != NULL);",
          "1532:     ret += 2;",
          "1533:     if (ret >= limit)",
          "",
          "[Removed Lines]",
          "1521: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "1523: # endif",
          "1524: # ifndef OPENSSL_NO_EC",
          "1530: # endif",
          "",
          "[Added Lines]",
          "1515: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1517: #endif",
          "1518: #ifndef OPENSSL_NO_EC",
          "1524: #endif",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1567:         s2n(TLSEXT_TYPE_server_name, ret);",
          "1568:         s2n(0, ret);",
          "1569:     }",
          "1571:     if (using_ecc) {",
          "1572:         const unsigned char *plist;",
          "1573:         size_t plistlen;",
          "",
          "[Removed Lines]",
          "1570: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "1564: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1614:         s2n(0, ret);",
          "1615:     }",
          "1618:     if (SSL_IS_DTLS(s) && s->srtp_profile) {",
          "1619:         int el;",
          "",
          "[Removed Lines]",
          "1617: # ifndef OPENSSL_NO_SRTP",
          "",
          "[Added Lines]",
          "1611: #ifndef OPENSSL_NO_SRTP",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1635:         }",
          "1636:         ret += el;",
          "1637:     }",
          "1640:     if (((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80",
          "1641:          || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)",
          "",
          "[Removed Lines]",
          "1638: # endif",
          "",
          "[Added Lines]",
          "1632: #endif",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1654:         ret += 36;",
          "1656:     }",
          "1659:     if (s->tlsext_heartbeat & SSL_TLSEXT_HB_ENABLED) {",
          "1660:         if ((limit - ret - 4 - 1) < 0)",
          "",
          "[Removed Lines]",
          "1657: # ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "[Added Lines]",
          "1651: #ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1674:     }",
          "1678:     next_proto_neg_seen = s->s3->next_proto_neg_seen;",
          "1679:     s->s3->next_proto_neg_seen = 0;",
          "1680:     if (next_proto_neg_seen && s->ctx->next_protos_advertised_cb) {",
          "",
          "[Removed Lines]",
          "1675: # endif",
          "1677: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "1669: #endif",
          "1671: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1695:             s->s3->next_proto_neg_seen = 1;",
          "1696:         }",
          "1697:     }",
          "1699:     if (!custom_ext_add(s, 1, &ret, limit, al))",
          "1700:         return NULL;",
          "1702:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
          "",
          "[Removed Lines]",
          "1698: # endif",
          "1701: # ifdef TLSEXT_TYPE_encrypt_then_mac",
          "",
          "[Added Lines]",
          "1692: #endif",
          "1695: #ifdef TLSEXT_TYPE_encrypt_then_mac",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1712:             s2n(0, ret);",
          "1713:         }",
          "1714:     }",
          "1716:     if (!s->hit && s->session->flags & SSL_SESS_FLAG_EXTMS) {",
          "1717:         s2n(TLSEXT_TYPE_extended_master_secret, ret);",
          "1718:         s2n(0, ret);",
          "",
          "[Removed Lines]",
          "1715: # endif",
          "",
          "[Added Lines]",
          "1709: #endif",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1808:     return -1;",
          "1809: }",
          "",
          "[Removed Lines]",
          "1811: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "1805: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1903:     s->servername_done = 0;",
          "1904:     s->tlsext_status_type = -1;",
          "1906:     s->s3->next_proto_neg_seen = 0;",
          "1909:     OPENSSL_free(s->s3->alpn_selected);",
          "1910:     s->s3->alpn_selected = NULL;",
          "1912:     s->tlsext_heartbeat &= ~(SSL_TLSEXT_HB_ENABLED |",
          "1913:                              SSL_TLSEXT_HB_DONT_SEND_REQUESTS);",
          "1917:     if (s->options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG)",
          "1918:         ssl_check_for_safari(s, data, d, n);",
          "1922:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "1923:     s->s3->tmp.peer_sigalgs = NULL;",
          "1925:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "1929:     OPENSSL_free(s->srp_ctx.login);",
          "1930:     s->srp_ctx.login = NULL;",
          "1933:     s->srtp_profile = NULL;",
          "",
          "[Removed Lines]",
          "1905: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "1907: # endif",
          "1911: # ifndef OPENSSL_NO_HEARTBEATS",
          "1914: # endif",
          "1916: # ifndef OPENSSL_NO_EC",
          "1924: # ifdef TLSEXT_TYPE_encrypt_then_mac",
          "1926: # endif",
          "1928: # ifndef OPENSSL_NO_SRP",
          "1931: # endif",
          "",
          "[Added Lines]",
          "1899: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1901: #endif",
          "1905: #ifndef OPENSSL_NO_HEARTBEATS",
          "1908: #endif",
          "1910: #ifndef OPENSSL_NO_EC",
          "1918: #ifdef TLSEXT_TYPE_encrypt_then_mac",
          "1920: #endif",
          "1922: #ifndef OPENSSL_NO_SRP",
          "1925: #endif",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2051:             }",
          "2053:         }",
          "2055:         else if (type == TLSEXT_TYPE_srp) {",
          "2056:             if (size <= 0 || ((len = data[0])) != (size - 1)) {",
          "",
          "[Removed Lines]",
          "2054: # ifndef OPENSSL_NO_SRP",
          "",
          "[Added Lines]",
          "2048: #ifndef OPENSSL_NO_SRP",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2071:                 return 0;",
          "2072:             }",
          "2073:         }",
          "2077:         else if (type == TLSEXT_TYPE_ec_point_formats) {",
          "2078:             unsigned char *sdata = data;",
          "2079:             int ecpointformatlist_length = *(sdata++);",
          "",
          "[Removed Lines]",
          "2074: # endif",
          "2076: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "2068: #endif",
          "2070: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2239:             else",
          "2240:                 s->tlsext_status_type = -1;",
          "2241:         }",
          "2243:         else if (type == TLSEXT_TYPE_heartbeat) {",
          "2244:             switch (data[0]) {",
          "",
          "[Removed Lines]",
          "2242: # ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "[Added Lines]",
          "2236: #ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2254:                 return 0;",
          "2255:             }",
          "2256:         }",
          "2259:         else if (type == TLSEXT_TYPE_next_proto_neg &&",
          "2260:                  s->s3->tmp.finish_md_len == 0 &&",
          "2261:                  s->s3->alpn_selected == NULL) {",
          "",
          "[Removed Lines]",
          "2257: # endif",
          "2258: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "2251: #endif",
          "2252: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2279:             s->s3->next_proto_neg_seen = 1;",
          "2280:         }",
          "2283:         else if (type == TLSEXT_TYPE_application_layer_protocol_negotiation &&",
          "2284:                  s->ctx->alpn_select_cb && s->s3->tmp.finish_md_len == 0) {",
          "2285:             if (tls1_alpn_handle_client_hello(s, data, size, al) != 0)",
          "2286:                 return 0;",
          "2289:             s->s3->next_proto_neg_seen = 0;",
          "2291:         }",
          "2295:         else if (SSL_IS_DTLS(s) && SSL_get_srtp_profiles(s)",
          "2296:                  && type == TLSEXT_TYPE_use_srtp) {",
          "2297:             if (ssl_parse_clienthello_use_srtp_ext(s, data, size, al))",
          "2298:                 return 0;",
          "2299:         }",
          "2302:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
          "2303:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "2305:         else if (type == TLSEXT_TYPE_extended_master_secret) {",
          "2306:             if (!s->hit)",
          "2307:                 s->session->flags |= SSL_SESS_FLAG_EXTMS;",
          "",
          "[Removed Lines]",
          "2281: # endif",
          "2287: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "2290: # endif",
          "2294: # ifndef OPENSSL_NO_SRTP",
          "2300: # endif",
          "2301: # ifdef TLSEXT_TYPE_encrypt_then_mac",
          "2304: # endif",
          "",
          "[Added Lines]",
          "2275: #endif",
          "2281: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "2284: #endif",
          "2288: #ifndef OPENSSL_NO_SRTP",
          "2294: #endif",
          "2295: #ifdef TLSEXT_TYPE_encrypt_then_mac",
          "2298: #endif",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2355:     return 1;",
          "2356: }",
          "",
          "[Removed Lines]",
          "2358: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "2352: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2375:     return off == len;",
          "2376: }",
          "2379: static int ssl_scan_serverhello_tlsext(SSL *s, unsigned char **p,",
          "2380:                                        unsigned char *d, int n, int *al)",
          "",
          "[Removed Lines]",
          "2377: # endif",
          "",
          "[Added Lines]",
          "2371: #endif",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2386:     int tlsext_servername = 0;",
          "2387:     int renegotiate_seen = 0;",
          "2390:     s->s3->next_proto_neg_seen = 0;",
          "2392:     s->tlsext_ticket_expected = 0;",
          "2394:     OPENSSL_free(s->s3->alpn_selected);",
          "2395:     s->s3->alpn_selected = NULL;",
          "2397:     s->tlsext_heartbeat &= ~(SSL_TLSEXT_HB_ENABLED |",
          "2398:                              SSL_TLSEXT_HB_DONT_SEND_REQUESTS);",
          "2402:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "2405:     if (data >= (d + n - 2))",
          "2406:         goto ri_check;",
          "",
          "[Removed Lines]",
          "2389: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "2391: # endif",
          "2396: # ifndef OPENSSL_NO_HEARTBEATS",
          "2399: # endif",
          "2401: # ifdef TLSEXT_TYPE_encrypt_then_mac",
          "2403: # endif",
          "",
          "[Added Lines]",
          "2383: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "2385: #endif",
          "2390: #ifndef OPENSSL_NO_HEARTBEATS",
          "2393: #endif",
          "2395: #ifdef TLSEXT_TYPE_encrypt_then_mac",
          "2397: #endif",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2433:             }",
          "2434:             tlsext_servername = 1;",
          "2435:         }",
          "2437:         else if (type == TLSEXT_TYPE_ec_point_formats) {",
          "2438:             unsigned char *sdata = data;",
          "2439:             int ecpointformatlist_length = *(sdata++);",
          "",
          "[Removed Lines]",
          "2436: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "2430: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2485:             s->tlsext_status_expected = 1;",
          "2486:         }",
          "2488:         else if (type == TLSEXT_TYPE_next_proto_neg &&",
          "2489:                  s->s3->tmp.finish_md_len == 0) {",
          "2490:             unsigned char *selected;",
          "",
          "[Removed Lines]",
          "2487: # ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Added Lines]",
          "2481: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2517:             s->next_proto_negotiated_len = selected_len;",
          "2518:             s->s3->next_proto_neg_seen = 1;",
          "2519:         }",
          "2522:         else if (type == TLSEXT_TYPE_application_layer_protocol_negotiation) {",
          "2523:             unsigned len;",
          "",
          "[Removed Lines]",
          "2520: # endif",
          "",
          "[Added Lines]",
          "2514: #endif",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2558:             memcpy(s->s3->alpn_selected, data + 3, len);",
          "2559:             s->s3->alpn_selected_len = len;",
          "2560:         }",
          "2562:         else if (type == TLSEXT_TYPE_heartbeat) {",
          "2563:             switch (data[0]) {",
          "",
          "[Removed Lines]",
          "2561: # ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "[Added Lines]",
          "2555: #ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2573:                 return 0;",
          "2574:             }",
          "2575:         }",
          "2578:         else if (SSL_IS_DTLS(s) && type == TLSEXT_TYPE_use_srtp) {",
          "2579:             if (ssl_parse_serverhello_use_srtp_ext(s, data, size, al))",
          "2580:                 return 0;",
          "2581:         }",
          "2584:         else if (type == TLSEXT_TYPE_encrypt_then_mac) {",
          "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
          "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
          "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "2589:         }",
          "2591:         else if (type == TLSEXT_TYPE_extended_master_secret) {",
          "2592:             if (!s->hit)",
          "2593:                 s->session->flags |= SSL_SESS_FLAG_EXTMS;",
          "",
          "[Removed Lines]",
          "2576: # endif",
          "2577: # ifndef OPENSSL_NO_SRTP",
          "2582: # endif",
          "2583: # ifdef TLSEXT_TYPE_encrypt_then_mac",
          "2590: # endif",
          "",
          "[Added Lines]",
          "2570: #endif",
          "2571: #ifndef OPENSSL_NO_SRTP",
          "2576: #endif",
          "2577: #ifdef TLSEXT_TYPE_encrypt_then_mac",
          "2584: #endif",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2661:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "2662:     int al = SSL_AD_UNRECOGNIZED_NAME;",
          "",
          "[Removed Lines]",
          "2664: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "2658: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2675:     if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0)",
          "2676:         ret =",
          "",
          "[Removed Lines]",
          "2673: # endif",
          "",
          "[Added Lines]",
          "2667: #endif",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2818:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "2819:     int al = SSL_AD_UNRECOGNIZED_NAME;",
          "",
          "[Removed Lines]",
          "2821: # ifndef OPENSSL_NO_EC",
          "",
          "[Added Lines]",
          "2815: #ifndef OPENSSL_NO_EC",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3227: } tls12_hash_info;",
          "3229: static const tls12_hash_info tls12_md_info[] = {",
          "3231:     {NID_md5, 64, 0},",
          "3233:     {NID_md5, 64, EVP_md5},",
          "3235:     {NID_sha1, 80, EVP_sha1},",
          "3236:     {NID_sha224, 112, EVP_sha224},",
          "3237:     {NID_sha256, 128, EVP_sha256},",
          "",
          "[Removed Lines]",
          "3230: # ifdef OPENSSL_NO_MD5",
          "3232: # else",
          "3234: # endif",
          "",
          "[Added Lines]",
          "3224: #ifdef OPENSSL_NO_MD5",
          "3226: #else",
          "3228: #endif",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3262: static int tls12_get_pkey_idx(unsigned char sig_alg)",
          "3263: {",
          "3264:     switch (sig_alg) {",
          "3266:     case TLSEXT_signature_rsa:",
          "3267:         return SSL_PKEY_RSA_SIGN;",
          "3270:     case TLSEXT_signature_dsa:",
          "3271:         return SSL_PKEY_DSA_SIGN;",
          "3274:     case TLSEXT_signature_ecdsa:",
          "3275:         return SSL_PKEY_ECC;",
          "3277:     }",
          "3278:     return -1;",
          "3279: }",
          "",
          "[Removed Lines]",
          "3265: # ifndef OPENSSL_NO_RSA",
          "3268: # endif",
          "3269: # ifndef OPENSSL_NO_DSA",
          "3272: # endif",
          "3273: # ifndef OPENSSL_NO_EC",
          "3276: # endif",
          "",
          "[Added Lines]",
          "3259: #ifndef OPENSSL_NO_RSA",
          "3262: #endif",
          "3263: #ifndef OPENSSL_NO_DSA",
          "3266: #endif",
          "3267: #ifndef OPENSSL_NO_EC",
          "3270: #endif",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3336:     sigalgslen = tls12_get_psigalgs(s, &sigalgs);",
          "3337:     for (i = 0; i < sigalgslen; i += 2, sigalgs += 2) {",
          "3338:         switch (sigalgs[1]) {",
          "3340:         case TLSEXT_signature_rsa:",
          "3341:             if (!have_rsa && tls12_sigalg_allowed(s, op, sigalgs))",
          "3342:                 have_rsa = 1;",
          "3343:             break;",
          "3346:         case TLSEXT_signature_dsa:",
          "3347:             if (!have_dsa && tls12_sigalg_allowed(s, op, sigalgs))",
          "3348:                 have_dsa = 1;",
          "3349:             break;",
          "3352:         case TLSEXT_signature_ecdsa:",
          "3353:             if (!have_ecdsa && tls12_sigalg_allowed(s, op, sigalgs))",
          "3354:                 have_ecdsa = 1;",
          "3355:             break;",
          "3357:         }",
          "3358:     }",
          "3359:     if (!have_rsa)",
          "",
          "[Removed Lines]",
          "3339: # ifndef OPENSSL_NO_RSA",
          "3344: # endif",
          "3345: # ifndef OPENSSL_NO_DSA",
          "3350: # endif",
          "3351: # ifndef OPENSSL_NO_EC",
          "3356: # endif",
          "",
          "[Added Lines]",
          "3333: #ifndef OPENSSL_NO_RSA",
          "3338: #endif",
          "3339: #ifndef OPENSSL_NO_DSA",
          "3344: #endif",
          "3345: #ifndef OPENSSL_NO_EC",
          "3350: #endif",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3487:     if (!tls1_set_shared_sigalgs(s))",
          "3488:         return 0;",
          "3491:     if (s->cert->cert_flags & SSL_CERT_FLAG_BROKEN_PROTOCOL) {",
          "",
          "[Removed Lines]",
          "3490: # ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL",
          "",
          "[Added Lines]",
          "3484: #ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3509:             }",
          "3510:         }",
          "3511:     }",
          "3514:     for (i = 0, sigptr = c->shared_sigalgs;",
          "3515:          i < c->shared_sigalgslen; i++, sigptr++) {",
          "",
          "[Removed Lines]",
          "3512: # endif",
          "",
          "[Added Lines]",
          "3506: #endif",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3538:         if (pmd[SSL_PKEY_DSA_SIGN] == NULL)",
          "3539:             pmd[SSL_PKEY_DSA_SIGN] = EVP_sha1();",
          "3542:         if (pmd[SSL_PKEY_RSA_SIGN] == NULL) {",
          "3543:             pmd[SSL_PKEY_RSA_SIGN] = EVP_sha1();",
          "3544:             pmd[SSL_PKEY_RSA_ENC] = EVP_sha1();",
          "3545:         }",
          "3548:         if (pmd[SSL_PKEY_ECC] == NULL)",
          "3549:             pmd[SSL_PKEY_ECC] = EVP_sha1();",
          "3551:     }",
          "3552:     return 1;",
          "3553: }",
          "",
          "[Removed Lines]",
          "3537: # ifndef OPENSSL_NO_DSA",
          "3540: # endif",
          "3541: # ifndef OPENSSL_NO_RSA",
          "3546: # endif",
          "3547: # ifndef OPENSSL_NO_EC",
          "3550: # endif",
          "",
          "[Added Lines]",
          "3531: #ifndef OPENSSL_NO_DSA",
          "3534: #endif",
          "3535: #ifndef OPENSSL_NO_RSA",
          "3540: #endif",
          "3541: #ifndef OPENSSL_NO_EC",
          "3544: #endif",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3594:     return s->cert->shared_sigalgslen;",
          "3595: }",
          "3598: int tls1_process_heartbeat(SSL *s, unsigned char *p, unsigned int length)",
          "3599: {",
          "3600:     unsigned char *pl;",
          "",
          "[Removed Lines]",
          "3597: # ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "[Added Lines]",
          "3591: #ifndef OPENSSL_NO_HEARTBEATS",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3752:     OPENSSL_free(buf);",
          "3753:     return ret;",
          "3754: }",
          "3759: typedef struct {",
          "3760:     size_t sigalgcnt;",
          "",
          "[Removed Lines]",
          "3755: # endif",
          "3757: # define MAX_SIGALGLEN   (TLSEXT_hash_num * TLSEXT_signature_num * 2)",
          "",
          "[Added Lines]",
          "3749: #endif",
          "3751: #define MAX_SIGALGLEN   (TLSEXT_hash_num * TLSEXT_signature_num * 2)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3901:         (CERT_PKEY_EE_SIGNATURE|CERT_PKEY_EE_PARAM)",
          "3904:          (CERT_PKEY_VALID_FLAGS|CERT_PKEY_CA_SIGNATURE|CERT_PKEY_CA_PARAM \\",
          "3905:          | CERT_PKEY_ISSUER_NAME|CERT_PKEY_CERT_TYPE)",
          "",
          "[Removed Lines]",
          "3900: # define CERT_PKEY_VALID_FLAGS \\",
          "3903: # define CERT_PKEY_STRICT_FLAGS \\",
          "",
          "[Added Lines]",
          "3894: #define CERT_PKEY_VALID_FLAGS \\",
          "3897: #define CERT_PKEY_STRICT_FLAGS \\",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3931:         if (!x || !pk)",
          "3932:             goto end;",
          "3935:         if (s->cert->cert_flags & SSL_CERT_FLAG_BROKEN_PROTOCOL) {",
          "3936:             rv = CERT_PKEY_STRICT_FLAGS | CERT_PKEY_EXPLICIT_SIGN |",
          "",
          "[Removed Lines]",
          "3933: # ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL",
          "",
          "[Added Lines]",
          "3927: #ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3939:             return rv;",
          "3940:         }",
          "3942:     } else {",
          "3943:         if (!x || !pk)",
          "3944:             return 0;",
          "",
          "[Removed Lines]",
          "3941: # endif",
          "",
          "[Added Lines]",
          "3935: #endif",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "4174:     return tls1_check_chain(s, x, pk, chain, -1);",
          "4175: }",
          "4179: #ifndef OPENSSL_NO_DH",
          "4180: DH *ssl_get_auto_dh(SSL *s)",
          "",
          "[Removed Lines]",
          "4177: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/mk1mf.pl||util/mk1mf.pl": [
          "File: util/mk1mf.pl -> util/mk1mf.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: $cflags.=\" -DOPENSSL_NO_WHIRLPOOL\"   if $no_whirlpool;",
          "290: $cflags.=\" -DOPENSSL_NO_SOCK\" if $no_sock;",
          "291: $cflags.=\" -DOPENSSL_NO_SSL3\" if $no_ssl3;",
          "293: $cflags.=\" -DOPENSSL_NO_SRP\" if $no_srp;",
          "294: $cflags.=\" -DOPENSSL_NO_CMS\" if $no_cms;",
          "295: $cflags.=\" -DOPENSSL_NO_ERR\"  if $no_err;",
          "",
          "[Removed Lines]",
          "292: $cflags.=\" -DOPENSSL_NO_TLSEXT\" if $no_tlsext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1391:   \"gaswin\" => \\$gaswin,",
          "1392:   \"no-ssl3\" => \\$no_ssl3,",
          "1393:   \"no-ssl3-method\" => 0,",
          "1395:   \"no-srp\" => \\$no_srp,",
          "1396:   \"no-cms\" => \\$no_cms,",
          "1397:   \"no-jpake\" => \\$no_jpake,",
          "",
          "[Removed Lines]",
          "1394:   \"no-tlsext\" => \\$no_tlsext,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     # Engines",
          "82:     \"STATIC_ENGINE\", \"ENGINE\", \"HW\", \"GMP\",",
          "83:     # TLS",
          "85:     # CMS",
          "86:     \"CMS\",",
          "87:     # CryptoAPI Engine",
          "",
          "[Removed Lines]",
          "84:     \"TLSEXT\", \"PSK\", \"SRP\", \"HEARTBEATS\",",
          "",
          "[Added Lines]",
          "84:     \"PSK\", \"SRP\", \"HEARTBEATS\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: my $no_rsa; my $no_dsa; my $no_dh; my $no_aes;",
          "125: my $no_ec; my $no_ecdsa; my $no_ecdh; my $no_engine; my $no_hw;",
          "126: my $no_fp_api; my $no_static_engine=1; my $no_gmp; my $no_deprecated;",
          "128: my $no_jpake; my $no_srp; my $no_ec2m; my $no_nistp_gcc;",
          "129: my $no_nextprotoneg; my $no_sctp; my $no_srtp; my $no_ssl_trace;",
          "130: my $no_unit_test; my $no_ssl3_method; my $no_ocb;",
          "",
          "[Removed Lines]",
          "127: my $no_psk; my $no_tlsext; my $no_cms; my $no_capieng;",
          "",
          "[Added Lines]",
          "127: my $no_psk; my $no_cms; my $no_capieng;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:  elsif (/^no-engine$/) { $no_engine=1; }",
          "214:  elsif (/^no-hw$/) { $no_hw=1; }",
          "215:  elsif (/^no-gmp$/) { $no_gmp=1; }",
          "217:  elsif (/^no-cms$/) { $no_cms=1; }",
          "218:  elsif (/^no-ec2m$/) { $no_ec2m=1; }",
          "219:   elsif (/^no-ec-nistp224-64-gcc-128$/) { $no_nistp_gcc=1; }",
          "",
          "[Removed Lines]",
          "216:  elsif (/^no-tlsext$/) { $no_tlsext=1; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1198:    if ($keyword eq \"FP_API\" && $no_fp_api) { return 0; }",
          "1199:    if ($keyword eq \"STATIC_ENGINE\" && $no_static_engine) { return 0; }",
          "1200:    if ($keyword eq \"GMP\" && $no_gmp) { return 0; }",
          "1202:    if ($keyword eq \"PSK\" && $no_psk) { return 0; }",
          "1203:    if ($keyword eq \"CMS\" && $no_cms) { return 0; }",
          "1204:    if ($keyword eq \"EC_NISTP_64_GCC_128\" && $no_nistp_gcc)",
          "",
          "[Removed Lines]",
          "1201:    if ($keyword eq \"TLSEXT\" && $no_tlsext) { return 0; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/ssleay.num||util/ssleay.num": [
          "File: util/ssleay.num -> util/ssleay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "240: SSL_CTX_get_client_cert_cb              288 EXIST::FUNCTION:",
          "241: SSL_CTX_sess_get_remove_cb              289 EXIST::FUNCTION:",
          "242: SSL_set_SSL_CTX                         290 EXIST::FUNCTION:",
          "245: SSL_CTX_set_client_cert_engine          293 EXIST::FUNCTION:ENGINE",
          "246: SSL_CTX_use_psk_identity_hint           294 EXIST::FUNCTION:PSK",
          "247: SSL_CTX_set_psk_client_callback         295 EXIST::FUNCTION:PSK",
          "",
          "[Removed Lines]",
          "243: SSL_get_servername                      291 EXIST::FUNCTION:TLSEXT",
          "244: SSL_get_servername_type                 292 EXIST::FUNCTION:TLSEXT",
          "",
          "[Added Lines]",
          "243: SSL_get_servername                      291 EXIST::FUNCTION:",
          "244: SSL_get_servername_type                 292 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309: TLSv1_2_method                          350 EXIST::FUNCTION:",
          "310: SSL_SESSION_get_id_len                  351 NOEXIST::FUNCTION:",
          "311: kssl_ctx_get0_client_princ              352 NOEXIST::FUNCTION:",
          "313: SSL_set_tlsext_use_srtp                 354 EXIST::FUNCTION:SRTP",
          "314: SSL_CTX_set_next_protos_advertised_cb   355 EXIST:!VMS:FUNCTION:NEXTPROTONEG",
          "315: SSL_CTX_set_next_protos_adv_cb          355 EXIST:VMS:FUNCTION:NEXTPROTONEG",
          "316: SSL_get0_next_proto_negotiated          356 EXIST::FUNCTION:NEXTPROTONEG",
          "317: SSL_get_selected_srtp_profile           357 EXIST::FUNCTION:SRTP",
          "318: SSL_CTX_set_tlsext_use_srtp             358 EXIST::FUNCTION:SRTP",
          "320: SSL_get_srtp_profiles                   360 EXIST::FUNCTION:SRTP",
          "321: SSL_CTX_set_next_proto_select_cb        361 EXIST:!VMS:FUNCTION:NEXTPROTONEG",
          "322: SSL_CTX_set_next_proto_sel_cb           361 EXIST:VMS:FUNCTION:NEXTPROTONEG",
          "323: SSL_SESSION_get_compress_id             362 EXIST::FUNCTION:",
          "324: SSL_get0_param                          363 EXIST::FUNCTION:",
          "325: SSL_CTX_get0_privatekey                 364 EXIST::FUNCTION:",
          "327: SSL_CONF_CTX_finish                     366 EXIST::FUNCTION:",
          "328: DTLS_method                             367 EXIST::FUNCTION:",
          "329: DTLS_client_method                      368 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "312: SSL_export_keying_material              353 EXIST::FUNCTION:TLSEXT",
          "319: SSL_select_next_proto                   359 EXIST::FUNCTION:TLSEXT",
          "326: SSL_get_shared_sigalgs                  365 EXIST::FUNCTION:TLSEXT",
          "",
          "[Added Lines]",
          "312: SSL_export_keying_material              353 EXIST::FUNCTION:",
          "319: SSL_select_next_proto                   359 EXIST::FUNCTION:",
          "326: SSL_get_shared_sigalgs                  365 EXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336: SSL_COMP_set0_compression_methods       374 EXIST:!VMS:FUNCTION:",
          "337: SSL_COMP_set0_compr_methods             374 EXIST:VMS:FUNCTION:",
          "338: SSL_CTX_set_cert_cb                     375 EXIST::FUNCTION:",
          "340: SSL_is_server                           377 EXIST::FUNCTION:",
          "341: SSL_CTX_get0_param                      378 EXIST::FUNCTION:",
          "342: SSL_CONF_cmd                            379 EXIST::FUNCTION:",
          "343: SSL_CTX_get_ssl_method                  380 EXIST::FUNCTION:",
          "344: SSL_CONF_CTX_set_ssl_ctx                381 EXIST::FUNCTION:",
          "345: SSL_CIPHER_find                         382 EXIST::FUNCTION:",
          "347: DTLSv1_2_client_method                  384 EXIST::FUNCTION:",
          "348: SSL_get0_alpn_selected                  385 EXIST::FUNCTION:",
          "349: SSL_CONF_CTX_clear_flags                386 EXIST::FUNCTION:",
          "350: SSL_CTX_set_alpn_protos                 387 EXIST::FUNCTION:",
          "352: SSL_CTX_get0_certificate                390 EXIST::FUNCTION:",
          "353: SSL_CTX_set_alpn_select_cb              391 EXIST::FUNCTION:",
          "354: SSL_CONF_cmd_value_type                 392 EXIST::FUNCTION:",
          "355: SSL_set_cert_cb                         393 EXIST::FUNCTION:",
          "357: SSL_CONF_CTX_set1_prefix                395 EXIST::FUNCTION:",
          "358: SSL_CONF_CTX_new                        396 EXIST::FUNCTION:",
          "359: SSL_CONF_CTX_set_flags                  397 EXIST::FUNCTION:",
          "360: SSL_CONF_CTX_set_ssl                    398 EXIST::FUNCTION:",
          "362: SSL_certs_clear                         400 EXIST::FUNCTION:",
          "363: SSL_CONF_CTX_free                       401 EXIST::FUNCTION:",
          "364: SSL_trace                               402 EXIST::FUNCTION:SSL_TRACE",
          "365: SSL_CTX_set_cli_supp_data               403 NOEXIST::FUNCTION:",
          "366: DTLSv1_2_method                         404 EXIST::FUNCTION:",
          "367: DTLS_server_method                      405 EXIST::FUNCTION:",
          "369: SSL_COMP_free_compress_methods          407 NOEXIST::FUNCTION:",
          "370: SSL_COMP_free_compression_methods       407 EXIST:!VMS:FUNCTION:",
          "371: SSL_COMP_free_compr_methods             407 EXIST:VMS:FUNCTION:",
          "373: SSL_CTX_get_security_callback           410 EXIST::FUNCTION:",
          "374: SSL_SESSION_print_keylog                411 EXIST::FUNCTION:",
          "375: SSL_CTX_set_not_resumable_session_callback 412 EXIST:!VMS:FUNCTION:",
          "",
          "[Removed Lines]",
          "339: SSL_CTX_add_client_custom_ext           376 EXIST::FUNCTION:TLSEXT",
          "346: SSL_CTX_use_serverinfo                  383 EXIST::FUNCTION:TLSEXT",
          "351: SSL_CTX_add_server_custom_ext           389 EXIST::FUNCTION:TLSEXT",
          "356: SSL_get_sigalgs                         394 EXIST::FUNCTION:TLSEXT",
          "361: SSL_check_chain                         399 EXIST::FUNCTION:TLSEXT",
          "368: SSL_CTX_use_serverinfo_file             406 EXIST::FUNCTION:STDIO,TLSEXT",
          "372: SSL_extension_supported                 409 EXIST::FUNCTION:TLSEXT",
          "",
          "[Added Lines]",
          "339: SSL_CTX_add_client_custom_ext           376 EXIST::FUNCTION:",
          "346: SSL_CTX_use_serverinfo                  383 EXIST::FUNCTION:",
          "351: SSL_CTX_add_server_custom_ext           389 EXIST::FUNCTION:",
          "356: SSL_get_sigalgs                         394 EXIST::FUNCTION:",
          "361: SSL_check_chain                         399 EXIST::FUNCTION:",
          "368: SSL_CTX_use_serverinfo_file             406 EXIST::FUNCTION:STDIO",
          "372: SSL_extension_supported                 409 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe5eef3a3b3e6844394d976a182d88225c59ddb5",
      "candidate_info": {
        "commit_hash": "fe5eef3a3b3e6844394d976a182d88225c59ddb5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fe5eef3a3b3e6844394d976a182d88225c59ddb5",
        "files": [
          "ssl/s3_lib.c",
          "ssl/t1_lib.c"
        ],
        "message": "Disable all PSK if no callback.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3934: #ifndef OPENSSL_NO_PSK",
          "3937:             continue;",
          "",
          "[Removed Lines]",
          "3936:         if ((alg_k & SSL_kPSK) && s->psk_server_callback == NULL)",
          "",
          "[Added Lines]",
          "3936:         if ((alg_k & SSL_PSK) && s->psk_server_callback == NULL)",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1112:     if (!s->psk_client_callback) {",
          "1113:         s->s3->tmp.mask_a |= SSL_aPSK;",
          "1115:     }",
          "1117: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "1114:         s->s3->tmp.mask_k |= SSL_kPSK;",
          "",
          "[Added Lines]",
          "1114:         s->s3->tmp.mask_k |= SSL_PSK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f338c2e0c2ce1e89cf8eba2d38878081f46b9dce",
      "candidate_info": {
        "commit_hash": "f338c2e0c2ce1e89cf8eba2d38878081f46b9dce",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f338c2e0c2ce1e89cf8eba2d38878081f46b9dce",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Fix SRP ciphersuite DoS vulnerability.\n\nIf a client attempted to use an SRP ciphersuite and it had not been\nset up correctly it would crash with a null pointer read. A malicious\nserver could exploit this in a DoS attack.\n\nThanks to Joonas Kuorilehto and Riku Hietam\u00e4ki from Codenomicon\nfor reporting this issue.\n\nCVE-2014-2970\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1086:   c->mask_k |= SSL_kPSK;",
          "1087:   }",
          "1089:  c->valid = 1;",
          "1090:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1089: #ifndef OPENSSL_NO_SRP",
          "1090:  if (!(s->srp_ctx.srp_Mask & SSL_kSRP))",
          "1091:   {",
          "1092:   c->mask_a |= SSL_aSRP;",
          "1093:   c->mask_k |= SSL_kSRP;",
          "1094:   }",
          "1095: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83764a989dcc87fbea337da5f8f86806fe767b7e",
      "candidate_info": {
        "commit_hash": "83764a989dcc87fbea337da5f8f86806fe767b7e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/83764a989dcc87fbea337da5f8f86806fe767b7e",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/ssl_lib.c"
        ],
        "message": "Fix SRP ciphersuite DoS vulnerability.\n\nIf a client attempted to use an SRP ciphersuite and it had not been\nset up correctly it would crash with a null pointer read. A malicious\nserver could exploit this in a DoS attack.\n\nThanks to Joonas Kuorilehto and Riku Hietam\u00e4ki from Codenomicon\nfor reporting this issue.\n\nCVE-2014-5139\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "954:   SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,SSL_R_WRONG_CIPHER_RETURNED);",
          "955:   goto f_err;",
          "956:   }",
          "957:  p+=ssl_put_cipher_by_char(s,NULL,NULL);",
          "959:  sk=ssl_get_ciphers_by_id(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957: #ifndef OPENSSL_NO_SRP",
          "958:  if (((c->algorithm_mkey & SSL_kSRP) || (c->algorithm_auth & SSL_aSRP)) &&",
          "959:       !(s->srp_ctx.srp_Mask & SSL_kSRP))",
          "960:   {",
          "961:   al=SSL_AD_ILLEGAL_PARAMETER;",
          "962:   SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,SSL_R_WRONG_CIPHER_RETURNED);",
          "963:   goto f_err;",
          "964:   }",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1406:       s->psk_client_callback == NULL)",
          "1407:    continue;",
          "1409:   j = put_cb ? put_cb(c,p) : ssl_put_cipher_by_char(s,c,p);",
          "1410:   p+=j;",
          "1411:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1409: #ifndef OPENSSL_NO_SRP",
          "1410:   if (((c->algorithm_mkey & SSL_kSRP) || (c->algorithm_auth & SSL_aSRP)) &&",
          "1411:       !(s->srp_ctx.srp_Mask & SSL_kSRP))",
          "1412:       continue;",
          "",
          "---------------"
        ]
      }
    }
  ]
}