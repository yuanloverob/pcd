{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
  "patch_info": {
    "commit_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/28a31a0a10f41ef855cabab4e18c994c44225125",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/d1_lib.c",
      "ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/statem/extensions.c",
      "ssl/statem/extensions_clnt.c",
      "ssl/statem/extensions_srvr.c",
      "ssl/t1_enc.c",
      "test/dtls_mtu_test.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nIn 1.1.0 changing the ciphersuite during a renegotiation can result in\na crash leading to a DoS attack. In master this does not occur with TLS\n(instead you get an internal error, which is still wrong but not a security\nissue) - but the problem still exists in the DTLS code.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/d1_lib.c||ssl/d1_lib.c",
      "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/statem/extensions.c||ssl/statem/extensions.c",
      "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
      "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "test/dtls_mtu_test.c||test/dtls_mtu_test.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "265: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "271: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "273: # define SSL3_MT_HELLO_REQUEST                   0",
      "274: # define SSL3_MT_CLIENT_HELLO                    1",
      "275: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "269: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "274: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/d1_lib.c||ssl/d1_lib.c": [
      "File: ssl/d1_lib.c -> ssl/d1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "937:                                  &blocksize, &ext_overhead))",
      "938:         return 0;",
      "941:         ext_overhead += mac_overhead;",
      "942:     else",
      "943:         int_overhead += mac_overhead;",
      "",
      "[Removed Lines]",
      "940:     if (SSL_USE_ETM(s))",
      "",
      "[Added Lines]",
      "940:     if (SSL_READ_ETM(s))",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
      "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1033:         if (!s->method->ssl3_enc->mac(s, &wr,",
      "1034:                                       &(p[SSL3_RECORD_get_length(&wr) + eivlen]),",
      "1035:                                       1))",
      "",
      "[Removed Lines]",
      "1032:     if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "1032:     if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1047:     if (s->method->ssl3_enc->enc(s, &wr, 1, 1) < 1)",
      "1048:         goto err;",
      "1051:         if (!s->method->ssl3_enc->mac(s, &wr,",
      "1052:                                       &(p[SSL3_RECORD_get_length(&wr)]), 1))",
      "1053:             goto err;",
      "",
      "[Removed Lines]",
      "1050:     if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "1050:     if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "402:         len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "403:         s->compress == NULL && s->msg_callback == NULL &&",
      "405:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "406:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "407:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "404:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "404:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "874:             unsigned char *mac;",
      "876:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
      "",
      "[Removed Lines]",
      "873:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "873:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "923:             SSLerr(SSL_F_DO_SSL3_WRITE, ERR_R_INTERNAL_ERROR);",
      "924:             goto err;",
      "925:         }",
      "927:             unsigned char *mac;",
      "929:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
      "",
      "[Removed Lines]",
      "926:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "926:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "387:         unsigned char *mac;",
      "389:         imac_size = EVP_MD_CTX_size(s->read_hash);",
      "",
      "[Removed Lines]",
      "386:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "386:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:     if ((sess != NULL) &&",
      "442:         (s->enc_read_ctx != NULL) &&",
      "445:         unsigned char *mac = NULL;",
      "446:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "443:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "443:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "915:         }",
      "917:         ret = 1;",
      "919:             imac_size = EVP_MD_CTX_size(s->read_hash);",
      "920:             if (imac_size < 0)",
      "921:                 return -1;",
      "",
      "[Removed Lines]",
      "918:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
      "",
      "[Added Lines]",
      "918:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1092:     header[11] = (unsigned char)(rec->length >> 8);",
      "1093:     header[12] = (unsigned char)(rec->length & 0xff);",
      "1096:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1097:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1095:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1095:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1118:             EVP_MD_CTX_free(hmac);",
      "1119:             return 0;",
      "1120:         }",
      "1122:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1123:                                        mac_ctx, rec->input,",
      "1124:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1121:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1121:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1408:     rr->data = rr->input;",
      "1409:     rr->orig_len = rr->length;",
      "1412:         unsigned char *mac;",
      "1413:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "1414:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "1411:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "1411:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1452: #endif",
      "1456:         (s->enc_read_ctx != NULL) && (EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "1458:         unsigned char *mac = NULL;",
      "",
      "[Removed Lines]",
      "1455:     if ((sess != NULL) && !SSL_USE_ETM(s) &&",
      "",
      "[Added Lines]",
      "1455:     if ((sess != NULL) && !SSL_READ_ETM(s) &&",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "395: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "396:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "401: # define SSL_PKEY_RSA            0",
      "",
      "[Removed Lines]",
      "398: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "398: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "399: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1134:         int psk_kex_mode;",
      "1135:     } ext;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1138:         int use_etm;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions.c||ssl/statem/extensions.c": [
      "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "207: #endif",
      "208:     {",
      "209:         TLSEXT_TYPE_encrypt_then_mac,",
      "211:         init_etm, tls_parse_ctos_etm, tls_parse_stoc_etm,",
      "212:         tls_construct_stoc_etm, tls_construct_ctos_etm, NULL",
      "213:     },",
      "",
      "[Removed Lines]",
      "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
      "",
      "[Added Lines]",
      "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY | EXT_SSL3_ALLOWED,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "913: static int init_etm(SSL *s, unsigned int context)",
      "914: {",
      "917:     return 1;",
      "918: }",
      "",
      "[Removed Lines]",
      "915:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "915:     s->ext.use_etm = 0;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
      "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1172:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)",
      "1173:             && s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "1174:             && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "1177:     return 1;",
      "1178: }",
      "",
      "[Removed Lines]",
      "1175:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1175:         s->ext.use_etm = 1;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
      "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "451:                        size_t chainidx, int *al)",
      "452: {",
      "453:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
      "456:     return 1;",
      "457: }",
      "",
      "[Removed Lines]",
      "454:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "454:         s->ext.use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "953: int tls_construct_stoc_etm(SSL *s, WPACKET *pkt, unsigned int context, X509 *x,",
      "954:                            size_t chainidx, int *al)",
      "955: {",
      "957:         return 1;",
      "",
      "[Removed Lines]",
      "956:     if ((s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) == 0)",
      "",
      "[Added Lines]",
      "956:     if (!s->ext.use_etm)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "964:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "965:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "966:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12) {",
      "968:         return 1;",
      "969:     }",
      "",
      "[Removed Lines]",
      "967:         s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "967:         s->ext.use_etm = 0;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "129: #endif",
      "131:     if (which & SSL3_CC_READ) {",
      "132:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "133:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "134:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "132:         if (s->ext.use_etm)",
      "133:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "134:         else",
      "135:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "167:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "168:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "169:     } else {",
      "170:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "171:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "172:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:         if (s->ext.use_etm)",
      "176:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "177:         else",
      "178:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "369:     if (s->s3->tmp.key_block_length != 0)",
      "370:         return (1);",
      "375:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "376:         return (0);",
      "377:     }",
      "",
      "[Removed Lines]",
      "372:     if (!ssl_cipher_get_evp",
      "373:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "374:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "382:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "383:                             &comp, s->ext.use_etm)) {",
      "",
      "---------------"
    ],
    "test/dtls_mtu_test.c||test/dtls_mtu_test.c": [
      "File: test/dtls_mtu_test.c -> test/dtls_mtu_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:         }",
      "134:     }",
      "135:     rv = 1;",
      "137:         rv = 2;",
      "138:  out:",
      "139:     SSL_free(clnt_ssl);",
      "",
      "[Removed Lines]",
      "136:     if (SSL_USE_ETM(clnt_ssl))",
      "",
      "[Added Lines]",
      "136:     if (SSL_READ_ETM(clnt_ssl))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "68db4ddab7d35f5a3df1beee9a95fe093682340b",
      "candidate_info": {
        "commit_hash": "68db4ddab7d35f5a3df1beee9a95fe093682340b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/68db4ddab7d35f5a3df1beee9a95fe093682340b",
        "files": [
          "ssl/statem/extensions.c"
        ],
        "message": "Add an extension initilisation and finalisation capability\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/statem/extensions.c||ssl/statem/extensions.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c"
          ],
          "candidate": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: typedef struct {",
          "16:     unsigned int type;",
          "18:     int (*parse_client_ext)(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:     int (*init_ext)(SSL *s, unsigned int context);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     int (*construct_server_ext)(SSL *s, WPACKET *pkt, int *al);",
          "24:     int (*construct_client_ext)(SSL *s, WPACKET *pkt, int *al);",
          "25:     unsigned int context;",
          "26: } EXTENSION_DEFINITION;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     int (*finalise_ext)(SSL *s, unsigned int context);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33: static const EXTENSION_DEFINITION ext_defs[] = {",
          "34:     {",
          "35:         TLSEXT_TYPE_renegotiate,",
          "36:         tls_parse_client_renegotiate,",
          "37:         tls_parse_server_renegotiate,",
          "38:         tls_construct_server_renegotiate,",
          "39:         tls_construct_client_renegotiate,",
          "40:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_SSL3_ALLOWED",
          "41:         | EXT_TLS1_2_AND_BELOW_ONLY",
          "42:     },",
          "43:     {",
          "44:         TLSEXT_TYPE_server_name,",
          "45:         tls_parse_client_server_name,",
          "46:         tls_parse_server_server_name,",
          "47:         tls_construct_server_server_name,",
          "48:         tls_construct_client_server_name,",
          "49:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "50:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "51:     },",
          "52: #ifndef OPENSSL_NO_SRP",
          "53:     {",
          "54:         TLSEXT_TYPE_srp,",
          "55:         tls_parse_client_srp,",
          "56:         NULL,",
          "57:         NULL,",
          "58:         tls_construct_client_srp,",
          "59:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "60:     },",
          "61: #endif",
          "62: #ifndef OPENSSL_NO_EC",
          "63:     {",
          "64:         TLSEXT_TYPE_ec_point_formats,",
          "65:         tls_parse_client_ec_pt_formats,",
          "66:         tls_parse_server_ec_pt_formats,",
          "67:         tls_construct_server_ec_pt_formats,",
          "68:         tls_construct_client_ec_pt_formats,",
          "69:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "70:     },",
          "71:     {",
          "72:         TLSEXT_TYPE_supported_groups,",
          "73:         tls_parse_client_supported_groups,",
          "74:         NULL,",
          "75:         NULL /* TODO(TLS1.3): Need to add this */,",
          "76:         tls_construct_client_supported_groups,",
          "79:     },",
          "80: #endif",
          "81:     {",
          "82:         TLSEXT_TYPE_session_ticket,",
          "83:         tls_parse_client_session_ticket,",
          "84:         tls_parse_server_session_ticket,",
          "85:         tls_construct_server_session_ticket,",
          "86:         tls_construct_client_session_ticket,",
          "87:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "88:     },",
          "89:     {",
          "90:         TLSEXT_TYPE_signature_algorithms,",
          "91:         tls_parse_client_sig_algs,",
          "92:         NULL,",
          "93:         NULL,",
          "94:         tls_construct_client_sig_algs,",
          "95:         EXT_CLIENT_HELLO",
          "96:     },",
          "97: #ifndef OPENSSL_NO_OCSP",
          "98:     {",
          "99:         TLSEXT_TYPE_status_request,",
          "100:         tls_parse_client_status_request,",
          "101:         tls_parse_server_status_request,",
          "102:         tls_construct_server_status_request,",
          "103:         tls_construct_client_status_request,",
          "104:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "105:         | EXT_TLS1_3_CERTIFICATE",
          "106:     },",
          "",
          "[Removed Lines]",
          "77:         EXT_CLIENT_HELLO",
          "78:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "",
          "[Added Lines]",
          "46:         NULL,",
          "51:         NULL,",
          "57:         NULL,",
          "62:         NULL,",
          "69:         NULL,",
          "74:         NULL,",
          "81:         NULL,",
          "86:         NULL,",
          "91:         NULL,",
          "96:         NULL,",
          "97:         EXT_CLIENT_HELLO | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "102:         NULL,",
          "107:         NULL,",
          "112:         NULL,",
          "117:         NULL,",
          "123:         NULL,",
          "128:         NULL,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "109:     {",
          "110:         TLSEXT_TYPE_next_proto_neg,",
          "111:         tls_parse_client_npn,",
          "112:         tls_parse_server_npn,",
          "113:         tls_construct_server_next_proto_neg,",
          "114:         tls_construct_client_npn,",
          "115:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "116:     },",
          "117: #endif",
          "118:     {",
          "119:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "120:         tls_parse_client_alpn,",
          "121:         tls_parse_server_alpn,",
          "122:         tls_construct_server_alpn,",
          "123:         tls_construct_client_alpn,",
          "124:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "125:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "126:     },",
          "127: #ifndef OPENSSL_NO_SRTP",
          "128:     {",
          "129:         TLSEXT_TYPE_use_srtp,",
          "130:         tls_parse_client_use_srtp,",
          "131:         tls_parse_server_use_srtp,",
          "132:         tls_construct_server_use_srtp,",
          "133:         tls_construct_client_use_srtp,",
          "134:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "135:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS | EXT_DTLS_ONLY",
          "136:     },",
          "137: #endif",
          "138:     {",
          "139:         TLSEXT_TYPE_encrypt_then_mac,",
          "140:         tls_parse_client_etm,",
          "141:         tls_parse_server_etm,",
          "142:         tls_construct_server_etm,",
          "143:         tls_construct_client_etm,",
          "144:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "145:     },",
          "146: #ifndef OPENSSL_NO_CT",
          "147:     {",
          "148:         TLSEXT_TYPE_signed_certificate_timestamp,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:         NULL,",
          "141:         NULL,",
          "147:         NULL,",
          "152:         NULL,",
          "159:         NULL,",
          "164:         NULL,",
          "171:         NULL,",
          "176:         NULL,",
          "182:         NULL,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:         tls_parse_server_sct,",
          "156:         NULL,",
          "157:         tls_construct_client_sct,",
          "158:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "159:         | EXT_TLS1_3_CERTIFICATE",
          "160:     },",
          "161: #endif",
          "162:     {",
          "163:         TLSEXT_TYPE_extended_master_secret,",
          "164:         tls_parse_client_ems,",
          "165:         tls_parse_server_ems,",
          "166:         tls_construct_server_ems,",
          "167:         tls_construct_client_ems,",
          "168:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "169:     },",
          "170:     {",
          "171:         TLSEXT_TYPE_supported_versions,",
          "173:         NULL,",
          "174:         NULL,",
          "175:         NULL,",
          "176:         tls_construct_client_supported_versions,",
          "177:         EXT_CLIENT_HELLO | EXT_TLS_IMPLEMENTATION_ONLY | EXT_TLS1_3_ONLY",
          "178:     },",
          "179:     {",
          "180:         TLSEXT_TYPE_key_share,",
          "181:         tls_parse_client_key_share,",
          "182:         tls_parse_server_key_share,",
          "183:         tls_construct_server_key_share,",
          "184:         tls_construct_client_key_share,",
          "185:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO",
          "186:         | EXT_TLS1_3_HELLO_RETRY_REQUEST | EXT_TLS_IMPLEMENTATION_ONLY",
          "187:         | EXT_TLS1_3_ONLY",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:         NULL,",
          "199:         NULL,",
          "204:         NULL,",
          "209:         NULL,",
          "215:         NULL,",
          "220:         NULL,",
          "225:         NULL,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194:         TLSEXT_TYPE_cryptopro_bug,",
          "195:         NULL,",
          "196:         NULL,",
          "197:         tls_construct_server_cryptopro_bug,",
          "198:         NULL,",
          "199:         EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "200:     },",
          "201:     {",
          "203:         TLSEXT_TYPE_padding,",
          "205:         NULL,",
          "206:         NULL,",
          "207:         NULL,",
          "208:         tls_construct_client_padding,",
          "209:         EXT_CLIENT_HELLO",
          "210:     }",
          "211: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:         NULL,",
          "241:         NULL,",
          "247:         NULL,",
          "253:         NULL,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "362:         }",
          "363:     }",
          "367:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414:     for (i = 0; i < OSSL_NELEM(ext_defs); i++) {",
          "415:         if(ext_defs[i].init_ext != NULL && (ext_defs[i].context & context) != 0",
          "416:                 && !ext_defs[i].init_ext(s, context)) {",
          "418:             goto err;",
          "419:         }",
          "420:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "435:             return 0;",
          "436:     }",
          "438:     return 1;",
          "439: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:     for (loop = 0; loop < OSSL_NELEM(ext_defs); loop++) {",
          "505:         if(ext_defs[loop].finalise_ext != NULL",
          "506:                 && (ext_defs[loop].context & context) != 0",
          "507:                 && !ext_defs[loop].finalise_ext(s, context)) {",
          "509:             return 0;",
          "510:         }",
          "511:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c1a534305054c58d783fdfe7adbed24f5893a2e",
      "candidate_info": {
        "commit_hash": "8c1a534305054c58d783fdfe7adbed24f5893a2e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8c1a534305054c58d783fdfe7adbed24f5893a2e",
        "files": [
          "ssl/s3_enc.c",
          "ssl/s3_lib.c",
          "ssl/ssl_ciph.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_enc.c"
        ],
        "message": "Convert master_secret_size code to size_t\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_enc.c||ssl/s3_enc.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_enc.c||ssl/t1_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ],
          "candidate": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_enc.c||ssl/s3_enc.c": [
          "File: ssl/s3_enc.c -> ssl/s3_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     COMP_METHOD *comp;",
          "114: #endif",
          "115:     const EVP_MD *m;",
          "117:     int reuse_dd = 0;",
          "119:     c = s->s3->tmp.new_sym_enc;",
          "",
          "[Removed Lines]",
          "116:     int n, i, j, k, cl;",
          "",
          "[Added Lines]",
          "116:     int mdi;",
          "117:     size_t n, i, j, k, cl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:         EVP_CIPHER_CTX_reset(dd);",
          "196:     p = s->s3->tmp.key_block;",
          "199:         goto err2;",
          "200:     cl = EVP_CIPHER_key_length(c);",
          "201:     j = cl;",
          "202:     k = EVP_CIPHER_iv_length(c);",
          "",
          "[Removed Lines]",
          "197:     i = EVP_MD_size(m);",
          "198:     if (i < 0)",
          "",
          "[Added Lines]",
          "198:     mdi = EVP_MD_size(m);",
          "199:     if (mdi < 0)",
          "201:     i = mdi;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449: }",
          "451: int ssl3_generate_master_secret(SSL *s, unsigned char *out, unsigned char *p,",
          "453: {",
          "454:     static const unsigned char *salt[3] = {",
          "455: #ifndef CHARSET_EBCDIC",
          "",
          "[Removed Lines]",
          "452:                                 int len)",
          "",
          "[Added Lines]",
          "454:                                 size_t len, size_t *secret_size)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "464:     };",
          "465:     unsigned char buf[EVP_MAX_MD_SIZE];",
          "466:     EVP_MD_CTX *ctx = EVP_MD_CTX_new();",
          "468:     unsigned int n;",
          "469: #ifdef OPENSSL_SSL_TRACE_CRYPTO",
          "470:     unsigned char *tmpout = out;",
          "471: #endif",
          "473:     if (ctx == NULL) {",
          "474:         SSLerr(SSL_F_SSL3_GENERATE_MASTER_SECRET, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "467:     int i, ret = 0;",
          "",
          "[Added Lines]",
          "469:     int i, ret = 1;",
          "474:     size_t ret_secret_size = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "493:             break;",
          "494:         }",
          "495:         out += n;",
          "497:     }",
          "498:     EVP_MD_CTX_free(ctx);",
          "500: #ifdef OPENSSL_SSL_TRACE_CRYPTO",
          "502:         s->msg_callback(2, s->version, TLS1_RT_CRYPTO_PREMASTER,",
          "503:                         p, len, s, s->msg_callback_arg);",
          "504:         s->msg_callback(2, s->version, TLS1_RT_CRYPTO_CLIENT_RANDOM,",
          "",
          "[Removed Lines]",
          "496:         ret += n;",
          "501:     if (ret > 0 && s->msg_callback) {",
          "",
          "[Added Lines]",
          "500:         ret_secret_size += n;",
          "505:     if (ret && s->msg_callback) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "513:     }",
          "514: #endif",
          "515:     OPENSSL_cleanse(buf, sizeof(buf));",
          "517: }",
          "519: int ssl3_alert_code(int code)",
          "",
          "[Removed Lines]",
          "516:     return (ret);",
          "",
          "[Added Lines]",
          "520:     if (ret)",
          "522:     return ret;",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3964:                                int free_pms)",
          "3965: {",
          "3966:     unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "3967:     if (alg_k & SSL_PSK) {",
          "3968: #ifndef OPENSSL_NO_PSK",
          "3969:         unsigned char *pskpms, *t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3967:     int ret = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3979:         pskpmslen = 4 + pmslen + psklen;",
          "3980:         pskpms = OPENSSL_malloc(pskpmslen);",
          "3983:             goto err;",
          "3985:         t = pskpms;",
          "3986:         s2n(pmslen, t);",
          "3987:         if (alg_k & SSL_kPSK)",
          "",
          "[Removed Lines]",
          "3981:         if (pskpms == NULL) {",
          "3982:             s->session->master_key_length = 0;",
          "3984:         }",
          "",
          "[Added Lines]",
          "3983:         if (pskpms == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3995:         OPENSSL_clear_free(s->s3->tmp.psk, psklen);",
          "3996:         s->s3->tmp.psk = NULL;",
          "4001:         OPENSSL_clear_free(pskpms, pskpmslen);",
          "4002: #else",
          "4005:         goto err;",
          "4006: #endif",
          "4007:     } else {",
          "4012:     }",
          "4014:  err:",
          "4015:     if (pms) {",
          "4016:         if (free_pms)",
          "",
          "[Removed Lines]",
          "3997:         s->session->master_key_length =",
          "3998:             s->method->ssl3_enc->generate_master_secret(s,",
          "3999:                                                         s->session->master_key,",
          "4000:                                                         pskpms, pskpmslen);",
          "4004:         s->session->master_key_length = 0;",
          "4008:         s->session->master_key_length =",
          "4009:             s->method->ssl3_enc->generate_master_secret(s,",
          "4010:                                                         s->session->master_key,",
          "4011:                                                         pms, pmslen);",
          "",
          "[Added Lines]",
          "3997:         if (!s->method->ssl3_enc->generate_master_secret(s,",
          "3998:                     s->session->master_key,pskpms, pskpmslen,",
          "3999:                     &s->session->master_key_length))",
          "4000:             goto err;",
          "4007:         if (!s->method->ssl3_enc->generate_master_secret(s,",
          "4008:                 s->session->master_key, pms, pmslen,",
          "4009:                 &s->session->master_key_length))",
          "4010:             goto err;",
          "4013:     ret = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4020:     }",
          "4021:     if (s->server == 0)",
          "4022:         s->s3->tmp.pms = NULL;",
          "4024: }",
          "",
          "[Removed Lines]",
          "4023:     return s->session->master_key_length >= 0;",
          "",
          "[Added Lines]",
          "4023:     return ret;",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     EVP_PKEY_HMAC,",
          "198: };",
          "202: #define CIPHER_ADD      1",
          "203: #define CIPHER_KILL     2",
          "",
          "[Removed Lines]",
          "200: static int ssl_mac_secret_size[SSL_MD_NUM_IDX];",
          "",
          "[Added Lines]",
          "200: static size_t ssl_mac_secret_size[SSL_MD_NUM_IDX];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:         if (md == NULL) {",
          "400:             disabled_mac_mask |= t->mask;",
          "401:         } else {",
          "404:         }",
          "405:     }",
          "",
          "[Removed Lines]",
          "402:             ssl_mac_secret_size[i] = EVP_MD_size(md);",
          "403:             OPENSSL_assert(ssl_mac_secret_size[i] >= 0);",
          "",
          "[Added Lines]",
          "402:             int tmpsize = EVP_MD_size(md);",
          "403:             OPENSSL_assert(tmpsize >= 0);",
          "404:             ssl_mac_secret_size[i] = tmpsize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "503: int ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,",
          "504:                        const EVP_MD **md, int *mac_pkey_type,",
          "506: {",
          "507:     int i;",
          "508:     const SSL_CIPHER *c;",
          "",
          "[Removed Lines]",
          "505:                        int *mac_secret_size, SSL_COMP **comp, int use_etm)",
          "",
          "[Added Lines]",
          "506:                        size_t *mac_secret_size, SSL_COMP **comp, int use_etm)",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     (int (*)(SSL *, SSL3_RECORD *, size_t, int))ssl_undefined_function,",
          "63:     (int (*)(SSL *, SSL3_RECORD *, unsigned char *, int))ssl_undefined_function,",
          "64:     ssl_undefined_function,",
          "66:         ssl_undefined_function,",
          "67:     (int (*)(SSL *, int))ssl_undefined_function,",
          "68:     (int (*)(SSL *, const char *, int, unsigned char *))",
          "",
          "[Removed Lines]",
          "65:     (int (*)(SSL *, unsigned char *, unsigned char *, int))",
          "",
          "[Added Lines]",
          "65:     (int (*)(SSL *, unsigned char *, unsigned char *, size_t, size_t *))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3593: size_t SSL_SESSION_get_master_key(const SSL_SESSION *session,",
          "3594:                                   unsigned char *out, size_t outlen)",
          "3595: {",
          "3600:     if (outlen == 0)",
          "3601:         return session->master_key_length;",
          "3603:         outlen = session->master_key_length;",
          "3604:     memcpy(out, session->master_key, outlen);",
          "3605:     return outlen;",
          "",
          "[Removed Lines]",
          "3596:     if (session->master_key_length < 0) {",
          "3598:         return 0;",
          "3599:     }",
          "3602:     if (outlen > (size_t)session->master_key_length)",
          "",
          "[Added Lines]",
          "3598:     if (outlen > session->master_key_length)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3830: }",
          "3834: {",
          "3835:     EVP_MD_CTX *ctx = NULL;",
          "3836:     EVP_MD_CTX *hdgst = s->s3->handshake_dgst;",
          "3840:         goto err;",
          "3842:     ctx = EVP_MD_CTX_new();",
          "3845:         goto err;",
          "3847:     if (!EVP_MD_CTX_copy_ex(ctx, hdgst)",
          "3848:         || EVP_DigestFinal_ex(ctx, out, NULL) <= 0)",
          "3850:  err:",
          "3851:     EVP_MD_CTX_free(ctx);",
          "3852:     return ret;",
          "",
          "[Removed Lines]",
          "3833: int ssl_handshake_hash(SSL *s, unsigned char *out, int outlen)",
          "3837:     int ret = EVP_MD_CTX_size(hdgst);",
          "3838:     if (ret < 0 || ret > outlen) {",
          "3839:         ret = 0;",
          "3841:     }",
          "3843:     if (ctx == NULL) {",
          "3844:         ret = 0;",
          "3846:     }",
          "3849:         ret = 0;",
          "",
          "[Added Lines]",
          "3829: int ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,",
          "3830:                        size_t *hashlen)",
          "3834:     int hashleni = EVP_MD_CTX_size(hdgst);",
          "3835:     int ret = 0;",
          "3837:     if (hashleni < 0 || (size_t)hashleni > outlen)",
          "3841:     if (ctx == NULL)",
          "3846:         goto err;",
          "3850:     ret = 1;",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "500: struct ssl_session_st {",
          "501:     int ssl_version;            /* what ssl version session info is being kept",
          "504:     unsigned char master_key[SSL_MAX_MASTER_KEY_LENGTH];",
          "506:     unsigned int session_id_length;",
          "",
          "[Removed Lines]",
          "503:     int master_key_length;",
          "",
          "[Added Lines]",
          "503:     size_t master_key_length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1200:         int ctype_num;",
          "1201:         char ctype[SSL3_CT_NUMBER];",
          "1202:         STACK_OF(X509_NAME) *ca_names;",
          "1204:         unsigned char *key_block;",
          "1205:         const EVP_CIPHER *new_sym_enc;",
          "1206:         const EVP_MD *new_hash;",
          "",
          "[Removed Lines]",
          "1203:         int key_block_length;",
          "",
          "[Added Lines]",
          "1203:         size_t key_block_length;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1570:     int (*mac) (SSL *, SSL3_RECORD *, unsigned char *, int);",
          "1571:     int (*setup_key_block) (SSL *);",
          "1572:     int (*generate_master_secret) (SSL *, unsigned char *, unsigned char *,",
          "1574:     int (*change_cipher_state) (SSL *, int);",
          "1575:     int (*final_finish_mac) (SSL *, const char *, int, unsigned char *);",
          "1576:     int finish_mac_length;",
          "",
          "[Removed Lines]",
          "1573:                                    int);",
          "",
          "[Added Lines]",
          "1573:                                    size_t, size_t *);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1819: void ssl_update_cache(SSL *s, int mode);",
          "1820: __owur int ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,",
          "1821:                               const EVP_MD **md, int *mac_pkey_type,",
          "1823:                               int use_etm);",
          "1824: __owur int ssl_cipher_get_overhead(const SSL_CIPHER *c, size_t *mac_overhead,",
          "1825:                                    size_t *int_overhead, size_t *blocksize,",
          "",
          "[Removed Lines]",
          "1822:                               int *mac_secret_size, SSL_COMP **comp,",
          "",
          "[Added Lines]",
          "1822:                               size_t *mac_secret_size, SSL_COMP **comp,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1879: __owur int ssl3_do_write(SSL *s, int type);",
          "1880: int ssl3_send_alert(SSL *s, int level, int desc);",
          "1881: __owur int ssl3_generate_master_secret(SSL *s, unsigned char *out,",
          "1883: __owur int ssl3_get_req_cert_type(SSL *s, WPACKET *pkt);",
          "1884: __owur int ssl3_num_ciphers(void);",
          "1885: __owur const SSL_CIPHER *ssl3_get_cipher(unsigned int u);",
          "",
          "[Removed Lines]",
          "1882:                                        unsigned char *p, int len);",
          "",
          "[Added Lines]",
          "1882:                                        unsigned char *p, size_t len,",
          "1883:                                        size_t *secret_size);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1985: __owur int tls1_final_finish_mac(SSL *s,",
          "1986:                                  const char *str, int slen, unsigned char *p);",
          "1987: __owur int tls1_generate_master_secret(SSL *s, unsigned char *out,",
          "1989: __owur int tls1_export_keying_material(SSL *s, unsigned char *out, size_t olen,",
          "1990:                                        const char *label, size_t llen,",
          "1991:                                        const unsigned char *p, size_t plen,",
          "",
          "[Removed Lines]",
          "1988:                                        unsigned char *p, int len);",
          "",
          "[Added Lines]",
          "1989:                                        unsigned char *p, size_t len,",
          "1990:                                        size_t *secret_size);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2086: __owur int ssl_parse_clienthello_use_srtp_ext(SSL *s, PACKET *pkt, int *al);",
          "2087: __owur int ssl_parse_serverhello_use_srtp_ext(SSL *s, PACKET *pkt, int *al);",
          "2090: __owur const EVP_MD *ssl_md(int idx);",
          "2091: __owur const EVP_MD *ssl_handshake_md(SSL *s);",
          "2092: __owur const EVP_MD *ssl_prf_md(SSL *s);",
          "",
          "[Removed Lines]",
          "2089: __owur int ssl_handshake_hash(SSL *s, unsigned char *out, int outlen);",
          "",
          "[Added Lines]",
          "2091: __owur int ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,",
          "2092:                                  size_t *hashlen);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:     if (s->version >= TLS1_VERSION && s->tls_session_secret_cb &&",
          "974:         s->session->tlsext_tick) {",
          "975:         const SSL_CIPHER *pref_cipher = NULL;",
          "977:         if (s->tls_session_secret_cb(s, s->session->master_key,",
          "979:                                      NULL, &pref_cipher,",
          "981:             s->session->cipher = pref_cipher ?",
          "982:                 pref_cipher : ssl_get_cipher_by_char(s, cipherchars);",
          "983:         } else {",
          "",
          "[Removed Lines]",
          "976:         s->session->master_key_length = sizeof(s->session->master_key);",
          "978:                                      &s->session->master_key_length,",
          "980:                                      s->tls_session_secret_cb_arg)) {",
          "",
          "[Added Lines]",
          "980:         int master_key_length;",
          "981:         master_key_length = sizeof(s->session->master_key);",
          "983:                                      &master_key_length,",
          "985:                                      s->tls_session_secret_cb_arg)",
          "986:                  && master_key_length > 0) {",
          "987:             s->session->master_key_length = master_key_length;",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1232:     if (!s->hit && s->version >= TLS1_VERSION && s->tls_session_secret_cb) {",
          "1233:         const SSL_CIPHER *pref_cipher = NULL;",
          "1236:         if (s->tls_session_secret_cb(s, s->session->master_key,",
          "1238:                                      &pref_cipher,",
          "1240:             s->hit = 1;",
          "1241:             s->session->ciphers = ciphers;",
          "1242:             s->session->verify_result = X509_V_OK;",
          "",
          "[Removed Lines]",
          "1235:         s->session->master_key_length = sizeof(s->session->master_key);",
          "1237:                                      &s->session->master_key_length, ciphers,",
          "1239:                                      s->tls_session_secret_cb_arg)) {",
          "",
          "[Added Lines]",
          "1238:         int master_key_length;",
          "1240:         master_key_length = sizeof(s->session->master_key);",
          "1242:                                      &master_key_length, ciphers,",
          "1244:                                      s->tls_session_secret_cb_arg)",
          "1245:                 && master_key_length > 0) {",
          "1246:             s->session->master_key_length = master_key_length;",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     return ret;",
          "89: }",
          "92: {",
          "93:     int ret;",
          "94:     ret = tls1_PRF(s,",
          "",
          "[Removed Lines]",
          "91: static int tls1_generate_key_block(SSL *s, unsigned char *km, int num)",
          "",
          "[Added Lines]",
          "92: static int tls1_generate_key_block(SSL *s, unsigned char *km, size_t num)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:     unsigned char *p;",
          "361:     const EVP_CIPHER *c;",
          "362:     const EVP_MD *hash;",
          "364:     SSL_COMP *comp;",
          "366:     int ret = 0;",
          "368:     if (s->s3->tmp.key_block_length != 0)",
          "",
          "[Removed Lines]",
          "363:     int num;",
          "365:     int mac_type = NID_undef, mac_secret_size = 0;",
          "",
          "[Added Lines]",
          "365:     int mac_type = NID_undef;",
          "366:     size_t num, mac_secret_size = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "409:     }",
          "410:     printf(\"master key\\n\");",
          "411:     {",
          "413:         for (z = 0; z < s->session->master_key_length; z++)",
          "414:             printf(\"%02X%c\", s->session->master_key[z],",
          "415:                    ((z + 1) % 16) ? ' ' : '\\n');",
          "",
          "[Removed Lines]",
          "412:         int z;",
          "",
          "[Added Lines]",
          "413:         size_t z;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "420: #ifdef SSL_DEBUG",
          "421:     printf(\"\\nkey block\\n\");",
          "422:     {",
          "424:         for (z = 0; z < num; z++)",
          "425:             printf(\"%02X%c\", p[z], ((z + 1) % 16) ? ' ' : '\\n');",
          "426:     }",
          "",
          "[Removed Lines]",
          "423:         int z;",
          "",
          "[Added Lines]",
          "424:         size_t z;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "453: int tls1_final_finish_mac(SSL *s, const char *str, int slen, unsigned char *out)",
          "454: {",
          "456:     unsigned char hash[EVP_MAX_MD_SIZE];",
          "458:     if (!ssl3_digest_cached_records(s, 0))",
          "459:         return 0;",
          "464:         return 0;",
          "466:     if (!tls1_PRF(s, str, slen, hash, hashlen, NULL, 0, NULL, 0, NULL, 0,",
          "",
          "[Removed Lines]",
          "455:     int hashlen;",
          "461:     hashlen = ssl_handshake_hash(s, hash, sizeof(hash));",
          "463:     if (hashlen == 0)",
          "",
          "[Added Lines]",
          "456:     size_t hashlen;",
          "462:     if (!ssl_handshake_hash(s, hash, sizeof(hash), &hashlen))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "472: }",
          "474: int tls1_generate_master_secret(SSL *s, unsigned char *out, unsigned char *p,",
          "476: {",
          "477:     if (s->session->flags & SSL_SESS_FLAG_EXTMS) {",
          "478:         unsigned char hash[EVP_MAX_MD_SIZE * 2];",
          "485:         if (!ssl3_digest_cached_records(s, 1))",
          "488: #ifdef SSL_DEBUG",
          "489:         fprintf(stderr, \"Handshake hashes:\\n\");",
          "490:         BIO_dump_fp(stderr, (char *)hash, hashlen);",
          "",
          "[Removed Lines]",
          "475:                                 int len)",
          "479:         int hashlen;",
          "486:             return -1;",
          "487:         hashlen = ssl_handshake_hash(s, hash, sizeof(hash));",
          "",
          "[Added Lines]",
          "474:                                 size_t len, size_t *secret_size)",
          "478:         size_t hashlen;",
          "485:             return 0;",
          "486:         if(!ssl_handshake_hash(s, hash, sizeof(hash), &hashlen))",
          "487:             return 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "536:     }",
          "537: #endif",
          "540: }",
          "542: int tls1_export_keying_material(SSL *s, unsigned char *out, size_t olen,",
          "",
          "[Removed Lines]",
          "539:     return (SSL3_MASTER_SECRET_SIZE);",
          "",
          "[Added Lines]",
          "540:     return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aebe9e399109dcde63a1d0328ffdfc5619b49431",
      "candidate_info": {
        "commit_hash": "aebe9e399109dcde63a1d0328ffdfc5619b49431",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/aebe9e399109dcde63a1d0328ffdfc5619b49431",
        "files": [
          "ssl/record/ssl3_record.c",
          "test/danetest.c"
        ],
        "message": "Fix some -Wshadow warnings\n\nFound using various (old-ish) versions of gcc.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2940)",
        "before_after_code_files": [
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "test/danetest.c||test/danetest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ],
          "candidate": [
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: {",
          "748:     SSL3_RECORD *rec;",
          "749:     EVP_CIPHER_CTX *ds;",
          "",
          "[Removed Lines]",
          "746: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, size_t n_recs, int send)",
          "",
          "[Added Lines]",
          "746: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, size_t n_recs, int sending)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "759:     if (n_recs != 1)",
          "760:         return 0;",
          "762:         ds = s->enc_write_ctx;",
          "763:         if (s->enc_write_ctx == NULL)",
          "764:             enc = NULL;",
          "",
          "[Removed Lines]",
          "761:     if (send) {",
          "",
          "[Added Lines]",
          "761:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "786:             i = bs - (l % bs);",
          "",
          "[Removed Lines]",
          "785:         if ((bs != 1) && send) {",
          "",
          "[Added Lines]",
          "785:         if ((bs != 1) && sending) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "796:             rec->input[l - 1] = (unsigned char)(i - 1);",
          "797:         }",
          "800:             if (l == 0 || l % bs != 0)",
          "801:                 return 0;",
          "",
          "[Removed Lines]",
          "799:         if (!send) {",
          "",
          "[Added Lines]",
          "799:         if (!sending) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "813:                 return -1;",
          "814:             mac_size = (size_t)imac_size;",
          "815:         }",
          "817:             return ssl3_cbc_remove_padding(rec, bs, mac_size);",
          "818:     }",
          "819:     return (1);",
          "",
          "[Removed Lines]",
          "816:         if ((bs != 1) && !send)",
          "",
          "[Added Lines]",
          "816:         if ((bs != 1) && !sending)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "834: {",
          "835:     EVP_CIPHER_CTX *ds;",
          "836:     size_t reclen[SSL_MAX_PIPELINES];",
          "",
          "[Removed Lines]",
          "833: int tls1_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int send)",
          "",
          "[Added Lines]",
          "833: int tls1_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int sending)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "844:     if (n_recs == 0)",
          "845:         return 0;",
          "848:         if (EVP_MD_CTX_md(s->write_hash)) {",
          "849:             int n = EVP_MD_CTX_size(s->write_hash);",
          "850:             OPENSSL_assert(n >= 0);",
          "",
          "[Removed Lines]",
          "847:     if (send) {",
          "",
          "[Added Lines]",
          "847:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "916:                 & EVP_CIPH_FLAG_AEAD_CIPHER) {",
          "917:                 unsigned char *seq;",
          "920:                     : RECORD_LAYER_get_read_sequence(&s->rlayer);",
          "922:                 if (SSL_IS_DTLS(s)) {",
          "924:                     unsigned char dtlsseq[9], *p = dtlsseq;",
          "927:                         DTLS_RECORD_LAYER_get_r_epoch(&s->rlayer), p);",
          "928:                     memcpy(p, &seq[2], 6);",
          "929:                     memcpy(buf[ctr], dtlsseq, 8);",
          "",
          "[Removed Lines]",
          "919:                 seq = send ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "926:                     s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "",
          "[Added Lines]",
          "919:                 seq = sending ? RECORD_LAYER_get_write_sequence(&s->rlayer)",
          "926:                     s2n(sending ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "946:                 if (pad <= 0)",
          "947:                     return -1;",
          "950:                     reclen[ctr] += pad;",
          "951:                     recs[ctr].length += pad;",
          "952:                 }",
          "955:                 padnum = bs - (reclen[ctr] % bs);",
          "",
          "[Removed Lines]",
          "949:                 if (send) {",
          "954:             } else if ((bs != 1) && send) {",
          "",
          "[Added Lines]",
          "949:                 if (sending) {",
          "954:             } else if ((bs != 1) && sending) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "966:                 recs[ctr].length += padnum;",
          "967:             }",
          "970:                 if (reclen[ctr] == 0 || reclen[ctr] % bs != 0)",
          "971:                     return 0;",
          "972:             }",
          "",
          "[Removed Lines]",
          "969:             if (!send) {",
          "",
          "[Added Lines]",
          "969:             if (!sending) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1003:             ? (tmpr < 0)",
          "1004:             : (tmpr == 0))",
          "1007:             if (EVP_CIPHER_mode(enc) == EVP_CIPH_GCM_MODE) {",
          "1008:                 for (ctr = 0; ctr < n_recs; ctr++) {",
          "1009:                     recs[ctr].data += EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "",
          "[Removed Lines]",
          "1006:         if (send == 0) {",
          "",
          "[Added Lines]",
          "1006:         if (sending == 0) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1026:                 return -1;",
          "1027:             mac_size = (size_t)imac_size;",
          "1028:         }",
          "1030:             int tmpret;",
          "1031:             for (ctr = 0; ctr < n_recs; ctr++) {",
          "1032:                 tmpret = tls1_cbc_remove_padding(s, &recs[ctr], bs, mac_size);",
          "",
          "[Removed Lines]",
          "1029:         if ((bs != 1) && !send) {",
          "",
          "[Added Lines]",
          "1029:         if ((bs != 1) && !sending) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1041:                                                ret, -1);",
          "1042:             }",
          "1043:         }",
          "1045:             for (ctr = 0; ctr < n_recs; ctr++) {",
          "1046:                 recs[ctr].length -= pad;",
          "1047:             }",
          "",
          "[Removed Lines]",
          "1044:         if (pad && !send) {",
          "",
          "[Added Lines]",
          "1044:         if (pad && !sending) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1050:     return ret;",
          "1051: }",
          "1054: {",
          "1055:     unsigned char *mac_sec, *seq;",
          "1056:     const EVP_MD_CTX *hash;",
          "",
          "[Removed Lines]",
          "1053: int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "[Added Lines]",
          "1053: int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1059:     size_t npad;",
          "1060:     int t;",
          "1063:         mac_sec = &(ssl->s3->write_mac_secret[0]);",
          "1064:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "1065:         hash = ssl->write_hash;",
          "",
          "[Removed Lines]",
          "1062:     if (send) {",
          "",
          "[Added Lines]",
          "1062:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1075:     md_size = t;",
          "1076:     npad = (48 / md_size) * md_size;",
          "1079:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "1080:         ssl3_cbc_record_digest_supported(hash)) {",
          "",
          "[Removed Lines]",
          "1078:     if (!send &&",
          "",
          "[Added Lines]",
          "1078:     if (!sending &&",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1146:     return 1;",
          "1147: }",
          "1150: {",
          "1151:     unsigned char *seq;",
          "1152:     EVP_MD_CTX *hash;",
          "",
          "[Removed Lines]",
          "1149: int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send)",
          "",
          "[Added Lines]",
          "1149: int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1154:     int i;",
          "1155:     EVP_MD_CTX *hmac = NULL, *mac_ctx;",
          "1156:     unsigned char header[13];",
          "1158:                       : (ssl->mac_flags & SSL_MAC_FLAG_READ_MAC_STREAM));",
          "1159:     int t;",
          "1162:         seq = RECORD_LAYER_get_write_sequence(&ssl->rlayer);",
          "1163:         hash = ssl->write_hash;",
          "1164:     } else {",
          "",
          "[Removed Lines]",
          "1157:     int stream_mac = (send ? (ssl->mac_flags & SSL_MAC_FLAG_WRITE_MAC_STREAM)",
          "1161:     if (send) {",
          "",
          "[Added Lines]",
          "1157:     int stream_mac = (sending ? (ssl->mac_flags & SSL_MAC_FLAG_WRITE_MAC_STREAM)",
          "1161:     if (sending) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1183:     if (SSL_IS_DTLS(ssl)) {",
          "1184:         unsigned char dtlsseq[8], *p = dtlsseq;",
          "1187:             DTLS_RECORD_LAYER_get_r_epoch(&ssl->rlayer), p);",
          "1188:         memcpy(p, &seq[2], 6);",
          "",
          "[Removed Lines]",
          "1186:         s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&ssl->rlayer) :",
          "",
          "[Added Lines]",
          "1186:         s2n(sending ? DTLS_RECORD_LAYER_get_w_epoch(&ssl->rlayer) :",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1197:     header[11] = (unsigned char)(rec->length >> 8);",
          "1198:     header[12] = (unsigned char)(rec->length & 0xff);",
          "1201:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "1202:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
          "",
          "[Removed Lines]",
          "1200:     if (!send && !SSL_READ_ETM(ssl) &&",
          "",
          "[Added Lines]",
          "1200:     if (!sending && !SSL_READ_ETM(ssl) &&",
          "",
          "---------------"
        ],
        "test/danetest.c||test/danetest.c": [
          "File: test/danetest.c -> test/danetest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:     return 1;",
          "318: }",
          "321:                          BIO *f, const char *path)",
          "322: {",
          "323:     char *line;",
          "",
          "[Removed Lines]",
          "320: static int test_tlsafile(SSL_CTX *ctx, const char *basename,",
          "",
          "[Added Lines]",
          "320: static int test_tlsafile(SSL_CTX *ctx, const char *base_name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:         if ((ssl = SSL_new(ctx)) == NULL)",
          "354:             return -1;",
          "355:         SSL_set_connect_state(ssl);",
          "357:             SSL_free(ssl);",
          "358:             return -1;",
          "359:         }",
          "",
          "[Removed Lines]",
          "356:         if (SSL_dane_enable(ssl, basename) <= 0) {",
          "",
          "[Added Lines]",
          "356:         if (SSL_dane_enable(ssl, base_name) <= 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "224135e96a16deaf9de787398d91c1b8212ab8ed",
      "candidate_info": {
        "commit_hash": "224135e96a16deaf9de787398d91c1b8212ab8ed",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/224135e96a16deaf9de787398d91c1b8212ab8ed",
        "files": [
          "ssl/statem/extensions.c"
        ],
        "message": "Continue the extensions refactor\n\nAdd support for construction of extensions\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/statem/extensions.c||ssl/statem/extensions.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c"
          ],
          "candidate": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     unsigned int type;",
          "41:     int (*server_parse)(SSL *s, PACKET *pkt, int *al);",
          "42:     int (*client_parse)(SSL *s, PACKET *pkt, int *al);",
          "43:     unsigned int context;",
          "44: } EXTENSION_DEFINITION;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     int (*server_construct)(SSL *s, WPACKET *pkt, int *al);",
          "44:     int (*client_construct)(SSL *s, WPACKET *pkt, int *al);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         TLSEXT_TYPE_renegotiate,",
          "49:         tls_parse_clienthello_renegotiate,",
          "50:         NULL,",
          "51:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_SSL3_ALLOWED",
          "52:         | EXT_TLS1_2_AND_BELOW_ONLY",
          "53:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:         NULL,",
          "54:         NULL,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:         TLSEXT_TYPE_server_name,",
          "56:         tls_parse_clienthello_server_name,",
          "57:         NULL,",
          "58:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "59:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "60:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:         NULL,",
          "63:         NULL,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:         TLSEXT_TYPE_srp,",
          "64:         tls_parse_clienthello_srp,",
          "65:         NULL,",
          "66:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "67:     },",
          "68: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:         NULL,",
          "73:         NULL,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "71:         TLSEXT_TYPE_ec_point_formats,",
          "72:         tls_parse_clienthello_ec_pt_formats,",
          "73:         NULL,",
          "74:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "75:     },",
          "76:     {",
          "77:         TLSEXT_TYPE_supported_groups,",
          "78:         tls_parse_clienthello_supported_groups,",
          "79:         NULL,",
          "80:         EXT_CLIENT_HELLO | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "81:     },",
          "82: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         NULL,",
          "83:         NULL,",
          "90:         NULL,",
          "91:         NULL,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "84:         TLSEXT_TYPE_session_ticket,",
          "85:         tls_parse_clienthello_session_ticket,",
          "86:         NULL,",
          "87:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "88:     },",
          "89:     {",
          "90:         TLSEXT_TYPE_signature_algorithms,",
          "91:         tls_parse_clienthello_sig_algs,",
          "92:         NULL,",
          "93:         EXT_CLIENT_HELLO",
          "94:     },",
          "95:     {",
          "96:         TLSEXT_TYPE_status_request,",
          "97:         tls_parse_clienthello_status_request,",
          "98:         NULL,",
          "99:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_3_CERTIFICATE",
          "100:     },",
          "101: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:         NULL,",
          "100:         NULL,",
          "107:         NULL,",
          "108:         NULL,",
          "115:         NULL,",
          "116:         NULL,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "103:         TLSEXT_TYPE_next_proto_neg,",
          "104:         tls_parse_clienthello_npn,",
          "105:         NULL,",
          "106:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "107:     },",
          "108: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:         NULL,",
          "125:         NULL,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "110:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "111:         tls_parse_clienthello_alpn,",
          "112:         NULL,",
          "113:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "114:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "115:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:         NULL,",
          "134:         NULL,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "117:         TLSEXT_TYPE_use_srtp,",
          "118:         tls_parse_clienthello_use_srtp,",
          "119:         NULL,",
          "120:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "121:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS | EXT_DTLS_ONLY",
          "122:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:         NULL,",
          "143:         NULL,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "124:         TLSEXT_TYPE_encrypt_then_mac,",
          "125:         tls_parse_clienthello_etm,",
          "126:         NULL,",
          "127:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "128:     },",
          "129:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:         NULL,",
          "152:         NULL,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "136:         NULL,",
          "137:         NULL,",
          "138:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_3_CERTIFICATE",
          "139:     },",
          "140:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:         NULL,",
          "165:         NULL,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "149:         NULL,",
          "150:         NULL,",
          "151:         EXT_CLIENT_HELLO | EXT_TLS_IMPLEMENTATION_ONLY",
          "152:     },",
          "153:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:         NULL,",
          "180:         NULL,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "156:         NULL,",
          "157:         NULL,",
          "158:         EXT_CLIENT_HELLO",
          "159:     },",
          "160:     {",
          "161:         TLSEXT_TYPE_key_share,",
          "162:         tls_parse_clienthello_key_share,",
          "163:         NULL,",
          "164:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO",
          "165:         | EXT_TLS1_3_HELLO_RETRY_REQUEST | EXT_TLS_IMPLEMENTATION_ONLY",
          "166:         | EXT_TLS1_3_ONLY",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:         NULL,",
          "189:         NULL,",
          "196:         NULL,",
          "197:         NULL,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "354:         currext->parsed = 1;",
          "356:         parser = NULL;",
          "358:             parser = s->server ? extdef->server_parse : extdef->client_parse;",
          "360:         if (parser == NULL) {",
          "365:             if ((!s->hit || !s->server)",
          "366:                     && custom_ext_parse(s, s->server, currext->type,",
          "367:                                         PACKET_data(&currext->data),",
          "368:                                         PACKET_remaining(&currext->data),",
          "",
          "[Removed Lines]",
          "357:         if (find_extension_definition(s, currext->type, &extdef))",
          "",
          "[Added Lines]",
          "391:         if (find_extension_definition(s, currext->type, &extdef)) {",
          "395:             if ((SSL_IS_DTLS(s)",
          "396:                         && (extdef->context & EXT_TLS_IMPLEMENTATION_ONLY) != 0)",
          "397:                     || (s->version == SSL3_VERSION",
          "398:                             && (extdef->context & EXT_SSL3_ALLOWED) == 0)",
          "399:                     || (SSL_IS_TLS13(s)",
          "400:                         && (extdef->context & EXT_TLS1_2_AND_BELOW_ONLY) != 0)",
          "401:                     || (!SSL_IS_TLS13(s)",
          "402:                         && (extdef->context & EXT_TLS1_3_ONLY) != 0))",
          "403:                 continue;",
          "404:         }",
          "416:                     && (context",
          "417:                         & (EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO)) != 0",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "372:             continue;",
          "373:         }",
          "388:         if (!parser(s, &currext->data, al))",
          "389:             return 0;",
          "390:     }",
          "",
          "[Removed Lines]",
          "376:         if ((SSL_IS_DTLS(s)",
          "377:                     && (extdef->context & EXT_TLS_IMPLEMENTATION_ONLY) != 0)",
          "378:                 || (s->version == SSL3_VERSION",
          "379:                         && (extdef->context & EXT_SSL3_ALLOWED) == 0)",
          "380:                 || (SSL_IS_TLS13(s)",
          "381:                     && (extdef->context & EXT_TLS1_2_AND_BELOW_ONLY) != 0)",
          "382:                 || (!SSL_IS_TLS13(s)",
          "383:                     && (extdef->context & EXT_TLS1_3_ONLY) != 0)",
          "384:                 || (s->server && extdef->server_parse == NULL)",
          "385:                 || (!s->server && extdef->client_parse == NULL))",
          "386:             continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "409:     return tls_parse_all_extensions(s, ext, 1, al);",
          "410: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: int tls_construct_extensions(SSL *s, WPACKET *pkt, unsigned int context,",
          "452:                              int *al)",
          "453: {",
          "454:     size_t loop;",
          "455:     int addcustom = 0;",
          "457:     if (!WPACKET_start_sub_packet_u16(pkt)",
          "462:             || ((context & EXT_CLIENT_HELLO) != 0",
          "463:                && !WPACKET_set_flags(pkt,",
          "464:                                      WPACKET_FLAGS_ABANDON_ON_ZERO_LENGTH))) {",
          "466:         SSLerr(SSL_F_TLS_CONSTRUCT_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "467:         return 0;",
          "468:     }",
          "470:     for (loop = 0; loop < OSSL_NELEM(ext_defs); loop++) {",
          "472:         if ((ext_defs[loop].context & context) == 0)",
          "473:             continue;",
          "475:         construct = s->server ? extdef->server_construct",
          "476:                               : extdef->client_construct;",
          "479:         if ((SSL_IS_DTLS(s)",
          "480:                     && (extdef->context & EXT_TLS_IMPLEMENTATION_ONLY) != 0)",
          "481:                 || (s->version == SSL3_VERSION",
          "482:                         && (extdef->context & EXT_SSL3_ALLOWED) == 0)",
          "483:                 || (SSL_IS_TLS13(s)",
          "484:                     && (extdef->context & EXT_TLS1_2_AND_BELOW_ONLY) != 0)",
          "485:                 || (!SSL_IS_TLS13(s)",
          "486:                     && ((extdef->context & EXT_TLS1_3_ONLY) != 0",
          "487:                         || (context & EXT_CLIENT_HELLO) != 0))",
          "488:                 || construct == NULL)",
          "489:             continue;",
          "491:         if (!construct(s, pkt, al))",
          "492:             return 0;",
          "493:     }",
          "497:     if ((context & EXT_CLIENT_HELLO) != 0) {",
          "498:         custom_ext_init(&s->cert->cli_ext);",
          "499:         addcustom = 1;",
          "500:     } else if (context & (EXT_TLS1_2_SERVER_HELLO) {",
          "509:         addcustom = 1;",
          "510:     }",
          "511:     if (addcustom && !custom_ext_add(s, s->server, pkt, al)) {",
          "512:         SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "513:         return 0;",
          "514:     }",
          "516:     if (!WPACKET_close(pkt)) {",
          "518:         SSLerr(SSL_F_TLS_CONSTRUCT_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "519:         return 0;",
          "520:     }",
          "522:     return 1;",
          "523: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "045bd04706d2a798d5fb4b3ccf7fd56e6e09b082",
      "candidate_info": {
        "commit_hash": "045bd04706d2a798d5fb4b3ccf7fd56e6e09b082",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/045bd04706d2a798d5fb4b3ccf7fd56e6e09b082",
        "files": [
          "include/openssl/ssl.h",
          "ssl/d1_lib.c",
          "ssl/ssl_ciph.c",
          "ssl/ssl_locl.h",
          "util/libssl.num"
        ],
        "message": "Add DTLS_get_data_mtu() function\n\nWe add ssl_cipher_get_overhead() as an internal function, to avoid\nhaving too much ciphersuite-specific knowledge in DTLS_get_data_mtu()\nitself. It's going to need adjustment for TLSv1.3... but then again, so\nis fairly much *all* of the SSL_CIPHER handling. This bit is in the noise.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/d1_lib.c||ssl/d1_lib.c",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "util/libssl.num||util/libssl.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_lib.c||ssl/d1_lib.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h"
          ],
          "candidate": [
            "ssl/d1_lib.c||ssl/d1_lib.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1633: __owur STACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *s);",
          "1634: __owur STACK_OF(SSL_CIPHER) *SSL_CTX_get_ciphers(const SSL_CTX *ctx);",
          "1635: __owur STACK_OF(SSL_CIPHER) *SSL_get_client_ciphers(const SSL *s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1633: __owur size_t DTLS_get_data_mtu(const SSL *s);",
          "",
          "---------------"
        ],
        "ssl/d1_lib.c||ssl/d1_lib.c": [
          "File: ssl/d1_lib.c -> ssl/d1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1088: {",
          "1089:     return dtls1_link_min_mtu() - BIO_dgram_get_mtu_overhead(SSL_get_wbio(s));",
          "1090: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092: size_t DTLS_get_data_mtu(const SSL *s)",
          "1093: {",
          "1094:     size_t mac_overhead, int_overhead, blocksize, ext_overhead;",
          "1095:     const SSL_CIPHER *ciph = SSL_get_current_cipher(s);",
          "1096:     size_t mtu = s->d1->mtu;",
          "1098:     if (ciph == NULL)",
          "1099:         return 0;",
          "1101:     if (!ssl_cipher_get_overhead(ciph, &mac_overhead, &int_overhead,",
          "1102:                                  &blocksize, &ext_overhead))",
          "1103:         return 0;",
          "1105:     if (SSL_USE_ETM(s))",
          "1106:         ext_overhead += mac_overhead;",
          "1107:     else",
          "1108:         int_overhead += mac_overhead;",
          "1111:     if (ext_overhead + DTLS1_RT_HEADER_LENGTH >= mtu)",
          "1112:         return 0;",
          "1113:     mtu -= ext_overhead + DTLS1_RT_HEADER_LENGTH;",
          "1117:     if (blocksize)",
          "1118:         mtu -= (mtu % blocksize);",
          "1121:     if (int_overhead >= mtu)",
          "1122:         return 0;",
          "1123:     mtu -= int_overhead;",
          "1125:     return mtu;",
          "1126: }",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1947: {",
          "1948:     return (c->algorithm_mac & SSL_AEAD) ? 1 : 0;",
          "1949: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1951: int ssl_cipher_get_overhead(const SSL_CIPHER *c, size_t *mac_overhead,",
          "1952:                             size_t *int_overhead, size_t *blocksize,",
          "1953:                             size_t *ext_overhead)",
          "1954: {",
          "1955:     size_t mac = 0, in = 0, blk = 0, out = 0;",
          "1959:     if (c->algorithm_enc & SSL_AESGCM) {",
          "1960:         out = EVP_GCM_TLS_EXPLICIT_IV_LEN + EVP_GCM_TLS_TAG_LEN;",
          "1961:     } else if (c->algorithm_enc & (SSL_AES128CCM | SSL_AES256CCM)) {",
          "1962:         out = EVP_CCM_TLS_EXPLICIT_IV_LEN + 16;",
          "1963:     } else if (c->algorithm_enc & (SSL_AES128CCM8 | SSL_AES256CCM8)) {",
          "1964:         out = EVP_CCM_TLS_EXPLICIT_IV_LEN + 8;",
          "1965:     } else if (c->algorithm_enc & SSL_CHACHA20POLY1305) {",
          "1966:         out = 16;",
          "1967:     } else if (c->algorithm_mac & SSL_AEAD) {",
          "1969:         return 0;",
          "1970:     } else {",
          "1972:         int digest_nid = SSL_CIPHER_get_digest_nid(c);",
          "1973:         const EVP_MD *e_md = EVP_get_digestbynid(digest_nid);",
          "1975:         if (e_md == NULL)",
          "1976:             return 0;",
          "1978:         mac = EVP_MD_size(e_md);",
          "1979:         if (c->algorithm_enc != SSL_eNULL) {",
          "1980:             int cipher_nid = SSL_CIPHER_get_cipher_nid(c);",
          "1981:             const EVP_CIPHER *e_ciph = EVP_get_cipherbynid(cipher_nid);",
          "1985:             if (e_ciph == NULL ||",
          "1986:                 EVP_CIPHER_mode(e_ciph) != EVP_CIPH_CBC_MODE)",
          "1987:                 return 0;",
          "1990:             out = EVP_CIPHER_iv_length(e_ciph);",
          "1991:             blk = EVP_CIPHER_block_size(e_ciph);",
          "1992:         }",
          "1993:     }",
          "2000:     return 1;",
          "2001: }",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1817:                               const EVP_MD **md, int *mac_pkey_type,",
          "1818:                               int *mac_secret_size, SSL_COMP **comp,",
          "1819:                               int use_etm);",
          "1820: __owur int ssl_cipher_get_cert_index(const SSL_CIPHER *c);",
          "1821: __owur const SSL_CIPHER *ssl_get_cipher_by_char(SSL *ssl,",
          "1822:                                                 const unsigned char *ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1820: __owur int ssl_cipher_get_overhead(const SSL_CIPHER *c, size_t *mac_overhead,",
          "1821:                                    size_t *int_overhead, size_t *blocksize,",
          "1822:                                    size_t *ext_overhead);",
          "",
          "---------------"
        ],
        "util/libssl.num||util/libssl.num": [
          "File: util/libssl.num -> util/libssl.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: SSL_SESSION_get0_id_context             405 1_1_0 EXIST::FUNCTION:",
          "405: SSL_SESSION_set1_id                     406 1_1_0 EXIST::FUNCTION:",
          "406: SSL_CTX_set1_cert_store                 407 1_1_1 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407: DTLS_get_data_mtu                       408 1_1_1 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    }
  ]
}