{
  "cve_id": "CVE-2015-6819",
  "cve_desc": "Multiple integer underflows in the ff_mjpeg_decode_frame function in libavcodec/mjpegdec.c in FFmpeg before 2.7.2 allow remote attackers to cause a denial of service (out-of-bounds array access) or possibly have unspecified other impact via crafted MJPEG data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "84afc6b70d24fc0bf686e43138c96cf60a9445fe",
  "patch_info": {
    "commit_hash": "84afc6b70d24fc0bf686e43138c96cf60a9445fe",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/84afc6b70d24fc0bf686e43138c96cf60a9445fe",
    "files": [
      "libavcodec/mjpegdec.c"
    ],
    "message": "avcodec/mjpegdec: Fix small picture upscale\n\nFixes out of array access\n\nFixes: asan_heap-oob_1dd60fd_267_cov_2954683513_5baad44ca4702949724234e35c5bb341.jpg\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
    ]
  },
  "patch_diff": {
    "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c": [
      "File: libavcodec/mjpegdec.c -> libavcodec/mjpegdec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2195:                     }",
      "2196:                 } else if (s->upscale_h[p] == 2) {",
      "2197:                     if (is16bit) {",
      "2200:                     } else {",
      "2203:                     }",
      "2204:                     for (index = w - 3; index > 0; index--) {",
      "2205:                         line[index] = (line[index / 3] + line[(index + 1) / 3] + line[(index + 2) / 3] + 1) / 3;",
      "",
      "[Removed Lines]",
      "2198:                         ((uint16_t*)line)[w - 1] =",
      "2199:                         ((uint16_t*)line)[w - 2] = ((uint16_t*)line)[(w - 1) / 3];",
      "2201:                         line[w - 1] =",
      "2202:                         line[w - 2] = line[(w - 1) / 3];",
      "",
      "[Added Lines]",
      "2198:                         ((uint16_t*)line)[w - 1] = ((uint16_t*)line)[(w - 1) / 3];",
      "2199:                         if (w > 1)",
      "2200:                             ((uint16_t*)line)[w - 2] = ((uint16_t*)line)[w - 1];",
      "2202:                         line[w - 1] = line[(w - 1) / 3];",
      "2203:                         if (w > 1)",
      "2204:                             line[w - 2] = line[w - 1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a9c3b588af747521a88c57f528df9c740e4b1c6b",
      "candidate_info": {
        "commit_hash": "a9c3b588af747521a88c57f528df9c740e4b1c6b",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/a9c3b588af747521a88c57f528df9c740e4b1c6b",
        "files": [
          "libavcodec/mjpegdec.c"
        ],
        "message": "avcodec/mjpegdec: Fix small picture upscale\n\nFixes out of array access\n\nFixes: asan_heap-oob_1dd60fd_267_cov_2954683513_5baad44ca4702949724234e35c5bb341.jpg\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 84afc6b70d24fc0bf686e43138c96cf60a9445fe)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ],
          "candidate": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c": [
          "File: libavcodec/mjpegdec.c -> libavcodec/mjpegdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2192:                     }",
          "2193:                 } else if (s->upscale_h[p] == 2) {",
          "2194:                     if (is16bit) {",
          "2197:                     } else {",
          "2200:                     }",
          "2201:                     for (index = w - 3; index > 0; index--) {",
          "2202:                         line[index] = (line[index / 3] + line[(index + 1) / 3] + line[(index + 2) / 3] + 1) / 3;",
          "",
          "[Removed Lines]",
          "2195:                         ((uint16_t*)line)[w - 1] =",
          "2196:                         ((uint16_t*)line)[w - 2] = ((uint16_t*)line)[(w - 1) / 3];",
          "2198:                         line[w - 1] =",
          "2199:                         line[w - 2] = line[(w - 1) / 3];",
          "",
          "[Added Lines]",
          "2195:                         ((uint16_t*)line)[w - 1] = ((uint16_t*)line)[(w - 1) / 3];",
          "2196:                         if (w > 1)",
          "2197:                             ((uint16_t*)line)[w - 2] = ((uint16_t*)line)[w - 1];",
          "2199:                         line[w - 1] = line[(w - 1) / 3];",
          "2200:                         if (w > 1)",
          "2201:                             line[w - 2] = line[w - 1];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec33f59fed82e0a92912639c79ac1b3ac0f23c4a",
      "candidate_info": {
        "commit_hash": "ec33f59fed82e0a92912639c79ac1b3ac0f23c4a",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/ec33f59fed82e0a92912639c79ac1b3ac0f23c4a",
        "files": [
          "libavcodec/mjpegdec.c"
        ],
        "message": "avcodec/mjpegdec: Support pix_fmt_id== 0x42111100\n\nFixes: 538782_300.jpg\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ],
          "candidate": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c": [
          "File: libavcodec/mjpegdec.c -> libavcodec/mjpegdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:         s->upscale_v = 2 << (pix_fmt_id == 0x22121100);",
          "495:         break;",
          "496:     case 0x22111100:",
          "497:         if (s->bits <= 8) s->avctx->pix_fmt = s->cs_itu601 ? AV_PIX_FMT_YUV420P : AV_PIX_FMT_YUVJ420P;",
          "498:         else              s->avctx->pix_fmt = AV_PIX_FMT_YUV420P16;",
          "499:         s->avctx->color_range = s->cs_itu601 ? AVCOL_RANGE_MPEG : AVCOL_RANGE_JPEG;",
          "500:         break;",
          "501:     case 0x41111100:",
          "502:         if (s->bits <= 8) s->avctx->pix_fmt = s->cs_itu601 ? AV_PIX_FMT_YUV411P : AV_PIX_FMT_YUVJ411P;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497:     case 0x42111100:",
          "501:         if (pix_fmt_id == 0x42111100) {",
          "502:             s->upscale_h = 6;",
          "503:             s->chroma_height = s->height / 2;",
          "504:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2060:                    avctx->pix_fmt == AV_PIX_FMT_YUVJ440P ||",
          "2061:                    avctx->pix_fmt == AV_PIX_FMT_YUV440P  ||",
          "2062:                    avctx->pix_fmt == AV_PIX_FMT_YUVA444P ||",
          "2063:                    avctx->pix_fmt == AV_PIX_FMT_GBRAP",
          "2064:                   );",
          "2065:         for (p = 1; p<4; p++) {",
          "2066:             uint8_t *line = s->picture_ptr->data[p];",
          "2067:             if (!(s->upscale_h & (1<<p)))",
          "2068:                 continue;",
          "2069:             for (i = 0; i < s->chroma_height; i++) {",
          "2071:                     line[index] = (line[index / 2] + line[(index + 1) / 2]) >> 1;",
          "2072:                 line += s->linesize[p];",
          "2073:             }",
          "",
          "[Removed Lines]",
          "2070:                 for (index = s->width - 1; index; index--)",
          "",
          "[Added Lines]",
          "2068:                    avctx->pix_fmt == AV_PIX_FMT_YUVJ420P ||",
          "2069:                    avctx->pix_fmt == AV_PIX_FMT_YUV420P  ||",
          "2072:         avcodec_get_chroma_sub_sample(s->avctx->pix_fmt, &hshift, &vshift);",
          "2075:             int w;",
          "2078:             w = s->width >> hshift;",
          "2080:                 for (index = w - 1; index; index--)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63a52ca134dc4ee648a547c7c410d547f371b481",
      "candidate_info": {
        "commit_hash": "63a52ca134dc4ee648a547c7c410d547f371b481",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/63a52ca134dc4ee648a547c7c410d547f371b481",
        "files": [
          "libavcodec/mjpegdec.c"
        ],
        "message": "avcodec/mjpegdec: fix green vertical line at the right with upscale h\n\nFixes Ticket3891\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ],
          "candidate": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c": [
          "File: libavcodec/mjpegdec.c -> libavcodec/mjpegdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2097:                 continue;",
          "2098:             if (p==1 || p==2)",
          "2099:                 w >>= hshift;",
          "2100:             for (i = 0; i < s->chroma_height; i++) {",
          "2102:                     if (is16bit)",
          "2103:                         ((uint16_t*)line)[index] = (((uint16_t*)line)[index / 2] + ((uint16_t*)line)[(index + 1) / 2]) >> 1;",
          "2104:                     else",
          "",
          "[Removed Lines]",
          "2101:                 for (index = w - 1; index; index--) {",
          "",
          "[Added Lines]",
          "2100:             av_assert0(w > 0);",
          "2102:                 if (is16bit) ((uint16_t*)line)[w - 1] = ((uint16_t*)line)[(w - 1) / 2];",
          "2103:                 else                      line[w - 1] = line[(w - 1) / 2];",
          "2104:                 for (index = w - 2; index > 0; index--) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c7899a4834ee927f5629e4c02bfa225b846f016",
      "candidate_info": {
        "commit_hash": "5c7899a4834ee927f5629e4c02bfa225b846f016",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/5c7899a4834ee927f5629e4c02bfa225b846f016",
        "files": [
          "libavcodec/mjpegdec.c"
        ],
        "message": "avcodec/mjpegdec: Support AV_PIX_FMT_YUV420P16 with upscale_h\n\nFixes assertion failure\nFixes: test42f.jpg\nFound-by: Piotr Bandurski <ami_stuff@o2.pl>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ],
          "candidate": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c": [
          "File: libavcodec/mjpegdec.c -> libavcodec/mjpegdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1895:     int start_code;",
          "1896:     int i, index;",
          "1897:     int ret = 0;",
          "1899:     av_dict_free(&s->exif_metadata);",
          "1900:     av_freep(&s->stereo3d);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1898:     int is16bit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2073:     s->got_picture = 0;",
          "2074:     return ret;",
          "2075: the_end:",
          "2076:     if (s->upscale_h) {",
          "2077:         int p;",
          "2078:         av_assert0(avctx->pix_fmt == AV_PIX_FMT_YUVJ444P ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2078:     is16bit = av_pix_fmt_desc_get(s->avctx->pix_fmt)->comp[0].step_minus1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2082:                    avctx->pix_fmt == AV_PIX_FMT_YUVA444P ||",
          "2083:                    avctx->pix_fmt == AV_PIX_FMT_YUVJ420P ||",
          "2084:                    avctx->pix_fmt == AV_PIX_FMT_YUV420P  ||",
          "2085:                    avctx->pix_fmt == AV_PIX_FMT_GBRAP",
          "2086:                   );",
          "2087:         avcodec_get_chroma_sub_sample(s->avctx->pix_fmt, &hshift, &vshift);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2089:                    avctx->pix_fmt == AV_PIX_FMT_YUV420P16||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2093:             if (p==1 || p==2)",
          "2094:                 w >>= hshift;",
          "2095:             for (i = 0; i < s->chroma_height; i++) {",
          "2098:                 line += s->linesize[p];",
          "2099:             }",
          "2100:         }",
          "",
          "[Removed Lines]",
          "2096:                 for (index = w - 1; index; index--)",
          "2097:                     line[index] = (line[index / 2] + line[(index + 1) / 2]) >> 1;",
          "",
          "[Added Lines]",
          "2101:                 for (index = w - 1; index; index--) {",
          "2102:                     if (is16bit)",
          "2103:                         ((uint16_t*)line)[index] = (((uint16_t*)line)[index / 2] + ((uint16_t*)line)[(index + 1) / 2]) >> 1;",
          "2104:                     else",
          "2105:                         line[index] = (line[index / 2] + line[(index + 1) / 2]) >> 1;",
          "2106:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c902045981598a729178e27abd528a48dd384ca",
      "candidate_info": {
        "commit_hash": "2c902045981598a729178e27abd528a48dd384ca",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/2c902045981598a729178e27abd528a48dd384ca",
        "files": [
          "libavcodec/mjpegdec.c"
        ],
        "message": "Fix decoding of progressive jpgs with unusual pixel formats.\n\nFixes ticket #892.",
        "before_after_code_files": [
          "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ],
          "candidate": [
            "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/mjpegdec.c||libavcodec/mjpegdec.c": [
          "File: libavcodec/mjpegdec.c -> libavcodec/mjpegdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     int len, nb_components, i, width, height, pix_fmt_id;",
          "221:     s->cur_scan = 0;",
          "224:     len     = get_bits(&s->gb, 16);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:     s->upscale_h = s->upscale_v = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:         return -1;",
          "402:     }",
          "403:     if (s->ls) {",
          "404:         if (s->nb_components > 1)",
          "405:             s->avctx->pix_fmt = PIX_FMT_RGB24;",
          "406:         else if (s->bits <= 8)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:         s->upscale_h = s->upscale_v = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1233:                 return -1;",
          "1234:         }",
          "1235:     }",
          "1258:     emms_c();",
          "1259:     return 0;",
          "1260:  out_of_range:",
          "",
          "[Removed Lines]",
          "1236:     if (s->upscale_h) {",
          "1237:         uint8_t *line = s->picture_ptr->data[s->upscale_h];",
          "1238:         for (i = 0; i < s->chroma_height; i++) {",
          "1239:             for (index = s->width - 1; index; index--)",
          "1240:                 line[index] = (line[index / 2] + line[(index + 1) / 2]) >> 1;",
          "1241:             line += s->linesize[s->upscale_h];",
          "1242:         }",
          "1243:     }",
          "1244:     if (s->upscale_v) {",
          "1245:         uint8_t *dst = &((uint8_t *)s->picture_ptr->data[s->upscale_v])[(s->height - 1) * s->linesize[s->upscale_v]];",
          "1246:         for (i = s->height - 1; i; i--) {",
          "1247:             uint8_t *src1 = &((uint8_t *)s->picture_ptr->data[s->upscale_v])[i / 2 * s->linesize[s->upscale_v]];",
          "1248:             uint8_t *src2 = &((uint8_t *)s->picture_ptr->data[s->upscale_v])[(i + 1) / 2 * s->linesize[s->upscale_v]];",
          "1249:             if (src1 == src2) {",
          "1250:                 memcpy(dst, src1, s->width);",
          "1251:             } else {",
          "1252:                 for (index = 0; index < s->width; index++)",
          "1253:                     dst[index] = (src1[index] + src2[index]) >> 1;",
          "1254:             }",
          "1255:             dst -= s->linesize[s->upscale_v];",
          "1256:         }",
          "1257:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1576:     const uint8_t *unescaped_buf_ptr;",
          "1577:     int unescaped_buf_size;",
          "1578:     int start_code;",
          "1579:     AVFrame *picture = data;",
          "1581:     s->got_picture = 0; // picture from previous image can not be reused",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1559:     int i, index;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1735:     av_log(avctx, AV_LOG_FATAL, \"No JPEG data found in image\\n\");",
          "1736:     return -1;",
          "1737: the_end:",
          "1738:     av_log(avctx, AV_LOG_DEBUG, \"mjpeg decode frame unused %td bytes\\n\",",
          "1739:            buf_end - buf_ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1719:     if (s->upscale_h) {",
          "1720:         uint8_t *line = s->picture_ptr->data[s->upscale_h];",
          "1721:         av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||",
          "1722:                    avctx->pix_fmt == PIX_FMT_YUV444P  ||",
          "1723:                    avctx->pix_fmt == PIX_FMT_YUVJ440P ||",
          "1724:                    avctx->pix_fmt == PIX_FMT_YUV440P);",
          "1725:         for (i = 0; i < s->chroma_height; i++) {",
          "1726:             for (index = s->width - 1; index; index--)",
          "1727:                 line[index] = (line[index / 2] + line[(index + 1) / 2]) >> 1;",
          "1728:             line += s->linesize[s->upscale_h];",
          "1729:         }",
          "1730:     }",
          "1731:     if (s->upscale_v) {",
          "1732:         uint8_t *dst = &((uint8_t *)s->picture_ptr->data[s->upscale_v])[(s->height - 1) * s->linesize[s->upscale_v]];",
          "1733:         av_assert0(avctx->pix_fmt == PIX_FMT_YUVJ444P ||",
          "1734:                    avctx->pix_fmt == PIX_FMT_YUV444P  ||",
          "1735:                    avctx->pix_fmt == PIX_FMT_YUVJ422P ||",
          "1736:                    avctx->pix_fmt == PIX_FMT_YUV422P);",
          "1737:         for (i = s->height - 1; i; i--) {",
          "1738:             uint8_t *src1 = &((uint8_t *)s->picture_ptr->data[s->upscale_v])[i / 2 * s->linesize[s->upscale_v]];",
          "1739:             uint8_t *src2 = &((uint8_t *)s->picture_ptr->data[s->upscale_v])[(i + 1) / 2 * s->linesize[s->upscale_v]];",
          "1740:             if (src1 == src2) {",
          "1741:                 memcpy(dst, src1, s->width);",
          "1742:             } else {",
          "1743:                 for (index = 0; index < s->width; index++)",
          "1744:                     dst[index] = (src1[index] + src2[index]) >> 1;",
          "1745:             }",
          "1746:             dst -= s->linesize[s->upscale_v];",
          "1747:         }",
          "1748:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}