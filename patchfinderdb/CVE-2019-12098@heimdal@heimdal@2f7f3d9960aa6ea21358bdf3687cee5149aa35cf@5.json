{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af018a5aead8b391351ba71bbb85662f780a9a2a",
      "candidate_info": {
        "commit_hash": "af018a5aead8b391351ba71bbb85662f780a9a2a",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/af018a5aead8b391351ba71bbb85662f780a9a2a",
        "files": [
          "lib/kadm5/ipropd_master.c"
        ],
        "message": "Don't stutter in send_diffs\n\nWhen the master sees a burst of updates (perhaps sustained), the\nslaves \"I_HAVE\" messages can fall behind the version we've already\nsent, and the unpatched code would retransmit already sent diffs!\n\nThis can result in substantial amplification (in a local test, 3000\nops turned into 427,000 ops).  Though the number of *messages* sent\nwas actually somewhat smaller, the ever growing message size\nultimately leads to failure.",
        "before_after_code_files": [
          "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c": [
          "File: lib/kadm5/ipropd_master.c -> lib/kadm5/ipropd_master.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     krb5_auth_context ac;",
          "129:     uint32_t version;",
          "130:     uint32_t version_tstamp;",
          "131:     time_t seen;",
          "132:     unsigned long flags;",
          "133: #define SLAVE_F_DEAD 0x1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     uint32_t version_ack;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:     krb5_warnx (context, \"connection from %s\", s->name);",
          "306:     s->version = 0;",
          "307:     s->flags = 0;",
          "308:     slave_seen(s);",
          "309:     s->next = *root;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:     s->version_ack = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:                 krb5_warn(context, ret, \"send_diffs: failed to send to slave\");",
          "700:                 slave_dead(context, s);",
          "701:             }",
          "703:                        s->name, (long)s->version);",
          "704:         }",
          "705:  return ret;",
          "",
          "[Removed Lines]",
          "702:             krb5_warnx(context, \"slave %s in sync already at version %ld\",",
          "",
          "[Added Lines]",
          "704:             krb5_warnx(context, \"slave %s version %ld already sent\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "905:  if (s->version == 0 && tmp != 0) {",
          "906:      if (current_version < tmp) {",
          "909:       s->name, tmp, current_version);",
          "910:      }",
          "911:             if (verbose)",
          "",
          "[Removed Lines]",
          "907:   krb5_warnx(context, \"Slave %s (version %u) have later version \"",
          "908:       \"the master (version %u) OUT OF SYNC\",",
          "",
          "[Added Lines]",
          "909:   krb5_warnx(context, \"Slave %s (version %u) has later version \"",
          "910:       \"than the master (version %u) OUT OF SYNC\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "913:                            s->name, s->version, tmp);",
          "914:      s->version = tmp;",
          "915:  }",
          "921:         ret = send_diffs(server_context, s, log_fd, database, current_version,",
          "922:                          current_tstamp);",
          "923:         break;",
          "",
          "[Removed Lines]",
          "916:  if (tmp < s->version) {",
          "917:      krb5_warnx(context, \"Slave %s claims to not have \"",
          "918:                        \"version we already sent to it\", s->name);",
          "919:             s->version = tmp;",
          "920:  }",
          "",
          "[Added Lines]",
          "918:         if ((s->version_ack = tmp) < s->version)",
          "919:             break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1035:  } else",
          "1036:      rtbl_add_column_entry(tbl, SLAVE_ADDRESS, \"<unknown>\");",
          "1039:  rtbl_add_column_entry(tbl, SLAVE_VERSION, str);",
          "1041:  if (slaves->flags & SLAVE_F_DEAD)",
          "",
          "[Removed Lines]",
          "1038:  snprintf(str, sizeof(str), \"%u\", (unsigned)slaves->version);",
          "",
          "[Added Lines]",
          "1037:  snprintf(str, sizeof(str), \"%u\", (unsigned)slaves->version_ack);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26dce4a1143b4330360c089156e53cc6be01e3dc",
      "candidate_info": {
        "commit_hash": "26dce4a1143b4330360c089156e53cc6be01e3dc",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/26dce4a1143b4330360c089156e53cc6be01e3dc",
        "files": [
          "kdc/krb5tgs.c",
          "tests/kdc/check-kdc.in"
        ],
        "message": "CVE-2019-14870: Validate client attributes in protocol-transition\n\nSigned-off-by: Isaac Boukris <iboukris@gmail.com>",
        "before_after_code_files": [
          "kdc/krb5tgs.c||kdc/krb5tgs.c",
          "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2125:   goto out;",
          "2126:      }",
          "2129:      if(rspac.data) {",
          "2130:   krb5_pac p = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2130:      s4u2self_impersonated_client->entry.flags.require_pwchange = FALSE;",
          "2131:      free(s4u2self_impersonated_client->entry.pw_end);",
          "2132:      s4u2self_impersonated_client->entry.pw_end = NULL;",
          "2134:      ret = kdc_check_flags(context, config, s4u2self_impersonated_client, tpn,",
          "2135:       NULL, NULL, FALSE);",
          "2136:      if (ret)",
          "2137:   goto out;",
          "",
          "---------------"
        ],
        "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in": [
          "File: tests/kdc/check-kdc.in -> tests/kdc/check-kdc.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "811: ${kgetcred_imp} --forward --impersonate=unknown@${R} ${ps} && \\",
          "812:  { ec=1 ; eval \"${testfailed}\"; }",
          "814: echo \"test delegate sensitive client\"; > messages.log",
          "815: ${kgetcred_imp} --forward --impersonate=sensitive@${R} ${ps} || \\",
          "816:  { ec=1 ; eval \"${testfailed}\"; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "814: echo \"test impersonate account-expired client\"; > messages.log",
          "815: ${kgetcred_imp} --forward --impersonate=account-expired@${R} ${ps} && \\",
          "816:  { ec=1 ; eval \"${testfailed}\"; }",
          "818: echo \"test impersonate pw-expired client\"; > messages.log",
          "819: ${kgetcred_imp} --forward --impersonate=pw-expired@${R} ${ps} || \\",
          "820:  { ec=1 ; eval \"${testfailed}\"; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23a9769aab688720f396250104387aa304816dcb",
      "candidate_info": {
        "commit_hash": "23a9769aab688720f396250104387aa304816dcb",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/23a9769aab688720f396250104387aa304816dcb",
        "files": [
          "lib/wind/gen-bidi.py",
          "lib/wind/gen-combining.py",
          "lib/wind/gen-errorlist.py",
          "lib/wind/gen-map.py",
          "lib/wind/gen-normalize.py"
        ],
        "message": "PY3: make sure print stmt is enclosed by '(' & ')'\n\nSigned-off-by: Noel Power <noel.power@suse.com>\nReviewed-by: Andrew Bartlett <abartlet@samba.org>\n(cherry picked from Samba merge request https://gitlab.com/samba-team/samba/merge_requests/68)\n(cherry picked from commit 5542a0ba16b53eb223c9cc0acdf91b53d80adc54)",
        "before_after_code_files": [
          "lib/wind/gen-bidi.py||lib/wind/gen-bidi.py",
          "lib/wind/gen-combining.py||lib/wind/gen-combining.py",
          "lib/wind/gen-errorlist.py||lib/wind/gen-errorlist.py",
          "lib/wind/gen-map.py||lib/wind/gen-map.py",
          "lib/wind/gen-normalize.py||lib/wind/gen-normalize.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/wind/gen-bidi.py||lib/wind/gen-bidi.py": [
          "File: lib/wind/gen-bidi.py -> lib/wind/gen-bidi.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import rfc3454",
          "44: if len(sys.argv) != 3:",
          "46:     sys.exit(1)",
          "48: tables = rfc3454.read(sys.argv[1])",
          "",
          "[Removed Lines]",
          "45:     print \"usage: %s rfc3454.txt outdir\" % sys.argv[0]",
          "",
          "[Added Lines]",
          "45:     print(\"usage: %s rfc3454.txt outdir\" % sys.argv[0])",
          "",
          "---------------"
        ],
        "lib/wind/gen-combining.py||lib/wind/gen-combining.py": [
          "File: lib/wind/gen-combining.py -> lib/wind/gen-combining.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import UnicodeData",
          "44: if len(sys.argv) != 3:",
          "46:     sys.exit(1)",
          "48: ud = UnicodeData.read(sys.argv[1])",
          "",
          "[Removed Lines]",
          "45:     print \"usage: %s UnicodeData.txt out-dir\" % sys.argv[0]",
          "",
          "[Added Lines]",
          "45:     print(\"usage: %s UnicodeData.txt out-dir\" % sys.argv[0])",
          "",
          "---------------"
        ],
        "lib/wind/gen-errorlist.py||lib/wind/gen-errorlist.py": [
          "File: lib/wind/gen-errorlist.py -> lib/wind/gen-errorlist.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import stringprep",
          "46: if len(sys.argv) != 3:",
          "48:     sys.exit(1)",
          "50: tables = rfc3454.read(sys.argv[1])",
          "",
          "[Removed Lines]",
          "47:     print \"usage: %s rfc3454.txt out-dir\" % sys.argv[0]",
          "",
          "[Added Lines]",
          "47:     print(\"usage: %s rfc3454.txt out-dir\" % sys.argv[0])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:     (start, length, description, tables) = x",
          "105:     symbols = stringprep.symbols(error_list, tables)",
          "106:     if len(symbols) == 0:",
          "108:         sys.exit(1)",
          "109:     errorlist_c.file.write(\"  {0x%x, 0x%x, %s}, /* %s: %s */\\n\"",
          "110:                 % (start, length, symbols, \",\".join(tables), description))",
          "",
          "[Removed Lines]",
          "107:         print \"no symbol for %s\" % description",
          "",
          "[Added Lines]",
          "107:         print(\"no symbol for %s\" % description)",
          "",
          "---------------"
        ],
        "lib/wind/gen-map.py||lib/wind/gen-map.py": [
          "File: lib/wind/gen-map.py -> lib/wind/gen-map.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: import util",
          "47: if len(sys.argv) != 3:",
          "49:     sys.exit(1)",
          "51: tables = rfc3454.read(sys.argv[1])",
          "",
          "[Removed Lines]",
          "48:     print \"usage: %s rfc3454.txt out-dir\" % sys.argv[0]",
          "",
          "[Added Lines]",
          "48:     print(\"usage: %s rfc3454.txt out-dir\" % sys.argv[0])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: for x in trans:",
          "116:     if x[0] == 0xad:",
          "119: for x in trans:",
          "120:     (key, value, description, table) = x",
          "",
          "[Removed Lines]",
          "117:         print \"fooresult %s\" % \",\".join(x[3])",
          "",
          "[Added Lines]",
          "117:         print(\"fooresult %s\" % \",\".join(x[3]))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:     (key, value, description, tables) = x",
          "131:     symbols = stringprep.symbols(map_list, tables)",
          "132:     if len(symbols) == 0:",
          "134:         sys.exit(1)",
          "135:     v = value.split()",
          "136:     map_c.file.write(\"  {0x%x, %u, %u, %s}, /* %s: %s */\\n\"",
          "",
          "[Removed Lines]",
          "133:         print \"no symbol for %s %s (%s)\" % (key, description, tables)",
          "",
          "[Added Lines]",
          "133:         print(\"no symbol for %s %s (%s)\" % (key, description, tables))",
          "",
          "---------------"
        ],
        "lib/wind/gen-normalize.py||lib/wind/gen-normalize.py": [
          "File: lib/wind/gen-normalize.py -> lib/wind/gen-normalize.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import util",
          "45: if len(sys.argv) != 4:",
          "48:     sys.exit(1)",
          "50: ud = UnicodeData.read(sys.argv[1])",
          "",
          "[Removed Lines]",
          "46:     print \"usage: %s UnicodeData.txt\"",
          "47:     \" CompositionExclusions-3.2.0.txt out-dir\" % sys.argv[0]",
          "",
          "[Added Lines]",
          "46:     print(\"usage: %s UnicodeData.txt\"",
          "47:     \" CompositionExclusions-3.2.0.txt out-dir\" % sys.argv[0])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd10e32900a043f0854b2c8c00620697a5b1dec3",
      "candidate_info": {
        "commit_hash": "cd10e32900a043f0854b2c8c00620697a5b1dec3",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/cd10e32900a043f0854b2c8c00620697a5b1dec3",
        "files": [
          "lib/ipc/client.c"
        ],
        "message": "lib/ipc: client double close of socket file descriptor #431\n\nWhen connect() fails in connect_unix() the path_ctx.fd is not\nset to -1 after close().  When common_release() is executed due\nto the error return from connect_unix() it calls close() a second\ntime.\n\nThere is no need to call close() from connect_unix(). Remove the\nduplicate request.\n\nThis issue was reported by YASUOKA Masahiko.\n\nChange-Id: I825e274cc7f12e50a8779a2b62ddb756817cdb52",
        "before_after_code_files": [
          "lib/ipc/client.c||lib/ipc/client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/ipc/client.c||lib/ipc/client.c": [
          "File: lib/ipc/client.c -> lib/ipc/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:  return errno;",
          "333:     rk_cloexec(s->fd);",
          "337:  return errno;",
          "340:     return 0;",
          "341: }",
          "",
          "[Removed Lines]",
          "335:     if (connect(s->fd, (struct sockaddr *)&addr, sizeof(addr)) != 0) {",
          "336:  close(s->fd);",
          "338:     }",
          "",
          "[Added Lines]",
          "335:     if (connect(s->fd, (struct sockaddr *)&addr, sizeof(addr)) != 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f5b57bffb06f80d0f085169aca21988837a1e0c",
      "candidate_info": {
        "commit_hash": "2f5b57bffb06f80d0f085169aca21988837a1e0c",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/2f5b57bffb06f80d0f085169aca21988837a1e0c",
        "files": [
          "kdc/kerberos5.c",
          "kdc/krb5tgs.c"
        ],
        "message": "kdc: don't misidentify constrained delegation requests as anonymous\n\nEarlier (pre-7.6) Heimdal clients would send both the request-anonymous and\ncname-in-addl-tkt flags for constrained delegation requests. A true anonymous\nTGS request will only have the former flag set. Do not treat TGS requests with\nboth flags set as anonymous requests.\n\n(cherry picked from commit cdd0b70d37d87026e8618ff44b8d636c0bf9cb6c)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c",
          "kdc/krb5tgs.c||kdc/krb5tgs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: static krb5_boolean",
          "122: {",
          "123:     KDC_REQ_BODY *b = &r->req.req_body;",
          "131:     return b->kdc_options.request_anonymous ||",
          "132:     (b->kdc_options.cname_in_addl_tkt && !b->additional_tickets);",
          "",
          "[Removed Lines]",
          "121: is_anon_request_p(kdc_request_t r)",
          "",
          "[Added Lines]",
          "121: is_anon_as_request_p(kdc_request_t r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:     heim_assert(r->armor_crypto != NULL, \"ENC-CHAL called for non FAST\");",
          "464:  ret = KRB5KRB_AP_ERR_BAD_INTEGRITY;",
          "465:  kdc_log(r->context, r->config, 0, \"ENC-CHALL doesn't support anon\");",
          "466:  return ret;",
          "",
          "[Removed Lines]",
          "463:     if (is_anon_request_p(r)) {",
          "",
          "[Added Lines]",
          "464:     if (is_anon_as_request_p(r)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1731:     if (_kdc_is_anonymous(context, r->client_princ) &&",
          "1733:  kdc_log(context, config, 0, \"Anonymous client w/o anonymous flag\");",
          "1734:  ret = KRB5KDC_ERR_BADOPTION;",
          "1735:  goto out;",
          "",
          "[Removed Lines]",
          "1732:  !is_anon_request_p(r)) {",
          "",
          "[Added Lines]",
          "1733:  !is_anon_as_request_p(r)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1906:      ret = KRB5KDC_ERR_PREAUTH_REQUIRED;",
          "1907:      _kdc_set_e_text(r, \"Need to use PA-ENC-TIMESTAMP/PA-PK-AS-REQ\");",
          "1908:      goto out;",
          "",
          "[Removed Lines]",
          "1905:  if (require_preauth_p(r) || is_anon_request_p(r)) {",
          "",
          "[Added Lines]",
          "1906:  if (require_preauth_p(r) || is_anon_as_request_p(r)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1935:     if(ret)",
          "1936:  goto out;",
          "1939:  ret = _kdc_check_anon_policy(context, config, r->client, r->server);",
          "1940:  if (ret) {",
          "1941:      _kdc_set_e_text(r, \"Anonymous ticket requests are disabled\");",
          "",
          "[Removed Lines]",
          "1938:     if (is_anon_request_p(r)) {",
          "",
          "[Added Lines]",
          "1939:     if (is_anon_as_request_p(r)) {",
          "",
          "---------------"
        ],
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:     return 0;",
          "367: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369: static krb5_boolean",
          "370: is_anon_tgs_request_p(const KDC_REQ_BODY *b,",
          "371:         const EncTicketPart *tgt)",
          "372: {",
          "373:     KDCOptions f = b->kdc_options;",
          "383:     return tgt->flags.anonymous ||",
          "384:  (f.request_anonymous && !f.cname_in_addl_tkt && !b->additional_tickets);",
          "385: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510:  et->flags.anonymous = 1;",
          "512:     return 0;",
          "",
          "[Removed Lines]",
          "509:     if (tgt->flags.anonymous || f.request_anonymous)",
          "",
          "[Added Lines]",
          "527:     if (is_anon_tgs_request_p(b, tgt))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2335:     }",
          "2339:  ret = _kdc_check_anon_policy(context, config, client, server);",
          "2340:  if (ret)",
          "2341:      goto out;",
          "",
          "[Removed Lines]",
          "2338:     if (tgt->flags.anonymous || b->kdc_options.request_anonymous) {",
          "",
          "[Added Lines]",
          "2356:     if (is_anon_tgs_request_p(b, tgt)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}