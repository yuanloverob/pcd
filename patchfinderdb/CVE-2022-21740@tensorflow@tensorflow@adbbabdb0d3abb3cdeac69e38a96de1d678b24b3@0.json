{
  "cve_id": "CVE-2022-21740",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `SparseCountSparseOutput` is vulnerable to a heap overflow. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "adbbabdb0d3abb3cdeac69e38a96de1d678b24b3",
  "patch_info": {
    "commit_hash": "adbbabdb0d3abb3cdeac69e38a96de1d678b24b3",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3",
    "files": [
      "tensorflow/core/kernels/count_ops.cc"
    ],
    "message": "Further validate sparse tensor for `SparseCount`: indices must be valid within dense shape.\n\nPiperOrigin-RevId: 414888122\nChange-Id: I4552bd74c135ecd4bcb5448acc0a3ce9402d8286",
    "before_after_code_files": [
      "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc": [
      "File: tensorflow/core/kernels/count_ops.cc -> tensorflow/core/kernels/count_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "206:     OP_REQUIRES(context, shape.NumElements() > 0,",
      "207:                 errors::InvalidArgument(",
      "208:                     \"The shape argument requires at least one element.\"));",
      "210:     if (use_weights) {",
      "211:       OP_REQUIRES(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211:     const auto indices_values = indices.matrix<int64_t>();",
      "212:     const auto shape_vector = shape.vec<int64_t>();",
      "213:     int num_values = values.NumElements();  // same as first dim of indices",
      "214:     int rank = indices.shape().dim_size(1);",
      "215:     for (int i = 0; i < num_values; ++i) {",
      "216:       for (int j = 0; j < rank; ++j) {",
      "217:         OP_REQUIRES(",
      "218:             context,",
      "219:             indices_values(i, j) >= 0 && indices_values(i, j) < shape_vector(j),",
      "220:             errors::InvalidArgument(",
      "221:                 \"Invalid index value at \", i, \": dimension \", j, \" has value \",",
      "222:                 indices_values(i, j), \" which is not in [0, \", shape_vector(j),",
      "223:                 \") (as given by dense shape \", shape.DebugString()));",
      "224:       }",
      "225:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     }",
      "219:     bool is_1d = shape.NumElements() == 1;",
      "221:     int num_batches = is_1d ? 1 : shape_vector(0);",
      "225:     const auto values_values = values.flat<T>();",
      "226:     const auto weight_values = weights.flat<W>();",
      "",
      "[Removed Lines]",
      "220:     auto shape_vector = shape.flat<int64_t>();",
      "222:     int num_values = values.NumElements();",
      "224:     const auto indices_values = indices.matrix<int64_t>();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "96159ffe361903a1e49e3512ba745b97390f2221",
      "candidate_info": {
        "commit_hash": "96159ffe361903a1e49e3512ba745b97390f2221",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/96159ffe361903a1e49e3512ba745b97390f2221",
        "files": [
          "tensorflow/core/kernels/count_ops.cc"
        ],
        "message": "Further validate sparse tensor for `SparseCount`: indices must be valid within dense shape.\n\nPiperOrigin-RevId: 414888122\nChange-Id: I4552bd74c135ecd4bcb5448acc0a3ce9402d8286",
        "before_after_code_files": [
          "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc": [
          "File: tensorflow/core/kernels/count_ops.cc -> tensorflow/core/kernels/count_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     OP_REQUIRES(context, shape.NumElements() > 0,",
          "207:                 errors::InvalidArgument(",
          "208:                     \"The shape argument requires at least one element.\"));",
          "210:     if (use_weights) {",
          "211:       OP_REQUIRES(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:     const auto indices_values = indices.matrix<int64_t>();",
          "212:     const auto shape_vector = shape.vec<int64_t>();",
          "213:     int num_values = values.NumElements();  // same as first dim of indices",
          "214:     int rank = indices.shape().dim_size(1);",
          "215:     for (int i = 0; i < num_values; ++i) {",
          "216:       for (int j = 0; j < rank; ++j) {",
          "217:         OP_REQUIRES(",
          "218:             context,",
          "219:             indices_values(i, j) >= 0 && indices_values(i, j) < shape_vector(j),",
          "220:             errors::InvalidArgument(",
          "221:                 \"Invalid index value at \", i, \": dimension \", j, \" has value \",",
          "222:                 indices_values(i, j), \" which is not in [0, \", shape_vector(j),",
          "223:                 \") (as given by dense shape \", shape.DebugString()));",
          "224:       }",
          "225:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     bool is_1d = shape.NumElements() == 1;",
          "220:     auto shape_vector = shape.flat<int64>();",
          "221:     int num_batches = is_1d ? 1 : shape_vector(0);",
          "224:     for (int b = 0; b < shape_vector.size(); b++) {",
          "225:       OP_REQUIRES(context, shape_vector(b) >= 0,",
          "",
          "[Removed Lines]",
          "222:     int num_values = values.NumElements();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b048514696516ea4b964b8a9bf1bfa641fb3da4",
      "candidate_info": {
        "commit_hash": "5b048514696516ea4b964b8a9bf1bfa641fb3da4",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5b048514696516ea4b964b8a9bf1bfa641fb3da4",
        "files": [
          "tensorflow/core/kernels/count_ops.cc"
        ],
        "message": "Further validate sparse tensor for `SparseCount`: indices must be valid within dense shape.\n\nPiperOrigin-RevId: 414888122\nChange-Id: I4552bd74c135ecd4bcb5448acc0a3ce9402d8286",
        "before_after_code_files": [
          "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc": [
          "File: tensorflow/core/kernels/count_ops.cc -> tensorflow/core/kernels/count_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     OP_REQUIRES(context, shape.NumElements() > 0,",
          "207:                 errors::InvalidArgument(",
          "208:                     \"The shape argument requires at least one element.\"));",
          "210:     if (use_weights) {",
          "211:       OP_REQUIRES(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:     const auto indices_values = indices.matrix<int64_t>();",
          "212:     const auto shape_vector = shape.vec<int64_t>();",
          "213:     int num_values = values.NumElements();  // same as first dim of indices",
          "214:     int rank = indices.shape().dim_size(1);",
          "215:     for (int i = 0; i < num_values; ++i) {",
          "216:       for (int j = 0; j < rank; ++j) {",
          "217:         OP_REQUIRES(",
          "218:             context,",
          "219:             indices_values(i, j) >= 0 && indices_values(i, j) < shape_vector(j),",
          "220:             errors::InvalidArgument(",
          "221:                 \"Invalid index value at \", i, \": dimension \", j, \" has value \",",
          "222:                 indices_values(i, j), \" which is not in [0, \", shape_vector(j),",
          "223:                 \") (as given by dense shape \", shape.DebugString()));",
          "224:       }",
          "225:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     bool is_1d = shape.NumElements() == 1;",
          "220:     auto shape_vector = shape.flat<int64>();",
          "221:     int num_batches = is_1d ? 1 : shape_vector(0);",
          "224:     for (int b = 0; b < shape_vector.size(); b++) {",
          "225:       OP_REQUIRES(context, shape_vector(b) >= 0,",
          "",
          "[Removed Lines]",
          "222:     int num_values = values.NumElements();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3e4c37bd13de870eef1a22a22f2b81abf02f04f",
      "candidate_info": {
        "commit_hash": "c3e4c37bd13de870eef1a22a22f2b81abf02f04f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c3e4c37bd13de870eef1a22a22f2b81abf02f04f",
        "files": [
          "tensorflow/core/kernels/count_ops.cc"
        ],
        "message": "Further validate sparse tensor for `SparseCount`: indices must be valid within dense shape.\n\nPiperOrigin-RevId: 414888122\nChange-Id: I4552bd74c135ecd4bcb5448acc0a3ce9402d8286",
        "before_after_code_files": [
          "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/count_ops.cc||tensorflow/core/kernels/count_ops.cc": [
          "File: tensorflow/core/kernels/count_ops.cc -> tensorflow/core/kernels/count_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     OP_REQUIRES(context, shape.NumElements() > 0,",
          "207:                 errors::InvalidArgument(",
          "208:                     \"The shape argument requires at least one element.\"));",
          "210:     if (use_weights) {",
          "211:       OP_REQUIRES(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:     const auto indices_values = indices.matrix<int64_t>();",
          "212:     const auto shape_vector = shape.vec<int64_t>();",
          "213:     int num_values = values.NumElements();  // same as first dim of indices",
          "214:     int rank = indices.shape().dim_size(1);",
          "215:     for (int i = 0; i < num_values; ++i) {",
          "216:       for (int j = 0; j < rank; ++j) {",
          "217:         OP_REQUIRES(",
          "218:             context,",
          "219:             indices_values(i, j) >= 0 && indices_values(i, j) < shape_vector(j),",
          "220:             errors::InvalidArgument(",
          "221:                 \"Invalid index value at \", i, \": dimension \", j, \" has value \",",
          "222:                 indices_values(i, j), \" which is not in [0, \", shape_vector(j),",
          "223:                 \") (as given by dense shape \", shape.DebugString()));",
          "224:       }",
          "225:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     }",
          "219:     bool is_1d = shape.NumElements() == 1;",
          "221:     int num_batches = is_1d ? 1 : shape_vector(0);",
          "225:     const auto values_values = values.flat<T>();",
          "226:     const auto weight_values = weights.flat<W>();",
          "",
          "[Removed Lines]",
          "220:     auto shape_vector = shape.flat<int64_t>();",
          "222:     int num_values = values.NumElements();",
          "224:     const auto indices_values = indices.matrix<int64_t>();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}