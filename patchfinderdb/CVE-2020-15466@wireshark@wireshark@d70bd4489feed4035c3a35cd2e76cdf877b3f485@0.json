{
  "cve_id": "CVE-2020-15466",
  "cve_desc": "In Wireshark 3.2.0 to 3.2.4, the GVCP dissector could go into an infinite loop. This was addressed in epan/dissectors/packet-gvcp.c by ensuring that an offset increases in all situations.",
  "repo": "wireshark/wireshark",
  "patch_hash": "d70bd4489feed4035c3a35cd2e76cdf877b3f485",
  "patch_info": {
    "commit_hash": "d70bd4489feed4035c3a35cd2e76cdf877b3f485",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/d70bd4489feed4035c3a35cd2e76cdf877b3f485",
    "files": [
      "epan/dissectors/packet-gvcp.c"
    ],
    "message": "GVCP: Fix an infinite loop.\n\nRemove an \"if(tree)\" test in order to ensure that our offset always\nadvances.\n\nBug: 16029\nChange-Id: I5bb38f2eccfbf3c44a06682a17aafcba9d8fa0c6\nReviewed-on: https://code.wireshark.org/review/37611\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c": [
      "File: epan/dissectors/packet-gvcp.c -> epan/dissectors/packet-gvcp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2015:   col_append_fstr(pinfo->cinfo, COL_INFO, \"[ID: 0x%04X]\", eventid);",
      "2018:   {",
      "2067:    offset += 8;",
      "2079:    {",
      "2083:    }",
      "2084:   }",
      "2085:  }",
      "2086: }",
      "",
      "[Removed Lines]",
      "2017:   if (gvcp_telegram_tree != NULL)",
      "2020:    if (extendedblockids)",
      "2021:    {",
      "2022:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_extid_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2023:     data_length = tvb_get_ntohs(tvb, offset); // We get the data length here",
      "2024:    }",
      "2027:    offset += 2;",
      "2030:    if ((eventid >= 0x0000) && (eventid <= 0x8000))",
      "2031:    {",
      "2033:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2034:    }",
      "2035:    else if ((eventid >= 0x8001) && (eventid <= 0x8FFF))",
      "2036:    {",
      "2038:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_error_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2039:    }",
      "2040:    else if ((eventid >= 0x9000) && (eventid <= 0xFFFF))",
      "2041:    {",
      "2043:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_device_specific_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2044:    }",
      "2045:    offset += 2;",
      "2048:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_stream_channel_index, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2049:    offset += 2;",
      "2051:    if (extendedblockids == 0)",
      "2052:    {",
      "2054:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2055:     offset += 2;",
      "2056:    }",
      "2057:    else",
      "2058:    {",
      "2059:     offset += 2;",
      "2061:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id_64bit_v2_0, tvb, offset, 8, ENC_BIG_ENDIAN);",
      "2062:     offset += 8;",
      "2063:    }",
      "2066:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_timestamp, tvb, offset, 8, ENC_BIG_ENDIAN);",
      "2069:    if (extendedblockids)",
      "2070:    {",
      "2071:     if (data_length > 24)",
      "2072:     {",
      "2074:      proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, data_length - 24, ENC_NA);",
      "2075:      offset += data_length - 24;",
      "2076:     }",
      "2077:    }",
      "2078:    else",
      "2081:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, -1, ENC_NA);",
      "2082:     return;",
      "",
      "[Added Lines]",
      "2018:   if (extendedblockids)",
      "2020:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_extid_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2021:    data_length = tvb_get_ntohs(tvb, offset); // We get the data length here",
      "2022:   }",
      "2025:   offset += 2;",
      "2028:   if ((eventid >= 0x0000) && (eventid <= 0x8000))",
      "2029:   {",
      "2031:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2032:   }",
      "2033:   else if ((eventid >= 0x8001) && (eventid <= 0x8FFF))",
      "2034:   {",
      "2036:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_error_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2037:   }",
      "2038:   else if ((eventid >= 0x9000) && (eventid <= 0xFFFF))",
      "2039:   {",
      "2041:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_device_specific_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2042:   }",
      "2043:   offset += 2;",
      "2046:   proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_stream_channel_index, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2047:   offset += 2;",
      "2049:   if (extendedblockids == 0)",
      "2050:   {",
      "2052:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
      "2053:    offset += 2;",
      "2054:   }",
      "2055:   else",
      "2056:   {",
      "2057:    offset += 2;",
      "2059:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id_64bit_v2_0, tvb, offset, 8, ENC_BIG_ENDIAN);",
      "2061:   }",
      "2064:   proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_timestamp, tvb, offset, 8, ENC_BIG_ENDIAN);",
      "2065:   offset += 8;",
      "2067:   if (extendedblockids)",
      "2068:   {",
      "2069:    if (data_length > 24)",
      "2072:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, data_length - 24, ENC_NA);",
      "2073:     offset += data_length - 24;",
      "2076:   else",
      "2077:   {",
      "2079:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, -1, ENC_NA);",
      "2080:    return;",
      "2081:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "11f40896b696e4e8c7f8b2ad96028404a83a51a4",
      "candidate_info": {
        "commit_hash": "11f40896b696e4e8c7f8b2ad96028404a83a51a4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/11f40896b696e4e8c7f8b2ad96028404a83a51a4",
        "files": [
          "epan/dissectors/packet-gvcp.c"
        ],
        "message": "GVCP: Fix an infinite loop.\n\nRemove an \"if(tree)\" test in order to ensure that our offset always\nadvances.\n\nBug: 16029\nChange-Id: I5bb38f2eccfbf3c44a06682a17aafcba9d8fa0c6\nReviewed-on: https://code.wireshark.org/review/37611\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit d70bd4489feed4035c3a35cd2e76cdf877b3f485)\nReviewed-on: https://code.wireshark.org/review/37618",
        "before_after_code_files": [
          "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c": [
          "File: epan/dissectors/packet-gvcp.c -> epan/dissectors/packet-gvcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2015:   col_append_fstr(pinfo->cinfo, COL_INFO, \"[ID: 0x%04X]\", eventid);",
          "2018:   {",
          "2067:    offset += 8;",
          "2079:    {",
          "2083:    }",
          "2084:   }",
          "2085:  }",
          "2086: }",
          "",
          "[Removed Lines]",
          "2017:   if (gvcp_telegram_tree != NULL)",
          "2020:    if (extendedblockids)",
          "2021:    {",
          "2022:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_extid_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2023:     data_length = tvb_get_ntohs(tvb, offset); // We get the data length here",
          "2024:    }",
          "2027:    offset += 2;",
          "2030:    if ((eventid >= 0x0000) && (eventid <= 0x8000))",
          "2031:    {",
          "2033:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2034:    }",
          "2035:    else if ((eventid >= 0x8001) && (eventid <= 0x8FFF))",
          "2036:    {",
          "2038:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_error_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2039:    }",
          "2040:    else if ((eventid >= 0x9000) && (eventid <= 0xFFFF))",
          "2041:    {",
          "2043:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_device_specific_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2044:    }",
          "2045:    offset += 2;",
          "2048:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_stream_channel_index, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2049:    offset += 2;",
          "2051:    if (extendedblockids == 0)",
          "2052:    {",
          "2054:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2055:     offset += 2;",
          "2056:    }",
          "2057:    else",
          "2058:    {",
          "2059:     offset += 2;",
          "2061:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id_64bit_v2_0, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2062:     offset += 8;",
          "2063:    }",
          "2066:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_timestamp, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2069:    if (extendedblockids)",
          "2070:    {",
          "2071:     if (data_length > 24)",
          "2072:     {",
          "2074:      proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, data_length - 24, ENC_NA);",
          "2075:      offset += data_length - 24;",
          "2076:     }",
          "2077:    }",
          "2078:    else",
          "2081:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, -1, ENC_NA);",
          "2082:     return;",
          "",
          "[Added Lines]",
          "2018:   if (extendedblockids)",
          "2020:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_extid_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2021:    data_length = tvb_get_ntohs(tvb, offset); // We get the data length here",
          "2022:   }",
          "2025:   offset += 2;",
          "2028:   if ((eventid >= 0x0000) && (eventid <= 0x8000))",
          "2029:   {",
          "2031:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2032:   }",
          "2033:   else if ((eventid >= 0x8001) && (eventid <= 0x8FFF))",
          "2034:   {",
          "2036:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_error_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2037:   }",
          "2038:   else if ((eventid >= 0x9000) && (eventid <= 0xFFFF))",
          "2039:   {",
          "2041:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_device_specific_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2042:   }",
          "2043:   offset += 2;",
          "2046:   proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_stream_channel_index, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2047:   offset += 2;",
          "2049:   if (extendedblockids == 0)",
          "2050:   {",
          "2052:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2053:    offset += 2;",
          "2054:   }",
          "2055:   else",
          "2056:   {",
          "2057:    offset += 2;",
          "2059:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id_64bit_v2_0, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2061:   }",
          "2064:   proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_timestamp, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2065:   offset += 8;",
          "2067:   if (extendedblockids)",
          "2068:   {",
          "2069:    if (data_length > 24)",
          "2072:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, data_length - 24, ENC_NA);",
          "2073:     offset += data_length - 24;",
          "2076:   else",
          "2077:   {",
          "2079:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, -1, ENC_NA);",
          "2080:    return;",
          "2081:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e630b42e1f0573ca549643952017da315e695a0",
      "candidate_info": {
        "commit_hash": "1e630b42e1f0573ca549643952017da315e695a0",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1e630b42e1f0573ca549643952017da315e695a0",
        "files": [
          "epan/dissectors/packet-gvcp.c",
          "epan/dissectors/packet-gvsp.c",
          "epan/dissectors/packet-u3v.c"
        ],
        "message": "gvcp, gvsp, u3v: GEV 2.2, new PFNC pixel formats\n\n- Added the full GigE Vision 2.2 feature set including\n  GenDC, extended bootstrap registers and new\n  capability and configuration bits\n- Fixed typos\n- Added all the latest pixel formats as defined by the\n  PFNC standard document to the gvcp, gvsp and u3v\n  dissector\n\nChange-Id: Ic60f0252caef99b222262e96e3f2296c9fccccad\nReviewed-on: https://code.wireshark.org/review/33898\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c",
          "epan/dissectors/packet-gvsp.c||epan/dissectors/packet-gvsp.c",
          "epan/dissectors/packet-u3v.c||epan/dissectors/packet-u3v.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-gvcp.c||epan/dissectors/packet-gvcp.c": [
          "File: epan/dissectors/packet-gvcp.c -> epan/dissectors/packet-gvcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <epan/packet.h>",
          "19: #include <epan/conversation.h>",
          "24:    header fields to show the relations between",
          "",
          "[Removed Lines]",
          "21: #define GVCP_MIN_PACKET_SIZE     8",
          "",
          "[Added Lines]",
          "21: #define GVCP_MIN_PACKET_SIZE          ( 8 )",
          "22: #define GVCP_MAX_STREAM_CHANNEL_COUNT ( 512 )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: typedef struct _gvcp_conv_info_t {",
          "46:  wmem_map_t *pdus;",
          "47: } gvcp_conv_info_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:  guint32 extended_bootstrap_address[GVCP_MAX_STREAM_CHANNEL_COUNT];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139: #define GVCP_MC_TIMEOUT (0x00000B14)",
          "140: #define GVCP_MC_RETRY_COUNT (0x00000B18)",
          "141: #define GVCP_MC_SOURCE_PORT (0x00000B1C)",
          "142: #define GVCP_MANIFEST_TABLE (0x00009000)",
          "154: #define GVCP_ACTION_GROUP_KEY(I)  (0x9800+(0x10*I))",
          "155: #define GVCP_ACTION_GROUP_MASK(I) (0x9804+(0x10*I))",
          "",
          "[Removed Lines]",
          "144: #define GVCP_SC_DESTINATION_PORT(I)  (0x0d00+(0x40*I))",
          "145: #define GVCP_SC_PACKET_SIZE(I) (0x0d04+(0x40*I))",
          "146: #define GVCP_SC_PACKET_DELAY(I) (0x0d08+(0x40*I))",
          "147: #define GVCP_SC_DESTINATION_ADDRESS(I) (0x0d18+(0x40*I))",
          "148: #define GVCP_SC_SOURCE_PORT(I) (0x0d1c+(0x40*I))",
          "149: #define GVCP_SC_CAPABILITY(I) (0x0d20+(0x40*I))",
          "150: #define GVCP_SC_CONFIGURATION(I) (0x0d24+(0x40*I))",
          "151: #define GVCP_SC_ZONE(I) (0x0d28+(0x40*I))",
          "152: #define GVCP_SC_ZONE_DIRECTION(I) (0x0d2c+(0x40*I))",
          "",
          "[Added Lines]",
          "147: #define GVCP_SC_DESTINATION_PORT(I)           (0x0d00+(0x40*I))",
          "148: #define GVCP_SC_PACKET_SIZE(I)                (0x0d04+(0x40*I))",
          "149: #define GVCP_SC_PACKET_DELAY(I)               (0x0d08+(0x40*I))",
          "150: #define GVCP_SC_DESTINATION_ADDRESS(I)        (0x0d18+(0x40*I))",
          "151: #define GVCP_SC_SOURCE_PORT(I)                (0x0d1C+(0x40*I))",
          "152: #define GVCP_SC_CAPABILITY(I)                 (0x0d20+(0x40*I))",
          "153: #define GVCP_SC_CONFIGURATION(I)              (0x0d24+(0x40*I))",
          "154: #define GVCP_SC_ZONE(I)                       (0x0d28+(0x40*I))",
          "155: #define GVCP_SC_ZONE_DIRECTION(I)             (0x0d2C+(0x40*I))",
          "166: #define GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS_LAST  ( 0x000C )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "477: static int hf_gvcp_sc_multi_part_enabled_v2_1 = -1;",
          "478: static int hf_gvcp_sc_large_leader_trailer_enabled_v2_1 = -1;",
          "481: static int hf_gvcp_custom_register_value = -1;",
          "482: static int hf_gvcp_custom_read_register_addr = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495: static int hf_gvcp_sccaps_scmbsx_supported_v2_2 = -1;",
          "496: static int hf_gvcp_sccaps_scebax_supported_v2_2 = -1;",
          "497: static int hf_gvcp_mcc_supported_v2_2 = -1;",
          "498: static int hf_gvcp_mcec_supported_v2_2 = -1;",
          "499: static int hf_gvcp_mcec_enabled_v2_2 = -1;",
          "500: static int hf_gvcp_sc_scmpcx_supported_v2_2 = -1;",
          "501: static int hf_gvcp_sc_gendc_supported_v2_2 = -1;",
          "502: static int hf_gvcp_sc_gendc_enabled_v2_2 = -1;",
          "503: static int hf_gvcp_sc_max_packet_count_v2_2 = -1;",
          "504: static int hf_gvcp_sc_max_block_size_high_v2_2 = -1;",
          "505: static int hf_gvcp_sc_max_block_size_low_v2_2 = -1;",
          "506: static int hf_gvcp_sc_extended_registers_address_v2_2 = -1;",
          "507: static int hf_gvcp_sc_gendc_descriptor_address_v2_2 = -1;",
          "508: static int hf_gvcp_sc_gendc_descriptor_size_v2_2 = -1;",
          "509: static int hf_gvcp_sc_gendc_flow_mapping_table_address_v2_2 = -1;",
          "510: static int hf_gvcp_sc_gendc_flow_mapping_table_size_v2_2 = -1;",
          "511: static int hf_gvcp_readregcmd_extended_bootstrap_register = -1;",
          "512: static int hf_gvcp_writeregcmd_extended_bootstrap_register = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "505:  { GEV_DEVICEMODE_RECEIVER, \"Receiver\" },",
          "506:  { GEV_DEVICEMODE_TRANSCEIVER, \"Transceiver\" },",
          "507:  { GEV_DEVICEMODE_PERIPHERAL, \"Peripheral\" },",
          "509: };",
          "",
          "[Removed Lines]",
          "508:  {0, NULL},",
          "",
          "[Added Lines]",
          "542:  { 0, NULL },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "514:  { GEV_LINKCONFIG_MULTIPLELINKS, \"Multiple Links\" },",
          "515:  { GEV_LINKCONFIG_STATICLAG, \"Static LAG\" },",
          "516:  { GEV_LINKCONFIG_DYNAMICLAG, \"Dynamic LAG\" },",
          "518: };",
          "520: static const value_string devicemodenames_characterset[] = {",
          "",
          "[Removed Lines]",
          "517:  {0, NULL},",
          "",
          "[Added Lines]",
          "551:  { 0, NULL },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "735:  { GVCP_SC_SOURCE_PORT(0), \"[SCSP0 (Stream Channel #0 Source Port)]\" },",
          "736:  { GVCP_SC_CAPABILITY(0), \"[SCC0 (Stream Channel #0 Capability)]\" },",
          "737:  { GVCP_SC_CONFIGURATION(0), \"[SCCONF0 (Stream Channel #0 Configuration)]\" },",
          "738:  { GVCP_SC_DESTINATION_PORT(1), \"[SCP1 (Stream Channel #1 Port)]\" },",
          "739:  { GVCP_SC_PACKET_SIZE(1), \"[SCPS1 (Stream Channel #1 Packet Size)]\" },",
          "740:  { GVCP_SC_PACKET_DELAY(1), \"[SCPD1 (Stream Channel #1 Packet Delay)]\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "773:  { GVCP_SC_ZONE(0), \"[SCZ0 (Stream Channel Zone #0)]\" },",
          "774:  { GVCP_SC_ZONE_DIRECTION(0), \"[SCZD0 (Stream Channel Zone Direction #0)]\" },",
          "775:  { GVCP_SC_MAX_PACKET_COUNT(0), \"[SCMPC0 (Stream Channel Max Packet Count #0)]\" },",
          "776:  { GVCP_SC_MAX_BLOCK_SIZE_HIGH(0), \"[SCMBSL0 (Stream Channel Max Block Size (High) #0)]\" },",
          "777:  { GVCP_SC_MAX_BLOCK_SIZE_LOW(0), \"[SCMBSH0 (Stream Channel Max Block Size (Low) #0)]\" },",
          "778:  { GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(0), \"SCEBA0 (Stream Channel Extended Bootstrap Address #0)]\" },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "742:  { GVCP_SC_SOURCE_PORT(1), \"[SCSP1 (Stream Channel #1 Source Port)]\" },",
          "743:  { GVCP_SC_CAPABILITY(1), \"[SCC1 (Stream Channel #1 Capability)]\" },",
          "744:  { GVCP_SC_CONFIGURATION(1), \"[SCCONF1 (Stream Channel #1 Configuration)]\" },",
          "745:  { GVCP_SC_DESTINATION_PORT(2), \"[SCP2 (Stream Channel #2 Port)]\" },",
          "746:  { GVCP_SC_PACKET_SIZE(2), \"[SCPS2 (Stream Channel #2 Packet Size)]\" },",
          "747:  { GVCP_SC_PACKET_DELAY(2), \"[SCPD2 (Stream Channel #2 Packet Delay)]\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:  { GVCP_SC_ZONE(1), \"[SCZ1 (Stream Channel Zone #1)]\" },",
          "787:  { GVCP_SC_ZONE_DIRECTION(1), \"[SCZD1 (Stream Channel Zone Direction #1)]\" },",
          "788:  { GVCP_SC_MAX_PACKET_COUNT(1), \"[SCMPC1 (Stream Channel Max Packet Count #1)]\" },",
          "789:  { GVCP_SC_MAX_BLOCK_SIZE_HIGH(1), \"[SCMBSL1 (Stream Channel Max Block Size (High) #1)]\" },",
          "790:  { GVCP_SC_MAX_BLOCK_SIZE_LOW(1), \"[SCMBSH1 (Stream Channel Max Block Size (Low) #1)]\" },",
          "791:  { GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(1), \"SCEBA1 (Stream Channel Extended Bootstrap Address #1)]\" },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "749:  { GVCP_SC_SOURCE_PORT(2), \"[SCSP2 (Stream Channel #2 Source Port)]\" },",
          "750:  { GVCP_SC_CAPABILITY(2), \"[SCC2 (Stream Channel #2 Capability)]\" },",
          "751:  { GVCP_SC_CONFIGURATION(2), \"[SCCONF2 (Stream Channel #2 Configuration)]\" },",
          "752:  { GVCP_SC_DESTINATION_PORT(3), \"[SCP3 (Stream Channel #3 Port)]\" },",
          "753:  { GVCP_SC_PACKET_SIZE(3), \"[SCPS3 (Stream Channel #3 Packet Size)]\" },",
          "754:  { GVCP_SC_PACKET_DELAY(3), \"[SCPD3 (Stream Channel #3 Packet Delay)]\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799:  { GVCP_SC_ZONE(2), \"[SCZ2 (Stream Channel Zone #2)]\" },",
          "800:  { GVCP_SC_ZONE_DIRECTION(2), \"[SCZD2 (Stream Channel Zone Direction #2)]\" },",
          "801:  { GVCP_SC_MAX_PACKET_COUNT(2), \"[SCMPC2 (Stream Channel Max Packet Count #2)]\" },",
          "802:  { GVCP_SC_MAX_BLOCK_SIZE_HIGH(2), \"[SCMBSL2 (Stream Channel Max Block Size (High) #2)]\" },",
          "803:  { GVCP_SC_MAX_BLOCK_SIZE_LOW(2), \"[SCMBSH2 (Stream Channel Max Block Size (Low) #2)]\" },",
          "804:  { GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(2), \"SCEBA2 (Stream Channel Extended Bootstrap Address #2)]\" },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "756:  { GVCP_SC_SOURCE_PORT(3), \"[SCSP3 (Stream Channel #3 Source Port)]\" },",
          "757:  { GVCP_SC_CAPABILITY(3), \"[SCC3 (Stream Channel #3 Capability)]\" },",
          "758:  { GVCP_SC_CONFIGURATION(3), \"[SCCONF3 (Stream Channel #3 Configuration)]\" },",
          "759:  { GVCP_MANIFEST_TABLE, \"[Manifest Table]\" },",
          "760:  { GVCP_ACTION_GROUP_KEY(0), \"[Action Group Key #0]\" },",
          "761:  { GVCP_ACTION_GROUP_MASK(0), \"[Action Group Mask #0]\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:  { GVCP_SC_ZONE(3), \"[SCZ3 (Stream Channel Zone #3)]\" },",
          "813:  { GVCP_SC_ZONE_DIRECTION(3), \"[SCZD3 (Stream Channel Zone Direction #3)]\" },",
          "814:  { GVCP_SC_MAX_PACKET_COUNT(3), \"[SCMPC3 (Stream Channel Max Packet Count #3)]\" },",
          "815:  { GVCP_SC_MAX_BLOCK_SIZE_HIGH(3), \"[SCMBSL3 (Stream Channel Max Block Size (High) #3)]\" },",
          "816:  { GVCP_SC_MAX_BLOCK_SIZE_LOW(3), \"[SCMBSH3 (Stream Channel Max Block Size (Low) #3)]\" },",
          "817:  { GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(3), \"SCEBA3 (Stream Channel Extended Bootstrap Address #3)]\" },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "780:  { 0, NULL },",
          "781: };",
          "784: \\brief Returns a register name based on its address",
          "788: {",
          "789:  const gchar* address_string = NULL;",
          "",
          "[Removed Lines]",
          "787: static const gchar* get_register_name_from_address(guint32 addr, gboolean* is_custom_register)",
          "",
          "[Added Lines]",
          "844: brief Extended Register name to address mappings",
          "848: const value_string extendedbootstrapregisternames[] = {",
          "849:  { GVCP_SC_GENDC_DESCRIPTOR_ADDRESS, \"[GenDC Descriptor Address]\" },",
          "850:  { GVCP_SC_GENDC_DESCRIPTOR_SIZE, \"[GenDC Descriptor Size]\" },",
          "851:  { GVCP_SC_GENDC_FLOW_MAPPING_TABLE_ADDRESS, \"[GenDC Flow Mapping Table Address]\" },",
          "852:  { GVCP_SC_GENDC_FLOW_MAPPING_TABLE_SIZE, \"[GenDC Flow Mapping Table Size]\" },",
          "853:  { 0, NULL },",
          "854: };",
          "858: \\brief Check is the current register access is into one of the extended stream channel registers",
          "861: static gboolean is_extended_bootstrap_address(gvcp_conv_info_t *gvcp_info, guint32 addr, guint32* extended_bootstrap_address_offset)",
          "862: {",
          "863:  gint stream_channel_count = 0;",
          "864:  for (stream_channel_count = 0; stream_channel_count < GVCP_MAX_STREAM_CHANNEL_COUNT; stream_channel_count++)",
          "865:  {",
          "866:   if ((gvcp_info->extended_bootstrap_address[stream_channel_count] != 0) &&",
          "867:    (addr >= gvcp_info->extended_bootstrap_address[stream_channel_count]) &&",
          "868:    (addr <= (gvcp_info->extended_bootstrap_address[stream_channel_count] + GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS_LAST)))",
          "869:   {",
          "870:    if (extended_bootstrap_address_offset)",
          "871:    {",
          "873:    }",
          "874:    return TRUE;",
          "875:   }",
          "876:  }",
          "877:  return FALSE;",
          "878: }",
          "885: static const gchar* get_register_name_from_address(guint32 addr, gvcp_conv_info_t *gvcp_info, gboolean* is_custom_register)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "796:  address_string = try_val_to_str(addr, bootstrapregisternames);",
          "797:  if (!address_string)",
          "798:  {",
          "802:   {",
          "804:   }",
          "805:  }",
          "807:  return address_string;",
          "808: }",
          "811: \\brief Attempts to dissect a bootstrap register",
          "",
          "[Removed Lines]",
          "799:   address_string = wmem_strdup_printf(wmem_packet_scope(),\"[Addr:0x%08X]\", addr);",
          "801:   if (is_custom_register != NULL)",
          "",
          "[Added Lines]",
          "897:   guint32 extended_bootstrap_address_offset = 0;",
          "898:   if (is_extended_bootstrap_address(gvcp_info, addr, &extended_bootstrap_address_offset))",
          "899:   {",
          "900:    address_string = try_val_to_str(addr - extended_bootstrap_address_offset, extendedbootstrapregisternames);",
          "901:   }",
          "903:   if (!address_string)",
          "905:    address_string = wmem_strdup_printf(wmem_packet_scope(), \"[Addr:0x%08X]\", addr);",
          "906:    if (is_custom_register != NULL)",
          "907:    {",
          "909:    }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "971:  case GVCP_SC_CAPS:",
          "972:   proto_tree_add_item(branch, hf_gvcp_sccaps_scspx_register_supported, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "973:   proto_tree_add_item(branch, hf_gvcp_sccaps_legacy_16bit_blockid_supported_v2_0, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "974:   break;",
          "976:  case GVCP_MESSAGE_CHANNEL_CAPS:",
          "977:   proto_tree_add_item(branch, hf_gvcp_mcsp_supported, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "978:   break;",
          "980:  case GVCP_CAPABILITY:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1081:   proto_tree_add_item(branch, hf_gvcp_sccaps_scmbsx_supported_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1082:   proto_tree_add_item(branch, hf_gvcp_sccaps_scebax_supported_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1087:   proto_tree_add_item(branch, hf_gvcp_mcc_supported_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1088:   proto_tree_add_item(branch, hf_gvcp_mcec_supported_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1124:   proto_tree_add_item(branch, hf_gvcp_message_channel_source_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1125:   break;",
          "1127:  case GVCP_SC_DESTINATION_PORT(0):",
          "1128:  case GVCP_SC_DESTINATION_PORT(1):",
          "1129:  case GVCP_SC_DESTINATION_PORT(2):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1238:  case GVCP_MC_CONFIGURATION:",
          "1239:   proto_tree_add_item(branch, hf_gvcp_mcec_enabled_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1240:   break;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1174:  case GVCP_SC_CAPABILITY(3):",
          "1175:   proto_tree_add_item(branch, hf_gvcp_sc_big_little_endian_supported, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1176:   proto_tree_add_item(branch, hf_gvcp_sc_ip_reassembly_supported, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1177:   proto_tree_add_item(branch, hf_gvcp_sc_multi_part_supported_v2_1, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1178:   proto_tree_add_item(branch, hf_gvcp_sc_large_leader_trailer_supported_v2_1, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1179:   proto_tree_add_item(branch, hf_gvcp_sc_multizone_supported_v2_0, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1292:   proto_tree_add_item(branch, hf_gvcp_sc_scmpcx_supported_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1293:   proto_tree_add_item(branch, hf_gvcp_sc_gendc_supported_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1187:  case GVCP_SC_CONFIGURATION(1):",
          "1188:  case GVCP_SC_CONFIGURATION(2):",
          "1189:  case GVCP_SC_CONFIGURATION(3):",
          "1190:   proto_tree_add_item(branch, hf_gvcp_sc_multi_part_enabled_v2_1, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1191:   proto_tree_add_item(branch, hf_gvcp_sc_large_leader_trailer_enabled_v2_1, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1192:   proto_tree_add_item(branch, hf_gvcp_sc_packet_resend_destination_option_enabled_v2_0, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1307:   proto_tree_add_item(branch, hf_gvcp_sc_gendc_enabled_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1240:   proto_tree_add_item(branch, hf_gvcp_sc_zone31_direction_v2_0, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1241:   break;",
          "1243:  case GVCP_MANIFEST_TABLE:",
          "1244:   proto_tree_add_item(branch, hf_gvcp_manifest_table, tvb, 0, length, ENC_NA);",
          "1245:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1361:  case GVCP_SC_MAX_PACKET_COUNT(0):",
          "1362:  case GVCP_SC_MAX_PACKET_COUNT(1):",
          "1363:  case GVCP_SC_MAX_PACKET_COUNT(2):",
          "1364:  case GVCP_SC_MAX_PACKET_COUNT(3):",
          "1365:   proto_tree_add_item(branch, hf_gvcp_sc_max_packet_count_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1366:   break;",
          "1368:  case GVCP_SC_MAX_BLOCK_SIZE_HIGH(0):",
          "1369:  case GVCP_SC_MAX_BLOCK_SIZE_HIGH(1):",
          "1370:  case GVCP_SC_MAX_BLOCK_SIZE_HIGH(2):",
          "1371:  case GVCP_SC_MAX_BLOCK_SIZE_HIGH(3):",
          "1372:   proto_tree_add_item(branch, hf_gvcp_sc_max_block_size_high_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1373:   break;",
          "1375:  case GVCP_SC_MAX_BLOCK_SIZE_LOW(0):",
          "1376:  case GVCP_SC_MAX_BLOCK_SIZE_LOW(1):",
          "1377:  case GVCP_SC_MAX_BLOCK_SIZE_LOW(2):",
          "1378:  case GVCP_SC_MAX_BLOCK_SIZE_LOW(3):",
          "1379:   proto_tree_add_item(branch, hf_gvcp_sc_max_block_size_low_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1380:   break;",
          "1382:  case GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(0):",
          "1383:  case GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(1):",
          "1384:  case GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(2):",
          "1385:  case GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(3):",
          "1386:   proto_tree_add_item(branch, hf_gvcp_sc_extended_registers_address_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1388:   break;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1277:  return 1;",
          "1278: }",
          "1281: static int dissect_register_data(guint32 addr, proto_tree *branch, tvbuff_t *tvb, gint offset, gint length)",
          "1282: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1428: \\brief Attempts to dissect an extended bootstrap register",
          "1431: static int dissect_extended_bootstrap_register(guint32 addr, proto_tree *branch, tvbuff_t *tvb, gint offset, gint length _U_)",
          "1432: {",
          "1433:  switch (addr)",
          "1434:  {",
          "1435:  case GVCP_SC_GENDC_DESCRIPTOR_ADDRESS:",
          "1436:   proto_tree_add_item(branch, hf_gvcp_sc_gendc_descriptor_address_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1437:   break;",
          "1438:  case GVCP_SC_GENDC_DESCRIPTOR_SIZE:",
          "1439:   proto_tree_add_item(branch, hf_gvcp_sc_gendc_descriptor_size_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1440:   break;",
          "1441:  case GVCP_SC_GENDC_FLOW_MAPPING_TABLE_ADDRESS:",
          "1442:   proto_tree_add_item(branch, hf_gvcp_sc_gendc_flow_mapping_table_address_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1443:   break;",
          "1444:  case GVCP_SC_GENDC_FLOW_MAPPING_TABLE_SIZE:",
          "1445:   proto_tree_add_item(branch, hf_gvcp_sc_gendc_flow_mapping_table_size_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1446:   break;",
          "1448:  default:",
          "1449:   return 0;",
          "1450:  }",
          "1452:  return 1;",
          "1453: }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1380:  guint64 block_id = 0;",
          "1381:  guint32 first_packet = 0;",
          "1382:  guint32 last_packet = 0;",
          "1387:  if (extendedblockid == 0)",
          "",
          "[Removed Lines]",
          "1383:  gint offset;",
          "1384:  offset = startoffset;",
          "",
          "[Added Lines]",
          "1559:  gint offset = startoffset;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1447: \\brief DISSECT: Read register command",
          "1451: {",
          "1452:  proto_item *item = NULL;",
          "1453:  guint32 addr = 0;",
          "1454:  const gchar* address_string = NULL;",
          "1455:  gboolean is_custom_register = FALSE;",
          "1457:  gint i;",
          "1462:  addr = tvb_get_ntohl(tvb, offset);",
          "1465:  if (num_registers > 1)",
          "1466:  {",
          "",
          "[Removed Lines]",
          "1450: static void dissect_readreg_cmd(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_transaction_t* gvcp_trans)",
          "1456:  gint offset;",
          "1458:  gint num_registers;",
          "1459:  offset = startoffset;",
          "1460:  num_registers = length / 4;",
          "1463:  address_string = get_register_name_from_address(addr, &is_custom_register);",
          "",
          "[Added Lines]",
          "1625: static void dissect_readreg_cmd(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_conv_info_t *gvcp_info, gvcp_transaction_t* gvcp_trans)",
          "1631:  gint offset = startoffset;",
          "1633:  gint num_registers = length / 4;",
          "1636:  address_string = get_register_name_from_address(addr, gvcp_info, &is_custom_register);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1505:    }",
          "1506:    else",
          "1507:    {",
          "1513:    }",
          "1514:   }",
          "1515:   offset +=4;",
          "",
          "[Removed Lines]",
          "1509:     item = proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_custom_register_addr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1512:     proto_item_append_text(item, \" [Unknown Register]\");",
          "",
          "[Added Lines]",
          "1681:     guint32 extended_bootstrap_address_offset = 0;",
          "1682:     if (is_extended_bootstrap_address(gvcp_info, addr, &extended_bootstrap_address_offset))",
          "1683:     {",
          "1684:      dissect_extended_bootstrap_register(addr - extended_bootstrap_address_offset, gvcp_telegram_tree, tvb, offset, 4);",
          "1685:     }",
          "1686:     else",
          "1687:     {",
          "1689:      item = proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_custom_register_addr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1692:      proto_item_append_text(item, \" [Unknown Register]\");",
          "1693:     }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1521: \\brief DISSECT: Write register command",
          "1525: {",
          "1527:  gint i;",
          "1528:  proto_item *item = NULL;",
          "1529:  guint32 addr = 0;",
          "1530:  guint32 value = 0;",
          "1531:  const gchar *address_string = NULL;",
          "1532:  gboolean is_custom_register = FALSE;",
          "1534:  proto_tree *subtree = NULL;",
          "1539:  if (gvcp_trans)",
          "1540:  {",
          "1541:   gvcp_trans->addr_count = num_registers;",
          "",
          "[Removed Lines]",
          "1524: static void dissect_writereg_cmd(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_transaction_t* gvcp_trans)",
          "1526:  gint offset;",
          "1533:  gint num_registers;",
          "1536:  offset = startoffset;",
          "",
          "[Added Lines]",
          "1705: static void dissect_writereg_cmd(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_conv_info_t *gvcp_info, gvcp_transaction_t* gvcp_trans)",
          "1707:  gint offset = startoffset;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1545:  value = tvb_get_ntohl(tvb, offset+4);",
          "1549:  if ((addr == GVCP_SC_DESTINATION_PORT(0)) ||",
          "",
          "[Removed Lines]",
          "1546:  address_string = get_register_name_from_address(addr, &is_custom_register);",
          "",
          "[Added Lines]",
          "1724:  address_string = get_register_name_from_address(addr, gvcp_info, &is_custom_register);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1574:  if (gvcp_telegram_tree != NULL)",
          "1575:  {",
          "1587:    if (try_val_to_str(addr, bootstrapregisternames) != NULL)",
          "1588:    {",
          "",
          "[Removed Lines]",
          "1576:  if (num_registers > 1)",
          "1577:  {",
          "1578:   gvcp_telegram_tree = proto_tree_add_subtree(gvcp_telegram_tree, tvb, startoffset, length,",
          "1579:         ett_gvcp_payload_cmd, &item, \"WRITEREG_CMD Address List\");",
          "1580:  }",
          "1582:  for (i = 0; i < num_registers; i++)",
          "1583:  {",
          "1585:   addr = tvb_get_ntohl(tvb, offset);",
          "",
          "[Added Lines]",
          "1754:   if (num_registers > 1)",
          "1755:   {",
          "1756:    gvcp_telegram_tree = proto_tree_add_subtree(gvcp_telegram_tree, tvb, startoffset, length,",
          "1757:          ett_gvcp_payload_cmd, &item, \"WRITEREG_CMD Address List\");",
          "1758:   }",
          "1760:   for (i = 0; i < num_registers; i++)",
          "1761:   {",
          "1763:    addr = tvb_get_ntohl(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1598:    }",
          "1599:    else",
          "1600:    {",
          "1608:    }",
          "1609:    offset += 4;",
          "1610:   }",
          "",
          "[Removed Lines]",
          "1601:     proto_tree* temp_tree = NULL;",
          "1603:     item = proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_custom_register_addr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1605:     offset += 4;",
          "1606:     temp_tree = proto_item_add_subtree(item, ett_gvcp_payload_cmd_subtree);",
          "1607:     proto_tree_add_item(temp_tree, hf_gvcp_custom_register_value, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1779:     guint32 extended_bootstrap_address_offset = 0;",
          "1780:     if (is_extended_bootstrap_address(gvcp_info, addr, &extended_bootstrap_address_offset))",
          "1781:     {",
          "1783:      item = proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_writeregcmd_extended_bootstrap_register, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1784:      subtree = proto_item_add_subtree(item, ett_gvcp_payload_cmd_subtree);",
          "1787:      offset += 4;",
          "1790:      dissect_extended_bootstrap_register(addr - extended_bootstrap_address_offset, subtree, tvb, offset, 4);",
          "1791:     }",
          "1792:     else",
          "1793:     {",
          "1794:      proto_tree* temp_tree = NULL;",
          "1796:      item = proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_custom_register_addr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1798:      offset += 4;",
          "1799:      temp_tree = proto_item_add_subtree(item, ett_gvcp_payload_cmd_subtree);",
          "1800:      proto_tree_add_item(temp_tree, hf_gvcp_custom_register_value, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1801:     }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1616: \\brief DISSECT: Read memory command",
          "1620: {",
          "1621:  guint32 addr = 0;",
          "1622:  guint16 count = 0;",
          "1626:  addr = tvb_get_ntohl(tvb, offset);",
          "",
          "[Removed Lines]",
          "1619: static void dissect_readmem_cmd(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset)",
          "1623:  gint offset;",
          "1624:  offset = startoffset;",
          "",
          "[Added Lines]",
          "1813: static void dissect_readmem_cmd(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gvcp_conv_info_t *gvcp_info)",
          "1817:  gint offset = startoffset;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1638:   }",
          "1639:   else",
          "1640:   {",
          "1643:   }",
          "1644:   proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_readmemcmd_count, tvb, (offset + 6), 2, ENC_BIG_ENDIAN);",
          "1645:  }",
          "",
          "[Removed Lines]",
          "1641:    item = proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_custom_memory_addr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1642:    proto_item_append_text(item, \" [Unknown Register]\");",
          "",
          "[Added Lines]",
          "1834:    guint32 extended_bootstrap_address_offset = 0;",
          "1835:    if (is_extended_bootstrap_address(gvcp_info, addr, &extended_bootstrap_address_offset))",
          "1836:    {",
          "1837:     dissect_extended_bootstrap_register(addr - extended_bootstrap_address_offset, gvcp_telegram_tree, tvb, offset, 4);",
          "1838:    }",
          "1839:    else",
          "1840:    {",
          "1841:     item = proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_custom_memory_addr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1842:     proto_item_append_text(item, \" [Unknown Register]\");",
          "1843:    }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1650: \\brief DISSECT: Write memory command",
          "1654: {",
          "1655:  const gchar* address_string = NULL;",
          "1656:  gboolean is_custom_register = FALSE;",
          "1657:  guint32 addr = 0;",
          "1659:  addr = tvb_get_ntohl(tvb, startoffset);",
          "1663:  col_append_fstr(pinfo->cinfo, COL_INFO, \"%s: %d bytes\", address_string, (length - 4));",
          "",
          "[Removed Lines]",
          "1653: static void dissect_writemem_cmd(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_transaction_t* gvcp_trans)",
          "1660:  address_string = get_register_name_from_address(addr, &is_custom_register);",
          "",
          "[Added Lines]",
          "1854: static void dissect_writemem_cmd(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_conv_info_t *gvcp_info, gvcp_transaction_t* gvcp_trans)",
          "1861:  address_string = get_register_name_from_address(addr, gvcp_info, &is_custom_register);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1688:   }",
          "1689:   else",
          "1690:   {",
          "1693:   }",
          "1694:  }",
          "1695: }",
          "",
          "[Removed Lines]",
          "1692:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_writememcmd_data, tvb, offset, byte_count, ENC_NA);",
          "",
          "[Added Lines]",
          "1892:    guint32 extended_bootstrap_address_offset = 0;",
          "1893:    if (is_extended_bootstrap_address(gvcp_info, addr, &extended_bootstrap_address_offset))",
          "1894:    {",
          "1895:     dissect_extended_bootstrap_register(addr - extended_bootstrap_address_offset, gvcp_telegram_tree, tvb, offset, byte_count);",
          "1896:    }",
          "1897:    else",
          "1898:    {",
          "1900:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_writememcmd_data, tvb, offset, byte_count, ENC_NA);",
          "1901:    }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1797:  gint data_length = 0;",
          "1798:  offset = startoffset;",
          "1807:  {",
          "1830:   {",
          "1844:    offset += 2;",
          "1848:    offset += 2;",
          "1862:   }",
          "1866:  }",
          "1867: }",
          "",
          "[Removed Lines]",
          "1801:  eventid = tvb_get_ntohs(tvb, offset + 2);",
          "1804:  col_append_fstr(pinfo->cinfo, COL_INFO, \"[ID: 0x%04X]\", eventid);",
          "1806:  if (gvcp_telegram_tree != NULL)",
          "1809:   if (extendedblockids)",
          "1810:   {",
          "1811:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_extid_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1812:    data_length = tvb_get_ntohs(tvb, offset); // We get the data length here",
          "1813:   }",
          "1816:   offset += 2;",
          "1819:   if ((eventid >= 0x0000) && (eventid <= 0x8000))",
          "1820:   {",
          "1822:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1823:   }",
          "1824:   else if ((eventid >= 0x8001) && (eventid <= 0x8FFF))",
          "1825:   {",
          "1827:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_error_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1828:   }",
          "1829:   else if ((eventid >= 0x9000) && (eventid <= 0xFFFF))",
          "1832:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_device_specific_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1833:   }",
          "1834:   offset += 2;",
          "1837:   proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_stream_channel_index, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1838:   offset += 2;",
          "1840:   if (extendedblockids == 0)",
          "1841:   {",
          "1843:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1845:   }",
          "1846:   else",
          "1847:   {",
          "1850:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id_64bit_v2_0, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1851:    offset += 8;",
          "1852:   }",
          "1855:   proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_timestamp, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1856:   offset += 8;",
          "1858:   if ((data_length == 24) && (extendedblockids))",
          "1859:   {",
          "1861:    return;",
          "1865:   proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, -1, ENC_NA);",
          "",
          "[Added Lines]",
          "2012:   eventid = tvb_get_ntohs(tvb, offset + 2);",
          "2015:   col_append_fstr(pinfo->cinfo, COL_INFO, \"[ID: 0x%04X]\", eventid);",
          "2017:   if (gvcp_telegram_tree != NULL)",
          "2020:    if (extendedblockids)",
          "2021:    {",
          "2022:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_extid_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2023:     data_length = tvb_get_ntohs(tvb, offset); // We get the data length here",
          "2024:    }",
          "2027:    offset += 2;",
          "2030:    if ((eventid >= 0x0000) && (eventid <= 0x8000))",
          "2031:    {",
          "2033:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2034:    }",
          "2035:    else if ((eventid >= 0x8001) && (eventid <= 0x8FFF))",
          "2036:    {",
          "2038:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_error_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2039:    }",
          "2040:    else if ((eventid >= 0x9000) && (eventid <= 0xFFFF))",
          "2041:    {",
          "2043:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_device_specific_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2044:    }",
          "2048:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_stream_channel_index, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2051:    if (extendedblockids == 0)",
          "2052:    {",
          "2054:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2055:     offset += 2;",
          "2056:    }",
          "2057:    else",
          "2058:    {",
          "2059:     offset += 2;",
          "2061:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_block_id_64bit_v2_0, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2062:     offset += 8;",
          "2063:    }",
          "2066:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_timestamp, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2067:    offset += 8;",
          "2069:    if (extendedblockids)",
          "2070:    {",
          "2071:     if (data_length > 24)",
          "2072:     {",
          "2074:      proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, data_length - 24, ENC_NA);",
          "2075:      offset += data_length - 24;",
          "2076:     }",
          "2077:    }",
          "2078:    else",
          "2079:    {",
          "2081:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_eventcmd_data, tvb, offset, -1, ENC_NA);",
          "2082:     return;",
          "2083:    }",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1972:  }",
          "1973: }",
          "1977: \\brief DISSECT: Read register acknowledge",
          "1981: {",
          "1982:  guint i;",
          "1983:  gboolean is_custom_register = FALSE;",
          "",
          "[Removed Lines]",
          "1980: static void dissect_readreg_ack(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_transaction_t *gvcp_trans)",
          "",
          "[Added Lines]",
          "2198: static void dissect_readreg_ack(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_conv_info_t *gvcp_info, gvcp_transaction_t *gvcp_trans)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2006:   {",
          "2007:    if (addr_list_size > 0)",
          "2008:    {",
          "2010:    }",
          "2012:    if (num_registers)",
          "",
          "[Removed Lines]",
          "2009:     address_string = get_register_name_from_address(*((guint32*)wmem_array_index(gvcp_trans->addr_list, 0)), &is_custom_register);",
          "",
          "[Added Lines]",
          "2227:     address_string = get_register_name_from_address(*((guint32*)wmem_array_index(gvcp_trans->addr_list, 0)), gvcp_info, &is_custom_register);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2026:   if (num_registers > 1)",
          "2027:   {",
          "2029:             ett_gvcp_payload_ack, NULL, \"Register Value List\");",
          "2030:   }",
          "",
          "[Removed Lines]",
          "2028:    gvcp_telegram_tree = proto_tree_add_subtree(gvcp_telegram_tree, tvb,  offset, length,",
          "",
          "[Added Lines]",
          "2246:    gvcp_telegram_tree = proto_tree_add_subtree(gvcp_telegram_tree, tvb, offset, length,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2036:    if (valid_trans && i < addr_list_size)",
          "2037:    {",
          "2038:     curr_register = *((guint32*)wmem_array_index(gvcp_trans->addr_list, i));",
          "2042:     {",
          "2045:     }",
          "2046:     else",
          "2047:     {",
          "",
          "[Removed Lines]",
          "2039:     address_string = get_register_name_from_address(curr_register, &is_custom_register);",
          "2043:      proto_tree_add_uint(gvcp_telegram_tree, hf_gvcp_readregcmd_bootstrap_register, tvb, 0, 4, curr_register);",
          "2044:      dissect_register(curr_register, gvcp_telegram_tree, tvb, offset, length);",
          "",
          "[Added Lines]",
          "2256:     gint stream_channel_count = 0;",
          "2258:     address_string = get_register_name_from_address(curr_register, gvcp_info, &is_custom_register);",
          "2259:     for (; stream_channel_count < GVCP_MAX_STREAM_CHANNEL_COUNT; stream_channel_count++)",
          "2260:     {",
          "2261:      if (curr_register == (guint32)GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(stream_channel_count))",
          "2262:      {",
          "2263:       gvcp_info->extended_bootstrap_address[stream_channel_count] = tvb_get_ntohl(tvb, offset);",
          "2264:       break;",
          "2265:      }",
          "2266:     }",
          "2270:      guint32 extended_bootstrap_address_offset = 0;",
          "2271:      if (is_extended_bootstrap_address(gvcp_info, curr_register, &extended_bootstrap_address_offset))",
          "2272:      {",
          "2273:       proto_tree_add_uint_format_value(gvcp_telegram_tree, hf_gvcp_readregcmd_extended_bootstrap_register, tvb, offset, 4, curr_register, \"%s (0x%08X)\", address_string, curr_register);",
          "2274:       dissect_extended_bootstrap_register(curr_register - extended_bootstrap_address_offset, gvcp_telegram_tree, tvb, offset, length);",
          "2275:      }",
          "2276:      else",
          "2277:      {",
          "2278:       proto_tree_add_uint(gvcp_telegram_tree, hf_gvcp_readregcmd_bootstrap_register, tvb, 0, 4, curr_register);",
          "2279:       dissect_register(curr_register, gvcp_telegram_tree, tvb, offset, length);",
          "2280:      }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2106: \\brief DISSECT: Read memory acknowledge",
          "2110: {",
          "2111:  guint32 addr = 0;",
          "2112:  const gchar *address_string = NULL;",
          "2113:  gboolean is_custom_register = FALSE;",
          "2115:  addr = tvb_get_ntohl(tvb, startoffset);",
          "2119:  col_append_str(pinfo->cinfo, COL_INFO, address_string);",
          "2121:  if (gvcp_telegram_tree != NULL)",
          "2122:  {",
          "2123:   guint offset;",
          "2124:   guint byte_count;",
          "2125:   offset = startoffset + 4;",
          "2126:   byte_count = (length - 4);",
          "2129:   proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_readmemcmd_address, tvb, startoffset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "2109: static void dissect_readmem_ack(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length)",
          "2116:  address_string = get_register_name_from_address(addr, &is_custom_register);",
          "",
          "[Added Lines]",
          "2345: static void dissect_readmem_ack(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_conv_info_t *gvcp_info)",
          "2352:  address_string = get_register_name_from_address(addr, gvcp_info, &is_custom_register);",
          "2359:   gint stream_channel_count = 0;",
          "2365:   for (stream_channel_count = 0; stream_channel_count < GVCP_MAX_STREAM_CHANNEL_COUNT; stream_channel_count++)",
          "2366:   {",
          "2367:    if (startoffset == GVCP_SC_EXTENDED_BOOTSTRAP_ADDRESS(stream_channel_count))",
          "2368:    {",
          "2369:     gvcp_info->extended_bootstrap_address[stream_channel_count] = tvb_get_ntohl(tvb, offset);",
          "2370:     break;",
          "2371:    }",
          "2372:   }",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2134:   }",
          "2135:   else",
          "2136:   {",
          "2139:   }",
          "2140:  }",
          "2141: }",
          "",
          "[Removed Lines]",
          "2138:    proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_readmemcmd_data_read, tvb, offset, byte_count, ENC_NA);",
          "",
          "[Added Lines]",
          "2383:    guint32 extended_bootstrap_address_offset = 0;",
          "2384:    if (is_extended_bootstrap_address(gvcp_info, addr, &extended_bootstrap_address_offset))",
          "2385:    {",
          "2386:     dissect_extended_bootstrap_register(addr - extended_bootstrap_address_offset, gvcp_telegram_tree, tvb, offset, byte_count);",
          "2387:    }",
          "2388:    else",
          "2389:    {",
          "2391:     proto_tree_add_item(gvcp_telegram_tree, hf_gvcp_readmemcmd_data_read, tvb, offset, byte_count, ENC_NA);",
          "2392:    }",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2145: \\brief DISSECT: Write memory acknowledge",
          "2149: {",
          "2150:  if (gvcp_trans && gvcp_trans->addr_list)",
          "2151:  {",
          "2152:   if (wmem_array_get_count(gvcp_trans->addr_list) > 0)",
          "2153:   {",
          "2154:    const gchar *address_string = NULL;",
          "2156:    col_append_str(pinfo->cinfo, COL_INFO, address_string);",
          "2157:   }",
          "2158:  }",
          "",
          "[Removed Lines]",
          "2148: static void dissect_writemem_ack(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_transaction_t* gvcp_trans)",
          "2155:    address_string = get_register_name_from_address((*((guint32*)wmem_array_index(gvcp_trans->addr_list, 0))), NULL);",
          "",
          "[Added Lines]",
          "2402: static void dissect_writemem_ack(proto_tree *gvcp_telegram_tree, tvbuff_t *tvb, packet_info *pinfo, gint startoffset, gint length, gvcp_conv_info_t *gvcp_info, gvcp_transaction_t* gvcp_trans)",
          "2409:    address_string = get_register_name_from_address((*((guint32*)wmem_array_index(gvcp_trans->addr_list, 0))), gvcp_info, NULL);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2332:  gvcp_info = (gvcp_conv_info_t*)conversation_get_proto_data(conversation, proto_gvcp);",
          "2333:  if (!gvcp_info)",
          "2334:  {",
          "2335:   gvcp_info = (gvcp_conv_info_t*)wmem_alloc(wmem_file_scope(), sizeof(gvcp_conv_info_t));",
          "2336:   gvcp_info->pdus = wmem_map_new(wmem_file_scope(), g_direct_hash, g_direct_equal);",
          "2337:   conversation_add_proto_data(conversation, proto_gvcp, gvcp_info);",
          "2338:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2589:   gint stream_channel_count = 0;",
          "2592:   for (; stream_channel_count < GVCP_MAX_STREAM_CHANNEL_COUNT; stream_channel_count++)",
          "2593:   {",
          "2594:    gvcp_info->extended_bootstrap_address[stream_channel_count] = 0;",
          "2595:   }",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2436:    break;",
          "2438:   case GVCP_READREG_CMD:",
          "2440:    break;",
          "2442:   case GVCP_WRITEREG_CMD:",
          "2444:    break;",
          "2446:   case GVCP_READMEM_CMD:",
          "2448:    break;",
          "2450:   case GVCP_WRITEMEM_CMD:",
          "2452:    break;",
          "2454:   case GVCP_EVENT_CMD:",
          "",
          "[Removed Lines]",
          "2439:    dissect_readreg_cmd(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_trans);",
          "2443:    dissect_writereg_cmd(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_trans);",
          "2447:    dissect_readmem_cmd(gvcp_telegram_tree, tvb, pinfo, offset);",
          "2451:    dissect_writemem_cmd(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_trans);",
          "",
          "[Added Lines]",
          "2698:    dissect_readreg_cmd(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_info, gvcp_trans);",
          "2702:    dissect_writereg_cmd(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_info, gvcp_trans);",
          "2706:    dissect_readmem_cmd(gvcp_telegram_tree, tvb, pinfo, offset, gvcp_info);",
          "2710:    dissect_writemem_cmd(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_info, gvcp_trans);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2505:    break;",
          "2507:   case GVCP_READREG_ACK:",
          "2509:    break;",
          "2511:   case GVCP_WRITEREG_ACK:",
          "",
          "[Removed Lines]",
          "2508:    dissect_readreg_ack(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_trans);",
          "",
          "[Added Lines]",
          "2767:    dissect_readreg_ack(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_info, gvcp_trans);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2513:    break;",
          "2515:   case GVCP_READMEM_ACK:",
          "2517:    break;",
          "2519:   case GVCP_WRITEMEM_ACK:",
          "2521:    break;",
          "2523:   case GVCP_PENDING_ACK:",
          "",
          "[Removed Lines]",
          "2516:    dissect_readmem_ack(gvcp_telegram_tree, tvb, pinfo, offset, data_length);",
          "2520:    dissect_writemem_ack(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_trans);",
          "",
          "[Added Lines]",
          "2775:    dissect_readmem_ack(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_info);",
          "2779:    dissect_writemem_ack(gvcp_telegram_tree, tvb, pinfo, offset, data_length, gvcp_info, gvcp_trans);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2571:   { &hf_gvcp_64bitid_flag_v2_0,",
          "2572:   { \"64 bit ID\", \"gvcp.cmd.flag.64bitid\",",
          "2574:   NULL, HFILL }},",
          "2576:   { &hf_gvcp_allow_broadcast_acknowledge_flag,",
          "",
          "[Removed Lines]",
          "2573:   FT_BOOLEAN, 8, NULL, 0x08,",
          "",
          "[Added Lines]",
          "2832:   FT_BOOLEAN, 8, NULL, 0x10,",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2648:   FT_UINT32, BASE_HEX_DEC, VALS(bootstrapregisternames), 0x0,",
          "2649:   NULL, HFILL }},",
          "2653:   { &hf_gvcp_writeregcmd_data,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2910:   { &hf_gvcp_readregcmd_extended_bootstrap_register,",
          "2911:   { \"Extended Bootstrap Register\", \"gvcp.cmd.readreg.extendedbootstrapregister\",",
          "2912:   FT_UINT32, BASE_HEX_DEC, VALS(extendedbootstrapregisternames), 0x0,",
          "2913:   NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2660:   FT_UINT32, BASE_HEX_DEC, VALS(bootstrapregisternames), 0x0,",
          "2661:   NULL, HFILL }},",
          "2663:   { &hf_gvcp_writeregcmd_data_index,",
          "2664:   { \"Data Index\", \"gvcp.cmd.writereg.dataindex\",",
          "2665:   FT_UINT16, BASE_HEX, NULL, 0x0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2927:   { &hf_gvcp_writeregcmd_extended_bootstrap_register,",
          "2928:   { \"Extended Bootstrap Register\", \"gvcp.cmd.writereg.extendedbootstrapregister\",",
          "2929:   FT_UINT32, BASE_HEX_DEC, VALS(extendedbootstrapregisternames), 0x0,",
          "2930:   NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3079:   NULL, HFILL",
          "3080:   }},",
          "3084:   {& hf_gvcp_mcsp_supported,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3351:   { &hf_gvcp_sccaps_scmbsx_supported_v2_2,",
          "3352:   { \"Stream Channel Max. Block Size Supported\", \"gvcp.bootstrap.sccaps.scmbssupported\",",
          "3353:   FT_BOOLEAN, 32, NULL, 0x20000000,",
          "3354:   NULL, HFILL",
          "3355:   } },",
          "3357:   { &hf_gvcp_sccaps_scebax_supported_v2_2,",
          "3358:   { \"Stream Channel Extended Bootstrap Address Supported\", \"gvcp.bootstrap.sccaps.scebasupported\",",
          "3359:   FT_BOOLEAN, 32, NULL, 0x10000000,",
          "3360:   NULL, HFILL",
          "3361:   } },",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3087:   NULL, HFILL",
          "3088:   }},",
          "3092:   {& hf_gvcp_ieee1588_profile_registers_present_v2_1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3371:   { &hf_gvcp_mcc_supported_v2_2,",
          "3372:   { \"MCC Supported\", \"gvcp.bootstrap.mccaps.mccsupported\",",
          "3373:   FT_BOOLEAN, 32, NULL, 0x40000000,",
          "3374:   NULL, HFILL",
          "3375:   } },",
          "3377:   { &hf_gvcp_mcec_supported_v2_2,",
          "3378:   { \"MCEC Supported\", \"gvcp.bootstrap.mccaps.mcecsupported\",",
          "3379:   FT_BOOLEAN, 32, NULL, 0x20000000,",
          "3380:   NULL, HFILL",
          "3381:   } },",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3503:   NULL, HFILL",
          "3504:   }},",
          "3508:   {& hf_gvcp_sc_direction,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3801:   { &hf_gvcp_mcec_enabled_v2_2,",
          "3802:   { \"MCEC Enabled\", \"gvcp.bootstrap.mcconfig.mcecenabled\",",
          "3803:   FT_BOOLEAN, 32, NULL, 0x80000000,",
          "3804:   NULL, HFILL",
          "3805:   } },",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3587:   NULL, HFILL",
          "3588:   }},",
          "3590:   {& hf_gvcp_sc_multi_part_supported_v2_1,",
          "3591:   { \"Multi-part Supported\", \"gvcp.bootstrap.sccx.multipartsupported\",",
          "3592:   FT_BOOLEAN, 32, NULL, 0x00000040,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3891:   { &hf_gvcp_sc_scmpcx_supported_v2_2,",
          "3892:   { \"Stream Channel Maximum Packet Count Supported\", \"gvcp.bootstrap.sccx.scmpcxsupported\",",
          "3893:   FT_BOOLEAN, 32, NULL, 0x00000100,",
          "3894:   NULL, HFILL",
          "3895:   } },",
          "3897:   { &hf_gvcp_sc_gendc_supported_v2_2,",
          "3898:   { \"GenDC Supported\", \"gvcp.bootstrap.sccx.gendcsupported\",",
          "3899:   FT_BOOLEAN, 32, NULL, 0x00000080,",
          "3900:   NULL, HFILL",
          "3901:   } },",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3634:   {& hf_gvcp_sc_multi_part_enabled_v2_1,",
          "3635:   { \"Multi-part Enabled\", \"gvcp.bootstrap.sccfgx.multipartenabled\",",
          "3636:   FT_BOOLEAN, 32, NULL, 0x40,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3947:   { &hf_gvcp_sc_gendc_enabled_v2_2,",
          "3948:   { \"GenDC Enabled\", \"gvcp.bootstrap.sccfgx.gendcenabled\",",
          "3949:   FT_BOOLEAN, 32, NULL, 0x80,",
          "3950:   NULL, HFILL",
          "3951:   } },",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3869:   NULL, HFILL",
          "3870:   }},",
          "3874:   {& hf_gvcp_action_group_key,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4193:   { &hf_gvcp_sc_max_packet_count_v2_2,",
          "4194:   { \"Max. Packet Count\", \"gvcp.bootstrap.scmpcx.maxpacketcount\",",
          "4195:   FT_UINT32, BASE_DEC, NULL, 0x0,",
          "4196:   NULL, HFILL",
          "4197:   } },",
          "4201:   { &hf_gvcp_sc_max_block_size_high_v2_2,",
          "4202:   { \"Max. Block Size (High)\", \"gvcp.bootstrap.maxblocksizehigh\",",
          "4203:   FT_UINT32, BASE_DEC_HEX, NULL, 0x0,",
          "4204:   NULL, HFILL",
          "4205:   } },",
          "4209:   { &hf_gvcp_sc_max_block_size_low_v2_2,",
          "4210:   { \"Max. Payload Size (Low)\", \"gvcp.bootstrap.maxblocksizelow\",",
          "4211:   FT_UINT32, BASE_DEC_HEX, NULL, 0x0,",
          "4212:   NULL, HFILL",
          "4213:   } },",
          "4217:   { &hf_gvcp_sc_extended_registers_address_v2_2,",
          "4218:   { \"Stream Channel Extended Bootstrap Address\", \"gvcp.bootstrap.extendedbootstrapaddress\",",
          "4219:   FT_UINT32, BASE_HEX, NULL, 0x0,",
          "4220:   NULL, HFILL",
          "4221:   } },",
          "4225:   { &hf_gvcp_sc_gendc_descriptor_address_v2_2,",
          "4226:   { \"Stream Channel GenDC Descriptor Address\", \"gvcp.bootstrap.gendc.descriptoraddress\",",
          "4227:   FT_UINT32, BASE_HEX, NULL, 0x0,",
          "4228:   NULL, HFILL",
          "4229:   } },",
          "4233:   { &hf_gvcp_sc_gendc_descriptor_size_v2_2,",
          "4234:   { \"Stream Channel GenDC Descriptor Size\", \"gvcp.bootstrap.gedc.descriptorsize\",",
          "4235:   FT_UINT32, BASE_HEX, NULL, 0x0,",
          "4236:   NULL, HFILL",
          "4237:   } },",
          "4241:   { &hf_gvcp_sc_gendc_flow_mapping_table_address_v2_2,",
          "4242:   { \"Stream Channel GenDC Flow Mapping Table Address\", \"gvcp.bootstrap.gendc.flowmappingtablesize\",",
          "4243:   FT_UINT32, BASE_HEX, NULL, 0x0,",
          "4244:   NULL, HFILL",
          "4245:   } },",
          "4249:   { &hf_gvcp_sc_gendc_flow_mapping_table_size_v2_2,",
          "4250:   { \"Stream Channel GenDC Flow Mapping Table Size\", \"gvcp.bootstrap.gendc.flowmappingtablesize\",",
          "4251:   FT_UINT32, BASE_HEX, NULL, 0x0,",
          "4252:   NULL, HFILL",
          "4253:   } },",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-gvsp.c||epan/dissectors/packet-gvsp.c": [
          "File: epan/dissectors/packet-gvsp.c -> epan/dissectors/packet-gvsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   Payload types",
          "50:    GVSP packet types",
          "",
          "[Removed Lines]",
          "36: #define GVSP_PAYLOAD_IMAGE               ( 0x0001 )",
          "37: #define GVSP_PAYLOAD_RAWDATA             ( 0x0002 )",
          "38: #define GVSP_PAYLOAD_FILE                ( 0x0003 )",
          "39: #define GVSP_PAYLOAD_CHUNKDATA           ( 0x0004 )",
          "46: #define GVSP_PAYLOAD_DEVICEPSECIFICSTART ( 0x8000 )",
          "",
          "[Added Lines]",
          "36: #define GVSP_PAYLOAD_IMAGE                 ( 0x0001 )",
          "37: #define GVSP_PAYLOAD_RAWDATA               ( 0x0002 )",
          "38: #define GVSP_PAYLOAD_FILE                  ( 0x0003 )",
          "39: #define GVSP_PAYLOAD_CHUNKDATA             ( 0x0004 )",
          "47: #define GVSP_PAYLOAD_DEVICE_SPECIFIC_START ( 0x8000 )",
          "50:   GenDC data flag masks (GEV 2.2)",
          "53: #define GENDC_DESCRIPTOR_FLAG       ( 0xC0 )",
          "54: #define GENDC_DESCRIPTOR_START_FLAG ( 0x20 )",
          "55: #define GENDC_DESCRIPTOR_END_FLAG   ( 0x10 )",
          "58:    GenDC header types(GEV 2.2)",
          "61: #define GENDC_HEADER_TYPE_CONTAINER         ( 0x1000 )",
          "62: #define GENDC_HEADER_TYPE_COMPONENT_HEADER  ( 0x2000 )",
          "63: #define GENDC_HEADER_TYPE_PART_CHUNK        ( 0x4000 )",
          "64: #define GENDC_HEADER_TYPE_PART_1D           ( 0x4100 )",
          "65: #define GENDC_HEADER_TYPE_PART_2D           ( 0x4200 )",
          "66: #define GENDC_HEADER_TYPE_PART_2D_JPEG      ( 0x4201 )",
          "67: #define GENDC_HEADER_TYPE_PART_2D_JPEG2000  ( 0x4202 )",
          "68: #define GENDC_HEADER_TYPE_PART_2D_H264      ( 0x4203 )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: #define GVSP_PACKET_PAYLOAD_H264      ( 5 )",
          "58: #define GVSP_PACKET_PAYLOAD_MULTIZONE ( 6 )",
          "63:    GVSP Multi-Part data types (GEV 2.1)",
          "",
          "[Removed Lines]",
          "60: #define GVSP_PACKET_PAYLOAD_LAST      ( 7 )",
          "",
          "[Added Lines]",
          "82: #define GVSP_PACKET_PAYLOAD_LAST      ( 8 )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132: #define GVSP_PIX_MONO12 0x01100005",
          "133: #define GVSP_PIX_MONO12P 0x010C0047",
          "134: #define GVSP_PIX_MONO14 0x01100025",
          "135: #define GVSP_PIX_MONO16 0x01100007",
          "136: #define GVSP_PIX_BAYERBG8 0x0108000B",
          "137: #define GVSP_PIX_BAYERBG10 0x0110000F",
          "138: #define GVSP_PIX_BAYERBG10P 0x010A0052",
          "139: #define GVSP_PIX_BAYERBG12 0x01100013",
          "140: #define GVSP_PIX_BAYERBG12P 0x010C0053",
          "141: #define GVSP_PIX_BAYERBG16 0x01100031",
          "142: #define GVSP_PIX_BAYERGB8 0x0108000A",
          "143: #define GVSP_PIX_BAYERGB10 0x0110000E",
          "144: #define GVSP_PIX_BAYERGB10P 0x010A0054",
          "145: #define GVSP_PIX_BAYERGB12 0x01100012",
          "146: #define GVSP_PIX_BAYERGB12P 0x010C0055",
          "147: #define GVSP_PIX_BAYERGB16 0x01100030",
          "148: #define GVSP_PIX_BAYERGR8 0x01080008",
          "149: #define GVSP_PIX_BAYERGR10 0x0110000C",
          "150: #define GVSP_PIX_BAYERGR10P 0x010A0056",
          "151: #define GVSP_PIX_BAYERGR12 0x01100010",
          "152: #define GVSP_PIX_BAYERGR12P 0x010C0057",
          "153: #define GVSP_PIX_BAYERGR16 0x0110002E",
          "154: #define GVSP_PIX_BAYERRG8 0x01080009",
          "155: #define GVSP_PIX_BAYERRG10 0x0110000D",
          "156: #define GVSP_PIX_BAYERRG10P 0x010A0058",
          "157: #define GVSP_PIX_BAYERRG12 0x01100011",
          "158: #define GVSP_PIX_BAYERRG12P 0x010C0059",
          "159: #define GVSP_PIX_BAYERRG16 0x0110002F",
          "160: #define GVSP_PIX_RGBA8 0x02200016",
          "161: #define GVSP_PIX_RGBA10 0x0240005F",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: #define GVSP_PIX_MONO14P 0x010E0104",
          "157: #define GVSP_PIX_MONO32 0x01200111",
          "158: #define GVSP_PIX_BAYERBG4P 0x01040110",
          "164: #define GVSP_PIX_BAYERBG14 0x0110010C",
          "165: #define GVSP_PIX_BAYERBG14P 0x010E0108",
          "167: #define GVSP_PIX_BAYERGB4P 0x0104010F",
          "173: #define GVSP_PIX_BAYERGB14 0x0110010B",
          "174: #define GVSP_PIX_BAYERGB14P 0x010E0107",
          "176: #define GVSP_PIX_BAYERGR4P 0x0104010D",
          "182: #define GVSP_PIX_BAYERGR14 0x01100109",
          "183: #define GVSP_PIX_BAYERGR14P 0x010E0105",
          "185: #define GVSP_PIX_BAYERRG4P 0x0104010E",
          "191: #define GVSP_PIX_BAYERRG14 0x0110010A",
          "192: #define GVSP_PIX_BAYERRG14P 0x010E0106",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244: #define GVSP_PIX_CONFIDENCE8 0x010800C6",
          "245: #define GVSP_PIX_CONFIDENCE16 0x011000C7",
          "246: #define GVSP_PIX_CONFIDENCE32F 0x012000C8",
          "247: #define GVSP_PIX_BICOLORBGRG8 0x021000A6",
          "248: #define GVSP_PIX_BICOLORBGRG10 0x022000A9",
          "249: #define GVSP_PIX_BICOLORBGRG10P 0x021400AA",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: #define GVSP_PIX_DATA8 0x01080116",
          "282: #define GVSP_PIX_DATA8S 0x01080117",
          "283: #define GVSP_PIX_DATA16 0x01100118",
          "284: #define GVSP_PIX_DATA16S 0x01100119",
          "285: #define GVSP_PIX_DATA32 0x0120011A",
          "286: #define GVSP_PIX_DATA32F 0x0120011C",
          "287: #define GVSP_PIX_DATA32S 0x0120011B",
          "288: #define GVSP_PIX_DATA64 0x0140011D",
          "289: #define GVSP_PIX_DATA64F 0x0140011F",
          "290: #define GVSP_PIX_DATA64S 0x0140011E",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290: #define GVSP_PIX_YCBCR12P_CBYCR 0x02240086",
          "291: #define GVSP_PIX_YCBCR411_8 0x020C005A",
          "292: #define GVSP_PIX_YCBCR411_8_CBYYCRYY 0x020C003C",
          "293: #define GVSP_PIX_YCBCR422_8 0x0210003B",
          "294: #define GVSP_PIX_YCBCR422_8_CBYCRY 0x02100043",
          "295: #define GVSP_PIX_YCBCR422_10 0x02200065",
          "296: #define GVSP_PIX_YCBCR422_10_CBYCRY 0x02200099",
          "297: #define GVSP_PIX_YCBCR422_10P 0x02140087",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337: #define GVSP_PIX_YCBCR420_8_YY_CBCR_SEMIPLANAR 0x020C0112",
          "338: #define GVSP_PIX_YCBCR420_8_YY_CRCB_SEMIPLANAR 0x020C0114",
          "341: #define GVSP_PIX_YCBCR422_8_YY_CBCR_SEMIPLANAR 0x02100113",
          "342: #define GVSP_PIX_YCBCR422_8_YY_CRCB_SEMIPLANAR 0x02100115",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "336: #define GVSP_PIX_YUV411_8_UYYVYY 0x020C001E",
          "337: #define GVSP_PIX_YUV422_8 0x02100032",
          "338: #define GVSP_PIX_YUV422_8_UYVY 0x0210001F",
          "339: #define GVSP_PIX_MONO10PACKED 0x010C0004",
          "340: #define GVSP_PIX_MONO12PACKED 0x010C0006",
          "341: #define GVSP_PIX_BAYERBG10PACKED 0x010C0029",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387: #define GVSP_PIX_YCBCR2020_8_CBYCR 0x021800F4",
          "388: #define GVSP_PIX_YCBCR2020_10_CBYCR 0x023000F5",
          "389: #define GVSP_PIX_YCBCR2020_10P_CBYCR 0x021E00F6",
          "390: #define GVSP_PIX_YCBCR2020_12_CBYCR 0x023000F7",
          "391: #define GVSP_PIX_YCBCR2020_12P_CBYCR 0x022400F8",
          "392: #define GVSP_PIX_YCBCR2020_411_8_CBYYCRYY 0x020C00F9",
          "393: #define GVSP_PIX_YCBCR2020_422_8 0x021000FA",
          "394: #define GVSP_PIX_YCBCR2020_422_8_CBYCRY 0x021000FB",
          "395: #define GVSP_PIX_YCBCR2020_422_10 0x022000FC",
          "396: #define GVSP_PIX_YCBCR2020_422_10_CBYCRY 0x022000FD",
          "397: #define GVSP_PIX_YCBCR2020_422_10P 0x021400FE",
          "398: #define GVSP_PIX_YCBCR2020_422_10P_CBYCRY 0x021400FF",
          "399: #define GVSP_PIX_YCBCR2020_422_12 0x02180100",
          "400: #define GVSP_PIX_YCBCR2020_422_12_CBYCRY 0x02180101",
          "401: #define GVSP_PIX_YCBCR2020_422_12P 0x02180102",
          "402: #define GVSP_PIX_YCBCR2020_422_12P_CBYCRY 0x02180103",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "386: static int ett_gvsp_zoneinfo_multipart = -1;",
          "387: static int ett_gvsp_partinfo_leader = -1;",
          "388: static int ett_gvsp_partinfo_trailer = -1;",
          "390: static const value_string statusnames[] = {",
          "391:     { GEV_STATUS_SUCCESS,                             \"GEV_STATUS_SUCCESS\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453: static int ett_gvsp_gendc_leader_flags = -1;",
          "454: static int ett_gvsp_gendc_payload_data_flags = -1;",
          "455: static int ett_gvsp_gendc_payload_flow_flags = -1;",
          "456: static int ett_gvsp_gendc_container_descriptor = -1;",
          "457: static int ett_gvsp_gendc_container_header_flags = -1;",
          "458: static int ett_gvsp_gendc_container_header_variable_fields = -1;",
          "459: static int ett_gvsp_gendc_component_header = -1;",
          "460: static int ett_gvsp_gendc_part_header = -1;",
          "461: static int ett_gvsp_gendc_component_header_flags = -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "427:     { GVSP_PACKET_PAYLOAD_H264,                             \"H264\" },",
          "428:     { GVSP_PACKET_PAYLOAD_MULTIZONE,                        \"MULTI-ZONE\" },",
          "429:     { GVSP_PACKET_PAYLOAD_MULTIPART,                        \"MULTI-PART\" },",
          "430:     { GVSP_EXTENDED_ID_BIT | GVSP_PACKET_LEADER,            \"LEADER (ext IDs)\" },",
          "431:     { GVSP_EXTENDED_ID_BIT | GVSP_PACKET_TRAILER,           \"TRAILER (ext IDs)\" },",
          "432:     { GVSP_EXTENDED_ID_BIT | GVSP_PACKET_PAYLOAD,           \"PAYLOAD (ext IDs)\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:     { GVSP_PACKET_PAYLOAD_GENDC,                            \"GENDC\" },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "434:     { GVSP_EXTENDED_ID_BIT | GVSP_PACKET_PAYLOAD_H264,      \"H264 (ext IDs)\" },",
          "435:     { GVSP_EXTENDED_ID_BIT | GVSP_PACKET_PAYLOAD_MULTIZONE, \"MULTI-ZONE (ext IDs)\" },",
          "436:     { GVSP_EXTENDED_ID_BIT | GVSP_PACKET_PAYLOAD_MULTIPART, \"MULTI-PART (ext IDs)\" },",
          "437:     { 0, NULL },",
          "438: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:     { GVSP_EXTENDED_ID_BIT | GVSP_PACKET_PAYLOAD_GENDC,     \"GENDC (ext IDs)\" },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "448:     { GVSP_PAYLOAD_H264,                                        \"H264\" },",
          "449:     { GVSP_PAYLOAD_MULTIZONEIMAGE,                              \"MULTI-ZONE IMAGE\" },",
          "450:     { GVSP_PAYLOAD_MULTIPART,                                   \"MULTI-PART\" },",
          "451:     { GVSP_EXTENDED_CHUNK_BIT | GVSP_PAYLOAD_IMAGE,             \"IMAGE (v2.0 chunks)\" },",
          "452:     { GVSP_EXTENDED_CHUNK_BIT | GVSP_PAYLOAD_RAWDATA,           \"RAW DATA (v2.0 Chunks)\" },",
          "453:     { GVSP_EXTENDED_CHUNK_BIT | GVSP_PAYLOAD_FILE,              \"FILE (v2.0 Chunks)\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:     { GVSP_PAYLOAD_GENDC,                                       \"GENDC\" },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "487:     { GVSP_PIX_CONFIDENCE1P, \"Confidence 1-bit packed\" },",
          "488:     { GVSP_PIX_MONO2P, \"Monochrome 2-bit packed\" },",
          "489:     { GVSP_PIX_MONO4P, \"Monochrome 4-bit packed\" },",
          "490:     { GVSP_PIX_MONO8, \"Monochrome 8-bit\" },",
          "491:     { GVSP_PIX_MONO8S, \"Monochrome 8-bit signed\" },",
          "492:     { GVSP_PIX_BAYERGR8, \"Bayer Green-Red 8-bit\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566:     { GVSP_PIX_BAYERGR4P, \"Bayer Green-Red 4-bit packed\" },",
          "567:     { GVSP_PIX_BAYERRG4P, \"Bayer Red-Green 4-bit packed\" },",
          "568:     { GVSP_PIX_BAYERGB4P, \"Bayer Green-Blue 4-bit packed\" },",
          "569:     { GVSP_PIX_BAYERBG4P, \"Bayer Blue-Green 4-bit packed\" },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "505:     { GVSP_PIX_R8, \"Red 8-bit\" },",
          "506:     { GVSP_PIX_G8, \"Green 8-bit\" },",
          "507:     { GVSP_PIX_B8, \"Blue 8-bit\" },",
          "508:     { GVSP_PIX_MONO10P, \"Monochrome 10-bit packed\" },",
          "509:     { GVSP_PIX_BAYERBG10P, \"Bayer Blue-Green 10-bit packed\" },",
          "510:     { GVSP_PIX_BAYERGB10P, \"Bayer Green-Blue 10-bit packed\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588:     { GVSP_PIX_DATA8, \"Data 8-bit\" },",
          "589:     { GVSP_PIX_DATA8S, \"Data 8-bit signed\" },",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "545:     { GVSP_PIX_COORD3D_A12P, \"3D coordinate A 12-bit packed\" },",
          "546:     { GVSP_PIX_COORD3D_B12P, \"3D coordinate B 12-bit packed\" },",
          "547:     { GVSP_PIX_COORD3D_C12P, \"3D coordinate C 12-bit packed\" },",
          "548:     { GVSP_PIX_MONO10, \"Monochrome 10-bit unpacked\" },",
          "549:     { GVSP_PIX_MONO12, \"Monochrome 12-bit unpacked\" },",
          "550:     { GVSP_PIX_MONO16, \"Monochrome 16-bit\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630:     { GVSP_PIX_MONO14P, \"Monochrome 14-bit packed\" },",
          "631:     { GVSP_PIX_BAYERGR14P, \"Bayer Green-Red 14-bit packed\" },",
          "632:     { GVSP_PIX_BAYERRG14P, \"Bayer Red-Green 14-bit packed\" },",
          "633:     { GVSP_PIX_BAYERGB14P, \"Bayer Green-Blue 14-bit packed\" },",
          "634:     { GVSP_PIX_BAYERBG14P, \"Bayer Blue-Green 14-bit packed\" },",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "584:     { GVSP_PIX_R16, \"Red 16-bit\" },",
          "585:     { GVSP_PIX_G16, \"Green 16-bit\" },",
          "586:     { GVSP_PIX_B16, \"Blue 16-bit\" },",
          "587:     { GVSP_PIX_COORD3D_A32F, \"3D coordinate A 32-bit floating point\" },",
          "588:     { GVSP_PIX_COORD3D_B32F, \"3D coordinate B 32-bit floating point\" },",
          "589:     { GVSP_PIX_COORD3D_C32F, \"3D coordinate C 32-bit floating point\" },",
          "590:     { GVSP_PIX_CONFIDENCE32F, \"Confidence 32-bit floating point\" },",
          "591:     { GVSP_PIX_YUV411_8_UYYVYY, \"YUV 4:1:1 8-bit\" },",
          "592:     { GVSP_PIX_YCBCR411_8_CBYYCRYY, \"YCbCr 4:1:1 8-bit\" },",
          "593:     { GVSP_PIX_YCBCR601_411_8_CBYYCRYY, \"YCbCr 4:1:1 8-bit BT.601\" },",
          "594:     { GVSP_PIX_YCBCR709_411_8_CBYYCRYY, \"YCbCr 4:1:1 8-bit BT.709\" },",
          "595:     { GVSP_PIX_YCBCR411_8, \"YCbCr 4:1:1 8-bit\" },",
          "596:     { GVSP_PIX_YUV422_8_UYVY, \"YUV 4:2:2 8-bit\" },",
          "597:     { GVSP_PIX_YUV422_8, \"YUV 4:2:2 8-bit\" },",
          "598:     { GVSP_PIX_RGB565P, \"Red-Green-Blue 5/6/5-bit packed\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674:     { GVSP_PIX_BAYERGR14, \"Bayer Green-Red 14-bit unpacked\" },",
          "675:     { GVSP_PIX_BAYERRG14, \"Bayer Red-Green 14-bit unpacked\" },",
          "676:     { GVSP_PIX_BAYERGB14, \"Bayer Green-Blue 14-bit unpacked\" },",
          "677:     { GVSP_PIX_BAYERBG14, \"Bayer Blue-Green 14-bit unpacked\" },",
          "678:     { GVSP_PIX_DATA16, \"Data 16-bit\" },",
          "679:     { GVSP_PIX_DATA16S, \"Data 16-bit signed\" },",
          "684:     { GVSP_PIX_MONO32, \"Monochrome 32-bit unpacked\" },",
          "685:     { GVSP_PIX_DATA32, \"Data 32-bit\" },",
          "686:     { GVSP_PIX_DATA32S, \"Data 32-bit signed\" },",
          "687:     { GVSP_PIX_DATA32F, \"Data 32-bit floating point\" },",
          "688:     { GVSP_PIX_DATA64, \"Data 64-bit\" },",
          "689:     { GVSP_PIX_DATA64S, \"Data 64-bit signed\" },",
          "690:     { GVSP_PIX_DATA64F, \"Data 64-bit floating point\" },",
          "696:     { GVSP_PIX_YCBCR2020_411_8_CBYYCRYY, \"YCbCr 4:1:1 8-bit BT.2020\" },",
          "697:     { GVSP_PIX_YCBCR420_8_YY_CBCR_SEMIPLANAR, \"YCbCr 4:2:0 8-bit YY/CbCr Semiplanar\" },",
          "698:     { GVSP_PIX_YCBCR420_8_YY_CRCB_SEMIPLANAR, \"YCbCr 4:2:0 8-bit YY/CrCb Semiplanar\" },",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "607:     { GVSP_PIX_BICOLORBGRG8, \"Bi-color Blue/Green - Red/Green 8-bit\" },",
          "608:     { GVSP_PIX_COORD3D_AC8, \"3D coordinate A-C 8-bit\" },",
          "609:     { GVSP_PIX_COORD3D_AC8_PLANAR, \"3D coordinate A-C 8-bit planar\" },",
          "610:     { GVSP_PIX_YCBCR422_10P, \"YCbCr 4:2:2 10-bit packed\" },",
          "611:     { GVSP_PIX_YCBCR601_422_10P, \"YCbCr 4:2:2 10-bit packed BT.601\" },",
          "612:     { GVSP_PIX_YCBCR709_422_10P, \"YCbCr 4:2:2 10-bit packed BT.709\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:     { GVSP_PIX_YCBCR2020_422_8, \"YCbCr 4:2:2 8-bit BT.2020\" },",
          "714:     { GVSP_PIX_YCBCR2020_422_8_CBYCRY, \"YCbCr 4:2:2 8-bit BT.2020\" },",
          "715:     { GVSP_PIX_YCBCR422_8_YY_CBCR_SEMIPLANAR, \"YCbCr 4:2:2 8-bit YY/CbCr Semiplanar\" },",
          "716:     { GVSP_PIX_YCBCR422_8_YY_CRCB_SEMIPLANAR, \"YCbCr 4:2:2 8-bit YY/CrCb Semiplanar\" },",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "617:     { GVSP_PIX_BICOLORBGRG10P, \"Bi-color Blue/Green - Red/Green 10-bit packed\" },",
          "618:     { GVSP_PIX_COORD3D_AC10P, \"3D coordinate A-C 10-bit packed\" },",
          "619:     { GVSP_PIX_COORD3D_AC10P_PLANAR, \"3D coordinate A-C 10-bit packed planar\" },",
          "620:     { GVSP_PIX_RGB8, \"Red-Green-Blue 8-bit\" },",
          "621:     { GVSP_PIX_BGR8, \"Blue-Green-Red 8-bit\" },",
          "622:     { GVSP_PIX_YUV8_UYV, \"YUV 4:4:4 8-bit\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727:     { GVSP_PIX_YCBCR2020_422_10P, \"YCbCr 4:2:2 10-bit packed BT.2020\" },",
          "728:     { GVSP_PIX_YCBCR2020_422_10P_CBYCRY, \"YCbCr 4:2:2 10-bit packed BT.2020\" },",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "637:     { GVSP_PIX_COORD3D_ABC8_PLANAR, \"3D coordinate A-B-C 8-bit planar\" },",
          "638:     { GVSP_PIX_COORD3D_AC12P, \"3D coordinate A-C 12-bit packed\" },",
          "639:     { GVSP_PIX_COORD3D_AC12P_PLANAR, \"3D coordinate A-C 12-bit packed planar\" },",
          "640:     { GVSP_PIX_BGR10P, \"Blue-Green-Red 10-bit packed\" },",
          "641:     { GVSP_PIX_RGB10P, \"Red-Green-Blue 10-bit packed\" },",
          "642:     { GVSP_PIX_YCBCR10P_CBYCR, \"YCbCr 4:4:4 10-bit packed\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "749:     { GVSP_PIX_YCBCR2020_8_CBYCR, \"YCbCr 4:4:4 8-bit BT.2020\" },",
          "750:     { GVSP_PIX_YCBCR2020_422_12, \"YCbCr 4:2:2 12-bit unpacked BT.2020\" },",
          "751:     { GVSP_PIX_YCBCR2020_422_12_CBYCRY, \"YCbCr 4:2:2 12-bit unpacked BT.2020\" },",
          "752:     { GVSP_PIX_YCBCR2020_422_12P, \"YCbCr 4:2:2 12-bit packed BT.2020\" },",
          "753:     { GVSP_PIX_YCBCR2020_422_12P_CBYCRY, \"YCbCr 4:2:2 12-bit packed BT.2020\" },",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "644:     { GVSP_PIX_YCBCR709_10P_CBYCR, \"YCbCr 4:4:4 10-bit packed BT.709\" },",
          "645:     { GVSP_PIX_COORD3D_ABC10P, \"3D coordinate A-B-C 10-bit packed\" },",
          "646:     { GVSP_PIX_COORD3D_ABC10P_PLANAR, \"3D coordinate A-B-C 10-bit packed planar\" },",
          "647:     { GVSP_PIX_RGBA8, \"Red-Green-Blue-alpha 8-bit\" },",
          "648:     { GVSP_PIX_BGRA8, \"Blue-Green-Red-alpha 8-bit\" },",
          "649:     { GVSP_PIX_RGB10V1PACKED, \"GigE Vision specific format, Red-Green-Blue 10-bit packed - variant 1\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     { GVSP_PIX_YCBCR2020_10P_CBYCR, \"YCbCr 4:4:4 10-bit packed BT.2020\" },",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "666:     { GVSP_PIX_BICOLORBGRG12, \"Bi-color Blue/Green - Red/Green 12-bit unpacked\" },",
          "667:     { GVSP_PIX_COORD3D_AC16, \"3D coordinate A-C 16-bit\" },",
          "668:     { GVSP_PIX_COORD3D_AC16_PLANAR, \"3D coordinate A-C 16-bit planar\" },",
          "669:     { GVSP_PIX_RGB12V1PACKED, \"GigE Vision specific format, Red-Green-Blue 12-bit packed - variant 1\" },",
          "670:     { GVSP_PIX_BGR12P, \"Blue-Green-Red 12-bit packed\" },",
          "671:     { GVSP_PIX_RGB12P, \"Red-Green-Blue 12-bit packed\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "784:     { GVSP_PIX_YCBCR2020_422_10, \"YCbCr 4:2:2 10-bit unpacked BT.2020\" },",
          "785:     { GVSP_PIX_YCBCR2020_422_10_CBYCRY, \"YCbCr 4:2:2 10-bit unpacked BT.2020\" },",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "674:     { GVSP_PIX_YCBCR709_12P_CBYCR, \"YCbCr 4:4:4 12-bit packed BT.709\" },",
          "675:     { GVSP_PIX_COORD3D_ABC12P, \"3D coordinate A-B-C 12-bit packed\" },",
          "676:     { GVSP_PIX_COORD3D_ABC12P_PLANAR, \"3D coordinate A-B-C 12-bit packed planar\" },",
          "677:     { GVSP_PIX_BGRA10P, \"Blue-Green-Red-alpha 10-bit packed\" },",
          "678:     { GVSP_PIX_RGBA10P, \"Red-Green-Blue-alpha 10-bit packed\" },",
          "679:     { GVSP_PIX_RGB10, \"Red-Green-Blue 10-bit unpacked\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "794:     { GVSP_PIX_YCBCR2020_12P_CBYCR, \"YCbCr 4:4:4 12-bit packed BT.2020\" },",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "697:     { GVSP_PIX_YCBCR709_12_CBYCR, \"YCbCr 4:4:4 12-bit unpacked BT.709\" },",
          "698:     { GVSP_PIX_COORD3D_ABC16, \"3D coordinate A-B-C 16-bit\" },",
          "699:     { GVSP_PIX_COORD3D_ABC16_PLANAR, \"3D coordinate A-B-C 16-bit planar\" },",
          "700:     { GVSP_PIX_BGRA10, \"Blue-Green-Red-alpha 10-bit unpacked\" },",
          "701:     { GVSP_PIX_BGRA12, \"Blue-Green-Red-alpha 12-bit unpacked\" },",
          "702:     { GVSP_PIX_BGRA14, \"Blue-Green-Red-alpha 14-bit unpacked\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "818:     { GVSP_PIX_YCBCR2020_10_CBYCR, \"YCbCr 4:4:4 10-bit unpacked BT.2020\" },",
          "819:     { GVSP_PIX_YCBCR2020_12_CBYCR, \"YCbCr 4:4:4 12-bit unpacked BT.2020\" },",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "726:     \"Top-Down\"",
          "727: };",
          "730: static int hf_gvsp_status = -1;",
          "731: static int hf_gvsp_blockid16 = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850: static const value_string gendc_payload_descriptor_flag_values[] = {",
          "851:         { 0, \"No Descriptor Data\" },",
          "852:         { 1, \"Final Descriptor Data\" },",
          "853:         { 2, \"Final Descriptor Data With Non-Descriptor Data\" },",
          "854:         { 3, \"Preliminary Descriptor Data\" },",
          "855:         { 0, NULL },",
          "856: };",
          "859: static const value_string gendc_header_type_values[] = {",
          "860:     { GENDC_HEADER_TYPE_CONTAINER , \"Container\" },",
          "861:     { GENDC_HEADER_TYPE_COMPONENT_HEADER , \"Component Header\" },",
          "862:     { GENDC_HEADER_TYPE_PART_CHUNK, \"Chunk\" },",
          "863:     { GENDC_HEADER_TYPE_PART_1D, \"1D Array\" },",
          "864:     { GENDC_HEADER_TYPE_PART_2D, \"2D Array\" },",
          "865:     { GENDC_HEADER_TYPE_PART_2D_JPEG, \"JPEG Image\" },",
          "866:     { GENDC_HEADER_TYPE_PART_2D_JPEG2000, \"JPEG 2000 Image\" },",
          "867:     { GENDC_HEADER_TYPE_PART_2D_H264, \"H.264 Image\" },",
          "868:     { 0, NULL },",
          "869: };",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "819: static int hf_gvsp_sc_zone30_direction = -1;",
          "820: static int hf_gvsp_sc_zone31_direction = -1;",
          "821: static int hf_gvsp_numparts = -1;",
          "823: static int hf_gvsp_partlength = -1;",
          "824: static int hf_gvsp_multi_part_source_id = -1;",
          "825: static int hf_gvsp_data_purpose_id = -1;",
          "",
          "[Removed Lines]",
          "822: static int hf_gvsp_multipartdatatype = -1;",
          "",
          "[Added Lines]",
          "963: static int hf_gvsp_multipart_data_type = -1;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "829: static int hf_gvsp_zoneinfo_multipart = -1;",
          "830: static int hf_gvsp_multi_part_part_id = -1;",
          "831: static int hf_gvsp_data_type_specific = -1;",
          "836: static const int *pixelformat_fields[] = {",
          "837:     &hf_gvsp_pixelcolor,",
          "",
          "[Removed Lines]",
          "832: static int hf_gvsp_chunkdatapayloadlengthex = -1;",
          "833: static int hf_gvsp_chunklayoutidex = -1;",
          "",
          "[Added Lines]",
          "973: static int hf_gvsp_chunk_data_payload_length_hex = -1;",
          "974: static int hf_gvsp_chunk_layout_id_hex = -1;",
          "977: static int hf_gvsp_gendc_leader_descriptor_size_v2_2 = -1;",
          "978: static int hf_gvsp_gendc_leader_flags_v2_2 = -1;",
          "979: static int hf_gvsp_gendc_leader_flags_preliminary_descriptor_v2_2 = -1;",
          "980: static int hf_gvsp_gendc_leader_flags_reserved_v2_2 = -1;",
          "981: static int hf_gvsp_gendc_payload_data_size_v2_2 = -1;",
          "982: static int hf_gvsp_gendc_payload_data_destination_offset_v2_2 = -1;",
          "983: static int hf_gvsp_gendc_payload_data_flags_v2_2 = -1;",
          "984: static int hf_gvsp_gendc_payload_data_flag_descriptor_flags_v2_2 = -1;",
          "985: static int hf_gvsp_gendc_payload_data_flag_start_of_descriptor_data_v2_2 = -1;",
          "986: static int hf_gvsp_gendc_payload_data_flag_end_of_descriptor_data_v2_2 = -1;",
          "987: static int hf_gvsp_gendc_payload_data_flags_reserved_v2_2 = -1;",
          "988: static int hf_gvsp_gendc_payload_flow_flags_v2_2 = -1;",
          "989: static int hf_gvsp_gendc_payload_flow_flag_first_packet_v2_2 = -1;",
          "990: static int hf_gvsp_gendc_payload_flow_flag_last_packet_v2_2 = -1;",
          "991: static int hf_gvsp_gendc_payload_flow_id_v2_2 = -1;",
          "992: static int hf_gvsp_gendc_container_header_signature_v2_2 = -1;",
          "993: static int hf_gvsp_gendc_container_header_version_major_v2_2 = -1;",
          "994: static int hf_gvsp_gendc_container_header_version_minor_v2_2 = -1;",
          "995: static int hf_gvsp_gendc_container_header_version_sub_minor_v2_2 = -1;",
          "996: static int hf_gvsp_gendc_container_header_type_v2_2 = -1;",
          "997: static int hf_gvsp_gendc_container_header_flags_v2_2 = -1;",
          "998: static int hf_gvsp_gendc_container_header_flags_timestamp_ptp_v2_2 = -1;",
          "999: static int hf_gvsp_gendc_container_header_flags_component_invalid_v2_2 = -1;",
          "1000: static int hf_gvsp_gendc_container_header_flags_reserved_v2_2 = -1;",
          "1001: static int hf_gvsp_gendc_container_header_size_v2_2 = -1;",
          "1002: static int hf_gvsp_gendc_container_header_id_v2_2 = -1;",
          "1003: static int hf_gvsp_gendc_container_header_variable_fields_v2_2 = -1;",
          "1004: static int hf_gvsp_gendc_container_header_variable_fields_data_size_v2_2 = -1;",
          "1005: static int hf_gvsp_gendc_container_header_variable_fields_size_x_v2_2 = -1;",
          "1006: static int hf_gvsp_gendc_container_header_variable_fields_size_y_v2_2 = -1;",
          "1007: static int hf_gvsp_gendc_container_header_variable_fields_region_offset_v2_2 = -1;",
          "1008: static int hf_gvsp_gendc_container_header_variable_fields_format_v2_2 = -1;",
          "1009: static int hf_gvsp_gendc_container_header_variable_fields_timestamp_v2_2 = -1;",
          "1010: static int hf_gvsp_gendc_container_header_variable_fields_component_count_v2_2 = -1;",
          "1011: static int hf_gvsp_gendc_container_header_variable_fields_component_invalid_v2_2 = -1;",
          "1012: static int hf_gvsp_gendc_container_header_variable_fields_reserved_v2_2 = -1;",
          "1013: static int hf_gvsp_gendc_container_header_data_size_v2_2 = -1;",
          "1014: static int hf_gvsp_gendc_container_header_data_offset_v2_2 = -1;",
          "1015: static int hf_gvsp_gendc_container_header_descriptor_size_v2_2 = -1;",
          "1016: static int hf_gvsp_gendc_container_header_component_count_v2_2 = -1;",
          "1017: static int hf_gvsp_gendc_container_header_component_offset_v2_2 = -1;",
          "1018: static int hf_gvsp_gendc_component_header_flags_v2_2 = -1;",
          "1019: static int hf_gvsp_gendc_component_header_flags_invalid_v2_2 = -1;",
          "1020: static int hf_gvsp_gendc_component_header_flags_reserved_v2_2 = -1;",
          "1021: static int hf_gvsp_gendc_component_header_group_id_v2_2 = -1;",
          "1022: static int hf_gvsp_gendc_component_header_source_id_v2_2 = -1;",
          "1023: static int hf_gvsp_gendc_component_header_region_id_v2_2 = -1;",
          "1024: static int hf_gvsp_gendc_component_header_type_id_v2_2 = -1;",
          "1025: static int hf_gvsp_gendc_component_header_part_count_v2_2 = -1;",
          "1026: static int hf_gvsp_gendc_part_header_flow_offset_v2_2 = -1;",
          "1027: static int hf_gvsp_gendc_part_header_type_specific_info_v2_2 = -1;",
          "1028: static int hf_gvsp_gendc_part_header_1D_size_v2_2 = -1;",
          "1029: static int hf_gvsp_gendc_part_header_1D_padding_v2_2 = -1;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "918:     NULL",
          "919: };",
          "922:     \\brief Dissects the image AOI",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1116: static const int *gendc_leader_flags_fields[] = {",
          "1117:     &hf_gvsp_gendc_leader_flags_reserved_v2_2,",
          "1118:     &hf_gvsp_gendc_leader_flags_preliminary_descriptor_v2_2,",
          "1119:     NULL",
          "1120: };",
          "1122: static const int *gendc_payload_data_flags_fields[] = {",
          "1123:     &hf_gvsp_gendc_payload_data_flag_descriptor_flags_v2_2,",
          "1124:     &hf_gvsp_gendc_payload_data_flag_start_of_descriptor_data_v2_2,",
          "1125:     &hf_gvsp_gendc_payload_data_flag_end_of_descriptor_data_v2_2,",
          "1126:     &hf_gvsp_gendc_payload_data_flags_reserved_v2_2,",
          "1127:     NULL",
          "1128: };",
          "1130: static const int *gendc_payload_flow_flags_fields[] = {",
          "1131:     &hf_gvsp_gendc_payload_flow_flag_first_packet_v2_2,",
          "1132:     &hf_gvsp_gendc_payload_flow_flag_last_packet_v2_2,",
          "1133:     NULL",
          "1134: };",
          "1136: static const int *gendc_container_header_flags_fields[] = {",
          "1137:     &hf_gvsp_gendc_container_header_flags_timestamp_ptp_v2_2,",
          "1138:     &hf_gvsp_gendc_container_header_flags_component_invalid_v2_2,",
          "1139:     &hf_gvsp_gendc_container_header_flags_reserved_v2_2,",
          "1140:     NULL",
          "1141: };",
          "1143: static const int *gendc_container_header_variable_fields_fields[] = {",
          "1144:     &hf_gvsp_gendc_container_header_variable_fields_data_size_v2_2,",
          "1145:     &hf_gvsp_gendc_container_header_variable_fields_size_x_v2_2,",
          "1146:     &hf_gvsp_gendc_container_header_variable_fields_size_y_v2_2,",
          "1147:     &hf_gvsp_gendc_container_header_variable_fields_region_offset_v2_2,",
          "1148:     &hf_gvsp_gendc_container_header_variable_fields_format_v2_2,",
          "1149:     &hf_gvsp_gendc_container_header_variable_fields_timestamp_v2_2,",
          "1150:     &hf_gvsp_gendc_container_header_variable_fields_component_count_v2_2,",
          "1151:     &hf_gvsp_gendc_container_header_variable_fields_component_invalid_v2_2,",
          "1152:     &hf_gvsp_gendc_container_header_variable_fields_reserved_v2_2,",
          "1153:     NULL",
          "1154: };",
          "1156: static const int *gendc_component_header_flags_fields[] = {",
          "1157:     &hf_gvsp_gendc_component_header_flags_invalid_v2_2,",
          "1158:     &hf_gvsp_gendc_component_header_flags_reserved_v2_2,",
          "1159:     NULL",
          "1160: };",
          "1163:     \\brief Dissects the image dimensions",
          "1166: static void dissect_image_dimensions(proto_tree *gvsp_tree, tvbuff_t *tvb, gint offset, const guint encoding)",
          "1167: {",
          "1169:     proto_tree_add_item(gvsp_tree, hf_gvsp_sizex, tvb, offset, 4, encoding);",
          "1172:     proto_tree_add_item(gvsp_tree, hf_gvsp_sizey, tvb, offset + 4, 4, encoding);",
          "1175:     proto_tree_add_item(gvsp_tree, hf_gvsp_paddingx, tvb, offset + 8, 2, encoding);",
          "1178:     proto_tree_add_item(gvsp_tree, hf_gvsp_paddingy, tvb, offset + 10, 2, encoding);",
          "1179: }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1009:         proto_tree* gvsp_part_tree = proto_tree_add_subtree(gvsp_tree, tvb, offset + 4 + i * GVSP_SIZE_OF_PART_INFO_TRAILER, GVSP_SIZE_OF_PART_INFO_TRAILER, ett_gvsp_partinfo_trailer, NULL, \"Part Specific Data\");",
          "1015:         proto_tree_add_item(gvsp_part_tree, hf_gvsp_partlength, tvb, offset + 6 + i * GVSP_SIZE_OF_PART_INFO_TRAILER, 6, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "1012:         proto_tree_add_item(gvsp_part_tree, hf_gvsp_multipartdatatype, tvb, offset + 4 + i * GVSP_SIZE_OF_PART_INFO_TRAILER, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1272:         proto_tree_add_item(gvsp_part_tree, hf_gvsp_multipart_data_type, tvb, offset + 4 + i * GVSP_SIZE_OF_PART_INFO_TRAILER, 2, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1172:     proto_tree_add_item(gvsp_tree, hf_gvsp_sizey, tvb, offset + 8, 4, ENC_BIG_ENDIAN);",
          "1178:     return 16;",
          "",
          "[Removed Lines]",
          "1175:     proto_tree_add_item(gvsp_tree, hf_gvsp_chunklayoutidex, tvb, offset + 12, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1435:     proto_tree_add_item(gvsp_tree, hf_gvsp_chunk_layout_id_hex, tvb, offset + 12, 4, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1216:  \\brief Dissects a H264 leader",
          "1219: static gint dissect_h264_leader(proto_tree *gvsp_tree, tvbuff_t *tvb, packet_info *pinfo _U_, gint offset)",
          "1220: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1479: static void dissect_h264_leader_common(proto_tree *gvsp_tree, tvbuff_t *tvb, gint offset, const guint encoding)",
          "1480: {",
          "1482:     proto_tree_add_item(gvsp_tree, hf_gvsp_profileidc, tvb, offset, 1, encoding);",
          "1485:     proto_tree_add_bitmask(gvsp_tree, tvb, offset + 1, hf_gvsp_cs, ett_gvsp_cs,",
          "1486:         cs_fields, encoding);",
          "1489:     proto_tree_add_item(gvsp_tree, hf_gvsp_levelidc, tvb, offset + 2, 1, encoding);",
          "1492:     proto_tree_add_item(gvsp_tree, hf_gvsp_sropinterleavingdepth, tvb, offset + 3, 2, encoding);",
          "1495:     proto_tree_add_item(gvsp_tree, hf_gvsp_sropmaxdondiff, tvb, offset + 5, 2, encoding);",
          "1498:     proto_tree_add_item(gvsp_tree, hf_gvsp_sropdeintbufreq, tvb, offset + 7, 4, encoding);",
          "1501:     proto_tree_add_item(gvsp_tree, hf_gvsp_sropinitbuftime, tvb, offset + 11, 4, encoding);",
          "1502: }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1235:     proto_tree_add_item(gvsp_tree, hf_gvsp_packetsize, tvb, offset + 14, 2, ENC_BIG_ENDIAN);",
          "1260:     return 32;",
          "",
          "[Removed Lines]",
          "1238:     proto_tree_add_item(gvsp_tree, hf_gvsp_profileidc, tvb, offset + 17, 1, ENC_BIG_ENDIAN);",
          "1241:     proto_tree_add_bitmask(gvsp_tree, tvb, offset + 18, hf_gvsp_cs, ett_gvsp_cs,",
          "1242:                            cs_fields, ENC_BIG_ENDIAN);",
          "1245:     proto_tree_add_item(gvsp_tree, hf_gvsp_levelidc, tvb, offset + 19, 1, ENC_BIG_ENDIAN);",
          "1248:     proto_tree_add_item(gvsp_tree, hf_gvsp_sropinterleavingdepth, tvb, offset + 20, 2, ENC_BIG_ENDIAN);",
          "1251:     proto_tree_add_item(gvsp_tree, hf_gvsp_sropmaxdondiff, tvb, offset + 22, 2, ENC_BIG_ENDIAN);",
          "1254:     proto_tree_add_item(gvsp_tree, hf_gvsp_sropdeintbufreq, tvb, offset + 24, 4, ENC_BIG_ENDIAN);",
          "1257:     proto_tree_add_item(gvsp_tree, hf_gvsp_sropinitbuftime, tvb, offset + 28, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1522:     dissect_h264_leader_common(gvsp_tree, tvb, offset + 17, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1320:             ett_gvsp_partinfo_leader, NULL, \"Part Specific Data\");",
          "1326:         proto_tree_add_item(gvsp_part_tree, hf_gvsp_partlength, tvb, offset + 14 + i * GVSP_SIZE_OF_PART_INFO_LEADER, 6, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "1323:         proto_tree_add_item(gvsp_part_tree, hf_gvsp_multipartdatatype, tvb, offset + 12 + i * GVSP_SIZE_OF_PART_INFO_LEADER, 2, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1588:         proto_tree_add_item(gvsp_part_tree, hf_gvsp_multipart_data_type, tvb, offset + 12 + i * GVSP_SIZE_OF_PART_INFO_LEADER, 2, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1401:     return 12 + part_count * GVSP_SIZE_OF_PART_INFO_LEADER;",
          "1402: }",
          "1406:     \\brief Dissects a generic trailer (contains just the payload type)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1670:     \\brief Dissects the GenDC leader",
          "1673: static gint dissect_gendc_leader(proto_tree *gvsp_tree, tvbuff_t *tvb, packet_info *pinfo _U_, gint offset)",
          "1674: {",
          "1676:     proto_tree_add_item(gvsp_tree, hf_gvsp_payloadtype, tvb, offset + 2, 2, ENC_BIG_ENDIAN);",
          "1679:     proto_tree_add_item(gvsp_tree, hf_gvsp_timestamp, tvb, offset + 4, 8, ENC_BIG_ENDIAN);",
          "1682:     proto_tree_add_item(gvsp_tree, hf_gvsp_payloaddatasize, tvb, offset + 12, 8, ENC_BIG_ENDIAN);",
          "1685:     proto_tree_add_bitmask(gvsp_tree, tvb, offset + 20, hf_gvsp_gendc_leader_flags_v2_2,",
          "1686:         ett_gvsp_gendc_leader_flags, gendc_leader_flags_fields, ENC_BIG_ENDIAN);",
          "1689:     proto_tree_add_item(gvsp_tree, hf_gvsp_gendc_leader_descriptor_size_v2_2, tvb, offset + 24, 4, ENC_BIG_ENDIAN);",
          "1692:     return 28;",
          "1693: }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1423: static gint dissect_extra_chunk_info(proto_tree *gvsp_tree, tvbuff_t *tvb, packet_info *pinfo _U_, gint offset)",
          "1424: {",
          "1432:     return 8;",
          "",
          "[Removed Lines]",
          "1426:     proto_tree_add_item(gvsp_tree, hf_gvsp_chunkdatapayloadlengthex, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1429:     proto_tree_add_item(gvsp_tree, hf_gvsp_chunklayoutidex, tvb, offset + 4, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "1717:     proto_tree_add_item(gvsp_tree, hf_gvsp_chunk_data_payload_length_hex, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1720:     proto_tree_add_item(gvsp_tree, hf_gvsp_chunk_layout_id_hex, tvb, offset + 4, 4, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1514:     }",
          "1515: }",
          "1518:     \\brief Dissects an all in packet",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1809:     \\brief Dissects a payload packet for GenDC",
          "1812: static void dissect_packet_payload_gendc(proto_tree *gvsp_tree, tvbuff_t *tvb, packet_info *pinfo _U_, gint offset, gvsp_packet_info *info)",
          "1813: {",
          "1814:     if (status_with_payload(info) && tvb_reported_length_remaining(tvb, offset))",
          "1815:     {",
          "1816:         const guint8 data_flags = tvb_get_guint8(tvb, offset + 12);",
          "1819:         proto_tree_add_item(gvsp_tree, hf_gvsp_gendc_payload_data_size_v2_2, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1822:         proto_tree_add_item(gvsp_tree, hf_gvsp_gendc_payload_data_destination_offset_v2_2, tvb, offset + 4, 8, ENC_BIG_ENDIAN);",
          "1825:         proto_tree_add_bitmask(gvsp_tree, tvb, offset + 12, hf_gvsp_gendc_payload_data_flags_v2_2,",
          "1826:             ett_gvsp_gendc_payload_data_flags, gendc_payload_data_flags_fields, ENC_BIG_ENDIAN);",
          "1829:         proto_tree_add_bitmask(gvsp_tree, tvb, offset + 13, hf_gvsp_gendc_payload_flow_flags_v2_2,",
          "1830:             ett_gvsp_gendc_payload_flow_flags, gendc_payload_flow_flags_fields, ENC_BIG_ENDIAN);",
          "1833:         proto_tree_add_item(gvsp_tree, hf_gvsp_gendc_payload_flow_id_v2_2, tvb, offset + 14, 2, ENC_BIG_ENDIAN);",
          "1835:         if ((data_flags & GENDC_DESCRIPTOR_FLAG) && (data_flags & GENDC_DESCRIPTOR_START_FLAG))",
          "1836:         {",
          "1837:             const guint32 component_count = tvb_get_guint32(tvb, offset + 68, ENC_LITTLE_ENDIAN);",
          "1838:             proto_tree* gvsp_gendc_container_descriptor_tree = proto_tree_add_subtree(gvsp_tree, tvb, offset + 16, -1, ett_gvsp_gendc_container_descriptor, NULL, \"GenDC Container Descriptor\");",
          "1841:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_signature_v2_2, tvb, offset + 16, 4, ENC_ASCII|ENC_NA);",
          "1844:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_version_major_v2_2, tvb, offset + 20, 1, ENC_LITTLE_ENDIAN);",
          "1847:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_version_minor_v2_2, tvb, offset + 21, 1, ENC_LITTLE_ENDIAN);",
          "1850:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_version_sub_minor_v2_2, tvb, offset + 22, 1, ENC_LITTLE_ENDIAN);",
          "1853:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_type_v2_2, tvb, offset + 24, 2, ENC_LITTLE_ENDIAN);",
          "1856:             proto_tree_add_bitmask(gvsp_gendc_container_descriptor_tree, tvb, offset + 26, hf_gvsp_gendc_container_header_flags_v2_2,",
          "1857:                 ett_gvsp_gendc_container_header_flags, gendc_container_header_flags_fields, ENC_LITTLE_ENDIAN);",
          "1860:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_size_v2_2, tvb, offset + 28, 4, ENC_LITTLE_ENDIAN);",
          "1863:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_id_v2_2, tvb, offset + 32, 8, ENC_LITTLE_ENDIAN);",
          "1866:             proto_tree_add_bitmask(gvsp_gendc_container_descriptor_tree, tvb, offset + 40, hf_gvsp_gendc_container_header_variable_fields_v2_2,",
          "1867:                 ett_gvsp_gendc_container_header_variable_fields, gendc_container_header_variable_fields_fields, ENC_LITTLE_ENDIAN);",
          "1870:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_data_size_v2_2, tvb, offset + 48, 8, ENC_LITTLE_ENDIAN);",
          "1873:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_data_offset_v2_2, tvb, offset + 56, 8, ENC_LITTLE_ENDIAN);",
          "1876:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_descriptor_size_v2_2, tvb, offset + 64, 4, ENC_LITTLE_ENDIAN);",
          "1879:             proto_tree_add_item(gvsp_gendc_container_descriptor_tree, hf_gvsp_gendc_container_header_component_count_v2_2, tvb, offset + 68, 4, ENC_LITTLE_ENDIAN);",
          "1881:             for (guint32 i = 0; i < component_count; i++)",
          "1882:             {",
          "1883:                 guint component_offset = offset + 16 + (gint)tvb_get_guint64(tvb, offset + 72 + 8 * i, ENC_LITTLE_ENDIAN);",
          "1884:                 guint16 part_count = tvb_get_guint16(tvb, component_offset + 46, ENC_LITTLE_ENDIAN);",
          "1886:                 proto_tree* gvsp_gendc_component_header_tree = proto_tree_add_subtree(gvsp_gendc_container_descriptor_tree, tvb, offset + 16 + component_offset, -1, ett_gvsp_gendc_component_header, NULL, \"Component Header\");",
          "1889:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_gendc_container_header_component_offset_v2_2, tvb, offset + 72 + 8 * i, 8, ENC_LITTLE_ENDIAN);",
          "1892:                     2 :  0 type",
          "1893:                     2 :  2 flags",
          "1894:                     4 :  4 header size",
          "1895:                     2 :  8 reserved",
          "1896:                     2 : 10 group id",
          "1897:                     2 : 12 source id",
          "1898:                     2 : 14 region id",
          "1899:                     4 : 16 region offset x",
          "1900:                     4 : 20 region offset y",
          "1901:                     8 : 24 timestamp",
          "1902:                     8 : 32 type id",
          "1903:                     4 : 40 format",
          "1904:                     2 : 44 reserved",
          "1905:                     2 : 46 part count",
          "1909:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_gendc_container_header_type_v2_2, tvb, component_offset, 2, ENC_LITTLE_ENDIAN);",
          "1912:                 proto_tree_add_bitmask(gvsp_gendc_component_header_tree, tvb, component_offset + 2, hf_gvsp_gendc_component_header_flags_v2_2,",
          "1913:                     ett_gvsp_gendc_component_header_flags, gendc_component_header_flags_fields, ENC_LITTLE_ENDIAN);",
          "1916:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_gendc_container_header_size_v2_2, tvb, component_offset + 4, 4, ENC_LITTLE_ENDIAN);",
          "1919:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_gendc_component_header_group_id_v2_2, tvb, component_offset + 10, 2, ENC_LITTLE_ENDIAN);",
          "1922:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_gendc_component_header_source_id_v2_2, tvb, component_offset + 12, 2, ENC_LITTLE_ENDIAN);",
          "1925:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_gendc_component_header_region_id_v2_2, tvb, component_offset + 14, 2, ENC_LITTLE_ENDIAN);",
          "1928:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_offsetx, tvb, component_offset + 16, 4, ENC_LITTLE_ENDIAN);",
          "1931:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_offsety, tvb, component_offset + 20, 4, ENC_LITTLE_ENDIAN);",
          "1934:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_timestamp, tvb, component_offset + 24, 8, ENC_LITTLE_ENDIAN);",
          "1937:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_gendc_component_header_type_id_v2_2, tvb, component_offset + 32, 8, ENC_LITTLE_ENDIAN);",
          "1940:                 proto_tree_add_bitmask(gvsp_gendc_component_header_tree, tvb, component_offset + 40, hf_gvsp_pixelformat, ett_gvsp_pixelformat,",
          "1941:                     pixelformat_fields, ENC_LITTLE_ENDIAN);",
          "1944:                 proto_tree_add_item(gvsp_gendc_component_header_tree, hf_gvsp_gendc_component_header_part_count_v2_2, tvb, component_offset + 46, 2, ENC_LITTLE_ENDIAN);",
          "1946:                 for (guint16 j = 0; j < part_count; j++)",
          "1947:                 {",
          "1948:                     guint part_offset = offset + 16 + (gint)tvb_get_guint64(tvb, component_offset + 48 + 8 * j, ENC_LITTLE_ENDIAN);",
          "1949:                     guint16 part_type = tvb_get_guint16(tvb, part_offset, ENC_LITTLE_ENDIAN);",
          "1951:                     proto_tree* gvsp_gendc_part_header_tree = proto_tree_add_subtree(gvsp_gendc_component_header_tree, tvb, offset + 16 + part_offset, -1, ett_gvsp_gendc_part_header, NULL, \"Part Header\");",
          "1954:                         2:0 type",
          "1955:                         2:2 flags",
          "1956:                         4:4 header size",
          "1957:                         4:8 format",
          "1958:                         2:12 reserved",
          "1959:                         2:14 flow id",
          "1960:                         8:16 flow offset",
          "1961:                         8:24 data size",
          "1962:                         8:32 data offset",
          "1966:                     proto_tree_add_item(gvsp_gendc_part_header_tree, hf_gvsp_gendc_container_header_type_v2_2, tvb, part_offset, 2, ENC_LITTLE_ENDIAN);",
          "1969:                     proto_tree_add_item(gvsp_gendc_part_header_tree, hf_gvsp_gendc_container_header_size_v2_2, tvb, part_offset + 4, 4, ENC_LITTLE_ENDIAN);",
          "1972:                     proto_tree_add_bitmask(gvsp_gendc_part_header_tree, tvb, part_offset + 8, hf_gvsp_pixelformat, ett_gvsp_pixelformat, pixelformat_fields, ENC_LITTLE_ENDIAN);",
          "1975:                     proto_tree_add_item(gvsp_gendc_part_header_tree, hf_gvsp_gendc_payload_flow_id_v2_2, tvb, part_offset + 14, 2, ENC_LITTLE_ENDIAN);",
          "1978:                     proto_tree_add_item(gvsp_gendc_part_header_tree, hf_gvsp_gendc_part_header_flow_offset_v2_2, tvb, part_offset + 16, 8, ENC_LITTLE_ENDIAN);",
          "1981:                     proto_tree_add_item(gvsp_gendc_part_header_tree, hf_gvsp_gendc_container_header_data_size_v2_2, tvb, part_offset + 24, 8, ENC_LITTLE_ENDIAN);",
          "1984:                     proto_tree_add_item(gvsp_gendc_part_header_tree, hf_gvsp_gendc_container_header_data_offset_v2_2, tvb, part_offset + 32, 8, ENC_LITTLE_ENDIAN);",
          "1986:                     switch (part_type)",
          "1987:                     {",
          "1988:                         case GENDC_HEADER_TYPE_PART_CHUNK:",
          "1989:                             break;",
          "1990:                         case GENDC_HEADER_TYPE_PART_1D:",
          "1992:                             proto_tree_add_item(gvsp_gendc_part_header_tree, hf_gvsp_gendc_part_header_1D_size_v2_2, tvb, part_offset + 40, 8, ENC_LITTLE_ENDIAN);",
          "1995:                             proto_tree_add_item(gvsp_gendc_part_header_tree, hf_gvsp_gendc_part_header_1D_padding_v2_2, tvb, part_offset + 48, 4, ENC_LITTLE_ENDIAN);",
          "1998:                             proto_tree_add_item(gvsp_gendc_part_header_tree, hf_gvsp_gendc_part_header_type_specific_info_v2_2, tvb, part_offset + 56, 8, ENC_LITTLE_ENDIAN);",
          "1999:                             break;",
          "2000:                         case GENDC_HEADER_TYPE_PART_2D:",
          "2001:                         case GENDC_HEADER_TYPE_PART_2D_JPEG:",
          "2002:                         case GENDC_HEADER_TYPE_PART_2D_JPEG2000:",
          "2003:                             dissect_image_dimensions(gvsp_gendc_part_header_tree, tvb, part_offset + 40, ENC_LITTLE_ENDIAN);",
          "2004:                             break;",
          "2005:                         case GENDC_HEADER_TYPE_PART_2D_H264:",
          "2006:                             dissect_image_dimensions(gvsp_gendc_part_header_tree, tvb, part_offset + 40, ENC_LITTLE_ENDIAN);",
          "2007:                             dissect_h264_leader_common(gvsp_gendc_part_header_tree, tvb, part_offset + 52, ENC_LITTLE_ENDIAN);",
          "2008:                             break;",
          "2009:                     }",
          "2010:                 }",
          "2011:             }",
          "2012:         }",
          "2013:         else",
          "2014:         {",
          "2016:             proto_tree_add_item(gvsp_tree, hf_gvsp_payloaddata, tvb, offset + 16, -1, ENC_NA);",
          "2017:         }",
          "2018:     }",
          "2019: }",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1661:         dissect_multi_part_leader(gvsp_tree, tvb, pinfo, offset);",
          "1662:         break;",
          "1664:     default:",
          "1665:         break;",
          "1666:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2172:     case GVSP_PAYLOAD_GENDC:",
          "2173:         dissect_gendc_leader(gvsp_tree, tvb, pinfo, offset);",
          "2174:         break;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1693:     case GVSP_PAYLOAD_JPEG:",
          "1694:     case GVSP_PAYLOAD_JPEG2000:",
          "1695:     case GVSP_PAYLOAD_H264:",
          "1696:         offset += dissect_generic_trailer(gvsp_tree, tvb, pinfo, offset);",
          "1697:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2208:     case GVSP_PAYLOAD_GENDC:",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1863:         dissect_packet_payload_multipart(gvsp_tree, tvb, pinfo, offset, &info);",
          "1864:         return tvb_captured_length(tvb);",
          "1866:     default:",
          "1867:         break;",
          "1868:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2379:     case GVSP_PACKET_PAYLOAD_GENDC:",
          "2380:         dissect_packet_payload_gendc(gvsp_tree, tvb, pinfo, offset, &info);",
          "2381:         return tvb_captured_length(tvb);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2514:         NULL, HFILL",
          "2515:         }},",
          "2518:         { \"Data Type\", \"gvsp.multipartdatatype\",",
          "2519:         FT_UINT16, BASE_HEX|BASE_EXT_STRING, &multipartdatatypenames_ext, 0,",
          "2520:         NULL, HFILL",
          "",
          "[Removed Lines]",
          "2517:         {& hf_gvsp_multipartdatatype,",
          "",
          "[Added Lines]",
          "3034:         {& hf_gvsp_multipart_data_type,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2574:         NULL, HFILL",
          "2575:         }},",
          "2579:         FT_UINT32, BASE_HEX_DEC, NULL, 0x0,",
          "2580:         NULL, HFILL",
          "2581:         }},",
          "2585:         FT_UINT32, BASE_HEX_DEC, NULL, 0x0,",
          "2586:         NULL, HFILL",
          "2587:         }},",
          "2588:     };",
          "2590:     static gint *ett[] = {",
          "",
          "[Removed Lines]",
          "2577:         {& hf_gvsp_chunkdatapayloadlengthex,",
          "2578:         { \"Chunk Data Payload Length\", \"gvsp.chunkdatapayloadlengthex\",",
          "2583:         {& hf_gvsp_chunklayoutidex,",
          "2584:         { \"Chunk Layout ID\", \"gvsp.chunklayoutidex\",",
          "",
          "[Added Lines]",
          "3094:         {& hf_gvsp_chunk_data_payload_length_hex,",
          "3095:         { \"Chunk Data Payload Length\", \"gvsp.chunkdatapayloadlengthhex\",",
          "3100:         {& hf_gvsp_chunk_layout_id_hex,",
          "3101:         { \"Chunk Layout ID\", \"gvsp.chunklayoutidhex\",",
          "3107:         { &hf_gvsp_gendc_leader_descriptor_size_v2_2,",
          "3108:         { \"GenDC Descriptor Size\", \"gvsp.gendcdescriptorsize\",",
          "3109:         FT_UINT32, BASE_HEX_DEC, NULL, 0x0,",
          "3110:         NULL, HFILL",
          "3111:         } },",
          "3113:         { &hf_gvsp_gendc_leader_flags_v2_2,",
          "3114:         { \"Flags\", \"gvsp.gendc.leader.flags\",",
          "3115:         FT_UINT8, BASE_HEX, NULL, 0,",
          "3116:         NULL, HFILL",
          "3117:         } },",
          "3119:         { &hf_gvsp_gendc_leader_flags_preliminary_descriptor_v2_2,",
          "3120:         { \"Preliminary Descriptor\", \"gvsp.gendc.leader.flags.preliminarydescriptor\",",
          "3121:         FT_UINT8, BASE_HEX, NULL, 0x80,",
          "3122:         NULL, HFILL",
          "3123:         } },",
          "3125:         { &hf_gvsp_gendc_leader_flags_reserved_v2_2,",
          "3126:         { \"Reserved\", \"gvsp.gendc.leader.flags.reserved\",",
          "3127:         FT_UINT8, BASE_HEX, NULL, 0x7F,",
          "3128:         NULL, HFILL",
          "3129:         } },",
          "3131:         { &hf_gvsp_gendc_payload_data_size_v2_2,",
          "3132:         { \"Data Size\", \"gvsp.gendc.payload.datasize\",",
          "3133:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3134:         NULL, HFILL",
          "3135:         } },",
          "3137:         { &hf_gvsp_gendc_payload_data_destination_offset_v2_2,",
          "3138:         { \"Data Destination Offset\", \"gvsp.gendc.payload.datadestinationoffset\",",
          "3139:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3140:         NULL, HFILL",
          "3141:         } },",
          "3143:         { &hf_gvsp_gendc_payload_data_flags_v2_2,",
          "3144:         { \"Data Flags\", \"gvsp.gendc.payload.dataflags\",",
          "3145:         FT_UINT8, BASE_HEX, NULL, 0xFF,",
          "3146:         NULL, HFILL",
          "3147:         } },",
          "3149:         { &hf_gvsp_gendc_payload_data_flag_descriptor_flags_v2_2,",
          "3150:         { \"Descriptor Data Present\", \"gvsp.gendc.payload.dataflags.descriptordatapresent\",",
          "3151:         FT_UINT8, BASE_HEX, VALS(gendc_payload_descriptor_flag_values), GENDC_DESCRIPTOR_FLAG,",
          "3152:         NULL, HFILL",
          "3153:         } },",
          "3155:         { &hf_gvsp_gendc_payload_data_flag_start_of_descriptor_data_v2_2,",
          "3156:         { \"Start Of Descriptor Data\", \"gvsp.gendc.payload.dataflags.startofdescriptordata\",",
          "3157:         FT_UINT8, BASE_HEX, NULL, GENDC_DESCRIPTOR_START_FLAG,",
          "3158:         NULL, HFILL",
          "3159:         } },",
          "3161:         { &hf_gvsp_gendc_payload_data_flag_end_of_descriptor_data_v2_2,",
          "3162:         { \"End Of Descriptor Data\", \"gvsp.gendc.payload.dataflags.endofdescriptordata\",",
          "3163:         FT_UINT8, BASE_HEX, NULL, GENDC_DESCRIPTOR_END_FLAG,",
          "3164:         NULL, HFILL",
          "3165:         } },",
          "3167:         { &hf_gvsp_gendc_payload_data_flags_reserved_v2_2,",
          "3168:         { \"Reserved\", \"gvsp.gendc.payload.dataflags.reserved\",",
          "3169:         FT_UINT8, BASE_HEX, NULL, 0x0F,",
          "3170:         NULL, HFILL",
          "3171:         } },",
          "3173:         { &hf_gvsp_gendc_payload_flow_flags_v2_2,",
          "3174:         { \"Flow Flags\", \"gvsp.gendc.payload.flowflags\",",
          "3175:         FT_UINT8, BASE_HEX, NULL, 0xFF,",
          "3176:         NULL, HFILL",
          "3177:         } },",
          "3179:         { &hf_gvsp_gendc_payload_flow_flag_first_packet_v2_2,",
          "3180:         { \"First Packet With Current Flow ID\", \"gvsp.gendc.payload.flowflags.firstpacketwithcurrentflow\",",
          "3181:         FT_UINT8, BASE_HEX, NULL, 0x80,",
          "3182:         NULL, HFILL",
          "3183:         } },",
          "3185:         { &hf_gvsp_gendc_payload_flow_flag_last_packet_v2_2,",
          "3186:         { \"Last Packet With Current Flow ID\", \"gvsp.gendc.payload.flowflags.lastpacketwithcurrentflow\",",
          "3187:         FT_UINT8, BASE_HEX, NULL, 0x40,",
          "3188:         NULL, HFILL",
          "3189:         } },",
          "3191:         { &hf_gvsp_gendc_payload_flow_id_v2_2,",
          "3192:         { \"Flow ID\", \"gvsp.gendc.payload.flowid\",",
          "3193:         FT_UINT16, BASE_DEC, NULL, 0x0,",
          "3194:         NULL, HFILL",
          "3195:         } },",
          "3197:         { &hf_gvsp_gendc_container_header_signature_v2_2,",
          "3198:         { \"Signature\", \"gvsp.gendc.container.header.signature\",",
          "3199:         FT_STRINGZ, BASE_NONE, NULL, 0x0,",
          "3200:         NULL, HFILL",
          "3201:         } },",
          "3203:         { &hf_gvsp_gendc_container_header_version_major_v2_2,",
          "3204:         { \"Major Version\", \"gvsp.gendc.container.header.majorversion\",",
          "3205:         FT_UINT8, BASE_DEC, NULL, 0x0,",
          "3206:         NULL, HFILL",
          "3207:         } },",
          "3209:         { &hf_gvsp_gendc_container_header_version_minor_v2_2,",
          "3210:         { \"Minor Version\", \"gvsp.gendc.container.header.minorversion\",",
          "3211:         FT_UINT8, BASE_DEC, NULL, 0x0,",
          "3212:         NULL, HFILL",
          "3213:         } },",
          "3215:         { &hf_gvsp_gendc_container_header_version_sub_minor_v2_2,",
          "3216:         { \"Sub Minor Version\", \"gvsp.gendc.container.header.subminorversion\",",
          "3217:         FT_UINT8, BASE_DEC, NULL, 0x0,",
          "3218:         NULL, HFILL",
          "3219:         } },",
          "3221:         { &hf_gvsp_gendc_container_header_type_v2_2,",
          "3222:         { \"Header Type\", \"gvsp.gendc.container.header.type\",",
          "3223:         FT_UINT16, BASE_HEX, VALS(gendc_header_type_values), 0x0,",
          "3224:         NULL, HFILL",
          "3225:         } },",
          "3227:         { &hf_gvsp_gendc_container_header_flags_v2_2,",
          "3228:         { \"Flags\", \"gvsp.gendc.container.header.flags\",",
          "3229:         FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3230:         NULL, HFILL",
          "3231:         } },",
          "3233:         { &hf_gvsp_gendc_container_header_flags_timestamp_ptp_v2_2,",
          "3234:         { \"Timestamp PTP\", \"gvsp.gendc.container.header.flags.timestampptp\",",
          "3235:         FT_UINT16, BASE_HEX, NULL, 0x80,",
          "3236:         NULL, HFILL",
          "3237:         } },",
          "3239:         { &hf_gvsp_gendc_container_header_flags_component_invalid_v2_2,",
          "3240:         { \"Component Invalid\", \"gvsp.gendc.container.header.flags.componentinvalid\",",
          "3241:         FT_UINT16, BASE_HEX, NULL, 0x40,",
          "3242:         NULL, HFILL",
          "3243:         } },",
          "3245:         { &hf_gvsp_gendc_container_header_flags_reserved_v2_2,",
          "3246:         { \"Reserved\", \"gvsp.gendc.container.header.flags.reserved\",",
          "3247:         FT_UINT16, BASE_HEX, NULL, 0x3F,",
          "3248:         NULL, HFILL",
          "3249:         } },",
          "3251:         { &hf_gvsp_gendc_component_header_flags_reserved_v2_2,",
          "3252:         { \"Reserved\", \"gvsp.gendc.component.header.flags.reserved\",",
          "3253:         FT_UINT16, BASE_HEX, NULL, 0x7FFF,",
          "3254:         NULL, HFILL",
          "3255:         } },",
          "3257:         { &hf_gvsp_gendc_container_header_size_v2_2,",
          "3258:         { \"Size\", \"gvsp.gendc.container.header.size\",",
          "3259:         FT_UINT32, BASE_HEX_DEC, NULL, 0x0,",
          "3260:         NULL, HFILL",
          "3261:         } },",
          "3263:         { &hf_gvsp_gendc_container_header_id_v2_2,",
          "3264:         { \"ID\", \"gvsp.gendc.container.header.id\",",
          "3265:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3266:         NULL, HFILL",
          "3267:         } },",
          "3269:         { &hf_gvsp_gendc_container_header_variable_fields_v2_2,",
          "3270:         { \"Variable Fields\", \"gvsp.gendc.container.header.variablefields\",",
          "3271:         FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3272:         NULL, HFILL",
          "3273:         } },",
          "3275:         { &hf_gvsp_gendc_container_header_variable_fields_data_size_v2_2,",
          "3276:         { \"Data Size\", \"gvsp.gendc.container.header.variablefields.datasize\",",
          "3277:         FT_UINT16, BASE_HEX, NULL, 0x8000,",
          "3278:         NULL, HFILL",
          "3279:         } },",
          "3281:         { &hf_gvsp_gendc_container_header_variable_fields_size_x_v2_2,",
          "3282:         { \"Size X\", \"gvsp.gendc.container.header.variablefields.sizex\",",
          "3283:         FT_UINT16, BASE_HEX, NULL, 0x4000,",
          "3284:         NULL, HFILL",
          "3285:         } },",
          "3287:         { &hf_gvsp_gendc_container_header_variable_fields_size_y_v2_2,",
          "3288:         { \"Size Y\", \"gvsp.gendc.container.header.variablefields.sizey\",",
          "3289:         FT_UINT16, BASE_HEX, NULL, 0x2000,",
          "3290:         NULL, HFILL",
          "3291:         } },",
          "3293:         { &hf_gvsp_gendc_container_header_variable_fields_region_offset_v2_2,",
          "3294:         { \"Region Offset\", \"gvsp.gendc.container.header.variablefields.regionoffset\",",
          "3295:         FT_UINT16, BASE_HEX, NULL, 0x1000,",
          "3296:         NULL, HFILL",
          "3297:         } },",
          "3299:         { &hf_gvsp_gendc_container_header_variable_fields_format_v2_2,",
          "3300:         { \"Format\", \"gvsp.gendc.container.header.variablefields.format\",",
          "3301:         FT_UINT16, BASE_HEX, NULL, 0x0800,",
          "3302:         NULL, HFILL",
          "3303:         } },",
          "3305:         { &hf_gvsp_gendc_container_header_variable_fields_timestamp_v2_2,",
          "3306:         { \"Timestamp\", \"gvsp.gendc.container.header.variablefields.timestamp\",",
          "3307:         FT_UINT16, BASE_HEX, NULL, 0x0400,",
          "3308:         NULL, HFILL",
          "3309:         } },",
          "3311:         { &hf_gvsp_gendc_container_header_variable_fields_component_count_v2_2,",
          "3312:         { \"Component Count\", \"gvsp.gendc.container.header.variablefields.componentcount\",",
          "3313:         FT_UINT16, BASE_HEX, NULL, 0x0200,",
          "3314:         NULL, HFILL",
          "3315:         } },",
          "3317:         { &hf_gvsp_gendc_container_header_variable_fields_component_invalid_v2_2,",
          "3318:         { \"Component Invalid\", \"gvsp.gendc.container.header.variablefields.componentinvalid\",",
          "3319:         FT_UINT16, BASE_HEX, NULL, 0x0100,",
          "3320:         NULL, HFILL",
          "3321:         } },",
          "3323:         { &hf_gvsp_gendc_container_header_variable_fields_reserved_v2_2,",
          "3324:         { \"Reserved\", \"gvsp.gendc.container.header.variablefields.reserved\",",
          "3325:         FT_UINT16, BASE_HEX, NULL, 0x00FF,",
          "3326:         NULL, HFILL",
          "3327:         } },",
          "3329:         { &hf_gvsp_gendc_container_header_data_size_v2_2,",
          "3330:         { \"Data Size\", \"gvsp.gendc.container.header.datasize\",",
          "3331:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3332:         NULL, HFILL",
          "3333:         } },",
          "3335:         { &hf_gvsp_gendc_container_header_data_offset_v2_2,",
          "3336:         { \"Data Offset\", \"gvsp.gendc.container.header.dataoffset\",",
          "3337:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3338:         NULL, HFILL",
          "3339:         } },",
          "3341:         { &hf_gvsp_gendc_container_header_descriptor_size_v2_2,",
          "3342:         { \"Descriptor Size\", \"gvsp.gendc.container.header.descriptorsize\",",
          "3343:         FT_UINT32, BASE_HEX_DEC, NULL, 0x0,",
          "3344:         NULL, HFILL",
          "3345:         } },",
          "3347:         { &hf_gvsp_gendc_container_header_component_count_v2_2,",
          "3348:         { \"Component Count\", \"gvsp.gendc.container.header.componentcount\",",
          "3349:         FT_UINT32, BASE_HEX_DEC, NULL, 0x0,",
          "3350:         NULL, HFILL",
          "3351:         } },",
          "3353:         { &hf_gvsp_gendc_container_header_component_offset_v2_2,",
          "3354:         { \"Component Offset\", \"gvsp.gendc.container.header.componentoffset\",",
          "3355:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3356:         NULL, HFILL",
          "3357:         } },",
          "3359:         { &hf_gvsp_gendc_component_header_flags_v2_2,",
          "3360:         { \"Flags\", \"gvsp.gendc.component.header.flags\",",
          "3361:         FT_UINT16, BASE_HEX, NULL, 0x0,",
          "3362:         NULL, HFILL",
          "3363:         } },",
          "3365:         { &hf_gvsp_gendc_component_header_flags_invalid_v2_2,",
          "3366:         { \"Invalid\", \"gvsp.gendc.container.header.flags.invalid\",",
          "3367:         FT_UINT16, BASE_HEX, NULL, 0x8000,",
          "3368:         NULL, HFILL",
          "3369:         } },",
          "3371:         { &hf_gvsp_gendc_component_header_group_id_v2_2,",
          "3372:         { \"Group ID\", \"gvsp.gendc.component.header.groupid\",",
          "3373:         FT_UINT16, BASE_HEX_DEC, NULL, 0,",
          "3374:         NULL, HFILL",
          "3375:         } },",
          "3377:         { &hf_gvsp_gendc_component_header_source_id_v2_2,",
          "3378:         { \"Source ID\", \"gvsp.gendc.component.header.sourceid\",",
          "3379:         FT_UINT16, BASE_HEX_DEC, NULL, 0,",
          "3380:         NULL, HFILL",
          "3381:         } },",
          "3383:         { &hf_gvsp_gendc_component_header_region_id_v2_2,",
          "3384:         { \"Region ID\", \"gvsp.gendc.component.header.regionid\",",
          "3385:         FT_UINT16, BASE_HEX_DEC, NULL, 0,",
          "3386:         NULL, HFILL",
          "3387:         } },",
          "3389:         { &hf_gvsp_gendc_component_header_type_id_v2_2,",
          "3390:         { \"Type ID\", \"gvsp.gendc.component.header.typeid\",",
          "3391:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3392:         NULL, HFILL",
          "3393:         } },",
          "3395:         { &hf_gvsp_gendc_component_header_part_count_v2_2,",
          "3396:         { \"Part Count\", \"gvsp.gendc.component.header.partcount\",",
          "3397:         FT_UINT16, BASE_HEX_DEC, NULL, 0x0,",
          "3398:         NULL, HFILL",
          "3399:         } },",
          "3401:         { &hf_gvsp_gendc_part_header_flow_offset_v2_2,",
          "3402:         { \"Flow Offset\", \"gvsp.gendc.part.header.flowoffset\",",
          "3403:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3404:         NULL, HFILL",
          "3405:         } },",
          "3407:         { &hf_gvsp_gendc_part_header_type_specific_info_v2_2,",
          "3408:         { \"Type Specific Info\", \"gvsp.gendc.part.header.typespecificinfo\",",
          "3409:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3410:         NULL, HFILL",
          "3411:         } },",
          "3413:         { &hf_gvsp_gendc_part_header_1D_size_v2_2,",
          "3414:         { \"Size\", \"gvsp.gendc.part.header.1d.size\",",
          "3415:         FT_UINT64, BASE_HEX_DEC, NULL, 0x0,",
          "3416:         NULL, HFILL",
          "3417:         } },",
          "3419:         { &hf_gvsp_gendc_part_header_1D_padding_v2_2,",
          "3420:         { \"Size\", \"gvsp.gendc.part.header.1d.padding\",",
          "3421:         FT_UINT16, BASE_HEX_DEC, NULL, 0x0,",
          "3422:         NULL, HFILL",
          "3423:         } },",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2600:         &ett_gvsp_zoneinfo,",
          "2601:         &ett_gvsp_zoneinfo_multipart,",
          "2602:         &ett_gvsp_partinfo_leader,",
          "2604:     };",
          "2606:     proto_gvsp = proto_register_protocol(\"GigE Vision Streaming Protocol\", \"GVSP\", \"gvsp\");",
          "",
          "[Removed Lines]",
          "2603:         &ett_gvsp_partinfo_trailer",
          "",
          "[Added Lines]",
          "3439:         &ett_gvsp_partinfo_trailer,",
          "3440:         &ett_gvsp_gendc_leader_flags,",
          "3441:         &ett_gvsp_gendc_payload_data_flags,",
          "3442:         &ett_gvsp_gendc_payload_flow_flags,",
          "3443:         &ett_gvsp_gendc_container_descriptor,",
          "3444:         &ett_gvsp_gendc_container_header_flags,",
          "3445:         &ett_gvsp_gendc_container_header_variable_fields,",
          "3446:         &ett_gvsp_gendc_component_header,",
          "3447:         &ett_gvsp_gendc_component_header_flags,",
          "3448:         &ett_gvsp_gendc_part_header",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-u3v.c||epan/dissectors/packet-u3v.c": [
          "File: epan/dissectors/packet-u3v.c -> epan/dissectors/packet-u3v.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: #define PFNC_U3V_MONO12 0x01100005",
          "143: #define PFNC_U3V_MONO12P 0x010C0047",
          "144: #define PFNC_U3V_MONO14 0x01100025",
          "145: #define PFNC_U3V_MONO16 0x01100007",
          "146: #define PFNC_U3V_BAYERBG8 0x0108000B",
          "147: #define PFNC_U3V_BAYERBG10 0x0110000F",
          "148: #define PFNC_U3V_BAYERBG10P 0x010A0052",
          "149: #define PFNC_U3V_BAYERBG12 0x01100013",
          "150: #define PFNC_U3V_BAYERBG12P 0x010C0053",
          "151: #define PFNC_U3V_BAYERBG16 0x01100031",
          "152: #define PFNC_U3V_BAYERGB8 0x0108000A",
          "153: #define PFNC_U3V_BAYERGB10 0x0110000E",
          "154: #define PFNC_U3V_BAYERGB10P 0x010A0054",
          "155: #define PFNC_U3V_BAYERGB12 0x01100012",
          "156: #define PFNC_U3V_BAYERGB12P 0x010C0055",
          "157: #define PFNC_U3V_BAYERGB16 0x01100030",
          "158: #define PFNC_U3V_BAYERGR8 0x01080008",
          "159: #define PFNC_U3V_BAYERGR10 0x0110000C",
          "160: #define PFNC_U3V_BAYERGR10P 0x010A0056",
          "161: #define PFNC_U3V_BAYERGR12 0x01100010",
          "162: #define PFNC_U3V_BAYERGR12P 0x010C0057",
          "163: #define PFNC_U3V_BAYERGR16 0x0110002E",
          "164: #define PFNC_U3V_BAYERRG8 0x01080009",
          "165: #define PFNC_U3V_BAYERRG10 0x0110000D",
          "166: #define PFNC_U3V_BAYERRG10P 0x010A0058",
          "167: #define PFNC_U3V_BAYERRG12 0x01100011",
          "168: #define PFNC_U3V_BAYERRG12P 0x010C0059",
          "169: #define PFNC_U3V_BAYERRG16 0x0110002F",
          "170: #define PFNC_U3V_RGBA8 0x02200016",
          "171: #define PFNC_U3V_RGBA10 0x0240005F",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: #define PFNC_U3V_MONO14P 0x010E0104",
          "147: #define PFNC_U3V_MONO32 0x01200111",
          "148: #define PFNC_U3V_BAYERBG4P 0x01040110",
          "154: #define PFNC_U3V_BAYERBG14 0x0110010C",
          "155: #define PFNC_U3V_BAYERBG14P 0x010E0108",
          "157: #define PFNC_U3V_BAYERGB4P 0x0104010F",
          "163: #define PFNC_U3V_BAYERGB14 0x0110010B",
          "164: #define PFNC_U3V_BAYERGB14P 0x010E0107",
          "166: #define PFNC_U3V_BAYERGR4P 0x0104010D",
          "172: #define PFNC_U3V_BAYERGR14 0x01100109",
          "173: #define PFNC_U3V_BAYERGR14P 0x010E0105",
          "175: #define PFNC_U3V_BAYERRG4P 0x0104010E",
          "181: #define PFNC_U3V_BAYERRG14 0x0110010A",
          "182: #define PFNC_U3V_BAYERRG14P 0x010E0106",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254: #define PFNC_U3V_CONFIDENCE8 0x010800C6",
          "255: #define PFNC_U3V_CONFIDENCE16 0x011000C7",
          "256: #define PFNC_U3V_CONFIDENCE32F 0x012000C8",
          "257: #define PFNC_U3V_BICOLORBGRG8 0x021000A6",
          "258: #define PFNC_U3V_BICOLORBGRG10 0x022000A9",
          "259: #define PFNC_U3V_BICOLORBGRG10P 0x021400AA",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: #define PFNC_U3V_DATA8 0x01080116",
          "272: #define PFNC_U3V_DATA8S 0x01080117",
          "273: #define PFNC_U3V_DATA16 0x01100118",
          "274: #define PFNC_U3V_DATA16S 0x01100119",
          "275: #define PFNC_U3V_DATA32 0x0120011A",
          "276: #define PFNC_U3V_DATA32F 0x0120011C",
          "277: #define PFNC_U3V_DATA32S 0x0120011B",
          "278: #define PFNC_U3V_DATA64 0x0140011D",
          "279: #define PFNC_U3V_DATA64F 0x0140011F",
          "280: #define PFNC_U3V_DATA64S 0x0140011E",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300: #define PFNC_U3V_YCBCR12P_CBYCR 0x02240086",
          "301: #define PFNC_U3V_YCBCR411_8 0x020C005A",
          "302: #define PFNC_U3V_YCBCR411_8_CBYYCRYY 0x020C003C",
          "303: #define PFNC_U3V_YCBCR422_8 0x0210003B",
          "304: #define PFNC_U3V_YCBCR422_8_CBYCRY 0x02100043",
          "305: #define PFNC_U3V_YCBCR422_10 0x02200065",
          "306: #define PFNC_U3V_YCBCR422_10_CBYCRY 0x02200099",
          "307: #define PFNC_U3V_YCBCR422_10P 0x02140087",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: #define PFNC_U3V_YCBCR420_8_YY_CBCR_SEMIPLANAR 0x020C0112",
          "328: #define PFNC_U3V_YCBCR420_8_YY_CRCB_SEMIPLANAR 0x020C0114",
          "331: #define PFNC_U3V_YCBCR422_8_YY_CBCR_SEMIPLANAR 0x02100113",
          "332: #define PFNC_U3V_YCBCR422_8_YY_CRCB_SEMIPLANAR 0x02100115",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362: #define PFNC_U3V_YCBCR2020_422_12_CBYCRY 0x02180101",
          "363: #define PFNC_U3V_YCBCR2020_422_12P 0x02180102",
          "364: #define PFNC_U3V_YCBCR2020_422_12P_CBYCRY 0x02180103",
          "379:  Payload Types",
          "",
          "[Removed Lines]",
          "365: #define GVSP_MONO10PACKED 0x010C0004",
          "366: #define GVSP_MONO12PACKED 0x010C0006",
          "367: #define GVSP_BAYERBG10PACKED 0x010C0029",
          "368: #define GVSP_BAYERBG12PACKED 0x010C002D",
          "369: #define GVSP_BAYERGB10PACKED 0x010C0028",
          "370: #define GVSP_BAYERGB12PACKED 0x010C002C",
          "371: #define GVSP_BAYERGR10PACKED 0x010C0026",
          "372: #define GVSP_BAYERGR12PACKED 0x010C002A",
          "373: #define GVSP_BAYERRG10PACKED 0x010C0027",
          "374: #define GVSP_BAYERRG12PACKED 0x010C002B",
          "375: #define GVSP_RGB10V1PACKED 0x0220001C",
          "376: #define GVSP_RGB12V1PACKED 0x02240034",
          "",
          "[Added Lines]",
          "393: #define GVSP_PIX_MONO10PACKED 0x010C0004",
          "394: #define GVSP_PIX_MONO12PACKED 0x010C0006",
          "395: #define GVSP_PIX_BAYERBG10PACKED 0x010C0029",
          "396: #define GVSP_PIX_BAYERBG12PACKED 0x010C002D",
          "397: #define GVSP_PIX_BAYERGB10PACKED 0x010C0028",
          "398: #define GVSP_PIX_BAYERGB12PACKED 0x010C002C",
          "399: #define GVSP_PIX_BAYERGR10PACKED 0x010C0026",
          "400: #define GVSP_PIX_BAYERGR12PACKED 0x010C002A",
          "401: #define GVSP_PIX_BAYERRG10PACKED 0x010C0027",
          "402: #define GVSP_PIX_BAYERRG12PACKED 0x010C002B",
          "403: #define GVSP_PIX_RGB10V1PACKED 0x0220001C",
          "404: #define GVSP_PIX_RGB12V1PACKED 0x02240034",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "709:     { PFNC_U3V_CONFIDENCE1P, \"Confidence 1-bit packed\" },",
          "710:     { PFNC_U3V_MONO2P, \"Monochrome 2-bit packed\" },",
          "711:     { PFNC_U3V_MONO4P, \"Monochrome 4-bit packed\" },",
          "712:     { PFNC_U3V_MONO8, \"Monochrome 8-bit\" },",
          "713:     { PFNC_U3V_MONO8S, \"Monochrome 8-bit signed\" },",
          "714:     { PFNC_U3V_BAYERGR8, \"Bayer Green-Red 8-bit\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740:     { PFNC_U3V_BAYERGR4P, \"Bayer Green-Red 4-bit packed\" },",
          "741:     { PFNC_U3V_BAYERRG4P, \"Bayer Red-Green 4-bit packed\" },",
          "742:     { PFNC_U3V_BAYERGB4P, \"Bayer Green-Blue 4-bit packed\" },",
          "743:     { PFNC_U3V_BAYERBG4P, \"Bayer Blue-Green 4-bit packed\" },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "727:     { PFNC_U3V_R8, \"Red 8-bit\" },",
          "728:     { PFNC_U3V_G8, \"Green 8-bit\" },",
          "729:     { PFNC_U3V_B8, \"Blue 8-bit\" },",
          "730:     { PFNC_U3V_MONO10P, \"Monochrome 10-bit packed\" },",
          "731:     { PFNC_U3V_BAYERBG10P, \"Bayer Blue-Green 10-bit packed\" },",
          "732:     { PFNC_U3V_BAYERGB10P, \"Bayer Green-Blue 10-bit packed\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:     { PFNC_U3V_DATA8, \"Data 8-bit\" },",
          "763:     { PFNC_U3V_DATA8S, \"Data 8-bit signed\" },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "742:     { PFNC_U3V_COORD3D_A10P, \"3D coordinate A 10-bit packed\" },",
          "743:     { PFNC_U3V_COORD3D_B10P, \"3D coordinate B 10-bit packed\" },",
          "744:     { PFNC_U3V_COORD3D_C10P, \"3D coordinate C 10-bit packed\" },",
          "755:     { PFNC_U3V_MONO12P, \"Monochrome 12-bit packed\" },",
          "756:     { PFNC_U3V_BAYERBG12P, \"Bayer Blue-Green 12-bit packed\" },",
          "757:     { PFNC_U3V_BAYERGB12P, \"Bayer Green-Blue 12-bit packed\" },",
          "",
          "[Removed Lines]",
          "745:     { GVSP_MONO10PACKED, \"GigE Vision specific format, Monochrome 10-bit packed\" },",
          "746:     { GVSP_MONO12PACKED, \"GigE Vision specific format, Monochrome 12-bit packed\" },",
          "747:     { GVSP_BAYERGR10PACKED, \"GigE Vision specific format, Bayer Green-Red 10-bit packed\" },",
          "748:     { GVSP_BAYERRG10PACKED, \"GigE Vision specific format, Bayer Red-Green 10-bit packed\" },",
          "749:     { GVSP_BAYERGB10PACKED, \"GigE Vision specific format, Bayer Green-Blue 10-bit packed\" },",
          "750:     { GVSP_BAYERBG10PACKED, \"GigE Vision specific format, Bayer Blue-Green 10-bit packed\" },",
          "751:     { GVSP_BAYERGR12PACKED, \"GigE Vision specific format, Bayer Green-Red 12-bit packed\" },",
          "752:     { GVSP_BAYERRG12PACKED, \"GigE Vision specific format, Bayer Red-Green 12-bit packed\" },",
          "753:     { GVSP_BAYERGB12PACKED, \"GigE Vision specific format, Bayer Green-Blue 12-bit packed\" },",
          "754:     { GVSP_BAYERBG12PACKED, \"GigE Vision specific format, Bayer Blue-Green 12-bit packed\" },",
          "",
          "[Added Lines]",
          "779:     { GVSP_PIX_MONO10PACKED, \"GigE Vision specific format, Monochrome 10-bit packed\" },",
          "780:     { GVSP_PIX_MONO12PACKED, \"GigE Vision specific format, Monochrome 12-bit packed\" },",
          "781:     { GVSP_PIX_BAYERGR10PACKED, \"GigE Vision specific format, Bayer Green-Red 10-bit packed\" },",
          "782:     { GVSP_PIX_BAYERRG10PACKED, \"GigE Vision specific format, Bayer Red-Green 10-bit packed\" },",
          "783:     { GVSP_PIX_BAYERGB10PACKED, \"GigE Vision specific format, Bayer Green-Blue 10-bit packed\" },",
          "784:     { GVSP_PIX_BAYERBG10PACKED, \"GigE Vision specific format, Bayer Blue-Green 10-bit packed\" },",
          "785:     { GVSP_PIX_BAYERGR12PACKED, \"GigE Vision specific format, Bayer Green-Red 12-bit packed\" },",
          "786:     { GVSP_PIX_BAYERRG12PACKED, \"GigE Vision specific format, Bayer Red-Green 12-bit packed\" },",
          "787:     { GVSP_PIX_BAYERGB12PACKED, \"GigE Vision specific format, Bayer Green-Blue 12-bit packed\" },",
          "788:     { GVSP_PIX_BAYERBG12PACKED, \"GigE Vision specific format, Bayer Blue-Green 12-bit packed\" },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "767:     { PFNC_U3V_COORD3D_A12P, \"3D coordinate A 12-bit packed\" },",
          "768:     { PFNC_U3V_COORD3D_B12P, \"3D coordinate B 12-bit packed\" },",
          "769:     { PFNC_U3V_COORD3D_C12P, \"3D coordinate C 12-bit packed\" },",
          "770:     { PFNC_U3V_MONO10, \"Monochrome 10-bit unpacked\" },",
          "771:     { PFNC_U3V_MONO12, \"Monochrome 12-bit unpacked\" },",
          "772:     { PFNC_U3V_MONO16, \"Monochrome 16-bit\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:     { PFNC_U3V_MONO14P, \"Monochrome 14-bit packed\" },",
          "805:     { PFNC_U3V_BAYERGR14P, \"Bayer Green-Red 14-bit packed\" },",
          "806:     { PFNC_U3V_BAYERRG14P, \"Bayer Red-Green 14-bit packed\" },",
          "807:     { PFNC_U3V_BAYERGB14P, \"Bayer Green-Blue 14-bit packed\" },",
          "808:     { PFNC_U3V_BAYERBG14P, \"Bayer Blue-Green 14-bit packed\" },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "806:     { PFNC_U3V_R16, \"Red 16-bit\" },",
          "807:     { PFNC_U3V_G16, \"Green 16-bit\" },",
          "808:     { PFNC_U3V_B16, \"Blue 16-bit\" },",
          "809:     { PFNC_U3V_COORD3D_A32F, \"3D coordinate A 32-bit floating point\" },",
          "810:     { PFNC_U3V_COORD3D_B32F, \"3D coordinate B 32-bit floating point\" },",
          "811:     { PFNC_U3V_COORD3D_C32F, \"3D coordinate C 32-bit floating point\" },",
          "812:     { PFNC_U3V_CONFIDENCE32F, \"Confidence 32-bit floating point\" },",
          "813:     { PFNC_U3V_YUV411_8_UYYVYY, \"YUV 4:1:1 8-bit\" },",
          "814:     { PFNC_U3V_YCBCR411_8_CBYYCRYY, \"YCbCr 4:1:1 8-bit\" },",
          "815:     { PFNC_U3V_YCBCR601_411_8_CBYYCRYY, \"YCbCr 4:1:1 8-bit BT.601\" },",
          "816:     { PFNC_U3V_YCBCR709_411_8_CBYYCRYY, \"YCbCr 4:1:1 8-bit BT.709\" },",
          "817:     { PFNC_U3V_YCBCR411_8, \"YCbCr 4:1:1 8-bit\" },",
          "818:     { PFNC_U3V_YCBCR2020_411_8_CBYYCRYY, \"YCbCr 4:1:1 8-bit BT.2020\" },",
          "819:     { PFNC_U3V_YUV422_8_UYVY, \"YUV 4:2:2 8-bit\" },",
          "820:     { PFNC_U3V_YUV422_8, \"YUV 4:2:2 8-bit\" },",
          "821:     { PFNC_U3V_RGB565P, \"Red-Green-Blue 5/6/5-bit packed\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848:     { PFNC_U3V_BAYERGR14, \"Bayer Green-Red 14-bit unpacked\" },",
          "849:     { PFNC_U3V_BAYERRG14, \"Bayer Red-Green 14-bit unpacked\" },",
          "850:     { PFNC_U3V_BAYERGB14, \"Bayer Green-Blue 14-bit unpacked\" },",
          "851:     { PFNC_U3V_BAYERBG14, \"Bayer Blue-Green 14-bit unpacked\" },",
          "852:     { PFNC_U3V_DATA16, \"Data 16-bit\" },",
          "853:     { PFNC_U3V_DATA16S, \"Data 16-bit signed\" },",
          "858:     { PFNC_U3V_MONO32, \"Monochrome 32-bit unpacked\" },",
          "859:     { PFNC_U3V_DATA32, \"Data 32-bit\" },",
          "860:     { PFNC_U3V_DATA32S, \"Data 32-bit signed\" },",
          "861:     { PFNC_U3V_DATA32F, \"Data 32-bit floating point\" },",
          "862:     { PFNC_U3V_DATA64, \"Data 64-bit\" },",
          "863:     { PFNC_U3V_DATA64S, \"Data 64-bit signed\" },",
          "864:     { PFNC_U3V_DATA64F, \"Data 64-bit floating point\" },",
          "871:     { PFNC_U3V_YCBCR420_8_YY_CBCR_SEMIPLANAR, \"YCbCr 4:2:0 8-bit YY/CbCr Semiplanar\" },",
          "872:     { PFNC_U3V_YCBCR420_8_YY_CRCB_SEMIPLANAR, \"YCbCr 4:2:0 8-bit YY/CrCb Semiplanar\" },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "832:     { PFNC_U3V_COORD3D_AC8_PLANAR, \"3D coordinate A-C 8-bit planar\" },",
          "833:     { PFNC_U3V_YCBCR2020_422_8, \"YCbCr 4:2:2 8-bit BT.2020\" },",
          "834:     { PFNC_U3V_YCBCR2020_422_8_CBYCRY, \"YCbCr 4:2:2 8-bit BT.2020\" },",
          "835:     { PFNC_U3V_YCBCR422_10P, \"YCbCr 4:2:2 10-bit packed\" },",
          "836:     { PFNC_U3V_YCBCR601_422_10P, \"YCbCr 4:2:2 10-bit packed BT.601\" },",
          "837:     { PFNC_U3V_YCBCR709_422_10P, \"YCbCr 4:2:2 10-bit packed BT.709\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "889:     { PFNC_U3V_YCBCR422_8_YY_CBCR_SEMIPLANAR, \"YCbCr 4:2:2 8-bit YY/CbCr Semiplanar\" },",
          "890:     { PFNC_U3V_YCBCR422_8_YY_CRCB_SEMIPLANAR, \"YCbCr 4:2:2 8-bit YY/CrCb Semiplanar\" },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "879:     { PFNC_U3V_YCBCR2020_10P_CBYCR, \"YCbCr 4:4:4 10-bit packed BT.2020\" },",
          "880:     { PFNC_U3V_RGBA8, \"Red-Green-Blue-alpha 8-bit\" },",
          "881:     { PFNC_U3V_BGRA8, \"Blue-Green-Red-alpha 8-bit\" },",
          "883:     { PFNC_U3V_RGB10P32, \"Red-Green-Blue 10-bit packed into 32-bit\" },",
          "884:     { PFNC_U3V_YCBCR422_10, \"YCbCr 4:2:2 10-bit unpacked\" },",
          "885:     { PFNC_U3V_YCBCR422_12, \"YCbCr 4:2:2 12-bit unpacked\" },",
          "",
          "[Removed Lines]",
          "882:     { GVSP_RGB10V1PACKED, \"GigE Vision specific format, Red-Green-Blue 10-bit packed - variant 1\" },",
          "",
          "[Added Lines]",
          "938:     { GVSP_PIX_RGB10V1PACKED, \"GigE Vision specific format, Red-Green-Blue 10-bit packed - variant 1\" },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "901:     { PFNC_U3V_COORD3D_AC16_PLANAR, \"3D coordinate A-C 16-bit planar\" },",
          "902:     { PFNC_U3V_YCBCR2020_422_10, \"YCbCr 4:2:2 10-bit unpacked BT.2020\" },",
          "903:     { PFNC_U3V_YCBCR2020_422_10_CBYCRY, \"YCbCr 4:2:2 10-bit unpacked BT.2020\" },",
          "905:     { PFNC_U3V_BGR12P, \"Blue-Green-Red 12-bit packed\" },",
          "906:     { PFNC_U3V_RGB12P, \"Red-Green-Blue 12-bit packed\" },",
          "907:     { PFNC_U3V_YCBCR12P_CBYCR, \"YCbCr 4:4:4 12-bit packed\" },",
          "",
          "[Removed Lines]",
          "904:     { GVSP_RGB12V1PACKED, \"GigE Vision specific format, Red-Green-Blue 12-bit packed - variant 1\" },",
          "",
          "[Added Lines]",
          "960:     { GVSP_PIX_RGB12V1PACKED, \"GigE Vision specific format, Red-Green-Blue 12-bit packed - variant 1\" },",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "995:         offset_address = (guint32)addr;",
          "996:         address_string = try_val_to_str(offset_address, bootstrap_register_names_abrm);",
          "997:     }",
          "999:         offset_address = (guint32)( addr - u3v_conv_info->sbrm_addr);",
          "1000:         address_string = try_val_to_str(offset_address, bootstrap_register_names_sbrm);",
          "1001:     }",
          "1003:         offset_address = (guint32)( addr - u3v_conv_info->sirm_addr);",
          "1004:         address_string = try_val_to_str(offset_address, bootstrap_register_names_sirm);",
          "1005:     }",
          "1007:         offset_address = (guint32)( addr - u3v_conv_info->eirm_addr);",
          "1008:         address_string = try_val_to_str(offset_address, bootstrap_register_names_eirm);",
          "1009:     }",
          "",
          "[Removed Lines]",
          "998:     if ( u3v_conv_info && u3v_conv_info->sbrm_addr != 0 &&  (addr >= u3v_conv_info->sbrm_addr)) {",
          "1002:     if ( u3v_conv_info && u3v_conv_info->sirm_addr != 0 &&  (addr >= u3v_conv_info->sirm_addr)) {",
          "1006:     if ( u3v_conv_info && u3v_conv_info->eirm_addr != 0 &&  (addr >= u3v_conv_info->eirm_addr)) {",
          "",
          "[Added Lines]",
          "1054:     if ( u3v_conv_info && u3v_conv_info->sbrm_addr != 0 && (addr >= u3v_conv_info->sbrm_addr)) {",
          "1058:     if ( u3v_conv_info && u3v_conv_info->sirm_addr != 0 && (addr >= u3v_conv_info->sirm_addr)) {",
          "1062:     if ( u3v_conv_info && u3v_conv_info->eirm_addr != 0 && (addr >= u3v_conv_info->eirm_addr)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1062:             break;",
          "1063:         }",
          "1064:     }",
          "1066:         addr -= u3v_conv_info->sbrm_addr;",
          "1067:         switch(addr) {",
          "1068:         case U3V_SBRM_SIRM_ADDRESS:",
          "",
          "[Removed Lines]",
          "1065:     if ( u3v_conv_info->sbrm_addr != 0 &&  (addr >= u3v_conv_info->sbrm_addr)) {",
          "",
          "[Added Lines]",
          "1121:     if ( u3v_conv_info->sbrm_addr != 0 && (addr >= u3v_conv_info->sbrm_addr)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1082:  \\brief Attempt to dissect a bootstrap register",
          "1084: static int",
          "1086: {",
          "1087:     gint isABRM = FALSE, isSBRM = FALSE, isSIRM = FALSE,isEIRM = FALSE;",
          "",
          "[Removed Lines]",
          "1085: dissect_u3v_register(guint64 addr, proto_tree *branch, tvbuff_t *tvb, gint offset, gint length, u3v_conv_info_t * u3v_conv_info)",
          "",
          "[Added Lines]",
          "1141: dissect_u3v_register(guint64 addr, proto_tree *branch, tvbuff_t *tvb, gint offset, gint length, u3v_conv_info_t *u3v_conv_info)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1171:             break;",
          "1172:         }",
          "1173:     }",
          "1175:         guint64 map_offset = addr - u3v_conv_info->sbrm_addr;",
          "1176:         isSBRM = TRUE;",
          "1177:         switch(map_offset) {",
          "",
          "[Removed Lines]",
          "1174:     if ( u3v_conv_info->sbrm_addr != 0 &&  (addr >= u3v_conv_info->sbrm_addr)) {",
          "",
          "[Added Lines]",
          "1230:     if ( u3v_conv_info->sbrm_addr != 0 && (addr >= u3v_conv_info->sbrm_addr)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1216:             break;",
          "1217:         }",
          "1218:     }",
          "1220:         guint64 map_offset = addr - u3v_conv_info->sirm_addr;",
          "1221:         isSIRM = TRUE;",
          "1222:         switch(map_offset) {",
          "",
          "[Removed Lines]",
          "1219:     if ( u3v_conv_info->sirm_addr != 0 &&  (addr >= u3v_conv_info->sirm_addr)) {",
          "",
          "[Added Lines]",
          "1275:     if ( u3v_conv_info->sirm_addr != 0 && (addr >= u3v_conv_info->sirm_addr)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1258:             break;",
          "1259:         }",
          "1260:     }",
          "1262:         guint64 map_offset = addr -u3v_conv_info->eirm_addr;",
          "1263:         isEIRM=TRUE;",
          "1264:         switch(map_offset) {",
          "",
          "[Removed Lines]",
          "1261:     if ( u3v_conv_info->eirm_addr != 0 &&  (addr >= u3v_conv_info->eirm_addr)) {",
          "",
          "[Added Lines]",
          "1317:     if ( u3v_conv_info->eirm_addr != 0 && (addr >= u3v_conv_info->eirm_addr)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}