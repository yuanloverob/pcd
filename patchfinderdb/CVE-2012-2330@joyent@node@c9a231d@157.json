{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a778a25cabdef7a94c34a315706568688d942028",
      "candidate_info": {
        "commit_hash": "a778a25cabdef7a94c34a315706568688d942028",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a778a25cabdef7a94c34a315706568688d942028",
        "files": [
          "node.gyp",
          "src/node.h",
          "src/node_internals.h"
        ],
        "message": "build: move internals to separate header file",
        "before_after_code_files": [
          "node.gyp||node.gyp",
          "src/node.h||src/node.h",
          "src/node_internals.h||src/node_internals.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:       ],",
          "127:       'defines': [",
          "128:         'ARCH=\"<(target_arch)\"',",
          "129:         'PLATFORM=\"<(OS)\"',",
          "130:       ],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:         'NODE_WANT_INTERNALS=1',",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #include <node_isolate.h>",
          "68: #include <node_object_wrap.h>",
          "84: #endif",
          "86: #ifndef NODE_STRINGIFY",
          "",
          "[Removed Lines]",
          "70: #ifndef offset_of",
          "73: #define offset_of(type, member) \\",
          "74:   ((intptr_t) ((char *) &(((type *) 8)->member) - 8))",
          "75: #endif",
          "77: #ifndef container_of",
          "78: #define container_of(ptr, type, member) \\",
          "79:   ((type *) ((char *) (ptr) - offset_of(type, member)))",
          "80: #endif",
          "82: #ifndef ARRAY_SIZE",
          "83: #define ARRAY_SIZE(a) (sizeof((a)) / sizeof((a)[0]))",
          "",
          "[Added Lines]",
          "70: #if NODE_WANT_INTERNALS",
          "71: # include \"node_internals.h\"",
          "",
          "---------------"
        ],
        "src/node_internals.h||src/node_internals.h": [
          "File: src/node_internals.h -> src/node_internals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef SRC_NODE_INTERNALS_H_",
          "23: #define SRC_NODE_INTERNALS_H_",
          "25: namespace node {",
          "27: #ifndef offset_of",
          "30: #define offset_of(type, member) \\",
          "31:   ((intptr_t) ((char *) &(((type *) 8)->member) - 8))",
          "32: #endif",
          "34: #ifndef container_of",
          "35: #define container_of(ptr, type, member) \\",
          "36:   ((type *) ((char *) (ptr) - offset_of(type, member)))",
          "37: #endif",
          "39: #ifndef ARRAY_SIZE",
          "40: #define ARRAY_SIZE(a) (sizeof((a)) / sizeof((a)[0]))",
          "41: #endif",
          "46: #if HAVE_ISOLATES",
          "48: # if _WIN32",
          "49: #  define THREAD __declspec(thread)",
          "50: # else",
          "51: #  define THREAD __thread",
          "52: # endif",
          "54: # define TLS(type, name)      THREAD type* __tls_##name",
          "55: # define VAR(name)            (*__tls_##name)",
          "56: # define EMPTY(name)          (__tls_##name == NULL)",
          "57: # define ASSIGN(name, val)    ((__tls_##name) = P(val))",
          "59: # define LAZY_ASSIGN(name, val) \\",
          "60:   do if (!__tls_##name) ((__tls_##name) = P(val)); while (0)",
          "62: template <class T> inline v8::Persistent<T>* P(v8::Handle<T> v)",
          "63: {",
          "64:   return new v8::Persistent<T>(v8::Persistent<T>::New(v));",
          "65: }",
          "67: inline v8::Persistent<v8::String>* P(const char* symbol)",
          "68: {",
          "69:   return new v8::Persistent<v8::String>(",
          "70:     v8::Persistent<v8::String>::New(",
          "71:       v8::String::NewSymbol(symbol)));",
          "72: }",
          "74: #else // !HAVE_ISOLATES",
          "77: # define TLS(type, name)    type name",
          "78: # define VAR(name)          (name)",
          "79: # define EMPTY(name)        ((name).IsEmpty())",
          "80: # define ASSIGN(name, val)  ((name) = P(val))",
          "82: # define LAZY_ASSIGN(name, val) \\",
          "83:   do if ((name).IsEmpty()) (name) = P(val); while (0)",
          "85: template <class T> inline v8::Persistent<T> P(v8::Handle<T> v)",
          "86: {",
          "87:   return v8::Persistent<T>(v);",
          "88: }",
          "90: inline v8::Persistent<v8::String> P(const char* symbol)",
          "91: {",
          "92:   return v8::Persistent<v8::String>::New(",
          "93:     v8::String::NewSymbol(symbol));",
          "94: }",
          "95: #endif // HAVE_ISOLATES",
          "97: } // namespace node",
          "99: #endif // SRC_NODE_INTERNALS_H_",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a20872045a1e153f6687d37f4d824739e3a60b27",
      "candidate_info": {
        "commit_hash": "a20872045a1e153f6687d37f4d824739e3a60b27",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a20872045a1e153f6687d37f4d824739e3a60b27",
        "files": [
          "lib/cluster.js"
        ],
        "message": "cluster: simplify process event handling\n\nThis simplify the internalMessage and exit event handling\nAnd simply relay message and error event to the worker object\nNote that the error event was not relayed before",
        "before_after_code_files": [
          "lib/cluster.js||licluster.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "171: var messageHandingObject = {};",
          "175:   var message = extendObject({}, inMessage);",
          "",
          "[Removed Lines]",
          "172: function handleMessage(inMessage, inHandle, worker) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:     });",
          "304:   }",
          "328: }",
          "329: util.inherits(Worker, EventEmitter);",
          "",
          "[Removed Lines]",
          "307:   this.process.on('internalMessage', function(message, handle) {",
          "308:     debug('recived: ', message);",
          "311:     handleMessage(message, handle, self);",
          "312:     return;",
          "313:   });",
          "316:   this.process.on('message', function(message, handle) {",
          "317:     self.emit('message', message, handle);",
          "318:   });",
          "321:   self.process.on('exit', function() {",
          "322:     debug('worker id=' + self.uniqueID + ' died');",
          "325:     prepareDeath(self, 'dead', 'death');",
          "326:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2b47097c0b483552efc1947c6766fa1128600b6",
      "candidate_info": {
        "commit_hash": "c2b47097c0b483552efc1947c6766fa1128600b6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c2b47097c0b483552efc1947c6766fa1128600b6",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.04.18, Version 0.7.8, (unstable)\n\n* Upgrade V8 to 3.9.24.9\n\n* Upgrade OpenSSL to 1.0.0f\n\n* Upgrade npm to 1.1.18\n\n* Show licenses in Binary installers\n\n* Domains (isaacs)\n\n* readline: rename \"end\" to \"close\" (Nathan Rajlich)\n\n* tcp: make getsockname() return address family as string (Shigeki Ohtsu)\n\n* http, https: fix .setTimeout() (ssuda)\n\n* os: add cross platform EOL character (Mustansir Golawala)\n\n* typed arrays: unexport SizeOfArrayElementForType() (Aaron Jacobs)\n\n* net: honor 'enable' flag in .setNoDelay() (Ben Noordhuis)\n\n* child_process: emit error when .kill fails (Andreas Madsen)\n\n* gyp: fix 'argument list too long' build error (Ben Noordhuis)\n\n* fs.WriteStream: Handle modifications to fs.open (isaacs)\n\n* repl, readline: Handle newlines better (Nathan Rajlich, Nathan Friedly)\n\n* build: target OSX 10.5 when building on darwin (Nathan Rajlich)\n\n* Fix #3052 Handle errors properly in zlib (isaacs)\n\n* build: add support for DTrace and postmortem (Dave Pacheco)\n\n* core: add reusable Slab allocator (Ben Noordhuis)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "31: #define NODE_PATCH_VERSION 8",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f08c3cfa1ee3ece6032d1ffeda6f403e54dd5c0",
      "candidate_info": {
        "commit_hash": "5f08c3cfa1ee3ece6032d1ffeda6f403e54dd5c0",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5f08c3cfa1ee3ece6032d1ffeda6f403e54dd5c0",
        "files": [
          "doc/api/child_processes.markdown",
          "doc/api/cluster.markdown",
          "lib/child_process.js",
          "lib/cluster.js",
          "lib/net.js",
          "src/node.js",
          "test/simple/test-child-process-internal.js",
          "test/simple/test-cluster-basic.js",
          "test/simple/test-cluster-fork-env.js",
          "test/simple/test-cluster-kill-workers.js",
          "test/simple/test-cluster-message.js"
        ],
        "message": "cluster improvements: Worker class and isolate internal messages\n\nFixes #2388",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "lib/cluster.js||licluster.js",
          "lib/net.js||linet.js",
          "src/node.js||src/node.js",
          "test/simple/test-child-process-internal.js||test/simple/test-child-process-internal.js",
          "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js",
          "test/simple/test-cluster-fork-env.js||test/simple/test-cluster-fork-env.js",
          "test/simple/test-cluster-kill-workers.js||test/simple/test-cluster-kill-workers.js",
          "test/simple/test-cluster-message.js||test/simple/test-cluster-message.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:       jsonBuffer += pool.toString('ascii', offset, offset + length);",
          "97:       var i, start = 0;",
          "98:       while ((i = jsonBuffer.indexOf('\\n', start)) >= 0) {",
          "99:         var json = jsonBuffer.slice(start, i);",
          "100:         var message = JSON.parse(json);",
          "103:         start = i + 1;",
          "104:       }",
          "105:       jsonBuffer = jsonBuffer.slice(start);",
          "",
          "[Removed Lines]",
          "102:         target.emit('message', message, recvHandle);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cluster.js||licluster.js": [
          "File: lib/cluster.js -> licluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: var fork = require('child_process').fork;",
          "24: var net = require('net');",
          "25: var EventEmitter = require('events').EventEmitter;",
          "27: function isObject(o) {",
          "28:   return (typeof o === 'object' && o !== null);",
          "29: }",
          "31: function extendObject(origin, add) {",
          "32:   var keys = Object.keys(add),",
          "33:       i = keys.length;",
          "35:     origin[keys[i]] = add[keys[i]];",
          "36:   }",
          "37:   return origin;",
          "38: }",
          "42: var debug;",
          "43: if (process.env.NODE_DEBUG && /cluster/.test(process.env.NODE_DEBUG)) {",
          "44:   debug = function(x) {",
          "",
          "[Removed Lines]",
          "34:   while(i--) {",
          "40: var cluster = module.exports = new EventEmitter();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   debug = function() { };",
          "51: }",
          "55: var masterStarted = false;",
          "56: var ids = 0;",
          "59: var workerFilename;",
          "60: var workerArgs;",
          "64: var queryIds = 0;",
          "65: var queryCallbacks = {};",
          "68: cluster.isMaster = ! cluster.isWorker;",
          "",
          "[Removed Lines]",
          "57: var workers = [];",
          "58: var servers = {};",
          "63: var workerId = 0;",
          "67: cluster.isWorker = 'NODE_WORKER_ID' in process.env;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:   workerArgs = process.argv.slice(2);",
          "92:   process.on('uncaughtException', function(e) {",
          "100:     console.error('Exception in cluster master process: ' +",
          "101:         e.message + '\\n' + e.stack);",
          "102:     process.exit(1);",
          "103:   });",
          "104: }",
          "138:   }",
          "139: }",
          "150:   }",
          "151: }",
          "168:   }",
          "185:   });",
          "208:   });",
          "209: };",
          "224:   }",
          "228: }",
          "234:   assert(cluster.isWorker);",
          "237:     cmd: 'queryServer',",
          "238:     address: address,",
          "239:     port: port,",
          "240:     addressType: addressType",
          "242:     cb(handle);",
          "243:   });",
          "244: };",
          "",
          "[Removed Lines]",
          "95:     eachWorker(function(worker) {",
          "96:       debug('kill worker ' + worker.pid);",
          "97:       worker.kill();",
          "98:     });",
          "107: function handleWorkerMessage(worker, message) {",
          "109:   assert(cluster.isMaster);",
          "111:   debug('recv ' + JSON.stringify(message));",
          "113:   switch (message.cmd) {",
          "114:     case 'online':",
          "115:       debug('Worker ' + worker.pid + ' online');",
          "116:       worker.online = true;",
          "117:       break;",
          "119:     case 'queryServer':",
          "120:       var key = message.address + ':' +",
          "121:                 message.port + ':' +",
          "122:                 message.addressType;",
          "123:       var response = { _queryId: message._queryId };",
          "125:       if (!(key in servers)) {",
          "127:         debug('create new server ' + key);",
          "128:         servers[key] = net._createServerHandle(message.address,",
          "129:                                                message.port,",
          "130:                                                message.addressType);",
          "131:       }",
          "132:       worker.send(response, servers[key]);",
          "133:       break;",
          "135:     default:",
          "137:       break;",
          "142: function eachWorker(cb) {",
          "144:   assert(cluster.isMaster);",
          "146:   for (var id in workers) {",
          "147:     if (workers[id]) {",
          "148:       cb(workers[id]);",
          "149:     }",
          "154: cluster.fork = function(env) {",
          "156:   assert(cluster.isMaster);",
          "159:   startMaster();",
          "161:   var id = ++ids;",
          "164:   var envCopy = extendObject({}, process.env);",
          "165:   envCopy['NODE_WORKER_ID'] = id;",
          "166:   if (isObject(env)) {",
          "167:     envCopy = extendObject(envCopy, env);",
          "171:   var worker = fork(workerFilename, workerArgs, {",
          "172:     'env': envCopy",
          "173:   });",
          "175:   workers[id] = worker;",
          "177:   worker.on('message', function(message) {",
          "178:     handleWorkerMessage(worker, message);",
          "179:   });",
          "181:   worker.on('exit', function() {",
          "182:     debug('worker id=' + id + ' died');",
          "183:     delete workers[id];",
          "184:     cluster.emit('death', worker);",
          "187:   return worker;",
          "188: };",
          "192: cluster._startWorker = function() {",
          "193:   assert(cluster.isWorker);",
          "194:   workerId = parseInt(process.env.NODE_WORKER_ID, 10);",
          "196:   queryMaster({ cmd: 'online' });",
          "199:   process.on('message', function(msg, handle) {",
          "200:     debug('recv ' + JSON.stringify(msg));",
          "201:     if (msg._queryId && msg._queryId in queryCallbacks) {",
          "202:       var cb = queryCallbacks[msg._queryId];",
          "203:       if (typeof cb == 'function') {",
          "204:         cb(msg, handle);",
          "205:       }",
          "206:       delete queryCallbacks[msg._queryId];",
          "207:     }",
          "212: function queryMaster(msg, cb) {",
          "213:   assert(cluster.isWorker);",
          "215:   debug('send ' + JSON.stringify(msg));",
          "218:   msg._queryId = (++queryIds);",
          "219:   msg._workerId = workerId;",
          "222:   if (cb) {",
          "223:     queryCallbacks[msg._queryId] = cb;",
          "227:   process.send(msg);",
          "233: cluster._getServer = function(address, port, addressType, cb) {",
          "236:   queryMaster({",
          "241:   }, function(msg, handle) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "752: function listen(self, address, port, addressType) {",
          "755:       self._handle = handle;",
          "756:       self._listen2(address, port, addressType);",
          "757:     });",
          "",
          "[Removed Lines]",
          "753:   if (process.env.NODE_WORKER_ID) {",
          "754:     require('cluster')._getServer(address, port, addressType, function(handle) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         var cluster = NativeModule.require('cluster');",
          "92:       }",
          "94:       var Module = NativeModule.require('module');",
          "",
          "[Removed Lines]",
          "89:       if (process.env.NODE_WORKER_ID) {",
          "91:         cluster._startWorker();",
          "",
          "[Added Lines]",
          "89:       if (process.env.NODE_UNIQUE_ID) {",
          "91:         cluster._setupWorker();",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-internal.js||test/simple/test-child-process-internal.js": [
          "File: test/simple/test-child-process-internal.js -> test/simple/test-child-process-internal.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "26: var PREFIX = 'NODE_';",
          "27: var normal = {cmd: 'foo' + PREFIX};",
          "28: var internal = {cmd: PREFIX + 'bar'};",
          "30: if (process.argv[2] === 'child') {",
          "32:   process.send(normal);",
          "35:   process.send(internal);",
          "37:   process.exit(0);",
          "39: } else {",
          "41:   var fork = require('child_process').fork;",
          "42:   var child = fork(process.argv[1], ['child']);",
          "44:   var gotNormal;",
          "45:   child.once('message', function(data) {",
          "46:     gotNormal = data;",
          "47:   });",
          "49:   var gotInternal;",
          "50:   child.once('inernalMessage', function(data) {",
          "51:     gotInternal = data;",
          "52:   });",
          "54:   process.on('exit', function() {",
          "55:     assert.deepEqual(gotNormal, normal);",
          "56:     assert.deepEqual(gotInternal, internal);",
          "57:   });",
          "58: }",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-basic.js||test/simple/test-cluster-basic.js": [
          "File: test/simple/test-cluster-basic.js -> test/simple/test-cluster-basic.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var common = require('../common');",
          "24: var assert = require('assert');",
          "25: var cluster = require('cluster');",
          "27: function forEach(obj, fn) {",
          "28:   Object.keys(obj).forEach(function(name, index) {",
          "29:     fn(obj[name], name, index);",
          "30:   });",
          "31: }",
          "34: if (cluster.isWorker) {",
          "35:   var http = require('http');",
          "36:   http.Server(function() {",
          "38:   }).listen(common.PORT, '127.0.0.1');",
          "39: }",
          "41: else if (cluster.isMaster) {",
          "43:   assert.equal('NODE_UNIQUE_ID' in process.env, false,",
          "44:       'cluster.isMaster should not be true when NODE_UNIQUE_ID is set');",
          "46:   var checks = {",
          "47:     cluster: {",
          "48:       events: {",
          "49:         fork: false,",
          "50:         online: false,",
          "51:         listening: false,",
          "52:         death: false",
          "53:       },",
          "54:       equal: {",
          "55:         fork: false,",
          "56:         online: false,",
          "57:         listening: false,",
          "58:         death: false",
          "59:       }",
          "60:     },",
          "62:     worker: {",
          "63:       events: {",
          "64:         online: false,",
          "65:         listening: false,",
          "66:         death: false",
          "67:       },",
          "68:       equal: {",
          "69:         online: false,",
          "70:         listening: false,",
          "71:         death: false",
          "72:       },",
          "73:       states: {",
          "74:         none: false,",
          "75:         online: false,",
          "76:         listening: false,",
          "77:         dead: false",
          "78:       }",
          "79:     }",
          "80:   };",
          "82:   var worker;",
          "83:   var stateNames = Object.keys(checks.worker.states);",
          "86:   forEach(checks.cluster.events, function(bool, name, index) {",
          "89:     cluster.on(name, function(/* worker */) {",
          "92:       checks.cluster.events[name] = true;",
          "95:       checks.cluster.equal[name] = worker === arguments[0];",
          "98:       var state = stateNames[index];",
          "99:       checks.worker.states[state] = (state === worker.state);",
          "100:     });",
          "101:   });",
          "104:   cluster.on('listening', function() {",
          "105:     worker.destroy();",
          "106:   });",
          "109:   cluster.on('death', function() {",
          "110:     process.exit(0);",
          "111:   });",
          "114:   worker = cluster.fork();",
          "115:   assert.ok(worker instanceof cluster.Worker,",
          "116:       'the worker is not a instance of the Worker constructor');",
          "119:   forEach(checks.worker.events, function(bool, name, index) {",
          "120:     worker.on(name, function() {",
          "122:       checks.worker.events[name] = true;",
          "125:       checks.worker.equal[name] = worker === arguments[0];",
          "126:     });",
          "127:   });",
          "130:   process.once('exit', function() {",
          "132:     forEach(checks.cluster.events, function(check, name) {",
          "133:       assert.ok(check, 'The cluster event \"' + name + '\" on the cluster ' +",
          "134:                 'object did not fire');",
          "135:     });",
          "138:     forEach(checks.cluster.equal, function(check, name) {",
          "139:       assert.ok(check, 'The cluster event \"' + name + '\" did not emit ' +",
          "140:                 'with corrent argument');",
          "141:     });",
          "144:     forEach(checks.worker.states, function(check, name) {",
          "145:       assert.ok(check, 'The worker state \"' + name + '\" was not set to true');",
          "146:     });",
          "149:     forEach(checks.worker.events, function(check, name) {",
          "150:       assert.ok(check, 'The worker event \"' + name + '\" on the worker object ' +",
          "151:                 'did not fire');",
          "152:     });",
          "155:     forEach(checks.worker.equal, function(check, name) {",
          "156:       assert.ok(check, 'The worker event \"' + name + '\" did not emit with ' +",
          "157:                 'corrent argument');",
          "158:     });",
          "159:   });",
          "161: }",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-fork-env.js||test/simple/test-cluster-fork-env.js": [
          "File: test/simple/test-cluster-fork-env.js -> test/simple/test-cluster-fork-env.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var cluster = require('cluster');",
          "27: if (cluster.isWorker) {",
          "30:     prop: process.env['cluster_test_prop'],",
          "31:     overwrite: process.env['cluster_test_overwrite']",
          "32:   });",
          "",
          "[Removed Lines]",
          "28:   process.send({",
          "29:     testcase: true,",
          "",
          "[Added Lines]",
          "28:   cluster.worker.send({",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     overwrite: false",
          "39:   };",
          "43:   process.env['cluster_test_overwrite'] = 'old';",
          "46:   var worker = cluster.fork({",
          "47:     'cluster_test_prop': 'custom',",
          "48:     'cluster_test_overwrite': 'new'",
          "49:   });",
          "52:   worker.on('message', function(data) {",
          "58:   });",
          "60:   process.once('exit', function() {",
          "",
          "[Removed Lines]",
          "53:     if (data.testcase) {",
          "54:       checks.using = (data.prop === 'custom');",
          "55:       checks.overwrite = (data.overwrite === 'new');",
          "56:       process.exit(0);",
          "57:     }",
          "",
          "[Added Lines]",
          "52:     checks.using = (data.prop === 'custom');",
          "53:     checks.overwrite = (data.overwrite === 'new');",
          "54:     process.exit(0);",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-kill-workers.js||test/simple/test-cluster-kill-workers.js": [
          "File: test/simple/test-cluster-kill-workers.js -> test/simple/test-cluster-kill-workers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   if (cluster.isMaster) {",
          "74:     var worker = cluster.fork();",
          "77:     throw new Error('kill master');",
          "78:   } else {",
          "",
          "[Removed Lines]",
          "75:     process.send({ workerPID: worker.pid });",
          "",
          "[Added Lines]",
          "75:     process.send({ workerPID: worker.process.pid });",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-message.js||test/simple/test-cluster-message.js": [
          "File: test/simple/test-cluster-message.js -> test/simple/test-cluster-message.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var common = require('../common');",
          "24: var assert = require('assert');",
          "25: var cluster = require('cluster');",
          "26: var net = require('net');",
          "28: function forEach(obj, fn) {",
          "29:   Object.keys(obj).forEach(function(name, index) {",
          "30:     fn(obj[name], name, index);",
          "31:   });",
          "32: }",
          "34: if (cluster.isWorker) {",
          "38:   var server = net.Server();",
          "39:   server.on('connection', function(socket) {",
          "42:     process.on('message', function(message) {",
          "43:       socket.write(JSON.stringify({",
          "44:         code: 'received message',",
          "45:         echo: message",
          "46:       }));",
          "47:     });",
          "49:     process.send('message from worker');",
          "50:   });",
          "52:   server.listen(common.PORT, '127.0.0.1');",
          "53: }",
          "55: else if (cluster.isMaster) {",
          "57:   var checks = {",
          "58:     master: {",
          "59:       'receive': false,",
          "60:       'correct': false",
          "61:     },",
          "62:     worker: {",
          "63:       'receive': false,",
          "64:       'correct': false",
          "65:     }",
          "66:   };",
          "69:   var client;",
          "70:   var check = function(type, result) {",
          "71:     checks[type].receive = true;",
          "72:     checks[type].correct = result;",
          "74:     var missing = false;",
          "75:     forEach(checks, function(type) {",
          "76:       if (type.receive === false) missing = true;",
          "77:     });",
          "79:     if (missing === false) {",
          "80:       client.end();",
          "81:     }",
          "82:   };",
          "85:   var worker = cluster.fork();",
          "88:   worker.on('message', function(message) {",
          "89:     check('master', message === 'message from worker');",
          "90:   });",
          "93:   worker.on('listening', function() {",
          "95:     client = net.connect(common.PORT, function() {",
          "98:       worker.send('message from master');",
          "99:     });",
          "101:     client.on('data', function(data) {",
          "103:       data = JSON.parse(data.toString());",
          "105:       if (data.code === 'received message') {",
          "106:         check('worker', data.echo === 'message from master');",
          "107:       } else {",
          "108:         throw new Error('worng TCP message recived: ' + data);",
          "109:       }",
          "110:     });",
          "113:     client.on('end', function() {",
          "114:       worker.destroy();",
          "115:     });",
          "117:     worker.on('death', function() {",
          "118:       process.exit(0);",
          "119:     });",
          "121:   });",
          "123:   process.once('exit', function() {",
          "124:     forEach(checks, function(check, type) {",
          "125:       assert.ok(check.receive, 'The ' + type + ' did not receive any message');",
          "126:       assert.ok(check.correct,",
          "127:                 'The ' + type + ' did not get the correct message');",
          "128:     });",
          "129:   });",
          "130: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48cdbffd24f7357b997e96b6ed4e5d27a999d9dd",
      "candidate_info": {
        "commit_hash": "48cdbffd24f7357b997e96b6ed4e5d27a999d9dd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/48cdbffd24f7357b997e96b6ed4e5d27a999d9dd",
        "files": [
          "deps/v8/src/platform-posix.cc"
        ],
        "message": "v8: posix: try to send() whole buffer\n\nRetry the send() syscall after a partial write.",
        "before_after_code_files": [
          "deps/v8/src/platform-posix.cc||deps/v8/src/platform-posix.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/platform-posix.cc||deps/v8/src/platform-posix.cc": [
          "File: deps/v8/src/platform-posix.cc -> deps/v8/src/platform-posix.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "474: int POSIXSocket::Send(const char* data, int len) const {",
          "482: }",
          "",
          "[Removed Lines]",
          "475:   int status;",
          "477:   do",
          "478:     status = send(socket_, data, len, 0);",
          "479:   while (status == -1 && errno == EINTR);",
          "481:   return status;",
          "",
          "[Added Lines]",
          "475:   int written;",
          "477:   for (written = 0; written < len; /* empty */) {",
          "478:     int status = send(socket_, data + written, len - written, 0);",
          "479:     if (status == 0) {",
          "480:       break;",
          "481:     } else if (status > 0) {",
          "482:       written += status;",
          "483:     } else if (errno == EINTR) {",
          "485:     } else {",
          "486:       return -1;",
          "487:     }",
          "488:   }",
          "490:   return written;",
          "",
          "---------------"
        ]
      }
    }
  ]
}