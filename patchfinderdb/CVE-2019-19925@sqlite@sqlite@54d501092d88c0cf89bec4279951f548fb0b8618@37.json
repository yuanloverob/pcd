{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "24545d23009160f184ce9c144025e9440ee4da08",
      "candidate_info": {
        "commit_hash": "24545d23009160f184ce9c144025e9440ee4da08",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/24545d23009160f184ce9c144025e9440ee4da08",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Keep the temp_store_directory and data_store_directory pragmas even when compiling with SQLITE_OMIT_DEPRECATED.\n\nFossilOrigin-Name: 93386a7c97f27df69f79052ef4d80143bb6832a806885249c315d226b2a256b2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 95d338124be2e0e18f17354b28f4320336202f1a4ec1177df753b2800e954bfb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: #endif",
          "220: #endif",
          "221: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "223:  {/* zName:     */ \"data_store_directory\",",
          "228: #endif",
          "230: #if !defined(SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS)",
          "231:  {/* zName:     */ \"data_version\",",
          "",
          "[Removed Lines]",
          "222: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "229: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608:  {/* zName:     */ \"temp_store_directory\",",
          "613: #endif",
          "615: #if defined(SQLITE_HAS_CODEC)",
          "616:  {/* zName:     */ \"textkey\",",
          "",
          "[Removed Lines]",
          "605: #endif",
          "606: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "607: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "614: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   NAME: temp_store_directory",
          "212:   FLAG: NoColumns1",
          "213:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "216:   NAME: data_store_directory",
          "217:   FLAG: NoColumns1",
          "218:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "221:   NAME: lock_proxy_file",
          "222:   FLAG: NoColumns1",
          "",
          "[Removed Lines]",
          "214:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "219:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ea0443c2ddb712d15c5ca7b505da947482af280",
      "candidate_info": {
        "commit_hash": "1ea0443c2ddb712d15c5ca7b505da947482af280",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1ea0443c2ddb712d15c5ca7b505da947482af280",
        "files": [
          "ext/fts3/fts3_write.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/prepare.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/trigger.c",
          "test/fts3aa.test"
        ],
        "message": "Add new sqlite3_prepare_v3() flag SQLITE_PREPARE_NO_VTAB, for preparing statements that are not allowed to use any virtual tables. Use this to prevent circular references in triggers on virtual table shadow tables from causing resource leaks.\n\nFossilOrigin-Name: 25666e3d03950caf753295cdb55df162e07dbcf6840b05875c6e0b127c469ecb",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/prepare.c||src/prepare.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "test/fts3aa.test||test/fts3aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:   pStmt = p->aStmt[eStmt];",
          "398:   if( !pStmt ){",
          "399:     char *zSql;",
          "400:     if( eStmt==SQL_CONTENT_INSERT ){",
          "401:       zSql = sqlite3_mprintf(azSql[eStmt], p->zDb, p->zName, p->zWriteExprlist);",
          "402:     }else if( eStmt==SQL_SELECT_CONTENT_BY_ROWID ){",
          "403:       zSql = sqlite3_mprintf(azSql[eStmt], p->zReadExprlist);",
          "404:     }else{",
          "405:       zSql = sqlite3_mprintf(azSql[eStmt], p->zDb, p->zName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     int f = SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB;",
          "404:       f &= ~SQLITE_PREPARE_NO_VTAB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:     if( !zSql ){",
          "408:       rc = SQLITE_NOMEM;",
          "409:     }else{",
          "412:       sqlite3_free(zSql);",
          "413:       assert( rc==SQLITE_OK || pStmt==0 );",
          "414:       p->aStmt[eStmt] = pStmt;",
          "",
          "[Removed Lines]",
          "410:       rc = sqlite3_prepare_v3(p->db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "411:                               &pStmt, NULL);",
          "",
          "[Added Lines]",
          "412:       rc = sqlite3_prepare_v3(p->db, zSql, -1, f, &pStmt, NULL);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:   if( p->rc==SQLITE_OK ){",
          "730:     if( zSql ){",
          "731:       p->rc = sqlite3_prepare_v3(p->pConfig->db, zSql, -1,",
          "733:     }else{",
          "734:       p->rc = SQLITE_NOMEM;",
          "735:     }",
          "",
          "[Removed Lines]",
          "732:                                  SQLITE_PREPARE_PERSISTENT, ppStmt, 0);",
          "",
          "[Added Lines]",
          "732:           SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB,",
          "733:           ppStmt, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "770:   if( p->rc!=SQLITE_OK ) return;",
          "772:   if( p->pDeleter==0 ){",
          "774:     Fts5Config *pConfig = p->pConfig;",
          "775:     char *zSql = sqlite3_mprintf(",
          "776:         \"DELETE FROM '%q'.'%q_data' WHERE id>=? AND id<=?\",",
          "777:           pConfig->zDb, pConfig->zName",
          "778:     );",
          "790:   }",
          "792:   sqlite3_bind_int64(p->pDeleter, 1, iFirst);",
          "",
          "[Removed Lines]",
          "773:     int rc;",
          "779:     if( zSql==0 ){",
          "780:       rc = SQLITE_NOMEM;",
          "781:     }else{",
          "782:       rc = sqlite3_prepare_v3(pConfig->db, zSql, -1,",
          "783:                               SQLITE_PREPARE_PERSISTENT, &p->pDeleter, 0);",
          "784:       sqlite3_free(zSql);",
          "785:     }",
          "786:     if( rc!=SQLITE_OK ){",
          "787:       p->rc = rc;",
          "788:       return;",
          "789:     }",
          "",
          "[Added Lines]",
          "779:     if( fts5IndexPrepareStmt(p, &p->pDeleter, zSql) ) return;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:     if( zSql==0 ){",
          "137:       rc = SQLITE_NOMEM;",
          "138:     }else{",
          "141:       sqlite3_free(zSql);",
          "142:       if( rc!=SQLITE_OK && pzErrMsg ){",
          "",
          "[Removed Lines]",
          "139:       rc = sqlite3_prepare_v3(pC->db, zSql, -1,",
          "140:                               SQLITE_PREPARE_PERSISTENT, &p->aStmt[eStmt], 0);",
          "",
          "[Added Lines]",
          "139:       int f = SQLITE_PREPARE_PERSISTENT;",
          "140:       if( eStmt>FTS5_STMT_LOOKUP ) f |= SQLITE_PREPARE_NO_VTAB;",
          "141:       rc = sqlite3_prepare_v3(pC->db, zSql, -1, f, &p->aStmt[eStmt], 0);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1abb83d29a06308c96bea379311b390240347c5f81824749348d18ad75840c96",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:   p = sqlite3FindTable(db, zName, zDbase);",
          "356:   if( p==0 ){",
          "358: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "368:     }",
          "369: #endif",
          "377:     }",
          "378:   }",
          "",
          "[Removed Lines]",
          "357:     const char *zMsg = flags & LOCATE_VIEW ? \"no such view\" : \"no such table\";",
          "362:     Module *pMod = (Module*)sqlite3HashFind(&db->aModule, zName);",
          "363:     if( pMod==0 && sqlite3_strnicmp(zName, \"pragma_\", 7)==0 ){",
          "364:       pMod = sqlite3PragmaVtabRegister(db, zName);",
          "365:     }",
          "366:     if( pMod && sqlite3VtabEponymousTableInit(pParse, pMod) ){",
          "367:       return pMod->pEpoTab;",
          "370:     if( (flags & LOCATE_NOERR)==0 ){",
          "371:       if( zDbase ){",
          "372:         sqlite3ErrorMsg(pParse, \"%s: %s.%s\", zMsg, zDbase, zName);",
          "373:       }else{",
          "374:         sqlite3ErrorMsg(pParse, \"%s: %s\", zMsg, zName);",
          "375:       }",
          "376:       pParse->checkSchema = 1;",
          "",
          "[Added Lines]",
          "361:     if( pParse->disableVtab==0 ){",
          "362:       Module *pMod = (Module*)sqlite3HashFind(&db->aModule, zName);",
          "363:       if( pMod==0 && sqlite3_strnicmp(zName, \"pragma_\", 7)==0 ){",
          "364:         pMod = sqlite3PragmaVtabRegister(db, zName);",
          "365:       }",
          "366:       if( pMod && sqlite3VtabEponymousTableInit(pParse, pMod) ){",
          "367:         return pMod->pEpoTab;",
          "368:       }",
          "371:     if( flags & LOCATE_NOERR ) return 0;",
          "372:     pParse->checkSchema = 1;",
          "373:   }else if( IsVirtual(p) && pParse->disableVtab ){",
          "374:     p = 0;",
          "375:   }",
          "377:   if( p==0 ){",
          "378:     const char *zMsg = flags & LOCATE_VIEW ? \"no such view\" : \"no such table\";",
          "379:     if( zDbase ){",
          "380:       sqlite3ErrorMsg(pParse, \"%s: %s.%s\", zMsg, zDbase, zName);",
          "381:     }else{",
          "382:       sqlite3ErrorMsg(pParse, \"%s: %s\", zMsg, zName);",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:     sParse.disableLookaside++;",
          "546:     db->lookaside.bDisable++;",
          "547:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:   sParse.disableVtab = (prepFlags & SQLITE_PREPARE_NO_VTAB)!=0;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3641: #define SQLITE_PREPARE_PERSISTENT              0x01",
          "3642: #define SQLITE_PREPARE_NORMALIZE               0x02",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3648: #define SQLITE_PREPARE_NO_VTAB                 0x04",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "916:   pSubParse->zAuthContext = pTrigger->zName;",
          "917:   pSubParse->eTriggerOp = pTrigger->op;",
          "918:   pSubParse->nQueryLoop = pParse->nQueryLoop;",
          "920:   v = sqlite3GetVdbe(pSubParse);",
          "921:   if( v ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919:   pSubParse->disableVtab = pParse->disableVtab;",
          "",
          "---------------"
        ],
        "test/fts3aa.test||test/fts3aa.test": [
          "File: test/fts3aa.test -> test/fts3aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:   CREATE VIRTUAL TABLE t10 USING fts3(<, b, c);",
          "251: }",
          "253: expand_all_sql db",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: do_execsql_test 10.0 {",
          "254:   CREATE VIRTUAL TABLE z1 USING fts3;",
          "255:   INSERT INTO z1 VALUES('one two three'),('four one five'),('six two five');",
          "256:   CREATE TRIGGER z1r1 AFTER DELETE ON z1_content BEGIN",
          "257:     DELETE FROM z1;",
          "258:   END;",
          "259: }",
          "260: do_catchsql_test 10.1 {",
          "261:   DELETE FROM z1;",
          "262: } {1 {SQL logic error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92107a38dccca75441fb080875e24822ec7a7695",
      "candidate_info": {
        "commit_hash": "92107a38dccca75441fb080875e24822ec7a7695",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92107a38dccca75441fb080875e24822ec7a7695",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test",
          "test/walfault2.test",
          "test/walvfs.test"
        ],
        "message": "Add a few more test cases to walfault2.test and walvfs.test.\n\nFossilOrigin-Name: 3873941c4fb9aa2d0de1129722c5fcdf2be1ea261677d4841ed99f896c778459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test",
          "test/walfault2.test||test/walfault2.test",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d9653380c455b4bf6c371540d677cbde6d17664c58662b5cc9a12929f46192dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:   walmode.test walnoshm.test waloverwrite.test walpersist.test",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "441:   nockpt.test",
          "442: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:   walfault2.test",
          "",
          "---------------"
        ],
        "test/walfault2.test||test/walfault2.test": [
          "File: test/walfault2.test -> test/walfault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2010 May 03",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the operation of the library in",
          "13: # \"PRAGMA journal_mode=WAL\" mode.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/malloc_common.tcl",
          "19: source $testdir/lock_common.tcl",
          "21: ifcapable !wal {finish_test ; return }",
          "22: set testprefix walfault2",
          "24: #-------------------------------------------------------------------------",
          "25: # Inject faults while truncating the wal file.",
          "26: #",
          "27: do_execsql_test 1.0 {",
          "28:   PRAGMA auto_vacuum = 0;",
          "29:   CREATE TABLE t1(a, b);",
          "30:   PRAGMA journal_mode = wal;",
          "31:   WITH s(i) AS (",
          "32:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "33:   )",
          "34:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "35: } {wal}",
          "36: faultsim_save_and_close",
          "38: do_faultsim_test 1 -prep {",
          "39:   faultsim_restore",
          "40:   sqlite3 db file:test.db?psow=0 -uri 1",
          "41:   file_control_powersafe_overwrite db 0",
          "42:   execsql {",
          "43:     PRAGMA wal_checkpoint;",
          "44:     PRAGMA journal_size_limit = 10000;",
          "45:     PRAGMA synchronous = full;",
          "46:   }",
          "47: } -body {",
          "48:   execsql { INSERT INTO t1 VALUES(1,1) }",
          "49: } -test {",
          "50:   faultsim_test_result {0 {}}",
          "51: }",
          "53: #-------------------------------------------------------------------------",
          "54: # Inject faults while rewriting checksums.",
          "55: #",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   PRAGMA auto_vacuum = 0;",
          "59:   CREATE TABLE t1(a, b);",
          "60:   PRAGMA journal_mode = wal;",
          "61:   WITH s(i) AS (",
          "62:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 30",
          "63:   )",
          "64:   INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM s;",
          "65: } {wal}",
          "66: faultsim_save_and_close",
          "68: do_faultsim_test 2 -prep {",
          "69:   faultsim_restore_and_reopen",
          "70:   execsql {",
          "71:     PRAGMA cache_size = 2;",
          "72:     BEGIN;",
          "73:     UPDATE t1 SET a=randomblob(400);",
          "74:     UPDATE t1 SET b=randomblob(400);",
          "75:     UPDATE t1 SET a=randomblob(400);",
          "76:     UPDATE t1 SET b=randomblob(400);",
          "77:     UPDATE t1 SET a=randomblob(400);",
          "78:     UPDATE t1 SET b=randomblob(400);",
          "79:     UPDATE t1 SET a=randomblob(400);",
          "80:     UPDATE t1 SET b=randomblob(400);",
          "81:   }",
          "82: } -body {",
          "83:   execsql COMMIT",
          "84: } -test {",
          "85:   faultsim_test_result {0 {}}",
          "86: }",
          "90: finish_test",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: #-------------------------------------------------------------------------",
          "239: # Cause an SQLITE_PROTOCOL while attempting to restart the wal file.",
          "240: reset_db",
          "241: tvfs filter {}",
          "242: db close",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:   INSERT INTO t1 VALUES(1);",
          "275: } {1 {locking protocol}}",
          "277: db close",
          "278: tvfs delete",
          "279: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #-------------------------------------------------------------------------",
          "279: # Check that a checkpoint fails if it cannot get the CHECKPOINTER lock",
          "280: #",
          "281: reset_db",
          "282: tvfs filter {}",
          "283: db close",
          "284: sqlite3 db test.db -vfs tvfs",
          "285: do_execsql_test 7.0 {",
          "286:   PRAGMA auto_vacuum = 0;",
          "287:   PRAGMA page_size = 1024;",
          "288:   CREATE TABLE t1(x);",
          "289:   PRAGMA journal_mode = wal;",
          "290:   WITH s(i) AS (",
          "291:       SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "292:   )",
          "293:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "294: } {wal}",
          "296: tvfs script xShmLock",
          "297: tvfs filter xShmLock",
          "298: proc xShmLock {method file handle spec} {",
          "299:   if {$spec==\"1 1 lock exclusive\"} {",
          "300:     return SQLITE_BUSY",
          "301:   }",
          "302:   return SQLITE_OK",
          "303: }",
          "305: do_execsql_test 7.1 {",
          "306:   PRAGMA wal_checkpoint",
          "307: } {1 -1 -1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7648f02e02aa989ffb91227b8bb4466a76304bc",
      "candidate_info": {
        "commit_hash": "a7648f02e02aa989ffb91227b8bb4466a76304bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a7648f02e02aa989ffb91227b8bb4466a76304bc",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Enhancements to fuzzcheck on unix so that it captures signals and prints the current test file and test number prior to terminating.\n\nFossilOrigin-Name: ae7cbb246bff3717c283869ccf27ce83611422f3801176819465a8d96f6481bf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 519864da8bb671941a64bf333c2086ad9a068b5f85759e7abd368f0706d3aefd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: static void fatalError(const char *zFormat, ...){",
          "150:   va_list ap;",
          "156:   va_start(ap, zFormat);",
          "157:   vfprintf(stderr, zFormat, ap);",
          "158:   va_end(ap);",
          "",
          "[Removed Lines]",
          "151:   if( g.zTestName[0] ){",
          "152:     fprintf(stderr, \"%s (%s): \", g.zArgv0, g.zTestName);",
          "153:   }else{",
          "154:     fprintf(stderr, \"%s: \", g.zArgv0);",
          "155:   }",
          "",
          "[Added Lines]",
          "152:   fprintf(stderr, \"%s\", g.zArgv0);",
          "153:   if( g.zDbFile ) fprintf(stderr, \" %s\", g.zDbFile);",
          "154:   if( g.zTestName[0] ) fprintf(stderr, \" (%s)\", g.zTestName);",
          "155:   fprintf(stderr, \": \");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161: }",
          "166: #ifdef __unix__",
          "170: }",
          "171: #endif",
          "",
          "[Removed Lines]",
          "167: static void timeoutHandler(int NotUsed){",
          "168:   (void)NotUsed;",
          "169:   fatalError(\"timeout\\n\");",
          "",
          "[Added Lines]",
          "167: static void signalHandler(int signum){",
          "168:   const char *zSig;",
          "169:   if( signum==SIGABRT ){",
          "170:     zSig = \"abort\";",
          "171:   }else if( signum==SIGALRM ){",
          "172:     zSig = \"timeout\";",
          "173:   }else if( signum==SIGSEGV ){",
          "174:     zSig = \"segfault\";",
          "175:   }else{",
          "176:     zSig = \"signal\";",
          "177:   }",
          "178:   fatalError(zSig);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1360:   sqlite3_initialize();",
          "1361:   iBegin = timeOfDay();",
          "1362: #ifdef __unix__",
          "1364: #endif",
          "1365:   g.zArgv0 = argv[0];",
          "1366:   openFlags4Data = SQLITE_OPEN_READONLY;",
          "",
          "[Removed Lines]",
          "1363:   signal(SIGALRM, timeoutHandler);",
          "",
          "[Added Lines]",
          "1372:   signal(SIGALRM, signalHandler);",
          "1373:   signal(SIGSEGV, signalHandler);",
          "1374:   signal(SIGABRT, signalHandler);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1508:   for(iSrcDb=0; iSrcDb<nSrcDb; iSrcDb++){",
          "1509:     rc = sqlite3_open_v2(azSrcDb[iSrcDb], &db,",
          "1510:                          openFlags4Data, pDfltVfs->zName);",
          "1511:     if( rc ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1520:     g.zDbFile = azSrcDb[iSrcDb];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
      "candidate_info": {
        "commit_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Avoid reading off the front of a page buffer when balancing a corrupt btree page.\n\nFossilOrigin-Name: cb50509020d952fa9efed8df7fa08b07b71ae9bdbdefea216b6e660863291039",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 824f93246988ffa213bbd41a7de08886999b1a8ae00fdf6b9767acb6e3ec6a1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6663:     assert( idx >= pPage->cellOffset+2*pPage->nCell+2 || CORRUPT_DB );",
          "6664:     assert( idx+sz <= (int)pPage->pBt->usableSize );",
          "6665:     pPage->nFree -= (u16)(2 + sz);",
          "6667:     if( iChild ){",
          "6668:       put4byte(&data[idx], iChild);",
          "6669:     }",
          "6670:     pIns = pPage->aCellIdx + i*2;",
          "6671:     memmove(pIns+2, pIns, 2*(pPage->nCell - i));",
          "",
          "[Removed Lines]",
          "6666:     memcpy(&data[idx], pCell, sz);",
          "",
          "[Added Lines]",
          "6672:       memcpy(&data[idx+4], pCell+4, sz-4);",
          "6674:     }else{",
          "6675:       memcpy(&data[idx], pCell, sz);",
          "",
          "---------------"
        ]
      }
    }
  ]
}