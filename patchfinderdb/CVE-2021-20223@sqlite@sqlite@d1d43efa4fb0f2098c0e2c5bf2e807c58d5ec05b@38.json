{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9ed322d6c3c2562dffd590c59dfc8f83c31937ea",
      "candidate_info": {
        "commit_hash": "9ed322d6c3c2562dffd590c59dfc8f83c31937ea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ed322d6c3c2562dffd590c59dfc8f83c31937ea",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/sqliteInt.h",
          "src/update.c",
          "test/upfrom2.test"
        ],
        "message": "Fix various bugs in new feature on this branch.\n\nFossilOrigin-Name: 823ba94e29dece1687e28711e503a1f56d392c306b0cbc0a20548180834530d1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "test/upfrom2.test||test/upfrom2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f353a1a613bb7ad8cedcda377a7fe6fd05ee03b1f50665b00b84a868a71c5bec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){",
          "118:   pDest->eDest = (u8)eDest;",
          "119:   pDest->iSDParm = iParm;",
          "120:   pDest->zAffSdst = 0;",
          "121:   pDest->iSdst = 0;",
          "122:   pDest->nSdst = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   pDest->iSDParm2 = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1154:       break;",
          "1155:     }",
          "1162:     case SRT_Set: {",
          "1163:       if( pSort ){",
          "",
          "[Removed Lines]",
          "1161:     case SRT_ISet:",
          "",
          "[Added Lines]",
          "1158:     case SRT_Upfrom: {",
          "1159:       assert( pSort==0 );",
          "1160:       int i2 = pDest->iSDParm2;",
          "1161:       int r1 = sqlite3GetTempReg(pParse);",
          "1162:       sqlite3VdbeAddOp3(v, OP_MakeRecord,regResult+(i2<0),nResultCol-(i2<0),r1);",
          "1163:       if( i2<0 ){",
          "1164:         sqlite3VdbeAddOp3(v, OP_Insert, iParm, r1, regResult);",
          "1165:       }else{",
          "1166:         sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iParm, r1, regResult, i2);",
          "1167:       }",
          "1168:       break;",
          "1169:     }",
          "1171: #ifndef SQLITE_OMIT_SUBQUERY",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1168:         pushOntoSorter(",
          "1169:             pParse, pSort, p, regResult, regOrig, nResultCol, nPrefixReg);",
          "1170:       }else{",
          "1172:         int r1 = sqlite3GetTempReg(pParse);",
          "1181:         sqlite3ReleaseTempReg(pParse, r1);",
          "1182:       }",
          "1183:       break;",
          "1184:     }",
          "1189:     case SRT_Exists: {",
          "",
          "[Removed Lines]",
          "1171:         int bITab = (eDest==SRT_ISet);",
          "1173:         sqlite3VdbeAddOp4(v, OP_MakeRecord, regResult+bITab, nResultCol-bITab,",
          "1174:             r1, pDest->zAffSdst, 0",
          "1175:         );",
          "1176:         if( bITab ){",
          "1177:           sqlite3VdbeAddOp3(v, OP_Insert, iParm, r1, regResult);",
          "1178:         }else{",
          "1179:           sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iParm, r1,regResult,nResultCol);",
          "1180:         }",
          "1186: #ifndef SQLITE_OMIT_SUBQUERY",
          "",
          "[Added Lines]",
          "1186:         assert( sqlite3Strlen30(pDest->zAffSdst)==nResultCol );",
          "1187:         sqlite3VdbeAddOp4(v, OP_MakeRecord, regResult, nResultCol,",
          "1188:             r1, pDest->zAffSdst, nResultCol);",
          "1189:         sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iParm, r1, regResult, nResultCol);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:             sqlite3Expr(db, TK_ID, pTab->aCol[pPk->aiColumn[i]].zName)",
          "191:       ));",
          "192:     }",
          "194:   }else if( pTab->pSelect ){",
          "195:     pList = sqlite3ExprListAppend(pParse, pList,",
          "196:         sqlite3PExpr(pParse, TK_DOT,",
          "",
          "[Removed Lines]",
          "193:     eDest = SRT_Set;",
          "",
          "[Added Lines]",
          "193:     eDest = SRT_Upfrom;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:           sqlite3Expr(db, TK_ID, pTab->zName),",
          "205:           sqlite3Expr(db, TK_ID, \"_rowid_\")",
          "206:     ));",
          "208:   }",
          "209:   for(i=0; i<pChanges->nExpr; i++){",
          "210:     pList = sqlite3ExprListAppend(pParse, pList,",
          "",
          "[Removed Lines]",
          "207:     eDest = IsVirtual(pTab) ? SRT_Table : SRT_ISet;",
          "",
          "[Added Lines]",
          "207:     eDest = IsVirtual(pTab) ? SRT_Table : SRT_Upfrom;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:   }",
          "214:   pSelect = sqlite3SelectNew(pParse, pList, pSrc, pWhere2, 0, 0, 0, 0, 0);",
          "215:   sqlite3SelectDestInit(&dest, eDest, iEph);",
          "216:   sqlite3Select(pParse, pSelect, &dest);",
          "217:   sqlite3SelectDelete(db, pSelect);",
          "218: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:   dest.iSDParm2 = (pPk ? pPk->nKeyCol : -1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "880:       if( pPk ){",
          "882:         VdbeCoverage(v);",
          "883:       }else{",
          "884:         sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, labelContinue,regOldRowid);",
          "",
          "[Removed Lines]",
          "881:         sqlite3VdbeAddOp4Int(v, OP_NotFound,iDataCur,labelContinue,regKey,nKey);",
          "",
          "[Added Lines]",
          "882:         int p3, p4;",
          "883:         if( nChangeFrom ){",
          "884:           p3 = iPk;",
          "885:           p4 = nPk;",
          "886:         }else{",
          "887:           p3 = regKey;",
          "888:           p4 = nKey;",
          "889:         }",
          "890:         sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, labelContinue, p3, p4);",
          "",
          "---------------"
        ],
        "test/upfrom2.test||test/upfrom2.test": [
          "File: test/upfrom2.test -> test/upfrom2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 April 29",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix upfrom2",
          "17: if 0 {",
          "18: do_execsql_test 0.0 {",
          "19:   CREATE TABLE t1 (a PRIMARY KEY, b, c) WITHOUT ROWID;",
          "20: }",
          "21: explain_i { REPLACE INTO t1 VALUES('one', 'two', 'three'); }",
          "22: breakpoint",
          "23: execsql {",
          "24:   REPLACE INTO t1 VALUES('one', 'two', 'three');",
          "25:   REPLACE INTO t1 VALUES('one', 'two', 'four');",
          "26: }",
          "27: do_execsql_test x {",
          "28:   SELECT * FROM t1",
          "29: } {one two four}",
          "30: exit",
          "31: }",
          "33: # Test cases:",
          "34: #",
          "35: #   1.*: Test that triggers are fired correctly for UPDATE FROM statements,",
          "36: #        and only once for each row.",
          "37: #",
          "39: foreach {tn wo} {",
          "40:   1 \"\"",
          "41:   2 \"WITHOUT ROWID\"",
          "42: } {",
          "43:   reset_db",
          "45:   eval [string map [list %WO% $wo %TN% $tn] {",
          "46:   do_execsql_test 1.%TN%.0 {",
          "47:     CREATE TABLE log(t TEXT);",
          "48:     CREATE TABLE t1(x PRIMARY KEY, y, z UNIQUE) %WO%;",
          "49:     CREATE INDEX t1y ON t1(y);",
          "51:     INSERT INTO t1 VALUES(1, 'i',   'one');",
          "52:     INSERT INTO t1 VALUES(2, 'ii',  'two');",
          "53:     INSERT INTO t1 VALUES(3, 'iii', 'three');",
          "54:     INSERT INTO t1 VALUES(4, 'iv',  'four');",
          "56:     CREATE TRIGGER tr1 BEFORE UPDATE ON t1 BEGIN",
          "57:       INSERT INTO log VALUES(old.z || '->' || new.z);",
          "58:     END;",
          "59:     CREATE TRIGGER tr2 AFTER UPDATE ON t1 BEGIN",
          "60:       INSERT INTO log VALUES(old.y || '->' || new.y);",
          "61:     END;",
          "62:   }",
          "64:   do_execsql_test 1.%TN%.1 {",
          "65:     WITH data(k, v) AS (",
          "66:       VALUES(3, 'thirty'), (1, 'ten')",
          "67:     )",
          "68:     UPDATE t1 SET z=v FROM data WHERE x=k;",
          "70:     SELECT * FROM t1;",
          "71:     SELECT * FROM log;",
          "72:   } {",
          "73:     1 i ten   2 ii two   3 iii thirty   4 iv four",
          "74:     one->ten        i->i",
          "75:     three->thirty   iii->iii",
          "76:   }",
          "78:   do_execsql_test 1.%TN%.2 {",
          "79:     CREATE TABLE t2(a, b);",
          "80:     CREATE TABLE t3(k, v);",
          "82:     INSERT INTO t3 VALUES(5,   'v');",
          "83:     INSERT INTO t3 VALUES(12, 'xii');",
          "85:     INSERT INTO t2 VALUES(2, 12);",
          "86:     INSERT INTO t2 VALUES(3, 5);",
          "88:     DELETE FROM log;",
          "89:     UPDATE t1 SET y=v FROM t2, t3 WHERE t1.x=t2.a AND t3.k=t2.b;",
          "91:     SELECT * FROM t1;",
          "92:     SELECT * FROM log;",
          "93:   } {",
          "94:     1 i ten   2 xii two   3 v thirty   4 iv four",
          "95:     two->two         ii->xii",
          "96:     thirty->thirty   iii->v",
          "97:   }",
          "99:   do_execsql_test 1.%TN%.3 {",
          "100:     DELETE FROM log;",
          "101:     WITH data(k, v) AS (",
          "102:       VALUES(1, 'seven'), (1, 'eight'), (2, 'eleven'), (2, 'twelve')",
          "103:     )",
          "104:     UPDATE t1 SET z=v FROM data WHERE x=k;",
          "106:     SELECT * FROM t1;",
          "107:     SELECT * FROM log;",
          "108:   } {",
          "109:     1 i eight   2 xii twelve   3 v thirty   4 iv four",
          "110:     ten->eight        i->i",
          "111:     two->twelve       xii->xii",
          "112:   }",
          "113: }]",
          "114: }",
          "118: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "413b94af8931eceb52b329ee0019628eb059e217",
      "candidate_info": {
        "commit_hash": "413b94af8931eceb52b329ee0019628eb059e217",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/413b94af8931eceb52b329ee0019628eb059e217",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/where.c"
        ],
        "message": "An attempt to get the Min/Max optimization working with IN constraints. Not currently working.\n\nFossilOrigin-Name: 4a64c16fb7a07431e534fb9bbcf778646be8a1c718d5d10873fbccb0c867aac7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ccff8cb8267d4c5605484f7a35c1836937f20b3d6879fe84cd84dc24bbbffc77",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6769:         }",
          "6770:         updateAccumulator(pParse, regAcc, pAggInfo);",
          "6771:         if( regAcc ) sqlite3VdbeAddOp2(v, OP_Integer, 1, regAcc);",
          "6777:         sqlite3WhereEnd(pWInfo);",
          "6778:         finalizeAggFunctions(pParse, pAggInfo);",
          "6779:       }",
          "",
          "[Removed Lines]",
          "6772:         if( sqlite3WhereIsOrdered(pWInfo)>0 ){",
          "6773:           sqlite3VdbeGoto(v, sqlite3WhereBreakLabel(pWInfo));",
          "6774:           VdbeComment((v, \"%s() by index\",",
          "6775:                 (minMaxFlag==WHERE_ORDERBY_MIN?\"min\":\"max\")));",
          "6776:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3740:   orderDistinctMask = 0;",
          "3741:   ready = 0;",
          "3742:   eqOpMask = WO_EQ | WO_IS | WO_ISNULL;",
          "3744:   for(iLoop=0; isOrderDistinct && obSat<obDone && iLoop<=nLoop; iLoop++){",
          "3745:     if( iLoop>0 ) ready |= pLoop->maskSelf;",
          "3746:     if( iLoop<nLoop ){",
          "",
          "[Removed Lines]",
          "3743:   if( wctrlFlags & WHERE_ORDERBY_LIMIT ) eqOpMask |= WO_IN;",
          "",
          "[Added Lines]",
          "3743:   if( wctrlFlags & (WHERE_ORDERBY_LIMIT|WHERE_ORDERBY_MAX|WHERE_ORDERBY_MIN) ){",
          "3744:     eqOpMask |= WO_IN;",
          "3745:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4424:             }",
          "4425:           }",
          "4426:         }",
          "4427:       }",
          "4428:     }",
          "4429:     if( (pWInfo->wctrlFlags & WHERE_SORTBYGROUP)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4429:       }else if( pWInfo->nOBSat==1",
          "4430:             && (pWInfo->wctrlFlags & (WHERE_ORDERBY_MIN|WHERE_ORDERBY_MAX))!=0",
          "4431:             ){",
          "4432:         pFrom->aLoop[nLoop-1]->wsFlags |= WHERE_ONEROW;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5328: #endif",
          "5329:     }else{",
          "5330:       sqlite3VdbeResolveLabel(v, pLevel->addrCont);",
          "5331:     }",
          "5332:     if( pLoop->wsFlags & WHERE_IN_ABLE && pLevel->u.in.nIn>0 ){",
          "5333:       struct InLoop *pIn;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5337:       if( pLevel->regBignull ){",
          "5338:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5339:         sqlite3VdbeAddOp2(v, OP_DecrJumpZero, pLevel->regBignull, pLevel->p2-1);",
          "5340:         VdbeCoverage(v);",
          "5341:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbb6e9ff48fd6ee2e638de451e774328d9a5524b",
      "candidate_info": {
        "commit_hash": "fbb6e9ff48fd6ee2e638de451e774328d9a5524b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fbb6e9ff48fd6ee2e638de451e774328d9a5524b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix an assert() in window.c that could fail with some obscure SELECT statements that use window functions.\n\nFossilOrigin-Name: 83dc55679a91bf5d1d13706088ce58eed02b9aad1ad0ae237966e78e0d769663",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1c76f1d8ec0937a2d2e4ce75f98494c953e9621db31945d7e44f45d90d1c3892",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5203:   if( pA==0 || pB==0 ) return 1;",
          "5204:   if( pA->nExpr!=pB->nExpr ) return 1;",
          "5205:   for(i=0; i<pA->nExpr; i++){",
          "5206:     Expr *pExprA = pA->a[i].pExpr;",
          "5207:     Expr *pExprB = pB->a[i].pExpr;",
          "5208:     if( pA->a[i].sortFlags!=pB->a[i].sortFlags ) return 1;",
          "5210:   }",
          "5211:   return 0;",
          "5212: }",
          "",
          "[Removed Lines]",
          "5209:     if( sqlite3ExprCompare(0, pExprA, pExprB, iTab) ) return 1;",
          "",
          "[Added Lines]",
          "5207:     int res;",
          "5211:     if( (res = sqlite3ExprCompare(0, pExprA, pExprB, iTab)) ) return res;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1279: }",
          "1285: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2, int bFilter){",
          "1286:   if( NEVER(p1==0) || NEVER(p2==0) ) return 1;",
          "1287:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "1288:   if( p1->eStart!=p2->eStart ) return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1287:   int res;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1290:   if( p1->eExclude!=p2->eExclude ) return 1;",
          "1291:   if( sqlite3ExprCompare(pParse, p1->pStart, p2->pStart, -1) ) return 1;",
          "1292:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1295:   if( bFilter ){",
          "1297:   }",
          "1298:   return 0;",
          "1299: }",
          "",
          "[Removed Lines]",
          "1293:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "1294:   if( sqlite3ExprListCompare(p1->pOrderBy, p2->pOrderBy, -1) ) return 1;",
          "1296:     if( sqlite3ExprCompare(pParse, p1->pFilter, p2->pFilter, -1) ) return 1;",
          "",
          "[Added Lines]",
          "1295:   if( (res = sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1)) ){",
          "1296:     return res;",
          "1297:   }",
          "1298:   if( (res = sqlite3ExprListCompare(p1->pOrderBy, p2->pOrderBy, -1)) ){",
          "1299:     return res;",
          "1300:   }",
          "1302:     if( (res = sqlite3ExprCompare(pParse, p1->pFilter, p2->pFilter, -1)) ){",
          "1303:       return res;",
          "1304:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1585:     for(i=0; i<nArg; i++){",
          "1586:       if( i!=1 || pFunc->zName!=nth_valueName ){",
          "",
          "[Removed Lines]",
          "1583:     assert( pWin==pMWin || sqlite3WindowCompare(pParse,pWin,pMWin,0)==0 );",
          "",
          "[Added Lines]",
          "1591:     assert( pWin==pMWin || sqlite3WindowCompare(pParse,pWin,pMWin,0)!=1 );",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1577:     OR (SELECT k FROM t2 WHERE (SELECT sum(a) OVER() FROM t1 GROUP BY 1));",
          "1578: } {1 {misuse of window function sum()}}",
          "1580: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1580: #-------------------------------------------------------------------------",
          "1581: reset_db",
          "1582: do_execsql_test 48.0 {",
          "1583:   CREATE TABLE t1(a);",
          "1584:   INSERT INTO t1 VALUES(1);",
          "1585:   INSERT INTO t1 VALUES(2);",
          "1586:   INSERT INTO t1 VALUES(3);",
          "1587:   SELECT (SELECT max(x)OVER(ORDER BY x) + min(x)OVER(ORDER BY x))",
          "1588:     FROM (SELECT (SELECT sum(a) FROM t1) AS x FROM t1);",
          "1589: } {12 12 12}",
          "1591: do_execsql_test 48.1 {",
          "1592:   SELECT (SELECT max(x)OVER(ORDER BY x) + min(x)OVER(ORDER BY x))",
          "1593:     FROM (SELECT (SELECT sum(a) FROM t1 GROUP BY a) AS x FROM t1);",
          "1594: } {2 2 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f04583f041c7b49b0db98d3a653dd0f802b6284",
      "candidate_info": {
        "commit_hash": "2f04583f041c7b49b0db98d3a653dd0f802b6284",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2f04583f041c7b49b0db98d3a653dd0f802b6284",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Work-around for [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96270|GCC bug 96270].\n\nFossilOrigin-Name: 9679c0c61131f0e986551701a64191da0ee0f50880eaa57fe4bf520e3fecf634",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14eed318aa9e6e16d1aa13a9f34e3822aa135c39ba06c77df7743509fed6c95e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   assert( p->flags & (MEM_Int|MEM_Real|MEM_IntReal) );",
          "107:   assert( sz>22 );",
          "108:   if( p->flags & MEM_Int ){",
          "109:     sqlite3Int64ToText(p->u.i, zBuf);",
          "110:   }else{",
          "111:     sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "112:     sqlite3_str_appendf(&acc, \"%!.15g\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: #if GCC_VERSION>=7000000",
          "112:     i64 x;",
          "113:     assert( (p->flags&MEM_Int)*2==sizeof(x) );",
          "114:     memcpy(&x, (char*)&p->u, (p->flags&MEM_Int)*2);",
          "115:     sqlite3Int64ToText(x, zBuf);",
          "116: #else",
          "118: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d31fcd4751745b1fe2e263cd31792debb2e21b52",
      "candidate_info": {
        "commit_hash": "d31fcd4751745b1fe2e263cd31792debb2e21b52",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d31fcd4751745b1fe2e263cd31792debb2e21b52",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Expand upon a comment in os_unix.c. No changes to code.\n\nFossilOrigin-Name: 77933dc4dbe0e0af3b13a14293a8bd684edc5056f4ae9291c6f95d4433bf90ce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0278147a7d2b50bed9f59ed3d3a04ecc6d46f072eb510e463f6707df1d829020",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c"
        ]
      }
    }
  ]
}