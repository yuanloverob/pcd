{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a28ae7d488dfe20855687f5a3ce842196896814a",
      "candidate_info": {
        "commit_hash": "a28ae7d488dfe20855687f5a3ce842196896814a",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a28ae7d488dfe20855687f5a3ce842196896814a",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "x86: support BND prefix. issue #872",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3124:  return false;",
          "3125: }",
          "3128: static bool valid_rep(cs_struct *h, unsigned int opcode)",
          "3129: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3129: static bool valid_bnd(cs_struct *h, unsigned int opcode)",
          "3130: {",
          "3131:  unsigned int id;",
          "3132:  int i = insn_find(insns, ARR_SIZE(insns), opcode, &h->insn_cache);",
          "3133:  if (i != 0) {",
          "3134:   id = insns[i].mapid;",
          "3135:   switch(id) {",
          "3136:    default:",
          "3137:     return false;",
          "3139:    case X86_INS_JAE:",
          "3140:             case X86_INS_JA:",
          "3141:             case X86_INS_JBE:",
          "3142:             case X86_INS_JB:",
          "3143:             case X86_INS_JCXZ:",
          "3144:             case X86_INS_JECXZ:",
          "3145:             case X86_INS_JE:",
          "3146:             case X86_INS_JGE:",
          "3147:             case X86_INS_JG:",
          "3148:             case X86_INS_JLE:",
          "3149:             case X86_INS_JL:",
          "3150:             case X86_INS_JMP:",
          "3151:             case X86_INS_JNE:",
          "3152:             case X86_INS_JNO:",
          "3153:             case X86_INS_JNP:",
          "3154:             case X86_INS_JNS:",
          "3155:             case X86_INS_JO:",
          "3156:             case X86_INS_JP:",
          "3157:             case X86_INS_JRCXZ:",
          "3158:             case X86_INS_JS:",
          "3160:             case X86_INS_CALL:",
          "3161:             case X86_INS_RET:",
          "3162:             case X86_INS_RETF:",
          "3163:             case X86_INS_RETFQ:",
          "3165:     return true;",
          "3166:   }",
          "3167:  }",
          "3170:  return false;",
          "3171: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3260:    if (valid_repne(MI->csh, opcode)) {",
          "3261:     SStream_concat(O, \"repne|\");",
          "3262:     add_cx(MI);",
          "3263:    } else {",
          "3265:     MI->x86_prefix[0] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3309:    } else if (valid_bnd(MI->csh, opcode)) {",
          "3310:     SStream_concat(O, \"bnd|\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "532bc3f328f68e7f7a330a6adcc5b214104b53d1",
      "candidate_info": {
        "commit_hash": "532bc3f328f68e7f7a330a6adcc5b214104b53d1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/532bc3f328f68e7f7a330a6adcc5b214104b53d1",
        "files": [
          "arch/X86/X86GenDisassemblerTables.inc"
        ],
        "message": "Fixes DATA REX_W CALL_PC_REL IMM32 issue (decoded as IMM16) (#883)",
        "before_after_code_files": [
          "arch/X86/X86GenDisassemblerTables.inc||arch/X86/X86GenDisassemblerTables.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86GenDisassemblerTables.inc||arch/X86/X86GenDisassemblerTables.inc": [
          "File: arch/X86/X86GenDisassemblerTables.inc -> arch/X86/X86GenDisassemblerTables.inc"
        ]
      }
    },
    {
      "candidate_hash": "e51eeaef39a97779980c0bc55bf379988f331d35",
      "candidate_info": {
        "commit_hash": "e51eeaef39a97779980c0bc55bf379988f331d35",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/e51eeaef39a97779980c0bc55bf379988f331d35",
        "files": [
          "LEB128.h",
          "MCInst.h",
          "MCInstrDesc.h",
          "MCRegisterInfo.h",
          "MathExtras.h",
          "SStream.c",
          "arch/AArch64/AArch64BaseInfo.h",
          "arch/AArch64/AArch64Disassembler.h",
          "arch/PowerPC/PPCDisassembler.h",
          "arch/Sparc/SparcDisassembler.h",
          "arch/SystemZ/SystemZDisassembler.h",
          "arch/X86/X86Disassembler.h",
          "arch/X86/X86DisassemblerDecoder.h",
          "arch/X86/X86DisassemblerDecoderCommon.h",
          "arch/XCore/XCoreDisassembler.h"
        ],
        "message": "skip stdint.h for windows driver configuration",
        "before_after_code_files": [
          "LEB128.h||LEB128.h",
          "MCInst.h||MCInst.h",
          "MCInstrDesc.h||MCInstrDesc.h",
          "MCRegisterInfo.h||MCRegisterInfo.h",
          "MathExtras.h||MathExtras.h",
          "SStream.c||SStream.c",
          "arch/AArch64/AArch64BaseInfo.h||arch/AArch64/AArch64BaseInfo.h",
          "arch/AArch64/AArch64Disassembler.h||arch/AArch64/AArch64Disassembler.h",
          "arch/PowerPC/PPCDisassembler.h||arch/PowerPC/PPCDisassembler.h",
          "arch/Sparc/SparcDisassembler.h||arch/Sparc/SparcDisassembler.h",
          "arch/SystemZ/SystemZDisassembler.h||arch/SystemZ/SystemZDisassembler.h",
          "arch/X86/X86Disassembler.h||arch/X86/X86Disassembler.h",
          "arch/X86/X86DisassemblerDecoder.h||arch/X86/X86DisassemblerDecoder.h",
          "arch/X86/X86DisassemblerDecoderCommon.h||arch/X86/X86DisassemblerDecoderCommon.h",
          "arch/XCore/XCoreDisassembler.h||arch/XCore/XCoreDisassembler.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "LEB128.h||LEB128.h": [
          "File: LEB128.h -> LEB128.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #ifndef CS_LLVM_SUPPORT_LEB128_H",
          "19: #define CS_LLVM_SUPPORT_LEB128_H",
          "21: #include <stdint.h>",
          "24: static inline uint64_t decodeULEB128(const uint8_t *p, unsigned *n)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "23: #endif",
          "",
          "---------------"
        ],
        "MCInst.h||MCInst.h": [
          "File: MCInst.h -> MCInst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #ifndef CS_MCINST_H",
          "20: #define CS_MCINST_H",
          "22: #include <stdint.h>",
          "24: #include \"include/capstone.h\"",
          "26: typedef struct MCInst MCInst;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "24: #endif",
          "",
          "---------------"
        ],
        "MCInstrDesc.h||MCInstrDesc.h": [
          "File: MCInstrDesc.h -> MCInstrDesc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #ifndef CS_LLVM_MC_MCINSTRDESC_H",
          "19: #define CS_LLVM_MC_MCINSTRDESC_H",
          "21: #include <stdint.h>",
          "22: #include \"include/platform.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "23: #endif",
          "",
          "---------------"
        ],
        "MCRegisterInfo.h||MCRegisterInfo.h": [
          "File: MCRegisterInfo.h -> MCRegisterInfo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #ifndef CS_LLVM_MC_MCREGISTERINFO_H",
          "20: #define CS_LLVM_MC_MCREGISTERINFO_H",
          "22: #include <stdint.h>",
          "23: #include \"include/platform.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "24: #endif",
          "",
          "---------------"
        ],
        "MathExtras.h||MathExtras.h": [
          "File: MathExtras.h -> MathExtras.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #ifndef CS_LLVM_SUPPORT_MATHEXTRAS_H",
          "18: #define CS_LLVM_SUPPORT_MATHEXTRAS_H",
          "20: #include <stdint.h>",
          "22: #ifdef _MSC_VER",
          "23: # include <intrin.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "22: #endif",
          "",
          "---------------"
        ],
        "SStream.c||SStream.c": [
          "File: SStream.c -> SStream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdint.h>",
          "5: #include <stdarg.h>",
          "6: #if defined(CAPSTONE_HAS_OSXKERNEL)",
          "7: #include <libkern/libkern.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "6: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: #endif",
          "11: #include <string.h>",
          "13: #include \"SStream.h\"",
          "14: #include \"cs_priv.h\"",
          "16: #include \"utils.h\"",
          "18: #ifdef _MSC_VER",
          "",
          "[Removed Lines]",
          "15: #include \"myinttypes.h\"",
          "",
          "[Added Lines]",
          "15: #include \"myinttypes.h\"",
          "",
          "---------------"
        ],
        "arch/AArch64/AArch64BaseInfo.h||arch/AArch64/AArch64BaseInfo.h": [
          "File: arch/AArch64/AArch64BaseInfo.h -> arch/AArch64/AArch64BaseInfo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define CS_LLVM_AARCH64_BASEINFO_H",
          "23: #include <ctype.h>",
          "24: #include <stdint.h>",
          "25: #include <string.h>",
          "27: #ifndef __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "26: #endif",
          "",
          "---------------"
        ],
        "arch/AArch64/AArch64Disassembler.h||arch/AArch64/AArch64Disassembler.h": [
          "File: arch/AArch64/AArch64Disassembler.h -> arch/AArch64/AArch64Disassembler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #ifndef CS_AARCH64_DISASSEMBLER_H",
          "5: #define CS_AARCH64_DISASSEMBLER_H",
          "7: #include <stdint.h>",
          "9: #include \"../../include/capstone.h\"",
          "10: #include \"../../MCRegisterInfo.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "9: #endif",
          "",
          "---------------"
        ],
        "arch/PowerPC/PPCDisassembler.h||arch/PowerPC/PPCDisassembler.h": [
          "File: arch/PowerPC/PPCDisassembler.h -> arch/PowerPC/PPCDisassembler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #ifndef CS_PPCDISASSEMBLER_H",
          "5: #define CS_PPCDISASSEMBLER_H",
          "7: #include <stdint.h>",
          "9: #include \"../../include/capstone.h\"",
          "10: #include \"../../MCRegisterInfo.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "9: #endif",
          "",
          "---------------"
        ],
        "arch/Sparc/SparcDisassembler.h||arch/Sparc/SparcDisassembler.h": [
          "File: arch/Sparc/SparcDisassembler.h -> arch/Sparc/SparcDisassembler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #ifndef CS_SPARCDISASSEMBLER_H",
          "5: #define CS_SPARCDISASSEMBLER_H",
          "7: #include <stdint.h>",
          "9: #include \"../../include/capstone.h\"",
          "10: #include \"../../MCRegisterInfo.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "9: #endif",
          "",
          "---------------"
        ],
        "arch/SystemZ/SystemZDisassembler.h||arch/SystemZ/SystemZDisassembler.h": [
          "File: arch/SystemZ/SystemZDisassembler.h -> arch/SystemZ/SystemZDisassembler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #ifndef CS_SYSZDISASSEMBLER_H",
          "5: #define CS_SYSZDISASSEMBLER_H",
          "7: #include <stdint.h>",
          "9: #include \"../../include/capstone.h\"",
          "10: #include \"../../MCRegisterInfo.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "9: #endif",
          "",
          "---------------"
        ],
        "arch/X86/X86Disassembler.h||arch/X86/X86Disassembler.h": [
          "File: arch/X86/X86Disassembler.h -> arch/X86/X86Disassembler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: #ifndef CS_X86_DISASSEMBLER_H",
          "78: #define CS_X86_DISASSEMBLER_H",
          "80: #include <stdint.h>",
          "82: #include \"../../include/capstone.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "82: #endif",
          "",
          "---------------"
        ],
        "arch/X86/X86DisassemblerDecoder.h||arch/X86/X86DisassemblerDecoder.h": [
          "File: arch/X86/X86DisassemblerDecoder.h -> arch/X86/X86DisassemblerDecoder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #else",
          "25: #include <stdio.h>",
          "26: #endif",
          "27: #include <stdint.h>",
          "29: #include \"X86DisassemblerDecoderCommon.h\"",
          "",
          "[Removed Lines]",
          "31: #include <stdint.h>",
          "",
          "[Added Lines]",
          "27: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "29: #endif",
          "",
          "---------------"
        ],
        "arch/X86/X86DisassemblerDecoderCommon.h||arch/X86/X86DisassemblerDecoderCommon.h": [
          "File: arch/X86/X86DisassemblerDecoderCommon.h -> arch/X86/X86DisassemblerDecoderCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #ifndef CS_X86_DISASSEMBLERDECODERCOMMON_H",
          "26: #define CS_X86_DISASSEMBLERDECODERCOMMON_H",
          "28: #include <stdint.h>",
          "30: #define INSTRUCTIONS_SYM  x86DisassemblerInstrSpecifiers",
          "31: #define CONTEXTS_SYM      x86DisassemblerContexts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "30: #endif",
          "",
          "---------------"
        ],
        "arch/XCore/XCoreDisassembler.h||arch/XCore/XCoreDisassembler.h": [
          "File: arch/XCore/XCoreDisassembler.h -> arch/XCore/XCoreDisassembler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #ifndef CS_XCOREDISASSEMBLER_H",
          "5: #define CS_XCOREDISASSEMBLER_H",
          "7: #include <stdint.h>",
          "9: #include \"../../include/capstone.h\"",
          "10: #include \"../../MCRegisterInfo.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #if !defined(_MSC_VER) || !defined(_KERNEL_MODE)",
          "9: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aaf2c49015866a681f0d93f6e77513d6e4385eec",
      "candidate_info": {
        "commit_hash": "aaf2c49015866a681f0d93f6e77513d6e4385eec",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/aaf2c49015866a681f0d93f6e77513d6e4385eec",
        "files": [
          "arch/M68K/M68KDisassembler.c",
          "arch/M68K/M68KDisassembler.h",
          "arch/M68K/M68KInstPrinter.c",
          "bindings/python/test_m68k.py",
          "tests/test_m68k.c"
        ],
        "message": "[M68K] Implemented regs read/write lists",
        "before_after_code_files": [
          "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c",
          "arch/M68K/M68KDisassembler.h||arch/M68K/M68KDisassembler.h",
          "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c",
          "bindings/python/test_m68k.py||bindings/python/test_m68k.py",
          "tests/test_m68k.c||tests/test_m68k.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/M68K/M68KDisassembler.c||arch/M68K/M68KDisassembler.c": [
          "File: arch/M68K/M68KDisassembler.c -> arch/M68K/M68KDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3833:  return 1;",
          "3834: }",
          "3836: static void m68k_setup_internals(m68k_info* info, MCInst* inst, unsigned int pc, unsigned int cpu_type)",
          "3837: {",
          "3838:  info->inst = inst;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3836: static int exists_reg_list(uint16_t *regs, uint8_t count, m68k_reg reg)",
          "3837: {",
          "3838:  uint8_t i;",
          "3840:  for (i = 0; i < count; ++i) {",
          "3841:   if (regs[i] == (uint16_t)reg)",
          "3842:    return 1;",
          "3843:  }",
          "3845:  return 0;",
          "3846: }",
          "3848: static void add_reg_to_rw_list(m68k_info *info, m68k_reg reg, int write)",
          "3849: {",
          "3850:  if (reg == M68K_REG_INVALID)",
          "3851:   return;",
          "3853:  if (write)",
          "3854:  {",
          "3855:   if (exists_reg_list(info->regs_write, info->regs_write_count, reg))",
          "3856:    return;",
          "3858:   info->regs_write[info->regs_write_count++] = (uint16_t)reg;",
          "3859:  }",
          "3860:  else",
          "3861:  {",
          "3862:   if (exists_reg_list(info->regs_read, info->regs_read_count, reg))",
          "3863:    return;",
          "3865:   info->regs_read[info->regs_read_count++] = (uint16_t)reg;",
          "3866:  }",
          "3867: }",
          "3869: static void update_am_reg_list(m68k_info *info, cs_m68k_op *op, int write)",
          "3870: {",
          "3871:  switch (op->address_mode) {",
          "3872:   case M68K_AM_REG_DIRECT_ADDR:",
          "3873:   case M68K_AM_REG_DIRECT_DATA:",
          "3874:    add_reg_to_rw_list(info, op->reg, write);",
          "3875:    break;",
          "3877:   case M68K_AM_REGI_ADDR_POST_INC:",
          "3878:   case M68K_AM_REGI_ADDR_PRE_DEC:",
          "3879:    add_reg_to_rw_list(info, op->reg, 1);",
          "3880:    break;",
          "3882:   case M68K_AM_REGI_ADDR:",
          "3883:   case M68K_AM_REGI_ADDR_DISP:",
          "3884:    add_reg_to_rw_list(info, op->reg, 0);",
          "3885:    break;",
          "3887:   case M68K_AM_AREGI_INDEX_8_BIT_DISP:",
          "3888:   case M68K_AM_AREGI_INDEX_BASE_DISP:",
          "3889:   case M68K_AM_MEMI_POST_INDEX:",
          "3890:   case M68K_AM_MEMI_PRE_INDEX:",
          "3891:   case M68K_AM_PCI_INDEX_8_BIT_DISP:",
          "3892:   case M68K_AM_PCI_INDEX_BASE_DISP:",
          "3893:   case M68K_AM_PC_MEMI_PRE_INDEX:",
          "3894:   case M68K_AM_PC_MEMI_POST_INDEX:",
          "3895:    add_reg_to_rw_list(info, op->mem.index_reg, 0);",
          "3896:    add_reg_to_rw_list(info, op->mem.base_reg, 0);",
          "3897:    break;",
          "3900:   default:",
          "3901:    break;",
          "3902:  }",
          "3903: }",
          "3905: static void update_bits_range(m68k_info *info, m68k_reg reg_start, uint8_t bits, int write)",
          "3906: {",
          "3907:  int i;",
          "3909:  for (i = 0; i < 8; ++i) {",
          "3910:   if (bits & (1 << i)) {",
          "3911:    add_reg_to_rw_list(info, reg_start + i, write);",
          "3912:   }",
          "3913:  }",
          "3914: }",
          "3916: static void update_reg_list_regbits(m68k_info *info, cs_m68k_op *op, int write)",
          "3917: {",
          "3918:  uint32_t bits = op->register_bits;",
          "3919:  update_bits_range(info, M68K_REG_D0, bits & 0xff, write);",
          "3920:  update_bits_range(info, M68K_REG_A0, (bits >> 8) & 0xff, write);",
          "3921:  update_bits_range(info, M68K_REG_FP0, (bits >> 16) & 0xff, write);",
          "3922: }",
          "3924: static void update_op_reg_list(m68k_info *info, cs_m68k_op *op, int write)",
          "3925: {",
          "3926:  switch ((int)op->type) {",
          "3927:   case M68K_OP_REG:",
          "3928:    add_reg_to_rw_list(info, op->reg, write);",
          "3929:    break;",
          "3931:   case M68K_OP_MEM:",
          "3932:    update_am_reg_list(info, op, write);",
          "3933:    break;",
          "3935:   case M68K_OP_REG_BITS:",
          "3936:    update_reg_list_regbits(info, op, write);",
          "3937:    break;",
          "3939:   case M68K_OP_REG_PAIR:",
          "3940:    add_reg_to_rw_list(info, M68K_REG_D0 + op->reg_pair.reg_0, write);",
          "3941:    add_reg_to_rw_list(info, M68K_REG_D0 + op->reg_pair.reg_1, write);",
          "3942:    break;",
          "3943:  }",
          "3944: }",
          "3946: static void build_regs_read_write_counts(m68k_info *info)",
          "3947: {",
          "3948:  int i;",
          "3950:  if (!info->extension.op_count)",
          "3951:   return;",
          "3953:  if (info->extension.op_count == 1) {",
          "3954:   update_op_reg_list(info, &info->extension.operands[0], 1);",
          "3955:  } else {",
          "3957:   update_op_reg_list(info, &info->extension.operands[0], 0);",
          "3960:   for (i = 1; i < info->extension.op_count; ++i)",
          "3961:    update_op_reg_list(info, &info->extension.operands[i], 1);",
          "3962:  }",
          "3963: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3913:  m68k_info *info = (m68k_info*)handle->printer_info;",
          "3915:  info->groups_count = 0;",
          "3916:  info->code = code;",
          "3917:  info->code_len = code_len;",
          "3918:  info->baseAddress = address;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4045:  info->regs_read_count = 0;",
          "4046:  info->regs_write_count = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3936:   return false;",
          "3937:  }",
          "3939: #ifdef M68K_DEBUG",
          "3940:  SStream_Init(&ss);",
          "3941:  M68K_printInst(instr, &ss, info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4070:  build_regs_read_write_counts(info);",
          "",
          "---------------"
        ],
        "arch/M68K/M68KDisassembler.h||arch/M68K/M68KDisassembler.h": [
          "File: arch/M68K/M68KDisassembler.h -> arch/M68K/M68KDisassembler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  unsigned int type;",
          "19:  cs_m68k extension;",
          "20:  uint8_t groups[8];",
          "21:  uint8_t groups_count;",
          "22: } m68k_info;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  uint16_t regs_read[12]; // list of implicit registers read by this insn",
          "21:  uint8_t regs_read_count; // number of implicit registers read by this insn",
          "22:  uint16_t regs_write[20]; // list of implicit registers modified by this insn",
          "23:  uint8_t regs_write_count; // number of implicit registers modified by this insn",
          "",
          "---------------"
        ],
        "arch/M68K/M68KInstPrinter.c||arch/M68K/M68KInstPrinter.c": [
          "File: arch/M68K/M68KInstPrinter.c -> arch/M68K/M68KInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: }",
          "234: #endif",
          "236: void M68K_printInst(MCInst* MI, SStream* O, void* PrinterInfo)",
          "237: {",
          "238: #ifndef CAPSTONE_DIET",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: #define m68k_sizeof_array(array) (int)(sizeof(array)/sizeof(array[0]))",
          "237: #define m68k_min(a, b) (a < b) ? a : b",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:  detail = MI->flat_insn->detail;",
          "245:  if (detail) {",
          "246:   memcpy(&detail->m68k, ext, sizeof(cs_m68k));",
          "251:  }",
          "253:  if (MI->Opcode == M68K_INS_INVALID) {",
          "",
          "[Removed Lines]",
          "247:   memcpy(&detail->groups, &info->groups, info->groups_count);",
          "248:   detail->groups_count = info->groups_count;",
          "249:   detail->regs_read_count = 0;",
          "250:   detail->regs_write_count = 0;",
          "",
          "[Added Lines]",
          "249:   int regs_read_count = m68k_min(m68k_sizeof_array(detail->regs_read), info->regs_read_count);",
          "250:   int regs_write_count = m68k_min(m68k_sizeof_array(detail->regs_write), info->regs_write_count);",
          "251:   int groups_count = m68k_min(m68k_sizeof_array(detail->groups), info->groups_count);",
          "255:   memcpy(&detail->regs_read, &info->regs_read, regs_read_count * sizeof(uint16_t));",
          "256:   detail->regs_read_count = regs_read_count;",
          "258:   memcpy(&detail->regs_write, &info->regs_write, regs_write_count * sizeof(uint16_t));",
          "259:   detail->regs_write_count = regs_write_count;",
          "261:   memcpy(&detail->groups, &info->groups, groups_count);",
          "262:   detail->groups_count = groups_count;",
          "",
          "---------------"
        ],
        "bindings/python/test_m68k.py||bindings/python/test_m68k.py": [
          "File: bindings/python/test_m68k.py -> bindings/python/test_m68k.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from capstone.m68k import *",
          "7: from xprint import to_hex, to_x",
          "11: all_tests = (",
          "12:         (CS_ARCH_M68K, CS_MODE_BIG_ENDIAN | CS_MODE_M68K_040, M68K_CODE, \"M68K\"),",
          "",
          "[Removed Lines]",
          "9: M68K_CODE = b\"\\xd4\\x40\\x87\\x5a\\x4e\\x71\\x02\\xb4\\xc0\\xde\\xc0\\xde\\x5c\\x00\\x1d\\x80\\x71\\x12\\x01\\x23\\xf2\\x3c\\x44\\x22\\x40\\x49\\x0e\\x56\\x54\\xc5\\xf2\\x3c\\x44\\x00\\x44\\x7a\\x00\\x00\\xf2\\x00\\x0a\\x28\\x4E\\xB9\\x00\\x00\\x00\\x12\\x4E\\x75\"",
          "",
          "[Added Lines]",
          "9: M68K_CODE = b\"\\x4c\\x00\\x54\\x04\\x48\\xe7\\xe0\\x30\\x4c\\xdf\\x0c\\x07\\xd4\\x40\\x87\\x5a\\x4e\\x71\\x02\\xb4\\xc0\\xde\\xc0\\xde\\x5c\\x00\\x1d\\x80\\x71\\x12\\x01\\x23\\xf2\\x3c\\x44\\x22\\x40\\x49\\x0e\\x56\\x54\\xc5\\xf2\\x3c\\x44\\x00\\x44\\x7a\\x00\\x00\\xf2\\x00\\x0a\\x28\\x4e\\xb9\\x00\\x00\\x00\\x12\\x4e\\x75\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:  18: \"Immidate value\",",
          "43: }",
          "45: def print_insn_detail(insn):",
          "46:     if len(insn.operands) > 0:",
          "47:         print(\"\\top_count: %u\" % (len(insn.operands)))",
          "48:         print(\"\\tgroups_count: %u\" % len(insn.groups))",
          "50:     for i, op in enumerate(insn.operands):",
          "51:         if op.type == M68K_OP_REG:",
          "52:             print(\"\\t\\toperands[%u].type: REG = %s\" % (i, insn.reg_name(op.reg)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: def print_read_write_regs(insn):",
          "46:     for m in insn.regs_read:",
          "47:         print(\"\\treading from reg: %s\" % insn.reg_name(m))",
          "49:     for m in insn.regs_write:",
          "50:         print(\"\\twriting to reg:   %s\" % insn.reg_name(m))",
          "57:     print_read_write_regs(insn)",
          "",
          "---------------"
        ],
        "tests/test_m68k.c||tests/test_m68k.c": [
          "File: tests/test_m68k.c -> tests/test_m68k.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  \"Immidate value\",",
          "59: };",
          "61: static void print_insn_detail(cs_insn *ins)",
          "62: {",
          "63:  cs_m68k* m68k;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: static void print_read_write_regs(cs_detail* detail)",
          "62: {",
          "63:  int i;",
          "65:  for (i = 0; i < detail->regs_read_count; ++i)",
          "66:  {",
          "67:   uint16_t reg_id = detail->regs_read[i];",
          "68:   const char* reg_name = cs_reg_name(handle, reg_id);",
          "69:   printf(\"\\treading from reg: %s\\n\", reg_name);",
          "70:  }",
          "72:  for (i = 0; i < detail->regs_write_count; ++i)",
          "73:  {",
          "74:   uint16_t reg_id = detail->regs_write[i];",
          "75:   const char* reg_name = cs_reg_name(handle, reg_id);",
          "76:   printf(\"\\twriting to reg:   %s\\n\", reg_name);",
          "77:  }",
          "78: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  if (m68k->op_count)",
          "74:   printf(\"\\top_count: %u\\n\", m68k->op_count);",
          "76:  printf(\"\\tgroups_count: %u\\n\", detail->groups_count);",
          "78:  for (i = 0; i < m68k->op_count; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:  print_read_write_regs(detail);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:  printf(\"\\n\");",
          "120: }",
          "124: static void test()",
          "125: {",
          "128:  struct platform platforms[] = {",
          "129:   {",
          "130:    CS_ARCH_M68K,",
          "",
          "[Removed Lines]",
          "126: #define M68K_CODE \"\\xd4\\x40\\x87\\x5a\\x4e\\x71\\x02\\xb4\\xc0\\xde\\xc0\\xde\\x5c\\x00\\x1d\\x80\\x71\\x12\\x01\\x23\\xf2\\x3c\\x44\\x22\\x40\\x49\\x0e\\x56\\x54\\xc5\\xf2\\x3c\\x44\\x00\\x44\\x7a\\x00\\x00\\xf2\\x00\\x0a\\x28\\x4E\\xB9\\x00\\x00\\x00\\x12\\x4E\\x75\"",
          "",
          "[Added Lines]",
          "145: #define M68K_CODE \"\\x4C\\x00\\x54\\x04\\x48\\xe7\\xe0\\x30\\x4C\\xDF\\x0C\\x07\\xd4\\x40\\x87\\x5a\\x4e\\x71\\x02\\xb4\\xc0\\xde\\xc0\\xde\\x5c\\x00\\x1d\\x80\\x71\\x12\\x01\\x23\\xf2\\x3c\\x44\\x22\\x40\\x49\\x0e\\x56\\x54\\xc5\\xf2\\x3c\\x44\\x00\\x44\\x7a\\x00\\x00\\xf2\\x00\\x0a\\x28\\x4E\\xB9\\x00\\x00\\x00\\x12\\x4E\\x75\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c3044a67e5b764460097d3954c32fc92405d344",
      "candidate_info": {
        "commit_hash": "5c3044a67e5b764460097d3954c32fc92405d344",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/5c3044a67e5b764460097d3954c32fc92405d344",
        "files": [
          "tests/test_arm.c"
        ],
        "message": "tests: cleanup test_arm.c",
        "before_after_code_files": [
          "tests/test_arm.c||tests/test_arm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test_arm.c||tests/test_arm.c": [
          "File: tests/test_arm.c -> tests/test_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     break;",
          "66:    case ARM_OP_MEM:",
          "67:     printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "69:      printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "70:        i, cs_reg_name(handle, op->mem.base));",
          "72:      printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "73:        i, cs_reg_name(handle, op->mem.index));",
          "74:     if (op->mem.scale != 1)",
          "",
          "[Removed Lines]",
          "68:     if (op->mem.base != X86_REG_INVALID)",
          "71:     if (op->mem.index != X86_REG_INVALID)",
          "",
          "[Added Lines]",
          "68:     if (op->mem.base != ARM_REG_INVALID)",
          "71:     if (op->mem.index != ARM_REG_INVALID)",
          "",
          "---------------"
        ]
      }
    }
  ]
}