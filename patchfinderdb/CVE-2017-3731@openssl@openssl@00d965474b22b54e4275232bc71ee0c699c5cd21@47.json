{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a68382de5e2e528d5026d29666f4abbc7c43743a",
      "candidate_info": {
        "commit_hash": "a68382de5e2e528d5026d29666f4abbc7c43743a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a68382de5e2e528d5026d29666f4abbc7c43743a",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Add a modern linux-x86 config target\n\n'linux-x86' is similar to 'linux-x86_64' but uses -m32 rather than -m64.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1924)\n(cherry picked from commit 7fbc0bfdd7a3c46bc7e36b191d11ab3853555a25)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:     },",
          "740:     #### IA-32 targets...",
          "741:     \"linux-elf\" => {",
          "742:         inherit_from     => [ \"linux-generic32\", asm(\"x86_elf_asm\") ],",
          "743:         cflags           => add(picker(default => \"-DL_ENDIAN\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741:     #### These two targets are a bit aged and are to be used on older Linux",
          "742:     #### machines where gcc doesn't understand -m32 and -m64",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "755:         perlasm_scheme   => \"a.out\",",
          "756:     },",
          "758:     \"linux-x86_64\" => {",
          "759:         inherit_from     => [ \"linux-generic64\", asm(\"x86_64_asm\") ],",
          "760:         cflags           => add(\"-m64 -DL_ENDIAN\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760:     #### X86 / X86_64 targets",
          "761:     \"linux-x86\" => {",
          "762:         inherit_from     => [ \"linux-generic32\", asm(\"x86_asm\") ],",
          "763:         cflags           => add(picker(default => \"-m32 -DL_ENDIAN\",",
          "764:                                        release => \"-fomit-frame-pointer\")),",
          "765:         bn_ops           => \"BN_LLONG\",",
          "766:         perlasm_scheme   => \"elf\",",
          "767:         shared_ldflag    => add(\"-m32\"),",
          "768:     },",
          "769:     \"linux-x86-clang\" => {",
          "770:         inherit_from     => [ \"linux-x86\" ],",
          "771:         cc               => \"clang\",",
          "772:         cxx              => \"clang++\",",
          "773:         cflags           => add(\"-Wextra -Qunused-arguments\"),",
          "774:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4af9f7fe79ff82b90c16969b7e5871435056377b",
      "candidate_info": {
        "commit_hash": "4af9f7fe79ff82b90c16969b7e5871435056377b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4af9f7fe79ff82b90c16969b7e5871435056377b",
        "files": [
          "crypto/init.c"
        ],
        "message": "Ensure that libcrypto and libssl do not unload until the process exits\n\nBecause we use atexit() to cleanup after ourselves, this will cause a\nproblem if we have been dynamically loaded and then unloaded again: the\natexit() handler may no longer be there.\n\nMost modern atexit() implementations can handle this, however there are\nstill difficulties if libssl gets unloaded before libcrypto, because of\nthe atexit() callback that libcrypto makes to libssl.\n\nThe most robust solution seems to be to ensure that libcrypto and libssl\nnever unload. This is done by simply deliberately leaking a dlopen()\nreference to them.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit 5836780f436e03be231ff245f04f2f9f2f0ede91)",
        "before_after_code_files": [
          "crypto/init.c||crypto/init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/init.c||crypto/init.c": [
          "File: crypto/init.c -> crypto/init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <stdlib.h>",
          "24: #include <assert.h>",
          "25: #include <internal/thread_once.h>",
          "27: static int stopped = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <internal/dso.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         return 0;",
          "80:     OPENSSL_cpuid_setup();",
          "81:     base_inited = 1;",
          "82:     return 1;",
          "83: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     {",
          "89:         DSO *dso = NULL;",
          "91:         dso = DSO_dsobyaddr(&base_inited, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "92:         DSO_free(dso);",
          "93:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "575: {",
          "576:     OPENSSL_INIT_STOP *newhand;",
          "578:     newhand = OPENSSL_malloc(sizeof(*newhand));",
          "579:     if (newhand == NULL)",
          "580:         return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:     {",
          "597:         DSO *dso = NULL;",
          "598:         union {",
          "599:             void *sym;",
          "600:             void (*func)(void);",
          "601:         } handlersym;",
          "603:         handlersym.func = handler;",
          "605:         dso = DSO_dsobyaddr(handlersym.sym, DSO_FLAG_NO_UNLOAD_ON_FREE);",
          "606:         DSO_free(dso);",
          "607:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb3b70c0bdc676f857e438754345487d5da1c84e",
      "candidate_info": {
        "commit_hash": "fb3b70c0bdc676f857e438754345487d5da1c84e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fb3b70c0bdc676f857e438754345487d5da1c84e",
        "files": [
          "test/recipes/80-test_cms.t"
        ],
        "message": "add CMS SHA1 signing test\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit c6d67f09f34d8203c5bad7171ed45ec8771c9764)",
        "before_after_code_files": [
          "test/recipes/80-test_cms.t||test/recipes/80-test_cms.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_cms.t||test/recipes/80-test_cms.t": [
          "File: test/recipes/80-test_cms.t -> test/recipes/80-test_cms.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  \"-CAfile\", catfile($smdir, \"smroot.pem\"), \"-out\", \"smtst.txt\" ]",
          "108:     ],",
          "110:     [ \"signed content test streaming S/MIME format, 2 DSA and 2 RSA keys\",",
          "111:       [ \"-sign\", \"-in\", $smcont, \"-nodetach\",",
          "112:  \"-signer\", catfile($smdir, \"smrsa1.pem\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     [ \"signed content S/MIME format, RSA key SHA1\",",
          "111:       [ \"-sign\", \"-in\", $smcont, \"-md\", \"sha1\",",
          "112:  \"-certfile\", catfile($smdir, \"smroot.pem\"),",
          "113:  \"-signer\", catfile($smdir, \"smrsa1.pem\"), \"-out\", \"test.cms\" ],",
          "114:       [ \"-verify\", \"-in\", \"test.cms\",",
          "115:  \"-CAfile\", catfile($smdir, \"smroot.pem\"), \"-out\", \"smtst.txt\" ]",
          "116:     ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6e4fdbf8b44010ba12b72d519e437bbd2da71e6",
      "candidate_info": {
        "commit_hash": "c6e4fdbf8b44010ba12b72d519e437bbd2da71e6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c6e4fdbf8b44010ba12b72d519e437bbd2da71e6",
        "files": [
          "crypto/x86_64cpuid.pl"
        ],
        "message": "crypto/x86_64cpuid.pl: move extended feature detection upwards.\n\nExteneded feature flags were not pulled on AMD processors, as result a\nnumber of extensions were effectively masked on Ryzen. It should have\nbeen reported for Excavator since it implements AVX2 extension, but\napparently nobody noticed or cared...\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit f8418d87e191e46b81e1b9548326ab2876fa0907)",
        "before_after_code_files": [
          "crypto/x86_64cpuid.pl||crypto/x86_64cpuid.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x86_64cpuid.pl||crypto/x86_64cpuid.pl": [
          "File: crypto/x86_64cpuid.pl -> crypto/x86_64cpuid.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  cpuid",
          "71:  mov %eax,%r11d  # max value for standard query level",
          "73:  xor %eax,%eax",
          "74:  cmp \\$0x756e6547,%ebx # \"Genu\"",
          "75:  setne %al",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:  cmp \\$7,%eax",
          "74:  jb .Lno_extended_info",
          "76:  mov \\$7,%eax",
          "77:  xor %ecx,%ecx",
          "78:  cpuid",
          "79:  mov %ebx,8(%rdi)",
          "81: .Lno_extended_info:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:  shr \\$14,%r10d",
          "135:  and \\$0xfff,%r10d  # number of cores -1 per L1D",
          "145: .Lnocacheinfo:",
          "146:  mov \\$1,%eax",
          "147:  cpuid",
          "",
          "[Removed Lines]",
          "137:  cmp \\$7,%r11d",
          "138:  jb .Lnocacheinfo",
          "140:  mov \\$7,%eax",
          "141:  xor %ecx,%ecx",
          "142:  cpuid",
          "143:  mov %ebx,8(%rdi)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1257342e7dfcdb9e80d199396c58286c9056c1c",
      "candidate_info": {
        "commit_hash": "d1257342e7dfcdb9e80d199396c58286c9056c1c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d1257342e7dfcdb9e80d199396c58286c9056c1c",
        "files": [
          "crypto/evp/e_aes.c"
        ],
        "message": "Don't use magic numbers in aes_ocb_cipher()\n\nLots of references to 16 replaced by AES_BLOCK_SIZE. Also a few other style\ntweaks in that function\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit 0ba5a9eaa0a6ae7fc25ee70eefc1f4fbdaf09483)",
        "before_after_code_files": [
          "crypto/evp/e_aes.c||crypto/evp/e_aes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "crypto/evp/e_aes.c||crypto/evp/e_aes.c"
          ],
          "candidate": [
            "crypto/evp/e_aes.c||crypto/evp/e_aes.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
          "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2536:     if (!octx->key_set)",
          "2537:         return -1;",
          "",
          "[Removed Lines]",
          "2539:     if (in) {",
          "",
          "[Added Lines]",
          "2539:     if (in != NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2561:             unsigned int remaining;",
          "2564:             if (remaining > len) {",
          "2565:                 memcpy(buf + (*buf_len), in, len);",
          "",
          "[Removed Lines]",
          "2560:         if (*buf_len) {",
          "2563:             remaining = 16 - (*buf_len);",
          "",
          "[Added Lines]",
          "2560:         if (*buf_len > 0) {",
          "2563:             remaining = AES_BLOCK_SIZE - (*buf_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2574:             len -= remaining;",
          "2575:             in += remaining;",
          "2576:             if (out == NULL) {",
          "2578:                     return -1;",
          "2579:             } else if (EVP_CIPHER_CTX_encrypting(ctx)) {",
          "2581:                     return -1;",
          "2582:             } else {",
          "2584:                     return -1;",
          "2585:             }",
          "2588:         }",
          "",
          "[Removed Lines]",
          "2577:                 if (!CRYPTO_ocb128_aad(&octx->ocb, buf, 16))",
          "2580:                 if (!CRYPTO_ocb128_encrypt(&octx->ocb, buf, out, 16))",
          "2583:                 if (!CRYPTO_ocb128_decrypt(&octx->ocb, buf, out, 16))",
          "2586:             written_len = 16;",
          "2591:         trailing_len = len % 16;",
          "",
          "[Added Lines]",
          "2577:                 if (!CRYPTO_ocb128_aad(&octx->ocb, buf, AES_BLOCK_SIZE))",
          "2580:                 if (!CRYPTO_ocb128_encrypt(&octx->ocb, buf, out,",
          "2581:                                            AES_BLOCK_SIZE))",
          "2584:                 if (!CRYPTO_ocb128_decrypt(&octx->ocb, buf, out,",
          "2585:                                            AES_BLOCK_SIZE))",
          "2588:             written_len = AES_BLOCK_SIZE;",
          "2593:         trailing_len = len % AES_BLOCK_SIZE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2611:         }",
          "2615:             memcpy(buf, in, trailing_len);",
          "2617:         }",
          "",
          "[Removed Lines]",
          "2614:         if (trailing_len) {",
          "",
          "[Added Lines]",
          "2616:         if (trailing_len > 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2626:             if (EVP_CIPHER_CTX_encrypting(ctx)) {",
          "2627:                 if (!CRYPTO_ocb128_encrypt(&octx->ocb, octx->data_buf, out,",
          "2628:                                            octx->data_buf_len))",
          "",
          "[Removed Lines]",
          "2625:         if (octx->data_buf_len) {",
          "",
          "[Added Lines]",
          "2627:         if (octx->data_buf_len > 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2635:             written_len = octx->data_buf_len;",
          "2636:             octx->data_buf_len = 0;",
          "2637:         }",
          "2639:             if (!CRYPTO_ocb128_aad",
          "2640:                 (&octx->ocb, octx->aad_buf, octx->aad_buf_len))",
          "2641:                 return -1;",
          "",
          "[Removed Lines]",
          "2638:         if (octx->aad_buf_len) {",
          "",
          "[Added Lines]",
          "2640:         if (octx->aad_buf_len > 0) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}