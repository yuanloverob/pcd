{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c34f05cca799f39e881809aac9d9c8d5d47af4fb",
      "candidate_info": {
        "commit_hash": "c34f05cca799f39e881809aac9d9c8d5d47af4fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c34f05cca799f39e881809aac9d9c8d5d47af4fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Remove redundant code resulting from a merge error on the previous check-in.\n\nFossilOrigin-Name: 713fe86b8c9f3c9ef8af952019e99ba2f4741326226264de6a66baaeb1803d2a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b855acf1831943b3914491ed0bc333131321930cab480a5281012a3aebbba492",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:         continue;",
          "1499:       }",
          "1502:       if( overrideError!=OE_Default ){",
          "1503:         onError = overrideError;",
          "1504:       }else if( onError==OE_Default ){",
          "",
          "[Removed Lines]",
          "1500:       onError = pTab->aCol[i].notNull;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a97c413f8c26670d3bbf122a6eaa88dea0a0b5c",
      "candidate_info": {
        "commit_hash": "1a97c413f8c26670d3bbf122a6eaa88dea0a0b5c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a97c413f8c26670d3bbf122a6eaa88dea0a0b5c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Fix handling of NULL, text and blob values in window queries that use \"RANGE BETWEEN A FOLLOWING AND B FOLLOWING\", or \"B PRECEDING AND A PRECEDING\", where A>B.\n\nFossilOrigin-Name: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3044cf6917ea8324175fc91657e9a5978af9748f72e1914bc361753f0b2d897d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2745:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2746:   }",
          "2749:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2750:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "",
          "[Removed Lines]",
          "2748:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "",
          "[Added Lines]",
          "2748:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && regStart ){",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:   INSERT INTO t2 VALUES(2, NULL);",
          "352:   INSERT INTO t2 VALUES(3, NULL);",
          "353:   INSERT INTO t2 VALUES(4, NULL);",
          "354: }",
          "358:   WINDOW win AS (",
          "359:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "360:   );",
          "361: }",
          "363: finish_test",
          "",
          "[Removed Lines]",
          "356: execsql_test 7.1 {",
          "357:   SELECT sum(a) OVER win FROM t2",
          "",
          "[Added Lines]",
          "354:   INSERT INTO t2 VALUES(5, 66);",
          "355:   INSERT INTO t2 VALUES(6, 67);",
          "358: foreach {tn f ex} {",
          "359:   1 sum \"\"",
          "360:   2 min \"\"",
          "361:   3 sum \"EXCLUDE CURRENT ROW\"",
          "362:   4 max \"EXCLUDE CURRENT ROW\"",
          "363: } {",
          "364: execsql_test 7.$tn.1 \"",
          "365:   SELECT $f (a) OVER win FROM t2",
          "369: \"",
          "370: execsql_test 7.$tn.2 \"",
          "371:   SELECT $f (a) OVER win FROM t2",
          "372:   WINDOW win AS (",
          "373:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "374:   );",
          "375: \"",
          "376: execsql_test 7.$tn.3 \"",
          "377:   SELECT $f (a) OVER win FROM t2",
          "378:   WINDOW win AS (",
          "379:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "380:   );",
          "381: \"",
          "382: execsql_test 7.$tn.4 \"",
          "383:   SELECT $f (a) OVER win FROM t2",
          "384:   WINDOW win AS (",
          "385:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "386:   );",
          "387: \"",
          "388: execsql_test 7.$tn.5 \"",
          "389:   SELECT $f (a) OVER win FROM t2",
          "390:   WINDOW win AS (",
          "391:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "392:   );",
          "393: \"",
          "395: execsql_test 7.$tn.6 \"",
          "396:   SELECT $f (a) OVER win FROM t2",
          "397:   WINDOW win AS (",
          "398:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "399:   );",
          "400: \"",
          "401: execsql_test 7.$tn.7 \"",
          "402:   SELECT $f (a) OVER win FROM t2",
          "403:   WINDOW win AS (",
          "404:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "405:   );",
          "406: \"",
          "407: execsql_test 7.$tn.8 \"",
          "408:   SELECT $f (a) OVER win FROM t2",
          "409:   WINDOW win AS (",
          "410:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "411:   );",
          "412: \"",
          "413: execsql_test 7.$tn.9 \"",
          "414:   SELECT $f (a) OVER win FROM t2",
          "415:   WINDOW win AS (",
          "416:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "417:   );",
          "418: \"",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6213:   INSERT INTO t2 VALUES(2, NULL);",
          "6214:   INSERT INTO t2 VALUES(3, NULL);",
          "6215:   INSERT INTO t2 VALUES(4, NULL);",
          "6216: } {}",
          "6220:   WINDOW win AS (",
          "6221:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6222:   );",
          "6225: finish_test",
          "",
          "[Removed Lines]",
          "6218: do_execsql_test 7.1 {",
          "6219:   SELECT sum(a) OVER win FROM t2",
          "6223: } {9   9   9   9}",
          "",
          "[Added Lines]",
          "6216:   INSERT INTO t2 VALUES(5, 66);",
          "6217:   INSERT INTO t2 VALUES(6, 67);",
          "6220: do_execsql_test 7.1.1 {",
          "6221:   SELECT sum (a) OVER win FROM t2",
          "6225: } {9   9   9   9   9   9}",
          "6227: do_execsql_test 7.1.2 {",
          "6228:   SELECT sum (a) OVER win FROM t2",
          "6229:   WINDOW win AS (",
          "6230:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6231:   );",
          "6232: } {{}   {}   {}   9   9   9}",
          "6234: do_execsql_test 7.1.3 {",
          "6235:   SELECT sum (a) OVER win FROM t2",
          "6236:   WINDOW win AS (",
          "6237:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6238:   );",
          "6239: } {{}   {}   {}   9   9   9}",
          "6241: do_execsql_test 7.1.4 {",
          "6242:   SELECT sum (a) OVER win FROM t2",
          "6243:   WINDOW win AS (",
          "6244:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6245:   );",
          "6246: } {9   9   9   {}   {}   {}}",
          "6248: do_execsql_test 7.1.5 {",
          "6249:   SELECT sum (a) OVER win FROM t2",
          "6250:   WINDOW win AS (",
          "6251:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6252:   );",
          "6253: } {9   9   9   {}   {}   {}}",
          "6255: do_execsql_test 7.1.6 {",
          "6256:   SELECT sum (a) OVER win FROM t2",
          "6257:   WINDOW win AS (",
          "6258:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6259:   );",
          "6260: } {{}   {}   1   9   9   9}",
          "6262: do_execsql_test 7.1.7 {",
          "6263:   SELECT sum (a) OVER win FROM t2",
          "6264:   WINDOW win AS (",
          "6265:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6266:   );",
          "6267: } {{}   {}   {}   9   9   9}",
          "6269: do_execsql_test 7.1.8 {",
          "6270:   SELECT sum (a) OVER win FROM t2",
          "6271:   WINDOW win AS (",
          "6272:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6273:   );",
          "6274: } {9   9   9   {}   {}   {}}",
          "6276: do_execsql_test 7.1.9 {",
          "6277:   SELECT sum (a) OVER win FROM t2",
          "6278:   WINDOW win AS (",
          "6279:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6280:   );",
          "6281: } {9   9   9   {}   {}   {}}",
          "6283: do_execsql_test 7.2.1 {",
          "6284:   SELECT min (a) OVER win FROM t2",
          "6285:   WINDOW win AS (",
          "6286:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6287:   );",
          "6288: } {2   2   2   2   2   2}",
          "6290: do_execsql_test 7.2.2 {",
          "6291:   SELECT min (a) OVER win FROM t2",
          "6292:   WINDOW win AS (",
          "6293:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6294:   );",
          "6295: } {{}   {}   {}   2   2   2}",
          "6297: do_execsql_test 7.2.3 {",
          "6298:   SELECT min (a) OVER win FROM t2",
          "6299:   WINDOW win AS (",
          "6300:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6301:   );",
          "6302: } {{}   {}   {}   2   2   2}",
          "6304: do_execsql_test 7.2.4 {",
          "6305:   SELECT min (a) OVER win FROM t2",
          "6306:   WINDOW win AS (",
          "6307:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6308:   );",
          "6309: } {2   2   2   {}   {}   {}}",
          "6311: do_execsql_test 7.2.5 {",
          "6312:   SELECT min (a) OVER win FROM t2",
          "6313:   WINDOW win AS (",
          "6314:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6315:   );",
          "6316: } {2   2   2   {}   {}   {}}",
          "6318: do_execsql_test 7.2.6 {",
          "6319:   SELECT min (a) OVER win FROM t2",
          "6320:   WINDOW win AS (",
          "6321:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6322:   );",
          "6323: } {{}   {}   1   2   2   2}",
          "6325: do_execsql_test 7.2.7 {",
          "6326:   SELECT min (a) OVER win FROM t2",
          "6327:   WINDOW win AS (",
          "6328:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6329:   );",
          "6330: } {{}   {}   {}   2   2   2}",
          "6332: do_execsql_test 7.2.8 {",
          "6333:   SELECT min (a) OVER win FROM t2",
          "6334:   WINDOW win AS (",
          "6335:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6336:   );",
          "6337: } {2   2   2   {}   {}   {}}",
          "6339: do_execsql_test 7.2.9 {",
          "6340:   SELECT min (a) OVER win FROM t2",
          "6341:   WINDOW win AS (",
          "6342:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6343:   );",
          "6344: } {2   2   2   {}   {}   {}}",
          "6346: do_execsql_test 7.3.1 {",
          "6347:   SELECT sum (a) OVER win FROM t2",
          "6348:   WINDOW win AS (",
          "6349:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6350:   );",
          "6351: } {9   9   9   9   9   9}",
          "6353: do_execsql_test 7.3.2 {",
          "6354:   SELECT sum (a) OVER win FROM t2",
          "6355:   WINDOW win AS (",
          "6356:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6357:   );",
          "6358: } {{}   {}   {}   9   9   9}",
          "6360: do_execsql_test 7.3.3 {",
          "6361:   SELECT sum (a) OVER win FROM t2",
          "6362:   WINDOW win AS (",
          "6363:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6364:   );",
          "6365: } {{}   {}   {}   9   9   9}",
          "6367: do_execsql_test 7.3.4 {",
          "6368:   SELECT sum (a) OVER win FROM t2",
          "6369:   WINDOW win AS (",
          "6370:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6371:   );",
          "6372: } {9   9   9   {}   {}   {}}",
          "6374: do_execsql_test 7.3.5 {",
          "6375:   SELECT sum (a) OVER win FROM t2",
          "6376:   WINDOW win AS (",
          "6377:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6378:   );",
          "6379: } {9   9   9   {}   {}   {}}",
          "6381: do_execsql_test 7.3.6 {",
          "6382:   SELECT sum (a) OVER win FROM t2",
          "6383:   WINDOW win AS (",
          "6384:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6385:   );",
          "6386: } {{}   {}   1   9   9   9}",
          "6388: do_execsql_test 7.3.7 {",
          "6389:   SELECT sum (a) OVER win FROM t2",
          "6390:   WINDOW win AS (",
          "6391:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6392:   );",
          "6393: } {{}   {}   {}   9   9   9}",
          "6395: do_execsql_test 7.3.8 {",
          "6396:   SELECT sum (a) OVER win FROM t2",
          "6397:   WINDOW win AS (",
          "6398:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6399:   );",
          "6400: } {9   9   9   {}   {}   {}}",
          "6402: do_execsql_test 7.3.9 {",
          "6403:   SELECT sum (a) OVER win FROM t2",
          "6404:   WINDOW win AS (",
          "6405:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6406:   );",
          "6407: } {9   9   9   {}   {}   {}}",
          "6409: do_execsql_test 7.4.1 {",
          "6410:   SELECT max (a) OVER win FROM t2",
          "6411:   WINDOW win AS (",
          "6412:       ORDER BY b NULLS LAST RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING",
          "6413:   );",
          "6414: } {4   4   4   4   4   4}",
          "6416: do_execsql_test 7.4.2 {",
          "6417:   SELECT max (a) OVER win FROM t2",
          "6418:   WINDOW win AS (",
          "6419:       ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6420:   );",
          "6421: } {{}   {}   {}   4   4   4}",
          "6423: do_execsql_test 7.4.3 {",
          "6424:   SELECT max (a) OVER win FROM t2",
          "6425:   WINDOW win AS (",
          "6426:       ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6427:   );",
          "6428: } {{}   {}   {}   4   4   4}",
          "6430: do_execsql_test 7.4.4 {",
          "6431:   SELECT max (a) OVER win FROM t2",
          "6432:   WINDOW win AS (",
          "6433:       ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING",
          "6434:   );",
          "6435: } {4   4   4   {}   {}   {}}",
          "6437: do_execsql_test 7.4.5 {",
          "6438:   SELECT max (a) OVER win FROM t2",
          "6439:   WINDOW win AS (",
          "6440:       ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING",
          "6441:   );",
          "6442: } {4   4   4   {}   {}   {}}",
          "6444: do_execsql_test 7.4.6 {",
          "6445:   SELECT max (a) OVER win FROM t2",
          "6446:   WINDOW win AS (",
          "6447:       ORDER BY b NULLS LAST RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING",
          "6448:   );",
          "6449: } {{}   {}   1   4   4   4}",
          "6451: do_execsql_test 7.4.7 {",
          "6452:   SELECT max (a) OVER win FROM t2",
          "6453:   WINDOW win AS (",
          "6454:       ORDER BY b NULLS LAST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6455:   );",
          "6456: } {{}   {}   {}   4   4   4}",
          "6458: do_execsql_test 7.4.8 {",
          "6459:   SELECT max (a) OVER win FROM t2",
          "6460:   WINDOW win AS (",
          "6461:       ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING",
          "6462:   );",
          "6463: } {4   4   4   {}   {}   {}}",
          "6465: do_execsql_test 7.4.9 {",
          "6466:   SELECT max (a) OVER win FROM t2",
          "6467:   WINDOW win AS (",
          "6468:       ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING",
          "6469:   );",
          "6470: } {4   4   4   {}   {}   {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fcb9f3ad96ea42eb46ff33b5fbd182f51d968b2",
      "candidate_info": {
        "commit_hash": "6fcb9f3ad96ea42eb46ff33b5fbd182f51d968b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6fcb9f3ad96ea42eb46ff33b5fbd182f51d968b2",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts3snippet.test"
        ],
        "message": "Fix a broken assert() in the fts3 snippet code that was failing for queries containging more than 64 phrases.\n\nFossilOrigin-Name: 4c01e0170e113ad052b6c3980beb4be9f1dc03fb3cf34132b90e8b82b23f654e",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3snippet.test||test/fts3snippet.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:       while( iCsr<(iStart+pIter->nSnippet) && iCsr>=iStart ){",
          "435:         int j;",
          "437:         u64 mPos = (u64)1 << (iCsr - iStart);",
          "438:         assert( iCsr>=iStart && (iCsr - iStart)<=64 );",
          "440:         if( (mCover|mCovered)&mPhrase ){",
          "441:           iScore++;",
          "442:         }else{",
          "",
          "[Removed Lines]",
          "436:         u64 mPhrase = (u64)1 << i;",
          "439:         assert( i>=0 && i<=64 );",
          "",
          "[Added Lines]",
          "436:         u64 mPhrase = (u64)1 << (i%64);",
          "439:         assert( i>=0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 00e9a8f2730eb7239bf7fd107c97c409e4f9fbd968510766373440a9079898eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:   }]",
          "562: } {64}",
          "566: set sqlite_fts3_enable_parentheses 0",
          "567: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564: #-------------------------------------------------------------------------",
          "565: # Request a snippet from a query with more than 64 phrases.",
          "566: #",
          "567: do_execsql_test 5.0 {",
          "568:   CREATE VIRTUAL TABLE t5 USING fts3(x);",
          "569:   INSERT INTO t5 VALUES('a1 a2 a3');",
          "570:   INSERT INTO t5 VALUES('a4 a5 a6');",
          "571:   INSERT INTO t5 VALUES('a70 a71 a72');",
          "572: }",
          "574: do_execsql_test 5.1 {",
          "575:   SELECT snippet(t5, '[', ']') FROM t5 WHERE t5 MATCH",
          "576:   'a1 OR a2 OR a3 OR a4 OR a5 OR a6 OR a7 OR a8 OR a9 OR a10 OR ' ||",
          "577:   'a11 OR a12 OR a13 OR a14 OR a15 OR a16 OR a17 OR a18 OR a19 OR a10 OR ' ||",
          "578:   'a21 OR a22 OR a23 OR a24 OR a25 OR a26 OR a27 OR a28 OR a29 OR a20 OR ' ||",
          "579:   'a31 OR a32 OR a33 OR a34 OR a35 OR a36 OR a37 OR a38 OR a39 OR a30 OR ' ||",
          "580:   'a41 OR a42 OR a43 OR a44 OR a45 OR a46 OR a47 OR a48 OR a49 OR a40 OR ' ||",
          "581:   'a51 OR a52 OR a53 OR a54 OR a55 OR a56 OR a57 OR a58 OR a59 OR a50 OR ' ||",
          "582:   'a61 OR a62 OR a63 OR a64 OR a65 OR a66 OR a67 OR a68 OR a69 OR a60 OR ' ||",
          "583:   'a71 OR a72 OR a73 OR a74 OR a75 OR a76 OR a77 OR a78 OR a79 OR a70'",
          "584: } {",
          "585:   {[a1] [a2] [a3]}",
          "586:   {[a4] [a5] [a6]}",
          "587:   {[a70] [a71] [a72]}",
          "588: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52d9a3c2137bac76a826a24d2c466d06f3ac49d4",
      "candidate_info": {
        "commit_hash": "52d9a3c2137bac76a826a24d2c466d06f3ac49d4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/52d9a3c2137bac76a826a24d2c466d06f3ac49d4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Minor performance improvement in vdbeRecordCompareString().\n\nFossilOrigin-Name: 777fec84a5db968e033883920586ec0afef65578be0c1eb3021fce525111edde",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: be01b801fbc258f0ab9542130cec12a5ea5e2d0bf087684a9eda909ad459c211",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4600:     nCmp = MIN( pPKey2->aMem[0].n, nStr );",
          "4601:     res = memcmp(&aKey1[szHdr], pPKey2->aMem[0].z, nCmp);",
          "4604:       res = nStr - pPKey2->aMem[0].n;",
          "4605:       if( res==0 ){",
          "4606:         if( pPKey2->nField>1 ){",
          "",
          "[Removed Lines]",
          "4603:     if( res==0 ){",
          "",
          "[Added Lines]",
          "4603:     if( res>0 ){",
          "4604:       res = pPKey2->r2;",
          "4605:     }else if( res<0 ){",
          "4606:       res = pPKey2->r1;",
          "4607:     }else{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4614:       }else{",
          "4615:         res = pPKey2->r1;",
          "4616:       }",
          "4621:     }",
          "4622:   }",
          "",
          "[Removed Lines]",
          "4617:     }else if( res>0 ){",
          "4618:       res = pPKey2->r2;",
          "4619:     }else{",
          "4620:       res = pPKey2->r1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56785a0a8048e1b7076fae06e7118c1e24633c81",
      "candidate_info": {
        "commit_hash": "56785a0a8048e1b7076fae06e7118c1e24633c81",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56785a0a8048e1b7076fae06e7118c1e24633c81",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix an assert() that might be false for a corrupt database.\n\nFossilOrigin-Name: 0cfb888723fb8ff0763bbc23acb7d21a53f6d1c40661d8468248644281b29d85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aa61435a4c3800f023788081c1342ad6a05a41449a424fa6c039d5ca46072256",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6730:     pPage->nCell++;",
          "6732:     if( (++data[pPage->hdrOffset+4])==0 ) data[pPage->hdrOffset+3]++;",
          "6734: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "6735:     if( pPage->pBt->autoVacuum ){",
          "",
          "[Removed Lines]",
          "6733:     assert( get2byte(&data[pPage->hdrOffset+3])==pPage->nCell );",
          "",
          "[Added Lines]",
          "6733:     assert( get2byte(&data[pPage->hdrOffset+3])==pPage->nCell || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    }
  ]
}