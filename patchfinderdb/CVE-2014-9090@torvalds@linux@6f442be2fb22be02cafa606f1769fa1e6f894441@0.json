{
  "cve_id": "CVE-2014-9090",
  "cve_desc": "The do_double_fault function in arch/x86/kernel/traps.c in the Linux kernel through 3.17.4 does not properly handle faults associated with the Stack Segment (SS) segment register, which allows local users to cause a denial of service (panic) via a modify_ldt system call, as demonstrated by sigreturn_32 in the linux-clock-tests test suite.",
  "repo": "torvalds/linux",
  "patch_hash": "6f442be2fb22be02cafa606f1769fa1e6f894441",
  "patch_info": {
    "commit_hash": "6f442be2fb22be02cafa606f1769fa1e6f894441",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6f442be2fb22be02cafa606f1769fa1e6f894441",
    "files": [
      "arch/x86/include/asm/page_32_types.h",
      "arch/x86/include/asm/page_64_types.h",
      "arch/x86/include/asm/traps.h",
      "arch/x86/kernel/dumpstack_64.c",
      "arch/x86/kernel/entry_64.S",
      "arch/x86/kernel/traps.c"
    ],
    "message": "x86_64, traps: Stop using IST for #SS\n\nOn a 32-bit kernel, this has no effect, since there are no IST stacks.\n\nOn a 64-bit kernel, #SS can only happen in user code, on a failed iret\nto user space, a canonical violation on access via RSP or RBP, or a\ngenuine stack segment violation in 32-bit kernel code.  The first two\ncases don't need IST, and the latter two cases are unlikely fatal bugs,\nand promoting them to double faults would be fine.\n\nThis fixes a bug in which the espfix64 code mishandles a stack segment\nviolation.\n\nThis saves 4k of memory per CPU and a tiny bit of code.\n\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nReviewed-by: Thomas Gleixner <tglx@linutronix.de>\nCc: stable@vger.kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "arch/x86/include/asm/page_32_types.h||arch/x86/include/asm/page_32_types.h",
      "arch/x86/include/asm/page_64_types.h||arch/x86/include/asm/page_64_types.h",
      "arch/x86/include/asm/traps.h||arch/x86/include/asm/traps.h",
      "arch/x86/kernel/dumpstack_64.c||arch/x86/kernel/dumpstack_64.c",
      "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S",
      "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
    ]
  },
  "patch_diff": {
    "arch/x86/include/asm/page_32_types.h||arch/x86/include/asm/page_32_types.h": [
      "File: arch/x86/include/asm/page_32_types.h -> arch/x86/include/asm/page_32_types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #define THREAD_SIZE_ORDER 1",
      "21: #define THREAD_SIZE  (PAGE_SIZE << THREAD_SIZE_ORDER)",
      "24: #define DOUBLEFAULT_STACK 1",
      "25: #define NMI_STACK 0",
      "26: #define DEBUG_STACK 0",
      "",
      "[Removed Lines]",
      "23: #define STACKFAULT_STACK 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "arch/x86/include/asm/page_64_types.h||arch/x86/include/asm/page_64_types.h": [
      "File: arch/x86/include/asm/page_64_types.h -> arch/x86/include/asm/page_64_types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: #define IRQ_STACK_ORDER 2",
      "15: #define IRQ_STACK_SIZE (PAGE_SIZE << IRQ_STACK_ORDER)",
      "24: #define PUD_PAGE_SIZE  (_AC(1, UL) << PUD_SHIFT)",
      "25: #define PUD_PAGE_MASK  (~(PUD_PAGE_SIZE-1))",
      "",
      "[Removed Lines]",
      "17: #define STACKFAULT_STACK 1",
      "18: #define DOUBLEFAULT_STACK 2",
      "19: #define NMI_STACK 3",
      "20: #define DEBUG_STACK 4",
      "21: #define MCE_STACK 5",
      "",
      "[Added Lines]",
      "17: #define DOUBLEFAULT_STACK 1",
      "18: #define NMI_STACK 2",
      "19: #define DEBUG_STACK 3",
      "20: #define MCE_STACK 4",
      "",
      "---------------"
    ],
    "arch/x86/include/asm/traps.h||arch/x86/include/asm/traps.h": [
      "File: arch/x86/include/asm/traps.h -> arch/x86/include/asm/traps.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: #ifdef CONFIG_TRACING",
      "41: asmlinkage void trace_page_fault(void);",
      "42: #define trace_divide_error divide_error",
      "43: #define trace_bounds bounds",
      "44: #define trace_invalid_op invalid_op",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: #define trace_stack_segment stack_segment",
      "",
      "---------------"
    ],
    "arch/x86/kernel/dumpstack_64.c||arch/x86/kernel/dumpstack_64.c": [
      "File: arch/x86/kernel/dumpstack_64.c -> arch/x86/kernel/dumpstack_64.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:   [ DEBUG_STACK-1   ] = \"#DB\",",
      "25:   [ NMI_STACK-1   ] = \"NMI\",",
      "26:   [ DOUBLEFAULT_STACK-1  ] = \"#DF\",",
      "28:   [ MCE_STACK-1   ] = \"#MC\",",
      "29: #if DEBUG_STKSZ > EXCEPTION_STKSZ",
      "30:   [ N_EXCEPTION_STACKS ...",
      "",
      "[Removed Lines]",
      "27:   [ STACKFAULT_STACK-1  ] = \"#SS\",",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S": [
      "File: arch/x86/kernel/entry_64.S -> arch/x86/kernel/entry_64.S",
      "--- Hunk 1 ---",
      "[Context before]",
      "1260: idtentry debug do_debug has_error_code=0 paranoid=1 shift_ist=DEBUG_STACK",
      "1261: idtentry int3 do_int3 has_error_code=0 paranoid=1 shift_ist=DEBUG_STACK",
      "1263: #ifdef CONFIG_XEN",
      "1264: idtentry xen_debug do_debug has_error_code=0",
      "1265: idtentry xen_int3 do_int3 has_error_code=0",
      "",
      "[Removed Lines]",
      "1262: idtentry stack_segment do_stack_segment has_error_code=1 paranoid=1",
      "",
      "[Added Lines]",
      "1262: idtentry stack_segment do_stack_segment has_error_code=1",
      "",
      "---------------"
    ],
    "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c": [
      "File: arch/x86/kernel/traps.c -> arch/x86/kernel/traps.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "233: DO_ERROR(X86_TRAP_OLD_MF, SIGFPE,  \"coprocessor segment overrun\",coprocessor_segment_overrun)",
      "234: DO_ERROR(X86_TRAP_TS,     SIGSEGV, \"invalid TSS\",  invalid_TSS)",
      "235: DO_ERROR(X86_TRAP_NP,     SIGBUS,  \"segment not present\", segment_not_present)",
      "237: DO_ERROR(X86_TRAP_SS,     SIGBUS,  \"stack segment\",  stack_segment)",
      "239: DO_ERROR(X86_TRAP_AC,     SIGBUS,  \"alignment check\",  alignment_check)",
      "241: #ifdef CONFIG_X86_64",
      "257: dotraplinkage void do_double_fault(struct pt_regs *regs, long error_code)",
      "258: {",
      "259:  static const char str[] = \"double fault\";",
      "",
      "[Removed Lines]",
      "236: #ifdef CONFIG_X86_32",
      "238: #endif",
      "243: dotraplinkage void do_stack_segment(struct pt_regs *regs, long error_code)",
      "244: {",
      "245:  enum ctx_state prev_state;",
      "247:  prev_state = exception_enter();",
      "248:  if (notify_die(DIE_TRAP, \"stack segment\", regs, error_code,",
      "249:          X86_TRAP_SS, SIGBUS) != NOTIFY_STOP) {",
      "250:   preempt_conditional_sti(regs);",
      "251:   do_trap(X86_TRAP_SS, SIGBUS, \"stack segment\", regs, error_code, NULL);",
      "252:   preempt_conditional_cli(regs);",
      "253:  }",
      "254:  exception_exit(prev_state);",
      "255: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "802:  set_intr_gate(X86_TRAP_OLD_MF, coprocessor_segment_overrun);",
      "803:  set_intr_gate(X86_TRAP_TS, invalid_TSS);",
      "804:  set_intr_gate(X86_TRAP_NP, segment_not_present);",
      "806:  set_intr_gate(X86_TRAP_GP, general_protection);",
      "807:  set_intr_gate(X86_TRAP_SPURIOUS, spurious_interrupt_bug);",
      "808:  set_intr_gate(X86_TRAP_MF, coprocessor_error);",
      "",
      "[Removed Lines]",
      "805:  set_intr_gate_ist(X86_TRAP_SS, &stack_segment, STACKFAULT_STACK);",
      "",
      "[Added Lines]",
      "789:  set_intr_gate(X86_TRAP_SS, stack_segment);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "958d3d729802f7d741cbe8400e69b89baae580ee",
      "candidate_info": {
        "commit_hash": "958d3d729802f7d741cbe8400e69b89baae580ee",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/958d3d729802f7d741cbe8400e69b89baae580ee",
        "files": [
          "arch/x86/kernel/traps.c"
        ],
        "message": "x86/traps: Introduce fill_trap_info(), simplify DO_ERROR_INFO()\n\nExtract the fill-siginfo code from DO_ERROR_INFO() into the new helper,\nfill_trap_info().\n\nIt can calculate si_code and si_addr looking at trapnr, so we can remove\nthese arguments from DO_ERROR_INFO() and simplify the source code. The\ngenerated code is the same, __builtin_constant_p(trapnr) == T.\n\nSigned-off-by: Oleg Nesterov <oleg@redhat.com>",
        "before_after_code_files": [
          "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
          ],
          "candidate": [
            "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c": [
          "File: arch/x86/kernel/traps.c -> arch/x86/kernel/traps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:  return -1;",
          "137: }",
          "139: static void __kprobes",
          "140: do_trap(int trapnr, int signr, char *str, struct pt_regs *regs,",
          "141:  long error_code, siginfo_t *info)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139: static void fill_trap_info(struct pt_regs *regs, int signr, int trapnr,",
          "140:       siginfo_t *info)",
          "141: {",
          "142:  unsigned long siaddr;",
          "143:  int sicode;",
          "145:  switch (trapnr) {",
          "146:  case X86_TRAP_DE:",
          "147:   sicode = FPE_INTDIV;",
          "148:   siaddr = regs->ip;",
          "149:   break;",
          "150:  case X86_TRAP_UD:",
          "151:   sicode = ILL_ILLOPN;",
          "152:   siaddr = regs->ip;",
          "153:   break;",
          "154:  case X86_TRAP_AC:",
          "155:   sicode = BUS_ADRALN;",
          "156:   siaddr = 0;",
          "157:   break;",
          "158:  }",
          "160:  info->si_signo = signr;",
          "161:  info->si_errno = 0;",
          "162:  info->si_code = sicode;",
          "163:  info->si_addr = (void __user *)siaddr;",
          "164: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:  do_error_trap(regs, error_code, str, trapnr, signr, NULL); \\",
          "192: }",
          "195: dotraplinkage void do_##name(struct pt_regs *regs, long error_code) \\",
          "196: {         \\",
          "197:  siginfo_t info;       \\",
          "198:          \\",
          "204:  do_error_trap(regs, error_code, str, trapnr, signr, &info); \\",
          "205: }",
          "214: #ifdef CONFIG_X86_32",
          "216: #endif",
          "219: #ifdef CONFIG_X86_64",
          "",
          "[Removed Lines]",
          "194: #define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)  \\",
          "199:  info.si_signo = signr;      \\",
          "200:  info.si_errno = 0;      \\",
          "201:  info.si_code = sicode;      \\",
          "202:  info.si_addr = (void __user *)siaddr;    \\",
          "203:          \\",
          "207: DO_ERROR_INFO(X86_TRAP_DE,     SIGFPE,  \"divide error\",   divide_error,       FPE_INTDIV, regs->ip )",
          "208: DO_ERROR     (X86_TRAP_OF,     SIGSEGV, \"overflow\",   overflow       )",
          "209: DO_ERROR     (X86_TRAP_BR,     SIGSEGV, \"bounds\",   bounds        )",
          "210: DO_ERROR_INFO(X86_TRAP_UD,     SIGILL,  \"invalid opcode\",  invalid_op,       ILL_ILLOPN, regs->ip )",
          "211: DO_ERROR     (X86_TRAP_OLD_MF, SIGFPE,  \"coprocessor segment overrun\", coprocessor_segment_overrun     )",
          "212: DO_ERROR     (X86_TRAP_TS,     SIGSEGV, \"invalid TSS\",   invalid_TSS       )",
          "213: DO_ERROR     (X86_TRAP_NP,     SIGBUS,  \"segment not present\",  segment_not_present      )",
          "215: DO_ERROR     (X86_TRAP_SS,     SIGBUS,  \"stack segment\",  stack_segment       )",
          "217: DO_ERROR_INFO(X86_TRAP_AC,     SIGBUS,  \"alignment check\",  alignment_check,      BUS_ADRALN, 0   )",
          "",
          "[Added Lines]",
          "221: #define DO_ERROR_INFO(trapnr, signr, str, name)    \\",
          "226:  fill_trap_info(regs, signr, trapnr, &info);   \\",
          "230: DO_ERROR_INFO(X86_TRAP_DE,     SIGFPE,  \"divide error\",   divide_error)",
          "231: DO_ERROR     (X86_TRAP_OF,     SIGSEGV, \"overflow\",   overflow)",
          "232: DO_ERROR     (X86_TRAP_BR,     SIGSEGV, \"bounds\",   bounds)",
          "233: DO_ERROR_INFO(X86_TRAP_UD,     SIGILL,  \"invalid opcode\",  invalid_op)",
          "234: DO_ERROR     (X86_TRAP_OLD_MF, SIGFPE,  \"coprocessor segment overrun\", coprocessor_segment_overrun)",
          "235: DO_ERROR     (X86_TRAP_TS,     SIGSEGV, \"invalid TSS\",   invalid_TSS)",
          "236: DO_ERROR     (X86_TRAP_NP,     SIGBUS,  \"segment not present\",  segment_not_present)",
          "238: DO_ERROR     (X86_TRAP_SS,     SIGBUS,  \"stack segment\",  stack_segment)",
          "240: DO_ERROR_INFO(X86_TRAP_AC,     SIGBUS,  \"alignment check\",  alignment_check)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8af4ce490e92adfa123ae79899332bd829903e7",
      "candidate_info": {
        "commit_hash": "d8af4ce490e92adfa123ae79899332bd829903e7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d8af4ce490e92adfa123ae79899332bd829903e7",
        "files": [
          "arch/x86/kernel/traps.c"
        ],
        "message": "x86/traps: Clean up error exception handler definitions\n\nSo I was reading the exception handler generation code and got a real\nheadache looking at the unstructured mess that our DO_ERROR*()\ngeneration code is today.\n\nMake it more readable.\n\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nLink: http://lkml.kernel.org/n/tip-kuabysiykvUJpgus35lhnhvs@git.kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
          ],
          "candidate": [
            "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c": [
          "File: arch/x86/kernel/traps.c -> arch/x86/kernel/traps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:  exception_exit(prev_state);     \\",
          "212: }",
          "224: #ifdef CONFIG_X86_32",
          "226: #endif",
          "230: #ifdef CONFIG_X86_64",
          "",
          "[Removed Lines]",
          "214: DO_ERROR_INFO(X86_TRAP_DE, SIGFPE, \"divide error\", divide_error, FPE_INTDIV,",
          "215:   regs->ip)",
          "216: DO_ERROR(X86_TRAP_OF, SIGSEGV, \"overflow\", overflow)",
          "217: DO_ERROR(X86_TRAP_BR, SIGSEGV, \"bounds\", bounds)",
          "218: DO_ERROR_INFO(X86_TRAP_UD, SIGILL, \"invalid opcode\", invalid_op, ILL_ILLOPN,",
          "219:   regs->ip)",
          "220: DO_ERROR(X86_TRAP_OLD_MF, SIGFPE, \"coprocessor segment overrun\",",
          "221:   coprocessor_segment_overrun)",
          "222: DO_ERROR(X86_TRAP_TS, SIGSEGV, \"invalid TSS\", invalid_TSS)",
          "223: DO_ERROR(X86_TRAP_NP, SIGBUS, \"segment not present\", segment_not_present)",
          "225: DO_ERROR(X86_TRAP_SS, SIGBUS, \"stack segment\", stack_segment)",
          "227: DO_ERROR_INFO(X86_TRAP_AC, SIGBUS, \"alignment check\", alignment_check,",
          "228:   BUS_ADRALN, 0)",
          "",
          "[Added Lines]",
          "214: DO_ERROR_INFO(X86_TRAP_DE,     SIGFPE,  \"divide error\",   divide_error,       FPE_INTDIV, regs->ip )",
          "215: DO_ERROR     (X86_TRAP_OF,     SIGSEGV, \"overflow\",   overflow       )",
          "216: DO_ERROR     (X86_TRAP_BR,     SIGSEGV, \"bounds\",   bounds        )",
          "217: DO_ERROR_INFO(X86_TRAP_UD,     SIGILL,  \"invalid opcode\",  invalid_op,       ILL_ILLOPN, regs->ip )",
          "218: DO_ERROR     (X86_TRAP_OLD_MF, SIGFPE,  \"coprocessor segment overrun\", coprocessor_segment_overrun     )",
          "219: DO_ERROR     (X86_TRAP_TS,     SIGSEGV, \"invalid TSS\",   invalid_TSS       )",
          "220: DO_ERROR     (X86_TRAP_NP,     SIGBUS,  \"segment not present\",  segment_not_present      )",
          "222: DO_ERROR     (X86_TRAP_SS,     SIGBUS,  \"stack segment\",  stack_segment       )",
          "224: DO_ERROR_INFO(X86_TRAP_AC,     SIGBUS,  \"alignment check\",  alignment_check,      BUS_ADRALN, 0   )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af726f21ed8af2cdaa4e93098dc211521218ae65",
      "candidate_info": {
        "commit_hash": "af726f21ed8af2cdaa4e93098dc211521218ae65",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/af726f21ed8af2cdaa4e93098dc211521218ae65",
        "files": [
          "arch/x86/kernel/entry_64.S",
          "arch/x86/kernel/traps.c"
        ],
        "message": "x86_64, traps: Fix the espfix64 #DF fixup and rewrite it in C\n\nThere's nothing special enough about the espfix64 double fault fixup to\njustify writing it in assembly.  Move it to C.\n\nThis also fixes a bug: if the double fault came from an IST stack, the\nold asm code would return to a partially uninitialized stack frame.\n\nFixes: 3891a04aafd668686239349ea58f3314ea2af86b\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nReviewed-by: Thomas Gleixner <tglx@linutronix.de>\nCc: stable@vger.kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S",
          "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S",
            "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
          ],
          "candidate": [
            "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S",
            "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S": [
          "File: arch/x86/kernel/entry_64.S -> arch/x86/kernel/entry_64.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:  jnz native_irq_return_ldt",
          "829: #endif",
          "831: native_irq_return_iret:",
          "832:  iretq",
          "833:  _ASM_EXTABLE(native_irq_return_iret, bad_iret)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "831: .global native_irq_return_iret",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "922:  CFI_ENDPROC",
          "923: END(common_interrupt)",
          "",
          "[Removed Lines]",
          "931: #ifdef CONFIG_X86_ESPFIX64",
          "932:  ALIGN",
          "933: __do_double_fault:",
          "934:  XCPT_FRAME 1 RDI+8",
          "936:  sarq $PGDIR_SHIFT,%rax",
          "937:  cmpl $ESPFIX_PGD_ENTRY,%eax",
          "939:  cmpl $__KERNEL_CS,CS(%rdi)",
          "940:  jne do_double_fault",
          "941:  movq RIP(%rdi),%rax",
          "942:  cmpq $native_irq_return_iret,%rax",
          "944:  movq PER_CPU_VAR(kernel_stack),%rax",
          "946:  movq %rax,RSP(%rdi)",
          "948:  movq $general_protection,RIP(%rdi)",
          "949:  retq",
          "950:  CFI_ENDPROC",
          "951: END(__do_double_fault)",
          "952: #else",
          "953: # define __do_double_fault do_double_fault",
          "954: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1124: idtentry bounds do_bounds has_error_code=0",
          "1125: idtentry invalid_op do_invalid_op has_error_code=0",
          "1126: idtentry device_not_available do_device_not_available has_error_code=0",
          "1128: idtentry coprocessor_segment_overrun do_coprocessor_segment_overrun has_error_code=0",
          "1129: idtentry invalid_TSS do_invalid_TSS has_error_code=1",
          "1130: idtentry segment_not_present do_segment_not_present has_error_code=1",
          "",
          "[Removed Lines]",
          "1127: idtentry double_fault __do_double_fault has_error_code=1 paranoid=1",
          "",
          "[Added Lines]",
          "1097: idtentry double_fault do_double_fault has_error_code=1 paranoid=1",
          "",
          "---------------"
        ],
        "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c": [
          "File: arch/x86/kernel/traps.c -> arch/x86/kernel/traps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:  static const char str[] = \"double fault\";",
          "260:  struct task_struct *tsk = current;",
          "262:  exception_enter();",
          "264:  notify_die(DIE_TRAP, str, regs, error_code, X86_TRAP_DF, SIGSEGV);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: #ifdef CONFIG_X86_ESPFIX64",
          "263:  extern unsigned char native_irq_return_iret[];",
          "271:  if (((long)regs->sp >> PGDIR_SHIFT) == ESPFIX_PGD_ENTRY &&",
          "272:   regs->cs == __KERNEL_CS &&",
          "273:   regs->ip == (unsigned long)native_irq_return_iret)",
          "274:  {",
          "275:   struct pt_regs *normal_regs = task_pt_regs(current);",
          "278:   memmove(&normal_regs->ip, (void *)regs->sp, 5*8);",
          "280:   regs->ip = (unsigned long)general_protection;",
          "281:   regs->sp = (unsigned long)&normal_regs->orig_ax;",
          "282:   return;",
          "283:  }",
          "284: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0eb14833d5b1ea1accfeffb71be5de5929f85da9",
      "candidate_info": {
        "commit_hash": "0eb14833d5b1ea1accfeffb71be5de5929f85da9",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0eb14833d5b1ea1accfeffb71be5de5929f85da9",
        "files": [
          "arch/x86/kernel/traps.c"
        ],
        "message": "x86/traps: Kill DO_ERROR_INFO()\n\nNow that DO_ERROR_INFO() doesn't differ from DO_ERROR() we can remove\nit and use DO_ERROR() instead.\n\nSigned-off-by: Oleg Nesterov <oleg@redhat.com>",
        "before_after_code_files": [
          "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
          ],
          "candidate": [
            "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/traps.c||arch/x86/kernel/traps.c": [
          "File: arch/x86/kernel/traps.c -> arch/x86/kernel/traps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:  do_error_trap(regs, error_code, str, trapnr, signr);  \\",
          "225: }",
          "240: #ifdef CONFIG_X86_32",
          "242: #endif",
          "245: #ifdef CONFIG_X86_64",
          "",
          "[Removed Lines]",
          "227: #define DO_ERROR_INFO(trapnr, signr, str, name)    \\",
          "228: dotraplinkage void do_##name(struct pt_regs *regs, long error_code) \\",
          "229: {         \\",
          "230:  do_error_trap(regs, error_code, str, trapnr, signr);  \\",
          "231: }",
          "233: DO_ERROR_INFO(X86_TRAP_DE,     SIGFPE,  \"divide error\",   divide_error)",
          "234: DO_ERROR     (X86_TRAP_OF,     SIGSEGV, \"overflow\",   overflow)",
          "235: DO_ERROR     (X86_TRAP_BR,     SIGSEGV, \"bounds\",   bounds)",
          "236: DO_ERROR_INFO(X86_TRAP_UD,     SIGILL,  \"invalid opcode\",  invalid_op)",
          "237: DO_ERROR     (X86_TRAP_OLD_MF, SIGFPE,  \"coprocessor segment overrun\", coprocessor_segment_overrun)",
          "238: DO_ERROR     (X86_TRAP_TS,     SIGSEGV, \"invalid TSS\",   invalid_TSS)",
          "239: DO_ERROR     (X86_TRAP_NP,     SIGBUS,  \"segment not present\",  segment_not_present)",
          "241: DO_ERROR     (X86_TRAP_SS,     SIGBUS,  \"stack segment\",  stack_segment)",
          "243: DO_ERROR_INFO(X86_TRAP_AC,     SIGBUS,  \"alignment check\",  alignment_check)",
          "",
          "[Added Lines]",
          "227: DO_ERROR(X86_TRAP_DE,     SIGFPE,  \"divide error\",  divide_error)",
          "228: DO_ERROR(X86_TRAP_OF,     SIGSEGV, \"overflow\",   overflow)",
          "229: DO_ERROR(X86_TRAP_BR,     SIGSEGV, \"bounds\",   bounds)",
          "230: DO_ERROR(X86_TRAP_UD,     SIGILL,  \"invalid opcode\",  invalid_op)",
          "231: DO_ERROR(X86_TRAP_OLD_MF, SIGFPE,  \"coprocessor segment overrun\",coprocessor_segment_overrun)",
          "232: DO_ERROR(X86_TRAP_TS,     SIGSEGV, \"invalid TSS\",  invalid_TSS)",
          "233: DO_ERROR(X86_TRAP_NP,     SIGBUS,  \"segment not present\", segment_not_present)",
          "235: DO_ERROR(X86_TRAP_SS,     SIGBUS,  \"stack segment\",  stack_segment)",
          "237: DO_ERROR(X86_TRAP_AC,     SIGBUS,  \"alignment check\",  alignment_check)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb5dd2c5eed155919f626684691cf525234ecda1",
      "candidate_info": {
        "commit_hash": "cb5dd2c5eed155919f626684691cf525234ecda1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/cb5dd2c5eed155919f626684691cf525234ecda1",
        "files": [
          "arch/x86/kernel/entry_64.S"
        ],
        "message": "x86_64, entry: Merge most 64-bit asm entry macros\n\nI haven't touched the device interrupt code, which is different\nenough that it's probably not worth merging, and I haven't done\nanything about paranoidzeroentry_ist yet.\n\nThis appears to produce an entry_64.o file that differs only in the\ndebug info line numbers.\n\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nLink: http://lkml.kernel.org/r/e7a6acfb130471700370e77af9e4b4b6ed46f5ef.1400709717.git.luto@amacapital.net\nSigned-off-by: H. Peter Anvin <hpa@linux.intel.com>",
        "before_after_code_files": [
          "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S"
          ],
          "candidate": [
            "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/entry_64.S||arch/x86/kernel/entry_64.S": [
          "File: arch/x86/kernel/entry_64.S -> arch/x86/kernel/entry_64.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "1207: ENTRY(\\sym)",
          "1208:  INTR_FRAME",
          "1227:  ASM_CLAC",
          "1228:  PARAVIRT_ADJUST_EXCEPTION_FRAME",
          "1230:  subq $ORIG_RAX-R15, %rsp",
          "1231:  CFI_ADJUST_CFA_OFFSET ORIG_RAX-R15",
          "1232:  call save_paranoid",
          "1233:  DEFAULT_FRAME 0",
          "1234:  TRACE_IRQS_OFF",
          "1237:  call \\do_sym",
          "1239:  CFI_ENDPROC",
          "1240: END(\\sym)",
          "1241: .endm",
          "",
          "[Removed Lines]",
          "1206: .macro zeroentry sym do_sym",
          "1209:  ASM_CLAC",
          "1210:  PARAVIRT_ADJUST_EXCEPTION_FRAME",
          "1212:  subq $ORIG_RAX-R15, %rsp",
          "1213:  CFI_ADJUST_CFA_OFFSET ORIG_RAX-R15",
          "1214:  call error_entry",
          "1215:  DEFAULT_FRAME 0",
          "1218:  call \\do_sym",
          "1220:  CFI_ENDPROC",
          "1221: END(\\sym)",
          "1222: .endm",
          "1224: .macro paranoidzeroentry sym do_sym",
          "1225: ENTRY(\\sym)",
          "1226:  INTR_FRAME",
          "",
          "[Added Lines]",
          "1206: .macro idtentry sym do_sym has_error_code:req paranoid=0",
          "1208:  .if \\has_error_code",
          "1209:  XCPT_FRAME",
          "1210:  .else",
          "1212:  .endif",
          "1217:  .ifeq \\has_error_code",
          "1219:  .endif",
          "1224:  .if \\paranoid",
          "1226:  .else",
          "1227:  call error_entry",
          "1228:  .endif",
          "1232:  .if \\paranoid",
          "1234:  .endif",
          "1238:  .if \\has_error_code",
          "1241:  .else",
          "1243:  .endif",
          "1247:  .if \\paranoid",
          "1249:  .else",
          "1251:  .endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1262: END(\\sym)",
          "1263: .endm",
          "1283: #ifdef CONFIG_TRACING",
          "1287: .endm",
          "1288: #else",
          "1291: .endm",
          "1292: #endif",
          "",
          "[Removed Lines]",
          "1265: .macro errorentry sym do_sym",
          "1266: ENTRY(\\sym)",
          "1267:  XCPT_FRAME",
          "1268:  ASM_CLAC",
          "1269:  PARAVIRT_ADJUST_EXCEPTION_FRAME",
          "1270:  subq $ORIG_RAX-R15, %rsp",
          "1271:  CFI_ADJUST_CFA_OFFSET ORIG_RAX-R15",
          "1272:  call error_entry",
          "1273:  DEFAULT_FRAME 0",
          "1277:  call \\do_sym",
          "1279:  CFI_ENDPROC",
          "1280: END(\\sym)",
          "1281: .endm",
          "1284: .macro trace_errorentry sym do_sym",
          "1285: errorentry trace(\\sym) trace(\\do_sym)",
          "1286: errorentry \\sym \\do_sym",
          "1289: .macro trace_errorentry sym do_sym",
          "1290: errorentry \\sym \\do_sym",
          "1295: .macro paranoiderrorentry sym do_sym",
          "1296: ENTRY(\\sym)",
          "1297:  XCPT_FRAME",
          "1298:  ASM_CLAC",
          "1299:  PARAVIRT_ADJUST_EXCEPTION_FRAME",
          "1300:  subq $ORIG_RAX-R15, %rsp",
          "1301:  CFI_ADJUST_CFA_OFFSET ORIG_RAX-R15",
          "1302:  call save_paranoid",
          "1303:  DEFAULT_FRAME 0",
          "1304:  TRACE_IRQS_OFF",
          "1308:  call \\do_sym",
          "1310:  CFI_ENDPROC",
          "1311: END(\\sym)",
          "1312: .endm",
          "1314: zeroentry divide_error do_divide_error",
          "1315: zeroentry overflow do_overflow",
          "1316: zeroentry bounds do_bounds",
          "1317: zeroentry invalid_op do_invalid_op",
          "1318: zeroentry device_not_available do_device_not_available",
          "1319: paranoiderrorentry double_fault do_double_fault",
          "1320: zeroentry coprocessor_segment_overrun do_coprocessor_segment_overrun",
          "1321: errorentry invalid_TSS do_invalid_TSS",
          "1322: errorentry segment_not_present do_segment_not_present",
          "1323: zeroentry spurious_interrupt_bug do_spurious_interrupt_bug",
          "1324: zeroentry coprocessor_error do_coprocessor_error",
          "1325: errorentry alignment_check do_alignment_check",
          "1326: zeroentry simd_coprocessor_error do_simd_coprocessor_error",
          "",
          "[Added Lines]",
          "1280: .macro trace_idtentry sym do_sym has_error_code:req",
          "1281: idtentry trace(\\sym) trace(\\do_sym) has_error_code=\\has_error_code",
          "1282: idtentry \\sym \\do_sym has_error_code=\\has_error_code",
          "1285: .macro trace_idtentry sym do_sym has_error_code:req",
          "1286: idtentry \\sym \\do_sym has_error_code=\\has_error_code",
          "1290: idtentry divide_error do_divide_error has_error_code=0",
          "1291: idtentry overflow do_overflow has_error_code=0",
          "1292: idtentry bounds do_bounds has_error_code=0",
          "1293: idtentry invalid_op do_invalid_op has_error_code=0",
          "1294: idtentry device_not_available do_device_not_available has_error_code=0",
          "1295: idtentry double_fault do_double_fault has_error_code=1 paranoid=1",
          "1296: idtentry coprocessor_segment_overrun do_coprocessor_segment_overrun has_error_code=0",
          "1297: idtentry invalid_TSS do_invalid_TSS has_error_code=1",
          "1298: idtentry segment_not_present do_segment_not_present has_error_code=1",
          "1299: idtentry spurious_interrupt_bug do_spurious_interrupt_bug has_error_code=0",
          "1300: idtentry coprocessor_error do_coprocessor_error has_error_code=0",
          "1301: idtentry alignment_check do_alignment_check has_error_code=1",
          "1302: idtentry simd_coprocessor_error do_simd_coprocessor_error has_error_code=0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1373: END(do_softirq_own_stack)",
          "1375: #ifdef CONFIG_XEN",
          "",
          "[Removed Lines]",
          "1376: zeroentry xen_hypervisor_callback xen_do_hypervisor_callback",
          "",
          "[Added Lines]",
          "1352: idtentry xen_hypervisor_callback xen_do_hypervisor_callback has_error_code=0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1487: paranoidzeroentry_ist debug do_debug DEBUG_STACK",
          "1488: paranoidzeroentry_ist int3 do_int3 DEBUG_STACK",
          "1490: #ifdef CONFIG_XEN",
          "1494: #endif",
          "1497: #ifdef CONFIG_KVM_GUEST",
          "1499: #endif",
          "1500: #ifdef CONFIG_X86_MCE",
          "1502: #endif",
          "",
          "[Removed Lines]",
          "1489: paranoiderrorentry stack_segment do_stack_segment",
          "1491: zeroentry xen_debug do_debug",
          "1492: zeroentry xen_int3 do_int3",
          "1493: errorentry xen_stack_segment do_stack_segment",
          "1495: errorentry general_protection do_general_protection",
          "1496: trace_errorentry page_fault do_page_fault",
          "1498: errorentry async_page_fault do_async_page_fault",
          "1501: paranoidzeroentry machine_check *machine_check_vector(%rip)",
          "",
          "[Added Lines]",
          "1465: idtentry stack_segment do_stack_segment has_error_code=1 paranoid=1",
          "1467: idtentry xen_debug do_debug has_error_code=0",
          "1468: idtentry xen_int3 do_int3 has_error_code=0",
          "1469: idtentry xen_stack_segment do_stack_segment has_error_code=1",
          "1471: idtentry general_protection do_general_protection has_error_code=1",
          "1472: trace_idtentry page_fault do_page_fault has_error_code=1",
          "1474: idtentry async_page_fault do_async_page_fault has_error_code=1",
          "1477: idtentry machine_check has_error_code=0 paranoid=1 do_sym=*machine_check_vector(%rip)",
          "",
          "---------------"
        ]
      }
    }
  ]
}