{
  "cve_id": "CVE-2015-4645",
  "cve_desc": "Integer overflow in the read_fragment_table_4 function in unsquash-4.c in Squashfs and sasquatch allows remote attackers to cause a denial of service (application crash) via a crafted input, which triggers a stack-based buffer overflow.",
  "repo": "plougher/squashfs-tools",
  "patch_hash": "f95864afe8833fe3ad782d714b41378e860977b1",
  "patch_info": {
    "commit_hash": "f95864afe8833fe3ad782d714b41378e860977b1",
    "repo": "plougher/squashfs-tools",
    "commit_url": "https://github.com/plougher/squashfs-tools/commit/f95864afe8833fe3ad782d714b41378e860977b1",
    "files": [
      "squashfs-tools/read_xattrs.c",
      "squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c"
    ],
    "message": "unsquashfs-4: Add more sanity checks + fix CVE-2015-4645/6\n\nAdd more filesystem table sanity checks to Unsquashfs-4 and\nalso properly fix CVE-2015-4645 and CVE-2015-4646.\n\nThe CVEs were raised due to Unsquashfs having variable\noveflow and stack overflow in a number of vulnerable\nfunctions.\n\nThe suggested patch only \"fixed\" one such function and fixed\nit badly, and so it was buggy and introduced extra bugs!\n\nThe suggested patch was not only buggy, but, it used the\nessentially wrong approach too.  It was \"fixing\" the\nsymptom but not the cause.  The symptom is wrong values\ncausing overflow, the cause is filesystem corruption.\nThis corruption should be detected and the filesystem\nrejected *before* trying to allocate memory.\n\nThis patch applies the following fixes:\n\n1. The filesystem super-block tables are checked, and the values\n   must match across the filesystem.\n\n   This will trap corrupted filesystems created by Mksquashfs.\n\n2. The maximum (theorectical) size the filesystem tables could grow\n   to, were analysed, and some variables were increased from int to\n   long long.\n\n   This analysis has been added as comments.\n\n3. Stack allocation was removed, and a shared buffer (which is\n   checked and increased as necessary) is used to read the\n   table indexes.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
    "before_after_code_files": [
      "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c",
      "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
      "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
    ]
  },
  "patch_diff": {
    "squashfs-tools/read_xattrs.c||squashfs-tools/read_xattrs.c": [
      "File: squashfs-tools/read_xattrs.c -> squashfs-tools/read_xattrs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "151: int read_xattrs_from_disk(int fd, struct squashfs_super_block *sBlk, int flag, long long *table_start)",
      "152: {",
      "154:  long long *index, start, end;",
      "155:  struct squashfs_xattr_table id_table;",
      "",
      "[Removed Lines]",
      "153:  int res, bytes, i, indexes, index_bytes, ids;",
      "",
      "[Added Lines]",
      "160:  int res, i, indexes, index_bytes;",
      "161:  unsigned int ids;",
      "162:  long long bytes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171:  SQUASHFS_INSWAP_XATTR_TABLE(&id_table);",
      "180:   return id_table.xattr_ids;",
      "191:  index = malloc(index_bytes);",
      "192:  if(index == NULL)",
      "193:   MEM_ERROR();",
      "",
      "[Removed Lines]",
      "173:  if(flag) {",
      "181:  }",
      "187:  ids = id_table.xattr_ids;",
      "188:  xattr_table_start = id_table.xattr_table_start;",
      "189:  index_bytes = SQUASHFS_XATTR_BLOCK_BYTES(ids);",
      "190:  indexes = SQUASHFS_XATTR_BLOCKS(ids);",
      "",
      "[Added Lines]",
      "185:  ids = id_table.xattr_ids;",
      "186:  xattr_table_start = id_table.xattr_table_start;",
      "187:  index_bytes = SQUASHFS_XATTR_BLOCK_BYTES((long long) ids);",
      "188:  indexes = SQUASHFS_XATTR_BLOCKS((long long) ids);",
      "194:  if(index_bytes != (sBlk->bytes_used - (sBlk->xattr_id_table_start + sizeof(id_table)))) {",
      "195:   ERROR(\"read_xattrs_from_disk: Bad xattr_ids count in super block\\n\");",
      "196:   return 0;",
      "197:  }",
      "204:  if(table_start != NULL)",
      "213:  if(flag)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "207:  xattr_ids = malloc(bytes);",
      "208:  if(xattr_ids == NULL)",
      "209:   MEM_ERROR();",
      "",
      "[Removed Lines]",
      "206:  bytes = SQUASHFS_XATTR_BYTES(ids);",
      "",
      "[Added Lines]",
      "235:  bytes = SQUASHFS_XATTR_BYTES((long long) ids);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "213:      bytes & (SQUASHFS_METADATA_SIZE - 1);",
      "214:   int length = read_block(fd, index[i], NULL, expected,",
      "215:    ((unsigned char *) xattr_ids) +",
      "217:   TRACE(\"Read xattr id table block %d, from 0x%llx, length \"",
      "218:    \"%d\\n\", i, index[i], length);",
      "219:   if(length == 0) {",
      "",
      "[Removed Lines]",
      "216:    (i * SQUASHFS_METADATA_SIZE));",
      "",
      "[Added Lines]",
      "245:    ((long long) i * SQUASHFS_METADATA_SIZE));",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
      "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: static struct squashfs_fragment_entry *fragment_table;",
      "30: static unsigned int *id_table;",
      "33: {",
      "34:  int res, i;",
      "39:  TRACE(\"read_fragment_table: %d fragments, reading %d fragment indexes \"",
      "40:   \"from 0x%llx\\n\", sBlk.s.fragments, indexes,",
      "41:   sBlk.s.fragment_table_start);",
      "48:  fragment_table = malloc(bytes);",
      "49:  if(fragment_table == NULL)",
      "50:   EXIT_UNSQUASH(\"read_fragment_table: failed to allocate \"",
      "51:    \"fragment table\\n\");",
      "56:  if(res == FALSE) {",
      "57:   ERROR(\"read_fragment_table: failed to read fragment table \"",
      "58:    \"index\\n\");",
      "",
      "[Removed Lines]",
      "32: static int read_fragment_table(long long *directory_table_end)",
      "35:  int bytes = SQUASHFS_FRAGMENT_BYTES(sBlk.s.fragments);",
      "36:  int  indexes = SQUASHFS_FRAGMENT_INDEXES(sBlk.s.fragments);",
      "37:  long long fragment_table_index[indexes];",
      "43:  if(sBlk.s.fragments == 0) {",
      "45:   return TRUE;",
      "46:  }",
      "53:  res = read_fs_bytes(fd, sBlk.s.fragment_table_start,",
      "54:   SQUASHFS_FRAGMENT_INDEX_BYTES(sBlk.s.fragments),",
      "55:   fragment_table_index);",
      "",
      "[Added Lines]",
      "32: long long *alloc_index_table(int indexes)",
      "34:  static long long *alloc_table = NULL;",
      "35:  static int alloc_size = 0;",
      "36:  int length = indexes * sizeof(long long);",
      "38:  if(alloc_size < length) {",
      "39:   long long *table = realloc(alloc_table, length);",
      "41:   if(table == NULL)",
      "42:    EXIT_UNSQUASH(\"alloc_index_table: failed to allocate \"",
      "43:     \"index table\\n\");",
      "45:   alloc_table = table;",
      "46:   alloc_size = length;",
      "47:  }",
      "49:  return alloc_table;",
      "50: }",
      "53: static int read_fragment_table(long long *table_start)",
      "54: {",
      "63:  long long bytes = SQUASHFS_FRAGMENT_BYTES((long long) sBlk.s.fragments);",
      "64:  int indexes = SQUASHFS_FRAGMENT_INDEXES((long long) sBlk.s.fragments);",
      "65:  int length = SQUASHFS_FRAGMENT_INDEX_BYTES((long long) sBlk.s.fragments);",
      "66:  long long *fragment_table_index;",
      "72:  if(length != (*table_start - sBlk.s.fragment_table_start)) {",
      "73:   ERROR(\"read_fragment_table: Bad fragment count in super block\\n\");",
      "74:   return FALSE;",
      "75:  }",
      "81:  fragment_table_index = alloc_index_table(indexes);",
      "87:  res = read_fs_bytes(fd, sBlk.s.fragment_table_start, length,",
      "88:        fragment_table_index);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "356: }",
      "360: {",
      "361:  int res, i;",
      "362:  int bytes = SQUASHFS_ID_BYTES(sBlk.s.no_ids);",
      "363:  int indexes = SQUASHFS_ID_BLOCKS(sBlk.s.no_ids);",
      "368:  id_table = malloc(bytes);",
      "369:  if(id_table == NULL) {",
      "371:   return FALSE;",
      "372:  }",
      "376:  if(res == FALSE) {",
      "378:   return FALSE;",
      "379:  }",
      "380:  SQUASHFS_INSWAP_ID_BLOCKS(id_index_table, indexes);",
      "",
      "[Removed Lines]",
      "359: static int read_uids_guids(long long *table_start)",
      "364:  long long id_index_table[indexes];",
      "366:  TRACE(\"read_uids_guids: no_ids %d\\n\", sBlk.s.no_ids);",
      "370:   ERROR(\"read_uids_guids: failed to allocate id table\\n\");",
      "374:  res = read_fs_bytes(fd, sBlk.s.id_table_start,",
      "375:   SQUASHFS_ID_BLOCK_BYTES(sBlk.s.no_ids), id_index_table);",
      "377:   ERROR(\"read_uids_guids: failed to read id index table\\n\");",
      "",
      "[Added Lines]",
      "392: static int read_id_table(long long *table_start)",
      "404:  int length = SQUASHFS_ID_BLOCK_BYTES(sBlk.s.no_ids);",
      "405:  long long *id_index_table;",
      "411:  if(length != (*table_start - sBlk.s.id_table_start)) {",
      "412:   ERROR(\"read_id_table: Bad id count in super block\\n\");",
      "413:   return FALSE;",
      "414:  }",
      "416:  TRACE(\"read_id_table: no_ids %d\\n\", sBlk.s.no_ids);",
      "418:  id_index_table = alloc_index_table(indexes);",
      "421:   ERROR(\"read_id_table: failed to allocate id table\\n\");",
      "425:  res = read_fs_bytes(fd, sBlk.s.id_table_start, length, id_index_table);",
      "427:   ERROR(\"read_id_table: failed to read id index table\\n\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "393:   res = read_block(fd, id_index_table[i], NULL, expected,",
      "394:    ((char *) id_table) + i * SQUASHFS_METADATA_SIZE);",
      "395:   if(res == FALSE) {",
      "397:     \"\\n\");",
      "398:    return FALSE;",
      "399:   }",
      "",
      "[Removed Lines]",
      "396:    ERROR(\"read_uids_guids: failed to read id table block\"",
      "",
      "[Added Lines]",
      "446:    ERROR(\"read_id_table: failed to read id table block\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "408: static int parse_exports_table(long long *table_start)",
      "409: {",
      "410:  int res;",
      "416:  if(res == FALSE) {",
      "417:   ERROR(\"parse_exports_table: failed to read export index table\\n\");",
      "418:   return FALSE;",
      "",
      "[Removed Lines]",
      "411:  int indexes = SQUASHFS_LOOKUP_BLOCKS(sBlk.s.inodes);",
      "412:  long long export_index_table[indexes];",
      "414:  res = read_fs_bytes(fd, sBlk.s.lookup_table_start,",
      "415:   SQUASHFS_LOOKUP_BLOCK_BYTES(sBlk.s.inodes), export_index_table);",
      "",
      "[Added Lines]",
      "467:  int indexes = SQUASHFS_LOOKUP_BLOCKS((long long) sBlk.s.inodes);",
      "468:  int length = SQUASHFS_LOOKUP_BLOCK_BYTES((long long) sBlk.s.inodes);",
      "469:  long long *export_index_table;",
      "475:  if(length != (*table_start - sBlk.s.lookup_table_start)) {",
      "476:   ERROR(\"parse_exports_table: Bad inode count in super block\\n\");",
      "477:   return FALSE;",
      "478:  }",
      "480:  export_index_table = alloc_index_table(indexes);",
      "482:  res = read_fs_bytes(fd, sBlk.s.lookup_table_start, length,",
      "483:        export_index_table);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "433: int read_filesystem_tables_4()",
      "434: {",
      "453:  if(read_directory_table(sBlk.s.directory_table_start,",
      "457:  if(no_xattrs)",
      "458:   sBlk.s.xattr_id_table_start = SQUASHFS_INVALID_BLK;",
      "460:  return TRUE;",
      "461: }",
      "",
      "[Removed Lines]",
      "435:  long long directory_table_end, table_start;",
      "437:  if(read_xattrs_from_disk(fd, &sBlk.s, no_xattrs, &table_start) == 0)",
      "438:   return FALSE;",
      "440:  if(read_uids_guids(&table_start) == FALSE)",
      "441:   return FALSE;",
      "443:  if(parse_exports_table(&table_start) == FALSE)",
      "444:   return FALSE;",
      "446:  if(read_fragment_table(&directory_table_end) == FALSE)",
      "447:   return FALSE;",
      "449:  if(read_inode_table(sBlk.s.inode_table_start,",
      "450:     sBlk.s.directory_table_start) == FALSE)",
      "451:   return FALSE;",
      "454:     directory_table_end) == FALSE)",
      "455:   return FALSE;",
      "",
      "[Added Lines]",
      "503:  long long table_start;",
      "506:  if(sBlk.s.xattr_id_table_start != SQUASHFS_INVALID_BLK) {",
      "508:   if(sBlk.s.xattr_id_table_start >= sBlk.s.bytes_used) {",
      "509:    ERROR(\"read_filesystem_tables: xattr id table start too large in super block\\n\");",
      "510:    goto corrupted;",
      "511:   }",
      "513:   if(read_xattrs_from_disk(fd, &sBlk.s, no_xattrs, &table_start) == 0)",
      "514:    goto corrupted;",
      "515:  } else",
      "516:   table_start = sBlk.s.bytes_used;",
      "521:  if(sBlk.s.id_table_start >= table_start) {",
      "522:   ERROR(\"read_filesystem_tables: id table start too large in super block\\n\");",
      "523:   goto corrupted;",
      "524:  }",
      "527:  if(sBlk.s.no_ids == 0) {",
      "528:   ERROR(\"read_filesystem_tables: Bad id count in super block\\n\");",
      "529:   goto corrupted;",
      "530:  }",
      "536:  if(sBlk.s.no_ids > (sBlk.s.inodes * 2L)) {",
      "537:   ERROR(\"read_filesystem_tables: Bad id count in super block\\n\");",
      "538:   goto corrupted;",
      "539:  }",
      "541:  if(read_id_table(&table_start) == FALSE)",
      "542:   goto corrupted;",
      "545:  if(sBlk.s.lookup_table_start != SQUASHFS_INVALID_BLK) {",
      "548:   if(sBlk.s.lookup_table_start >= table_start) {",
      "549:    ERROR(\"read_filesystem_tables: lookup table start too large in super block\\n\");",
      "550:    goto corrupted;",
      "551:   }",
      "553:   if(parse_exports_table(&table_start) == FALSE)",
      "554:    goto corrupted;",
      "555:  }",
      "558:  if(sBlk.s.fragments != 0) {",
      "561:   if(sBlk.s.fragment_table_start >= table_start) {",
      "562:    ERROR(\"read_filesystem_tables: fragment table start too large in super block\\n\");",
      "563:    goto corrupted;",
      "564:   }",
      "567:   if(sBlk.s.fragments > sBlk.s.inodes) {",
      "568:    ERROR(\"read_filesystem_tables: Bad fragment count in super block\\n\");",
      "569:    goto corrupted;",
      "570:   }",
      "572:   if(read_fragment_table(&table_start) == FALSE)",
      "573:    goto corrupted;",
      "574:  } else {",
      "579:   if(sBlk.s.fragment_table_start != table_start) {",
      "580:    ERROR(\"read_filesystem_tables: fragment table start invalid in super block\\n\");",
      "581:    goto corrupted;",
      "582:   }",
      "583:  }",
      "588:  if(sBlk.s.directory_table_start >= table_start) {",
      "589:   ERROR(\"read_filesystem_tables: directory table start too large in super block\\n\");",
      "590:   goto corrupted;",
      "591:  }",
      "594:     table_start) == FALSE)",
      "595:   goto corrupted;",
      "600:  if(sBlk.s.inode_table_start >= sBlk.s.directory_table_start) {",
      "601:   ERROR(\"read_filesystem_tables: inode table start too large in super block\\n\");",
      "602:   goto corrupted;",
      "603:  }",
      "605:  if(read_inode_table(sBlk.s.inode_table_start,",
      "606:     sBlk.s.directory_table_start) == FALSE)",
      "607:   goto corrupted;",
      "614: corrupted:",
      "615:  ERROR(\"File system corruption detected\\n\");",
      "616:  return FALSE;",
      "",
      "---------------"
    ],
    "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
      "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2467: #define VERSION() \\",
      "2469:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
      "2470:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
      "2471:      printf(\"This program is free software; you can redistribute it and/or\"\\",
      "",
      "[Removed Lines]",
      "2468:  printf(\"unsquashfs version 4.3-git (2019/07/05)\\n\");\\",
      "",
      "[Added Lines]",
      "2468:  printf(\"unsquashfs version 4.3-git (2019/07/15)\\n\");\\",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de3eb15456c7698de22734bd99cfe3294cbf6632",
      "candidate_info": {
        "commit_hash": "de3eb15456c7698de22734bd99cfe3294cbf6632",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/de3eb15456c7698de22734bd99cfe3294cbf6632",
        "files": [
          "squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c",
          "squashfs-tools/unsquashfs.c"
        ],
        "message": "unsquashfs: Empty directory table should not be treated as corrupt\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c",
          "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c",
          "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c",
          "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
          "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ],
          "candidate": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c",
            "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquash-1.c||squashfs-tools/unsquash-1.c": [
          "File: squashfs-tools/unsquash-1.c -> squashfs-tools/unsquash-1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:   ERROR(\"read_filesystem_tables: directory table start too large in super block\\n\");",
          "378:   goto corrupted;",
          "379:  }",
          "",
          "[Removed Lines]",
          "376:  if(sBlk.s.directory_table_start >= table_start) {",
          "",
          "[Added Lines]",
          "376:  if(sBlk.s.directory_table_start > table_start) {",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-2.c||squashfs-tools/unsquash-2.c": [
          "File: squashfs-tools/unsquash-2.c -> squashfs-tools/unsquash-2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:   ERROR(\"read_filesystem_tables: directory table start too large in super block\\n\");",
          "495:   goto corrupted;",
          "496:  }",
          "",
          "[Removed Lines]",
          "493:  if(sBlk.s.directory_table_start >= table_start) {",
          "",
          "[Added Lines]",
          "493:  if(sBlk.s.directory_table_start > table_start) {",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-3.c||squashfs-tools/unsquash-3.c": [
          "File: squashfs-tools/unsquash-3.c -> squashfs-tools/unsquash-3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:   ERROR(\"read_filesystem_tables: directory table start too large in super block\\n\");",
          "648:   goto corrupted;",
          "649:  }",
          "",
          "[Removed Lines]",
          "646:  if(sBlk.s.directory_table_start >= table_start) {",
          "",
          "[Added Lines]",
          "646:  if(sBlk.s.directory_table_start > table_start) {",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
          "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:   ERROR(\"read_filesystem_tables: directory table start too large in super block\\n\");",
          "601:   goto corrupted;",
          "602:  }",
          "",
          "[Removed Lines]",
          "599:  if(sBlk.s.directory_table_start >= table_start) {",
          "",
          "[Added Lines]",
          "599:  if(sBlk.s.directory_table_start > table_start) {",
          "",
          "---------------"
        ],
        "squashfs-tools/unsquashfs.c||squashfs-tools/unsquashfs.c": [
          "File: squashfs-tools/unsquashfs.c -> squashfs-tools/unsquashfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1171:  int res;",
          "1172:  long long bytes = 0;",
          "1173:  long long size = 0;",
          "1176:  TRACE(\"read_directory_table: start %lld, end %lld\\n\", start, end);",
          "",
          "[Removed Lines]",
          "1174:  void *directory_table = NULL;",
          "",
          "[Added Lines]",
          "1174:  void *directory_table = malloc(1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2539: #define VERSION() \\",
          "2541:  printf(\"copyright (C) 2019 Phillip Lougher \"\\",
          "2542:   \"<phillip@squashfs.org.uk>\\n\\n\");\\",
          "2543:      printf(\"This program is free software; you can redistribute it and/or\"\\",
          "",
          "[Removed Lines]",
          "2540:  printf(\"unsquashfs version 4.3-git (2019/07/21)\\n\");\\",
          "",
          "[Added Lines]",
          "2540:  printf(\"unsquashfs version 4.3-git (2019/07/31)\\n\");\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee65ae2e20c63cc6cd0d6f10431226b425ae3211",
      "candidate_info": {
        "commit_hash": "ee65ae2e20c63cc6cd0d6f10431226b425ae3211",
        "repo": "plougher/squashfs-tools",
        "commit_url": "https://github.com/plougher/squashfs-tools/commit/ee65ae2e20c63cc6cd0d6f10431226b425ae3211",
        "files": [
          "squashfs-tools/unsquash-4.c"
        ],
        "message": "unsquashfs-4: free temporary indexes\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
        "before_after_code_files": [
          "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c"
          ],
          "candidate": [
            "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c"
          ]
        }
      },
      "candidate_diff": {
        "squashfs-tools/unsquash-4.c||squashfs-tools/unsquash-4.c": [
          "File: squashfs-tools/unsquash-4.c -> squashfs-tools/unsquash-4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  static int alloc_size = 0;",
          "36:  int length = indexes * sizeof(long long);",
          "39:   long long *table = realloc(alloc_table, length);",
          "42:    EXIT_UNSQUASH(\"alloc_index_table: failed to allocate \"",
          "43:     \"index table\\n\");",
          "",
          "[Removed Lines]",
          "38:  if(alloc_size < length) {",
          "41:   if(table == NULL)",
          "",
          "[Added Lines]",
          "38:  if(alloc_size < length || length == 0) {",
          "41:   if(table == NULL && length !=0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:  if(no_xattrs)",
          "610:   sBlk.s.xattr_id_table_start = SQUASHFS_INVALID_BLK;",
          "612:  return TRUE;",
          "614: corrupted:",
          "615:  ERROR(\"File system corruption detected\\n\");",
          "616:  return FALSE;",
          "617: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:  alloc_index_table(0);",
          "618:  alloc_index_table(0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}