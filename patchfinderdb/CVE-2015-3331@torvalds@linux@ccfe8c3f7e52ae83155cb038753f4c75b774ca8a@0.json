{
  "cve_id": "CVE-2015-3331",
  "cve_desc": "The __driver_rfc4106_decrypt function in arch/x86/crypto/aesni-intel_glue.c in the Linux kernel before 3.19.3 does not properly determine the memory locations used for encrypted data, which allows context-dependent attackers to cause a denial of service (buffer overflow and system crash) or possibly execute arbitrary code by triggering a crypto API call, as demonstrated by use of a libkcapi test program with an AF_ALG(aead) socket.",
  "repo": "torvalds/linux",
  "patch_hash": "ccfe8c3f7e52ae83155cb038753f4c75b774ca8a",
  "patch_info": {
    "commit_hash": "ccfe8c3f7e52ae83155cb038753f4c75b774ca8a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/ccfe8c3f7e52ae83155cb038753f4c75b774ca8a",
    "files": [
      "arch/x86/crypto/aesni-intel_glue.c"
    ],
    "message": "crypto: aesni - fix memory usage in GCM decryption\n\nThe kernel crypto API logic requires the caller to provide the\nlength of (ciphertext || authentication tag) as cryptlen for the\nAEAD decryption operation. Thus, the cipher implementation must\ncalculate the size of the plaintext output itself and cannot simply use\ncryptlen.\n\nThe RFC4106 GCM decryption operation tries to overwrite cryptlen memory\nin req->dst. As the destination buffer for decryption only needs to hold\nthe plaintext memory but cryptlen references the input buffer holding\n(ciphertext || authentication tag), the assumption of the destination\nbuffer length in RFC4106 GCM operation leads to a too large size. This\npatch simply uses the already calculated plaintext size.\n\nIn addition, this patch fixes the offset calculation of the AAD buffer\npointer: as mentioned before, cryptlen already includes the size of the\ntag. Thus, the tag does not need to be added. With the addition, the AAD\nwill be written beyond the already allocated buffer.\n\nNote, this fixes a kernel crash that can be triggered from user space\nvia AF_ALG(aead) -- simply use the libkcapi test application\nfrom [1] and update it to use rfc4106-gcm-aes.\n\nUsing [1], the changes were tested using CAVS vectors to demonstrate\nthat the crypto operation still delivers the right results.\n\n[1] http://www.chronox.de/libkcapi.html\n\nCC: Tadeusz Struk <tadeusz.struk@intel.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Stephan Mueller <smueller@chronox.de>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
    "before_after_code_files": [
      "arch/x86/crypto/aesni-intel_glue.c||arch/x86/crypto/aesni-intel_glue.c"
    ]
  },
  "patch_diff": {
    "arch/x86/crypto/aesni-intel_glue.c||arch/x86/crypto/aesni-intel_glue.c": [
      "File: arch/x86/crypto/aesni-intel_glue.c -> arch/x86/crypto/aesni-intel_glue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1155:   src = kmalloc(req->cryptlen + req->assoclen, GFP_ATOMIC);",
      "1156:   if (!src)",
      "1157:    return -ENOMEM;",
      "1159:   scatterwalk_map_and_copy(src, req->src, 0, req->cryptlen, 0);",
      "1160:   scatterwalk_map_and_copy(assoc, req->assoc, 0,",
      "1161:    req->assoclen, 0);",
      "",
      "[Removed Lines]",
      "1158:   assoc = (src + req->cryptlen + auth_tag_len);",
      "",
      "[Added Lines]",
      "1158:   assoc = (src + req->cryptlen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1180:   scatterwalk_done(&src_sg_walk, 0, 0);",
      "1181:   scatterwalk_done(&assoc_sg_walk, 0, 0);",
      "1182:  } else {",
      "1184:   kfree(src);",
      "1185:  }",
      "1186:  return retval;",
      "",
      "[Removed Lines]",
      "1183:   scatterwalk_map_and_copy(dst, req->dst, 0, req->cryptlen, 1);",
      "",
      "[Added Lines]",
      "1183:   scatterwalk_map_and_copy(dst, req->dst, 0, tempCipherLen, 1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b7c89d9e2fef1c9f4c9d8bacf0c1459e30561289",
      "candidate_info": {
        "commit_hash": "b7c89d9e2fef1c9f4c9d8bacf0c1459e30561289",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b7c89d9e2fef1c9f4c9d8bacf0c1459e30561289",
        "files": [
          "arch/x86/crypto/aesni-intel_glue.c"
        ],
        "message": "crypto: aesni - Convert rfc4106 to new AEAD interface\n\nThis patch converts the low-level __gcm-aes-aesni algorithm to\nthe new AEAD interface.\n\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
        "before_after_code_files": [
          "arch/x86/crypto/aesni-intel_glue.c||arch/x86/crypto/aesni-intel_glue.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/crypto/aesni-intel_glue.c||arch/x86/crypto/aesni-intel_glue.c"
          ],
          "candidate": [
            "arch/x86/crypto/aesni-intel_glue.c||arch/x86/crypto/aesni-intel_glue.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/crypto/aesni-intel_glue.c||arch/x86/crypto/aesni-intel_glue.c": [
          "File: arch/x86/crypto/aesni-intel_glue.c -> arch/x86/crypto/aesni-intel_glue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #endif",
          "51: struct aesni_rfc4106_gcm_ctx {",
          "54:  u8 nonce[4];",
          "55: };",
          "",
          "[Removed Lines]",
          "52:  u8 hash_subkey[16];",
          "53:  struct crypto_aes_ctx aes_key_expanded;",
          "",
          "[Added Lines]",
          "47: #define AESNI_ALIGN 16",
          "48: #define AES_BLOCK_MASK (~(AES_BLOCK_SIZE - 1))",
          "49: #define RFC4106_HASH_SUBKEY_SIZE 16",
          "56:  u8 hash_subkey[16] __attribute__ ((__aligned__(AESNI_ALIGN)));",
          "57:  struct crypto_aes_ctx aes_key_expanded",
          "58:   __attribute__ ((__aligned__(AESNI_ALIGN)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:  struct scatterlist sg;",
          "66: };",
          "72: struct aesni_lrw_ctx {",
          "73:  struct lrw_table_ctx lrw_table;",
          "74:  u8 raw_aes_ctx[sizeof(struct crypto_aes_ctx) + AESNI_ALIGN - 1];",
          "",
          "[Removed Lines]",
          "68: #define AESNI_ALIGN (16)",
          "69: #define AES_BLOCK_MASK (~(AES_BLOCK_SIZE-1))",
          "70: #define RFC4106_HASH_SUBKEY_SIZE 16",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282: static inline struct",
          "283: aesni_rfc4106_gcm_ctx *aesni_rfc4106_gcm_ctx_get(struct crypto_aead *tfm)",
          "284: {",
          "289: }",
          "290: #endif",
          "",
          "[Removed Lines]",
          "285:  return",
          "286:   (struct aesni_rfc4106_gcm_ctx *)",
          "287:   PTR_ALIGN((u8 *)",
          "288:   crypto_tfm_ctx(crypto_aead_tfm(tfm)), AESNI_ALIGN);",
          "",
          "[Added Lines]",
          "286:  unsigned long align = AESNI_ALIGN;",
          "288:  if (align <= crypto_tfm_ctx_alignment())",
          "289:   align = 1;",
          "290:  return PTR_ALIGN(crypto_aead_ctx(tfm), align);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "838:  if (IS_ERR(ctr_tfm))",
          "839:   return PTR_ERR(ctr_tfm);",
          "843:  ret = crypto_ablkcipher_setkey(ctr_tfm, key, key_len);",
          "844:  if (ret)",
          "845:   goto out_free_ablkcipher;",
          "",
          "[Removed Lines]",
          "841:  crypto_ablkcipher_clear_flags(ctr_tfm, ~0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "888: static int common_rfc4106_set_key(struct crypto_aead *aead, const u8 *key,",
          "889:       unsigned int key_len)",
          "890: {",
          "893:  struct aesni_rfc4106_gcm_ctx *ctx = aesni_rfc4106_gcm_ctx_get(aead);",
          "896:  if (key_len < 4) {",
          "898:   return -EINVAL;",
          "899:  }",
          "901:  key_len -= 4;",
          "908:  memcpy(ctx->nonce, key + key_len, sizeof(ctx->nonce));",
          "941: }",
          "943: static int rfc4106_set_key(struct crypto_aead *parent, const u8 *key,",
          "",
          "[Removed Lines]",
          "891:  int ret = 0;",
          "892:  struct crypto_tfm *tfm = crypto_aead_tfm(aead);",
          "894:  u8 *new_key_align, *new_key_mem = NULL;",
          "897:   crypto_tfm_set_flags(tfm, CRYPTO_TFM_RES_BAD_KEY_LEN);",
          "902:  if (key_len != AES_KEYSIZE_128 && key_len != AES_KEYSIZE_192 &&",
          "903:      key_len != AES_KEYSIZE_256) {",
          "904:   crypto_tfm_set_flags(tfm, CRYPTO_TFM_RES_BAD_KEY_LEN);",
          "905:   return -EINVAL;",
          "906:  }",
          "910:  if ((unsigned long)(&(ctx->aes_key_expanded.key_enc[0])) % AESNI_ALIGN)",
          "911:   return -EINVAL;",
          "913:  if ((unsigned long)key % AESNI_ALIGN) {",
          "915:   new_key_mem = kmalloc(key_len+AESNI_ALIGN, GFP_KERNEL);",
          "916:   if (!new_key_mem)",
          "917:    return -ENOMEM;",
          "919:   new_key_align = PTR_ALIGN(new_key_mem, AESNI_ALIGN);",
          "920:   memcpy(new_key_align, key, key_len);",
          "921:   key = new_key_align;",
          "922:  }",
          "924:  if (!irq_fpu_usable())",
          "925:   ret = crypto_aes_expand_key(&(ctx->aes_key_expanded),",
          "926:   key, key_len);",
          "927:  else {",
          "928:   kernel_fpu_begin();",
          "929:   ret = aesni_set_key(&(ctx->aes_key_expanded), key, key_len);",
          "930:   kernel_fpu_end();",
          "931:  }",
          "933:  if ((unsigned long)(&(ctx->hash_subkey[0])) % AESNI_ALIGN) {",
          "934:   ret = -EINVAL;",
          "935:   goto exit;",
          "936:  }",
          "937:  ret = rfc4106_set_hash_subkey(ctx->hash_subkey, key, key_len);",
          "938: exit:",
          "939:  kfree(new_key_mem);",
          "940:  return ret;",
          "",
          "[Added Lines]",
          "894:   crypto_aead_set_flags(aead, CRYPTO_TFM_RES_BAD_KEY_LEN);",
          "902:  return aes_set_key_common(crypto_aead_tfm(aead),",
          "903:       &ctx->aes_key_expanded, key, key_len) ?:",
          "904:         rfc4106_set_hash_subkey(ctx->hash_subkey, key, key_len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "960:  default:",
          "961:   return -EINVAL;",
          "962:  }",
          "964:  return 0;",
          "965: }",
          "",
          "[Removed Lines]",
          "963:  crypto_aead_crt(aead)->authsize = authsize;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "975:  return crypto_aead_setauthsize(&cryptd_tfm->base, authsize);",
          "976: }",
          "979: {",
          "980:  u8 one_entry_in_sg = 0;",
          "981:  u8 *src, *dst, *assoc;",
          "982:  __be32 counter = cpu_to_be32(1);",
          "983:  struct crypto_aead *tfm = crypto_aead_reqtfm(req);",
          "984:  struct aesni_rfc4106_gcm_ctx *ctx = aesni_rfc4106_gcm_ctx_get(tfm);",
          "986:  void *aes_ctx = &(ctx->aes_key_expanded);",
          "987:  unsigned long auth_tag_len = crypto_aead_authsize(tfm);",
          "990:  struct scatter_walk src_sg_walk;",
          "992:  struct scatter_walk dst_sg_walk;",
          "993:  unsigned int i;",
          "",
          "[Removed Lines]",
          "978: static int __driver_rfc4106_encrypt(struct aead_request *req)",
          "985:  u32 key_len = ctx->aes_key_expanded.key_length;",
          "988:  u8 iv_tab[16+AESNI_ALIGN];",
          "989:  u8* iv = (u8 *) PTR_ALIGN((u8 *)iv_tab, AESNI_ALIGN);",
          "991:  struct scatter_walk assoc_sg_walk;",
          "",
          "[Added Lines]",
          "942: static int helper_rfc4106_encrypt(struct aead_request *req)",
          "951:  u8 iv[16] __attribute__ ((__aligned__(AESNI_ALIGN)));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "998:  if (unlikely(req->assoclen != 8 && req->assoclen != 12))",
          "999:   return -EINVAL;",
          "1008:  for (i = 0; i < 4; i++)",
          "",
          "[Removed Lines]",
          "1000:  if (unlikely(auth_tag_len != 8 && auth_tag_len != 12 && auth_tag_len != 16))",
          "1001:          return -EINVAL;",
          "1002:  if (unlikely(key_len != AES_KEYSIZE_128 &&",
          "1003:               key_len != AES_KEYSIZE_192 &&",
          "1004:               key_len != AES_KEYSIZE_256))",
          "1005:          return -EINVAL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1015:   one_entry_in_sg = 1;",
          "1016:   scatterwalk_start(&src_sg_walk, req->src);",
          "1020:   dst = src;",
          "1021:   if (unlikely(req->src != req->dst)) {",
          "1022:    scatterwalk_start(&dst_sg_walk, req->dst);",
          "1024:   }",
          "1026:  } else {",
          "1029:    GFP_ATOMIC);",
          "1031:    return -ENOMEM;",
          "1036:   dst = src;",
          "1037:  }",
          "1039:  aesni_gcm_enc_tfm(aes_ctx, dst, src, (unsigned long)req->cryptlen, iv,",
          "1040:   ctx->hash_subkey, assoc, (unsigned long)req->assoclen, dst",
          "1041:   + ((unsigned long)req->cryptlen), auth_tag_len);",
          "1045:  if (one_entry_in_sg) {",
          "1046:   if (unlikely(req->src != req->dst)) {",
          "1049:   }",
          "1051:   scatterwalk_unmap(assoc);",
          "1054:  } else {",
          "1058:  }",
          "1059:  return 0;",
          "1060: }",
          "1063: {",
          "1064:  u8 one_entry_in_sg = 0;",
          "1065:  u8 *src, *dst, *assoc;",
          "",
          "[Removed Lines]",
          "1014:  if ((sg_is_last(req->src)) && (sg_is_last(req->assoc))) {",
          "1017:   scatterwalk_start(&assoc_sg_walk, req->assoc);",
          "1018:   src = scatterwalk_map(&src_sg_walk);",
          "1019:   assoc = scatterwalk_map(&assoc_sg_walk);",
          "1023:    dst = scatterwalk_map(&dst_sg_walk);",
          "1028:   src = kmalloc(req->cryptlen + auth_tag_len + req->assoclen,",
          "1030:   if (unlikely(!src))",
          "1032:   assoc = (src + req->cryptlen + auth_tag_len);",
          "1033:   scatterwalk_map_and_copy(src, req->src, 0, req->cryptlen, 0);",
          "1034:   scatterwalk_map_and_copy(assoc, req->assoc, 0,",
          "1035:      req->assoclen, 0);",
          "1047:    scatterwalk_unmap(dst);",
          "1048:    scatterwalk_done(&dst_sg_walk, 0, 0);",
          "1050:   scatterwalk_unmap(src);",
          "1052:   scatterwalk_done(&src_sg_walk, 0, 0);",
          "1053:   scatterwalk_done(&assoc_sg_walk, 0, 0);",
          "1055:   scatterwalk_map_and_copy(dst, req->dst, 0,",
          "1056:    req->cryptlen + auth_tag_len, 1);",
          "1057:   kfree(src);",
          "1062: static int __driver_rfc4106_decrypt(struct aead_request *req)",
          "",
          "[Added Lines]",
          "969:  if (sg_is_last(req->src) &&",
          "970:      req->src->offset + req->src->length <= PAGE_SIZE &&",
          "971:      sg_is_last(req->dst) &&",
          "972:      req->dst->offset + req->dst->length <= PAGE_SIZE) {",
          "975:   assoc = scatterwalk_map(&src_sg_walk);",
          "976:   src = assoc + req->assoclen;",
          "980:    dst = scatterwalk_map(&dst_sg_walk) + req->assoclen;",
          "984:   assoc = kmalloc(req->cryptlen + auth_tag_len + req->assoclen,",
          "986:   if (unlikely(!assoc))",
          "988:   scatterwalk_map_and_copy(assoc, req->src, 0,",
          "989:       req->assoclen + req->cryptlen, 0);",
          "990:   src = assoc + req->assoclen;",
          "994:  kernel_fpu_begin();",
          "998:  kernel_fpu_end();",
          "1004:    scatterwalk_unmap(dst - req->assoclen);",
          "1005:    scatterwalk_advance(&dst_sg_walk, req->dst->length);",
          "1006:    scatterwalk_done(&dst_sg_walk, 1, 0);",
          "1009:   scatterwalk_advance(&src_sg_walk, req->src->length);",
          "1010:   scatterwalk_done(&src_sg_walk, req->src == req->dst, 0);",
          "1012:   scatterwalk_map_and_copy(dst, req->dst, req->assoclen,",
          "1013:       req->cryptlen + auth_tag_len, 1);",
          "1014:   kfree(assoc);",
          "1019: static int helper_rfc4106_decrypt(struct aead_request *req)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1068:  int retval = 0;",
          "1069:  struct crypto_aead *tfm = crypto_aead_reqtfm(req);",
          "1070:  struct aesni_rfc4106_gcm_ctx *ctx = aesni_rfc4106_gcm_ctx_get(tfm);",
          "1072:  void *aes_ctx = &(ctx->aes_key_expanded);",
          "1073:  unsigned long auth_tag_len = crypto_aead_authsize(tfm);",
          "1077:  struct scatter_walk src_sg_walk;",
          "1079:  struct scatter_walk dst_sg_walk;",
          "1080:  unsigned int i;",
          "1084:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "1071:  u32 key_len = ctx->aes_key_expanded.key_length;",
          "1074:  u8 iv_and_authTag[32+AESNI_ALIGN];",
          "1075:  u8 *iv = (u8 *) PTR_ALIGN((u8 *)iv_and_authTag, AESNI_ALIGN);",
          "1076:  u8 *authTag = iv + 16;",
          "1078:  struct scatter_walk assoc_sg_walk;",
          "1082:  if (unlikely((req->cryptlen < auth_tag_len) ||",
          "1083:   (req->assoclen != 8 && req->assoclen != 12)))",
          "1085:  if (unlikely(auth_tag_len != 8 && auth_tag_len != 12 && auth_tag_len != 16))",
          "1086:          return -EINVAL;",
          "1087:  if (unlikely(key_len != AES_KEYSIZE_128 &&",
          "1088:               key_len != AES_KEYSIZE_192 &&",
          "1089:               key_len != AES_KEYSIZE_256))",
          "1090:          return -EINVAL;",
          "",
          "[Added Lines]",
          "1030:  u8 iv[16] __attribute__ ((__aligned__(AESNI_ALIGN)));",
          "1031:  u8 authTag[16];",
          "1036:  if (unlikely(req->assoclen != 8 && req->assoclen != 12))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1105:   one_entry_in_sg = 1;",
          "1106:   scatterwalk_start(&src_sg_walk, req->src);",
          "1110:   dst = src;",
          "1111:   if (unlikely(req->src != req->dst)) {",
          "1112:    scatterwalk_start(&dst_sg_walk, req->dst);",
          "1114:   }",
          "1116:  } else {",
          "1120:    return -ENOMEM;",
          "1125:   dst = src;",
          "1126:  }",
          "1128:  aesni_gcm_dec_tfm(aes_ctx, dst, src, tempCipherLen, iv,",
          "1129:   ctx->hash_subkey, assoc, (unsigned long)req->assoclen,",
          "1130:   authTag, auth_tag_len);",
          "1133:  retval = crypto_memneq(src + tempCipherLen, authTag, auth_tag_len) ?",
          "",
          "[Removed Lines]",
          "1104:  if ((sg_is_last(req->src)) && (sg_is_last(req->assoc))) {",
          "1107:   scatterwalk_start(&assoc_sg_walk, req->assoc);",
          "1108:   src = scatterwalk_map(&src_sg_walk);",
          "1109:   assoc = scatterwalk_map(&assoc_sg_walk);",
          "1113:    dst = scatterwalk_map(&dst_sg_walk);",
          "1118:   src = kmalloc(req->cryptlen + req->assoclen, GFP_ATOMIC);",
          "1119:   if (!src)",
          "1121:   assoc = (src + req->cryptlen);",
          "1122:   scatterwalk_map_and_copy(src, req->src, 0, req->cryptlen, 0);",
          "1123:   scatterwalk_map_and_copy(assoc, req->assoc, 0,",
          "1124:    req->assoclen, 0);",
          "",
          "[Added Lines]",
          "1051:  if (sg_is_last(req->src) &&",
          "1052:      req->src->offset + req->src->length <= PAGE_SIZE &&",
          "1053:      sg_is_last(req->dst) &&",
          "1054:      req->dst->offset + req->dst->length <= PAGE_SIZE) {",
          "1057:   assoc = scatterwalk_map(&src_sg_walk);",
          "1058:   src = assoc + req->assoclen;",
          "1062:    dst = scatterwalk_map(&dst_sg_walk) + req->assoclen;",
          "1067:   assoc = kmalloc(req->cryptlen + req->assoclen, GFP_ATOMIC);",
          "1068:   if (!assoc)",
          "1070:   scatterwalk_map_and_copy(assoc, req->src, 0,",
          "1071:       req->assoclen + req->cryptlen, 0);",
          "1072:   src = assoc + req->assoclen;",
          "1076:  kernel_fpu_begin();",
          "1080:  kernel_fpu_end();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1136:  if (one_entry_in_sg) {",
          "1137:   if (unlikely(req->src != req->dst)) {",
          "1140:   }",
          "1142:   scatterwalk_unmap(assoc);",
          "1145:  } else {",
          "1148:  }",
          "1149:  return retval;",
          "1150: }",
          "",
          "[Removed Lines]",
          "1138:    scatterwalk_unmap(dst);",
          "1139:    scatterwalk_done(&dst_sg_walk, 0, 0);",
          "1141:   scatterwalk_unmap(src);",
          "1143:   scatterwalk_done(&src_sg_walk, 0, 0);",
          "1144:   scatterwalk_done(&assoc_sg_walk, 0, 0);",
          "1146:   scatterwalk_map_and_copy(dst, req->dst, 0, tempCipherLen, 1);",
          "1147:   kfree(src);",
          "",
          "[Added Lines]",
          "1088:    scatterwalk_unmap(dst - req->assoclen);",
          "1089:    scatterwalk_advance(&dst_sg_walk, req->dst->length);",
          "1090:    scatterwalk_done(&dst_sg_walk, 1, 0);",
          "1093:   scatterwalk_advance(&src_sg_walk, req->src->length);",
          "1094:   scatterwalk_done(&src_sg_walk, req->src == req->dst, 0);",
          "1096:   scatterwalk_map_and_copy(dst, req->dst, req->assoclen,",
          "1097:       tempCipherLen, 1);",
          "1098:   kfree(assoc);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1189:  return crypto_aead_decrypt(subreq);",
          "1190: }",
          "1221: #endif",
          "1223: static struct crypto_alg aesni_algs[] = { {",
          "",
          "[Removed Lines]",
          "1192: static int helper_rfc4106_encrypt(struct aead_request *req)",
          "1193: {",
          "1194:  int ret;",
          "1196:  if (unlikely(!irq_fpu_usable())) {",
          "1197:   WARN_ONCE(1, \"__gcm-aes-aesni alg used in invalid context\");",
          "1198:   ret = -EINVAL;",
          "1199:  } else {",
          "1200:   kernel_fpu_begin();",
          "1201:   ret = __driver_rfc4106_encrypt(req);",
          "1202:   kernel_fpu_end();",
          "1203:  }",
          "1204:  return ret;",
          "1205: }",
          "1207: static int helper_rfc4106_decrypt(struct aead_request *req)",
          "1208: {",
          "1209:  int ret;",
          "1211:  if (unlikely(!irq_fpu_usable())) {",
          "1212:   WARN_ONCE(1, \"__gcm-aes-aesni alg used in invalid context\");",
          "1213:   ret = -EINVAL;",
          "1214:  } else {",
          "1215:   kernel_fpu_begin();",
          "1216:   ret = __driver_rfc4106_decrypt(req);",
          "1217:   kernel_fpu_end();",
          "1218:  }",
          "1219:  return ret;",
          "1220: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1389:    .geniv  = \"chainiv\",",
          "1390:   },",
          "1391:  },",
          "1413: #endif",
          "1414: #if IS_ENABLED(CONFIG_CRYPTO_PCBC)",
          "1415: }, {",
          "",
          "[Removed Lines]",
          "1392: }, {",
          "1393:  .cra_name  = \"__gcm-aes-aesni\",",
          "1394:  .cra_driver_name = \"__driver-gcm-aes-aesni\",",
          "1395:  .cra_priority  = 0,",
          "1396:  .cra_flags  = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_INTERNAL,",
          "1397:  .cra_blocksize  = 1,",
          "1398:  .cra_ctxsize  = sizeof(struct aesni_rfc4106_gcm_ctx) +",
          "1399:       AESNI_ALIGN,",
          "1400:  .cra_alignmask  = 0,",
          "1401:  .cra_type  = &crypto_aead_type,",
          "1402:  .cra_module  = THIS_MODULE,",
          "1403:  .cra_u = {",
          "1404:   .aead = {",
          "1405:    .setkey  = common_rfc4106_set_key,",
          "1406:    .setauthsize = common_rfc4106_set_authsize,",
          "1407:    .encrypt = helper_rfc4106_encrypt,",
          "1408:    .decrypt = helper_rfc4106_decrypt,",
          "1409:    .ivsize  = 8,",
          "1410:    .maxauthsize = 16,",
          "1411:   },",
          "1412:  },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1527: #ifdef CONFIG_X86_64",
          "1528: static struct aead_alg aesni_aead_algs[] = { {",
          "1529:  .init   = rfc4106_init,",
          "1530:  .exit   = rfc4106_exit,",
          "1531:  .setkey   = rfc4106_set_key,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1429:  .setkey   = common_rfc4106_set_key,",
          "1430:  .setauthsize  = common_rfc4106_set_authsize,",
          "1431:  .encrypt  = helper_rfc4106_encrypt,",
          "1432:  .decrypt  = helper_rfc4106_decrypt,",
          "1433:  .ivsize   = 8,",
          "1434:  .maxauthsize  = 16,",
          "1435:  .base = {",
          "1436:   .cra_name  = \"__gcm-aes-aesni\",",
          "1437:   .cra_driver_name = \"__driver-gcm-aes-aesni\",",
          "1438:   .cra_flags  = CRYPTO_ALG_INTERNAL,",
          "1439:   .cra_blocksize  = 1,",
          "1440:   .cra_ctxsize  = sizeof(struct aesni_rfc4106_gcm_ctx),",
          "1441:   .cra_alignmask  = AESNI_ALIGN - 1,",
          "1442:   .cra_module  = THIS_MODULE,",
          "1443:  },",
          "1444: }, {",
          "",
          "---------------"
        ]
      }
    }
  ]
}