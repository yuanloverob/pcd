{
  "cve_id": "CVE-2021-29518",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. In eager mode (default in TF 2.0 and later), session operations are invalid. However, users could still call the raw ops associated with them and trigger a null pointer dereference. The implementation(https://github.com/tensorflow/tensorflow/blob/eebb96c2830d48597d055d247c0e9aebaea94cd5/tensorflow/core/kernels/session_ops.cc#L104) dereferences the session state pointer without checking if it is valid. Thus, in eager mode, `ctx->session_state()` is nullptr and the call of the member function is undefined behavior. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ff70c47a396ef1e3cb73c90513da4f5cb71bebba",
  "patch_info": {
    "commit_hash": "ff70c47a396ef1e3cb73c90513da4f5cb71bebba",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ff70c47a396ef1e3cb73c90513da4f5cb71bebba",
    "files": [
      "tensorflow/core/kernels/session_ops.cc"
    ],
    "message": "Fix `tf.raw_ops.GetSessionTensor` and `tf.raw_ops.DeleteSessionTensor` null pointer dereferences.\n\nPiperOrigin-RevId: 368294154\nChange-Id: Ie10f07a0a9a1c2b685e08153d48a0ca4b93f9fc9",
    "before_after_code_files": [
      "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc": [
      "File: tensorflow/core/kernels/session_ops.cc -> tensorflow/core/kernels/session_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "101:     const Tensor& handle = ctx->input(0);",
      "102:     const string& name = handle.scalar<tstring>()();",
      "103:     Tensor val;",
      "105:     ctx->set_output(0, val);",
      "106:   }",
      "",
      "[Removed Lines]",
      "104:     OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));",
      "",
      "[Added Lines]",
      "103:     auto session_state = ctx->session_state();",
      "104:     OP_REQUIRES(ctx, session_state != nullptr,",
      "105:                 errors::FailedPrecondition(",
      "106:                     \"GetSessionTensor called on null session state\"));",
      "107:     OP_REQUIRES_OK(ctx, session_state->GetTensor(name, &val));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "131:   void Compute(OpKernelContext* ctx) override {",
      "132:     const Tensor& handle = ctx->input(0);",
      "133:     const string& name = handle.scalar<tstring>()();",
      "135:   }",
      "137:   TF_DISALLOW_COPY_AND_ASSIGN(DeleteSessionTensorOp);",
      "",
      "[Removed Lines]",
      "134:     OP_REQUIRES_OK(ctx, ctx->session_state()->DeleteTensor(name));",
      "",
      "[Added Lines]",
      "136:     auto session_state = ctx->session_state();",
      "137:     OP_REQUIRES(ctx, session_state != nullptr,",
      "138:                 errors::FailedPrecondition(",
      "139:                     \"DeleteSessionTensor called on null session state\"));",
      "140:     OP_REQUIRES_OK(ctx, session_state->DeleteTensor(name));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "624b6f5ad6f1d15e5829ddbce6fc3156914bdf45",
      "candidate_info": {
        "commit_hash": "624b6f5ad6f1d15e5829ddbce6fc3156914bdf45",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/624b6f5ad6f1d15e5829ddbce6fc3156914bdf45",
        "files": [
          "tensorflow/core/kernels/session_ops.cc"
        ],
        "message": "Fix `tf.raw_ops.GetSessionTensor` and `tf.raw_ops.DeleteSessionTensor` null pointer dereferences.\n\nPiperOrigin-RevId: 368294154\nChange-Id: Ie10f07a0a9a1c2b685e08153d48a0ca4b93f9fc9",
        "before_after_code_files": [
          "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc": [
          "File: tensorflow/core/kernels/session_ops.cc -> tensorflow/core/kernels/session_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     const Tensor& handle = ctx->input(0);",
          "102:     const string& name = handle.scalar<tstring>()();",
          "103:     Tensor val;",
          "105:     ctx->set_output(0, val);",
          "106:   }",
          "",
          "[Removed Lines]",
          "104:     OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));",
          "",
          "[Added Lines]",
          "103:     auto session_state = ctx->session_state();",
          "104:     OP_REQUIRES(ctx, session_state != nullptr,",
          "105:                 errors::FailedPrecondition(",
          "106:                     \"GetSessionTensor called on null session state\"));",
          "107:     OP_REQUIRES_OK(ctx, session_state->GetTensor(name, &val));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   void Compute(OpKernelContext* ctx) override {",
          "132:     const Tensor& handle = ctx->input(0);",
          "133:     const string& name = handle.scalar<tstring>()();",
          "135:   }",
          "137:   TF_DISALLOW_COPY_AND_ASSIGN(DeleteSessionTensorOp);",
          "",
          "[Removed Lines]",
          "134:     OP_REQUIRES_OK(ctx, ctx->session_state()->DeleteTensor(name));",
          "",
          "[Added Lines]",
          "136:     auto session_state = ctx->session_state();",
          "137:     OP_REQUIRES(ctx, session_state != nullptr,",
          "138:                 errors::FailedPrecondition(",
          "139:                     \"DeleteSessionTensor called on null session state\"));",
          "140:     OP_REQUIRES_OK(ctx, session_state->DeleteTensor(name));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6df14c6f0d6dedfb0de0156e082b5d35ce7646f6",
      "candidate_info": {
        "commit_hash": "6df14c6f0d6dedfb0de0156e082b5d35ce7646f6",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6df14c6f0d6dedfb0de0156e082b5d35ce7646f6",
        "files": [
          "tensorflow/core/kernels/session_ops.cc"
        ],
        "message": "Fix  and  null pointer dereferences.",
        "before_after_code_files": [
          "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc": [
          "File: tensorflow/core/kernels/session_ops.cc -> tensorflow/core/kernels/session_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     const Tensor& handle = ctx->input(0);",
          "119:     const string& name = handle.scalar<tstring>()();",
          "120:     Tensor val;",
          "122:     ctx->set_output(0, val);",
          "123:   }",
          "",
          "[Removed Lines]",
          "121:     OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));",
          "",
          "[Added Lines]",
          "121:     auto session_state = ctx->session_state();",
          "122:     OP_REQUIRES(ctx, session_state != nullptr,",
          "123:                 errors::FailedPrecondition(",
          "124:                     \"GetSessionTensor called on null session state\"));",
          "125:     OP_REQUIRES_OK(ctx, session_state->GetTensor(name, &val));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   void Compute(OpKernelContext* ctx) override {",
          "161:     const Tensor& handle = ctx->input(0);",
          "162:     const string& name = handle.scalar<tstring>()();",
          "164:   }",
          "166:   TF_DISALLOW_COPY_AND_ASSIGN(DeleteSessionTensorOp);",
          "",
          "[Removed Lines]",
          "163:     OP_REQUIRES_OK(ctx, ctx->session_state()->DeleteTensor(name));",
          "",
          "[Added Lines]",
          "167:     auto session_state = ctx->session_state();",
          "168:     OP_REQUIRES(ctx, session_state != nullptr,",
          "169:                 errors::FailedPrecondition(",
          "170:                     \"DeleteSessionTensor called on null session state\"));",
          "171:     OP_REQUIRES_OK(ctx, session_state->DeleteTensor(name));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dd084ef48c80d34a5ea1a4ac66946cca9dfe65c",
      "candidate_info": {
        "commit_hash": "2dd084ef48c80d34a5ea1a4ac66946cca9dfe65c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2dd084ef48c80d34a5ea1a4ac66946cca9dfe65c",
        "files": [
          "tensorflow/core/kernels/session_ops.cc"
        ],
        "message": "Fix  and  null pointer dereferences.",
        "before_after_code_files": [
          "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc": [
          "File: tensorflow/core/kernels/session_ops.cc -> tensorflow/core/kernels/session_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:     const Tensor& handle = ctx->input(0);",
          "118:     const string& name = handle.scalar<tstring>()();",
          "119:     Tensor val;",
          "121:     ctx->set_output(0, val);",
          "122:   }",
          "",
          "[Removed Lines]",
          "120:     OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));",
          "",
          "[Added Lines]",
          "120:     auto session_state = ctx->session_state();",
          "121:     OP_REQUIRES(ctx, session_state != nullptr,",
          "122:                 errors::FailedPrecondition(",
          "123:                     \"GetSessionTensor called on null session state\"));",
          "124:     OP_REQUIRES_OK(ctx, session_state->GetTensor(name, &val));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   void Compute(OpKernelContext* ctx) override {",
          "160:     const Tensor& handle = ctx->input(0);",
          "161:     const string& name = handle.scalar<tstring>()();",
          "163:   }",
          "165:   TF_DISALLOW_COPY_AND_ASSIGN(DeleteSessionTensorOp);",
          "",
          "[Removed Lines]",
          "162:     OP_REQUIRES_OK(ctx, ctx->session_state()->DeleteTensor(name));",
          "",
          "[Added Lines]",
          "166:     auto session_state = ctx->session_state();",
          "167:     OP_REQUIRES(ctx, session_state != nullptr,",
          "168:                 errors::FailedPrecondition(",
          "169:                     \"DeleteSessionTensor called on null session state\"));",
          "170:     OP_REQUIRES_OK(ctx, session_state->DeleteTensor(name));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7f511cce7c331334dd41224a3b48a61ae2810c9",
      "candidate_info": {
        "commit_hash": "d7f511cce7c331334dd41224a3b48a61ae2810c9",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d7f511cce7c331334dd41224a3b48a61ae2810c9",
        "files": [
          "tensorflow/core/kernels/session_ops.cc"
        ],
        "message": "Fix `tf.raw_ops.GetSessionTensor` and `tf.raw_ops.DeleteSessionTensor` null pointer dereferences.\n\nPiperOrigin-RevId: 368294154\nChange-Id: Ie10f07a0a9a1c2b685e08153d48a0ca4b93f9fc9",
        "before_after_code_files": [
          "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc": [
          "File: tensorflow/core/kernels/session_ops.cc -> tensorflow/core/kernels/session_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     const Tensor& handle = ctx->input(0);",
          "102:     const string& name = handle.scalar<tstring>()();",
          "103:     Tensor val;",
          "105:     ctx->set_output(0, val);",
          "106:   }",
          "",
          "[Removed Lines]",
          "104:     OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));",
          "",
          "[Added Lines]",
          "103:     auto session_state = ctx->session_state();",
          "104:     OP_REQUIRES(ctx, session_state != nullptr,",
          "105:                 errors::FailedPrecondition(",
          "106:                     \"GetSessionTensor called on null session state\"));",
          "107:     OP_REQUIRES_OK(ctx, session_state->GetTensor(name, &val));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   void Compute(OpKernelContext* ctx) override {",
          "132:     const Tensor& handle = ctx->input(0);",
          "133:     const string& name = handle.scalar<tstring>()();",
          "135:   }",
          "137:   TF_DISALLOW_COPY_AND_ASSIGN(DeleteSessionTensorOp);",
          "",
          "[Removed Lines]",
          "134:     OP_REQUIRES_OK(ctx, ctx->session_state()->DeleteTensor(name));",
          "",
          "[Added Lines]",
          "136:     auto session_state = ctx->session_state();",
          "137:     OP_REQUIRES(ctx, session_state != nullptr,",
          "138:                 errors::FailedPrecondition(",
          "139:                     \"DeleteSessionTensor called on null session state\"));",
          "140:     OP_REQUIRES_OK(ctx, session_state->DeleteTensor(name));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7033ee9b08a3a902f7a422e5d0d650ff138bc0e",
      "candidate_info": {
        "commit_hash": "a7033ee9b08a3a902f7a422e5d0d650ff138bc0e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a7033ee9b08a3a902f7a422e5d0d650ff138bc0e",
        "files": [
          "tensorflow/core/kernels/session_ops.cc"
        ],
        "message": "Fix  and  null pointer dereferences.",
        "before_after_code_files": [
          "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/session_ops.cc||tensorflow/core/kernels/session_ops.cc": [
          "File: tensorflow/core/kernels/session_ops.cc -> tensorflow/core/kernels/session_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     const Tensor& handle = ctx->input(0);",
          "119:     const string& name = handle.scalar<tstring>()();",
          "120:     Tensor val;",
          "122:     ctx->set_output(0, val);",
          "123:   }",
          "",
          "[Removed Lines]",
          "121:     OP_REQUIRES_OK(ctx, ctx->session_state()->GetTensor(name, &val));",
          "",
          "[Added Lines]",
          "121:     auto session_state = ctx->session_state();",
          "122:     OP_REQUIRES(ctx, session_state != nullptr,",
          "123:                 errors::FailedPrecondition(",
          "124:                     \"GetSessionTensor called on null session state\"));",
          "125:     OP_REQUIRES_OK(ctx, session_state->GetTensor(name, &val));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   void Compute(OpKernelContext* ctx) override {",
          "161:     const Tensor& handle = ctx->input(0);",
          "162:     const string& name = handle.scalar<tstring>()();",
          "164:   }",
          "166:   TF_DISALLOW_COPY_AND_ASSIGN(DeleteSessionTensorOp);",
          "",
          "[Removed Lines]",
          "163:     OP_REQUIRES_OK(ctx, ctx->session_state()->DeleteTensor(name));",
          "",
          "[Added Lines]",
          "167:     auto session_state = ctx->session_state();",
          "168:     OP_REQUIRES(ctx, session_state != nullptr,",
          "169:                 errors::FailedPrecondition(",
          "170:                     \"DeleteSessionTensor called on null session state\"));",
          "171:     OP_REQUIRES_OK(ctx, session_state->DeleteTensor(name));",
          "",
          "---------------"
        ]
      }
    }
  ]
}