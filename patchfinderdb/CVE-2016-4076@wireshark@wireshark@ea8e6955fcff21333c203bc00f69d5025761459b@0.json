{
  "cve_id": "CVE-2016-4076",
  "cve_desc": "epan/dissectors/packet-ncp2222.inc in the NCP dissector in Wireshark 2.0.x before 2.0.3 does not properly initialize memory for search patterns, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "ea8e6955fcff21333c203bc00f69d5025761459b",
  "patch_info": {
    "commit_hash": "ea8e6955fcff21333c203bc00f69d5025761459b",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/ea8e6955fcff21333c203bc00f69d5025761459b",
    "files": [
      "epan/dissectors/packet-ncp2222.inc"
    ],
    "message": "NCP2222: use wmem string buffer to build search pattern string\n\nBug: 11591\nChange-Id: I2c76938234da076fd22f77dc0ce04d09a9a0ba6c\nReviewed-on: https://code.wireshark.org/review/11142\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc": [
      "File: epan/dissectors/packet-ncp2222.inc -> epan/dissectors/packet-ncp2222.inc",
      "--- Hunk 1 ---",
      "[Context before]",
      "6150: {",
      "6151:     guint32 string_len, str_length, buffer_offset;",
      "6152:     gint i;",
      "6155:     gint length_remaining = 0;",
      "6157:     length_remaining = tvb_captured_length_remaining(tvb, offset);",
      "",
      "[Removed Lines]",
      "6153:     guint16 c_char;",
      "6154:     char *string_buf;",
      "",
      "[Added Lines]",
      "6153:     guint8 c_char;",
      "6154:     wmem_strbuf_t *string_buf;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6171:         THROW(ReportedBoundsError);",
      "6172:     }",
      "6176:     offset++;",
      "6177:     buffer_offset = offset;",
      "",
      "[Removed Lines]",
      "6174:     string_buf = (char *)wmem_alloc(wmem_packet_scope(), 255);",
      "6175:     string_buf[0] = '\\0';",
      "",
      "[Added Lines]",
      "6174:     string_buf = wmem_strbuf_new(wmem_packet_scope(), NULL);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "6193:                         if (c_char == 0x3f)",
      "6194:                         {",
      "6195:                             c_char = '?';",
      "6197:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
      "6198:                         }",
      "6199:                         if (c_char == 0x2a)",
      "6200:                         {",
      "6201:                             c_char = '*';",
      "6203:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
      "6204:                         }",
      "6205:                         if (c_char == 0xbf)",
      "6206:                         {",
      "6207:                             c_char = '?';",
      "6209:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
      "6210:                         }",
      "6211:                         if (c_char == 0xaa)",
      "6212:                         {",
      "6213:                             c_char = '*';",
      "6215:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
      "6216:                         }",
      "6217:                         if (c_char == 0xae)",
      "6218:                         {",
      "6219:                             c_char = '.';",
      "6221:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
      "6222:                         }",
      "6223:                     }",
      "6224:                     else",
      "6225:                     {",
      "6226:                         c_char = '.';",
      "6228:                     }",
      "6229:                 }",
      "6230:                 if (c_char == 0xef)",
      "",
      "[Removed Lines]",
      "6196:                             string_buf[i] = c_char & 0xff;",
      "6202:                             string_buf[i] = c_char & 0xff;",
      "6208:                             string_buf[i] = c_char & 0xff;",
      "6214:                             string_buf[i] = c_char & 0xff;",
      "6220:                             string_buf[i] = c_char & 0xff;",
      "6227:                         string_buf[i] = (char) c_char;",
      "",
      "[Added Lines]",
      "6195:                             wmem_strbuf_append_c(string_buf, c_char);",
      "6201:                             wmem_strbuf_append_c(string_buf, c_char);",
      "6207:                             wmem_strbuf_append_c(string_buf, c_char);",
      "6213:                             wmem_strbuf_append_c(string_buf, c_char);",
      "6219:                             wmem_strbuf_append_c(string_buf, c_char);",
      "6226:                         wmem_strbuf_append_c(string_buf, c_char);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6240:                         if (c_char == 0xbb)",
      "6241:                         {",
      "6242:                             c_char = '?';",
      "6244:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
      "6245:                         }",
      "6246:                         if (c_char == 0xbc)",
      "6247:                         {",
      "6248:                             c_char = '*';",
      "6250:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
      "6251:                         }",
      "6252:                         if (c_char == 0xbd)",
      "6253:                         {",
      "6254:                             c_char = '?';",
      "6256:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
      "6257:                         }",
      "6258:                         if (c_char == 0xbe)",
      "6259:                         {",
      "6260:                             c_char = '*';",
      "6262:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
      "6263:                         }",
      "6264:                         if (c_char == 0xbf)",
      "6265:                         {",
      "6266:                             c_char = '.';",
      "6268:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
      "6269:                         }",
      "6270:                     }",
      "",
      "[Removed Lines]",
      "6243:                             string_buf[i] = c_char & 0xff;",
      "6249:                             string_buf[i] = c_char & 0xff;",
      "6255:                             string_buf[i] = c_char & 0xff;",
      "6261:                             string_buf[i] = c_char & 0xff;",
      "6267:                             string_buf[i] = c_char & 0xff;",
      "",
      "[Added Lines]",
      "6242:                             wmem_strbuf_append_c(string_buf, c_char);",
      "6248:                             wmem_strbuf_append_c(string_buf, c_char);",
      "6254:                             wmem_strbuf_append_c(string_buf, c_char);",
      "6260:                             wmem_strbuf_append_c(string_buf, c_char);",
      "6266:                             wmem_strbuf_append_c(string_buf, c_char);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "6275:                 if (c_char != 0x00)",
      "6276:                 {",
      "6277:                     c_char = '.';",
      "6279:                 }",
      "6280:                 else",
      "6281:                 {",
      "",
      "[Removed Lines]",
      "6278:                     string_buf[i] = (char) c_char;",
      "",
      "[Added Lines]",
      "6277:                     wmem_strbuf_append_c(string_buf, c_char);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "6287:         }",
      "6288:         else",
      "6289:         {",
      "6291:         }",
      "6292:         buffer_offset++;",
      "6293:         length_remaining--;",
      "",
      "[Removed Lines]",
      "6290:             string_buf[i] = c_char & 0xff;",
      "",
      "[Added Lines]",
      "6289:             wmem_strbuf_append_c(string_buf, c_char);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "6301:         }",
      "6302:     }",
      "6309: }",
      "6311: static void",
      "",
      "[Removed Lines]",
      "6303:     if (i < 0) {",
      "6304:         i = 0;",
      "6305:     }",
      "6306:     string_buf[i+1] = '\\0';",
      "6308:     proto_tree_add_string(ncp_tree, hf_search_pattern, tvb, offset, string_len, string_buf);",
      "",
      "[Added Lines]",
      "6303:     proto_tree_add_string(ncp_tree, hf_search_pattern, tvb, offset, string_len, wmem_strbuf_get_str(string_buf));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a48b7764a2a18bcfce47311f709d7b018092805b",
      "candidate_info": {
        "commit_hash": "a48b7764a2a18bcfce47311f709d7b018092805b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a48b7764a2a18bcfce47311f709d7b018092805b",
        "files": [
          "epan/dissectors/packet-ncp2222.inc"
        ],
        "message": "NCP2222: use wmem string buffer to build search pattern string\n\nBug: 11591\nChange-Id: I2c76938234da076fd22f77dc0ce04d09a9a0ba6c\nReviewed-on: https://code.wireshark.org/review/11142\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit ea8e6955fcff21333c203bc00f69d5025761459b)\nReviewed-on: https://code.wireshark.org/review/14733\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ],
          "candidate": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc": [
          "File: epan/dissectors/packet-ncp2222.inc -> epan/dissectors/packet-ncp2222.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "6150: {",
          "6151:     guint32 string_len, str_length, buffer_offset;",
          "6152:     gint i;",
          "6155:     gint length_remaining = 0;",
          "6157:     length_remaining = tvb_captured_length_remaining(tvb, offset);",
          "",
          "[Removed Lines]",
          "6153:     guint16 c_char;",
          "6154:     char *string_buf;",
          "",
          "[Added Lines]",
          "6153:     guint8 c_char;",
          "6154:     wmem_strbuf_t *string_buf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6171:         THROW(ReportedBoundsError);",
          "6172:     }",
          "6176:     offset++;",
          "6177:     buffer_offset = offset;",
          "",
          "[Removed Lines]",
          "6174:     string_buf = (char *)wmem_alloc(wmem_packet_scope(), 255);",
          "6175:     string_buf[0] = '\\0';",
          "",
          "[Added Lines]",
          "6174:     string_buf = wmem_strbuf_new(wmem_packet_scope(), NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6193:                         if (c_char == 0x3f)",
          "6194:                         {",
          "6195:                             c_char = '?';",
          "6197:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
          "6198:                         }",
          "6199:                         if (c_char == 0x2a)",
          "6200:                         {",
          "6201:                             c_char = '*';",
          "6203:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
          "6204:                         }",
          "6205:                         if (c_char == 0xbf)",
          "6206:                         {",
          "6207:                             c_char = '?';",
          "6209:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
          "6210:                         }",
          "6211:                         if (c_char == 0xaa)",
          "6212:                         {",
          "6213:                             c_char = '*';",
          "6215:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
          "6216:                         }",
          "6217:                         if (c_char == 0xae)",
          "6218:                         {",
          "6219:                             c_char = '.';",
          "6221:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
          "6222:                         }",
          "6223:                     }",
          "6224:                     else",
          "6225:                     {",
          "6226:                         c_char = '.';",
          "6228:                     }",
          "6229:                 }",
          "6230:                 if (c_char == 0xef)",
          "",
          "[Removed Lines]",
          "6196:                             string_buf[i] = c_char & 0xff;",
          "6202:                             string_buf[i] = c_char & 0xff;",
          "6208:                             string_buf[i] = c_char & 0xff;",
          "6214:                             string_buf[i] = c_char & 0xff;",
          "6220:                             string_buf[i] = c_char & 0xff;",
          "6227:                         string_buf[i] = (char) c_char;",
          "",
          "[Added Lines]",
          "6195:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6201:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6207:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6213:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6219:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6226:                         wmem_strbuf_append_c(string_buf, c_char);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6240:                         if (c_char == 0xbb)",
          "6241:                         {",
          "6242:                             c_char = '?';",
          "6244:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
          "6245:                         }",
          "6246:                         if (c_char == 0xbc)",
          "6247:                         {",
          "6248:                             c_char = '*';",
          "6250:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
          "6251:                         }",
          "6252:                         if (c_char == 0xbd)",
          "6253:                         {",
          "6254:                             c_char = '?';",
          "6256:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
          "6257:                         }",
          "6258:                         if (c_char == 0xbe)",
          "6259:                         {",
          "6260:                             c_char = '*';",
          "6262:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
          "6263:                         }",
          "6264:                         if (c_char == 0xbf)",
          "6265:                         {",
          "6266:                             c_char = '.';",
          "6268:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
          "6269:                         }",
          "6270:                     }",
          "",
          "[Removed Lines]",
          "6243:                             string_buf[i] = c_char & 0xff;",
          "6249:                             string_buf[i] = c_char & 0xff;",
          "6255:                             string_buf[i] = c_char & 0xff;",
          "6261:                             string_buf[i] = c_char & 0xff;",
          "6267:                             string_buf[i] = c_char & 0xff;",
          "",
          "[Added Lines]",
          "6242:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6248:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6254:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6260:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6266:                             wmem_strbuf_append_c(string_buf, c_char);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6275:                 if (c_char != 0x00)",
          "6276:                 {",
          "6277:                     c_char = '.';",
          "6279:                 }",
          "6280:                 else",
          "6281:                 {",
          "",
          "[Removed Lines]",
          "6278:                     string_buf[i] = (char) c_char;",
          "",
          "[Added Lines]",
          "6277:                     wmem_strbuf_append_c(string_buf, c_char);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6287:         }",
          "6288:         else",
          "6289:         {",
          "6291:         }",
          "6292:         buffer_offset++;",
          "6293:         length_remaining--;",
          "",
          "[Removed Lines]",
          "6290:             string_buf[i] = c_char & 0xff;",
          "",
          "[Added Lines]",
          "6289:             wmem_strbuf_append_c(string_buf, c_char);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6301:         }",
          "6302:     }",
          "6309: }",
          "6311: static void",
          "",
          "[Removed Lines]",
          "6303:     if (i < 0) {",
          "6304:         i = 0;",
          "6305:     }",
          "6306:     string_buf[i+1] = '\\0';",
          "6308:     proto_tree_add_string(ncp_tree, hf_search_pattern, tvb, offset, string_len, string_buf);",
          "",
          "[Added Lines]",
          "6303:     proto_tree_add_string(ncp_tree, hf_search_pattern, tvb, offset, string_len, wmem_strbuf_get_str(string_buf));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5395a42ae455bd4d71a569b2dbbd66647c6873ed",
      "candidate_info": {
        "commit_hash": "5395a42ae455bd4d71a569b2dbbd66647c6873ed",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5395a42ae455bd4d71a569b2dbbd66647c6873ed",
        "files": [
          "epan/dissectors/packet-ncp2222.inc",
          "tools/ncp2222.py"
        ],
        "message": "ncp2222 Updates\n\nModifications to ncp2222.py\n\nAdd absolute time values eptime for file/volume info\nAdd support for 64 bit File Transfer NCP's (22/54, 22/55, 22/56, 22/57, 22/58, 87/70, 87/71, 87/72, 87/73, 89/41, 123/35)\nFix numerous dissection errors in NWInfo and ExtNWInfo structures\nFix some indention (white space) in source\n\nModifications to packet-ncp2222.inc\nChange seq count rollover value to 16 instead of 255 to make it more robust\nAdd ncp 87,72 reply\nAdd ncp 8x20 request\nFix ncp 8x20 reply\n\nChange-Id: I80bdcc5854c02edd4ea51c74aa0bbc9c0e062bc1\nReviewed-on: https://code.wireshark.org/review/10017\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>",
        "before_after_code_files": [
          "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc",
          "tools/ncp2222.py||tools/ncp2222.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ],
          "candidate": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc": [
          "File: epan/dissectors/packet-ncp2222.inc -> epan/dissectors/packet-ncp2222.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1748:     request_key = wmem_new(wmem_file_scope(), ncp_req_hash_key);",
          "1749:     request_key->conversation = conversation;",
          "1753:     request_value = wmem_new0(wmem_file_scope(), ncp_req_hash_value);",
          "1754:     request_value->ncp_rec = ncp_rec;",
          "",
          "[Removed Lines]",
          "1751:     request_key->nw_sequence_long = (0x10000 + ((pkt_num/255)<<16)) | nw_sequence;",
          "",
          "[Added Lines]",
          "1751:     request_key->nw_sequence_long = (0x10000 + ((pkt_num/16)<<16)) | nw_sequence;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1793:     request_key.conversation = conversation;",
          "",
          "[Removed Lines]",
          "1795:     request_key.nw_sequence_long = (0x10000+((pkt_num/255)<<16)) | nw_sequence;",
          "",
          "[Added Lines]",
          "1795:     request_key.nw_sequence_long = (0x10000+((pkt_num/16)<<16)) | nw_sequence;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2746:             switch (PTREE_FINFO(tree_pointer)->hfinfo->type)",
          "2747:             {",
          "2750:                 g_snprintf(buffer, (gulong) buffer_size, \"%u\", get_finfo_value_integer(PTREE_FINFO(tree_pointer)));",
          "2751:                 break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2749:                 g_snprintf(buffer, (gulong) buffer_size, \"%02x\", get_finfo_value_integer(PTREE_FINFO(tree_pointer)));",
          "2750:                 break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6720:     }",
          "6721: }",
          "6723: static void",
          "6724: dissect_ncp_23_26_reply(tvbuff_t *tvb, proto_tree *volatile ncp_tree)",
          "6725: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6725: static void",
          "6726: dissect_ncp_87_72_reply(tvbuff_t *tvb, proto_tree *volatile ncp_tree)",
          "6727: {",
          "6728:     proto_tree_add_item(ncp_tree, hf_ncp_bytes_actually_trans_64, tvb, tvb_captured_length_remaining(tvb, 0)-4, 4, FALSE);",
          "6729: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6740:     proto_tree_add_item(ncp_tree, hf_ncp_connection_type, tvb, 20, 1, TRUE);",
          "6741: }",
          "6743: static void",
          "6744: dissect_ncp_8x20reply(tvbuff_t *tvb, proto_tree *volatile ncp_tree,",
          "6745:                       const ncp_record *ncp_rec, ncp_req_hash_value *request_value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6751: static void",
          "6752: dissect_ncp_8x20req(tvbuff_t *tvb, proto_tree *volatile ncp_tree, guint32 offset, guint func)",
          "6753: {",
          "6754:     guint32 string_len, str_length, buffer_offset;",
          "6755:     gint i;",
          "6756:     guint16 c_char;",
          "6757:     char *string_buf;",
          "6758:     gint length_remaining = 0;",
          "6760:     length_remaining = tvb_captured_length_remaining(tvb, offset);",
          "6761:     if (func == 0x57)",
          "6762:     {",
          "6763:         string_len = tvb_get_guint8(tvb, offset);",
          "6764:         str_length = tvb_get_guint8(tvb, offset);",
          "6765:     }",
          "6766:     else",
          "6767:     {",
          "6768:         string_len = tvb_get_letohs(tvb, offset);",
          "6769:         str_length = tvb_get_letohs(tvb, offset);",
          "6770:     }",
          "6772:     if((gint)str_length > length_remaining)",
          "6773:     {",
          "6774:         THROW(ReportedBoundsError);",
          "6775:     }",
          "6777:     string_buf = (char *)wmem_alloc(wmem_packet_scope(), 255);",
          "6778:     string_buf[0] = '\\0';",
          "6779:     offset++;",
          "6780:     buffer_offset = offset;",
          "6782:     for ( i = 0; i <= (gint)str_length; i++ )",
          "6783:     {",
          "6784:         c_char = tvb_get_guint8(tvb, buffer_offset );",
          "6785:         if (c_char<0x20 || c_char>0x7e)",
          "6786:         {",
          "6787:             if (c_char == 0xff || c_char == 0xef)",
          "6788:             {",
          "6789:                 if (c_char == 0xff)",
          "6790:                 {",
          "6791:                     buffer_offset++;",
          "6792:                     length_remaining--;",
          "6793:                     c_char = tvb_get_guint8(tvb, buffer_offset);",
          "6794:                     if (c_char == 0x3f || c_char == 0x2a || c_char == 0xbf || c_char == 0xaa || c_char == 0xae)",
          "6795:                     {",
          "6796:                         if (c_char == 0x3f)",
          "6797:                         {",
          "6798:                             c_char = '?';",
          "6799:                             string_buf[i] = c_char & 0xff;",
          "6800:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
          "6801:                         }",
          "6802:                         if (c_char == 0x2a)",
          "6803:                         {",
          "6804:                             c_char = '*';",
          "6805:                             string_buf[i] = c_char & 0xff;",
          "6806:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
          "6807:                         }",
          "6808:                         if (c_char == 0xbf)",
          "6809:                         {",
          "6810:                             c_char = '?';",
          "6811:                             string_buf[i] = c_char & 0xff;",
          "6812:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
          "6813:                         }",
          "6814:                         if (c_char == 0xaa)",
          "6815:                         {",
          "6816:                             c_char = '*';",
          "6817:                             string_buf[i] = c_char & 0xff;",
          "6818:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
          "6819:                         }",
          "6820:                         if (c_char == 0xae)",
          "6821:                         {",
          "6822:                             c_char = '.';",
          "6823:                             string_buf[i] = c_char & 0xff;",
          "6824:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
          "6825:                         }",
          "6826:                     }",
          "6827:                     else",
          "6828:                     {",
          "6829:                         c_char = '.';",
          "6830:                         string_buf[i] = (char) c_char;",
          "6831:                     }",
          "6832:                 }",
          "6833:                 if (c_char == 0xef)",
          "6834:                 {",
          "6835:                     buffer_offset++;",
          "6836:                     length_remaining--;",
          "6837:                     c_char = tvb_get_guint8(tvb, buffer_offset);",
          "6838:                     if (c_char == 0xa3)",
          "6839:                     {",
          "6840:                         buffer_offset++;",
          "6841:                         length_remaining--;",
          "6842:                         c_char = tvb_get_guint8(tvb, buffer_offset);",
          "6843:                         if (c_char == 0xbb)",
          "6844:                         {",
          "6845:                             c_char = '?';",
          "6846:                             string_buf[i] = c_char & 0xff;",
          "6847:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
          "6848:                         }",
          "6849:                         if (c_char == 0xbc)",
          "6850:                         {",
          "6851:                             c_char = '*';",
          "6852:                             string_buf[i] = c_char & 0xff;",
          "6853:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
          "6854:                         }",
          "6855:                         if (c_char == 0xbd)",
          "6856:                         {",
          "6857:                             c_char = '?';",
          "6858:                             string_buf[i] = c_char & 0xff;",
          "6859:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
          "6860:                         }",
          "6861:                         if (c_char == 0xbe)",
          "6862:                         {",
          "6863:                             c_char = '*';",
          "6864:                             string_buf[i] = c_char & 0xff;",
          "6865:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
          "6866:                         }",
          "6867:                         if (c_char == 0xbf)",
          "6868:                         {",
          "6869:                             c_char = '.';",
          "6870:                             string_buf[i] = c_char & 0xff;",
          "6871:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
          "6872:                         }",
          "6873:                     }",
          "6874:                 }",
          "6875:             }",
          "6876:             else",
          "6877:             {",
          "6878:                 if (c_char != 0x00)",
          "6879:                 {",
          "6880:                     c_char = '.';",
          "6881:                     string_buf[i] = (char) c_char;",
          "6882:                 }",
          "6883:                 else",
          "6884:                 {",
          "6885:                     i--;",
          "6886:                     str_length--;",
          "6887:                     offset++;",
          "6888:                 }",
          "6889:             }",
          "6890:         }",
          "6891:         else",
          "6892:         {",
          "6893:             string_buf[i] = c_char & 0xff;",
          "6894:         }",
          "6895:         buffer_offset++;",
          "6896:         length_remaining--;",
          "6898:         if(length_remaining==1)",
          "6899:         {",
          "6900:             break;",
          "6901:         }",
          "6904:         }",
          "6905:     }",
          "6906:     if (i < 0) {",
          "6907:         i = 0;",
          "6908:     }",
          "6909:     string_buf[i+1] = '\\0';",
          "6911:     proto_tree_add_string(ncp_tree, hf_search_pattern, tvb, offset, string_len, string_buf);",
          "6912: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6750:     proto_tree          *atree, *btree;",
          "6751:     proto_item          *aitem, *bitem;",
          "6755:     proto_tree_add_item(atree, hf_ncp_volume_number, tvb, 8, 1, TRUE);",
          "6756:     proto_tree_add_item(atree, hf_ncp_directory_entry_number, tvb, 9, 4, TRUE);",
          "",
          "[Removed Lines]",
          "6753:     atree = proto_tree_add_subtree(ncp_tree, tvb, 8, 9, ett_ncp, NULL, \"Search Sequence\");",
          "",
          "[Added Lines]",
          "6924:     if ((request_value->req_mask ==0) & (request_value->req_mask_ext == 0))",
          "6925:     {",
          "6926:         return;",
          "6927:     }",
          "6928:     atree = proto_tree_add_subtree(ncp_tree, tvb, 8, 9, ett_ncp, &aitem, \"Search Sequence\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6821:                 loffset += 6;",
          "6822:             }",
          "6823:         }",
          "6825:         if (request_value->req_mask & 0x0020 && ncp_newstyle) {",
          "6826:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Extended Attributes\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7000:         if (request_value->req_mask & 0x0020 && !ncp_newstyle) {",
          "7001:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Extended Attributes\");",
          "7002:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "7003:             process_ptvc_record(ptvc, ptvc_struct_ea_info_struct,",
          "7004:                     NULL, TRUE, ncp_rec);",
          "7005:             ptvcursor_free(ptvc);",
          "7006:             loffset += 12;",
          "7007:             proto_item_set_end(bitem, tvb, loffset);",
          "7008:         }",
          "7009:         else",
          "7010:         {",
          "7011:             if ((request_value->req_mask_ext & 0x8000)==FALSE && !ncp_newstyle) {",
          "7012:                 loffset += 12;",
          "7013:             }",
          "7014:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6838:                 loffset += 12;",
          "6839:             }",
          "6840:         }",
          "6845:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6847:                     NULL, TRUE, ncp_rec);",
          "6848:             ptvcursor_free(ptvc);",
          "6849:             loffset += 8;",
          "",
          "[Removed Lines]",
          "6842:         if (request_value->req_mask & 0x0100 && !ncp_newstyle) {",
          "6843:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Creation\");",
          "6846:             process_ptvc_record(ptvc, ptvc_struct_creation_info_struct,",
          "",
          "[Added Lines]",
          "7033:         if (request_value->req_mask & 0x0040) {",
          "7034:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Archive\");",
          "7036:             process_ptvc_record(ptvc, ptvc_struct_archive_info_struct,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6851:         }",
          "6852:         else",
          "6853:         {",
          "6855:                 loffset += 8;",
          "6856:             }",
          "6857:         }",
          "",
          "[Removed Lines]",
          "6854:             if ((request_value->req_mask_ext & 0x8000)==FALSE && !ncp_newstyle) {",
          "",
          "[Added Lines]",
          "7044:             if ((request_value->req_mask_ext & 0x8000)==FALSE) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6872:                 loffset += 10;",
          "6873:             }",
          "6874:         }",
          "6877:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Creation\");",
          "6878:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6879:             process_ptvc_record(ptvc, ptvc_struct_creation_info_struct,",
          "",
          "[Removed Lines]",
          "6876:         if (request_value->req_mask & 0x0100 && ncp_newstyle) {",
          "",
          "[Added Lines]",
          "7066:         if (request_value->req_mask & 0x0100 && !ncp_newstyle) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6884:         }",
          "6885:         else",
          "6886:         {",
          "6888:                 loffset += 8;",
          "6889:             }",
          "6890:         }",
          "6894:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6896:                     NULL, TRUE, ncp_rec);",
          "6897:             ptvcursor_free(ptvc);",
          "6898:             loffset += 8;",
          "",
          "[Removed Lines]",
          "6887:             if ((request_value->req_mask_ext & 0x8000)==FALSE && ncp_newstyle) {",
          "6892:         if (request_value->req_mask & 0x0040) {",
          "6893:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Archive\");",
          "6895:             process_ptvc_record(ptvc, ptvc_struct_archive_info_struct,",
          "",
          "[Added Lines]",
          "7077:             if ((request_value->req_mask_ext & 0x8000)==FALSE && !ncp_newstyle) {",
          "7082:         if (request_value->req_mask & 0x0100 && ncp_newstyle) {",
          "7083:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Creation\");",
          "7085:             process_ptvc_record(ptvc, ptvc_struct_creation_info_struct,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6900:         }",
          "6901:         else",
          "6902:         {",
          "6904:                 loffset += 8;",
          "6905:             }",
          "6906:         }",
          "6914:         }",
          "6915:         else",
          "6916:         {",
          "6917:             if ((request_value->req_mask_ext & 0x8000)==FALSE) {",
          "6919:             }",
          "6920:         }",
          "",
          "[Removed Lines]",
          "6903:             if ((request_value->req_mask_ext & 0x8000)==FALSE) {",
          "6908:         if (request_value->req_mask & 0x0800) {",
          "6909:             ptvc = ptvcursor_new(atree, tvb, loffset);",
          "6910:             process_ptvc_record(ptvc, ptvc_struct_rights_info_struct,",
          "6911:                     NULL, TRUE, ncp_rec);",
          "6912:             ptvcursor_free(ptvc);",
          "6913:             loffset += 2;",
          "6918:                 loffset += 2;",
          "",
          "[Added Lines]",
          "7093:             if ((request_value->req_mask_ext & 0x8000)==FALSE && ncp_newstyle) {",
          "7098:         if (request_value->req_mask & 0x0200) {",
          "7099:             proto_tree_add_item(atree, hf_ncp_creator_name_space_number, tvb, loffset, 1, TRUE);",
          "7100:             loffset += 4;",
          "7105:                 loffset += 4;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6934:                 loffset += 12;",
          "6935:             }",
          "6936:         }",
          "6942:                     NULL, TRUE, ncp_rec);",
          "6943:             ptvcursor_free(ptvc);",
          "6957:         }",
          "6958:         else",
          "6959:         {",
          "6960:             if ((request_value->req_mask_ext & 0x8000)==FALSE) {",
          "6962:             }",
          "6963:         }",
          "6964:         if (request_value->req_mask & 0x1000) {",
          "6965:             proto_tree_add_item(atree, hf_ncp_curr_ref_id, tvb, loffset, 2, TRUE);",
          "6966:             loffset += 2;",
          "6967:         }",
          "6968:         if (request_value->req_mask & 0x2000) {",
          "6969:             proto_tree_add_item(atree, hf_ncp_attr_def_32, tvb, loffset, 1, TRUE);",
          "6970:             loffset += 4;",
          "6971:         }",
          "6972:         if (request_value->req_mask & 0x4000) {",
          "6973:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Actual\");",
          "",
          "[Removed Lines]",
          "6938:         if (request_value->req_mask & 0x0020 && !ncp_newstyle) {",
          "6939:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Extended Attributes\");",
          "6940:             ptvc = ptvcursor_new(btree, tvb, loffset);",
          "6941:             process_ptvc_record(ptvc, ptvc_struct_ea_info_struct,",
          "6944:             loffset += 12;",
          "6945:             proto_item_set_end(bitem, tvb, loffset);",
          "6946:         }",
          "6947:         else",
          "6948:         {",
          "6949:             if ((request_value->req_mask_ext & 0x8000)==FALSE && !ncp_newstyle) {",
          "6950:                 loffset += 12;",
          "6951:             }",
          "6952:         }",
          "6954:         if (request_value->req_mask & 0x0200) {",
          "6955:             proto_tree_add_item(atree, hf_ncp_creator_name_space_number, tvb, loffset, 1, TRUE);",
          "6956:             loffset += 4;",
          "6961:                 loffset += 4;",
          "",
          "[Added Lines]",
          "7125:         if (request_value->req_mask & 0x0800) {",
          "7126:             ptvc = ptvcursor_new(atree, tvb, loffset);",
          "7127:             process_ptvc_record(ptvc, ptvc_struct_rights_info_struct,",
          "7130:             loffset += 2;",
          "7135:                 loffset += 2;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6977:             loffset += 8;",
          "6978:             proto_item_set_end(bitem, tvb, loffset);",
          "6979:         }",
          "6980:         if (request_value->req_mask & 0x8000) {",
          "6981:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"Logical\");",
          "6986:             proto_item_set_end(bitem, tvb, loffset);",
          "6987:         }",
          "6988:         if (request_value->req_mask_ext & 0x0001 && ncp_newstyle) {",
          "6989:             proto_tree_add_item(atree, hf_ncp_sec_rel_to_y2k, tvb, loffset, 4, TRUE);",
          "6990:             loffset += 4;",
          "6991:         }",
          "6992:         if (request_value->req_mask_ext & 0x0002 && ncp_newstyle) {",
          "6993:             btree = proto_tree_add_subtree(atree, tvb, loffset, -1, ett_ncp, &bitem, \"DOS Name\");",
          "",
          "[Removed Lines]",
          "6983:             proto_tree_add_item(btree, hf_ncp_data_stream_num_long, tvb, loffset, 4, TRUE);",
          "6984:             proto_tree_add_item(btree, hf_ncp_data_stream_size, tvb, loffset+4, 4, TRUE);",
          "6985:             loffset += 8;",
          "",
          "[Added Lines]",
          "7160:             proto_tree_add_item(btree, hf_ncp_number_of_data_streams_long, tvb, loffset, 4, TRUE);",
          "7161:             number_of_items = tvb_get_letohs(tvb, loffset);",
          "7162:             loffset += 4;",
          "7163:             for (x = 1; x <= number_of_items; x++ )",
          "7164:             {",
          "7165:                 proto_tree_add_item(btree, hf_ncp_data_stream_num_long, tvb, loffset, 4, TRUE);",
          "7166:                 proto_tree_add_item(btree, hf_ncp_data_stream_size, tvb, loffset+4, 4, TRUE);",
          "7167:                 loffset += 8;",
          "7168:             }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7059:             str_length = tvb_get_letohs(tvb, loffset);",
          "7060:             loffset += 2;",
          "7061:         }",
          "7063:         loffset += str_length;",
          "7065:         proto_item_set_end(aitem, tvb, loffset);",
          "",
          "[Removed Lines]",
          "7062:         proto_tree_add_item(atree, hf_ncp_file_name_12, tvb, loffset, str_length, FALSE);",
          "",
          "[Added Lines]",
          "7255:         proto_tree_add_item(atree, hf_ncp_file_name_12, tvb, loffset, str_length, ENC_UTF_8);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "7840:         if (func == 0x59 && subfunc == 0x6) {",
          "7841:             dissect_ncp_89_6_request(tvb, ncp_tree, 22);",
          "7842:         }",
          "7844:         trap_for_expert_event(ncp_tree, pinfo, ncp_rec, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8037:         if (ncp_rec->func == 0x59 && (ncp_rec->subfunc == 0x14 || ncp_rec->subfunc == 0x03)) {",
          "8038:             if (ncp_rec->func == 0x59 && ncp_rec->subfunc == 0x03)",
          "8039:             {",
          "8040:                  dissect_ncp_8x20req(tvb, ncp_tree, 26, ncp_rec->func);",
          "8041:             }",
          "8043: {",
          "8044:             dissect_ncp_8x20req(tvb, ncp_tree, 27, ncp_rec->func);",
          "8046:             else",
          "8047:             {",
          "8048:                 dissect_ncp_8x20req(tvb, ncp_tree, 28, ncp_rec->func);",
          "8049:             }",
          "8050:         }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "9069:         if ((ncp_rec->func == 0x57 || ncp_rec->func == 0x59) && ncp_rec->subfunc == 0x14) {",
          "9070:             dissect_ncp_8x20reply(tvb, ncp_tree, ncp_rec, request_value);",
          "9071:         }",
          "9076:         if (ncp_rec->func == 5 && ncp_echo_conn) {",
          "9077:             expert_add_info(pinfo, NULL, &ei_ncp_connection_destroyed);",
          "9078:         }",
          "",
          "[Removed Lines]",
          "9073:         if (ncp_rec->func == 0x17 && ncp_rec->subfunc == 0x1a) {",
          "9074:             dissect_ncp_23_26_reply(tvb, ncp_tree);",
          "9075:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "9145:             if (ncp_rec->func == 0x7b && ncp_rec->subfunc == 0x3e) {",
          "9146:                 dissect_ncp_123_62_reply(tvb, ncp_tree);",
          "9147:             }",
          "9148:         }",
          "9150:         trap_for_expert_event(ncp_tree, pinfo, ncp_rec, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9353:             if (ncp_rec->func == 0x17 && ncp_rec->subfunc == 0x1a) {",
          "9354:                 dissect_ncp_23_26_reply(tvb, ncp_tree);",
          "9355:             }",
          "9357:             if (ncp_rec->func == 0x57 && ncp_rec->subfunc == 0x48) {",
          "9358:                 dissect_ncp_87_72_reply(tvb, ncp_tree);",
          "9359:             }",
          "",
          "---------------"
        ],
        "tools/ncp2222.py||tools/ncp2222.py": [
          "File: tools/ncp2222.py -> tools/ncp2222.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "877:     def __init__(self, abbrev, descr, endianness = LE):",
          "878:         Type.__init__(self, abbrev, descr, 8, endianness)",
          "880: class boolean8(uint8):",
          "881:     type    = \"boolean8\"",
          "882:     ftype   = \"FT_BOOLEAN\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "880: class eptime(Type, CountingNumber):",
          "881:     type    = \"eptime\"",
          "882:     ftype   = \"FT_ABSOLUTE_TIME\"",
          "883:     disp    = \"ABSOLUTE_TIME_LOCAL\"",
          "884:     def __init__(self, abbrev, descr, endianness = LE):",
          "885:         Type.__init__(self, abbrev, descr, 4, endianness)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1270: AFPEntryID.Display(\"BASE_HEX\")",
          "1271: AllocAvailByte                  = uint32(\"alloc_avail_byte\", \"Bytes Available for Allocation\")",
          "1272: AllocateMode                    = bitfield16(\"alloc_mode\", \"Allocate Mode\", [",
          "1274:             [0x00, \"Permanent\"],",
          "1275:             [0x01, \"Temporary\"],",
          "1276:     ]),",
          "1278:     bf_boolean16(0x4000, \"alloc_reply_lvl2\",\"Reply Level 2\"),",
          "1279:     bf_boolean16(0x8000, \"alloc_dst_name_spc\",\"Destination Name Space Input Parameter\"),",
          "1280: ])",
          "",
          "[Removed Lines]",
          "1273:         bf_val_str16(0x0001, \"alloc_dir_hdl\", \"Dir Handle Type\",[",
          "1277:         bf_boolean16(0x0002, \"alloc_spec_temp_dir_hdl\",\"Special Temporary Directory Handle\"),",
          "",
          "[Added Lines]",
          "1280:     bf_val_str16(0x0001, \"alloc_dir_hdl\", \"Dir Handle Type\",[",
          "1284:     bf_boolean16(0x0002, \"alloc_spec_temp_dir_hdl\",\"Special Temporary Directory Handle\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1320:         bf_boolean32(0x00000008, \"att_def32_execute\", \"Execute\"),",
          "1321:         bf_boolean32(0x00000010, \"att_def32_sub_only\", \"Subdirectory\"),",
          "1322:         bf_boolean32(0x00000020, \"att_def32_archive\", \"Archive\"),",
          "1324:         bf_boolean32(0x00000080, \"att_def32_shareable\", \"Shareable\"),",
          "1325:         bf_val_str32(0x00000700, \"att_def32_search\", \"Search Mode\",[",
          "1326:             [0, \"Search on all Read Only Opens\"],",
          "",
          "[Removed Lines]",
          "1323:     bf_boolean32(0x00000040, \"att_def32_execute_confirm\", \"Execute Confirm\"),",
          "",
          "[Added Lines]",
          "1330:         bf_boolean32(0x00000040, \"att_def32_execute_confirm\", \"Execute Confirm\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1371: AuditVersionDate                = uint16(\"audit_ver_date\", \"Auditing Version Date\")",
          "1372: AuditVersionDate.NWDate()",
          "1373: AvailableBlocks                 = uint32(\"available_blocks\", \"Available Blocks\")",
          "1374: AvailableClusters               = uint16(\"available_clusters\", \"Available Clusters\")",
          "1375: AvailableDirectorySlots         = uint16(\"available_directory_slots\", \"Available Directory Slots\")",
          "1376: AvailableDirEntries             = uint32(\"available_dir_entries\", \"Available Directory Entries\")",
          "1377: AvailableIndexedFiles           = uint16(\"available_indexed_files\", \"Available Indexed Files\")",
          "1379: BackgroundAgedWrites            = uint32(\"background_aged_writes\", \"Background Aged Writes\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1381: AvailableBlocks64               = uint64(\"available_blocks64\", \"Available Blocks\")",
          "1385: AvailableDirEntries64           = uint64(\"available_dir_entries64\", \"Available Directory Entries\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1399:         [0x04, \"PCI\"],",
          "1400:         [0x08, \"PCMCIA\"],",
          "1401:         [0x10, \"ISA\"],",
          "1403: ])",
          "1404: BytesActuallyTransferred        = uint32(\"bytes_actually_transferred\", \"Bytes Actually Transferred\")",
          "1405: BytesRead                       = fw_string(\"bytes_read\", \"Bytes Read\", 6)",
          "1406: BytesToCopy                     = uint32(\"bytes_to_copy\", \"Bytes to Copy\")",
          "1407: BytesWritten                    = fw_string(\"bytes_written\", \"Bytes Written\", 6)",
          "1409: CacheAllocations                = uint32(\"cache_allocations\", \"Cache Allocations\")",
          "",
          "[Removed Lines]",
          "1402:     [0x14, \"ISA/PCI\"],",
          "",
          "[Added Lines]",
          "1411:         [0x14, \"ISA/PCI\"],",
          "1414: BytesActuallyTransferred64bit   = uint64(\"bytes_actually_transferred_64\", \"Bytes Actually Transferred\", LE)",
          "1415: BytesActuallyTransferred64bit.Display(\"BASE_DEC\")",
          "1418: BytesToCopy64bit                = uint64(\"bytes_to_copy_64\", \"Bytes to Copy\")",
          "1419: BytesToCopy64bit.Display(\"BASE_DEC\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1425:         [ 0x01, \"Clear OP-Lock\" ],",
          "1426:         [ 0x02, \"Acknowledge Callback\" ],",
          "1427:         [ 0x03, \"Decline Callback\" ],",
          "1429: ])",
          "1430: ChangeBits                      = bitfield16(\"change_bits\", \"Change Bits\", [",
          "1431:         bf_boolean16(0x0001, \"change_bits_modify\", \"Modify Name\"),",
          "",
          "[Removed Lines]",
          "1428:     [ 0x04, \"Level 2\" ],",
          "",
          "[Added Lines]",
          "1441:         [ 0x04, \"Level 2\" ],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1436:         bf_boolean16(0x0020, \"change_bits_adate\", \"Archive Date\"),",
          "1437:         bf_boolean16(0x0040, \"change_bits_atime\", \"Archive Time\"),",
          "1438:         bf_boolean16(0x0080, \"change_bits_aid\", \"Archiver ID\"),",
          "1440:         bf_boolean16(0x0200, \"change_bits_utime\", \"Update Time\"),",
          "1441:         bf_boolean16(0x0400, \"change_bits_uid\", \"Update ID\"),",
          "1442:         bf_boolean16(0x0800, \"change_bits_acc_date\", \"Access Date\"),",
          "",
          "[Removed Lines]",
          "1439:     bf_boolean16(0x0100, \"change_bits_udate\", \"Update Date\"),",
          "",
          "[Added Lines]",
          "1452:         bf_boolean16(0x0100, \"change_bits_udate\", \"Update Date\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1484: ClustersUsedByDirectories       = uint32(\"clusters_used_by_directories\", \"Clusters Used by Directories\")",
          "1485: ClustersUsedByExtendedDirectories = uint32(\"clusters_used_by_extended_dirs\", \"Clusters Used by Extended Directories\")",
          "1486: ClustersUsedByFAT               = uint32(\"clusters_used_by_fat\", \"Clusters Used by FAT\")",
          "1488: ComCnts                         = uint16(\"com_cnts\", \"Communication Counters\")",
          "1489: Comment                         = nstring8(\"comment\", \"Comment\")",
          "1490: CommentType                     = uint16(\"comment_type\", \"Comment Type\")",
          "",
          "[Removed Lines]",
          "1487: CodePage                = uint32(\"code_page\", \"Code Page\")",
          "",
          "[Added Lines]",
          "1500: CodePage                        = uint32(\"code_page\", \"Code Page\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1604: CustomVariableValue             = uint32(\"custom_var_value\", \"Custom Variable Value\")",
          "1606: Data                            = nstring8(\"data\", \"Data\")",
          "1607: DataForkFirstFAT                = uint32(\"data_fork_first_fat\", \"Data Fork First FAT Entry\")",
          "1608: DataForkLen                     = uint32(\"data_fork_len\", \"Data Fork Len\")",
          "1609: DataForkSize                    = uint32(\"data_fork_size\", \"Data Fork Size\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1620: Data64                          = stringz(\"data64\", \"Data\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1612:         [ 0x00, \"Resource Fork or DOS\" ],",
          "1613:         [ 0x01, \"Data Fork\" ],",
          "1614: ])",
          "1616: DataStreamName                  = nstring8(\"data_stream_name\", \"Data Stream Name\")",
          "1617: DataStreamNumber                = uint8(\"data_stream_number\", \"Data Stream Number\")",
          "1619: DataStreamsCount                = uint32(\"data_streams_count\", \"Data Streams Count\")",
          "1620: DataStreamSize                  = uint32(\"data_stream_size\", \"Size\")",
          "1621: DataStreamSpaceAlloc            = uint32( \"data_stream_space_alloc\", \"Space Allocated for Data Stream\" )",
          "1623:     [ 0x00, \"ASCII Data\" ],",
          "1624:     [ 0x01, \"UTF8 Data\" ],",
          "1625: ])",
          "1628:         [ 0x00, \"Sunday\" ],",
          "1629:         [ 0x01, \"Monday\" ],",
          "1630:         [ 0x02, \"Tuesday\" ],",
          "",
          "[Removed Lines]",
          "1615: DataStreamFATBlocks     = uint32(\"data_stream_fat_blks\", \"Data Stream FAT Blocks\")",
          "1618: DataStreamNumberLong    = uint32(\"data_stream_num_long\", \"Data Stream Number\")",
          "1622: DataTypeFlag            = val_string8(\"data_type_flag\", \"Data Type Flag\", [",
          "1626: Day                             = uint8(\"s_day\", \"Day\")",
          "1627: DayOfWeek                       = val_string8(\"s_day_of_week\", \"Day of Week\", [",
          "",
          "[Added Lines]",
          "1629: DataStreamFATBlocks             = uint32(\"data_stream_fat_blks\", \"Data Stream FAT Blocks\")",
          "1632: DataStreamNumberLong            = uint32(\"data_stream_num_long\", \"Data Stream Number\")",
          "1635: DataStreamSize64                = uint64(\"data_stream_size_64\", \"Size\")",
          "1637: DataTypeFlag                    = val_string8(\"data_type_flag\", \"Data Type Flag\", [",
          "1641: Day                     = uint8(\"s_day\", \"Day\")",
          "1642: DayOfWeek               = val_string8(\"s_day_of_week\", \"Day of Week\", [",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1670: ])",
          "1671: DestPathComponentCount          = uint8(\"dest_component_count\", \"Destination Path Component Count\")",
          "1672: DestPath                        = nstring8(\"dest_path\", \"Destination Path\")",
          "1674: DetachDuringProcessing          = uint16(\"detach_during_processing\", \"Detach During Processing\")",
          "1675: DetachForBadConnectionNumber    = uint16(\"detach_for_bad_connection_number\", \"Detach For Bad Connection Number\")",
          "1676: DirHandle                       = uint8(\"dir_handle\", \"Directory Handle\")",
          "1677: DirHandleName                   = uint8(\"dir_handle_name\", \"Handle Name\")",
          "1678: DirHandleLong                   = uint32(\"dir_handle_long\", \"Directory Handle\")",
          "1679: DirectoryAccessRights           = uint8(\"directory_access_rights\", \"Directory Access Rights\")",
          "1680: #",
          "1681: # XXX - what do the bits mean here?",
          "",
          "[Removed Lines]",
          "1673: DestPath16          = nstring16(\"dest_path_16\", \"Destination Path\")",
          "",
          "[Added Lines]",
          "1688: DestPath16                      = nstring16(\"dest_path_16\", \"Destination Path\")",
          "1694: DirHandle64                     = uint64(\"dir_handle64\", \"Directory Handle\")",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1707:         [ 0x04, \"Disk Coprocessor\" ],",
          "1708: ])",
          "1709: DiskSpaceLimit                  = uint32(\"disk_space_limit\", \"Disk Space Limit\")",
          "1710: DMAChannelsUsed                 = uint32(\"dma_channels_used\", \"DMA Channels Used\")",
          "1711: DMInfoEntries                   = uint32(\"dm_info_entries\", \"DM Info Entries\")",
          "1712: DMInfoLevel                     = val_string8(\"dm_info_level\", \"DM Info Level\", [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1726: DiskSpaceLimit64                = uint64(\"data_stream_size_64\", \"Size\")",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2051:         bf_boolean16(0x0400, \"ext_info_64_bit_fs\", \"64 Bit File Sizes\"),",
          "2052:         bf_boolean16(0x8000, \"ext_info_newstyle\", \"New Style\"),",
          "2053: ])",
          "2054: ExtRouterActiveFlag             = boolean8(\"ext_router_active_flag\", \"External Router Active Flag\")",
          "2056: FailedAllocReqCnt               = uint32(\"failed_alloc_req\", \"Failed Alloc Request Count\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2072: ExtentListFormat                = uint8(\"ext_lst_format\", \"Extent List Format\")",
          "2073: RetExtentListCount              = uint8(\"ret_ext_lst_count\", \"Extent List Count\")",
          "2074: EndingOffset                    = bytes(\"end_offset\", \"Ending Offset\", 8)",
          "2075: #ExtentLength                    = bytes(\"extent_length\", \"Length\", 8),",
          "2076: ExtentList                      = bytes(\"ext_lst\", \"Extent List\", 512)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2263: FormType                        = uint16( \"form_type\", \"Form Type\" )",
          "2264: FormTypeCnt                     = uint32(\"form_type_count\", \"Form Types Count\")",
          "2265: FoundSomeMem                    = uint32(\"found_some_mem\", \"Found Some Memory\")",
          "2267: FraggerHandle                   = uint32(\"fragger_handle\", \"Fragment Handle\")",
          "2268: FraggerHandle.Display('BASE_HEX')",
          "2269: FragmentWriteOccurred           = uint16(\"fragment_write_occurred\", \"Fragment Write Occurred\")",
          "",
          "[Removed Lines]",
          "2266: FractionalSeconds               = uint32(\"fractional_time\", \"Fractional Time in Seconds\")",
          "",
          "[Added Lines]",
          "2289: FractionalSeconds               = eptime(\"fractional_time\", \"Fractional Time in Seconds\")",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2332:         bf_boolean32(0x80000000, \"info_flags_name\", \"Return Object Name\"),",
          "2333: ])",
          "2334: InfoLevelNumber                 = val_string8(\"info_level_num\", \"Information Level Number\", [",
          "2337: ])",
          "2338: InfoMask                        = bitfield32(\"info_mask\", \"Information Mask\", [",
          "2339:         bf_boolean32(0x00000001, \"info_flags_dos_time\", \"DOS Time\"),",
          "",
          "[Removed Lines]",
          "2335:         [ 0x01, \"Volume Information Definition\" ],",
          "2336:         [ 0x02, \"Volume Information 2 Definition\" ],",
          "",
          "[Added Lines]",
          "2358:         [ 0x0, \"Single Directory Quota Information\" ],",
          "2359:         [ 0x1, \"Multi-Level Directory Quota Information\" ],",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2379:         bf_boolean16(0x0100, \"inh_revoke_supervisor\", \"Supervisor\"),",
          "2380: ])",
          "2381: InitialSemaphoreValue           = uint8(\"initial_semaphore_value\", \"Initial Semaphore Value\")",
          "2382: InspectSize                     = uint32(\"inspect_size\", \"Inspect Size\")",
          "2383: InternetBridgeVersion           = uint8(\"internet_bridge_version\", \"Internet Bridge Version\")",
          "2384: InterruptNumbersUsed            = uint32(\"interrupt_numbers_used\", \"Interrupt Numbers Used\")",
          "2386: IOAddressesUsed                 = bytes(\"io_addresses_used\", \"IO Addresses Used\", 8)",
          "2387: IOErrorCount                    = uint16(\"io_error_count\", \"IO Error Count\")",
          "2388: IOEngineFlag                    = boolean8(\"io_engine_flag\", \"IO Engine Flag\")",
          "",
          "[Removed Lines]",
          "2385: InUse                           = uint32(\"in_use\", \"Bytes in Use\")",
          "",
          "[Added Lines]",
          "2405: InpInfotype                     = uint32(\"inp_infotype\", \"Information Type\")",
          "2406: Inpld                           = uint32(\"inp_ld\", \"Volume Number or Directory Handle\")",
          "2410: InUse                           = uint32(\"in_use\", \"Blocks in Use\")",
          "2411: InUse64                         = uint64(\"in_use64\", \"Blocks in Use\")",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2732: MaxNumOfVol                     = uint32(\"max_num_of_vol\", \"Maximum Number of Volumes\")",
          "2733: MaxReadDataReplySize    = uint16(\"max_read_data_reply_size\", \"Max Read Data Reply Size\")",
          "2734: MaxSpace                        = uint32(\"maxspace\", \"Maximum Space\")",
          "2735: MaxUsedDynamicSpace             = uint32(\"max_used_dynamic_space\", \"Max Used Dynamic Space\")",
          "2736: MediaList                       = uint32(\"media_list\", \"Media List\")",
          "2737: MediaListCount                  = uint32(\"media_list_count\", \"Media List Count\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2761: MaxSpace64                      = uint64(\"maxspace64\", \"Maximum Space\")",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2777: MigratedFiles                   = uint32(\"migrated_files\", \"Migrated Files\")",
          "2778: MigratedSectors                 = uint32(\"migrated_sectors\", \"Migrated Sectors\")",
          "2779: MinorVersion                    = uint32(\"minor_version\", \"Minor Version\")",
          "2780: Minute                          = uint8(\"s_minute\", \"Minutes\")",
          "2781: MixedModePathFlag               = val_string8(\"mixed_mode_path_flag\", \"Mixed Mode Path Flag\", [",
          "2782:     [ 0x00, \"Mixed mode path handling is not available\"],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2807: MinSpaceLeft64                  = uint64(\"min_space_left64\", \"Minimum Space Left\")",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3055: NumberOfDataStreamsLong     = uint32(\"number_of_data_streams_long\", \"Number of Data Streams\")",
          "3056: NumberOfDynamicMemoryAreas      = uint16(\"number_of_dynamic_memory_areas\", \"Number Of Dynamic Memory Areas\")",
          "3057: NumberOfEntries                 = uint8(\"number_of_entries\", \"Number of Entries\")",
          "3058: NumberOfLocks                   = uint8(\"number_of_locks\", \"Number of Locks\")",
          "3059: NumberOfMinutesToDelay          = uint32(\"number_of_minutes_to_delay\", \"Number of Minutes to Delay\")",
          "3060: NumberOfNCPExtensions           = uint32(\"number_of_ncp_extensions\", \"Number Of NCP Extensions\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3086: NumberOfEntriesLong             = uint32(\"number_of_entries_long\", \"Number of Entries\")",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3068: NumberOfSMs                     = uint32(\"number_of_sms\", \"Number Of Storage Medias\")",
          "3069: NumberOfStations                = uint8(\"number_of_stations\", \"Number of Stations\")",
          "3070: NumBytes                        = uint16(\"num_bytes\", \"Number of Bytes\")",
          "3071: NumOfCCinPkt                    = uint32(\"num_of_cc_in_pkt\", \"Number of Custom Counters in Packet\")",
          "3072: NumOfChecks                     = uint32(\"num_of_checks\", \"Number of Checks\")",
          "3073: NumOfEntries                    = uint32(\"num_of_entries\", \"Number of Entries\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3100: NumBytesLong                    = uint32(\"num_bytes_long\", \"Number of Bytes\")",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3201: OESServer                       = val_string8(\"oes_server\", \"Type of Novell Server\", [",
          "3202:         [ 0x00, \"NetWare\" ],",
          "3203:         [ 0x01, \"OES\" ],",
          "3204: ])",
          "3206: OESLinuxOrNetWare                       = val_string8(\"oeslinux_or_netware\", \"Kernel Type\", [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3234:         [ 0x02, \"OES 64bit\" ],",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3451: ResourceForkSize                = uint32(\"resource_fork_size\", \"Resource Fork Size\")",
          "3452: ResourceName                    = stringz(\"resource_name\", \"Resource Name\")",
          "3453: ResourceSignature               = fw_string(\"resource_sig\", \"Resource Signature\", 4)",
          "3455: Restriction                     = uint32(\"restriction\", \"Disk Space Restriction\")",
          "3456: RestrictionsEnforced            = val_string8(\"restrictions_enforced\", \"Disk Restrictions Enforce Flag\", [",
          "3457:         [ 0x00, \"Enforced\" ],",
          "3458:         [ 0xff, \"Not Enforced\" ],",
          "",
          "[Removed Lines]",
          "3454: RestoreTime                     = uint32(\"restore_time\", \"Restore Time\")",
          "",
          "[Added Lines]",
          "3485: RestoreTime                     = eptime(\"restore_time\", \"Restore Time\")",
          "3487: RestrictionQuad                 = uint64(\"restriction_quad\", \"Restriction\")",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3576: ])",
          "3577: SecurityRestrictionVersion              = uint8(\"security_restriction_version\", \"Security Restriction Version\")",
          "3578: SectorsPerBlock                         = uint8(\"sectors_per_block\", \"Sectors Per Block\")",
          "3579: SectorsPerCluster                       = uint16(\"sectors_per_cluster\", \"Sectors Per Cluster\" )",
          "3580: SectorsPerClusterLong                   = uint32(\"sectors_per_cluster_long\", \"Sectors Per Cluster\" )",
          "3581: SectorsPerTrack                         = uint8(\"sectors_per_track\", \"Sectors Per Track\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3611: SectorsPerBlockLong                     = uint32(\"sectors_per_block_long\", \"Sectors Per Block\")",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3599: SequenceByte                    = uint8(\"sequence_byte\", \"Sequence\")",
          "3600: SequenceNumber                  = uint32(\"sequence_number\", \"Sequence Number\")",
          "3601: SequenceNumber.Display(\"BASE_HEX\")",
          "3602: ServerAddress                   = bytes(\"server_address\", \"Server Address\", 12)",
          "3603: ServerAppNumber                 = uint16(\"server_app_num\", \"Server App Number\")",
          "3604: ServerID                        = uint32(\"server_id_number\", \"Server ID\", BE )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3635: SequenceNumberLong              = uint64(\"sequence_number64\", \"Sequence Number\")",
          "3636: SequenceNumberLong.Display(\"BASE_HEX\")",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3699: SixtyFourBitOffsetsSupportedFlag = val_string8(\"64_bit_flag\", \"64 Bit Support\", [",
          "3700:     [ 0x00, \"No support for 64 bit offsets\" ],",
          "3701:     [ 0x01, \"64 bit offsets supported\" ],",
          "3702: ])",
          "3703: SMIDs                           = uint32(\"smids\", \"Storage Media ID's\")",
          "3704: SoftwareDescription             = fw_string(\"software_description\", \"Software Description\", 65)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3737:     [ 0x02, \"Use 64 bit file transfer NCP's\" ],",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3706: SoftwareMajorVersionNumber      = uint8(\"software_major_version_number\", \"Software Major Version Number\")",
          "3707: SoftwareMinorVersionNumber      = uint8(\"software_minor_version_number\", \"Software Minor Version Number\")",
          "3708: SourceDirHandle                 = uint8(\"source_dir_handle\", \"Source Directory Handle\")",
          "3709: sourceOriginateTime             = bytes(\"source_originate_time\", \"Source Originate Time\", 8)",
          "3710: SourcePath                      = nstring8(\"source_path\", \"Source Path\")",
          "3711: SourcePathComponentCount        = uint8(\"source_component_count\", \"Source Path Component Count\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3745: SourceFileHandle                = bytes(\"s_fhandle_64bit\", \"Source File Handle\", 6)",
          "3746: SourceFileOffset                = bytes(\"s_foffset\", \"Source File Offset\", 8)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3718:         [ 0x02, \"NFS Name Space\" ],",
          "3719:         [ 0x04, \"Long Name Space\" ],",
          "3720: ])",
          "3721: SupModID                        = uint32(\"sup_mod_id\", \"Sup Mod ID\")",
          "3722: StackCount                      = uint32(\"stack_count\", \"Stack Count\")",
          "3723: StackFullNameStr                = nstring8(\"stack_full_name_str\", \"Stack Full Name\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3759: SubFuncStrucLen                 = uint16(\"sub_func_struc_len\", \"Structure Length\")",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3779: TargetExecutionTime             = bytes(\"target_execution_time\", \"Target Execution Time\", 6)",
          "3780: TargetFileHandle                = bytes(\"target_file_handle\", \"Target File Handle\", 6)",
          "3781: TargetFileOffset                = uint32(\"target_file_offset\", \"Target File Offset\")",
          "3782: TargetMessage                   = nstring8(\"target_message\", \"Message\")",
          "3783: TargetPrinter                   = uint8( \"target_ptr\", \"Target Printer\" )",
          "3784: targetReceiveTime               = bytes(\"target_receive_time\", \"Target Receive Time\", 8)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3821: TargetFileOffset64bit           = bytes(\"t_foffset\", \"Target File Offset\", 8)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3813: ])",
          "3814: TimeToNet                       = uint16(\"time_to_net\", \"Time To Net\")",
          "3815: TotalBlocks                     = uint32(\"total_blocks\", \"Total Blocks\")",
          "3816: TotalBlocksToDecompress         = uint32(\"total_blks_to_dcompress\", \"Total Blocks To Decompress\")",
          "3817: TotalBytesRead                  = bytes(\"user_info_ttl_bytes_rd\", \"Total Bytes Read\", 6)",
          "3818: TotalBytesWritten               = bytes(\"user_info_ttl_bytes_wrt\", \"Total Bytes Written\", 6)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3856: TotalBlocks64                   = uint64(\"total_blocks64\", \"Total Blocks\")",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3823: TotalDataStreamDiskSpaceAlloc   = uint32(\"ttl_data_str_size_space_alloc\", \"Total Data Stream Disk Space Alloc\")",
          "3824: TotalDirectorySlots             = uint16(\"total_directory_slots\", \"Total Directory Slots\")",
          "3825: TotalDirectoryEntries           = uint32(\"total_dir_entries\", \"Total Directory Entries\")",
          "3826: TotalDynamicSpace               = uint32(\"total_dynamic_space\", \"Total Dynamic Space\")",
          "3827: TotalExtendedDirectoryExtents   = uint32(\"total_extended_directory_extents\", \"Total Extended Directory Extents\")",
          "3828: TotalFileServicePackets         = uint32(\"total_file_service_packets\", \"Total File Service Packets\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3867: TotalDirEntries64               = uint64(\"total_dir_entries64\", \"Total Directory Entries\")",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3925: UserName16                      = fw_string(\"user_name_16\", \"User Name\", 16)",
          "3926: UserName48                      = fw_string(\"user_name_48\", \"User Name\", 48)",
          "3927: UserType                        = uint16(\"user_type\", \"User Type\")",
          "3930: ValueAvailable                  = val_string8(\"value_available\", \"Value Available\", [",
          "3931:         [ 0x00, \"Has No Value\" ],",
          "",
          "[Removed Lines]",
          "3928: UTCTimeInSeconds                = uint32(\"uts_time_in_seconds\", \"UTC Time in Seconds\")",
          "",
          "[Added Lines]",
          "3970: UTCTimeInSeconds                = eptime(\"uts_time_in_seconds\", \"UTC Time in Seconds\")",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3946: VolumeID                        = uint32(\"volume_id\", \"Volume ID\")",
          "3947: VolumeID.Display(\"BASE_HEX\")",
          "3948: VolInfoReplyLen                 = uint16(\"vol_info_reply_len\", \"Volume Information Reply Length\")",
          "3949: VolumeCapabilities                      = bitfield32(\"volume_capabilities\", \"Volume Capabilities\", [",
          "3950:         bf_boolean32(0x00000001, \"vol_cap_user_space\", \"NetWare User Space Restrictions Supported\"),",
          "3951:         bf_boolean32(0x00000002, \"vol_cap_dir_quota\", \"NetWare Directory Quotas Supported\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3991: VolInfoReturnInfoMask           = bitfield32(\"vol_info_ret_info_mask\", \"Return Information Mask\", [",
          "3992:         bf_boolean32(0x00000001, \"vinfo_info64\", \"Return 64 bit Volume Information\"),",
          "3993:         bf_boolean32(0x00000002, \"vinfo_volname\", \"Return Volume Name Details\"),",
          "3994: ])",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3964:         [ 0xff, \"Volume is Cached\" ],",
          "3965: ])",
          "3966: VolumeDataStreams               = uint8(\"volume_data_streams\", \"Volume Data Streams\")",
          "3967: VolumeGUID              = stringz(\"volume_guid\", \"Volume GUID\")",
          "3968: VolumeHashedFlag                = val_string8(\"volume_hashed_flag\", \"Volume Hashed Flag\", [",
          "3969:         [ 0x00, \"Volume is Not Hashed\" ],",
          "3970:         [ 0xff, \"Volume is Hashed\" ],",
          "3971: ])",
          "3976: VolumeMountedFlag               = val_string8(\"volume_mounted_flag\", \"Volume Mounted Flag\", [",
          "3977:         [ 0x00, \"Volume is Not Mounted\" ],",
          "3978:         [ 0xff, \"Volume is Mounted\" ],",
          "",
          "[Removed Lines]",
          "3972: VolumeLastModifiedDate          = uint16(\"volume_last_modified_date\", \"Volume Last Modified Date\")",
          "3973: VolumeLastModifiedDate.NWDate()",
          "3974: VolumeLastModifiedTime          = uint16(\"volume_last_modified_time\", \"Volume Last Modified Time\")",
          "3975: VolumeLastModifiedTime.NWTime()",
          "",
          "[Added Lines]",
          "4013: VolumeEpochTime         = eptime(\"epoch_time\", \"Last Modified Timestamp\")",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4000:         [ 0x0002, \"NetWare 386 Version 30\" ],",
          "4001:         [ 0x0003, \"NetWare 386 Version 31\" ],",
          "4002: ])",
          "4003: WastedServerMemory              = uint16(\"wasted_server_memory\", \"Wasted Server Memory\", BE)",
          "4004: WaitTime                        = uint32(\"wait_time\", \"Wait Time\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4046: VolumeTypeLong                   = val_string32(\"volume_type_long\", \"Volume Type\", [",
          "4047:         [ 0x00000000, \"NetWare 386\" ],",
          "4048:         [ 0x00000001, \"NetWare 286\" ],",
          "4049:         [ 0x00000002, \"NetWare 386 Version 30\" ],",
          "4050:         [ 0x00000003, \"NetWare 386 Version 31\" ],",
          "4051: ])",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4325:         uint32(\"trustee_list_node_count\", \"Trustee List Node Count\"),",
          "4326:         uint32(\"percent_of_vol_used_by_dirs\", \"Percent Of Volume Used By Directories\"),",
          "4327: ], \"Directory Cache Information\")",
          "4328: DirEntryStruct                  = struct(\"dir_entry_struct\", [",
          "4329:         DirectoryEntryNumber,",
          "4330:         DOSDirectoryEntryNumber,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4377: DirDiskSpaceRest64bit           = struct(\"dir_disk_space_rest_64bit\", [",
          "4378:         Level,",
          "4379:         MaxSpace64,",
          "4380:         MinSpaceLeft64",
          "4381: ], \"Directory Disk Space Restriction 64 bit\")",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4441: DStreamActual                   = struct(\"d_stream_actual\", [",
          "4442:         DataStreamNumberLong,",
          "4443:         DataStreamFATBlocks,",
          "4445: DStreamLogical                  = struct(\"d_string_logical\", [",
          "4446:         DataStreamNumberLong,",
          "4447:         DataStreamSize,",
          "4449: LastUpdatedInSecondsStruct      = struct(\"last_update_in_seconds_struct\", [",
          "4450:         SecondsRelativeToTheYear2000,",
          "4451: ])",
          "",
          "[Removed Lines]",
          "4444: ])",
          "4448: ])",
          "",
          "[Added Lines]",
          "4498: ], \"Actual Stream\")",
          "4502: ], \"Logical Stream\")",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4913:         ObjectID,",
          "4914:         Restriction,",
          "4915: ])",
          "4916: OpnFilesStruct                  = struct(\"opn_files_struct\", [",
          "4917:         TaskNumberWord,",
          "4918:         LockType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4970: ObjectIDStruct64                = struct(\"object_id_struct64\", [",
          "4971:         endian(ObjectID, LE),",
          "4972:         endian(RestrictionQuad, LE),",
          "4973: ])",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "5266:         ExtendedAttributesDefined,",
          "5267:         ExtendedAttributeExtentsUsed,",
          "5268:         DirectoryServicesObjectID,",
          "5271: ], \"Volume Information\")",
          "5272: VolInfo2Struct                  = struct(\"vol_info_struct_2\", [",
          "5273:         uint32(\"volume_active_count\", \"Volume Active Count\"),",
          "5274:         uint32(\"volume_use_count\", \"Volume Use Count\"),",
          "5275:         uint32(\"mac_root_ids\", \"MAC Root IDs\"),",
          "5278:         uint32(\"volume_reference_count\", \"Volume Reference Count\"),",
          "5279:         uint32(\"compression_lower_limit\", \"Compression Lower Limit\"),",
          "5280:         uint32(\"outstanding_ios\", \"Outstanding IOs\"),",
          "",
          "[Removed Lines]",
          "5269:         VolumeLastModifiedTime,",
          "5270:         VolumeLastModifiedDate,",
          "5276:         VolumeLastModifiedTime,",
          "5277:         VolumeLastModifiedDate,",
          "",
          "[Added Lines]",
          "5327:         VolumeEpochTime,",
          "5329: ], \"Volume Information\")",
          "5330: VolInfoStructure64              = struct(\"vol_info_struct64\", [",
          "5331:         VolumeTypeLong,",
          "5332:         StatusFlagBits,",
          "5333:         uint64(\"sectoresize64\", \"Sector Size\"),",
          "5334:         uint64(\"sectorspercluster64\", \"Sectors Per Cluster\"),",
          "5335:         uint64(\"volumesizeinclusters64\", \"Volume Size in Clusters\"),",
          "5336:         uint64(\"freedclusters64\", \"Freed Clusters\"),",
          "5337:         uint64(\"suballocfreeableclusters64\", \"Sub Alloc Freeable Clusters\"),",
          "5338:         uint64(\"freeablelimbosectors64\", \"Freeable Limbo Sectors\"),",
          "5339:         uint64(\"nonfreeablelimbosectors64\", \"Non-Freeable Limbo Sectors\"),",
          "5340:         uint64(\"nonfreeableavailalesuballocsectors64\", \"Non-Freeable Available Sub Alloc Sectors\"),",
          "5341:         uint64(\"notusablesuballocsectors64\", \"Not Usable Sub Alloc Sectors\"),",
          "5342:         uint64(\"suballocclusters64\", \"Sub Alloc Clusters\"),",
          "5343:         uint64(\"datastreamscount64\", \"Data Streams Count\"),",
          "5344:         uint64(\"limbodatastreamscount64\", \"Limbo Data Streams Count\"),",
          "5345:         uint64(\"oldestdeletedfileageinticks64\", \"Oldest Deleted File Age in Ticks\"),",
          "5346:         uint64(\"compressdatastreamscount64\", \"Compressed Data Streams Count\"),",
          "5347:         uint64(\"compressedlimbodatastreamscount64\", \"Compressed Limbo Data Streams Count\"),",
          "5348:         uint64(\"uncompressabledatastreamscount64\", \"Uncompressable Data Streams Count\"),",
          "5349:         uint64(\"precompressedsectors64\", \"Precompressed Sectors\"),",
          "5350:         uint64(\"compressedsectors64\", \"Compressed Sectors\"),",
          "5351:         uint64(\"migratedfiles64\", \"Migrated Files\"),",
          "5352:         uint64(\"migratedsectors64\", \"Migrated Sectors\"),",
          "5353:         uint64(\"clustersusedbyfat64\", \"Clusters Used by FAT\"),",
          "5354:         uint64(\"clustersusedbydirectories64\", \"Clusters Used by Directories\"),",
          "5355:         uint64(\"clustersusedbyextendeddirectories64\", \"Clusters Used by Extended Directories\"),",
          "5356:         uint64(\"totaldirectoryentries64\", \"Total Directory Entries\"),",
          "5357:         uint64(\"unuseddirectoryentries64\", \"Unused Directory Entries\"),",
          "5358:         uint64(\"totalextendeddirectoryextents64\", \"Total Extended Directory Extents\"),",
          "5359:         uint64(\"unusedextendeddirectoryextents64\", \"Unused Total Extended Directory Extents\"),",
          "5360:         uint64(\"extendedattributesdefined64\", \"Extended Attributes Defined\"),",
          "5361:         uint64(\"extendedattributeextentsused64\", \"Extended Attribute Extents Used\"),",
          "5362:         uint64(\"directoryservicesobjectid64\", \"Directory Services Object ID\"),",
          "5363:         VolumeEpochTime,",
          "5370:         VolumeEpochTime,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "5288: VolumeStruct                    = struct(\"volume_struct\", [",
          "5289:         VolumeNumberLong,",
          "5290: ])",
          "5295: ##############################################################################",
          "5296: # NCP Groups",
          "",
          "[Removed Lines]",
          "5291: DataStreamsStruct               = struct(\"number_of_data_streams_struct\", [",
          "5292:     NumberOfDataStreamsLong,",
          "5293: ])",
          "",
          "[Added Lines]",
          "5385: zFileMap_Allocation             = struct(\"zfilemap_allocation_struct\", [",
          "5386:     uint64(\"extent_byte_offset\", \"Byte Offset\"),",
          "5387:     endian(uint64(\"extent_length_alloc\", \"Length\"), LE),",
          "5388:     #ExtentLength,",
          "5389: ], \"File Map Allocation\")",
          "5390: zFileMap_Logical             = struct(\"zfilemap_logical_struct\", [",
          "5391:     uint64(\"extent_block_number\", \"Block Number\"),",
          "5392:     uint64(\"extent_number_of_blocks\", \"Number of Blocks\"),",
          "5393: ], \"File Map Logical\")",
          "5394: zFileMap_Physical             = struct(\"zfilemap_physical_struct\", [",
          "5395:     uint64(\"extent_length_physical\", \"Length\"),",
          "5396:     uint64(\"extent_logical_offset\", \"Logical Offset\"),",
          "5397:     uint64(\"extent_pool_offset\", \"Pool Offset\"),",
          "5398:     uint64(\"extent_physical_offset\", \"Physical Offset\"),",
          "5399:     fw_string(\"extent_device_id\", \"Device ID\", 8),",
          "5400: ], \"File Map Physical\")",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "5353:     errors[0x7700] = \"Buffer Too Small\"",
          "5354:     errors[0x7900] = \"Invalid Parameter in Request Packet\"",
          "5355:     errors[0x7901] = \"Nothing being Compressed\"",
          "5356:     errors[0x7a00] = \"Connection Already Temporary\"",
          "5357:     errors[0x7b00] = \"Connection Already Logged in\"",
          "5358:     errors[0x7c00] = \"Connection Not Authenticated\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5463:     errors[0x7902] = \"No Items Found\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "5787: #define NREV    0x00000004",
          "5788: #define NFLAGS  0x00000008",
          "5790: static int hf_ncp_func = -1;",
          "5791: static int hf_ncp_length = -1;",
          "5792: static int hf_ncp_subfunc = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5898: static int hf_ncp_number_of_data_streams_long = -1;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "6283: static int hf_iter_search = -1;",
          "6284: static int hf_iter_other = -1;",
          "6285: static int hf_nds_oid = -1;",
          "6286: static int hf_sap_name = -1;",
          "6287: static int hf_os_name = -1;",
          "6288: static int hf_vendor_name = -1;",
          "6289: static int hf_hardware_name = -1;",
          "6290: static int hf_no_request_record_found = -1;",
          "6292: static expert_field ei_ncp_file_rights_change = EI_INIT;",
          "6293: static expert_field ei_ncp_completion_code = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6395: static int hf_ncp_bytes_actually_trans_64 = -1;",
          "6401: static int hf_search_modifier = -1;",
          "6402: static int hf_search_pattern = -1;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "6632: {",
          "6634:     static hf_register_info hf[] = {",
          "6635:     { &hf_ncp_func,",
          "6636:     { \"Function\", \"ncp.func\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL }},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6747:     { &hf_ncp_number_of_data_streams_long,",
          "6748:     { \"Number of Data Streams\", \"ncp.number_of_data_streams_long\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "8166:     { &hf_nds_oid,",
          "8167:     { \"Object ID\", \"ncp.nds_oid\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "8169:     { &hf_sap_name,",
          "8170:     { \"SAP Name\", \"ncp.sap_name\", FT_STRING, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8284:     { &hf_ncp_bytes_actually_trans_64,",
          "8285:     { \"Bytes Actually Transferred\", \"ncp.bytes_actually_trans_64\", FT_UINT64, BASE_DEC, NULL, 0x0, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "8181:     { &hf_no_request_record_found,",
          "8182:     { \"No request record found. Parsing is impossible.\", \"ncp.no_request_record_found\", FT_NONE, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "8184: \"\"\")",
          "8185:     # Print the registration code for the hf variables",
          "8186:     for var in sorted_vars:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8302:     { &hf_search_modifier,",
          "8303:     { \"Search Modifier\", \"ncp.search_modifier\", FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL }},",
          "8305:     { &hf_search_pattern,",
          "8306:     { \"Search Pattern\", \"ncp.search_pattern\", FT_STRING, BASE_NONE, NULL, 0x0, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "9360:     ])",
          "9361:     pkt.ReqCondSizeVariable()",
          "9362:     pkt.CompletionCodes([0x0000, 0x9802])",
          "9364:     pkt = NCP(0x1635, \"Get Volume Capabilities\", 'file')",
          "9365:     pkt.Request( 18, [",
          "9366:             rec( 10, 4, VolumeNumberLong ),",
          "9367:             rec( 14, 4, VersionNumberLong ),",
          "9368:     ])",
          "9370:             rec( 8, 4, VolumeCapabilities ),",
          "9371:             rec( 12, 28, Reserved28 ),",
          "9372:     rec( 40, 64, VolumeNameStringz ),",
          "9373:     rec( 104, 128, VolumeGUID ),",
          "9374:             rec( 232, 256, PoolName ),",
          "9376:     ])",
          "9378:     # 2222/1700, 23/00",
          "9379:     pkt = NCP(0x1700, \"Login User\", 'connection')",
          "9380:     pkt.Request( (12, 58), [",
          "",
          "[Removed Lines]",
          "9363: # 2222/1635, 22/53",
          "9369:     pkt.Reply( 744, [",
          "9375:     rec( 488, 256, VolumeMountPoint ),",
          "9377:     pkt.CompletionCodes([0x0000])",
          "",
          "[Added Lines]",
          "9487:     # 2222/1635, 22/53",
          "9493:     pkt.Reply( NO_LENGTH_CHECK, [",
          "9499:     rec( 488, PROTO_LENGTH_UNKNOWN, VolumeMountPoint ),",
          "9501:     pkt.CompletionCodes([0x0000, 0x7700, 0x9802, 0xfb01])",
          "9502:     # 2222/1636, 22/54",
          "9503:     pkt = NCP(0x1636, \"Add User Disk Space Restriction 64 Bit Aware\", 'file')",
          "9504:     pkt.Request(26, [",
          "9505:             rec( 10, 4, VolumeNumberLong ),",
          "9506:             rec( 14, 4, ObjectID, LE ),",
          "9507:             rec( 18, 8, DiskSpaceLimit64 ),",
          "9508:     ])",
          "9509:     pkt.Reply(8)",
          "9510:     pkt.CompletionCodes([0x0000, 0x8c00, 0x9600, 0x9800])",
          "9511:     # 2222/1637, 22/55",
          "9512:     pkt = NCP(0x1637, \"Get Object Disk Usage and Restrictions 64 Bit Aware\", 'file')",
          "9513:     pkt.Request(18, [",
          "9514:             rec( 10, 4, VolumeNumberLong ),",
          "9515:             rec( 14, 4, ObjectID, LE ),",
          "9516:     ])",
          "9517:     pkt.Reply(24, [",
          "9518:             rec( 8, 8, RestrictionQuad ),",
          "9519:             rec( 16, 8, InUse64 ),",
          "9520:     ])",
          "9521:     pkt.CompletionCodes([0x0000, 0x9802])",
          "9522:     # 2222/1638, 22/56",
          "9523:     pkt = NCP(0x1638, \"Scan Volume's User Disk Restrictions 64 Bit Aware\", 'file')",
          "9524:     pkt.Request(18, [",
          "9525:             rec( 10, 4, VolumeNumberLong ),",
          "9526:             rec( 14, 4, SequenceNumber ),",
          "9527:     ])",
          "9528:     pkt.Reply(24, [",
          "9529:             rec( 8, 4, NumberOfEntriesLong, var=\"x\" ),",
          "9530:             rec( 12, 12, ObjectIDStruct64, repeat=\"x\" ),",
          "9531:     ])",
          "9532:     pkt.CompletionCodes([0x0000, 0x9800])",
          "9533:     # 2222/1639, 22/57",
          "9534:     pkt = NCP(0x1639, \"Set Directory Disk Space Restriction 64 Bit Aware\", 'file')",
          "9535:     pkt.Request(26, [",
          "9536:             rec( 10, 8, DirHandle64 ),",
          "9537:             rec( 18, 8, DiskSpaceLimit64 ),",
          "9538:     ])",
          "9539:     pkt.Reply(8)",
          "9540:     pkt.CompletionCodes([0x0000, 0x0101, 0x8c00, 0xbf00])",
          "9541:     # 2222/163A, 22/58",
          "9542:     pkt = NCP(0x163A, \"Get Directory Information 64 Bit Aware\", 'file')",
          "9543:     pkt.Request( 18, [",
          "9544:             rec( 10, 8, DirHandle64 )",
          "9545:     ])",
          "9546:     pkt.Reply( (49, 64), [",
          "9547:             rec( 8, 8, TotalBlocks64 ),",
          "9548:             rec( 16, 8, AvailableBlocks64 ),",
          "9549:             rec( 24, 8, TotalDirEntries64 ),",
          "9550:             rec( 32, 8, AvailableDirEntries64 ),",
          "9551:             rec( 40, 4, Reserved4 ),",
          "9552:             rec( 44, 4, SectorsPerBlockLong ),",
          "9553:             rec( 48, (1,16), VolumeNameLen ),",
          "9554:     ])",
          "9555:     pkt.CompletionCodes([0x0000, 0x9b03])",
          "9556:    # 2222/1641, 22/59",
          "9557: #    pkt = NCP(0x1641, \"Scan Volume's User Disk Restrictions 64-bit Aware\", 'file')",
          "9558: #    pkt.Request(18, [",
          "9559: #            rec( 10, 4, VolumeNumberLong ),",
          "9560: #            rec( 14, 4, SequenceNumber ),",
          "9561: #    ])",
          "9562: #    pkt.Reply(24, [",
          "9563: #            rec( 8, 4, NumberOfEntriesLong, var=\"x\" ),",
          "9564: #            rec( 12, 12, ObjectIDStruct64, repeat=\"x\" ),",
          "9565: #    ])",
          "9566: #    pkt.CompletionCodes([0x0000, 0x9800])",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "9750:             rec( 12, (1,48), ObjectName ),",
          "9751:     ], info_str=(ObjectName, \"Get Bindery Object: %s\", \", %s\"))",
          "9752:     pkt.Reply(62, [",
          "9754:             rec( 12, 2, ObjectType, BE ),",
          "9755:             rec( 14, 48, ObjectNameLen ),",
          "9756:     ])",
          "",
          "[Removed Lines]",
          "9753:             rec( 8, 4, ObjectID, BE ),",
          "",
          "[Added Lines]",
          "9942:             rec( 8, 4, ObjectID, LE ),",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "12128:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "12129:                          0x9804, 0x9b03, 0x9c03, 0xfd00, 0xff16])",
          "12130:     # 2222/55, 85",
          "12135:     ], info_str=(FileHandle, \"Get Sparse File Data Block Bitmap for File - 0x%s\", \", %s\"))",
          "12136:     pkt.Reply(528, [",
          "12137:             rec( 8, 4, AllocationBlockSize ),",
          "",
          "[Removed Lines]",
          "12131:     pkt = NCP(0x55, \"Get Sparse File Data Block Bit Map\", 'file')",
          "12132:     pkt.Request(17, [",
          "12133:             rec( 7, 6, FileHandle ),",
          "12134:             rec( 13, 4, FileOffset ),",
          "",
          "[Added Lines]",
          "12320:     pkt = NCP(0x55, \"Get Sparse File Data Block Bit Map\", 'file', has_length=1)",
          "12321:     pkt.Request(19, [",
          "12322:             rec( 7, 2, SubFuncStrucLen, BE ),",
          "12323:             rec( 9, 6, FileHandle ),",
          "12324:             rec( 15, 4, FileOffset ),",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "12276:             srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "12277:             srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "12278:             srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "12281:             srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "12282:             srec( DOSNameStruct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "12283:             srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "",
          "[Removed Lines]",
          "12279:             srec( DStreamActual, req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "12280:             srec( DStreamLogical, req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "[Added Lines]",
          "12469:             rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "12470:             srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "12471:             rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "12472:             srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "12351:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_alloc  == 1)\" ),",
          "12352:             srec( AttributesStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_attr == 1)\" ),",
          "12353:             srec( DataStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_size == 1)\" ),",
          "12355:             srec( EAInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "12356:             srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "12357:             srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "",
          "[Removed Lines]",
          "12354:             srec( TotalStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "12461:         srec( AttributesStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_attr == 1)\" ),",
          "12462:         srec( DataStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_size == 1)\" ),",
          "12463:         srec( TotalStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "12469:         srec( EAInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "12470:         srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "12471:         srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "12472:         srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "12477:         srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "12478:         srec( DOSNameStruct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "12479:         srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "",
          "[Removed Lines]",
          "12464:         srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "12465:         srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "12466:         srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "12467:         srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "12468:         srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "12473:         srec( DataStreamsStruct, req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "12474:         srec( DStreamActual, req_cond=\"ncp.ret_info_mask_actual == 1 && ncp.number_of_data_streams_long > 0\" ),            # , repeat=\"x\"",
          "12475:         srec( DataStreamsStruct, req_cond=\"ncp.ret_info_mask_logical == 1\" ), # , var=\"y\"",
          "12476:         srec( DStreamLogical, req_cond=\"ncp.ret_info_mask_logical == 1 && ncp.number_of_data_streams_long > 0\" ),          # , repeat=\"y\"",
          "",
          "[Added Lines]",
          "12656:         srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "12657:         srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "12658:         srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "12660:         srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "12661:         srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "12664:         rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "12665:         srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "12666:         rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "12667:         srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "12483:         srec( EffectiveRightsStruct, req_cond=\"ncp.ext_info_effective == 1\" ),",
          "12484:         srec( MacTimeStruct, req_cond=\"ncp.ext_info_mac_date == 1\" ),",
          "12485:         srec( LastAccessedTimeStruct, req_cond=\"ncp.ext_info_access == 1\" ),",
          "12487:         srec( FileNameStruct, req_cond=\"ncp.ret_info_mask_fname == 1\" ),",
          "12488:     ])",
          "12489:     pkt.ReqCondSizeVariable()",
          "",
          "[Removed Lines]",
          "12486:                     srec( FileSize64bitStruct, req_cond=\"ncp.ext_info_64_bit_fs == 1\" ),",
          "",
          "[Added Lines]",
          "12677:         srec( FileSize64bitStruct, req_cond=\"ncp.ext_info_64_bit_fs == 1\" ),",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "12732:                          0x9804, 0x9b03, 0x9c03, 0xbf00, 0xfd00, 0xff16])",
          "12733:     # 2222/5714, 87/20",
          "12734:     pkt = NCP(0x5714, \"Search for File or Subdirectory Set\", 'file', has_length=0)",
          "12736:             rec( 8, 1, NameSpace  ),",
          "12737:             rec( 9, 1, DataStream ),",
          "12738:             rec( 10, 2, SearchAttributesLow ),",
          "",
          "[Removed Lines]",
          "12735:     pkt.Request((28, 282), [",
          "",
          "[Added Lines]",
          "12926:     pkt.Request((27, 27), [",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "12740:             rec( 14, 2, ExtendedInfo ),",
          "12741:             rec( 16, 2, ReturnInfoCount ),",
          "12742:             rec( 18, 9, SeachSequenceStruct ),",
          "12744:     ])",
          "12745: # The reply packet is dissected in packet-ncp2222.inc",
          "12746:     pkt.Reply(NO_LENGTH_CHECK, [",
          "",
          "[Removed Lines]",
          "12743:             rec( 27, (1,255), SearchPattern ),",
          "",
          "[Added Lines]",
          "12934: #            rec( 27, (1,255), SearchPattern ),",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "13083:             srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13084:             srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "13085:             srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "13088:             srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "13089:             srec( DOSNameStruct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "13090:             srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "",
          "[Removed Lines]",
          "13086:             srec( DStreamActual, req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "13087:             srec( DStreamLogical, req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "[Added Lines]",
          "13277:             rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "13278:             srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "13279:             rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "13280:             srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "13123:             rec( 8, 4, FileHandle ),",
          "13124:             rec( 12, 1, OpenCreateAction ),",
          "13125:             rec( 13, 1, OCRetFlags ),",
          "13173:     ])",
          "13174:     pkt.ReqCondSizeVariable()",
          "13175:     pkt.CompletionCodes([0x0000, 0x0102, 0x8000, 0x8101, 0x8401, 0x8501,",
          "",
          "[Removed Lines]",
          "13126:     srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "13127:     srec( PadDSSpaceAllocate, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 0)\" ),",
          "13128:     srec( AttributesStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_attr == 1)\" ),",
          "13129:     srec( PadAttributes, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_attr == 0)\" ),",
          "13130:     srec( DataStreamSizeStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_size == 1)\" ),",
          "13131:     srec( PadDataStreamSize, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_size == 0)\" ),",
          "13132:     srec( TotalStreamSizeStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13133:     srec( PadTotalStreamSize, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_tspace == 0)\" ),",
          "13134:     srec( CreationInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_create == 1)\" ),",
          "13135:     srec( PadCreationInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_create == 0)\" ),",
          "13136:     srec( ModifyInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13137:     srec( PadModifyInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_mod == 0)\" ),",
          "13138:     srec( ArchiveInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13139:     srec( PadArchiveInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_arch == 0)\" ),",
          "13140:     srec( RightsInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13141:     srec( PadRightsInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_rights == 0)\" ),",
          "13142:     srec( DirEntryStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13143:     srec( PadDirEntry, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_dir == 0)\" ),",
          "13144:     srec( EAInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13145:     srec( PadEAInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_eattr == 0)\" ),",
          "13146:     srec( NSInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13147:     srec( PadNSInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_ns == 0)\" ),",
          "13148:     srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_alloc  == 1)\" ),",
          "13149:     srec( AttributesStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_attr == 1)\" ),",
          "13150:     srec( DataStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_size == 1)\" ),",
          "13151:     srec( TotalStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13152:     srec( EAInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13153:     srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13154:     srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "13155:     srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13156:     srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13157:     srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13158:     srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13159:     srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "13160:     srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "13161:     srec( DStreamActual, req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "13162:     srec( DStreamLogical, req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "13163:     srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "13164:     srec( DOSNameStruct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "13165:     srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "13166:     srec( ParentBaseIDStruct, req_cond=\"ncp.ext_info_parental == 1\" ),",
          "13167:     srec( MacFinderInfoStruct, req_cond=\"ncp.ext_info_mac_finder == 1\" ),",
          "13168:     srec( SiblingCountStruct, req_cond=\"ncp.ext_info_sibling == 1\" ),",
          "13169:     srec( EffectiveRightsStruct, req_cond=\"ncp.ext_info_effective == 1\" ),",
          "13170:     srec( MacTimeStruct, req_cond=\"ncp.ext_info_mac_date == 1\" ),",
          "13171:     srec( LastAccessedTimeStruct, req_cond=\"ncp.ext_info_access == 1\" ),",
          "13172:     srec( FileNameStruct, req_cond=\"ncp.ret_info_mask_fname == 1\" ),",
          "",
          "[Added Lines]",
          "13319:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "13320:             srec( PadDSSpaceAllocate, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 0)\" ),",
          "13321:             srec( AttributesStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_attr == 1)\" ),",
          "13322:             srec( PadAttributes, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_attr == 0)\" ),",
          "13323:             srec( DataStreamSizeStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_size == 1)\" ),",
          "13324:             srec( PadDataStreamSize, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_size == 0)\" ),",
          "13325:             srec( TotalStreamSizeStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13326:             srec( PadTotalStreamSize, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_tspace == 0)\" ),",
          "13327:             srec( CreationInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_create == 1)\" ),",
          "13328:             srec( PadCreationInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_create == 0)\" ),",
          "13329:             srec( ModifyInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13330:             srec( PadModifyInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_mod == 0)\" ),",
          "13331:             srec( ArchiveInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13332:             srec( PadArchiveInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_arch == 0)\" ),",
          "13333:             srec( RightsInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13334:             srec( PadRightsInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_rights == 0)\" ),",
          "13335:             srec( DirEntryStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13336:             srec( PadDirEntry, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_dir == 0)\" ),",
          "13337:             srec( EAInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13338:             srec( PadEAInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_eattr == 0)\" ),",
          "13339:             srec( NSInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13340:             srec( PadNSInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_ns == 0)\" ),",
          "13341:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_alloc  == 1)\" ),",
          "13342:             srec( AttributesStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_attr == 1)\" ),",
          "13343:             srec( DataStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_size == 1)\" ),",
          "13344:             srec( TotalStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13345:             srec( EAInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13346:             srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13347:             srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "13348:             srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13349:             srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13350:             srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13351:             srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13352:             srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "13353:             srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "13354:             rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "13355:             srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "13356:             rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "13357:             srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "13358:             srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "13359:             srec( DOSNameStruct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "13360:             srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "13361:             srec( ParentBaseIDStruct, req_cond=\"ncp.ext_info_parental == 1\" ),",
          "13362:             srec( MacFinderInfoStruct, req_cond=\"ncp.ext_info_mac_finder == 1\" ),",
          "13363:             srec( SiblingCountStruct, req_cond=\"ncp.ext_info_sibling == 1\" ),",
          "13364:             srec( EffectiveRightsStruct, req_cond=\"ncp.ext_info_effective == 1\" ),",
          "13365:             srec( MacTimeStruct, req_cond=\"ncp.ext_info_mac_date == 1\" ),",
          "13366:             srec( LastAccessedTimeStruct, req_cond=\"ncp.ext_info_access == 1\" ),",
          "13367:             srec( FileNameStruct, req_cond=\"ncp.ret_info_mask_fname == 1\" ),",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "13471:     pkt.CompletionCodes([0x0000, 0x7300, 0x8000, 0x8101, 0x8401, 0x8501,",
          "13472:                          0x8701, 0x8800, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "13473:                          0x9804, 0x9b03, 0x9c03, 0xbf00, 0xfd00, 0xff1a])",
          "13474:     # 2222/5801, 8801",
          "13475:     pkt = NCP(0x5801, \"Query Volume Audit Status\", \"auditing\", has_length=0)",
          "13476:     pkt.Request(12, [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13669:     # 2222/5746, 87/70",
          "13670:     pkt = NCP(0x5746, \"Copy from One File to Another (64 Bit offset capable)\", 'file', has_length=0)",
          "13671:     pkt.Request(44, [",
          "13672:     rec(8, 6, SourceFileHandle, BE ),",
          "13673:     rec(14, 6, TargetFileHandle, BE ),",
          "13674:     rec(20, 8, SourceFileOffset, BE ),",
          "13675:     rec(28, 8, TargetFileOffset64bit, BE ),",
          "13676:     rec(36, 8, BytesToCopy64bit, BE ),",
          "13677: ])",
          "13678:     pkt.Reply(16, [",
          "13679:             rec( 8, 8, BytesActuallyTransferred64bit, BE ),",
          "13680:     ])",
          "13681:     pkt.CompletionCodes([0x0000, 0x0104, 0x8301, 0x8800, 0x9300, 0x9400,",
          "13682:                          0x9500, 0x9600, 0xa201])",
          "13683:     # 2222/5747, 87/71",
          "13684:     pkt = NCP(0x5747, \"Get Sparse File Data Block Bit Map\", 'file', has_length=0)",
          "13685:     pkt.Request(23, [",
          "13686:     rec(8, 6, SourceFileHandle, BE ),",
          "13687:     rec(14, 8, SourceFileOffset, BE ),",
          "13688:     rec(22, 1, ExtentListFormat, BE ),",
          "13689: ])",
          "13690:     pkt.Reply(NO_LENGTH_CHECK, [",
          "13691:             rec( 8, 1, ExtentListFormat ),",
          "13692:             rec( 9, 1, RetExtentListCount, var=\"x\" ),",
          "13693:             rec( 10, 8, EndingOffset ),",
          "13694:             srec(zFileMap_Allocation, req_cond=\"ncp.ext_lst_format==0\", repeat=\"x\" ),",
          "13695:             srec(zFileMap_Logical, req_cond=\"ncp.ext_lst_format==1\", repeat=\"x\" ),",
          "13696:             srec(zFileMap_Physical, req_cond=\"ncp.ext_lst_format==2\", repeat=\"x\" ),",
          "13697:     ])",
          "13698:     pkt.ReqCondSizeVariable()",
          "13699:     pkt.CompletionCodes([0x0000, 0x8800, 0xff00])",
          "13700:      # 2222/5748, 87/72",
          "13701:     pkt = NCP(0x5748, \"Read a File\", 'file', has_length=0)",
          "13702:     pkt.Request(24, [",
          "13703:     rec( 8, 4, FileHandle, BE ),",
          "13704:     rec( 12, 8, StartOffset64bit, BE ),",
          "13705:     rec( 20, 4, NumBytesLong, BE ),",
          "13706: ])",
          "13707:     pkt.Reply(NO_LENGTH_CHECK, [",
          "13708:     rec( 8, 4, NumBytesLong, BE),",
          "13709:  rec( 12, PROTO_LENGTH_UNKNOWN, Data64),",
          "13710:  #decoded in packet-ncp2222.inc",
          "13711:  # rec( NumBytesLong, 4, BytesActuallyTransferred64bit, BE),",
          "13712:  ])",
          "13713:     pkt.CompletionCodes([0x0000, 0x8300, 0x8800, 0x9300, 0x9500, 0xa201, 0xfd00, 0xff1b])",
          "13715:      # 2222/5749, 87/73",
          "13716:     pkt = NCP(0x5749, \"Write to a File\", 'file', has_length=0)",
          "13717:     pkt.Request(24, [",
          "13718:     rec( 8, 4, FileHandle, BE ),",
          "13719:     rec( 12, 8, StartOffset64bit, BE ),",
          "13720:     rec( 20, 4, NumBytesLong, BE ),",
          "13721: ])",
          "13722:     pkt.Reply(8)",
          "13723:     pkt.CompletionCodes([0x0000, 0x0102, 0x8300, 0x8800, 0x9400, 0x9500, 0xa201, 0xfd00, 0xff1b])",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "13686:             rec( 8, 4, FileHandle, BE ),",
          "13687:             rec( 12, 1, OpenCreateAction ),",
          "13688:             rec( 13, 1, Reserved ),",
          "13737:     ])",
          "13738:     pkt.ReqCondSizeVariable()",
          "13739:     pkt.CompletionCodes([0x0000, 0x0102, 0x7f00, 0x8000, 0x8101, 0x8401, 0x8501,",
          "",
          "[Removed Lines]",
          "13689:                     srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "13690:                     srec( PadDSSpaceAllocate, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 0)\" ),",
          "13691:                     srec( AttributesStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_attr == 1)\" ),",
          "13692:                     srec( PadAttributes, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_attr == 0)\" ),",
          "13693:                     srec( DataStreamSizeStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_size == 1)\" ),",
          "13694:                     srec( PadDataStreamSize, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_size == 0)\" ),",
          "13695:                     srec( TotalStreamSizeStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13696:                     srec( PadTotalStreamSize, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_tspace == 0)\" ),",
          "13697:                     srec( CreationInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_create == 1)\" ),",
          "13698:                     srec( PadCreationInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_create == 0)\" ),",
          "13699:                     srec( ModifyInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13700:                     srec( PadModifyInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_mod == 0)\" ),",
          "13701:                     srec( ArchiveInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13702:                     srec( PadArchiveInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_arch == 0)\" ),",
          "13703:                     srec( RightsInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13704:                     srec( PadRightsInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_rights == 0)\" ),",
          "13705:                     srec( DirEntryStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13706:                     srec( PadDirEntry, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_dir == 0)\" ),",
          "13707:                     srec( EAInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13708:                     srec( PadEAInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_eattr == 0)\" ),",
          "13709:                     srec( NSInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13710:                     srec( PadNSInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_ns == 0)\" ),",
          "13711:                     srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_alloc  == 1)\" ),",
          "13712:                     srec( AttributesStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_attr == 1)\" ),",
          "13713:                     srec( DataStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_size == 1)\" ),",
          "13714:                     srec( TotalStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13715:                     srec( EAInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13716:                     srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13717:                     srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "13718:                     srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13719:                     srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13720:                     srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13721:                     srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13722:                     srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "13723:                     srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "13724:                     srec( DStreamActual, req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "13725:                     srec( DStreamLogical, req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "13726:                     srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "13727:                     srec( DOSName16Struct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "13728:                     srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "13729:                     srec( ParentBaseIDStruct, req_cond=\"ncp.ext_info_parental == 1\" ),",
          "13730:                     srec( MacFinderInfoStruct, req_cond=\"ncp.ext_info_mac_finder == 1\" ),",
          "13731:                     srec( SiblingCountStruct, req_cond=\"ncp.ext_info_sibling == 1\" ),",
          "13732:                     srec( EffectiveRightsStruct, req_cond=\"ncp.ext_info_effective == 1\" ),",
          "13733:                     srec( MacTimeStruct, req_cond=\"ncp.ext_info_mac_date == 1\" ),",
          "13734:                     srec( LastAccessedTimeStruct, req_cond=\"ncp.ext_info_access == 1\" ),",
          "13735:                     srec( FileSize64bitStruct, req_cond=\"ncp.ext_info_64_bit_fs == 1\" ),",
          "13736:                     srec( FileName16Struct, req_cond=\"ncp.ret_info_mask_fname == 1\" ),",
          "",
          "[Added Lines]",
          "13940:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 1)\" ),",
          "13941:             srec( PadDSSpaceAllocate, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_alloc == 0)\" ),",
          "13942:             srec( AttributesStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_attr == 1)\" ),",
          "13943:             srec( PadAttributes, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_attr == 0)\" ),",
          "13944:             srec( DataStreamSizeStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_size == 1)\" ),",
          "13945:             srec( PadDataStreamSize, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_size == 0)\" ),",
          "13946:             srec( TotalStreamSizeStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13947:             srec( PadTotalStreamSize, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_tspace == 0)\" ),",
          "13948:             srec( CreationInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_create == 1)\" ),",
          "13949:             srec( PadCreationInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_create == 0)\" ),",
          "13950:             srec( ModifyInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13951:             srec( PadModifyInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_mod == 0)\" ),",
          "13952:             srec( ArchiveInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13953:             srec( PadArchiveInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_arch == 0)\" ),",
          "13954:             srec( RightsInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13955:             srec( PadRightsInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_rights == 0)\" ),",
          "13956:             srec( DirEntryStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13957:             srec( PadDirEntry, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_dir == 0)\" ),",
          "13958:             srec( EAInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13959:             srec( PadEAInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_eattr == 0)\" ),",
          "13960:             srec( NSInfoStruct, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13961:             srec( PadNSInfo, req_cond=\"(ncp.ret_info_mask != 0x0000) && (ncp.ext_info_newstyle == 0) && (ncp.ret_info_mask_ns == 0)\" ),",
          "13962:             srec( DSSpaceAllocateStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_alloc  == 1)\" ),",
          "13963:             srec( AttributesStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_attr == 1)\" ),",
          "13964:             srec( DataStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_size == 1)\" ),",
          "13965:             srec( TotalStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13966:             srec( EAInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13967:             srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13968:             srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "13969:             srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13970:             srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13971:             srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13972:             srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13973:             srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "13974:             srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "13975:             rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "13976:             srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "13977:             rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "13978:             srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "13979:             srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "13980:             srec( DOSName16Struct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "13981:             srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "13982:             srec( ParentBaseIDStruct, req_cond=\"ncp.ext_info_parental == 1\" ),",
          "13983:             srec( MacFinderInfoStruct, req_cond=\"ncp.ext_info_mac_finder == 1\" ),",
          "13984:             srec( SiblingCountStruct, req_cond=\"ncp.ext_info_sibling == 1\" ),",
          "13985:             srec( EffectiveRightsStruct, req_cond=\"ncp.ext_info_effective == 1\" ),",
          "13986:             srec( MacTimeStruct, req_cond=\"ncp.ext_info_mac_date == 1\" ),",
          "13987:             srec( LastAccessedTimeStruct, req_cond=\"ncp.ext_info_access == 1\" ),",
          "13988:             srec( FileSize64bitStruct, req_cond=\"ncp.ext_info_64_bit_fs == 1\" ),",
          "13989:             srec( FileName16Struct, req_cond=\"ncp.ret_info_mask_fname == 1\" ),",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "13762:                          0x9804, 0x9b03, 0x9c03, 0xa901, 0xaa00, 0xbf00, 0xfd00, 0xff16])",
          "13763:     # 2222/5903, 89/03",
          "13764:     pkt = NCP(0x5903, \"Search for File or Subdirectory\", 'enhanced', has_length=0)",
          "13766:             rec( 8, 1, NameSpace  ),",
          "13767:             rec( 9, 1, DataStream ),",
          "13768:             rec( 10, 2, SearchAttributesLow ),",
          "13769:             rec( 12, 2, ReturnInfoMask ),",
          "13770:             rec( 14, 2, ExtendedInfo ),",
          "13771:             rec( 16, 9, SeachSequenceStruct ),",
          "13774:     ], info_str=(SearchPattern16, \"Search for: %s\", \"/%s\"))",
          "13775:     pkt.Reply( NO_LENGTH_CHECK, [",
          "13776:             rec( 8, 9, SeachSequenceStruct ),",
          "",
          "[Removed Lines]",
          "13765:     pkt.Request((28, 281), [",
          "13772:     rec( 25, 1, DataTypeFlag ),",
          "13773:             rec( 26, (2,255), SearchPattern16 ),",
          "",
          "[Added Lines]",
          "14018:     pkt.Request(26, [",
          "14025:             rec( 25, 1, DataTypeFlag ),",
          "14026:             # next field is dissected in packet-ncp2222.inc",
          "14027:             #rec( 26, (2,255), SearchPattern16 ),",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "13802:             srec( DataStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_size == 1)\" ),",
          "13803:             srec( TotalStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13804:             srec( EAInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13805:             srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13806:             srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "13808:             srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13809:             srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13811:             srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "13812:             srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "13815:             srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "13816:             srec( DOSName16Struct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "13817:             srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "",
          "[Removed Lines]",
          "13807:             srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13810:             srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13813:             srec( DStreamActual, req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "13814:             srec( DStreamLogical, req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "[Added Lines]",
          "14059:             srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "14062:             srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "14067:             rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "14068:             srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "14069:             rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "14070:             srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "13916:         srec( AttributesStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_attr == 1)\" ),",
          "13917:         srec( DataStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_size == 1)\" ),",
          "13918:         srec( TotalStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "13924:         srec( EAInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "13925:         srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "13926:         srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "13927:         srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "13930:         srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "13932:         srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "13933:         srec( ParentBaseIDStruct, req_cond=\"ncp.ext_info_parental == 1\" ),",
          "13934:         srec( MacFinderInfoStruct, req_cond=\"ncp.ext_info_mac_finder == 1\" ),",
          "",
          "[Removed Lines]",
          "13919:         srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "13920:         srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "13921:         srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "13922:         srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "13923:         srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "13928:         srec( DStreamActual, req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "13929:         srec( DStreamLogical, req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "13931:         srec( DOSName16Struct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "",
          "[Added Lines]",
          "14176:         srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "14177:         srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "14178:         srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "14180:         srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "14181:         srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "14184:         rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "14185:         srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "14186:         rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "14187:         srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "13936:         srec( EffectiveRightsStruct, req_cond=\"ncp.ext_info_effective == 1\" ),",
          "13937:         srec( MacTimeStruct, req_cond=\"ncp.ext_info_mac_date == 1\" ),",
          "13938:         srec( LastAccessedTimeStruct, req_cond=\"ncp.ext_info_access == 1\" ),",
          "13939:         srec( FileSize64bitStruct, req_cond=\"ncp.ext_info_64_bit_fs == 1\" ),",
          "13940:         srec( FileName16Struct, req_cond=\"ncp.ret_info_mask_fname == 1\" ),",
          "13941:     ])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14196:         srec( DOSName16Struct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "13976:             rec( 67, (2,255), Path16, repeat=\"x\" ),",
          "13977:     ], info_str=(Path16, \"Modify DOS Information for: %s\", \"/%s\"))",
          "13978:     pkt.Reply(8)",
          "13980:                          0x8701, 0x8c01, 0x8d00, 0x8e00, 0x8f00, 0x9001, 0x9600,",
          "13981:                          0x9804, 0x9b03, 0x9c03, 0xa901, 0xaa00, 0xbf00, 0xfd00, 0xff16])",
          "13982:     # 2222/5908, 89/08",
          "",
          "[Removed Lines]",
          "13979:     pkt.CompletionCodes([0x0000, 0x0102, 0x8000, 0x8101, 0x8401, 0x8501,",
          "",
          "[Added Lines]",
          "14237:     pkt.CompletionCodes([0x0000, 0x0102, 0x7902, 0x8000, 0x8101, 0x8401, 0x8501,",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "14128:             srec( AttributesStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_attr == 1)\" ),",
          "14129:             srec( DataStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_size == 1)\" ),",
          "14130:             srec( TotalStreamSizeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_tspace == 1)\" ),",
          "14136:             srec( EAInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_eattr == 1)\" ),",
          "14137:             srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "14138:             srec( FileSize64bitStruct, req_cond=\"ncp.ext_info_64_bit_fs == 1\" ),",
          "14139:             srec( FileName16Struct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_fname == 1)\" ),",
          "14140:     ])",
          "",
          "[Removed Lines]",
          "14131:             srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "14132:             srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "14133:             srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "14134:             srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "14135:             srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "",
          "[Added Lines]",
          "14390:             srec( ArchiveInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_arch == 1)\" ),",
          "14391:             srec( ModifyInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_mod == 1)\" ),",
          "14392:             srec( CreationInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_create == 1)\" ),",
          "14394:             srec( DirEntryStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_dir == 1)\" ),",
          "14395:             srec( RightsInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_rights == 1)\" ),",
          "14396:             srec( ReferenceIDStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_id == 1)\" ),",
          "14397:             srec( NSAttributeStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns_attr == 1)\" ),",
          "14398:             rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "14399:             srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "14400:             rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "14401:             srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "14402:             srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "14403:             srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "14404:             srec( ParentBaseIDStruct, req_cond=\"ncp.ext_info_parental == 1\" ),",
          "14405:             srec( MacFinderInfoStruct, req_cond=\"ncp.ext_info_mac_finder == 1\" ),",
          "14406:             srec( SiblingCountStruct, req_cond=\"ncp.ext_info_sibling == 1\" ),",
          "14407:             srec( EffectiveRightsStruct, req_cond=\"ncp.ext_info_effective == 1\" ),",
          "14408:             srec( MacTimeStruct, req_cond=\"ncp.ext_info_mac_date == 1\" ),",
          "14409:             srec( LastAccessedTimeStruct, req_cond=\"ncp.ext_info_access == 1\" ),",
          "14410:             srec( DOSName16Struct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "14151:             rec( 14, 4, VolumeID ),",
          "14152:             rec( 18, 4, DirectoryBase ),",
          "14153:     rec( 22, 1, DataTypeFlag ),",
          "14156:     pkt.Reply(8)",
          "14157:     pkt.CompletionCodes([0x0000, 0x0102, 0x8000, 0x8101, 0x8401, 0x8501,",
          "14158:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "",
          "[Removed Lines]",
          "14154:             rec( 23, (1,255), FileName ),",
          "14155:     ], info_str=(FileName, \"Recover Deleted File: %s\", \", %s\"))",
          "",
          "[Added Lines]",
          "14427:             rec( 23, (1,255), FileName16 ),",
          "14428:     ], info_str=(FileName16, \"Recover Deleted File: %s\", \", %s\"))",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "14188:                          0x9804, 0x9b03, 0x9c03, 0xa901, 0xaa00, 0xbf00, 0xfd00, 0xff16])",
          "14189:     # 2222/5914, 89/20",
          "14190:     pkt = NCP(0x5914, \"Search for File or Subdirectory Set\", 'enhanced', has_length=0)",
          "14192:             rec( 8, 1, NameSpace  ),",
          "14193:             rec( 9, 1, DataStream ),",
          "14194:             rec( 10, 2, SearchAttributesLow ),",
          "",
          "[Removed Lines]",
          "14191:     pkt.Request((30, 283), [",
          "",
          "[Added Lines]",
          "14464:     pkt.Request((28, 28), [",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "14196:             rec( 14, 2, ExtendedInfo ),",
          "14197:             rec( 16, 2, ReturnInfoCount ),",
          "14198:             rec( 18, 9, SeachSequenceStruct ),",
          "14201:     ])",
          "14202: # The reply packet is dissected in packet-ncp2222.inc",
          "14203:     pkt.Reply(NO_LENGTH_CHECK, [",
          "",
          "[Removed Lines]",
          "14199:     rec( 27, 1, DataTypeFlag ),",
          "14200:             rec( 28, (2,255), SearchPattern16 ),",
          "",
          "[Added Lines]",
          "14472:             rec( 27, 1, DataTypeFlag ),",
          "14473:             # next field is dissected in packet-ncp2222.inc",
          "14474:             #rec( 28, (2,255), SearchPattern16 ),",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "14454:             srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "14455:             srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "14456:             srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "14459:             srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "14460:             srec( DOSName16Struct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "14461:             srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "",
          "[Removed Lines]",
          "14457:             srec( DStreamActual, req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "14458:             srec( DStreamLogical, req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "[Added Lines]",
          "14731:             rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "14732:             srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "14733:             rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "14734:             srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "14470:     ])",
          "14471:     pkt.ReqCondSizeVariable()",
          "14472:     pkt.CompletionCodes([0x0000, 0x0102, 0x7f00, 0x8000, 0x8101, 0x8401, 0x8501,",
          "14474:                          0x9804, 0x9b03, 0x9c03, 0xa901, 0xaa00, 0xbf00, 0xfd00, 0xff16])",
          "14475:     # 2222/5921, 89/33",
          "14476:     pkt = NCP(0x5921, \"Open/Create File or Subdirectory II with Callback\", 'enhanced', has_length=0)",
          "",
          "[Removed Lines]",
          "14473:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "",
          "[Added Lines]",
          "14749:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9400, 0x9600,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "14532:             srec( NSInfoStruct, req_cond=\"(ncp.ext_info_newstyle == 1) && (ncp.ret_info_mask_ns == 1)\" ),",
          "14533:             srec( ReferenceIDStruct, req_cond=\"ncp.ret_info_mask_id == 1\" ),",
          "14534:             srec( NSAttributeStruct, req_cond=\"ncp.ret_info_mask_ns_attr == 1\" ),",
          "14537:             srec( LastUpdatedInSecondsStruct, req_cond=\"ncp.ext_info_update == 1\" ),",
          "14538:             srec( DOSName16Struct, req_cond=\"ncp.ext_info_dos_name == 1\" ),",
          "14539:             srec( FlushTimeStruct, req_cond=\"ncp.ext_info_flush == 1\" ),",
          "",
          "[Removed Lines]",
          "14535:             srec( DStreamActual, req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "14536:             srec( DStreamLogical, req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "[Added Lines]",
          "14811:             rec( -1, 4, DataStreamsCount, var=\"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\"  ),",
          "14812:             srec( DStreamActual, repeat = \"x\" , req_cond=\"ncp.ret_info_mask_actual == 1\" ),",
          "14813:             rec( -1, 4, DataStreamsCount, var=\"y\", req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "14814:             srec( DStreamLogical, repeat=\"y\" , req_cond=\"ncp.ret_info_mask_logical == 1\" ),",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "14584:             rec( 11, 4, DirectoryBase ),",
          "14585:             rec( 15, 1, VolumeNumber ),",
          "14586:             rec( 16, 1, HandleFlag ),",
          "14589:             rec( 23, 1, PathCount, var=\"x\" ),",
          "14590:             rec( 24, (2,255), Path16, repeat=\"x\" ),",
          "14591:     ], info_str=(Path16, \"Get Disk Space Restriction for: %s\", \"/%s\"))",
          "",
          "[Removed Lines]",
          "14587:     rec( 17, 1, DataTypeFlag ),",
          "14588:     rec( 18, 5, Reserved5 ),",
          "",
          "[Added Lines]",
          "14865:             rec( 17, 1, DataTypeFlag ),",
          "14866:             rec( 18, 5, Reserved5 ),",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "14655:     pkt.CompletionCodes([0x0000, 0x8000, 0x8101, 0x8401, 0x8501,",
          "14656:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "14657:                          0x9804, 0x9b03, 0x9c03, 0xa901, 0xaa00, 0xbf00, 0xfd00, 0xff16])",
          "14658:     # 2222/5932, 89/50",
          "14659:     pkt = NCP(0x5932, \"Get Object Effective Rights\", \"enhanced\", has_length=0)",
          "14660:     pkt.Request(25, [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14936:     # 2222/5929, 89/41",
          "14937:     pkt = NCP(0x5929, \"Get Directory Disk Space Restriction 64 Bit Aware\", 'enhanced', has_length=0)",
          "14938:     pkt.Request((26, 279), [",
          "14939:             rec( 8, 1, NameSpace  ),",
          "14940:             rec( 9, 1, Reserved ),",
          "14941:             rec( 10, 1, InfoLevelNumber),",
          "14942:             rec( 11, 4, DirectoryBase ),",
          "14943:             rec( 15, 1, VolumeNumber ),",
          "14944:             rec( 16, 1, HandleFlag ),",
          "14945:     rec( 17, 1, DataTypeFlag ),",
          "14946:     rec( 18, 5, Reserved5 ),",
          "14947:             rec( 23, 1, PathCount, var=\"x\" ),",
          "14948:             rec( 24, (2,255), Path16, repeat=\"x\" ),",
          "14949:     ], info_str=(Path16, \"Get Disk Space Restriction for: %s\", \"/%s\"))",
          "14950:     pkt.Reply(NO_LENGTH_CHECK, [",
          "14951:             rec( -1, 8, MaxSpace64, req_cond = \"(ncp.info_level_num == 0)\" ),",
          "14952:             rec( -1, 8, MinSpaceLeft64, req_cond = \"(ncp.info_level_num == 0)\" ),",
          "14953:             rec( -1, 1, NumberOfEntries, var=\"x\", req_cond = \"(ncp.info_level_num == 1)\" ),",
          "14954:             srec( DirDiskSpaceRest64bit, repeat=\"x\", req_cond = \"(ncp.info_level_num == 1)\" ),",
          "14955:     ])",
          "14956:     pkt.ReqCondSizeVariable()",
          "14957:     pkt.CompletionCodes([0x0000, 0x8000, 0x8101, 0x8401, 0x8501,",
          "14958:                          0x8701, 0x8d00, 0x8f00, 0x9001, 0x9600,",
          "14959:                          0x9804, 0x9b03, 0x9c03, 0xa901, 0xaa00, 0xbf00, 0xfd00,",
          "14960:                          0xff16])",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "14679:             rec( 18, 4, TtlWriteDataSize ),",
          "14680:             rec( 22, 4, FileOffset ),",
          "14681:             rec( 26, 4, EAAccessFlag ),",
          "14683:             rec( 31, 2, EAValueLength, var='x' ),",
          "14684:             rec( 33, (2,64), EAKey ),",
          "14685:             rec( -1, 1, EAValueRep, repeat='x' ),",
          "",
          "[Removed Lines]",
          "14682:     rec( 30, 1, DataTypeFlag ),",
          "",
          "[Added Lines]",
          "14985:             rec( 30, 1, DataTypeFlag ),",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "14699:             rec( 14, 4, ReservedOrDirectoryNumber ),",
          "14700:             rec( 18, 4, FileOffset ),",
          "14701:             rec( 22, 4, InspectSize ),",
          "14704:             rec( 29, (2,512), EAKey ),",
          "14705:     ], info_str=(EAKey, \"Read Extended Attribute: %s\", \", %s\"))",
          "14706:     pkt.Reply((26,536), [",
          "",
          "[Removed Lines]",
          "14702:     rec( 26, 1, DataTypeFlag ),",
          "14703:     rec( 27, 2, MaxReadDataReplySize ),",
          "",
          "[Added Lines]",
          "15005:             rec( 26, 1, DataTypeFlag ),",
          "15006:             rec( 27, 2, MaxReadDataReplySize ),",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "14743:     pkt.Reply((20,273), [",
          "14744:             rec( 8, 4, SequenceNumber ),",
          "14745:             rec( 12, 4, ObjectID ),",
          "14747:             rec( 17, 1, PathCount, var=\"x\" ),",
          "14748:             rec( 18, (2,255), Path16, repeat=\"x\" ),",
          "14749:     ])",
          "",
          "[Removed Lines]",
          "14746:     rec( 16, 1, TrusteeAccessMask ),",
          "",
          "[Added Lines]",
          "15049:             rec( 16, 1, TrusteeAccessMask ),",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "14757:             rec( 14, 4, Reserved4 ),",
          "14758:             rec( 18, 4, Reserved4 ),",
          "14759:             rec( 22, 4, limbCount ),",
          "14765:     ])",
          "14766:     pkt.Reply(32, [",
          "14767:             rec( 8, 4, limbCount ),",
          "",
          "[Removed Lines]",
          "14760:     rec( 26, 4, limbFlags ),",
          "14761:     rec( 30, 4, VolumeNumberLong ),",
          "14762:     rec( 34, 4, DirectoryBase ),",
          "14763:     rec( 38, 4, limbScanNum ),",
          "14764:     rec( 42, 4, NameSpace ),",
          "",
          "[Added Lines]",
          "15063:             rec( 26, 4, limbFlags ),",
          "15064:             rec( 30, 4, VolumeNumberLong ),",
          "15065:             rec( 34, 4, DirectoryBase ),",
          "15066:             rec( 38, 4, limbScanNum ),",
          "15067:             rec( 42, 4, NameSpace ),",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "15898:     ])",
          "15899:     pkt.ReqCondSizeVariable()",
          "15900:     pkt.CompletionCodes([0x0000, 0x7900, 0x7e01, 0xfb06, 0xff00])",
          "15901:     # 2222/7B28, 123/40",
          "15902:     pkt = NCP(0x7B28, \"Active Protocol Stacks\", 'stats')",
          "15903:     pkt.Request(14, [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16203:     pkt.CompletionCodes([0x0000, 0x7900, 0x7e01, 0xfb06, 0xff00])",
          "16204:     # 2222/7B23, 123/35",
          "16205:     pkt = NCP(0x7B23, \"Get Volume Information by Level 64 Bit Aware\", 'stats')",
          "16206:     pkt.Request(22, [",
          "16207:             rec(10, 4, InpInfotype ),",
          "16208:             rec(14, 4, Inpld ),",
          "16209:    rec(18, 4, VolInfoReturnInfoMask),",
          "16210:     ])",
          "16211:     pkt.Reply(NO_LENGTH_CHECK, [",
          "16212:             rec(8, 4, CurrentServerTime ),",
          "16213:             rec(12, 1, VConsoleVersion ),",
          "16214:             rec(13, 1, VConsoleRevision ),",
          "16215:             rec(14, 2, Reserved2 ),",
          "16216:             rec(16, 4, VolInfoReturnInfoMask),",
          "16217:             srec(VolInfoStructure64, req_cond=\"ncp.vinfo_info64==0x00000001\"),",
          "16218:             rec( -1, (1,255), VolumeNameLen, req_cond=\"ncp.vinfo_volname==0x00000002\" ),",
          "16219:     ])",
          "16220:     pkt.ReqCondSizeVariable()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "400a3e1fb99245ec4f732b2a4cc8a3b573f5dd9e",
      "candidate_info": {
        "commit_hash": "400a3e1fb99245ec4f732b2a4cc8a3b573f5dd9e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/400a3e1fb99245ec4f732b2a4cc8a3b573f5dd9e",
        "files": [
          "epan/dissectors/packet-ncp2222.inc"
        ],
        "message": "Clean up the wildcard string processing a bit.\n\nAdd some comments as well.\n\nChange-Id: I308aec7af187b917fbaa318712c82e3d9187cf1b\nReviewed-on: https://code.wireshark.org/review/14745\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ],
          "candidate": [
            "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ncp2222.inc||epan/dissectors/packet-ncp2222.inc": [
          "File: epan/dissectors/packet-ncp2222.inc -> epan/dissectors/packet-ncp2222.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "6177:     offset++;",
          "6178:     buffer_offset = offset;",
          "6180:     for ( i = 0; i <= (gint)str_length; i++ )",
          "6181:     {",
          "6182:         c_char = tvb_get_guint8(tvb, buffer_offset );",
          "6183:         if (c_char<0x20 || c_char>0x7e)",
          "6184:         {",
          "6186:             {",
          "6188:                 {",
          "6189:                     buffer_offset++;",
          "6190:                     length_remaining--;",
          "6191:                     c_char = tvb_get_guint8(tvb, buffer_offset);",
          "6193:                     {",
          "6224:                     }",
          "6226:                     {",
          "6228:                         wmem_strbuf_append_c(string_buf, c_char);",
          "6229:                     }",
          "6237:                     {",
          "6271:                     }",
          "6272:                 }",
          "6273:             }",
          "",
          "[Removed Lines]",
          "6185:             if (c_char == 0xff || c_char == 0xef)",
          "6187:                 if (c_char == 0xff)",
          "6192:                     if (c_char == 0x3f || c_char == 0x2a || c_char == 0xbf || c_char == 0xaa || c_char == 0xae)",
          "6194:                         if (c_char == 0x3f)",
          "6195:                         {",
          "6196:                             c_char = '?';",
          "6197:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6198:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
          "6199:                         }",
          "6200:                         if (c_char == 0x2a)",
          "6201:                         {",
          "6202:                             c_char = '*';",
          "6203:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6204:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
          "6205:                         }",
          "6206:                         if (c_char == 0xbf)",
          "6207:                         {",
          "6208:                             c_char = '?';",
          "6209:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6210:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
          "6211:                         }",
          "6212:                         if (c_char == 0xaa)",
          "6213:                         {",
          "6214:                             c_char = '*';",
          "6215:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6216:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
          "6217:                         }",
          "6218:                         if (c_char == 0xae)",
          "6219:                         {",
          "6220:                             c_char = '.';",
          "6221:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6222:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
          "6223:                         }",
          "6225:                     else",
          "6227:                         c_char = '.';",
          "6230:                 }",
          "6231:                 if (c_char == 0xef)",
          "6232:                 {",
          "6233:                     buffer_offset++;",
          "6234:                     length_remaining--;",
          "6235:                     c_char = tvb_get_guint8(tvb, buffer_offset);",
          "6236:                     if (c_char == 0xa3)",
          "6238:                         buffer_offset++;",
          "6239:                         length_remaining--;",
          "6240:                         c_char = tvb_get_guint8(tvb, buffer_offset);",
          "6241:                         if (c_char == 0xbb)",
          "6242:                         {",
          "6243:                             c_char = '?';",
          "6244:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6245:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
          "6246:                         }",
          "6247:                         if (c_char == 0xbc)",
          "6248:                         {",
          "6249:                             c_char = '*';",
          "6250:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6251:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
          "6252:                         }",
          "6253:                         if (c_char == 0xbd)",
          "6254:                         {",
          "6255:                             c_char = '?';",
          "6256:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6257:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
          "6258:                         }",
          "6259:                         if (c_char == 0xbe)",
          "6260:                         {",
          "6261:                             c_char = '*';",
          "6262:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6263:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
          "6264:                         }",
          "6265:                         if (c_char == 0xbf)",
          "6266:                         {",
          "6267:                             c_char = '.';",
          "6268:                             wmem_strbuf_append_c(string_buf, c_char);",
          "6269:                             proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
          "6270:                         }",
          "",
          "[Added Lines]",
          "6201:             if (c_char == 0xff)",
          "6202:             {",
          "6212:                 buffer_offset++;",
          "6213:                 length_remaining--;",
          "6214:                 c_char = tvb_get_guint8(tvb, buffer_offset);",
          "6215:                 if (c_char == '?')",
          "6216:                 {",
          "6217:                     wmem_strbuf_append_c(string_buf, '?');",
          "6218:                     proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
          "6219:                 }",
          "6220:                 else if (c_char == '*')",
          "6221:                 {",
          "6222:                     wmem_strbuf_append_c(string_buf, '*');",
          "6223:                     proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
          "6224:                 }",
          "6225:                 else if (c_char == 0xbf)",
          "6226:                 {",
          "6231:                     wmem_strbuf_append_c(string_buf, '?');",
          "6232:                     proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
          "6233:                 }",
          "6234:                 else if (c_char == 0xaa)",
          "6235:                 {",
          "6240:                     c_char = '*';",
          "6241:                     wmem_strbuf_append_c(string_buf, c_char);",
          "6242:                     proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
          "6243:                 }",
          "6244:                 else if (c_char == 0xae)",
          "6245:                 {",
          "6249:                     wmem_strbuf_append_c(string_buf, '.');",
          "6250:                     proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
          "6251:                 }",
          "6252:                 else",
          "6253:                 {",
          "6254:                     wmem_strbuf_append_c(string_buf, '.');",
          "6255:                 }",
          "6256:             }",
          "6257:             else if (c_char == 0xef)",
          "6268:                 buffer_offset++;",
          "6269:                 length_remaining--;",
          "6270:                 c_char = tvb_get_guint8(tvb, buffer_offset);",
          "6271:                 if (c_char == 0xa3)",
          "6276:                     if (c_char == 0xbb)",
          "6278:                         wmem_strbuf_append_c(string_buf, '?');",
          "6279:                         proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Question\");",
          "6281:                     else if (c_char == 0xbc)",
          "6282:                     {",
          "6283:                         wmem_strbuf_append_c(string_buf, '*');",
          "6284:                         proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"Wildcard Asterisk\");",
          "6285:                     }",
          "6286:                     else if (c_char == 0xbd)",
          "6288:                         c_char = '?';",
          "6290:                         proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Question\");",
          "6292:                     else if (c_char == 0xbe)",
          "6294:                         wmem_strbuf_append_c(string_buf, '*');",
          "6295:                         proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Asterisk\");",
          "6296:                     }",
          "6297:                     else if (c_char == 0xbf)",
          "6298:                     {",
          "6299:                         wmem_strbuf_append_c(string_buf, '.');",
          "6300:                         proto_tree_add_uint_format_value(ncp_tree, hf_search_modifier, tvb, buffer_offset-1, 2, c_char, \"DOS Wildcard Period\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6275:             {",
          "6276:                 if (c_char != 0x00)",
          "6277:                 {",
          "6280:                 }",
          "6281:                 else",
          "6282:                 {",
          "",
          "[Removed Lines]",
          "6278:                     c_char = '.';",
          "6279:                     wmem_strbuf_append_c(string_buf, c_char);",
          "",
          "[Added Lines]",
          "6308:                     wmem_strbuf_append_c(string_buf, '.');",
          "",
          "---------------"
        ]
      }
    }
  ]
}