{
  "cve_id": "CVE-2016-10128",
  "cve_desc": "Buffer overflow in the git_pkt_parse_line function in transports/smart_pkt.c in the Git Smart Protocol support in libgit2 before 0.24.6 and 0.25.x before 0.25.1 allows remote attackers to have unspecified impact via a crafted non-flush packet.",
  "repo": "libgit2/libgit2",
  "patch_hash": "66e3774d279672ee51c3b54545a79d20d1ada834",
  "patch_info": {
    "commit_hash": "66e3774d279672ee51c3b54545a79d20d1ada834",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/66e3774d279672ee51c3b54545a79d20d1ada834",
    "files": [
      "src/transports/smart_pkt.c"
    ],
    "message": "smart_pkt: verify packet length exceeds PKT_LEN_SIZE\n\nEach packet line in the Git protocol is prefixed by a four-byte\nlength of how much data will follow, which we parse in\n`git_pkt_parse_line`. The transmitted length can either be equal\nto zero in case of a flush packet or has to be at least of length\nfour, as it also includes the encoded length itself. Not\nchecking this may result in a buffer overflow as we directly pass\nthe length to functions which accept a `size_t` length as\nparameter.\n\nFix the issue by verifying that non-flush packets have at least a\nlength of `PKT_LEN_SIZE`.",
    "before_after_code_files": [
      "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
    ]
  },
  "patch_diff": {
    "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
      "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "427:  if (bufflen > 0 && bufflen < (size_t)len)",
      "428:   return GIT_EBUFS;",
      "430:  line += PKT_LEN_SIZE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "435:  if (len != 0 && len < PKT_LEN_SIZE)",
      "436:   return GIT_ERROR;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98d66240ecb7765e191da19b535c75c92ccc90fe",
      "candidate_info": {
        "commit_hash": "98d66240ecb7765e191da19b535c75c92ccc90fe",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/98d66240ecb7765e191da19b535c75c92ccc90fe",
        "files": [
          "tests/online/badssl.c"
        ],
        "message": "http: perform 'badssl' check also via certificate callback\n\nMake sure that the callbacks do also get a 'valid' value of zero when\nthe certificate we're looking at is in valid and assert that within the\ntest.",
        "before_after_code_files": [
          "tests/online/badssl.c||tests/online/badssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4076"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/online/badssl.c||tests/online/badssl.c": [
          "File: tests/online/badssl.c -> tests/online/badssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: static bool g_has_ssl = false;",
          "11: #endif",
          "13: void test_online_badssl__expired(void)",
          "14: {",
          "15:  if (!g_has_ssl)",
          "16:   cl_skip();",
          "18:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "19:     git_clone(&g_repo, \"https://expired.badssl.com/fake.git\", \"./fake\", NULL));",
          "20: }",
          "22: void test_online_badssl__wrong_host(void)",
          "23: {",
          "24:  if (!g_has_ssl)",
          "25:   cl_skip();",
          "27:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "28:     git_clone(&g_repo, \"https://wrong.host.badssl.com/fake.git\", \"./fake\", NULL));",
          "29: }",
          "31: void test_online_badssl__self_signed(void)",
          "32: {",
          "33:  if (!g_has_ssl)",
          "34:   cl_skip();",
          "36:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "37:     git_clone(&g_repo, \"https://self-signed.badssl.com/fake.git\", \"./fake\", NULL));",
          "38: }",
          "40: void test_online_badssl__old_cipher(void)",
          "41: {",
          "42:  if (!g_has_ssl)",
          "43:   cl_skip();",
          "45:  cl_git_fail(git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", NULL));",
          "46: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: static int cert_check_assert_invalid(git_cert *cert, int valid, const char* host, void *payload)",
          "14: {",
          "15:  GIT_UNUSED(cert); GIT_UNUSED(host); GIT_UNUSED(payload);",
          "17:  cl_assert_equal_i(0, valid);",
          "19:  return GIT_ECERTIFICATE;",
          "20: }",
          "24:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "25:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "33:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "34:     git_clone(&g_repo, \"https://expired.badssl.com/fake.git\", \"./fake\", &opts));",
          "39:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "40:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "47:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "48:     git_clone(&g_repo, \"https://wrong.host.badssl.com/fake.git\", \"./fake\", &opts));",
          "53:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "54:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "61:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "62:     git_clone(&g_repo, \"https://self-signed.badssl.com/fake.git\", \"./fake\", &opts));",
          "67:  git_clone_options opts = GIT_CLONE_OPTIONS_INIT;",
          "68:  opts.fetch_opts.callbacks.certificate_check = cert_check_assert_invalid;",
          "74:  cl_git_fail(git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", &opts));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3829ba2e710553893faf6336cc6b2f3fc17a293e",
      "candidate_info": {
        "commit_hash": "3829ba2e710553893faf6336cc6b2f3fc17a293e",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/3829ba2e710553893faf6336cc6b2f3fc17a293e",
        "files": [
          "tests/online/badssl.c"
        ],
        "message": "http: correct the expected error for RC4\n\nWe must make sure that we're getting a certificate error from the\nlibrary so we know that we're testing the right thing.",
        "before_after_code_files": [
          "tests/online/badssl.c||tests/online/badssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4076"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/online/badssl.c||tests/online/badssl.c": [
          "File: tests/online/badssl.c -> tests/online/badssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  if (!g_has_ssl)",
          "71:   cl_skip();",
          "75: }",
          "",
          "[Removed Lines]",
          "73:  cl_git_fail(git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", NULL));",
          "74:  cl_git_fail(git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", &opts));",
          "",
          "[Added Lines]",
          "73:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "74:     git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", NULL));",
          "75:  cl_git_fail_with(GIT_ECERTIFICATE,",
          "76:     git_clone(&g_repo, \"https://rc4.badssl.com/fake.git\", \"./fake\", &opts));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5cf255b471ad7113247d552d5695db0cb720882",
      "candidate_info": {
        "commit_hash": "a5cf255b471ad7113247d552d5695db0cb720882",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/a5cf255b471ad7113247d552d5695db0cb720882",
        "files": [
          "include/git2/version.h"
        ],
        "message": "Bump version to 0.25.1",
        "before_after_code_files": [
          "include/git2/version.h||include/git2/version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4076"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/git2/version.h||include/git2/version.h": [
          "File: include/git2/version.h -> include/git2/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #ifndef INCLUDE_git_version_h__",
          "8: #define INCLUDE_git_version_h__",
          "11: #define LIBGIT2_VER_MAJOR 0",
          "12: #define LIBGIT2_VER_MINOR 25",
          "14: #define LIBGIT2_VER_PATCH 0",
          "16: #define LIBGIT2_SOVERSION 25",
          "",
          "[Removed Lines]",
          "10: #define LIBGIT2_VERSION \"0.25.0\"",
          "13: #define LIBGIT2_VER_REVISION 0",
          "",
          "[Added Lines]",
          "10: #define LIBGIT2_VERSION \"0.25.1\"",
          "13: #define LIBGIT2_VER_REVISION 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fdef641fd0dd2828bd948234ae86de75221a11a",
      "candidate_info": {
        "commit_hash": "2fdef641fd0dd2828bd948234ae86de75221a11a",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/2fdef641fd0dd2828bd948234ae86de75221a11a",
        "files": [
          "src/transports/smart_pkt.c",
          "src/transports/smart_protocol.c"
        ],
        "message": "smart_pkt: treat empty packet lines as error\n\nThe Git protocol does not specify what should happen in the case\nof an empty packet line (that is a packet line \"0004\"). We\ncurrently indicate success, but do not return a packet in the\ncase where we hit an empty line. The smart protocol was not\nprepared to handle such packets in all cases, though, resulting\nin a `NULL` pointer dereference.\n\nFix the issue by returning an error instead. As such kind of\npackets is not even specified by upstream, this is the right\nthing to do.",
        "before_after_code_files": [
          "src/transports/smart_pkt.c||src/transports/smart_pkt.c",
          "src/transports/smart_protocol.c||src/transports/smart_protocol.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4076"
        ],
        "olp_code_files": {
          "patch": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ],
          "candidate": [
            "src/transports/smart_pkt.c||src/transports/smart_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "src/transports/smart_pkt.c||src/transports/smart_pkt.c": [
          "File: src/transports/smart_pkt.c -> src/transports/smart_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:  line += PKT_LEN_SIZE;",
          "443:  if (len == PKT_LEN_SIZE) {",
          "447:  }",
          "",
          "[Removed Lines]",
          "446:   return 0;",
          "",
          "[Added Lines]",
          "445:   giterr_set_str(GITERR_NET, \"Invalid empty packet\");",
          "446:   return GIT_ERROR;",
          "",
          "---------------"
        ],
        "src/transports/smart_protocol.c||src/transports/smart_protocol.c": [
          "File: src/transports/smart_protocol.c -> src/transports/smart_protocol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "763:   line_len -= (line_end - line);",
          "764:   line = line_end;",
          "774:   error = add_push_report_pkt(push, pkt);",
          "776:   git_pkt_free(pkt);",
          "",
          "[Removed Lines]",
          "771:   if (pkt == NULL)",
          "772:    continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "826:   error = 0;",
          "831:   switch (pkt->type) {",
          "832:    case GIT_PKT_DATA:",
          "",
          "[Removed Lines]",
          "828:   if (pkt == NULL)",
          "829:    continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a64e62f0f20c9cf9b2e1609f037060eb2d8eb22",
      "candidate_info": {
        "commit_hash": "9a64e62f0f20c9cf9b2e1609f037060eb2d8eb22",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/9a64e62f0f20c9cf9b2e1609f037060eb2d8eb22",
        "files": [
          "src/transports/http.c"
        ],
        "message": "http: check certificate validity before clobbering the error variable",
        "before_after_code_files": [
          "src/transports/http.c||src/transports/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/4076"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/transports/http.c||src/transports/http.c": [
          "File: src/transports/http.c -> src/transports/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:  if ((!error || error == GIT_ECERTIFICATE) && t->owner->certificate_check_cb != NULL &&",
          "625:      git_stream_is_encrypted(t->io)) {",
          "626:   git_cert *cert;",
          "629:   if ((error = git_stream_certificate(&cert, t->io)) < 0)",
          "630:    return error;",
          "632:   giterr_clear();",
          "634:   error = t->owner->certificate_check_cb(cert, is_valid, t->connection_data.host, t->owner->message_cb_payload);",
          "636:   if (error < 0) {",
          "",
          "[Removed Lines]",
          "627:   int is_valid;",
          "633:   is_valid = error != GIT_ECERTIFICATE;",
          "",
          "[Added Lines]",
          "627:   int is_valid = (error == GIT_OK);",
          "",
          "---------------"
        ]
      }
    }
  ]
}