{
  "cve_id": "CVE-2014-3538",
  "cve_desc": "file before 5.19 does not properly restrict the amount of data read during a regex search, which allows remote attackers to cause a denial of service (CPU consumption) via a crafted file that triggers backtracking during processing of an awk rule.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7345.",
  "repo": "file/file",
  "patch_hash": "74cafd7de9ec99a14f4480927580e501c8f852c3",
  "patch_info": {
    "commit_hash": "74cafd7de9ec99a14f4480927580e501c8f852c3",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/74cafd7de9ec99a14f4480927580e501c8f852c3",
    "files": [
      "src/softmagic.c"
    ],
    "message": "If requested, limit search length.",
    "before_after_code_files": [
      "src/softmagic.c||src/softmagic.c"
    ]
  },
  "patch_diff": {
    "src/softmagic.c||src/softmagic.c": [
      "File: src/softmagic.c -> src/softmagic.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"file.h\"",
      "34: #ifndef lint",
      "38: #include \"magic.h\"",
      "",
      "[Removed Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.187 2014/05/13 16:42:17 christos Exp $\")",
      "",
      "[Added Lines]",
      "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.188 2014/05/14 23:15:42 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1929:    file_regerror(&rx, rc, ms);",
      "1930:    v = (uint64_t)-1;",
      "1931:   } else {",
      "1932:    regmatch_t pmatch[1];",
      "1933: #ifndef REG_STARTEND",
      "1934: #define REG_STARTEND 0",
      "1938: #else",
      "1939:    pmatch[0].rm_so = 0;",
      "1941: #endif",
      "1942:    rc = file_regexec(&rx, (const char *)ms->search.s,",
      "1943:        1, pmatch, REG_STARTEND);",
      "",
      "[Removed Lines]",
      "1935:    size_t l = ms->search.s_len - 1;",
      "1936:    char c = ms->search.s[l];",
      "1937:    ((char *)(intptr_t)ms->search.s)[l] = '\\0';",
      "1940:    pmatch[0].rm_eo = ms->search.s_len;",
      "",
      "[Added Lines]",
      "1932: #ifndef REG_STARTEND",
      "1933:    char c;",
      "1934: #endif",
      "1936:    size_t slen = ms->search.s_len;",
      "1938:    if (m->str_range > 0)",
      "1939:     slen = MIN(slen, m->str_range);",
      "1942:    if (slen != 0)",
      "1943:     slen--;",
      "1944:    c = ms->search.s[slen];",
      "1945:    ((char *)(intptr_t)ms->search.s)[slen] = '\\0';",
      "1948:    pmatch[0].rm_eo = slen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "beb312b5bda6072dd9c609cd3cebd59212f93d2c",
      "candidate_info": {
        "commit_hash": "beb312b5bda6072dd9c609cd3cebd59212f93d2c",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/beb312b5bda6072dd9c609cd3cebd59212f93d2c",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/file.h",
          "src/fmtcheck.c",
          "src/softmagic.c"
        ],
        "message": "add fmtcheck",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/file.h||src/file.h",
          "src/fmtcheck.c||src/fmtcheck.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: fi])",
          "138: dnl Checks for functions",
          "141: dnl Provide implementation of some required functions if necessary",
          "144: dnl Checks for libraries",
          "145: AC_CHECK_LIB(z,gzopen)",
          "",
          "[Removed Lines]",
          "139: AC_CHECK_FUNCS(strerror strndup strtoul mkstemp mkostemp utimes utime wcwidth strtof fmtcheck)",
          "142: AC_REPLACE_FUNCS(getopt_long asprintf vasprintf strlcpy strlcat getline ctime_r asctime_r pread strcasestr)",
          "",
          "[Added Lines]",
          "139: AC_CHECK_FUNCS(strerror strndup strtoul mkstemp mkostemp utimes utime wcwidth strtof)",
          "142: AC_REPLACE_FUNCS(getopt_long asprintf vasprintf strlcpy strlcat getline ctime_r asctime_r pread strcasestr fmtcheck)",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "514: #ifndef HAVE_ASCTIME_R",
          "515: char   *asctime_r(const struct tm *, char *);",
          "516: #endif",
          "518: #if defined(HAVE_MMAP) && defined(HAVE_SYS_MMAN_H) && !defined(QUICK)",
          "519: #define QUICK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517: #ifndef HAVE_FMTCHECK",
          "518: const char *fmtcheck(const char *, const char *)",
          "519:      __attribute__((__format_arg__(2)));",
          "520: #endif",
          "",
          "---------------"
        ],
        "src/fmtcheck.c||src/fmtcheck.c": [
          "File: src/fmtcheck.c -> src/fmtcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"file.h\"",
          "33: #include <stdio.h>",
          "34: #include <string.h>",
          "35: #include <ctype.h>",
          "37: enum __e_fmtcheck_types {",
          "38:  FMTCHECK_START,",
          "39:  FMTCHECK_SHORT,",
          "40:  FMTCHECK_INT,",
          "41:  FMTCHECK_LONG,",
          "42:  FMTCHECK_QUAD,",
          "43:  FMTCHECK_SHORTPOINTER,",
          "44:  FMTCHECK_INTPOINTER,",
          "45:  FMTCHECK_LONGPOINTER,",
          "46:  FMTCHECK_QUADPOINTER,",
          "47:  FMTCHECK_DOUBLE,",
          "48:  FMTCHECK_LONGDOUBLE,",
          "49:  FMTCHECK_STRING,",
          "50:  FMTCHECK_WIDTH,",
          "51:  FMTCHECK_PRECISION,",
          "52:  FMTCHECK_DONE,",
          "53:  FMTCHECK_UNKNOWN",
          "54: };",
          "55: typedef enum __e_fmtcheck_types EFT;",
          "57: #define RETURN(pf,f,r) do { \\",
          "59:    return r; \\",
          "60:          } /*NOTREACHED*/ /*CONSTCOND*/ while (0)",
          "62: static EFT",
          "63: get_next_format_from_precision(const char **pf)",
          "64: {",
          "65:  int  sh, lg, quad, longdouble;",
          "66:  const char *f;",
          "68:  sh = lg = quad = longdouble = 0;",
          "70:  f = *pf;",
          "71:  switch (*f) {",
          "72:  case 'h':",
          "73:   f++;",
          "74:   sh = 1;",
          "75:   break;",
          "76:  case 'l':",
          "77:   f++;",
          "78:   if (!*f) RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "79:   if (*f == 'l') {",
          "80:    f++;",
          "81:    quad = 1;",
          "82:   } else {",
          "83:    lg = 1;",
          "84:   }",
          "85:   break;",
          "86:  case 'q':",
          "87:   f++;",
          "88:   quad = 1;",
          "89:   break;",
          "90:  case 'L':",
          "91:   f++;",
          "92:   longdouble = 1;",
          "93:   break;",
          "94:  default:",
          "95:   break;",
          "96:  }",
          "97:  if (!*f) RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "98:  if (strchr(\"diouxX\", *f)) {",
          "99:   if (longdouble)",
          "100:    RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "101:   if (lg)",
          "102:    RETURN(pf,f,FMTCHECK_LONG);",
          "103:   if (quad)",
          "104:    RETURN(pf,f,FMTCHECK_QUAD);",
          "105:   RETURN(pf,f,FMTCHECK_INT);",
          "106:  }",
          "107:  if (*f == 'n') {",
          "108:   if (longdouble)",
          "109:    RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "110:   if (sh)",
          "111:    RETURN(pf,f,FMTCHECK_SHORTPOINTER);",
          "112:   if (lg)",
          "113:    RETURN(pf,f,FMTCHECK_LONGPOINTER);",
          "114:   if (quad)",
          "115:    RETURN(pf,f,FMTCHECK_QUADPOINTER);",
          "116:   RETURN(pf,f,FMTCHECK_INTPOINTER);",
          "117:  }",
          "118:  if (strchr(\"DOU\", *f)) {",
          "119:   if (sh + lg + quad + longdouble)",
          "120:    RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "121:   RETURN(pf,f,FMTCHECK_LONG);",
          "122:  }",
          "123:  if (strchr(\"eEfg\", *f)) {",
          "124:   if (longdouble)",
          "125:    RETURN(pf,f,FMTCHECK_LONGDOUBLE);",
          "126:   if (sh + lg + quad)",
          "127:    RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "128:   RETURN(pf,f,FMTCHECK_DOUBLE);",
          "129:  }",
          "130:  if (*f == 'c') {",
          "131:   if (sh + lg + quad + longdouble)",
          "132:    RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "133:   RETURN(pf,f,FMTCHECK_INT);",
          "134:  }",
          "135:  if (*f == 's') {",
          "136:   if (sh + lg + quad + longdouble)",
          "137:    RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "138:   RETURN(pf,f,FMTCHECK_STRING);",
          "139:  }",
          "140:  if (*f == 'p') {",
          "141:   if (sh + lg + quad + longdouble)",
          "142:    RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "143:   RETURN(pf,f,FMTCHECK_LONG);",
          "144:  }",
          "145:  RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "147: }",
          "149: static EFT",
          "150: get_next_format_from_width(const char **pf)",
          "151: {",
          "152:  const char *f;",
          "154:  f = *pf;",
          "155:  if (*f == '.') {",
          "156:   f++;",
          "157:   if (*f == '*') {",
          "158:    RETURN(pf,f,FMTCHECK_PRECISION);",
          "159:   }",
          "161:   while (isdigit((unsigned char)*f)) f++;",
          "162:   if (!*f) RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "163:  }",
          "164:  RETURN(pf,f,get_next_format_from_precision(pf));",
          "166: }",
          "168: static EFT",
          "169: get_next_format(const char **pf, EFT eft)",
          "170: {",
          "171:  int  infmt;",
          "172:  const char *f;",
          "174:  if (eft == FMTCHECK_WIDTH) {",
          "175:   (*pf)++;",
          "176:   return get_next_format_from_width(pf);",
          "177:  } else if (eft == FMTCHECK_PRECISION) {",
          "178:   (*pf)++;",
          "179:   return get_next_format_from_precision(pf);",
          "180:  }",
          "182:  f = *pf;",
          "183:  infmt = 0;",
          "184:  while (!infmt) {",
          "185:   f = strchr(f, '%');",
          "186:   if (f == NULL)",
          "187:    RETURN(pf,f,FMTCHECK_DONE);",
          "188:   f++;",
          "189:   if (!*f)",
          "190:    RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "191:   if (*f != '%')",
          "192:    infmt = 1;",
          "193:   else",
          "194:    f++;",
          "195:  }",
          "198:  while (*f && (strchr(\"#0- +\", *f)))",
          "199:   f++;",
          "201:  if (*f == '*') {",
          "202:   RETURN(pf,f,FMTCHECK_WIDTH);",
          "203:  }",
          "205:  while (isdigit((unsigned char)*f)) f++;",
          "206:  if (!*f) {",
          "207:   RETURN(pf,f,FMTCHECK_UNKNOWN);",
          "208:  }",
          "210:  RETURN(pf,f,get_next_format_from_width(pf));",
          "212: }",
          "214: const char *",
          "215: fmtcheck(const char *f1, const char *f2)",
          "216: {",
          "217:  const char *f1p, *f2p;",
          "218:  EFT  f1t, f2t;",
          "220:  if (!f1) return f2;",
          "222:  f1p = f1;",
          "223:  f1t = FMTCHECK_START;",
          "224:  f2p = f2;",
          "225:  f2t = FMTCHECK_START;",
          "226:  while ((f1t = get_next_format(&f1p, f1t)) != FMTCHECK_DONE) {",
          "227:   if (f1t == FMTCHECK_UNKNOWN)",
          "228:    return f2;",
          "229:   f2t = get_next_format(&f2p, f2t);",
          "230:   if (f1t != f2t)",
          "231:    return f2;",
          "232:  }",
          "233:  return f1;",
          "234: }",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "41: #define F(a, b) fmtcheck((a), (b))",
          "45: #include <assert.h>",
          "46: #include <string.h>",
          "47: #include <ctype.h>",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.178 2014/03/04 17:42:19 christos Exp $\")",
          "39: #ifdef HAVE_FMTCHECK",
          "40: #include <stdio.h>",
          "42: #else",
          "43: #define F(a, b) (a)",
          "44: #endif",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.179 2014/03/06 15:23:16 christos Exp $\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64485737cf5e0251ab82d0a2d50e9903ab9ac588",
      "candidate_info": {
        "commit_hash": "64485737cf5e0251ab82d0a2d50e9903ab9ac588",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/64485737cf5e0251ab82d0a2d50e9903ab9ac588",
        "files": [
          "configure.ac",
          "src/file.c",
          "src/file.h",
          "src/funcs.c",
          "src/readcdf.c",
          "src/softmagic.c"
        ],
        "message": "don't use setlocale(3); it is not thread-safe.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/file.c||src/file.c",
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readcdf.c||src/readcdf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: fi])",
          "140: dnl Checks for functions",
          "143: dnl Provide implementation of some required functions if necessary",
          "144: AC_REPLACE_FUNCS(getopt_long asprintf vasprintf strlcpy strlcat getline ctime_r asctime_r pread strcasestr fmtcheck)",
          "",
          "[Removed Lines]",
          "141: AC_CHECK_FUNCS(strerror strndup strtoul mkstemp mkostemp utimes utime wcwidth strtof)",
          "",
          "[Added Lines]",
          "141: AC_CHECK_FUNCS(strerror strndup strtoul mkstemp mkostemp utimes utime wcwidth strtof newlocale uselocale freelocale)",
          "",
          "---------------"
        ],
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.152 2013/06/26 14:46:54 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.153 2014/02/11 15:41:04 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: #ifdef HAVE_UNISTD_H",
          "56: #endif",
          "60: #ifdef HAVE_WCHAR_H",
          "61: #include <wchar.h>",
          "62: #endif",
          "",
          "[Removed Lines]",
          "57: #ifdef HAVE_LOCALE_H",
          "58: #include <locale.h>",
          "59: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:     size_t);",
          "474: typedef struct {",
          "475:  const char *pat;",
          "477:  int rc;",
          "478:  regex_t rx;",
          "479: } file_regex_t;",
          "",
          "[Removed Lines]",
          "476:  char *old_lc_ctype;",
          "",
          "[Added Lines]",
          "474: #if defined(HAVE_LOCALE_H)",
          "475: #include <locale.h>",
          "476: #endif",
          "480: #if defined(HAVE_NEWLOCALE) && defined(HAVE_USELOCALE) && defined(HAVE_FREELOCALE)",
          "481: #define USE_C_LOCALE",
          "482:  locale_t old_lc_ctype;",
          "483:  locale_t c_lc_ctype;",
          "484: #endif",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.71 2014/05/05 20:53:10 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.72 2014/05/14 23:15:42 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: #if defined(HAVE_LIMITS_H)",
          "46: #include <limits.h>",
          "47: #endif",
          "52: #ifndef SIZE_MAX",
          "53: #define SIZE_MAX ((size_t)~0)",
          "",
          "[Removed Lines]",
          "48: #if defined(HAVE_LOCALE_H)",
          "49: #include <locale.h>",
          "50: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455: protected int",
          "456: file_regcomp(file_regex_t *rx, const char *pat, int flags)",
          "457: {",
          "461:  assert(rx->old_lc_ctype != NULL);",
          "462:  rx->pat = pat;",
          "465:  return rx->rc = regcomp(&rx->rx, pat, flags);",
          "466: }",
          "",
          "[Removed Lines]",
          "458:  rx->old_lc_ctype = setlocale(LC_CTYPE, NULL);",
          "459:  assert(rx->old_lc_ctype != NULL);",
          "460:  rx->old_lc_ctype = strdup(rx->old_lc_ctype);",
          "464:  (void)setlocale(LC_CTYPE, \"C\");",
          "",
          "[Added Lines]",
          "455: #ifdef USE_C_LOCALE",
          "456:  rx->c_lc_ctype = newlocale(LC_CTYPE_MASK, \"C\", 0);",
          "457:  assert(rx->c_lc_ctype != NULL);",
          "458:  rx->old_lc_ctype = uselocale(rx->c_lc_ctype);",
          "460: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "478: {",
          "479:  if (rx->rc == 0)",
          "480:   regfree(&rx->rx);",
          "483: }",
          "485: protected void",
          "",
          "[Removed Lines]",
          "481:  (void)setlocale(LC_CTYPE, rx->old_lc_ctype);",
          "482:  free(rx->old_lc_ctype);",
          "",
          "[Added Lines]",
          "479: #ifdef USE_C_LOCALE",
          "480:  (void)uselocale(rx->old_lc_ctype);",
          "481:  freelocale(rx->c_lc_ctype);",
          "482: #endif",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.46 2014/08/27 06:59:35 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.47 2014/08/27 13:00:37 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: #include <string.h>",
          "36: #include <time.h>",
          "37: #include <ctype.h>",
          "42: #include \"cdf.h\"",
          "43: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: #if defined(HAVE_LOCALE_H)",
          "39: #include <locale.h>",
          "40: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107: {",
          "108:  size_t i;",
          "109:  const char *rv = NULL;",
          "115:  assert(old_lc_ctype != NULL);",
          "117:  for (i = 0; nv[i].pattern != NULL; i++)",
          "118:   if (strcasestr(vbuf, nv[i].pattern) != NULL) {",
          "119:    rv = nv[i].mime;",
          "120:    break;",
          "121:   }",
          "124:  return rv;",
          "125: }",
          "",
          "[Removed Lines]",
          "110:  char *old_lc_ctype;",
          "112:  old_lc_ctype = setlocale(LC_CTYPE, NULL);",
          "113:  assert(old_lc_ctype != NULL);",
          "114:  old_lc_ctype = strdup(old_lc_ctype);",
          "116:  (void)setlocale(LC_CTYPE, \"C\");",
          "122:  (void)setlocale(LC_CTYPE, old_lc_ctype);",
          "123:  free(old_lc_ctype);",
          "",
          "[Added Lines]",
          "107: #ifdef USE_C_LOCALE",
          "108:  locale_t old_lc_ctype, c_lc_ctype;",
          "110:  c_lc_ctype = newlocale(LC_CTYPE_MASK, \"C\", 0);",
          "111:  assert(c_lc_ctype != NULL);",
          "112:  old_lc_ctype = uselocale(c_lc_ctype);",
          "114: #endif",
          "120: #ifdef USE_C_LOCALE",
          "121:  (void)uselocale(old_lc_ctype);",
          "122:  freelocale(c_lc_ctype);",
          "123: #endif",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.191 2014/06/04 17:36:34 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.192 2014/08/30 15:30:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: #include <ctype.h>",
          "42: #include <stdlib.h>",
          "43: #include <time.h>",
          "49: private int match(struct magic_set *, struct magic *, uint32_t,",
          "50:     const unsigned char *, size_t, size_t, int, int, int, int, int *, int *,",
          "",
          "[Removed Lines]",
          "44: #if defined(HAVE_LOCALE_H)",
          "45: #include <locale.h>",
          "46: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73547594b9e28ec5732463cbe0ccbaab5f2fbb3e",
      "candidate_info": {
        "commit_hash": "73547594b9e28ec5732463cbe0ccbaab5f2fbb3e",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/73547594b9e28ec5732463cbe0ccbaab5f2fbb3e",
        "files": [
          "src/softmagic.c"
        ],
        "message": "Don't abuse the const pointer we've been passed in, allocate memory instead. XXX: This is expensive.",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.192 2014/08/30 15:30:11 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.193 2014/09/10 18:41:51 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1940:  case FILE_REGEX: {",
          "1941:   int rc;",
          "1942:   file_regex_t rx;",
          "1944:   if (ms->search.s == NULL)",
          "1945:    return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1944:   const char *search;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1956:    size_t slen = ms->search.s_len;",
          "1957: #ifndef REG_STARTEND",
          "1958: #define REG_STARTEND 0",
          "1964: #else",
          "1965:    pmatch[0].rm_so = 0;",
          "1966:    pmatch[0].rm_eo = slen;",
          "1967: #endif",
          "1969:        1, pmatch, REG_STARTEND);",
          "1970: #if REG_STARTEND == 0",
          "1972: #endif",
          "1973:    switch (rc) {",
          "1974:    case 0:",
          "",
          "[Removed Lines]",
          "1959:    char c;",
          "1960:    if (slen != 0)",
          "1961:     slen--;",
          "1962:    c = ms->search.s[slen];",
          "1963:    ((char *)(intptr_t)ms->search.s)[slen] = '\\0';",
          "1968:    rc = file_regexec(&rx, (const char *)ms->search.s,",
          "1971:    ((char *)(intptr_t)ms->search.s)[l] = c;",
          "",
          "[Added Lines]",
          "1961:    char *copy;",
          "1962:    if (slen != 0) {",
          "1963:        copy = malloc(slen);",
          "1964:        if (copy == NULL)  {",
          "1965:     file_error(ms, errno,",
          "1966:         \"can't allocate %zu bytes\", slen);",
          "1967:     return -1;",
          "1968:        }",
          "1969:        memcpy(copy, ms->search.s, slen);",
          "1970:        copy[--slen] = '\\0';",
          "1971:        search = copy;",
          "1972:    } else {",
          "1973:        search = ms->search.s;",
          "1974:        copy = NULL;",
          "1975:    }",
          "1977:    search = ms->search.s;",
          "1981:    rc = file_regexec(&rx, (const char *)search,",
          "1984:    free(copy);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
      "candidate_info": {
        "commit_hash": "27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
        "files": [
          "src/softmagic.c"
        ],
        "message": "Correctly compute the truncated pascal string size (Francisco Alonso and Jan Kaluza at RedHat)",
        "before_after_code_files": [
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.189 2014/05/30 16:47:44 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.190 2014/06/03 19:01:34 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "940:   return 1;",
          "941:  }",
          "942:  case FILE_PSTRING: {",
          "944:   size_t len = file_pstring_get_length(m, ptr1);",
          "947:   while (len--)",
          "",
          "[Removed Lines]",
          "943:   char *ptr1 = p->s, *ptr2 = ptr1 + file_pstring_length_size(m);",
          "945:   if (len >= sizeof(p->s))",
          "946:    len = sizeof(p->s) - 1;",
          "",
          "[Added Lines]",
          "943:   size_t sz = file_pstring_length_size(m);",
          "944:   char *ptr1 = p->s, *ptr2 = ptr1 + sz;",
          "946:   if (len >= sizeof(p->s)) {",
          "953:    len = sizeof(p->s) - sz;",
          "954:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07bdb1e0d5f91d4efbe718024cbed7a067294446",
      "candidate_info": {
        "commit_hash": "07bdb1e0d5f91d4efbe718024cbed7a067294446",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/07bdb1e0d5f91d4efbe718024cbed7a067294446",
        "files": [
          "ChangeLog",
          "magic/Magdir/animation",
          "magic/Magdir/apple",
          "magic/Magdir/archive",
          "magic/Magdir/att3b",
          "magic/Magdir/audio",
          "magic/Magdir/bflt",
          "magic/Magdir/cafebabe",
          "magic/Magdir/clarion",
          "magic/Magdir/clipper",
          "magic/Magdir/compress",
          "magic/Magdir/database",
          "magic/Magdir/dump",
          "magic/Magdir/efi",
          "magic/Magdir/encore",
          "magic/Magdir/filesystems",
          "magic/Magdir/fonts",
          "magic/Magdir/games",
          "magic/Magdir/gimp",
          "magic/Magdir/gnome",
          "magic/Magdir/gpt",
          "magic/Magdir/hp",
          "magic/Magdir/ibm370",
          "magic/Magdir/images",
          "magic/Magdir/intel",
          "magic/Magdir/isz",
          "magic/Magdir/karma",
          "magic/Magdir/linux",
          "magic/Magdir/mach",
          "magic/Magdir/mips",
          "magic/Magdir/motorola",
          "magic/Magdir/msdos",
          "magic/Magdir/ncr",
          "magic/Magdir/nitpicker",
          "magic/Magdir/pdp",
          "magic/Magdir/riff",
          "magic/Magdir/sequent",
          "magic/Magdir/sgi",
          "magic/Magdir/sharc",
          "magic/Magdir/sql",
          "magic/Magdir/sun",
          "magic/Magdir/ti-8x",
          "magic/Magdir/uterus",
          "magic/Magdir/varied.out",
          "magic/Magdir/vax",
          "magic/Magdir/virtual",
          "magic/Magdir/vorbis",
          "magic/Magdir/windows",
          "magic/Magdir/xilinx",
          "magic/Magdir/xwindows",
          "magic/Magdir/zfs",
          "src/apprentice.c",
          "src/softmagic.c"
        ],
        "message": "Kill %h %hh and %l modifiers for bytes, shorts, and longs respectively. Use nothing, for all types except quads which need %ll",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/softmagic.c||src/softmagic.c"
          ],
          "candidate": [
            "src/softmagic.c||src/softmagic.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.204 2014/04/17 12:44:01 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.205 2014/04/28 14:09:07 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2133: private int",
          "2134: check_format_type(const char *ptr, int type)",
          "2135: {",
          "2137:  if (*ptr == '\\0') {",
          "2139:   return -1;",
          "2140:  }",
          "2143:  case FILE_FMT_QUAD:",
          "2144:   quad = 1;",
          "2146:  case FILE_FMT_NUM:",
          "2147:   if (*ptr == '-')",
          "2148:    ptr++;",
          "2149:   if (*ptr == '.')",
          "",
          "[Removed Lines]",
          "2136:  int quad = 0;",
          "2142:  switch (type) {",
          "",
          "[Added Lines]",
          "2136:  int quad = 0, h;",
          "2142:  switch (file_formats[type]) {",
          "2147:   if (quad == 0) {",
          "2148:    switch (type) {",
          "2149:    case FILE_BYTE:",
          "2150:     h = 2;",
          "2151:     break;",
          "2152:    case FILE_SHORT:",
          "2153:    case FILE_BESHORT:",
          "2154:    case FILE_LESHORT:",
          "2155:     h = 1;",
          "2156:     break;",
          "2157:    case FILE_LONG:",
          "2158:    case FILE_BELONG:",
          "2159:    case FILE_LELONG:",
          "2160:    case FILE_MELONG:",
          "2161:    case FILE_LEID3:",
          "2162:    case FILE_BEID3:",
          "2163:    case FILE_INDIRECT:",
          "2164:     h = 0;",
          "2165:     break;",
          "2166:    default:",
          "2167:     abort();",
          "2168:    }",
          "2169:   } else",
          "2170:    h = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2168:    case 'o':",
          "2169:    case 'x':",
          "2170:    case 'X':",
          "2172:    default:",
          "2173:     return -1;",
          "2174:    }",
          "2176:   case 'h':",
          "2177:    switch (*ptr++) {",
          "2178:    case 'h':",
          "2179:     switch (*ptr++) {",
          "2180:     case 'i':",
          "2181:     case 'd':",
          "",
          "[Removed Lines]",
          "2171:     return 0;",
          "",
          "[Added Lines]",
          "2197:     return h != 0 ? -1 : 0;",
          "2207:    if (h-- <= 0)",
          "2208:     return -1;",
          "2211:     if (h-- <= 0)",
          "2212:      return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2193:    case 'o':",
          "2194:    case 'x':",
          "2195:    case 'X':",
          "2197:    default:",
          "2198:     return -1;",
          "2199:    }",
          "2201:   case 'c':",
          "2202:   case 'i':",
          "2203:   case 'd':",
          "2204:   case 'u':",
          "2205:   case 'o':",
          "2206:   case 'x':",
          "2207:   case 'X':",
          "2208:    return 0;",
          "2210:   default:",
          "2211:    return -1;",
          "2212:   }",
          "",
          "[Removed Lines]",
          "2196:     return 0;",
          "",
          "[Added Lines]",
          "2230:     return h != 0 ? -1 : 0;",
          "2234: #endif",
          "2236:    return h != 2 ? -1 : 0;",
          "2243: #ifdef STRICT_FORMAT",
          "2244:    return h != 0 ? -1 : 0;",
          "2245: #else",
          "2247: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2293:  }",
          "2295:  ptr++;",
          "",
          "[Removed Lines]",
          "2296:  if (check_format_type(ptr, file_formats[m->type]) == -1) {",
          "",
          "[Added Lines]",
          "2334:  if (check_format_type(ptr, m->type) == -1) {",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.183 2014/04/01 15:44:26 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.184 2014/04/12 15:47:10 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:   case -1:",
          "428:    return -1;",
          "429:   case 1:",
          "431:        (unsigned char)v);",
          "432:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "433:     return -1;",
          "434:    break;",
          "435:   default:",
          "437:        (unsigned char) v) == -1)",
          "438:     return -1;",
          "439:    break;",
          "",
          "[Removed Lines]",
          "430:    (void)snprintf(buf, sizeof(buf), \"%c\",",
          "436:    if (file_printf(ms, F(ms, m, \"%c\"),",
          "",
          "[Added Lines]",
          "430:    (void)snprintf(buf, sizeof(buf), \"%d\",",
          "436:    if (file_printf(ms, F(ms, m, \"%d\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:   case -1:",
          "450:    return -1;",
          "451:   case 1:",
          "453:        (unsigned short)v);",
          "454:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "455:     return -1;",
          "456:    break;",
          "457:   default:",
          "459:        (unsigned short) v) == -1)",
          "460:     return -1;",
          "461:    break;",
          "",
          "[Removed Lines]",
          "452:    (void)snprintf(buf, sizeof(buf), \"%hu\",",
          "458:    if (file_printf(ms, F(ms, m, \"%hu\"),",
          "",
          "[Added Lines]",
          "452:    (void)snprintf(buf, sizeof(buf), \"%u\",",
          "458:    if (file_printf(ms, F(ms, m, \"%u\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:   case -1:",
          "473:    return -1;",
          "474:   case 1:",
          "477:    if (file_printf(ms, F(ms, m, \"%s\"), buf) == -1)",
          "478:     return -1;",
          "479:    break;",
          "480:   default:",
          "483:     return -1;",
          "484:    break;",
          "485:   }",
          "",
          "[Removed Lines]",
          "475:    (void)snprintf(buf, sizeof(buf), \"%lu\",",
          "476:        (unsigned long)(uint32_t) v);",
          "481:    if (file_printf(ms, F(ms, m, \"%lu\"),",
          "482:        (unsigned long)(uint32_t) v) == -1)",
          "",
          "[Added Lines]",
          "475:    (void)snprintf(buf, sizeof(buf), \"%u\", (uint32_t) v);",
          "480:    if (file_printf(ms, F(ms, m, \"%u\"), (uint32_t) v) == -1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}