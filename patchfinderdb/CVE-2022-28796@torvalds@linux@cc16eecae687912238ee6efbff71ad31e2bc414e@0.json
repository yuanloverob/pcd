{
  "cve_id": "CVE-2022-28796",
  "cve_desc": "jbd2_journal_wait_updates in fs/jbd2/transaction.c in the Linux kernel before 5.17.1 has a use-after-free caused by a transaction_t race condition.",
  "repo": "torvalds/linux",
  "patch_hash": "cc16eecae687912238ee6efbff71ad31e2bc414e",
  "patch_info": {
    "commit_hash": "cc16eecae687912238ee6efbff71ad31e2bc414e",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/cc16eecae687912238ee6efbff71ad31e2bc414e",
    "files": [
      "fs/jbd2/transaction.c"
    ],
    "message": "jbd2: fix use-after-free of transaction_t race\n\njbd2_journal_wait_updates() is called with j_state_lock held. But if\nthere is a commit in progress, then this transaction might get committed\nand freed via jbd2_journal_commit_transaction() ->\njbd2_journal_free_transaction(), when we release j_state_lock.\nSo check for journal->j_running_transaction everytime we release and\nacquire j_state_lock to avoid use-after-free issue.\n\nLink: https://lore.kernel.org/r/948c2fed518ae739db6a8f7f83f1d58b504f87d0.1644497105.git.ritesh.list@gmail.com\nFixes: 4f98186848707f53 (\"jbd2: refactor wait logic for transaction updates into a common function\")\nCc: stable@kernel.org\nReported-and-tested-by: syzbot+afa2ca5171d93e44b348@syzkaller.appspotmail.com\nReviewed-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Ritesh Harjani <riteshh@linux.ibm.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
    "before_after_code_files": [
      "fs/jbd2/transaction.c||fs/jbd2/transaction.c"
    ]
  },
  "patch_diff": {
    "fs/jbd2/transaction.c||fs/jbd2/transaction.c": [
      "File: fs/jbd2/transaction.c -> fs/jbd2/transaction.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "843: void jbd2_journal_wait_updates(journal_t *journal)",
      "844: {",
      "854:   prepare_to_wait(&journal->j_wait_updates, &wait,",
      "862:   }",
      "863:   finish_wait(&journal->j_wait_updates, &wait);",
      "864:  }",
      "866: }",
      "",
      "[Removed Lines]",
      "845:  transaction_t *commit_transaction = journal->j_running_transaction;",
      "847:  if (!commit_transaction)",
      "848:   return;",
      "850:  spin_lock(&commit_transaction->t_handle_lock);",
      "851:  while (atomic_read(&commit_transaction->t_updates)) {",
      "852:   DEFINE_WAIT(wait);",
      "855:      TASK_UNINTERRUPTIBLE);",
      "856:   if (atomic_read(&commit_transaction->t_updates)) {",
      "857:    spin_unlock(&commit_transaction->t_handle_lock);",
      "858:    write_unlock(&journal->j_state_lock);",
      "859:    schedule();",
      "860:    write_lock(&journal->j_state_lock);",
      "861:    spin_lock(&commit_transaction->t_handle_lock);",
      "865:  spin_unlock(&commit_transaction->t_handle_lock);",
      "",
      "[Added Lines]",
      "845:  DEFINE_WAIT(wait);",
      "847:  while (1) {",
      "858:   transaction_t *transaction = journal->j_running_transaction;",
      "860:   if (!transaction)",
      "861:    break;",
      "863:   spin_lock(&transaction->t_handle_lock);",
      "865:     TASK_UNINTERRUPTIBLE);",
      "866:   if (!atomic_read(&transaction->t_updates)) {",
      "867:    spin_unlock(&transaction->t_handle_lock);",
      "868:    finish_wait(&journal->j_wait_updates, &wait);",
      "869:    break;",
      "871:   spin_unlock(&transaction->t_handle_lock);",
      "872:   write_unlock(&journal->j_state_lock);",
      "873:   schedule();",
      "875:   write_lock(&journal->j_state_lock);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "878: void jbd2_journal_lock_updates(journal_t *journal)",
      "879: {",
      "882:  jbd2_might_wait_for_commit(journal);",
      "884:  write_lock(&journal->j_state_lock);",
      "",
      "[Removed Lines]",
      "880:  DEFINE_WAIT(wait);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f98186848707f530669238d90e0562d92a78aab",
      "candidate_info": {
        "commit_hash": "4f98186848707f530669238d90e0562d92a78aab",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4f98186848707f530669238d90e0562d92a78aab",
        "files": [
          "fs/jbd2/commit.c",
          "fs/jbd2/transaction.c",
          "include/linux/jbd2.h"
        ],
        "message": "jbd2: refactor wait logic for transaction updates into a common function\n\nNo functionality change as such in this patch. This only refactors the\ncommon piece of code which waits for t_updates to finish into a common\nfunction named as jbd2_journal_wait_updates(journal_t *)\n\nSigned-off-by: Ritesh Harjani <riteshh@linux.ibm.com>\nReviewed-by: Jan Kara <jack@suse.cz>\nLink: https://lore.kernel.org/r/8c564f70f4b2591171677a2a74fccb22a7b6c3a4.1642416995.git.riteshh@linux.ibm.com\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
        "before_after_code_files": [
          "fs/jbd2/commit.c||fs/jbd2/commit.c",
          "fs/jbd2/transaction.c||fs/jbd2/transaction.c",
          "include/linux/jbd2.h||include/linux/jbd2.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/jbd2/transaction.c||fs/jbd2/transaction.c"
          ],
          "candidate": [
            "fs/jbd2/transaction.c||fs/jbd2/transaction.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/jbd2/commit.c||fs/jbd2/commit.c": [
          "File: fs/jbd2/commit.c -> fs/jbd2/commit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:  stats.run.rs_running = jbd2_time_diff(commit_transaction->t_start,",
          "485:            stats.run.rs_locked);",
          "503:  commit_transaction->t_state = T_SWITCH;",
          "504:  write_unlock(&journal->j_state_lock);",
          "",
          "[Removed Lines]",
          "487:  spin_lock(&commit_transaction->t_handle_lock);",
          "488:  while (atomic_read(&commit_transaction->t_updates)) {",
          "489:   DEFINE_WAIT(wait);",
          "491:   prepare_to_wait(&journal->j_wait_updates, &wait,",
          "492:      TASK_UNINTERRUPTIBLE);",
          "493:   if (atomic_read(&commit_transaction->t_updates)) {",
          "494:    spin_unlock(&commit_transaction->t_handle_lock);",
          "495:    write_unlock(&journal->j_state_lock);",
          "496:    schedule();",
          "497:    write_lock(&journal->j_state_lock);",
          "498:    spin_lock(&commit_transaction->t_handle_lock);",
          "499:   }",
          "500:   finish_wait(&journal->j_wait_updates, &wait);",
          "501:  }",
          "502:  spin_unlock(&commit_transaction->t_handle_lock);",
          "",
          "[Added Lines]",
          "488:  jbd2_journal_wait_updates(journal);",
          "",
          "---------------"
        ],
        "fs/jbd2/transaction.c||fs/jbd2/transaction.c": [
          "File: fs/jbd2/transaction.c -> fs/jbd2/transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "836: }",
          "837: EXPORT_SYMBOL(jbd2_journal_restart);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "843: void jbd2_journal_wait_updates(journal_t *journal)",
          "844: {",
          "845:  transaction_t *commit_transaction = journal->j_running_transaction;",
          "847:  if (!commit_transaction)",
          "848:   return;",
          "850:  spin_lock(&commit_transaction->t_handle_lock);",
          "851:  while (atomic_read(&commit_transaction->t_updates)) {",
          "852:   DEFINE_WAIT(wait);",
          "854:   prepare_to_wait(&journal->j_wait_updates, &wait,",
          "855:      TASK_UNINTERRUPTIBLE);",
          "856:   if (atomic_read(&commit_transaction->t_updates)) {",
          "857:    spin_unlock(&commit_transaction->t_handle_lock);",
          "858:    write_unlock(&journal->j_state_lock);",
          "859:    schedule();",
          "860:    write_lock(&journal->j_state_lock);",
          "861:    spin_lock(&commit_transaction->t_handle_lock);",
          "862:   }",
          "863:   finish_wait(&journal->j_wait_updates, &wait);",
          "864:  }",
          "865:  spin_unlock(&commit_transaction->t_handle_lock);",
          "866: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "863:   write_lock(&journal->j_state_lock);",
          "864:  }",
          "887:  write_unlock(&journal->j_state_lock);",
          "",
          "[Removed Lines]",
          "867:  while (1) {",
          "868:   transaction_t *transaction = journal->j_running_transaction;",
          "870:   if (!transaction)",
          "871:    break;",
          "873:   spin_lock(&transaction->t_handle_lock);",
          "874:   prepare_to_wait(&journal->j_wait_updates, &wait,",
          "875:     TASK_UNINTERRUPTIBLE);",
          "876:   if (!atomic_read(&transaction->t_updates)) {",
          "877:    spin_unlock(&transaction->t_handle_lock);",
          "878:    finish_wait(&journal->j_wait_updates, &wait);",
          "879:    break;",
          "880:   }",
          "881:   spin_unlock(&transaction->t_handle_lock);",
          "882:   write_unlock(&journal->j_state_lock);",
          "883:   schedule();",
          "884:   finish_wait(&journal->j_wait_updates, &wait);",
          "885:   write_lock(&journal->j_state_lock);",
          "886:  }",
          "",
          "[Added Lines]",
          "896:  jbd2_journal_wait_updates(journal);",
          "",
          "---------------"
        ],
        "include/linux/jbd2.h||include/linux/jbd2.h": [
          "File: include/linux/jbd2.h -> include/linux/jbd2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538: extern void  jbd2_journal_lock_updates (journal_t *);",
          "1539: extern void  jbd2_journal_unlock_updates (journal_t *);",
          "1541: extern journal_t * jbd2_journal_init_dev(struct block_device *bdev,",
          "1542:     struct block_device *fs_dev,",
          "1543:     unsigned long long start, int len, int bsize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541: void jbd2_journal_wait_updates(journal_t *);",
          "",
          "---------------"
        ]
      }
    }
  ]
}