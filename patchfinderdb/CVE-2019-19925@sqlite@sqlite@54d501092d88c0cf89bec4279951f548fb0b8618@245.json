{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e72d1a8682ba69f163ed022178a286e69406ef40",
      "candidate_info": {
        "commit_hash": "e72d1a8682ba69f163ed022178a286e69406ef40",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e72d1a8682ba69f163ed022178a286e69406ef40",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Fix a harmless use-of-initialized-value fault in the assert() logic added by check-in [d612fb7873cf59d]\n\nFossilOrigin-Name: 3dac90728a6a1962da478afe751582ddf8b6d4666548a805564817b21e07a246",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dff823ca8b5ca4a5611407b0231f89b2e8c981f50e85e361e76d3e4973cea8ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   if( p->flags & MEM_Term ){",
          "151:       assert( p->enc==SQLITE_UTF8 || p->szMalloc >= ((p->n+1)&~1)+2 );",
          "152:       assert( p->enc!=SQLITE_UTF8 || p->szMalloc >= p->n+1 );",
          "153:     }",
          "",
          "[Removed Lines]",
          "150:     if( p->z==p->zMalloc && p->szMalloc>0 ){",
          "",
          "[Added Lines]",
          "150:     if( p->szMalloc>0 && p->z==p->zMalloc ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8117f113bc0468d4c955ffa3f04cea26a39a3bd3",
      "candidate_info": {
        "commit_hash": "8117f113bc0468d4c955ffa3f04cea26a39a3bd3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8117f113bc0468d4c955ffa3f04cea26a39a3bd3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/walker.c"
        ],
        "message": "Minor performance improvement in sqlite3ExprDeleteNN().\n\nFossilOrigin-Name: bcc8b38ac75b731a4cd2873ab83f423be036467a511b617c779869de9bbb5383",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/walker.c||src/walker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7a1e30a17f57ca006dd84b6f97b0c7811bf4c6da4b02903452ffc4bc363cab9b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1040:     assert( p->x.pList==0 || p->pRight==0 );",
          "1041:     if( p->pLeft && p->op!=TK_SELECT_COLUMN ) sqlite3ExprDeleteNN(db, p->pLeft);",
          "1042:     if( p->pRight ){",
          "1043:       sqlite3ExprDeleteNN(db, p->pRight);",
          "1044:     }else if( ExprHasProperty(p, EP_xIsSelect) ){",
          "1045:       sqlite3SelectDelete(db, p->x.pSelect);",
          "1046:     }else{",
          "1047:       sqlite3ExprListDelete(db, p->x.pList);",
          "1049: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1057: #endif",
          "1058:   }",
          "1059:   if( ExprHasProperty(p, EP_MemToken) ) sqlite3DbFree(db, p->u.zToken);",
          "1060:   if( !ExprHasProperty(p, EP_Static) ){",
          "",
          "[Removed Lines]",
          "1048:     }",
          "1050:     if( ExprHasProperty(p, EP_WinFunc) ){",
          "1051:       assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1052:       sqlite3WindowDelete(db, p->y.pWin);",
          "1053:     }else if( ExprHasProperty(p, EP_Filter) ){",
          "1054:       assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1055:       sqlite3ExprDelete(db, p->y.pFilter);",
          "1056:     }",
          "",
          "[Added Lines]",
          "1043:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1046:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1051:       if( ExprHasProperty(p, (EP_WinFunc|EP_Filter)) ){",
          "1052:         if( ExprHasProperty(p, EP_WinFunc) ){",
          "1053:           assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1054:           sqlite3WindowDelete(db, p->y.pWin);",
          "1055:         }else{",
          "1056:           assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1057:           sqlite3ExprDeleteNN(db, p->y.pFilter);",
          "1058:         }",
          "1059:       }",
          "1061:     }",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "827:       if( 0==IN_RENAME_OBJECT ){",
          "828: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "830:         assert( is_agg==0 || (pDef->funcFlags & SQLITE_FUNC_MINMAX)",
          "831:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "832:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "833:         );",
          "835:           sqlite3ErrorMsg(pParse,",
          "836:               \"%.*s() may not be used as a window function\", nId, zId",
          "837:           );",
          "838:           pNC->nErr++;",
          "839:         }else if(",
          "840:               (is_agg && (pNC->ncFlags & NC_AllowAgg)==0)",
          "843:         ){",
          "844:           const char *zType;",
          "846:             zType = \"window\";",
          "847:           }else{",
          "848:             zType = \"aggregate\";",
          "",
          "[Removed Lines]",
          "829:         int is_win = ExprHasProperty(pExpr, EP_WinFunc);",
          "834:         if( pDef && pDef->xValue==0 && is_win ){",
          "841:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !is_win)",
          "842:            || (is_agg && is_win && (pNC->ncFlags & NC_AllowWin)==0)",
          "845:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || is_win ){",
          "",
          "[Added Lines]",
          "829:         Window *pWin = (ExprHasProperty(pExpr, EP_WinFunc) ? pExpr->y.pWin : 0);",
          "834:         if( pDef && pDef->xValue==0 && pWin ){",
          "841:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pWin)",
          "842:            || (is_agg && pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "845:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pWin ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "883: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "885: #else",
          "886:           pNC->ncFlags &= ~NC_AllowAgg;",
          "887: #endif",
          "",
          "[Removed Lines]",
          "884:           pNC->ncFlags &= ~(NC_AllowWin | (!is_win ? NC_AllowAgg : 0));",
          "",
          "[Added Lines]",
          "884:           pNC->ncFlags &= ~(NC_AllowWin | (!pWin ? NC_AllowAgg : 0));",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "64:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "65:       if( pExpr->pRight ){",
          "66:         pExpr = pExpr->pRight;",
          "67:         continue;",
          "68:       }else if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "69:         if( sqlite3WalkSelect(pWalker, pExpr->x.pSelect) ) return WRC_Abort;",
          "73: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "80: #endif",
          "81:     }",
          "82:     break;",
          "83:   }",
          "",
          "[Removed Lines]",
          "70:       }else if( pExpr->x.pList ){",
          "71:         if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "72:       }",
          "74:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "76:       }",
          "77:       if( ExprHasProperty(pExpr, EP_Filter) ){",
          "78:         if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "79:       }",
          "",
          "[Added Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "72:       }else{",
          "73:         if( pExpr->x.pList ){",
          "74:           if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "75:         }",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) ){",
          "78:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "79:             if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "80:           }else if( ExprHasProperty(pExpr, EP_Filter) ){",
          "81:             if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "82:           }",
          "83:         }",
          "85:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
      "candidate_info": {
        "commit_hash": "dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/wherecode.c"
        ],
        "message": "Strive to prevent harmless compiler warnings in GCC 4.8.5.\n\nFossilOrigin-Name: 8b6691f619ed9a56f6aecbd878ebb447c40984f8767508b248494fd9ec68fbaa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 82062351a62f4ccc438a2b47a22ee581bd030dec952fecd610f360a25002a5ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7989:       while( i==cntOldNext ){",
          "7990:         iOld++;",
          "7991:         assert( iOld<nNew || iOld<nOld );",
          "7992:         pOld = iOld<nNew ? apNew[iOld] : apOld[iOld];",
          "7993:         cntOldNext += pOld->nCell + pOld->nOverflow + !leafData;",
          "7994:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7992:         assert( iOld>=0 && iOld<NB );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:     sqlite3VdbeGoto(v, pLevel->addrBrk);",
          "2116:     sqlite3VdbeResolveLabel(v, iLoopBody);",
          "2119:     if( !untestedTerms ) disableTerm(pLevel, pTerm);",
          "2120:   }else",
          "",
          "[Removed Lines]",
          "2118:     if( pWInfo->nLevel>1 ) sqlite3StackFree(db, pOrTab);",
          "",
          "[Added Lines]",
          "2118:     if( pWInfo->nLevel>1 ){ sqlite3StackFree(db, pOrTab); }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e5f7fef333219411606e0b78b2fcaf7f0975266",
      "candidate_info": {
        "commit_hash": "3e5f7fef333219411606e0b78b2fcaf7f0975266",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e5f7fef333219411606e0b78b2fcaf7f0975266",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Modify the parse.sql output file from Lemon so that the RULE table contains a column with the complete text of the rule.\n\nFossilOrigin-Name: 329cbb372d4d77f774f01a87d104c40ef42d713afbe76195b65f5ca205c5ea7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 062e00c4d7e30155299339eaefe6cbe01953894baebf0af6d7ab3295b7436eb7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4222:     fprintf(sql,",
          "4223:       \"CREATE TABLE rule(\\n\"",
          "4224:       \"  ruleid INTEGER PRIMARY KEY,\\n\"",
          "4226:       \");\\n\"",
          "4227:       \"CREATE TABLE rulerhs(\\n\"",
          "4228:       \"  ruleid INTEGER REFERENCES rule(ruleid),\\n\"",
          "",
          "[Removed Lines]",
          "4225:       \"  lhs INTEGER REFERENCES symbol(id)\\n\"",
          "",
          "[Added Lines]",
          "4225:       \"  lhs INTEGER REFERENCES symbol(id),\\n\"",
          "4226:       \"  txt TEXT\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4232:     );",
          "4233:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4234:       assert( i==rp->iRule );",
          "4238:       fprintf(sql,",
          "4240:         rp->iRule, rp->lhs->index",
          "4241:       );",
          "4242:       for(j=0; j<rp->nrhs; j++){",
          "4243:         struct symbol *sp = rp->rhs[j];",
          "4244:         if( sp->type!=MULTITERMINAL ){",
          "",
          "[Removed Lines]",
          "4235:       fprintf(sql, \"-- \");",
          "4236:       writeRuleText(sql, rp);",
          "4237:       fprintf(sql, \"\\n\");",
          "4239:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d);\\n\",",
          "",
          "[Added Lines]",
          "4237:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d,'\",",
          "4240:       writeRuleText(sql, rp);",
          "4241:       fprintf(sql,\"');\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6adba9031cccae84f0fa60193f04ed044336a32f",
      "candidate_info": {
        "commit_hash": "6adba9031cccae84f0fa60193f04ed044336a32f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6adba9031cccae84f0fa60193f04ed044336a32f",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/omittest.tcl"
        ],
        "message": "Update the list of OMIT options in the omittest.tcl script.\n\nFossilOrigin-Name: f294cfc173c5653ef161dbff63b7838dbccdcad797f5163c49b3173f9f35ab0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/omittest.tcl||tool/omittest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 09435b5700a2650816ad9ffa628be5fa19da62369c30329801feb5e840463c7e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/omittest.tcl||tool/omittest.tcl": [
          "File: tool/omittest.tcl -> tool/omittest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:     SQLITE_OMIT_BETWEEN_OPTIMIZATION \\",
          "193:     SQLITE_OMIT_BLOB_LITERAL \\",
          "194:     SQLITE_OMIT_BTREECOUNT \\",
          "196:     SQLITE_OMIT_CAST \\",
          "197:     SQLITE_OMIT_CHECK \\",
          "198:     SQLITE_OMIT_COMPILEOPTION_DIAGS \\",
          "199:     SQLITE_OMIT_COMPLETE \\",
          "200:     SQLITE_OMIT_COMPOUND_SELECT \\",
          "201:     SQLITE_OMIT_CTE \\",
          "202:     SQLITE_OMIT_DATETIME_FUNCS \\",
          "203:     SQLITE_OMIT_DECLTYPE \\",
          "204:     SQLITE_OMIT_DEPRECATED \\",
          "205:     SQLITE_OMIT_EXPLAIN \\",
          "206:     SQLITE_OMIT_FLAG_PRAGMAS \\",
          "207:     SQLITE_OMIT_FLOATING_POINT \\",
          "208:     SQLITE_OMIT_FOREIGN_KEY \\",
          "209:     SQLITE_OMIT_GET_TABLE \\",
          "210:     SQLITE_OMIT_INCRBLOB \\",
          "211:     SQLITE_OMIT_INTEGRITY_CHECK \\",
          "212:     SQLITE_OMIT_LIKE_OPTIMIZATION \\",
          "",
          "[Removed Lines]",
          "195:     SQLITE_OMIT_BUILTIN_TEST \\",
          "",
          "[Added Lines]",
          "200:     SQLITE_OMIT_CONFLICT_CLAUSE \\",
          "205:     SQLITE_OMIT_DISKIO \\",
          "211:     SQLITE_OMIT_HEX_INTEGER \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:     SQLITE_OMIT_LOCALTIME \\",
          "215:     SQLITE_OMIT_LOOKASIDE \\",
          "216:     SQLITE_OMIT_MEMORYDB \\",
          "217:     SQLITE_OMIT_OR_OPTIMIZATION \\",
          "218:     SQLITE_OMIT_PAGER_PRAGMAS \\",
          "219:     SQLITE_OMIT_PRAGMA \\",
          "220:     SQLITE_OMIT_PROGRESS_CALLBACK \\",
          "221:     SQLITE_OMIT_QUICKBALANCE \\",
          "222:     SQLITE_OMIT_REINDEX \\",
          "223:     SQLITE_OMIT_SCHEMA_PRAGMAS \\",
          "224:     SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS \\",
          "225:     SQLITE_OMIT_SHARED_CACHE \\",
          "226:     SQLITE_OMIT_SUBQUERY \\",
          "227:     SQLITE_OMIT_TCL_VARIABLE \\",
          "228:     SQLITE_OMIT_TEMPDB \\",
          "229:     SQLITE_OMIT_TRACE \\",
          "230:     SQLITE_OMIT_TRIGGER \\",
          "231:     SQLITE_OMIT_TRUNCATE_OPTIMIZATION \\",
          "233:     SQLITE_OMIT_UTF16 \\",
          "234:     SQLITE_OMIT_VACUUM \\",
          "235:     SQLITE_OMIT_VIEW \\",
          "236:     SQLITE_OMIT_VIRTUALTABLE \\",
          "237:     SQLITE_OMIT_WAL \\",
          "238:     SQLITE_OMIT_WSD \\",
          "239:     SQLITE_OMIT_XFER_OPT \\",
          "240:   ]",
          "",
          "[Removed Lines]",
          "232:     SQLITE_OMIT_UNIQUE_ENFORCEMENT \\",
          "",
          "[Added Lines]",
          "219:     SQLITE_OMIT_MEMORY_ALLOCATION \\",
          "222:     SQLITE_OMIT_PARSER_TRACE \\",
          "223:     SQLITE_OMIT_POPEN \\",
          "227:     SQLITE_OMIT_RANDOMNESS \\",
          "232:     SQLITE_OMIT_SHUTDOWN_DIRECTORIES \\",
          "236:     SQLITE_OMIT_TEST_CONTROL \\",
          "240:     SQLITE_OMIT_UPSERT \\",
          "246:     SQLITE_OMIT_WINDOWFUNC \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}