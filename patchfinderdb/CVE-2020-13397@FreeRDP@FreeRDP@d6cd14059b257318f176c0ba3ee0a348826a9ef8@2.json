{
  "cve_id": "CVE-2020-13397",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in security_fips_decrypt in libfreerdp/core/security.c due to an uninitialized value.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
  "patch_info": {
    "commit_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "files": [
      "libfreerdp/core/security.c"
    ],
    "message": "Fixed GHSL-2020-101 missing NULL check\n\n(cherry picked from commit b207dbba35c505bbc3ad5aadc10b34980c6b7e8e)",
    "before_after_code_files": [
      "libfreerdp/core/security.c||libfreerdp/core/security.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/security.c||libfreerdp/core/security.c": [
      "File: libfreerdp/core/security.c -> libfreerdp/core/security.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "816: {",
      "817:  size_t olen;",
      "819:  if (!winpr_Cipher_Update(rdp->fips_decrypt, data, length, data, &olen))",
      "820:   return FALSE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "819:  if (!rdp || !rdp->fips_decrypt)",
      "820:   return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "11c6ed0fb7446914c961f195b7dcf6256bf91098",
      "candidate_info": {
        "commit_hash": "11c6ed0fb7446914c961f195b7dcf6256bf91098",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/11c6ed0fb7446914c961f195b7dcf6256bf91098",
        "files": [
          "libfreerdp/codec/ncrush.c"
        ],
        "message": "Fixed undefined behaviour in ncrush\n\n(cherry picked from commit 83137d2a1bb732fbea2f20778924a50a79f63fef)",
        "before_after_code_files": [
          "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c": [
          "File: libfreerdp/codec/ncrush.c -> libfreerdp/codec/ncrush.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1926: static INLINE UINT32 get_dword(const BYTE* data)",
          "1927: {",
          "1928:  UINT32 tmp = *data++;",
          "1932:  return tmp;",
          "1933: }",
          "",
          "[Removed Lines]",
          "1929:  tmp |= *data++ << 8U;",
          "1930:  tmp |= *data++ << 16U;",
          "1931:  tmp |= *data++ << 24U;",
          "",
          "[Added Lines]",
          "1929:  tmp |= (UINT32)*data++ << 8U;",
          "1930:  tmp |= (UINT32)*data++ << 16U;",
          "1931:  tmp |= (UINT32)*data++ << 24U;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a1167f7e3411dcec56a71cb54cdc16b6a93fee2",
      "candidate_info": {
        "commit_hash": "5a1167f7e3411dcec56a71cb54cdc16b6a93fee2",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5a1167f7e3411dcec56a71cb54cdc16b6a93fee2",
        "files": [
          "channels/urbdrc/client/urbdrc_main.c"
        ],
        "message": "Fixed #6197: NULL check in urbdrc\n\n(cherry picked from commit fb3a0e6b5ae3b4e6523509a0ec0c522425968989)",
        "before_after_code_files": [
          "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c": [
          "File: channels/urbdrc/client/urbdrc_main.c -> channels/urbdrc/client/urbdrc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "668: {",
          "669:  UINT status;",
          "670:  URBDRC_PLUGIN* urbdrc = (URBDRC_PLUGIN*)pPlugin;",
          "672:  char channelName[sizeof(URBDRC_CHANNEL_NAME)] = { URBDRC_CHANNEL_NAME };",
          "675:   return ERROR_INVALID_PARAMETER;",
          "677:  urbdrc->listener_callback =",
          "678:      (URBDRC_LISTENER_CALLBACK*)calloc(1, sizeof(URBDRC_LISTENER_CALLBACK));",
          "",
          "[Removed Lines]",
          "671:  IUDEVMAN* udevman = urbdrc->udevman;",
          "674:  if (!urbdrc)",
          "",
          "[Added Lines]",
          "671:  IUDEVMAN* udevman;",
          "674:  if (!urbdrc || !urbdrc->udevman)",
          "677:  udevman = urbdrc->udevman;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74629de51bdd83619254b2fc5e076e812b3d11ea",
      "candidate_info": {
        "commit_hash": "74629de51bdd83619254b2fc5e076e812b3d11ea",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/74629de51bdd83619254b2fc5e076e812b3d11ea",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c",
          "channels/drdynvc/client/drdynvc_main.h"
        ],
        "message": "drdynvc channel cleanup.\n\n* Clean channel listeners on channel close\n* Remove limit on listeners for channels\n* Remove limit on channels\n\n(cherry picked from commit 5b2a4434d8becd7b527d5b329eee9915ff8ca77a)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c",
          "channels/drdynvc/client/drdynvc_main.h||channels/drdynvc/client/drdynvc_main.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define TAG CHANNELS_TAG(\"drdynvc.client\")",
          "33: static void dvcman_channel_free(void* channel);",
          "34: static UINT drdynvc_write_data(drdynvcPlugin* drdynvc, UINT32 ChannelId, const BYTE* data,",
          "35:                                UINT32 dataSize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: static void dvcman_free(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "68:  DVCMAN_LISTENER* listener;",
          "105:   return ERROR_INTERNAL_ERROR;",
          "107: }",
          "109: static UINT dvcman_destroy_listener(IWTSVirtualChannelManager* pChannelMgr, IWTSListener* pListener)",
          "110: {",
          "112:  DVCMAN_LISTENER* listener = (DVCMAN_LISTENER*)pListener;",
          "114:  if (listener)",
          "115:  {",
          "116:   DVCMAN* dvcman = listener->dvcman;",
          "128:  }",
          "130:  return CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "70:  if (dvcman->num_listeners < MAX_PLUGINS)",
          "71:  {",
          "72:   WLog_DBG(TAG, \"create_listener: %d.%s.\", dvcman->num_listeners, pszChannelName);",
          "73:   listener = (DVCMAN_LISTENER*)calloc(1, sizeof(DVCMAN_LISTENER));",
          "75:   if (!listener)",
          "76:   {",
          "77:    WLog_ERR(TAG, \"calloc failed!\");",
          "78:    return CHANNEL_RC_NO_MEMORY;",
          "79:   }",
          "81:   listener->iface.GetConfiguration = dvcman_get_configuration;",
          "82:   listener->iface.pInterface = NULL;",
          "83:   listener->dvcman = dvcman;",
          "84:   listener->channel_name = _strdup(pszChannelName);",
          "86:   if (!listener->channel_name)",
          "87:   {",
          "88:    WLog_ERR(TAG, \"_strdup failed!\");",
          "89:    dvcman_wtslistener_free(listener);",
          "90:    return CHANNEL_RC_NO_MEMORY;",
          "91:   }",
          "93:   listener->flags = ulFlags;",
          "94:   listener->listener_callback = pListenerCallback;",
          "96:   if (ppListener)",
          "99:   dvcman->listeners[dvcman->num_listeners++] = (IWTSListener*)listener;",
          "100:   return CHANNEL_RC_OK;",
          "101:  }",
          "102:  else",
          "103:  {",
          "104:   WLog_ERR(TAG, \"create_listener: Maximum DVC listener number reached.\");",
          "106:  }",
          "111:  size_t x;",
          "117:   for (x = 0; x < dvcman->num_listeners; x++)",
          "118:   {",
          "119:    if (dvcman->listeners[x] == pListener)",
          "120:    {",
          "121:     size_t rest = (dvcman->num_listeners - x - 1) * sizeof(IWTSListener*);",
          "122:     MoveMemory(&dvcman->listeners[x], &dvcman->listeners[x + 1], rest);",
          "123:     dvcman->num_listeners--;",
          "124:     dvcman_wtslistener_free(listener);",
          "125:     break;",
          "126:    }",
          "127:   }",
          "",
          "[Added Lines]",
          "71:  WLog_DBG(TAG, \"create_listener: %d.%s.\", ArrayList_Count(dvcman->listeners) + 1,",
          "72:           pszChannelName);",
          "73:  listener = (DVCMAN_LISTENER*)calloc(1, sizeof(DVCMAN_LISTENER));",
          "75:  if (!listener)",
          "76:  {",
          "77:   WLog_ERR(TAG, \"calloc failed!\");",
          "78:   return CHANNEL_RC_NO_MEMORY;",
          "79:  }",
          "81:  listener->iface.GetConfiguration = dvcman_get_configuration;",
          "82:  listener->iface.pInterface = NULL;",
          "83:  listener->dvcman = dvcman;",
          "84:  listener->channel_name = _strdup(pszChannelName);",
          "86:  if (!listener->channel_name)",
          "87:  {",
          "88:   WLog_ERR(TAG, \"_strdup failed!\");",
          "89:   dvcman_wtslistener_free(listener);",
          "90:   return CHANNEL_RC_NO_MEMORY;",
          "91:  }",
          "93:  listener->flags = ulFlags;",
          "94:  listener->listener_callback = pListenerCallback;",
          "96:  if (ppListener)",
          "99:  if (ArrayList_Add(dvcman->listeners, listener) < 0)",
          "101:  return CHANNEL_RC_OK;",
          "108:  WINPR_UNUSED(pChannelMgr);",
          "113:   if (dvcman)",
          "114:    ArrayList_Remove(dvcman->listeners, listener);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140: {",
          "141:  DVCMAN* dvcman = ((DVCMAN_ENTRY_POINTS*)pEntryPoints)->dvcman;",
          "153:   return ERROR_INTERNAL_ERROR;",
          "155: }",
          "157: static IWTSPlugin* dvcman_get_plugin(IDRDYNVC_ENTRY_POINTS* pEntryPoints, const char* name)",
          "158: {",
          "160:  DVCMAN* dvcman = ((DVCMAN_ENTRY_POINTS*)pEntryPoints)->dvcman;",
          "163:  {",
          "165:   {",
          "167:   }",
          "168:  }",
          "171: }",
          "173: static ADDIN_ARGV* dvcman_get_plugin_data(IDRDYNVC_ENTRY_POINTS* pEntryPoints)",
          "",
          "[Removed Lines]",
          "143:  if (dvcman->num_plugins < MAX_PLUGINS)",
          "144:  {",
          "145:   dvcman->plugin_names[dvcman->num_plugins] = name;",
          "146:   dvcman->plugins[dvcman->num_plugins++] = pPlugin;",
          "147:   WLog_DBG(TAG, \"register_plugin: num_plugins %d\", dvcman->num_plugins);",
          "148:   return CHANNEL_RC_OK;",
          "149:  }",
          "150:  else",
          "151:  {",
          "152:   WLog_ERR(TAG, \"register_plugin: Maximum DVC plugin number %u reached.\", MAX_PLUGINS);",
          "154:  }",
          "159:  size_t i;",
          "162:  for (i = 0; i < dvcman->num_plugins; i++)",
          "164:   if (dvcman->plugin_names[i] == name || strcmp(dvcman->plugin_names[i], name) == 0)",
          "166:    return dvcman->plugins[i];",
          "170:  return NULL;",
          "",
          "[Added Lines]",
          "130:  if (ArrayList_Add(dvcman->plugin_names, _strdup(name)) < 0)",
          "132:  if (ArrayList_Add(dvcman->plugins, pPlugin) < 0)",
          "133:   return ERROR_INTERNAL_ERROR;",
          "135:  WLog_DBG(TAG, \"register_plugin: num_plugins %d\", ArrayList_Count(dvcman->plugins));",
          "136:  return CHANNEL_RC_OK;",
          "141:  IWTSPlugin* plugin = NULL;",
          "142:  size_t i, nc, pc;",
          "144:  if (!dvcman || !pEntryPoints || !name)",
          "145:   return NULL;",
          "147:  nc = ArrayList_Count(dvcman->plugin_names);",
          "148:  pc = ArrayList_Count(dvcman->plugins);",
          "149:  if (nc != pc)",
          "150:   return NULL;",
          "152:  ArrayList_Lock(dvcman->plugin_names);",
          "153:  ArrayList_Lock(dvcman->plugins);",
          "154:  for (i = 0; i < pc; i++)",
          "156:   const char* cur = ArrayList_GetItem(dvcman->plugin_names, i);",
          "157:   if (strcmp(cur, name) == 0)",
          "159:    plugin = ArrayList_GetItem(dvcman->plugins, i);",
          "160:    break;",
          "163:  ArrayList_Unlock(dvcman->plugin_names);",
          "164:  ArrayList_Unlock(dvcman->plugins);",
          "165:  return plugin;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:                                                      UINT32 ChannelId)",
          "197: {",
          "198:  int index;",
          "201:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "202:  ArrayList_Lock(dvcman->channels);",
          "207:  {",
          "209:   {",
          "211:    break;",
          "212:   }",
          "215:  }",
          "217:  ArrayList_Unlock(dvcman->channels);",
          "219: }",
          "221: static IWTSVirtualChannelManager* dvcman_new(drdynvcPlugin* plugin)",
          "222: {",
          "223:  DVCMAN* dvcman;",
          "224:  dvcman = (DVCMAN*)calloc(1, sizeof(DVCMAN));",
          "226:  if (!dvcman)",
          "229:   return NULL;",
          "232:  dvcman->iface.CreateListener = dvcman_create_listener;",
          "233:  dvcman->iface.DestroyListener = dvcman_destroy_listener;",
          "",
          "[Removed Lines]",
          "199:  BOOL found = FALSE;",
          "200:  DVCMAN_CHANNEL* channel;",
          "203:  index = 0;",
          "204:  channel = (DVCMAN_CHANNEL*)ArrayList_GetItem(dvcman->channels, index++);",
          "206:  while (channel)",
          "208:   if (channel->channel_id == ChannelId)",
          "210:    found = TRUE;",
          "214:   channel = (DVCMAN_CHANNEL*)ArrayList_GetItem(dvcman->channels, index++);",
          "218:  return (found) ? ((IWTSVirtualChannel*)channel) : NULL;",
          "227:  {",
          "228:   WLog_Print(plugin->log, WLOG_ERROR, \"calloc failed!\");",
          "230:  }",
          "",
          "[Added Lines]",
          "194:  IWTSVirtualChannel* channel = NULL;",
          "197:  for (index = 0; index < ArrayList_Count(dvcman->channels); index++)",
          "199:   DVCMAN_CHANNEL* cur = (DVCMAN_CHANNEL*)ArrayList_GetItem(dvcman->channels, index);",
          "200:   if (cur->channel_id == ChannelId)",
          "202:    channel = &cur->iface;",
          "208:  return channel;",
          "209: }",
          "211: static void dvcman_plugin_terminate(void* plugin)",
          "212: {",
          "213:  IWTSPlugin* pPlugin = plugin;",
          "215:  UINT error = IFCALLRESULT(CHANNEL_RC_OK, pPlugin->Terminated, pPlugin);",
          "216:  if (error != CHANNEL_RC_OK)",
          "217:   WLog_ERR(TAG, \"Terminated failed with error %\" PRIu32 \"!\", error);",
          "222:  wObject* obj;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238:  dvcman->channels = ArrayList_New(TRUE);",
          "240:  if (!dvcman->channels)",
          "250:  if (!dvcman->pool)",
          "259: }",
          "",
          "[Removed Lines]",
          "241:  {",
          "242:   WLog_Print(plugin->log, WLOG_ERROR, \"ArrayList_New failed!\");",
          "243:   free(dvcman);",
          "244:   return NULL;",
          "245:  }",
          "247:  dvcman->channels->object.fnObjectFree = dvcman_channel_free;",
          "248:  dvcman->pool = StreamPool_New(TRUE, 10);",
          "251:  {",
          "252:   WLog_Print(plugin->log, WLOG_ERROR, \"StreamPool_New failed!\");",
          "253:   ArrayList_Free(dvcman->channels);",
          "254:   free(dvcman);",
          "255:   return NULL;",
          "256:  }",
          "258:  return (IWTSVirtualChannelManager*)dvcman;",
          "",
          "[Added Lines]",
          "238:   goto fail;",
          "240:  obj = ArrayList_Object(dvcman->channels);",
          "241:  obj->fnObjectFree = dvcman_channel_free;",
          "243:  dvcman->pool = StreamPool_New(TRUE, 10);",
          "245:   goto fail;",
          "247:  dvcman->listeners = ArrayList_New(TRUE);",
          "248:  if (!dvcman->listeners)",
          "249:   goto fail;",
          "250:  obj = ArrayList_Object(dvcman->listeners);",
          "251:  obj->fnObjectFree = dvcman_wtslistener_free;",
          "253:  dvcman->plugin_names = ArrayList_New(TRUE);",
          "254:  if (!dvcman->plugin_names)",
          "255:   goto fail;",
          "256:  obj = ArrayList_Object(dvcman->plugin_names);",
          "257:  obj->fnObjectFree = free;",
          "259:  dvcman->plugins = ArrayList_New(TRUE);",
          "260:  if (!dvcman->plugins)",
          "261:   goto fail;",
          "262:  obj = ArrayList_Object(dvcman->plugins);",
          "263:  obj->fnObjectFree = dvcman_plugin_terminate;",
          "264:  return &dvcman->iface;",
          "265: fail:",
          "266:  dvcman_free(plugin, &dvcman->iface);",
          "267:  return NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "304:  channel = (DVCMAN_CHANNEL*)calloc(1, sizeof(DVCMAN_CHANNEL));",
          "306:  if (!channel)",
          "312:  channel->dvcman = (DVCMAN*)pChannelMgr;",
          "313:  channel->channel_id = ChannelId;",
          "314:  channel->channel_name = _strdup(ChannelName);",
          "316:  if (!channel->channel_name)",
          "323:  if (!InitializeCriticalSectionEx(&(channel->lock), 0, 0))",
          "331:  return channel;",
          "332: }",
          "334: static void dvcman_channel_free(void* arg)",
          "",
          "[Removed Lines]",
          "307:  {",
          "308:   WLog_Print(drdynvc->log, WLOG_ERROR, \"calloc failed!\");",
          "309:   return NULL;",
          "310:  }",
          "317:  {",
          "318:   WLog_Print(drdynvc->log, WLOG_ERROR, \"_strdup failed!\");",
          "319:   free(channel);",
          "320:   return NULL;",
          "321:  }",
          "324:  {",
          "325:   WLog_Print(drdynvc->log, WLOG_ERROR, \"InitializeCriticalSectionEx failed!\");",
          "326:   free(channel->channel_name);",
          "327:   free(channel);",
          "328:   return NULL;",
          "329:  }",
          "",
          "[Added Lines]",
          "316:   goto fail;",
          "323:   goto fail;",
          "326:   goto fail;",
          "329: fail:",
          "330:  dvcman_channel_free(channel);",
          "331:  return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "377: static void dvcman_free(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr)",
          "378: {",
          "381:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "404:  StreamPool_Free(dvcman->pool);",
          "405:  free(dvcman);",
          "406: }",
          "",
          "[Removed Lines]",
          "379:  size_t i;",
          "380:  IWTSPlugin* pPlugin;",
          "382:  UINT error;",
          "383:  ArrayList_Free(dvcman->channels);",
          "385:  for (i = 0; i < dvcman->num_listeners; i++)",
          "386:  {",
          "387:   DVCMAN_LISTENER* listener = (DVCMAN_LISTENER*)dvcman->listeners[i];",
          "388:   dvcman_wtslistener_free(listener);",
          "389:  }",
          "391:  dvcman->num_listeners = 0;",
          "393:  for (i = 0; i < dvcman->num_plugins; i++)",
          "394:  {",
          "395:   pPlugin = dvcman->plugins[i];",
          "397:   if (pPlugin->Terminated)",
          "398:    if ((error = pPlugin->Terminated(pPlugin)))",
          "399:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Terminated failed with error %\" PRIu32 \"!\",",
          "400:                error);",
          "401:  }",
          "403:  dvcman->num_plugins = 0;",
          "",
          "[Added Lines]",
          "381:  ArrayList_Free(dvcman->listeners);",
          "382:  ArrayList_Free(dvcman->channels);",
          "383:  ArrayList_Free(dvcman->plugin_names);",
          "384:  ArrayList_Free(dvcman->plugins);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "413: static UINT dvcman_init(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr)",
          "414: {",
          "415:  size_t i;",
          "417:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "421:  {",
          "431:  }",
          "434: }",
          "",
          "[Removed Lines]",
          "416:  IWTSPlugin* pPlugin;",
          "418:  UINT error;",
          "420:  for (i = 0; i < dvcman->num_plugins; i++)",
          "422:   pPlugin = dvcman->plugins[i];",
          "424:   if (pPlugin->Initialize)",
          "425:    if ((error = pPlugin->Initialize(pPlugin, pChannelMgr)))",
          "426:    {",
          "427:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Initialize failed with error %\" PRIu32 \"!\",",
          "428:                error);",
          "429:     return error;",
          "430:    }",
          "433:  return CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "399:  UINT error = CHANNEL_RC_OK;",
          "401:  ArrayList_Lock(dvcman->plugins);",
          "402:  for (i = 0; i < ArrayList_Count(dvcman->plugins); i++)",
          "404:   IWTSPlugin* pPlugin = ArrayList_GetItem(dvcman->plugins, i);",
          "406:   error = IFCALLRESULT(CHANNEL_RC_OK, pPlugin->Initialize, pPlugin, pChannelMgr);",
          "407:   if (error != CHANNEL_RC_OK)",
          "408:   {",
          "409:    WLog_Print(drdynvc->log, WLOG_ERROR, \"Initialize failed with error %\" PRIu32 \"!\",",
          "410:               error);",
          "411:    goto fail;",
          "412:   }",
          "415: fail:",
          "416:  ArrayList_Unlock(dvcman->plugins);",
          "417:  return error;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "493:  }",
          "495:  channel->status = ERROR_NOT_CONNECTED;",
          "499:  {",
          "502:   if (strcmp(listener->channel_name, ChannelName) == 0)",
          "503:   {",
          "",
          "[Removed Lines]",
          "496:  ArrayList_Add(dvcman->channels, channel);",
          "498:  for (i = 0; i < dvcman->num_listeners; i++)",
          "500:   DVCMAN_LISTENER* listener = (DVCMAN_LISTENER*)dvcman->listeners[i];",
          "",
          "[Added Lines]",
          "480:  if (ArrayList_Add(dvcman->channels, channel) < 0)",
          "481:   return ERROR_INTERNAL_ERROR;",
          "483:  ArrayList_Lock(dvcman->listeners);",
          "484:  for (i = 0; i < ArrayList_Count(dvcman->listeners); i++)",
          "486:   DVCMAN_LISTENER* listener = (DVCMAN_LISTENER*)ArrayList_GetItem(dvcman->listeners, i);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "524:      WLog_Print(drdynvc->log, WLOG_ERROR,",
          "525:                 \"context.OnChannelConnected failed with error %\" PRIu32 \"\", error);",
          "528:    }",
          "529:    else",
          "530:    {",
          "",
          "[Removed Lines]",
          "527:     return error;",
          "",
          "[Added Lines]",
          "513:     goto fail;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "532:     {",
          "533:      WLog_Print(drdynvc->log, WLOG_ERROR,",
          "534:                 \"OnNewChannelConnection failed with error %\" PRIu32 \"!\", error);",
          "536:     }",
          "537:     else",
          "538:     {",
          "539:      WLog_Print(drdynvc->log, WLOG_ERROR,",
          "540:                 \"OnNewChannelConnection returned with bAccept FALSE!\");",
          "542:     }",
          "543:    }",
          "544:   }",
          "545:  }",
          "548: }",
          "",
          "[Removed Lines]",
          "535:      return error;",
          "541:      return ERROR_INTERNAL_ERROR;",
          "547:  return ERROR_INTERNAL_ERROR;",
          "",
          "[Added Lines]",
          "521:      goto fail;",
          "527:      error = ERROR_INTERNAL_ERROR;",
          "528:      goto fail;",
          "533:  error = ERROR_INTERNAL_ERROR;",
          "534: fail:",
          "535:  ArrayList_Unlock(dvcman->listeners);",
          "537:  return error;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "590: static UINT dvcman_close_channel(IWTSVirtualChannelManager* pChannelMgr, UINT32 ChannelId,",
          "591:                                  BOOL bSendClosePDU)",
          "592: {",
          "593:  DVCMAN_CHANNEL* channel;",
          "594:  UINT error = CHANNEL_RC_OK;",
          "595:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:  size_t i;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "609:  if (drdynvc && bSendClosePDU)",
          "610:  {",
          "612:   if (!s)",
          "613:   {",
          "615:    error = CHANNEL_RC_NO_MEMORY;",
          "616:   }",
          "617:   else",
          "",
          "[Removed Lines]",
          "611:   wStream* s = Stream_New(NULL, 5);",
          "614:    WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "",
          "[Added Lines]",
          "602:   wStream* s = StreamPool_Take(dvcman->pool, 5);",
          "605:    WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "619:    Stream_Write_UINT8(s, (CLOSE_REQUEST_PDU << 4) | 0x02);",
          "620:    Stream_Write_UINT32(s, ChannelId);",
          "621:    error = drdynvc_send(drdynvc, s);",
          "622:   }",
          "623:  }",
          "625:  ArrayList_Remove(dvcman->channels, channel);",
          "626:  return error;",
          "627: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:    Stream_Release(s);",
          "617:  ArrayList_Lock(dvcman->listeners);",
          "618:  for (i = ArrayList_Count(dvcman->listeners); i > 0; i--)",
          "619:  {",
          "620:   DVCMAN_LISTENER* listener = ArrayList_GetItem(dvcman->listeners, i - 1);",
          "621:   if (strcmp(listener->channel_name, channel->channel_name) == 0)",
          "622:    ArrayList_Remove(dvcman->listeners, listener);",
          "623:  }",
          "624:  ArrayList_Unlock(dvcman->listeners);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "689:  if (channel->dvc_data)",
          "690:  {",
          "693:   {",
          "694:    WLog_Print(drdynvc->log, WLOG_ERROR, \"data exceeding declared length!\");",
          "695:    Stream_Release(channel->dvc_data);",
          "",
          "[Removed Lines]",
          "692:   if (Stream_GetPosition(channel->dvc_data) + dataSize > Stream_Capacity(channel->dvc_data))",
          "",
          "[Added Lines]",
          "692:   if (Stream_GetPosition(channel->dvc_data) + dataSize > channel->dvc_data_length)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "761:  switch (status)",
          "762:  {",
          "763:   case CHANNEL_RC_OK:",
          "764:    return CHANNEL_RC_OK;",
          "766:   case CHANNEL_RC_NOT_CONNECTED:",
          "768:    return CHANNEL_RC_OK;",
          "770:   case CHANNEL_RC_BAD_CHANNEL_HANDLE:",
          "772:    WLog_ERR(TAG, \"VirtualChannelWriteEx failed with CHANNEL_RC_BAD_CHANNEL_HANDLE\");",
          "773:    return status;",
          "775:   default:",
          "777:    WLog_Print(drdynvc->log, WLOG_ERROR,",
          "778:               \"VirtualChannelWriteEx failed with %s [%08\" PRIX32 \"]\",",
          "779:               WTSErrorToString(status), status);",
          "",
          "[Removed Lines]",
          "767:    Stream_Free(s, TRUE);",
          "771:    Stream_Free(s, TRUE);",
          "776:    Stream_Free(s, TRUE);",
          "",
          "[Added Lines]",
          "764:    Stream_AddRef(s);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "795:  UINT8 cbLen;",
          "796:  unsigned long chunkLength;",
          "797:  UINT status = CHANNEL_RC_BAD_INIT_HANDLE;",
          "799:  if (!drdynvc)",
          "800:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "802:  WLog_Print(drdynvc->log, WLOG_DEBUG, \"write_data: ChannelId=%\" PRIu32 \" size=%\" PRIu32 \"\",",
          "803:             ChannelId, dataSize);",
          "806:  if (!data_out)",
          "807:  {",
          "809:   return CHANNEL_RC_NO_MEMORY;",
          "810:  }",
          "",
          "[Removed Lines]",
          "804:  data_out = Stream_New(NULL, CHANNEL_CHUNK_LENGTH);",
          "808:   WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "",
          "[Added Lines]",
          "796:  DVCMAN* dvcman;",
          "801:  dvcman = (DVCMAN*)drdynvc->channel_mgr;",
          "805:  data_out = StreamPool_Take(dvcman->pool, CHANNEL_CHUNK_LENGTH);",
          "809:   WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "816:  if (dataSize == 0)",
          "817:  {",
          "819:  }",
          "820:  else if (dataSize <= CHANNEL_CHUNK_LENGTH - pos)",
          "821:  {",
          "",
          "[Removed Lines]",
          "818:   status = dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "[Added Lines]",
          "819:   dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "842:   while (status == CHANNEL_RC_OK && dataSize > 0)",
          "843:   {",
          "846:    if (!data_out)",
          "847:    {",
          "849:     return CHANNEL_RC_NO_MEMORY;",
          "850:    }",
          "",
          "[Removed Lines]",
          "844:    data_out = Stream_New(NULL, CHANNEL_CHUNK_LENGTH);",
          "848:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "",
          "[Added Lines]",
          "845:    data_out = StreamPool_Take(dvcman->pool, CHANNEL_CHUNK_LENGTH);",
          "849:     WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "886: {",
          "887:  UINT status;",
          "888:  wStream* s;",
          "890:  if (!drdynvc)",
          "891:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "893:  WLog_Print(drdynvc->log, WLOG_TRACE, \"capability_response\");",
          "896:  if (!s)",
          "897:  {",
          "",
          "[Removed Lines]",
          "894:  s = Stream_New(NULL, 4);",
          "",
          "[Added Lines]",
          "890:  DVCMAN* dvcman;",
          "895:  dvcman = (DVCMAN*)drdynvc->channel_mgr;",
          "897:  s = StreamPool_Take(dvcman->pool, 4);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1002:  UINT channel_status;",
          "1003:  char* name;",
          "1004:  size_t length;",
          "1006:  WINPR_UNUSED(Sp);",
          "1007:  if (!drdynvc)",
          "1008:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "1010:  if (drdynvc->state == DRDYNVC_STATE_CAPABILITIES)",
          "1011:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008:  DVCMAN* dvcman;",
          "1014:  dvcman = (DVCMAN*)drdynvc->channel_mgr;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1039:  WLog_Print(drdynvc->log, WLOG_DEBUG,",
          "1040:             \"process_create_request: ChannelId=%\" PRIu32 \" ChannelName=%s\", ChannelId, name);",
          "1041:  channel_status = dvcman_create_channel(drdynvc, drdynvc->channel_mgr, ChannelId, name);",
          "1044:  if (!data_out)",
          "1045:  {",
          "1047:   return CHANNEL_RC_NO_MEMORY;",
          "1048:  }",
          "",
          "[Removed Lines]",
          "1042:  data_out = Stream_New(NULL, pos + 4);",
          "1046:   WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "",
          "[Added Lines]",
          "1047:  data_out = StreamPool_Take(dvcman->pool, pos + 4);",
          "1051:   WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1232:  if (dataFlags & CHANNEL_FLAG_FIRST)",
          "1233:  {",
          "1234:   if (drdynvc->data_in)",
          "1238:  }",
          "1240:  if (!(data_in = drdynvc->data_in))",
          "1241:  {",
          "1243:   return CHANNEL_RC_NO_MEMORY;",
          "1244:  }",
          "1246:  if (!Stream_EnsureRemainingCapacity(data_in, dataLength))",
          "1247:  {",
          "1248:   WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_EnsureRemainingCapacity failed!\");",
          "1250:   drdynvc->data_in = NULL;",
          "1251:   return ERROR_INTERNAL_ERROR;",
          "1252:  }",
          "",
          "[Removed Lines]",
          "1235:    Stream_Free(drdynvc->data_in, TRUE);",
          "1237:   drdynvc->data_in = Stream_New(NULL, totalLength);",
          "1242:   WLog_Print(drdynvc->log, WLOG_ERROR, \"Stream_New failed!\");",
          "1249:   Stream_Free(drdynvc->data_in, TRUE);",
          "",
          "[Added Lines]",
          "1239:   DVCMAN* mgr = (DVCMAN*)drdynvc->channel_mgr;",
          "1241:    Stream_Release(drdynvc->data_in);",
          "1243:   drdynvc->data_in = StreamPool_Take(mgr->pool, totalLength);",
          "1248:   WLog_Print(drdynvc->log, WLOG_ERROR, \"StreamPool_Take failed!\");",
          "1255:   Stream_Release(drdynvc->data_in);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1256:  if (dataFlags & CHANNEL_FLAG_LAST)",
          "1257:  {",
          "1259:   {",
          "1260:    WLog_Print(drdynvc->log, WLOG_ERROR, \"drdynvc_plugin_process_received: read error\");",
          "1261:    return ERROR_INVALID_DATA;",
          "",
          "[Removed Lines]",
          "1258:   if (Stream_Capacity(data_in) != Stream_GetPosition(data_in))",
          "",
          "[Added Lines]",
          "1264:   const size_t cap = Stream_Capacity(data_in);",
          "1265:   const size_t pos = Stream_GetPosition(data_in);",
          "1266:   if (cap < pos)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1304:   case CHANNEL_EVENT_WRITE_COMPLETE:",
          "1305:   {",
          "1306:    wStream* s = (wStream*)pData;",
          "1308:   }",
          "1309:   break;",
          "",
          "[Removed Lines]",
          "1307:    Stream_Free(s, TRUE);",
          "",
          "[Added Lines]",
          "1315:    Stream_Release(s);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1359:                \"drdynvc_order_recv failed with error %\" PRIu32 \"!\", error);",
          "1360:    }",
          "1363:   }",
          "1364:  }",
          "",
          "[Removed Lines]",
          "1362:    Stream_Free(data, TRUE);",
          "",
          "[Added Lines]",
          "1370:    Stream_Release(data);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1397:  s = (wStream*)msg->wParam;",
          "1399:  if (s)",
          "1401: }",
          "",
          "[Removed Lines]",
          "1400:   Stream_Free(s, TRUE);",
          "",
          "[Added Lines]",
          "1408:   Stream_Release(s);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1530:  if (drdynvc->data_in)",
          "1531:  {",
          "1533:   drdynvc->data_in = NULL;",
          "1534:  }",
          "",
          "[Removed Lines]",
          "1532:   Stream_Free(drdynvc->data_in, TRUE);",
          "",
          "[Added Lines]",
          "1540:   Stream_Release(drdynvc->data_in);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1561: static UINT drdynvc_virtual_channel_event_attached(drdynvcPlugin* drdynvc)",
          "1562: {",
          "1563:  size_t i;",
          "1564:  DVCMAN* dvcman;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1571:  UINT error = CHANNEL_RC_OK;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1571:  if (!dvcman)",
          "1572:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "1575:  {",
          "1586:  }",
          "1589: }",
          "1591: static UINT drdynvc_virtual_channel_event_detached(drdynvcPlugin* drdynvc)",
          "1592: {",
          "1593:  size_t i;",
          "1594:  DVCMAN* dvcman;",
          "",
          "[Removed Lines]",
          "1574:  for (i = 0; i < dvcman->num_plugins; i++)",
          "1576:   UINT error;",
          "1577:   IWTSPlugin* pPlugin = dvcman->plugins[i];",
          "1579:   if (pPlugin->Attached)",
          "1580:    if ((error = pPlugin->Attached(pPlugin)))",
          "1581:    {",
          "1582:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Attach failed with error %\" PRIu32 \"!\",",
          "1583:                error);",
          "1584:     return error;",
          "1585:    }",
          "1588:  return CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "1583:  ArrayList_Lock(dvcman->plugins);",
          "1584:  for (i = 0; i < ArrayList_Count(dvcman->plugins); i++)",
          "1586:   IWTSPlugin* pPlugin = ArrayList_GetItem(dvcman->plugins, i);",
          "1588:   error = IFCALLRESULT(CHANNEL_RC_OK, pPlugin->Attached, pPlugin);",
          "1589:   if (error != CHANNEL_RC_OK)",
          "1590:   {",
          "1591:    WLog_Print(drdynvc->log, WLOG_ERROR, \"Attach failed with error %\" PRIu32 \"!\", error);",
          "1592:    goto fail;",
          "1593:   }",
          "1596: fail:",
          "1597:  ArrayList_Unlock(dvcman->plugins);",
          "1598:  return error;",
          "1603:  UINT error = CHANNEL_RC_OK;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1601:  if (!dvcman)",
          "1602:   return CHANNEL_RC_BAD_CHANNEL_HANDLE;",
          "1605:  {",
          "1616:  }",
          "1619: }",
          "1621: static VOID VCAPITYPE drdynvc_virtual_channel_init_event_ex(LPVOID lpUserParam, LPVOID pInitHandle,",
          "",
          "[Removed Lines]",
          "1604:  for (i = 0; i < dvcman->num_plugins; i++)",
          "1606:   UINT error;",
          "1607:   IWTSPlugin* pPlugin = dvcman->plugins[i];",
          "1609:   if (pPlugin->Detached)",
          "1610:    if ((error = pPlugin->Detached(pPlugin)))",
          "1611:    {",
          "1612:     WLog_Print(drdynvc->log, WLOG_ERROR, \"Detach failed with error %\" PRIu32 \"!\",",
          "1613:                error);",
          "1614:     return error;",
          "1615:    }",
          "1618:  return CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "1615:  ArrayList_Lock(dvcman->plugins);",
          "1616:  for (i = 0; i < ArrayList_Count(dvcman->plugins); i++)",
          "1618:   IWTSPlugin* pPlugin = ArrayList_GetItem(dvcman->plugins, i);",
          "1620:   error = IFCALLRESULT(CHANNEL_RC_OK, pPlugin->Detached, pPlugin);",
          "1621:   if (error != CHANNEL_RC_OK)",
          "1622:   {",
          "1623:    WLog_Print(drdynvc->log, WLOG_ERROR, \"Detach failed with error %\" PRIu32 \"!\", error);",
          "1624:    goto fail;",
          "1625:   }",
          "1628: fail:",
          "1629:  ArrayList_Unlock(dvcman->plugins);",
          "1631:  return error;",
          "",
          "---------------"
        ],
        "channels/drdynvc/client/drdynvc_main.h||channels/drdynvc/client/drdynvc_main.h": [
          "File: channels/drdynvc/client/drdynvc_main.h -> channels/drdynvc/client/drdynvc_main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: typedef struct drdynvc_plugin drdynvcPlugin;",
          "42: struct _DVCMAN",
          "43: {",
          "44:  IWTSVirtualChannelManager iface;",
          "46:  drdynvcPlugin* drdynvc;",
          "55:  wArrayList* channels;",
          "56:  wStreamPool* pool;",
          "57: };",
          "",
          "[Removed Lines]",
          "40: #define MAX_PLUGINS 32",
          "48:  size_t num_plugins;",
          "49:  const char* plugin_names[MAX_PLUGINS];",
          "50:  IWTSPlugin* plugins[MAX_PLUGINS];",
          "52:  size_t num_listeners;",
          "53:  IWTSListener* listeners[MAX_PLUGINS];",
          "",
          "[Added Lines]",
          "46:  wArrayList* plugin_names;",
          "47:  wArrayList* plugins;",
          "49:  wArrayList* listeners;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c060089a2b645cb1366d611766adce1919170d72",
      "candidate_info": {
        "commit_hash": "c060089a2b645cb1366d611766adce1919170d72",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c060089a2b645cb1366d611766adce1919170d72",
        "files": [
          "libfreerdp/common/settings_getters.c",
          "libfreerdp/common/settings_str.c",
          "libfreerdp/core/settings.c",
          "libfreerdp/core/settings.h",
          "libfreerdp/core/test/TestSettings.c",
          "scripts/update-settings-tests"
        ],
        "message": "Refactored settings clone/free, extended tests\n\n(cherry picked from commit 773ad6e9791844ca3ccdc40d378a37fc0238ef0a)",
        "before_after_code_files": [
          "libfreerdp/common/settings_getters.c||libfreerdp/common/settings_getters.c",
          "libfreerdp/common/settings_str.c||libfreerdp/common/settings_str.c",
          "libfreerdp/core/settings.c||libfreerdp/core/settings.c",
          "libfreerdp/core/settings.h||libfreerdp/core/settings.h",
          "libfreerdp/core/test/TestSettings.c||libfreerdp/core/test/TestSettings.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/common/settings_getters.c||libfreerdp/common/settings_getters.c": [
          "File: libfreerdp/common/settings_getters.c -> libfreerdp/common/settings_getters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2358:  }",
          "2359: }",
          "2362: {",
          "2363:  if (!settings)",
          "2364:   return FALSE;",
          "",
          "[Removed Lines]",
          "2361: BOOL freerdp_settings_set_string(rdpSettings* settings, size_t id, const char* val)",
          "",
          "[Added Lines]",
          "2361: BOOL freerdp_settings_set_string_(rdpSettings* settings, size_t id, const char* val, BOOL cleanup)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2366:  switch (id)",
          "2367:  {",
          "2368:   case FreeRDP_AcceptedCert:",
          "2370:    settings->AcceptedCert = (val ? _strdup(val) : NULL);",
          "2371:    return (!val || settings->AcceptedCert != NULL);",
          "2373:   case FreeRDP_AllowedTlsCiphers:",
          "2375:    settings->AllowedTlsCiphers = (val ? _strdup(val) : NULL);",
          "2376:    return (!val || settings->AllowedTlsCiphers != NULL);",
          "2378:   case FreeRDP_AlternateShell:",
          "2380:    settings->AlternateShell = (val ? _strdup(val) : NULL);",
          "2381:    return (!val || settings->AlternateShell != NULL);",
          "2383:   case FreeRDP_AssistanceFile:",
          "2385:    settings->AssistanceFile = (val ? _strdup(val) : NULL);",
          "2386:    return (!val || settings->AssistanceFile != NULL);",
          "2388:   case FreeRDP_AuthenticationServiceClass:",
          "2390:    settings->AuthenticationServiceClass = (val ? _strdup(val) : NULL);",
          "2391:    return (!val || settings->AuthenticationServiceClass != NULL);",
          "2393:   case FreeRDP_CertificateAcceptedFingerprints:",
          "2395:    settings->CertificateAcceptedFingerprints = (val ? _strdup(val) : NULL);",
          "2396:    return (!val || settings->CertificateAcceptedFingerprints != NULL);",
          "2398:   case FreeRDP_CertificateContent:",
          "2400:    settings->CertificateContent = (val ? _strdup(val) : NULL);",
          "2401:    return (!val || settings->CertificateContent != NULL);",
          "2403:   case FreeRDP_CertificateFile:",
          "2405:    settings->CertificateFile = (val ? _strdup(val) : NULL);",
          "2406:    return (!val || settings->CertificateFile != NULL);",
          "2408:   case FreeRDP_CertificateName:",
          "2410:    settings->CertificateName = (val ? _strdup(val) : NULL);",
          "2411:    return (!val || settings->CertificateName != NULL);",
          "2413:   case FreeRDP_ClientAddress:",
          "2415:    settings->ClientAddress = (val ? _strdup(val) : NULL);",
          "2416:    return (!val || settings->ClientAddress != NULL);",
          "2418:   case FreeRDP_ClientDir:",
          "2420:    settings->ClientDir = (val ? _strdup(val) : NULL);",
          "2421:    return (!val || settings->ClientDir != NULL);",
          "2423:   case FreeRDP_ClientHostname:",
          "2425:    settings->ClientHostname = (val ? _strdup(val) : NULL);",
          "2426:    return (!val || settings->ClientHostname != NULL);",
          "2428:   case FreeRDP_ClientProductId:",
          "2430:    settings->ClientProductId = (val ? _strdup(val) : NULL);",
          "2431:    return (!val || settings->ClientProductId != NULL);",
          "2433:   case FreeRDP_ComputerName:",
          "2435:    settings->ComputerName = (val ? _strdup(val) : NULL);",
          "2436:    return (!val || settings->ComputerName != NULL);",
          "2438:   case FreeRDP_ConfigPath:",
          "2440:    settings->ConfigPath = (val ? _strdup(val) : NULL);",
          "2441:    return (!val || settings->ConfigPath != NULL);",
          "2443:   case FreeRDP_ConnectionFile:",
          "2445:    settings->ConnectionFile = (val ? _strdup(val) : NULL);",
          "2446:    return (!val || settings->ConnectionFile != NULL);",
          "2448:   case FreeRDP_CurrentPath:",
          "2450:    settings->CurrentPath = (val ? _strdup(val) : NULL);",
          "2451:    return (!val || settings->CurrentPath != NULL);",
          "2453:   case FreeRDP_Domain:",
          "2455:    settings->Domain = (val ? _strdup(val) : NULL);",
          "2456:    return (!val || settings->Domain != NULL);",
          "2458:   case FreeRDP_DrivesToRedirect:",
          "2460:    settings->DrivesToRedirect = (val ? _strdup(val) : NULL);",
          "2461:    return (!val || settings->DrivesToRedirect != NULL);",
          "2463:   case FreeRDP_DumpRemoteFxFile:",
          "2465:    settings->DumpRemoteFxFile = (val ? _strdup(val) : NULL);",
          "2466:    return (!val || settings->DumpRemoteFxFile != NULL);",
          "2468:   case FreeRDP_DynamicDSTTimeZoneKeyName:",
          "2470:    settings->DynamicDSTTimeZoneKeyName = (val ? _strdup(val) : NULL);",
          "2471:    return (!val || settings->DynamicDSTTimeZoneKeyName != NULL);",
          "2473:   case FreeRDP_GatewayAcceptedCert:",
          "2475:    settings->GatewayAcceptedCert = (val ? _strdup(val) : NULL);",
          "2476:    return (!val || settings->GatewayAcceptedCert != NULL);",
          "2478:   case FreeRDP_GatewayAccessToken:",
          "2480:    settings->GatewayAccessToken = (val ? _strdup(val) : NULL);",
          "2481:    return (!val || settings->GatewayAccessToken != NULL);",
          "2483:   case FreeRDP_GatewayDomain:",
          "2485:    settings->GatewayDomain = (val ? _strdup(val) : NULL);",
          "2486:    return (!val || settings->GatewayDomain != NULL);",
          "2488:   case FreeRDP_GatewayHostname:",
          "2490:    settings->GatewayHostname = (val ? _strdup(val) : NULL);",
          "2491:    return (!val || settings->GatewayHostname != NULL);",
          "2493:   case FreeRDP_GatewayPassword:",
          "2495:    settings->GatewayPassword = (val ? _strdup(val) : NULL);",
          "2496:    return (!val || settings->GatewayPassword != NULL);",
          "2498:   case FreeRDP_GatewayUsername:",
          "2500:    settings->GatewayUsername = (val ? _strdup(val) : NULL);",
          "2501:    return (!val || settings->GatewayUsername != NULL);",
          "2503:   case FreeRDP_HomePath:",
          "2505:    settings->HomePath = (val ? _strdup(val) : NULL);",
          "2506:    return (!val || settings->HomePath != NULL);",
          "2508:   case FreeRDP_ImeFileName:",
          "2510:    settings->ImeFileName = (val ? _strdup(val) : NULL);",
          "2511:    return (!val || settings->ImeFileName != NULL);",
          "2513:   case FreeRDP_KerberosKdc:",
          "2515:    settings->KerberosKdc = (val ? _strdup(val) : NULL);",
          "2516:    return (!val || settings->KerberosKdc != NULL);",
          "2518:   case FreeRDP_KerberosRealm:",
          "2520:    settings->KerberosRealm = (val ? _strdup(val) : NULL);",
          "2521:    return (!val || settings->KerberosRealm != NULL);",
          "2523:   case FreeRDP_NtlmSamFile:",
          "2525:    settings->NtlmSamFile = (val ? _strdup(val) : NULL);",
          "2526:    return (!val || settings->NtlmSamFile != NULL);",
          "2528:   case FreeRDP_Password:",
          "2530:    settings->Password = (val ? _strdup(val) : NULL);",
          "2531:    return (!val || settings->Password != NULL);",
          "2533:   case FreeRDP_PasswordHash:",
          "2535:    settings->PasswordHash = (val ? _strdup(val) : NULL);",
          "2536:    return (!val || settings->PasswordHash != NULL);",
          "2538:   case FreeRDP_PlayRemoteFxFile:",
          "2540:    settings->PlayRemoteFxFile = (val ? _strdup(val) : NULL);",
          "2541:    return (!val || settings->PlayRemoteFxFile != NULL);",
          "2543:   case FreeRDP_PreconnectionBlob:",
          "2545:    settings->PreconnectionBlob = (val ? _strdup(val) : NULL);",
          "2546:    return (!val || settings->PreconnectionBlob != NULL);",
          "2548:   case FreeRDP_PrivateKeyContent:",
          "2550:    settings->PrivateKeyContent = (val ? _strdup(val) : NULL);",
          "2551:    return (!val || settings->PrivateKeyContent != NULL);",
          "2553:   case FreeRDP_PrivateKeyFile:",
          "2555:    settings->PrivateKeyFile = (val ? _strdup(val) : NULL);",
          "2556:    return (!val || settings->PrivateKeyFile != NULL);",
          "2558:   case FreeRDP_ProxyHostname:",
          "2560:    settings->ProxyHostname = (val ? _strdup(val) : NULL);",
          "2561:    return (!val || settings->ProxyHostname != NULL);",
          "2563:   case FreeRDP_ProxyPassword:",
          "2565:    settings->ProxyPassword = (val ? _strdup(val) : NULL);",
          "2566:    return (!val || settings->ProxyPassword != NULL);",
          "2568:   case FreeRDP_ProxyUsername:",
          "2570:    settings->ProxyUsername = (val ? _strdup(val) : NULL);",
          "2571:    return (!val || settings->ProxyUsername != NULL);",
          "2573:   case FreeRDP_RDP2TCPArgs:",
          "2575:    settings->RDP2TCPArgs = (val ? _strdup(val) : NULL);",
          "2576:    return (!val || settings->RDP2TCPArgs != NULL);",
          "2578:   case FreeRDP_RdpKeyContent:",
          "2580:    settings->RdpKeyContent = (val ? _strdup(val) : NULL);",
          "2581:    return (!val || settings->RdpKeyContent != NULL);",
          "2583:   case FreeRDP_RdpKeyFile:",
          "2585:    settings->RdpKeyFile = (val ? _strdup(val) : NULL);",
          "2586:    return (!val || settings->RdpKeyFile != NULL);",
          "2588:   case FreeRDP_RedirectionAcceptedCert:",
          "2590:    settings->RedirectionAcceptedCert = (val ? _strdup(val) : NULL);",
          "2591:    return (!val || settings->RedirectionAcceptedCert != NULL);",
          "2593:   case FreeRDP_RedirectionDomain:",
          "2595:    settings->RedirectionDomain = (val ? _strdup(val) : NULL);",
          "2596:    return (!val || settings->RedirectionDomain != NULL);",
          "2598:   case FreeRDP_RedirectionTargetFQDN:",
          "2600:    settings->RedirectionTargetFQDN = (val ? _strdup(val) : NULL);",
          "2601:    return (!val || settings->RedirectionTargetFQDN != NULL);",
          "2603:   case FreeRDP_RedirectionTargetNetBiosName:",
          "2605:    settings->RedirectionTargetNetBiosName = (val ? _strdup(val) : NULL);",
          "2606:    return (!val || settings->RedirectionTargetNetBiosName != NULL);",
          "2608:   case FreeRDP_RedirectionUsername:",
          "2610:    settings->RedirectionUsername = (val ? _strdup(val) : NULL);",
          "2611:    return (!val || settings->RedirectionUsername != NULL);",
          "2613:   case FreeRDP_RemoteApplicationCmdLine:",
          "2615:    settings->RemoteApplicationCmdLine = (val ? _strdup(val) : NULL);",
          "2616:    return (!val || settings->RemoteApplicationCmdLine != NULL);",
          "2618:   case FreeRDP_RemoteApplicationFile:",
          "2620:    settings->RemoteApplicationFile = (val ? _strdup(val) : NULL);",
          "2621:    return (!val || settings->RemoteApplicationFile != NULL);",
          "2623:   case FreeRDP_RemoteApplicationGuid:",
          "2625:    settings->RemoteApplicationGuid = (val ? _strdup(val) : NULL);",
          "2626:    return (!val || settings->RemoteApplicationGuid != NULL);",
          "2628:   case FreeRDP_RemoteApplicationIcon:",
          "2630:    settings->RemoteApplicationIcon = (val ? _strdup(val) : NULL);",
          "2631:    return (!val || settings->RemoteApplicationIcon != NULL);",
          "2633:   case FreeRDP_RemoteApplicationName:",
          "2635:    settings->RemoteApplicationName = (val ? _strdup(val) : NULL);",
          "2636:    return (!val || settings->RemoteApplicationName != NULL);",
          "2638:   case FreeRDP_RemoteApplicationProgram:",
          "2640:    settings->RemoteApplicationProgram = (val ? _strdup(val) : NULL);",
          "2641:    return (!val || settings->RemoteApplicationProgram != NULL);",
          "2643:   case FreeRDP_RemoteApplicationWorkingDir:",
          "2645:    settings->RemoteApplicationWorkingDir = (val ? _strdup(val) : NULL);",
          "2646:    return (!val || settings->RemoteApplicationWorkingDir != NULL);",
          "2648:   case FreeRDP_RemoteAssistancePassStub:",
          "2650:    settings->RemoteAssistancePassStub = (val ? _strdup(val) : NULL);",
          "2651:    return (!val || settings->RemoteAssistancePassStub != NULL);",
          "2653:   case FreeRDP_RemoteAssistancePassword:",
          "2655:    settings->RemoteAssistancePassword = (val ? _strdup(val) : NULL);",
          "2656:    return (!val || settings->RemoteAssistancePassword != NULL);",
          "2658:   case FreeRDP_RemoteAssistanceRCTicket:",
          "2660:    settings->RemoteAssistanceRCTicket = (val ? _strdup(val) : NULL);",
          "2661:    return (!val || settings->RemoteAssistanceRCTicket != NULL);",
          "2663:   case FreeRDP_RemoteAssistanceSessionId:",
          "2665:    settings->RemoteAssistanceSessionId = (val ? _strdup(val) : NULL);",
          "2666:    return (!val || settings->RemoteAssistanceSessionId != NULL);",
          "2668:   case FreeRDP_ServerHostname:",
          "2670:    settings->ServerHostname = (val ? _strdup(val) : NULL);",
          "2671:    return (!val || settings->ServerHostname != NULL);",
          "2673:   case FreeRDP_ShellWorkingDirectory:",
          "2675:    settings->ShellWorkingDirectory = (val ? _strdup(val) : NULL);",
          "2676:    return (!val || settings->ShellWorkingDirectory != NULL);",
          "2678:   case FreeRDP_TargetNetAddress:",
          "2680:    settings->TargetNetAddress = (val ? _strdup(val) : NULL);",
          "2681:    return (!val || settings->TargetNetAddress != NULL);",
          "2683:   case FreeRDP_Username:",
          "2685:    settings->Username = (val ? _strdup(val) : NULL);",
          "2686:    return (!val || settings->Username != NULL);",
          "2688:   case FreeRDP_WindowTitle:",
          "2690:    settings->WindowTitle = (val ? _strdup(val) : NULL);",
          "2691:    return (!val || settings->WindowTitle != NULL);",
          "2693:   case FreeRDP_WmClass:",
          "2695:    settings->WmClass = (val ? _strdup(val) : NULL);",
          "2696:    return (!val || settings->WmClass != NULL);",
          "",
          "[Removed Lines]",
          "2369:    free(settings->AcceptedCert);",
          "2374:    free(settings->AllowedTlsCiphers);",
          "2379:    free(settings->AlternateShell);",
          "2384:    free(settings->AssistanceFile);",
          "2389:    free(settings->AuthenticationServiceClass);",
          "2394:    free(settings->CertificateAcceptedFingerprints);",
          "2399:    free(settings->CertificateContent);",
          "2404:    free(settings->CertificateFile);",
          "2409:    free(settings->CertificateName);",
          "2414:    free(settings->ClientAddress);",
          "2419:    free(settings->ClientDir);",
          "2424:    free(settings->ClientHostname);",
          "2429:    free(settings->ClientProductId);",
          "2434:    free(settings->ComputerName);",
          "2439:    free(settings->ConfigPath);",
          "2444:    free(settings->ConnectionFile);",
          "2449:    free(settings->CurrentPath);",
          "2454:    free(settings->Domain);",
          "2459:    free(settings->DrivesToRedirect);",
          "2464:    free(settings->DumpRemoteFxFile);",
          "2469:    free(settings->DynamicDSTTimeZoneKeyName);",
          "2474:    free(settings->GatewayAcceptedCert);",
          "2479:    free(settings->GatewayAccessToken);",
          "2484:    free(settings->GatewayDomain);",
          "2489:    free(settings->GatewayHostname);",
          "2494:    free(settings->GatewayPassword);",
          "2499:    free(settings->GatewayUsername);",
          "2504:    free(settings->HomePath);",
          "2509:    free(settings->ImeFileName);",
          "2514:    free(settings->KerberosKdc);",
          "2519:    free(settings->KerberosRealm);",
          "2524:    free(settings->NtlmSamFile);",
          "2529:    free(settings->Password);",
          "2534:    free(settings->PasswordHash);",
          "2539:    free(settings->PlayRemoteFxFile);",
          "2544:    free(settings->PreconnectionBlob);",
          "2549:    free(settings->PrivateKeyContent);",
          "2554:    free(settings->PrivateKeyFile);",
          "2559:    free(settings->ProxyHostname);",
          "2564:    free(settings->ProxyPassword);",
          "2569:    free(settings->ProxyUsername);",
          "2574:    free(settings->RDP2TCPArgs);",
          "2579:    free(settings->RdpKeyContent);",
          "2584:    free(settings->RdpKeyFile);",
          "2589:    free(settings->RedirectionAcceptedCert);",
          "2594:    free(settings->RedirectionDomain);",
          "2599:    free(settings->RedirectionTargetFQDN);",
          "2604:    free(settings->RedirectionTargetNetBiosName);",
          "2609:    free(settings->RedirectionUsername);",
          "2614:    free(settings->RemoteApplicationCmdLine);",
          "2619:    free(settings->RemoteApplicationFile);",
          "2624:    free(settings->RemoteApplicationGuid);",
          "2629:    free(settings->RemoteApplicationIcon);",
          "2634:    free(settings->RemoteApplicationName);",
          "2639:    free(settings->RemoteApplicationProgram);",
          "2644:    free(settings->RemoteApplicationWorkingDir);",
          "2649:    free(settings->RemoteAssistancePassStub);",
          "2654:    free(settings->RemoteAssistancePassword);",
          "2659:    free(settings->RemoteAssistanceRCTicket);",
          "2664:    free(settings->RemoteAssistanceSessionId);",
          "2669:    free(settings->ServerHostname);",
          "2674:    free(settings->ShellWorkingDirectory);",
          "2679:    free(settings->TargetNetAddress);",
          "2684:    free(settings->Username);",
          "2689:    free(settings->WindowTitle);",
          "2694:    free(settings->WmClass);",
          "",
          "[Added Lines]",
          "2369:    if (cleanup)",
          "2370:     free(settings->AcceptedCert);",
          "2375:    if (cleanup)",
          "2376:     free(settings->AllowedTlsCiphers);",
          "2381:    if (cleanup)",
          "2382:     free(settings->AlternateShell);",
          "2387:    if (cleanup)",
          "2388:     free(settings->AssistanceFile);",
          "2393:    if (cleanup)",
          "2394:     free(settings->AuthenticationServiceClass);",
          "2399:    if (cleanup)",
          "2400:     free(settings->CertificateAcceptedFingerprints);",
          "2405:    if (cleanup)",
          "2406:     free(settings->CertificateContent);",
          "2411:    if (cleanup)",
          "2412:     free(settings->CertificateFile);",
          "2417:    if (cleanup)",
          "2418:     free(settings->CertificateName);",
          "2423:    if (cleanup)",
          "2424:     free(settings->ClientAddress);",
          "2429:    if (cleanup)",
          "2430:     free(settings->ClientDir);",
          "2435:    if (cleanup)",
          "2436:     free(settings->ClientHostname);",
          "2441:    if (cleanup)",
          "2442:     free(settings->ClientProductId);",
          "2447:    if (cleanup)",
          "2448:     free(settings->ComputerName);",
          "2453:    if (cleanup)",
          "2454:     free(settings->ConfigPath);",
          "2459:    if (cleanup)",
          "2460:     free(settings->ConnectionFile);",
          "2465:    if (cleanup)",
          "2466:     free(settings->CurrentPath);",
          "2471:    if (cleanup)",
          "2472:     free(settings->Domain);",
          "2477:    if (cleanup)",
          "2478:     free(settings->DrivesToRedirect);",
          "2483:    if (cleanup)",
          "2484:     free(settings->DumpRemoteFxFile);",
          "2489:    if (cleanup)",
          "2490:     free(settings->DynamicDSTTimeZoneKeyName);",
          "2495:    if (cleanup)",
          "2496:     free(settings->GatewayAcceptedCert);",
          "2501:    if (cleanup)",
          "2502:     free(settings->GatewayAccessToken);",
          "2507:    if (cleanup)",
          "2508:     free(settings->GatewayDomain);",
          "2513:    if (cleanup)",
          "2514:     free(settings->GatewayHostname);",
          "2519:    if (cleanup)",
          "2520:     free(settings->GatewayPassword);",
          "2525:    if (cleanup)",
          "2526:     free(settings->GatewayUsername);",
          "2531:    if (cleanup)",
          "2532:     free(settings->HomePath);",
          "2537:    if (cleanup)",
          "2538:     free(settings->ImeFileName);",
          "2543:    if (cleanup)",
          "2544:     free(settings->KerberosKdc);",
          "2549:    if (cleanup)",
          "2550:     free(settings->KerberosRealm);",
          "2555:    if (cleanup)",
          "2556:     free(settings->NtlmSamFile);",
          "2561:    if (cleanup)",
          "2562:     free(settings->Password);",
          "2567:    if (cleanup)",
          "2568:     free(settings->PasswordHash);",
          "2573:    if (cleanup)",
          "2574:     free(settings->PlayRemoteFxFile);",
          "2579:    if (cleanup)",
          "2580:     free(settings->PreconnectionBlob);",
          "2585:    if (cleanup)",
          "2586:     free(settings->PrivateKeyContent);",
          "2591:    if (cleanup)",
          "2592:     free(settings->PrivateKeyFile);",
          "2597:    if (cleanup)",
          "2598:     free(settings->ProxyHostname);",
          "2603:    if (cleanup)",
          "2604:     free(settings->ProxyPassword);",
          "2609:    if (cleanup)",
          "2610:     free(settings->ProxyUsername);",
          "2615:    if (cleanup)",
          "2616:     free(settings->RDP2TCPArgs);",
          "2621:    if (cleanup)",
          "2622:     free(settings->RdpKeyContent);",
          "2627:    if (cleanup)",
          "2628:     free(settings->RdpKeyFile);",
          "2633:    if (cleanup)",
          "2634:     free(settings->RedirectionAcceptedCert);",
          "2639:    if (cleanup)",
          "2640:     free(settings->RedirectionDomain);",
          "2645:    if (cleanup)",
          "2646:     free(settings->RedirectionTargetFQDN);",
          "2651:    if (cleanup)",
          "2652:     free(settings->RedirectionTargetNetBiosName);",
          "2657:    if (cleanup)",
          "2658:     free(settings->RedirectionUsername);",
          "2663:    if (cleanup)",
          "2664:     free(settings->RemoteApplicationCmdLine);",
          "2669:    if (cleanup)",
          "2670:     free(settings->RemoteApplicationFile);",
          "2675:    if (cleanup)",
          "2676:     free(settings->RemoteApplicationGuid);",
          "2681:    if (cleanup)",
          "2682:     free(settings->RemoteApplicationIcon);",
          "2687:    if (cleanup)",
          "2688:     free(settings->RemoteApplicationName);",
          "2693:    if (cleanup)",
          "2694:     free(settings->RemoteApplicationProgram);",
          "2699:    if (cleanup)",
          "2700:     free(settings->RemoteApplicationWorkingDir);",
          "2705:    if (cleanup)",
          "2706:     free(settings->RemoteAssistancePassStub);",
          "2711:    if (cleanup)",
          "2712:     free(settings->RemoteAssistancePassword);",
          "2717:    if (cleanup)",
          "2718:     free(settings->RemoteAssistanceRCTicket);",
          "2723:    if (cleanup)",
          "2724:     free(settings->RemoteAssistanceSessionId);",
          "2729:    if (cleanup)",
          "2730:     free(settings->ServerHostname);",
          "2735:    if (cleanup)",
          "2736:     free(settings->ShellWorkingDirectory);",
          "2741:    if (cleanup)",
          "2742:     free(settings->TargetNetAddress);",
          "2747:    if (cleanup)",
          "2748:     free(settings->Username);",
          "2753:    if (cleanup)",
          "2754:     free(settings->WindowTitle);",
          "2759:    if (cleanup)",
          "2760:     free(settings->WmClass);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2702:  return TRUE;",
          "2703: }",
          "2705: const void* freerdp_settings_get_pointer(const rdpSettings* settings, size_t id)",
          "2706: {",
          "2707:  if (!settings)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2771: BOOL freerdp_settings_set_string(rdpSettings* settings, size_t id, const char* val)",
          "2772: {",
          "2773:  return freerdp_settings_set_string_(settings, id, val, TRUE);",
          "2774: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2792:    return FALSE;",
          "2793:  }",
          "2794: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2867: BOOL freerdp_settings_set_pointer(rdpSettings* settings, size_t id, const void* val)",
          "2868: {",
          "2869:  if (!settings)",
          "2870:   return FALSE;",
          "2872:  switch (id)",
          "2873:  {",
          "2874:   case FreeRDP_BitmapCacheV2CellInfo:",
          "2875:    settings->BitmapCacheV2CellInfo = (void*)val;",
          "2876:    break;",
          "2878:   case FreeRDP_ChannelDefArray:",
          "2879:    settings->ChannelDefArray = (void*)val;",
          "2880:    break;",
          "2882:   case FreeRDP_ClientAutoReconnectCookie:",
          "2883:    settings->ClientAutoReconnectCookie = (void*)val;",
          "2884:    break;",
          "2886:   case FreeRDP_ClientRandom:",
          "2887:    settings->ClientRandom = (void*)val;",
          "2888:    break;",
          "2890:   case FreeRDP_ClientTimeZone:",
          "2891:    settings->ClientTimeZone = (void*)val;",
          "2892:    break;",
          "2894:   case FreeRDP_DeviceArray:",
          "2895:    settings->DeviceArray = (void*)val;",
          "2896:    break;",
          "2898:   case FreeRDP_DynamicChannelArray:",
          "2899:    settings->DynamicChannelArray = (void*)val;",
          "2900:    break;",
          "2902:   case FreeRDP_FragCache:",
          "2903:    settings->FragCache = (void*)val;",
          "2904:    break;",
          "2906:   case FreeRDP_GlyphCache:",
          "2907:    settings->GlyphCache = (void*)val;",
          "2908:    break;",
          "2910:   case FreeRDP_LoadBalanceInfo:",
          "2911:    settings->LoadBalanceInfo = (void*)val;",
          "2912:    break;",
          "2914:   case FreeRDP_MonitorDefArray:",
          "2915:    settings->MonitorDefArray = (void*)val;",
          "2916:    break;",
          "2918:   case FreeRDP_MonitorIds:",
          "2919:    settings->MonitorIds = (void*)val;",
          "2920:    break;",
          "2922:   case FreeRDP_OrderSupport:",
          "2923:    settings->OrderSupport = (void*)val;",
          "2924:    break;",
          "2926:   case FreeRDP_Password51:",
          "2927:    settings->Password51 = (void*)val;",
          "2928:    break;",
          "2930:   case FreeRDP_RdpServerCertificate:",
          "2931:    settings->RdpServerCertificate = (void*)val;",
          "2932:    break;",
          "2934:   case FreeRDP_RdpServerRsaKey:",
          "2935:    settings->RdpServerRsaKey = (void*)val;",
          "2936:    break;",
          "2938:   case FreeRDP_ReceivedCapabilities:",
          "2939:    settings->ReceivedCapabilities = (void*)val;",
          "2940:    break;",
          "2942:   case FreeRDP_RedirectionPassword:",
          "2943:    settings->RedirectionPassword = (void*)val;",
          "2944:    break;",
          "2946:   case FreeRDP_RedirectionTsvUrl:",
          "2947:    settings->RedirectionTsvUrl = (void*)val;",
          "2948:    break;",
          "2950:   case FreeRDP_ServerAutoReconnectCookie:",
          "2951:    settings->ServerAutoReconnectCookie = (void*)val;",
          "2952:    break;",
          "2954:   case FreeRDP_ServerCertificate:",
          "2955:    settings->ServerCertificate = (void*)val;",
          "2956:    break;",
          "2958:   case FreeRDP_ServerRandom:",
          "2959:    settings->ServerRandom = (void*)val;",
          "2960:    break;",
          "2962:   case FreeRDP_StaticChannelArray:",
          "2963:    settings->StaticChannelArray = (void*)val;",
          "2964:    break;",
          "2966:   case FreeRDP_TargetNetAddresses:",
          "2967:    settings->TargetNetAddresses = (void*)val;",
          "2968:    break;",
          "2970:   case FreeRDP_TargetNetPorts:",
          "2971:    settings->TargetNetPorts = (void*)val;",
          "2972:    break;",
          "2974:   case FreeRDP_instance:",
          "2975:    settings->instance = (void*)val;",
          "2976:    break;",
          "2978:   default:",
          "2979:    WLog_ERR(TAG, \"[%s] Invalid key index %\" PRIuz, __FUNCTION__, id);",
          "2980:    return FALSE;",
          "2981:  }",
          "2982:  return TRUE;",
          "2983: }",
          "",
          "---------------"
        ],
        "libfreerdp/common/settings_str.c||libfreerdp/common/settings_str.c": [
          "File: libfreerdp/common/settings_str.c -> libfreerdp/common/settings_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <freerdp/settings.h>",
          "4: #include <freerdp/log.h>",
          "6: #define TAG FREERDP_TAG(\"common.settings\")",
          "8: struct settings_str_entry",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"../core/settings.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:  { FreeRDP_instance, 8, \"FreeRDP_instance\" },",
          "386: };",
          "388: SSIZE_T freerdp_settings_get_key_for_name(const char* value)",
          "389: {",
          "390:  size_t x;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390: BOOL freerdp_settings_clone_keys(rdpSettings* dst, const rdpSettings* src)",
          "391: {",
          "392:  size_t x;",
          "393:  for (x = 0; x < ARRAYSIZE(settings_map); x++)",
          "394:  {",
          "395:   const struct settings_str_entry* cur = &settings_map[x];",
          "396:   switch (cur->type)",
          "397:   {",
          "399:    {",
          "400:     BOOL sval = freerdp_settings_get_bool(src, cur->id);",
          "401:     if (!freerdp_settings_set_bool(dst, cur->id, sval))",
          "402:      return FALSE;",
          "403:    }",
          "404:    break;",
          "406:    {",
          "407:     UINT16 sval = freerdp_settings_get_uint16(src, cur->id);",
          "408:     if (!freerdp_settings_set_uint16(dst, cur->id, sval))",
          "409:      return FALSE;",
          "410:    }",
          "411:    break;",
          "413:    {",
          "414:     INT16 sval = freerdp_settings_get_int16(src, cur->id);",
          "415:     if (!freerdp_settings_set_int16(dst, cur->id, sval))",
          "416:      return FALSE;",
          "417:    }",
          "418:    break;",
          "420:    {",
          "421:     UINT32 sval = freerdp_settings_get_uint32(src, cur->id);",
          "422:     if (!freerdp_settings_set_uint32(dst, cur->id, sval))",
          "423:      return FALSE;",
          "424:    }",
          "425:    break;",
          "427:    {",
          "428:     INT32 sval = freerdp_settings_get_int32(src, cur->id);",
          "429:     if (!freerdp_settings_set_int32(dst, cur->id, sval))",
          "430:      return FALSE;",
          "431:    }",
          "432:    break;",
          "434:    {",
          "435:     UINT64 sval = freerdp_settings_get_uint64(src, cur->id);",
          "436:     if (!freerdp_settings_set_uint64(dst, cur->id, sval))",
          "437:      return FALSE;",
          "438:    }",
          "439:    break;",
          "441:    {",
          "442:     INT64 sval = freerdp_settings_get_int64(src, cur->id);",
          "443:     if (!freerdp_settings_set_int64(dst, cur->id, sval))",
          "444:      return FALSE;",
          "445:    }",
          "446:    break;",
          "448:    {",
          "449:     const char* sval = freerdp_settings_get_string(src, cur->id);",
          "450:     if (!freerdp_settings_set_string_(dst, cur->id, sval, FALSE))",
          "451:      return FALSE;",
          "452:    }",
          "453:    break;",
          "455:    {",
          "456:     const void* sval = freerdp_settings_get_pointer(src, cur->id);",
          "457:     if (!freerdp_settings_set_pointer(dst, cur->id, sval))",
          "458:      return FALSE;",
          "459:    }",
          "460:    break;",
          "461:   }",
          "462:  }",
          "463:  return TRUE;",
          "464: }",
          "466: void freerdp_settings_free_keys(rdpSettings* dst, BOOL cleanup)",
          "467: {",
          "468:  size_t x;",
          "469:  for (x = 0; x < ARRAYSIZE(settings_map); x++)",
          "470:  {",
          "471:   const struct settings_str_entry* cur = &settings_map[x];",
          "472:   switch (cur->type)",
          "473:   {",
          "475:     freerdp_settings_set_string_(dst, cur->id, NULL, cleanup);",
          "476:     break;",
          "478:     freerdp_settings_set_pointer(dst, cur->id, NULL);",
          "479:     break;",
          "480:   }",
          "481:  }",
          "482: }",
          "",
          "---------------"
        ],
        "libfreerdp/core/settings.c||libfreerdp/core/settings.c": [
          "File: libfreerdp/core/settings.c -> libfreerdp/core/settings.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include <freerdp/build-config.h>",
          "41: #include <ctype.h>",
          "43: #ifdef _WIN32",
          "44: #pragma warning(push)",
          "45: #pragma warning(disable : 4244)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include \"settings.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627: static void freerdp_settings_free_internal(rdpSettings* settings)",
          "628: {",
          "638:  free(settings->ChannelDefArray);",
          "639:  free(settings->MonitorDefArray);",
          "640:  free(settings->MonitorIds);",
          "649:  free(settings->ReceivedCapabilities);",
          "650:  free(settings->OrderSupport);",
          "653:  free(settings->ServerRandom);",
          "654:  free(settings->ClientRandom);",
          "655:  free(settings->ServerCertificate);",
          "657:  certificate_free(settings->RdpServerCertificate);",
          "662:  free(settings->ClientAutoReconnectCookie);",
          "663:  free(settings->ServerAutoReconnectCookie);",
          "664:  free(settings->ClientTimeZone);",
          "",
          "[Removed Lines]",
          "629:  free(settings->ServerHostname);",
          "630:  free(settings->Username);",
          "631:  free(settings->Password);",
          "632:  free(settings->Domain);",
          "633:  free(settings->PasswordHash);",
          "634:  free(settings->AcceptedCert);",
          "635:  free(settings->AlternateShell);",
          "636:  free(settings->ShellWorkingDirectory);",
          "637:  free(settings->ComputerName);",
          "641:  free(settings->ClientAddress);",
          "642:  free(settings->ClientDir);",
          "643:  free(settings->AllowedTlsCiphers);",
          "644:  free(settings->NtlmSamFile);",
          "645:  free(settings->CertificateFile);",
          "646:  free(settings->PrivateKeyFile);",
          "647:  free(settings->ConnectionFile);",
          "648:  free(settings->AssistanceFile);",
          "651:  free(settings->ClientHostname);",
          "652:  free(settings->ClientProductId);",
          "656:  free(settings->RdpKeyFile);",
          "658:  free(settings->CertificateContent);",
          "659:  free(settings->PrivateKeyContent);",
          "660:  free(settings->RdpKeyContent);",
          "661:  free(settings->CertificateAcceptedFingerprints);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "666:  free(settings->GlyphCache);",
          "667:  free(settings->FragCache);",
          "668:  key_free(settings->RdpServerRsaKey);",
          "672:  free(settings->LoadBalanceInfo);",
          "678:  free(settings->RedirectionPassword);",
          "679:  free(settings->RedirectionTsvUrl);",
          "710:  freerdp_target_net_addresses_free(settings);",
          "711:  freerdp_device_collection_free(settings);",
          "712:  freerdp_static_channel_collection_free(settings);",
          "713:  freerdp_dynamic_channel_collection_free(settings);",
          "715: }",
          "717: void freerdp_settings_free(rdpSettings* settings)",
          "",
          "[Removed Lines]",
          "669:  free(settings->ConfigPath);",
          "670:  free(settings->CurrentPath);",
          "671:  free(settings->HomePath);",
          "673:  free(settings->TargetNetAddress);",
          "674:  free(settings->RedirectionTargetFQDN);",
          "675:  free(settings->RedirectionTargetNetBiosName);",
          "676:  free(settings->RedirectionUsername);",
          "677:  free(settings->RedirectionDomain);",
          "680:  free(settings->RedirectionAcceptedCert);",
          "681:  free(settings->RemoteAssistanceSessionId);",
          "682:  free(settings->RemoteAssistancePassword);",
          "683:  free(settings->RemoteAssistancePassStub);",
          "684:  free(settings->RemoteAssistanceRCTicket);",
          "685:  free(settings->AuthenticationServiceClass);",
          "686:  free(settings->GatewayHostname);",
          "687:  free(settings->GatewayUsername);",
          "688:  free(settings->GatewayPassword);",
          "689:  free(settings->GatewayDomain);",
          "690:  free(settings->GatewayAccessToken);",
          "691:  free(settings->GatewayAcceptedCert);",
          "692:  free(settings->CertificateName);",
          "693:  free(settings->DynamicDSTTimeZoneKeyName);",
          "694:  free(settings->PreconnectionBlob);",
          "695:  free(settings->KerberosKdc);",
          "696:  free(settings->KerberosRealm);",
          "697:  free(settings->DumpRemoteFxFile);",
          "698:  free(settings->PlayRemoteFxFile);",
          "699:  free(settings->RemoteApplicationName);",
          "700:  free(settings->RemoteApplicationIcon);",
          "701:  free(settings->RemoteApplicationProgram);",
          "702:  free(settings->RemoteApplicationFile);",
          "703:  free(settings->RemoteApplicationGuid);",
          "704:  free(settings->RemoteApplicationCmdLine);",
          "705:  free(settings->ImeFileName);",
          "706:  free(settings->DrivesToRedirect);",
          "707:  free(settings->WindowTitle);",
          "708:  free(settings->WmClass);",
          "709:  free(settings->ActionScript);",
          "714:  memset(settings, 0, sizeof(rdpSettings));",
          "",
          "[Added Lines]",
          "657:  free(settings->ActionScript);",
          "658:  settings->ActionScript = NULL;",
          "661:  freerdp_settings_free_keys(settings, TRUE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "723:  free(settings);",
          "724: }",
          "727: {",
          "728:  UINT32 index;",
          "731:   return FALSE;",
          "800:  if (settings->LoadBalanceInfo && settings->LoadBalanceInfoLength)",
          "801:  {",
          "",
          "[Removed Lines]",
          "726: BOOL freerdp_settings_copy(rdpSettings* _settings, const rdpSettings* settings)",
          "730:  if (!settings || !_settings)",
          "732:  freerdp_settings_free_internal(_settings);",
          "736: #define CHECKED_STRDUP(name)                                            \\",
          "737:  if (settings->name && !(_settings->name = _strdup(settings->name))) \\",
          "738:  goto out_fail",
          "798:  CHECKED_STRDUP(ActionScript);",
          "",
          "[Added Lines]",
          "673: static BOOL freerdp_settings_int_buffer_copy(rdpSettings* _settings, const rdpSettings* settings)",
          "675:  BOOL rc = FALSE;",
          "678:  if (!_settings || !settings)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "903:  CopyMemory(_settings->ReceivedCapabilities, settings->ReceivedCapabilities, 32);",
          "904:  CopyMemory(_settings->OrderSupport, settings->OrderSupport, 32);",
          "915:  _settings->BitmapCacheV2CellInfo =",
          "916:      (BITMAP_CACHE_V2_CELL_INFO*)malloc(sizeof(BITMAP_CACHE_V2_CELL_INFO) * 6);",
          "",
          "[Removed Lines]",
          "905:  _settings->ClientHostname = _strdup(settings->ClientHostname);",
          "907:  if (!_settings->ClientHostname)",
          "908:   goto out_fail;",
          "910:  _settings->ClientProductId = _strdup(settings->ClientProductId);",
          "912:  if (!_settings->ClientProductId)",
          "913:   goto out_fail;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "933:  CopyMemory(_settings->GlyphCache, settings->GlyphCache, sizeof(GLYPH_CACHE_DEFINITION) * 10);",
          "934:  CopyMemory(_settings->FragCache, settings->FragCache, sizeof(GLYPH_CACHE_DEFINITION));",
          "946:  _settings->ClientAutoReconnectCookie =",
          "947:      (ARC_CS_PRIVATE_PACKET*)malloc(sizeof(ARC_CS_PRIVATE_PACKET));",
          "",
          "[Removed Lines]",
          "936:  if (settings->CertificateContent)",
          "937:   _settings->CertificateContent = _strdup(settings->CertificateContent);",
          "938:  if (settings->PrivateKeyContent)",
          "939:   _settings->PrivateKeyContent = _strdup(settings->PrivateKeyContent);",
          "940:  if (settings->RdpKeyContent)",
          "941:   _settings->RdpKeyContent = _strdup(settings->RdpKeyContent);",
          "942:  if (settings->CertificateAcceptedFingerprints)",
          "943:   _settings->CertificateAcceptedFingerprints =",
          "944:       _strdup(settings->CertificateAcceptedFingerprints);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1119:    goto out_fail;",
          "1120:  }",
          "1122:  return TRUE;",
          "1123: out_fail:",
          "1124:  freerdp_settings_free_internal(_settings);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "984:  if (settings->ActionScript)",
          "985:   _settings->ActionScript = _strdup(settings->ActionScript);",
          "986:  rc = TRUE;",
          "987: out_fail:",
          "988:  return rc;",
          "989: }",
          "991: BOOL freerdp_settings_copy(rdpSettings* _settings, const rdpSettings* settings)",
          "992: {",
          "993:  BOOL rc;",
          "995:  if (!settings || !_settings)",
          "996:   return FALSE;",
          "999:  freerdp_settings_free_internal(_settings);",
          "1002:  rc = freerdp_settings_clone_keys(_settings, settings);",
          "1004:  _settings->LoadBalanceInfo = NULL;",
          "1005:  _settings->ServerRandom = NULL;",
          "1006:  _settings->ClientRandom = NULL;",
          "1007:  _settings->RdpServerCertificate = NULL;",
          "1008:  _settings->RdpServerRsaKey = NULL;",
          "1009:  _settings->ChannelDefArray = NULL;",
          "1010:  _settings->MonitorDefArray = NULL;",
          "1011:  _settings->MonitorIds = NULL;",
          "1012:  _settings->ReceivedCapabilities = NULL;",
          "1013:  _settings->OrderSupport = NULL;",
          "1014:  _settings->BitmapCacheV2CellInfo = NULL;",
          "1015:  _settings->GlyphCache = NULL;",
          "1016:  _settings->FragCache = NULL;",
          "1017:  _settings->ClientAutoReconnectCookie = NULL;",
          "1018:  _settings->ServerAutoReconnectCookie = NULL;",
          "1019:  _settings->ClientTimeZone = NULL;",
          "1020:  _settings->RedirectionPassword = NULL;",
          "1021:  _settings->RedirectionTsvUrl = NULL;",
          "1022:  _settings->TargetNetAddresses = NULL;",
          "1023:  _settings->DeviceArray = NULL;",
          "1024:  _settings->StaticChannelArray = NULL;",
          "1025:  _settings->DynamicChannelArray = NULL;",
          "1026:  _settings->ActionScript = NULL;",
          "1027:  if (!rc)",
          "1028:   goto out_fail;",
          "1031:  if (!freerdp_settings_int_buffer_copy(_settings, settings))",
          "1032:   goto out_fail;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1135:  return _settings;",
          "1136: out_fail:",
          "1144:  return NULL;",
          "1145: }",
          "1146: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "1143:  free(_settings);",
          "",
          "[Added Lines]",
          "1048:  freerdp_settings_free(_settings);",
          "",
          "---------------"
        ],
        "libfreerdp/core/settings.h||libfreerdp/core/settings.h": [
          "File: libfreerdp/core/settings.h -> libfreerdp/core/settings.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <freerdp/api.h>",
          "28: FREERDP_LOCAL BOOL freerdp_settings_set_default_order_support(rdpSettings* settings);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: FREERDP_LOCAL BOOL freerdp_settings_set_pointer(rdpSettings* dst, size_t index, const void* ptr);",
          "30: FREERDP_LOCAL BOOL freerdp_settings_clone_keys(rdpSettings* dst, const rdpSettings* src);",
          "31: FREERDP_LOCAL void freerdp_settings_free_keys(rdpSettings* dst, BOOL cleanup);",
          "32: FREERDP_LOCAL BOOL freerdp_settings_set_string_(rdpSettings* settings, size_t id, const char* val,",
          "33:                                                 BOOL cleanup);",
          "",
          "---------------"
        ],
        "libfreerdp/core/test/TestSettings.c||libfreerdp/core/test/TestSettings.c": [
          "File: libfreerdp/core/test/TestSettings.c -> libfreerdp/core/test/TestSettings.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  int rc = -1;",
          "7:  size_t x;",
          "8:  rdpSettings* settings = NULL;",
          "10:  WINPR_UNUSED(argc);",
          "11:  WINPR_UNUSED(argv);",
          "12:  settings = freerdp_settings_new(0);",
          "",
          "[Removed Lines]",
          "9:  rdpSettings* cloned;",
          "",
          "[Added Lines]",
          "9:  rdpSettings* cloned = NULL;",
          "10:  rdpSettings* cloned2 = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   return -1;",
          "18:  }",
          "22:  cloned = freerdp_settings_clone(settings);",
          "24:  if (!cloned)",
          "31: #if defined(have_bool_list_indices)",
          "33:  for (x = 0; x < ARRAYSIZE(bool_list_indices); x++)",
          "34:  {",
          "35:   const size_t key = bool_list_indices[x];",
          "36:   const BOOL val = freerdp_settings_get_bool(settings, key);",
          "38:   if (!freerdp_settings_set_bool(settings, key, val))",
          "39:    goto fail;",
          "40:  }",
          "",
          "[Removed Lines]",
          "20:  settings->Username = _strdup(\"abcdefg\");",
          "21:  settings->Password = _strdup(\"xyz\");",
          "25:  {",
          "26:   printf(\"Problem cloning settings\\n\");",
          "27:   freerdp_settings_free(settings);",
          "28:   return -1;",
          "29:  }",
          "",
          "[Added Lines]",
          "21:  if (!freerdp_settings_set_string(settings, FreeRDP_Username, \"abcdefg\"))",
          "22:   goto fail;",
          "23:  if (!freerdp_settings_set_string(settings, FreeRDP_Password, \"xyz\"))",
          "24:   goto fail;",
          "29:   goto fail;",
          "36:   const char* name = freerdp_settings_get_name_for_key(key);",
          "38:   const BOOL cval = freerdp_settings_get_bool(cloned, key);",
          "39:   if (val != cval)",
          "40:   {",
          "41:    printf(\"mismatch for key %s: %u -> copy %u\\n\", name, val, cval);",
          "42:    goto fail;",
          "43:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:  for (x = 0; x < ARRAYSIZE(int16_list_indices); x++)",
          "46:  {",
          "47:   const size_t key = int16_list_indices[x];",
          "48:   const INT16 val = freerdp_settings_get_int16(settings, key);",
          "50:   if (!freerdp_settings_set_int16(settings, key, val))",
          "51:    goto fail;",
          "52:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   const char* name = freerdp_settings_get_name_for_key(key);",
          "56:   const INT16 cval = freerdp_settings_get_int16(cloned, key);",
          "57:   if (val != cval)",
          "58:   {",
          "59:    printf(\"mismatch for key %s: %\" PRId16 \" -> copy %\" PRId16 \"\\n\", name, val, cval);",
          "60:    goto fail;",
          "61:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:  for (x = 0; x < ARRAYSIZE(uint16_list_indices); x++)",
          "58:  {",
          "59:   const size_t key = uint16_list_indices[x];",
          "60:   const UINT16 val = freerdp_settings_get_uint16(settings, key);",
          "62:   if (!freerdp_settings_set_uint16(settings, key, val))",
          "63:    goto fail;",
          "64:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   const char* name = freerdp_settings_get_name_for_key(key);",
          "74:   const UINT16 cval = freerdp_settings_get_uint16(cloned, key);",
          "75:   if (val != cval)",
          "76:   {",
          "77:    printf(\"mismatch for key %s: %\" PRIu16 \" -> copy %\" PRIu16 \"\\n\", name, val, cval);",
          "78:    goto fail;",
          "79:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "69:  for (x = 0; x < ARRAYSIZE(uint32_list_indices); x++)",
          "70:  {",
          "71:   const size_t key = uint32_list_indices[x];",
          "72:   const UINT32 val = freerdp_settings_get_uint32(settings, key);",
          "74:   if (!freerdp_settings_set_uint32(settings, key, val))",
          "75:    goto fail;",
          "76:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:   const char* name = freerdp_settings_get_name_for_key(key);",
          "92:   const UINT32 cval = freerdp_settings_get_uint32(cloned, key);",
          "93:   if (val != cval)",
          "94:   {",
          "95:    printf(\"mismatch for key %s: %\" PRIu32 \" -> copy %\" PRIu32 \"\\n\", name, val, cval);",
          "96:    goto fail;",
          "97:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "81:  for (x = 0; x < ARRAYSIZE(int32_list_indices); x++)",
          "82:  {",
          "83:   const size_t key = int32_list_indices[x];",
          "84:   const INT32 val = freerdp_settings_get_int32(settings, key);",
          "86:   if (!freerdp_settings_set_int32(settings, key, val))",
          "87:    goto fail;",
          "88:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   const char* name = freerdp_settings_get_name_for_key(key);",
          "110:   const INT32 cval = freerdp_settings_get_int32(cloned, key);",
          "111:   if (val != cval)",
          "112:   {",
          "113:    printf(\"mismatch for key %s: %\" PRId32 \" -> copy %\" PRId32 \"\\n\", name, val, cval);",
          "114:    goto fail;",
          "115:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "93:  for (x = 0; x < ARRAYSIZE(uint64_list_indices); x++)",
          "94:  {",
          "95:   const size_t key = uint64_list_indices[x];",
          "96:   const UINT64 val = freerdp_settings_get_uint64(settings, key);",
          "98:   if (!freerdp_settings_set_uint64(settings, key, val))",
          "99:    goto fail;",
          "100:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:   const char* name = freerdp_settings_get_name_for_key(key);",
          "128:   const UINT64 cval = freerdp_settings_get_uint64(cloned, key);",
          "129:   if (val != cval)",
          "130:   {",
          "131:    printf(\"mismatch for key %s: %\" PRIu64 \" -> copy %\" PRIu64 \"\\n\", name, val, cval);",
          "132:    goto fail;",
          "133:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "105:  for (x = 0; x < ARRAYSIZE(int64_list_indices); x++)",
          "106:  {",
          "107:   const size_t key = int64_list_indices[x];",
          "108:   const INT64 val = freerdp_settings_get_int64(settings, key);",
          "110:   if (!freerdp_settings_set_int64(settings, key, val))",
          "111:    goto fail;",
          "112:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:   const char* name = freerdp_settings_get_name_for_key(key);",
          "146:   const INT64 cval = freerdp_settings_get_int64(cloned, key);",
          "147:   if (val != cval)",
          "148:   {",
          "149:    printf(\"mismatch for key %s: %\" PRId64 \" -> copy %\" PRId64 \"\\n\", name, val, cval);",
          "150:    goto fail;",
          "151:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "119:   const size_t key = string_list_indices[x];",
          "120:   const char val[] = \"test-string\";",
          "121:   const char* res;",
          "123:   if (!freerdp_settings_set_string(settings, key, val))",
          "124:    goto fail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:   const char* name = freerdp_settings_get_name_for_key(key);",
          "165:   const char* oval = freerdp_settings_get_string(settings, key);",
          "166:   const char* cval = freerdp_settings_get_string(cloned, key);",
          "167:   if ((oval != cval) && (strcmp(oval, cval) != 0))",
          "168:   {",
          "169:    printf(\"mismatch for key %s: %s -> copy %s\\n\", name, oval, cval);",
          "170:    goto fail;",
          "171:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "139:  }",
          "141: #endif",
          "142:  rc = 0;",
          "143: fail:",
          "144:  freerdp_settings_free(cloned);",
          "145:  freerdp_settings_free(settings);",
          "146:  return rc;",
          "147: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:  cloned2 = freerdp_settings_clone(settings);",
          "192:  if (!cloned2)",
          "193:   goto fail;",
          "194:  if (!freerdp_settings_copy(cloned2, cloned))",
          "195:   goto fail;",
          "200:  freerdp_settings_free(cloned2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2897576c3dee3b8d21e41792aeabae1f12437d95",
      "candidate_info": {
        "commit_hash": "2897576c3dee3b8d21e41792aeabae1f12437d95",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2897576c3dee3b8d21e41792aeabae1f12437d95",
        "files": [
          "winpr/libwinpr/sspi/test/TestNTLM.c"
        ],
        "message": "Fixed memory leak in NTLM test\n\n(cherry picked from commit 135458cf27160d50e6294f87ef80f27f1f65d319)",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/test/TestNTLM.c||winpr/libwinpr/sspi/test/TestNTLM.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/test/TestNTLM.c||winpr/libwinpr/sspi/test/TestNTLM.c": [
          "File: winpr/libwinpr/sspi/test/TestNTLM.c -> winpr/libwinpr/sspi/test/TestNTLM.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470: int TestNTLM(int argc, char* argv[])",
          "471: {",
          "472:  int status;",
          "473:  PSecBuffer pSecBuffer;",
          "476:  BOOL DynamicTest = TRUE;",
          "",
          "[Removed Lines]",
          "474:  TEST_NTLM_CLIENT* client;",
          "475:  TEST_NTLM_SERVER* server;",
          "",
          "[Added Lines]",
          "473:  int rc = -1;",
          "475:  TEST_NTLM_CLIENT* client = NULL;",
          "476:  TEST_NTLM_SERVER* server = NULL;",
          "479:  WINPR_UNUSED(argc);",
          "480:  WINPR_UNUSED(argv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482:  if (!client)",
          "483:  {",
          "484:   printf(\"Memory allocation failed\");",
          "486:  }",
          "488:  status = test_ntlm_client_init(client, TEST_NTLM_USER, TEST_NTLM_DOMAIN, TEST_NTLM_PASSWORD);",
          "",
          "[Removed Lines]",
          "485:   return -1;",
          "",
          "[Added Lines]",
          "490:   goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "490:  if (status < 0)",
          "491:  {",
          "492:   printf(\"test_ntlm_client_init failure\\n\");",
          "494:  }",
          "",
          "[Removed Lines]",
          "493:   return -1;",
          "",
          "[Added Lines]",
          "498:   goto fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501:  if (!server)",
          "502:  {",
          "503:   printf(\"Memory allocation failed\\n\");",
          "505:  }",
          "507:  status = test_ntlm_server_init(server);",
          "",
          "[Removed Lines]",
          "504:   return -1;",
          "",
          "[Added Lines]",
          "509:   goto fail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "509:  if (status < 0)",
          "510:  {",
          "511:   printf(\"test_ntlm_server_init failure\\n\");",
          "513:  }",
          "",
          "[Removed Lines]",
          "512:   return -1;",
          "",
          "[Added Lines]",
          "517:   goto fail;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:  if (status < 0)",
          "521:  {",
          "522:   printf(\"test_ntlm_client_authenticate failure\\n\");",
          "524:  }",
          "526:  if (!DynamicTest)",
          "",
          "[Removed Lines]",
          "523:   return -1;",
          "",
          "[Added Lines]",
          "528:   goto fail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "557:   if (!pSecBuffer->pvBuffer)",
          "558:   {",
          "559:    printf(\"Memory allocation failed\\n\");",
          "561:   }",
          "563:   CopyMemory(pSecBuffer->pvBuffer, TEST_NTLM_NEGOTIATE, pSecBuffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "560:    return -1;",
          "",
          "[Added Lines]",
          "565:    goto fail;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "578:  if (status < 0)",
          "579:  {",
          "580:   printf(\"test_ntlm_server_authenticate failure\\n\");",
          "582:  }",
          "584:  if (!DynamicTest)",
          "",
          "[Removed Lines]",
          "581:   return -1;",
          "",
          "[Added Lines]",
          "586:   goto fail;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "616:   if (!pSecBuffer->pvBuffer)",
          "617:   {",
          "618:    printf(\"Memory allocation failed\\n\");",
          "620:   }",
          "622:   CopyMemory(pSecBuffer->pvBuffer, TEST_NTLM_CHALLENGE, pSecBuffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "619:    return -1;",
          "",
          "[Added Lines]",
          "624:    goto fail;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "643:  if (status < 0)",
          "644:  {",
          "645:   printf(\"test_ntlm_client_authenticate failure\\n\");",
          "647:  }",
          "649:  pSecBuffer = &(client->outputBuffer[0]);",
          "",
          "[Removed Lines]",
          "646:   return -1;",
          "",
          "[Added Lines]",
          "651:   goto fail;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "656:   if (!pSecBuffer->pvBuffer)",
          "657:   {",
          "658:    printf(\"Memory allocation failed\\n\");",
          "660:   }",
          "662:   CopyMemory(pSecBuffer->pvBuffer, TEST_NTLM_AUTHENTICATE, pSecBuffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "659:    return -1;",
          "",
          "[Added Lines]",
          "664:    goto fail;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "676:  if (status < 0)",
          "677:  {",
          "678:   printf(\"test_ntlm_server_authenticate failure\\n\");",
          "680:  }",
          "685:  test_ntlm_client_free(client);",
          "686:  test_ntlm_server_free(server);",
          "688: }",
          "",
          "[Removed Lines]",
          "679:   return -1;",
          "687:  return 0;",
          "",
          "[Added Lines]",
          "684:   goto fail;",
          "687:  rc = 0;",
          "689: fail:",
          "695:  return rc;",
          "",
          "---------------"
        ]
      }
    }
  ]
}