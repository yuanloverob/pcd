{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70d1a1a3ed64d7bd82fd90268e4c9cf208ca1be0",
      "candidate_info": {
        "commit_hash": "70d1a1a3ed64d7bd82fd90268e4c9cf208ca1be0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/70d1a1a3ed64d7bd82fd90268e4c9cf208ca1be0",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Further improve detection of corrupt records in fts3.\n\nFossilOrigin-Name: a0f6d526baecd061a5e2bec5eb698fb5dfb10122ac79c853d7b3f4a48bc9f49b",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2025:     if( rc==SQLITE_OK ){",
          "2026:       int iNewHeight = 0;",
          "2027:       fts3GetVarint32(zBlob, &iNewHeight);",
          "2029:         rc = FTS_CORRUPT_VTAB;",
          "2030:       }else{",
          "2031:         rc = fts3SelectLeaf(p, zTerm, nTerm, zBlob, nBlob, piLeaf, piLeaf2);",
          "",
          "[Removed Lines]",
          "2028:       if( iNewHeight<=iHeight ){",
          "",
          "[Added Lines]",
          "2028:       if( iNewHeight>=iHeight ){",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1379:   pNext += fts3GetVarint32(pNext, &nSuffix);",
          "1380:   if( nSuffix<=0",
          "1381:    || (&pReader->aNode[pReader->nNode] - pNext)<nSuffix",
          "1383:   ){",
          "1384:     return FTS_CORRUPT_VTAB;",
          "1385:   }",
          "",
          "[Removed Lines]",
          "1382:    || nPrefix>pReader->nTermAlloc",
          "",
          "[Added Lines]",
          "1382:    || nPrefix>pReader->nTerm",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2575a68c3965e72f2ab211d933012442755afe6a9b7de9e9e50cdd2155fd1ec8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1231b4773deac1c7d5c44b9119ed053f96c69e90",
      "candidate_info": {
        "commit_hash": "1231b4773deac1c7d5c44b9119ed053f96c69e90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1231b4773deac1c7d5c44b9119ed053f96c69e90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Remove code from the constraint checker that generates virtual column values with the incorrect time.  Turns out the the regular code for all other columns works correctly and so the incorrect special-case code is not actually needed.  Fix for ticket [3ea175512444b0d1].\n\nFossilOrigin-Name: 5b4c0f2ddc6f324e23bbde0ee3d1ab672cfe8ab5044c9b693f4c33cdd75c211e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 713fe86b8c9f3c9ef8af952019e99ba2f4741326226264de6a66baaeb1803d2a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1862:         x = regNewData;",
          "1863:         sqlite3VdbeAddOp2(v, OP_IntCopy, x, regIdx+i);",
          "1864:         VdbeComment((v, \"rowid\"));",
          "1872:       }else{",
          "1873:         testcase( sqlite3TableColumnToStorage(pTab, iField)!=iField );",
          "1874:         x = sqlite3TableColumnToStorage(pTab, iField) + regNewData + 1;",
          "",
          "[Removed Lines]",
          "1865: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1866:       }else if( pTab->aCol[iField].colFlags & COLFLAG_VIRTUAL ){",
          "1867:         pParse->iSelfTab = -(regNewData+1);",
          "1868:         sqlite3ExprCodeCopy(pParse, pTab->aCol[iField].pDflt, regIdx+i);",
          "1869:         pParse->iSelfTab = 0;",
          "1870:         VdbeComment((v, \"%s column %d\", pIdx->zName, i));",
          "1871: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4afdfa195b0ae5fe3b8638c722c937792d3cfd0c",
      "candidate_info": {
        "commit_hash": "4afdfa195b0ae5fe3b8638c722c937792d3cfd0c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4afdfa195b0ae5fe3b8638c722c937792d3cfd0c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/window1.test"
        ],
        "message": "Fix the OP_OpenEphemeral opcode in the bytecode engine so that if it is called a second or subsequent time, it merely clears the existing table rather than creating a new one.  Proposed fix for ticket [d0866b26f83e9c55e30de0821f5d].\n\nFossilOrigin-Name: 4678cb1044f0b4dc813e48f3bd0f85240a66e2ecf8763280d66726cc031c93a7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1bdee199a71e0a6c247b85e72de9e3a3099b7179c33288735721facef3b96459",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3659:       SQLITE_OPEN_TRANSIENT_DB;",
          "3660:   assert( pOp->p1>=0 );",
          "3661:   assert( pOp->p2>=0 );",
          "3662:   pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_BTREE);",
          "3663:   if( pCx==0 ) goto no_mem;",
          "3664:   pCx->nullRow = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3665:   pCx = p->apCsr[pOp->p1];",
          "3666:   if( pCx ){",
          "3669:     rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);",
          "3670:     if( rc ) goto abort_due_to_error;",
          "3671:     break;",
          "3672:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3677:     if( (pCx->pKeyInfo = pKeyInfo = pOp->p4.pKeyInfo)!=0 ){",
          "3679:       assert( pOp->p4type==P4_KEYINFO );",
          "3681:       if( rc==SQLITE_OK ){",
          "3683:         assert( pKeyInfo->db==db );",
          "3684:         assert( pKeyInfo->enc==ENC(db) );",
          "3686:                                 pKeyInfo, pCx->uc.pCursor);",
          "3687:       }",
          "3688:       pCx->isTable = 0;",
          "3689:     }else{",
          "3690:       rc = sqlite3BtreeCursor(pCx->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "3691:                               0, pCx->uc.pCursor);",
          "3692:       pCx->isTable = 1;",
          "",
          "[Removed Lines]",
          "3678:       int pgno;",
          "3680:       rc = sqlite3BtreeCreateTable(pCx->pBtx, &pgno, BTREE_BLOBKEY | pOp->p5);",
          "3682:         assert( pgno==MASTER_ROOT+1 );",
          "3685:         rc = sqlite3BtreeCursor(pCx->pBtx, pgno, BTREE_WRCSR,",
          "",
          "[Added Lines]",
          "3690:       rc = sqlite3BtreeCreateTable(pCx->pBtx, (int*)&pCx->pgnoRoot,",
          "3691:                                    BTREE_BLOBKEY | pOp->p5);",
          "3693:         assert( pCx->pgnoRoot==MASTER_ROOT+1 );",
          "3696:         rc = sqlite3BtreeCursor(pCx->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "3701:       pCx->pgnoRoot = MASTER_ROOT;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:   );",
          "621: } {1 2 3}",
          "623: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623: # 2018-12-31",
          "624: # https://www.sqlite.org/src/info/d0866b26f83e9c55",
          "625: # Window function in correlated subquery causes assertion fault",
          "626: #",
          "627: do_catchsql_test 15.0 {",
          "628:   WITH t(id, parent) AS (",
          "629:   SELECT CAST(1 AS INT), CAST(NULL AS INT)",
          "630:   UNION ALL",
          "631:   SELECT 2, NULL",
          "632:   UNION ALL",
          "633:   SELECT 3, 1",
          "634:   UNION ALL",
          "635:   SELECT 4, 1",
          "636:   UNION ALL",
          "637:   SELECT 5, 2",
          "638:   UNION ALL",
          "639:   SELECT 6, 2",
          "640:   ), q AS (",
          "641:   SELECT t.*, ROW_NUMBER() OVER (ORDER BY t.id) AS rn",
          "642:     FROM t",
          "643:    WHERE parent IS NULL",
          "644:    UNION ALL",
          "645:   SELECT t.*, ROW_NUMBER() OVER (ORDER BY t.id) AS rn",
          "646:     FROM q",
          "647:     JOIN t",
          "648:       ON t.parent = q.id",
          "649:   )",
          "650:   SELECT *",
          "651:     FROM q;",
          "652: } {1 {cannot use window functions in recursive queries}}",
          "653: do_execsql_test 15.1 {",
          "654:   DROP TABLE IF EXISTS t1;",
          "655:   DROP TABLE IF EXISTS t2;",
          "656:   CREATE TABLE t1(x);",
          "657:   INSERT INTO t1 VALUES('a'), ('b'), ('c');",
          "658:   CREATE TABLE t2(a, b);",
          "659:   INSERT INTO t2 VALUES('X', 1), ('X', 2), ('Y', 2), ('Y', 3);",
          "660:   SELECT x, (",
          "661:     SELECT sum(b)",
          "662:       OVER (PARTITION BY a ROWS BETWEEN UNBOUNDED PRECEDING",
          "663:                                     AND UNBOUNDED FOLLOWING)",
          "664:     FROM t2 WHERE b<x",
          "665:   ) FROM t1;",
          "666: } {a 3 b 3 c 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7be6f355c3e474b7da48ea5a7e7fcff6d6bed47",
      "candidate_info": {
        "commit_hash": "a7be6f355c3e474b7da48ea5a7e7fcff6d6bed47",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a7be6f355c3e474b7da48ea5a7e7fcff6d6bed47",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/rowid.test"
        ],
        "message": "Fix VDBE opcodes OP_SeekLT and OP_SeekLE so that they work on intkey tables with non-numeric text values.\n\nFossilOrigin-Name: 658b84d7f4a0886591c5aab30ed9e31c4a0f56db303eb863f24833ca37085d14",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/rowid.test||test/rowid.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad8fc5d8b440c49df95328df0408be699dde5a1dbd195b3f1f32e5f765578032",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4013:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4014:       if( (pIn3->flags & MEM_Real)==0 ){",
          "",
          "[Removed Lines]",
          "4017:         VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4018:         break;",
          "4019:       }",
          "",
          "[Added Lines]",
          "4015:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "4016:           VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4017:           break;",
          "4018:         }else{",
          "4019:           sqlite3BtreeLast(pC->uc.pCursor, &res);",
          "4020:           goto seek_not_found;",
          "4021:         }",
          "4022:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4040:         assert( (OP_SeekLT & 0x0001)==(OP_SeekGE & 0x0001) );",
          "4041:         if( (oc & 0x0001)==(OP_SeekLT & 0x0001) ) oc++;",
          "4042:       }",
          "4044:     rc = sqlite3BtreeMovetoUnpacked(pC->uc.pCursor, 0, (u64)iKey, 0, &res);",
          "4046:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4043:     }",
          "",
          "[Added Lines]",
          "4046:     }",
          "",
          "---------------"
        ],
        "test/rowid.test||test/rowid.test": [
          "File: test/rowid.test -> test/rowid.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc'}",
          "660: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "662: # Test the automatic generation of rowids when the table already contains",
          "663: # a rowid with the maximum value.",
          "664: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662: do_test rowid-11.asc.1 {",
          "663:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 ASC}",
          "664: } {}",
          "665: do_test rowid-11.asc.2 {",
          "666:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 ASC}",
          "667: } {}",
          "668: do_test rowid-11.asc.3 {",
          "669:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 ASC}",
          "670: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "671: do_test rowid-11.asc.4 {",
          "672:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 ASC}",
          "673: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "675: do_test rowid-11.desc.1 {",
          "676:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 DESC}",
          "677: } {}",
          "678: do_test rowid-11.desc.2 {",
          "679:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 DESC}",
          "680: } {}",
          "681: do_test rowid-11.desc.3 {",
          "682:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 DESC}",
          "683: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "684: do_test rowid-11.desc.4 {",
          "685:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 DESC}",
          "686: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:   SELECT last_insert_rowid();",
          "720: } {1234 5 2234 | 2234 4990756 3234 | 3234 10458756 4234 | 4234}",
          "722: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: #-------------------------------------------------------------------------",
          "749: do_execsql_test rowid-14.0 {",
          "750:   CREATE TABLE t14(x INTEGER PRIMARY KEY);",
          "751:   INSERT INTO t14(x) VALUES (100);",
          "752: }",
          "753: do_execsql_test rowid-14.1 {",
          "754:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "755: } {100}",
          "756: do_execsql_test rowid-14.2 {",
          "757:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "758: } {100}",
          "760: do_execsql_test rowid-14.3 {",
          "761:   DELETE FROM t14;",
          "762:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "763: } {}",
          "764: do_execsql_test rowid-14.4 {",
          "765:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "766: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
      "candidate_info": {
        "commit_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Have \".recover\" handle \"\\r\" and \"\\n\" in the same way as \".dump\".\n\nFossilOrigin-Name: f95f0f02ab6c6cf45f25b613c7ab57f68249689d0a9eddf4c9518ddf0edad365",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8dcc1d89d955bf58c80a8c30a37960f0cf95719953951a92626cc332cc75ec60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3934: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3950: static void shellEscapeCrnl(",
          "3951:   sqlite3_context *context,",
          "3952:   int argc,",
          "3953:   sqlite3_value **argv",
          "3954: ){",
          "3955:   const char *zText = (const char*)sqlite3_value_text(argv[0]);",
          "3956:   if( zText[0]=='\\'' ){",
          "3957:     int nText = sqlite3_value_bytes(argv[0]);",
          "3958:     int i;",
          "3959:     char zBuf1[20];",
          "3960:     char zBuf2[20];",
          "3961:     const char *zNL = 0;",
          "3962:     const char *zCR = 0;",
          "3963:     int nCR = 0;",
          "3964:     int nNL = 0;",
          "3966:     for(i=0; zText[i]; i++){",
          "3967:       if( zNL==0 && zText[i]=='\\n' ){",
          "3968:         zNL = unused_string(zText, \"\\\\n\", \"\\\\012\", zBuf1);",
          "3969:         nNL = (int)strlen(zNL);",
          "3970:       }",
          "3971:       if( zCR==0 && zText[i]=='\\r' ){",
          "3972:         zCR = unused_string(zText, \"\\\\r\", \"\\\\015\", zBuf2);",
          "3973:         nCR = (int)strlen(zCR);",
          "3974:       }",
          "3975:     }",
          "3977:     if( zNL || zCR ){",
          "3978:       int iOut = 0;",
          "3979:       i64 nMax = (nNL > nCR) ? nNL : nCR;",
          "3980:       i64 nAlloc = nMax * nText + (nMax+12)*2;",
          "3981:       char *zOut = (char*)sqlite3_malloc64(nAlloc);",
          "3982:       if( zOut==0 ){",
          "3983:         sqlite3_result_error_nomem(context);",
          "3984:         return;",
          "3985:       }",
          "3987:       if( zNL && zCR ){",
          "3988:         memcpy(&zOut[iOut], \"replace(replace(\", 16);",
          "3989:         iOut += 16;",
          "3990:       }else{",
          "3991:         memcpy(&zOut[iOut], \"replace(\", 8);",
          "3992:         iOut += 8;",
          "3993:       }",
          "3994:       for(i=0; zText[i]; i++){",
          "3995:         if( zText[i]=='\\n' ){",
          "3996:           memcpy(&zOut[iOut], zNL, nNL);",
          "3997:           iOut += nNL;",
          "3998:         }else if( zText[i]=='\\r' ){",
          "3999:           memcpy(&zOut[iOut], zCR, nCR);",
          "4000:           iOut += nCR;",
          "4001:         }else{",
          "4002:           zOut[iOut] = zText[i];",
          "4003:           iOut++;",
          "4004:         }",
          "4005:       }",
          "4007:       if( zNL ){",
          "4008:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4009:         memcpy(&zOut[iOut], zNL, nNL); iOut += nNL;",
          "4010:         memcpy(&zOut[iOut], \"', char(10))\", 12); iOut += 12;",
          "4011:       }",
          "4012:       if( zCR ){",
          "4013:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4014:         memcpy(&zOut[iOut], zCR, nCR); iOut += nCR;",
          "4015:         memcpy(&zOut[iOut], \"', char(13))\", 12); iOut += 12;",
          "4016:       }",
          "4018:       sqlite3_result_text(context, zOut, iOut, SQLITE_TRANSIENT);",
          "4019:       sqlite3_free(zOut);",
          "4020:       return;",
          "4021:     }",
          "4022:   }",
          "4024:   sqlite3_result_value(context, argv[0]);",
          "4025: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4013:                             shellModuleSchema, 0, 0);",
          "4014:     sqlite3_create_function(p->db, \"shell_putsnl\", 1, SQLITE_UTF8, p,",
          "4015:                             shellPutsFunc, 0, 0);",
          "4016: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4017:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4018:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4106:     sqlite3_create_function(p->db, \"shell_escape_crnl\", 1, SQLITE_UTF8, 0,",
          "4107:                             shellEscapeCrnl, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6349:     \"GROUP BY pgno, cell;\"",
          "6350:   );",
          "6364:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6352: #if 0",
          "6353:   zSql = \"SELECT type ||','|| name ||','|| tbl_name ||','|| rootpage ||','|| sql FROM recovery.schema;\";",
          "6354:   shellPrepare(pState->db, &rc, zSql, &pLoop);",
          "6355:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6356:     raw_printf(pState->out, \"%s\\n\", (const char*)sqlite3_column_text(pLoop, 0));",
          "6357:   }",
          "6358:   shellFinalize(&rc, pLoop);",
          "6359:   return rc;",
          "6360: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6398:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6399:       }",
          "6400:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6402:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6403:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6404:         \")\"",
          "",
          "[Removed Lines]",
          "6401:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "",
          "[Added Lines]",
          "6483:         \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)),', ')\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6423:     sqlite3_stmt *pStmt = 0;",
          "6424:     shellPrepare(pState->db, &rc,",
          "6425:         \"SELECT sql, name FROM recovery.schema \"",
          "6427:     );",
          "6428:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6429:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "6426:         \"WHERE (type='table' AND sql LIKE 'create table%') IS NOT TRUE\", &pStmt",
          "",
          "[Added Lines]",
          "6508:         \"WHERE sql NOT LIKE 'create table%'\", &pStmt",
          "",
          "---------------"
        ]
      }
    }
  ]
}