{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1ca00edd5e4d8278251d0498b0cf761931d86d2",
      "candidate_info": {
        "commit_hash": "a1ca00edd5e4d8278251d0498b0cf761931d86d2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1ca00edd5e4d8278251d0498b0cf761931d86d2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c"
        ],
        "message": "When trying to drop a virtual table that has no xDestroy method, invoke the xDisconnect method rather than doing nothing, to avoid a memory leak.\n\nFossilOrigin-Name: 1fa29a5f2a89b6a1ee067f9cb86de1b66455126349efe3502599fc7ad224170c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0457e7d1961ab1f63e31d9028a9064a895f5c3fcfb56ba25e4f37e90197e3a9f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:     }",
          "893:     p = vtabDisconnectAll(db, pTab);",
          "894:     xDestroy = p->pMod->pModule->xDestroy;",
          "895:     pTab->nTabRef++;",
          "898:     if( rc==SQLITE_OK ){",
          "899:       assert( pTab->pVTable==p && p->pNext==0 );",
          "",
          "[Removed Lines]",
          "896:     rc = xDestroy ? xDestroy(p->pVtab) : SQLITE_OK;",
          "",
          "[Added Lines]",
          "895:     if( xDestroy==0 ) xDestroy = p->pMod->pModule->xDisconnect;",
          "896:     assert( xDestroy!=0 );",
          "898:     rc = xDestroy(p->pVtab);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
      "candidate_info": {
        "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:     int nInit = pList ? pList->nExpr : 0;",
          "896:     for(i=0; i<pAppend->nExpr; i++){",
          "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
          "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
          "899:         pDup->op = TK_NULL;",
          "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "901:       }",
          "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
          "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
          "902:         pDup->u.zToken = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f236b21f4b3dba4c104fcda5eb582297be89efe9",
      "candidate_info": {
        "commit_hash": "f236b21f4b3dba4c104fcda5eb582297be89efe9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f236b21f4b3dba4c104fcda5eb582297be89efe9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/window.c"
        ],
        "message": "Add missing VdbeCoverage() macros to new code.\n\nFossilOrigin-Name: b1cbcdc6eb42cca0c42a05e0d6ba4c6c7f09adff0c59ecfc5b434a94dec07a41",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73e30c2e92ccab274ff7cee48511c461de148786bb9d338921c1ecb193822282",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5218:       if( pLevel->regBignull ){",
          "5219:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5220:         addr = sqlite3VdbeAddOp1(v, OP_If, pLevel->regBignull);",
          "5221:         sqlite3VdbeAddOp2(v, OP_Integer, 1, pLevel->regBignull);",
          "5222:         sqlite3VdbeAddOp2(v, OP_Goto, 0, pLevel->p2-1);",
          "5227:         sqlite3VdbeJumpHere(v, addr);",
          "5228:       }",
          "5229: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "",
          "[Removed Lines]",
          "5223:         sqlite3VdbeChangeP5(v, pLevel->p5);",
          "5224:         VdbeCoverage(v);",
          "5225:         VdbeCoverageIf(v, pLevel->op==OP_Next);",
          "5226:         VdbeCoverageIf(v, pLevel->op==OP_Prev);",
          "",
          "[Added Lines]",
          "5221:         VdbeCoverage(v);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1907:     addr = sqlite3VdbeAddOp1(v, OP_NotNull, reg1); VdbeCoverage(v);",
          "1908:     switch( op ){",
          "1909:       case OP_Ge: sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl); break;",
          "1913:     }",
          "1914:     sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "",
          "[Removed Lines]",
          "1910:       case OP_Gt: sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl); break;",
          "1911:       case OP_Le: sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl); break;",
          "",
          "[Added Lines]",
          "1910:       case OP_Gt:",
          "1911:         sqlite3VdbeAddOp2(v, OP_NotNull, reg2, lbl);",
          "1912:         VdbeCoverage(v);",
          "1913:         break;",
          "1914:       case OP_Le:",
          "1915:         sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl);",
          "1916:         VdbeCoverage(v);",
          "1917:         break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
      "candidate_info": {
        "commit_hash": "e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Fix a potential array bounds overflow in the mkkeywordhash.c code generator. Also add marks to omit keywords specific to generated columns when building with -DSQLITE_OMIT_GENERATED_COLUMNS.\n\nFossilOrigin-Name: cc6a40818387f78f89499f09e3f1c4655c7396af1cba2596c7fb2f23f3e9755f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f12e743e19a04ecbf7eb69b675082f2e4dda05b38cd81f6588a1ce95dfc57ada",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: #else",
          "155: #  define WINDOWFUNC 0x00100000",
          "156: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "158: #  define GENCOL 0",
          "159: #else",
          "160: #  define GENCOL 0x00200000",
          "161: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER,          0      },",
          "166:   { \"ALL\",              \"TK_ALL\",          ALWAYS,           0      },",
          "167:   { \"ALTER\",            \"TK_ALTER\",        ALTER,            0      },",
          "169:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE,          0      },",
          "170:   { \"AND\",              \"TK_AND\",          ALWAYS,           10     },",
          "171:   { \"AS\",               \"TK_AS\",           ALWAYS,           10     },",
          "",
          "[Removed Lines]",
          "168:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS,           0      },",
          "",
          "[Added Lines]",
          "173:   { \"ALWAYS\",           \"TK_ALWAYS\",       GENCOL,           0      },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY,             1      },",
          "219:   { \"FROM\",             \"TK_FROM\",         ALWAYS,           10     },",
          "220:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "222:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "223:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS,           5      },",
          "224:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC,       2      },",
          "",
          "[Removed Lines]",
          "221:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS,           1      },",
          "",
          "[Added Lines]",
          "226:   { \"GENERATED\",        \"TK_GENERATED\",    GENCOL,           1      },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365: static void reorder(int *pFrom){",
          "366:   int i = *pFrom - 1;",
          "368:   if( j==0 ) return;",
          "369:   j--;",
          "370:   if( aKeywordTable[i].priority >= aKeywordTable[j].priority ) return;",
          "",
          "[Removed Lines]",
          "367:   int j = aKeywordTable[i].iNext;",
          "",
          "[Added Lines]",
          "372:   int j;",
          "373:   if( i<0 ) return;",
          "374:   j = aKeywordTable[i].iNext;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75f107688588c23f0ac084d59903d2443852b8f1",
      "candidate_info": {
        "commit_hash": "75f107688588c23f0ac084d59903d2443852b8f1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75f107688588c23f0ac084d59903d2443852b8f1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Due to the previous change, the p5 parameter to OP_VColumn no longer ever contains extraneous bits, so change a testcase() into an assert() to show as much.\n\nFossilOrigin-Name: 5b4a88cd3b3a32b1242e0eb733cc0bc4becb830a887b8e6604a4c7452050e163",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2401e04730a156aa48787b91af4e516406cb7635145e430be62fd16481816237",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7217:   assert( pModule->xColumn );",
          "7218:   memset(&sContext, 0, sizeof(sContext));",
          "7219:   sContext.pOut = pDest;",
          "7221:   if( pOp->p5 & OPFLAG_NOCHNG ){",
          "7222:     sqlite3VdbeMemSetNull(pDest);",
          "7223:     pDest->flags = MEM_Null|MEM_Zero;",
          "",
          "[Removed Lines]",
          "7220:   testcase( (pOp->p5 & OPFLAG_NOCHNG)==0 && pOp->p5!=0 );",
          "",
          "[Added Lines]",
          "7220:   assert( pOp->p5==OPFLAG_NOCHNG || pOp->p5==0 );",
          "",
          "---------------"
        ]
      }
    }
  ]
}