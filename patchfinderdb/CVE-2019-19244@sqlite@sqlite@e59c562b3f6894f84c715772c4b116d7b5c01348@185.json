{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4043cfef7590c5a8b90cfbee44b45f6ca8bbf176",
      "candidate_info": {
        "commit_hash": "4043cfef7590c5a8b90cfbee44b45f6ca8bbf176",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4043cfef7590c5a8b90cfbee44b45f6ca8bbf176",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c"
        ],
        "message": "Fix harmless compiler warnings in the TCL interface.\n\nFossilOrigin-Name: f17e72291f197a92b3e15e054271b997d45211a5a31ca4ea6c7fbb33026d5f1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61b4bccd2984f4c2cf50f58ef08677588e57aa7e079af07473b2e188d9ce4f52",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2368:       pResult = Tcl_NewListObj(0,0);",
          "2369:       for(ii=0; ii<sizeof(aDbConfig)/sizeof(aDbConfig[0]); ii++){",
          "2370:         int v = 0;",
          "2373:         Tcl_ListObjAppendElement(interp, pResult,",
          "2374:            Tcl_NewStringObj(aDbConfig[ii].zName,-1));",
          "2375:         Tcl_ListObjAppendElement(interp, pResult,",
          "",
          "[Removed Lines]",
          "2371:         int rc = sqlite3_db_config(pDb->db, aDbConfig[ii].op, -1, &v);",
          "2372:         if( rc!=SQLITE_OK ) continue;",
          "",
          "[Added Lines]",
          "2371:         sqlite3_db_config(pDb->db, aDbConfig[ii].op, -1, &v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2377:       }",
          "2378:     }else{",
          "2379:       const char *zOpt = Tcl_GetString(objv[2]);",
          "2381:       int onoff = -1;",
          "2382:       int v = 0;",
          "2383:       if( zOpt[0]=='-' ) zOpt++;",
          "",
          "[Removed Lines]",
          "2380:       int rc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2394:           return TCL_ERROR;",
          "2395:         }",
          "2396:       }",
          "2398:       pResult = Tcl_NewIntObj(v);",
          "2399:     }",
          "2400:     Tcl_SetObjResult(interp, pResult);",
          "",
          "[Removed Lines]",
          "2397:       rc = sqlite3_db_config(pDb->db, aDbConfig[ii].op, onoff, &v);",
          "",
          "[Added Lines]",
          "2395:       sqlite3_db_config(pDb->db, aDbConfig[ii].op, onoff, &v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f030b376820102ff6cda49565c8b8173b2d44606",
      "candidate_info": {
        "commit_hash": "f030b376820102ff6cda49565c8b8173b2d44606",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f030b376820102ff6cda49565c8b8173b2d44606",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/window1.test"
        ],
        "message": "Internally, remove all references to a Window object that belongs to an expression in an ORDER BY clause if that expression is converted to an alias of a result-set expression. Fix for [4feb3159c6].\n\nFossilOrigin-Name: 579b66eaa0816561c6e47ea116b46f229188f0fc84c1173bfe0d21df2dff9a9a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73056b314bd63288c662752e9bd469b70264c38031c1c857460e64fdb1ed4e2e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1243:   return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1250: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1251:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1252:     Window **pp;",
          "1253:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1254:       if( *pp==pExpr->y.pWin ){",
          "1256:         break;",
          "1257:       }",
          "1258:     }",
          "1259:   }",
          "1260:   return WRC_Continue;",
          "1261: }",
          "1267: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1268:   Walker sWalker;",
          "1269:   memset(&sWalker, 0, sizeof(Walker));",
          "1270:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1271:   sWalker.u.pSelect = pSelect;",
          "1272:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1273: }",
          "1274: #else",
          "1275: # define resolveRemoveWindows(x,y)",
          "1276: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1309:     }",
          "1310:     for(j=0; j<pSelect->pEList->nExpr; j++){",
          "1311:       if( sqlite3ExprCompare(0, pE, pSelect->pEList->a[j].pExpr, -1)==0 ){",
          "1325:         pItem->u.x.iOrderByCol = j+1;",
          "1326:       }",
          "1327:     }",
          "",
          "[Removed Lines]",
          "1312: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1313:         if( ExprHasProperty(pE, EP_WinFunc) ){",
          "1317:           Window **pp;",
          "1318:           for(pp=&pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1319:             if( *pp==pE->y.pWin ){",
          "1321:             }",
          "1322:           }",
          "1323:         }",
          "1324: #endif",
          "",
          "[Added Lines]",
          "1347:         resolveRemoveWindows(pSelect, pE);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:   3 101",
          "701: }",
          "704: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703: #-------------------------------------------------------------------------",
          "704: do_execsql_test 17.0 {",
          "705:   CREATE TABLE t8(a);",
          "706:   INSERT INTO t8 VALUES(1), (2), (3);",
          "707: }",
          "709: do_execsql_test 17.1 {",
          "710:   SELECT +sum(0) OVER () ORDER BY +sum(0) OVER ();",
          "711: } {0}",
          "713: do_execsql_test 17.2 {",
          "714:   select +sum(a) OVER () FROM t8 ORDER BY +sum(a) OVER () DESC;",
          "715: } {6 6 6}",
          "717: do_execsql_test 17.3 {",
          "718:   SELECT 10+sum(a) OVER (ORDER BY a)",
          "719:   FROM t8",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed457037c4ea851dd58b79df0ec965103e0e1c8d",
      "candidate_info": {
        "commit_hash": "ed457037c4ea851dd58b79df0ec965103e0e1c8d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed457037c4ea851dd58b79df0ec965103e0e1c8d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Fix harmless compiler warnings in fuzzcheck\n\nFossilOrigin-Name: a82539665718c8183d9d0bb7bcb3adcb1a23294b8c30f364829a982dab89a332",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 202f9919c222ee933924c63c15ad36ec4481457b1e4d9179af14c9f284117c0c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: #ifdef SQLITE_EBCDIC",
          "470: #else",
          "",
          "[Removed Lines]",
          "467: static unsigned int hexToInt(unsigned int h){",
          "",
          "[Added Lines]",
          "467: static unsigned char hexToInt(unsigned int h){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:   unsigned char b = 0;",
          "527:   if( nIn<4 ) return -1;",
          "528:   n = (unsigned int)nIn;",
          "530:   if( a==0 ){",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "",
          "[Removed Lines]",
          "529:   a = sqlite3_malloc( nAlloc );",
          "",
          "[Added Lines]",
          "529:   a = sqlite3_malloc64( nAlloc );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:             }",
          "563:             newSize = MX_FILE_SZ;",
          "564:           }",
          "566:           if( a==0 ){",
          "567:             fprintf(stderr, \"Out of memory!\\n\");",
          "568:             exit(1);",
          "",
          "[Removed Lines]",
          "565:           a = sqlite3_realloc( a, newSize );",
          "",
          "[Added Lines]",
          "565:           a = sqlite3_realloc64( a, newSize );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "744:   memset(&cx, 0, sizeof(cx));",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "748:   if( eVerbosity>=3 ){",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "",
          "[Removed Lines]",
          "747:   nSql = nByte - iSql;",
          "",
          "[Added Lines]",
          "747:   nSql = (int)(nByte - iSql);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1454:       }else",
          "1455:       if( strcmp(z,\"version\")==0 ){",
          "1456:         int ii;",
          "1458:         printf(\"SQLite %s %s\\n\", sqlite3_libversion(), sqlite3_sourceid());",
          "1461:         }",
          "1462:         return 0;",
          "1463:       }else",
          "",
          "[Removed Lines]",
          "1457:         const char *z;",
          "1459:         for(ii=0; (z = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", z);",
          "",
          "[Added Lines]",
          "1457:         const char *zz;",
          "1459:         for(ii=0; (zz = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", zz);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69ab18d2132720f793f9afd84528f450fce1c874",
      "candidate_info": {
        "commit_hash": "69ab18d2132720f793f9afd84528f450fce1c874",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69ab18d2132720f793f9afd84528f450fce1c874",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "test/dbfuzz001.test",
          "test/fts3corrupt4.test",
          "test/fts3fuzz001.test"
        ],
        "message": "More aggressive early detection of orphaned and malformed autoindexes when parsing the schema.\n\nFossilOrigin-Name: 10f9e39d6ed2413fa9abc6c82da3ed48f32a42b6190b6219fca7faf850d05113",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "test/dbfuzz001.test||test/dbfuzz001.test",
          "test/fts3corrupt4.test||test/fts3corrupt4.test",
          "test/fts3fuzz001.test||test/fts3fuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e22d2f905fe840bea51b536ebedc9b637190ea0a37f16559668d99a61e971411",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     Index *pIndex;",
          "121:     pIndex = sqlite3FindIndex(db, argv[0], db->aDb[iDb].zDbSName);",
          "131:     }",
          "132:   }",
          "133:   return 0;",
          "",
          "[Removed Lines]",
          "122:     if( pIndex==0 ){",
          "129:     }else if( sqlite3GetInt32(argv[1], &pIndex->tnum)==0 ){",
          "130:       corruptSchema(pData, argv[0], \"invalid rootpage\");",
          "",
          "[Added Lines]",
          "122:     if( pIndex==0",
          "123:      || sqlite3GetInt32(argv[1],&pIndex->tnum)==0",
          "124:      || pIndex->tnum<2",
          "125:     ){",
          "126:       corruptSchema(pData, argv[0], pIndex?\"invalid rootpage\":\"orphan index\");",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     |    496: 01 0d 3f 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..?..H.T........",
          "169:     | end c4.db",
          "170:   }]",
          "172: } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "174: # The DELETE query below deletes the very last cell from page 8.",
          "",
          "[Removed Lines]",
          "171:   db eval {PRAGMA integrity_check}",
          "",
          "[Added Lines]",
          "171:   db eval {PRAGMA writable_schema=on; PRAGMA integrity_check}",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "248: do_catchsql_test 5.1 {",
          "249:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "250: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "250: } {1 {malformed database schema (sqlite_autoindey_t1_segdir_1) - orphan index}}",
          "",
          "---------------"
        ],
        "test/fts3fuzz001.test||test/fts3fuzz001.test": [
          "File: test/fts3fuzz001.test -> test/fts3fuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: | end c6.db",
          "91:   }]",
          "92:   catchsql {",
          "93:     INSERT INTO t1(t1) SELECT x FROM t2;",
          "94:   }",
          "95: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     PRAGMA writable_schema=on; -- disable schema corruption detection",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c46c66c46b84290567efb552fb09e80bc758fca",
      "candidate_info": {
        "commit_hash": "9c46c66c46b84290567efb552fb09e80bc758fca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c46c66c46b84290567efb552fb09e80bc758fca",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Ensure that the Walker.pParse structure is initialized when walking the source tree to gather the WINDOW clauses on a query with window functions.\n\nFossilOrigin-Name: 4ca9d5d53d41d08fbce29f9da8cc0948df9c4c3136210af88b499cf889b5ccb8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e5924939c9c8f39367900360fa294cdb1220e9f68d183e32882e0926f775869d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1363:   w.xExprCallback = gatherSelectWindowsCallback;",
          "1364:   w.xSelectCallback = gatherSelectWindowsSelectCallback;",
          "1365:   w.xSelectCallback2 = 0;",
          "1366:   w.u.pSelect = p;",
          "1367:   sqlite3WalkSelect(&w, p);",
          "1368: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1366:   w.pParse = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}