{
  "cve_id": "CVE-2018-15605",
  "cve_desc": "An issue was discovered in phpMyAdmin before 4.8.3. A Cross-Site Scripting vulnerability has been found where an attacker can use a crafted file to manipulate an authenticated user who loads that file through the import feature.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "00d90b3ae415b31338f76263359467a9fbebd0a1",
  "patch_info": {
    "commit_hash": "00d90b3ae415b31338f76263359467a9fbebd0a1",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/00d90b3ae415b31338f76263359467a9fbebd0a1",
    "files": [
      "ChangeLog",
      "libraries/classes/Sql.php"
    ],
    "message": "Fix #14548 [security] HTML injection in import warning messages\n\nSigned-off-by: Madhura Jayaratne <madhura.cj@gmail.com>",
    "before_after_code_files": [
      "libraries/classes/Sql.php||libraries/classes/Sql.php"
    ]
  },
  "patch_diff": {
    "libraries/classes/Sql.php||libraries/classes/Sql.php": [
      "File: libraries/classes/Sql.php -> libraries/classes/Sql.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "2257:         Util::handleDisableFKCheckCleanup($default_fk_check);",
      "2259:         foreach ($warning_messages as $warning) {",
      "2261:             $html_output .= $message->getDisplay();",
      "2262:         }",
      "",
      "[Removed Lines]",
      "2260:             $message = Message::notice($warning);",
      "",
      "[Added Lines]",
      "2260:             $message = Message::notice(Message::sanitize($warning));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0d11ecc728fcd5d841b496d85b6aa23414d59e2d",
      "candidate_info": {
        "commit_hash": "0d11ecc728fcd5d841b496d85b6aa23414d59e2d",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/0d11ecc728fcd5d841b496d85b6aa23414d59e2d",
        "files": [
          "db_operations.php",
          "libraries/classes/Operations.php",
          "libraries/classes/Sql.php",
          "libraries/mult_submits.lib.php",
          "libraries/operations.lib.php",
          "tbl_operations.php",
          "test/classes/OperationsTest.php",
          "test/libraries/PMA_operations_test.php",
          "view_operations.php"
        ],
        "message": "Refactor operations functions to static methods\n\nSigned-off-by: Maur\u00edcio Meneghini Fauth <mauriciofauth@gmail.com>",
        "before_after_code_files": [
          "db_operations.php||db_operations.php",
          "libraries/classes/Operations.php||libraries/classes/Operations.php",
          "libraries/classes/Sql.php||libraries/classes/Sql.php",
          "libraries/mult_submits.lib.php||libraries/mult_submits.lib.php",
          "libraries/operations.lib.php||libraries/operations.lib.php",
          "tbl_operations.php||tbl_operations.php",
          "test/libraries/PMA_operations_test.php||test/classes/OperationsTest.php",
          "view_operations.php||view_operations.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/classes/Sql.php||libraries/classes/Sql.php"
          ],
          "candidate": [
            "libraries/classes/Sql.php||libraries/classes/Sql.php"
          ]
        }
      },
      "candidate_diff": {
        "db_operations.php||db_operations.php": [
          "File: db_operations.php -> db_operations.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use PhpMyAdmin\\Plugins\\Export\\ExportSql;",
          "",
          "[Removed Lines]",
          "14: use PhpMyAdmin\\Response;",
          "",
          "[Added Lines]",
          "14: use PhpMyAdmin\\DatabaseInterface;",
          "15: use PhpMyAdmin\\Message;",
          "17: use PhpMyAdmin\\Operations;",
          "18: use PhpMyAdmin\\Response;",
          "19: use PhpMyAdmin\\Util;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: require_once 'libraries/check_user_privileges.lib.php';",
          "30: $response = Response::getInstance();",
          "",
          "[Removed Lines]",
          "27: require_once 'libraries/operations.lib.php';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     }",
          "49:     if (! isset($_REQUEST['newname']) || strlen($_REQUEST['newname']) === 0) {",
          "51:     } else if($_REQUEST['newname'] === $_REQUEST['db']) {",
          "53:             __('Cannot copy database to the same name. Change the name and try again.')",
          "54:         );",
          "55:     } else {",
          "56:         $_error = false;",
          "57:         if ($move || ! empty($_REQUEST['create_database_before_copying'])) {",
          "59:         }",
          "",
          "[Removed Lines]",
          "50:         $message = PhpMyAdmin\\Message::error(__('The database name is empty!'));",
          "52:         $message = PhpMyAdmin\\Message::error(",
          "58:             PMA_createDbBeforeCopy();",
          "",
          "[Added Lines]",
          "53:         $message = Message::error(__('The database name is empty!'));",
          "55:         $message = Message::error(",
          "61:             Operations::createDbBeforeCopy();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:         $GLOBALS['dbi']->selectDb($GLOBALS['db']);",
          "",
          "[Removed Lines]",
          "67:         PMA_runProcedureAndFunctionDefinitions($GLOBALS['db']);",
          "",
          "[Added Lines]",
          "70:         Operations::runProcedureAndFunctionDefinitions($GLOBALS['db']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "85:         );",
          "89:             $tables_full, $export_sql_plugin, $GLOBALS['db']",
          "90:         );",
          "94:             $tables_full, $move, $GLOBALS['db']",
          "95:         );",
          "98:         if (! $_error) {",
          "100:         }",
          "101:         unset($views);",
          "104:         if (! $_error && count($sqlConstratints) > 0) {",
          "106:         }",
          "107:         unset($sqlConstratints);",
          "",
          "[Removed Lines]",
          "88:         $views = PMA_getViewsAndCreateSqlViewStandIn(",
          "93:         $sqlConstratints = PMA_copyTables(",
          "99:             PMA_handleTheViews($views, $move, $GLOBALS['db']);",
          "105:             PMA_createAllAccumulatedConstraints($sqlConstratints);",
          "",
          "[Added Lines]",
          "91:         $views = Operations::getViewsAndCreateSqlViewStandIn(",
          "96:         $sqlConstratints = Operations::copyTables(",
          "102:             Operations::handleTheViews($views, $move, $GLOBALS['db']);",
          "108:             Operations::createAllAccumulatedConstraints($sqlConstratints);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:         }",
          "117:         $GLOBALS['dbi']->selectDb($GLOBALS['db']);",
          "122:         if (! $_error && $move) {",
          "123:             if (isset($_REQUEST['adjust_privileges'])",
          "124:                 && ! empty($_REQUEST['adjust_privileges'])",
          "125:             ) {",
          "127:             }",
          "",
          "[Removed Lines]",
          "113:             PMA_runEventDefinitionsForDb($GLOBALS['db']);",
          "120:         PMA_duplicateBookmarks($_error, $GLOBALS['db']);",
          "126:                 PMA_AdjustPrivileges_moveDB($GLOBALS['db'], $_REQUEST['newname']);",
          "",
          "[Added Lines]",
          "116:             Operations::runEventDefinitionsForDb($GLOBALS['db']);",
          "123:         Operations::duplicateBookmarks($_error, $GLOBALS['db']);",
          "129:                 Operations::adjustPrivilegesMoveDb($GLOBALS['db'], $_REQUEST['newname']);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "136:             $local_query = 'DROP DATABASE '",
          "138:             $sql_query .= \"\\n\" . $local_query;",
          "139:             $GLOBALS['dbi']->query($local_query);",
          "142:                 __('Database %1$s has been renamed to %2$s.')",
          "143:             );",
          "144:             $message->addParam($GLOBALS['db']);",
          "",
          "[Removed Lines]",
          "137:                 . PhpMyAdmin\\Util::backquote($GLOBALS['db']) . ';';",
          "141:             $message = PhpMyAdmin\\Message::success(",
          "",
          "[Added Lines]",
          "140:                 . Util::backquote($GLOBALS['db']) . ';';",
          "144:             $message = Message::success(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "147:             if (isset($_REQUEST['adjust_privileges'])",
          "148:                 && ! empty($_REQUEST['adjust_privileges'])",
          "149:             ) {",
          "151:             }",
          "154:                 __('Database %1$s has been copied to %2$s.')",
          "155:             );",
          "156:             $message->addParam($GLOBALS['db']);",
          "157:             $message->addParam($_REQUEST['newname']);",
          "158:         } else {",
          "160:         }",
          "161:         $reload     = true;",
          "",
          "[Removed Lines]",
          "150:                 PMA_AdjustPrivileges_copyDB($GLOBALS['db'], $_REQUEST['newname']);",
          "153:             $message = PhpMyAdmin\\Message::success(",
          "159:             $message = PhpMyAdmin\\Message::error();",
          "",
          "[Added Lines]",
          "153:                 Operations::adjustPrivilegesCopyDb($GLOBALS['db'], $_REQUEST['newname']);",
          "156:             $message = Message::success(",
          "162:             $message = Message::error();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "185:         $response->addJSON('newname', $_REQUEST['newname']);",
          "186:         $response->addJSON(",
          "187:             'sql_query',",
          "189:         );",
          "190:         $response->addJSON('db', $GLOBALS['db']);",
          "191:         exit;",
          "",
          "[Removed Lines]",
          "188:             PhpMyAdmin\\Util::getMessage(null, $sql_query)",
          "",
          "[Added Lines]",
          "191:             Util::getMessage(null, $sql_query)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "222:     $tooltip_truename,",
          "223:     $tooltip_aliasname,",
          "224:     $pos",
          "227: echo \"\\n\";",
          "229: if (isset($message)) {",
          "231:     unset($message);",
          "232: }",
          "",
          "[Removed Lines]",
          "225: ) = PhpMyAdmin\\Util::getDbInfo($db, isset($sub_part) ? $sub_part : '');",
          "230:     echo PhpMyAdmin\\Util::getMessage($message, $sql_query);",
          "",
          "[Added Lines]",
          "228: ) = Util::getDbInfo($db, isset($sub_part) ? $sub_part : '');",
          "233:     echo Util::getMessage($message, $sql_query);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "243:     }",
          "245:     $response->addHTML('<div>');",
          "",
          "[Removed Lines]",
          "242:         $response->addHTML(PMA_getHtmlForDatabaseComment($GLOBALS['db']));",
          "",
          "[Added Lines]",
          "245:         $response->addHTML(Operations::getHtmlForDatabaseComment($GLOBALS['db']));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "252:     if ($GLOBALS['db'] != 'mysql') {",
          "254:     }",
          "",
          "[Removed Lines]",
          "253:         $response->addHTML(PMA_getHtmlForRenameDatabase($GLOBALS['db']));",
          "",
          "[Added Lines]",
          "256:         $response->addHTML(Operations::getHtmlForRenameDatabase($GLOBALS['db']));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "261:         && ! $db_is_system_schema",
          "262:         && $GLOBALS['db'] != 'mysql'",
          "263:     ) {",
          "265:     }",
          "276:     if (! $cfgRelation['allworks']",
          "277:         && $cfg['PmaNoRelation_DisableWarning'] == false",
          "278:     ) {",
          "280:             __(",
          "281:                 'The phpMyAdmin configuration storage has been deactivated. ' .",
          "282:                 '%sFind out why%s.'",
          "",
          "[Removed Lines]",
          "264:         $response->addHTML(PMA_getHtmlForDropDatabaseLink($GLOBALS['db']));",
          "269:     $response->addHTML(PMA_getHtmlForCopyDatabase($GLOBALS['db']));",
          "274:     $response->addHTML(PMA_getHtmlForChangeDatabaseCharset($GLOBALS['db'], $table));",
          "279:         $message = PhpMyAdmin\\Message::notice(",
          "",
          "[Added Lines]",
          "267:         $response->addHTML(Operations::getHtmlForDropDatabaseLink($GLOBALS['db']));",
          "272:     $response->addHTML(Operations::getHtmlForCopyDatabase($GLOBALS['db']));",
          "277:     $response->addHTML(Operations::getHtmlForChangeDatabaseCharset($GLOBALS['db'], $table));",
          "282:         $message = Message::notice(",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "297:     $test_query = '",
          "298:         SELECT *",
          "301:         WHERE db_name = \\'' . $GLOBALS['dbi']->escapeString($GLOBALS['db'])",
          "302:         . '\\'';",
          "303:     $test_rs = PMA_queryAsControlUser(",
          "304:         $test_query,",
          "305:         false,",
          "307:     );",
          "308: } // end if",
          "",
          "[Removed Lines]",
          "299:         FROM ' . PhpMyAdmin\\Util::backquote($GLOBALS['cfgRelation']['db'])",
          "300:         . '.' . PhpMyAdmin\\Util::backquote($cfgRelation['pdf_pages']) . '",
          "306:         PhpMyAdmin\\DatabaseInterface::QUERY_STORE",
          "",
          "[Added Lines]",
          "302:         FROM ' . Util::backquote($GLOBALS['cfgRelation']['db'])",
          "303:         . '.' . Util::backquote($cfgRelation['pdf_pages']) . '",
          "309:         DatabaseInterface::QUERY_STORE",
          "",
          "---------------"
        ],
        "libraries/classes/Operations.php||libraries/classes/Operations.php": [
          "File: libraries/classes/Operations.php -> libraries/classes/Operations.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "8: namespace PhpMyAdmin;",
          "10: use PhpMyAdmin\\Charsets;",
          "11: use PhpMyAdmin\\Core;",
          "12: use PhpMyAdmin\\Engines\\Innodb;",
          "13: use PhpMyAdmin\\Message;",
          "14: use PhpMyAdmin\\Partition;",
          "15: use PhpMyAdmin\\Plugins\\Export\\ExportSql;",
          "16: use PhpMyAdmin\\Response;",
          "17: use PhpMyAdmin\\StorageEngine;",
          "18: use PhpMyAdmin\\Table;",
          "19: use PhpMyAdmin\\Url;",
          "20: use PhpMyAdmin\\Util;",
          "27: class Operations",
          "28: {",
          "36:     public static function getHtmlForDatabaseComment($db)",
          "37:     {",
          "38:         $html_output = '<div>'",
          "39:             . '<form method=\"post\" action=\"db_operations.php\" id=\"formDatabaseComment\">'",
          "40:             . Url::getHiddenInputs($db)",
          "41:             . '<fieldset>'",
          "42:             . '<legend>';",
          "43:         if (Util::showIcons('ActionLinksMode')) {",
          "44:             $html_output .= Util::getImage('b_comment.png') . '&nbsp;';",
          "45:         }",
          "46:         $html_output .=  __('Database comment');",
          "47:         $html_output .= '</legend>';",
          "48:         $html_output .= '<input type=\"text\" name=\"comment\" '",
          "49:             . 'class=\"textfield\"'",
          "50:             . 'value=\"' . htmlspecialchars(PMA_getDBComment($db)) . '\" />'",
          "51:             . '</fieldset>';",
          "52:         $html_output .= '<fieldset class=\"tblFooters\">'",
          "53:             . '<input type=\"submit\" value=\"' . __('Go') . '\" />'",
          "54:             . '</fieldset>'",
          "55:             . '</form>'",
          "56:             . '</div>';",
          "58:         return $html_output;",
          "59:     }",
          "68:     public static function getHtmlForRenameDatabase($db)",
          "69:     {",
          "70:         $html_output = '<div>'",
          "71:             . '<form id=\"rename_db_form\" '",
          "72:             . 'class=\"ajax\" '",
          "73:             . 'method=\"post\" action=\"db_operations.php\" '",
          "74:             . 'onsubmit=\"return emptyCheckTheField(this, \\'newname\\')\">';",
          "75:         if (isset($_REQUEST['db_collation'])) {",
          "76:             $html_output .= '<input type=\"hidden\" name=\"db_collation\" '",
          "77:                 . 'value=\"' . $_REQUEST['db_collation']",
          "78:                 . '\" />' . \"\\n\";",
          "79:         }",
          "80:         $html_output .= '<input type=\"hidden\" name=\"what\" value=\"data\" />'",
          "81:             . '<input type=\"hidden\" name=\"db_rename\" value=\"true\" />'",
          "82:             . Url::getHiddenInputs($db)",
          "83:             . '<fieldset>'",
          "84:             . '<legend>';",
          "86:         if (Util::showIcons('ActionLinksMode')) {",
          "87:             $html_output .= Util::getImage('b_edit.png') . '&nbsp;';",
          "88:         }",
          "89:         $html_output .= __('Rename database to')",
          "90:             . '</legend>';",
          "92:         $html_output .= '<input id=\"new_db_name\" type=\"text\" name=\"newname\" '",
          "93:             . 'maxlength=\"64\" class=\"textfield\" required=\"required\"/>';",
          "94:         $html_output .= '<br />';",
          "96:         if ($GLOBALS['db_priv'] && $GLOBALS['table_priv']",
          "97:             && $GLOBALS['col_priv'] && $GLOBALS['proc_priv']",
          "98:             && $GLOBALS['is_reload_priv']",
          "99:         ) {",
          "100:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "101:                 . 'value=\"1\" id=\"checkbox_adjust_privileges\" checked=\"checked\" />';",
          "102:         } else {",
          "103:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "104:                 . 'value=\"1\" id=\"checkbox_adjust_privileges\" title=\"' . __(",
          "105:                     'You don\\'t have sufficient privileges to perform this '",
          "106:                     . 'operation; Please refer to the documentation for more details'",
          "107:                 )",
          "108:                 . '\" disabled/>';",
          "109:         }",
          "111:         $html_output .= '<label for=\"checkbox_adjust_privileges\">'",
          "112:                 . __('Adjust privileges') . Util::showDocu('faq', 'faq6-39')",
          "113:                 . '</label><br />';",
          "115:         $html_output .= ''",
          "116:             . '</fieldset>'",
          "117:             . '<fieldset class=\"tblFooters\">'",
          "118:             . '<input id=\"rename_db_input\" type=\"submit\" value=\"' . __('Go') . '\" />'",
          "119:             . '</fieldset>'",
          "120:             . '</form>'",
          "121:             . '</div>';",
          "123:         return $html_output;",
          "124:     }",
          "133:     public static function getHtmlForDropDatabaseLink($db)",
          "134:     {",
          "135:         $this_sql_query = 'DROP DATABASE ' . Util::backquote($db);",
          "136:         $this_url_params = array(",
          "137:             'sql_query' => $this_sql_query,",
          "138:             'back' => 'db_operations.php',",
          "139:             'goto' => 'index.php',",
          "140:             'reload' => '1',",
          "141:             'purge' => '1',",
          "142:             'message_to_show' => sprintf(",
          "143:                 __('Database %s has been dropped.'),",
          "144:                 htmlspecialchars(Util::backquote($db))",
          "145:             ),",
          "146:             'db' => null,",
          "147:         );",
          "149:         $html_output = '<div>'",
          "150:             . '<fieldset class=\"caution\">';",
          "151:         $html_output .= '<legend>';",
          "152:         if (Util::showIcons('ActionLinksMode')) {",
          "153:             $html_output .= Util::getImage('b_deltbl.png') . '&nbsp';",
          "154:         }",
          "155:         $html_output .= __('Remove database')",
          "156:             . '</legend>';",
          "157:         $html_output .= '<ul>';",
          "158:         $html_output .= self::getDeleteDataOrTablelink(",
          "159:             $this_url_params,",
          "160:             'DROP_DATABASE',",
          "161:             __('Drop the database (DROP)'),",
          "162:             'drop_db_anchor'",
          "163:         );",
          "164:         $html_output .= '</ul></fieldset>'",
          "165:             . '</div>';",
          "167:         return $html_output;",
          "168:     }",
          "177:     public static function getHtmlForCopyDatabase($db)",
          "178:     {",
          "179:         $drop_clause = 'DROP TABLE / DROP VIEW';",
          "180:         $choices = array(",
          "181:             'structure' => __('Structure only'),",
          "182:             'data'      => __('Structure and data'),",
          "183:             'dataonly'  => __('Data only')",
          "184:         );",
          "186:         if (isset($_COOKIE)",
          "187:             && isset($_COOKIE['pma_switch_to_new'])",
          "188:             && $_COOKIE['pma_switch_to_new'] == 'true'",
          "189:         ) {",
          "190:             $pma_switch_to_new = 'true';",
          "191:         }",
          "193:         $html_output = '<div>';",
          "194:         $html_output .= '<form id=\"copy_db_form\" '",
          "195:             . 'class=\"ajax\" '",
          "196:             . 'method=\"post\" action=\"db_operations.php\" '",
          "197:             . 'onsubmit=\"return emptyCheckTheField(this, \\'newname\\')\">';",
          "199:         if (isset($_REQUEST['db_collation'])) {",
          "200:             $html_output .= '<input type=\"hidden\" name=\"db_collation\" '",
          "201:             . 'value=\"' . $_REQUEST['db_collation'] . '\" />' . \"\\n\";",
          "202:         }",
          "203:         $html_output .= '<input type=\"hidden\" name=\"db_copy\" value=\"true\" />' . \"\\n\"",
          "204:             . Url::getHiddenInputs($db);",
          "205:         $html_output .= '<fieldset>'",
          "206:             . '<legend>';",
          "208:         if (Util::showIcons('ActionLinksMode')) {",
          "209:             $html_output .= Util::getImage('b_edit.png') . '&nbsp';",
          "210:         }",
          "211:         $html_output .= __('Copy database to')",
          "212:             . '</legend>'",
          "213:             . '<input type=\"text\" maxlength=\"64\" name=\"newname\" '",
          "214:             . 'class=\"textfield\" required=\"required\" /><br />'",
          "215:             . Util::getRadioFields(",
          "216:                 'what', $choices, 'data', true",
          "217:             );",
          "218:         $html_output .= '<br />';",
          "219:         $html_output .= '<input type=\"checkbox\" name=\"create_database_before_copying\" '",
          "220:             . 'value=\"1\" id=\"checkbox_create_database_before_copying\"'",
          "221:             . 'checked=\"checked\" />';",
          "222:         $html_output .= '<label for=\"checkbox_create_database_before_copying\">'",
          "223:             . __('CREATE DATABASE before copying') . '</label><br />';",
          "224:         $html_output .= '<input type=\"checkbox\" name=\"drop_if_exists\" value=\"true\"'",
          "225:             . 'id=\"checkbox_drop\" />';",
          "226:         $html_output .= '<label for=\"checkbox_drop\">'",
          "227:             . sprintf(__('Add %s'), $drop_clause)",
          "228:             . '</label><br />';",
          "229:         $html_output .= '<input type=\"checkbox\" name=\"sql_auto_increment\" value=\"1\" '",
          "230:             . 'checked=\"checked\" id=\"checkbox_auto_increment\" />';",
          "231:         $html_output .= '<label for=\"checkbox_auto_increment\">'",
          "232:             . __('Add AUTO_INCREMENT value') . '</label><br />';",
          "233:         $html_output .= '<input type=\"checkbox\" name=\"add_constraints\" value=\"1\"'",
          "234:             . 'id=\"checkbox_constraints\" checked=\"checked\"/>';",
          "235:         $html_output .= '<label for=\"checkbox_constraints\">'",
          "236:             . __('Add constraints') . '</label><br />';",
          "237:         $html_output .= '<br />';",
          "239:         if ($GLOBALS['db_priv'] && $GLOBALS['table_priv']",
          "240:             && $GLOBALS['col_priv'] && $GLOBALS['proc_priv']",
          "241:             && $GLOBALS['is_reload_priv']",
          "242:         ) {",
          "243:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "244:                 . 'value=\"1\" id=\"checkbox_privileges\" checked=\"checked\" />';",
          "245:         } else {",
          "246:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "247:                 . 'value=\"1\" id=\"checkbox_privileges\" title=\"' . __(",
          "248:                     'You don\\'t have sufficient privileges to perform this '",
          "249:                     . 'operation; Please refer to the documentation for more details'",
          "250:                 )",
          "251:                 . '\" disabled/>';",
          "252:         }",
          "253:         $html_output .= '<label for=\"checkbox_privileges\">'",
          "254:             . __('Adjust privileges') . Util::showDocu('faq', 'faq6-39')",
          "255:             . '</label><br />';",
          "257:         $html_output .= '<input type=\"checkbox\" name=\"switch_to_new\" value=\"true\"'",
          "258:             . 'id=\"checkbox_switch\"'",
          "259:             . ((isset($pma_switch_to_new) && $pma_switch_to_new == 'true')",
          "260:                 ? ' checked=\"checked\"'",
          "261:                 : '')",
          "262:             . '/>';",
          "263:         $html_output .= '<label for=\"checkbox_switch\">'",
          "264:             . __('Switch to copied database') . '</label>'",
          "265:             . '</fieldset>';",
          "266:         $html_output .= '<fieldset class=\"tblFooters\">'",
          "267:             . '<input type=\"submit\" name=\"submit_copy\" value=\"' . __('Go') . '\" />'",
          "268:             . '</fieldset>'",
          "269:             . '</form>'",
          "270:             . '</div>';",
          "272:         return $html_output;",
          "273:     }",
          "283:     public static function getHtmlForChangeDatabaseCharset($db, $table)",
          "284:     {",
          "285:         $html_output = '<div>'",
          "286:             . '<form id=\"change_db_charset_form\" ';",
          "287:         $html_output .= 'class=\"ajax\" ';",
          "288:         $html_output .= 'method=\"post\" action=\"db_operations.php\">';",
          "290:         $html_output .= Url::getHiddenInputs($db, $table);",
          "292:         $html_output .= '<fieldset>' . \"\\n\"",
          "293:            . '    <legend>';",
          "294:         if (Util::showIcons('ActionLinksMode')) {",
          "295:             $html_output .= Util::getImage('s_asci.png') . '&nbsp';",
          "296:         }",
          "297:         $html_output .= '<label for=\"select_db_collation\">' . __('Collation')",
          "298:             . '</label>' . \"\\n\"",
          "299:             . '</legend>' . \"\\n\"",
          "300:             . Charsets::getCollationDropdownBox(",
          "301:                 'db_collation',",
          "302:                 'select_db_collation',",
          "303:                 isset($_REQUEST['db_collation']) ? $_REQUEST['db_collation'] : '',",
          "304:                 false",
          "305:             )",
          "306:             . '</fieldset>'",
          "307:             . '<fieldset class=\"tblFooters\">'",
          "308:             . '<input type=\"submit\" name=\"submitcollation\"'",
          "309:             . ' value=\"' . __('Go') . '\" />' . \"\\n\"",
          "310:             . '</fieldset>' . \"\\n\"",
          "311:             . '</form></div>' . \"\\n\";",
          "313:         return $html_output;",
          "314:     }",
          "327:     public static function runProcedureAndFunctionDefinitions($db)",
          "328:     {",
          "329:         $procedure_names = $GLOBALS['dbi']->getProceduresOrFunctions($db, 'PROCEDURE');",
          "330:         if ($procedure_names) {",
          "331:             foreach ($procedure_names as $procedure_name) {",
          "332:                 $GLOBALS['dbi']->selectDb($db);",
          "333:                 $tmp_query = $GLOBALS['dbi']->getDefinition(",
          "334:                     $db, 'PROCEDURE', $procedure_name",
          "335:                 );",
          "337:                 $GLOBALS['sql_query'] .= \"\\n\" . $tmp_query;",
          "338:                 $GLOBALS['dbi']->selectDb($_REQUEST['newname']);",
          "339:                 $GLOBALS['dbi']->query($tmp_query);",
          "340:             }",
          "341:         }",
          "343:         $function_names = $GLOBALS['dbi']->getProceduresOrFunctions($db, 'FUNCTION');",
          "344:         if ($function_names) {",
          "345:             foreach ($function_names as $function_name) {",
          "346:                 $GLOBALS['dbi']->selectDb($db);",
          "347:                 $tmp_query = $GLOBALS['dbi']->getDefinition(",
          "348:                     $db, 'FUNCTION', $function_name",
          "349:                 );",
          "351:                 $GLOBALS['sql_query'] .= \"\\n\" . $tmp_query;",
          "352:                 $GLOBALS['dbi']->selectDb($_REQUEST['newname']);",
          "353:                 $GLOBALS['dbi']->query($tmp_query);",
          "354:             }",
          "355:         }",
          "356:     }",
          "363:     public static function createDbBeforeCopy()",
          "364:     {",
          "366:         if ($GLOBALS['dbi']->getLowerCaseNames() === '1') {",
          "367:             $_REQUEST['newname'] = mb_strtolower(",
          "368:                 $_REQUEST['newname']",
          "369:             );",
          "370:         }",
          "372:         $local_query = 'CREATE DATABASE IF NOT EXISTS '",
          "373:             . Util::backquote($_REQUEST['newname']);",
          "374:         if (isset($_REQUEST['db_collation'])) {",
          "375:             $local_query .= ' DEFAULT'",
          "376:                 . Util::getCharsetQueryPart($_REQUEST['db_collation']);",
          "377:         }",
          "378:         $local_query .= ';';",
          "379:         $GLOBALS['sql_query'] .= $local_query;",
          "384:         $original_db = $GLOBALS['db'];",
          "385:         $GLOBALS['dbi']->query($local_query);",
          "386:         $GLOBALS['db'] = $original_db;",
          "390:         $sql_set_mode = \"SET SQL_MODE='NO_AUTO_VALUE_ON_ZERO'\";",
          "391:         $GLOBALS['dbi']->query($sql_set_mode);",
          "395:         $GLOBALS['dblist']->databases->build();",
          "396:     }",
          "407:     public static function getViewsAndCreateSqlViewStandIn(",
          "408:         $tables_full, $export_sql_plugin, $db",
          "409:     ) {",
          "410:         $views = array();",
          "411:         foreach ($tables_full as $each_table => $tmp) {",
          "415:             if ($GLOBALS['dbi']->getTable($db, $each_table)->isView()) {",
          "418:                 if ($_REQUEST['what'] != 'nocopy'",
          "419:                     && isset($_REQUEST['drop_if_exists'])",
          "420:                     && $_REQUEST['drop_if_exists'] == 'true'",
          "421:                 ) {",
          "422:                     $drop_query = 'DROP VIEW IF EXISTS '",
          "423:                         . Util::backquote($_REQUEST['newname']) . '.'",
          "424:                         . Util::backquote($each_table);",
          "425:                     $GLOBALS['dbi']->query($drop_query);",
          "427:                     $GLOBALS['sql_query'] .= \"\\n\" . $drop_query . ';';",
          "428:                 }",
          "430:                 $views[] = $each_table;",
          "432:                 $sql_view_standin = $export_sql_plugin->getTableDefStandIn(",
          "433:                     $db, $each_table, \"\\n\"",
          "434:                 );",
          "435:                 $GLOBALS['dbi']->selectDb($_REQUEST['newname']);",
          "436:                 $GLOBALS['dbi']->query($sql_view_standin);",
          "437:                 $GLOBALS['sql_query'] .= \"\\n\" . $sql_view_standin;",
          "438:             }",
          "439:         }",
          "440:         return $views;",
          "441:     }",
          "452:     public static function copyTables($tables_full, $move, $db)",
          "453:     {",
          "454:         $sqlContraints = array();",
          "455:         foreach ($tables_full as $each_table => $tmp) {",
          "457:             if ($GLOBALS['dbi']->getTable($db, $each_table)->isView()) {",
          "458:                 continue;",
          "459:             }",
          "462:             $this_what = $_REQUEST['what'];",
          "466:             if ($GLOBALS['dbi']->getTable($db, $each_table)->isMerge()) {",
          "467:                 if ($this_what == 'data') {",
          "468:                     $this_what = 'structure';",
          "469:                 }",
          "470:                 if ($this_what == 'dataonly') {",
          "471:                     $this_what = 'nocopy';",
          "472:                 }",
          "473:             }",
          "475:             if ($this_what != 'nocopy') {",
          "479:                 $triggers = $GLOBALS['dbi']->getTriggers($db, $each_table, '');",
          "481:                 if (! Table::moveCopy(",
          "482:                     $db, $each_table, $_REQUEST['newname'], $each_table,",
          "483:                     (isset($this_what) ? $this_what : 'data'),",
          "484:                     $move, 'db_copy'",
          "485:                 )) {",
          "486:                     $GLOBALS['_error'] = true;",
          "487:                     break;",
          "488:                 }",
          "490:                 if ($triggers) {",
          "491:                     $GLOBALS['dbi']->selectDb($_REQUEST['newname']);",
          "492:                     foreach ($triggers as $trigger) {",
          "493:                         $GLOBALS['dbi']->query($trigger['create']);",
          "494:                         $GLOBALS['sql_query'] .= \"\\n\" . $trigger['create'] . ';';",
          "495:                     }",
          "496:                 }",
          "499:                 if (isset($_REQUEST['add_constraints'])",
          "500:                     && ! empty($GLOBALS['sql_constraints_query'])",
          "501:                 ) {",
          "502:                     $sqlContraints[] = $GLOBALS['sql_constraints_query'];",
          "503:                     unset($GLOBALS['sql_constraints_query']);",
          "504:                 }",
          "505:             }",
          "506:         }",
          "507:         return $sqlContraints;",
          "508:     }",
          "521:     public static function runEventDefinitionsForDb($db)",
          "522:     {",
          "523:         $event_names = $GLOBALS['dbi']->fetchResult(",
          "524:             'SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \\''",
          "525:             . $GLOBALS['dbi']->escapeString($db) . '\\';'",
          "526:         );",
          "527:         if ($event_names) {",
          "528:             foreach ($event_names as $event_name) {",
          "529:                 $GLOBALS['dbi']->selectDb($db);",
          "530:                 $tmp_query = $GLOBALS['dbi']->getDefinition($db, 'EVENT', $event_name);",
          "532:                 $GLOBALS['sql_query'] .= \"\\n\" . $tmp_query;",
          "533:                 $GLOBALS['dbi']->selectDb($_REQUEST['newname']);",
          "534:                 $GLOBALS['dbi']->query($tmp_query);",
          "535:             }",
          "536:         }",
          "537:     }",
          "548:     public static function handleTheViews($views, $move, $db)",
          "549:     {",
          "553:         if (isset($_REQUEST['drop_if_exists'])) {",
          "554:             $temp_drop_if_exists = $_REQUEST['drop_if_exists'];",
          "555:         }",
          "557:         $_REQUEST['drop_if_exists'] = 'true';",
          "558:         foreach ($views as $view) {",
          "559:             $copying_succeeded = Table::moveCopy(",
          "560:                 $db, $view, $_REQUEST['newname'], $view, 'structure', $move, 'db_copy'",
          "561:             );",
          "562:             if (! $copying_succeeded) {",
          "563:                 $GLOBALS['_error'] = true;",
          "564:                 break;",
          "565:             }",
          "566:         }",
          "567:         unset($_REQUEST['drop_if_exists']);",
          "569:         if (isset($temp_drop_if_exists)) {",
          "571:             $_REQUEST['drop_if_exists'] = $temp_drop_if_exists;",
          "572:         }",
          "573:     }",
          "583:     public static function adjustPrivilegesMoveDb($oldDb, $newname)",
          "584:     {",
          "585:         if ($GLOBALS['db_priv'] && $GLOBALS['table_priv']",
          "586:             && $GLOBALS['col_priv'] && $GLOBALS['proc_priv']",
          "587:             && $GLOBALS['is_reload_priv']",
          "588:         ) {",
          "589:             $GLOBALS['dbi']->selectDb('mysql');",
          "590:             $newname = str_replace(\"_\", \"\\_\", $newname);",
          "591:             $oldDb = str_replace(\"_\", \"\\_\", $oldDb);",
          "594:             $query_db_specific = 'UPDATE ' . Util::backquote('db')",
          "595:                 . 'SET Db = \\'' . $GLOBALS['dbi']->escapeString($newname)",
          "596:                 . '\\' where Db = \\'' . $GLOBALS['dbi']->escapeString($oldDb) . '\\';';",
          "597:             $GLOBALS['dbi']->query($query_db_specific);",
          "600:             $query_table_specific = 'UPDATE ' . Util::backquote('tables_priv')",
          "601:                 . 'SET Db = \\'' . $GLOBALS['dbi']->escapeString($newname)",
          "602:                 . '\\' where Db = \\'' . $GLOBALS['dbi']->escapeString($oldDb) . '\\';';",
          "603:             $GLOBALS['dbi']->query($query_table_specific);",
          "606:             $query_col_specific = 'UPDATE ' . Util::backquote('columns_priv')",
          "607:                 . 'SET Db = \\'' . $GLOBALS['dbi']->escapeString($newname)",
          "608:                 . '\\' where Db = \\'' . $GLOBALS['dbi']->escapeString($oldDb) . '\\';';",
          "609:             $GLOBALS['dbi']->query($query_col_specific);",
          "612:             $query_proc_specific = 'UPDATE ' . Util::backquote('procs_priv')",
          "613:                 . 'SET Db = \\'' . $GLOBALS['dbi']->escapeString($newname)",
          "614:                 . '\\' where Db = \\'' . $GLOBALS['dbi']->escapeString($oldDb) . '\\';';",
          "615:             $GLOBALS['dbi']->query($query_proc_specific);",
          "618:             $flush_query = \"FLUSH PRIVILEGES;\";",
          "619:             $GLOBALS['dbi']->query($flush_query);",
          "620:         }",
          "621:     }",
          "631:     public static function adjustPrivilegesCopyDb($oldDb, $newname)",
          "632:     {",
          "633:         if ($GLOBALS['db_priv'] && $GLOBALS['table_priv']",
          "634:             && $GLOBALS['col_priv'] && $GLOBALS['proc_priv']",
          "635:             && $GLOBALS['is_reload_priv']",
          "636:         ) {",
          "637:             $GLOBALS['dbi']->selectDb('mysql');",
          "638:             $newname = str_replace(\"_\", \"\\_\", $newname);",
          "639:             $oldDb = str_replace(\"_\", \"\\_\", $oldDb);",
          "641:             $query_db_specific_old = 'SELECT * FROM '",
          "642:                 . Util::backquote('db') . ' WHERE '",
          "643:                 . 'Db = \"' . $oldDb . '\";';",
          "645:             $old_privs_db = $GLOBALS['dbi']->fetchResult($query_db_specific_old, 0);",
          "647:             foreach ($old_privs_db as $old_priv) {",
          "648:                 $newDb_db_privs_query = 'INSERT INTO ' . Util::backquote('db')",
          "649:                     . ' VALUES(\"' . $old_priv[0] . '\", \"' . $newname . '\", \"'",
          "650:                     . $old_priv[2] . '\", \"' . $old_priv[3] . '\", \"' . $old_priv[4]",
          "651:                     . '\", \"' . $old_priv[5] . '\", \"' . $old_priv[6] . '\", \"'",
          "652:                     . $old_priv[7] . '\", \"' . $old_priv[8] . '\", \"' . $old_priv[9]",
          "653:                     . '\", \"' . $old_priv[10] . '\", \"' . $old_priv[11] . '\", \"'",
          "654:                     . $old_priv[12] . '\", \"' . $old_priv[13] . '\", \"' . $old_priv[14]",
          "655:                     . '\", \"' . $old_priv[15] . '\", \"' . $old_priv[16] . '\", \"'",
          "656:                     . $old_priv[17] . '\", \"' . $old_priv[18] . '\", \"' . $old_priv[19]",
          "657:                     . '\", \"' . $old_priv[20] . '\", \"' . $old_priv[21] . '\");';",
          "659:                 $GLOBALS['dbi']->query($newDb_db_privs_query);",
          "660:             }",
          "663:             $query_table_specific_old = 'SELECT * FROM '",
          "664:                 . Util::backquote('tables_priv') . ' WHERE '",
          "665:                 . 'Db = \"' . $oldDb . '\";';",
          "667:             $old_privs_table = $GLOBALS['dbi']->fetchResult(",
          "668:                 $query_table_specific_old,",
          "669:                 0",
          "670:             );",
          "672:             foreach ($old_privs_table as $old_priv) {",
          "673:                 $newDb_table_privs_query = 'INSERT INTO ' . Util::backquote(",
          "674:                     'tables_priv'",
          "675:                 ) . ' VALUES(\"' . $old_priv[0] . '\", \"' . $newname . '\", \"'",
          "676:                 . $old_priv[2] . '\", \"' . $old_priv[3] . '\", \"' . $old_priv[4]",
          "677:                 . '\", \"' . $old_priv[5] . '\", \"' . $old_priv[6] . '\", \"'",
          "678:                 . $old_priv[7] . '\");';",
          "680:                 $GLOBALS['dbi']->query($newDb_table_privs_query);",
          "681:             }",
          "684:             $query_col_specific_old = 'SELECT * FROM '",
          "685:                 . Util::backquote('columns_priv') . ' WHERE '",
          "686:                 . 'Db = \"' . $oldDb . '\";';",
          "688:             $old_privs_col = $GLOBALS['dbi']->fetchResult(",
          "689:                 $query_col_specific_old,",
          "690:                 0",
          "691:             );",
          "693:             foreach ($old_privs_col as $old_priv) {",
          "694:                 $newDb_col_privs_query = 'INSERT INTO ' . Util::backquote(",
          "695:                     'columns_priv'",
          "696:                 ) . ' VALUES(\"' . $old_priv[0] . '\", \"' . $newname . '\", \"'",
          "697:                 . $old_priv[2] . '\", \"' . $old_priv[3] . '\", \"' . $old_priv[4]",
          "698:                 . '\", \"' . $old_priv[5] . '\", \"' . $old_priv[6] . '\");';",
          "700:                 $GLOBALS['dbi']->query($newDb_col_privs_query);",
          "701:             }",
          "704:             $query_proc_specific_old = 'SELECT * FROM '",
          "705:                 . Util::backquote('procs_priv') . ' WHERE '",
          "706:                 . 'Db = \"' . $oldDb . '\";';",
          "708:             $old_privs_proc = $GLOBALS['dbi']->fetchResult(",
          "709:                 $query_proc_specific_old,",
          "710:                 0",
          "711:             );",
          "713:             foreach ($old_privs_proc as $old_priv) {",
          "714:                 $newDb_proc_privs_query = 'INSERT INTO ' . Util::backquote(",
          "715:                     'procs_priv'",
          "716:                 ) . ' VALUES(\"' . $old_priv[0] . '\", \"' . $newname . '\", \"'",
          "717:                 . $old_priv[2] . '\", \"' . $old_priv[3] . '\", \"' . $old_priv[4]",
          "718:                 . '\", \"' . $old_priv[5] . '\", \"' . $old_priv[6] . '\", \"'",
          "719:                 . $old_priv[7] . '\");';",
          "721:                 $GLOBALS['dbi']->query($newDb_proc_privs_query);",
          "722:             }",
          "725:             $flush_query = \"FLUSH PRIVILEGES;\";",
          "726:             $GLOBALS['dbi']->query($flush_query);",
          "727:         }",
          "728:     }",
          "737:     public static function createAllAccumulatedConstraints($sqlConstratints)",
          "738:     {",
          "739:         $GLOBALS['dbi']->selectDb($_REQUEST['newname']);",
          "740:         foreach ($sqlConstratints as $one_query) {",
          "741:             $GLOBALS['dbi']->query($one_query);",
          "743:             $GLOBALS['sql_query'] .= \"\\n\" . $one_query;",
          "744:         }",
          "745:     }",
          "755:     public static function duplicateBookmarks($_error, $db)",
          "756:     {",
          "757:         if (! $_error && $db != $_REQUEST['newname']) {",
          "758:             $get_fields = array('user', 'label', 'query');",
          "759:             $where_fields = array('dbase' => $db);",
          "760:             $new_fields = array('dbase' => $_REQUEST['newname']);",
          "761:             Table::duplicateInfo(",
          "762:                 'bookmarkwork', 'bookmark', $get_fields,",
          "763:                 $where_fields, $new_fields",
          "764:             );",
          "765:         }",
          "766:     }",
          "775:     public static function getHtmlForOrderTheTable($columns)",
          "776:     {",
          "777:         $html_output = '<div>';",
          "778:         $html_output .= '<form method=\"post\" id=\"alterTableOrderby\" '",
          "779:             . 'action=\"tbl_operations.php\">';",
          "780:         $html_output .= Url::getHiddenInputs(",
          "781:             $GLOBALS['db'], $GLOBALS['table']",
          "782:         );",
          "783:         $html_output .= '<fieldset id=\"fieldset_table_order\">'",
          "784:             . '<legend>' . __('Alter table order by') . '</legend>'",
          "785:             . '<select name=\"order_field\">';",
          "787:         foreach ($columns as $fieldname) {",
          "788:             $html_output .= '<option '",
          "789:                 . 'value=\"' . htmlspecialchars($fieldname['Field']) . '\">'",
          "790:                 . htmlspecialchars($fieldname['Field']) . '</option>' . \"\\n\";",
          "791:         }",
          "792:         $html_output .= '</select> ' . __('(singly)') . ' '",
          "793:             . '<br />'",
          "794:             . '<input id=\"order_order_asc\" name=\"order_order\"'",
          "795:             . ' type=\"radio\" value=\"asc\" checked=\"checked\" />'",
          "796:             . '<label for=\"order_order_asc\">' . __('Ascending') . '</label>'",
          "797:             . '<input id=\"order_order_desc\" name=\"order_order\"'",
          "798:             . ' type=\"radio\" value=\"desc\" />'",
          "799:             . '<label for=\"order_order_desc\">' . __('Descending') . '</label>'",
          "800:             . '</fieldset>'",
          "801:             . '<fieldset class=\"tblFooters\">'",
          "802:             . '<input type=\"hidden\" name=\"submitorderby\" value=\"1\" />'",
          "803:             . '<input type=\"submit\" value=\"' . __('Go') . '\" />'",
          "804:             . '</fieldset>'",
          "805:             . '</form>'",
          "806:             . '</div>';",
          "808:          return $html_output;",
          "809:     }",
          "816:     public static function getHtmlForMoveTable()",
          "817:     {",
          "818:         $html_output = '<div>';",
          "819:         $html_output .= '<form method=\"post\" action=\"tbl_operations.php\"'",
          "820:             . ' id=\"moveTableForm\" class=\"ajax\"'",
          "821:             . ' onsubmit=\"return emptyCheckTheField(this, \\'new_name\\')\">'",
          "822:             . Url::getHiddenInputs($GLOBALS['db'], $GLOBALS['table']);",
          "824:         $html_output .= '<input type=\"hidden\" name=\"reload\" value=\"1\" />'",
          "825:             . '<input type=\"hidden\" name=\"what\" value=\"data\" />'",
          "826:             . '<fieldset id=\"fieldset_table_rename\">';",
          "828:         $html_output .= '<legend>' . __('Move table to (database<b>.</b>table)')",
          "829:             . '</legend>';",
          "831:         if (count($GLOBALS['dblist']->databases) > $GLOBALS['cfg']['MaxDbList']) {",
          "832:             $html_output .= '<input type=\"text\" maxlength=\"100\" '",
          "833:                 . 'name=\"target_db\" value=\"' . htmlspecialchars($GLOBALS['db'])",
          "834:                 . '\"/>';",
          "835:         } else {",
          "836:             $html_output .= '<select class=\"halfWidth\" name=\"target_db\">'",
          "837:                 . $GLOBALS['dblist']->databases->getHtmlOptions(true, false)",
          "838:                 . '</select>';",
          "839:         }",
          "840:         $html_output .= '&nbsp;<strong>.</strong>&nbsp;';",
          "841:         $html_output .= '<input class=\"halfWidth\" type=\"text\" name=\"new_name\"'",
          "842:             . ' maxlength=\"64\" required=\"required\" '",
          "843:             . 'value=\"' . htmlspecialchars($GLOBALS['table']) . '\" /><br />';",
          "848:         $html_output .= '<input type=\"checkbox\" name=\"sql_auto_increment\" '",
          "849:             . 'value=\"1\" id=\"checkbox_auto_increment_mv\" checked=\"checked\" />'",
          "850:             . '<label for=\"checkbox_auto_increment_mv\">'",
          "851:             . __('Add AUTO_INCREMENT value')",
          "852:             . '</label><br />';",
          "854:         if ($GLOBALS['table_priv'] && $GLOBALS['col_priv']",
          "855:             && $GLOBALS['is_reload_priv']",
          "856:         ) {",
          "857:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "858:                 . 'value=\"1\" id=\"checkbox_privileges_tables_move\" '",
          "859:                 . 'checked=\"checked\" />';",
          "860:         } else {",
          "861:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "862:                 . 'value=\"1\" id=\"checkbox_privileges_tables_move\" title=\"' . __(",
          "863:                     'You don\\'t have sufficient privileges to perform this '",
          "864:                     . 'operation; Please refer to the documentation for more details'",
          "865:                 )",
          "866:                 . '\" disabled/>';",
          "867:         }",
          "868:         $html_output .= '<label for=\"checkbox_privileges_tables_move\">'",
          "869:             . __('Adjust privileges') . Util::showDocu('faq', 'faq6-39')",
          "870:             . '</label><br />';",
          "872:         $html_output .= '</fieldset><fieldset class=\"tblFooters\">'",
          "873:             . '<input type=\"submit\" name=\"submit_move\" value=\"' . __('Go') . '\" />'",
          "874:             . '</fieldset>'",
          "875:             . '</form>'",
          "876:             . '</div>';",
          "878:         return $html_output;",
          "879:     }",
          "897:     public static function getTableOptionDiv($pma_table, $comment, $tbl_collation, $tbl_storage_engine,",
          "898:         $pack_keys, $auto_increment, $delay_key_write,",
          "899:         $transactional, $page_checksum, $checksum",
          "900:     ) {",
          "901:         $html_output = '<div>';",
          "902:         $html_output .= '<form method=\"post\" action=\"tbl_operations.php\"';",
          "903:         $html_output .= ' id=\"tableOptionsForm\" class=\"ajax\">';",
          "904:         $html_output .= Url::getHiddenInputs(",
          "905:             $GLOBALS['db'], $GLOBALS['table']",
          "906:         );",
          "907:         $html_output .= '<input type=\"hidden\" name=\"reload\" value=\"1\" />';",
          "909:         $html_output .= self::getTableOptionFieldset(",
          "910:             $pma_table, $comment, $tbl_collation,",
          "911:             $tbl_storage_engine, $pack_keys,",
          "912:             $delay_key_write, $auto_increment, $transactional, $page_checksum,",
          "913:             $checksum",
          "914:         );",
          "916:         $html_output .= '<fieldset class=\"tblFooters\">'",
          "917:             . '<input type=\"hidden\" name=\"submitoptions\" value=\"1\" />'",
          "918:             . '<input type=\"submit\" value=\"' . __('Go') . '\" />'",
          "919:             . '</fieldset>'",
          "920:             . '</form>'",
          "921:             . '</div>';",
          "923:         return $html_output;",
          "924:     }",
          "931:     public static function getHtmlForRenameTable()",
          "932:     {",
          "933:         $html_output = '<tr><td class=\"vmiddle\">' . __('Rename table to') . '</td>'",
          "934:             . '<td>'",
          "935:             . '<input type=\"text\" name=\"new_name\" maxlength=\"64\" '",
          "936:             . 'value=\"' . htmlspecialchars($GLOBALS['table'])",
          "937:             . '\" required=\"required\" />'",
          "938:             . '</td></tr>'",
          "939:             . '<tr><td></td><td>';",
          "941:         if ($GLOBALS['table_priv'] && $GLOBALS['col_priv']",
          "942:             && $GLOBALS['is_reload_priv']",
          "943:         ) {",
          "944:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "945:                 . 'value=\"1\" id=\"checkbox_privileges_table_options\" '",
          "946:                 . 'checked=\"checked\" />';",
          "947:         } else {",
          "948:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "949:                 . 'value=\"1\" id=\"checkbox_privileges_table_options\" title=\"' . __(",
          "950:                     'You don\\'t have sufficient privileges to perform this '",
          "951:                     . 'operation; Please refer to the documentation for more details'",
          "952:                 )",
          "953:                 . '\" disabled/>';",
          "954:         }",
          "955:         $html_output .= '<label for=\"checkbox_privileges_table_options\">'",
          "956:             . __('Adjust privileges') . '&nbsp;'",
          "957:             . Util::showDocu('faq', 'faq6-39') . '</label>';",
          "959:         $html_output .= '</td></tr>';",
          "960:         return $html_output;",
          "961:     }",
          "970:     public static function getHtmlForTableComments($current_value)",
          "971:     {",
          "972:         $commentLength = $GLOBALS['dbi']->getVersion() >= 50503 ? 2048 : 60;",
          "973:         $html_output = '<tr><td class=\"vmiddle\">' . __('Table comments') . '</td>'",
          "974:             . '<td><input type=\"text\" name=\"comment\" '",
          "975:             . 'maxlength=\"' . $commentLength . '\"'",
          "976:             . 'value=\"' . htmlspecialchars($current_value) . '\" />'",
          "977:             . '<input type=\"hidden\" name=\"prev_comment\" value=\"'",
          "978:             . htmlspecialchars($current_value) . '\" />'",
          "979:             . '</td>'",
          "980:             . '</tr>';",
          "982:         return $html_output;",
          "983:     }",
          "992:     public static function getHtmlForPackKeys($current_value)",
          "993:     {",
          "994:         $html_output = '<tr>'",
          "995:             . '<td class=\"vmiddle\"><label for=\"new_pack_keys\">PACK_KEYS</label></td>'",
          "996:             . '<td><select name=\"new_pack_keys\" id=\"new_pack_keys\">';",
          "998:         $html_output .= '<option value=\"DEFAULT\"';",
          "999:         if ($current_value == 'DEFAULT') {",
          "1000:             $html_output .= 'selected=\"selected\"';",
          "1001:         }",
          "1002:         $html_output .= '>DEFAULT</option>",
          "1003:                 <option value=\"0\"';",
          "1004:         if ($current_value == '0') {",
          "1005:             $html_output .= 'selected=\"selected\"';",
          "1006:         }",
          "1007:         $html_output .= '>0</option>",
          "1008:                 <option value=\"1\" ';",
          "1009:         if ($current_value == '1') {",
          "1010:             $html_output .= 'selected=\"selected\"';",
          "1011:         }",
          "1012:         $html_output .= '>1</option>'",
          "1013:             . '</select>'",
          "1014:             . '</td>'",
          "1015:             . '</tr>';",
          "1017:         return $html_output;",
          "1018:     }",
          "1036:     public static function getTableOptionFieldset($pma_table, $comment, $tbl_collation,",
          "1037:         $tbl_storage_engine, $pack_keys,",
          "1038:         $delay_key_write, $auto_increment, $transactional,",
          "1039:         $page_checksum, $checksum",
          "1040:     ) {",
          "1041:         $html_output = '<fieldset>'",
          "1042:             . '<legend>' . __('Table options') . '</legend>';",
          "1044:         $html_output .= '<table>';",
          "1045:         $html_output .= self::getHtmlForRenameTable();",
          "1046:         $html_output .= self::getHtmlForTableComments($comment);",
          "1049:         $html_output .= '<tr><td class=\"vmiddle\">' . __('Storage Engine')",
          "1050:             . '&nbsp;' . Util::showMySQLDocu('Storage_engines')",
          "1051:             . '</td>'",
          "1052:             . '<td>'",
          "1053:             . StorageEngine::getHtmlSelect(",
          "1054:                 'new_tbl_storage_engine', null, $tbl_storage_engine",
          "1055:             )",
          "1056:             . '</td>'",
          "1057:             . '</tr>';",
          "1060:         $html_output .= '<tr><td class=\"vmiddle\">' . __('Collation') . '</td>'",
          "1061:             . '<td>'",
          "1062:             . Charsets::getCollationDropdownBox(",
          "1063:                 'tbl_collation', null, $tbl_collation, false",
          "1064:             )",
          "1065:             . '</td>'",
          "1066:             . '</tr>';",
          "1069:         $html_output .= '<tr><td></td><td>'",
          "1070:             . '<input type=\"checkbox\" name=\"change_all_collations\" value=\"1\" '",
          "1071:             . 'id=\"checkbox_change_all_collations\" />'",
          "1072:             . '<label for=\"checkbox_change_all_collations\">'",
          "1073:             . __('Change all column collations')",
          "1074:             . '</label>'",
          "1075:             . '</td></tr>';",
          "1077:         if ($pma_table->isEngine(array('MYISAM', 'ARIA', 'ISAM'))) {",
          "1078:             $html_output .= self::getHtmlForPackKeys($pack_keys);",
          "1079:         } // end if (MYISAM|ISAM)",
          "1081:         if ($pma_table->isEngine(array('MYISAM', 'ARIA'))) {",
          "1082:             $html_output .= self::getHtmlForTableRow(",
          "1083:                 'new_checksum',",
          "1084:                 'CHECKSUM',",
          "1085:                 $checksum",
          "1086:             );",
          "1088:             $html_output .= self::getHtmlForTableRow(",
          "1089:                 'new_delay_key_write',",
          "1090:                 'DELAY_KEY_WRITE',",
          "1091:                 $delay_key_write",
          "1092:             );",
          "1093:         } // end if (MYISAM)",
          "1095:         if ($pma_table->isEngine('ARIA')) {",
          "1096:             $html_output .= self::getHtmlForTableRow(",
          "1097:                 'new_transactional',",
          "1098:                 'TRANSACTIONAL',",
          "1099:                 $transactional",
          "1100:             );",
          "1102:             $html_output .= self::getHtmlForTableRow(",
          "1103:                 'new_page_checksum',",
          "1104:                 'PAGE_CHECKSUM',",
          "1105:                 $page_checksum",
          "1106:             );",
          "1107:         } // end if (ARIA)",
          "1109:         if (strlen($auto_increment) > 0",
          "1110:             && $pma_table->isEngine(array('MYISAM', 'ARIA', 'INNODB', 'PBXT'))",
          "1111:         ) {",
          "1112:             $html_output .= '<tr><td class=\"vmiddle\">'",
          "1113:                 . '<label for=\"auto_increment_opt\">AUTO_INCREMENT</label></td>'",
          "1114:                 . '<td><input type=\"number\" name=\"new_auto_increment\" '",
          "1115:                 . 'id=\"auto_increment_opt\"'",
          "1116:                 . 'value=\"' . $auto_increment . '\" /></td>'",
          "1117:                 . '</tr> ';",
          "1118:         } // end if (MYISAM|INNODB)",
          "1120:         $possible_row_formats = self::getPossibleRowFormat();",
          "1128:         if (isset($possible_row_formats[$tbl_storage_engine])) {",
          "1129:             $current_row_format",
          "1130:                 = mb_strtoupper($GLOBALS['showtable']['Row_format']);",
          "1131:             $html_output .= '<tr><td class=\"vmiddle\">'",
          "1132:                 . '<label for=\"new_row_format\">ROW_FORMAT</label></td>'",
          "1133:                 . '<td>';",
          "1134:             $html_output .= Util::getDropdown(",
          "1135:                 'new_row_format', $possible_row_formats[$tbl_storage_engine],",
          "1136:                 $current_row_format, 'new_row_format'",
          "1137:             );",
          "1138:             $html_output .= '</td></tr>';",
          "1139:         }",
          "1140:         $html_output .= '</table>'",
          "1141:             . '</fieldset>';",
          "1143:         return $html_output;",
          "1144:     }",
          "1156:     public static function getHtmlForTableRow($attribute, $label, $val)",
          "1157:     {",
          "1158:         return '<tr>'",
          "1159:             . '<td class=\"vmiddle\">'",
          "1160:             . '<label for=\"' . $attribute . '\">' . $label . '</label>'",
          "1161:             . '</td>'",
          "1162:             . '<td>'",
          "1163:             . '<input type=\"checkbox\" name=\"' . $attribute . '\" id=\"' . $attribute . '\"'",
          "1164:             . ' value=\"1\"' . ((!empty($val) && $val == 1) ? ' checked=\"checked\"' : '')",
          "1165:             . '/>'",
          "1166:             . '</td>'",
          "1167:             . '</tr>';",
          "1168:     }",
          "1175:     public static function getPossibleRowFormat()",
          "1176:     {",
          "1180:         $possible_row_formats = array(",
          "1181:             'ARCHIVE' => array(",
          "1182:                 'COMPRESSED' => 'COMPRESSED',",
          "1183:             ),",
          "1184:             'ARIA'  => array(",
          "1185:                 'FIXED'     => 'FIXED',",
          "1186:                 'DYNAMIC'   => 'DYNAMIC',",
          "1187:                 'PAGE'      => 'PAGE'",
          "1188:             ),",
          "1189:             'MARIA'  => array(",
          "1190:                 'FIXED'     => 'FIXED',",
          "1191:                 'DYNAMIC'   => 'DYNAMIC',",
          "1192:                 'PAGE'      => 'PAGE'",
          "1193:             ),",
          "1194:             'MYISAM' => array(",
          "1195:                  'FIXED'    => 'FIXED',",
          "1196:                  'DYNAMIC'  => 'DYNAMIC'",
          "1197:             ),",
          "1198:             'PBXT'   => array(",
          "1199:                  'FIXED'    => 'FIXED',",
          "1200:                  'DYNAMIC'  => 'DYNAMIC'",
          "1201:             ),",
          "1202:             'INNODB' => array(",
          "1203:                  'COMPACT'  => 'COMPACT',",
          "1204:                  'REDUNDANT' => 'REDUNDANT'",
          "1205:             )",
          "1206:         );",
          "1209:         $innodbEnginePlugin = StorageEngine::getEngine('Innodb');",
          "1210:         $innodbPluginVersion = $innodbEnginePlugin->getInnodbPluginVersion();",
          "1211:         if (!empty($innodbPluginVersion)) {",
          "1212:             $innodb_file_format = $innodbEnginePlugin->getInnodbFileFormat();",
          "1213:         } else {",
          "1214:             $innodb_file_format = '';",
          "1215:         }",
          "1216:         if ('Barracuda' == $innodb_file_format",
          "1217:             && $innodbEnginePlugin->supportsFilePerTable()",
          "1218:         ) {",
          "1219:             $possible_row_formats['INNODB']['DYNAMIC'] = 'DYNAMIC';",
          "1220:             $possible_row_formats['INNODB']['COMPRESSED'] = 'COMPRESSED';",
          "1221:         }",
          "1223:         return $possible_row_formats;",
          "1224:     }",
          "1231:     public static function getHtmlForCopytable()",
          "1232:     {",
          "1233:         $html_output = '<div>';",
          "1234:         $html_output .= '<form method=\"post\" action=\"tbl_operations.php\" '",
          "1235:             . 'name=\"copyTable\" '",
          "1236:             . 'id=\"copyTable\" '",
          "1237:             . ' class=\"ajax\" '",
          "1238:             . 'onsubmit=\"return emptyCheckTheField(this, \\'new_name\\')\">'",
          "1239:             . Url::getHiddenInputs($GLOBALS['db'], $GLOBALS['table'])",
          "1240:             . '<input type=\"hidden\" name=\"reload\" value=\"1\" />';",
          "1242:         $html_output .= '<fieldset>';",
          "1243:         $html_output .= '<legend>'",
          "1244:             . __('Copy table to (database<b>.</b>table)') . '</legend>';",
          "1246:         if (count($GLOBALS['dblist']->databases) > $GLOBALS['cfg']['MaxDbList']) {",
          "1247:             $html_output .= '<input class=\"halfWidth\" type=\"text\" maxlength=\"100\" '",
          "1248:                 . 'name=\"target_db\" '",
          "1249:                 . 'value=\"' . htmlspecialchars($GLOBALS['db']) . '\"/>';",
          "1250:         } else {",
          "1251:             $html_output .= '<select class=\"halfWidth\" name=\"target_db\">'",
          "1252:                 . $GLOBALS['dblist']->databases->getHtmlOptions(true, false)",
          "1253:                 . '</select>';",
          "1254:         }",
          "1255:         $html_output .= '&nbsp;<strong>.</strong>&nbsp;';",
          "1256:         $html_output .= '<input class=\"halfWidth\" type=\"text\" required=\"required\" '",
          "1257:             . 'name=\"new_name\" maxlength=\"64\" '",
          "1258:             . 'value=\"' . htmlspecialchars($GLOBALS['table']) . '\"/><br />';",
          "1260:         $choices = array(",
          "1261:             'structure' => __('Structure only'),",
          "1262:             'data'      => __('Structure and data'),",
          "1263:             'dataonly'  => __('Data only')",
          "1264:         );",
          "1266:         $html_output .= Util::getRadioFields(",
          "1267:             'what', $choices, 'data', true",
          "1268:         );",
          "1269:         $html_output .= '<br />';",
          "1271:         $html_output .= '<input type=\"checkbox\" name=\"drop_if_exists\" '",
          "1272:             . 'value=\"true\" id=\"checkbox_drop\" />'",
          "1273:             . '<label for=\"checkbox_drop\">'",
          "1274:             . sprintf(__('Add %s'), 'DROP TABLE') . '</label><br />'",
          "1275:             . '<input type=\"checkbox\" name=\"sql_auto_increment\" '",
          "1276:             . 'value=\"1\" id=\"checkbox_auto_increment_cp\" />'",
          "1277:             . '<label for=\"checkbox_auto_increment_cp\">'",
          "1278:             . __('Add AUTO_INCREMENT value') . '</label><br />';",
          "1282:         if (PMA_getForeigners($GLOBALS['db'], $GLOBALS['table'], '', 'foreign')) {",
          "1283:             $html_output .= '<input type=\"checkbox\" name=\"add_constraints\" '",
          "1284:                 . 'value=\"1\" id=\"checkbox_constraints\" checked=\"checked\"/>';",
          "1285:             $html_output .= '<label for=\"checkbox_constraints\">'",
          "1286:                 . __('Add constraints') . '</label><br />';",
          "1287:         } // endif",
          "1289:         $html_output .= '<br />';",
          "1291:         if ($GLOBALS['table_priv'] && $GLOBALS['col_priv']",
          "1292:             && $GLOBALS['is_reload_priv']",
          "1293:         ) {",
          "1294:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "1295:                 . 'value=\"1\" id=\"checkbox_adjust_privileges\" checked=\"checked\" />';",
          "1296:         } else {",
          "1297:             $html_output .= '<input type=\"checkbox\" name=\"adjust_privileges\" '",
          "1298:                 . 'value=\"1\" id=\"checkbox_adjust_privileges\" title=\"' . __(",
          "1299:                     'You don\\'t have sufficient privileges to perform this '",
          "1300:                     . 'operation; Please refer to the documentation for more details'",
          "1301:                 )",
          "1302:                 . '\" disabled/>';",
          "1303:         }",
          "1304:         $html_output .= '<label for=\"checkbox_adjust_privileges\">'",
          "1305:             . __('Adjust privileges') . Util::showDocu('faq', 'faq6-39')",
          "1306:             . '</label><br />';",
          "1308:         if (isset($_COOKIE['pma_switch_to_new'])",
          "1309:             && $_COOKIE['pma_switch_to_new'] == 'true'",
          "1310:         ) {",
          "1311:             $pma_switch_to_new = 'true';",
          "1312:         }",
          "1314:         $html_output .= '<input type=\"checkbox\" name=\"switch_to_new\" value=\"true\"'",
          "1315:             . 'id=\"checkbox_switch\"'",
          "1316:             . ((isset($pma_switch_to_new) && $pma_switch_to_new == 'true')",
          "1317:                 ? ' checked=\"checked\"'",
          "1318:                 : '' . '/>');",
          "1319:         $html_output .= '<label for=\"checkbox_switch\">'",
          "1320:             . __('Switch to copied table') . '</label>'",
          "1321:             . '</fieldset>';",
          "1323:         $html_output .= '<fieldset class=\"tblFooters\">'",
          "1324:             . '<input type=\"submit\" name=\"submit_copy\" value=\"' . __('Go') . '\" />'",
          "1325:             . '</fieldset>'",
          "1326:             . '</form>'",
          "1327:             . '</div>';",
          "1329:         return $html_output;",
          "1330:     }",
          "1340:     public static function getHtmlForTableMaintenance($pma_table, $url_params)",
          "1341:     {",
          "1342:         $html_output = '<div>';",
          "1343:         $html_output .= '<fieldset>'",
          "1344:             . '<legend>' . __('Table maintenance') . '</legend>';",
          "1345:         $html_output .= '<ul id=\"tbl_maintenance\">';",
          "1348:         $html_output .= self::getListofMaintainActionLink($pma_table, $url_params);",
          "1350:         $html_output .= '</ul>'",
          "1351:             . '</fieldset>'",
          "1352:             . '</div>';",
          "1354:         return $html_output;",
          "1355:     }",
          "1365:     public static function getListofMaintainActionLink($pma_table, $url_params)",
          "1366:     {",
          "1367:         $html_output = '';",
          "1370:         if ($pma_table->isEngine(array('MYISAM', 'ARIA', 'INNODB', 'BERKELEYDB', 'TOKUDB'))) {",
          "1371:             $params = array(",
          "1372:                 'sql_query' => 'ANALYZE TABLE '",
          "1373:                     . Util::backquote($GLOBALS['table']),",
          "1374:                 'table_maintenance' => 'Go',",
          "1375:             );",
          "1376:             $html_output .= self::getMaintainActionlink(",
          "1377:                 __('Analyze table'),",
          "1378:                 $params,",
          "1379:                 $url_params,",
          "1380:                 'ANALYZE_TABLE'",
          "1381:             );",
          "1382:         }",
          "1385:         if ($pma_table->isEngine(array('MYISAM', 'ARIA', 'INNODB', 'TOKUDB'))) {",
          "1386:             $params = array(",
          "1387:                 'sql_query' => 'CHECK TABLE '",
          "1388:                     . Util::backquote($GLOBALS['table']),",
          "1389:                 'table_maintenance' => 'Go',",
          "1390:             );",
          "1391:             $html_output .= self::getMaintainActionlink(",
          "1392:                 __('Check table'),",
          "1393:                 $params,",
          "1394:                 $url_params,",
          "1395:                 'CHECK_TABLE'",
          "1396:             );",
          "1397:         }",
          "1400:         $params = array(",
          "1401:             'sql_query' => 'CHECKSUM TABLE '",
          "1402:                 . Util::backquote($GLOBALS['table']),",
          "1403:             'table_maintenance' => 'Go',",
          "1404:         );",
          "1405:         $html_output .= self::getMaintainActionlink(",
          "1406:             __('Checksum table'),",
          "1407:             $params,",
          "1408:             $url_params,",
          "1409:             'CHECKSUM_TABLE'",
          "1410:         );",
          "1413:         if ($pma_table->isEngine(array('INNODB'))) {",
          "1414:             $params = array(",
          "1415:                 'sql_query' => 'ALTER TABLE '",
          "1416:                 . Util::backquote($GLOBALS['table'])",
          "1417:                 . ' ENGINE = InnoDB;'",
          "1418:             );",
          "1419:             $html_output .= self::getMaintainActionlink(",
          "1420:                 __('Defragment table'),",
          "1421:                 $params,",
          "1422:                 $url_params,",
          "1423:                 'InnoDB_File_Defragmenting'",
          "1424:             );",
          "1425:         }",
          "1428:         $params = array(",
          "1429:             'sql_query' => 'FLUSH TABLE '",
          "1430:                 . Util::backquote($GLOBALS['table']),",
          "1431:             'message_to_show' => sprintf(",
          "1432:                 __('Table %s has been flushed.'),",
          "1433:                 htmlspecialchars($GLOBALS['table'])",
          "1434:             ),",
          "1435:             'reload' => 1,",
          "1436:         );",
          "1437:         $html_output .= self::getMaintainActionlink(",
          "1438:             __('Flush the table (FLUSH)'),",
          "1439:             $params,",
          "1440:             $url_params,",
          "1441:             'FLUSH'",
          "1442:         );",
          "1445:         if ($pma_table->isEngine(array('MYISAM', 'ARIA', 'INNODB', 'BERKELEYDB', 'TOKUDB'))) {",
          "1446:             $params = array(",
          "1447:                 'sql_query' => 'OPTIMIZE TABLE '",
          "1448:                     . Util::backquote($GLOBALS['table']),",
          "1449:                 'table_maintenance' => 'Go',",
          "1450:             );",
          "1451:             $html_output .= self::getMaintainActionlink(",
          "1452:                 __('Optimize table'),",
          "1453:                 $params,",
          "1454:                 $url_params,",
          "1455:                 'OPTIMIZE_TABLE'",
          "1456:             );",
          "1457:         }",
          "1460:         if ($pma_table->isEngine(array('MYISAM', 'ARIA'))) {",
          "1461:             $params = array(",
          "1462:                 'sql_query' => 'REPAIR TABLE '",
          "1463:                     . Util::backquote($GLOBALS['table']),",
          "1464:                 'table_maintenance' => 'Go',",
          "1465:             );",
          "1466:             $html_output .= self::getMaintainActionlink(",
          "1467:                 __('Repair table'),",
          "1468:                 $params,",
          "1469:                 $url_params,",
          "1470:                 'REPAIR_TABLE'",
          "1471:             );",
          "1472:         }",
          "1474:         return $html_output;",
          "1475:     }",
          "1487:     public static function getMaintainActionlink($action_message, $params, $url_params, $link)",
          "1488:     {",
          "1489:         return '<li>'",
          "1490:             . '<a class=\"maintain_action ajax\" '",
          "1491:             . 'href=\"sql.php'",
          "1492:             . Url::getCommon(array_merge($url_params, $params)) . '\">'",
          "1493:             . $action_message",
          "1494:             . '</a>'",
          "1495:             . Util::showMySQLDocu($link)",
          "1496:             . '</li>';",
          "1497:     }",
          "1507:     public static function getHtmlForDeleteDataOrTable(",
          "1508:         $truncate_table_url_params,",
          "1509:         $dropTableUrlParams",
          "1510:     ) {",
          "1511:         $html_output = '<div>'",
          "1512:             . '<fieldset class=\"caution\">'",
          "1513:             . '<legend>' . __('Delete data or table') . '</legend>';",
          "1515:         $html_output .= '<ul>';",
          "1517:         if (! empty($truncate_table_url_params)) {",
          "1518:             $html_output .= self::getDeleteDataOrTablelink(",
          "1519:                 $truncate_table_url_params,",
          "1520:                 'TRUNCATE_TABLE',",
          "1521:                 __('Empty the table (TRUNCATE)'),",
          "1522:                 'truncate_tbl_anchor'",
          "1523:             );",
          "1524:         }",
          "1525:         if (!empty($dropTableUrlParams)) {",
          "1526:             $html_output .= self::getDeleteDataOrTablelink(",
          "1527:                 $dropTableUrlParams,",
          "1528:                 'DROP_TABLE',",
          "1529:                 __('Delete the table (DROP)'),",
          "1530:                 'drop_tbl_anchor'",
          "1531:             );",
          "1532:         }",
          "1533:         $html_output .= '</ul></fieldset></div>';",
          "1535:         return $html_output;",
          "1536:     }",
          "1548:     public static function getDeleteDataOrTablelink($url_params, $syntax, $link, $htmlId)",
          "1549:     {",
          "1550:         return  '<li><a '",
          "1551:             . 'href=\"sql.php' . Url::getCommon($url_params) . '\"'",
          "1552:             . ' id=\"' . $htmlId . '\" class=\"ajax\">'",
          "1553:             . $link . '</a>'",
          "1554:             . Util::showMySQLDocu($syntax)",
          "1555:             . '</li>';",
          "1556:     }",
          "1566:     public static function getHtmlForPartitionMaintenance($partition_names, $url_params)",
          "1567:     {",
          "1568:         $choices = array(",
          "1569:             'ANALYZE' => __('Analyze'),",
          "1570:             'CHECK' => __('Check'),",
          "1571:             'OPTIMIZE' => __('Optimize'),",
          "1572:             'REBUILD' => __('Rebuild'),",
          "1573:             'REPAIR' => __('Repair'),",
          "1574:             'TRUNCATE' => __('Truncate')",
          "1575:         );",
          "1577:         $partition_method = Partition::getPartitionMethod(",
          "1578:             $GLOBALS['db'], $GLOBALS['table']",
          "1579:         );",
          "1581:         if ($partition_method == 'RANGE'",
          "1582:             || $partition_method == 'RANGE COLUMNS'",
          "1583:             || $partition_method == 'LIST'",
          "1584:             || $partition_method == 'LIST COLUMNS'",
          "1585:         ) {",
          "1586:             $choices['DROP'] = __('Drop');",
          "1587:         } else {",
          "1588:             $choices['COALESCE'] = __('Coalesce');",
          "1589:         }",
          "1591:         $html_output = '<div>'",
          "1592:             . '<form id=\"partitionsForm\" class=\"ajax\" '",
          "1593:             . 'method=\"post\" action=\"tbl_operations.php\" >'",
          "1594:             . Url::getHiddenInputs($GLOBALS['db'], $GLOBALS['table'])",
          "1595:             . '<fieldset>'",
          "1596:             . '<legend>'",
          "1597:             . __('Partition maintenance')",
          "1598:             . Util::showMySQLDocu('partitioning_maintenance')",
          "1599:             . '</legend>';",
          "1601:         $html_select = '<select id=\"partition_name\" name=\"partition_name[]\"'",
          "1602:             . ' multiple=\"multiple\" required=\"required\">' . \"\\n\";",
          "1603:         $first = true;",
          "1604:         foreach ($partition_names as $one_partition) {",
          "1605:             $one_partition = htmlspecialchars($one_partition);",
          "1606:             $html_select .= '<option value=\"' . $one_partition . '\"';",
          "1607:             if ($first) {",
          "1608:                 $html_select .= ' selected=\"selected\"';",
          "1609:                 $first = false;",
          "1610:             }",
          "1611:             $html_select .=  '>' . $one_partition . '</option>' . \"\\n\";",
          "1612:         }",
          "1613:         $html_select .= '</select>' . \"\\n\";",
          "1614:         $html_output .= sprintf(__('Partition %s'), $html_select);",
          "1616:         $html_output .= '<div class=\"clearfloat\" />';",
          "1617:         $html_output .= Util::getRadioFields(",
          "1618:             'partition_operation', $choices, 'ANALYZE', false, true, 'floatleft'",
          "1619:         );",
          "1620:         $this_url_params = array_merge(",
          "1621:             $url_params,",
          "1622:             array(",
          "1623:                 'sql_query' => 'ALTER TABLE '",
          "1624:                 . Util::backquote($GLOBALS['table'])",
          "1625:                 . ' REMOVE PARTITIONING;'",
          "1626:             )",
          "1627:         );",
          "1628:         $html_output .= '<div class=\"clearfloat\" /><br />';",
          "1630:         $html_output .= '<a href=\"sql.php'",
          "1631:             . Url::getCommon($this_url_params) . '\">'",
          "1632:             . __('Remove partitioning') . '</a>';",
          "1634:         $html_output .= '</fieldset>'",
          "1635:             . '<fieldset class=\"tblFooters\">'",
          "1636:             . '<input type=\"hidden\" name=\"submit_partition\" value=\"1\">'",
          "1637:             . '<input type=\"submit\" value=\"' . __('Go') . '\" />'",
          "1638:             . '</fieldset>'",
          "1639:             . '</form>'",
          "1640:             . '</div>';",
          "1642:         return $html_output;",
          "1643:     }",
          "1654:     public static function getHtmlForReferentialIntegrityCheck($foreign, $url_params)",
          "1655:     {",
          "1656:         $html_output = '<div>'",
          "1657:             . '<fieldset>'",
          "1658:             . '<legend>' . __('Check referential integrity:') . '</legend>';",
          "1660:         $html_output .= '<ul>';",
          "1662:         foreach ($foreign as $master => $arr) {",
          "1663:             $join_query  = 'SELECT '",
          "1664:                 . Util::backquote($GLOBALS['table']) . '.*'",
          "1665:                 . ' FROM ' . Util::backquote($GLOBALS['table'])",
          "1666:                 . ' LEFT JOIN '",
          "1667:                 . Util::backquote($arr['foreign_db'])",
          "1668:                 . '.'",
          "1669:                 . Util::backquote($arr['foreign_table']);",
          "1670:             if ($arr['foreign_table'] == $GLOBALS['table']) {",
          "1671:                 $foreign_table = $GLOBALS['table'] . '1';",
          "1672:                 $join_query .= ' AS ' . Util::backquote($foreign_table);",
          "1673:             } else {",
          "1674:                 $foreign_table = $arr['foreign_table'];",
          "1675:             }",
          "1676:             $join_query .= ' ON '",
          "1677:                 . Util::backquote($GLOBALS['table']) . '.'",
          "1678:                 . Util::backquote($master)",
          "1679:                 . ' = '",
          "1680:                 . Util::backquote($arr['foreign_db'])",
          "1681:                 . '.'",
          "1682:                 . Util::backquote($foreign_table) . '.'",
          "1683:                 . Util::backquote($arr['foreign_field'])",
          "1684:                 . ' WHERE '",
          "1685:                 . Util::backquote($arr['foreign_db'])",
          "1686:                 . '.'",
          "1687:                 . Util::backquote($foreign_table) . '.'",
          "1688:                 . Util::backquote($arr['foreign_field'])",
          "1689:                 . ' IS NULL AND '",
          "1690:                 . Util::backquote($GLOBALS['table']) . '.'",
          "1691:                 . Util::backquote($master)",
          "1692:                 . ' IS NOT NULL';",
          "1693:             $this_url_params = array_merge(",
          "1694:                 $url_params,",
          "1695:                 array('sql_query' => $join_query)",
          "1696:             );",
          "1698:             $html_output .= '<li>'",
          "1699:                 . '<a href=\"sql.php'",
          "1700:                 . Url::getCommon($this_url_params)",
          "1701:                 . '\">'",
          "1702:                 . $master . '&nbsp;->&nbsp;' . $arr['foreign_db'] . '.'",
          "1703:                 . $arr['foreign_table'] . '.' . $arr['foreign_field']",
          "1704:                 . '</a></li>' . \"\\n\";",
          "1705:         } //  foreach $foreign",
          "1706:         $html_output .= '</ul></fieldset></div>';",
          "1708:         return $html_output;",
          "1709:     }",
          "1716:     public static function getQueryAndResultForReorderingTable()",
          "1717:     {",
          "1718:         $sql_query = 'ALTER TABLE '",
          "1719:             . Util::backquote($GLOBALS['table'])",
          "1720:             . ' ORDER BY '",
          "1721:             . Util::backquote(urldecode($_REQUEST['order_field']));",
          "1722:         if (isset($_REQUEST['order_order'])",
          "1723:             && $_REQUEST['order_order'] === 'desc'",
          "1724:         ) {",
          "1725:             $sql_query .= ' DESC';",
          "1726:         } else {",
          "1727:             $sql_query .= ' ASC';",
          "1728:         }",
          "1729:         $sql_query .= ';';",
          "1730:         $result = $GLOBALS['dbi']->query($sql_query);",
          "1732:         return array($sql_query, $result);",
          "1733:     }",
          "1750:     public static function getTableAltersArray($pma_table, $pack_keys,",
          "1751:         $checksum, $page_checksum, $delay_key_write,",
          "1752:         $row_format, $newTblStorageEngine, $transactional, $tbl_collation",
          "1753:     ) {",
          "1754:         global $auto_increment;",
          "1756:         $table_alters = array();",
          "1758:         if (isset($_REQUEST['comment'])",
          "1759:             && urldecode($_REQUEST['prev_comment']) !== $_REQUEST['comment']",
          "1760:         ) {",
          "1761:             $table_alters[] = 'COMMENT = \\''",
          "1762:                 . $GLOBALS['dbi']->escapeString($_REQUEST['comment']) . '\\'';",
          "1763:         }",
          "1765:         if (! empty($newTblStorageEngine)",
          "1766:             && mb_strtolower($newTblStorageEngine) !== mb_strtolower($GLOBALS['tbl_storage_engine'])",
          "1767:         ) {",
          "1768:             $table_alters[] = 'ENGINE = ' . $newTblStorageEngine;",
          "1769:         }",
          "1770:         if (! empty($_REQUEST['tbl_collation'])",
          "1771:             && $_REQUEST['tbl_collation'] !== $tbl_collation",
          "1772:         ) {",
          "1773:             $table_alters[] = 'DEFAULT '",
          "1774:                 . Util::getCharsetQueryPart($_REQUEST['tbl_collation']);",
          "1775:         }",
          "1777:         if ($pma_table->isEngine(array('MYISAM', 'ARIA', 'ISAM'))",
          "1778:             && isset($_REQUEST['new_pack_keys'])",
          "1779:             && $_REQUEST['new_pack_keys'] != (string)$pack_keys",
          "1780:         ) {",
          "1781:             $table_alters[] = 'pack_keys = ' . $_REQUEST['new_pack_keys'];",
          "1782:         }",
          "1784:         $_REQUEST['new_checksum'] = empty($_REQUEST['new_checksum']) ? '0' : '1';",
          "1785:         if ($pma_table->isEngine(array('MYISAM', 'ARIA'))",
          "1786:             && $_REQUEST['new_checksum'] !== $checksum",
          "1787:         ) {",
          "1788:             $table_alters[] = 'checksum = ' . $_REQUEST['new_checksum'];",
          "1789:         }",
          "1791:         $_REQUEST['new_transactional']",
          "1792:             = empty($_REQUEST['new_transactional']) ? '0' : '1';",
          "1793:         if ($pma_table->isEngine('ARIA')",
          "1794:             && $_REQUEST['new_transactional'] !== $transactional",
          "1795:         ) {",
          "1796:             $table_alters[] = 'TRANSACTIONAL = ' . $_REQUEST['new_transactional'];",
          "1797:         }",
          "1799:         $_REQUEST['new_page_checksum']",
          "1800:             = empty($_REQUEST['new_page_checksum']) ? '0' : '1';",
          "1801:         if ($pma_table->isEngine('ARIA')",
          "1802:             && $_REQUEST['new_page_checksum'] !== $page_checksum",
          "1803:         ) {",
          "1804:             $table_alters[] = 'PAGE_CHECKSUM = ' . $_REQUEST['new_page_checksum'];",
          "1805:         }",
          "1807:         $_REQUEST['new_delay_key_write']",
          "1808:             = empty($_REQUEST['new_delay_key_write']) ? '0' : '1';",
          "1809:         if ($pma_table->isEngine(array('MYISAM', 'ARIA'))",
          "1810:             && $_REQUEST['new_delay_key_write'] !== $delay_key_write",
          "1811:         ) {",
          "1812:             $table_alters[] = 'delay_key_write = ' . $_REQUEST['new_delay_key_write'];",
          "1813:         }",
          "1815:         if ($pma_table->isEngine(array('MYISAM', 'ARIA', 'INNODB', 'PBXT'))",
          "1816:             && ! empty($_REQUEST['new_auto_increment'])",
          "1817:             && (! isset($auto_increment)",
          "1818:             || $_REQUEST['new_auto_increment'] !== $auto_increment)",
          "1819:         ) {",
          "1820:             $table_alters[] = 'auto_increment = '",
          "1821:                 . $GLOBALS['dbi']->escapeString($_REQUEST['new_auto_increment']);",
          "1822:         }",
          "1824:         if (! empty($_REQUEST['new_row_format'])) {",
          "1825:             $newRowFormat = $_REQUEST['new_row_format'];",
          "1826:             $newRowFormatLower = mb_strtolower($newRowFormat);",
          "1827:             if ($pma_table->isEngine(array('MYISAM', 'ARIA', 'INNODB', 'PBXT'))",
          "1828:                 && (strlen($row_format) === 0",
          "1829:                 || $newRowFormatLower !== mb_strtolower($row_format))",
          "1830:             ) {",
          "1831:                 $table_alters[] = 'ROW_FORMAT = '",
          "1832:                     . $GLOBALS['dbi']->escapeString($newRowFormat);",
          "1833:             }",
          "1834:         }",
          "1836:         return $table_alters;",
          "1837:     }",
          "1844:     public static function getWarningMessagesArray()",
          "1845:     {",
          "1846:         $warning_messages = array();",
          "1847:         foreach ($GLOBALS['dbi']->getWarnings() as $warning) {",
          "1854:             if (! ($_REQUEST['new_tbl_storage_engine'] == 'MyISAM'",
          "1855:                 && $warning['Code'] == '1478'",
          "1856:                 && $warning['Level'] == 'Error')",
          "1857:             ) {",
          "1858:                 $warning_messages[] = $warning['Level'] . ': #' . $warning['Code']",
          "1859:                     . ' ' . $warning['Message'];",
          "1860:             }",
          "1861:         }",
          "1862:         return $warning_messages;",
          "1863:     }",
          "1871:     public static function getQueryAndResultForPartition()",
          "1872:     {",
          "1873:         $sql_query = 'ALTER TABLE '",
          "1874:             . Util::backquote($GLOBALS['table']) . ' '",
          "1875:             . $_REQUEST['partition_operation']",
          "1876:             . ' PARTITION ';",
          "1878:         if ($_REQUEST['partition_operation'] == 'COALESCE') {",
          "1879:             $sql_query .= count($_REQUEST['partition_name']);",
          "1880:         } else {",
          "1881:             $sql_query .= implode(', ', $_REQUEST['partition_name']) . ';';",
          "1882:         }",
          "1884:         $result = $GLOBALS['dbi']->query($sql_query);",
          "1886:         return array($sql_query, $result);",
          "1887:     }",
          "1899:     public static function adjustPrivilegesRenameOrMoveTable($oldDb, $oldTable, $newDb, $newTable)",
          "1900:     {",
          "1901:         if ($GLOBALS['table_priv'] && $GLOBALS['col_priv']",
          "1902:             && $GLOBALS['is_reload_priv']",
          "1903:         ) {",
          "1904:             $GLOBALS['dbi']->selectDb('mysql');",
          "1907:             $query_table_specific = 'UPDATE ' . Util::backquote('tables_priv')",
          "1908:                 . 'SET Db = \\'' . $GLOBALS['dbi']->escapeString($newDb) . '\\', Table_name = \\'' . $GLOBALS['dbi']->escapeString($newTable)",
          "1909:                 . '\\' where Db = \\'' . $GLOBALS['dbi']->escapeString($oldDb) . '\\' AND Table_name = \\'' . $GLOBALS['dbi']->escapeString($oldTable)",
          "1910:                 . '\\';';",
          "1911:             $GLOBALS['dbi']->query($query_table_specific);",
          "1914:             $query_col_specific = 'UPDATE ' . Util::backquote('columns_priv')",
          "1915:                 . 'SET Db = \\'' . $GLOBALS['dbi']->escapeString($newDb) . '\\', Table_name = \\'' . $GLOBALS['dbi']->escapeString($newTable)",
          "1916:                 . '\\' where Db = \\'' . $GLOBALS['dbi']->escapeString($oldDb) . '\\' AND Table_name = \\'' . $GLOBALS['dbi']->escapeString($oldTable)",
          "1917:                 . '\\';';",
          "1918:             $GLOBALS['dbi']->query($query_col_specific);",
          "1921:             $flush_query = \"FLUSH PRIVILEGES;\";",
          "1922:             $GLOBALS['dbi']->query($flush_query);",
          "1923:         }",
          "1924:     }",
          "1936:     public static function adjustPrivilegesCopyTable($oldDb, $oldTable, $newDb, $newTable)",
          "1937:     {",
          "1938:         if ($GLOBALS['table_priv'] && $GLOBALS['col_priv']",
          "1939:             && $GLOBALS['is_reload_priv']",
          "1940:         ) {",
          "1941:             $GLOBALS['dbi']->selectDb('mysql');",
          "1944:             $query_table_specific_old = 'SELECT * FROM '",
          "1945:                 . Util::backquote('tables_priv') . ' where '",
          "1946:                 . 'Db = \"' . $oldDb . '\" AND Table_name = \"' . $oldTable . '\";';",
          "1948:             $old_privs_table = $GLOBALS['dbi']->fetchResult(",
          "1949:                 $query_table_specific_old,",
          "1950:                 0",
          "1951:             );",
          "1953:             foreach ($old_privs_table as $old_priv) {",
          "1954:                 $newDb_table_privs_query = 'INSERT INTO '",
          "1955:                     . Util::backquote('tables_priv') . ' VALUES(\"'",
          "1956:                     . $old_priv[0] . '\", \"' . $newDb . '\", \"' . $old_priv[2] . '\", \"'",
          "1957:                     . $newTable . '\", \"' . $old_priv[4] . '\", \"' . $old_priv[5]",
          "1958:                     . '\", \"' . $old_priv[6] . '\", \"' . $old_priv[7] . '\");';",
          "1960:                 $GLOBALS['dbi']->query($newDb_table_privs_query);",
          "1961:             }",
          "1964:             $query_col_specific_old = 'SELECT * FROM '",
          "1965:                 . Util::backquote('columns_priv') . ' WHERE '",
          "1966:                 . 'Db = \"' . $oldDb . '\" AND Table_name = \"' . $oldTable . '\";';",
          "1968:             $old_privs_col = $GLOBALS['dbi']->fetchResult(",
          "1969:                 $query_col_specific_old,",
          "1970:                 0",
          "1971:             );",
          "1973:             foreach ($old_privs_col as $old_priv) {",
          "1974:                 $newDb_col_privs_query = 'INSERT INTO '",
          "1975:                     . Util::backquote('columns_priv') . ' VALUES(\"'",
          "1976:                     . $old_priv[0] . '\", \"' . $newDb . '\", \"' . $old_priv[2] . '\", \"'",
          "1977:                     . $newTable . '\", \"' . $old_priv[4] . '\", \"' . $old_priv[5]",
          "1978:                     . '\", \"' . $old_priv[6] . '\");';",
          "1980:                 $GLOBALS['dbi']->query($newDb_col_privs_query);",
          "1981:             }",
          "1984:             $flush_query = \"FLUSH PRIVILEGES;\";",
          "1985:             $GLOBALS['dbi']->query($flush_query);",
          "1986:         }",
          "1987:     }",
          "1998:     public static function changeAllColumnsCollation($db, $table, $tbl_collation)",
          "1999:     {",
          "2000:         $GLOBALS['dbi']->selectDb($db);",
          "2002:         $change_all_collations_query = 'ALTER TABLE '",
          "2003:             . Util::backquote($table)",
          "2004:             . ' CONVERT TO';",
          "2006:         list($charset) = explode('_', $tbl_collation);",
          "2008:         $change_all_collations_query .= ' CHARACTER SET ' . $charset",
          "2009:             . ($charset == $tbl_collation ? '' : ' COLLATE ' . $tbl_collation);",
          "2011:         $GLOBALS['dbi']->query($change_all_collations_query);",
          "2012:     }",
          "2022:     public static function moveOrCopyTable($db, $table)",
          "2023:     {",
          "2027:         $GLOBALS['dbi']->selectDb($db);",
          "2033:         if (empty($_REQUEST['target_db'])) {",
          "2034:             $_REQUEST['target_db'] = $db;",
          "2035:         }",
          "2040:         if (Core::isValid($_REQUEST['new_name'])) {",
          "2041:             if ($db == $_REQUEST['target_db'] && $table == $_REQUEST['new_name']) {",
          "2042:                 if (isset($_REQUEST['submit_move'])) {",
          "2043:                     $message = Message::error(__('Can\\'t move table to same one!'));",
          "2044:                 } else {",
          "2045:                     $message = Message::error(__('Can\\'t copy table to same one!'));",
          "2046:                 }",
          "2047:             } else {",
          "2048:                 Table::moveCopy(",
          "2049:                     $db, $table, $_REQUEST['target_db'], $_REQUEST['new_name'],",
          "2050:                     $_REQUEST['what'], isset($_REQUEST['submit_move']), 'one_table'",
          "2051:                 );",
          "2053:                 if (isset($_REQUEST['adjust_privileges'])",
          "2054:                     && ! empty($_REQUEST['adjust_privileges'])",
          "2055:                 ) {",
          "2056:                     if (isset($_REQUEST['submit_move'])) {",
          "2057:                         self::adjustPrivilegesRenameOrMoveTable(",
          "2058:                             $db, $table, $_REQUEST['target_db'], $_REQUEST['new_name']",
          "2059:                         );",
          "2060:                     } else {",
          "2061:                         self::adjustPrivilegesCopyTable(",
          "2062:                             $db, $table, $_REQUEST['target_db'], $_REQUEST['new_name']",
          "2063:                         );",
          "2064:                     }",
          "2066:                     if (isset($_REQUEST['submit_move'])) {",
          "2067:                         $message = Message::success(",
          "2068:                             __(",
          "2069:                                 'Table %s has been moved to %s. Privileges have been '",
          "2070:                                 . 'adjusted.'",
          "2071:                             )",
          "2072:                         );",
          "2073:                     } else {",
          "2074:                         $message = Message::success(",
          "2075:                             __(",
          "2076:                                 'Table %s has been copied to %s. Privileges have been '",
          "2077:                                 . 'adjusted.'",
          "2078:                             )",
          "2079:                         );",
          "2080:                     }",
          "2082:                 } else {",
          "2083:                     if (isset($_REQUEST['submit_move'])) {",
          "2084:                         $message = Message::success(",
          "2085:                             __('Table %s has been moved to %s.')",
          "2086:                         );",
          "2087:                     } else {",
          "2088:                         $message = Message::success(",
          "2089:                             __('Table %s has been copied to %s.')",
          "2090:                         );",
          "2091:                     }",
          "2092:                 }",
          "2094:                 $old = Util::backquote($db) . '.'",
          "2095:                     . Util::backquote($table);",
          "2096:                 $message->addParam($old);",
          "2098:                 $new_name = $_REQUEST['new_name'];",
          "2099:                 if ($GLOBALS['dbi']->getLowerCaseNames() === '1') {",
          "2100:                     $new_name = strtolower($new_name);",
          "2101:                 }",
          "2103:                 $new = Util::backquote($_REQUEST['target_db']) . '.'",
          "2104:                     . Util::backquote($new_name);",
          "2105:                 $message->addParam($new);",
          "2108:                 if (isset($_REQUEST['submit_move'])",
          "2109:                     || Core::isValid($_REQUEST['switch_to_new'])",
          "2110:                 ) {",
          "2111:                 }",
          "2112:             }",
          "2113:         } else {",
          "2117:             $message = Message::error(__('The table name is empty!'));",
          "2118:         }",
          "2120:         $response = Response::getInstance();",
          "2121:         if ($response->isAjax()) {",
          "2122:             $response->addJSON('message', $message);",
          "2123:             if ($message->isSuccess()) {",
          "2124:                 $response->addJSON('db', $GLOBALS['db']);",
          "2125:             } else {",
          "2126:                 $response->setRequestStatus(false);",
          "2127:             }",
          "2128:             exit;",
          "2129:         }",
          "2130:     }",
          "2131: }",
          "",
          "---------------"
        ],
        "libraries/classes/Sql.php||libraries/classes/Sql.php": [
          "File: libraries/classes/Sql.php -> libraries/classes/Sql.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: use PhpMyAdmin\\DisplayResults;",
          "14: use PhpMyAdmin\\Index;",
          "15: use PhpMyAdmin\\Message;",
          "16: use PhpMyAdmin\\Response;",
          "17: use PhpMyAdmin\\SqlParser\\Statements\\AlterStatement;",
          "18: use PhpMyAdmin\\SqlParser\\Statements\\DropStatement;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: use PhpMyAdmin\\Operations;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: use PhpMyAdmin\\Url;",
          "24: use PhpMyAdmin\\Util;",
          "",
          "[Removed Lines]",
          "26: require_once 'libraries/operations.lib.php';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2183:                 isset($extra_data) ? $extra_data : null",
          "2184:             );",
          "2189:         if ((0 == $num_rows && 0 == $unlim_num_rows)",
          "",
          "[Removed Lines]",
          "2186:         $warning_messages = PMA_getWarningMessagesArray();",
          "",
          "[Added Lines]",
          "2185:         $warning_messages = Operations::getWarningMessagesArray();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2223:         Util::handleDisableFKCheckCleanup($default_fk_check);",
          "2225:         foreach ($warning_messages as $warning) {",
          "2227:             $html_output .= $message->getDisplay();",
          "2228:         }",
          "",
          "[Removed Lines]",
          "2226:             $message = \\PhpMyAdmin\\Message::notice($warning);",
          "",
          "[Added Lines]",
          "2225:             $message = Message::notice($warning);",
          "",
          "---------------"
        ],
        "libraries/mult_submits.lib.php||libraries/mult_submits.lib.php": [
          "File: libraries/mult_submits.lib.php -> libraries/mult_submits.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: use PhpMyAdmin\\Sql;",
          "12: use PhpMyAdmin\\Table;",
          "13: use PhpMyAdmin\\Transformations;",
          "14: use PhpMyAdmin\\Url;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: use PhpMyAdmin\\Operations;",
          "16: use PhpMyAdmin\\Util;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     foreach ($selected as $sval) {",
          "48:         if ($what == 'row_delete') {",
          "49:             $_url_params['selected'][] = 'DELETE FROM '",
          "51:                 . ' WHERE ' . $sval . ' LIMIT 1;';",
          "52:         } else {",
          "53:             $_url_params['selected'][] = $sval;",
          "",
          "[Removed Lines]",
          "50:                 . PhpMyAdmin\\Util::backquote($table)",
          "",
          "[Added Lines]",
          "52:                 . Util::backquote($table)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:         case 'drop_db':",
          "117:             PMA_relationsCleanupDatabase($selected[$i]);",
          "118:             $a_query   = 'DROP DATABASE '",
          "120:             $reload    = 1;",
          "121:             $run_parts = true;",
          "122:             $rebuild_database_list = true;",
          "",
          "[Removed Lines]",
          "119:                        . PhpMyAdmin\\Util::backquote($selected[$i]);",
          "",
          "[Added Lines]",
          "121:                        . Util::backquote($selected[$i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:             $current = $selected[$i];",
          "128:             if (!empty($views) && in_array($current, $views)) {",
          "129:                 $sql_query_views .= (empty($sql_query_views) ? 'DROP VIEW ' : ', ')",
          "131:             } else {",
          "132:                 $sql_query .= (empty($sql_query) ? 'DROP TABLE ' : ', ')",
          "134:             }",
          "135:             $reload    = 1;",
          "136:             break;",
          "138:         case 'check_tbl':",
          "139:             $sql_query .= (empty($sql_query) ? 'CHECK TABLE ' : ', ')",
          "141:             $execute_query_later = true;",
          "142:             break;",
          "144:         case 'optimize_tbl':",
          "145:             $sql_query .= (empty($sql_query) ? 'OPTIMIZE TABLE ' : ', ')",
          "147:             $execute_query_later = true;",
          "148:             break;",
          "150:         case 'analyze_tbl':",
          "151:             $sql_query .= (empty($sql_query) ? 'ANALYZE TABLE ' : ', ')",
          "153:             $execute_query_later = true;",
          "154:             break;",
          "156:         case 'checksum_tbl':",
          "157:             $sql_query .= (empty($sql_query) ? 'CHECKSUM TABLE ' : ', ')",
          "159:             $execute_query_later = true;",
          "160:             break;",
          "162:         case 'repair_tbl':",
          "163:             $sql_query .= (empty($sql_query) ? 'REPAIR TABLE ' : ', ')",
          "165:             $execute_query_later = true;",
          "166:             break;",
          "168:         case 'empty_tbl':",
          "169:             $deletes = true;",
          "170:             $a_query = 'TRUNCATE ';",
          "172:             $run_parts = true;",
          "173:             break;",
          "175:         case 'drop_fld':",
          "176:             PMA_relationsCleanupColumn($db, $table, $selected[$i]);",
          "177:             $sql_query .= (empty($sql_query)",
          "179:                 : ',')",
          "181:                        . (($i == $selected_cnt-1) ? ';' : '');",
          "182:             break;",
          "184:         case 'primary_fld':",
          "185:             $sql_query .= (empty($sql_query)",
          "187:                     . (empty($primary)",
          "188:                     ? ''",
          "189:                     : ' DROP PRIMARY KEY,') . ' ADD PRIMARY KEY( '",
          "190:                 : ', ')",
          "192:                        . (($i == $selected_cnt-1) ? ');' : '');",
          "193:             break;",
          "195:         case 'index_fld':",
          "196:             $sql_query .= (empty($sql_query)",
          "198:                     . ' ADD INDEX( '",
          "199:                 : ', ')",
          "201:                        . (($i == $selected_cnt-1) ? ');' : '');",
          "202:             break;",
          "204:         case 'unique_fld':",
          "205:             $sql_query .= (empty($sql_query)",
          "207:                     . ' ADD UNIQUE( '",
          "208:                 : ', ')",
          "210:                        . (($i == $selected_cnt-1) ? ');' : '');",
          "211:             break;",
          "213:         case 'spatial_fld':",
          "214:             $sql_query .= (empty($sql_query)",
          "216:                     . ' ADD SPATIAL( '",
          "217:                 : ', ')",
          "219:                        . (($i == $selected_cnt-1) ? ');' : '');",
          "220:             break;",
          "222:         case 'fulltext_fld':",
          "223:             $sql_query .= (empty($sql_query)",
          "225:                     . ' ADD FULLTEXT( '",
          "226:                 : ', ')",
          "228:                        . (($i == $selected_cnt-1) ? ');' : '');",
          "229:             break;",
          "",
          "[Removed Lines]",
          "130:                           . PhpMyAdmin\\Util::backquote($current);",
          "133:                            . PhpMyAdmin\\Util::backquote($current);",
          "140:                        . PhpMyAdmin\\Util::backquote($selected[$i]);",
          "146:                        . PhpMyAdmin\\Util::backquote($selected[$i]);",
          "152:                        . PhpMyAdmin\\Util::backquote($selected[$i]);",
          "158:                        . PhpMyAdmin\\Util::backquote($selected[$i]);",
          "164:                        . PhpMyAdmin\\Util::backquote($selected[$i]);",
          "171:             $a_query .= PhpMyAdmin\\Util::backquote($selected[$i]);",
          "178:                 ? 'ALTER TABLE ' . PhpMyAdmin\\Util::backquote($table)",
          "180:                        . ' DROP ' . PhpMyAdmin\\Util::backquote($selected[$i])",
          "186:                 ? 'ALTER TABLE ' . PhpMyAdmin\\Util::backquote($table)",
          "191:                        . PhpMyAdmin\\Util::backquote($selected[$i])",
          "197:                 ? 'ALTER TABLE ' . PhpMyAdmin\\Util::backquote($table)",
          "200:                        . PhpMyAdmin\\Util::backquote($selected[$i])",
          "206:                 ? 'ALTER TABLE ' . PhpMyAdmin\\Util::backquote($table)",
          "209:                        . PhpMyAdmin\\Util::backquote($selected[$i])",
          "215:                 ? 'ALTER TABLE ' . PhpMyAdmin\\Util::backquote($table)",
          "218:                        . PhpMyAdmin\\Util::backquote($selected[$i])",
          "224:                 ? 'ALTER TABLE ' . PhpMyAdmin\\Util::backquote($table)",
          "227:                        . PhpMyAdmin\\Util::backquote($selected[$i])",
          "",
          "[Added Lines]",
          "132:                           . Util::backquote($current);",
          "135:                            . Util::backquote($current);",
          "142:                        . Util::backquote($selected[$i]);",
          "148:                        . Util::backquote($selected[$i]);",
          "154:                        . Util::backquote($selected[$i]);",
          "160:                        . Util::backquote($selected[$i]);",
          "166:                        . Util::backquote($selected[$i]);",
          "173:             $a_query .= Util::backquote($selected[$i]);",
          "180:                 ? 'ALTER TABLE ' . Util::backquote($table)",
          "182:                        . ' DROP ' . Util::backquote($selected[$i])",
          "188:                 ? 'ALTER TABLE ' . Util::backquote($table)",
          "193:                        . Util::backquote($selected[$i])",
          "199:                 ? 'ALTER TABLE ' . Util::backquote($table)",
          "202:                        . Util::backquote($selected[$i])",
          "208:                 ? 'ALTER TABLE ' . Util::backquote($table)",
          "211:                        . Util::backquote($selected[$i])",
          "217:                 ? 'ALTER TABLE ' . Util::backquote($table)",
          "220:                        . Util::backquote($selected[$i])",
          "226:                 ? 'ALTER TABLE ' . Util::backquote($table)",
          "229:                        . Util::backquote($selected[$i])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "232:             $newtablename = $_POST['add_prefix'] . $selected[$i];",
          "234:             $a_query = 'ALTER TABLE '",
          "236:                 . ' RENAME '",
          "238:             $run_parts = true;",
          "239:             break;",
          "",
          "[Removed Lines]",
          "235:                 . PhpMyAdmin\\Util::backquote($selected[$i])",
          "237:                 . PhpMyAdmin\\Util::backquote($newtablename);",
          "",
          "[Added Lines]",
          "237:                 . Util::backquote($selected[$i])",
          "239:                 . Util::backquote($newtablename);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256:             }",
          "258:             $a_query = 'ALTER TABLE '",
          "260:                 . ' RENAME '",
          "262:             $run_parts = true;",
          "263:             break;",
          "",
          "[Removed Lines]",
          "259:                 . PhpMyAdmin\\Util::backquote($selected[$i])",
          "261:                 . PhpMyAdmin\\Util::backquote($newtablename);",
          "",
          "[Added Lines]",
          "261:                 . Util::backquote($selected[$i])",
          "263:                 . Util::backquote($newtablename);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "282:             $copy_tbl = true;",
          "283:             Table::moveCopy($db, $selected[$i], $_POST['target_db'], $selected[$i], $_POST['what'], false, 'one_table');",
          "284:             if (isset($_POST['adjust_privileges']) && !empty($_POST['adjust_privileges'])) {",
          "287:             }",
          "288:             break;",
          "289:         } // end switch",
          "",
          "[Removed Lines]",
          "285:                 include_once 'operations.lib.php';",
          "286:                 PMA_AdjustPrivileges_copyTable($db, $selected[$i], $_POST['target_db'], $selected[$i]);",
          "",
          "[Added Lines]",
          "287:                 Operations::adjustPrivilegesCopyTable($db, $selected[$i], $_POST['target_db'], $selected[$i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "455:     if ($what === 'drop_tbl' || $what === 'empty_tbl' || $what === 'row_delete') {",
          "456:         $html .= '<div id=\"foreignkeychk\">';",
          "458:         $html .= '</div>';",
          "459:     }",
          "460:     $html .= '<input id=\"buttonYes\" type=\"submit\" name=\"mult_btn\" value=\"'",
          "",
          "[Removed Lines]",
          "457:         $html .= PhpMyAdmin\\Util::getFKCheckbox();",
          "",
          "[Added Lines]",
          "458:         $html .= Util::getFKCheckbox();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "493:         switch ($what) {",
          "494:         case 'row_delete':",
          "495:             $full_query .= 'DELETE FROM '",
          "",
          "[Removed Lines]",
          "496:                 . PhpMyAdmin\\Util::backquote(htmlspecialchars($table))",
          "",
          "[Added Lines]",
          "497:                 . Util::backquote(htmlspecialchars($table))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "503:             break;",
          "504:         case 'drop_db':",
          "505:             $full_query .= 'DROP DATABASE '",
          "507:                 . ';<br />';",
          "508:             $reload = true;",
          "509:             break;",
          "",
          "[Removed Lines]",
          "506:                 . PhpMyAdmin\\Util::backquote(htmlspecialchars($sval))",
          "",
          "[Added Lines]",
          "507:                 . Util::backquote(htmlspecialchars($sval))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "512:             $current = $sval;",
          "513:             if (!empty($views) && in_array($current, $views)) {",
          "514:                 $full_query_views .= (empty($full_query_views) ? 'DROP VIEW ' : ', ')",
          "516:             } else {",
          "517:                 $full_query .= (empty($full_query) ? 'DROP TABLE ' : ', ')",
          "519:             }",
          "520:             break;",
          "522:         case 'empty_tbl':",
          "523:             $full_query .= 'TRUNCATE ';",
          "525:                         . ';<br />';",
          "526:             break;",
          "528:         case 'primary_fld':",
          "529:             if ($full_query == '') {",
          "530:                 $full_query .= 'ALTER TABLE '",
          "532:                     . '<br />&nbsp;&nbsp;DROP PRIMARY KEY,'",
          "533:                     . '<br />&nbsp;&nbsp; ADD PRIMARY KEY('",
          "534:                     . '<br />&nbsp;&nbsp;&nbsp;&nbsp; '",
          "536:                     . ',';",
          "537:             } else {",
          "538:                 $full_query .= '<br />&nbsp;&nbsp;&nbsp;&nbsp; '",
          "540:                     . ',';",
          "541:             }",
          "542:             if ($i == $selected_cnt-1) {",
          "",
          "[Removed Lines]",
          "515:                     . PhpMyAdmin\\Util::backquote(htmlspecialchars($current));",
          "518:                     . PhpMyAdmin\\Util::backquote(htmlspecialchars($current));",
          "524:             $full_query .= PhpMyAdmin\\Util::backquote(htmlspecialchars($sval))",
          "531:                     . PhpMyAdmin\\Util::backquote(htmlspecialchars($table))",
          "535:                     . PhpMyAdmin\\Util::backquote(htmlspecialchars($sval))",
          "539:                     . PhpMyAdmin\\Util::backquote(htmlspecialchars($sval))",
          "",
          "[Added Lines]",
          "516:                     . Util::backquote(htmlspecialchars($current));",
          "519:                     . Util::backquote(htmlspecialchars($current));",
          "525:             $full_query .= Util::backquote(htmlspecialchars($sval))",
          "532:                     . Util::backquote(htmlspecialchars($table))",
          "536:                     . Util::backquote(htmlspecialchars($sval))",
          "540:                     . Util::backquote(htmlspecialchars($sval))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "547:         case 'drop_fld':",
          "548:             if ($full_query == '') {",
          "549:                 $full_query .= 'ALTER TABLE '",
          "551:             }",
          "552:             $full_query .= '<br />&nbsp;&nbsp;DROP '",
          "554:                 . ',';",
          "555:             if ($i == $selected_cnt - 1) {",
          "556:                 $full_query = preg_replace('@,$@', ';<br />', $full_query);",
          "",
          "[Removed Lines]",
          "550:                     . PhpMyAdmin\\Util::backquote(htmlspecialchars($table));",
          "553:                 . PhpMyAdmin\\Util::backquote(htmlspecialchars($sval))",
          "",
          "[Added Lines]",
          "551:                     . Util::backquote(htmlspecialchars($table));",
          "554:                 . Util::backquote(htmlspecialchars($sval))",
          "",
          "---------------"
        ],
        "libraries/operations.lib.php||libraries/operations.lib.php": [
          "File: libraries/operations.lib.php -> libraries/operations.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tbl_operations.php||tbl_operations.php": [
          "File: tbl_operations.php -> tbl_operations.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: use PhpMyAdmin\\Partition;",
          "10: use PhpMyAdmin\\Response;",
          "",
          "[Removed Lines]",
          "9: use PhpMyAdmin\\Table;",
          "",
          "[Added Lines]",
          "8: use PhpMyAdmin\\Index;",
          "9: use PhpMyAdmin\\Message;",
          "11: use PhpMyAdmin\\Operations;",
          "13: use PhpMyAdmin\\Table;",
          "14: use PhpMyAdmin\\Util;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: require_once 'libraries/check_user_privileges.lib.php';",
          "23: $pma_table = new Table($GLOBALS['table'], $GLOBALS['db']);",
          "",
          "[Removed Lines]",
          "21: require_once 'libraries/operations.lib.php';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96: if (isset($_REQUEST['submit_move']) || isset($_REQUEST['submit_copy'])) {",
          "100:     exit;",
          "101: }",
          "",
          "[Removed Lines]",
          "98:     PMA_moveOrCopyTable($db, $table);",
          "",
          "[Added Lines]",
          "101:     Operations::moveOrCopyTable($db, $table);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:             if (isset($_REQUEST['adjust_privileges'])",
          "123:                 && ! empty($_REQUEST['adjust_privileges'])",
          "124:             ) {",
          "126:                     $oldDb, $oldTable, $_REQUEST['db'], $_REQUEST['new_name']",
          "127:                 );",
          "128:             }",
          "",
          "[Removed Lines]",
          "125:                 PMA_AdjustPrivileges_renameOrMoveTable(",
          "",
          "[Added Lines]",
          "128:                 Operations::adjustPrivilegesRenameOrMoveTable(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:         ? $create_options['row_format']",
          "161:         : $pma_table->getRowFormat();",
          "164:         $pma_table,",
          "165:         $create_options['pack_keys'],",
          "166:         (empty($create_options['checksum']) ? '0' : '1'),",
          "",
          "[Removed Lines]",
          "163:     $table_alters = PMA_getTableAltersArray(",
          "",
          "[Added Lines]",
          "166:     $table_alters = Operations::getTableAltersArray(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:     if (count($table_alters) > 0) {",
          "176:         $sql_query      = 'ALTER TABLE '",
          "178:         $sql_query     .= \"\\r\\n\" . implode(\"\\r\\n\", $table_alters);",
          "179:         $sql_query     .= ';';",
          "180:         $result        .= $GLOBALS['dbi']->query($sql_query) ? true : false;",
          "181:         $reread_info    = true;",
          "182:         unset($table_alters);",
          "184:     }",
          "186:     if (isset($_REQUEST['tbl_collation'])",
          "",
          "[Removed Lines]",
          "177:             . PhpMyAdmin\\Util::backquote($GLOBALS['table']);",
          "183:         $warning_messages = PMA_getWarningMessagesArray();",
          "",
          "[Added Lines]",
          "180:             . Util::backquote($GLOBALS['table']);",
          "186:         $warning_messages = Operations::getWarningMessagesArray();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "188:         && isset($_REQUEST['change_all_collations'])",
          "189:         && ! empty($_REQUEST['change_all_collations'])",
          "190:     ) {",
          "192:             $GLOBALS['db'], $GLOBALS['table'], $_REQUEST['tbl_collation']",
          "193:         );",
          "194:     }",
          "",
          "[Removed Lines]",
          "191:         PMA_changeAllColumnsCollation(",
          "",
          "[Added Lines]",
          "194:         Operations::changeAllColumnsCollation(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "199: if (isset($_REQUEST['submitorderby']) && ! empty($_REQUEST['order_field'])) {",
          "201: } // end if",
          "",
          "[Removed Lines]",
          "200:     list($sql_query, $result) = PMA_getQueryAndResultForReorderingTable();",
          "",
          "[Added Lines]",
          "203:     list($sql_query, $result) = Operations::getQueryAndResultForReorderingTable();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "206: if (isset($_REQUEST['submit_partition'])",
          "207:     && ! empty($_REQUEST['partition_operation'])",
          "208: ) {",
          "210: } // end if",
          "212: if ($reread_info) {",
          "",
          "[Removed Lines]",
          "209:     list($sql_query, $result) = PMA_getQueryAndResultForPartition();",
          "",
          "[Added Lines]",
          "212:     list($sql_query, $result) = Operations::getQueryAndResultForPartition();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "235: if (isset($result) && empty($message_to_show)) {",
          "236:     if (empty($_message)) {",
          "237:         if (empty($sql_query)) {",
          "239:         } else {",
          "240:             $_message = $result",
          "243:         }",
          "245:         if ($response->isAjax()) {",
          "",
          "[Removed Lines]",
          "238:             $_message = PhpMyAdmin\\Message::success(__('No change'));",
          "241:                 ? PhpMyAdmin\\Message::success()",
          "242:                 : PhpMyAdmin\\Message::error();",
          "",
          "[Added Lines]",
          "241:             $_message = Message::success(__('No change'));",
          "244:                 ? Message::success()",
          "245:                 : Message::error();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "247:             $response->addJSON('message', $_message);",
          "248:             if (!empty($sql_query)) {",
          "249:                 $response->addJSON(",
          "251:                 );",
          "252:             }",
          "253:             exit;",
          "254:         }",
          "255:     } else {",
          "256:         $_message = $result",
          "259:     }",
          "261:     if (! empty($warning_messages)) {",
          "263:         $_message->addMessagesString($warning_messages);",
          "264:         $_message->isError(true);",
          "265:         if ($response->isAjax()) {",
          "",
          "[Removed Lines]",
          "250:                     'sql_query', PhpMyAdmin\\Util::getMessage(null, $sql_query)",
          "257:             ? PhpMyAdmin\\Message::success($_message)",
          "258:             : PhpMyAdmin\\Message::error($_message);",
          "262:         $_message = new PhpMyAdmin\\Message;",
          "",
          "[Added Lines]",
          "253:                     'sql_query', Util::getMessage(null, $sql_query)",
          "260:             ? Message::success($_message)",
          "261:             : Message::error($_message);",
          "265:         $_message = new Message;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "267:             $response->addJSON('message', $_message);",
          "268:             if (!empty($sql_query)) {",
          "269:                 $response->addJSON(",
          "271:                 );",
          "272:             }",
          "273:             exit;",
          "",
          "[Removed Lines]",
          "270:                     'sql_query', PhpMyAdmin\\Util::getMessage(null, $sql_query)",
          "",
          "[Added Lines]",
          "273:                     'sql_query', Util::getMessage(null, $sql_query)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "281:         );",
          "282:     } else {",
          "283:         $response->addHTML(",
          "285:         );",
          "286:     }",
          "287:     unset($_message);",
          "",
          "[Removed Lines]",
          "284:             PhpMyAdmin\\Util::getMessage($_message, $sql_query)",
          "",
          "[Added Lines]",
          "287:             Util::getMessage($_message, $sql_query)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "310: if ($tbl_storage_engine == 'INNODB') {",
          "312:     foreach ($indexes as $name => $idx) {",
          "313:         if ($name == 'PRIMARY') {",
          "314:             $hideOrderTable = true;",
          "",
          "[Removed Lines]",
          "311:     $indexes = PhpMyAdmin\\Index::getFromTable($GLOBALS['table'], $GLOBALS['db']);",
          "",
          "[Added Lines]",
          "314:     $indexes = Index::getFromTable($GLOBALS['table'], $GLOBALS['db']);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "329:     }",
          "330: }",
          "331: if (! $hideOrderTable) {",
          "333: }",
          "340: if (mb_strstr($show_comment, '; InnoDB free') === false) {",
          "341:     if (mb_strstr($show_comment, 'InnoDB free') === false) {",
          "",
          "[Removed Lines]",
          "332:     $response->addHTML(PMA_getHtmlForOrderTheTable($columns));",
          "338: $response->addHTML(PMA_getHtmlForMoveTable());",
          "",
          "[Added Lines]",
          "335:     $response->addHTML(Operations::getHtmlForOrderTheTable($columns));",
          "341: $response->addHTML(Operations::getHtmlForMoveTable());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "361: $response->addHTML(",
          "363:         $pma_table, $comment, $tbl_collation, $tbl_storage_engine,",
          "364:         $create_options['pack_keys'],",
          "365:         $auto_increment,",
          "",
          "[Removed Lines]",
          "362:     PMA_getTableOptionDiv(",
          "",
          "[Added Lines]",
          "365:     Operations::getTableOptionDiv(",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "381: $response->addHTML(",
          "383: );",
          "385: if (! (isset($db_is_system_schema) && $db_is_system_schema)) {",
          "",
          "[Removed Lines]",
          "376: $response->addHTML(PMA_getHtmlForCopytable());",
          "382:     PMA_getHtmlForTableMaintenance($pma_table, $url_params)",
          "",
          "[Added Lines]",
          "379: $response->addHTML(Operations::getHtmlForCopytable());",
          "385:     Operations::getHtmlForTableMaintenance($pma_table, $url_params)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "390:         && ! (isset($db_is_system_schema) && $db_is_system_schema)",
          "391:     ) {",
          "392:         $this_sql_query = 'TRUNCATE TABLE '",
          "394:         $truncate_table_url_params = array_merge(",
          "395:             $url_params,",
          "396:             array(",
          "",
          "[Removed Lines]",
          "393:             . PhpMyAdmin\\Util::backquote($GLOBALS['table']);",
          "",
          "[Added Lines]",
          "396:             . Util::backquote($GLOBALS['table']);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "406:     }",
          "407:     if (! (isset($db_is_system_schema) && $db_is_system_schema)) {",
          "408:         $this_sql_query = 'DROP TABLE '",
          "410:         $drop_table_url_params = array_merge(",
          "411:             $url_params,",
          "412:             array(",
          "",
          "[Removed Lines]",
          "409:             . PhpMyAdmin\\Util::backquote($GLOBALS['table']);",
          "",
          "[Added Lines]",
          "412:             . Util::backquote($GLOBALS['table']);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "428:         );",
          "429:     }",
          "430:     $response->addHTML(",
          "432:             $truncate_table_url_params,",
          "433:             $drop_table_url_params",
          "434:         )",
          "",
          "[Removed Lines]",
          "431:         PMA_getHtmlForDeleteDataOrTable(",
          "",
          "[Added Lines]",
          "434:         Operations::getHtmlForDeleteDataOrTable(",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "441:     if (! is_null($partition_names[0])) {",
          "442:         $response->addHTML(",
          "444:         );",
          "445:     } // end if",
          "446: } // end if",
          "",
          "[Removed Lines]",
          "443:             PMA_getHtmlForPartitionMaintenance($partition_names, $url_params)",
          "",
          "[Added Lines]",
          "446:             Operations::getHtmlForPartitionMaintenance($partition_names, $url_params)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "459:     if (! empty($foreign)) {",
          "460:         $response->addHTML(",
          "462:         );",
          "463:     } // end if ($foreign)",
          "",
          "[Removed Lines]",
          "461:             PMA_getHtmlForReferentialIntegrityCheck($foreign, $url_params)",
          "",
          "[Added Lines]",
          "464:             Operations::getHtmlForReferentialIntegrityCheck($foreign, $url_params)",
          "",
          "---------------"
        ],
        "test/libraries/PMA_operations_test.php||test/classes/OperationsTest.php": [
          "File: test/libraries/PMA_operations_test.php -> test/classes/OperationsTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: use PhpMyAdmin\\Theme;",
          "17: require_once 'libraries/relation.lib.php';",
          "19: require_once 'libraries/database_interface.inc.php';",
          "",
          "[Removed Lines]",
          "15: $GLOBALS['server'] = 1;",
          "16: require_once 'libraries/operations.lib.php';",
          "",
          "[Added Lines]",
          "8: namespace PhpMyAdmin\\Tests;",
          "10: use PhpMyAdmin\\Operations;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: {",
          "",
          "[Removed Lines]",
          "26: class PMA_Operations_Test extends PHPUnit_Framework_TestCase",
          "",
          "[Added Lines]",
          "21: class OperationsTest extends \\PHPUnit_Framework_TestCase",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:     public function setup()",
          "34:     {",
          "35:         $GLOBALS['table'] = 'table';",
          "36:         $GLOBALS['db'] = 'db';",
          "37:         $GLOBALS['cfg'] = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         $GLOBALS['server'] = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59:         $this->assertRegExp(",
          "60:             '/.*db_operations.php(.|[\\n])*Database comment.*name=\"comment\"([\\n]|.)*/m',",
          "62:         );",
          "63:     }",
          "",
          "[Removed Lines]",
          "61:             PMA_getHtmlForDatabaseComment(\"pma\")",
          "",
          "[Added Lines]",
          "57:             Operations::getHtmlForDatabaseComment(\"pma\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "71:     {",
          "73:         $_REQUEST['db_collation'] = 'db1';",
          "75:         $this->assertContains('db_operations.php', $html);",
          "76:         $this->assertRegExp(",
          "77:             '/.*db_rename.*Rename database to.*/',",
          "",
          "[Removed Lines]",
          "74:         $html = PMA_getHtmlForRenameDatabase(\"pma\");",
          "",
          "[Added Lines]",
          "70:         $html = Operations::getHtmlForRenameDatabase(\"pma\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "90:         $this->assertRegExp(",
          "91:             '/.*DROP.DATABASE.*db_operations.php.*Drop the database.*/',",
          "93:         );",
          "94:     }",
          "101:     public function testGetHtmlForCopyDatabase()",
          "102:     {",
          "103:         $_REQUEST['db_collation'] = 'db1';",
          "105:         $this->assertRegExp('/.*db_operations.php.*/', $html);",
          "106:         $this->assertRegExp('/.*db_copy.*/', $html);",
          "107:         $this->assertRegExp('/.*Copy database to.*/', $html);",
          "108:     }",
          "",
          "[Removed Lines]",
          "92:             PMA_getHtmlForDropDatabaseLink(\"pma\")",
          "104:         $html = PMA_getHtmlForCopyDatabase(\"pma\");",
          "",
          "[Added Lines]",
          "88:             Operations::getHtmlForDropDatabaseLink(\"pma\")",
          "100:         $html = Operations::getHtmlForCopyDatabase(\"pma\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "116:     {",
          "118:         $_REQUEST['db_collation'] = 'db1';",
          "120:         $this->assertRegExp(",
          "121:             '/.*select_db_collation.*Collation.*/m', $result",
          "122:         );",
          "",
          "[Removed Lines]",
          "119:         $result = PMA_getHtmlForChangeDatabaseCharset(\"pma\", \"bookmark\");",
          "",
          "[Added Lines]",
          "115:         $result = Operations::getHtmlForChangeDatabaseCharset(\"pma\", \"bookmark\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "136:         $this->assertRegExp(",
          "137:             '/.*tbl_operations.php(.|[\\n])*Alter table order by([\\n]|.)*order_order.*/m',",
          "139:                 array(array('Field' => \"column1\"), array('Field' => \"column2\"))",
          "140:             )",
          "141:         );",
          "142:     }",
          "",
          "[Removed Lines]",
          "138:             PMA_getHtmlForOrderTheTable(",
          "",
          "[Added Lines]",
          "134:             Operations::getHtmlForOrderTheTable(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "152:         $this->assertEquals(",
          "153:             '<tr><td class=\"vmiddle\"><label for=\"name\">lable</label></td><td><input type=\"checkbox\" name=\"name\" id=\"name\" value=\"1\"/></td></tr>',",
          "155:         );",
          "156:     }",
          "",
          "[Removed Lines]",
          "154:             PMA_getHtmlForTableRow(\"name\", \"lable\", \"value\")",
          "",
          "[Added Lines]",
          "150:             Operations::getHtmlForTableRow(\"name\", \"lable\", \"value\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "166:         $this->assertRegExp(",
          "167:             '/.*href=\"sql.php.*post.*/',",
          "169:                 \"post\",",
          "170:                 array(\"name\" => 'foo', \"value\" => 'bar'),",
          "171:                 array(),",
          "",
          "[Removed Lines]",
          "168:             PMA_getMaintainActionlink(",
          "",
          "[Added Lines]",
          "164:             Operations::getMaintainActionlink(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "185:         $this->assertRegExp(",
          "186:             '/.*Delete data or table.*Empty the table.*Delete the table.*/m',",
          "188:                 array(\"truncate\" => 'foo'), array(\"drop\" => 'bar')",
          "189:             )",
          "190:         );",
          "191:     }",
          "",
          "[Removed Lines]",
          "187:             PMA_getHtmlForDeleteDataOrTable(",
          "",
          "[Added Lines]",
          "183:             Operations::getHtmlForDeleteDataOrTable(",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "201:         $this->assertRegExp(",
          "202:             '/.*TRUNCATE.TABLE.foo.*id_truncate.*Truncate table.*/m',",
          "204:                 array(\"sql\" => 'TRUNCATE TABLE foo'),",
          "205:                 \"TRUNCATE_TABLE\",",
          "206:                 \"Truncate table\",",
          "",
          "[Removed Lines]",
          "203:             PMA_getDeleteDataOrTablelink(",
          "",
          "[Added Lines]",
          "199:             Operations::getDeleteDataOrTablelink(",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "210:     }",
          "217:     public function testGetHtmlForPartitionMaintenance()",
          "218:     {",
          "220:             array(\"partition1\", \"partion2\"),",
          "221:             array(\"param1\" => 'foo', \"param2\" => 'bar')",
          "222:         );",
          "",
          "[Removed Lines]",
          "219:         $html = PMA_getHtmlForPartitionMaintenance(",
          "",
          "[Added Lines]",
          "215:         $html = Operations::getHtmlForPartitionMaintenance(",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "236:         $this->assertRegExp(",
          "237:             '/.*Check referential integrity.*href=\"sql.php(.|[\\n])*/m',",
          "239:                 array(",
          "240:                     array(",
          "241:                         'foreign_db'    => 'db1',",
          "",
          "[Removed Lines]",
          "238:             PMA_getHtmlForReferentialIntegrityCheck(",
          "",
          "[Added Lines]",
          "234:             Operations::getHtmlForReferentialIntegrityCheck(",
          "",
          "---------------"
        ],
        "view_operations.php||view_operations.php": [
          "File: view_operations.php -> view_operations.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: use PhpMyAdmin\\Response;",
          "10: use PhpMyAdmin\\Url;",
          "",
          "[Removed Lines]",
          "8: use PhpMyAdmin\\Table;",
          "",
          "[Added Lines]",
          "8: use PhpMyAdmin\\Message;",
          "9: use PhpMyAdmin\\Operations;",
          "11: use PhpMyAdmin\\Table;",
          "13: use PhpMyAdmin\\Util;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: $pma_table = new Table($GLOBALS['table'], $GLOBALS['db']);",
          "",
          "[Removed Lines]",
          "22: require_once 'libraries/operations.lib.php';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: $_type = 'success';",
          "44: if (isset($_REQUEST['submitoptions'])) {",
          "",
          "[Removed Lines]",
          "42: $_message = new PhpMyAdmin\\Message;",
          "",
          "[Added Lines]",
          "40: $_message = new Message;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:         }",
          "58:     }",
          "61: }",
          "63: if (isset($result)) {",
          "",
          "[Removed Lines]",
          "60:     $warning_messages = PMA_getWarningMessagesArray();",
          "",
          "[Added Lines]",
          "58:     $warning_messages = Operations::getWarningMessagesArray();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "79:         $_message->isError(true);",
          "80:         unset($warning_messages);",
          "81:     }",
          "83:         $_message, $sql_query, $_type",
          "84:     );",
          "85: }",
          "",
          "[Removed Lines]",
          "82:     echo PhpMyAdmin\\Util::getMessage(",
          "",
          "[Added Lines]",
          "80:     echo Util::getMessage(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "120: $drop_view_url_params = array_merge(",
          "121:     $url_params,",
          "122:     array(",
          "124:             $GLOBALS['table']",
          "125:         ),",
          "126:         'goto' => 'tbl_structure.php',",
          "",
          "[Removed Lines]",
          "123:         'sql_query' => 'DROP VIEW ' . PhpMyAdmin\\Util::backquote(",
          "",
          "[Added Lines]",
          "121:         'sql_query' => 'DROP VIEW ' . Util::backquote(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "138: echo '<legend>' , __('Delete data or table') , '</legend>';",
          "140: echo '<ul>';",
          "142:     $drop_view_url_params,",
          "143:     'DROP VIEW',",
          "144:     __('Delete the view (DROP)'),",
          "",
          "[Removed Lines]",
          "141: echo PMA_getDeleteDataOrTableLink(",
          "",
          "[Added Lines]",
          "139: echo Operations::getDeleteDataOrTablelink(",
          "",
          "---------------"
        ]
      }
    }
  ]
}