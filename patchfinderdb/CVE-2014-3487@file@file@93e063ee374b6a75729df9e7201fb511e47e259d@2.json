{
  "cve_id": "CVE-2014-3487",
  "cve_desc": "The cdf_read_property_info function in file before 5.19, as used in the Fileinfo component in PHP before 5.4.30 and 5.5.x before 5.5.14, does not properly validate a stream offset, which allows remote attackers to cause a denial of service (application crash) via a crafted CDF file.",
  "repo": "file/file",
  "patch_hash": "93e063ee374b6a75729df9e7201fb511e47e259d",
  "patch_info": {
    "commit_hash": "93e063ee374b6a75729df9e7201fb511e47e259d",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/93e063ee374b6a75729df9e7201fb511e47e259d",
    "files": [
      "src/cdf.c"
    ],
    "message": "Add missing check offset test (Francisco Alonso, Jan Kaluza at RedHat)",
    "before_after_code_files": [
      "src/cdf.c||src/cdf.c"
    ]
  },
  "patch_diff": {
    "src/cdf.c||src/cdf.c": [
      "File: src/cdf.c -> src/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.61 2014/06/04 17:23:19 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.62 2014/06/04 17:26:07 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "816:  if (cdf_check_stream_offset(sst, h, e, 0, __LINE__) == -1)",
      "817:   goto out;",
      "818:  for (i = 0; i < sh.sh_properties; i++) {",
      "820:   q = (const uint8_t *)(const void *)",
      "821:       ((const char *)(const void *)p + ofs",
      "822:       - 2 * sizeof(uint32_t));",
      "",
      "[Removed Lines]",
      "819:   size_t ofs = CDF_GETUINT32(p, (i << 1) + 1);",
      "",
      "[Added Lines]",
      "819:   size_t tail = (i << 1) + 1;",
      "820:   if (cdf_check_stream_offset(sst, h, p, tail * sizeof(uint32_t),",
      "821:       __LINE__) == -1)",
      "822:    goto out;",
      "823:   size_t ofs = CDF_GETUINT32(p, tail);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d683328df506519bd674624dd4bff3c8dbef3e75",
      "candidate_info": {
        "commit_hash": "d683328df506519bd674624dd4bff3c8dbef3e75",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d683328df506519bd674624dd4bff3c8dbef3e75",
        "files": [
          "src/cdf.c"
        ],
        "message": "Fix thumbs parsing (wrong offsets, skip first entry, pack)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.74 2015/01/11 17:00:23 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.75 2015/02/27 21:16:55 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1026:      CDF_SHORT_SEC_SIZE(h) : CDF_SEC_SIZE(h);",
          "1027:  const char *b = CAST(const char *, sst->sst_tab);",
          "1028:  const char *eb = b + ss * sst->sst_len;",
          "1030:  cdf_catalog_entry_t *ce;",
          "1031:  uint16_t reclen;",
          "1032:  const uint16_t *np;",
          "1035:   memcpy(&reclen, b, sizeof(reclen));",
          "1036:   reclen = CDF_TOLE2(reclen);",
          "1037:   if (reclen == 0)",
          "1038:    break;",
          "1039:   b += reclen;",
          "1040:  }",
          "1042:      malloc(sizeof(cdf_catalog_t) + nr * sizeof(*ce)));",
          "1044:  ce = (*cat)->cat_e;",
          "1045:  memset(ce, 0, nr * sizeof(*ce));",
          "1046:  b = CAST(const char *, sst->sst_tab);",
          "1049:   uint16_t rlen;",
          "1051:   extract_catalog_field(uint16_t, ce_namlen, 0);",
          "1054:   reclen = cep->ce_namlen;",
          "1056:   if (reclen < 14) {",
          "",
          "[Removed Lines]",
          "1029:  size_t nr, i, k;",
          "1034:  for (nr = 0; b < eb; nr++) {",
          "1043:  (*cat)->cat_num = nr;",
          "1047:  for (i = 0; i < nr; i++, b += reclen) {",
          "1048:   cdf_catalog_entry_t *cep = &ce[i];",
          "1052:   extract_catalog_field(uint16_t, ce_num, 2);",
          "1053:   extract_catalog_field(uint64_t, ce_timestamp, 6);",
          "",
          "[Added Lines]",
          "1029:  size_t nr, i, j, k;",
          "1034:  for (nr = 0;; nr++) {",
          "1040:   if (b > eb)",
          "1041:       break;",
          "1043:  nr--;",
          "1049:  for (j = i = 0; i < nr; b += reclen) {",
          "1050:   cdf_catalog_entry_t *cep = &ce[j];",
          "1054:   extract_catalog_field(uint16_t, ce_num, 4);",
          "1055:   extract_catalog_field(uint64_t, ce_timestamp, 8);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1072:   for (k = 0; k < cep->ce_namlen; k++)",
          "1074:   cep->ce_name[cep->ce_namlen] = 0;",
          "1075:  }",
          "1076:  return 0;",
          "1077: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1077:   j = i;",
          "1078:   i++;",
          "1080:  (*cat)->cat_num = j;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1431:  cdf_dir_t dir;",
          "1432:  cdf_info_t info;",
          "1433:  const cdf_directory_t *root;",
          "1435:  if (argc < 2) {",
          "1436:   (void)fprintf(stderr, \"Usage: %s <filename>\\n\", getprogname());",
          "1437:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439: #ifdef __linux__",
          "1440: #define getprogname() __progname",
          "1441:  extern char *__progname;",
          "1442: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1484:    cdf_dump_summary_info(&h, &scn);",
          "1485: #endif",
          "1486:   if (cdf_read_user_stream(&info, &h, &sat, &ssat, &sst,",
          "1488:    warn(\"Cannot read catalog\");",
          "1489: #ifdef CDF_DEBUG",
          "1490:   else",
          "",
          "[Removed Lines]",
          "1487:       &dir, \"Catalog\", &scn) <= 0)",
          "",
          "[Added Lines]",
          "1495:       &dir, \"Catalog\", &scn) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13f16b33de9119e3c629a17e93ce7198a5c113dc",
      "candidate_info": {
        "commit_hash": "13f16b33de9119e3c629a17e93ce7198a5c113dc",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/13f16b33de9119e3c629a17e93ce7198a5c113dc",
        "files": [
          "src/cdf.c"
        ],
        "message": "make sure we leave everything initialized.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.70 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.71 2015/01/05 18:00:36 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004: #define extract_catalog_field(t, f, l) \\",
          "1007:     memcpy(&cep->f, b + (l), sizeof(cep->f)); \\",
          "1008:     ce[i].f = CAST(t, CDF_TOLE(cep->f))",
          "",
          "[Removed Lines]",
          "1005:     if (b + l + sizeof(cep->f) > eb) \\",
          "1006:  break; \\",
          "",
          "[Added Lines]",
          "1005:     if (b + l + sizeof(cep->f) > eb) { \\",
          "1006:      cep->ce_namlen = 0; \\",
          "1007:      break; \\",
          "1008:     } \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1031:      malloc(sizeof(cdf_catalog_t) + nr * sizeof(*ce)));",
          "1032:  (*cat)->cat_num = nr;",
          "1033:  ce = (*cat)->cat_e;",
          "1034:  b = CAST(const char *, sst->sst_tab);",
          "1035:  for (i = 0; i < nr; i++, b += reclen) {",
          "1036:   cdf_catalog_entry_t *cep = &ce[i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1036:  memset(ce, 0, nr * sizeof(*ce));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1044:   if (reclen < 14) {",
          "1045:    cep->ce_namlen = 0;",
          "1047:    continue;",
          "1048:   }",
          "",
          "[Removed Lines]",
          "1046:    cep->ce_name[0] = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1053:    cep->ce_namlen = rlen;",
          "1055:   np = CAST(const uint16_t *, CAST(const void *, (b + 16)));",
          "1057:    break;",
          "1059:   for (k = 0; k < cep->ce_namlen; k++)",
          "",
          "[Removed Lines]",
          "1056:   if (CAST(const char *, np + cep->ce_namlen) > eb)",
          "",
          "[Added Lines]",
          "1058:   if (CAST(const char *, np + cep->ce_namlen) > eb) {",
          "1059:    cep->ce_namlen = 0;",
          "1061:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fab35c455083da9d06e27aa03922a3d0ba1adfeb",
      "candidate_info": {
        "commit_hash": "fab35c455083da9d06e27aa03922a3d0ba1adfeb",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/fab35c455083da9d06e27aa03922a3d0ba1adfeb",
        "files": [
          "src/cdf.c",
          "src/cdf.h",
          "src/readcdf.c"
        ],
        "message": "PR/352: Support for Hangul (Korean) Word Processor 5.x Files (*.hwp)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h",
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.57 2014/05/06 18:20:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.58 2014/05/13 16:41:06 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "723: cdf_read_summary_info(const cdf_info_t *info, const cdf_header_t *h,",
          "724:     const cdf_sat_t *sat, const cdf_sat_t *ssat, const cdf_stream_t *sst,",
          "725:     const cdf_dir_t *dir, cdf_stream_t *scn)",
          "726: {",
          "727:  size_t i;",
          "728:  const cdf_directory_t *d;",
          "731:  for (i = dir->dir_len; i > 0; i--)",
          "732:   if (dir->dir_tab[i - 1].d_type == CDF_DIR_TYPE_USER_STREAM &&",
          "734:       == 0)",
          "735:    break;",
          "737:  if (i == 0) {",
          "739:   errno = ESRCH;",
          "740:   return -1;",
          "741:  }",
          "",
          "[Removed Lines]",
          "729:  static const char name[] = \"\\05SummaryInformation\";",
          "733:       cdf_namecmp(name, dir->dir_tab[i - 1].d_name, sizeof(name))",
          "738:   DPRINTF((\"Cannot find summary information section\\n\"));",
          "",
          "[Added Lines]",
          "726: {",
          "727:  return cdf_read_user_stream(info, h, sat, ssat, sst, dir,",
          "728:      \"\\05SummaryInformation\", scn);",
          "729: }",
          "731: int",
          "732: cdf_read_user_stream(const cdf_info_t *info, const cdf_header_t *h,",
          "733:     const cdf_sat_t *sat, const cdf_sat_t *ssat, const cdf_stream_t *sst,",
          "734:     const cdf_dir_t *dir, const char *name, cdf_stream_t *scn)",
          "738:  size_t name_len = strlen(name) + 1;",
          "742:       cdf_namecmp(name, dir->dir_tab[i - 1].d_name, name_len)",
          "747:   DPRINTF((\"Cannot find user stream `%s'\\n\", name));",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:     const cdf_directory_t **);",
          "299: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
          "300:     cdf_property_info_t **, size_t *, size_t *);",
          "301: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
          "302:     const cdf_sat_t *, const cdf_sat_t *, const cdf_stream_t *,",
          "303:     const cdf_dir_t *, cdf_stream_t *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301: int cdf_read_user_stream(const cdf_info_t *, const cdf_header_t *,",
          "302:     const cdf_sat_t *, const cdf_sat_t *, const cdf_stream_t *,",
          "303:     const cdf_dir_t *, const char *, cdf_stream_t *);",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.42 2014/05/07 10:13:12 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.43 2014/05/07 21:26:06 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:         int len;",
          "139:         if (!NOTMIME(ms) && root_storage)",
          "142:         for (i = 0; i < count; i++) {",
          "143:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
          "",
          "[Removed Lines]",
          "140:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
          "",
          "[Added Lines]",
          "140:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid,",
          "141:       clsid2mime);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282:                         break;",
          "283:                 }",
          "284:   if (root_storage) {",
          "286:    if (str)",
          "287:     if (file_printf(ms, \", %s\", str) == -1)",
          "288:      return -2;",
          "",
          "[Removed Lines]",
          "285:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
          "",
          "[Added Lines]",
          "286:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid,",
          "287:        clsid2desc);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "375:  }",
          "376: #endif",
          "378:         if ((i = cdf_read_summary_info(&info, &h, &sat, &ssat, &sst, &dir,",
          "379:             &scn)) == -1) {",
          "380:                 if (errno == ESRCH) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380:  if ((i = cdf_read_user_stream(&info, &h, &sat, &ssat, &sst, &dir,",
          "381:      \"FileHeader\", &scn)) != -1) {",
          "382: #define HWP5_SIGNATURE \"HWP Document File\"",
          "383:   if (scn.sst_dirlen >= sizeof(HWP5_SIGNATURE) - 1",
          "384:       && memcmp(scn.sst_tab, HWP5_SIGNATURE,",
          "385:       sizeof(HWP5_SIGNATURE) - 1) == 0) {",
          "386:       if (NOTMIME(ms)) {",
          "387:    if (file_printf(ms,",
          "388:        \"Hangul (Korean) Word Processor File 5.x\") == -1)",
          "389:        return -1;",
          "390:       } else {",
          "391:    if (file_printf(ms, \"application/x-hwp\") == -1)",
          "392:        return -1;",
          "393:       }",
          "394:       i = 1;",
          "395:       goto out5;",
          "396:   } else {",
          "397:       free(scn.sst_tab);",
          "398:       scn.sst_tab = NULL;",
          "399:       scn.sst_len = 0;",
          "400:       scn.sst_dirlen = 0;",
          "401:   }",
          "402:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "418:    i = 1;",
          "419:   }",
          "420:  }",
          "421:         free(scn.sst_tab);",
          "422: out4:",
          "423:         free(sst.sst_tab);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447: out5:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b13553a5bf399192f20bf76525025901670e9799",
      "candidate_info": {
        "commit_hash": "b13553a5bf399192f20bf76525025901670e9799",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b13553a5bf399192f20bf76525025901670e9799",
        "files": [
          "src/cdf.c",
          "src/cdf.h",
          "src/readcdf.c"
        ],
        "message": "Add thumbs.db parsing support.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h",
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.62 2014/06/04 17:26:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.63 2014/06/09 13:04:37 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: #define CDF_TOLE8(x) ((uint64_t)(NEED_SWAP ? _cdf_tole8(x) : (uint64_t)(x)))",
          "74: #define CDF_TOLE4(x) ((uint32_t)(NEED_SWAP ? _cdf_tole4(x) : (uint32_t)(x)))",
          "75: #define CDF_TOLE2(x) ((uint16_t)(NEED_SWAP ? _cdf_tole2(x) : (uint16_t)(x)))",
          "76: #define CDF_GETUINT32(x, y) cdf_getuint32(x, y)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: #define CDF_TOLE(x) (sizeof(x) == 2 ? CDF_TOLE2(x) : (sizeof(x) == 4 ? \\",
          "77:     CDF_TOLE4(x) : CDF_TOLE8(x)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "731:      \"\\05SummaryInformation\", scn);",
          "732: }",
          "734: int",
          "735: cdf_read_user_stream(const cdf_info_t *info, const cdf_header_t *h,",
          "736:     const cdf_sat_t *sat, const cdf_sat_t *ssat, const cdf_stream_t *sst,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "736: int",
          "737: cdf_read_catalog(cdf_info_t *info, const cdf_header_t *h,",
          "738:     const cdf_sat_t *sat, const cdf_sat_t *ssat, const cdf_stream_t *sst,",
          "739:     const cdf_dir_t *dir, cdf_stream_t *scn)",
          "740: {",
          "741:  return cdf_read_user_stream(info, h, sat, ssat, sst, dir,",
          "742:      \"Catalog\", scn);",
          "743: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "985: }",
          "989: int",
          "990: cdf_print_classid(char *buf, size_t buflen, const cdf_classid_t *id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "999: #define extract_catalog_field(f, l) \\",
          "1000:     memcpy(&ce[i].f, b + (l), sizeof(ce[i].f)); \\",
          "1001:     ce[i].f = CDF_TOLE(ce[i].f)",
          "1003: int",
          "1004: cdf_unpack_catalog(const cdf_header_t *h, const cdf_stream_t *sst,",
          "1005:     cdf_catalog_t **cat)",
          "1006: {",
          "1007:  size_t ss = sst->sst_dirlen < h->h_min_size_standard_stream ?",
          "1008:      CDF_SHORT_SEC_SIZE(h) : CDF_SEC_SIZE(h);",
          "1009:  const char *b = CAST(const char *, sst->sst_tab);",
          "1010:  const char *eb = b + ss * sst->sst_len;",
          "1011:  size_t nr, i, k;",
          "1012:  cdf_catalog_entry_t *ce;",
          "1013:  uint16_t reclen;",
          "1014:  const uint16_t *np;",
          "1016:  for (nr = 0; b < eb; nr++) {",
          "1017:   memcpy(&reclen, b, sizeof(reclen));",
          "1018:   reclen = CDF_TOLE2(reclen);",
          "1019:   if (reclen == 0)",
          "1020:    break;",
          "1021:   b += reclen;",
          "1022:  }",
          "1024:      malloc(sizeof(cdf_catalog_t) + nr * sizeof(*ce)));",
          "1025:  (*cat)->cat_num = nr;",
          "1026:  ce = (*cat)->cat_e;",
          "1027:  b = CAST(const char *, sst->sst_tab);",
          "1028:  for (i = 0; i < nr; i++) {",
          "1029:   extract_catalog_field(ce_namlen, 0);",
          "1030:   extract_catalog_field(ce_num, 2);",
          "1031:   extract_catalog_field(ce_timestamp, 6);",
          "1032:   reclen = ce[i].ce_namlen;",
          "1033:   ce[i].ce_namlen =",
          "1034:       sizeof(ce[i].ce_name) / sizeof(ce[i].ce_name[0]) - 1;",
          "1035:   if (ce[i].ce_namlen > reclen - 14)",
          "1036:    ce[i].ce_namlen = reclen - 14;",
          "1037:   np = CAST(const uint16_t *, (b + 16));",
          "1038:   for (k = 0; k < ce[i].ce_namlen; k++) {",
          "1039:    ce[i].ce_name[k] = np[k];",
          "1040:    CDF_TOLE2(ce[i].ce_name[k]);",
          "1041:   }",
          "1042:   ce[i].ce_name[ce[i].ce_namlen] = 0;",
          "1043:   b += reclen;",
          "1044:  }",
          "1045:  return 0;",
          "1046: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1068:  return len;",
          "1069: }",
          "1072: #ifdef CDF_DEBUG",
          "1073: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130: char *",
          "1131: cdf_u16tos8(char *buf, size_t len, const uint16_t *p)",
          "1132: {",
          "1133:  size_t i;",
          "1134:  for (i = 0; i < len && p[i]; i++)",
          "1135:   buf[i] = (char)p[i];",
          "1136:  buf[i] = '\\0';",
          "1137:  return buf;",
          "1138: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1288:   return;",
          "1289:  (void)fprintf(stderr, \"Endian: %x\\n\", ssi.si_byte_order);",
          "1290:  (void)fprintf(stderr, \"Os Version %d.%d\\n\", ssi.si_os_version & 0xff,",
          "1292:  (void)fprintf(stderr, \"Os %d\\n\", ssi.si_os);",
          "1293:  cdf_print_classid(buf, sizeof(buf), &ssi.si_class);",
          "1294:  (void)fprintf(stderr, \"Class %s\\n\", buf);",
          "",
          "[Removed Lines]",
          "1291:   ssi.si_os_version >> 8);",
          "",
          "[Added Lines]",
          "1359:      ssi.si_os_version >> 8);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1297:  free(info);",
          "1298: }",
          "1300: #endif",
          "1302: #ifdef TEST",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1369: void",
          "1370: cdf_dump_catalog(const cdf_header_t *h, const cdf_stream_t *sst)",
          "1371: {",
          "1372:  cdf_catalog_t *cat;",
          "1373:  cdf_unpack_catalog(h, sst, &cat);",
          "1374:  const cdf_catalog_entry_t *ce = cat->cat_e;",
          "1375:  struct timespec ts;",
          "1376:  char tbuf[64], sbuf[256];",
          "1377:  size_t i;",
          "1379:  printf(\"Catalog:\\n\");",
          "1380:  for (i = 0; i < cat->cat_num; i++) {",
          "1381:   cdf_timestamp_to_timespec(&ts, ce[i].ce_timestamp);",
          "1382:   printf(\"\\t%d %s %s\", ce[i].ce_num,",
          "1383:       cdf_u16tos8(sbuf, ce[i].ce_namlen, ce[i].ce_name),",
          "1384:       cdf_ctime(&ts.tv_sec, tbuf));",
          "1385:  }",
          "1386:  free(cat);",
          "1387: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1309:  cdf_stream_t sst, scn;",
          "1310:  cdf_dir_t dir;",
          "1311:  cdf_info_t info;",
          "1313:  if (argc < 2) {",
          "1314:   (void)fprintf(stderr, \"Usage: %s <filename>\\n\", getprogname());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1401:  const cdf_directory_t *root;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1342:   if (cdf_read_dir(&info, &h, &sat, &dir) == -1)",
          "1343:    err(1, \"Cannot read dir\");",
          "1346:    err(1, \"Cannot read short stream\");",
          "1347: #ifdef CDF_DEBUG",
          "1348:   cdf_dump_stream(&h, &sst);",
          "",
          "[Removed Lines]",
          "1345:   if (cdf_read_short_stream(&info, &h, &sat, &dir, &sst) == -1)",
          "",
          "[Added Lines]",
          "1435:   if (cdf_read_short_stream(&info, &h, &sat, &dir, &sst, &root)",
          "1436:       == -1)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1356:   if (cdf_read_summary_info(&info, &h, &sat, &ssat, &sst, &dir,",
          "1357:       &scn) == -1)",
          "1359: #ifdef CDF_DEBUG",
          "1361: #endif",
          "1363:   (void)close(info.i_fd);",
          "",
          "[Removed Lines]",
          "1358:    err(1, \"Cannot read summary info\");",
          "1360:   cdf_dump_summary_info(&h, &scn);",
          "",
          "[Added Lines]",
          "1449:    warn(\"Cannot read summary info\");",
          "1450: #ifdef CDF_DEBUG",
          "1451:   else",
          "1452:    cdf_dump_summary_info(&h, &scn);",
          "1453: #endif",
          "1454:   if (cdf_read_catalog(&info, &h, &sat, &ssat, &sst, &dir,",
          "1455:       &scn) == -1)",
          "1456:    warn(\"Cannot read catalog\");",
          "1458:   else",
          "1459:    cdf_dump_catalog(&h, &scn);",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:  size_t i_len;",
          "268: } cdf_info_t;",
          "270: struct timespec;",
          "271: int cdf_timestamp_to_timespec(struct timespec *, cdf_timestamp_t);",
          "272: int cdf_timespec_to_timestamp(cdf_timestamp_t *, const struct timespec *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: typedef struct {",
          "272:  uint16_t ce_namlen;",
          "273:  uint32_t ce_num;",
          "274:  uint64_t ce_timestamp;",
          "275:  uint16_t ce_name[256];",
          "276: } cdf_catalog_entry_t;",
          "278: typedef struct {",
          "279:  size_t cat_num;",
          "280:  cdf_catalog_entry_t cat_e[0];",
          "281: } cdf_catalog_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301: int cdf_read_user_stream(const cdf_info_t *, const cdf_header_t *,",
          "302:     const cdf_sat_t *, const cdf_sat_t *, const cdf_stream_t *,",
          "303:     const cdf_dir_t *, const char *, cdf_stream_t *);",
          "304: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
          "305:     const cdf_sat_t *, const cdf_sat_t *, const cdf_stream_t *,",
          "306:     const cdf_dir_t *, cdf_stream_t *);",
          "307: int cdf_unpack_summary_info(const cdf_stream_t *, const cdf_header_t *,",
          "308:     cdf_summary_info_header_t *, cdf_property_info_t **, size_t *);",
          "309: int cdf_print_classid(char *, size_t, const cdf_classid_t *);",
          "310: int cdf_print_property_name(char *, size_t, uint32_t);",
          "311: int cdf_print_elapsed_time(char *, size_t, cdf_timestamp_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317: int cdf_read_catalog(cdf_info_t *, const cdf_header_t *,",
          "318:     const cdf_sat_t *, const cdf_sat_t *, const cdf_stream_t *,",
          "319:     const cdf_dir_t *, cdf_stream_t *);",
          "325: int cdf_unpack_catalog(const cdf_header_t *, const cdf_stream_t *,",
          "326:     cdf_catalog_t **);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313: uint32_t cdf_tole4(uint32_t);",
          "314: uint64_t cdf_tole8(uint64_t);",
          "315: char *cdf_ctime(const time_t *, char *);",
          "317: #ifdef CDF_DEBUG",
          "318: void cdf_dump_header(const cdf_header_t *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: char *cdf_u16tos8(char *, size_t, const uint16_t *);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323:     const cdf_sat_t *, const cdf_stream_t *, const cdf_dir_t *);",
          "324: void cdf_dump_property_info(const cdf_property_info_t *, size_t);",
          "325: void cdf_dump_summary_info(const cdf_header_t *, const cdf_stream_t *);",
          "326: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: void cdf_dump_catalog(const cdf_header_t *, const cdf_stream_t *);",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.43 2014/05/07 21:26:06 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.44 2014/05/14 23:22:48 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:         return 1;",
          "241: }",
          "243: private int",
          "244: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
          "245:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: private int",
          "244: cdf_file_catalog(struct magic_set *ms, const cdf_header_t *h,",
          "245:     const cdf_stream_t *sst)",
          "246: {",
          "247:  cdf_catalog_t *cat;",
          "248:  size_t i;",
          "249:  char buf[256];",
          "250:  cdf_catalog_entry_t *ce;",
          "252:         if (NOTMIME(ms)) {",
          "253:   if (file_printf(ms, \"Microsoft Thumbs.db [\") == -1)",
          "254:    return -1;",
          "255:   if (cdf_unpack_catalog(h, sst, &cat) == -1)",
          "256:    return -1;",
          "257:   ce = cat->cat_e;",
          "259:   for (i = 1; i < cat->cat_num; i++)",
          "260:    if (file_printf(ms, \"%s%s\",",
          "261:        cdf_u16tos8(buf, ce[i].ce_namlen, ce[i].ce_name),",
          "262:        i == cat->cat_num - 1 ? \"]\" : \", \") == -1) {",
          "263:     free(cat);",
          "264:     return -1;",
          "265:    }",
          "266:   free(cat);",
          "267:  } else {",
          "268:   if (file_printf(ms, \"application/CDFV2\") == -1)",
          "269:    return -1;",
          "270:  }",
          "271:  return 1;",
          "272: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "285:   if (root_storage) {",
          "286:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid,",
          "287:        clsid2desc);",
          "289:     if (file_printf(ms, \", %s\", str) == -1)",
          "290:      return -2;",
          "291:    }",
          "292:   }",
          "294:         m = cdf_file_property_info(ms, info, count, root_storage);",
          "295:         free(info);",
          "",
          "[Removed Lines]",
          "288:    if (str)",
          "",
          "[Added Lines]",
          "319:    if (str) {",
          "324:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "404:         if ((i = cdf_read_summary_info(&info, &h, &sat, &ssat, &sst, &dir,",
          "405:             &scn)) == -1) {",
          "406:                 if (errno == ESRCH) {",
          "409:                 } else {",
          "410:                         expn = \"Cannot read summary info\";",
          "411:                 }",
          "",
          "[Removed Lines]",
          "407:                         corrupt = expn;",
          "408:                         expn = \"No summary info\";",
          "",
          "[Added Lines]",
          "439:    if ((i = cdf_read_catalog(&info, &h, &sat, &ssat, &sst,",
          "440:        &dir, &scn)) == -1) {",
          "441:     corrupt = expn;",
          "442:     expn = \"No summary info\";",
          "443:     goto out4;",
          "444:    }",
          "445: #ifdef CDF_DEBUG",
          "446:    cdf_dump_catalog(&h, &scn);",
          "447: #endif",
          "448:    if ((i = cdf_file_catalog(ms, &h, &scn))",
          "449:        < 0)",
          "450:     expn = \"Can't expand catalog\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f0fcc2e7b999cb3a94d2aac6b47c9193da7e742",
      "candidate_info": {
        "commit_hash": "8f0fcc2e7b999cb3a94d2aac6b47c9193da7e742",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/8f0fcc2e7b999cb3a94d2aac6b47c9193da7e742",
        "files": [
          "src/cdf.c"
        ],
        "message": "make debugging code compile again",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.73 2015/01/11 16:58:25 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.74 2015/01/11 17:00:23 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1483:   else",
          "1484:    cdf_dump_summary_info(&h, &scn);",
          "1485: #endif",
          "1488:    warn(\"Cannot read catalog\");",
          "1489: #ifdef CDF_DEBUG",
          "1490:   else",
          "",
          "[Removed Lines]",
          "1486:   if (cdf_read_catalog(&info, &h, &sat, &ssat, &sst, &dir,",
          "1487:       &scn) == -1)",
          "",
          "[Added Lines]",
          "1486:   if (cdf_read_user_stream(&info, &h, &sat, &ssat, &sst,",
          "1487:       &dir, \"Catalog\", &scn) <= 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}