{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bfa70de11729499021b5cf91e78fd49fa1784d43",
      "candidate_info": {
        "commit_hash": "bfa70de11729499021b5cf91e78fd49fa1784d43",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bfa70de11729499021b5cf91e78fd49fa1784d43",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 61fdfc57b9539cb6da5fc24653da2c8fb7c041a7409df911df11b987ed479a3a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e7aca0714bc475e04b16e9db78722ce025d2a1382f80cfc0a49cff2af904eae5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9edd8c11ab5f04ad052413f1b1be712e45a2d650",
      "candidate_info": {
        "commit_hash": "9edd8c11ab5f04ad052413f1b1be712e45a2d650",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9edd8c11ab5f04ad052413f1b1be712e45a2d650",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/rowid.test"
        ],
        "message": "Fix VDBE opcodes OP_SeekLT and OP_SeekLE so that they work on intkey tables with non-numeric text values.\n\nFossilOrigin-Name: a870c196d78d8b72c7353fa0015e96b2abd4be154541d76328e3a4f9e5da5d04",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/rowid.test||test/rowid.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad8fc5d8b440c49df95328df0408be699dde5a1dbd195b3f1f32e5f765578032",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4013:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4014:       if( (pIn3->flags & MEM_Real)==0 ){",
          "",
          "[Removed Lines]",
          "4017:         VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4018:         break;",
          "4019:       }",
          "",
          "[Added Lines]",
          "4015:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "4016:           VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4017:           break;",
          "4018:         }else{",
          "4019:           sqlite3BtreeLast(pC->uc.pCursor, &res);",
          "4020:           goto seek_not_found;",
          "4021:         }",
          "4022:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4040:         assert( (OP_SeekLT & 0x0001)==(OP_SeekGE & 0x0001) );",
          "4041:         if( (oc & 0x0001)==(OP_SeekLT & 0x0001) ) oc++;",
          "4042:       }",
          "4044:     rc = sqlite3BtreeMovetoUnpacked(pC->uc.pCursor, 0, (u64)iKey, 0, &res);",
          "4046:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4043:     }",
          "",
          "[Added Lines]",
          "4046:     }",
          "",
          "---------------"
        ],
        "test/rowid.test||test/rowid.test": [
          "File: test/rowid.test -> test/rowid.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc'}",
          "660: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "662: # Test the automatic generation of rowids when the table already contains",
          "663: # a rowid with the maximum value.",
          "664: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662: do_test rowid-11.asc.1 {",
          "663:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 ASC}",
          "664: } {}",
          "665: do_test rowid-11.asc.2 {",
          "666:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 ASC}",
          "667: } {}",
          "668: do_test rowid-11.asc.3 {",
          "669:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 ASC}",
          "670: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "671: do_test rowid-11.asc.4 {",
          "672:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 ASC}",
          "673: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "675: do_test rowid-11.desc.1 {",
          "676:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 DESC}",
          "677: } {}",
          "678: do_test rowid-11.desc.2 {",
          "679:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 DESC}",
          "680: } {}",
          "681: do_test rowid-11.desc.3 {",
          "682:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 DESC}",
          "683: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "684: do_test rowid-11.desc.4 {",
          "685:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 DESC}",
          "686: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:   SELECT last_insert_rowid();",
          "720: } {1234 5 2234 | 2234 4990756 3234 | 3234 10458756 4234 | 4234}",
          "722: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: #-------------------------------------------------------------------------",
          "749: do_execsql_test rowid-14.0 {",
          "750:   CREATE TABLE t14(x INTEGER PRIMARY KEY);",
          "751:   INSERT INTO t14(x) VALUES (100);",
          "752: }",
          "753: do_execsql_test rowid-14.1 {",
          "754:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "755: } {100}",
          "756: do_execsql_test rowid-14.2 {",
          "757:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "758: } {100}",
          "760: do_execsql_test rowid-14.3 {",
          "761:   DELETE FROM t14;",
          "762:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "763: } {}",
          "764: do_execsql_test rowid-14.4 {",
          "765:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "766: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
      "candidate_info": {
        "commit_hash": "73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata1.db"
        ],
        "message": "Add more test cases from Yongheng Chen and Rui Zhong.\n\nFossilOrigin-Name: f24e6ca4f23008212ec05cace9202dbeb37ee34530ead91fac2f5e3eac7f6347",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76f8318e315e24ebd22e25e6222bb9df8bc2e401",
      "candidate_info": {
        "commit_hash": "76f8318e315e24ebd22e25e6222bb9df8bc2e401",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76f8318e315e24ebd22e25e6222bb9df8bc2e401",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the \"fastfuzztest\" makefile target.  Use only \"fuzztest\".\n\nFossilOrigin-Name: e17571c789db31123642d0ed1f3d8764e070019e0deb8b88cce58d2183551cdf",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242:  ./fuzzcheck$(TEXE) $(FUZZDATA)",
          "1243:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "1249: valgrindfuzz: fuzzcheck$(TEXT) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1250:  valgrind ./fuzzcheck$(TEXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "1251:  valgrind ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "1245: fastfuzztest: fuzzcheck$(TEXE) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1246:  ./fuzzcheck$(TEXE) --limit-mem 100M $(FUZZDATA)",
          "1247:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1263: # This is the common case.  Run many tests that do not take too long,",
          "1264: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "1265: #",
          "1268: # Run a test using valgrind.  This can take a really long time",
          "1269: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "1266: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "1262: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2404: fuzztest: fuzzcheck.exe",
          "2405:  .\\fuzzcheck.exe $(FUZZDATA)",
          "2410: # Minimal testing that runs in less than 3 minutes (on a fast machine)",
          "2411: #",
          "2412: quicktest: testfixture.exe sourcetest",
          "",
          "[Removed Lines]",
          "2407: fastfuzztest: fuzzcheck.exe",
          "2408:  .\\fuzzcheck.exe --limit-mem 100M $(FUZZDATA)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2416: # This is the common case.  Run many tests that do not take too long,",
          "2417: # including fuzzcheck, sqlite3_analyzer, and sqldiff tests.",
          "2418: #",
          "2420:  @set PATH=$(LIBTCLPATH);$(PATH)",
          "2421:  .\\testfixture.exe $(TOP)\\test\\veryquick.test $(TESTOPTS)",
          "",
          "[Removed Lines]",
          "2419: test: $(TESTPROGS) sourcetest fastfuzztest",
          "",
          "[Added Lines]",
          "2416: test: $(TESTPROGS) sourcetest fuzztest",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:  ./fuzzcheck$(EXE) $(FUZZDATA)",
          "935:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "941: valgrindfuzz: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "942:  valgrind ./fuzzcheck$(EXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "943:  valgrind ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "937: fastfuzztest: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "938:  ./fuzzcheck$(EXE) --limit-mem 100M $(FUZZDATA)",
          "939:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "956: # The default test case.  Runs most of the faster standard TCL tests,",
          "957: # and fuzz tests, and sqlite3_analyzer and sqldiff tests.",
          "960: # Run a test using valgrind.  This can take a really long time",
          "961: # because valgrind is so much slower than a native machine.",
          "",
          "[Removed Lines]",
          "958: test: fastfuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "[Added Lines]",
          "954: test: fuzztest sourcetest $(TESTPROGS) tcltest",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b68d21e93a0839b42f49845918df7738ee7fa2a05c7f4ae2f89fdbb5e47ad8eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc6214ee3910093d930962ba026e1f8329b6ef98",
      "candidate_info": {
        "commit_hash": "dc6214ee3910093d930962ba026e1f8329b6ef98",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc6214ee3910093d930962ba026e1f8329b6ef98",
        "files": [
          "ext/rbu/rbu_common.tcl",
          "ext/rbu/rbuvacuum2.test",
          "ext/rbu/sqlite3rbu.c",
          "ext/rbu/sqlite3rbu.h",
          "ext/rbu/test_rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with using \"<db>-vacuum\" (the default) as the state database when resuming an RBU vacuum.\n\nFossilOrigin-Name: c878d741733a897d47a1a0b57b454bc9095ce302b48cc01089336d5d20e2a24c",
        "before_after_code_files": [
          "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl",
          "ext/rbu/rbuvacuum2.test||ext/rbu/rbuvacuum2.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "ext/rbu/sqlite3rbu.h||ext/rbu/sqlite3rbu.h",
          "ext/rbu/test_rbu.c||ext/rbu/test_rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl": [
          "File: ext/rbu/rbu_common.tcl -> ext/rbu/rbu_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   set rc",
          "87: }",
          "93:     while 1 {",
          "95:       set state [rbu state]",
          "96:       check_prestep_state test.db $state",
          "97:       set rc [rbu step]",
          "",
          "[Removed Lines]",
          "89: proc do_rbu_vacuum_test {tn step} {",
          "90:   forcedelete state.db",
          "91:   uplevel [list do_test $tn.1 {",
          "92:     if {$step==0} { sqlite3rbu_vacuum rbu test.db state.db }",
          "94:       if {$step==1} { sqlite3rbu_vacuum rbu test.db state.db }",
          "",
          "[Added Lines]",
          "89: proc do_rbu_vacuum_test {tn step {statedb state.db}} {",
          "90:   forcedelete $statedb",
          "91:   if {$statedb==\"\" && $step==1} breakpoint",
          "92:   uplevel [list do_test $tn.1 [string map [list %state% $statedb] {",
          "93:     if {$step==0} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "95:       if {$step==1} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:       if {$step==1} { rbu close }",
          "101:     }",
          "102:     rbu close",
          "105:   uplevel [list do_execsql_test $tn.2 {",
          "106:     PRAGMA integrity_check",
          "",
          "[Removed Lines]",
          "103:   } {SQLITE_DONE}]",
          "",
          "[Added Lines]",
          "104:   }] {SQLITE_DONE}]",
          "",
          "---------------"
        ],
        "ext/rbu/rbuvacuum2.test||ext/rbu/rbuvacuum2.test": [
          "File: ext/rbu/rbuvacuum2.test -> ext/rbu/rbuvacuum2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: source [file join [file dirname [info script]] rbu_common.tcl]",
          "22:   #-------------------------------------------------------------------------",
          "23:   # Test that a database that contains fts3 tables can be vacuumed.",
          "",
          "[Removed Lines]",
          "19: foreach step {0 1} {",
          "20:   set ::testprefix rbuvacuum2-$step",
          "",
          "[Added Lines]",
          "19: foreach {step} {0 1} {",
          "20: foreach {ttt state} {",
          "21:   s state.db t test.db-vacuum n {}",
          "22: } {",
          "23:   set ::testprefix rbuvacuum2-$step$ttt",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:       INSERT INTO t1 VALUES('fix this issue', 'at some point');",
          "30:     }",
          "34:     do_execsql_test 1.3 {",
          "35:       SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "32:     do_rbu_vacuum_test 1.2 $step",
          "",
          "[Added Lines]",
          "35:     do_rbu_vacuum_test 1.2 $step $state",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:       INSERT INTO t1 VALUES('a b c', 'x y z');",
          "47:     }",
          "50:     do_execsql_test 1.7 {",
          "51:       INSERT INTO t1(t1) VALUES('integrity-check');",
          "52:       SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "49:     do_rbu_vacuum_test 1.6 $step",
          "",
          "[Added Lines]",
          "52:     do_rbu_vacuum_test 1.6 $step $state",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67:       INSERT INTO t1 VALUES('fix this issue', 'at some point');",
          "68:     }",
          "72:     do_execsql_test 2.3 {",
          "73:       SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "70:     do_rbu_vacuum_test 2.2 $step",
          "",
          "[Added Lines]",
          "73:     do_rbu_vacuum_test 2.2 $step $state",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:       INSERT INTO t1 VALUES('a b c', 'x y z');",
          "85:     }",
          "88:     do_execsql_test 2.7 {",
          "89:       INSERT INTO t1(t1) VALUES('integrity-check');",
          "90:       SELECT * FROM t1;",
          "",
          "[Removed Lines]",
          "87:     do_rbu_vacuum_test 2.6 $step",
          "",
          "[Added Lines]",
          "90:     do_rbu_vacuum_test 2.6 $step $state",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "107:       INSERT INTO rt VALUES(3, 55, 65);",
          "108:     }",
          "112:     do_execsql_test 3.3 {",
          "113:       SELECT * FROM rt;",
          "",
          "[Removed Lines]",
          "110:     do_rbu_vacuum_test 3.2 $step",
          "",
          "[Added Lines]",
          "113:     do_rbu_vacuum_test 3.2 $step $state",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "120:       SELECT rowid FROM rt WHERE x2>59 AND x1 < 59",
          "121:     } {2 3}",
          "125:     do_execsql_test 3.6.1 {",
          "126:       SELECT rowid FROM rt WHERE x2>51 AND x1 < 51",
          "",
          "[Removed Lines]",
          "123:     do_rbu_vacuum_test 3.5 $step",
          "",
          "[Added Lines]",
          "126:     do_rbu_vacuum_test 3.5 $step $state",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "147:     trigger tr1 t1 0 {CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN SELECT 1; END}",
          "148:     }",
          "151:     do_execsql_test 4.4 {",
          "152:       SELECT * FROM sqlite_master;",
          "153:     } {",
          "",
          "[Removed Lines]",
          "150:     do_rbu_vacuum_test 4.3 $step",
          "",
          "[Added Lines]",
          "153:     do_rbu_vacuum_test 4.3 $step $state",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "157:     }",
          "158:   }",
          "159: }",
          "161: #-------------------------------------------------------------------------",
          "162: # Test that passing a NULL value as the second argument to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "231:   execsql { PRAGMA integrity_check }",
          "232: } {ok}",
          "234: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238: do_test 6.4 {",
          "239:   sqlite3rbu_vacuum rbu test.db test.db-vactmp",
          "240:   list [catch { rbu close } msg] $msg",
          "241: } {1 SQLITE_MISUSE}",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2477:         if( *zExtra=='\\0' ) zExtra = 0;",
          "2478:       }",
          "2481:           sqlite3_db_filename(p->dbRbu, \"main\"),",
          "2482:           (zExtra==0 ? \"\" : \"&\"), (zExtra==0 ? \"\" : zExtra)",
          "2483:       );",
          "",
          "[Removed Lines]",
          "2480:       zTarget = sqlite3_mprintf(\"file:%s-vacuum?rbu_memory=1%s%s\",",
          "",
          "[Added Lines]",
          "2480:       zTarget = sqlite3_mprintf(\"file:%s-vactmp?rbu_memory=1%s%s\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3743:   const char *zState",
          "3744: ){",
          "3745:   if( zTarget==0 ){ return rbuMisuseError(); }",
          "3747:   return openRbuHandle(0, zTarget, zState);",
          "3748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3746:   if( zState ){",
          "3747:     int n = strlen(zState);",
          "3748:     if( n>=7 && 0==memcmp(\"-vactmp\", &zState[n-7], 7) ){",
          "3749:       return rbuMisuseError();",
          "3750:     }",
          "3751:   }",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.h||ext/rbu/sqlite3rbu.h": [
          "File: ext/rbu/sqlite3rbu.h -> ext/rbu/sqlite3rbu.h"
        ],
        "ext/rbu/test_rbu.c||ext/rbu/test_rbu.c": [
          "File: ext/rbu/test_rbu.c -> ext/rbu/test_rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:   zCmd = Tcl_GetString(objv[1]);",
          "274:   zTarget = Tcl_GetString(objv[2]);",
          "275:   if( objc==4 ) zStateDb = Tcl_GetString(objv[3]);",
          "277:   pRbu = sqlite3rbu_vacuum(zTarget, zStateDb);",
          "278:   Tcl_CreateObjCommand(interp, zCmd, test_sqlite3rbu_cmd, (ClientData)pRbu, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:   if( zStateDb && zStateDb[0]=='\\0' ) zStateDb = 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77f150b8b46761f4f62f9d8926c10a95a70589a4525393fc16b321bd98c083a7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}