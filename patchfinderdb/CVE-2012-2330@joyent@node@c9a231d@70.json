{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "27c85727edda169cbe9c04178c6fdee642cb8845",
      "candidate_info": {
        "commit_hash": "27c85727edda169cbe9c04178c6fdee642cb8845",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/27c85727edda169cbe9c04178c6fdee642cb8845",
        "files": [
          "lib/module.js"
        ],
        "message": "module: fix --debug-brk on symlinked scripts\n\n* fixes #1519",
        "before_after_code_files": [
          "lib/module.js||limodule.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/module.js||limodule.js": [
          "File: lib/module.js -> limodule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "360: };",
          "364: Module.prototype._compile = function(content, filename) {",
          "365:   var self = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:   var wrapper = Module.wrap(content);",
          "429:   var compiledWrapper = runInThisContext(wrapper, filename, true);",
          "432:   }",
          "433:   var args = [self.exports, require, self, filename, dirname];",
          "434:   return compiledWrapper.apply(self.exports, args);",
          "",
          "[Removed Lines]",
          "430:   if (filename === process.argv[1] && global.v8debug) {",
          "431:     global.v8debug.Debug.setBreakPoint(compiledWrapper, 0, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "845b9e92d8c12c42777495e7cb9aa1a458a982e2",
      "candidate_info": {
        "commit_hash": "845b9e92d8c12c42777495e7cb9aa1a458a982e2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/845b9e92d8c12c42777495e7cb9aa1a458a982e2",
        "files": [
          "deps/uv/config-unix.mk",
          "deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/linux/linux-core.c",
          "deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/proctitle.c",
          "deps/uv/src/unix/sunos.c",
          "deps/uv/uv.gyp"
        ],
        "message": "uv: Upgrade to 94355e4",
        "before_after_code_files": [
          "deps/uv/config-unix.mk||deps/uv/config-unix.mk",
          "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/linux/linux-core.c||deps/uv/src/unix/linux/linux-core.c",
          "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c",
          "deps/uv/src/unix/proctitle.c||deps/uv/src/unix/proctitle.c",
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/config-unix.mk||deps/uv/config-unix.mk": [
          "File: deps/uv/config-unix.mk -> deps/uv/config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: RUNNER_LINKFLAGS += -pthread",
          "129: endif",
          "135: RUNNER_LIBS=",
          "136: RUNNER_SRC=test/runner-unix.c",
          "",
          "[Removed Lines]",
          "131: ifneq (FreeBSD,$(uname_S))",
          "132: OBJS += src/unix/proctitle.o",
          "133: endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c": [
          "File: deps/uv/src/unix/darwin.c -> deps/uv/src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include <sys/sysctl.h>",
          "44: #if TARGET_OS_IPHONE",
          "46: uint64_t uv_hrtime() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: static char *process_title;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136: }",
          "139: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "140:   struct task_basic_info t_info;",
          "141:   mach_msg_type_number_t t_info_count = TASK_BASIC_INFO_COUNT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: char** uv_setup_args(int argc, char** argv) {",
          "142:   process_title = argc ? strdup(argv[0]) : NULL;",
          "143:   return argv;",
          "144: }",
          "147: uv_err_t uv_set_process_title(const char* title) {",
          "149:   return uv__new_artificial_error(UV_ENOSYS);",
          "150: }",
          "153: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "154:   if (process_title) {",
          "155:     strncpy(buffer, process_title, size);",
          "156:   } else {",
          "157:     if (size > 0) {",
          "158:       buffer[0] = '\\0';",
          "159:     }",
          "160:   }",
          "162:   return uv_ok_;",
          "163: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/linux/linux-core.c||deps/uv/src/unix/linux/linux-core.c": [
          "File: deps/uv/src/unix/linux/linux-core.c -> deps/uv/src/unix/linux/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: static char buf[MAXPATHLEN + 1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: static struct {",
          "62:   char *str;",
          "63:   size_t len;",
          "64: } process_title;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: }",
          "110: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "111:   FILE* f;",
          "112:   int itmp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: char** uv_setup_args(int argc, char** argv) {",
          "116:   char **new_argv;",
          "117:   char **new_env;",
          "118:   size_t size;",
          "119:   int envc;",
          "120:   char *s;",
          "121:   int i;",
          "123:   for (envc = 0; environ[envc]; envc++);",
          "125:   s = envc ? environ[envc - 1] : argv[argc - 1];",
          "127:   process_title.str = argv[0];",
          "128:   process_title.len = s + strlen(s) + 1 - argv[0];",
          "130:   size = process_title.len;",
          "131:   size += (argc + 1) * sizeof(char **);",
          "132:   size += (envc + 1) * sizeof(char **);",
          "134:   if ((s = (char *) malloc(size)) == NULL) {",
          "135:     process_title.str = NULL;",
          "136:     process_title.len = 0;",
          "137:     return argv;",
          "138:   }",
          "140:   new_argv = (char **) s;",
          "141:   new_env = new_argv + argc + 1;",
          "142:   s = (char *) (new_env + envc + 1);",
          "143:   memcpy(s, process_title.str, process_title.len);",
          "145:   for (i = 0; i < argc; i++)",
          "146:     new_argv[i] = s + (argv[i] - argv[0]);",
          "147:   new_argv[argc] = NULL;",
          "149:   s += environ[0] - argv[0];",
          "151:   for (i = 0; i < envc; i++)",
          "152:     new_env[i] = s + (environ[i] - environ[0]);",
          "153:   new_env[envc] = NULL;",
          "155:   environ = new_env;",
          "156:   return new_argv;",
          "157: }",
          "160: uv_err_t uv_set_process_title(const char* title) {",
          "162:   if (process_title.len)",
          "163:     strncpy(process_title.str, title, process_title.len - 1);",
          "165:   return uv_ok_;",
          "166: }",
          "169: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "170:   if (process_title.str) {",
          "171:     strncpy(buffer, process_title.str, size);",
          "172:   } else {",
          "173:     if (size > 0) {",
          "174:       buffer[0] = '\\0';",
          "175:     }",
          "176:   }",
          "178:   return uv_ok_;",
          "179: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c": [
          "File: deps/uv/src/unix/openbsd.c -> deps/uv/src/unix/openbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define NANOSEC ((uint64_t) 1e9)",
          "43: uint64_t uv_hrtime(void) {",
          "44:   struct timespec ts;",
          "45:   clock_gettime(CLOCK_MONOTONIC, &ts);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: static char *process_title;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: }",
          "137: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "138:   kvm_t *kd = NULL;",
          "139:   struct kinfo_proc *kinfo = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: char** uv_setup_args(int argc, char** argv) {",
          "141:   process_title = argc ? strdup(argv[0]) : NULL;",
          "142:   return argv;",
          "143: }",
          "146: uv_err_t uv_set_process_title(const char* title) {",
          "147:   if (process_title) free(process_title);",
          "148:   process_title = strdup(title);",
          "149:   setproctitle(title);",
          "150:   return uv_ok_;",
          "151: }",
          "154: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "155:   if (process_title) {",
          "156:     strncpy(buffer, process_title, size);",
          "157:   } else {",
          "158:     if (size > 0) {",
          "159:       buffer[0] = '\\0';",
          "160:     }",
          "161:   }",
          "163:   return uv_ok_;",
          "164: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/pipe.c||deps/uv/src/unix/pipe.c": [
          "File: deps/uv/src/unix/pipe.c -> deps/uv/src/unix/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:                     uv_connect_cb cb) {",
          "171:   struct sockaddr_un saddr;",
          "172:   int saved_errno;",
          "175:   int r;",
          "177:   saved_errno = errno;",
          "186:   memset(&saddr, 0, sizeof saddr);",
          "187:   uv_strlcpy(saddr.sun_path, name, sizeof(saddr.sun_path));",
          "",
          "[Removed Lines]",
          "173:   int sockfd;",
          "174:   int status;",
          "178:   sockfd = -1;",
          "179:   status = -1;",
          "181:   if ((sockfd = uv__socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {",
          "182:     uv__set_sys_error(handle->loop, errno);",
          "183:     goto out;",
          "184:   }",
          "",
          "[Added Lines]",
          "173:   int new_sock;",
          "174:   int err;",
          "178:   new_sock = (handle->fd == -1);",
          "179:   err = -1;",
          "181:   if (new_sock)",
          "182:     if ((handle->fd = uv__socket(AF_UNIX, SOCK_STREAM, 0)) == -1)",
          "183:       goto out;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:   do {",
          "195:   }",
          "196:   while (r == -1 && errno == EINTR);",
          "201:     goto out;",
          "207:   uv__io_start(handle->loop, &handle->read_watcher);",
          "208:   uv__io_start(handle->loop, &handle->write_watcher);",
          "211: out:",
          "213:   handle->connect_req = req;",
          "215:   uv__req_init(handle->loop, req, UV_CONNECT);",
          "",
          "[Removed Lines]",
          "194:     r = connect(sockfd, (struct sockaddr*)&saddr, sizeof saddr);",
          "198:   if (r == -1) {",
          "199:     status = errno;",
          "200:     close(sockfd);",
          "202:   }",
          "204:   uv__stream_open((uv_stream_t*)handle,",
          "205:                   sockfd,",
          "206:                   UV_STREAM_READABLE | UV_STREAM_WRITABLE);",
          "209:   status = 0;",
          "",
          "[Added Lines]",
          "193:     r = connect(handle->fd, (struct sockaddr*)&saddr, sizeof saddr);",
          "197:   if (r == -1)",
          "200:   if (new_sock)",
          "201:     if (uv__stream_open((uv_stream_t*)handle,",
          "202:                         handle->fd,",
          "203:                         UV_STREAM_READABLE | UV_STREAM_WRITABLE))",
          "204:       goto out;",
          "208:   err = 0;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/proctitle.c||deps/uv/src/unix/proctitle.c": [
          "File: deps/uv/src/unix/proctitle.c -> deps/uv/src/unix/proctitle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "242:   psinfo_t psinfo;",
          "243:   uv_err_t err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: char** uv_setup_args(int argc, char** argv) {",
          "242:   return argv;",
          "243: }",
          "246: uv_err_t uv_set_process_title(const char* title) {",
          "247:   return uv_ok_;",
          "248: }",
          "251: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "252:   if (size > 0) {",
          "253:     buffer[0] = '\\0';",
          "254:   }",
          "255:   return uv_ok_;",
          "256: }",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:         [ 'OS==\"mac\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "288:           'sources': [ 'src/unix/kqueue.c' ],",
          "289:         }],",
          "293:       ]",
          "294:     },",
          "",
          "[Removed Lines]",
          "290:         [ 'OS!=\"win\" and OS!=\"freebsd\"', {",
          "291:           'sources': [ 'src/unix/proctitle.c' ],",
          "292:         }],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "999757983c8fafa140bef77705db77c7699f5830",
      "candidate_info": {
        "commit_hash": "999757983c8fafa140bef77705db77c7699f5830",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/999757983c8fafa140bef77705db77c7699f5830",
        "files": [
          "test/simple/test-debugger-repl-utf8.js"
        ],
        "message": "test: don't let debugger listen on common.PORT\n\nsimple/test-debugger-repl-utf8 has a tendency to fail and leave behind a stray\nprocess that listens on common.PORT, making later tests fail with EADDRINUSE.",
        "before_after_code_files": [
          "test/simple/test-debugger-repl-utf8.js||test/simple/test-debugger-repl-utf8.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-debugger-repl-utf8.js||test/simple/test-debugger-repl-utf8.js": [
          "File: test/simple/test-debugger-repl-utf8.js -> test/simple/test-debugger-repl-utf8.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var spawn = require('child_process').spawn;",
          "26: var debug = require('_debugger');",
          "28: var script = common.fixturesDir + '/breakpoints_utf8.js';",
          "32: var buffer = '';",
          "33: child.stdout.setEncoding('utf-8');",
          "",
          "[Removed Lines]",
          "30: var child = spawn(process.execPath, ['debug', '--port=' + common.PORT, script]);",
          "",
          "[Added Lines]",
          "28: var port = common.PORT + 1337;",
          "32: var child = spawn(process.execPath, ['debug', '--port=' + port, script]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d73b257d6543606e23361a0cd8a41e09591f4312",
      "candidate_info": {
        "commit_hash": "d73b257d6543606e23361a0cd8a41e09591f4312",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d73b257d6543606e23361a0cd8a41e09591f4312",
        "files": [
          "lib/cluster.js"
        ],
        "message": "docs: grammar and spelling on lib/cluster.js",
        "before_after_code_files": [
          "lib/cluster.js||lib/cluster.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/cluster.js||lib/cluster.js": [
          "File: lib/cluster.js -> lib/cluster.js"
        ]
      }
    },
    {
      "candidate_hash": "b9127eb0a5d64a2317197e3b4956bdd7450523da",
      "candidate_info": {
        "commit_hash": "b9127eb0a5d64a2317197e3b4956bdd7450523da",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b9127eb0a5d64a2317197e3b4956bdd7450523da",
        "files": [
          "src/node_buffer.cc",
          "test/simple/test-buffer.js"
        ],
        "message": "buffer: support decoding of URL-safe base64",
        "before_after_code_files": [
          "src/node_buffer.cc||src/node_buffer.cc",
          "test/simple/test-buffer.js||test/simple/test-buffer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_buffer.cc||src/node_buffer.cc": [
          "File: src/node_buffer.cc -> src/node_buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "278: static const char *base64_table = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
          "279:                                   \"abcdefghijklmnopqrstuvwxyz\"",
          "280:                                   \"0123456789+/\";",
          "281: static const int unbase64_table[] =",
          "282:   {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2,-1,-1,-2,-1,-1",
          "283:   ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1",
          "285:   ,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1",
          "286:   ,-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14",
          "288:   ,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40",
          "289:   ,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1",
          "290:   ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1",
          "",
          "[Removed Lines]",
          "284:   ,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63",
          "287:   ,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1",
          "",
          "[Added Lines]",
          "286:   ,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,62,-1,63",
          "289:   ,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,63",
          "",
          "---------------"
        ],
        "test/simple/test-buffer.js||test/simple/test-buffer.js": [
          "File: test/simple/test-buffer.js -> test/simple/test-buffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "281: assert.equal('TWFu', (new Buffer('Man')).toString('base64'));",
          "283: var quote = 'Man is distinguished, not only by his reason, but by this ' +",
          "284:             'singular passion from other animals, which is a lust ' +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: var expected = [0xff, 0xff, 0xbe, 0xff, 0xef, 0xbf, 0xfb, 0xef, 0xff];",
          "285: assert.deepEqual(Buffer('//++/++/++//', 'base64'), Buffer(expected));",
          "286: assert.deepEqual(Buffer('__--_--_--__', 'base64'), Buffer(expected));",
          "",
          "---------------"
        ]
      }
    }
  ]
}