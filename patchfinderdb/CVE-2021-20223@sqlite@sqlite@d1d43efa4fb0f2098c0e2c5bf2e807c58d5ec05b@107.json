{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91d4c374e208b73a97c01c5ba0d77aae910f4a26",
      "candidate_info": {
        "commit_hash": "91d4c374e208b73a97c01c5ba0d77aae910f4a26",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91d4c374e208b73a97c01c5ba0d77aae910f4a26",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 3fce9711a47329811cd333ae2f1d1384a96d73b9a5d6f9d08454a57a3fd24fc8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e9a8f910b5e2b84dd77364783f0610bca970cc88aa037c88636c72145b99f411",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30497f416939666b3fce0e879c4cc192f240c67e",
      "candidate_info": {
        "commit_hash": "30497f416939666b3fce0e879c4cc192f240c67e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30497f416939666b3fce0e879c4cc192f240c67e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "If the argument to the \".read\" command in the CLI begins with \"|\" then run the remainder of the argument as a command and read input from the output of that command.\n\nFossilOrigin-Name: 6c716f4b556ea8f9c9f15cffd81cb970488eadf1d5da2ba6b366d3bdeb36e492",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad195e3dd89d0f33b50070c18fb8f43c4eb24162515dfdd7c04d9e7d96b902a2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8962:       rc = 1;",
          "8963:       goto meta_command_exit;",
          "8964:     }",
          "8968:       utf8_printf(stderr,\"Error: cannot open \\\"%s\\\"\\n\", azArg[1]);",
          "8969:       rc = 1;",
          "8970:     }else{",
          "",
          "[Removed Lines]",
          "8965:     if( notNormalFile(azArg[1])",
          "8966:      || (p->in = fopen(azArg[1], \"rb\"))==0",
          "8967:     ){",
          "",
          "[Added Lines]",
          "8965:     if( azArg[1][0]=='|' ){",
          "8966:       p->in = popen(azArg[1]+1, \"r\");",
          "8967:       if( p->in==0 ){",
          "8968:         utf8_printf(stderr, \"Error: cannot open \\\"%s\\\"\\n\", azArg[1]);",
          "8969:         rc = 1;",
          "8970:       }else{",
          "8971:         rc = process_input(p);",
          "8972:         pclose(p->in);",
          "8973:       }",
          "8974:     }else if( notNormalFile(azArg[1]) || (p->in = fopen(azArg[1], \"rb\"))==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e88af0179e0927d65dbae6bba0de42041ec8c7f9",
      "candidate_info": {
        "commit_hash": "e88af0179e0927d65dbae6bba0de42041ec8c7f9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e88af0179e0927d65dbae6bba0de42041ec8c7f9",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts4langid.test"
        ],
        "message": "Fix a spurious report of corruption from the fts3/4 integrity-check triggered by using the languageid option.\n\nFossilOrigin-Name: 70815e273f511481c310dc33b3b49079901d891078fad49b663fbce06c77ecc2",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4langid.test||test/fts4langid.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2964:     Fts3SegReader *pSeg = 0;",
          "2965:     rc = sqlite3Fts3SegReaderPending(p, iIndex, zTerm, nTerm, isPrefix||isScan, &pSeg);",
          "2966:     if( rc==SQLITE_OK && pSeg ){",
          "",
          "[Removed Lines]",
          "2963:   if( iLevel<0 && p->aIndex ){",
          "",
          "[Added Lines]",
          "2963:   if( iLevel<0 && p->aIndex && p->iPrevLangid==iLangid ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4dbb6e1cb094f3428c74ea8bdd86ab63341fecce978a062968ca01423f382e90",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4langid.test||test/fts4langid.test": [
          "File: test/fts4langid.test -> test/fts4langid.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "489:     SELECT count(*) FROM t6_segments;",
          "490:   } {1 2}",
          "491: }",
          "492: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493: reset_db",
          "494: do_execsql_test 6.0 {",
          "495:   CREATE VIRTUAL TABLE vt0 USING fts4(c0, languageid=\"lid\");",
          "496:   INSERT INTO vt0 VALUES ('a'), ('b');",
          "497:   BEGIN;",
          "498:     UPDATE vt0 SET lid = 1 WHERE lid=0;",
          "499: }",
          "500: do_execsql_test 6.1 {",
          "501:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "502: }",
          "503: do_execsql_test 6.2 {",
          "504:   COMMIT;",
          "505:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "506: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d7f44c03a1522d5f1907e2ce5fb980ab74de088",
      "candidate_info": {
        "commit_hash": "8d7f44c03a1522d5f1907e2ce5fb980ab74de088",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8d7f44c03a1522d5f1907e2ce5fb980ab74de088",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid",
          "test/zipfile.test"
        ],
        "message": "Fix buffer underflows in the zipfile extension associated with zero-length or NULL filename in the ZIP archive.  But report on the mailing list by Yongheng and Rui.\n\nFossilOrigin-Name: 465a15c5c2077011befa854a77f9d295bb751ef20b7d2937ac0ba47cc84587c9",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid",
          "test/zipfile.test||test/zipfile.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1434: static int zipfileComparePath(const char *zA, const char *zB, int nB){",
          "1435:   int nA = (int)strlen(zA);",
          "1438:   if( nA==nB && memcmp(zA, zB, nA)==0 ) return 0;",
          "1439:   return 1;",
          "1440: }",
          "",
          "[Removed Lines]",
          "1436:   if( zA[nA-1]=='/' ) nA--;",
          "1437:   if( zB[nB-1]=='/' ) nB--;",
          "",
          "[Added Lines]",
          "1436:   if( nA>0 && zA[nA-1]=='/' ) nA--;",
          "1437:   if( nB>0 && zB[nB-1]=='/' ) nB--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1632:         zFree = sqlite3_mprintf(\"%s/\", zPath);",
          "1634:         zPath = (const char*)zFree;",
          "1636:       }",
          "1637:     }",
          "",
          "[Removed Lines]",
          "1631:       if( zPath[nPath-1]!='/' ){",
          "1633:         if( zFree==0 ){ rc = SQLITE_NOMEM; }",
          "1635:         nPath = (int)strlen(zPath);",
          "",
          "[Added Lines]",
          "1631:       if( nPath<=0 || zPath[nPath-1]!='/' ){",
          "1634:         if( zFree==0 ){",
          "1635:           rc = SQLITE_NOMEM;",
          "1636:           nPath = 0;",
          "1637:         }else{",
          "1638:           nPath = (int)strlen(zPath);",
          "1639:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f14ce948662f3445a06d84d4f32d9b81143e0cffaf773d8aa4d3a609bfb9682b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/zipfile.test||test/zipfile.test": [
          "File: test/zipfile.test -> test/zipfile.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "821:   PRAGMA integrity_check;",
          "822: } {3 ok}",
          "824: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "824: # 2019-12-26 More problems in zipfile from the Yongheng and Rui fuzzer",
          "825: #",
          "826: do_execsql_test 15.10 {",
          "827:   DROP TABLE IF EXISTS t1;",
          "828:   CREATE VIRTUAL TABLE t1 USING zipfile(null);",
          "829:   REPLACE INTO t1 VALUES(null,null,0,null,null,null,null);",
          "830: } {}",
          "831: do_execsql_test 15.20 {",
          "832:   DROP TABLE IF EXISTS t2;",
          "833:   CREATE VIRTUAL TABLE t2 USING zipfile(null);",
          "834:   REPLACE INTO t2 values(null,null,null,null,null,10,null);",
          "835: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4047bdfd2c38b141b991ebaf3ada7666edc8fdc1",
      "candidate_info": {
        "commit_hash": "4047bdfd2c38b141b991ebaf3ada7666edc8fdc1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4047bdfd2c38b141b991ebaf3ada7666edc8fdc1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Performance improvement in sqlite3ResolveExprNameList().\n\nFossilOrigin-Name: 7e170e67f24c7cdef7e7ceac4e0b81a75382618e4abe9e604f3d7f6db9dc6396",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e4b6a93987cdfbf829e2ff35ef417c290625f2894ad11949e301af518f1fb44",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1832: ){",
          "1833:   int i;",
          "1837:     }",
          "1838:   }",
          "1839:   return WRC_Continue;",
          "1840: }",
          "",
          "[Removed Lines]",
          "1834:   if( pList ){",
          "1835:     for(i=0; i<pList->nExpr; i++){",
          "1836:       if( sqlite3ResolveExprNames(pNC, pList->a[i].pExpr) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "1834:   int savedHasAgg = 0;",
          "1835:   Walker w;",
          "1836:   if( pList==0 ) return WRC_Continue;",
          "1837:   w.pParse = pNC->pParse;",
          "1838:   w.xExprCallback = resolveExprStep;",
          "1839:   w.xSelectCallback = resolveSelectStep;",
          "1840:   w.xSelectCallback2 = 0;",
          "1841:   w.u.pNC = pNC;",
          "1842:   savedHasAgg = pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1843:   pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1844:   for(i=0; i<pList->nExpr; i++){",
          "1845:     Expr *pExpr = pList->a[i].pExpr;",
          "1846:     if( pExpr==0 ) continue;",
          "1847: #if SQLITE_MAX_EXPR_DEPTH>0",
          "1848:     w.pParse->nHeight += pExpr->nHeight;",
          "1849:     if( sqlite3ExprCheckHeight(w.pParse, w.pParse->nHeight) ){",
          "1850:       return WRC_Abort;",
          "1851:     }",
          "1852: #endif",
          "1853:     sqlite3WalkExpr(&w, pExpr);",
          "1854: #if SQLITE_MAX_EXPR_DEPTH>0",
          "1855:     w.pParse->nHeight -= pExpr->nHeight;",
          "1856: #endif",
          "1857:     assert( EP_Agg==NC_HasAgg );",
          "1858:     assert( EP_Win==NC_HasWin );",
          "1859:     testcase( pNC->ncFlags & NC_HasAgg );",
          "1860:     testcase( pNC->ncFlags & NC_HasWin );",
          "1861:     if( pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin) ){",
          "1862:       ExprSetProperty(pExpr, pNC->ncFlags & (NC_HasAgg|NC_HasWin) );",
          "1863:       savedHasAgg |= pNC->ncFlags & (NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1864:       pNC->ncFlags &= ~(NC_HasAgg|NC_MinMaxAgg|NC_HasWin);",
          "1866:     if( pNC->nErr>0 || w.pParse->nErr>0 ) return WRC_Abort;",
          "1868:   pNC->ncFlags |= savedHasAgg;",
          "",
          "---------------"
        ]
      }
    }
  ]
}