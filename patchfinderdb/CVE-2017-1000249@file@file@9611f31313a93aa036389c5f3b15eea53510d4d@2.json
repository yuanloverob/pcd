{
  "cve_id": "CVE-2017-1000249",
  "cve_desc": "An issue in file() was introduced in commit 9611f31313a93aa036389c5f3b15eea53510d4d1 (Oct 2016) lets an attacker overwrite a fixed 20 bytes stack buffer with a specially crafted .notes section in an ELF binary. This was fixed in commit 35c94dc6acc418f1ad7f6241a6680e5327495793 (Aug 2017).",
  "repo": "file/file",
  "patch_hash": "9611f31313a93aa036389c5f3b15eea53510d4d1",
  "patch_info": {
    "commit_hash": "9611f31313a93aa036389c5f3b15eea53510d4d1",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/9611f31313a93aa036389c5f3b15eea53510d4d",
    "files": [
      "src/readelf.c"
    ],
    "message": "Extend build-id reporting to 8-byte IDs that lld can generate (Ed Maste)",
    "before_after_code_files": [
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.126 2015/11/16 16:03:45 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.127 2015/11/18 12:29:29 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "509:     size_t noff, size_t doff, int *flags)",
      "510: {",
      "511:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
      "513:   uint8_t desc[20];",
      "514:   uint32_t i;",
      "518:    return 1;",
      "519:   (void)memcpy(desc, &nbuf[doff], descsz);",
      "520:   for (i = 0; i < descsz; i++)",
      "",
      "[Removed Lines]",
      "512:      type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {",
      "516:   if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
      "517:       \"sha1\") == -1)",
      "",
      "[Added Lines]",
      "512:      type == NT_GNU_BUILD_ID && (descsz >= 4 || descsz <= 20)) {",
      "514:   const char *btype;",
      "517:   switch (descsz) {",
      "518:   case 8:",
      "519:       btype = \"xxHash\";",
      "520:       break;",
      "521:   case 16:",
      "522:       btype = \"md5/uuid\";",
      "523:       break;",
      "524:   case 20:",
      "525:       btype = \"sha1\";",
      "526:       break;",
      "527:   default:",
      "528:       btype = \"unknown\";",
      "529:       break;",
      "530:   }",
      "531:   if (file_printf(ms, \", BuildID[%s]=\", btype) == -1)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "618b5513a757358bbc0a1725e4369eb915824de7",
      "candidate_info": {
        "commit_hash": "618b5513a757358bbc0a1725e4369eb915824de7",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/618b5513a757358bbc0a1725e4369eb915824de7",
        "files": [
          "src/readelf.c"
        ],
        "message": "Return the offset not size, so that we can process more notes. Noted by Jan Kaluza.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.121 2015/07/11 14:41:37 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.122 2015/09/10 13:59:32 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "879:  if ((*flags & FLAGS_DID_OS_NOTE) == 0) {",
          "880:   if (do_os_note(ms, nbuf, xnh_type, swap,",
          "881:       namesz, descsz, noff, doff, flags))",
          "883:  }",
          "885:  if ((*flags & FLAGS_DID_BUILD_ID) == 0) {",
          "886:   if (do_bid_note(ms, nbuf, xnh_type, swap,",
          "887:       namesz, descsz, noff, doff, flags))",
          "889:  }",
          "891:  if ((*flags & FLAGS_DID_NETBSD_PAX) == 0) {",
          "892:   if (do_pax_note(ms, nbuf, xnh_type, swap,",
          "893:       namesz, descsz, noff, doff, flags))",
          "895:  }",
          "897:  if ((*flags & FLAGS_DID_CORE) == 0) {",
          "898:   if (do_core_note(ms, nbuf, xnh_type, swap,",
          "899:       namesz, descsz, noff, doff, flags, size, clazz))",
          "901:  }",
          "903:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "",
          "[Removed Lines]",
          "882:    return size;",
          "888:    return size;",
          "894:    return size;",
          "900:    return size;",
          "",
          "[Added Lines]",
          "882:    return offset;",
          "888:    return offset;",
          "894:    return offset;",
          "900:    return offset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "905:    descsz = 100;",
          "906:   switch (xnh_type) {",
          "907:       case NT_NETBSD_VERSION:",
          "909:   case NT_NETBSD_MARCH:",
          "910:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
          "913:    if (file_printf(ms, \", compiled for: %.*s\",",
          "914:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "916:    break;",
          "917:   case NT_NETBSD_CMODEL:",
          "918:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
          "921:    if (file_printf(ms, \", compiler model: %.*s\",",
          "922:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "924:    break;",
          "925:   default:",
          "926:    if (*flags & FLAGS_DID_NETBSD_UNKNOWN)",
          "929:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
          "931:    break;",
          "932:   }",
          "934:  }",
          "936:  return offset;",
          "",
          "[Removed Lines]",
          "908:    return size;",
          "911:     return size;",
          "915:     return size;",
          "919:     return size;",
          "923:     return size;",
          "927:     return size;",
          "930:     return size;",
          "933:   return size;",
          "",
          "[Added Lines]",
          "908:    return offset;",
          "911:     return offset;",
          "915:     return offset;",
          "919:     return offset;",
          "923:     return offset;",
          "927:     return offset;",
          "930:     return offset;",
          "933:   return offset;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9e70c212540b39ff1b48b6599345ffedf6fd1f3",
      "candidate_info": {
        "commit_hash": "d9e70c212540b39ff1b48b6599345ffedf6fd1f3",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d9e70c212540b39ff1b48b6599345ffedf6fd1f3",
        "files": [
          "src/readelf.c"
        ],
        "message": "rename the \"from\" tag in the auxv to \"execfn\".",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.123 2015/10/09 14:38:47 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.124 2015/11/05 16:58:31 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "945:   switch(xauxv_type) {",
          "946:   case AT_LINUX_EXECFN:",
          "947:    is_string = 1;",
          "949:    break;",
          "950:   case AT_LINUX_PLATFORM:",
          "951:    is_string = 1;",
          "",
          "[Removed Lines]",
          "948:    tag = \"from\";",
          "",
          "[Added Lines]",
          "948:    tag = \"execfn\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b5b60de66400a74e21cc35d4101f689ea58420d",
      "candidate_info": {
        "commit_hash": "3b5b60de66400a74e21cc35d4101f689ea58420d",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/3b5b60de66400a74e21cc35d4101f689ea58420d",
        "files": [
          "src/cdf.c",
          "src/readelf.c"
        ],
        "message": "de-lint.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.106 2017/04/30 17:05:02 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.107 2017/09/08 13:44:09 christos Exp $\")",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.138 2017/08/27 07:55:02 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.139 2017/09/08 13:44:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "726:        \"gid=%u, nlwps=%u, lwp=%u (signal %u/code %u)\",",
          "727:        file_printable(sbuf, sizeof(sbuf),",
          "728:        CAST(char *, pi.cpi_name)),",
          "730:        elf_getu32(swap, pi.cpi_euid),",
          "731:        elf_getu32(swap, pi.cpi_egid),",
          "732:        elf_getu32(swap, pi.cpi_nlwps),",
          "734:        elf_getu32(swap, pi.cpi_signo),",
          "735:        elf_getu32(swap, pi.cpi_sigcode)) == -1)",
          "736:     return 1;",
          "",
          "[Removed Lines]",
          "729:        elf_getu32(swap, pi.cpi_pid),",
          "733:        elf_getu32(swap, pi.cpi_siglwp),",
          "",
          "[Added Lines]",
          "729:        elf_getu32(swap, (uint32_t)pi.cpi_pid),",
          "733:        elf_getu32(swap, (uint32_t)pi.cpi_siglwp),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "023d2dfe3021658f38a321a62ee171337faa35f5",
      "candidate_info": {
        "commit_hash": "023d2dfe3021658f38a321a62ee171337faa35f5",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/023d2dfe3021658f38a321a62ee171337faa35f5",
        "files": [
          "src/readelf.c",
          "src/readelf.h"
        ],
        "message": "- Update the a_type type to be 64 bits since this is what Linux wants. - Handle incomplete reads since the filename might be the last thing on the   section. (Jan Kaluza)",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c",
          "src/readelf.h||src/readelf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.124 2015/11/05 16:58:31 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.125 2015/11/11 21:20:18 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "840: {",
          "841:  Elf32_Phdr ph32;",
          "842:  Elf64_Phdr ph64;",
          "",
          "[Removed Lines]",
          "843:  size_t prev_vaddr = 0;",
          "844:  size_t prev_off = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "859:    continue;",
          "860:   }",
          "873:  }",
          "874:  return 0;",
          "875: }",
          "",
          "[Removed Lines]",
          "862:   if (virtaddr >= prev_vaddr && virtaddr < xph_vaddr) {",
          "867:    return prev_off + (virtaddr - prev_vaddr);",
          "868:   }",
          "870:   prev_vaddr = xph_vaddr;",
          "871:   prev_off = xph_offset;",
          "",
          "[Added Lines]",
          "860:   if (virtaddr >= xph_vaddr && virtaddr < xph_vaddr + xph_filesz)",
          "861:    return xph_offset + (virtaddr - xph_vaddr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "888:  offset = get_offset_from_virtaddr(ms, swap, clazz, fd, ph_off, ph_num,",
          "889:      fsize, virtaddr);",
          "891:   file_badread(ms);",
          "892:   return 0;",
          "893:  }",
          "",
          "[Removed Lines]",
          "890:  if (pread(fd, buf, buflen, offset) != buflen) {",
          "",
          "[Added Lines]",
          "879:  if ((buflen = pread(fd, buf, buflen, offset)) <= 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "919:  size_t elsize = xauxv_sizeof;",
          "920:  const char *tag;",
          "921:  int is_string;",
          "923:  size_t nval;",
          "925:  if (type != NT_AUXV || (*flags & FLAGS_IS_CORE) == 0)",
          "",
          "[Removed Lines]",
          "922:  uint32_t val[30];",
          "",
          "[Added Lines]",
          "911:  uint64_t val[30];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "931:  for (size_t off = 0; off + elsize <= descsz; off += elsize) {",
          "932:   (void)memcpy(xauxv_addr, &nbuf[doff + off], xauxv_sizeof);",
          "933:   for (size_t i = 0; i < nval; i++)",
          "937:     return 1;",
          "938:    }",
          "939:   if (nval >= __arraycount(val)) {",
          "940:    file_error(ms, 0, \"Too many ELF Auxv elements\");",
          "941:    return 1;",
          "942:   }",
          "945:   switch(xauxv_type) {",
          "946:   case AT_LINUX_EXECFN:",
          "",
          "[Removed Lines]",
          "934:    if (val[i] == (uint32_t)xauxv_type) {",
          "935:     file_error(ms, 0, \"Repeated ELF Auxv type %u\",",
          "936:         val[i]);",
          "943:   val[nval++] = (uint32_t)xauxv_type;",
          "",
          "[Added Lines]",
          "923:    if (val[i] == (uint64_t)xauxv_type) {",
          "924:     file_error(ms, 0, \"Repeated ELF Auxv type %ju\",",
          "925:         (uintmax_t)val[i]);",
          "932:   val[nval++] = (uint64_t)xauxv_type;",
          "",
          "---------------"
        ],
        "src/readelf.h||src/readelf.h": [
          "File: src/readelf.h -> src/readelf.h"
        ]
      }
    },
    {
      "candidate_hash": "64e456472e952c11741a5610d9e1fb7097931f6b",
      "candidate_info": {
        "commit_hash": "64e456472e952c11741a5610d9e1fb7097931f6b",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/64e456472e952c11741a5610d9e1fb7097931f6b",
        "files": [
          "src/apprentice.c",
          "src/cdf.c",
          "src/compress.c",
          "src/der.c",
          "src/print.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "more cast stuff.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/cdf.c||src/cdf.c",
          "src/compress.c||src/compress.c",
          "src/der.c||src/der.c",
          "src/print.c||src/print.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.256 2016/11/07 15:36:56 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.257 2017/02/04 16:46:16 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "549:   break;",
          "550:  case MAP_TYPE_MALLOC:",
          "551:   for (i = 0; i < MAGIC_SETS; i++) {",
          "554:     continue;",
          "555:    free(map->magic[i]);",
          "556:   }",
          "",
          "[Removed Lines]",
          "552:    if ((char *)map->magic[i] >= (char *)map->p &&",
          "553:        (char *)map->magic[i] <= (char *)map->p + map->len)",
          "",
          "[Added Lines]",
          "552:    void *b = map->magic[i];",
          "553:    void *p = map->p;",
          "554:    if (CAST(char *, b) >= CAST(char *, p) &&",
          "555:        CAST(char *, b) <= CAST(char *, p) + map->len)",
          "",
          "---------------"
        ],
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.87 2017/02/01 12:38:12 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.88 2017/02/07 23:21:29 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "811:       == 0)",
          "812:    break;",
          "813:  if (i > 0)",
          "816:  DPRINTF((\"Cannot find type %d `%s'\\n\", type, name));",
          "817:  errno = ESRCH;",
          "",
          "[Removed Lines]",
          "814:   return i;",
          "",
          "[Added Lines]",
          "814:   return CAST(int, i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1068: {",
          "1069:  size_t ss = cdf_check_stream(sst, h);",
          "1070:  const char *b = CAST(const char *, sst->sst_tab);",
          "1072:  size_t nr, i, j, k;",
          "1073:  cdf_catalog_entry_t *ce;",
          "1074:  uint16_t reclen;",
          "",
          "[Removed Lines]",
          "1071:  const char *eb = b + ss * sst->sst_len;",
          "",
          "[Added Lines]",
          "1071:  const char *nb, *eb = b + ss * sst->sst_len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1113:    cep->ce_namlen = rlen;",
          "1115:   np = CAST(const uint16_t *, CAST(const void *, (b + 16)));",
          "1117:    cep->ce_namlen = 0;",
          "1118:    break;",
          "1119:   }",
          "",
          "[Removed Lines]",
          "1116:   if (RCAST(const char *, np + cep->ce_namlen) > eb) {",
          "",
          "[Added Lines]",
          "1116:   nb = CAST(const char *, CAST(const void *,",
          "1117:       (np + cep->ce_namlen)));",
          "1118:   if (nb > eb) {",
          "",
          "---------------"
        ],
        "src/compress.c||src/compress.c": [
          "File: src/compress.c -> src/compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.100 2016/10/24 18:02:17 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.101 2017/01/18 16:33:57 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: zlibcmp(const unsigned char *buf)",
          "95: {",
          "96:  unsigned short x = 1;",
          "99:  if ((buf[0] & 0xf) != 8 || (buf[0] & 0x80) != 0)",
          "100:   return 0;",
          "",
          "[Removed Lines]",
          "97:  unsigned char *s = (unsigned char *)&x;",
          "",
          "[Added Lines]",
          "97:  unsigned char *s = CCAST(unsigned char *, &x);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "498:  z.next_in = CCAST(Bytef *, old);",
          "499:  z.avail_in = CAST(uint32_t, *n);",
          "500:  z.next_out = *newch;",
          "502:  z.zalloc = Z_NULL;",
          "503:  z.zfree = Z_NULL;",
          "504:  z.opaque = Z_NULL;",
          "",
          "[Removed Lines]",
          "501:  z.avail_out = bytes_max;",
          "",
          "[Added Lines]",
          "501:  z.avail_out = CAST(unsigned int, bytes_max);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "633:   while (isspace((unsigned char)*p))",
          "634:    p++;",
          "635:   n = strlen(p);",
          "637:  }",
          "638:  DPRINTF(\"Filter error after[[[%s]]]\\n\", (char *)ubuf);",
          "639:  if (islower(*ubuf))",
          "",
          "[Removed Lines]",
          "636:   memmove(ubuf, p, n + 1);",
          "",
          "[Added Lines]",
          "636:   memmove(ubuf, p, CAST(size_t, n + 1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "689:   }",
          "691:   for (i = 0; i < __arraycount(fdp); i++)",
          "694:   (void)execvp(compr[method].argv[0],",
          "695:       (char *const *)(intptr_t)compr[method].argv);",
          "",
          "[Removed Lines]",
          "692:    copydesc(i, fdp[i]);",
          "",
          "[Added Lines]",
          "692:    copydesc(CAST(int, i), fdp[i]);",
          "",
          "---------------"
        ],
        "src/der.c||src/der.c": [
          "File: src/der.c -> src/der.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "40: #endif",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: der.c,v 1.10 2016/10/24 18:02:17 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: der.c,v 1.11 2016/11/07 15:51:23 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:  if (*p + len >= l)",
          "203:   return DER_BAD;",
          "205: }",
          "207: static const char *",
          "",
          "[Removed Lines]",
          "204:  return len;",
          "",
          "[Added Lines]",
          "204:  return CAST(uint32_t, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260: #endif",
          "261:  if (m->cont_level != 0) {",
          "262:   if (offs + tlen > nbytes)",
          "265:   DPRINTF((\"cont_level[%u] = %u\\n\", m->cont_level - 1,",
          "266:       ms->c.li[m->cont_level - 1].off));",
          "267:  }",
          "269: }",
          "271: int",
          "",
          "[Removed Lines]",
          "263:    return DER_BAD;",
          "264:   ms->c.li[m->cont_level - 1].off = offs + tlen;",
          "268:  return offs;",
          "",
          "[Added Lines]",
          "263:    return -1;",
          "264:   ms->c.li[m->cont_level - 1].off = CAST(int, offs + tlen);",
          "268:  return CAST(int32_t, offs);",
          "",
          "---------------"
        ],
        "src/print.c||src/print.c": [
          "File: src/print.c -> src/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include <string.h>",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: print.c,v 1.80 2015/07/16 14:28:57 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: print.c,v 1.81 2016/01/19 15:09:03 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:  if (flags & FILE_T_WINDOWS) {",
          "240:   struct timespec ts;",
          "242:   t = ts.tv_sec;",
          "243:  } else {",
          "",
          "[Removed Lines]",
          "241:   cdf_timestamp_to_timespec(&ts, v);",
          "",
          "[Added Lines]",
          "241:   cdf_timestamp_to_timespec(&ts, CAST(cdf_timestamp_t, v));",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.129 2017/01/18 16:08:25 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.130 2017/01/29 19:34:24 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "891:  offset = get_offset_from_virtaddr(ms, swap, clazz, fd, ph_off, ph_num,",
          "892:      fsize, virtaddr);",
          "894:   file_badread(ms);",
          "895:   return 0;",
          "896:  }",
          "",
          "[Removed Lines]",
          "893:  if ((buflen = pread(fd, buf, buflen, offset)) <= 0) {",
          "",
          "[Added Lines]",
          "893:  if ((buflen = pread(fd, buf, CAST(size_t, buflen), offset)) <= 0) {",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.242 2016/12/20 22:44:32 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.243 2017/02/07 23:27:32 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1017: mconvert(struct magic_set *ms, struct magic *m, int flip)",
          "1018: {",
          "1019:  union VALUETYPE *p = &ms->ms_value;",
          "1023:  case FILE_BYTE:",
          "1024:   if (cvt_8(p, m) == -1)",
          "1025:    goto out;",
          "",
          "[Removed Lines]",
          "1020:  uint8_t type;",
          "1022:  switch (type = cvt_flip(m->type, flip)) {",
          "",
          "[Added Lines]",
          "1021:  switch (cvt_flip(m->type, flip)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1184:   case FILE_DER:",
          "1185:   case FILE_SEARCH:",
          "1186:    if (offset > nbytes)",
          "1188:    ms->search.s = RCAST(const char *, s) + offset;",
          "1189:    ms->search.s_len = nbytes - offset;",
          "1190:    ms->search.offset = offset;",
          "",
          "[Removed Lines]",
          "1187:     offset = nbytes;",
          "",
          "[Added Lines]",
          "1186:     offset = CAST(uint32_t, nbytes);",
          "",
          "---------------"
        ]
      }
    }
  ]
}