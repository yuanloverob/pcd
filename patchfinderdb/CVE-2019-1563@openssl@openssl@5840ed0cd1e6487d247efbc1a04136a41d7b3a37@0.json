{
  "cve_id": "CVE-2019-1563",
  "cve_desc": "In situations where an attacker receives automated notification of the success or failure of a decryption attempt an attacker, after sending a very large number of messages to be decrypted, can recover a CMS/PKCS7 transported encryption key or decrypt any RSA encrypted message that was encrypted with the public RSA key, using a Bleichenbacher padding oracle attack. Applications are not affected if they use a certificate together with the private RSA key to the CMS_decrypt or PKCS7_decrypt functions to select the correct recipient info to decrypt. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
  "repo": "openssl/openssl",
  "patch_hash": "5840ed0cd1e6487d247efbc1a04136a41d7b3a37",
  "patch_info": {
    "commit_hash": "5840ed0cd1e6487d247efbc1a04136a41d7b3a37",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/5840ed0cd1e6487d247efbc1a04136a41d7b3a37",
    "files": [
      "CHANGES",
      "crypto/cms/cms_env.c",
      "crypto/cms/cms_lcl.h",
      "crypto/cms/cms_smime.c",
      "crypto/pkcs7/pk7_doit.c"
    ],
    "message": "Fix a padding oracle in PKCS7_dataDecode and CMS_decrypt_set1_pkey\n\nAn attack is simple, if the first CMS_recipientInfo is valid but the\nsecond CMS_recipientInfo is chosen ciphertext. If the second\nrecipientInfo decodes to PKCS #1 v1.5 form plaintext, the correct\nencryption key will be replaced by garbage, and the message cannot be\ndecoded, but if the RSA decryption fails, the correct encryption key is\nused and the recipient will not notice the attack.\n\nAs a work around for this potential attack the length of the decrypted\nkey must be equal to the cipher default key length, in case the\ncertifiate is not given and all recipientInfo are tried out.\n\nThe old behaviour can be re-enabled in the CMS code by setting the\nCMS_DEBUG_DECRYPT flag.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9777)",
    "before_after_code_files": [
      "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
      "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
      "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
      "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
    ]
  },
  "patch_diff": {
    "crypto/cms/cms_env.c||crypto/cms/cms_env.c": [
      "File: crypto/cms/cms_env.c -> crypto/cms/cms_env.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "363:     unsigned char *ek = NULL;",
      "364:     size_t eklen;",
      "365:     int ret = 0;",
      "366:     CMS_EncryptedContentInfo *ec;",
      "367:     ec = cms->d.envelopedData->encryptedContentInfo;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "366:     size_t fixlen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "371:         return 0;",
      "372:     }",
      "374:     ktri->pctx = EVP_PKEY_CTX_new(pkey, NULL);",
      "375:     if (ktri->pctx == NULL)",
      "376:         return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "375:     if (cms->d.envelopedData->encryptedContentInfo->havenocert",
      "376:             && !cms->d.envelopedData->encryptedContentInfo->debug) {",
      "377:         X509_ALGOR *calg = ec->contentEncryptionAlgorithm;",
      "378:         const EVP_CIPHER *ciph = EVP_get_cipherbyobj(calg->algorithm);",
      "380:         if (ciph == NULL) {",
      "381:             CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_UNKNOWN_CIPHER);",
      "382:             return 0;",
      "383:         }",
      "385:         fixlen = EVP_CIPHER_key_length(ciph);",
      "386:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "402:     if (EVP_PKEY_decrypt(ktri->pctx, ek, &eklen,",
      "403:                          ktri->encryptedKey->data,",
      "405:         CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_CMS_LIB);",
      "406:         goto err;",
      "407:     }",
      "",
      "[Removed Lines]",
      "404:                          ktri->encryptedKey->length) <= 0) {",
      "",
      "[Added Lines]",
      "418:                          ktri->encryptedKey->length) <= 0",
      "419:             || eklen == 0",
      "420:             || (fixlen != 0 && eklen != fixlen)) {",
      "",
      "---------------"
    ],
    "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h": [
      "File: crypto/cms/cms_lcl.h -> crypto/cms/cms_lcl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "125:     size_t keylen;",
      "127:     int debug;",
      "128: };",
      "130: struct CMS_RecipientInfo_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     int havenocert;",
      "",
      "---------------"
    ],
    "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c": [
      "File: crypto/cms/cms_smime.c -> crypto/cms/cms_smime.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "743:         cms->d.envelopedData->encryptedContentInfo->debug = 1;",
      "744:     else",
      "745:         cms->d.envelopedData->encryptedContentInfo->debug = 0;",
      "746:     if (!pk && !cert && !dcont && !out)",
      "747:         return 1;",
      "748:     if (pk && !CMS_decrypt_set1_pkey(cms, pk, cert))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "746:     if (!cert)",
      "747:         cms->d.envelopedData->encryptedContentInfo->havenocert = 1;",
      "748:     else",
      "749:         cms->d.envelopedData->encryptedContentInfo->havenocert = 0;",
      "",
      "---------------"
    ],
    "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
      "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "137: }",
      "139: static int pkcs7_decrypt_rinfo(unsigned char **pek, int *peklen,",
      "141: {",
      "142:     EVP_PKEY_CTX *pctx = NULL;",
      "143:     unsigned char *ek = NULL;",
      "",
      "[Removed Lines]",
      "140:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey)",
      "",
      "[Added Lines]",
      "140:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey,",
      "141:                                size_t fixlen)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:     }",
      "172:     if (EVP_PKEY_decrypt(pctx, ek, &eklen,",
      "174:         ret = 0;",
      "175:         PKCS7err(PKCS7_F_PKCS7_DECRYPT_RINFO, ERR_R_EVP_LIB);",
      "176:         goto err;",
      "",
      "[Removed Lines]",
      "173:                          ri->enc_key->data, ri->enc_key->length) <= 0) {",
      "",
      "[Added Lines]",
      "174:                          ri->enc_key->data, ri->enc_key->length) <= 0",
      "175:             || eklen == 0",
      "176:             || (fixlen != 0 && eklen != fixlen)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "499:             for (i = 0; i < sk_PKCS7_RECIP_INFO_num(rsk); i++) {",
      "500:                 ri = sk_PKCS7_RECIP_INFO_value(rsk, i);",
      "503:                     goto err;",
      "504:                 ERR_clear_error();",
      "505:             }",
      "506:         } else {",
      "509:                 goto err;",
      "510:             ERR_clear_error();",
      "511:         }",
      "",
      "[Removed Lines]",
      "502:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
      "508:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
      "",
      "[Added Lines]",
      "505:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey,",
      "506:                         EVP_CIPHER_key_length(evp_cipher)) < 0)",
      "512:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey, 0) < 0)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e21f8cf78a125cd3c8c0d1a1a6c8bb0b901f893f",
      "candidate_info": {
        "commit_hash": "e21f8cf78a125cd3c8c0d1a1a6c8bb0b901f893f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e21f8cf78a125cd3c8c0d1a1a6c8bb0b901f893f",
        "files": [
          "CHANGES",
          "crypto/cms/cms_env.c",
          "crypto/cms/cms_lcl.h",
          "crypto/cms/cms_smime.c",
          "crypto/pkcs7/pk7_doit.c"
        ],
        "message": "Fix a padding oracle in PKCS7_dataDecode and CMS_decrypt_set1_pkey\n\nAn attack is simple, if the first CMS_recipientInfo is valid but the\nsecond CMS_recipientInfo is chosen ciphertext. If the second\nrecipientInfo decodes to PKCS #1 v1.5 form plaintext, the correct\nencryption key will be replaced by garbage, and the message cannot be\ndecoded, but if the RSA decryption fails, the correct encryption key is\nused and the recipient will not notice the attack.\n\nAs a work around for this potential attack the length of the decrypted\nkey must be equal to the cipher default key length, in case the\ncertifiate is not given and all recipientInfo are tried out.\n\nThe old behaviour can be re-enabled in the CMS code by setting the\nCMS_DEBUG_DECRYPT flag.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9777)\n\n(cherry picked from commit 5840ed0cd1e6487d247efbc1a04136a41d7b3a37)",
        "before_after_code_files": [
          "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
          "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
          "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
          "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ],
          "candidate": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/cms/cms_env.c||crypto/cms/cms_env.c": [
          "File: crypto/cms/cms_env.c -> crypto/cms/cms_env.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "422:     unsigned char *ek = NULL;",
          "423:     size_t eklen;",
          "424:     int ret = 0;",
          "425:     CMS_EncryptedContentInfo *ec;",
          "426:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:     size_t fixlen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:         return 0;",
          "431:     }",
          "433:     ktri->pctx = EVP_PKEY_CTX_new(pkey, NULL);",
          "434:     if (!ktri->pctx)",
          "435:         return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:     if (cms->d.envelopedData->encryptedContentInfo->havenocert",
          "435:             && !cms->d.envelopedData->encryptedContentInfo->debug) {",
          "436:         X509_ALGOR *calg = ec->contentEncryptionAlgorithm;",
          "437:         const EVP_CIPHER *ciph = EVP_get_cipherbyobj(calg->algorithm);",
          "439:         if (ciph == NULL) {",
          "440:             CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_UNKNOWN_CIPHER);",
          "441:             return 0;",
          "442:         }",
          "444:         fixlen = EVP_CIPHER_key_length(ciph);",
          "445:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "461:     if (EVP_PKEY_decrypt(ktri->pctx, ek, &eklen,",
          "462:                          ktri->encryptedKey->data,",
          "464:         CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_CMS_LIB);",
          "465:         goto err;",
          "466:     }",
          "",
          "[Removed Lines]",
          "463:                          ktri->encryptedKey->length) <= 0) {",
          "",
          "[Added Lines]",
          "477:                          ktri->encryptedKey->length) <= 0",
          "478:             || eklen == 0",
          "479:             || (fixlen != 0 && eklen != fixlen)) {",
          "",
          "---------------"
        ],
        "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h": [
          "File: crypto/cms/cms_lcl.h -> crypto/cms/cms_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     size_t keylen;",
          "174:     int debug;",
          "175: };",
          "177: struct CMS_RecipientInfo_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     int havenocert;",
          "",
          "---------------"
        ],
        "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c": [
          "File: crypto/cms/cms_smime.c -> crypto/cms/cms_smime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:         cms->d.envelopedData->encryptedContentInfo->debug = 1;",
          "738:     else",
          "739:         cms->d.envelopedData->encryptedContentInfo->debug = 0;",
          "740:     if (!pk && !cert && !dcont && !out)",
          "741:         return 1;",
          "742:     if (pk && !CMS_decrypt_set1_pkey(cms, pk, cert))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740:     if (!cert)",
          "741:         cms->d.envelopedData->encryptedContentInfo->havenocert = 1;",
          "742:     else",
          "743:         cms->d.envelopedData->encryptedContentInfo->havenocert = 0;",
          "",
          "---------------"
        ],
        "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
          "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191: }",
          "193: static int pkcs7_decrypt_rinfo(unsigned char **pek, int *peklen,",
          "195: {",
          "196:     EVP_PKEY_CTX *pctx = NULL;",
          "197:     unsigned char *ek = NULL;",
          "",
          "[Removed Lines]",
          "194:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey)",
          "",
          "[Added Lines]",
          "194:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey,",
          "195:                                size_t fixlen)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:     }",
          "226:     if (EVP_PKEY_decrypt(pctx, ek, &eklen,",
          "228:         ret = 0;",
          "229:         PKCS7err(PKCS7_F_PKCS7_DECRYPT_RINFO, ERR_R_EVP_LIB);",
          "230:         goto err;",
          "",
          "[Removed Lines]",
          "227:                          ri->enc_key->data, ri->enc_key->length) <= 0) {",
          "",
          "[Added Lines]",
          "228:                          ri->enc_key->data, ri->enc_key->length) <= 0",
          "229:             || eklen == 0",
          "230:             || (fixlen != 0 && eklen != fixlen)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "571:             for (i = 0; i < sk_PKCS7_RECIP_INFO_num(rsk); i++) {",
          "572:                 ri = sk_PKCS7_RECIP_INFO_value(rsk, i);",
          "575:                     goto err;",
          "576:                 ERR_clear_error();",
          "577:             }",
          "578:         } else {",
          "581:                 goto err;",
          "582:             ERR_clear_error();",
          "583:         }",
          "",
          "[Removed Lines]",
          "574:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
          "580:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
          "",
          "[Added Lines]",
          "577:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey,",
          "578:                         EVP_CIPHER_key_length(evp_cipher)) < 0)",
          "584:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey, 0) < 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08229ad838c50f644d7e928e2eef147b4308ad64",
      "candidate_info": {
        "commit_hash": "08229ad838c50f644d7e928e2eef147b4308ad64",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/08229ad838c50f644d7e928e2eef147b4308ad64",
        "files": [
          "CHANGES",
          "crypto/cms/cms_env.c",
          "crypto/cms/cms_lcl.h",
          "crypto/cms/cms_smime.c",
          "crypto/pkcs7/pk7_doit.c"
        ],
        "message": "Fix a padding oracle in PKCS7_dataDecode and CMS_decrypt_set1_pkey\n\nAn attack is simple, if the first CMS_recipientInfo is valid but the\nsecond CMS_recipientInfo is chosen ciphertext. If the second\nrecipientInfo decodes to PKCS #1 v1.5 form plaintext, the correct\nencryption key will be replaced by garbage, and the message cannot be\ndecoded, but if the RSA decryption fails, the correct encryption key is\nused and the recipient will not notice the attack.\n\nAs a work around for this potential attack the length of the decrypted\nkey must be equal to the cipher default key length, in case the\ncertifiate is not given and all recipientInfo are tried out.\n\nThe old behaviour can be re-enabled in the CMS code by setting the\nCMS_DEBUG_DECRYPT flag.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9777)\n\n(cherry picked from commit 5840ed0cd1e6487d247efbc1a04136a41d7b3a37)",
        "before_after_code_files": [
          "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
          "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
          "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
          "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ],
          "candidate": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/cms/cms_env.c||crypto/cms/cms_env.c": [
          "File: crypto/cms/cms_env.c -> crypto/cms/cms_env.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:     unsigned char *ek = NULL;",
          "364:     size_t eklen;",
          "365:     int ret = 0;",
          "366:     CMS_EncryptedContentInfo *ec;",
          "367:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:     size_t fixlen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371:         return 0;",
          "372:     }",
          "374:     ktri->pctx = EVP_PKEY_CTX_new(pkey, NULL);",
          "375:     if (ktri->pctx == NULL)",
          "376:         return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:     if (cms->d.envelopedData->encryptedContentInfo->havenocert",
          "376:             && !cms->d.envelopedData->encryptedContentInfo->debug) {",
          "377:         X509_ALGOR *calg = ec->contentEncryptionAlgorithm;",
          "378:         const EVP_CIPHER *ciph = EVP_get_cipherbyobj(calg->algorithm);",
          "380:         if (ciph == NULL) {",
          "381:             CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_UNKNOWN_CIPHER);",
          "382:             return 0;",
          "383:         }",
          "385:         fixlen = EVP_CIPHER_key_length(ciph);",
          "386:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "402:     if (EVP_PKEY_decrypt(ktri->pctx, ek, &eklen,",
          "403:                          ktri->encryptedKey->data,",
          "405:         CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_CMS_LIB);",
          "406:         goto err;",
          "407:     }",
          "",
          "[Removed Lines]",
          "404:                          ktri->encryptedKey->length) <= 0) {",
          "",
          "[Added Lines]",
          "418:                          ktri->encryptedKey->length) <= 0",
          "419:             || eklen == 0",
          "420:             || (fixlen != 0 && eklen != fixlen)) {",
          "",
          "---------------"
        ],
        "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h": [
          "File: crypto/cms/cms_lcl.h -> crypto/cms/cms_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     size_t keylen;",
          "127:     int debug;",
          "128: };",
          "130: struct CMS_RecipientInfo_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     int havenocert;",
          "",
          "---------------"
        ],
        "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c": [
          "File: crypto/cms/cms_smime.c -> crypto/cms/cms_smime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "743:         cms->d.envelopedData->encryptedContentInfo->debug = 1;",
          "744:     else",
          "745:         cms->d.envelopedData->encryptedContentInfo->debug = 0;",
          "746:     if (!pk && !cert && !dcont && !out)",
          "747:         return 1;",
          "748:     if (pk && !CMS_decrypt_set1_pkey(cms, pk, cert))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746:     if (!cert)",
          "747:         cms->d.envelopedData->encryptedContentInfo->havenocert = 1;",
          "748:     else",
          "749:         cms->d.envelopedData->encryptedContentInfo->havenocert = 0;",
          "",
          "---------------"
        ],
        "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
          "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: }",
          "139: static int pkcs7_decrypt_rinfo(unsigned char **pek, int *peklen,",
          "141: {",
          "142:     EVP_PKEY_CTX *pctx = NULL;",
          "143:     unsigned char *ek = NULL;",
          "",
          "[Removed Lines]",
          "140:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey)",
          "",
          "[Added Lines]",
          "140:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey,",
          "141:                                size_t fixlen)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     }",
          "172:     if (EVP_PKEY_decrypt(pctx, ek, &eklen,",
          "174:         ret = 0;",
          "175:         PKCS7err(PKCS7_F_PKCS7_DECRYPT_RINFO, ERR_R_EVP_LIB);",
          "176:         goto err;",
          "",
          "[Removed Lines]",
          "173:                          ri->enc_key->data, ri->enc_key->length) <= 0) {",
          "",
          "[Added Lines]",
          "174:                          ri->enc_key->data, ri->enc_key->length) <= 0",
          "175:             || eklen == 0",
          "176:             || (fixlen != 0 && eklen != fixlen)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:             for (i = 0; i < sk_PKCS7_RECIP_INFO_num(rsk); i++) {",
          "500:                 ri = sk_PKCS7_RECIP_INFO_value(rsk, i);",
          "503:                     goto err;",
          "504:                 ERR_clear_error();",
          "505:             }",
          "506:         } else {",
          "509:                 goto err;",
          "510:             ERR_clear_error();",
          "511:         }",
          "",
          "[Removed Lines]",
          "502:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
          "508:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
          "",
          "[Added Lines]",
          "505:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey,",
          "506:                         EVP_CIPHER_key_length(evp_cipher)) < 0)",
          "512:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey, 0) < 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "631f94db0065c78181ca9ba5546ebc8bb3884b97",
      "candidate_info": {
        "commit_hash": "631f94db0065c78181ca9ba5546ebc8bb3884b97",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/631f94db0065c78181ca9ba5546ebc8bb3884b97",
        "files": [
          "CHANGES",
          "crypto/cms/cms_env.c",
          "crypto/cms/cms_lcl.h",
          "crypto/cms/cms_smime.c",
          "crypto/pkcs7/pk7_doit.c"
        ],
        "message": "Fix a padding oracle in PKCS7_dataDecode and CMS_decrypt_set1_pkey\n\nAn attack is simple, if the first CMS_recipientInfo is valid but the\nsecond CMS_recipientInfo is chosen ciphertext. If the second\nrecipientInfo decodes to PKCS #1 v1.5 form plaintext, the correct\nencryption key will be replaced by garbage, and the message cannot be\ndecoded, but if the RSA decryption fails, the correct encryption key is\nused and the recipient will not notice the attack.\n\nAs a work around for this potential attack the length of the decrypted\nkey must be equal to the cipher default key length, in case the\ncertifiate is not given and all recipientInfo are tried out.\n\nThe old behaviour can be re-enabled in the CMS code by setting the\nCMS_DEBUG_DECRYPT flag.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9777)\n\n(cherry picked from commit 5840ed0cd1e6487d247efbc1a04136a41d7b3a37)",
        "before_after_code_files": [
          "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
          "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
          "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
          "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ],
          "candidate": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/cms/cms_env.c||crypto/cms/cms_env.c": [
          "File: crypto/cms/cms_env.c -> crypto/cms/cms_env.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:     unsigned char *ek = NULL;",
          "364:     size_t eklen;",
          "365:     int ret = 0;",
          "366:     CMS_EncryptedContentInfo *ec;",
          "367:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:     size_t fixlen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371:         return 0;",
          "372:     }",
          "374:     ktri->pctx = EVP_PKEY_CTX_new(pkey, NULL);",
          "375:     if (ktri->pctx == NULL)",
          "376:         return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:     if (cms->d.envelopedData->encryptedContentInfo->havenocert",
          "376:             && !cms->d.envelopedData->encryptedContentInfo->debug) {",
          "377:         X509_ALGOR *calg = ec->contentEncryptionAlgorithm;",
          "378:         const EVP_CIPHER *ciph = EVP_get_cipherbyobj(calg->algorithm);",
          "380:         if (ciph == NULL) {",
          "381:             CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_UNKNOWN_CIPHER);",
          "382:             return 0;",
          "383:         }",
          "385:         fixlen = EVP_CIPHER_key_length(ciph);",
          "386:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "402:     if (EVP_PKEY_decrypt(ktri->pctx, ek, &eklen,",
          "403:                          ktri->encryptedKey->data,",
          "405:         CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_CMS_LIB);",
          "406:         goto err;",
          "407:     }",
          "",
          "[Removed Lines]",
          "404:                          ktri->encryptedKey->length) <= 0) {",
          "",
          "[Added Lines]",
          "418:                          ktri->encryptedKey->length) <= 0",
          "419:             || eklen == 0",
          "420:             || (fixlen != 0 && eklen != fixlen)) {",
          "",
          "---------------"
        ],
        "crypto/cms/cms_lcl.h||crypto/cms/cms_lcl.h": [
          "File: crypto/cms/cms_lcl.h -> crypto/cms/cms_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     size_t keylen;",
          "131:     int debug;",
          "132: };",
          "134: struct CMS_RecipientInfo_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     int havenocert;",
          "",
          "---------------"
        ],
        "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c": [
          "File: crypto/cms/cms_smime.c -> crypto/cms/cms_smime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "743:         cms->d.envelopedData->encryptedContentInfo->debug = 1;",
          "744:     else",
          "745:         cms->d.envelopedData->encryptedContentInfo->debug = 0;",
          "746:     if (!pk && !cert && !dcont && !out)",
          "747:         return 1;",
          "748:     if (pk && !CMS_decrypt_set1_pkey(cms, pk, cert))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746:     if (!cert)",
          "747:         cms->d.envelopedData->encryptedContentInfo->havenocert = 1;",
          "748:     else",
          "749:         cms->d.envelopedData->encryptedContentInfo->havenocert = 0;",
          "",
          "---------------"
        ],
        "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
          "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: }",
          "139: static int pkcs7_decrypt_rinfo(unsigned char **pek, int *peklen,",
          "141: {",
          "142:     EVP_PKEY_CTX *pctx = NULL;",
          "143:     unsigned char *ek = NULL;",
          "",
          "[Removed Lines]",
          "140:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey)",
          "",
          "[Added Lines]",
          "140:                                PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey,",
          "141:                                size_t fixlen)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     }",
          "172:     if (EVP_PKEY_decrypt(pctx, ek, &eklen,",
          "174:         ret = 0;",
          "175:         PKCS7err(PKCS7_F_PKCS7_DECRYPT_RINFO, ERR_R_EVP_LIB);",
          "176:         goto err;",
          "",
          "[Removed Lines]",
          "173:                          ri->enc_key->data, ri->enc_key->length) <= 0) {",
          "",
          "[Added Lines]",
          "174:                          ri->enc_key->data, ri->enc_key->length) <= 0",
          "175:             || eklen == 0",
          "176:             || (fixlen != 0 && eklen != fixlen)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:             for (i = 0; i < sk_PKCS7_RECIP_INFO_num(rsk); i++) {",
          "500:                 ri = sk_PKCS7_RECIP_INFO_value(rsk, i);",
          "503:                     goto err;",
          "504:                 ERR_clear_error();",
          "505:             }",
          "506:         } else {",
          "509:                 goto err;",
          "510:             ERR_clear_error();",
          "511:         }",
          "",
          "[Removed Lines]",
          "502:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
          "508:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey) < 0)",
          "",
          "[Added Lines]",
          "505:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey,",
          "506:                         EVP_CIPHER_key_length(evp_cipher)) < 0)",
          "512:             if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey, 0) < 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "924663c36d47066d5307937da77fed7e872730c7",
      "candidate_info": {
        "commit_hash": "924663c36d47066d5307937da77fed7e872730c7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/924663c36d47066d5307937da77fed7e872730c7",
        "files": [
          "crypto/asn1/evp_asn1.c",
          "crypto/cms/cms_asn1.c",
          "crypto/cms/cms_enc.c",
          "crypto/cms/cms_env.c",
          "crypto/cms/cms_err.c",
          "crypto/cms/cms_kari.c",
          "crypto/cms/cms_lib.c",
          "crypto/cms/cms_local.h",
          "crypto/cms/cms_pwri.c",
          "crypto/cms/cms_smime.c",
          "crypto/err/openssl.txt",
          "crypto/evp/evp_lib.c",
          "crypto/evp/evp_local.h",
          "doc/man1/openssl-cms.pod.in",
          "doc/man3/CMS_EnvelopedData_create.pod",
          "doc/man3/CMS_decrypt.pod",
          "doc/man3/CMS_encrypt.pod",
          "include/crypto/asn1.h",
          "include/crypto/evp.h",
          "include/openssl/asn1err.h",
          "include/openssl/cms.h",
          "include/openssl/cmserr.h",
          "test/cmsapitest.c",
          "test/drbgtest.c",
          "test/recipes/80-test_cms.t",
          "util/libcrypto.num"
        ],
        "message": "Add CMS AuthEnvelopedData with AES-GCM support\n\nAdd the AuthEnvelopedData as defined in RFC 5083 with AES-GCM\nparameter as defined in RFC 5084.\n\nReviewed-by: Shane Lontis <shane.lontis@oracle.com>\nReviewed-by: Tomas Mraz <tmraz@fedoraproject.org>\n(Merged from https://github.com/openssl/openssl/pull/8024)",
        "before_after_code_files": [
          "crypto/asn1/evp_asn1.c||crypto/asn1/evp_asn1.c",
          "crypto/cms/cms_asn1.c||crypto/cms/cms_asn1.c",
          "crypto/cms/cms_enc.c||crypto/cms/cms_enc.c",
          "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
          "crypto/cms/cms_err.c||crypto/cms/cms_err.c",
          "crypto/cms/cms_kari.c||crypto/cms/cms_kari.c",
          "crypto/cms/cms_lib.c||crypto/cms/cms_lib.c",
          "crypto/cms/cms_local.h||crypto/cms/cms_local.h",
          "crypto/cms/cms_pwri.c||crypto/cms/cms_pwri.c",
          "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c",
          "crypto/evp/evp_lib.c||crypto/evp/evp_lib.c",
          "crypto/evp/evp_local.h||crypto/evp/evp_local.h",
          "include/crypto/asn1.h||include/crypto/asn1.h",
          "include/crypto/evp.h||include/crypto/evp.h",
          "include/openssl/asn1err.h||include/openssl/asn1err.h",
          "include/openssl/cms.h||include/openssl/cms.h",
          "include/openssl/cmserr.h||include/openssl/cmserr.h",
          "test/cmsapitest.c||test/cmsapitest.c",
          "test/drbgtest.c||test/drbgtest.c",
          "test/recipes/80-test_cms.t||test/recipes/80-test_cms.t",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c"
          ],
          "candidate": [
            "crypto/cms/cms_env.c||crypto/cms/cms_env.c",
            "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/evp_asn1.c||crypto/asn1/evp_asn1.c": [
          "File: crypto/asn1/evp_asn1.c -> crypto/asn1/evp_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"internal/cryptlib.h\"",
          "12: #include <openssl/asn1.h>",
          "13: #include <openssl/asn1t.h>",
          "15: int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)",
          "16: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"crypto/asn1.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     return ret;",
          "47: }",
          "49: typedef struct {",
          "50:     int32_t num;",
          "51:     ASN1_OCTET_STRING *oct;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: static ossl_inline void asn1_type_init_oct(ASN1_OCTET_STRING *oct,",
          "51:                                            unsigned char *data, int len)",
          "52: {",
          "53:     oct->data = data;",
          "54:     oct->type = V_ASN1_OCTET_STRING;",
          "55:     oct->length = len;",
          "56:     oct->flags = 0;",
          "57: }",
          "59: static int asn1_type_get_int_oct(ASN1_OCTET_STRING *oct, int32_t anum,",
          "60:                                  long *num, unsigned char *data, int max_len)",
          "61: {",
          "62:     int ret = ASN1_STRING_length(oct), n;",
          "64:     if (num != NULL)",
          "67:     if (max_len > ret)",
          "68:         n = ret;",
          "69:     else",
          "70:         n = max_len;",
          "72:     if (data != NULL)",
          "73:         memcpy(data, ASN1_STRING_get0_data(oct), n);",
          "75:     return ret;",
          "76: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     atmp.num = num;",
          "68:     atmp.oct = &oct;",
          "74:     if (ASN1_TYPE_pack_sequence(ASN1_ITEM_rptr(asn1_int_oct), &atmp, &a))",
          "75:         return 1;",
          "76:     return 0;",
          "77: }",
          "83: int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,",
          "84:                                   unsigned char *data, int max_len)",
          "85: {",
          "86:     asn1_int_oct *atmp = NULL;",
          "89:     if ((a->type != V_ASN1_SEQUENCE) || (a->value.sequence == NULL)) {",
          "90:         goto err;",
          "",
          "[Removed Lines]",
          "69:     oct.data = data;",
          "70:     oct.type = V_ASN1_OCTET_STRING;",
          "71:     oct.length = len;",
          "72:     oct.flags = 0;",
          "87:     int ret = -1, n;",
          "",
          "[Added Lines]",
          "98:     asn1_type_init_oct(&oct, data, len);",
          "109:     int ret = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:     if (atmp == NULL)",
          "96:         goto err;",
          "109:     if (ret == -1) {",
          "110:  err:",
          "111:         ASN1err(ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING, ASN1_R_DATA_IS_WRONG);",
          "",
          "[Removed Lines]",
          "98:     if (num != NULL)",
          "101:     ret = ASN1_STRING_length(atmp->oct);",
          "102:     if (max_len > ret)",
          "103:         n = ret;",
          "104:     else",
          "105:         n = max_len;",
          "107:     if (data != NULL)",
          "108:         memcpy(data, ASN1_STRING_get0_data(atmp->oct), n);",
          "",
          "[Added Lines]",
          "120:     ret = asn1_type_get_int_oct(atmp->oct, atmp->num, num, data, max_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:     M_ASN1_free_of(atmp, asn1_int_oct);",
          "114:     return ret;",
          "115: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: typedef struct {",
          "131:     ASN1_OCTET_STRING *oct;",
          "132:     int32_t num;",
          "133: } asn1_oct_int;",
          "139: ASN1_SEQUENCE(asn1_oct_int) = {",
          "140:         ASN1_SIMPLE(asn1_oct_int, oct, ASN1_OCTET_STRING),",
          "141:         ASN1_EMBED(asn1_oct_int, num, INT32)",
          "142: } static_ASN1_SEQUENCE_END(asn1_oct_int)",
          "144: DECLARE_ASN1_ITEM(asn1_oct_int)",
          "146: int asn1_type_set_octetstring_int(ASN1_TYPE *a, long num, unsigned char *data,",
          "147:                                   int len)",
          "148: {",
          "149:     asn1_oct_int atmp;",
          "150:     ASN1_OCTET_STRING oct;",
          "152:     atmp.num = num;",
          "153:     atmp.oct = &oct;",
          "154:     asn1_type_init_oct(&oct, data, len);",
          "156:     if (ASN1_TYPE_pack_sequence(ASN1_ITEM_rptr(asn1_oct_int), &atmp, &a))",
          "157:         return 1;",
          "158:     return 0;",
          "159: }",
          "161: int asn1_type_get_octetstring_int(const ASN1_TYPE *a, long *num,",
          "162:                                   unsigned char *data, int max_len)",
          "163: {",
          "164:     asn1_oct_int *atmp = NULL;",
          "165:     int ret = -1;",
          "167:     if ((a->type != V_ASN1_SEQUENCE) || (a->value.sequence == NULL))",
          "168:         goto err;",
          "170:     atmp = ASN1_TYPE_unpack_sequence(ASN1_ITEM_rptr(asn1_oct_int), a);",
          "172:     if (atmp == NULL)",
          "173:         goto err;",
          "175:     ret = asn1_type_get_int_oct(atmp->oct, atmp->num, num, data, max_len);",
          "177:     if (ret == -1) {",
          "178:  err:",
          "179:         ASN1err(ASN1_F_ASN1_TYPE_GET_OCTETSTRING_INT, ASN1_R_DATA_IS_WRONG);",
          "180:     }",
          "181:     M_ASN1_free_of(atmp, asn1_oct_int);",
          "182:     return ret;",
          "183: }",
          "",
          "---------------"
        ],
        "crypto/cms/cms_asn1.c||crypto/cms/cms_asn1.c": [
          "File: crypto/cms/cms_asn1.c -> crypto/cms/cms_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:         ASN1_IMP_SET_OF_OPT(CMS_EncryptedData, unprotectedAttrs, X509_ATTRIBUTE, 1)",
          "246: } ASN1_NDEF_SEQUENCE_END(CMS_EncryptedData)",
          "248: ASN1_NDEF_SEQUENCE(CMS_AuthenticatedData) = {",
          "249:         ASN1_EMBED(CMS_AuthenticatedData, version, INT32),",
          "250:         ASN1_IMP_OPT(CMS_AuthenticatedData, originatorInfo, CMS_OriginatorInfo, 0),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: ASN1_NDEF_SEQUENCE(CMS_AuthEnvelopedData) = {",
          "250:         ASN1_EMBED(CMS_AuthEnvelopedData, version, INT32),",
          "251:         ASN1_IMP_OPT(CMS_AuthEnvelopedData, originatorInfo, CMS_OriginatorInfo, 0),",
          "252:         ASN1_SET_OF(CMS_AuthEnvelopedData, recipientInfos, CMS_RecipientInfo),",
          "253:         ASN1_SIMPLE(CMS_AuthEnvelopedData, authEncryptedContentInfo, CMS_EncryptedContentInfo),",
          "254:         ASN1_IMP_SET_OF_OPT(CMS_AuthEnvelopedData, authAttrs, X509_ALGOR, 2),",
          "255:         ASN1_SIMPLE(CMS_AuthEnvelopedData, mac, ASN1_OCTET_STRING),",
          "256:         ASN1_IMP_SET_OF_OPT(CMS_AuthEnvelopedData, unauthAttrs, X509_ALGOR, 3)",
          "257: } ASN1_NDEF_SEQUENCE_END(CMS_AuthEnvelopedData)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:         ADB_ENTRY(NID_pkcs7_enveloped, ASN1_NDEF_EXP(CMS_ContentInfo, d.envelopedData, CMS_EnvelopedData, 0)),",
          "274:         ADB_ENTRY(NID_pkcs7_digest, ASN1_NDEF_EXP(CMS_ContentInfo, d.digestedData, CMS_DigestedData, 0)),",
          "275:         ADB_ENTRY(NID_pkcs7_encrypted, ASN1_NDEF_EXP(CMS_ContentInfo, d.encryptedData, CMS_EncryptedData, 0)),",
          "276:         ADB_ENTRY(NID_id_smime_ct_authData, ASN1_NDEF_EXP(CMS_ContentInfo, d.authenticatedData, CMS_AuthenticatedData, 0)),",
          "277:         ADB_ENTRY(NID_id_smime_ct_compressedData, ASN1_NDEF_EXP(CMS_ContentInfo, d.compressedData, CMS_CompressedData, 0)),",
          "278: } ASN1_ADB_END(CMS_ContentInfo, 0, contentType, 0, &cms_default_tt, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:         ADB_ENTRY(NID_id_smime_ct_authEnvelopedData, ASN1_NDEF_EXP(CMS_ContentInfo, d.authEnvelopedData, CMS_AuthEnvelopedData, 0)),",
          "",
          "---------------"
        ],
        "crypto/cms/cms_enc.c||crypto/cms/cms_enc.c": [
          "File: crypto/cms/cms_enc.c -> crypto/cms/cms_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <openssl/err.h>",
          "15: #include <openssl/cms.h>",
          "16: #include <openssl/rand.h>",
          "17: #include \"cms_local.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"crypto/evp.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     EVP_CIPHER *fetched_ciph = NULL;",
          "29:     const EVP_CIPHER *cipher = NULL;",
          "30:     X509_ALGOR *calg = ec->contentEncryptionAlgorithm;",
          "31:     unsigned char iv[EVP_MAX_IV_LENGTH], *piv = NULL;",
          "32:     unsigned char *tkey = NULL;",
          "33:     int len;",
          "34:     size_t tkeylen = 0;",
          "35:     int ok = 0;",
          "36:     int enc, keep_key = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     evp_cipher_aead_asn1_params aparams;",
          "36:     int ivlen = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:     }",
          "78:     if (enc) {",
          "80:         calg->algorithm = OBJ_nid2obj(EVP_CIPHER_CTX_type(ctx));",
          "82:         ivlen = EVP_CIPHER_CTX_iv_length(ctx);",
          "",
          "[Removed Lines]",
          "79:         int ivlen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:                 goto err;",
          "86:             piv = iv;",
          "87:         }",
          "92:     }",
          "93:     len = EVP_CIPHER_CTX_key_length(ctx);",
          "94:     if (len <= 0)",
          "",
          "[Removed Lines]",
          "88:     } else if (EVP_CIPHER_asn1_to_param(ctx, calg->parameter) <= 0) {",
          "89:         CMSerr(CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO,",
          "90:                CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR);",
          "91:         goto err;",
          "",
          "[Added Lines]",
          "90:     } else {",
          "91:         if (evp_cipher_asn1_to_param_ex(ctx, calg->parameter, &aparams) <= 0) {",
          "92:             CMSerr(0, CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR);",
          "93:             goto err;",
          "94:         }",
          "95:         if ((EVP_CIPHER_flags(cipher) & EVP_CIPH_FLAG_AEAD_CIPHER)) {",
          "96:             piv = aparams.iv;",
          "97:             if (ec->taglen > 0",
          "98:                     && EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_TAG,",
          "99:                                            ec->taglen, ec->tag) <= 0) {",
          "100:                 CMSerr(0, CMS_R_CIPHER_AEAD_SET_TAG_ERROR);",
          "101:                 goto err;",
          "102:             }",
          "103:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:             CMSerr(CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO, ERR_R_MALLOC_FAILURE);",
          "151:             goto err;",
          "152:         }",
          "154:             CMSerr(CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO,",
          "155:                    CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR);",
          "156:             goto err;",
          "",
          "[Removed Lines]",
          "153:         if (EVP_CIPHER_param_to_asn1(ctx, calg->parameter) <= 0) {",
          "",
          "[Added Lines]",
          "165:         if ((EVP_CIPHER_flags(cipher) & EVP_CIPH_FLAG_AEAD_CIPHER)) {",
          "166:             memcpy(aparams.iv, piv, ivlen);",
          "167:             aparams.iv_len = ivlen;",
          "168:             aparams.tag_len = EVP_CIPHER_CTX_tag_length(ctx);",
          "169:             if (aparams.tag_len <= 0)",
          "170:                 goto err;",
          "171:         }",
          "173:         if (evp_cipher_param_to_asn1_ex(ctx, calg->parameter, &aparams) <= 0) {",
          "",
          "---------------"
        ],
        "crypto/cms/cms_env.c||crypto/cms/cms_env.c": [
          "File: crypto/cms/cms_env.c -> crypto/cms/cms_env.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: DEFINE_STACK_OF(X509_ATTRIBUTE)",
          "28: static void cms_env_set_version(CMS_EnvelopedData *env);",
          "30: CMS_EnvelopedData *cms_get0_enveloped(CMS_ContentInfo *cms)",
          "31: {",
          "32:     if (OBJ_obj2nid(cms->contentType) != NID_pkcs7_enveloped) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #define CMS_ENVELOPED_STANDARD 1",
          "30: #define CMS_ENVELOPED_AUTH     2",
          "32: static int cms_get_enveloped_type(const CMS_ContentInfo *cms)",
          "33: {",
          "34:     int nid = OBJ_obj2nid(cms->contentType);",
          "36:     switch (nid) {",
          "37:     case NID_pkcs7_enveloped:",
          "38:         return CMS_ENVELOPED_STANDARD;",
          "40:     case NID_id_smime_ct_authEnvelopedData:",
          "41:         return CMS_ENVELOPED_AUTH;",
          "43:     default:",
          "44:         CMSerr(0, CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA);",
          "45:         return 0;",
          "46:     }",
          "47: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     return cms->d.envelopedData;",
          "38: }",
          "40: static CMS_EnvelopedData *cms_enveloped_data_init(CMS_ContentInfo *cms)",
          "41: {",
          "42:     if (cms->d.other == NULL) {",
          "43:         cms->d.envelopedData = M_ASN1_new_of(CMS_EnvelopedData);",
          "45:             CMSerr(CMS_F_CMS_ENVELOPED_DATA_INIT, ERR_R_MALLOC_FAILURE);",
          "46:             return NULL;",
          "47:         }",
          "",
          "[Removed Lines]",
          "44:         if (!cms->d.envelopedData) {",
          "",
          "[Added Lines]",
          "59: CMS_AuthEnvelopedData *cms_get0_auth_enveloped(CMS_ContentInfo *cms)",
          "60: {",
          "61:     if (OBJ_obj2nid(cms->contentType) != NID_id_smime_ct_authEnvelopedData) {",
          "62:         CMSerr(0, CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA);",
          "63:         return NULL;",
          "64:     }",
          "65:     return cms->d.authEnvelopedData;",
          "66: }",
          "72:         if (cms->d.envelopedData == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     return cms_get0_enveloped(cms);",
          "56: }",
          "58: int cms_env_asn1_ctrl(CMS_RecipientInfo *ri, int cmd)",
          "59: {",
          "60:     EVP_PKEY *pkey;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: static CMS_AuthEnvelopedData *",
          "87: cms_auth_enveloped_data_init(CMS_ContentInfo *cms)",
          "88: {",
          "89:     if (cms->d.other == NULL) {",
          "90:         cms->d.authEnvelopedData = M_ASN1_new_of(CMS_AuthEnvelopedData);",
          "91:         if (cms->d.authEnvelopedData == NULL) {",
          "92:             CMSerr(0, ERR_R_MALLOC_FAILURE);",
          "93:             return NULL;",
          "94:         }",
          "96:         cms->d.authEnvelopedData->version = 0;",
          "97:         cms->d.authEnvelopedData->authEncryptedContentInfo->contentType =",
          "98:             OBJ_nid2obj(NID_pkcs7_data);",
          "99:         ASN1_OBJECT_free(cms->contentType);",
          "100:         cms->contentType = OBJ_nid2obj(NID_id_smime_ct_authEnvelopedData);",
          "101:         return cms->d.authEnvelopedData;",
          "102:     }",
          "103:     return cms_get0_auth_enveloped(cms);",
          "104: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:     return 1;",
          "87: }",
          "89: STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms)",
          "90: {",
          "94:         return NULL;",
          "96: }",
          "98: void cms_RecipientInfos_set_cmsctx(CMS_ContentInfo *cms)",
          "",
          "[Removed Lines]",
          "91:     CMS_EnvelopedData *env;",
          "92:     env = cms_get0_enveloped(cms);",
          "93:     if (!env)",
          "95:     return env->recipientInfos;",
          "",
          "[Added Lines]",
          "137: CMS_EncryptedContentInfo* cms_get0_env_enc_content(const CMS_ContentInfo *cms)",
          "138: {",
          "139:     switch (cms_get_enveloped_type(cms)) {",
          "140:     case CMS_ENVELOPED_STANDARD:",
          "141:         return cms->d.envelopedData->encryptedContentInfo;",
          "143:     case CMS_ENVELOPED_AUTH:",
          "144:         return cms->d.authEnvelopedData->authEncryptedContentInfo;",
          "146:     default:",
          "147:         return NULL;",
          "148:     }",
          "149: }",
          "153:     switch (cms_get_enveloped_type(cms)) {",
          "154:     case CMS_ENVELOPED_STANDARD:",
          "155:         return cms->d.envelopedData->recipientInfos;",
          "157:     case CMS_ENVELOPED_AUTH:",
          "158:         return cms->d.authEnvelopedData->recipientInfos;",
          "160:     default:",
          "162:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:     return CMS_EnvelopedData_create_with_libctx(cipher, NULL, NULL);",
          "170: }",
          "173: {",
          "211: }",
          "",
          "[Removed Lines]",
          "172: int cms_EnvelopedData_final(CMS_ContentInfo *cms, BIO *chain)",
          "174:     CMS_EnvelopedData *env = NULL;",
          "175:     EVP_CIPHER_CTX *ctx = NULL;",
          "176:     BIO *mbio = BIO_find_type(chain, BIO_TYPE_CIPHER);",
          "178:     env = cms_get0_enveloped(cms);",
          "179:     if (env == NULL)",
          "180:         return 0;",
          "182:     if (mbio == NULL) {",
          "183:         CMSerr(CMS_F_CMS_ENVELOPEDDATA_FINAL, CMS_R_CONTENT_NOT_FOUND);",
          "184:         return 0;",
          "185:     }",
          "187:     BIO_get_cipher_ctx(mbio, &ctx);",
          "193:     if (EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ctx)) & EVP_CIPH_FLAG_CIPHER_WITH_MAC) {",
          "194:         if (cms->d.envelopedData->unprotectedAttrs == NULL)",
          "195:             cms->d.envelopedData->unprotectedAttrs = sk_X509_ATTRIBUTE_new_null();",
          "197:         if (cms->d.envelopedData->unprotectedAttrs == NULL) {",
          "198:             CMSerr(CMS_F_CMS_ENVELOPEDDATA_FINAL, ERR_R_MALLOC_FAILURE);",
          "199:             return 0;",
          "200:         }",
          "202:         if (EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_PROCESS_UNPROTECTED,",
          "203:                                 1, env->unprotectedAttrs) <= 0) {",
          "204:             CMSerr(CMS_F_CMS_ENVELOPEDDATA_FINAL, CMS_R_CTRL_FAILURE);",
          "205:             return 0;",
          "206:         }",
          "207:     }",
          "209:     cms_env_set_version(cms->d.envelopedData);",
          "210:     return 1;",
          "",
          "[Added Lines]",
          "239: CMS_ContentInfo *",
          "240: CMS_AuthEnvelopedData_create_with_libctx(const EVP_CIPHER *cipher,",
          "241:                                          OPENSSL_CTX *libctx,",
          "242:                                          const char *propq)",
          "244:     CMS_ContentInfo *cms;",
          "245:     CMS_AuthEnvelopedData *aenv;",
          "247:     cms = CMS_ContentInfo_new_with_libctx(libctx, propq);",
          "248:     if (cms == NULL)",
          "249:         goto merr;",
          "250:     aenv = cms_auth_enveloped_data_init(cms);",
          "251:     if (aenv == NULL)",
          "252:         goto merr;",
          "253:     if (!cms_EncryptedContent_init(aenv->authEncryptedContentInfo,",
          "254:                                    cipher, NULL, 0, cms_get0_cmsctx(cms)))",
          "255:         goto merr;",
          "256:     return cms;",
          "257:  merr:",
          "258:     CMS_ContentInfo_free(cms);",
          "259:     CMSerr(0, ERR_R_MALLOC_FAILURE);",
          "260:     return NULL;",
          "261: }",
          "264: CMS_ContentInfo *CMS_AuthEnvelopedData_create(const EVP_CIPHER *cipher)",
          "265: {",
          "266:     return CMS_AuthEnvelopedData_create_with_libctx(cipher, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "272:                                       X509 *originator, unsigned int flags)",
          "273: {",
          "274:     CMS_RecipientInfo *ri = NULL;",
          "276:     EVP_PKEY *pk = NULL;",
          "277:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "281:         goto err;",
          "284:     ri = M_ASN1_new_of(CMS_RecipientInfo);",
          "286:         goto merr;",
          "288:     pk = X509_get0_pubkey(recip);",
          "",
          "[Removed Lines]",
          "275:     CMS_EnvelopedData *env;",
          "279:     env = cms_get0_enveloped(cms);",
          "280:     if (!env)",
          "285:     if (!ri)",
          "",
          "[Added Lines]",
          "331:     STACK_OF(CMS_RecipientInfo) *ris;",
          "335:     ris = CMS_get0_RecipientInfos(cms);",
          "336:     if (ris == NULL)",
          "341:     if (ri == NULL)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "312:     }",
          "315:         goto merr;",
          "317:     return ri;",
          "",
          "[Removed Lines]",
          "314:     if (!sk_CMS_RecipientInfo_push(env->recipientInfos, ri))",
          "",
          "[Added Lines]",
          "370:     if (!sk_CMS_RecipientInfo_push(ris, ri))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "325: }",
          "329: {",
          "330:      return CMS_add1_recipient(cms, recip, NULL, NULL, flags);",
          "331: }",
          "",
          "[Removed Lines]",
          "327: CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,",
          "328:      X509 *recip, unsigned int flags)",
          "",
          "[Added Lines]",
          "383: CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms, X509 *recip,",
          "384:                                            unsigned int flags)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "408:         return 0;",
          "409:     }",
          "410:     ktri = ri->d.ktri;",
          "413:     pctx = ktri->pctx;",
          "",
          "[Removed Lines]",
          "411:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Added Lines]",
          "467:     ec = cms_get0_env_enc_content(cms);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "471:     CMS_EncryptedContentInfo *ec;",
          "472:     const CMS_CTX *ctx = cms_get0_cmsctx(cms);",
          "476:     if (ktri->pkey == NULL) {",
          "477:         CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT, CMS_R_NO_PRIVATE_KEY);",
          "",
          "[Removed Lines]",
          "474:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Added Lines]",
          "530:     ec = cms_get0_env_enc_content(cms);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "598:                                           ASN1_TYPE *otherType)",
          "599: {",
          "600:     CMS_RecipientInfo *ri = NULL;",
          "602:     CMS_KEKRecipientInfo *kekri;",
          "605:         goto err;",
          "607:     if (nid == NID_undef) {",
          "",
          "[Removed Lines]",
          "601:     CMS_EnvelopedData *env;",
          "603:     env = cms_get0_enveloped(cms);",
          "604:     if (!env)",
          "",
          "[Added Lines]",
          "658:     STACK_OF(CMS_RecipientInfo) *ris = CMS_get0_RecipientInfos(cms);",
          "660:     if (ris == NULL)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "658:             goto merr;",
          "659:     }",
          "662:         goto merr;",
          "",
          "[Removed Lines]",
          "661:     if (!sk_CMS_RecipientInfo_push(env->recipientInfos, ri))",
          "",
          "[Added Lines]",
          "717:     if (!sk_CMS_RecipientInfo_push(ris, ri))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "774:     EVP_CIPHER_CTX *ctx = NULL;",
          "775:     const CMS_CTX *cms_ctx = cms_get0_cmsctx(cms);",
          "779:     kekri = ri->d.kekri;",
          "",
          "[Removed Lines]",
          "777:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Added Lines]",
          "833:     ec = cms_get0_env_enc_content(cms);",
          "834:     if (ec == NULL)",
          "835:         return 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "843:     EVP_CIPHER_CTX *ctx = NULL;",
          "844:     const CMS_CTX *cms_ctx = cms_get0_cmsctx(cms);",
          "848:     kekri = ri->d.kekri;",
          "",
          "[Removed Lines]",
          "846:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Added Lines]",
          "904:     ec = cms_get0_env_enc_content(cms);",
          "905:     if (ec == NULL)",
          "906:         return 0;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1013:     env->version = 0;",
          "1014: }",
          "1016: static BIO *cms_EnvelopedData_Decryption_init_bio(CMS_ContentInfo *cms)",
          "1017: {",
          "1018:     CMS_EncryptedContentInfo *ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1076: static int cms_env_encrypt_content_key(const CMS_ContentInfo *cms,",
          "1077:                                        STACK_OF(CMS_RecipientInfo) *ris)",
          "1078: {",
          "1079:     int i;",
          "1080:     CMS_RecipientInfo *ri;",
          "1082:     for (i = 0; i < sk_CMS_RecipientInfo_num(ris); i++) {",
          "1083:         ri = sk_CMS_RecipientInfo_value(ris, i);",
          "1084:         if (CMS_RecipientInfo_encrypt(cms, ri) <= 0)",
          "1085:             return -1;",
          "1086:     }",
          "1087:     return 1;",
          "1088: }",
          "1090: static void cms_env_clear_ec(CMS_EncryptedContentInfo *ec)",
          "1091: {",
          "1092:     ec->cipher = NULL;",
          "1093:     OPENSSL_clear_free(ec->key, ec->keylen);",
          "1094:     ec->key = NULL;",
          "1095:     ec->keylen = 0;",
          "1096: }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1044: {",
          "1045:     CMS_EncryptedContentInfo *ec;",
          "1046:     STACK_OF(CMS_RecipientInfo) *rinfos;",
          "1049:     BIO *ret;",
          "1054:     ret = cms_EncryptedContent_init_bio(ec, cms_get0_cmsctx(cms));",
          "",
          "[Removed Lines]",
          "1047:     CMS_RecipientInfo *ri;",
          "1048:     int i, ok = 0;",
          "1053:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Added Lines]",
          "1129:     int ok = 0;",
          "1131:     CMS_EnvelopedData *env = cms->d.envelopedData;",
          "1135:     ec = env->encryptedContentInfo;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1058:         return ret;",
          "1069:     }",
          "1072:     ok = 1;",
          "1074:  err:",
          "1079:     if (ok)",
          "1080:         return ret;",
          "1081:     BIO_free(ret);",
          "",
          "[Removed Lines]",
          "1061:     rinfos = cms->d.envelopedData->recipientInfos;",
          "1063:     for (i = 0; i < sk_CMS_RecipientInfo_num(rinfos); i++) {",
          "1064:          ri = sk_CMS_RecipientInfo_value(rinfos, i);",
          "1065:          if (CMS_RecipientInfo_encrypt(cms, ri) <= 0) {",
          "1066:              CMSerr(0, CMS_R_ERROR_SETTING_RECIPIENTINFO);",
          "1067:              goto err;",
          "1068:          }",
          "1070:     cms_env_set_version(cms->d.envelopedData);",
          "1075:     ec->cipher = NULL;",
          "1076:     OPENSSL_clear_free(ec->key, ec->keylen);",
          "1077:     ec->key = NULL;",
          "1078:     ec->keylen = 0;",
          "",
          "[Added Lines]",
          "1143:     rinfos = env->recipientInfos;",
          "1144:     if (cms_env_encrypt_content_key(cms, rinfos) < 0) {",
          "1145:         CMSerr(CMS_F_CMS_ENVELOPEDDATA_ENCRYPTION_INIT_BIO,",
          "1146:                CMS_R_ERROR_SETTING_RECIPIENTINFO);",
          "1147:         goto err;",
          "1151:     cms_env_set_version(env);",
          "1156:     cms_env_clear_ec(ec);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1093:     return cms_EnvelopedData_Decryption_init_bio(cms);",
          "1094: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1174: BIO *cms_AuthEnvelopedData_init_bio(CMS_ContentInfo *cms)",
          "1175: {",
          "1176:     CMS_EncryptedContentInfo *ec;",
          "1177:     STACK_OF(CMS_RecipientInfo) *rinfos;",
          "1178:     int ok = 0;",
          "1179:     BIO *ret;",
          "1180:     CMS_AuthEnvelopedData *aenv = cms->d.authEnvelopedData;",
          "1183:     ec = aenv->authEncryptedContentInfo;",
          "1185:     if (ec->cipher == NULL) {",
          "1186:         ec->tag = aenv->mac->data;",
          "1187:         ec->taglen = aenv->mac->length;",
          "1188:     }",
          "1189:     ret = cms_EncryptedContent_init_bio(ec, cms_get0_cmsctx(cms));",
          "1192:     if (ret == NULL || ec->cipher == NULL)",
          "1193:         return ret;",
          "1196:     rinfos = aenv->recipientInfos;",
          "1197:     if (cms_env_encrypt_content_key(cms, rinfos) < 0) {",
          "1198:         CMSerr(0, CMS_R_ERROR_SETTING_RECIPIENTINFO);",
          "1199:         goto err;",
          "1200:     }",
          "1203:     aenv->version = 0;",
          "1205:     ok = 1;",
          "1207:  err:",
          "1208:     cms_env_clear_ec(ec);",
          "1209:     if (ok)",
          "1210:         return ret;",
          "1211:     BIO_free(ret);",
          "1212:     return NULL;",
          "1213: }",
          "1215: int cms_EnvelopedData_final(CMS_ContentInfo *cms, BIO *chain)",
          "1216: {",
          "1217:     CMS_EnvelopedData *env = NULL;",
          "1218:     EVP_CIPHER_CTX *ctx = NULL;",
          "1219:     BIO *mbio = BIO_find_type(chain, BIO_TYPE_CIPHER);",
          "1221:     env = cms_get0_enveloped(cms);",
          "1222:     if (env == NULL)",
          "1223:         return 0;",
          "1225:     if (mbio == NULL) {",
          "1226:         CMSerr(CMS_F_CMS_ENVELOPEDDATA_FINAL, CMS_R_CONTENT_NOT_FOUND);",
          "1227:         return 0;",
          "1228:     }",
          "1230:     BIO_get_cipher_ctx(mbio, &ctx);",
          "1236:     if (EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ctx)) & EVP_CIPH_FLAG_CIPHER_WITH_MAC) {",
          "1237:         if (env->unprotectedAttrs == NULL)",
          "1238:             env->unprotectedAttrs = sk_X509_ATTRIBUTE_new_null();",
          "1240:         if (env->unprotectedAttrs == NULL) {",
          "1241:             CMSerr(CMS_F_CMS_ENVELOPEDDATA_FINAL, ERR_R_MALLOC_FAILURE);",
          "1242:             return 0;",
          "1243:         }",
          "1245:         if (EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_PROCESS_UNPROTECTED,",
          "1246:                                 1, env->unprotectedAttrs) <= 0) {",
          "1247:             CMSerr(CMS_F_CMS_ENVELOPEDDATA_FINAL, CMS_R_CTRL_FAILURE);",
          "1248:             return 0;",
          "1249:         }",
          "1250:     }",
          "1252:     cms_env_set_version(cms->d.envelopedData);",
          "1253:     return 1;",
          "1254: }",
          "1256: int cms_AuthEnvelopedData_final(CMS_ContentInfo *cms, BIO *cmsbio)",
          "1257: {",
          "1258:     EVP_CIPHER_CTX *ctx;",
          "1259:     unsigned char *tag = NULL;",
          "1260:     int taglen, ok = 0;",
          "1262:     BIO_get_cipher_ctx(cmsbio, &ctx);",
          "1268:     if (!EVP_CIPHER_CTX_encrypting(ctx))",
          "1269:         return 1;",
          "1271:     taglen = EVP_CIPHER_CTX_tag_length(ctx);",
          "1272:     if (taglen <= 0",
          "1273:             || (tag = OPENSSL_malloc(taglen)) == NULL",
          "1274:             || EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_GET_TAG, taglen,",
          "1275:                                    tag) <= 0) {",
          "1276:         CMSerr(0, CMS_R_CIPHER_GET_TAG);",
          "1277:         goto err;",
          "1278:     }",
          "1280:     if (!ASN1_OCTET_STRING_set(cms->d.authEnvelopedData->mac, tag, taglen))",
          "1281:         goto err;",
          "1283:     ok = 1;",
          "1284: err:",
          "1285:     OPENSSL_free(tag);",
          "1286:     return ok;",
          "1287: }",
          "",
          "---------------"
        ],
        "crypto/cms/cms_err.c||crypto/cms/cms_err.c": [
          "File: crypto/cms/cms_err.c -> crypto/cms/cms_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     \"certificate has no keyid\"},",
          "23:     {ERR_PACK(ERR_LIB_CMS, 0, CMS_R_CERTIFICATE_VERIFY_ERROR),",
          "24:     \"certificate verify error\"},",
          "25:     {ERR_PACK(ERR_LIB_CMS, 0, CMS_R_CIPHER_INITIALISATION_ERROR),",
          "26:     \"cipher initialisation error\"},",
          "27:     {ERR_PACK(ERR_LIB_CMS, 0, CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     {ERR_PACK(ERR_LIB_CMS, 0, CMS_R_CIPHER_AEAD_SET_TAG_ERROR),",
          "26:     \"cipher aead set tag error\"},",
          "27:     {ERR_PACK(ERR_LIB_CMS, 0, CMS_R_CIPHER_GET_TAG), \"cipher get tag\"},",
          "",
          "---------------"
        ],
        "crypto/cms/cms_kari.c||crypto/cms/cms_kari.c": [
          "File: crypto/cms/cms_kari.c -> crypto/cms/cms_kari.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:     if (!cms_kek_cipher(&cek, &ceklen, enckey, enckeylen, ri->d.kari, 0))",
          "293:         goto err;",
          "295:     OPENSSL_clear_free(ec->key, ec->keylen);",
          "296:     ec->key = cek;",
          "297:     ec->keylen = ceklen;",
          "",
          "[Removed Lines]",
          "294:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Added Lines]",
          "294:     ec = cms_get0_env_enc_content(cms);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:     }",
          "534:     kari = ri->d.kari;",
          "535:     reks = kari->recipientEncryptedKeys;",
          "538:     if (!cms_wrap_init(kari, ec->cipher))",
          "539:         return 0;",
          "",
          "[Removed Lines]",
          "536:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Added Lines]",
          "536:     ec = cms_get0_env_enc_content(cms);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_lib.c||crypto/cms/cms_lib.c": [
          "File: crypto/cms/cms_lib.c -> crypto/cms/cms_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         cmsbio = cms_EnvelopedData_init_bio(cms);",
          "190:         break;",
          "192:     default:",
          "193:         CMSerr(CMS_F_CMS_DATAINIT, CMS_R_UNSUPPORTED_TYPE);",
          "194:         goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     case NID_id_smime_ct_authEnvelopedData:",
          "193:         cmsbio = cms_AuthEnvelopedData_init_bio(cms);",
          "194:         break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     case NID_pkcs7_enveloped:",
          "240:         return cms_EnvelopedData_final(cms, cmsbio);",
          "242:     case NID_pkcs7_signed:",
          "243:         return cms_SignedData_final(cms, cmsbio);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:     case NID_id_smime_ct_authEnvelopedData:",
          "247:         return cms_AuthEnvelopedData_final(cms, cmsbio);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "275:     case NID_pkcs7_encrypted:",
          "276:         return &cms->d.encryptedData->encryptedContentInfo->encryptedContent;",
          "278:     case NID_id_smime_ct_authData:",
          "279:         return &cms->d.authenticatedData->encapContentInfo->eContent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:     case NID_id_smime_ct_authEnvelopedData:",
          "286:         return &cms->d.authEnvelopedData->authEncryptedContentInfo",
          "287:                                         ->encryptedContent;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311:     case NID_pkcs7_encrypted:",
          "312:         return &cms->d.encryptedData->encryptedContentInfo->contentType;",
          "314:     case NID_id_smime_ct_authData:",
          "315:         return &cms->d.authenticatedData->encapContentInfo->eContentType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:     case NID_id_smime_ct_authEnvelopedData:",
          "326:         return &cms->d.authEnvelopedData->authEncryptedContentInfo",
          "327:                                         ->contentType;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "472:             return NULL;",
          "473:         return &cms->d.envelopedData->originatorInfo->certificates;",
          "475:     default:",
          "476:         CMSerr(CMS_F_CMS_GET0_CERTIFICATE_CHOICES,",
          "477:                CMS_R_UNSUPPORTED_CONTENT_TYPE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:     case NID_id_smime_ct_authEnvelopedData:",
          "490:         if (cms->d.authEnvelopedData->originatorInfo == NULL)",
          "491:             return NULL;",
          "492:         return &cms->d.authEnvelopedData->originatorInfo->certificates;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "551:             return NULL;",
          "552:         return &cms->d.envelopedData->originatorInfo->crls;",
          "554:     default:",
          "555:         CMSerr(CMS_F_CMS_GET0_REVOCATION_CHOICES,",
          "556:                CMS_R_UNSUPPORTED_CONTENT_TYPE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:     case NID_id_smime_ct_authEnvelopedData:",
          "574:         if (cms->d.authEnvelopedData->originatorInfo == NULL)",
          "575:             return NULL;",
          "576:         return &cms->d.authEnvelopedData->originatorInfo->crls;",
          "",
          "---------------"
        ],
        "crypto/cms/cms_local.h||crypto/cms/cms_local.h": [
          "File: crypto/cms/cms_local.h -> crypto/cms/cms_local.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: typedef struct CMS_DigestedData_st CMS_DigestedData;",
          "30: typedef struct CMS_EncryptedData_st CMS_EncryptedData;",
          "31: typedef struct CMS_AuthenticatedData_st CMS_AuthenticatedData;",
          "32: typedef struct CMS_CompressedData_st CMS_CompressedData;",
          "33: typedef struct CMS_OtherCertificateFormat_st CMS_OtherCertificateFormat;",
          "34: typedef struct CMS_KeyTransRecipientInfo_st CMS_KeyTransRecipientInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: typedef struct CMS_AuthEnvelopedData_st CMS_AuthEnvelopedData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:         CMS_EnvelopedData *envelopedData;",
          "59:         CMS_DigestedData *digestedData;",
          "60:         CMS_EncryptedData *encryptedData;",
          "61:         CMS_AuthenticatedData *authenticatedData;",
          "62:         CMS_CompressedData *compressedData;",
          "63:         ASN1_TYPE *other;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:         CMS_AuthEnvelopedData *authEnvelopedData;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:     ASN1_OBJECT *contentType;",
          "128:     X509_ALGOR *contentEncryptionAlgorithm;",
          "129:     ASN1_OCTET_STRING *encryptedContent;",
          "131:     const EVP_CIPHER *cipher;",
          "132:     unsigned char *key;",
          "133:     size_t keylen;",
          "135:     int debug;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     unsigned char *tag;",
          "137:     size_t taglen;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:     STACK_OF(X509_ATTRIBUTE) *unauthAttrs;",
          "270: };",
          "272: struct CMS_CompressedData_st {",
          "273:     int32_t version;",
          "274:     X509_ALGOR *compressionAlgorithm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276: struct CMS_AuthEnvelopedData_st {",
          "277:     int32_t version;",
          "278:     CMS_OriginatorInfo *originatorInfo;",
          "279:     STACK_OF(CMS_RecipientInfo) *recipientInfos;",
          "280:     CMS_EncryptedContentInfo *authEncryptedContentInfo;",
          "281:     STACK_OF(X509_ATTRIBUTE) *authAttrs;",
          "282:     ASN1_OCTET_STRING *mac;",
          "283:     STACK_OF(X509_ATTRIBUTE) *unauthAttrs;",
          "284: };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "426: BIO *cms_EnvelopedData_init_bio(CMS_ContentInfo *cms);",
          "427: int cms_EnvelopedData_final(CMS_ContentInfo *cms, BIO *chain);",
          "428: CMS_EnvelopedData *cms_get0_enveloped(CMS_ContentInfo *cms);",
          "431: int cms_env_asn1_ctrl(CMS_RecipientInfo *ri, int cmd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: BIO *cms_AuthEnvelopedData_init_bio(CMS_ContentInfo *cms);",
          "443: int cms_AuthEnvelopedData_final(CMS_ContentInfo *cms, BIO *cmsbio);",
          "445: CMS_AuthEnvelopedData *cms_get0_auth_enveloped(CMS_ContentInfo *cms);",
          "446: CMS_EncryptedContentInfo* cms_get0_env_enc_content(const CMS_ContentInfo *cms);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "457: DECLARE_ASN1_ITEM(CMS_DigestedData)",
          "458: DECLARE_ASN1_ITEM(CMS_EncryptedData)",
          "459: DECLARE_ASN1_ITEM(CMS_EnvelopedData)",
          "460: DECLARE_ASN1_ITEM(CMS_KEKRecipientInfo)",
          "461: DECLARE_ASN1_ITEM(CMS_KeyAgreeRecipientInfo)",
          "462: DECLARE_ASN1_ITEM(CMS_KeyTransRecipientInfo)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478: DECLARE_ASN1_ITEM(CMS_AuthEnvelopedData)",
          "",
          "---------------"
        ],
        "crypto/cms/cms_pwri.c||crypto/cms/cms_pwri.c": [
          "File: crypto/cms/cms_pwri.c -> crypto/cms/cms_pwri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:                                                ossl_ssize_t passlen,",
          "45:                                                const EVP_CIPHER *kekciph)",
          "46: {",
          "47:     CMS_RecipientInfo *ri = NULL;",
          "49:     CMS_PasswordRecipientInfo *pwri;",
          "50:     EVP_CIPHER_CTX *ctx = NULL;",
          "51:     X509_ALGOR *encalg = NULL;",
          "",
          "[Removed Lines]",
          "48:     CMS_EnvelopedData *env;",
          "",
          "[Added Lines]",
          "47:     STACK_OF(CMS_RecipientInfo) *ris;",
          "49:     CMS_EncryptedContentInfo *ec;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     int ivlen;",
          "54:     const CMS_CTX *cms_ctx = cms_get0_cmsctx(cms);",
          "58:         return NULL;",
          "60:     if (wrap_nid <= 0)",
          "",
          "[Removed Lines]",
          "56:     env = cms_get0_enveloped(cms);",
          "57:     if (!env)",
          "",
          "[Added Lines]",
          "57:     ec = cms_get0_env_enc_content(cms);",
          "58:     if (ec == NULL)",
          "59:         return NULL;",
          "60:     ris = CMS_get0_RecipientInfos(cms);",
          "61:     if (ris == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     if (kekciph == NULL)",
          "70:     if (kekciph == NULL) {",
          "71:         CMSerr(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD, CMS_R_NO_CIPHER);",
          "",
          "[Removed Lines]",
          "68:         kekciph = env->encryptedContentInfo->cipher;",
          "",
          "[Added Lines]",
          "72:         kekciph = ec->cipher;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:     CMS_RecipientInfo_set0_password(ri, pass, passlen);",
          "157:     pwri->version = 0;",
          "160:         goto merr;",
          "162:     return ri;",
          "",
          "[Removed Lines]",
          "159:     if (!sk_CMS_RecipientInfo_push(env->recipientInfos, ri))",
          "",
          "[Added Lines]",
          "163:     if (!sk_CMS_RecipientInfo_push(ris, ri))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:     size_t keylen;",
          "293:     const CMS_CTX *cms_ctx = cms_get0_cmsctx(cms);",
          "297:     pwri = ri->d.pwri;",
          "",
          "[Removed Lines]",
          "295:     ec = cms->d.envelopedData->encryptedContentInfo;",
          "",
          "[Added Lines]",
          "299:     ec = cms_get0_env_enc_content(cms);",
          "",
          "---------------"
        ],
        "crypto/cms/cms_smime.c||crypto/cms/cms_smime.c": [
          "File: crypto/cms/cms_smime.c -> crypto/cms/cms_smime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "638:     int i;",
          "639:     X509 *recip;",
          "642:     if (cms == NULL)",
          "643:         goto merr;",
          "644:     for (i = 0; i < sk_X509_num(certs); i++) {",
          "",
          "[Removed Lines]",
          "641:     cms = CMS_EnvelopedData_create_with_libctx(cipher, libctx, propq);",
          "",
          "[Added Lines]",
          "642:     cms = (EVP_CIPHER_flags(cipher) & EVP_CIPH_FLAG_AEAD_CIPHER)",
          "643:           ? CMS_AuthEnvelopedData_create_with_libctx(cipher, libctx, propq)",
          "644:           : CMS_EnvelopedData_create_with_libctx(cipher, libctx, propq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "712:     ris = CMS_get0_RecipientInfos(cms);",
          "713:     if (ris != NULL)",
          "716:     cms_pkey_ri_type = cms_pkey_get_ri_type(pk);",
          "717:     if (cms_pkey_ri_type == CMS_RECIPINFO_NONE) {",
          "",
          "[Removed Lines]",
          "714:         debug = cms->d.envelopedData->encryptedContentInfo->debug;",
          "",
          "[Added Lines]",
          "717:         debug = cms_get0_env_enc_content(cms)->debug;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "848:     int r;",
          "849:     BIO *cont;",
          "852:         CMSerr(CMS_F_CMS_DECRYPT, CMS_R_TYPE_NOT_ENVELOPED_DATA);",
          "853:         return 0;",
          "854:     }",
          "855:     if (dcont == NULL && !check_content(cms))",
          "856:         return 0;",
          "857:     if (flags & CMS_DEBUG_DECRYPT)",
          "859:     else",
          "861:     if (cert == NULL)",
          "863:     else",
          "865:     if (pk == NULL && cert == NULL && dcont == NULL && out == NULL)",
          "866:         return 1;",
          "867:     if (pk != NULL && !CMS_decrypt_set1_pkey(cms, pk, cert))",
          "",
          "[Removed Lines]",
          "851:     if (OBJ_obj2nid(CMS_get0_type(cms)) != NID_pkcs7_enveloped) {",
          "858:         cms->d.envelopedData->encryptedContentInfo->debug = 1;",
          "860:         cms->d.envelopedData->encryptedContentInfo->debug = 0;",
          "862:         cms->d.envelopedData->encryptedContentInfo->havenocert = 1;",
          "864:         cms->d.envelopedData->encryptedContentInfo->havenocert = 0;",
          "",
          "[Added Lines]",
          "854:     int nid = OBJ_obj2nid(CMS_get0_type(cms));",
          "856:     if (nid != NID_pkcs7_enveloped",
          "857:             && nid != NID_id_smime_ct_authEnvelopedData) {",
          "864:         cms_get0_env_enc_content(cms)->debug = 1;",
          "866:         cms_get0_env_enc_content(cms)->debug = 0;",
          "868:         cms_get0_env_enc_content(cms)->havenocert = 1;",
          "870:         cms_get0_env_enc_content(cms)->havenocert = 0;",
          "",
          "---------------"
        ],
        "crypto/evp/evp_lib.c||crypto/evp/evp_lib.c": [
          "File: crypto/evp/evp_lib.c -> crypto/evp/evp_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <openssl/dh.h>",
          "23: #include <openssl/ec.h>",
          "24: #include \"crypto/evp.h\"",
          "25: #include \"internal/provider.h\"",
          "26: #include \"evp_local.h\"",
          "28: #if !defined(FIPS_MODULE)",
          "29: int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)",
          "30: {",
          "32:     const EVP_CIPHER *cipher = c->cipher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"crypto/asn1.h\"",
          "31: {",
          "32:     return evp_cipher_param_to_asn1_ex(c, type, NULL);",
          "33: }",
          "35: int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)",
          "36: {",
          "37:     return evp_cipher_asn1_to_param_ex(c, type, NULL);",
          "38: }",
          "40: int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *ctx, ASN1_TYPE *type)",
          "41: {",
          "42:     int i = 0;",
          "43:     unsigned int l;",
          "45:     if (type != NULL) {",
          "46:         unsigned char iv[EVP_MAX_IV_LENGTH];",
          "48:         l = EVP_CIPHER_CTX_iv_length(ctx);",
          "49:         if (!ossl_assert(l <= sizeof(iv)))",
          "50:             return -1;",
          "51:         i = ASN1_TYPE_get_octetstring(type, iv, l);",
          "52:         if (i != (int)l)",
          "53:             return -1;",
          "55:         if (!EVP_CipherInit_ex(ctx, NULL, NULL, NULL, iv, -1))",
          "56:             return -1;",
          "57:     }",
          "58:     return i;",
          "59: }",
          "61: int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)",
          "62: {",
          "63:     int i = 0;",
          "64:     unsigned int j;",
          "65:     unsigned char *oiv = NULL;",
          "67:     if (type != NULL) {",
          "68:         oiv = (unsigned char *)EVP_CIPHER_CTX_original_iv(c);",
          "69:         j = EVP_CIPHER_CTX_iv_length(c);",
          "70:         OPENSSL_assert(j <= sizeof(c->iv));",
          "71:         i = ASN1_TYPE_set_octetstring(type, oiv, j);",
          "72:     }",
          "73:     return i;",
          "74: }",
          "76: int evp_cipher_param_to_asn1_ex(EVP_CIPHER_CTX *c, ASN1_TYPE *type,",
          "77:                                 evp_cipher_aead_asn1_params *asn1_params)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             break;",
          "60:         case EVP_CIPH_GCM_MODE:",
          "61:         case EVP_CIPH_CCM_MODE:",
          "62:         case EVP_CIPH_XTS_MODE:",
          "63:         case EVP_CIPH_OCB_MODE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:             ret = evp_cipher_set_asn1_aead_params(c, type, asn1_params);",
          "110:             break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:  err:",
          "106:     if (ret == -2)",
          "108:     else if (ret <= 0)",
          "110:     if (ret < -1)",
          "111:         ret = -1;",
          "112:     return ret;",
          "113: }",
          "116: {",
          "118:     const EVP_CIPHER *cipher = c->cipher;",
          "",
          "[Removed Lines]",
          "107:         EVPerr(EVP_F_EVP_CIPHER_PARAM_TO_ASN1, ASN1_R_UNSUPPORTED_CIPHER);",
          "109:         EVPerr(EVP_F_EVP_CIPHER_PARAM_TO_ASN1, EVP_R_CIPHER_PARAMETER_ERROR);",
          "115: int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)",
          "",
          "[Added Lines]",
          "158:         EVPerr(0, EVP_R_UNSUPPORTED_CIPHER);",
          "160:         EVPerr(0, EVP_R_CIPHER_PARAMETER_ERROR);",
          "166: int evp_cipher_asn1_to_param_ex(EVP_CIPHER_CTX *c, ASN1_TYPE *type,",
          "167:                                 evp_cipher_aead_asn1_params *asn1_params)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:             break;",
          "144:         case EVP_CIPH_GCM_MODE:",
          "145:         case EVP_CIPH_CCM_MODE:",
          "146:         case EVP_CIPH_XTS_MODE:",
          "147:         case EVP_CIPH_OCB_MODE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:             ret = evp_cipher_get_asn1_aead_params(c, type, asn1_params);",
          "198:             break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170:     }",
          "172:     if (ret == -2)",
          "174:     else if (ret <= 0)",
          "176:     if (ret < -1)",
          "177:         ret = -1;",
          "178:     return ret;",
          "179: }",
          "182: {",
          "183:     int i = 0;",
          "199:     return i;",
          "200: }",
          "203: {",
          "214: }",
          "",
          "[Removed Lines]",
          "173:         EVPerr(EVP_F_EVP_CIPHER_ASN1_TO_PARAM, EVP_R_UNSUPPORTED_CIPHER);",
          "175:         EVPerr(EVP_F_EVP_CIPHER_ASN1_TO_PARAM, EVP_R_CIPHER_PARAMETER_ERROR);",
          "181: int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *ctx, ASN1_TYPE *type)",
          "184:     unsigned int l;",
          "186:     if (type != NULL) {",
          "187:         unsigned char iv[EVP_MAX_IV_LENGTH];",
          "189:         l = EVP_CIPHER_CTX_iv_length(ctx);",
          "190:         if (!ossl_assert(l <= sizeof(iv)))",
          "191:             return -1;",
          "192:         i = ASN1_TYPE_get_octetstring(type, iv, l);",
          "193:         if (i != (int)l)",
          "194:             return -1;",
          "196:         if (!EVP_CipherInit_ex(ctx, NULL, NULL, NULL, iv, -1))",
          "197:             return -1;",
          "198:     }",
          "202: int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)",
          "204:     int i = 0;",
          "205:     unsigned int j;",
          "206:     unsigned char oiv[EVP_MAX_IV_LENGTH];",
          "208:     if (type != NULL && EVP_CIPHER_CTX_get_iv(c, oiv, sizeof(oiv))) {",
          "209:         j = EVP_CIPHER_CTX_iv_length(c);",
          "210:         OPENSSL_assert(j <= sizeof(c->iv));",
          "211:         i = ASN1_TYPE_set_octetstring(type, oiv, j);",
          "212:     }",
          "213:     return i;",
          "",
          "[Added Lines]",
          "228:         EVPerr(0, EVP_R_UNSUPPORTED_CIPHER);",
          "230:         EVPerr(0, EVP_R_CIPHER_PARAMETER_ERROR);",
          "236: int evp_cipher_get_asn1_aead_params(EVP_CIPHER_CTX *c, ASN1_TYPE *type,",
          "237:                                     evp_cipher_aead_asn1_params *asn1_params)",
          "240:     long tl;",
          "241:     unsigned char iv[EVP_MAX_IV_LENGTH];",
          "243:     if (type == NULL || asn1_params == NULL)",
          "244:         return 0;",
          "246:     i = asn1_type_get_octetstring_int(type, &tl, NULL, EVP_MAX_IV_LENGTH);",
          "247:     if (i <= 0)",
          "248:         return -1;",
          "249:     asn1_type_get_octetstring_int(type, &tl, iv, i);",
          "251:     memcpy(asn1_params->iv, iv, i);",
          "252:     asn1_params->iv_len = i;",
          "257: int evp_cipher_set_asn1_aead_params(EVP_CIPHER_CTX *c, ASN1_TYPE *type,",
          "258:                                     evp_cipher_aead_asn1_params *asn1_params)",
          "260:     if (type == NULL || asn1_params == NULL)",
          "261:         return 0;",
          "263:     return asn1_type_set_octetstring_int(type, asn1_params->tag_len,",
          "264:                                          asn1_params->iv, asn1_params->iv_len);",
          "",
          "---------------"
        ],
        "crypto/evp/evp_local.h||crypto/evp/evp_local.h": [
          "File: crypto/evp/evp_local.h -> crypto/evp/evp_local.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "240: EVP_MD *evp_md_new(void);",
          "241: EVP_CIPHER *evp_cipher_new(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: int evp_cipher_get_asn1_aead_params(EVP_CIPHER_CTX *c, ASN1_TYPE *type,",
          "244:                                     evp_cipher_aead_asn1_params *asn1_params);",
          "245: int evp_cipher_set_asn1_aead_params(EVP_CIPHER_CTX *c, ASN1_TYPE *type,",
          "246:                                     evp_cipher_aead_asn1_params *asn1_params);",
          "",
          "---------------"
        ],
        "include/crypto/asn1.h||include/crypto/asn1.h": [
          "File: include/crypto/asn1.h -> include/crypto/asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <openssl/asn1.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     unsigned long oid_flags;",
          "125:     unsigned long str_flags;",
          "126: } /* ASN1_PCTX */ ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: int asn1_type_set_octetstring_int(ASN1_TYPE *a, long num,",
          "133:                                   unsigned char *data, int len);",
          "134: int asn1_type_get_octetstring_int(const ASN1_TYPE *a, long *num,",
          "135:                                   unsigned char *data, int max_len);",
          "",
          "---------------"
        ],
        "include/crypto/evp.h||include/crypto/evp.h": [
          "File: include/crypto/evp.h -> include/crypto/evp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:                              (fl)|EVP_CIPH_FLAG_DEFAULT_ASN1, \\",
          "512:                              cipher##_init_key, NULL, NULL, NULL, NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514: typedef struct {",
          "515:     unsigned char iv[EVP_MAX_IV_LENGTH];",
          "516:     unsigned int iv_len;",
          "517:     unsigned int tag_len;",
          "518: } evp_cipher_aead_asn1_params;",
          "520: int evp_cipher_param_to_asn1_ex(EVP_CIPHER_CTX *c, ASN1_TYPE *type,",
          "521:                                 evp_cipher_aead_asn1_params *params);",
          "523: int evp_cipher_asn1_to_param_ex(EVP_CIPHER_CTX *c, ASN1_TYPE *type,",
          "524:                                 evp_cipher_aead_asn1_params *params);",
          "",
          "---------------"
        ],
        "include/openssl/asn1err.h||include/openssl/asn1err.h": [
          "File: include/openssl/asn1err.h -> include/openssl/asn1err.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #  define ASN1_F_ASN1_TIME_ADJ                             0",
          "83: #  define ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING             0",
          "84: #  define ASN1_F_ASN1_TYPE_GET_OCTETSTRING                 0",
          "85: #  define ASN1_F_ASN1_UTCTIME_ADJ                          0",
          "86: #  define ASN1_F_ASN1_VERIFY                               0",
          "87: #  define ASN1_F_B64_READ_ASN1                             0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: #  define ASN1_F_ASN1_TYPE_GET_OCTETSTRING_INT             0",
          "",
          "---------------"
        ],
        "include/openssl/cms.h||include/openssl/cms.h": [
          "File: include/openssl/cms.h -> include/openssl/cms.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms);",
          "190: int CMS_RecipientInfo_type(CMS_RecipientInfo *ri);",
          "191: EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri);",
          "192: CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher);",
          "193: CMS_ContentInfo *CMS_EnvelopedData_create_with_libctx(const EVP_CIPHER *cipher,",
          "194:                                                       OPENSSL_CTX *ctx,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: CMS_ContentInfo *CMS_AuthEnvelopedData_create(const EVP_CIPHER *cipher);",
          "193: CMS_ContentInfo *",
          "194: CMS_AuthEnvelopedData_create_with_libctx(const EVP_CIPHER *cipher,",
          "195:                                          OPENSSL_CTX *ctx,",
          "196:                                          const char *propq);",
          "",
          "---------------"
        ],
        "include/openssl/cmserr.h||include/openssl/cmserr.h": [
          "File: include/openssl/cmserr.h -> include/openssl/cmserr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: #  define CMS_R_CERTIFICATE_ALREADY_PRESENT                175",
          "132: #  define CMS_R_CERTIFICATE_HAS_NO_KEYID                   160",
          "133: #  define CMS_R_CERTIFICATE_VERIFY_ERROR                   100",
          "134: #  define CMS_R_CIPHER_INITIALISATION_ERROR                101",
          "135: #  define CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR      102",
          "136: #  define CMS_R_CMS_DATAFINAL_ERROR                        103",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #  define CMS_R_CIPHER_AEAD_SET_TAG_ERROR                  184",
          "135: #  define CMS_R_CIPHER_GET_TAG                             185",
          "",
          "---------------"
        ],
        "test/cmsapitest.c||test/cmsapitest.c": [
          "File: test/cmsapitest.c -> test/cmsapitest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: static X509 *cert = NULL;",
          "22: static EVP_PKEY *privkey = NULL;",
          "25: {",
          "26:     int testresult = 0;",
          "27:     STACK_OF(X509) *certstack = sk_X509_new_null();",
          "",
          "[Removed Lines]",
          "24: static int test_encrypt_decrypt(void)",
          "",
          "[Added Lines]",
          "24: static int test_encrypt_decrypt(const EVP_CIPHER *cipher)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     if (!TEST_int_gt(sk_X509_push(certstack, cert), 0))",
          "38:         goto end;",
          "41:     if (!TEST_ptr(content))",
          "42:         goto end;",
          "",
          "[Removed Lines]",
          "40:     content = CMS_encrypt(certstack, msgbio, EVP_aes_128_cbc(), CMS_TEXT);",
          "",
          "[Added Lines]",
          "40:     content = CMS_encrypt(certstack, msgbio, cipher, CMS_TEXT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:     return testresult;",
          "61: }",
          "63: OPT_TEST_DECLARE_USAGE(\"certfile privkeyfile\\n\")",
          "65: int setup_tests(void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: static int test_encrypt_decrypt_aes_cbc(void)",
          "64: {",
          "65:     return test_encrypt_decrypt(EVP_aes_128_cbc());",
          "66: }",
          "68: static int test_encrypt_decrypt_aes_128_gcm(void)",
          "69: {",
          "70:     return test_encrypt_decrypt(EVP_aes_128_gcm());",
          "71: }",
          "73: static int test_encrypt_decrypt_aes_192_gcm(void)",
          "74: {",
          "75:     return test_encrypt_decrypt(EVP_aes_192_gcm());",
          "76: }",
          "78: static int test_encrypt_decrypt_aes_256_gcm(void)",
          "79: {",
          "80:     return test_encrypt_decrypt(EVP_aes_256_gcm());",
          "81: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:     }",
          "100:     BIO_free(privkeybio);",
          "104:     return 1;",
          "105: }",
          "",
          "[Removed Lines]",
          "102:     ADD_TEST(test_encrypt_decrypt);",
          "",
          "[Added Lines]",
          "122:     ADD_TEST(test_encrypt_decrypt_aes_cbc);",
          "123:     ADD_TEST(test_encrypt_decrypt_aes_128_gcm);",
          "124:     ADD_TEST(test_encrypt_decrypt_aes_192_gcm);",
          "125:     ADD_TEST(test_encrypt_decrypt_aes_256_gcm);",
          "",
          "---------------"
        ],
        "test/drbgtest.c||test/drbgtest.c": [
          "File: test/drbgtest.c -> test/drbgtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <openssl/aes.h>",
          "24: #include \"../crypto/rand/rand_local.h\"",
          "25: #include \"../include/crypto/rand.h\"",
          "26: #include \"../providers/implementations/rands/drbg_local.h\"",
          "27: #include \"../crypto/evp/evp_local.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include \"../include/crypto/evp.h\"",
          "",
          "---------------"
        ],
        "test/recipes/80-test_cms.t||test/recipes/80-test_cms.t": [
          "File: test/recipes/80-test_cms.t -> test/recipes/80-test_cms.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:       \\&final_compare",
          "299:     ],",
          "302:       [ \"{cmd1}\", @prov, \"-encrypt\", \"-in\", $smcont, \"-outform\", \"PEM\", \"-aes128\",",
          "303:         \"-stream\", \"-out\", \"{output}.cms\",",
          "304:         \"-secretkey\", \"000102030405060708090A0B0C0D0E0F\",",
          "",
          "[Removed Lines]",
          "301:     [ \"enveloped content test streaming PEM format, KEK\",",
          "",
          "[Added Lines]",
          "301:     [ \"enveloped content test streaming PEM format, AES-256-CBC cipher, KEK\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:       \\&final_compare",
          "311:     ],",
          "313:     [ \"enveloped content test streaming PEM format, KEK, key only\",",
          "314:       [ \"{cmd1}\", @prov, \"-encrypt\", \"-in\", $smcont, \"-outform\", \"PEM\", \"-aes128\",",
          "315:         \"-stream\", \"-out\", \"{output}.cms\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:     [ \"enveloped content test streaming PEM format, AES-256-GCM cipher, KEK\",",
          "314:       [ \"{cmd1}\", @prov, \"-encrypt\", \"-in\", $smcont, \"-outform\", \"PEM\", \"-aes-128-gcm\",",
          "315:         \"-stream\", \"-out\", \"{output}.cms\",",
          "316:         \"-secretkey\", \"000102030405060708090A0B0C0D0E0F\",",
          "317:         \"-secretkeyid\", \"C0FEE0\" ],",
          "318:       [ \"{cmd2}\", \"-decrypt\", \"-in\", \"{output}.cms\", \"-out\", \"{output}.txt\",",
          "319:         \"-inform\", \"PEM\",",
          "320:         \"-secretkey\", \"000102030405060708090A0B0C0D0E0F\",",
          "321:         \"-secretkeyid\", \"C0FEE0\" ],",
          "322:       \\&final_compare",
          "323:     ],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "560:       \\&final_compare",
          "561:     ],",
          "564:       [ \"{cmd1}\", @prov, \"-encrypt\", \"-in\", $smcont,",
          "565:         \"-stream\", \"-out\", \"{output}.cms\",",
          "566:         \"-recip\", catfile($smdir, \"smec1.pem\"), \"-aes128\",",
          "",
          "[Removed Lines]",
          "563:     [ \"enveloped content test streaming S/MIME format, ECDH, AES128, SHA256 KDF\",",
          "",
          "[Added Lines]",
          "574:     [ \"enveloped content test streaming S/MIME format, ECDH, AES-128-CBC, SHA256 KDF\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "570:       \\&final_compare",
          "571:     ],",
          "573:     [ \"enveloped content test streaming S/MIME format, ECDH, K-283, cofactor DH\",",
          "574:       [ \"{cmd1}\", @prov, \"-encrypt\", \"-in\", $smcont,",
          "575:         \"-stream\", \"-out\", \"{output}.cms\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584:     [ \"enveloped content test streaming S/MIME format, ECDH, AES-128-GCM cipher, SHA256 KDF\",",
          "585:       [ \"{cmd1}\", @prov, \"-encrypt\", \"-in\", $smcont,",
          "586:         \"-stream\", \"-out\", \"{output}.cms\",",
          "587:         \"-recip\", catfile($smdir, \"smec1.pem\"), \"-aes-128-gcm\", \"-keyopt\", \"ecdh_kdf_md:sha256\" ],",
          "588:       [ \"{cmd2}\", \"-decrypt\", \"-recip\", catfile($smdir, \"smec1.pem\"),",
          "589:        \"-in\", \"{output}.cms\", \"-out\", \"{output}.txt\" ],",
          "590:       \\&final_compare",
          "591:     ],",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "5299: EVP_PKEY_CTX_set1_id                    ? 3_0_0 EXIST::FUNCTION:",
          "5300: EVP_PKEY_CTX_get1_id                    ? 3_0_0 EXIST::FUNCTION:",
          "5301: EVP_PKEY_CTX_get1_id_len                ? 3_0_0 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5302: CMS_AuthEnvelopedData_create            ? 3_0_0 EXIST::FUNCTION:CMS",
          "5303: CMS_AuthEnvelopedData_create_with_libctx ? 3_0_0 EXIST::FUNCTION:CMS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "835b2900168bfd1cc471bf1d798d3b5b7219cd4d",
      "candidate_info": {
        "commit_hash": "835b2900168bfd1cc471bf1d798d3b5b7219cd4d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/835b2900168bfd1cc471bf1d798d3b5b7219cd4d",
        "files": [
          "crypto/pkcs7/pk7_doit.c"
        ],
        "message": "Fix PKCS#7 so that it still works with non fetchable cipher algorithms.\n\nFixes #12697\n\nReviewed-by: Tomas Mraz <tmraz@fedoraproject.org>\nReviewed-by: Shane Lontis <shane.lontis@oracle.com>\n(Merged from https://github.com/openssl/openssl/pull/12740)",
        "before_after_code_files": [
          "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ],
          "candidate": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
          "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     BIO *out = NULL, *btmp = NULL;",
          "220:     X509_ALGOR *xa = NULL;",
          "221:     EVP_CIPHER *fetched_cipher = NULL;",
          "222:     const EVP_CIPHER *evp_cipher = NULL;",
          "223:     STACK_OF(X509_ALGOR) *md_sk = NULL;",
          "224:     STACK_OF(PKCS7_RECIP_INFO) *rsk = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:     const EVP_CIPHER *cipher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311:             if (RAND_bytes_ex(p7_ctx->libctx, iv, ivlen) <= 0)",
          "312:                 goto err;",
          "314:         fetched_cipher = EVP_CIPHER_fetch(p7_ctx->libctx,",
          "315:                                           EVP_CIPHER_name(evp_cipher),",
          "316:                                           p7_ctx->propq);",
          "318:             goto err;",
          "321:             goto err;",
          "323:         EVP_CIPHER_free(fetched_cipher);",
          "",
          "[Removed Lines]",
          "317:         if (fetched_cipher == NULL)",
          "320:         if (EVP_CipherInit_ex(ctx, fetched_cipher, NULL, NULL, NULL, 1) <= 0)",
          "",
          "[Added Lines]",
          "315:         (void)ERR_set_mark();",
          "319:         if (fetched_cipher != NULL)",
          "320:             cipher = fetched_cipher;",
          "321:         else",
          "322:             cipher = evp_cipher;",
          "324:         if (cipher == NULL) {",
          "325:             (void)ERR_clear_last_mark();",
          "327:         }",
          "328:         (void)ERR_pop_to_mark();",
          "330:         if (EVP_CipherInit_ex(ctx, cipher, NULL, NULL, NULL, 1) <= 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:     EVP_MD *evp_md = NULL;",
          "402:     const EVP_MD *md;",
          "403:     EVP_CIPHER *evp_cipher = NULL;",
          "404:     EVP_CIPHER_CTX *evp_ctx = NULL;",
          "405:     X509_ALGOR *enc_alg = NULL;",
          "406:     STACK_OF(X509_ALGOR) *md_sk = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414:     const EVP_CIPHER *cipher = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "450:         enc_alg = p7->d.signed_and_enveloped->enc_data->algorithm;",
          "452:         name = OBJ_nid2sn(OBJ_obj2nid(enc_alg->algorithm));",
          "453:         evp_cipher = EVP_CIPHER_fetch(p7_ctx->libctx, name, p7_ctx->propq);",
          "455:             PKCS7err(PKCS7_F_PKCS7_DATADECODE,",
          "456:                      PKCS7_R_UNSUPPORTED_CIPHER_TYPE);",
          "457:             goto err;",
          "458:         }",
          "459:         break;",
          "460:     case NID_pkcs7_enveloped:",
          "461:         rsk = p7->d.enveloped->recipientinfo;",
          "",
          "[Removed Lines]",
          "454:         if (evp_cipher == NULL) {",
          "",
          "[Added Lines]",
          "465:         (void)ERR_set_mark();",
          "467:         if (evp_cipher != NULL)",
          "468:             cipher = evp_cipher;",
          "469:         else",
          "470:             cipher = EVP_get_cipherbyname(name);",
          "472:         if (cipher == NULL) {",
          "473:             (void)ERR_clear_last_mark();",
          "478:         (void)ERR_pop_to_mark();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "464:         data_body = p7->d.enveloped->enc_data->enc_data;",
          "465:         name = OBJ_nid2sn(OBJ_obj2nid(enc_alg->algorithm));",
          "466:         evp_cipher = EVP_CIPHER_fetch(p7_ctx->libctx, name, p7_ctx->propq);",
          "468:             PKCS7err(PKCS7_F_PKCS7_DATADECODE,",
          "469:                      PKCS7_R_UNSUPPORTED_CIPHER_TYPE);",
          "470:             goto err;",
          "471:         }",
          "472:         break;",
          "473:     default:",
          "474:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_UNSUPPORTED_CONTENT_TYPE);",
          "",
          "[Removed Lines]",
          "467:         if (evp_cipher == NULL) {",
          "",
          "[Added Lines]",
          "487:         (void)ERR_set_mark();",
          "489:         if (evp_cipher != NULL)",
          "490:             cipher = evp_cipher;",
          "491:         else",
          "492:             cipher = EVP_get_cipherbyname(name);",
          "494:         if (cipher == NULL) {",
          "495:             (void)ERR_clear_last_mark();",
          "500:         (void)ERR_pop_to_mark();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "517:         }",
          "518:     }",
          "521:         if ((etmp = BIO_new(BIO_f_cipher())) == NULL) {",
          "522:             PKCS7err(PKCS7_F_PKCS7_DATADECODE, ERR_R_BIO_LIB);",
          "523:             goto err;",
          "",
          "[Removed Lines]",
          "520:     if (evp_cipher != NULL) {",
          "",
          "[Added Lines]",
          "549:     if (cipher != NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "557:                 ri = sk_PKCS7_RECIP_INFO_value(rsk, i);",
          "558:                 ri->ctx = p7_ctx;",
          "559:                 if (pkcs7_decrypt_rinfo(&ek, &eklen, ri, pkey,",
          "561:                     goto err;",
          "562:                 ERR_clear_error();",
          "563:             }",
          "",
          "[Removed Lines]",
          "560:                         EVP_CIPHER_key_length(evp_cipher)) < 0)",
          "",
          "[Added Lines]",
          "589:                         EVP_CIPHER_key_length(cipher)) < 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "572:         evp_ctx = NULL;",
          "573:         BIO_get_cipher_ctx(etmp, &evp_ctx);",
          "575:             goto err;",
          "576:         if (EVP_CIPHER_asn1_to_param(evp_ctx, enc_alg->parameter) < 0)",
          "577:             goto err;",
          "",
          "[Removed Lines]",
          "574:         if (EVP_CipherInit_ex(evp_ctx, evp_cipher, NULL, NULL, NULL, 0) <= 0)",
          "",
          "[Added Lines]",
          "603:         if (EVP_CipherInit_ex(evp_ctx, cipher, NULL, NULL, NULL, 0) <= 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}