{
  "cve_id": "CVE-2022-0523",
  "cve_desc": "Use After Free in GitHub repository radareorg/radare2 prior to 5.6.2.",
  "repo": "radareorg/radare2",
  "patch_hash": "35482cb760db10f87a62569e2f8872dbd95e9269",
  "patch_info": {
    "commit_hash": "35482cb760db10f87a62569e2f8872dbd95e9269",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/35482cb760db10f87a62569e2f8872dbd95e9269",
    "files": [
      "libr/bin/format/pyc/marshal.c"
    ],
    "message": "Fix UAF in pyc parser ##crash\n\n* Reported by Cen Zhang via huntr.dev\n* Reproducer: bins/fuzzed/harep2.pyc",
    "before_after_code_files": [
      "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c"
    ]
  },
  "patch_diff": {
    "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c": [
      "File: libr/bin/format/pyc/marshal.c -> libr/bin/format/pyc/marshal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: #define if_true_return(cond,ret) if(cond){return(ret);}",
      "17: extern RList *interned_table;",
      "",
      "[Removed Lines]",
      "12: static ut32 magic_int;",
      "13: static ut32 symbols_ordinal = 0;",
      "14: static RList *refs = NULL; // If you don't have a good reason, do not change this. And also checkout !refs in get_code_object()",
      "",
      "[Added Lines]",
      "12: static R_TH_LOCAL ut32 magic_int;",
      "13: static R_TH_LOCAL ut32 symbols_ordinal = 0;",
      "14: static R_TH_LOCAL RList *refs = NULL; // If you don't have a good reason, do not change this. And also checkout !refs in get_code_object()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "500:  }",
      "501:  for (i = 0; i < size; i++) {",
      "502:   tmp = get_object (buffer);",
      "509:    free_object (tmp);",
      "510:    r_list_free (ret->data);",
      "511:    free (ret);",
      "512:    return NULL;",
      "",
      "[Removed Lines]",
      "503:   if (!tmp) {",
      "504:    r_list_free (ret->data);",
      "505:    R_FREE (ret);",
      "506:    return NULL;",
      "507:   }",
      "508:   if (!r_list_append (ret->data, tmp)) {",
      "",
      "[Added Lines]",
      "503:   if (!tmp || !r_list_append (ret->data, tmp)) {",
      "505:    ((RList*)ret->data)->free = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "535: }",
      "537: static pyc_object *get_tuple_object(RBuffer *buffer) {",
      "539:  bool error = false;",
      "543:  if (n > ST32_MAX) {",
      "544:   eprintf (\"bad marshal data (tuple size out of range)\\n\");",
      "545:   return NULL;",
      "",
      "[Removed Lines]",
      "538:  pyc_object *ret = NULL;",
      "540:  ut32 n = 0;",
      "542:  n = get_ut32 (buffer, &error);",
      "",
      "[Added Lines]",
      "534:  ut32 n = get_ut32 (buffer, &error);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "547:  if (error) {",
      "548:   return NULL;",
      "549:  }",
      "551:  if (ret) {",
      "552:   ret->type = TYPE_TUPLE;",
      "554:  }",
      "556: }",
      "558: static pyc_object *get_list_object(RBuffer *buffer) {",
      "559:  pyc_object *ret = NULL;",
      "560:  bool error = false;",
      "564:  if (n > ST32_MAX) {",
      "565:   eprintf (\"bad marshal data (list size out of range)\\n\");",
      "566:   return NULL;",
      "",
      "[Removed Lines]",
      "550:  ret = get_array_object_generic (buffer, n);",
      "553:   return ret;",
      "555:  return NULL;",
      "561:  ut32 n = 0;",
      "563:  n = get_ut32 (buffer, &error);",
      "",
      "[Added Lines]",
      "542:  pyc_object *ret = get_array_object_generic (buffer, n);",
      "546:  return ret;",
      "552:  ut32 n = get_ut32 (buffer, &error);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "616: }",
      "618: static pyc_object *get_set_object(RBuffer *buffer) {",
      "620:  bool error = false;",
      "621:  ut32 n = get_ut32 (buffer, &error);",
      "622:  if (n > ST32_MAX) {",
      "",
      "[Removed Lines]",
      "619:  pyc_object *ret = NULL;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "626:  if (error) {",
      "627:   return NULL;",
      "628:  }",
      "632:  }",
      "634:  return ret;",
      "635: }",
      "",
      "[Removed Lines]",
      "629:  ret = get_array_object_generic (buffer, n);",
      "630:  if (!ret) {",
      "631:   return NULL;",
      "633:  ret->type = TYPE_SET;",
      "",
      "[Added Lines]",
      "617:  pyc_object *ret = get_array_object_generic (buffer, n);",
      "618:  if (ret) {",
      "619:   ret->type = TYPE_SET;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7ffe8ecaf24fcb2ffb46db64b81449af3fde990b",
      "candidate_info": {
        "commit_hash": "7ffe8ecaf24fcb2ffb46db64b81449af3fde990b",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/7ffe8ecaf24fcb2ffb46db64b81449af3fde990b",
        "files": [
          "libr/bin/format/pyc/marshal.c"
        ],
        "message": "Fix #19443 - UAF in marshall null object ##crash",
        "before_after_code_files": [
          "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c"
          ],
          "candidate": [
            "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/pyc/marshal.c||libr/bin/format/pyc/marshal.c": [
          "File: libr/bin/format/pyc/marshal.c -> libr/bin/format/pyc/marshal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: static pyc_object *get_none_object(void) {",
          "91:  pyc_object *ret = R_NEW0 (pyc_object);",
          "99:  }",
          "100:  return ret;",
          "101: }",
          "",
          "[Removed Lines]",
          "92:  if (!ret) {",
          "93:   return NULL;",
          "94:  }",
          "95:  ret->type = TYPE_NONE;",
          "96:  ret->data = strdup (\"None\");",
          "97:  if (!ret->data) {",
          "98:   R_FREE (ret);",
          "",
          "[Added Lines]",
          "92:  if (ret) {",
          "93:   ret->type = TYPE_NONE;",
          "94:   ret->data = strdup (\"None\");",
          "95:   if (!ret->data) {",
          "96:    R_FREE (ret);",
          "97:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129: static pyc_object *get_int_object(RBuffer *buffer) {",
          "130:  bool error = false;",
          "133:  st32 i = get_st32 (buffer, &error);",
          "134:  if (error) {",
          "135:   return NULL;",
          "136:  }",
          "138:  if (!ret) {",
          "139:   return NULL;",
          "140:  }",
          "",
          "[Removed Lines]",
          "131:  pyc_object *ret = NULL;",
          "137:  ret = R_NEW0 (pyc_object);",
          "",
          "[Added Lines]",
          "135:  pyc_object *ret = R_NEW0 (pyc_object);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149: static pyc_object *get_int64_object(RBuffer *buffer) {",
          "150:  pyc_object *ret = NULL;",
          "151:  bool error = false;",
          "156:  if (error) {",
          "157:   return NULL;",
          "",
          "[Removed Lines]",
          "152:  st64 i;",
          "154:  i = get_st64 (buffer, &error);",
          "",
          "[Added Lines]",
          "150:  st64 i = get_st64 (buffer, &error);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:  if (ndigits == 0) {",
          "197:   ret->data = strdup (\"0x0\");",
          "198:  } else {",
          "199:   size = ndigits * 15;",
          "200:   size = (size - 1) / 4 + 1;",
          "201:   size += 3 + (neg? 1: 0);",
          "202:   hexstr = calloc (size, sizeof (char));",
          "203:   if (!hexstr) {",
          "204:    free (ret);",
          "205:    return NULL;",
          "206:   }",
          "209:   for (i = 0; i < ndigits; i++) {",
          "210:    n = get_ut16 (buffer, &error);",
          "",
          "[Removed Lines]",
          "207:   j = size - 1;",
          "",
          "[Added Lines]",
          "195:   if (ndigits > 10) {",
          "196:    return NULL;",
          "197:   }",
          "199:   if (size > 0) {",
          "200:    return NULL;",
          "201:   }",
          "204:   j = size - 1;",
          "205:   if (j < 1 || size < 1) {",
          "206:    return NULL;",
          "207:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "243: static pyc_object *get_stringref_object(RBuffer *buffer) {",
          "244:  pyc_object *ret = NULL;",
          "245:  bool error = false;",
          "249:  if (n >= r_list_length (interned_table)) {",
          "250:   eprintf (\"bad marshal data (string ref out of range)\");",
          "251:   return NULL;",
          "",
          "[Removed Lines]",
          "246:  ut32 n = 0;",
          "248:  n = get_st32 (buffer, &error);",
          "",
          "[Added Lines]",
          "251:  ut32 n = get_st32 (buffer, &error);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "579: }",
          "581: static pyc_object *get_dict_object(RBuffer *buffer) {",
          "587:  if (!ret) {",
          "588:   return NULL;",
          "589:  }",
          "",
          "[Removed Lines]",
          "582:  pyc_object *ret = NULL,",
          "586:  ret = R_NEW0 (pyc_object);",
          "",
          "[Added Lines]",
          "585:  pyc_object *key = NULL,",
          "588:  pyc_object *ret = R_NEW0 (pyc_object);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "621: static pyc_object *get_set_object(RBuffer *buffer) {",
          "622:  pyc_object *ret = NULL;",
          "623:  bool error = false;",
          "627:  if (n > ST32_MAX) {",
          "628:   eprintf (\"bad marshal data (set size out of range)\\n\");",
          "629:   return NULL;",
          "",
          "[Removed Lines]",
          "624:  ut32 n = 0;",
          "626:  n = get_ut32 (buffer, &error);",
          "",
          "[Added Lines]",
          "626:  ut32 n = get_ut32 (buffer, &error);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "640: }",
          "642: static pyc_object *get_ascii_object_generic(RBuffer *buffer, ut32 size, bool interned) {",
          "646:  if (!ret) {",
          "647:   return NULL;",
          "648:  }",
          "",
          "[Removed Lines]",
          "643:  pyc_object *ret = NULL;",
          "645:  ret = R_NEW0 (pyc_object);",
          "",
          "[Added Lines]",
          "643:  pyc_object *ret = R_NEW0 (pyc_object);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "657: static pyc_object *get_ascii_object(RBuffer *buffer) {",
          "658:  bool error = false;",
          "662:  if (error) {",
          "663:   return NULL;",
          "664:  }",
          "",
          "[Removed Lines]",
          "659:  ut32 n = 0;",
          "661:  n = get_ut32 (buffer, &error);",
          "",
          "[Added Lines]",
          "657:  ut32 n = get_ut32 (buffer, &error);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "668: static pyc_object *get_ascii_interned_object(RBuffer *buffer) {",
          "669:  bool error = false;",
          "673:  if (error) {",
          "674:   return NULL;",
          "675:  }",
          "",
          "[Removed Lines]",
          "670:  ut32 n;",
          "672:  n = get_ut32 (buffer, &error);",
          "",
          "[Added Lines]",
          "666:  ut32 n = get_ut32 (buffer, &error);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "679: static pyc_object *get_short_ascii_object(RBuffer *buffer) {",
          "680:  bool error = false;",
          "684:  if (error) {",
          "685:   return NULL;",
          "686:  }",
          "",
          "[Removed Lines]",
          "681:  ut8 n;",
          "683:  n = get_ut8 (buffer, &error);",
          "",
          "[Added Lines]",
          "675:  ut8 n = get_ut8 (buffer, &error);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "690: static pyc_object *get_short_ascii_interned_object(RBuffer *buffer) {",
          "691:  bool error = false;",
          "699: }",
          "701: static pyc_object *get_ref_object(RBuffer *buffer) {",
          "702:  bool error = false;",
          "708:  if (error) {",
          "709:   return NULL;",
          "710:  }",
          "711:  if (index >= r_list_length (refs)) {",
          "712:   return NULL;",
          "713:  }",
          "720: }",
          "722: static void free_object(pyc_object *object) {",
          "",
          "[Removed Lines]",
          "692:  ut8 n;",
          "694:  n = get_ut8 (buffer, &error);",
          "695:  if (error) {",
          "696:   return NULL;",
          "697:  }",
          "698:  return get_ascii_object_generic (buffer, n, true);",
          "703:  pyc_object *ret;",
          "704:  pyc_object *obj;",
          "705:  ut32 index;",
          "707:  index = get_ut32 (buffer, &error);",
          "714:  obj = r_list_get_n (refs, index);",
          "715:  if (!obj) {",
          "716:   return NULL;",
          "717:  }",
          "718:  ret = copy_object (obj);",
          "719:  return ret;",
          "",
          "[Added Lines]",
          "684:  ut8 n = get_ut8 (buffer, &error);",
          "685:  return error? NULL: get_ascii_object_generic (buffer, n, true);",
          "690:  ut32 index = get_ut32 (buffer, &error);",
          "697:  pyc_object *obj = NULL; // r_list_get_n (refs, index);",
          "698:  return obj? copy_object (obj): NULL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}