{
  "cve_id": "CVE-2019-12589",
  "cve_desc": "In Firejail before 0.9.60, seccomp filters are writable inside the jail, leading to a lack of intended seccomp restrictions for a process that is joined to the jail after a filter has been modified by an attacker.",
  "repo": "netblue30/firejail",
  "patch_hash": "eecf35c2f8249489a1d3e512bb07f0d427183134",
  "patch_info": {
    "commit_hash": "eecf35c2f8249489a1d3e512bb07f0d427183134",
    "repo": "netblue30/firejail",
    "commit_url": "https://github.com/netblue30/firejail/commit/eecf35c2f8249489a1d3e512bb07f0d427183134",
    "files": [
      "src/firejail/firejail.h",
      "src/firejail/fs_lib.c",
      "src/firejail/preproc.c",
      "src/firejail/sandbox.c"
    ],
    "message": "mount runtime seccomp files read-only (#2602)\n\navoid creating locations in the file system that are both writable and\nexecutable (in this case for processes with euid of the user).\n\nfor the same reason also remove user owned libfiles\nwhen it is not needed any more",
    "before_after_code_files": [
      "src/firejail/firejail.h||src/firejail/firejail.h",
      "src/firejail/fs_lib.c||src/firejail/fs_lib.c",
      "src/firejail/preproc.c||src/firejail/preproc.c",
      "src/firejail/sandbox.c||src/firejail/sandbox.c"
    ]
  },
  "patch_diff": {
    "src/firejail/firejail.h||src/firejail/firejail.h": [
      "File: src/firejail/firejail.h -> src/firejail/firejail.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "57: #define RUN_LIB_FILE \"/run/firejail/mnt/libfiles\"",
      "58: #define RUN_DNS_ETC \"/run/firejail/mnt/dns-etc\"",
      "67: #define PATH_SECCOMP_DEFAULT (LIBDIR \"/firejail/seccomp\")   // default filter built during make",
      "68: #define PATH_SECCOMP_DEFAULT_DEBUG (LIBDIR \"/firejail/seccomp.debug\") // default filter built during make",
      "69: #define PATH_SECCOMP_32 (LIBDIR \"/firejail/seccomp.32\")   // 32bit arch filter built during make",
      "",
      "[Removed Lines]",
      "60: #define RUN_SECCOMP_LIST \"/run/firejail/mnt/seccomp.list\" // list of seccomp files installed",
      "61: #define RUN_SECCOMP_PROTOCOL \"/run/firejail/mnt/seccomp.protocol\" // protocol filter",
      "62: #define RUN_SECCOMP_CFG \"/run/firejail/mnt/seccomp\"   // configured filter",
      "63: #define RUN_SECCOMP_32 \"/run/firejail/mnt/seccomp.32\"  // 32bit arch filter installed on 64bit architectures",
      "64: #define RUN_SECCOMP_MDWX \"/run/firejail/mnt/seccomp.mdwx\"  // filter for memory-deny-write-execute",
      "65: #define RUN_SECCOMP_BLOCK_SECONDARY \"/run/firejail/mnt/seccomp.block_secondary\" // secondary arch blocking filter",
      "66: #define RUN_SECCOMP_POSTEXEC \"/run/firejail/mnt/seccomp.postexec\"  // filter for post-exec library",
      "",
      "[Added Lines]",
      "60: #define RUN_SECCOMP_DIR \"/run/firejail/mnt/seccomp\"",
      "61: #define RUN_SECCOMP_LIST \"/run/firejail/mnt/seccomp/seccomp.list\" // list of seccomp files installed",
      "62: #define RUN_SECCOMP_PROTOCOL \"/run/firejail/mnt/seccomp/seccomp.protocol\" // protocol filter",
      "63: #define RUN_SECCOMP_CFG \"/run/firejail/mnt/seccomp/seccomp\"   // configured filter",
      "64: #define RUN_SECCOMP_32  \"/run/firejail/mnt/seccomp/seccomp.32\"  // 32bit arch filter installed on 64bit architectures",
      "65: #define RUN_SECCOMP_MDWX \"/run/firejail/mnt/seccomp/seccomp.mdwx\"  // filter for memory-deny-write-execute",
      "66: #define RUN_SECCOMP_BLOCK_SECONDARY \"/run/firejail/mnt/seccomp/seccomp.block_secondary\" // secondary arch blocking filter",
      "67: #define RUN_SECCOMP_POSTEXEC \"/run/firejail/mnt/seccomp/seccomp.postexec\"  // filter for post-exec library",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "95: #define RUN_ASOUNDRC_FILE \"/run/firejail/mnt/.asoundrc\"",
      "96: #define RUN_HOSTNAME_FILE \"/run/firejail/mnt/hostname\"",
      "97: #define RUN_HOSTS_FILE \"/run/firejail/mnt/hosts\"",
      "99: #define RUN_MACHINEID \"/run/firejail/mnt/machine-id\"",
      "100: #define RUN_LDPRELOAD_FILE \"/run/firejail/mnt/ld.so.preload\"",
      "101: #define RUN_UTMP_FILE  \"/run/firejail/mnt/utmp\"",
      "",
      "[Removed Lines]",
      "98: #define RUN_RESOLVCONF_FILE \"/run/firejail/mnt/resolv.conf\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/firejail/fs_lib.c||src/firejail/fs_lib.c": [
      "File: src/firejail/fs_lib.c -> src/firejail/fs_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:   fslib_duplicate(buf);",
      "134:  }",
      "135:  fclose(fp);",
      "136: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "136:  unlink(RUN_LIB_FILE);",
      "",
      "---------------"
    ],
    "src/firejail/preproc.c||src/firejail/preproc.c": [
      "File: src/firejail/preproc.c -> src/firejail/preproc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:   fs_logger2(\"tmpfs\", RUN_MNT_DIR);",
      "88: #ifdef HAVE_SECCOMP",
      "89:   if (arg_seccomp_block_secondary)",
      "90:    copy_file(PATH_SECCOMP_BLOCK_SECONDARY, RUN_SECCOMP_BLOCK_SECONDARY, getuid(), getgid(), 0644); // root needed",
      "91:   else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89:   create_empty_dir_as_root(RUN_SECCOMP_DIR, 0755);",
      "",
      "---------------"
    ],
    "src/firejail/sandbox.c||src/firejail/sandbox.c": [
      "File: src/firejail/sandbox.c -> src/firejail/sandbox.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1054:  save_nonewprivs();",
      "1060:  save_cpu();",
      "",
      "[Removed Lines]",
      "1057:  set_caps();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1101:   int rv = unlink(RUN_SECCOMP_MDWX);",
      "1102:   (void) rv;",
      "1103:  }",
      "1104: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1102:  fs_rdonly(RUN_SECCOMP_DIR);",
      "1106:  set_caps();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ce7b289b099746a98be4d57304fc130c14537411",
      "candidate_info": {
        "commit_hash": "ce7b289b099746a98be4d57304fc130c14537411",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/ce7b289b099746a98be4d57304fc130c14537411",
        "files": [
          "src/firejail/firejail.h",
          "src/firejail/join.c",
          "src/firejail/sandbox.c",
          "src/firejail/util.c"
        ],
        "message": "hardening: run more code unprivileged",
        "before_after_code_files": [
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/join.c||src/firejail/join.c",
          "src/firejail/sandbox.c||src/firejail/sandbox.c",
          "src/firejail/util.c||src/firejail/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/firejail.h||src/firejail/firejail.h",
            "src/firejail/sandbox.c||src/firejail/sandbox.c"
          ],
          "candidate": [
            "src/firejail/firejail.h||src/firejail/firejail.h",
            "src/firejail/sandbox.c||src/firejail/sandbox.c"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "521: void logmsg(const char *msg);",
          "522: void logargs(int argc, char **argv) ;",
          "523: void logerr(const char *msg);",
          "524: int copy_file(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode);",
          "525: void copy_file_as_user(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode);",
          "526: void copy_file_from_user_to_root(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "524: void set_nice(int inc);",
          "",
          "---------------"
        ],
        "src/firejail/join.c||src/firejail/join.c": [
          "File: src/firejail/join.c -> src/firejail/join.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  build_cmdline(&cfg.command_line, &cfg.window_title, argc, argv, index);",
          "106: }",
          "108: static void extract_nogroups(pid_t pid) {",
          "",
          "[Removed Lines]",
          "104:  if (arg_debug)",
          "105:   printf(\"Extracted command #%s#\\n\", cfg.command_line);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291: void join(pid_t pid, int argc, char **argv, int index) {",
          "292:  EUID_ASSERT();",
          "299:  pid = switch_to_child(pid);",
          "",
          "[Removed Lines]",
          "293:  char *homedir = cfg.homedir;",
          "294:  pid_t parent = pid;",
          "296:  extract_command(argc, argv, index);",
          "",
          "[Added Lines]",
          "291:  pid_t parent = pid;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "374:   EUID_USER();",
          "375:   if (chdir(\"/\") < 0)",
          "376:    errExit(\"chdir\");",
          "378:    struct stat s;",
          "382:      errExit(\"chdir\");",
          "383:    }",
          "384:   }",
          "391:   EUID_ROOT();",
          "392:   if (apply_caps == 1) // not available for uid 0",
          "",
          "[Removed Lines]",
          "377:   if (homedir) {",
          "379:    if (stat(homedir, &s) == 0) {",
          "381:     if (chdir(homedir) < 0)",
          "387:   if (cfg.cpus) // not available for uid 0",
          "388:    set_cpu_affinity();",
          "",
          "[Added Lines]",
          "371:   if (cfg.homedir) {",
          "373:    if (stat(cfg.homedir, &s) == 0) {",
          "375:     if (chdir(cfg.homedir) < 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417:   }",
          "419:   EUID_USER();",
          "447:   int cwd = 0;",
          "448:   if (cfg.cwd) {",
          "449:    if (chdir(cfg.cwd) == 0)",
          "",
          "[Removed Lines]",
          "421:   if (arg_nice) {",
          "422:    errno = 0;",
          "423:    int rv = nice(cfg.nice);",
          "424:    (void) rv;",
          "425:    if (errno) {",
          "426:     fwarning(\"cannot set nice value\\n\");",
          "427:     errno = 0;",
          "428:    }",
          "429:   }",
          "432:   env_defaults();",
          "433:   if (display) {",
          "434:    char *display_str;",
          "435:    if (asprintf(&display_str, \":%d\", display) == -1)",
          "436:     errExit(\"asprintf\");",
          "437:    setenv(\"DISPLAY\", display_str, 1);",
          "438:    free(display_str);",
          "439:   }",
          "441:   if (cfg.command_line == NULL) {",
          "442:    assert(cfg.shell);",
          "443:    cfg.command_line = cfg.shell;",
          "444:    cfg.window_title = cfg.shell;",
          "445:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "463:    }",
          "464:   }",
          "466:   drop_privs(arg_nogroups);",
          "468:   start_application(0, NULL);",
          "",
          "[Removed Lines]",
          "467:   prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0); // kill the child in case the parent died",
          "",
          "[Added Lines]",
          "433:   prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);",
          "435:   extract_command(argc, argv, index);",
          "436:   if (cfg.command_line == NULL) {",
          "437:    assert(cfg.shell);",
          "438:    cfg.command_line = cfg.shell;",
          "439:    cfg.window_title = cfg.shell;",
          "440:   }",
          "441:   if (arg_debug)",
          "442:    printf(\"Extracted command #%s#\\n\", cfg.command_line);",
          "445:   if (cfg.cpus) // not available for uid 0",
          "446:    set_cpu_affinity();",
          "449:   if (arg_nice)",
          "450:    set_nice(cfg.nice);",
          "453:   if (display) {",
          "454:    char *display_str;",
          "455:    if (asprintf(&display_str, \":%d\", display) == -1)",
          "456:     errExit(\"asprintf\");",
          "457:    setenv(\"DISPLAY\", display_str, 1);",
          "458:    free(display_str);",
          "459:   }",
          "",
          "---------------"
        ],
        "src/firejail/sandbox.c||src/firejail/sandbox.c": [
          "File: src/firejail/sandbox.c -> src/firejail/sandbox.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1038:   }",
          "1039:  }",
          "1052:  EUID_ROOT();",
          "1054:  fs_x11();",
          "",
          "[Removed Lines]",
          "1042:  if (arg_nice) {",
          "1043:   errno = 0;",
          "1044:   int rv = nice(cfg.nice);",
          "1045:   (void) rv;",
          "1046:   if (errno) {",
          "1047:    fwarning(\"cannot set nice value\\n\");",
          "1048:    errno = 0;",
          "1049:   }",
          "1050:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1068:  set_caps();",
          "1083: #ifdef HAVE_SECCOMP",
          "",
          "[Removed Lines]",
          "1071:  if (cfg.cpus) {",
          "1072:   save_cpu(); // save cpu affinity mask to CPU_CFG file",
          "1073:   EUID_USER();",
          "1074:   set_cpu_affinity();",
          "1075:   EUID_ROOT();",
          "1076:  }",
          "1079:  if (cfg.cgroup)",
          "1080:   save_cgroup();",
          "",
          "[Added Lines]",
          "1060:  save_cpu();",
          "1063:  save_cgroup();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1128:  FILE *fp = create_ready_for_join_file();",
          "",
          "[Added Lines]",
          "1111:  FILE *rj = create_ready_for_join_file();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1175:  }",
          "1180:  drop_privs(arg_nogroups);",
          "1182:  pid_t app_pid = fork();",
          "1183:  if (app_pid == -1)",
          "1184:   errExit(\"fork\");",
          "",
          "[Removed Lines]",
          "1181:  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0); // kill the sandbox in case the parent died",
          "",
          "[Added Lines]",
          "1166:  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);",
          "1172:  if (cfg.cpus)",
          "1173:   set_cpu_affinity();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1196:     printf(\"AppArmor enabled\\n\");",
          "1197:   }",
          "1198: #endif",
          "1200:   set_rlimits();",
          "1203:  }",
          "1207:  int status = monitor_application(app_pid); // monitor application",
          "1208:  flush_stdin();",
          "",
          "[Removed Lines]",
          "1202:   start_application(0, fp);",
          "1205:  fclose(fp);",
          "",
          "[Added Lines]",
          "1196:   if (arg_nice)",
          "1197:    set_nice(cfg.nice);",
          "1200:   start_application(0, rj);",
          "1203:  fclose(rj);",
          "",
          "---------------"
        ],
        "src/firejail/util.c||src/firejail/util.c": [
          "File: src/firejail/util.c -> src/firejail/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:  closelog();",
          "251: }",
          "253: static int copy_file_by_fd(int src, int dst) {",
          "254:  assert(src >= 0);",
          "255:  assert(dst >= 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254: void set_nice(int inc) {",
          "255:  errno = 0;",
          "256:  int rv = nice(inc);",
          "257:  (void) rv;",
          "258:  if (errno)",
          "259:   fwarning(\"cannot set nice value\\n\");",
          "260: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f905f046cc554f8ec2b800bcb9965b0f360cfd91",
      "candidate_info": {
        "commit_hash": "f905f046cc554f8ec2b800bcb9965b0f360cfd91",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/f905f046cc554f8ec2b800bcb9965b0f360cfd91",
        "files": [
          "Makefile.in",
          "src/firejail/firejail.h",
          "src/firejail/preproc.c",
          "src/firejail/sandbox.c",
          "src/firejail/seccomp.c",
          "src/fseccomp/main.c",
          "src/fseccomp/seccomp_secondary.c",
          "test/filters/fseccomp.exp"
        ],
        "message": "remove 64bit seccomp filter from 32bit architectures",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/preproc.c||src/firejail/preproc.c",
          "src/firejail/sandbox.c||src/firejail/sandbox.c",
          "src/firejail/seccomp.c||src/firejail/seccomp.c",
          "src/fseccomp/main.c||src/fseccomp/main.c",
          "src/fseccomp/seccomp_secondary.c||src/fseccomp/seccomp_secondary.c",
          "test/filters/fseccomp.exp||test/filters/fseccomp.exp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/firejail.h||src/firejail/firejail.h",
            "src/firejail/preproc.c||src/firejail/preproc.c",
            "src/firejail/sandbox.c||src/firejail/sandbox.c"
          ],
          "candidate": [
            "src/firejail/firejail.h||src/firejail/firejail.h",
            "src/firejail/preproc.c||src/firejail/preproc.c",
            "src/firejail/sandbox.c||src/firejail/sandbox.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: MYLIBS = src/lib",
          "3: APPS = src/firejail src/firemon src/fsec-print src/fsec-optimize src/firecfg src/fnetfilter src/libtrace src/libtracelog src/ftee src/faudit src/fnet src/fseccomp src/fbuilder src/fcopy src/fldd src/libpostexecseccomp",
          "4: MANPAGES = firejail.1 firemon.1 firecfg.1 firejail-profile.5 firejail-login.5 firejail-users.5",
          "7: prefix=@prefix@",
          "8: exec_prefix=@exec_prefix@",
          "",
          "[Removed Lines]",
          "5: SECCOMP_FILTERS = seccomp seccomp.debug seccomp.32 seccomp.64 seccomp.block_secondary seccomp.mdwx",
          "",
          "[Added Lines]",
          "5: SECCOMP_FILTERS = seccomp seccomp.debug seccomp.32 seccomp.block_secondary seccomp.mdwx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  src/fsec-optimize/fsec-optimize seccomp.debug",
          "48:  src/fseccomp/fseccomp secondary 32 seccomp.32",
          "49:  src/fsec-optimize/fsec-optimize seccomp.32",
          "52:  src/fseccomp/fseccomp secondary block seccomp.block_secondary",
          "53:  src/fseccomp/fseccomp memory-deny-write-execute seccomp.mdwx",
          "54: endif",
          "",
          "[Removed Lines]",
          "50:  src/fseccomp/fseccomp secondary 64 seccomp.64",
          "51:  src/fsec-optimize/fsec-optimize seccomp.64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:  install -c -m 0644 seccomp $(DESTDIR)/$(libdir)/firejail/.",
          "111:  install -c -m 0644 seccomp.debug $(DESTDIR)/$(libdir)/firejail/.",
          "112:  install -c -m 0644 seccomp.32 $(DESTDIR)/$(libdir)/firejail/.",
          "114:  install -c -m 0644 seccomp.block_secondary $(DESTDIR)/$(libdir)/firejail/.",
          "115:  install -c -m 0644 seccomp.mdwx $(DESTDIR)/$(libdir)/firejail/.",
          "116: endif",
          "",
          "[Removed Lines]",
          "113:  install -c -m 0644 seccomp.64 $(DESTDIR)/$(libdir)/firejail/.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #define RUN_SECCOMP_PROTOCOL \"/run/firejail/mnt/seccomp.protocol\" // protocol filter",
          "61: #define RUN_SECCOMP_CFG \"/run/firejail/mnt/seccomp\"   // configured filter",
          "63: #define RUN_SECCOMP_32 \"/run/firejail/mnt/seccomp.32\"  // 32bit arch filter installed on 64bit architectures",
          "64: #define RUN_SECCOMP_MDWX \"/run/firejail/mnt/seccomp.mdwx\"  // filter for memory-deny-write-execute",
          "65: #define RUN_SECCOMP_BLOCK_SECONDARY \"/run/firejail/mnt/seccomp.block_secondary\" // secondary arch blocking filter",
          "66: #define RUN_SECCOMP_POSTEXEC \"/run/firejail/mnt/seccomp.postexec\"  // filter for post-exec library",
          "67: #define PATH_SECCOMP_DEFAULT (LIBDIR \"/firejail/seccomp\")   // default filter built during make",
          "68: #define PATH_SECCOMP_DEFAULT_DEBUG (LIBDIR \"/firejail/seccomp.debug\") // default filter built during make",
          "70: #define PATH_SECCOMP_32 (LIBDIR \"/firejail/seccomp.32\")   // 32bit arch filter built during make",
          "71: #define PATH_SECCOMP_MDWX (LIBDIR \"/firejail/seccomp.mdwx\")  // filter for memory-deny-write-execute built during make",
          "72: #define PATH_SECCOMP_BLOCK_SECONDARY (LIBDIR \"/firejail/seccomp.block_secondary\") // secondary arch blocking filter built during make",
          "",
          "[Removed Lines]",
          "62: #define RUN_SECCOMP_64 \"/run/firejail/mnt/seccomp.64\"  // 64bit arch filter installed on 32bit architectures",
          "69: #define PATH_SECCOMP_64 (LIBDIR \"/firejail/seccomp.64\")   // 64bit arch filter built during make",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/firejail/preproc.c||src/firejail/preproc.c": [
          "File: src/firejail/preproc.c -> src/firejail/preproc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   else {",
          "89:    copy_file(PATH_SECCOMP_32, RUN_SECCOMP_32, getuid(), getgid(), 0644); // root needed",
          "91:   }",
          "92:   if (arg_allow_debuggers)",
          "93:    copy_file(PATH_SECCOMP_DEFAULT_DEBUG, RUN_SECCOMP_CFG, getuid(), getgid(), 0644); // root needed",
          "",
          "[Removed Lines]",
          "90:    copy_file(PATH_SECCOMP_64, RUN_SECCOMP_64, getuid(), getgid(), 0644); // root needed",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/firejail/sandbox.c||src/firejail/sandbox.c": [
          "File: src/firejail/sandbox.c -> src/firejail/sandbox.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1017:   else",
          "1018:    seccomp_filter_drop();",
          "1028:  }",
          "1029:  else { // clean seccomp files under /run/firejail/mnt",
          "1030:   int rv = unlink(RUN_SECCOMP_CFG);",
          "1032:   rv |= unlink(RUN_SECCOMP_32);",
          "1033:   (void) rv;",
          "1034:  }",
          "",
          "[Removed Lines]",
          "1021: #if defined(__LP64__)",
          "1022:   int rv = unlink(RUN_SECCOMP_64);",
          "1023: #endif",
          "1024: #if defined(__ILP32__)",
          "1025:   int rv = unlink(RUN_SECCOMP_32);",
          "1026: #endif",
          "1027:   (void) rv;",
          "1031:   rv |= unlink(RUN_SECCOMP_64);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/firejail/seccomp.c||src/firejail/seccomp.c": [
          "File: src/firejail/seccomp.c -> src/firejail/seccomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: }",
          "141: #if defined(__LP64__)",
          "142: static void seccomp_filter_32(void) {",
          "143:  if (seccomp_load(RUN_SECCOMP_32) == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: #if defined(__x86_64__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:  }",
          "147: }",
          "148: #endif",
          "158: #endif",
          "160: static void seccomp_filter_block_secondary(void) {",
          "",
          "[Removed Lines]",
          "151: #if defined(__ILP32__)",
          "152: static void seccomp_filter_64(void) {",
          "153:  if (seccomp_load(RUN_SECCOMP_64) == 0) {",
          "154:   if (arg_debug)",
          "155:    printf(\"Dual 32/64 bit seccomp filter configured\\n\");",
          "156:  }",
          "157: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:    if (arg_seccomp_block_secondary)",
          "178:     seccomp_filter_block_secondary();",
          "179:    else {",
          "180: #if defined(__LP64__)",
          "181:     seccomp_filter_32();",
          "182: #endif",
          "185: #endif",
          "186:    }",
          "187:   }",
          "",
          "[Removed Lines]",
          "183: #if defined(__ILP32__)",
          "184:     seccomp_filter_64();",
          "",
          "[Added Lines]",
          "172: #if defined(__x86_64__)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:    if (arg_seccomp_block_secondary)",
          "191:     seccomp_filter_block_secondary();",
          "192:    else {",
          "193: #if defined(__LP64__)",
          "194:     seccomp_filter_32();",
          "195: #endif",
          "198: #endif",
          "199:    }",
          "200:    if (arg_debug)",
          "",
          "[Removed Lines]",
          "196: #if defined(__ILP32__)",
          "197:     seccomp_filter_64();",
          "",
          "[Added Lines]",
          "184: #if defined(__x86_64__)",
          "",
          "---------------"
        ],
        "src/fseccomp/main.c||src/fseccomp/main.c": [
          "File: src/fseccomp/main.c -> src/fseccomp/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   protocol_print();",
          "71:  else if (argc == 5 && strcmp(argv[1], \"protocol\") == 0 && strcmp(argv[2], \"build\") == 0)",
          "72:   protocol_build_filter(argv[3], argv[4]);",
          "75:  else if (argc == 4 && strcmp(argv[1], \"secondary\") == 0 && strcmp(argv[2], \"32\") == 0)",
          "76:   seccomp_secondary_32(argv[3]);",
          "77:  else if (argc == 4 && strcmp(argv[1], \"secondary\") == 0 && strcmp(argv[2], \"block\") == 0)",
          "",
          "[Removed Lines]",
          "73:  else if (argc == 4 && strcmp(argv[1], \"secondary\") == 0 && strcmp(argv[2], \"64\") == 0)",
          "74:   seccomp_secondary_64(argv[3]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fseccomp/seccomp_secondary.c||src/fseccomp/seccomp_secondary.c": [
          "File: src/fseccomp/seccomp_secondary.c -> src/fseccomp/seccomp_secondary.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  close(dst);",
          "43: }",
          "112: void seccomp_secondary_32(const char *fname) {",
          "",
          "[Removed Lines]",
          "45: void seccomp_secondary_64(const char *fname) {",
          "47:  struct sock_filter filter[] = {",
          "48:   VALIDATE_ARCHITECTURE_64,",
          "49:   EXAMINE_SYSCALL,",
          "50:   BLACKLIST(165), // mount",
          "51:   BLACKLIST(166), // umount2",
          "53:   BLACKLIST(101), // ptrace",
          "54:   BLACKLIST(246), // kexec_load",
          "55:   BLACKLIST(304), // open_by_handle_at",
          "56:   BLACKLIST(303), // name_to_handle_at",
          "57:   BLACKLIST(174), // create_module",
          "58:   BLACKLIST(175), // init_module",
          "59:   BLACKLIST(313), // finit_module",
          "60:   BLACKLIST(176), // delete_module",
          "61:   BLACKLIST(172), // iopl",
          "62:   BLACKLIST(173), // ioperm",
          "63:   BLACKLIST(251), // ioprio_set",
          "64:   BLACKLIST(167), // swapon",
          "65:   BLACKLIST(168), // swapoff",
          "66:   BLACKLIST(103), // syslog",
          "67:   BLACKLIST(310), // process_vm_readv",
          "68:   BLACKLIST(311), // process_vm_writev",
          "69:   BLACKLIST(139), // sysfs",
          "70:   BLACKLIST(156), // _sysctl",
          "71:   BLACKLIST(159), // adjtimex",
          "72:   BLACKLIST(305), // clock_adjtime",
          "73:   BLACKLIST(212), // lookup_dcookie",
          "74:   BLACKLIST(298), // perf_event_open",
          "75:   BLACKLIST(300), // fanotify_init",
          "76:   BLACKLIST(312), // kcmp",
          "77:   BLACKLIST(248), // add_key",
          "78:   BLACKLIST(249), // request_key",
          "79:   BLACKLIST(250), // keyctl",
          "80:   BLACKLIST(134), // uselib",
          "81:   BLACKLIST(163), // acct",
          "82:   BLACKLIST(154), // modify_ldt",
          "83:   BLACKLIST(155), // pivot_root",
          "84:   BLACKLIST(206), // io_setup",
          "85:   BLACKLIST(207), // io_destroy",
          "86:   BLACKLIST(208), // io_getevents",
          "87:   BLACKLIST(209), // io_submit",
          "88:   BLACKLIST(210), // io_cancel",
          "89:   BLACKLIST(216), // remap_file_pages",
          "90:   BLACKLIST(237), // mbind",
          "94:   BLACKLIST(238), // set_mempolicy",
          "95:   BLACKLIST(256), // migrate_pages",
          "96:   BLACKLIST(279), // move_pages",
          "97:   BLACKLIST(278), // vmsplice",
          "98:   BLACKLIST(161), // chroot",
          "99:   BLACKLIST(184), // tuxcall",
          "100:   BLACKLIST(169), // reboot",
          "101:   BLACKLIST(180), // nfsservctl",
          "102:   BLACKLIST(177), // get_kernel_syms",
          "104:   RETURN_ALLOW",
          "105:  };",
          "108:  write_filter(fname, sizeof(filter), filter);",
          "109: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/filters/fseccomp.exp||test/filters/fseccomp.exp": [
          "File: test/filters/fseccomp.exp -> test/filters/fseccomp.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  \"jeq socket\"",
          "38: }",
          "57: after 100",
          "58: send -- \"fseccomp default seccomp-test-file\\r\"",
          "59: after 100",
          "",
          "[Removed Lines]",
          "40: after 100",
          "41: send -- \"fseccomp secondary 64 seccomp-test-file\\r\"",
          "42: after 100",
          "43: send -- \"fsec-print seccomp-test-file\\r\"",
          "44: expect {",
          "45:  timeout {puts \"TESTING ERROR 5.1\\n\";exit}",
          "46:  \"jeq mount\"",
          "47: }",
          "48: expect {",
          "49:  timeout {puts \"TESTING ERROR 5.2\\n\";exit}",
          "50:  \"jeq umount2\"",
          "51: }",
          "52: expect {",
          "53:  timeout {puts \"TESTING ERROR 5.3\\n\";exit}",
          "54:  \"ret ALLOW\"",
          "55: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3cafb7fac7a8b17c8376616c93317c9d51cdda7",
      "candidate_info": {
        "commit_hash": "e3cafb7fac7a8b17c8376616c93317c9d51cdda7",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/e3cafb7fac7a8b17c8376616c93317c9d51cdda7",
        "files": [
          "src/firejail/firejail.h",
          "src/firejail/fs.c",
          "src/firejail/pulseaudio.c",
          "src/firejail/sandbox.c",
          "src/firejail/x11.c"
        ],
        "message": "no postmount checks when building basic filesystem\n\nfixes #2782",
        "before_after_code_files": [
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/fs.c||src/firejail/fs.c",
          "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c",
          "src/firejail/sandbox.c||src/firejail/sandbox.c",
          "src/firejail/x11.c||src/firejail/x11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/firejail.h||src/firejail/firejail.h",
            "src/firejail/sandbox.c||src/firejail/sandbox.c"
          ],
          "candidate": [
            "src/firejail/firejail.h||src/firejail/firejail.h",
            "src/firejail/sandbox.c||src/firejail/sandbox.c"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "380: void fs_tmpfs(const char *dir, unsigned check_owner);",
          "385: void fs_proc_sys_dev_boot(void);",
          "",
          "[Removed Lines]",
          "382: void fs_remount(const char *dir, OPERATION op);",
          "383: void fs_remount_rec(const char *dir, OPERATION op);",
          "",
          "[Added Lines]",
          "382: void fs_remount(const char *dir, OPERATION op, unsigned check_mnt);",
          "383: void fs_remount_rec(const char *dir, OPERATION op, unsigned check_mnt);",
          "",
          "---------------"
        ],
        "src/firejail/fs.c||src/firejail/fs.c": [
          "File: src/firejail/fs.c -> src/firejail/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   }",
          "148:  }",
          "149:  else if (op == MOUNT_READONLY | op == MOUNT_RDWR | op == MOUNT_NOEXEC) {",
          "152:  }",
          "153:  else if (op == MOUNT_TMPFS) {",
          "",
          "[Removed Lines]",
          "150:   fs_remount_rec(fname, op);",
          "",
          "[Added Lines]",
          "150:   fs_remount_rec(fname, op, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478:  close(fd);",
          "479: }",
          "482:  assert(dir);",
          "484:  struct stat s;",
          "",
          "[Removed Lines]",
          "481: void fs_remount(const char *dir, OPERATION op) {",
          "",
          "[Added Lines]",
          "481: void fs_remount(const char *dir, OPERATION op, unsigned check_mnt) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "519:   if (mount(dir, dir, NULL, MS_BIND|MS_REC, NULL) < 0 ||",
          "520:       mount(NULL, dir, NULL, flags|MS_BIND|MS_REMOUNT, NULL) < 0)",
          "521:    errExit(\"remounting\");",
          "528:   fs_logger2(opstr[op], dir);",
          "529:  }",
          "530: }",
          "533:  assert(dir);",
          "535:  int mountid = get_mount_id(dir);",
          "",
          "[Removed Lines]",
          "523:   MountData *mptr = get_last_mount();",
          "524:   size_t len = strlen(dir);",
          "525:   if (strncmp(mptr->dir, dir, len) != 0 ||",
          "526:      (*(mptr->dir + len) != '\\0' && *(mptr->dir + len) != '/'))",
          "527:    errLogExit(\"invalid %s mount\", opstr[op]);",
          "532: void fs_remount_rec(const char *dir, OPERATION op) {",
          "",
          "[Added Lines]",
          "522:   if (check_mnt) {",
          "524:    MountData *mptr = get_last_mount();",
          "525:    size_t len = strlen(dir);",
          "526:    if (strncmp(mptr->dir, dir, len) != 0 ||",
          "527:       (*(mptr->dir + len) != '\\0' && *(mptr->dir + len) != '/'))",
          "528:     errLogExit(\"invalid %s mount\", opstr[op]);",
          "529:   }",
          "534: void fs_remount_rec(const char *dir, OPERATION op, unsigned check_mnt) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "542:    fwarning(\"read-only, read-write and noexec options are not applied recursively\\n\");",
          "543:    mount_warning = 1;",
          "544:   }",
          "546:   return;",
          "547:  }",
          "",
          "[Removed Lines]",
          "545:   fs_remount(dir, op);",
          "",
          "[Added Lines]",
          "547:   fs_remount(dir, op, check_mnt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "552:  char **tmp = arr;",
          "553:  while (*tmp) {",
          "555:   free(*tmp++);",
          "556:  }",
          "557:  free(arr);",
          "",
          "[Removed Lines]",
          "554:   fs_remount(*tmp, op);",
          "",
          "[Added Lines]",
          "556:   fs_remount(*tmp, op, check_mnt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "723: void fs_basic_fs(void) {",
          "724:  uid_t uid = getuid();",
          "726:  if (arg_debug)",
          "727:   printf(\"Basic read-only filesystem:\\n\");",
          "728:  if (!arg_writable_etc) {",
          "730:   if (uid)",
          "732:  }",
          "733:  if (!arg_writable_var) {",
          "735:   if (uid)",
          "737:  }",
          "747:  fs_var_lock();",
          "",
          "[Removed Lines]",
          "729:   fs_remount(\"/etc\", MOUNT_READONLY);",
          "731:    fs_remount(\"/etc\", MOUNT_NOEXEC);",
          "734:   fs_remount(\"/var\", MOUNT_READONLY);",
          "736:    fs_remount(\"/var\", MOUNT_NOEXEC);",
          "738:  fs_remount(\"/bin\", MOUNT_READONLY);",
          "739:  fs_remount(\"/sbin\", MOUNT_READONLY);",
          "740:  fs_remount(\"/lib\", MOUNT_READONLY);",
          "741:  fs_remount(\"/lib64\", MOUNT_READONLY);",
          "742:  fs_remount(\"/lib32\", MOUNT_READONLY);",
          "743:  fs_remount(\"/libx32\", MOUNT_READONLY);",
          "744:  fs_remount(\"/usr\", MOUNT_READONLY);",
          "",
          "[Added Lines]",
          "732:   fs_remount(\"/etc\", MOUNT_READONLY, 0);",
          "734:    fs_remount(\"/etc\", MOUNT_NOEXEC, 0);",
          "737:   fs_remount(\"/var\", MOUNT_READONLY, 0);",
          "739:    fs_remount(\"/var\", MOUNT_NOEXEC, 0);",
          "741:  fs_remount(\"/bin\", MOUNT_READONLY, 0);",
          "742:  fs_remount(\"/sbin\", MOUNT_READONLY, 0);",
          "743:  fs_remount(\"/lib\", MOUNT_READONLY, 0);",
          "744:  fs_remount(\"/lib64\", MOUNT_READONLY, 0);",
          "745:  fs_remount(\"/lib32\", MOUNT_READONLY, 0);",
          "746:  fs_remount(\"/libx32\", MOUNT_READONLY, 0);",
          "747:  fs_remount(\"/usr\", MOUNT_READONLY, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "750:  if (!arg_writable_var_log)",
          "751:   fs_var_log();",
          "752:  else",
          "755:  fs_var_lib();",
          "756:  fs_var_cache();",
          "",
          "[Removed Lines]",
          "753:   fs_remount(\"/var/log\", MOUNT_RDWR);",
          "",
          "[Added Lines]",
          "756:   fs_remount(\"/var/log\", MOUNT_RDWR, 0);",
          "",
          "---------------"
        ],
        "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c": [
          "File: src/firejail/pulseaudio.c -> src/firejail/pulseaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  if (mkdir(RUN_PULSE_DIR, 0700) == -1)",
          "89:   errExit(\"mkdir\");",
          "94:  char *pulsecfg = NULL;",
          "",
          "[Removed Lines]",
          "91:  fs_remount(RUN_PULSE_DIR, MOUNT_NOEXEC);",
          "",
          "[Added Lines]",
          "91:  fs_remount(RUN_PULSE_DIR, MOUNT_NOEXEC, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   if (fstatvfs(fd, &vfs) == -1)",
          "156:    errExit(\"fstatvfs\");",
          "157:   if ((vfs.f_flag & MS_RDONLY) == MS_RDONLY)",
          "160:   char *proc;",
          "161:   if (asprintf(&proc, \"/proc/self/fd/%d\", fd) == -1)",
          "162:    errExit(\"asprintf\");",
          "",
          "[Removed Lines]",
          "158:    fs_remount(RUN_PULSE_DIR, MOUNT_READONLY);",
          "",
          "[Added Lines]",
          "158:    fs_remount(RUN_PULSE_DIR, MOUNT_READONLY, 0);",
          "160:   if (arg_debug)",
          "161:    printf(\"Mounting %s on %s\\n\", RUN_PULSE_DIR, homeusercfg);",
          "",
          "---------------"
        ],
        "src/firejail/sandbox.c||src/firejail/sandbox.c": [
          "File: src/firejail/sandbox.c -> src/firejail/sandbox.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1106:   (void) rv;",
          "1107:  }",
          "1110: #endif",
          "",
          "[Removed Lines]",
          "1109:  fs_remount(RUN_SECCOMP_DIR, MOUNT_READONLY);",
          "",
          "[Added Lines]",
          "1109:  fs_remount(RUN_SECCOMP_DIR, MOUNT_READONLY, 0);",
          "",
          "---------------"
        ],
        "src/firejail/x11.c||src/firejail/x11.c": [
          "File: src/firejail/x11.c -> src/firejail/x11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1169:  umount(\"/tmp\");",
          "1175:  char *dest;",
          "",
          "[Removed Lines]",
          "1172:  fs_remount(RUN_XAUTHORITY_SEC_FILE, MOUNT_NOEXEC);",
          "",
          "[Added Lines]",
          "1172:  fs_remount(RUN_XAUTHORITY_SEC_FILE, MOUNT_NOEXEC, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1202:  if (fstatvfs(fd, &vfs) == -1)",
          "1203:   errExit(\"fstatvfs\");",
          "1204:  if ((vfs.f_flag & MS_RDONLY) == MS_RDONLY)",
          "1208:  char *proc;",
          "1209:  if (asprintf(&proc, \"/proc/self/fd/%d\", fd) == -1)",
          "1210:   errExit(\"asprintf\");",
          "",
          "[Removed Lines]",
          "1205:   fs_remount(RUN_XAUTHORITY_SEC_FILE, MOUNT_READONLY);",
          "",
          "[Added Lines]",
          "1205:   fs_remount(RUN_XAUTHORITY_SEC_FILE, MOUNT_READONLY, 0);",
          "1208:  if (arg_debug)",
          "1209:   printf(\"Mounting %s on %s\\n\", RUN_XAUTHORITY_SEC_FILE, dest);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dba9dff9c52e436a37c82a72ec82c95bcd9684ce",
      "candidate_info": {
        "commit_hash": "dba9dff9c52e436a37c82a72ec82c95bcd9684ce",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/dba9dff9c52e436a37c82a72ec82c95bcd9684ce",
        "files": [
          "src/firejail/firejail.h",
          "src/firejail/fs.c",
          "src/firejail/pulseaudio.c",
          "src/firejail/sandbox.c",
          "src/firejail/x11.c"
        ],
        "message": "streamline remounting (ro,rw,noexec)",
        "before_after_code_files": [
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/fs.c||src/firejail/fs.c",
          "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c",
          "src/firejail/sandbox.c||src/firejail/sandbox.c",
          "src/firejail/x11.c||src/firejail/x11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/firejail.h||src/firejail/firejail.h",
            "src/firejail/sandbox.c||src/firejail/sandbox.c"
          ],
          "candidate": [
            "src/firejail/firejail.h||src/firejail/firejail.h",
            "src/firejail/sandbox.c||src/firejail/sandbox.c"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "364: void preproc_clean_run(void);",
          "368: void fs_blacklist(void);",
          "370: void fs_tmpfs(const char *dir, unsigned check_owner);",
          "378: void fs_proc_sys_dev_boot(void);",
          "",
          "[Removed Lines]",
          "372: void fs_rdonly(const char *dir);",
          "373: void fs_rdonly_rec(const char *dir);",
          "375: void fs_noexec(const char *dir);",
          "376: void fs_noexec_rec(const char *dir);",
          "",
          "[Added Lines]",
          "367: typedef enum {",
          "368:  BLACKLIST_FILE,",
          "369:  BLACKLIST_NOLOG,",
          "370:  MOUNT_READONLY,",
          "371:  MOUNT_TMPFS,",
          "372:  MOUNT_NOEXEC,",
          "373:  MOUNT_RDWR,",
          "374:  OPERATION_MAX",
          "375: } OPERATION;",
          "382: void fs_remount(const char *dir, OPERATION op);",
          "383: void fs_remount_rec(const char *dir, OPERATION op);",
          "",
          "---------------"
        ],
        "src/firejail/fs.c||src/firejail/fs.c": [
          "File: src/firejail/fs.c -> src/firejail/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: typedef enum {",
          "62:  UNSUCCESSFUL,",
          "",
          "[Removed Lines]",
          "42: static int mount_warning = 0;",
          "43: static void fs_rdwr(const char *dir);",
          "44: static void fs_rdwr_rec(const char *dir);",
          "51: typedef enum {",
          "52:  BLACKLIST_FILE,",
          "53:  BLACKLIST_NOLOG,",
          "54:  MOUNT_READONLY,",
          "55:  MOUNT_TMPFS,",
          "56:  MOUNT_NOEXEC,",
          "57:  MOUNT_RDWR,",
          "58:  OPERATION_MAX",
          "59: } OPERATION;",
          "",
          "[Added Lines]",
          "45: static char *opstr[] = {",
          "46:  [BLACKLIST_FILE] = \"blacklist\",",
          "47:  [BLACKLIST_NOLOG] = \"blacklist-nolog\",",
          "48:  [MOUNT_READONLY] = \"read-only\",",
          "49:  [MOUNT_TMPFS] = \"tmpfs\",",
          "50:  [MOUNT_NOEXEC] = \"noexec\",",
          "51:  [MOUNT_RDWR] = \"read-write\",",
          "52: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:     fs_logger2(\"blacklist-nolog\", fname);",
          "154:   }",
          "155:  }",
          "167:  }",
          "168:  else if (op == MOUNT_TMPFS) {",
          "169:   if (S_ISDIR(s.st_mode)) {",
          "",
          "[Removed Lines]",
          "156:  else if (op == MOUNT_READONLY) {",
          "157:   fs_rdonly_rec(fname);",
          "159:  }",
          "160:  else if (op == MOUNT_RDWR) {",
          "161:   fs_rdwr_rec(fname);",
          "163:  }",
          "164:  else if (op == MOUNT_NOEXEC) {",
          "165:   fs_noexec_rec(fname);",
          "",
          "[Added Lines]",
          "149:  else if (op == MOUNT_READONLY | op == MOUNT_RDWR | op == MOUNT_NOEXEC) {",
          "150:   fs_remount_rec(fname, op);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "493:  close(fd);",
          "494: }",
          "498:  assert(dir);",
          "500:  struct stat s;",
          "501:  int rv = stat(dir, &s);",
          "502:  if (rv == 0) {",
          "503:   unsigned long flags = 0;",
          "506:    return;",
          "531:   }",
          "559:   }",
          "565:   if (arg_debug)",
          "569:   if (mount(dir, dir, NULL, MS_BIND|MS_REC, NULL) < 0 ||",
          "570:       mount(NULL, dir, NULL, flags|MS_BIND|MS_REMOUNT, NULL) < 0)",
          "574:   MountData *mptr = get_last_mount();",
          "575:   size_t len = strlen(dir);",
          "576:   if (strncmp(mptr->dir, dir, len) != 0 ||",
          "577:      (*(mptr->dir + len) != '\\0' && *(mptr->dir + len) != '/'))",
          "630:  }",
          "631: }",
          "635:  assert(dir);",
          "637:  int mountid = get_mount_id(dir);",
          "",
          "[Removed Lines]",
          "497: void fs_rdonly(const char *dir) {",
          "504:   get_mount_flags(dir, &flags);",
          "505:   if ((flags & MS_RDONLY) == MS_RDONLY)",
          "507:   flags |= MS_RDONLY;",
          "508:   if (arg_debug)",
          "509:    printf(\"Mounting read-only %s\\n\", dir);",
          "512:   if (mount(dir, dir, NULL, MS_BIND|MS_REC, NULL) < 0 ||",
          "513:       mount(NULL, dir, NULL, flags|MS_BIND|MS_REMOUNT, NULL) < 0)",
          "514:    errExit(\"mount read-only\");",
          "515:   fs_logger2(\"read-only\", dir);",
          "516:  }",
          "517: }",
          "520: void fs_rdonly_rec(const char *dir) {",
          "521:  assert(dir);",
          "523:  int mountid = get_mount_id(dir);",
          "524:  if (mountid == -1)",
          "525:   return;",
          "526:  if (mountid == -2) {",
          "528:   if (!mount_warning) {",
          "529:    fwarning(\"read-only, read-write and noexec options are not applied recursively\\n\");",
          "530:    mount_warning = 1;",
          "532:   fs_rdonly(dir);",
          "533:   return;",
          "534:  }",
          "536:  char **arr = build_mount_array(mountid, dir);",
          "537:  assert(arr);",
          "539:  char **tmp = arr;",
          "540:  while (*tmp) {",
          "541:   fs_rdonly(*tmp);",
          "542:   free(*tmp++);",
          "543:  }",
          "544:  free(arr);",
          "545: }",
          "548: static void fs_rdwr(const char *dir) {",
          "549:  assert(dir);",
          "551:  struct stat s;",
          "552:  int rv = stat(dir, &s);",
          "553:  if (rv == 0) {",
          "555:   uid_t u = getuid();",
          "556:   if (u != 0 && s.st_uid != u) {",
          "557:    fwarning(\"you are not allowed to change %s to read-write\\n\", dir);",
          "558:    return;",
          "560:   unsigned long flags = 0;",
          "561:   get_mount_flags(dir, &flags);",
          "562:   if ((flags & MS_RDONLY) == 0)",
          "563:    return;",
          "564:   flags &= ~MS_RDONLY;",
          "566:    printf(\"Mounting read-write %s\\n\", dir);",
          "571:    errExit(\"mount read-write\");",
          "572:   fs_logger2(\"read-write\", dir);",
          "578:    errLogExit(\"invalid read-write mount\");",
          "579:  }",
          "580: }",
          "583: static void fs_rdwr_rec(const char *dir) {",
          "584:  assert(dir);",
          "586:  int mountid = get_mount_id(dir);",
          "587:  if (mountid == -1)",
          "588:   return;",
          "589:  if (mountid == -2) {",
          "591:   if (!mount_warning) {",
          "592:    fwarning(\"read-only, read-write and noexec options are not applied recursively\\n\");",
          "593:    mount_warning = 1;",
          "594:   }",
          "595:   fs_rdwr(dir);",
          "596:   return;",
          "597:  }",
          "599:  char **arr = build_mount_array(mountid, dir);",
          "600:  assert(arr);",
          "602:  char **tmp = arr;",
          "603:  while (*tmp) {",
          "604:   fs_rdwr(*tmp);",
          "605:   free(*tmp++);",
          "606:  }",
          "607:  free(arr);",
          "608: }",
          "611: void fs_noexec(const char *dir) {",
          "612:  assert(dir);",
          "614:  struct stat s;",
          "615:  int rv = stat(dir, &s);",
          "616:  if (rv == 0) {",
          "617:   unsigned long flags = 0;",
          "618:   get_mount_flags(dir, &flags);",
          "619:   if ((flags & (MS_NOEXEC|MS_NODEV|MS_NOSUID)) == (MS_NOEXEC|MS_NODEV|MS_NOSUID))",
          "620:    return;",
          "621:   flags |= MS_NOEXEC|MS_NODEV|MS_NOSUID;",
          "622:   if (arg_debug)",
          "623:    printf(\"Mounting noexec %s\\n\", dir);",
          "626:   if (mount(dir, dir, NULL, MS_BIND|MS_REC, NULL) < 0 ||",
          "627:       mount(NULL, dir, NULL, flags|MS_BIND|MS_REMOUNT, NULL) < 0)",
          "628:    errExit(\"mount noexec\");",
          "629:   fs_logger2(\"noexec\", dir);",
          "634: void fs_noexec_rec(const char *dir) {",
          "",
          "[Added Lines]",
          "481: void fs_remount(const char *dir, OPERATION op) {",
          "487:   if (op == MOUNT_RDWR) {",
          "489:    if (getuid() != 0 && s.st_uid != getuid()) {",
          "490:     fwarning(\"you are not allowed to change %s to read-write\\n\", dir);",
          "491:     return;",
          "492:    }",
          "493:   }",
          "495:   if (get_mount_flags(dir, &flags) != 0) {",
          "496:    fwarning(\"not remounting %s\\n\", dir);",
          "499:   if (op == MOUNT_RDWR) {",
          "500:    if ((flags & MS_RDONLY) == 0)",
          "501:     return;",
          "502:    flags &= ~MS_RDONLY;",
          "504:   else if (op == MOUNT_NOEXEC) {",
          "505:    if ((flags & (MS_NOEXEC|MS_NODEV|MS_NOSUID)) == (MS_NOEXEC|MS_NODEV|MS_NOSUID))",
          "506:     return;",
          "507:    flags |= MS_NOEXEC|MS_NODEV|MS_NOSUID;",
          "508:   }",
          "509:   else if (op == MOUNT_READONLY) {",
          "510:    if ((flags & MS_RDONLY) == MS_RDONLY)",
          "511:     return;",
          "512:    flags |= MS_RDONLY;",
          "513:   }",
          "514:   else",
          "515:    assert(0);",
          "518:    printf(\"Mounting %s %s\\n\", opstr[op], dir);",
          "523:    errExit(\"remounting\");",
          "529:    errLogExit(\"invalid %s mount\", opstr[op]);",
          "530:   fs_logger2(opstr[op], dir);",
          "534: void fs_remount_rec(const char *dir, OPERATION op) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "639:   return;",
          "640:  if (mountid == -2) {",
          "642:   if (!mount_warning) {",
          "643:    fwarning(\"read-only, read-write and noexec options are not applied recursively\\n\");",
          "644:    mount_warning = 1;",
          "645:   }",
          "647:   return;",
          "648:  }",
          "",
          "[Removed Lines]",
          "646:   fs_noexec(dir);",
          "",
          "[Added Lines]",
          "542:   static int mount_warning = 0;",
          "547:   fs_remount(dir, op);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "653:  char **tmp = arr;",
          "654:  while (*tmp) {",
          "656:   free(*tmp++);",
          "657:  }",
          "658:  free(arr);",
          "",
          "[Removed Lines]",
          "655:   fs_noexec(*tmp);",
          "",
          "[Added Lines]",
          "556:   fs_remount(*tmp, op);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "827:  if (arg_debug)",
          "828:   printf(\"Basic read-only filesystem:\\n\");",
          "829:  if (!arg_writable_etc) {",
          "831:   if (uid)",
          "833:  }",
          "834:  if (!arg_writable_var) {",
          "836:   if (uid)",
          "838:  }",
          "848:  fs_var_lock();",
          "",
          "[Removed Lines]",
          "830:   fs_rdonly(\"/etc\");",
          "832:    fs_noexec(\"/etc\");",
          "835:   fs_rdonly(\"/var\");",
          "837:    fs_noexec(\"/var\");",
          "839:  fs_rdonly(\"/bin\");",
          "840:  fs_rdonly(\"/sbin\");",
          "841:  fs_rdonly(\"/lib\");",
          "842:  fs_rdonly(\"/lib64\");",
          "843:  fs_rdonly(\"/lib32\");",
          "844:  fs_rdonly(\"/libx32\");",
          "845:  fs_rdonly(\"/usr\");",
          "",
          "[Added Lines]",
          "731:   fs_remount(\"/etc\", MOUNT_READONLY);",
          "733:    fs_remount(\"/etc\", MOUNT_NOEXEC);",
          "736:   fs_remount(\"/var\", MOUNT_READONLY);",
          "738:    fs_remount(\"/var\", MOUNT_NOEXEC);",
          "740:  fs_remount(\"/bin\", MOUNT_READONLY);",
          "741:  fs_remount(\"/sbin\", MOUNT_READONLY);",
          "742:  fs_remount(\"/lib\", MOUNT_READONLY);",
          "743:  fs_remount(\"/lib64\", MOUNT_READONLY);",
          "744:  fs_remount(\"/lib32\", MOUNT_READONLY);",
          "745:  fs_remount(\"/libx32\", MOUNT_READONLY);",
          "746:  fs_remount(\"/usr\", MOUNT_READONLY);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "851:  if (!arg_writable_var_log)",
          "852:   fs_var_log();",
          "853:  else",
          "856:  fs_var_lib();",
          "857:  fs_var_cache();",
          "",
          "[Removed Lines]",
          "854:   fs_rdwr(\"/var/log\");",
          "",
          "[Added Lines]",
          "755:   fs_remount(\"/var/log\", MOUNT_RDWR);",
          "",
          "---------------"
        ],
        "src/firejail/pulseaudio.c||src/firejail/pulseaudio.c": [
          "File: src/firejail/pulseaudio.c -> src/firejail/pulseaudio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  if (mkdir(RUN_PULSE_DIR, 0700) == -1)",
          "89:   errExit(\"mkdir\");",
          "94:  char *pulsecfg = NULL;",
          "",
          "[Removed Lines]",
          "91:  fs_noexec(RUN_PULSE_DIR);",
          "",
          "[Added Lines]",
          "91:  fs_remount(RUN_PULSE_DIR, MOUNT_NOEXEC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   if (fstatvfs(fd, &vfs) == -1)",
          "156:    errExit(\"fstatvfs\");",
          "157:   if ((vfs.f_flag & MS_RDONLY) == MS_RDONLY)",
          "160:   char *proc;",
          "161:   if (asprintf(&proc, \"/proc/self/fd/%d\", fd) == -1)",
          "",
          "[Removed Lines]",
          "158:    fs_rdonly(RUN_PULSE_DIR);",
          "",
          "[Added Lines]",
          "158:    fs_remount(RUN_PULSE_DIR, MOUNT_READONLY);",
          "",
          "---------------"
        ],
        "src/firejail/sandbox.c||src/firejail/sandbox.c": [
          "File: src/firejail/sandbox.c -> src/firejail/sandbox.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1106:   (void) rv;",
          "1107:  }",
          "1110: #endif",
          "",
          "[Removed Lines]",
          "1109:  fs_rdonly(RUN_SECCOMP_DIR);",
          "",
          "[Added Lines]",
          "1109:  fs_remount(RUN_SECCOMP_DIR, MOUNT_READONLY);",
          "",
          "---------------"
        ],
        "src/firejail/x11.c||src/firejail/x11.c": [
          "File: src/firejail/x11.c -> src/firejail/x11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1169:  umount(\"/tmp\");",
          "1175:  char *dest;",
          "",
          "[Removed Lines]",
          "1172:  fs_noexec(RUN_XAUTHORITY_SEC_FILE);",
          "",
          "[Added Lines]",
          "1172:  fs_remount(RUN_XAUTHORITY_SEC_FILE, MOUNT_NOEXEC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1202:  if (fstatvfs(fd, &vfs) == -1)",
          "1203:   errExit(\"fstatvfs\");",
          "1204:  if ((vfs.f_flag & MS_RDONLY) == MS_RDONLY)",
          "1208:  char *proc;",
          "",
          "[Removed Lines]",
          "1205:   fs_rdonly(RUN_XAUTHORITY_SEC_FILE);",
          "",
          "[Added Lines]",
          "1205:   fs_remount(RUN_XAUTHORITY_SEC_FILE, MOUNT_READONLY);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a3a7eb06fc08e17097f8ffe14cd24485902c9a6",
      "candidate_info": {
        "commit_hash": "6a3a7eb06fc08e17097f8ffe14cd24485902c9a6",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/6a3a7eb06fc08e17097f8ffe14cd24485902c9a6",
        "files": [
          "src/firejail/firejail.h",
          "src/firejail/join.c",
          "src/firejail/seccomp.c",
          "test/filters/seccomp-run-files.exp"
        ],
        "message": "fix join/seccomp #2296",
        "before_after_code_files": [
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/join.c||src/firejail/join.c",
          "src/firejail/seccomp.c||src/firejail/seccomp.c",
          "test/filters/seccomp-run-files.exp||test/filters/seccomp-run-files.exp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/firejail.h||src/firejail/firejail.h"
          ],
          "candidate": [
            "src/firejail/firejail.h||src/firejail/firejail.h"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #define RUN_LIB_FILE \"/run/firejail/mnt/libfiles\"",
          "58: #define RUN_DNS_ETC \"/run/firejail/mnt/dns-etc\"",
          "61: #define RUN_SECCOMP_PROTOCOL \"/run/firejail/mnt/seccomp.protocol\" // protocol filter",
          "62: #define RUN_SECCOMP_CFG \"/run/firejail/mnt/seccomp\"   // configured filter",
          "63: #define RUN_SECCOMP_32 \"/run/firejail/mnt/seccomp.32\"  // 32bit arch filter installed on 64bit architectures",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #define RUN_SECCOMP_LIST \"/run/firejail/mnt/seccomp.list\" // list of seccomp files installed",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607: void seccomp_print_filter(pid_t pid);",
          "610: int caps_default_filter(void);",
          "611: void caps_print(void);",
          "612: void caps_drop_all(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610: void seccomp_load_file_list(void);",
          "",
          "---------------"
        ],
        "src/firejail/join.c||src/firejail/join.c": [
          "File: src/firejail/join.c -> src/firejail/join.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:  free(fname);",
          "161: }",
          "165:  char *file;",
          "166:  if (asprintf(&file, \"/proc/%u/status\", pid) == -1) {",
          "",
          "[Removed Lines]",
          "163: static void extract_caps_seccomp(pid_t pid) {",
          "",
          "[Added Lines]",
          "163: static void extract_caps(pid_t pid) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:  char buf[BUFLEN];",
          "175:  while (fgets(buf, BUFLEN - 1, fp)) {",
          "186:    char *ptr = buf + 7;",
          "187:    unsigned long long val;",
          "188:    if (sscanf(ptr, \"%llx\", &val) != 1)",
          "",
          "[Removed Lines]",
          "176:   if (strncmp(buf, \"Seccomp:\", 8) == 0) {",
          "177:    char *ptr = buf + 8;",
          "178:    int val;",
          "179:    if (sscanf(ptr, \"%d\", &val) != 1)",
          "180:     goto errexit;",
          "181:    if (val == 2)",
          "182:     apply_seccomp = 1;",
          "183:    break;",
          "184:   }",
          "185:   else if (strncmp(buf, \"CapBnd:\", 7) == 0) {",
          "",
          "[Added Lines]",
          "176:   if (strncmp(buf, \"CapBnd:\", 7) == 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:  if (getuid() != 0) {",
          "325:   extract_nonewprivs(pid);  // redundant on Linux >= 4.10; duplicated in function extract_caps_seccomp",
          "327:   extract_cpu(pid);",
          "328:   extract_cgroup(pid);",
          "329:   extract_nogroups(pid);",
          "",
          "[Removed Lines]",
          "326:   extract_caps_seccomp(pid);",
          "",
          "[Added Lines]",
          "317:   extract_caps(pid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "397:   if (apply_caps == 1) // not available for uid 0",
          "398:    caps_set(caps);",
          "399: #ifdef HAVE_SECCOMP",
          "401:   if (getuid() != 0)",
          "409: #endif",
          "",
          "[Removed Lines]",
          "402:    protocol_filter_load(RUN_PROTOCOL_CFG);",
          "403:   if (cfg.protocol)  // not available for uid 0",
          "404:    seccomp_load(RUN_SECCOMP_PROTOCOL); // install filter",
          "407:   if (apply_seccomp == 1)  // not available for uid 0",
          "408:    seccomp_load(RUN_SECCOMP_CFG);",
          "",
          "[Added Lines]",
          "392:    seccomp_load_file_list();",
          "",
          "---------------"
        ],
        "src/firejail/seccomp.c||src/firejail/seccomp.c": [
          "File: src/firejail/seccomp.c -> src/firejail/seccomp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  return r;",
          "84: }",
          "86: int seccomp_load(const char *fname) {",
          "87:  assert(fname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: static void seccomp_save_file_list(const char *fname) {",
          "87:  assert(fname);",
          "89:  FILE *fp = fopen(RUN_SECCOMP_LIST, \"a+\");",
          "90:  if (!fp)",
          "91:   errExit(\"fopen\");",
          "93:  fprintf(fp, \"%s\\n\", fname);",
          "94:  fclose(fp);",
          "95:  int rv = chown(RUN_SECCOMP_LIST, getuid(), getgid());",
          "96:  (void) rv;",
          "97: }",
          "99: #define MAXBUF 4096",
          "100: static int load_file_list_flag = 0;",
          "101: void seccomp_load_file_list(void) {",
          "102:  FILE *fp = fopen(RUN_SECCOMP_LIST, \"r\");",
          "103:  if (!fp)",
          "104:   return; // no seccomp configuration whatsoever",
          "106:  load_file_list_flag = 1;",
          "107:  char buf[MAXBUF];",
          "108:  while (fgets(buf, MAXBUF, fp)) {",
          "110:   char *ptr = strchr(buf, '\\n');",
          "111:   if (ptr)",
          "113:   seccomp_load(buf);",
          "114:  }",
          "116:  fclose(fp);",
          "117:  load_file_list_flag = 0;",
          "118: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:    PATH_FSEC_PRINT, fname);",
          "126:  }",
          "128:  return 0;",
          "129: errexit:",
          "130:  fprintf(stderr, \"Error: cannot read %s\\n\", fname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:  if (!load_file_list_flag)",
          "165:   seccomp_save_file_list(fname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308:   }",
          "309:  }",
          "312:  EUID_ROOT();",
          "313:  char *fname;",
          "315:   errExit(\"asprintf\");",
          "317:  struct stat s;",
          "325:  free(fname);",
          "327:  exit(0);",
          "328: }",
          "330: #endif // HAVE_SECCOMP",
          "",
          "[Removed Lines]",
          "314:  if (asprintf(&fname, \"/proc/%d/root%s\", pid, RUN_SECCOMP_CFG) == -1)",
          "318:  if (stat(fname, &s) == -1) {",
          "319:   printf(\"Cannot access seccomp filter.\\n\");",
          "320:   exit(1);",
          "321:  }",
          "324:  sbox_run(SBOX_ROOT | SBOX_SECCOMP, 2, PATH_FSEC_PRINT, fname);",
          "",
          "[Added Lines]",
          "353:  if (asprintf(&fname, \"/proc/%d/root%s\", pid, RUN_SECCOMP_LIST) == -1)",
          "357:  if (stat(fname, &s) == -1)",
          "358:   goto errexit;",
          "360:  FILE *fp = fopen(fname, \"r\");",
          "361:  if (!fp)",
          "362:   goto errexit;",
          "365:  char buf[MAXBUF];",
          "366:  while (fgets(buf, MAXBUF, fp)) {",
          "368:   char *ptr = strchr(buf, '\\n');",
          "369:   if (ptr)",
          "372:   if (asprintf(&fname, \"/proc/%d/root%s\", pid, buf) == -1)",
          "373:    errExit(\"asprintf\");",
          "374:   printf(\"FILE: %s\\n\", fname); fflush(0);",
          "377:   sbox_run(SBOX_ROOT | SBOX_SECCOMP, 2, PATH_FSEC_PRINT, fname);",
          "378:   fflush(0);",
          "380:   printf(\"\\n\"); fflush(0);",
          "381:   free(fname);",
          "382:  }",
          "383:  fclose(fp);",
          "386: errexit:",
          "387:  printf(\"Cannot access seccomp filter.\\n\");",
          "388:  exit(1);",
          "",
          "---------------"
        ],
        "test/filters/seccomp-run-files.exp||test/filters/seccomp-run-files.exp": [
          "File: test/filters/seccomp-run-files.exp -> test/filters/seccomp-run-files.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: send -- \"ls -l /run/firejail/mnt | grep -c seccomp\\r\"",
          "25: expect {",
          "26:  timeout {puts \"TESTING ERROR 3\\n\";exit}",
          "28: }",
          "29: send -- \"exit\\r\"",
          "30: sleep 1",
          "",
          "[Removed Lines]",
          "27:  \"4\"",
          "",
          "[Added Lines]",
          "27:  \"5\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: send -- \"ls -l /run/firejail/mnt | grep -c seccomp\\r\"",
          "91: expect {",
          "92:  timeout {puts \"TESTING ERROR 18\\n\";exit}",
          "94: }",
          "95: send -- \"exit\\r\"",
          "96: sleep 1",
          "",
          "[Removed Lines]",
          "93:  \"5\"",
          "",
          "[Added Lines]",
          "93:  \"6\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}