{
  "cve_id": "CVE-2015-5268",
  "cve_desc": "The rating component in Moodle through 2.6.11, 2.7.x before 2.7.10, 2.8.x before 2.8.8, and 2.9.x before 2.9.2 mishandles group-based authorization checks, which allows remote authenticated users to obtain sensitive information by reading a rating value.",
  "repo": "moodle/moodle",
  "patch_hash": "731c2712e746053b1ca06b50118632305b447e02",
  "patch_info": {
    "commit_hash": "731c2712e746053b1ca06b50118632305b447e02",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/731c2712e746053b1ca06b50118632305b447e02",
    "files": [
      "mod/data/lib.php",
      "mod/data/tests/lib_test.php",
      "mod/forum/lib.php",
      "mod/forum/tests/lib_test.php",
      "mod/upgrade.txt",
      "rating/classes/external.php",
      "rating/index.php",
      "rating/tests/externallib_test.php"
    ],
    "message": "MDL-50173 ratings: Use proper checks to ensure ratings are viewable.\n\nMainly to verify groups visibility this new callback has been created.\n\nNote this was originally 3 commits but for amending purposes they have\nbeen squashed.",
    "before_after_code_files": [
      "mod/data/lib.php||mod/data/lib.php",
      "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
      "mod/forum/lib.php||mod/forum/lib.php",
      "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
      "rating/classes/external.php||rating/classes/external.php",
      "rating/index.php||rating/index.php",
      "rating/tests/externallib_test.php||rating/tests/externallib_test.php"
    ]
  },
  "patch_diff": {
    "mod/data/lib.php||mod/data/lib.php": [
      "File: mod/data/lib.php -> mod/data/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1524:     return true;",
      "1525: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1540: function mod_data_rating_can_see_item_ratings($params) {",
      "1541:     global $DB;",
      "1544:     if (!isset($params['component']) || $params['component'] != 'mod_data') {",
      "1545:         throw new rating_exception('invalidcomponent');",
      "1546:     }",
      "1549:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'entry') {",
      "1550:         throw new rating_exception('invalidratingarea');",
      "1551:     }",
      "1553:     if (!isset($params['itemid'])) {",
      "1554:         throw new rating_exception('invaliditemid');",
      "1555:     }",
      "1557:     $datasql = \"SELECT d.id as dataid, d.course, r.groupid",
      "1558:                   FROM {data_records} r",
      "1559:                   JOIN {data} d ON r.dataid = d.id",
      "1560:                  WHERE r.id = :itemid\";",
      "1561:     $dataparams = array('itemid' => $params['itemid']);",
      "1562:     if (!$info = $DB->get_record_sql($datasql, $dataparams)) {",
      "1564:         throw new rating_exception('invaliditemid');",
      "1565:     }",
      "1567:     $course = $DB->get_record('course', array('id' => $info->course), '*', MUST_EXIST);",
      "1568:     $cm = get_coursemodule_from_instance('data', $info->dataid, $course->id, false, MUST_EXIST);",
      "1571:     return groups_group_visible($info->groupid, $course, $cm);",
      "1572: }",
      "",
      "---------------"
    ],
    "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php": [
      "File: mod/data/tests/lib_test.php -> mod/data/tests/lib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:         global $DB;",
      "43:         $this->resetAfterTest();",
      "",
      "[Removed Lines]",
      "38: class data_lib_testcase extends advanced_testcase {",
      "40:     function test_data_delete_record() {",
      "",
      "[Added Lines]",
      "38: class mod_data_lib_testcase extends advanced_testcase {",
      "40:     public function test_data_delete_record() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "231:         $this->assertEquals($url, $event->get_url());",
      "232:         $this->assertEventContextNotUsed($event);",
      "233:     }",
      "234: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "241:     public function test_mod_data_rating_can_see_item_ratings() {",
      "242:         global $DB;",
      "244:         $this->resetAfterTest();",
      "247:         $course = new stdClass();",
      "248:         $course->groupmode = SEPARATEGROUPS;",
      "249:         $course->groupmodeforce = true;",
      "250:         $course = $this->getDataGenerator()->create_course($course);",
      "251:         $data = $this->getDataGenerator()->create_module('data', array('course' => $course->id));",
      "252:         $cm = get_coursemodule_from_instance('data', $data->id);",
      "253:         $context = context_module::instance($cm->id);",
      "256:         $user1 = $this->getDataGenerator()->create_user();",
      "257:         $user2 = $this->getDataGenerator()->create_user();",
      "258:         $user3 = $this->getDataGenerator()->create_user();",
      "259:         $user4 = $this->getDataGenerator()->create_user();",
      "262:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
      "263:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
      "264:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
      "265:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
      "266:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
      "268:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "269:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "270:         groups_add_member($group1, $user1);",
      "271:         groups_add_member($group1, $user2);",
      "272:         groups_add_member($group2, $user3);",
      "273:         groups_add_member($group2, $user4);",
      "276:         $field = data_get_field_new('text', $data);",
      "278:         $fielddetail = new stdClass();",
      "279:         $fielddetail->name = 'Name';",
      "280:         $fielddetail->description = 'Some name';",
      "282:         $field->define_field($fielddetail);",
      "283:         $field->insert_field();",
      "284:         $recordid = data_add_record($data, $group1->id);",
      "286:         $datacontent = array();",
      "287:         $datacontent['fieldid'] = $field->field->id;",
      "288:         $datacontent['recordid'] = $recordid;",
      "289:         $datacontent['content'] = 'Asterix';",
      "290:         $DB->insert_record('data_content', $datacontent);",
      "293:         unassign_capability('moodle/site:accessallgroups', $role->id);",
      "294:         $params = array('contextid' => 2,",
      "295:                         'component' => 'mod_data',",
      "296:                         'ratingarea' => 'entry',",
      "297:                         'itemid' => $recordid,",
      "298:                         'scaleid' => 2);",
      "299:         $this->setUser($user1);",
      "300:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "301:         $this->setUser($user2);",
      "302:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "303:         $this->setUser($user3);",
      "304:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
      "305:         $this->setUser($user4);",
      "306:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
      "309:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
      "310:         $this->setUser($user1);",
      "311:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "312:         $this->setUser($user2);",
      "313:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "314:         $this->setUser($user3);",
      "315:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "316:         $this->setUser($user4);",
      "317:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "320:         $course->groupmode = VISIBLEGROUPS;",
      "321:         $DB->update_record('course', $course);",
      "322:         unassign_capability('moodle/site:accessallgroups', $role->id);",
      "323:         $this->setUser($user1);",
      "324:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "325:         $this->setUser($user2);",
      "326:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "327:         $this->setUser($user3);",
      "328:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "329:         $this->setUser($user4);",
      "330:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
      "332:     }",
      "",
      "---------------"
    ],
    "mod/forum/lib.php||mod/forum/lib.php": [
      "File: mod/forum/lib.php -> mod/forum/lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "3664:     return true;",
      "3665: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3680: function mod_forum_rating_can_see_item_ratings($params) {",
      "3681:     global $DB, $USER;",
      "3684:     if (!isset($params['component']) || $params['component'] != 'mod_forum') {",
      "3685:         throw new rating_exception('invalidcomponent');",
      "3686:     }",
      "3689:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'post') {",
      "3690:         throw new rating_exception('invalidratingarea');",
      "3691:     }",
      "3693:     if (!isset($params['itemid'])) {",
      "3694:         throw new rating_exception('invaliditemid');",
      "3695:     }",
      "3697:     $post = $DB->get_record('forum_posts', array('id' => $params['itemid']), '*', MUST_EXIST);",
      "3698:     $discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion), '*', MUST_EXIST);",
      "3699:     $forum = $DB->get_record('forum', array('id' => $discussion->forum), '*', MUST_EXIST);",
      "3700:     $course = $DB->get_record('course', array('id' => $forum->course), '*', MUST_EXIST);",
      "3701:     $cm = get_coursemodule_from_instance('forum', $forum->id, $course->id , false, MUST_EXIST);",
      "3704:     if (!forum_user_can_see_post($forum, $discussion, $post, $USER, $cm)) {",
      "3705:         return false;",
      "3706:     }",
      "3707:     return true;",
      "3708: }",
      "",
      "---------------"
    ],
    "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php": [
      "File: mod/forum/tests/lib_test.php -> mod/forum/tests/lib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: global $CFG;",
      "28: require_once($CFG->dirroot . '/mod/forum/lib.php');",
      "30: class mod_forum_lib_testcase extends advanced_testcase {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: require_once($CFG->dirroot . '/rating/lib.php');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1394:         return $discussion;",
      "1395:     }",
      "1397: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1404:     public function test_mod_forum_rating_can_see_item_ratings() {",
      "1405:         global $DB;",
      "1407:         $this->resetAfterTest();",
      "1410:         $course = new stdClass();",
      "1411:         $course->groupmode = SEPARATEGROUPS;",
      "1412:         $course->groupmodeforce = true;",
      "1413:         $course = $this->getDataGenerator()->create_course($course);",
      "1414:         $forum = $this->getDataGenerator()->create_module('forum', array('course' => $course->id));",
      "1415:         $generator = self::getDataGenerator()->get_plugin_generator('mod_forum');",
      "1416:         $cm = get_coursemodule_from_instance('forum', $forum->id);",
      "1417:         $context = context_module::instance($cm->id);",
      "1420:         $user1 = $this->getDataGenerator()->create_user();",
      "1421:         $user2 = $this->getDataGenerator()->create_user();",
      "1422:         $user3 = $this->getDataGenerator()->create_user();",
      "1423:         $user4 = $this->getDataGenerator()->create_user();",
      "1426:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
      "1427:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
      "1428:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
      "1429:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
      "1430:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
      "1432:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "1433:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "1434:         groups_add_member($group1, $user1);",
      "1435:         groups_add_member($group1, $user2);",
      "1436:         groups_add_member($group2, $user3);",
      "1437:         groups_add_member($group2, $user4);",
      "1439:         $record = new stdClass();",
      "1440:         $record->course = $forum->course;",
      "1441:         $record->forum = $forum->id;",
      "1442:         $record->userid = $user1->id;",
      "1443:         $record->groupid = $group1->id;",
      "1444:         $discussion = $generator->create_discussion($record);",
      "1447:         $post = $DB->get_record('forum_posts', array('discussion' => $discussion->id));",
      "1449:         $ratingoptions = new stdClass;",
      "1450:         $ratingoptions->context = $context;",
      "1451:         $ratingoptions->ratingarea = 'post';",
      "1452:         $ratingoptions->component = 'mod_forum';",
      "1453:         $ratingoptions->itemid  = $post->id;",
      "1454:         $ratingoptions->scaleid = 2;",
      "1455:         $ratingoptions->userid  = $user2->id;",
      "1456:         $rating = new rating($ratingoptions);",
      "1457:         $rating->update_rating(2);",
      "1460:         unassign_capability('moodle/site:accessallgroups', $role->id);",
      "1461:         $params = array('contextid' => 2,",
      "1462:                         'component' => 'mod_forum',",
      "1463:                         'ratingarea' => 'post',",
      "1464:                         'itemid' => $post->id,",
      "1465:                         'scaleid' => 2);",
      "1466:         $this->setUser($user1);",
      "1467:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1468:         $this->setUser($user2);",
      "1469:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1470:         $this->setUser($user3);",
      "1471:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
      "1472:         $this->setUser($user4);",
      "1473:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
      "1476:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
      "1477:         $this->setUser($user1);",
      "1478:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1479:         $this->setUser($user2);",
      "1480:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1481:         $this->setUser($user3);",
      "1482:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1483:         $this->setUser($user4);",
      "1484:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1487:         $course->groupmode = VISIBLEGROUPS;",
      "1488:         $DB->update_record('course', $course);",
      "1489:         unassign_capability('moodle/site:accessallgroups', $role->id);",
      "1490:         $this->setUser($user1);",
      "1491:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1492:         $this->setUser($user2);",
      "1493:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1494:         $this->setUser($user3);",
      "1495:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1496:         $this->setUser($user4);",
      "1497:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
      "1499:     }",
      "",
      "---------------"
    ],
    "rating/classes/external.php||rating/classes/external.php": [
      "File: rating/classes/external.php -> rating/classes/external.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "96:         self::validate_context($context);",
      "100:             throw new moodle_exception('noviewrate', 'rating');",
      "101:         }",
      "",
      "[Removed Lines]",
      "99:         if (!has_capability('moodle/rating:view', $context)) {",
      "",
      "[Added Lines]",
      "99:         $callbackparams = array('contextid' => $context->id,",
      "100:                         'component' => $component,",
      "101:                         'ratingarea' => $ratingarea,",
      "102:                         'itemid' => $itemid,",
      "103:                         'scaleid' => $scaleid);",
      "104:         if (!has_capability('moodle/rating:view', $context) ||",
      "105:                 !component_callback($component, 'rating_can_see_item_ratings', array($callbackparams), true)) {",
      "",
      "---------------"
    ],
    "rating/index.php||rating/index.php": [
      "File: rating/index.php -> rating/index.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:     $PAGE->set_pagelayout('popup');",
      "56: }",
      "59:     print_error('noviewrate', 'rating');",
      "60: }",
      "",
      "[Removed Lines]",
      "58: if (!has_capability('moodle/rating:view', $context)) {",
      "",
      "[Added Lines]",
      "58: $params = array('contextid' => $contextid,",
      "59:                 'component' => $component,",
      "60:                 'ratingarea' => $ratingarea,",
      "61:                 'itemid' => $itemid,",
      "62:                 'scaleid' => $scaleid);",
      "63: if (!has_capability('moodle/rating:view', $context) ||",
      "64:         !component_callback($component, 'rating_can_see_item_ratings', array($params), true)) {",
      "",
      "---------------"
    ],
    "rating/tests/externallib_test.php||rating/tests/externallib_test.php": [
      "File: rating/tests/externallib_test.php -> rating/tests/externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:         $student = $this->getDataGenerator()->create_user();",
      "54:         $teacher1 = $this->getDataGenerator()->create_user();",
      "55:         $teacher2 = $this->getDataGenerator()->create_user();",
      "56:         $studentrole = $DB->get_record('role', array('shortname' => 'student'));",
      "57:         $teacherrole = $DB->get_record('role', array('shortname' => 'teacher'));",
      "59:         $this->getDataGenerator()->enrol_user($student->id,  $course->id, $studentrole->id);",
      "60:         $this->getDataGenerator()->enrol_user($teacher1->id, $course->id, $teacherrole->id);",
      "61:         $this->getDataGenerator()->enrol_user($teacher2->id, $course->id, $teacherrole->id);",
      "64:         $record = new stdClass();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56:         $teacher3 = $this->getDataGenerator()->create_user();",
      "59:         unassign_capability('moodle/site:accessallgroups', $teacherrole->id);",
      "64:         $this->getDataGenerator()->enrol_user($teacher3->id, $course->id, $teacherrole->id);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:         $record->userid = $student->id;",
      "77:         $record->forum = $forum->id;",
      "78:         $discussion = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
      "81:         $rating1 = new stdClass();",
      "82:         $rating1->contextid = $contextid;",
      "83:         $rating1->component = 'mod_forum';",
      "84:         $rating1->ratingarea = 'post';",
      "86:         $rating1->rating = 90;",
      "87:         $rating1->scaleid = 100;",
      "88:         $rating1->userid = $teacher1->id;",
      "",
      "[Removed Lines]",
      "85:         $rating1->itemid = $discussion->id;",
      "",
      "[Added Lines]",
      "83:         $post = $DB->get_record('forum_posts', array('discussion' => $discussion->id));",
      "90:         $rating1->itemid = $post->id;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:         $rating2->contextid = $contextid;",
      "96:         $rating2->component = 'mod_forum';",
      "97:         $rating2->ratingarea = 'post';",
      "99:         $rating2->rating = 95;",
      "100:         $rating2->scaleid = 100;",
      "101:         $rating2->userid = $teacher2->id;",
      "",
      "[Removed Lines]",
      "98:         $rating2->itemid = $discussion->id;",
      "",
      "[Added Lines]",
      "103:         $rating2->itemid = $post->id;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:         $this->setUser($teacher1);",
      "114:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "115:         $this->assertCount(2, $ratings['ratings']);",
      "",
      "[Removed Lines]",
      "112:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $discussion->id, 100, '');",
      "",
      "[Added Lines]",
      "117:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "128:         $this->setUser($student);",
      "132:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "133:         $this->assertCount(2, $ratings['ratings']);",
      "148:         try {",
      "150:             $this->fail('Exception expected due invalid context.');",
      "151:         } catch (invalid_parameter_exception $e) {",
      "152:             $this->assertEquals('invalidparameter', $e->errorcode);",
      "153:         }",
      "154:     }",
      "155: }",
      "",
      "[Removed Lines]",
      "130:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $discussion->id, 100, '');",
      "136:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', 0, 100, '');",
      "138:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "139:         $this->assertCount(0, $ratings['ratings']);",
      "142:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'xyz', $discussion->id, 100, '');",
      "144:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "145:         $this->assertCount(0, $ratings['ratings']);",
      "149:             $ratings = core_rating_external::get_item_ratings('module', 0, 'mod_forum', 'post', $discussion->id, 100, '');",
      "",
      "[Added Lines]",
      "135:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
      "141:         try {",
      "142:             $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', 0, 100, '');",
      "143:             $this->fail('Exception expected due invalid itemid.');",
      "144:         } catch (moodle_exception $e) {",
      "145:             $this->assertEquals('invalidrecord', $e->errorcode);",
      "146:         }",
      "149:         try {",
      "150:             $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'xyz', $post->id, 100, '');",
      "151:             $this->fail('Exception expected due invalid rating area.');",
      "152:         } catch (moodle_exception $e) {",
      "153:             $this->assertEquals('invalidratingarea', $e->errorcode);",
      "154:         }",
      "158:             $ratings = core_rating_external::get_item_ratings('module', 0, 'mod_forum', 'post', $post->id, 100, '');",
      "165:         set_coursemodule_groupmode($forum->cmid, SEPARATEGROUPS);",
      "166:         $group = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
      "167:         groups_add_member($group, $teacher1);",
      "169:         $discussion->groupid = $group->id;",
      "170:         $DB->update_record('forum_discussions', $discussion);",
      "173:         $this->setUser($teacher1);",
      "174:         $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
      "176:         $ratings = external_api::clean_returnvalue(core_rating_external::get_item_ratings_returns(), $ratings);",
      "177:         $this->assertCount(2, $ratings['ratings']);",
      "179:         $this->setUser($teacher3);",
      "180:         try {",
      "181:             $ratings = core_rating_external::get_item_ratings('module', $forum->cmid, 'mod_forum', 'post', $post->id, 100, '');",
      "182:             $this->fail('Exception expected due invalid group permissions.');",
      "183:         } catch (moodle_exception $e) {",
      "184:             $this->assertEquals('noviewrate', $e->errorcode);",
      "185:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4015226623111438158fa762b7ce61f6cf677665",
      "candidate_info": {
        "commit_hash": "4015226623111438158fa762b7ce61f6cf677665",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4015226623111438158fa762b7ce61f6cf677665",
        "files": [
          "mod/data/lib.php",
          "mod/data/tests/lib_test.php",
          "mod/forum/lib.php",
          "mod/forum/tests/lib_test.php",
          "mod/upgrade.txt",
          "rating/index.php"
        ],
        "message": "MDL-50173 ratings: Use proper checks to ensure ratings are viewable.\n\nMainly to verify groups visibility this new callback has been created.\n\nNote this was originally 2 commits but for amending purposes they have\nbeen squashed.",
        "before_after_code_files": [
          "mod/data/lib.php||mod/data/lib.php",
          "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
          "mod/forum/lib.php||mod/forum/lib.php",
          "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
          "rating/index.php||rating/index.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mod/data/lib.php||mod/data/lib.php",
            "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
            "mod/forum/lib.php||mod/forum/lib.php",
            "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
            "rating/index.php||rating/index.php"
          ],
          "candidate": [
            "mod/data/lib.php||mod/data/lib.php",
            "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php",
            "mod/forum/lib.php||mod/forum/lib.php",
            "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php",
            "rating/index.php||rating/index.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/data/lib.php||mod/data/lib.php": [
          "File: mod/data/lib.php -> mod/data/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1531:     return true;",
          "1532: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1547: function mod_data_rating_can_see_item_ratings($params) {",
          "1548:     global $DB;",
          "1551:     if (!isset($params['component']) || $params['component'] != 'mod_data') {",
          "1552:         throw new rating_exception('invalidcomponent');",
          "1553:     }",
          "1556:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'entry') {",
          "1557:         throw new rating_exception('invalidratingarea');",
          "1558:     }",
          "1560:     if (!isset($params['itemid'])) {",
          "1561:         throw new rating_exception('invaliditemid');",
          "1562:     }",
          "1564:     $datasql = \"SELECT d.id as dataid, d.course, r.groupid",
          "1565:                   FROM {data_records} r",
          "1566:                   JOIN {data} d ON r.dataid = d.id",
          "1567:                  WHERE r.id = :itemid\";",
          "1568:     $dataparams = array('itemid' => $params['itemid']);",
          "1569:     if (!$info = $DB->get_record_sql($datasql, $dataparams)) {",
          "1571:         throw new rating_exception('invaliditemid');",
          "1572:     }",
          "1574:     $course = $DB->get_record('course', array('id' => $info->course), '*', MUST_EXIST);",
          "1575:     $cm = get_coursemodule_from_instance('data', $info->dataid, $course->id, false, MUST_EXIST);",
          "1578:     return groups_group_visible($info->groupid, $course, $cm);",
          "1579: }",
          "",
          "---------------"
        ],
        "mod/data/tests/lib_test.php||mod/data/tests/lib_test.php": [
          "File: mod/data/tests/lib_test.php -> mod/data/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         global $DB;",
          "43:         $this->resetAfterTest();",
          "",
          "[Removed Lines]",
          "38: class data_lib_testcase extends advanced_testcase {",
          "40:     function test_data_delete_record() {",
          "",
          "[Added Lines]",
          "38: class mod_data_lib_testcase extends advanced_testcase {",
          "40:     public function test_data_delete_record() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:         $this->assertEquals($url, $event->get_url());",
          "232:         $this->assertEventContextNotUsed($event);",
          "233:     }",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:     public function test_mod_data_rating_can_see_item_ratings() {",
          "242:         global $DB;",
          "244:         $this->resetAfterTest();",
          "247:         $course = new stdClass();",
          "248:         $course->groupmode = SEPARATEGROUPS;",
          "249:         $course->groupmodeforce = true;",
          "250:         $course = $this->getDataGenerator()->create_course($course);",
          "251:         $data = $this->getDataGenerator()->create_module('data', array('course' => $course->id));",
          "252:         $cm = get_coursemodule_from_instance('data', $data->id);",
          "253:         $context = context_module::instance($cm->id);",
          "256:         $user1 = $this->getDataGenerator()->create_user();",
          "257:         $user2 = $this->getDataGenerator()->create_user();",
          "258:         $user3 = $this->getDataGenerator()->create_user();",
          "259:         $user4 = $this->getDataGenerator()->create_user();",
          "262:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
          "263:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
          "264:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
          "265:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
          "266:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
          "268:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "269:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "270:         groups_add_member($group1, $user1);",
          "271:         groups_add_member($group1, $user2);",
          "272:         groups_add_member($group2, $user3);",
          "273:         groups_add_member($group2, $user4);",
          "276:         $field = data_get_field_new('text', $data);",
          "278:         $fielddetail = new stdClass();",
          "279:         $fielddetail->name = 'Name';",
          "280:         $fielddetail->description = 'Some name';",
          "282:         $field->define_field($fielddetail);",
          "283:         $field->insert_field();",
          "284:         $recordid = data_add_record($data, $group1->id);",
          "286:         $datacontent = array();",
          "287:         $datacontent['fieldid'] = $field->field->id;",
          "288:         $datacontent['recordid'] = $recordid;",
          "289:         $datacontent['content'] = 'Asterix';",
          "290:         $DB->insert_record('data_content', $datacontent);",
          "293:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "294:         $params = array('contextid' => 2,",
          "295:                         'component' => 'mod_data',",
          "296:                         'ratingarea' => 'entry',",
          "297:                         'itemid' => $recordid,",
          "298:                         'scaleid' => 2);",
          "299:         $this->setUser($user1);",
          "300:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "301:         $this->setUser($user2);",
          "302:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "303:         $this->setUser($user3);",
          "304:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
          "305:         $this->setUser($user4);",
          "306:         $this->assertFalse(mod_data_rating_can_see_item_ratings($params));",
          "309:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
          "310:         $this->setUser($user1);",
          "311:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "312:         $this->setUser($user2);",
          "313:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "314:         $this->setUser($user3);",
          "315:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "316:         $this->setUser($user4);",
          "317:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "320:         $course->groupmode = VISIBLEGROUPS;",
          "321:         $DB->update_record('course', $course);",
          "322:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "323:         $this->setUser($user1);",
          "324:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "325:         $this->setUser($user2);",
          "326:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "327:         $this->setUser($user3);",
          "328:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "329:         $this->setUser($user4);",
          "330:         $this->assertTrue(mod_data_rating_can_see_item_ratings($params));",
          "332:     }",
          "",
          "---------------"
        ],
        "mod/forum/lib.php||mod/forum/lib.php": [
          "File: mod/forum/lib.php -> mod/forum/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3772:     return true;",
          "3773: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3788: function mod_forum_rating_can_see_item_ratings($params) {",
          "3789:     global $DB, $USER;",
          "3792:     if (!isset($params['component']) || $params['component'] != 'mod_forum') {",
          "3793:         throw new rating_exception('invalidcomponent');",
          "3794:     }",
          "3797:     if (!isset($params['ratingarea']) || $params['ratingarea'] != 'post') {",
          "3798:         throw new rating_exception('invalidratingarea');",
          "3799:     }",
          "3801:     if (!isset($params['itemid'])) {",
          "3802:         throw new rating_exception('invaliditemid');",
          "3803:     }",
          "3805:     $post = $DB->get_record('forum_posts', array('id' => $params['itemid']), '*', MUST_EXIST);",
          "3806:     $discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion), '*', MUST_EXIST);",
          "3807:     $forum = $DB->get_record('forum', array('id' => $discussion->forum), '*', MUST_EXIST);",
          "3808:     $course = $DB->get_record('course', array('id' => $forum->course), '*', MUST_EXIST);",
          "3809:     $cm = get_coursemodule_from_instance('forum', $forum->id, $course->id , false, MUST_EXIST);",
          "3812:     if (!forum_user_can_see_post($forum, $discussion, $post, $USER, $cm)) {",
          "3813:         return false;",
          "3814:     }",
          "3815:     return true;",
          "3816: }",
          "",
          "---------------"
        ],
        "mod/forum/tests/lib_test.php||mod/forum/tests/lib_test.php": [
          "File: mod/forum/tests/lib_test.php -> mod/forum/tests/lib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: class mod_forum_lib_testcase extends advanced_testcase {",
          "29:     public function test_forum_trigger_content_uploaded_event() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: global $CFG;",
          "28: require_once($CFG->dirroot . '/mod/forum/lib.php');",
          "29: require_once($CFG->dirroot . '/rating/lib.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "833:         return $discussion;",
          "834:     }",
          "836: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "846:     public function test_mod_forum_rating_can_see_item_ratings() {",
          "847:         global $DB;",
          "849:         $this->resetAfterTest();",
          "852:         $course = new stdClass();",
          "853:         $course->groupmode = SEPARATEGROUPS;",
          "854:         $course->groupmodeforce = true;",
          "855:         $course = $this->getDataGenerator()->create_course($course);",
          "856:         $forum = $this->getDataGenerator()->create_module('forum', array('course' => $course->id));",
          "857:         $generator = self::getDataGenerator()->get_plugin_generator('mod_forum');",
          "858:         $cm = get_coursemodule_from_instance('forum', $forum->id);",
          "859:         $context = context_module::instance($cm->id);",
          "862:         $user1 = $this->getDataGenerator()->create_user();",
          "863:         $user2 = $this->getDataGenerator()->create_user();",
          "864:         $user3 = $this->getDataGenerator()->create_user();",
          "865:         $user4 = $this->getDataGenerator()->create_user();",
          "868:         $role = $DB->get_record('role', array('shortname' => 'teacher'), '*', MUST_EXIST);",
          "869:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, $role->id);",
          "870:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, $role->id);",
          "871:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, $role->id);",
          "872:         $this->getDataGenerator()->enrol_user($user4->id, $course->id, $role->id);",
          "874:         $group1 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "875:         $group2 = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "876:         groups_add_member($group1, $user1);",
          "877:         groups_add_member($group1, $user2);",
          "878:         groups_add_member($group2, $user3);",
          "879:         groups_add_member($group2, $user4);",
          "881:         $record = new stdClass();",
          "882:         $record->course = $forum->course;",
          "883:         $record->forum = $forum->id;",
          "884:         $record->userid = $user1->id;",
          "885:         $record->groupid = $group1->id;",
          "886:         $discussion = $generator->create_discussion($record);",
          "889:         $post = $DB->get_record('forum_posts', array('discussion' => $discussion->id));",
          "891:         $ratingoptions = new stdClass;",
          "892:         $ratingoptions->context = $context;",
          "893:         $ratingoptions->ratingarea = 'post';",
          "894:         $ratingoptions->component = 'mod_forum';",
          "895:         $ratingoptions->itemid  = $post->id;",
          "896:         $ratingoptions->scaleid = 2;",
          "897:         $ratingoptions->userid  = $user2->id;",
          "898:         $rating = new rating($ratingoptions);",
          "899:         $rating->update_rating(2);",
          "902:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "903:         $params = array('contextid' => 2,",
          "904:                         'component' => 'mod_forum',",
          "905:                         'ratingarea' => 'post',",
          "906:                         'itemid' => $post->id,",
          "907:                         'scaleid' => 2);",
          "908:         $this->setUser($user1);",
          "909:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "910:         $this->setUser($user2);",
          "911:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "912:         $this->setUser($user3);",
          "913:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
          "914:         $this->setUser($user4);",
          "915:         $this->assertFalse(mod_forum_rating_can_see_item_ratings($params));",
          "918:         assign_capability('moodle/site:accessallgroups', CAP_ALLOW, $role->id, $context->id);",
          "919:         $this->setUser($user1);",
          "920:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "921:         $this->setUser($user2);",
          "922:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "923:         $this->setUser($user3);",
          "924:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "925:         $this->setUser($user4);",
          "926:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "929:         $course->groupmode = VISIBLEGROUPS;",
          "930:         $DB->update_record('course', $course);",
          "931:         unassign_capability('moodle/site:accessallgroups', $role->id);",
          "932:         $this->setUser($user1);",
          "933:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "934:         $this->setUser($user2);",
          "935:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "936:         $this->setUser($user3);",
          "937:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "938:         $this->setUser($user4);",
          "939:         $this->assertTrue(mod_forum_rating_can_see_item_ratings($params));",
          "941:     }",
          "",
          "---------------"
        ],
        "rating/index.php||rating/index.php": [
          "File: rating/index.php -> rating/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     $PAGE->set_pagelayout('popup');",
          "58: }",
          "61:     print_error('noviewrate', 'rating');",
          "62: }",
          "",
          "[Removed Lines]",
          "60: if (!has_capability('moodle/rating:view',$context)) {",
          "",
          "[Added Lines]",
          "60: $params = array('contextid' => $contextid,",
          "61:                 'component' => $component,",
          "62:                 'ratingarea' => $ratingarea,",
          "63:                 'itemid' => $itemid,",
          "64:                 'scaleid' => $scaleid);",
          "65: if (!has_capability('moodle/rating:view', $context) ||",
          "66:         !component_callback($component, 'rating_can_see_item_ratings', array($params), true)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}