{
  "cve_id": "CVE-2015-0206",
  "cve_desc": "Memory leak in the dtls1_buffer_record function in d1_pkt.c in OpenSSL 1.0.0 before 1.0.0p and 1.0.1 before 1.0.1k allows remote attackers to cause a denial of service (memory consumption) by sending many duplicate records for the next epoch, leading to failure of replay detection.",
  "repo": "openssl/openssl",
  "patch_hash": "103b171d8fc282ef435f8de9afbf7782e312961f",
  "patch_info": {
    "commit_hash": "103b171d8fc282ef435f8de9afbf7782e312961f",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/103b171d8fc282ef435f8de9afbf7782e312961f",
    "files": [
      "ssl/d1_pkt.c"
    ],
    "message": "A memory leak can occur in dtls1_buffer_record if either of the calls to ssl3_setup_buffers or pqueue_insert fail. The former will fail if there is a malloc failure, whilst the latter will fail if attempting to add a duplicate record to the queue. This should never happen because duplicate records should be detected and dropped before any attempt to add them to the queue. Unfortunately records that arrive that are for the next epoch are not being recorded correctly, and therefore replays are not being detected. Additionally, these \"should not happen\" failures that can occur in dtls1_buffer_record are not being treated as fatal and therefore an attacker could exploit this by sending repeated replay records for the next epoch, eventually causing a DoS through memory exhaustion.\n\nThanks to Chris Mueller for reporting this issue and providing initial\nanalysis and a patch. Further analysis and the final patch was performed by\nMatt Caswell from the OpenSSL development team.\n\nCVE-2015-0206\n\nReviewed-by: Dr Stephen Henson <steve@openssl.org>",
    "before_after_code_files": [
      "ssl/d1_pkt.c||ssl/d1_pkt.c"
    ]
  },
  "patch_diff": {
    "ssl/d1_pkt.c||ssl/d1_pkt.c": [
      "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:  if (!ssl3_setup_buffers(s))",
      "248:   {",
      "249:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
      "250:   OPENSSL_free(rdata);",
      "251:   pitem_free(item);",
      "253:   }",
      "256:  if (pqueue_insert(queue->q, item) == NULL)",
      "257:   {",
      "258:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
      "259:   OPENSSL_free(rdata);",
      "260:   pitem_free(item);",
      "262:   }",
      "264:  return(1);",
      "",
      "[Removed Lines]",
      "252:   return(0);",
      "261:   return(0);",
      "",
      "[Added Lines]",
      "250:   if (rdata->rbuf.buf != NULL)",
      "251:    OPENSSL_free(rdata->rbuf.buf);",
      "254:   return(-1);",
      "261:   if (rdata->rbuf.buf != NULL)",
      "262:    OPENSSL_free(rdata->rbuf.buf);",
      "265:   return(-1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "314:             dtls1_get_unprocessed_record(s);",
      "315:             if ( ! dtls1_process_record(s))",
      "316:                 return(0);",
      "319:             }",
      "320:         }",
      "",
      "[Removed Lines]",
      "317:             dtls1_buffer_record(s, &(s->d1->processed_rcds),",
      "318:                 s->s3->rrec.seq_num);",
      "",
      "[Added Lines]",
      "321:             if(dtls1_buffer_record(s, &(s->d1->processed_rcds),",
      "322:                 s->s3->rrec.seq_num)<0)",
      "323:                 return -1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "569:  if (dtls1_get_processed_record(s))",
      "",
      "[Removed Lines]",
      "566:  dtls1_process_buffered_records(s);",
      "",
      "[Added Lines]",
      "570:  if(dtls1_process_buffered_records(s)<0)",
      "571:   return -1;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "703:   {",
      "704:   if ((SSL_in_init(s) || s->in_handshake) && !s->d1->listen)",
      "705:    {",
      "707:    }",
      "708:   rr->length = 0;",
      "709:   s->packet_length = 0;",
      "",
      "[Removed Lines]",
      "706:    dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num);",
      "",
      "[Added Lines]",
      "711:    if(dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num)<0)",
      "712:     return -1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "873:   rr->length = 0;",
      "874:   goto start;",
      "875:   }",
      "",
      "[Removed Lines]",
      "872:   dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num);",
      "",
      "[Added Lines]",
      "880:   if(dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num)<0)",
      "881:    {",
      "882:    SSLerr(SSL_F_DTLS1_READ_BYTES, ERR_R_INTERNAL_ERROR);",
      "883:    return -1;",
      "884:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "06c6a2b4a3a6e64303caa256398dd2dc16f9c35a",
      "candidate_info": {
        "commit_hash": "06c6a2b4a3a6e64303caa256398dd2dc16f9c35a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/06c6a2b4a3a6e64303caa256398dd2dc16f9c35a",
        "files": [
          "ssl/d1_pkt.c"
        ],
        "message": "Harmonize return values in dtls1_buffer_record\n\nEnsure all malloc failures return -1.\n\nReported by Adam Langley (Google).\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ],
          "candidate": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:             pitem_free(item);",
          "233:         SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
          "235:     }",
          "237:     rdata->packet = s->packet;",
          "",
          "[Removed Lines]",
          "234:         return (0);",
          "",
          "[Added Lines]",
          "234:         return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "258f8721a5d2c3ec5fd433e89112885139be1db3",
      "candidate_info": {
        "commit_hash": "258f8721a5d2c3ec5fd433e89112885139be1db3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/258f8721a5d2c3ec5fd433e89112885139be1db3",
        "files": [
          "ssl/Makefile",
          "ssl/d1_both.c",
          "ssl/d1_pkt.c",
          "ssl/record/rec_layer.h",
          "ssl/record/ssl3_record.c",
          "ssl/record/ssl3_record.h",
          "ssl/s3_enc.c",
          "ssl/s3_lib.c",
          "ssl/s3_pkt.c",
          "ssl/ssl_locl.h",
          "ssl/t1_enc.c",
          "ssl/t1_lib.c"
        ],
        "message": "Encapsulate s->s3->rrec\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c",
          "ssl/d1_pkt.c||ssl/d1_pkt.c",
          "ssl/record/rec_layer.h||ssl/record/rec_layer.h",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/record/ssl3_record.h||ssl/record/ssl3_record.h",
          "ssl/s3_enc.c||ssl/s3_enc.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_pkt.c||ssl/s3_pkt.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ],
          "candidate": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1349: #ifndef OPENSSL_NO_HEARTBEATS",
          "1350: int dtls1_process_heartbeat(SSL *s)",
          "1351: {",
          "1353:     unsigned short hbtype;",
          "1354:     unsigned int payload;",
          "1357:     if (s->msg_callback)",
          "1358:         s->msg_callback(0, s->version, TLS1_RT_HEARTBEAT,",
          "1368:     hbtype = *p++;",
          "1369:     n2s(p, payload);",
          "1372:     pl = p;",
          "",
          "[Removed Lines]",
          "1352:     unsigned char *p = &s->s3->rrec.data[0], *pl;",
          "1359:                         &s->s3->rrec.data[0], s->s3->rrec.length,",
          "1360:                         s, s->msg_callback_arg);",
          "1363:     if (1 + 2 + 16 > s->s3->rrec.length)",
          "1365:     if (s->s3->rrec.length > SSL3_RT_MAX_PLAIN_LENGTH)",
          "1370:     if (1 + 2 + payload + 16 > s->s3->rrec.length)",
          "",
          "[Added Lines]",
          "1352:     unsigned char *p, *pl;",
          "1356:     unsigned int length;",
          "1358:     p = SSL3_RECORD_get_data(RECORD_LAYER_get_rrec(&s->rlayer));",
          "1359:     length = SSL3_RECORD_get_length(RECORD_LAYER_get_rrec(&s->rlayer));",
          "1363:                         p, length, s, s->msg_callback_arg);",
          "1366:     if (1 + 2 + 16 > length)",
          "1368:     if (length > SSL3_RT_MAX_PLAIN_LENGTH)",
          "1373:     if (1 + 2 + payload + 16 > length)",
          "",
          "---------------"
        ],
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     s->packet_length = rdata->packet_length;",
          "205:     memcpy(RECORD_LAYER_get_rbuf(&s->rlayer), &(rdata->rbuf),",
          "206:         sizeof(SSL3_BUFFER));",
          "210:     memcpy(&(s->s3->read_sequence[2]), &(rdata->packet[5]), 6);",
          "",
          "[Removed Lines]",
          "207:     memcpy(&(s->s3->rrec), &(rdata->rrec), sizeof(SSL3_RECORD));",
          "",
          "[Added Lines]",
          "207:     memcpy(RECORD_LAYER_get_rrec(&s->rlayer), &(rdata->rrec),",
          "208:         sizeof(SSL3_RECORD));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:     rdata->packet_length = s->packet_length;",
          "239:     memcpy(&(rdata->rbuf), RECORD_LAYER_get_rbuf(&s->rlayer),",
          "240:         sizeof(SSL3_BUFFER));",
          "243:     item->data = rdata;",
          "",
          "[Removed Lines]",
          "241:     memcpy(&(rdata->rrec), &(s->s3->rrec), sizeof(SSL3_RECORD));",
          "",
          "[Added Lines]",
          "242:     memcpy(&(rdata->rrec), RECORD_LAYER_get_rrec(&s->rlayer),",
          "243:         sizeof(SSL3_RECORD));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:     s->packet = NULL;",
          "256:     s->packet_length = 0;",
          "257:     memset(RECORD_LAYER_get_rbuf(&s->rlayer), 0, sizeof(SSL3_BUFFER));",
          "260:     if (!ssl3_setup_buffers(s)) {",
          "261:         SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
          "",
          "[Removed Lines]",
          "258:     memset(&(s->s3->rrec), 0, sizeof(SSL3_RECORD));",
          "",
          "[Added Lines]",
          "260:     memset(RECORD_LAYER_get_rrec(&s->rlayer), 0, sizeof(SSL3_RECORD));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "328:             if (!dtls1_process_record(s))",
          "329:                 return (0);",
          "330:             if (dtls1_buffer_record(s, &(s->d1->processed_rcds),",
          "332:                 return -1;",
          "333:         }",
          "334:     }",
          "",
          "[Removed Lines]",
          "331:                                     s->s3->rrec.seq_num) < 0)",
          "",
          "[Added Lines]",
          "333:                 SSL3_RECORD_get_seq_num(RECORD_LAYER_get_rrec(&s->rlayer))) < 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "352:     unsigned int mac_size;",
          "353:     unsigned char md[EVP_MAX_MD_SIZE];",
          "356:     sess = s->session;",
          "",
          "[Removed Lines]",
          "355:     rr = &(s->s3->rrec);",
          "",
          "[Added Lines]",
          "357:     rr = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "527:     DTLS1_BITMAP *bitmap;",
          "528:     unsigned int is_next_epoch;",
          "",
          "[Removed Lines]",
          "530:     rr = &(s->s3->rrec);",
          "",
          "[Added Lines]",
          "532:     rr = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "783:     rr = &(s->s3->rrec);",
          "",
          "[Added Lines]",
          "785:     rr = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1630:     cmp = satsub64be(seq, bitmap->max_seq_num);",
          "1631:     if (cmp > 0) {",
          "1634:     }",
          "1635:     shift = -cmp;",
          "",
          "[Removed Lines]",
          "1632:         memcpy(s->s3->rrec.seq_num, seq, 8);",
          "",
          "[Added Lines]",
          "1634:         SSL3_RECORD_set_seq_num(RECORD_LAYER_get_rrec(&s->rlayer), seq);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1638:     else if (bitmap->map & (1UL << shift))",
          "1642:     return 1;",
          "1643: }",
          "",
          "[Removed Lines]",
          "1641:     memcpy(s->s3->rrec.seq_num, seq, 8);",
          "",
          "[Added Lines]",
          "1643:     SSL3_RECORD_set_seq_num(RECORD_LAYER_get_rrec(&s->rlayer), seq);",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer.h||ssl/record/rec_layer.h": [
          "File: ssl/record/rec_layer.h -> ssl/record/rec_layer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: #define RECORD_LAYER_get_read_ahead(rl)         ((rl)->read_ahead)",
          "131: #define RECORD_LAYER_get_rbuf(rl)               (&(rl)->rbuf)",
          "132: #define RECORD_LAYER_get_wbuf(rl)               (&(rl)->wbuf)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: #define RECORD_LAYER_get_rrec(rl)               (&(rl)->s->s3->rrec)",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: #include \"../ssl_locl.h\"",
          "114: void SSL3_RECORD_clear(SSL3_RECORD *r)",
          "115: {",
          "116:     memset(r->seq_num, 0, sizeof(r->seq_num));",
          "117: }",
          "119: void SSL3_RECORD_release(SSL3_RECORD *r)",
          "120: {",
          "121:     if (r->comp != NULL)",
          "122:         OPENSSL_free(r->comp);",
          "123:     r->comp = NULL;",
          "124: }",
          "126: int SSL3_RECORD_setup(SSL3_RECORD *r, size_t len)",
          "127: {",
          "128:     if (r->comp == NULL)",
          "129:         r->comp = (unsigned char *) OPENSSL_malloc(len);",
          "130:     if (r->comp == NULL)",
          "131:         return 0;",
          "132:     return 1;",
          "133: }",
          "135: void SSL3_RECORD_set_seq_num(SSL3_RECORD *r, const unsigned char *seq_num)",
          "136: {",
          "137:     memcpy(r->seq_num, seq_num, 8);",
          "138: }",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.h||ssl/record/ssl3_record.h": [
          "File: ssl/record/ssl3_record.h -> ssl/record/ssl3_record.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: typedef struct ssl3_record_st {",
          "152: } SSL3_RECORD;",
          "154: #define SSL3_RECORD_get_type(r)                 ((r)->type)",
          "155: #define SSL3_RECORD_get_length(r)               ((r)->length)",
          "156: #define SSL3_RECORD_get_data(r)                 ((r)->data)",
          "157: #define SSL3_RECORD_get_seq_num(r)              ((r)->seq_num)",
          "159: void SSL3_RECORD_clear(SSL3_RECORD *r);",
          "160: void SSL3_RECORD_release(SSL3_RECORD *r);",
          "161: int SSL3_RECORD_setup(SSL3_RECORD *r, size_t len);",
          "162: void SSL3_RECORD_set_seq_num(SSL3_RECORD *r, const unsigned char *seq_num);",
          "",
          "---------------"
        ],
        "ssl/s3_enc.c||ssl/s3_enc.c": [
          "File: ssl/s3_enc.c -> ssl/s3_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:                        SSL_R_COMPRESSION_LIBRARY_ERROR);",
          "271:                 goto err2;",
          "272:             }",
          "277:                 goto err;",
          "278:         }",
          "279: #endif",
          "",
          "[Removed Lines]",
          "273:             if (s->s3->rrec.comp == NULL)",
          "274:                 s->s3->rrec.comp = (unsigned char *)",
          "275:                     OPENSSL_malloc(SSL3_RT_MAX_PLAIN_LENGTH);",
          "276:             if (s->s3->rrec.comp == NULL)",
          "",
          "[Added Lines]",
          "273:             if(!SSL3_RECORD_setup(RECORD_LAYER_get_rrec(&s->rlayer),",
          "274:                 SSL3_RT_MAX_PLAIN_LENGTH))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "509:             enc = EVP_CIPHER_CTX_cipher(s->enc_write_ctx);",
          "510:     } else {",
          "511:         ds = s->enc_read_ctx;",
          "513:         if (s->enc_read_ctx == NULL)",
          "514:             enc = NULL;",
          "515:         else",
          "",
          "[Removed Lines]",
          "512:         rec = &(s->s3->rrec);",
          "",
          "[Added Lines]",
          "510:         rec = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "732:         seq = &(ssl->s3->write_sequence[0]);",
          "733:         hash = ssl->write_hash;",
          "734:     } else {",
          "736:         mac_sec = &(ssl->s3->read_mac_secret[0]);",
          "737:         seq = &(ssl->s3->read_sequence[0]);",
          "738:         hash = ssl->read_hash;",
          "",
          "[Removed Lines]",
          "735:         rec = &(ssl->s3->rrec);",
          "",
          "[Added Lines]",
          "733:         rec = RECORD_LAYER_get_rrec(&ssl->rlayer);",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3083:     if (s->rstate == SSL_ST_READ_BODY)",
          "3084:         return 0;",
          "3088: }",
          "3090: int ssl3_set_handshake_header(SSL *s, int htype, unsigned long len)",
          "",
          "[Removed Lines]",
          "3086:     return (s->s3->rrec.type ==",
          "3087:             SSL3_RT_APPLICATION_DATA) ? s->s3->rrec.length : 0;",
          "",
          "[Added Lines]",
          "3086:     return (SSL3_RECORD_get_type(RECORD_LAYER_get_rrec(&s->rlayer))",
          "3087:            == SSL3_RT_APPLICATION_DATA)",
          "3088:            ? SSL3_RECORD_get_length(RECORD_LAYER_get_rrec(&s->rlayer)) : 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3110:     if ((s3 = OPENSSL_malloc(sizeof *s3)) == NULL)",
          "3111:         goto err;",
          "3112:     memset(s3, 0, sizeof *s3);",
          "3116:     s->s3 = s3;",
          "3118: #ifndef OPENSSL_NO_SRP",
          "3119:     if(!SSL_SRP_CTX_init(s))",
          "3120:           goto err;",
          "",
          "[Removed Lines]",
          "3113:     memset(s3->rrec.seq_num, 0, sizeof(s3->rrec.seq_num));",
          "3114:     memset(s3->wrec.seq_num, 0, sizeof(s3->wrec.seq_num));",
          "",
          "[Added Lines]",
          "3115:     SSL3_RECORD_clear(RECORD_LAYER_get_rrec(&s->rlayer));",
          "3116:     memset(s3->wrec.seq_num, 0, sizeof(s3->wrec.seq_num));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3131:         return;",
          "3133:     ssl3_cleanup_key_block(s);",
          "3136: #ifndef OPENSSL_NO_DH",
          "3137:     DH_free(s->s3->tmp.dh);",
          "3138: #endif",
          "",
          "[Removed Lines]",
          "3134:     if (s->s3->rrec.comp != NULL)",
          "3135:         OPENSSL_free(s->s3->rrec.comp);",
          "",
          "[Added Lines]",
          "3134:     SSL3_RECORD_release(RECORD_LAYER_get_rrec(&s->rlayer));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3166:     if (s->s3->tmp.ca_names != NULL)",
          "3167:         sk_X509_NAME_pop_free(s->s3->tmp.ca_names, X509_NAME_free);",
          "3173: #ifndef OPENSSL_NO_DH",
          "3174:     DH_free(s->s3->tmp.dh);",
          "3175:     s->s3->tmp.dh = NULL;",
          "",
          "[Removed Lines]",
          "3169:     if (s->s3->rrec.comp != NULL) {",
          "3170:         OPENSSL_free(s->s3->rrec.comp);",
          "3171:         s->s3->rrec.comp = NULL;",
          "3172:     }",
          "",
          "[Added Lines]",
          "3168:     SSL3_RECORD_release(RECORD_LAYER_get_rrec(&s->rlayer));",
          "",
          "---------------"
        ],
        "ssl/s3_pkt.c||ssl/s3_pkt.c": [
          "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:     size_t extra;",
          "317:     unsigned empty_record_count = 0;",
          "320:     sess = s->session;",
          "322:     if (s->options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER)",
          "",
          "[Removed Lines]",
          "319:     rr = &(s->s3->rrec);",
          "",
          "[Added Lines]",
          "319:     rr = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "600:     int i;",
          "601:     SSL3_RECORD *rr;",
          "604:     i = COMP_expand_block(ssl->expand, rr->comp,",
          "605:                           SSL3_RT_MAX_PLAIN_LENGTH, rr->data,",
          "606:                           (int)rr->length);",
          "",
          "[Removed Lines]",
          "603:     rr = &(ssl->s3->rrec);",
          "",
          "[Added Lines]",
          "603:     rr = RECORD_LAYER_get_rrec(&ssl->rlayer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1241:     if ((rr->length == 0) || (s->rstate == SSL_ST_READ_BODY)) {",
          "",
          "[Removed Lines]",
          "1238:     rr = &(s->s3->rrec);",
          "",
          "[Added Lines]",
          "1238:     rr = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: # include <openssl/symhacks.h>",
          "168: #include \"record/ssl3_buffer.h\"",
          "169: #include \"record/rec_layer.h\"",
          "171: # ifdef OPENSSL_BUILD_SHLIBSSL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: #include \"record/ssl3_record.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1223:     RECORD_LAYER rlayer;",
          "1224: };",
          "1268: typedef struct ssl3_state_st {",
          "1269:     long flags;",
          "",
          "[Removed Lines]",
          "1226: typedef struct ssl3_record_st {",
          "1266: } SSL3_RECORD;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:                        SSL_R_COMPRESSION_LIBRARY_ERROR);",
          "397:                 goto err2;",
          "398:             }",
          "403:                 goto err;",
          "404:         }",
          "405: #endif",
          "",
          "[Removed Lines]",
          "399:             if (s->s3->rrec.comp == NULL)",
          "400:                 s->s3->rrec.comp = (unsigned char *)",
          "401:                     OPENSSL_malloc(SSL3_RT_MAX_ENCRYPTED_LENGTH);",
          "402:             if (s->s3->rrec.comp == NULL)",
          "",
          "[Added Lines]",
          "399:             if (SSL3_RECORD_setup(RECORD_LAYER_get_rrec(&s->rlayer),",
          "400:                 SSL3_RT_MAX_ENCRYPTED_LENGTH))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782:             OPENSSL_assert(n >= 0);",
          "783:         }",
          "784:         ds = s->enc_read_ctx;",
          "786:         if (s->enc_read_ctx == NULL)",
          "787:             enc = NULL;",
          "788:         else",
          "",
          "[Removed Lines]",
          "785:         rec = &(s->s3->rrec);",
          "",
          "[Added Lines]",
          "783:         rec = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "977:         seq = &(ssl->s3->write_sequence[0]);",
          "978:         hash = ssl->write_hash;",
          "979:     } else {",
          "981:         seq = &(ssl->s3->read_sequence[0]);",
          "982:         hash = ssl->read_hash;",
          "983:     }",
          "",
          "[Removed Lines]",
          "980:         rec = &(ssl->s3->rrec);",
          "",
          "[Added Lines]",
          "978:         rec = RECORD_LAYER_get_rrec(&ssl->rlayer);",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3594: # ifndef OPENSSL_NO_HEARTBEATS",
          "3595: int tls1_process_heartbeat(SSL *s)",
          "3596: {",
          "3598:     unsigned short hbtype;",
          "3599:     unsigned int payload;",
          "3602:     if (s->msg_callback)",
          "3603:         s->msg_callback(0, s->version, TLS1_RT_HEARTBEAT,",
          "3605:                         s, s->msg_callback_arg);",
          "3610:     hbtype = *p++;",
          "3611:     n2s(p, payload);",
          "3614:     pl = p;",
          "",
          "[Removed Lines]",
          "3597:     unsigned char *p = &s->s3->rrec.data[0], *pl;",
          "3604:                         &s->s3->rrec.data[0], s->s3->rrec.length,",
          "3608:     if (1 + 2 + 16 > s->s3->rrec.length)",
          "3612:     if (1 + 2 + payload + 16 > s->s3->rrec.length)",
          "",
          "[Added Lines]",
          "3597:     unsigned char *p, *pl;",
          "3601:     unsigned int length;",
          "3603:     p = SSL3_RECORD_get_data(RECORD_LAYER_get_rrec(&s->rlayer));",
          "3604:     length = SSL3_RECORD_get_length(RECORD_LAYER_get_rrec(&s->rlayer));",
          "3608:                         p, length,",
          "3612:     if (1 + 2 + 16 > length)",
          "3616:     if (1 + 2 + payload + 16 > length)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28d59af8740680c89e22ac19304457f2163e4371",
      "candidate_info": {
        "commit_hash": "28d59af8740680c89e22ac19304457f2163e4371",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/28d59af8740680c89e22ac19304457f2163e4371",
        "files": [
          "ssl/Makefile",
          "ssl/d1_pkt.c",
          "ssl/record/rec_layer.h",
          "ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_buffer.h",
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c",
          "ssl/s3_both.c",
          "ssl/s3_lib.c",
          "ssl/s3_pkt.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Encapsulate SSL3_BUFFER and all access to s->s3->rbuf.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c",
          "ssl/record/rec_layer.h||ssl/record/rec_layer.h",
          "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_buffer.h||ssl/record/ssl3_buffer.h",
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c",
          "ssl/s3_both.c||ssl/s3_both.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_pkt.c||ssl/s3_pkt.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ],
          "candidate": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     rdata = (DTLS1_RECORD_DATA *)item->data;",
          "204:     s->packet = rdata->packet;",
          "205:     s->packet_length = rdata->packet_length;",
          "207:     memcpy(&(s->s3->rrec), &(rdata->rrec), sizeof(SSL3_RECORD));",
          "",
          "[Removed Lines]",
          "201:     if (s->s3->rbuf.buf != NULL)",
          "202:         OPENSSL_free(s->s3->rbuf.buf);",
          "206:     memcpy(&(s->s3->rbuf), &(rdata->rbuf), sizeof(SSL3_BUFFER));",
          "",
          "[Added Lines]",
          "201:     SSL3_BUFFER_release(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "205:     memcpy(RECORD_LAYER_get_rbuf(&s->rlayer), &(rdata->rbuf),",
          "206:         sizeof(SSL3_BUFFER));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     rdata->packet = s->packet;",
          "238:     rdata->packet_length = s->packet_length;",
          "240:     memcpy(&(rdata->rrec), &(s->s3->rrec), sizeof(SSL3_RECORD));",
          "242:     item->data = rdata;",
          "",
          "[Removed Lines]",
          "239:     memcpy(&(rdata->rbuf), &(s->s3->rbuf), sizeof(SSL3_BUFFER));",
          "",
          "[Added Lines]",
          "239:     memcpy(&(rdata->rbuf), RECORD_LAYER_get_rbuf(&s->rlayer),",
          "240:         sizeof(SSL3_BUFFER));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:     s->packet = NULL;",
          "255:     s->packet_length = 0;",
          "257:     memset(&(s->s3->rrec), 0, sizeof(SSL3_RECORD));",
          "259:     if (!ssl3_setup_buffers(s)) {",
          "",
          "[Removed Lines]",
          "256:     memset(&(s->s3->rbuf), 0, sizeof(SSL3_BUFFER));",
          "",
          "[Added Lines]",
          "257:     memset(RECORD_LAYER_get_rbuf(&s->rlayer), 0, sizeof(SSL3_BUFFER));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "545:     if ((s->rstate != SSL_ST_READ_BODY) ||",
          "546:         (s->packet_length < DTLS1_RT_HEADER_LENGTH)) {",
          "549:         if (n <= 0)",
          "",
          "[Removed Lines]",
          "547:         n = ssl3_read_n(s, DTLS1_RT_HEADER_LENGTH, s->s3->rbuf.len, 0);",
          "",
          "[Added Lines]",
          "548:         n = ssl3_read_n(s, DTLS1_RT_HEADER_LENGTH,",
          "549:             SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer)), 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "722:     SSL3_RECORD *rr;",
          "723:     void (*cb) (const SSL *ssl, int type2, int val) = NULL;",
          "726:         if (!ssl3_setup_buffers(s))",
          "727:             return (-1);",
          "729:     if ((type && (type != SSL3_RT_APPLICATION_DATA) &&",
          "730:          (type != SSL3_RT_HANDSHAKE)) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727:     if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer))) {",
          "731:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1047:                 }",
          "1049:                 if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1051:                         BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1054:                     if (SSL3_BUFFER_get_left(",
          "1055:                         RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1269:         }",
          "1271:         if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1273:                 BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1278:             if (SSL3_BUFFER_get_left(",
          "1279:                 RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer.h||ssl/record/rec_layer.h": [
          "File: ssl/record/rec_layer.h -> ssl/record/rec_layer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: typedef struct record_layer_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     SSL *s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     int read_ahead;",
          "118: } RECORD_LAYER;",
          "120: #define RECORD_LAYER_set_read_ahead(rl, ra)     ((rl)->read_ahead = (ra))",
          "121: #define RECORD_LAYER_get_read_ahead(rl)         ((rl)->read_ahead)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #define RECORD_LAYER_set_ssl(rl, s)             ((rl)->s = (s))",
          "125: #define RECORD_LAYER_get_rbuf(rl)               (&(rl)->s->s3->rbuf)",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c": [
          "File: ssl/record/ssl3_buffer.c -> ssl/record/ssl3_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: #include \"../ssl_locl.h\"",
          "114: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, unsigned char *d, int n)",
          "115: {",
          "116:     if(d != NULL)",
          "117:         memcpy(b->buf, d, n);",
          "118:     b->left = n;",
          "119:     b->offset = 0;",
          "120: }",
          "122: void SSL3_BUFFER_release(SSL3_BUFFER *b)",
          "123: {",
          "124:     if (b->buf != NULL)",
          "125:         OPENSSL_free(b->buf);",
          "126:     b->buf = NULL;",
          "127: }",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.h||ssl/record/ssl3_buffer.h": [
          "File: ssl/record/ssl3_buffer.h -> ssl/record/ssl3_buffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: typedef struct ssl3_buffer_st {",
          "114:     unsigned char *buf;",
          "116:     size_t len;",
          "118:     int offset;",
          "120:     int left;",
          "121: } SSL3_BUFFER;",
          "123: #define SSL3_BUFFER_get_buf(b)              ((b)->buf)",
          "124: #define SSL3_BUFFER_set_buf(b, n)           ((b)->buf = (n))",
          "125: #define SSL3_BUFFER_get_len(b)              ((b)->len)",
          "126: #define SSL3_BUFFER_set_len(b, l)           ((b)->len = (l))",
          "127: #define SSL3_BUFFER_get_left(b)             ((b)->left)",
          "128: #define SSL3_BUFFER_is_initialised(b)       ((b)->buf != NULL)",
          "130: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, unsigned char *d, int n);",
          "131: void SSL3_BUFFER_release(SSL3_BUFFER *b);",
          "",
          "---------------"
        ],
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482: static int ssl23_get_server_hello(SSL *s)",
          "483: {",
          "485:     unsigned char *p;",
          "486:     int i;",
          "487:     int n;",
          "",
          "[Removed Lines]",
          "484:     char buf[8];",
          "",
          "[Added Lines]",
          "484:     unsigned char buf[8];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:         s->rstate = SSL_ST_READ_HEADER;",
          "577:         s->packet_length = n;",
          "579:             if (!ssl3_setup_read_buffer(s))",
          "580:                 goto err;",
          "586:         s->handshake_func = s->method->ssl_connect;",
          "587:     } else {",
          "",
          "[Removed Lines]",
          "578:         if (s->s3->rbuf.buf == NULL)",
          "581:         s->packet = &(s->s3->rbuf.buf[0]);",
          "582:         memcpy(s->packet, buf, n);",
          "583:         s->s3->rbuf.left = n;",
          "584:         s->s3->rbuf.offset = 0;",
          "",
          "[Added Lines]",
          "578:         if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "581:         s->packet = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "582:         SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), buf, n);",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:     unsigned char *p, *d, *d_len, *dd;",
          "250:     unsigned int i;",
          "251:     unsigned int csl, sil, cl;",
          "",
          "[Removed Lines]",
          "247:     char buf_space[11];",
          "248:     char *buf = &(buf_space[0]);",
          "",
          "[Added Lines]",
          "247:     unsigned char buf_space[11];",
          "248:     unsigned char *buf = &(buf_space[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:             s->rstate = SSL_ST_READ_HEADER;",
          "560:             s->packet_length = n;",
          "562:                 if (!ssl3_setup_read_buffer(s))",
          "563:                     goto err;",
          "569:         } else {",
          "570:             s->packet_length = 0;",
          "573:         }",
          "574:         s->handshake_func = s->method->ssl_accept;",
          "575:     } else {",
          "",
          "[Removed Lines]",
          "561:             if (s->s3->rbuf.buf == NULL)",
          "565:             s->packet = &(s->s3->rbuf.buf[0]);",
          "566:             memcpy(s->packet, buf, n);",
          "567:             s->s3->rbuf.left = n;",
          "568:             s->s3->rbuf.offset = 0;",
          "571:             s->s3->rbuf.left = 0;",
          "572:             s->s3->rbuf.offset = 0;",
          "",
          "[Added Lines]",
          "561:             if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "565:             s->packet = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "566:             SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), buf, n);",
          "569:             SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), NULL, 0);",
          "",
          "---------------"
        ],
        "ssl/s3_both.c||ssl/s3_both.c": [
          "File: ssl/s3_both.c -> ssl/s3_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "577: {",
          "578:     unsigned char *p;",
          "579:     size_t len, align = 0, headerlen;",
          "581:     if (SSL_version(s) == DTLS1_VERSION || SSL_version(s) == DTLS1_BAD_VER)",
          "582:         headerlen = DTLS1_RT_HEADER_LENGTH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:     SSL3_BUFFER *b;",
          "582:     b = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:     align = (-SSL3_RT_HEADER_LENGTH) & (SSL3_ALIGN_PAYLOAD - 1);",
          "588: #endif",
          "591:         len = SSL3_RT_MAX_PLAIN_LENGTH",
          "592:             + SSL3_RT_MAX_ENCRYPTED_OVERHEAD + headerlen + align;",
          "593:         if (s->options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER) {",
          "",
          "[Removed Lines]",
          "590:     if (s->s3->rbuf.buf == NULL) {",
          "",
          "[Added Lines]",
          "593:     if (b->buf == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "600: #endif",
          "601:         if ((p = OPENSSL_malloc(len)) == NULL)",
          "602:             goto err;",
          "605:     }",
          "608:     return 1;",
          "610:  err:",
          "",
          "[Removed Lines]",
          "603:         s->s3->rbuf.buf = p;",
          "604:         s->s3->rbuf.len = len;",
          "607:     s->packet = &(s->s3->rbuf.buf[0]);",
          "",
          "[Added Lines]",
          "606:         b->buf = p;",
          "607:         b->len = len;",
          "610:     s->packet = &(b->buf[0]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "670: int ssl3_release_read_buffer(SSL *s)",
          "671: {",
          "675:     }",
          "676:     return 1;",
          "677: }",
          "",
          "[Removed Lines]",
          "672:     if (s->s3->rbuf.buf != NULL) {",
          "673:         OPENSSL_free(s->s3->rbuf.buf);",
          "674:         s->s3->rbuf.buf = NULL;",
          "",
          "[Added Lines]",
          "675:     SSL3_BUFFER *b;",
          "677:     b = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "678:     if (b->buf != NULL) {",
          "679:         OPENSSL_free(b->buf);",
          "680:         b->buf = NULL;",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3131:         return;",
          "3133:     ssl3_cleanup_key_block(s);",
          "3135:         ssl3_release_read_buffer(s);",
          "3136:     if (s->s3->wbuf.buf != NULL)",
          "3137:         ssl3_release_write_buffer(s);",
          "",
          "[Removed Lines]",
          "3134:     if (s->s3->rbuf.buf != NULL)",
          "",
          "[Added Lines]",
          "3134:     if (SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3194:     wp = s->s3->wbuf.buf;",
          "3196:     wlen = s->s3->wbuf.len;",
          "3197:     init_extra = s->s3->init_extra;",
          "3198:     BIO_free(s->s3->handshake_buffer);",
          "",
          "[Removed Lines]",
          "3193:     rp = s->s3->rbuf.buf;",
          "3195:     rlen = s->s3->rbuf.len;",
          "",
          "[Added Lines]",
          "3193:     rp = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "3195:     rlen = SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3207:     }",
          "3208: #endif",
          "3209:     memset(s->s3, 0, sizeof *s->s3);",
          "3211:     s->s3->wbuf.buf = wp;",
          "3213:     s->s3->wbuf.len = wlen;",
          "3214:     s->s3->init_extra = init_extra;",
          "",
          "[Removed Lines]",
          "3210:     s->s3->rbuf.buf = rp;",
          "3212:     s->s3->rbuf.len = rlen;",
          "",
          "[Added Lines]",
          "3210:     SSL3_BUFFER_set_buf(RECORD_LAYER_get_rbuf(&s->rlayer), rp);",
          "3212:     SSL3_BUFFER_set_len(RECORD_LAYER_get_rbuf(&s->rlayer), rlen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4494:     int ret = 0;",
          "4496:     if (s->s3->renegotiate) {",
          "4498:             (s->s3->wbuf.left == 0) && !SSL_in_init(s)) {",
          "",
          "[Removed Lines]",
          "4497:         if ((s->s3->rbuf.left == 0) &&",
          "",
          "[Added Lines]",
          "4497:         if ((SSL3_BUFFER_get_left(RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) &&",
          "",
          "---------------"
        ],
        "ssl/s3_pkt.c||ssl/s3_pkt.c": [
          "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     if (n <= 0)",
          "154:         return n;",
          "157:     if (rb->buf == NULL)",
          "158:         if (!ssl3_setup_read_buffer(s))",
          "159:             return -1;",
          "",
          "[Removed Lines]",
          "156:     rb = &(s->s3->rbuf);",
          "",
          "[Added Lines]",
          "156:     rb = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:     if ((s->rstate != SSL_ST_READ_BODY) ||",
          "338:         (s->packet_length < SSL3_RT_HEADER_LENGTH)) {",
          "340:         if (n <= 0)",
          "342:         s->rstate = SSL_ST_READ_BODY;",
          "",
          "[Removed Lines]",
          "339:         n = ssl3_read_n(s, SSL3_RT_HEADER_LENGTH, s->s3->rbuf.len, 0);",
          "",
          "[Added Lines]",
          "339:         n = ssl3_read_n(s, SSL3_RT_HEADER_LENGTH,",
          "340:             SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer)), 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373:             goto err;",
          "374:         }",
          "377:             al = SSL_AD_RECORD_OVERFLOW;",
          "378:             SSLerr(SSL_F_SSL3_GET_RECORD, SSL_R_PACKET_LENGTH_TOO_LONG);",
          "379:             goto f_err;",
          "",
          "[Removed Lines]",
          "376:         if (rr->length > s->s3->rbuf.len - SSL3_RT_HEADER_LENGTH) {",
          "",
          "[Added Lines]",
          "377:         if (rr->length >",
          "378:                 SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer))",
          "379:                 - SSL3_RT_HEADER_LENGTH) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1174:     SSL3_RECORD *rr;",
          "1175:     void (*cb) (const SSL *ssl, int type2, int val) = NULL;",
          "1178:         if (!ssl3_setup_read_buffer(s))",
          "1179:             return (-1);",
          "1181:     if ((type && (type != SSL3_RT_APPLICATION_DATA)",
          "1182:          && (type != SSL3_RT_HANDSHAKE)) || (peek",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1180:     if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer))) {",
          "1184:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1288:                 s->rstate = SSL_ST_READ_HEADER;",
          "1289:                 rr->off = 0;",
          "1290:                 if (s->mode & SSL_MODE_RELEASE_BUFFERS",
          "1292:                     ssl3_release_read_buffer(s);",
          "1293:             }",
          "1294:         }",
          "",
          "[Removed Lines]",
          "1291:                     && s->s3->rbuf.left == 0)",
          "",
          "[Added Lines]",
          "1296:                     && SSL3_BUFFER_get_left(",
          "1297:                         RECORD_LAYER_get_rbuf(&s->rlayer)) == 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1391:                 }",
          "1393:                 if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1395:                         BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:                     if (SSL3_BUFFER_get_left(",
          "1401:                         RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1563:         }",
          "1565:         if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1567:                 BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1574:             if (SSL3_BUFFER_get_left(RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:         goto err;",
          "281:     memset(s, 0, sizeof(SSL));",
          "283: #ifndef OPENSSL_NO_KRB5",
          "284:     s->kssl_ctx = kssl_ctx_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     RECORD_LAYER_set_ssl(&s->rlayer, s);",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: # include <openssl/symhacks.h>",
          "168: #include \"record/rec_layer.h\"",
          "170: # ifdef OPENSSL_BUILD_SHLIBSSL",
          "171: #  undef OPENSSL_EXTERN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: #include \"record/ssl3_buffer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "979:     int type;",
          "981:     const SSL_METHOD *method;",
          "",
          "[Removed Lines]",
          "983:     RECORD_LAYER rlayer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1222:     int (*not_resumable_session_cb) (SSL *ssl, int is_forward_secure);",
          "1223: };",
          "1225: typedef struct ssl3_record_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1223:     RECORD_LAYER rlayer;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1265: } SSL3_RECORD;",
          "1278: typedef struct ssl3_state_st {",
          "1279:     long flags;",
          "1280:     int delay_buf_pop_ret;",
          "",
          "[Removed Lines]",
          "1267: typedef struct ssl3_buffer_st {",
          "1269:     unsigned char *buf;",
          "1271:     size_t len;",
          "1273:     int offset;",
          "1275:     int left;",
          "1276: } SSL3_BUFFER;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b095884a58876ccd3e65f620b7f80d61b4bce687",
      "candidate_info": {
        "commit_hash": "b095884a58876ccd3e65f620b7f80d61b4bce687",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b095884a58876ccd3e65f620b7f80d61b4bce687",
        "files": [
          "ssl/d1_pkt.c"
        ],
        "message": "A memory leak can occur in dtls1_buffer_record if either of the calls to ssl3_setup_buffers or pqueue_insert fail. The former will fail if there is a malloc failure, whilst the latter will fail if attempting to add a duplicate record to the queue. This should never happen because duplicate records should be detected and dropped before any attempt to add them to the queue. Unfortunately records that arrive that are for the next epoch are not being recorded correctly, and therefore replays are not being detected. Additionally, these \"should not happen\" failures that can occur in dtls1_buffer_record are not being treated as fatal and therefore an attacker could exploit this by sending repeated replay records for the next epoch, eventually causing a DoS through memory exhaustion.\n\nThanks to Chris Mueller for reporting this issue and providing initial\nanalysis and a patch. Further analysis and the final patch was performed by\nMatt Caswell from the OpenSSL development team.\n\nCVE-2015-0206\n\nReviewed-by: Dr Stephen Henson <steve@openssl.org>\n(cherry picked from commit 652ff0f4796eecd8729b4690f2076d1c7ccb2862)",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ],
          "candidate": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:  if (!ssl3_setup_buffers(s))",
          "240:   {",
          "241:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
          "242:   OPENSSL_free(rdata);",
          "243:   pitem_free(item);",
          "245:   }",
          "248:  if (pqueue_insert(queue->q, item) == NULL)",
          "249:   {",
          "250:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
          "251:   OPENSSL_free(rdata);",
          "252:   pitem_free(item);",
          "254:   }",
          "256:  return(1);",
          "",
          "[Removed Lines]",
          "244:   return(0);",
          "253:   return(0);",
          "",
          "[Added Lines]",
          "242:   if (rdata->rbuf.buf != NULL)",
          "243:    OPENSSL_free(rdata->rbuf.buf);",
          "246:   return(-1);",
          "253:   if (rdata->rbuf.buf != NULL)",
          "254:    OPENSSL_free(rdata->rbuf.buf);",
          "257:   return(-1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:             dtls1_get_unprocessed_record(s);",
          "307:             if ( ! dtls1_process_record(s))",
          "308:                 return(0);",
          "311:             }",
          "312:         }",
          "",
          "[Removed Lines]",
          "309:             dtls1_buffer_record(s, &(s->d1->processed_rcds),",
          "310:                 s->s3->rrec.seq_num);",
          "",
          "[Added Lines]",
          "313:             if(dtls1_buffer_record(s, &(s->d1->processed_rcds),",
          "314:                 s->s3->rrec.seq_num)<0)",
          "315:                 return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "561:  if (dtls1_get_processed_record(s))",
          "",
          "[Removed Lines]",
          "558:  dtls1_process_buffered_records(s);",
          "",
          "[Added Lines]",
          "562:  if(dtls1_process_buffered_records(s)<0)",
          "563:   return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "684:   {",
          "685:   if ((SSL_in_init(s) || s->in_handshake) && !s->d1->listen)",
          "686:    {",
          "688:    }",
          "689:   rr->length = 0;",
          "690:   s->packet_length = 0;",
          "",
          "[Removed Lines]",
          "687:    dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num);",
          "",
          "[Added Lines]",
          "692:    if(dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num)<0)",
          "693:     return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "833:   rr->length = 0;",
          "834:   goto start;",
          "835:   }",
          "",
          "[Removed Lines]",
          "832:   dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num);",
          "",
          "[Added Lines]",
          "840:   if(dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num)<0)",
          "841:    {",
          "842:    SSLerr(SSL_F_DTLS1_READ_BYTES, ERR_R_INTERNAL_ERROR);",
          "843:    return -1;",
          "844:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04685bc949e90a877656cf5020b6d4f90a9636a6",
      "candidate_info": {
        "commit_hash": "04685bc949e90a877656cf5020b6d4f90a9636a6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/04685bc949e90a877656cf5020b6d4f90a9636a6",
        "files": [
          "ssl/d1_pkt.c"
        ],
        "message": "A memory leak can occur in dtls1_buffer_record if either of the calls to ssl3_setup_buffers or pqueue_insert fail. The former will fail if there is a malloc failure, whilst the latter will fail if attempting to add a duplicate record to the queue. This should never happen because duplicate records should be detected and dropped before any attempt to add them to the queue. Unfortunately records that arrive that are for the next epoch are not being recorded correctly, and therefore replays are not being detected. Additionally, these \"should not happen\" failures that can occur in dtls1_buffer_record are not being treated as fatal and therefore an attacker could exploit this by sending repeated replay records for the next epoch, eventually causing a DoS through memory exhaustion.\n\nThanks to Chris Mueller for reporting this issue and providing initial\nanalysis and a patch. Further analysis and the final patch was performed by\nMatt Caswell from the OpenSSL development team.\n\nCVE-2015-0206\n\nReviewed-by: Dr Stephen Henson <steve@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ],
          "candidate": [
            "ssl/d1_pkt.c||ssl/d1_pkt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:  if (!ssl3_setup_buffers(s))",
          "248:   {",
          "249:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
          "250:   OPENSSL_free(rdata);",
          "251:   pitem_free(item);",
          "253:   }",
          "256:  if (pqueue_insert(queue->q, item) == NULL)",
          "257:   {",
          "258:   SSLerr(SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR);",
          "259:   OPENSSL_free(rdata);",
          "260:   pitem_free(item);",
          "262:   }",
          "264:  return(1);",
          "",
          "[Removed Lines]",
          "252:   return(0);",
          "261:   return(0);",
          "",
          "[Added Lines]",
          "250:   if (rdata->rbuf.buf != NULL)",
          "251:    OPENSSL_free(rdata->rbuf.buf);",
          "254:   return(-1);",
          "261:   if (rdata->rbuf.buf != NULL)",
          "262:    OPENSSL_free(rdata->rbuf.buf);",
          "265:   return(-1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:             dtls1_get_unprocessed_record(s);",
          "315:             if ( ! dtls1_process_record(s))",
          "316:                 return(0);",
          "319:             }",
          "320:         }",
          "",
          "[Removed Lines]",
          "317:             dtls1_buffer_record(s, &(s->d1->processed_rcds),",
          "318:                 s->s3->rrec.seq_num);",
          "",
          "[Added Lines]",
          "321:             if(dtls1_buffer_record(s, &(s->d1->processed_rcds),",
          "322:                 s->s3->rrec.seq_num)<0)",
          "323:                 return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "569:  if (dtls1_get_processed_record(s))",
          "",
          "[Removed Lines]",
          "566:  dtls1_process_buffered_records(s);",
          "",
          "[Added Lines]",
          "570:  if(dtls1_process_buffered_records(s)<0)",
          "571:   return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "700:   {",
          "701:   if ((SSL_in_init(s) || s->in_handshake) && !s->d1->listen)",
          "702:    {",
          "704:    }",
          "705:   rr->length = 0;",
          "706:   s->packet_length = 0;",
          "",
          "[Removed Lines]",
          "703:    dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num);",
          "",
          "[Added Lines]",
          "708:    if(dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num)<0)",
          "709:     return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "868:   rr->length = 0;",
          "869:   goto start;",
          "870:   }",
          "",
          "[Removed Lines]",
          "867:   dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num);",
          "",
          "[Added Lines]",
          "875:   if(dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num)<0)",
          "876:    {",
          "877:    SSLerr(SSL_F_DTLS1_READ_BYTES, ERR_R_INTERNAL_ERROR);",
          "878:    return -1;",
          "879:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}