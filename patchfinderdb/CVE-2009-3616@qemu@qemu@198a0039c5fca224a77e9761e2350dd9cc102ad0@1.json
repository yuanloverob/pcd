{
  "cve_id": "CVE-2009-3616",
  "cve_desc": "Multiple use-after-free vulnerabilities in vnc.c in the VNC server in QEMU 0.10.6 and earlier might allow guest OS users to execute arbitrary code on the host OS by establishing a connection from a VNC client and then (1) disconnecting during data transfer, (2) sending a message using incorrect integer data types, or (3) using the Fuzzy Screen Mode protocol, related to double free vulnerabilities.",
  "repo": "qemu/qemu",
  "patch_hash": "198a0039c5fca224a77e9761e2350dd9cc102ad0",
  "patch_info": {
    "commit_hash": "198a0039c5fca224a77e9761e2350dd9cc102ad0",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/198a0039c5fca224a77e9761e2350dd9cc102ad0",
    "files": [
      "vnc.c"
    ],
    "message": "vnc: rework VncState release workflow.\n\nSplit socket closing and releasing of VncState into two steps.  First\nclose the socket and set the variable to -1 to indicate shutdown in\nprogress.  Do the actual release in a few places where we can be sure it\ndoesn't cause trouble in form of use-after-free.  Add some checks for a\nvalid socket handle to make sure we don't try to use the closed socket.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>",
    "before_after_code_files": [
      "vnc.c||vnc.c"
    ]
  },
  "patch_diff": {
    "vnc.c||vnc.c": [
      "File: vnc.c -> vnc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "218: static void vnc_update_client(void *opaque);",
      "220: static void vnc_colordepth(VncState *vs);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "219: static void vnc_disconnect_start(VncState *vs);",
      "220: static void vnc_disconnect_finish(VncState *vs);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "653: static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
      "654: {",
      "659:     vnc_write_u8(vs, 0);",
      "",
      "[Removed Lines]",
      "655:     vs->force_update = 1;",
      "656:     vnc_update_client(vs);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "667: static void vnc_dpy_copy(DisplayState *ds, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
      "668: {",
      "669:     VncDisplay *vd = ds->opaque;",
      "672:         if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT))",
      "673:             vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);",
      "675:             vnc_update(vs, dst_x, dst_y, w, h);",
      "677:     }",
      "678: }",
      "",
      "[Removed Lines]",
      "670:     VncState *vs = vd->clients;",
      "671:     while (vs != NULL) {",
      "676:         vs = vs->next;",
      "",
      "[Added Lines]",
      "669:     VncState *vs, *vn;",
      "671:     for (vs = vd->clients; vs != NULL; vs = vn) {",
      "672:         vn = vs->next;",
      "673:         if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {",
      "674:             vs->force_update = 1;",
      "675:             vnc_update_client(vs);",
      "677:         }",
      "678:     }",
      "680:     for (vs = vd->clients; vs != NULL; vs = vs->next) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "799:     if (vs->csock != -1) {",
      "800:         qemu_mod_timer(vs->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
      "801:     }",
      "803: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "809:     } else {",
      "810:         vnc_disconnect_finish(vs);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "868:     }",
      "869: }",
      "872: int vnc_client_io_error(VncState *vs, int ret, int last_errno)",
      "873: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "881: static void vnc_disconnect_start(VncState *vs)",
      "882: {",
      "883:     if (vs->csock == -1)",
      "884:         return;",
      "885:     qemu_set_fd_handler2(vs->csock, NULL, NULL, NULL, NULL);",
      "886:     closesocket(vs->csock);",
      "887:     vs->csock = -1;",
      "888: }",
      "890: static void vnc_disconnect_finish(VncState *vs)",
      "891: {",
      "892:     qemu_del_timer(vs->timer);",
      "893:     qemu_free_timer(vs->timer);",
      "894:     if (vs->input.buffer) qemu_free(vs->input.buffer);",
      "895:     if (vs->output.buffer) qemu_free(vs->output.buffer);",
      "896: #ifdef CONFIG_VNC_TLS",
      "897:     vnc_tls_client_cleanup(vs);",
      "899: #ifdef CONFIG_VNC_SASL",
      "900:     vnc_sasl_client_cleanup(vs);",
      "902:     audio_del(vs);",
      "904:     VncState *p, *parent = NULL;",
      "905:     for (p = vs->vd->clients; p != NULL; p = p->next) {",
      "906:         if (p == vs) {",
      "907:             if (parent)",
      "908:                 parent->next = p->next;",
      "909:             else",
      "910:                 vs->vd->clients = p->next;",
      "911:             break;",
      "912:         }",
      "913:         parent = p;",
      "914:     }",
      "915:     if (!vs->vd->clients)",
      "916:         dcl->idle = 1;",
      "918:     qemu_free(vs->server.ds->data);",
      "919:     qemu_free(vs->server.ds);",
      "920:     qemu_free(vs->guest.ds);",
      "921:     qemu_free(vs);",
      "922: }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "885:             }",
      "886:         }",
      "922:         return 0;",
      "923:     }",
      "",
      "[Removed Lines]",
      "888:         VNC_DEBUG(\"Closing down client sock %d %d\\n\", ret, ret < 0 ? last_errno : 0);",
      "889:         qemu_set_fd_handler2(vs->csock, NULL, NULL, NULL, NULL);",
      "890:         closesocket(vs->csock);",
      "891:         qemu_del_timer(vs->timer);",
      "892:         qemu_free_timer(vs->timer);",
      "893:         if (vs->input.buffer) qemu_free(vs->input.buffer);",
      "894:         if (vs->output.buffer) qemu_free(vs->output.buffer);",
      "895: #ifdef CONFIG_VNC_TLS",
      "896:         vnc_tls_client_cleanup(vs);",
      "898: #ifdef CONFIG_VNC_SASL",
      "899:         vnc_sasl_client_cleanup(vs);",
      "901:         audio_del(vs);",
      "903:         VncState *p, *parent = NULL;",
      "904:         for (p = vs->vd->clients; p != NULL; p = p->next) {",
      "905:             if (p == vs) {",
      "906:                 if (parent)",
      "907:                     parent->next = p->next;",
      "908:                 else",
      "909:                     vs->vd->clients = p->next;",
      "910:                 break;",
      "911:             }",
      "912:             parent = p;",
      "913:         }",
      "914:         if (!vs->vd->clients)",
      "915:             dcl->idle = 1;",
      "917:         qemu_free(vs->server.ds->data);",
      "918:         qemu_free(vs->server.ds);",
      "919:         qemu_free(vs->guest.ds);",
      "920:         qemu_free(vs);",
      "",
      "[Added Lines]",
      "940:         VNC_DEBUG(\"Closing down client sock: ret %d, errno %d\\n\",",
      "941:                   ret, ret < 0 ? last_errno : 0);",
      "942:         vnc_disconnect_start(vs);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "928: void vnc_client_error(VncState *vs)",
      "929: {",
      "931: }",
      "",
      "[Removed Lines]",
      "930:     vnc_client_io_error(vs, -1, EINVAL);",
      "",
      "[Added Lines]",
      "952:     VNC_DEBUG(\"Closing down client sock: protocol error\\n\");",
      "953:     vnc_disconnect_start(vs);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1110:     else",
      "1112:         ret = vnc_client_read_plain(vs);",
      "1114:         return;",
      "1116:     while (vs->read_handler && vs->input.offset >= vs->read_handler_expect) {",
      "1117:         size_t len = vs->read_handler_expect;",
      "1118:         int ret;",
      "1120:         ret = vs->read_handler(vs, vs->input.buffer, len);",
      "1122:             return;",
      "1124:         if (!ret) {",
      "1125:             memmove(vs->input.buffer, vs->input.buffer + len, (vs->input.offset - len));",
      "",
      "[Removed Lines]",
      "1113:     if (!ret)",
      "1121:         if (vs->csock == -1)",
      "",
      "[Added Lines]",
      "1136:     if (!ret) {",
      "1137:         if (vs->csock == -1)",
      "1138:             vnc_disconnect_finish(vs);",
      "1140:     }",
      "1147:         if (vs->csock == -1) {",
      "1148:             vnc_disconnect_finish(vs);",
      "1150:         }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1134: {",
      "1135:     buffer_reserve(&vs->output, len);",
      "1138:         qemu_set_fd_handler2(vs->csock, NULL, vnc_client_read, vnc_client_write, vs);",
      "1139:     }",
      "",
      "[Removed Lines]",
      "1137:     if (buffer_empty(&vs->output)) {",
      "",
      "[Added Lines]",
      "1165:     if (vs->csock != -1 && buffer_empty(&vs->output)) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1176: void vnc_flush(VncState *vs)",
      "1177: {",
      "1179:         vnc_client_write(vs);",
      "1180: }",
      "",
      "[Removed Lines]",
      "1178:     if (vs->output.offset)",
      "",
      "[Added Lines]",
      "1206:     if (vs->csock != -1 && vs->output.offset)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2009:     vnc_write(vs, \"RFB 003.008\\n\", 12);",
      "2010:     vnc_flush(vs);",
      "2011:     vnc_read_when(vs, protocol_version, 12);",
      "2013:     reset_keys(vs);",
      "2015:     vs->next = vd->clients;",
      "2016:     vd->clients = vs;",
      "2017: }",
      "2019: static void vnc_listen_read(void *opaque)",
      "",
      "[Removed Lines]",
      "2012:     vnc_update_client(vs);",
      "",
      "[Added Lines]",
      "2045:     vnc_update_client(vs);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "753b4053311ff1437d99726970b1e7e6bf38249b",
      "candidate_info": {
        "commit_hash": "753b4053311ff1437d99726970b1e7e6bf38249b",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/753b4053311ff1437d99726970b1e7e6bf38249b",
        "files": [
          "vnc.c",
          "vnc.h"
        ],
        "message": "Support multiple VNC clients (Brian Kress)\n\nChange structure associated with a display from VncState to a new structure\nVncDisplay. Remove client specific fields from VncDisplay. Remove display\nspecific fields from VncState. Maintain a linked list of VncStates per\nVncDisplay structure, update as necessary. When updates/resizes/copies come in\nfrom the hardware, dispatch to all clients. \n\nSigned-off-by: Brian Kress <kressb@moose.net>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>\n\n\ngit-svn-id: svn://svn.savannah.nongnu.org/qemu/trunk@6621 c046a42c-6fe2-441c-8c8c-71466251a162",
        "before_after_code_files": [
          "vnc.c||vnc.c",
          "vnc.h||vnc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "vnc.c||vnc.c"
          ],
          "candidate": [
            "vnc.c||vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "vnc.c||vnc.c": [
          "File: vnc.c -> vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: #define VNC_AUTH_CHALLENGE_SIZE 16",
          "93: struct VncState",
          "94: {",
          "95:     QEMUTimer *timer;",
          "97:     int csock;",
          "98:     DisplayState *ds;",
          "99:     int need_update;",
          "100:     uint32_t dirty_row[VNC_MAX_HEIGHT][VNC_DIRTY_WORDS];",
          "101:     char *old_data;",
          "",
          "[Removed Lines]",
          "96:     int lsock;",
          "",
          "[Added Lines]",
          "93: typedef struct VncDisplay VncDisplay;",
          "95: struct VncDisplay",
          "96: {",
          "97:     int lsock;",
          "98:     DisplayState *ds;",
          "99:     VncState *clients;",
          "100:     kbd_layout_t *kbd_layout;",
          "102:     char *display;",
          "103:     char *password;",
          "104:     int auth;",
          "105: #ifdef CONFIG_VNC_TLS",
          "106:     int subauth;",
          "107:     int x509verify;",
          "109:     char *x509cacert;",
          "110:     char *x509cacrl;",
          "111:     char *x509cert;",
          "112:     char *x509key;",
          "113: #endif",
          "114: };",
          "121:     VncDisplay *vd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     int major;",
          "112:     int minor;",
          "126:     char challenge[VNC_AUTH_CHALLENGE_SIZE];",
          "128: #ifdef CONFIG_VNC_TLS",
          "",
          "[Removed Lines]",
          "114:     char *display;",
          "115:     char *password;",
          "116:     int auth;",
          "117: #ifdef CONFIG_VNC_TLS",
          "118:     int subauth;",
          "119:     int x509verify;",
          "121:     char *x509cacert;",
          "122:     char *x509cacrl;",
          "123:     char *x509cert;",
          "124:     char *x509key;",
          "125: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     Buffer output;",
          "134:     Buffer input;",
          "137:     VncWritePixels *write_pixels;",
          "138:     VncSendHextileTile *send_hextile_tile;",
          "",
          "[Removed Lines]",
          "135:     kbd_layout_t *kbd_layout;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:     Buffer zlib;",
          "150:     Buffer zlib_tmp;",
          "151:     z_stream zlib_stream[4];",
          "152: };",
          "155: static DisplayChangeListener *dcl;",
          "157: void do_info_vnc(void)",
          "158: {",
          "160:  term_printf(\"VNC server disabled\\n\");",
          "161:     else {",
          "162:  term_printf(\"VNC server active on: \");",
          "164:  term_printf(\"\\n\");",
          "167:      term_printf(\"No client connected\\n\");",
          "168:  else",
          "169:      term_printf(\"Client connected\\n\");",
          "",
          "[Removed Lines]",
          "159:     if (vnc_state == NULL || vnc_state->display == NULL)",
          "163:  term_print_filename(vnc_state->display);",
          "166:  if (vnc_state->csock == -1)",
          "",
          "[Added Lines]",
          "163:     VncState *next;",
          "171:     if (vnc_display == NULL || vnc_display->display == NULL)",
          "175:  term_print_filename(vnc_display->display);",
          "178:  if (vnc_display->clients == NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190: static void vnc_update_client(void *opaque);",
          "191: static void vnc_client_read(void *opaque);",
          "195: static inline void vnc_set_bit(uint32_t *d, int k)",
          "196: {",
          "",
          "[Removed Lines]",
          "193: static void vnc_colordepth(DisplayState *ds);",
          "",
          "[Added Lines]",
          "205: static void vnc_colordepth(VncState *vs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "233:     return 0;",
          "234: }",
          "237: {",
          "239:     int i;",
          "241:     h += y;",
          "",
          "[Removed Lines]",
          "236: static void vnc_dpy_update(DisplayState *ds, int x, int y, int w, int h)",
          "238:     VncState *vs = ds->opaque;",
          "",
          "[Added Lines]",
          "248: static void vnc_update(VncState *vs, int x, int y, int w, int h)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:      vnc_set_bit(vs->dirty_row[y], (x + i) / 16);",
          "258: }",
          "260: static void vnc_framebuffer_update(VncState *vs, int x, int y, int w, int h,",
          "261:        int32_t encoding)",
          "262: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: static void vnc_dpy_update(DisplayState *ds, int x, int y, int w, int h)",
          "272: {",
          "273:     VncDisplay *vd = ds->opaque;",
          "274:     VncState *vs = vd->clients;",
          "275:     while (vs != NULL) {",
          "276:         vnc_update(vs, x, y, w, h);",
          "277:         vs = vs->next;",
          "278:     }",
          "279: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "301:     buffer->offset += len;",
          "302: }",
          "305: {",
          "306:     int size_changed;",
          "309:     vs->old_data = qemu_realloc(vs->old_data, ds_get_linesize(ds) * ds_get_height(ds));",
          "",
          "[Removed Lines]",
          "304: static void vnc_dpy_resize(DisplayState *ds)",
          "307:     VncState *vs = ds->opaque;",
          "",
          "[Added Lines]",
          "325: static void vnc_resize(VncState *vs)",
          "327:     DisplayState *ds = vs->ds;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "316:     if (ds_get_bytes_per_pixel(ds) != vs->serverds.pf.bytes_per_pixel)",
          "317:         console_color_init(ds);",
          "319:     size_changed = ds_get_width(ds) != vs->serverds.width ||",
          "320:                    ds_get_height(ds) != vs->serverds.height;",
          "321:     vs->serverds = *(ds->surface);",
          "",
          "[Removed Lines]",
          "318:     vnc_colordepth(ds);",
          "",
          "[Added Lines]",
          "340:     vnc_colordepth(vs);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "334:     memset(vs->old_data, 42, ds_get_linesize(vs->ds) * ds_get_height(vs->ds));",
          "335: }",
          "338: static void vnc_write_pixels_copy(VncState *vs, void *pixels, int size)",
          "339: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359: static void vnc_dpy_resize(DisplayState *ds)",
          "360: {",
          "361:     VncDisplay *vd = ds->opaque;",
          "362:     VncState *vs = vd->clients;",
          "363:     while (vs != NULL) {",
          "364:         vnc_resize(vs);",
          "365:         vs = vs->next;",
          "366:     }",
          "367: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "599:     }",
          "600: }",
          "603: {",
          "606:     vnc_update_client(vs);",
          "",
          "[Removed Lines]",
          "602: static void vnc_copy(DisplayState *ds, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
          "604:     VncState *vs = ds->opaque;",
          "",
          "[Added Lines]",
          "634: static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "614:     vnc_flush(vs);",
          "615: }",
          "617: static int find_dirty_height(VncState *vs, int y, int last_x, int x)",
          "618: {",
          "619:     int h;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647: static void vnc_dpy_copy(DisplayState *ds, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
          "648: {",
          "649:     VncDisplay *vd = ds->opaque;",
          "650:     VncState *vs = vd->clients;",
          "651:     while (vs != NULL) {",
          "652:         if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT))",
          "653:             vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);",
          "655:             vnc_update(vs, dst_x, dst_y, w, h);",
          "656:         vs = vs->next;",
          "657:     }",
          "658: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "726: }",
          "737: static void audio_capture_notify(void *opaque, audcnotification_e cmd)",
          "738: {",
          "",
          "[Removed Lines]",
          "728: static int vnc_listen_poll(void *opaque)",
          "729: {",
          "730:     VncState *vs = opaque;",
          "731:     if (vs->csock == -1)",
          "732:  return 1;",
          "733:     return 0;",
          "734: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "817:  VNC_DEBUG(\"Closing down client sock %d %d\\n\", ret, ret < 0 ? last_errno : 0);",
          "818:  qemu_set_fd_handler2(vs->csock, NULL, NULL, NULL, NULL);",
          "819:  closesocket(vs->csock);",
          "825: #ifdef CONFIG_VNC_TLS",
          "826:  if (vs->tls_session) {",
          "827:      gnutls_deinit(vs->tls_session);",
          "828:      vs->tls_session = NULL;",
          "829:  }",
          "832:         audio_del(vs);",
          "833:  return 0;",
          "834:     }",
          "835:     return ret;",
          "",
          "[Removed Lines]",
          "820:  vs->csock = -1;",
          "821:  dcl->idle = 1;",
          "822:  buffer_reset(&vs->input);",
          "823:  buffer_reset(&vs->output);",
          "824:  vs->need_update = 0;",
          "830:  vs->wiremode = VNC_WIREMODE_CLEAR;",
          "",
          "[Added Lines]",
          "854:         qemu_del_timer(vs->timer);",
          "855:         qemu_free_timer(vs->timer);",
          "856:         if (vs->input.buffer) qemu_free(vs->input.buffer);",
          "857:         if (vs->output.buffer) qemu_free(vs->output.buffer);",
          "866:         VncState *p, *parent = NULL;",
          "867:         for (p = vs->vd->clients; p != NULL; p = p->next) {",
          "868:             if (p == vs) {",
          "869:                 if (parent)",
          "870:                     parent->next = p->next;",
          "871:                 else",
          "872:                     vs->vd->clients = p->next;",
          "873:                 break;",
          "874:             }",
          "875:             parent = p;",
          "876:         }",
          "877:         if (!vs->vd->clients)",
          "878:             dcl->idle = 1;",
          "880:         qemu_free(vs->old_data);",
          "881:         qemu_free(vs);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1096: static void press_key(VncState *vs, int keysym)",
          "1097: {",
          "1100: }",
          "1102: static void do_key_event(VncState *vs, int down, int keycode, int sym)",
          "",
          "[Removed Lines]",
          "1098:     kbd_put_keycode(keysym2scancode(vs->kbd_layout, keysym) & 0x7f);",
          "1099:     kbd_put_keycode(keysym2scancode(vs->kbd_layout, keysym) | 0x80);",
          "",
          "[Added Lines]",
          "1148:     kbd_put_keycode(keysym2scancode(vs->vd->kbd_layout, keysym) & 0x7f);",
          "1149:     kbd_put_keycode(keysym2scancode(vs->vd->kbd_layout, keysym) | 0x80);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1129:         break;",
          "1130:     }",
          "1134:            keypress before sending this one.  This will happen if the user",
          "1135:            toggles numlock away from the VNC window.",
          "1138:             if (!vs->modifiers_state[0x45]) {",
          "1139:                 vs->modifiers_state[0x45] = 1;",
          "1140:                 press_key(vs, 0xff7f);",
          "",
          "[Removed Lines]",
          "1132:     if (keycode_is_keypad(vs->kbd_layout, keycode)) {",
          "1137:         if (keysym_is_numlock(vs->kbd_layout, sym & 0xFFFF)) {",
          "",
          "[Added Lines]",
          "1182:     if (keycode_is_keypad(vs->vd->kbd_layout, keycode)) {",
          "1187:         if (keysym_is_numlock(vs->vd->kbd_layout, sym & 0xFFFF)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1207:     if (sym >= 'A' && sym <= 'Z' && is_graphic_console())",
          "1208:  sym = sym - 'A' + 'a';",
          "1211:     do_key_event(vs, down, keycode, sym);",
          "1212: }",
          "",
          "[Removed Lines]",
          "1210:     keycode = keysym2scancode(vs->kbd_layout, sym & 0xFFFF);",
          "",
          "[Added Lines]",
          "1260:     keycode = keysym2scancode(vs->vd->kbd_layout, sym & 0xFFFF);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1279:     vs->tight_compression = 9;",
          "1280:     vs->tight_quality = 9;",
          "1281:     vs->absolute = -1;",
          "1284:     for (i = n_encodings - 1; i >= 0; i--) {",
          "1285:         enc = encodings[i];",
          "",
          "[Removed Lines]",
          "1282:     dcl->dpy_copy = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1288:             vs->vnc_encoding = enc;",
          "1289:             break;",
          "1290:         case VNC_ENCODING_COPYRECT:",
          "1292:             break;",
          "1293:         case VNC_ENCODING_HEXTILE:",
          "1294:             vs->features |= VNC_FEATURE_HEXTILE_MASK;",
          "",
          "[Removed Lines]",
          "1291:             dcl->dpy_copy = vnc_copy;",
          "",
          "[Added Lines]",
          "1340:             vs->features |= VNC_FEATURE_COPYRECT_MASK;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1433: }",
          "1436: {",
          "1442:         vnc_write_u8(vs, 0);",
          "1446:         pixel_format_message(vs);",
          "1447:         vnc_flush(vs);",
          "1448:     } else {",
          "",
          "[Removed Lines]",
          "1435: static void vnc_colordepth(DisplayState *ds)",
          "1437:     struct VncState *vs = ds->opaque;",
          "1439:     if (vs->csock != -1 && vnc_has_feature(vs, VNC_FEATURE_WMVI)) {",
          "1444:         vnc_framebuffer_update(vs, 0, 0, ds_get_width(ds), ds_get_height(ds),",
          "1445:                                VNC_ENCODING_WMVi);",
          "",
          "[Added Lines]",
          "1484: static void vnc_colordepth(VncState *vs)",
          "1486:     if (vnc_has_feature(vs, VNC_FEATURE_WMVI)) {",
          "1491:         vnc_framebuffer_update(vs, 0, 0, ds_get_width(vs->ds),",
          "1492:                                ds_get_height(vs->ds), VNC_ENCODING_WMVi);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1626:     int i, j, pwlen;",
          "1627:     unsigned char key[8];",
          "1630:  VNC_DEBUG(\"No password configured on server\");",
          "1632:  if (vs->minor >= 8) {",
          "",
          "[Removed Lines]",
          "1629:     if (!vs->password || !vs->password[0]) {",
          "",
          "[Added Lines]",
          "1676:     if (!vs->vd->password || !vs->vd->password[0]) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1642:     memcpy(response, vs->challenge, VNC_AUTH_CHALLENGE_SIZE);",
          "1646:     for (i=0; i<sizeof(key); i++)",
          "1648:     deskey(key, EN0);",
          "1649:     for (j = 0; j < VNC_AUTH_CHALLENGE_SIZE; j += 8)",
          "1650:         des(response+j, response+j);",
          "",
          "[Removed Lines]",
          "1645:     pwlen = strlen(vs->password);",
          "1647:         key[i] = i<pwlen ? vs->password[i] : 0;",
          "",
          "[Added Lines]",
          "1692:     pwlen = strlen(vs->vd->password);",
          "1694:         key[i] = i<pwlen ? vs->vd->password[i] : 0;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1733:     gnutls_certificate_credentials_t x509_cred;",
          "1734:     int ret;",
          "1737:  VNC_DEBUG(\"No CA x509 certificate specified\\n\");",
          "1738:  return NULL;",
          "1739:     }",
          "1741:  VNC_DEBUG(\"No server x509 certificate specified\\n\");",
          "1742:  return NULL;",
          "1743:     }",
          "1745:  VNC_DEBUG(\"No server private key specified\\n\");",
          "1746:  return NULL;",
          "1747:     }",
          "",
          "[Removed Lines]",
          "1736:     if (!vs->x509cacert) {",
          "1740:     if (!vs->x509cert) {",
          "1744:     if (!vs->x509key) {",
          "",
          "[Added Lines]",
          "1783:     if (!vs->vd->x509cacert) {",
          "1787:     if (!vs->vd->x509cert) {",
          "1791:     if (!vs->vd->x509key) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1751:  return NULL;",
          "1752:     }",
          "1753:     if ((ret = gnutls_certificate_set_x509_trust_file(x509_cred,",
          "1755:             GNUTLS_X509_FMT_PEM)) < 0) {",
          "1756:  VNC_DEBUG(\"Cannot load CA certificate %s\\n\", gnutls_strerror(ret));",
          "1757:  gnutls_certificate_free_credentials(x509_cred);",
          "",
          "[Removed Lines]",
          "1754:             vs->x509cacert,",
          "",
          "[Added Lines]",
          "1801:             vs->vd->x509cacert,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1759:     }",
          "1761:     if ((ret = gnutls_certificate_set_x509_key_file (x509_cred,",
          "1764:            GNUTLS_X509_FMT_PEM)) < 0) {",
          "1765:  VNC_DEBUG(\"Cannot load certificate & key %s\\n\", gnutls_strerror(ret));",
          "1766:  gnutls_certificate_free_credentials(x509_cred);",
          "1767:  return NULL;",
          "1768:     }",
          "1771:  if ((ret = gnutls_certificate_set_x509_crl_file(x509_cred,",
          "1773:        GNUTLS_X509_FMT_PEM)) < 0) {",
          "1774:      VNC_DEBUG(\"Cannot load CRL %s\\n\", gnutls_strerror(ret));",
          "1775:      gnutls_certificate_free_credentials(x509_cred);",
          "",
          "[Removed Lines]",
          "1762:            vs->x509cert,",
          "1763:            vs->x509key,",
          "1770:     if (vs->x509cacrl) {",
          "1772:        vs->x509cacrl,",
          "",
          "[Added Lines]",
          "1809:            vs->vd->x509cert,",
          "1810:            vs->vd->x509key,",
          "1817:     if (vs->vd->x509cacrl) {",
          "1819:        vs->vd->x509cacrl,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1864: static int start_auth_vencrypt_subauth(VncState *vs)",
          "1865: {",
          "1867:     case VNC_AUTH_VENCRYPT_TLSNONE:",
          "1868:     case VNC_AUTH_VENCRYPT_X509NONE:",
          "1869:        VNC_DEBUG(\"Accept TLS auth none\\n\");",
          "",
          "[Removed Lines]",
          "1866:     switch (vs->subauth) {",
          "",
          "[Added Lines]",
          "1913:     switch (vs->vd->subauth) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1877:        return start_auth_vnc(vs);",
          "1881:        vnc_write_u8(vs, 1);",
          "1882:        if (vs->minor >= 8) {",
          "1883:            static const char err[] = \"Unsupported authentication type\";",
          "",
          "[Removed Lines]",
          "1880:        VNC_DEBUG(\"Reject auth %d\\n\", vs->auth);",
          "",
          "[Added Lines]",
          "1927:        VNC_DEBUG(\"Reject auth %d\\n\", vs->vd->auth);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1909:        return -1;",
          "1910:     }",
          "1913:  if (vnc_validate_certificate(vs) < 0) {",
          "1914:      VNC_DEBUG(\"Client verification failed\\n\");",
          "1915:      vnc_client_error(vs);",
          "",
          "[Removed Lines]",
          "1912:     if (vs->x509verify) {",
          "",
          "[Added Lines]",
          "1959:     if (vs->vd->x509verify) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1934: }",
          "1936: #define NEED_X509_AUTH(vs)         \\",
          "1942: static int vnc_start_tls(struct VncState *vs) {",
          "",
          "[Removed Lines]",
          "1937:     ((vs)->subauth == VNC_AUTH_VENCRYPT_X509NONE ||   \\",
          "1938:      (vs)->subauth == VNC_AUTH_VENCRYPT_X509VNC ||    \\",
          "1939:      (vs)->subauth == VNC_AUTH_VENCRYPT_X509PLAIN)",
          "",
          "[Added Lines]",
          "1984:     ((vs)->vd->subauth == VNC_AUTH_VENCRYPT_X509NONE ||   \\",
          "1985:      (vs)->vd->subauth == VNC_AUTH_VENCRYPT_X509VNC ||    \\",
          "1986:      (vs)->vd->subauth == VNC_AUTH_VENCRYPT_X509PLAIN)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2000:   vnc_client_error(vs);",
          "2001:   return -1;",
          "2002:      }",
          "2004:   VNC_DEBUG(\"Requesting a client certificate\\n\");",
          "2005:   gnutls_certificate_server_set_request (vs->tls_session, GNUTLS_CERT_REQUEST);",
          "2006:      }",
          "",
          "[Removed Lines]",
          "2003:      if (vs->x509verify) {",
          "",
          "[Added Lines]",
          "2050:      if (vs->vd->x509verify) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2035: {",
          "2036:     int auth = read_u32(data, 0);",
          "2039:  VNC_DEBUG(\"Rejecting auth %d\\n\", auth);",
          "2041:  vnc_flush(vs);",
          "",
          "[Removed Lines]",
          "2038:     if (auth != vs->subauth) {",
          "",
          "[Added Lines]",
          "2085:     if (auth != vs->vd->subauth) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2070:  vnc_flush(vs);",
          "2071:  vnc_client_error(vs);",
          "2072:     } else {",
          "2077:  vnc_flush(vs);",
          "2078:  vnc_read_when(vs, protocol_client_vencrypt_auth, 4);",
          "2079:     }",
          "",
          "[Removed Lines]",
          "2073:  VNC_DEBUG(\"Sending allowed auth %d\\n\", vs->subauth);",
          "",
          "[Added Lines]",
          "2120:  VNC_DEBUG(\"Sending allowed auth %d\\n\", vs->vd->subauth);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2106:        vnc_client_error(vs);",
          "2108:        VNC_DEBUG(\"Client requested auth %d\\n\", (int)data[0]);",
          "2110:        case VNC_AUTH_NONE:",
          "2111:            VNC_DEBUG(\"Accept auth none\\n\");",
          "2112:            if (vs->minor >= 8) {",
          "",
          "[Removed Lines]",
          "2109:        switch (vs->auth) {",
          "",
          "[Added Lines]",
          "2156:        switch (vs->vd->auth) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2131:            vnc_write_u8(vs, 1);",
          "2132:            if (vs->minor >= 8) {",
          "2133:                static const char err[] = \"Authentication failed\";",
          "",
          "[Removed Lines]",
          "2130:            VNC_DEBUG(\"Reject auth %d\\n\", vs->auth);",
          "",
          "[Added Lines]",
          "2177:            VNC_DEBUG(\"Reject auth %d\\n\", vs->vd->auth);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2172:  vs->minor = 3;",
          "2174:     if (vs->minor == 3) {",
          "2176:             VNC_DEBUG(\"Tell client auth none\\n\");",
          "2178:             vnc_flush(vs);",
          "2179:             vnc_read_when(vs, protocol_client_init, 1);",
          "2181:             VNC_DEBUG(\"Tell client VNC auth\\n\");",
          "2183:             vnc_flush(vs);",
          "2184:             start_auth_vnc(vs);",
          "2185:        } else {",
          "2187:             vnc_write_u32(vs, VNC_AUTH_INVALID);",
          "2188:             vnc_flush(vs);",
          "2189:             vnc_client_error(vs);",
          "2190:        }",
          "2191:     } else {",
          "2195:  vnc_read_when(vs, protocol_client_auth, 1);",
          "2196:  vnc_flush(vs);",
          "2197:     }",
          "",
          "[Removed Lines]",
          "2175:  if (vs->auth == VNC_AUTH_NONE) {",
          "2177:             vnc_write_u32(vs, vs->auth);",
          "2180:        } else if (vs->auth == VNC_AUTH_VNC) {",
          "2182:             vnc_write_u32(vs, vs->auth);",
          "2186:             VNC_DEBUG(\"Unsupported auth %d for protocol 3.3\\n\", vs->auth);",
          "2192:  VNC_DEBUG(\"Telling client we support auth %d\\n\", vs->auth);",
          "2194:  vnc_write_u8(vs, vs->auth);",
          "",
          "[Added Lines]",
          "2222:  if (vs->vd->auth == VNC_AUTH_NONE) {",
          "2224:             vnc_write_u32(vs, vs->vd->auth);",
          "2227:        } else if (vs->vd->auth == VNC_AUTH_VNC) {",
          "2229:             vnc_write_u32(vs, vs->vd->auth);",
          "2233:             VNC_DEBUG(\"Unsupported auth %d for protocol 3.3\\n\", vs->vd->auth);",
          "2239:  VNC_DEBUG(\"Telling client we support auth %d\\n\", vs->vd->auth);",
          "2241:  vnc_write_u8(vs, vs->vd->auth);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2199:     return 0;",
          "2200: }",
          "2203: {",
          "2205:     dcl->idle = 0;",
          "2206:     socket_set_nonblock(vs->csock);",
          "2207:     qemu_set_fd_handler2(vs->csock, NULL, vnc_client_read, NULL, vs);",
          "2208:     vnc_write(vs, \"RFB 003.008\\n\", 12);",
          "2209:     vnc_flush(vs);",
          "2210:     vnc_read_when(vs, protocol_version, 12);",
          "2211:     memset(vs->old_data, 0, ds_get_linesize(vs->ds) * ds_get_height(vs->ds));",
          "2212:     memset(vs->dirty_row, 0xFF, sizeof(vs->dirty_row));",
          "2215:     vnc_update_client(vs);",
          "2216:     reset_keys(vs);",
          "2217: }",
          "2219: static void vnc_listen_read(void *opaque)",
          "2220: {",
          "2222:     struct sockaddr_in addr;",
          "2223:     socklen_t addrlen = sizeof(addr);",
          "2226:     vga_hw_update();",
          "2231:     }",
          "2232: }",
          "2234: void vnc_display_init(DisplayState *ds)",
          "2235: {",
          "2238:     vs = qemu_mallocz(sizeof(VncState));",
          "2239:     dcl = qemu_mallocz(sizeof(DisplayChangeListener));",
          "2241:     ds->opaque = vs;",
          "2242:     dcl->idle = 1;",
          "2247:     vs->lsock = -1;",
          "2252:     vs->ds = ds;",
          "",
          "[Removed Lines]",
          "2202: static void vnc_connect(VncState *vs)",
          "2204:     VNC_DEBUG(\"New client on socket %d\\n\", vs->csock);",
          "2213:     vs->features = 0;",
          "2214:     dcl->dpy_copy = NULL;",
          "2221:     VncState *vs = opaque;",
          "2228:     vs->csock = accept(vs->lsock, (struct sockaddr *)&addr, &addrlen);",
          "2229:     if (vs->csock != -1) {",
          "2230:         vnc_connect(vs);",
          "2236:     VncState *vs;",
          "2243:     vnc_state = vs;",
          "2244:     vs->display = NULL;",
          "2245:     vs->password = NULL;",
          "2248:     vs->csock = -1;",
          "2249:     vs->last_x = -1;",
          "2250:     vs->last_y = -1;",
          "",
          "[Added Lines]",
          "2249: static void vnc_connect(VncDisplay *vd, int csock)",
          "2251:     VncState *vs = qemu_mallocz(sizeof(VncState));",
          "2252:     vs->csock = csock;",
          "2254:     VNC_DEBUG(\"New client on socket %d\\n\", csock);",
          "2259:     vs->vd = vd;",
          "2260:     vs->ds = vd->ds;",
          "2261:     vs->timer = qemu_new_timer(rt_clock, vnc_update_client, vs);",
          "2262:     vs->last_x = -1;",
          "2263:     vs->last_y = -1;",
          "2265:     vs->as.freq = 44100;",
          "2266:     vs->as.nchannels = 2;",
          "2267:     vs->as.fmt = AUD_FMT_S16;",
          "2268:     vs->as.endianness = 0;",
          "2270:     vnc_resize(vs);",
          "2279:     vs->next = vd->clients;",
          "2280:     vd->clients = vs;",
          "2285:     VncDisplay *vs = opaque;",
          "2292:     int csock = accept(vs->lsock, (struct sockaddr *)&addr, &addrlen);",
          "2293:     if (csock != -1) {",
          "2294:         vnc_connect(vs, csock);",
          "2300:     VncDisplay *vs;",
          "2307:     vnc_display = vs;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2259:     if (!vs->kbd_layout)",
          "2260:  exit(1);",
          "2264:     dcl->dpy_update = vnc_dpy_update;",
          "2265:     dcl->dpy_resize = vnc_dpy_resize;",
          "2266:     dcl->dpy_setdata = vnc_dpy_setdata;",
          "2268:     register_displaychangelistener(ds, dcl);",
          "2274: }",
          "2276: #ifdef CONFIG_VNC_TLS",
          "2278:        const char *certdir,",
          "2279:        const char *filename,",
          "2280:        char **cred,",
          "",
          "[Removed Lines]",
          "2262:     vs->timer = qemu_new_timer(rt_clock, vnc_update_client, vs);",
          "2267:     dcl->dpy_refresh = NULL;",
          "2270:     vs->as.freq = 44100;",
          "2271:     vs->as.nchannels = 2;",
          "2272:     vs->as.fmt = AUD_FMT_S16;",
          "2273:     vs->as.endianness = 0;",
          "2277: static int vnc_set_x509_credential(VncState *vs,",
          "",
          "[Added Lines]",
          "2321:     dcl->dpy_copy = vnc_dpy_copy;",
          "2329: static int vnc_set_x509_credential(VncDisplay *vs,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2305:     return 0;",
          "2306: }",
          "2309:            const char *certdir)",
          "2310: {",
          "2311:     if (vnc_set_x509_credential(vs, certdir, X509_CA_CERT_FILE, &vs->x509cacert, 0) < 0)",
          "",
          "[Removed Lines]",
          "2308: static int vnc_set_x509_credential_dir(VncState *vs,",
          "",
          "[Added Lines]",
          "2360: static int vnc_set_x509_credential_dir(VncDisplay *vs,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2332: void vnc_display_close(DisplayState *ds)",
          "2333: {",
          "2336:     if (!vs)",
          "2337:         return;",
          "",
          "[Removed Lines]",
          "2334:     VncState *vs = ds ? (VncState *)ds->opaque : vnc_state;",
          "",
          "[Added Lines]",
          "2386:     VncDisplay *vs = ds ? (VncDisplay *)ds->opaque : vnc_display;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2344:  close(vs->lsock);",
          "2345:  vs->lsock = -1;",
          "2346:     }",
          "2362:     vs->auth = VNC_AUTH_INVALID;",
          "2363: #ifdef CONFIG_VNC_TLS",
          "2364:     vs->subauth = VNC_AUTH_INVALID;",
          "2365:     vs->x509verify = 0;",
          "2366: #endif",
          "2368: }",
          "2370: int vnc_display_password(DisplayState *ds, const char *password)",
          "2371: {",
          "2374:     if (vs->password) {",
          "2375:  qemu_free(vs->password);",
          "",
          "[Removed Lines]",
          "2347:     if (vs->csock != -1) {",
          "2348:  qemu_set_fd_handler2(vs->csock, NULL, NULL, NULL, NULL);",
          "2349:  closesocket(vs->csock);",
          "2350:  vs->csock = -1;",
          "2351:  buffer_reset(&vs->input);",
          "2352:  buffer_reset(&vs->output);",
          "2353:  vs->need_update = 0;",
          "2354: #ifdef CONFIG_VNC_TLS",
          "2355:  if (vs->tls_session) {",
          "2356:      gnutls_deinit(vs->tls_session);",
          "2357:      vs->tls_session = NULL;",
          "2358:  }",
          "2359:  vs->wiremode = VNC_WIREMODE_CLEAR;",
          "2361:     }",
          "2367:     audio_del(vs);",
          "2372:     VncState *vs = ds ? (VncState *)ds->opaque : vnc_state;",
          "",
          "[Added Lines]",
          "2408:     VncDisplay *vs = ds ? (VncDisplay *)ds->opaque : vnc_display;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2386: int vnc_display_open(DisplayState *ds, const char *display)",
          "2387: {",
          "2389:     const char *options;",
          "2390:     int password = 0;",
          "2391:     int reverse = 0;",
          "",
          "[Removed Lines]",
          "2388:     VncState *vs = ds ? (VncState *)ds->opaque : vnc_state;",
          "",
          "[Added Lines]",
          "2424:     VncDisplay *vs = ds ? (VncDisplay *)ds->opaque : vnc_display;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2394:     int tls = 0, x509 = 0;",
          "2395: #endif",
          "2398:         return -1;",
          "2399:     vnc_display_close(ds);",
          "2400:     if (strcmp(display, \"none\") == 0)",
          "",
          "[Removed Lines]",
          "2397:     if (!vnc_state)",
          "",
          "[Added Lines]",
          "2433:     if (!vnc_display)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2499:             vs->display = NULL;",
          "2500:             return -1;",
          "2501:         } else {",
          "2503:             vs->lsock = -1;",
          "2505:         }",
          "2506:         return 0;",
          "",
          "[Removed Lines]",
          "2502:             vs->csock = vs->lsock;",
          "2504:             vnc_connect(vs);",
          "",
          "[Added Lines]",
          "2538:             int csock = vs->lsock;",
          "2540:             vnc_connect(vs, csock);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2523:             vs->display = dpy;",
          "2524:         }",
          "2525:     }",
          "2528: }",
          "",
          "[Removed Lines]",
          "2527:     return qemu_set_fd_handler2(vs->lsock, vnc_listen_poll, vnc_listen_read, NULL, vs);",
          "",
          "[Added Lines]",
          "2562:     return qemu_set_fd_handler2(vs->lsock, NULL, vnc_listen_read, NULL, vs);",
          "",
          "---------------"
        ],
        "vnc.h||vnc.h": [
          "File: vnc.h -> vnc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: #define VNC_FEATURE_WMVI                     3",
          "102: #define VNC_FEATURE_TIGHT                    4",
          "103: #define VNC_FEATURE_ZLIB                     5",
          "105: #define VNC_FEATURE_RESIZE_MASK              (1 << VNC_FEATURE_RESIZE)",
          "106: #define VNC_FEATURE_HEXTILE_MASK             (1 << VNC_FEATURE_HEXTILE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #define VNC_FEATURE_COPYRECT                 6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: #define VNC_FEATURE_WMVI_MASK                (1 << VNC_FEATURE_WMVI)",
          "109: #define VNC_FEATURE_TIGHT_MASK               (1 << VNC_FEATURE_TIGHT)",
          "110: #define VNC_FEATURE_ZLIB_MASK                (1 << VNC_FEATURE_ZLIB)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: #define VNC_FEATURE_COPYRECT_MASK            (1 << VNC_FEATURE_COPYRECT)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "703bc68ff569ac06905fa91d6db02364374522e8",
      "candidate_info": {
        "commit_hash": "703bc68ff569ac06905fa91d6db02364374522e8",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/703bc68ff569ac06905fa91d6db02364374522e8",
        "files": [
          "vnc.c",
          "vnc.h"
        ],
        "message": "a single vnc timer to refresh the screen\n\nThis patch removes the timer per vnc client connected and adds a single\ntimer to update all the possible clients.\nWe call vga_hw_update only once in the timer handler.\n\nSigned-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>\nMessage-Id:",
        "before_after_code_files": [
          "vnc.c||vnc.c",
          "vnc.h||vnc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "vnc.c||vnc.c"
          ],
          "candidate": [
            "vnc.c||vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "vnc.c||vnc.c": [
          "File: vnc.c -> vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:    3) resolutions > 1024",
          "219: static void vnc_disconnect_start(VncState *vs);",
          "220: static void vnc_disconnect_finish(VncState *vs);",
          "222: static void vnc_colordepth(VncState *vs);",
          "",
          "[Removed Lines]",
          "218: static void vnc_update_client(void *opaque);",
          "",
          "[Added Lines]",
          "218: static void vnc_update_client(VncState *vs);",
          "221: static void vnc_init_timer(VncDisplay *vd);",
          "222: static void vnc_remove_timer(VncDisplay *vd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "723:     return h;",
          "724: }",
          "727: {",
          "729:     if (vs->need_update && vs->csock != -1) {",
          "730:         int y;",
          "731:         uint8_t *guest_row;",
          "",
          "[Removed Lines]",
          "726: static void vnc_update_client(void *opaque)",
          "728:     VncState *vs = opaque;",
          "",
          "[Added Lines]",
          "728: static void vnc_update_client(VncState *vs)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "736:         int saved_offset;",
          "737:         int has_dirty = 0;",
          "742:             return;",
          "",
          "[Removed Lines]",
          "739:         if (vs->output.offset && !vs->audio_cap && !vs->force_update) {",
          "741:             qemu_mod_timer(vs->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
          "743:         }",
          "745:         vga_hw_update();",
          "",
          "[Added Lines]",
          "740:         if (vs->output.offset && !vs->audio_cap && !vs->force_update)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "778:             server_row += ds_get_linesize(vs->ds);",
          "779:         }",
          "783:             return;",
          "",
          "[Removed Lines]",
          "781:         if (!has_dirty && !vs->audio_cap && !vs->force_update) {",
          "782:             qemu_mod_timer(vs->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
          "784:         }",
          "",
          "[Added Lines]",
          "778:         if (!has_dirty && !vs->audio_cap && !vs->force_update)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "827:     }",
          "832:         vnc_disconnect_finish(vs);",
          "835: }",
          "",
          "[Removed Lines]",
          "829:     if (vs->csock != -1) {",
          "830:         qemu_mod_timer(vs->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
          "831:     } else {",
          "833:     }",
          "",
          "[Added Lines]",
          "824:     if (vs->csock == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "912: static void vnc_disconnect_finish(VncState *vs)",
          "913: {",
          "916:     if (vs->input.buffer) qemu_free(vs->input.buffer);",
          "917:     if (vs->output.buffer) qemu_free(vs->output.buffer);",
          "918: #ifdef CONFIG_VNC_TLS",
          "",
          "[Removed Lines]",
          "914:     qemu_del_timer(vs->timer);",
          "915:     qemu_free_timer(vs->timer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "941:     qemu_free(vs->server.ds);",
          "942:     qemu_free(vs->guest.ds);",
          "943:     qemu_free(vs);",
          "944: }",
          "946: int vnc_client_io_error(VncState *vs, int ret, int last_errno)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933:     vnc_remove_timer(vs->vd);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2077:     return 0;",
          "2078: }",
          "2080: static void vnc_connect(VncDisplay *vd, int csock)",
          "2081: {",
          "2082:     VncState *vs = qemu_mallocz(sizeof(VncState));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2070: static void vnc_refresh(void *opaque)",
          "2071: {",
          "2072:     VncDisplay *vd = opaque;",
          "2073:     VncState *vs = vd->clients;",
          "2075:     vga_hw_update();",
          "2077:     while (vs != NULL) {",
          "2078:         vnc_update_client(vs);",
          "2079:         vs = vs->next;",
          "2080:     }",
          "2082:     qemu_mod_timer(vd->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
          "2083: }",
          "2085: static void vnc_init_timer(VncDisplay *vd)",
          "2086: {",
          "2087:     if (vd->timer == NULL && vd->clients != NULL) {",
          "2088:         vd->timer = qemu_new_timer(rt_clock, vnc_refresh, vd);",
          "2089:         qemu_mod_timer(vd->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
          "2090:     }",
          "2091: }",
          "2093: static void vnc_remove_timer(VncDisplay *vd)",
          "2094: {",
          "2095:     if (vd->timer != NULL && vd->clients == NULL) {",
          "2096:         qemu_del_timer(vd->timer);",
          "2097:         qemu_free_timer(vd->timer);",
          "2098:         vd->timer = NULL;",
          "2099:     }",
          "2100: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2090:     vs->vd = vd;",
          "2091:     vs->ds = vd->ds;",
          "2093:     vs->last_x = -1;",
          "2094:     vs->last_y = -1;",
          "",
          "[Removed Lines]",
          "2092:     vs->timer = qemu_new_timer(rt_clock, vnc_update_client, vs);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2107:     vs->next = vd->clients;",
          "2108:     vd->clients = vs;",
          "2110:     vnc_update_client(vs);",
          "2112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2131:     vnc_init_timer(vd);",
          "",
          "---------------"
        ],
        "vnc.h||vnc.h": [
          "File: vnc.h -> vnc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: struct VncDisplay",
          "89: {",
          "90:     int lsock;",
          "91:     DisplayState *ds;",
          "92:     VncState *clients;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     QEMUTimer *timer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: struct VncState",
          "114: {",
          "116:     int csock;",
          "118:     DisplayState *ds;",
          "",
          "[Removed Lines]",
          "115:     QEMUTimer *timer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c522d0e2dee3774884a731691a702126901a1a88",
      "candidate_info": {
        "commit_hash": "c522d0e2dee3774884a731691a702126901a1a88",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/c522d0e2dee3774884a731691a702126901a1a88",
        "files": [
          "vnc.c",
          "vnc.h"
        ],
        "message": "vnc: throttle screen updates. (Gerd Hoffmann)\n\nThis patch makes the vnc server code skip screen refreshes in case\nthere is data in the output buffer.  This reduces the refresh rate to\nthrottle the bandwidth needed in case the network link is saturated.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>\n\n\ngit-svn-id: svn://svn.savannah.nongnu.org/qemu/trunk@6862 c046a42c-6fe2-441c-8c8c-71466251a162",
        "before_after_code_files": [
          "vnc.c||vnc.c",
          "vnc.h||vnc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "vnc.c||vnc.c"
          ],
          "candidate": [
            "vnc.c||vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "vnc.c||vnc.c": [
          "File: vnc.c -> vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "658: static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
          "659: {",
          "660:     vnc_update_client(vs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:     vs->force_update = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:         int saved_offset;",
          "711:         int has_dirty = 0;",
          "713:         vga_hw_update();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:         if (vs->output.offset && !vs->audio_cap && !vs->force_update) {",
          "716:             qemu_mod_timer(vs->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
          "717:             return;",
          "718:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "745:             server_row += ds_get_linesize(vs->ds);",
          "746:         }",
          "749:             qemu_mod_timer(vs->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
          "750:             return;",
          "751:         }",
          "",
          "[Removed Lines]",
          "748:         if (!has_dirty && !vs->audio_cap) {",
          "",
          "[Added Lines]",
          "755:         if (!has_dirty && !vs->audio_cap && !vs->force_update) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "789:         vs->output.buffer[saved_offset] = (n_rectangles >> 8) & 0xFF;",
          "790:         vs->output.buffer[saved_offset + 1] = n_rectangles & 0xFF;",
          "791:         vnc_flush(vs);",
          "793:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799:         vs->force_update = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1408:     int i;",
          "1409:     vs->need_update = 1;",
          "1410:     if (!incremental) {",
          "1411:         for (i = 0; i < h; i++) {",
          "1412:             vnc_set_bits(vs->guest.dirty[y_position + i],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1418:     vs->force_update = 1;",
          "",
          "---------------"
        ],
        "vnc.h||vnc.h": [
          "File: vnc.h -> vnc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     VncDisplay *vd;",
          "123:     int need_update;",
          "124:     uint32_t features;",
          "125:     int absolute;",
          "126:     int last_x;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     int force_update;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fc624122fb923c7fc4c1f426541d953e7df13c9",
      "candidate_info": {
        "commit_hash": "1fc624122fb923c7fc4c1f426541d953e7df13c9",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/1fc624122fb923c7fc4c1f426541d953e7df13c9",
        "files": [
          "vnc.c",
          "vnc.h",
          "vnchextile.h"
        ],
        "message": "single vnc server surface\n\nThis patch removes the server surface from VncState and adds a single\nserver surface to VncDisplay for all the possible clients connected.\nEach client maintains a different dirty bitmap in VncState.\nThe guest surface is moved to VncDisplay as well because we don't need\nto track guest updates in more than one place.\n\nThis patch has been updated to handle CopyRect correctly and efficiently.\n\nSigned-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>\nMessage-Id:",
        "before_after_code_files": [
          "vnc.c||vnc.c",
          "vnc.h||vnc.h",
          "vnchextile.h||vnchextile.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "vnc.c||vnc.c"
          ],
          "candidate": [
            "vnc.c||vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "vnc.c||vnc.c": [
          "File: vnc.c -> vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:    3) resolutions > 1024",
          "219: static void vnc_disconnect_start(VncState *vs);",
          "220: static void vnc_disconnect_finish(VncState *vs);",
          "221: static void vnc_init_timer(VncDisplay *vd);",
          "222: static void vnc_remove_timer(VncDisplay *vd);",
          "224: static void vnc_colordepth(VncState *vs);",
          "226: static inline void vnc_set_bit(uint32_t *d, int k)",
          "227: {",
          "",
          "[Removed Lines]",
          "218: static void vnc_update_client(VncState *vs);",
          "",
          "[Added Lines]",
          "218: static void vnc_update_client(VncState *vs, int has_dirty);",
          "225: static void framebuffer_update_request(VncState *vs, int incremental,",
          "226:                                        int x_position, int y_position,",
          "227:                                        int w, int h);",
          "228: static void vnc_refresh(void *opaque);",
          "229: static int vnc_refresh_server_surface(VncDisplay *vd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:     return 0;",
          "265: }",
          "268: {",
          "270:     int i;",
          "272:     h += y;",
          "",
          "[Removed Lines]",
          "267: static void vnc_update(VncState *vs, int x, int y, int w, int h)",
          "269:     struct VncSurface *s = &vs->guest;",
          "",
          "[Added Lines]",
          "272: static void vnc_dpy_update(DisplayState *ds, int x, int y, int w, int h)",
          "275:     VncDisplay *vd = ds->opaque;",
          "276:     struct VncSurface *s = &vd->guest;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "288:             vnc_set_bit(s->dirty[y], (x + i) / 16);",
          "289: }",
          "301: static void vnc_framebuffer_update(VncState *vs, int x, int y, int w, int h,",
          "302:                                    int32_t encoding)",
          "303: {",
          "",
          "[Removed Lines]",
          "291: static void vnc_dpy_update(DisplayState *ds, int x, int y, int w, int h)",
          "292: {",
          "293:     VncDisplay *vd = ds->opaque;",
          "294:     VncState *vs = vd->clients;",
          "295:     while (vs != NULL) {",
          "296:         vnc_update(vs, x, y, w, h);",
          "297:         vs = vs->next;",
          "298:     }",
          "299: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "342:     buffer->offset += len;",
          "343: }",
          "346: {",
          "348:     int size_changed;",
          "354:         console_color_init(ds);",
          "386:     while (vs != NULL) {",
          "388:         vs = vs->next;",
          "389:     }",
          "390: }",
          "",
          "[Removed Lines]",
          "345: static void vnc_resize(VncState *vs)",
          "347:     DisplayState *ds = vs->ds;",
          "351:     if (!vs->guest.ds)",
          "352:         vs->guest.ds = qemu_mallocz(sizeof(*vs->guest.ds));",
          "353:     if (ds_get_bytes_per_pixel(ds) != vs->guest.ds->pf.bytes_per_pixel)",
          "355:     vnc_colordepth(vs);",
          "356:     size_changed = ds_get_width(ds) != vs->guest.ds->width ||",
          "357:                    ds_get_height(ds) != vs->guest.ds->height;",
          "359:     if (size_changed) {",
          "360:         if (vs->csock != -1 && vnc_has_feature(vs, VNC_FEATURE_RESIZE)) {",
          "362:             vnc_write_u8(vs, 0);",
          "364:             vnc_framebuffer_update(vs, 0, 0, ds_get_width(ds), ds_get_height(ds),",
          "365:                                    VNC_ENCODING_DESKTOPRESIZE);",
          "366:             vnc_flush(vs);",
          "367:         }",
          "368:     }",
          "369:     memset(vs->guest.dirty, 0xFF, sizeof(vs->guest.dirty));",
          "372:     if (!vs->server.ds)",
          "373:         vs->server.ds = qemu_mallocz(sizeof(*vs->server.ds));",
          "374:     if (vs->server.ds->data)",
          "375:         qemu_free(vs->server.ds->data);",
          "377:     vs->server.ds->data = qemu_mallocz(vs->server.ds->linesize *",
          "378:                                        vs->server.ds->height);",
          "379:     memset(vs->server.dirty, 0xFF, sizeof(vs->guest.dirty));",
          "380: }",
          "382: static void vnc_dpy_resize(DisplayState *ds)",
          "383: {",
          "384:     VncDisplay *vd = ds->opaque;",
          "385:     VncState *vs = vd->clients;",
          "387:         vnc_resize(vs);",
          "",
          "[Added Lines]",
          "341: static void vnc_dpy_resize(DisplayState *ds)",
          "344:     VncDisplay *vd = ds->opaque;",
          "345:     VncState *vs = vd->clients;",
          "348:     if (!vd->server)",
          "349:         vd->server = qemu_mallocz(sizeof(*vd->server));",
          "350:     if (vd->server->data)",
          "351:         qemu_free(vd->server->data);",
          "353:     vd->server->data = qemu_mallocz(vd->server->linesize *",
          "354:                                     vd->server->height);",
          "357:     if (!vd->guest.ds)",
          "358:         vd->guest.ds = qemu_mallocz(sizeof(*vd->guest.ds));",
          "359:     if (ds_get_bytes_per_pixel(ds) != vd->guest.ds->pf.bytes_per_pixel)",
          "361:     size_changed = ds_get_width(ds) != vd->guest.ds->width ||",
          "362:                    ds_get_height(ds) != vd->guest.ds->height;",
          "364:     memset(vd->guest.dirty, 0xFF, sizeof(vd->guest.dirty));",
          "367:         vnc_colordepth(vs);",
          "368:         if (size_changed) {",
          "369:             if (vs->csock != -1 && vnc_has_feature(vs, VNC_FEATURE_RESIZE)) {",
          "371:                 vnc_write_u8(vs, 0);",
          "373:                 vnc_framebuffer_update(vs, 0, 0, ds_get_width(ds), ds_get_height(ds),",
          "374:                         VNC_ENCODING_DESKTOPRESIZE);",
          "375:                 vnc_flush(vs);",
          "376:             }",
          "377:         }",
          "378:         memset(vs->dirty, 0xFF, sizeof(vs->dirty));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "399: static void vnc_convert_pixel(VncState *vs, uint8_t *buf, uint32_t v)",
          "400: {",
          "401:     uint8_t r, g, b;",
          "409:     v = (r << vs->clientds.pf.rshift) |",
          "410:         (g << vs->clientds.pf.gshift) |",
          "411:         (b << vs->clientds.pf.bshift);",
          "",
          "[Removed Lines]",
          "403:     r = ((((v & vs->server.ds->pf.rmask) >> vs->server.ds->pf.rshift) << vs->clientds.pf.rbits) >>",
          "404:         vs->server.ds->pf.rbits);",
          "405:     g = ((((v & vs->server.ds->pf.gmask) >> vs->server.ds->pf.gshift) << vs->clientds.pf.gbits) >>",
          "406:         vs->server.ds->pf.gbits);",
          "407:     b = ((((v & vs->server.ds->pf.bmask) >> vs->server.ds->pf.bshift) << vs->clientds.pf.bbits) >>",
          "408:         vs->server.ds->pf.bbits);",
          "",
          "[Added Lines]",
          "393:     VncDisplay *vd = vs->vd;",
          "395:     r = ((((v & vd->server->pf.rmask) >> vd->server->pf.rshift) << vs->clientds.pf.rbits) >>",
          "396:         vd->server->pf.rbits);",
          "397:     g = ((((v & vd->server->pf.gmask) >> vd->server->pf.gshift) << vs->clientds.pf.gbits) >>",
          "398:         vd->server->pf.gbits);",
          "399:     b = ((((v & vd->server->pf.bmask) >> vd->server->pf.bshift) << vs->clientds.pf.bbits) >>",
          "400:         vd->server->pf.bbits);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "442: static void vnc_write_pixels_generic(VncState *vs, void *pixels1, int size)",
          "443: {",
          "444:     uint8_t buf[4];",
          "447:         uint32_t *pixels = pixels1;",
          "448:         int n, i;",
          "449:         n = size >> 2;",
          "",
          "[Removed Lines]",
          "446:     if (vs->server.ds->pf.bytes_per_pixel == 4) {",
          "",
          "[Added Lines]",
          "437:     VncDisplay *vd = vs->vd;",
          "439:     if (vd->server->pf.bytes_per_pixel == 4) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "451:             vnc_convert_pixel(vs, buf, pixels[i]);",
          "452:             vnc_write(vs, buf, vs->clientds.pf.bytes_per_pixel);",
          "453:         }",
          "455:         uint16_t *pixels = pixels1;",
          "456:         int n, i;",
          "457:         n = size >> 1;",
          "",
          "[Removed Lines]",
          "454:     } else if (vs->server.ds->pf.bytes_per_pixel == 2) {",
          "",
          "[Added Lines]",
          "447:     } else if (vd->server->pf.bytes_per_pixel == 2) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "459:             vnc_convert_pixel(vs, buf, pixels[i]);",
          "460:             vnc_write(vs, buf, vs->clientds.pf.bytes_per_pixel);",
          "461:         }",
          "463:         uint8_t *pixels = pixels1;",
          "464:         int n, i;",
          "465:         n = size;",
          "",
          "[Removed Lines]",
          "462:     } else if (vs->server.ds->pf.bytes_per_pixel == 1) {",
          "",
          "[Added Lines]",
          "455:     } else if (vd->server->pf.bytes_per_pixel == 1) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "476: {",
          "477:     int i;",
          "478:     uint8_t *row;",
          "481:     for (i = 0; i < h; i++) {",
          "482:         vs->write_pixels(vs, row, w * ds_get_bytes_per_pixel(vs->ds));",
          "483:         row += ds_get_linesize(vs->ds);",
          "",
          "[Removed Lines]",
          "480:     row = vs->server.ds->data + y * ds_get_linesize(vs->ds) + x * ds_get_bytes_per_pixel(vs->ds);",
          "",
          "[Added Lines]",
          "472:     VncDisplay *vd = vs->vd;",
          "474:     row = vd->server->data + y * ds_get_linesize(vs->ds) + x * ds_get_bytes_per_pixel(vs->ds);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "525:     int i, j;",
          "526:     int has_fg, has_bg;",
          "527:     uint8_t *last_fg, *last_bg;",
          "531:     has_fg = has_bg = 0;",
          "532:     for (j = y; j < (y + h); j += 16) {",
          "533:         for (i = x; i < (x + w); i += 16) {",
          "",
          "[Removed Lines]",
          "529:     last_fg = (uint8_t *) qemu_malloc(vs->server.ds->pf.bytes_per_pixel);",
          "530:     last_bg = (uint8_t *) qemu_malloc(vs->server.ds->pf.bytes_per_pixel);",
          "",
          "[Added Lines]",
          "522:     VncDisplay *vd = vs->vd;",
          "524:     last_fg = (uint8_t *) qemu_malloc(vd->server->pf.bytes_per_pixel);",
          "525:     last_bg = (uint8_t *) qemu_malloc(vd->server->pf.bytes_per_pixel);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "657: static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
          "658: {",
          "665:     vnc_write_u8(vs, 0);",
          "",
          "[Removed Lines]",
          "659:     uint8_t *src_row;",
          "660:     uint8_t *dst_row;",
          "661:     int y,pitch,depth;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "668:     vnc_write_u16(vs, src_x);",
          "669:     vnc_write_u16(vs, src_y);",
          "670:     vnc_flush(vs);",
          "688: }",
          "690: static void vnc_dpy_copy(DisplayState *ds, int src_x, int src_y, int dst_x, int dst_y, int w, int h)",
          "691: {",
          "692:     VncDisplay *vd = ds->opaque;",
          "693:     VncState *vs, *vn;",
          "695:     for (vs = vd->clients; vs != NULL; vs = vn) {",
          "696:         vn = vs->next;",
          "697:         if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {",
          "698:             vs->force_update = 1;",
          "701:         }",
          "702:     }",
          "704:     for (vs = vd->clients; vs != NULL; vs = vs->next) {",
          "705:         if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT))",
          "706:             vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);",
          "709:     }",
          "710: }",
          "713:                                        int y, int last_x, int x)",
          "714: {",
          "715:     int h;",
          "718:         int tmp_x;",
          "720:             break;",
          "721:         for (tmp_x = last_x; tmp_x < x; tmp_x++)",
          "723:     }",
          "725:     return h;",
          "726: }",
          "729: {",
          "730:     if (vs->need_update && vs->csock != -1) {",
          "731:         int y;",
          "736:         int n_rectangles;",
          "737:         int saved_offset;",
          "740:         if (vs->output.offset && !vs->audio_cap && !vs->force_update)",
          "742:             return;",
          "778:         if (!has_dirty && !vs->audio_cap && !vs->force_update)",
          "779:             return;",
          "",
          "[Removed Lines]",
          "673:     pitch = ds_get_linesize(vs->ds);",
          "674:     depth = ds_get_bytes_per_pixel(vs->ds);",
          "675:     src_row = vs->server.ds->data + pitch * src_y + depth * src_x;",
          "676:     dst_row = vs->server.ds->data + pitch * dst_y + depth * dst_x;",
          "677:     if (dst_y > src_y) {",
          "679:         src_row += pitch * (h-1);",
          "680:         dst_row += pitch * (h-1);",
          "681:         pitch = -pitch;",
          "682:     }",
          "683:     for (y = 0; y < h; y++) {",
          "684:         memmove(dst_row, src_row, w * depth);",
          "685:         src_row += pitch;",
          "686:         dst_row += pitch;",
          "687:     }",
          "699:             vnc_update_client(vs);",
          "708:             vnc_update(vs, dst_x, dst_y, w, h);",
          "712: static int find_and_clear_dirty_height(struct VncSurface *s,",
          "717:     for (h = 1; h < (s->ds->height - y); h++) {",
          "719:         if (!vnc_get_bit(s->dirty[y + h], last_x))",
          "722:             vnc_clear_bit(s->dirty[y + h], tmp_x);",
          "728: static void vnc_update_client(VncState *vs)",
          "732:         uint8_t *guest_row;",
          "733:         uint8_t *server_row;",
          "734:         int cmp_bytes;",
          "735:         uint32_t width_mask[VNC_DIRTY_WORDS];",
          "738:         int has_dirty = 0;",
          "749:         vnc_set_bits(width_mask, (ds_get_width(vs->ds) / 16), VNC_DIRTY_WORDS);",
          "750:         cmp_bytes = 16 * ds_get_bytes_per_pixel(vs->ds);",
          "751:         guest_row  = vs->guest.ds->data;",
          "752:         server_row = vs->server.ds->data;",
          "753:         for (y = 0; y < vs->guest.ds->height; y++) {",
          "754:             if (vnc_and_bits(vs->guest.dirty[y], width_mask, VNC_DIRTY_WORDS)) {",
          "755:                 int x;",
          "756:                 uint8_t *guest_ptr;",
          "757:                 uint8_t *server_ptr;",
          "759:                 guest_ptr  = guest_row;",
          "760:                 server_ptr = server_row;",
          "762:                 for (x = 0; x < vs->guest.ds->width;",
          "763:                      x += 16, guest_ptr += cmp_bytes, server_ptr += cmp_bytes) {",
          "764:                     if (!vnc_get_bit(vs->guest.dirty[y], (x / 16)))",
          "765:                         continue;",
          "766:                     vnc_clear_bit(vs->guest.dirty[y], (x / 16));",
          "767:                     if (memcmp(server_ptr, guest_ptr, cmp_bytes) == 0)",
          "768:                         continue;",
          "769:                     memcpy(server_ptr, guest_ptr, cmp_bytes);",
          "770:                     vnc_set_bit(vs->server.dirty[y], (x / 16));",
          "771:                     has_dirty++;",
          "772:                 }",
          "773:             }",
          "774:             guest_row  += ds_get_linesize(vs->ds);",
          "775:             server_row += ds_get_linesize(vs->ds);",
          "776:         }",
          "",
          "[Added Lines]",
          "668:     uint8_t *src_row;",
          "669:     uint8_t *dst_row;",
          "670:     int i,x,y,pitch,depth,inc,w_lim,s;",
          "671:     int cmp_bytes;",
          "673:     vnc_refresh_server_surface(vd);",
          "678:             vnc_update_client(vs, 1);",
          "684:     pitch = ds_get_linesize(vd->ds);",
          "685:     depth = ds_get_bytes_per_pixel(vd->ds);",
          "686:     src_row = vd->server->data + pitch * src_y + depth * src_x;",
          "687:     dst_row = vd->server->data + pitch * dst_y + depth * dst_x;",
          "688:     y = dst_y;",
          "689:     inc = 1;",
          "690:     if (dst_y > src_y) {",
          "692:         src_row += pitch * (h-1);",
          "693:         dst_row += pitch * (h-1);",
          "694:         pitch = -pitch;",
          "695:         y = dst_y + h - 1;",
          "696:         inc = -1;",
          "697:     }",
          "698:     w_lim = w - (16 - (dst_x % 16));",
          "699:     if (w_lim < 0)",
          "700:         w_lim = w;",
          "701:     else",
          "702:         w_lim = w - (w_lim % 16);",
          "703:     for (i = 0; i < h; i++) {",
          "704:         for (x = 0; x <= w_lim;",
          "705:                 x += s, src_row += cmp_bytes, dst_row += cmp_bytes) {",
          "706:             if (x == w_lim) {",
          "707:                 if ((s = w - w_lim) == 0)",
          "708:                     break;",
          "709:             } else if (!x) {",
          "710:                 s = (16 - (dst_x % 16));",
          "711:                 s = MIN(s, w_lim);",
          "712:             } else {",
          "713:                 s = 16;",
          "714:             }",
          "715:             cmp_bytes = s * depth;",
          "716:             if (memcmp(src_row, dst_row, cmp_bytes) == 0)",
          "717:                 continue;",
          "718:             memmove(dst_row, src_row, cmp_bytes);",
          "719:             vs = vd->clients;",
          "720:             while (vs != NULL) {",
          "721:                 if (!vnc_has_feature(vs, VNC_FEATURE_COPYRECT))",
          "722:                     vnc_set_bit(vs->dirty[y], ((x + dst_x) / 16));",
          "723:                 vs = vs->next;",
          "724:             }",
          "725:         }",
          "726:         src_row += pitch - w * depth;",
          "727:         dst_row += pitch - w * depth;",
          "728:         y += inc;",
          "729:     }",
          "737: static int find_and_clear_dirty_height(struct VncState *vs,",
          "741:     VncDisplay *vd = vs->vd;",
          "743:     for (h = 1; h < (vd->server->height - y); h++) {",
          "745:         if (!vnc_get_bit(vs->dirty[y + h], last_x))",
          "748:             vnc_clear_bit(vs->dirty[y + h], tmp_x);",
          "754: static void vnc_update_client(VncState *vs, int has_dirty)",
          "757:         VncDisplay *vd = vs->vd;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "790:         saved_offset = vs->output.offset;",
          "791:         vnc_write_u16(vs, 0);",
          "794:             int x;",
          "795:             int last_x = -1;",
          "798:                     if (last_x == -1) {",
          "799:                         last_x = x;",
          "800:                     }",
          "802:                 } else {",
          "803:                     if (last_x != -1) {",
          "805:                         send_framebuffer_update(vs, last_x * 16, y, (x - last_x) * 16, h);",
          "806:                         n_rectangles++;",
          "807:                     }",
          "",
          "[Removed Lines]",
          "793:         for (y = 0; y < vs->server.ds->height; y++) {",
          "796:             for (x = 0; x < vs->server.ds->width / 16; x++) {",
          "797:                 if (vnc_get_bit(vs->server.dirty[y], x)) {",
          "801:                     vnc_clear_bit(vs->server.dirty[y], x);",
          "804:                         int h = find_and_clear_dirty_height(&vs->server, y, last_x, x);",
          "",
          "[Added Lines]",
          "781:         for (y = 0; y < vd->server->height; y++) {",
          "784:             for (x = 0; x < vd->server->width / 16; x++) {",
          "785:                 if (vnc_get_bit(vs->dirty[y], x)) {",
          "789:                     vnc_clear_bit(vs->dirty[y], x);",
          "792:                         int h = find_and_clear_dirty_height(vs, y, last_x, x);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "809:                 }",
          "810:             }",
          "811:             if (last_x != -1) {",
          "813:                 send_framebuffer_update(vs, last_x * 16, y, (x - last_x) * 16, h);",
          "814:                 n_rectangles++;",
          "815:             }",
          "",
          "[Removed Lines]",
          "812:                 int h = find_and_clear_dirty_height(&vs->server, y, last_x, x);",
          "",
          "[Added Lines]",
          "800:                 int h = find_and_clear_dirty_height(vs, y, last_x, x);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "926:     if (!vs->vd->clients)",
          "927:         dcl->idle = 1;",
          "932:     qemu_free(vs);",
          "933:     vnc_remove_timer(vs->vd);",
          "934: }",
          "",
          "[Removed Lines]",
          "929:     qemu_free(vs->server.ds->data);",
          "930:     qemu_free(vs->server.ds);",
          "931:     qemu_free(vs->guest.ds);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1507:     if (!incremental) {",
          "1508:         vs->force_update = 1;",
          "1509:         for (i = 0; i < h; i++) {",
          "1513:                          (ds_get_width(vs->ds) / 16), VNC_DIRTY_WORDS);",
          "1514:         }",
          "1515:     }",
          "",
          "[Removed Lines]",
          "1510:             vnc_set_bits(vs->guest.dirty[y_position + i],",
          "1511:                          (ds_get_width(vs->ds) / 16), VNC_DIRTY_WORDS);",
          "1512:             vnc_set_bits(vs->server.dirty[y_position + i],",
          "",
          "[Added Lines]",
          "1495:             vnc_set_bits(vs->dirty[y_position + i],",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1638:         return;",
          "1639:     }",
          "1642:     vs->clientds.pf.rmax = red_max;",
          "1643:     count_bits(vs->clientds.pf.rbits, red_max);",
          "1644:     vs->clientds.pf.rshift = red_shift;",
          "",
          "[Removed Lines]",
          "1641:     vs->clientds = *(vs->guest.ds);",
          "",
          "[Added Lines]",
          "1624:     vs->clientds = *(vs->vd->guest.ds);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2067:     return 0;",
          "2068: }",
          "2070: static void vnc_refresh(void *opaque)",
          "2071: {",
          "2072:     VncDisplay *vd = opaque;",
          "2075:     vga_hw_update();",
          "2077:     while (vs != NULL) {",
          "2079:         vs = vs->next;",
          "2080:     }",
          "",
          "[Removed Lines]",
          "2073:     VncState *vs = vd->clients;",
          "2078:         vnc_update_client(vs);",
          "",
          "[Added Lines]",
          "2053: static int vnc_refresh_server_surface(VncDisplay *vd)",
          "2054: {",
          "2055:     int y;",
          "2056:     uint8_t *guest_row;",
          "2057:     uint8_t *server_row;",
          "2058:     int cmp_bytes;",
          "2059:     uint32_t width_mask[VNC_DIRTY_WORDS];",
          "2060:     VncState *vs = NULL;",
          "2061:     int has_dirty = 0;",
          "2068:     vnc_set_bits(width_mask, (ds_get_width(vd->ds) / 16), VNC_DIRTY_WORDS);",
          "2069:     cmp_bytes = 16 * ds_get_bytes_per_pixel(vd->ds);",
          "2070:     guest_row  = vd->guest.ds->data;",
          "2071:     server_row = vd->server->data;",
          "2072:     for (y = 0; y < vd->guest.ds->height; y++) {",
          "2073:         if (vnc_and_bits(vd->guest.dirty[y], width_mask, VNC_DIRTY_WORDS)) {",
          "2074:             int x;",
          "2075:             uint8_t *guest_ptr;",
          "2076:             uint8_t *server_ptr;",
          "2078:             guest_ptr  = guest_row;",
          "2079:             server_ptr = server_row;",
          "2081:             for (x = 0; x < vd->guest.ds->width;",
          "2082:                     x += 16, guest_ptr += cmp_bytes, server_ptr += cmp_bytes) {",
          "2083:                 if (!vnc_get_bit(vd->guest.dirty[y], (x / 16)))",
          "2084:                     continue;",
          "2085:                 vnc_clear_bit(vd->guest.dirty[y], (x / 16));",
          "2086:                 if (memcmp(server_ptr, guest_ptr, cmp_bytes) == 0)",
          "2087:                     continue;",
          "2088:                 memcpy(server_ptr, guest_ptr, cmp_bytes);",
          "2089:                 vs = vd->clients;",
          "2090:                 while (vs != NULL) {",
          "2091:                     vnc_set_bit(vs->dirty[y], (x / 16));",
          "2092:                     vs = vs->next;",
          "2093:                 }",
          "2094:                 has_dirty++;",
          "2095:             }",
          "2096:         }",
          "2097:         guest_row  += ds_get_linesize(vd->ds);",
          "2098:         server_row += ds_get_linesize(vd->ds);",
          "2099:     }",
          "2100:     return has_dirty;",
          "2101: }",
          "2106:     VncState *vs = NULL;",
          "2107:     int has_dirty = 0;",
          "2111:     has_dirty = vnc_refresh_server_surface(vd);",
          "2113:     vs = vd->clients;",
          "2115:         vnc_update_client(vs, has_dirty);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2086: {",
          "2087:     if (vd->timer == NULL && vd->clients != NULL) {",
          "2088:         vd->timer = qemu_new_timer(rt_clock, vnc_refresh, vd);",
          "2090:     }",
          "2091: }",
          "",
          "[Removed Lines]",
          "2089:         qemu_mod_timer(vd->timer, qemu_get_clock(rt_clock) + VNC_REFRESH_INTERVAL);",
          "",
          "[Added Lines]",
          "2126:         vnc_refresh(vd);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2119:     vs->as.fmt = AUD_FMT_S16;",
          "2120:     vs->as.endianness = 0;",
          "2123:     vnc_write(vs, \"RFB 003.008\\n\", 12);",
          "2124:     vnc_flush(vs);",
          "2125:     vnc_read_when(vs, protocol_version, 12);",
          "2126:     reset_keys(vs);",
          "2131:     vnc_init_timer(vd);",
          "2134: }",
          "",
          "[Removed Lines]",
          "2122:     vnc_resize(vs);",
          "2128:     vs->next = vd->clients;",
          "2129:     vd->clients = vs;",
          "2132:     vnc_update_client(vs);",
          "",
          "[Added Lines]",
          "2159:     vs->next = vd->clients;",
          "2160:     vd->clients = vs;",
          "2162:     vga_hw_update();",
          "",
          "---------------"
        ],
        "vnc.h||vnc.h": [
          "File: vnc.h -> vnc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: #include \"vnc-auth-sasl.h\"",
          "85: #endif",
          "88: struct VncDisplay",
          "89: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: struct VncSurface",
          "88: {",
          "89:     uint32_t dirty[VNC_MAX_HEIGHT][VNC_DIRTY_WORDS];",
          "90:     DisplaySurface *ds;",
          "91: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: #endif",
          "106: };",
          "114: struct VncState",
          "115: {",
          "116:     int csock;",
          "118:     DisplayState *ds;",
          "122:     VncDisplay *vd;",
          "123:     int need_update;",
          "",
          "[Removed Lines]",
          "108: struct VncSurface",
          "109: {",
          "110:     uint32_t dirty[VNC_MAX_HEIGHT][VNC_DIRTY_WORDS];",
          "111:     DisplaySurface *ds;",
          "112: };",
          "",
          "[Added Lines]",
          "121:     uint32_t dirty[VNC_MAX_HEIGHT][VNC_DIRTY_WORDS];",
          "",
          "---------------"
        ],
        "vnchextile.h||vnchextile.h": [
          "File: vnchextile.h -> vnchextile.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:                                              void *last_fg_,",
          "14:                                              int *has_bg, int *has_fg)",
          "15: {",
          "17:     pixel_t *irow = (pixel_t *)row;",
          "18:     int j, i;",
          "19:     pixel_t *last_bg = (pixel_t *)last_bg_;",
          "",
          "[Removed Lines]",
          "16:     uint8_t *row = vs->server.ds->data + y * ds_get_linesize(vs->ds) + x * ds_get_bytes_per_pixel(vs->ds);",
          "",
          "[Added Lines]",
          "16:     VncDisplay *vd = vs->vd;",
          "17:     uint8_t *row = vd->server->data + y * ds_get_linesize(vs->ds) + x * ds_get_bytes_per_pixel(vs->ds);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e1f5a0c495dd7a5c72c9321a29541bdde8f423a",
      "candidate_info": {
        "commit_hash": "0e1f5a0c495dd7a5c72c9321a29541bdde8f423a",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/0e1f5a0c495dd7a5c72c9321a29541bdde8f423a",
        "files": [
          "console.c",
          "console.h",
          "hw/blizzard.c",
          "hw/cirrus_vga.c",
          "hw/g364fb.c",
          "hw/g364fb_template.h",
          "hw/jazz_led.c",
          "hw/musicpal.c",
          "hw/omap_lcdc.c",
          "hw/pl110.c",
          "hw/pxa2xx_lcd.c",
          "hw/ssd0303.c",
          "hw/ssd0323.c",
          "hw/tc6393xb.c",
          "hw/tc6393xb_template.h",
          "hw/tcx.c",
          "hw/vga.c",
          "hw/vmware_vga.c",
          "vnc.c",
          "vnchextile.h"
        ],
        "message": "Introduce accessors for DisplayState (Stefano Stabellini)\n\nIntroducing some accessors:\n\nds_get_linesize\nds_get_bits_per_pixel\nds_get_width\nds_get_height\nds_get_data\n\nSigned-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com>\nSigned-off-by: Anthony Liguori <aliguori@us.ibm.com>\n\n\n\ngit-svn-id: svn://svn.savannah.nongnu.org/qemu/trunk@5789 c046a42c-6fe2-441c-8c8c-71466251a162",
        "before_after_code_files": [
          "console.c||console.c",
          "console.h||console.h",
          "hw/blizzard.c||hw/blizzard.c",
          "hw/cirrus_vga.c||hw/cirrus_vga.c",
          "hw/g364fb.c||hw/g364fb.c",
          "hw/g364fb_template.h||hw/g364fb_template.h",
          "hw/jazz_led.c||hw/jazz_led.c",
          "hw/musicpal.c||hw/musicpal.c",
          "hw/omap_lcdc.c||hw/omap_lcdc.c",
          "hw/pl110.c||hw/pl110.c",
          "hw/pxa2xx_lcd.c||hw/pxa2xx_lcd.c",
          "hw/ssd0303.c||hw/ssd0303.c",
          "hw/ssd0323.c||hw/ssd0323.c",
          "hw/tc6393xb.c||hw/tc6393xb.c",
          "hw/tc6393xb_template.h||hw/tc6393xb_template.h",
          "hw/tcx.c||hw/tcx.c",
          "hw/vga.c||hw/vga.c",
          "hw/vmware_vga.c||hw/vmware_vga.c",
          "vnc.c||vnc.c",
          "vnchextile.h||vnchextile.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "vnc.c||vnc.c"
          ],
          "candidate": [
            "vnc.c||vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "console.c||console.c": [
          "File: console.c -> console.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: {",
          "191:     unsigned int r, g, b, color;",
          "194: #if 0",
          "195:     case 8:",
          "196:         r = (rgba >> 16) & 0xff;",
          "",
          "[Removed Lines]",
          "193:     switch(ds->depth) {",
          "",
          "[Added Lines]",
          "193:     switch(ds_get_bits_per_pixel(ds)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     uint8_t *d, *d1;",
          "228:     int x, y, bpp;",
          "233:     for (y = 0; y < height; y++) {",
          "234:         d = d1;",
          "235:         switch(bpp) {",
          "",
          "[Removed Lines]",
          "230:     bpp = (ds->depth + 7) >> 3;",
          "231:     d1 = ds->data +",
          "232:         ds->linesize * posy + bpp * posx;",
          "",
          "[Added Lines]",
          "230:     bpp = (ds_get_bits_per_pixel(ds) + 7) >> 3;",
          "231:     d1 = ds_get_data(ds) +",
          "232:         ds_get_linesize(ds) * posy + bpp * posx;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:             }",
          "253:             break;",
          "254:         }",
          "256:     }",
          "257: }",
          "",
          "[Removed Lines]",
          "255:         d1 += ds->linesize;",
          "",
          "[Added Lines]",
          "255:         d1 += ds_get_linesize(ds);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:     uint8_t *d;",
          "264:     int wb, y, bpp;",
          "267:     wb = w * bpp;",
          "268:     if (yd <= ys) {",
          "273:         for (y = 0; y < h; y++) {",
          "274:             memmove(d, s, wb);",
          "277:         }",
          "278:     } else {",
          "283:        for (y = 0; y < h; y++) {",
          "284:             memmove(d, s, wb);",
          "287:         }",
          "288:     }",
          "289: }",
          "",
          "[Removed Lines]",
          "266:     bpp = (ds->depth + 7) >> 3;",
          "269:         s = ds->data +",
          "270:             ds->linesize * ys + bpp * xs;",
          "271:         d = ds->data +",
          "272:             ds->linesize * yd + bpp * xd;",
          "275:             d += ds->linesize;",
          "276:             s += ds->linesize;",
          "279:         s = ds->data +",
          "280:             ds->linesize * (ys + h - 1) + bpp * xs;",
          "281:         d = ds->data +",
          "282:             ds->linesize * (yd + h - 1) + bpp * xd;",
          "285:             d -= ds->linesize;",
          "286:             s -= ds->linesize;",
          "",
          "[Added Lines]",
          "266:     bpp = (ds_get_bits_per_pixel(ds) + 7) >> 3;",
          "269:         s = ds_get_data(ds) +",
          "270:             ds_get_linesize(ds) * ys + bpp * xs;",
          "271:         d = ds_get_data(ds) +",
          "272:             ds_get_linesize(ds) * yd + bpp * xd;",
          "275:             d += ds_get_linesize(ds);",
          "276:             s += ds_get_linesize(ds);",
          "279:         s = ds_get_data(ds) +",
          "280:             ds_get_linesize(ds) * (ys + h - 1) + bpp * xs;",
          "281:         d = ds_get_data(ds) +",
          "282:             ds_get_linesize(ds) * (yd + h - 1) + bpp * xd;",
          "285:             d -= ds_get_linesize(ds);",
          "286:             s -= ds_get_linesize(ds);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "374: static inline unsigned int col_expand(DisplayState *ds, unsigned int col)",
          "375: {",
          "377:     case 8:",
          "378:         col |= col << 8;",
          "379:         col |= col << 16;",
          "",
          "[Removed Lines]",
          "376:     switch(ds->depth) {",
          "",
          "[Added Lines]",
          "376:     switch(ds_get_bits_per_pixel(ds)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "443:         bgcol = color_table[t_attrib->bold][t_attrib->bgcol];",
          "444:     }",
          "450:     font_ptr = vgafont16 + FONT_HEIGHT * ch;",
          "451:     xorcol = bgcol ^ fgcol;",
          "453:     case 8:",
          "454:         for(i = 0; i < FONT_HEIGHT; i++) {",
          "455:             font_data = *font_ptr++;",
          "",
          "[Removed Lines]",
          "446:     bpp = (ds->depth + 7) >> 3;",
          "447:     d = ds->data +",
          "448:         ds->linesize * y * FONT_HEIGHT + bpp * x * FONT_WIDTH;",
          "449:     linesize = ds->linesize;",
          "452:     switch(ds->depth) {",
          "",
          "[Added Lines]",
          "446:     bpp = (ds_get_bits_per_pixel(ds) + 7) >> 3;",
          "447:     d = ds_get_data(ds) +",
          "448:         ds_get_linesize(ds) * y * FONT_HEIGHT + bpp * x * FONT_WIDTH;",
          "449:     linesize = ds_get_linesize(ds);",
          "452:     switch(ds_get_bits_per_pixel(ds)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "543:     int y1, y2;",
          "545:     if (s == active_console) {",
          "547:             text_update_xy(s, x, y);",
          "548:             return;",
          "549:         }",
          "",
          "[Removed Lines]",
          "546:         if (!s->ds->depth) {",
          "",
          "[Added Lines]",
          "546:         if (!ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "570:     if (s == active_console) {",
          "571:         int x = s->x;",
          "574:             s->cursor_invalidate = 1;",
          "575:             return;",
          "576:         }",
          "",
          "[Removed Lines]",
          "573:         if (!s->ds->depth) {",
          "",
          "[Added Lines]",
          "573:         if (!ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "605:     if (s != active_console)",
          "606:         return;",
          "608:         s->text_x[0] = 0;",
          "609:         s->text_y[0] = 0;",
          "610:         s->text_x[1] = s->width - 1;",
          "",
          "[Removed Lines]",
          "607:     if (!s->ds->depth) {",
          "",
          "[Added Lines]",
          "607:     if (!ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "613:         return;",
          "614:     }",
          "617:                   color_table[0][COLOR_BLACK]);",
          "618:     y1 = s->y_displayed;",
          "619:     for(y = 0; y < s->height; y++) {",
          "",
          "[Removed Lines]",
          "616:     vga_fill_rect(s->ds, 0, 0, s->ds->width, s->ds->height,",
          "",
          "[Added Lines]",
          "616:     vga_fill_rect(s->ds, 0, 0, ds_get_width(s->ds), ds_get_height(s->ds),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "626:         if (++y1 == s->total_height)",
          "627:             y1 = 0;",
          "628:     }",
          "630:     console_show_cursor(s, 1);",
          "631: }",
          "",
          "[Removed Lines]",
          "629:     dpy_update(s->ds, 0, 0, s->ds->width, s->ds->height);",
          "",
          "[Added Lines]",
          "629:     dpy_update(s->ds, 0, 0, ds_get_width(s->ds), ds_get_height(s->ds));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "689:             c++;",
          "690:         }",
          "691:         if (s == active_console && s->y_displayed == s->y_base) {",
          "693:                 s->text_x[0] = 0;",
          "694:                 s->text_y[0] = 0;",
          "695:                 s->text_x[1] = s->width - 1;",
          "",
          "[Removed Lines]",
          "692:             if (!s->ds->depth) {",
          "",
          "[Added Lines]",
          "692:             if (!ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1048:     if (s) {",
          "1049:         active_console = s;",
          "1050:         if (s->console_type != TEXT_CONSOLE && s->g_width && s->g_height",
          "1052:             dpy_resize(s->ds, s->g_width, s->g_height);",
          "1053:         vga_hw_invalidate();",
          "1054:     }",
          "",
          "[Removed Lines]",
          "1051:             && (s->g_width != s->ds->width || s->g_height != s->ds->height))",
          "",
          "[Added Lines]",
          "1051:             && (s->g_width != ds_get_width(s->ds) || s->g_height != ds_get_height(s->ds)))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1158: {",
          "1159:     TextConsole *s = (TextConsole *) opaque;",
          "1162:         if (s->console_type == TEXT_CONSOLE_FIXED_SIZE)",
          "1163:             dpy_resize(s->ds, s->g_width, s->g_height);",
          "1164:         else {",
          "1167:             text_console_resize(s);",
          "1168:         }",
          "1169:     }",
          "",
          "[Removed Lines]",
          "1161:     if (s->g_width != s->ds->width || s->g_height != s->ds->height) {",
          "1165:             s->g_width = s->ds->width;",
          "1166:             s->g_height = s->ds->height;",
          "",
          "[Added Lines]",
          "1161:     if (s->g_width != ds_get_width(s->ds) || s->g_height != ds_get_height(s->ds)) {",
          "1165:             s->g_width = ds_get_width(s->ds);",
          "1166:             s->g_height = ds_get_height(s->ds);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1302:     s->total_height = DEFAULT_BACKSCROLL;",
          "1303:     s->x = 0;",
          "1304:     s->y = 0;",
          "1307:     if (p != 0) {",
          "1308:         width = strtoul(p, (char **)&p, 10);",
          "1309:         if (*p == 'C') {",
          "",
          "[Removed Lines]",
          "1305:     width = s->ds->width;",
          "1306:     height = s->ds->height;",
          "",
          "[Added Lines]",
          "1305:     width = ds_get_width(s->ds);",
          "1306:     height = ds_get_height(s->ds);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1347: void qemu_console_resize(QEMUConsole *console, int width, int height)",
          "1348: {",
          "1349:     if (console->g_width != width || console->g_height != height",
          "1351:         console->g_width = width;",
          "1352:         console->g_height = height;",
          "1353:         if (active_console == console) {",
          "",
          "[Removed Lines]",
          "1350:         || !console->ds->data) {",
          "",
          "[Added Lines]",
          "1350:         || !ds_get_data(console->ds)) {",
          "",
          "---------------"
        ],
        "console.h||console.h": [
          "File: console.h -> console.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:         s->dpy_text_cursor(s, x, y);",
          "115: }",
          "117: typedef unsigned long console_ch_t;",
          "118: static inline void console_write_ch(console_ch_t *dest, uint32_t ch)",
          "119: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: static inline int ds_get_linesize(DisplayState *ds)",
          "118: {",
          "119:     return ds->linesize;",
          "120: }",
          "122: static inline uint8_t* ds_get_data(DisplayState *ds)",
          "123: {",
          "124:     return ds->data;",
          "125: }",
          "127: static inline int ds_get_width(DisplayState *ds)",
          "128: {",
          "129:     return ds->width;",
          "130: }",
          "132: static inline int ds_get_height(DisplayState *ds)",
          "133: {",
          "134:     return ds->height;",
          "135: }",
          "137: static inline int ds_get_bits_per_pixel(DisplayState *ds)",
          "138: {",
          "139:     return ds->depth;",
          "140: }",
          "",
          "---------------"
        ],
        "hw/blizzard.c||hw/blizzard.c": [
          "File: hw/blizzard.c -> hw/blizzard.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:         s->my[1] = s->data.y + s->data.dy;",
          "168:     bypp[0] = s->bpp;",
          "170:     bypl[0] = bypp[0] * s->data.pitch;",
          "171:     bypl[1] = bypp[1] * s->x;",
          "172:     bypl[2] = bypp[0] * s->data.dx;",
          "",
          "[Removed Lines]",
          "169:     bypp[1] = (s->state->depth + 7) >> 3;",
          "",
          "[Added Lines]",
          "169:     bypp[1] = (ds_get_bits_per_pixel(s->state) + 7) >> 3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "895:     if (!s->enable)",
          "896:         return;",
          "899:         s->invalidate = 1;",
          "900:         qemu_console_resize(s->console, s->x, s->y);",
          "901:     }",
          "",
          "[Removed Lines]",
          "898:     if (s->x != s->state->width || s->y != s->state->height) {",
          "",
          "[Added Lines]",
          "898:     if (s->x != ds_get_width(s->state) || s->y != ds_get_height(s->state)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "904:         s->invalidate = 0;",
          "906:         if (s->blank) {",
          "909:             return;",
          "910:         }",
          "",
          "[Removed Lines]",
          "907:             bypp = (s->state->depth + 7) >> 3;",
          "908:             memset(s->state->data, 0, bypp * s->x * s->y);",
          "",
          "[Added Lines]",
          "907:             bypp = (ds_get_bits_per_pixel(s->state) + 7) >> 3;",
          "908:             memset(ds_get_data(s->state), 0, bypp * s->x * s->y);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "918:     if (s->mx[1] <= s->mx[0])",
          "919:         return;",
          "922:     bypl = bypp * s->x;",
          "923:     bwidth = bypp * (s->mx[1] - s->mx[0]);",
          "924:     y = s->my[0];",
          "925:     src = s->fb + bypl * y + bypp * s->mx[0];",
          "927:     for (; y < s->my[1]; y ++, src += bypl, dst += bypl)",
          "928:         memcpy(dst, src, bwidth);",
          "",
          "[Removed Lines]",
          "921:     bypp = (s->state->depth + 7) >> 3;",
          "926:     dst = s->state->data + bypl * y + bypp * s->mx[0];",
          "",
          "[Added Lines]",
          "921:     bypp = (ds_get_bits_per_pixel(s->state) + 7) >> 3;",
          "926:     dst = ds_get_data(s->state) + bypl * y + bypp * s->mx[0];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "940:     struct blizzard_s *s = (struct blizzard_s *) opaque;",
          "942:     blizzard_update_display(opaque);",
          "945: }",
          "947: #define DEPTH 8",
          "",
          "[Removed Lines]",
          "943:     if (s && s->state->data)",
          "944:         ppm_save(filename, s->state->data, s->x, s->y, s->state->linesize);",
          "",
          "[Added Lines]",
          "943:     if (s && ds_get_data(s->state))",
          "944:         ppm_save(filename, ds_get_data(s->state), s->x, s->y, ds_get_linesize(s->state));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "962:     s->state = ds;",
          "963:     s->fb = qemu_malloc(0x180000);",
          "966:     case 0:",
          "967:         s->line_fn_tab[0] = s->line_fn_tab[1] =",
          "968:                 qemu_mallocz(sizeof(blizzard_fn_t) * 0x10);",
          "",
          "[Removed Lines]",
          "965:     switch (s->state->depth) {",
          "",
          "[Added Lines]",
          "965:     switch (ds_get_bits_per_pixel(s->state)) {",
          "",
          "---------------"
        ],
        "hw/cirrus_vga.c||hw/cirrus_vga.c": [
          "File: hw/cirrus_vga.c -> hw/cirrus_vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2321:     color1 = s->rgb_to_pixel(c6_to_8(palette[0xf * 3]),",
          "2322:                              c6_to_8(palette[0xf * 3 + 1]),",
          "2323:                              c6_to_8(palette[0xf * 3 + 2]));",
          "2325:     d1 += x1 * bpp;",
          "2327:     default:",
          "2328:         break;",
          "2329:     case 8:",
          "",
          "[Removed Lines]",
          "2324:     bpp = ((s->ds->depth + 7) >> 3);",
          "2326:     switch(s->ds->depth) {",
          "",
          "[Added Lines]",
          "2324:     bpp = ((ds_get_bits_per_pixel(s->ds) + 7) >> 3);",
          "2326:     switch(ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------"
        ],
        "hw/g364fb.c||hw/g364fb.c": [
          "File: hw/g364fb.c -> hw/g364fb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: static void g364fb_draw_graphic(G364State *s, int full_update)",
          "74: {",
          "76:         case 8:",
          "77:             g364fb_draw_graphic8(s, full_update);",
          "78:             break;",
          "",
          "[Removed Lines]",
          "75:     switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "75:     switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:             g364fb_draw_graphic32(s, full_update);",
          "87:             break;",
          "88:         default:",
          "90:             return;",
          "91:     }",
          "",
          "[Removed Lines]",
          "89:             printf(\"g364fb: unknown depth %d\\n\", s->ds->depth);",
          "",
          "[Added Lines]",
          "89:             printf(\"g364fb: unknown depth %d\\n\", ds_get_bits_per_pixel(s->ds));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     if (!full_update)",
          "102:         return;",
          "106:     for(i = 0; i < s->scr_height; i++) {",
          "107:         memset(d, 0, w);",
          "109:     }",
          "111:     dpy_update(s->ds, 0, 0, s->scr_width, s->scr_height);",
          "",
          "[Removed Lines]",
          "104:     w = s->scr_width * ((s->ds->depth + 7) >> 3);",
          "105:     d = s->ds->data;",
          "108:         d += s->ds->linesize;",
          "",
          "[Added Lines]",
          "104:     w = s->scr_width * ((ds_get_bits_per_pixel(s->ds) + 7) >> 3);",
          "105:     d = ds_get_data(s->ds);",
          "108:         d += ds_get_linesize(s->ds);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:         s->graphic_mode = graphic_mode;",
          "132:         full_update = 1;",
          "133:     }",
          "135:         qemu_console_resize(s->console, s->scr_width, s->scr_height);",
          "136:         full_update = 1;",
          "137:     }",
          "",
          "[Removed Lines]",
          "134:     if (s->scr_width != s->ds->width || s->scr_height != s->ds->height) {",
          "",
          "[Added Lines]",
          "134:     if (s->scr_width != ds_get_width(s->ds) || s->scr_height != ds_get_height(s->ds)) {",
          "",
          "---------------"
        ],
        "hw/g364fb_template.h||hw/g364fb_template.h": [
          "File: hw/g364fb_template.h -> hw/g364fb_template.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     data_buffer = s->vram_buffer;",
          "30:     w_display = s->scr_width * PIXEL_WIDTH / 8;",
          "32:     for(i = 0; i < s->scr_height; i++) {",
          "33:         dd = data_display;",
          "34:         for (j = 0; j < s->scr_width; j++, dd += PIXEL_WIDTH / 8, data_buffer++) {",
          "",
          "[Removed Lines]",
          "31:     data_display = s->ds->data;",
          "",
          "[Added Lines]",
          "31:     data_display = ds_get_data(s->ds);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:                 s->palette[index][1],",
          "39:                 s->palette[index][2]);",
          "40:         }",
          "42:     }",
          "43: }",
          "",
          "[Removed Lines]",
          "41:         data_display += s->ds->linesize;",
          "",
          "[Added Lines]",
          "41:         data_display += ds_get_linesize(s->ds);",
          "",
          "---------------"
        ],
        "hw/jazz_led.c||hw/jazz_led.c": [
          "File: hw/jazz_led.c -> hw/jazz_led.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     uint8_t *d;",
          "156:     int x, bpp;",
          "160:     switch(bpp) {",
          "161:         case 1:",
          "162:             for (x = posx1; x <= posx2; x++) {",
          "",
          "[Removed Lines]",
          "158:     bpp = (ds->depth + 7) >> 3;",
          "159:     d = ds->data + ds->linesize * posy + bpp * posx1;",
          "",
          "[Added Lines]",
          "158:     bpp = (ds_get_bits_per_pixel(ds) + 7) >> 3;",
          "159:     d = ds_get_data(ds) + ds_get_linesize(ds) * posy + bpp * posx1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:     uint8_t *d;",
          "185:     int y, bpp;",
          "189:     switch(bpp) {",
          "190:         case 1:",
          "191:             for (y = posy1; y <= posy2; y++) {",
          "194:             }",
          "195:             break;",
          "196:         case 2:",
          "197:             for (y = posy1; y <= posy2; y++) {",
          "200:             }",
          "201:             break;",
          "202:         case 4:",
          "203:             for (y = posy1; y <= posy2; y++) {",
          "206:             }",
          "207:             break;",
          "208:     }",
          "",
          "[Removed Lines]",
          "187:     bpp = (ds->depth + 7) >> 3;",
          "188:     d = ds->data + ds->linesize * posy1 + bpp * posx;",
          "193:                 d += ds->linesize;",
          "199:                 d += ds->linesize;",
          "205:                 d += ds->linesize;",
          "",
          "[Added Lines]",
          "187:     bpp = (ds_get_bits_per_pixel(ds) + 7) >> 3;",
          "188:     d = ds_get_data(ds) + ds_get_linesize(ds) * posy1 + bpp * posx;",
          "193:                 d += ds_get_linesize(ds);",
          "199:                 d += ds_get_linesize(ds);",
          "205:                 d += ds_get_linesize(ds);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:     if (s->state & REDRAW_BACKGROUND) {",
          "226:         }",
          "227:     }",
          "229:     if (s->state & REDRAW_SEGMENTS) {",
          "232:             case 8:",
          "233:                 color_segment = rgb_to_pixel8(0xaa, 0xaa, 0xaa);",
          "234:                 color_led = rgb_to_pixel8(0x00, 0xff, 0x00);",
          "",
          "[Removed Lines]",
          "221:         bpp = (ds->depth + 7) >> 3;",
          "222:         d1 = ds->data;",
          "223:         for (y = 0; y < ds->height; y++) {",
          "224:             memset(d1, 0x00, ds->width * bpp);",
          "225:             d1 += ds->linesize;",
          "231:         switch (ds->depth) {",
          "",
          "[Added Lines]",
          "221:         bpp = (ds_get_bits_per_pixel(ds) + 7) >> 3;",
          "222:         d1 = ds_get_data(ds);",
          "223:         for (y = 0; y < ds_get_height(ds); y++) {",
          "224:             memset(d1, 0x00, ds_get_width(ds) * bpp);",
          "225:             d1 += ds_get_linesize(ds);",
          "231:         switch (ds_get_bits_per_pixel(ds)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:     }",
          "274:     s->state = REDRAW_NONE;",
          "276: }",
          "278: static void jazz_led_invalidate_display(void *opaque)",
          "",
          "[Removed Lines]",
          "275:     dpy_update(ds, 0, 0, ds->width, ds->height);",
          "",
          "[Added Lines]",
          "275:     dpy_update(ds, 0, 0, ds_get_width(ds), ds_get_height(ds));",
          "",
          "---------------"
        ],
        "hw/musicpal.c||hw/musicpal.c": [
          "File: hw/musicpal.c -> hw/musicpal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:         (musicpal_lcd_state *s, int x, int y, type col) \\",
          "802: { \\",
          "803:     int dx, dy; \\",
          "805: \\",
          "806:     for (dy = 0; dy < 3; dy++, pixel += 127 * 3) \\",
          "807:         for (dx = 0; dx < 3; dx++, pixel++) \\",
          "",
          "[Removed Lines]",
          "804:     type *pixel = &((type *) s->ds->data)[(y * 128 * 3 + x) * 3]; \\",
          "",
          "[Added Lines]",
          "804:     type *pixel = &((type *) ds_get_data(s->ds))[(y * 128 * 3 + x) * 3]; \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "818:     musicpal_lcd_state *s = opaque;",
          "819:     int x, y, col;",
          "822:     case 0:",
          "823:         return;",
          "824: #define LCD_REFRESH(depth, func) \\",
          "",
          "[Removed Lines]",
          "821:     switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "821:     switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "838:     LCD_REFRESH(32, (s->ds->bgr ? rgb_to_pixel32bgr : rgb_to_pixel32))",
          "839:     default:",
          "840:         cpu_abort(cpu_single_env, \"unsupported colour depth %i\\n\",",
          "842:     }",
          "844:     dpy_update(s->ds, 0, 0, 128*3, 64*3);",
          "",
          "[Removed Lines]",
          "841:                   s->ds->depth);",
          "",
          "[Added Lines]",
          "841:                   ds_get_bits_per_pixel(s->ds));",
          "",
          "---------------"
        ],
        "hw/omap_lcdc.c||hw/omap_lcdc.c": [
          "File: hw/omap_lcdc.c -> hw/omap_lcdc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     uint8_t *s, *d;",
          "127:     if (!omap_lcd || omap_lcd->plm == 1 ||",
          "129:         return;",
          "131:     frame_offset = 0;",
          "",
          "[Removed Lines]",
          "128:                     !omap_lcd->enable || !omap_lcd->state->depth)",
          "",
          "[Added Lines]",
          "128:                     !omap_lcd->enable || !ds_get_bits_per_pixel(omap_lcd->state))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     switch ((omap_lcd->palette[0] >> 12) & 7) {",
          "147:     case 1:",
          "149:         bpp = 2;",
          "150:         break;",
          "152:     case 2:",
          "154:         bpp = 4;",
          "155:         break;",
          "157:     case 3:",
          "159:         bpp = 8;",
          "160:         break;",
          "162:     case 4 ... 7:",
          "163:         if (!omap_lcd->tft)",
          "165:         else",
          "167:         bpp = 16;",
          "168:         break;",
          "",
          "[Removed Lines]",
          "148:         draw_line = draw_line_table2[omap_lcd->state->depth];",
          "153:         draw_line = draw_line_table4[omap_lcd->state->depth];",
          "158:         draw_line = draw_line_table8[omap_lcd->state->depth];",
          "164:             draw_line = draw_line_table12[omap_lcd->state->depth];",
          "166:             draw_line = draw_line_table16[omap_lcd->state->depth];",
          "",
          "[Added Lines]",
          "148:         draw_line = draw_line_table2[ds_get_bits_per_pixel(omap_lcd->state)];",
          "153:         draw_line = draw_line_table4[ds_get_bits_per_pixel(omap_lcd->state)];",
          "158:         draw_line = draw_line_table8[ds_get_bits_per_pixel(omap_lcd->state)];",
          "164:             draw_line = draw_line_table12[ds_get_bits_per_pixel(omap_lcd->state)];",
          "166:             draw_line = draw_line_table16[ds_get_bits_per_pixel(omap_lcd->state)];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:     width = omap_lcd->width;",
          "179:         qemu_console_resize(omap_lcd->console,",
          "180:                             omap_lcd->width, omap_lcd->height);",
          "181:         omap_lcd->invalidate = 1;",
          "",
          "[Removed Lines]",
          "177:     if (width != omap_lcd->state->width ||",
          "178:             omap_lcd->height != omap_lcd->state->height) {",
          "",
          "[Added Lines]",
          "177:     if (width != ds_get_width(omap_lcd->state) ||",
          "178:             omap_lcd->height != ds_get_height(omap_lcd->state)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:     if (omap_lcd->dma->dual)",
          "203:         omap_lcd->dma->current_frame ^= 1;",
          "206:         return;",
          "208:     line = 0;",
          "",
          "[Removed Lines]",
          "205:     if (!omap_lcd->state->depth)",
          "",
          "[Added Lines]",
          "205:     if (!ds_get_bits_per_pixel(omap_lcd->state))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:     step = width * bpp >> 3;",
          "218:     scanline = frame_base + step * line;",
          "219:     s = (uint8_t *) (phys_ram_base + scanline);",
          "223:     dirty[0] = dirty[1] =",
          "224:             cpu_physical_memory_get_dirty(scanline, VGA_DIRTY_FLAG);",
          "",
          "[Removed Lines]",
          "220:     d = omap_lcd->state->data;",
          "221:     linesize = omap_lcd->state->linesize;",
          "",
          "[Added Lines]",
          "220:     d = ds_get_data(omap_lcd->state);",
          "221:     linesize = ds_get_linesize(omap_lcd->state);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "293: static void omap_screen_dump(void *opaque, const char *filename) {",
          "294:     struct omap_lcd_panel_s *omap_lcd = opaque;",
          "295:     omap_update_display(opaque);",
          "298:                 omap_lcd->width, omap_lcd->height,",
          "300: }",
          "302: static void omap_invalidate_display(void *opaque) {",
          "",
          "[Removed Lines]",
          "296:     if (omap_lcd && omap_lcd->state->data)",
          "297:         ppm_save(filename, omap_lcd->state->data,",
          "299:                 omap_lcd->state->linesize);",
          "",
          "[Added Lines]",
          "296:     if (omap_lcd && ds_get_data(omap_lcd->state))",
          "297:         ppm_save(filename, ds_get_data(omap_lcd->state),",
          "299:                 ds_get_linesize(omap_lcd->state));",
          "",
          "---------------"
        ],
        "hw/pl110.c||hw/pl110.c": [
          "File: hw/pl110.c -> hw/pl110.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     if (!pl110_enabled(s))",
          "125:         return;",
          "128:     case 0:",
          "129:         return;",
          "130:     case 8:",
          "",
          "[Removed Lines]",
          "127:     switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "127:     switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:     if (base > 0x80000000)",
          "191:         base -= 0x80000000;",
          "192:     src = phys_ram_base + base;",
          "194:     first = -1;",
          "195:     addr = base;",
          "",
          "[Removed Lines]",
          "193:     dest = s->ds->data;",
          "",
          "[Added Lines]",
          "193:     dest = ds_get_data(s->ds);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:         b = (raw & 0x1f) << 3;",
          "251:         raw >>= 6;",
          "253:         case 8:",
          "254:             s->pallette[n] = rgb_to_pixel8(r, g, b);",
          "255:             break;",
          "",
          "[Removed Lines]",
          "252:         switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "252:         switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------"
        ],
        "hw/pxa2xx_lcd.c||hw/pxa2xx_lcd.c": [
          "File: hw/pxa2xx_lcd.c -> hw/pxa2xx_lcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "650:             }",
          "651:             break;",
          "652:         }",
          "654:         case 8:",
          "656:             break;",
          "",
          "[Removed Lines]",
          "653:         switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "653:         switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "693:     else if (s->bpp > pxa_lcdc_8bpp)",
          "694:         src_width *= 2;",
          "697:     dest_width = s->xres * s->dest_width;",
          "699:     addr = (ram_addr_t) (fb - phys_ram_base);",
          "",
          "[Removed Lines]",
          "696:     dest = s->ds->data;",
          "",
          "[Added Lines]",
          "696:     dest = ds_get_data(s->ds);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "750:         src_width *= 2;",
          "752:     dest_width = s->yres * s->dest_width;",
          "755:     addr = (ram_addr_t) (fb - phys_ram_base);",
          "756:     start = addr + s->yres * src_width;",
          "",
          "[Removed Lines]",
          "753:     dest = s->ds->data + dest_width * (s->xres - 1);",
          "",
          "[Added Lines]",
          "753:     dest = ds_get_data(s->ds) + dest_width * (s->xres - 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1006:                                       pxa2xx_invalidate_display,",
          "1007:                                       pxa2xx_screen_dump, NULL, s);",
          "1010:     case 0:",
          "1011:         s->dest_width = 0;",
          "1012:         break;",
          "",
          "[Removed Lines]",
          "1009:     switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "1009:     switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------"
        ],
        "hw/ssd0303.c||hw/ssd0303.c": [
          "File: hw/ssd0303.c -> hw/ssd0303.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     if (!s->redraw)",
          "207:         return;",
          "210:     case 0:",
          "211:         return;",
          "212:     case 15:",
          "",
          "[Removed Lines]",
          "209:     switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "209:     switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:         colors[0] = colortab + dest_width;",
          "239:         colors[1] = colortab;",
          "240:     }",
          "242:     for (y = 0; y < 16; y++) {",
          "243:         line = (y + s->start_line) & 63;",
          "244:         src = s->framebuffer + 132 * (line >> 3) + 36;",
          "",
          "[Removed Lines]",
          "241:     dest = s->ds->data;",
          "",
          "[Added Lines]",
          "241:     dest = ds_get_data(s->ds);",
          "",
          "---------------"
        ],
        "hw/ssd0323.c||hw/ssd0323.c": [
          "File: hw/ssd0323.c -> hw/ssd0323.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:     if (!s->redraw)",
          "188:         return;",
          "191:     case 0:",
          "192:         return;",
          "193:     case 15:",
          "",
          "[Removed Lines]",
          "190:     switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "190:     switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:     for (i = 0; i < 16; i++) {",
          "211:         int n;",
          "212:         colors[i] = p;",
          "214:         case 15:",
          "215:             n = i * 2 + (i >> 3);",
          "216:             p[0] = n | (n << 5);",
          "",
          "[Removed Lines]",
          "213:         switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "213:         switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:         p += dest_width;",
          "234:     }",
          "237:     for (y = 0; y < 64; y++) {",
          "238:         line = y;",
          "239:         src = s->framebuffer + 64 * line;",
          "",
          "[Removed Lines]",
          "236:     dest = s->ds->data;",
          "",
          "[Added Lines]",
          "236:     dest = ds_get_data(s->ds);",
          "",
          "---------------"
        ],
        "hw/tc6393xb.c||hw/tc6393xb.c": [
          "File: hw/tc6393xb.c -> hw/tc6393xb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431: static void tc6393xb_draw_graphic(struct tc6393xb_s *s, int full_update)",
          "432: {",
          "434:         case 8:",
          "435:             tc6393xb_draw_graphic8(s);",
          "436:             break;",
          "",
          "[Removed Lines]",
          "433:     switch (s->ds->depth) {",
          "",
          "[Added Lines]",
          "433:     switch (ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:             tc6393xb_draw_graphic32(s);",
          "448:             break;",
          "449:         default:",
          "451:             return;",
          "452:     }",
          "",
          "[Removed Lines]",
          "450:             printf(\"tc6393xb: unknown depth %d\\n\", s->ds->depth);",
          "",
          "[Added Lines]",
          "450:             printf(\"tc6393xb: unknown depth %d\\n\", ds_get_bits_per_pixel(s->ds));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:     if (!full_update)",
          "463:         return;",
          "467:     for(i = 0; i < s->scr_height; i++) {",
          "468:         memset(d, 0, w);",
          "470:     }",
          "472:     dpy_update(s->ds, 0, 0, s->scr_width, s->scr_height);",
          "",
          "[Removed Lines]",
          "465:     w = s->scr_width * ((s->ds->depth + 7) >> 3);",
          "466:     d = s->ds->data;",
          "469:         d += s->ds->linesize;",
          "",
          "[Added Lines]",
          "465:     w = s->scr_width * ((ds_get_bits_per_pixel(s->ds) + 7) >> 3);",
          "466:     d = ds_get_data(s->ds);",
          "469:         d += ds_get_linesize(s->ds);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "485:         s->blanked = s->blank;",
          "486:         full_update = 1;",
          "487:     }",
          "489:         qemu_console_resize(s->console, s->scr_width, s->scr_height);",
          "490:         full_update = 1;",
          "491:     }",
          "",
          "[Removed Lines]",
          "488:     if (s->scr_width != s->ds->width || s->scr_height != s->ds->height) {",
          "",
          "[Added Lines]",
          "488:     if (s->scr_width != ds_get_width(s->ds) || s->scr_height != ds_get_height(s->ds)) {",
          "",
          "---------------"
        ],
        "hw/tc6393xb_template.h||hw/tc6393xb_template.h": [
          "File: hw/tc6393xb_template.h -> hw/tc6393xb_template.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     data_buffer = (uint16_t*)(phys_ram_base + s->vram_addr);",
          "48:     w_display = s->scr_width * BITS / 8;",
          "50:     for(i = 0; i < s->scr_height; i++) {",
          "51: #if (BITS == 16)",
          "52:         memcpy(data_display, data_buffer, s->scr_width * 2);",
          "53:         data_buffer += s->scr_width;",
          "55: #else",
          "56:         int j;",
          "57:         for (j = 0; j < s->scr_width; j++, data_display += BITS / 8, data_buffer++) {",
          "",
          "[Removed Lines]",
          "49:     data_display = s->ds->data;",
          "54:         data_display += s->ds->linesize;",
          "",
          "[Added Lines]",
          "49:     data_display = ds_get_data(s->ds);",
          "54:         data_display += ds_get_linesize(s->ds);",
          "",
          "---------------"
        ],
        "hw/tcx.c||hw/tcx.c": [
          "File: hw/tcx.c -> hw/tcx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: {",
          "56:     int i;",
          "57:     for(i = start; i < end; i++) {",
          "59:         default:",
          "60:         case 8:",
          "61:             s->palette[i] = rgb_to_pixel8(s->r[i], s->g[i], s->b[i]);",
          "",
          "[Removed Lines]",
          "58:         switch(s->ds->depth) {",
          "",
          "[Added Lines]",
          "58:         switch(ds_get_bits_per_pixel(s->ds)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:     uint8_t *d, *s;",
          "201:     void (*f)(TCXState *s1, uint8_t *dst, const uint8_t *src, int width);",
          "204:         return;",
          "205:     page = ts->vram_offset;",
          "206:     y_start = -1;",
          "207:     page_min = 0xffffffff;",
          "208:     page_max = 0;",
          "210:     s = ts->vram;",
          "212:     ds = 1024;",
          "215:     case 32:",
          "216:         f = tcx_draw_line32;",
          "217:         break;",
          "",
          "[Removed Lines]",
          "203:     if (ts->ds->depth == 0)",
          "209:     d = ts->ds->data;",
          "211:     dd = ts->ds->linesize;",
          "214:     switch (ts->ds->depth) {",
          "",
          "[Added Lines]",
          "203:     if (ds_get_bits_per_pixel(ts->ds) == 0)",
          "209:     d = ds_get_data(ts->ds);",
          "211:     dd = ds_get_linesize(ts->ds);",
          "214:     switch (ds_get_bits_per_pixel(ts->ds)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     uint8_t *d, *s;",
          "279:     uint32_t *cptr, *s24;",
          "282:             return;",
          "283:     page = ts->vram_offset;",
          "284:     page24 = ts->vram24_offset;",
          "",
          "[Removed Lines]",
          "281:     if (ts->ds->depth != 32)",
          "",
          "[Added Lines]",
          "281:     if (ds_get_bits_per_pixel(ts->ds) != 32)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:     y_start = -1;",
          "287:     page_min = 0xffffffff;",
          "288:     page_max = 0;",
          "290:     s = ts->vram;",
          "291:     s24 = ts->vram24;",
          "292:     cptr = ts->cplane;",
          "294:     ds = 1024;",
          "296:     for(y = 0; y < ts->height; y += 4, page += TARGET_PAGE_SIZE,",
          "",
          "[Removed Lines]",
          "289:     d = ts->ds->data;",
          "293:     dd = ts->ds->linesize;",
          "",
          "[Added Lines]",
          "289:     d = ds_get_data(ts->ds);",
          "293:     dd = ds_get_linesize(ts->ds);",
          "",
          "---------------"
        ],
        "hw/vga.c||hw/vga.c": [
          "File: hw/vga.c -> hw/vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1152: static inline int get_depth_index(DisplayState *s)",
          "1153: {",
          "1155:     default:",
          "1156:     case 8:",
          "1157:         return 0;",
          "",
          "[Removed Lines]",
          "1154:     switch(s->depth) {",
          "",
          "[Added Lines]",
          "1154:     switch(ds_get_bits_per_pixel(s)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1279:         cw = 9;",
          "1280:     if (s->sr[1] & 0x08)",
          "1283:     width = (s->cr[0x01] + 1);",
          "1284:     if (s->cr[0x06] == 100) {",
          "",
          "[Removed Lines]",
          "1282:     x_incr = cw * ((s->ds->depth + 7) >> 3);",
          "",
          "[Added Lines]",
          "1282:     x_incr = cw * ((ds_get_bits_per_pixel(s->ds) + 7) >> 3);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1329:         vga_draw_glyph8 = vga_draw_glyph8_table[depth_index];",
          "1330:     vga_draw_glyph9 = vga_draw_glyph9_table[depth_index];",
          "1334:     ch_attr_ptr = s->last_ch_attr;",
          "1335:     for(cy = 0; cy < height; cy++) {",
          "1336:         d1 = dest;",
          "",
          "[Removed Lines]",
          "1332:     dest = s->ds->data;",
          "1333:     linesize = s->ds->linesize;",
          "",
          "[Added Lines]",
          "1332:     dest = ds_get_data(s->ds);",
          "1333:     linesize = ds_get_linesize(s->ds);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1663:     y_start = -1;",
          "1664:     page_min = 0x7fffffff;",
          "1665:     page_max = -1;",
          "1668:     y1 = 0;",
          "1669:     for(y = 0; y < height; y++) {",
          "1670:         addr = addr1;",
          "",
          "[Removed Lines]",
          "1666:     d = s->ds->data;",
          "1667:     linesize = s->ds->linesize;",
          "",
          "[Added Lines]",
          "1666:     d = ds_get_data(s->ds);",
          "1667:     linesize = ds_get_linesize(s->ds);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1743:         return;",
          "1744:     if (s->last_scr_width <= 0 || s->last_scr_height <= 0)",
          "1745:         return;",
          "1747:         val = s->rgb_to_pixel(0, 0, 0);",
          "1748:     else",
          "1749:         val = 0;",
          "1752:     for(i = 0; i < s->last_scr_height; i++) {",
          "1753:         memset(d, val, w);",
          "1755:     }",
          "1756:     dpy_update(s->ds, 0, 0,",
          "1757:                s->last_scr_width, s->last_scr_height);",
          "",
          "[Removed Lines]",
          "1746:     if (s->ds->depth == 8)",
          "1750:     w = s->last_scr_width * ((s->ds->depth + 7) >> 3);",
          "1751:     d = s->ds->data;",
          "1754:         d += s->ds->linesize;",
          "",
          "[Added Lines]",
          "1746:     if (ds_get_bits_per_pixel(s->ds) == 8)",
          "1750:     w = s->last_scr_width * ((ds_get_bits_per_pixel(s->ds) + 7) >> 3);",
          "1751:     d = ds_get_data(s->ds);",
          "1754:         d += ds_get_linesize(s->ds);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1766:     VGAState *s = (VGAState *)opaque;",
          "1767:     int full_update, graphic_mode;",
          "1771:     } else {",
          "1772:         s->rgb_to_pixel =",
          "",
          "[Removed Lines]",
          "1769:     if (s->ds->depth == 0) {",
          "",
          "[Added Lines]",
          "1769:     if (ds_get_bits_per_pixel(s->ds) == 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2455:     s->graphic_mode = -1;",
          "2456:     vga_update_display(s);",
          "2462:     }",
          "2463:     s->ds = saved_ds;",
          "2464: }",
          "",
          "[Removed Lines]",
          "2458:     if (ds->data) {",
          "2459:         ppm_save(filename, ds->data, vga_save_w, vga_save_h,",
          "2460:                  s->ds->linesize);",
          "2461:         qemu_free(ds->data);",
          "",
          "[Added Lines]",
          "2458:     if (ds_get_data(ds)) {",
          "2459:         ppm_save(filename, ds_get_data(ds), vga_save_w, vga_save_h,",
          "2460:                  ds_get_linesize(s->ds));",
          "2461:         qemu_free(ds_get_data(ds));",
          "",
          "---------------"
        ],
        "hw/vmware_vga.c||hw/vmware_vga.c": [
          "File: hw/vmware_vga.c -> hw/vmware_vga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:     width = s->bypp * w;",
          "320:     start = s->bypp * x + bypl * y;",
          "321:     src = s->vram + start;",
          "324:     for (; line > 0; line --, src += bypl, dst += bypl)",
          "325:         memcpy(dst, src, width);",
          "",
          "[Removed Lines]",
          "322:     dst = s->ds->data + start;",
          "",
          "[Added Lines]",
          "322:     dst = ds_get_data(s->ds) + start;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331: static inline void vmsvga_update_screen(struct vmsvga_state_s *s)",
          "332: {",
          "333: #ifndef DIRECT_VRAM",
          "335: #endif",
          "337:     dpy_update(s->ds, 0, 0, s->width, s->height);",
          "",
          "[Removed Lines]",
          "334:     memcpy(s->ds->data, s->vram, s->bypp * s->width * s->height);",
          "",
          "[Added Lines]",
          "334:     memcpy(ds_get_data(s->ds), s->vram, s->bypp * s->width * s->height);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373:                 int x0, int y0, int x1, int y1, int w, int h)",
          "374: {",
          "375: # ifdef DIRECT_VRAM",
          "377: # else",
          "378:     uint8_t *vram = s->vram;",
          "379: # endif",
          "",
          "[Removed Lines]",
          "376:     uint8_t *vram = s->ds->data;",
          "",
          "[Added Lines]",
          "376:     uint8_t *vram = ds_get_data(s->ds);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "410:                 uint32_t c, int x, int y, int w, int h)",
          "411: {",
          "412: # ifdef DIRECT_VRAM",
          "414: # else",
          "415:     uint8_t *vram = s->vram;",
          "416: # endif",
          "",
          "[Removed Lines]",
          "413:     uint8_t *vram = s->ds->data;",
          "",
          "[Added Lines]",
          "413:     uint8_t *vram = ds_get_data(s->ds);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "915:     s->width = -1;",
          "916:     s->height = -1;",
          "917:     s->svgaid = SVGA_ID;",
          "919:     s->bypp = (s->depth + 7) >> 3;",
          "920:     s->cursor.on = 0;",
          "921:     s->redraw_fifo_first = 0;",
          "",
          "[Removed Lines]",
          "918:     s->depth = s->ds->depth ? s->ds->depth : 24;",
          "",
          "[Added Lines]",
          "918:     s->depth = ds_get_bits_per_pixel(s->ds) ? ds_get_bits_per_pixel(s->ds) : 24;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "976:     }",
          "978:     if (s->depth == 32) {",
          "980:     }",
          "981: }",
          "",
          "[Removed Lines]",
          "979:         ppm_save(filename, s->vram, s->width, s->height, s->ds->linesize);",
          "",
          "[Added Lines]",
          "979:         ppm_save(filename, s->vram, s->width, s->height, ds_get_linesize(s->ds));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "994:     struct vmsvga_state_s *s = (struct vmsvga_state_s *) opaque;",
          "995:     addr -= s->vram_base;",
          "996:     if (addr < s->fb_size)",
          "998:     else",
          "999:         return *(uint8_t *) (s->vram + addr);",
          "1000: }",
          "",
          "[Removed Lines]",
          "997:         return *(uint8_t *) (s->ds->data + addr);",
          "",
          "[Added Lines]",
          "997:         return *(uint8_t *) (ds_get_data(s->ds) + addr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1004:     struct vmsvga_state_s *s = (struct vmsvga_state_s *) opaque;",
          "1005:     addr -= s->vram_base;",
          "1006:     if (addr < s->fb_size)",
          "1008:     else",
          "1009:         return *(uint16_t *) (s->vram + addr);",
          "1010: }",
          "",
          "[Removed Lines]",
          "1007:         return *(uint16_t *) (s->ds->data + addr);",
          "",
          "[Added Lines]",
          "1007:         return *(uint16_t *) (ds_get_data(s->ds) + addr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1014:     struct vmsvga_state_s *s = (struct vmsvga_state_s *) opaque;",
          "1015:     addr -= s->vram_base;",
          "1016:     if (addr < s->fb_size)",
          "1018:     else",
          "1019:         return *(uint32_t *) (s->vram + addr);",
          "1020: }",
          "",
          "[Removed Lines]",
          "1017:         return *(uint32_t *) (s->ds->data + addr);",
          "",
          "[Added Lines]",
          "1017:         return *(uint32_t *) (ds_get_data(s->ds) + addr);",
          "",
          "---------------"
        ],
        "vnc.c||vnc.c": [
          "File: vnc.c -> vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:     }",
          "323:     memset(vs->dirty_row, 0xFF, sizeof(vs->dirty_row));",
          "325: }",
          "",
          "[Removed Lines]",
          "324:     memset(vs->old_data, 42, vs->ds->linesize * vs->ds->height);",
          "",
          "[Added Lines]",
          "324:     memset(vs->old_data, 42, ds_get_linesize(vs->ds) * ds_get_height(vs->ds));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:     vnc_framebuffer_update(vs, x, y, w, h, 0);",
          "418:     for (i = 0; i < h; i++) {",
          "419:  vs->write_pixels(vs, row, w * vs->depth);",
          "421:     }",
          "422: }",
          "",
          "[Removed Lines]",
          "417:     row = vs->ds->data + y * vs->ds->linesize + x * vs->depth;",
          "420:  row += vs->ds->linesize;",
          "",
          "[Added Lines]",
          "417:     row = ds_get_data(vs->ds) + y * ds_get_linesize(vs->ds) + x * vs->depth;",
          "420:  row += ds_get_linesize(vs->ds);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:     uint8_t *dst_row;",
          "496:     char *old_row;",
          "497:     int y = 0;",
          "499:     VncState *vs = ds->opaque;",
          "501:     vnc_update_client(vs);",
          "",
          "[Removed Lines]",
          "498:     int pitch = ds->linesize;",
          "",
          "[Added Lines]",
          "498:     int pitch = ds_get_linesize(ds);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "505:  pitch = -pitch;",
          "506:     }",
          "513:     old_row = vs->old_data + dst;",
          "515:     for (y = 0; y < h; y++) {",
          "",
          "[Removed Lines]",
          "508:     src = (ds->linesize * (src_y + y) + vs->depth * src_x);",
          "509:     dst = (ds->linesize * (dst_y + y) + vs->depth * dst_x);",
          "511:     src_row = ds->data + src;",
          "512:     dst_row = ds->data + dst;",
          "",
          "[Added Lines]",
          "508:     src = (ds_get_linesize(ds) * (src_y + y) + vs->depth * src_x);",
          "509:     dst = (ds_get_linesize(ds) * (dst_y + y) + vs->depth * dst_x);",
          "511:     src_row = ds_get_data(ds) + src;",
          "512:     dst_row = ds_get_data(ds) + dst;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "567:  old_row = vs->old_data;",
          "569:  for (y = 0; y < vs->height; y++) {",
          "",
          "[Removed Lines]",
          "566:  row = vs->ds->data;",
          "",
          "[Added Lines]",
          "566:  row = ds_get_data(vs->ds);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "575:   ptr = row;",
          "576:   old_ptr = (char*)old_row;",
          "579:       if (memcmp(old_ptr, ptr, 16 * vs->depth) == 0) {",
          "580:    vnc_clear_bit(vs->dirty_row[y], (x / 16));",
          "581:       } else {",
          "",
          "[Removed Lines]",
          "578:   for (x = 0; x < vs->ds->width; x += 16) {",
          "",
          "[Added Lines]",
          "578:   for (x = 0; x < ds_get_width(vs->ds); x += 16) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "588:   }",
          "589:      }",
          "593:  }",
          "595:  if (!has_dirty) {",
          "",
          "[Removed Lines]",
          "591:      row += vs->ds->linesize;",
          "592:      old_row += vs->ds->linesize;",
          "",
          "[Added Lines]",
          "591:      row += ds_get_linesize(vs->ds);",
          "592:      old_row += ds_get_linesize(vs->ds);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "918:  vnc_write_u8(vs, 0);",
          "919:  vnc_write_u16(vs, 1);",
          "920:  vnc_framebuffer_update(vs, absolute, 0,",
          "922:  vnc_flush(vs);",
          "923:     }",
          "924:     vs->absolute = absolute;",
          "",
          "[Removed Lines]",
          "921:           vs->ds->width, vs->ds->height, -257);",
          "",
          "[Added Lines]",
          "921:           ds_get_width(vs->ds), ds_get_height(vs->ds), -257);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "941:  dz = 1;",
          "943:     if (vs->absolute) {",
          "946:    dz, buttons);",
          "947:     } else if (vs->has_pointer_type_change) {",
          "948:  x -= 0x7FFF;",
          "",
          "[Removed Lines]",
          "944:  kbd_mouse_event(x * 0x7FFF / (vs->ds->width - 1),",
          "945:    y * 0x7FFF / (vs->ds->height - 1),",
          "",
          "[Added Lines]",
          "944:  kbd_mouse_event(x * 0x7FFF / (ds_get_width(vs->ds) - 1),",
          "945:    y * 0x7FFF / (ds_get_height(vs->ds) - 1),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1106:            int x_position, int y_position,",
          "1107:            int w, int h)",
          "1108: {",
          "1118:     int i;",
          "1119:     vs->need_update = 1;",
          "1120:     if (!incremental) {",
          "1123:  for (i = 0; i < h; i++) {",
          "1124:             vnc_set_bits(vs->dirty_row[y_position + i],",
          "1128:  }",
          "1129:     }",
          "1130: }",
          "",
          "[Removed Lines]",
          "1109:     if (x_position > vs->ds->width)",
          "1110:         x_position = vs->ds->width;",
          "1111:     if (y_position > vs->ds->height)",
          "1112:         y_position = vs->ds->height;",
          "1113:     if (x_position + w >= vs->ds->width)",
          "1114:         w = vs->ds->width  - x_position;",
          "1115:     if (y_position + h >= vs->ds->height)",
          "1116:         h = vs->ds->height - y_position;",
          "1121:  char *old_row = vs->old_data + y_position * vs->ds->linesize;",
          "1125:                          (vs->ds->width / 16), VNC_DIRTY_WORDS);",
          "1126:      memset(old_row, 42, vs->ds->width * vs->depth);",
          "1127:      old_row += vs->ds->linesize;",
          "",
          "[Added Lines]",
          "1109:     if (x_position > ds_get_width(vs->ds))",
          "1110:         x_position = ds_get_width(vs->ds);",
          "1111:     if (y_position > ds_get_height(vs->ds))",
          "1112:         y_position = ds_get_height(vs->ds);",
          "1113:     if (x_position + w >= ds_get_width(vs->ds))",
          "1114:         w = ds_get_width(vs->ds)  - x_position;",
          "1115:     if (y_position + h >= ds_get_height(vs->ds))",
          "1116:         h = ds_get_height(vs->ds) - y_position;",
          "1121:  char *old_row = vs->old_data + y_position * ds_get_linesize(vs->ds);",
          "1125:                          (ds_get_width(vs->ds) / 16), VNC_DIRTY_WORDS);",
          "1126:      memset(old_row, 42, ds_get_width(vs->ds) * vs->depth);",
          "1127:      old_row += ds_get_linesize(vs->ds);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1134:     vnc_write_u8(vs, 0);",
          "1135:     vnc_write_u8(vs, 0);",
          "1136:     vnc_write_u16(vs, 1);",
          "1138:     vnc_flush(vs);",
          "1139: }",
          "",
          "[Removed Lines]",
          "1137:     vnc_framebuffer_update(vs, 0, 0, vs->ds->width, vs->ds->height, -258);",
          "",
          "[Added Lines]",
          "1137:     vnc_framebuffer_update(vs, 0, 0, ds_get_width(vs->ds), ds_get_height(vs->ds), -258);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1497:     char buf[1024];",
          "1498:     int size;",
          "1505:     pixel_format_message(vs);",
          "",
          "[Removed Lines]",
          "1500:     vs->width = vs->ds->width;",
          "1501:     vs->height = vs->ds->height;",
          "1502:     vnc_write_u16(vs, vs->ds->width);",
          "1503:     vnc_write_u16(vs, vs->ds->height);",
          "",
          "[Added Lines]",
          "1500:     vs->width = ds_get_width(vs->ds);",
          "1501:     vs->height = ds_get_height(vs->ds);",
          "1502:     vnc_write_u16(vs, ds_get_width(vs->ds));",
          "1503:     vnc_write_u16(vs, ds_get_height(vs->ds));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2116:     vnc_write(vs, \"RFB 003.008\\n\", 12);",
          "2117:     vnc_flush(vs);",
          "2118:     vnc_read_when(vs, protocol_version, 12);",
          "2120:     memset(vs->dirty_row, 0xFF, sizeof(vs->dirty_row));",
          "2121:     vs->has_resize = 0;",
          "2122:     vs->has_hextile = 0;",
          "",
          "[Removed Lines]",
          "2119:     memset(vs->old_data, 0, vs->ds->linesize * vs->ds->height);",
          "",
          "[Added Lines]",
          "2119:     memset(vs->old_data, 0, ds_get_linesize(vs->ds) * ds_get_height(vs->ds));",
          "",
          "---------------"
        ],
        "vnchextile.h||vnchextile.h": [
          "File: vnchextile.h -> vnchextile.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:                                              void *last_fg_,",
          "14:                                              int *has_bg, int *has_fg)",
          "15: {",
          "17:     pixel_t *irow = (pixel_t *)row;",
          "18:     int j, i;",
          "19:     pixel_t *last_bg = (pixel_t *)last_bg_;",
          "",
          "[Removed Lines]",
          "16:     uint8_t *row = (vs->ds->data + y * vs->ds->linesize + x * vs->depth);",
          "",
          "[Added Lines]",
          "16:     uint8_t *row = (ds_get_data(vs->ds) + y * ds_get_linesize(vs->ds) + x * vs->depth);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:  }",
          "58:  if (n_colors > 2)",
          "59:      break;",
          "61:     }",
          "63:     if (n_colors > 1 && fg_count > bg_count) {",
          "",
          "[Removed Lines]",
          "60:  irow += vs->ds->linesize / sizeof(pixel_t);",
          "",
          "[Added Lines]",
          "60:  irow += ds_get_linesize(vs->ds) / sizeof(pixel_t);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:   n_data += 2;",
          "106:   n_subtiles++;",
          "107:      }",
          "109:  }",
          "110:  break;",
          "111:     case 3:",
          "",
          "[Removed Lines]",
          "108:      irow += vs->ds->linesize / sizeof(pixel_t);",
          "",
          "[Added Lines]",
          "108:      irow += ds_get_linesize(vs->ds) / sizeof(pixel_t);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161:   n_data += 2;",
          "162:   n_subtiles++;",
          "163:      }",
          "165:  }",
          "",
          "[Removed Lines]",
          "164:      irow += vs->ds->linesize / sizeof(pixel_t);",
          "",
          "[Added Lines]",
          "164:      irow += ds_get_linesize(vs->ds) / sizeof(pixel_t);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:     } else {",
          "199:  for (j = 0; j < h; j++) {",
          "200:      vs->write_pixels(vs, row, w * vs->depth);",
          "202:  }",
          "203:     }",
          "204: }",
          "",
          "[Removed Lines]",
          "201:      row += vs->ds->linesize;",
          "",
          "[Added Lines]",
          "201:      row += ds_get_linesize(vs->ds);",
          "",
          "---------------"
        ]
      }
    }
  ]
}