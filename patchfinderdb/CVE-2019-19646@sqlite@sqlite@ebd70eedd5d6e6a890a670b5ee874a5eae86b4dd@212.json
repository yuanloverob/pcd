{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f9adee289fcc8de83054332212c90f389609d4a",
      "candidate_info": {
        "commit_hash": "4f9adee289fcc8de83054332212c90f389609d4a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4f9adee289fcc8de83054332212c90f389609d4a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/walker.c",
          "src/window.c",
          "test/filter1.test"
        ],
        "message": "Rework the FILTER clause implementation to share more code with window functions.\n\nFossilOrigin-Name: 5dac8c38dfc3f41c5c8fb49ca35de7fd1b21f269d72e8ba6ba59ed0a4030a54d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/walker.c||src/walker.c",
          "src/window.c||src/window.c",
          "test/filter1.test||test/filter1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86ab963cc5743867e0535b78a5776e18c13835aa44bf2009f77642df8407cb3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:   assert( !ExprHasProperty(p, EP_WinFunc) || p->y.pWin!=0 || db->mallocFailed );",
          "1029:   assert( p->op!=TK_FUNCTION || ExprHasProperty(p, EP_TokenOnly|EP_Reduced)",
          "1031: #ifdef SQLITE_DEBUG",
          "1032:   if( ExprHasProperty(p, EP_Leaf) && !ExprHasProperty(p, EP_TokenOnly) ){",
          "1033:     assert( p->pLeft==0 );",
          "",
          "[Removed Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc|EP_Filter) );",
          "",
          "[Added Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1040:     assert( p->x.pList==0 || p->pRight==0 );",
          "1041:     if( p->pLeft && p->op!=TK_SELECT_COLUMN ) sqlite3ExprDeleteNN(db, p->pLeft);",
          "1042:     if( p->pRight ){",
          "1044:       sqlite3ExprDeleteNN(db, p->pRight);",
          "1045:     }else if( ExprHasProperty(p, EP_xIsSelect) ){",
          "1047:       sqlite3SelectDelete(db, p->x.pSelect);",
          "1048:     }else{",
          "1049:       sqlite3ExprListDelete(db, p->x.pList);",
          "1050: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1059:       }",
          "1060: #endif",
          "1061:     }",
          "",
          "[Removed Lines]",
          "1043:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1046:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1051:       if( ExprHasProperty(p, (EP_WinFunc|EP_Filter)) ){",
          "1052:         if( ExprHasProperty(p, EP_WinFunc) ){",
          "1053:           assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1054:           sqlite3WindowDelete(db, p->y.pWin);",
          "1055:         }else{",
          "1056:           assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1057:           sqlite3ExprDeleteNN(db, p->y.pFilter);",
          "1058:         }",
          "",
          "[Added Lines]",
          "1043:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1046:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1051:       if( ExprHasProperty(p, EP_WinFunc) ){",
          "1052:         sqlite3WindowDelete(db, p->y.pWin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1273:     }",
          "1277:       zAlloc += dupedExprNodeSize(p, dupFlags);",
          "1278:       if( !ExprHasProperty(pNew, EP_TokenOnly|EP_Leaf) ){",
          "1279:         pNew->pLeft = p->pLeft ?",
          "",
          "[Removed Lines]",
          "1276:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc|EP_Filter) ){",
          "",
          "[Added Lines]",
          "1270:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1286:         pNew->y.pWin = sqlite3WindowDup(db, pNew, p->y.pWin);",
          "1287:         assert( ExprHasProperty(pNew, EP_WinFunc) );",
          "1288:       }",
          "1294:       if( pzBuffer ){",
          "",
          "[Removed Lines]",
          "1289:       if( ExprHasProperty(p, EP_Filter) ){",
          "1290:         pNew->y.pFilter = sqlite3ExprDup(db, p->y.pFilter, 0);",
          "1291:         assert( ExprHasProperty(pNew, EP_Filter) );",
          "1292:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1347: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1348:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1349:     assert( pExpr->y.pWin );",
          "1350:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1351:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "1352:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1340:     assert( IsWindowFunc(pExpr) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4852:     return 2;",
          "4853:   }",
          "4854:   if( pA->op!=TK_COLUMN && pA->op!=TK_AGG_COLUMN && pA->u.zToken ){",
          "4856:       if( sqlite3StrICmp(pA->u.zToken,pB->u.zToken)!=0 ) return 2;",
          "4857: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4867:       if( ExprHasProperty(pA,EP_WinFunc) ){",
          "4869:       }",
          "4870: #endif",
          "4871:     }else if( pA->op==TK_NULL ){",
          "",
          "[Removed Lines]",
          "4855:     if( pA->op==TK_FUNCTION ){",
          "4866:       assert( ExprHasProperty(pA,EP_WinFunc)==ExprHasProperty(pB,EP_WinFunc) );",
          "4868:         if( sqlite3WindowCompare(pParse,pA->y.pWin,pB->y.pWin)!=0 ) return 2;",
          "",
          "[Added Lines]",
          "4846:     if( pA->op==TK_FUNCTION || pA->op==TK_AGG_FUNCTION ){",
          "4849:       assert( pA->op==pB->op );",
          "4850:       if( ExprHasProperty(pA,EP_WinFunc)!=ExprHasProperty(pB,EP_WinFunc) ){",
          "4851:         return 2;",
          "4852:       }",
          "4854:         if( sqlite3WindowCompare(pParse, pA->y.pWin, pB->y.pWin, 1)!=0 ){",
          "4855:           return 2;",
          "4856:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4875:     }else if( ALWAYS(pB->u.zToken!=0) && strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "4876:       return 2;",
          "4877:     }",
          "4886:   }",
          "4887:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "4888:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "",
          "[Removed Lines]",
          "4878: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4879:     else if( pA->op==TK_AGG_FUNCTION ){",
          "4880:       assert( ExprHasProperty(pA, EP_WinFunc)==0 );",
          "4881:       if( sqlite3ExprCompare(pParse, pA->y.pFilter, pB->y.pFilter, iTab) ){",
          "4882:         return 2;",
          "4883:       }",
          "4884:     }",
          "4885: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044: }",
          "1046: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1058:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1060: }",
          "1062:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1064: }",
          "1065: %endif",
          "",
          "[Removed Lines]",
          "1047: %type filter_over {",
          "1048:   struct FunctionTail {",
          "1049:     Window *pWin;",
          "1050:     Expr *pFilter;",
          "1051:   }",
          "1052: }",
          "1053: %destructor filter_over {",
          "1054:   sqlite3WindowDelete(pParse->db, $$.pWin);",
          "1055:   sqlite3ExprDelete(pParse->db, $$.pFilter);",
          "1056: }",
          "1057: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(F). {",
          "1059:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "1061: expr(A) ::= id(X) LP STAR RP filter_over(F). {",
          "1063:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "",
          "[Added Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(Z). {",
          "1049:   sqlite3WindowAttach(pParse, A, Z);",
          "1051: expr(A) ::= id(X) LP STAR RP filter_over(Z). {",
          "1053:   sqlite3WindowAttach(pParse, A, Z);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1673: %type over_clause {Window*}",
          "1674: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1676: %type range_or_rows {int}",
          "1678: %type frame_bound {struct FrameBound}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1666: %type filter_over {Window*}",
          "1667: %destructor filter_over {sqlite3WindowDelete(pParse->db, $$);}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1737: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1738: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1743: }",
          "1747: }",
          "1751: }",
          "1753: over_clause(A) ::= OVER LP window(Z) RP. {",
          "",
          "[Removed Lines]",
          "1740: filter_over(F) ::= filter_clause(A) over_clause(B). {",
          "1741:   F.pFilter = A;",
          "1742:   F.pWin = B;",
          "1744: filter_over(F) ::= over_clause(B). {",
          "1745:   F.pFilter = 0;",
          "1746:   F.pWin = B;",
          "1748: filter_over(F) ::= filter_clause(A). {",
          "1749:   F.pFilter = A;",
          "1750:   F.pWin = 0;",
          "",
          "[Added Lines]",
          "1733: filter_over(A) ::= filter_clause(F) over_clause(O). {",
          "1734:   O->pFilter = F;",
          "1735:   A = O;",
          "1737: filter_over(A) ::= over_clause(O). {",
          "1738:   A = O;",
          "1740: filter_over(A) ::= filter_clause(F). {",
          "1741:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1742:   if( A ){",
          "1743:     A->eFrmType = TK_FILTER;",
          "1744:     A->pFilter = F;",
          "1745:   }",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "753:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "754:       zId = pExpr->u.zToken;",
          "755:       nId = sqlite3Strlen30(zId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "753:       Window *pWin = (IsWindowFunc(pExpr) ? pExpr->y.pWin : 0);",
          "754: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "827:       if( 0==IN_RENAME_OBJECT ){",
          "828: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "830:         assert( is_agg==0 || (pDef->funcFlags & SQLITE_FUNC_MINMAX)",
          "831:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "832:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "",
          "[Removed Lines]",
          "829:         Window *pWin = (ExprHasProperty(pExpr, EP_WinFunc) ? pExpr->y.pWin : 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "850:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "851:           pNC->nErr++;",
          "852:           is_agg = 0;",
          "854:           sqlite3ErrorMsg(pParse,",
          "855:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "856:               nId, zId",
          "",
          "[Removed Lines]",
          "853:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_Filter) ){",
          "",
          "[Added Lines]",
          "854:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "855:           assert( !IsWindowFunc(pExpr) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "890:       sqlite3WalkExprList(pWalker, pList);",
          "891:       if( is_agg ){",
          "892: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "894:           Select *pSel = pNC->pWinSelect;",
          "895:           if( IN_RENAME_OBJECT==0 ){",
          "897:           }",
          "901:           if( 0==pSel->pWin",
          "903:           ){",
          "904:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "905:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Removed Lines]",
          "893:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "896:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "898:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "899:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "900:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "902:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pExpr->y.pWin)",
          "",
          "[Added Lines]",
          "895:         if( pWin ){",
          "898:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "900:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "901:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "902:           sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "904:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "912:           pExpr->op = TK_AGG_FUNCTION;",
          "913:           pExpr->op2 = 0;",
          "914: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "916: #endif",
          "917:           while( pNC2 && !sqlite3FunctionUsesThisSrc(pExpr, pNC2->pSrcList) ){",
          "918:             pExpr->op2++;",
          "",
          "[Removed Lines]",
          "915:           sqlite3WalkExpr(pWalker, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "917:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "918:             sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "919:           }",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4404:   assert( *ppMinMax==0 );",
          "4405:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "4407:     return eRet;",
          "4408:   }",
          "4409:   zFunc = pFunc->u.zToken;",
          "",
          "[Removed Lines]",
          "4406:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_Filter) ){",
          "",
          "[Added Lines]",
          "4406:   assert( !IsWindowFunc(pFunc) );",
          "4407:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_WinFunc) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4452:   if( pExpr->op!=TK_AGG_FUNCTION ) return 0;",
          "4453:   if( NEVER(pAggInfo->nFunc==0) ) return 0;",
          "4454:   if( (pAggInfo->aFunc[0].pFunc->funcFlags&SQLITE_FUNC_COUNT)==0 ) return 0;",
          "4457:   return pTab;",
          "4458: }",
          "",
          "[Removed Lines]",
          "4455:   if( ExprHasProperty(pExpr, EP_Distinct|EP_Filter) ) return 0;",
          "",
          "[Added Lines]",
          "4456:   if( ExprHasProperty(pExpr, EP_Distinct|EP_WinFunc) ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5332:     int regAgg;",
          "5333:     ExprList *pList = pF->pExpr->x.pList;",
          "5334:     assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );",
          "5337:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5338:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5339:     }",
          "",
          "[Removed Lines]",
          "5335:     if( ExprHasProperty(pF->pExpr, EP_Filter) ){",
          "5336:       Expr *pFilter = pF->pExpr->y.pFilter;",
          "",
          "[Added Lines]",
          "5336:     assert( !IsWindowFunc(pF->pExpr) );",
          "5337:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5338:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6236:       sNC.ncFlags |= NC_InAggFunc;",
          "6237:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6238: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       }",
          "6243: #endif",
          "6244:       sNC.ncFlags &= ~NC_InAggFunc;",
          "",
          "[Removed Lines]",
          "6239:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6240:       if( pExpr->y.pFilter ){",
          "6241:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "6241:       assert( !IsWindowFunc(pExpr) );",
          "6242:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "6243:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pWin->pFilter);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2586: #define IsWindowFunc(p) ( \\",
          "2587:     ExprHasProperty((p), EP_WinFunc) && p->y.pWin->eFrmType!=TK_FILTER \\",
          "2588: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3604: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3605: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3606: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3609: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3610: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "3611: int sqlite3WindowRewrite(Parse*, Select*);",
          "",
          "[Removed Lines]",
          "3607: void sqlite3WindowAttach(Parse*, Expr*, Expr*, Window*);",
          "3608: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "",
          "[Added Lines]",
          "3613: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3614: int sqlite3WindowCompare(Parse*, Window*, Window*, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3619: #else",
          "3620: # define sqlite3WindowDelete(a,b)",
          "3621: # define sqlite3WindowFunctions()",
          "3623: #endif",
          "",
          "[Removed Lines]",
          "3622: # define sqlite3WindowAttach(a,b,c,d)",
          "",
          "[Added Lines]",
          "3628: # define sqlite3WindowAttach(a,b,c)",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "64:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "65:       if( pExpr->pRight ){",
          "67:         pExpr = pExpr->pRight;",
          "68:         continue;",
          "69:       }else if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "71:         if( sqlite3WalkSelect(pWalker, pExpr->x.pSelect) ) return WRC_Abort;",
          "72:       }else{",
          "73:         if( pExpr->x.pList ){",
          "74:           if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "75:         }",
          "76: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "83:         }",
          "84: #endif",
          "85:       }",
          "",
          "[Removed Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) ){",
          "78:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "79:             if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "80:           }else if( ExprHasProperty(pExpr, EP_Filter) ){",
          "81:             if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "82:           }",
          "",
          "[Added Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "78:           if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197:   if( p ){",
          "1198:     assert( p->op==TK_FUNCTION );",
          "1211:     }",
          "1212:   }else{",
          "1213:     sqlite3WindowDelete(pParse->db, pWin);",
          "1215:   }",
          "1216: }",
          "",
          "[Removed Lines]",
          "1196: void sqlite3WindowAttach(Parse *pParse, Expr *p, Expr *pFilter, Window *pWin){",
          "1199:     if( pWin ){",
          "1200:       p->y.pWin = pWin;",
          "1201:       ExprSetProperty(p, EP_WinFunc);",
          "1202:       pWin->pOwner = p;",
          "1203:       if( p->flags & EP_Distinct ){",
          "1204:         sqlite3ErrorMsg(pParse,",
          "1205:            \"DISTINCT is not supported for window functions\");",
          "1206:       }",
          "1207:       pWin->pFilter = pFilter;",
          "1208:     }else if( pFilter ){",
          "1209:       p->y.pFilter = pFilter;",
          "1210:       ExprSetProperty(p, EP_Filter);",
          "1214:     sqlite3ExprDelete(pParse->db, pFilter);",
          "",
          "[Added Lines]",
          "1196: void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){",
          "1199:     assert( pWin );",
          "1200:     p->y.pWin = pWin;",
          "1201:     ExprSetProperty(p, EP_WinFunc);",
          "1202:     pWin->pOwner = p;",
          "1203:     if( (p->flags & EP_Distinct) && pWin->eFrmType!=TK_FILTER ){",
          "1204:       sqlite3ErrorMsg(pParse,",
          "1205:           \"DISTINCT is not supported for window functions\"",
          "1206:       );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1223:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "1224:   if( p1->eStart!=p2->eStart ) return 1;",
          "1225:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "",
          "[Removed Lines]",
          "1222: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2){",
          "",
          "[Added Lines]",
          "1217: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2, int bFilter){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1228:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1229:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "1230:   if( sqlite3ExprListCompare(p1->pOrderBy, p2->pOrderBy, -1) ) return 1;",
          "1231:   return 0;",
          "1232: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1226:   if( bFilter ){",
          "1227:     if( sqlite3ExprCompare(pParse, p1->pFilter, p2->pFilter, -1) ) return 1;",
          "1228:   }",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   SELECT count(*) FILTER (WHERE a!=5) FROM t1",
          "56: } {8}",
          "59:   SELECT min(a) FILTER (WHERE a>3) FROM t1 GROUP BY (a%2) ORDER BY 1;",
          "60: } {4 5}",
          "63: #-------------------------------------------------------------------------",
          "64: # Test some errors:",
          "",
          "[Removed Lines]",
          "58: do_execsql_test 1.6 {",
          "",
          "[Added Lines]",
          "58: do_execsql_test 1.7 {",
          "62: do_execsql_test 1.8 {",
          "63:   CREATE VIEW vv AS",
          "64:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "65:          sum(a) FILTER( WHERE a>8 ),",
          "66:          sum(a) FILTER( WHERE a>7 ),",
          "67:          sum(a) FILTER( WHERE a>6 ),",
          "68:          sum(a) FILTER( WHERE a>5 ),",
          "69:          sum(a) FILTER( WHERE a>4 ),",
          "70:          sum(a) FILTER( WHERE a>3 ),",
          "71:          sum(a) FILTER( WHERE a>2 ),",
          "72:          sum(a) FILTER( WHERE a>1 ),",
          "73:          sum(a) FILTER( WHERE a>0 )",
          "74:   FROM t1;",
          "75:   SELECT * FROM vv;",
          "76: } {{} 9 17 24 30 35 39 42 44 45}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c80864d77aa1fe06ca7589bafe66ea2b2d350649",
      "candidate_info": {
        "commit_hash": "c80864d77aa1fe06ca7589bafe66ea2b2d350649",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c80864d77aa1fe06ca7589bafe66ea2b2d350649",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix further problems with fts5 handling corrupt databases.\n\nFossilOrigin-Name: 83c467d7af63bd2e7800aff4fe9b09dbd75557460b75a9e07205dfae7e28312c",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6424:       }else{",
          "6425:         iEnd = szLeaf;",
          "6426:       }",
          "6428:       if( bFirst==0 ){",
          "6429:         iOff += fts5GetVarint32(&a[iOff], nByte);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6427:       if( iEnd>szLeaf ){",
          "6428:         rc = FTS5_CORRUPT;",
          "6429:         goto decode_out;",
          "6430:       }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_vocab.c||ext/fts5/fts5_vocab.c": [
          "File: ext/fts5/fts5_vocab.c -> ext/fts5/fts5_vocab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:               int iCol = -1;",
          "522:               while( 0==sqlite3Fts5PoslistNext64(pPos, nPos, &iOff, &iPos) ){",
          "523:                 int ii = FTS5_POS2COLUMN(iPos);",
          "525:                 if( iCol!=ii ){",
          "526:                   if( ii>=nCol ){",
          "527:                     rc = FTS5_CORRUPT;",
          "",
          "[Removed Lines]",
          "524:                 pCsr->aCnt[ii]++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "530:                   pCsr->aDoc[ii]++;",
          "531:                   iCol = ii;",
          "532:                 }",
          "533:               }",
          "534:             }else if( eDetail==FTS5_DETAIL_COLUMNS ){",
          "535:               while( 0==sqlite3Fts5PoslistNext64(pPos, nPos, &iOff,&iPos) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532:                 pCsr->aCnt[ii]++;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3166:   SELECT count( fts5_decode(id, block) ) FROM t2_data;",
          "3167: } {1 {database disk image is malformed}}",
          "3170: sqlite3_fts5_may_be_corrupt 0",
          "3171: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3169: #-------------------------------------------------------------------------",
          "3170: reset_db",
          "3171: do_test 29.0 {",
          "3172:   sqlite3 db {}",
          "3173:   db deserialize [decode_hexdb {",
          "3174: | size 28672 pagesize 4096 filename crash-e114c036e13dde.db",
          "3175: | page 1 offset 0",
          "3176: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "3177: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "3178: |     32: 00 00 00 02 00 00 00 01 00 00 00 08 00 00 00 04   ................",
          "3179: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "3180: |     96: 00 00 00 00 0d 0f c7 00 06 0d b6 00 0f 8d 0f 36   ...............6",
          "3181: |    112: 0e cb 0e 6b 0e 0e 0d b6 0d b6 00 00 00 00 00 00   ...k............",
          "3182: |   3504: 00 00 00 00 00 00 56 07 06 17 1f 1f 01 7d 74 61   ......V.......ta",
          "3183: |   3520: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "3184: |   3536: 6f 6e 66 69 67 07 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "3185: |   3552: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "3186: |   3568: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "3187: |   3584: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 06    WITHOUT ROWID[.",
          "3188: |   3600: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "3189: |   3616: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "3190: |   3632: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "3191: |   3648: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "3192: |   3664: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "3193: |   3680: 59 2c 20 73 7a 20 42 4c 4f 42 29 5e 05 07 17 21   Y, sz BLOB)^...!",
          "3194: |   3696: 21 01 81 07 74 61 62 6c 65 74 31 5f 63 6f 6e 74   !...tablet1_cont",
          "3195: |   3712: 65 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 05 43 52   entt1_content.CR",
          "3196: |   3728: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63   EATE TABLE 't1_c",
          "3197: |   3744: 6f 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47   ontent'(id INTEG",
          "3198: |   3760: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "3199: |   3776: 63 30 2c 20 63 31 2c 20 63 32 29 69 04 07 17 19   c0, c1, c2)i....",
          "3200: |   3792: 19 01 81 2d 74 61 62 6c 65 74 31 5f 69 64 78 74   ...-tablet1_idxt",
          "3201: |   3808: 31 5f 69 64 78 04 43 52 45 41 54 45 20 54 41 42   1_idx.CREATE TAB",
          "3202: |   3824: 4c 45 20 27 74 31 5f 69 64 78 27 28 73 65 67 69   LE 't1_idx'(segi",
          "3203: |   3840: 64 2c 20 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50   d, term, pgno, P",
          "3204: |   3856: 52 49 4d 41 52 59 20 4b 45 59 28 73 65 67 69 64   RIMARY KEY(segid",
          "3205: |   3872: 2c 20 74 65 72 6d 29 29 20 57 49 54 48 4f 55 54   , term)) WITHOUT",
          "3206: |   3888: 20 52 4f 57 49 44 55 03 07 17 1b 1b 01 81 01 74    ROWIDU........t",
          "3207: |   3904: 61 62 6c 65 74 31 5f 64 61 74 61 74 31 5f 64 61   ablet1_datat1_da",
          "3208: |   3920: 74 61 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   ta.CREATE TABLE",
          "3209: |   3936: 27 74 31 5f 64 61 74 61 27 28 69 64 20 49 4e 54   't1_data'(id INT",
          "3210: |   3952: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "3211: |   3968: 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 38 02 06   , block BLOB)8..",
          "3212: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "3213: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "3214: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 35   LE t1 USING fts5",
          "3215: |   4032: 28 61 2c 62 2c 63 29 00 00 00 39 00 00 00 00 00   (a,b,c)...9.....",
          "3216: | page 3 offset 8192",
          "3217: |      0: 0d 00 00 00 03 0c af 00 0f e6 0f ef 0c af 00 00   ................",
          "3218: |   3232: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 86   ................",
          "3219: |   3248: 2f 84 80 80 80 80 01 04 00 8c 62 00 00 03 12 02   /.........b.....",
          "3220: |   3264: 30 30 01 04 05 03 01 04 05 03 01 04 05 03 1f 02   00..............",
          "3221: |   3280: 03 01 02 03 01 02 03 01 08 35 30 30 30 30 30 30   .........5000000",
          "3222: |   3296: 30 1c 02 04 01 02 04 01 02 04 01 01 36 01 02 04   0...........6...",
          "3223: |   3312: 01 02 04 01 02 04 01 06 62 69 6e 61 72 79 03 06   ........binary..",
          "3224: |   3328: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "3225: |   3344: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "3226: |   3360: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "3227: |   3376: 03 06 01 02 02 03 06 01 02 02 01 05 63 6c 61 6e   ............clan",
          "3228: |   3392: 67 01 02 03 01 02 03 01 02 03 02 07 6f 6d 70 69   g...........ompi",
          "3229: |   3408: 6c 65 72 01 02 02 01 02 02 01 02 02 01 06 64 62   ler...........db",
          "3230: |   3424: 73 74 61 74 07 02 03 01 02 03 01 02 03 02 04 65   stat...........e",
          "3231: |   3440: 62 75 67 04 02 02 01 02 02 01 02 02 01 06 65 6e   bug...........en",
          "3232: |   3456: 61 62 6c 65 07 02 02 01 02 02 01 02 02 01 02 02   able............",
          "3233: |   3472: 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01   ................",
          "3234: |   3488: 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02   ................",
          "3235: |   3504: 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02   ................",
          "3236: |   3520: 01 02 02 02 08 78 74 65 6e 73 69 6f 6e 1f 02 04   .....xtension...",
          "3237: |   3536: 01 02 04 01 02 04 01 04 66 74 73 34 0a 02 03 03   ........fts4....",
          "3238: |   3552: 01 02 01 02 03 04 01 35 0d 02 03 01 02 03 01 02   .......5........",
          "3239: |   3568: 03 01 07 67 65 6f 70 6f 6c 79 10 02 03 01 02 03   ...geopoly......",
          "3240: |   3584: 01 02 03 01 05 6a 73 6f 6e 31 13 02 03 01 02 03   .....json1......",
          "3241: |   3600: 01 02 03 01 04 6c 6f 61 64 1f 02 03 01 02 03 01   .....load.......",
          "3242: |   3616: 02 03 01 03 6d 61 78 1c 02 02 01 02 02 01 02 02   ....max.........",
          "3243: |   3632: 02 05 65 6d 6f 72 79 1c 02 03 01 02 03 01 02 03   ..emory.........",
          "3244: |   3648: 04 04 73 79 73 35 16 02 03 01 02 03 01 02 03 01   ..sys5..........",
          "3245: |   3664: 06 6e 6f 63 61 73 65 02 06 01 02 02 03 06 01 02   .nocase.........",
          "3246: |   3680: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "3247: |   3696: 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02 03   ................",
          "3248: |   3712: 06 01 02 02 03 06 01 02 02 03 06 01 12 02 03 06   ................",
          "3249: |   3728: 01 02 02 01 04 6f 6d 69 74 1f 02 02 01 02 02 01   .....omit.......",
          "3250: |   3744: 02 02 01 05 72 74 72 65 65 19 02 03 01 02 03 01   ....rtree.......",
          "3251: |   3760: 02 03 04 02 69 6d 01 06 01 02 02 03 06 01 02 02   ....im..........",
          "3252: |   3776: 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02 03   ................",
          "3253: |   3792: 06 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06   ................",
          "3254: |   3808: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "3255: |   3824: 02 02 01 0a 74 68 72 65 61 64 73 61 66 65 22 02   ....threadsafe..",
          "3256: |   3840: 02 01 02 02 01 02 02 01 04 76 74 61 62 07 02 04   .........vtab...",
          "3257: |   3856: 01 02 04 01 02 04 01 01 78 01 06 01 01 02 01 06   ........x.......",
          "3258: |   3872: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "3259: |   3888: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "3260: |   3904: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "3261: |   3920: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "3262: |   3936: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "3263: |   3952: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "3264: |   3968: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "3265: |   3984: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "3266: |   4000: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "3267: |   4016: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "3268: |   4032: 01 01 02 01 06 01 01 02 01 06 01 01 02 04 18 13   ................",
          "3269: |   4048: 0c 44 10 12 11 0f 47 13 0f 0c 12 10 0f 0e 10 0f   .D....G.........",
          "3270: |   4064: 44 0f 10 40 15 0f 07 01 03 00 14 24 57 24 24 0f   D..@.......$W$$.",
          "3271: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "3272: | page 4 offset 12288",
          "3273: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "3274: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "3275: | page 5 offset 16384",
          "3276: |      0: 0d 00 00 00 24 0c 1f 00 0f df 0f bd 0f 9b 0f 89   ....$...........",
          "3277: |     16: 0f 76 0f 63 0f 44 0f 24 0f 04 0e ec 0e d3 0e ba   .v.c.D.$........",
          "3278: |     32: 0e a2 0e 89 0e 70 e5 50 e3 90 e1 d0 e0 40 de a0   .....p.P.....@..",
          "3279: |     48: dd 00 db 50 d9 90 d7 ea ca ea be d0 d6 40 d4 a0   ...P.........@..",
          "3280: |     64: d3 00 d1 00 ce f0 cc e0 ca e0 c8 d0 c6 c0 c5 30   ...............0",
          "3281: |     80: c3 90 c1 00 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "3282: |   3088: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18   ................",
          "3283: |   3104: 24 05 00 25 0f 19 54 48 52 45 41 44 53 41 46 45   $..%..THREADSAFE",
          "3284: |   3120: 3d 30 58 42 49 4e 41 52 59 18 23 05 00 25 0f 19   =0XBINARY.#..%..",
          "3285: |   3136: 54 48 52 45 41 44 53 41 46 45 3d 30 58 4e 4f 43   THREADSAFE=0XNOC",
          "3286: |   3152: 41 53 45 17 22 05 00 25 0f 17 54 48 52 45 41 44   ASE....%..THREAD",
          "3287: |   3168: 53 41 46 45 3d 30 05 00 33 0f 19 4f 4d 49 54 20   SAFE=0..3..OMIT",
          "3288: |   3184: 4c 4f 41 44 20 45 58 54 45 4e 53 49 4f 4e 58 42   LOAD EXTENSIONXB",
          "3289: |   3200: 49 4e 41 52 59 1f 20 05 00 33 0f 19 4f 4d 49 54   INARY. ..3..OMIT",
          "3290: |   3216: 20 4c 4f 41 44 20 45 58 54 45 4e 53 49 4f 4e 58    LOAD EXTENSIONX",
          "3291: |   3232: 4e 4f 43 41 53 45 1e 1f 05 00 33 0f 17 4f 4d 49   NOCASE....3..OMI",
          "3292: |   3248: 54 20 4c f4 14 42 04 55 85 44 54 e5 34 94 f4 e5   T L..B.U.DT.4...",
          "3293: |   3264: 85 25 45 24 94 d1 f1 e0 50 03 30 f1 94 d4 15 82   .%E$....P.0.....",
          "3294: |   3280: 04 d4 54 d4 f5 25 93 d3 53 03 03 03 03 03 03 05   ..T..%..S.......",
          "3295: |   3296: 84 24 94 e4 15 25 91 f1 d0 50 03 30 f1 94 d4 15   .$...%...P.0....",
          "3296: |   3312: 82 04 d4 54 d4 f5 25 93 d3 53 03 03 03 03 03 03   ...T..%..S......",
          "3297: |   3328: 05 84 e4 f4 34 15 34 51 e1 c0 50 03 30 f1 74 d4   ....4.4Q..P.0.t.",
          "3298: |   3344: 15 82 04 d4 54 d4 f2 90 f1 74 54 e4 14 24 c4 52   ....T....tT..$.R",
          "3299: |   3360: 04 74 54 f5 04 f4 c5 95 85 25 45 24 94 d1 70 f0   .tT......%E$..p.",
          "3300: |   3376: 50 02 30 f1 94 54 e4 14 24 c4 52 04 65 45 33 55   P.0..T..$.R.eE3U",
          "3301: |   3392: 84 24 94 e4 15 25 91 70 e0 50 02 30 f1 94 54 e4   .$...%.p.P.0..T.",
          "3302: |   3408: 14 24 c4 52 04 65 45 33 55 84 e4 f4 34 15 34 51   .$.R.eE3U...4.4Q",
          "3303: |   3424: 60 d0 50 02 30 f1 74 54 e4 14 24 c4 52 04 65 45   `.P.0.tT..$.R.eE",
          "3304: |   3440: 33 55 85 25 45 24 94 d1 70 c0 50 02 30 f1 94 54   3U.%E$..p.P.0..T",
          "3305: |   3456: e4 14 24 c4 52 04 65 45 33 45 84 24 94 e4 15 25   ..$.R.eE3E.$...%",
          "3306: |   3472: 91 70 b0 50 02 30 f1 94 54 e4 14 24 c4 52 04 65   .p.P.0..T..$.R.e",
          "3307: |   3488: 45 33 45 84 e4 f4 34 15 34 51 60 a0 74 54 e4 14   E3E...4.4Q`.tT..",
          "3308: |   3504: 24 c4 52 04 65 45 33 45 85 25 45 24 94 d1 e0 90   $.R.eE3E.%E$....",
          "3309: |   3520: 50 03 10 f1 94 54 e4 14 24 c4 52 04 44 25 35 44   P....T..$.R.D%5D",
          "3310: |   3536: 15 42 05 65 44 14 25 84 24 94 e4 15 25 91 e0 80   .B.eD.%.$...%...",
          "3311: |   3552: 50 03 10 f1 94 54 e4 14 24 c4 52 04 44 25 35 44   P....T..$.R.D%5D",
          "3312: |   3568: 15 42 05 65 44 14 25 84 e4 f4 34 15 34 51 d0 70   .B.eD.%...4.4Q.p",
          "3313: |   3584: 50 03 10 f1 74 54 e4 14 24 c4 52 04 44 25 35 44   P...tT..$.R.D%5D",
          "3314: |   3600: 15 42 05 65 44 14 25 85 25 45 24 94 d1 10 60 50   .B.eD.%.%E$...`P",
          "3315: |   3616: 01 70 f1 94 44 54 25 54 75 84 24 94 e4 15 25 91   .p..DT%Tu.$...%.",
          "3316: |   3632: 10 50 50 01 70 f1 94 44 54 25 54 75 84 e4 f4 34   .PP.p..DT%Tu...4",
          "3317: |   3648: 15 34 51 00 40 50 01 70 f1 74 44 54 25 54 75 85   .4Q.@P.p.tDT%Tu.",
          "3318: |   3664: 25 45 24 94 d2 00 30 50 03 50 f1 94 34 f4 d5 04   %E$...0P.P..4...",
          "3319: |   3680: 94 c4 55 23 d6 36 c6 16 e6 72 d3 62 e3 02 e3 05   ..U#.6...r.b....",
          "3320: |   3696: 84 24 94 e4 15 25 92 00 20 50 03 50 f1 94 34 f4   .$...%.. P.P..4.",
          "3321: |   3712: d5 04 94 c4 55 23 d6 36 c6 16 e6 72 d3 62 e3 02   ....U#.6...r.b..",
          "3322: |   3728: e3 05 84 e4 f4 34 15 34 51 f0 10 50 03 50 f1 74   .....4.4Q..P.P.t",
          "3323: |   3744: 34 f4 d5 04 94 c4 55 23 d6 36 c6 16 e6 72 d3 62   4.....U#.6...r.b",
          "3324: |   3760: e3 02 e3 05 85 25 45 24 94 d0 d0 00 00 02 40 ee   .....%E$......@.",
          "3325: |   3776: 00 00 ff 80 ff 00 fe 80 fe 00 fd 80 fd 00 fc 80   ................",
          "3326: |   3792: fc 00 fb 80 fb 00 fa 80 fa 00 f9 80 f9 00 f8 80   ................",
          "3327: |   3808: f8 00 f7 80 f7 00 f6 80 f6 00 f5 80 f5 00 f4 80   ................",
          "3328: |   3824: f4 00 f3 80 f3 00 f2 80 f2 00 f1 80 f1 00 f0 80   ................",
          "3329: |   3840: f0 00 ef 80 ef 00 ee 80 ee 00 00 00 00 00 00 00   ................",
          "3330: | page 6 offset 20480",
          "3331: |   3808: 06 24 03 00 12 02 01 01 06 23 03 00 12 02 01 01   .$.......#......",
          "3332: |   3824: 06 22 03 00 12 02 01 01 06 21 03 00 12 03 01 01   .........!......",
          "3333: |   3840: 06 20 03 00 12 03 01 01 06 1f 03 00 12 03 01 01   . ..............",
          "3334: |   3856: 06 1e 03 00 12 03 01 01 06 1d 03 00 12 03 01 01   ................",
          "3335: |   3872: 06 1c 03 00 12 03 01 01 06 1b 03 00 12 02 01 01   ................",
          "3336: |   3888: 06 1a 03 00 12 02 01 01 06 19 03 00 12 02 01 01   ................",
          "3337: |   3904: 06 18 03 00 12 02 01 01 06 17 03 00 12 02 01 01   ................",
          "3338: |   3920: 06 16 03 00 12 02 01 01 06 15 03 00 12 02 01 01   ................",
          "3339: |   3936: 06 14 03 00 12 02 01 01 06 13 03 00 12 02 01 01   ................",
          "3340: |   3952: 06 12 03 00 12 02 01 01 06 11 03 00 12 02 01 01   ................",
          "3341: |   3968: 06 10 03 00 12 02 01 01 06 0f 03 00 12 02 01 01   ................",
          "3342: |   3984: 06 0e 03 00 12 02 01 01 06 0d 03 00 12 02 01 01   ................",
          "3343: |   4000: 06 0c 03 00 12 02 01 01 06 0b 03 00 12 02 01 01   ................",
          "3344: |   4016: 06 0a 03 00 12 02 01 01 06 09 03 00 12 03 01 01   ................",
          "3345: |   4032: 06 08 03 00 12 03 01 01 06 07 03 00 12 03 01 01   ................",
          "3346: |   4048: 06 06 03 00 12 01 01 01 06 05 03 00 12 01 01 01   ................",
          "3347: |   4064: 06 04 03 00 12 01 01 01 06 03 03 00 12 05 01 01   ................",
          "3348: |   4080: 06 02 03 00 12 05 01 01 06 01 03 00 12 05 01 01   ................",
          "3349: | page 7 offset 24576",
          "3350: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "3351: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "3352: | end crash-e114c036e13dde.db",
          "3353: }]} {}",
          "3355: do_catchsql_test 29.1 {",
          "3356:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1','col');",
          "3357: } {0 {}}",
          "3358: do_catchsql_test 29.2 {",
          "3359:   SELECT rowid, quote(term), * FROM t3 WHERE term=='nocase';",
          "3360: } {1 {database disk image is malformed}}",
          "3362: #-------------------------------------------------------------------------",
          "3363: reset_db",
          "3364: do_test 30.0 {",
          "3365:   sqlite3 db {}",
          "3366:   db deserialize [decode_hexdb {",
          "3367: | size 40960 pagesize 4096 filename crash-eef41e30b388a0.db",
          "3368: | page 1 offset 0",
          "3369: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "3370: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 0a   .....@  ........",
          "3371: |     32: 00 00 00 00 00 00 00 00 00 00 00 0d 00 00 00 04   ................",
          "3372: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "3373: |     96: 00 00 00 00 0d 00 00 00 0d 0b 6e 00 0f a3 0f 4c   ..........n....L",
          "3374: |    112: 0e e1 0e 81 0e 24 0d cc 0d 72 0d 1b 0c b0 0c 50   .....$...r.....P",
          "3375: |    128: 0b f8 0b b3 0b 6e 00 00 00 00 00 00 00 00 00 00   .....n..........",
          "3376: |   2912: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 43 0d   ..............C.",
          "3377: |   2928: 06 17 11 11 08 75 74 61 62 6c 65 74 34 74 34 43   .....utablet4t4C",
          "3378: |   2944: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "3379: |   2960: 42 4c 45 20 74 34 20 55 53 49 4e 47 20 66 74 73   BLE t4 USING fts",
          "3380: |   2976: 35 76 6f 63 61 62 28 27 74 32 27 2c 20 27 72 6f   5vocab('t2', 'ro",
          "3381: |   2992: 77 27 29 43 0c 06 17 11 11 08 75 74 61 62 6c 65   w')C......utable",
          "3382: |   3008: 74 33 74 33 43 52 45 41 54 45 20 56 49 52 54 55   t3t3CREATE VIRTU",
          "3383: |   3024: 41 4c 20 54 41 42 4c 45 20 74 33 20 55 53 49 4e   AL TABLE t3 USIN",
          "3384: |   3040: 47 20 66 74 73 35 76 6f 63 61 62 28 27 74 31 27   G fts5vocab('t1'",
          "3385: |   3056: 2c 20 27 72 6f 77 27 29 56 0b 06 17 1f 1f 01 7d   , 'row')V.......",
          "3386: |   3072: 74 61 62 6c 65 74 32 5f 63 6f 6e 66 69 67 74 32   tablet2_configt2",
          "3387: |   3088: 5f 63 6f 6e 66 69 67 0a 43 52 45 41 54 45 20 54   _config.CREATE T",
          "3388: |   3104: 41 42 4c 45 20 27 74 32 5f 63 6f 6e 66 69 67 27   ABLE 't2_config'",
          "3389: |   3120: 28 6b 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   (k PRIMARY KEY,",
          "3390: |   3136: 76 29 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44   v) WITHOUT ROWID",
          "3391: |   3152: 5e 0a 07 17 21 21 01 81 07 74 61 62 6c 65 74 32   ^...!!...tablet2",
          "3392: |   3168: 5f 63 6f 6e 74 65 6e 74 74 32 5f 63 6f 6e 74 65   _contentt2_conte",
          "3393: |   3184: 6e 74 09 43 52 45 41 54 45 20 54 41 42 4c 45 20   nt.CREATE TABLE",
          "3394: |   3200: 27 74 32 5f 63 6f 6e 74 65 6e 74 27 28 69 64 20   't2_content'(id",
          "3395: |   3216: 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20   INTEGER PRIMARY",
          "3396: |   3232: 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32 29   KEY, c0, c1, c2)",
          "3397: |   3248: 69 09 07 17 19 19 01 81 2d 74 61 62 6c 65 74 32   i.......-tablet2",
          "3398: |   3264: 5f 69 64 78 74 32 5f 69 64 78 08 43 52 45 41 54   _idxt2_idx.CREAT",
          "3399: |   3280: 45 20 54 41 42 4c 45 20 27 74 32 5f 69 64 78 27   E TABLE 't2_idx'",
          "3400: |   3296: 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70 67   (segid, term, pg",
          "3401: |   3312: 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59 28   no, PRIMARY KEY(",
          "3402: |   3328: 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57 49   segid, term)) WI",
          "3403: |   3344: 54 48 4f 55 54 20 52 4f 57 49 44 55 08 07 17 1b   THOUT ROWIDU....",
          "3404: |   3360: 1b 01 81 01 74 61 62 6c 65 74 32 5f 64 61 74 61   ....tablet2_data",
          "3405: |   3376: 74 32 5f 64 61 74 61 07 43 52 45 41 54 45 20 54   t2_data.CREATE T",
          "3406: |   3392: 41 42 4c 45 20 27 74 32 5f 64 61 74 61 27 28 69   ABLE 't2_data'(i",
          "3407: |   3408: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "3408: |   3424: 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f   Y KEY, block BLO",
          "3409: |   3440: 42 29 58 07 07 17 11 11 08 81 1d 74 61 62 6c 65   B)X........table",
          "3410: |   3456: 74 32 74 32 43 52 45 41 54 45 20 56 49 52 54 55   t2t2CREATE VIRTU",
          "3411: |   3472: 41 4c 20 54 41 42 4c 45 20 74 32 20 55 53 49 4e   AL TABLE t2 USIN",
          "3412: |   3488: 47 20 66 74 73 35 28 27 61 27 2c 5b 62 5d 2c 22   G fts5('a',[b],.",
          "3413: |   3504: 63 22 2c 64 65 74 61 69 6c 3d 6e 6f 6e 65 2c 63   c.,detail=none,c",
          "3414: |   3520: 6f 6c 75 6d 6e 73 69 7a 65 3d 30 29 56 06 06 17   olumnsize=0)V...",
          "3415: |   3536: 1f 1f 01 7d 74 61 62 6c 65 74 31 5f 63 6f 6e 66   ....tablet1_conf",
          "3416: |   3552: 69 67 74 31 5f 63 6f 6e 66 69 67 06 43 52 45 41   igt1_config.CREA",
          "3417: |   3568: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f 6e   TE TABLE 't1_con",
          "3418: |   3584: 66 69 67 27 28 6b 20 50 52 49 4d 41 52 59 20 4b   fig'(k PRIMARY K",
          "3419: |   3600: 45 59 2c 20 76 29 20 57 49 54 48 4f 55 54 20 52   EY, v) WITHOUT R",
          "3420: |   3616: 4f 57 49 44 5b 05 07 17 21 21 01 81 01 74 61 62   OWID[...!!...tab",
          "3421: |   3632: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "3422: |   3648: 6f 63 73 69 7a 65 05 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "3423: |   3664: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "3424: |   3680: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "3425: |   3696: 41 52 59 20 4b 45 59 2c 20 73 7a 20 42 4c 4f 42   ARY KEY, sz BLOB",
          "3426: |   3712: 29 5e 04 07 17 21 21 01 81 07 74 61 62 6c 65 74   )^...!!...tablet",
          "3427: |   3728: 31 5f 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74   1_contentt1_cont",
          "3428: |   3744: 65 6e 74 04 43 52 45 41 54 45 20 54 41 42 4c 45   ent.CREATE TABLE",
          "3429: |   3760: 20 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 69 64    't1_content'(id",
          "3430: |   3776: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "3431: |   3792: 20 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32    KEY, c0, c1, c2",
          "3432: |   3808: 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65 74   )i.......-tablet",
          "3433: |   3824: 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45 41   1_idxt1_idx.CREA",
          "3434: |   3840: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64 78   TE TABLE 't1_idx",
          "3435: |   3856: 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70   '(segid, term, p",
          "3436: |   3872: 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59   gno, PRIMARY KEY",
          "3437: |   3888: 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57   (segid, term)) W",
          "3438: |   3904: 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07 17   ITHOUT ROWIDU...",
          "3439: |   3920: 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61 74   .....tablet1_dat",
          "3440: |   3936: 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45 20   at1_data.CREATE",
          "3441: |   3952: 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27 28   TABLE 't1_data'(",
          "3442: |   3968: 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41   id INTEGER PRIMA",
          "3443: |   3984: 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c   RY KEY, block BL",
          "3444: |   4000: 4f 42 29 5b 01 07 17 11 11 08 81 23 74 61 62 6c   OB)[.......#tabl",
          "3445: |   4016: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "3446: |   4032: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "3447: |   4048: 4e 47 20 66 74 73 35 28 61 2c 62 20 75 6e 69 6e   NG fts5(a,b unin",
          "3448: |   4064: 64 65 78 65 64 2c 63 2c 74 6f 6b 65 6e 69 7a 65   dexed,c,tokenize",
          "3449: |   4080: 3d 22 70 6f 72 74 65 72 20 61 73 63 69 69 22 29   =.porter ascii.)",
          "3450: | page 2 offset 4096",
          "3451: |      0: 0d 0f 68 00 05 0f 13 00 0f e6 0f 13 0f a8 0f 7c   ..h............|",
          "3452: |     16: 0f 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 00   .*..............",
          "3453: |   3856: 00 00 00 15 0a 03 00 30 00 00 00 00 01 03 03 00   .......0........",
          "3454: |   3872: 03 01 01 01 02 01 01 03 01 01 37 8c 80 80 80 80   ..........7.....",
          "3455: |   3888: 01 03 00 74 00 00 00 2e 02 30 61 03 02 02 01 01   ...t.....0a.....",
          "3456: |   3904: 62 03 02 03 01 01 63 03 02 04 01 01 67 03 06 01   b.....c.....g...",
          "3457: |   3920: 02 02 01 01 68 03 06 01 02 03 01 01 69 03 06 01   ....h.......i...",
          "3458: |   3936: 02 04 00 00 66 46 08 08 0f ef 00 14 2a 00 00 00   ....fF......*...",
          "3459: |   3952: 00 01 02 02 00 02 01 01 01 02 01 01 25 88 80 80   ............%...",
          "3460: |   3968: 80 80 01 03 00 50 00 00 00 1f 02 30 67 02 08 02   .....P.....0g...",
          "3461: |   3984: 01 02 02 01 01 68 02 08 03 01 02 03 01 01 69 02   .....h........i.",
          "3462: |   4000: 08 04 01 02 04 04 09 09 37 84 80 80 80 80 01 03   ........7.......",
          "3463: |   4016: 00 74 00 00 00 2e 02 30 61 01 02 02 01 01 62 01   .t.....0a.....b.",
          "3464: |   4032: 02 03 01 01 63 01 02 04 01 01 67 01 06 01 02 02   ....c.....g.....",
          "3465: |   4048: 01 01 68 01 06 01 02 03 01 01 69 01 06 01 02 04   ..h.......i.....",
          "3466: |   4064: 04 06 06 06 08 08 07 01 03 00 14 03 09 00 09 00   ................",
          "3467: |   4080: 00 00 11 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "3468: | page 3 offset 8192",
          "3469: |      0: 0a 00 00 00 03 0f ec 00 0f fa 0f f3 0f ec 00 00   ................",
          "3470: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 06 04 01 0c   ................",
          "3471: |   4080: 01 03 02 06 04 01 0c 01 02 02 05 04 09 0c 01 02   ................",
          "3472: | page 4 offset 12288",
          "3473: |      0: 0d 00 00 00 03 0f be 00 0f ea 0f d4 0f be 00 00   ................",
          "3474: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 03   ................",
          "3475: |   4032: 05 00 17 17 17 61 20 62 20 63 67 20 68 20 69 67   .....a b cg h ig",
          "3476: |   4048: 20 68 20 69 14 02 05 00 17 17 17 67 20 68 20 69    h i.......g h i",
          "3477: |   4064: 61 20 62 20 63 67 20 68 20 69 14 01 05 00 17 17   a b cg h i......",
          "3478: |   4080: 17 61 20 62 20 63 64 20 52 06 66 72 06 82 06 90   .a b cd R.fr....",
          "3479: | page 5 offset 16384",
          "3480: |      0: d0 00 00 00 30 fe 80 00 ff 80 ff 00 fe 00 00 00   ....0...........",
          "3481: |   4064: 00 00 00 00 00 00 00 00 06 03 03 00 12 03 00 03   ................",
          "3482: |   4080: 06 02 03 00 12 03 00 03 06 01 03 00 12 03 00 03   ................",
          "3483: | page 6 offset 20480",
          "3484: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "3485: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "3486: | page 7 offset 24576",
          "3487: |      0: 0d 00 00 00 03 0f 9e 00 0f e6 0f ef 0f 9e 00 00   ................",
          "3488: |   3984: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 84   ..............A.",
          "3489: |   4000: 80 80 80 80 01 04 00 81 06 00 00 00 34 02 30 61   ............4.0a",
          "3490: |   4016: 01 01 01 01 01 62 01 01 01 01 01 63 01 01 01 01   .....b.....c....",
          "3491: |   4032: 01 64 01 01 01 65 01 01 01 66 01 01 01 67 01 01   .d...e...f...g..",
          "3492: |   4048: 01 01 01 68 01 01 01 01 01 69 01 01 01 04 06 06   ...h.....i......",
          "3493: |   4064: 06 04 04 04 06 06 07 01 03 00 14 03 09 09 09 0f   ................",
          "3494: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "3495: | page 8 offset 28672",
          "3496: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "3497: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "3498: | page 9 offset 32768",
          "3499: |      0: 0d 00 00 00 03 0f be 00 0f ea 0f d4 0f be 00 00   ................",
          "3500: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 03   ................",
          "3501: |   4032: 05 00 17 17 17 61 20 62 20 63 67 20 68 20 69 67   .....a b cg h ig",
          "3502: |   4048: 20 68 20 69 14 02 05 00 17 17 17 67 20 68 20 69    h i.......g h i",
          "3503: |   4064: 61 20 62 20 63 67 20 68 20 69 14 01 05 00 17 17   a b cg h i......",
          "3504: |   4080: 17 61 20 62 20 63 64 20 65 20 66 67 20 68 20 69   .a b cd e fg h i",
          "3505: | page 10 offset 36864",
          "3506: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "3507: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "3508: | end crash-eef41e30b388a0.db",
          "3509: }]} {}",
          "3511: do_catchsql_test 30.1 {",
          "3512:   SELECT fts5_decode(id, block) FROM t1_data;",
          "3513: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10f9e39d6ed2413fa9abc6c82da3ed48f32a42b6190b6219fca7faf850d05113",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f030b376820102ff6cda49565c8b8173b2d44606",
      "candidate_info": {
        "commit_hash": "f030b376820102ff6cda49565c8b8173b2d44606",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f030b376820102ff6cda49565c8b8173b2d44606",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/window1.test"
        ],
        "message": "Internally, remove all references to a Window object that belongs to an expression in an ORDER BY clause if that expression is converted to an alias of a result-set expression. Fix for [4feb3159c6].\n\nFossilOrigin-Name: 579b66eaa0816561c6e47ea116b46f229188f0fc84c1173bfe0d21df2dff9a9a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73056b314bd63288c662752e9bd469b70264c38031c1c857460e64fdb1ed4e2e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1243:   return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1250: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1251:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1252:     Window **pp;",
          "1253:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1254:       if( *pp==pExpr->y.pWin ){",
          "1256:         break;",
          "1257:       }",
          "1258:     }",
          "1259:   }",
          "1260:   return WRC_Continue;",
          "1261: }",
          "1267: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1268:   Walker sWalker;",
          "1269:   memset(&sWalker, 0, sizeof(Walker));",
          "1270:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1271:   sWalker.u.pSelect = pSelect;",
          "1272:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1273: }",
          "1274: #else",
          "1275: # define resolveRemoveWindows(x,y)",
          "1276: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1309:     }",
          "1310:     for(j=0; j<pSelect->pEList->nExpr; j++){",
          "1311:       if( sqlite3ExprCompare(0, pE, pSelect->pEList->a[j].pExpr, -1)==0 ){",
          "1325:         pItem->u.x.iOrderByCol = j+1;",
          "1326:       }",
          "1327:     }",
          "",
          "[Removed Lines]",
          "1312: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1313:         if( ExprHasProperty(pE, EP_WinFunc) ){",
          "1317:           Window **pp;",
          "1318:           for(pp=&pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1319:             if( *pp==pE->y.pWin ){",
          "1321:             }",
          "1322:           }",
          "1323:         }",
          "1324: #endif",
          "",
          "[Added Lines]",
          "1347:         resolveRemoveWindows(pSelect, pE);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:   3 101",
          "701: }",
          "704: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703: #-------------------------------------------------------------------------",
          "704: do_execsql_test 17.0 {",
          "705:   CREATE TABLE t8(a);",
          "706:   INSERT INTO t8 VALUES(1), (2), (3);",
          "707: }",
          "709: do_execsql_test 17.1 {",
          "710:   SELECT +sum(0) OVER () ORDER BY +sum(0) OVER ();",
          "711: } {0}",
          "713: do_execsql_test 17.2 {",
          "714:   select +sum(a) OVER () FROM t8 ORDER BY +sum(a) OVER () DESC;",
          "715: } {6 6 6}",
          "717: do_execsql_test 17.3 {",
          "718:   SELECT 10+sum(a) OVER (ORDER BY a)",
          "719:   FROM t8",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
      "candidate_info": {
        "commit_hash": "72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/72b9fdcf207adbf9632958d4e7ffb83d37fb452f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/pg_common.tcl",
          "test/window6.test",
          "test/window8.tcl",
          "test/window8.test",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Add support for RANGE window frames. Some cases still do not work.\n\nFossilOrigin-Name: ffc32b246d92d53c66094afe11950b53ffab6a1c230c602eebbfedafb2eb57f4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/pg_common.tcl||test/pg_common.tcl",
          "test/window6.test||test/window6.test",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 53ea550ce759ae4683bcf0ae3af655bfe04f85db70f74edee6bcab56d83bb041",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:   }else{",
          "560:     sqlite3WindowChain(pParse, pWin, pList);",
          "561:   }",
          "562:   if( pFunc->funcFlags & SQLITE_FUNC_WINDOW ){",
          "563:     sqlite3 *db = pParse->db;",
          "564:     if( pWin->pFilter ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:   if( (pWin->eType==TK_RANGE)",
          "563:    && (pWin->pStart || pWin->pEnd)",
          "564:    && (pWin->pOrderBy==0 || pWin->pOrderBy->nExpr!=1)",
          "565:   ){",
          "566:     sqlite3ErrorMsg(pParse,",
          "567:       \"RANGE with offset PRECEDING/FOLLOWING requires one ORDER BY expression\"",
          "568:     );",
          "569:   }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "927:     eType = TK_RANGE;",
          "928:   }",
          "",
          "[Removed Lines]",
          "933:   if( eType==TK_RANGE && (pStart!=0 || pEnd!=0) ){",
          "934:     sqlite3ErrorMsg(pParse, \"RANGE must use only UNBOUNDED or CURRENT ROW\");",
          "935:     goto windowAllocErr;",
          "936:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "952:   if( (eStart==TK_CURRENT && eEnd==TK_PRECEDING)",
          "953:    || (eStart==TK_FOLLOWING && (eEnd==TK_PRECEDING || eEnd==TK_CURRENT))",
          "954:   ){",
          "956:     goto windowAllocErr;",
          "957:   }",
          "",
          "[Removed Lines]",
          "955:     sqlite3ErrorMsg(pParse, \"unsupported frame delimiter for ROWS\");",
          "",
          "[Added Lines]",
          "955:     sqlite3ErrorMsg(pParse, \"unsupported frame specification\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1485:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1486:     addr = sqlite3VdbeAddOp3(",
          "1487:         v, OP_Jump, sqlite3VdbeCurrentAddr(v)+1, 0, sqlite3VdbeCurrentAddr(v)+1",
          "1489:     VdbeCoverageEqNe(v);",
          "1490:     sqlite3VdbeAddOp3(v, OP_Copy, regNew, regOld, nVal-1);",
          "1491:   }else{",
          "",
          "[Removed Lines]",
          "1488:         );",
          "",
          "[Added Lines]",
          "1488:     );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1539:   }",
          "1540: }",
          "1542: static int windowCodeOp(",
          "1543:  WindowCodeArg *p,",
          "1544:  int op,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: static void windowCodeRangeTest(",
          "1551:   WindowCodeArg *p,",
          "1553:   int csr1,",
          "1554:   int regVal,",
          "1555:   int csr2,",
          "1556:   int lbl",
          "1557: ){",
          "1558:   Parse *pParse = p->pParse;",
          "1559:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1560:   int reg1 = sqlite3GetTempReg(pParse);",
          "1561:   int reg2 = sqlite3GetTempReg(pParse);",
          "1562:   windowReadPeerValues(p, csr1, reg1);",
          "1563:   windowReadPeerValues(p, csr2, reg2);",
          "1564:   sqlite3VdbeAddOp3(v, OP_Add, reg1, regVal, reg1);",
          "1565:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1566:   sqlite3VdbeAddOp2(v, OP_Rowid, csr1, reg1);",
          "1567:   sqlite3VdbeAddOp2(v, OP_Rowid, csr2, reg2);",
          "1568:   sqlite3VdbeAddOp3(v, OP_Gt, reg2, lbl, reg1);",
          "1569:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1570:   sqlite3ReleaseTempReg(pParse, reg2);",
          "1572:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1573: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1555:   int addrGoto = 0;",
          "1556:   int bPeer = (pMWin->eType!=TK_ROWS);",
          "1560:   if( op==WINDOW_AGGINVERSE && pMWin->eStart==TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1591:   int lblDone = sqlite3VdbeMakeLabel(pParse);",
          "1592:   int addrNextRange = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1563:   }",
          "1565:   if( regCountdown>0 ){",
          "1567:   }",
          "1569:   if( op==WINDOW_RETURN_ROW ){",
          "",
          "[Removed Lines]",
          "1566:     addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "",
          "[Added Lines]",
          "1602:     if( pMWin->eType==TK_RANGE ){",
          "1603:       addrNextRange = sqlite3VdbeCurrentAddr(v);",
          "1605:       switch( op ){",
          "1606:         case WINDOW_RETURN_ROW: {",
          "1607:           assert( 0 );",
          "1608:           break;",
          "1609:         }",
          "1611:         case WINDOW_AGGINVERSE: {",
          "1612:           if( pMWin->eStart==TK_FOLLOWING ){",
          "1613:             windowCodeRangeTest(",
          "1614:                 p, OP_Le, p->current.csr, regCountdown, p->start.csr, lblDone",
          "1615:             );",
          "1616:           }else{",
          "1617:             windowCodeRangeTest(",
          "1618:                 p, OP_Ge, p->start.csr, regCountdown, p->current.csr, lblDone",
          "1619:             );",
          "1620:           }",
          "1621:           break;",
          "1622:         }",
          "1624:         case WINDOW_AGGSTEP: {",
          "1625:           windowCodeRangeTest(",
          "1626:             p, OP_Gt, p->end.csr, regCountdown, p->current.csr, lblDone",
          "1627:           );",
          "1628:           break;",
          "1629:         }",
          "1630:       }",
          "1632:     }else{",
          "1633:       addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "1634:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1610:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "1611:   }",
          "1613:   if( addrGoto ) sqlite3VdbeJumpHere(v, addrGoto);",
          "1614:   if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1615:   return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1681:   if( addrNextRange ){",
          "1682:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNextRange);",
          "1683:   }",
          "1684:   sqlite3VdbeResolveLabel(v, lblDone);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1724:   int regNewPeer = 0;",
          "1725:   WindowCodeArg s;",
          "1727:   memset(&s, 0, sizeof(WindowCodeArg));",
          "1728:   s.pParse = pParse;",
          "1729:   s.pMWin = pMWin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1799:   assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_CURRENT",
          "1800:        || pMWin->eStart==TK_FOLLOWING || pMWin->eStart==TK_UNBOUNDED",
          "1801:   );",
          "1802:   assert( pMWin->eEnd==TK_FOLLOWING || pMWin->eEnd==TK_CURRENT",
          "1803:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "1804:   );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1758:     s.end.reg = pParse->nMem+1;     pParse->nMem += nPeer;",
          "1759:   }",
          "",
          "[Removed Lines]",
          "1761:   assert( pMWin->eStart==TK_PRECEDING",
          "1762:        || pMWin->eStart==TK_CURRENT",
          "1763:        || pMWin->eStart==TK_FOLLOWING",
          "1764:        || pMWin->eStart==TK_UNBOUNDED",
          "1765:   );",
          "1766:   assert( pMWin->eEnd==TK_FOLLOWING",
          "1767:        || pMWin->eEnd==TK_CURRENT",
          "1768:        || pMWin->eEnd==TK_UNBOUNDED",
          "1769:        || pMWin->eEnd==TK_PRECEDING",
          "1770:   );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1791:     int regNewPart = reg + pMWin->nBufferCol;",
          "1792:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "1795:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "1796:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1797:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+4, addr+2);",
          "1798:     VdbeCoverageEqNe(v);",
          "1799:     addrGosubFlush = sqlite3VdbeAddOp1(v, OP_Gosub, regFlushPart);",
          "1800:     VdbeComment((v, \"call flush_partition\"));",
          "1802:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPart, pMWin->regPart, nPart-1);",
          "1803:   }",
          "",
          "[Removed Lines]",
          "1794:     addrIf = sqlite3VdbeAddOp1(v, OP_If, pMWin->regFirst);",
          "1801:     sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1848:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1849:     sqlite3VdbeJumpHere(v, addrGe);",
          "1850:   }",
          "1852:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "1853:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "1854:   }",
          "",
          "[Removed Lines]",
          "1851:   if( pMWin->eStart==TK_FOLLOWING && regEnd ){",
          "",
          "[Added Lines]",
          "1917:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eType!=TK_RANGE && regEnd ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1888:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1889:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1890:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1893:     }",
          "1894:   }else",
          "1895:   if( pMWin->eEnd==TK_PRECEDING ){",
          "",
          "[Removed Lines]",
          "1891:       windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "1892:       windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "1957:       if( pMWin->eType==TK_RANGE ){",
          "1958:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1959:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "1960:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "1961:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1962:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1963:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "1964:         sqlite3VdbeResolveLabel(v, lbl);",
          "1965:       }else{",
          "1966:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "1967:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1968:       }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1900:     int addr;",
          "1901:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1902:     if( pMWin->eEnd!=TK_UNBOUNDED ){",
          "1907:     }",
          "1908:   }",
          "1909:   if( addrPeerJump ){",
          "",
          "[Removed Lines]",
          "1903:       if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1904:       windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1905:       windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1906:       if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "1979:       if( pMWin->eType==TK_RANGE ){",
          "1980:         int lbl;",
          "1981:         addr = sqlite3VdbeCurrentAddr(v);",
          "1982:         if( regEnd ){",
          "1983:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "1984:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "1985:         }",
          "1986:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1987:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1988:         if( regEnd ){",
          "1989:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "1990:           sqlite3VdbeResolveLabel(v, lbl);",
          "1991:         }",
          "1992:       }else{",
          "1993:         if( regEnd ) addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1994:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "1995:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "1996:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "1997:       }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1938:     int addrBreak2;",
          "1939:     int addrBreak3;",
          "1940:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "1941:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "1942:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "1943:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2032:     if( pMWin->eType==TK_RANGE ){",
          "2033:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2034:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2035:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2036:     }else",
          "",
          "---------------"
        ],
        "test/pg_common.tcl||test/pg_common.tcl": [
          "File: test/pg_common.tcl -> test/pg_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   if {$rc==0} {",
          "73:     error \"errorsql_test SQL did not cause an error!\"",
          "74:   }",
          "76:   set sql [string map {string_agg group_concat} $sql]",
          "77:   puts $::fd \"do_test $tn { catch { execsql {\"",
          "78:   puts $::fd \"  [string trim $sql]\"",
          "",
          "[Removed Lines]",
          "75:   puts $::fd \"# PG says \\\"[string trim $msg]\\\"\"",
          "",
          "[Added Lines]",
          "75:   set msg [lindex [split [string trim $msg] \"\\n\"] 0]",
          "76:   puts $::fd \"# PG says $msg\"",
          "",
          "---------------"
        ],
        "test/window6.test||test/window6.test": [
          "File: test/window6.test -> test/window6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: } {",
          "220:   1 1  2 1,2  3 1,2,3  4 2,3,4  5 3,4,5",
          "221: }",
          "234: do_catchsql_test 9.3 {",
          "235:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "",
          "[Removed Lines]",
          "222: do_catchsql_test 9.1 {",
          "223:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "224:   SELECT x, group_concat(x) OVER (ORDER BY x RANGE 2 PRECEDING)",
          "225:   FROM c;",
          "226: } {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "228: do_catchsql_test 9.2 {",
          "229:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "230:   SELECT x, group_concat(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING)",
          "231:   FROM c;",
          "232: } {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "",
          "[Added Lines]",
          "222: #do_catchsql_test 9.1 {",
          "223: #  WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "224: #  SELECT x, group_concat(x) OVER (ORDER BY x RANGE 2 PRECEDING)",
          "225: #  FROM c;",
          "226: #} {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "227: #",
          "228: #do_catchsql_test 9.2 {",
          "229: #  WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<5)",
          "230: #  SELECT x, group_concat(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING)",
          "231: #  FROM c;",
          "232: #} {1 {RANGE must use only UNBOUNDED or CURRENT ROW}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     SELECT count() OVER (",
          "263:         ORDER BY x ROWS $frame",
          "264:     ) FROM c;",
          "266: }",
          "268: do_catchsql_test 9.8.1 {",
          "",
          "[Removed Lines]",
          "265:   \" {1 {unsupported frame delimiter for ROWS}}",
          "",
          "[Added Lines]",
          "265:   \" {1 {unsupported frame specification}}",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   \"",
          "90: }",
          "92: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: ==========",
          "94: execsql_test 2.0 {",
          "95:   DROP TABLE IF EXISTS t1;",
          "96:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "97:   INSERT INTO t1 VALUES",
          "98:       (13, 26), (15, 30);",
          "99: }",
          "101: foreach {tn frame} {",
          "102:   1 { ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING }",
          "103:   2 { ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING }",
          "104:   3 { ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING }",
          "105: } {",
          "106:   execsql_test 2.$tn \"SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ($frame)\"",
          "107: }",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT a, b, min(c) OVER (ORDER BY a,b  GROUPS BETWEEN 1 FOLLOWING         AND UNBOUNDED FOLLOWING ) FROM t3 ORDER BY 1, 2, 3;",
          "434: } {AA aa 102   AA aa 102   AA aa 102   AA aa 102   AA bb 102   AA bb 102   AA bb 102   AA bb 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   CC aa 102   CC aa 102   CC aa 102   CC aa 102   CC bb 102   CC bb 102   DD aa 102   DD aa 102   DD aa 102   DD bb 102   DD bb 102   DD bb 102   DD bb 102   EE aa 102   EE aa 102   EE bb 102   EE bb 102   EE bb 102   FF aa 102   FF aa 102   FF aa 102   FF aa 102   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   GG aa 113   GG aa 113   GG aa 113   GG aa 113   GG bb 113   GG bb 113   GG bb 113   GG bb 113   HH aa 113   HH aa 113   HH aa 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   II aa 113   II aa 113   II bb 113   II bb 113   II bb 113   II bb 113   II bb 113   JJ aa 257   JJ aa 257   JJ aa 257   JJ aa 257   JJ bb {}   JJ bb {}   JJ bb {}   JJ bb {}}",
          "436: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: #==========================================================================",
          "438: do_execsql_test 2.0 {",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "441:   INSERT INTO t1 VALUES",
          "442:       (13, 26), (15, 30);",
          "443: } {}",
          "445: do_execsql_test 2.1 {",
          "446:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "447: } {13 56   15 56}",
          "449: do_execsql_test 2.2 {",
          "450:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "451: } {13 {}   15 {}}",
          "453: do_execsql_test 2.3 {",
          "454:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "455: } {13 30   15 {}}",
          "",
          "---------------"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: execsql_test 1.0 {",
          "21:   DROP TABLE IF EXISTS t1;",
          "22:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "23: }",
          "25: foreach {tn frame} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:   INSERT INTO t1 VALUES(1, 1);",
          "24:   INSERT INTO t1 VALUES(2, 2);",
          "25:   INSERT INTO t1 VALUES(3, 3);",
          "26:   INSERT INTO t1 VALUES(4, 4);",
          "27:   INSERT INTO t1 VALUES(5, 5);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   5 \"ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "33:   6 \"ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "34: } {",
          "35:   errorsql_test 1.$tn \"",
          "36:   SELECT a, sum(b) OVER (",
          "37:     $frame",
          "39:   \"",
          "40: }",
          "",
          "[Removed Lines]",
          "38:   ) FROM t3 ORDER BY 1",
          "",
          "[Added Lines]",
          "40:   7 \"ORDER BY a,b RANGE BETWEEN  1 PRECEDING AND 1 FOLLOWING\"",
          "45:   ) FROM t1 ORDER BY 1",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "26: } {}",
          "29: do_test 1.1 { catch { execsql {",
          "30:   SELECT a, sum(b) OVER (",
          "31:     ORDER BY a ROWS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "33: } } } 1",
          "36: do_test 1.2 { catch { execsql {",
          "37:   SELECT a, sum(b) OVER (",
          "38:     ORDER BY a ROWS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "40: } } } 1",
          "43: do_test 1.3 { catch { execsql {",
          "44:   SELECT a, sum(b) OVER (",
          "45:     ORDER BY a RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "47: } } } 1",
          "50: do_test 1.4 { catch { execsql {",
          "51:   SELECT a, sum(b) OVER (",
          "52:     ORDER BY a RANGE BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "54: } } } 1",
          "57: do_test 1.5 { catch { execsql {",
          "58:   SELECT a, sum(b) OVER (",
          "59:     ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "61: } } } 1",
          "64: do_test 1.6 { catch { execsql {",
          "65:   SELECT a, sum(b) OVER (",
          "66:     ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "68: } } } 1",
          "70: finish_test",
          "",
          "[Removed Lines]",
          "28: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "32:   ) FROM t3 ORDER BY 1",
          "35: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "39:   ) FROM t3 ORDER BY 1",
          "42: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "46:   ) FROM t3 ORDER BY 1",
          "49: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "53:   ) FROM t3 ORDER BY 1",
          "56: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "60:   ) FROM t3 ORDER BY 1",
          "63: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "67:   ) FROM t3 ORDER BY 1",
          "",
          "[Added Lines]",
          "26:   INSERT INTO t1 VALUES(1, 1);",
          "27:   INSERT INTO t1 VALUES(2, 2);",
          "28:   INSERT INTO t1 VALUES(3, 3);",
          "29:   INSERT INTO t1 VALUES(4, 4);",
          "30:   INSERT INTO t1 VALUES(5, 5);",
          "33: # PG says ERROR:  frame starting offset must not be negative",
          "37:   ) FROM t1 ORDER BY 1",
          "40: # PG says ERROR:  frame ending offset must not be negative",
          "44:   ) FROM t1 ORDER BY 1",
          "47: # PG says ERROR:  invalid preceding or following size in window function",
          "51:   ) FROM t1 ORDER BY 1",
          "54: # PG says ERROR:  invalid preceding or following size in window function",
          "58:   ) FROM t1 ORDER BY 1",
          "61: # PG says ERROR:  frame starting offset must not be negative",
          "65:   ) FROM t1 ORDER BY 1",
          "68: # PG says ERROR:  frame ending offset must not be negative",
          "72:   ) FROM t1 ORDER BY 1",
          "73: } } } 1",
          "75: # PG says ERROR:  RANGE with offset PRECEDING/FOLLOWING requires exactly one ORDER BY column",
          "76: do_test 1.7 { catch { execsql {",
          "77:   SELECT a, sum(b) OVER (",
          "78:     ORDER BY a,b RANGE BETWEEN  1 PRECEDING AND 1 FOLLOWING",
          "79:   ) FROM t1 ORDER BY 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb99c57a66d64e2d00234f0989299f8a644f03c7",
      "candidate_info": {
        "commit_hash": "cb99c57a66d64e2d00234f0989299f8a644f03c7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cb99c57a66d64e2d00234f0989299f8a644f03c7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/rowvalue.test"
        ],
        "message": "Allow the RHS of a row-value IN operator to use a compound query with an ORDER BY clause.\n\nFossilOrigin-Name: eaf15d9bae6773058341d6219241f44ce728ad1cb9cf649f2efd4dddd81ec461",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 68b7f2acf4d228f32250e37cbc0eb5d275b512d49071bbb38e1f5634b705f7d3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2972:     case SRT_Mem: {",
          "2976:       break;",
          "2977:     }",
          "",
          "[Removed Lines]",
          "2973:       assert( pIn->nSdst==1 || pParse->nErr>0 );  testcase( pIn->nSdst!=1 );",
          "2974:       sqlite3ExprCodeMove(pParse, pIn->iSdst, pDest->iSDParm, 1);",
          "",
          "[Added Lines]",
          "2974:       if( pParse->nErr==0 ){",
          "2975:         testcase( pIn->nSdst>1 );",
          "2976:         sqlite3ExprCodeMove(pParse, pIn->iSdst, pDest->iSDParm, pIn->nSdst);",
          "2977:       }",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:   SELECT * FROM t1 WHERE (a,b) IN (VALUES(1,2));",
          "558: } {1 2}",
          "560: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: # 2019-08-09: Multi-column subquery on the RHS of an IN operator.",
          "561: #",
          "562: do_execsql_test 22.100 {",
          "563:   SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);",
          "564:   SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);",
          "565:   SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);",
          "566:   SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 5,6);",
          "567:   SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 3,4);",
          "568:   SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);",
          "569:   SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 3,4);",
          "570:   SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 5,6);",
          "571: } {1 0 1 0 0 1 0 1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}