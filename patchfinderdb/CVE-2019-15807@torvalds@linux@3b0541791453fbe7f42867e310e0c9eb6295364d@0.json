{
  "cve_id": "CVE-2019-15807",
  "cve_desc": "In the Linux kernel before 5.1.13, there is a memory leak in drivers/scsi/libsas/sas_expander.c when SAS expander discovery fails. This will cause a BUG and denial of service.",
  "repo": "torvalds/linux",
  "patch_hash": "3b0541791453fbe7f42867e310e0c9eb6295364d",
  "patch_info": {
    "commit_hash": "3b0541791453fbe7f42867e310e0c9eb6295364d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/3b0541791453fbe7f42867e310e0c9eb6295364d",
    "files": [
      "drivers/scsi/libsas/sas_expander.c"
    ],
    "message": "scsi: libsas: delete sas port if expander discover failed\n\nThe sas_port(phy->port) allocated in sas_ex_discover_expander() will not be\ndeleted when the expander failed to discover. This will cause resource leak\nand a further issue of kernel BUG like below:\n\n[159785.843156]  port-2:17:29: trying to add phy phy-2:17:29 fails: it's\nalready part of another port\n[159785.852144] ------------[ cut here  ]------------\n[159785.856833] kernel BUG at drivers/scsi/scsi_transport_sas.c:1086!\n[159785.863000] Internal error: Oops - BUG: 0 [#1] SMP\n[159785.867866] CPU: 39 PID: 16993 Comm: kworker/u96:2 Tainted: G\nW  OE     4.19.25-vhulk1901.1.0.h111.aarch64 #1\n[159785.878458] Hardware name: Huawei Technologies Co., Ltd.\nHi1620EVBCS/Hi1620EVBCS, BIOS Hi1620 CS B070 1P TA 03/21/2019\n[159785.889231] Workqueue: 0000:74:02.0_disco_q sas_discover_domain\n[159785.895224] pstate: 40c00009 (nZcv daif +PAN +UAO)\n[159785.900094] pc : sas_port_add_phy+0x188/0x1b8\n[159785.904524] lr : sas_port_add_phy+0x188/0x1b8\n[159785.908952] sp : ffff0001120e3b80\n[159785.912341] x29: ffff0001120e3b80 x28: 0000000000000000\n[159785.917727] x27: ffff802ade8f5400 x26: ffff0000681b7560\n[159785.923111] x25: ffff802adf11a800 x24: ffff0000680e8000\n[159785.928496] x23: ffff802ade8f5728 x22: ffff802ade8f5708\n[159785.933880] x21: ffff802adea2db40 x20: ffff802ade8f5400\n[159785.939264] x19: ffff802adea2d800 x18: 0000000000000010\n[159785.944649] x17: 00000000821bf734 x16: ffff00006714faa0\n[159785.950033] x15: ffff0000e8ab4ecf x14: 7261702079646165\n[159785.955417] x13: 726c612073277469 x12: ffff00006887b830\n[159785.960802] x11: ffff00006773eaa0 x10: 7968702079687020\n[159785.966186] x9 : 0000000000002453 x8 : 726f702072656874\n[159785.971570] x7 : 6f6e6120666f2074 x6 : ffff802bcfb21290\n[159785.976955] x5 : ffff802bcfb21290 x4 : 0000000000000000\n[159785.982339] x3 : ffff802bcfb298c8 x2 : 337752b234c2ab00\n[159785.987723] x1 : 337752b234c2ab00 x0 : 0000000000000000\n[159785.993108] Process kworker/u96:2 (pid: 16993, stack limit =\n0x0000000072dae094)\n[159786.000576] Call trace:\n[159786.003097]  sas_port_add_phy+0x188/0x1b8\n[159786.007179]  sas_ex_get_linkrate.isra.5+0x134/0x140\n[159786.012130]  sas_ex_discover_expander+0x128/0x408\n[159786.016906]  sas_ex_discover_dev+0x218/0x4c8\n[159786.021249]  sas_ex_discover_devices+0x9c/0x1a8\n[159786.025852]  sas_discover_root_expander+0x134/0x160\n[159786.030802]  sas_discover_domain+0x1b8/0x1e8\n[159786.035148]  process_one_work+0x1b4/0x3f8\n[159786.039230]  worker_thread+0x54/0x470\n[159786.042967]  kthread+0x134/0x138\n[159786.046269]  ret_from_fork+0x10/0x18\n[159786.049918] Code: 91322300 f0004402 91178042 97fe4c9b (d4210000)\n[159786.056083] Modules linked in: hns3_enet_ut(OE) hclge(OE) hnae3(OE)\nhisi_sas_test_hw(OE) hisi_sas_test_main(OE) serdes(OE)\n[159786.067202] ---[ end trace 03622b9e2d99e196  ]---\n[159786.071893] Kernel panic - not syncing: Fatal exception\n[159786.077190] SMP: stopping secondary CPUs\n[159786.081192] Kernel Offset: disabled\n[159786.084753] CPU features: 0x2,a2a00a38\n\nFixes: 2908d778ab3e (\"[SCSI] aic94xx: new driver\")\nReported-by: Jian Luo <luojian5@huawei.com>\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nCC: John Garry <john.garry@huawei.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/libsas/sas_expander.c||drivers/scsi/libsas/sas_expander.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/libsas/sas_expander.c||drivers/scsi/libsas/sas_expander.c": [
      "File: drivers/scsi/libsas/sas_expander.c -> drivers/scsi/libsas/sas_expander.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1019:   list_del(&child->dev_list_node);",
      "1020:   spin_unlock_irq(&parent->port->dev_list_lock);",
      "1021:   sas_put_device(child);",
      "1022:   return NULL;",
      "1023:  }",
      "1024:  list_add_tail(&child->siblings, &parent->ex_dev.children);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1022:   sas_port_delete(phy->port);",
      "1023:   phy->port = NULL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5b0efb4d670c8b53b25c166967efd2a02b309e05",
      "candidate_info": {
        "commit_hash": "5b0efb4d670c8b53b25c166967efd2a02b309e05",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5b0efb4d670c8b53b25c166967efd2a02b309e05",
        "files": [
          "drivers/net/wireless/realtek/rtw88/main.c"
        ],
        "message": "rtw88: avoid circular locking between local->iflist_mtx and rtwdev->mutex\n\nRemove circular lock dependency by using atomic version of interfaces\niterate in watch_dog_work(), hence avoid taking local->iflist_mtx\n(rtw_vif_watch_dog_iter() only update some data, it can be called from\natomic context). Fixes below LOCKDEP warning:\n\n[ 1157.219415] ======================================================\n[ 1157.225772] [ INFO: possible circular locking dependency detected ]\n[ 1157.232150] 3.10.0-1043.el7.sgruszka1.x86_64.debug #1 Not tainted\n[ 1157.238346] -------------------------------------------------------\n[ 1157.244635] kworker/u4:2/14490 is trying to acquire lock:\n[ 1157.250194]  (&rtwdev->mutex){+.+.+.}, at: [<ffffffffc098322b>] rtw_ops_config+0x2b/0x90 [rtw88]\n[ 1157.259151]\nbut task is already holding lock:\n[ 1157.265085]  (&local->iflist_mtx){+.+...}, at: [<ffffffffc0b8ab7a>] ieee80211_mgd_probe_ap.part.28+0xca/0x160 [mac80211]\n[ 1157.276169]\nwhich lock already depends on the new lock.\n\n[ 1157.284488]\nthe existing dependency chain (in reverse order) is:\n[ 1157.292101]\n-> #2 (&local->iflist_mtx){+.+...}:\n[ 1157.296919]        [<ffffffffbc741a29>] lock_acquire+0x99/0x1e0\n[ 1157.302955]        [<ffffffffbce72793>] mutex_lock_nested+0x93/0x410\n[ 1157.309416]        [<ffffffffc0b6038f>] ieee80211_iterate_interfaces+0x2f/0x60 [mac80211]\n[ 1157.317730]        [<ffffffffc09811ab>] rtw_watch_dog_work+0xcb/0x130 [rtw88]\n[ 1157.325003]        [<ffffffffbc6d77bc>] process_one_work+0x22c/0x720\n[ 1157.331481]        [<ffffffffbc6d7dd6>] worker_thread+0x126/0x3b0\n[ 1157.337589]        [<ffffffffbc6e107f>] kthread+0xef/0x100\n[ 1157.343260]        [<ffffffffbce848b7>] ret_from_fork_nospec_end+0x0/0x39\n[ 1157.350091]\n-> #1 ((&(&rtwdev->watch_dog_work)->work)){+.+...}:\n[ 1157.356314]        [<ffffffffbc741a29>] lock_acquire+0x99/0x1e0\n[ 1157.362427]        [<ffffffffbc6d570b>] flush_work+0x5b/0x310\n[ 1157.368287]        [<ffffffffbc6d740e>] __cancel_work_timer+0xae/0x170\n[ 1157.374940]        [<ffffffffbc6d7583>] cancel_delayed_work_sync+0x13/0x20\n[ 1157.381930]        [<ffffffffc0982b49>] rtw_core_stop+0x29/0x50 [rtw88]\n[ 1157.388679]        [<ffffffffc098bee6>] rtw_enter_ips+0x16/0x20 [rtw88]\n[ 1157.395428]        [<ffffffffc0983242>] rtw_ops_config+0x42/0x90 [rtw88]\n[ 1157.402173]        [<ffffffffc0b13343>] ieee80211_hw_config+0xc3/0x680 [mac80211]\n[ 1157.409854]        [<ffffffffc0b3925b>] ieee80211_do_open+0x69b/0x9c0 [mac80211]\n[ 1157.417418]        [<ffffffffc0b395e9>] ieee80211_open+0x69/0x70 [mac80211]\n[ 1157.424496]        [<ffffffffbcd03442>] __dev_open+0xe2/0x160\n[ 1157.430356]        [<ffffffffbcd03773>] __dev_change_flags+0xa3/0x180\n[ 1157.436922]        [<ffffffffbcd03879>] dev_change_flags+0x29/0x60\n[ 1157.443224]        [<ffffffffbcda14c4>] devinet_ioctl+0x794/0x890\n[ 1157.449331]        [<ffffffffbcda27b5>] inet_ioctl+0x75/0xa0\n[ 1157.455087]        [<ffffffffbccd54eb>] sock_do_ioctl+0x2b/0x60\n[ 1157.461178]        [<ffffffffbccd5753>] sock_ioctl+0x233/0x310\n[ 1157.467109]        [<ffffffffbc8bd820>] do_vfs_ioctl+0x410/0x6c0\n[ 1157.473233]        [<ffffffffbc8bdb71>] SyS_ioctl+0xa1/0xc0\n[ 1157.478914]        [<ffffffffbce84a5e>] system_call_fastpath+0x25/0x2a\n[ 1157.485569]\n-> #0 (&rtwdev->mutex){+.+.+.}:\n[ 1157.490022]        [<ffffffffbc7409d1>] __lock_acquire+0xec1/0x1630\n[ 1157.496305]        [<ffffffffbc741a29>] lock_acquire+0x99/0x1e0\n[ 1157.502413]        [<ffffffffbce72793>] mutex_lock_nested+0x93/0x410\n[ 1157.508890]        [<ffffffffc098322b>] rtw_ops_config+0x2b/0x90 [rtw88]\n[ 1157.515724]        [<ffffffffc0b13343>] ieee80211_hw_config+0xc3/0x680 [mac80211]\n[ 1157.523370]        [<ffffffffc0b8a4ca>] ieee80211_recalc_ps.part.27+0x9a/0x180 [mac80211]\n[ 1157.531685]        [<ffffffffc0b8abc5>] ieee80211_mgd_probe_ap.part.28+0x115/0x160 [mac80211]\n[ 1157.540353]        [<ffffffffc0b8b40d>] ieee80211_beacon_connection_loss_work+0x4d/0x80 [mac80211]\n[ 1157.549513]        [<ffffffffbc6d77bc>] process_one_work+0x22c/0x720\n[ 1157.555886]        [<ffffffffbc6d7dd6>] worker_thread+0x126/0x3b0\n[ 1157.562170]        [<ffffffffbc6e107f>] kthread+0xef/0x100\n[ 1157.567765]        [<ffffffffbce848b7>] ret_from_fork_nospec_end+0x0/0x39\n[ 1157.574579]\nother info that might help us debug this:\n\n[ 1157.582788] Chain exists of:\n  &rtwdev->mutex --> (&(&rtwdev->watch_dog_work)->work) --> &local->iflist_mtx\n\n[ 1157.593024]  Possible unsafe locking scenario:\n\n[ 1157.599046]        CPU0                    CPU1\n[ 1157.603653]        ----                    ----\n[ 1157.608258]   lock(&local->iflist_mtx);\n[ 1157.612180]                                lock((&(&rtwdev->watch_dog_work)->work));\n[ 1157.620074]                                lock(&local->iflist_mtx);\n[ 1157.626555]   lock(&rtwdev->mutex);\n[ 1157.630124]\n *** DEADLOCK ***\n\n[ 1157.636148] 4 locks held by kworker/u4:2/14490:\n[ 1157.640755]  #0:  (%s#6){.+.+.+}, at: [<ffffffffbc6d774a>] process_one_work+0x1ba/0x720\n[ 1157.648965]  #1:  ((&ifmgd->beacon_connection_loss_work)){+.+.+.}, at: [<ffffffffbc6d774a>] process_one_work+0x1ba/0x720\n[ 1157.659950]  #2:  (&wdev->mtx){+.+.+.}, at: [<ffffffffc0b8aad5>] ieee80211_mgd_probe_ap.part.28+0x25/0x160 [mac80211]\n[ 1157.670901]  #3:  (&local->iflist_mtx){+.+...}, at: [<ffffffffc0b8ab7a>] ieee80211_mgd_probe_ap.part.28+0xca/0x160 [mac80211]\n[ 1157.682466]\n\nFixes: e3037485c68e (\"rtw88: new Realtek 802.11ac driver\")\nSigned-off-by: Stanislaw Gruszka <sgruszka@redhat.com>\nAcked-by: Yan-Hsuan Chuang <yhchuang@realtek.com>\nSigned-off-by: Kalle Valo <kvalo@codeaurora.org>",
        "before_after_code_files": [
          "drivers/net/wireless/realtek/rtw88/main.c||drivers/net/wireless/realtek/rtw88/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/wireless/realtek/rtw88/main.c||drivers/net/wireless/realtek/rtw88/main.c": [
          "File: drivers/net/wireless/realtek/rtw88/main.c -> drivers/net/wireless/realtek/rtw88/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:  rtwdev->stats.tx_cnt = 0;",
          "163:  rtwdev->stats.rx_cnt = 0;",
          "",
          "[Removed Lines]",
          "165:  rtw_iterate_vifs(rtwdev, rtw_vif_watch_dog_iter, &data);",
          "",
          "[Added Lines]",
          "166:  rtw_iterate_vifs_atomic(rtwdev, rtw_vif_watch_dog_iter, &data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57949d033a09c57d77be218b5bec07af6878ab32",
      "candidate_info": {
        "commit_hash": "57949d033a09c57d77be218b5bec07af6878ab32",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/57949d033a09c57d77be218b5bec07af6878ab32",
        "files": [
          "fs/btrfs/qgroup.c"
        ],
        "message": "btrfs: qgroup: Check bg while resuming relocation to avoid NULL pointer dereference\n\n[BUG]\nWhen mounting a fs with reloc tree and has qgroup enabled, it can cause\nNULL pointer dereference at mount time:\n\n  BUG: kernel NULL pointer dereference, address: 00000000000000a8\n  #PF: supervisor read access in kernel mode\n  #PF: error_code(0x0000) - not-present page\n  PGD 0 P4D 0\n  Oops: 0000 [#1] PREEMPT SMP NOPTI\n  RIP: 0010:btrfs_qgroup_add_swapped_blocks+0x186/0x300 [btrfs]\n  Call Trace:\n   replace_path.isra.23+0x685/0x900 [btrfs]\n   merge_reloc_root+0x26e/0x5f0 [btrfs]\n   merge_reloc_roots+0x10a/0x1a0 [btrfs]\n   btrfs_recover_relocation+0x3cd/0x420 [btrfs]\n   open_ctree+0x1bc8/0x1ed0 [btrfs]\n   btrfs_mount_root+0x544/0x680 [btrfs]\n   legacy_get_tree+0x34/0x60\n   vfs_get_tree+0x2d/0xf0\n   fc_mount+0x12/0x40\n   vfs_kern_mount.part.12+0x61/0xa0\n   vfs_kern_mount+0x13/0x20\n   btrfs_mount+0x16f/0x860 [btrfs]\n   legacy_get_tree+0x34/0x60\n   vfs_get_tree+0x2d/0xf0\n   do_mount+0x81f/0xac0\n   ksys_mount+0xbf/0xe0\n   __x64_sys_mount+0x25/0x30\n   do_syscall_64+0x65/0x240\n   entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\n[CAUSE]\nIn btrfs_recover_relocation(), we don't have enough info to determine\nwhich block group we're relocating, but only to merge existing reloc\ntrees.\n\nThus in btrfs_recover_relocation(), rc->block_group is NULL.\nbtrfs_qgroup_add_swapped_blocks() hasn't taken this into consideration,\nand causes a NULL pointer dereference.\n\nThe bug is introduced by commit 3d0174f78e72 (\"btrfs: qgroup: Only trace\ndata extents in leaves if we're relocating data block group\"), and\nlater qgroup refactoring still keeps this optimization.\n\n[FIX]\nThankfully in the context of btrfs_recover_relocation(), there is no\nother progress can modify tree blocks, thus those swapped tree blocks\npair will never affect qgroup numbers, no matter whatever we set for\nblock->trace_leaf.\n\nSo we only need to check if @bg is NULL before accessing @bg->flags.\n\nReported-by: Juan Erbes <jerbes@gmail.com>\nLink: https://bugzilla.opensuse.org/show_bug.cgi?id=1134806\nFixes: 3d0174f78e72 (\"btrfs: qgroup: Only trace data extents in leaves if we're relocating data block group\")\nCC: stable@vger.kernel.org # 4.20+\nSigned-off-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/qgroup.c||fs/btrfs/qgroup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/qgroup.c||fs/btrfs/qgroup.c": [
          "File: fs/btrfs/qgroup.c -> fs/btrfs/qgroup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3830:            subvol_slot);",
          "3831:  block->last_snapshot = last_snapshot;",
          "3832:  block->level = level;",
          "3834:   block->trace_leaf = true;",
          "3835:  else",
          "3836:   block->trace_leaf = false;",
          "",
          "[Removed Lines]",
          "3833:  if (bg->flags & BTRFS_BLOCK_GROUP_DATA)",
          "",
          "[Added Lines]",
          "3839:  if (bg && bg->flags & BTRFS_BLOCK_GROUP_DATA)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "551842446ed695641a00782cd118cbb064a416a1",
      "candidate_info": {
        "commit_hash": "551842446ed695641a00782cd118cbb064a416a1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/551842446ed695641a00782cd118cbb064a416a1",
        "files": [
          "net/mac80211/mesh.c"
        ],
        "message": "mac80211: mesh: fix RCU warning\n\nifmsh->csa is an RCU-protected pointer. The writer context\nin ieee80211_mesh_finish_csa() is already mutually\nexclusive with wdev->sdata.mtx, but the RCU checker did\nnot know this. Use rcu_dereference_protected() to avoid a\nwarning.\n\nfixes the following warning:\n\n[   12.519089] =============================\n[   12.520042] WARNING: suspicious RCU usage\n[   12.520652] 5.1.0-rc7-wt+ #16 Tainted: G        W\n[   12.521409] -----------------------------\n[   12.521972] net/mac80211/mesh.c:1223 suspicious rcu_dereference_check() usage!\n[   12.522928] other info that might help us debug this:\n[   12.523984] rcu_scheduler_active = 2, debug_locks = 1\n[   12.524855] 5 locks held by kworker/u8:2/152:\n[   12.525438]  #0: 00000000057be08c ((wq_completion)phy0){+.+.}, at: process_one_work+0x1a2/0x620\n[   12.526607]  #1: 0000000059c6b07a ((work_completion)(&sdata->csa_finalize_work)){+.+.}, at: process_one_work+0x1a2/0x620\n[   12.528001]  #2: 00000000f184ba7d (&wdev->mtx){+.+.}, at: ieee80211_csa_finalize_work+0x2f/0x90\n[   12.529116]  #3: 00000000831a1f54 (&local->mtx){+.+.}, at: ieee80211_csa_finalize_work+0x47/0x90\n[   12.530233]  #4: 00000000fd06f988 (&local->chanctx_mtx){+.+.}, at: ieee80211_csa_finalize_work+0x51/0x90\n\nSigned-off-by: Thomas Pedersen <thomas@eero.com>\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
        "before_after_code_files": [
          "net/mac80211/mesh.c||net/mac80211/mesh.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/mac80211/mesh.c||net/mac80211/mesh.c": [
          "File: net/mac80211/mesh.c -> net/mac80211/mesh.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1220:  ifmsh->chsw_ttl = 0;",
          "1224:  RCU_INIT_POINTER(ifmsh->csa, NULL);",
          "1225:  if (tmp_csa_settings)",
          "1226:   kfree_rcu(tmp_csa_settings, rcu_head);",
          "",
          "[Removed Lines]",
          "1223:  tmp_csa_settings = rcu_dereference(ifmsh->csa);",
          "",
          "[Added Lines]",
          "1223:  tmp_csa_settings = rcu_dereference_protected(ifmsh->csa,",
          "1224:          lockdep_is_held(&sdata->wdev.mtx));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1242:  struct mesh_csa_settings *tmp_csa_settings;",
          "1243:  int ret = 0;",
          "1245:  tmp_csa_settings = kmalloc(sizeof(*tmp_csa_settings),",
          "1246:        GFP_ATOMIC);",
          "1247:  if (!tmp_csa_settings)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246:  lockdep_assert_held(&sdata->wdev.mtx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef9740204051d0e00f5402fe96cf3a43ddd2bbbf",
      "candidate_info": {
        "commit_hash": "ef9740204051d0e00f5402fe96cf3a43ddd2bbbf",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ef9740204051d0e00f5402fe96cf3a43ddd2bbbf",
        "files": [
          "arch/powerpc/kvm/book3s_xive.c"
        ],
        "message": "KVM: PPC: Book3S HV: XIVE: Do not clear IRQ data of passthrough interrupts\n\nThe passthrough interrupts are defined at the host level and their IRQ\ndata should not be cleared unless specifically deconfigured (shutdown)\nby the host. They differ from the IPI interrupts which are allocated\nby the XIVE KVM device and reserved to the guest usage only.\n\nThis fixes a host crash when destroying a VM in which a PCI adapter\nwas passed-through. In this case, the interrupt is cleared and freed\nby the KVM device and then shutdown by vfio at the host level.\n\n[ 1007.360265] BUG: Kernel NULL pointer dereference at 0x00000d00\n[ 1007.360285] Faulting instruction address: 0xc00000000009da34\n[ 1007.360296] Oops: Kernel access of bad area, sig: 7 [#1]\n[ 1007.360303] LE PAGE_SIZE=64K MMU=Radix MMU=Hash SMP NR_CPUS=2048 NUMA PowerNV\n[ 1007.360314] Modules linked in: vhost_net vhost iptable_mangle ipt_MASQUERADE iptable_nat nf_nat xt_conntrack nf_conntrack nf_defrag_ipv4 ipt_REJECT nf_reject_ipv4 tun bridge stp llc kvm_hv kvm xt_tcpudp iptable_filter squashfs fuse binfmt_misc vmx_crypto ib_iser rdma_cm iw_cm ib_cm libiscsi scsi_transport_iscsi nfsd ip_tables x_tables autofs4 btrfs zstd_decompress zstd_compress lzo_compress raid10 raid456 async_raid6_recov async_memcpy async_pq async_xor async_tx xor raid6_pq multipath mlx5_ib ib_uverbs ib_core crc32c_vpmsum mlx5_core\n[ 1007.360425] CPU: 9 PID: 15576 Comm: CPU 18/KVM Kdump: loaded Not tainted 5.1.0-gad7e7d0ef #4\n[ 1007.360454] NIP:  c00000000009da34 LR: c00000000009e50c CTR: c00000000009e5d0\n[ 1007.360482] REGS: c000007f24ccf330 TRAP: 0300   Not tainted  (5.1.0-gad7e7d0ef)\n[ 1007.360500] MSR:  900000000280b033 <SF,HV,VEC,VSX,EE,FP,ME,IR,DR,RI,LE>  CR: 24002484  XER: 00000000\n[ 1007.360532] CFAR: c00000000009da10 DAR: 0000000000000d00 DSISR: 00080000 IRQMASK: 1\n[ 1007.360532] GPR00: c00000000009e62c c000007f24ccf5c0 c000000001510600 c000007fe7f947c0\n[ 1007.360532] GPR04: 0000000000000d00 0000000000000000 0000000000000000 c000005eff02d200\n[ 1007.360532] GPR08: 0000000000400000 0000000000000000 0000000000000000 fffffffffffffffd\n[ 1007.360532] GPR12: c00000000009e5d0 c000007fffff7b00 0000000000000031 000000012c345718\n[ 1007.360532] GPR16: 0000000000000000 0000000000000008 0000000000418004 0000000000040100\n[ 1007.360532] GPR20: 0000000000000000 0000000008430000 00000000003c0000 0000000000000027\n[ 1007.360532] GPR24: 00000000000000ff 0000000000000000 00000000000000ff c000007faa90d98c\n[ 1007.360532] GPR28: c000007faa90da40 00000000000fe040 ffffffffffffffff c000007fe7f947c0\n[ 1007.360689] NIP [c00000000009da34] xive_esb_read+0x34/0x120\n[ 1007.360706] LR [c00000000009e50c] xive_do_source_set_mask.part.0+0x2c/0x50\n[ 1007.360732] Call Trace:\n[ 1007.360738] [c000007f24ccf5c0] [c000000000a6383c] snooze_loop+0x15c/0x270 (unreliable)\n[ 1007.360775] [c000007f24ccf5f0] [c00000000009e62c] xive_irq_shutdown+0x5c/0xe0\n[ 1007.360795] [c000007f24ccf630] [c00000000019e4a0] irq_shutdown+0x60/0xe0\n[ 1007.360813] [c000007f24ccf660] [c000000000198c44] __free_irq+0x3a4/0x420\n[ 1007.360831] [c000007f24ccf700] [c000000000198dc8] free_irq+0x78/0xe0\n[ 1007.360849] [c000007f24ccf730] [c00000000096c5a8] vfio_msi_set_vector_signal+0xa8/0x350\n[ 1007.360878] [c000007f24ccf7f0] [c00000000096c938] vfio_msi_set_block+0xe8/0x1e0\n[ 1007.360899] [c000007f24ccf850] [c00000000096cae0] vfio_msi_disable+0xb0/0x110\n[ 1007.360912] [c000007f24ccf8a0] [c00000000096cd04] vfio_pci_set_msi_trigger+0x1c4/0x3d0\n[ 1007.360922] [c000007f24ccf910] [c00000000096d910] vfio_pci_set_irqs_ioctl+0xa0/0x170\n[ 1007.360941] [c000007f24ccf930] [c00000000096b400] vfio_pci_disable+0x80/0x5e0\n[ 1007.360963] [c000007f24ccfa10] [c00000000096b9bc] vfio_pci_release+0x5c/0x90\n[ 1007.360991] [c000007f24ccfa40] [c000000000963a9c] vfio_device_fops_release+0x3c/0x70\n[ 1007.361012] [c000007f24ccfa70] [c0000000003b5668] __fput+0xc8/0x2b0\n[ 1007.361040] [c000007f24ccfac0] [c0000000001409b0] task_work_run+0x140/0x1b0\n[ 1007.361059] [c000007f24ccfb20] [c000000000118f8c] do_exit+0x3ac/0xd00\n[ 1007.361076] [c000007f24ccfc00] [c0000000001199b0] do_group_exit+0x60/0x100\n[ 1007.361094] [c000007f24ccfc40] [c00000000012b514] get_signal+0x1a4/0x8f0\n[ 1007.361112] [c000007f24ccfd30] [c000000000021cc8] do_notify_resume+0x1a8/0x430\n[ 1007.361141] [c000007f24ccfe20] [c00000000000e444] ret_from_except_lite+0x70/0x74\n[ 1007.361159] Instruction dump:\n[ 1007.361175] 38422c00 e9230000 712a0004 41820010 548a2036 7d442378 78840020 71290020\n[ 1007.361194] 4082004c e9230010 7c892214 7c0004ac <e9240000> 0c090000 4c00012c 792a0022\n\nCc: stable@vger.kernel.org # v4.12+\nFixes: 5af50993850a (\"KVM: PPC: Book3S HV: Native usage of the XIVE interrupt controller\")\nSigned-off-by: C\u00e9dric Le Goater <clg@kaod.org>\nSigned-off-by: Greg Kurz <groug@kaod.org>\nSigned-off-by: Paul Mackerras <paulus@ozlabs.org>",
        "before_after_code_files": [
          "arch/powerpc/kvm/book3s_xive.c||arch/powerpc/kvm/book3s_xive.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/powerpc/kvm/book3s_xive.c||arch/powerpc/kvm/book3s_xive.c": [
          "File: arch/powerpc/kvm/book3s_xive.c -> arch/powerpc/kvm/book3s_xive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1828: {",
          "1829:  xive_vm_esb_load(xd, XIVE_ESB_SET_PQ_01);",
          "1830:  xive_native_configure_irq(hw_num, 0, MASKED, 0);",
          "1832: }",
          "1834: void kvmppc_xive_free_sources(struct kvmppc_xive_src_block *sb)",
          "",
          "[Removed Lines]",
          "1831:  xive_cleanup_irq_data(xd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1842:    continue;",
          "1844:   kvmppc_xive_cleanup_irq(state->ipi_number, &state->ipi_data);",
          "1845:   xive_native_free_irq(state->ipi_number);",
          "1848:   if (state->pt_number)",
          "1849:    kvmppc_xive_cleanup_irq(state->pt_number, state->pt_data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1844:   xive_cleanup_irq_data(&state->ipi_data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "433068aa88cc1046db0adf0d158d98f59d846bbc",
      "candidate_info": {
        "commit_hash": "433068aa88cc1046db0adf0d158d98f59d846bbc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/433068aa88cc1046db0adf0d158d98f59d846bbc",
        "files": [
          "drivers/leds/led-core.c",
          "drivers/leds/trigger/ledtrig-timer.c"
        ],
        "message": "leds: avoid flush_work in atomic context\n\nIt turns out that various triggers use led_blink_setup() from atomic\ncontext, so we can't do a flush_work there. Flush is still needed for\nslow LEDs, but we can move it to sysfs code where it is safe.\n\n    WARNING: inconsistent lock state\n    5.2.0-rc1 #1 Tainted: G        W\n    --------------------------------\n    inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.\n    swapper/1/0 [HC0[0]:SC1[1]:HE1:SE0] takes:\n    000000006e30541b\n    ((work_completion)(&led_cdev->set_brightness_work)){+.?.}, at:\n    +__flush_work+0x3b/0x38a\n    {SOFTIRQ-ON-W} state was registered at:\n      lock_acquire+0x146/0x1a1\n     __flush_work+0x5b/0x38a\n     flush_work+0xb/0xd\n     led_blink_setup+0x1e/0xd3\n     led_blink_set+0x3f/0x44\n     tpt_trig_timer+0xdb/0x106\n     ieee80211_mod_tpt_led_trig+0xed/0x112\n\nFixes: 0db37915d912 (\"leds: avoid races with workqueue\")\nSigned-off-by: Pavel Machek <pavel@ucw.cz>\nTested-by: Hugh Dickins <hughd@google.com>\nSigned-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>",
        "before_after_code_files": [
          "drivers/leds/led-core.c||drivers/leds/led-core.c",
          "drivers/leds/trigger/ledtrig-timer.c||drivers/leds/trigger/ledtrig-timer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/leds/led-core.c||drivers/leds/led-core.c": [
          "File: drivers/leds/led-core.c -> drivers/leds/led-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:        unsigned long *delay_on,",
          "165:        unsigned long *delay_off)",
          "166: {",
          "172:  if (!test_bit(LED_BLINK_ONESHOT, &led_cdev->work_flags) &&",
          "173:      led_cdev->blink_set &&",
          "174:      !led_cdev->blink_set(led_cdev, delay_on, delay_off))",
          "",
          "[Removed Lines]",
          "171:  flush_work(&led_cdev->set_brightness_work);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "drivers/leds/trigger/ledtrig-timer.c||drivers/leds/trigger/ledtrig-timer.c": [
          "File: drivers/leds/trigger/ledtrig-timer.c -> drivers/leds/trigger/ledtrig-timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   led_cdev->flags &= ~LED_INIT_DEFAULT_TRIGGER;",
          "114:  }",
          "116:  led_blink_set(led_cdev, &led_cdev->blink_delay_on,",
          "117:         &led_cdev->blink_delay_off);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:  flush_work(&led_cdev->set_brightness_work);",
          "",
          "---------------"
        ]
      }
    }
  ]
}