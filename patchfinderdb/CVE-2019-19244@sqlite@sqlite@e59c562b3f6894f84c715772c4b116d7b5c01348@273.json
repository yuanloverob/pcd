{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "974b24896ac3a1c2f5862c69539a269b7b0a07b4",
      "candidate_info": {
        "commit_hash": "974b24896ac3a1c2f5862c69539a269b7b0a07b4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/974b24896ac3a1c2f5862c69539a269b7b0a07b4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c"
        ],
        "message": "Fix a potential NULL pointer dereference that can occur in ALTER TABLE following an OOM.  Test case in TH3.\n\nFossilOrigin-Name: ea50815bf80ab0d36891518f209acbcd3d6d8d84529741bffd4e841874c78aff",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1a1a59c6c570879c8f318bbc132103c0285088ba233dd8c32e049b86419347b0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1375:   int i;",
          "1376:   RenameCtx *p = pWalker->u.pRename;",
          "1377:   SrcList *pSrc = pSelect->pSrc;",
          "1378:   for(i=0; i<pSrc->nSrc; i++){",
          "1379:     struct SrcList_item *pItem = &pSrc->a[i];",
          "1380:     if( pItem->pTab==p->pTab ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1378:   if( pSrc==0 ){",
          "1379:     assert( pWalker->pParse->db->mallocFailed );",
          "1380:     return WRC_Abort;",
          "1381:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "012b15e2d7dfc7cc443a00e2d977c17d90160745",
      "candidate_info": {
        "commit_hash": "012b15e2d7dfc7cc443a00e2d977c17d90160745",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/012b15e2d7dfc7cc443a00e2d977c17d90160745",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c",
          "test/stat.test"
        ],
        "message": "Get the aggregate=TRUE feature working on the DBSTAT virtual  table.\n\nFossilOrigin-Name: 16fef3db063830884de46d53a289f637a7204fe84fcdee7ea81dbb8bca578952",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c",
          "test/stat.test||test/stat.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b5722f0fe666b99677e5f333dd8413aefb9ace7a461d74f6558f0ac53768719",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: typedef struct StatTable StatTable;",
          "",
          "[Removed Lines]",
          "59: #define VTAB_SCHEMA                                                          \\",
          "60:   \"CREATE TABLE xx( \"                                                        \\",
          "61:   \"  name       TEXT,\"          /*  0 Name of table or index */              \\",
          "62:   \"  path       TEXT,\"          /*  1 Path to page from root */              \\",
          "63:   \"  pageno     INTEGER,\"       /*  2 Page number */                         \\",
          "64:   \"  pagetype   TEXT,\"          /*  3 'internal', 'leaf' or 'overflow' */    \\",
          "65:   \"  ncell      INTEGER,\"       /*  4 Cells on page (0 for overflow) */      \\",
          "66:   \"  payload    INTEGER,\"       /*  5 Bytes of payload on this page */       \\",
          "67:   \"  unused     INTEGER,\"       /*  6 Bytes of unused space on this page */  \\",
          "68:   \"  mx_payload INTEGER,\"       /*  7 Largest payload size of all cells */   \\",
          "69:   \"  pgoffset   INTEGER,\"       /*  8 Offset of page in file */              \\",
          "70:   \"  pgsize     INTEGER,\"       /*  9 Size of the page */                    \\",
          "71:   \"  schema     TEXT HIDDEN,\"   /* 10 Database schema being analyzed */      \\",
          "72:   \"  aggregate  BOOLEAN HIDDEN\" /* 11 aggregate info for each table */       \\",
          "73:   \");\"",
          "",
          "[Added Lines]",
          "59: static const char zDbstatSchema[] =",
          "60:   \"CREATE TABLE x(\"",
          "73:   \")\"",
          "74: ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   }else{",
          "166:     iDb = 0;",
          "167:   }",
          "169:   if( rc==SQLITE_OK ){",
          "170:     pTab = (StatTable *)sqlite3_malloc64(sizeof(StatTable));",
          "171:     if( pTab==0 ) rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "168:   rc = sqlite3_declare_vtab(db, VTAB_SCHEMA);",
          "",
          "[Added Lines]",
          "170:   rc = sqlite3_declare_vtab(db, zDbstatSchema);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:   pCsr->isEof = 0;",
          "324: }",
          "329: static int statClose(sqlite3_vtab_cursor *pCursor){",
          "330:   StatCursor *pCsr = (StatCursor *)pCursor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: static void statResetCounts(StatCursor *pCsr){",
          "330:   pCsr->nCell = 0;",
          "331:   pCsr->nMxPayload = 0;",
          "332:   pCsr->nUnused = 0;",
          "333:   pCsr->nPayload = 0;",
          "334:   pCsr->szPage = 0;",
          "335:   pCsr->nPage = 0;",
          "336: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "481:   sqlite3_file *fd;",
          "482:   sqlite3_int64 x[2];",
          "491:   fd = sqlite3PagerFile(pPager);",
          "492:   x[0] = pCsr->iPageno;",
          "493:   if( sqlite3OsFileControl(fd, 230440, &x)==SQLITE_OK ){",
          "494:     pCsr->iOffset = x[0];",
          "496:   }",
          "497: }",
          "502: static int statNext(sqlite3_vtab_cursor *pCursor){",
          "503:   int rc;",
          "",
          "[Removed Lines]",
          "485:   pCsr->szPage = sqlite3BtreeGetPageSize(pBt);",
          "486:   pCsr->iOffset = (i64)pCsr->szPage * (pCsr->iPageno - 1);",
          "495:     pCsr->szPage = (int)x[1];",
          "",
          "[Added Lines]",
          "506:     pCsr->szPage += x[1];",
          "507:   }else{",
          "509:     pCsr->szPage += sqlite3BtreeGetPageSize(pBt);",
          "510:     pCsr->iOffset = (i64)pCsr->szPage * (pCsr->iPageno - 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "514: statNextRestart:",
          "515:   if( pCsr->aPage[0].pPg==0 ){",
          "516:     rc = sqlite3_step(pCsr->pStmt);",
          "517:     if( rc==SQLITE_ROW ){",
          "518:       int nPage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:     statResetCounts(pCsr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "525:       rc = sqlite3PagerGet(pPager, iRoot, &pCsr->aPage[0].pPg, 0);",
          "526:       pCsr->aPage[0].iPgno = iRoot;",
          "527:       pCsr->aPage[0].iCell = 0;",
          "529:       pCsr->iPage = 0;",
          "531:     }else{",
          "532:       pCsr->isEof = 1;",
          "533:       return sqlite3_reset(pCsr->pStmt);",
          "534:     }",
          "535:   }else{",
          "538:     StatPage *p = &pCsr->aPage[pCsr->iPage];",
          "540:     while( p->iCell<p->nCell ){",
          "541:       StatCell *pCell = &p->aCell[p->iCell];",
          "544:         sqlite3BtreeEnter(pBt);",
          "545:         nUsable = sqlite3BtreeGetPageSize(pBt) -",
          "546:                         sqlite3BtreeGetReserveNoMutex(pBt);",
          "547:         sqlite3BtreeLeave(pBt);",
          "556:         if( pCell->iOvfl<pCell->nOvfl-1 ){",
          "559:         }else{",
          "562:         }",
          "563:         pCell->iOvfl++;",
          "566:       }",
          "567:       if( p->iRightChildPg ) break;",
          "568:       p->iCell++;",
          "",
          "[Removed Lines]",
          "528:       pCsr->aPage[0].zPath = z = sqlite3_mprintf(\"/\");",
          "530:       if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "542:       if( pCell->iOvfl<pCell->nOvfl ){",
          "543:         int nUsable;",
          "548:         pCsr->zName = (char *)sqlite3_column_text(pCsr->pStmt, 0);",
          "549:         pCsr->iPageno = pCell->aOvfl[pCell->iOvfl];",
          "550:         pCsr->zPagetype = \"overflow\";",
          "551:         pCsr->nCell = 0;",
          "552:         pCsr->nMxPayload = 0;",
          "553:         pCsr->zPath = z = sqlite3_mprintf(",
          "554:             \"%s%.3x+%.6x\", p->zPath, p->iCell, pCell->iOvfl",
          "555:         );",
          "557:           pCsr->nUnused = 0;",
          "558:           pCsr->nPayload = nUsable - 4;",
          "560:           pCsr->nPayload = pCell->nLastOvfl;",
          "561:           pCsr->nUnused = nUsable - 4 - pCsr->nPayload;",
          "564:         statSizeAndOffset(pCsr);",
          "565:         return z==0 ? SQLITE_NOMEM_BKPT : SQLITE_OK;",
          "",
          "[Added Lines]",
          "547:       if( !pCsr->isAgg ){",
          "548:         pCsr->aPage[0].zPath = z = sqlite3_mprintf(\"/\");",
          "549:         if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "550:       }",
          "552:       pCsr->nPage = 1;",
          "560:     if( !pCsr->isAgg ) statResetCounts(pCsr);",
          "563:       while( pCell->iOvfl<pCell->nOvfl ){",
          "564:         int nUsable, iOvfl;",
          "569:         pCsr->nPage++;",
          "570:         statSizeAndOffset(pCsr);",
          "572:           pCsr->nPayload += nUsable - 4;",
          "574:           pCsr->nPayload += pCell->nLastOvfl;",
          "575:           pCsr->nUnused += nUsable - 4 - pCell->nLastOvfl;",
          "577:         iOvfl = pCell->iOvfl;",
          "579:         if( !pCsr->isAgg ){",
          "580:           pCsr->zName = (char *)sqlite3_column_text(pCsr->pStmt, 0);",
          "581:           pCsr->iPageno = pCell->aOvfl[iOvfl];",
          "582:           pCsr->zPagetype = \"overflow\";",
          "583:           pCsr->zPath = z = sqlite3_mprintf(",
          "584:               \"%s%.3x+%.6x\", p->zPath, p->iCell, iOvfl",
          "585:           );",
          "586:           return z==0 ? SQLITE_NOMEM_BKPT : SQLITE_OK;",
          "587:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "571:     if( !p->iRightChildPg || p->iCell>p->nCell ){",
          "572:       statClearPage(p);",
          "576:     }",
          "577:     pCsr->iPage++;",
          "",
          "[Removed Lines]",
          "573:       if( pCsr->iPage==0 ) return statNext(pCursor);",
          "574:       pCsr->iPage--;",
          "",
          "[Added Lines]",
          "595:       if( pCsr->iPage>0 ){",
          "596:         pCsr->iPage--;",
          "597:       }else if( pCsr->isAgg ){",
          "600:         return SQLITE_OK;",
          "601:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "587:       p[1].iPgno = p->aCell[p->iCell].iChildPg;",
          "588:     }",
          "589:     rc = sqlite3PagerGet(pPager, p[1].iPgno, &p[1].pPg, 0);",
          "590:     p[1].iCell = 0;",
          "592:     p->iCell++;",
          "594:   }",
          "",
          "[Removed Lines]",
          "591:     p[1].zPath = z = sqlite3_mprintf(\"%s%.3x/\", p->zPath, p->iCell);",
          "593:     if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Added Lines]",
          "617:     pCsr->nPage++;",
          "619:     if( !pCsr->isAgg ){",
          "620:       p[1].zPath = z = sqlite3_mprintf(\"%s%.3x/\", p->zPath, p->iCell);",
          "621:       if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "622:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "620:           pCsr->zPagetype = \"corrupted\";",
          "621:           break;",
          "622:       }",
          "628:       nPayload = 0;",
          "629:       for(i=0; i<p->nCell; i++){",
          "630:         nPayload += p->aCell[i].nLocal;",
          "631:       }",
          "633:     }",
          "634:   }",
          "",
          "[Removed Lines]",
          "623:       pCsr->nCell = p->nCell;",
          "624:       pCsr->nUnused = p->nUnused;",
          "625:       pCsr->nMxPayload = p->nMxPayload;",
          "626:       pCsr->zPath = z = sqlite3_mprintf(\"%s\", p->zPath);",
          "627:       if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "632:       pCsr->nPayload = nPayload;",
          "",
          "[Added Lines]",
          "653:       pCsr->nCell += p->nCell;",
          "654:       pCsr->nUnused += p->nUnused;",
          "655:       if( p->nMxPayload>pCsr->nMxPayload ) pCsr->nMxPayload = p->nMxPayload;",
          "656:       if( !pCsr->isAgg ){",
          "657:         pCsr->zPath = z = sqlite3_mprintf(\"%s\", p->zPath);",
          "658:         if( z==0 ) rc = SQLITE_NOMEM_BKPT;",
          "659:       }",
          "664:       pCsr->nPayload += nPayload;",
          "669:       if( pCsr->isAgg ) goto statNextRestart;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "722:       sqlite3_result_text(ctx, pCsr->zName, -1, SQLITE_TRANSIENT);",
          "723:       break;",
          "726:       break;",
          "729:       break;",
          "732:       break;",
          "734:       sqlite3_result_int(ctx, pCsr->nCell);",
          "",
          "[Removed Lines]",
          "725:       sqlite3_result_text(ctx, pCsr->zPath, -1, SQLITE_TRANSIENT);",
          "728:       sqlite3_result_int64(ctx, pCsr->iPageno);",
          "731:       sqlite3_result_text(ctx, pCsr->zPagetype, -1, SQLITE_STATIC);",
          "",
          "[Added Lines]",
          "762:       if( !pCsr->isAgg ){",
          "763:         sqlite3_result_text(ctx, pCsr->zPath, -1, SQLITE_TRANSIENT);",
          "764:       }",
          "767:       if( pCsr->isAgg ){",
          "768:         sqlite3_result_int64(ctx, pCsr->nPage);",
          "769:       }else{",
          "770:         sqlite3_result_int64(ctx, pCsr->iPageno);",
          "771:       }",
          "774:       if( !pCsr->isAgg ){",
          "775:         sqlite3_result_text(ctx, pCsr->zPagetype, -1, SQLITE_STATIC);",
          "776:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "743:       sqlite3_result_int(ctx, pCsr->nMxPayload);",
          "744:       break;",
          "747:       break;",
          "749:       sqlite3_result_int(ctx, pCsr->szPage);",
          "",
          "[Removed Lines]",
          "746:       sqlite3_result_int64(ctx, pCsr->iOffset);",
          "",
          "[Added Lines]",
          "791:       if( !pCsr->isAgg ){",
          "792:         sqlite3_result_int64(ctx, pCsr->iOffset);",
          "793:       }",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   t3 /00f/ 23 leaf 2 738 268 370                         \\",
          "135: ]",
          "137: # With every index entry overflowing, make sure no pages are missed",
          "138: # (other than the locking page which is 64 in this test build.)",
          "139: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: do_execsql_test stat-2.1agg {",
          "138:   SELECT * FROM dbstat WHERE aggregate=TRUE ORDER BY name;",
          "139: } [list \\",
          "140:   sqlite_autoindex_t3_1 {}  5 {} 32  3898 1065 132 {}  5120 \\",
          "141:   sqlite_master         {}  1 {}  2    84  824  49 {}  1024 \\",
          "142:   t3                    {} 17 {} 47 11188 5815 370 {} 17408 \\",
          "143: ]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:   t4 /000+000006 18 overflow 0 1020 0 0      \\",
          "172: ]",
          "174: do_execsql_test stat-4.1 {",
          "175:   CREATE TABLE t5(x);",
          "176:   CREATE INDEX i5 ON t5(x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: do_execsql_test stat-3.2 {",
          "183:   SELECT *, '|' FROM dbstat WHERE aggregate=TRUE ORDER BY name;",
          "184: } [list \\",
          "185:   i4            {} 9 {} 1 7782 1386 7782 {} 9216 | \\",
          "186:   sqlite_master {} 1 {} 2   74  834   40 {} 1024 | \\",
          "187:   t4            {} 8 {} 1 7780  367 7780 {} 8192 | \\",
          "188: ]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:   t1 /001+000000 4 overflow 0 1020 0 0    \\",
          "202: ]",
          "204: do_catchsql_test stat-6.1 {",
          "205:   CREATE VIRTUAL TABLE temp.s2 USING dbstat(mainx);",
          "206: } {1 {no such database: mainx}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: do_execsql_test stat-5.20 {",
          "222:   SELECT name, quote(path), pageno, quote(pagetype), ncell, payload,",
          "223:          unused, mx_payload, '|' FROM dbstat('main',1);",
          "224: } {sqlite_master NULL 1 NULL 1 34 878 34 | tx NULL 1 NULL 0 0 1016 0 |}",
          "225: do_execsql_test stat-5.21 {",
          "226:   SELECT name, quote(path), pageno, quote(pagetype), ncell, payload,",
          "227:          unused, mx_payload, '|' FROM dbstat('aux1',1);",
          "228: } {sqlite_master NULL 1 NULL 1 34 878 34 | t1 NULL 3 NULL 2 3033 5 1517 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa243aa7cdf69b1e5bdecb4358517aa10681c235",
      "candidate_info": {
        "commit_hash": "aa243aa7cdf69b1e5bdecb4358517aa10681c235",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aa243aa7cdf69b1e5bdecb4358517aa10681c235",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/btree02.test"
        ],
        "message": "Modify the btree02.test module so that it does not depend on whether TCL interprets a value as a string or as an integer.\n\nFossilOrigin-Name: d9e4f9574659c6285deba3dca68eca9989e615971cea3a901ffcda12fb4ee36f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/btree02.test||test/btree02.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ff45f9dd69fe1e1c7875e5bb73ac3dde2a31746475d3765cda9233f8e06e26ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/btree02.test||test/btree02.test": [
          "File: test/btree02.test -> test/btree02.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: do_execsql_test btree02-100 {",
          "22:   CREATE TABLE t1(a TEXT, ax INTEGER, b INT, PRIMARY KEY(a,ax)) WITHOUT ROWID;",
          "23:   WITH RECURSIVE c(i) AS (VALUES(1) UNION ALL SELECT i+1 FROM c WHERE i<10)",
          "25:   CREATE INDEX t1a ON t1(a);",
          "26:   CREATE TABLE t2(x,y);",
          "27:   CREATE TABLE t3(cnt);",
          "",
          "[Removed Lines]",
          "24:     INSERT INTO t1(a,ax,b) SELECT printf('%02x',i), random(), i FROM c;",
          "",
          "[Added Lines]",
          "24:     INSERT INTO t1(a,ax,b) SELECT printf('%02x',i+160), random(), i FROM c;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     INSERT INTO t3(cnt) SELECT i FROM c;",
          "30:   SELECT count(*) FROM t1;",
          "31: } {10}",
          "32: do_test btree02-110 {",
          "33:   db eval BEGIN",
          "34:   set i 0",
          "35:   db eval {SELECT a, ax, b, cnt FROM t1 CROSS JOIN t3 WHERE b IS NOT NULL} {",
          "38:     db eval {INSERT INTO t2(x,y) VALUES($b,$cnt)}",
          "39:     # puts \"a,b,cnt = ($a,$b,$cnt)\"",
          "40:     incr i",
          "41:     if {$i%2==1} {",
          "42:       set bx [expr {$b+1000}]",
          "44:       db eval {INSERT INTO t1(a,ax,b) VALUES(printf('(%s)',$a),random(),$bx)}",
          "45:     } else {",
          "46:       # puts \"DELETE a=$a\"",
          "47:       db eval {DELETE FROM t1 WHERE a=$a}",
          "48:     }",
          "49:     db eval {COMMIT; BEGIN}",
          "50:   }",
          "51:   db one {COMMIT; SELECT count(*) FROM t1;}",
          "54: finish_test",
          "",
          "[Removed Lines]",
          "36:     if {$a==\"\"} {set a 0}",
          "37:     if {$b==\"\"} {set b 0}",
          "43:       # puts \"INSERT ($a),$bx\"",
          "52: } {27}",
          "",
          "[Added Lines]",
          "33: proc showt1 {} {",
          "34:   puts -nonewline \"t1: \"",
          "35:   puts [db eval {SELECT printf('(%s,%s)',quote(a),quote(b)) FROM t1}]",
          "36: }",
          "41:   # showt1",
          "43:     if {$a==\"\"} continue",
          "49:       #  puts \"INSERT ($a),$bx\"",
          "51:       # showt1",
          "55:       # showt1",
          "60: } {10}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2eb2ca839185e9bd5ef57da7078adecbd2e56994",
      "candidate_info": {
        "commit_hash": "2eb2ca839185e9bd5ef57da7078adecbd2e56994",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2eb2ca839185e9bd5ef57da7078adecbd2e56994",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbesort.c"
        ],
        "message": "Avoid a sanitizer error (pointer arithmatic overflow) in vdbesort.c.\n\nFossilOrigin-Name: af61a2fc45a0fa1277d7453779238b77de4c298a9f60714b7dc62ddca5874f80",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbesort.c||src/vdbesort.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4de4480ffdea1e923c4b964692ccde92d713c8b6c056bb04bddf1ff55ee891ec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1829:     if( nMin>pSorter->nMemory ){",
          "1830:       u8 *aNew;",
          "1832:       sqlite3_int64 nNew = 2 * (sqlite3_int64)pSorter->nMemory;",
          "1833:       while( nNew < nMin ) nNew = nNew*2;",
          "1834:       if( nNew > pSorter->mxPmaSize ) nNew = pSorter->mxPmaSize;",
          "1835:       if( nNew < nMin ) nNew = nMin;",
          "1837:       aNew = sqlite3Realloc(pSorter->list.aMemory, nNew);",
          "1838:       if( !aNew ) return SQLITE_NOMEM_BKPT;",
          "1840:       pSorter->list.aMemory = aNew;",
          "1841:       pSorter->nMemory = nNew;",
          "1842:     }",
          "",
          "[Removed Lines]",
          "1831:       int iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;",
          "1839:       pSorter->list.pList = (SorterRecord*)&aNew[iListOff];",
          "",
          "[Added Lines]",
          "1832:       int iListOff = -1;",
          "1833:       if( pSorter->list.pList ){",
          "1834:         iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;",
          "1835:       }",
          "1841:       if( iListOff>=0 ){",
          "1842:         pSorter->list.pList = (SorterRecord*)&aNew[iListOff];",
          "1843:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bab6f2b4d4acc11ed8b4f420b84bcdc7d95799c",
      "candidate_info": {
        "commit_hash": "6bab6f2b4d4acc11ed8b4f420b84bcdc7d95799c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6bab6f2b4d4acc11ed8b4f420b84bcdc7d95799c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "test/select3.test"
        ],
        "message": "Disable the optimization where a REAL value with no fractional part is stored as an INTEGER when the integer uses as much space as the real value it proposes to stand in for (8 bytes).  This avoids corner cases of comparing integers against real values that are beyond the resolution of an IEEE 754 double.  Fix for ticket [6c1d3febc00b22d457c78c2]\n\nFossilOrigin-Name: 9b0915272f4d4052aa31e9297424a7db9a0234b676e8e2a44c3f2dc54236705a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/select3.test||test/select3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 20f06bf2e659212a68dcf138e444da7bd4220548ec15a97cfd7eb82e028b3630",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3458:     if( u<=2147483647 ){ *pLen = 4; return 4; }",
          "3459:     if( u<=MAX_6BYTE ){ *pLen = 6; return 5; }",
          "3461:     return 6;",
          "3462:   }",
          "3463:   if( flags&MEM_Real ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3463:     if( flags&MEM_IntReal ){",
          "3467:       pMem->u.r = (double)pMem->u.i;",
          "3468:       pMem->flags &= ~MEM_IntReal;",
          "3469:       pMem->flags |= MEM_Real;",
          "3470:       return 7;",
          "3471:     }",
          "",
          "---------------"
        ],
        "test/select3.test||test/select3.test": [
          "File: test/select3.test -> test/select3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:   }",
          "262: } {real}",
          "264: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: # 2019-05-09 ticket https://www.sqlite.org/src/tktview/6c1d3febc00b22d457c7",
          "265: #",
          "266: unset -nocomplain x",
          "267: foreach {id x} {",
          "268:   100 127",
          "269:   101 128",
          "270:   102 -127",
          "271:   103 -128",
          "272:   104 -129",
          "273:   110 32767",
          "274:   111 32768",
          "275:   112 -32767",
          "276:   113 -32768",
          "277:   114 -32769",
          "278:   120 2147483647",
          "279:   121 2147483648",
          "280:   122 -2147483647",
          "281:   123 -2147483648",
          "282:   124 -2147483649",
          "283:   130 140737488355327",
          "284:   131 140737488355328",
          "285:   132 -140737488355327",
          "286:   133 -140737488355328",
          "287:   134 -140737488355329",
          "288:   140 9223372036854775807",
          "289:   141 -9223372036854775807",
          "290:   142 -9223372036854775808",
          "291:   143 9223372036854775806",
          "292:   144 9223372036854775805",
          "293:   145 -9223372036854775806",
          "294:   146 -9223372036854775805",
          "296: } {",
          "297:   set x [expr {$x+0}]",
          "298:   do_execsql_test select3-8.$id {",
          "299:      DROP TABLE IF EXISTS t1;",
          "300:      CREATE TABLE t1 (c0, c1 REAL PRIMARY KEY);",
          "301:      INSERT INTO t1(c0, c1) VALUES (0, $x), (0, 0);",
          "302:      UPDATE t1 SET c0 = NULL;",
          "303:      UPDATE OR REPLACE t1 SET c1 = 1;",
          "304:      SELECT DISTINCT * FROM t1 WHERE (t1.c0 IS NULL);",
          "305:      PRAGMA integrity_check;",
          "306:   } {{} 1.0 ok}",
          "307: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}