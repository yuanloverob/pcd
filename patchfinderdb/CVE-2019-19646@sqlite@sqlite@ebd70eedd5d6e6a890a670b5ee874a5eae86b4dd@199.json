{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
      "candidate_info": {
        "commit_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Avoid downgrading SQLITE_CORRUPT errors detected by the schema parser into SQLITE_NOMEM or SQLITE_ERROR errors.\n\nFossilOrigin-Name: b2e79f8ff0836fcc98a2df9377aad9137307c34058030ecd1b5d4ec3277ed36a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cc5694cbd69749c146679c367860952fdf3f5356426ddfd1dce470569702bc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:       if( db->init.orphanTrigger ){",
          "116:         assert( iDb==1 );",
          "117:       }else{",
          "119:         if( rc==SQLITE_NOMEM ){",
          "120:           sqlite3OomFault(db);",
          "121:         }else if( rc!=SQLITE_INTERRUPT && (rc&0xFF)!=SQLITE_LOCKED ){",
          "",
          "[Removed Lines]",
          "118:         pData->rc = rc;",
          "",
          "[Added Lines]",
          "118:         if( rc > pData->rc ) pData->rc = rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30ad79aeb4cc1243817fdb3c1b0b51a61bbb5f97",
      "candidate_info": {
        "commit_hash": "30ad79aeb4cc1243817fdb3c1b0b51a61bbb5f97",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30ad79aeb4cc1243817fdb3c1b0b51a61bbb5f97",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Improvements to the view-self-join optimization so that it works on all VIEWs, not just on Common Table Expressions.\n\nFossilOrigin-Name: d2fe370cafa9b11f6c3eb4e1c3be48d9d2610b9d2f9d9ebf9e50267f9079dfc0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb1d06521de5918a2324a41e207b48c5e5149c23b927b9e3e1f3c3b38b82658e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5481:     if( pItem->pSelect==0 ) continue;",
          "5482:     if( pItem->fg.viaCoroutine ) continue;",
          "5483:     if( pItem->zName==0 ) continue;",
          "5485:     if( sqlite3_stricmp(pItem->zName, pThis->zName)!=0 ) continue;",
          "5486:     pS1 = pItem->pSelect;",
          "5490:       continue;",
          "",
          "[Removed Lines]",
          "5484:     if( sqlite3_stricmp(pItem->zDatabase, pThis->zDatabase)!=0 ) continue;",
          "5487:     if( pThis->pSelect->selId!=pS1->selId ){",
          "",
          "[Added Lines]",
          "5484:     assert( pItem->pTab!=0 );",
          "5485:     assert( pThis->pTab!=0 );",
          "5486:     if( pItem->pTab->pSchema!=pThis->pTab->pSchema ) continue;",
          "5489:     if( pItem->pTab->pSchema==0 && pThis->pSelect->selId!=pS1->selId ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec4ccdbcb1bd9d129888b38f209ed36bbe38a5d8",
      "candidate_info": {
        "commit_hash": "ec4ccdbcb1bd9d129888b38f209ed36bbe38a5d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec4ccdbcb1bd9d129888b38f209ed36bbe38a5d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/delete.c",
          "src/expr.c",
          "src/fkey.c",
          "src/insert.c",
          "src/pragma.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/update.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "src/where.c",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "A new implementation of sqlite3VdbeMakeLabel() is faster and makes fewer memory allocations by deferring memory allocation until sqlite3VdbeResolveLabel() is called, at which point the code generator has a better idea of how big the relocation table needs to be. The sqlite3VdbeMakeLabel() routine now takes a Parse* parameter instead of Vdbe*.\n\nFossilOrigin-Name: 4a0929ac76d8aa5dd65eac3b83d6bbf41e505e01d175ca0fb2b19ba02d439415",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/fkey.c||src/fkey.c",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/update.c||src/update.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 891f1f72187f0f9ec0d24fda98cc08be3ae3c3ff8b27c4e409ee7135c3106398",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1156:     addrNextRow = sqlite3VdbeCurrentAddr(v);",
          "1158:     if( nColTest>0 ){",
          "1161:       aGotoChng = sqlite3DbMallocRawNN(db, sizeof(int)*nColTest);",
          "1162:       if( aGotoChng==0 ) continue;",
          "",
          "[Removed Lines]",
          "1159:       int endDistinctTest = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1159:       int endDistinctTest = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:     if( eOnePass!=ONEPASS_OFF ){",
          "521:     }else{",
          "522:       sqlite3WhereEnd(pWInfo);",
          "523:     }",
          "",
          "[Removed Lines]",
          "520:       addrBypass = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "520:       addrBypass = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:   opSeek = HasRowid(pTab) ? OP_NotExists : OP_NotFound;",
          "711:   if( eMode==ONEPASS_OFF ){",
          "712:     sqlite3VdbeAddOp4Int(v, opSeek, iDataCur, iLabel, iPk, nPk);",
          "",
          "[Removed Lines]",
          "709:   iLabel = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "709:   iLabel = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   int regLeft = 0;",
          "554:   int regRight = 0;",
          "555:   u8 opx = op;",
          "558:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "559:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "556:   int addrDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "556:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3033:   if( eType==IN_INDEX_NOOP ){",
          "3034:     ExprList *pList = pExpr->x.pList;",
          "3035:     CollSeq *pColl = sqlite3ExprCollSeq(pParse, pExpr->pLeft);",
          "3037:     int r2, regToFree;",
          "3038:     int regCkNull = 0;",
          "3039:     int ii;",
          "",
          "[Removed Lines]",
          "3036:     int labelOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3036:     int labelOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3077:   if( destIfNull==destIfFalse ){",
          "3078:     destStep2 = destIfFalse;",
          "3079:   }else{",
          "3081:   }",
          "3082:   for(i=0; i<nVector; i++){",
          "3083:     Expr *p = sqlite3VectorFieldSubexpr(pExpr->pLeft, i);",
          "",
          "[Removed Lines]",
          "3080:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3080:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3135:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, pExpr->iTable, destIfFalse);",
          "3136:   VdbeCoverage(v);",
          "3137:   if( nVector>1 ){",
          "3139:   }else{",
          "",
          "[Removed Lines]",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3702:       if( pDef->funcFlags & SQLITE_FUNC_COALESCE ){",
          "3704:         assert( nFarg>=2 );",
          "3705:         sqlite3ExprCode(pParse, pFarg->a[0].pExpr, target);",
          "3706:         for(i=1; i<nFarg; i++){",
          "",
          "[Removed Lines]",
          "3703:         int endCoalesce = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3703:         int endCoalesce = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3848:       return pExpr->pLeft->iTable + pExpr->iColumn;",
          "3849:     }",
          "3850:     case TK_IN: {",
          "3853:       sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3854:       sqlite3ExprCodeIN(pParse, pExpr, destIfFalse, destIfNull);",
          "3855:       sqlite3VdbeAddOp2(v, OP_Integer, 1, target);",
          "",
          "[Removed Lines]",
          "3851:       int destIfFalse = sqlite3VdbeMakeLabel(v);",
          "3852:       int destIfNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3851:       int destIfFalse = sqlite3VdbeMakeLabel(pParse);",
          "3852:       int destIfNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3989:       pEList = pExpr->x.pList;",
          "3990:       aListelem = pEList->a;",
          "3991:       nExpr = pEList->nExpr;",
          "3993:       if( (pX = pExpr->pLeft)!=0 ){",
          "3994:         tempX = *pX;",
          "3995:         testcase( pX->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "3992:       endLabel = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3992:       endLabel = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4012:         }else{",
          "4013:           pTest = aListelem[i].pExpr;",
          "4014:         }",
          "4016:         testcase( pTest->op==TK_COLUMN );",
          "4017:         sqlite3ExprIfFalse(pParse, pTest, nextCase, SQLITE_JUMPIFNULL);",
          "4018:         testcase( aListelem[i+1].pExpr->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "4015:         nextCase = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4015:         nextCase = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4381:   op = pExpr->op;",
          "4382:   switch( op ){",
          "4383:     case TK_AND: {",
          "4385:       testcase( jumpIfNull==0 );",
          "4386:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,jumpIfNull^SQLITE_JUMPIFNULL);",
          "4387:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Removed Lines]",
          "4384:       int d2 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4384:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4467:     }",
          "4468: #ifndef SQLITE_OMIT_SUBQUERY",
          "4469:     case TK_IN: {",
          "4471:       int destIfNull = jumpIfNull ? dest : destIfFalse;",
          "4472:       sqlite3ExprCodeIN(pParse, pExpr, destIfFalse, destIfNull);",
          "4473:       sqlite3VdbeGoto(v, dest);",
          "",
          "[Removed Lines]",
          "4470:       int destIfFalse = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4470:       int destIfFalse = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4554:       break;",
          "4555:     }",
          "4556:     case TK_OR: {",
          "4558:       testcase( jumpIfNull==0 );",
          "4559:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2, jumpIfNull^SQLITE_JUMPIFNULL);",
          "4560:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Removed Lines]",
          "4557:       int d2 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4557:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4638:       if( jumpIfNull ){",
          "4639:         sqlite3ExprCodeIN(pParse, pExpr, dest, dest);",
          "4640:       }else{",
          "4642:         sqlite3ExprCodeIN(pParse, pExpr, dest, destIfNull);",
          "4643:         sqlite3VdbeResolveLabel(v, destIfNull);",
          "4644:       }",
          "",
          "[Removed Lines]",
          "4641:         int destIfNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4641:         int destIfNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:         if( p->isDeferred || (db->flags & SQLITE_DeferFKs) ) break;",
          "730:       }",
          "731:       if( !p ) return;",
          "733:       sqlite3VdbeAddOp2(v, OP_FkIfZero, 1, iSkip); VdbeCoverage(v);",
          "734:     }",
          "",
          "[Removed Lines]",
          "732:       iSkip = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "732:       iSkip = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:   if( tmask & TRIGGER_BEFORE ){",
          "871:     int regCols = sqlite3GetTempRange(pParse, pTab->nCol+1);",
          "",
          "[Removed Lines]",
          "869:   endOfLoop = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "869:   endOfLoop = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1356:     switch( onError ){",
          "1357:       case OE_Replace: {",
          "1358:         assert( onError==OE_Replace );",
          "1360:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1361:           VdbeCoverage(v);",
          "1362:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "",
          "[Removed Lines]",
          "1359:         addr1 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1359:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1408:         continue;",
          "1409:       }",
          "1411:       sqlite3VdbeVerifyAbortable(v, onError);",
          "1412:       sqlite3ExprIfTrue(pParse, pExpr, allOk, SQLITE_JUMPIFNULL);",
          "1413:       if( onError==OE_Ignore ){",
          "",
          "[Removed Lines]",
          "1410:       allOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1410:       allOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1476:   if( pkChng && pPk==0 ){",
          "1480:     onError = pTab->keyConf;",
          "",
          "[Removed Lines]",
          "1477:     int addrRowidOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1477:     int addrRowidOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1624:       VdbeComment((v, \"Skip upsert subroutine\"));",
          "1625:       sqlite3VdbeJumpHere(v, upsertJump);",
          "1626:     }else{",
          "1628:     }",
          "1629:     if( bAffinityDone==0 && (pUpIdx==0 || pUpIdx==pIdx) ){",
          "1630:       sqlite3TableAffinity(v, pTab, regNewData+1);",
          "",
          "[Removed Lines]",
          "1627:       addrUniqueOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1627:       addrUniqueOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1376:           x = sqlite3FkLocateIndex(pParse, pParent, pFK, &pIdx, &aiCols);",
          "1377:           assert( x==0 );",
          "1378:         }",
          "",
          "[Removed Lines]",
          "1379:         addrOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1379:         addrOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1596:         if( pTab->pCheck && (db->flags & SQLITE_IgnoreChecks)==0 ){",
          "1597:           ExprList *pCheck = sqlite3ExprListDup(db, pTab->pCheck, 0);",
          "1598:           if( db->mallocFailed==0 ){",
          "1601:             char *zErr;",
          "1602:             int k;",
          "1603:             pParse->iSelfTab = iDataCur + 1;",
          "",
          "[Removed Lines]",
          "1599:             int addrCkFault = sqlite3VdbeMakeLabel(v);",
          "1600:             int addrCkOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1599:             int addrCkFault = sqlite3VdbeMakeLabel(pParse);",
          "1600:             int addrCkOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1621:           for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){",
          "1622:             int jmp2, jmp3, jmp4, jmp5;",
          "1624:             if( pPk==pIdx ) continue;",
          "1625:             r1 = sqlite3GenerateIndexKey(pParse, pIdx, iDataCur, 0, 0, &jmp3,",
          "1626:                                          pPrior, r1);",
          "",
          "[Removed Lines]",
          "1623:             int ckUniq = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1623:             int ckUniq = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1643:             if( IsUniqueIndex(pIdx) ){",
          "1645:               int jmp6;",
          "1646:               int kk;",
          "1647:               for(kk=0; kk<pIdx->nKeyCol; kk++){",
          "",
          "[Removed Lines]",
          "1644:               int uniqOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1644:               int uniqOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "631:   }",
          "632:   assert( pSelect->iOffset==0 || pSelect->iLimit!=0 );",
          "633:   iLimit = pSelect->iOffset ? pSelect->iOffset+1 : pSelect->iLimit;",
          "635:   sqlite3ExprCodeExprList(pParse, pSort->pOrderBy, regBase, regOrigData,",
          "636:                           SQLITE_ECEL_DUP | (regOrigData? SQLITE_ECEL_REF : 0));",
          "637:   if( bSeq ){",
          "",
          "[Removed Lines]",
          "634:   pSort->labelDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "634:   pSort->labelDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:                                            pKI->nAllField-pKI->nKeyField-1);",
          "671:     addrJmp = sqlite3VdbeCurrentAddr(v);",
          "672:     sqlite3VdbeAddOp3(v, OP_Jump, addrJmp+1, 0, addrJmp+1); VdbeCoverage(v);",
          "674:     pSort->regReturn = ++pParse->nMem;",
          "675:     sqlite3VdbeAddOp2(v, OP_Gosub, pSort->regReturn, pSort->labelBkOut);",
          "676:     sqlite3VdbeAddOp1(v, OP_ResetSorter, pSort->iECursor);",
          "",
          "[Removed Lines]",
          "673:     pSort->labelBkOut = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "673:     pSort->labelBkOut = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2329:   if( sqlite3AuthCheck(pParse, SQLITE_RECURSIVE, 0, 0, 0) ) return;",
          "2334:   computeLimitRegisters(pParse, p, addrBreak);",
          "2335:   pLimit = p->pLimit;",
          "",
          "[Removed Lines]",
          "2332:   addrBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2332:   addrBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2399:   sqlite3VdbeAddOp1(v, OP_Delete, iQueue);",
          "2403:   codeOffset(v, regOffset, addrCont);",
          "2404:   selectInnerLoop(pParse, p, iCurrent,",
          "2405:       0, 0, pDest, addrCont, addrBreak);",
          "",
          "[Removed Lines]",
          "2402:   addrCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2402:   addrCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2707:         if( dest.eDest!=priorOp ){",
          "2708:           int iCont, iBreak, iStart;",
          "2709:           assert( p->pEList );",
          "2712:           computeLimitRegisters(pParse, p, iBreak);",
          "2713:           sqlite3VdbeAddOp2(v, OP_Rewind, unionTab, iBreak); VdbeCoverage(v);",
          "2714:           iStart = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2710:           iBreak = sqlite3VdbeMakeLabel(v);",
          "2711:           iCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2710:           iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2711:           iCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2778:         assert( p->pEList );",
          "2781:         computeLimitRegisters(pParse, p, iBreak);",
          "2782:         sqlite3VdbeAddOp2(v, OP_Rewind, tab1, iBreak); VdbeCoverage(v);",
          "2783:         r1 = sqlite3GetTempReg(pParse);",
          "",
          "[Removed Lines]",
          "2779:         iBreak = sqlite3VdbeMakeLabel(v);",
          "2780:         iCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2779:         iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2780:         iCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2907:   int addr;",
          "2909:   addr = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2910:   iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2910:   iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3144:   db = pParse->db;",
          "3145:   v = pParse->pVdbe;",
          "",
          "[Removed Lines]",
          "3147:   labelEnd = sqlite3VdbeMakeLabel(v);",
          "3148:   labelCmpr = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3147:   labelEnd = sqlite3VdbeMakeLabel(pParse);",
          "3148:   labelCmpr = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5330:       regAgg = 0;",
          "5331:     }",
          "5332:     if( pF->iDistinct>=0 ){",
          "5336:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5333:       addrNext = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "5333:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6042:   if( (p->selFlags & SF_FixedLimit)==0 ){",
          "6044:   }",
          "",
          "[Removed Lines]",
          "6041:   iEnd = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6041:   iEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6105:     assert( p->pEList==pEList );",
          "6106: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6107:     if( pWin ){",
          "6111:       int regGosub = ++pParse->nMem;",
          "6113:       sqlite3WindowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "6108:       int addrGosub = sqlite3VdbeMakeLabel(v);",
          "6109:       int iCont = sqlite3VdbeMakeLabel(v);",
          "6110:       int iBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6108:       int addrGosub = sqlite3VdbeMakeLabel(pParse);",
          "6109:       int iCont = sqlite3VdbeMakeLabel(pParse);",
          "6110:       int iBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6182:     }",
          "",
          "[Removed Lines]",
          "6185:     addrEnd = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6185:     addrEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6271:       iUseFlag = ++pParse->nMem;",
          "6272:       iAbortFlag = ++pParse->nMem;",
          "6273:       regOutputRow = ++pParse->nMem;",
          "6275:       regReset = ++pParse->nMem;",
          "6277:       iAMem = pParse->nMem + 1;",
          "6278:       pParse->nMem += pGroupBy->nExpr;",
          "6279:       iBMem = pParse->nMem + 1;",
          "",
          "[Removed Lines]",
          "6274:       addrOutputRow = sqlite3VdbeMakeLabel(v);",
          "6276:       addrReset = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6274:       addrOutputRow = sqlite3VdbeMakeLabel(pParse);",
          "6276:       addrReset = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:       if( SQLITE_OK==sqlite3ResolveExprNames(&sNC, pWhen)",
          "945:        && db->mallocFailed==0",
          "946:       ){",
          "948:         sqlite3ExprIfFalse(pSubParse, pWhen, iEndTrigger, SQLITE_JUMPIFNULL);",
          "949:       }",
          "950:       sqlite3ExprDelete(db, pWhen);",
          "",
          "[Removed Lines]",
          "947:         iEndTrigger = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "947:         iEndTrigger = sqlite3VdbeMakeLabel(pSubParse);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441: #endif",
          "",
          "[Removed Lines]",
          "444:   labelContinue = labelBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "444:   labelContinue = labelBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:         VdbeCoverage(v);",
          "577:       }",
          "578:       if( eOnePass!=ONEPASS_SINGLE ){",
          "580:       }",
          "581:       sqlite3VdbeAddOp2(v, OP_IsNull, pPk ? regKey : regOldRowid, labelBreak);",
          "582:       VdbeCoverageIf(v, pPk==0);",
          "583:       VdbeCoverageIf(v, pPk!=0);",
          "584:     }else if( pPk ){",
          "586:       sqlite3VdbeAddOp2(v, OP_Rewind, iEph, labelBreak); VdbeCoverage(v);",
          "587:       addrTop = sqlite3VdbeAddOp2(v, OP_RowData, iEph, regKey);",
          "588:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, labelContinue, regKey, 0);",
          "",
          "[Removed Lines]",
          "579:         labelContinue = sqlite3VdbeMakeLabel(v);",
          "585:       labelContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "579:         labelContinue = sqlite3VdbeMakeLabel(pParse);",
          "585:       labelContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: void sqlite3VdbeSetP4KeyInfo(Parse*, Index*);",
          "231: void sqlite3VdbeUsesBtree(Vdbe*, int);",
          "232: VdbeOp *sqlite3VdbeGetOp(Vdbe*, int);",
          "234: void sqlite3VdbeRunOnlyOnce(Vdbe*);",
          "235: void sqlite3VdbeReusable(Vdbe*);",
          "236: void sqlite3VdbeDelete(Vdbe*);",
          "",
          "[Removed Lines]",
          "233: int sqlite3VdbeMakeLabel(Vdbe*);",
          "",
          "[Added Lines]",
          "233: int sqlite3VdbeMakeLabel(Parse*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463: }",
          "",
          "[Removed Lines]",
          "451: int sqlite3VdbeMakeLabel(Vdbe *v){",
          "452:   Parse *p = v->pParse;",
          "453:   int i = p->nLabel++;",
          "454:   assert( v->magic==VDBE_MAGIC_INIT );",
          "455:   if( (i & (i-1))==0 ){",
          "456:     p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "457:                                        (i*2+1)*sizeof(p->aLabel[0]));",
          "458:   }",
          "459:   if( p->aLabel ){",
          "460:     p->aLabel[i] = -1;",
          "461:   }",
          "462:   return ADDR(i);",
          "",
          "[Added Lines]",
          "451: int sqlite3VdbeMakeLabel(Parse *pParse){",
          "452:   return ADDR(pParse->nLabel++);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470: void sqlite3VdbeResolveLabel(Vdbe *v, int x){",
          "471:   Parse *p = v->pParse;",
          "472:   int j = ADDR(x);",
          "473:   assert( v->magic==VDBE_MAGIC_INIT );",
          "474:   assert( j<p->nLabel );",
          "475:   assert( j>=0 );",
          "477: #ifdef SQLITE_DEBUG",
          "481: #endif",
          "483:     p->aLabel[j] = v->nOp;",
          "484:   }",
          "",
          "[Removed Lines]",
          "476:   if( p->aLabel ){",
          "478:     if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "479:       printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "480:     }",
          "",
          "[Added Lines]",
          "460: static SQLITE_NOINLINE void resizeResolveLabel(Parse *p, Vdbe *v, int j){",
          "461:   int nNewSize = p->nLabel+10;",
          "462:   p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "463:                      nNewSize*sizeof(p->aLabel[0]));",
          "464:   if( p->aLabel==0 ){",
          "465:     p->nLabelAlloc = 0;",
          "466:   }else{",
          "467: #ifdef SQLITE_DEBUG",
          "468:     int i;",
          "469:     for(i=p->nLabelAlloc; i<nNewSize; i++) p->aLabel[i] = -1;",
          "470: #endif",
          "471:     p->nLabelAlloc = nNewSize;",
          "472:     p->aLabel[j] = v->nOp;",
          "473:   }",
          "474: }",
          "482:   if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "483:     printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "484:   }",
          "486:   if( p->nLabelAlloc < p->nLabel ){",
          "487:     resizeResolveLabel(p,v,j);",
          "488:   }else{",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837:     addrTop = sqlite3VdbeAddOp1(v, OP_Rewind, pLevel->iTabCur); VdbeCoverage(v);",
          "838:   }",
          "839:   if( pPartial ){",
          "841:     sqlite3ExprIfFalse(pParse, pPartial, iContinue, SQLITE_JUMPIFNULL);",
          "842:     pLoop->wsFlags |= WHERE_PARTIALIDX;",
          "843:   }",
          "",
          "[Removed Lines]",
          "840:     iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "840:     iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4643:   pWInfo->pResultSet = pResultSet;",
          "4644:   pWInfo->aiCurOnePass[0] = pWInfo->aiCurOnePass[1] = -1;",
          "4645:   pWInfo->nLevel = nTabList;",
          "4647:   pWInfo->wctrlFlags = wctrlFlags;",
          "4648:   pWInfo->iLimit = iAuxArg;",
          "4649:   pWInfo->savedNQueryLoop = pParse->nQueryLoop;",
          "",
          "[Removed Lines]",
          "4646:   pWInfo->iBreak = pWInfo->iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4646:   pWInfo->iBreak = pWInfo->iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:     pLoop->wsFlags |= WHERE_IN_ABLE;",
          "567:     if( pLevel->u.in.nIn==0 ){",
          "569:     }",
          "571:     i = pLevel->u.in.nIn;",
          "",
          "[Removed Lines]",
          "568:       pLevel->addrNxt = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "568:       pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1216:   addrBrk = pLevel->addrBrk = pLevel->addrNxt = sqlite3VdbeMakeLabel(v);",
          "1217:   addrCont = pLevel->addrCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1216:   addrBrk = pLevel->addrBrk = pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "1217:   addrCont = pLevel->addrCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:      || pFunc->zName==first_valueName",
          "1331:     ){",
          "1332:       int csr = pWin->csrApp;",
          "1334:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1335:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "",
          "[Removed Lines]",
          "1333:       int lbl = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1333:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1353:       int nArg = pWin->pOwner->x.pList->nExpr;",
          "1354:       int iEph = pMWin->iEphCsr;",
          "1355:       int csr = pWin->csrApp;",
          "1357:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1359:       if( nArg<3 ){",
          "",
          "[Removed Lines]",
          "1356:       int lbl = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1356:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1616:   regFlushPart = ++pParse->nMem;",
          "1620:   regStart = ++pParse->nMem;",
          "1621:   regEnd = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1617:   lblFlushPart = sqlite3VdbeMakeLabel(v);",
          "1618:   lblFlushDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1617:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "1618:   lblFlushDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1725:    || pMWin->eStart==TK_PRECEDING",
          "1726:    || pMWin->eStart==TK_FOLLOWING",
          "1727:   ){",
          "1729:     if( pMWin->eStart==TK_PRECEDING ){",
          "1730:       sqlite3VdbeAddOp3(v, OP_IfPos, regStart, lblSkipInverse, 1);",
          "1731:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1728:     int lblSkipInverse = sqlite3VdbeMakeLabel(v);;",
          "",
          "[Added Lines]",
          "1728:     int lblSkipInverse = sqlite3VdbeMakeLabel(pParse);;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1890:        || (pMWin->eStart==TK_CURRENT && pMWin->eEnd==TK_UNBOUNDED)",
          "1891:   );",
          "1894:   regNewPeer = pParse->nMem+1;",
          "1895:   pParse->nMem += nPeer;",
          "1898:   regFlushPart = ++pParse->nMem;",
          "1901:   csrLead = pParse->nTab++;",
          "1902:   regCtr = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1893:   lblEmpty = sqlite3VdbeMakeLabel(v);",
          "1899:   lblFlushPart = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1893:   lblEmpty = sqlite3VdbeMakeLabel(pParse);",
          "1899:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5deb6b3c4faaf6b6c225f9dd5aa9ca2da81b06c",
      "candidate_info": {
        "commit_hash": "d5deb6b3c4faaf6b6c225f9dd5aa9ca2da81b06c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d5deb6b3c4faaf6b6c225f9dd5aa9ca2da81b06c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/tkt-a7debbe0.test"
        ],
        "message": "Ensure the columns of views and sub-selects in the FROM clause of a select are always assigned implicit collation sequences, just as table columns are. Fix for [a7debbe0].\n\nFossilOrigin-Name: b9ec72203c19c2b95e648ac1dfad74eec98d4ff82581cdc10dc4221ba551728f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "3482:     }",
          "3483:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3485:         if( pSubst->bFlattener && pExpr ){",
          "3486:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3487:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3488:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "3489:                 (pColl ? pColl->zName : \"BINARY\")",
          "3490:             );",
          "3491:           }",
          "3492:           ExprClearProperty(pExpr, EP_Collate);",
          "3493:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4043:       x.iNewTable = iNewParent;",
          "4044:       x.isLeftJoin = isLeftJoin;",
          "4045:       x.pEList = pSub->pEList;",
          "4046:       substSelect(&x, pParent, 0);",
          "4047:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4059:       x.bFlattener = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4368:       x.iNewTable = iCursor;",
          "4369:       x.isLeftJoin = 0;",
          "4370:       x.pEList = pSubq->pEList;",
          "4371:       pNew = substExpr(&x, pNew);",
          "4372:       if( pSubq->selFlags & SF_Aggregate ){",
          "4373:         pSubq->pHaving = sqlite3ExprAnd(pParse, pSubq->pHaving, pNew);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4385:       x.bFlattener = 0;",
          "",
          "---------------"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket a7debbe0ad1 have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-a7debbe0",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener",
          "23:     optimization_control db query-flattener 0",
          "24:   } else {",
          "25:     # Enable the flattener",
          "26:     optimization_control db query-flattener 1",
          "27:   }",
          "29:   do_execsql_test $tn.1.0 {",
          "30:     CREATE TABLE t0(xyz INTEGER);",
          "31:     INSERT INTO t0(xyz) VALUES(456);",
          "32:     CREATE VIEW v2(a, B) AS",
          "33:         SELECT 'a', 'B' COLLATE NOCASE FROM t0;",
          "34:     CREATE TABLE t2(a, B COLLATE NOCASE);",
          "35:     INSERT INTO t2 VALUES('a', 'B');",
          "36:     CREATE VIEW v3(a, B) AS",
          "37:         SELECT 'a' COLLATE BINARY, 'B' COLLATE NOCASE FROM t0;",
          "39:     CREATE VIEW v4(a, B) AS",
          "40:         SELECT 'a', +CAST('B' COLLATE NOCASE AS TEXT) FROM t0;",
          "42:     CREATE VIEW v5(a, B) AS",
          "43:         SELECT 'a', ('B' COLLATE NOCASE) || '' FROM t0;",
          "44:   }",
          "46:   # Table t2 and views v2 through v5 should all be equivalent.",
          "47:   do_execsql_test $tn.1.1.1 { SELECT a   >= B FROM t2;         } 1",
          "48:   do_execsql_test $tn.1.1.2 { SELECT 'a' >= 'B' COLLATE NOCASE } 0",
          "49:   do_execsql_test $tn.1.1.3 { SELECT a   >= B FROM v2          } 1",
          "50:   do_execsql_test $tn.1.1.4 { SELECT a   >= B FROM v3          } 1",
          "51:   do_execsql_test $tn.1.1.5 { SELECT a   >= B FROM v4          } 1",
          "52:   do_execsql_test $tn.1.1.6 { SELECT a   >= B FROM v5          } 1",
          "54:   do_execsql_test $tn.1.2.1 { SELECT B   < a FROM t2           } 0",
          "55:   do_execsql_test $tn.1.2.2 { SELECT 'B' COLLATE NOCASE < 'a'  } 0",
          "56:   do_execsql_test $tn.1.2.3 { SELECT B   < a FROM v2           } 0",
          "57:   do_execsql_test $tn.1.2.4 { SELECT B   < a FROM v3           } 0",
          "58:   do_execsql_test $tn.1.2.5 { SELECT a  < B FROM v4           } 0",
          "59:   do_execsql_test $tn.1.2.6 { SELECT a  < B FROM v5           } 0",
          "61:   #-------------------------------------------------------------------------",
          "62:   do_execsql_test $tn.2.0 {",
          "63:     CREATE TABLE t5(a, b COLLATE NOCASE);",
          "64:     INSERT INTO t5 VALUES(1, 'XYZ');",
          "65:   }",
          "67:   # Result should be 0, as column \"xyz\" from the sub-query has implicit",
          "68:   # collation sequence BINARY.",
          "69:   do_execsql_test $tn.2.1 {",
          "70:     SELECT xyz==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "71:   } {0}",
          "73:   # Result should be 1, as literal 'xyz' has no collation sequence, so",
          "74:   # the comparison uses the implicit collation sequence of the RHS - NOCASE.",
          "75:   do_execsql_test $tn.2.2 {",
          "76:     SELECT 'xyz'==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "77:   } {1}",
          "79:   #-----------------------------------------------------------------------",
          "80:   # The test case submitted with the ticket.",
          "81:   #",
          "82:   do_execsql_test $tn.3.0 {",
          "83:     DROP TABLE t0;",
          "84:     DROP VIEW v2;",
          "86:     CREATE TABLE t0(c0);",
          "87:     INSERT INTO t0(c0) VALUES('');",
          "88:     CREATE VIEW v2(c0, c1) AS",
          "89:         SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
          "90:     SELECT SUM(count) FROM (",
          "91:       SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2",
          "92:     );",
          "93:   } 1",
          "95:   # The result is 1, as the collation used is the implicit collation sequence",
          "96:   # of v2.c1 - BINARY.",
          "97:   do_execsql_test $tn.3.1 {",
          "98:     SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2;",
          "99:   } 1",
          "100: }",
          "102: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdefaf08eeaab84a109d5ef01593b95aa4fe04ef",
      "candidate_info": {
        "commit_hash": "bdefaf08eeaab84a109d5ef01593b95aa4fe04ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bdefaf08eeaab84a109d5ef01593b95aa4fe04ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/with1.test"
        ],
        "message": "Fix a problem in which nested CTEs with the same table name trick the code generator into thinking they are the same CTE, which then tries to use the manifest them both into the same transient table.\n\nFossilOrigin-Name: 202dd033019dd27428e3cc5f6e164c95b37efe39e2753515112b201ddefca67b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 11d4682d2eec133ccca99ca9cf2620cd249b4afe55918f3ebf93b454431f9c55",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5466: ){",
          "5467:   struct SrcList_item *pItem;",
          "5468:   for(pItem = pTabList->a; pItem<pThis; pItem++){",
          "5469:     if( pItem->pSelect==0 ) continue;",
          "5470:     if( pItem->fg.viaCoroutine ) continue;",
          "5471:     if( pItem->zName==0 ) continue;",
          "5472:     if( sqlite3_stricmp(pItem->zDatabase, pThis->zDatabase)!=0 ) continue;",
          "5473:     if( sqlite3_stricmp(pItem->zName, pThis->zName)!=0 ) continue;",
          "5479:       continue;",
          "",
          "[Removed Lines]",
          "5474:     if( sqlite3ExprCompare(0,",
          "5475:           pThis->pSelect->pWhere, pItem->pSelect->pWhere, -1)",
          "5476:     ){",
          "",
          "[Added Lines]",
          "5469:     Select *pS1;",
          "5475:     pS1 = pItem->pSelect;",
          "5476:     if( pThis->pSelect->selId!=pS1->selId ){",
          "5479:       continue;",
          "5480:     }",
          "5481:     if( sqlite3ExprCompare(0, pThis->pSelect->pWhere, pS1->pWhere, -1) ){",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:   WITH c(i)AS(VALUES(5)UNIoN SELECT 0)SELECT min(1)-i fROM c;",
          "1045: } {1}",
          "1047: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1047: # 2018-12-26",
          "1048: # Two different CTE tables with the same name appear in within a single FROM",
          "1049: # clause due to the query-flattener optimization.  make sure this does not cause",
          "1050: # problems.  This problem was discovered by Matt Denton.",
          "1051: #",
          "1052: do_execsql_test 21.1 {",
          "1053:    WITH RECURSIVE t21(a,b) AS (",
          "1054:     WITH t21(x) AS (VALUES(1))",
          "1055:     SELECT x, x FROM t21 ORDER BY 1",
          "1056:   )",
          "1057:   SELECT * FROM t21 AS tA, t21 AS tB",
          "1058: } {1 1 1 1}",
          "1059: do_execsql_test 21.2 {",
          "1060:   SELECT printf('',",
          "1061:      EXISTS (WITH RECURSIVE Table0 AS (WITH Table0 AS (SELECT DISTINCT 1)",
          "1062:                                        SELECT *, * FROM Table0 ORDER BY 1 DESC)",
          "1063:              SELECT * FROM Table0  NATURAL JOIN  Table0));",
          "1064: } {{}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}