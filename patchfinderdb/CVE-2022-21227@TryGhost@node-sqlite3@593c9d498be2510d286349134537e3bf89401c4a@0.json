{
  "cve_id": "CVE-2022-21227",
  "cve_desc": "The package sqlite3 before 5.0.3 are vulnerable to Denial of Service (DoS) which will invoke the toString function of the passed parameter. If passed an invalid Function object it will throw and crash the V8 engine.",
  "repo": "TryGhost/node-sqlite3",
  "patch_hash": "593c9d498be2510d286349134537e3bf89401c4a",
  "patch_info": {
    "commit_hash": "593c9d498be2510d286349134537e3bf89401c4a",
    "repo": "TryGhost/node-sqlite3",
    "commit_url": "https://github.com/TryGhost/node-sqlite3/commit/593c9d498be2510d286349134537e3bf89401c4a",
    "files": [
      "src/statement.cc",
      "test/other_objects.test.js"
    ],
    "message": "bug: fix segfault of invalid toString() object (#1450)\n\n* bug: verify toString() returns valid data\n* test: faulty toString test",
    "before_after_code_files": [
      "src/statement.cc||src/statement.cc",
      "test/other_objects.test.js||test/other_objects.test.js"
    ]
  },
  "patch_diff": {
    "src/statement.cc||src/statement.cc": [
      "File: src/statement.cc -> src/statement.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "205:         return new Values::Float(pos, source.ToNumber().DoubleValue());",
      "206:     }",
      "207:     else if (source.IsObject()) {",
      "209:         return new Values::Text(pos, val.length(), val.c_str());",
      "210:     }",
      "211:     else {",
      "",
      "[Removed Lines]",
      "208:         std::string val = source.ToString().Utf8Value();",
      "",
      "[Added Lines]",
      "208:         Napi::String napiVal = source.ToString();",
      "210:         if(napiVal.Type() == 0) {",
      "211:             return NULL;",
      "212:         }",
      "214:         std::string val = napiVal.Utf8Value();",
      "",
      "---------------"
    ],
    "test/other_objects.test.js||test/other_objects.test.js": [
      "File: test/other_objects.test.js -> test/other_objects.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:             });",
      "87:         });",
      "88:     });",
      "89: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:     it('should ignore faulty toString', function(done) {",
      "91:         const faulty = { toString: 23 };",
      "92:         db.run(\"INSERT INTO txt_table VALUES(?)\", faulty, function (err) {",
      "93:             assert.notEqual(err, undefined);",
      "94:             done();",
      "95:         });",
      "96:     });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de8888ef5ff76a42ceaf75f298fe127d4be4d673",
      "candidate_info": {
        "commit_hash": "de8888ef5ff76a42ceaf75f298fe127d4be4d673",
        "repo": "TryGhost/node-sqlite3",
        "commit_url": "https://github.com/TryGhost/node-sqlite3/commit/de8888ef5ff76a42ceaf75f298fe127d4be4d673",
        "files": [
          "binding.gyp",
          "package.json",
          "src/backup.cc",
          "src/backup.h",
          "src/database.cc",
          "src/database.h",
          "src/macros.h",
          "src/node_sqlite3.cc",
          "src/statement.cc",
          "src/statement.h"
        ],
        "message": "Convert NAN to N-API using tool",
        "before_after_code_files": [
          "binding.gyp||binding.gyp",
          "src/backup.cc||src/backup.cc",
          "src/backup.h||src/backup.h",
          "src/database.cc||src/database.cc",
          "src/database.h||src/database.h",
          "src/macros.h||src/macros.h",
          "src/node_sqlite3.cc||src/node_sqlite3.cc",
          "src/statement.cc||src/statement.cc",
          "src/statement.h||src/statement.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/statement.cc||src/statement.cc"
          ],
          "candidate": [
            "src/statement.cc||src/statement.cc"
          ]
        }
      },
      "candidate_diff": {
        "binding.gyp||binding.gyp": [
          "File: binding.gyp -> binding.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   \"targets\": [",
          "8:     {",
          "9:       \"target_name\": \"<(module_name)\",",
          "11:       \"conditions\": [",
          "12:         [\"sqlite != 'internal'\", {",
          "14:             \"libraries\": [",
          "15:                \"-l<(sqlite_libname)\"",
          "16:             ],",
          "",
          "[Removed Lines]",
          "10:       \"include_dirs\": [\"<!(node -e \\\"require('nan')\\\")\"],",
          "13:             \"include_dirs\": [ \"<(sqlite)/include\" ],",
          "",
          "[Added Lines]",
          "10:       \"cflags!\": [ \"-fno-exceptions\" ],",
          "11:       \"cflags_cc!\": [ \"-fno-exceptions\" ],",
          "12:       \"xcode_settings\": { \"GCC_ENABLE_CPP_EXCEPTIONS\": \"YES\",",
          "13:         \"CLANG_CXX_LIBRARY\": \"libc++\",",
          "14:         \"MACOSX_DEPLOYMENT_TARGET\": \"10.7\",",
          "15:       },",
          "16:       \"msvs_settings\": {",
          "17:         \"VCCLCompilerTool\": { \"ExceptionHandling\": 1 },",
          "18:       },",
          "19:       \"include_dirs\": [",
          "20:         \"<!@(node -p \\\"require('node-addon-api').include\\\")\",\"<!(node -e \\\"require('nan')\\\")\"],",
          "23:             \"include_dirs\": [",
          "24:               \"<!@(node -p \\\"require('node-addon-api').include\\\")\", \"<(sqlite)/include\" ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         },",
          "27:         {",
          "28:             \"dependencies\": [",
          "29:               \"deps/sqlite3.gyp:sqlite3\"",
          "30:             ]",
          "31:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:               \"<!(node -p 'require(\\\"node-addon-api\\\").gyp')\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:     },",
          "41:     {",
          "42:       \"target_name\": \"action_after_build\",",
          "43:       \"type\": \"none\",",
          "45:       \"copies\": [",
          "46:           {",
          "47:             \"files\": [ \"<(PRODUCT_DIR)/<(module_name).node\" ],",
          "",
          "[Removed Lines]",
          "44:       \"dependencies\": [ \"<(module_name)\" ],",
          "",
          "[Added Lines]",
          "55:       \"cflags!\": [ \"-fno-exceptions\" ],",
          "56:       \"cflags_cc!\": [ \"-fno-exceptions\" ],",
          "57:       \"xcode_settings\": { \"GCC_ENABLE_CPP_EXCEPTIONS\": \"YES\",",
          "58:         \"CLANG_CXX_LIBRARY\": \"libc++\",",
          "59:         \"MACOSX_DEPLOYMENT_TARGET\": \"10.7\",",
          "60:       },",
          "61:       \"msvs_settings\": {",
          "62:         \"VCCLCompilerTool\": { \"ExceptionHandling\": 1 },",
          "63:       },",
          "65:       \"dependencies\": [",
          "66:         \"<!(node -p 'require(\\\"node-addon-api\\\").gyp')\", \"<(module_name)\" ],",
          "",
          "---------------"
        ],
        "src/backup.cc||src/backup.cc": [
          "File: src/backup.cc -> src/backup.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <string.h>",
          "3: #include <node_buffer.h>",
          "4: #include <node_version.h>",
          "",
          "[Removed Lines]",
          "2: #include <node.h>",
          "",
          "[Added Lines]",
          "2: #include <napi.h>",
          "3: #include <uv.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: using namespace node_sqlite3;",
          "26:     NODE_SET_GETTER(t, \"idle\", IdleGetter);",
          "27:     NODE_SET_GETTER(t, \"completed\", CompletedGetter);",
          "",
          "[Removed Lines]",
          "12: Nan::Persistent<FunctionTemplate> Backup::constructor_template;",
          "15: NAN_MODULE_INIT(Backup::Init) {",
          "16:     Nan::HandleScope scope;",
          "18:     Local<FunctionTemplate> t = Nan::New<FunctionTemplate>(New);",
          "20:     t->InstanceTemplate()->SetInternalFieldCount(1);",
          "21:     t->SetClassName(Nan::New(\"Backup\").ToLocalChecked());",
          "23:     Nan::SetPrototypeMethod(t, \"step\", Step);",
          "24:     Nan::SetPrototypeMethod(t, \"finish\", Finish);",
          "",
          "[Added Lines]",
          "13: Napi::FunctionReference Backup::constructor;",
          "16: Napi::Object Backup::Init(Napi::Env env, Napi::Object exports) {",
          "17:     Napi::HandleScope scope(env);",
          "19:     Napi::FunctionReference t = Napi::Function::New(env, New);",
          "22:     t->SetClassName(Napi::String::New(env, \"Backup\"));",
          "24:     InstanceMethod(\"step\", &Step),",
          "25:     InstanceMethod(\"finish\", &Finish),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:     NODE_SET_SETTER(t, \"retryErrors\", RetryErrorGetter, RetryErrorSetter);",
          "37: }",
          "39: void Backup::Process() {",
          "",
          "[Removed Lines]",
          "34:     constructor_template.Reset(t);",
          "35:     Nan::Set(target, Nan::New(\"Backup\").ToLocalChecked(),",
          "36:         Nan::GetFunction(t).ToLocalChecked());",
          "",
          "[Added Lines]",
          "35:     constructor.Reset(t);",
          "36:     (target).Set(Napi::String::New(env, \"Backup\"),",
          "37:         Napi::GetFunction(t));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: }",
          "66: template <class T> void Backup::Error(T* baton) {",
          "69:     Backup* backup = baton->backup;",
          "71:     assert(backup->status != 0);",
          "72:     EXCEPTION(backup->message, backup->status, exception);",
          "76:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "78:         TRY_CATCH_CALL(backup->handle(), cb, 1, argv);",
          "79:     }",
          "80:     else {",
          "82:         EMIT_EVENT(backup->handle(), 2, argv);",
          "83:     }",
          "84: }",
          "86: void Backup::CleanQueue() {",
          "89:     if (inited && !queue.empty()) {",
          "92:         EXCEPTION(\"Backup is already finished\", SQLITE_MISUSE, exception);",
          "94:         bool called = false;",
          "",
          "[Removed Lines]",
          "67:     Nan::HandleScope scope;",
          "74:     Local<Function> cb = Nan::New(baton->callback);",
          "77:         Local<Value> argv[] = { exception };",
          "81:         Local<Value> argv[] = { Nan::New(\"error\").ToLocalChecked(), exception };",
          "87:     Nan::HandleScope scope;",
          "93:         Local<Value> argv[] = { exception };",
          "",
          "[Added Lines]",
          "68:     Napi::HandleScope scope(env);",
          "75:     Napi::Function cb = Napi::New(env, baton->callback);",
          "78:         Napi::Value argv[] = { exception };",
          "82:         Napi::Value argv[] = { Napi::String::New(env, \"error\"), exception };",
          "88:     Napi::HandleScope scope(env);",
          "94:         Napi::Value argv[] = { exception };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "98:             Call* call = queue.front();",
          "99:             queue.pop();",
          "103:             if (inited && !cb.IsEmpty() &&",
          "104:                 cb->IsFunction()) {",
          "",
          "[Removed Lines]",
          "101:             Local<Function> cb = Nan::New(call->baton->callback);",
          "",
          "[Added Lines]",
          "102:             Napi::Function cb = Napi::New(env, call->baton->callback);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "117:         if (!called) {",
          "119:             EMIT_EVENT(handle(), 2, info);",
          "120:         }",
          "121:     }",
          "",
          "[Removed Lines]",
          "118:             Local<Value> info[] = { Nan::New(\"error\").ToLocalChecked(), exception };",
          "",
          "[Added Lines]",
          "119:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "132:     }",
          "133: }",
          "136:     if (!info.IsConstructCall()) {",
          "138:     }",
          "140:     int length = info.Length();",
          "142:     if (length <= 0 || !Database::HasInstance(info[0])) {",
          "144:     }",
          "147:     }",
          "150:     }",
          "153:     }",
          "156:     }",
          "159:     }",
          "172:     Backup* backup = new Backup(db);",
          "173:     backup->Wrap(info.This());",
          "180:     db->Schedule(Work_BeginInitialize, baton);",
          "183: }",
          "185: void Backup::Work_BeginInitialize(Database::Baton* baton) {",
          "",
          "[Removed Lines]",
          "135: NAN_METHOD(Backup::New) {",
          "137:         return Nan::ThrowTypeError(\"Use the new operator to create new Backup objects\");",
          "143:         return Nan::ThrowTypeError(\"Database object expected\");",
          "145:     else if (length <= 1 || !info[1]->IsString()) {",
          "146:         return Nan::ThrowTypeError(\"Filename expected\");",
          "148:     else if (length <= 2 || !info[2]->IsString()) {",
          "149:         return Nan::ThrowTypeError(\"Source database name expected\");",
          "151:     else if (length <= 3 || !info[3]->IsString()) {",
          "152:         return Nan::ThrowTypeError(\"Destination database name expected\");",
          "154:     else if (length <= 4 || !info[4]->IsBoolean()) {",
          "155:         return Nan::ThrowTypeError(\"Direction flag expected\");",
          "157:     else if (length > 5 && !info[5]->IsUndefined() && !info[5]->IsFunction()) {",
          "158:         return Nan::ThrowTypeError(\"Callback expected\");",
          "161:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info[0].As<Object>());",
          "162:     Local<String> filename = Local<String>::Cast(info[1]);",
          "163:     Local<String> sourceName = Local<String>::Cast(info[2]);",
          "164:     Local<String> destName = Local<String>::Cast(info[3]);",
          "165:     Local<Boolean> filenameIsDest = Local<Boolean>::Cast(info[4]);",
          "167:     Nan::ForceSet(info.This(), Nan::New(\"filename\").ToLocalChecked(), filename, ReadOnly);",
          "168:     Nan::ForceSet(info.This(), Nan::New(\"sourceName\").ToLocalChecked(), sourceName, ReadOnly);",
          "169:     Nan::ForceSet(info.This(), Nan::New(\"destName\").ToLocalChecked(), destName, ReadOnly);",
          "170:     Nan::ForceSet(info.This(), Nan::New(\"filenameIsDest\").ToLocalChecked(), filenameIsDest, ReadOnly);",
          "175:     InitializeBaton* baton = new InitializeBaton(db, Local<Function>::Cast(info[5]), backup);",
          "176:     baton->filename = std::string(*Nan::Utf8String(filename));",
          "177:     baton->sourceName = std::string(*Nan::Utf8String(sourceName));",
          "178:     baton->destName = std::string(*Nan::Utf8String(destName));",
          "179:     baton->filenameIsDest = Nan::To<bool>(filenameIsDest).FromJust();",
          "182:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "136: Napi::Value Backup::New(const Napi::CallbackInfo& info) {",
          "138:         Napi::TypeError::New(env, \"Use the new operator to create new Backup objects\").ThrowAsJavaScriptException();",
          "139:         return env.Null();",
          "145:         Napi::TypeError::New(env, \"Database object expected\").ThrowAsJavaScriptException();",
          "146:         return env.Null();",
          "148:     else if (length <= 1 || !info[1].IsString()) {",
          "149:         Napi::TypeError::New(env, \"Filename expected\").ThrowAsJavaScriptException();",
          "150:         return env.Null();",
          "152:     else if (length <= 2 || !info[2].IsString()) {",
          "153:         Napi::TypeError::New(env, \"Source database name expected\").ThrowAsJavaScriptException();",
          "154:         return env.Null();",
          "156:     else if (length <= 3 || !info[3].IsString()) {",
          "157:         Napi::TypeError::New(env, \"Destination database name expected\").ThrowAsJavaScriptException();",
          "158:         return env.Null();",
          "160:     else if (length <= 4 || !info[4].IsBoolean()) {",
          "161:         Napi::TypeError::New(env, \"Direction flag expected\").ThrowAsJavaScriptException();",
          "162:         return env.Null();",
          "164:     else if (length > 5 && !info[5].IsUndefined() && !info[5].IsFunction()) {",
          "165:         Napi::TypeError::New(env, \"Callback expected\").ThrowAsJavaScriptException();",
          "166:         return env.Null();",
          "169:     Database* db = info[0].As<Napi::Object>().Unwrap<Database>();",
          "170:     Napi::String filename = info[1].As<Napi::String>();",
          "171:     Napi::String sourceName = info[2].As<Napi::String>();",
          "172:     Napi::String destName = info[3].As<Napi::String>();",
          "173:     Napi::Boolean filenameIsDest = info[4].As<Napi::Boolean>();",
          "175:     info.This().DefineProperty(Napi::String::New(env, \"filename\"), filename, ReadOnly);",
          "176:     info.This().DefineProperty(Napi::String::New(env, \"sourceName\"), sourceName, ReadOnly);",
          "177:     info.This().DefineProperty(Napi::String::New(env, \"destName\"), destName, ReadOnly);",
          "178:     info.This().DefineProperty(Napi::String::New(env, \"filenameIsDest\"), filenameIsDest, ReadOnly);",
          "183:     InitializeBaton* baton = new InitializeBaton(db, info[5].As<Napi::Function>(), backup);",
          "184:     baton->filename = std::string(filename->As<Napi::String>().Utf8Value().c_str());",
          "185:     baton->sourceName = std::string(sourceName->As<Napi::String>().Utf8Value().c_str());",
          "186:     baton->destName = std::string(destName->As<Napi::String>().Utf8Value().c_str());",
          "187:     baton->filenameIsDest = filenameIsDest.As<Napi::Boolean>().Value();",
          "190:     return info.This();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "220: }",
          "222: void Backup::Work_AfterInitialize(uv_work_t* req) {",
          "225:     BACKUP_INIT(InitializeBaton);",
          "",
          "[Removed Lines]",
          "223:     Nan::HandleScope scope;",
          "",
          "[Added Lines]",
          "231:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "230:     }",
          "231:     else {",
          "232:         backup->inited = true;",
          "234:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "236:             TRY_CATCH_CALL(backup->handle(), cb, 1, argv);",
          "237:         }",
          "238:     }",
          "239:     BACKUP_END();",
          "240: }",
          "245:     REQUIRE_ARGUMENT_INTEGER(0, pages);",
          "246:     OPTIONAL_ARGUMENT_FUNCTION(1, callback);",
          "",
          "[Removed Lines]",
          "233:         Local<Function> cb = Nan::New(baton->callback);",
          "235:             Local<Value> argv[] = { Nan::Null() };",
          "242: NAN_METHOD(Backup::Step) {",
          "243:     Backup* backup = Nan::ObjectWrap::Unwrap<Backup>(info.This());",
          "",
          "[Added Lines]",
          "241:         Napi::Function cb = Napi::New(env, baton->callback);",
          "243:             Napi::Value argv[] = { env.Null() };",
          "250: Napi::Value Backup::Step(const Napi::CallbackInfo& info) {",
          "251:     Backup* backup = this;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "248:     StepBaton* baton = new StepBaton(backup, callback, pages);",
          "249:     backup->GetRetryErrors(baton->retryErrorsSet);",
          "250:     backup->Schedule(Work_BeginStep, baton);",
          "252: }",
          "254: void Backup::Work_BeginStep(Baton* baton) {",
          "",
          "[Removed Lines]",
          "251:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "259:     return info.This();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "280: }",
          "282: void Backup::Work_AfterStep(uv_work_t* req) {",
          "285:     BACKUP_INIT(StepBaton);",
          "",
          "[Removed Lines]",
          "283:     Nan::HandleScope scope;",
          "",
          "[Added Lines]",
          "291:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "295:     }",
          "296:     else {",
          "299:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "301:             TRY_CATCH_CALL(backup->handle(), cb, 2, argv);",
          "302:         }",
          "303:     }",
          "",
          "[Removed Lines]",
          "298:         Local<Function> cb = Nan::New(baton->callback);",
          "300:             Local<Value> argv[] = { Nan::Null(), Nan::New(backup->status == SQLITE_DONE) };",
          "",
          "[Added Lines]",
          "306:         Napi::Function cb = Napi::New(env, baton->callback);",
          "308:             Napi::Value argv[] = { env.Null(), Napi::New(env, backup->status == SQLITE_DONE) };",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "305:     BACKUP_END();",
          "306: }",
          "311:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "313:     Baton* baton = new Baton(backup, callback);",
          "314:     backup->Schedule(Work_BeginFinish, baton);",
          "316: }",
          "318: void Backup::Work_BeginFinish(Baton* baton) {",
          "",
          "[Removed Lines]",
          "308: NAN_METHOD(Backup::Finish) {",
          "309:     Backup* backup = Nan::ObjectWrap::Unwrap<Backup>(info.This());",
          "315:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "316: Napi::Value Backup::Finish(const Napi::CallbackInfo& info) {",
          "317:     Backup* backup = this;",
          "323:     return info.This();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "325: }",
          "327: void Backup::Work_AfterFinish(uv_work_t* req) {",
          "330:     BACKUP_INIT(Baton);",
          "331:     backup->FinishAll();",
          "335:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "336:         TRY_CATCH_CALL(backup->handle(), cb, 0, NULL);",
          "337:     }",
          "",
          "[Removed Lines]",
          "328:     Nan::HandleScope scope;",
          "334:     Local<Function> cb = Nan::New(baton->callback);",
          "",
          "[Added Lines]",
          "336:     Napi::HandleScope scope(env);",
          "342:     Napi::Function cb = Napi::New(env, baton->callback);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "362:     _destDb = NULL;",
          "363: }",
          "367:     bool idle = backup->inited && !backup->locked && backup->queue.empty();",
          "369: }",
          "374: }",
          "379: }",
          "384: }",
          "389: }",
          "394: }",
          "398:     if (!value->IsArray()) {",
          "400:     }",
          "402:     backup->retryErrors.Reset(array);",
          "403: }",
          "405: void Backup::GetRetryErrors(std::set<int>& retryErrorsSet) {",
          "406:     retryErrorsSet.clear();",
          "408:     int length = array->Length();",
          "409:     for (int i = 0; i < length; i++) {",
          "413:         }",
          "414:     }",
          "415: }",
          "",
          "[Removed Lines]",
          "365: NAN_GETTER(Backup::IdleGetter) {",
          "366:     Backup* backup = Nan::ObjectWrap::Unwrap<Backup>(info.This());",
          "368:     info.GetReturnValue().Set(idle);",
          "371: NAN_GETTER(Backup::CompletedGetter) {",
          "372:     Backup* backup = Nan::ObjectWrap::Unwrap<Backup>(info.This());",
          "373:     info.GetReturnValue().Set(backup->completed);",
          "376: NAN_GETTER(Backup::FailedGetter) {",
          "377:     Backup* backup = Nan::ObjectWrap::Unwrap<Backup>(info.This());",
          "378:     info.GetReturnValue().Set(backup->failed);",
          "381: NAN_GETTER(Backup::RemainingGetter) {",
          "382:     Backup* backup = Nan::ObjectWrap::Unwrap<Backup>(info.This());",
          "383:     info.GetReturnValue().Set(backup->remaining);",
          "386: NAN_GETTER(Backup::PageCountGetter) {",
          "387:     Backup* backup = Nan::ObjectWrap::Unwrap<Backup>(info.This());",
          "388:     info.GetReturnValue().Set(backup->pageCount);",
          "391: NAN_GETTER(Backup::RetryErrorGetter) {",
          "392:     Backup* backup = Nan::ObjectWrap::Unwrap<Backup>(info.This());",
          "393:     info.GetReturnValue().Set(Nan::New(backup->retryErrors));",
          "396: NAN_SETTER(Backup::RetryErrorSetter) {",
          "397:     Backup* backup = Nan::ObjectWrap::Unwrap<Backup>(info.This());",
          "399:         return Nan::ThrowError(\"retryErrors must be an array\");",
          "401:     Local<Array> array = Local<Array>::Cast(value);",
          "407:     Local<Array> array = Nan::New(retryErrors);",
          "410:         Local<Value> code = Nan::Get(array, i).ToLocalChecked();",
          "411:         if (code->IsInt32()) {",
          "412:             retryErrorsSet.insert(Nan::To<int32_t>(code).FromJust());",
          "",
          "[Added Lines]",
          "373: Napi::Value Backup::IdleGetter(const Napi::CallbackInfo& info) {",
          "374:     Backup* backup = this;",
          "376:     return idle;",
          "379: Napi::Value Backup::CompletedGetter(const Napi::CallbackInfo& info) {",
          "380:     Backup* backup = this;",
          "381:     return backup->completed;",
          "384: Napi::Value Backup::FailedGetter(const Napi::CallbackInfo& info) {",
          "385:     Backup* backup = this;",
          "386:     return backup->failed;",
          "389: Napi::Value Backup::RemainingGetter(const Napi::CallbackInfo& info) {",
          "390:     Backup* backup = this;",
          "391:     return backup->remaining;",
          "394: Napi::Value Backup::PageCountGetter(const Napi::CallbackInfo& info) {",
          "395:     Backup* backup = this;",
          "396:     return backup->pageCount;",
          "399: Napi::Value Backup::RetryErrorGetter(const Napi::CallbackInfo& info) {",
          "400:     Backup* backup = this;",
          "401:     return Napi::New(env, backup->retryErrors);",
          "404: void Backup::RetryErrorSetter(const Napi::CallbackInfo& info, const Napi::Value& value) {",
          "405:     Backup* backup = this;",
          "407:         Napi::Error::New(env, \"retryErrors must be an array\").ThrowAsJavaScriptException();",
          "408:         return env.Null();",
          "410:     Napi::Array array = value.As<Napi::Array>();",
          "416:     Napi::Array array = Napi::New(env, retryErrors);",
          "419:         Napi::Value code = (array).Get(i);",
          "420:         if (code.IsNumber()) {",
          "421:             retryErrorsSet.insert(code.As<Napi::Number>().Int32Value());",
          "",
          "---------------"
        ],
        "src/backup.h||src/backup.h": [
          "File: src/backup.h -> src/backup.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include <set>",
          "10: #include <sqlite3.h>",
          "16: namespace node_sqlite3 {",
          "",
          "[Removed Lines]",
          "11: #include <nan.h>",
          "13: using namespace v8;",
          "14: using namespace node;",
          "",
          "[Added Lines]",
          "11: #include <napi.h>",
          "12: #include <uv.h>",
          "14: using namespace Napi;",
          "15: using namespace Napi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: public:",
          "102:     struct Baton {",
          "103:         uv_work_t request;",
          "104:         Backup* backup;",
          "108:             backup->Ref();",
          "109:             request.data = this;",
          "110:             callback.Reset(cb_);",
          "",
          "[Removed Lines]",
          "95: class Backup : public Nan::ObjectWrap {",
          "97:     static Nan::Persistent<FunctionTemplate> constructor_template;",
          "99:     static NAN_MODULE_INIT(Init);",
          "100:     static NAN_METHOD(New);",
          "105:         Nan::Persistent<Function> callback;",
          "107:         Baton(Backup* backup_, Local<Function> cb_) : backup(backup_) {",
          "",
          "[Added Lines]",
          "96: class Backup : public Napi::ObjectWrap<Backup> {",
          "98:     static Napi::FunctionReference constructor;",
          "100:     static Napi::Object Init(Napi::Env env, Napi::Object exports);",
          "101:     static Napi::Value New(const Napi::CallbackInfo& info);",
          "106:         Napi::FunctionReference callback;",
          "108:         Baton(Backup* backup_, Napi::Function cb_) : backup(backup_) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:         std::string sourceName;",
          "122:         std::string destName;",
          "123:         bool filenameIsDest;",
          "125:             Baton(db_, cb_), backup(backup_), filenameIsDest(true) {",
          "126:             backup->Ref();",
          "127:         }",
          "",
          "[Removed Lines]",
          "124:         InitializeBaton(Database* db_, Local<Function> cb_, Backup* backup_) :",
          "",
          "[Added Lines]",
          "125:         InitializeBaton(Database* db_, Napi::Function cb_, Backup* backup_) :",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:     struct StepBaton : Baton {",
          "138:         int pages;",
          "139:         std::set<int> retryErrorsSet;",
          "141:             Baton(backup_, cb_), pages(pages_) {}",
          "142:     };",
          "",
          "[Removed Lines]",
          "140:         StepBaton(Backup* backup_, Local<Function> cb_, int pages_) :",
          "",
          "[Added Lines]",
          "141:         StepBaton(Backup* backup_, Napi::Function cb_, int pages_) :",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:         Baton* baton;",
          "150:     };",
          "153:            db(db_),",
          "154:            _handle(NULL),",
          "155:            _otherDb(NULL),",
          "",
          "[Removed Lines]",
          "152:     Backup(Database* db_) : Nan::ObjectWrap(),",
          "",
          "[Added Lines]",
          "153:     Backup(Database* db_) : Napi::ObjectWrap<Backup>(),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "174:     WORK_DEFINITION(Step);",
          "175:     WORK_DEFINITION(Finish);",
          "187: protected:",
          "188:     static void Work_BeginInitialize(Database::Baton* baton);",
          "",
          "[Removed Lines]",
          "176:     static NAN_GETTER(IdleGetter);",
          "177:     static NAN_GETTER(CompletedGetter);",
          "178:     static NAN_GETTER(FailedGetter);",
          "179:     static NAN_GETTER(PageCountGetter);",
          "180:     static NAN_GETTER(RemainingGetter);",
          "181:     static NAN_GETTER(FatalErrorGetter);",
          "182:     static NAN_GETTER(RetryErrorGetter);",
          "184:     static NAN_SETTER(FatalErrorSetter);",
          "185:     static NAN_SETTER(RetryErrorSetter);",
          "",
          "[Added Lines]",
          "177:     Napi::Value IdleGetter(const Napi::CallbackInfo& info);",
          "178:     Napi::Value CompletedGetter(const Napi::CallbackInfo& info);",
          "179:     Napi::Value FailedGetter(const Napi::CallbackInfo& info);",
          "180:     Napi::Value PageCountGetter(const Napi::CallbackInfo& info);",
          "181:     Napi::Value RemainingGetter(const Napi::CallbackInfo& info);",
          "182:     Napi::Value FatalErrorGetter(const Napi::CallbackInfo& info);",
          "183:     Napi::Value RetryErrorGetter(const Napi::CallbackInfo& info);",
          "185:     void FatalErrorSetter(const Napi::CallbackInfo& info, const Napi::Value& value);",
          "186:     void RetryErrorSetter(const Napi::CallbackInfo& info, const Napi::Value& value);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "215:     bool finished;",
          "216:     std::queue<Call*> queue;",
          "219: };",
          "221: }",
          "",
          "[Removed Lines]",
          "218:     Nan::Persistent<Array> retryErrors;",
          "",
          "[Added Lines]",
          "219:     Napi::Persistent<Array> retryErrors;",
          "",
          "---------------"
        ],
        "src/database.cc||src/database.cc": [
          "File: src/database.cc -> src/database.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: using namespace node_sqlite3;",
          "28:     NODE_SET_GETTER(t, \"open\", OpenGetter);",
          "34: }",
          "36: void Database::Process() {",
          "39:     if (!open && locked && !queue.empty()) {",
          "40:         EXCEPTION(\"Database handle is closed\", SQLITE_MISUSE, exception);",
          "42:         bool called = false;",
          "45:         while (!queue.empty()) {",
          "46:             Call* call = queue.front();",
          "48:             if (!cb.IsEmpty() && cb->IsFunction()) {",
          "49:                 TRY_CATCH_CALL(this->handle(), cb, 1, argv);",
          "50:                 called = true;",
          "",
          "[Removed Lines]",
          "9: Nan::Persistent<FunctionTemplate> Database::constructor_template;",
          "11: NAN_MODULE_INIT(Database::Init) {",
          "12:     Nan::HandleScope scope;",
          "14:     Local<FunctionTemplate> t = Nan::New<FunctionTemplate>(New);",
          "16:     t->InstanceTemplate()->SetInternalFieldCount(1);",
          "17:     t->SetClassName(Nan::New(\"Database\").ToLocalChecked());",
          "19:     Nan::SetPrototypeMethod(t, \"close\", Close);",
          "20:     Nan::SetPrototypeMethod(t, \"exec\", Exec);",
          "21:     Nan::SetPrototypeMethod(t, \"wait\", Wait);",
          "22:     Nan::SetPrototypeMethod(t, \"loadExtension\", LoadExtension);",
          "23:     Nan::SetPrototypeMethod(t, \"serialize\", Serialize);",
          "24:     Nan::SetPrototypeMethod(t, \"parallelize\", Parallelize);",
          "25:     Nan::SetPrototypeMethod(t, \"configure\", Configure);",
          "26:     Nan::SetPrototypeMethod(t, \"interrupt\", Interrupt);",
          "30:     constructor_template.Reset(t);",
          "32:     Nan::Set(target, Nan::New(\"Database\").ToLocalChecked(),",
          "33:         Nan::GetFunction(t).ToLocalChecked());",
          "37:     Nan::HandleScope scope;",
          "41:         Local<Value> argv[] = { exception };",
          "47:             Local<Function> cb = Nan::New(call->baton->callback);",
          "",
          "[Added Lines]",
          "9: Napi::FunctionReference Database::constructor;",
          "11: Napi::Object Database::Init(Napi::Env env, Napi::Object exports) {",
          "12:     Napi::HandleScope scope(env);",
          "14:     Napi::FunctionReference t = Napi::Function::New(env, New);",
          "17:     t->SetClassName(Napi::String::New(env, \"Database\"));",
          "19:     InstanceMethod(\"close\", &Close),",
          "20:     InstanceMethod(\"exec\", &Exec),",
          "21:     InstanceMethod(\"wait\", &Wait),",
          "22:     InstanceMethod(\"loadExtension\", &LoadExtension),",
          "23:     InstanceMethod(\"serialize\", &Serialize),",
          "24:     InstanceMethod(\"parallelize\", &Parallelize),",
          "25:     InstanceMethod(\"configure\", &Configure),",
          "26:     InstanceMethod(\"interrupt\", &Interrupt),",
          "30:     constructor.Reset(t);",
          "32:     (target).Set(Napi::String::New(env, \"Database\"),",
          "33:         Napi::GetFunction(t));",
          "37:     Napi::HandleScope scope(env);",
          "41:         Napi::Value argv[] = { exception };",
          "47:             Napi::Function cb = Napi::New(env, call->baton->callback);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         if (!called) {",
          "63:             EMIT_EVENT(handle(), 2, info);",
          "64:         }",
          "65:         return;",
          "",
          "[Removed Lines]",
          "62:             Local<Value> info[] = { Nan::New(\"error\").ToLocalChecked(), exception };",
          "",
          "[Added Lines]",
          "62:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82: }",
          "84: void Database::Schedule(Work_Callback callback, Baton* baton, bool exclusive) {",
          "87:     if (!open && locked) {",
          "88:         EXCEPTION(\"Database is closed\", SQLITE_MISUSE, exception);",
          "90:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "92:             TRY_CATCH_CALL(handle(), cb, 1, argv);",
          "93:         }",
          "94:         else {",
          "96:             EMIT_EVENT(handle(), 2, argv);",
          "97:         }",
          "98:         return;",
          "",
          "[Removed Lines]",
          "85:     Nan::HandleScope scope;",
          "89:         Local<Function> cb = Nan::New(baton->callback);",
          "91:             Local<Value> argv[] = { exception };",
          "95:             Local<Value> argv[] = { Nan::New(\"error\").ToLocalChecked(), exception };",
          "",
          "[Added Lines]",
          "85:     Napi::HandleScope scope(env);",
          "89:         Napi::Function cb = Napi::New(env, baton->callback);",
          "91:             Napi::Value argv[] = { exception };",
          "95:             Napi::Value argv[] = { Napi::String::New(env, \"error\"), exception };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:     }",
          "108: }",
          "111:     if (!info.IsConstructCall()) {",
          "113:     }",
          "115:     REQUIRE_ARGUMENT_STRING(0, filename);",
          "116:     int pos = 1;",
          "118:     int mode;",
          "121:     } else {",
          "122:         mode = SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_FULLMUTEX;",
          "123:     }",
          "128:     }",
          "130:     Database* db = new Database();",
          "131:     db->Wrap(info.This());",
          "137:     OpenBaton* baton = new OpenBaton(db, callback, *filename, mode);",
          "138:     Work_BeginOpen(baton);",
          "141: }",
          "143: void Database::Work_BeginOpen(Baton* baton) {",
          "",
          "[Removed Lines]",
          "110: NAN_METHOD(Database::New) {",
          "112:         return Nan::ThrowTypeError(\"Use the new operator to create new Database objects\");",
          "119:     if (info.Length() >= pos && info[pos]->IsInt32()) {",
          "120:         mode = Nan::To<int>(info[pos++]).FromJust();",
          "125:     Local<Function> callback;",
          "126:     if (info.Length() >= pos && info[pos]->IsFunction()) {",
          "127:         callback = Local<Function>::Cast(info[pos++]);",
          "133:     Nan::ForceSet(info.This(), Nan::New(\"filename\").ToLocalChecked(), info[0].As<String>(), ReadOnly);",
          "134:     Nan::ForceSet(info.This(), Nan::New(\"mode\").ToLocalChecked(), Nan::New(mode), ReadOnly);",
          "140:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "110: Napi::Value Database::New(const Napi::CallbackInfo& info) {",
          "112:         Napi::TypeError::New(env, \"Use the new operator to create new Database objects\").ThrowAsJavaScriptException();",
          "113:         return env.Null();",
          "120:     if (info.Length() >= pos && info[pos].IsNumber()) {",
          "121:         mode = info[pos++].As<Napi::Number>().Int32Value();",
          "126:     Napi::Function callback;",
          "127:     if (info.Length() >= pos && info[pos].IsFunction()) {",
          "128:         callback = info[pos++].As<Napi::Function>();",
          "134:     info.This().DefineProperty(Napi::String::New(env, \"filename\"), info[0].As<Napi::String>(), ReadOnly);",
          "135:     info.This().DefineProperty(Napi::String::New(env, \"mode\"), Napi::New(env, mode), ReadOnly);",
          "141:     return info.This();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169: }",
          "171: void Database::Work_AfterOpen(uv_work_t* req) {",
          "174:     OpenBaton* baton = static_cast<OpenBaton*>(req->data);",
          "175:     Database* db = baton->db;",
          "178:     if (baton->status != SQLITE_OK) {",
          "179:         EXCEPTION(baton->message, baton->status, exception);",
          "180:         argv[0] = exception;",
          "181:     }",
          "182:     else {",
          "183:         db->open = true;",
          "185:     }",
          "189:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "190:         TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "191:     }",
          "192:     else if (!db->open) {",
          "194:         EMIT_EVENT(db->handle(), 2, info);",
          "195:     }",
          "197:     if (db->open) {",
          "199:         EMIT_EVENT(db->handle(), 1, info);",
          "200:         db->Process();",
          "201:     }",
          "",
          "[Removed Lines]",
          "172:     Nan::HandleScope scope;",
          "177:     Local<Value> argv[1];",
          "184:         argv[0] = Nan::Null();",
          "187:     Local<Function> cb = Nan::New(baton->callback);",
          "193:         Local<Value> info[] = { Nan::New(\"error\").ToLocalChecked(), argv[0] };",
          "198:         Local<Value> info[] = { Nan::New(\"open\").ToLocalChecked() };",
          "",
          "[Added Lines]",
          "173:     Napi::HandleScope scope(env);",
          "178:     Napi::Value argv[1];",
          "185:         argv[0] = env.Null();",
          "188:     Napi::Function cb = Napi::New(env, baton->callback);",
          "194:         Napi::Value info[] = { Napi::String::New(env, \"error\"), argv[0] };",
          "199:         Napi::Value info[] = { Napi::String::New(env, \"open\") };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203:     delete baton;",
          "204: }",
          "209: }",
          "213:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "215:     Baton* baton = new Baton(db, callback);",
          "216:     db->Schedule(Work_BeginClose, baton, true);",
          "219: }",
          "221: void Database::Work_BeginClose(Baton* baton) {",
          "",
          "[Removed Lines]",
          "206: NAN_GETTER(Database::OpenGetter) {",
          "207:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info.This());",
          "208:     info.GetReturnValue().Set(db->open);",
          "211: NAN_METHOD(Database::Close) {",
          "212:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info.This());",
          "218:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "207: Napi::Value Database::OpenGetter(const Napi::CallbackInfo& info) {",
          "208:     Database* db = this;",
          "209:     return db->open;",
          "212: Napi::Value Database::Close(const Napi::CallbackInfo& info) {",
          "213:     Database* db = this;",
          "219:     return info.This();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "247: }",
          "249: void Database::Work_AfterClose(uv_work_t* req) {",
          "252:     Baton* baton = static_cast<Baton*>(req->data);",
          "253:     Database* db = baton->db;",
          "255:     db->closing = false;",
          "258:     if (baton->status != SQLITE_OK) {",
          "259:         EXCEPTION(baton->message, baton->status, exception);",
          "260:         argv[0] = exception;",
          "",
          "[Removed Lines]",
          "250:     Nan::HandleScope scope;",
          "257:     Local<Value> argv[1];",
          "",
          "[Added Lines]",
          "251:     Napi::HandleScope scope(env);",
          "258:     Napi::Value argv[1];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "263:         db->open = false;",
          "267:     }",
          "272:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "273:         TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "274:     }",
          "275:     else if (db->open) {",
          "277:         EMIT_EVENT(db->handle(), 2, info);",
          "278:     }",
          "280:     if (!db->open) {",
          "282:         EMIT_EVENT(db->handle(), 1, info);",
          "283:         db->Process();",
          "284:     }",
          "",
          "[Removed Lines]",
          "266:         argv[0] = Nan::Null();",
          "269:     Local<Function> cb = Nan::New(baton->callback);",
          "276:         Local<Value> info[] = { Nan::New(\"error\").ToLocalChecked(), argv[0] };",
          "281:         Local<Value> info[] = { Nan::New(\"close\").ToLocalChecked(), argv[0] };",
          "",
          "[Added Lines]",
          "267:         argv[0] = env.Null();",
          "270:     Napi::Function cb = Napi::New(env, baton->callback);",
          "277:         Napi::Value info[] = { Napi::String::New(env, \"error\"), argv[0] };",
          "282:         Napi::Value info[] = { Napi::String::New(env, \"close\"), argv[0] };",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "286:     delete baton;",
          "287: }",
          "291:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "293:     bool before = db->serialize;",
          "",
          "[Removed Lines]",
          "289: NAN_METHOD(Database::Serialize) {",
          "290:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info.This());",
          "",
          "[Added Lines]",
          "290: Napi::Value Database::Serialize(const Napi::CallbackInfo& info) {",
          "291:     Database* db = this;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "301:     db->Process();",
          "304: }",
          "308:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "310:     bool before = db->serialize;",
          "",
          "[Removed Lines]",
          "303:     info.GetReturnValue().Set(info.This());",
          "306: NAN_METHOD(Database::Parallelize) {",
          "307:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info.This());",
          "",
          "[Added Lines]",
          "304:     return info.This();",
          "307: Napi::Value Database::Parallelize(const Napi::CallbackInfo& info) {",
          "308:     Database* db = this;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "318:     db->Process();",
          "321: }",
          "326:     REQUIRE_ARGUMENTS(2);",
          "330:         Baton* baton = new Baton(db, handle);",
          "331:         db->Schedule(RegisterTraceCallback, baton);",
          "332:     }",
          "335:         Baton* baton = new Baton(db, handle);",
          "336:         db->Schedule(RegisterProfileCallback, baton);",
          "337:     }",
          "341:         }",
          "343:         Baton* baton = new Baton(db, handle);",
          "345:         db->Schedule(SetBusyTimeout, baton);",
          "346:     }",
          "347:     else {",
          "349: #if V8_MAJOR_VERSION > 6",
          "350:             info.GetIsolate(),",
          "351: #endif",
          "354:         )));",
          "355:     }",
          "357:     db->Process();",
          "360: }",
          "365:     if (!db->open) {",
          "367:     }",
          "369:     if (db->closing) {",
          "371:     }",
          "373:     sqlite3_interrupt(db->_handle);",
          "375: }",
          "377: void Database::SetBusyTimeout(Baton* baton) {",
          "",
          "[Removed Lines]",
          "320:     info.GetReturnValue().Set(info.This());",
          "323: NAN_METHOD(Database::Configure) {",
          "324:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info.This());",
          "328:     if (Nan::Equals(info[0], Nan::New(\"trace\").ToLocalChecked()).FromJust()) {",
          "329:         Local<Function> handle;",
          "333:     else if (Nan::Equals(info[0], Nan::New(\"profile\").ToLocalChecked()).FromJust()) {",
          "334:         Local<Function> handle;",
          "338:     else if (Nan::Equals(info[0], Nan::New(\"busyTimeout\").ToLocalChecked()).FromJust()) {",
          "339:         if (!info[1]->IsInt32()) {",
          "340:             return Nan::ThrowTypeError(\"Value must be an integer\");",
          "342:         Local<Function> handle;",
          "344:         baton->status = Nan::To<int>(info[1]).FromJust();",
          "348:         return Nan::ThrowError(Exception::Error(String::Concat(",
          "352:             Nan::To<String>(info[0]).ToLocalChecked(),",
          "353:             Nan::New(\" is not a valid configuration option\").ToLocalChecked()",
          "359:     info.GetReturnValue().Set(info.This());",
          "362: NAN_METHOD(Database::Interrupt) {",
          "363:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info.This());",
          "366:         return Nan::ThrowError(\"Database is not open\");",
          "370:         return Nan::ThrowError(\"Database is closing\");",
          "374:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "321:     return info.This();",
          "324: Napi::Value Database::Configure(const Napi::CallbackInfo& info) {",
          "325:     Database* db = this;",
          "329:     if (info[0].StrictEquals( Napi::String::New(env, \"trace\"))) {",
          "330:         Napi::Function handle;",
          "334:     else if (info[0].StrictEquals( Napi::String::New(env, \"profile\"))) {",
          "335:         Napi::Function handle;",
          "339:     else if (info[0].StrictEquals( Napi::String::New(env, \"busyTimeout\"))) {",
          "340:         if (!info[1].IsNumber()) {",
          "341:             Napi::TypeError::New(env, \"Value must be an integer\").ThrowAsJavaScriptException();",
          "342:             return env.Null();",
          "344:         Napi::Function handle;",
          "346:         baton->status = info[1].As<Napi::Number>().Int32Value();",
          "350:         return Napi::ThrowError(Exception::Error(String::Concat(",
          "354:             info[0].To<Napi::String>(),",
          "355:             Napi::String::New(env, \" is not a valid configuration option\")",
          "361:     return info.This();",
          "364: Napi::Value Database::Interrupt(const Napi::CallbackInfo& info) {",
          "365:     Database* db = this;",
          "368:         Napi::Error::New(env, \"Database is not open\").ThrowAsJavaScriptException();",
          "369:         return env.Null();",
          "373:         Napi::Error::New(env, \"Database is closing\").ThrowAsJavaScriptException();",
          "374:         return env.Null();",
          "378:     return info.This();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "413: void Database::TraceCallback(Database* db, std::string* sql) {",
          "420:     };",
          "421:     EMIT_EVENT(db->handle(), 2, argv);",
          "422:     delete sql;",
          "",
          "[Removed Lines]",
          "415:     Nan::HandleScope scope;",
          "417:     Local<Value> argv[] = {",
          "418:         Nan::New(\"trace\").ToLocalChecked(),",
          "419:         Nan::New(sql->c_str()).ToLocalChecked()",
          "",
          "[Added Lines]",
          "419:     Napi::HandleScope scope(env);",
          "421:     Napi::Value argv[] = {",
          "422:         Napi::String::New(env, \"trace\"),",
          "423:         Napi::New(env, sql->c_str())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "452: }",
          "454: void Database::ProfileCallback(Database *db, ProfileInfo* info) {",
          "461:     };",
          "462:     EMIT_EVENT(db->handle(), 3, argv);",
          "463:     delete info;",
          "",
          "[Removed Lines]",
          "455:     Nan::HandleScope scope;",
          "457:     Local<Value> argv[] = {",
          "458:         Nan::New(\"profile\").ToLocalChecked(),",
          "459:         Nan::New(info->sql.c_str()).ToLocalChecked(),",
          "460:         Nan::New<Number>((double)info->nsecs / 1000000.0)",
          "",
          "[Added Lines]",
          "459:     Napi::HandleScope scope(env);",
          "461:     Napi::Value argv[] = {",
          "462:         Napi::String::New(env, \"profile\"),",
          "463:         Napi::New(env, info->sql.c_str()),",
          "464:         Napi::Number::New(env, (double)info->nsecs / 1000000.0)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "496: }",
          "498: void Database::UpdateCallback(Database *db, UpdateInfo* info) {",
          "506:     };",
          "507:     EMIT_EVENT(db->handle(), 4, argv);",
          "508:     delete info;",
          "509: }",
          "514:     REQUIRE_ARGUMENT_STRING(0, sql);",
          "515:     OPTIONAL_ARGUMENT_FUNCTION(1, callback);",
          "",
          "[Removed Lines]",
          "499:     Nan::HandleScope scope;",
          "501:     Local<Value> argv[] = {",
          "502:         Nan::New(sqlite_authorizer_string(info->type)).ToLocalChecked(),",
          "503:         Nan::New(info->database.c_str()).ToLocalChecked(),",
          "504:         Nan::New(info->table.c_str()).ToLocalChecked(),",
          "505:         Nan::New<Number>(info->rowid),",
          "511: NAN_METHOD(Database::Exec) {",
          "512:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info.This());",
          "",
          "[Added Lines]",
          "503:     Napi::HandleScope scope(env);",
          "505:     Napi::Value argv[] = {",
          "506:         Napi::New(env, sqlite_authorizer_string(info->type)),",
          "507:         Napi::New(env, info->database.c_str()),",
          "508:         Napi::New(env, info->table.c_str()),",
          "509:         Napi::Number::New(env, info->rowid),",
          "515: Napi::Value Database::Exec(const Napi::CallbackInfo& info) {",
          "516:     Database* db = this;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "517:     Baton* baton = new ExecBaton(db, callback, *sql);",
          "518:     db->Schedule(Work_BeginExec, baton, true);",
          "521: }",
          "523: void Database::Work_BeginExec(Baton* baton) {",
          "",
          "[Removed Lines]",
          "520:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "524:     return info.This();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "549: }",
          "551: void Database::Work_AfterExec(uv_work_t* req) {",
          "554:     ExecBaton* baton = static_cast<ExecBaton*>(req->data);",
          "555:     Database* db = baton->db;",
          "559:     if (baton->status != SQLITE_OK) {",
          "560:         EXCEPTION(baton->message, baton->status, exception);",
          "562:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "564:             TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "565:         }",
          "566:         else {",
          "568:             EMIT_EVENT(db->handle(), 2, info);",
          "569:         }",
          "570:     }",
          "571:     else if (!cb.IsEmpty() && cb->IsFunction()) {",
          "573:         TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "574:     }",
          "",
          "[Removed Lines]",
          "552:     Nan::HandleScope scope;",
          "557:     Local<Function> cb = Nan::New(baton->callback);",
          "563:             Local<Value> argv[] = { exception };",
          "567:             Local<Value> info[] = { Nan::New(\"error\").ToLocalChecked(), exception };",
          "572:         Local<Value> argv[] = { Nan::Null() };",
          "",
          "[Added Lines]",
          "556:     Napi::HandleScope scope(env);",
          "561:     Napi::Function cb = Napi::New(env, baton->callback);",
          "567:             Napi::Value argv[] = { exception };",
          "571:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "576:         Napi::Value argv[] = { env.Null() };",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "578:     delete baton;",
          "579: }",
          "584:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "586:     Baton* baton = new Baton(db, callback);",
          "587:     db->Schedule(Work_Wait, baton, true);",
          "590: }",
          "592: void Database::Work_Wait(Baton* baton) {",
          "595:     assert(baton->db->locked);",
          "596:     assert(baton->db->open);",
          "597:     assert(baton->db->_handle);",
          "598:     assert(baton->db->pending == 0);",
          "601:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "603:         TRY_CATCH_CALL(baton->db->handle(), cb, 1, argv);",
          "604:     }",
          "",
          "[Removed Lines]",
          "581: NAN_METHOD(Database::Wait) {",
          "582:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info.This());",
          "589:     info.GetReturnValue().Set(info.This());",
          "593:     Nan::HandleScope scope;",
          "600:     Local<Function> cb = Nan::New(baton->callback);",
          "602:         Local<Value> argv[] = { Nan::Null() };",
          "",
          "[Added Lines]",
          "585: Napi::Value Database::Wait(const Napi::CallbackInfo& info) {",
          "586:     Database* db = this;",
          "593:     return info.This();",
          "597:     Napi::HandleScope scope(env);",
          "604:     Napi::Function cb = Napi::New(env, baton->callback);",
          "606:         Napi::Value argv[] = { env.Null() };",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "608:     delete baton;",
          "609: }",
          "614:     REQUIRE_ARGUMENT_STRING(0, filename);",
          "615:     OPTIONAL_ARGUMENT_FUNCTION(1, callback);",
          "",
          "[Removed Lines]",
          "611: NAN_METHOD(Database::LoadExtension) {",
          "612:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info.This());",
          "",
          "[Added Lines]",
          "615: Napi::Value Database::LoadExtension(const Napi::CallbackInfo& info) {",
          "616:     Database* db = this;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "617:     Baton* baton = new LoadExtensionBaton(db, callback, *filename);",
          "618:     db->Schedule(Work_BeginLoadExtension, baton, true);",
          "621: }",
          "623: void Database::Work_BeginLoadExtension(Baton* baton) {",
          "",
          "[Removed Lines]",
          "620:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "624:     return info.This();",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "652: }",
          "654: void Database::Work_AfterLoadExtension(uv_work_t* req) {",
          "657:     LoadExtensionBaton* baton = static_cast<LoadExtensionBaton*>(req->data);",
          "658:     Database* db = baton->db;",
          "661:     if (baton->status != SQLITE_OK) {",
          "662:         EXCEPTION(baton->message, baton->status, exception);",
          "664:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "666:             TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "667:         }",
          "668:         else {",
          "670:             EMIT_EVENT(db->handle(), 2, info);",
          "671:         }",
          "672:     }",
          "673:     else if (!cb.IsEmpty() && cb->IsFunction()) {",
          "675:         TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "676:     }",
          "",
          "[Removed Lines]",
          "655:     Nan::HandleScope scope;",
          "659:     Local<Function> cb = Nan::New(baton->callback);",
          "665:             Local<Value> argv[] = { exception };",
          "669:             Local<Value> info[] = { Nan::New(\"error\").ToLocalChecked(), exception };",
          "674:         Local<Value> argv[] = { Nan::Null() };",
          "",
          "[Added Lines]",
          "659:     Napi::HandleScope scope(env);",
          "663:     Napi::Function cb = Napi::New(env, baton->callback);",
          "669:             Napi::Value argv[] = { exception };",
          "673:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "678:         Napi::Value argv[] = { env.Null() };",
          "",
          "---------------"
        ],
        "src/database.h||src/database.h": [
          "File: src/database.h -> src/database.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <queue>",
          "9: #include <sqlite3.h>",
          "12: #include \"async.h\"",
          "16: namespace node_sqlite3 {",
          "18: class Database;",
          "22: public:",
          "31:     }",
          "33:     struct Baton {",
          "34:         uv_work_t request;",
          "35:         Database* db;",
          "37:         int status;",
          "38:         std::string message;",
          "41:                 db(db_), status(SQLITE_OK) {",
          "42:             db->Ref();",
          "43:             request.data = this;",
          "",
          "[Removed Lines]",
          "10: #include <nan.h>",
          "14: using namespace v8;",
          "21: class Database : public Nan::ObjectWrap {",
          "23:     static Nan::Persistent<FunctionTemplate> constructor_template;",
          "24:     static NAN_MODULE_INIT(Init);",
          "26:     static inline bool HasInstance(Local<Value> val) {",
          "27:         Nan::HandleScope scope;",
          "28:         if (!val->IsObject()) return false;",
          "29:         Local<Object> obj = val.As<Object>();",
          "30:         return Nan::New(constructor_template)->HasInstance(obj);",
          "36:         Nan::Persistent<Function> callback;",
          "40:         Baton(Database* db_, Local<Function> cb_) :",
          "",
          "[Added Lines]",
          "10: #include <napi.h>",
          "11: #include <uv.h>",
          "15: using namespace Napi;",
          "22: class Database : public Napi::ObjectWrap<Database> {",
          "24:     static Napi::FunctionReference constructor;",
          "25:     static Napi::Object Init(Napi::Env env, Napi::Object exports);",
          "27:     static inline bool HasInstance(Napi::Value val) {",
          "28:         Napi::Env env = val.Env();",
          "29:         Napi::HandleScope scope(env);",
          "30:         if (!val.IsObject()) return false;",
          "31:         Napi::Object obj = val.As<Napi::Object>();",
          "32:         return Napi::New(env, constructor)->HasInstance(obj);",
          "38:         Napi::FunctionReference callback;",
          "42:         Baton(Database* db_, Napi::Function cb_) :",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     struct OpenBaton : Baton {",
          "53:         std::string filename;",
          "54:         int mode;",
          "56:             Baton(db_, cb_), filename(filename_), mode(mode_) {}",
          "57:     };",
          "59:     struct ExecBaton : Baton {",
          "60:         std::string sql;",
          "62:             Baton(db_, cb_), sql(sql_) {}",
          "63:     };",
          "65:     struct LoadExtensionBaton : Baton {",
          "66:         std::string filename;",
          "68:             Baton(db_, cb_), filename(filename_) {}",
          "69:     };",
          "",
          "[Removed Lines]",
          "55:         OpenBaton(Database* db_, Local<Function> cb_, const char* filename_, int mode_) :",
          "61:         ExecBaton(Database* db_, Local<Function> cb_, const char* sql_) :",
          "67:         LoadExtensionBaton(Database* db_, Local<Function> cb_, const char* filename_) :",
          "",
          "[Added Lines]",
          "57:         OpenBaton(Database* db_, Napi::Function cb_, const char* filename_, int mode_) :",
          "63:         ExecBaton(Database* db_, Napi::Function cb_, const char* sql_) :",
          "69:         LoadExtensionBaton(Database* db_, Napi::Function cb_, const char* filename_) :",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     friend class Backup;",
          "103: protected:",
          "105:         _handle(NULL),",
          "106:         open(false),",
          "107:         closing(false),",
          "",
          "[Removed Lines]",
          "104:     Database() : Nan::ObjectWrap(),",
          "",
          "[Added Lines]",
          "106:     Database() : Napi::ObjectWrap<Database>(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:         open = false;",
          "121:     }",
          "124:     static void Work_BeginOpen(Baton* baton);",
          "125:     static void Work_Open(uv_work_t* req);",
          "126:     static void Work_AfterOpen(uv_work_t* req);",
          "130:     void Schedule(Work_Callback callback, Baton* baton, bool exclusive = false);",
          "131:     void Process();",
          "134:     static void Work_BeginExec(Baton* baton);",
          "135:     static void Work_Exec(uv_work_t* req);",
          "136:     static void Work_AfterExec(uv_work_t* req);",
          "139:     static void Work_Wait(Baton* baton);",
          "142:     static void Work_BeginClose(Baton* baton);",
          "143:     static void Work_Close(uv_work_t* req);",
          "144:     static void Work_AfterClose(uv_work_t* req);",
          "147:     static void Work_BeginLoadExtension(Baton* baton);",
          "148:     static void Work_LoadExtension(uv_work_t* req);",
          "149:     static void Work_AfterLoadExtension(uv_work_t* req);",
          "158:     static void SetBusyTimeout(Baton* baton);",
          "",
          "[Removed Lines]",
          "123:     static NAN_METHOD(New);",
          "128:     static NAN_GETTER(OpenGetter);",
          "133:     static NAN_METHOD(Exec);",
          "138:     static NAN_METHOD(Wait);",
          "141:     static NAN_METHOD(Close);",
          "146:     static NAN_METHOD(LoadExtension);",
          "151:     static NAN_METHOD(Serialize);",
          "152:     static NAN_METHOD(Parallelize);",
          "154:     static NAN_METHOD(Configure);",
          "156:     static NAN_METHOD(Interrupt);",
          "",
          "[Added Lines]",
          "125:     static Napi::Value New(const Napi::CallbackInfo& info);",
          "130:     Napi::Value OpenGetter(const Napi::CallbackInfo& info);",
          "135:     static Napi::Value Exec(const Napi::CallbackInfo& info);",
          "140:     static Napi::Value Wait(const Napi::CallbackInfo& info);",
          "143:     static Napi::Value Close(const Napi::CallbackInfo& info);",
          "148:     static Napi::Value LoadExtension(const Napi::CallbackInfo& info);",
          "153:     static Napi::Value Serialize(const Napi::CallbackInfo& info);",
          "154:     static Napi::Value Parallelize(const Napi::CallbackInfo& info);",
          "156:     static Napi::Value Configure(const Napi::CallbackInfo& info);",
          "158:     static Napi::Value Interrupt(const Napi::CallbackInfo& info);",
          "",
          "---------------"
        ],
        "src/macros.h||src/macros.h": [
          "File: src/macros.h -> src/macros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #define REQUIRE_ARGUMENTS(n)                                                   \\",
          "9:     if (info.Length() < (n)) {                                                 \\",
          "11:     }",
          "14: #define REQUIRE_ARGUMENT_EXTERNAL(i, var)                                      \\",
          "17:     }                                                                          \\",
          "21: #define REQUIRE_ARGUMENT_FUNCTION(i, var)                                      \\",
          "24:     }                                                                          \\",
          "28: #define REQUIRE_ARGUMENT_STRING(i, var)                                        \\",
          "31:     }                                                                          \\",
          "34: #define REQUIRE_ARGUMENT_INTEGER(i, var)                                        \\",
          "37:     }                                                                          \\",
          "40: #define OPTIONAL_ARGUMENT_FUNCTION(i, var)                                     \\",
          "45:         }                                                                      \\",
          "47:     }",
          "",
          "[Removed Lines]",
          "10:         return Nan::ThrowTypeError(\"Expected \" #n \"arguments\");                \\",
          "15:     if (info.Length() <= (i) || !info[i]->IsExternal()) {                      \\",
          "16:         return Nan::ThrowTypeError(\"Argument \" #i \" invalid\");                 \\",
          "18:     Local<External> var = Local<External>::Cast(info[i]);",
          "22:     if (info.Length() <= (i) || !info[i]->IsFunction()) {                      \\",
          "23:         return Nan::ThrowTypeError(\"Argument \" #i \" must be a function\");      \\",
          "25:     Local<Function> var = Local<Function>::Cast(info[i]);",
          "29:     if (info.Length() <= (i) || !info[i]->IsString()) {                        \\",
          "30:         return Nan::ThrowTypeError(\"Argument \" #i \" must be a string\");        \\",
          "32:     Nan::Utf8String var(info[i]);",
          "35:     if (info.Length() <= (i) || !info[i]->IsInt32()) {                        \\",
          "36:         return Nan::ThrowTypeError(\"Argument \" #i \" must be an integer\");        \\",
          "38:     int var(Nan::To<int32_t>(info[i]).FromJust());",
          "41:     Local<Function> var;                                                       \\",
          "42:     if (info.Length() > i && !info[i]->IsUndefined()) {                        \\",
          "43:         if (!info[i]->IsFunction()) {                                          \\",
          "44:             return Nan::ThrowTypeError(\"Argument \" #i \" must be a function\");  \\",
          "46:         var = Local<Function>::Cast(info[i]);                                  \\",
          "",
          "[Added Lines]",
          "10:         Napi::TypeError::New(env, \"Expected \" #n \"arguments\").ThrowAsJavaScriptException();",
          "11:         return env.Null();                \\",
          "16:     if (info.Length() <= (i) || !info[i].IsExternal()) {                      \\",
          "17:         Napi::TypeError::New(env, \"Argument \" #i \" invalid\").ThrowAsJavaScriptException();",
          "18:         return env.Null();                 \\",
          "20:     Napi::External var = info[i].As<Napi::External>();",
          "24:     if (info.Length() <= (i) || !info[i].IsFunction()) {                      \\",
          "25:         Napi::TypeError::New(env, \"Argument \" #i \" must be a function\").ThrowAsJavaScriptException();",
          "26:         return env.Null();      \\",
          "28:     Napi::Function var = info[i].As<Napi::Function>();",
          "32:     if (info.Length() <= (i) || !info[i].IsString()) {                        \\",
          "33:         Napi::TypeError::New(env, \"Argument \" #i \" must be a string\").ThrowAsJavaScriptException();",
          "34:         return env.Null();        \\",
          "36:     std::string var = info[i].As<Napi::String>();",
          "39:     if (info.Length() <= (i) || !info[i].IsNumber()) {                        \\",
          "40:         Napi::TypeError::New(env, \"Argument \" #i \" must be an integer\").ThrowAsJavaScriptException();",
          "41:         return env.Null();        \\",
          "43:     int var(info[i].As<Napi::Number>().Int32Value());",
          "46:     Napi::Function var;                                                       \\",
          "47:     if (info.Length() > i && !info[i].IsUndefined()) {                        \\",
          "48:         if (!info[i].IsFunction()) {                                          \\",
          "49:             Napi::TypeError::New(env, \"Argument \" #i \" must be a function\").ThrowAsJavaScriptException();",
          "50:             return env.Null();  \\",
          "52:         var = info[i].As<Napi::Function>();                                  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     if (info.Length() <= (i)) {                                                \\",
          "53:         var = (default);                                                       \\",
          "54:     }                                                                          \\",
          "57:     }                                                                          \\",
          "58:     else {                                                                     \\",
          "60:     }",
          "63: #define DEFINE_CONSTANT_INTEGER(target, constant, name)                        \\",
          "68:     );",
          "70: #define DEFINE_CONSTANT_STRING(target, constant, name)                         \\",
          "75:     );",
          "78: #define NODE_SET_GETTER(target, name, function)                                \\",
          "82: #define NODE_SET_SETTER(target, name, getter, setter)                          \\",
          "86: #define GET_STRING(source, name, property)                                     \\",
          "90: #define GET_INTEGER(source, name, prop)                                        \\",
          "94: #define EXCEPTION(msg, errno, name)                                            \\",
          "96:         std::string(sqlite_code_string(errno)) +                               \\",
          "97:         std::string(\": \") + std::string(msg)                                   \\",
          "104: #define EMIT_EVENT(obj, argc, argv)                                            \\",
          "105:     TRY_CATCH_CALL((obj),                                                      \\",
          "108:         argc, argv                                                             \\",
          "109:     );",
          "111: #define TRY_CATCH_CALL(context, callback, argc, argv)                          \\",
          "114: #define WORK_DEFINITION(name)                                                  \\",
          "116:     static void Work_Begin##name(Baton* baton);                                \\",
          "117:     static void Work_##name(uv_work_t* req);                                   \\",
          "118:     static void Work_After##name(uv_work_t* req);",
          "",
          "[Removed Lines]",
          "55:     else if (info[i]->IsInt32()) {                                             \\",
          "56:         var = Nan::To<int32_t>(info[i]).FromJust();                            \\",
          "59:         return Nan::ThrowTypeError(\"Argument \" #i \" must be an integer\");      \\",
          "64:     Nan::ForceSet(target,                                                      \\",
          "65:         Nan::New(#name).ToLocalChecked(),                                      \\",
          "66:         Nan::New<Integer>(constant),                                           \\",
          "67:         static_cast<PropertyAttribute>(ReadOnly | DontDelete)                  \\",
          "71:     Nan::ForceSet(target,                                                      \\",
          "72:         Nan::New(#name).ToLocalChecked(),                                      \\",
          "73:         Nan::New(constant).ToLocalChecked(),                                   \\",
          "74:         static_cast<PropertyAttribute>(ReadOnly | DontDelete)                  \\",
          "79:     Nan::SetAccessor((target)->InstanceTemplate(),                             \\",
          "80:         Nan::New(name).ToLocalChecked(), (function));",
          "83:     Nan::SetAccessor((target)->InstanceTemplate(),                             \\",
          "84:         Nan::New(name).ToLocalChecked(), getter, setter);",
          "87:     Nan::Utf8String name(Nan::Get(source,                                      \\",
          "88:         Nan::New(prop).ToLocalChecked()).ToLocalChecked());",
          "91:     int name = Nan::To<int>(Nan::Get(source,                                   \\",
          "92:         Nan::New(property).ToLocalChecked()).ToLocalChecked()).FromJust();",
          "95:     Local<Value> name = Exception::Error(Nan::New(                             \\",
          "98:     ).ToLocalChecked());                                                                        \\",
          "99:     Local<Object> name ##_obj = name.As<Object>();                             \\",
          "100:     Nan::Set(name ##_obj, Nan::New(\"errno\").ToLocalChecked(), Nan::New(errno));\\",
          "101:     Nan::Set(name ##_obj, Nan::New(\"code\").ToLocalChecked(),                   \\",
          "102:         Nan::New(sqlite_code_string(errno)).ToLocalChecked());",
          "106:         Nan::Get(obj,                                                          \\",
          "107:             Nan::New(\"emit\").ToLocalChecked()).ToLocalChecked().As<Function>(),\\",
          "112:     Nan::MakeCallback((context), (callback), (argc), (argv))",
          "115:     static NAN_METHOD(name);                                                   \\",
          "",
          "[Added Lines]",
          "61:     else if (info[i].IsNumber()) {                                             \\",
          "62:         var = info[i].As<Napi::Number>().Int32Value();                            \\",
          "65:         Napi::TypeError::New(env, \"Argument \" #i \" must be an integer\").ThrowAsJavaScriptException();",
          "66:         return env.Null();      \\",
          "71:     target->DefineProperty(                                                     \\",
          "72:         Napi::New(env, #name),                                      \\",
          "73:         Napi::Number::New(env, constant),                                           \\",
          "74:         static_cast<napi_property_attributes>(napi_enumerable | napi_configurable)                  \\",
          "78:     target->DefineProperty(                                                     \\",
          "79:         Napi::New(env, #name),                                      \\",
          "80:         Napi::New(env, constant),                                   \\",
          "81:         static_cast<napi_property_attributes>(napi_enumerable | napi_configurable)                  \\",
          "86:     Napi::SetAccessor((target)->InstanceTemplate(),                             \\",
          "87:         Napi::New(env, name), (function));",
          "90:     Napi::SetAccessor((target)->InstanceTemplate(),                             \\",
          "91:         Napi::New(env, name), getter, setter);",
          "94:     std::string name = (source).Get(\\",
          "95:         Napi::New(env, prop.As<Napi::String>()));",
          "98:     int name = Napi::To<int>((source).Get(\\",
          "99:         Napi::New(env, property)));",
          "102:     Napi::Value name = Exception::Error(Napi::New(env,                              \\",
          "105:     ));                                                                        \\",
          "106:     Napi::Object name ##_obj = name.As<Napi::Object>();                             \\",
          "107:     (name ##_obj).Set(Napi::String::New(env, \"errno\"), Napi::New(env, errno));\\",
          "108:     (name ##_obj).Set(Napi::String::New(env, \"code\"),                   \\",
          "109:         Napi::New(env, sqlite_code_string(errno)));",
          "113:         (obj).Get(\\",
          "114:             Napi::String::New(env, \"emit\")).As<Napi::Function>(),\\",
          "119:     (callback).MakeCallback((context), (argc), (argv))",
          "122:     static Napi::Value name(const Napi::CallbackInfo& info);                                                   \\",
          "",
          "---------------"
        ],
        "src/node_sqlite3.cc||src/node_sqlite3.cc": [
          "File: src/node_sqlite3.cc -> src/node_sqlite3.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: namespace {",
          "23:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_READONLY, OPEN_READONLY);",
          "24:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_READWRITE, OPEN_READWRITE);",
          "",
          "[Removed Lines]",
          "16: NAN_MODULE_INIT(RegisterModule) {",
          "17:     Nan::HandleScope scope;",
          "19:     Database::Init(target);",
          "20:     Statement::Init(target);",
          "21:     Backup::Init(target);",
          "",
          "[Added Lines]",
          "16: Napi::Object RegisterModule(Napi::Env env, Napi::Object exports) {",
          "17:     Napi::HandleScope scope(env);",
          "19:     Database::Init(env, target, module);",
          "20:     Statement::Init(env, target, module);",
          "21:     Backup::Init(env, target, module);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     }",
          "109: }",
          "",
          "[Removed Lines]",
          "111: NODE_MODULE(node_sqlite3, RegisterModule)",
          "",
          "[Added Lines]",
          "111: NODE_API_MODULE(node_sqlite3, RegisterModule)",
          "",
          "---------------"
        ],
        "src/statement.cc||src/statement.cc": [
          "File: src/statement.cc -> src/statement.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <string.h>",
          "3: #include <node_buffer.h>",
          "4: #include <node_version.h>",
          "",
          "[Removed Lines]",
          "2: #include <node.h>",
          "",
          "[Added Lines]",
          "2: #include <napi.h>",
          "3: #include <uv.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: using namespace node_sqlite3;",
          "33: }",
          "35: void Statement::Process() {",
          "",
          "[Removed Lines]",
          "12: Nan::Persistent<FunctionTemplate> Statement::constructor_template;",
          "14: NAN_MODULE_INIT(Statement::Init) {",
          "15:     Nan::HandleScope scope;",
          "17:     Local<FunctionTemplate> t = Nan::New<FunctionTemplate>(New);",
          "19:     t->InstanceTemplate()->SetInternalFieldCount(1);",
          "20:     t->SetClassName(Nan::New(\"Statement\").ToLocalChecked());",
          "22:     Nan::SetPrototypeMethod(t, \"bind\", Bind);",
          "23:     Nan::SetPrototypeMethod(t, \"get\", Get);",
          "24:     Nan::SetPrototypeMethod(t, \"run\", Run);",
          "25:     Nan::SetPrototypeMethod(t, \"all\", All);",
          "26:     Nan::SetPrototypeMethod(t, \"each\", Each);",
          "27:     Nan::SetPrototypeMethod(t, \"reset\", Reset);",
          "28:     Nan::SetPrototypeMethod(t, \"finalize\", Finalize);",
          "30:     constructor_template.Reset(t);",
          "31:     Nan::Set(target, Nan::New(\"Statement\").ToLocalChecked(),",
          "32:         Nan::GetFunction(t).ToLocalChecked());",
          "",
          "[Added Lines]",
          "13: Napi::FunctionReference Statement::constructor;",
          "15: Napi::Object Statement::Init(Napi::Env env, Napi::Object exports) {",
          "16:     Napi::HandleScope scope(env);",
          "18:     Napi::FunctionReference t = Napi::Function::New(env, New);",
          "21:     t->SetClassName(Napi::String::New(env, \"Statement\"));",
          "23:     InstanceMethod(\"bind\", &Bind),",
          "24:     InstanceMethod(\"get\", &Get),",
          "25:     InstanceMethod(\"run\", &Run),",
          "26:     InstanceMethod(\"all\", &All),",
          "27:     InstanceMethod(\"each\", &Each),",
          "28:     InstanceMethod(\"reset\", &Reset),",
          "29:     InstanceMethod(\"finalize\", &Finalize),",
          "31:     constructor.Reset(t);",
          "32:     (target).Set(Napi::String::New(env, \"Statement\"),",
          "33:         Napi::GetFunction(t));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: }",
          "62: template <class T> void Statement::Error(T* baton) {",
          "65:     Statement* stmt = baton->stmt;",
          "67:     assert(stmt->status != 0);",
          "68:     EXCEPTION(stmt->message, stmt->status, exception);",
          "72:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "74:         TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "75:     }",
          "76:     else {",
          "78:         EMIT_EVENT(stmt->handle(), 2, argv);",
          "79:     }",
          "80: }",
          "84:     if (!info.IsConstructCall()) {",
          "86:     }",
          "88:     int length = info.Length();",
          "90:     if (length <= 0 || !Database::HasInstance(info[0])) {",
          "92:     }",
          "95:     }",
          "98:     }",
          "105:     Statement* stmt = new Statement(db);",
          "106:     stmt->Wrap(info.This());",
          "110:     db->Schedule(Work_BeginPrepare, baton);",
          "113: }",
          "115: void Statement::Work_BeginPrepare(Database::Baton* baton) {",
          "",
          "[Removed Lines]",
          "63:     Nan::HandleScope scope;",
          "70:     Local<Function> cb = Nan::New(baton->callback);",
          "73:         Local<Value> argv[] = { exception };",
          "77:         Local<Value> argv[] = { Nan::New(\"error\").ToLocalChecked(), exception };",
          "83: NAN_METHOD(Statement::New) {",
          "85:         return Nan::ThrowTypeError(\"Use the new operator to create new Statement objects\");",
          "91:         return Nan::ThrowTypeError(\"Database object expected\");",
          "93:     else if (length <= 1 || !info[1]->IsString()) {",
          "94:         return Nan::ThrowTypeError(\"SQL query expected\");",
          "96:     else if (length > 2 && !info[2]->IsUndefined() && !info[2]->IsFunction()) {",
          "97:         return Nan::ThrowTypeError(\"Callback expected\");",
          "100:     Database* db = Nan::ObjectWrap::Unwrap<Database>(info[0].As<Object>());",
          "101:     Local<String> sql = Local<String>::Cast(info[1]);",
          "103:     Nan::ForceSet(info.This(),Nan::New(\"sql\").ToLocalChecked(), sql, ReadOnly);",
          "108:     PrepareBaton* baton = new PrepareBaton(db, Local<Function>::Cast(info[2]), stmt);",
          "109:     baton->sql = std::string(*Nan::Utf8String(sql));",
          "112:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "64:     Napi::HandleScope scope(env);",
          "71:     Napi::Function cb = Napi::New(env, baton->callback);",
          "74:         Napi::Value argv[] = { exception };",
          "78:         Napi::Value argv[] = { Napi::String::New(env, \"error\"), exception };",
          "84: Napi::Value Statement::New(const Napi::CallbackInfo& info) {",
          "86:         Napi::TypeError::New(env, \"Use the new operator to create new Statement objects\").ThrowAsJavaScriptException();",
          "87:         return env.Null();",
          "93:         Napi::TypeError::New(env, \"Database object expected\").ThrowAsJavaScriptException();",
          "94:         return env.Null();",
          "96:     else if (length <= 1 || !info[1].IsString()) {",
          "97:         Napi::TypeError::New(env, \"SQL query expected\").ThrowAsJavaScriptException();",
          "98:         return env.Null();",
          "100:     else if (length > 2 && !info[2].IsUndefined() && !info[2].IsFunction()) {",
          "101:         Napi::TypeError::New(env, \"Callback expected\").ThrowAsJavaScriptException();",
          "102:         return env.Null();",
          "105:     Database* db = info[0].As<Napi::Object>().Unwrap<Database>();",
          "106:     Napi::String sql = info[1].As<Napi::String>();",
          "108:     info.This().DefineProperty(Napi::String::New(env, \"sql\"), sql, ReadOnly);",
          "113:     PrepareBaton* baton = new PrepareBaton(db, info[2].As<Napi::Function>(), stmt);",
          "114:     baton->sql = std::string(sql->As<Napi::String>().Utf8Value().c_str());",
          "117:     return info.This();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145: }",
          "147: void Statement::Work_AfterPrepare(uv_work_t* req) {",
          "150:     STATEMENT_INIT(PrepareBaton);",
          "",
          "[Removed Lines]",
          "148:     Nan::HandleScope scope;",
          "",
          "[Added Lines]",
          "153:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:     }",
          "156:     else {",
          "157:         stmt->prepared = true;",
          "159:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "161:             TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "162:         }",
          "163:     }",
          "",
          "[Removed Lines]",
          "158:         Local<Function> cb = Nan::New(baton->callback);",
          "160:             Local<Value> argv[] = { Nan::Null() };",
          "",
          "[Added Lines]",
          "163:         Napi::Function cb = Napi::New(env, baton->callback);",
          "165:             Napi::Value argv[] = { env.Null() };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166: }",
          "168: template <class T> Values::Field*",
          "173:     }",
          "176:     }",
          "179:     }",
          "180:     else if (source->IsBoolean()) {",
          "182:     }",
          "183:     else if (source->IsNull()) {",
          "184:         return new Values::Null(pos);",
          "185:     }",
          "188:         return new Values::Blob(pos, Buffer::Length(buffer), Buffer::Data(buffer));",
          "189:     }",
          "190:     else if (source->IsDate()) {",
          "192:     }",
          "193:     else {",
          "194:         return NULL;",
          "195:     }",
          "196: }",
          "201:     if (last < 0) last = info.Length();",
          "203:     if (last > start && info[last - 1]->IsFunction()) {",
          "205:         last--;",
          "206:     }",
          "208:     T* baton = new T(this, callback);",
          "210:     if (start < last) {",
          "213:             int length = array->Length();",
          "215:             for (int i = 0, pos = 1; i < length; i++, pos++) {",
          "217:             }",
          "218:         }",
          "222:             for (int i = start, pos = 1; i < last; i++, pos++) {",
          "223:                 baton->parameters.push_back(BindParameter(info[i], pos));",
          "224:             }",
          "225:         }",
          "229:             int length = array->Length();",
          "230:             for (int i = 0; i < length; i++) {",
          "234:                     baton->parameters.push_back(",
          "236:                 }",
          "237:                 else {",
          "240:                 }",
          "241:             }",
          "242:         }",
          "",
          "[Removed Lines]",
          "169:                    Statement::BindParameter(const Local<Value> source, T pos) {",
          "170:     if (source->IsString() || source->IsRegExp()) {",
          "171:         Nan::Utf8String val(source);",
          "172:         return new Values::Text(pos, val.length(), *val);",
          "174:     else if (source->IsInt32()) {",
          "175:         return new Values::Integer(pos, Nan::To<int32_t>(source).FromJust());",
          "177:     else if (source->IsNumber()) {",
          "178:         return new Values::Float(pos, Nan::To<double>(source).FromJust());",
          "181:         return new Values::Integer(pos, Nan::To<bool>(source).FromJust() ? 1 : 0);",
          "186:     else if (Buffer::HasInstance(source)) {",
          "187:         Local<Object> buffer = Nan::To<Object>(source).ToLocalChecked();",
          "191:         return new Values::Float(pos, Nan::To<double>(source).FromJust());",
          "198: template <class T> T* Statement::Bind(Nan::NAN_METHOD_ARGS_TYPE info, int start, int last) {",
          "199:     Nan::HandleScope scope;",
          "202:     Local<Function> callback;",
          "204:         callback = Local<Function>::Cast(info[last - 1]);",
          "211:         if (info[start]->IsArray()) {",
          "212:             Local<Array> array = Local<Array>::Cast(info[start]);",
          "216:                 baton->parameters.push_back(BindParameter(Nan::Get(array, i).ToLocalChecked(), pos));",
          "219:         else if (!info[start]->IsObject() || info[start]->IsRegExp() || info[start]->IsDate() || Buffer::HasInstance(info[start])) {",
          "226:         else if (info[start]->IsObject()) {",
          "227:             Local<Object> object = Local<Object>::Cast(info[start]);",
          "228:             Local<Array> array = Nan::GetPropertyNames(object).ToLocalChecked();",
          "231:                 Local<Value> name = Nan::Get(array, i).ToLocalChecked();",
          "233:                 if (name->IsInt32()) {",
          "235:                         BindParameter(Nan::Get(object, name).ToLocalChecked(), Nan::To<int32_t>(name).FromJust()));",
          "238:                     baton->parameters.push_back(BindParameter(Nan::Get(object, name).ToLocalChecked(),",
          "",
          "[Added Lines]",
          "174:                    Statement::BindParameter(const Napi::Value source, T pos) {",
          "175:     if (source.IsString() || source->IsRegExp()) {",
          "176:         std::string val = source.As<Napi::String>();",
          "177:         return new Values::Text(pos, val.Length(), *val);",
          "179:     else if (source.IsNumber()) {",
          "180:         return new Values::Integer(pos, source.As<Napi::Number>().Int32Value());",
          "182:     else if (source.IsNumber()) {",
          "183:         return new Values::Float(pos, source.As<Napi::Number>().DoubleValue());",
          "186:         return new Values::Integer(pos, source.As<Napi::Boolean>().Value() ? 1 : 0);",
          "191:     else if (source.IsBuffer()) {",
          "192:         Napi::Object buffer = source.To<Napi::Object>();",
          "196:         return new Values::Float(pos, source.As<Napi::Number>().DoubleValue());",
          "203: template <class T> T* Statement::Bind(const Napi::CallbackInfo& info, int start, int last) {",
          "204:     Napi::HandleScope scope(env);",
          "207:     Napi::Function callback;",
          "209:         callback = info[last - 1].As<Napi::Function>();",
          "216:         if (info[start].IsArray()) {",
          "217:             Napi::Array array = info[start].As<Napi::Array>();",
          "221:                 baton->parameters.push_back(BindParameter((array).Get(i), pos));",
          "224:         else if (!info[start].IsObject() || info[start].IsRegExp() || info[start].IsDate() || info[start].IsBuffer()) {",
          "231:         else if (info[start].IsObject()) {",
          "232:             Napi::Object object = info[start].As<Napi::Object>();",
          "233:             Napi::Array array = Napi::GetPropertyNames(object);",
          "236:                 Napi::Value name = (array).Get(i);",
          "238:                 if (name.IsNumber()) {",
          "240:                         BindParameter((object).Get(name), name.As<Napi::Number>().Int32Value()));",
          "243:                     baton->parameters.push_back(BindParameter((object).Get(name),",
          "244:                         name->As<Napi::String>().Utf8Value().c_str()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "305:     return true;",
          "306: }",
          "311:     Baton* baton = stmt->Bind<Baton>(info);",
          "312:     if (baton == NULL) {",
          "314:     }",
          "315:     else {",
          "316:         stmt->Schedule(Work_BeginBind, baton);",
          "318:     }",
          "319: }",
          "",
          "[Removed Lines]",
          "308: NAN_METHOD(Statement::Bind) {",
          "309:     Statement* stmt = Nan::ObjectWrap::Unwrap<Statement>(info.This());",
          "313:         return Nan::ThrowTypeError(\"Data type is not supported\");",
          "317:         info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "313: Napi::Value Statement::Bind(const Napi::CallbackInfo& info) {",
          "314:     Statement* stmt = this;",
          "318:         Napi::TypeError::New(env, \"Data type is not supported\").ThrowAsJavaScriptException();",
          "319:         return env.Null();",
          "323:         return info.This();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "332: }",
          "334: void Statement::Work_AfterBind(uv_work_t* req) {",
          "337:     STATEMENT_INIT(Baton);",
          "",
          "[Removed Lines]",
          "335:     Nan::HandleScope scope;",
          "",
          "[Added Lines]",
          "341:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "341:     }",
          "342:     else {",
          "345:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "347:             TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "348:         }",
          "349:     }",
          "",
          "[Removed Lines]",
          "344:         Local<Function> cb = Nan::New(baton->callback);",
          "346:             Local<Value> argv[] = { Nan::Null() };",
          "",
          "[Added Lines]",
          "350:         Napi::Function cb = Napi::New(env, baton->callback);",
          "352:             Napi::Value argv[] = { env.Null() };",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "359:     Baton* baton = stmt->Bind<RowBaton>(info);",
          "360:     if (baton == NULL) {",
          "362:     }",
          "363:     else {",
          "364:         stmt->Schedule(Work_BeginGet, baton);",
          "366:     }",
          "367: }",
          "",
          "[Removed Lines]",
          "356: NAN_METHOD(Statement::Get) {",
          "357:     Statement* stmt = Nan::ObjectWrap::Unwrap<Statement>(info.This());",
          "361:         return Nan::ThrowError(\"Data type is not supported\");",
          "365:         info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "362: Napi::Value Statement::Get(const Napi::CallbackInfo& info) {",
          "363:     Statement* stmt = this;",
          "367:         Napi::Error::New(env, \"Data type is not supported\").ThrowAsJavaScriptException();",
          "368:         return env.Null();",
          "372:         return info.This();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "395: }",
          "397: void Statement::Work_AfterGet(uv_work_t* req) {",
          "400:     STATEMENT_INIT(RowBaton);",
          "",
          "[Removed Lines]",
          "398:     Nan::HandleScope scope;",
          "",
          "[Added Lines]",
          "405:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "404:     }",
          "405:     else {",
          "408:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "409:             if (stmt->status == SQLITE_ROW) {",
          "412:                 TRY_CATCH_CALL(stmt->handle(), cb, 2, argv);",
          "413:             }",
          "414:             else {",
          "416:                 TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "417:             }",
          "418:         }",
          "",
          "[Removed Lines]",
          "407:         Local<Function> cb = Nan::New(baton->callback);",
          "411:                 Local<Value> argv[] = { Nan::Null(), RowToJS(&baton->row) };",
          "415:                 Local<Value> argv[] = { Nan::Null() };",
          "",
          "[Added Lines]",
          "414:         Napi::Function cb = Napi::New(env, baton->callback);",
          "418:                 Napi::Value argv[] = { env.Null(), RowToJS(&baton->row) };",
          "422:                 Napi::Value argv[] = { env.Null() };",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "421:     STATEMENT_END();",
          "422: }",
          "427:     Baton* baton = stmt->Bind<RunBaton>(info);",
          "428:     if (baton == NULL) {",
          "430:     }",
          "431:     else {",
          "432:         stmt->Schedule(Work_BeginRun, baton);",
          "434:     }",
          "435: }",
          "",
          "[Removed Lines]",
          "424: NAN_METHOD(Statement::Run) {",
          "425:     Statement* stmt = Nan::ObjectWrap::Unwrap<Statement>(info.This());",
          "429:         return Nan::ThrowError(\"Data type is not supported\");",
          "433:         info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "431: Napi::Value Statement::Run(const Napi::CallbackInfo& info) {",
          "432:     Statement* stmt = this;",
          "436:         Napi::Error::New(env, \"Data type is not supported\").ThrowAsJavaScriptException();",
          "437:         return env.Null();",
          "441:         return info.This();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "465: }",
          "467: void Statement::Work_AfterRun(uv_work_t* req) {",
          "470:     STATEMENT_INIT(RunBaton);",
          "",
          "[Removed Lines]",
          "468:     Nan::HandleScope scope;",
          "",
          "[Added Lines]",
          "476:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "474:     }",
          "475:     else {",
          "478:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "483:             TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "484:         }",
          "485:     }",
          "",
          "[Removed Lines]",
          "477:         Local<Function> cb = Nan::New(baton->callback);",
          "479:             Nan::Set(stmt->handle(), Nan::New(\"lastID\").ToLocalChecked(), Nan::New<Number>(baton->inserted_id));",
          "480:             Nan::Set(stmt->handle(), Nan::New(\"changes\").ToLocalChecked(), Nan::New(baton->changes));",
          "482:             Local<Value> argv[] = { Nan::Null() };",
          "",
          "[Added Lines]",
          "485:         Napi::Function cb = Napi::New(env, baton->callback);",
          "487:             (stmt->handle()).Set(Napi::String::New(env, \"lastID\"), Napi::Number::New(env, baton->inserted_id));",
          "488:             (stmt->handle()).Set(Napi::String::New(env, \"changes\"), Napi::New(env, baton->changes));",
          "490:             Napi::Value argv[] = { env.Null() };",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "487:     STATEMENT_END();",
          "488: }",
          "493:     Baton* baton = stmt->Bind<RowsBaton>(info);",
          "494:     if (baton == NULL) {",
          "496:     }",
          "497:     else {",
          "498:         stmt->Schedule(Work_BeginAll, baton);",
          "500:     }",
          "501: }",
          "",
          "[Removed Lines]",
          "490: NAN_METHOD(Statement::All) {",
          "491:     Statement* stmt = Nan::ObjectWrap::Unwrap<Statement>(info.This());",
          "495:         return Nan::ThrowError(\"Data type is not supported\");",
          "499:         info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "498: Napi::Value Statement::All(const Napi::CallbackInfo& info) {",
          "499:     Statement* stmt = this;",
          "503:         Napi::Error::New(env, \"Data type is not supported\").ThrowAsJavaScriptException();",
          "504:         return env.Null();",
          "508:         return info.This();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "531: }",
          "533: void Statement::Work_AfterAll(uv_work_t* req) {",
          "536:     STATEMENT_INIT(RowsBaton);",
          "",
          "[Removed Lines]",
          "534:     Nan::HandleScope scope;",
          "",
          "[Added Lines]",
          "543:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "540:     }",
          "541:     else {",
          "544:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "545:             if (baton->rows.size()) {",
          "548:                 Rows::const_iterator it = baton->rows.begin();",
          "549:                 Rows::const_iterator end = baton->rows.end();",
          "550:                 for (int i = 0; it < end; ++it, i++) {",
          "552:                     delete *it;",
          "553:                 }",
          "556:                 TRY_CATCH_CALL(stmt->handle(), cb, 2, argv);",
          "557:             }",
          "558:             else {",
          "563:                 };",
          "564:                 TRY_CATCH_CALL(stmt->handle(), cb, 2, argv);",
          "565:             }",
          "",
          "[Removed Lines]",
          "543:         Local<Function> cb = Nan::New(baton->callback);",
          "547:                 Local<Array> result(Nan::New<Array>(baton->rows.size()));",
          "551:                     Nan::Set(result, i, RowToJS(*it));",
          "555:                 Local<Value> argv[] = { Nan::Null(), result };",
          "560:                 Local<Value> argv[] = {",
          "561:                     Nan::Null(),",
          "562:                     Nan::New<Array>(0)",
          "",
          "[Added Lines]",
          "552:         Napi::Function cb = Napi::New(env, baton->callback);",
          "556:                 Napi::Array result(Napi::Array::New(env, baton->rows.size()));",
          "560:                     (result).Set(i, RowToJS(*it));",
          "564:                 Napi::Value argv[] = { env.Null(), result };",
          "569:                 Napi::Value argv[] = {",
          "570:                     env.Null(),",
          "571:                     Napi::Array::New(env, 0)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "569:     STATEMENT_END();",
          "570: }",
          "575:     int last = info.Length();",
          "578:     if (last >= 2 && info[last - 1]->IsFunction() && info[last - 2]->IsFunction()) {",
          "580:     }",
          "582:     EachBaton* baton = stmt->Bind<EachBaton>(info, 0, last);",
          "583:     if (baton == NULL) {",
          "585:     }",
          "586:     else {",
          "587:         baton->completed.Reset(completed);",
          "588:         stmt->Schedule(Work_BeginEach, baton);",
          "590:     }",
          "591: }",
          "",
          "[Removed Lines]",
          "572: NAN_METHOD(Statement::Each) {",
          "573:     Statement* stmt = Nan::ObjectWrap::Unwrap<Statement>(info.This());",
          "577:     Local<Function> completed;",
          "579:         completed = Local<Function>::Cast(info[--last]);",
          "584:         return Nan::ThrowError(\"Data type is not supported\");",
          "589:         info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "581: Napi::Value Statement::Each(const Napi::CallbackInfo& info) {",
          "582:     Statement* stmt = this;",
          "586:     Napi::Function completed;",
          "588:         completed = info[--last].As<Napi::Function>();",
          "593:         Napi::Error::New(env, \"Data type is not supported\").ThrowAsJavaScriptException();",
          "594:         return env.Null();",
          "599:         return info.This();",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "652: }",
          "654: void Statement::AsyncEach(uv_async_t* handle, int status) {",
          "657:     Async* async = static_cast<Async*>(handle->data);",
          "",
          "[Removed Lines]",
          "655:     Nan::HandleScope scope;",
          "",
          "[Added Lines]",
          "665:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "667:             break;",
          "668:         }",
          "671:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "675:             Rows::const_iterator it = rows.begin();",
          "676:             Rows::const_iterator end = rows.end();",
          "",
          "[Removed Lines]",
          "670:         Local<Function> cb = Nan::New(async->item_cb);",
          "672:             Local<Value> argv[2];",
          "673:             argv[0] = Nan::Null();",
          "",
          "[Added Lines]",
          "680:         Napi::Function cb = Napi::New(env, async->item_cb);",
          "682:             Napi::Value argv[2];",
          "683:             argv[0] = env.Null();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "683:         }",
          "684:     }",
          "687:     if (async->completed) {",
          "688:         if (!cb.IsEmpty() &&",
          "689:                 cb->IsFunction()) {",
          "693:             };",
          "694:             TRY_CATCH_CALL(async->stmt->handle(), cb, 2, argv);",
          "695:         }",
          "",
          "[Removed Lines]",
          "686:     Local<Function> cb = Nan::New(async->completed_cb);",
          "690:             Local<Value> argv[] = {",
          "691:                 Nan::Null(),",
          "692:                 Nan::New(async->retrieved)",
          "",
          "[Added Lines]",
          "696:     Napi::Function cb = Napi::New(env, async->completed_cb);",
          "700:             Napi::Value argv[] = {",
          "701:                 env.Null(),",
          "702:                 Napi::New(env, async->retrieved)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "698: }",
          "700: void Statement::Work_AfterEach(uv_work_t* req) {",
          "703:     STATEMENT_INIT(EachBaton);",
          "",
          "[Removed Lines]",
          "701:     Nan::HandleScope scope;",
          "",
          "[Added Lines]",
          "711:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "709:     STATEMENT_END();",
          "710: }",
          "715:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "717:     Baton* baton = new Baton(stmt, callback);",
          "718:     stmt->Schedule(Work_BeginReset, baton);",
          "721: }",
          "723: void Statement::Work_BeginReset(Baton* baton) {",
          "",
          "[Removed Lines]",
          "712: NAN_METHOD(Statement::Reset) {",
          "713:     Statement* stmt = Nan::ObjectWrap::Unwrap<Statement>(info.This());",
          "720:     info.GetReturnValue().Set(info.This());",
          "",
          "[Added Lines]",
          "722: Napi::Value Statement::Reset(const Napi::CallbackInfo& info) {",
          "723:     Statement* stmt = this;",
          "730:     return info.This();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "732: }",
          "734: void Statement::Work_AfterReset(uv_work_t* req) {",
          "737:     STATEMENT_INIT(Baton);",
          "741:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "743:         TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "744:     }",
          "746:     STATEMENT_END();",
          "747: }",
          "754:     Row::const_iterator it = row->begin();",
          "755:     Row::const_iterator end = row->end();",
          "756:     for (int i = 0; it < end; ++it, i++) {",
          "757:         Values::Field* field = *it;",
          "761:         switch (field->type) {",
          "762:             case SQLITE_INTEGER: {",
          "764:             } break;",
          "765:             case SQLITE_FLOAT: {",
          "767:             } break;",
          "768:             case SQLITE_TEXT: {",
          "770:             } break;",
          "771:             case SQLITE_BLOB: {",
          "773:             } break;",
          "774:             case SQLITE_NULL: {",
          "776:             } break;",
          "777:         }",
          "781:         DELETE_FIELD(field);",
          "782:     }",
          "",
          "[Removed Lines]",
          "735:     Nan::HandleScope scope;",
          "740:     Local<Function> cb = Nan::New(baton->callback);",
          "742:         Local<Value> argv[] = { Nan::Null() };",
          "749: Local<Object> Statement::RowToJS(Row* row) {",
          "750:     Nan::EscapableHandleScope scope;",
          "752:     Local<Object> result = Nan::New<Object>();",
          "759:         Local<Value> value;",
          "763:                 value = Nan::New<Number>(((Values::Integer*)field)->value);",
          "766:                 value = Nan::New<Number>(((Values::Float*)field)->value);",
          "769:                 value = Nan::New<String>(((Values::Text*)field)->value.c_str(), ((Values::Text*)field)->value.size()).ToLocalChecked();",
          "772:                 value = Nan::CopyBuffer(((Values::Blob*)field)->value, ((Values::Blob*)field)->length).ToLocalChecked();",
          "775:                 value = Nan::Null();",
          "779:         Nan::Set(result, Nan::New(field->name.c_str()).ToLocalChecked(), value);",
          "",
          "[Added Lines]",
          "745:     Napi::HandleScope scope(env);",
          "750:     Napi::Function cb = Napi::New(env, baton->callback);",
          "752:         Napi::Value argv[] = { env.Null() };",
          "759: Napi::Object Statement::RowToJS(Row* row) {",
          "760:     Napi::EscapableHandleScope scope(env);",
          "762:     Napi::Object result = Napi::Object::New(env);",
          "769:         Napi::Value value;",
          "773:                 value = Napi::Number::New(env, ((Values::Integer*)field)->value);",
          "776:                 value = Napi::Number::New(env, ((Values::Float*)field)->value);",
          "779:                 value = Napi::String::New(env, ((Values::Text*)field)->value.c_str(), ((Values::Text*)field)->value.size());",
          "782:                 value = Napi::Buffer::Copy(env, ((Values::Blob*)field)->value, ((Values::Blob*)field)->length);",
          "785:                 value = env.Null();",
          "789:         (result).Set(Napi::New(env, field->name.c_str()), value);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "816:     }",
          "817: }",
          "821:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "823:     Baton* baton = new Baton(stmt, callback);",
          "824:     stmt->Schedule(Finalize, baton);",
          "827: }",
          "829: void Statement::Finalize(Baton* baton) {",
          "832:     baton->stmt->Finalize();",
          "836:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "837:         TRY_CATCH_CALL(baton->stmt->handle(), cb, 0, NULL);",
          "838:     }",
          "",
          "[Removed Lines]",
          "819: NAN_METHOD(Statement::Finalize) {",
          "820:     Statement* stmt = Nan::ObjectWrap::Unwrap<Statement>(info.This());",
          "826:     info.GetReturnValue().Set(stmt->db->handle());",
          "830:     Nan::HandleScope scope;",
          "835:     Local<Function> cb = Nan::New(baton->callback);",
          "",
          "[Added Lines]",
          "829: Napi::Value Statement::Finalize(const Napi::CallbackInfo& info) {",
          "830:     Statement* stmt = this;",
          "836:     return stmt->db->handle();",
          "840:     Napi::HandleScope scope(env);",
          "845:     Napi::Function cb = Napi::New(env, baton->callback);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "852: }",
          "854: void Statement::CleanQueue() {",
          "857:     if (prepared && !queue.empty()) {",
          "860:         EXCEPTION(\"Statement is already finalized\", SQLITE_MISUSE, exception);",
          "862:         bool called = false;",
          "",
          "[Removed Lines]",
          "855:     Nan::HandleScope scope;",
          "861:         Local<Value> argv[] = { exception };",
          "",
          "[Added Lines]",
          "865:     Napi::HandleScope scope(env);",
          "871:         Napi::Value argv[] = { exception };",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "866:             Call* call = queue.front();",
          "867:             queue.pop();",
          "871:             if (prepared && !cb.IsEmpty() &&",
          "872:                 cb->IsFunction()) {",
          "",
          "[Removed Lines]",
          "869:             Local<Function> cb = Nan::New(call->baton->callback);",
          "",
          "[Added Lines]",
          "879:             Napi::Function cb = Napi::New(env, call->baton->callback);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "885:         if (!called) {",
          "887:             EMIT_EVENT(handle(), 2, info);",
          "888:         }",
          "889:     }",
          "",
          "[Removed Lines]",
          "886:             Local<Value> info[] = { Nan::New(\"error\").ToLocalChecked(), exception };",
          "",
          "[Added Lines]",
          "896:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "",
          "---------------"
        ],
        "src/statement.h||src/statement.h": [
          "File: src/statement.h -> src/statement.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <vector>",
          "14: #include <sqlite3.h>",
          "20: namespace node_sqlite3 {",
          "",
          "[Removed Lines]",
          "15: #include <nan.h>",
          "17: using namespace v8;",
          "18: using namespace node;",
          "",
          "[Added Lines]",
          "15: #include <napi.h>",
          "16: #include <uv.h>",
          "18: using namespace Napi;",
          "19: using namespace Napi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: public:",
          "81:     struct Baton {",
          "82:         uv_work_t request;",
          "83:         Statement* stmt;",
          "85:         Parameters parameters;",
          "88:             stmt->Ref();",
          "89:             request.data = this;",
          "90:             callback.Reset(cb_);",
          "",
          "[Removed Lines]",
          "74: class Statement : public Nan::ObjectWrap {",
          "76:     static Nan::Persistent<FunctionTemplate> constructor_template;",
          "78:     static NAN_MODULE_INIT(Init);",
          "79:     static NAN_METHOD(New);",
          "84:         Nan::Persistent<Function> callback;",
          "87:         Baton(Statement* stmt_, Local<Function> cb_) : stmt(stmt_) {",
          "",
          "[Added Lines]",
          "75: class Statement : public Napi::ObjectWrap<Statement> {",
          "77:     static Napi::FunctionReference constructor;",
          "79:     static Napi::Object Init(Napi::Env env, Napi::Object exports);",
          "80:     static Napi::Value New(const Napi::CallbackInfo& info);",
          "85:         Napi::FunctionReference callback;",
          "88:         Baton(Statement* stmt_, Napi::Function cb_) : stmt(stmt_) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     };",
          "102:     struct RowBaton : Baton {",
          "104:             Baton(stmt_, cb_) {}",
          "105:         Row row;",
          "106:     };",
          "108:     struct RunBaton : Baton {",
          "110:             Baton(stmt_, cb_), inserted_id(0), changes(0) {}",
          "111:         sqlite3_int64 inserted_id;",
          "112:         int changes;",
          "113:     };",
          "115:     struct RowsBaton : Baton {",
          "117:             Baton(stmt_, cb_) {}",
          "118:         Rows rows;",
          "119:     };",
          "",
          "[Removed Lines]",
          "103:         RowBaton(Statement* stmt_, Local<Function> cb_) :",
          "109:         RunBaton(Statement* stmt_, Local<Function> cb_) :",
          "116:         RowsBaton(Statement* stmt_, Local<Function> cb_) :",
          "",
          "[Added Lines]",
          "104:         RowBaton(Statement* stmt_, Napi::Function cb_) :",
          "110:         RunBaton(Statement* stmt_, Napi::Function cb_) :",
          "117:         RowsBaton(Statement* stmt_, Napi::Function cb_) :",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:     struct Async;",
          "123:     struct EachBaton : Baton {",
          "125:         Async* async; // Isn't deleted when the baton is deleted.",
          "128:             Baton(stmt_, cb_) {}",
          "129:         virtual ~EachBaton() {",
          "130:             completed.Reset();",
          "",
          "[Removed Lines]",
          "124:         Nan::Persistent<Function> completed;",
          "127:         EachBaton(Statement* stmt_, Local<Function> cb_) :",
          "",
          "[Added Lines]",
          "125:         Napi::FunctionReference completed;",
          "128:         EachBaton(Statement* stmt_, Napi::Function cb_) :",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:     struct PrepareBaton : Database::Baton {",
          "135:         Statement* stmt;",
          "136:         std::string sql;",
          "138:             Baton(db_, cb_), stmt(stmt_) {",
          "139:             stmt->Ref();",
          "140:         }",
          "",
          "[Removed Lines]",
          "137:         PrepareBaton(Database* db_, Local<Function> cb_, Statement* stmt_) :",
          "",
          "[Added Lines]",
          "138:         PrepareBaton(Database* db_, Napi::Function cb_, Statement* stmt_) :",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "172:         Async(Statement* st, uv_async_cb async_cb) :",
          "173:                 stmt(st), completed(false), retrieved(0) {",
          "",
          "[Removed Lines]",
          "169:         Nan::Persistent<Function> item_cb;",
          "170:         Nan::Persistent<Function> completed_cb;",
          "",
          "[Added Lines]",
          "170:         Napi::FunctionReference item_cb;",
          "171:         Napi::FunctionReference completed_cb;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "185:         }",
          "186:     };",
          "189:             db(db_),",
          "190:             _handle(NULL),",
          "191:             status(SQLITE_OK),",
          "",
          "[Removed Lines]",
          "188:     Statement(Database* db_) : Nan::ObjectWrap(),",
          "",
          "[Added Lines]",
          "189:     Statement(Database* db_) : Napi::ObjectWrap<Statement>(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "206:     WORK_DEFINITION(Each);",
          "207:     WORK_DEFINITION(Reset);",
          "211: protected:",
          "212:     static void Work_BeginPrepare(Database::Baton* baton);",
          "",
          "[Removed Lines]",
          "209:     static NAN_METHOD(Finalize);",
          "",
          "[Added Lines]",
          "210:     static Napi::Value Finalize(const Napi::CallbackInfo& info);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "219:     static void Finalize(Baton* baton);",
          "220:     void Finalize();",
          "224:     bool Bind(const Parameters &parameters);",
          "226:     static void GetRow(Row* row, sqlite3_stmt* stmt);",
          "228:     void Schedule(Work_Callback callback, Baton* baton);",
          "229:     void Process();",
          "230:     void CleanQueue();",
          "",
          "[Removed Lines]",
          "222:     template <class T> inline Values::Field* BindParameter(const Local<Value> source, T pos);",
          "223:     template <class T> T* Bind(Nan::NAN_METHOD_ARGS_TYPE info, int start = 0, int end = -1);",
          "227:     static Local<Object> RowToJS(Row* row);",
          "",
          "[Added Lines]",
          "223:     template <class T> inline Values::Field* BindParameter(const Napi::Value source, T pos);",
          "224:     template <class T> T* Bind(const Napi::CallbackInfo& info, int start = 0, int end = -1);",
          "228:     static Napi::Object RowToJS(Row* row);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd3ef522088bb5cafede25b9fe661f892b6f10ba",
      "candidate_info": {
        "commit_hash": "dd3ef522088bb5cafede25b9fe661f892b6f10ba",
        "repo": "TryGhost/node-sqlite3",
        "commit_url": "https://github.com/TryGhost/node-sqlite3/commit/dd3ef522088bb5cafede25b9fe661f892b6f10ba",
        "files": [
          "src/backup.cc",
          "src/backup.h",
          "src/database.cc",
          "src/database.h",
          "src/macros.h",
          "src/node_sqlite3.cc",
          "src/statement.cc",
          "src/statement.h",
          "test/database_fail.test.js"
        ],
        "message": "Fix compilation",
        "before_after_code_files": [
          "src/backup.cc||src/backup.cc",
          "src/backup.h||src/backup.h",
          "src/database.cc||src/database.cc",
          "src/database.h||src/database.h",
          "src/macros.h||src/macros.h",
          "src/node_sqlite3.cc||src/node_sqlite3.cc",
          "src/statement.cc||src/statement.cc",
          "src/statement.h||src/statement.h",
          "test/database_fail.test.js||test/database_fail.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/statement.cc||src/statement.cc"
          ],
          "candidate": [
            "src/statement.cc||src/statement.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/backup.cc||src/backup.cc": [
          "File: src/backup.cc -> src/backup.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: Napi::Object Backup::Init(Napi::Env env, Napi::Object exports) {",
          "17:     Napi::HandleScope scope(env);",
          "38: }",
          "40: void Backup::Process() {",
          "",
          "[Removed Lines]",
          "19:     Napi::FunctionReference t = Napi::Function::New(env, New);",
          "22:     t->SetClassName(Napi::String::New(env, \"Backup\"));",
          "24:     InstanceMethod(\"step\", &Step),",
          "25:     InstanceMethod(\"finish\", &Finish),",
          "27:     NODE_SET_GETTER(t, \"idle\", IdleGetter);",
          "28:     NODE_SET_GETTER(t, \"completed\", CompletedGetter);",
          "29:     NODE_SET_GETTER(t, \"failed\", FailedGetter);",
          "30:     NODE_SET_GETTER(t, \"remaining\", RemainingGetter);",
          "31:     NODE_SET_GETTER(t, \"pageCount\", PageCountGetter);",
          "33:     NODE_SET_SETTER(t, \"retryErrors\", RetryErrorGetter, RetryErrorSetter);",
          "35:     constructor.Reset(t);",
          "36:     (target).Set(Napi::String::New(env, \"Backup\"),",
          "37:         Napi::GetFunction(t));",
          "",
          "[Added Lines]",
          "19:     Napi::Function t = DefineClass(env, \"Backup\", {",
          "20:         InstanceMethod(\"step\", &Backup::Step),",
          "21:         InstanceMethod(\"finish\", &Backup::Finish),",
          "22:         InstanceAccessor(\"idle\", &Backup::IdleGetter, nullptr),",
          "23:         InstanceAccessor(\"completed\", &Backup::CompletedGetter, nullptr),",
          "24:         InstanceAccessor(\"failed\", &Backup::FailedGetter, nullptr),",
          "25:         InstanceAccessor(\"remaining\", &Backup::RemainingGetter, nullptr),",
          "26:         InstanceAccessor(\"pageCount\", &Backup::PageCountGetter, nullptr),",
          "27:         InstanceAccessor(\"retryErrors\", &Backup::RetryErrorGetter, &Backup::RetryErrorSetter),",
          "28:     });",
          "30:     constructor = Napi::Persistent(t);",
          "31:     constructor.SuppressDestruct();",
          "33:     exports.Set(\"Backup\", t);",
          "34:     return exports;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: }",
          "67: template <class T> void Backup::Error(T* baton) {",
          "68:     Napi::HandleScope scope(env);",
          "70:     Backup* backup = baton->backup;",
          "72:     assert(backup->status != 0);",
          "78:         Napi::Value argv[] = { exception };",
          "80:     }",
          "81:     else {",
          "82:         Napi::Value argv[] = { Napi::String::New(env, \"error\"), exception };",
          "84:     }",
          "85: }",
          "87: void Backup::CleanQueue() {",
          "88:     Napi::HandleScope scope(env);",
          "90:     if (inited && !queue.empty()) {",
          "94:         Napi::Value argv[] = { exception };",
          "95:         bool called = false;",
          "",
          "[Removed Lines]",
          "73:     EXCEPTION(backup->message, backup->status, exception);",
          "75:     Napi::Function cb = Napi::New(env, baton->callback);",
          "77:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "79:         TRY_CATCH_CALL(backup->handle(), cb, 1, argv);",
          "83:         EMIT_EVENT(backup->handle(), 2, argv);",
          "93:         EXCEPTION(\"Backup is already finished\", SQLITE_MISUSE, exception);",
          "",
          "[Added Lines]",
          "65:     Napi::Env env = baton->backup->Env();",
          "71:     EXCEPTION(Napi::String::New(env, backup->message), backup->status, exception);",
          "73:     Napi::Function cb = baton->callback.Value();",
          "75:     if (!cb.IsEmpty() && cb.IsFunction()) {",
          "77:         TRY_CATCH_CALL(backup->Value(), cb, 1, argv);",
          "81:         EMIT_EVENT(backup->Value(), 2, argv);",
          "86:     Napi::Env env = this->Env();",
          "92:         EXCEPTION(Napi::String::New(env, \"Backup is already finished\"), SQLITE_MISUSE, exception);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:             Call* call = queue.front();",
          "100:             queue.pop();",
          "104:             if (inited && !cb.IsEmpty() &&",
          "107:                 called = true;",
          "108:             }",
          "",
          "[Removed Lines]",
          "102:             Napi::Function cb = Napi::New(env, call->baton->callback);",
          "105:                 cb->IsFunction()) {",
          "106:                 TRY_CATCH_CALL(handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "101:             Napi::Function cb = call->baton->callback.Value();",
          "104:                 cb.IsFunction()) {",
          "105:                 TRY_CATCH_CALL(Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:         if (!called) {",
          "119:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "121:         }",
          "122:     }",
          "123:     else while (!queue.empty()) {",
          "",
          "[Removed Lines]",
          "120:             EMIT_EVENT(handle(), 2, info);",
          "",
          "[Added Lines]",
          "119:             EMIT_EVENT(Value(), 2, info);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:     }",
          "134: }",
          "137:     if (!info.IsConstructCall()) {",
          "138:         Napi::TypeError::New(env, \"Use the new operator to create new Backup objects\").ThrowAsJavaScriptException();",
          "140:     }",
          "142:     int length = info.Length();",
          "144:     if (length <= 0 || !Database::HasInstance(info[0])) {",
          "145:         Napi::TypeError::New(env, \"Database object expected\").ThrowAsJavaScriptException();",
          "147:     }",
          "148:     else if (length <= 1 || !info[1].IsString()) {",
          "149:         Napi::TypeError::New(env, \"Filename expected\").ThrowAsJavaScriptException();",
          "151:     }",
          "152:     else if (length <= 2 || !info[2].IsString()) {",
          "153:         Napi::TypeError::New(env, \"Source database name expected\").ThrowAsJavaScriptException();",
          "155:     }",
          "156:     else if (length <= 3 || !info[3].IsString()) {",
          "157:         Napi::TypeError::New(env, \"Destination database name expected\").ThrowAsJavaScriptException();",
          "159:     }",
          "160:     else if (length <= 4 || !info[4].IsBoolean()) {",
          "161:         Napi::TypeError::New(env, \"Direction flag expected\").ThrowAsJavaScriptException();",
          "163:     }",
          "164:     else if (length > 5 && !info[5].IsUndefined() && !info[5].IsFunction()) {",
          "165:         Napi::TypeError::New(env, \"Callback expected\").ThrowAsJavaScriptException();",
          "167:     }",
          "170:     Napi::String filename = info[1].As<Napi::String>();",
          "171:     Napi::String sourceName = info[2].As<Napi::String>();",
          "172:     Napi::String destName = info[3].As<Napi::String>();",
          "173:     Napi::Boolean filenameIsDest = info[4].As<Napi::Boolean>();",
          "188:     db->Schedule(Work_BeginInitialize, baton);",
          "191: }",
          "193: void Backup::Work_BeginInitialize(Database::Baton* baton) {",
          "",
          "[Removed Lines]",
          "136: Napi::Value Backup::New(const Napi::CallbackInfo& info) {",
          "139:         return env.Null();",
          "146:         return env.Null();",
          "150:         return env.Null();",
          "154:         return env.Null();",
          "158:         return env.Null();",
          "162:         return env.Null();",
          "166:         return env.Null();",
          "169:     Database* db = info[0].As<Napi::Object>().Unwrap<Database>();",
          "175:     info.This().DefineProperty(Napi::String::New(env, \"filename\"), filename, ReadOnly);",
          "176:     info.This().DefineProperty(Napi::String::New(env, \"sourceName\"), sourceName, ReadOnly);",
          "177:     info.This().DefineProperty(Napi::String::New(env, \"destName\"), destName, ReadOnly);",
          "178:     info.This().DefineProperty(Napi::String::New(env, \"filenameIsDest\"), filenameIsDest, ReadOnly);",
          "180:     Backup* backup = new Backup(db);",
          "181:     backup->Wrap(info.This());",
          "183:     InitializeBaton* baton = new InitializeBaton(db, info[5].As<Napi::Function>(), backup);",
          "184:     baton->filename = std::string(filename->As<Napi::String>().Utf8Value().c_str());",
          "185:     baton->sourceName = std::string(sourceName->As<Napi::String>().Utf8Value().c_str());",
          "186:     baton->destName = std::string(destName->As<Napi::String>().Utf8Value().c_str());",
          "187:     baton->filenameIsDest = filenameIsDest.As<Napi::Boolean>().Value();",
          "190:     return info.This();",
          "",
          "[Added Lines]",
          "135: Backup::Backup(const Napi::CallbackInfo& info) : Napi::ObjectWrap<Backup>(info) {",
          "136:     Napi::Env env = info.Env();",
          "139:         return;",
          "146:         return;",
          "150:         return;",
          "154:         return;",
          "158:         return;",
          "162:         return;",
          "166:         return;",
          "169:     Database* db = Napi::ObjectWrap<Database>::Unwrap(info[0].As<Napi::Object>());",
          "175:     info.This().As<Napi::Object>().DefineProperty(Napi::PropertyDescriptor::Value(\"filename\", filename));",
          "176:     info.This().As<Napi::Object>().DefineProperty(Napi::PropertyDescriptor::Value(\"sourceName\", sourceName));",
          "177:     info.This().As<Napi::Object>().DefineProperty(Napi::PropertyDescriptor::Value(\"destName\", destName));",
          "178:     info.This().As<Napi::Object>().DefineProperty(Napi::PropertyDescriptor::Value(\"filenameIsDest\", filenameIsDest));",
          "180:     init(db);",
          "182:     InitializeBaton* baton = new InitializeBaton(db, info[5].As<Napi::Function>(), this);",
          "183:     baton->filename = filename.Utf8Value();",
          "184:     baton->sourceName = sourceName.Utf8Value();",
          "185:     baton->destName = destName.Utf8Value();",
          "186:     baton->filenameIsDest = filenameIsDest.Value();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228: }",
          "230: void Backup::Work_AfterInitialize(uv_work_t* req) {",
          "233:     BACKUP_INIT(InitializeBaton);",
          "235:     if (backup->status != SQLITE_OK) {",
          "236:         Error(baton);",
          "237:         backup->FinishAll();",
          "238:     }",
          "239:     else {",
          "240:         backup->inited = true;",
          "243:             Napi::Value argv[] = { env.Null() };",
          "245:         }",
          "246:     }",
          "247:     BACKUP_END();",
          "",
          "[Removed Lines]",
          "231:     Napi::HandleScope scope(env);",
          "241:         Napi::Function cb = Napi::New(env, baton->callback);",
          "242:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "244:             TRY_CATCH_CALL(backup->handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "230:     Napi::Env env = backup->Env();",
          "231:     Napi::HandleScope scope(env);",
          "239:         Napi::Function cb = baton->callback.Value();",
          "240:         if (!cb.IsEmpty() && cb.IsFunction()) {",
          "242:             TRY_CATCH_CALL(backup->Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "250: Napi::Value Backup::Step(const Napi::CallbackInfo& info) {",
          "251:     Backup* backup = this;",
          "253:     REQUIRE_ARGUMENT_INTEGER(0, pages);",
          "254:     OPTIONAL_ARGUMENT_FUNCTION(1, callback);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:     Napi::Env env = backup->Env();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "288: }",
          "290: void Backup::Work_AfterStep(uv_work_t* req) {",
          "293:     BACKUP_INIT(StepBaton);",
          "295:     if (backup->status == SQLITE_DONE) {",
          "296:         backup->completed = true;",
          "297:     } else if (!backup->_handle) {",
          "",
          "[Removed Lines]",
          "291:     Napi::HandleScope scope(env);",
          "",
          "[Added Lines]",
          "292:     Napi::Env env = backup->Env();",
          "293:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "303:     }",
          "304:     else {",
          "310:         }",
          "311:     }",
          "",
          "[Removed Lines]",
          "306:         Napi::Function cb = Napi::New(env, baton->callback);",
          "307:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "308:             Napi::Value argv[] = { env.Null(), Napi::New(env, backup->status == SQLITE_DONE) };",
          "309:             TRY_CATCH_CALL(backup->handle(), cb, 2, argv);",
          "",
          "[Added Lines]",
          "306:         Napi::Function cb = baton->callback.Value();",
          "307:         if (!cb.IsEmpty() && cb.IsFunction()) {",
          "308:             Napi::Value argv[] = { env.Null(), Napi::Boolean::New(env, backup->status == SQLITE_DONE) };",
          "309:             TRY_CATCH_CALL(backup->Value(), cb, 2, argv);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "316: Napi::Value Backup::Finish(const Napi::CallbackInfo& info) {",
          "317:     Backup* backup = this;",
          "319:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     Napi::Env env = backup->Env();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "333: }",
          "335: void Backup::Work_AfterFinish(uv_work_t* req) {",
          "336:     Napi::HandleScope scope(env);",
          "339:     backup->FinishAll();",
          "345:     }",
          "347:     BACKUP_END();",
          "",
          "[Removed Lines]",
          "338:     BACKUP_INIT(Baton);",
          "342:     Napi::Function cb = Napi::New(env, baton->callback);",
          "343:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "344:         TRY_CATCH_CALL(backup->handle(), cb, 0, NULL);",
          "",
          "[Added Lines]",
          "337:     BACKUP_INIT(Baton);",
          "339:     Napi::Env env = backup->Env();",
          "345:     Napi::Function cb = baton->callback.Value();",
          "346:     if (!cb.IsEmpty() && cb.IsFunction()) {",
          "347:         TRY_CATCH_CALL(backup->Value(), cb, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "373: Napi::Value Backup::IdleGetter(const Napi::CallbackInfo& info) {",
          "374:     Backup* backup = this;",
          "375:     bool idle = backup->inited && !backup->locked && backup->queue.empty();",
          "377: }",
          "379: Napi::Value Backup::CompletedGetter(const Napi::CallbackInfo& info) {",
          "380:     Backup* backup = this;",
          "382: }",
          "384: Napi::Value Backup::FailedGetter(const Napi::CallbackInfo& info) {",
          "385:     Backup* backup = this;",
          "387: }",
          "389: Napi::Value Backup::RemainingGetter(const Napi::CallbackInfo& info) {",
          "390:     Backup* backup = this;",
          "392: }",
          "394: Napi::Value Backup::PageCountGetter(const Napi::CallbackInfo& info) {",
          "395:     Backup* backup = this;",
          "397: }",
          "399: Napi::Value Backup::RetryErrorGetter(const Napi::CallbackInfo& info) {",
          "400:     Backup* backup = this;",
          "402: }",
          "404: void Backup::RetryErrorSetter(const Napi::CallbackInfo& info, const Napi::Value& value) {",
          "405:     Backup* backup = this;",
          "407:         Napi::Error::New(env, \"retryErrors must be an array\").ThrowAsJavaScriptException();",
          "409:     }",
          "410:     Napi::Array array = value.As<Napi::Array>();",
          "411:     backup->retryErrors.Reset(array);",
          "",
          "[Removed Lines]",
          "376:     return idle;",
          "381:     return backup->completed;",
          "386:     return backup->failed;",
          "391:     return backup->remaining;",
          "396:     return backup->pageCount;",
          "401:     return Napi::New(env, backup->retryErrors);",
          "406:     if (!value->IsArray()) {",
          "408:         return env.Null();",
          "",
          "[Added Lines]",
          "379:     return Napi::Boolean::New(this->Env(), idle);",
          "384:     return Napi::Boolean::New(this->Env(), backup->completed);",
          "389:     return Napi::Boolean::New(this->Env(), backup->failed);",
          "394:     return Napi::Number::New(this->Env(), backup->remaining);",
          "399:     return Napi::Number::New(this->Env(), backup->pageCount);",
          "404:     return backup->retryErrors.Value();",
          "409:     Napi::Env env = backup->Env();",
          "410:     if (!value.IsArray()) {",
          "412:         return;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "414: void Backup::GetRetryErrors(std::set<int>& retryErrorsSet) {",
          "415:     retryErrorsSet.clear();",
          "418:     for (int i = 0; i < length; i++) {",
          "419:         Napi::Value code = (array).Get(i);",
          "420:         if (code.IsNumber()) {",
          "",
          "[Removed Lines]",
          "416:     Napi::Array array = Napi::New(env, retryErrors);",
          "417:     int length = array->Length();",
          "",
          "[Added Lines]",
          "420:     Napi::Array array = retryErrors.Value();",
          "421:     int length = array.Length();",
          "",
          "---------------"
        ],
        "src/backup.h||src/backup.h": [
          "File: src/backup.h -> src/backup.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <napi.h>",
          "12: #include <uv.h>",
          "15: using namespace Napi;",
          "17: namespace node_sqlite3 {",
          "",
          "[Removed Lines]",
          "14: using namespace Napi;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     static Napi::FunctionReference constructor;",
          "100:     static Napi::Object Init(Napi::Env env, Napi::Object exports);",
          "103:     struct Baton {",
          "104:         uv_work_t request;",
          "",
          "[Removed Lines]",
          "101:     static Napi::Value New(const Napi::CallbackInfo& info);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:         Baton* baton;",
          "151:     };",
          "165:         db->Ref();",
          "166:     }",
          "168:     ~Backup() {",
          "169:         if (!finished) {",
          "170:             FinishAll();",
          "",
          "[Removed Lines]",
          "153:     Backup(Database* db_) : Napi::ObjectWrap<Backup>(),",
          "154:            db(db_),",
          "155:            _handle(NULL),",
          "156:            _otherDb(NULL),",
          "157:            _destDb(NULL),",
          "158:            inited(false),",
          "159:            locked(true),",
          "160:            completed(false),",
          "161:            failed(false),",
          "162:            remaining(-1),",
          "163:            pageCount(-1),",
          "164:            finished(false) {",
          "",
          "[Added Lines]",
          "151:     void init(Database* db_) {",
          "152:         db = db_;",
          "153:         _handle = NULL;",
          "154:         _otherDb = NULL;",
          "155:         _destDb = NULL;",
          "156:         inited = false;",
          "157:         locked = true;",
          "158:         completed = false;",
          "159:         failed = false;",
          "160:         remaining = -1;",
          "161:         pageCount = -1;",
          "162:         finished = false;",
          "166:     Backup(const Napi::CallbackInfo& info);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "216:     bool finished;",
          "217:     std::queue<Call*> queue;",
          "220: };",
          "222: }",
          "",
          "[Removed Lines]",
          "219:     Napi::Persistent<Array> retryErrors;",
          "",
          "[Added Lines]",
          "219:     Napi::Reference<Array> retryErrors;",
          "",
          "---------------"
        ],
        "src/database.cc||src/database.cc": [
          "File: src/database.cc -> src/database.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Napi::Object Database::Init(Napi::Env env, Napi::Object exports) {",
          "12:     Napi::HandleScope scope(env);",
          "34: }",
          "36: void Database::Process() {",
          "37:     Napi::HandleScope scope(env);",
          "39:     if (!open && locked && !queue.empty()) {",
          "41:         Napi::Value argv[] = { exception };",
          "42:         bool called = false;",
          "45:         while (!queue.empty()) {",
          "46:             Call* call = queue.front();",
          "50:                 called = true;",
          "51:             }",
          "52:             queue.pop();",
          "",
          "[Removed Lines]",
          "14:     Napi::FunctionReference t = Napi::Function::New(env, New);",
          "17:     t->SetClassName(Napi::String::New(env, \"Database\"));",
          "19:     InstanceMethod(\"close\", &Close),",
          "20:     InstanceMethod(\"exec\", &Exec),",
          "21:     InstanceMethod(\"wait\", &Wait),",
          "22:     InstanceMethod(\"loadExtension\", &LoadExtension),",
          "23:     InstanceMethod(\"serialize\", &Serialize),",
          "24:     InstanceMethod(\"parallelize\", &Parallelize),",
          "25:     InstanceMethod(\"configure\", &Configure),",
          "26:     InstanceMethod(\"interrupt\", &Interrupt),",
          "28:     NODE_SET_GETTER(t, \"open\", OpenGetter);",
          "30:     constructor.Reset(t);",
          "32:     (target).Set(Napi::String::New(env, \"Database\"),",
          "33:         Napi::GetFunction(t));",
          "40:         EXCEPTION(\"Database handle is closed\", SQLITE_MISUSE, exception);",
          "47:             Napi::Function cb = Napi::New(env, call->baton->callback);",
          "48:             if (!cb.IsEmpty() && cb->IsFunction()) {",
          "49:                 TRY_CATCH_CALL(this->handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "14:     Napi::Function t = DefineClass(env, \"Database\", {",
          "15:         InstanceMethod(\"close\", &Database::Close),",
          "16:         InstanceMethod(\"exec\", &Database::Exec),",
          "17:         InstanceMethod(\"wait\", &Database::Wait),",
          "18:         InstanceMethod(\"loadExtension\", &Database::LoadExtension),",
          "19:         InstanceMethod(\"serialize\", &Database::Serialize),",
          "20:         InstanceMethod(\"parallelize\", &Database::Parallelize),",
          "21:         InstanceMethod(\"configure\", &Database::Configure),",
          "22:         InstanceMethod(\"interrupt\", &Database::Interrupt),",
          "23:         InstanceAccessor(\"open\", &Database::OpenGetter, nullptr)",
          "24:     });",
          "26:     constructor = Napi::Persistent(t);",
          "27:     constructor.SuppressDestruct();",
          "29:     exports.Set(\"Database\", t);",
          "30:     return exports;",
          "34:     Napi::Env env = this->Env();",
          "38:         EXCEPTION(Napi::String::New(env, \"Database handle is closed\"), SQLITE_MISUSE, exception);",
          "45:             Napi::Function cb = call->baton->callback.Value();",
          "46:             if (!cb.IsUndefined() && cb.IsFunction()) {",
          "47:                 TRY_CATCH_CALL(this->Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         if (!called) {",
          "62:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "64:         }",
          "65:         return;",
          "66:     }",
          "",
          "[Removed Lines]",
          "63:             EMIT_EVENT(handle(), 2, info);",
          "",
          "[Added Lines]",
          "61:             EMIT_EVENT(Value(), 2, info);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82: }",
          "84: void Database::Schedule(Work_Callback callback, Baton* baton, bool exclusive) {",
          "85:     Napi::HandleScope scope(env);",
          "87:     if (!open && locked) {",
          "91:             Napi::Value argv[] = { exception };",
          "93:         }",
          "94:         else {",
          "95:             Napi::Value argv[] = { Napi::String::New(env, \"error\"), exception };",
          "97:         }",
          "98:         return;",
          "99:     }",
          "",
          "[Removed Lines]",
          "88:         EXCEPTION(\"Database is closed\", SQLITE_MISUSE, exception);",
          "89:         Napi::Function cb = Napi::New(env, baton->callback);",
          "90:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "92:             TRY_CATCH_CALL(handle(), cb, 1, argv);",
          "96:             EMIT_EVENT(handle(), 2, argv);",
          "",
          "[Added Lines]",
          "83:     Napi::Env env = this->Env();",
          "87:         EXCEPTION(Napi::String::New(env, \"Database is closed\"), SQLITE_MISUSE, exception);",
          "88:         Napi::Function cb = baton->callback.Value();",
          "89:         if (!cb.IsUndefined() && cb.IsFunction()) {",
          "91:             TRY_CATCH_CALL(Value(), cb, 1, argv);",
          "95:             EMIT_EVENT(Value(), 2, argv);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:     }",
          "108: }",
          "116:     REQUIRE_ARGUMENT_STRING(0, filename);",
          "119:     int mode;",
          "121:         mode = info[pos++].As<Napi::Number>().Int32Value();",
          "123:         mode = SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_FULLMUTEX;",
          "124:     }",
          "",
          "[Removed Lines]",
          "110: Napi::Value Database::New(const Napi::CallbackInfo& info) {",
          "111:     if (!info.IsConstructCall()) {",
          "112:         Napi::TypeError::New(env, \"Use the new operator to create new Database objects\").ThrowAsJavaScriptException();",
          "113:         return env.Null();",
          "114:     }",
          "117:     int pos = 1;",
          "120:     if (info.Length() >= pos && info[pos].IsNumber()) {",
          "122:     } else {",
          "",
          "[Added Lines]",
          "109: Database::Database(const Napi::CallbackInfo& info) : Napi::ObjectWrap<Database>(info) {",
          "110:     init();",
          "111:     Napi::Env env = info.Env();",
          "114:     unsigned int pos = 1;",
          "117:     if (info.Length() >= pos && info[pos].IsNumber() && OtherIsInt(info[pos].As<Napi::Number>())) {",
          "119:     }",
          "120:     else {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:         callback = info[pos++].As<Napi::Function>();",
          "129:     }",
          "139:     Work_BeginOpen(baton);",
          "142: }",
          "144: void Database::Work_BeginOpen(Baton* baton) {",
          "",
          "[Removed Lines]",
          "131:     Database* db = new Database();",
          "132:     db->Wrap(info.This());",
          "134:     info.This().DefineProperty(Napi::String::New(env, \"filename\"), info[0].As<Napi::String>(), ReadOnly);",
          "135:     info.This().DefineProperty(Napi::String::New(env, \"mode\"), Napi::New(env, mode), ReadOnly);",
          "138:     OpenBaton* baton = new OpenBaton(db, callback, *filename, mode);",
          "141:     return info.This();",
          "",
          "[Added Lines]",
          "129:     info.This().As<Napi::Object>().DefineProperty(Napi::PropertyDescriptor::Value(\"filename\", info[0].As<Napi::String>(), napi_default));",
          "130:     info.This().As<Napi::Object>().DefineProperty(Napi::PropertyDescriptor::Value(\"mode\", Napi::Number::New(env, mode), napi_default));",
          "133:     OpenBaton* baton = new OpenBaton(this, callback, filename.c_str(), mode);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "170: }",
          "172: void Database::Work_AfterOpen(uv_work_t* req) {",
          "175:     OpenBaton* baton = static_cast<OpenBaton*>(req->data);",
          "176:     Database* db = baton->db;",
          "178:     Napi::Value argv[1];",
          "179:     if (baton->status != SQLITE_OK) {",
          "181:         argv[0] = exception;",
          "182:     }",
          "183:     else {",
          "",
          "[Removed Lines]",
          "173:     Napi::HandleScope scope(env);",
          "180:         EXCEPTION(baton->message, baton->status, exception);",
          "",
          "[Added Lines]",
          "169:     Napi::Env env = db->Env();",
          "170:     Napi::HandleScope scope(env);",
          "174:         EXCEPTION(Napi::String::New(env, baton->message.c_str()), baton->status, exception);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "185:         argv[0] = env.Null();",
          "186:     }",
          "192:     }",
          "193:     else if (!db->open) {",
          "194:         Napi::Value info[] = { Napi::String::New(env, \"error\"), argv[0] };",
          "196:     }",
          "198:     if (db->open) {",
          "199:         Napi::Value info[] = { Napi::String::New(env, \"open\") };",
          "201:         db->Process();",
          "202:     }",
          "",
          "[Removed Lines]",
          "188:     Napi::Function cb = Napi::New(env, baton->callback);",
          "190:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "191:         TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "195:         EMIT_EVENT(db->handle(), 2, info);",
          "200:         EMIT_EVENT(db->handle(), 1, info);",
          "",
          "[Added Lines]",
          "182:     Napi::Function cb = baton->callback.Value();",
          "184:     if (!cb.IsUndefined() && cb.IsFunction()) {",
          "185:         TRY_CATCH_CALL(db->Value(), cb, 1, argv);",
          "189:         EMIT_EVENT(db->Value(), 2, info);",
          "194:         EMIT_EVENT(db->Value(), 1, info);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "205: }",
          "207: Napi::Value Database::OpenGetter(const Napi::CallbackInfo& info) {",
          "208:     Database* db = this;",
          "210: }",
          "212: Napi::Value Database::Close(const Napi::CallbackInfo& info) {",
          "213:     Database* db = this;",
          "214:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "",
          "[Removed Lines]",
          "209:     return db->open;",
          "",
          "[Added Lines]",
          "202:     Napi::Env env = this->Env();",
          "204:     return Napi::Boolean::New(env, db->open);",
          "208:     Napi::Env env = info.Env();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "248: }",
          "250: void Database::Work_AfterClose(uv_work_t* req) {",
          "253:     Baton* baton = static_cast<Baton*>(req->data);",
          "254:     Database* db = baton->db;",
          "256:     db->closing = false;",
          "258:     Napi::Value argv[1];",
          "259:     if (baton->status != SQLITE_OK) {",
          "261:         argv[0] = exception;",
          "262:     }",
          "263:     else {",
          "",
          "[Removed Lines]",
          "251:     Napi::HandleScope scope(env);",
          "260:         EXCEPTION(baton->message, baton->status, exception);",
          "",
          "[Added Lines]",
          "250:     Napi::Env env = db->Env();",
          "251:     Napi::HandleScope scope(env);",
          "257:         EXCEPTION(Napi::String::New(env, baton->message.c_str()), baton->status, exception);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "267:         argv[0] = env.Null();",
          "268:     }",
          "275:     }",
          "276:     else if (db->open) {",
          "277:         Napi::Value info[] = { Napi::String::New(env, \"error\"), argv[0] };",
          "279:     }",
          "281:     if (!db->open) {",
          "282:         Napi::Value info[] = { Napi::String::New(env, \"close\"), argv[0] };",
          "284:         db->Process();",
          "285:     }",
          "",
          "[Removed Lines]",
          "270:     Napi::Function cb = Napi::New(env, baton->callback);",
          "273:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "274:         TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "278:         EMIT_EVENT(db->handle(), 2, info);",
          "283:         EMIT_EVENT(db->handle(), 1, info);",
          "",
          "[Added Lines]",
          "267:     Napi::Function cb = baton->callback.Value();",
          "270:     if (!cb.IsUndefined() && cb.IsFunction()) {",
          "271:         TRY_CATCH_CALL(db->Value(), cb, 1, argv);",
          "275:         EMIT_EVENT(db->Value(), 2, info);",
          "280:         EMIT_EVENT(db->Value(), 1, info);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "288: }",
          "290: Napi::Value Database::Serialize(const Napi::CallbackInfo& info) {",
          "291:     Database* db = this;",
          "292:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "294:     bool before = db->serialize;",
          "295:     db->serialize = true;",
          "298:         TRY_CATCH_CALL(info.This(), callback, 0, NULL);",
          "299:         db->serialize = before;",
          "300:     }",
          "",
          "[Removed Lines]",
          "297:     if (!callback.IsEmpty() && callback->IsFunction()) {",
          "",
          "[Added Lines]",
          "288:     Napi::Env env = this->Env();",
          "295:     if (!callback.IsEmpty() && callback.IsFunction()) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "305: }",
          "307: Napi::Value Database::Parallelize(const Napi::CallbackInfo& info) {",
          "308:     Database* db = this;",
          "309:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "311:     bool before = db->serialize;",
          "312:     db->serialize = false;",
          "315:         TRY_CATCH_CALL(info.This(), callback, 0, NULL);",
          "316:         db->serialize = before;",
          "317:     }",
          "",
          "[Removed Lines]",
          "314:     if (!callback.IsEmpty() && callback->IsFunction()) {",
          "",
          "[Added Lines]",
          "306:     Napi::Env env = this->Env();",
          "313:     if (!callback.IsEmpty() && callback.IsFunction()) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "322: }",
          "324: Napi::Value Database::Configure(const Napi::CallbackInfo& info) {",
          "325:     Database* db = this;",
          "327:     REQUIRE_ARGUMENTS(2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:     Napi::Env env = this->Env();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "347:         db->Schedule(SetBusyTimeout, baton);",
          "348:     }",
          "349:     else {",
          "351: #if V8_MAJOR_VERSION > 6",
          "352:             info.GetIsolate(),",
          "353: #endif",
          "355:             Napi::String::New(env, \" is not a valid configuration option\")",
          "357:     }",
          "359:     db->Process();",
          "",
          "[Removed Lines]",
          "350:         return Napi::ThrowError(Exception::Error(String::Concat(",
          "354:             info[0].To<Napi::String>(),",
          "356:         )));",
          "",
          "[Added Lines]",
          "350:         Napi::TypeError::New(env, (StringConcat(",
          "354:             info[0].As<Napi::String>(),",
          "356:         )).Utf8Value().c_str()).ThrowAsJavaScriptException();",
          "357:         return env.Null();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "362: }",
          "364: Napi::Value Database::Interrupt(const Napi::CallbackInfo& info) {",
          "365:     Database* db = this;",
          "367:     if (!db->open) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:     Napi::Env env = this->Env();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "417: void Database::TraceCallback(Database* db, std::string* sql) {",
          "419:     Napi::HandleScope scope(env);",
          "421:     Napi::Value argv[] = {",
          "422:         Napi::String::New(env, \"trace\"),",
          "424:     };",
          "426:     delete sql;",
          "427: }",
          "",
          "[Removed Lines]",
          "423:         Napi::New(env, sql->c_str())",
          "425:     EMIT_EVENT(db->handle(), 2, argv);",
          "",
          "[Added Lines]",
          "421:     Napi::Env env = db->Env();",
          "426:         Napi::String::New(env, sql->c_str())",
          "428:     EMIT_EVENT(db->Value(), 2, argv);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "456: }",
          "458: void Database::ProfileCallback(Database *db, ProfileInfo* info) {",
          "459:     Napi::HandleScope scope(env);",
          "461:     Napi::Value argv[] = {",
          "462:         Napi::String::New(env, \"profile\"),",
          "464:         Napi::Number::New(env, (double)info->nsecs / 1000000.0)",
          "465:     };",
          "467:     delete info;",
          "468: }",
          "",
          "[Removed Lines]",
          "463:         Napi::New(env, info->sql.c_str()),",
          "466:     EMIT_EVENT(db->handle(), 3, argv);",
          "",
          "[Added Lines]",
          "462:     Napi::Env env = db->Env();",
          "467:         Napi::String::New(env, info->sql.c_str()),",
          "470:     EMIT_EVENT(db->Value(), 3, argv);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "500: }",
          "502: void Database::UpdateCallback(Database *db, UpdateInfo* info) {",
          "503:     Napi::HandleScope scope(env);",
          "505:     Napi::Value argv[] = {",
          "509:         Napi::Number::New(env, info->rowid),",
          "510:     };",
          "512:     delete info;",
          "513: }",
          "515: Napi::Value Database::Exec(const Napi::CallbackInfo& info) {",
          "516:     Database* db = this;",
          "518:     REQUIRE_ARGUMENT_STRING(0, sql);",
          "519:     OPTIONAL_ARGUMENT_FUNCTION(1, callback);",
          "522:     db->Schedule(Work_BeginExec, baton, true);",
          "524:     return info.This();",
          "",
          "[Removed Lines]",
          "506:         Napi::New(env, sqlite_authorizer_string(info->type)),",
          "507:         Napi::New(env, info->database.c_str()),",
          "508:         Napi::New(env, info->table.c_str()),",
          "511:     EMIT_EVENT(db->handle(), 4, argv);",
          "521:     Baton* baton = new ExecBaton(db, callback, *sql);",
          "",
          "[Added Lines]",
          "507:     Napi::Env env = db->Env();",
          "511:         Napi::String::New(env, sqlite_authorizer_string(info->type)),",
          "512:         Napi::String::New(env, info->database.c_str()),",
          "513:         Napi::String::New(env, info->table.c_str()),",
          "516:     EMIT_EVENT(db->Value(), 4, argv);",
          "521:     Napi::Env env = this->Env();",
          "527:     Baton* baton = new ExecBaton(db, callback, sql.c_str());",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "553: }",
          "555: void Database::Work_AfterExec(uv_work_t* req) {",
          "558:     ExecBaton* baton = static_cast<ExecBaton*>(req->data);",
          "559:     Database* db = baton->db;",
          "563:     if (baton->status != SQLITE_OK) {",
          "567:             Napi::Value argv[] = { exception };",
          "569:         }",
          "570:         else {",
          "571:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "573:         }",
          "574:     }",
          "576:         Napi::Value argv[] = { env.Null() };",
          "578:     }",
          "580:     db->Process();",
          "",
          "[Removed Lines]",
          "556:     Napi::HandleScope scope(env);",
          "561:     Napi::Function cb = Napi::New(env, baton->callback);",
          "564:         EXCEPTION(baton->message, baton->status, exception);",
          "566:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "568:             TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "572:             EMIT_EVENT(db->handle(), 2, info);",
          "575:     else if (!cb.IsEmpty() && cb->IsFunction()) {",
          "577:         TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "565:     Napi::Env env = db->Env();",
          "566:     Napi::HandleScope scope(env);",
          "568:     Napi::Function cb = baton->callback.Value();",
          "571:         EXCEPTION(Napi::String::New(env, baton->message.c_str()), baton->status, exception);",
          "573:         if (!cb.IsUndefined() && cb.IsFunction()) {",
          "575:             TRY_CATCH_CALL(db->Value(), cb, 1, argv);",
          "579:             EMIT_EVENT(db->Value(), 2, info);",
          "582:     else if (!cb.IsUndefined() && cb.IsFunction()) {",
          "584:         TRY_CATCH_CALL(db->Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "583: }",
          "585: Napi::Value Database::Wait(const Napi::CallbackInfo& info) {",
          "586:     Database* db = this;",
          "588:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:     Napi::Env env = info.Env();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "594: }",
          "596: void Database::Work_Wait(Baton* baton) {",
          "597:     Napi::HandleScope scope(env);",
          "599:     assert(baton->db->locked);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "605:     Napi::Env env = baton->db->Env();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "601:     assert(baton->db->_handle);",
          "602:     assert(baton->db->pending == 0);",
          "606:         Napi::Value argv[] = { env.Null() };",
          "608:     }",
          "610:     baton->db->Process();",
          "",
          "[Removed Lines]",
          "604:     Napi::Function cb = Napi::New(env, baton->callback);",
          "605:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "607:         TRY_CATCH_CALL(baton->db->handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "613:     Napi::Function cb = baton->callback.Value();",
          "614:     if (!cb.IsUndefined() && cb.IsFunction()) {",
          "616:         TRY_CATCH_CALL(baton->db->Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "613: }",
          "615: Napi::Value Database::LoadExtension(const Napi::CallbackInfo& info) {",
          "616:     Database* db = this;",
          "618:     REQUIRE_ARGUMENT_STRING(0, filename);",
          "619:     OPTIONAL_ARGUMENT_FUNCTION(1, callback);",
          "622:     db->Schedule(Work_BeginLoadExtension, baton, true);",
          "624:     return info.This();",
          "",
          "[Removed Lines]",
          "621:     Baton* baton = new LoadExtensionBaton(db, callback, *filename);",
          "",
          "[Added Lines]",
          "625:     Napi::Env env = this->Env();",
          "631:     Baton* baton = new LoadExtensionBaton(db, callback, filename.c_str());",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "656: }",
          "658: void Database::Work_AfterLoadExtension(uv_work_t* req) {",
          "661:     LoadExtensionBaton* baton = static_cast<LoadExtensionBaton*>(req->data);",
          "662:     Database* db = baton->db;",
          "665:     if (baton->status != SQLITE_OK) {",
          "669:             Napi::Value argv[] = { exception };",
          "671:         }",
          "672:         else {",
          "673:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "675:         }",
          "676:     }",
          "678:         Napi::Value argv[] = { env.Null() };",
          "680:     }",
          "682:     db->Process();",
          "",
          "[Removed Lines]",
          "659:     Napi::HandleScope scope(env);",
          "663:     Napi::Function cb = Napi::New(env, baton->callback);",
          "666:         EXCEPTION(baton->message, baton->status, exception);",
          "668:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "670:             TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "674:             EMIT_EVENT(db->handle(), 2, info);",
          "677:     else if (!cb.IsEmpty() && cb->IsFunction()) {",
          "679:         TRY_CATCH_CALL(db->handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "672:     Napi::Env env = db->Env();",
          "673:     Napi::HandleScope scope(env);",
          "675:     Napi::Function cb = baton->callback.Value();",
          "678:         EXCEPTION(Napi::String::New(env, baton->message.c_str()), baton->status, exception);",
          "680:         if (!cb.IsUndefined() && cb.IsFunction()) {",
          "682:             TRY_CATCH_CALL(db->Value(), cb, 1, argv);",
          "686:             EMIT_EVENT(db->Value(), 2, info);",
          "689:     else if (!cb.IsUndefined() && cb.IsFunction()) {",
          "691:         TRY_CATCH_CALL(db->Value(), cb, 1, argv);",
          "",
          "---------------"
        ],
        "src/database.h||src/database.h": [
          "File: src/database.h -> src/database.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         Napi::HandleScope scope(env);",
          "30:         if (!val.IsObject()) return false;",
          "31:         Napi::Object obj = val.As<Napi::Object>();",
          "33:     }",
          "35:     struct Baton {",
          "",
          "[Removed Lines]",
          "32:         return Napi::New(env, constructor)->HasInstance(obj);",
          "",
          "[Added Lines]",
          "32:         return obj.InstanceOf(constructor.Value());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:                 db(db_), status(SQLITE_OK) {",
          "44:             db->Ref();",
          "45:             request.data = this;",
          "47:         }",
          "48:         virtual ~Baton() {",
          "49:             db->Unref();",
          "",
          "[Removed Lines]",
          "46:             callback.Reset(cb_);",
          "",
          "[Added Lines]",
          "46:             if (!cb_.IsUndefined() && cb_.IsFunction()) {",
          "47:                 callback.Reset(cb_, 1);",
          "48:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:     friend class Statement;",
          "103:     friend class Backup;",
          "116:     }",
          "118:     ~Database() {",
          "119:         RemoveCallbacks();",
          "120:         sqlite3_close(_handle);",
          "",
          "[Removed Lines]",
          "105: protected:",
          "106:     Database() : Napi::ObjectWrap<Database>(),",
          "107:         _handle(NULL),",
          "108:         open(false),",
          "109:         closing(false),",
          "110:         locked(false),",
          "111:         pending(0),",
          "112:         serialize(false),",
          "113:         debug_trace(NULL),",
          "114:         debug_profile(NULL),",
          "115:         update_event(NULL) {",
          "",
          "[Added Lines]",
          "107:     void init() {",
          "108:         _handle = NULL;",
          "109:         open = false;",
          "110:         closing = false;",
          "111:         locked = false;",
          "112:         pending = 0;",
          "113:         serialize = false;",
          "114:         debug_trace = NULL;",
          "115:         debug_profile = NULL;",
          "116:         update_event = NULL;",
          "119:     Database(const Napi::CallbackInfo& info);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:         open = false;",
          "123:     }",
          "126:     static void Work_BeginOpen(Baton* baton);",
          "127:     static void Work_Open(uv_work_t* req);",
          "128:     static void Work_AfterOpen(uv_work_t* req);",
          "",
          "[Removed Lines]",
          "125:     static Napi::Value New(const Napi::CallbackInfo& info);",
          "",
          "[Added Lines]",
          "128: protected:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:     void Schedule(Work_Callback callback, Baton* baton, bool exclusive = false);",
          "133:     void Process();",
          "136:     static void Work_BeginExec(Baton* baton);",
          "137:     static void Work_Exec(uv_work_t* req);",
          "138:     static void Work_AfterExec(uv_work_t* req);",
          "141:     static void Work_Wait(Baton* baton);",
          "144:     static void Work_BeginClose(Baton* baton);",
          "145:     static void Work_Close(uv_work_t* req);",
          "146:     static void Work_AfterClose(uv_work_t* req);",
          "149:     static void Work_BeginLoadExtension(Baton* baton);",
          "150:     static void Work_LoadExtension(uv_work_t* req);",
          "151:     static void Work_AfterLoadExtension(uv_work_t* req);",
          "160:     static void SetBusyTimeout(Baton* baton);",
          "",
          "[Removed Lines]",
          "135:     static Napi::Value Exec(const Napi::CallbackInfo& info);",
          "140:     static Napi::Value Wait(const Napi::CallbackInfo& info);",
          "143:     static Napi::Value Close(const Napi::CallbackInfo& info);",
          "148:     static Napi::Value LoadExtension(const Napi::CallbackInfo& info);",
          "153:     static Napi::Value Serialize(const Napi::CallbackInfo& info);",
          "154:     static Napi::Value Parallelize(const Napi::CallbackInfo& info);",
          "156:     static Napi::Value Configure(const Napi::CallbackInfo& info);",
          "158:     static Napi::Value Interrupt(const Napi::CallbackInfo& info);",
          "",
          "[Added Lines]",
          "138:     Napi::Value Exec(const Napi::CallbackInfo& info);",
          "143:     Napi::Value Wait(const Napi::CallbackInfo& info);",
          "146:     Napi::Value Close(const Napi::CallbackInfo& info);",
          "151:     Napi::Value LoadExtension(const Napi::CallbackInfo& info);",
          "156:     Napi::Value Serialize(const Napi::CallbackInfo& info);",
          "157:     Napi::Value Parallelize(const Napi::CallbackInfo& info);",
          "159:     Napi::Value Configure(const Napi::CallbackInfo& info);",
          "161:     Napi::Value Interrupt(const Napi::CallbackInfo& info);",
          "",
          "---------------"
        ],
        "src/macros.h||src/macros.h": [
          "File: src/macros.h -> src/macros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: const char* sqlite_code_string(int code);",
          "5: const char* sqlite_authorizer_string(int type);",
          "8: #define REQUIRE_ARGUMENTS(n)                                                   \\",
          "9:     if (info.Length() < (n)) {                                                 \\",
          "10:         Napi::TypeError::New(env, \"Expected \" #n \"arguments\").ThrowAsJavaScriptException(); \\",
          "12:     }",
          "15: #define REQUIRE_ARGUMENT_EXTERNAL(i, var)                                      \\",
          "17:         Napi::TypeError::New(env, \"Argument \" #i \" invalid\").ThrowAsJavaScriptException(); \\",
          "19:     }                                                                          \\",
          "20:     Napi::External var = info[i].As<Napi::External>();",
          "23: #define REQUIRE_ARGUMENT_FUNCTION(i, var)                                      \\",
          "25:         Napi::TypeError::New(env, \"Argument \" #i \" must be a function\").ThrowAsJavaScriptException(); \\",
          "27:     }                                                                          \\",
          "28:     Napi::Function var = info[i].As<Napi::Function>();",
          "31: #define REQUIRE_ARGUMENT_STRING(i, var)                                        \\",
          "33:         Napi::TypeError::New(env, \"Argument \" #i \" must be a string\").ThrowAsJavaScriptException(); \\",
          "35:     }                                                                          \\",
          "36:     std::string var = info[i].As<Napi::String>();",
          "",
          "[Removed Lines]",
          "11:         return env.Null();                \\",
          "16:     if (info.Length() <= (i) || !info[i].IsExternal()) {                      \\",
          "18:         return env.Null();                 \\",
          "24:     if (info.Length() <= (i) || !info[i].IsFunction()) {                      \\",
          "26:         return env.Null();      \\",
          "32:     if (info.Length() <= (i) || !info[i].IsString()) {                        \\",
          "34:         return env.Null();        \\",
          "",
          "[Added Lines]",
          "6: #include <vector>",
          "9: #include <napi.h>",
          "10: inline Napi::String StringConcat(Napi::Value str1, Napi::Value str2) {",
          "11:   return Napi::String::New(str1.Env(), str1.As<Napi::String>().Utf8Value() +",
          "12:                     str2.As<Napi::String>().Utf8Value() );",
          "13: }",
          "16: inline bool OtherIsInt(Napi::Number source) {",
          "17:     double orig_val = source.DoubleValue();",
          "18:     double int_val = (double)source.Int32Value();",
          "19:     if (orig_val == int_val) {",
          "20:         return true;",
          "21:     } else {",
          "22:         return false;",
          "23:     }",
          "24: }",
          "33:     if (info.Length() <= (i) || !info[i].IsExternal()) {                       \\",
          "40:     if (info.Length() <= (i) || !info[i].IsFunction()) {                        \\",
          "47:     if (info.Length() <= (i) || !info[i].IsString()) {                         \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     int var(info[i].As<Napi::Number>().Int32Value());",
          "45: #define OPTIONAL_ARGUMENT_FUNCTION(i, var)                                     \\",
          "49:             Napi::TypeError::New(env, \"Argument \" #i \" must be a function\").ThrowAsJavaScriptException(); \\",
          "51:         }                                                                      \\",
          "53:     }",
          "",
          "[Removed Lines]",
          "46:     Napi::Function var;                                                       \\",
          "47:     if (info.Length() > i && !info[i].IsUndefined()) {                        \\",
          "48:         if (!info[i].IsFunction()) {                                          \\",
          "50:             return env.Null();  \\",
          "52:         var = info[i].As<Napi::Function>();                                  \\",
          "",
          "[Added Lines]",
          "60:     Napi::Function var;                                                        \\",
          "61:     if (info.Length() > i && !info[i].IsUndefined()) {                         \\",
          "62:         if (!info[i].IsFunction()) {                                           \\",
          "65:         var = info[i].As<Napi::Function>();                                    \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         var = (default);                                                       \\",
          "60:     }                                                                          \\",
          "61:     else if (info[i].IsNumber()) {                                             \\",
          "63:     }                                                                          \\",
          "64:     else {                                                                     \\",
          "65:         Napi::TypeError::New(env, \"Argument \" #i \" must be an integer\").ThrowAsJavaScriptException(); \\",
          "67:     }",
          "70: #define DEFINE_CONSTANT_INTEGER(target, constant, name)                        \\",
          "77: #define DEFINE_CONSTANT_STRING(target, constant, name)                         \\",
          "101: #define EXCEPTION(msg, errno, name)                                            \\",
          "111: #define EMIT_EVENT(obj, argc, argv)                                            \\",
          "112:     TRY_CATCH_CALL((obj),                                                      \\",
          "115:         argc, argv                                                             \\",
          "116:     );",
          "118: #define TRY_CATCH_CALL(context, callback, argc, argv)                          \\",
          "121: #define WORK_DEFINITION(name)                                                  \\",
          "123:     static void Work_Begin##name(Baton* baton);                                \\",
          "124:     static void Work_##name(uv_work_t* req);                                   \\",
          "125:     static void Work_After##name(uv_work_t* req);",
          "",
          "[Removed Lines]",
          "62:         var = info[i].As<Napi::Number>().Int32Value();                            \\",
          "66:         return env.Null();      \\",
          "71:     target->DefineProperty(                                                     \\",
          "72:         Napi::New(env, #name),                                      \\",
          "73:         Napi::Number::New(env, constant),                                           \\",
          "74:         static_cast<napi_property_attributes>(napi_enumerable | napi_configurable)                  \\",
          "75:     );",
          "78:     target->DefineProperty(                                                     \\",
          "79:         Napi::New(env, #name),                                      \\",
          "80:         Napi::New(env, constant),                                   \\",
          "81:         static_cast<napi_property_attributes>(napi_enumerable | napi_configurable)                  \\",
          "82:     );",
          "85: #define NODE_SET_GETTER(target, name, function)                                \\",
          "86:     Napi::SetAccessor((target)->InstanceTemplate(),                             \\",
          "87:         Napi::New(env, name), (function));",
          "89: #define NODE_SET_SETTER(target, name, getter, setter)                          \\",
          "90:     Napi::SetAccessor((target)->InstanceTemplate(),                             \\",
          "91:         Napi::New(env, name), getter, setter);",
          "93: #define GET_STRING(source, name, property)                                     \\",
          "94:     std::string name = (source).Get(\\",
          "95:         Napi::New(env, prop.As<Napi::String>()));",
          "97: #define GET_INTEGER(source, name, prop)                                        \\",
          "98:     int name = Napi::To<int>((source).Get(\\",
          "99:         Napi::New(env, property)));",
          "102:     Napi::Value name = Exception::Error(Napi::New(env,                              \\",
          "103:         std::string(sqlite_code_string(errno)) +                               \\",
          "104:         std::string(\": \") + std::string(msg)                                   \\",
          "105:     ));                                                                        \\",
          "106:     Napi::Object name ##_obj = name.As<Napi::Object>();                             \\",
          "107:     (name ##_obj).Set(Napi::String::New(env, \"errno\"), Napi::New(env, errno));\\",
          "108:     (name ##_obj).Set(Napi::String::New(env, \"code\"),                   \\",
          "109:         Napi::New(env, sqlite_code_string(errno)));",
          "113:         (obj).Get(\\",
          "114:             Napi::String::New(env, \"emit\")).As<Napi::Function>(),\\",
          "119:     (callback).MakeCallback((context), (argc), (argv))",
          "122:     static Napi::Value name(const Napi::CallbackInfo& info);                                                   \\",
          "",
          "[Added Lines]",
          "75:         if (OtherIsInt(info[i].As<Number>())) {                                \\",
          "76:             var = info[i].As<Napi::Number>().Int32Value();                     \\",
          "77:         }                                                                      \\",
          "85:     Napi::PropertyDescriptor::Value(#name, Napi::Number::New(env, constant),   \\",
          "86:         static_cast<napi_property_attributes>(napi_enumerable | napi_configurable)),",
          "89:     Napi::PropertyDescriptor::Value(#name, Napi::String::New(env, constant),   \\",
          "90:         static_cast<napi_property_attributes>(napi_enumerable | napi_configurable)),",
          "93:     Napi::Value name = Napi::Error::New(env,                                   \\",
          "94:         StringConcat(                                                          \\",
          "95:             StringConcat(                                                      \\",
          "96:                 Napi::String::New(env, sqlite_code_string(errno)),             \\",
          "97:                 Napi::String::New(env, \": \")                                   \\",
          "98:             ),                                                                 \\",
          "99:             (msg)                                                              \\",
          "100:         ).Utf8Value()                                                          \\",
          "101:     ).Value();                                                                 \\",
          "102:     Napi::Object name ##_obj = name.As<Napi::Object>();                        \\",
          "103:     (name ##_obj).Set( Napi::String::New(env, \"errno\"), Napi::Number::New(env, errno)); \\",
          "104:     (name ##_obj).Set( Napi::String::New(env, \"code\"),                         \\",
          "105:         Napi::String::New(env, sqlite_code_string(errno)));",
          "110:         (obj).Get(\"emit\").As<Napi::Function>(),\\",
          "117:     Napi::Value* passed_argv = argv;\\",
          "118:     std::vector<napi_value> args;\\",
          "119:     if ((argc != 0) && (passed_argv != NULL)) {\\",
          "120:       args.assign(passed_argv, passed_argv + argc);\\",
          "121:     }\\",
          "122:     (callback).MakeCallback(Napi::Value(context), args);",
          "125:     Napi::Value name(const Napi::CallbackInfo& info);                          \\",
          "",
          "---------------"
        ],
        "src/node_sqlite3.cc||src/node_sqlite3.cc": [
          "File: src/node_sqlite3.cc -> src/node_sqlite3.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: Napi::Object RegisterModule(Napi::Env env, Napi::Object exports) {",
          "17:     Napi::HandleScope scope(env);",
          "31: #ifdef SQLITE_SOURCE_ID",
          "33: #endif",
          "63: }",
          "65: }",
          "",
          "[Removed Lines]",
          "19:     Database::Init(env, target, module);",
          "20:     Statement::Init(env, target, module);",
          "21:     Backup::Init(env, target, module);",
          "23:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_READONLY, OPEN_READONLY);",
          "24:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_READWRITE, OPEN_READWRITE);",
          "25:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_CREATE, OPEN_CREATE);",
          "26:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_FULLMUTEX, OPEN_FULLMUTEX);",
          "27:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_URI, OPEN_URI);",
          "28:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_SHAREDCACHE, OPEN_SHAREDCACHE);",
          "29:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_PRIVATECACHE, OPEN_PRIVATECACHE);",
          "30:     DEFINE_CONSTANT_STRING(target, SQLITE_VERSION, VERSION);",
          "32:     DEFINE_CONSTANT_STRING(target, SQLITE_SOURCE_ID, SOURCE_ID);",
          "34:     DEFINE_CONSTANT_INTEGER(target, SQLITE_VERSION_NUMBER, VERSION_NUMBER);",
          "36:     DEFINE_CONSTANT_INTEGER(target, SQLITE_OK, OK);",
          "37:     DEFINE_CONSTANT_INTEGER(target, SQLITE_ERROR, ERROR);",
          "38:     DEFINE_CONSTANT_INTEGER(target, SQLITE_INTERNAL, INTERNAL);",
          "39:     DEFINE_CONSTANT_INTEGER(target, SQLITE_PERM, PERM);",
          "40:     DEFINE_CONSTANT_INTEGER(target, SQLITE_ABORT, ABORT);",
          "41:     DEFINE_CONSTANT_INTEGER(target, SQLITE_BUSY, BUSY);",
          "42:     DEFINE_CONSTANT_INTEGER(target, SQLITE_LOCKED, LOCKED);",
          "43:     DEFINE_CONSTANT_INTEGER(target, SQLITE_NOMEM, NOMEM);",
          "44:     DEFINE_CONSTANT_INTEGER(target, SQLITE_READONLY, READONLY);",
          "45:     DEFINE_CONSTANT_INTEGER(target, SQLITE_INTERRUPT, INTERRUPT);",
          "46:     DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR, IOERR);",
          "47:     DEFINE_CONSTANT_INTEGER(target, SQLITE_CORRUPT, CORRUPT);",
          "48:     DEFINE_CONSTANT_INTEGER(target, SQLITE_NOTFOUND, NOTFOUND);",
          "49:     DEFINE_CONSTANT_INTEGER(target, SQLITE_FULL, FULL);",
          "50:     DEFINE_CONSTANT_INTEGER(target, SQLITE_CANTOPEN, CANTOPEN);",
          "51:     DEFINE_CONSTANT_INTEGER(target, SQLITE_PROTOCOL, PROTOCOL);",
          "52:     DEFINE_CONSTANT_INTEGER(target, SQLITE_EMPTY, EMPTY);",
          "53:     DEFINE_CONSTANT_INTEGER(target, SQLITE_SCHEMA, SCHEMA);",
          "54:     DEFINE_CONSTANT_INTEGER(target, SQLITE_TOOBIG, TOOBIG);",
          "55:     DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT, CONSTRAINT);",
          "56:     DEFINE_CONSTANT_INTEGER(target, SQLITE_MISMATCH, MISMATCH);",
          "57:     DEFINE_CONSTANT_INTEGER(target, SQLITE_MISUSE, MISUSE);",
          "58:     DEFINE_CONSTANT_INTEGER(target, SQLITE_NOLFS, NOLFS);",
          "59:     DEFINE_CONSTANT_INTEGER(target, SQLITE_AUTH, AUTH);",
          "60:     DEFINE_CONSTANT_INTEGER(target, SQLITE_FORMAT, FORMAT);",
          "61:     DEFINE_CONSTANT_INTEGER(target, SQLITE_RANGE, RANGE);",
          "62:     DEFINE_CONSTANT_INTEGER(target, SQLITE_NOTADB, NOTADB);",
          "",
          "[Added Lines]",
          "19:     Database::Init(env, exports);",
          "20:     Statement::Init(env, exports);",
          "21:     Backup::Init(env, exports);",
          "23:     exports.DefineProperties({",
          "24:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_OPEN_READONLY, OPEN_READONLY)",
          "25:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_OPEN_READWRITE, OPEN_READWRITE)",
          "26:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_OPEN_CREATE, OPEN_CREATE)",
          "27:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_OPEN_FULLMUTEX, OPEN_FULLMUTEX)",
          "28:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_OPEN_URI, OPEN_URI)",
          "29:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_OPEN_SHAREDCACHE, OPEN_SHAREDCACHE)",
          "30:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_OPEN_PRIVATECACHE, OPEN_PRIVATECACHE)",
          "31:         DEFINE_CONSTANT_STRING(exports, SQLITE_VERSION, VERSION)",
          "33:         DEFINE_CONSTANT_STRING(exports, SQLITE_SOURCE_ID, SOURCE_ID)",
          "35:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_VERSION_NUMBER, VERSION_NUMBER)",
          "37:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_OK, OK)",
          "38:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_ERROR, ERROR)",
          "39:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_INTERNAL, INTERNAL)",
          "40:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_PERM, PERM)",
          "41:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_ABORT, ABORT)",
          "42:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_BUSY, BUSY)",
          "43:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_LOCKED, LOCKED)",
          "44:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_NOMEM, NOMEM)",
          "45:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_READONLY, READONLY)",
          "46:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_INTERRUPT, INTERRUPT)",
          "47:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_IOERR, IOERR)",
          "48:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_CORRUPT, CORRUPT)",
          "49:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_NOTFOUND, NOTFOUND)",
          "50:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_FULL, FULL)",
          "51:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_CANTOPEN, CANTOPEN)",
          "52:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_PROTOCOL, PROTOCOL)",
          "53:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_EMPTY, EMPTY)",
          "54:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_SCHEMA, SCHEMA)",
          "55:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_TOOBIG, TOOBIG)",
          "56:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_CONSTRAINT, CONSTRAINT)",
          "57:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_MISMATCH, MISMATCH)",
          "58:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_MISUSE, MISUSE)",
          "59:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_NOLFS, NOLFS)",
          "60:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_AUTH, AUTH)",
          "61:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_FORMAT, FORMAT)",
          "62:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_RANGE, RANGE)",
          "63:         DEFINE_CONSTANT_INTEGER(exports, SQLITE_NOTADB, NOTADB)",
          "64:     });",
          "66:     return exports;",
          "",
          "---------------"
        ],
        "src/statement.cc||src/statement.cc": [
          "File: src/statement.cc -> src/statement.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: using namespace node_sqlite3;",
          "13: Napi::FunctionReference Statement::constructor;",
          "15: Napi::Object Statement::Init(Napi::Env env, Napi::Object exports) {",
          "16:     Napi::HandleScope scope(env);",
          "34: }",
          "36: void Statement::Process() {",
          "",
          "[Removed Lines]",
          "18:     Napi::FunctionReference t = Napi::Function::New(env, New);",
          "21:     t->SetClassName(Napi::String::New(env, \"Statement\"));",
          "23:     InstanceMethod(\"bind\", &Bind),",
          "24:     InstanceMethod(\"get\", &Get),",
          "25:     InstanceMethod(\"run\", &Run),",
          "26:     InstanceMethod(\"all\", &All),",
          "27:     InstanceMethod(\"each\", &Each),",
          "28:     InstanceMethod(\"reset\", &Reset),",
          "29:     InstanceMethod(\"finalize\", &Finalize),",
          "31:     constructor.Reset(t);",
          "32:     (target).Set(Napi::String::New(env, \"Statement\"),",
          "33:         Napi::GetFunction(t));",
          "",
          "[Added Lines]",
          "14: static Napi::FunctionReference date;",
          "15: static Napi::FunctionReference regexp;",
          "20:     Napi::Function t = DefineClass(env, \"Statement\", {",
          "21:       InstanceMethod(\"bind\", &Statement::Bind),",
          "22:       InstanceMethod(\"get\", &Statement::Get),",
          "23:       InstanceMethod(\"run\", &Statement::Run),",
          "24:       InstanceMethod(\"all\", &Statement::All),",
          "25:       InstanceMethod(\"each\", &Statement::Each),",
          "26:       InstanceMethod(\"reset\", &Statement::Reset),",
          "27:       InstanceMethod(\"finalize\", &Statement::Finalize_),",
          "28:     });",
          "30:     constructor = Napi::Persistent(t);",
          "31:     constructor.SuppressDestruct();",
          "33:     exports.Set(\"Statement\", t);",
          "34:     return exports;",
          "35: }",
          "38: bool OtherInstanceOf(Napi::Object source, char* object_type) {",
          "39:     if (date.IsEmpty()) {",
          "40:         Napi::Function date_func = source.Env().Global().Get(\"Date\").As<Function>();",
          "41:         Napi::Function regexp_func = source.Env().Global().Get(\"RegExp\").As<Function>();",
          "43:         date = Napi::Persistent(date_func);",
          "44:         date.SuppressDestruct();",
          "46:         regexp = Napi::Persistent(regexp_func);",
          "47:         regexp.SuppressDestruct();",
          "48:     }",
          "50:     if (object_type == \"Date\") {",
          "51:         return source.InstanceOf(date.Value());",
          "52:     } else if (object_type == \"RegExp\") {",
          "53:         return source.InstanceOf(regexp.Value());",
          "54:     }",
          "56:     return false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: }",
          "63: template <class T> void Statement::Error(T* baton) {",
          "64:     Napi::HandleScope scope(env);",
          "68:     assert(stmt->status != 0);",
          "74:         Napi::Value argv[] = { exception };",
          "76:     }",
          "77:     else {",
          "78:         Napi::Value argv[] = { Napi::String::New(env, \"error\"), exception };",
          "80:     }",
          "81: }",
          "90:     int length = info.Length();",
          "92:     if (length <= 0 || !Database::HasInstance(info[0])) {",
          "93:         Napi::TypeError::New(env, \"Database object expected\").ThrowAsJavaScriptException();",
          "95:     }",
          "96:     else if (length <= 1 || !info[1].IsString()) {",
          "97:         Napi::TypeError::New(env, \"SQL query expected\").ThrowAsJavaScriptException();",
          "99:     }",
          "100:     else if (length > 2 && !info[2].IsUndefined() && !info[2].IsFunction()) {",
          "101:         Napi::TypeError::New(env, \"Callback expected\").ThrowAsJavaScriptException();",
          "103:     }",
          "106:     Napi::String sql = info[1].As<Napi::String>();",
          "113:     PrepareBaton* baton = new PrepareBaton(db, info[2].As<Napi::Function>(), stmt);",
          "115:     db->Schedule(Work_BeginPrepare, baton);",
          "118: }",
          "120: void Statement::Work_BeginPrepare(Database::Baton* baton) {",
          "",
          "[Removed Lines]",
          "66:     Statement* stmt = baton->stmt;",
          "69:     EXCEPTION(stmt->message, stmt->status, exception);",
          "71:     Napi::Function cb = Napi::New(env, baton->callback);",
          "73:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "75:         TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "79:         EMIT_EVENT(stmt->handle(), 2, argv);",
          "84: Napi::Value Statement::New(const Napi::CallbackInfo& info) {",
          "85:     if (!info.IsConstructCall()) {",
          "86:         Napi::TypeError::New(env, \"Use the new operator to create new Statement objects\").ThrowAsJavaScriptException();",
          "87:         return env.Null();",
          "88:     }",
          "94:         return env.Null();",
          "98:         return env.Null();",
          "102:         return env.Null();",
          "105:     Database* db = info[0].As<Napi::Object>().Unwrap<Database>();",
          "108:     info.This().DefineProperty(Napi::String::New(env, \"sql\"), sql, ReadOnly);",
          "110:     Statement* stmt = new Statement(db);",
          "111:     stmt->Wrap(info.This());",
          "114:     baton->sql = std::string(sql->As<Napi::String>().Utf8Value().c_str());",
          "117:     return info.This();",
          "",
          "[Added Lines]",
          "87:     Statement* stmt = baton->stmt;",
          "89:     Napi::Env env = stmt->Env();",
          "94:     EXCEPTION(Napi::String::New(env, stmt->message.c_str()), stmt->status, exception);",
          "96:     Napi::Function cb = baton->callback.Value();",
          "98:     if (!cb.IsUndefined() && cb.IsFunction()) {",
          "100:         TRY_CATCH_CALL(stmt->Value(), cb, 1, argv);",
          "104:         EMIT_EVENT(stmt->Value(), 2, argv);",
          "109: Statement::Statement(const Napi::CallbackInfo& info) : Napi::ObjectWrap<Statement>(info) {",
          "110:     Napi::Env env = info.Env();",
          "115:         return;",
          "119:         return;",
          "123:         return;",
          "126:     Database* db = Napi::ObjectWrap<Database>::Unwrap(info[0].As<Napi::Object>());",
          "129:     info.This().As<Napi::Object>().DefineProperty(Napi::PropertyDescriptor::Value(\"sql\", sql, napi_default));",
          "131:     init(db);",
          "132:     Statement* stmt = this;",
          "135:     baton->sql = std::string(sql.As<Napi::String>().Utf8Value().c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150: }",
          "152: void Statement::Work_AfterPrepare(uv_work_t* req) {",
          "155:     STATEMENT_INIT(PrepareBaton);",
          "157:     if (stmt->status != SQLITE_OK) {",
          "158:         Error(baton);",
          "160:     }",
          "161:     else {",
          "162:         stmt->prepared = true;",
          "165:             Napi::Value argv[] = { env.Null() };",
          "167:         }",
          "168:     }",
          "",
          "[Removed Lines]",
          "153:     Napi::HandleScope scope(env);",
          "159:         stmt->Finalize();",
          "163:         Napi::Function cb = Napi::New(env, baton->callback);",
          "164:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "166:             TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "174:     Napi::Env env = stmt->Env();",
          "175:     Napi::HandleScope scope(env);",
          "179:         stmt->Finalize_();",
          "183:         if (!baton->callback.IsEmpty() && baton->callback.Value().IsFunction()) {",
          "184:             Napi::Function cb = baton->callback.Value();",
          "186:             TRY_CATCH_CALL(stmt->Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173: template <class T> Values::Field*",
          "174:                    Statement::BindParameter(const Napi::Value source, T pos) {",
          "178:     }",
          "181:     }",
          "182:     else if (source.IsNumber()) {",
          "184:     }",
          "186:         return new Values::Integer(pos, source.As<Napi::Boolean>().Value() ? 1 : 0);",
          "187:     }",
          "189:         return new Values::Null(pos);",
          "190:     }",
          "191:     else if (source.IsBuffer()) {",
          "194:     }",
          "197:     }",
          "198:     else {",
          "199:         return NULL;",
          "",
          "[Removed Lines]",
          "175:     if (source.IsString() || source->IsRegExp()) {",
          "176:         std::string val = source.As<Napi::String>();",
          "177:         return new Values::Text(pos, val.Length(), *val);",
          "179:     else if (source.IsNumber()) {",
          "180:         return new Values::Integer(pos, source.As<Napi::Number>().Int32Value());",
          "183:         return new Values::Float(pos, source.As<Napi::Number>().DoubleValue());",
          "185:     else if (source->IsBoolean()) {",
          "188:     else if (source->IsNull()) {",
          "192:         Napi::Object buffer = source.To<Napi::Object>();",
          "193:         return new Values::Blob(pos, Buffer::Length(buffer), Buffer::Data(buffer));",
          "195:     else if (source->IsDate()) {",
          "196:         return new Values::Float(pos, source.As<Napi::Number>().DoubleValue());",
          "",
          "[Added Lines]",
          "195:     if (source.IsString()) {",
          "196:         std::string val = source.As<Napi::String>().Utf8Value();",
          "197:         return new Values::Text(pos, val.length(), val.c_str());",
          "199:     else if (OtherInstanceOf(source.As<Object>(), \"RegExp\")) {",
          "200:         std::string val = source.ToString().Utf8Value();",
          "201:         return new Values::Text(pos, val.length(), val.c_str());",
          "204:         if (OtherIsInt(source.As<Napi::Number>())) {",
          "205:             return new Values::Integer(pos, source.As<Napi::Number>().Int32Value());",
          "206:         } else {",
          "207:             return new Values::Float(pos, source.As<Napi::Number>().DoubleValue());",
          "208:         }",
          "210:     else if (source.IsBoolean()) {",
          "213:     else if (source.IsNull()) {",
          "217:         Napi::Buffer<char> buffer = source.As<Napi::Buffer<char>>();",
          "218:         return new Values::Blob(pos, buffer.Length(), buffer.Data());",
          "220:     else if (OtherInstanceOf(source.As<Object>(), \"Date\")) {",
          "221:         return new Values::Float(pos, source.ToNumber().DoubleValue());",
          "222:     }",
          "223:     else if (source.IsObject()) {",
          "224:         std::string val = source.ToString().Utf8Value();",
          "225:         return new Values::Text(pos, val.length(), val.c_str());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201: }",
          "203: template <class T> T* Statement::Bind(const Napi::CallbackInfo& info, int start, int last) {",
          "204:     Napi::HandleScope scope(env);",
          "206:     if (last < 0) last = info.Length();",
          "207:     Napi::Function callback;",
          "209:         callback = info[last - 1].As<Napi::Function>();",
          "210:         last--;",
          "211:     }",
          "",
          "[Removed Lines]",
          "208:     if (last > start && info[last - 1]->IsFunction()) {",
          "",
          "[Added Lines]",
          "233:     Napi::Env env = info.Env();",
          "238:     if (last > start && info[last - 1].IsFunction()) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "215:     if (start < last) {",
          "216:         if (info[start].IsArray()) {",
          "217:             Napi::Array array = info[start].As<Napi::Array>();",
          "220:             for (int i = 0, pos = 1; i < length; i++, pos++) {",
          "221:                 baton->parameters.push_back(BindParameter((array).Get(i), pos));",
          "222:             }",
          "223:         }",
          "227:             for (int i = start, pos = 1; i < last; i++, pos++) {",
          "",
          "[Removed Lines]",
          "218:             int length = array->Length();",
          "224:         else if (!info[start].IsObject() || info[start].IsRegExp() || info[start].IsDate() || info[start].IsBuffer()) {",
          "",
          "[Added Lines]",
          "248:             int length = array.Length();",
          "254:         else if (!info[start].IsObject() || OtherInstanceOf(info[start].As<Object>(), \"RegExp\") || OtherInstanceOf(info[start].As<Object>(), \"Date\") || info[start].IsBuffer()) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "230:         }",
          "231:         else if (info[start].IsObject()) {",
          "232:             Napi::Object object = info[start].As<Napi::Object>();",
          "235:             for (int i = 0; i < length; i++) {",
          "236:                 Napi::Value name = (array).Get(i);",
          "",
          "[Removed Lines]",
          "233:             Napi::Array array = Napi::GetPropertyNames(object);",
          "234:             int length = array->Length();",
          "",
          "[Added Lines]",
          "263:             Napi::Array array = object.GetPropertyNames();",
          "264:             int length = array.Length();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "241:                 }",
          "242:                 else {",
          "243:                     baton->parameters.push_back(BindParameter((object).Get(name),",
          "245:                 }",
          "246:             }",
          "247:         }",
          "",
          "[Removed Lines]",
          "244:                         name->As<Napi::String>().Utf8Value().c_str()));",
          "",
          "[Added Lines]",
          "274:                         name.As<Napi::String>().Utf8Value().c_str()));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "268:         Values::Field* field = *it;",
          "270:         if (field != NULL) {",
          "272:             if (field->index > 0) {",
          "273:                 pos = field->index;",
          "274:             }",
          "",
          "[Removed Lines]",
          "271:             int pos;",
          "",
          "[Added Lines]",
          "301:             unsigned int pos;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "311: }",
          "313: Napi::Value Statement::Bind(const Napi::CallbackInfo& info) {",
          "314:     Statement* stmt = this;",
          "316:     Baton* baton = stmt->Bind<Baton>(info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:     Napi::Env env = info.Env();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "338: }",
          "340: void Statement::Work_AfterBind(uv_work_t* req) {",
          "343:     STATEMENT_INIT(Baton);",
          "345:     if (stmt->status != SQLITE_OK) {",
          "346:         Error(baton);",
          "347:     }",
          "348:     else {",
          "352:             Napi::Value argv[] = { env.Null() };",
          "354:         }",
          "355:     }",
          "",
          "[Removed Lines]",
          "341:     Napi::HandleScope scope(env);",
          "350:         Napi::Function cb = Napi::New(env, baton->callback);",
          "351:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "353:             TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "374:     Napi::Env env = stmt->Env();",
          "375:     Napi::HandleScope scope(env);",
          "382:         Napi::Function cb = baton->callback.Value();",
          "383:         if (!cb.IsUndefined() && cb.IsFunction()) {",
          "385:             TRY_CATCH_CALL(stmt->Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "362: Napi::Value Statement::Get(const Napi::CallbackInfo& info) {",
          "363:     Statement* stmt = this;",
          "365:     Baton* baton = stmt->Bind<RowBaton>(info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:     Napi::Env env = info.Env();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "402: }",
          "404: void Statement::Work_AfterGet(uv_work_t* req) {",
          "407:     STATEMENT_INIT(RowBaton);",
          "409:     if (stmt->status != SQLITE_ROW && stmt->status != SQLITE_DONE) {",
          "410:         Error(baton);",
          "411:     }",
          "412:     else {",
          "416:             if (stmt->status == SQLITE_ROW) {",
          "420:             }",
          "421:             else {",
          "422:                 Napi::Value argv[] = { env.Null() };",
          "424:             }",
          "425:         }",
          "426:     }",
          "",
          "[Removed Lines]",
          "405:     Napi::HandleScope scope(env);",
          "414:         Napi::Function cb = Napi::New(env, baton->callback);",
          "415:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "418:                 Napi::Value argv[] = { env.Null(), RowToJS(&baton->row) };",
          "419:                 TRY_CATCH_CALL(stmt->handle(), cb, 2, argv);",
          "423:                 TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "440:     Napi::Env env = stmt->Env();",
          "441:     Napi::HandleScope scope(env);",
          "448:         Napi::Function cb = baton->callback.Value();",
          "449:         if (!cb.IsUndefined() && cb.IsFunction()) {",
          "452:                 Napi::Value argv[] = { env.Null(), RowToJS(env, &baton->row) };",
          "453:                 TRY_CATCH_CALL(stmt->Value(), cb, 2, argv);",
          "457:                 TRY_CATCH_CALL(stmt->Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "429: }",
          "431: Napi::Value Statement::Run(const Napi::CallbackInfo& info) {",
          "432:     Statement* stmt = this;",
          "434:     Baton* baton = stmt->Bind<RunBaton>(info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     Napi::Env env = info.Env();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "473: }",
          "475: void Statement::Work_AfterRun(uv_work_t* req) {",
          "478:     STATEMENT_INIT(RunBaton);",
          "480:     if (stmt->status != SQLITE_ROW && stmt->status != SQLITE_DONE) {",
          "481:         Error(baton);",
          "482:     }",
          "483:     else {",
          "490:             Napi::Value argv[] = { env.Null() };",
          "492:         }",
          "493:     }",
          "",
          "[Removed Lines]",
          "476:     Napi::HandleScope scope(env);",
          "485:         Napi::Function cb = Napi::New(env, baton->callback);",
          "486:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "487:             (stmt->handle()).Set(Napi::String::New(env, \"lastID\"), Napi::Number::New(env, baton->inserted_id));",
          "488:             (stmt->handle()).Set(Napi::String::New(env, \"changes\"), Napi::New(env, baton->changes));",
          "491:             TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "513:     Napi::Env env = stmt->Env();",
          "514:     Napi::HandleScope scope(env);",
          "521:         Napi::Function cb = baton->callback.Value();",
          "522:         if (!cb.IsUndefined() && cb.IsFunction()) {",
          "523:             (stmt->Value()).Set(Napi::String::New(env, \"lastID\"), Napi::Number::New(env, baton->inserted_id));",
          "524:             (stmt->Value()).Set( Napi::String::New(env, \"changes\"), Napi::Number::New(env, baton->changes));",
          "527:             TRY_CATCH_CALL(stmt->Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "496: }",
          "498: Napi::Value Statement::All(const Napi::CallbackInfo& info) {",
          "499:     Statement* stmt = this;",
          "501:     Baton* baton = stmt->Bind<RowsBaton>(info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535:     Napi::Env env = info.Env();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "540: }",
          "542: void Statement::Work_AfterAll(uv_work_t* req) {",
          "545:     STATEMENT_INIT(RowsBaton);",
          "547:     if (stmt->status != SQLITE_DONE) {",
          "548:         Error(baton);",
          "549:     }",
          "550:     else {",
          "554:             if (baton->rows.size()) {",
          "556:                 Napi::Array result(Napi::Array::New(env, baton->rows.size()));",
          "557:                 Rows::const_iterator it = baton->rows.begin();",
          "558:                 Rows::const_iterator end = baton->rows.end();",
          "559:                 for (int i = 0; it < end; ++it, i++) {",
          "561:                     delete *it;",
          "562:                 }",
          "564:                 Napi::Value argv[] = { env.Null(), result };",
          "566:             }",
          "567:             else {",
          "",
          "[Removed Lines]",
          "543:     Napi::HandleScope scope(env);",
          "552:         Napi::Function cb = Napi::New(env, baton->callback);",
          "553:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "560:                     (result).Set(i, RowToJS(*it));",
          "565:                 TRY_CATCH_CALL(stmt->handle(), cb, 2, argv);",
          "",
          "[Added Lines]",
          "582:     Napi::Env env = stmt->Env();",
          "583:     Napi::HandleScope scope(env);",
          "590:         Napi::Function cb = baton->callback.Value();",
          "591:         if (!cb.IsUndefined() && cb.IsFunction()) {",
          "598:                     (result).Set(i, RowToJS(env,*it));",
          "603:                 TRY_CATCH_CALL(stmt->Value(), cb, 2, argv);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "570:                     env.Null(),",
          "571:                     Napi::Array::New(env, 0)",
          "572:                 };",
          "574:             }",
          "575:         }",
          "576:     }",
          "",
          "[Removed Lines]",
          "573:                 TRY_CATCH_CALL(stmt->handle(), cb, 2, argv);",
          "",
          "[Added Lines]",
          "611:                 TRY_CATCH_CALL(stmt->Value(), cb, 2, argv);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "579: }",
          "581: Napi::Value Statement::Each(const Napi::CallbackInfo& info) {",
          "582:     Statement* stmt = this;",
          "584:     int last = info.Length();",
          "586:     Napi::Function completed;",
          "588:         completed = info[--last].As<Napi::Function>();",
          "589:     }",
          "",
          "[Removed Lines]",
          "587:     if (last >= 2 && info[last - 1]->IsFunction() && info[last - 2]->IsFunction()) {",
          "",
          "[Added Lines]",
          "620:     Napi::Env env = info.Env();",
          "626:     if (last >= 2 && info[last - 1].IsFunction() && info[last - 2].IsFunction()) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "606:     EachBaton* each_baton = static_cast<EachBaton*>(baton);",
          "607:     each_baton->async = new Async(each_baton->stmt, reinterpret_cast<uv_async_cb>(AsyncEach));",
          "611:     STATEMENT_BEGIN(Each);",
          "612: }",
          "",
          "[Removed Lines]",
          "608:     each_baton->async->item_cb.Reset(each_baton->callback);",
          "609:     each_baton->async->completed_cb.Reset(each_baton->completed);",
          "",
          "[Added Lines]",
          "647:     each_baton->async->item_cb.Reset(each_baton->callback.Value(), 1);",
          "648:     each_baton->async->completed_cb.Reset(each_baton->completed.Value(), 1);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "662: }",
          "664: void Statement::AsyncEach(uv_async_t* handle, int status) {",
          "667:     Async* async = static_cast<Async*>(handle->data);",
          "669:     while (true) {",
          "671:         Rows rows;",
          "",
          "[Removed Lines]",
          "665:     Napi::HandleScope scope(env);",
          "",
          "[Added Lines]",
          "706:     Napi::Env env = async->stmt->Env();",
          "707:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "677:             break;",
          "678:         }",
          "682:             Napi::Value argv[2];",
          "683:             argv[0] = env.Null();",
          "685:             Rows::const_iterator it = rows.begin();",
          "686:             Rows::const_iterator end = rows.end();",
          "687:             for (int i = 0; it < end; ++it, i++) {",
          "689:                 async->retrieved++;",
          "691:                 delete *it;",
          "692:             }",
          "693:         }",
          "694:     }",
          "697:     if (async->completed) {",
          "698:         if (!cb.IsEmpty() &&",
          "700:             Napi::Value argv[] = {",
          "701:                 env.Null(),",
          "703:             };",
          "705:         }",
          "706:         uv_close(reinterpret_cast<uv_handle_t*>(handle), CloseCallback);",
          "707:     }",
          "708: }",
          "710: void Statement::Work_AfterEach(uv_work_t* req) {",
          "713:     STATEMENT_INIT(EachBaton);",
          "715:     if (stmt->status != SQLITE_DONE) {",
          "716:         Error(baton);",
          "717:     }",
          "",
          "[Removed Lines]",
          "680:         Napi::Function cb = Napi::New(env, async->item_cb);",
          "681:         if (!cb.IsEmpty() && cb->IsFunction()) {",
          "688:                 argv[1] = RowToJS(*it);",
          "690:                 TRY_CATCH_CALL(async->stmt->handle(), cb, 2, argv);",
          "696:     Napi::Function cb = Napi::New(env, async->completed_cb);",
          "699:                 cb->IsFunction()) {",
          "702:                 Napi::New(env, async->retrieved)",
          "704:             TRY_CATCH_CALL(async->stmt->handle(), cb, 2, argv);",
          "711:     Napi::HandleScope scope(env);",
          "",
          "[Added Lines]",
          "720:         Napi::Function cb = async->item_cb.Value();",
          "721:         if (!cb.IsUndefined() && cb.IsFunction()) {",
          "728:                 argv[1] = RowToJS(env,*it);",
          "730:                 TRY_CATCH_CALL(async->stmt->Value(), cb, 2, argv);",
          "736:     Napi::Function cb = async->completed_cb.Value();",
          "739:                 cb.IsFunction()) {",
          "742:                 Napi::Number::New(env, async->retrieved)",
          "744:             TRY_CATCH_CALL(async->stmt->Value(), cb, 2, argv);",
          "753:     Napi::Env env = stmt->Env();",
          "754:     Napi::HandleScope scope(env);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "720: }",
          "722: Napi::Value Statement::Reset(const Napi::CallbackInfo& info) {",
          "723:     Statement* stmt = this;",
          "725:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:     Napi::Env env = info.Env();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "742: }",
          "744: void Statement::Work_AfterReset(uv_work_t* req) {",
          "747:     STATEMENT_INIT(Baton);",
          "752:         Napi::Value argv[] = { env.Null() };",
          "754:     }",
          "756:     STATEMENT_END();",
          "757: }",
          "760:     Napi::EscapableHandleScope scope(env);",
          "762:     Napi::Object result = Napi::Object::New(env);",
          "",
          "[Removed Lines]",
          "745:     Napi::HandleScope scope(env);",
          "750:     Napi::Function cb = Napi::New(env, baton->callback);",
          "751:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "753:         TRY_CATCH_CALL(stmt->handle(), cb, 1, argv);",
          "759: Napi::Object Statement::RowToJS(Row* row) {",
          "",
          "[Added Lines]",
          "789:     Napi::Env env = stmt->Env();",
          "790:     Napi::HandleScope scope(env);",
          "793:     Napi::Function cb = baton->callback.Value();",
          "794:     if (!cb.IsUndefined() && cb.IsFunction()) {",
          "796:         TRY_CATCH_CALL(stmt->Value(), cb, 1, argv);",
          "802: Napi::Value Statement::RowToJS(Napi::Env env, Row* row) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "779:                 value = Napi::String::New(env, ((Values::Text*)field)->value.c_str(), ((Values::Text*)field)->value.size());",
          "780:             } break;",
          "781:             case SQLITE_BLOB: {",
          "783:             } break;",
          "784:             case SQLITE_NULL: {",
          "785:                 value = env.Null();",
          "786:             } break;",
          "787:         }",
          "791:         DELETE_FIELD(field);",
          "792:     }",
          "",
          "[Removed Lines]",
          "782:                 value = Napi::Buffer::Copy(env, ((Values::Blob*)field)->value, ((Values::Blob*)field)->length);",
          "789:         (result).Set(Napi::New(env, field->name.c_str()), value);",
          "",
          "[Added Lines]",
          "825:                 value = Napi::Buffer<char>::Copy(env, ((Values::Blob*)field)->value, ((Values::Blob*)field)->length);",
          "832:         (result).Set(Napi::String::New(env, field->name.c_str()), value);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "826:     }",
          "827: }",
          "830:     Statement* stmt = this;",
          "831:     OPTIONAL_ARGUMENT_FUNCTION(0, callback);",
          "833:     Baton* baton = new Baton(stmt, callback);",
          "837: }",
          "840:     Napi::HandleScope scope(env);",
          "848:     }",
          "850:     delete baton;",
          "851: }",
          "854:     assert(!finalized);",
          "855:     finalized = true;",
          "856:     CleanQueue();",
          "",
          "[Removed Lines]",
          "829: Napi::Value Statement::Finalize(const Napi::CallbackInfo& info) {",
          "834:     stmt->Schedule(Finalize, baton);",
          "836:     return stmt->db->handle();",
          "839: void Statement::Finalize(Baton* baton) {",
          "842:     baton->stmt->Finalize();",
          "845:     Napi::Function cb = Napi::New(env, baton->callback);",
          "846:     if (!cb.IsEmpty() && cb->IsFunction()) {",
          "847:         TRY_CATCH_CALL(baton->stmt->handle(), cb, 0, NULL);",
          "853: void Statement::Finalize() {",
          "",
          "[Added Lines]",
          "872: Napi::Value Statement::Finalize_(const Napi::CallbackInfo& info) {",
          "873:     Napi::Env env = info.Env();",
          "878:     stmt->Schedule(Finalize_, baton);",
          "880:     return stmt->db->Value();",
          "883: void Statement::Finalize_(Baton* baton) {",
          "884:     Napi::Env env = baton->stmt->Env();",
          "887:     baton->stmt->Finalize_();",
          "890:     Napi::Function cb = baton->callback.Value();",
          "891:     if (!cb.IsUndefined() && cb.IsFunction()) {",
          "892:         TRY_CATCH_CALL(baton->stmt->Value(), cb, 0, NULL);",
          "898: void Statement::Finalize_() {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "862: }",
          "864: void Statement::CleanQueue() {",
          "865:     Napi::HandleScope scope(env);",
          "867:     if (prepared && !queue.empty()) {",
          "871:         Napi::Value argv[] = { exception };",
          "872:         bool called = false;",
          "",
          "[Removed Lines]",
          "870:         EXCEPTION(\"Statement is already finalized\", SQLITE_MISUSE, exception);",
          "",
          "[Added Lines]",
          "910:     Napi::Env env = this->Env();",
          "916:         EXCEPTION(Napi::String::New(env, \"Statement is already finalized\"), SQLITE_MISUSE, exception);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "876:             Call* call = queue.front();",
          "877:             queue.pop();",
          "881:             if (prepared && !cb.IsEmpty() &&",
          "884:                 called = true;",
          "885:             }",
          "",
          "[Removed Lines]",
          "879:             Napi::Function cb = Napi::New(env, call->baton->callback);",
          "882:                 cb->IsFunction()) {",
          "883:                 TRY_CATCH_CALL(handle(), cb, 1, argv);",
          "",
          "[Added Lines]",
          "925:             Napi::Function cb = call->baton->callback.Value();",
          "928:                 cb.IsFunction()) {",
          "929:                 TRY_CATCH_CALL(Value(), cb, 1, argv);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "895:         if (!called) {",
          "896:             Napi::Value info[] = { Napi::String::New(env, \"error\"), exception };",
          "898:         }",
          "899:     }",
          "900:     else while (!queue.empty()) {",
          "",
          "[Removed Lines]",
          "897:             EMIT_EVENT(handle(), 2, info);",
          "",
          "[Added Lines]",
          "943:             EMIT_EVENT(Value(), 2, info);",
          "",
          "---------------"
        ],
        "src/statement.h||src/statement.h": [
          "File: src/statement.h -> src/statement.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <napi.h>",
          "16: #include <uv.h>",
          "19: using namespace Napi;",
          "21: namespace node_sqlite3 {",
          "",
          "[Removed Lines]",
          "18: using namespace Napi;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:             if (!db->IsOpen() && db->IsLocked()) {",
          "148:             }",
          "149:         }",
          "150:     };",
          "",
          "[Removed Lines]",
          "147:                 stmt->Finalize();",
          "",
          "[Added Lines]",
          "146:                 stmt->Finalize_();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:         }",
          "187:     };",
          "196:         db->Ref();",
          "197:     }",
          "199:     ~Statement() {",
          "201:     }",
          "203:     WORK_DEFINITION(Bind);",
          "",
          "[Removed Lines]",
          "189:     Statement(Database* db_) : Napi::ObjectWrap<Statement>(),",
          "190:             db(db_),",
          "191:             _handle(NULL),",
          "192:             status(SQLITE_OK),",
          "193:             prepared(false),",
          "194:             locked(true),",
          "195:             finalized(false) {",
          "200:         if (!finalized) Finalize();",
          "",
          "[Added Lines]",
          "188:     void init(Database* db_) {",
          "189:         db = db_;",
          "190:         _handle = NULL;",
          "191:         status = SQLITE_OK;",
          "192:         prepared = false;",
          "193:         locked = true;",
          "194:         finalized = false;",
          "198:     Statement(const Napi::CallbackInfo& info);",
          "201:         if (!finalized) Finalize_();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:     WORK_DEFINITION(Each);",
          "208:     WORK_DEFINITION(Reset);",
          "212: protected:",
          "213:     static void Work_BeginPrepare(Database::Baton* baton);",
          "",
          "[Removed Lines]",
          "210:     static Napi::Value Finalize(const Napi::CallbackInfo& info);",
          "",
          "[Added Lines]",
          "211:     Napi::Value Finalize_(const Napi::CallbackInfo& info);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:     static void AsyncEach(uv_async_t* handle, int status);",
          "218:     static void CloseCallback(uv_handle_t* handle);",
          "223:     template <class T> inline Values::Field* BindParameter(const Napi::Value source, T pos);",
          "224:     template <class T> T* Bind(const Napi::CallbackInfo& info, int start = 0, int end = -1);",
          "225:     bool Bind(const Parameters &parameters);",
          "227:     static void GetRow(Row* row, sqlite3_stmt* stmt);",
          "229:     void Schedule(Work_Callback callback, Baton* baton);",
          "230:     void Process();",
          "231:     void CleanQueue();",
          "",
          "[Removed Lines]",
          "220:     static void Finalize(Baton* baton);",
          "221:     void Finalize();",
          "228:     static Napi::Object RowToJS(Row* row);",
          "",
          "[Added Lines]",
          "221:     static void Finalize_(Baton* baton);",
          "222:     void Finalize_();",
          "229:     static Napi::Value RowToJS(Napi::Env env, Row* row);",
          "",
          "---------------"
        ],
        "test/database_fail.test.js||test/database_fail.test.js": [
          "File: test/database_fail.test.js -> test/database_fail.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     it('throw when calling Database() without new', function() {",
          "11:         assert.throws(function() {",
          "12:             sqlite3.Database(':memory:');",
          "15:         assert.throws(function() {",
          "16:             sqlite3.Statement();",
          "18:     });",
          "20:     it('should error when calling Database#get on a missing table', function(done) {",
          "",
          "[Removed Lines]",
          "13:         }, (/Use the new operator to create new Database objects/));",
          "17:         }, (/Use the new operator to create new Statement objects/));",
          "",
          "[Added Lines]",
          "13:         }, (/Class constructors cannot be invoked without 'new'/));",
          "17:         }, (/Class constructors cannot be invoked without 'new'/));",
          "",
          "---------------"
        ]
      }
    }
  ]
}