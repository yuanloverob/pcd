{
  "cve_id": "CVE-2018-9259",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.5 and 2.2.0 to 2.2.13, the MP4 dissector could crash. This was addressed in epan/dissectors/file-mp4.c by restricting the box recursion depth.",
  "repo": "wireshark/wireshark",
  "patch_hash": "620f69a74b18908e3424920c7bb01cb5e4cbd8b1",
  "patch_info": {
    "commit_hash": "620f69a74b18908e3424920c7bb01cb5e4cbd8b1",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/620f69a74b18908e3424920c7bb01cb5e4cbd8b1",
    "files": [
      "epan/dissectors/file-mp4.c"
    ],
    "message": "mp4: limit the recursion depth for boxes\n\nAlthough the dissection of each box header consumes a couple of bytes,\nit turned out that it's still possible to crash wireshark with a sample\nfile that contains a large number of nested boxes. The stack will fill\nup before we reach the end of the data bytes.\n\nKeep track of the recursion depth as we walk through the hierarchy of\nboxes. Abort if we reach the (locally defined) upper limit.\n\nBug: 13777\nChange-Id: I0f67245a5c74131f10d0f9d99b39ad31711b9775\nReviewed-on: https://code.wireshark.org/review/26167\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c": [
      "File: epan/dissectors/file-mp4.c -> epan/dissectors/file-mp4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #define MAKE_TYPE_VAL(a, b, c, d)   ((a)<<24 | (b)<<16 | (c)<<8 | (d))",
      "29: void proto_register_mp4(void);",
      "30: void proto_reg_handoff_mp4(void);",
      "33:         tvbuff_t *tvb, gint offset, packet_info *pinfo, proto_tree *tree);",
      "35: static int proto_mp4 = -1;",
      "",
      "[Removed Lines]",
      "32: static gint dissect_mp4_box(guint32 parent_box_type _U_,",
      "",
      "[Added Lines]",
      "30:    possible to craft a file whose boxes recurse so deeply that wireshark",
      "31:    crashes before we processed all data. Therefore, we limit the",
      "33: #define MP4_BOX_MAX_REC_LVL  20",
      "38: static gint dissect_mp4_box(guint32 parent_box_type _U_, guint depth,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69: static int hf_mp4_stsd_entry_cnt = -1;",
      "71: static expert_field ei_mp4_box_too_large = EI_INIT;",
      "72: static expert_field ei_mp4_mvhd_next_tid_unknown = EI_INIT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78: static expert_field ei_mp4_too_many_rec_lvls = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "169: static gint",
      "170: dissect_mp4_mvhd_body(tvbuff_t *tvb, gint offset, gint len _U_,",
      "172: {",
      "173:     gint        offset_start;",
      "174:     guint8      version;",
      "",
      "[Removed Lines]",
      "171:         packet_info *pinfo, proto_tree *tree)",
      "",
      "[Added Lines]",
      "178:         packet_info *pinfo, guint depth _U_, proto_tree *tree)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "233: static gint",
      "234: dissect_mp4_mfhd_body(tvbuff_t *tvb, gint offset, gint len _U_,",
      "236: {",
      "237:     gint offset_start;",
      "",
      "[Removed Lines]",
      "235:         packet_info *pinfo _U_, proto_tree *tree)",
      "",
      "[Added Lines]",
      "242:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "255: static gint",
      "256: dissect_mp4_tkhd_body(tvbuff_t *tvb, gint offset, gint len _U_,",
      "258: {",
      "259:     gint     offset_start;",
      "260:     guint8   version;",
      "",
      "[Removed Lines]",
      "257:         packet_info *pinfo _U_, proto_tree *tree)",
      "",
      "[Added Lines]",
      "264:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "316: static gint",
      "317: dissect_mp4_ftyp_body(tvbuff_t *tvb, gint offset, gint len,",
      "319: {",
      "320:     gint offset_start;",
      "",
      "[Removed Lines]",
      "318:         packet_info *pinfo _U_, proto_tree *tree)",
      "",
      "[Added Lines]",
      "325:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "340: static gint",
      "341: dissect_mp4_stsz_body(tvbuff_t *tvb, gint offset, gint len _U_,",
      "343: {",
      "344:     gint offset_start;",
      "345:     guint32  sample_size, sample_count, i;",
      "",
      "[Removed Lines]",
      "342:         packet_info *pinfo _U_, proto_tree *tree)",
      "",
      "[Added Lines]",
      "349:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "373: static gint",
      "374: dissect_mp4_hdlr_body(tvbuff_t *tvb, gint offset, gint len _U_,",
      "376: {",
      "377:     gint   offset_start;",
      "378:     guint  hdlr_name_len;",
      "",
      "[Removed Lines]",
      "375:         packet_info *pinfo _U_, proto_tree *tree)",
      "",
      "[Added Lines]",
      "382:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "408: static gint",
      "409: dissect_mp4_dref_body(tvbuff_t *tvb, gint offset, gint len _U_,",
      "411: {",
      "412:     gint     offset_start;",
      "413:     guint32  entry_cnt, i;",
      "",
      "[Removed Lines]",
      "410:         packet_info *pinfo, proto_tree *tree)",
      "",
      "[Added Lines]",
      "417:         packet_info *pinfo, guint depth, proto_tree *tree)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "429:     offset += 4;",
      "431:     for(i=0; i<entry_cnt; i++) {",
      "433:         if (ret<=0)",
      "434:             break;",
      "",
      "[Removed Lines]",
      "432:         ret = dissect_mp4_box(BOX_TYPE_DREF, tvb, offset, pinfo, tree);",
      "",
      "[Added Lines]",
      "439:         ret = dissect_mp4_box(BOX_TYPE_DREF, depth, tvb, offset, pinfo, tree);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "443: static gint",
      "444: dissect_mp4_url_body(tvbuff_t *tvb, gint offset, gint len,",
      "446: {",
      "447: #if 0",
      "448:     guint32  flags;",
      "",
      "[Removed Lines]",
      "445:         packet_info *pinfo _U_, proto_tree *tree)",
      "",
      "[Added Lines]",
      "452:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "476: static gint",
      "477: dissect_mp4_stsd_body(tvbuff_t *tvb, gint offset, gint len,",
      "479: {",
      "480:     guint32  entry_cnt, i;",
      "481:     gint     ret;",
      "",
      "[Removed Lines]",
      "478:         packet_info *pinfo, proto_tree *tree)",
      "",
      "[Added Lines]",
      "485:         packet_info *pinfo, guint depth, proto_tree *tree)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "503:            this depends on the handler_type, we could add an optional",
      "504:            void *data parameter to dissect_mp4_box() and handle sample",
      "507:         if (ret<=0)",
      "508:             break;",
      "",
      "[Removed Lines]",
      "506:         ret = dissect_mp4_box(BOX_TYPE_STSD, tvb, offset, pinfo, tree);",
      "",
      "[Added Lines]",
      "513:         ret = dissect_mp4_box(BOX_TYPE_STSD, depth, tvb, offset, pinfo, tree);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "514: }",
      "518: static gint",
      "520:         tvbuff_t *tvb, gint offset, packet_info *pinfo, proto_tree *tree)",
      "521: {",
      "522:     gint        offset_start;",
      "",
      "[Removed Lines]",
      "519: dissect_mp4_box(guint32 parent_box_type _U_,",
      "",
      "[Added Lines]",
      "527: dissect_mp4_box(guint32 parent_box_type _U_, guint depth,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "571:     proto_item_set_len(type_pi, (gint)box_size);",
      "572:     body_size = (gint)box_size - (offset-offset_start);",
      "575:        these two components are required by the function dissecting the body",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "582:     depth++;",
      "583:     if (depth > MP4_BOX_MAX_REC_LVL) {",
      "584:         proto_tree_add_expert(tree, pinfo, &ei_mp4_too_many_rec_lvls,",
      "585:                 tvb, offset_start, (gint)box_size);",
      "586:         return -1;",
      "587:     }",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "579:     switch (box_type) {",
      "580:         case BOX_TYPE_FTYP:",
      "582:             break;",
      "583:         case BOX_TYPE_MVHD:",
      "585:             break;",
      "586:         case BOX_TYPE_MFHD:",
      "588:             break;",
      "589:         case BOX_TYPE_TKHD:",
      "591:             break;",
      "592:         case BOX_TYPE_STSZ:",
      "594:             break;",
      "595:         case BOX_TYPE_HDLR:",
      "597:             break;",
      "598:         case BOX_TYPE_DREF:",
      "600:             break;",
      "601:         case BOX_TYPE_URL_:",
      "603:             break;",
      "604:         case BOX_TYPE_STSD:",
      "606:             break;",
      "607:         case BOX_TYPE_MOOV:",
      "608:         case BOX_TYPE_MOOF:",
      "",
      "[Removed Lines]",
      "581:             dissect_mp4_ftyp_body(tvb, offset, body_size, pinfo, box_tree);",
      "584:             dissect_mp4_mvhd_body(tvb, offset, body_size, pinfo, box_tree);",
      "587:             dissect_mp4_mfhd_body(tvb, offset, body_size, pinfo, box_tree);",
      "590:             dissect_mp4_tkhd_body(tvb, offset, body_size, pinfo, box_tree);",
      "593:             dissect_mp4_stsz_body(tvb, offset, body_size, pinfo, box_tree);",
      "596:             dissect_mp4_hdlr_body(tvb, offset, body_size, pinfo, box_tree);",
      "599:             dissect_mp4_dref_body(tvb, offset, body_size, pinfo, box_tree);",
      "602:             dissect_mp4_url_body(tvb, offset, body_size, pinfo, box_tree);",
      "605:             dissect_mp4_stsd_body(tvb, offset, body_size, pinfo, box_tree);",
      "",
      "[Added Lines]",
      "596:             dissect_mp4_ftyp_body(tvb, offset, body_size, pinfo, depth, box_tree);",
      "599:             dissect_mp4_mvhd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
      "602:             dissect_mp4_mfhd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
      "605:             dissect_mp4_tkhd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
      "608:             dissect_mp4_stsz_body(tvb, offset, body_size, pinfo, depth, box_tree);",
      "611:             dissect_mp4_hdlr_body(tvb, offset, body_size, pinfo, depth, box_tree);",
      "614:             dissect_mp4_dref_body(tvb, offset, body_size, pinfo, depth, box_tree);",
      "617:             dissect_mp4_url_body(tvb, offset, body_size, pinfo, depth, box_tree);",
      "620:             dissect_mp4_stsd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "615:         case BOX_TYPE_DINF:",
      "616:         case BOX_TYPE_UDTA:",
      "617:             while (offset-offset_start < (gint)box_size) {",
      "619:                 if (ret <= 0)",
      "620:                     break;",
      "621:                 offset += ret;",
      "",
      "[Removed Lines]",
      "618:                 ret = dissect_mp4_box(box_type, tvb, offset, pinfo, box_tree);",
      "",
      "[Added Lines]",
      "633:                 ret = dissect_mp4_box(box_type, depth,",
      "634:                         tvb, offset, pinfo, box_tree);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "658:     mp4_tree = proto_item_add_subtree(pi, ett_mp4);",
      "660:     while (tvb_reported_length_remaining(tvb, offset) > 0) {",
      "662:         if (ret <= 0)",
      "663:             break;",
      "664:         offset += ret;",
      "",
      "[Removed Lines]",
      "661:         ret = dissect_mp4_box(BOX_TYPE_NONE, tvb, offset, pinfo, mp4_tree);",
      "",
      "[Added Lines]",
      "677:         ret = dissect_mp4_box(BOX_TYPE_NONE, 0, tvb, offset, pinfo, mp4_tree);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "772:         { &ei_mp4_box_too_large,",
      "773:             { \"mp4.box_too_large\", PI_PROTOCOL, PI_WARN,",
      "774:                 \"box size too large, dissection of this box is not supported\", EXPFILL }},",
      "775:         { &ei_mp4_mvhd_next_tid_unknown,",
      "776:             { \"mp4.mvhd.next_tid_unknown\", PI_PROTOCOL, PI_CHAT,",
      "777:                 \"Next track ID is unknown. Search for an unused track ID if you want to insert a new track.\", EXPFILL }}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "791:         { &ei_mp4_too_many_rec_lvls,",
      "792:             { \"mp4.too_many_levels\", PI_UNDECODED, PI_WARN,",
      "793:                 \"too many recursion levels\", EXPFILL }},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2113179835b37549f245ac7c05ff2b96276893e4",
      "candidate_info": {
        "commit_hash": "2113179835b37549f245ac7c05ff2b96276893e4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2113179835b37549f245ac7c05ff2b96276893e4",
        "files": [
          "epan/dissectors/file-mp4.c"
        ],
        "message": "mp4: limit the recursion depth for boxes\n\nAlthough the dissection of each box header consumes a couple of bytes,\nit turned out that it's still possible to crash wireshark with a sample\nfile that contains a large number of nested boxes. The stack will fill\nup before we reach the end of the data bytes.\n\nKeep track of the recursion depth as we walk through the hierarchy of\nboxes. Abort if we reach the (locally defined) upper limit.\n\nBug: 13777\nChange-Id: I0f67245a5c74131f10d0f9d99b39ad31711b9775\nReviewed-on: https://code.wireshark.org/review/26167\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 620f69a74b18908e3424920c7bb01cb5e4cbd8b1)\nReviewed-on: https://code.wireshark.org/review/26204",
        "before_after_code_files": [
          "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c"
          ],
          "candidate": [
            "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c": [
          "File: epan/dissectors/file-mp4.c -> epan/dissectors/file-mp4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #define MAKE_TYPE_VAL(a, b, c, d)   ((a)<<24 | (b)<<16 | (c)<<8 | (d))",
          "41: void proto_register_mp4(void);",
          "42: void proto_reg_handoff_mp4(void);",
          "45:         tvbuff_t *tvb, gint offset, packet_info *pinfo, proto_tree *tree);",
          "47: static int proto_mp4 = -1;",
          "",
          "[Removed Lines]",
          "44: static gint dissect_mp4_box(guint32 parent_box_type _U_,",
          "",
          "[Added Lines]",
          "42:    possible to craft a file whose boxes recurse so deeply that wireshark",
          "43:    crashes before we processed all data. Therefore, we limit the",
          "45: #define MP4_BOX_MAX_REC_LVL  20",
          "50: static gint dissect_mp4_box(guint32 parent_box_type _U_, guint depth,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: static int hf_mp4_stsd_entry_cnt = -1;",
          "83: static expert_field ei_mp4_box_too_large = EI_INIT;",
          "84: static expert_field ei_mp4_mvhd_next_tid_unknown = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: static expert_field ei_mp4_too_many_rec_lvls = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181: static gint",
          "182: dissect_mp4_mvhd_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "184: {",
          "185:     gint        offset_start;",
          "186:     guint8      version;",
          "",
          "[Removed Lines]",
          "183:         packet_info *pinfo, proto_tree *tree)",
          "",
          "[Added Lines]",
          "190:         packet_info *pinfo, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "245: static gint",
          "246: dissect_mp4_mfhd_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "248: {",
          "249:     gint offset_start;",
          "",
          "[Removed Lines]",
          "247:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "254:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "267: static gint",
          "268: dissect_mp4_tkhd_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "270: {",
          "271:     gint     offset_start;",
          "272:     guint8   version;",
          "",
          "[Removed Lines]",
          "269:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "276:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "328: static gint",
          "329: dissect_mp4_ftyp_body(tvbuff_t *tvb, gint offset, gint len,",
          "331: {",
          "332:     gint offset_start;",
          "",
          "[Removed Lines]",
          "330:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "337:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "352: static gint",
          "353: dissect_mp4_stsz_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "355: {",
          "356:     gint offset_start;",
          "357:     guint32  sample_size, sample_count, i;",
          "",
          "[Removed Lines]",
          "354:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "361:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "385: static gint",
          "386: dissect_mp4_hdlr_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "388: {",
          "389:     gint   offset_start;",
          "390:     guint  hdlr_name_len;",
          "",
          "[Removed Lines]",
          "387:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "394:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "420: static gint",
          "421: dissect_mp4_dref_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "423: {",
          "424:     gint     offset_start;",
          "425:     guint32  entry_cnt, i;",
          "",
          "[Removed Lines]",
          "422:         packet_info *pinfo, proto_tree *tree)",
          "",
          "[Added Lines]",
          "429:         packet_info *pinfo, guint depth, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "441:     offset += 4;",
          "443:     for(i=0; i<entry_cnt; i++) {",
          "445:         if (ret<=0)",
          "446:             break;",
          "",
          "[Removed Lines]",
          "444:         ret = dissect_mp4_box(BOX_TYPE_DREF, tvb, offset, pinfo, tree);",
          "",
          "[Added Lines]",
          "451:         ret = dissect_mp4_box(BOX_TYPE_DREF, depth, tvb, offset, pinfo, tree);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "455: static gint",
          "456: dissect_mp4_url_body(tvbuff_t *tvb, gint offset, gint len,",
          "458: {",
          "459: #if 0",
          "460:     guint32  flags;",
          "",
          "[Removed Lines]",
          "457:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "464:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "488: static gint",
          "489: dissect_mp4_stsd_body(tvbuff_t *tvb, gint offset, gint len,",
          "491: {",
          "492:     guint32  entry_cnt, i;",
          "493:     gint     ret;",
          "",
          "[Removed Lines]",
          "490:         packet_info *pinfo, proto_tree *tree)",
          "",
          "[Added Lines]",
          "497:         packet_info *pinfo, guint depth, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "515:            this depends on the handler_type, we could add an optional",
          "516:            void *data parameter to dissect_mp4_box() and handle sample",
          "519:         if (ret<=0)",
          "520:             break;",
          "",
          "[Removed Lines]",
          "518:         ret = dissect_mp4_box(BOX_TYPE_STSD, tvb, offset, pinfo, tree);",
          "",
          "[Added Lines]",
          "525:         ret = dissect_mp4_box(BOX_TYPE_STSD, depth, tvb, offset, pinfo, tree);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "526: }",
          "530: static gint",
          "532:         tvbuff_t *tvb, gint offset, packet_info *pinfo, proto_tree *tree)",
          "533: {",
          "534:     gint        offset_start;",
          "",
          "[Removed Lines]",
          "531: dissect_mp4_box(guint32 parent_box_type _U_,",
          "",
          "[Added Lines]",
          "539: dissect_mp4_box(guint32 parent_box_type _U_, guint depth,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "583:     proto_item_set_len(type_pi, (gint)box_size);",
          "584:     body_size = (gint)box_size - (offset-offset_start);",
          "587:        these two components are required by the function dissecting the body",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:     depth++;",
          "595:     if (depth > MP4_BOX_MAX_REC_LVL) {",
          "596:         proto_tree_add_expert(tree, pinfo, &ei_mp4_too_many_rec_lvls,",
          "597:                 tvb, offset_start, (gint)box_size);",
          "598:         return -1;",
          "599:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "591:     switch (box_type) {",
          "592:         case BOX_TYPE_FTYP:",
          "594:             break;",
          "595:         case BOX_TYPE_MVHD:",
          "597:             break;",
          "598:         case BOX_TYPE_MFHD:",
          "600:             break;",
          "601:         case BOX_TYPE_TKHD:",
          "603:             break;",
          "604:         case BOX_TYPE_STSZ:",
          "606:             break;",
          "607:         case BOX_TYPE_HDLR:",
          "609:             break;",
          "610:         case BOX_TYPE_DREF:",
          "612:             break;",
          "613:         case BOX_TYPE_URL_:",
          "615:             break;",
          "616:         case BOX_TYPE_STSD:",
          "618:             break;",
          "619:         case BOX_TYPE_MOOV:",
          "620:         case BOX_TYPE_MOOF:",
          "",
          "[Removed Lines]",
          "593:             dissect_mp4_ftyp_body(tvb, offset, body_size, pinfo, box_tree);",
          "596:             dissect_mp4_mvhd_body(tvb, offset, body_size, pinfo, box_tree);",
          "599:             dissect_mp4_mfhd_body(tvb, offset, body_size, pinfo, box_tree);",
          "602:             dissect_mp4_tkhd_body(tvb, offset, body_size, pinfo, box_tree);",
          "605:             dissect_mp4_stsz_body(tvb, offset, body_size, pinfo, box_tree);",
          "608:             dissect_mp4_hdlr_body(tvb, offset, body_size, pinfo, box_tree);",
          "611:             dissect_mp4_dref_body(tvb, offset, body_size, pinfo, box_tree);",
          "614:             dissect_mp4_url_body(tvb, offset, body_size, pinfo, box_tree);",
          "617:             dissect_mp4_stsd_body(tvb, offset, body_size, pinfo, box_tree);",
          "",
          "[Added Lines]",
          "608:             dissect_mp4_ftyp_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "611:             dissect_mp4_mvhd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "614:             dissect_mp4_mfhd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "617:             dissect_mp4_tkhd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "620:             dissect_mp4_stsz_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "623:             dissect_mp4_hdlr_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "626:             dissect_mp4_dref_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "629:             dissect_mp4_url_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "632:             dissect_mp4_stsd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "627:         case BOX_TYPE_DINF:",
          "628:         case BOX_TYPE_UDTA:",
          "629:             while (offset-offset_start < (gint)box_size) {",
          "631:                 if (ret <= 0)",
          "632:                     break;",
          "633:                 offset += ret;",
          "",
          "[Removed Lines]",
          "630:                 ret = dissect_mp4_box(box_type, tvb, offset, pinfo, box_tree);",
          "",
          "[Added Lines]",
          "645:                 ret = dissect_mp4_box(box_type, depth,",
          "646:                         tvb, offset, pinfo, box_tree);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "670:     mp4_tree = proto_item_add_subtree(pi, ett_mp4);",
          "672:     while (tvb_reported_length_remaining(tvb, offset) > 0) {",
          "674:         if (ret <= 0)",
          "675:             break;",
          "676:         offset += ret;",
          "",
          "[Removed Lines]",
          "673:         ret = dissect_mp4_box(BOX_TYPE_NONE, tvb, offset, pinfo, mp4_tree);",
          "",
          "[Added Lines]",
          "689:         ret = dissect_mp4_box(BOX_TYPE_NONE, 0, tvb, offset, pinfo, mp4_tree);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "784:         { &ei_mp4_box_too_large,",
          "785:             { \"mp4.box_too_large\", PI_PROTOCOL, PI_WARN,",
          "786:                 \"box size too large, dissection of this box is not supported\", EXPFILL }},",
          "787:         { &ei_mp4_mvhd_next_tid_unknown,",
          "788:             { \"mp4.mvhd.next_tid_unknown\", PI_PROTOCOL, PI_CHAT,",
          "789:                 \"Next track ID is unknown. Search for an unused track ID if you want to insert a new track.\", EXPFILL }}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "803:         { &ei_mp4_too_many_rec_lvls,",
          "804:             { \"mp4.too_many_levels\", PI_UNDECODED, PI_WARN,",
          "805:                 \"too many recursion levels\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f927769fdfb98097bb6a50ed26080cfbaee3ccf6",
      "candidate_info": {
        "commit_hash": "f927769fdfb98097bb6a50ed26080cfbaee3ccf6",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f927769fdfb98097bb6a50ed26080cfbaee3ccf6",
        "files": [
          "epan/dissectors/file-mp4.c"
        ],
        "message": "mp4: limit the recursion depth for boxes\n\nAlthough the dissection of each box header consumes a couple of bytes,\nit turned out that it's still possible to crash wireshark with a sample\nfile that contains a large number of nested boxes. The stack will fill\nup before we reach the end of the data bytes.\n\nKeep track of the recursion depth as we walk through the hierarchy of\nboxes. Abort if we reach the (locally defined) upper limit.\n\nBug: 13777\nChange-Id: I0f67245a5c74131f10d0f9d99b39ad31711b9775\nReviewed-on: https://code.wireshark.org/review/26167\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>\nPetri-Dish: Martin Kaiser <wireshark@kaiser.cx>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 620f69a74b18908e3424920c7bb01cb5e4cbd8b1)\nReviewed-on: https://code.wireshark.org/review/26205",
        "before_after_code_files": [
          "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c"
          ],
          "candidate": [
            "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/file-mp4.c||epan/dissectors/file-mp4.c": [
          "File: epan/dissectors/file-mp4.c -> epan/dissectors/file-mp4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #define MAKE_TYPE_VAL(a, b, c, d)   ((a)<<24 | (b)<<16 | (c)<<8 | (d))",
          "41: void proto_register_mp4(void);",
          "42: void proto_reg_handoff_mp4(void);",
          "45:         tvbuff_t *tvb, gint offset, packet_info *pinfo, proto_tree *tree);",
          "47: static int proto_mp4 = -1;",
          "",
          "[Removed Lines]",
          "44: static gint dissect_mp4_box(guint32 parent_box_type _U_,",
          "",
          "[Added Lines]",
          "42:    possible to craft a file whose boxes recurse so deeply that wireshark",
          "43:    crashes before we processed all data. Therefore, we limit the",
          "45: #define MP4_BOX_MAX_REC_LVL  20",
          "50: static gint dissect_mp4_box(guint32 parent_box_type _U_, guint depth,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: static int hf_mp4_stsd_entry_cnt = -1;",
          "83: static expert_field ei_mp4_box_too_large = EI_INIT;",
          "84: static expert_field ei_mp4_mvhd_next_tid_unknown = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: static expert_field ei_mp4_too_many_rec_lvls = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181: static gint",
          "182: dissect_mp4_mvhd_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "184: {",
          "185:     gint        offset_start;",
          "186:     guint8      version;",
          "",
          "[Removed Lines]",
          "183:         packet_info *pinfo, proto_tree *tree)",
          "",
          "[Added Lines]",
          "190:         packet_info *pinfo, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247: static gint",
          "248: dissect_mp4_mfhd_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "250: {",
          "251:     gint offset_start;",
          "",
          "[Removed Lines]",
          "249:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "256:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "269: static gint",
          "270: dissect_mp4_tkhd_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "272: {",
          "273:     gint     offset_start;",
          "274:     guint8   version;",
          "",
          "[Removed Lines]",
          "271:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "278:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "332: static gint",
          "333: dissect_mp4_ftyp_body(tvbuff_t *tvb, gint offset, gint len,",
          "335: {",
          "336:     gint offset_start;",
          "",
          "[Removed Lines]",
          "334:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "341:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356: static gint",
          "357: dissect_mp4_stsz_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "359: {",
          "360:     gint offset_start;",
          "361:     guint32  sample_size, sample_count, i;",
          "",
          "[Removed Lines]",
          "358:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "365:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "389: static gint",
          "390: dissect_mp4_hdlr_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "392: {",
          "393:     gint   offset_start;",
          "394:     guint  hdlr_name_len;",
          "",
          "[Removed Lines]",
          "391:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "398:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "424: static gint",
          "425: dissect_mp4_dref_body(tvbuff_t *tvb, gint offset, gint len _U_,",
          "427: {",
          "428:     gint     offset_start;",
          "429:     guint32  entry_cnt, i;",
          "",
          "[Removed Lines]",
          "426:         packet_info *pinfo, proto_tree *tree)",
          "",
          "[Added Lines]",
          "433:         packet_info *pinfo, guint depth, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "445:     offset += 4;",
          "447:     for(i=0; i<entry_cnt; i++) {",
          "449:         if (ret<=0)",
          "450:             break;",
          "",
          "[Removed Lines]",
          "448:         ret = dissect_mp4_box(BOX_TYPE_DREF, tvb, offset, pinfo, tree);",
          "",
          "[Added Lines]",
          "455:         ret = dissect_mp4_box(BOX_TYPE_DREF, depth, tvb, offset, pinfo, tree);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "459: static gint",
          "460: dissect_mp4_url_body(tvbuff_t *tvb, gint offset, gint len,",
          "462: {",
          "463: #if 0",
          "464:     guint32  flags;",
          "",
          "[Removed Lines]",
          "461:         packet_info *pinfo _U_, proto_tree *tree)",
          "",
          "[Added Lines]",
          "468:         packet_info *pinfo _U_, guint depth _U_, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "492: static gint",
          "493: dissect_mp4_stsd_body(tvbuff_t *tvb, gint offset, gint len,",
          "495: {",
          "496:     guint32  entry_cnt, i;",
          "497:     gint     ret;",
          "",
          "[Removed Lines]",
          "494:         packet_info *pinfo, proto_tree *tree)",
          "",
          "[Added Lines]",
          "501:         packet_info *pinfo, guint depth, proto_tree *tree)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "519:            this depends on the handler_type, we could add an optional",
          "520:            void *data parameter to dissect_mp4_box() and handle sample",
          "523:         if (ret<=0)",
          "524:             break;",
          "",
          "[Removed Lines]",
          "522:         ret = dissect_mp4_box(BOX_TYPE_STSD, tvb, offset, pinfo, tree);",
          "",
          "[Added Lines]",
          "529:         ret = dissect_mp4_box(BOX_TYPE_STSD, depth, tvb, offset, pinfo, tree);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "530: }",
          "534: static gint",
          "536:         tvbuff_t *tvb, gint offset, packet_info *pinfo, proto_tree *tree)",
          "537: {",
          "538:     gint        offset_start;",
          "",
          "[Removed Lines]",
          "535: dissect_mp4_box(guint32 parent_box_type _U_,",
          "",
          "[Added Lines]",
          "543: dissect_mp4_box(guint32 parent_box_type _U_, guint depth,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "587:     proto_item_set_len(type_pi, (gint)box_size);",
          "588:     body_size = (gint)box_size - (offset-offset_start);",
          "591:        these two components are required by the function dissecting the body",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598:     depth++;",
          "599:     if (depth > MP4_BOX_MAX_REC_LVL) {",
          "600:         proto_tree_add_expert(tree, pinfo, &ei_mp4_too_many_rec_lvls,",
          "601:                 tvb, offset_start, (gint)box_size);",
          "602:         return -1;",
          "603:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "595:     switch (box_type) {",
          "596:         case BOX_TYPE_FTYP:",
          "598:             break;",
          "599:         case BOX_TYPE_MVHD:",
          "601:             break;",
          "602:         case BOX_TYPE_MFHD:",
          "604:             break;",
          "605:         case BOX_TYPE_TKHD:",
          "607:             break;",
          "608:         case BOX_TYPE_STSZ:",
          "610:             break;",
          "611:         case BOX_TYPE_HDLR:",
          "613:             break;",
          "614:         case BOX_TYPE_DREF:",
          "616:             break;",
          "617:         case BOX_TYPE_URL_:",
          "619:             break;",
          "620:         case BOX_TYPE_STSD:",
          "622:             break;",
          "623:         case BOX_TYPE_MOOV:",
          "624:         case BOX_TYPE_MOOF:",
          "",
          "[Removed Lines]",
          "597:             dissect_mp4_ftyp_body(tvb, offset, body_size, pinfo, box_tree);",
          "600:             dissect_mp4_mvhd_body(tvb, offset, body_size, pinfo, box_tree);",
          "603:             dissect_mp4_mfhd_body(tvb, offset, body_size, pinfo, box_tree);",
          "606:             dissect_mp4_tkhd_body(tvb, offset, body_size, pinfo, box_tree);",
          "609:             dissect_mp4_stsz_body(tvb, offset, body_size, pinfo, box_tree);",
          "612:             dissect_mp4_hdlr_body(tvb, offset, body_size, pinfo, box_tree);",
          "615:             dissect_mp4_dref_body(tvb, offset, body_size, pinfo, box_tree);",
          "618:             dissect_mp4_url_body(tvb, offset, body_size, pinfo, box_tree);",
          "621:             dissect_mp4_stsd_body(tvb, offset, body_size, pinfo, box_tree);",
          "",
          "[Added Lines]",
          "612:             dissect_mp4_ftyp_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "615:             dissect_mp4_mvhd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "618:             dissect_mp4_mfhd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "621:             dissect_mp4_tkhd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "624:             dissect_mp4_stsz_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "627:             dissect_mp4_hdlr_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "630:             dissect_mp4_dref_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "633:             dissect_mp4_url_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "636:             dissect_mp4_stsd_body(tvb, offset, body_size, pinfo, depth, box_tree);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "631:         case BOX_TYPE_DINF:",
          "632:         case BOX_TYPE_UDTA:",
          "633:             while (offset-offset_start < (gint)box_size) {",
          "635:                 if (ret <= 0)",
          "636:                     break;",
          "637:                 offset += ret;",
          "",
          "[Removed Lines]",
          "634:                 ret = dissect_mp4_box(box_type, tvb, offset, pinfo, box_tree);",
          "",
          "[Added Lines]",
          "649:                 ret = dissect_mp4_box(box_type, depth,",
          "650:                         tvb, offset, pinfo, box_tree);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "674:     mp4_tree = proto_item_add_subtree(pi, ett_mp4);",
          "676:     while (tvb_reported_length_remaining(tvb, offset) > 0) {",
          "678:         if (ret <= 0)",
          "679:             break;",
          "680:         offset += ret;",
          "",
          "[Removed Lines]",
          "677:         ret = dissect_mp4_box(BOX_TYPE_NONE, tvb, offset, pinfo, mp4_tree);",
          "",
          "[Added Lines]",
          "693:         ret = dissect_mp4_box(BOX_TYPE_NONE, 0, tvb, offset, pinfo, mp4_tree);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "788:         { &ei_mp4_box_too_large,",
          "789:             { \"mp4.box_too_large\", PI_PROTOCOL, PI_WARN,",
          "790:                 \"box size too large, dissection of this box is not supported\", EXPFILL }},",
          "791:         { &ei_mp4_mvhd_next_tid_unknown,",
          "792:             { \"mp4.mvhd.next_tid_unknown\", PI_PROTOCOL, PI_CHAT,",
          "793:                 \"Next track ID is unknown. Search for an unused track ID if you want to insert a new track.\", EXPFILL }}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "807:         { &ei_mp4_too_many_rec_lvls,",
          "808:             { \"mp4.too_many_levels\", PI_UNDECODED, PI_WARN,",
          "809:                 \"too many recursion levels\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    }
  ]
}