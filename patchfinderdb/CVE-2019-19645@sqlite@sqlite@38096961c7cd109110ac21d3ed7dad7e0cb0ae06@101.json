{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cd9cb85a414998d27bc7904842c69c76da240794",
      "candidate_info": {
        "commit_hash": "cd9cb85a414998d27bc7904842c69c76da240794",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cd9cb85a414998d27bc7904842c69c76da240794",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Add the SQLITE_SUBTYPE flag, which may be passed to sqlite3_create_window_function() to indicate that the window function uses sqlite3_value_subtype() to check the sub-type of its arguments.\n\nFossilOrigin-Name: ba2ebc3a348decc5cedaf14960e30e7ae26a26824cfa198727f2499162142ef3",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2504: #endif",
          "2505:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "2506:     rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg,",
          "2508:                                  (void*)&aFunc[i].flag,",
          "2509:                                  aFunc[i].xFunc, 0, 0);",
          "2510:   }",
          "2511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "2512:   for(i=0; i<sizeof(aAgg)/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){",
          "2513:     rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,",
          "2515:                                  aAgg[i].xStep, aAgg[i].xFinal,",
          "2516:                                  aAgg[i].xValue, jsonGroupInverse, 0);",
          "2517:   }",
          "",
          "[Removed Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2514:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "[Added Lines]",
          "2507:                                  SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "2514:                 SQLITE_SUBTYPE | SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 658a42d3633b31fda260f2c5a1a2c7dd8eb4eb0114d322369017c56faf5ecd42",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1720:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1721:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1723:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1725: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY);",
          "",
          "[Added Lines]",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY|SQLITE_SUBTYPE);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4991: #define SQLITE_DETERMINISTIC    0x000000800",
          "4992: #define SQLITE_DIRECTONLY       0x000080000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5001: #define SQLITE_SUBTYPE          0x000100000",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:   int regStartRowid;",
          "3613:   int regEndRowid;",
          "3614: };",
          "3616: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:   u8 bExprArgs;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "970:       if( pWin->pFilter ){",
          "971:         Expr *pFilter = sqlite3ExprDup(db, pWin->pFilter, 0);",
          "972:         pSublist = sqlite3ExprListAppend(pParse, pSublist, pFilter);",
          "",
          "[Removed Lines]",
          "968:       pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "969:       pSublist = exprListAppendList(pParse, pSublist, pWin->pOwner->x.pList, 0);",
          "",
          "[Added Lines]",
          "968:       ExprList *pArgs = pWin->pOwner->x.pList;",
          "969:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){",
          "970:         selectWindowRewriteEList(pParse, pMWin, pSrc, pArgs, pTab, &pSublist);",
          "971:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "972:         pWin->bExprArgs = 1;",
          "973:       }else{",
          "974:         pWin->iArgCol = (pSublist ? pSublist->nExpr : 0);",
          "975:         pSublist = exprListAppendList(pParse, pSublist, pArgs, 0);",
          "976:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1432:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1433:     FuncDef *pFunc = pWin->pFunc;",
          "1434:     int regArg;",
          "1436:     int i;",
          "1438:     assert( bInverse==0 || pWin->eStart!=TK_UNBOUNDED );",
          "",
          "[Removed Lines]",
          "1435:     int nArg = windowArgCount(pWin);",
          "",
          "[Added Lines]",
          "1442:     int nArg = pWin->bExprArgs ? 0 : windowArgCount(pWin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1482:         VdbeCoverage(v);",
          "1483:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1484:       }",
          "1485:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "1486:         CollSeq *pColl;",
          "1487:         assert( nArg>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1492:       if( pWin->bExprArgs ){",
          "1493:         nArg = pWin->pOwner->x.pList->nExpr;",
          "1494:         regArg = sqlite3GetTempRange(pParse, nArg);",
          "1495:         sqlite3ExprCodeExprList(pParse, pWin->pOwner->x.pList, regArg, 0, 0);",
          "1496:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1492:                         bInverse, regArg, pWin->regAccum);",
          "1493:       sqlite3VdbeAppendP4(v, pFunc, P4_FUNCDEF);",
          "1494:       sqlite3VdbeChangeP5(v, (u8)nArg);",
          "1495:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1496:     }",
          "1497:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507:       if( pWin->bExprArgs ){",
          "1508:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1509:       }",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Test cases for RANGE BETWEEN and especially with NULLS LAST",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix windowB",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   INSERT INTO t1 VALUES(NULL, 1);",
          "26:   INSERT INTO t1 VALUES(NULL, 2);",
          "27:   INSERT INTO t1 VALUES(NULL, 3);",
          "28: } {}",
          "30: foreach {tn win} {",
          "31:   1 { ORDER BY a RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "32:   2 { ORDER BY a NULLS LAST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "33:   3 { ORDER BY a DESC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "34:   4 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING }",
          "36:   5 { ORDER BY a      NULLS LAST  RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "37:   6 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING }",
          "39:   7 { ORDER BY a      NULLS LAST  RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "40:   8 { ORDER BY a DESC NULLS FIRST RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING }",
          "41: } {",
          "42:   do_execsql_test 1.$tn \"",
          "43:     SELECT sum(b) OVER win FROM t1",
          "44:     WINDOW win AS ( $win )",
          "45:   \" {6 6 6}",
          "46: }",
          "48: do_execsql_test 1.2 {",
          "49:   SELECT sum(b) OVER win FROM t1",
          "50:   WINDOW win AS (",
          "51:     ORDER BY a DESC NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "52:   )",
          "53: } {6 6 6}",
          "55: #-------------------------------------------------------------------------",
          "56: reset_db",
          "57: do_execsql_test 2.0 {",
          "58:   CREATE TABLE t1(a, b);",
          "59:   INSERT INTO t1 VALUES(1, NULL);",
          "60:   INSERT INTO t1 VALUES(2, 45);",
          "61:   INSERT INTO t1 VALUES(3, 66.2);",
          "62:   INSERT INTO t1 VALUES(4, 'hello world');",
          "63:   INSERT INTO t1 VALUES(5, 'hello world');",
          "64:   INSERT INTO t1 VALUES(6, X'1234');",
          "65:   INSERT INTO t1 VALUES(7, X'1234');",
          "66:   INSERT INTO t1 VALUES(8, NULL);",
          "67: }",
          "69: foreach {tn win} {",
          "70:   1 \"ORDER BY b RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "71:   2 \"ORDER BY b RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "72:   3 \"ORDER BY b NULLS LAST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING\"",
          "73:   4 \"ORDER BY b NULLS LAST RANGE BETWEEN 2 FOLLOWING AND 2 FOLLOWING\"",
          "74: } {",
          "75:   do_execsql_test 2.1.$tn \"",
          "76:     SELECT a, sum(a) OVER win FROM t1",
          "77:     WINDOW win AS ( $win )",
          "78:     ORDER BY 1",
          "79:   \" {1 9   2 {}  3 {}  4 9  5 9  6 13  7 13  8 9}",
          "80: }",
          "82: #-------------------------------------------------------------------------",
          "83: reset_db",
          "84: do_execsql_test 3.0 {",
          "85:   CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "86:   INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "87:   INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "88: }",
          "90: do_execsql_test 3.1 {",
          "91:   SELECT json_group_array(json(j)) FROM testjson;",
          "92: } {",
          "93:   {[{\"a\":1},{\"b\":2}]}",
          "94: }",
          "96: breakpoint",
          "97: do_execsql_test 3.2 {",
          "98:   SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99: } {",
          "100:   {[{\"a\":1}]}",
          "101:   {[{\"a\":1},{\"b\":2}]}",
          "102: }",
          "105: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26b7ec8b244cf937cdca47b45f57121f27367a54",
      "candidate_info": {
        "commit_hash": "26b7ec8b244cf937cdca47b45f57121f27367a54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/26b7ec8b244cf937cdca47b45f57121f27367a54",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Improve the strict enforcement of cell sizes in balancing from check-in [12713f320b2c1def] so that it also works with table-btrees in addition to index-btrees.\n\nFossilOrigin-Name: ef27e7a08728aa7447ae19812803ac5c4a9d80c97541014bd292485792005a3e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55f06aa3f890dc1dc5c2ed0e6777e46d609a6f9d223d1d4b5813097ce4f4e797",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7660:   usableSpace = pBt->usableSize - 12 + leafCorrection;",
          "7662:     MemPage *p = apOld[i];",
          "7667:     szNew[i] = usableSpace - p->nFree;",
          "7668:     for(j=0; j<p->nOverflow; j++){",
          "7669:       szNew[i] += 2 + p->xCellSize(p, p->apOvfl[j]);",
          "",
          "[Removed Lines]",
          "7661:   for(i=0; i<nOld; i++){",
          "7663:     b.apEnd[i*2] = p->aDataEnd;",
          "7664:     b.apEnd[i*2+1] = pParent->aDataEnd;",
          "7665:     b.ixNx[i*2] = cntOld[i];",
          "7666:     b.ixNx[i*2+1] = cntOld[i]+1;",
          "",
          "[Added Lines]",
          "7672:   for(i=k=0; i<nOld; i++, k++){",
          "7674:     b.apEnd[k] = p->aDataEnd;",
          "7675:     b.ixNx[k] = cntOld[i];",
          "7676:     if( !leafData ){",
          "7677:       k++;",
          "7678:       b.apEnd[k] = pParent->aDataEnd;",
          "7679:       b.ixNx[k] = cntOld[i]+1;",
          "7680:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3de52e8fa0032ebe22940cc8d58b879e65a06ba0",
      "candidate_info": {
        "commit_hash": "3de52e8fa0032ebe22940cc8d58b879e65a06ba0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3de52e8fa0032ebe22940cc8d58b879e65a06ba0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Including the phrase EXCLUDE NO OTHERS in the frame-spec of a window function (which is the default setting for EXCLUDE) silently disables the xInverse optimization.  This is a feature, but we will keep it undocumented for now in case we later decide it is a bad idea.\n\nFossilOrigin-Name: 10aedce3dd2c0c9f0ee9e0aefd0b4d2c2eb17c4ca72003c4db9768ea5cdafcf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac98b23b34632fbc654a34a8b3d842ce65603e4c04d89c589b46f4d48a61152d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1717: frame_exclude_opt(A) ::= EXCLUDE frame_exclude(X). { A = X; }",
          "1719: %type frame_exclude {u8}",
          "1721: frame_exclude(A) ::= CURRENT ROW. { A = TK_CURRENT; }",
          "1722: frame_exclude(A) ::= GROUP.       { A = TK_GROUP; }",
          "1723: frame_exclude(A) ::= TIES.        { A = TK_TIES; }",
          "",
          "[Removed Lines]",
          "1720: frame_exclude(A) ::= NO OTHERS.   { A = 0; }",
          "",
          "[Added Lines]",
          "1720: frame_exclude(A) ::= NO OTHERS.   { A = TK_NO; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
      "candidate_info": {
        "commit_hash": "225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/225b05795f9f9963e8c9431e3a4f1b0503a45ec1",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a memory leak introduced by [55c5d72a].\n\nFossilOrigin-Name: fbd681dce2905d8b8ad7948ba684b0b62d6c04be0f7a2992ee7d6836a99010de",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2569:     }",
          "2570:   }",
          "2574:   assert( *pnOut<=n1+n2+FTS3_VARINT_MAX-1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2572:   if( rc!=SQLITE_OK ){",
          "2573:     sqlite3_free(aOut);",
          "2574:     p = aOut = 0;",
          "2575:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e717c4377c0116a5d36815fbc30f8b8803f14770d30be361feb27cc5b5b537b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d92571d65393ae87f01f533eee2a6075b122efc",
      "candidate_info": {
        "commit_hash": "0d92571d65393ae87f01f533eee2a6075b122efc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d92571d65393ae87f01f533eee2a6075b122efc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "test/check.test",
          "test/quote.test"
        ],
        "message": "Disallow string constants enclosed in double-quotes within new CREATE TABLE and CREATE INDEX statements. It is still possible to enclose column names in double-quotes, and existing database schemas that use double-quotes for strings can still be loaded. This addresses ticket [9b78184b].\n\nFossilOrigin-Name: 1685610ef8e0dc9218b02461ceab14dc6114f4f5ef7fcda0da395094aff443e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/check.test||test/check.test",
          "test/quote.test||test/quote.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 99eba69b3a64741c69d167bf7a05dbe138c9e7faecc54a1b8d8220cb23902830",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "",
          "[Removed Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted) ){",
          "",
          "[Added Lines]",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "480:      && 0==(pTopNC->ncFlags&NC_NewSchema)",
          "481:     ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1656: ){",
          "1658:   Walker w;",
          "1660:   if( pExpr==0 ) return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1657:   u16 savedHasAgg;",
          "",
          "[Added Lines]",
          "1659:   int savedHasAgg;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1769:   sNC.pParse = pParse;",
          "1770:   sNC.pSrcList = &sSrc;",
          "1771:   sNC.ncFlags = type;",
          "1772:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1773:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "1774:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1774:   if( pTab && !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NewSchema;",
          "1776:   }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: do_test check-2.1 {",
          "119:   execsql {",
          "120:     CREATE TABLE t2(",
          "121:       x INTEGER CONSTRAINT one CHECK( typeof(coalesce(x,0))==\"integer\" ),",
          "122:       y REAL CONSTRAINT two CHECK( typeof(coalesce(y,0.1))=='real' ),",
          "123:       z TEXT CONSTRAINT three CHECK( typeof(coalesce(z,''))=='text' )",
          "124:     );",
          "125:   }",
          "126: } {}",
          "127: do_test check-2.2 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:     PRAGMA writable_schema = 1;",
          "126:     PRAGMA writable_schema = 0;",
          "",
          "---------------"
        ],
        "test/quote.test||test/quote.test": [
          "File: test/quote.test -> test/quote.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "20: # Create a table with a strange name and with strange column names.",
          "21: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: set testprefix quote",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   } msg ]",
          "85:   lappend r $msg",
          "86: } {0 {}}",
          "89: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: #-------------------------------------------------------------------------",
          "90: # Check that it is not possible to use double-quotes for a string",
          "91: # constant in a CHECK constraint or CREATE INDEX statement. However,",
          "92: # SQLite can load such a schema from disk.",
          "93: #",
          "94: reset_db",
          "95: do_execsql_test 2.0 {",
          "96:   CREATE TABLE t1(x, y, z);",
          "97: }",
          "98: foreach {tn sql errname} {",
          "99:   1 { CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") ) } null",
          "100:   2 { CREATE INDEX i2 ON t1(x, y, z||\"abc\") }        abc",
          "101:   3 { CREATE INDEX i3 ON t1(\"w\") }                   w",
          "102:   4 { CREATE INDEX i4 ON t1(x) WHERE z=\"w\" }         w",
          "103: } {",
          "104:   do_catchsql_test 2.1.$tn $sql [list 1 \"no such column: $errname\"]",
          "105: }",
          "107: do_execsql_test 2.2 {",
          "108:   PRAGMA writable_schema = 1;",
          "109:   CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") );",
          "110:   CREATE INDEX i2 ON t1(x, y, z||\"abc\");",
          "111:   CREATE INDEX i3 ON t1(\"w\");",
          "112:   CREATE INDEX i4 ON t1(x) WHERE z=\"w\";",
          "113: }",
          "115: db close",
          "116: sqlite3 db test.db",
          "118: do_execsql_test 2.3.1 {",
          "119:   INSERT INTO xyz VALUES(1, 2, 3);",
          "120: }",
          "121: do_catchsql_test 2.3.2 {",
          "122:   INSERT INTO xyz VALUES(1, 2, 'null');",
          "123: } {1 {CHECK constraint failed: xyz}}",
          "125: do_execsql_test 2.4 {",
          "126:   INSERT INTO t1 VALUES(1, 2, 3);",
          "127:   INSERT INTO t1 VALUES(4, 5, 'w');",
          "128:   SELECT * FROM t1 WHERE z='w';",
          "129: } {4 5 w}",
          "130: do_execsql_test 2.5 {",
          "131:   SELECT sql FROM sqlite_master;",
          "132: } {",
          "133:   {CREATE TABLE t1(x, y, z)}",
          "134:   {CREATE TABLE xyz(a, b, c CHECK (c!=\"null\") )}",
          "135:   {CREATE INDEX i2 ON t1(x, y, z||\"abc\")}",
          "136:   {CREATE INDEX i3 ON t1(\"w\")}",
          "137:   {CREATE INDEX i4 ON t1(x) WHERE z=\"w\"}",
          "138: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}