{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0f40e8dd411513ac457a7ee76524b4b5661d6b62",
      "candidate_info": {
        "commit_hash": "0f40e8dd411513ac457a7ee76524b4b5661d6b62",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f40e8dd411513ac457a7ee76524b4b5661d6b62",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showlocks.c"
        ],
        "message": "Update the showlocks utility program so that it functions on files with a huge number of locks without overflowing the stack.\n\nFossilOrigin-Name: adb7484f93329c7a94cd84e30bc4a8dbf2d6e901eba17cc3454afb8ba346cbf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showlocks.c||tool/showlocks.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db2f0836b64cd2e119684f1cf75fa3b19a84ca6aca1a239f7e2b9298016e2c95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showlocks.c||tool/showlocks.c": [
          "File: tool/showlocks.c -> tool/showlocks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: static int showLocksInRange(int fd, off_t lwr, off_t upr){",
          "25:   int cnt = 0;",
          "26:   struct flock x;",
          "40:   }",
          "43:   }",
          "44:   return cnt;",
          "45: }",
          "",
          "[Removed Lines]",
          "28:   x.l_type = F_WRLCK;",
          "29:   x.l_whence = SEEK_SET;",
          "30:   x.l_start = lwr;",
          "31:   x.l_len = upr-lwr;",
          "32:   fcntl(fd, F_GETLK, &x);",
          "33:   if( x.l_type==F_UNLCK ) return 0;",
          "34:   printf(\"start: %-12d len: %-5d pid: %-5d type: %s\\n\",",
          "35:        (int)x.l_start, (int)x.l_len,",
          "36:        x.l_pid, x.l_type==F_WRLCK ? \"WRLCK\" : \"RDLCK\");",
          "37:   cnt++;",
          "38:   if( x.l_start>lwr ){",
          "39:     cnt += showLocksInRange(fd, lwr, x.l_start-1);",
          "41:   if( x.l_start+x.l_len<upr ){",
          "42:     cnt += showLocksInRange(fd, x.l_start+x.l_len+1, upr);",
          "",
          "[Added Lines]",
          "27:   struct lockRange {",
          "28:     off_t lwr;",
          "29:     off_t upr;",
          "30:   } *aPending = 0;",
          "31:   int nAlloc = 1;",
          "32:   int nPending = 0;",
          "33:   int nDone = 0;",
          "35:   nPending = 1;",
          "36:   aPending = malloc( sizeof(aPending[0]) );",
          "37:   if( aPending==0 ){",
          "38:     fprintf(stderr, \"out of memory\\n\");",
          "39:     exit(1);",
          "41:   aPending[0].lwr = lwr;",
          "42:   aPending[0].upr = upr;",
          "44:   for(nDone=0; nDone<nPending; nDone++){",
          "45:     lwr = aPending[nDone].lwr;",
          "46:     upr = aPending[nDone].upr;",
          "47:     if( lwr>=upr ) continue;",
          "48:     x.l_type = F_WRLCK;",
          "49:     x.l_whence = SEEK_SET;",
          "50:     x.l_start = lwr;",
          "51:     x.l_len = upr - lwr;",
          "52:     fcntl(fd, F_GETLK, &x);",
          "53:     if( x.l_type==F_UNLCK ) continue;",
          "54:     printf(\"start: %-12d len: %-5d pid: %-5d type: %s\\n\",",
          "55:          (int)x.l_start, (int)x.l_len,",
          "56:          x.l_pid, x.l_type==F_WRLCK ? \"WRLCK\" : \"RDLCK\");",
          "57:     cnt++;",
          "58:     if( nPending+2 > nAlloc ){",
          "59:       nAlloc = nAlloc*2 + 2;",
          "60:       aPending = realloc(aPending, sizeof(aPending[0])*nAlloc );",
          "61:     }",
          "62:     if( aPending==0 ){",
          "63:       fprintf(stderr, \"unable to realloc for %d bytes\\n\",",
          "64:                       (int)sizeof(aPending[0])*(nPending+2));",
          "65:       exit(1);",
          "66:     }",
          "67:     if( lwr<x.l_start ){",
          "68:       aPending[nPending].lwr = lwr;",
          "69:       aPending[nPending].upr = x.l_start;",
          "70:       nPending++;",
          "71:     }",
          "72:     if( x.l_start+x.l_len<=upr ){",
          "73:       aPending[nPending].lwr = x.l_start + x.l_len;",
          "74:       aPending[nPending].upr = upr;",
          "75:       nPending++;",
          "76:     }",
          "78:   free(aPending);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cea1951e80a602a6cca083e45767e47e04d6e7f0",
      "candidate_info": {
        "commit_hash": "cea1951e80a602a6cca083e45767e47e04d6e7f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cea1951e80a602a6cca083e45767e47e04d6e7f0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Do not activate the truthProb adjustment mechanism if the truth probability is less than the heuristic value, as there could be correlations unknown to stat4.  Also add additional tracing output to make truthProb adjustments more visible.\n\nFossilOrigin-Name: c535fea147ce5c6e4aab25d3c85a3f53a7364c5b5ee10fb6d393c5911a02be7e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 243ab1852a2291595527ea1f26e78ad83eda285ae28f876bc1c703677f495cfa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2305:           if( sqlite3ExprIsInteger(pRight, &k) && k>=(-1) && k<=1 ){",
          "2306:             k = 10;",
          "2307:           }else{",
          "2309:           }",
          "2310:           if( iReduce<k ){",
          "2311:             pTerm->wtFlags |= TERM_HEURTRUTH;",
          "",
          "[Removed Lines]",
          "2308:             k = 20;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2660:           if( nOut ){",
          "2661:             pNew->nOut = sqlite3LogEst(nOut);",
          "2664:               if( sqlite3WhereTrace & 0x01 ){",
          "2665:                 sqlite3DebugPrintf(\"Update truthProb from %d to %d:\\n\",",
          "",
          "[Removed Lines]",
          "2662:             if( nEq==1 && pTerm->truthProb>0 ){",
          "",
          "[Added Lines]",
          "2662:             if( nEq==1",
          "2663:              && pTerm->truthProb>0",
          "2667:              && pNew->nOut+20 > pProbe->aiRowLogEst[0]",
          "2668:             ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4555:   return w.eCode;",
          "4556: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4565: #ifdef WHERETRACE_ENABLED",
          "4569: static void showAllWhereLoops(WhereInfo *pWInfo, WhereClause *pWC){",
          "4571:     WhereLoop *p;",
          "4572:     int i;",
          "4573:     static const char zLabel[] = \"0123456789abcdefghijklmnopqrstuvwyxz\"",
          "4574:                                            \"ABCDEFGHIJKLMNOPQRSTUVWYXZ\";",
          "4575:     for(p=pWInfo->pLoops, i=0; p; p=p->pNextLoop, i++){",
          "4576:       p->cId = zLabel[i%(sizeof(zLabel)-1)];",
          "4577:       sqlite3WhereLoopPrint(p, pWC);",
          "4578:     }",
          "4579:   }",
          "4580: }",
          "4581: # define WHERETRACE_ALL_LOOPS(W,C) showAllWhereLoops(W,C)",
          "4582: #else",
          "4583: # define WHERETRACE_ALL_LOOPS(W,C)",
          "4584: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4866:     if( sWLB.bldFlags2 & SQLITE_BLDF2_2NDPASS ){",
          "4867:       WHERETRACE(0xffff,",
          "4868:          (\"**** Redo all loop computations due to truthProb changes ****\\n\"));",
          "4869:       while( pWInfo->pLoops ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4895:       WHERETRACE_ALL_LOOPS(pWInfo, sWLB.pWC);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4875:       if( rc ) goto whereBeginError;",
          "4876:     }",
          "4877: #endif",
          "4892:     wherePathSolver(pWInfo, 0);",
          "4893:     if( db->mallocFailed ) goto whereBeginError;",
          "",
          "[Removed Lines]",
          "4879: #ifdef WHERETRACE_ENABLED",
          "4881:       WhereLoop *p;",
          "4882:       int i;",
          "4883:       static const char zLabel[] = \"0123456789abcdefghijklmnopqrstuvwyxz\"",
          "4884:                                              \"ABCDEFGHIJKLMNOPQRSTUVWYXZ\";",
          "4885:       for(p=pWInfo->pLoops, i=0; p; p=p->pNextLoop, i++){",
          "4886:         p->cId = zLabel[i%(sizeof(zLabel)-1)];",
          "4887:         sqlite3WhereLoopPrint(p, sWLB.pWC);",
          "4888:       }",
          "4889:     }",
          "4890: #endif",
          "",
          "[Added Lines]",
          "4907:     WHERETRACE_ALL_LOOPS(pWInfo, sWLB.pWC);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47d38e2444431b84f384917bad6c0495d041546b",
      "candidate_info": {
        "commit_hash": "47d38e2444431b84f384917bad6c0495d041546b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47d38e2444431b84f384917bad6c0495d041546b",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/busy2.test",
          "test/corruptL.test",
          "test/fkey5.test"
        ],
        "message": "Changes to busy2.test, corruptL.test and fkey5.test so that new test cases pass with all test permutations.\n\nFossilOrigin-Name: d62d1711e2b0f18bb4dfb8899299c8e5b4c8205989b719699da60bcfe1884cf3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/busy2.test||test/busy2.test",
          "test/corruptL.test||test/corruptL.test",
          "test/fkey5.test||test/fkey5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a85520e0074d574cb4ac5239bb225f8f0b0b3ea1d782cd1cbc79797b4c583fb0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/busy2.test||test/busy2.test": [
          "File: test/busy2.test -> test/busy2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   #",
          "62:   do_test 2.$tn.0 {",
          "63:     sql1 {",
          "64:       PRAGMA journal_mode = wal;",
          "65:       CREATE TABLE t1(a, b);",
          "66:       INSERT INTO t1 VALUES(1, 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:       PRAGMA auto_vacuum = off;",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1287:   ) WHERE type = 'index';",
          "1288: }",
          "1290: db close",
          "1291: sqlite3 db test.db",
          "1293: do_catchsql_test 16.1 {",
          "1294:   PRAGMA writable_schema = ON;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1290: extra_schema_checks 0",
          "1293: extra_schema_checks 1",
          "",
          "---------------"
        ],
        "test/fkey5.test||test/fkey5.test": [
          "File: test/fkey5.test -> test/fkey5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "453: # 2020-07-03: the pragma_foreign_key_check virtual table should",
          "454: # accept arguments for the table name and/or schema name.",
          "455: #",
          "488: finish_test",
          "",
          "[Removed Lines]",
          "456: do_execsql_test 13.0 {",
          "457:   SELECT *, 'x' FROM pragma_foreign_key_check('t1');",
          "458: } {t1 9 t2 0 x}",
          "459: do_catchsql_test 13.1 {",
          "460:   SELECT *, 'x' FROM pragma_foreign_key_check('t1','main');",
          "461: } {1 {no such table: main.t1}}",
          "462: do_execsql_test 13.2 {",
          "463:   SELECT *, 'x' FROM pragma_foreign_key_check('t1','aux');",
          "464: } {t1 9 t2 0 x}",
          "466: reset_db",
          "467: do_execsql_test 13.10 {",
          "468:   PRAGMA foreign_keys=OFF;",
          "469:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b TEXT REFERENCES t2);",
          "470:   CREATE TABLE t2(x TEXT PRIMARY KEY, y INT);",
          "471:   CREATE TABLE t3(w TEXT, z INT REFERENCES t1);",
          "472:   INSERT INTO t2 VALUES('abc',11),('def',22),('xyz',99);",
          "473:   INSERT INTO t1 VALUES(5,'abc'),(7,'xyz'),(9,'oops');",
          "474:   INSERT INTO t3 VALUES(11,7),(22,19);",
          "475: } {}",
          "476: do_execsql_test 13.11 {",
          "477:   SELECT x.*, '|'",
          "478:     FROM sqlite_schema, pragma_foreign_key_check(name) AS x",
          "479:    WHERE type='table'",
          "480:    ORDER BY x.\"table\";",
          "481: } {t1 9 t2 0 | t3 2 t1 0 |}",
          "482: do_execsql_test 13.12 {",
          "483:   SELECT *, '|'",
          "484:     FROM pragma_foreign_key_check AS x",
          "485:    ORDER BY x.\"table\";",
          "486: } {t1 9 t2 0 | t3 2 t1 0 |}",
          "",
          "[Added Lines]",
          "456: ifcapable vtab {",
          "457:   do_execsql_test 13.0 {",
          "458:     SELECT *, 'x' FROM pragma_foreign_key_check('t1');",
          "459:   } {t1 9 t2 0 x}",
          "460:   do_catchsql_test 13.1 {",
          "461:     SELECT *, 'x' FROM pragma_foreign_key_check('t1','main');",
          "462:   } {1 {no such table: main.t1}}",
          "463:   do_execsql_test 13.2 {",
          "464:     SELECT *, 'x' FROM pragma_foreign_key_check('t1','aux');",
          "465:   } {t1 9 t2 0 x}",
          "466: }",
          "468: ifcapable vtab {",
          "469:   reset_db",
          "470:     do_execsql_test 13.10 {",
          "471:       PRAGMA foreign_keys=OFF;",
          "472:       CREATE TABLE t1(a INTEGER PRIMARY KEY, b TEXT REFERENCES t2);",
          "473:       CREATE TABLE t2(x TEXT PRIMARY KEY, y INT);",
          "474:       CREATE TABLE t3(w TEXT, z INT REFERENCES t1);",
          "475:       INSERT INTO t2 VALUES('abc',11),('def',22),('xyz',99);",
          "476:       INSERT INTO t1 VALUES(5,'abc'),(7,'xyz'),(9,'oops');",
          "477:       INSERT INTO t3 VALUES(11,7),(22,19);",
          "478:     } {}",
          "479:   do_execsql_test 13.11 {",
          "480:     SELECT x.*, '|'",
          "481:       FROM sqlite_schema, pragma_foreign_key_check(name) AS x",
          "482:       WHERE type='table'",
          "483:       ORDER BY x.\"table\";",
          "484:   } {t1 9 t2 0 | t3 2 t1 0 |}",
          "485:   do_execsql_test 13.12 {",
          "486:     SELECT *, '|'",
          "487:       FROM pragma_foreign_key_check AS x",
          "488:       ORDER BY x.\"table\";",
          "489:   } {t1 9 t2 0 | t3 2 t1 0 |}",
          "490: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6c13b22b2d3b242ad6fdc702b0b2f182c9c9c4f",
      "candidate_info": {
        "commit_hash": "a6c13b22b2d3b242ad6fdc702b0b2f182c9c9c4f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a6c13b22b2d3b242ad6fdc702b0b2f182c9c9c4f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/global.c",
          "src/select.c",
          "src/shell.c.in",
          "src/sqliteInt.h",
          "src/test1.c"
        ],
        "message": "Change the name of sqlite3SelectTrace to sqlite3_unsupported_selecttrace.\n\nFossilOrigin-Name: 5ecd03a27b81637ec92af654451a8fff46f1768ddb7c7a443d2a4a933b4475c1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/global.c||src/global.c",
          "src/select.c||src/select.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bf875a1c7fcb2b41a4d3bd741bb358a635b869d0b6fc9d24385cd5779686d78c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "308: #include \"opcodes.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306: u32 sqlite3_unsupported_selecttrace = 0;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4186:   sqlite3SelectDelete(db, pSub1);",
          "4188: #if SELECTTRACE_ENABLED",
          "4190:     SELECTTRACE(0x100,pParse,p,(\"After flattening:\\n\"));",
          "4191:     sqlite3TreeViewSelect(0, p, 0);",
          "4192:   }",
          "",
          "[Removed Lines]",
          "4189:   if( sqlite3SelectTrace & 0x100 ){",
          "",
          "[Added Lines]",
          "4189:   if( sqlite3_unsupported_selecttrace & 0x100 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5624:   sWalker.u.pSelect = p;",
          "5625:   sqlite3WalkExpr(&sWalker, p->pHaving);",
          "5626: #if SELECTTRACE_ENABLED",
          "5628:     SELECTTRACE(0x100,pParse,p,(\"Move HAVING terms into WHERE:\\n\"));",
          "5629:     sqlite3TreeViewSelect(0, p, 0);",
          "5630:   }",
          "",
          "[Removed Lines]",
          "5627:   if( sWalker.eCode && (sqlite3SelectTrace & 0x100)!=0 ){",
          "",
          "[Added Lines]",
          "5627:   if( sWalker.eCode && (sqlite3_unsupported_selecttrace & 0x100)!=0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5746:   p->selFlags &= ~SF_Aggregate;",
          "5748: #if SELECTTRACE_ENABLED",
          "5750:     SELECTTRACE(0x400,pParse,p,(\"After count-of-view optimization:\\n\"));",
          "5751:     sqlite3TreeViewSelect(0, p, 0);",
          "5752:   }",
          "",
          "[Removed Lines]",
          "5749:   if( sqlite3SelectTrace & 0x400 ){",
          "",
          "[Added Lines]",
          "5749:   if( sqlite3_unsupported_selecttrace & 0x400 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5799:   if( sqlite3AuthCheck(pParse, SQLITE_SELECT, 0, 0, 0) ) return 1;",
          "5800: #if SELECTTRACE_ENABLED",
          "5801:   SELECTTRACE(1,pParse,p, (\"begin processing:\\n\", pParse->addrExplain));",
          "5803:     sqlite3TreeViewSelect(0, p, 0);",
          "5804:   }",
          "5805: #endif",
          "",
          "[Removed Lines]",
          "5802:   if( sqlite3SelectTrace & 0x100 ){",
          "",
          "[Added Lines]",
          "5802:   if( sqlite3_unsupported_selecttrace & 0x100 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5826:   }",
          "5827:   assert( p->pEList!=0 );",
          "5828: #if SELECTTRACE_ENABLED",
          "5830:     SELECTTRACE(0x104,pParse,p, (\"after name resolution:\\n\"));",
          "5831:     sqlite3TreeViewSelect(0, p, 0);",
          "5832:   }",
          "",
          "[Removed Lines]",
          "5829:   if( sqlite3SelectTrace & 0x104 ){",
          "",
          "[Added Lines]",
          "5829:   if( sqlite3_unsupported_selecttrace & 0x104 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5861:     goto select_end;",
          "5862:   }",
          "5863: #if SELECTTRACE_ENABLED",
          "5865:     SELECTTRACE(0x104,pParse,p, (\"after window rewrite:\\n\"));",
          "5866:     sqlite3TreeViewSelect(0, p, 0);",
          "5867:   }",
          "",
          "[Removed Lines]",
          "5864:   if( p->pWin && (sqlite3SelectTrace & 0x108)!=0 ){",
          "",
          "[Added Lines]",
          "5864:   if( p->pWin && (sqlite3_unsupported_selecttrace & 0x108)!=0 ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5968:     rc = multiSelect(pParse, p, pDest);",
          "5969: #if SELECTTRACE_ENABLED",
          "5970:     SELECTTRACE(0x1,pParse,p,(\"end compound-select processing\\n\"));",
          "5972:       sqlite3TreeViewSelect(0, p, 0);",
          "5973:     }",
          "5974: #endif",
          "",
          "[Removed Lines]",
          "5971:     if( (sqlite3SelectTrace & 0x2000)!=0 && ExplainQueryPlanParent(pParse)==0 ){",
          "",
          "[Added Lines]",
          "5971:     if( (sqlite3_unsupported_selecttrace & 0x2000)!=0 && ExplainQueryPlanParent(pParse)==0 ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5987:    && propagateConstants(pParse, p)",
          "5988:   ){",
          "5989: #if SELECTTRACE_ENABLED",
          "5991:       SELECTTRACE(0x100,pParse,p,(\"After constant propagation:\\n\"));",
          "5992:       sqlite3TreeViewSelect(0, p, 0);",
          "5993:     }",
          "",
          "[Removed Lines]",
          "5990:     if( sqlite3SelectTrace & 0x100 ){",
          "",
          "[Added Lines]",
          "5990:     if( sqlite3_unsupported_selecttrace & 0x100 ){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6075:                            (pItem->fg.jointype & JT_OUTER)!=0)",
          "6076:     ){",
          "6077: #if SELECTTRACE_ENABLED",
          "6079:         SELECTTRACE(0x100,pParse,p,",
          "6080:             (\"After WHERE-clause push-down into subquery %d:\\n\", pSub->selId));",
          "6081:         sqlite3TreeViewSelect(0, p, 0);",
          "",
          "[Removed Lines]",
          "6078:       if( sqlite3SelectTrace & 0x100 ){",
          "",
          "[Added Lines]",
          "6078:       if( sqlite3_unsupported_selecttrace & 0x100 ){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6175:   sDistinct.isTnct = (p->selFlags & SF_Distinct)!=0;",
          "6177: #if SELECTTRACE_ENABLED",
          "6179:     SELECTTRACE(0x400,pParse,p,(\"After all FROM-clause analysis:\\n\"));",
          "6180:     sqlite3TreeViewSelect(0, p, 0);",
          "6181:   }",
          "",
          "[Removed Lines]",
          "6178:   if( sqlite3SelectTrace & 0x400 ){",
          "",
          "[Added Lines]",
          "6178:   if( sqlite3_unsupported_selecttrace & 0x400 ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6211:     assert( sDistinct.isTnct );",
          "6213: #if SELECTTRACE_ENABLED",
          "6215:       SELECTTRACE(0x400,pParse,p,(\"Transform DISTINCT into GROUP BY:\\n\"));",
          "6216:       sqlite3TreeViewSelect(0, p, 0);",
          "6217:     }",
          "",
          "[Removed Lines]",
          "6214:     if( sqlite3SelectTrace & 0x400 ){",
          "",
          "[Added Lines]",
          "6214:     if( sqlite3_unsupported_selecttrace & 0x400 ){",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6459:     pAggInfo->mxReg = pParse->nMem;",
          "6460:     if( db->mallocFailed ) goto select_end;",
          "6461: #if SELECTTRACE_ENABLED",
          "6463:       int ii;",
          "6464:       SELECTTRACE(0x400,pParse,p,(\"After aggregate analysis %p:\\n\", pAggInfo));",
          "6465:       sqlite3TreeViewSelect(0, p, 0);",
          "",
          "[Removed Lines]",
          "6462:     if( sqlite3SelectTrace & 0x400 ){",
          "",
          "[Added Lines]",
          "6462:     if( sqlite3_unsupported_selecttrace & 0x400 ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6879: #if SELECTTRACE_ENABLED",
          "6880:   SELECTTRACE(0x1,pParse,p,(\"end processing\\n\"));",
          "6882:     sqlite3TreeViewSelect(0, p, 0);",
          "6883:   }",
          "6884: #endif",
          "",
          "[Removed Lines]",
          "6881:   if( (sqlite3SelectTrace & 0x2000)!=0 && ExplainQueryPlanParent(pParse)==0 ){",
          "",
          "[Added Lines]",
          "6881:   if( (sqlite3_unsupported_selecttrace & 0x2000)!=0 && ExplainQueryPlanParent(pParse)==0 ){",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2883: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)",
          "2885: static int savedSelectTrace;",
          "2886: #endif",
          "2887: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)",
          "",
          "[Removed Lines]",
          "2884: extern int sqlite3SelectTrace;",
          "",
          "[Added Lines]",
          "2884: extern u32 sqlite3_unsupported_selecttrace;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2890: #endif",
          "2891: static void disable_debug_trace_modes(void){",
          "2892: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)",
          "2895: #endif",
          "2896: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)",
          "2897:   savedWhereTrace = sqlite3WhereTrace;",
          "",
          "[Removed Lines]",
          "2893:   savedSelectTrace = sqlite3SelectTrace;",
          "2894:   sqlite3SelectTrace = 0;",
          "",
          "[Added Lines]",
          "2893:   savedSelectTrace = sqlite3_unsupported_selecttrace;",
          "2894:   sqlite3_unsupported_selecttrace = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2900: }",
          "2901: static void restore_debug_trace_modes(void){",
          "2902: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)",
          "2904: #endif",
          "2905: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)",
          "2906:   sqlite3WhereTrace = savedWhereTrace;",
          "",
          "[Removed Lines]",
          "2903:   sqlite3SelectTrace = savedSelectTrace;",
          "",
          "[Added Lines]",
          "2903:   sqlite3_unsupported_selecttrace = savedSelectTrace;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9171: #if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)",
          "9172:   if( c=='s' && n==11 && strncmp(azArg[0], \"selecttrace\", n)==0 ){",
          "9174:   }else",
          "9175: #endif",
          "",
          "[Removed Lines]",
          "9173:     sqlite3SelectTrace = nArg>=2 ? (int)integerValue(azArg[1]) : 0xffff;",
          "",
          "[Added Lines]",
          "9173:     sqlite3_unsupported_selecttrace = nArg>=2 ? (int)integerValue(azArg[1]) : 0xffff;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "983: #if defined(SQLITE_ENABLE_SELECTTRACE)",
          "984: # define SELECTTRACE_ENABLED 1",
          "985: # define SELECTTRACE(K,P,S,X)  \\",
          "987:     sqlite3DebugPrintf(\"%u/%d/%p: \",(S)->selId,(P)->addrExplain,(S)),\\",
          "988:     sqlite3DebugPrintf X",
          "989: #else",
          "",
          "[Removed Lines]",
          "986:   if(sqlite3SelectTrace&(K))   \\",
          "",
          "[Added Lines]",
          "986:   if(sqlite3_unsupported_selecttrace&(K))   \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4586: extern const unsigned char sqlite3CtypeMap[];",
          "4587: extern SQLITE_WSD struct Sqlite3Config sqlite3Config;",
          "4588: extern FuncDefHash sqlite3BuiltinFunctions;",
          "4590: #ifndef SQLITE_OMIT_WSD",
          "4591: extern int sqlite3PendingByte;",
          "4592: #endif",
          "",
          "[Removed Lines]",
          "4589: extern u32 sqlite3SelectTrace;",
          "",
          "[Added Lines]",
          "4589: extern u32 sqlite3_unsupported_selecttrace;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8191: #endif",
          "8192: #endif",
          "8193: #if defined(SQLITE_ENABLE_SELECTTRACE)",
          "8195: #endif",
          "8197:   for(i=0; i<sizeof(aCmd)/sizeof(aCmd[0]); i++){",
          "",
          "[Removed Lines]",
          "8194:   extern u32 sqlite3SelectTrace;",
          "",
          "[Added Lines]",
          "8194:   extern u32 sqlite3_unsupported_selecttrace;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8279:   Tcl_LinkVar(interp, \"sqlite_fullsync_count\",",
          "8280:       (char*)&sqlite3_fullsync_count, TCL_LINK_INT);",
          "8281: #if defined(SQLITE_ENABLE_SELECTTRACE)",
          "8284: #endif",
          "8285: #if defined(SQLITE_ENABLE_FTS3) && defined(SQLITE_TEST)",
          "8286:   Tcl_LinkVar(interp, \"sqlite_fts3_enable_parentheses\",",
          "",
          "[Removed Lines]",
          "8282:   Tcl_LinkVar(interp, \"sqlite3SelectTrace\",",
          "8283:       (char*)&sqlite3SelectTrace, TCL_LINK_INT);",
          "",
          "[Added Lines]",
          "8282:   Tcl_LinkVar(interp, \"sqlite3_unsupported_selecttrace\",",
          "8283:       (char*)&sqlite3_unsupported_selecttrace, TCL_LINK_INT);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17aceebab75c0057cbf224d43316e5fa6cf040f7",
      "candidate_info": {
        "commit_hash": "17aceebab75c0057cbf224d43316e5fa6cf040f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/17aceebab75c0057cbf224d43316e5fa6cf040f7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/whereInt.h"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 8452fe03430d34abecab618d6136b863630f91d68d69ebbc115f808bc81c3817",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/whereInt.h||src/whereInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cfff5cb2279088aa66f435bd0d627b2c74c9a99ad9addfd44a4df8ba770b795a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7928:       if( opProperty & OPFLG_OUT3 ){",
          "7929:         registerTrace(pOrigOp->p3, &aMem[pOrigOp->p3]);",
          "7930:       }",
          "7931:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7931:       if( opProperty==0xff ){",
          "7935:         sqlite3VdbeRegisterDump(p);",
          "7936:       }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ]
      }
    }
  ]
}