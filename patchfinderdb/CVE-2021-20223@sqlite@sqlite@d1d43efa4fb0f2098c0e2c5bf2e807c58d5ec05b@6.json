{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec8e689a205c429511b58be15161bf6b250bfa55",
      "candidate_info": {
        "commit_hash": "ec8e689a205c429511b58be15161bf6b250bfa55",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec8e689a205c429511b58be15161bf6b250bfa55",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3misc.test"
        ],
        "message": "Avoid an undefined integer overflow in fts3 by detecting data structure corruption earlier.\n\nFossilOrigin-Name: 86e98ddc19470410ccc6d2cf4ad56ef0bc5a23b7fbe6331b8cae374689f54529",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4954:     if( nSeg<=0 ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4956:     assert( nMod<=0x7FFFFFFF );",
          "4957:     if( iAbsLevel<0 || iAbsLevel>(nMod<<32) ){",
          "4958:       rc = FTS_CORRUPT_VTAB;",
          "4959:       break;",
          "4960:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 11e0844f71e8f2d27ce9363fb505e02fd7795c61dae0b3886cf0d8df4484dd97",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:   -4764623217061966105 8324454597464624651",
          "304: }",
          "306: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306: #-------------------------------------------------------------------------",
          "307: reset_db",
          "308: do_execsql_test 10.0 {",
          "309:   CREATE VIRTUAL TABLE f USING fts3(a,b);",
          "310:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "311:   INSERT INTO f_stat VALUES (1,x'3b3b3b3b3b3b3b28ffffffffffffffffff1807f9073481f1d43bc93b3b3b3b3b3b3b3b3b3b18073b3b3b3b3b3b3b9b003b');",
          "312: } {}",
          "314: do_catchsql_test 10.1 {",
          "315:   INSERT INTO f(f) VALUES ('merge=69,59');",
          "316: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69c093da9830731a8399e7c0b6f2f870a0524136",
      "candidate_info": {
        "commit_hash": "69c093da9830731a8399e7c0b6f2f870a0524136",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69c093da9830731a8399e7c0b6f2f870a0524136",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "In the json output mode of the CLI, do correct quoting of escape characters. Also, show BLOBs as JSON strings, possibly with embedded \\u0000 bytes.\n\nFossilOrigin-Name: 0278147a7d2b50bed9f59ed3d3a04ecc6d46f072eb510e463f6707df1d829020",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14f55fafec11491e87e6526c72cf85c689d74ba18418a1ae9646586ec206767a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1578:   fputc('\"', out);",
          "1579: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1584: static void output_json_string(FILE *out, const char *z, int n){",
          "1585:   unsigned int c;",
          "1586:   if( n<0 ) n = (int)strlen(z);",
          "1587:   fputc('\"', out);",
          "1588:   while( n-- ){",
          "1589:     c = *(z++);",
          "1590:     if( c=='\\\\' || c=='\"' ){",
          "1591:       fputc('\\\\', out);",
          "1592:       fputc(c, out);",
          "1593:     }else if( c<=0x1f ){",
          "1594:       fputc('\\\\', out);",
          "1595:       if( c=='\\b' ){",
          "1596:         fputc('b', out);",
          "1597:       }else if( c=='\\f' ){",
          "1598:         fputc('f', out);",
          "1599:       }else if( c=='\\n' ){",
          "1600:         fputc('n', out);",
          "1601:       }else if( c=='\\r' ){",
          "1602:         fputc('r', out);",
          "1603:       }else if( c=='\\t' ){",
          "1604:         fputc('t', out);",
          "1605:       }else{",
          "1606:          raw_printf(out, \"u%04x\",c);",
          "1607:       }",
          "1608:     }else{",
          "1609:       fputc(c, out);",
          "1610:     }",
          "1611:   }",
          "1612:   fputc('\"', out);",
          "1613: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2276:       }",
          "2277:       p->cnt++;",
          "2278:       for(i=0; i<nArg; i++){",
          "2280:         putc(':', p->out);",
          "2281:         if( (azArg[i]==0) || (aiType && aiType[i]==SQLITE_NULL) ){",
          "2282:           fputs(\"null\",p->out);",
          "",
          "[Removed Lines]",
          "2279:         output_c_string(p->out, azCol[i]);",
          "",
          "[Added Lines]",
          "2313:         output_json_string(p->out, azCol[i], -1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2296:         }else if( aiType && aiType[i]==SQLITE_BLOB && p->pStmt ){",
          "2297:           const void *pBlob = sqlite3_column_blob(p->pStmt, i);",
          "2298:           int nBlob = sqlite3_column_bytes(p->pStmt, i);",
          "2302:         }else if( aiType && aiType[i]==SQLITE_TEXT ){",
          "2304:         }else{",
          "2305:           utf8_printf(p->out,\"%s\", azArg[i]);",
          "2306:         }",
          "",
          "[Removed Lines]",
          "2299:           putc('\"', p->out);",
          "2300:           output_hex_blob(p->out, pBlob, nBlob);",
          "2301:           putc('\"', p->out);",
          "2303:           output_c_string(p->out, azArg[i]);",
          "",
          "[Added Lines]",
          "2333:           output_json_string(p->out, pBlob, nBlob);",
          "2335:           output_json_string(p->out, azArg[i], -1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dfdb86c8d85b008dd74d9184e81bf3d206e9758",
      "candidate_info": {
        "commit_hash": "4dfdb86c8d85b008dd74d9184e81bf3d206e9758",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4dfdb86c8d85b008dd74d9184e81bf3d206e9758",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/shell1.test"
        ],
        "message": "New test cases for the use of the ieee754 and decimal extensions in the CLI.\n\nFossilOrigin-Name: bc1590f32fc4e2696b4126bd0302cb6405031dd4f55b86f3f1611f7f39299f85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7dfb74c37e678dde347d9d85846672f82ad282e300e32676330b764be2e4d580",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1167: }",
          "1169: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1169: # Test case for the ieee754 and decimal extensions in the shell.",
          "1170: # See the \"floatingpoint.html\" file in the documentation for more",
          "1171: # information.",
          "1172: #",
          "1173: do_test shell1-8.1 {",
          "1174:   catchcmd \":memory:\" {",
          "1175:     -- The pow2 table will hold all the necessary powers of two.",
          "1176:     CREATE TABLE pow2(x INTEGER PRIMARY KEY, v TEXT);",
          "1177:     WITH RECURSIVE c(x,v) AS (",
          "1178:       VALUES(0,'1')",
          "1179:       UNION ALL",
          "1180:       SELECT x+1, decimal_mul(v,'2') FROM c WHERE x+1<=971",
          "1181:     ) INSERT INTO pow2(x,v) SELECT x, v FROM c;",
          "1182:     WITH RECURSIVE c(x,v) AS (",
          "1183:       VALUES(-1,'0.5')",
          "1184:       UNION ALL",
          "1185:       SELECT x-1, decimal_mul(v,'0.5') FROM c WHERE x-1>=-1075",
          "1186:     ) INSERT INTO pow2(x,v) SELECT x, v FROM c;",
          "1188:     -- This query finds the decimal representation of each value in the \"c\" table.",
          "1189:     WITH c(n) AS (VALUES(47.49))",
          "1190:                      ----XXXXX----------- Replace with whatever you want",
          "1191:     SELECT decimal_mul(ieee754_mantissa(c.n),pow2.v)",
          "1192:       FROM pow2, c WHERE pow2.x=ieee754_exponent(c.n);",
          "1193:   }",
          "1194: } {0 47.49000000000000198951966012828052043914794921875}",
          "1195: do_test shell1-8.2 {",
          "1196:   catchcmd :memory: {",
          "1197: .mode box",
          "1198: SELECT ieee754(47.49) AS x;",
          "1199:   }",
          "1200: } {0 {\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510",
          "1201: \u2502               x               \u2502",
          "1202: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524",
          "1203: \u2502 ieee754(6683623321994527,-47) \u2502",
          "1204: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518}}",
          "1205: do_test shell1-8.3 {",
          "1206:   catchcmd \":memory: --box\" {",
          "1207:     select ieee754(6683623321994527,-47) as x;",
          "1208:   }",
          "1209: } {0 {\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510",
          "1210: \u2502   x   \u2502",
          "1211: \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524",
          "1212: \u2502 47.49 \u2502",
          "1213: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518}}",
          "1214: do_test shell1-8.4 {",
          "1215:   catchcmd \":memory: --table\" {SELECT ieee754_mantissa(47.49) AS M, ieee754_exponent(47.49) AS E;}",
          "1216: } {0 {+------------------+-----+",
          "1217: |        M         |  E  |",
          "1218: +------------------+-----+",
          "1219: | 6683623321994527 | -47 |",
          "1220: +------------------+-----+}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fce8165ec6e6e8faea57e0130cc84ecf104fb471",
      "candidate_info": {
        "commit_hash": "fce8165ec6e6e8faea57e0130cc84ecf104fb471",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fce8165ec6e6e8faea57e0130cc84ecf104fb471",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "test/exclusive.test"
        ],
        "message": "Ensure that the Pager.changeCountDone flag is cleared whenever dropping the write lock, even when transitioning from EXCLUSIVE locking mode into NORMAL locking mode while in WAL mode.  Ticket [fb3b3024ea238d5c].\n\nFossilOrigin-Name: 846b1de6e5a9e418f225273dc033234c64c116fcd89c8261522b4902c248451f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "test/exclusive.test||test/exclusive.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 465a15c5c2077011befa854a77f9d295bb751ef20b7d2937ac0ba47cc84587c9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1895:     assert( pPager->errCode || pPager->eState!=PAGER_ERROR );",
          "1897:     pPager->eState = PAGER_OPEN;",
          "1898:   }",
          "",
          "[Removed Lines]",
          "1896:     pPager->changeCountDone = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2157:    && (!pagerUseWal(pPager) || sqlite3WalExclusiveMode(pPager->pWal, 0))",
          "2158:   ){",
          "2159:     rc2 = pagerUnlockDb(pPager, SHARED_LOCK);",
          "2161:   }",
          "2162:   pPager->eState = PAGER_READER;",
          "2163:   pPager->setMaster = 0;",
          "",
          "[Removed Lines]",
          "2160:     pPager->changeCountDone = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/exclusive.test||test/exclusive.test": [
          "File: test/exclusive.test -> test/exclusive.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:   SELECT * FROM sqlite_master;",
          "512: } {exclusive}",
          "514: } ;# atomic_batch_write==0",
          "516: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514: # 2019-12-26 ticket fb3b3024ea238d5c",
          "515: do_test exclusive-7.1 {",
          "516:   db close",
          "517:   forcedelete test.db test.db-journal test.db-wal",
          "518:   sqlite3 db test.db",
          "519:   # The following sequence of pragmas would trigger an assert()",
          "520:   # associated with Pager.changeCountDone inside of assert_pager_state(),",
          "521:   # prior to the fix.",
          "522:   db eval {",
          "523:     PRAGMA locking_mode = EXCLUSIVE;",
          "524:     PRAGMA journal_mode = WAL;",
          "525:     PRAGMA locking_mode = NORMAL;",
          "526:     PRAGMA user_version;",
          "527:     PRAGMA journal_mode = DELETE;",
          "528:   }",
          "529: } {exclusive wal normal 0 delete}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4dae75f79580285a4c122a71404e68bab1ac895",
      "candidate_info": {
        "commit_hash": "d4dae75f79580285a4c122a71404e68bab1ac895",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4dae75f79580285a4c122a71404e68bab1ac895",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Strengthen check-in [83da4d4104ee1870] by ignoring *all* WHERE-clause constraints for a virtual table that is the right table of a LEFT JOIN, as such constraints are never useful. This fixes an issue discovered by Manuel Rigger.\n\nFossilOrigin-Name: 840de36df1aaeb4bad9a7c18e97cc560ba3b8c629c4520a05bc456d67b3347b9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fa29a5f2a89b6a1ee067f9cb86de1b66455126349efe3502599fc7ad224170c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "979:     testcase( pTerm->eOperator & WO_ALL );",
          "980:     if( (pTerm->eOperator & ~(WO_EQUIV))==0 ) continue;",
          "981:     if( pTerm->wtFlags & TERM_VNULL ) continue;",
          "982:     if( (pSrc->fg.jointype & JT_LEFT)!=0",
          "983:      && !ExprHasProperty(pTerm->pExpr, EP_FromJoin)",
          "985:     ){",
          "994:       continue;",
          "995:     }",
          "996:     assert( pTerm->u.leftColumn>=(-1) );",
          "",
          "[Removed Lines]",
          "984:      && (pTerm->eOperator & (WO_IS|WO_ISNULL))",
          "992:       testcase( pTerm->eOperator & WO_ISNULL );",
          "993:       testcase( pTerm->eOperator & WO_IS );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}