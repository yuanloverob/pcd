{
  "cve_id": "CVE-2022-29582",
  "cve_desc": "In the Linux kernel before 5.17.3, fs/io_uring.c has a use-after-free due to a race condition in io_uring timeouts. This can be triggered by a local user who has no access to any user namespace; however, the race condition perhaps can only be exploited infrequently.",
  "repo": "torvalds/linux",
  "patch_hash": "e677edbcabee849bfdd43f1602bccbecf736a646",
  "patch_info": {
    "commit_hash": "e677edbcabee849bfdd43f1602bccbecf736a646",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/e677edbcabee849bfdd43f1602bccbecf736a646",
    "files": [
      "fs/io_uring.c"
    ],
    "message": "io_uring: fix race between timeout flush and removal\n\nio_flush_timeouts() assumes the timeout isn't in progress of triggering\nor being removed/canceled, so it unconditionally removes it from the\ntimeout list and attempts to cancel it.\n\nLeave it on the list and let the normal timeout cancelation take care\nof it.\n\nCc: stable@vger.kernel.org # 5.5+\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
    "before_after_code_files": [
      "fs/io_uring.c||fs/io_uring.c"
    ]
  },
  "patch_diff": {
    "fs/io_uring.c||fs/io_uring.c": [
      "File: fs/io_uring.c -> fs/io_uring.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1736:  __must_hold(&ctx->completion_lock)",
      "1737: {",
      "1738:  u32 seq = ctx->cached_cq_tail - atomic_read(&ctx->cq_timeouts);",
      "1740:  spin_lock_irq(&ctx->timeout_lock);",
      "1742:   u32 events_needed, events_got;",
      "1746:   if (io_is_timeout_noseq(req))",
      "1747:    break;",
      "",
      "[Removed Lines]",
      "1741:  while (!list_empty(&ctx->timeout_list)) {",
      "1743:   struct io_kiocb *req = list_first_entry(&ctx->timeout_list,",
      "1744:       struct io_kiocb, timeout.list);",
      "",
      "[Added Lines]",
      "1739:  struct io_kiocb *req, *tmp;",
      "1742:  list_for_each_entry_safe(req, tmp, &ctx->timeout_list, timeout.list) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1758:   if (events_got < events_needed)",
      "1759:    break;",
      "1762:   io_kill_timeout(req, 0);",
      "1763:  }",
      "1764:  ctx->cq_last_tm_flush = seq;",
      "",
      "[Removed Lines]",
      "1761:   list_del_init(&req->timeout.list);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "6628:  if (data->ts.tv_sec < 0 || data->ts.tv_nsec < 0)",
      "6629:   return -EINVAL;",
      "6631:  data->mode = io_translate_timeout_mode(flags);",
      "6632:  hrtimer_init(&data->timer, io_timeout_get_clock(data), data->mode);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6629:  INIT_LIST_HEAD(&req->timeout.list);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f18ee4cf0a277a0e3d043755046d5817d4ddd618",
      "candidate_info": {
        "commit_hash": "f18ee4cf0a277a0e3d043755046d5817d4ddd618",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f18ee4cf0a277a0e3d043755046d5817d4ddd618",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: optimise completion timeout flushing\n\nio_commit_cqring() might be very hot and we definitely don't want to\ntouch ->timeout_list there, because 1) it's shared with the submission\nside so might lead to cache bouncing and 2) may need to load an extra\ncache line, especially for IRQ completions.\n\nWe're interested in it at the completion side only when there are\noffset-mode timeouts, which are not so popular. Replace\nlist_empty(->timeout_list) hot path check with a new one-way flag, which\nis set when we prepare the first offset-mode timeout.\n\nnote: the flag sits in the same line as briefly used after ->rings\n\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nLink: https://lore.kernel.org/r/e4892ec68b71a69f92ffbea4a1499be3ec0d463b.1623709150.git.asml.silence@gmail.com\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:   unsigned int  drain_next: 1;",
          "352:   unsigned int  eventfd_async: 1;",
          "353:   unsigned int  restricted: 1;",
          "354:  } ____cacheline_aligned_in_smp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:   unsigned int  off_timeout_used: 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1318: {",
          "1319:  u32 seq;",
          "1322:   return;",
          "1324:  seq = ctx->cached_cq_tail - atomic_read(&ctx->cq_timeouts);",
          "1327:   u32 events_needed, events_got;",
          "1328:   struct io_kiocb *req = list_first_entry(&ctx->timeout_list,",
          "1329:       struct io_kiocb, timeout.list);",
          "",
          "[Removed Lines]",
          "1321:  if (list_empty(&ctx->timeout_list))",
          "1326:  do {",
          "",
          "[Added Lines]",
          "1322:  if (likely(!ctx->off_timeout_used))",
          "1327:  while (!list_empty(&ctx->timeout_list)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1346:   list_del_init(&req->timeout.list);",
          "1347:   io_kill_timeout(req, 0);",
          "1350:  ctx->cq_last_tm_flush = seq;",
          "1351: }",
          "",
          "[Removed Lines]",
          "1348:  } while (!list_empty(&ctx->timeout_list));",
          "",
          "[Added Lines]",
          "1349:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5651:   return -EINVAL;",
          "5653:  req->timeout.off = off;",
          "5655:  if (!req->async_data && io_alloc_async_data(req))",
          "5656:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5654:  if (unlikely(off && !req->ctx->off_timeout_used))",
          "5655:   req->ctx->off_timeout_used = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89850fce16a1a75caacca77cfa0c829aeea4f886",
      "candidate_info": {
        "commit_hash": "89850fce16a1a75caacca77cfa0c829aeea4f886",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/89850fce16a1a75caacca77cfa0c829aeea4f886",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: run timeouts from task_work\n\nThis is in preparation to making the completion lock work outside of\nhard/soft IRQ context.\n\nAdd a timeout_lock to handle the ordering of timeout completions or\ncancelations with the timeouts actually triggering.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:  struct {",
          "410:   spinlock_t  completion_lock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:   spinlock_t  timeout_lock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1188:  mutex_init(&ctx->uring_lock);",
          "1189:  init_waitqueue_head(&ctx->cq_wait);",
          "1190:  spin_lock_init(&ctx->completion_lock);",
          "1191:  INIT_LIST_HEAD(&ctx->iopoll_list);",
          "1192:  INIT_LIST_HEAD(&ctx->defer_list);",
          "1193:  INIT_LIST_HEAD(&ctx->timeout_list);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1193:  spin_lock_init(&ctx->timeout_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1329: static void io_kill_timeout(struct io_kiocb *req, int status)",
          "1330:  __must_hold(&req->ctx->completion_lock)",
          "1331: {",
          "1332:  struct io_timeout_data *io = req->async_data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1334:  __must_hold(&req->ctx->timeout_lock)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1355: }",
          "1357: static void io_flush_timeouts(struct io_ring_ctx *ctx)",
          "1358: {",
          "1359:  u32 seq = ctx->cached_cq_tail - atomic_read(&ctx->cq_timeouts);",
          "1361:  while (!list_empty(&ctx->timeout_list)) {",
          "1362:   u32 events_needed, events_got;",
          "1363:   struct io_kiocb *req = list_first_entry(&ctx->timeout_list,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1362:  __must_hold(&ctx->completion_lock)",
          "1365:  unsigned long flags;",
          "1367:  spin_lock_irqsave(&ctx->timeout_lock, flags);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1382:   io_kill_timeout(req, 0);",
          "1383:  }",
          "1384:  ctx->cq_last_tm_flush = seq;",
          "1385: }",
          "1387: static void __io_commit_cqring_flush(struct io_ring_ctx *ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1392:  spin_unlock_irqrestore(&ctx->timeout_lock, flags);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5455:  return 0;",
          "5456: }",
          "5458: static enum hrtimer_restart io_timeout_fn(struct hrtimer *timer)",
          "5459: {",
          "5460:  struct io_timeout_data *data = container_of(timer,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5466: static void io_req_task_timeout(struct io_kiocb *req)",
          "5467: {",
          "5468:  struct io_ring_ctx *ctx = req->ctx;",
          "5470:  spin_lock_irq(&ctx->completion_lock);",
          "5471:  io_cqring_fill_event(ctx, req->user_data, -ETIME, 0);",
          "5472:  io_commit_cqring(ctx);",
          "5473:  spin_unlock_irq(&ctx->completion_lock);",
          "5475:  io_cqring_ev_posted(ctx);",
          "5476:  req_set_fail(req);",
          "5477:  io_put_req(req);",
          "5478: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5463:  struct io_ring_ctx *ctx = req->ctx;",
          "5464:  unsigned long flags;",
          "5467:  list_del_init(&req->timeout.list);",
          "5468:  atomic_set(&req->ctx->cq_timeouts,",
          "5469:   atomic_read(&req->ctx->cq_timeouts) + 1);",
          "5478:  return HRTIMER_NORESTART;",
          "5479: }",
          "5481: static struct io_kiocb *io_timeout_extract(struct io_ring_ctx *ctx,",
          "5482:         __u64 user_data)",
          "5484: {",
          "5485:  struct io_timeout_data *io;",
          "5486:  struct io_kiocb *req;",
          "",
          "[Removed Lines]",
          "5466:  spin_lock_irqsave(&ctx->completion_lock, flags);",
          "5471:  io_cqring_fill_event(ctx, req->user_data, -ETIME, 0);",
          "5472:  io_commit_cqring(ctx);",
          "5473:  spin_unlock_irqrestore(&ctx->completion_lock, flags);",
          "5475:  io_cqring_ev_posted(ctx);",
          "5476:  req_set_fail(req);",
          "5477:  io_put_req(req);",
          "5483:  __must_hold(&ctx->completion_lock)",
          "",
          "[Added Lines]",
          "5488:  spin_lock_irqsave(&ctx->timeout_lock, flags);",
          "5492:  spin_unlock_irqrestore(&ctx->timeout_lock, flags);",
          "5494:  req->io_task_work.func = io_req_task_timeout;",
          "5495:  io_req_task_work_add(req);",
          "5501:  __must_hold(&ctx->timeout_lock)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5502: }",
          "5504: static int io_timeout_cancel(struct io_ring_ctx *ctx, __u64 user_data)",
          "5506: {",
          "5507:  struct io_kiocb *req = io_timeout_extract(ctx, user_data);",
          "",
          "[Removed Lines]",
          "5505:  __must_hold(&ctx->completion_lock)",
          "",
          "[Added Lines]",
          "5523:  __must_hold(&ctx->timeout_lock)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5518: static int io_timeout_update(struct io_ring_ctx *ctx, __u64 user_data,",
          "5519:         struct timespec64 *ts, enum hrtimer_mode mode)",
          "5521: {",
          "5522:  struct io_kiocb *req = io_timeout_extract(ctx, user_data);",
          "5523:  struct io_timeout_data *data;",
          "",
          "[Removed Lines]",
          "5520:  __must_hold(&ctx->completion_lock)",
          "",
          "[Added Lines]",
          "5538:  __must_hold(&ctx->timeout_lock)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5576:  struct io_ring_ctx *ctx = req->ctx;",
          "5577:  int ret;",
          "5580:  if (!(req->timeout_rem.flags & IORING_TIMEOUT_UPDATE))",
          "5581:   ret = io_timeout_cancel(ctx, tr->addr);",
          "5582:  else",
          "5583:   ret = io_timeout_update(ctx, tr->addr, &tr->ts,",
          "5584:      io_translate_timeout_mode(tr->flags));",
          "5586:  io_cqring_fill_event(ctx, req->user_data, ret, 0);",
          "5587:  io_commit_cqring(ctx);",
          "5588:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Removed Lines]",
          "5579:  spin_lock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5597:  spin_lock_irq(&ctx->timeout_lock);",
          "5603:  spin_unlock_irq(&ctx->timeout_lock);",
          "5605:  spin_lock_irq(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5637:  struct list_head *entry;",
          "5638:  u32 tail, off = req->timeout.off;",
          "",
          "[Removed Lines]",
          "5640:  spin_lock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5660:  spin_lock_irq(&ctx->timeout_lock);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5676:  list_add(&req->timeout.list, entry);",
          "5677:  data->timer.function = io_timeout_fn;",
          "5678:  hrtimer_start(&data->timer, timespec64_to_ktime(data->ts), data->mode);",
          "5680:  return 0;",
          "5681: }",
          "",
          "[Removed Lines]",
          "5679:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5699:  spin_unlock_irq(&ctx->timeout_lock);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5730:  spin_lock_irqsave(&ctx->completion_lock, flags);",
          "5731:  if (ret != -ENOENT)",
          "5732:   goto done;",
          "5733:  ret = io_timeout_cancel(ctx, sqe_addr);",
          "5734:  if (ret != -ENOENT)",
          "5735:   goto done;",
          "5736:  ret = io_poll_cancel(ctx, sqe_addr, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5753:  spin_lock(&ctx->timeout_lock);",
          "5755:  spin_unlock(&ctx->timeout_lock);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5772:  spin_lock_irq(&ctx->completion_lock);",
          "5773:  if (ret != -ENOENT)",
          "5774:   goto done;",
          "5775:  ret = io_timeout_cancel(ctx, sqe_addr);",
          "5776:  if (ret != -ENOENT)",
          "5777:   goto done;",
          "5778:  ret = io_poll_cancel(ctx, sqe_addr, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5797:  spin_lock(&ctx->timeout_lock);",
          "5799:  spin_unlock(&ctx->timeout_lock);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8801:  int canceled = 0;",
          "8803:  spin_lock_irq(&ctx->completion_lock);",
          "8804:  list_for_each_entry_safe(req, tmp, &ctx->timeout_list, timeout.list) {",
          "8805:   if (io_match_task(req, tsk, cancel_all)) {",
          "8806:    io_kill_timeout(req, -ECANCELED);",
          "8807:    canceled++;",
          "8808:   }",
          "8809:  }",
          "8810:  if (canceled != 0)",
          "8811:   io_commit_cqring(ctx);",
          "8812:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8828:  spin_lock(&ctx->timeout_lock);",
          "8835:  spin_unlock(&ctx->timeout_lock);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79ebeaee8a21a00417d89f1a02019f79840d9bad",
      "candidate_info": {
        "commit_hash": "79ebeaee8a21a00417d89f1a02019f79840d9bad",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/79ebeaee8a21a00417d89f1a02019f79840d9bad",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: remove IRQ aspect of io_ring_ctx completion lock\n\nWe have no hard/soft IRQ users of this lock left, remove any IRQ\ndisabling/saving and restoring when grabbing this lock.\n\nThis is straight forward with no users entering with IRQs disabled\nanymore, the only thing to look out for is the waitqueue poll head\nlock which nests inside the completion lock. That needs IRQs disabled,\nand hence we have to do that now instead of relying on the outer lock\ndoing so.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292:  if (req->flags & REQ_F_LINK_TIMEOUT) {",
          "1293:   struct io_ring_ctx *ctx = req->ctx;",
          "1296:   io_for_each_link(cur, req)",
          "1297:    io_prep_async_work(cur);",
          "1299:  } else {",
          "1300:   io_for_each_link(cur, req)",
          "1301:    io_prep_async_work(cur);",
          "",
          "[Removed Lines]",
          "1295:   spin_lock_irq(&ctx->completion_lock);",
          "1298:   spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "1295:   spin_lock(&ctx->completion_lock);",
          "1298:   spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1364:  __must_hold(&ctx->completion_lock)",
          "1365: {",
          "1366:  u32 seq = ctx->cached_cq_tail - atomic_read(&ctx->cq_timeouts);",
          "1370:  while (!list_empty(&ctx->timeout_list)) {",
          "1371:   u32 events_needed, events_got;",
          "1372:   struct io_kiocb *req = list_first_entry(&ctx->timeout_list,",
          "",
          "[Removed Lines]",
          "1367:  unsigned long flags;",
          "1369:  spin_lock_irqsave(&ctx->timeout_lock, flags);",
          "",
          "[Added Lines]",
          "1368:  spin_lock_irq(&ctx->timeout_lock);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1391:   io_kill_timeout(req, 0);",
          "1392:  }",
          "1393:  ctx->cq_last_tm_flush = seq;",
          "1395: }",
          "1397: static void __io_commit_cqring_flush(struct io_ring_ctx *ctx)",
          "",
          "[Removed Lines]",
          "1394:  spin_unlock_irqrestore(&ctx->timeout_lock, flags);",
          "",
          "[Added Lines]",
          "1393:  spin_unlock_irq(&ctx->timeout_lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1485: static bool __io_cqring_overflow_flush(struct io_ring_ctx *ctx, bool force)",
          "1486: {",
          "1488:  bool all_flushed, posted;",
          "1490:  if (!force && __io_cqring_events(ctx) == ctx->cq_entries)",
          "1491:   return false;",
          "1493:  posted = false;",
          "1495:  while (!list_empty(&ctx->cq_overflow_list)) {",
          "1496:   struct io_uring_cqe *cqe = io_get_cqe(ctx);",
          "1497:   struct io_overflow_cqe *ocqe;",
          "",
          "[Removed Lines]",
          "1487:  unsigned long flags;",
          "1494:  spin_lock_irqsave(&ctx->completion_lock, flags);",
          "",
          "[Added Lines]",
          "1492:  spin_lock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1520:  if (posted)",
          "1521:   io_commit_cqring(ctx);",
          "1523:  if (posted)",
          "1524:   io_cqring_ev_posted(ctx);",
          "1525:  return all_flushed;",
          "",
          "[Removed Lines]",
          "1522:  spin_unlock_irqrestore(&ctx->completion_lock, flags);",
          "",
          "[Added Lines]",
          "1520:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1648:      unsigned int cflags)",
          "1649: {",
          "1650:  struct io_ring_ctx *ctx = req->ctx;",
          "1654:  __io_cqring_fill_event(ctx, req->user_data, res, cflags);",
          "",
          "[Removed Lines]",
          "1651:  unsigned long flags;",
          "1653:  spin_lock_irqsave(&ctx->completion_lock, flags);",
          "",
          "[Added Lines]",
          "1650:  spin_lock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1674:    req = NULL;",
          "1675:  }",
          "1676:  io_commit_cqring(ctx);",
          "1679:  if (req) {",
          "1680:   io_cqring_ev_posted(ctx);",
          "",
          "[Removed Lines]",
          "1677:  spin_unlock_irqrestore(&ctx->completion_lock, flags);",
          "",
          "[Added Lines]",
          "1674:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1734: static void io_flush_cached_locked_reqs(struct io_ring_ctx *ctx,",
          "1735:      struct io_submit_state *state)",
          "1736: {",
          "1738:  list_splice_init(&ctx->locked_free_list, &state->free_list);",
          "1739:  ctx->locked_free_nr = 0;",
          "1741: }",
          "",
          "[Removed Lines]",
          "1737:  spin_lock_irq(&ctx->completion_lock);",
          "1740:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "1734:  spin_lock(&ctx->completion_lock);",
          "1737:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1827: static void __io_free_req(struct io_kiocb *req)",
          "1828: {",
          "1829:  struct io_ring_ctx *ctx = req->ctx;",
          "1832:  io_dismantle_req(req);",
          "1833:  io_put_task(req->task, 1);",
          "1836:  list_add(&req->inflight_entry, &ctx->locked_free_list);",
          "1837:  ctx->locked_free_nr++;",
          "1840:  percpu_ref_put(&ctx->refs);",
          "1841: }",
          "",
          "[Removed Lines]",
          "1830:  unsigned long flags;",
          "1835:  spin_lock_irqsave(&ctx->completion_lock, flags);",
          "1838:  spin_unlock_irqrestore(&ctx->completion_lock, flags);",
          "",
          "[Added Lines]",
          "1831:  spin_lock(&ctx->completion_lock);",
          "1834:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1923:  if (req->flags & (REQ_F_LINK_TIMEOUT | REQ_F_FAIL)) {",
          "1924:   struct io_ring_ctx *ctx = req->ctx;",
          "1926:   bool posted;",
          "1929:   posted = io_disarm_next(req);",
          "1930:   if (posted)",
          "1931:    io_commit_cqring(req->ctx);",
          "1933:   if (posted)",
          "1934:    io_cqring_ev_posted(ctx);",
          "1935:  }",
          "",
          "[Removed Lines]",
          "1925:   unsigned long flags;",
          "1928:   spin_lock_irqsave(&ctx->completion_lock, flags);",
          "1932:   spin_unlock_irqrestore(&ctx->completion_lock, flags);",
          "",
          "[Added Lines]",
          "1923:   spin_lock(&ctx->completion_lock);",
          "1927:   spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2152:  int i, nr = state->compl_nr;",
          "2153:  struct req_batch rb;",
          "2156:  for (i = 0; i < nr; i++) {",
          "2157:   struct io_kiocb *req = state->compl_reqs[i];",
          "",
          "[Removed Lines]",
          "2155:  spin_lock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "2150:  spin_lock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2160:      req->compl.cflags);",
          "2161:  }",
          "2162:  io_commit_cqring(ctx);",
          "2164:  io_cqring_ev_posted(ctx);",
          "2166:  io_init_req_batch(&rb);",
          "",
          "[Removed Lines]",
          "2163:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "2158:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4865:   req->result = vfs_poll(req->file, &pt) & poll->events;",
          "4866:  }",
          "4869:  if (!req->result && !READ_ONCE(poll->canceled)) {",
          "4870:   add_wait_queue(poll->head, &poll->wait);",
          "4871:   return true;",
          "",
          "[Removed Lines]",
          "4868:  spin_lock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "4863:  spin_lock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4899:  if (poll && poll->head) {",
          "4900:   struct wait_queue_head *head = poll->head;",
          "4903:   list_del_init(&poll->wait.entry);",
          "4904:   if (poll->wait.private)",
          "4905:    req_ref_put(req);",
          "4906:   poll->head = NULL;",
          "4908:  }",
          "4909: }",
          "",
          "[Removed Lines]",
          "4902:   spin_lock(&head->lock);",
          "4907:   spin_unlock(&head->lock);",
          "",
          "[Added Lines]",
          "4897:   spin_lock_irq(&head->lock);",
          "4902:   spin_unlock_irq(&head->lock);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4940:  struct io_kiocb *nxt;",
          "4942:  if (io_poll_rewait(req, &req->poll)) {",
          "4944:  } else {",
          "4945:   bool done;",
          "",
          "[Removed Lines]",
          "4943:   spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "4938:   spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4952:    req->result = 0;",
          "4953:    add_wait_queue(req->poll.head, &req->poll.wait);",
          "4954:   }",
          "4956:   io_cqring_ev_posted(ctx);",
          "4958:   if (done) {",
          "",
          "[Removed Lines]",
          "4955:   spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "4950:   spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4969:  struct io_kiocb *req = wait->private;",
          "4970:  struct io_poll_iocb *poll = io_poll_get_single(req);",
          "4971:  __poll_t mask = key_to_poll(key);",
          "4974:  if (mask && !(mask & poll->events))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4967:  unsigned long flags;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4981:  if (poll->head) {",
          "4982:   bool done;",
          "4985:   done = list_empty(&poll->wait.entry);",
          "4986:   if (!done)",
          "4987:    list_del_init(&poll->wait.entry);",
          "4989:   wait->private = NULL;",
          "4991:   if (!done) {",
          "4993:    poll->wait.func(&poll->wait, mode, sync, key);",
          "",
          "[Removed Lines]",
          "4984:   spin_lock(&poll->head->lock);",
          "4990:   spin_unlock(&poll->head->lock);",
          "",
          "[Added Lines]",
          "4980:   spin_lock_irqsave(&poll->head->lock, flags);",
          "4986:   spin_unlock_irqrestore(&poll->head->lock, flags);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5075:  trace_io_uring_task_run(req->ctx, req, req->opcode, req->user_data);",
          "5077:  if (io_poll_rewait(req, &apoll->poll)) {",
          "5079:   return;",
          "5080:  }",
          "5082:  hash_del(&req->hash_node);",
          "5083:  io_poll_remove_double(req);",
          "5086:  if (!READ_ONCE(apoll->poll.canceled))",
          "5087:   io_req_task_submit(req);",
          "",
          "[Removed Lines]",
          "5078:   spin_unlock_irq(&ctx->completion_lock);",
          "5084:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5074:   spin_unlock(&ctx->completion_lock);",
          "5080:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5133:  if (unlikely(!ipt->nr_entries) && !ipt->error)",
          "5134:   ipt->error = -EINVAL;",
          "5137:  if (ipt->error || (mask && (poll->events & EPOLLONESHOT)))",
          "5138:   io_poll_remove_double(req);",
          "5139:  if (likely(poll->head)) {",
          "5141:   if (unlikely(list_empty(&poll->wait.entry))) {",
          "5142:    if (ipt->error)",
          "5143:     cancel = true;",
          "",
          "[Removed Lines]",
          "5136:  spin_lock_irq(&ctx->completion_lock);",
          "5140:   spin_lock(&poll->head->lock);",
          "",
          "[Added Lines]",
          "5132:  spin_lock(&ctx->completion_lock);",
          "5136:   spin_lock_irq(&poll->head->lock);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5150:    WRITE_ONCE(poll->canceled, true);",
          "5152:    io_poll_req_insert(req);",
          "5154:  }",
          "5156:  return mask;",
          "",
          "[Removed Lines]",
          "5153:   spin_unlock(&poll->head->lock);",
          "",
          "[Added Lines]",
          "5149:   spin_unlock_irq(&poll->head->lock);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5206:  ret = __io_arm_poll_handler(req, &apoll->poll, &ipt, mask,",
          "5207:      io_async_wake);",
          "5208:  if (ret || ipt.error) {",
          "5210:   if (ret)",
          "5211:    return IO_APOLL_READY;",
          "5212:   return IO_APOLL_ABORTED;",
          "5213:  }",
          "5215:  trace_io_uring_poll_arm(ctx, req, req->opcode, req->user_data,",
          "5216:     mask, apoll->poll.events);",
          "5217:  return IO_APOLL_OK;",
          "",
          "[Removed Lines]",
          "5209:   spin_unlock_irq(&ctx->completion_lock);",
          "5214:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5205:   spin_unlock(&ctx->completion_lock);",
          "5210:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5226:  if (!poll->head)",
          "5227:   return false;",
          "5229:  if (do_cancel)",
          "5230:   WRITE_ONCE(poll->canceled, true);",
          "5231:  if (!list_empty(&poll->wait.entry)) {",
          "5232:   list_del_init(&poll->wait.entry);",
          "5233:   do_complete = true;",
          "5234:  }",
          "5236:  hash_del(&req->hash_node);",
          "5237:  return do_complete;",
          "5238: }",
          "",
          "[Removed Lines]",
          "5228:  spin_lock(&poll->head->lock);",
          "5235:  spin_unlock(&poll->head->lock);",
          "",
          "[Added Lines]",
          "5224:  spin_lock_irq(&poll->head->lock);",
          "5231:  spin_unlock_irq(&poll->head->lock);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5268:  struct io_kiocb *req;",
          "5269:  int posted = 0, i;",
          "5272:  for (i = 0; i < (1U << ctx->cancel_hash_bits); i++) {",
          "5273:   struct hlist_head *list;",
          "",
          "[Removed Lines]",
          "5271:  spin_lock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5267:  spin_lock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "5278:     posted += io_poll_remove_one(req);",
          "5279:   }",
          "5280:  }",
          "5283:  if (posted)",
          "5284:   io_cqring_ev_posted(ctx);",
          "",
          "[Removed Lines]",
          "5281:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5277:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "5416:   ipt.error = 0;",
          "5417:   io_poll_complete(req, mask);",
          "5418:  }",
          "5421:  if (mask) {",
          "5422:   io_cqring_ev_posted(ctx);",
          "",
          "[Removed Lines]",
          "5419:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5415:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "5433:  bool completing;",
          "5434:  int ret;",
          "5437:  preq = io_poll_find(ctx, req->poll_update.old_user_data, true);",
          "5438:  if (!preq) {",
          "5439:   ret = -ENOENT;",
          "",
          "[Removed Lines]",
          "5436:  spin_lock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5432:  spin_lock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "5460:  ret = 0;",
          "5461: err:",
          "5462:  if (ret < 0) {",
          "5464:   req_set_fail(req);",
          "5465:   io_req_complete(req, ret);",
          "5466:   return 0;",
          "",
          "[Removed Lines]",
          "5463:   spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5459:   spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "5473:  }",
          "5474:  if (req->poll_update.update_user_data)",
          "5475:   preq->user_data = req->poll_update.new_user_data;",
          "5479:  io_req_complete(req, ret);",
          "",
          "[Removed Lines]",
          "5476:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5472:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "5492: {",
          "5493:  struct io_ring_ctx *ctx = req->ctx;",
          "5496:  io_cqring_fill_event(ctx, req->user_data, -ETIME, 0);",
          "5497:  io_commit_cqring(ctx);",
          "5500:  io_cqring_ev_posted(ctx);",
          "5501:  req_set_fail(req);",
          "",
          "[Removed Lines]",
          "5495:  spin_lock_irq(&ctx->completion_lock);",
          "5498:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5491:  spin_lock(&ctx->completion_lock);",
          "5494:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "5627:      io_translate_timeout_mode(tr->flags));",
          "5628:  spin_unlock_irq(&ctx->timeout_lock);",
          "5631:  io_cqring_fill_event(ctx, req->user_data, ret, 0);",
          "5632:  io_commit_cqring(ctx);",
          "5634:  io_cqring_ev_posted(ctx);",
          "5635:  if (ret < 0)",
          "5636:   req_set_fail(req);",
          "",
          "[Removed Lines]",
          "5630:  spin_lock_irq(&ctx->completion_lock);",
          "5633:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5626:  spin_lock(&ctx->completion_lock);",
          "5629:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5768:          struct io_kiocb *req, __u64 sqe_addr,",
          "5769:          int success_ret)",
          "5770: {",
          "5772:  int ret;",
          "5774:  ret = io_async_cancel_one(req->task->io_uring, sqe_addr, ctx);",
          "5776:  if (ret != -ENOENT)",
          "5777:   goto done;",
          "5779:  ret = io_timeout_cancel(ctx, sqe_addr);",
          "5781:  if (ret != -ENOENT)",
          "5782:   goto done;",
          "5783:  ret = io_poll_cancel(ctx, sqe_addr, false);",
          "",
          "[Removed Lines]",
          "5771:  unsigned long flags;",
          "5775:  spin_lock_irqsave(&ctx->completion_lock, flags);",
          "5778:  spin_lock(&ctx->timeout_lock);",
          "5780:  spin_unlock(&ctx->timeout_lock);",
          "",
          "[Added Lines]",
          "5770:  spin_lock(&ctx->completion_lock);",
          "5773:  spin_lock_irq(&ctx->timeout_lock);",
          "5775:  spin_unlock_irq(&ctx->timeout_lock);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "5786:   ret = success_ret;",
          "5787:  io_cqring_fill_event(ctx, req->user_data, ret, 0);",
          "5788:  io_commit_cqring(ctx);",
          "5790:  io_cqring_ev_posted(ctx);",
          "5792:  if (ret < 0)",
          "",
          "[Removed Lines]",
          "5789:  spin_unlock_irqrestore(&ctx->completion_lock, flags);",
          "",
          "[Added Lines]",
          "5784:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "5818:  ret = io_async_cancel_one(req->task->io_uring, sqe_addr, ctx);",
          "5820:  if (ret != -ENOENT)",
          "5821:   goto done;",
          "5823:  ret = io_timeout_cancel(ctx, sqe_addr);",
          "5825:  if (ret != -ENOENT)",
          "5826:   goto done;",
          "5827:  ret = io_poll_cancel(ctx, sqe_addr, false);",
          "5828:  if (ret != -ENOENT)",
          "5829:   goto done;",
          "5833:  io_ring_submit_lock(ctx, !(issue_flags & IO_URING_F_NONBLOCK));",
          "",
          "[Removed Lines]",
          "5819:  spin_lock_irq(&ctx->completion_lock);",
          "5822:  spin_lock(&ctx->timeout_lock);",
          "5824:  spin_unlock(&ctx->timeout_lock);",
          "5830:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5814:  spin_lock(&ctx->completion_lock);",
          "5817:  spin_lock_irq(&ctx->timeout_lock);",
          "5819:  spin_unlock_irq(&ctx->timeout_lock);",
          "5825:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "5841:  }",
          "5842:  io_ring_submit_unlock(ctx, !(issue_flags & IO_URING_F_NONBLOCK));",
          "5845: done:",
          "5846:  io_cqring_fill_event(ctx, req->user_data, ret, 0);",
          "5847:  io_commit_cqring(ctx);",
          "5849:  io_cqring_ev_posted(ctx);",
          "5851:  if (ret < 0)",
          "",
          "[Removed Lines]",
          "5844:  spin_lock_irq(&ctx->completion_lock);",
          "5848:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "5839:  spin_lock(&ctx->completion_lock);",
          "5843:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "6061:   return true;",
          "6062:  }",
          "6065:  if (!req_need_defer(req, seq) && list_empty(&ctx->defer_list)) {",
          "6067:   kfree(de);",
          "6068:   io_queue_async_work(req);",
          "6069:   return true;",
          "",
          "[Removed Lines]",
          "6064:  spin_lock_irq(&ctx->completion_lock);",
          "6066:   spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "6059:  spin_lock(&ctx->completion_lock);",
          "6061:   spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "6073:  de->req = req;",
          "6074:  de->seq = seq;",
          "6075:  list_add_tail(&de->list, &ctx->defer_list);",
          "6077:  return true;",
          "6078: }",
          "",
          "[Removed Lines]",
          "6076:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "6071:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "6813: static inline void io_ring_set_wakeup_flag(struct io_ring_ctx *ctx)",
          "6814: {",
          "6817:  WRITE_ONCE(ctx->rings->sq_flags,",
          "6818:      ctx->rings->sq_flags | IORING_SQ_NEED_WAKEUP);",
          "6820: }",
          "6822: static inline void io_ring_clear_wakeup_flag(struct io_ring_ctx *ctx)",
          "6823: {",
          "6825:  WRITE_ONCE(ctx->rings->sq_flags,",
          "6826:      ctx->rings->sq_flags & ~IORING_SQ_NEED_WAKEUP);",
          "6828: }",
          "6830: static int __io_sq_thread(struct io_ring_ctx *ctx, bool cap_entries)",
          "",
          "[Removed Lines]",
          "6816:  spin_lock_irq(&ctx->completion_lock);",
          "6819:  spin_unlock_irq(&ctx->completion_lock);",
          "6824:  spin_lock_irq(&ctx->completion_lock);",
          "6827:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "6811:  spin_lock(&ctx->completion_lock);",
          "6814:  spin_unlock(&ctx->completion_lock);",
          "6819:  spin_lock(&ctx->completion_lock);",
          "6822:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "7671:    bool lock_ring = ctx->flags & IORING_SETUP_IOPOLL;",
          "7673:    io_ring_submit_lock(ctx, lock_ring);",
          "7675:    io_cqring_fill_event(ctx, prsrc->tag, 0, 0);",
          "7676:    ctx->cq_extra++;",
          "7677:    io_commit_cqring(ctx);",
          "7679:    io_cqring_ev_posted(ctx);",
          "7680:    io_ring_submit_unlock(ctx, lock_ring);",
          "7681:   }",
          "",
          "[Removed Lines]",
          "7674:    spin_lock_irq(&ctx->completion_lock);",
          "7678:    spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "7669:    spin_lock(&ctx->completion_lock);",
          "7673:    spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "8846:   mutex_lock(&ctx->uring_lock);",
          "8847:  }",
          "8848:  mutex_unlock(&ctx->uring_lock);",
          "8852:  io_ring_ctx_free(ctx);",
          "8853: }",
          "",
          "[Removed Lines]",
          "8849:  spin_lock_irq(&ctx->completion_lock);",
          "8850:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "8844:  spin_lock(&ctx->completion_lock);",
          "8845:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "8859:  struct io_kiocb *req, *tmp;",
          "8860:  int canceled = 0;",
          "8864:  list_for_each_entry_safe(req, tmp, &ctx->timeout_list, timeout.list) {",
          "8865:   if (io_match_task(req, tsk, cancel_all)) {",
          "8866:    io_kill_timeout(req, -ECANCELED);",
          "8867:    canceled++;",
          "8868:   }",
          "8869:  }",
          "8871:  if (canceled != 0)",
          "8872:   io_commit_cqring(ctx);",
          "8874:  if (canceled != 0)",
          "8875:   io_cqring_ev_posted(ctx);",
          "8876:  return canceled != 0;",
          "",
          "[Removed Lines]",
          "8862:  spin_lock_irq(&ctx->completion_lock);",
          "8863:  spin_lock(&ctx->timeout_lock);",
          "8870:  spin_unlock(&ctx->timeout_lock);",
          "8873:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "8857:  spin_lock(&ctx->completion_lock);",
          "8858:  spin_lock_irq(&ctx->timeout_lock);",
          "8865:  spin_unlock_irq(&ctx->timeout_lock);",
          "8868:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "8926:  bool ret;",
          "8928:  if (!cancel->all && (req->flags & REQ_F_LINK_TIMEOUT)) {",
          "8930:   struct io_ring_ctx *ctx = req->ctx;",
          "8934:   ret = io_match_task(req, cancel->task, cancel->all);",
          "8936:  } else {",
          "8937:   ret = io_match_task(req, cancel->task, cancel->all);",
          "8938:  }",
          "",
          "[Removed Lines]",
          "8929:   unsigned long flags;",
          "8933:   spin_lock_irqsave(&ctx->completion_lock, flags);",
          "8935:   spin_unlock_irqrestore(&ctx->completion_lock, flags);",
          "",
          "[Added Lines]",
          "8927:   spin_lock(&ctx->completion_lock);",
          "8929:   spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "8945:  struct io_defer_entry *de;",
          "8946:  LIST_HEAD(list);",
          "8949:  list_for_each_entry_reverse(de, &ctx->defer_list, list) {",
          "8950:   if (io_match_task(de->req, task, cancel_all)) {",
          "8951:    list_cut_position(&list, &ctx->defer_list, &de->list);",
          "8952:    break;",
          "8953:   }",
          "8954:  }",
          "8956:  if (list_empty(&list))",
          "8957:   return false;",
          "",
          "[Removed Lines]",
          "8948:  spin_lock_irq(&ctx->completion_lock);",
          "8955:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "8942:  spin_lock(&ctx->completion_lock);",
          "8949:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "9502:    io_uring_show_cred(m, index, cred);",
          "9503:  }",
          "9504:  seq_printf(m, \"PollList:\\n\");",
          "9506:  for (i = 0; i < (1U << ctx->cancel_hash_bits); i++) {",
          "9507:   struct hlist_head *list = &ctx->cancel_hash[i];",
          "9508:   struct io_kiocb *req;",
          "",
          "[Removed Lines]",
          "9505:  spin_lock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "9499:  spin_lock(&ctx->completion_lock);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "9511:    seq_printf(m, \"  op=%d, task_works=%d\\n\", req->opcode,",
          "9512:      req->task->task_works != NULL);",
          "9513:  }",
          "9515:  if (has_lock)",
          "9516:   mutex_unlock(&ctx->uring_lock);",
          "9517: }",
          "",
          "[Removed Lines]",
          "9514:  spin_unlock_irq(&ctx->completion_lock);",
          "",
          "[Added Lines]",
          "9508:  spin_unlock(&ctx->completion_lock);",
          "",
          "---------------"
        ]
      }
    }
  ]
}