{
  "cve_id": "CVE-2022-24793",
  "cve_desc": "PJSIP is a free and open source multimedia communication library written in C. A buffer overflow vulnerability in versions 2.12 and prior affects applications that use PJSIP DNS resolution. It doesn't affect PJSIP users who utilize an external resolver. This vulnerability is related to CVE-2023-27585. The difference is that this issue is in parsing the query record `parse_rr()`, while the issue in CVE-2023-27585 is in `parse_query()`. A patch is available in the `master` branch of the `pjsip/pjproject` GitHub repository. A workaround is to disable DNS resolution in PJSIP config (by setting `nameserver_count` to zero) or use an external resolver instead.",
  "repo": "pjsip/pjproject",
  "patch_hash": "9fae8f43accef8ea65d4a8ae9cdf297c46cfe29a",
  "patch_info": {
    "commit_hash": "9fae8f43accef8ea65d4a8ae9cdf297c46cfe29a",
    "repo": "pjsip/pjproject",
    "commit_url": "https://github.com/pjsip/pjproject/commit/9fae8f43accef8ea65d4a8ae9cdf297c46cfe29a",
    "files": [
      "pjlib-util/src/pjlib-util/dns.c"
    ],
    "message": "Merge pull request from GHSA-p6g5-v97c-w5q4\n\n* Prevent heap buffer overflow when parsing DNS packets\n\n* Make sure packet parsing doesn't advance beyond max/end\n\n* Update checks\n\n* Remove  check\n\nCo-authored-by: sauwming <ming@teluu.com>",
    "before_after_code_files": [
      "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c"
    ]
  },
  "patch_diff": {
    "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c": [
      "File: pjlib-util/src/pjlib-util/dns.c -> pjlib-util/src/pjlib-util/dns.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "159:  } else {",
      "160:      unsigned label_len = *p;",
      "164:   return PJLIB_UTIL_EDNSINNAMEPTR;",
      "166:      p += (label_len + 1);",
      "",
      "[Removed Lines]",
      "163:      if (pkt+label_len > max)",
      "",
      "[Added Lines]",
      "168:      if (p+1+label_len+1 > max)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:   ++label_len;",
      "176:  }",
      "177:     }",
      "178:     ++p;",
      "",
      "[Removed Lines]",
      "174:      if (p >= max)",
      "175:   return PJLIB_UTIL_EDNSINSIZE;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:  } else {",
      "223:      unsigned label_len = *p;",
      "227:   return PJLIB_UTIL_EDNSINNAMEPTR;",
      "229:      pj_memcpy(name->ptr + name->slen, p+1, label_len);",
      "",
      "[Removed Lines]",
      "226:      if (pkt+label_len > max)",
      "",
      "[Added Lines]",
      "233:      if (p+1+label_len+1 > max)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "235:   ++name->slen;",
      "236:      }",
      "240:  }",
      "241:     }",
      "",
      "[Removed Lines]",
      "238:      if (p >= max)",
      "239:   return PJLIB_UTIL_EDNSINSIZE;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "270:     p = (start + name_part_len);",
      "273:     pj_memcpy(&q->type, p, 2);",
      "274:     q->type = pj_ntohs(q->type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "277:     if (p + 4 > max)",
      "278:      return PJLIB_UTIL_EDNSINSIZE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a07b94230b5d17f59505c550896d8cc929390ac1",
      "candidate_info": {
        "commit_hash": "a07b94230b5d17f59505c550896d8cc929390ac1",
        "repo": "pjsip/pjproject",
        "commit_url": "https://github.com/pjsip/pjproject/commit/a07b94230b5d17f59505c550896d8cc929390ac1",
        "files": [
          "pjlib-util/src/pjlib-util/dns.c"
        ],
        "message": "Merge pull request from GHSA-p6g5-v97c-w5q4\n\n* Prevent heap buffer overflow when parsing DNS packets\n\n* Make sure packet parsing doesn't advance beyond max/end\n\n* Update checks\n\n* Remove  check\n\nCo-authored-by: sauwming <ming@teluu.com>",
        "before_after_code_files": [
          "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c"
          ],
          "candidate": [
            "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "pjlib-util/src/pjlib-util/dns.c||pjlib-util/src/pjlib-util/dns.c": [
          "File: pjlib-util/src/pjlib-util/dns.c -> pjlib-util/src/pjlib-util/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:  } else {",
          "160:      unsigned label_len = *p;",
          "164:   return PJLIB_UTIL_EDNSINNAMEPTR;",
          "166:      p += (label_len + 1);",
          "",
          "[Removed Lines]",
          "163:      if (pkt+label_len > max)",
          "",
          "[Added Lines]",
          "168:      if (p+1+label_len+1 > max)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:   ++label_len;",
          "176:  }",
          "177:     }",
          "178:     ++p;",
          "",
          "[Removed Lines]",
          "174:      if (p >= max)",
          "175:   return PJLIB_UTIL_EDNSINSIZE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:  } else {",
          "223:      unsigned label_len = *p;",
          "227:   return PJLIB_UTIL_EDNSINNAMEPTR;",
          "229:      pj_memcpy(name->ptr + name->slen, p+1, label_len);",
          "",
          "[Removed Lines]",
          "226:      if (pkt+label_len > max)",
          "",
          "[Added Lines]",
          "233:      if (p+1+label_len+1 > max)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:   ++name->slen;",
          "236:      }",
          "240:  }",
          "241:     }",
          "",
          "[Removed Lines]",
          "238:      if (p >= max)",
          "239:   return PJLIB_UTIL_EDNSINSIZE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270:     p = (start + name_part_len);",
          "273:     pj_memcpy(&q->type, p, 2);",
          "274:     q->type = pj_ntohs(q->type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:     if (p + 4 > max)",
          "278:      return PJLIB_UTIL_EDNSINSIZE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}