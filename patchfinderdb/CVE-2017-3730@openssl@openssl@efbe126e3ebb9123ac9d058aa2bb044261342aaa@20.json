{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8a4d96ac8227f39043735faa9e9a30e22818f5e8",
      "candidate_info": {
        "commit_hash": "8a4d96ac8227f39043735faa9e9a30e22818f5e8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8a4d96ac8227f39043735faa9e9a30e22818f5e8",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0d release\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100040L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-dev  xx XXX xxxx\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010004fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d-fips  26 Jan 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0d  26 Jan 2017\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81d5808064949e6f23c1eaac4b24f09c8b1255db",
      "candidate_info": {
        "commit_hash": "81d5808064949e6f23c1eaac4b24f09c8b1255db",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/81d5808064949e6f23c1eaac4b24f09c8b1255db",
        "files": [
          "crypto/ct/ct_policy.c"
        ],
        "message": "By default, allow SCT timestamps to be up to 5 minutes in the future\n\nAs requested in\nhttps://github.com/openssl/openssl/pull/1554#issuecomment-246371575.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit c22aa33e29ce162c672c9b2f0df591db977d4e9b)",
        "before_after_code_files": [
          "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c": [
          "File: crypto/ct/ct_policy.c -> crypto/ct/ct_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"ct_locl.h\"",
          "20: CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void)",
          "21: {",
          "22:     CT_POLICY_EVAL_CTX *ctx = OPENSSL_zalloc(sizeof(CT_POLICY_EVAL_CTX));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: static const time_t SCT_CLOCK_DRIFT_TOLERANCE = 300;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     }",
          "31:     return ctx;",
          "32: }",
          "",
          "[Removed Lines]",
          "30:     ctx->epoch_time_in_ms = time(NULL) * 1000;",
          "",
          "[Added Lines]",
          "36:     ctx->epoch_time_in_ms = (time(NULL) + SCT_CLOCK_DRIFT_TOLERANCE) * 1000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1645f3f4b9f717133ffcaf3398508ed2ddc81374",
      "candidate_info": {
        "commit_hash": "1645f3f4b9f717133ffcaf3398508ed2ddc81374",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1645f3f4b9f717133ffcaf3398508ed2ddc81374",
        "files": [
          "crypto/ocsp/ocsp_srv.c",
          "doc/crypto/OCSP_response_status.pod",
          "include/openssl/ocsp.h",
          "util/libcrypto.num"
        ],
        "message": "Add the ability to set OCSP_RESPID fields\n\nOCSP_RESPID was made opaque in 1.1.0, but no accessors were provided for\nsetting the name/key value for the OCSP_RESPID.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/ocsp/ocsp_srv.c||crypto/ocsp/ocsp_srv.c",
          "include/openssl/ocsp.h||include/openssl/ocsp.h",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ocsp/ocsp_srv.c||crypto/ocsp/ocsp_srv.c": [
          "File: crypto/ocsp/ocsp_srv.c -> crypto/ocsp/ocsp_srv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:     rid = &brsp->tbsResponseData.responderId;",
          "195:     if (flags & OCSP_RESPID_KEY) {",
          "199:             goto err;",
          "207:     }",
          "209:     if (!(flags & OCSP_NOTIME) &&",
          "",
          "[Removed Lines]",
          "196:         unsigned char md[SHA_DIGEST_LENGTH];",
          "197:         X509_pubkey_digest(signer, EVP_sha1(), md, NULL);",
          "198:         if ((rid->value.byKey = ASN1_OCTET_STRING_new()) == NULL)",
          "200:         if (!(ASN1_OCTET_STRING_set(rid->value.byKey, md, SHA_DIGEST_LENGTH)))",
          "201:             goto err;",
          "202:         rid->type = V_OCSP_RESPID_KEY;",
          "203:     } else {",
          "204:         if (!X509_NAME_set(&rid->value.byName, X509_get_subject_name(signer)))",
          "205:             goto err;",
          "206:         rid->type = V_OCSP_RESPID_NAME;",
          "",
          "[Added Lines]",
          "196:         if (!OCSP_RESPID_set_by_key(rid, signer))",
          "198:     } else if (!OCSP_RESPID_set_by_name(rid, signer)) {",
          "199:         goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:  err:",
          "223:     return 0;",
          "224: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: int OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert)",
          "220: {",
          "221:     if (!X509_NAME_set(&respid->value.byName, X509_get_subject_name(cert)))",
          "222:         return 0;",
          "224:     respid->type = V_OCSP_RESPID_NAME;",
          "226:     return 1;",
          "227: }",
          "229: int OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert)",
          "230: {",
          "231:     ASN1_OCTET_STRING *byKey = NULL;",
          "232:     unsigned char md[SHA_DIGEST_LENGTH];",
          "235:     if (!X509_pubkey_digest(cert, EVP_sha1(), md, NULL))",
          "236:         return 0;",
          "238:     byKey = ASN1_OCTET_STRING_new();",
          "239:     if (byKey == NULL)",
          "240:         return 0;",
          "242:     if (!(ASN1_OCTET_STRING_set(respid->value.byKey, md, SHA_DIGEST_LENGTH))) {",
          "243:         ASN1_OCTET_STRING_free(byKey);",
          "244:         return 0;",
          "245:     }",
          "247:     respid->type = V_OCSP_RESPID_KEY;",
          "248:     respid->value.byKey = byKey;",
          "250:     return 1;",
          "251: }",
          "",
          "---------------"
        ],
        "include/openssl/ocsp.h||include/openssl/ocsp.h": [
          "File: include/openssl/ocsp.h -> include/openssl/ocsp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: int OCSP_basic_sign(OCSP_BASICRESP *brsp,",
          "260:                     X509 *signer, EVP_PKEY *key, const EVP_MD *dgst,",
          "261:                     STACK_OF(X509) *certs, unsigned long flags);",
          "263: X509_EXTENSION *OCSP_crlID_new(const char *url, long *n, char *tim);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: int OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert);",
          "263: int OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert);",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4203: ECPARAMETERS_free                       4154 1_1_0 EXIST::FUNCTION:EC",
          "4204: ECPKPARAMETERS_new                      4155 1_1_0 EXIST::FUNCTION:EC",
          "4205: ECPARAMETERS_new                        4156 1_1_0 EXIST::FUNCTION:EC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4206: OCSP_RESPID_set_by_name                 4157 1_1_0a EXIST::FUNCTION:OCSP",
          "4207: OCSP_RESPID_set_by_key                  4158 1_1_0a EXIST::FUNCTION:OCSP",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c08ce19e7972d0e85833b257d74f1e460c4a8b8e",
      "candidate_info": {
        "commit_hash": "c08ce19e7972d0e85833b257d74f1e460c4a8b8e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c08ce19e7972d0e85833b257d74f1e460c4a8b8e",
        "files": [
          "crypto/x509v3/v3_utl.c"
        ],
        "message": "Missing free item on push failure\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1905)\n(cherry picked from commit 2d13250fd695eba777fe7e2af4beb1b7d356bd8f)",
        "before_after_code_files": [
          "crypto/x509v3/v3_utl.c||crypto/x509v3/v3_utl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509v3/v3_utl.c||crypto/x509v3/v3_utl.c": [
          "File: crypto/x509v3/v3_utl.c -> crypto/x509v3/v3_utl.c"
        ]
      }
    },
    {
      "candidate_hash": "d3c9d6e99f075e6fbdab94db00b220cfa08b5c4b",
      "candidate_info": {
        "commit_hash": "d3c9d6e99f075e6fbdab94db00b220cfa08b5c4b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d3c9d6e99f075e6fbdab94db00b220cfa08b5c4b",
        "files": [
          "ssl/statem/statem_clnt.c"
        ],
        "message": "Avoid KCI attack for GOST\n\nRussian GOST ciphersuites are vulnerable to the KCI attack because they use\nlong-term keys to establish the connection when ssl client authorization is\non. This change brings the GOST implementation into line with the latest\nspecs in order to avoid the attack. It should not break backwards\ncompatibility.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
          ],
          "candidate": [
            "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2378:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_GOST, ERR_R_INTERNAL_ERROR);",
          "2379:         goto err;",
          "2380:     };",
          "",
          "[Removed Lines]",
          "2384:     if (s->s3->tmp.cert_req && s->cert->key->privatekey) {",
          "2385:         if (EVP_PKEY_derive_set_peer(pkey_ctx, s->cert->key->privatekey) <= 0) {",
          "2390:             ERR_clear_error();",
          "2391:         }",
          "2392:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2435:     }",
          "2436:     memcpy(*p, tmp, msglen);",
          "2443:     EVP_PKEY_CTX_free(pkey_ctx);",
          "2444:     s->s3->tmp.pms = pms;",
          "2445:     s->s3->tmp.pmslen = pmslen;",
          "",
          "[Removed Lines]",
          "2438:     if (EVP_PKEY_CTX_ctrl(pkey_ctx, -1, -1, EVP_PKEY_CTRL_PEER_KEY, 2,",
          "2439:                           NULL) > 0) {",
          "2441:         s->s3->flags |= TLS1_FLAGS_SKIP_CERT_VERIFY;",
          "2442:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}