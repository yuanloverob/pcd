{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1493e0069641598812637882f7ff3b65f7660c6",
      "candidate_info": {
        "commit_hash": "f1493e0069641598812637882f7ff3b65f7660c6",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/f1493e0069641598812637882f7ff3b65f7660c6",
        "files": [
          ".gitignore",
          "phpdbg_parser.c",
          "phpdbg_parser.h"
        ],
        "message": "add parser files to dist",
        "before_after_code_files": [
          "phpdbg_parser.c||phpdbg_parser.c",
          "phpdbg_parser.h||phpdbg_parser.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpdbg_parser.c||phpdbg_parser.c": [
          "File: phpdbg_parser.c -> phpdbg_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:       Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "8:    it under the terms of the GNU General Public License as published by",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "12:    This program is distributed in the hope that it will be useful,",
          "13:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "15:    GNU General Public License for more details.",
          "17:    You should have received a copy of the GNU General Public License",
          "21:    part or all of the Bison parser skeleton and distribute that work",
          "22:    under terms of your choice, so long as that work isn't itself a",
          "23:    parser generator using the skeleton or a modified version thereof",
          "24:    as a parser skeleton.  Alternatively, if you modify or redistribute",
          "25:    the parser skeleton itself, you may (at your option) remove this",
          "26:    special exception, which will cause the skeleton and the resulting",
          "27:    Bison output files to be licensed under the GNU General Public",
          "28:    License without this special exception.",
          "30:    This special exception was added by the Free Software Foundation in",
          "37:    infringing on user name space.  This should be done even for local",
          "38:    variables, as they might otherwise be expanded by user macros.",
          "39:    There are some unavoidable exceptions within include files to",
          "40:    define necessary library symbols; they are noted \"INFRINGES ON",
          "44: #define YYBISON 1",
          "47: #define YYBISON_VERSION \"2.7\"",
          "50: #define YYSKELETON_NAME \"yacc.c\"",
          "53: #define YYPURE 1",
          "56: #define YYPUSH 0",
          "59: #define YYPULL 1",
          "66: #line 2 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "76: #include \"phpdbg.h\"",
          "77: #include \"phpdbg_cmd.h\"",
          "78: #include \"phpdbg_utils.h\"",
          "79: #include \"phpdbg_cmd.h\"",
          "80: #include \"phpdbg_prompt.h\"",
          "82: #define YYSTYPE phpdbg_param_t",
          "84: #include \"phpdbg_parser.h\"",
          "85: #include \"phpdbg_lexer.h\"",
          "87: ZEND_EXTERN_MODULE_GLOBALS(phpdbg);",
          "89: int yyerror(phpdbg_param_t *stack, yyscan_t scanner, const char *msg) {",
          "90:  TSRMLS_FETCH();",
          "91:     phpdbg_error(\"Parse Error: %s\", msg);",
          "92:     {",
          "93:      const phpdbg_param_t *top = stack;",
          "95:      while (top) {",
          "96:       phpdbg_param_debug(",
          "97:        top, \"--> \");",
          "98:       top = top->next;",
          "99:      }",
          "100:     }",
          "101:     return 0;",
          "102: }",
          "105: #line 106 \"sapi/phpdbg/phpdbg_parser.c\"",
          "107: # ifndef YY_NULL",
          "108: #  if defined __cplusplus && 201103L <= __cplusplus",
          "109: #   define YY_NULL nullptr",
          "110: #  else",
          "111: #   define YY_NULL 0",
          "112: #  endif",
          "113: # endif",
          "116: #ifdef YYERROR_VERBOSE",
          "117: # undef YYERROR_VERBOSE",
          "118: # define YYERROR_VERBOSE 1",
          "119: #else",
          "120: # define YYERROR_VERBOSE 1",
          "121: #endif",
          "125: #ifndef YY_YY_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED",
          "126: # define YY_YY_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED",
          "128: #ifndef YYDEBUG",
          "129: # define YYDEBUG 0",
          "130: #endif",
          "131: #if YYDEBUG",
          "132: extern int yydebug;",
          "133: #endif",
          "136: #line 40 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "138: #include \"phpdbg.h\"",
          "139: #ifndef YY_TYPEDEF_YY_SCANNER_T",
          "140: #define YY_TYPEDEF_YY_SCANNER_T",
          "141: typedef void* yyscan_t;",
          "142: #endif",
          "146: #line 147 \"sapi/phpdbg/phpdbg_parser.c\"",
          "149: #ifndef YYTOKENTYPE",
          "150: # define YYTOKENTYPE",
          "153:    enum yytokentype {",
          "154:      T_EVAL = 258,",
          "155:      T_RUN = 259,",
          "156:      T_SHELL = 260,",
          "157:      T_IF = 261,",
          "158:      T_TRUTHY = 262,",
          "159:      T_FALSY = 263,",
          "160:      T_STRING = 264,",
          "161:      T_COLON = 265,",
          "162:      T_DCOLON = 266,",
          "163:      T_POUND = 267,",
          "164:      T_PROTO = 268,",
          "165:      T_DIGITS = 269,",
          "166:      T_LITERAL = 270,",
          "167:      T_ADDR = 271,",
          "168:      T_OPCODE = 272,",
          "169:      T_ID = 273,",
          "170:      T_INPUT = 274,",
          "171:      T_UNEXPECTED = 275",
          "172:    };",
          "173: #endif",
          "175: #define T_EVAL 258",
          "176: #define T_RUN 259",
          "177: #define T_SHELL 260",
          "178: #define T_IF 261",
          "179: #define T_TRUTHY 262",
          "180: #define T_FALSY 263",
          "181: #define T_STRING 264",
          "182: #define T_COLON 265",
          "183: #define T_DCOLON 266",
          "184: #define T_POUND 267",
          "185: #define T_PROTO 268",
          "186: #define T_DIGITS 269",
          "187: #define T_LITERAL 270",
          "188: #define T_ADDR 271",
          "189: #define T_OPCODE 272",
          "190: #define T_ID 273",
          "191: #define T_INPUT 274",
          "192: #define T_UNEXPECTED 275",
          "196: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "197: typedef int YYSTYPE;",
          "198: # define YYSTYPE_IS_TRIVIAL 1",
          "200: # define YYSTYPE_IS_DECLARED 1",
          "201: #endif",
          "204: #ifdef YYPARSE_PARAM",
          "205: #if defined __STDC__ || defined __cplusplus",
          "206: int yyparse (void *YYPARSE_PARAM);",
          "207: #else",
          "208: int yyparse ();",
          "209: #endif",
          "211: #if defined __STDC__ || defined __cplusplus",
          "212: int yyparse (phpdbg_param_t *stack, yyscan_t scanner);",
          "213: #else",
          "214: int yyparse ();",
          "215: #endif",
          "223: #line 224 \"sapi/phpdbg/phpdbg_parser.c\"",
          "225: #ifdef short",
          "226: # undef short",
          "227: #endif",
          "229: #ifdef YYTYPE_UINT8",
          "230: typedef YYTYPE_UINT8 yytype_uint8;",
          "231: #else",
          "232: typedef unsigned char yytype_uint8;",
          "233: #endif",
          "235: #ifdef YYTYPE_INT8",
          "236: typedef YYTYPE_INT8 yytype_int8;",
          "237: #elif (defined __STDC__ || defined __C99__FUNC__ \\",
          "238:      || defined __cplusplus || defined _MSC_VER)",
          "239: typedef signed char yytype_int8;",
          "240: #else",
          "241: typedef short int yytype_int8;",
          "242: #endif",
          "244: #ifdef YYTYPE_UINT16",
          "245: typedef YYTYPE_UINT16 yytype_uint16;",
          "246: #else",
          "247: typedef unsigned short int yytype_uint16;",
          "248: #endif",
          "250: #ifdef YYTYPE_INT16",
          "251: typedef YYTYPE_INT16 yytype_int16;",
          "252: #else",
          "253: typedef short int yytype_int16;",
          "254: #endif",
          "256: #ifndef YYSIZE_T",
          "257: # ifdef __SIZE_TYPE__",
          "258: #  define YYSIZE_T __SIZE_TYPE__",
          "259: # elif defined size_t",
          "260: #  define YYSIZE_T size_t",
          "261: # elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \\",
          "262:      || defined __cplusplus || defined _MSC_VER)",
          "264: #  define YYSIZE_T size_t",
          "265: # else",
          "266: #  define YYSIZE_T unsigned int",
          "267: # endif",
          "268: #endif",
          "270: #define YYSIZE_MAXIMUM ((YYSIZE_T) -1)",
          "272: #ifndef YY_",
          "273: # if defined YYENABLE_NLS && YYENABLE_NLS",
          "274: #  if ENABLE_NLS",
          "276: #   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)",
          "277: #  endif",
          "278: # endif",
          "279: # ifndef YY_",
          "280: #  define YY_(Msgid) Msgid",
          "281: # endif",
          "282: #endif",
          "285: #if ! defined lint || defined __GNUC__",
          "286: # define YYUSE(E) ((void) (E))",
          "287: #else",
          "289: #endif",
          "292: #ifndef lint",
          "293: # define YYID(N) (N)",
          "294: #else",
          "295: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "296:      || defined __cplusplus || defined _MSC_VER)",
          "297: static int",
          "298: YYID (int yyi)",
          "299: #else",
          "300: static int",
          "301: YYID (yyi)",
          "302:     int yyi;",
          "303: #endif",
          "304: {",
          "305:   return yyi;",
          "306: }",
          "307: #endif",
          "309: #if ! defined yyoverflow || YYERROR_VERBOSE",
          "313: # ifdef YYSTACK_USE_ALLOCA",
          "314: #  if YYSTACK_USE_ALLOCA",
          "315: #   ifdef __GNUC__",
          "316: #    define YYSTACK_ALLOC __builtin_alloca",
          "317: #   elif defined __BUILTIN_VA_ARG_INCR",
          "319: #   elif defined _AIX",
          "320: #    define YYSTACK_ALLOC __alloca",
          "321: #   elif defined _MSC_VER",
          "323: #    define alloca _alloca",
          "324: #   else",
          "325: #    define YYSTACK_ALLOC alloca",
          "326: #    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \\",
          "327:      || defined __cplusplus || defined _MSC_VER)",
          "330: #     ifndef EXIT_SUCCESS",
          "331: #      define EXIT_SUCCESS 0",
          "332: #     endif",
          "333: #    endif",
          "334: #   endif",
          "335: #  endif",
          "336: # endif",
          "338: # ifdef YYSTACK_ALLOC",
          "340: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))",
          "341: #  ifndef YYSTACK_ALLOC_MAXIMUM",
          "343:        and a page size can be as small as 4096 bytes.  So we cannot safely",
          "344:        invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number",
          "347: #  endif",
          "348: # else",
          "349: #  define YYSTACK_ALLOC YYMALLOC",
          "350: #  define YYSTACK_FREE YYFREE",
          "351: #  ifndef YYSTACK_ALLOC_MAXIMUM",
          "352: #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM",
          "353: #  endif",
          "354: #  if (defined __cplusplus && ! defined EXIT_SUCCESS \\",
          "355:        && ! ((defined YYMALLOC || defined malloc) \\",
          "356:       && (defined YYFREE || defined free)))",
          "358: #   ifndef EXIT_SUCCESS",
          "359: #    define EXIT_SUCCESS 0",
          "360: #   endif",
          "361: #  endif",
          "362: #  ifndef YYMALLOC",
          "363: #   define YYMALLOC malloc",
          "364: #   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \\",
          "365:      || defined __cplusplus || defined _MSC_VER)",
          "367: #   endif",
          "368: #  endif",
          "369: #  ifndef YYFREE",
          "370: #   define YYFREE free",
          "371: #   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \\",
          "372:      || defined __cplusplus || defined _MSC_VER)",
          "374: #   endif",
          "375: #  endif",
          "376: # endif",
          "380: #if (! defined yyoverflow \\",
          "381:      && (! defined __cplusplus \\",
          "382:   || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))",
          "385: union yyalloc",
          "386: {",
          "387:   yytype_int16 yyss_alloc;",
          "388:   YYSTYPE yyvs_alloc;",
          "389: };",
          "392: # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)",
          "396: # define YYSTACK_BYTES(N) \\",
          "397:      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\",
          "398:       + YYSTACK_GAP_MAXIMUM)",
          "400: # define YYCOPY_NEEDED 1",
          "403:    local variables YYSIZE and YYSTACKSIZE give the old and new number of",
          "404:    elements in the stack, and YYPTR gives the new location of the",
          "405:    stack.  Advance YYPTR to a properly aligned location for the next",
          "407: # define YYSTACK_RELOCATE(Stack_alloc, Stack)    \\",
          "408:     do         \\",
          "409:       {         \\",
          "410:  YYSIZE_T yynewbytes;      \\",
          "411:  YYCOPY (&yyptr->Stack_alloc, Stack, yysize);   \\",
          "412:  Stack = &yyptr->Stack_alloc;     \\",
          "413:  yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\",
          "414:  yyptr += yynewbytes / sizeof (*yyptr);    \\",
          "415:       }         \\",
          "416:     while (YYID (0))",
          "418: #endif",
          "420: #if defined YYCOPY_NEEDED && YYCOPY_NEEDED",
          "423: # ifndef YYCOPY",
          "424: #  if defined __GNUC__ && 1 < __GNUC__",
          "425: #   define YYCOPY(Dst, Src, Count) \\",
          "426:       __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))",
          "427: #  else",
          "428: #   define YYCOPY(Dst, Src, Count)              \\",
          "429:       do                                        \\",
          "430:         {                                       \\",
          "431:           YYSIZE_T yyi;                         \\",
          "432:           for (yyi = 0; yyi < (Count); yyi++)   \\",
          "433:             (Dst)[yyi] = (Src)[yyi];            \\",
          "434:         }                                       \\",
          "435:       while (YYID (0))",
          "436: #  endif",
          "437: # endif",
          "441: #define YYFINAL  24",
          "443: #define YYLAST   33",
          "446: #define YYNTOKENS  21",
          "448: #define YYNNTS  4",
          "450: #define YYNRULES  24",
          "452: #define YYNSTATES  37",
          "455: #define YYUNDEFTOK  2",
          "456: #define YYMAXUTOK   275",
          "458: #define YYTRANSLATE(YYX)      \\",
          "459:   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)",
          "462: static const yytype_uint8 yytranslate[] =",
          "463: {",
          "464:        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "465:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "466:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "467:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "468:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "469:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "470:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "471:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "472:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "473:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "474:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "475:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "476:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "477:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "478:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "479:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "480:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "481:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "482:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "483:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "484:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "485:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "486:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "487:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "488:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "489:        2,     2,     2,     2,     2,     2,     1,     2,     3,     4,",
          "490:        5,     6,     7,     8,     9,    10,    11,    12,    13,    14,",
          "491:       15,    16,    17,    18,    19,    20",
          "492: };",
          "494: #if YYDEBUG",
          "497: static const yytype_uint8 yyprhs[] =",
          "498: {",
          "499:        0,     0,     3,     5,     6,     8,    11,    15,    20,    25,",
          "500:       31,    35,    41,    45,    48,    51,    54,    56,    59,    61,",
          "501:       63,    65,    67,    69,    71",
          "502: };",
          "505: static const yytype_int8 yyrhs[] =",
          "506: {",
          "507:       22,     0,    -1,    23,    -1,    -1,    24,    -1,    23,    24,",
          "508:       -1,    18,    10,    14,    -1,    18,    10,    12,    14,    -1,",
          "509:       13,    18,    10,    14,    -1,    13,    18,    10,    12,    14,",
          "510:       -1,    18,    11,    18,    -1,    18,    11,    18,    12,    14,",
          "511:       -1,    18,    12,    14,    -1,     6,    19,    -1,     3,    19,",
          "512:       -1,     5,    19,    -1,     4,    -1,     4,    19,    -1,    17,",
          "513:       -1,    16,    -1,    15,    -1,     7,    -1,     8,    -1,    14,",
          "514:       -1,    18,    -1",
          "515: };",
          "518: static const yytype_uint8 yyrline[] =",
          "519: {",
          "520:        0,    76,    76,    77,    81,    82,    86,    91,    96,   107,",
          "521:      118,   123,   129,   135,   140,   145,   150,   154,   159,   160,",
          "522:      161,   162,   163,   164,   165",
          "523: };",
          "524: #endif",
          "526: #if YYDEBUG || YYERROR_VERBOSE || 1",
          "529: static const char *const yytname[] =",
          "530: {",
          "531:   \"$end\", \"error\", \"$undefined\", \"\\\"eval\\\"\", \"\\\"run\\\"\", \"\\\"shell\\\"\",",
          "532:   \"\\\"if (condition)\\\"\", \"\\\"truthy (true, on, yes or enabled)\\\"\",",
          "533:   \"\\\"falsy (false, off, no or disabled)\\\"\",",
          "534:   \"\\\"string (some input, perhaps)\\\"\", \"\\\": (colon)\\\"\",",
          "535:   \"\\\":: (double colon)\\\"\", \"\\\"# (pound sign)\\\"\", \"\\\"protocol (file://)\\\"\",",
          "536:   \"\\\"digits (numbers)\\\"\", \"\\\"literal (string)\\\"\", \"\\\"address\\\"\",",
          "537:   \"\\\"opcode\\\"\", \"\\\"identifier (command or function name)\\\"\",",
          "538:   \"\\\"input (input string or data)\\\"\", \"\\\"input\\\"\", \"$accept\", \"input\",",
          "539:   \"parameters\", \"parameter\", YY_NULL",
          "540: };",
          "541: #endif",
          "543: # ifdef YYPRINT",
          "546: static const yytype_uint16 yytoknum[] =",
          "547: {",
          "548:        0,   256,   257,   258,   259,   260,   261,   262,   263,   264,",
          "549:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,",
          "550:      275",
          "551: };",
          "552: # endif",
          "555: static const yytype_uint8 yyr1[] =",
          "556: {",
          "557:        0,    21,    22,    22,    23,    23,    24,    24,    24,    24,",
          "558:       24,    24,    24,    24,    24,    24,    24,    24,    24,    24,",
          "559:       24,    24,    24,    24,    24",
          "560: };",
          "563: static const yytype_uint8 yyr2[] =",
          "564: {",
          "565:        0,     2,     1,     0,     1,     2,     3,     4,     4,     5,",
          "566:        3,     5,     3,     2,     2,     2,     1,     2,     1,     1,",
          "567:        1,     1,     1,     1,     1",
          "568: };",
          "571:    Performed when YYTABLE doesn't specify something else to do.  Zero",
          "573: static const yytype_uint8 yydefact[] =",
          "574: {",
          "575:        3,     0,    16,     0,     0,    21,    22,     0,    23,    20,",
          "576:       19,    18,    24,     0,     2,     4,    14,    17,    15,    13,",
          "577:        0,     0,     0,     0,     1,     5,     0,     0,     6,    10,",
          "578:       12,     0,     8,     7,     0,     9,    11",
          "579: };",
          "582: static const yytype_int8 yydefgoto[] =",
          "583: {",
          "584:       -1,    13,    14,    15",
          "585: };",
          "589: #define YYPACT_NINF -11",
          "590: static const yytype_int8 yypact[] =",
          "591: {",
          "592:       -3,   -10,     1,     2,     3,   -11,   -11,     6,   -11,   -11,",
          "593:      -11,   -11,    -4,    23,    -3,   -11,   -11,   -11,   -11,   -11,",
          "594:       15,     4,     8,    13,   -11,   -11,     5,    14,   -11,    17,",
          "595:      -11,    16,   -11,   -11,    18,   -11,   -11",
          "596: };",
          "599: static const yytype_int8 yypgoto[] =",
          "600: {",
          "601:      -11,   -11,   -11,    19",
          "602: };",
          "605:    positive, shift that token.  If negative, reduce the rule which",
          "607: #define YYTABLE_NINF -1",
          "608: static const yytype_uint8 yytable[] =",
          "609: {",
          "610:        1,     2,     3,     4,     5,     6,    21,    22,    23,    16,",
          "611:        7,     8,     9,    10,    11,    12,    27,    31,    28,    32,",
          "612:       17,    18,    19,    24,    20,    26,    29,    30,    33,    34,",
          "613:       35,     0,    36,    25",
          "614: };",
          "616: #define yypact_value_is_default(Yystate) \\",
          "617:   (!!((Yystate) == (-11)))",
          "619: #define yytable_value_is_error(Yytable_value) \\",
          "620:   YYID (0)",
          "622: static const yytype_int8 yycheck[] =",
          "623: {",
          "624:        3,     4,     5,     6,     7,     8,    10,    11,    12,    19,",
          "625:       13,    14,    15,    16,    17,    18,    12,    12,    14,    14,",
          "626:       19,    19,    19,     0,    18,    10,    18,    14,    14,    12,",
          "627:       14,    -1,    14,    14",
          "628: };",
          "632: static const yytype_uint8 yystos[] =",
          "633: {",
          "634:        0,     3,     4,     5,     6,     7,     8,    13,    14,    15,",
          "635:       16,    17,    18,    22,    23,    24,    19,    19,    19,    19,",
          "636:       18,    10,    11,    12,     0,    24,    10,    12,    14,    18,",
          "637:       14,    12,    14,    14,    12,    14,    14",
          "638: };",
          "640: #define yyerrok  (yyerrstatus = 0)",
          "641: #define yyclearin (yychar = YYEMPTY)",
          "642: #define YYEMPTY  (-2)",
          "643: #define YYEOF  0",
          "645: #define YYACCEPT goto yyacceptlab",
          "646: #define YYABORT  goto yyabortlab",
          "647: #define YYERROR  goto yyerrorlab",
          "651:    to ease the transition to the new meaning of YYERROR, for GCC.",
          "652:    Once GCC version 2 has supplanted version 1, this can go.  However,",
          "653:    YYFAIL appears to be in use.  Nevertheless, it is formally deprecated",
          "654:    in Bison 2.4.2's NEWS entry, where a plan to phase it out is",
          "657: #define YYFAIL  goto yyerrlab",
          "658: #if defined YYFAIL",
          "660:      -Wunused-macros.  Normally we don't worry about that warning, but",
          "661:      some users do, and we want to make it easy for users to remove",
          "663: #endif",
          "665: #define YYRECOVERING()  (!!yyerrstatus)",
          "667: #define YYBACKUP(Token, Value)                                  \\",
          "668: do                                                              \\",
          "669:   if (yychar == YYEMPTY)                                        \\",
          "670:     {                                                           \\",
          "671:       yychar = (Token);                                         \\",
          "672:       yylval = (Value);                                         \\",
          "673:       YYPOPSTACK (yylen);                                       \\",
          "674:       yystate = *yyssp;                                         \\",
          "675:       goto yybackup;                                            \\",
          "676:     }                                                           \\",
          "677:   else                                                          \\",
          "678:     {                                                           \\",
          "679:       yyerror (stack, scanner, YY_(\"syntax error: cannot back up\")); \\",
          "680:       YYERROR;       \\",
          "681:     }        \\",
          "682: while (YYID (0))",
          "685: #define YYTERROR 1",
          "686: #define YYERRCODE 256",
          "690: #ifndef YY_LOCATION_PRINT",
          "691: # define YY_LOCATION_PRINT(File, Loc) ((void) 0)",
          "692: #endif",
          "696: #ifdef YYLEX_PARAM",
          "697: # define YYLEX yylex (&yylval, YYLEX_PARAM)",
          "698: #else",
          "699: # define YYLEX yylex (&yylval, scanner)",
          "700: #endif",
          "703: #if YYDEBUG",
          "705: # ifndef YYFPRINTF",
          "707: #  define YYFPRINTF fprintf",
          "708: # endif",
          "710: # define YYDPRINTF(Args)   \\",
          "711: do {      \\",
          "712:   if (yydebug)     \\",
          "713:     YYFPRINTF Args;    \\",
          "714: } while (YYID (0))",
          "716: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)     \\",
          "717: do {           \\",
          "718:   if (yydebug)          \\",
          "719:     {           \\",
          "720:       YYFPRINTF (stderr, \"%s \", Title);       \\",
          "721:       yy_symbol_print (stderr,        \\",
          "722:     Type, Value, stack, scanner); \\",
          "723:       YYFPRINTF (stderr, \"\\n\");        \\",
          "724:     }           \\",
          "725: } while (YYID (0))",
          "729: | Print this symbol on YYOUTPUT.  |",
          "733: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "734:      || defined __cplusplus || defined _MSC_VER)",
          "735: static void",
          "736: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, phpdbg_param_t *stack, yyscan_t scanner)",
          "737: #else",
          "738: static void",
          "739: yy_symbol_value_print (yyoutput, yytype, yyvaluep, stack, scanner)",
          "740:     FILE *yyoutput;",
          "741:     int yytype;",
          "742:     YYSTYPE const * const yyvaluep;",
          "743:     phpdbg_param_t *stack;",
          "744:     yyscan_t scanner;",
          "745: #endif",
          "746: {",
          "747:   FILE *yyo = yyoutput;",
          "748:   YYUSE (yyo);",
          "749:   if (!yyvaluep)",
          "750:     return;",
          "751:   YYUSE (stack);",
          "752:   YYUSE (scanner);",
          "753: # ifdef YYPRINT",
          "754:   if (yytype < YYNTOKENS)",
          "755:     YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);",
          "756: # else",
          "757:   YYUSE (yyoutput);",
          "758: # endif",
          "759:   switch (yytype)",
          "760:     {",
          "761:       default:",
          "762:         break;",
          "763:     }",
          "764: }",
          "768: | Print this symbol on YYOUTPUT.  |",
          "771: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "772:      || defined __cplusplus || defined _MSC_VER)",
          "773: static void",
          "774: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, phpdbg_param_t *stack, yyscan_t scanner)",
          "775: #else",
          "776: static void",
          "777: yy_symbol_print (yyoutput, yytype, yyvaluep, stack, scanner)",
          "778:     FILE *yyoutput;",
          "779:     int yytype;",
          "780:     YYSTYPE const * const yyvaluep;",
          "781:     phpdbg_param_t *stack;",
          "782:     yyscan_t scanner;",
          "783: #endif",
          "784: {",
          "785:   if (yytype < YYNTOKENS)",
          "786:     YYFPRINTF (yyoutput, \"token %s (\", yytname[yytype]);",
          "787:   else",
          "788:     YYFPRINTF (yyoutput, \"nterm %s (\", yytname[yytype]);",
          "790:   yy_symbol_value_print (yyoutput, yytype, yyvaluep, stack, scanner);",
          "791:   YYFPRINTF (yyoutput, \")\");",
          "792: }",
          "795: | yy_stack_print -- Print the state stack from its BOTTOM up to its |",
          "796: | TOP (included).                                                   |",
          "799: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "800:      || defined __cplusplus || defined _MSC_VER)",
          "801: static void",
          "802: yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)",
          "803: #else",
          "804: static void",
          "805: yy_stack_print (yybottom, yytop)",
          "806:     yytype_int16 *yybottom;",
          "807:     yytype_int16 *yytop;",
          "808: #endif",
          "809: {",
          "810:   YYFPRINTF (stderr, \"Stack now\");",
          "811:   for (; yybottom <= yytop; yybottom++)",
          "812:     {",
          "813:       int yybot = *yybottom;",
          "814:       YYFPRINTF (stderr, \" %d\", yybot);",
          "815:     }",
          "816:   YYFPRINTF (stderr, \"\\n\");",
          "817: }",
          "819: # define YY_STACK_PRINT(Bottom, Top)    \\",
          "820: do {        \\",
          "821:   if (yydebug)       \\",
          "822:     yy_stack_print ((Bottom), (Top));    \\",
          "823: } while (YYID (0))",
          "827: | Report that the YYRULE is going to be reduced.  |",
          "830: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "831:      || defined __cplusplus || defined _MSC_VER)",
          "832: static void",
          "833: yy_reduce_print (YYSTYPE *yyvsp, int yyrule, phpdbg_param_t *stack, yyscan_t scanner)",
          "834: #else",
          "835: static void",
          "836: yy_reduce_print (yyvsp, yyrule, stack, scanner)",
          "837:     YYSTYPE *yyvsp;",
          "838:     int yyrule;",
          "839:     phpdbg_param_t *stack;",
          "840:     yyscan_t scanner;",
          "841: #endif",
          "842: {",
          "843:   int yynrhs = yyr2[yyrule];",
          "844:   int yyi;",
          "845:   unsigned long int yylno = yyrline[yyrule];",
          "846:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",",
          "847:       yyrule - 1, yylno);",
          "849:   for (yyi = 0; yyi < yynrhs; yyi++)",
          "850:     {",
          "851:       YYFPRINTF (stderr, \"   $%d = \", yyi + 1);",
          "852:       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],",
          "853:          &(yyvsp[(yyi + 1) - (yynrhs)])",
          "854:                   , stack, scanner);",
          "855:       YYFPRINTF (stderr, \"\\n\");",
          "856:     }",
          "857: }",
          "859: # define YY_REDUCE_PRINT(Rule)  \\",
          "860: do {     \\",
          "861:   if (yydebug)    \\",
          "862:     yy_reduce_print (yyvsp, Rule, stack, scanner); \\",
          "863: } while (YYID (0))",
          "867: int yydebug;",
          "869: # define YYDPRINTF(Args)",
          "870: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)",
          "871: # define YY_STACK_PRINT(Bottom, Top)",
          "872: # define YY_REDUCE_PRINT(Rule)",
          "877: #ifndef YYINITDEPTH",
          "878: # define YYINITDEPTH 200",
          "879: #endif",
          "882:    if the built-in stack extension method is used).",
          "884:    Do not make this value too large; the results are undefined if",
          "885:    YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)",
          "888: #ifndef YYMAXDEPTH",
          "889: # define YYMAXDEPTH 10000",
          "890: #endif",
          "893: #if YYERROR_VERBOSE",
          "895: # ifndef yystrlen",
          "896: #  if defined __GLIBC__ && defined _STRING_H",
          "897: #   define yystrlen strlen",
          "898: #  else",
          "900: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "901:      || defined __cplusplus || defined _MSC_VER)",
          "902: static YYSIZE_T",
          "903: yystrlen (const char *yystr)",
          "904: #else",
          "905: static YYSIZE_T",
          "906: yystrlen (yystr)",
          "907:     const char *yystr;",
          "908: #endif",
          "909: {",
          "910:   YYSIZE_T yylen;",
          "911:   for (yylen = 0; yystr[yylen]; yylen++)",
          "912:     continue;",
          "913:   return yylen;",
          "914: }",
          "915: #  endif",
          "916: # endif",
          "918: # ifndef yystpcpy",
          "919: #  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE",
          "920: #   define yystpcpy stpcpy",
          "921: #  else",
          "924: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "925:      || defined __cplusplus || defined _MSC_VER)",
          "926: static char *",
          "927: yystpcpy (char *yydest, const char *yysrc)",
          "928: #else",
          "929: static char *",
          "930: yystpcpy (yydest, yysrc)",
          "931:     char *yydest;",
          "932:     const char *yysrc;",
          "933: #endif",
          "934: {",
          "935:   char *yyd = yydest;",
          "936:   const char *yys = yysrc;",
          "938:   while ((*yyd++ = *yys++) != '\\0')",
          "939:     continue;",
          "941:   return yyd - 1;",
          "942: }",
          "943: #  endif",
          "944: # endif",
          "946: # ifndef yytnamerr",
          "948:    quotes and backslashes, so that it's suitable for yyerror.  The",
          "949:    heuristic is that double-quoting is unnecessary unless the string",
          "950:    contains an apostrophe, a comma, or backslash (other than",
          "951:    backslash-backslash).  YYSTR is taken from yytname.  If YYRES is",
          "952:    null, do not copy; instead, return the length of what the result",
          "954: static YYSIZE_T",
          "955: yytnamerr (char *yyres, const char *yystr)",
          "956: {",
          "957:   if (*yystr == '\"')",
          "958:     {",
          "959:       YYSIZE_T yyn = 0;",
          "960:       char const *yyp = yystr;",
          "962:       for (;;)",
          "963:  switch (*++yyp)",
          "964:    {",
          "965:    case '\\'':",
          "966:    case ',':",
          "967:      goto do_not_strip_quotes;",
          "969:    case '\\\\':",
          "970:      if (*++yyp != '\\\\')",
          "971:        goto do_not_strip_quotes;",
          "973:    default:",
          "974:      if (yyres)",
          "975:        yyres[yyn] = *yyp;",
          "976:      yyn++;",
          "977:      break;",
          "979:    case '\"':",
          "980:      if (yyres)",
          "981:        yyres[yyn] = '\\0';",
          "982:      return yyn;",
          "983:    }",
          "984:     do_not_strip_quotes: ;",
          "985:     }",
          "987:   if (! yyres)",
          "988:     return yystrlen (yystr);",
          "990:   return yystpcpy (yyres, yystr) - yyres;",
          "991: }",
          "992: # endif",
          "995:    about the unexpected token YYTOKEN for the state stack whose top is",
          "996:    YYSSP.",
          "998:    Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is",
          "999:    not large enough to hold the message.  In that case, also set",
          "1002: static int",
          "1003: yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,",
          "1004:                 yytype_int16 *yyssp, int yytoken)",
          "1005: {",
          "1006:   YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);",
          "1007:   YYSIZE_T yysize = yysize0;",
          "1008:   enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };",
          "1010:   const char *yyformat = YY_NULL;",
          "1012:   char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];",
          "1015:   int yycount = 0;",
          "1018:      - Assume YYFAIL is not used.  It's too flawed to consider.  See",
          "1019:        <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>",
          "1020:        for details.  YYERROR is fine as it does not invoke this",
          "1021:        function.",
          "1022:      - If this state is a consistent state with a default action, then",
          "1023:        the only way this function was invoked is if the default action",
          "1024:        is an error action.  In that case, don't check for expected",
          "1025:        tokens because there are none.",
          "1026:      - The only way there can be no lookahead present (in yychar) is if",
          "1027:        this state is a consistent state with a default action.  Thus,",
          "1028:        detecting the absence of a lookahead is sufficient to determine",
          "1029:        that there is no unexpected or expected token to report.  In that",
          "1030:        case, just report a simple \"syntax error\".",
          "1031:      - Don't assume there isn't a lookahead just because this state is a",
          "1032:        consistent state with a default action.  There might have been a",
          "1033:        previous inconsistent state, consistent state with a non-default",
          "1034:        action, or user semantic action that manipulated yychar.",
          "1035:      - Of course, the expected token list depends on states to have",
          "1036:        correct lookahead information, and it depends on the parser not",
          "1037:        to perform extra reductions after fetching a lookahead from the",
          "1038:        scanner and before detecting a syntax error.  Thus, state merging",
          "1039:        (from LALR or IELR) and default reductions corrupt the expected",
          "1040:        token list.  However, the list is correct for canonical LR with",
          "1041:        one exception: it will still contain any token that will not be",
          "1042:        accepted due to an error action in a later state.",
          "1044:   if (yytoken != YYEMPTY)",
          "1045:     {",
          "1046:       int yyn = yypact[*yyssp];",
          "1047:       yyarg[yycount++] = yytname[yytoken];",
          "1048:       if (!yypact_value_is_default (yyn))",
          "1049:         {",
          "1051:              YYCHECK.  In other words, skip the first -YYN actions for",
          "1053:           int yyxbegin = yyn < 0 ? -yyn : 0;",
          "1055:           int yychecklim = YYLAST - yyn + 1;",
          "1056:           int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;",
          "1057:           int yyx;",
          "1059:           for (yyx = yyxbegin; yyx < yyxend; ++yyx)",
          "1060:             if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR",
          "1061:                 && !yytable_value_is_error (yytable[yyx + yyn]))",
          "1062:               {",
          "1063:                 if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)",
          "1064:                   {",
          "1065:                     yycount = 1;",
          "1066:                     yysize = yysize0;",
          "1067:                     break;",
          "1068:                   }",
          "1069:                 yyarg[yycount++] = yytname[yyx];",
          "1070:                 {",
          "1071:                   YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);",
          "1072:                   if (! (yysize <= yysize1",
          "1073:                          && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "1074:                     return 2;",
          "1075:                   yysize = yysize1;",
          "1076:                 }",
          "1077:               }",
          "1078:         }",
          "1079:     }",
          "1081:   switch (yycount)",
          "1082:     {",
          "1083: # define YYCASE_(N, S)                      \\",
          "1084:       case N:                               \\",
          "1085:         yyformat = S;                       \\",
          "1086:       break",
          "1087:       YYCASE_(0, YY_(\"syntax error\"));",
          "1088:       YYCASE_(1, YY_(\"syntax error, unexpected %s\"));",
          "1089:       YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));",
          "1090:       YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));",
          "1091:       YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));",
          "1092:       YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));",
          "1093: # undef YYCASE_",
          "1094:     }",
          "1096:   {",
          "1097:     YYSIZE_T yysize1 = yysize + yystrlen (yyformat);",
          "1098:     if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "1099:       return 2;",
          "1100:     yysize = yysize1;",
          "1101:   }",
          "1103:   if (*yymsg_alloc < yysize)",
          "1104:     {",
          "1106:       if (! (yysize <= *yymsg_alloc",
          "1107:              && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))",
          "1109:       return 1;",
          "1110:     }",
          "1113:      Don't have undefined behavior even if the translation",
          "1115:   {",
          "1116:     char *yyp = *yymsg;",
          "1117:     int yyi = 0;",
          "1118:     while ((*yyp = *yyformat) != '\\0')",
          "1119:       if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)",
          "1120:         {",
          "1121:           yyp += yytnamerr (yyp, yyarg[yyi++]);",
          "1122:           yyformat += 2;",
          "1123:         }",
          "1124:       else",
          "1125:         {",
          "1126:           yyp++;",
          "1127:           yyformat++;",
          "1128:         }",
          "1129:   }",
          "1130:   return 0;",
          "1131: }",
          "1135: | Release the memory associated to this symbol.  |",
          "1139: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1140:      || defined __cplusplus || defined _MSC_VER)",
          "1141: static void",
          "1142: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, phpdbg_param_t *stack, yyscan_t scanner)",
          "1143: #else",
          "1144: static void",
          "1145: yydestruct (yymsg, yytype, yyvaluep, stack, scanner)",
          "1146:     const char *yymsg;",
          "1147:     int yytype;",
          "1148:     YYSTYPE *yyvaluep;",
          "1149:     phpdbg_param_t *stack;",
          "1150:     yyscan_t scanner;",
          "1151: #endif",
          "1152: {",
          "1153:   YYUSE (yyvaluep);",
          "1154:   YYUSE (stack);",
          "1155:   YYUSE (scanner);",
          "1157:   if (!yymsg)",
          "1158:     yymsg = \"Deleting\";",
          "1159:   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);",
          "1161:   switch (yytype)",
          "1162:     {",
          "1164:       default:",
          "1165:         break;",
          "1166:     }",
          "1167: }",
          "1173: | yyparse.  |",
          "1176: #ifdef YYPARSE_PARAM",
          "1177: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1178:      || defined __cplusplus || defined _MSC_VER)",
          "1179: int",
          "1180: yyparse (void *YYPARSE_PARAM)",
          "1181: #else",
          "1182: int",
          "1183: yyparse (YYPARSE_PARAM)",
          "1184:     void *YYPARSE_PARAM;",
          "1185: #endif",
          "1187: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1188:      || defined __cplusplus || defined _MSC_VER)",
          "1189: int",
          "1190: yyparse (phpdbg_param_t *stack, yyscan_t scanner)",
          "1191: #else",
          "1192: int",
          "1193: yyparse (stack, scanner)",
          "1194:     phpdbg_param_t *stack;",
          "1195:     yyscan_t scanner;",
          "1196: #endif",
          "1197: #endif",
          "1198: {",
          "1200: int yychar;",
          "1203: #if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__",
          "1205: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\",
          "1206:     _Pragma (\"GCC diagnostic push\") \\",
          "1207:     _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\",
          "1208:     _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")",
          "1209: # define YY_IGNORE_MAYBE_UNINITIALIZED_END \\",
          "1210:     _Pragma (\"GCC diagnostic pop\")",
          "1211: #else",
          "1214: static YYSTYPE yyval_default;",
          "1215: # define YY_INITIAL_VALUE(Value) = Value",
          "1216: #endif",
          "1217: #ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1218: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1219: # define YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "1220: #endif",
          "1221: #ifndef YY_INITIAL_VALUE",
          "1223: #endif",
          "1226: YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);",
          "1229:     int yynerrs;",
          "1231:     int yystate;",
          "1233:     int yyerrstatus;",
          "1236:        `yyss': related to states.",
          "1237:        `yyvs': related to semantic values.",
          "1239:        Refer to the stacks through separate pointers, to allow yyoverflow",
          "1243:     yytype_int16 yyssa[YYINITDEPTH];",
          "1244:     yytype_int16 *yyss;",
          "1245:     yytype_int16 *yyssp;",
          "1248:     YYSTYPE yyvsa[YYINITDEPTH];",
          "1249:     YYSTYPE *yyvs;",
          "1250:     YYSTYPE *yyvsp;",
          "1252:     YYSIZE_T yystacksize;",
          "1254:   int yyn;",
          "1255:   int yyresult;",
          "1257:   int yytoken = 0;",
          "1260:   YYSTYPE yyval;",
          "1262: #if YYERROR_VERBOSE",
          "1264:   char yymsgbuf[128];",
          "1265:   char *yymsg = yymsgbuf;",
          "1266:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;",
          "1267: #endif",
          "1269: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))",
          "1273:   int yylen = 0;",
          "1275:   yyssp = yyss = yyssa;",
          "1276:   yyvsp = yyvs = yyvsa;",
          "1277:   yystacksize = YYINITDEPTH;",
          "1279:   YYDPRINTF ((stderr, \"Starting parse\\n\"));",
          "1281:   yystate = 0;",
          "1282:   yyerrstatus = 0;",
          "1283:   yynerrs = 0;",
          "1285:   goto yysetstate;",
          "1288: | yynewstate -- Push a new state, which is found in yystate.  |",
          "1290:  yynewstate:",
          "1293:   yyssp++;",
          "1295:  yysetstate:",
          "1298:   if (yyss + yystacksize - 1 <= yyssp)",
          "1299:     {",
          "1301:       YYSIZE_T yysize = yyssp - yyss + 1;",
          "1303: #ifdef yyoverflow",
          "1304:       {",
          "1306:     these so that the &'s don't force the real ones into",
          "1308:  YYSTYPE *yyvs1 = yyvs;",
          "1309:  yytype_int16 *yyss1 = yyss;",
          "1312:     data in use in that stack, in bytes.  This used to be a",
          "1313:     conditional around just the two extra args, but that might",
          "1315:  yyoverflow (YY_(\"memory exhausted\"),",
          "1316:       &yyss1, yysize * sizeof (*yyssp),",
          "1317:       &yyvs1, yysize * sizeof (*yyvsp),",
          "1318:       &yystacksize);",
          "1320:  yyss = yyss1;",
          "1321:  yyvs = yyvs1;",
          "1322:       }",
          "1324: # ifndef YYSTACK_RELOCATE",
          "1325:       goto yyexhaustedlab;",
          "1326: # else",
          "1328:       if (YYMAXDEPTH <= yystacksize)",
          "1329:  goto yyexhaustedlab;",
          "1330:       yystacksize *= 2;",
          "1331:       if (YYMAXDEPTH < yystacksize)",
          "1332:  yystacksize = YYMAXDEPTH;",
          "1334:       {",
          "1335:  yytype_int16 *yyss1 = yyss;",
          "1336:  union yyalloc *yyptr =",
          "1337:    (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));",
          "1338:  if (! yyptr)",
          "1339:    goto yyexhaustedlab;",
          "1340:  YYSTACK_RELOCATE (yyss_alloc, yyss);",
          "1341:  YYSTACK_RELOCATE (yyvs_alloc, yyvs);",
          "1342: #  undef YYSTACK_RELOCATE",
          "1343:  if (yyss1 != yyssa)",
          "1344:    YYSTACK_FREE (yyss1);",
          "1345:       }",
          "1346: # endif",
          "1349:       yyssp = yyss + yysize - 1;",
          "1350:       yyvsp = yyvs + yysize - 1;",
          "1352:       YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",",
          "1353:     (unsigned long int) yystacksize));",
          "1355:       if (yyss + yystacksize - 1 <= yyssp)",
          "1356:  YYABORT;",
          "1357:     }",
          "1359:   YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));",
          "1361:   if (yystate == YYFINAL)",
          "1362:     YYACCEPT;",
          "1364:   goto yybackup;",
          "1367: | yybackup.  |",
          "1369: yybackup:",
          "1375:   yyn = yypact[yystate];",
          "1376:   if (yypact_value_is_default (yyn))",
          "1377:     goto yydefault;",
          "1382:   if (yychar == YYEMPTY)",
          "1383:     {",
          "1384:       YYDPRINTF ((stderr, \"Reading a token: \"));",
          "1385:       yychar = YYLEX;",
          "1386:     }",
          "1388:   if (yychar <= YYEOF)",
          "1389:     {",
          "1390:       yychar = yytoken = YYEOF;",
          "1391:       YYDPRINTF ((stderr, \"Now at end of input.\\n\"));",
          "1392:     }",
          "1393:   else",
          "1394:     {",
          "1395:       yytoken = YYTRANSLATE (yychar);",
          "1396:       YY_SYMBOL_PRINT (\"Next token is\", yytoken, &yylval, &yylloc);",
          "1397:     }",
          "1401:   yyn += yytoken;",
          "1402:   if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)",
          "1403:     goto yydefault;",
          "1404:   yyn = yytable[yyn];",
          "1405:   if (yyn <= 0)",
          "1406:     {",
          "1407:       if (yytable_value_is_error (yyn))",
          "1408:         goto yyerrlab;",
          "1409:       yyn = -yyn;",
          "1410:       goto yyreduce;",
          "1411:     }",
          "1415:   if (yyerrstatus)",
          "1416:     yyerrstatus--;",
          "1419:   YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);",
          "1422:   yychar = YYEMPTY;",
          "1424:   yystate = yyn;",
          "1425:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1427:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "1429:   goto yynewstate;",
          "1433: | yydefault -- do the default action for the current state.  |",
          "1435: yydefault:",
          "1436:   yyn = yydefact[yystate];",
          "1437:   if (yyn == 0)",
          "1438:     goto yyerrlab;",
          "1439:   goto yyreduce;",
          "1443: | yyreduce -- Do a reduction.  |",
          "1445: yyreduce:",
          "1447:   yylen = yyr2[yyn];",
          "1450:      `$$ = $1'.",
          "1452:      Otherwise, the following line sets YYVAL to garbage.",
          "1453:      This behavior is undocumented and Bison",
          "1454:      users should not rely upon it.  Assigning to YYVAL",
          "1455:      unconditionally makes the parser a bit smaller, and it avoids a",
          "1457:   yyval = yyvsp[1-yylen];",
          "1460:   YY_REDUCE_PRINT (yyn);",
          "1461:   switch (yyn)",
          "1462:     {",
          "1463:         case 4:",
          "1465: #line 81 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1466:     { phpdbg_stack_push(stack, &(yyvsp[(1) - (1)])); }",
          "1467:     break;",
          "1469:   case 5:",
          "1471: #line 82 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1472:     { phpdbg_stack_push(stack, &(yyvsp[(2) - (2)])); }",
          "1473:     break;",
          "1475:   case 6:",
          "1477: #line 86 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1478:     {",
          "1479:   (yyval).type = FILE_PARAM;",
          "1480:   (yyval).file.name = (yyvsp[(2) - (3)]).str;",
          "1481:   (yyval).file.line = (yyvsp[(3) - (3)]).num;",
          "1482:  }",
          "1483:     break;",
          "1485:   case 7:",
          "1487: #line 91 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1488:     {",
          "1489:   (yyval).type = NUMERIC_FILE_PARAM;",
          "1490:   (yyval).file.name = (yyvsp[(1) - (4)]).str;",
          "1491:   (yyval).file.line = (yyvsp[(4) - (4)]).num;",
          "1492:  }",
          "1493:     break;",
          "1495:   case 8:",
          "1497: #line 96 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1498:     {",
          "1499:   (yyval).type = FILE_PARAM;",
          "1500:   (yyval).file.name = malloc((yyvsp[(1) - (4)]).len +",
          "1501:          (yyvsp[(2) - (4)]).len + 1);",
          "1502:   if ((yyval).file.name) {",
          "1503:    memcpy(&(yyval).file.name[0], (yyvsp[(1) - (4)]).str, (yyvsp[(1) - (4)]).len);",
          "1504:    memcpy(&(yyval).file.name[(yyvsp[(1) - (4)]).len], (yyvsp[(2) - (4)]).str, (yyvsp[(2) - (4)]).len);",
          "1505:    (yyval).file.name[(yyvsp[(1) - (4)]).len + (yyvsp[(2) - (4)]).len] = '\\0';",
          "1506:   }",
          "1507:   (yyval).file.line = (yyvsp[(4) - (4)]).num;",
          "1508:  }",
          "1509:     break;",
          "1511:   case 9:",
          "1513: #line 107 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1514:     {",
          "1515:   (yyval).type = NUMERIC_FILE_PARAM;",
          "1516:   (yyval).file.name = malloc((yyvsp[(1) - (5)]).len +",
          "1517:          (yyvsp[(2) - (5)]).len + 1);",
          "1518:   if ((yyval).file.name) {",
          "1519:    memcpy(&(yyval).file.name[0], (yyvsp[(1) - (5)]).str, (yyvsp[(1) - (5)]).len);",
          "1520:    memcpy(&(yyval).file.name[(yyvsp[(1) - (5)]).len], (yyvsp[(2) - (5)]).str, (yyvsp[(2) - (5)]).len);",
          "1521:    (yyval).file.name[(yyvsp[(1) - (5)]).len + (yyvsp[(2) - (5)]).len] = '\\0';",
          "1522:   }",
          "1523:   (yyval).file.line = (yyvsp[(5) - (5)]).num;",
          "1524:  }",
          "1525:     break;",
          "1527:   case 10:",
          "1529: #line 118 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1530:     {",
          "1531:   (yyval).type = METHOD_PARAM;",
          "1532:   (yyval).method.class = (yyvsp[(1) - (3)]).str;",
          "1533:   (yyval).method.name = (yyvsp[(3) - (3)]).str;",
          "1534:  }",
          "1535:     break;",
          "1537:   case 11:",
          "1539: #line 123 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1540:     {",
          "1541:   (yyval).type = NUMERIC_METHOD_PARAM;",
          "1542:   (yyval).method.class = (yyvsp[(1) - (5)]).str;",
          "1543:   (yyval).method.name = (yyvsp[(3) - (5)]).str;",
          "1544:   (yyval).num = (yyvsp[(5) - (5)]).num;",
          "1545:  }",
          "1546:     break;",
          "1548:   case 12:",
          "1550: #line 129 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1551:     {",
          "1552:   (yyval).type = NUMERIC_FUNCTION_PARAM;",
          "1553:   (yyval).str = (yyvsp[(1) - (3)]).str;",
          "1554:   (yyval).len = (yyvsp[(1) - (3)]).len;",
          "1555:   (yyval).num = (yyvsp[(3) - (3)]).num;",
          "1556:  }",
          "1557:     break;",
          "1559:   case 13:",
          "1561: #line 135 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1562:     {",
          "1563:   (yyval).type = COND_PARAM;",
          "1564:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1565:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1566:  }",
          "1567:     break;",
          "1569:   case 14:",
          "1571: #line 140 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1572:     {",
          "1573:   (yyval).type = EVAL_PARAM;",
          "1574:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1575:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1576:  }",
          "1577:     break;",
          "1579:   case 15:",
          "1581: #line 145 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1582:     {",
          "1583:   (yyval).type = SHELL_PARAM;",
          "1584:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1585:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1586:  }",
          "1587:     break;",
          "1589:   case 16:",
          "1591: #line 150 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1592:     {",
          "1593:   (yyval).type = RUN_PARAM;",
          "1594:   (yyval).len = 0;",
          "1595:  }",
          "1596:     break;",
          "1598:   case 17:",
          "1600: #line 154 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1601:     {",
          "1602:   (yyval).type = RUN_PARAM;",
          "1603:   (yyval).str = (yyvsp[(2) - (2)]).str;",
          "1604:   (yyval).len = (yyvsp[(2) - (2)]).len;",
          "1605:  }",
          "1606:     break;",
          "1608:   case 18:",
          "1610: #line 159 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1611:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1612:     break;",
          "1614:   case 19:",
          "1616: #line 160 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1617:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1618:     break;",
          "1620:   case 20:",
          "1622: #line 161 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1623:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1624:     break;",
          "1626:   case 21:",
          "1628: #line 162 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1629:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1630:     break;",
          "1632:   case 22:",
          "1634: #line 163 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1635:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1636:     break;",
          "1638:   case 23:",
          "1640: #line 164 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1641:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1642:     break;",
          "1644:   case 24:",
          "1646: #line 165 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "1647:     { (yyval) = (yyvsp[(1) - (1)]); }",
          "1648:     break;",
          "1652: #line 1653 \"sapi/phpdbg/phpdbg_parser.c\"",
          "1653:       default: break;",
          "1654:     }",
          "1656:      that yytoken be updated with the new translation.  We take the",
          "1657:      approach of translating immediately before every use of yytoken.",
          "1658:      One alternative is translating here after every semantic action,",
          "1659:      but that translation would be missed if the semantic action invokes",
          "1660:      YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or",
          "1661:      if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an",
          "1662:      incorrect destructor might then be invoked immediately.  In the",
          "1663:      case of YYERROR or YYBACKUP, subsequent parser actions might lead",
          "1664:      to an incorrect destructor call or verbose syntax error message",
          "1666:   YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);",
          "1668:   YYPOPSTACK (yylen);",
          "1669:   yylen = 0;",
          "1670:   YY_STACK_PRINT (yyss, yyssp);",
          "1675:      that goes to, based on the state we popped back to and the rule",
          "1678:   yyn = yyr1[yyn];",
          "1680:   yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;",
          "1681:   if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)",
          "1682:     yystate = yytable[yystate];",
          "1683:   else",
          "1684:     yystate = yydefgoto[yyn - YYNTOKENS];",
          "1686:   goto yynewstate;",
          "1690: | yyerrlab -- here on detecting error |",
          "1692: yyerrlab:",
          "1695:   yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);",
          "1698:   if (!yyerrstatus)",
          "1699:     {",
          "1700:       ++yynerrs;",
          "1701: #if ! YYERROR_VERBOSE",
          "1702:       yyerror (stack, scanner, YY_(\"syntax error\"));",
          "1703: #else",
          "1704: # define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\",
          "1705:                                         yyssp, yytoken)",
          "1706:       {",
          "1707:         char const *yymsgp = YY_(\"syntax error\");",
          "1708:         int yysyntax_error_status;",
          "1709:         yysyntax_error_status = YYSYNTAX_ERROR;",
          "1710:         if (yysyntax_error_status == 0)",
          "1711:           yymsgp = yymsg;",
          "1712:         else if (yysyntax_error_status == 1)",
          "1713:           {",
          "1714:             if (yymsg != yymsgbuf)",
          "1715:               YYSTACK_FREE (yymsg);",
          "1716:             yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);",
          "1717:             if (!yymsg)",
          "1718:               {",
          "1719:                 yymsg = yymsgbuf;",
          "1720:                 yymsg_alloc = sizeof yymsgbuf;",
          "1721:                 yysyntax_error_status = 2;",
          "1722:               }",
          "1723:             else",
          "1724:               {",
          "1725:                 yysyntax_error_status = YYSYNTAX_ERROR;",
          "1726:                 yymsgp = yymsg;",
          "1727:               }",
          "1728:           }",
          "1729:         yyerror (stack, scanner, yymsgp);",
          "1730:         if (yysyntax_error_status == 2)",
          "1731:           goto yyexhaustedlab;",
          "1732:       }",
          "1733: # undef YYSYNTAX_ERROR",
          "1734: #endif",
          "1735:     }",
          "1739:   if (yyerrstatus == 3)",
          "1740:     {",
          "1744:       if (yychar <= YYEOF)",
          "1745:  {",
          "1747:    if (yychar == YYEOF)",
          "1748:      YYABORT;",
          "1749:  }",
          "1750:       else",
          "1751:  {",
          "1752:    yydestruct (\"Error: discarding\",",
          "1753:         yytoken, &yylval, stack, scanner);",
          "1754:    yychar = YYEMPTY;",
          "1755:  }",
          "1756:     }",
          "1760:   goto yyerrlab1;",
          "1764: | yyerrorlab -- error raised explicitly by YYERROR.  |",
          "1766: yyerrorlab:",
          "1769:      YYERROR and the label yyerrorlab therefore never appears in user",
          "1771:   if (/*CONSTCOND*/ 0)",
          "1772:      goto yyerrorlab;",
          "1776:   YYPOPSTACK (yylen);",
          "1777:   yylen = 0;",
          "1778:   YY_STACK_PRINT (yyss, yyssp);",
          "1779:   yystate = *yyssp;",
          "1780:   goto yyerrlab1;",
          "1784: | yyerrlab1 -- common code for both syntax error and YYERROR.  |",
          "1786: yyerrlab1:",
          "1789:   for (;;)",
          "1790:     {",
          "1791:       yyn = yypact[yystate];",
          "1792:       if (!yypact_value_is_default (yyn))",
          "1793:  {",
          "1794:    yyn += YYTERROR;",
          "1795:    if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)",
          "1796:      {",
          "1797:        yyn = yytable[yyn];",
          "1798:        if (0 < yyn)",
          "1799:   break;",
          "1800:      }",
          "1801:  }",
          "1804:       if (yyssp == yyss)",
          "1805:  YYABORT;",
          "1808:       yydestruct (\"Error: popping\",",
          "1809:     yystos[yystate], yyvsp, stack, scanner);",
          "1810:       YYPOPSTACK (1);",
          "1811:       yystate = *yyssp;",
          "1812:       YY_STACK_PRINT (yyss, yyssp);",
          "1813:     }",
          "1815:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1817:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "1821:   YY_SYMBOL_PRINT (\"Shifting\", yystos[yyn], yyvsp, yylsp);",
          "1823:   yystate = yyn;",
          "1824:   goto yynewstate;",
          "1828: | yyacceptlab -- YYACCEPT comes here.  |",
          "1830: yyacceptlab:",
          "1831:   yyresult = 0;",
          "1832:   goto yyreturn;",
          "1835: | yyabortlab -- YYABORT comes here.  |",
          "1837: yyabortlab:",
          "1838:   yyresult = 1;",
          "1839:   goto yyreturn;",
          "1841: #if !defined yyoverflow || YYERROR_VERBOSE",
          "1843: | yyexhaustedlab -- memory exhaustion comes here.  |",
          "1845: yyexhaustedlab:",
          "1846:   yyerror (stack, scanner, YY_(\"memory exhausted\"));",
          "1847:   yyresult = 2;",
          "1849: #endif",
          "1851: yyreturn:",
          "1852:   if (yychar != YYEMPTY)",
          "1853:     {",
          "1856:       yytoken = YYTRANSLATE (yychar);",
          "1857:       yydestruct (\"Cleanup: discarding lookahead\",",
          "1858:                   yytoken, &yylval, stack, scanner);",
          "1859:     }",
          "1862:   YYPOPSTACK (yylen);",
          "1863:   YY_STACK_PRINT (yyss, yyssp);",
          "1864:   while (yyssp != yyss)",
          "1865:     {",
          "1866:       yydestruct (\"Cleanup: popping\",",
          "1867:     yystos[*yyssp], yyvsp, stack, scanner);",
          "1868:       YYPOPSTACK (1);",
          "1869:     }",
          "1870: #ifndef yyoverflow",
          "1871:   if (yyss != yyssa)",
          "1872:     YYSTACK_FREE (yyss);",
          "1873: #endif",
          "1874: #if YYERROR_VERBOSE",
          "1875:   if (yymsg != yymsgbuf)",
          "1876:     YYSTACK_FREE (yymsg);",
          "1877: #endif",
          "1879:   return YYID (yyresult);",
          "1880: }",
          "1884: #line 168 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "",
          "---------------"
        ],
        "phpdbg_parser.h||phpdbg_parser.h": [
          "File: phpdbg_parser.h -> phpdbg_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:       Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "8:    it under the terms of the GNU General Public License as published by",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "12:    This program is distributed in the hope that it will be useful,",
          "13:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "15:    GNU General Public License for more details.",
          "17:    You should have received a copy of the GNU General Public License",
          "21:    part or all of the Bison parser skeleton and distribute that work",
          "22:    under terms of your choice, so long as that work isn't itself a",
          "23:    parser generator using the skeleton or a modified version thereof",
          "24:    as a parser skeleton.  Alternatively, if you modify or redistribute",
          "25:    the parser skeleton itself, you may (at your option) remove this",
          "26:    special exception, which will cause the skeleton and the resulting",
          "27:    Bison output files to be licensed under the GNU General Public",
          "28:    License without this special exception.",
          "30:    This special exception was added by the Free Software Foundation in",
          "33: #ifndef YY_YY_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED",
          "34: # define YY_YY_SAPI_PHPDBG_PHPDBG_PARSER_H_INCLUDED",
          "36: #ifndef YYDEBUG",
          "37: # define YYDEBUG 0",
          "38: #endif",
          "39: #if YYDEBUG",
          "40: extern int yydebug;",
          "41: #endif",
          "44: #line 40 \"/usr/src/php-src/sapi/phpdbg/phpdbg_parser.y\"",
          "46: #include \"phpdbg.h\"",
          "47: #ifndef YY_TYPEDEF_YY_SCANNER_T",
          "48: #define YY_TYPEDEF_YY_SCANNER_T",
          "49: typedef void* yyscan_t;",
          "50: #endif",
          "54: #line 55 \"sapi/phpdbg/phpdbg_parser.h\"",
          "57: #ifndef YYTOKENTYPE",
          "58: # define YYTOKENTYPE",
          "61:    enum yytokentype {",
          "62:      T_EVAL = 258,",
          "63:      T_RUN = 259,",
          "64:      T_SHELL = 260,",
          "65:      T_IF = 261,",
          "66:      T_TRUTHY = 262,",
          "67:      T_FALSY = 263,",
          "68:      T_STRING = 264,",
          "69:      T_COLON = 265,",
          "70:      T_DCOLON = 266,",
          "71:      T_POUND = 267,",
          "72:      T_PROTO = 268,",
          "73:      T_DIGITS = 269,",
          "74:      T_LITERAL = 270,",
          "75:      T_ADDR = 271,",
          "76:      T_OPCODE = 272,",
          "77:      T_ID = 273,",
          "78:      T_INPUT = 274,",
          "79:      T_UNEXPECTED = 275",
          "80:    };",
          "81: #endif",
          "83: #define T_EVAL 258",
          "84: #define T_RUN 259",
          "85: #define T_SHELL 260",
          "86: #define T_IF 261",
          "87: #define T_TRUTHY 262",
          "88: #define T_FALSY 263",
          "89: #define T_STRING 264",
          "90: #define T_COLON 265",
          "91: #define T_DCOLON 266",
          "92: #define T_POUND 267",
          "93: #define T_PROTO 268",
          "94: #define T_DIGITS 269",
          "95: #define T_LITERAL 270",
          "96: #define T_ADDR 271",
          "97: #define T_OPCODE 272",
          "98: #define T_ID 273",
          "99: #define T_INPUT 274",
          "100: #define T_UNEXPECTED 275",
          "104: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "105: typedef int YYSTYPE;",
          "106: # define YYSTYPE_IS_TRIVIAL 1",
          "108: # define YYSTYPE_IS_DECLARED 1",
          "109: #endif",
          "112: #ifdef YYPARSE_PARAM",
          "113: #if defined __STDC__ || defined __cplusplus",
          "114: int yyparse (void *YYPARSE_PARAM);",
          "115: #else",
          "116: int yyparse ();",
          "117: #endif",
          "119: #if defined __STDC__ || defined __cplusplus",
          "120: int yyparse (phpdbg_param_t *stack, yyscan_t scanner);",
          "121: #else",
          "122: int yyparse ();",
          "123: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "165994043a470cc3ba0723660e0ba39cba5bb149",
      "candidate_info": {
        "commit_hash": "165994043a470cc3ba0723660e0ba39cba5bb149",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/165994043a470cc3ba0723660e0ba39cba5bb149",
        "files": [
          "phpdbg_watch.c"
        ],
        "message": "fixed C89 compat",
        "before_after_code_files": [
          "phpdbg_watch.c||phpdbg_watch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpdbg_watch.c||phpdbg_watch.c": [
          "File: phpdbg_watch.c -> phpdbg_watch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "465: void phpdbg_watch_HashTable_dtor(zval **zv) {",
          "468:  phpdbg_btree_result *result;",
          "469:  zval_ptr_dtor_wrapper(zv);",
          "472:  if ((result = phpdbg_btree_find(&PHPDBG_G(watchpoint_tree), (zend_ulong)*zv))) {",
          "",
          "[Removed Lines]",
          "466:  TSRMLS_FETCH();",
          "",
          "[Added Lines]",
          "468:  TSRMLS_FETCH();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "545: }",
          "547: static void phpdbg_watch_dtor(void *pDest) {",
          "550:  phpdbg_watchpoint_t *watch = *(phpdbg_watchpoint_t **)pDest;",
          "552:  phpdbg_deactivate_watchpoint(watch TSRMLS_CC);",
          "553:  phpdbg_remove_watchpoint(watch TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "548:  TSRMLS_FETCH();",
          "",
          "[Added Lines]",
          "548:  TSRMLS_FETCH();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "599:   void *oldPtr = (char *)&dump->data + ((size_t)watch->addr.ptr - (size_t)dump->page);",
          "600:   char reenable = 1;",
          "603:    continue;",
          "604:   }",
          "",
          "[Removed Lines]",
          "602:   if (watch->addr.ptr < dump->page || watch->addr.ptr + watch->size > dump->page + dump->size) {",
          "",
          "[Added Lines]",
          "600:   if ((size_t)watch->addr.ptr < (size_t)dump->page || (size_t)watch->addr.ptr + watch->size > (size_t)dump->page + dump->size) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "774: }",
          "776: void phpdbg_watch_efree(void *ptr) {",
          "778:  phpdbg_btree_result *result = phpdbg_btree_find_closest(&PHPDBG_G(watchpoint_tree), (zend_ulong)ptr);",
          "780:  if (result) {",
          "781:   phpdbg_watchpoint_t *watch = result->ptr;",
          "",
          "[Removed Lines]",
          "777:  TSRMLS_FETCH();",
          "",
          "[Added Lines]",
          "776:  TSRMLS_FETCH();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69b5ee61d029b5532cd47ccae6ab0546b6d53106",
      "candidate_info": {
        "commit_hash": "69b5ee61d029b5532cd47ccae6ab0546b6d53106",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/69b5ee61d029b5532cd47ccae6ab0546b6d53106",
        "files": [
          "NEWS",
          "Zend/tests/bug67169.phpt",
          "Zend/zend_hash.c"
        ],
        "message": "Fixed bug #67169: []= after_array_splice incorrect\n\nThis fixes a regression I introduced in beta 1.",
        "before_after_code_files": [
          "Zend/tests/bug67169.phpt||Zend/tests/bug67169.phpt",
          "Zend/zend_hash.c||Zend/zend_hash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Zend/tests/bug67169.phpt||Zend/tests/bug67169.phpt": [
          "File: Zend/tests/bug67169.phpt -> Zend/tests/bug67169.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #67169: array_splice all elements, then []= gives wrong index",
          "3: --FILE--",
          "4: <?php",
          "6: $array = array('a', 'b');",
          "7: array_splice($array, 0, 2);",
          "8: $array[] = 'c';",
          "9: var_dump($array);",
          "11: $array = array('a', 'b');",
          "12: array_shift($array);",
          "13: array_shift($array);",
          "14: $array[] = 'c';",
          "15: var_dump($array);",
          "17: ?>",
          "18: --EXPECT--",
          "19: array(1) {",
          "20:   [0]=>",
          "21:   string(1) \"c\"",
          "22: }",
          "23: array(1) {",
          "24:   [0]=>",
          "25:   string(1) \"c\"",
          "26: }",
          "",
          "---------------"
        ],
        "Zend/zend_hash.c||Zend/zend_hash.c": [
          "File: Zend/zend_hash.c -> Zend/zend_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:  IS_CONSISTENT(ht);",
          "489:  if (UNEXPECTED(ht->nNumOfElements == 0)) {",
          "490:   return;",
          "491:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:   ht->nNextFreeElement = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "deee0011e1b0e2742080ea6db213b7e3f6457e51",
      "candidate_info": {
        "commit_hash": "deee0011e1b0e2742080ea6db213b7e3f6457e51",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/deee0011e1b0e2742080ea6db213b7e3f6457e51",
        "files": [
          "main/php_memory_streams.h",
          "main/streams/memory.c",
          "main/streams/php_stream_plain_wrapper.h",
          "main/streams/plain_wrapper.c"
        ],
        "message": "restore API compatibility",
        "before_after_code_files": [
          "main/php_memory_streams.h||main/php_memory_streams.h",
          "main/streams/memory.c||main/streams/memory.c",
          "main/streams/php_stream_plain_wrapper.h||main/streams/php_stream_plain_wrapper.h",
          "main/streams/plain_wrapper.c||main/streams/plain_wrapper.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/php_memory_streams.h||main/php_memory_streams.h": [
          "File: main/php_memory_streams.h -> main/php_memory_streams.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define php_stream_memory_get_buffer(stream, length) _php_stream_memory_get_buffer((stream), (length) STREAMS_CC TSRMLS_CC)",
          "37: #define php_stream_temp_new() php_stream_temp_create(TEMP_STREAM_DEFAULT, PHP_STREAM_MAX_MEM)",
          "39: #define php_stream_temp_create_ex(mode, max_memory_usage, tmpdir) _php_stream_temp_create_ex((mode), (max_memory_usage), (tmpdir) STREAMS_CC TSRMLS_CC)",
          "41: #define php_stream_temp_open(mode, max_memory_usage, buf, length) _php_stream_temp_open((mode), (max_memory_usage), (buf), (length) STREAMS_CC TSRMLS_CC)",
          "43: BEGIN_EXTERN_C()",
          "",
          "[Removed Lines]",
          "38: #define php_stream_temp_create(mode, max_memory_usage) php_stream_temp_create_ex((mode), (max_memory_usage), NULL)",
          "40: #define php_stream_temp_create_rel(mode, max_memory_usage) _php_stream_temp_create_ex((mode), (max_memory_usage), NULL STREAMS_REL_CC TSRMLS_CC)",
          "",
          "[Added Lines]",
          "38: #define php_stream_temp_create(mode, max_memory_usage) _php_stream_temp_create((mode), (max_memory_usage) STREAMS_CC TSRMLS_CC)",
          "40: #define php_stream_temp_create_rel(mode, max_memory_usage) _php_stream_temp_create((mode), (max_memory_usage) STREAMS_REL_CC TSRMLS_CC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: PHPAPI php_stream *_php_stream_memory_open(int mode, char *buf, size_t length STREAMS_DC TSRMLS_DC);",
          "46: PHPAPI char *_php_stream_memory_get_buffer(php_stream *stream, size_t *length STREAMS_DC TSRMLS_DC);",
          "48: PHPAPI php_stream *_php_stream_temp_create_ex(int mode, size_t max_memory_usage, const char *tmpdir STREAMS_DC TSRMLS_DC);",
          "49: PHPAPI php_stream *_php_stream_temp_open(int mode, size_t max_memory_usage, char *buf, size_t length STREAMS_DC TSRMLS_DC);",
          "50: END_EXTERN_C()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: PHPAPI php_stream *_php_stream_temp_create(int mode, size_t max_memory_usage STREAMS_DC TSRMLS_DC);",
          "",
          "---------------"
        ],
        "main/streams/memory.c||main/streams/memory.c": [
          "File: main/streams/memory.c -> main/streams/memory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574: }",
          "579: PHPAPI php_stream *_php_stream_temp_open(int mode, size_t max_memory_usage, char *buf, size_t length STREAMS_DC TSRMLS_DC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577: PHPAPI php_stream *_php_stream_temp_create(int mode, size_t max_memory_usage STREAMS_DC TSRMLS_DC)",
          "578: {",
          "579:  return php_stream_temp_create_ex(mode, max_memory_usage, NULL);",
          "580: }",
          "",
          "---------------"
        ],
        "main/streams/php_stream_plain_wrapper.h||main/streams/php_stream_plain_wrapper.h": [
          "File: main/streams/php_stream_plain_wrapper.h -> main/streams/php_stream_plain_wrapper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: PHPAPI php_stream *_php_stream_fopen_from_pipe(FILE *file, const char *mode STREAMS_DC TSRMLS_DC);",
          "43: #define php_stream_fopen_from_pipe(file, mode) _php_stream_fopen_from_pipe((file), (mode) STREAMS_CC TSRMLS_CC)",
          "45: PHPAPI php_stream *_php_stream_fopen_temporary_file(const char *dir, const char *pfx, char **opened_path STREAMS_DC TSRMLS_DC);",
          "46: #define php_stream_fopen_temporary_file(dir, pfx, opened_path) _php_stream_fopen_temporary_file((dir), (pfx), (opened_path) STREAMS_CC TSRMLS_CC)",
          "",
          "[Removed Lines]",
          "47: #define php_stream_fopen_tmpfile() _php_stream_fopen_temporary_file(NULL, \"php\", NULL STREAMS_CC TSRMLS_CC)",
          "",
          "[Added Lines]",
          "45: PHPAPI php_stream *_php_stream_fopen_tmpfile(int dummy STREAMS_DC TSRMLS_DC);",
          "46: #define php_stream_fopen_tmpfile() _php_stream_fopen_tmpfile(0 STREAMS_CC TSRMLS_CC)",
          "",
          "---------------"
        ],
        "main/streams/plain_wrapper.c||main/streams/plain_wrapper.c": [
          "File: main/streams/plain_wrapper.c -> main/streams/plain_wrapper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:  return NULL;",
          "217: }",
          "219: PHPAPI php_stream *_php_stream_fopen_from_fd(int fd, const char *mode, const char *persistent_id STREAMS_DC TSRMLS_DC)",
          "220: {",
          "221:  php_stream *stream = php_stream_fopen_from_fd_int_rel(fd, mode, persistent_id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: PHPAPI php_stream *_php_stream_fopen_tmpfile(int dummy STREAMS_DC TSRMLS_DC)",
          "220: {",
          "221:  return php_stream_fopen_temporary_file(NULL, \"php\", NULL);",
          "222: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bb86f8a6bb1e779f4d2127df37c1b30c9482838",
      "candidate_info": {
        "commit_hash": "7bb86f8a6bb1e779f4d2127df37c1b30c9482838",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/7bb86f8a6bb1e779f4d2127df37c1b30c9482838",
        "files": [
          ".travis.yml",
          "travis/compile.sh"
        ],
        "message": "add more exts for Travis",
        "before_after_code_files": [
          "travis/compile.sh||travis/compile.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "travis/compile.sh||travis/compile.sh": [
          "File: travis/compile.sh -> travis/compile.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: --with-openssl \\",
          "50: --with-gmp \\",
          "51: --enable-bcmath \\",
          "53: make --quiet",
          "",
          "[Removed Lines]",
          "52: --enable-phpdbg",
          "",
          "[Added Lines]",
          "52: --enable-phpdbg \\",
          "53: --enable-calendar \\",
          "54: --enable-ftp \\",
          "55: --with-pspell=/usr \\",
          "56: --with-recode=/usr \\",
          "57: --with-enchant=/usr \\",
          "58: --enable-wddx \\",
          "59: --enable-sysvmsg",
          "",
          "---------------"
        ]
      }
    }
  ]
}