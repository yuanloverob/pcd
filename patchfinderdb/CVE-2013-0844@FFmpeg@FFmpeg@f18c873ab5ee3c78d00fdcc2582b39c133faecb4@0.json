{
  "cve_id": "CVE-2013-0844",
  "cve_desc": "Off-by-one error in the adpcm_decode_frame function in libavcodec/adpcm.c in FFmpeg before 1.0.4 allows remote attackers to have an unspecified impact via crafted DK4 data, which triggers an out-of-bounds array access.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "f18c873ab5ee3c78d00fdcc2582b39c133faecb4",
  "patch_info": {
    "commit_hash": "f18c873ab5ee3c78d00fdcc2582b39c133faecb4",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/f18c873ab5ee3c78d00fdcc2582b39c133faecb4",
    "files": [
      "libavcodec/adpcm.c"
    ],
    "message": "adpcm: fix off by 1 error and out of array access in DK4\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/adpcm.c||libavcodec/adpcm.c"
    ]
  },
  "patch_diff": {
    "libavcodec/adpcm.c||libavcodec/adpcm.c": [
      "File: libavcodec/adpcm.c -> libavcodec/adpcm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "801:                 return AVERROR_INVALIDDATA;",
      "802:             }",
      "803:         }",
      "805:             int v = bytestream2_get_byteu(&gb);",
      "",
      "[Removed Lines]",
      "804:         for (n = nb_samples >> (1 - st); n > 0; n--) {",
      "",
      "[Added Lines]",
      "804:         for (n = (nb_samples - 1) >> (1 - st); n > 0; n--) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "85a14dbd5dca34320f58b1ba11dd6dd0df4fb3be",
      "candidate_info": {
        "commit_hash": "85a14dbd5dca34320f58b1ba11dd6dd0df4fb3be",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/85a14dbd5dca34320f58b1ba11dd6dd0df4fb3be",
        "files": [
          "libavcodec/adpcm.c"
        ],
        "message": "adpcm: fix off by 1 error and out of array access in DK4\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit f18c873ab5ee3c78d00fdcc2582b39c133faecb4)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/adpcm.c||libavcodec/adpcm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/adpcm.c||libavcodec/adpcm.c"
          ],
          "candidate": [
            "libavcodec/adpcm.c||libavcodec/adpcm.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/adpcm.c||libavcodec/adpcm.c": [
          "File: libavcodec/adpcm.c -> libavcodec/adpcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:                 return AVERROR_INVALIDDATA;",
          "756:             }",
          "757:         }",
          "759:             int v = bytestream2_get_byteu(&gb);",
          "",
          "[Removed Lines]",
          "758:         for (n = nb_samples >> (1 - st); n > 0; n--) {",
          "",
          "[Added Lines]",
          "758:         for (n = (nb_samples - 1) >> (1 - st); n > 0; n--) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d570a9680801378065a7c57547fcf9d5d9ce9cbb",
      "candidate_info": {
        "commit_hash": "d570a9680801378065a7c57547fcf9d5d9ce9cbb",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/d570a9680801378065a7c57547fcf9d5d9ce9cbb",
        "files": [
          "libavcodec/adpcm.c"
        ],
        "message": "adpcm: convert adpcm_dk4 to bytestream2.",
        "before_after_code_files": [
          "libavcodec/adpcm.c||libavcodec/adpcm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/adpcm.c||libavcodec/adpcm.c"
          ],
          "candidate": [
            "libavcodec/adpcm.c||libavcodec/adpcm.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/adpcm.c||libavcodec/adpcm.c": [
          "File: libavcodec/adpcm.c -> libavcodec/adpcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:         nb_samples = ((buf_size - 16) * 2 / 3 * 4) / ch;",
          "451:         break;",
          "452:     case CODEC_ID_ADPCM_IMA_DK4:",
          "453:         nb_samples = 1 + (buf_size - 4 * ch) * 2 / ch;",
          "454:         break;",
          "455:     case CODEC_ID_ADPCM_IMA_WAV:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:         if (avctx->block_align > 0)",
          "454:             buf_size = FFMIN(buf_size, avctx->block_align);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713:         break;",
          "714:     }",
          "715:     case CODEC_ID_ADPCM_IMA_DK4:",
          "719:         for (channel = 0; channel < avctx->channels; channel++) {",
          "720:             cs = &c->status[channel];",
          "725:         }",
          "730:         }",
          "",
          "[Removed Lines]",
          "716:         if (avctx->block_align != 0 && buf_size > avctx->block_align)",
          "717:             buf_size = avctx->block_align;",
          "721:             cs->predictor  = (int16_t)bytestream_get_le16(&src);",
          "722:             cs->step_index = av_clip(*src++, 0, 88);",
          "723:             src++;",
          "726:         for (n = nb_samples >> (1 - st); n > 0; n--, src++) {",
          "727:             uint8_t v = *src;",
          "",
          "[Added Lines]",
          "720:             cs->predictor  = *samples++ = sign_extend(bytestream2_get_le16u(&gb), 16);",
          "721:             cs->step_index = sign_extend(bytestream2_get_le16u(&gb), 16);",
          "722:             if (cs->step_index > 88u){",
          "723:                 av_log(avctx, AV_LOG_ERROR, \"ERROR: step_index[%d] = %i\\n\",",
          "724:                        channel, cs->step_index);",
          "725:                 return AVERROR_INVALIDDATA;",
          "726:             }",
          "728:         for (n = nb_samples >> (1 - st); n > 0; n--) {",
          "729:             int v = bytestream2_get_byteu(&gb);",
          "",
          "---------------"
        ]
      }
    }
  ]
}