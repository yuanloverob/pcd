{
  "cve_id": "CVE-2022-21654",
  "cve_desc": "Envoy is an open source edge and service proxy, designed for cloud-native applications. Envoy's tls allows re-use when some cert validation settings have changed from their default configuration. The only workaround for this issue is to ensure that default tls settings are used. Users are advised to upgrade.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "e9f936d85dc1edc34fabd0a1725ec180f2316353",
  "patch_info": {
    "commit_hash": "e9f936d85dc1edc34fabd0a1725ec180f2316353",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/e9f936d85dc1edc34fabd0a1725ec180f2316353",
    "files": [
      "envoy/ssl/certificate_validation_context_config.h",
      "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
      "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
      "test/extensions/transport_sockets/tls/ssl_socket_test.cc"
    ],
    "message": "CVE-2022-21654\n\ntls allows re-use when some cert validation settings have changed\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
    "before_after_code_files": [
      "envoy/ssl/certificate_validation_context_config.h||envoy/ssl/certificate_validation_context_config.h",
      "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
      "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
      "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
    ]
  },
  "patch_diff": {
    "envoy/ssl/certificate_validation_context_config.h||envoy/ssl/certificate_validation_context_config.h": [
      "File: envoy/ssl/certificate_validation_context_config.h -> envoy/ssl/certificate_validation_context_config.h"
    ],
    "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h": [
      "File: source/extensions/transport_sockets/tls/cert_validator/cert_validator.h -> source/extensions/transport_sockets/tls/cert_validator/cert_validator.h"
    ],
    "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc": [
      "File: source/extensions/transport_sockets/tls/cert_validator/default_validator.cc -> source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "378:                               sizeof(std::remove_reference<decltype(hash)>::type::value_type));",
      "379:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
      "380:   }",
      "381: }",
      "383: void DefaultCertValidator::addClientValidationContext(SSL_CTX* ctx, bool require_client_cert) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "382:   rc = EVP_DigestUpdate(md.get(), &verify_trusted_ca_, sizeof(verify_trusted_ca_));",
      "383:   RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
      "385:   if (config_ != nullptr) {",
      "386:     for (const auto& matcher : config_->subjectAltNameMatchers()) {",
      "387:       size_t hash = MessageUtil::hash(matcher);",
      "388:       rc = EVP_DigestUpdate(md.get(), &hash, sizeof(hash));",
      "389:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
      "390:     }",
      "392:     const std::string& crl = config_->certificateRevocationList();",
      "393:     if (!crl.empty()) {",
      "394:       rc = EVP_DigestUpdate(md.get(), crl.data(), crl.length());",
      "395:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
      "396:     }",
      "398:     bool allow_expired = config_->allowExpiredCertificate();",
      "399:     rc = EVP_DigestUpdate(md.get(), &allow_expired, sizeof(allow_expired));",
      "400:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
      "402:     auto trust_chain_verification = config_->trustChainVerification();",
      "403:     rc = EVP_DigestUpdate(md.get(), &trust_chain_verification, sizeof(trust_chain_verification));",
      "404:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
      "406:     auto only_leaf_crl = config_->onlyVerifyLeafCertificateCrl();",
      "407:     rc = EVP_DigestUpdate(md.get(), &only_leaf_crl, sizeof(only_leaf_crl));",
      "408:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
      "409:   }",
      "",
      "---------------"
    ],
    "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc": [
      "File: test/extensions/transport_sockets/tls/ssl_socket_test.cc -> test/extensions/transport_sockets/tls/ssl_socket_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "3373:                               client_ctx_yaml, false, GetParam());",
      "3374: }",
      "3378: TEST_P(SslSocketTest, TicketSessionResumptionDifferentServerCert) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3378: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertHash) {",
      "3379:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
      "3380:   session_ticket_keys:",
      "3381:     keys:",
      "3382:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
      "3383:   common_tls_context:",
      "3384:     tls_certificates:",
      "3385:       certificate_chain:",
      "3386:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
      "3387:       private_key:",
      "3388:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
      "3389:     validation_context:",
      "3390:       trusted_ca:",
      "3391:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
      "3392:       verify_certificate_hash:",
      "3393:         - \")EOF\",",
      "3394:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
      "3396:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
      "3397:   session_ticket_keys:",
      "3398:     keys:",
      "3399:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
      "3400:   common_tls_context:",
      "3401:     tls_certificates:",
      "3402:       certificate_chain:",
      "3403:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
      "3404:       private_key:",
      "3405:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
      "3406:     validation_context:",
      "3407:       trusted_ca:",
      "3408:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
      "3409:       verify_certificate_hash:",
      "3410:         - \"0000000000000000000000000000000000000000000000000000000000000000\"",
      "3411:         - \")EOF\",",
      "3412:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
      "3414:   const std::string client_ctx_yaml = R\"EOF(",
      "3415:   common_tls_context:",
      "3416:     tls_certificates:",
      "3417:       certificate_chain:",
      "3418:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
      "3419:       private_key:",
      "3420:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
      "3421: )EOF\";",
      "3423:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
      "3424:                               GetParam());",
      "3425:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
      "3426:                               GetParam());",
      "3427: }",
      "3431: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertSpki) {",
      "3432:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
      "3433:   session_ticket_keys:",
      "3434:     keys:",
      "3435:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
      "3436:   common_tls_context:",
      "3437:     tls_certificates:",
      "3438:       certificate_chain:",
      "3439:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
      "3440:       private_key:",
      "3441:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
      "3442:     validation_context:",
      "3443:       trusted_ca:",
      "3444:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
      "3445:       verify_certificate_spki:",
      "3446:         - \")EOF\",",
      "3447:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
      "3449:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
      "3450:   session_ticket_keys:",
      "3451:     keys:",
      "3452:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
      "3453:   common_tls_context:",
      "3454:     tls_certificates:",
      "3455:       certificate_chain:",
      "3456:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
      "3457:       private_key:",
      "3458:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
      "3459:     validation_context:",
      "3460:       trusted_ca:",
      "3461:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
      "3462:       verify_certificate_spki:",
      "3463:         - \"NvqYIYSbgK2vCJpQhObf77vv+bQWtc5ek5RIOwPiC9A=\"",
      "3464:         - \")EOF\",",
      "3465:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
      "3467:   const std::string client_ctx_yaml = R\"EOF(",
      "3468:   common_tls_context:",
      "3469:     tls_certificates:",
      "3470:       certificate_chain:",
      "3471:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
      "3472:       private_key:",
      "3473:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
      "3474: )EOF\";",
      "3476:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
      "3477:                               GetParam());",
      "3478:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
      "3479:                               GetParam());",
      "3480: }",
      "3484: TEST_P(SslSocketTest, TicketSessionResumptionDifferentMatchSAN) {",
      "3485:   const std::string server_ctx_yaml1 = R\"EOF(",
      "3486:   session_ticket_keys:",
      "3487:     keys:",
      "3488:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
      "3489:   common_tls_context:",
      "3490:     tls_certificates:",
      "3491:       certificate_chain:",
      "3492:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
      "3493:       private_key:",
      "3494:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
      "3495:     validation_context:",
      "3496:       trusted_ca:",
      "3497:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
      "3498:       match_subject_alt_names:",
      "3499:         - exact: \"spiffe://lyft.com/test-team\"",
      "3500: )EOF\";",
      "3502:   const std::string server_ctx_yaml2 = R\"EOF(",
      "3503:   session_ticket_keys:",
      "3504:     keys:",
      "3505:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
      "3506:   common_tls_context:",
      "3507:     tls_certificates:",
      "3508:       certificate_chain:",
      "3509:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
      "3510:       private_key:",
      "3511:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
      "3512:     validation_context:",
      "3513:       trusted_ca:",
      "3514:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
      "3515:       match_subject_alt_names:",
      "3516:         - prefix: \"spiffe://lyft.com/test-team\"",
      "3517: \")EOF\";",
      "3519:   const std::string client_ctx_yaml = R\"EOF(",
      "3520:   common_tls_context:",
      "3521:     tls_certificates:",
      "3522:       certificate_chain:",
      "3523:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
      "3524:       private_key:",
      "3525:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
      "3526: )EOF\";",
      "3528:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
      "3529:                               GetParam());",
      "3530:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
      "3531:                               GetParam());",
      "3532: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c00e556936c3aa631beff433b256789b283b89b9",
      "candidate_info": {
        "commit_hash": "c00e556936c3aa631beff433b256789b283b89b9",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/c00e556936c3aa631beff433b256789b283b89b9",
        "files": [
          "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
          "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "test/extensions/transport_sockets/tls/ssl_socket_test.cc"
        ],
        "message": "[1.20] CVE-2022-21654\n\ntls allows re-use when some cert validation settings have changed\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
          "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
            "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
            "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
          ],
          "candidate": [
            "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
            "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
            "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h": [
          "File: source/extensions/transport_sockets/tls/cert_validator/cert_validator.h -> source/extensions/transport_sockets/tls/cert_validator/cert_validator.h"
        ],
        "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc": [
          "File: source/extensions/transport_sockets/tls/cert_validator/default_validator.cc -> source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:                               sizeof(std::remove_reference<decltype(hash)>::type::value_type));",
          "397:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "398:   }",
          "399: }",
          "401: void DefaultCertValidator::addClientValidationContext(SSL_CTX* ctx, bool require_client_cert) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400:   rc = EVP_DigestUpdate(md.get(), &verify_trusted_ca_, sizeof(verify_trusted_ca_));",
          "401:   RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "403:   if (config_ != nullptr) {",
          "404:     for (const auto& matcher : config_->subjectAltNameMatchers()) {",
          "405:       size_t hash = MessageUtil::hash(matcher);",
          "406:       rc = EVP_DigestUpdate(md.get(), &hash, sizeof(hash));",
          "407:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "408:     }",
          "410:     const std::string& crl = config_->certificateRevocationList();",
          "411:     if (!crl.empty()) {",
          "412:       rc = EVP_DigestUpdate(md.get(), crl.data(), crl.length());",
          "413:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "414:     }",
          "416:     bool allow_expired = config_->allowExpiredCertificate();",
          "417:     rc = EVP_DigestUpdate(md.get(), &allow_expired, sizeof(allow_expired));",
          "418:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "420:     auto trust_chain_verification = config_->trustChainVerification();",
          "421:     rc = EVP_DigestUpdate(md.get(), &trust_chain_verification, sizeof(trust_chain_verification));",
          "422:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "429:   }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc": [
          "File: test/extensions/transport_sockets/tls/ssl_socket_test.cc -> test/extensions/transport_sockets/tls/ssl_socket_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3260:                               client_ctx_yaml, false, GetParam());",
          "3261: }",
          "3265: TEST_P(SslSocketTest, TicketSessionResumptionDifferentServerCert) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3265: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertHash) {",
          "3266:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
          "3267:   session_ticket_keys:",
          "3268:     keys:",
          "3269:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3270:   common_tls_context:",
          "3271:     tls_certificates:",
          "3272:       certificate_chain:",
          "3273:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3274:       private_key:",
          "3275:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3276:     validation_context:",
          "3277:       trusted_ca:",
          "3278:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3279:       verify_certificate_hash:",
          "3280:         - \")EOF\",",
          "3281:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
          "3283:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
          "3284:   session_ticket_keys:",
          "3285:     keys:",
          "3286:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3287:   common_tls_context:",
          "3288:     tls_certificates:",
          "3289:       certificate_chain:",
          "3290:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3291:       private_key:",
          "3292:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3293:     validation_context:",
          "3294:       trusted_ca:",
          "3295:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3296:       verify_certificate_hash:",
          "3297:         - \"0000000000000000000000000000000000000000000000000000000000000000\"",
          "3298:         - \")EOF\",",
          "3299:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
          "3301:   const std::string client_ctx_yaml = R\"EOF(",
          "3302:   common_tls_context:",
          "3303:     tls_certificates:",
          "3304:       certificate_chain:",
          "3305:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3306:       private_key:",
          "3307:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3308: )EOF\";",
          "3310:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3311:                               GetParam());",
          "3312:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3313:                               GetParam());",
          "3314: }",
          "3318: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertSpki) {",
          "3319:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
          "3320:   session_ticket_keys:",
          "3321:     keys:",
          "3322:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3323:   common_tls_context:",
          "3324:     tls_certificates:",
          "3325:       certificate_chain:",
          "3326:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3327:       private_key:",
          "3328:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3329:     validation_context:",
          "3330:       trusted_ca:",
          "3331:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3332:       verify_certificate_spki:",
          "3333:         - \")EOF\",",
          "3334:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
          "3336:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
          "3337:   session_ticket_keys:",
          "3338:     keys:",
          "3339:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3340:   common_tls_context:",
          "3341:     tls_certificates:",
          "3342:       certificate_chain:",
          "3343:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3344:       private_key:",
          "3345:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3346:     validation_context:",
          "3347:       trusted_ca:",
          "3348:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3349:       verify_certificate_spki:",
          "3350:         - \"NvqYIYSbgK2vCJpQhObf77vv+bQWtc5ek5RIOwPiC9A=\"",
          "3351:         - \")EOF\",",
          "3352:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
          "3354:   const std::string client_ctx_yaml = R\"EOF(",
          "3355:   common_tls_context:",
          "3356:     tls_certificates:",
          "3357:       certificate_chain:",
          "3358:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3359:       private_key:",
          "3360:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3361: )EOF\";",
          "3363:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3364:                               GetParam());",
          "3365:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3366:                               GetParam());",
          "3367: }",
          "3371: TEST_P(SslSocketTest, TicketSessionResumptionDifferentMatchSAN) {",
          "3372:   const std::string server_ctx_yaml1 = R\"EOF(",
          "3373:   session_ticket_keys:",
          "3374:     keys:",
          "3375:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3376:   common_tls_context:",
          "3377:     tls_certificates:",
          "3378:       certificate_chain:",
          "3379:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3380:       private_key:",
          "3381:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3382:     validation_context:",
          "3383:       trusted_ca:",
          "3384:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3385:       match_subject_alt_names:",
          "3386:         - exact: \"spiffe://lyft.com/test-team\"",
          "3387: )EOF\";",
          "3389:   const std::string server_ctx_yaml2 = R\"EOF(",
          "3390:   session_ticket_keys:",
          "3391:     keys:",
          "3392:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3393:   common_tls_context:",
          "3394:     tls_certificates:",
          "3395:       certificate_chain:",
          "3396:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3397:       private_key:",
          "3398:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3399:     validation_context:",
          "3400:       trusted_ca:",
          "3401:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3402:       match_subject_alt_names:",
          "3403:         - prefix: \"spiffe://lyft.com/test-team\"",
          "3404: \")EOF\";",
          "3406:   const std::string client_ctx_yaml = R\"EOF(",
          "3407:   common_tls_context:",
          "3408:     tls_certificates:",
          "3409:       certificate_chain:",
          "3410:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3411:       private_key:",
          "3412:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3413: )EOF\";",
          "3415:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3416:                               GetParam());",
          "3417:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3418:                               GetParam());",
          "3419: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0079e6512d92c496b3c3c4d8fcb8721fb70b759",
      "candidate_info": {
        "commit_hash": "d0079e6512d92c496b3c3c4d8fcb8721fb70b759",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/d0079e6512d92c496b3c3c4d8fcb8721fb70b759",
        "files": [
          "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
          "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "test/extensions/transport_sockets/tls/ssl_socket_test.cc"
        ],
        "message": "[1.21] CVE-2022-21654\n\ntls allows re-use when some cert validation settings have changed\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
          "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
            "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
            "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
          ],
          "candidate": [
            "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
            "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
            "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h": [
          "File: source/extensions/transport_sockets/tls/cert_validator/cert_validator.h -> source/extensions/transport_sockets/tls/cert_validator/cert_validator.h"
        ],
        "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc": [
          "File: source/extensions/transport_sockets/tls/cert_validator/default_validator.cc -> source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:                               sizeof(std::remove_reference<decltype(hash)>::type::value_type));",
          "379:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "380:   }",
          "381: }",
          "383: void DefaultCertValidator::addClientValidationContext(SSL_CTX* ctx, bool require_client_cert) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382:   rc = EVP_DigestUpdate(md.get(), &verify_trusted_ca_, sizeof(verify_trusted_ca_));",
          "383:   RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "385:   if (config_ != nullptr) {",
          "386:     for (const auto& matcher : config_->subjectAltNameMatchers()) {",
          "387:       size_t hash = MessageUtil::hash(matcher);",
          "388:       rc = EVP_DigestUpdate(md.get(), &hash, sizeof(hash));",
          "389:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "390:     }",
          "392:     const std::string& crl = config_->certificateRevocationList();",
          "393:     if (!crl.empty()) {",
          "394:       rc = EVP_DigestUpdate(md.get(), crl.data(), crl.length());",
          "395:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "396:     }",
          "398:     bool allow_expired = config_->allowExpiredCertificate();",
          "399:     rc = EVP_DigestUpdate(md.get(), &allow_expired, sizeof(allow_expired));",
          "400:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "402:     auto trust_chain_verification = config_->trustChainVerification();",
          "403:     rc = EVP_DigestUpdate(md.get(), &trust_chain_verification, sizeof(trust_chain_verification));",
          "404:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "406:     auto only_leaf_crl = config_->onlyVerifyLeafCertificateCrl();",
          "407:     rc = EVP_DigestUpdate(md.get(), &only_leaf_crl, sizeof(only_leaf_crl));",
          "408:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "409:   }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc": [
          "File: test/extensions/transport_sockets/tls/ssl_socket_test.cc -> test/extensions/transport_sockets/tls/ssl_socket_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3356:                               client_ctx_yaml, false, GetParam());",
          "3357: }",
          "3361: TEST_P(SslSocketTest, TicketSessionResumptionDifferentServerCert) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3361: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertHash) {",
          "3362:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
          "3363:   session_ticket_keys:",
          "3364:     keys:",
          "3365:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3366:   common_tls_context:",
          "3367:     tls_certificates:",
          "3368:       certificate_chain:",
          "3369:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3370:       private_key:",
          "3371:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3372:     validation_context:",
          "3373:       trusted_ca:",
          "3374:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3375:       verify_certificate_hash:",
          "3376:         - \")EOF\",",
          "3377:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
          "3379:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
          "3380:   session_ticket_keys:",
          "3381:     keys:",
          "3382:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3383:   common_tls_context:",
          "3384:     tls_certificates:",
          "3385:       certificate_chain:",
          "3386:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3387:       private_key:",
          "3388:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3389:     validation_context:",
          "3390:       trusted_ca:",
          "3391:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3392:       verify_certificate_hash:",
          "3393:         - \"0000000000000000000000000000000000000000000000000000000000000000\"",
          "3394:         - \")EOF\",",
          "3395:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
          "3397:   const std::string client_ctx_yaml = R\"EOF(",
          "3398:   common_tls_context:",
          "3399:     tls_certificates:",
          "3400:       certificate_chain:",
          "3401:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3402:       private_key:",
          "3403:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3404: )EOF\";",
          "3406:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3407:                               GetParam());",
          "3408:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3409:                               GetParam());",
          "3410: }",
          "3414: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertSpki) {",
          "3415:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
          "3416:   session_ticket_keys:",
          "3417:     keys:",
          "3418:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3419:   common_tls_context:",
          "3420:     tls_certificates:",
          "3421:       certificate_chain:",
          "3422:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3423:       private_key:",
          "3424:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3425:     validation_context:",
          "3426:       trusted_ca:",
          "3427:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3428:       verify_certificate_spki:",
          "3429:         - \")EOF\",",
          "3430:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
          "3432:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
          "3433:   session_ticket_keys:",
          "3434:     keys:",
          "3435:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3436:   common_tls_context:",
          "3437:     tls_certificates:",
          "3438:       certificate_chain:",
          "3439:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3440:       private_key:",
          "3441:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3442:     validation_context:",
          "3443:       trusted_ca:",
          "3444:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3445:       verify_certificate_spki:",
          "3446:         - \"NvqYIYSbgK2vCJpQhObf77vv+bQWtc5ek5RIOwPiC9A=\"",
          "3447:         - \")EOF\",",
          "3448:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
          "3450:   const std::string client_ctx_yaml = R\"EOF(",
          "3451:   common_tls_context:",
          "3452:     tls_certificates:",
          "3453:       certificate_chain:",
          "3454:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3455:       private_key:",
          "3456:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3457: )EOF\";",
          "3459:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3460:                               GetParam());",
          "3461:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3462:                               GetParam());",
          "3463: }",
          "3467: TEST_P(SslSocketTest, TicketSessionResumptionDifferentMatchSAN) {",
          "3468:   const std::string server_ctx_yaml1 = R\"EOF(",
          "3469:   session_ticket_keys:",
          "3470:     keys:",
          "3471:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3472:   common_tls_context:",
          "3473:     tls_certificates:",
          "3474:       certificate_chain:",
          "3475:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3476:       private_key:",
          "3477:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3478:     validation_context:",
          "3479:       trusted_ca:",
          "3480:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3481:       match_subject_alt_names:",
          "3482:         - exact: \"spiffe://lyft.com/test-team\"",
          "3483: )EOF\";",
          "3485:   const std::string server_ctx_yaml2 = R\"EOF(",
          "3486:   session_ticket_keys:",
          "3487:     keys:",
          "3488:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3489:   common_tls_context:",
          "3490:     tls_certificates:",
          "3491:       certificate_chain:",
          "3492:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3493:       private_key:",
          "3494:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3495:     validation_context:",
          "3496:       trusted_ca:",
          "3497:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3498:       match_subject_alt_names:",
          "3499:         - prefix: \"spiffe://lyft.com/test-team\"",
          "3500: \")EOF\";",
          "3502:   const std::string client_ctx_yaml = R\"EOF(",
          "3503:   common_tls_context:",
          "3504:     tls_certificates:",
          "3505:       certificate_chain:",
          "3506:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3507:       private_key:",
          "3508:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3509: )EOF\";",
          "3511:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3512:                               GetParam());",
          "3513:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3514:                               GetParam());",
          "3515: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0fa12e86ee9757246debef4b5163ec839190fbbd",
      "candidate_info": {
        "commit_hash": "0fa12e86ee9757246debef4b5163ec839190fbbd",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/0fa12e86ee9757246debef4b5163ec839190fbbd",
        "files": [
          "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
          "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "test/extensions/transport_sockets/tls/ssl_socket_test.cc"
        ],
        "message": "[1.19] CVE-2022-21654\n\ntls allows re-use when some cert validation settings have changed\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
          "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
            "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
            "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
          ],
          "candidate": [
            "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
            "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
            "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h": [
          "File: source/extensions/transport_sockets/tls/cert_validator/cert_validator.h -> source/extensions/transport_sockets/tls/cert_validator/cert_validator.h"
        ],
        "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc": [
          "File: source/extensions/transport_sockets/tls/cert_validator/default_validator.cc -> source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:                               sizeof(std::remove_reference<decltype(hash)>::type::value_type));",
          "394:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "395:   }",
          "396: }",
          "398: void DefaultCertValidator::addClientValidationContext(SSL_CTX* ctx, bool require_client_cert) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:   rc = EVP_DigestUpdate(md.get(), &verify_trusted_ca_, sizeof(verify_trusted_ca_));",
          "398:   RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "400:   if (config_ != nullptr) {",
          "401:     for (const auto& matcher : config_->subjectAltNameMatchers()) {",
          "402:       size_t hash = MessageUtil::hash(matcher);",
          "403:       rc = EVP_DigestUpdate(md.get(), &hash, sizeof(hash));",
          "404:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "405:     }",
          "407:     const std::string& crl = config_->certificateRevocationList();",
          "408:     if (!crl.empty()) {",
          "409:       rc = EVP_DigestUpdate(md.get(), crl.data(), crl.length());",
          "410:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "411:     }",
          "413:     bool allow_expired = config_->allowExpiredCertificate();",
          "414:     rc = EVP_DigestUpdate(md.get(), &allow_expired, sizeof(allow_expired));",
          "415:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "417:     auto trust_chain_verification = config_->trustChainVerification();",
          "418:     rc = EVP_DigestUpdate(md.get(), &trust_chain_verification, sizeof(trust_chain_verification));",
          "419:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "426:   }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc": [
          "File: test/extensions/transport_sockets/tls/ssl_socket_test.cc -> test/extensions/transport_sockets/tls/ssl_socket_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3226:                               client_ctx_yaml, false, GetParam());",
          "3227: }",
          "3231: TEST_P(SslSocketTest, TicketSessionResumptionDifferentServerCert) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3231: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertHash) {",
          "3232:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
          "3233:   session_ticket_keys:",
          "3234:     keys:",
          "3235:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3236:   common_tls_context:",
          "3237:     tls_certificates:",
          "3238:       certificate_chain:",
          "3239:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3240:       private_key:",
          "3241:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3242:     validation_context:",
          "3243:       trusted_ca:",
          "3244:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3245:       verify_certificate_hash:",
          "3246:         - \")EOF\",",
          "3247:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
          "3249:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
          "3250:   session_ticket_keys:",
          "3251:     keys:",
          "3252:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3253:   common_tls_context:",
          "3254:     tls_certificates:",
          "3255:       certificate_chain:",
          "3256:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3257:       private_key:",
          "3258:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3259:     validation_context:",
          "3260:       trusted_ca:",
          "3261:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3262:       verify_certificate_hash:",
          "3263:         - \"0000000000000000000000000000000000000000000000000000000000000000\"",
          "3264:         - \")EOF\",",
          "3265:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
          "3267:   const std::string client_ctx_yaml = R\"EOF(",
          "3268:   common_tls_context:",
          "3269:     tls_certificates:",
          "3270:       certificate_chain:",
          "3271:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3272:       private_key:",
          "3273:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3274: )EOF\";",
          "3276:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3277:                               GetParam());",
          "3278:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3279:                               GetParam());",
          "3280: }",
          "3284: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertSpki) {",
          "3285:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
          "3286:   session_ticket_keys:",
          "3287:     keys:",
          "3288:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3289:   common_tls_context:",
          "3290:     tls_certificates:",
          "3291:       certificate_chain:",
          "3292:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3293:       private_key:",
          "3294:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3295:     validation_context:",
          "3296:       trusted_ca:",
          "3297:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3298:       verify_certificate_spki:",
          "3299:         - \")EOF\",",
          "3300:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
          "3302:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
          "3303:   session_ticket_keys:",
          "3304:     keys:",
          "3305:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3306:   common_tls_context:",
          "3307:     tls_certificates:",
          "3308:       certificate_chain:",
          "3309:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3310:       private_key:",
          "3311:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3312:     validation_context:",
          "3313:       trusted_ca:",
          "3314:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3315:       verify_certificate_spki:",
          "3316:         - \"NvqYIYSbgK2vCJpQhObf77vv+bQWtc5ek5RIOwPiC9A=\"",
          "3317:         - \")EOF\",",
          "3318:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
          "3320:   const std::string client_ctx_yaml = R\"EOF(",
          "3321:   common_tls_context:",
          "3322:     tls_certificates:",
          "3323:       certificate_chain:",
          "3324:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3325:       private_key:",
          "3326:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3327: )EOF\";",
          "3329:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3330:                               GetParam());",
          "3331:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3332:                               GetParam());",
          "3333: }",
          "3337: TEST_P(SslSocketTest, TicketSessionResumptionDifferentMatchSAN) {",
          "3338:   const std::string server_ctx_yaml1 = R\"EOF(",
          "3339:   session_ticket_keys:",
          "3340:     keys:",
          "3341:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3342:   common_tls_context:",
          "3343:     tls_certificates:",
          "3344:       certificate_chain:",
          "3345:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3346:       private_key:",
          "3347:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3348:     validation_context:",
          "3349:       trusted_ca:",
          "3350:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3351:       match_subject_alt_names:",
          "3352:         - exact: \"spiffe://lyft.com/test-team\"",
          "3353: )EOF\";",
          "3355:   const std::string server_ctx_yaml2 = R\"EOF(",
          "3356:   session_ticket_keys:",
          "3357:     keys:",
          "3358:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3359:   common_tls_context:",
          "3360:     tls_certificates:",
          "3361:       certificate_chain:",
          "3362:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3363:       private_key:",
          "3364:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3365:     validation_context:",
          "3366:       trusted_ca:",
          "3367:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3368:       match_subject_alt_names:",
          "3369:         - prefix: \"spiffe://lyft.com/test-team\"",
          "3370: \")EOF\";",
          "3372:   const std::string client_ctx_yaml = R\"EOF(",
          "3373:   common_tls_context:",
          "3374:     tls_certificates:",
          "3375:       certificate_chain:",
          "3376:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3377:       private_key:",
          "3378:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3379: )EOF\";",
          "3381:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3382:                               GetParam());",
          "3383:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3384:                               GetParam());",
          "3385: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d06bd589d1eb3842ae0071446e2521712027a9e5",
      "candidate_info": {
        "commit_hash": "d06bd589d1eb3842ae0071446e2521712027a9e5",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/d06bd589d1eb3842ae0071446e2521712027a9e5",
        "files": [
          "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
          "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "test/extensions/transport_sockets/tls/ssl_socket_test.cc"
        ],
        "message": "[1.18] CVE-2022-21654\n\ntls allows re-use when some cert validation settings have changed\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
          "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
            "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
            "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
          ],
          "candidate": [
            "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
            "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
            "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h||source/extensions/transport_sockets/tls/cert_validator/cert_validator.h": [
          "File: source/extensions/transport_sockets/tls/cert_validator/cert_validator.h -> source/extensions/transport_sockets/tls/cert_validator/cert_validator.h"
        ],
        "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc||source/extensions/transport_sockets/tls/cert_validator/default_validator.cc": [
          "File: source/extensions/transport_sockets/tls/cert_validator/default_validator.cc -> source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:                               sizeof(std::remove_reference<decltype(hash)>::type::value_type));",
          "405:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "406:   }",
          "407: }",
          "409: void DefaultCertValidator::addClientValidationContext(SSL_CTX* ctx, bool require_client_cert) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:   rc = EVP_DigestUpdate(md.get(), &verify_trusted_ca_, sizeof(verify_trusted_ca_));",
          "409:   RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "411:   if (config_ != nullptr) {",
          "412:     for (const auto& matcher : config_->subjectAltNameMatchers()) {",
          "413:       size_t hash = MessageUtil::hash(matcher);",
          "414:       rc = EVP_DigestUpdate(md.get(), &hash, sizeof(hash));",
          "415:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "416:     }",
          "418:     const std::string& crl = config_->certificateRevocationList();",
          "419:     if (!crl.empty()) {",
          "420:       rc = EVP_DigestUpdate(md.get(), crl.data(), crl.length());",
          "421:       RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "422:     }",
          "424:     bool allow_expired = config_->allowExpiredCertificate();",
          "425:     rc = EVP_DigestUpdate(md.get(), &allow_expired, sizeof(allow_expired));",
          "426:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "428:     auto trust_chain_verification = config_->trustChainVerification();",
          "429:     rc = EVP_DigestUpdate(md.get(), &trust_chain_verification, sizeof(trust_chain_verification));",
          "430:     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));",
          "437:   }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/tls/ssl_socket_test.cc||test/extensions/transport_sockets/tls/ssl_socket_test.cc": [
          "File: test/extensions/transport_sockets/tls/ssl_socket_test.cc -> test/extensions/transport_sockets/tls/ssl_socket_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3226:                               client_ctx_yaml, false, GetParam());",
          "3227: }",
          "3231: TEST_P(SslSocketTest, TicketSessionResumptionDifferentServerCert) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3231: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertHash) {",
          "3232:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
          "3233:   session_ticket_keys:",
          "3234:     keys:",
          "3235:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3236:   common_tls_context:",
          "3237:     tls_certificates:",
          "3238:       certificate_chain:",
          "3239:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3240:       private_key:",
          "3241:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3242:     validation_context:",
          "3243:       trusted_ca:",
          "3244:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3245:       verify_certificate_hash:",
          "3246:         - \")EOF\",",
          "3247:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
          "3249:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
          "3250:   session_ticket_keys:",
          "3251:     keys:",
          "3252:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3253:   common_tls_context:",
          "3254:     tls_certificates:",
          "3255:       certificate_chain:",
          "3256:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3257:       private_key:",
          "3258:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3259:     validation_context:",
          "3260:       trusted_ca:",
          "3261:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3262:       verify_certificate_hash:",
          "3263:         - \"0000000000000000000000000000000000000000000000000000000000000000\"",
          "3264:         - \")EOF\",",
          "3265:                                                     TEST_SAN_URI_CERT_256_HASH, \"\\\"\");",
          "3267:   const std::string client_ctx_yaml = R\"EOF(",
          "3268:   common_tls_context:",
          "3269:     tls_certificates:",
          "3270:       certificate_chain:",
          "3271:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3272:       private_key:",
          "3273:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3274: )EOF\";",
          "3276:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3277:                               GetParam());",
          "3278:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3279:                               GetParam());",
          "3280: }",
          "3284: TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertSpki) {",
          "3285:   const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(",
          "3286:   session_ticket_keys:",
          "3287:     keys:",
          "3288:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3289:   common_tls_context:",
          "3290:     tls_certificates:",
          "3291:       certificate_chain:",
          "3292:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3293:       private_key:",
          "3294:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3295:     validation_context:",
          "3296:       trusted_ca:",
          "3297:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3298:       verify_certificate_spki:",
          "3299:         - \")EOF\",",
          "3300:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
          "3302:   const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(",
          "3303:   session_ticket_keys:",
          "3304:     keys:",
          "3305:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3306:   common_tls_context:",
          "3307:     tls_certificates:",
          "3308:       certificate_chain:",
          "3309:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3310:       private_key:",
          "3311:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3312:     validation_context:",
          "3313:       trusted_ca:",
          "3314:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3315:       verify_certificate_spki:",
          "3316:         - \"NvqYIYSbgK2vCJpQhObf77vv+bQWtc5ek5RIOwPiC9A=\"",
          "3317:         - \")EOF\",",
          "3318:                                                     TEST_SAN_URI_CERT_SPKI, \"\\\"\");",
          "3320:   const std::string client_ctx_yaml = R\"EOF(",
          "3321:   common_tls_context:",
          "3322:     tls_certificates:",
          "3323:       certificate_chain:",
          "3324:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3325:       private_key:",
          "3326:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3327: )EOF\";",
          "3329:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3330:                               GetParam());",
          "3331:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3332:                               GetParam());",
          "3333: }",
          "3337: TEST_P(SslSocketTest, TicketSessionResumptionDifferentMatchSAN) {",
          "3338:   const std::string server_ctx_yaml1 = R\"EOF(",
          "3339:   session_ticket_keys:",
          "3340:     keys:",
          "3341:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3342:   common_tls_context:",
          "3343:     tls_certificates:",
          "3344:       certificate_chain:",
          "3345:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3346:       private_key:",
          "3347:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3348:     validation_context:",
          "3349:       trusted_ca:",
          "3350:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3351:       match_subject_alt_names:",
          "3352:         - exact: \"spiffe://lyft.com/test-team\"",
          "3353: )EOF\";",
          "3355:   const std::string server_ctx_yaml2 = R\"EOF(",
          "3356:   session_ticket_keys:",
          "3357:     keys:",
          "3358:       filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"",
          "3359:   common_tls_context:",
          "3360:     tls_certificates:",
          "3361:       certificate_chain:",
          "3362:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"",
          "3363:       private_key:",
          "3364:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"",
          "3365:     validation_context:",
          "3366:       trusted_ca:",
          "3367:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"",
          "3368:       match_subject_alt_names:",
          "3369:         - prefix: \"spiffe://lyft.com/test-team\"",
          "3370: \")EOF\";",
          "3372:   const std::string client_ctx_yaml = R\"EOF(",
          "3373:   common_tls_context:",
          "3374:     tls_certificates:",
          "3375:       certificate_chain:",
          "3376:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"",
          "3377:       private_key:",
          "3378:         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"",
          "3379: )EOF\";",
          "3381:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,",
          "3382:                               GetParam());",
          "3383:   testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,",
          "3384:                               GetParam());",
          "3385: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}