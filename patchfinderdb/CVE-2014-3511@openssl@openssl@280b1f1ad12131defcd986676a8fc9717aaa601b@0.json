{
  "cve_id": "CVE-2014-3511",
  "cve_desc": "The ssl23_get_client_hello function in s23_srvr.c in OpenSSL 1.0.1 before 1.0.1i allows man-in-the-middle attackers to force the use of TLS 1.0 by triggering ClientHello message fragmentation in communication between a client and server that both support later TLS versions, related to a \"protocol downgrade\" issue.",
  "repo": "openssl/openssl",
  "patch_hash": "280b1f1ad12131defcd986676a8fc9717aaa601b",
  "patch_info": {
    "commit_hash": "280b1f1ad12131defcd986676a8fc9717aaa601b",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/280b1f1ad12131defcd986676a8fc9717aaa601b",
    "files": [
      "ssl/s23_srvr.c"
    ],
    "message": "Fix protocol downgrade bug in case of fragmented packets\n\nCVE-2014-3511\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\nReviewed-by: Bodo M\u00f6ller <bodo@openssl.org>",
    "before_after_code_files": [
      "ssl/s23_srvr.c||ssl/s23_srvr.c"
    ]
  },
  "patch_diff": {
    "ssl/s23_srvr.c||ssl/s23_srvr.c": [
      "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "353:    if (p[3] == 0 && p[4] < 6)",
      "354:     {",
      "356:     SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_RECORD_TOO_SMALL);",
      "357:     goto err;",
      "361:     }",
      "368:     v[1]=0xff;",
      "369:    else",
      "",
      "[Removed Lines]",
      "355: #if 0",
      "358: #else",
      "359:     v[1] = TLS1_VERSION_MINOR;",
      "360: #endif",
      "367:    else if (p[9] > SSL3_VERSION_MAJOR)",
      "",
      "[Added Lines]",
      "363:    if (p[9] > SSL3_VERSION_MAJOR)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "458:   v[1] = p[4];",
      "460:   n=((p[0]&0x7f)<<8)|p[1];",
      "461:   if (n > (1024*4))",
      "462:    {",
      "463:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_RECORD_TOO_LARGE);",
      "464:    goto err;",
      "465:    }",
      "467:   j=ssl23_read_bytes(s,n+2);",
      "468:   if (j <= 0) return(j);",
      "470:   ssl3_finish_mac(s, s->packet+2, s->packet_length-2);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "474:   if (n < 9)",
      "475:    {",
      "476:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_RECORD_LENGTH_MISMATCH);",
      "477:    goto err;",
      "478:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "28d59af8740680c89e22ac19304457f2163e4371",
      "candidate_info": {
        "commit_hash": "28d59af8740680c89e22ac19304457f2163e4371",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/28d59af8740680c89e22ac19304457f2163e4371",
        "files": [
          "ssl/Makefile",
          "ssl/d1_pkt.c",
          "ssl/record/rec_layer.h",
          "ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_buffer.h",
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c",
          "ssl/s3_both.c",
          "ssl/s3_lib.c",
          "ssl/s3_pkt.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Encapsulate SSL3_BUFFER and all access to s->s3->rbuf.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c",
          "ssl/record/rec_layer.h||ssl/record/rec_layer.h",
          "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_buffer.h||ssl/record/ssl3_buffer.h",
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c",
          "ssl/s3_both.c||ssl/s3_both.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_pkt.c||ssl/s3_pkt.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     rdata = (DTLS1_RECORD_DATA *)item->data;",
          "204:     s->packet = rdata->packet;",
          "205:     s->packet_length = rdata->packet_length;",
          "207:     memcpy(&(s->s3->rrec), &(rdata->rrec), sizeof(SSL3_RECORD));",
          "",
          "[Removed Lines]",
          "201:     if (s->s3->rbuf.buf != NULL)",
          "202:         OPENSSL_free(s->s3->rbuf.buf);",
          "206:     memcpy(&(s->s3->rbuf), &(rdata->rbuf), sizeof(SSL3_BUFFER));",
          "",
          "[Added Lines]",
          "201:     SSL3_BUFFER_release(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "205:     memcpy(RECORD_LAYER_get_rbuf(&s->rlayer), &(rdata->rbuf),",
          "206:         sizeof(SSL3_BUFFER));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     rdata->packet = s->packet;",
          "238:     rdata->packet_length = s->packet_length;",
          "240:     memcpy(&(rdata->rrec), &(s->s3->rrec), sizeof(SSL3_RECORD));",
          "242:     item->data = rdata;",
          "",
          "[Removed Lines]",
          "239:     memcpy(&(rdata->rbuf), &(s->s3->rbuf), sizeof(SSL3_BUFFER));",
          "",
          "[Added Lines]",
          "239:     memcpy(&(rdata->rbuf), RECORD_LAYER_get_rbuf(&s->rlayer),",
          "240:         sizeof(SSL3_BUFFER));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:     s->packet = NULL;",
          "255:     s->packet_length = 0;",
          "257:     memset(&(s->s3->rrec), 0, sizeof(SSL3_RECORD));",
          "259:     if (!ssl3_setup_buffers(s)) {",
          "",
          "[Removed Lines]",
          "256:     memset(&(s->s3->rbuf), 0, sizeof(SSL3_BUFFER));",
          "",
          "[Added Lines]",
          "257:     memset(RECORD_LAYER_get_rbuf(&s->rlayer), 0, sizeof(SSL3_BUFFER));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "545:     if ((s->rstate != SSL_ST_READ_BODY) ||",
          "546:         (s->packet_length < DTLS1_RT_HEADER_LENGTH)) {",
          "549:         if (n <= 0)",
          "",
          "[Removed Lines]",
          "547:         n = ssl3_read_n(s, DTLS1_RT_HEADER_LENGTH, s->s3->rbuf.len, 0);",
          "",
          "[Added Lines]",
          "548:         n = ssl3_read_n(s, DTLS1_RT_HEADER_LENGTH,",
          "549:             SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer)), 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "722:     SSL3_RECORD *rr;",
          "723:     void (*cb) (const SSL *ssl, int type2, int val) = NULL;",
          "726:         if (!ssl3_setup_buffers(s))",
          "727:             return (-1);",
          "729:     if ((type && (type != SSL3_RT_APPLICATION_DATA) &&",
          "730:          (type != SSL3_RT_HANDSHAKE)) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727:     if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer))) {",
          "731:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1047:                 }",
          "1049:                 if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1051:                         BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1054:                     if (SSL3_BUFFER_get_left(",
          "1055:                         RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1269:         }",
          "1271:         if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1273:                 BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1278:             if (SSL3_BUFFER_get_left(",
          "1279:                 RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer.h||ssl/record/rec_layer.h": [
          "File: ssl/record/rec_layer.h -> ssl/record/rec_layer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: typedef struct record_layer_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     SSL *s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     int read_ahead;",
          "118: } RECORD_LAYER;",
          "120: #define RECORD_LAYER_set_read_ahead(rl, ra)     ((rl)->read_ahead = (ra))",
          "121: #define RECORD_LAYER_get_read_ahead(rl)         ((rl)->read_ahead)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #define RECORD_LAYER_set_ssl(rl, s)             ((rl)->s = (s))",
          "125: #define RECORD_LAYER_get_rbuf(rl)               (&(rl)->s->s3->rbuf)",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c": [
          "File: ssl/record/ssl3_buffer.c -> ssl/record/ssl3_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: #include \"../ssl_locl.h\"",
          "114: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, unsigned char *d, int n)",
          "115: {",
          "116:     if(d != NULL)",
          "117:         memcpy(b->buf, d, n);",
          "118:     b->left = n;",
          "119:     b->offset = 0;",
          "120: }",
          "122: void SSL3_BUFFER_release(SSL3_BUFFER *b)",
          "123: {",
          "124:     if (b->buf != NULL)",
          "125:         OPENSSL_free(b->buf);",
          "126:     b->buf = NULL;",
          "127: }",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.h||ssl/record/ssl3_buffer.h": [
          "File: ssl/record/ssl3_buffer.h -> ssl/record/ssl3_buffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: typedef struct ssl3_buffer_st {",
          "114:     unsigned char *buf;",
          "116:     size_t len;",
          "118:     int offset;",
          "120:     int left;",
          "121: } SSL3_BUFFER;",
          "123: #define SSL3_BUFFER_get_buf(b)              ((b)->buf)",
          "124: #define SSL3_BUFFER_set_buf(b, n)           ((b)->buf = (n))",
          "125: #define SSL3_BUFFER_get_len(b)              ((b)->len)",
          "126: #define SSL3_BUFFER_set_len(b, l)           ((b)->len = (l))",
          "127: #define SSL3_BUFFER_get_left(b)             ((b)->left)",
          "128: #define SSL3_BUFFER_is_initialised(b)       ((b)->buf != NULL)",
          "130: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, unsigned char *d, int n);",
          "131: void SSL3_BUFFER_release(SSL3_BUFFER *b);",
          "",
          "---------------"
        ],
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482: static int ssl23_get_server_hello(SSL *s)",
          "483: {",
          "485:     unsigned char *p;",
          "486:     int i;",
          "487:     int n;",
          "",
          "[Removed Lines]",
          "484:     char buf[8];",
          "",
          "[Added Lines]",
          "484:     unsigned char buf[8];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:         s->rstate = SSL_ST_READ_HEADER;",
          "577:         s->packet_length = n;",
          "579:             if (!ssl3_setup_read_buffer(s))",
          "580:                 goto err;",
          "586:         s->handshake_func = s->method->ssl_connect;",
          "587:     } else {",
          "",
          "[Removed Lines]",
          "578:         if (s->s3->rbuf.buf == NULL)",
          "581:         s->packet = &(s->s3->rbuf.buf[0]);",
          "582:         memcpy(s->packet, buf, n);",
          "583:         s->s3->rbuf.left = n;",
          "584:         s->s3->rbuf.offset = 0;",
          "",
          "[Added Lines]",
          "578:         if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "581:         s->packet = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "582:         SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), buf, n);",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:     unsigned char *p, *d, *d_len, *dd;",
          "250:     unsigned int i;",
          "251:     unsigned int csl, sil, cl;",
          "",
          "[Removed Lines]",
          "247:     char buf_space[11];",
          "248:     char *buf = &(buf_space[0]);",
          "",
          "[Added Lines]",
          "247:     unsigned char buf_space[11];",
          "248:     unsigned char *buf = &(buf_space[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:             s->rstate = SSL_ST_READ_HEADER;",
          "560:             s->packet_length = n;",
          "562:                 if (!ssl3_setup_read_buffer(s))",
          "563:                     goto err;",
          "569:         } else {",
          "570:             s->packet_length = 0;",
          "573:         }",
          "574:         s->handshake_func = s->method->ssl_accept;",
          "575:     } else {",
          "",
          "[Removed Lines]",
          "561:             if (s->s3->rbuf.buf == NULL)",
          "565:             s->packet = &(s->s3->rbuf.buf[0]);",
          "566:             memcpy(s->packet, buf, n);",
          "567:             s->s3->rbuf.left = n;",
          "568:             s->s3->rbuf.offset = 0;",
          "571:             s->s3->rbuf.left = 0;",
          "572:             s->s3->rbuf.offset = 0;",
          "",
          "[Added Lines]",
          "561:             if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "565:             s->packet = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "566:             SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), buf, n);",
          "569:             SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), NULL, 0);",
          "",
          "---------------"
        ],
        "ssl/s3_both.c||ssl/s3_both.c": [
          "File: ssl/s3_both.c -> ssl/s3_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "577: {",
          "578:     unsigned char *p;",
          "579:     size_t len, align = 0, headerlen;",
          "581:     if (SSL_version(s) == DTLS1_VERSION || SSL_version(s) == DTLS1_BAD_VER)",
          "582:         headerlen = DTLS1_RT_HEADER_LENGTH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:     SSL3_BUFFER *b;",
          "582:     b = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:     align = (-SSL3_RT_HEADER_LENGTH) & (SSL3_ALIGN_PAYLOAD - 1);",
          "588: #endif",
          "591:         len = SSL3_RT_MAX_PLAIN_LENGTH",
          "592:             + SSL3_RT_MAX_ENCRYPTED_OVERHEAD + headerlen + align;",
          "593:         if (s->options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER) {",
          "",
          "[Removed Lines]",
          "590:     if (s->s3->rbuf.buf == NULL) {",
          "",
          "[Added Lines]",
          "593:     if (b->buf == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "600: #endif",
          "601:         if ((p = OPENSSL_malloc(len)) == NULL)",
          "602:             goto err;",
          "605:     }",
          "608:     return 1;",
          "610:  err:",
          "",
          "[Removed Lines]",
          "603:         s->s3->rbuf.buf = p;",
          "604:         s->s3->rbuf.len = len;",
          "607:     s->packet = &(s->s3->rbuf.buf[0]);",
          "",
          "[Added Lines]",
          "606:         b->buf = p;",
          "607:         b->len = len;",
          "610:     s->packet = &(b->buf[0]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "670: int ssl3_release_read_buffer(SSL *s)",
          "671: {",
          "675:     }",
          "676:     return 1;",
          "677: }",
          "",
          "[Removed Lines]",
          "672:     if (s->s3->rbuf.buf != NULL) {",
          "673:         OPENSSL_free(s->s3->rbuf.buf);",
          "674:         s->s3->rbuf.buf = NULL;",
          "",
          "[Added Lines]",
          "675:     SSL3_BUFFER *b;",
          "677:     b = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "678:     if (b->buf != NULL) {",
          "679:         OPENSSL_free(b->buf);",
          "680:         b->buf = NULL;",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3131:         return;",
          "3133:     ssl3_cleanup_key_block(s);",
          "3135:         ssl3_release_read_buffer(s);",
          "3136:     if (s->s3->wbuf.buf != NULL)",
          "3137:         ssl3_release_write_buffer(s);",
          "",
          "[Removed Lines]",
          "3134:     if (s->s3->rbuf.buf != NULL)",
          "",
          "[Added Lines]",
          "3134:     if (SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3194:     wp = s->s3->wbuf.buf;",
          "3196:     wlen = s->s3->wbuf.len;",
          "3197:     init_extra = s->s3->init_extra;",
          "3198:     BIO_free(s->s3->handshake_buffer);",
          "",
          "[Removed Lines]",
          "3193:     rp = s->s3->rbuf.buf;",
          "3195:     rlen = s->s3->rbuf.len;",
          "",
          "[Added Lines]",
          "3193:     rp = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "3195:     rlen = SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3207:     }",
          "3208: #endif",
          "3209:     memset(s->s3, 0, sizeof *s->s3);",
          "3211:     s->s3->wbuf.buf = wp;",
          "3213:     s->s3->wbuf.len = wlen;",
          "3214:     s->s3->init_extra = init_extra;",
          "",
          "[Removed Lines]",
          "3210:     s->s3->rbuf.buf = rp;",
          "3212:     s->s3->rbuf.len = rlen;",
          "",
          "[Added Lines]",
          "3210:     SSL3_BUFFER_set_buf(RECORD_LAYER_get_rbuf(&s->rlayer), rp);",
          "3212:     SSL3_BUFFER_set_len(RECORD_LAYER_get_rbuf(&s->rlayer), rlen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4494:     int ret = 0;",
          "4496:     if (s->s3->renegotiate) {",
          "4498:             (s->s3->wbuf.left == 0) && !SSL_in_init(s)) {",
          "",
          "[Removed Lines]",
          "4497:         if ((s->s3->rbuf.left == 0) &&",
          "",
          "[Added Lines]",
          "4497:         if ((SSL3_BUFFER_get_left(RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) &&",
          "",
          "---------------"
        ],
        "ssl/s3_pkt.c||ssl/s3_pkt.c": [
          "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     if (n <= 0)",
          "154:         return n;",
          "157:     if (rb->buf == NULL)",
          "158:         if (!ssl3_setup_read_buffer(s))",
          "159:             return -1;",
          "",
          "[Removed Lines]",
          "156:     rb = &(s->s3->rbuf);",
          "",
          "[Added Lines]",
          "156:     rb = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:     if ((s->rstate != SSL_ST_READ_BODY) ||",
          "338:         (s->packet_length < SSL3_RT_HEADER_LENGTH)) {",
          "340:         if (n <= 0)",
          "342:         s->rstate = SSL_ST_READ_BODY;",
          "",
          "[Removed Lines]",
          "339:         n = ssl3_read_n(s, SSL3_RT_HEADER_LENGTH, s->s3->rbuf.len, 0);",
          "",
          "[Added Lines]",
          "339:         n = ssl3_read_n(s, SSL3_RT_HEADER_LENGTH,",
          "340:             SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer)), 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373:             goto err;",
          "374:         }",
          "377:             al = SSL_AD_RECORD_OVERFLOW;",
          "378:             SSLerr(SSL_F_SSL3_GET_RECORD, SSL_R_PACKET_LENGTH_TOO_LONG);",
          "379:             goto f_err;",
          "",
          "[Removed Lines]",
          "376:         if (rr->length > s->s3->rbuf.len - SSL3_RT_HEADER_LENGTH) {",
          "",
          "[Added Lines]",
          "377:         if (rr->length >",
          "378:                 SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer))",
          "379:                 - SSL3_RT_HEADER_LENGTH) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1174:     SSL3_RECORD *rr;",
          "1175:     void (*cb) (const SSL *ssl, int type2, int val) = NULL;",
          "1178:         if (!ssl3_setup_read_buffer(s))",
          "1179:             return (-1);",
          "1181:     if ((type && (type != SSL3_RT_APPLICATION_DATA)",
          "1182:          && (type != SSL3_RT_HANDSHAKE)) || (peek",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1180:     if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer))) {",
          "1184:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1288:                 s->rstate = SSL_ST_READ_HEADER;",
          "1289:                 rr->off = 0;",
          "1290:                 if (s->mode & SSL_MODE_RELEASE_BUFFERS",
          "1292:                     ssl3_release_read_buffer(s);",
          "1293:             }",
          "1294:         }",
          "",
          "[Removed Lines]",
          "1291:                     && s->s3->rbuf.left == 0)",
          "",
          "[Added Lines]",
          "1296:                     && SSL3_BUFFER_get_left(",
          "1297:                         RECORD_LAYER_get_rbuf(&s->rlayer)) == 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1391:                 }",
          "1393:                 if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1395:                         BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:                     if (SSL3_BUFFER_get_left(",
          "1401:                         RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1563:         }",
          "1565:         if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1567:                 BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1574:             if (SSL3_BUFFER_get_left(RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:         goto err;",
          "281:     memset(s, 0, sizeof(SSL));",
          "283: #ifndef OPENSSL_NO_KRB5",
          "284:     s->kssl_ctx = kssl_ctx_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     RECORD_LAYER_set_ssl(&s->rlayer, s);",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: # include <openssl/symhacks.h>",
          "168: #include \"record/rec_layer.h\"",
          "170: # ifdef OPENSSL_BUILD_SHLIBSSL",
          "171: #  undef OPENSSL_EXTERN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: #include \"record/ssl3_buffer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "979:     int type;",
          "981:     const SSL_METHOD *method;",
          "",
          "[Removed Lines]",
          "983:     RECORD_LAYER rlayer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1222:     int (*not_resumable_session_cb) (SSL *ssl, int is_forward_secure);",
          "1223: };",
          "1225: typedef struct ssl3_record_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1223:     RECORD_LAYER rlayer;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1265: } SSL3_RECORD;",
          "1278: typedef struct ssl3_state_st {",
          "1279:     long flags;",
          "1280:     int delay_buf_pop_ret;",
          "",
          "[Removed Lines]",
          "1267: typedef struct ssl3_buffer_st {",
          "1269:     unsigned char *buf;",
          "1271:     size_t len;",
          "1273:     int offset;",
          "1275:     int left;",
          "1276: } SSL3_BUFFER;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e636e2acd753fb68f587c9fac2f381ad8c153528",
      "candidate_info": {
        "commit_hash": "e636e2acd753fb68f587c9fac2f381ad8c153528",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e636e2acd753fb68f587c9fac2f381ad8c153528",
        "files": [
          "apps/ciphers.c",
          "apps/s_client.c",
          "apps/s_time.c",
          "crypto/bn/bn.h",
          "crypto/dh/dh.h",
          "crypto/ec/ec_curve.c",
          "demos/easy_tls/easy-tls.c",
          "ssl/s23_srvr.c",
          "ssl/s3_clnt.c",
          "ssl/s3_enc.c",
          "ssl/s3_pkt.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_sess.c",
          "ssl/ssltest.c",
          "ssl/t1_enc.c",
          "ssl/t1_lib.c",
          "ssl/tls1.h"
        ],
        "message": "Fix source where indent will not be able to cope\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "apps/ciphers.c||apps/ciphers.c",
          "apps/s_client.c||apps/s_client.c",
          "apps/s_time.c||apps/s_time.c",
          "crypto/bn/bn.h||crypto/bn/bn.h",
          "crypto/dh/dh.h||crypto/dh/dh.h",
          "crypto/ec/ec_curve.c||crypto/ec/ec_curve.c",
          "demos/easy_tls/easy-tls.c||demos/easy_tls/easy-tls.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_enc.c||ssl/s3_enc.c",
          "ssl/s3_pkt.c||ssl/s3_pkt.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_sess.c||ssl/ssl_sess.c",
          "ssl/ssltest.c||ssl/ssltest.c",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "ssl/tls1.h||ssl/tls1.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/ciphers.c||apps/ciphers.c": [
          "File: apps/ciphers.c -> apps/ciphers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     int id3 = (int)(id & 0xffL);",
          "205:     if ((id & 0xff000000L) == 0x03000000L)",
          "207:     else",
          "209:     }",
          "210: #ifndef OPENSSL_NO_SSL_TRACE",
          "211:    if (stdname)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:      {",
          "208:      BIO_printf(STDout, \"          0x%02X,0x%02X - \", id2, id3);",
          "209:      }",
          "211:      {",
          "213:      BIO_printf(STDout, \"0x%02X,0x%02X,0x%02X,0x%02X - \", id0, id1, id2, id3);",
          "214:      }",
          "",
          "---------------"
        ],
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c"
        ],
        "apps/s_time.c||apps/s_time.c": [
          "File: apps/s_time.c -> apps/s_time.c"
        ],
        "crypto/bn/bn.h||crypto/bn/bn.h": [
          "File: crypto/bn/bn.h -> crypto/bn/bn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "560: #define BN_GF2m_sub(r, a, b) BN_GF2m_add(r, a, b)",
          "562: int BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,",
          "564: int BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,",
          "566: int BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *b, const BIGNUM *p,",
          "568: int BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,",
          "570: int BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,",
          "572: int BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,",
          "574: int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,",
          "576: #define BN_GF2m_cmp(a, b) BN_ucmp((a), (b))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: int BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);",
          "563: int BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p);",
          "566:  const BIGNUM *p, BN_CTX *ctx);",
          "569:  BN_CTX *ctx);",
          "572:  BN_CTX *ctx);",
          "575:  const BIGNUM *p, BN_CTX *ctx);",
          "578:  const BIGNUM *p, BN_CTX *ctx);",
          "581:  BN_CTX *ctx);",
          "584:  BN_CTX *ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "583: int BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[]);",
          "585: int BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,",
          "587: int BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],",
          "589: int BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *b, const int p[],",
          "591: int BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,",
          "593: int BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,",
          "595: int BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a,",
          "597: int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a,",
          "599: int BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max);",
          "600: int BN_GF2m_arr2poly(const int p[], BIGNUM *a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:  const int p[], BN_CTX *ctx);",
          "599:  BN_CTX *ctx);",
          "602:  BN_CTX *ctx);",
          "605:  const int p[], BN_CTX *ctx);",
          "608:  const int p[], BN_CTX *ctx);",
          "611:  const int p[], BN_CTX *ctx);",
          "614:  const int p[], BN_CTX *ctx);",
          "",
          "---------------"
        ],
        "crypto/dh/dh.h||crypto/dh/dh.h": [
          "File: crypto/dh/dh.h -> crypto/dh/dh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:  int (*generate_key)(DH *dh);",
          "119:  int (*compute_key)(unsigned char *key,const BIGNUM *pub_key,DH *dh);",
          "120:  int (*bn_mod_exp)(const DH *dh, BIGNUM *r, const BIGNUM *a,",
          "121:     const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx,",
          "124:  int (*init)(DH *dh);",
          "125:  int (*finish)(DH *dh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     BN_MONT_CTX *m_ctx);",
          "",
          "---------------"
        ],
        "crypto/ec/ec_curve.c||crypto/ec/ec_curve.c": [
          "File: crypto/ec/ec_curve.c -> crypto/ec/ec_curve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: static const struct { EC_CURVE_DATA h; unsigned char data[20+24*6]; }",
          "90:  _EC_NIST_PRIME_192 = {",
          "91:  { NID_X9_62_prime_field,20,24,1 },",
          "93:    0x95,0x28,0xD3,0x81,0x20,0xEA,0xE1,0x21,0x96,0xD5,",
          "96:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,",
          "97:    0xFF,0xFF,0xFF,0xFF,",
          "99:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,",
          "100:    0xFF,0xFF,0xFF,0xFC,",
          "102:    0xE9,0xAB,0x72,0x24,0x30,0x49,0xFE,0xB8,0xDE,0xEC,",
          "103:    0xC1,0x46,0xB9,0xB1,",
          "105:    0x20,0xEB,0x43,0xA1,0x88,0x00,0xF4,0xFF,0x0A,0xFD,",
          "106:    0x82,0xFF,0x10,0x12,",
          "108:    0x11,0xed,0x6b,0x24,0xcd,0xd5,0x73,0xf9,0x77,0xa1,",
          "109:    0x1e,0x79,0x48,0x11,",
          "111:    0xFF,0xFF,0x99,0xDE,0xF8,0x36,0x14,0x6B,0xC9,0xB1,",
          "112:    0xB4,0xD2,0x28,0x31 }",
          "113:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:  {",
          "94:    0x30,0x45,0xAE,0x6F,0xC8,0x42,0x2F,0x64,0xED,0x57,",
          "98:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "103:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "108:    0x64,0x21,0x05,0x19,0xE5,0x9C,0x80,0xE7,0x0F,0xA7,",
          "113:    0x18,0x8D,0xA8,0x0E,0xB0,0x30,0x90,0xF6,0x7C,0xBF,",
          "118:    0x07,0x19,0x2b,0x95,0xff,0xc8,0xda,0x78,0x63,0x10,",
          "123:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: static const struct { EC_CURVE_DATA h; unsigned char data[20+28*6]; }",
          "116:  _EC_NIST_PRIME_224 = {",
          "117:  { NID_X9_62_prime_field,20,28,1 },",
          "119:    0xB5,0x9F,0xA3,0xB9,0xAB,0x8F,0x6A,0x94,0x8B,0xC5,",
          "122:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,",
          "123:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "125:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,",
          "126:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,",
          "128:    0x32,0x56,0x50,0x44,0xB0,0xB7,0xD7,0xBF,0xD8,0xBA,",
          "129:    0x27,0x0B,0x39,0x43,0x23,0x55,0xFF,0xB4,",
          "131:    0x90,0xB9,0x4A,0x03,0xC1,0xD3,0x56,0xC2,0x11,0x22,",
          "132:    0x34,0x32,0x80,0xD6,0x11,0x5C,0x1D,0x21,",
          "134:    0xdf,0xe6,0xcd,0x43,0x75,0xa0,0x5a,0x07,0x47,0x64,",
          "135:    0x44,0xd5,0x81,0x99,0x85,0x00,0x7e,0x34,",
          "137:    0xFF,0xFF,0xFF,0xFF,0x16,0xA2,0xE0,0xB8,0xF0,0x3E,",
          "138:    0x13,0xDD,0x29,0x45,0x5C,0x5C,0x2A,0x3D }",
          "139:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:  {",
          "133:    0xBD,0x71,0x34,0x47,0x99,0xD5,0xC7,0xFC,0xDC,0x45,",
          "137:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "142:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "147:    0xB4,0x05,0x0A,0x85,0x0C,0x04,0xB3,0xAB,0xF5,0x41,",
          "152:    0xB7,0x0E,0x0C,0xBD,0x6B,0xB4,0xBF,0x7F,0x32,0x13,",
          "157:    0xbd,0x37,0x63,0x88,0xb5,0xf7,0x23,0xfb,0x4c,0x22,",
          "162:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141: static const struct { EC_CURVE_DATA h; unsigned char data[20+48*6]; }",
          "142:  _EC_NIST_PRIME_384 = {",
          "143:  { NID_X9_62_prime_field,20,48,1 },",
          "145:    0x89,0x6A,0x67,0x73,0xA4,0x82,0x7A,0xCD,0xAC,0x73,",
          "148:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "149:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "150:    0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,",
          "151:    0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,",
          "153:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "154:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "155:    0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,",
          "156:    0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFC,",
          "158:    0x05,0x6B,0xE3,0xF8,0x2D,0x19,0x18,0x1D,0x9C,0x6E,",
          "159:    0xFE,0x81,0x41,0x12,0x03,0x14,0x08,0x8F,0x50,0x13,",
          "160:    0x87,0x5A,0xC6,0x56,0x39,0x8D,0x8A,0x2E,0xD1,0x9D,",
          "161:    0x2A,0x85,0xC8,0xED,0xD3,0xEC,0x2A,0xEF,",
          "163:    0xC7,0x1E,0xF3,0x20,0xAD,0x74,0x6E,0x1D,0x3B,0x62,",
          "164:    0x8B,0xA7,0x9B,0x98,0x59,0xF7,0x41,0xE0,0x82,0x54,",
          "165:    0x2A,0x38,0x55,0x02,0xF2,0x5D,0xBF,0x55,0x29,0x6C,",
          "166:    0x3A,0x54,0x5E,0x38,0x72,0x76,0x0A,0xB7,",
          "168:    0x98,0xbf,0x92,0x92,0xdc,0x29,0xf8,0xf4,0x1d,0xbd,",
          "169:    0x28,0x9a,0x14,0x7c,0xe9,0xda,0x31,0x13,0xb5,0xf0,",
          "170:    0xb8,0xc0,0x0a,0x60,0xb1,0xce,0x1d,0x7e,0x81,0x9d,",
          "171:    0x7a,0x43,0x1d,0x7c,0x90,0xea,0x0e,0x5f,",
          "173:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "174:    0xFF,0xFF,0xFF,0xFF,0xC7,0x63,0x4D,0x81,0xF4,0x37,",
          "175:    0x2D,0xDF,0x58,0x1A,0x0D,0xB2,0x48,0xB0,0xA7,0x7A,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:  {",
          "172:    0xA3,0x35,0x92,0x6A,0xA3,0x19,0xA2,0x7A,0x1D,0x00,",
          "176:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "183:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "189:    0xB3,0x31,0x2F,0xA7,0xE2,0x3E,0xE7,0xE4,0x98,0x8E,",
          "195:    0xAA,0x87,0xCA,0x22,0xBE,0x8B,0x05,0x37,0x8E,0xB1,",
          "201:    0x36,0x17,0xde,0x4a,0x96,0x26,0x2c,0x6f,0x5d,0x9e,",
          "207:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179: static const struct { EC_CURVE_DATA h; unsigned char data[20+66*6]; }",
          "180:  _EC_NIST_PRIME_521 = {",
          "181:  { NID_X9_62_prime_field,20,66,1 },",
          "183:    0x67,0x17,0x39,0x32,0x84,0xAA,0xA0,0xDA,0x64,0xBA,",
          "186:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "187:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "188:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "189:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "190:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "191:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "193:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "194:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "195:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "196:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "197:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "198:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,",
          "200:    0x92,0x9A,0x21,0xA0,0xB6,0x85,0x40,0xEE,0xA2,0xDA,",
          "201:    0x72,0x5B,0x99,0xB3,0x15,0xF3,0xB8,0xB4,0x89,0x91,",
          "202:    0x8E,0xF1,0x09,0xE1,0x56,0x19,0x39,0x51,0xEC,0x7E,",
          "203:    0x93,0x7B,0x16,0x52,0xC0,0xBD,0x3B,0xB1,0xBF,0x07,",
          "204:    0x35,0x73,0xDF,0x88,0x3D,0x2C,0x34,0xF1,0xEF,0x45,",
          "205:    0x1F,0xD4,0x6B,0x50,0x3F,0x00,",
          "207:    0x9E,0x3E,0xCB,0x66,0x23,0x95,0xB4,0x42,0x9C,0x64,",
          "208:    0x81,0x39,0x05,0x3F,0xB5,0x21,0xF8,0x28,0xAF,0x60,",
          "209:    0x6B,0x4D,0x3D,0xBA,0xA1,0x4B,0x5E,0x77,0xEF,0xE7,",
          "210:    0x59,0x28,0xFE,0x1D,0xC1,0x27,0xA2,0xFF,0xA8,0xDE,",
          "211:    0x33,0x48,0xB3,0xC1,0x85,0x6A,0x42,0x9B,0xF9,0x7E,",
          "212:    0x7E,0x31,0xC2,0xE5,0xBD,0x66,",
          "214:    0x5c,0x8a,0x5f,0xb4,0x2c,0x7d,0x1b,0xd9,0x98,0xf5,",
          "215:    0x44,0x49,0x57,0x9b,0x44,0x68,0x17,0xaf,0xbd,0x17,",
          "216:    0x27,0x3e,0x66,0x2c,0x97,0xee,0x72,0x99,0x5e,0xf4,",
          "217:    0x26,0x40,0xc5,0x50,0xb9,0x01,0x3f,0xad,0x07,0x61,",
          "218:    0x35,0x3c,0x70,0x86,0xa2,0x72,0xc2,0x40,0x88,0xbe,",
          "219:    0x94,0x76,0x9f,0xd1,0x66,0x50,",
          "221:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "222:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "223:    0xFF,0xFF,0xFF,0xFA,0x51,0x86,0x87,0x83,0xBF,0x2F,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:  {",
          "219:    0xD0,0x9E,0x88,0x00,0x29,0x1C,0xB8,0x53,0x96,0xCC,",
          "223:    0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "232:    0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "241:    0x00,0x51,0x95,0x3E,0xB9,0x61,0x8E,0x1C,0x9A,0x1F,",
          "250:    0x00,0xC6,0x85,0x8E,0x06,0xB7,0x04,0x04,0xE9,0xCD,",
          "259:    0x01,0x18,0x39,0x29,0x6a,0x78,0x9a,0x3b,0xc0,0x04,",
          "268:    0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230: static const struct { EC_CURVE_DATA h; unsigned char data[20+24*6]; }",
          "231:  _EC_X9_62_PRIME_192V2 = {",
          "232:  { NID_X9_62_prime_field,20,24,1 },",
          "234:    0x11,0x3E,0x99,0x07,0x10,0xF0,0xD2,0x1A,0xC6,0xB6,",
          "237:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,",
          "238:    0xFF,0xFF,0xFF,0xFF,",
          "240:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,",
          "241:    0xFF,0xFF,0xFF,0xFC,",
          "243:    0x0D,0x63,0x64,0xA4,0xE5,0x98,0x0C,0x39,0x3A,0xA2,",
          "244:    0x16,0x68,0xD9,0x53,",
          "246:    0x77,0x69,0xCF,0xE9,0xC9,0x89,0xC0,0x72,0xAD,0x69,",
          "247:    0x6F,0x48,0x03,0x4A,",
          "249:    0xb8,0x2a,0x08,0x3d,0xf2,0xf2,0xb0,0x84,0x7d,0xe9,",
          "250:    0x70,0xb2,0xde,0x15,",
          "252:    0xFF,0xFE,0x5F,0xB1,0xA7,0x24,0xDC,0x80,0x41,0x86,",
          "253:    0x48,0xD8,0xDD,0x31 }",
          "254:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:  {",
          "283:    0x31,0xA9,0x2E,0xE2,0x02,0x9F,0xD1,0x0D,0x90,0x1B,",
          "287:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "292:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "297:    0xCC,0x22,0xD6,0xDF,0xB9,0x5C,0x6B,0x25,0xE4,0x9C,",
          "302:    0xEE,0xA2,0xBA,0xE7,0xE1,0x49,0x78,0x42,0xF2,0xDE,",
          "307:    0x65,0x74,0xd1,0x1d,0x69,0xb6,0xec,0x7a,0x67,0x2b,",
          "312:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256: static const struct { EC_CURVE_DATA h; unsigned char data[20+24*6]; }",
          "257:  _EC_X9_62_PRIME_192V3 = {",
          "258:  { NID_X9_62_prime_field,20,24,1 },",
          "260:    0x5C,0xA9,0x59,0x1E,0x2A,0x57,0x63,0x05,0x9A,0x2E,",
          "263:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,",
          "264:    0xFF,0xFF,0xFF,0xFF,",
          "266:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,",
          "267:    0xFF,0xFF,0xFF,0xFC,",
          "269:    0x3D,0xAE,0xCC,0xC9,0x47,0x60,0xA7,0xD4,0x62,0x25,",
          "270:    0x6B,0xD5,0x69,0x16,",
          "272:    0x37,0x16,0x58,0x8D,0xCE,0x2B,0x8B,0x4A,0xEE,0x8E,",
          "273:    0x22,0x8F,0x18,0x96,",
          "275:    0xdc,0xb6,0x6a,0x6d,0xc8,0xf9,0x97,0x8a,0xca,0x76,",
          "276:    0x48,0xa9,0x43,0xb0,",
          "278:    0xFF,0xFF,0x7A,0x62,0xD0,0x31,0xC8,0x3F,0x42,0x94,",
          "279:    0xF6,0x40,0xEC,0x13 }",
          "280:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:  {",
          "322:    0xC4,0x69,0x68,0x44,0x35,0xDE,0xB3,0x78,0xC4,0xB6,",
          "326:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "331:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "336:    0x22,0x12,0x3D,0xC2,0x39,0x5A,0x05,0xCA,0xA7,0x42,",
          "341:    0x7D,0x29,0x77,0x81,0x00,0xC6,0x5A,0x1D,0xA1,0x78,",
          "346:    0x38,0xa9,0x0f,0x22,0x63,0x73,0x37,0x33,0x4b,0x49,",
          "351:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "282: static const struct { EC_CURVE_DATA h; unsigned char data[20+30*6]; }",
          "283:  _EC_X9_62_PRIME_239V1 = {",
          "284:  { NID_X9_62_prime_field,20,30,1 },",
          "286:    0x75,0x79,0x8E,0x94,0x80,0x60,0xF8,0x32,0x1B,0x7D,",
          "289:    0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,",
          "290:    0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "293:    0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,",
          "294:    0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,",
          "297:    0x54,0x92,0x14,0x75,0xCA,0x71,0xA9,0xDB,0x2F,0xB2,",
          "298:    0x7D,0x1D,0x37,0x79,0x61,0x85,0xC2,0x94,0x2C,0x0A,",
          "301:    0xB8,0x64,0x2B,0xED,0xF9,0x05,0xC3,0xD3,0x58,0x57,",
          "302:    0x3D,0x3F,0x27,0xFB,0xBD,0x3B,0x3C,0xB9,0xAA,0xAF,",
          "305:    0x54,0xca,0x53,0x0b,0xa0,0x46,0x54,0xb3,0x68,0x18,",
          "306:    0xce,0x22,0x6b,0x39,0xfc,0xcb,0x7b,0x02,0xf1,0xae,",
          "309:    0xFF,0xFF,0x7F,0xFF,0xFF,0x9E,0x5E,0x9A,0x9F,0x5D,",
          "310:    0x90,0x71,0xFB,0xD1,0x52,0x26,0x88,0x90,0x9D,0x0B }",
          "311:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359:  {",
          "361:    0xE4,0x3B,0xB4,0x60,0xF0,0xB8,0x0C,0xC0,0xC0,0xB0,",
          "365:    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "370:    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "375:    0x6B,0x01,0x6C,0x3B,0xDC,0xF1,0x89,0x41,0xD0,0xD6,",
          "380:    0x0F,0xFA,0x96,0x3C,0xDC,0xA8,0x81,0x6C,0xCC,0x33,",
          "385:    0x7d,0xeb,0xe8,0xe4,0xe9,0x0a,0x5d,0xae,0x6e,0x40,",
          "390:    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "313: static const struct { EC_CURVE_DATA h; unsigned char data[20+30*6]; }",
          "314:  _EC_X9_62_PRIME_239V2 = {",
          "315:  { NID_X9_62_prime_field,20,30,1 },",
          "317:    0x80,0x99,0x98,0x2B,0xE0,0x9F,0xCB,0x9A,0xE6,0x16,",
          "320:    0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,",
          "321:    0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "324:    0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,",
          "325:    0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,",
          "328:    0x0D,0x99,0xF0,0x24,0x9C,0x3F,0xEE,0x58,0xB9,0x4B,",
          "329:    0xA0,0x03,0x8C,0x7A,0xE8,0x4C,0x8C,0x83,0x2F,0x2C,",
          "332:    0x21,0xBB,0x5E,0x9E,0x26,0x29,0x6A,0x3C,0xDC,0xF2,",
          "333:    0xF3,0x57,0x57,0xA0,0xEA,0xFD,0x87,0xB8,0x30,0xE7,",
          "336:    0xa0,0xfc,0x01,0xd9,0xb0,0x81,0x32,0x9f,0xb5,0x55,",
          "337:    0xde,0x6e,0xf4,0x60,0x23,0x7d,0xff,0x8b,0xe4,0xba,",
          "340:    0xFF,0xFF,0x80,0x00,0x00,0xCF,0xA7,0xE8,0x59,0x43,",
          "341:    0x77,0xD4,0x14,0xC0,0x38,0x21,0xBC,0x58,0x20,0x63 }",
          "342:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:  {",
          "400:    0xE8,0xB4,0x01,0x16,0x04,0x09,0x53,0x03,0xCA,0x3B,",
          "404:    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "409:    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "414:    0x61,0x7F,0xAB,0x68,0x32,0x57,0x6C,0xBB,0xFE,0xD5,",
          "419:    0x38,0xAF,0x09,0xD9,0x87,0x27,0x70,0x51,0x20,0xC9,",
          "424:    0x5b,0x01,0x25,0xe4,0xdb,0xea,0x0e,0xc7,0x20,0x6d,",
          "429:    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "344: static const struct { EC_CURVE_DATA h; unsigned char data[20+30*6]; }",
          "345:  _EC_X9_62_PRIME_239V3 = {",
          "346:  { NID_X9_62_prime_field,20,30,1 },",
          "348:    0x85,0x76,0x86,0xA1,0x94,0x75,0xD3,0xBF,0xA2,0xFF,",
          "351:    0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,",
          "352:    0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "355:    0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,",
          "356:    0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,",
          "359:    0xCB,0x03,0xD6,0xA7,0x50,0xA3,0x0C,0x25,0x01,0x02,",
          "360:    0xD4,0x98,0x87,0x17,0xD9,0xBA,0x15,0xAB,0x6D,0x3E,",
          "363:    0x5C,0x94,0x9A,0xA2,0xC6,0xD9,0x48,0x53,0xD0,0xE6,",
          "364:    0x60,0xBB,0xF8,0x54,0xB1,0xC9,0x50,0x5F,0xE9,0x5A,",
          "367:    0x55,0x2b,0xad,0x22,0x6f,0x3b,0x6f,0xcf,0xe4,0x8b,",
          "368:    0x6e,0x81,0x84,0x99,0xaf,0x18,0xe3,0xed,0x6c,0xf3,",
          "371:    0xFF,0xFF,0x7F,0xFF,0xFF,0x97,0x5D,0xEB,0x41,0xB3,",
          "372:    0xA6,0x05,0x7C,0x3C,0x43,0x21,0x46,0x52,0x65,0x51 }",
          "373:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:  {",
          "440:    0x7D,0x73,0x74,0x16,0x8F,0xFE,0x34,0x71,0xB6,0x0A,",
          "444:    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "449:    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "454:    0x25,0x57,0x05,0xFA,0x2A,0x30,0x66,0x54,0xB1,0xF4,",
          "459:    0x67,0x68,0xAE,0x8E,0x18,0xBB,0x92,0xCF,0xCF,0x00,",
          "464:    0x16,0x07,0xe6,0x89,0x8f,0x39,0x0c,0x06,0xbc,0x1d,",
          "469:    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "376: static const struct { EC_CURVE_DATA h; unsigned char data[20+32*6]; }",
          "377:  _EC_X9_62_PRIME_256V1 = {",
          "378:  { NID_X9_62_prime_field,20,32,1 },",
          "380:    0x78,0xE1,0x13,0x9D,0x26,0xB7,0x81,0x9F,0x7E,0x90,",
          "383:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "384:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "385:    0xFF,0xFF,",
          "387:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "388:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "389:    0xFF,0xFC,",
          "391:    0xBD,0x55,0x76,0x98,0x86,0xBC,0x65,0x1D,0x06,0xB0,",
          "392:    0xCC,0x53,0xB0,0xF6,0x3B,0xCE,0x3C,0x3E,0x27,0xD2,",
          "393:    0x60,0x4B,",
          "395:    0xE6,0xE5,0x63,0xA4,0x40,0xF2,0x77,0x03,0x7D,0x81,",
          "396:    0x2D,0xEB,0x33,0xA0,0xF4,0xA1,0x39,0x45,0xD8,0x98,",
          "397:    0xC2,0x96,",
          "399:    0xeb,0x4a,0x7c,0x0f,0x9e,0x16,0x2b,0xce,0x33,0x57,",
          "400:    0x6b,0x31,0x5e,0xce,0xcb,0xb6,0x40,0x68,0x37,0xbf,",
          "401:    0x51,0xf5,",
          "403:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBC,0xE6,0xFA,0xAD,",
          "404:    0xA7,0x17,0x9E,0x84,0xF3,0xB9,0xCA,0xC2,0xFC,0x63,",
          "405:    0x25,0x51 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:  {",
          "480:    0xC4,0x9D,0x36,0x08,0x86,0xE7,0x04,0x93,0x6A,0x66,",
          "484:    0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,",
          "490:    0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,",
          "496:    0x5A,0xC6,0x35,0xD8,0xAA,0x3A,0x93,0xE7,0xB3,0xEB,",
          "502:    0x6B,0x17,0xD1,0xF2,0xE1,0x2C,0x42,0x47,0xF8,0xBC,",
          "508:    0x4f,0xe3,0x42,0xe2,0xfe,0x1a,0x7f,0x9b,0x8e,0xe7,",
          "514:    0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "409: static const struct { EC_CURVE_DATA h; unsigned char data[20+14*6]; }",
          "410:  _EC_SECG_PRIME_112R1 = {",
          "411:  { NID_X9_62_prime_field,20,14,1 },",
          "413:    0x75,0x61,0x51,0x75,0x29,0x04,0x72,0x78,0x3F,0xB1,",
          "416:    0xBE,0xAD,0x20,0x8B,",
          "418:    0xBE,0xAD,0x20,0x88,",
          "420:    0x11,0x70,0x2B,0x22,",
          "422:    0xF9,0xC2,0xF0,0x98,",
          "424:    0x0f,0xf7,0x75,0x00,",
          "426:    0xAC,0x65,0x61,0xC5 }",
          "427:  };",
          "429: static const struct { EC_CURVE_DATA h; unsigned char data[20+14*6]; }",
          "430:  _EC_SECG_PRIME_112R2 = {",
          "431:  { NID_X9_62_prime_field,20,14,4 },",
          "433:    0x75,0x61,0x51,0x75,0x53,0x16,0xC0,0x5E,0x0B,0xD4,",
          "436:    0xBE,0xAD,0x20,0x8B,",
          "438:    0x5C,0x0E,0xF0,0x2C,",
          "440:    0x4C,0x85,0xD7,0x09,",
          "442:    0xD0,0x92,0x86,0x43,",
          "444:    0x6e,0x95,0x6e,0x97,",
          "446:    0x05,0x20,0xD0,0x4B }",
          "447:  };",
          "449: static const struct { EC_CURVE_DATA h; unsigned char data[20+16*6]; }",
          "450:  _EC_SECG_PRIME_128R1 = {",
          "451:  { NID_X9_62_prime_field,20,16,1 },",
          "453:    0x51,0x75,0x0C,0xC0,0x3A,0x44,0x73,0xD0,0x36,0x79,",
          "456:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "458:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,",
          "460:    0x99,0x3C,0x2C,0xEE,0x5E,0xD3,",
          "462:    0x60,0x7C,0xA5,0x2C,0x5B,0x86,",
          "464:    0xa2,0x92,0xdd,0xed,0x7a,0x83,",
          "466:    0x0D,0x1B,0x90,0x38,0xA1,0x15 }",
          "467:  };",
          "469: static const struct { EC_CURVE_DATA h; unsigned char data[20+16*6]; }",
          "470:  _EC_SECG_PRIME_128R2 = {",
          "471:  { NID_X9_62_prime_field,20,16,4 },",
          "473:    0x12,0xD8,0xF0,0x34,0x31,0xFC,0xE6,0x3B,0x88,0xF4,",
          "476:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "478:    0xCC,0x9B,0xBF,0xF9,0xAE,0xE1,",
          "480:    0x65,0x58,0xBB,0x6D,0x8A,0x5D,",
          "482:    0x32,0xA7,0xCD,0xEB,0xC1,0x40,",
          "484:    0xfe,0x80,0x5f,0xc3,0x4b,0x44,",
          "486:    0x24,0x72,0x06,0x13,0xB5,0xA3 }",
          "487:  };",
          "489: static const struct { EC_CURVE_DATA h; unsigned char data[0+21*6]; }",
          "490:  _EC_SECG_PRIME_160K1 = {",
          "491:  { NID_X9_62_prime_field,0,21,1 },",
          "494:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xAC,",
          "495:    0x73,",
          "497:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "498:    0x00,",
          "500:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "501:    0x07,",
          "503:    0x01,0x9E,0x76,0x30,0x36,0xF4,0xF5,0xDD,0x4D,0x7E,",
          "504:    0xBB,",
          "506:    0xc2,0x82,0x86,0x53,0x17,0x33,0xc3,0xf0,0x3c,0x4f,",
          "507:    0xee,",
          "509:    0x01,0xB8,0xFA,0x16,0xDF,0xAB,0x9A,0xCA,0x16,0xB6,",
          "510:    0xB3 }",
          "511:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "524:  {",
          "526:    0x00,0xF5,0x0B,0x02,0x8E,0x4D,0x69,0x6E,0x67,0x68,",
          "530:    0xDB,0x7C,0x2A,0xBF,0x62,0xE3,0x5E,0x66,0x80,0x76,",
          "534:    0xDB,0x7C,0x2A,0xBF,0x62,0xE3,0x5E,0x66,0x80,0x76,",
          "538:    0x65,0x9E,0xF8,0xBA,0x04,0x39,0x16,0xEE,0xDE,0x89,",
          "542:    0x09,0x48,0x72,0x39,0x99,0x5A,0x5E,0xE7,0x6B,0x55,",
          "546:    0xa8,0x9c,0xe5,0xaf,0x87,0x24,0xc0,0xa2,0x3e,0x0e,",
          "550:    0xDB,0x7C,0x2A,0xBF,0x62,0xE3,0x5E,0x76,0x28,0xDF,",
          "557:  {",
          "559:    0x00,0x27,0x57,0xA1,0x11,0x4D,0x69,0x6E,0x67,0x68,",
          "563:    0xDB,0x7C,0x2A,0xBF,0x62,0xE3,0x5E,0x66,0x80,0x76,",
          "567:    0x61,0x27,0xC2,0x4C,0x05,0xF3,0x8A,0x0A,0xAA,0xF6,",
          "571:    0x51,0xDE,0xF1,0x81,0x5D,0xB5,0xED,0x74,0xFC,0xC3,",
          "575:    0x4B,0xA3,0x0A,0xB5,0xE8,0x92,0xB4,0xE1,0x64,0x9D,",
          "579:    0xad,0xcd,0x46,0xf5,0x88,0x2e,0x37,0x47,0xde,0xf3,",
          "583:    0x36,0xDF,0x0A,0xAF,0xD8,0xB8,0xD7,0x59,0x7C,0xA1,",
          "590:  {",
          "592:    0x00,0x0E,0x0D,0x4D,0x69,0x6E,0x67,0x68,0x75,0x61,",
          "596:    0xFF,0xFF,0xFF,0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "600:    0xFF,0xFF,0xFF,0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "604:    0xE8,0x75,0x79,0xC1,0x10,0x79,0xF4,0x3D,0xD8,0x24,",
          "608:    0x16,0x1F,0xF7,0x52,0x8B,0x89,0x9B,0x2D,0x0C,0x28,",
          "612:    0xcf,0x5a,0xc8,0x39,0x5b,0xaf,0xeb,0x13,0xc0,0x2d,",
          "616:    0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x75,0xA3,",
          "623:  {",
          "625:    0x00,0x4D,0x69,0x6E,0x67,0x68,0x75,0x61,0x51,0x75,",
          "629:    0xFF,0xFF,0xFF,0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "633:    0xD6,0x03,0x19,0x98,0xD1,0xB3,0xBB,0xFE,0xBF,0x59,",
          "637:    0x5E,0xEE,0xFC,0xA3,0x80,0xD0,0x29,0x19,0xDC,0x2C,",
          "641:    0x7B,0x6A,0xA5,0xD8,0x5E,0x57,0x29,0x83,0xE6,0xFB,",
          "645:    0x27,0xb6,0x91,0x6a,0x89,0x4d,0x3a,0xee,0x71,0x06,",
          "649:    0x3F,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xBE,0x00,",
          "656:  {",
          "659:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "664:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "669:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "674:    0x00,0x3B,0x4C,0x38,0x2C,0xE3,0x7A,0xA1,0x92,0xA4,",
          "679:    0x00,0x93,0x8c,0xf9,0x35,0x31,0x8f,0xdc,0xed,0x6b,",
          "684:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "513: static const struct { EC_CURVE_DATA h; unsigned char data[20+21*6]; }",
          "514:  _EC_SECG_PRIME_160R1 = {",
          "515:  { NID_X9_62_prime_field,20,21,1 },",
          "517:    0x87,0x56,0x15,0x17,0x53,0x3B,0xF3,0xF8,0x33,0x45,",
          "520:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,",
          "521:    0xFF,",
          "523:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,",
          "524:    0xFC,",
          "526:    0xAC,0xF8,0x9F,0x81,0xD4,0xD4,0xAD,0xC5,0x65,0xFA,",
          "527:    0x45,",
          "529:    0x64,0x69,0x89,0x68,0xC3,0x8B,0xB9,0x13,0xCB,0xFC,",
          "530:    0x82,",
          "532:    0xdc,0xc9,0x12,0x04,0x23,0x51,0x37,0x7a,0xc5,0xfb,",
          "533:    0x32,",
          "535:    0x01,0xF4,0xC8,0xF9,0x27,0xAE,0xD3,0xCA,0x75,0x22,",
          "536:    0x57 }",
          "537:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "692:  {",
          "694:    0x10,0x53,0xCD,0xE4,0x2C,0x14,0xD6,0x96,0xE6,0x76,",
          "698:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "703:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "708:    0x00,0x1C,0x97,0xBE,0xFC,0x54,0xBD,0x7A,0x8B,0x65,",
          "713:    0x00,0x4A,0x96,0xB5,0x68,0x8E,0xF5,0x73,0x28,0x46,",
          "718:    0x00,0x23,0xa6,0x28,0x55,0x31,0x68,0x94,0x7d,0x59,",
          "723:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "539: static const struct { EC_CURVE_DATA h; unsigned char data[20+21*6]; }",
          "540:  _EC_SECG_PRIME_160R2 = {",
          "541:  { NID_X9_62_prime_field,20,21,1 },",
          "543:    0xA4,0xD6,0x96,0xE6,0x76,0x87,0x56,0x15,0x17,0x51,",
          "546:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xAC,",
          "547:    0x73,",
          "549:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xAC,",
          "550:    0x70,",
          "552:    0x57,0x27,0x49,0x04,0x66,0x4D,0x5A,0xF5,0x03,0x88,",
          "553:    0xBA,",
          "555:    0x4F,0xF1,0x1B,0x30,0xF7,0x19,0x9D,0x31,0x44,0xCE,",
          "556:    0x6D,",
          "558:    0x71,0xfa,0x0d,0xf9,0x98,0x2c,0xfe,0xa7,0xd4,0x3f,",
          "559:    0x2e,",
          "561:    0x00,0x35,0x1E,0xE7,0x86,0xA8,0x18,0xF3,0xA1,0xA1,",
          "562:    0x6B }",
          "563:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731:  {",
          "733:    0xB9,0x9B,0x99,0xB0,0x99,0xB3,0x23,0xE0,0x27,0x09,",
          "737:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "742:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "747:    0x00,0xB4,0xE1,0x34,0xD3,0xFB,0x59,0xEB,0x8B,0xAB,",
          "752:    0x00,0x52,0xDC,0xB0,0x34,0x29,0x3A,0x11,0x7E,0x1F,",
          "757:    0x00,0xfe,0xaf,0xfe,0xf2,0xe3,0x31,0xf2,0x96,0xe0,",
          "762:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "565: static const struct { EC_CURVE_DATA h; unsigned char data[0+24*6]; }",
          "566:  _EC_SECG_PRIME_192K1 = {",
          "567:  { NID_X9_62_prime_field,0,24,1 },",
          "570:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,",
          "571:    0xFF,0xFF,0xEE,0x37,",
          "573:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "574:    0x00,0x00,0x00,0x00,",
          "576:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "577:    0x00,0x00,0x00,0x03,",
          "579:    0x7D,0x02,0x80,0xB7,0xF4,0x34,0x1D,0xA5,0xD1,0xB1,",
          "580:    0xEA,0xE0,0x6C,0x7D,",
          "582:    0x63,0xd0,0x15,0xbe,0x86,0x34,0x40,0x82,0xaa,0x88,",
          "583:    0xd9,0x5e,0x2f,0x9d,",
          "585:    0xFF,0xFE,0x26,0xF2,0xFC,0x17,0x0F,0x69,0x46,0x6A,",
          "586:    0x74,0xDE,0xFD,0x8D }",
          "587:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770:  {",
          "773:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "778:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "783:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "788:    0xDB,0x4F,0xF1,0x0E,0xC0,0x57,0xE9,0xAE,0x26,0xB0,",
          "793:    0x9b,0x2f,0x2f,0x6d,0x9c,0x56,0x28,0xa7,0x84,0x41,",
          "798:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "589: static const struct { EC_CURVE_DATA h; unsigned char data[0+29*6]; }",
          "590:  _EC_SECG_PRIME_224K1 = {",
          "591:  { NID_X9_62_prime_field,0,29,1 },",
          "594:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "595:    0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xE5,0x6D,",
          "597:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "598:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "600:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "601:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,",
          "603:    0xFC,0x28,0xA1,0x69,0xA4,0x67,0xE9,0xE4,0x70,0x75,",
          "604:    0xA9,0x0F,0x7E,0x65,0x0E,0xB6,0xB7,0xA4,0x5C,",
          "606:    0xca,0xfb,0xd6,0xf7,0xe3,0x19,0xf7,0xc0,0xb0,0xbd,",
          "607:    0x59,0xe2,0xca,0x4b,0xdb,0x55,0x6d,0x61,0xa5,",
          "609:    0x00,0x00,0x00,0x00,0x01,0xDC,0xE8,0xD2,0xEC,0x61,",
          "610:    0x84,0xCA,0xF0,0xA9,0x71,0x76,0x9F,0xB1,0xF7 }",
          "611:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:  {",
          "809:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "814:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "819:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "824:    0x00,0xA1,0x45,0x5B,0x33,0x4D,0xF0,0x99,0xDF,0x30,",
          "829:    0x00,0x7e,0x08,0x9f,0xed,0x7f,0xba,0x34,0x42,0x82,",
          "834:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "613: static const struct { EC_CURVE_DATA h; unsigned char data[0+32*6]; }",
          "614:  _EC_SECG_PRIME_256K1 = {",
          "615:  { NID_X9_62_prime_field,0,32,1 },",
          "618:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "619:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,",
          "620:    0xFC,0x2F,",
          "622:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "623:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "624:    0x00,0x00,",
          "626:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "627:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "628:    0x00,0x07,",
          "630:    0x62,0x95,0xCE,0x87,0x0B,0x07,0x02,0x9B,0xFC,0xDB,",
          "631:    0x2D,0xCE,0x28,0xD9,0x59,0xF2,0x81,0x5B,0x16,0xF8,",
          "632:    0x17,0x98,",
          "634:    0xfb,0xfc,0x0e,0x11,0x08,0xa8,0xfd,0x17,0xb4,0x48,",
          "635:    0xa6,0x85,0x54,0x19,0x9c,0x47,0xd0,0x8f,0xfb,0x10,",
          "636:    0xd4,0xb8,",
          "638:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xBA,0xAE,0xDC,0xE6,",
          "639:    0xAF,0x48,0xA0,0x3B,0xBF,0xD2,0x5E,0x8C,0xD0,0x36,",
          "640:    0x41,0x41 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "842:  {",
          "845:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "851:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "857:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "863:    0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,0x55,0xA0,",
          "869:    0x48,0x3a,0xda,0x77,0x26,0xa3,0xc4,0x65,0x5d,0xa4,",
          "875:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "644: static const struct { EC_CURVE_DATA h; unsigned char data[0+15*6]; }",
          "645:  _EC_WTLS_8 = {",
          "646:  { NID_X9_62_prime_field,0,15,1 },",
          "649:    0xFF,0xFF,0xFF,0xFD,0xE7,",
          "651:    0x00,0x00,0x00,0x00,0x00,",
          "653:    0x00,0x00,0x00,0x00,0x03,",
          "655:    0x00,0x00,0x00,0x00,0x01,",
          "657:    0x00,0x00,0x00,0x00,0x02,",
          "659:    0x55,0x1A,0xD8,0x37,0xE9 }",
          "660:  };",
          "662: static const struct { EC_CURVE_DATA h; unsigned char data[0+21*6]; }",
          "663:  _EC_WTLS_9 = {",
          "664:  { NID_X9_62_prime_field,0,21,1 },",
          "667:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x80,",
          "668:    0x8F,",
          "670:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "671:    0x00,",
          "673:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "674:    0x03,",
          "676:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "677:    0x01,",
          "679:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "680:    0x02,",
          "682:    0x01,0xCD,0xC9,0x8A,0xE0,0xE2,0xDE,0x57,0x4A,0xBF,",
          "683:    0x33 }",
          "684:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:  {",
          "888:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "892:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "896:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "900:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "904:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "908:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xEC,0xEA,",
          "915:  {",
          "918:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "923:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "928:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "933:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "938:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "943:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "686: static const struct { EC_CURVE_DATA h; unsigned char data[0+28*6]; }",
          "687:  _EC_WTLS_12 = {",
          "688:  { NID_X9_62_prime_field,0,28,1 },",
          "691:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,",
          "692:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "694:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,",
          "695:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,",
          "697:    0x32,0x56,0x50,0x44,0xB0,0xB7,0xD7,0xBF,0xD8,0xBA,",
          "698:    0x27,0x0B,0x39,0x43,0x23,0x55,0xFF,0xB4,",
          "700:    0x90,0xB9,0x4A,0x03,0xC1,0xD3,0x56,0xC2,0x11,0x22,",
          "701:    0x34,0x32,0x80,0xD6,0x11,0x5C,0x1D,0x21,",
          "703:    0xdf,0xe6,0xcd,0x43,0x75,0xa0,0x5a,0x07,0x47,0x64,",
          "704:    0x44,0xd5,0x81,0x99,0x85,0x00,0x7e,0x34,",
          "706:    0xFF,0xFF,0xFF,0xFF,0x16,0xA2,0xE0,0xB8,0xF0,0x3E,",
          "707:    0x13,0xDD,0x29,0x45,0x5C,0x5C,0x2A,0x3D }",
          "708:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "951:  {",
          "954:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "959:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "964:    0xB4,0x05,0x0A,0x85,0x0C,0x04,0xB3,0xAB,0xF5,0x41,",
          "969:    0xB7,0x0E,0x0C,0xBD,0x6B,0xB4,0xBF,0x7F,0x32,0x13,",
          "974:    0xbd,0x37,0x63,0x88,0xb5,0xf7,0x23,0xfb,0x4c,0x22,",
          "979:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "713: static const struct { EC_CURVE_DATA h; unsigned char data[20+15*6]; }",
          "714:  _EC_SECG_CHAR2_113R1 = {",
          "715:  { NID_X9_62_characteristic_two_field,20,15,2 },",
          "717:    0x56,0x15,0x17,0x56,0xFE,0xBF,0x8F,0xCB,0x49,0xA9,",
          "720:    0x00,0x00,0x00,0x02,0x01,",
          "722:    0x9C,0xE8,0x58,0x20,0xF7,",
          "724:    0x8B,0xE0,0xE9,0xC7,0x23,",
          "726:    0xD7,0x35,0x62,0xC1,0x0F,",
          "728:    0x31,0x5E,0xD3,0x18,0x86,",
          "730:    0xEC,0x8A,0x39,0xE5,0x6F }",
          "731:  };",
          "733: static const struct { EC_CURVE_DATA h; unsigned char data[20+15*6]; }",
          "734:  _EC_SECG_CHAR2_113R2 = {",
          "735:  { NID_X9_62_characteristic_two_field,20,15,2 },",
          "737:    0xF4,0xD6,0x96,0xE6,0x76,0x87,0x56,0x15,0x17,0x5D,",
          "740:    0x00,0x00,0x00,0x02,0x01,",
          "742:    0xDF,0xC0,0xAA,0x55,0xC7,",
          "744:    0x36,0xE0,0x59,0x18,0x4F,",
          "746:    0xCD,0xB8,0x16,0x47,0x97,",
          "748:    0xE6,0x95,0xBA,0xBA,0x1D,",
          "750:    0x9B,0x24,0x96,0xAF,0x93 }",
          "751:  };",
          "753: static const struct { EC_CURVE_DATA h; unsigned char data[20+17*6]; }",
          "754:  _EC_SECG_CHAR2_131R1 = {",
          "755:  { NID_X9_62_characteristic_two_field,20,17,2 },",
          "757:    0x5B,0xD3,0xAD,0xBA,0xDA,0x21,0xB4,0x3A,0x97,0xE2,",
          "760:    0x00,0x00,0x00,0x00,0x00,0x01,0x0D,",
          "762:    0x8F,0xF3,0xFF,0x8C,0x25,0x70,0xB8,",
          "764:    0xC7,0x29,0x16,0x78,0xF9,0xD3,0x41,",
          "766:    0x9C,0x18,0x13,0x43,0x63,0x83,0x99,",
          "768:    0x13,0x4B,0x1B,0x4E,0xF9,0xE1,0x50,",
          "770:    0x23,0x95,0x3A,0x94,0x64,0xB5,0x4D }",
          "771:  };",
          "773: static const struct { EC_CURVE_DATA h; unsigned char data[20+17*6]; }",
          "774:  _EC_SECG_CHAR2_131R2 = {",
          "775:  { NID_X9_62_characteristic_two_field,20,17,2 },",
          "777:    0x87,0x56,0x15,0x17,0x5A,0x21,0xB4,0x3A,0x97,0xE3,",
          "780:    0x00,0x00,0x00,0x00,0x00,0x01,0x0D,",
          "782:    0x5F,0x07,0xC2,0x17,0x65,0x73,0xB2,",
          "784:    0x4C,0xE3,0x8F,0x01,0x8F,0x21,0x92,",
          "786:    0x2D,0x23,0x95,0x1B,0xB3,0x66,0xA8,",
          "788:    0x9E,0x26,0x5D,0xE9,0xEB,0x24,0x0F,",
          "790:    0x54,0xA2,0x33,0x04,0x9B,0xA9,0x8F }",
          "791:  };",
          "793: static const struct { EC_CURVE_DATA h; unsigned char data[0+21*6]; }",
          "794:  _EC_NIST_CHAR2_163K = {",
          "795:  { NID_X9_62_characteristic_two_field,0,21,2 },",
          "798:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "799:    0xC9,",
          "801:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "802:    0x01,",
          "804:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "805:    0x01,",
          "807:    0x07,0xD7,0x93,0xDE,0x4E,0x6D,0x5E,0x5C,0x94,0xEE,",
          "808:    0xE8,",
          "810:    0x1F,0x2E,0x80,0x05,0x36,0xD5,0x38,0xCC,0xDA,0xA3,",
          "811:    0xD9,",
          "813:    0x02,0x01,0x08,0xA2,0xE0,0xCC,0x0D,0x99,0xF8,0xA5,",
          "814:    0xEF }",
          "815:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "990:  {",
          "992:    0x10,0xE7,0x23,0xAB,0x14,0xD6,0x96,0xE6,0x76,0x87,",
          "996:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1000:    0x00,0x30,0x88,0x25,0x0C,0xA6,0xE7,0xC7,0xFE,0x64,",
          "1004:    0x00,0xE8,0xBE,0xE4,0xD3,0xE2,0x26,0x07,0x44,0x18,",
          "1008:    0x00,0x9D,0x73,0x61,0x6F,0x35,0xF4,0xAB,0x14,0x07,",
          "1012:    0x00,0xA5,0x28,0x30,0x27,0x79,0x58,0xEE,0x84,0xD1,",
          "1016:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD9,0xCC,",
          "1023:  {",
          "1025:    0x10,0xC0,0xFB,0x15,0x76,0x08,0x60,0xDE,0xF1,0xEE,",
          "1029:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1033:    0x00,0x68,0x99,0x18,0xDB,0xEC,0x7E,0x5A,0x0D,0xD6,",
          "1037:    0x00,0x95,0xE9,0xA9,0xEC,0x9B,0x29,0x7B,0xD4,0xBF,",
          "1041:    0x01,0xA5,0x7A,0x6A,0x7B,0x26,0xCA,0x5E,0xF5,0x2F,",
          "1045:    0x00,0xB3,0xAD,0xC9,0x4E,0xD1,0xFE,0x67,0x4C,0x06,",
          "1049:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x08,0x78,",
          "1056:  {",
          "1058:    0x4D,0x69,0x6E,0x67,0x68,0x75,0x61,0x51,0x75,0x98,",
          "1062:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1066:    0x07,0xA1,0x1B,0x09,0xA7,0x6B,0x56,0x21,0x44,0x41,",
          "1070:    0x02,0x17,0xC0,0x56,0x10,0x88,0x4B,0x63,0xB9,0xC6,",
          "1074:    0x00,0x81,0xBA,0xF9,0x1F,0xDF,0x98,0x33,0xC4,0x0F,",
          "1078:    0x07,0x8C,0x6E,0x7E,0xA3,0x8C,0x00,0x1F,0x73,0xC8,",
          "1082:    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x31,",
          "1089:  {",
          "1091:    0x98,0x5B,0xD3,0xAD,0xBA,0xD4,0xD6,0x96,0xE6,0x76,",
          "1095:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1099:    0x03,0xE5,0xA8,0x89,0x19,0xD7,0xCA,0xFC,0xBF,0x41,",
          "1103:    0x04,0xB8,0x26,0x6A,0x46,0xC5,0x56,0x57,0xAC,0x73,",
          "1107:    0x03,0x56,0xDC,0xD8,0xF2,0xF9,0x50,0x31,0xAD,0x65,",
          "1111:    0x06,0x48,0xF0,0x6D,0x86,0x79,0x40,0xA5,0x36,0x6D,",
          "1115:    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x69,",
          "1122:  {",
          "1125:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1130:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1135:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1140:    0x02,0xFE,0x13,0xC0,0x53,0x7B,0xBC,0x11,0xAC,0xAA,",
          "1145:    0x02,0x89,0x07,0x0F,0xB0,0x5D,0x38,0xFF,0x58,0x32,",
          "1150:    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "817: static const struct { EC_CURVE_DATA h; unsigned char data[0+21*6]; }",
          "818:  _EC_SECG_CHAR2_163R1 = {",
          "819:  { NID_X9_62_characteristic_two_field,0,21,2 },",
          "821: #if 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158:  {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "825:    0x24,0xB7,0xB1,0x37,0xC8,0xA1,0x4D,0x69,0x6E,0x67,",
          "826:    0x68,0x75,0x61,0x51,0x75,0x6F,0xD0,0xDA,0x2E,0x5C,",
          "827: #endif",
          "829:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "830:    0xC9,",
          "832:    0xFF,0x84,0x28,0xBD,0x88,0xE2,0x46,0xD2,0x78,0x2A,",
          "833:    0xE2,",
          "835:    0x6B,0xDA,0x29,0xCA,0x91,0xF7,0x3A,0xF9,0x58,0xAF,",
          "836:    0xD9,",
          "838:    0x56,0x67,0x89,0x56,0x7F,0x78,0x7A,0x78,0x76,0xA6,",
          "839:    0x54,",
          "841:    0x51,0xFE,0xFC,0xE3,0xC8,0x09,0x88,0xF4,0x1F,0xF8,",
          "842:    0x83,",
          "844:    0xFF,0x48,0xAA,0xB6,0x89,0xC2,0x9C,0xA7,0x10,0x27,",
          "845:    0x9B }",
          "846:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1168:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1173:    0x07,0xB6,0x88,0x2C,0xAA,0xEF,0xA8,0x4F,0x95,0x54,",
          "1178:    0x07,0x13,0x61,0x2D,0xCD,0xDC,0xB4,0x0A,0xAB,0x94,",
          "1183:    0x03,0x69,0x97,0x96,0x97,0xAB,0x43,0x89,0x77,0x89,",
          "1188:    0x00,0x43,0x5E,0xDB,0x42,0xEF,0xAF,0xB2,0x98,0x9D,",
          "1193:    0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "848: static const struct { EC_CURVE_DATA h; unsigned char data[0+21*6]; }",
          "849:  _EC_NIST_CHAR2_163B = {",
          "850:  { NID_X9_62_characteristic_two_field,0,21,2 },",
          "852: #if 0",
          "855:    0x85,0xE2,0x5B,0xFE,0x5C,0x86,0x22,0x6C,0xDB,0x12,",
          "856:    0x01,0x6F,0x75,0x53,0xF9,0xD0,0xE6,0x93,0xA2,0x68,",
          "857: #endif",
          "859:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "860:    0xC9,",
          "862:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "863:    0x01,",
          "865:    0x81,0xEB,0x10,0x51,0x2F,0x78,0x74,0x4A,0x32,0x05,",
          "866:    0xFD,",
          "868:    0x99,0x11,0x68,0xD4,0x99,0x46,0x37,0xE8,0x34,0x3E,",
          "869:    0x36,",
          "871:    0xCD,0xD5,0x45,0xB1,0x1C,0x5C,0x0C,0x79,0x73,0x24,",
          "872:    0xF1,",
          "874:    0x02,0x92,0xFE,0x77,0xE7,0x0C,0x12,0xA4,0x23,0x4C,",
          "875:    0x33 }",
          "876:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1201:  {",
          "1210:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1215:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1220:    0x02,0x0A,0x60,0x19,0x07,0xB8,0xC9,0x53,0xCA,0x14,",
          "1225:    0x03,0xF0,0xEB,0xA1,0x62,0x86,0xA2,0xD5,0x7E,0xA0,",
          "1230:    0x00,0xD5,0x1F,0xBC,0x6C,0x71,0xA0,0x09,0x4F,0xA2,",
          "1235:    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "878: static const struct { EC_CURVE_DATA h; unsigned char data[20+25*6]; }",
          "879:  _EC_SECG_CHAR2_193R1 = {",
          "880:  { NID_X9_62_characteristic_two_field,20,25,2 },",
          "882:    0x61,0x51,0x75,0x77,0x7F,0xC5,0xB1,0x91,0xEF,0x30,",
          "885:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "886:    0x00,0x00,0x00,0x80,0x01,",
          "888:    0xE1,0x71,0xF7,0x7B,0x40,0x87,0xDE,0x09,0x8A,0xC8,",
          "889:    0xA9,0x11,0xDF,0x7B,0x01,",
          "891:    0xAD,0xAA,0x7A,0x1E,0x5B,0xBC,0x7C,0xC1,0xC2,0xE5,",
          "892:    0xD8,0x31,0x47,0x88,0x14,",
          "894:    0x6C,0xDF,0x6F,0xDE,0xF4,0xBF,0x61,0x79,0x62,0x53,",
          "895:    0x72,0xD8,0xC0,0xC5,0xE1,",
          "897:    0xEA,0x9E,0x3A,0x1A,0xD1,0x7F,0xB0,0xB3,0x20,0x1B,",
          "898:    0x6A,0xF7,0xCE,0x1B,0x05,",
          "900:    0x00,0x00,0x00,0xC7,0xF3,0x4A,0x77,0x8F,0x44,0x3A,",
          "901:    0xCC,0x92,0x0E,0xBA,0x49 }",
          "902:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1243:  {",
          "1245:    0x10,0x3F,0xAE,0xC7,0x4D,0x69,0x6E,0x67,0x68,0x75,",
          "1249:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1254:    0x00,0x17,0x85,0x8F,0xEB,0x7A,0x98,0x97,0x51,0x69,",
          "1259:    0x00,0xFD,0xFB,0x49,0xBF,0xE6,0xC3,0xA8,0x9F,0xAC,",
          "1264:    0x01,0xF4,0x81,0xBC,0x5F,0x0F,0xF8,0x4A,0x74,0xAD,",
          "1269:    0x00,0x25,0xE3,0x99,0xF2,0x90,0x37,0x12,0xCC,0xF3,",
          "1274:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "904: static const struct { EC_CURVE_DATA h; unsigned char data[20+25*6]; }",
          "905:  _EC_SECG_CHAR2_193R2 = {",
          "906:  { NID_X9_62_characteristic_two_field,20,25,2 },",
          "908:    0x17,0x51,0x37,0xC8,0xA1,0x6F,0xD0,0xDA,0x22,0x11,",
          "911:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "912:    0x00,0x00,0x00,0x80,0x01,",
          "914:    0xED,0x86,0x67,0x19,0x0B,0x0B,0xC4,0x3E,0xCD,0x69,",
          "915:    0x97,0x77,0x02,0x70,0x9B,",
          "917:    0x7E,0x2A,0xB2,0x85,0x6A,0x5B,0x16,0xE3,0xEF,0xB7,",
          "918:    0xF6,0x1D,0x43,0x16,0xAE,",
          "920:    0xF3,0x9E,0x1A,0x7E,0x82,0xCA,0x14,0xA6,0x51,0x35,",
          "921:    0x0A,0xAE,0x61,0x7E,0x8F,",
          "923:    0xE7,0xDE,0xFB,0xD9,0xCA,0x01,0xF5,0x96,0xF9,0x27,",
          "924:    0x22,0x4C,0xDE,0xCF,0x6C,",
          "926:    0x00,0x00,0x01,0x5A,0xAB,0x56,0x1B,0x00,0x54,0x13,",
          "927:    0xCC,0xD4,0xEE,0x99,0xD5 }",
          "928:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1282:  {",
          "1284:    0x10,0xB7,0xB4,0xD6,0x96,0xE6,0x76,0x87,0x56,0x15,",
          "1288:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1293:    0x01,0x63,0xF3,0x5A,0x51,0x37,0xC2,0xCE,0x3E,0xA6,",
          "1298:    0x00,0xC9,0xBB,0x9E,0x89,0x27,0xD4,0xD6,0x4C,0x37,",
          "1303:    0x00,0xD9,0xB6,0x7D,0x19,0x2E,0x03,0x67,0xC8,0x03,",
          "1308:    0x01,0xCE,0x94,0x33,0x56,0x07,0xC3,0x04,0xAC,0x29,",
          "1313:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "930: static const struct { EC_CURVE_DATA h; unsigned char data[0+30*6]; }",
          "931:  _EC_NIST_CHAR2_233K = {",
          "932:  { NID_X9_62_characteristic_two_field,0,30,4 },",
          "934:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "935:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "936:    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "939:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "940:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "943:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "944:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "947:    0x29,0xF2,0x2F,0xF4,0x14,0x95,0x63,0xA4,0x19,0xC2,",
          "948:    0x6B,0xF5,0x0A,0x4C,0x9D,0x6E,0xEF,0xAD,0x61,0x26,",
          "951:    0x55,0x5A,0x67,0xC4,0x27,0xA8,0xCD,0x9B,0xF1,0x8A,",
          "952:    0xEB,0x9B,0x56,0xE0,0xC1,0x10,0x56,0xFA,0xE6,0xA3,",
          "955:    0x00,0x00,0x00,0x00,0x00,0x06,0x9D,0x5B,0xB9,0x15,",
          "956:    0xBC,0xD4,0x6E,0xFB,0x1A,0xD5,0xF1,0x73,0xAB,0xDF }",
          "957:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1321:  {",
          "1328:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1333:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1338:    0x01,0x72,0x32,0xBA,0x85,0x3A,0x7E,0x73,0x1A,0xF1,",
          "1343:    0x01,0xDB,0x53,0x7D,0xEC,0xE8,0x19,0xB7,0xF7,0x0F,",
          "1348:    0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "959: static const struct { EC_CURVE_DATA h; unsigned char data[20+30*6]; }",
          "960:  _EC_NIST_CHAR2_233B = {",
          "961:  { NID_X9_62_characteristic_two_field,20,30,2 },",
          "963:    0x4B,0x34,0x4B,0x20,0xA2,0xDB,0x04,0x9B,0x50,0xC3,",
          "966:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "967:    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "970:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "971:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "974:    0x09,0x23,0xBB,0x58,0x21,0x3B,0x33,0x3B,0x20,0xE9,",
          "975:    0xCE,0x42,0x81,0xFE,0x11,0x5F,0x7D,0x8F,0x90,0xAD,",
          "978:    0x39,0xF1,0xBB,0x75,0x5F,0xEF,0x65,0xBC,0x39,0x1F,",
          "979:    0x8B,0x36,0xF8,0xF8,0xEB,0x73,0x71,0xFD,0x55,0x8B,",
          "982:    0xE5,0x85,0x28,0xBE,0xBF,0x8A,0x0B,0xEF,0xF8,0x67,",
          "983:    0xA7,0xCA,0x36,0x71,0x6F,0x7E,0x01,0xF8,0x10,0x52,",
          "986:    0x00,0x00,0x00,0x00,0x00,0x13,0xE9,0x74,0xE7,0x2F,",
          "987:    0x8A,0x69,0x22,0x03,0x1D,0x26,0x03,0xCF,0xE0,0xD7 }",
          "988:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1356:  {",
          "1358:    0x74,0xD5,0x9F,0xF0,0x7F,0x6B,0x41,0x3D,0x0E,0xA1,",
          "1362:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1367:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1372:    0x00,0x66,0x64,0x7E,0xDE,0x6C,0x33,0x2C,0x7F,0x8C,",
          "1377:    0x00,0xFA,0xC9,0xDF,0xCB,0xAC,0x83,0x13,0xBB,0x21,",
          "1382:    0x01,0x00,0x6A,0x08,0xA4,0x19,0x03,0x35,0x06,0x78,",
          "1387:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "990: static const struct { EC_CURVE_DATA h; unsigned char data[0+30*6]; }",
          "991:  _EC_SECG_CHAR2_239K1 = {",
          "992:  { NID_X9_62_characteristic_two_field,0,30,4 },",
          "994:    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "995:    0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "996:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "999:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1000:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1003:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1004:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "1007:    0x88,0xA6,0x87,0x27,0xA8,0xB2,0xD1,0x26,0xC4,0x4C,",
          "1008:    0xC2,0xCC,0x7B,0x2A,0x65,0x55,0x19,0x30,0x35,0xDC,",
          "1011:    0x1C,0x10,0x30,0x89,0xE7,0x35,0x10,0xAC,0xB2,0x75,",
          "1012:    0xFC,0x31,0x2A,0x5D,0xC6,0xB7,0x65,0x53,0xF0,0xCA,",
          "1015:    0x00,0x00,0x00,0x00,0x00,0x5A,0x79,0xFE,0xC6,0x7C,",
          "1016:    0xB6,0xE9,0x1F,0x1C,0x1D,0xA8,0x00,0xE4,0x78,0xA5 }",
          "1017:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1395:  {",
          "1402:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1407:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1412:    0x29,0xA0,0xB6,0xA8,0x87,0xA9,0x83,0xE9,0x73,0x09,",
          "1417:    0x76,0x31,0x08,0x04,0xF1,0x2E,0x54,0x9B,0xDB,0x01,",
          "1422:    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1019: static const struct { EC_CURVE_DATA h; unsigned char data[0+36*6]; }",
          "1020:  _EC_NIST_CHAR2_283K = {",
          "1021:  { NID_X9_62_characteristic_two_field,0,36,4 },",
          "1023:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1024:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1025:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1026:    0x00,0x00,0x00,0x00,0x10,0xA1,",
          "1028:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1029:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1030:    0x00,0x00,0x00,0x00,0x00,0x00,",
          "1032:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1033:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1034:    0x00,0x00,0x00,0x00,0x00,0x01,",
          "1036:    0x3B,0x81,0x62,0xF1,0x88,0xE5,0x53,0xCD,0x26,0x5F,",
          "1037:    0x23,0xC1,0x56,0x7A,0x16,0x87,0x69,0x13,0xB0,0xC2,",
          "1038:    0xAC,0x24,0x58,0x49,0x28,0x36,",
          "1040:    0xF9,0x5D,0x07,0xE5,0x42,0x6F,0xE8,0x7E,0x45,0xC0,",
          "1041:    0xE8,0x18,0x46,0x98,0xE4,0x59,0x62,0x36,0x4E,0x34,",
          "1042:    0x11,0x61,0x77,0xDD,0x22,0x59,",
          "1044:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE9,0xAE,",
          "1045:    0x2E,0xD0,0x75,0x77,0x26,0x5D,0xFF,0x7F,0x94,0x45,",
          "1046:    0x1E,0x06,0x1E,0x16,0x3C,0x61 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1430:  {",
          "1438:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1444:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1450:    0x05,0x03,0x21,0x3F,0x78,0xCA,0x44,0x88,0x3F,0x1A,",
          "1456:    0x01,0xCC,0xDA,0x38,0x0F,0x1C,0x9E,0x31,0x8D,0x90,",
          "1462:    0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1049: static const struct { EC_CURVE_DATA h; unsigned char data[20+36*6]; }",
          "1050:  _EC_NIST_CHAR2_283B = {",
          "1051:  { NID_X9_62_characteristic_two_field,20,36,2 },",
          "1053:    0xD5,0xB6,0x2D,0xFC,0x88,0xCD,0x06,0xBB,0x84,0xBE,",
          "1056:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1057:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1058:    0x00,0x00,0x00,0x00,0x10,0xA1,",
          "1060:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1061:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1062:    0x00,0x00,0x00,0x00,0x00,0x01,",
          "1064:    0xAF,0x8A,0x19,0xA0,0x30,0x3F,0xCA,0x97,0xFD,0x76,",
          "1065:    0x45,0x30,0x9F,0xA2,0xA5,0x81,0x48,0x5A,0xF6,0x26,",
          "1066:    0x3E,0x31,0x3B,0x79,0xA2,0xF5,",
          "1068:    0x4F,0x8C,0x70,0xB0,0xDF,0xEC,0x2E,0xED,0x25,0xB8,",
          "1069:    0x55,0x7E,0xAC,0x9C,0x80,0xE2,0xE1,0x98,0xF8,0xCD,",
          "1070:    0xBE,0xCD,0x86,0xB1,0x20,0x53,",
          "1072:    0xE6,0xD4,0xB2,0x0D,0x02,0xB4,0x51,0x6F,0xF7,0x02,",
          "1073:    0x35,0x0E,0xDD,0xB0,0x82,0x67,0x79,0xC8,0x13,0xF0,",
          "1074:    0xDF,0x45,0xBE,0x81,0x12,0xF4,",
          "1076:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0x90,",
          "1077:    0x39,0x96,0x60,0xFC,0x93,0x8A,0x90,0x16,0x5B,0x04,",
          "1078:    0x2A,0x7C,0xEF,0xAD,0xB3,0x07 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1471:  {",
          "1473:    0x77,0xE2,0xB0,0x73,0x70,0xEB,0x0F,0x83,0x2A,0x6D,",
          "1477:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1483:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1489:    0x02,0x7B,0x68,0x0A,0xC8,0xB8,0x59,0x6D,0xA5,0xA4,",
          "1495:    0x05,0xF9,0x39,0x25,0x8D,0xB7,0xDD,0x90,0xE1,0x93,",
          "1501:    0x03,0x67,0x68,0x54,0xFE,0x24,0x14,0x1C,0xB9,0x8F,",
          "1507:    0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1081: static const struct { EC_CURVE_DATA h; unsigned char data[0+52*6]; }",
          "1082:  _EC_NIST_CHAR2_409K = {",
          "1083:  { NID_X9_62_characteristic_two_field,0,52,4 },",
          "1086:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1087:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1088:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1089:    0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1090:    0x00,0x01,",
          "1092:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1093:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1094:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1095:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1096:    0x00,0x00,",
          "1098:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1099:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1100:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1101:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1102:    0x00,0x01,",
          "1104:    0xB1,0x89,0x0F,0x71,0x84,0x21,0x0E,0xFD,0x09,0x87,",
          "1105:    0xE3,0x07,0xC8,0x4C,0x27,0xAC,0xCF,0xB8,0xF9,0xF6,",
          "1106:    0x7C,0xC2,0xC4,0x60,0x18,0x9E,0xB5,0xAA,0xAA,0x62,",
          "1107:    0xEE,0x22,0x2E,0xB1,0xB3,0x55,0x40,0xCF,0xE9,0x02,",
          "1108:    0x37,0x46,",
          "1110:    0x1D,0xAC,0xBF,0x04,0x29,0x9C,0x34,0x60,0x78,0x2F,",
          "1111:    0x91,0x8E,0xA4,0x27,0xE6,0x32,0x51,0x65,0xE9,0xEA,",
          "1112:    0x10,0xE3,0xDA,0x5F,0x6C,0x42,0xE9,0xC5,0x52,0x15,",
          "1113:    0xAA,0x9C,0xA2,0x7A,0x58,0x63,0xEC,0x48,0xD8,0xE0,",
          "1114:    0x28,0x6B,",
          "1116:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "1117:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x5F,0x83,0xB2,",
          "1118:    0xD4,0xEA,0x20,0x40,0x0E,0xC4,0x55,0x7D,0x5E,0xD3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1516:  {",
          "1519:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1527:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1535:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1543:    0x00,0x60,0xF0,0x5F,0x65,0x8F,0x49,0xC1,0xAD,0x3A,",
          "1551:    0x01,0xE3,0x69,0x05,0x0B,0x7C,0x4E,0x42,0xAC,0xBA,",
          "1559:    0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1123: static const struct { EC_CURVE_DATA h; unsigned char data[20+52*6]; }",
          "1124:  _EC_NIST_CHAR2_409B = {",
          "1125:  { NID_X9_62_characteristic_two_field,20,52,2 },",
          "1127:    0x3D,0x09,0x4C,0x4B,0xCD,0x4D,0x42,0x62,0x21,0x0B,",
          "1130:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1131:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1132:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1133:    0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1134:    0x00,0x01,",
          "1136:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1137:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1138:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1139:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1140:    0x00,0x01,",
          "1142:    0x9A,0x75,0x3B,0x7B,0x47,0x6B,0x7F,0xD6,0x42,0x2E,",
          "1143:    0xF1,0xF3,0xDD,0x67,0x47,0x61,0xFA,0x99,0xD6,0xAC,",
          "1144:    0x27,0xC8,0xA9,0xA1,0x97,0xB2,0x72,0x82,0x2F,0x6C,",
          "1145:    0xD5,0x7A,0x55,0xAA,0x4F,0x50,0xAE,0x31,0x7B,0x13,",
          "1146:    0x54,0x5F,",
          "1148:    0x0C,0x60,0x64,0x75,0x62,0x60,0x44,0x1C,0xDE,0x4A,",
          "1149:    0xF1,0x77,0x1D,0x4D,0xB0,0x1F,0xFE,0x5B,0x34,0xE5,",
          "1150:    0x97,0x03,0xDC,0x25,0x5A,0x86,0x8A,0x11,0x80,0x51,",
          "1151:    0x56,0x03,0xAE,0xAB,0x60,0x79,0x4E,0x54,0xBB,0x79,",
          "1152:    0x96,0xA7,",
          "1154:    0xA7,0x83,0x24,0xED,0x10,0x6A,0x76,0x36,0xB9,0xC5,",
          "1155:    0xA7,0xBD,0x19,0x8D,0x01,0x58,0xAA,0x4F,0x54,0x88,",
          "1156:    0xD0,0x8F,0x38,0x51,0x4F,0x1F,0xDF,0x4B,0x4F,0x40,",
          "1157:    0xD2,0x18,0x1B,0x36,0x81,0xC3,0x64,0xBA,0x02,0x73,",
          "1158:    0xC7,0x06,",
          "1160:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1161:    0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE2,0xAA,0xD6,",
          "1162:    0xA6,0x12,0xF3,0x33,0x07,0xBE,0x5F,0xA4,0x7C,0x3C,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1570:  {",
          "1572:    0x40,0x99,0xB5,0xA4,0x57,0xF9,0xD6,0x9F,0x79,0x21,",
          "1576:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1584:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1592:    0x00,0x21,0xA5,0xC2,0xC8,0xEE,0x9F,0xEB,0x5C,0x4B,",
          "1600:    0x01,0x5D,0x48,0x60,0xD0,0x88,0xDD,0xB3,0x49,0x6B,",
          "1608:    0x00,0x61,0xB1,0xCF,0xAB,0x6B,0xE5,0xF3,0x2B,0xBF,",
          "1616:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1167: static const struct { EC_CURVE_DATA h; unsigned char data[0+72*6]; }",
          "1168:  _EC_NIST_CHAR2_571K = {",
          "1169:  { NID_X9_62_characteristic_two_field,0,72,4 },",
          "1172:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1173:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1174:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1627:  {",
          "1630:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1176:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1177:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1178:    0x04,0x25,",
          "1180:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1181:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1182:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1640:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1184:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1185:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1186:    0x00,0x00,",
          "1188:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1189:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1190:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1650:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1192:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1193:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1194:    0x00,0x01,",
          "1196:    0x96,0x31,0xF8,0x10,0x3F,0xE4,0xAC,0x9C,0xA2,0x97,",
          "1197:    0x00,0x12,0xD5,0xD4,0x60,0x24,0x80,0x48,0x01,0x84,",
          "1198:    0x1C,0xA4,0x43,0x70,0x95,0x84,0x93,0xB2,0x05,0xE6,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1660:    0x02,0x6E,0xB7,0xA8,0x59,0x92,0x3F,0xBC,0x82,0x18,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1200:    0xBA,0x39,0x49,0x47,0x76,0xFB,0x98,0x8B,0x47,0x17,",
          "1201:    0x4D,0xCA,0x88,0xC7,0xE2,0x94,0x52,0x83,0xA0,0x1C,",
          "1202:    0x89,0x72,",
          "1204:    0xEA,0xDE,0x3B,0xCA,0x95,0x31,0x4D,0xD5,0x8C,0xEC,",
          "1205:    0x9F,0x30,0x7A,0x54,0xFF,0xC6,0x1E,0xFC,0x00,0x6D,",
          "1206:    0x8A,0x2C,0x9D,0x49,0x79,0xC0,0xAC,0x44,0xAE,0xA7,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1670:    0x03,0x49,0xDC,0x80,0x7F,0x4F,0xBF,0x37,0x4F,0x4A,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1208:    0xB0,0x1A,0x7B,0xA7,0xAF,0x1B,0x32,0x04,0x30,0xC8,",
          "1209:    0x59,0x19,0x84,0xF6,0x01,0xCD,0x4C,0x14,0x3E,0xF1,",
          "1210:    0xC7,0xA3,",
          "1212:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1213:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1214:    0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x18,0x50,0xE1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1680:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1221: static const struct { EC_CURVE_DATA h; unsigned char data[20+72*6]; }",
          "1222:  _EC_NIST_CHAR2_571B = {",
          "1223:  { NID_X9_62_characteristic_two_field,20,72,2 },",
          "1225:    0x0F,0x61,0x04,0x10,0xC5,0x3A,0x7F,0x13,0x23,0x10,",
          "1228:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1229:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1230:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1693:  {",
          "1695:    0x2A,0xA0,0x58,0xF7,0x3A,0x0E,0x33,0xAB,0x48,0x6B,",
          "1699:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1232:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1233:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1234:    0x04,0x25,",
          "1236:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1237:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1238:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1709:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1240:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1241:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1242:    0x00,0x01,",
          "1244:    0x71,0x17,0xB7,0xF3,0xD6,0x2F,0x5C,0x6A,0x97,0xFF,",
          "1245:    0xCB,0x8C,0xEF,0xF1,0xCD,0x6B,0xA8,0xCE,0x4A,0x9A,",
          "1246:    0x18,0xAD,0x84,0xFF,0xAB,0xBD,0x8E,0xFA,0x59,0x33,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1719:    0x02,0xF4,0x0E,0x7E,0x22,0x21,0xF2,0x95,0xDE,0x29,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1248:    0x18,0x5A,0x78,0xFF,0x12,0xAA,0x52,0x0E,0x4D,0xE7,",
          "1249:    0x39,0xBA,0xCA,0x0C,0x7F,0xFE,0xFF,0x7F,0x29,0x55,",
          "1250:    0x72,0x7A,",
          "1252:    0xC0,0xD4,0x0D,0x3C,0xD7,0x75,0x0A,0x93,0xD1,0xD2,",
          "1253:    0x95,0x5F,0xA8,0x0A,0xA5,0xF4,0x0F,0xC8,0xDB,0x7B,",
          "1254:    0x2A,0xBD,0xBD,0xE5,0x39,0x50,0xF4,0xC0,0xD2,0x93,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1729:    0x03,0x03,0x00,0x1D,0x34,0xB8,0x56,0x29,0x6C,0x16,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1256:    0x60,0x03,0x86,0x14,0xF1,0x39,0x4A,0xBF,0xA3,0xB4,",
          "1257:    0xC8,0x50,0xD9,0x27,0xE1,0xE7,0x76,0x9C,0x8E,0xEC,",
          "1258:    0x2D,0x19,",
          "1260:    0xFF,0xFE,0xB7,0x3D,0x69,0xD7,0x8C,0x6C,0x27,0xA6,",
          "1261:    0x00,0x9C,0xBB,0xCA,0x19,0x80,0xF8,0x53,0x39,0x21,",
          "1262:    0xE8,0xA6,0x84,0x42,0x3E,0x43,0xBA,0xB0,0x8A,0x57,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1739:    0x03,0x7B,0xF2,0x73,0x42,0xDA,0x63,0x9B,0x6D,0xCC,",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1264:    0x1D,0x2F,0x04,0x85,0xC1,0x9B,0x16,0xE2,0xF1,0x51,",
          "1265:    0x6E,0x23,0xDD,0x3C,0x1A,0x48,0x27,0xAF,0x1B,0x8A,",
          "1266:    0xC1,0x5B,",
          "1268:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "1269:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "1270:    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE6,0x61,0xCE,0x18,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1749:    0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1277: static const struct { EC_CURVE_DATA h; unsigned char data[20+21*6]; }",
          "1278:  _EC_X9_62_CHAR2_163V1 = {",
          "1279:  { NID_X9_62_characteristic_two_field,20,21,2 },",
          "1284:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "1285:    0x07,",
          "1287:    0x78,0x96,0x75,0xF4,0x32,0xC8,0x94,0x35,0xDE,0x52,",
          "1288:    0x42,",
          "1290:    0x38,0xC7,0x4B,0x20,0xB6,0xCD,0x4D,0x6F,0x9D,0xD4,",
          "1291:    0xD9,",
          "1293:    0x9F,0xCC,0x3D,0x74,0x88,0x0F,0x33,0xBB,0xE8,0x03,",
          "1294:    0xCB,",
          "1296:    0x3F,0x87,0xF7,0xEA,0x58,0x48,0xAE,0xF0,0xB7,0xCA,",
          "1297:    0x9F,",
          "1299:    0x01,0xE6,0x0F,0xC8,0x82,0x1C,0xC7,0x4D,0xAE,0xAF,",
          "1300:    0xC1 }",
          "1301:  };",
          "",
          "[Removed Lines]",
          "1280:  { 0xD2,0xC0,0xFB,0x15,0x76,0x08,0x60,0xDE,0xF1,0xEE,",
          "",
          "[Added Lines]",
          "1762:  {",
          "1764:    0xD2,0xC0,0xFB,0x15,0x76,0x08,0x60,0xDE,0xF1,0xEE,",
          "1765:    0xF4,0xD6,0x96,0xE6,0x76,0x87,0x56,0x15,0x17,0x54,",
          "1768:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1773:    0x07,0x25,0x46,0xB5,0x43,0x52,0x34,0xA4,0x22,0xE0,",
          "1778:    0x00,0xC9,0x51,0x7D,0x06,0xD5,0x24,0x0D,0x3C,0xFF,",
          "1783:    0x07,0xAF,0x69,0x98,0x95,0x46,0x10,0x3D,0x79,0x32,",
          "1788:    0x01,0xEC,0x23,0x21,0x1B,0x59,0x66,0xAD,0xEA,0x1D,",
          "1793:    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1303: static const struct { EC_CURVE_DATA h; unsigned char data[20+21*6]; }",
          "1304:  _EC_X9_62_CHAR2_163V2 = {",
          "1305:  { NID_X9_62_characteristic_two_field,20,21,2 },",
          "1307:    0x87,0x56,0x15,0x17,0x58,0x0C,0xA4,0xE2,0x9F,0xFD,",
          "1310:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "1311:    0x07,",
          "1313:    0x81,0xED,0x0E,0x89,0x0E,0x11,0x7C,0x51,0x1C,0xF0,",
          "1314:    0x72,",
          "1316:    0x74,0x33,0xFF,0xAE,0x4F,0x1C,0x81,0x16,0x38,0xDF,",
          "1317:    0x20,",
          "1319:    0x4D,0x92,0xC4,0x86,0x0E,0x26,0x71,0xDB,0x9B,0x6C,",
          "1320:    0xC5,",
          "1322:    0x8B,0x38,0x90,0x02,0x1B,0x23,0x86,0xDF,0xD1,0x9F,",
          "1323:    0xC5,",
          "1325:    0xFD,0xF6,0x4D,0xE1,0x15,0x1A,0xDB,0xB7,0x8F,0x10,",
          "1326:    0xA7 }",
          "1327:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1801:  {",
          "1803:    0x53,0x81,0x4C,0x05,0x0D,0x44,0xD6,0x96,0xE6,0x76,",
          "1807:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1812:    0x01,0x08,0xB3,0x9E,0x77,0xC4,0xB1,0x08,0xBE,0xD9,",
          "1817:    0x06,0x67,0xAC,0xEB,0x38,0xAF,0x4E,0x48,0x8C,0x40,",
          "1822:    0x00,0x24,0x26,0x6E,0x4E,0xB5,0x10,0x6D,0x0A,0x96,",
          "1827:    0x07,0x9F,0x68,0x4D,0xDF,0x66,0x84,0xC5,0xCD,0x25,",
          "1832:    0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1329: static const struct { EC_CURVE_DATA h; unsigned char data[20+21*6]; }",
          "1330:  _EC_X9_62_CHAR2_163V3 = {",
          "1331:  { NID_X9_62_characteristic_two_field,20,21,2 },",
          "1333:    0x68,0x75,0x61,0x51,0x75,0xF1,0x6A,0x36,0xA3,0xB8,",
          "1336:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "1337:    0x07,",
          "1339:    0x07,0x69,0x9F,0x54,0x47,0xE3,0x2A,0xE4,0x56,0xB5,",
          "1340:    0x0E,",
          "1342:    0x6F,0x1B,0xF9,0x5B,0x48,0xFE,0xEB,0x48,0x54,0x25,",
          "1343:    0x2B,",
          "1345:    0x8A,0x22,0xE6,0x52,0x47,0x75,0xF9,0x8C,0xDE,0xBD,",
          "1346:    0xCB,",
          "1348:    0xEB,0x3F,0xF3,0x71,0x8B,0x89,0x3D,0xF5,0x9A,0x05,",
          "1349:    0xD0,",
          "1351:    0xFE,0x1A,0xEE,0x14,0x0F,0x11,0x0A,0xFF,0x96,0x13,",
          "1352:    0x09 }",
          "1353:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1840:  {",
          "1842:    0x50,0xCB,0xF1,0xD9,0x5C,0xA9,0x4D,0x69,0x6E,0x67,",
          "1846:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1851:    0x07,0xA5,0x26,0xC6,0x3D,0x3E,0x25,0xA2,0x56,0xA0,",
          "1856:    0x03,0xF7,0x06,0x17,0x98,0xEB,0x99,0xE2,0x38,0xFD,",
          "1861:    0x02,0xF9,0xF8,0x7B,0x7C,0x57,0x4D,0x0B,0xDE,0xCF,",
          "1866:    0x05,0xB9,0x35,0x59,0x0C,0x15,0x5E,0x17,0xEA,0x48,",
          "1871:    0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1355: static const struct { EC_CURVE_DATA h; unsigned char data[0+23*6]; }",
          "1356:  _EC_X9_62_CHAR2_176V1 = {",
          "1357:  { NID_X9_62_characteristic_two_field,0,23,0xFF6E },",
          "1360:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,",
          "1361:    0x00,0x00,0x07,",
          "1363:    0x9D,0x39,0xB8,0xD0,0x96,0x7B,0x96,0x70,0x4B,0xA8,",
          "1364:    0xE9,0xC9,0x0B,",
          "1366:    0xC1,0x33,0xAE,0x28,0xE9,0xBB,0xD7,0xFC,0xEC,0x0A,",
          "1367:    0xE0,0xFF,0xF2,",
          "1369:    0xF0,0x8B,0xB4,0xA8,0xE8,0x60,0xF3,0x29,0x8C,0xE0,",
          "1370:    0x4A,0x57,0x98,",
          "1372:    0xB5,0x16,0x7D,0x61,0xB4,0x36,0xE1,0xD9,0x2B,0xB1,",
          "1373:    0x6A,0x56,0x2C,",
          "1375:    0xF6,0x14,0x57,0x99,0xD6,0x2B,0x0A,0x19,0xCE,0x06,",
          "1376:    0xFE,0x26,0xAD }",
          "1377:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1879:  {",
          "1882:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1887:    0x00,0xE4,0xE6,0xDB,0x29,0x95,0x06,0x5C,0x40,0x7D,",
          "1892:    0x00,0x5D,0xDA,0x47,0x0A,0xBE,0x64,0x14,0xDE,0x8E,",
          "1897:    0x00,0x8D,0x16,0xC2,0x86,0x67,0x98,0xB6,0x00,0xF9,",
          "1902:    0x00,0x6F,0xA4,0x53,0x9C,0x2D,0xAD,0xDD,0xD6,0xBA,",
          "1907:    0x00,0x00,0x01,0x00,0x92,0x53,0x73,0x97,0xEC,0xA4,",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1379: static const struct { EC_CURVE_DATA h; unsigned char data[20+24*6]; }",
          "1380:  _EC_X9_62_CHAR2_191V1 = {",
          "1381:  { NID_X9_62_characteristic_two_field,20,24,2 },",
          "1383:    0x87,0x56,0x15,0x17,0x55,0x2F,0x27,0x9A,0x8C,0x84,",
          "1386:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1387:    0x00,0x00,0x02,0x01,",
          "1389:    0xF5,0x65,0x54,0xE1,0x26,0x40,0x27,0x6B,0x64,0x9E,",
          "1390:    0xF7,0x52,0x62,0x67,",
          "1392:    0x08,0x1B,0x94,0x95,0xA3,0xD9,0x54,0x62,0xF5,0xDE,",
          "1393:    0x0A,0xA1,0x85,0xEC,",
          "1395:    0x99,0xD7,0xB2,0x1A,0x9C,0x36,0x91,0x37,0xF2,0xC8,",
          "1396:    0x4A,0xE1,0xAA,0x0D,",
          "1398:    0x32,0xE7,0x0E,0xA2,0x45,0xCA,0x24,0x18,0xEA,0x0E,",
          "1399:    0xF9,0x80,0x18,0xFB,",
          "1401:    0x00,0x00,0x04,0xA2,0x0E,0x90,0xC3,0x90,0x67,0xC8,",
          "1402:    0x93,0xBB,0xB9,0xA5 }",
          "1403:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1915:  {",
          "1917:    0x4E,0x13,0xCA,0x54,0x27,0x44,0xD6,0x96,0xE6,0x76,",
          "1921:    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1926:    0x28,0x66,0x53,0x7B,0x67,0x67,0x52,0x63,0x6A,0x68,",
          "1931:    0x2E,0x45,0xEF,0x57,0x1F,0x00,0x78,0x6F,0x67,0xB0,",
          "1936:    0x36,0xB3,0xDA,0xF8,0xA2,0x32,0x06,0xF9,0xC4,0xF2,",
          "1941:    0x76,0x5B,0xE7,0x34,0x33,0xB3,0xF9,0x5E,0x33,0x29,",
          "1946:    0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1405: static const struct { EC_CURVE_DATA h; unsigned char data[20+24*6]; }",
          "1406:  _EC_X9_62_CHAR2_191V2 = {",
          "1407:  { NID_X9_62_characteristic_two_field,20,24,4 },",
          "1409:    0x87,0x56,0x15,0x17,0x58,0xBE,0xE0,0xD9,0x5C,0x15,",
          "1412:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1413:    0x00,0x00,0x02,0x01,",
          "1415:    0x6D,0x13,0x66,0xEA,0x43,0x20,0x71,0x27,0x4F,0x89,",
          "1416:    0xFF,0x01,0xE7,0x18,",
          "1418:    0x9C,0x99,0x18,0x2B,0x7C,0x8C,0xD1,0x97,0x00,0xC3,",
          "1419:    0x62,0xC4,0x6A,0x01,",
          "1421:    0x92,0x6A,0xAD,0x83,0xFD,0x28,0x78,0x9E,0x81,0xE2,",
          "1422:    0xC9,0xE3,0xBF,0x10,",
          "1424:    0x17,0x60,0xD9,0x21,0x3A,0x3E,0x1C,0xF3,0x7A,0xEC,",
          "1425:    0x43,0x7D,0x66,0x8A,",
          "1427:    0x00,0x00,0x50,0x50,0x8C,0xB8,0x9F,0x65,0x28,0x24,",
          "1428:    0xE0,0x6B,0x81,0x73 }",
          "1429:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1954:  {",
          "1956:    0x08,0x71,0xEF,0x2F,0xEF,0x24,0xD6,0x96,0xE6,0x76,",
          "1960:    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1965:    0x40,0x10,0x28,0x77,0x4D,0x77,0x77,0xC7,0xB7,0x66,",
          "1970:    0x06,0x20,0x04,0x8D,0x28,0xBC,0xBD,0x03,0xB6,0x24,",
          "1975:    0x38,0x09,0xB2,0xB7,0xCC,0x1B,0x28,0xCC,0x5A,0x87,",
          "1980:    0x17,0x43,0x43,0x86,0x62,0x6D,0x14,0xF3,0xDB,0xF0,",
          "1985:    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1431: static const struct { EC_CURVE_DATA h; unsigned char data[20+24*6]; }",
          "1432:  _EC_X9_62_CHAR2_191V3 = {",
          "1433:  { NID_X9_62_characteristic_two_field,20,24,6 },",
          "1435:    0x87,0x56,0x15,0x17,0x50,0x67,0xAE,0x78,0x6D,0x1F,",
          "1438:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1439:    0x00,0x00,0x02,0x01,",
          "1441:    0x56,0x91,0x1C,0x77,0xD7,0x7E,0x77,0xA7,0x77,0xE7,",
          "1442:    0xE7,0xE7,0x7F,0xCB,",
          "1444:    0xEF,0x8D,0xB4,0x59,0xF6,0x63,0x94,0xD9,0x0F,0x32,",
          "1445:    0xAD,0x3F,0x15,0xE8,",
          "1447:    0x87,0x46,0xE7,0x17,0x86,0x01,0x50,0x09,0xE6,0x6E,",
          "1448:    0x38,0xA9,0x26,0xDD,",
          "1450:    0x99,0x36,0x6E,0x6A,0xD3,0x4C,0xE0,0xA7,0x7C,0xD7,",
          "1451:    0x12,0x7B,0x06,0xBE,",
          "1453:    0x55,0x55,0x61,0x0C,0x0B,0x19,0x68,0x12,0xBF,0xB6,",
          "1454:    0x28,0x8A,0x3E,0xA3 }",
          "1455:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1993:  {",
          "1995:    0xE0,0x53,0x51,0x2D,0xC6,0x84,0xD6,0x96,0xE6,0x76,",
          "1999:    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2004:    0x6C,0x01,0x07,0x47,0x56,0x09,0x91,0x22,0x22,0x10,",
          "2009:    0x71,0xFE,0x1A,0xF9,0x26,0xCF,0x84,0x79,0x89,0xEF,",
          "2014:    0x37,0x5D,0x4C,0xE2,0x4F,0xDE,0x43,0x44,0x89,0xDE,",
          "2019:    0x54,0x5A,0x39,0x17,0x61,0x96,0x57,0x5D,0x98,0x59,",
          "2024:    0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1457: static const struct { EC_CURVE_DATA h; unsigned char data[0+27*6]; }",
          "1458:  _EC_X9_62_CHAR2_208W1 = {",
          "1459:  { NID_X9_62_characteristic_two_field,0,27,0xFE48 },",
          "1462:    0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,",
          "1463:    0x00,0x00,0x00,0x00,0x00,0x00,0x07,",
          "1465:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1466:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1468:    0x11,0x60,0x34,0x9E,0x2B,0xFA,0x84,0x44,0x39,0xFA,",
          "1469:    0xFC,0x2A,0x3F,0xD1,0x63,0x8F,0x9E,",
          "1471:    0x59,0xEC,0xF0,0x7A,0xC0,0xCE,0x78,0x55,0x4E,0x27,",
          "1472:    0x84,0xEB,0x8C,0x1E,0xD1,0xA5,0x7A,",
          "1474:    0x8A,0x03,0x5F,0xF5,0x20,0xD8,0xB0,0x17,0x81,0xBE,",
          "1475:    0xB1,0xA6,0xBB,0x08,0x61,0x7D,0xE3,",
          "1477:    0x7B,0x6C,0x21,0xDA,0x2E,0xFF,0x2D,0x5E,0xD5,0x88,",
          "1478:    0xBD,0xD5,0x71,0x7E,0x21,0x2F,0x9D }",
          "1479:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2032:  {",
          "2035:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2040:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2045:    0x00,0xC8,0x61,0x9E,0xD4,0x5A,0x62,0xE6,0x21,0x2E,",
          "2050:    0x00,0x89,0xFD,0xFB,0xE4,0xAB,0xE1,0x93,0xDF,0x95,",
          "2055:    0x00,0x0F,0x55,0xB5,0x1A,0x06,0xE7,0x8E,0x9A,0xC3,",
          "2060:    0x00,0x00,0x01,0x01,0xBA,0xF9,0x5C,0x97,0x23,0xC5,",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1481: static const struct { EC_CURVE_DATA h; unsigned char data[20+30*6]; }",
          "1482:  _EC_X9_62_CHAR2_239V1 = {",
          "1483:  { NID_X9_62_characteristic_two_field,20,30,4 },",
          "1485:    0x51,0x75,0xCA,0x71,0xB9,0x20,0xBF,0xEF,0xB0,0x5D,",
          "1488:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1489:    0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,",
          "1492:    0x46,0xB8,0x08,0x90,0x67,0x56,0xF5,0x43,0x42,0x3E,",
          "1493:    0x8D,0x27,0x87,0x75,0x78,0x12,0x57,0x78,0xAC,0x76,",
          "1496:    0xED,0xEF,0xB3,0x39,0x2F,0x30,0xF4,0x32,0x7C,0x0C,",
          "1497:    0xA3,0xF3,0x1F,0xC3,0x83,0xC4,0x22,0xAA,0x8C,0x16,",
          "1500:    0xD3,0xFD,0x5B,0x70,0x6E,0xF7,0xE5,0xF5,0xC1,0x56,",
          "1501:    0xE1,0x6B,0x7E,0x7C,0x86,0x03,0x85,0x52,0xE9,0x1D,",
          "1504:    0xA1,0x6B,0x26,0x8D,0xE4,0x69,0xC3,0xC7,0x74,0x4E,",
          "1505:    0xA9,0xA9,0x71,0x64,0x9F,0xC7,0xA9,0x61,0x63,0x05,",
          "1508:    0x00,0x00,0x00,0x00,0x00,0x0F,0x4D,0x42,0xFF,0xE1,",
          "1509:    0x49,0x2A,0x49,0x93,0xF1,0xCA,0xD6,0x66,0xE4,0x47 }",
          "1510:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2068:  {",
          "2070:    0xD3,0x4B,0x9A,0x4D,0x69,0x6E,0x67,0x68,0x75,0x61,",
          "2074:    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2079:    0x32,0x01,0x08,0x57,0x07,0x7C,0x54,0x31,0x12,0x3A,",
          "2084:    0x79,0x04,0x08,0xF2,0xEE,0xDA,0xF3,0x92,0xB0,0x12,",
          "2089:    0x57,0x92,0x70,0x98,0xFA,0x93,0x2E,0x7C,0x0A,0x96,",
          "2094:    0x61,0xD8,0xEE,0x50,0x77,0xC3,0x3F,0xEC,0xF6,0xF1,",
          "2099:    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1512: static const struct { EC_CURVE_DATA h; unsigned char data[20+30*6]; }",
          "1513:  _EC_X9_62_CHAR2_239V2 = {",
          "1514:  { NID_X9_62_characteristic_two_field,20,30,6 },",
          "1516:    0x87,0x56,0x15,0x17,0x5D,0x26,0x67,0x27,0x27,0x7D,",
          "1519:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1520:    0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,",
          "1523:    0x98,0x56,0x9B,0x74,0x63,0x25,0xD4,0x53,0x13,0xAF,",
          "1524:    0x07,0x66,0x26,0x64,0x79,0xB7,0x56,0x54,0xE6,0x5F,",
          "1527:    0xB2,0xC1,0x4A,0x2F,0xCF,0x2E,0x3F,0xF8,0x77,0x52,",
          "1528:    0x85,0xB5,0x45,0x72,0x2F,0x03,0xEA,0xCD,0xB7,0x4B,",
          "1531:    0xA0,0x85,0x34,0xFE,0x76,0xD2,0xB9,0x00,0xB7,0xD7,",
          "1532:    0xEF,0x31,0xF5,0x70,0x9F,0x20,0x0C,0x4C,0xA2,0x05,",
          "1535:    0xAD,0x9D,0xD7,0x5E,0x2C,0x71,0xA9,0x93,0x62,0x56,",
          "1536:    0x7D,0x54,0x53,0xF7,0xFA,0x6E,0x22,0x7E,0xC8,0x33,",
          "1539:    0x55,0x55,0x55,0x55,0x55,0x3C,0x6F,0x28,0x85,0x25,",
          "1540:    0x9C,0x31,0xE3,0xFC,0xDF,0x15,0x46,0x24,0x52,0x2D }",
          "1541:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2107:  {",
          "2109:    0x2A,0xA6,0x98,0x2F,0xDF,0xA4,0xD6,0x96,0xE6,0x76,",
          "2113:    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2118:    0x42,0x30,0x01,0x77,0x57,0xA7,0x67,0xFA,0xE4,0x23,",
          "2123:    0x50,0x37,0xEA,0x65,0x41,0x96,0xCF,0xF0,0xCD,0x82,",
          "2128:    0x28,0xF9,0xD0,0x4E,0x90,0x00,0x69,0xC8,0xDC,0x47,",
          "2133:    0x56,0x67,0x33,0x4C,0x45,0xAF,0xF3,0xB5,0xA0,0x3B,",
          "2138:    0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1543: static const struct { EC_CURVE_DATA h; unsigned char data[20+30*6]; }",
          "1544:  _EC_X9_62_CHAR2_239V3 = {",
          "1545:  { NID_X9_62_characteristic_two_field,20,30,0xA },",
          "1547:    0x51,0x75,0xE1,0x1E,0x9F,0xDD,0x77,0xF9,0x20,0x41,",
          "1550:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1551:    0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,",
          "1554:    0x76,0xF7,0x78,0xE6,0x76,0xB6,0x69,0x99,0x17,0x66,",
          "1555:    0x66,0xE6,0x87,0x66,0x6D,0x87,0x66,0xC6,0x6A,0x9F,",
          "1558:    0xAC,0xFC,0x51,0x06,0x7E,0xD5,0x87,0xF5,0x19,0xC5,",
          "1559:    0xEC,0xB5,0x41,0xB8,0xE4,0x41,0x11,0xDE,0x1D,0x40,",
          "1562:    0x3C,0xE3,0x53,0x0B,0xFD,0xE9,0x03,0x97,0x7D,0x42,",
          "1563:    0xB1,0x46,0xD5,0x39,0xBF,0x1B,0xDE,0x4E,0x9C,0x92,",
          "1566:    0x4D,0xCE,0x5C,0x0E,0xD7,0xFE,0x59,0xA3,0x56,0x08,",
          "1567:    0xF3,0x38,0x37,0xC8,0x16,0xD8,0x0B,0x79,0xF4,0x61,",
          "1570:    0xCC,0xCC,0xCC,0xCC,0xCC,0xAC,0x49,0x12,0xD2,0xD9,",
          "1571:    0xDF,0x90,0x3E,0xF9,0x88,0x8B,0x8A,0x0E,0x4C,0xFF }",
          "1572:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2146:  {",
          "2148:    0x9E,0x07,0x6F,0x4D,0x69,0x6E,0x67,0x68,0x75,0x61,",
          "2152:    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2157:    0x01,0x23,0x87,0x74,0x66,0x6A,0x67,0x76,0x6D,0x66,",
          "2162:    0x6A,0x94,0x19,0x77,0xBA,0x9F,0x6A,0x43,0x51,0x99,",
          "2167:    0x70,0xF6,0xE9,0xD0,0x4D,0x28,0x9C,0x4E,0x89,0x91,",
          "2172:    0x2E,0x5A,0x0E,0xAF,0x6E,0x5E,0x13,0x05,0xB9,0x00,",
          "2177:    0x0C,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1574: static const struct { EC_CURVE_DATA h; unsigned char data[0+35*6]; }",
          "1575:  _EC_X9_62_CHAR2_272W1 = {",
          "1576:  { NID_X9_62_characteristic_two_field,0,35,0xFF06 },",
          "1579:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1580:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,",
          "1581:    0x00,0x00,0x00,0x00,0x0B,",
          "1583:    0xCC,0xF4,0x9C,0x4E,0xDD,0x22,0x0F,0xB0,0x28,0x71,",
          "1584:    0x2D,0x42,0xBE,0x75,0x2B,0x2C,0x40,0x09,0x4D,0xBA,",
          "1585:    0xCD,0xB5,0x86,0xFB,0x20,",
          "1587:    0x8A,0xAA,0xFF,0x34,0xE1,0x2A,0x9C,0x55,0x70,0x03,",
          "1588:    0xD7,0xC7,0x3A,0x6F,0xAF,0x00,0x3F,0x99,0xF6,0xCC,",
          "1589:    0x84,0x82,0xE5,0x40,0xF7,",
          "1591:    0x05,0x8A,0x05,0x6C,0xBE,0x0C,0xFE,0x62,0x2D,0x77,",
          "1592:    0x23,0xA2,0x89,0xE0,0x8A,0x07,0xAE,0x13,0xEF,0x0D,",
          "1593:    0x10,0xD1,0x71,0xDD,0x8D,",
          "1595:    0xA7,0xF6,0x87,0x2E,0x61,0x42,0xFB,0xD2,0x41,0xB8,",
          "1596:    0x30,0xFF,0x5E,0xFC,0xAC,0xEC,0xCA,0xB0,0x5E,0x02,",
          "1597:    0x00,0x5D,0xDE,0x9D,0x23,",
          "1599:    0x9E,0x48,0x92,0xDF,0x6E,0x31,0x9C,0x72,0xC8,0x16,",
          "1600:    0x16,0x03,0xFA,0x45,0xAA,0x7B,0x99,0x8A,0x16,0x7B,",
          "1601:    0x8F,0x1E,0x62,0x95,0x21 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2185:  {",
          "2188:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2194:    0x00,0x91,0xA0,0x91,0xF0,0x3B,0x5F,0xBA,0x4A,0xB2,",
          "2200:    0x00,0x71,0x67,0xEF,0xC9,0x2B,0xB2,0xE3,0xCE,0x7C,",
          "2206:    0x00,0x61,0x08,0xBA,0xBB,0x2C,0xEE,0xBC,0xF7,0x87,",
          "2212:    0x00,0x10,0xC7,0x69,0x57,0x16,0x85,0x1E,0xEF,0x6B,",
          "2218:    0x00,0x00,0x01,0x00,0xFA,0xF5,0x13,0x54,0xE0,0xE3,",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1604: static const struct { EC_CURVE_DATA h; unsigned char data[0+39*6]; }",
          "1605:  _EC_X9_62_CHAR2_304W1 = {",
          "1606:  { NID_X9_62_characteristic_two_field,0,39,0xFE2E },",
          "1609:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1610:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1611:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x07,",
          "1613:    0xE6,0xDC,0xE6,0x80,0x20,0x85,0x37,0x7E,0x5F,0x88,",
          "1614:    0x2D,0x1B,0x51,0x0B,0x44,0x16,0x00,0x74,0xC1,0x28,",
          "1615:    0x80,0x78,0x36,0x5A,0x03,0x96,0xC8,0xE6,0x81,",
          "1617:    0x43,0xB0,0x1C,0x79,0x8E,0xA5,0xDA,0xA6,0x78,0x8F,",
          "1618:    0x1E,0xA2,0x79,0x4E,0xFC,0xF5,0x71,0x66,0xB8,0xC1,",
          "1619:    0x40,0x39,0x60,0x1E,0x55,0x82,0x73,0x40,0xBE,",
          "1621:    0xDB,0x0F,0x5F,0x3C,0x7F,0x2C,0xFF,0xBD,0x7A,0x3E,",
          "1622:    0xB8,0xB6,0xFE,0xC3,0x5C,0x7F,0xD6,0x7F,0x26,0xDD,",
          "1623:    0xF6,0x28,0x5A,0x64,0x4F,0x74,0x0A,0x26,0x14,",
          "1625:    0x7E,0xCF,0x40,0x1B,0x50,0x28,0x9B,0xF0,0x14,0x10,",
          "1626:    0x32,0x88,0x52,0x7A,0x9B,0x41,0x6A,0x10,0x5E,0x80,",
          "1627:    0x26,0x0B,0x54,0x9F,0xDC,0x1B,0x92,0xC0,0x3B,",
          "1629:    0x80,0x01,0x01,0xD5,0x56,0x57,0x2A,0xAB,0xAC,0x80,",
          "1630:    0x01,0x02,0x2D,0x5C,0x91,0xDD,0x17,0x3F,0x8F,0xB5,",
          "1631:    0x61,0xDA,0x68,0x99,0x16,0x44,0x43,0x05,0x1D }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2227:  {",
          "2230:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2235:    0x00,0xFD,0x0D,0x69,0x31,0x49,0xA1,0x18,0xF6,0x51,",
          "2240:    0x00,0xBD,0xDB,0x97,0xE5,0x55,0xA5,0x0A,0x90,0x8E,",
          "2245:    0x00,0x19,0x7B,0x07,0x84,0x5E,0x9B,0xE2,0xD9,0x6A,",
          "2250:    0x00,0xE1,0x9F,0xBE,0xB7,0x6E,0x0D,0xA1,0x71,0x51,",
          "2255:    0x00,0x00,0x01,0x01,0xD5,0x56,0x57,0x2A,0xAB,0xAC,",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1634: static const struct { EC_CURVE_DATA h; unsigned char data[20+45*6]; }",
          "1635:  _EC_X9_62_CHAR2_359V1 = {",
          "1636:  { NID_X9_62_characteristic_two_field,20,45,0x4C },",
          "1638:    0x87,0x56,0x15,0x17,0x58,0x5B,0xA1,0x33,0x2D,0xC6,",
          "1641:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1642:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1643:    0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,",
          "1644:    0x00,0x00,0x00,0x00,0x01,",
          "1646:    0x6E,0xA9,0x20,0x17,0xD9,0x46,0x56,0x7C,0x46,0x67,",
          "1647:    0x55,0x56,0xF1,0x95,0x56,0xA0,0x46,0x16,0xB5,0x67,",
          "1648:    0xD2,0x23,0xA5,0xE0,0x56,0x56,0xFB,0x54,0x90,0x16,",
          "1649:    0xA9,0x66,0x56,0xA5,0x57,",
          "1651:    0xE7,0xF5,0xB6,0xDB,0x07,0x5D,0x52,0xB6,0x94,0x7D,",
          "1652:    0x13,0x5D,0x8C,0xA4,0x45,0x80,0x5D,0x39,0xBC,0x34,",
          "1653:    0x56,0x26,0x08,0x96,0x87,0x74,0x2B,0x63,0x29,0xE7,",
          "1654:    0x06,0x80,0x23,0x19,0x88,",
          "1656:    0xF1,0xFD,0xAA,0x79,0xDA,0xEE,0x38,0x41,0x36,0x6A,",
          "1657:    0x13,0x2E,0x16,0x3A,0xCE,0xD4,0xED,0x24,0x01,0xDF,",
          "1658:    0x9C,0x6B,0xDC,0xDE,0x98,0xE8,0xE7,0x07,0xC0,0x7A,",
          "1659:    0x22,0x39,0xB1,0xB0,0x97,",
          "1661:    0x9C,0x95,0xF3,0x79,0x1D,0xD8,0x04,0x96,0x39,0x48,",
          "1662:    0xF3,0x4F,0xAE,0x7B,0xF4,0x4E,0xA8,0x23,0x65,0xDC,",
          "1663:    0x78,0x68,0xFE,0x57,0xE4,0xAE,0x2D,0xE2,0x11,0x30,",
          "1664:    0x5A,0x40,0x71,0x04,0xBD,",
          "1666:    0xAF,0x28,0x6B,0xCA,0x1A,0xF2,0x86,0xBC,0xA1,0xAF,",
          "1667:    0x28,0x6B,0xC9,0xFB,0x8F,0x6B,0x85,0xC5,0x56,0x89,",
          "1668:    0x2C,0x20,0xA7,0xEB,0x96,0x4F,0xE7,0x71,0x9E,0x74,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2264:  {",
          "2266:    0x2B,0x35,0x49,0x20,0xB7,0x24,0xD6,0x96,0xE6,0x76,",
          "2270:    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2277:    0x56,0x67,0x67,0x6A,0x65,0x4B,0x20,0x75,0x4F,0x35,",
          "2284:    0x24,0x72,0xE2,0xD0,0x19,0x7C,0x49,0x36,0x3F,0x1F,",
          "2291:    0x3C,0x25,0x8E,0xF3,0x04,0x77,0x67,0xE7,0xED,0xE0,",
          "2298:    0x53,0xD7,0xE0,0x85,0x29,0x54,0x70,0x48,0x12,0x1E,",
          "2305:    0x01,0xAF,0x28,0x6B,0xCA,0x1A,0xF2,0x86,0xBC,0xA1,",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1672: static const struct { EC_CURVE_DATA h; unsigned char data[0+47*6]; }",
          "1673:  _EC_X9_62_CHAR2_368W1 = {",
          "1674:  { NID_X9_62_characteristic_two_field,0,47,0xFF70 },",
          "1677:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1678:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1679:    0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,",
          "1680:    0x00,0x00,0x00,0x00,0x00,0x00,0x07,",
          "1682:    0xA4,0xF9,0xED,0x22,0x9F,0x1F,0x25,0x6E,0x79,0xA0,",
          "1683:    0xE2,0xB4,0x55,0x97,0x0D,0x8D,0x0D,0x86,0x5B,0xD9,",
          "1684:    0x47,0x78,0xC5,0x76,0xD6,0x2F,0x0A,0xB7,0x51,0x9C,",
          "1685:    0xCD,0x2A,0x1A,0x90,0x6A,0xE3,0x0D,",
          "1687:    0x76,0x0A,0x58,0xED,0xCD,0x30,0xC8,0xDD,0x06,0x9B,",
          "1688:    0x3C,0x34,0x45,0x38,0x37,0xA3,0x4E,0xD5,0x0C,0xB5,",
          "1689:    0x49,0x17,0xE1,0xC2,0x11,0x2D,0x84,0xD1,0x64,0xF4,",
          "1690:    0x44,0xF8,0xF7,0x47,0x86,0x04,0x6A,",
          "1692:    0xC1,0x55,0x7A,0xFA,0x10,0xC2,0xF0,0xC0,0xC2,0x82,",
          "1693:    0x56,0x46,0xC5,0xB3,0x4A,0x39,0x4C,0xBC,0xFA,0x8B,",
          "1694:    0xC1,0x6B,0x22,0xE7,0xE7,0x89,0xE9,0x27,0xBE,0x21,",
          "1695:    0x6F,0x02,0xE1,0xFB,0x13,0x6A,0x5F,",
          "1697:    0xB2,0x05,0x9B,0x52,0x57,0x97,0xFC,0x73,0x82,0x2C,",
          "1698:    0x59,0x05,0x9C,0x62,0x3A,0x45,0xFF,0x38,0x43,0xCE,",
          "1699:    0xE8,0xF8,0x7C,0xD1,0x85,0x5A,0xDA,0xA8,0x1E,0x2A,",
          "1700:    0x07,0x50,0xB8,0x0F,0xDA,0x23,0x10,",
          "1702:    0xB0,0x83,0x49,0xD9,0x8A,0x5D,0xD4,0xC7,0xB0,0x53,",
          "1703:    0x2E,0xCA,0x51,0xCE,0x03,0xE2,0xD1,0x0F,0x3B,0x7A,",
          "1704:    0xC5,0x79,0xBD,0x87,0xE9,0x09,0xAE,0x40,0xA6,0xF1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2315:  {",
          "2318:    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2325:    0x00,0xE0,0xD2,0xEE,0x25,0x09,0x52,0x06,0xF5,0xE2,",
          "2332:    0x00,0xFC,0x12,0x17,0xD4,0x32,0x0A,0x90,0x45,0x2C,",
          "2339:    0x00,0x10,0x85,0xE2,0x75,0x53,0x81,0xDC,0xCC,0xE3,",
          "2346:    0x00,0x7B,0x3E,0xB1,0xBD,0xDC,0xBA,0x62,0xD5,0xD8,",
          "2353:    0x00,0x00,0x01,0x00,0x90,0x51,0x2D,0xA9,0xAF,0x72,",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1708: static const struct { EC_CURVE_DATA h; unsigned char data[0+54*6]; }",
          "1709:  _EC_X9_62_CHAR2_431R1 = {",
          "1710:  { NID_X9_62_characteristic_two_field,0,54,0x2760 },",
          "1713:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1714:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1715:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,",
          "1716:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1717:    0x00,0x00,0x00,0x01,",
          "1719:    0xAF,0x04,0x6C,0x6A,0x5D,0x8A,0x85,0x39,0x5B,0x23,",
          "1720:    0x6C,0xC4,0xAD,0x2C,0xF3,0x2A,0x0C,0xAD,0xBD,0xC9,",
          "1721:    0xDD,0xF6,0x20,0xB0,0xEB,0x99,0x06,0xD0,0x95,0x7F,",
          "1722:    0x6C,0x6F,0xEA,0xCD,0x61,0x54,0x68,0xDF,0x10,0x4D,",
          "1723:    0xE2,0x96,0xCD,0x8F,",
          "1725:    0x59,0xAB,0xFB,0x1B,0x7F,0x54,0x85,0xB0,0x4C,0xEB,",
          "1726:    0x86,0x82,0x37,0xDD,0xC9,0xDE,0xDA,0x98,0x2A,0x67,",
          "1727:    0x9A,0x5A,0x91,0x9B,0x62,0x6D,0x4E,0x50,0xA8,0xDD,",
          "1728:    0x73,0x1B,0x10,0x7A,0x99,0x62,0x38,0x1F,0xB5,0xD8,",
          "1729:    0x07,0xBF,0x26,0x18,",
          "1731:    0xD2,0xF4,0x09,0x26,0x22,0xFE,0xCA,0x70,0x1B,0xE4,",
          "1732:    0xF5,0x0F,0x47,0x58,0x71,0x4E,0x8A,0x87,0xBB,0xF2,",
          "1733:    0xA6,0x58,0xEF,0x8C,0x21,0xE7,0xC5,0xEF,0xE9,0x65,",
          "1734:    0x36,0x1F,0x6C,0x29,0x99,0xC0,0xC2,0x47,0xB0,0xDB,",
          "1735:    0xD7,0x0C,0xE6,0xB7,",
          "1737:    0xC2,0x55,0x74,0x5D,0x3C,0x45,0x1B,0x30,0x2C,0x93,",
          "1738:    0x46,0xD9,0xB7,0xE4,0x85,0xE7,0xBC,0xE4,0x1F,0x6B,",
          "1739:    0x59,0x1F,0x3E,0x8F,0x6A,0xDD,0xCB,0xB0,0xBC,0x4C,",
          "1740:    0x2F,0x94,0x7A,0x7D,0xE1,0xA8,0x9B,0x62,0x5D,0x6A,",
          "1741:    0x59,0x8B,0x37,0x60,",
          "1743:    0x03,0x40,0x34,0x03,0x40,0x34,0x03,0x40,0x34,0x03,",
          "1744:    0x40,0x34,0x03,0x40,0x34,0x03,0x40,0x34,0x03,0x23,",
          "1745:    0xC3,0x13,0xFA,0xB5,0x05,0x89,0x70,0x3B,0x5E,0xC6,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2363:  {",
          "2366:    0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2374:    0x1A,0x82,0x7E,0xF0,0x0D,0xD6,0xFC,0x0E,0x23,0x4C,",
          "2382:    0x10,0xD9,0xB4,0xA3,0xD9,0x04,0x7D,0x8B,0x15,0x43,",
          "2390:    0x12,0x0F,0xC0,0x5D,0x3C,0x67,0xA9,0x9D,0xE1,0x61,",
          "2398:    0x20,0xD0,0xAF,0x89,0x03,0xA9,0x6F,0x8D,0x5F,0xA2,",
          "2406:    0x00,0x03,0x40,0x34,0x03,0x40,0x34,0x03,0x40,0x34,",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1750: static const struct { EC_CURVE_DATA h; unsigned char data[0+15*6]; }",
          "1751:  _EC_WTLS_1 = {",
          "1752:  { NID_X9_62_characteristic_two_field,0,15,2 },",
          "1755:    0x00,0x00,0x00,0x02,0x01,",
          "1757:    0x00,0x00,0x00,0x00,0x01,",
          "1759:    0x00,0x00,0x00,0x00,0x01,",
          "1761:    0xC2,0x70,0x78,0x06,0x17,",
          "1763:    0x78,0x5C,0xEB,0xCC,0x15,",
          "1765:    0x91,0xAF,0x6D,0xEA,0x73 }",
          "1766:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2417:  {",
          "2420:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2424:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2428:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2432:    0x01,0x66,0x79,0x79,0xA4,0x0B,0xA4,0x97,0xE5,0xD5,",
          "2436:    0x00,0xF4,0x4B,0x4A,0xF1,0xEC,0xC2,0x63,0x0E,0x08,",
          "2440:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xBF,",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1774: static const struct { EC_CURVE_DATA h; unsigned char data[0+20*6]; }",
          "1775:  _EC_IPSEC_155_ID3 = {",
          "1776:  { NID_X9_62_characteristic_two_field,0,20,3 },",
          "1779:    0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x01,",
          "1782:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1785:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x33,0x8f,",
          "1788:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7b,",
          "1791:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc8,",
          "1794:    0xC7,0xF3,0xC7,0x88,0x1B,0xD0,0x86,0x8F,0xA8,0x6C }",
          "1795:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2453:  {",
          "2456:    0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2460:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2464:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2468:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2472:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2476:    0x02,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1802: static const struct { EC_CURVE_DATA h; unsigned char data[0+24*6]; }",
          "1803:  _EC_IPSEC_185_ID4 = {",
          "1804:  { NID_X9_62_characteristic_two_field,0,24,2 },",
          "1807:    0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,",
          "1808:    0x00,0x00,0x00,0x01,",
          "1810:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1811:    0x00,0x00,0x00,0x00,",
          "1813:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1814:    0x00,0x00,0x1e,0xe9,",
          "1816:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1817:    0x00,0x00,0x00,0x18,",
          "1819:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "1820:    0x00,0x00,0x00,0x0d,",
          "1822:    0xFF,0xFF,0xED,0xF9,0x7C,0x44,0xDB,0x9F,0x24,0x20,",
          "1823:    0xBA,0xFC,0xA7,0x5E }",
          "1824:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2488:  {",
          "2491:    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2496:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2501:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2506:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2511:    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
          "2516:    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1836: static const struct { EC_CURVE_DATA h; unsigned char data[0+20*6]; }",
          "1837:    _EC_brainpoolP160r1 = {",
          "1838:    { NID_X9_62_prime_field, 0,20,1 },",
          "1841:      0xC7,0xAD,0x95,0xB3,0xD8,0x13,0x95,0x15,0x62,0x0F,",
          "1843:      0x61,0xBA,0xDA,0x74,0x5D,0x97,0xE8,0xF7,0xC3,0x00,",
          "1845:      0xAA,0x2D,0xBD,0xEC,0x95,0xC8,0xD8,0x67,0x5E,0x58,",
          "1847:      0x8C,0x46,0x31,0xEB,0x5A,0xF7,0xBD,0xBC,0xDB,0xC3,",
          "1849:      0x47,0x41,0x66,0x9C,0x97,0x63,0x16,0xDA,0x63,0x21,",
          "1851:      0x59,0x91,0xD4,0x50,0x29,0x40,0x9E,0x60,0xFC,0x09 }",
          "1852:     };",
          "1854: static const struct { EC_CURVE_DATA h; unsigned char data[0+20*6]; }",
          "1855:    _EC_brainpoolP160t1 = {",
          "1856:    { NID_X9_62_prime_field, 0,20,1 },",
          "1859:      0xC7,0xAD,0x95,0xB3,0xD8,0x13,0x95,0x15,0x62,0x0F,",
          "1861:      0xC7,0xAD,0x95,0xB3,0xD8,0x13,0x95,0x15,0x62,0x0C,",
          "1863:      0x2C,0x4D,0x7D,0xAA,0x7A,0x0B,0x5C,0x55,0xF3,0x80,",
          "1865:      0x64,0xBA,0xEB,0x05,0xAC,0xC2,0x65,0xFF,0x23,0x78,",
          "1867:      0x1B,0x84,0x24,0x43,0x77,0x21,0x52,0xC9,0xE0,0xAD,",
          "1869:      0x59,0x91,0xD4,0x50,0x29,0x40,0x9E,0x60,0xFC,0x09 }",
          "1870:    };",
          "1872: static const struct { EC_CURVE_DATA h; unsigned char data[0+24*6]; }",
          "1873:    _EC_brainpoolP192r1 = {",
          "1874:    { NID_X9_62_prime_field, 0,24,1 },",
          "1877:      0x46,0x30,0x93,0xD1,0x8D,0xB7,0x8F,0xCE,0x47,0x6D,",
          "1878:      0xE1,0xA8,0x62,0x97,",
          "1880:      0xC0,0x31,0xFE,0x86,0x85,0xC1,0xCA,0xE0,0x40,0xE5,",
          "1881:      0xC6,0x9A,0x28,0xEF,",
          "1883:      0x1D,0x04,0x4F,0x44,0x96,0xBC,0xCA,0x7E,0xF4,0x14,",
          "1884:      0x6F,0xBF,0x25,0xC9,",
          "1886:      0x33,0xC5,0x6C,0xB0,0xF0,0x90,0x0A,0x2F,0x5C,0x48,",
          "1887:      0x53,0x37,0x5F,0xD6,",
          "1889:      0x48,0x28,0xC1,0x49,0x00,0x02,0xE6,0x77,0x3F,0xA2,",
          "1890:      0xFA,0x29,0x9B,0x8F,",
          "1892:      0x46,0x2F,0x9E,0x9E,0x91,0x6B,0x5B,0xE8,0xF1,0x02,",
          "1893:      0x9A,0xC4,0xAC,0xC1 }",
          "1894:    };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2534:    {",
          "2537:      0xE9,0x5E,0x4A,0x5F,0x73,0x70,0x59,0xDC,0x60,0xDF,",
          "2541:      0x34,0x0E,0x7B,0xE2,0xA2,0x80,0xEB,0x74,0xE2,0xBE,",
          "2545:      0x1E,0x58,0x9A,0x85,0x95,0x42,0x34,0x12,0x13,0x4F,",
          "2549:      0xBE,0xD5,0xAF,0x16,0xEA,0x3F,0x6A,0x4F,0x62,0x93,",
          "2553:      0x16,0x67,0xCB,0x47,0x7A,0x1A,0x8E,0xC3,0x38,0xF9,",
          "2557:      0xE9,0x5E,0x4A,0x5F,0x73,0x70,0x59,0xDC,0x60,0xDF,",
          "2564:    {",
          "2567:      0xE9,0x5E,0x4A,0x5F,0x73,0x70,0x59,0xDC,0x60,0xDF,",
          "2571:      0xE9,0x5E,0x4A,0x5F,0x73,0x70,0x59,0xDC,0x60,0xDF,",
          "2575:      0x7A,0x55,0x6B,0x6D,0xAE,0x53,0x5B,0x7B,0x51,0xED,",
          "2579:      0xB1,0x99,0xB1,0x3B,0x9B,0x34,0xEF,0xC1,0x39,0x7E,",
          "2583:      0xAD,0xD6,0x71,0x8B,0x7C,0x7C,0x19,0x61,0xF0,0x99,",
          "2587:      0xE9,0x5E,0x4A,0x5F,0x73,0x70,0x59,0xDC,0x60,0xDF,",
          "2594:    {",
          "2597:      0xC3,0x02,0xF4,0x1D,0x93,0x2A,0x36,0xCD,0xA7,0xA3,",
          "2602:      0x6A,0x91,0x17,0x40,0x76,0xB1,0xE0,0xE1,0x9C,0x39,",
          "2607:      0x46,0x9A,0x28,0xEF,0x7C,0x28,0xCC,0xA3,0xDC,0x72,",
          "2612:      0xC0,0xA0,0x64,0x7E,0xAA,0xB6,0xA4,0x87,0x53,0xB0,",
          "2617:      0x14,0xB6,0x90,0x86,0x6A,0xBD,0x5B,0xB8,0x8B,0x5F,",
          "2622:      0xC3,0x02,0xF4,0x1D,0x93,0x2A,0x36,0xCD,0xA7,0xA3,",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1896: static const struct { EC_CURVE_DATA h; unsigned char data[0+24*6]; }",
          "1897:    _EC_brainpoolP192t1 = {",
          "1898:    { NID_X9_62_prime_field, 0,24,1 },",
          "1901:      0x46,0x30,0x93,0xD1,0x8D,0xB7,0x8F,0xCE,0x47,0x6D,",
          "1902:      0xE1,0xA8,0x62,0x97,",
          "1904:      0x46,0x30,0x93,0xD1,0x8D,0xB7,0x8F,0xCE,0x47,0x6D,",
          "1905:      0xE1,0xA8,0x62,0x94,",
          "1907:      0xDE,0xB4,0x3B,0x35,0xBE,0xC2,0xFB,0x68,0x54,0x2E,",
          "1908:      0x27,0x89,0x7B,0x79,",
          "1910:      0x1F,0xE7,0xBB,0xF4,0x3F,0xA7,0x2C,0x44,0x6A,0xF6,",
          "1911:      0xF4,0x61,0x81,0x29,",
          "1913:      0xB5,0xCA,0x44,0x9D,0x00,0x84,0xB7,0xE5,0xB3,0xDE,",
          "1914:      0x7C,0xCC,0x01,0xC9,",
          "1916:      0x46,0x2F,0x9E,0x9E,0x91,0x6B,0x5B,0xE8,0xF1,0x02,",
          "1917:      0x9A,0xC4,0xAC,0xC1 }",
          "1918:    };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2630:    {",
          "2633:      0xC3,0x02,0xF4,0x1D,0x93,0x2A,0x36,0xCD,0xA7,0xA3,",
          "2638:      0xC3,0x02,0xF4,0x1D,0x93,0x2A,0x36,0xCD,0xA7,0xA3,",
          "2643:      0x13,0xD5,0x6F,0xFA,0xEC,0x78,0x68,0x1E,0x68,0xF9,",
          "2648:      0x3A,0xE9,0xE5,0x8C,0x82,0xF6,0x3C,0x30,0x28,0x2E,",
          "2653:      0x09,0x7E,0x2C,0x56,0x67,0xC2,0x22,0x3A,0x90,0x2A,",
          "2658:      0xC3,0x02,0xF4,0x1D,0x93,0x2A,0x36,0xCD,0xA7,0xA3,",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1920: static const struct { EC_CURVE_DATA h; unsigned char data[0+28*6]; }",
          "1921:    _EC_brainpoolP224r1 = {",
          "1922:    { NID_X9_62_prime_field, 0,28,1 },",
          "1925:      0x30,0x25,0x75,0xD1,0xD7,0x87,0xB0,0x9F,0x07,0x57,",
          "1926:      0x97,0xDA,0x89,0xF5,0x7E,0xC8,0xC0,0xFF,",
          "1928:      0x03,0xA6,0xC1,0x53,0x0B,0x51,0x4E,0x18,0x2A,0xD8,",
          "1929:      0xB0,0x04,0x2A,0x59,0xCA,0xD2,0x9F,0x43,",
          "1931:      0x13,0xB1,0xA9,0x23,0x69,0xE3,0x3E,0x21,0x35,0xD2,",
          "1932:      0x66,0xDB,0xB3,0x72,0x38,0x6C,0x40,0x0B,",
          "1934:      0x23,0xB2,0xA8,0x7D,0xC6,0x8C,0x9E,0x4C,0xE3,0x17,",
          "1935:      0x4C,0x1E,0x6E,0xFD,0xEE,0x12,0xC0,0x7D,",
          "1937:      0xB8,0x9E,0x4E,0xCD,0xAC,0x24,0x35,0x4B,0x9E,0x99,",
          "1938:      0xCA,0xA3,0xF6,0xD3,0x76,0x14,0x02,0xCD,",
          "1940:      0x30,0x25,0x75,0xD0,0xFB,0x98,0xD1,0x16,0xBC,0x4B,",
          "1941:      0x6D,0xDE,0xBC,0xA3,0xA5,0xA7,0x93,0x9F }",
          "1942:    };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2668:      0xD7,0xC1,0x34,0xAA,0x26,0x43,0x66,0x86,0x2A,0x18,",
          "2673:      0x68,0xA5,0xE6,0x2C,0xA9,0xCE,0x6C,0x1C,0x29,0x98,",
          "2678:      0x25,0x80,0xF6,0x3C,0xCF,0xE4,0x41,0x38,0x87,0x07,",
          "2683:      0x0D,0x90,0x29,0xAD,0x2C,0x7E,0x5C,0xF4,0x34,0x08,",
          "2688:      0x58,0xAA,0x56,0xF7,0x72,0xC0,0x72,0x6F,0x24,0xC6,",
          "2693:      0xD7,0xC1,0x34,0xAA,0x26,0x43,0x66,0x86,0x2A,0x18,",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1944: static const struct { EC_CURVE_DATA h; unsigned char data[0+28*6]; }",
          "1945:    _EC_brainpoolP224t1 = {",
          "1946:    { NID_X9_62_prime_field, 0,28,1 },",
          "1949:      0x30,0x25,0x75,0xD1,0xD7,0x87,0xB0,0x9F,0x07,0x57,",
          "1950:      0x97,0xDA,0x89,0xF5,0x7E,0xC8,0xC0,0xFF,",
          "1952:      0x30,0x25,0x75,0xD1,0xD7,0x87,0xB0,0x9F,0x07,0x57,",
          "1953:      0x97,0xDA,0x89,0xF5,0x7E,0xC8,0xC0,0xFC,",
          "1955:      0x1B,0xF6,0x0C,0xED,0x1E,0xD2,0x0D,0xA1,0x4C,0x08,",
          "1956:      0xB3,0xBB,0x64,0xF1,0x8A,0x60,0x88,0x8D,",
          "1958:      0x4E,0x7F,0xFE,0x14,0x76,0x2E,0xCB,0x49,0xF8,0x92,",
          "1959:      0x8A,0xC0,0xC7,0x60,0x29,0xB4,0xD5,0x80,",
          "1961:      0x3F,0x4D,0x7C,0x0D,0x4B,0x1E,0x41,0xC8,0xCC,0x0D,",
          "1962:      0x1C,0x6A,0xBD,0x5F,0x1A,0x46,0xDB,0x4C,",
          "1964:      0x30,0x25,0x75,0xD0,0xFB,0x98,0xD1,0x16,0xBC,0x4B,",
          "1965:      0x6D,0xDE,0xBC,0xA3,0xA5,0xA7,0x93,0x9F }",
          "1966:    };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2703:      0xD7,0xC1,0x34,0xAA,0x26,0x43,0x66,0x86,0x2A,0x18,",
          "2708:      0xD7,0xC1,0x34,0xAA,0x26,0x43,0x66,0x86,0x2A,0x18,",
          "2713:      0x4B,0x33,0x7D,0x93,0x41,0x04,0xCD,0x7B,0xEF,0x27,",
          "2718:      0x6A,0xB1,0xE3,0x44,0xCE,0x25,0xFF,0x38,0x96,0x42,",
          "2723:      0x03,0x74,0xE9,0xF5,0x14,0x3E,0x56,0x8C,0xD2,0x3F,",
          "2728:      0xD7,0xC1,0x34,0xAA,0x26,0x43,0x66,0x86,0x2A,0x18,",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1968: static const struct { EC_CURVE_DATA h; unsigned char data[0+32*6]; }",
          "1969:    _EC_brainpoolP256r1 = {",
          "1970:    { NID_X9_62_prime_field, 0,32,1 },",
          "1973:      0x0A,0x90,0x9D,0x83,0x8D,0x72,0x6E,0x3B,0xF6,0x23,",
          "1974:      0xD5,0x26,0x20,0x28,0x20,0x13,0x48,0x1D,0x1F,0x6E,",
          "1975:      0x53,0x77,",
          "1977:      0x75,0x30,0x41,0x7A,0xFF,0xE7,0xFB,0x80,0x55,0xC1,",
          "1978:      0x26,0xDC,0x5C,0x6C,0xE9,0x4A,0x4B,0x44,0xF3,0x30,",
          "1979:      0xB5,0xD9,",
          "1981:      0xB5,0xD9,0xBB,0xD7,0x7C,0xBF,0x95,0x84,0x16,0x29,",
          "1982:      0x5C,0xF7,0xE1,0xCE,0x6B,0xCC,0xDC,0x18,0xFF,0x8C,",
          "1983:      0x07,0xB6,",
          "1985:      0x48,0x2F,0xFC,0x81,0xB7,0xAF,0xB9,0xDE,0x27,0xE1,",
          "1986:      0xE3,0xBD,0x23,0xC2,0x3A,0x44,0x53,0xBD,0x9A,0xCE,",
          "1987:      0x32,0x62,",
          "1989:      0x46,0x1A,0x14,0x61,0x1D,0xC9,0xC2,0x77,0x45,0x13,",
          "1990:      0x2D,0xED,0x8E,0x54,0x5C,0x1D,0x54,0xC7,0x2F,0x04,",
          "1991:      0x69,0x97,",
          "1993:      0x0A,0x90,0x9D,0x83,0x8D,0x71,0x8C,0x39,0x7A,0xA3,",
          "1994:      0xB5,0x61,0xA6,0xF7,0x90,0x1E,0x0E,0x82,0x97,0x48,",
          "1995:      0x56,0xA7 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2738:      0xA9,0xFB,0x57,0xDB,0xA1,0xEE,0xA9,0xBC,0x3E,0x66,",
          "2744:      0x7D,0x5A,0x09,0x75,0xFC,0x2C,0x30,0x57,0xEE,0xF6,",
          "2750:      0x26,0xDC,0x5C,0x6C,0xE9,0x4A,0x4B,0x44,0xF3,0x30,",
          "2756:      0x8B,0xD2,0xAE,0xB9,0xCB,0x7E,0x57,0xCB,0x2C,0x4B,",
          "2762:      0x54,0x7E,0xF8,0x35,0xC3,0xDA,0xC4,0xFD,0x97,0xF8,",
          "2768:      0xA9,0xFB,0x57,0xDB,0xA1,0xEE,0xA9,0xBC,0x3E,0x66,",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1998: static const struct { EC_CURVE_DATA h; unsigned char data[0+32*6]; }",
          "1999:    _EC_brainpoolP256t1 = {",
          "2000:    { NID_X9_62_prime_field, 0,32,1 },",
          "2003:      0x0A,0x90,0x9D,0x83,0x8D,0x72,0x6E,0x3B,0xF6,0x23,",
          "2004:      0xD5,0x26,0x20,0x28,0x20,0x13,0x48,0x1D,0x1F,0x6E,",
          "2005:      0x53,0x77,",
          "2007:      0x0A,0x90,0x9D,0x83,0x8D,0x72,0x6E,0x3B,0xF6,0x23,",
          "2008:      0xD5,0x26,0x20,0x28,0x20,0x13,0x48,0x1D,0x1F,0x6E,",
          "2009:      0x53,0x74,",
          "2011:      0xA7,0x73,0x3D,0x0B,0x76,0xB7,0xBF,0x93,0xEB,0xC4,",
          "2012:      0xAF,0x2F,0x49,0x25,0x6A,0xE5,0x81,0x01,0xFE,0xE9,",
          "2013:      0x2B,0x04,",
          "2015:      0x13,0xB2,0x3A,0x65,0x61,0x49,0xAF,0xA1,0x42,0xC4,",
          "2016:      0x7A,0xAF,0xBC,0x2B,0x79,0xA1,0x91,0x56,0x2E,0x13,",
          "2017:      0x05,0xF4,",
          "2019:      0x22,0xE1,0x46,0x44,0x41,0x7E,0x69,0xBC,0xB6,0xDE,",
          "2020:      0x39,0xD0,0x27,0x00,0x1D,0xAB,0xE8,0xF3,0x5B,0x25,",
          "2021:      0xC9,0xBE,",
          "2023:      0x0A,0x90,0x9D,0x83,0x8D,0x71,0x8C,0x39,0x7A,0xA3,",
          "2024:      0xB5,0x61,0xA6,0xF7,0x90,0x1E,0x0E,0x82,0x97,0x48,",
          "2025:      0x56,0xA7 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2779:      0xA9,0xFB,0x57,0xDB,0xA1,0xEE,0xA9,0xBC,0x3E,0x66,",
          "2785:      0xA9,0xFB,0x57,0xDB,0xA1,0xEE,0xA9,0xBC,0x3E,0x66,",
          "2791:      0x66,0x2C,0x61,0xC4,0x30,0xD8,0x4E,0xA4,0xFE,0x66,",
          "2797:      0xA3,0xE8,0xEB,0x3C,0xC1,0xCF,0xE7,0xB7,0x73,0x22,",
          "2803:      0x2D,0x99,0x6C,0x82,0x34,0x39,0xC5,0x6D,0x7F,0x7B,",
          "2809:      0xA9,0xFB,0x57,0xDB,0xA1,0xEE,0xA9,0xBC,0x3E,0x66,",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2028: static const struct { EC_CURVE_DATA h; unsigned char data[0+40*6]; }",
          "2029:    _EC_brainpoolP320r1 = {",
          "2030:    { NID_X9_62_prime_field, 0,40,1 },",
          "2033:      0x78,0x5E,0xD2,0x01,0xE0,0x65,0xF9,0x8F,0xCF,0xA6,",
          "2034:      0xF6,0xF4,0x0D,0xEF,0x4F,0x92,0xB9,0xEC,0x78,0x93,",
          "2035:      0xEC,0x28,0xFC,0xD4,0x12,0xB1,0xF1,0xB3,0x2E,0x27,",
          "2037:      0xEB,0xD4,0x6D,0x3F,0x3B,0xB8,0xA2,0xA7,0x35,0x13,",
          "2038:      0xF5,0xEB,0x79,0xDA,0x66,0x19,0x0E,0xB0,0x85,0xFF,",
          "2039:      0xA9,0xF4,0x92,0xF3,0x75,0xA9,0x7D,0x86,0x0E,0xB4,",
          "2041:      0x19,0x86,0x40,0x68,0x8A,0x6F,0xE1,0x3F,0x41,0x34,",
          "2042:      0x95,0x54,0xB4,0x9A,0xCC,0x31,0xDC,0xCD,0x88,0x45,",
          "2043:      0x39,0x81,0x6F,0x5E,0xB4,0xAC,0x8F,0xB1,0xF1,0xA6,",
          "2045:      0xBC,0xC4,0x8E,0xE5,0xBF,0xE6,0xF2,0x01,0x37,0xD1,",
          "2046:      0x0A,0x08,0x7E,0xB6,0xE7,0x87,0x1E,0x2A,0x10,0xA5,",
          "2047:      0x99,0xC7,0x10,0xAF,0x8D,0x0D,0x39,0xE2,0x06,0x11,",
          "2049:      0x93,0x24,0x7F,0x77,0x27,0x5E,0x07,0x43,0xFF,0xED,",
          "2050:      0x11,0x71,0x82,0xEA,0xA9,0xC7,0x78,0x77,0xAA,0xAC,",
          "2051:      0x6A,0xC7,0xD3,0x52,0x45,0xD1,0x69,0x2E,0x8E,0xE1,",
          "2053:      0x78,0x5E,0xD2,0x01,0xE0,0x65,0xF9,0x8F,0xCF,0xA5,",
          "2054:      0xB6,0x8F,0x12,0xA3,0x2D,0x48,0x2E,0xC7,0xEE,0x86,",
          "2055:      0x58,0xE9,0x86,0x91,0x55,0x5B,0x44,0xC5,0x93,0x11 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2820:      0xD3,0x5E,0x47,0x20,0x36,0xBC,0x4F,0xB7,0xE1,0x3C,",
          "2826:      0x3E,0xE3,0x0B,0x56,0x8F,0xBA,0xB0,0xF8,0x83,0xCC,",
          "2832:      0x52,0x08,0x83,0x94,0x9D,0xFD,0xBC,0x42,0xD3,0xAD,",
          "2838:      0x43,0xBD,0x7E,0x9A,0xFB,0x53,0xD8,0xB8,0x52,0x89,",
          "2844:      0x14,0xFD,0xD0,0x55,0x45,0xEC,0x1C,0xC8,0xAB,0x40,",
          "2850:      0xD3,0x5E,0x47,0x20,0x36,0xBC,0x4F,0xB7,0xE1,0x3C,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2058: static const struct { EC_CURVE_DATA h; unsigned char data[0+40*6]; }",
          "2059:    _EC_brainpoolP320t1 = {",
          "2060:    { NID_X9_62_prime_field, 0,40,1 },",
          "2063:      0x78,0x5E,0xD2,0x01,0xE0,0x65,0xF9,0x8F,0xCF,0xA6,",
          "2064:      0xF6,0xF4,0x0D,0xEF,0x4F,0x92,0xB9,0xEC,0x78,0x93,",
          "2065:      0xEC,0x28,0xFC,0xD4,0x12,0xB1,0xF1,0xB3,0x2E,0x27,",
          "2067:      0x78,0x5E,0xD2,0x01,0xE0,0x65,0xF9,0x8F,0xCF,0xA6,",
          "2068:      0xF6,0xF4,0x0D,0xEF,0x4F,0x92,0xB9,0xEC,0x78,0x93,",
          "2069:      0xEC,0x28,0xFC,0xD4,0x12,0xB1,0xF1,0xB3,0x2E,0x24,",
          "2071:      0xD1,0x47,0xDB,0x78,0x20,0x13,0x06,0x4C,0x19,0xF2,",
          "2072:      0x7E,0xD2,0x7C,0x67,0x80,0xAA,0xF7,0x7F,0xB8,0xA5,",
          "2073:      0x47,0xCE,0xB5,0xB4,0xFE,0xF4,0x22,0x34,0x03,0x53,",
          "2075:      0x7D,0x49,0x90,0x01,0x0F,0x81,0x34,0x08,0xAB,0x10,",
          "2076:      0x6C,0x4F,0x09,0xCB,0x7E,0xE0,0x78,0x68,0xCC,0x13,",
          "2077:      0x6F,0xFF,0x33,0x57,0xF6,0x24,0xA2,0x1B,0xED,0x52,",
          "2079:      0xDB,0xEF,0x7A,0xBB,0x30,0xEB,0xEE,0x08,0x4E,0x58,",
          "2080:      0xA0,0xB0,0x77,0xAD,0x42,0xA5,0xA0,0x98,0x9D,0x1E,",
          "2081:      0xE7,0x1B,0x1B,0x9B,0xC0,0x45,0x5F,0xB0,0xD2,0xC3,",
          "2083:      0x78,0x5E,0xD2,0x01,0xE0,0x65,0xF9,0x8F,0xCF,0xA5,",
          "2084:      0xB6,0x8F,0x12,0xA3,0x2D,0x48,0x2E,0xC7,0xEE,0x86,",
          "2085:      0x58,0xE9,0x86,0x91,0x55,0x5B,0x44,0xC5,0x93,0x11 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2861:      0xD3,0x5E,0x47,0x20,0x36,0xBC,0x4F,0xB7,0xE1,0x3C,",
          "2867:      0xD3,0x5E,0x47,0x20,0x36,0xBC,0x4F,0xB7,0xE1,0x3C,",
          "2873:      0xA7,0xF5,0x61,0xE0,0x38,0xEB,0x1E,0xD5,0x60,0xB3,",
          "2879:      0x92,0x5B,0xE9,0xFB,0x01,0xAF,0xC6,0xFB,0x4D,0x3E,",
          "2885:      0x63,0xBA,0x3A,0x7A,0x27,0x48,0x3E,0xBF,0x66,0x71,",
          "2891:      0xD3,0x5E,0x47,0x20,0x36,0xBC,0x4F,0xB7,0xE1,0x3C,",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2088: static const struct { EC_CURVE_DATA h; unsigned char data[0+48*6]; }",
          "2089:    _EC_brainpoolP384r1 = {",
          "2090:    { NID_X9_62_prime_field, 0,48,1 },",
          "2093:      0x6F,0x7E,0x50,0xE6,0x41,0xDF,0x15,0x2F,0x71,0x09,",
          "2094:      0xED,0x54,0x56,0xB4,0x12,0xB1,0xDA,0x19,0x7F,0xB7,",
          "2095:      0x11,0x23,0xAC,0xD3,0xA7,0x29,0x90,0x1D,0x1A,0x71,",
          "2096:      0x87,0x47,0x00,0x13,0x31,0x07,0xEC,0x53,",
          "2098:      0x08,0x0A,0xCE,0x05,0xAF,0xA0,0xC2,0xBE,0xA2,0x8E,",
          "2099:      0x4F,0xB2,0x27,0x87,0x13,0x91,0x65,0xEF,0xBA,0x91,",
          "2100:      0xF9,0x0F,0x8A,0xA5,0x81,0x4A,0x50,0x3A,0xD4,0xEB,",
          "2101:      0x04,0xA8,0xC7,0xDD,0x22,0xCE,0x28,0x26,",
          "2103:      0xB5,0x54,0x16,0xF0,0x44,0x7C,0x2F,0xB7,0x7D,0xE1,",
          "2104:      0x07,0xDC,0xD2,0xA6,0x2E,0x88,0x0E,0xA5,0x3E,0xEB,",
          "2105:      0x62,0xD5,0x7C,0xB4,0x39,0x02,0x95,0xDB,0xC9,0x94,",
          "2106:      0x3A,0xB7,0x86,0x96,0xFA,0x50,0x4C,0x11,",
          "2108:      0x3A,0x81,0xB7,0xC1,0x3F,0x6B,0x88,0x47,0xA3,0xE7,",
          "2109:      0x7E,0xF1,0x4F,0xE3,0xDB,0x7F,0xCA,0xFE,0x0C,0xBD,",
          "2110:      0x10,0xE8,0xE8,0x26,0xE0,0x34,0x36,0xD6,0x46,0xAA,",
          "2111:      0xEF,0x87,0xB2,0xE2,0x47,0xD4,0xAF,0x1E,",
          "2113:      0xEB,0x8E,0x95,0xCF,0xD5,0x52,0x62,0xB7,0x0B,0x29,",
          "2114:      0xFE,0xEC,0x58,0x64,0xE1,0x9C,0x05,0x4F,0xF9,0x91,",
          "2115:      0x29,0x28,0x0E,0x46,0x46,0x21,0x77,0x91,0x81,0x11,",
          "2116:      0x42,0x82,0x03,0x41,0x26,0x3C,0x53,0x15,",
          "2118:      0x6F,0x7E,0x50,0xE6,0x41,0xDF,0x15,0x2F,0x71,0x09,",
          "2119:      0xED,0x54,0x56,0xB3,0x1F,0x16,0x6E,0x6C,0xAC,0x04,",
          "2120:      0x25,0xA7,0xCF,0x3A,0xB6,0xAF,0x6B,0x7F,0xC3,0x10,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2902:      0x8C,0xB9,0x1E,0x82,0xA3,0x38,0x6D,0x28,0x0F,0x5D,",
          "2909:      0x7B,0xC3,0x82,0xC6,0x3D,0x8C,0x15,0x0C,0x3C,0x72,",
          "2916:      0x04,0xA8,0xC7,0xDD,0x22,0xCE,0x28,0x26,0x8B,0x39,",
          "2923:      0x1D,0x1C,0x64,0xF0,0x68,0xCF,0x45,0xFF,0xA2,0xA6,",
          "2930:      0x8A,0xBE,0x1D,0x75,0x20,0xF9,0xC2,0xA4,0x5C,0xB1,",
          "2937:      0x8C,0xB9,0x1E,0x82,0xA3,0x38,0x6D,0x28,0x0F,0x5D,",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2124: static const struct { EC_CURVE_DATA h; unsigned char data[0+48*6]; }",
          "2125:    _EC_brainpoolP384t1 = {",
          "2126:    { NID_X9_62_prime_field, 0,48,1 },",
          "2129:      0x6F,0x7E,0x50,0xE6,0x41,0xDF,0x15,0x2F,0x71,0x09,",
          "2130:      0xED,0x54,0x56,0xB4,0x12,0xB1,0xDA,0x19,0x7F,0xB7,",
          "2131:      0x11,0x23,0xAC,0xD3,0xA7,0x29,0x90,0x1D,0x1A,0x71,",
          "2132:      0x87,0x47,0x00,0x13,0x31,0x07,0xEC,0x53,",
          "2134:      0x6F,0x7E,0x50,0xE6,0x41,0xDF,0x15,0x2F,0x71,0x09,",
          "2135:      0xED,0x54,0x56,0xB4,0x12,0xB1,0xDA,0x19,0x7F,0xB7,",
          "2136:      0x11,0x23,0xAC,0xD3,0xA7,0x29,0x90,0x1D,0x1A,0x71,",
          "2137:      0x87,0x47,0x00,0x13,0x31,0x07,0xEC,0x50,",
          "2139:      0xDB,0xA6,0x47,0x91,0x0F,0x8C,0x4B,0x93,0x46,0xED,",
          "2140:      0x8C,0xCD,0xC6,0x4E,0x4B,0x1A,0xBD,0x11,0x75,0x6D,",
          "2141:      0xCE,0x1D,0x20,0x74,0xAA,0x26,0x3B,0x88,0x80,0x5C,",
          "2142:      0xED,0x70,0x35,0x5A,0x33,0xB4,0x71,0xEE,",
          "2144:      0xCD,0x72,0x35,0xF7,0x2A,0x81,0x9B,0x80,0xAB,0x12,",
          "2145:      0xEB,0xD6,0x53,0x17,0x24,0x76,0xFE,0xCD,0x46,0x2A,",
          "2146:      0xAB,0xFF,0xC4,0xFF,0x19,0x1B,0x94,0x6A,0x5F,0x54,",
          "2147:      0xD8,0xD0,0xAA,0x2F,0x41,0x88,0x08,0xCC,",
          "2149:      0xAF,0xD2,0x75,0x5A,0xD3,0x36,0x74,0x7F,0x93,0x47,",
          "2150:      0x5B,0x7A,0x1F,0xCA,0x3B,0x88,0xF2,0xB6,0xA2,0x08,",
          "2151:      0xCC,0xFE,0x46,0x94,0x08,0x58,0x4D,0xC2,0xB2,0x91,",
          "2152:      0x26,0x75,0xBF,0x5B,0x9E,0x58,0x29,0x28,",
          "2154:      0x6F,0x7E,0x50,0xE6,0x41,0xDF,0x15,0x2F,0x71,0x09,",
          "2155:      0xED,0x54,0x56,0xB3,0x1F,0x16,0x6E,0x6C,0xAC,0x04,",
          "2156:      0x25,0xA7,0xCF,0x3A,0xB6,0xAF,0x6B,0x7F,0xC3,0x10,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2949:      0x8C,0xB9,0x1E,0x82,0xA3,0x38,0x6D,0x28,0x0F,0x5D,",
          "2956:      0x8C,0xB9,0x1E,0x82,0xA3,0x38,0x6D,0x28,0x0F,0x5D,",
          "2963:      0x7F,0x51,0x9E,0xAD,0xA7,0xBD,0xA8,0x1B,0xD8,0x26,",
          "2970:      0x18,0xDE,0x98,0xB0,0x2D,0xB9,0xA3,0x06,0xF2,0xAF,",
          "2977:      0x25,0xAB,0x05,0x69,0x62,0xD3,0x06,0x51,0xA1,0x14,",
          "2984:      0x8C,0xB9,0x1E,0x82,0xA3,0x38,0x6D,0x28,0x0F,0x5D,",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2160: static const struct { EC_CURVE_DATA h; unsigned char data[0+64*6]; }",
          "2161:    _EC_brainpoolP512r1 = {",
          "2162:    { NID_X9_62_prime_field, 0,64,1 },",
          "2165:      0xE6,0xAE,0x33,0xC9,0xFC,0x07,0xCB,0x30,0x8D,0xB3,",
          "2166:      0xB3,0xC9,0xD2,0x0E,0xD6,0x63,0x9C,0xCA,0x70,0x33,",
          "2167:      0x08,0x71,0x7D,0x4D,0x9B,0x00,0x9B,0xC6,0x68,0x42,",
          "2168:      0xAE,0xCD,0xA1,0x2A,0xE6,0xA3,0x80,0xE6,0x28,0x81,",
          "2169:      0xFF,0x2F,0x2D,0x82,0xC6,0x85,0x28,0xAA,0x60,0x56,",
          "2170:      0x58,0x3A,0x48,0xF3,",
          "2172:      0x71,0x45,0xAC,0x23,0x4C,0xC5,0x94,0xCB,0xDD,0x8D,",
          "2173:      0x3D,0xF9,0x16,0x10,0xA8,0x34,0x41,0xCA,0xEA,0x98,",
          "2174:      0x63,0xBC,0x2D,0xED,0x5D,0x5A,0xA8,0x25,0x3A,0xA1,",
          "2175:      0x0A,0x2E,0xF1,0xC9,0x8B,0x9A,0xC8,0xB5,0x7F,0x11,",
          "2176:      0x17,0xA7,0x2B,0xF2,0xC7,0xB9,0xE7,0xC1,0xAC,0x4D,",
          "2177:      0x77,0xFC,0x94,0xCA,",
          "2179:      0x63,0xBC,0x2D,0xED,0x5D,0x5A,0xA8,0x25,0x3A,0xA1,",
          "2180:      0x0A,0x2E,0xF1,0xC9,0x8B,0x9A,0xC8,0xB5,0x7F,0x11,",
          "2181:      0x17,0xA7,0x2B,0xF2,0xC7,0xB9,0xE7,0xC1,0xAC,0x4D,",
          "2182:      0x77,0xFC,0x94,0xCA,0xDC,0x08,0x3E,0x67,0x98,0x40,",
          "2183:      0x50,0xB7,0x5E,0xBA,0xE5,0xDD,0x28,0x09,0xBD,0x63,",
          "2184:      0x80,0x16,0xF7,0x23,",
          "2186:      0x32,0x2E,0x9C,0x4C,0x6A,0x93,0x85,0xED,0x9F,0x70,",
          "2187:      0xB5,0xD9,0x16,0xC1,0xB4,0x3B,0x62,0xEE,0xF4,0xD0,",
          "2188:      0x09,0x8E,0xFF,0x3B,0x1F,0x78,0xE2,0xD0,0xD4,0x8D,",
          "2189:      0x50,0xD1,0x68,0x7B,0x93,0xB9,0x7D,0x5F,0x7C,0x6D,",
          "2190:      0x50,0x47,0x40,0x6A,0x5E,0x68,0x8B,0x35,0x22,0x09,",
          "2191:      0xBC,0xB9,0xF8,0x22,",
          "2193:      0xBF,0xA9,0xCF,0x78,0x22,0xFD,0xF2,0x09,0xF7,0x00,",
          "2194:      0x24,0xA5,0x7B,0x1A,0xA0,0x00,0xC5,0x5B,0x88,0x1F,",
          "2195:      0x81,0x11,0xB2,0xDC,0xDE,0x49,0x4A,0x5F,0x48,0x5E,",
          "2196:      0x5B,0xCA,0x4B,0xD8,0x8A,0x27,0x63,0xAE,0xD1,0xCA,",
          "2197:      0x2B,0x2F,0xA8,0xF0,0x54,0x06,0x78,0xCD,0x1E,0x0F,",
          "2198:      0x3A,0xD8,0x08,0x92,",
          "2200:      0xE6,0xAE,0x33,0xC9,0xFC,0x07,0xCB,0x30,0x8D,0xB3,",
          "2201:      0xB3,0xC9,0xD2,0x0E,0xD6,0x63,0x9C,0xCA,0x70,0x33,",
          "2202:      0x08,0x70,0x55,0x3E,0x5C,0x41,0x4C,0xA9,0x26,0x19,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2996:      0xAA,0xDD,0x9D,0xB8,0xDB,0xE9,0xC4,0x8B,0x3F,0xD4,",
          "3005:      0x78,0x30,0xA3,0x31,0x8B,0x60,0x3B,0x89,0xE2,0x32,",
          "3014:      0x3D,0xF9,0x16,0x10,0xA8,0x34,0x41,0xCA,0xEA,0x98,",
          "3023:      0x81,0xAE,0xE4,0xBD,0xD8,0x2E,0xD9,0x64,0x5A,0x21,",
          "3032:      0x7D,0xDE,0x38,0x5D,0x56,0x63,0x32,0xEC,0xC0,0xEA,",
          "3041:      0xAA,0xDD,0x9D,0xB8,0xDB,0xE9,0xC4,0x8B,0x3F,0xD4,",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2208: static const struct { EC_CURVE_DATA h; unsigned char data[0+64*6]; }",
          "2209:    _EC_brainpoolP512t1 = {",
          "2210:     { NID_X9_62_prime_field, 0,64,1 },",
          "2213:       0xE6,0xAE,0x33,0xC9,0xFC,0x07,0xCB,0x30,0x8D,0xB3,",
          "2214:       0xB3,0xC9,0xD2,0x0E,0xD6,0x63,0x9C,0xCA,0x70,0x33,",
          "2215:       0x08,0x71,0x7D,0x4D,0x9B,0x00,0x9B,0xC6,0x68,0x42,",
          "2216:       0xAE,0xCD,0xA1,0x2A,0xE6,0xA3,0x80,0xE6,0x28,0x81,",
          "2217:       0xFF,0x2F,0x2D,0x82,0xC6,0x85,0x28,0xAA,0x60,0x56,",
          "2218:       0x58,0x3A,0x48,0xF3,",
          "2220:       0xE6,0xAE,0x33,0xC9,0xFC,0x07,0xCB,0x30,0x8D,0xB3,",
          "2221:       0xB3,0xC9,0xD2,0x0E,0xD6,0x63,0x9C,0xCA,0x70,0x33,",
          "2222:       0x08,0x71,0x7D,0x4D,0x9B,0x00,0x9B,0xC6,0x68,0x42,",
          "2223:       0xAE,0xCD,0xA1,0x2A,0xE6,0xA3,0x80,0xE6,0x28,0x81,",
          "2224:       0xFF,0x2F,0x2D,0x82,0xC6,0x85,0x28,0xAA,0x60,0x56,",
          "2225:       0x58,0x3A,0x48,0xF0,",
          "2227:       0x90,0xE4,0x68,0x84,0xEA,0xE3,0x21,0xF7,0x0C,0x0B,",
          "2228:       0xCB,0x49,0x81,0x52,0x78,0x97,0x50,0x4B,0xEC,0x3E,",
          "2229:       0x36,0xA6,0x2B,0xCD,0xFA,0x23,0x04,0x97,0x65,0x40,",
          "2230:       0xF6,0x45,0x00,0x85,0xF2,0xDA,0xE1,0x45,0xC2,0x25,",
          "2231:       0x53,0xB4,0x65,0x76,0x36,0x89,0x18,0x0E,0xA2,0x57,",
          "2232:       0x18,0x67,0x42,0x3E,",
          "2234:       0xBA,0x06,0xCB,0xC2,0xA6,0xFE,0xBA,0x85,0x84,0x24,",
          "2235:       0x58,0xC5,0x6D,0xDE,0x9D,0xB1,0x75,0x8D,0x39,0xC0,",
          "2236:       0x31,0x3D,0x82,0xBA,0x51,0x73,0x5C,0xDB,0x3E,0xA4,",
          "2237:       0x99,0xAA,0x77,0xA7,0xD6,0x94,0x3A,0x64,0xF7,0xA3,",
          "2238:       0xF2,0x5F,0xE2,0x6F,0x06,0xB5,0x1B,0xAA,0x26,0x96,",
          "2239:       0xFA,0x90,0x35,0xDA,",
          "2241:       0x92,0x37,0x6C,0x84,0xAC,0xE1,0xBB,0x4E,0x30,0x19,",
          "2242:       0xB7,0x16,0x34,0xC0,0x11,0x31,0x15,0x9C,0xAE,0x03,",
          "2243:       0xCE,0xE9,0xD9,0x93,0x21,0x84,0xBE,0xEF,0x21,0x6B,",
          "2244:       0xD7,0x1D,0xF2,0xDA,0xDF,0x86,0xA6,0x27,0x30,0x6E,",
          "2245:       0xCF,0xF9,0x6D,0xBB,0x8B,0xAC,0xE1,0x98,0xB6,0x1E,",
          "2246:       0x00,0xF8,0xB3,0x32,",
          "2248:       0xE6,0xAE,0x33,0xC9,0xFC,0x07,0xCB,0x30,0x8D,0xB3,",
          "2249:       0xB3,0xC9,0xD2,0x0E,0xD6,0x63,0x9C,0xCA,0x70,0x33,",
          "2250:       0x08,0x70,0x55,0x3E,0x5C,0x41,0x4C,0xA9,0x26,0x19,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3055:       0xAA,0xDD,0x9D,0xB8,0xDB,0xE9,0xC4,0x8B,0x3F,0xD4,",
          "3064:       0xAA,0xDD,0x9D,0xB8,0xDB,0xE9,0xC4,0x8B,0x3F,0xD4,",
          "3073:       0x7C,0xBB,0xBC,0xF9,0x44,0x1C,0xFA,0xB7,0x6E,0x18,",
          "3082:       0x64,0x0E,0xCE,0x5C,0x12,0x78,0x87,0x17,0xB9,0xC1,",
          "3091:       0x5B,0x53,0x4B,0xD5,0x95,0xF5,0xAF,0x0F,0xA2,0xC8,",
          "3100:       0xAA,0xDD,0x9D,0xB8,0xDB,0xE9,0xC4,0x8B,0x3F,0xD4,",
          "",
          "---------------"
        ],
        "demos/easy_tls/easy-tls.c||demos/easy_tls/easy-tls.c": [
          "File: demos/easy_tls/easy-tls.c -> demos/easy_tls/easy-tls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "809:     return a > b ? a : b;",
          "810: }",
          "812: static void",
          "814: {",
          "815:     int maxfd, n;",
          "816:     fd_set reads, writes;",
          "",
          "[Removed Lines]",
          "813: tls_sockets_select(int read_select_1, int read_select_2, int write_select_1, int write_select_2, int seconds /* timeout, -1 means no timeout */)",
          "",
          "[Added Lines]",
          "814: tls_sockets_select(int read_select_1, int read_select_2, int write_select_1, int write_select_2, int seconds)",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:      }",
          "318:     }",
          "319:    }",
          "320:   else if ((p[0] == SSL3_RT_HANDSHAKE) &&",
          "321:     (p[1] == SSL3_VERSION_MAJOR) &&",
          "322:     (p[5] == SSL3_MT_CLIENT_HELLO) &&",
          "324:     || (p[9] >= p[1])))",
          "325:    {",
          "",
          "[Removed Lines]",
          "323:     ((p[3] == 0 && p[4] < 5 /* silly record length? */)",
          "",
          "[Added Lines]",
          "324:     ((p[3] == 0 && p[4] < 5)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:   if (j <= 0) return(j);",
          "474:   ssl3_finish_mac(s, s->packet+2, s->packet_length-2);",
          "475:   if (s->msg_callback)",
          "478:   p=s->packet;",
          "479:   p+=5;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:    s->msg_callback(0, SSL2_VERSION, 0, s->packet+2, s->packet_length-2, s, s->msg_callback_arg);",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:   SSL3_ST_CR_SRVR_HELLO_A,",
          "889:   SSL3_ST_CR_SRVR_HELLO_B,",
          "890:   -1,",
          "892:   &ok);",
          "894:  if (!ok) return((int)n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "891:   20000,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2448:  int ok,ret=0;",
          "2449:  long n;",
          "2451:  n=s->method->ssl_get_message(s,",
          "2452:   SSL3_ST_CR_SRVR_DONE_A,",
          "2453:   SSL3_ST_CR_SRVR_DONE_B,",
          "2454:   SSL3_MT_SERVER_DONE,",
          "2456:   &ok);",
          "2458:  if (!ok) return((int)n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2456:   30,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3574:   {",
          "3575:   if (ssl_check_srvr_ecc_cert_and_alg(sc->peer_pkeys[idx].x509,",
          "3576:             s) == 0)",
          "3578:    SSLerr(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM,SSL_R_BAD_ECC_CERT);",
          "3579:    goto f_err;",
          "3580:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3578:    {",
          "",
          "---------------"
        ],
        "ssl/s3_enc.c||ssl/s3_enc.c": [
          "File: ssl/s3_enc.c -> ssl/s3_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "794:   header[j++] = rec->length >> 8;",
          "795:   header[j++] = rec->length & 0xff;",
          "797:   ssl3_cbc_digest_record(",
          "798:    hash,",
          "799:    md, &md_size,",
          "800:    header, rec->input,",
          "801:    rec->length + md_size, rec->orig_len,",
          "802:    mac_sec, md_size,",
          "804:   }",
          "805:  else",
          "806:   {",
          "",
          "[Removed Lines]",
          "803:    1 /* is SSLv3 */);",
          "",
          "[Added Lines]",
          "804:    1);",
          "",
          "---------------"
        ],
        "ssl/s3_pkt.c||ssl/s3_pkt.c": [
          "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "941: #if 0 && !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "942:  if (type==SSL3_RT_APPLICATION_DATA && s->compress==NULL &&",
          "944:      EVP_CIPHER_flags(s->enc_write_ctx->cipher)&EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK)",
          "945:   do {",
          "946:   unsigned char aad[13];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "943:      !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1051:      }",
          "1053:     }",
          "1054:    else if ( memcmp(s->d1->rcvd_cookie, s->d1->cookie,",
          "1056:     {",
          "1057:      al=SSL_AD_HANDSHAKE_FAILURE;",
          "1058:      SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1056:         s->d1->cookie_len) != 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2200:   SSL3_ST_SR_KEY_EXCH_A,",
          "2201:   SSL3_ST_SR_KEY_EXCH_B,",
          "2202:   SSL3_MT_CLIENT_KEY_EXCHANGE,",
          "2204:   &ok);",
          "2206:  if (!ok) return((int)n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2204:   2048,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3659:   return -1;",
          "3660:   }",
          "3662:  n=s->method->ssl_get_message(s,",
          "3663:   SSL3_ST_SR_NEXT_PROTO_A,",
          "3664:   SSL3_ST_SR_NEXT_PROTO_B,",
          "3665:   SSL3_MT_NEXT_PROTO,",
          "3667:   &ok);",
          "3669:  if (!ok)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3668:   514,",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "464:   try_session_cache = 0;",
          "466: #ifndef OPENSSL_NO_TLSEXT",
          "468:  switch (r)",
          "469:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:  r = tls1_process_ticket(s, session_id, len, limit, &ret);",
          "",
          "---------------"
        ],
        "ssl/ssltest.c||ssl/ssltest.c": [
          "File: ssl/ssltest.c -> ssl/ssltest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2789: static void process_proxy_debug(int indent, const char *format, ...)",
          "2790:  {",
          "2791:  static const char indentation[] =",
          "2792:   \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\"",
          "2794:  char my_format[256];",
          "2795:  va_list args;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2794:   \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\";",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1047:    rec->length + md_size, rec->orig_len,",
          "1048:    ssl->s3->read_mac_secret,",
          "1049:    ssl->s3->read_mac_secret_size,",
          "1051:   }",
          "1052:  else",
          "1053:   {",
          "",
          "[Removed Lines]",
          "1050:    0 /* not SSLv3 */);",
          "",
          "[Added Lines]",
          "1051:    0);",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2268:     OPENSSL_free(s->s3->client_opaque_prf_input);",
          "2269:    if (s->s3->client_opaque_prf_input_len == 0)",
          "2271:    else",
          "2272:     s->s3->client_opaque_prf_input = BUF_memdup(sdata, s->s3->client_opaque_prf_input_len);",
          "2273:    if (s->s3->client_opaque_prf_input == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2272:     s->s3->client_opaque_prf_input = OPENSSL_malloc(1);",
          "",
          "---------------"
        ],
        "ssl/tls1.h||ssl/tls1.h": [
          "File: ssl/tls1.h -> ssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "798: #ifdef CHARSET_EBCDIC",
          "799: #undef TLS_MD_CLIENT_FINISH_CONST",
          "801: #undef TLS_MD_SERVER_FINISH_CONST",
          "803: #undef TLS_MD_SERVER_WRITE_KEY_CONST",
          "805: #undef TLS_MD_KEY_EXPANSION_CONST",
          "807: #undef TLS_MD_CLIENT_WRITE_KEY_CONST",
          "809: #undef TLS_MD_SERVER_WRITE_KEY_CONST",
          "811: #undef TLS_MD_IV_BLOCK_CONST",
          "813: #undef TLS_MD_MASTER_SECRET_CONST",
          "815: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801: #define TLS_MD_CLIENT_FINISH_CONST    \"\\x63\\x6c\\x69\\x65\\x6e\\x74\\x20\\x66\\x69\\x6e\\x69\\x73\\x68\\x65\\x64\"",
          "805: #define TLS_MD_SERVER_FINISH_CONST    \"\\x73\\x65\\x72\\x76\\x65\\x72\\x20\\x66\\x69\\x6e\\x69\\x73\\x68\\x65\\x64\"",
          "809: #define TLS_MD_SERVER_WRITE_KEY_CONST \"\\x73\\x65\\x72\\x76\\x65\\x72\\x20\\x77\\x72\\x69\\x74\\x65\\x20\\x6b\\x65\\x79\"",
          "813: #define TLS_MD_KEY_EXPANSION_CONST    \"\\x6b\\x65\\x79\\x20\\x65\\x78\\x70\\x61\\x6e\\x73\\x69\\x6f\\x6e\"",
          "817: #define TLS_MD_CLIENT_WRITE_KEY_CONST \"\\x63\\x6c\\x69\\x65\\x6e\\x74\\x20\\x77\\x72\\x69\\x74\\x65\\x20\\x6b\\x65\\x79\"",
          "821: #define TLS_MD_SERVER_WRITE_KEY_CONST \"\\x73\\x65\\x72\\x76\\x65\\x72\\x20\\x77\\x72\\x69\\x74\\x65\\x20\\x6b\\x65\\x79\"",
          "825: #define TLS_MD_IV_BLOCK_CONST         \"\\x49\\x56\\x20\\x62\\x6c\\x6f\\x63\\x6b\"",
          "829: #define TLS_MD_MASTER_SECRET_CONST    \"\\x6d\\x61\\x73\\x74\\x65\\x72\\x20\\x73\\x65\\x63\\x72\\x65\\x74\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a7048aff053929feaadee4895749fe0a661d353",
      "candidate_info": {
        "commit_hash": "7a7048aff053929feaadee4895749fe0a661d353",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7a7048aff053929feaadee4895749fe0a661d353",
        "files": [
          "ssl/record/d1_pkt.c",
          "ssl/record/rec_layer.h",
          "ssl/record/s23_pkt.c",
          "ssl/record/s3_pkt.c",
          "ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_record.c",
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c",
          "ssl/s3_lib.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Move s->packet and s->packet_length into s->rlayer\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/record/d1_pkt.c||ssl/record/d1_pkt.c",
          "ssl/record/rec_layer.h||ssl/record/rec_layer.h",
          "ssl/record/s23_pkt.c||ssl/record/s23_pkt.c",
          "ssl/record/s3_pkt.c||ssl/record/s3_pkt.c",
          "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/d1_pkt.c||ssl/record/d1_pkt.c": [
          "File: ssl/record/d1_pkt.c -> ssl/record/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:     SSL3_BUFFER_release(&s->rlayer.rbuf);",
          "198:     memcpy(&s->rlayer.rbuf, &(rdata->rbuf), sizeof(SSL3_BUFFER));",
          "199:     memcpy(&s->rlayer.rrec, &(rdata->rrec), sizeof(SSL3_RECORD));",
          "",
          "[Removed Lines]",
          "196:     s->packet = rdata->packet;",
          "197:     s->packet_length = rdata->packet_length;",
          "",
          "[Added Lines]",
          "196:     s->rlayer.packet = rdata->packet;",
          "197:     s->rlayer.packet_length = rdata->packet_length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:         return -1;",
          "227:     }",
          "231:     memcpy(&(rdata->rbuf), &s->rlayer.rbuf, sizeof(SSL3_BUFFER));",
          "232:     memcpy(&(rdata->rrec), &s->rlayer.rrec, sizeof(SSL3_RECORD));",
          "",
          "[Removed Lines]",
          "229:     rdata->packet = s->packet;",
          "230:     rdata->packet_length = s->packet_length;",
          "",
          "[Added Lines]",
          "229:     rdata->packet = s->rlayer.packet;",
          "230:     rdata->packet_length = s->rlayer.packet_length;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:     }",
          "244: #endif",
          "248:     memset(&s->rlayer.rbuf, 0, sizeof(SSL3_BUFFER));",
          "249:     memset(&s->rlayer.rrec, 0, sizeof(SSL3_RECORD));",
          "",
          "[Removed Lines]",
          "246:     s->packet = NULL;",
          "247:     s->packet_length = 0;",
          "",
          "[Added Lines]",
          "246:     s->rlayer.packet = NULL;",
          "247:     s->rlayer.packet_length = 0;",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer.h||ssl/record/rec_layer.h": [
          "File: ssl/record/rec_layer.h -> ssl/record/rec_layer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     SSL3_RECORD rrec;",
          "150:     SSL3_RECORD wrec;",
          "151: } RECORD_LAYER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:     unsigned char *packet;",
          "154:     unsigned int packet_length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161: #define RECORD_LAYER_set_read_ahead(rl, ra)     ((rl)->read_ahead = (ra))",
          "162: #define RECORD_LAYER_get_read_ahead(rl)         ((rl)->read_ahead)",
          "163: #define RECORD_LAYER_setup_comp_buffer(rl)      (SSL3_RECORD_setup(&(rl)->rrec))",
          "165: void RECORD_LAYER_init(RECORD_LAYER *rl, SSL *s);",
          "166: void RECORD_LAYER_clear(RECORD_LAYER *rl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: #define RECORD_LAYER_get_packet(rl)             ((rl)->packet)",
          "170: #define RECORD_LAYER_get_packet_length(rl)      ((rl)->packet_length)",
          "171: #define RECORD_LAYER_add_packet_length(rl, inc) ((rl)->packet_length += (inc))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193: #define RECORD_LAYER_get_wbuf(rl)               (&(rl)->wbuf)",
          "194: #define RECORD_LAYER_get_rrec(rl)               (&(rl)->rrec)",
          "195: #define RECORD_LAYER_get_wrec(rl)               (&(rl)->wrec)",
          "197: __owur int ssl3_read_n(SSL *s, int n, int max, int extend);",
          "198: __owur int ssl3_write_pending(SSL *s, int type, const unsigned char *buf,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: #define RECORD_LAYER_set_packet(rl, p)          ((rl)->packet = (p))",
          "205: #define RECORD_LAYER_reset_packet_length(rl)    ((rl)->packet_length = 0)",
          "",
          "---------------"
        ],
        "ssl/record/s23_pkt.c||ssl/record/s23_pkt.c": [
          "File: ssl/record/s23_pkt.c -> ssl/record/s23_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     unsigned char *p;",
          "95:     int j;",
          "100:         for (;;) {",
          "101:             s->rwstate = SSL_READING;",
          "104:             if (j <= 0)",
          "105:                 return (j);",
          "106:             s->rwstate = SSL_NOTHING;",
          "110:         }",
          "111:     }",
          "112:     return (n);",
          "",
          "[Removed Lines]",
          "97:     if (s->packet_length < (unsigned int)n) {",
          "98:         p = s->packet;",
          "102:             j = BIO_read(s->rbio, (char *)&(p[s->packet_length]),",
          "103:                          n - s->packet_length);",
          "107:             s->packet_length += j;",
          "108:             if (s->packet_length >= (unsigned int)n)",
          "109:                 return (s->packet_length);",
          "",
          "[Added Lines]",
          "97:     if (RECORD_LAYER_get_packet_length(&s->rlayer) < (unsigned int)n) {",
          "98:         p = RECORD_LAYER_get_packet(&s->rlayer);",
          "102:             j = BIO_read(s->rbio,",
          "103:                 (char *)&(p[RECORD_LAYER_get_packet_length(&s->rlayer)]),",
          "104:                 n - RECORD_LAYER_get_packet_length(&s->rlayer));",
          "108:             RECORD_LAYER_add_packet_length(&s->rlayer, j);",
          "109:             if (RECORD_LAYER_get_packet_length(&s->rlayer) >= (unsigned int)n)",
          "110:                 return (RECORD_LAYER_get_packet_length(&s->rlayer));",
          "",
          "---------------"
        ],
        "ssl/record/s3_pkt.c||ssl/record/s3_pkt.c": [
          "File: ssl/record/s3_pkt.c -> ssl/record/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: int RECORD_LAYER_set_data(RECORD_LAYER *rl, const unsigned char *buf, int len)",
          "189: {",
          "191:     if(len != 0) {",
          "192:         rl->s->rstate = SSL_ST_READ_HEADER;",
          "193:         if (!SSL3_BUFFER_is_initialised(&rl->rbuf))",
          "",
          "[Removed Lines]",
          "190:     rl->s->packet_length = len;",
          "",
          "[Added Lines]",
          "190:     rl->packet_length = len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:                 return 0;",
          "196:     }",
          "199:     SSL3_BUFFER_set_data(&rl->rbuf, buf, len);",
          "201:     return 1;",
          "",
          "[Removed Lines]",
          "198:     rl->s->packet = SSL3_BUFFER_get_buf(&rl->rbuf);",
          "",
          "[Added Lines]",
          "198:     rl->packet = SSL3_BUFFER_get_buf(&rl->rbuf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:                 rb->offset = align;",
          "262:             }",
          "263:         }",
          "267:     }",
          "",
          "[Removed Lines]",
          "264:         s->packet = rb->buf + rb->offset;",
          "265:         s->packet_length = 0;",
          "",
          "[Added Lines]",
          "264:         s->rlayer.packet = rb->buf + rb->offset;",
          "265:         s->rlayer.packet_length = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "282:     if (left >= n) {",
          "284:         rb->left = left - n;",
          "285:         rb->offset += n;",
          "286:         return (n);",
          "",
          "[Removed Lines]",
          "283:         s->packet_length += n;",
          "",
          "[Added Lines]",
          "283:         s->rlayer.packet_length += n;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:     pkt = rb->buf + align;",
          "300:         rb->offset = len + align;",
          "301:     }",
          "",
          "[Removed Lines]",
          "291:     len = s->packet_length;",
          "298:         memmove(pkt, s->packet, len + left);",
          "299:         s->packet = pkt;",
          "",
          "[Added Lines]",
          "291:     len = s->rlayer.packet_length;",
          "298:         memmove(pkt, s->rlayer.packet, len + left);",
          "299:         s->rlayer.packet = pkt;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "355:     rb->offset += n;",
          "356:     rb->left = left - n;",
          "358:     s->rwstate = SSL_NOTHING;",
          "359:     return (n);",
          "360: }",
          "",
          "[Removed Lines]",
          "357:     s->packet_length += n;",
          "",
          "[Added Lines]",
          "357:     s->rlayer.packet_length += n;",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c": [
          "File: ssl/record/ssl3_buffer.c -> ssl/record/ssl3_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:         b->len = len;",
          "161:     }",
          "164:     return 1;",
          "166:  err:",
          "",
          "[Removed Lines]",
          "163:     s->packet = &(b->buf[0]);",
          "",
          "[Added Lines]",
          "163:     RECORD_LAYER_set_packet(&s->rlayer, &(b->buf[0]));",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:  again:",
          "210:     if ((s->rstate != SSL_ST_READ_BODY) ||",
          "212:         n = ssl3_read_n(s, SSL3_RT_HEADER_LENGTH,",
          "213:             SSL3_BUFFER_get_len(&s->rlayer.rbuf), 0);",
          "214:         if (n <= 0)",
          "216:         s->rstate = SSL_ST_READ_BODY;",
          "219:         if (s->msg_callback)",
          "220:             s->msg_callback(0, 0, SSL3_RT_HEADER, p, 5, s,",
          "221:                             s->msg_callback_arg);",
          "",
          "[Removed Lines]",
          "211:         (s->packet_length < SSL3_RT_HEADER_LENGTH)) {",
          "218:         p = s->packet;",
          "",
          "[Added Lines]",
          "211:         (RECORD_LAYER_get_packet_length(&s->rlayer) < SSL3_RT_HEADER_LENGTH)) {",
          "218:         p = RECORD_LAYER_get_packet(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:         i = rr->length;",
          "266:         n = ssl3_read_n(s, i, i, 1);",
          "",
          "[Removed Lines]",
          "263:     if (rr->length > s->packet_length - SSL3_RT_HEADER_LENGTH) {",
          "",
          "[Added Lines]",
          "263:     if (rr->length >",
          "264:         RECORD_LAYER_get_packet_length(&s->rlayer) - SSL3_RT_HEADER_LENGTH) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "281:     rr->input = &(s->packet[SSL3_RT_HEADER_LENGTH]);",
          "",
          "[Added Lines]",
          "282:     rr->input = &(RECORD_LAYER_get_packet(&s->rlayer)[SSL3_RT_HEADER_LENGTH]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:     if (rr->length == 0) {",
          "",
          "[Removed Lines]",
          "449:     s->packet_length = 0;",
          "",
          "[Added Lines]",
          "450:     RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1208:     rr->input = &(s->packet[DTLS1_RT_HEADER_LENGTH]);",
          "",
          "[Added Lines]",
          "1209:     rr->input = &(RECORD_LAYER_get_packet(&s->rlayer)[DTLS1_RT_HEADER_LENGTH]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1240:     if (enc_err == 0) {",
          "1242:         rr->length = 0;",
          "1244:         goto err;",
          "1245:     }",
          "1246: #ifdef TLS_DEBUG",
          "",
          "[Removed Lines]",
          "1243:         s->packet_length = 0;",
          "",
          "[Added Lines]",
          "1244:         RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1308:     if (enc_err < 0) {",
          "1310:         rr->length = 0;",
          "1312:         goto err;",
          "1313:     }",
          "",
          "[Removed Lines]",
          "1311:         s->packet_length = 0;",
          "",
          "[Added Lines]",
          "1312:         RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1348:     return (1);",
          "1350:  f_err:",
          "",
          "[Removed Lines]",
          "1347:     s->packet_length = 0;",
          "",
          "[Added Lines]",
          "1348:     RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1399:  again:",
          "1401:     if ((s->rstate != SSL_ST_READ_BODY) ||",
          "1403:         n = ssl3_read_n(s, DTLS1_RT_HEADER_LENGTH,",
          "1404:             SSL3_BUFFER_get_len(&s->rlayer.rbuf), 0);",
          "",
          "[Removed Lines]",
          "1402:         (s->packet_length < DTLS1_RT_HEADER_LENGTH)) {",
          "",
          "[Added Lines]",
          "1403:         (RECORD_LAYER_get_packet_length(&s->rlayer) < DTLS1_RT_HEADER_LENGTH)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1412:             goto again;",
          "1413:         }",
          "1415:         s->rstate = SSL_ST_READ_BODY;",
          "1419:         if (s->msg_callback)",
          "1420:             s->msg_callback(0, 0, SSL3_RT_HEADER, p, DTLS1_RT_HEADER_LENGTH,",
          "",
          "[Removed Lines]",
          "1410:         if (s->packet_length != DTLS1_RT_HEADER_LENGTH) {",
          "1411:             s->packet_length = 0;",
          "1417:         p = s->packet;",
          "",
          "[Added Lines]",
          "1411:         if (RECORD_LAYER_get_packet_length(&s->rlayer) != DTLS1_RT_HEADER_LENGTH) {",
          "1412:             RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "1418:         p = RECORD_LAYER_get_packet(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1439:             if (version != s->version) {",
          "1441:                 rr->length = 0;",
          "1443:                 goto again;",
          "1444:             }",
          "1445:         }",
          "",
          "[Removed Lines]",
          "1442:                 s->packet_length = 0;",
          "",
          "[Added Lines]",
          "1443:                 RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1447:         if ((version & 0xff00) != (s->version & 0xff00)) {",
          "1449:             rr->length = 0;",
          "1451:             goto again;",
          "1452:         }",
          "1454:         if (rr->length > SSL3_RT_MAX_ENCRYPTED_LENGTH) {",
          "1456:             rr->length = 0;",
          "1458:             goto again;",
          "1459:         }",
          "",
          "[Removed Lines]",
          "1450:             s->packet_length = 0;",
          "1457:             s->packet_length = 0;",
          "",
          "[Added Lines]",
          "1451:             RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "1458:             RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1468:         i = rr->length;",
          "1469:         n = ssl3_read_n(s, i, i, 1);",
          "1471:         if (n != i) {",
          "1472:             rr->length = 0;",
          "1474:             goto again;",
          "1475:         }",
          "",
          "[Removed Lines]",
          "1466:     if (rr->length > s->packet_length - DTLS1_RT_HEADER_LENGTH) {",
          "1473:             s->packet_length = 0;",
          "",
          "[Added Lines]",
          "1467:     if (rr->length >",
          "1468:         RECORD_LAYER_get_packet_length(&s->rlayer) - DTLS1_RT_HEADER_LENGTH) {",
          "1475:             RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1501:         if (!(s->d1->listen && rr->type == SSL3_RT_HANDSHAKE &&",
          "1504:             !dtls1_record_replay_check(s, bitmap)) {",
          "1505:             rr->length = 0;",
          "1508:         }",
          "1509: #ifndef OPENSSL_NO_SCTP",
          "",
          "[Removed Lines]",
          "1502:               s->packet_length > DTLS1_RT_HEADER_LENGTH &&",
          "1503:               s->packet[DTLS1_RT_HEADER_LENGTH] == SSL3_MT_CLIENT_HELLO) &&",
          "",
          "[Added Lines]",
          "1504:               RECORD_LAYER_get_packet_length(&s->rlayer)",
          "1505:                   > DTLS1_RT_HEADER_LENGTH &&",
          "1506:               RECORD_LAYER_get_packet(&s->rlayer)[DTLS1_RT_HEADER_LENGTH]",
          "1507:                   == SSL3_MT_CLIENT_HELLO) &&",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1529:             dtls1_record_bitmap_update(s, bitmap);",
          "1530:         }",
          "1531:         rr->length = 0;",
          "1533:         goto again;",
          "1534:     }",
          "1536:     if (!dtls1_process_record(s)) {",
          "1537:         rr->length = 0;",
          "1540:     }",
          "",
          "[Removed Lines]",
          "1532:         s->packet_length = 0;",
          "",
          "[Added Lines]",
          "1536:         RECORD_LAYER_reset_packet_length(&s->rlayer);",
          "",
          "---------------"
        ],
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:     if (n != 7)",
          "492:         return (n);",
          "495:     memcpy(buf, p, n);",
          "",
          "[Removed Lines]",
          "493:     p = s->packet;",
          "",
          "[Added Lines]",
          "493:     p = RECORD_LAYER_get_packet(&s->rlayer);",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:         if (n != sizeof buf_space)",
          "269:         memcpy(buf, p, n);",
          "",
          "[Removed Lines]",
          "267:         p = s->packet;",
          "",
          "[Added Lines]",
          "267:         p = RECORD_LAYER_get_packet(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417:         type = 2;",
          "420:         v[1] = p[4];",
          "",
          "[Removed Lines]",
          "418:         p = s->packet;",
          "",
          "[Added Lines]",
          "418:         p = RECORD_LAYER_get_packet(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "451:         if (j <= 0)",
          "452:             return (j);",
          "457:         if (s->msg_callback)",
          "462:         p += 5;",
          "463:         n2s(p, csl);",
          "464:         n2s(p, sil);",
          "465:         n2s(p, cl);",
          "466:         d = (unsigned char *)s->init_buf->data;",
          "475:             SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,",
          "476:                    SSL_R_RECORD_LENGTH_MISMATCH);",
          "477:             goto err;",
          "",
          "[Removed Lines]",
          "454:         ssl3_finish_mac(s, s->packet + 2, s->packet_length - 2);",
          "458:             s->msg_callback(0, SSL2_VERSION, 0, s->packet + 2,",
          "459:                             s->packet_length - 2, s, s->msg_callback_arg);",
          "461:         p = s->packet;",
          "467:         if ((csl + sil + cl + 11) != s->packet_length) { /* We can't have TLS",
          "",
          "[Added Lines]",
          "454:         ssl3_finish_mac(s, RECORD_LAYER_get_packet(&s->rlayer) + 2,",
          "455:                         RECORD_LAYER_get_packet_length(&s->rlayer) - 2);",
          "459:             s->msg_callback(0, SSL2_VERSION, 0,",
          "460:                             RECORD_LAYER_get_packet(&s->rlayer) + 2,",
          "461:                             RECORD_LAYER_get_packet_length(&s->rlayer) - 2, s,",
          "462:                             s->msg_callback_arg);",
          "464:         p = RECORD_LAYER_get_packet(&s->rlayer);",
          "470:         if ((csl + sil + cl + 11)",
          "471:                 != RECORD_LAYER_get_packet_length(&s->rlayer)) {",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3184:     ssl_free_wbio_buffer(s);",
          "3187:     s->s3->renegotiate = 0;",
          "3188:     s->s3->total_renegotiations = 0;",
          "3189:     s->s3->num_renegotiations = 0;",
          "",
          "[Removed Lines]",
          "3186:     s->packet_length = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1033:     unsigned char *packet;",
          "1034:     unsigned int packet_length;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf6da05304d554aaa885151451aa4ecaa977e601",
      "candidate_info": {
        "commit_hash": "cf6da05304d554aaa885151451aa4ecaa977e601",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cf6da05304d554aaa885151451aa4ecaa977e601",
        "files": [
          "CHANGES",
          "apps/s_client.c",
          "crypto/err/openssl.ec",
          "ssl/d1_lib.c",
          "ssl/dtls1.h",
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c",
          "ssl/s2_lib.c",
          "ssl/s3_enc.c",
          "ssl/s3_lib.c",
          "ssl/ssl.h",
          "ssl/ssl3.h",
          "ssl/ssl_err.c",
          "ssl/ssl_lib.c",
          "ssl/t1_enc.c",
          "ssl/tls1.h"
        ],
        "message": "Support TLS_FALLBACK_SCSV.\n\nReviewed-by: Stephen Henson <steve@openssl.org>",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c",
          "crypto/err/openssl.ec||crypto/err/openssl.ec",
          "ssl/d1_lib.c||ssl/d1_lib.c",
          "ssl/dtls1.h||ssl/dtls1.h",
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c",
          "ssl/s2_lib.c||ssl/s2_lib.c",
          "ssl/s3_enc.c||ssl/s3_enc.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl.h||ssl/ssl.h",
          "ssl/ssl3.h||ssl/ssl3.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "ssl/tls1.h||ssl/tls1.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:  BIO_printf(bio_err,\" -tls1_1       - just use TLSv1.1\\n\");",
          "342:  BIO_printf(bio_err,\" -tls1         - just use TLSv1\\n\");",
          "343:  BIO_printf(bio_err,\" -dtls1        - just use DTLSv1\\n\");",
          "344:  BIO_printf(bio_err,\" -mtu          - set the link layer MTU\\n\");",
          "345:  BIO_printf(bio_err,\" -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol\\n\");",
          "346:  BIO_printf(bio_err,\" -bugs         - Switch on all SSL implementation bug workarounds\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:  BIO_printf(bio_err,\" -fallback_scsv - send TLS_FALLBACK_SCSV\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "650:  char *sess_out = NULL;",
          "651:  struct sockaddr peer;",
          "652:  int peerlen = sizeof(peer);",
          "653:  int enable_timeouts = 0 ;",
          "654:  long socket_mtu = 0;",
          "655: #ifndef OPENSSL_NO_JPAKE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "654:  int fallback_scsv = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "940:    meth=DTLSv1_2_client_method();",
          "941:    socket_type=SOCK_DGRAM;",
          "942:    }",
          "943:   else if (strcmp(*argv,\"-timeout\") == 0)",
          "944:    enable_timeouts=1;",
          "945:   else if (strcmp(*argv,\"-mtu\") == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "945:   else if (strcmp(*argv,\"-fallback_scsv\") == 0)",
          "946:    {",
          "947:    fallback_scsv = 1;",
          "948:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1439:   SSL_set_session(con, sess);",
          "1440:   SSL_SESSION_free(sess);",
          "1441:   }",
          "1442: #ifndef OPENSSL_NO_TLSEXT",
          "1443:  if (servername != NULL)",
          "1444:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1449:  if (fallback_scsv)",
          "1450:   SSL_set_mode(con, SSL_MODE_SEND_FALLBACK_SCSV);",
          "",
          "---------------"
        ],
        "crypto/err/openssl.ec||crypto/err/openssl.ec": [
          "File: crypto/err/openssl.ec -> crypto/err/openssl.ec",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: R SSL_R_TLSV1_ALERT_PROTOCOL_VERSION  1070",
          "75: R SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY 1071",
          "76: R SSL_R_TLSV1_ALERT_INTERNAL_ERROR  1080",
          "77: R SSL_R_TLSV1_ALERT_USER_CANCELLED  1090",
          "78: R SSL_R_TLSV1_ALERT_NO_RENEGOTIATION  1100",
          "79: R SSL_R_TLSV1_UNSUPPORTED_EXTENSION  1110",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: R SSL_R_SSLV3_ALERT_INAPPROPRIATE_FALLBACK 1086",
          "",
          "---------------"
        ],
        "ssl/d1_lib.c||ssl/d1_lib.c": [
          "File: ssl/d1_lib.c -> ssl/d1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:  case DTLS_CTRL_LISTEN:",
          "295:   ret = dtls1_listen(s, parg);",
          "296:   break;",
          "298:  default:",
          "299:   ret = ssl3_ctrl(s, cmd, larg, parg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:  case SSL_CTRL_CHECK_PROTO_VERSION:",
          "301:   if (s->version == s->ctx->method->version)",
          "302:    return 1;",
          "305:   if (s->ctx->method->version == DTLS_method()->version)",
          "306:    {",
          "307: #if DTLS_MAX_VERSION != DTLS1_2_VERSION",
          "308: #  error Code needs update for DTLS_method() support beyond DTLS1_2_VERSION.",
          "309: #endif",
          "310:    if (!(s->options & SSL_OP_NO_DTLSv1_2))",
          "311:     return s->version == DTLS1_2_VERSION;",
          "312:    if (!(s->options & SSL_OP_NO_DTLSv1))",
          "313:     return s->version == DTLS1_VERSION;",
          "314:    }",
          "",
          "---------------"
        ],
        "ssl/dtls1.h||ssl/dtls1.h": [
          "File: ssl/dtls1.h -> ssl/dtls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: #endif",
          "86: #define DTLS1_VERSION   0xFEFF",
          "88: #define DTLS1_2_VERSION   0xFEFD",
          "90: #define DTLS_ANY_VERSION  0x1FFFF",
          "",
          "[Removed Lines]",
          "87: #define DTLS1_BAD_VER   0x0100",
          "",
          "[Added Lines]",
          "88: #define DTLS_MAX_VERSION  DTLS1_2_VERSION",
          "90: #define DTLS1_BAD_VER   0x0100",
          "",
          "---------------"
        ],
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:    goto err;",
          "753:    }",
          "755:   if (!ssl_security(s, SSL_SECOP_VERSION, 0, s->version, NULL))",
          "756:    {",
          "757:    SSLerr(SSL_F_SSL23_GET_SERVER_HELLO,SSL_R_VERSION_TOO_LOW);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "756:   OPENSSL_assert(s->version <= TLS_MAX_VERSION);",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:    }",
          "422:   }",
          "424:  if (s->version < TLS1_2_VERSION && tls1_suiteb(s))",
          "425:   {",
          "426:   SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:  OPENSSL_assert(s->version <= TLS_MAX_VERSION);",
          "",
          "---------------"
        ],
        "ssl/s2_lib.c||ssl/s2_lib.c": [
          "File: ssl/s2_lib.c -> ssl/s2_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:  case SSL_CTRL_GET_SESSION_REUSED:",
          "392:   ret=s->hit;",
          "393:   break;",
          "394:  default:",
          "395:   break;",
          "396:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:  case SSL_CTRL_CHECK_PROTO_VERSION:",
          "395:   return ssl3_ctrl(s, SSL_CTRL_CHECK_PROTO_VERSION, larg, parg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:  if (p != NULL)",
          "435:   {",
          "436:   l=c->id;",
          "438:   p[0]=((unsigned char)(l>>16L))&0xFF;",
          "439:   p[1]=((unsigned char)(l>> 8L))&0xFF;",
          "440:   p[2]=((unsigned char)(l     ))&0xFF;",
          "",
          "[Removed Lines]",
          "437:   if ((l & 0xff000000) != 0x02000000) return(0);",
          "",
          "[Added Lines]",
          "439:   if ((l & 0xff000000) != 0x02000000 && l != SSL3_CK_FALLBACK_SCSV) return(0);",
          "",
          "---------------"
        ],
        "ssl/s3_enc.c||ssl/s3_enc.c": [
          "File: ssl/s3_enc.c -> ssl/s3_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "937:  case SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE: return(SSL3_AD_HANDSHAKE_FAILURE);",
          "938:  case SSL_AD_BAD_CERTIFICATE_HASH_VALUE: return(SSL3_AD_HANDSHAKE_FAILURE);",
          "939:  case SSL_AD_UNKNOWN_PSK_IDENTITY:return(TLS1_AD_UNKNOWN_PSK_IDENTITY);",
          "940:  default:   return(-1);",
          "941:   }",
          "942:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "940:  case SSL_AD_INAPPROPRIATE_FALLBACK:return(TLS1_AD_INAPPROPRIATE_FALLBACK);",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3924:   return (int)sess->tlsext_ecpointformatlist_length;",
          "3925:   }",
          "3926: #endif",
          "3927:  default:",
          "3928:   break;",
          "3929:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3928:  case SSL_CTRL_CHECK_PROTO_VERSION:",
          "3932:   if (s->version == s->ctx->method->version)",
          "3933:    return 1;",
          "3936:   if (s->ctx->method->version == SSLv23_method()->version)",
          "3937:    {",
          "3938: #if TLS_MAX_VERSION != TLS1_2_VERSION",
          "3939: #  error Code needs update for SSLv23_method() support beyond TLS1_2_VERSION.",
          "3940: #endif",
          "3941:    if (!(s->options & SSL_OP_NO_TLSv1_2))",
          "3942:     return s->version == TLS1_2_VERSION;",
          "3943:    if (!(s->options & SSL_OP_NO_TLSv1_1))",
          "3944:     return s->version == TLS1_1_VERSION;",
          "3945:    if (!(s->options & SSL_OP_NO_TLSv1))",
          "3946:     return s->version == TLS1_VERSION;",
          "3947:    if (!(s->options & SSL_OP_NO_SSLv3))",
          "3948:     return s->version == SSL3_VERSION;",
          "3949:    if (!(s->options & SSL_OP_NO_SSLv2))",
          "3950:     return s->version == SSL2_VERSION;",
          "3951:    }",
          "",
          "---------------"
        ],
        "ssl/ssl.h||ssl/ssl.h": [
          "File: ssl/ssl.h -> ssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "686: #define SSL_MODE_SEND_CLIENTHELLO_TIME 0x00000020L",
          "687: #define SSL_MODE_SEND_SERVERHELLO_TIME 0x00000040L",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691: #define SSL_MODE_SEND_FALLBACK_SCSV 0x00000080L",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1832: #define SSL_CTRL_SELECT_CURRENT_CERT  116",
          "1833: #define SSL_CTRL_SET_CURRENT_CERT  117",
          "1835: #define SSL_CERT_SET_FIRST   1",
          "1836: #define SSL_CERT_SET_NEXT   2",
          "1837: #define SSL_CERT_SET_SERVER   3",
          "1841: #define DTLSv1_get_timeout(ssl, arg) \\",
          "1842:  SSL_ctrl(ssl,DTLS_CTRL_GET_TIMEOUT,0, (void *)arg)",
          "",
          "[Removed Lines]",
          "1839: #define SSL_CTRL_SET_DH_AUTO   118",
          "",
          "[Added Lines]",
          "1840: #define SSL_CTRL_SET_DH_AUTO   118",
          "1841: #define SSL_CTRL_CHECK_PROTO_VERSION  119",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2869: #define SSL_R_HTTP_REQUEST     156",
          "2870: #define SSL_R_ILLEGAL_PADDING     283",
          "2871: #define SSL_R_ILLEGAL_SUITEB_DIGEST    380",
          "2872: #define SSL_R_INCONSISTENT_COMPRESSION    340",
          "2873: #define SSL_R_INVALID_CHALLENGE_LENGTH    158",
          "2874: #define SSL_R_INVALID_COMMAND     280",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2880: #define SSL_R_INAPPROPRIATE_FALLBACK    373",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3027: #define SSL_R_TLSV1_ALERT_DECRYPTION_FAILED   1021",
          "3028: #define SSL_R_TLSV1_ALERT_DECRYPT_ERROR    1051",
          "3029: #define SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION   1060",
          "3030: #define SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY   1071",
          "3031: #define SSL_R_TLSV1_ALERT_INTERNAL_ERROR   1080",
          "3032: #define SSL_R_TLSV1_ALERT_NO_RENEGOTIATION   1100",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3039: #define SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK  1086",
          "",
          "---------------"
        ],
        "ssl/ssl3.h||ssl/ssl3.h": [
          "File: ssl/ssl3.h -> ssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: extern \"C\" {",
          "129: #endif",
          "132: #define SSL3_CK_SCSV    0x030000FF",
          "134: #define SSL3_CK_RSA_NULL_MD5   0x03000001",
          "135: #define SSL3_CK_RSA_NULL_SHA   0x03000002",
          "136: #define SSL3_CK_RSA_RC4_40_MD5    0x03000003",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #define SSL3_CK_FALLBACK_SCSV   0x03005600",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: {ERR_REASON(SSL_R_HTTP_REQUEST)          ,\"http request\"},",
          "405: {ERR_REASON(SSL_R_ILLEGAL_PADDING)       ,\"illegal padding\"},",
          "406: {ERR_REASON(SSL_R_ILLEGAL_SUITEB_DIGEST) ,\"illegal Suite B digest\"},",
          "407: {ERR_REASON(SSL_R_INCONSISTENT_COMPRESSION),\"inconsistent compression\"},",
          "408: {ERR_REASON(SSL_R_INVALID_CHALLENGE_LENGTH),\"invalid challenge length\"},",
          "409: {ERR_REASON(SSL_R_INVALID_COMMAND)       ,\"invalid command\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407: {ERR_REASON(SSL_R_INAPPROPRIATE_FALLBACK),\"inappropriate fallback\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "562: {ERR_REASON(SSL_R_TLSV1_ALERT_DECRYPTION_FAILED),\"tlsv1 alert decryption failed\"},",
          "563: {ERR_REASON(SSL_R_TLSV1_ALERT_DECRYPT_ERROR),\"tlsv1 alert decrypt error\"},",
          "564: {ERR_REASON(SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION),\"tlsv1 alert export restriction\"},",
          "565: {ERR_REASON(SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY),\"tlsv1 alert insufficient security\"},",
          "566: {ERR_REASON(SSL_R_TLSV1_ALERT_INTERNAL_ERROR),\"tlsv1 alert internal error\"},",
          "567: {ERR_REASON(SSL_R_TLSV1_ALERT_NO_RENEGOTIATION),\"tlsv1 alert no renegotiation\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566: {ERR_REASON(SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK),\"tlsv1 alert inappropriate fallback\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1491:  int i,j=0;",
          "1492:  SSL_CIPHER *c;",
          "1493:  unsigned char *q;",
          "1496:  ssl_set_client_disabled(s);",
          "1498:  if (sk == NULL) return(0);",
          "1499:  q=p;",
          "1501:  for (i=0; i<sk_SSL_CIPHER_num(sk); i++)",
          "1502:   {",
          "",
          "[Removed Lines]",
          "1494:  int no_scsv = s->renegotiate;",
          "",
          "[Added Lines]",
          "1494:  int empty_reneg_info_scsv = !s->renegotiate;",
          "1500:  if (put_cb == NULL)",
          "1501:   put_cb = s->method->put_cipher_by_char;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1507: #ifdef OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL",
          "1508:   if (c->id == SSL3_CK_SCSV)",
          "1509:    {",
          "1511:     continue;",
          "1512:    else",
          "1514:    }",
          "1515: #endif",
          "1517:   p+=j;",
          "1518:   }",
          "1523:   {",
          "1525:    {",
          "1530: #ifdef OPENSSL_RI_DEBUG",
          "1532: #endif",
          "1533:   }",
          "1535:  return(p-q);",
          "",
          "[Removed Lines]",
          "1510:    if (no_scsv)",
          "1513:     no_scsv = 1;",
          "1516:   j = put_cb ? put_cb(c,p) : ssl_put_cipher_by_char(s,c,p);",
          "1522:  if (p != q && !no_scsv)",
          "1524:   static SSL_CIPHER scsv =",
          "1526:    0, NULL, SSL3_CK_SCSV, 0, 0, 0, 0, 0, 0, 0, 0, 0",
          "1527:    };",
          "1528:   j = put_cb ? put_cb(&scsv,p) : ssl_put_cipher_by_char(s,&scsv,p);",
          "1529:   p+=j;",
          "1531:   fprintf(stderr, \"SCSV sent by client\\n\");",
          "",
          "[Added Lines]",
          "1512:    if (!empty_reneg_info_scsv)",
          "1515:     empty_reneg_info_scsv = 0;",
          "1518:   j = put_cb(c,p);",
          "1523:  if (p != q)",
          "1525:   if (empty_reneg_info_scsv)",
          "1527:    static SSL_CIPHER scsv =",
          "1528:     {",
          "1529:     0, NULL, SSL3_CK_SCSV, 0, 0, 0, 0, 0, 0, 0, 0, 0",
          "1530:     };",
          "1531:    j = put_cb(&scsv,p);",
          "1532:    p+=j;",
          "1534:    fprintf(stderr, \"TLS_EMPTY_RENEGOTIATION_INFO_SCSV sent by client\\n\");",
          "1536:    }",
          "1537:   if (s->mode & SSL_MODE_SEND_FALLBACK_SCSV)",
          "1538:    {",
          "1539:    static SSL_CIPHER scsv =",
          "1540:     {",
          "1541:     0, NULL, SSL3_CK_FALLBACK_SCSV, 0, 0, 0, 0, 0, 0, 0, 0, 0",
          "1542:     };",
          "1543:    j = put_cb(&scsv,p);",
          "1544:    p+=j;",
          "1545:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1541:  const SSL_CIPHER *c;",
          "1542:  STACK_OF(SSL_CIPHER) *sk;",
          "1543:  int i,n;",
          "1544:  if (s->s3)",
          "1545:   s->s3->send_connection_binding = 0;",
          "1547:  n=ssl_put_cipher_by_char(s,NULL,NULL);",
          "1549:   {",
          "1550:   SSLerr(SSL_F_SSL_BYTES_TO_CIPHER_LIST,SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST);",
          "1551:   return(NULL);",
          "",
          "[Removed Lines]",
          "1548:  if ((num%n) != 0)",
          "",
          "[Added Lines]",
          "1562:  if (n == 0 || (num%n) != 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1590:    continue;",
          "1591:    }",
          "1593:   c=ssl_get_cipher_by_char(s,p);",
          "1594:   p+=n;",
          "1595:   if (c != NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1608:   if ((n != 3 || !p[0]) &&",
          "1609:    (p[n-2] == ((SSL3_CK_FALLBACK_SCSV >> 8) & 0xff)) &&",
          "1610:    (p[n-1] == (SSL3_CK_FALLBACK_SCSV & 0xff)))",
          "1611:    {",
          "1614:    if (!SSL_ctrl(s, SSL_CTRL_CHECK_PROTO_VERSION, 0, NULL))",
          "1615:     {",
          "1616:     SSLerr(SSL_F_SSL_BYTES_TO_CIPHER_LIST,SSL_R_INAPPROPRIATE_FALLBACK);",
          "1617:     if (s->s3)",
          "1618:      ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_INAPPROPRIATE_FALLBACK);",
          "1619:     goto err;",
          "1620:     }",
          "1621:    continue;",
          "1622:    }",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:  case SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE: return(TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE);",
          "1279:  case SSL_AD_BAD_CERTIFICATE_HASH_VALUE: return(TLS1_AD_BAD_CERTIFICATE_HASH_VALUE);",
          "1280:  case SSL_AD_UNKNOWN_PSK_IDENTITY:return(TLS1_AD_UNKNOWN_PSK_IDENTITY);",
          "1282:  case DTLS1_AD_MISSING_HANDSHAKE_MESSAGE: return",
          "1283:        (DTLS1_AD_MISSING_HANDSHAKE_MESSAGE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1281:  case SSL_AD_INAPPROPRIATE_FALLBACK:return(TLS1_AD_INAPPROPRIATE_FALLBACK);",
          "",
          "---------------"
        ],
        "ssl/tls1.h||ssl/tls1.h": [
          "File: ssl/tls1.h -> ssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: #define TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES 0",
          "167: #define TLS1_2_VERSION   0x0303",
          "172: #define TLS1_1_VERSION_MAJOR  0x03",
          "173: #define TLS1_1_VERSION_MINOR  0x02",
          "179: #define TLS1_get_version(s) \\",
          "180:   ((s->version >> 8) == TLS1_VERSION_MAJOR ? s->version : 0)",
          "",
          "[Removed Lines]",
          "168: #define TLS1_2_VERSION_MAJOR  0x03",
          "169: #define TLS1_2_VERSION_MINOR  0x03",
          "171: #define TLS1_1_VERSION   0x0302",
          "175: #define TLS1_VERSION   0x0301",
          "176: #define TLS1_VERSION_MAJOR  0x03",
          "177: #define TLS1_VERSION_MINOR  0x01",
          "",
          "[Added Lines]",
          "167: #define TLS1_VERSION   0x0301",
          "168: #define TLS1_1_VERSION   0x0302",
          "170: #define TLS_MAX_VERSION   TLS1_2_VERSION",
          "172: #define TLS1_VERSION_MAJOR  0x03",
          "173: #define TLS1_VERSION_MINOR  0x01",
          "178: #define TLS1_2_VERSION_MAJOR  0x03",
          "179: #define TLS1_2_VERSION_MINOR  0x03",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00b4ee7664051a0dc589b1d81ba56582576a6ca4",
      "candidate_info": {
        "commit_hash": "00b4ee7664051a0dc589b1d81ba56582576a6ca4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/00b4ee7664051a0dc589b1d81ba56582576a6ca4",
        "files": [
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c",
          "ssl/s3_cbc.c",
          "ssl/s3_clnt.c",
          "ssl/s3_enc.c",
          "ssl/ssl_ciph.c",
          "ssl/ssl_lib.c",
          "ssl/t1_enc.c",
          "ssl/t1_lib.c"
        ],
        "message": "Remove some unnecessary OPENSSL_FIPS references\n\nFIPS_mode() exists in all versions of OpenSSL but always returns 0 if OpenSSL is not FIPS\ncapable.\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c",
          "ssl/s3_cbc.c||ssl/s3_cbc.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_enc.c||ssl/s3_enc.c",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:    version_major = TLS1_VERSION_MAJOR;",
          "357:    version_minor = TLS1_VERSION_MINOR;",
          "358:    }",
          "360:   else if(FIPS_mode())",
          "361:    {",
          "362:    SSLerr(SSL_F_SSL23_CLIENT_HELLO,",
          "363:      SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE);",
          "364:    return -1;",
          "365:    }",
          "367:   else if (version == SSL3_VERSION)",
          "368:    {",
          "369:    version_major = SSL3_VERSION_MAJOR;",
          "",
          "[Removed Lines]",
          "359: #ifdef OPENSSL_FIPS",
          "366: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519:   if ((p[2] == SSL3_VERSION_MINOR) &&",
          "520:    !(s->options & SSL_OP_NO_SSLv3))",
          "521:    {",
          "523:    if(FIPS_mode())",
          "524:     {",
          "525:     SSLerr(SSL_F_SSL23_GET_SERVER_HELLO,",
          "526:      SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE);",
          "527:     goto err;",
          "528:     }",
          "530:    s->version=SSL3_VERSION;",
          "531:    s->method=SSLv3_client_method();",
          "532:    }",
          "",
          "[Removed Lines]",
          "522: #ifdef OPENSSL_FIPS",
          "529: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: #include <openssl/rand.h>",
          "116: #include <openssl/objects.h>",
          "117: #include <openssl/evp.h>",
          "122: static const SSL_METHOD *ssl23_get_server_method(int ver);",
          "123: int ssl23_get_client_hello(SSL *s);",
          "",
          "[Removed Lines]",
          "118: #ifdef OPENSSL_FIPS",
          "119: #include <openssl/fips.h>",
          "120: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:   goto err;",
          "420:   }",
          "423:  if (FIPS_mode() && (s->version < TLS1_VERSION))",
          "424:   {",
          "425:   SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,",
          "426:      SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE);",
          "427:   goto err;",
          "428:   }",
          "431:  if (!ssl_security(s, SSL_SECOP_VERSION, 0, s->version, NULL))",
          "432:   {",
          "",
          "[Removed Lines]",
          "422: #ifdef OPENSSL_FIPS",
          "429: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_cbc.c||ssl/s3_cbc.c": [
          "File: ssl/s3_cbc.c -> ssl/s3_cbc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354: char ssl3_cbc_record_digest_supported(const EVP_MD_CTX *ctx)",
          "355:  {",
          "357:  if (FIPS_mode())",
          "358:   return 0;",
          "360:  switch (EVP_MD_CTX_type(ctx))",
          "361:   {",
          "362:   case NID_md5:",
          "",
          "[Removed Lines]",
          "356: #ifdef OPENSSL_FIPS",
          "359: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "705:  EVP_MD_CTX_cleanup(&md_ctx);",
          "706:  }",
          "",
          "[Removed Lines]",
          "708: #ifdef OPENSSL_FIPS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "750:  EVP_DigestSignUpdate(mac_ctx, data,",
          "751:     (blocks_orig - blocks_data + 1) * block_size);",
          "752:  }",
          "",
          "[Removed Lines]",
          "753: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: #include <openssl/objects.h>",
          "157: #include <openssl/evp.h>",
          "158: #include <openssl/md5.h>",
          "162: #ifndef OPENSSL_NO_DH",
          "163: #include <openssl/dh.h>",
          "164: #endif",
          "",
          "[Removed Lines]",
          "159: #ifdef OPENSSL_FIPS",
          "160: #include <openssl/fips.h>",
          "161: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_enc.c||ssl/s3_enc.c": [
          "File: ssl/s3_enc.c -> ssl/s3_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:   if ((mask & ssl_get_algorithm2(s)) && md)",
          "631:    {",
          "632:    s->s3->handshake_dgst[i]=EVP_MD_CTX_create();",
          "634:    if (EVP_MD_nid(md) == NID_md5)",
          "635:     {",
          "636:     EVP_MD_CTX_set_flags(s->s3->handshake_dgst[i],",
          "637:       EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);",
          "638:     }",
          "640:    EVP_DigestInit_ex(s->s3->handshake_dgst[i],md,NULL);",
          "641:    EVP_DigestUpdate(s->s3->handshake_dgst[i],hdata,hdatalen);",
          "642:    }",
          "",
          "[Removed Lines]",
          "633: #ifdef OPENSSL_FIPS",
          "639: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "643:       s->ssl_version < TLS1_VERSION)",
          "644:    return 1;",
          "647:   if (FIPS_mode())",
          "648:    return 1;",
          "651:   if (c->algorithm_enc == SSL_RC4 &&",
          "652:     c->algorithm_mac == SSL_MD5 &&",
          "",
          "[Removed Lines]",
          "646: #ifdef OPENSSL_FIPS",
          "649: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "826:   c = ssl_method->get_cipher(i);",
          "828:   if ((c != NULL) && c->valid &&",
          "830:       (!FIPS_mode() || (c->algo_strength & SSL_FIPS)) &&",
          "832:       !(c->algorithm_mkey & disabled_mkey) &&",
          "833:       !(c->algorithm_auth & disabled_auth) &&",
          "834:       !(c->algorithm_enc & disabled_enc) &&",
          "",
          "[Removed Lines]",
          "829: #ifdef OPENSSL_FIPS",
          "831: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1616:  for (curr = head; curr != NULL; curr = curr->next)",
          "1617:   {",
          "1619:   if (curr->active && (!FIPS_mode() || curr->cipher->algo_strength & SSL_FIPS))",
          "1623:    {",
          "1624:    if (!sk_SSL_CIPHER_push(cipherstack, curr->cipher))",
          "1625:     {",
          "",
          "[Removed Lines]",
          "1618: #ifdef OPENSSL_FIPS",
          "1620: #else",
          "1621:   if (curr->active)",
          "1622: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1889:   return(NULL);",
          "1890:   }",
          "1893:  if (FIPS_mode() && (meth->version < TLS1_VERSION))",
          "1894:   {",
          "1895:   SSLerr(SSL_F_SSL_CTX_NEW, SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE);",
          "1896:   return NULL;",
          "1897:   }",
          "1900:  if (SSL_get_ex_data_X509_STORE_CTX_idx() < 0)",
          "1901:   {",
          "",
          "[Removed Lines]",
          "1892: #ifdef OPENSSL_FIPS",
          "1898: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1054:   EVP_DigestSignUpdate(mac_ctx,rec->input,rec->length);",
          "1055:   t=EVP_DigestSignFinal(mac_ctx,md,&md_size);",
          "1056:   OPENSSL_assert(t > 0);",
          "1058:   if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
          "1059:    tls_fips_digest_extra(",
          "1060:          ssl->enc_read_ctx,",
          "1061:      mac_ctx, rec->input,",
          "1062:      rec->length, rec->orig_len);",
          "1064:   }",
          "1066:  if (!stream_mac)",
          "",
          "[Removed Lines]",
          "1057: #ifdef OPENSSL_FIPS",
          "1063: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3599: const EVP_MD *tls12_get_hash(unsigned char hash_alg)",
          "3600:  {",
          "3601:  const tls12_hash_info *inf;",
          "3603:  if (hash_alg == TLSEXT_hash_md5 && FIPS_mode())",
          "3604:   return NULL;",
          "3606:  inf = tls12_get_hash_info(hash_alg);",
          "3607:  if (!inf || !inf->mfunc)",
          "3608:   return NULL;",
          "",
          "[Removed Lines]",
          "3602: #ifndef OPENSSL_FIPS",
          "3605: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}