{
  "cve_id": "CVE-2016-5842",
  "cve_desc": "MagickCore/property.c in ImageMagick before 7.0.2-1 allows remote attackers to obtain sensitive memory information via vectors involving the q variable, which triggers an out-of-bounds read.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "d8ab7f046587f2e9f734b687ba7e6e10147c294b",
  "patch_info": {
    "commit_hash": "d8ab7f046587f2e9f734b687ba7e6e10147c294b",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/d8ab7f046587f2e9f734b687ba7e6e10147c294b",
    "files": [
      "MagickCore/profile.c",
      "MagickCore/property.c"
    ],
    "message": "Improve checking of EXIF profile to prevent integer overflow (bug report from Ibrahim el-sayed)",
    "before_after_code_files": [
      "MagickCore/profile.c||MagickCore/profile.c",
      "MagickCore/property.c||MagickCore/property.c"
    ]
  },
  "patch_diff": {
    "MagickCore/profile.c||MagickCore/profile.c": [
      "File: MagickCore/profile.c -> MagickCore/profile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1351: static void *DestroyProfile(void *profile)",
      "1352: {",
      "1353:   return((void *) DestroyStringInfo((StringInfo *) profile));",
      "1354: }",
      "1356: static inline const unsigned char *ReadResourceByte(const unsigned char *p,",
      "1357:   unsigned char *quantum)",
      "1358: {",
      "1360:   return(p);",
      "1361: }",
      "1363: static inline const unsigned char *ReadResourceLong(const unsigned char *p,",
      "1364:   unsigned int *quantum)",
      "1365: {",
      "1370:   return(p);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1731:   unsigned char *buffer)",
      "1732: {",
      "1733:   union",
      "1736:       unsigned_value;",
      "1742:   unsigned short",
      "1743:     value;",
      "",
      "[Removed Lines]",
      "1734:   {",
      "1735:     unsigned int",
      "1738:     signed int",
      "1739:       signed_value;",
      "1740:   } quantum;",
      "",
      "[Added Lines]",
      "1736:   {",
      "1737:     unsigned int",
      "1738:       unsigned_value;",
      "1741:       signed_value;",
      "1742:   } quantum;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1758:   unsigned char *buffer)",
      "1759: {",
      "1760:   union",
      "1765:     signed int",
      "1769:   unsigned int",
      "1770:     value;",
      "",
      "[Removed Lines]",
      "1761:   {",
      "1762:     unsigned int",
      "1763:       unsigned_value;",
      "1766:       signed_value;",
      "1767:   } quantum;",
      "",
      "[Added Lines]",
      "1764:   {",
      "1765:     unsigned int",
      "1766:       unsigned_value;",
      "1768:     signed int",
      "1772:   unsigned int",
      "1773:     value;",
      "1775:   if (endian == LSBEndian)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2017:     {",
      "2018:       int",
      "2019:         components;",
      "2021:       register unsigned char",
      "2025:       size_t",
      "2026:         number_bytes;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2028:       register unsigned char",
      "2035:       ssize_t",
      "",
      "---------------"
    ],
    "MagickCore/property.c||MagickCore/property.c": [
      "File: MagickCore/property.c -> MagickCore/property.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "521:   int",
      "522:     c;",
      "524:   register ssize_t",
      "525:     i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     value;",
      "533:   if (*length < 4)",
      "539:     buffer[i]=(unsigned char) c;",
      "540:   }",
      "541:   value=(size_t) (buffer[0] << 24);",
      "",
      "[Removed Lines]",
      "534:     return(-1);",
      "535:   for (i=0; i < 4; i++)",
      "536:   {",
      "537:     c=(int) (*(*p)++);",
      "538:     (*length)--;",
      "",
      "[Added Lines]",
      "534:     return(-1);",
      "535:   for (i=0; i < 4; i++)",
      "536:   {",
      "537:     c=(int) (*(*p)++);",
      "538:     (*length)--;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "571:     value;",
      "573:   if (*length < 2)",
      "577:     c=(int) (*(*p)++);",
      "578:     (*length)--;",
      "579:     buffer[i]=(unsigned char) c;",
      "",
      "[Removed Lines]",
      "574:     return((unsigned short) ~0);",
      "575:   for (i=0; i < 2; i++)",
      "576:   {",
      "",
      "[Added Lines]",
      "574:     return((unsigned short) ~0);",
      "575:   for (i=0; i < 2; i++)",
      "576:   {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "743:     signed int",
      "744:       signed_value;",
      "748:     value;",
      "753:         (buffer[1] << 8 ) | (buffer[0]));",
      "754:       quantum.unsigned_value=(value & 0xffffffff);",
      "755:       return(quantum.signed_value);",
      "",
      "[Removed Lines]",
      "745:   } quantum;",
      "747:   unsigned int",
      "750:   if (endian == LSBEndian)",
      "751:     {",
      "752:       value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |",
      "",
      "[Added Lines]",
      "745:   } quantum;",
      "747:   unsigned int",
      "748:     value;",
      "752:       value=(unsigned int) buffer[3] << 24;",
      "753:       value|=(unsigned int) buffer[2] << 16;",
      "754:       value|=(unsigned int) buffer[1] << 8;",
      "755:       value|=(unsigned int) buffer[0];",
      "756:       quantum.unsigned_value=value & 0xffffffff;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "761: }",
      "763: static inline unsigned int ReadPropertyUnsignedLong(const EndianType endian,",
      "767:     value;",
      "771:       value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |",
      "772:         (buffer[1] << 8 ) | (buffer[0]));",
      "773:       return((unsigned int) (value & 0xffffffff));",
      "",
      "[Removed Lines]",
      "764:   const unsigned char *buffer)",
      "765: {",
      "766:   unsigned int",
      "769:   if (endian == LSBEndian)",
      "770:     {",
      "",
      "[Added Lines]",
      "768:   const unsigned char *buffer)",
      "769: {",
      "770:   unsigned int",
      "771:     value;",
      "774:     {",
      "775:       value=(unsigned int) buffer[3] << 24;",
      "776:       value|=(unsigned int) buffer[2] << 16;",
      "777:       value|=(unsigned int) buffer[1] << 8;",
      "778:       value|=(unsigned int) buffer[0];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "788:     signed short",
      "789:       signed_value;",
      "792:   unsigned short",
      "793:     value;",
      "797:       value=(unsigned short) ((buffer[1] << 8) | buffer[0]);",
      "798:       quantum.unsigned_value=(value & 0xffff);",
      "799:       return(quantum.signed_value);",
      "",
      "[Removed Lines]",
      "790:   } quantum;",
      "795:   if (endian == LSBEndian)",
      "796:     {",
      "",
      "[Added Lines]",
      "798:   } quantum;",
      "800:   unsigned short",
      "803:   if (endian == LSBEndian)",
      "804:     {",
      "805:       value=(unsigned short) buffer[1] << 8;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "805: }",
      "807: static inline unsigned short ReadPropertyUnsignedShort(const EndianType endian,",
      "810:   unsigned short",
      "814:     {",
      "815:       value=(unsigned short) ((buffer[1] << 8) | buffer[0]);",
      "816:       return((unsigned short) (value & 0xffff));",
      "",
      "[Removed Lines]",
      "808:   const unsigned char *buffer)",
      "809: {",
      "811:     value;",
      "813:   if (endian == LSBEndian)",
      "",
      "[Added Lines]",
      "817:   const unsigned char *buffer)",
      "818: {",
      "819:   unsigned short",
      "822:   if (endian == LSBEndian)",
      "823:     {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1396:       size_t",
      "1397:         format;",
      "1399:       ssize_t",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1407:         format;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1403:       q=(unsigned char *) (directory+(12*entry)+2);",
      "1404:       if (GetValueFromSplayTree(exif_resources,q) == q)",
      "1405:         break;",
      "1406:       (void) AddValueToSplayTree(exif_resources,q,q);",
      "1407:       tag_value=(size_t) ReadPropertyUnsignedShort(endian,q)+tag_offset;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1417:         break;",
      "1418:       (void) AddValueToSplayTree(exif_resources,q,q);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1fe0b879964fa7797e3d68574d297922a47c4034",
      "candidate_info": {
        "commit_hash": "1fe0b879964fa7797e3d68574d297922a47c4034",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/1fe0b879964fa7797e3d68574d297922a47c4034",
        "files": [
          "MagickCore/blob-private.h",
          "MagickCore/blob.c",
          "MagickCore/profile.c",
          "MagickCore/property.c",
          "coders/bmp.c",
          "coders/cin.c",
          "coders/dcm.c",
          "coders/fits.c",
          "coders/gif.c",
          "coders/icon.c",
          "coders/jnx.c",
          "coders/meta.c",
          "coders/pdb.c",
          "coders/pes.c",
          "coders/pict.c",
          "coders/psd.c",
          "coders/rla.c",
          "coders/rle.c",
          "coders/sgi.c",
          "coders/viff.c",
          "coders/xcf.c"
        ],
        "message": "Support signed blob reads",
        "before_after_code_files": [
          "MagickCore/blob-private.h||MagickCore/blob-private.h",
          "MagickCore/blob.c||MagickCore/blob.c",
          "MagickCore/profile.c||MagickCore/profile.c",
          "MagickCore/property.c||MagickCore/property.c",
          "coders/bmp.c||coders/bmp.c",
          "coders/cin.c||coders/cin.c",
          "coders/dcm.c||coders/dcm.c",
          "coders/fits.c||coders/fits.c",
          "coders/gif.c||coders/gif.c",
          "coders/icon.c||coders/icon.c",
          "coders/jnx.c||coders/jnx.c",
          "coders/meta.c||coders/meta.c",
          "coders/pdb.c||coders/pdb.c",
          "coders/pes.c||coders/pes.c",
          "coders/pict.c||coders/pict.c",
          "coders/psd.c||coders/psd.c",
          "coders/rla.c||coders/rla.c",
          "coders/rle.c||coders/rle.c",
          "coders/sgi.c||coders/sgi.c",
          "coders/viff.c||coders/viff.c",
          "coders/xcf.c||coders/xcf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/profile.c||MagickCore/profile.c",
            "MagickCore/property.c||MagickCore/property.c"
          ],
          "candidate": [
            "MagickCore/profile.c||MagickCore/profile.c",
            "MagickCore/property.c||MagickCore/property.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/blob-private.h||MagickCore/blob-private.h": [
          "File: MagickCore/blob-private.h -> MagickCore/blob-private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   EOFBlob(const Image *),",
          "82:   ReadBlobByte(Image *);",
          "85:   CloseBlob(Image *),",
          "86:   DiscardBlobBytes(Image *,const MagickSizeType),",
          "87:   OpenBlob(const ImageInfo *,Image *,const BlobMode,ExceptionInfo *),",
          "",
          "[Removed Lines]",
          "84: extern MagickExport  MagickBooleanType",
          "",
          "[Added Lines]",
          "84: extern MagickExport MagickBooleanType",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   ReadBlobLongLong(Image *),",
          "97:   ReadBlobMSBLongLong(Image *);",
          "99: extern MagickExport ssize_t",
          "100:   ReadBlob(Image *,const size_t,void *),",
          "101:   WriteBlob(Image *,const size_t,const void *),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: extern MagickExport signed int",
          "100:   ReadBlobLSBSignedLong(Image *),",
          "101:   ReadBlobMSBSignedLong(Image *),",
          "102:   ReadBlobSignedLong(Image *);",
          "104: extern MagickExport signed short",
          "105:   ReadBlobLSBSignedShort(Image *),",
          "106:   ReadBlobMSBSignedShort(Image *),",
          "107:   ReadBlobSignedShort(Image *);",
          "",
          "---------------"
        ],
        "MagickCore/blob.c||MagickCore/blob.c": [
          "File: MagickCore/blob.c -> MagickCore/blob.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3095: %                                                                             %",
          "3096: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3097: %",
          "3100: %",
          "3101: %  The format of the ReadBlobFloat method is:",
          "3102: %",
          "",
          "[Removed Lines]",
          "3098: %  ReadBlobFloat() reads a float value as a 32-bit quantity in the byte-order",
          "3099: %  specified by the endian member of the image structure.",
          "",
          "[Added Lines]",
          "3098: %  ReadBlobFloat() reads a float value as a 32-bit quantity in the byte-order",
          "3099: %  specified by the endian member of the image structure.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3133: %                                                                             %",
          "3134: %                                                                             %",
          "3135: %                                                                             %",
          "3137: %",
          "3138: %  ReadBlobLong() reads a ssize_t value as a 32-bit quantity in the byte-order",
          "3139: %  specified by the endian member of the image structure.",
          "3140: %",
          "3141: %  The format of the ReadBlobLong method is:",
          "3143: %      unsigned int ReadBlobLong(Image *image)",
          "3144: %",
          "3145: %  A description of each parameter follows.",
          "3146: %",
          "",
          "[Removed Lines]",
          "3136: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3142: %",
          "",
          "[Added Lines]",
          "3136: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3142: %",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3236:       value|=((MagickSizeType) (*p++)) << 40;",
          "3237:       value|=((MagickSizeType) (*p++)) << 48;",
          "3238:       value|=((MagickSizeType) (*p++)) << 56;",
          "3240:     }",
          "3241:   value=((MagickSizeType) (*p++)) << 56;",
          "3242:   value|=((MagickSizeType) (*p++)) << 48;",
          "",
          "[Removed Lines]",
          "3239:       return(value & MagickULLConstant(0xffffffffffffffff));",
          "",
          "[Added Lines]",
          "3239:       return(value & MagickULLConstant(0xffffffffffffffff));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3254: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3255: %                                                                             %",
          "3259: %                                                                             %",
          "3263: %",
          "3264: %  ReadBlobShort() reads a short value as a 16-bit quantity in the byte-order",
          "3265: %  specified by the endian member of the image structure.",
          "3266: %",
          "",
          "[Removed Lines]",
          "3256: %                                                                             %",
          "3257: %                                                                             %",
          "3258: +  R e a d B l o b S h o r t                                                  %",
          "3260: %                                                                             %",
          "3261: %                                                                             %",
          "3262: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "",
          "[Added Lines]",
          "3256: %                                                                             %",
          "3257: %                                                                             %",
          "3258: +  R e a d B l o b S h o r t                                                  %",
          "3260: %                                                                             %",
          "3261: %                                                                             %",
          "3262: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3273: %    o image: the image.",
          "3274: %",
          "3277: {",
          "3278:   register const unsigned char",
          "",
          "[Removed Lines]",
          "3276: MagickExport unsigned short ReadBlobShort(Image *image)",
          "",
          "[Added Lines]",
          "3276: MagickExport unsigned short ReadBlobShort(Image *image)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3309: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3310: %                                                                             %",
          "3311: %                                                                             %",
          "3314: %                                                                             %",
          "3315: %                                                                             %",
          "3316: %                                                                             %",
          "3317: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "",
          "[Removed Lines]",
          "3312: %                                                                             %",
          "3313: +  R e a d B l o b L S B L o n g                                              %",
          "",
          "[Added Lines]",
          "3312: %                                                                             %",
          "3313: +  R e a d B l o b L S B L o n g                                              %",
          "3314: %                                                                             %",
          "3315: %                                                                             %",
          "3316: %                                                                             %",
          "3317: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3318: %",
          "3319: %  ReadBlobLSBLong() reads a unsigned int value as a 32-bit quantity in",
          "3320: %  least-significant byte first order.",
          "3321: %",
          "3322: %  The format of the ReadBlobLSBLong method is:",
          "3323: %",
          "3324: %      unsigned int ReadBlobLSBLong(Image *image)",
          "3325: %",
          "3326: %  A description of each parameter follows.",
          "3327: %",
          "3328: %    o image: the image.",
          "3329: %",
          "3331: MagickExport unsigned int ReadBlobLSBLong(Image *image)",
          "3332: {",
          "3333:   register const unsigned char",
          "3336:   register unsigned int",
          "3337:     value;",
          "3339:   ssize_t",
          "3340:     count;",
          "3342:   unsigned char",
          "3343:     buffer[4];",
          "3345:   assert(image != (Image *) NULL);",
          "3346:   assert(image->signature == MagickCoreSignature);",
          "3348:   p=(const unsigned char *) ReadBlobStream(image,4,buffer,&count);",
          "3349:   if (count != 4)",
          "3350:     return(0U);",
          "3351:   value=(unsigned int) (*p++);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3365: %                                                                             %",
          "3366: %                                                                             %",
          "3367: %                                                                             %",
          "3368: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3369: %",
          "3370: %  ReadBlobLSBShort() reads a short value as a 16-bit quantity in",
          "3371: %  least-significant byte first order.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3406: %                                                                             %",
          "3407: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3408: %",
          "3409: %  ReadBlobLSBShort() reads a short value as a 16-bit quantity in",
          "3410: %  least-significant byte first order.",
          "3411: %",
          "3412: %  The format of the ReadBlobLSBShort method is:",
          "3413: %",
          "3414: %      unsigned short ReadBlobLSBShort(Image *image)",
          "3415: %",
          "3416: %  A description of each parameter follows.",
          "3417: %",
          "3418: %    o image: the image.",
          "3419: %",
          "3421: MagickExport unsigned short ReadBlobLSBShort(Image *image)",
          "3422: {",
          "3423:   register const unsigned char",
          "3426:   register unsigned int",
          "3427:     value;",
          "3429:   ssize_t",
          "3430:     count;",
          "3432:   unsigned char",
          "3433:     buffer[2];",
          "3435:   assert(image != (Image *) NULL);",
          "3436:   assert(image->signature == MagickCoreSignature);",
          "3438:   p=(const unsigned char *) ReadBlobStream(image,2,buffer,&count);",
          "3439:   if (count != 2)",
          "3440:     return((unsigned short) 0U);",
          "3441:   value=(unsigned int) (*p++);",
          "3442:   value|=((unsigned int) ((*p++)) << 8);",
          "3443:   return((unsigned short) (value & 0xffff));",
          "3444: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3517: %                                                                             %",
          "3518: %                                                                             %",
          "3519: +  R e a d B l o b M S B S h o r t                                            %",
          "3520: %                                                                             %",
          "3521: %                                                                             %",
          "3522: %                                                                             %",
          "3523: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3524: %",
          "3525: %  ReadBlobMSBShort() reads a short value as a 16-bit quantity in",
          "3526: %  most-significant byte first order.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3594: %                                                                             %",
          "3595: %                                                                             %",
          "3596: %                                                                             %",
          "3597: +  R e a d B l o b M S B S h o r t                                            %",
          "3598: %                                                                             %",
          "3599: %                                                                             %",
          "3600: %                                                                             %",
          "3601: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3602: %",
          "3603: %  ReadBlobMSBShort() reads a short value as a 16-bit quantity in",
          "3604: %  most-significant byte first order.",
          "3605: %",
          "3606: %  The format of the ReadBlobMSBShort method is:",
          "3607: %",
          "3608: %      unsigned short ReadBlobMSBShort(Image *image)",
          "3609: %",
          "3610: %  A description of each parameter follows.",
          "3611: %",
          "3612: %    o image: the image.",
          "3613: %",
          "3615: MagickExport unsigned short ReadBlobMSBShort(Image *image)",
          "3616: {",
          "3617:   register const unsigned char",
          "3620:   register unsigned int",
          "3621:     value;",
          "3623:   ssize_t",
          "3624:     count;",
          "3626:   unsigned char",
          "3627:     buffer[2];",
          "3629:   assert(image != (Image *) NULL);",
          "3630:   assert(image->signature == MagickCoreSignature);",
          "3632:   p=(const unsigned char *) ReadBlobStream(image,2,buffer,&count);",
          "3633:   if (count != 2)",
          "3634:     return((unsigned short) 0U);",
          "3635:   value=(unsigned int) ((*p++) << 8);",
          "3636:   value|=(unsigned int) (*p++);",
          "3637:   return((unsigned short) (value & 0xffff));",
          "3638: }",
          "3642: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3643: %                                                                             %",
          "3644: %                                                                             %",
          "3645: %                                                                             %",
          "3646: +  R e a d B l o b M S B S i g n e d L o n g                                  %",
          "3647: %                                                                             %",
          "3648: %                                                                             %",
          "3649: %                                                                             %",
          "3650: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3651: %",
          "3652: %  ReadBlobMSBSignedLong() reads a signed int value as a 32-bit quantity in",
          "3653: %  most-significant byte-order.",
          "3654: %",
          "3655: %  The format of the ReadBlobMSBSignedLong method is:",
          "3656: %",
          "3657: %      signed int ReadBlobMSBSignedLong(Image *image)",
          "3658: %",
          "3659: %  A description of each parameter follows.",
          "3660: %",
          "3661: %    o image: the image.",
          "3662: %",
          "3664: MagickExport signed int ReadBlobMSBSignedLong(Image *image)",
          "3665: {",
          "3666:   union",
          "3667:   {",
          "3668:     unsigned int",
          "3669:       unsigned_value;",
          "3671:     signed int",
          "3672:       signed_value;",
          "3673:   } quantum;",
          "3675:   quantum.unsigned_value=ReadBlobMSBLong(image);",
          "3676:   return(quantum.signed_value);",
          "3677: }",
          "3681: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3682: %                                                                             %",
          "3683: %                                                                             %",
          "3684: %                                                                             %",
          "3685: +  R e a d B l o b M S B S i g n e d S h o r t                                %",
          "3686: %                                                                             %",
          "3687: %                                                                             %",
          "3688: %                                                                             %",
          "3689: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3690: %",
          "3691: %  ReadBlobMSBSignedShort() reads a signed short value as a 16-bit quantity in",
          "3692: %  most-significant byte-order.",
          "3693: %",
          "3694: %  The format of the ReadBlobMSBSignedShort method is:",
          "3695: %",
          "3696: %      signed short ReadBlobMSBSignedShort(Image *image)",
          "3697: %",
          "3698: %  A description of each parameter follows.",
          "3699: %",
          "3700: %    o image: the image.",
          "3701: %",
          "3703: MagickExport signed short ReadBlobMSBSignedShort(Image *image)",
          "3704: {",
          "3705:   union",
          "3706:   {",
          "3707:     unsigned short",
          "3708:       unsigned_value;",
          "3710:     signed short",
          "3711:       signed_value;",
          "3712:   } quantum;",
          "3714:   quantum.unsigned_value=ReadBlobMSBShort(image);",
          "3715:   return(quantum.signed_value);",
          "3716: }",
          "3720: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3721: %                                                                             %",
          "3722: %                                                                             %",
          "3723: %                                                                             %",
          "3724: +  R e a d B l o b S i g n e d L o n g                                        %",
          "3725: %                                                                             %",
          "3726: %                                                                             %",
          "3727: %                                                                             %",
          "3728: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "3729: %",
          "3730: %  ReadBlobSignedLong() reads a signed int value as a 32-bit quantity in the",
          "3731: %  byte-order specified by the endian member of the image structure.",
          "3732: %",
          "3733: %  The format of the ReadBlobSignedLong method is:",
          "3734: %",
          "3735: %      signed int ReadBlobSignedLong(Image *image)",
          "3736: %",
          "3737: %  A description of each parameter follows.",
          "3738: %",
          "3739: %    o image: the image.",
          "3740: %",
          "3742: MagickExport signed int ReadBlobSignedLong(Image *image)",
          "3743: {",
          "3744:   union",
          "3745:   {",
          "3746:     unsigned int",
          "3747:       unsigned_value;",
          "3749:     signed int",
          "",
          "---------------"
        ],
        "MagickCore/profile.c||MagickCore/profile.c": [
          "File: MagickCore/profile.c -> MagickCore/profile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1714: %    o image: the image.",
          "1715: %",
          "1718: static inline int ReadProfileByte(unsigned char **p,size_t *length)",
          "1719: {",
          "1720:   int",
          "1721:     c;",
          "1723:   if (*length < 1)",
          "1724:     return(EOF);",
          "1725:   c=(int) (*(*p)++);",
          "1727:   return(c);",
          "1728: }",
          "1731:   unsigned char *buffer)",
          "1732: {",
          "1734:     value;",
          "1736:   if (endian == LSBEndian)",
          "1737:     {",
          "1738:       value=(unsigned short) ((buffer[1] << 8) | buffer[0]);",
          "",
          "[Removed Lines]",
          "1726:   (*length)--;",
          "1730: static inline unsigned short ReadProfileShort(const EndianType endian,",
          "1733:   unsigned short",
          "",
          "[Added Lines]",
          "1720:   int",
          "1721:     c;",
          "1723:   if (*length < 1)",
          "1724:     return(EOF);",
          "1725:   c=(int) (*(*p)++);",
          "1726:   (*length)--;",
          "1727:   return(c);",
          "1728: }",
          "1735:     unsigned int",
          "1736:       unsigned_value;",
          "1740:   } quantum;",
          "1747:       value=(unsigned short) ((buffer[1] << 8) | buffer[0]);",
          "1748:       quantum.unsigned_value=(value & 0xffff);",
          "1749:       return(quantum.signed_value);",
          "1750:     }",
          "1751:   value=(unsigned short) ((((unsigned char *) buffer)[0] << 8) |",
          "1752:     ((unsigned char *) buffer)[1]);",
          "1753:   quantum.unsigned_value=(value & 0xffff);",
          "1754:   return(quantum.signed_value);",
          "1755: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1740:     }",
          "1741:   value=(unsigned short) ((((unsigned char *) buffer)[0] << 8) |",
          "1742:     ((unsigned char *) buffer)[1]);",
          "1744: }",
          "1746: static inline unsigned int ReadProfileLong(const EndianType endian,",
          "1748: {",
          "1749:   unsigned int",
          "1753:     {",
          "1754:       value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |",
          "1755:         (buffer[1] << 8 ) | (buffer[0]));",
          "",
          "[Removed Lines]",
          "1743:   return((unsigned short) (value & 0xffff));",
          "1747:   unsigned char *buffer)",
          "1750:     value;",
          "1752:   if (endian == LSBEndian)",
          "",
          "[Added Lines]",
          "1763:       unsigned_value;",
          "1769:   unsigned int",
          "1772:   if (endian == LSBEndian)",
          "1774:       value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1760:   return((unsigned int) (value & 0xffffffff));",
          "1761: }",
          "1764: {",
          "1765:   unsigned int",
          "1768:   if (*length < 4)",
          "1769:     return(0);",
          "",
          "[Removed Lines]",
          "1763: static inline unsigned int ReadProfileMSBLong(unsigned char **p,size_t *length)",
          "1766:     value;",
          "",
          "[Added Lines]",
          "1785: static inline signed int ReadProfileMSBLong(unsigned char **p,size_t *length)",
          "1788:     value;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1958:         return(MagickFalse);",
          "1959:       id=(ssize_t) ReadProfileShort(LSBEndian,exif);",
          "1960:     }",
          "1962:   if (id == 0x4949)",
          "1963:     endian=LSBEndian;",
          "1964:   else",
          "",
          "[Removed Lines]",
          "1961:   endian=LSBEndian;",
          "",
          "[Added Lines]",
          "1983:   endian=LSBEndian;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1999:       register unsigned char",
          "2003:       size_t",
          "2004:         number_bytes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2010:       q=(unsigned char *) (directory+2+(12*entry));",
          "2011:       tag_value=(ssize_t) ReadProfileShort(endian,q);",
          "2012:       format=(ssize_t) ReadProfileShort(endian,q+2);",
          "2014:         break;",
          "2015:       components=(ssize_t) ((int) ReadProfileLong(endian,q+4));",
          "2016:       number_bytes=(size_t) components*format_bytes[format];",
          "",
          "[Removed Lines]",
          "2013:       if ((format-1) >= EXIF_NUM_FORMATS)",
          "",
          "[Added Lines]",
          "2035:       if ((format-1) >= EXIF_NUM_FORMATS)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2057:         }",
          "2058:         case 0x0128:",
          "2059:         {",
          "2061:             {",
          "2062:               (void) WriteProfileLong(endian,(size_t) (image->units+1),p);",
          "2063:               break;",
          "",
          "[Removed Lines]",
          "2060:           if (number_bytes == 4)",
          "",
          "[Added Lines]",
          "2082:           if (number_bytes == 4)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2069:           break;",
          "2070:       }",
          "2071:       if ((tag_value == TAG_EXIF_OFFSET) || (tag_value == TAG_INTEROP_OFFSET))",
          "2074:           if (((size_t) offset < length) && (level < (MaxDirectoryStack-2)))",
          "2075:             {",
          "2076:               directory_stack[level].directory=directory;",
          "",
          "[Removed Lines]",
          "2072:         {",
          "2073:           offset=(ssize_t) ((int) ReadProfileLong(endian,p));",
          "",
          "[Added Lines]",
          "2094:         {",
          "2095:           offset=(ssize_t)  ReadProfileLong(endian,p);",
          "",
          "---------------"
        ],
        "MagickCore/property.c||MagickCore/property.c": [
          "File: MagickCore/property.c -> MagickCore/property.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "498:   int",
          "499:     c;",
          "502:     return(EOF);",
          "503:   c=(int) (*(*p)++);",
          "504:   (*length)--;",
          "505:   return(c);",
          "506: }",
          "",
          "[Removed Lines]",
          "501:   if (*length < 1)",
          "",
          "[Added Lines]",
          "501:   if (*length < 1)",
          "504:   (*length)--;",
          "505:   return(c);",
          "506: }",
          "508: static inline signed int ReadPropertyMSBLong(const unsigned char **p,",
          "509:   size_t *length)",
          "510: {",
          "511:   union",
          "512:   {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "514:   register ssize_t",
          "515:     i;",
          "518:     buffer[4];",
          "520:   size_t",
          "",
          "[Removed Lines]",
          "517:   unsigned char",
          "",
          "[Added Lines]",
          "526:   unsigned char",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "525:   for (i=0; i < 4; i++)",
          "526:   {",
          "527:     c=(int) (*(*p)++);",
          "529:     buffer[i]=(unsigned char) c;",
          "530:   }",
          "532:   value|=buffer[1] << 16;",
          "533:   value|=buffer[2] << 8;",
          "534:   value|=buffer[3];",
          "535:   return(value & 0xffffffff);",
          "536: }",
          "",
          "[Removed Lines]",
          "528:     (*length)--;",
          "531:   value=(size_t) (buffer[0] << 24);",
          "",
          "[Added Lines]",
          "537:     (*length)--;",
          "538:     buffer[i]=(unsigned char) c;",
          "541:   value|=buffer[1] << 16;",
          "544:   quantum.unsigned_value=(value & 0xffffffff);",
          "545:   return(quantum.signed_value);",
          "546: }",
          "548: static inline signed short ReadPropertyMSBShort(const unsigned char **p,",
          "549:   size_t *length)",
          "550: {",
          "551:   union",
          "552:   {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "553:   if (*length < 2)",
          "554:     return((unsigned short) ~0);",
          "555:   for (i=0; i < 2; i++)",
          "557:     c=(int) (*(*p)++);",
          "558:     (*length)--;",
          "559:     buffer[i]=(unsigned char) c;",
          "",
          "[Removed Lines]",
          "556:   {",
          "",
          "[Added Lines]",
          "575:   {",
          "576:     c=(int) (*(*p)++);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "621:   while ((length > 0) && (status == MagickFalse))",
          "622:   {",
          "623:     if (ReadPropertyByte(&info,&length) != (unsigned char) '8')",
          "625:     if (ReadPropertyByte(&info,&length) != (unsigned char) 'B')",
          "626:       continue;",
          "627:     if (ReadPropertyByte(&info,&length) != (unsigned char) 'I')",
          "",
          "[Removed Lines]",
          "624:       continue;",
          "",
          "[Added Lines]",
          "644:       continue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "633:       continue;",
          "634:     if (id > (ssize_t) stop)",
          "635:       continue;",
          "638:     count=(ssize_t) ReadPropertyByte(&info,&length);",
          "639:     if ((count != 0) && ((size_t) count <= length))",
          "640:       {",
          "",
          "[Removed Lines]",
          "636:     if (resource != (char *) NULL)",
          "637:       resource=DestroyString(resource);",
          "",
          "[Added Lines]",
          "656:     if (resource != (char *) NULL)",
          "657:       resource=DestroyString(resource);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "644:             sizeof(*resource));",
          "645:         if (resource != (char *) NULL)",
          "646:           {",
          "648:               resource[i]=(char) ReadPropertyByte(&info,&length);",
          "649:             resource[count]='\\0';",
          "650:           }",
          "",
          "[Removed Lines]",
          "647:             for (i=0; i < (ssize_t) count; i++)",
          "",
          "[Added Lines]",
          "667:             for (i=0; i < (ssize_t) count; i++)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "704:           }",
          "705:         attribute=DestroyString(attribute);",
          "706:         status=MagickTrue;",
          "708:   }",
          "709:   if (resource != (char *) NULL)",
          "710:     resource=DestroyString(resource);",
          "711:   return(status);",
          "712: }",
          "714: static inline unsigned short ReadPropertyShort(const EndianType endian,",
          "715:   const unsigned char *buffer)",
          "717:   unsigned short",
          "718:     value;",
          "721:     {",
          "722:       value=(unsigned short) ((buffer[1] << 8) | buffer[0]);",
          "724:     }",
          "725:   value=(unsigned short) ((((unsigned char *) buffer)[0] << 8) |",
          "727:   return((unsigned short) (value & 0xffff));",
          "728: }",
          "730: static inline size_t ReadPropertyLong(const EndianType endian,",
          "732: {",
          "734:     value;",
          "736:   if (endian == LSBEndian)",
          "738:       value=(size_t) ((buffer[3] << 24) | (buffer[2] << 16) |",
          "739:         (buffer[1] << 8 ) | (buffer[0]));",
          "740:       return((size_t) (value & 0xffffffff));",
          "",
          "[Removed Lines]",
          "707:       }",
          "716: {",
          "720:   if (endian == LSBEndian)",
          "723:       return((unsigned short) (value & 0xffff));",
          "726:     ((unsigned char *) buffer)[1]);",
          "731:   const unsigned char *buffer)",
          "733:   size_t",
          "737:     {",
          "",
          "[Added Lines]",
          "727:       }",
          "730:     resource=DestroyString(resource);",
          "731:   return(status);",
          "732: }",
          "734: static inline signed short ReadPropertyShort(const EndianType endian,",
          "735:   const unsigned char *buffer)",
          "736: {",
          "737:   union",
          "738:   {",
          "746:   unsigned short",
          "750:     {",
          "751:       value=(unsigned short) ((buffer[1] << 8) | buffer[0]);",
          "754:     }",
          "757:   quantum.unsigned_value=(value & 0xffff);",
          "758:   return(quantum.signed_value);",
          "759: }",
          "761: static inline signed int ReadPropertyLong(const EndianType endian,",
          "762:   const unsigned char *buffer)",
          "763: {",
          "764:   union",
          "765:   {",
          "766:     unsigned int",
          "771:   } quantum;",
          "773:   unsigned int",
          "774:     value;",
          "776:   if (endian == LSBEndian)",
          "778:       value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |",
          "779:         (buffer[1] << 8 ) | (buffer[0]));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1259:     if (ReadPropertyByte(&exif,&length) != 0x66)",
          "1260:       continue;",
          "1261:     if (ReadPropertyByte(&exif,&length) != 0x00)",
          "1263:     if (ReadPropertyByte(&exif,&length) != 0x00)",
          "1264:       continue;",
          "1265:     break;",
          "",
          "[Removed Lines]",
          "1262:       continue;",
          "",
          "[Added Lines]",
          "1304:       continue;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1273:   else",
          "1274:     if (id == 0x4D4D)",
          "1275:       endian=MSBEndian;",
          "1277:       return(MagickFalse);",
          "1278:   if (ReadPropertyShort(endian,exif+2) != 0x002a)",
          "1279:     return(MagickFalse);",
          "",
          "[Removed Lines]",
          "1276:     else",
          "",
          "[Added Lines]",
          "1318:     else",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1303:         level--;",
          "1304:         directory=directory_stack[level].directory;",
          "1305:         entry=directory_stack[level].entry;",
          "1307:       }",
          "1308:     if ((directory < exif) || (directory > (exif+length-2)))",
          "1309:       break;",
          "",
          "[Removed Lines]",
          "1306:         tag_offset=directory_stack[level].offset;",
          "",
          "[Added Lines]",
          "1348:         tag_offset=directory_stack[level].offset;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1321:         format;",
          "1323:       ssize_t",
          "1327:       q=(unsigned char *) (directory+(12*entry)+2);",
          "1329:         break;",
          "1330:       (void) AddValueToSplayTree(exif_resources,q,q);",
          "1331:       tag_value=(ssize_t) ((int) ReadPropertyShort(endian,q)+tag_offset);",
          "",
          "[Removed Lines]",
          "1324:         number_bytes,",
          "1325:         components;",
          "1328:       if (GetValueFromSplayTree(exif_resources,q) == q)",
          "",
          "[Added Lines]",
          "1366:         number_bytes,",
          "1367:         components;",
          "1370:       if (GetValueFromSplayTree(exif_resources,q) == q)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1339:       if (number_bytes <= 4)",
          "1340:         p=q+8;",
          "1341:       else",
          "1343:           ssize_t",
          "1344:             offset;",
          "",
          "[Removed Lines]",
          "1342:         {",
          "",
          "[Added Lines]",
          "1384:         {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1382:               break;",
          "1383:             }",
          "1384:             case EXIF_FMT_USHORT:",
          "1386:               EXIFMultipleValues(2,\"%hu\",ReadPropertyShort(endian,p1));",
          "1387:               break;",
          "1388:             }",
          "1389:             case EXIF_FMT_ULONG:",
          "1390:             {",
          "1392:                 ((int) ReadPropertyLong(endian,p1)));",
          "1393:               break;",
          "1394:             }",
          "1395:             case EXIF_FMT_SLONG:",
          "1396:             {",
          "1399:               break;",
          "1400:             }",
          "1401:             case EXIF_FMT_URATIONAL:",
          "1402:             {",
          "1403:               EXIFMultipleFractions(8,\"%.20g/%.20g\",(double)",
          "1406:               break;",
          "1407:             }",
          "1408:             case EXIF_FMT_SRATIONAL:",
          "",
          "[Removed Lines]",
          "1385:             {",
          "1391:               EXIFMultipleValues(4,\"%.20g\",(double)",
          "1397:               EXIFMultipleValues(4,\"%.20g\",(double)",
          "1398:                 ((int) ReadPropertyLong(endian,p1)));",
          "1404:                 ((int) ReadPropertyLong(endian,p1)),(double)",
          "1405:                 ((int) ReadPropertyLong(endian,p1+4)));",
          "",
          "[Added Lines]",
          "1427:             {",
          "1433:               EXIFMultipleValues(4,\"%.20g\",(double)",
          "1439:               EXIFMultipleValues(4,\"%.20g\",(double)",
          "1440:                 ReadPropertyLong(endian,p1));",
          "1446:                 ReadPropertyLong(endian,p1),(double)",
          "1447:                 ReadPropertyLong(endian,p1+4));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1509:               key=DestroyString(key);",
          "1510:               status=MagickTrue;",
          "1511:             }",
          "1513:         if ((tag_value == TAG_EXIF_OFFSET) ||",
          "1514:             (tag_value == TAG_INTEROP_OFFSET) || (tag_value == TAG_GPS_OFFSET))",
          "1515:           {",
          "",
          "[Removed Lines]",
          "1512:         }",
          "",
          "[Added Lines]",
          "1554:         }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1528:                 entry++;",
          "1529:                 directory_stack[level].entry=entry;",
          "1530:                 directory_stack[level].offset=tag_offset;",
          "1533:                 directory_stack[level].offset=tag_offset1;",
          "1534:                 directory_stack[level].entry=0;",
          "1535:                 level++;",
          "",
          "[Removed Lines]",
          "1531:                 level++;",
          "1532:                 directory_stack[level].directory=exif+offset;",
          "",
          "[Added Lines]",
          "1573:                 level++;",
          "1574:                 directory_stack[level].directory=exif+offset;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1756:     The clipping path format is defined in \"Adobe Photoshop File",
          "1757:     Formats Specification\" version 6.0 downloadable from adobe.com.",
          "1760:   (void) ResetMagickMemory(first,0,sizeof(first));",
          "1761:   (void) ResetMagickMemory(last,0,sizeof(last));",
          "1762:   knot_count=0;",
          "",
          "[Removed Lines]",
          "1759:   (void) ResetMagickMemory(point,0,sizeof(point));",
          "",
          "[Added Lines]",
          "1801:   (void) ResetMagickMemory(point,0,sizeof(point));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1771:       {",
          "1772:         if (knot_count != 0)",
          "1773:           {",
          "1775:             length-=MagickMin(24,(ssize_t) length);",
          "1776:             break;",
          "1777:           }",
          "",
          "[Removed Lines]",
          "1774:             blob+=24;",
          "",
          "[Added Lines]",
          "1816:             blob+=24;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1799:           }",
          "1801:           Add sub-path knot",
          "1804:         {",
          "1805:           size_t",
          "1806:             xx,",
          "",
          "[Removed Lines]",
          "1803:         for (i=0; i < 3; i++)",
          "",
          "[Added Lines]",
          "1845:         for (i=0; i < 3; i++)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1948:     \"stroke-width:0;stroke-antialiasing:false\\\" d=\\\"\\n\"),",
          "1949:     (double) columns,(double) rows);",
          "1950:   (void) ConcatenateString(&path,message);",
          "1952:   (void) ResetMagickMemory(first,0,sizeof(first));",
          "1953:   (void) ResetMagickMemory(last,0,sizeof(last));",
          "1954:   knot_count=0;",
          "",
          "[Removed Lines]",
          "1951:   (void) ResetMagickMemory(point,0,sizeof(point));",
          "",
          "[Added Lines]",
          "1993:   (void) ResetMagickMemory(point,0,sizeof(point));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1963:       {",
          "1964:         if (knot_count != 0)",
          "1965:           {",
          "1967:             length-=MagickMin(24,(ssize_t) length);",
          "1968:             break;",
          "1969:           }",
          "",
          "[Removed Lines]",
          "1966:             blob+=24;",
          "",
          "[Added Lines]",
          "2008:             blob+=24;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1991:           }",
          "1993:           Add sub-path knot",
          "1996:         {",
          "1997:           unsigned int",
          "1998:             xx,",
          "",
          "[Removed Lines]",
          "1995:         for (i=0; i < 3; i++)",
          "",
          "[Added Lines]",
          "2037:         for (i=0; i < 3; i++)",
          "",
          "---------------"
        ],
        "coders/bmp.c||coders/bmp.c": [
          "File: coders/bmp.c -> coders/bmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:               \"  Geometry: %.20gx%.20g\",(double) bmp_info.width,(double)",
          "629:               bmp_info.height);",
          "630:           }",
          "633:       {",
          "635:           Microsoft Windows BMP image file.",
          "",
          "[Removed Lines]",
          "631:       }",
          "632:     else",
          "",
          "[Added Lines]",
          "631:       }",
          "632:     else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "708:         bmp_info.green_mask=ReadBlobLSBLong(image);",
          "709:         bmp_info.blue_mask=ReadBlobLSBLong(image);",
          "710:         if (bmp_info.size > 40)",
          "712:             double",
          "713:               gamma;",
          "",
          "[Removed Lines]",
          "711:           {",
          "",
          "[Added Lines]",
          "711:           {",
          "",
          "---------------"
        ],
        "coders/cin.c||coders/cin.c": [
          "File: coders/cin.c -> coders/cin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:   offset+=4;",
          "585:   cin.data_format.channel_pad=ReadBlobLong(image);",
          "586:   offset+=4;",
          "588:     cin.data_format.reserve);",
          "590:     Image origination information.",
          "",
          "[Removed Lines]",
          "587:   offset+=ReadBlob(image,sizeof(cin.data_format.reserve),(unsigned char *)",
          "",
          "[Added Lines]",
          "587:   offset+=ReadBlob(image,sizeof(cin.data_format.reserve),(unsigned char *)",
          "",
          "---------------"
        ],
        "coders/dcm.c||coders/dcm.c": [
          "File: coders/dcm.c -> coders/dcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2761:     return(ReadBlobLSBShort(image));",
          "2762:   shift=image->depth < 16 ? 4 : 8;",
          "2763:   value=ReadDCMByte(stream_info,image) | (unsigned short)",
          "2764:     (ReadDCMByte(stream_info,image) << shift);",
          "2765:   return(value);",
          "2766: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2764:     (ReadDCMByte(stream_info,image) << shift);",
          "2765:   return(value);",
          "2766: }",
          "2768: static signed short ReadDCMSignedShort(DCMStreamInfo *stream_info,Image *image)",
          "2769: {",
          "2770:   union",
          "2771:   {",
          "2772:     unsigned short",
          "2773:       unsigned_value;",
          "2775:     signed short",
          "2776:       signed_value;",
          "2777:   } quantum;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2970:             quantum=4;",
          "2971:           }",
          "2972:       }",
          "2974:     if (quantum == 4)",
          "2976:         if (group == 0x0002)",
          "2977:           datum=(int) ReadBlobLSBLong(image);",
          "2978:         else",
          "2979:           datum=(int) ReadBlobLong(image);",
          "2980:       }",
          "2982:       if (quantum == 2)",
          "2984:           if (group == 0x0002)",
          "2985:             datum=(int) ReadBlobLSBShort(image);",
          "2986:           else",
          "",
          "[Removed Lines]",
          "2973:     datum=0;",
          "2975:       {",
          "2981:     else",
          "2983:         {",
          "",
          "[Added Lines]",
          "2988:     datum=0;",
          "2990:       {",
          "2996:     else",
          "2998:         {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3039:         break;",
          "3040:       }",
          "3044:     data=(unsigned char *) NULL;",
          "3045:     if ((length == 1) && (quantum == 1))",
          "3046:       datum=(int) ReadBlobByte(image);",
          "3048:       if ((length == 1) && (quantum == 2))",
          "3050:           if (group == 0x0002)",
          "3051:             datum=(int) ReadBlobLSBShort(image);",
          "3052:           else",
          "3053:             datum=(int) ReadBlobShort(image);",
          "3054:         }",
          "3056:         if ((length == 1) && (quantum == 4))",
          "3058:             if (group == 0x0002)",
          "3059:               datum=(int) ReadBlobLSBLong(image);",
          "3060:             else",
          "",
          "[Removed Lines]",
          "3042:       Allocate space and read an array.",
          "3047:     else",
          "3049:         {",
          "3055:       else",
          "3057:           {",
          "",
          "[Added Lines]",
          "3057:       Allocate space and read an array.",
          "3062:     else",
          "3064:         {",
          "3070:       else",
          "3072:           {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3559:             offset;",
          "3561:           stream_info->offsets=(ssize_t *) AcquireQuantumMemory(",
          "3563:           if (stream_info->offsets == (ssize_t *) NULL)",
          "3564:             ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "3565:           for (i=0; i < (ssize_t) stream_info->offset_count; i++)",
          "",
          "[Removed Lines]",
          "3562:             stream_info->offset_count,sizeof(*stream_info->offsets));",
          "",
          "[Added Lines]",
          "3577:             stream_info->offset_count,sizeof(*stream_info->offsets));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3689:             offset;",
          "3691:           stream_info->offsets=(ssize_t *) AcquireQuantumMemory(",
          "3693:           if (stream_info->offsets == (ssize_t *) NULL)",
          "3694:             ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "3695:           for (i=0; i < (ssize_t) stream_info->offset_count; i++)",
          "",
          "[Removed Lines]",
          "3692:             stream_info->offset_count,sizeof(*stream_info->offsets));",
          "",
          "[Added Lines]",
          "3707:             stream_info->offset_count,sizeof(*stream_info->offsets));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3774:         stream_info->segment_count=ReadBlobLSBLong(image);",
          "3775:         if (stream_info->segment_count > 1)",
          "3776:           {",
          "3778:             depth=8;",
          "3779:           }",
          "3780:         for (i=0; i < 15; i++)",
          "",
          "[Removed Lines]",
          "3777:             bytes_per_pixel=1;",
          "",
          "[Added Lines]",
          "3792:             bytes_per_pixel=1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3879:                   pixel_value=polarity != MagickFalse ?",
          "3880:                     ((int) max_value-ReadDCMByte(stream_info,image)) :",
          "3881:                     ReadDCMByte(stream_info,image);",
          "3884:                     {",
          "3885:                       if (signed_data)",
          "3886:                         pixel_value=(signed short) ReadDCMShort(stream_info,",
          "",
          "[Removed Lines]",
          "3882:                 else",
          "3883:                   if ((bits_allocated != 12) || (significant_bits != 12))",
          "",
          "[Added Lines]",
          "3897:                 else",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3893:                   else",
          "3894:                     {",
          "3895:                       if ((i & 0x01) != 0)",
          "3897:                           byte;",
          "3898:                       else",
          "3899:                         {",
          "",
          "[Removed Lines]",
          "3896:                         pixel_value=(ReadDCMByte(stream_info,image) << 8) |",
          "",
          "[Added Lines]",
          "3910:                         pixel_value=(ReadDCMByte(stream_info,image) << 8) |",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4004:                     else",
          "4005:                       {",
          "4006:                         if ((i & 0x01) != 0)",
          "4009:                         else",
          "4010:                           {",
          "4011:                             pixel_value=(int) ReadDCMShort(stream_info,",
          "",
          "[Removed Lines]",
          "4007:                           pixel_value=(ReadDCMByte(stream_info,image) << 8) |",
          "4008:                             byte;",
          "",
          "[Added Lines]",
          "4021:                           pixel_value=(ReadDCMByte(stream_info,image) << 8) |",
          "",
          "---------------"
        ],
        "coders/fits.c||coders/fits.c": [
          "File: coders/fits.c -> coders/fits.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   {",
          "154:     case 1:",
          "155:       return((double) ReadBlobByte(image));",
          "157:       return((double) ((short) ReadBlobShort(image)));",
          "158:     case 4:",
          "159:     {",
          "",
          "[Removed Lines]",
          "156:     case 2:",
          "",
          "[Added Lines]",
          "156:     case 2:",
          "",
          "---------------"
        ],
        "coders/gif.c||coders/gif.c": [
          "File: coders/gif.c -> coders/gif.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "856: %                                                                             %",
          "857: %                                                                             %",
          "858: %                                                                             %",
          "860: %",
          "861: %  ReadBlobBlock() reads data from the image file and returns it.  The",
          "862: %  amount of data is determined by first reading a count byte.  The number",
          "",
          "[Removed Lines]",
          "859: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "",
          "[Added Lines]",
          "859: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
          "",
          "---------------"
        ],
        "coders/icon.c||coders/icon.c": [
          "File: coders/icon.c -> coders/icon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:       Verify Icon identifier.",
          "328:     if (offset < 0)",
          "329:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "330:     icon_info.size=ReadBlobLSBLong(image);",
          "",
          "[Removed Lines]",
          "326:     offset=(ssize_t) SeekBlob(image,(MagickOffsetType)",
          "327:       icon_file.directory[i].offset,SEEK_SET);",
          "",
          "[Added Lines]",
          "326:     offset=(ssize_t) SeekBlob(image,(MagickOffsetType)",
          "327:       icon_file.directory[i].offset,SEEK_SET);",
          "",
          "---------------"
        ],
        "coders/jnx.c||coders/jnx.c": [
          "File: coders/jnx.c -> coders/jnx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:       image=DestroyImageList(image);",
          "170:       return((Image *) NULL);",
          "171:     }",
          "173:     Read JNX header.",
          "181:   jnx_info.northeast.y=180.0*((int) ReadBlobLSBLong(image))/0x7fffffff;",
          "182:   jnx_info.southwest.x=180.0*((int) ReadBlobLSBLong(image))/0x7fffffff;",
          "187:   jnx_info.expire=(int) ReadBlobLSBLong(image);",
          "188:   jnx_info.id=(int) ReadBlobLSBLong(image);",
          "190:   jnx_info.signature=(int) ReadBlobLSBLong(image);",
          "191:   jnx_info.offset=ReadBlobLSBLong(image);",
          "192:   if (jnx_info.version > 3)",
          "",
          "[Removed Lines]",
          "175:   (void) ResetMagickMemory(&jnx_info,0,sizeof(jnx_info));",
          "176:   jnx_info.version=(int) ReadBlobLSBLong(image);",
          "177:   if ((jnx_info.version != 3) && (jnx_info.version != 4))",
          "178:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "179:   jnx_info.serial=(int) ReadBlobLSBLong(image);",
          "180:   jnx_info.northeast.x=180.0*((int) ReadBlobLSBLong(image))/0x7fffffff;",
          "183:   jnx_info.southwest.y=180.0*((int) ReadBlobLSBLong(image))/0x7fffffff;",
          "184:   jnx_info.levels=(int) ReadBlobLSBLong(image);",
          "185:   if (jnx_info.levels > JNXMaxLevels)",
          "186:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "189:   jnx_info.crc=(int) ReadBlobLSBLong(image);",
          "",
          "[Added Lines]",
          "175:   (void) ResetMagickMemory(&jnx_info,0,sizeof(jnx_info));",
          "176:   jnx_info.version=ReadBlobLSBSignedLong(image);",
          "177:   if ((jnx_info.version != 3) && (jnx_info.version != 4))",
          "178:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "179:   jnx_info.serial=ReadBlobLSBSignedLong(image);",
          "180:   jnx_info.northeast.x=180.0*ReadBlobLSBSignedLong(image)/0x7fffffff;",
          "183:   jnx_info.southwest.y=180.0*ReadBlobLSBSignedLong(image)/0x7fffffff;",
          "184:   jnx_info.levels=ReadBlobLSBSignedLong(image);",
          "185:   if (jnx_info.levels > JNXMaxLevels)",
          "186:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "189:   jnx_info.crc=ReadBlobLSBSignedLong(image);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:       jnx_info.order=30;",
          "198:     Read JNX levels.",
          "200:   (void) ResetMagickMemory(&jnx_level_info,0,sizeof(jnx_level_info));",
          "201:   for (i=0; i < (ssize_t) jnx_info.levels; i++)",
          "203:     jnx_level_info[i].count=(int) ReadBlobLSBLong(image);",
          "204:     if (jnx_level_info[i].count > 50000)",
          "205:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "",
          "[Removed Lines]",
          "202:   {",
          "",
          "[Added Lines]",
          "202:   {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:       unsigned char",
          "266:       northeast.x=180.0*((int) ReadBlobLSBLong(image))/0x7fffffff;",
          "267:       northeast.y=180.0*((int) ReadBlobLSBLong(image))/0x7fffffff;",
          "268:       southwest.x=180.0*((int) ReadBlobLSBLong(image))/0x7fffffff;",
          "272:       tile_length=ReadBlobLSBLong(image);",
          "",
          "[Removed Lines]",
          "263:       unsigned int",
          "264:         tile_length;",
          "269:       southwest.y=180.0*((int) ReadBlobLSBLong(image))/0x7fffffff;",
          "",
          "[Added Lines]",
          "263:       unsigned int",
          "264:         tile_length;",
          "269:       southwest.y=180.0*ReadBlobLSBSignedLong(image)/0x7fffffff;",
          "",
          "---------------"
        ],
        "coders/meta.c||coders/meta.c": [
          "File: coders/meta.c -> coders/meta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   p=(unsigned char *) (*b);",
          "554:   for (q=p; ; q++)",
          "555:   {",
          "",
          "[Removed Lines]",
          "552:   len=*blen;",
          "",
          "[Added Lines]",
          "552:   len=*blen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2121:           continue;",
          "2122:       }",
          "2123:     else",
          "2125:         c=ReadBlobByte(ifile);",
          "2126:         continue;",
          "2127:       }",
          "",
          "[Removed Lines]",
          "2124:       {",
          "",
          "[Added Lines]",
          "2124:       {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2153:         PString[i] = (unsigned char) c;",
          "2154:       }",
          "2155:       PString[ plen ] = 0;",
          "2157:       {",
          "2158:         c=ReadBlobByte(ifile);",
          "2159:         if (c == EOF)",
          "",
          "[Removed Lines]",
          "2156:       if ((plen & 0x01) == 0)",
          "",
          "[Added Lines]",
          "2156:       if ((plen & 0x01) == 0)",
          "",
          "---------------"
        ],
        "coders/pdb.c||coders/pdb.c": [
          "File: coders/pdb.c -> coders/pdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:   if ((memcmp(pdb_info.type,\"vIMG\",4) != 0) ||",
          "355:       (memcmp(pdb_info.id,\"View\",4) != 0))",
          "356:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "358:     ThrowReaderException(CoderError,\"MultipleRecordListNotSupported\");",
          "360:     Read record header.",
          "",
          "[Removed Lines]",
          "357:   if (pdb_info.next_record != 0)",
          "",
          "[Added Lines]",
          "357:   if (pdb_info.next_record != 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:   img_offset=(ssize_t) ((int) ReadBlobMSBLong(image));",
          "363:   attributes=(unsigned char) ReadBlobByte(image);",
          "364:   (void) attributes;",
          "366:   if (count != 3  ||  memcmp(tag,\"\\x6f\\x80\\x00\",3) != 0)",
          "367:     ThrowReaderException(CorruptImageError,\"CorruptImage\");",
          "368:   if (pdb_info.number_records > 1)",
          "",
          "[Removed Lines]",
          "365:   count=ReadBlob(image,3,(unsigned char *) tag);",
          "",
          "[Added Lines]",
          "365:   count=ReadBlob(image,3,(unsigned char *) tag);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "385:   }",
          "387:     Read image header.",
          "389:   count=ReadBlob(image,sizeof(pdb_image.name),(unsigned char *) pdb_image.name);",
          "390:   if (count != sizeof(pdb_image.name))",
          "391:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "coders/pes.c||coders/pes.c": [
          "File: coders/pes.c -> coders/pes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:     }",
          "494:     Verify PES identifier.",
          "496:   count=ReadBlob(image,4,magick);",
          "497:   if ((count != 4) || (LocaleNCompare((char *) magick,\"#PES\",4) != 0))",
          "498:     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504:   if (EOFBlob(image) != MagickFalse)",
          "505:     ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");",
          "509:   number_colors=(size_t) ReadBlobByte(image)+1;",
          "510:   for (i=0; i < (ssize_t) number_colors; i++)",
          "",
          "[Removed Lines]",
          "507:     Get PES colors.",
          "",
          "[Added Lines]",
          "507:     Get PES colors.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:   bounds.x2=(-65535.0);",
          "534:   bounds.y2=(-65535.0);",
          "535:   i=0;",
          "538:   delta_y=0;",
          "539:   while (EOFBlob(image) != EOF)",
          "540:   {",
          "",
          "[Removed Lines]",
          "536:   j=0;",
          "537:   delta_x=0;",
          "",
          "[Added Lines]",
          "536:   j=0;",
          "537:   delta_x=0;",
          "",
          "---------------"
        ],
        "coders/pict.c||coders/pict.c": [
          "File: coders/pict.c -> coders/pict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:   jpeg=MagickFalse;",
          "936:   for (code=0; EOFBlob(image) == MagickFalse; )",
          "937:   {",
          "939:       if (image->scene >= (image_info->scene+image_info->number_scenes-1))",
          "940:         break;",
          "941:     if ((version == 1) || ((TellBlob(image) % 2) != 0))",
          "",
          "[Removed Lines]",
          "938:     if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))",
          "",
          "[Added Lines]",
          "938:     if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))",
          "",
          "---------------"
        ],
        "coders/psd.c||coders/psd.c": [
          "File: coders/psd.c -> coders/psd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1439:       {",
          "1440:         ssize_t",
          "1441:           x,",
          "1446:             \"  reading layer #%.20g\",(double) i+1);",
          "1447:         layer_info[i].page.y=(int) ReadBlobLong(image);",
          "1448:         layer_info[i].page.x=(int) ReadBlobLong(image);",
          "",
          "[Removed Lines]",
          "1442:           y;",
          "1444:         if (image->debug != MagickFalse)",
          "1445:           (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "",
          "[Added Lines]",
          "1442:           y;",
          "1444:         if (image->debug != MagickFalse)",
          "1445:           (void) LogMagickEvent(CoderEvent,GetMagickModule(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1512:                 \"    layer contains additional info\");",
          "1513:             length=ReadBlobLong(image);",
          "1514:             combined_length=length+4;",
          "1518:                   Layer mask info.",
          "",
          "[Removed Lines]",
          "1515:             if (length != 0)",
          "1516:               {",
          "",
          "[Added Lines]",
          "1515:             if (length != 0)",
          "1516:               {",
          "",
          "---------------"
        ],
        "coders/rla.c||coders/rla.c": [
          "File: coders/rla.c -> coders/rla.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:   count=ReadBlob(image,16,(unsigned char *) rla_info.gamma);",
          "228:   count=ReadBlob(image,24,(unsigned char *) rla_info.red_primary);",
          "229:   count=ReadBlob(image,24,(unsigned char *) rla_info.green_primary);",
          "231:   count=ReadBlob(image,24,(unsigned char *) rla_info.white_point);",
          "232:   rla_info.job_number=(int) ReadBlobMSBLong(image);",
          "233:   count=ReadBlob(image,128,(unsigned char *) rla_info.name);",
          "",
          "[Removed Lines]",
          "230:   count=ReadBlob(image,24,(unsigned char *) rla_info.blue_primary);",
          "",
          "[Added Lines]",
          "230:   count=ReadBlob(image,24,(unsigned char *) rla_info.blue_primary);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:   rla_info.auxiliary_bits=(short) ReadBlobMSBShort(image);",
          "251:   count=ReadBlob(image,32,(unsigned char *) rla_info.auxiliary);",
          "252:   count=ReadBlob(image,36,(unsigned char *) rla_info.space);",
          "254:     ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");",
          "255:   rla_info.next=(int) ReadBlobMSBLong(image);",
          "",
          "[Removed Lines]",
          "253:   if ((size_t) count != 36)",
          "",
          "[Added Lines]",
          "253:   if ((size_t) count != 36)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     (void) SetImageProperty(image,\"comment\",rla_info.description,exception);",
          "280:     Read offsets to each scanline data.",
          "282:   for (i=0; i < (ssize_t) image->rows; i++)",
          "283:     scanlines[i]=(MagickOffsetType) ((int) ReadBlobMSBLong(image));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290:     offset=SeekBlob(image,scanlines[image->rows-y-1],SEEK_SET);",
          "291:     if (offset < 0)",
          "292:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "294:     {",
          "295:       length=(int) ReadBlobMSBShort(image);",
          "296:       while (length > 0)",
          "",
          "[Removed Lines]",
          "293:     for (channel=0; channel < (int) rla_info.number_channels; channel++)",
          "",
          "[Added Lines]",
          "293:     for (channel=0; channel < (int) rla_info.number_channels; channel++)",
          "",
          "---------------"
        ],
        "coders/rle.c||coders/rle.c": [
          "File: coders/rle.c -> coders/rle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:       switch (opcode & 0x3f)",
          "361:       {",
          "362:         case SkipLinesOp:",
          "364:           operand=ReadBlobByte(image);",
          "365:           if (opcode & 0x40)",
          "366:             operand=(int) ReadBlobLSBShort(image);",
          "",
          "[Removed Lines]",
          "363:         {",
          "",
          "[Added Lines]",
          "363:         {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:           break;",
          "379:         }",
          "380:         case SkipPixelsOp:",
          "382:           operand=ReadBlobByte(image);",
          "383:           if (opcode & 0x40)",
          "384:             operand=(int) ReadBlobLSBShort(image);",
          "",
          "[Removed Lines]",
          "381:         {",
          "",
          "[Added Lines]",
          "381:         {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "386:           break;",
          "387:         }",
          "388:         case ByteDataOp:",
          "390:           operand=ReadBlobByte(image);",
          "391:           if (opcode & 0x40)",
          "392:             operand=(int) ReadBlobLSBShort(image);",
          "",
          "[Removed Lines]",
          "389:         {",
          "",
          "[Added Lines]",
          "389:         {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "415:           break;",
          "416:         }",
          "417:         case RunDataOp:",
          "419:           operand=ReadBlobByte(image);",
          "420:           if (opcode & 0x40)",
          "421:             operand=(int) ReadBlobLSBShort(image);",
          "",
          "[Removed Lines]",
          "418:         {",
          "",
          "[Added Lines]",
          "418:         {",
          "",
          "---------------"
        ],
        "coders/sgi.c||coders/sgi.c": [
          "File: coders/sgi.c -> coders/sgi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:               runlength=(size_t *) RelinquishMagickMemory(runlength);",
          "459:             if (packet_info == (MemoryInfo *) NULL)",
          "460:               packet_info=RelinquishVirtualMemory(packet_info);",
          "462:           }",
          "463:         packets=(unsigned char *) GetVirtualMemoryBlob(packet_info);",
          "464:         for (i=0; i < (ssize_t) (iris_info.rows*iris_info.depth); i++)",
          "",
          "[Removed Lines]",
          "461:             ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "",
          "[Added Lines]",
          "461:             ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "",
          "---------------"
        ],
        "coders/viff.c||coders/viff.c": [
          "File: coders/viff.c -> coders/viff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:         (viff_info.machine_dependency == VFF_DEP_NSORDER))",
          "319:       image->endian=LSBEndian;",
          "320:     else",
          "323:     viff_info.columns=ReadBlobLong(image);",
          "324:     viff_info.subrows=ReadBlobLong(image);",
          "325:     viff_info.x_offset=(int) ReadBlobLong(image);",
          "",
          "[Removed Lines]",
          "321:       image->endian=MSBEndian;",
          "322:     viff_info.rows=ReadBlobLong(image);",
          "",
          "[Added Lines]",
          "321:       image->endian=MSBEndian;",
          "322:     viff_info.rows=ReadBlobLong(image);",
          "",
          "---------------"
        ],
        "coders/xcf.c||coders/xcf.c": [
          "File: coders/xcf.c -> coders/xcf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "830:       break;",
          "831:     case PROP_EDIT_MASK:",
          "832:       outLayer->edit_mask = ReadBlobMSBLong(image);",
          "835:       outLayer->show_mask = ReadBlobMSBLong(image);",
          "836:       break;",
          "837:     case PROP_OFFSETS:",
          "",
          "[Removed Lines]",
          "833:       break;",
          "834:     case PROP_SHOW_MASK:",
          "",
          "[Added Lines]",
          "833:       break;",
          "834:     case PROP_SHOW_MASK:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1275:       status=SetImageExtent(image,image->columns,image->rows,exception);",
          "1276:       if (status == MagickFalse)",
          "1279:         the read pointer",
          "",
          "[Removed Lines]",
          "1277:         return(DestroyImageList(image));",
          "",
          "[Added Lines]",
          "1277:         return(DestroyImageList(image));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef069c2d90468c58e889d5089bd9b4fc55ecbc3f",
      "candidate_info": {
        "commit_hash": "ef069c2d90468c58e889d5089bd9b4fc55ecbc3f",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/ef069c2d90468c58e889d5089bd9b4fc55ecbc3f",
        "files": [
          "ChangeLog",
          "MagickCore/property.c"
        ],
        "message": "https://github.com/ImageMagick/ImageMagick/issues/198",
        "before_after_code_files": [
          "MagickCore/property.c||MagickCore/property.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "MagickCore/property.c||MagickCore/property.c"
          ],
          "candidate": [
            "MagickCore/property.c||MagickCore/property.c"
          ]
        }
      },
      "candidate_diff": {
        "MagickCore/property.c||MagickCore/property.c": [
          "File: MagickCore/property.c -> MagickCore/property.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "725:           }",
          "726:         attribute=DestroyString(attribute);",
          "727:         status=MagickTrue;",
          "729:   }",
          "730:   if (resource != (char *) NULL)",
          "731:     resource=DestroyString(resource);",
          "732:   return(status);",
          "735: static inline signed short ReadPropertyShort(const EndianType endian,",
          "737: {",
          "738:   union",
          "739:   {",
          "741:       unsigned_value;",
          "743:     signed short",
          "744:       signed_value;",
          "747:   unsigned short",
          "748:     value;",
          "752:       value=(unsigned short) ((buffer[1] << 8) | buffer[0]);",
          "753:       quantum.unsigned_value=(value & 0xffff);",
          "754:       return(quantum.signed_value);",
          "756:   value=(unsigned short) ((((unsigned char *) buffer)[0] << 8) |",
          "757:     ((unsigned char *) buffer)[1]);",
          "758:   quantum.unsigned_value=(value & 0xffff);",
          "759:   return(quantum.signed_value);",
          "762: static inline signed int ReadPropertyLong(const EndianType endian,",
          "764: {",
          "765:   union",
          "766:   {",
          "768:       unsigned_value;",
          "770:     signed int",
          "771:       signed_value;",
          "775:     value;",
          "780:         (buffer[1] << 8 ) | (buffer[0]));",
          "781:       quantum.unsigned_value=(value & 0xffffffff);",
          "782:       return(quantum.signed_value);",
          "783:     }",
          "784:   value=(unsigned int) ((buffer[0] << 24) | (buffer[1] << 16) |",
          "785:     (buffer[2] << 8) | buffer[3]);",
          "",
          "[Removed Lines]",
          "728:       }",
          "733: }",
          "736:   const unsigned char *buffer)",
          "740:     unsigned short",
          "745:   } quantum;",
          "750:   if (endian == LSBEndian)",
          "751:     {",
          "755:     }",
          "760: }",
          "763:   const unsigned char *buffer)",
          "767:     unsigned int",
          "772:   } quantum;",
          "774:   unsigned int",
          "777:   if (endian == LSBEndian)",
          "778:     {",
          "779:       value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |",
          "",
          "[Added Lines]",
          "728:       }",
          "733: }",
          "736:   const unsigned char *buffer)",
          "740:     unsigned int",
          "745:   } quantum;",
          "747:   unsigned int",
          "750:   if (endian == LSBEndian)",
          "751:     {",
          "752:       value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |",
          "756:     }",
          "757:   value=(unsigned int) ((buffer[0] << 24) | (buffer[1] << 16) |",
          "758:     (buffer[2] << 8) | buffer[3]);",
          "759:   quantum.unsigned_value=(value & 0xffffffff);",
          "760:   return(quantum.signed_value);",
          "761: }",
          "763: static inline unsigned int ReadPropertyUnsignedLong(const EndianType endian,",
          "764:   const unsigned char *buffer)",
          "765: {",
          "766:   unsigned int",
          "767:     value;",
          "769:   if (endian == LSBEndian)",
          "770:     {",
          "771:       value=(unsigned int) ((buffer[3] << 24) | (buffer[2] << 16) |",
          "772:         (buffer[1] << 8 ) | (buffer[0]));",
          "773:       return((unsigned int) (value & 0xffffffff));",
          "778: }",
          "781:   const unsigned char *buffer)",
          "785:     unsigned short",
          "790:   } quantum;",
          "795:   if (endian == LSBEndian)",
          "796:     {",
          "800:     }",
          "801:   value=(unsigned short) ((((unsigned char *) buffer)[0] << 8) |",
          "802:     ((unsigned char *) buffer)[1]);",
          "803:   quantum.unsigned_value=(value & 0xffff);",
          "804:   return(quantum.signed_value);",
          "805: }",
          "807: static inline unsigned short ReadPropertyUnsignedShort(const EndianType endian,",
          "808:   const unsigned char *buffer)",
          "809: {",
          "810:   unsigned short",
          "811:     value;",
          "813:   if (endian == LSBEndian)",
          "814:     {",
          "815:       value=(unsigned short) ((buffer[1] << 8) | buffer[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1174:   MagickBooleanType",
          "1175:     status;",
          "1178:     i;",
          "1180:   size_t",
          "",
          "[Removed Lines]",
          "1177:   register ssize_t",
          "",
          "[Added Lines]",
          "1210:   register ssize_t",
          "1211:     i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1184:     tag;",
          "1186:   SplayTreeInfo",
          "1189:   ssize_t",
          "1190:     all,",
          "1191:     id,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1302:     if (ReadPropertyByte(&exif,&length) != 0x66)",
          "1303:       continue;",
          "1304:     if (ReadPropertyByte(&exif,&length) != 0x00)",
          "1306:     if (ReadPropertyByte(&exif,&length) != 0x00)",
          "1307:       continue;",
          "1308:     break;",
          "",
          "[Removed Lines]",
          "1305:       continue;",
          "",
          "[Added Lines]",
          "1338:       continue;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1311:     return(MagickFalse);",
          "1312:   id=(ssize_t) ReadPropertyShort(LSBEndian,exif);",
          "1313:   endian=LSBEndian;",
          "1315:     endian=LSBEndian;",
          "1316:   else",
          "1317:     if (id == 0x4D4D)",
          "1318:       endian=MSBEndian;",
          "1320:       return(MagickFalse);",
          "1321:   if (ReadPropertyShort(endian,exif+2) != 0x002a)",
          "1322:     return(MagickFalse);",
          "",
          "[Removed Lines]",
          "1314:   if (id == 0x4949)",
          "1319:     else",
          "",
          "[Added Lines]",
          "1347:   if (id == 0x4949)",
          "1352:     else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1346:         level--;",
          "1347:         directory=directory_stack[level].directory;",
          "1348:         entry=directory_stack[level].entry;",
          "1350:       }",
          "1351:     if ((directory < exif) || (directory > (exif+length-2)))",
          "1352:       break;",
          "",
          "[Removed Lines]",
          "1349:         tag_offset=directory_stack[level].offset;",
          "",
          "[Added Lines]",
          "1382:         tag_offset=directory_stack[level].offset;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1364:         format;",
          "1366:       ssize_t",
          "1370:       q=(unsigned char *) (directory+(12*entry)+2);",
          "1372:         break;",
          "1373:       (void) AddValueToSplayTree(exif_resources,q,q);",
          "1374:       tag_value=(ssize_t) ReadPropertyShort(endian,q)+tag_offset;",
          "",
          "[Removed Lines]",
          "1367:         number_bytes,",
          "1368:         components;",
          "1371:       if (GetValueFromSplayTree(exif_resources,q) == q)",
          "",
          "[Added Lines]",
          "1400:         number_bytes,",
          "1401:         components;",
          "1404:       if (GetValueFromSplayTree(exif_resources,q) == q)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1382:       if (number_bytes <= 4)",
          "1383:         p=q+8;",
          "1384:       else",
          "1386:           ssize_t",
          "1387:             offset;",
          "",
          "[Removed Lines]",
          "1385:         {",
          "",
          "[Added Lines]",
          "1418:         {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1414:               EXIFMultipleValues(1,\"%.20g\",(double) (*(unsigned char *) p1));",
          "1415:               break;",
          "1416:             }",
          "1418:             {",
          "1419:               EXIFMultipleValues(1,\"%.20g\",(double) (*(signed char *) p1));",
          "1420:               break;",
          "1421:             }",
          "1423:             {",
          "1424:               EXIFMultipleValues(2,\"%hd\",ReadPropertyShort(endian,p1));",
          "1425:               break;",
          "1426:             }",
          "1427:             case EXIF_FMT_USHORT:",
          "1429:               EXIFMultipleValues(2,\"%hu\",ReadPropertyShort(endian,p1));",
          "1430:               break;",
          "1431:             }",
          "1432:             case EXIF_FMT_ULONG:",
          "1433:             {",
          "1435:                 ReadPropertyLong(endian,p1));",
          "1436:               break;",
          "1437:             }",
          "1438:             case EXIF_FMT_SLONG:",
          "1439:             {",
          "1442:               break;",
          "1443:             }",
          "1444:             case EXIF_FMT_URATIONAL:",
          "1445:             {",
          "1446:               EXIFMultipleFractions(8,\"%.20g/%.20g\",(double)",
          "1449:               break;",
          "1450:             }",
          "1451:             case EXIF_FMT_SRATIONAL:",
          "",
          "[Removed Lines]",
          "1417:             case EXIF_FMT_SBYTE:",
          "1422:             case EXIF_FMT_SSHORT:",
          "1428:             {",
          "1434:               EXIFMultipleValues(4,\"%.20g\",(double)",
          "1440:               EXIFMultipleValues(4,\"%.20g\",(double)",
          "1441:                 ReadPropertyLong(endian,p1));",
          "1447:                 ReadPropertyLong(endian,p1),(double)",
          "1448:                 ReadPropertyLong(endian,p1+4));",
          "",
          "[Added Lines]",
          "1450:             case EXIF_FMT_SBYTE:",
          "1455:             case EXIF_FMT_SSHORT:",
          "1461:             {",
          "1467:               EXIFMultipleValues(4,\"%.20g\",(double)",
          "1473:               EXIFMultipleValues(4,\"%.20g\",(double)",
          "1474:                 ReadPropertySignedLong(endian,p1));",
          "1480:                 ReadPropertyUnsignedLong(endian,p1),(double)",
          "1481:                 ReadPropertyUnsignedLong(endian,p1+4));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1511:                   for (i=0; ; i++)",
          "1512:                   {",
          "1513:                     if (EXIFTag[i].tag == 0)",
          "1515:                     if ((ssize_t) EXIFTag[i].tag == tag_value)",
          "1516:                       {",
          "1517:                         description=EXIFTag[i].description;",
          "",
          "[Removed Lines]",
          "1514:                       break;",
          "",
          "[Added Lines]",
          "1547:                       break;",
          "1548:                     if ((ssize_t) EXIFTag[i].tag == tag_value)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1552:               key=DestroyString(key);",
          "1553:               status=MagickTrue;",
          "1554:             }",
          "1556:         if ((tag_value == TAG_EXIF_OFFSET) ||",
          "1557:             (tag_value == TAG_INTEROP_OFFSET) || (tag_value == TAG_GPS_OFFSET))",
          "1558:           {",
          "",
          "[Removed Lines]",
          "1555:         }",
          "",
          "[Added Lines]",
          "1589:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1571:                 entry++;",
          "1572:                 directory_stack[level].entry=entry;",
          "1573:                 directory_stack[level].offset=tag_offset;",
          "1575:                 directory_stack[level].directory=exif+offset;",
          "1576:                 directory_stack[level].offset=tag_offset1;",
          "1577:                 directory_stack[level].entry=0;",
          "",
          "[Removed Lines]",
          "1574:                 level++;",
          "",
          "[Added Lines]",
          "1608:                 level++;",
          "",
          "---------------"
        ]
      }
    }
  ]
}