{
  "cve_id": "CVE-2018-19044",
  "cve_desc": "keepalived 2.0.8 didn't check for pathnames with symlinks when writing data to a temporary file upon a call to PrintData or PrintStats. This allowed local users to overwrite arbitrary files if fs.protected_symlinks is set to 0, as demonstrated by a symlink from /tmp/keepalived.data or /tmp/keepalived.stats to /etc/passwd.",
  "repo": "acassen/keepalived",
  "patch_hash": "04f2d32871bb3b11d7dc024039952f2fe2750306",
  "patch_info": {
    "commit_hash": "04f2d32871bb3b11d7dc024039952f2fe2750306",
    "repo": "acassen/keepalived",
    "commit_url": "https://github.com/acassen/keepalived/commit/04f2d32871bb3b11d7dc024039952f2fe2750306",
    "files": [
      "keepalived/core/main.c",
      "keepalived/core/pidfile.c",
      "keepalived/core/smtp.c",
      "keepalived/vrrp/vrrp_dbus.c",
      "keepalived/vrrp/vrrp_json.c",
      "keepalived/vrrp/vrrp_parser.c",
      "keepalived/vrrp/vrrp_print.c",
      "keepalived/vrrp/vrrp_scheduler.c",
      "lib/logger.c",
      "lib/memory.c",
      "lib/notify.c",
      "lib/parser.c",
      "lib/utils.c",
      "lib/utils.h"
    ],
    "message": "When opening files for write, ensure they aren't symbolic links\n\nIssue #1048 identified that if, for example, a non privileged user\ncreated a symbolic link from /etc/keepalvied.data to /etc/passwd,\nwriting to /etc/keepalived.data (which could be invoked via DBus)\nwould cause /etc/passwd to be overwritten.\n\nThis commit stops keepalived writing to pathnames where the ultimate\ncomponent is a symbolic link, by setting O_NOFOLLOW whenever opening\na file for writing.\n\nThis might break some setups, where, for example, /etc/keepalived.data\nwas a symbolic link to /home/fred/keepalived.data. If this was the case,\ninstead create a symbolic link from /home/fred/keepalived.data to\n/tmp/keepalived.data, so that the file is still accessible via\n/home/fred/keepalived.data.\n\nThere doesn't appear to be a way around this backward incompatibility,\nsince even checking if the pathname is a symbolic link prior to opening\nfor writing would create a race condition.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
    "before_after_code_files": [
      "keepalived/core/main.c||keepalived/core/main.c",
      "keepalived/core/pidfile.c||keepalived/core/pidfile.c",
      "keepalived/core/smtp.c||keepalived/core/smtp.c",
      "keepalived/vrrp/vrrp_dbus.c||keepalived/vrrp/vrrp_dbus.c",
      "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c",
      "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c",
      "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c",
      "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
      "lib/logger.c||lib/logger.c",
      "lib/memory.c||lib/memory.c",
      "lib/notify.c||lib/notify.c",
      "lib/parser.c||lib/parser.c",
      "lib/utils.c||lib/utils.c",
      "lib/utils.h||lib/utils.h"
    ]
  },
  "patch_diff": {
    "keepalived/core/main.c||keepalived/core/main.c": [
      "File: keepalived/core/main.c -> keepalived/core/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1399:    __set_bit(DONT_FORK_BIT, &debug);",
      "1400:    __set_bit(NO_SYSLOG_BIT, &debug);",
      "1401:    if (optarg && optarg[0]) {",
      "1403:     if (fd == -1) {",
      "1404:      fprintf(stderr, \"Unable to open config-test log file %s\\n\", optarg);",
      "1405:      exit(EXIT_FAILURE);",
      "",
      "[Removed Lines]",
      "1402:     int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "[Added Lines]",
      "1402:     int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "---------------"
    ],
    "keepalived/core/pidfile.c||keepalived/core/pidfile.c": [
      "File: keepalived/core/pidfile.c -> keepalived/core/pidfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: pidfile_write(const char *pid_file, int pid)",
      "61: {",
      "62:  FILE *pidfile = NULL;",
      "65:  if (pidfd != -1) pidfile = fdopen(pidfd, \"w\");",
      "",
      "[Removed Lines]",
      "63:  int pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "[Added Lines]",
      "63:  int pidfd = open(pid_file, O_NOFOLLOW | O_CREAT | O_WRONLY | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
      "",
      "---------------"
    ],
    "keepalived/core/smtp.c||keepalived/core/smtp.c": [
      "File: keepalived/core/smtp.c -> keepalived/core/smtp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "570: static void",
      "571: smtp_log_to_file(smtp_t *smtp)",
      "572: {",
      "574:  time_t now;",
      "575:  struct tm tm;",
      "576:  char time_buf[25];",
      "",
      "[Removed Lines]",
      "573:  FILE *fp = fopen(\"/tmp/smtp-alert.log\", \"a\");",
      "",
      "[Added Lines]",
      "573:  FILE *fp = fopen_safe(\"/tmp/smtp-alert.log\", \"a\");",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_dbus.c||keepalived/vrrp/vrrp_dbus.c": [
      "File: keepalived/vrrp/vrrp_dbus.c -> keepalived/vrrp/vrrp_dbus.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "594:  size_t length;",
      "595:  gchar *ret = NULL;",
      "598:  if (f) {",
      "599:   fseek(f, 0, SEEK_END);",
      "600:   length = (size_t)ftell(f);",
      "",
      "[Removed Lines]",
      "597:  f = fopen(filepath, \"rb\");",
      "",
      "[Added Lines]",
      "597:  f = fopen(filepath, \"r\");",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_json.c||keepalived/vrrp/vrrp_json.c": [
      "File: keepalived/vrrp/vrrp_json.c -> keepalived/vrrp/vrrp_json.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: #include \"vrrp_iprule.h\"",
      "38: #include \"logger.h\"",
      "39: #include \"timer.h\"",
      "41: static inline double",
      "42: timeval_to_double(const timeval_t *t)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: #include \"utils.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:  if (LIST_ISEMPTY(vrrp_data->vrrp))",
      "56:   return;",
      "59:  if (!file) {",
      "60:   log_message(LOG_INFO, \"Can't open /tmp/keepalived.json (%d: %s)\",",
      "61:    errno, strerror(errno));",
      "",
      "[Removed Lines]",
      "58:  file = fopen (\"/tmp/keepalived.json\",\"w\");",
      "",
      "[Added Lines]",
      "59:  file = fopen_safe(\"/tmp/keepalived.json\", \"w\");",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_parser.c||keepalived/vrrp/vrrp_parser.c": [
      "File: keepalived/vrrp/vrrp_parser.c -> keepalived/vrrp/vrrp_parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1206:  if (!__test_bit(CONFIG_TEST_BIT, &debug)) {",
      "1209:    fprintf(tf, \"%d\\n\", track_file_init_value);",
      "1210:    fclose(tf);",
      "1211:   }",
      "",
      "[Removed Lines]",
      "1208:   if ((tf = fopen(tfile->file_path, \"w\"))) {",
      "",
      "[Added Lines]",
      "1208:   if ((tf = fopen_safe(tfile->file_path, \"w\"))) {",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_print.c||keepalived/vrrp/vrrp_print.c": [
      "File: keepalived/vrrp/vrrp_print.c -> keepalived/vrrp/vrrp_print.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: #include \"vrrp.h\"",
      "33: #include \"vrrp_data.h\"",
      "34: #include \"vrrp_print.h\"",
      "36: static const char *dump_file = \"/tmp/keepalived.data\";",
      "37: static const char *stats_file = \"/tmp/keepalived.stats\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: #include \"utils.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: void",
      "40: vrrp_print_data(void)",
      "41: {",
      "44:  if (!file) {",
      "45:   log_message(LOG_INFO, \"Can't open %s (%d: %s)\",",
      "",
      "[Removed Lines]",
      "42:  FILE *file = fopen (dump_file, \"w\");",
      "",
      "[Added Lines]",
      "43:  FILE *file = fopen_safe(dump_file, \"w\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55: void",
      "56: vrrp_print_stats(void)",
      "57: {",
      "61:  if (!file) {",
      "62:   log_message(LOG_INFO, \"Can't open %s (%d: %s)\",",
      "",
      "[Removed Lines]",
      "58:  FILE *file;",
      "59:  file = fopen (stats_file, \"w\");",
      "",
      "[Added Lines]",
      "59:  FILE *file = fopen_safe(stats_file, \"w\");",
      "60:  element e;",
      "61:  vrrp_t *vrrp;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "64:   return;",
      "65:  }",
      "73:   fprintf(file, \"VRRP Instance: %s\\n\", vrrp->iname);",
      "74:   fprintf(file, \"  Advertisements:\\n\");",
      "75:   fprintf(file, \"    Received: %\" PRIu64 \"\\n\", vrrp->stats->advert_rcvd);",
      "76:   fprintf(file, \"    Sent: %d\\n\", vrrp->stats->advert_sent);",
      "77:   fprintf(file, \"  Became master: %d\\n\", vrrp->stats->become_master);",
      "80:   fprintf(file, \"  Packet Errors:\\n\");",
      "81:   fprintf(file, \"    Length: %\" PRIu64 \"\\n\", vrrp->stats->packet_len_err);",
      "82:   fprintf(file, \"    TTL: %\" PRIu64 \"\\n\", vrrp->stats->ip_ttl_err);",
      "",
      "[Removed Lines]",
      "67:  list l = vrrp_data->vrrp;",
      "68:  element e;",
      "69:  vrrp_t *vrrp;",
      "71:  for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {",
      "72:   vrrp = ELEMENT_DATA(e);",
      "78:   fprintf(file, \"  Released master: %d\\n\",",
      "79:    vrrp->stats->release_master);",
      "",
      "[Added Lines]",
      "70:  LIST_FOREACH(vrrp_data->vrrp, vrrp, e) {",
      "76:   fprintf(file, \"  Released master: %d\\n\", vrrp->stats->release_master);",
      "",
      "---------------"
    ],
    "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c": [
      "File: keepalived/vrrp/vrrp_scheduler.c -> keepalived/vrrp/vrrp_scheduler.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1134:      NULL,",
      "1135: #endif",
      "1136:      global_data->instance_name);",
      "1138:  FREE(file_name);",
      "1140:  set_time_now();",
      "",
      "[Removed Lines]",
      "1137:  fp = fopen(file_name, \"a\");",
      "",
      "[Added Lines]",
      "1137:  fp = fopen_safe(file_name, \"a\");",
      "",
      "---------------"
    ],
    "lib/logger.c||lib/logger.c": [
      "File: lib/logger.c -> lib/logger.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:  file_name = make_file_name(name, prog, namespace, instance);",
      "82:  if (log_file) {",
      "83:   int n = fileno(log_file);",
      "84:   fcntl(n, F_SETFD, FD_CLOEXEC | fcntl(n, F_GETFD));",
      "",
      "[Removed Lines]",
      "81:  log_file = fopen(file_name, \"a\");",
      "",
      "[Added Lines]",
      "81:  log_file = fopen_safe(file_name, \"a\");",
      "",
      "---------------"
    ],
    "lib/memory.c||lib/memory.c": [
      "File: lib/memory.c -> lib/memory.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "621:  }",
      "623:  snprintf(log_name, log_name_len, \"/tmp/%s_mem.%d.log\", prog_name, getpid());",
      "625:  if (log_op == NULL) {",
      "626:   log_message(LOG_INFO, \"Unable to open %s for appending\", log_name);",
      "627:   log_op = stderr;",
      "",
      "[Removed Lines]",
      "624:  log_op = fopen(log_name, \"a\");",
      "",
      "[Added Lines]",
      "624:  log_op = fopen_safe(log_name, \"a\");",
      "",
      "---------------"
    ],
    "lib/notify.c||lib/notify.c": [
      "File: lib/notify.c -> lib/notify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "236:     notify_fifo_exec(master, script_exit, fifo, fifo->script);",
      "240:     log_message(LOG_INFO, \"Unable to open %snotify fifo %s - errno %d\", type, fifo->name, errno);",
      "241:     if (fifo->created_fifo) {",
      "242:      unlink(fifo->name);",
      "",
      "[Removed Lines]",
      "239:    if ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK)) == -1) {",
      "",
      "[Added Lines]",
      "239:    if ((fifo->fd = open(fifo->name, O_RDWR | O_CLOEXEC | O_NONBLOCK | O_NOFOLLOW)) == -1) {",
      "",
      "---------------"
    ],
    "lib/parser.c||lib/parser.c": [
      "File: lib/parser.c -> lib/parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "455: {",
      "456:  unsigned int i;",
      "457:  keyword_t *keyword_vec;",
      "460:  if (!level) {",
      "461:   snprintf(file_name, sizeof(file_name), \"/tmp/keywords.%d\", getpid());",
      "463:   if (!fp)",
      "464:    return;",
      "465:  }",
      "",
      "[Removed Lines]",
      "458:  char file_name[21];",
      "462:   fp = fopen(file_name, \"w\");",
      "",
      "[Added Lines]",
      "458:  char file_name[22];",
      "462:   fp = fopen_safe(file_name, \"w\");",
      "",
      "---------------"
    ],
    "lib/utils.c||lib/utils.c": [
      "File: lib/utils.c -> lib/utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:  nptrs = backtrace(buffer, 100);",
      "125:  if (file_name) {",
      "127:   if (str)",
      "128:    dprintf(fd, \"%s\\n\", str);",
      "129:   backtrace_symbols_fd(buffer, nptrs, fd);",
      "",
      "[Removed Lines]",
      "126:   fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT, 0644);",
      "",
      "[Added Lines]",
      "126:   fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT | O_NOFOLLOW, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "788:  return !strcmp(str1, str2);",
      "789: }",
      "791: void",
      "792: set_std_fd(bool force)",
      "793: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "793: FILE *fopen_safe(const char *path, const char *mode)",
      "794: {",
      "795:  int fd;",
      "796:  FILE *file;",
      "797:  int flags = O_NOFOLLOW | O_CREAT;",
      "799:  if (mode[0] == 'r')",
      "800:   return fopen(path, mode);",
      "802:  if (mode[0] != 'a' && mode[0] != 'w')",
      "803:   return NULL;",
      "805:  if (mode[1] &&",
      "806:      (mode[1] != '+' || mode[2]))",
      "807:   return NULL;",
      "809:  if (mode[0] == 'w')",
      "810:   flags |= O_TRUNC;",
      "811:  else",
      "812:   flags |= O_APPEND;",
      "814:  if (mode[1])",
      "815:   flags |= O_RDWR;",
      "816:  else",
      "817:   flags |= O_WRONLY;",
      "819:  fd = open(path, flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);",
      "820:  if (fd == -1)",
      "821:   return NULL;",
      "823:  file = fdopen (fd, \"w\");",
      "824:  if (!file) {",
      "825:   close(fd);",
      "826:   return NULL;",
      "827:  }",
      "829:  return file;",
      "830: }",
      "",
      "---------------"
    ],
    "lib/utils.h||lib/utils.h": [
      "File: lib/utils.h -> lib/utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "182: extern int inet_sockaddrcmp(const struct sockaddr_storage *, const struct sockaddr_storage *);",
      "183: extern char *get_local_name(void);",
      "184: extern bool string_equal(const char *, const char *);",
      "185: extern void set_std_fd(bool);",
      "186: extern void close_std_fd(void);",
      "187: #if !defined _HAVE_LIBIPTC_ || defined _LIBIPTC_DYNAMIC_",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "185: extern FILE *fopen_safe(const char *, const char *);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5241e4d7b177d0b6f073cfc9ed5444bf51ec89d6",
      "candidate_info": {
        "commit_hash": "5241e4d7b177d0b6f073cfc9ed5444bf51ec89d6",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/5241e4d7b177d0b6f073cfc9ed5444bf51ec89d6",
        "files": [
          "keepalived/core/main.c"
        ],
        "message": "Fix compile warning introduced in commit c6247a9\n\nCommit c6247a9 - \"Add command line and configuration option to set umask\"\nintroduced a compile warning, although the code would have worked OK.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/core/main.c||keepalived/core/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/acassen/keepalived/pull/1051"
        ],
        "olp_code_files": {
          "patch": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ],
          "candidate": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/core/main.c||keepalived/core/main.c": [
          "File: keepalived/core/main.c -> keepalived/core/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "883:  if (*endptr || umask_long < 0 || umask_long & ~0777L) {",
          "884:   fprintf(stderr, \"Invalid --umask option %s\", optarg);",
          "886:  }",
          "888:  umask_val = umask_long & 0777;",
          "",
          "[Removed Lines]",
          "885:   return;",
          "",
          "[Added Lines]",
          "885:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6247a9ef2c7b33244ab1d3aa5d629ec49f0a067",
      "candidate_info": {
        "commit_hash": "c6247a9ef2c7b33244ab1d3aa5d629ec49f0a067",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/c6247a9ef2c7b33244ab1d3aa5d629ec49f0a067",
        "files": [
          "doc/keepalived.conf.SYNOPSIS",
          "doc/man/man5/keepalived.conf.5",
          "doc/man/man8/keepalived.8",
          "keepalived/core/global_data.c",
          "keepalived/core/global_parser.c",
          "keepalived/core/main.c",
          "keepalived/include/global_data.h",
          "keepalived/include/main.h"
        ],
        "message": "Add command line and configuration option to set umask\n\nIssue #1048 identified that files created by keepalived are created\nwith mode 0666. This commit changes the default to 0644, and also\nallows the umask to be specified in the configuration or as a command\nline option.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/core/global_data.c||keepalived/core/global_data.c",
          "keepalived/core/global_parser.c||keepalived/core/global_parser.c",
          "keepalived/core/main.c||keepalived/core/main.c",
          "keepalived/include/global_data.h||keepalived/include/global_data.h",
          "keepalived/include/main.h||keepalived/include/main.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/acassen/keepalived/pull/1051"
        ],
        "olp_code_files": {
          "patch": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ],
          "candidate": [
            "keepalived/core/main.c||keepalived/core/main.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/core/global_data.c||keepalived/core/global_data.c": [
          "File: keepalived/core/global_data.c -> keepalived/core/global_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:  if (buf[0])",
          "572:   conf_write(fp, \"%s\", buf);",
          "573:  conf_write(fp, \" rx_bufs_multiples = %u\", global_data->vrrp_rx_bufs_multiples);",
          "574: #endif",
          "575: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:  conf_write(fp, \" umask = 0%o\", global_data->umask);",
          "",
          "---------------"
        ],
        "keepalived/core/global_parser.c||keepalived/core/global_parser.c": [
          "File: keepalived/core/global_parser.c -> keepalived/core/global_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <sched.h>",
          "36: #endif",
          "37: #include <strings.h>",
          "39: #ifdef _WITH_SNMP_",
          "40: #include \"snmp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <sys/types.h>",
          "39: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1341: }",
          "1342: #endif",
          "1344: void",
          "1345: init_global_keywords(bool global_active)",
          "1346: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1346: static void",
          "1347: umask_handler(vector_t *strvec)",
          "1348: {",
          "1349:  long umask_long;",
          "1350:  mode_t umask_val = 0;",
          "1351:  char *mask = strvec_slot(strvec, 1);",
          "1352:  char *endptr;",
          "1353:  unsigned i;",
          "1354:  char *p;",
          "1356:  if (umask_cmdline) {",
          "1357:   log_message(LOG_INFO, \"umask command line option specified, ignoring config option\");",
          "1358:   return;",
          "1359:  }",
          "1361:  if (isdigit(mask[0])) {",
          "1362:   if (vector_size(strvec) != 2) {",
          "1363:    report_config_error(CONFIG_GENERAL_ERROR, \"%s parameter(s) to umask option\", vector_size(strvec) == 1 ? \"Missing\" : \"Extra\");",
          "1364:    return;",
          "1365:   }",
          "1366:   umask_long = strtol(mask, &endptr, 0);",
          "1367:   if (*endptr || umask_long < 0 || umask_long & ~0777L) {",
          "1368:    report_config_error(CONFIG_GENERAL_ERROR, \"invalid umask value %s\", mask);",
          "1369:    return;",
          "1370:   }",
          "1371:   umask_val = umask_long & 0777;",
          "1372:  }",
          "1373:  else {",
          "1374:   bool need_or = false;",
          "1375:   for (i = 1; i < vector_size(strvec); i++) {",
          "1376:    for (p = strvec_slot(strvec, i); *p; ) {",
          "1377:     if (need_or) {",
          "1378:      if (*p == '|') {",
          "1379:       need_or = false;",
          "1380:       p++;",
          "1381:       continue;",
          "1382:      }",
          "1384:      report_config_error(CONFIG_GENERAL_ERROR, \"Invalid umask syntax %s\", FMT_STR_VSLOT(strvec, i));",
          "1385:      return;",
          "1386:     }",
          "1388:     if      (!strncmp(p, \"IRUSR\", 5)) umask_val |= S_IRUSR;",
          "1389:     else if (!strncmp(p, \"IWUSR\", 5)) umask_val |= S_IWUSR;",
          "1390:     else if (!strncmp(p, \"IXUSR\", 5)) umask_val |= S_IXUSR;",
          "1391:     else if (!strncmp(p, \"IRGRP\", 5)) umask_val |= S_IRGRP;",
          "1392:     else if (!strncmp(p, \"IWGRP\", 5)) umask_val |= S_IWGRP;",
          "1393:     else if (!strncmp(p, \"IXGRP\", 5)) umask_val |= S_IXGRP;",
          "1394:     else if (!strncmp(p, \"IROTH\", 5)) umask_val |= S_IROTH;",
          "1395:     else if (!strncmp(p, \"IWOTH\", 5)) umask_val |= S_IWOTH;",
          "1396:     else if (!strncmp(p, \"IXOTH\", 5)) umask_val |= S_IXOTH;",
          "1397:     else {",
          "1398:      report_config_error(CONFIG_GENERAL_ERROR, \"Unknown umask bit %s\", p);",
          "1399:      return;",
          "1400:     }",
          "1402:     p += 5;",
          "1403:     need_or = true;",
          "1404:    }",
          "1405:   }",
          "1406:   if (!need_or) {",
          "1407:    report_config_error(CONFIG_GENERAL_ERROR, \"umask missing bit value\");",
          "1408:    return;",
          "1409:   }",
          "1410:  }",
          "1412:  global_data->umask = umask_val;",
          "1413:  umask(umask_val);",
          "1414: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1483:  install_keyword(\"vrrp_rx_bufs_policy\", &vrrp_rx_bufs_policy_handler);",
          "1484:  install_keyword(\"vrrp_rx_bufs_multiplier\", &vrrp_rx_bufs_multiplier_handler);",
          "1485: #endif",
          "1486: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1558:  install_keyword(\"umask\", &umask_handler);",
          "",
          "---------------"
        ],
        "keepalived/core/main.c||keepalived/core/main.c": [
          "File: keepalived/core/main.c -> keepalived/core/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <signal.h>",
          "34: #include <fcntl.h>",
          "35: #include <sys/wait.h>",
          "36: #include <sys/stat.h>",
          "37: #include <unistd.h>",
          "38: #include <getopt.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <sys/types.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155: };",
          "156: #define LOG_FACILITY_MAX ((sizeof(LOG_FACILITY) / sizeof(LOG_FACILITY[0])) - 1)",
          "159: static bool set_core_dump_pattern = false;",
          "160: static bool create_core_dump = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160: bool umask_cmdline;",
          "161: static mode_t umask_val = S_IXUSR | S_IWGRP | S_IXGRP | S_IWOTH | S_IXOTH;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "866:  }",
          "867: }",
          "869: void",
          "870: initialise_debug_options(void)",
          "871: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874: static mode_t",
          "875: set_umask(const char *optarg)",
          "876: {",
          "877:  long umask_long;",
          "878:  mode_t umask_val;",
          "879:  char *endptr;",
          "881:  umask_long = strtoll(optarg, &endptr, 0);",
          "883:  if (*endptr || umask_long < 0 || umask_long & ~0777L) {",
          "884:   fprintf(stderr, \"Invalid --umask option %s\", optarg);",
          "885:   return;",
          "886:  }",
          "888:  umask_val = umask_long & 0777;",
          "889:  umask(umask_val);",
          "891:  umask_cmdline = true;",
          "893:  return umask_val;",
          "894: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1090:  fprintf(stderr, \"  -g, --log-file=FILE          Also log to FILE (default /tmp/keepalived.log)\\n\");",
          "1091:  fprintf(stderr, \"      --flush-log-file         Flush log file on write\\n\");",
          "1092:  fprintf(stderr, \"  -G, --no-syslog              Don't log via syslog\\n\");",
          "1093: #ifdef _WITH_VRRP_",
          "1094:  fprintf(stderr, \"  -X, --release-vips           Drop VIP on transition from signal.\\n\");",
          "1095:  fprintf(stderr, \"  -V, --dont-release-vrrp      Don't remove VRRP VIPs and VROUTEs on daemon stop\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120:  fprintf(stderr, \"  -u, --umask=MASK             umask for file creation (in numeric form)\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1183:  int curind;",
          "1184:  bool bad_option = false;",
          "1185:  unsigned facility;",
          "1187:  struct option long_options[] = {",
          "1188:   {\"use-file\",  required_argument, NULL, 'f'},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214:  mode_t new_umask_val;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1200:   {\"log-file\",  optional_argument, NULL, 'g'},",
          "1201:   {\"flush-log-file\", no_argument,  NULL,  2 },",
          "1202:   {\"no-syslog\",  no_argument,  NULL, 'G'},",
          "1203: #ifdef _WITH_VRRP_",
          "1204:   {\"release-vips\", no_argument,  NULL, 'X'},",
          "1205:   {\"dont-release-vrrp\", no_argument,  NULL, 'V'},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1232:   {\"umask\",  required_argument, NULL, 'u'},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1254:  curind = optind;",
          "1256: #if defined _WITH_VRRP_ && defined _WITH_LVS_",
          "1257:          \"PC\"",
          "1258: #endif",
          "",
          "[Removed Lines]",
          "1255:  while (longindex = -1, (c = getopt_long(argc, argv, \":vhlndDRS:f:p:i:mM::g::Gt::\"",
          "",
          "[Added Lines]",
          "1285:  while (longindex = -1, (c = getopt_long(argc, argv, \":vhlndu:DRS:f:p:i:mM::g::Gt::\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1358:    __set_bit(NO_SYSLOG_BIT, &debug);",
          "1359:    reopen_log = true;",
          "1360:    break;",
          "1361:   case 't':",
          "1362:    __set_bit(CONFIG_TEST_BIT, &debug);",
          "1363:    __set_bit(DONT_RESPAWN_BIT, &debug);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1391:   case 'u':",
          "1392:    new_umask_val = set_umask(optarg);",
          "1393:    if (umask_cmdline)",
          "1394:     umask_val = new_umask_val;",
          "1395:    break;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1582:  __set_bit(DAEMON_BFD, &daemon_mode);",
          "1583: #endif",
          "1586:  openlog(PACKAGE_NAME, LOG_PID, log_facility);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1621:  umask(022);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1678:  }",
          "1680:  global_data = alloc_global_data();",
          "1682:  read_config_file();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1719:  global_data->umask = umask_val;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1809:   exit(0);",
          "1810:  }",
          "1815: #ifdef _MEM_CHECK_",
          "1816:  enable_mem_log_termination();",
          "1817: #endif",
          "",
          "[Removed Lines]",
          "1813:  umask(0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "keepalived/include/global_data.h||keepalived/include/global_data.h": [
          "File: keepalived/include/global_data.h -> keepalived/include/global_data.h"
        ],
        "keepalived/include/main.h||keepalived/include/main.h": [
          "File: keepalived/include/main.h -> keepalived/include/main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: extern unsigned child_wait_time;",
          "100: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: extern bool umask_cmdline;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f9f6ea56a12fe40fcbb8d41c1f57a314843c62b",
      "candidate_info": {
        "commit_hash": "8f9f6ea56a12fe40fcbb8d41c1f57a314843c62b",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/8f9f6ea56a12fe40fcbb8d41c1f57a314843c62b",
        "files": [
          "keepalived/vrrp/vrrp.c",
          "keepalived/vrrp/vrrp_scheduler.c",
          "keepalived/vrrp/vrrp_sync.c",
          "lib/utils.c"
        ],
        "message": "Fix timer scheduling when instance moves to master due to sync group\n\nWhen instantances were transitioning to master due to being members\nof a sync group, the interval between the first and second advert\nwas ms_down_timer rather than adver_int.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/vrrp/vrrp.c||keepalived/vrrp/vrrp.c",
          "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
          "keepalived/vrrp/vrrp_sync.c||keepalived/vrrp/vrrp_sync.c",
          "lib/utils.c||lib/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
            "lib/utils.c||lib/utils.c"
          ],
          "candidate": [
            "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
            "lib/utils.c||lib/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/vrrp/vrrp.c||keepalived/vrrp/vrrp.c": [
          "File: keepalived/vrrp/vrrp.c -> keepalived/vrrp/vrrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1486: #endif",
          "1488:  vrrp->state = VRRP_STATE_MAST;",
          "1489:  vrrp_state_master_tx(vrrp);",
          "1490: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489:  vrrp_init_instance_sands(vrrp);",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c": [
          "File: keepalived/vrrp/vrrp_scheduler.c -> keepalived/vrrp/vrrp_scheduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "683:  vrrp_state_leave_fault(vrrp);",
          "686:  thread_requeue_read(master, vrrp->sockets->fd_in, vrrp->ms_down_timer);",
          "",
          "[Removed Lines]",
          "684:  vrrp_init_instance_sands(vrrp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_sync.c||keepalived/vrrp/vrrp_sync.c": [
          "File: keepalived/vrrp/vrrp_sync.c -> keepalived/vrrp/vrrp_sync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: {",
          "39:  set_time_now();",
          "42:   vrrp->sands = timer_add_long(time_now, vrrp->adver_int);",
          "52:   vrrp->sands = timer_add_long(time_now, vrrp->ms_down_timer);",
          "53:  else if (vrrp->state == VRRP_STATE_FAULT || vrrp->state == VRRP_STATE_INIT)",
          "54:   vrrp->sands.tv_sec = TIMER_DISABLED;",
          "55: }",
          "",
          "[Removed Lines]",
          "41:  if (vrrp->state == VRRP_STATE_MAST) {",
          "43:   return;",
          "44:  }",
          "51:  if (vrrp->state == VRRP_STATE_BACK)",
          "",
          "[Added Lines]",
          "41:  if (vrrp->state == VRRP_STATE_MAST)",
          "43:  else if (vrrp->state == VRRP_STATE_BACK) {",
          "50:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:   }",
          "188:   else",
          "189:    vrrp_state_leave_master(isync);",
          "191:  }",
          "193:  vgroup->state = VRRP_STATE_BACK;",
          "",
          "[Removed Lines]",
          "190:   vrrp_init_instance_sands(isync);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:    isync->wantstate = VRRP_STATE_MAST;",
          "222:    if (vrrp->init_state == VRRP_STATE_MAST && vrrp->base_priority == VRRP_PRIO_OWNER) {",
          "224:    } else {",
          "225:     vrrp_state_goto_master(isync);",
          "227:    }",
          "228:   }",
          "229:  }",
          "",
          "[Removed Lines]",
          "221:    vrrp_init_instance_sands(isync);",
          "226:     thread_requeue_read(master, vrrp->sockets->fd_in, vrrp->ms_down_timer);",
          "",
          "[Added Lines]",
          "222:     thread_requeue_read(master, isync->sockets->fd_in, isync->adver_int);",
          "",
          "---------------"
        ],
        "lib/utils.c||lib/utils.c": [
          "File: lib/utils.c -> lib/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #ifdef _WITH_STACKTRACE_",
          "41: #include <sys/stat.h>",
          "42: #include <execinfo.h>",
          "43: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include <memory.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: #include \"utils.h\"",
          "49: #include \"signals.h\"",
          "50: #include \"bitops.h\"",
          "53: unsigned long debug = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #ifdef _WITH_STACKTRACE_",
          "53: #include \"logger.h\"",
          "54: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99: void",
          "100: write_stacktrace(const char *file_name)",
          "101: {",
          "103:  void *buffer[100];",
          "104:  int nptrs;",
          "106:  nptrs = backtrace(buffer, 100);",
          "110:  }",
          "112: }",
          "113: #endif",
          "",
          "[Removed Lines]",
          "102:  int fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT, 0644);",
          "107:  backtrace_symbols_fd(buffer, nptrs, fd);",
          "108:  if (write(fd, \"\\n\", 1) != 1) {",
          "111:  close(fd);",
          "",
          "[Added Lines]",
          "106:  int fd;",
          "109:  int i;",
          "110:  char **strs;",
          "113:  if (file_name) {",
          "114:   fd = open(file_name, O_WRONLY | O_APPEND | O_CREAT, 0644);",
          "115:   backtrace_symbols_fd(buffer, nptrs, fd);",
          "116:   if (write(fd, \"\\n\", 1) != 1) {",
          "118:   }",
          "119:   close(fd);",
          "120:  } else {",
          "121:   strs = backtrace_symbols(buffer, nptrs);",
          "122:   if (strs == NULL) {",
          "123:    log_message(LOG_INFO, \"Unable to get stack backtrace\");",
          "124:    return;",
          "125:   }",
          "128:   for (i = 1; i < nptrs - 2; i++)",
          "129:    log_message(LOG_INFO, \"  %s\", strs[i]);",
          "130:   free(strs);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85d794456bd3386143630c09defa65306e5ce48d",
      "candidate_info": {
        "commit_hash": "85d794456bd3386143630c09defa65306e5ce48d",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/85d794456bd3386143630c09defa65306e5ce48d",
        "files": [
          "configure.ac",
          "genhash/layer4.c",
          "genhash/main.c",
          "keepalived/bfd/bfd_daemon.c",
          "keepalived/bfd/bfd_scheduler.c",
          "keepalived/check/check_daemon.c",
          "keepalived/check/check_dns.c",
          "keepalived/check/check_http.c",
          "keepalived/check/check_smtp.c",
          "keepalived/core/layer4.c",
          "keepalived/core/main.c",
          "keepalived/core/smtp.c",
          "keepalived/core/snmp.c",
          "keepalived/vrrp/vrrp_daemon.c",
          "keepalived/vrrp/vrrp_if.c",
          "keepalived/vrrp/vrrp_scheduler.c",
          "lib/Makefile.am",
          "lib/list_head.c",
          "lib/list_head.h",
          "lib/notify.c",
          "lib/rbtree.c",
          "lib/rbtree.h",
          "lib/scheduler.c",
          "lib/scheduler.h",
          "lib/signals.c",
          "lib/signals.h"
        ],
        "message": "Use epoll rather than select\n\nepoll is both more efficient than select and also doesn't have a\nfile descriptor limit of 1024, which limited the number of vrrp\ninstances that could be managed.\n\nThis commit also introduces read-black trees and the list_head\nlist type.\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "genhash/layer4.c||genhash/layer4.c",
          "genhash/main.c||genhash/main.c",
          "keepalived/bfd/bfd_daemon.c||keepalived/bfd/bfd_daemon.c",
          "keepalived/bfd/bfd_scheduler.c||keepalived/bfd/bfd_scheduler.c",
          "keepalived/check/check_daemon.c||keepalived/check/check_daemon.c",
          "keepalived/check/check_dns.c||keepalived/check/check_dns.c",
          "keepalived/check/check_http.c||keepalived/check/check_http.c",
          "keepalived/check/check_smtp.c||keepalived/check/check_smtp.c",
          "keepalived/core/layer4.c||keepalived/core/layer4.c",
          "keepalived/core/main.c||keepalived/core/main.c",
          "keepalived/core/smtp.c||keepalived/core/smtp.c",
          "keepalived/core/snmp.c||keepalived/core/snmp.c",
          "keepalived/vrrp/vrrp_daemon.c||keepalived/vrrp/vrrp_daemon.c",
          "keepalived/vrrp/vrrp_if.c||keepalived/vrrp/vrrp_if.c",
          "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
          "lib/Makefile.am||liMakefile.am",
          "lib/list_head.c||lilist_head.c",
          "lib/list_head.h||lilist_head.h",
          "lib/notify.c||linotify.c",
          "lib/rbtree.c||lirbtree.c",
          "lib/rbtree.h||lirbtree.h",
          "lib/scheduler.c||lischeduler.c",
          "lib/scheduler.h||lischeduler.h",
          "lib/signals.c||lisignals.c",
          "lib/signals.h||lisignals.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/core/main.c||keepalived/core/main.c",
            "keepalived/core/smtp.c||keepalived/core/smtp.c",
            "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
            "lib/notify.c||lib/notify.c"
          ],
          "candidate": [
            "keepalived/core/main.c||keepalived/core/main.c",
            "keepalived/core/smtp.c||keepalived/core/smtp.c",
            "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c",
            "lib/notify.c||linotify.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   [AS_HELP_STRING([--enable-stacktrace], [compile with stacktrace support])])",
          "220: AC_ARG_ENABLE(dump-threads,",
          "221:   [  --enable-dump-threads   compile with thread dumping support])",
          "224: AC_ARG_ENABLE(regex-debug,",
          "225:   [  --enable-regex-debug    compile with regex debugging support])",
          "226: AC_ARG_ENABLE(tsm-debug,",
          "",
          "[Removed Lines]",
          "222: AC_ARG_ENABLE(select-debug,",
          "223:   [  --enable-select-debug   compile with select debugging support])",
          "",
          "[Added Lines]",
          "222: AC_ARG_ENABLE(epoll-debug,",
          "223:   [  --enable-epoll-debug    compile with epoll_wait() debugging support])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "535: AC_CHECK_FUNCS([inotify_init1], [add_system_opt([INOTIFY_INIT1])])",
          "536: dnl - vsyslog() Not defined by Posix, but available in glibc and musl",
          "537: AC_CHECK_FUNCS([vsyslog], [add_system_opt([VSYSLOG])])",
          "539: # glibc uses unsigned int as 3rd parameter to __assert_fail(), musl uses int.",
          "540: AC_COMPILE_IFELSE([AC_LANG_SOURCE([[",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: dnl - epoll_create1() since Linux  2.6.27 and glibc 2.9",
          "539: AC_CHECK_FUNCS([epoll_create1], [add_system_opt([EPOLL_CREATE1])])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1748: fi",
          "1750: dnl ----[ select() debugging support or not ? ]----",
          "1755: else",
          "1757: fi",
          "1759: dnl ----[ regex debugging support or not ? ]----",
          "",
          "[Removed Lines]",
          "1751: if test \"${enable_select_debug}\" = yes; then",
          "1752:   AC_DEFINE([_SELECT_DEBUG_], [ 1 ], [Define to 1 to build with select debugging support])",
          "1753:   ENABLE_SELECT_DEBUG=Yes",
          "1754:   add_config_opt([SELECT_DEBUG])",
          "1756:   ENABLE_SELECT_DEBUG=No",
          "",
          "[Added Lines]",
          "1753: if test \"${enable_epoll_debug}\" = yes; then",
          "1754:   AC_DEFINE([_EPOLL_DEBUG_], [ 1 ], [Define to 1 to build with epoll_wait() debugging support])",
          "1755:   ENABLE_EPOLL_DEBUG=Yes",
          "1756:   add_config_opt([EPOLL_DEBUG])",
          "1758:   ENABLE_EPOLL_DEBUG=No",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1936: if test ${ENABLE_DUMP_THREADS} = Yes; then",
          "1937:   echo \"Thread debugging         : ${ENABLE_DUMP_THREADS}\"",
          "1938: fi",
          "1941: fi",
          "1942: if test ${ENABLE_REGEX_DEBUG} = Yes; then",
          "1943:   echo \"regex debugging          : ${ENABLE_REGEX_DEBUG}\"",
          "",
          "[Removed Lines]",
          "1939: if test ${ENABLE_SELECT_DEBUG} = Yes; then",
          "1940:   echo \"Select() debugging       : ${ENABLE_SELECT_DEBUG}\"",
          "",
          "[Added Lines]",
          "1941: if test ${ENABLE_EPOLL_DEBUG} = Yes; then",
          "1942:   echo \"epoll_wait() debugging   : ${ENABLE_EPOLL_DEBUG}\"",
          "",
          "---------------"
        ],
        "genhash/layer4.c||genhash/layer4.c": [
          "File: genhash/layer4.c -> genhash/layer4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     sock_obj->lock = 0;",
          "204:     thread_add_event(thread->master,",
          "205:        http_request_thread, sock_obj, 0);",
          "206:    } else {",
          "207:     DBG(\"Connection trouble to: [%s]:%d.\\n\",",
          "208:         req->ipaddress,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:     thread_del_write(thread);",
          "",
          "---------------"
        ],
        "genhash/main.c||genhash/main.c": [
          "File: genhash/main.c -> genhash/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: static void",
          "54: signal_init(void)",
          "55: {",
          "57:  signal_set(SIGHUP, sigend, NULL);",
          "58:  signal_set(SIGINT, sigend, NULL);",
          "59:  signal_set(SIGTERM, sigend, NULL);",
          "",
          "[Removed Lines]",
          "56:  signal_handler_init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:  init_ssl();",
          "273:  master = thread_make_master();",
          "278:  init_sock();",
          "",
          "[Removed Lines]",
          "270:  signal_init();",
          "275:  add_signal_read_thread();",
          "",
          "[Added Lines]",
          "272:  signal_init();",
          "",
          "---------------"
        ],
        "keepalived/bfd/bfd_daemon.c||keepalived/bfd/bfd_daemon.c": [
          "File: keepalived/bfd/bfd_daemon.c -> keepalived/bfd/bfd_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  if (__test_bit(CONFIG_TEST_BIT, &debug))",
          "69:   return;",
          "74:  pidfile_rm(bfd_pidfile);",
          "",
          "[Removed Lines]",
          "71:  signal_handler_destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: static void",
          "203: bfd_signal_init(void)",
          "204: {",
          "206:  signal_set(SIGHUP, sigreload_bfd, NULL);",
          "207:  signal_set(SIGINT, sigend_bfd, NULL);",
          "208:  signal_set(SIGTERM, sigend_bfd, NULL);",
          "",
          "[Removed Lines]",
          "205:  signal_handler_child_init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "351: #endif",
          "352:     global_data->instance_name);",
          "356: #ifdef _MEM_CHECK_",
          "357:  mem_log_init(PROG_BFD, \"BFD child process\");",
          "358: #endif",
          "",
          "[Removed Lines]",
          "354:  signal_handler_destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "399: #else",
          "405:  stop_bfd(EXIT_SUCCESS);",
          "",
          "[Removed Lines]",
          "402:  launch_scheduler();",
          "",
          "[Added Lines]",
          "394:  launch_thread_scheduler(master);",
          "",
          "---------------"
        ],
        "keepalived/bfd/bfd_scheduler.c||keepalived/bfd/bfd_scheduler.c": [
          "File: keepalived/bfd/bfd_scheduler.c -> keepalived/bfd/bfd_scheduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065:   if (!reload && !bfd->passive)",
          "1066:    thread_add_event(master, bfd_sender_thread, bfd, 0);",
          "1067:  }",
          "1070: }",
          "",
          "[Removed Lines]",
          "1069:  add_signal_read_thread();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "keepalived/check/check_daemon.c||keepalived/check/check_daemon.c": [
          "File: keepalived/check/check_daemon.c -> keepalived/check/check_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:  notify_fifo_close(&global_data->notify_fifo, &global_data->lvs_notify_fifo);",
          "95:  checker_dispatcher_release();",
          "96:  thread_destroy_master(master);",
          "97:  master = NULL;",
          "",
          "[Removed Lines]",
          "94:  signal_handler_destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: static int",
          "144: checker_shutdown_backstop_thread(thread_t *thread)",
          "145: {",
          "152: }",
          "154: static void",
          "",
          "[Removed Lines]",
          "146:         log_message(LOG_ERR, \"backstop thread invoked: shutdown timer %srunning, child count %d\",",
          "147:    thread->master->shutdown_timer_running ? \"\" : \"not \", thread->master->child.count);",
          "149:         checker_terminate_phase2();",
          "151:         return 0;",
          "",
          "[Added Lines]",
          "145:  int count = 0;",
          "146:  thread_t *t;",
          "149:  if (thread->master->child.rb_node)",
          "150:   script_killall(thread->master, SIGKILL, true);",
          "152:  rb_for_each_entry(t, &thread->master->child, n)",
          "153:   count++;",
          "155:  log_message(LOG_ERR, \"backstop thread invoked: shutdown timer %srunning, child count %d\",",
          "156:    thread->master->shutdown_timer_running ? \"\" : \"not \", count);",
          "158:  if (thread->master->shutdown_timer_running)",
          "159:   thread_add_timer_shutdown(thread->master, checker_shutdown_backstop_thread, NULL, TIMER_HZ / 10);",
          "160:  else",
          "161:   thread_add_terminate_event(thread->master);",
          "163:  return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:   kernel_netlink_close();",
          "162:   script_killall(master, SIGTERM, true);",
          "",
          "[Removed Lines]",
          "161:  if (master->child.count)",
          "",
          "[Added Lines]",
          "173:  if (master->child.rb_node)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:  if (schedule_next_thread) {",
          "174:   }",
          "175:   else",
          "176:    thread_add_terminate_event(master);",
          "",
          "[Removed Lines]",
          "171:   if (master->child.count) {",
          "173:    thread_add_timer(master, checker_shutdown_backstop_thread, NULL, TIMER_HZ);",
          "",
          "[Added Lines]",
          "183:   if (master->child.rb_node) {",
          "185:    thread_add_timer_shutdown(master, checker_shutdown_backstop_thread, NULL, TIMER_HZ);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "301:  register_checkers_thread();",
          "306:  set_process_priorities(",
          "307: #ifdef _HAVE_SCHED_RT_",
          "",
          "[Removed Lines]",
          "303:  add_signal_read_thread();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "347:  checker_dispatcher_release();",
          "348:  thread_cleanup_master(master);",
          "351:  old_checkers_queue = checkers_queue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:  thread_add_base_threads(master);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "390: static void",
          "391: check_signal_init(void)",
          "392: {",
          "394:  signal_set(SIGHUP, sigreload_check, NULL);",
          "395:  signal_set(SIGINT, sigend_check, NULL);",
          "396:  signal_set(SIGTERM, sigend_check, NULL);",
          "",
          "[Removed Lines]",
          "393:  signal_handler_child_init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "511:  }",
          "516:  master = thread_make_master();",
          "517: #endif",
          "",
          "[Removed Lines]",
          "514:  signal_handler_destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "534: #endif",
          "540:  if (two_phase_terminate)",
          "",
          "[Removed Lines]",
          "537:  launch_scheduler();",
          "",
          "[Added Lines]",
          "545:  launch_thread_scheduler(master);",
          "",
          "---------------"
        ],
        "keepalived/check/check_dns.c||keepalived/check/check_dns.c": [
          "File: keepalived/check/check_dns.c -> keepalived/check/check_dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"old_socket.h\"",
          "42: #endif",
          "43: #include \"layer4.h\"",
          "45: #ifdef _DEBUG_",
          "46: #define DNS_DBG(args...) dns_log_message(thread, LOG_DEBUG, ## args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #include \"scheduler.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  DNS_DBG(\"final error=%d attempts=%d retry=%d\", error,",
          "119:   checker->retry_it, checker->retry);",
          "121:  close(thread->u.fd);",
          "123:  if (error) {",
          "124:   if (checker->is_up || !checker->has_run) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:  thread_event_cancel(thread);",
          "124:  thread->u.fd = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "317:  thread_add_read(thread->master, dns_recv_thread, checker, thread->u.fd,",
          "318:    timeout);",
          "320:  return 0;",
          "321: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:  thread_del_write(thread);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329:  checker_t *checker = THREAD_ARG(thread);",
          "331:  status = socket_state(thread, dns_check_thread);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:  if (thread->type == THREAD_WRITE_TIMEOUT) {",
          "336:   dns_final(thread, 1, \"write timeout to socket.\");",
          "337:   return 0;",
          "338:  }",
          "",
          "---------------"
        ],
        "keepalived/check/check_http.c||keepalived/check/check_http.c": [
          "File: keepalived/check/check_http.c -> keepalived/check/check_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1402:  thread_add_read(thread->master, http_response_thread, checker,",
          "1403:    thread->u.fd, timeout);",
          "1404:  return 1;",
          "1405: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1404:  thread_del_write(thread);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1452:        http_check_thread,",
          "1453:        THREAD_ARG(thread),",
          "1454:        thread->u.fd, timeout);",
          "1455:      break;",
          "1456:     case SSL_ERROR_WANT_WRITE:",
          "1457:      thread_add_write(thread->master,",
          "1458:         http_check_thread,",
          "1459:         THREAD_ARG(thread),",
          "1460:         thread->u.fd, timeout);",
          "1461:      break;",
          "1462:     default:",
          "1463:      ret = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1456:      thread_del_write(thread);",
          "1463:      thread_del_read(thread);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1478:       http_request_thread, checker,",
          "1479:       thread->u.fd,",
          "1480:       checker->co->connection_to);",
          "1481:   } else {",
          "1482:    DBG(\"Connection trouble to: %s.\"",
          "1483:       , FMT_HTTP_RS(checker));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1484:    thread_del_read(thread);",
          "",
          "---------------"
        ],
        "keepalived/check/check_smtp.c||keepalived/check/check_smtp.c": [
          "File: keepalived/check/check_smtp.c -> keepalived/check/check_smtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:  thread_add_read(thread->master, smtp_get_line_cb, checker,",
          "479:   thread->u.fd, smtp_host->connection_to);",
          "480:  return;",
          "481: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:  thread_del_write(thread);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:  thread_add_write(thread->master, smtp_put_line_cb, checker,",
          "552:     thread->u.fd, smtp_host->connection_to);",
          "553:  return;",
          "554: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:  thread_del_read(thread);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609:    if (smtp_get_status(thread) != 220) {",
          "610:     smtp_final(thread, 1, \"Bad greeting banner from server %s\"",
          "611:            , FMT_SMTP_RS(smtp_host));",
          "614:    }",
          "625:    break;",
          "628:   case SMTP_SENT_HELO:",
          "629:    smtp_checker->state = SMTP_RECV_HELO;",
          "630:    smtp_get_line(thread, smtp_engine_thread);",
          "632:    break;",
          "",
          "[Removed Lines]",
          "613:     return 0;",
          "620:    smtp_checker->state = SMTP_SENT_HELO;",
          "621:    snprintf(smtp_checker->buff, SMTP_BUFF_MAX, \"HELO %s\\r\\n\",",
          "622:      smtp_checker->helo_name);",
          "623:    smtp_put_line(thread, smtp_engine_thread);",
          "624:    return 0;",
          "631:    return 0;",
          "",
          "[Added Lines]",
          "614:    } else {",
          "619:     smtp_checker->state = SMTP_SENT_HELO;",
          "620:     snprintf(smtp_checker->buff, SMTP_BUFF_MAX, \"HELO %s\\r\\n\",",
          "621:       smtp_checker->helo_name);",
          "622:     smtp_put_line(thread, smtp_engine_thread);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "637:    if (smtp_get_status(thread) != 250) {",
          "638:     smtp_final(thread, 1, \"Bad HELO response from server %s\"",
          "639:            , FMT_SMTP_RS(smtp_host));",
          "642:    }",
          "648:    break;",
          "651:   case SMTP_SENT_QUIT:",
          "652:    smtp_checker->state = SMTP_RECV_QUIT;",
          "653:    smtp_get_line(thread, smtp_engine_thread);",
          "655:    break;",
          "658:   case SMTP_RECV_QUIT:",
          "659:    smtp_final(thread, 0, NULL);",
          "661:    break;",
          "662:  }",
          "666:  return 0;",
          "667: }",
          "",
          "[Removed Lines]",
          "641:     return 0;",
          "644:    smtp_checker->state = SMTP_SENT_QUIT;",
          "645:    snprintf(smtp_checker->buff, SMTP_BUFF_MAX, \"QUIT\\r\\n\");",
          "646:    smtp_put_line(thread, smtp_engine_thread);",
          "647:    return 0;",
          "654:    return 0;",
          "660:    return 0;",
          "665:  smtp_final(thread, 1, \"Unknown smtp engine state encountered\");",
          "",
          "[Added Lines]",
          "638:    } else {",
          "639:     smtp_checker->state = SMTP_SENT_QUIT;",
          "640:     snprintf(smtp_checker->buff, SMTP_BUFF_MAX, \"QUIT\\r\\n\");",
          "641:     smtp_put_line(thread, smtp_engine_thread);",
          "654:    break;",
          "656:   default:",
          "658:    smtp_final(thread, 1, \"Unknown smtp engine state encountered\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "683:   case connect_error:",
          "684:    smtp_final(thread, 1, \"Error connecting to server %s\"",
          "685:           , FMT_SMTP_RS(smtp_host));",
          "687:    break;",
          "689:   case connect_timeout:",
          "690:    smtp_final(thread, 1, \"Connection timeout to server %s\"",
          "691:           , FMT_SMTP_RS(smtp_host));",
          "693:    break;",
          "695:   case connect_success:",
          "",
          "[Removed Lines]",
          "686:    return 0;",
          "692:    return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "700:    smtp_checker->state = SMTP_START;",
          "701:    smtp_engine_thread(thread);",
          "703:    break;",
          "704:  }",
          "709:  return 0;",
          "710: }",
          "",
          "[Removed Lines]",
          "702:    return 0;",
          "707:  smtp_final(thread, 1, \"Unknown connection error to server %s\"",
          "708:         , FMT_SMTP_RS(smtp_host));",
          "",
          "[Added Lines]",
          "696:    break;",
          "698:   default:",
          "700:    smtp_final(thread, 1, \"Unknown connection error to server %s\"",
          "701:           , FMT_SMTP_RS(smtp_host));",
          "",
          "---------------"
        ],
        "keepalived/core/layer4.c||keepalived/core/layer4.c": [
          "File: keepalived/core/layer4.c -> keepalived/core/layer4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:  if (status == EINPROGRESS) {",
          "140:   timer_min = timer_sub_now(thread->sands);",
          "141:   thread_add_write(thread->master, func, THREAD_ARG(thread),",
          "142:      thread->u.fd, -timer_long(timer_min));",
          "143:   return connect_in_progress;",
          "147:  }",
          "150: }",
          "152: #ifdef _WITH_LVS_",
          "",
          "[Removed Lines]",
          "144:  } else if (status != 0) {",
          "145:   close(thread->u.fd);",
          "146:   return connect_error;",
          "149:  return connect_success;",
          "",
          "[Added Lines]",
          "139:  if (status == 0)",
          "140:   return connect_success;",
          "149:  close(thread->u.fd);",
          "150:  return connect_error;",
          "",
          "---------------"
        ],
        "keepalived/core/main.c||keepalived/core/main.c": [
          "File: keepalived/core/main.c -> keepalived/core/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "406: {",
          "407: #ifndef _DEBUG_",
          "410:  thread_destroy_master(master);",
          "412: #ifdef _WITH_VRRP_",
          "",
          "[Removed Lines]",
          "409:  signal_handler_destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "807: static void",
          "808: signal_init(void)",
          "809: {",
          "811: #ifndef _DEBUG_",
          "812:  signal_set(SIGHUP, propogate_signal, NULL);",
          "813:  signal_set(SIGUSR1, propogate_signal, NULL);",
          "",
          "[Removed Lines]",
          "810:  signal_handler_init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1561:  if (!pidfile_write(main_pidfile, getpid()))",
          "1562:   goto end;",
          "1568:  master = thread_make_master();",
          "1574:  if (!start_keepalived())",
          "1575:   log_message(LOG_INFO, \"Warning - keepalived has no configuration to run\");",
          "1581:  stop_keepalived();",
          "",
          "[Removed Lines]",
          "1565:  signal_init();",
          "1570:  add_signal_read_thread();",
          "1578:  launch_scheduler();",
          "",
          "[Added Lines]",
          "1566:  signal_init();",
          "1573:  launch_thread_scheduler(master);",
          "",
          "---------------"
        ],
        "keepalived/core/smtp.c||keepalived/core/smtp.c": [
          "File: keepalived/core/smtp.c -> keepalived/core/smtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #ifdef _WITH_LVS_",
          "40: #include \"check_api.h\"",
          "41: #endif",
          "46: static int connection_error(thread_t *);",
          "47: static int connection_in_progress(thread_t *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #ifndef _SMTP_ALERT_DEBUG_",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: };",
          "86: static void",
          "87: free_smtp_all(smtp_t * smtp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:  return list_element(global_data->email, smtp->email_it);",
          "100: }",
          "103: static int",
          "104: connection_error(thread_t * thread)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: #ifndef _SMTP_ALERT_DEBUG_",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "284:  if (smtp->stage != ERROR) {",
          "285:   thread_add_read(thread->master, smtp_read_thread, smtp,",
          "286:     thread->u.fd, global_data->smtp_connection_to);",
          "287:  } else {",
          "288:   log_message(LOG_INFO, \"Can not send data to remote SMTP server %s.\"",
          "289:         , FMT_SMTP_HOST());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:   thread_del_write(thread);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "450:  return 0;",
          "451: }",
          "",
          "[Removed Lines]",
          "457: static void",
          "458: build_to_header_rcpt_addrs(smtp_t *smtp)",
          "459: {",
          "460:  char *fetched_email;",
          "461:  char *email_to_addrs;",
          "462:  size_t bytes_available = SMTP_BUFFER_MAX - 1;",
          "463:  size_t bytes_to_write;",
          "465:  if (smtp == NULL)",
          "466:   return;",
          "468:  email_to_addrs = smtp->email_to;",
          "469:  smtp->email_it = 0;",
          "471:  while (1) {",
          "472:   fetched_email = fetch_next_email(smtp);",
          "473:   if (fetched_email == NULL)",
          "474:    break;",
          "476:   bytes_to_write = strlen(fetched_email);",
          "477:   if (!smtp->email_it) {",
          "478:    if (bytes_available < bytes_to_write)",
          "479:     break;",
          "480:   } else {",
          "481:    if (bytes_available < 2 + bytes_to_write)",
          "482:     break;",
          "487:    bytes_available -= 2;",
          "488:   }",
          "490:   if (snprintf(email_to_addrs, bytes_to_write + 1, \"%s\", fetched_email) != (int)bytes_to_write) {",
          "492:    break;",
          "493:   }",
          "495:   email_to_addrs += bytes_to_write;",
          "496:   bytes_available -= bytes_to_write;",
          "497:   smtp->email_it++;",
          "498:  }",
          "500:  smtp->email_it = 0;",
          "501: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "611:  thread_add_event(master, SMTP_FSM[status].send, smtp, smtp->fd);",
          "612: }",
          "615: void",
          "616: smtp_alert(smtp_msg_t msg_type, void* data, const char *subject, const char *body)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566: #else",
          "568: static void",
          "569: smtp_log_to_file(smtp_t *smtp)",
          "570: {",
          "571:  FILE *fp = fopen(\"/tmp/smtp-alert.log\", \"a\");",
          "572:  struct tm tm;",
          "573:  char time_buf[25];",
          "574:  int time_buf_len;",
          "576:  localtime_r(&time_now.tv_sec, &tm);",
          "577:  time_buf_len = strftime(time_buf, sizeof time_buf, \"%a %b %e %X %Y\", &tm);",
          "579:  fprintf(fp, \"%s: %s -> %s\\n\"",
          "580:       \"%*sSubject: %s\\n\"",
          "581:       \"%*sBody:    %s\\n\\n\",",
          "582:       time_buf, global_data->email_from, smtp->email_to,",
          "583:       time_buf_len - 7, \"\", smtp->subject,",
          "584:       time_buf_len - 7, \"\", smtp->body);",
          "586:  fclose(fp);",
          "588:  free_smtp_all(smtp);",
          "589: }",
          "590: #endif",
          "596: static void",
          "597: build_to_header_rcpt_addrs(smtp_t *smtp)",
          "598: {",
          "599:  char *fetched_email;",
          "600:  char *email_to_addrs;",
          "601:  size_t bytes_available = SMTP_BUFFER_MAX - 1;",
          "602:  size_t bytes_to_write;",
          "604:  if (smtp == NULL)",
          "605:   return;",
          "607:  email_to_addrs = smtp->email_to;",
          "608:  smtp->email_it = 0;",
          "610:  while (1) {",
          "611:   fetched_email = fetch_next_email(smtp);",
          "612:   if (fetched_email == NULL)",
          "613:    break;",
          "615:   bytes_to_write = strlen(fetched_email);",
          "616:   if (!smtp->email_it) {",
          "617:    if (bytes_available < bytes_to_write)",
          "618:     break;",
          "619:   } else {",
          "620:    if (bytes_available < 2 + bytes_to_write)",
          "621:     break;",
          "626:    bytes_available -= 2;",
          "627:   }",
          "629:   if (snprintf(email_to_addrs, bytes_to_write + 1, \"%s\", fetched_email) != (int)bytes_to_write) {",
          "631:    break;",
          "632:   }",
          "634:   email_to_addrs += bytes_to_write;",
          "635:   bytes_available -= bytes_to_write;",
          "636:   smtp->email_it++;",
          "637:  }",
          "639:  smtp->email_it = 0;",
          "640: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "693:  build_to_header_rcpt_addrs(smtp);",
          "695: #ifdef _SMTP_ALERT_DEBUG_",
          "717:  smtp_connect(smtp);",
          "718: }",
          "720: #ifdef _TIMER_DEBUG_",
          "721: void",
          "722: print_smtp_addresses(void)",
          "723: {",
          "724:  log_message(LOG_INFO, \"Address of body_cmd() is 0x%p\", body_cmd);",
          "725:  log_message(LOG_INFO, \"Address of connection_error() is 0x%p\", connection_error);",
          "726:  log_message(LOG_INFO, \"Address of connection_in_progress() is 0x%p\", connection_in_progress);",
          "",
          "[Removed Lines]",
          "696:  FILE *fp = fopen(\"/tmp/smtp-alert.log\", \"a\");",
          "697:  struct tm tm;",
          "698:  char time_buf[25];",
          "699:  int time_buf_len;",
          "701:  localtime_r(&time_now.tv_sec, &tm);",
          "702:  time_buf_len = strftime(time_buf, sizeof time_buf, \"%a %b %e %X %Y\", &tm);",
          "704:  fprintf(fp, \"%s: %s -> %s\\n\"",
          "705:       \"%*sSubject: %s\\n\"",
          "706:       \"%*sBody:    %s\\n\\n\",",
          "707:       time_buf, global_data->email_from, smtp->email_to,",
          "708:       time_buf_len - 7, \"\", smtp->subject,",
          "709:       time_buf_len - 7, \"\", smtp->body);",
          "711:  fclose(fp);",
          "713:  free_smtp_all(smtp);",
          "714:  return;",
          "715: #endif",
          "",
          "[Added Lines]",
          "724:  smtp_log_to_file(smtp);",
          "725: #else",
          "727: #endif",
          "734: #ifndef _SMTP_ALERT_DEBUG_",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "733:  log_message(LOG_INFO, \"Address of rcpt_cmd() is 0x%p\", rcpt_cmd);",
          "734:  log_message(LOG_INFO, \"Address of smtp_read_thread() is 0x%p\", smtp_read_thread);",
          "735:  log_message(LOG_INFO, \"Address of smtp_send_thread() is 0x%p\", smtp_send_thread);",
          "736: }",
          "737: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747: #endif",
          "",
          "---------------"
        ],
        "keepalived/core/snmp.c||keepalived/core/snmp.c": [
          "File: keepalived/core/snmp.c -> keepalived/core/snmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:       sizeof(global_vars)/sizeof(struct variable8));",
          "371:  init_snmp(global_name);",
          "373:  snmp_running = true;",
          "374: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:  master->snmp_timer_thread = thread_add_timer(master, snmp_timeout_thread, 0, TIMER_NEVER);",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_daemon.c||keepalived/vrrp/vrrp_daemon.c": [
          "File: keepalived/vrrp/vrrp_daemon.c -> keepalived/vrrp/vrrp_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:  }",
          "141: #endif",
          "146:  kernel_netlink_close_cmd();",
          "147:  thread_destroy_master(master);",
          "148:  master = NULL;",
          "",
          "[Removed Lines]",
          "144:  signal_handler_destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: }",
          "195: static int",
          "197: {",
          "199:  thread_add_terminate_event(thread->master);",
          "201:  return 0;",
          "202: }",
          "204: static int",
          "206: {",
          "212:  return 0;",
          "213: }",
          "",
          "[Removed Lines]",
          "196: vrrp_shutdown_timer_thread(thread_t *thread)",
          "198:  thread->master->shutdown_timer_running = false;",
          "205: vrrp_shutdown_backstop_thread(thread_t *thread)",
          "207:  log_message(LOG_ERR, \"Backstop thread invoked: shutdown timer %srunning, child count %d\",",
          "208:    thread->master->shutdown_timer_running ? \"\" : \"not \", thread->master->child.count);",
          "210:  thread_add_terminate_event(thread->master);",
          "",
          "[Added Lines]",
          "193: vrrp_shutdown_backstop_thread(thread_t *thread)",
          "195:  int count = 0;",
          "196:  thread_t *t;",
          "199:  if (thread->master->child.rb_node)",
          "200:   script_killall(thread->master, SIGKILL, true);",
          "202:  rb_for_each_entry(t, &thread->master->child, n)",
          "203:   count++;",
          "205:  log_message(LOG_ERR, \"Backstop thread invoked: shutdown timer %srunning, child count %d\",",
          "206:    thread->master->shutdown_timer_running ? \"\" : \"not \", count);",
          "214: vrrp_shutdown_timer_thread(thread_t *thread)",
          "216:  thread->master->shutdown_timer_running = false;",
          "218:  if (thread->master->child.rb_node)",
          "219:   thread_add_timer_shutdown(thread->master, vrrp_shutdown_backstop_thread, NULL, TIMER_HZ / 10);",
          "220:  else",
          "221:   thread_add_terminate_event(thread->master);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217: vrrp_terminate_phase1(bool schedule_next_thread)",
          "218: {",
          "221:   script_killall(master, SIGTERM, true);",
          "223:  kernel_netlink_close_monitor();",
          "",
          "[Removed Lines]",
          "220:  if (master->child.count)",
          "",
          "[Added Lines]",
          "231:  if (master->child.rb_node)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:    thread_add_timer_shutdown(master, vrrp_shutdown_timer_thread, NULL, TIMER_HZ);",
          "270:    master->shutdown_timer_running = true;",
          "271:   }",
          "274:    thread_add_timer_shutdown(master, vrrp_shutdown_backstop_thread, NULL, TIMER_HZ);",
          "275:   }",
          "",
          "[Removed Lines]",
          "272:   else if (master->child.count) {",
          "",
          "[Added Lines]",
          "283:   else if (master->child.rb_node) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "588: static void",
          "589: vrrp_signal_init(void)",
          "590: {",
          "592:  signal_set(SIGHUP, sigreload_vrrp, NULL);",
          "593:  signal_set(SIGINT, sigend_vrrp, NULL);",
          "594:  signal_set(SIGTERM, sigend_vrrp, NULL);",
          "",
          "[Removed Lines]",
          "591:  signal_handler_child_init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "624:  vrrp_dispatcher_release(vrrp_data);",
          "625:  thread_cleanup_master(master);",
          "626: #ifdef _WITH_LVS_",
          "627:  if (global_data->lvs_syncd.ifname)",
          "628:   ipvs_syncd_cmd(IPVS_STOPDAEMON, &global_data->lvs_syncd,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:  thread_add_base_threads(master);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "793: #endif",
          "794:     global_data->instance_name);",
          "798: #ifdef _MEM_CHECK_",
          "799:  mem_log_init(PROG_VRRP, \"VRRP Child process\");",
          "800: #endif",
          "",
          "[Removed Lines]",
          "796:  signal_handler_destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "839: #endif",
          "845:  vrrp_terminate_phase2(EXIT_SUCCESS);",
          "",
          "[Removed Lines]",
          "842:  launch_scheduler();",
          "",
          "[Added Lines]",
          "852:  launch_thread_scheduler(master);",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_if.c||keepalived/vrrp/vrrp_if.c": [
          "File: keepalived/vrrp/vrrp_if.c -> keepalived/vrrp/vrrp_if.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1139:    vrrp->sockets->fd_out = open_vrrp_send_socket(vrrp->sockets->family, vrrp->sockets->proto,",
          "1140:        ifp, vrrp->sockets->unicast);",
          "1146:   vrrp->sockets->ifindex = vrrp->ifp->ifindex;",
          "1148:   alloc_vrrp_fd_bucket(vrrp);",
          "",
          "[Removed Lines]",
          "1142:   if (vrrp->sockets->fd_out > master->max_fd)",
          "1143:    master->max_fd = vrrp->sockets->fd_out;",
          "1144:   if (vrrp->sockets->fd_in > master->max_fd)",
          "1145:    master->max_fd = vrrp->sockets->fd_in;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_scheduler.c||keepalived/vrrp/vrrp_scheduler.c": [
          "File: keepalived/vrrp/vrrp_scheduler.c -> keepalived/vrrp/vrrp_scheduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:   vrrp_init_script(vrrp_data->vrrp_script);",
          "436:  }",
          "440: #ifdef _WITH_BFD_",
          "441:  if (!LIST_ISEMPTY(vrrp_data->vrrp)) {",
          "443:   bfd_thread = thread_add_read(master, vrrp_bfd_thread, NULL,",
          "444:           bfd_vrrp_event_pipe[0], TIMER_NEVER);",
          "",
          "[Removed Lines]",
          "438:  add_signal_read_thread();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Makefile.am||liMakefile.am": [
          "File: lib/Makefile.am -> liMakefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: liblib_a_SOURCES = memory.c utils.c notify.c timer.c scheduler.c \\",
          "19:  vector.c list.c html.c parser.c signals.c logger.c assert.c \\",
          "20:  bitops.h timer.h scheduler.h vector.h parser.h \\",
          "21:  signals.h notify.h logger.h list.h memory.h html.h utils.h \\",
          "24: liblib_a_LIBADD  =",
          "25: EXTRA_liblib_a_SOURCES =",
          "",
          "[Removed Lines]",
          "22:  keepalived_magic.h",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/list_head.c||lilist_head.c": [
          "File: lib/list_head.c -> lilist_head.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/list_head.h||lilist_head.h": [
          "File: lib/list_head.h -> lilist_head.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/notify.c||linotify.c": [
          "File: lib/notify.c -> linotify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:   thread_add_terminate_event(m);",
          "423:  return 0;",
          "",
          "[Removed Lines]",
          "420:  if (!m->child.count && !m->shutdown_timer_running)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:  p_pgid = getpgid(0);",
          "445:   c_pgid = getpgid(thread->u.c.pid);",
          "446:   if (c_pgid != p_pgid)",
          "447:    kill(-c_pgid, signo);",
          "",
          "[Removed Lines]",
          "444:  for (thread = m->child.head; thread; thread = thread->next) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/rbtree.c||lirbtree.c": [
          "File: lib/rbtree.c -> lirbtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/rbtree.h||lirbtree.h": [
          "File: lib/rbtree.h -> lirbtree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/scheduler.c||lischeduler.c": [
          "File: lib/scheduler.c -> lischeduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <errno.h>",
          "40: #include <sys/wait.h>",
          "41: #include <sys/timerfd.h>",
          "42: #include <unistd.h>",
          "43: #ifdef HAVE_SIGNALFD",
          "44: #include <sys/signalfd.h>",
          "45: #endif",
          "47: #include \"scheduler.h\"",
          "48: #include \"memory.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: #include \"logger.h\"",
          "52: #include \"bitops.h\"",
          "53: #include \"git-commit.h\"",
          "58: thread_master_t *master = NULL;",
          "",
          "[Removed Lines]",
          "54: #include <sys/utsname.h>",
          "55: #include <linux/version.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85: static void (*child_finder_destroy)(void);",
          "86: static size_t child_finder_list_size;",
          "90: static size_t",
          "91: get_pid_hash(pid_t pid)",
          "",
          "[Removed Lines]",
          "88: static int thread_timerfd_handler(thread_t *);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:  if (LIST_ISEMPTY(l))",
          "110:   return NULL;",
          "114:   if (thread->u.c.pid == pid)",
          "115:    return thread;",
          "116:  }",
          "",
          "[Removed Lines]",
          "112:  for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {",
          "113:   thread = ELEMENT_DATA(e);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357: }",
          "358: #endif",
          "361: thread_master_t *",
          "362: thread_make_master(void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "366:  new = (thread_master_t *) MALLOC(sizeof (thread_master_t));",
          "369:  new->timer_fd = timerfd_create(CLOCK_MONOTONIC,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "387:   log_message(LOG_INFO, \"Unable to set CLOEXEC on timer_fd - %s (%d)\", strerror(errno), errno);",
          "388: #endif",
          "392:  return new;",
          "393: }",
          "398: {",
          "421: }",
          "426: {",
          "437:  }",
          "460: }",
          "464: {",
          "468: }",
          "471: static void",
          "472: thread_clean_unuse(thread_master_t * m)",
          "473: {",
          "487:   m->alloc--;",
          "488:  }",
          "489: }",
          "492: static void",
          "494: {",
          "495:  assert(m != NULL);",
          "498:  assert(thread->type == THREAD_UNUSED);",
          "500: }",
          "503: static void",
          "505: {",
          "519:  }",
          "520: }",
          "",
          "[Removed Lines]",
          "390:  thread_add_read(new, thread_timerfd_handler, NULL, new->timer_fd, TIMER_NEVER);",
          "396: static void",
          "397: thread_list_add(thread_list_t * list, thread_t * thread)",
          "399:  thread->next = NULL;",
          "400:  thread->prev = list->tail;",
          "401:  if (list->tail)",
          "402:   list->tail->next = thread;",
          "403:  else",
          "404:   list->head = thread;",
          "405:  list->tail = thread;",
          "406:  list->count++;",
          "407: }",
          "410: static void",
          "411: thread_list_add_before(thread_list_t * list, thread_t * point, thread_t * thread)",
          "412: {",
          "413:  thread->next = point;",
          "414:  thread->prev = point->prev;",
          "415:  if (point->prev)",
          "416:   point->prev->next = thread;",
          "417:  else",
          "418:   list->head = thread;",
          "419:  point->prev = thread;",
          "420:  list->count++;",
          "424: static void",
          "425: thread_list_add_timeval(thread_list_t * list, thread_t * thread)",
          "427:  thread_t *tt;",
          "429:  if (thread->sands.tv_sec == TIMER_DISABLED) {",
          "430:   thread_list_add(list, thread);",
          "431:   return;",
          "432:  }",
          "434:  for (tt = list->head; tt; tt = tt->next) {",
          "435:   if (tt->sands.tv_sec == TIMER_DISABLED || timercmp(&thread->sands, &tt->sands, <=))",
          "436:    break;",
          "439:  if (tt)",
          "440:   thread_list_add_before(list, tt, thread);",
          "441:  else",
          "442:   thread_list_add(list, thread);",
          "443: }",
          "446: static thread_t *",
          "447: thread_list_delete(thread_list_t * list, thread_t * thread)",
          "448: {",
          "449:  if (thread->next)",
          "450:   thread->next->prev = thread->prev;",
          "451:  else",
          "452:   list->tail = thread->prev;",
          "453:  if (thread->prev)",
          "454:   thread->prev->next = thread->next;",
          "455:  else",
          "456:   list->head = thread->next;",
          "457:  thread->next = thread->prev = NULL;",
          "458:  list->count--;",
          "459:  return thread;",
          "462: static void",
          "463: thread_list_make_ready(thread_list_t *list, thread_t *thread, thread_master_t *m, thread_type_t type)",
          "465:  thread_list_delete(list, thread);",
          "466:  thread->type = type;",
          "467:  thread_list_add(&m->ready, thread);",
          "474:  thread_t *thread;",
          "476:  thread = m->unuse.head;",
          "477:  while (thread) {",
          "478:   thread_t *t;",
          "480:   t = thread;",
          "481:   thread = t->next;",
          "483:   thread_list_delete(&m->unuse, t);",
          "486:   FREE(t);",
          "493: thread_add_unuse(thread_master_t * m, thread_t * thread)",
          "496:  assert(thread->next == NULL);",
          "497:  assert(thread->prev == NULL);",
          "499:  thread_list_add(&m->unuse, thread);",
          "504: thread_destroy_list(thread_master_t *m, thread_list_t *thread_list)",
          "506:  thread_t *thread;",
          "508:  thread = thread_list->head;",
          "510:  while (thread) {",
          "511:   thread_t *t;",
          "513:   t = thread;",
          "514:   thread = t->next;",
          "516:   thread_list_delete(thread_list, t);",
          "517:   t->type = THREAD_UNUSED;",
          "518:   thread_add_unuse(m, t);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "524: thread_cleanup_master(thread_master_t * m)",
          "525: {",
          "531:  thread_destroy_list(m, &m->event);",
          "532:  thread_destroy_list(m, &m->ready);",
          "534:  destroy_child_finder();",
          "541:  thread_clean_unuse(m);",
          "544: }",
          "547: void",
          "548: thread_destroy_master(thread_master_t * m)",
          "549: {",
          "551:   close(m->timer_fd);",
          "553:  thread_cleanup_master(m);",
          "554:  FREE(m);",
          "555: }",
          "558: static thread_t *",
          "560: {",
          "564: }",
          "567: static thread_t *",
          "569: {",
          "570:  thread_t *new;",
          "576:   return new;",
          "577:  }",
          "580:  m->alloc++;",
          "581:  return new;",
          "582: }",
          "585: thread_t *",
          "588: {",
          "589:  thread_t *thread;",
          "591:  assert(m != NULL);",
          "595:   return NULL;",
          "596:  }",
          "598:  thread = thread_new(m);",
          "599:  thread->type = THREAD_READ;",
          "601:  thread->master = m;",
          "602:  thread->func = func;",
          "603:  thread->arg = arg;",
          "605:  thread->u.fd = fd;",
          "612:  if (timer == TIMER_NEVER)",
          "",
          "[Removed Lines]",
          "527:  thread_destroy_list(m, &m->read);",
          "528:  thread_destroy_list(m, &m->write);",
          "529:  thread_destroy_list(m, &m->timer);",
          "530:  thread_destroy_list(m, &m->child);",
          "537:  FD_ZERO(&m->readfd);",
          "538:  FD_ZERO(&m->writefd);",
          "543:  memset(m, 0, sizeof(*m));",
          "550:  if (m->timer_fd)",
          "559: thread_trim_head(thread_list_t * list)",
          "561:  if (list->head)",
          "562:   return thread_list_delete(list, list->head);",
          "563:  return NULL;",
          "568: thread_new(thread_master_t * m)",
          "573:  if (m->unuse.head) {",
          "574:   new = thread_trim_head(&m->unuse);",
          "575:   memset(new, 0, sizeof (thread_t));",
          "579:  new = (thread_t *) MALLOC(sizeof (thread_t));",
          "586: thread_add_read(thread_master_t * m, int (*func) (thread_t *)",
          "587:   , void *arg, int fd, unsigned long timer)",
          "593:  if (FD_ISSET(fd, &m->readfd)) {",
          "594:   log_message(LOG_WARNING, \"There is already read fd [%d]\", fd);",
          "600:  thread->id = 0;",
          "604:  FD_SET(fd, &m->readfd);",
          "608:  if (fd > m->max_fd)",
          "609:   m->max_fd = fd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "617:  }",
          "622:  return thread;",
          "623: }",
          "627: {",
          "652: }",
          "654: void",
          "",
          "[Removed Lines]",
          "620:  thread_list_add_timeval(&m->read, thread);",
          "625: static void",
          "626: thread_read_requeue(thread_master_t *m, int fd, timeval_t new_sands)",
          "628:  thread_t *tt;",
          "629:  thread_t *insert = NULL;",
          "631:  for (tt = m->read.head; tt; tt = tt->next) {",
          "632:   if (!insert && timercmp(&new_sands, &tt->sands, <=))",
          "633:    insert = tt;",
          "634:   if (tt->u.fd == fd)",
          "635:    break;",
          "636:  }",
          "638:  if (!tt)",
          "639:   return;",
          "641:  tt->sands = new_sands;",
          "643:  if (tt == insert)",
          "644:   return;",
          "646:  thread_list_delete(&m->read, tt);",
          "648:  if (insert)",
          "649:   thread_list_add_before(&m->read, insert, tt);",
          "650:  else",
          "651:   thread_list_add_timeval(&m->read, tt);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "663: thread_t *",
          "666: {",
          "667:  thread_t *thread;",
          "669:  assert(m != NULL);",
          "673:   return NULL;",
          "674:  }",
          "676:  thread = thread_new(m);",
          "677:  thread->type = THREAD_WRITE;",
          "679:  thread->master = m;",
          "680:  thread->func = func;",
          "681:  thread->arg = arg;",
          "683:  thread->u.fd = fd;",
          "690:  if (timer == TIMER_NEVER)",
          "",
          "[Removed Lines]",
          "664: thread_add_write(thread_master_t * m, int (*func) (thread_t *)",
          "665:    , void *arg, int fd, unsigned long timer)",
          "671:  if (FD_ISSET(fd, &m->writefd)) {",
          "672:   log_message(LOG_WARNING, \"There is already write fd [%d]\", fd);",
          "678:  thread->id = 0;",
          "682:  FD_SET(fd, &m->writefd);",
          "686:  if (fd > m->max_fd)",
          "687:   m->max_fd = fd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "695:  }",
          "700:  return thread;",
          "701: }",
          "704: thread_t *",
          "707: {",
          "708:  thread_t *thread;",
          "",
          "[Removed Lines]",
          "698:  thread_list_add_timeval(&m->write, thread);",
          "705: thread_add_timer(thread_master_t * m, int (*func) (thread_t *)",
          "706:    , void *arg, unsigned long timer)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "712:  thread = thread_new(m);",
          "713:  thread->type = THREAD_TIMER;",
          "715:  thread->master = m;",
          "716:  thread->func = func;",
          "717:  thread->arg = arg;",
          "",
          "[Removed Lines]",
          "714:  thread->id = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "725:  }",
          "730:  return thread;",
          "731: }",
          "733: thread_t *",
          "736: {",
          "737:  thread_t *thread = thread_add_timer(m, func, arg, timer);",
          "",
          "[Removed Lines]",
          "728:  thread_list_add_timeval(&m->timer, thread);",
          "734: thread_add_timer_shutdown(thread_master_t *m, int(*func)(thread_t *),",
          "735:      void *arg, unsigned long timer)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "745: thread_t *",
          "748: {",
          "749:  thread_t *thread;",
          "",
          "[Removed Lines]",
          "746: thread_add_child(thread_master_t * m, int (*func) (thread_t *)",
          "747:    , void * arg, pid_t pid, unsigned long timer)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "753:  thread = thread_new(m);",
          "754:  thread->type = THREAD_CHILD;",
          "756:  thread->master = m;",
          "757:  thread->func = func;",
          "758:  thread->arg = arg;",
          "",
          "[Removed Lines]",
          "755:  thread->id = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "768:  }",
          "773:  if (child_adder)",
          "774:   child_adder(thread);",
          "",
          "[Removed Lines]",
          "771:  thread_list_add_timeval(&m->child, thread);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "781: {",
          "782:  thread_t *thread;",
          "784:  set_time_now();",
          "786:   thread->func = func;",
          "787:   thread->sands = timer_add_long(time_now, timer);",
          "788:  }",
          "",
          "[Removed Lines]",
          "785:  for (thread = m->child.head; thread; thread = thread->next) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "792: thread_t *",
          "795: {",
          "796:  thread_t *thread;",
          "",
          "[Removed Lines]",
          "793: thread_add_event(thread_master_t * m, int (*func) (thread_t *)",
          "794:    , void *arg, int val)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "800:  thread = thread_new(m);",
          "801:  thread->type = THREAD_EVENT;",
          "803:  thread->master = m;",
          "804:  thread->func = func;",
          "805:  thread->arg = arg;",
          "806:  thread->u.val = val;",
          "809:  return thread;",
          "810: }",
          "",
          "[Removed Lines]",
          "802:  thread->id = 0;",
          "807:  thread_list_add(&m->event, thread);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "820:  thread = thread_new(m);",
          "821:  thread->type = type;",
          "823:  thread->master = m;",
          "824:  thread->func = func;",
          "825:  thread->arg = NULL;",
          "826:  thread->u.val = 0;",
          "829:  return thread;",
          "830: }",
          "",
          "[Removed Lines]",
          "822:  thread->id = 0;",
          "827:  thread_list_add(&m->event, thread);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "841:  return thread_add_generic_terminate_event(m, THREAD_TERMINATE_START, func);",
          "842: }",
          "847: {",
          "848:  if (!thread)",
          "851:  switch (thread->type) {",
          "852:  case THREAD_READ:",
          "863:   break;",
          "864:  case THREAD_WRITE:",
          "875:   break;",
          "876:  case THREAD_TIMER:",
          "878:   break;",
          "879:  case THREAD_CHILD:",
          "885:   break;",
          "886:  case THREAD_EVENT:",
          "889:  case THREAD_READY:",
          "890:  case THREAD_READY_FD:",
          "891:  case THREAD_READ_TIMEOUT:",
          "892:  case THREAD_WRITE_TIMEOUT:",
          "893:  case THREAD_CHILD_TIMEOUT:",
          "895:   break;",
          "896:  default:",
          "897:   break;",
          "898:  }",
          "900:  thread->type = THREAD_UNUSED;",
          "903: }",
          "905: void",
          "906: thread_cancel_read(thread_master_t *m, int fd)",
          "907: {",
          "918:   }",
          "919:  }",
          "920: }",
          "",
          "[Removed Lines]",
          "845: int",
          "846: thread_cancel(thread_t * thread)",
          "849:   return -1;",
          "853:   assert(FD_ISSET(thread->u.fd, &thread->master->readfd));",
          "854:   FD_CLR(thread->u.fd, &thread->master->readfd);",
          "855:   if (thread->master->max_fd == thread->u.fd) {",
          "857:    while (thread->master->max_fd &&",
          "858:           !FD_ISSET(thread->master->max_fd, &thread->master->readfd) &&",
          "859:           !FD_ISSET(thread->master->max_fd, &thread->master->writefd))",
          "860:     thread->master->max_fd--;",
          "861:   }",
          "862:   thread_list_delete(&thread->master->read, thread);",
          "865:   assert(FD_ISSET(thread->u.fd, &thread->master->writefd));",
          "866:   FD_CLR(thread->u.fd, &thread->master->writefd);",
          "867:   if (thread->master->max_fd == thread->u.fd) {",
          "869:    while (thread->master->max_fd &&",
          "870:           !FD_ISSET(thread->master->max_fd, &thread->master->readfd) &&",
          "871:           !FD_ISSET(thread->master->max_fd, &thread->master->writefd))",
          "872:     thread->master->max_fd--;",
          "873:   }",
          "874:   thread_list_delete(&thread->master->write, thread);",
          "877:   thread_list_delete(&thread->master->timer, thread);",
          "884:   thread_list_delete(&thread->master->child, thread);",
          "887:   thread_list_delete(&thread->master->event, thread);",
          "888:   break;",
          "894:   thread_list_delete(&thread->master->ready, thread);",
          "901:  thread_add_unuse(thread->master, thread);",
          "902:  return 0;",
          "908:  thread_t *thread;",
          "910:  thread = m->read.head;",
          "911:  while (thread) {",
          "912:   thread_t *t = thread;",
          "913:   thread = t->next;",
          "915:   if (t->u.fd == fd) {",
          "916:    thread_cancel(t);",
          "917:    return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "922: #ifdef _INCLUDE_UNUSED_CODE_",
          "924: void",
          "926: {",
          "940:   }",
          "941:  }",
          "942: }",
          "943: #endif",
          "948: {",
          "958: }",
          "963: {",
          "1010: }",
          "1014: {",
          "1027: }",
          "1031: thread_fetch_next_queue(thread_master_t *m)",
          "1032: {",
          "1034:  int sav_errno;",
          "1048:  assert(m != NULL);",
          "1053:   return &m->event;",
          "1057:   return &m->ready;",
          "1085:  }",
          "1089:  }",
          "1090: #endif",
          "1094: #ifdef _WITH_SNMP_",
          "1099: #endif",
          "1107: #endif",
          "1111:  sav_errno = errno;",
          "1114:  if (prog_type == PROG_TYPE_VRRP)",
          "1120: #endif",
          "1123:   if (sav_errno == EINTR)",
          "1124:    goto retry;",
          "1131:   }",
          "1132:   assert(0);",
          "1136:    sleep(1);",
          "1138:   goto retry;",
          "1139:  }",
          "1175:    }",
          "1178:   }",
          "1198:   }",
          "1201:  }",
          "1248:   goto retry;",
          "1250:  return &m->ready;",
          "1251: }",
          "1253: void",
          "1254: process_threads(thread_master_t *m)",
          "1255: {",
          "1256:  thread_t* thread;",
          "1258:  int thread_type;",
          "",
          "[Removed Lines]",
          "925: thread_cancel_event(thread_master_t * m, void *arg)",
          "927:  thread_t *thread;",
          "929:  thread = m->event.head;",
          "930:  while (thread) {",
          "931:   thread_t *t;",
          "933:   t = thread;",
          "934:   thread = t->next;",
          "936:   if (t->arg == arg) {",
          "937:    thread_list_delete(&m->event, t);",
          "938:    t->type = THREAD_UNUSED;",
          "939:    thread_add_unuse(m, t);",
          "946: static void",
          "947: thread_update_timer(thread_list_t *list, timeval_t *timer_min)",
          "949:  if (!list->head)",
          "950:   return;",
          "952:  if (list->head->sands.tv_sec == TIMER_DISABLED)",
          "953:   return;",
          "955:  if (!timerisset(timer_min) ||",
          "956:      timercmp(&list->head->sands, timer_min, <=))",
          "961: static void",
          "962: thread_set_timer(thread_master_t *m)",
          "964:  timeval_t timer_wait;",
          "965:  struct itimerspec its;",
          "968:  timerclear(&timer_wait);",
          "969:  thread_update_timer(&m->timer, &timer_wait);",
          "970:  thread_update_timer(&m->write, &timer_wait);",
          "971:  thread_update_timer(&m->read, &timer_wait);",
          "972:  thread_update_timer(&m->child, &timer_wait);",
          "974:  if (timerisset(&timer_wait)) {",
          "976:   set_time_now();",
          "979:   timersub(&timer_wait, &time_now, &timer_wait);",
          "981:   if (timer_wait.tv_sec < 0) {",
          "983:    timerclear(&timer_wait);",
          "984:   }",
          "985:  } else {",
          "987:   timer_wait.tv_sec = LONG_MAX;",
          "988:   timer_wait.tv_usec = 0;",
          "989:  }",
          "991:  its.it_value.tv_sec = timer_wait.tv_sec;",
          "992:  if (!timerisset(&timer_wait)) {",
          "996:   its.it_value.tv_nsec = 1;",
          "997:  }",
          "998:  else",
          "999:   its.it_value.tv_nsec = timer_wait.tv_usec * 1000;",
          "1002:  its.it_interval.tv_sec = its.it_interval.tv_nsec = 0;",
          "1004:  timerfd_settime(m->timer_fd, 0, &its, NULL);",
          "1006: #ifdef _SELECT_DEBUG_",
          "1007:  if (prog_type == PROG_TYPE_VRRP)",
          "1008:   log_message(LOG_INFO, \"setting timer_fd %lu.%9.9ld\", its.it_value.tv_sec, its.it_value.tv_nsec);",
          "1009: #endif",
          "1012: static int",
          "1013: thread_timerfd_handler(thread_t *thread)",
          "1015:  thread_master_t *m = thread->master;",
          "1016:  uint64_t expired;",
          "1017:  ssize_t len;",
          "1019:  len = read(m->timer_fd, &expired, sizeof(expired));",
          "1020:  if (len < 0)",
          "1021:   log_message(LOG_ERR, \"scheduler: Error reading on timerfd fd:%d (%m)\", m->timer_fd);",
          "1024:  thread_add_read(m, thread_timerfd_handler, NULL, m->timer_fd, TIMER_NEVER);",
          "1026:  return 0;",
          "1030: static thread_list_t *",
          "1033:  int num_fds;",
          "1035:  int last_select_errno = 0;",
          "1036:  thread_t *thread;",
          "1037:  thread_t *t;",
          "1038:  fd_set readfd;",
          "1039:  fd_set writefd;",
          "1040:  int fdsetsize;",
          "1041: #ifdef _WITH_SNMP_",
          "1042:  int snmpblock;",
          "1043:  timeval_t snmp_timer_wait;",
          "1044: #endif",
          "1045:  bool timer_expired;",
          "1046:  bool timers_done;",
          "1052:  if (m->event.head)",
          "1056:  if (m->ready.head)",
          "1059: retry:",
          "1061:  thread_set_timer(m);",
          "1064:  readfd = m->readfd;",
          "1065:  writefd = m->writefd;",
          "1068:  while (!FD_ISSET(m->max_fd, &m->readfd) &&",
          "1069:         !FD_ISSET(m->max_fd, &m->writefd) &&",
          "1070:         m->max_fd)",
          "1071:   m->max_fd--;",
          "1073:  fdsetsize = m->max_fd + 1;",
          "1075: #ifdef _WITH_SNMP_",
          "1080:  if (snmp_running) {",
          "1081:   snmpblock = true;",
          "1082:   snmp_select_info(&fdsetsize, &readfd, &snmp_timer_wait, &snmpblock);",
          "1083:   if (snmpblock)",
          "1084:    snmp_timer_wait.tv_sec = LONG_MAX;",
          "1086:  else {",
          "1087:   snmp_timer_wait.tv_sec = LONG_MAX;",
          "1088:   snmp_timer_wait.tv_usec = 0;",
          "1092: #ifdef _SELECT_DEBUG_",
          "1093:  if (prog_type == PROG_TYPE_VRRP)",
          "1095:   log_message(LOG_INFO, \"select with snmp timer %lu.%6.6ld, fdsetsize %d, readfds 0x%lx\", snmp_timer_wait.tv_sec, snmp_timer_wait.tv_usec, fdsetsize, readfd.fds_bits[0]);",
          "1096: #else",
          "1097:   log_message(LOG_INFO, \"select with fdsetsize %d, readfds 0x%lx\", fdsetsize, readfd.fds_bits[0]);",
          "1098: #endif",
          "1101:  errno = 0;",
          "1102:  num_fds = select(fdsetsize, &readfd, &writefd, NULL,",
          "1103: #ifdef _WITH_SNMP_",
          "1104:             &snmp_timer_wait",
          "1105: #else",
          "1106:             NULL",
          "1108:               );",
          "1113: #ifdef _SELECT_DEBUG_",
          "1115: #ifdef _WITH_SNMP_",
          "1116:   log_message(LOG_INFO, \"Select returned %d, errno %d, readfd 0x%lx, writefd 0x%lx, timer expired %d, snmp timer %lu.%6.6ld\", num_fds, sav_errno, readfd.fds_bits[0], writefd.fds_bits[0], FD_ISSET(m->timer_fd, &readfd), snmp_timer_wait.tv_sec, snmp_timer_wait.tv_usec);",
          "1117: #else",
          "1118:   log_message(LOG_INFO, \"Select returned %d, errno %d, readfd 0x%lx, writefd 0x%lx, timer expired %d\", num_fds, sav_errno, readfd.fds_bits[0], writefd.fds_bits[0], FD_ISSET(m->timer_fd, &readfd));",
          "1119: #endif",
          "1122:  if (num_fds < 0) {",
          "1127:   if (sav_errno != last_select_errno) {",
          "1129:    log_message(LOG_INFO, \"select error: %s\", strerror(sav_errno));",
          "1130:    last_select_errno = sav_errno;",
          "1135:   if (sav_errno == EINVAL || sav_errno == ENOMEM)",
          "1142: #ifdef _WITH_SNMP_",
          "1143:  if (snmp_running) {",
          "1147:   if (num_fds > 0)",
          "1148:    snmp_read(&readfd);",
          "1149:   else if (!timerisset(&snmp_timer_wait)) {",
          "1150:    snmp_timeout();",
          "1151:    run_alarms();",
          "1152:   }",
          "1153:  }",
          "1154: #endif",
          "1156:  timer_expired = FD_ISSET(m->timer_fd, &readfd);",
          "1159:  set_time_now();",
          "1161:  if (timer_expired) {",
          "1163:   thread = m->child.head;",
          "1164:   while (thread) {",
          "1165:    t = thread;",
          "1166:    thread = t->next;",
          "1168:    if (t->sands.tv_sec == TIMER_DISABLED)",
          "1169:     break;",
          "1171:    if (timercmp(&time_now, &t->sands, >=)) {",
          "1172:     thread_list_make_ready(&m->child, t, m, THREAD_CHILD_TIMEOUT);",
          "1173:     if (child_remover)",
          "1174:      child_remover(t);",
          "1176:    else",
          "1177:     break;",
          "1179:  }",
          "1182:  thread = m->read.head;",
          "1183:  timers_done = !timer_expired;",
          "1184:  while (thread && (num_fds || !timers_done)) {",
          "1185:   t = thread;",
          "1186:   thread = t->next;",
          "1188:   if (num_fds && FD_ISSET(t->u.fd, &readfd)) {",
          "1189:    assert(FD_ISSET(t->u.fd, &m->readfd));",
          "1190:    num_fds--;",
          "1191:    FD_CLR(t->u.fd, &m->readfd);",
          "1192:    thread_list_make_ready(&m->read, t, m, THREAD_READY_FD);",
          "1193:   } else if (!timers_done &&",
          "1194:       t->sands.tv_sec != TIMER_DISABLED &&",
          "1195:       timercmp(&time_now, &t->sands, >=)) {",
          "1196:    FD_CLR(t->u.fd, &m->readfd);",
          "1197:    thread_list_make_ready(&m->read, t, m, THREAD_READ_TIMEOUT);",
          "1199:   else",
          "1200:    timers_done = true;",
          "1204:  thread = m->write.head;",
          "1205:  timers_done = !timer_expired;",
          "1206:  while (thread && (num_fds || !timers_done)) {",
          "1207:   t = thread;",
          "1208:   thread = t->next;",
          "1210:   if (num_fds && FD_ISSET(t->u.fd, &writefd)) {",
          "1211:    assert(FD_ISSET(t->u.fd, &writefd));",
          "1212:    num_fds--;",
          "1213:    FD_CLR(t->u.fd, &m->writefd);",
          "1214:    thread_list_make_ready(&m->write, t, m, THREAD_READY_FD);",
          "1215:   } else if (!timers_done &&",
          "1216:       t->sands.tv_sec != TIMER_DISABLED &&",
          "1217:       timercmp(&time_now, &t->sands, >=)) {",
          "1218:    FD_CLR(t->u.fd, &m->writefd);",
          "1219:    thread_list_make_ready(&m->write, t, m, THREAD_WRITE_TIMEOUT);",
          "1220:   }",
          "1221:   else",
          "1222:    timers_done = true;",
          "1223:  }",
          "1228:  if (timer_expired) {",
          "1229:   thread = m->timer.head;",
          "1230:   while (thread) {",
          "1231:    t = thread;",
          "1232:    thread = t->next;",
          "1234:    if (timercmp(&time_now, &t->sands, >=))",
          "1235:     thread_list_make_ready(&m->timer, t, m, t->type);",
          "1236:    else",
          "1237:     break;",
          "1238:   }",
          "1239:  }",
          "1241: #ifdef _WITH_SNMP_",
          "1242:  if (snmp_running)",
          "1243:   netsnmp_check_outstanding_agent_requests();",
          "1244: #endif",
          "1247:  if (!m->ready.head)",
          "1257:  thread_list_t* thread_list;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1288:    if (thread->func)",
          "1289:     thread_call(thread);",
          "1293:     shutting_down = true;",
          "1295:   }",
          "1297:   thread_type = thread->type;",
          "1298:   thread->type = THREAD_UNUSED;",
          "1299:   thread_add_unuse(master, thread);",
          "1302:   if (thread_type == THREAD_TERMINATE)",
          "1303:    return;",
          "",
          "[Removed Lines]",
          "1291:    if (!shutting_down && thread->type == THREAD_TERMINATE_START)",
          "1292: {",
          "1294: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1319:  if (child_finder)",
          "1320:   thread = child_finder(pid);",
          "1321:  else {",
          "1323:    if (pid == thread->u.c.pid)",
          "1324:     break;",
          "1325:   }",
          "",
          "[Removed Lines]",
          "1322:   for (thread = m->child.head; thread; thread = thread->next) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1328:  if (!thread)",
          "1329:   return;",
          "1332:  thread->u.c.status = status;",
          "1333:  if (child_remover)",
          "1334:   child_remover(thread);",
          "",
          "[Removed Lines]",
          "1331:  thread_list_delete(&m->child, thread);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1336:  if (permanent_vrrp_checker_error)",
          "1337:  {",
          "1339:   thread->type = THREAD_UNUSED;",
          "1341:  }",
          "1342:  else",
          "1344: }",
          "",
          "[Removed Lines]",
          "1340:   thread_list_add(&m->unuse, thread);",
          "1343:   thread_list_add(&m->ready, thread);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1361:  }",
          "1362: }",
          "1394: void",
          "1396: {",
          "1403: #endif",
          "1405: }",
          "1408: void",
          "1410: {",
          "1414: }",
          "",
          "[Removed Lines]",
          "1365: static inline unsigned long",
          "1366: thread_get_id(void)",
          "1367: {",
          "1368:  static unsigned long int counter = 0;",
          "1369:  return ++counter;",
          "1370: }",
          "1372: #ifdef _TIMER_DEBUG_",
          "1373: static const char *",
          "1374: get_thread_type_str(thread_type_t id)",
          "1375: {",
          "1376:  if (id == THREAD_READ) return \"READ\";",
          "1377:  if (id == THREAD_WRITE) return \"WRITE\";",
          "1378:  if (id == THREAD_TIMER) return \"TIMER\";",
          "1379:  if (id == THREAD_EVENT) return \"EVENT\";",
          "1380:  if (id == THREAD_CHILD) return \"CHILD\";",
          "1381:  if (id == THREAD_READY) return \"READY\";",
          "1382:  if (id == THREAD_UNUSED) return \"UNUSED\";",
          "1383:  if (id == THREAD_WRITE_TIMEOUT) return \"WRITE_TIMEOUT\";",
          "1384:  if (id == THREAD_READ_TIMEOUT) return \"READ_TIMEOUT\";",
          "1385:  if (id == THREAD_CHILD_TIMEOUT) return \"CHILD_TIMEOUT\";",
          "1386:  if (id == THREAD_TERMINATE) return \"TERMINATE\";",
          "1387:  if (id == THREAD_READY_FD) return \"READY_FD\";",
          "1389:  return \"unknown\";",
          "1390: }",
          "1391: #endif",
          "1395: thread_call(thread_t * thread)",
          "1397:  thread->id = thread_get_id();",
          "1398: #ifdef _TIMER_DEBUG_",
          "1399: #ifndef _DEBUG_",
          "1400:  if (prog_type == PROG_TYPE_VRRP)",
          "1401: #endif",
          "1402:   log_message(LOG_INFO, \"Calling thread function, type %s, addr 0x%p, val/fd/pid %d, status %d\", get_thread_type_str(thread->type), thread->func, thread->u.val, thread->u.c.status);",
          "1404:  (*thread->func) (thread);",
          "1409: launch_scheduler(void)",
          "1411:  signal_set(SIGCHLD, thread_child_handler, master);",
          "1413:  process_threads(master);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/scheduler.h||lischeduler.h": [
          "File: lib/scheduler.h -> lischeduler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <stdbool.h>",
          "29: #include <stdlib.h>",
          "30: #include <sys/timerfd.h>",
          "32: #include \"timer.h\"",
          "33: #include \"list.h\"",
          "36: typedef enum {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  THREAD_TERMINATE_START,",
          "49:  THREAD_TERMINATE,",
          "50:  THREAD_READY_FD,",
          "51:  THREAD_IF_UP,",
          "52:  THREAD_IF_DOWN",
          "53: } thread_type_t;",
          "56: typedef struct _thread {",
          "57:  unsigned long id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:   } c;",
          "72:  } u;",
          "73: } thread_t;",
          "83: typedef struct _thread_master {",
          "91:  list child_pid_index;",
          "104: } thread_master_t;",
          "106: #ifndef _DEBUG_",
          "",
          "[Removed Lines]",
          "76: typedef struct _thread_list {",
          "77:  thread_t *head;",
          "78:  thread_t *tail;",
          "79:  int count;",
          "80: } thread_list_t;",
          "84:  thread_list_t read;",
          "85:  thread_list_t write;",
          "86:  thread_list_t timer;",
          "87:  thread_list_t child;",
          "88:  thread_list_t event;",
          "89:  thread_list_t ready;",
          "90:  thread_list_t unuse;",
          "94:  fd_set readfd;",
          "95:  fd_set writefd;",
          "96:  int max_fd;",
          "99:  int timer_fd;",
          "102:  unsigned long alloc;",
          "103:  bool shutdown_timer_running;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156: #ifndef _DEBUG_",
          "157: extern bool report_child_status(int, pid_t, const char *);",
          "158: #endif",
          "159: extern thread_master_t *thread_make_master(void);",
          "160: extern thread_t *thread_add_terminate_event(thread_master_t *);",
          "161: extern thread_t *thread_add_start_terminate_event(thread_master_t *, int (*)(thread_t *));",
          "162: extern void thread_cleanup_master(thread_master_t *);",
          "163: extern void thread_destroy_master(thread_master_t *);",
          "164: extern thread_t *thread_add_read(thread_master_t *, int (*) (thread_t *), void *, int, unsigned long);",
          "165: extern void thread_requeue_read(thread_master_t *, int, unsigned long);",
          "166: extern thread_t *thread_add_write(thread_master_t *, int (*) (thread_t *), void *, int, unsigned long);",
          "167: extern thread_t *thread_add_timer(thread_master_t *, int (*) (thread_t *), void *, unsigned long);",
          "168: extern thread_t *thread_add_timer_shutdown(thread_master_t *, int (*) (thread_t *), void *, unsigned long);",
          "169: extern thread_t *thread_add_child(thread_master_t *, int (*) (thread_t *), void *, pid_t, unsigned long);",
          "170: extern void thread_children_reschedule(thread_master_t *, int (*) (thread_t *), unsigned long);",
          "171: extern thread_t *thread_add_event(thread_master_t *, int (*) (thread_t *), void *, int);",
          "173: extern void thread_cancel_read(thread_master_t *, int);",
          "174: extern void process_threads(thread_master_t *);",
          "176: extern void thread_child_handler(void *, int);",
          "178: #endif",
          "",
          "[Removed Lines]",
          "172: extern int thread_cancel(thread_t *);",
          "175: extern void thread_call(thread_t *);",
          "177: extern void launch_scheduler(void);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/signals.c||lisignals.c": [
          "File: lib/signals.c -> lisignals.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313: #ifdef HAVE_SIGNALFD",
          "314:  struct signalfd_siginfo siginfo;",
          "317:   sig = siginfo.ssi_signo;",
          "318: #else",
          "320: #endif",
          "321:   if (sig >= 1 && sig <= SIG_MAX && signal_handler_func[sig-1])",
          "322:    signal_handler_func[sig-1](signal_v[sig-1], sig);",
          "",
          "[Removed Lines]",
          "316:  while(read(signal_fd, &siginfo, sizeof(struct signalfd_siginfo)) == sizeof(struct signalfd_siginfo)) {",
          "319:  while(read(signal_pipe[0], &sig, sizeof(int)) == sizeof(int)) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350: void",
          "352: {",
          "353:  signal_thread = thread_add_read(master, signal_run_callback, NULL, signal_rfd(), TIMER_NEVER);",
          "354: }",
          "",
          "[Removed Lines]",
          "351: add_signal_read_thread(void)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "380:   log_message(LOG_INFO, \"BUG - signal_fd init failed - %d (%s), please report\", errno, strerror(errno));",
          "381: #else",
          "382:  if (open_pipe(signal_pipe))",
          "384: #endif",
          "385: }",
          "389: {",
          "390:  sigset_t sset;",
          "391:  int sig;",
          "392:  struct sigaction act;",
          "399:  sigemptyset(&sset);",
          "400:  sigaddset(&sset, SIGILL);",
          "",
          "[Removed Lines]",
          "383:   log_message(LOG_INFO, \"BUG - pipe in signal_handler_init failed - %d (%s), please report\", errno, strerror(errno));",
          "387: void",
          "388: signal_handler_init(void)",
          "394:  open_signal_fd();",
          "396:  clear_signal_handler_addresses();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "415:    sigaction(sig, &act, NULL);",
          "416:  }",
          "420: #ifdef HAVE_SIGNALFD",
          "421:  sigemptyset(&sset);",
          "422:  sigmask_func(SIG_SETMASK, &sset, NULL);",
          "423: #endif",
          "424: }",
          "427: signal_handler_child_init(void)",
          "428: {",
          "429:  struct sigaction act;",
          "",
          "[Removed Lines]",
          "418:  sigemptyset(&parent_sig);",
          "426: void",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "437:   if (sigismember(&parent_sig, sig))",
          "438:    sigaction(sig, &act, NULL);",
          "439:  }",
          "441:  sigemptyset(&parent_sig);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "472:  }",
          "474: #ifdef HAVE_SIGNALFD",
          "477:  sigemptyset(&signal_fd_set);",
          "478: #endif",
          "480:  signal_handlers_clear(SIG_IGN);",
          "482: #ifndef HAVE_SIGNALFD",
          "487: #endif",
          "488: }",
          "",
          "[Removed Lines]",
          "475:  close(signal_fd);",
          "476:  signal_fd = -1;",
          "483:  close(signal_pipe[1]);",
          "484:  close(signal_pipe[0]);",
          "485:  signal_pipe[1] = -1;",
          "486:  signal_pipe[0] = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/signals.h||lisignals.h": [
          "File: lib/signals.h -> lisignals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <signal.h>",
          "30: #include <stdbool.h>",
          "32: static inline int",
          "33: sigmask_func(int how, const sigset_t *set, sigset_t *oldset)",
          "34: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: extern void signal_set(int, void (*) (void *, int), void *);",
          "45: extern void signal_ignore(int);",
          "46: extern void signal_handler_init(void);",
          "48: extern void signal_handler_destroy(void);",
          "49: extern void signal_handler_script(void);",
          "51: extern void cancel_signal_read_thread(void);",
          "52: #if HAVE_DECL_RLIMIT_RTTIME == 1",
          "53: extern void set_sigxcpu_handler(void);",
          "",
          "[Removed Lines]",
          "47: extern void signal_handler_child_init(void);",
          "50: extern void add_signal_read_thread(void);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97aec76c9ea8a0b271f3db97a5e3113bd7e84a62",
      "candidate_info": {
        "commit_hash": "97aec76c9ea8a0b271f3db97a5e3113bd7e84a62",
        "repo": "acassen/keepalived",
        "commit_url": "https://github.com/acassen/keepalived/commit/97aec76c9ea8a0b271f3db97a5e3113bd7e84a62",
        "files": [
          "doc/man/man8/keepalived.8",
          "keepalived/bfd/bfd_daemon.c",
          "keepalived/check/check_daemon.c",
          "keepalived/core/main.c",
          "keepalived/core/pidfile.c",
          "keepalived/vrrp/vrrp.c",
          "keepalived/vrrp/vrrp_daemon.c",
          "lib/scheduler.c",
          "lib/scheduler.h"
        ],
        "message": "Update config-test option so keepalived exits with status 1 on failure\n\nSigned-off-by: Quentin Armitage <quentin@armitage.org.uk>",
        "before_after_code_files": [
          "keepalived/bfd/bfd_daemon.c||keepalived/bfd/bfd_daemon.c",
          "keepalived/check/check_daemon.c||keepalived/check/check_daemon.c",
          "keepalived/core/main.c||keepalived/core/main.c",
          "keepalived/core/pidfile.c||keepalived/core/pidfile.c",
          "keepalived/vrrp/vrrp.c||keepalived/vrrp/vrrp.c",
          "keepalived/vrrp/vrrp_daemon.c||keepalived/vrrp/vrrp_daemon.c",
          "lib/scheduler.c||lischeduler.c",
          "lib/scheduler.h||lischeduler.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "keepalived/core/main.c||keepalived/core/main.c",
            "keepalived/core/pidfile.c||keepalived/core/pidfile.c"
          ],
          "candidate": [
            "keepalived/core/main.c||keepalived/core/main.c",
            "keepalived/core/pidfile.c||keepalived/core/pidfile.c"
          ]
        }
      },
      "candidate_diff": {
        "keepalived/bfd/bfd_daemon.c||keepalived/bfd/bfd_daemon.c": [
          "File: keepalived/bfd/bfd_daemon.c -> keepalived/bfd/bfd_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:  if (__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "147:   return;",
          "148:  }",
          "",
          "[Removed Lines]",
          "146:   stop_bfd(KEEPALIVED_EXIT_CONFIG_TEST);",
          "",
          "[Added Lines]",
          "146:   stop_bfd(KEEPALIVED_EXIT_OK);",
          "",
          "---------------"
        ],
        "keepalived/check/check_daemon.c||keepalived/check/check_daemon.c": [
          "File: keepalived/check/check_daemon.c -> keepalived/check/check_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: static int",
          "85: {",
          "87:  notify_fifo_close(&global_data->notify_fifo, &global_data->lvs_notify_fifo);",
          "",
          "[Removed Lines]",
          "84: checker_terminate_phase2(__attribute__((unused)) thread_t *thread)",
          "",
          "[Added Lines]",
          "84: checker_terminate_phase2(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:         log_message(LOG_ERR, \"backstop thread invoked: shutdown timer %srunning, child count %d\",",
          "138:    thread->master->shutdown_timer_running ? \"\" : \"not \", thread->master->child.count);",
          "142:         return 0;",
          "143: }",
          "",
          "[Removed Lines]",
          "140:         checker_terminate_phase2(thread);",
          "",
          "[Added Lines]",
          "140:         checker_terminate_phase2();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:  checker_terminate_phase1(false);",
          "193:  exit(status);",
          "",
          "[Removed Lines]",
          "190:  checker_terminate_phase2(NULL);",
          "",
          "[Added Lines]",
          "190:  checker_terminate_phase2();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "232:  if (__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "234:   return;",
          "235:  }",
          "",
          "[Removed Lines]",
          "233:   stop_check(KEEPALIVED_EXIT_CONFIG_TEST);",
          "",
          "[Added Lines]",
          "233:   stop_check(KEEPALIVED_EXIT_OK);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "519:  if (two_phase_terminate)",
          "521:  else",
          "526: }",
          "528: #ifdef _TIMER_DEBUG_",
          "",
          "[Removed Lines]",
          "520:   checker_terminate_phase2(NULL);",
          "522:   stop_check(EXIT_SUCCESS);",
          "525:  exit(EXIT_SUCCESS);",
          "",
          "[Added Lines]",
          "520:   checker_terminate_phase2();",
          "522:   stop_check(KEEPALIVED_EXIT_OK);",
          "525:  exit(KEEPALIVED_EXIT_OK);",
          "",
          "---------------"
        ],
        "keepalived/core/main.c||keepalived/core/main.c": [
          "File: keepalived/core/main.c -> keepalived/core/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309: static void",
          "310: parent_child_remover(thread_t *thread)",
          "311: {",
          "313:         if (prog_type == PROG_TYPE_PARENT) {",
          "314: #ifdef _WITH_VRRP_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:  int exit_status;",
          "316:  if (__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "317:   exit_status = WIFEXITED(thread->u.c.status) ? WEXITSTATUS(thread->u.c.status) : 0;",
          "319:   if (exit_status && exit_status != KEEPALIVED_EXIT_OK)",
          "320:          test_exit_status = EXIT_FAILURE;",
          "321:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "903:         \", JSON\"",
          "904: #endif",
          "905:         \"\\n\");",
          "907:  fprintf(stderr, \"  -v, --version                Display the version number\\n\");",
          "908:  fprintf(stderr, \"  -h, --help                   Display this help message\\n\");",
          "909: }",
          "",
          "[Removed Lines]",
          "906:  fprintf(stderr, \"  -t, --config-test            Check the configuration for obvious errors\\n\");",
          "",
          "[Added Lines]",
          "916:  fprintf(stderr, \"  -t, --config-test [LOG_FILE] Check the configuration for obvious errors, default log file\\n\"",
          "917:    \"                                /tmp/keepalived.config-check\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "971: #endif",
          "972:   {\"config-id\",  required_argument, NULL, 'i'},",
          "973:   {\"signum\",  required_argument, NULL,  4 },",
          "975:   {\"version\",  no_argument,  NULL, 'v'},",
          "976:   {\"help\",  no_argument,  NULL, 'h'},",
          "",
          "[Removed Lines]",
          "974:   {\"config-test\",  no_argument,  NULL, 't'},",
          "",
          "[Added Lines]",
          "985:   {\"config-test\",  optional_argument, NULL, 't'},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "984:  curind = optind;",
          "986: #if defined _WITH_VRRP_ && defined _WITH_LVS_",
          "987:          \"PC\"",
          "988: #endif",
          "",
          "[Removed Lines]",
          "985:  while (longindex = -1, (c = getopt_long(argc, argv, \":vhlndDRS:f:p:i:mM::g::Gt\"",
          "",
          "[Added Lines]",
          "996:  while (longindex = -1, (c = getopt_long(argc, argv, \":vhlndDRS:f:p:i:mM::g::Gt::\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1086:    break;",
          "1087:   case 't':",
          "1088:    __set_bit(CONFIG_TEST_BIT, &debug);",
          "1089:    break;",
          "1090:   case 'f':",
          "1091:    conf_file = optarg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1100:    __set_bit(DONT_RESPAWN_BIT, &debug);",
          "1101:    __set_bit(DONT_FORK_BIT, &debug);",
          "1102:    __set_bit(NO_SYSLOG_BIT, &debug);",
          "1103:    if (optarg && optarg[0])",
          "1104:     log_file_name = optarg;",
          "1105:    else",
          "1106:     log_file_name = \"/tmp/keepalived.config-check\";",
          "1107:    open_log_file(log_file_name, NULL, NULL, NULL);",
          "1108:    reopen_log = true;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1533: #endif",
          "1534:  close_std_fd();",
          "1537: }",
          "",
          "[Removed Lines]",
          "1536:  exit(0);",
          "",
          "[Added Lines]",
          "1556:  exit(test_exit_status);",
          "",
          "---------------"
        ],
        "keepalived/core/pidfile.c||keepalived/core/pidfile.c": [
          "File: keepalived/core/pidfile.c -> keepalived/core/pidfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"pidfile.h\"",
          "35: #include \"main.h\"",
          "36: #include \"bitops.h\"",
          "38: const char *pid_directory = PID_DIR PACKAGE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: pidfile_write(const char *pid_file, int pid)",
          "60: {",
          "61:  FILE *pidfile = NULL;",
          "63:  if (pidfd != -1) pidfile = fdopen(pidfd, \"w\");",
          "65:  if (!pidfile) {",
          "",
          "[Removed Lines]",
          "62:  int pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
          "",
          "[Added Lines]",
          "63:  int pidfd;",
          "65:  if (__test_bit(CONFIG_TEST_BIT, &debug))",
          "66:   return 1;",
          "68:  pidfd = creat(pid_file, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: void",
          "77: pidfile_rm(const char *pid_file)",
          "78: {",
          "79:  unlink(pid_file);",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:  if (__test_bit(CONFIG_TEST_BIT, &debug))",
          "86:   return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117: bool",
          "118: keepalived_running(unsigned long mode)",
          "119: {",
          "120:  if (process_running(main_pidfile))",
          "121:   return true;",
          "122: #ifdef _WITH_VRRP_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:  if (__test_bit(CONFIG_TEST_BIT, &debug))",
          "130:   return false;",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp.c||keepalived/vrrp/vrrp.c": [
          "File: keepalived/vrrp/vrrp.c -> keepalived/vrrp/vrrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2896:   if (vrrp->ifp->base_ifp->ifindex &&",
          "2898:    netlink_link_add_vmac(vrrp);",
          "",
          "[Removed Lines]",
          "2897:       !__test_bit(VRRP_VMAC_UP_BIT, &vrrp->vmac_flags))",
          "",
          "[Added Lines]",
          "2897:       !__test_bit(VRRP_VMAC_UP_BIT, &vrrp->vmac_flags) &&",
          "2898:       !__test_bit(CONFIG_TEST_BIT, &debug))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3027:  }",
          "3033:   add_vrrp_to_track_file(vrrp, tfl);",
          "3036: #ifdef _WITH_BFD_",
          "3041:   add_vrrp_to_track_bfd(vrrp, tbfd);",
          "3043: #endif",
          "3045:  if (vrrp->ifp->ifindex) {",
          "",
          "[Removed Lines]",
          "3030:  LIST_FOREACH(vrrp->track_file, tfl, e) {",
          "3031:   tfl = ELEMENT_DATA(e);",
          "3034:  }",
          "3038:  LIST_FOREACH(vrrp->track_bfd, tbfd, e) {",
          "3039:   tfl = ELEMENT_DATA(e);",
          "3042:  }",
          "",
          "[Added Lines]",
          "3031:  LIST_FOREACH(vrrp->track_file, tfl, e)",
          "3036:  LIST_FOREACH(vrrp->track_bfd, tbfd, e)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3051:   if (vrrp->promote_secondaries &&",
          "3053:    set_promote_secondaries(vrrp->ifp);",
          "3054:  }",
          "",
          "[Removed Lines]",
          "3052:       !vrrp->ifp->promote_secondaries_already_set)",
          "",
          "[Added Lines]",
          "3047:       !vrrp->ifp->promote_secondaries_already_set &&",
          "3048:       !__test_bit(CONFIG_TEST_BIT, &debug))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3326:  sync_group_tracking_init();",
          "3329:  if (global_data->vrrp_garp_interval || global_data->vrrp_gna_interval)",
          "3330:   set_default_garp_delay();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3326:  if (!__test_bit(CONFIG_TEST_BIT, &debug))",
          "3327:   return true;",
          "",
          "---------------"
        ],
        "keepalived/vrrp/vrrp_daemon.c||keepalived/vrrp/vrrp_daemon.c": [
          "File: keepalived/vrrp/vrrp_daemon.c -> keepalived/vrrp/vrrp_daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: #endif",
          "101: static int",
          "103: {",
          "104: #ifdef _NETLINK_TIMERS_",
          "105:  report_and_clear_netlink_timers(\"Starting shutdown instances\");",
          "",
          "[Removed Lines]",
          "102: vrrp_terminate_phase2(__attribute__((unused)) thread_t *thread)",
          "",
          "[Added Lines]",
          "102: vrrp_terminate_phase2(int exit_status)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:  pidfile_rm(vrrp_pidfile);",
          "182: }",
          "184: static int",
          "186: {",
          "187:  thread->master->shutdown_timer_running = false;",
          "188:  thread_add_terminate_event(thread->master);",
          "",
          "[Removed Lines]",
          "181:  exit(EXIT_SUCCESS);",
          "185: vrrp_shutdown_timer_thread( thread_t *thread)",
          "",
          "[Added Lines]",
          "181:  exit(exit_status);",
          "185: vrrp_shutdown_timer_thread(thread_t *thread)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "286:  vrrp_terminate_phase1(false);",
          "291:  exit(status);",
          "",
          "[Removed Lines]",
          "288:  vrrp_terminate_phase2(NULL);",
          "",
          "[Added Lines]",
          "288:  vrrp_terminate_phase2(status);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "322:  if (reload)",
          "323:   init_global_data(global_data);",
          "333: #ifdef _HAVE_SCHED_RT_",
          "335: #if HAVE_DECL_RLIMIT_RTTIME == 1",
          "337: #endif",
          "338: #endif",
          "344: #if defined _WITH_SNMP_RFC || defined _WITH_SNMP_VRRP_",
          "346: #ifdef _WITH_SNMP_VRRP_",
          "348: #endif",
          "349: #ifdef _WITH_SNMP_RFCV2_",
          "351: #endif",
          "352: #ifdef _WITH_SNMP_RFCV3_",
          "354: #endif",
          "357: #ifdef _WITH_SNMP_RFC_",
          "359: #endif",
          "361: #endif",
          "363: #ifdef _WITH_LVS_",
          "383: #endif",
          "389: #ifdef _HAVE_FIB_ROUTING_",
          "392: #endif",
          "394: #ifdef _WITH_BFD_",
          "396: #endif",
          "401: #ifdef _HAVE_FIB_ROUTING_",
          "406: #endif",
          "409: #ifdef _WITH_DBUS_",
          "413: #endif",
          "416:  if (!vrrp_complete_init()) {",
          "",
          "[Removed Lines]",
          "326:  if (__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "327:   stop_vrrp(KEEPALIVED_EXIT_CONFIG_TEST);",
          "328:   return;",
          "329:  }",
          "332:  set_process_priorities(",
          "334:           global_data->vrrp_realtime_priority,",
          "336:                                global_data->vrrp_rlimit_rt,",
          "339:           global_data->vrrp_process_priority, global_data->vrrp_no_swap ? 4096 : 0);",
          "342:  set_time_now();",
          "345:  if (!reload && (",
          "347:       global_data->enable_snmp_vrrp ||",
          "350:       global_data->enable_snmp_rfcv2 ||",
          "353:       global_data->enable_snmp_rfcv3 ||",
          "355:       false)) {",
          "356:   vrrp_snmp_agent_init(global_data->snmp_socket);",
          "358:   vrrp_start_time = time_now;",
          "360:  }",
          "364:  if (vrrp_ipvs_needed()) {",
          "366:   if (ipvs_start() != IPVS_SUCCESS) {",
          "367:    stop_vrrp(KEEPALIVED_EXIT_FATAL);",
          "368:    return;",
          "369:   }",
          "372:   if (global_data->lvs_tcp_timeout ||",
          "373:       global_data->lvs_tcpfin_timeout ||",
          "374:       global_data->lvs_udp_timeout)",
          "375:    ipvs_set_timeouts(global_data->lvs_tcp_timeout, global_data->lvs_tcpfin_timeout, global_data->lvs_udp_timeout);",
          "380:   ipvs_syncd_cmd(IPVS_STOPDAEMON, NULL, IPVS_MASTER, true, true);",
          "381:   ipvs_syncd_cmd(IPVS_STOPDAEMON, NULL, IPVS_BACKUP, true, true);",
          "382:  }",
          "385:  if (reload) {",
          "386:   kernel_netlink_set_recv_bufs();",
          "388:   clear_diff_saddresses();",
          "390:   clear_diff_srules();",
          "391:   clear_diff_sroutes();",
          "393:   clear_diff_script();",
          "395:   clear_diff_bfd();",
          "397:  }",
          "398:  else {",
          "400:   netlink_iplist(vrrp_data->static_addresses, IPADDRESS_DEL, false);",
          "402:   netlink_rtlist(vrrp_data->static_routes, IPROUTE_DEL);",
          "403:   netlink_error_ignore = ENOENT;",
          "404:   netlink_rulelist(vrrp_data->static_rules, IPRULE_DEL, true);",
          "405:   netlink_error_ignore = 0;",
          "407:  }",
          "410:  if (!reload && global_data->enable_dbus)",
          "411:   if (!dbus_start())",
          "412:    global_data->enable_dbus = false;",
          "",
          "[Added Lines]",
          "326:  set_time_now();",
          "328:  if (!__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "330:   set_process_priorities(",
          "332:            global_data->vrrp_realtime_priority,",
          "334:            global_data->vrrp_rlimit_rt,",
          "337:            global_data->vrrp_process_priority, global_data->vrrp_no_swap ? 4096 : 0);",
          "340:   if (!reload && (",
          "342:        global_data->enable_snmp_vrrp ||",
          "345:        global_data->enable_snmp_rfcv2 ||",
          "348:        global_data->enable_snmp_rfcv3 ||",
          "350:        false)) {",
          "351:    vrrp_snmp_agent_init(global_data->snmp_socket);",
          "353:    vrrp_start_time = time_now;",
          "355:   }",
          "359:   if (vrrp_ipvs_needed()) {",
          "361:    if (ipvs_start() != IPVS_SUCCESS) {",
          "362:     stop_vrrp(KEEPALIVED_EXIT_FATAL);",
          "363:     return;",
          "364:    }",
          "367:    if (global_data->lvs_tcp_timeout ||",
          "368:        global_data->lvs_tcpfin_timeout ||",
          "369:        global_data->lvs_udp_timeout)",
          "370:     ipvs_set_timeouts(global_data->lvs_tcp_timeout, global_data->lvs_tcpfin_timeout, global_data->lvs_udp_timeout);",
          "375:    ipvs_syncd_cmd(IPVS_STOPDAEMON, NULL, IPVS_MASTER, true, true);",
          "376:    ipvs_syncd_cmd(IPVS_STOPDAEMON, NULL, IPVS_BACKUP, true, true);",
          "377:   }",
          "380:   if (reload) {",
          "381:    kernel_netlink_set_recv_bufs();",
          "383:    clear_diff_saddresses();",
          "385:    clear_diff_srules();",
          "386:    clear_diff_sroutes();",
          "388:    clear_diff_script();",
          "390:    clear_diff_bfd();",
          "392:   }",
          "393:   else {",
          "395:    netlink_iplist(vrrp_data->static_addresses, IPADDRESS_DEL, false);",
          "397:    netlink_rtlist(vrrp_data->static_routes, IPROUTE_DEL);",
          "398:    netlink_error_ignore = ENOENT;",
          "399:    netlink_rulelist(vrrp_data->static_rules, IPRULE_DEL, true);",
          "400:    netlink_error_ignore = 0;",
          "402:   }",
          "405:   if (!reload && global_data->enable_dbus)",
          "406:    if (!dbus_start())",
          "407:     global_data->enable_dbus = false;",
          "409:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "418:   return;",
          "419:  }",
          "422:  if (have_ipv4_instance)",
          "423:   gratuitous_arp_init();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:  if (__test_bit(CONFIG_TEST_BIT, &debug)) {",
          "419:   stop_vrrp(KEEPALIVED_EXIT_OK);",
          "420:   return;",
          "421:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "818:  launch_scheduler();",
          "824:  exit(EXIT_SUCCESS);",
          "",
          "[Removed Lines]",
          "821:  vrrp_terminate_phase2(NULL);",
          "",
          "[Added Lines]",
          "823:  vrrp_terminate_phase2(EXIT_SUCCESS);",
          "",
          "---------------"
        ],
        "lib/scheduler.c||lischeduler.c": [
          "File: lib/scheduler.c -> lischeduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1202:   return;",
          "1204:  thread_list_delete(&m->child, thread);",
          "1205:  if (child_remover)",
          "1206:   child_remover(thread);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:    raise(SIGTERM);",
          "1217:  }",
          "1218:  else",
          "1221:   thread_list_add(&m->ready, thread);",
          "1223: }",
          "",
          "[Removed Lines]",
          "1219:  {",
          "1220:   thread->u.c.status = status;",
          "1222:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/scheduler.h||lischeduler.h": [
          "File: lib/scheduler.h -> lischeduler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: #define THREAD_CHILD_STATUS(X) ((X)->u.c.status)",
          "128: #define DEFAULT_CHILD_FINDER ((void *)1)",
          "",
          "[Removed Lines]",
          "124: #define KEEPALIVED_EXIT_FATAL  (EXIT_FAILURE+1)",
          "125: #define KEEPALIVED_EXIT_CONFIG  (EXIT_FAILURE+2)",
          "126: #define KEEPALIVED_EXIT_CONFIG_TEST (EXIT_FAILURE+3)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}