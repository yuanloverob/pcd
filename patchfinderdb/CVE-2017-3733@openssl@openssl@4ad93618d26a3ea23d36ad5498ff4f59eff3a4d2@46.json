{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ece9c1fc6c5d998dc2abe03f2caf278ec05d9d0",
      "candidate_info": {
        "commit_hash": "2ece9c1fc6c5d998dc2abe03f2caf278ec05d9d0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2ece9c1fc6c5d998dc2abe03f2caf278ec05d9d0",
        "files": [
          "crypto/perlasm/x86_64-xlate.pl"
        ],
        "message": "perlasm/x86_64-xlate.pl: refine sign extension in ea package.\n\n$1<<32>>32 worked fine with either 32- or 64-bit perl for a good while,\nrelying on quirk that [pure] 32-bit perl performed it as $1<<0>>0. But\nthis apparently changed in some version past minimally required 5.10,\nand operation result became 0. Yet, it went unnoticed for another while,\nbecause most perl package providers configure their packages with\n-Duse64bitint option.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 82e089308bd9a7794a45f0fa3973d7659420fbd8)",
        "before_after_code_files": [
          "crypto/perlasm/x86_64-xlate.pl||crypto/perlasm/x86_64-xlate.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/perlasm/x86_64-xlate.pl||crypto/perlasm/x86_64-xlate.pl": [
          "File: crypto/perlasm/x86_64-xlate.pl -> crypto/perlasm/x86_64-xlate.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:  $self->{index} =~ s/^[er](.?[0-9xpi])[d]?$/r\\1/;",
          "263:  $self->{base}  =~ s/^[er](.?[0-9xpi])[d]?$/r\\1/;",
          "266:  # in $self->{label}, new gas requires sign extension...",
          "267:  use integer;",
          "268:  $self->{label} =~ s/(?<![\\w\\$\\.])(0x?[0-9a-f]+)/oct($1)/egi;",
          "270:  $self->{label} =~ s/\\b([0-9]+)\\b/$1<<32>>32/eg;",
          "272:  if (!$self->{label} && $self->{index} && $self->{scale}==1 &&",
          "",
          "[Removed Lines]",
          "265:  # Solaris /usr/ccs/bin/as can't handle multiplications",
          "269:  $self->{label} =~ s/\\b([0-9]+\\s*[\\*\\/\\%]\\s*[0-9]+)\\b/eval($1)/eg;",
          "",
          "[Added Lines]",
          "265:  # Solaris /usr/ccs/bin/as can't handle multiplications",
          "271:  # Some assemblers insist on signed presentation of 32-bit",
          "272:  # offsets, but sign extension is a tricky business in perl...",
          "273:  if ((1<<31)<<1) {",
          "274:      $self->{label} =~ s/\\b([0-9]+)\\b/$1<<32>>32/eg;",
          "275:  } else {",
          "276:      $self->{label} =~ s/\\b([0-9]+)\\b/$1>>0/eg;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddc311f1d345d07d8657b4538ca32cba864e7461",
      "candidate_info": {
        "commit_hash": "ddc311f1d345d07d8657b4538ca32cba864e7461",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ddc311f1d345d07d8657b4538ca32cba864e7461",
        "files": [
          "apps/req.c"
        ],
        "message": "Change req_check_len error message\n\nit also accepts 20 bytes, but states 'less than' in the error message\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2648)\n(cherry picked from commit 0cb8c9d85e9d5690670d6f1f02e8ccc756520210)",
        "before_after_code_files": [
          "apps/req.c||apps/req.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/req.c||apps/req.c": [
          "File: apps/req.c -> apps/req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1273:     }",
          "1274:     if ((n_max >= 0) && (len > n_max)) {",
          "1275:         BIO_printf(bio_err,",
          "1277:                    n_max);",
          "1278:         return (0);",
          "1279:     }",
          "",
          "[Removed Lines]",
          "1276:                    \"string is too long, it needs to be less than  %d bytes long\\n\",",
          "",
          "[Added Lines]",
          "1276:                    \"string is too long, it needs to be no more than %d bytes long\\n\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "025697a94678005df28055913d0df5d122acecfe",
      "candidate_info": {
        "commit_hash": "025697a94678005df28055913d0df5d122acecfe",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/025697a94678005df28055913d0df5d122acecfe",
        "files": [
          "crypto/modes/ctr128.c"
        ],
        "message": "modes/ctr128.c: fix false carry in counter increment procedure.\n\nGH issue #1916 affects only big-endian platforms. TLS is not affected,\nbecause TLS fragment is never big enough.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit 76f572ed0469a277d92378848250b7a9705d3071)",
        "before_after_code_files": [
          "crypto/modes/ctr128.c||crypto/modes/ctr128.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/modes/ctr128.c||crypto/modes/ctr128.c": [
          "File: crypto/modes/ctr128.c -> crypto/modes/ctr128.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         --n;",
          "53:         d = data[n] += c;",
          "56:     } while (n);",
          "57: }",
          "58: #endif",
          "",
          "[Removed Lines]",
          "55:         c = ((d - c) ^ d) >> (sizeof(size_t) * 8 - 1);",
          "",
          "[Added Lines]",
          "55:         c = ((d - c) & ~d) >> (sizeof(size_t) * 8 - 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0baae1c01f4975cc6b92b59e34d1a2a05ae48414",
      "candidate_info": {
        "commit_hash": "0baae1c01f4975cc6b92b59e34d1a2a05ae48414",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0baae1c01f4975cc6b92b59e34d1a2a05ae48414",
        "files": [
          "crypto/x509/x_crl.c",
          "test/build.info",
          "test/crltest.c",
          "test/recipes/25-test_crl.t"
        ],
        "message": "CRL critical extension bugfix\n\nMore importantly, port CRL test from boringSSL crypto/x509/x509_test.cc\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1775)\n(cherry picked from commit 2b40699082d1e5d0e94811542c4f0633ab2d5989)",
        "before_after_code_files": [
          "crypto/x509/x_crl.c||crypto/x509/x_crl.c",
          "test/build.info||test/build.info",
          "test/crltest.c||test/crltest.c",
          "test/recipes/25-test_crl.t||test/recipes/25-test_crl.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x_crl.c||crypto/x509/x_crl.c": [
          "File: crypto/x509/x_crl.c -> crypto/x509/x_crl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:                 if ((nid == NID_issuing_distribution_point)",
          "214:                     || (nid == NID_authority_key_identifier)",
          "215:                     || (nid == NID_delta_crl))",
          "217:                 crl->flags |= EXFLAG_CRITICAL;",
          "218:                 break;",
          "219:             }",
          "",
          "[Removed Lines]",
          "216:                     break;;",
          "",
          "[Added Lines]",
          "216:                     continue;",
          "",
          "---------------"
        ],
        "test/build.info||test/build.info": [
          "File: test/build.info -> test/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:           randtest dhtest enginetest casttest \\",
          "12:           bftest ssltest_old dsatest exptest rsa_test \\",
          "13:           evp_test evp_extra_test igetest v3nametest v3ext \\",
          "15:           constant_time_test verify_extra_test clienthellotest \\",
          "16:           packettest asynctest secmemtest srptest memleaktest \\",
          "17:           dtlsv1listentest ct_test threadstest afalgtest d2i_test \\",
          "",
          "[Removed Lines]",
          "14:           danetest heartbeat_test p5_crpt2_test bad_dtls_test \\",
          "",
          "[Added Lines]",
          "14:           crltest danetest heartbeat_test p5_crpt2_test bad_dtls_test \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:   INCLUDE[v3nametest]=../include",
          "163:   DEPEND[v3nametest]=../libcrypto",
          "165:   SOURCE[v3ext]=v3ext.c",
          "166:   INCLUDE[v3ext]=../include",
          "167:   DEPEND[v3ext]=../libcrypto",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   SOURCE[crltest]=crltest.c testutil.c",
          "166:   INCLUDE[crltest]=../include",
          "167:   DEPEND[crltest]=../libcrypto",
          "",
          "---------------"
        ],
        "test/crltest.c||test/crltest.c": [
          "File: test/crltest.c -> test/crltest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <stdio.h>",
          "11: #include \"../e_os.h\"",
          "12: #include <string.h>",
          "13: #include <openssl/bio.h>",
          "14: #include <openssl/crypto.h>",
          "15: #include <openssl/err.h>",
          "16: #include <openssl/pem.h>",
          "17: #include <openssl/x509.h>",
          "19: #include \"testutil.h\"",
          "21: static const char *kCRLTestRoot[] = {",
          "22:     \"-----BEGIN CERTIFICATE-----\\n\",",
          "23:     \"MIIDbzCCAlegAwIBAgIJAODri7v0dDUFMA0GCSqGSIb3DQEBCwUAME4xCzAJBgNV\\n\",",
          "24:     \"BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBW\\n\",",
          "25:     \"aWV3MRIwEAYDVQQKDAlCb3JpbmdTU0wwHhcNMTYwOTI2MTUwNjI2WhcNMjYwOTI0\\n\",",
          "26:     \"MTUwNjI2WjBOMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQG\\n\",",
          "27:     \"A1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJQm9yaW5nU1NMMIIBIjANBgkq\\n\",",
          "28:     \"hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo16WiLWZuaymsD8n5SKPmxV1y6jjgr3B\\n\",",
          "29:     \"S/dUBpbrzd1aeFzNlI8l2jfAnzUyp+I21RQ+nh/MhqjGElkTtK9xMn1Y+S9GMRh+\\n\",",
          "30:     \"5R/Du0iCb1tCZIPY07Tgrb0KMNWe0v2QKVVruuYSgxIWodBfxlKO64Z8AJ5IbnWp\\n\",",
          "31:     \"uRqO6rctN9qUoMlTIAB6dL4G0tDJ/PGFWOJYwOMEIX54bly2wgyYJVBKiRRt4f7n\\n\",",
          "32:     \"8H922qmvPNA9idmX9G1VAtgV6x97XXi7ULORIQvn9lVQF6nTYDBJhyuPB+mLThbL\\n\",",
          "33:     \"P2o9orxGx7aCtnnBZUIxUvHNOI0FaSaZH7Fi0xsZ/GkG2HZe7ImPJwIDAQABo1Aw\\n\",",
          "34:     \"TjAdBgNVHQ4EFgQUWPt3N5cZ/CRvubbrkqfBnAqhq94wHwYDVR0jBBgwFoAUWPt3\\n\",",
          "35:     \"N5cZ/CRvubbrkqfBnAqhq94wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC\\n\",",
          "36:     \"AQEAORu6M0MOwXy+3VEBwNilfTxyqDfruQsc1jA4PT8Oe8zora1WxE1JB4q2FJOz\\n\",",
          "37:     \"EAuM3H/NXvEnBuN+ITvKZAJUfm4NKX97qmjMJwLKWe1gVv+VQTr63aR7mgWJReQN\\n\",",
          "38:     \"XdMztlVeZs2dppV6uEg3ia1X0G7LARxGpA9ETbMyCpb39XxlYuTClcbA5ftDN99B\\n\",",
          "39:     \"3Xg9KNdd++Ew22O3HWRDvdDpTO/JkzQfzi3sYwUtzMEonENhczJhGf7bQMmvL/w5\\n\",",
          "40:     \"24Wxj4Z7KzzWIHsNqE/RIs6RV3fcW61j/mRgW2XyoWnMVeBzvcJr9NXp4VQYmFPw\\n\",",
          "41:     \"amd8GKMZQvP0ufGnUn7D7uartA==\\n\",",
          "42:     \"-----END CERTIFICATE-----\\n\",",
          "43:     NULL",
          "44: };",
          "46: static const char *kCRLTestLeaf[] = {",
          "47:     \"-----BEGIN CERTIFICATE-----\\n\",",
          "48:     \"MIIDkDCCAnigAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwTjELMAkGA1UEBhMCVVMx\\n\",",
          "49:     \"EzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDU1vdW50YWluIFZpZXcxEjAQ\\n\",",
          "50:     \"BgNVBAoMCUJvcmluZ1NTTDAeFw0xNjA5MjYxNTA4MzFaFw0xNzA5MjYxNTA4MzFa\\n\",",
          "51:     \"MEsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRIwEAYDVQQKDAlC\\n\",",
          "52:     \"b3JpbmdTU0wxEzARBgNVBAMMCmJvcmluZy5zc2wwggEiMA0GCSqGSIb3DQEBAQUA\\n\",",
          "53:     \"A4IBDwAwggEKAoIBAQDc5v1S1M0W+QWM+raWfO0LH8uvqEwuJQgODqMaGnSlWUx9\\n\",",
          "54:     \"8iQcnWfjyPja3lWg9K62hSOFDuSyEkysKHDxijz5R93CfLcfnVXjWQDJe7EJTTDP\\n\",",
          "55:     \"ozEvxN6RjAeYv7CF000euYr3QT5iyBjg76+bon1p0jHZBJeNPP1KqGYgyxp+hzpx\\n\",",
          "56:     \"e0gZmTlGAXd8JQK4v8kpdYwD6PPifFL/jpmQpqOtQmH/6zcLjY4ojmqpEdBqIKIX\\n\",",
          "57:     \"+saA29hMq0+NK3K+wgg31RU+cVWxu3tLOIiesETkeDgArjWRS1Vkzbi4v9SJxtNu\\n\",",
          "58:     \"OZuAxWiynRJw3JwH/OFHYZIvQqz68ZBoj96cepjPAgMBAAGjezB5MAkGA1UdEwQC\\n\",",
          "59:     \"MAAwLAYJYIZIAYb4QgENBB8WHU9wZW5TU0wgR2VuZXJhdGVkIENlcnRpZmljYXRl\\n\",",
          "60:     \"MB0GA1UdDgQWBBTGn0OVVh/aoYt0bvEKG+PIERqnDzAfBgNVHSMEGDAWgBRY+3c3\\n\",",
          "61:     \"lxn8JG+5tuuSp8GcCqGr3jANBgkqhkiG9w0BAQsFAAOCAQEAd2nM8gCQN2Dc8QJw\\n\",",
          "62:     \"XSZXyuI3DBGGCHcay/3iXu0JvTC3EiQo8J6Djv7WLI0N5KH8mkm40u89fJAB2lLZ\\n\",",
          "63:     \"ShuHVtcC182bOKnePgwp9CNwQ21p0rDEu/P3X46ZvFgdxx82E9xLa0tBB8PiPDWh\\n\",",
          "64:     \"lV16jbaKTgX5AZqjnsyjR5o9/mbZVupZJXx5Syq+XA8qiJfstSYJs4KyKK9UOjql\\n\",",
          "65:     \"ICkJVKpi2ahDBqX4MOH4SLfzVk8pqSpviS6yaA1RXqjpkxiN45WWaXDldVHMSkhC\\n\",",
          "66:     \"5CNXsXi4b1nAntu89crwSLA3rEwzCWeYj+BX7e1T9rr3oJdwOU/2KQtW1js1yQUG\\n\",",
          "67:     \"tjJMFw==\\n\",",
          "68:     \"-----END CERTIFICATE-----\\n\",",
          "69:     NULL",
          "70: };",
          "72: static const char *kBasicCRL[] = {",
          "73:     \"-----BEGIN X509 CRL-----\\n\",",
          "74:     \"MIIBpzCBkAIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "75:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "76:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEwNTVaFw0xNjEwMjYxNTEwNTVaoA4wDDAKBgNV\\n\",",
          "77:     \"HRQEAwIBATANBgkqhkiG9w0BAQsFAAOCAQEAnrBKKgvd9x9zwK9rtUvVeFeJ7+LN\\n\",",
          "78:     \"ZEAc+a5oxpPNEsJx6hXoApYEbzXMxuWBQoCs5iEBycSGudct21L+MVf27M38KrWo\\n\",",
          "79:     \"eOkq0a2siqViQZO2Fb/SUFR0k9zb8xl86Zf65lgPplALun0bV/HT7MJcl04Tc4os\\n\",",
          "80:     \"dsAReBs5nqTGNEd5AlC1iKHvQZkM//MD51DspKnDpsDiUVi54h9C1SpfZmX8H2Vv\\n\",",
          "81:     \"diyu0fZ/bPAM3VAGawatf/SyWfBMyKpoPXEG39oAzmjjOj8en82psn7m474IGaho\\n\",",
          "82:     \"/vBbhl1ms5qQiLYPjm4YELtnXQoFyC72tBjbdFd/ZE9k4CNKDbxFUXFbkw==\\n\",",
          "83:     \"-----END X509 CRL-----\\n\",",
          "84:     NULL",
          "85: };",
          "87: static const char *kRevokedCRL[] = {",
          "88:     \"-----BEGIN X509 CRL-----\\n\",",
          "89:     \"MIIBvjCBpwIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "90:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "91:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEyNDRaFw0xNjEwMjYxNTEyNDRaMBUwEwICEAAX\\n\",",
          "92:     \"DTE2MDkyNjE1MTIyNlqgDjAMMAoGA1UdFAQDAgECMA0GCSqGSIb3DQEBCwUAA4IB\\n\",",
          "93:     \"AQCUGaM4DcWzlQKrcZvI8TMeR8BpsvQeo5BoI/XZu2a8h//PyRyMwYeaOM+3zl0d\\n\",",
          "94:     \"sjgCT8b3C1FPgT+P2Lkowv7rJ+FHJRNQkogr+RuqCSPTq65ha4WKlRGWkMFybzVH\\n\",",
          "95:     \"NloxC+aU3lgp/NlX9yUtfqYmJek1CDrOOGPrAEAwj1l/BUeYKNGqfBWYJQtPJu+5\\n\",",
          "96:     \"OaSvIYGpETCZJscUWODmLEb/O3DM438vLvxonwGqXqS0KX37+CHpUlyhnSovxXxp\\n\",",
          "97:     \"Pz4aF+L7OtczxL0GYtD2fR9B7TDMqsNmHXgQrixvvOY7MUdLGbd4RfJL3yA53hyO\\n\",",
          "98:     \"xzfKY2TzxLiOmctG0hXFkH5J\\n\",",
          "99:     \"-----END X509 CRL-----\\n\",",
          "100:     NULL",
          "101: };",
          "103: static const char *kBadIssuerCRL[] = {",
          "104:     \"-----BEGIN X509 CRL-----\\n\",",
          "105:     \"MIIBwjCBqwIBATANBgkqhkiG9w0BAQsFADBSMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "106:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEWMBQGA1UECgwN\\n\",",
          "107:     \"Tm90IEJvcmluZ1NTTBcNMTYwOTI2MTUxMjQ0WhcNMTYxMDI2MTUxMjQ0WjAVMBMC\\n\",",
          "108:     \"AhAAFw0xNjA5MjYxNTEyMjZaoA4wDDAKBgNVHRQEAwIBAjANBgkqhkiG9w0BAQsF\\n\",",
          "109:     \"AAOCAQEAlBmjOA3Fs5UCq3GbyPEzHkfAabL0HqOQaCP12btmvIf/z8kcjMGHmjjP\\n\",",
          "110:     \"t85dHbI4Ak/G9wtRT4E/j9i5KML+6yfhRyUTUJKIK/kbqgkj06uuYWuFipURlpDB\\n\",",
          "111:     \"cm81RzZaMQvmlN5YKfzZV/clLX6mJiXpNQg6zjhj6wBAMI9ZfwVHmCjRqnwVmCUL\\n\",",
          "112:     \"TybvuTmkryGBqREwmSbHFFjg5ixG/ztwzON/Ly78aJ8Bql6ktCl9+/gh6VJcoZ0q\\n\",",
          "113:     \"L8V8aT8+Ghfi+zrXM8S9BmLQ9n0fQe0wzKrDZh14EK4sb7zmOzFHSxm3eEXyS98g\\n\",",
          "114:     \"Od4cjsc3ymNk88S4jpnLRtIVxZB+SQ==\\n\",",
          "115:     \"-----END X509 CRL-----\\n\",",
          "116:     NULL",
          "117: };",
          "123: static const char *kKnownCriticalCRL[] = {",
          "124:     \"-----BEGIN X509 CRL-----\\n\",",
          "125:     \"MIIBujCBowIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "126:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "127:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEwNTVaFw0xNjEwMjYxNTEwNTVaoCEwHzAKBgNV\\n\",",
          "128:     \"HRQEAwIBATARBgNVHRwBAf8EBzAFoQMBAf8wDQYJKoZIhvcNAQELBQADggEBAA+3\\n\",",
          "129:     \"i+5e5Ub8sccfgOBs6WVJFI9c8gvJjrJ8/dYfFIAuCyeocs7DFXn1n13CRZ+URR/Q\\n\",",
          "130:     \"mVWgU28+xeusuSPYFpd9cyYTcVyNUGNTI3lwgcE/yVjPaOmzSZKdPakApRxtpKKQ\\n\",",
          "131:     \"NN/56aQz3bnT/ZSHQNciRB8U6jiD9V30t0w+FDTpGaG+7bzzUH3UVF9xf9Ctp60A\\n\",",
          "132:     \"3mfLe0scas7owSt4AEFuj2SPvcE7yvdOXbu+IEv21cEJUVExJAbhvIweHXh6yRW+\\n\",",
          "133:     \"7VVeiNzdIjkZjyTmAzoXGha4+wbxXyBRbfH+XWcO/H+8nwyG8Gktdu2QB9S9nnIp\\n\",",
          "134:     \"o/1TpfOMSGhMyMoyPrk=\\n\",",
          "135:     \"-----END X509 CRL-----\\n\",",
          "136:     NULL",
          "137: };",
          "142: static const char *kUnknownCriticalCRL[] = {",
          "143:     \"-----BEGIN X509 CRL-----\\n\",",
          "144:     \"MIIBvDCBpQIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "145:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "146:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEwNTVaFw0xNjEwMjYxNTEwNTVaoCMwITAKBgNV\\n\",",
          "147:     \"HRQEAwIBATATBgwqhkiG9xIEAYS3CQABAf8EADANBgkqhkiG9w0BAQsFAAOCAQEA\\n\",",
          "148:     \"GvBP0xqL509InMj/3493YVRV+ldTpBv5uTD6jewzf5XdaxEQ/VjTNe5zKnxbpAib\\n\",",
          "149:     \"Kf7cwX0PMSkZjx7k7kKdDlEucwVvDoqC+O9aJcqVmM6GDyNb9xENxd0XCXja6MZC\\n\",",
          "150:     \"yVgP4AwLauB2vSiEprYJyI1APph3iAEeDm60lTXX/wBM/tupQDDujKh2GPyvBRfJ\\n\",",
          "151:     \"+wEDwGg3ICwvu4gO4zeC5qnFR+bpL9t5tOMAQnVZ0NWv+k7mkd2LbHdD44dxrfXC\\n\",",
          "152:     \"nhtfERx99SDmC/jtUAJrGhtCO8acr7exCeYcduN7KKCm91OeCJKK6OzWst0Og1DB\\n\",",
          "153:     \"kwzzU2rL3G65CrZ7H0SZsQ==\\n\",",
          "154:     \"-----END X509 CRL-----\\n\",",
          "155:     NULL",
          "156: };",
          "162: static const char *kUnknownCriticalCRL2[] = {",
          "163:     \"-----BEGIN X509 CRL-----\\n\",",
          "164:     \"MIIBzzCBuAIBATANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJVUzETMBEGA1UE\\n\",",
          "165:     \"CAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzESMBAGA1UECgwJ\\n\",",
          "166:     \"Qm9yaW5nU1NMFw0xNjA5MjYxNTEwNTVaFw0xNjEwMjYxNTEwNTVaoDYwNDAKBgNV\\n\",",
          "167:     \"HRQEAwIBATARBgNVHRwBAf8EBzAFoQMBAf8wEwYMKoZIhvcSBAGEtwkAAQH/BAAw\\n\",",
          "168:     \"DQYJKoZIhvcNAQELBQADggEBACTcpQC8jXL12JN5YzOcQ64ubQIe0XxRAd30p7qB\\n\",",
          "169:     \"BTXGpgqBjrjxRfLms7EBYodEXB2oXMsDq3km0vT1MfYdsDD05S+SQ9CDsq/pUfaC\\n\",",
          "170:     \"E2WNI5p8WircRnroYvbN2vkjlRbMd1+yNITohXYXCJwjEOAWOx3XIM10bwPYBv4R\\n\",",
          "171:     \"rDobuLHoMgL3yHgMHmAkP7YpkBucNqeBV8cCdeAZLuhXFWi6yfr3r/X18yWbC/r2\\n\",",
          "172:     \"2xXdkrSqXLFo7ToyP8YKTgiXpya4x6m53biEYwa2ULlas0igL6DK7wjYZX95Uy7H\\n\",",
          "173:     \"GKljn9weIYiMPV/BzGymwfv2EW0preLwtyJNJPaxbdin6Jc=\\n\",",
          "174:     \"-----END X509 CRL-----\\n\",",
          "175:     NULL",
          "176: };",
          "183: static BIO *glue(const char **pem, char **out)",
          "184: {",
          "185:     char *dest;",
          "186:     int i;",
          "187:     size_t s = 0;",
          "190:     for (i = 0; pem[i] != NULL; ++i)",
          "191:         s += strlen(pem[i]);",
          "192:     dest = *out = OPENSSL_malloc(s + 1);",
          "193:     if (dest == NULL)",
          "194:         return NULL;",
          "195:     for (i = 0; pem[i] != NULL; ++i)",
          "196:         dest += strlen(strcpy(dest, pem[i]));",
          "197:     return BIO_new_mem_buf(*out, s);",
          "198: }",
          "203: static X509_CRL *CRL_from_strings(const char **pem)",
          "204: {",
          "205:     char *p;",
          "206:     BIO *b = glue(pem, &p);",
          "207:     X509_CRL *crl = PEM_read_bio_X509_CRL(b, NULL, NULL, NULL);",
          "209:     OPENSSL_free(p);",
          "210:     BIO_free(b);",
          "211:     return crl;",
          "212: }",
          "217: static X509 *X509_from_strings(const char **pem)",
          "218: {",
          "219:     char *p;",
          "220:     BIO *b = glue(pem, &p);",
          "221:     X509 *x = PEM_read_bio_X509(b, NULL, NULL, NULL);",
          "223:     OPENSSL_free(p);",
          "224:     BIO_free(b);",
          "225:     return x;",
          "226: }",
          "234: static int verify(X509 *leaf, X509 *root, STACK_OF(X509_CRL) *crls,",
          "235:                   unsigned long flags)",
          "236: {",
          "237:     X509_STORE_CTX *ctx = X509_STORE_CTX_new();",
          "238:     X509_STORE *store = X509_STORE_new();",
          "239:     X509_VERIFY_PARAM *param = X509_VERIFY_PARAM_new();",
          "240:     STACK_OF(X509) *roots = sk_X509_new_null();",
          "241:     int status = X509_V_ERR_UNSPECIFIED;",
          "243:     if (ctx == NULL || store == NULL || param == NULL || roots == NULL)",
          "244:         goto err;",
          "247:     X509_up_ref(root);",
          "248:     if (!sk_X509_push(roots, root))",
          "249:         goto err;",
          "251:     if (!X509_STORE_CTX_init(ctx, store, leaf, NULL))",
          "252:         goto err;",
          "253:     X509_STORE_CTX_set0_trusted_stack(ctx, roots);",
          "254:     X509_STORE_CTX_set0_crls(ctx, crls);",
          "255:     X509_VERIFY_PARAM_set_time(param, 1474934400 /* Sep 27th, 2016 */);",
          "256:     X509_VERIFY_PARAM_set_depth(param, 16);",
          "257:     if (flags)",
          "258:         X509_VERIFY_PARAM_set_flags(param, flags);",
          "259:     X509_STORE_CTX_set0_param(ctx, param);",
          "261:     ERR_clear_error();",
          "262:     status = X509_verify_cert(ctx) == 1 ? X509_V_OK",
          "263:                                         : X509_STORE_CTX_get_error(ctx);",
          "264: err:",
          "265:     sk_X509_pop_free(roots, X509_free);",
          "266:     sk_X509_CRL_pop_free(crls, X509_CRL_free);",
          "267:     X509_STORE_CTX_free(ctx);",
          "268:     X509_STORE_free(store);",
          "269:     return status;",
          "270: }",
          "277: static STACK_OF(X509_CRL) *make_CRL_stack(X509_CRL *x1, X509_CRL *x2)",
          "278: {",
          "279:     STACK_OF(X509_CRL) *sk = sk_X509_CRL_new_null();",
          "281:     sk_X509_CRL_push(sk, x1);",
          "282:     X509_CRL_up_ref(x1);",
          "283:     if (x2 != NULL) {",
          "284:         sk_X509_CRL_push(sk, x2);",
          "285:         X509_CRL_up_ref(x2);",
          "286:     }",
          "287:     return sk;",
          "288: }",
          "290: static int test_crl()",
          "291: {",
          "292:     X509 *root = X509_from_strings(kCRLTestRoot);",
          "293:     X509 *leaf = X509_from_strings(kCRLTestLeaf);",
          "294:     X509_CRL *basic_crl = CRL_from_strings(kBasicCRL);",
          "295:     X509_CRL *revoked_crl = CRL_from_strings(kRevokedCRL);",
          "296:     X509_CRL *bad_issuer_crl = CRL_from_strings(kBadIssuerCRL);",
          "297:     X509_CRL *known_critical_crl = CRL_from_strings(kKnownCriticalCRL);",
          "298:     X509_CRL *unknown_critical_crl = CRL_from_strings(kUnknownCriticalCRL);",
          "299:     X509_CRL *unknown_critical_crl2 = CRL_from_strings(kUnknownCriticalCRL2);",
          "300:     int status = 0;",
          "302:     if (root == NULL || leaf == NULL || basic_crl == NULL",
          "303:             || revoked_crl == NULL || bad_issuer_crl == NULL",
          "304:             || known_critical_crl == NULL || unknown_critical_crl == NULL",
          "305:             || unknown_critical_crl2 == NULL) {",
          "306:         fprintf(stderr, \"Failed to parse certificates and CRLs.\\n\");",
          "307:         goto err;",
          "308:     }",
          "310:     if (verify(leaf, root, make_CRL_stack(basic_crl, NULL),",
          "311:                X509_V_FLAG_CRL_CHECK) != X509_V_OK) {",
          "312:         fprintf(stderr, \"Cert with CRL didn't verify.\\n\");",
          "313:         goto err;",
          "314:     }",
          "316:     if (verify(leaf, root, make_CRL_stack(basic_crl, revoked_crl),",
          "317:                X509_V_FLAG_CRL_CHECK) != X509_V_ERR_CERT_REVOKED) {",
          "318:         fprintf(stderr, \"Revoked CRL wasn't checked.\\n\");",
          "319:         goto err;",
          "320:     }",
          "322:     if (verify(leaf, root, NULL,",
          "323:                X509_V_FLAG_CRL_CHECK) != X509_V_ERR_UNABLE_TO_GET_CRL) {",
          "324:         fprintf(stderr, \"CRLs were not required.\\n\");",
          "325:         goto err;",
          "326:     }",
          "328:     if (verify(leaf, root, make_CRL_stack(bad_issuer_crl, NULL),",
          "329:                X509_V_FLAG_CRL_CHECK) != X509_V_ERR_UNABLE_TO_GET_CRL) {",
          "330:         fprintf(stderr, \"Bad CRL issuer was unnoticed.\\n\");",
          "331:         goto err;",
          "332:     }",
          "334:     if (verify(leaf, root, make_CRL_stack(known_critical_crl, NULL),",
          "335:                X509_V_FLAG_CRL_CHECK) != X509_V_OK) {",
          "336:         fprintf(stderr, \"CRL with known critical extension was rejected.\\n\");",
          "337:         goto err;",
          "338:     }",
          "340:     if (verify(leaf, root, make_CRL_stack(unknown_critical_crl, NULL),",
          "341:                X509_V_FLAG_CRL_CHECK) !=",
          "342:             X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION) {",
          "343:         fprintf(stderr, \"CRL with unknown critical extension was accepted.\\n\");",
          "344:         goto err;",
          "345:     }",
          "347:     if (verify(leaf, root, make_CRL_stack(unknown_critical_crl2, NULL),",
          "348:                X509_V_FLAG_CRL_CHECK) !=",
          "349:             X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION) {",
          "350:         fprintf(stderr, \"CRL with unknown critical extension (2) was accepted.\\n\");",
          "351:         goto err;",
          "352:     }",
          "354:     status = 1;",
          "356: err:",
          "357:     X509_free(root);",
          "358:     X509_free(leaf);",
          "359:     X509_CRL_free(basic_crl);",
          "360:     X509_CRL_free(revoked_crl);",
          "361:     X509_CRL_free(bad_issuer_crl);",
          "362:     X509_CRL_free(known_critical_crl);",
          "363:     X509_CRL_free(unknown_critical_crl);",
          "364:     X509_CRL_free(unknown_critical_crl2);",
          "365:     return status;",
          "366: }",
          "368: int main()",
          "369: {",
          "370:     ADD_TEST(test_crl);",
          "371:     return run_tests(\"crltest\");",
          "372: }",
          "",
          "---------------"
        ],
        "test/recipes/25-test_crl.t||test/recipes/25-test_crl.t": [
          "File: test/recipes/25-test_crl.t -> test/recipes/25-test_crl.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: setup(\"test_crl\");",
          "20: require_ok(srctop_file('test','recipes','tconversion.pl'));",
          "22: subtest 'crl conversions' => sub {",
          "23:     tconversion(\"crl\", srctop_file(\"test\",\"testcrl.pem\"));",
          "24: };",
          "",
          "[Removed Lines]",
          "18: plan tests => 2;",
          "",
          "[Added Lines]",
          "18: plan tests => 3;",
          "26: ok(run(test(['crltest'])));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1371be1500a218d26c19c2f61239a5e0262cbf4f",
      "candidate_info": {
        "commit_hash": "1371be1500a218d26c19c2f61239a5e0262cbf4f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1371be1500a218d26c19c2f61239a5e0262cbf4f",
        "files": [
          "crypto/modes/ocb128.c"
        ],
        "message": "modes/ocb128.c: fix misaligned access in ILP32 builds on 64-bit processors.\n\nOne could have fixed the problem by arranging 64-bit alignment of\nEVP_AES_OCB_CTX.aad_buf in evp/e_aes.c, but CRYPTO_ocb128_aad\nprototype doesn't imply alignment and we have to honour it.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2994)\n\n(cherry picked from commit a2bb183623dac253792753b82e291fd1d180aa78)",
        "before_after_code_files": [
          "crypto/modes/ocb128.c||crypto/modes/ocb128.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/modes/ocb128.c||crypto/modes/ocb128.c": [
          "File: crypto/modes/ocb128.c -> crypto/modes/ocb128.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:         aad_block = (OCB_BLOCK *)(aad + ((i - ctx->blocks_hashed - 1) * 16));",
          "298:         ctx->encrypt(tmp1.c, tmp2.c, ctx->keyenc);",
          "299:         ocb_block16_xor(&ctx->sum, &tmp2, &ctx->sum);",
          "300:     }",
          "",
          "[Removed Lines]",
          "297:         ocb_block16_xor(&ctx->offset_aad, aad_block, &tmp1);",
          "",
          "[Added Lines]",
          "297:         ocb_block16_xor_misaligned(&ctx->offset_aad, aad_block, &tmp1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}