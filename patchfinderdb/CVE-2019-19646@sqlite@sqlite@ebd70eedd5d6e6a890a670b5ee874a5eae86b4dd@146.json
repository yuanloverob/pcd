{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41e0717bcb409de9ec296c3215b572dfab2697c9",
      "candidate_info": {
        "commit_hash": "41e0717bcb409de9ec296c3215b572dfab2697c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41e0717bcb409de9ec296c3215b572dfab2697c9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/resetdb.test"
        ],
        "message": "Update test file \"resetdb.test\" so that it works with the \"prepare\" permutation.\n\nFossilOrigin-Name: 95d338124be2e0e18f17354b28f4320336202f1a4ec1177df753b2800e954bfb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/resetdb.test||test/resetdb.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c8769c69f301307db6663adb8b7c0b89f5959516bf6110cb8ff4b21bd903f70",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/resetdb.test||test/resetdb.test": [
          "File: test/resetdb.test -> test/resetdb.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   db eval VACUUM",
          "84:   sqlite3_db_config db RESET_DB 0",
          "86:   # Verify that the reset took, even on the separate database connection",
          "87:   catchsql {",
          "88:      PRAGMA page_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   # If using sqlite3_prepare() instead of _v2() or _v3(), the block",
          "87:   # below raises an SQLITE_SCHEMA error. The following fixes this.",
          "88:   if {[permutation]==\"prepare\"} { catchsql \"SELECT * FROM sqlite_master\" db2 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cb0263bcd2fcce37ff203527033bea8aeb08ef2",
      "candidate_info": {
        "commit_hash": "1cb0263bcd2fcce37ff203527033bea8aeb08ef2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1cb0263bcd2fcce37ff203527033bea8aeb08ef2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix an obsolete comment in the CLI.  No code changes.\n\nFossilOrigin-Name: fade103cbac1b067f9544935b767f36dc266aceb3269cc84a3ae3b04ad9a4823",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e775ef002dd33e6bcbeec8d4b6ad7f59749e35548c7a59c9fa3bcfdc5cc50730",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in"
        ]
      }
    },
    {
      "candidate_hash": "b33487b0b6df3b669ba76d386b3a42c75fd904af",
      "candidate_info": {
        "commit_hash": "b33487b0b6df3b669ba76d386b3a42c75fd904af",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b33487b0b6df3b669ba76d386b3a42c75fd904af",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window4.tcl"
        ],
        "message": "Improvements to the way built-in window functions are handled.\n\nFossilOrigin-Name: e8eee566dfca6f4c8af074731dfe91f7fbcd9ca72f0303235b52e4e2e80d5b71",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window4.tcl||test/window4.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af0ea1363548461b2aad8fd54ee3f2f616111dcae2d6480f5294da44c87a0a5d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3581:   int regFirst;",
          "3582: };",
          "3584: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3582:   int regSize;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1093:   pMWin->regFirst = ++pParse->nMem;",
          "1094:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1096:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1097:     FuncDef *p = pWin->pFunc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1095:   pMWin->regSize = ++pParse->nMem;",
          "1096:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1841:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1842: }",
          "1844: static void windowCodeStep(",
          "1845:   Parse *pParse,",
          "1846:   Select *p,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1850: static int windowCachePartition(Window *pMWin){",
          "1851:   Window *pWin;",
          "1852:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1853:     FuncDef *pFunc = pWin->pFunc;",
          "1854:     if( (pFunc->funcFlags & SQLITE_FUNC_WINDOW_SIZE)",
          "1855:      || (pFunc->zName==nth_valueName)",
          "1856:      || (pFunc->zName==first_valueName)",
          "1857:      || (pFunc->zName==leadName)",
          "1858:      || (pFunc->zName==lagName)",
          "1859:     ){",
          "1860:       return 1;",
          "1861:     }",
          "1862:   }",
          "1863:   return 0;",
          "1864: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1871:   int addrIfStart;",
          "1872:   int addrGosubFlush;",
          "1873:   int addrInteger;",
          "1875:   int addrShortcut = 0;",
          "1877:   int reg = pParse->nMem+1;",
          "1878:   int regRecord = reg+nSub;",
          "1879:   int regRowid = regRecord+1;",
          "1881:   pParse->nMem += 1 + nSub + 1;",
          "1883:   regFlushPart = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1896:   int addrCacheRewind;",
          "1897:   int addrCacheNext;",
          "1901:   int bCache = windowCachePartition(pMWin);",
          "1907:   bCache = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1914:     addrIf = sqlite3VdbeAddOp1(v, OP_If, pMWin->regFirst);",
          "1915:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "1916:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1918:     VdbeCoverageEqNe(v);",
          "1919:     addrGosubFlush = sqlite3VdbeAddOp1(v, OP_Gosub, regFlushPart);",
          "1920:     VdbeComment((v, \"call flush_partition\"));",
          "1921:     sqlite3VdbeJumpHere(v, addrIf);",
          "1922:   }",
          "1925:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "1926:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "1934:   }",
          "1936:   regArg = windowInitAccum(pParse, pMWin);",
          "1938:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "",
          "[Removed Lines]",
          "1917:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+3, addr+2);",
          "1929:   addrIf = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "1930:   if( pMWin->pPartition ){",
          "1931:     sqlite3VdbeAddOp3(v, OP_Copy,",
          "1932:         reg+pMWin->nBufferCol, pMWin->regPart, pMWin->pPartition->nExpr-1",
          "1933:     );",
          "",
          "[Added Lines]",
          "1950:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+4, addr+2);",
          "1955:     sqlite3VdbeAddOp3(v, OP_Copy, regNewPart, pMWin->regPart, nPart-1);",
          "1961:   sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regSize, 1);",
          "1963:   if( bCache ){",
          "1964:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "1965:     sqlite3WhereEnd(pWInfo);",
          "1966:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "1967:     if( pMWin->pPartition ){",
          "1968:       sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "1969:     }",
          "1970:     addrCacheRewind = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "1971:   }else{",
          "1972:     addrIf = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1944:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "1945:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "1946:     windowAggFinal(pParse, pMWin, 0);",
          "1950:     addrShortcut = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1951:     sqlite3VdbeJumpHere(v, addrGe);",
          "1952:   }",
          "",
          "[Removed Lines]",
          "1947:     sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "1948:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1949:     sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "",
          "[Added Lines]",
          "1987:     if( bCache ){",
          "1988:       sqlite3VdbeAddOp2(v, OP_Rowid, csrWrite, regRowid);",
          "1989:       sqlite3VdbeAddOp3(v, OP_NotExists, csrCurrent, 0, regRowid);",
          "1990:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1991:       sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheRewind+1);",
          "1992:     }else{",
          "1993:       sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1);",
          "1994:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1995:       sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "1996:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1962:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1967:   if( pMWin->eStart==TK_FOLLOWING ){",
          "1968:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "",
          "[Removed Lines]",
          "1965:   sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "2012:   if( bCache ){",
          "2013:     addrCacheNext = sqlite3VdbeCurrentAddr(v);",
          "2014:   }else{",
          "2015:     sqlite3VdbeJumpHere(v, addrIf);",
          "2016:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1974:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1975:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1977:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "1978:   }else",
          "1979:   if( pMWin->eEnd==TK_PRECEDING ){",
          "1980:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1981:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "1983:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1985:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Removed Lines]",
          "1976:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1982:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "",
          "[Added Lines]",
          "2027:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "2033:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1989:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1990:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1992:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "1993:   }else{",
          "1994:     addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "",
          "[Removed Lines]",
          "1991:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "",
          "[Added Lines]",
          "2042:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1997:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1998:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1999:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2001:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2002:     sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2003:   }",
          "",
          "[Removed Lines]",
          "2000:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "",
          "[Added Lines]",
          "2051:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2005:   sqlite3VdbeJumpHere(v, addrGoto);",
          "2006:   if( pMWin->eEnd!=TK_PRECEDING ){",
          "2007:     sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2009:   }",
          "2018:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "2019:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2020:   }",
          "",
          "[Removed Lines]",
          "2008:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "2012:   if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2013:   sqlite3WhereEnd(pWInfo);",
          "2017:   if( pMWin->pPartition ){",
          "",
          "[Added Lines]",
          "2059:     windowAggStep(pParse, pMWin, csrEnd, 0, regArg, pMWin->regSize);",
          "2063:   if( bCache ){",
          "2064:     sqlite3VdbeAddOp2(v, OP_Next, csrWrite, addrCacheNext);",
          "2065:     sqlite3VdbeJumpHere(v, addrCacheRewind);",
          "2066:   }else{",
          "2067:     if( addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2068:     sqlite3WhereEnd(pWInfo);",
          "2069:   }",
          "2073:   if( pMWin->pPartition && bCache==0 ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2031:     addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2032:     sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "2033:     sqlite3VdbeAddOp0(v, OP_Goto);",
          "2035:     sqlite3VdbeJumpHere(v, addrIfStart);",
          "2036:     sqlite3VdbeJumpHere(v, addrIfStart+2);",
          "",
          "[Removed Lines]",
          "2034:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "",
          "[Added Lines]",
          "2090:     windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2043:     if( pMWin->eEnd==TK_PRECEDING ){",
          "2044:       addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2045:       sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "2047:       sqlite3VdbeJumpHere(v, addrIfEnd);",
          "2048:       windowAggFinal(pParse, pMWin, 0);",
          "2049:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "2046:       windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "",
          "[Added Lines]",
          "2102:       windowAggStep(pParse, pMWin, csrEnd, 0, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2052:       windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2053:       addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "2054:       sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "2056:       sqlite3VdbeJumpHere(v, addrIfStart);",
          "2057:       sqlite3VdbeAddOp2(v, OP_Goto, 0, addrGoto-1);",
          "2058:     }",
          "",
          "[Removed Lines]",
          "2055:       windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "",
          "[Added Lines]",
          "2111:       windowAggStep(pParse, pMWin, csrStart, 1, regArg, pMWin->regSize);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2060:   }",
          "2063:   sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "2065:   if( pMWin->pPartition ){",
          "2066:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2067:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "",
          "[Removed Lines]",
          "2064:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "[Added Lines]",
          "2119:   if( bCache && addrShortcut>0 ) sqlite3VdbeJumpHere(v, addrShortcut);",
          "2121:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "2122:   if( bCache==0 ) sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2530:   if( pMWin->eType==TK_ROWS",
          "2531:    && (pMWin->eStart!=TK_UNBOUNDED||pMWin->eEnd!=TK_CURRENT||!pMWin->pOrderBy)",
          "2532:   ){",
          "2550:     ){",
          "2551:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2552:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "2533:     Window *pWin;",
          "2535:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "2536:       FuncDef *pFunc = pWin->pFunc;",
          "2537:       if( (pFunc->funcFlags & SQLITE_FUNC_WINDOW_SIZE)",
          "2538:         || (pFunc->zName==nth_valueName)",
          "2539:         || (pFunc->zName==first_valueName)",
          "2540:         || (pFunc->zName==leadName)",
          "2541:         || (pFunc->zName==lagName)",
          "2542:       ){",
          "2543:         bCache = 1;",
          "2544:         break;",
          "2545:       }",
          "2546:     }",
          "2547:     if( bCache",
          "2548:     || (pMWin->eStart!=TK_PRECEDING && pMWin->eStart!=TK_FOLLOWING)",
          "2549:     || (pMWin->eEnd!=TK_FOLLOWING && pMWin->eEnd!=TK_PRECEDING)",
          "",
          "[Added Lines]",
          "2591:     if( (pMWin->eStart!=TK_PRECEDING && pMWin->eStart!=TK_FOLLOWING)",
          "2592:      || (pMWin->eEnd!=TK_FOLLOWING && pMWin->eEnd!=TK_PRECEDING)",
          "",
          "---------------"
        ],
        "test/window4.tcl||test/window4.tcl": [
          "File: test/window4.tcl -> test/window4.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2018 May 19",
          "",
          "[Added Lines]",
          "1: ## 2018 May 19",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8975ac9e1e5f9cf5bf394fb8e3f5e9f4d0f2470",
      "candidate_info": {
        "commit_hash": "e8975ac9e1e5f9cf5bf394fb8e3f5e9f4d0f2470",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e8975ac9e1e5f9cf5bf394fb8e3f5e9f4d0f2470",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite3ext.h"
        ],
        "message": "Add new APIs to the extension loading mechanism.\n\nFossilOrigin-Name: 6f122faf8a34b986e58ba4622cff918c6d133d6f91d4b723b50bd086d5bed8e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite3ext.h||src/sqlite3ext.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b3f2c3205a28dc21ea7080e5e1ba246ce9c9b90c1309262ca11d8e40943ed677",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:                             void(*xDestroy)(void*));",
          "321:   const char *(*normalized_sql)(sqlite3_stmt*);",
          "322: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:   int (*stmt_isexplain)(sqlite3_stmt*);",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608: #define sqlite3_create_window_function sqlite3_api->create_window_function",
          "610: #define sqlite3_normalized_sql         sqlite3_api->normalized_sql",
          "613: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: #define sqlite3_stmt_isexplain         sqlite3_api->isexplain",
          "616: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9042ff214b1b7f42d77cff6d8c1d1c22aa0b5428",
      "candidate_info": {
        "commit_hash": "9042ff214b1b7f42d77cff6d8c1d1c22aa0b5428",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9042ff214b1b7f42d77cff6d8c1d1c22aa0b5428",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tokenize.c",
          "test/normalize.test"
        ],
        "message": "Fix issues with the new normalizer.\n\nFossilOrigin-Name: 057d7d40c56b7416a59a79cb627b2b3e5837eca2d6dbcb50127baaadf1941f51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tokenize.c||src/tokenize.c",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a4c890b0af9786295e6df05022009d8946550adb873535c610be805c2b7a4083",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:         break;",
          "800:       }",
          "801:       case TK_ID: {",
          "802:         j = pStr->nChar;",
          "803:         if( sqlite3Isquote(zSql[i]) ){",
          "804:           char *zId = sqlite3DbStrNDup(db, zSql+i, n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:         iStartIN = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "829:         }",
          "830:         break;",
          "831:       }",
          "832:       default: {",
          "833:         if( sqlite3IsIdChar(zSql[i]) ) addSpaceSeparator(pStr);",
          "834:         j = pStr->nChar;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:       case TK_SELECT: {",
          "834:         iStartIN = 0;",
          "836:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "841:       }",
          "842:     }",
          "843:   }",
          "844:   return sqlite3_str_finish(pStr);",
          "845: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "849:   if( tokenType!=TK_SEMI ) sqlite3_str_append(pStr, \";\", 1);",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:   430",
          "208:   {SELECT \"a\" FROM t1 WHERE \"x\" IN (\"1\",\"2\",'3');}",
          "209:   0x2",
          "212:   440",
          "213:   {SELECT 'a' FROM t1 WHERE 'x';}",
          "",
          "[Removed Lines]",
          "210:   {0 {SELECT\"a\"FROM t1 WHERE\"x\"IN(?,?,?);}}",
          "",
          "[Added Lines]",
          "210:   {0 {SELECT a FROM t1 WHERE x IN(?,?,?);}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:   450",
          "218:   {SELECT [a] FROM t1 WHERE [x];}",
          "219:   0x2",
          "222:   460",
          "223:   {SELECT * FROM t1 WHERE x IN (x);}",
          "",
          "[Removed Lines]",
          "220:   {0 {SELECT\"a\"FROM t1 WHERE\"x\";}}",
          "",
          "[Added Lines]",
          "220:   {0 {SELECT a FROM t1 WHERE x;}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   480",
          "233:   {SELECT * FROM t1 WHERE x IN ([x],\"a\");}",
          "234:   0x2",
          "237:   500",
          "238:   {SELECT * FROM t1 WHERE x IN ([x],\"a\",'b',sqlite_version());}",
          "239:   0x2",
          "242:   520",
          "243:   {SELECT * FROM t1 WHERE x IN (SELECT x FROM t1);}",
          "",
          "[Removed Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\");}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(\"x\",\"a\",?,sqlite_version());}}",
          "",
          "[Added Lines]",
          "235:   {0 {SELECT*FROM t1 WHERE x IN(x,a);}}",
          "240:   {0 {SELECT*FROM t1 WHERE x IN(x,a,?,sqlite_version());}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:   540",
          "248:   {SELECT * FROM t1 WHERE x IN ((SELECT x FROM t1));}",
          "249:   0x2",
          "252:   550",
          "253:   {SELECT a, a+1, a||'b', a+\"b\" FROM t1;}",
          "254:   0x2",
          "257:   570",
          "258:   {SELECT * FROM t1 WHERE x IN (1);}",
          "",
          "[Removed Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN(?,?,?);}}",
          "255:   {0 {SELECT a,a+?,a||?,a+\"b\"FROM t1;}}",
          "",
          "[Added Lines]",
          "250:   {0 {SELECT*FROM t1 WHERE x IN((SELECT x FROM t1));}}",
          "255:   {0 {SELECT a,a+?,a||?,a+b FROM t1;}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:   680",
          "317:   {SELECT a, \"col f\" FROM t1 LEFT OUTER JOIN t2 ON [t1].[col f] == [t2].[col y];}",
          "318:   0x2",
          "321:   690",
          "322:   {SELECT * FROM ( WITH x AS ( SELECT * FROM t1 WHERE x IN ( 1)) SELECT 10);}",
          "",
          "[Removed Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON\"t1\".\"col f\"==\"t2\".\"col y\";}}",
          "",
          "[Added Lines]",
          "319:   {0 {SELECT a,\"col f\"FROM t1 LEFT OUTER JOIN t2 ON t1.\"col f\"==t2.\"col y\";}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "346:   760",
          "347:   {SELECT x FROM t1 WHERE x IN ([x] IS NOT NULL, NULL, 1, 'a', \"b\", x'00');}",
          "348:   0x2",
          "350: } {",
          "351:   do_test $tnum {",
          "352:     set code [catch {",
          "",
          "[Removed Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(\"x\"IS NOT NULL,?,?,?,\"b\",?);}}",
          "",
          "[Added Lines]",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(x IS NOT NULL,?,?,?,b,?);}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}