{
  "cve_id": "CVE-2016-0701",
  "cve_desc": "The DH_check_pub_key function in crypto/dh/dh_check.c in OpenSSL 1.0.2 before 1.0.2f does not ensure that prime numbers are appropriate for Diffie-Hellman (DH) key exchange, which makes it easier for remote attackers to discover a private DH exponent by making multiple handshakes with a peer that chose an inappropriate number, as demonstrated by a number in an X9.42 file.",
  "repo": "openssl/openssl",
  "patch_hash": "b128abc3437600c3143cb2145185ab87ba3156a2",
  "patch_info": {
    "commit_hash": "b128abc3437600c3143cb2145185ab87ba3156a2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/b128abc3437600c3143cb2145185ab87ba3156a2",
    "files": [
      "crypto/dh/dh_check.c",
      "include/openssl/dh.h"
    ],
    "message": "Prevent small subgroup attacks on DH/DHE\n\nHistorically OpenSSL only ever generated DH parameters based on \"safe\"\nprimes. More recently (in version 1.0.2) support was provided for\ngenerating X9.42 style parameter files such as those required for RFC\n5114 support. The primes used in such files may not be \"safe\". Where an\napplication is using DH configured with parameters based on primes that\nare not \"safe\" then an attacker could use this fact to find a peer's\nprivate DH exponent. This attack requires that the attacker complete\nmultiple handshakes in which the peer uses the same DH exponent.\n\nA simple mitigation is to ensure that y^q (mod p) == 1\n\nCVE-2016-0701\n\nIssue reported by Antonio Sanso.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>",
    "before_after_code_files": [
      "crypto/dh/dh_check.c||crypto/dh/dh_check.c",
      "include/openssl/dh.h||include/openssl/dh.h"
    ]
  },
  "patch_diff": {
    "crypto/dh/dh_check.c||crypto/dh/dh_check.c": [
      "File: crypto/dh/dh_check.c -> crypto/dh/dh_check.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "142: int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *ret)",
      "143: {",
      "144:     int ok = 0;",
      "150:         goto err;",
      "159:     ok = 1;",
      "160:  err:",
      "162:     return (ok);",
      "163: }",
      "",
      "[Removed Lines]",
      "145:     BIGNUM *q = NULL;",
      "148:     q = BN_new();",
      "149:     if (q == NULL)",
      "151:     BN_set_word(q, 1);",
      "152:     if (BN_cmp(pub_key, q) <= 0)",
      "154:     BN_copy(q, dh->p);",
      "155:     BN_sub_word(q, 1);",
      "156:     if (BN_cmp(pub_key, q) >= 0)",
      "161:     BN_free(q);",
      "",
      "[Added Lines]",
      "145:     BIGNUM *tmp = NULL;",
      "146:     BN_CTX *ctx = NULL;",
      "149:     ctx = BN_CTX_new();",
      "150:     if (ctx == NULL)",
      "152:     BN_CTX_start(ctx);",
      "153:     tmp = BN_CTX_get(ctx);",
      "154:     if (tmp == NULL)",
      "155:         goto err;",
      "156:     BN_set_word(tmp, 1);",
      "157:     if (BN_cmp(pub_key, tmp) <= 0)",
      "159:     BN_copy(tmp, dh->p);",
      "160:     BN_sub_word(tmp, 1);",
      "161:     if (BN_cmp(pub_key, tmp) >= 0)",
      "164:     if (dh->q != NULL) {",
      "166:         if (!BN_mod_exp(tmp, pub_key, dh->q, dh->p, ctx))",
      "167:             goto err;",
      "168:         if (!BN_is_one(tmp))",
      "170:     }",
      "174:     if (ctx != NULL) {",
      "175:         BN_CTX_end(ctx);",
      "176:         BN_CTX_free(ctx);",
      "177:     }",
      "",
      "---------------"
    ],
    "include/openssl/dh.h||include/openssl/dh.h": [
      "File: include/openssl/dh.h -> include/openssl/dh.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "175: # define DH_CHECK_PUBKEY_TOO_SMALL       0x01",
      "176: # define DH_CHECK_PUBKEY_TOO_LARGE       0x02",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "177: # define DH_CHECK_PUBKEY_INVALID         0x03",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5a12207eccfd814bde68b880a96910dfa25f164",
      "candidate_info": {
        "commit_hash": "f5a12207eccfd814bde68b880a96910dfa25f164",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f5a12207eccfd814bde68b880a96910dfa25f164",
        "files": [
          "crypto/dh/dh_check.c"
        ],
        "message": "Add missing return value checks\n\nThe function DH_check_pub_key() was missing some return value checks in\nsome calls to BN functions.\n\nRT#4278\n\nReviewed-by: Andy Polyakov <appro@openssl.org>",
        "before_after_code_files": [
          "crypto/dh/dh_check.c||crypto/dh/dh_check.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/dh/dh_check.c||crypto/dh/dh_check.c"
          ],
          "candidate": [
            "crypto/dh/dh_check.c||crypto/dh/dh_check.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/dh/dh_check.c||crypto/dh/dh_check.c": [
          "File: crypto/dh/dh_check.c -> crypto/dh/dh_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:         goto err;",
          "152:     BN_CTX_start(ctx);",
          "153:     tmp = BN_CTX_get(ctx);",
          "155:         goto err;",
          "157:     if (BN_cmp(pub_key, tmp) <= 0)",
          "161:     if (BN_cmp(pub_key, tmp) >= 0)",
          "",
          "[Removed Lines]",
          "154:     if (tmp == NULL)",
          "156:     BN_set_word(tmp, 1);",
          "159:     BN_copy(tmp, dh->p);",
          "160:     BN_sub_word(tmp, 1);",
          "",
          "[Added Lines]",
          "154:     if (tmp == NULL || !BN_set_word(tmp, 1))",
          "158:     if (BN_copy(tmp, dh->p) == NULL || !BN_sub_word(tmp, 1))",
          "159:         goto err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "878e2c5b13010329c203f309ed0c8f2113f85648",
      "candidate_info": {
        "commit_hash": "878e2c5b13010329c203f309ed0c8f2113f85648",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/878e2c5b13010329c203f309ed0c8f2113f85648",
        "files": [
          "crypto/dh/dh.h",
          "crypto/dh/dh_check.c"
        ],
        "message": "Prevent small subgroup attacks on DH/DHE\n\nHistorically OpenSSL only ever generated DH parameters based on \"safe\"\nprimes. More recently (in version 1.0.2) support was provided for\ngenerating X9.42 style parameter files such as those required for RFC\n5114 support. The primes used in such files may not be \"safe\". Where an\napplication is using DH configured with parameters based on primes that\nare not \"safe\" then an attacker could use this fact to find a peer's\nprivate DH exponent. This attack requires that the attacker complete\nmultiple handshakes in which the peer uses the same DH exponent.\n\nA simple mitigation is to ensure that y^q (mod p) == 1\n\nCVE-2016-0701 (fix part 1 of 2)\n\nIssue reported by Antonio Sanso.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>",
        "before_after_code_files": [
          "crypto/dh/dh.h||crypto/dh/dh.h",
          "crypto/dh/dh_check.c||crypto/dh/dh_check.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/dh/dh_check.c||crypto/dh/dh_check.c"
          ],
          "candidate": [
            "crypto/dh/dh_check.c||crypto/dh/dh_check.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/dh/dh.h||crypto/dh/dh.h": [
          "File: crypto/dh/dh.h -> crypto/dh/dh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "175: # define DH_CHECK_PUBKEY_TOO_SMALL       0x01",
          "176: # define DH_CHECK_PUBKEY_TOO_LARGE       0x02",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: # define DH_CHECK_PUBKEY_INVALID         0x03",
          "",
          "---------------"
        ],
        "crypto/dh/dh_check.c||crypto/dh/dh_check.c": [
          "File: crypto/dh/dh_check.c -> crypto/dh/dh_check.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *ret)",
          "152: {",
          "153:     int ok = 0;",
          "159:         goto err;",
          "168:     ok = 1;",
          "169:  err:",
          "172:     return (ok);",
          "173: }",
          "",
          "[Removed Lines]",
          "154:     BIGNUM *q = NULL;",
          "157:     q = BN_new();",
          "158:     if (q == NULL)",
          "160:     BN_set_word(q, 1);",
          "161:     if (BN_cmp(pub_key, q) <= 0)",
          "163:     BN_copy(q, dh->p);",
          "164:     BN_sub_word(q, 1);",
          "165:     if (BN_cmp(pub_key, q) >= 0)",
          "170:     if (q != NULL)",
          "171:         BN_free(q);",
          "",
          "[Added Lines]",
          "154:     BIGNUM *tmp = NULL;",
          "155:     BN_CTX *ctx = NULL;",
          "158:     ctx = BN_CTX_new();",
          "159:     if (ctx == NULL)",
          "161:     BN_CTX_start(ctx);",
          "162:     tmp = BN_CTX_get(ctx);",
          "163:     if (tmp == NULL)",
          "164:         goto err;",
          "165:     BN_set_word(tmp, 1);",
          "166:     if (BN_cmp(pub_key, tmp) <= 0)",
          "168:     BN_copy(tmp, dh->p);",
          "169:     BN_sub_word(tmp, 1);",
          "170:     if (BN_cmp(pub_key, tmp) >= 0)",
          "173:     if (dh->q != NULL) {",
          "175:         if (!BN_mod_exp(tmp, pub_key, dh->q, dh->p, ctx))",
          "176:             goto err;",
          "177:         if (!BN_is_one(tmp))",
          "179:     }",
          "183:     if (ctx != NULL) {",
          "184:         BN_CTX_end(ctx);",
          "185:         BN_CTX_free(ctx);",
          "186:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}