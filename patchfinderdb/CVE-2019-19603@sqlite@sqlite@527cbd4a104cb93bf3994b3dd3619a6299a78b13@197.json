{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f2b1e4c909df912209c34816ae33bf31cbb20b8",
      "candidate_info": {
        "commit_hash": "8f2b1e4c909df912209c34816ae33bf31cbb20b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8f2b1e4c909df912209c34816ae33bf31cbb20b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "Do not assume that \"x IS NOT ?\" implies \"x NOT NULL\" when considering partial indexes. Fix for ticket [8025674847].\n\nFossilOrigin-Name: 0ba6d709b50d92db1542f2ff30535a80184b00dadf759d51e5cae7a6e37b1764",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a194e53670e25a48c2bb51b54755abff88ed6ae2596c5858fb4aac16cb452bdf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4946:   if( pE2->op==TK_NOTNULL",
          "4947:    && pE1->op!=TK_ISNULL",
          "4948:    && pE1->op!=TK_IS",
          "4949:    && pE1->op!=TK_OR",
          "4950:   ){",
          "4951:     Expr *pX = sqlite3ExprSkipCollate(pE1->pLeft);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4949:    && pE1->op!=TK_ISNOT",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:   SELECT * FROM t0 WHERE c0 OR 1;",
          "424: } {{}}",
          "426: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426: # 2019-05-11",
          "427: # Ticket https://sqlite.org/src/tktview/8025674847",
          "428: reset_db",
          "429: do_execsql_test index6-14.1 {",
          "430:   CREATE TABLE IF NOT EXISTS t0 (c0, c1);",
          "431:   CREATE INDEX IF NOT EXISTS i0 ON t0(c0, c1) WHERE c0 NOT NULL;",
          "432:   INSERT INTO t0(c0, c1) VALUES(NULL, 'row');",
          "433:   SELECT * FROM t0 WHERE t0.c0 IS NOT 1;",
          "434: } {{} row}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bf4126c84341c5674fce578146992a36e5c26a8",
      "candidate_info": {
        "commit_hash": "8bf4126c84341c5674fce578146992a36e5c26a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8bf4126c84341c5674fce578146992a36e5c26a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/corruptL.test",
          "test/fuzzdata8.db"
        ],
        "message": "Change the error message slightly for when two or more indexes have the same rootpage.\n\nFossilOrigin-Name: 916c52dad414b224695d455a42af36f85dff216504c2aa67d1d2c5818cdca8d6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b360bc0b9ad18ccda9d58d43a8388d19999432bfdf294abcf5beb44ef990cb4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3490:       if( pTblName!=0 ){",
          "3491:         pIndex->tnum = db->init.newTnum;",
          "3492:         if( sqlite3IndexHasDuplicateRootPage(pIndex) ){",
          "3494:           pParse->rc = SQLITE_CORRUPT_BKPT;",
          "3495:           goto exit_create_index;",
          "3496:         }",
          "",
          "[Removed Lines]",
          "3493:           sqlite3ErrorMsg(pParse, \"invalid root page\");",
          "",
          "[Added Lines]",
          "3493:           sqlite3ErrorMsg(pParse, \"invalid rootpage\");",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:     INSERT INTO t1(b) VALUES(1);",
          "628:     INSERT INTO t1(b) VALUES(2);",
          "629:   COMMIT;",
          "632: #-------------------------------------------------------------------------",
          "633: reset_db",
          "",
          "[Removed Lines]",
          "630: } {1 {malformed database schema (t1b) - invalid root page}}",
          "",
          "[Added Lines]",
          "630: } {1 {malformed database schema (t1b) - invalid rootpage}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "721: do_catchsql_test 7.1 {",
          "722:   SELECT * FROM sqlite_master;",
          "725: finish_test",
          "",
          "[Removed Lines]",
          "723: } {1 {malformed database schema (t1x1) - invalid root page}}",
          "",
          "[Added Lines]",
          "723: } {1 {malformed database schema (t1x1) - invalid rootpage}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e8e533bf7ee9afd7f6a4d8899b891bbdbf9ac53",
      "candidate_info": {
        "commit_hash": "4e8e533bf7ee9afd7f6a4d8899b891bbdbf9ac53",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e8e533bf7ee9afd7f6a4d8899b891bbdbf9ac53",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "Restore generated column loop detection logic that was incorrectly removed from the previous check-in [9e07b48934e9a972].  This fixes ticket [299b50ba812d8e54]\n\nFossilOrigin-Name: 104a2beb57037f9353ffa77096aae0eb64e4682e667f31623bfd3d064dd8d881",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e07b48934e9a972dcf62e3538b3b21ffa044c553feba0441675ac0bbe13bcb2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3645:           iSrc = sqlite3TableColumnToStorage(pTab, iCol) - pParse->iSelfTab;",
          "3646: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3647:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "3649:             return iSrc;",
          "3650:           }else",
          "",
          "[Removed Lines]",
          "3648:             sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "",
          "[Added Lines]",
          "3648:             if( pCol->colFlags & COLFLAG_BUSY ){",
          "3649:               sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\",",
          "3650:                               pCol->zName);",
          "3651:               return 0;",
          "3652:             }",
          "3653:             pCol->colFlags |= COLFLAG_BUSY;",
          "3654:             if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3655:               sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "3656:             }",
          "3657:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   INSERT INTO t0 VALUES (0),(99);",
          "234:   SELECT * FROM t0;",
          "235: } {1 1 0 1 1 99}",
          "237: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: do_catchsql_test gencol1-8.20 {",
          "237:   DROP TABLE IF EXISTS t0;",
          "238:   CREATE TABLE t0(",
          "239:     c0,",
          "240:     c1 AS(c0 + c2),",
          "241:     c2 AS(c1) CHECK(c2)",
          "242:   );",
          "243:   UPDATE t0 SET c0 = NULL;",
          "244: } {1 {generated column loop on \"c2\"}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5cc870ef88c76ff6f234eb542700a54354bd3ae",
      "candidate_info": {
        "commit_hash": "c5cc870ef88c76ff6f234eb542700a54354bd3ae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5cc870ef88c76ff6f234eb542700a54354bd3ae",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c"
        ],
        "message": "Refinement to check-in [348e7f193a963390] that avoids unreachable branches.\n\nFossilOrigin-Name: bbfb2908ecd113c88e69a0984cbe2550463cdd3a67648b0e4e3578e80630136e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ff290feb97f689cf6ce4162d6aa36f9f9dcf1bff3096847d53a85f39f728d2de",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: static int walkWindowList(Walker *pWalker, Window *pList){",
          "26:   Window *pWin;",
          "27:   for(pWin=pList; pWin; pWin=pWin->pNextWin){",
          "33:   }",
          "34:   return WRC_Continue;",
          "35: }",
          "",
          "[Removed Lines]",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:     if( sqlite3WalkExpr(pWalker, pWin->pStart) ) return WRC_Abort;",
          "32:     if( sqlite3WalkExpr(pWalker, pWin->pEnd) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "28:     int rc;",
          "29:     rc = sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "30:     if( rc ) return WRC_Abort;",
          "31:     rc = sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "32:     if( rc ) return WRC_Abort;",
          "33:     rc = sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "34:     if( rc ) return WRC_Abort;",
          "40:     rc = sqlite3WalkExpr(pWalker, pWin->pStart);",
          "41:     if( NEVER(rc) ) return WRC_Abort;",
          "42:     rc = sqlite3WalkExpr(pWalker, pWin->pEnd);",
          "43:     if( NEVER(rc) ) return WRC_Abort;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d69a58119d68653c045e1476af7fad5566bd3cf",
      "candidate_info": {
        "commit_hash": "8d69a58119d68653c045e1476af7fad5566bd3cf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8d69a58119d68653c045e1476af7fad5566bd3cf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/permutations.test",
          "test/walvfs.test"
        ],
        "message": "Improve the coverage of wal.c provided by the \"coverage-wal\" test permutation.\n\nFossilOrigin-Name: 6231485114eb07b258cd0e6e163ca05f7e9cf5664e071808fcb1329b33e4c4f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/permutations.test||test/permutations.test",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb17fea4b9779fbd3adb6ff9500da83a6ca4fa7cba379aa70074e4328814a7f2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     int eCode;",
          "229:     const char *zCode;",
          "230:   } aCode[] = {",
          "236:   };",
          "238:   const char *z;",
          "",
          "[Removed Lines]",
          "231:     { SQLITE_OK,     \"SQLITE_OK\"     },",
          "232:     { SQLITE_ERROR,  \"SQLITE_ERROR\"  },",
          "233:     { SQLITE_IOERR,  \"SQLITE_IOERR\"  },",
          "234:     { SQLITE_LOCKED, \"SQLITE_LOCKED\" },",
          "235:     { SQLITE_BUSY,   \"SQLITE_BUSY\"   },",
          "",
          "[Added Lines]",
          "231:     { SQLITE_OK,       \"SQLITE_OK\"     },",
          "232:     { SQLITE_ERROR,    \"SQLITE_ERROR\"  },",
          "233:     { SQLITE_IOERR,    \"SQLITE_IOERR\"  },",
          "234:     { SQLITE_LOCKED,   \"SQLITE_LOCKED\" },",
          "235:     { SQLITE_BUSY,     \"SQLITE_BUSY\"   },",
          "236:     { SQLITE_READONLY, \"SQLITE_READONLY\"   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "865:   pFd->pNext = pBuffer->pFile;",
          "866:   pBuffer->pFile = pFd;",
          "867:   pFd->pShm = pBuffer;",
          "869: }",
          "871: static void tvfsAllocPage(TestvfsBuffer *p, int iPage, int pgsz){",
          "",
          "[Removed Lines]",
          "868:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "869:   return rc;",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "430: test_suite \"coverage-wal\" -description {",
          "431:   Coverage tests for file wal.c.",
          "432: } -files {",
          "437: }",
          "439: test_suite \"coverage-pager\" -description {",
          "",
          "[Removed Lines]",
          "433:   wal.test       wal2.test     wal3.test       walmode.test",
          "434:   walbak.test    walhook.test  walcrash2.test  walcksum.test",
          "435:   walfault.test  walbig.test   walnoshm.test",
          "436:   wal5.test",
          "",
          "[Added Lines]",
          "433:   wal.test wal2.test wal3.test wal4.test wal5.test",
          "434:   wal64k.test wal6.test wal7.test wal8.test wal9.test",
          "435:   walbak.test walbig.test walblock.test walcksum.test walcrash2.test",
          "436:   walcrash3.test walcrash4.test walcrash.test walfault.test walhook.test",
          "437:   walmode.test walnoshm.test waloverwrite.test walpersist.test",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "441:   nockpt.test",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 December 23",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the operation of the library in",
          "13: # \"PRAGMA journal_mode=WAL\" mode.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/lock_common.tcl",
          "19: source $testdir/malloc_common.tcl",
          "20: source $testdir/wal_common.tcl",
          "21: set testprefix walvfs",
          "23: ifcapable !wal {finish_test ; return }",
          "25: db close",
          "26: testvfs tvfs",
          "27: tvfs script xSync",
          "28: tvfs filter xSync",
          "29: set ::sync_count 0",
          "30: proc xSync {method file args} {",
          "31:   if {[file tail $file]==\"test.db-wal\"} {",
          "32:     incr ::sync_count",
          "33:   }",
          "34: }",
          "36: #-------------------------------------------------------------------------",
          "37: # Test that if IOCAP_SEQUENTIAL is set, the wal-header is not synced to",
          "38: # disk immediately after it is written.",
          "39: #",
          "40: sqlite3 db test.db -vfs tvfs",
          "41: do_execsql_test 1.0 {",
          "42:   PRAGMA auto_vacuum = 0;",
          "43:   PRAGMA journal_mode = wal;",
          "44:   PRAGMA synchronous = normal;",
          "45:   CREATE TABLE t1(a, b, c);",
          "46:   INSERT INTO t1 VALUES(1, 2, 3);",
          "47:   INSERT INTO t1 VALUES(4, 5, 6);",
          "48:   INSERT INTO t1 VALUES(7, 8, 9);",
          "49:   PRAGMA wal_checkpoint;",
          "50: } {wal 0 5 5}",
          "52: set ::sync_count 0",
          "53: do_test 1.1 {",
          "54:   execsql { INSERT INTO t1 VALUES(10, 11, 12) }",
          "55:   set ::sync_count",
          "56: } 1",
          "58: db close",
          "59: tvfs devchar sequential",
          "60: sqlite3 db test.db -vfs tvfs",
          "61: do_execsql_test 1.2 {",
          "62:   PRAGMA synchronous = normal;",
          "63:   INSERT INTO t1 VALUES(13, 14, 15);",
          "64:   INSERT INTO t1 VALUES(16, 17, 18);",
          "65:   PRAGMA wal_checkpoint;",
          "66: } {0 4 4}",
          "68: set ::sync_count 0",
          "69: do_test 1.3 {",
          "70:   execsql { INSERT INTO t1 VALUES(10, 11, 12) }",
          "71:   set ::sync_count",
          "72: } 0",
          "74: #-------------------------------------------------------------------------",
          "75: # Test that \"PRAGMA journal_size_limit\" works in wal mode.",
          "76: #",
          "77: reset_db",
          "78: do_execsql_test 2.0 {",
          "79:   PRAGMA journal_size_limit = 10000;",
          "80:   CREATE TABLE t1(x);",
          "81:   PRAGMA journal_mode = wal;",
          "82:   WITH s(i) AS (",
          "83:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "84:   )",
          "85:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "86: } {10000 wal}",
          "87: do_test 2.1 {",
          "88:   expr [file size test.db-wal]>12000",
          "89: } {1}",
          "90: do_test 2.2 {",
          "91:   execsql {",
          "92:     PRAGMA wal_checkpoint;",
          "93:     INSERT INTO t1 VALUES(randomblob(750));",
          "94:   }",
          "95:   file size test.db-wal",
          "96: } {10000}",
          "97: do_test 2.3 {",
          "98:   execsql {",
          "99:     PRAGMA journal_size_limit = 8000;",
          "100:     PRAGMA wal_checkpoint;",
          "101:     INSERT INTO t1 VALUES(randomblob(750));",
          "102:   }",
          "103:   file size test.db-wal",
          "104: } {8000}",
          "106: #-------------------------------------------------------------------------",
          "107: # Test that a checkpoint may be interrupted using sqlite3_interrupt().",
          "108: #",
          "109: reset_db",
          "110: db close",
          "111: sqlite3 db test.db -vfs tvfs",
          "112: tvfs filter {}",
          "114: do_execsql_test 3.0 {",
          "115:   CREATE TABLE t1(x);",
          "116:   PRAGMA journal_mode = wal;",
          "117:   WITH s(i) AS (",
          "118:     SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "119:   )",
          "120:   INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "121: } {wal}",
          "123: tvfs filter xWrite",
          "124: tvfs script xWrite",
          "125: set ::cnt 2",
          "126: proc xWrite {method file args} {",
          "127:   if {[file tail $file]==\"test.db\"} {",
          "128:     incr ::cnt -1",
          "129:     if {$::cnt==0} {",
          "130:       sqlite3_interrupt db",
          "131:     }",
          "132:   }",
          "133:   return SQLITE_OK",
          "134: }",
          "136: do_catchsql_test 3.1 {",
          "137:   PRAGMA wal_checkpoint",
          "138: } {1 interrupted}",
          "140: #-------------------------------------------------------------------------",
          "141: #",
          "142: reset_db",
          "143: db close",
          "144: do_test 4.0 {",
          "145:   sqlite3 db test.db -vfs tvfs",
          "146:   execsql {",
          "147:     CREATE TABLE t1(x);",
          "148:     PRAGMA journal_mode = wal;",
          "149:     WITH s(i) AS (",
          "150:         SELECT 1 UNION ALL SELECT i+1 FROM s LIMIT 20",
          "151:     )",
          "152:     INSERT INTO t1 SELECT randomblob(750) FROM s;",
          "153:   } db",
          "154: } {wal}",
          "155: db close",
          "157: tvfs filter xShmMap",
          "158: tvfs script xShmMap",
          "159: proc xShmMap {method file args} {",
          "160:   return SQLITE_READONLY",
          "161: }",
          "162: sqlite3 db test.db -vfs tvfs",
          "163: do_catchsql_test 4.1 {",
          "164:   SELECT count(*) FROM t1",
          "165: } {1 {attempt to write a readonly database}}",
          "167: set ::cnt 5",
          "168: tvfs filter {xShmMap xShmLock}",
          "169: proc xShmMap {method file name args} {",
          "170:   switch -- $method {",
          "171:     xShmMap {  return SQLITE_READONLY }",
          "172:     xShmLock {",
          "173:       if {$args == \"{0 1 lock shared}\"} {",
          "174:         incr ::cnt -1",
          "175:         if {$::cnt>0} { return SQLITE_BUSY }",
          "176:       }",
          "177:     }",
          "178:   }",
          "179:   return SQLITE_OK",
          "180: }",
          "181: do_catchsql_test 4.2 {",
          "182:   SELECT count(*) FROM t1",
          "183: } {1 {attempt to write a readonly database}}",
          "185: db close",
          "186: tvfs delete",
          "187: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}