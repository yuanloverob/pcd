{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "00c12a51e3f69ca8f1a01447bfae8216a3039a53",
      "candidate_info": {
        "commit_hash": "00c12a51e3f69ca8f1a01447bfae8216a3039a53",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/00c12a51e3f69ca8f1a01447bfae8216a3039a53",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/select1.test"
        ],
        "message": "Fix faulty asserts in the code generator. Ticket [c52b09c7f38903b1]\n\nFossilOrigin-Name: 01cdc590f7894ea23ee0d674747d7ebf8196efbef3c87d47e72dbc1ab6ae2883",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select1.test||test/select1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c458acba5a100a76148a3efb78ea9f57b85751e80788e4532694bd8976608a0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5873:     assert( pItem->addrFillSub==0 );",
          "",
          "[Added Lines]",
          "5880:     testcase( pItem->addrFillSub!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5944:       int retAddr;",
          "5945:       struct SrcList_item *pPrior;",
          "5948:       pItem->regReturn = ++pParse->nMem;",
          "5949:       topAddr = sqlite3VdbeAddOp2(v, OP_Integer, 0, pItem->regReturn);",
          "5950:       pItem->addrFillSub = topAddr+1;",
          "",
          "[Removed Lines]",
          "5947:       assert( pItem->addrFillSub==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1100:          UNION ALL SELECT * FROM t2 WHERE y=3 ORDER BY y,z LIMIT 4);",
          "1101: } {1 2 3}",
          "1103: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1103: # 2019-07-24 Ticket https://sqlite.org/src/tktview/c52b09c7f38903b1311",
          "1104: #",
          "1105: do_execsql_test select1-18.1 {",
          "1106:   DROP TABLE IF EXISTS t1;",
          "1107:   DROP TABLE IF EXISTS t2;",
          "1108:   CREATE TABLE t1(c);",
          "1109:   CREATE TABLE t2(x PRIMARY KEY, y);",
          "1110:   INSERT INTO t1(c) VALUES(123);",
          "1111:   INSERT INTO t2(x) VALUES(123);",
          "1112:   SELECT x FROM t2, t1 WHERE x BETWEEN c AND null OR x AND",
          "1113:   x IN ((SELECT x FROM (SELECT x FROM t2, t1",
          "1114:   WHERE x BETWEEN (SELECT x FROM (SELECT x COLLATE rtrim",
          "1115:   FROM t2, t1 WHERE x BETWEEN c AND null",
          "1116:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND null",
          "1117:   OR x AND x IN (c)) AND null",
          "1118:   OR NOT EXISTS(SELECT -4.81 FROM t1, t2 WHERE x BETWEEN c AND null",
          "1119:   OR x AND x IN ((SELECT x FROM (SELECT x FROM t2, t1",
          "1120:   WHERE x BETWEEN (SELECT x FROM (SELECT x BETWEEN c AND null",
          "1121:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND null",
          "1122:   OR x AND x IN (c)) AND null",
          "1123:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND null",
          "1124:   OR x AND x IN (c)))) AND x IN (c)",
          "1125:   ), t1 WHERE x BETWEEN c AND null",
          "1126:   OR x AND x IN (c)));",
          "1127: } {}",
          "1128: do_execsql_test select1-18.2 {",
          "1129:   DROP TABLE IF EXISTS t1;",
          "1130:   DROP TABLE IF EXISTS t2;",
          "1131:   CREATE TABLE t1(c);",
          "1132:   CREATE TABLE t2(x PRIMARY KEY, y);",
          "1133:   INSERT INTO t1(c) VALUES(123);",
          "1134:   INSERT INTO t2(x) VALUES(123);",
          "1135:   SELECT x FROM t2, t1 WHERE x BETWEEN c AND (c+1) OR x AND",
          "1136:   x IN ((SELECT x FROM (SELECT x FROM t2, t1",
          "1137:   WHERE x BETWEEN (SELECT x FROM (SELECT x COLLATE rtrim",
          "1138:   FROM t2, t1 WHERE x BETWEEN c AND (c+1)",
          "1139:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND (c+1)",
          "1140:   OR x AND x IN (c)) AND (c+1)",
          "1141:   OR NOT EXISTS(SELECT -4.81 FROM t1, t2 WHERE x BETWEEN c AND (c+1)",
          "1142:   OR x AND x IN ((SELECT x FROM (SELECT x FROM t2, t1",
          "1143:   WHERE x BETWEEN (SELECT x FROM (SELECT x BETWEEN c AND (c+1)",
          "1144:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND (c+1)",
          "1145:   OR x AND x IN (c)) AND (c+1)",
          "1146:   OR x AND x IN (c)), t1 WHERE x BETWEEN c AND (c+1)",
          "1147:   OR x AND x IN (c)))) AND x IN (c)",
          "1148:   ), t1 WHERE x BETWEEN c AND (c+1)",
          "1149:   OR x AND x IN (c)));",
          "1150: } {123}",
          "1151: do_execsql_test select1-18.3 {",
          "1152:   SELECT 1 FROM t1 WHERE (",
          "1153:     SELECT 2 FROM t2 WHERE (",
          "1154:       SELECT 3 FROM (",
          "1155:         SELECT x FROM t2 WHERE x=c OR x=(SELECT x FROM (VALUES(0)))",
          "1156:       ) WHERE x>c OR x=c",
          "1157:     )",
          "1158:   );",
          "1159: } {1}",
          "1160: do_execsql_test select1-18.4 {",
          "1161:   SELECT 1 FROM t1, t2 WHERE (",
          "1162:     SELECT 3 FROM (",
          "1163:       SELECT x FROM t2 WHERE x=c OR x=(SELECT x FROM (VALUES(0)))",
          "1164:     ) WHERE x>c OR x=c",
          "1165:   );",
          "1166: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b042d921280d839ca891cd15ff0d880379c19aaa",
      "candidate_info": {
        "commit_hash": "b042d921280d839ca891cd15ff0d880379c19aaa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b042d921280d839ca891cd15ff0d880379c19aaa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/misc7.test"
        ],
        "message": "Give a meaningful error on an attempt to use UPSERT on a virtual table, rather than simply not working.\n\nFossilOrigin-Name: fa98748f956cff95fcfda3a513cea4df27aa573ae795a6855c40bfeca661d0b2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/misc7.test||test/misc7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7f55c62c3fa053b9b930a044b60076a8278cbf679d8e5116b95f2ff19247f6b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "826:   }",
          "827: #ifndef SQLITE_OMIT_UPSERT",
          "828:   if( pUpsert ){",
          "829:     pTabList->a[0].iCursor = iDataCur;",
          "830:     pUpsert->pUpsertSrc = pTabList;",
          "831:     pUpsert->regData = regData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829:     if( IsVirtual(pTab) ){",
          "830:       sqlite3ErrorMsg(pParse, \"UPSERT not implemented for virtual table \\\"%s\\\"\",",
          "831:               pTab->zName);",
          "832:       goto insert_cleanup;",
          "833:     }",
          "",
          "---------------"
        ],
        "test/misc7.test||test/misc7.test": [
          "File: test/misc7.test -> test/misc7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:     }",
          "228:   } {1}",
          "229:   set sqlite_where_trace 0",
          "231:   # Specify an ORDER BY clause that cannot be indexed.",
          "232:   do_test misc7-11 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:   do_catchsql_test misc7-10.1 {",
          "231:     INSERT INTO t1(a,b,c) VALUES(12345,2,3) ON CONFLICT(a) DO NOTHING;",
          "232:   } {1 {UPSERT not implemented for virtual table \"t1\"}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55b4c827fae95c394729c6968605863f5ce9eac5",
      "candidate_info": {
        "commit_hash": "55b4c827fae95c394729c6968605863f5ce9eac5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55b4c827fae95c394729c6968605863f5ce9eac5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/treeview.c",
          "src/where.c"
        ],
        "message": "In the \".wheretrace 0x100\" debugging mode, show the structure of the main parameters to sqlite3WhereBegin() calls.\n\nFossilOrigin-Name: fd598e475d353363e19adc27a671170f11ae9f6d8cad58cb2303fb2ad8ac6bec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/treeview.c||src/treeview.c",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2660e9292ae2c229eb7c57a6a79bb19f0c970072f86750fbe9cca3113d44ffe4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     sqlite3TreeViewPush(pView, 1);",
          "177:   }",
          "178:   do{",
          "186:     if( cnt++ ) sqlite3TreeViewPop(pView);",
          "187:     if( p->pPrior ){",
          "188:       n = 1000;",
          "",
          "[Removed Lines]",
          "179:     sqlite3TreeViewLine(pView,",
          "180:       \"SELECT%s%s (%u/%p) selFlags=0x%x nSelectRow=%d\",",
          "181:       ((p->selFlags & SF_Distinct) ? \" DISTINCT\" : \"\"),",
          "182:       ((p->selFlags & SF_Aggregate) ? \" agg_flag\" : \"\"),",
          "183:       p->selId, p, p->selFlags,",
          "184:       (int)p->nSelectRow",
          "185:     );",
          "",
          "[Added Lines]",
          "179:     if( p->selFlags & SF_WhereBegin ){",
          "180:       sqlite3TreeViewLine(pView, \"sqlite3WhereBegin()\");",
          "181:     }else{",
          "182:       sqlite3TreeViewLine(pView,",
          "183:         \"SELECT%s%s (%u/%p) selFlags=0x%x nSelectRow=%d\",",
          "184:         ((p->selFlags & SF_Distinct) ? \" DISTINCT\" : \"\"),",
          "185:         ((p->selFlags & SF_Aggregate) ? \" agg_flag\" : \"\"),",
          "186:         p->selId, p, p->selFlags,",
          "187:         (int)p->nSelectRow",
          "188:       );",
          "189:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:       if( p->pWinDefn ) n++;",
          "200: #endif",
          "201:     }",
          "203: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "204:     if( p->pWin ){",
          "205:       Window *pX;",
          "",
          "[Removed Lines]",
          "202:     sqlite3TreeViewExprList(pView, p->pEList, (n--)>0, \"result-set\");",
          "",
          "[Added Lines]",
          "206:     if( p->pEList ){",
          "207:       sqlite3TreeViewExprList(pView, p->pEList, n>0, \"result-set\");",
          "208:     }",
          "209:     n--;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4769:       sqlite3DebugPrintf(\", limit: %d\", iAuxArg);",
          "4770:     }",
          "4771:     sqlite3DebugPrintf(\")\\n\");",
          "4772:   }",
          "4774:     sqlite3WhereClausePrint(sWLB.pWC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4772:     if( sqlite3WhereTrace & 0x100 ){",
          "4773:       Select sSelect;",
          "4774:       memset(&sSelect, 0, sizeof(sSelect));",
          "4775:       sSelect.selFlags = SF_WhereBegin;",
          "4776:       sSelect.pSrc = pTabList;",
          "4777:       sSelect.pWhere = pWhere;",
          "4778:       sSelect.pOrderBy = pOrderBy;",
          "4779:       sSelect.pEList = pResultSet;",
          "4780:       sqlite3TreeViewSelect(0, &sSelect, 0);",
          "4781:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29c992cb049c0fbf3185082d3f81dd76c13e746d",
      "candidate_info": {
        "commit_hash": "29c992cb049c0fbf3185082d3f81dd76c13e746d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/29c992cb049c0fbf3185082d3f81dd76c13e746d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/delete.c",
          "src/fkey.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/window.c",
          "test/with1.test"
        ],
        "message": "Revamp the SrcList allocator routines to be methods of Parse instead of being methods of the \"sqlite3\" object, so that they can leave better error messages when the SrcList object grows too large.\n\nFossilOrigin-Name: df08d472b090b212fb77ce2aae0e1ffe79ae5db4b1accf55e6fdb18e8b0a7098",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/fkey.c||src/fkey.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/window.c||src/window.c",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7cac614d5df55eb092b863163483b6782b942b21bd15fd787576fef5619fa849",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3873:     SrcList *pNew;",
          "3874:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "3875:     int nGot;",
          "3877:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "3885:     }",
          "3886:     if( nAlloc>SQLITE_MAX_SRCLIST ) nAlloc = SQLITE_MAX_SRCLIST;",
          "3887:     pNew = sqlite3DbRealloc(db, pSrc,",
          "3888:                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );",
          "3889:     if( pNew==0 ){",
          "3890:       assert( db->mallocFailed );",
          "3892:     }",
          "3893:     pSrc = pNew;",
          "3894:     nGot = (sqlite3DbMallocSize(db, pNew) - sizeof(*pSrc))/sizeof(pSrc->a[0])+1;",
          "",
          "[Removed Lines]",
          "3883:       sqlite3OomFault(db);",
          "3884:       return pSrc;",
          "3891:       return pSrc;",
          "",
          "[Added Lines]",
          "3877:     sqlite3 *db = pParse->db;",
          "3880:       sqlite3ErrorMsg(pParse, \"too many FROM clause terms, max: %d\",",
          "3881:                       SQLITE_MAX_SRCLIST);",
          "3882:       return 0;",
          "3889:       return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3950: SrcList *sqlite3SrcListAppend(",
          "3955: ){",
          "3956:   struct SrcList_item *pItem;",
          "3959:   if( pList==0 ){",
          "3961:     if( pList==0 ) return 0;",
          "3962:     pList->nAlloc = 1;",
          "3963:     pList->nSrc = 1;",
          "3964:     memset(&pList->a[0], 0, sizeof(pList->a[0]));",
          "3965:     pList->a[0].iCursor = -1;",
          "3966:   }else{",
          "3972:   }",
          "3973:   pItem = &pList->a[pList->nSrc-1];",
          "3974:   if( pDatabase && pDatabase->z==0 ){",
          "",
          "[Removed Lines]",
          "3958:   assert( db!=0 );",
          "3960:     pList = sqlite3DbMallocRawNN(db, sizeof(SrcList) );",
          "3967:     pList = sqlite3SrcListEnlarge(db, pList, 1, pList->nSrc);",
          "3968:   }",
          "3969:   if( db->mallocFailed ){",
          "3970:     sqlite3SrcListDelete(db, pList);",
          "3971:     return 0;",
          "",
          "[Added Lines]",
          "3956:   sqlite3 *db;",
          "3958:   assert( pParse!=0 );",
          "3959:   assert( pParse->db!=0 );",
          "3960:   db = pParse->db;",
          "3962:     pList = sqlite3DbMallocRawNN(pParse->db, sizeof(SrcList) );",
          "3969:     SrcList *pNew = sqlite3SrcListEnlarge(pParse, pList, 1, pList->nSrc);",
          "3970:     if( pNew==0 ){",
          "3971:       sqlite3SrcListDelete(db, pList);",
          "3972:       return 0;",
          "3973:     }else{",
          "3974:       pList = pNew;",
          "3975:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4057:     );",
          "4058:     goto append_from_error;",
          "4059:   }",
          "4061:   if( p==0 ){",
          "4062:     goto append_from_error;",
          "4063:   }",
          "",
          "[Removed Lines]",
          "4060:   p = sqlite3SrcListAppend(db, p, pTable, pDatabase);",
          "",
          "[Added Lines]",
          "4064:   p = sqlite3SrcListAppend(pParse, p, pTable, pDatabase);",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   sqlite3 *db = pParse->db;",
          "118:   int iDb = sqlite3SchemaToIndex(db, pView->pSchema);",
          "119:   pWhere = sqlite3ExprDup(db, pWhere, 0);",
          "121:   if( pFrom ){",
          "122:     assert( pFrom->nSrc==1 );",
          "123:     pFrom->a[0].zName = sqlite3DbStrDup(db, pView->zName);",
          "",
          "[Removed Lines]",
          "120:   pFrom = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "120:   pFrom = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:     if( pSrc ){",
          "1019:       struct SrcList_item *pItem = pSrc->a;",
          "1020:       pItem->pTab = pFKey->pFrom;",
          "",
          "[Removed Lines]",
          "1017:     pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "1017:     pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1291:       }",
          "1292:       pSelect = sqlite3SelectNew(pParse,",
          "1293:           sqlite3ExprListAppend(pParse, 0, pRaise),",
          "1295:           pWhere,",
          "1296:           0, 0, 0, 0, 0",
          "1297:       );",
          "",
          "[Removed Lines]",
          "1294:           sqlite3SrcListAppend(db, 0, &tFrom, 0),",
          "",
          "[Added Lines]",
          "1294:           sqlite3SrcListAppend(pParse, 0, &tFrom, 0),",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "690: %type fullname {SrcList*}",
          "691: %destructor fullname {sqlite3SrcListDelete(pParse->db, $$);}",
          "692: fullname(A) ::= nm(X).  {",
          "694:   if( IN_RENAME_OBJECT && A ) sqlite3RenameTokenMap(pParse, A->a[0].zName, &X);",
          "695: }",
          "696: fullname(A) ::= nm(X) DOT nm(Y). {",
          "698:   if( IN_RENAME_OBJECT && A ) sqlite3RenameTokenMap(pParse, A->a[0].zName, &Y);",
          "699: }",
          "701: %type xfullname {SrcList*}",
          "702: %destructor xfullname {sqlite3SrcListDelete(pParse->db, $$);}",
          "703: xfullname(A) ::= nm(X).",
          "705: xfullname(A) ::= nm(X) DOT nm(Y).",
          "707: xfullname(A) ::= nm(X) DOT nm(Y) AS nm(Z).  {",
          "709:    if( A ) A->a[0].zAlias = sqlite3NameFromToken(pParse->db, &Z);",
          "710: }",
          "711: xfullname(A) ::= nm(X) AS nm(Z). {",
          "713:    if( A ) A->a[0].zAlias = sqlite3NameFromToken(pParse->db, &Z);",
          "714: }",
          "",
          "[Removed Lines]",
          "693:   A = sqlite3SrcListAppend(pParse->db,0,&X,0);",
          "697:   A = sqlite3SrcListAppend(pParse->db,0,&X,&Y);",
          "704:    {A = sqlite3SrcListAppend(pParse->db,0,&X,0); /*A-overwrites-X*/}",
          "706:    {A = sqlite3SrcListAppend(pParse->db,0,&X,&Y); /*A-overwrites-X*/}",
          "",
          "[Added Lines]",
          "693:   A = sqlite3SrcListAppend(pParse,0,&X,0);",
          "697:   A = sqlite3SrcListAppend(pParse,0,&X,&Y);",
          "704:    {A = sqlite3SrcListAppend(pParse,0,&X,0); /*A-overwrites-X*/}",
          "706:    {A = sqlite3SrcListAppend(pParse,0,&X,&Y); /*A-overwrites-X*/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:     if( N ) A = sqlite3PExpr(pParse, TK_NOT, A, 0);",
          "1217:   }",
          "1218:   expr(A) ::= expr(A) in_op(N) nm(Y) dbnm(Z) paren_exprlist(E). [IN] {",
          "1220:     Select *pSelect = sqlite3SelectNew(pParse, 0,pSrc,0,0,0,0,0,0);",
          "1221:     if( E )  sqlite3SrcListFuncArgs(pParse, pSelect ? pSrc : 0, E);",
          "1222:     A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "",
          "[Removed Lines]",
          "1219:     SrcList *pSrc = sqlite3SrcListAppend(pParse->db, 0,&Y,&Z);",
          "",
          "[Added Lines]",
          "1219:     SrcList *pSrc = sqlite3SrcListAppend(pParse, 0,&Y,&Z);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1287: cmd ::= createkw(S) uniqueflag(U) INDEX ifnotexists(NE) nm(X) dbnm(D)",
          "1288:         ON nm(Y) LP sortlist(Z) RP where_opt(W). {",
          "1289:   sqlite3CreateIndex(pParse, &X, &D,",
          "1291:                       &S, W, SQLITE_SO_ASC, NE, SQLITE_IDXTYPE_APPDEF);",
          "1292:   if( IN_RENAME_OBJECT && pParse->pNewIndex ){",
          "1293:     sqlite3RenameTokenMap(pParse, pParse->pNewIndex->zName, &Y);",
          "",
          "[Removed Lines]",
          "1290:                      sqlite3SrcListAppend(pParse->db,0,&Y,0), Z, U,",
          "",
          "[Added Lines]",
          "1290:                      sqlite3SrcListAppend(pParse,0,&Y,0), Z, U,",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3960:       jointype = pSubitem->fg.jointype;",
          "3961:     }else{",
          "3968:     }",
          "",
          "[Removed Lines]",
          "3963:       pSrc = pParent->pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "3964:       if( pSrc==0 ){",
          "3965:         assert( db->mallocFailed );",
          "3966:         break;",
          "3967:       }",
          "",
          "[Added Lines]",
          "3963:       pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "3964:       if( pSrc==0 ) break;",
          "3965:       pParent->pSrc = pSrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3985:     if( nSubSrc>1 ){",
          "3990:     }",
          "",
          "[Removed Lines]",
          "3986:       pParent->pSrc = pSrc = sqlite3SrcListEnlarge(db, pSrc, nSubSrc-1,iFrom+1);",
          "3987:       if( db->mallocFailed ){",
          "3988:         break;",
          "3989:       }",
          "",
          "[Added Lines]",
          "3984:       pSrc = sqlite3SrcListEnlarge(pParse, pSrc, nSubSrc-1,iFrom+1);",
          "3985:       if( pSrc==0 ) break;",
          "3986:       pParent->pSrc = pSrc;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3929: void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);",
          "3930: IdList *sqlite3IdListAppend(Parse*, IdList*, Token*);",
          "3931: int sqlite3IdListIndex(IdList*,const char*);",
          "3934: SrcList *sqlite3SrcListAppendFromTerm(Parse*, SrcList*, Token*, Token*,",
          "3935:                                       Token*, Select*, Expr*, IdList*);",
          "3936: void sqlite3SrcListIndexedBy(Parse *, SrcList *, Token *);",
          "",
          "[Removed Lines]",
          "3932: SrcList *sqlite3SrcListEnlarge(sqlite3*, SrcList*, int, int);",
          "3933: SrcList *sqlite3SrcListAppend(sqlite3*, SrcList*, Token*, Token*);",
          "",
          "[Added Lines]",
          "3932: SrcList *sqlite3SrcListEnlarge(Parse*, SrcList*, int, int);",
          "3933: SrcList *sqlite3SrcListAppend(Parse*, SrcList*, Token*, Token*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735:   if( pSrc ){",
          "736:     assert( pSrc->nSrc>0 );",
          "737:     pSrc->a[pSrc->nSrc-1].zName = sqlite3DbStrDup(db, pStep->zTarget);",
          "",
          "[Removed Lines]",
          "734:   pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "",
          "[Added Lines]",
          "734:   pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     pSub = sqlite3SelectNew(",
          "824:         pParse, pSublist, pSrc, pWhere, pGroupBy, pHaving, pSort, 0, 0",
          "825:     );",
          "828:     if( p->pSrc ){",
          "829:       p->pSrc->a[0].pSelect = pSub;",
          "830:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "",
          "[Removed Lines]",
          "826:     p->pSrc = sqlite3SrcListAppend(db, 0, 0, 0);",
          "827:     assert( p->pSrc || db->mallocFailed );",
          "",
          "[Added Lines]",
          "826:     p->pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089:      SELECT 3 FROM c,c,c,c,c,c,c,c,c",
          "1090:   )",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1094: finish_test",
          "",
          "[Removed Lines]",
          "1092: } {1 {out of memory}}",
          "",
          "[Added Lines]",
          "1092: } {1 {at most 64 tables in a join}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93b6c1666dfe43b77653d11512ba391a82f66094",
      "candidate_info": {
        "commit_hash": "93b6c1666dfe43b77653d11512ba391a82f66094",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/93b6c1666dfe43b77653d11512ba391a82f66094",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/altertab2.test"
        ],
        "message": "Fix a problem with using ALTER TABLE to rename a table or column when the database schema contains a trigger or view that itself contains an expression  \"<column> AND 0\".\n\nFossilOrigin-Name: 908ff7fffa302255a74e2334ca3a1779ed43acb0268fce5a83a56fd16794dc88",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fbd681dce2905d8b8ad7948ba684b0b62d6c04be0f7a2992ee7d6836a99010de",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "851: ){",
          "852:   Expr *p;",
          "855:     p = sqlite3ExprAnd(pParse->db, pLeft, pRight);",
          "856:   }else{",
          "",
          "[Removed Lines]",
          "853:   if( op==TK_AND && pParse->nErr==0 ){",
          "",
          "[Added Lines]",
          "853:   if( op==TK_AND && pParse->nErr==0 && !IN_RENAME_OBJECT ){",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:   INSERT INTO t3 VALUES(4, 5, 6);",
          "334: }",
          "336: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336: do_execsql_test 8.1 {",
          "337:   CREATE TABLE t4(a, b);",
          "338:   CREATE VIEW v4 AS SELECT * FROM t4 WHERE (a=1 AND 0) OR b=2;",
          "339: }",
          "340: do_execsql_test 8.2 {",
          "341:   ALTER TABLE t4 RENAME a TO c;",
          "342:   SELECT sql FROM sqlite_master WHERE name = 'v4'",
          "343: } {{CREATE VIEW v4 AS SELECT * FROM t4 WHERE (c=1 AND 0) OR b=2}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}