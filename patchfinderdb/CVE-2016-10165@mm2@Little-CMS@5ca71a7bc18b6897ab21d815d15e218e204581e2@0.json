{
  "cve_id": "CVE-2016-10165",
  "cve_desc": "The Type_MLU_Read function in cmstypes.c in Little CMS (aka lcms2) allows remote attackers to obtain sensitive information or cause a denial of service via an image with a crafted ICC profile, which triggers an out-of-bounds heap read.",
  "repo": "mm2/Little-CMS",
  "patch_hash": "5ca71a7bc18b6897ab21d815d15e218e204581e2",
  "patch_info": {
    "commit_hash": "5ca71a7bc18b6897ab21d815d15e218e204581e2",
    "repo": "mm2/Little-CMS",
    "commit_url": "https://github.com/mm2/Little-CMS/commit/5ca71a7bc18b6897ab21d815d15e218e204581e2",
    "files": [
      "src/cmstypes.c"
    ],
    "message": "Added an extra check to MLU bounds\n\nThanks to Ibrahim el-sayed for spotting the bug",
    "before_after_code_files": [
      "src/cmstypes.c||src/cmstypes.c"
    ]
  },
  "patch_diff": {
    "src/cmstypes.c||src/cmstypes.c": [
      "File: src/cmstypes.c -> src/cmstypes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1462:         if (Offset < (SizeOfHeader + 8)) goto Error;",
      "1465:         BeginOfThisString = Offset - SizeOfHeader - 8;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1463:         if ((Offset + Len) > SizeOfTag + 8) goto Error;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d41071eb8cfea7aa10a9262c12bd95d5d9d81c8f",
      "candidate_info": {
        "commit_hash": "d41071eb8cfea7aa10a9262c12bd95d5d9d81c8f",
        "repo": "mm2/Little-CMS",
        "commit_url": "https://github.com/mm2/Little-CMS/commit/d41071eb8cfea7aa10a9262c12bd95d5d9d81c8f",
        "files": [
          "src/cmsopt.c",
          "src/cmstypes.c"
        ],
        "message": "Contributed fixes from Oracle\n\nTwo minor glitches",
        "before_after_code_files": [
          "src/cmsopt.c||src/cmsopt.c",
          "src/cmstypes.c||src/cmstypes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cmstypes.c||src/cmstypes.c"
          ],
          "candidate": [
            "src/cmstypes.c||src/cmstypes.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cmsopt.c||src/cmsopt.c": [
          "File: src/cmsopt.c -> src/cmsopt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1287:     c16 ->nElements = nElements;",
          "1289:     c16->Curves = (cmsUInt16Number**) _cmsCalloc(ContextID, nCurves, sizeof(cmsUInt16Number*));",
          "1292:     for (i=0; i < nCurves; i++) {",
          "",
          "[Removed Lines]",
          "1290:     if (c16 ->Curves == NULL) return NULL;",
          "",
          "[Added Lines]",
          "1290:     if (c16->Curves == NULL) {",
          "1291:         _cmsFree(ContextID, c16);",
          "1292:         return NULL;",
          "1293:     }",
          "",
          "---------------"
        ],
        "src/cmstypes.c||src/cmstypes.c": [
          "File: src/cmstypes.c -> src/cmstypes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1474:         if (!_cmsReadUInt32Number(io, &Offset)) goto Error;",
          "1481:         BeginOfThisString = Offset - SizeOfHeader - 8;",
          "",
          "[Removed Lines]",
          "1477:         if (Offset < (SizeOfHeader + 8)) goto Error;",
          "1478:         if ((Offset + Len) > SizeOfTag + 8) goto Error;",
          "",
          "[Added Lines]",
          "1477:         if (Offset < (SizeOfHeader + 8)) goto Error;",
          "1478:         if (((Offset + Len) < Len) || ((Offset + Len) > SizeOfTag + 8)) goto Error;",
          "",
          "---------------"
        ]
      }
    }
  ]
}