{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf5038df4008d894409dac4d6e64a94f5630bf61",
      "candidate_info": {
        "commit_hash": "bf5038df4008d894409dac4d6e64a94f5630bf61",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/bf5038df4008d894409dac4d6e64a94f5630bf61",
        "files": [
          "src/unix/fsevents.c"
        ],
        "message": "fsevents: fix subfolder check\n\nFirst of all, a bit of explanation of what happens there:\n\n1. FSEvents emits absolute paths to changed files or directories\n2. We cut off the first part of such paths, which is equal to handle's\n   real path ('/dir/subdir/subsubdir`, without trailing slash)\n3. Then, if we are running in non-recursive mode, we discard paths that\n   have slashes ('/') as a non-first character in them",
        "before_after_code_files": [
          "src/unix/fsevents.c||src/unix/fsevents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:       if (strncmp(path, handle->realpath, handle->realpath_len) != 0)",
          "252:         continue;",
          "261:       }",
          "263: #ifdef MAC_OS_X_VERSION_10_7",
          "",
          "[Removed Lines]",
          "254:       path += handle->realpath_len;",
          "255:       len -= handle->realpath_len;",
          "258:       if (*path != 0) {",
          "259:         path++;",
          "260:         len--;",
          "",
          "[Added Lines]",
          "254:       if (handle->realpath_len > 1 || *handle->realpath != '/') {",
          "255:         path += handle->realpath_len;",
          "256:         len -= handle->realpath_len;",
          "259:         if (*path != '\\0') {",
          "260:           path++;",
          "261:           len--;",
          "262:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:           continue;",
          "274:       }",
          "",
          "[Removed Lines]",
          "270:       if ((handle->cf_flags & UV_FS_EVENT_RECURSIVE) == 0) {",
          "271:         pos = strchr(path, '/');",
          "272:         if (pos != NULL && pos != path + 1)",
          "",
          "[Added Lines]",
          "272:       if ((handle->cf_flags & UV_FS_EVENT_RECURSIVE) == 0 && *path != 0) {",
          "273:         pos = strchr(path + 1, '/');",
          "274:         if (pos != NULL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a177d702830569ec714b39005b30a21bc64e62a",
      "candidate_info": {
        "commit_hash": "1a177d702830569ec714b39005b30a21bc64e62a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1a177d702830569ec714b39005b30a21bc64e62a",
        "files": [
          "Makefile.am"
        ],
        "message": "build: apply dtrace -G to all object files\n\nfixes #871",
        "before_after_code_files": [
          "Makefile.am||Makefile.am"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: # every created .o, most projects don't need to include more than one .d",
          "217: .d.o:",
          "218:  $(AM_V_GEN)$(DTRACE) $(DTRACEFLAGS) -G -o $(top_builddir)/uv-dtrace.o -s $< \\",
          "220:  $(AM_V_GEN)printf %s\\\\n \\",
          "221:   '# ${top_builddir}/uv-dtrace.lo - a libtool object file' \\",
          "222:   '# Generated by libtool (GNU libtool) 2.4' \\",
          "",
          "[Removed Lines]",
          "219:   `grep '^pic_object' $$(find ${top_builddir} -name \"*.lo\") | cut -f 2 -d\\'`",
          "",
          "[Added Lines]",
          "219:   `find ${top_builddir}/src -name \"*.o\"`",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6760d51b52e35bdcc7102e3ddf6db9c8d275563e",
      "candidate_info": {
        "commit_hash": "6760d51b52e35bdcc7102e3ddf6db9c8d275563e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/6760d51b52e35bdcc7102e3ddf6db9c8d275563e",
        "files": [
          "src/win/fs.c",
          "test/test-fs.c",
          "test/test-list.h"
        ],
        "message": "windows: fix fs_write with nbufs > 1 and offset\n\nWhen multiple bufs are specified, overlapped needs to be advanced\nmanually between each write.  Without this, each buf will be written\nto the same position (if offset is specified.)\n\nReadFile() automatically advances, but WriteFile() does not.",
        "before_after_code_files": [
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs.c||test/test-fs.c",
          "test/test-list.h||test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:   if (offset != -1) {",
          "615:     memset(&overlapped, 0, sizeof overlapped);",
          "621:     overlapped_ptr = &overlapped;",
          "622:   } else {",
          "623:     overlapped_ptr = NULL;",
          "",
          "[Removed Lines]",
          "617:     offset_.QuadPart = offset;",
          "618:     overlapped.Offset = offset_.LowPart;",
          "619:     overlapped.OffsetHigh = offset_.HighPart;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627:   bytes = 0;",
          "628:   do {",
          "629:     DWORD incremental_bytes;",
          "630:     result = WriteFile(handle,",
          "631:                        req->bufs[index].base,",
          "632:                        req->bufs[index].len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627:     if (offset != -1) {",
          "628:       offset_.QuadPart = offset + bytes;",
          "629:       overlapped.Offset = offset_.LowPart;",
          "630:       overlapped.OffsetHigh = offset_.HighPart;",
          "631:     }",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: static char buf[32];",
          "112: static char test_buf[] = \"test-buffer\\n\";",
          "113: static uv_buf_t iov;",
          "115: static void check_permission(const char* filename, unsigned int mode) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113: static char test_buf2[] = \"second-buffer\\n\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2164:   MAKE_VALGRIND_HAPPY();",
          "2165:   return 0;",
          "2166: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2170: TEST_IMPL(fs_write_multiple_bufs) {",
          "2171:   uv_buf_t iovs[2];",
          "2172:   int r;",
          "2175:   unlink(\"test_file\");",
          "2177:   loop = uv_default_loop();",
          "2179:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_WRONLY | O_CREAT,",
          "2180:       S_IWUSR | S_IRUSR, NULL);",
          "2181:   ASSERT(r >= 0);",
          "2182:   ASSERT(open_req1.result >= 0);",
          "2183:   uv_fs_req_cleanup(&open_req1);",
          "2185:   iovs[0] = uv_buf_init(test_buf, sizeof(test_buf));",
          "2186:   iovs[1] = uv_buf_init(test_buf2, sizeof(test_buf2));",
          "2187:   r = uv_fs_write(loop, &write_req, open_req1.result, iovs, 2, 0, NULL);",
          "2188:   ASSERT(r >= 0);",
          "2189:   ASSERT(write_req.result >= 0);",
          "2190:   uv_fs_req_cleanup(&write_req);",
          "2192:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "2193:   ASSERT(r == 0);",
          "2194:   ASSERT(close_req.result == 0);",
          "2195:   uv_fs_req_cleanup(&close_req);",
          "2197:   r = uv_fs_open(loop, &open_req1, \"test_file\", O_RDONLY, 0, NULL);",
          "2198:   ASSERT(r >= 0);",
          "2199:   ASSERT(open_req1.result >= 0);",
          "2200:   uv_fs_req_cleanup(&open_req1);",
          "2202:   memset(buf, 0, sizeof(buf));",
          "2203:   iov = uv_buf_init(buf, sizeof(buf));",
          "2204:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1, NULL);",
          "2205:   ASSERT(r >= 0);",
          "2206:   ASSERT(read_req.result >= 0);",
          "2207:   ASSERT(memcmp(buf, test_buf, sizeof(test_buf)) == 0);",
          "2208:   ASSERT(strcmp(buf + sizeof(test_buf), test_buf2) == 0);",
          "2209:   uv_fs_req_cleanup(&read_req);",
          "2211:   iov = uv_buf_init(buf, sizeof(buf));",
          "2212:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1,",
          "2213:                  read_req.result, NULL);",
          "2214:   ASSERT(r == 0);",
          "2215:   ASSERT(read_req.result == 0);",
          "2216:   uv_fs_req_cleanup(&read_req);",
          "2218:   r = uv_fs_close(loop, &close_req, open_req1.result, NULL);",
          "2219:   ASSERT(r == 0);",
          "2220:   ASSERT(close_req.result == 0);",
          "2221:   uv_fs_req_cleanup(&close_req);",
          "2224:   unlink(\"test_file\");",
          "2226:   MAKE_VALGRIND_HAPPY();",
          "2227:   return 0;",
          "2228: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "246: TEST_DECLARE   (fs_scandir_file)",
          "247: TEST_DECLARE   (fs_open_dir)",
          "248: TEST_DECLARE   (fs_rename_to_existing_file)",
          "249: TEST_DECLARE   (threadpool_queue_work_simple)",
          "250: TEST_DECLARE   (threadpool_queue_work_einval)",
          "251: TEST_DECLARE   (threadpool_multiple_event_loops)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: TEST_DECLARE   (fs_write_multiple_bufs)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:   TEST_ENTRY  (fs_scandir_file)",
          "620:   TEST_ENTRY  (fs_open_dir)",
          "621:   TEST_ENTRY  (fs_rename_to_existing_file)",
          "622:   TEST_ENTRY  (threadpool_queue_work_simple)",
          "623:   TEST_ENTRY  (threadpool_queue_work_einval)",
          "624:   TEST_ENTRY  (threadpool_multiple_event_loops)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:   TEST_ENTRY  (fs_write_multiple_bufs)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c90cc8e14e4d45f6d7896e61a2588e602f89d48",
      "candidate_info": {
        "commit_hash": "4c90cc8e14e4d45f6d7896e61a2588e602f89d48",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4c90cc8e14e4d45f6d7896e61a2588e602f89d48",
        "files": [
          "include/uv-unix.h"
        ],
        "message": "unix: fix typedef of uv_buf_t\n\nTypedefs of unnamed structs cannot be forward declared.\nGiving the uv_buf_t struct a name makes forward declarations possible.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: #endif",
          "121:   char* base;",
          "122:   size_t len;",
          "123: } uv_buf_t;",
          "",
          "[Removed Lines]",
          "120: typedef struct {",
          "",
          "[Added Lines]",
          "120: typedef struct uv_buf_t {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b64c359557edd7bac3f133a67a4f9ffeda1a9628",
      "candidate_info": {
        "commit_hash": "b64c359557edd7bac3f133a67a4f9ffeda1a9628",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b64c359557edd7bac3f133a67a4f9ffeda1a9628",
        "files": [
          "include/uv.h"
        ],
        "message": "include: document barrier functions\n\nAdd some basic doc comments to the uv_barrier_*() functions and document\nthe \"serializer\" return value from the previous commit.\n\nSigned-off-by: Fedor Indutny <fedor@indutny.com>",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2199: UV_EXTERN void uv_cond_destroy(uv_cond_t* cond);",
          "2200: UV_EXTERN void uv_cond_signal(uv_cond_t* cond);",
          "2201: UV_EXTERN void uv_cond_broadcast(uv_cond_t* cond);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2211: UV_EXTERN int uv_barrier_init(uv_barrier_t* barrier, unsigned int count);",
          "2212: UV_EXTERN void uv_barrier_destroy(uv_barrier_t* barrier);",
          "2213: UV_EXTERN int uv_barrier_wait(uv_barrier_t* barrier);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2217: UV_EXTERN int uv_cond_timedwait(uv_cond_t* cond, uv_mutex_t* mutex,",
          "2218:     uint64_t timeout);",
          "",
          "[Removed Lines]",
          "2220: UV_EXTERN int uv_barrier_init(uv_barrier_t* barrier, unsigned int count);",
          "2221: UV_EXTERN void uv_barrier_destroy(uv_barrier_t* barrier);",
          "2222: UV_EXTERN int uv_barrier_wait(uv_barrier_t* barrier);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}