{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51690f26bcaab815650286c16362b36d39977cea",
      "candidate_info": {
        "commit_hash": "51690f26bcaab815650286c16362b36d39977cea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51690f26bcaab815650286c16362b36d39977cea",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix to check-in [5d9a369301a65f32] so that it compiles without SQLITE_DEBUG.\n\nFossilOrigin-Name: fefe2d046725254367f9f82a8c8cb137e8b75dbbf4bc48debf0649479ff2f0c2",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1239:     }",
          "1240:   }else if( rc==SQLITE_ERROR ){",
          "1242:   }",
          "1244:   return rc;",
          "",
          "[Removed Lines]",
          "1241:     rc = sqlite3Fts3Corrupt();",
          "",
          "[Added Lines]",
          "1241:     rc = FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4dbd398d640852d4a696d68c72ee039968023d402a8053b5e6b4ef1d75e982a8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9b71dbfd4066df5d62fd59c1f5350faca74fcd4",
      "candidate_info": {
        "commit_hash": "b9b71dbfd4066df5d62fd59c1f5350faca74fcd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b9b71dbfd4066df5d62fd59c1f5350faca74fcd4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a bug preventing .recover from working on databases where the final page of the db is corrupt.\n\nFossilOrigin-Name: 959bbd11e92cc789973daf20dfcb8a6d8dc724dd603b286cbdd59e5d1fdb2909",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a50768314d10d743a0cc013b434b516f0763e0a6c5b79655d8fefde7de53e869",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6373:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "6372: static int recoverDatabaseCmd(ShellState *pState){",
          "",
          "[Added Lines]",
          "6372: static int recoverDatabaseCmd(ShellState *pState, int nArg, char **azArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6408:     \"WITH pages(i, maxlen) AS (\"",
          "6411:     \"    UNION ALL\"",
          "6412:     \"  SELECT i-1, (\"",
          "6413:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=i-1\"",
          "",
          "[Removed Lines]",
          "6409:     \"  SELECT page_count, max(field+1) \"",
          "6410:     \"      FROM pragma_page_count, sqlite_dbdata WHERE pgno=page_count\"",
          "",
          "[Added Lines]",
          "6409:     \"  SELECT page_count, (\"",
          "6410:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=page_count\"",
          "6411:     \"  ) FROM pragma_page_count\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6832:   if( c=='r' && strncmp(azArg[0], \"recover\", n)==0 ){",
          "6833:     open_db(p, 0);",
          "6835:   }else",
          "6837:   if( c=='d' && strncmp(azArg[0], \"dump\", n)==0 ){",
          "",
          "[Removed Lines]",
          "6834:     rc = recoverDatabaseCmd(p);",
          "",
          "[Added Lines]",
          "6835:     rc = recoverDatabaseCmd(p, nArg, azArg);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "505ae9def80b7b45e37a454064f1cf23df26bdf1",
      "candidate_info": {
        "commit_hash": "505ae9def80b7b45e37a454064f1cf23df26bdf1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/505ae9def80b7b45e37a454064f1cf23df26bdf1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Add additional VDBE coverage marcros.\n\nFossilOrigin-Name: d3531f5be7d3769689e2cd8bdc9bab5608759de027d44cc123996f32a4a89583",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63e625c8eb06720eef30573aa562e38c90d228a9cf493f8bb59f09e50f0e3168",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1710:           start_constraints = (nConstraint>1);",
          "1711:           op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1712:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint-1);",
          "1713:         }else{",
          "1714:           op = aStartOp[(start_constraints<<2) + ((!startEq)<<1) + bRev];",
          "1715:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1716:         }",
          "1717:       }",
          "1718:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1713:           VdbeCoverage(v);",
          "1714:           VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1715:           VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1716:           VdbeCoverageIf(v, op==OP_SeekGT);  testcase( op==OP_SeekGT );",
          "1717:           VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1718:           VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1719:           VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1723:           VdbeCoverage(v);",
          "1724:           VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1725:           VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1726:           VdbeCoverageIf(v, op==OP_SeekGT);  testcase( op==OP_SeekGT );",
          "1727:           VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1728:           VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1729:           VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1762:     if( nConstraint ){",
          "1763:       if( regBignull ){",
          "1764:         sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1765:       }",
          "1766:       op = aEndOp[bRev*2 + endEq];",
          "1767:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1779:         VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1772:     }",
          "1773:     if( regBignull ){",
          "1774:       sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1775:       if( bStopAtNull ){",
          "1776:         op = aEndOp[bRev*2 + 0];",
          "1777:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1778:       }else{",
          "1779:         op = aEndOp[bRev*2 + endEq];",
          "1780:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint+1);",
          "1781:       }",
          "1782:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1790:       VdbeCoverage(v);",
          "1793:         assert( op==OP_IdxGE || op==OP_IdxLE );",
          "1795:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1796:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1800:         testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1801:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1802:         testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1803:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2754c1fba842a72fd783363e28193026dbf3bbf",
      "candidate_info": {
        "commit_hash": "e2754c1fba842a72fd783363e28193026dbf3bbf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2754c1fba842a72fd783363e28193026dbf3bbf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enforce 80-character line discipline in the CLI.  Minor improvements to the CLI built-in help.\n\nFossilOrigin-Name: 9690013a00d73a8047b25149ded50d20c74b5c62c0725eec50ed8477688e58a0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7434cae3edc321e2f1f8d340a0e656b1613b736f8400fb271a0e80f59401b9e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1766:   for(pRow = eqp_next_row(p, iEqpId, 0); pRow; pRow = pNext){",
          "1767:     pNext = eqp_next_row(p, iEqpId, pRow);",
          "1768:     z = pRow->zText;",
          "1770:     if( n<(int)sizeof(p->sGraph.zPrefix)-7 ){",
          "1771:       memcpy(&p->sGraph.zPrefix[n], pNext ? \"|  \" : \"   \", 4);",
          "1772:       eqp_render_level(p, pRow->iEqpId);",
          "",
          "[Removed Lines]",
          "1769:     utf8_printf(p->out, \"%s%s%s\\n\", p->sGraph.zPrefix, pNext ? \"|--\" : \"`--\", z);",
          "",
          "[Added Lines]",
          "1769:     utf8_printf(p->out, \"%s%s%s\\n\", p->sGraph.zPrefix,",
          "1770:                 pNext ? \"|--\" : \"`--\", z);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2536:     raw_printf(pArg->out, \"Autoindex Inserts:                   %d\\n\", iCur);",
          "2537:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_VM_STEP, bReset);",
          "2538:     raw_printf(pArg->out, \"Virtual Machine Steps:               %d\\n\", iCur);",
          "2540:     raw_printf(pArg->out, \"Reprepare operations:                %d\\n\", iCur);",
          "2541:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_RUN, bReset);",
          "2542:     raw_printf(pArg->out, \"Number of times run:                 %d\\n\", iCur);",
          "",
          "[Removed Lines]",
          "2539:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_REPREPARE, bReset);",
          "",
          "[Added Lines]",
          "2540:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_REPREPARE,bReset);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3459:   \".archive ...             Manage SQL archives\",",
          "3460:   \"   Each command must have exactly one of the following options:\",",
          "3461:   \"     -c, --create               Create a new archive\",",
          "3464:   \"     -t, --list                 List contents of archive\",",
          "3465:   \"     -x, --extract              Extract files from archive\",",
          "3466:   \"   Optional arguments:\",",
          "3467:   \"     -v, --verbose              Print each filename as it is processed\",",
          "3471:   \"     -n, --dryrun               Show the SQL that would have occurred\",",
          "3472:   \"   Examples:\",",
          "3476:   \"   See also:\",",
          "3477:   \"      http://sqlite.org/cli.html#sqlar_archive_support\",",
          "3478: #endif",
          "",
          "[Removed Lines]",
          "3462:   \"     -u, --update               Add files or update files with changed mtime\",",
          "3463:   \"     -i, --insert               Like -u but always add even if mtime unchanged\",",
          "3468:   \"     -f FILE, --file FILE       Operate on archive FILE (default is current db)\",",
          "3469:   \"     -a FILE, --append FILE     Operate on FILE opened using the apndvfs VFS\",",
          "3470:   \"     -C DIR, --directory DIR    Change to directory DIR to read/extract files\",",
          "3473:   \"     .ar -cf archive.sar foo bar  # Create archive.sar from files foo and bar\",",
          "3474:   \"     .ar -tf archive.sar          # List members of archive.sar\",",
          "3475:   \"     .ar -xvf archive.sar         # Verbosely extract files from archive.sar\",",
          "",
          "[Added Lines]",
          "3463:   \"     -u, --update               Add or update files with changed mtime\",",
          "3464:   \"     -i, --insert               Like -u but always add even if unchanged\",",
          "3469:   \"     -f FILE, --file FILE       Use archive FILE (default is current db)\",",
          "3470:   \"     -a FILE, --append FILE     Open FILE using the apndvfs VFS\",",
          "3471:   \"     -C DIR, --directory DIR    Read/extract files from directory DIR\",",
          "3474:   \"     .ar -cf ARCHIVE foo bar  # Create ARCHIVE from files foo and bar\",",
          "3475:   \"     .ar -tf ARCHIVE          # List members of ARCHIVE\",",
          "3476:   \"     .ar -xvf ARCHIVE         # Verbosely extract files from ARCHIVE\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3481: #endif",
          "3482:   \".backup ?DB? FILE        Backup DB (default \\\"main\\\") to FILE\",",
          "3483:   \"       --append            Use the appendvfs\",",
          "3485:   \".bail on|off             Stop after hitting an error.  Default OFF\",",
          "3486:   \".binary on|off           Turn binary output on or off.  Default OFF\",",
          "3487:   \".cd DIRECTORY            Change the working directory to DIRECTORY\",",
          "",
          "[Removed Lines]",
          "3484:   \"       --async             Write to FILE without a journal and without fsync()\",",
          "",
          "[Added Lines]",
          "3485:   \"       --async             Write to FILE without journal and fsync()\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3501:   \"   Other Modes:\",",
          "3502: #ifdef SQLITE_DEBUG",
          "3503:   \"      test                  Show raw EXPLAIN QUERY PLAN output\",",
          "3505: #endif",
          "3506:   \"      trigger               Like \\\"full\\\" but also show trigger bytecode\",",
          "3508:   \".exit ?CODE?             Exit this program with return-code CODE\",",
          "3513:   \".filectrl CMD ...        Run various sqlite3_file_control() operations\",",
          "3514:   \"                           Run \\\".filectrl\\\" with no arguments for details\",",
          "3515:   \".fullschema ?--indent?   Show schema and the content of sqlite_stat tables\",",
          "",
          "[Removed Lines]",
          "3504:   \"      trace                 Like \\\"full\\\" but also enable \\\"PRAGMA vdbe_trace\\\"\",",
          "3507:   \".excel                   Display the output of next command in a spreadsheet\",",
          "3509:   \".expert                  EXPERIMENTAL. Suggest indexes for specified queries\",",
          "",
          "[Added Lines]",
          "3505:   \"      trace                 Like \\\"full\\\" but enable \\\"PRAGMA vdbe_trace\\\"\",",
          "3508:   \".excel                   Display the output of next command in spreadsheet\",",
          "3510:   \".expert                  EXPERIMENTAL. Suggest indexes for queries\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3556:   \"        --append        Use appendvfs to append database to the end of FILE\",",
          "3557: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3558:   \"        --deserialize   Load into memory useing sqlite3_deserialize()\",",
          "3560:   \"        --maxsize N     Maximum size for --hexdb or --deserialized database\",",
          "3561: #endif",
          "3562:   \"        --new           Initialize FILE to an empty database\",",
          "",
          "[Removed Lines]",
          "3559:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory database\",",
          "",
          "[Added Lines]",
          "3560:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory db\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3569:   \"   init                    Initialize the TEMP table that holds bindings\",",
          "3570:   \"   list                    List the current parameter bindings\",",
          "3571:   \"   set PARAMETER VALUE     Given SQL parameter PARAMETER a value of VALUE\",",
          "3573:   \"   unset PARAMETER         Remove PARAMETER from the binding table\",",
          "3574:   \".print STRING...         Print literal STRING\",",
          "3575: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "[Removed Lines]",
          "3572:   \"                           PARAMETER should start with '$', ':', '@', or '?'\",",
          "",
          "[Added Lines]",
          "3573:   \"                           PARAMETER should start with one of: $ : @ ?\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3584:   \".read FILE               Read input from FILE\",",
          "3585: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)",
          "3586:   \".recover                 Recover as much data as possible from corrupt db.\",",
          "3587: #endif",
          "3588:   \".restore ?DB? FILE       Restore content of DB (default \\\"main\\\") from FILE\",",
          "3589:   \".save FILE               Write in-memory database into FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3588:   \"   --freelist-corrupt       Assume the freelist is corrupt\",",
          "3589:   \"   --recovery-db NAME       Store recovery metadata in database file NAME\",",
          "3590:   \"   --lost-and-found TABLE   Alternative name for the lost-and-found table\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3615:   \"    Options:\",",
          "3616:   \"      --schema              Also hash the sqlite_master table\",",
          "3617:   \"      --sha3-224            Use the sha3-224 algorithm\",",
          "3619:   \"      --sha3-384            Use the sha3-384 algorithm\",",
          "3620:   \"      --sha3-512            Use the sha3-512 algorithm\",",
          "3621:   \"    Any other argument is a LIKE pattern for tables to hash\",",
          "",
          "[Removed Lines]",
          "3618:   \"      --sha3-256            Use the sha3-256 algorithm.  This is the default.\",",
          "",
          "[Added Lines]",
          "3622:   \"      --sha3-256            Use the sha3-256 algorithm (default)\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5721:                 i = n;",
          "5722:               }else{",
          "5723:                 if( iArg>=(nArg-1) ){",
          "5725:                 }",
          "5726:                 zArg = azArg[++iArg];",
          "5727:               }",
          "",
          "[Removed Lines]",
          "5724:                   return arErrorMsg(pAr, \"option requires an argument: %c\",z[i]);",
          "",
          "[Added Lines]",
          "5728:                   return arErrorMsg(pAr, \"option requires an argument: %c\",",
          "5729:                                     z[i]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6604:       zLostAndFound = azArg[i];",
          "6605:     }",
          "6606:     else{",
          "6612:       return 1;",
          "6613:     }",
          "6614:   }",
          "",
          "[Removed Lines]",
          "6607:       raw_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "6608:       raw_printf(stderr, \"options are:\\n\");",
          "6609:       raw_printf(stderr, \"    --freelist-corrupt\\n\");",
          "6610:       raw_printf(stderr, \"    --recovery-db DATABASE\\n\");",
          "6611:       raw_printf(stderr, \"    --lost-and-found TABLE-NAME\\n\");",
          "",
          "[Added Lines]",
          "6612:       utf8_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "6613:       showHelp(pState->out, azArg[0]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8467:       if( zName ){",
          "8468:         appendText(&sSelect,",
          "8469:            \" UNION ALL SELECT shell_module_schema(name),\"",
          "8471:       }",
          "8472: #endif",
          "8473:       appendText(&sSelect, \") WHERE \", 0);",
          "",
          "[Removed Lines]",
          "8470:            \" 'table', name, name, name, 9e+99, 'main' FROM pragma_module_list\", 0);",
          "",
          "[Added Lines]",
          "8472:            \" 'table', name, name, name, 9e+99, 'main' FROM pragma_module_list\",",
          "8473:         0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8566:       if( pSession->p==0 ) goto session_not_open;",
          "8567:       out = fopen(azCmd[1], \"wb\");",
          "8568:       if( out==0 ){",
          "8570:       }else{",
          "8571:         int szChng;",
          "8572:         void *pChng;",
          "",
          "[Removed Lines]",
          "8569:         utf8_printf(stderr, \"ERROR: cannot open \\\"%s\\\" for writing\\n\", azCmd[1]);",
          "",
          "[Added Lines]",
          "8572:         utf8_printf(stderr, \"ERROR: cannot open \\\"%s\\\" for writing\\n\",",
          "8573:                     azCmd[1]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8887:         {",
          "8888:           utf8_printf(stderr, \"Unknown option \\\"%s\\\" on \\\"%s\\\"\\n\",",
          "8889:                       azArg[i], azArg[0]);",
          "8892:           rc = 1;",
          "8893:           goto meta_command_exit;",
          "8894:         }",
          "",
          "[Removed Lines]",
          "8890:           raw_printf(stderr, \"Should be one of: --schema\"",
          "8891:                              \" --sha3-224 --sha3-256 --sha3-384 --sha3-512\\n\");",
          "",
          "[Added Lines]",
          "8894:           showHelp(p->out, azArg[0]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "9168:     } aCtrl[] = {",
          "9181: #ifdef YYCOVERAGE",
          "9183: #endif",
          "9189:     };",
          "9190:     int testctrl = -1;",
          "9191:     int iCtrl = -1;",
          "",
          "[Removed Lines]",
          "9169:       { \"always\",             SQLITE_TESTCTRL_ALWAYS,        \"BOOLEAN\"            },",
          "9170:       { \"assert\",             SQLITE_TESTCTRL_ASSERT,        \"BOOLEAN\"            },",
          "9173:       { \"byteorder\",          SQLITE_TESTCTRL_BYTEORDER,     \"\"                   },",
          "9174:       { \"extra_schema_checks\",SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS,\"BOOLEAN\"       },",
          "9176:       { \"imposter\",           SQLITE_TESTCTRL_IMPOSTER,   \"SCHEMA ON/OFF ROOTPAGE\"},",
          "9177:       { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"BOOLEAN\"       },",
          "9178:       { \"localtime_fault\",    SQLITE_TESTCTRL_LOCALTIME_FAULT,\"BOOLEAN\"           },",
          "9179:       { \"never_corrupt\",      SQLITE_TESTCTRL_NEVER_CORRUPT, \"BOOLEAN\"            },",
          "9180:       { \"optimizations\",      SQLITE_TESTCTRL_OPTIMIZATIONS, \"DISABLE-MASK\"       },",
          "9182:       { \"parser_coverage\",    SQLITE_TESTCTRL_PARSER_COVERAGE, \"\"                 },",
          "9184:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"           },",
          "9185:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"                   },",
          "9186:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"                   },",
          "9187:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"          },",
          "9188:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,       \"BYTES-OF-RESERVE\"   },",
          "",
          "[Added Lines]",
          "9172:       { \"always\",             SQLITE_TESTCTRL_ALWAYS,        \"BOOLEAN\"        },",
          "9173:       { \"assert\",             SQLITE_TESTCTRL_ASSERT,        \"BOOLEAN\"        },",
          "9176:       { \"byteorder\",          SQLITE_TESTCTRL_BYTEORDER,     \"\"               },",
          "9177:       { \"extra_schema_checks\",SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS,\"BOOLEAN\"   },",
          "9179:       { \"imposter\",         SQLITE_TESTCTRL_IMPOSTER, \"SCHEMA ON/OFF ROOTPAGE\"},",
          "9180:       { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"BOOLEAN\"   },",
          "9181:       { \"localtime_fault\",    SQLITE_TESTCTRL_LOCALTIME_FAULT,\"BOOLEAN\"       },",
          "9182:       { \"never_corrupt\",      SQLITE_TESTCTRL_NEVER_CORRUPT, \"BOOLEAN\"        },",
          "9183:       { \"optimizations\",      SQLITE_TESTCTRL_OPTIMIZATIONS, \"DISABLE-MASK\"   },",
          "9185:       { \"parser_coverage\",    SQLITE_TESTCTRL_PARSER_COVERAGE, \"\"             },",
          "9187:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"       },",
          "9188:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"               },",
          "9189:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"               },",
          "9190:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"      },",
          "9191:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,      \"BYTES-OF-RESERVE\"},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "9328:       }",
          "9329:     }",
          "9330:     if( isOk==0 && iCtrl>=0 ){",
          "9332:       rc = 1;",
          "9333:     }else if( isOk==1 ){",
          "9334:       raw_printf(p->out, \"%d\\n\", rc2);",
          "",
          "[Removed Lines]",
          "9331:       utf8_printf(p->out, \"Usage: .testctrl %s %s\\n\", zCmd, aCtrl[iCtrl].zUsage);",
          "",
          "[Added Lines]",
          "9334:       utf8_printf(p->out, \"Usage: .testctrl %s %s\\n\", zCmd,aCtrl[iCtrl].zUsage);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "9445:         rc = 1;",
          "9446:         goto meta_command_exit;",
          "9447:       }",
          "9449:       if( rc ){",
          "9450:         utf8_printf(stderr, \"Authentication failed for user %s\\n\", azArg[2]);",
          "9451:         rc = 1;",
          "",
          "[Removed Lines]",
          "9448:       rc = sqlite3_user_authenticate(p->db, azArg[2], azArg[3], strlen30(azArg[3]));",
          "",
          "[Added Lines]",
          "9451:       rc = sqlite3_user_authenticate(p->db, azArg[2], azArg[3],",
          "9452:                                      strlen30(azArg[3]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab0992f022b4e9ee5f0ac79a2fb6b3556e8a9cb2",
      "candidate_info": {
        "commit_hash": "ab0992f022b4e9ee5f0ac79a2fb6b3556e8a9cb2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ab0992f022b4e9ee5f0ac79a2fb6b3556e8a9cb2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Fix incorrect arguments to testcase() macros.\n\nFossilOrigin-Name: 812467fbf04ce00228a8381a5eee471e4e35cc63184a4538129fcd70b7cec979",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3de57145a18c62ff9b556c7218d8b276000d0052e4890212fa9335235f22d03c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1407:           pCol->zName);",
          "1408: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1409:     }else if( pCol->colFlags & COLFLAG_GENERATED ){",
          "1412:       sqlite3ErrorMsg(pParse, \"cannot use DEFAULT on a generated column\");",
          "1413: #endif",
          "1414:     }else{",
          "",
          "[Removed Lines]",
          "1410:       testcase( pCol->colflags & COLFLAG_VIRTUAL );",
          "1411:       testcase( pCol->colflags & COLFLAG_STORED );",
          "",
          "[Added Lines]",
          "1410:       testcase( pCol->colFlags & COLFLAG_VIRTUAL );",
          "1411:       testcase( pCol->colFlags & COLFLAG_STORED );",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:   for(i=0; i<pTab->nCol; i++){",
          "224:     if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "227:       pTab->aCol[i].colFlags |= COLFLAG_NOTAVAIL;",
          "228:     }",
          "229:   }",
          "",
          "[Removed Lines]",
          "225:       testcase( pTab->aCol[i].colflags & COLFLAG_VIRTUAL );",
          "226:       testcase( pTab->aCol[i].colflags & COLFLAG_STORED );",
          "",
          "[Added Lines]",
          "225:       testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "226:       testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2441:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2442:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2446:       }",
          "2447:     }",
          "",
          "[Removed Lines]",
          "2443:         testcase( pDestCol->colflags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colflags & COLFLAG_STORED );",
          "",
          "[Added Lines]",
          "2443:         testcase( pDestCol->colFlags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colFlags & COLFLAG_STORED );",
          "",
          "---------------"
        ]
      }
    }
  ]
}