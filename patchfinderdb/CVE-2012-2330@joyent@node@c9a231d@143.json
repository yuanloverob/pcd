{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81d18398a8a6d3fcf74bb7325d0cd1af3c26eca4",
      "candidate_info": {
        "commit_hash": "81d18398a8a6d3fcf74bb7325d0cd1af3c26eca4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/81d18398a8a6d3fcf74bb7325d0cd1af3c26eca4",
        "files": [
          "test/fixtures/empty.js",
          "test/pummel/test-debugger-debug-brk.js"
        ],
        "message": "test: add --debug-brk regression test",
        "before_after_code_files": [
          "test/pummel/test-debugger-debug-brk.js||test/pummel/test-debugger-debug-brk.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/pummel/test-debugger-debug-brk.js||test/pummel/test-debugger-debug-brk.js": [
          "File: test/pummel/test-debugger-debug-brk.js -> test/pummel/test-debugger-debug-brk.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var common = require('../common');",
          "24: var assert = require('assert');",
          "25: var spawn = require('child_process').spawn;",
          "27: var script = common.fixturesDir + '/empty.js';",
          "29: function fail() {",
          "30:   assert(0); // `node --debug-brk script.js` should not quit",
          "31: }",
          "33: function test(arg) {",
          "34:   var child = spawn(process.execPath, [arg, script]);",
          "35:   child.on('exit', fail);",
          "38:   setTimeout(function() {",
          "39:     child.removeListener('exit', fail);",
          "40:     child.kill();",
          "41:   }, 2000);",
          "43:   process.on('exit', function() {",
          "44:     assert(child.killed);",
          "45:   });",
          "46: }",
          "48: test('--debug-brk');",
          "49: test('--debug-brk=5959');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cc55dca6f67a6096c858b841c677b0593404321",
      "candidate_info": {
        "commit_hash": "9cc55dca6f67a6096c858b841c677b0593404321",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9cc55dca6f67a6096c858b841c677b0593404321",
        "files": [
          "ChangeLog",
          "doc/template.html",
          "src/node_version.h"
        ],
        "message": "Bump version to v0.7.0",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "31: #define NODE_PATCH_VERSION 0",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4428b70cbaf94d0af4e18dd727facd3a6b7ec272",
      "candidate_info": {
        "commit_hash": "4428b70cbaf94d0af4e18dd727facd3a6b7ec272",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4428b70cbaf94d0af4e18dd727facd3a6b7ec272",
        "files": [
          "lib/child_process.js",
          "test/simple/test-child-process-fork.js",
          "test/simple/test-isolates2.js"
        ],
        "message": "Add isolate version of test-child-process-fork",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js",
          "test/simple/test-child-process-fork.js||test/simple/test-child-process-fork.js",
          "test/simple/test-isolates2.js||test/simple/test-isolates2.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   args = args ? args.slice(0) : [];",
          "154:   args.unshift(modulePath);",
          "156:   if (options.stdinStream) {",
          "157:     throw new Error('stdinStream not allowed for fork()');",
          "158:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-fork.js||test/simple/test-child-process-fork.js": [
          "File: test/simple/test-child-process-fork.js -> test/simple/test-child-process-fork.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var fork = require('child_process').fork;",
          "25: var args = ['foo', 'bar'];",
          "28: assert.deepEqual(args, ['foo', 'bar']);",
          "30: var messageCount = 0;",
          "",
          "[Removed Lines]",
          "27: var n = fork(common.fixturesDir + '/child-process-spawn-node.js', args);",
          "",
          "[Added Lines]",
          "27: var options = {",
          "28:   thread: process.TEST_ISOLATE ? true : false",
          "29: };",
          "31: var n = fork(common.fixturesDir + '/child-process-spawn-node.js',",
          "32:              args,",
          "33:              options);",
          "",
          "---------------"
        ],
        "test/simple/test-isolates2.js||test/simple/test-isolates2.js": [
          "File: test/simple/test-isolates2.js -> test/simple/test-isolates2.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: if (!process.features.isolates) return;",
          "4: var assert = require('assert');",
          "9: process.TEST_ISOLATE = true;",
          "10: require('./test-child-process-fork');",
          "12: var numThreads = process.binding('isolates').count();",
          "13: assert.ok(numThreads > 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0de6ec5f08161d481c9cca73ab49cb9fba1b7699",
      "candidate_info": {
        "commit_hash": "0de6ec5f08161d481c9cca73ab49cb9fba1b7699",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0de6ec5f08161d481c9cca73ab49cb9fba1b7699",
        "files": [
          "src/platform_win32.cc"
        ],
        "message": "win: fix mismatched new[]/delete",
        "before_after_code_files": [
          "src/platform_win32.cc||src/platform_win32.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/platform_win32.cc||src/platform_win32.cc": [
          "File: src/platform_win32.cc -> src/platform_win32.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:   length = MultiByteToWideChar(CP_UTF8, 0, title, -1, title_w, length);",
          "126:   if (!length) {",
          "127:     winapi_perror(\"MultiByteToWideChar\");",
          "129:     return;",
          "130:   };",
          "",
          "[Removed Lines]",
          "128:     delete title_w;",
          "",
          "[Added Lines]",
          "128:     delete[] title_w;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   free(process_title);",
          "142:   process_title = strdup(title);",
          "145: }",
          "",
          "[Removed Lines]",
          "144:   delete title_w;",
          "",
          "[Added Lines]",
          "144:   delete[] title_w;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5d95ba939d29a47b57cc0edc680a5cd38db22fb",
      "candidate_info": {
        "commit_hash": "e5d95ba939d29a47b57cc0edc680a5cd38db22fb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e5d95ba939d29a47b57cc0edc680a5cd38db22fb",
        "files": [
          "lib/fs.js"
        ],
        "message": "fs: Throw early on invalid encoding args\n\nRe #3918",
        "before_after_code_files": [
          "lib/fs.js||lifs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: var isWindows = process.platform === 'win32';",
          "55: fs.Stats = binding.Stats;",
          "57: fs.Stats.prototype._checkModeProperty = function(property) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   var callback = arguments[arguments.length - 1];",
          "107:   if (typeof(callback) !== 'function') callback = function() {};",
          "110:   var size;",
          "111:   var buffer; // single buffer with file data",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179: };",
          "181: fs.readFileSync = function(path, encoding) {",
          "182:   var fd = fs.openSync(path, constants.O_RDONLY, 438 /*=0666*/);",
          "184:   var size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "344:     var cb = arguments[4],",
          "345:         encoding = arguments[3];",
          "346:     position = arguments[2];",
          "347:     length = arguments[1];",
          "348:     buffer = new Buffer(length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "372:     legacy = true;",
          "373:     var encoding = arguments[3];",
          "374:     position = arguments[2];",
          "375:     length = arguments[1];",
          "376:     buffer = new Buffer(length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "393:     callback = arguments[4];",
          "394:     position = arguments[2];",
          "396:     buffer = new Buffer('' + arguments[1], arguments[3]);",
          "397:     offset = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "419:   if (!Buffer.isBuffer(buffer)) {",
          "421:     position = arguments[2];",
          "423:     buffer = new Buffer('' + arguments[1], arguments[3]);",
          "424:     offset = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "788: fs.writeFile = function(path, data, encoding_, callback) {",
          "789:   var encoding = (typeof(encoding_) == 'string' ? encoding_ : 'utf8');",
          "790:   var callback_ = arguments[arguments.length - 1];",
          "791:   callback = (typeof(callback_) == 'function' ? callback_ : null);",
          "792:   fs.open(path, 'w', 438 /*=0666*/, function(openErr, fd) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "801: };",
          "803: fs.writeFileSync = function(path, data, encoding) {",
          "804:   var fd = fs.openSync(path, 'w');",
          "805:   if (!Buffer.isBuffer(data)) {",
          "806:     data = new Buffer('' + data, encoding || 'utf8');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "819: fs.appendFile = function(path, data, encoding_, callback) {",
          "820:   var encoding = (typeof(encoding_) == 'string' ? encoding_ : 'utf8');",
          "821:   var callback_ = arguments[arguments.length - 1];",
          "822:   callback = (typeof(callback_) == 'function' ? callback_ : null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "829: };",
          "831: fs.appendFileSync = function(path, data, encoding) {",
          "832:   var fd = fs.openSync(path, 'a');",
          "833:   if (!Buffer.isBuffer(data)) {",
          "834:     data = new Buffer('' + data, encoding || 'utf8');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1288:     this[key] = options[key];",
          "1289:   }",
          "1291:   if (this.encoding) this.setEncoding(this.encoding);",
          "1293:   if (this.start !== undefined) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1331: fs.FileReadStream = fs.ReadStream; // support the legacy name",
          "1333: ReadStream.prototype.setEncoding = function(encoding) {",
          "1334:   var StringDecoder = require('string_decoder').StringDecoder; // lazy load",
          "1335:   this._decoder = new StringDecoder(encoding);",
          "1336: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1584:   if (!Buffer.isBuffer(data)) {",
          "1585:     var encoding = 'utf8';",
          "1586:     if (typeof(arguments[1]) == 'string') encoding = arguments[1];",
          "1587:     data = new Buffer('' + data, encoding);",
          "1588:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1670:       throw new Error('bad arg');",
          "1671:     }",
          "1672:   }",
          "1675:   if (typeof data == 'string') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}