{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52612bec3c7ff5f3ce61bc7380600a5831bbe1bb",
      "candidate_info": {
        "commit_hash": "52612bec3c7ff5f3ce61bc7380600a5831bbe1bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/52612bec3c7ff5f3ce61bc7380600a5831bbe1bb",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a resource leak in fts5 that could occur if an auxiliary function is called from within a query that does not use the full-text index.\n\nFossilOrigin-Name: b528bdcd45db1b783ecd9739c3d3c890f04de7003f079668970eafaf8e23b2f3",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: void sqlite3Fts5IterClose(Fts5IndexIter*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: void sqlite3Fts5IndexCloseReader(Fts5Index*);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   if( p->pReader ){",
          "619:     sqlite3_blob *pReader = p->pReader;",
          "620:     p->pReader = 0;",
          "",
          "[Removed Lines]",
          "617: static void fts5CloseReader(Fts5Index *p){",
          "",
          "[Added Lines]",
          "617: void sqlite3Fts5IndexCloseReader(Fts5Index *p){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:       assert( p->pReader==0 );",
          "644:       p->pReader = pBlob;",
          "645:       if( rc!=SQLITE_OK ){",
          "647:       }",
          "648:       if( rc==SQLITE_ABORT ) rc = SQLITE_OK;",
          "649:     }",
          "",
          "[Removed Lines]",
          "646:         fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "646:         sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5204: int sqlite3Fts5IndexSync(Fts5Index *p){",
          "5205:   assert( p->rc==SQLITE_OK );",
          "5206:   fts5IndexFlush(p);",
          "5208:   return fts5IndexReturn(p);",
          "5209: }",
          "",
          "[Removed Lines]",
          "5207:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5207:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5217: int sqlite3Fts5IndexRollback(Fts5Index *p){",
          "5219:   fts5IndexDiscardData(p);",
          "5220:   fts5StructureInvalidate(p);",
          "",
          "[Removed Lines]",
          "5218:   fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5218:   sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5456:     if( p->rc ){",
          "5457:       sqlite3Fts5IterClose((Fts5IndexIter*)pRet);",
          "5458:       pRet = 0;",
          "5460:     }",
          "",
          "[Removed Lines]",
          "5459:       fts5CloseReader(p);",
          "",
          "[Added Lines]",
          "5459:       sqlite3Fts5IndexCloseReader(p);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5529:     Fts5Iter *pIter = (Fts5Iter*)pIndexIter;",
          "5530:     Fts5Index *pIndex = pIter->pIndex;",
          "5531:     fts5MultiIterFree(pIter);",
          "5533:   }",
          "5534: }",
          "",
          "[Removed Lines]",
          "5532:     fts5CloseReader(pIndex);",
          "",
          "[Added Lines]",
          "5532:     sqlite3Fts5IndexCloseReader(pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "744:     sqlite3_free(pCsr->zRankArgs);",
          "745:   }",
          "747:   memset(&pCsr->ePlan, 0, sizeof(Fts5Cursor) - ((u8*)&pCsr->ePlan - (u8*)pCsr));",
          "748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:   sqlite3Fts5IndexCloseReader(pTab->p.pIndex);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5matchinfo.test||ext/fts5/test/fts5matchinfo.test": [
          "File: ext/fts5/test/fts5matchinfo.test -> ext/fts5/test/fts5matchinfo.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:   SELECT matchinfo(x1, 'd') FROM x1('a b c');",
          "492: } {1 {unrecognized matchinfo flag: d}}",
          "494: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494: #-------------------------------------------------------------------------",
          "495: # Test using matchinfo() and similar on a non-full-text query",
          "496: #",
          "497: do_execsql_test 15.0 {",
          "498:   CREATE VIRTUAL TABLE t1 USING fts5(x, y);",
          "499:   INSERT INTO t1 VALUES('a', 'b');",
          "500:   INSERT INTO t1 VALUES('c', 'd');",
          "501: }",
          "503: do_execsql_test 15.1 {",
          "504:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "505: } {X'02000000'}",
          "507: do_execsql_test 15.2 {",
          "508:   DELETE FROM t1_content WHERE rowid=1;",
          "509:   SELECT quote(matchinfo(t1, 'n')) FROM t1 LIMIT 1;",
          "510: } {X'02000000'}",
          "512: fts5_aux_test_functions db",
          "513: do_execsql_test 15.3 {",
          "514:   SELECT fts5_test_all(t1) FROM t1 LIMIT 1;",
          "515: } {",
          "516:   {columnsize {0 0} columntext {c d} columntotalsize {2 2} poslist {} tokenize {c d} rowcount 2}",
          "517: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9dc0d34586eebf6705d9bd81494c417ac76707b8625d1ff99eda18b4ca2d8a50",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5776ee5cf5773f4e4580db3860fe7d9194c75151",
      "candidate_info": {
        "commit_hash": "5776ee5cf5773f4e4580db3860fe7d9194c75151",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5776ee5cf5773f4e4580db3860fe7d9194c75151",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/global.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Omit the sqlite3IntTokens array constant for a code simplification.\n\nFossilOrigin-Name: f907395ef5a2dc1d084b6a286af00de4c742cf12d4f347c21e1b757786508f57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/global.c||src/global.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 82e5dcf5c1d500ed82f398b38fdae0f30033804e897fbab3c10f1e15e2abedef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "906:     sqlite3ExprUnmapAndDelete(pParse, pLeft);",
          "907:     sqlite3ExprUnmapAndDelete(pParse, pRight);",
          "909:   }else{",
          "910:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "911:   }",
          "",
          "[Removed Lines]",
          "908:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "",
          "[Added Lines]",
          "908:     return sqlite3Expr(db, TK_INTEGER, \"0\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2965:     sqlite3 *db = pParse->db;",
          "2967:     if( pLimit ){",
          "2968:       pLimit->affExpr = SQLITE_AFF_NUMERIC;",
          "2969:       pLimit = sqlite3PExpr(pParse, TK_NE,",
          "",
          "[Removed Lines]",
          "2966:     pLimit = sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "",
          "[Added Lines]",
          "2966:     pLimit = sqlite3Expr(db, TK_INTEGER, \"0\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2973:     pSel->pLimit->pLeft = pLimit;",
          "2974:   }else{",
          "2977:     pSel->pLimit = sqlite3PExpr(pParse, TK_LIMIT, pLimit, 0);",
          "2978:   }",
          "2979:   pSel->iLimit = 0;",
          "",
          "[Removed Lines]",
          "2976:     pLimit = sqlite3ExprAlloc(pParse->db, TK_INTEGER, &sqlite3IntTokens[1], 0);",
          "",
          "[Added Lines]",
          "2976:     pLimit = sqlite3Expr(pParse->db, TK_INTEGER, \"1\");",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272: FuncDefHash sqlite3BuiltinFunctions;",
          "282: #ifdef VDBE_PROFILE",
          "",
          "[Removed Lines]",
          "277: const Token sqlite3IntTokens[] = {",
          "278:    { \"0\", 1 },",
          "279:    { \"1\", 1 }",
          "280: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1183:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "1185:     }else{",
          "1186:       A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "1187:       if( A ){",
          "",
          "[Removed Lines]",
          "1184:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "",
          "[Added Lines]",
          "1184:       A = sqlite3Expr(pParse->db, TK_INTEGER, N ? \"1\" : \"0\");",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5465:     Select *pS = pWalker->u.pSelect;",
          "5466:     if( sqlite3ExprIsConstantOrGroupBy(pWalker->pParse, pExpr, pS->pGroupBy) ){",
          "5467:       sqlite3 *db = pWalker->pParse->db;",
          "5469:       if( pNew ){",
          "5470:         Expr *pWhere = pS->pWhere;",
          "5471:         SWAP(Expr, *pNew, *pExpr);",
          "",
          "[Removed Lines]",
          "5468:       Expr *pNew = sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[1], 0);",
          "",
          "[Added Lines]",
          "5468:       Expr *pNew = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4318: extern const char sqlite3StrBINARY[];",
          "4319: extern const unsigned char sqlite3UpperToLower[];",
          "4320: extern const unsigned char sqlite3CtypeMap[];",
          "4322: extern SQLITE_WSD struct Sqlite3Config sqlite3Config;",
          "4323: extern FuncDefHash sqlite3BuiltinFunctions;",
          "4324: #ifndef SQLITE_OMIT_WSD",
          "",
          "[Removed Lines]",
          "4321: extern const Token sqlite3IntTokens[];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:     if( pSublist==0 ){",
          "993:       pSublist = sqlite3ExprListAppend(pParse, 0,",
          "995:       );",
          "996:     }",
          "",
          "[Removed Lines]",
          "994:           sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0)",
          "",
          "[Added Lines]",
          "994:         sqlite3Expr(db, TK_INTEGER, \"0\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35808435953097822ab86df84e02170e3b1839de",
      "candidate_info": {
        "commit_hash": "35808435953097822ab86df84e02170e3b1839de",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35808435953097822ab86df84e02170e3b1839de",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/bestindex1.test"
        ],
        "message": "Fix a fairly obscure problem causing the planner to sometimes choose sub-optimal plans for a query with a single virtual table in the FROM clause, and at least one IN(...) constraint in the WHERE clause.\n\nFossilOrigin-Name: f5752517f590b37bfc0267650f5800320e22a8ecaba34aa6893281ce8d268026",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/bestindex1.test||test/bestindex1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 040d5d515bcb37bea05e0d156dbaf066c68052ac574f1b0b2cb118d473a353e0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3335:   rc = whereLoopAddVirtualOne(pBuilder, mPrereq, ALLBITS, 0, p, mNoOmit, &bIn);",
          "3345:     Bitmask mPrev = 0;",
          "",
          "[Removed Lines]",
          "3342:   if( rc==SQLITE_OK && (mBest = (pNew->prereq & ~mPrereq))!=0 ){",
          "",
          "[Added Lines]",
          "3342:   if( rc==SQLITE_OK && ((mBest = (pNew->prereq & ~mPrereq))!=0 || bIn) ){",
          "",
          "---------------"
        ],
        "test/bestindex1.test||test/bestindex1.test": [
          "File: test/bestindex1.test -> test/bestindex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   4 0 ValueB 4 0 ValueB",
          "267: }",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #-------------------------------------------------------------------------",
          "270: # If there is an IN(..) condition in the WHERE clause of a query on a",
          "271: # virtual table, the xBestIndex method is first invoked with the IN(...)",
          "272: # represented by a \"usable\" SQLITE_INDEX_CONSTRAINT_EQ constraint. If",
          "273: # the virtual table elects to use the IN(...) constraint, then the",
          "274: # xBestIndex method is invoked again, this time with the IN(...) marked",
          "275: # as \"not usable\". Depending on the relative costs of the two plans as",
          "276: # defined by the virtual table implementation, and the cardinality of the",
          "277: # IN(...) operator, SQLite chooses the most efficient plan.",
          "278: #",
          "279: # At one point the second invocation of xBestIndex() was only being made",
          "280: # for join queries. The following tests check that this problem has been",
          "281: # fixed.",
          "282: #",
          "283: proc vtab_command {method args} {",
          "284:   switch -- $method {",
          "285:     xConnect {",
          "286:       return \"CREATE TABLE t1(a, b, c, d)\"",
          "287:     }",
          "289:     xBestIndex {",
          "290:       set clist [lindex $args 0]",
          "291:       lappend ::bestindex_calls $clist",
          "292:       set ret \"cost 1000000 idxnum 555\"",
          "293:       for {set i 0} {$i < [llength $clist]} {incr i} {",
          "294:         array set C [lindex $clist $i]",
          "295:         if {$C(usable)} { lappend ret use $i }",
          "296:       }",
          "297:       return $ret",
          "298:     }",
          "299:   }",
          "300:   return {}",
          "301: }",
          "303: do_execsql_test 4.0 {",
          "304:   CREATE VIRTUAL TABLE x1 USING tcl(vtab_command);",
          "305: } {}",
          "307: do_test 4.1 {",
          "308:   set ::bestindex_calls [list]",
          "309:   execsql {",
          "310:     SELECT * FROM x1 WHERE a=? AND b BETWEEN ? AND ? AND c IN (1, 2, 3, 4);",
          "311:   }",
          "312:   set ::bestindex_calls",
          "313: } [list \\",
          "314:     [list {op eq column 0 usable 1} \\",
          "315:           {op eq column 2 usable 1} \\",
          "316:           {op ge column 1 usable 1} \\",
          "317:           {op le column 1 usable 1} \\",
          "318:     ] \\",
          "319:     [list {op eq column 0 usable 1} \\",
          "320:           {op eq column 2 usable 0} \\",
          "321:           {op ge column 1 usable 1} \\",
          "322:           {op le column 1 usable 1}",
          "323:     ]",
          "324: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
      "candidate_info": {
        "commit_hash": "f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Fix a potential use-after-free bug that follows an OOM error in code added two days ago by check-in [84e02d773d60cffe].  Problem discovered by OSSFuzz.\n\nFossilOrigin-Name: 0a2eb949f8a759e5745d9468c8183d3c0b4b30e0fa2a14b3062620eb9e1d5c1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32df5edcfef2605009f45d6ef1b97c63a99df07c7b4e00dc70f93001cfb8d81f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:   pCtx->pVdbe = 0;",
          "369:   pCtx->isError = 0;",
          "370:   pCtx->argc = nArg;",
          "371:   addr = sqlite3VdbeAddOp4(v, eCallCtx ? OP_PureFunc : OP_Function,",
          "372:                            p1, p2, p3, (char*)pCtx, P4_FUNCCTX);",
          "373:   sqlite3VdbeChangeP5(v, eCallCtx & NC_SelfRef);",
          "375:   return addr;",
          "376: }",
          "",
          "[Removed Lines]",
          "374:   pCtx->iOp = addr;",
          "",
          "[Added Lines]",
          "371:   pCtx->iOp = sqlite3VdbeCurrentAddr(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a1ce4369f95cb09960e664e80a551f1f968c5f8",
      "candidate_info": {
        "commit_hash": "5a1ce4369f95cb09960e664e80a551f1f968c5f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5a1ce4369f95cb09960e664e80a551f1f968c5f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/indexexpr2.test"
        ],
        "message": "Fix a problem with bytecode generation when a query involves two or more indexes on expressions connected by OR. Ticket [d96eba87698a428c1ddd0790ea04]\n\nFossilOrigin-Name: 7e4ed8b5c2047b69bbb037497111e56e465a4d9f8afca3b337f9ac744471dc4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc42dd15100db28a9796254f69a4e367ea5eae29f546be055017cf3e12aa66ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:     for(j=0; j<2 && !okToChngToIN; j++){",
          "780:       pOrTerm = pOrWc->a;",
          "781:       for(i=pOrWc->nTerm-1; i>=0; i--, pOrTerm++){",
          "782:         assert( pOrTerm->eOperator & WO_EQ );",
          "783:         pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:       Expr *pLeft = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "800:         }",
          "801:         iColumn = pOrTerm->u.leftColumn;",
          "802:         iCursor = pOrTerm->leftCursor;",
          "803:         break;",
          "804:       }",
          "805:       if( i<0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:         pLeft = pOrTerm->pExpr->pLeft;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:         assert( pOrTerm->eOperator & WO_EQ );",
          "820:         if( pOrTerm->leftCursor!=iCursor ){",
          "821:           pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "823:           okToChngToIN = 0;",
          "824:         }else{",
          "825:           int affLeft, affRight;",
          "",
          "[Removed Lines]",
          "822:         }else if( pOrTerm->u.leftColumn!=iColumn ){",
          "",
          "[Added Lines]",
          "824:         }else if( pOrTerm->u.leftColumn!=iColumn || (iColumn==XN_EXPR",
          "825:                && sqlite3ExprCompare(pParse, pOrTerm->pExpr->pLeft, pLeft, -1)",
          "826:         )){",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:   } {t2 t2abc t2cd t2def}",
          "232: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: #-------------------------------------------------------------------------",
          "235: # Test that ticket [d96eba87] has been fixed.",
          "236: #",
          "237: do_execsql_test 5.0 {",
          "238:   CREATE TABLE t5(a INTEGER, b INTEGER);",
          "239:   INSERT INTO t5 VALUES(2, 4), (3, 9);",
          "240: }",
          "241: do_execsql_test 5.1 {",
          "242:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "243: } {2 4 3 9}",
          "244: do_execsql_test 5.2 {",
          "245:   CREATE INDEX t5a ON t5( abs(a) );",
          "246:   CREATE INDEX t5b ON t5( abs(b) );",
          "247: }",
          "248: do_execsql_test 5.4 {",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "",
          "---------------"
        ]
      }
    }
  ]
}