{
  "cve_id": "CVE-2019-8906",
  "cve_desc": "do_core_note in readelf.c in libmagic.a in file 5.35 has an out-of-bounds read because memcpy is misused.",
  "repo": "file/file",
  "patch_hash": "2858eaf99f6cc5aae129bcbf1e24ad160240185f",
  "patch_info": {
    "commit_hash": "2858eaf99f6cc5aae129bcbf1e24ad160240185f",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/2858eaf99f6cc5aae129bcbf1e24ad160240185f",
    "files": [
      "src/readelf.c"
    ],
    "message": "Avoid OOB read (found by ASAN reported by F. Alonso)",
    "before_after_code_files": [
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.156 2018/10/19 00:33:04 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.157 2019/01/02 19:44:14 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "752:    char sbuf[512];",
      "753:    struct NetBSD_elfcore_procinfo pi;",
      "754:    memset(&pi, 0, sizeof(pi));",
      "757:    if (file_printf(ms, \", from '%.31s', pid=%u, uid=%u, \"",
      "758:        \"gid=%u, nlwps=%u, lwp=%u (signal %u/code %u)\",",
      "",
      "[Removed Lines]",
      "755:    memcpy(&pi, nbuf + doff, descsz);",
      "",
      "[Added Lines]",
      "755:    memcpy(&pi, nbuf + doff, MIN(descsz, sizeof(pi)));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "190362ab37c6b6c2bdb331df430aea23a3734591",
      "candidate_info": {
        "commit_hash": "190362ab37c6b6c2bdb331df430aea23a3734591",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/190362ab37c6b6c2bdb331df430aea23a3734591",
        "files": [
          "src/ascmagic.c",
          "src/buffer.c",
          "src/compress.c",
          "src/file.h",
          "src/funcs.c",
          "src/magic.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "From: Denys Vlasenko\n\nReduce amount of stat(2) calls when processing elf files;\npropagate fstat result deeper into callees.",
        "before_after_code_files": [
          "src/ascmagic.c||src/ascmagic.c",
          "src/buffer.c||src/buffer.c",
          "src/compress.c||src/compress.c",
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/magic.c||src/magic.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.103 2019/05/06 21:23:38 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.104 2019/05/07 02:27:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   if ((utf8_end = encode_utf8(utf8_buf, mlen, ubuf, ulen))",
          "152:       == NULL)",
          "153:    goto done;",
          "155:       CAST(size_t, utf8_end - utf8_buf));",
          "157:   if ((rv = file_softmagic(ms, &bb, NULL, NULL,",
          "",
          "[Removed Lines]",
          "154:   buffer_init(&bb, b->fd, utf8_buf,",
          "",
          "[Added Lines]",
          "154:   buffer_init(&bb, b->fd, &b->st, utf8_buf,",
          "",
          "---------------"
        ],
        "src/buffer.c||src/buffer.c": [
          "File: src/buffer.c -> src/buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: buffer.c,v 1.5 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: buffer.c,v 1.6 2019/05/07 02:27:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: #include <sys/stat.h>",
          "39: void",
          "41: {",
          "42:  b->fd = fd;",
          "44:   memset(&b->st, 0, sizeof(b->st));",
          "45:  b->fbuf = data;",
          "46:  b->flen = len;",
          "",
          "[Removed Lines]",
          "40: buffer_init(struct buffer *b, int fd, const void *data, size_t len)",
          "43:  if (b->fd == -1 || fstat(b->fd, &b->st) == -1)",
          "",
          "[Added Lines]",
          "40: buffer_init(struct buffer *b, int fd, const struct stat *st, const void *data,",
          "41:     size_t len)",
          "44:  if (st)",
          "45:   memcpy(&b->st, st, sizeof(b->st));",
          "46:  else if (b->fd == -1 || fstat(b->fd, &b->st) == -1)",
          "",
          "---------------"
        ],
        "src/compress.c||src/compress.c": [
          "File: src/compress.c -> src/compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.120 2019/05/07 02:20:27 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.121 2019/05/07 02:27:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:    if (urv == ERRDATA)",
          "268:     prv = format_decompression_error(ms, i, newbuf);",
          "269:    else",
          "271:    if (prv == -1)",
          "272:     goto error;",
          "273:    rv = 1;",
          "",
          "[Removed Lines]",
          "270:     prv = file_buffer(ms, -1, name, newbuf, nsz);",
          "",
          "[Added Lines]",
          "270:     prv = file_buffer(ms, -1, NULL, name, newbuf, nsz);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "288:     if (file_pop_buffer(ms, pb) != NULL)",
          "289:      abort();",
          "290:     goto error;",
          "",
          "[Removed Lines]",
          "287:    if (file_buffer(ms, -1, NULL, buf, nbytes) == -1) {",
          "",
          "[Added Lines]",
          "287:    if (file_buffer(ms, -1, NULL, NULL, buf, nbytes) == -1) {",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "454: protected struct magic_set *file_ms_alloc(int);",
          "455: protected void file_ms_free(struct magic_set *);",
          "456: protected int file_default(struct magic_set *, size_t);",
          "459: protected int file_fsmagic(struct magic_set *, const char *, struct stat *);",
          "460: protected int file_pipe2file(struct magic_set *, int, const void *, size_t);",
          "461: protected int file_vprintf(struct magic_set *, const char *, va_list)",
          "",
          "[Removed Lines]",
          "457: protected int file_buffer(struct magic_set *, int, const char *, const void *,",
          "458:     size_t);",
          "",
          "[Added Lines]",
          "457: protected int file_buffer(struct magic_set *, int, struct stat *, const char *,",
          "458:     const void *, size_t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "513:     size_t);",
          "517: protected void buffer_fini(struct buffer *);",
          "518: protected int buffer_fill(const struct buffer *);",
          "",
          "[Removed Lines]",
          "516: protected void buffer_init(struct buffer *, int, const void *, size_t);",
          "",
          "[Added Lines]",
          "516: protected void buffer_init(struct buffer *, int, const struct stat *,",
          "517:     const void *, size_t);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.103 2019/05/06 21:22:13 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.104 2019/05/07 02:27:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209: protected int",
          "211:     const void *buf, size_t nb)",
          "212: {",
          "213:  int m = 0, rv = 0, looks_text = 0;",
          "",
          "[Removed Lines]",
          "210: file_buffer(struct magic_set *ms, int fd, const char *inname __attribute__ ((__unused__)),",
          "",
          "[Added Lines]",
          "210: file_buffer(struct magic_set *ms, int fd, struct stat *st,",
          "211:     const char *inname __attribute__ ((__unused__)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:  char *rbuf = NULL;",
          "219:  struct buffer b;",
          "222:  ms->mode = b.st.st_mode;",
          "224:  if (nb == 0) {",
          "",
          "[Removed Lines]",
          "221:  buffer_init(&b, fd, buf, nb);",
          "",
          "[Added Lines]",
          "222:  buffer_init(&b, fd, st, buf, nb);",
          "",
          "---------------"
        ],
        "src/magic.c||src/magic.c": [
          "File: src/magic.c -> src/magic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"file.h\"",
          "35: #ifndef lint",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.110 2019/04/15 16:49:29 christos Exp $\")",
          "",
          "[Added Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.111 2019/05/07 02:27:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406:  struct stat sb;",
          "408:  int ispipe = 0;",
          "409:  off_t pos = CAST(off_t, -1);",
          "411:  if (file_reset(ms, 1) == -1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:  int okstat = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "438:   int flags = O_RDONLY|O_BINARY|O_NONBLOCK;",
          "439:   errno = 0;",
          "440:   if ((fd = open(inname, flags)) < 0) {",
          "442:    if (okstat && S_ISFIFO(sb.st_mode))",
          "443:     ispipe = 1;",
          "444: #ifdef WIN32",
          "",
          "[Removed Lines]",
          "441:    int okstat = stat(inname, &sb) == 0;",
          "",
          "[Added Lines]",
          "442:    okstat = stat(inname, &sb) == 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "462:  }",
          "464:  if (fd != -1) {",
          "466:    ispipe = 1;",
          "467:   if (inname == NULL)",
          "468:    pos = lseek(fd, CAST(off_t, 0), SEEK_CUR);",
          "",
          "[Removed Lines]",
          "465:   if (fstat(fd, &sb) == 0 && S_ISFIFO(sb.st_mode))",
          "",
          "[Added Lines]",
          "466:   if (!okstat)",
          "467:    okstat = fstat(fd, &sb) == 0;",
          "468:   if (okstat && S_ISFIFO(sb.st_mode))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "508:  }",
          "512:   goto done;",
          "513:  rv = 0;",
          "514: done:",
          "",
          "[Removed Lines]",
          "511:  if (file_buffer(ms, fd, inname, buf, CAST(size_t, nbytes)) == -1)",
          "",
          "[Added Lines]",
          "514:  if (file_buffer(ms, fd, okstat ? &sb : NULL, inname, buf, CAST(size_t, nbytes)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "538:   return NULL;",
          "539:  }",
          "540:  return file_getbuffer(ms);",
          "",
          "[Removed Lines]",
          "537:  if (file_buffer(ms, -1, NULL, buf, nb) == -1) {",
          "",
          "[Added Lines]",
          "540:  if (file_buffer(ms, -1, NULL, NULL, buf, nb) == -1) {",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.164 2019/04/15 16:49:53 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.165 2019/05/07 02:27:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1734:  int clazz;",
          "1735:  int swap;",
          "1736:  struct stat st;",
          "1737:  off_t fsize;",
          "1738:  int flags = 0;",
          "1739:  Elf32_Ehdr elf32hdr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1737:  const struct stat *stp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1762:      && (errno == ESPIPE))",
          "1763:   fd = file_pipe2file(ms, fd, buf, nbytes);",
          "1767:   return -1;",
          "1768:  }",
          "1771:  else",
          "1772:   fsize = SIZE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "1765:  if (fd == -1 || fstat(fd, &st) == -1) {",
          "1766:     file_badread(ms);",
          "1769:  if (S_ISREG(st.st_mode) || st.st_size != 0)",
          "1770:   fsize = st.st_size;",
          "",
          "[Added Lines]",
          "1766:  if (fd == -1) {",
          "1767:   file_badread(ms);",
          "1771:  stp = &b->st;",
          "1776:  if (b->st.st_size == 0) {",
          "1777:   stp = &st;",
          "1778:   if (fstat(fd, &st) == -1) {",
          "1779:    file_badread(ms);",
          "1780:    return -1;",
          "1781:   }",
          "1782:  }",
          "1783:  if (S_ISREG(stp->st_mode) || stp->st_size != 0)",
          "1784:   fsize = stp->st_size;",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.283 2019/05/06 21:22:40 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.284 2019/05/07 02:27:11 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1487:   }",
          "1488:   if (CAST(size_t, -m->offset) > b->elen)",
          "1489:    return -1;",
          "1491:   ms->eoffset = ms->offset = CAST(int32_t, b->elen + m->offset);",
          "1492:  } else {",
          "1493:   if (cont_level == 0) {",
          "1494: normal:",
          "1497:    ms->offset = m->offset;",
          "1498:    ms->eoffset = 0;",
          "1499:   } else {",
          "",
          "[Removed Lines]",
          "1490:   buffer_init(bb, -1, b->ebuf, b->elen);",
          "1496:    buffer_init(bb, -1, b->fbuf, b->flen);",
          "",
          "[Added Lines]",
          "1490:   buffer_init(bb, -1, NULL, b->ebuf, b->elen);",
          "1496:    buffer_init(bb, -1, NULL, b->fbuf, b->flen);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "edb7f0d6c23852f799f5f919cb44131307e98e2c",
      "candidate_info": {
        "commit_hash": "edb7f0d6c23852f799f5f919cb44131307e98e2c",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/edb7f0d6c23852f799f5f919cb44131307e98e2c",
        "files": [
          "src/readelf.c"
        ],
        "message": "PR/9: Christoph Bield: Handle files without program headers gracefully",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.144 2018/07/08 23:37:33 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.145 2018/07/25 06:12:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:  off_t ph_off = off;",
          "353:  int ph_num = num;",
          "355:  if (size != xph_sizeof) {",
          "356:   if (file_printf(ms, \", corrupted program header size\") == -1)",
          "357:    return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:  if (num == 0) {",
          "356:   if (file_printf(ms, \", no program header\") == -1)",
          "357:    return -1;",
          "358:   return 0;",
          "359:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1278:  char name[50];",
          "1279:  ssize_t namesize;",
          "1281:  if (size != xsh_sizeof) {",
          "1282:   if (file_printf(ms, \", corrupted section header size\") == -1)",
          "1283:    return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1286:  if (num == 0) {",
          "1287:   if (file_printf(ms, \", no section header\") == -1)",
          "1288:    return -1;",
          "1289:   return 0;",
          "1290:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1549:  ssize_t bufsize;",
          "1550:  size_t offset, align, len;",
          "1552:  if (size != xph_sizeof) {",
          "1553:   if (file_printf(ms, \", corrupted program header size\") == -1)",
          "1554:    return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:  if (num == 0) {",
          "1563:   if (file_printf(ms, \", no program header\") == -1)",
          "1564:    return -1;",
          "1565:   return 0;",
          "1566:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d65781527c8134a1202b2649695d48d5701ac60b",
      "candidate_info": {
        "commit_hash": "d65781527c8134a1202b2649695d48d5701ac60b",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d65781527c8134a1202b2649695d48d5701ac60b",
        "files": [
          "src/file.h",
          "src/funcs.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "PR/62: spinpx: limit size of file_printable.",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:     size_t *);",
          "507: protected size_t file_pstring_length_size(const struct magic *);",
          "508: protected size_t file_pstring_get_length(const struct magic *, const char *);",
          "510: #ifdef __EMX__",
          "511: protected int file_os2_apptype(struct magic_set *, const char *, const void *,",
          "512:     size_t);",
          "",
          "[Removed Lines]",
          "509: protected char * file_printable(char *, size_t, const char *);",
          "",
          "[Added Lines]",
          "509: protected char * file_printable(char *, size_t, const char *, size_t);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.100 2018/10/01 18:45:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.101 2019/02/18 17:46:56 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "625: protected char *",
          "627: {",
          "629:  const unsigned char *s = (const unsigned char *)str;",
          "632:   if (isprint(*s)) {",
          "634:    continue;",
          "",
          "[Removed Lines]",
          "626: file_printable(char *buf, size_t bufsiz, const char *str)",
          "628:  char *ptr, *eptr;",
          "631:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "",
          "[Added Lines]",
          "626: file_printable(char *buf, size_t bufsiz, const char *str, size_t slen)",
          "628:  char *ptr, *eptr = buf + bufsiz - 1;",
          "630:  const unsigned char *es = s + slen;",
          "632:  for (ptr = buf;  ptr < eptr && s < es && *s; s++) {",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.160 2019/02/18 17:30:41 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.161 2019/02/18 17:46:56 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "760:    if (file_printf(ms, \", from '%.31s', pid=%u, uid=%u, \"",
          "761:        \"gid=%u, nlwps=%u, lwp=%u (signal %u/code %u)\",",
          "762:        file_printable(sbuf, sizeof(sbuf),",
          "764:        elf_getu32(swap, (uint32_t)pi.cpi_pid),",
          "765:        elf_getu32(swap, pi.cpi_euid),",
          "766:        elf_getu32(swap, pi.cpi_egid),",
          "",
          "[Removed Lines]",
          "763:        RCAST(char *, pi.cpi_name)),",
          "",
          "[Added Lines]",
          "763:        RCAST(char *, pi.cpi_name), sizeof(pi.cpi_name)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1702:   return -1;",
          "1703:  if (interp[0])",
          "1704:   if (file_printf(ms, \", interpreter %s\",",
          "1706:    return -1;",
          "1707:  return 0;",
          "1708: }",
          "",
          "[Removed Lines]",
          "1705:       file_printable(ibuf, sizeof(ibuf), interp)) == -1)",
          "",
          "[Added Lines]",
          "1705:       file_printable(ibuf, sizeof(ibuf), interp, sizeof(interp)))",
          "1706:    == -1)",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.276 2019/02/14 00:25:59 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.277 2019/02/18 17:46:56 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "634:    case FILE_LESTRING16:",
          "635:   if (m->reln == '=' || m->reln == '!') {",
          "636:    if (file_printf(ms, F(ms, desc, \"%s\"),",
          "639:     return -1;",
          "640:    t = ms->offset + m->vallen;",
          "641:   }",
          "",
          "[Removed Lines]",
          "637:        file_printable(sbuf, sizeof(sbuf), m->value.s))",
          "638:        == -1)",
          "",
          "[Added Lines]",
          "637:        file_printable(sbuf, sizeof(sbuf), m->value.s,",
          "638:        sizeof(m->value.s))) == -1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "662:    }",
          "664:    if (file_printf(ms, F(ms, desc, \"%s\"),",
          "666:     return -1;",
          "668:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "665:        file_printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "[Added Lines]",
          "665:        file_printable(sbuf, sizeof(sbuf), str,",
          "666:     sizeof(p->s) - (str - p->s))) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "768:    return -1;",
          "769:   }",
          "770:   rval = file_printf(ms, F(ms, desc, \"%s\"),",
          "772:   free(cp);",
          "774:   if (rval == -1)",
          "",
          "[Removed Lines]",
          "771:       file_printable(sbuf, sizeof(sbuf), cp));",
          "",
          "[Added Lines]",
          "772:       file_printable(sbuf, sizeof(sbuf), cp, ms->search.rm_len));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "795:   break;",
          "796:  case FILE_DER:",
          "797:   if (file_printf(ms, F(ms, desc, \"%s\"),",
          "799:    return -1;",
          "800:   t = ms->offset;",
          "801:   break;",
          "",
          "[Removed Lines]",
          "798:       file_printable(sbuf, sizeof(sbuf), ms->ms_value.s)) == -1)",
          "",
          "[Added Lines]",
          "799:       file_printable(sbuf, sizeof(sbuf), ms->ms_value.s,",
          "800:    sizeof(ms->ms_value.s))) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "338cc7884dfc0b90805a7428141291e4baa8f7f9",
      "candidate_info": {
        "commit_hash": "338cc7884dfc0b90805a7428141291e4baa8f7f9",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/338cc7884dfc0b90805a7428141291e4baa8f7f9",
        "files": [
          "src/readelf.c"
        ],
        "message": "- C++ cast - return 0 instead of -1 for error in donote",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.154 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.155 2018/10/19 00:26:08 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "786:    pidoff = argoff + 81 + 2;",
          "787:    if (doff + pidoff + 4 <= size) {",
          "788:     if (file_printf(ms, \", pid=%u\",",
          "791:      return 1;",
          "792:    }",
          "",
          "[Removed Lines]",
          "789:         elf_getu32(swap, *(uint32_t *)(nbuf +",
          "790:         doff + pidoff))) == -1)",
          "",
          "[Added Lines]",
          "789:         elf_getu32(swap, *RCAST(uint32 *, (nbuf +",
          "790:         doff + pidoff)))) == -1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1142:  if (namesz & 0x80000000) {",
          "1143:   if (file_printf(ms, \", bad note name size %#lx\",",
          "1144:       CAST(unsigned long, namesz)) == -1)",
          "1146:      return 0;",
          "1147:  }",
          "1149:  if (descsz & 0x80000000) {",
          "1150:   if (file_printf(ms, \", bad note description size %#lx\",",
          "1151:       CAST(unsigned long, descsz)) == -1)",
          "1153:      return 0;",
          "1154:  }",
          "",
          "[Removed Lines]",
          "1145:    return -1;",
          "1152:        return -1;",
          "",
          "[Added Lines]",
          "1145:    return 0;",
          "1152:        return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1668:   case PT_INTERP:",
          "1669:    if (bufsize && nbuf[0]) {",
          "1670:     nbuf[bufsize - 1] = '\\0';",
          "1672:    } else",
          "1673:     strlcpy(interp, \"*empty*\", sizeof(interp));",
          "1674:    break;",
          "",
          "[Removed Lines]",
          "1671:     memcpy(interp, nbuf, bufsize);",
          "",
          "[Added Lines]",
          "1671:     memcpy(interp, nbuf, (size_t)bufsize);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8305d1cc5ec466b2d50d1b6000e7b3c8c4b08853",
      "candidate_info": {
        "commit_hash": "8305d1cc5ec466b2d50d1b6000e7b3c8c4b08853",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/8305d1cc5ec466b2d50d1b6000e7b3c8c4b08853",
        "files": [
          "src/apprentice.c",
          "src/ascmagic.c",
          "src/buffer.c",
          "src/cdf.c",
          "src/cdf.h",
          "src/cdf_time.c",
          "src/compress.c",
          "src/der.c",
          "src/elfclass.h",
          "src/encoding.c",
          "src/file.c",
          "src/funcs.c",
          "src/is_tar.c",
          "src/magic.c",
          "src/print.c",
          "src/readcdf.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "use c++ casts everywhere.",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/ascmagic.c||src/ascmagic.c",
          "src/buffer.c||src/buffer.c",
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h",
          "src/cdf_time.c||src/cdf_time.c",
          "src/compress.c||src/compress.c",
          "src/der.c||src/der.c",
          "src/elfclass.h||src/elfclass.h",
          "src/encoding.c||src/encoding.c",
          "src/file.c||src/file.c",
          "src/funcs.c||src/funcs.c",
          "src/is_tar.c||src/is_tar.c",
          "src/magic.c||src/magic.c",
          "src/print.c||src/print.c",
          "src/readcdf.c||src/readcdf.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.282 2018/10/19 00:26:26 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.283 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: #include <limits.h>",
          "",
          "[Removed Lines]",
          "55: #define EATAB {while (isascii((unsigned char) *l) && \\",
          "56:         isspace((unsigned char) *l))  ++l;}",
          "57: #define LOWCASE(l) (isupper((unsigned char) (l)) ? \\",
          "58:    tolower((unsigned char) (l)) : (l))",
          "",
          "[Added Lines]",
          "55: #define EATAB {while (isascii(CAST(unsigned char, *l)) && \\",
          "56:         isspace(CAST(unsigned char, *l)))  ++l;}",
          "57: #define LOWCASE(l) (isupper(CAST(unsigned char, l)) ? \\",
          "58:    tolower(CAST(unsigned char, l)) : (l))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74: #define MAP_FILE 0",
          "75: #endif",
          "80: #define MAP_TYPE_USER 0",
          "81: #define MAP_TYPE_MALLOC 1",
          "",
          "[Removed Lines]",
          "77: #define ALLOC_CHUNK (size_t)10",
          "78: #define ALLOC_INCR (size_t)200",
          "",
          "[Added Lines]",
          "77: #define ALLOC_CHUNK CAST(size_t, 10)",
          "78: #define ALLOC_INCR CAST(size_t, 200)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305: {",
          "306:  int type;",
          "309:   switch (l[1]) {",
          "310:   case 'C':",
          "",
          "[Removed Lines]",
          "308:  if (isalpha((unsigned char)l[1])) {",
          "",
          "[Added Lines]",
          "308:  if (isalpha(CAST(unsigned char, l[1]))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "340:    return FILE_INVALID;",
          "341:   }",
          "342:   l += 2;",
          "",
          "[Removed Lines]",
          "343:  } else if (isdigit((unsigned char)l[1])) {",
          "",
          "[Added Lines]",
          "343:  } else if (isdigit(CAST(unsigned char, l[1]))) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "356:    return FILE_INVALID;",
          "357:   }",
          "",
          "[Removed Lines]",
          "354:   if (isdigit((unsigned char)l[2])) {",
          "",
          "[Added Lines]",
          "354:   if (isdigit(CAST(unsigned char, l[2]))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "438:  if (magicsize != FILE_MAGICSIZE) {",
          "439:   file_error(ms, 0, \"magic element size %lu != %lu\",",
          "442:   return -1;",
          "443:  }",
          "",
          "[Removed Lines]",
          "440:       (unsigned long)sizeof(*map->magic[0]),",
          "441:       (unsigned long)FILE_MAGICSIZE);",
          "",
          "[Added Lines]",
          "440:       CAST(unsigned long, sizeof(*map->magic[0])),",
          "441:       CAST(unsigned long, FILE_MAGICSIZE));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "452: #ifndef COMPILE_ONLY",
          "453:  map = apprentice_map(ms, fn);",
          "455:   return -1;",
          "456:  if (map == NULL) {",
          "457:   if (ms->flags & MAGIC_CHECK)",
          "",
          "[Removed Lines]",
          "454:  if (map == (struct magic_map *)-1)",
          "",
          "[Added Lines]",
          "454:  if (map == RCAST(struct magic_map *, -1))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "503:  struct magic_set *ms;",
          "504:  size_t i, len;",
          "507:      sizeof(struct magic_set)))) == NULL)",
          "508:   return NULL;",
          "",
          "[Removed Lines]",
          "506:  if ((ms = CAST(struct magic_set *, calloc((size_t)1,",
          "",
          "[Added Lines]",
          "506:  if ((ms = CAST(struct magic_set *, calloc(CAST(size_t, 1u),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "831:  case FILE_LEDOUBLE:",
          "832:   return 8;",
          "833:  default:",
          "835:  }",
          "836: }",
          "",
          "[Removed Lines]",
          "834:   return (size_t)~0;",
          "",
          "[Added Lines]",
          "834:   return CAST(size_t, ~0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "886:  case FILE_BEDOUBLE:",
          "887:  case FILE_LEDOUBLE:",
          "888:   ts = typesize(m->type);",
          "890:    abort();",
          "891:   val += ts * MULT;",
          "892:   break;",
          "",
          "[Removed Lines]",
          "889:   if (ts == (size_t)~0)",
          "",
          "[Added Lines]",
          "889:   if (ts == CAST(size_t, ~0))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1101:    break;",
          "1105:       NULL) <= 0)",
          "1106:    mstart->flag |= BINTEST;",
          "1107:   else",
          "",
          "[Removed Lines]",
          "1104:   if (file_looks_utf8(m->value.us, (size_t)m->vallen, NULL,",
          "",
          "[Added Lines]",
          "1104:   if (file_looks_utf8(m->value.us, CAST(size_t, m->vallen), NULL,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1182:     size_t i;",
          "1184:     for (i = 0; bang[i].name != NULL; i++) {",
          "1186:          memcmp(bang[i].name, line + 2,",
          "1187:          bang[i].len) == 0)",
          "1188:       break;",
          "",
          "[Removed Lines]",
          "1185:      if ((size_t)(len - 2) > bang[i].len &&",
          "",
          "[Added Lines]",
          "1185:      if (CAST(size_t, len - 2) > bang[i].len &&",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1235: private int",
          "1236: cmpstrp(const void *p1, const void *p2)",
          "1237: {",
          "1239: }",
          "",
          "[Removed Lines]",
          "1238:         return strcmp(*(char *const *)p1, *(char *const *)p2);",
          "",
          "[Added Lines]",
          "1238:         return strcmp(*RCAST(char *const *, p1), *RCAST(char *const *, p2));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1261:   if (me[i].mp->flag & BINTEST) {",
          "1262:    char *p = strstr(me[i].mp->desc, text);",
          "1263:    if (p && (p == me[i].mp->desc ||",
          "1265:        (p + len - me[i].mp->desc == MAXstring",
          "1266:        || (p[len] == '\\0' ||",
          "1268:     (void)fprintf(stderr, \"*** Possible \"",
          "1269:         \"binary test for text type\\n\");",
          "1270:   }",
          "",
          "[Removed Lines]",
          "1264:        isspace((unsigned char)p[-1])) &&",
          "1267:        isspace((unsigned char)p[len]))))",
          "",
          "[Added Lines]",
          "1264:        isspace(CAST(unsigned char, p[-1]))) &&",
          "1267:        isspace(CAST(unsigned char, p[len])))))",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1462:   case FILE_BYTE:",
          "1464:    break;",
          "1465:   case FILE_SHORT:",
          "1466:   case FILE_BESHORT:",
          "1467:   case FILE_LESHORT:",
          "1469:    break;",
          "1470:   case FILE_DATE:",
          "1471:   case FILE_BEDATE:",
          "",
          "[Removed Lines]",
          "1463:    v = (signed char) v;",
          "1468:    v = (short) v;",
          "",
          "[Added Lines]",
          "1463:    v = CAST(signed char,  v);",
          "1468:    v = CAST(short, v);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1482:   case FILE_FLOAT:",
          "1483:   case FILE_BEFLOAT:",
          "1484:   case FILE_LEFLOAT:",
          "1486:    break;",
          "1487:   case FILE_QUAD:",
          "1488:   case FILE_BEQUAD:",
          "",
          "[Removed Lines]",
          "1485:    v = (int32_t) v;",
          "",
          "[Added Lines]",
          "1485:    v = CAST(int32_t, v);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1499:   case FILE_DOUBLE:",
          "1500:   case FILE_BEDOUBLE:",
          "1501:   case FILE_LEDOUBLE:",
          "1503:    break;",
          "1504:   case FILE_STRING:",
          "1505:   case FILE_PSTRING:",
          "",
          "[Removed Lines]",
          "1502:    v = (int64_t) v;",
          "",
          "[Added Lines]",
          "1502:    v = CAST(int64_t, v);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1627:  for (p = cond_tbl; p->len; p++) {",
          "1628:   if (strncmp(l, p->name, p->len) == 0 &&",
          "1630:    if (t)",
          "1632:    break;",
          "",
          "[Removed Lines]",
          "1629:       isspace((unsigned char)l[p->len])) {",
          "",
          "[Added Lines]",
          "1629:       isspace(CAST(unsigned char, l[p->len]))) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1684: {",
          "1685:  const char *l = *lp;",
          "1688:   switch (*l) {",
          "1689:   case CHAR_INDIRECT_RELATIVE:",
          "1690:    m->str_flags |= INDIRECT_RELATIVE;",
          "",
          "[Removed Lines]",
          "1687:  while (!isspace((unsigned char)*++l))",
          "",
          "[Added Lines]",
          "1687:  while (!isspace(CAST(unsigned char, *++l)))",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1711:  ++l;",
          "1712:  m->mask_op |= op;",
          "1714:  l = t;",
          "1715:  m->num_mask = file_signextend(ms, m, val);",
          "1716:  eatsize(&l);",
          "",
          "[Removed Lines]",
          "1713:  val = (uint64_t)strtoull(l, &t, 0);",
          "",
          "[Added Lines]",
          "1713:  val = CAST(uint64_t, strtoull(l, &t, 0));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1724:  char *t;",
          "1725:  int have_range = 0;",
          "1728:   switch (*l) {",
          "1729:   case '0':  case '1':  case '2':",
          "1730:   case '3':  case '4':  case '5':",
          "",
          "[Removed Lines]",
          "1727:  while (!isspace((unsigned char)*++l)) {",
          "",
          "[Added Lines]",
          "1727:  while (!isspace(CAST(unsigned char, *++l))) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1806:    goto out;",
          "1807:   }",
          "1810:    l++;",
          "1811:  }",
          "1812:  if (string_modifier_check(ms, m) == -1)",
          "",
          "[Removed Lines]",
          "1809:   if (l[1] == '/' && !isspace((unsigned char)l[2]))",
          "",
          "[Added Lines]",
          "1809:   if (l[1] == '/' && !isspace(CAST(unsigned char, l[2])))",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1861:    return -1;",
          "1862:   }",
          "1863:   m = &me->mp[me->cont_count - 1];",
          "1865:   if (diff > 1)",
          "1866:    file_magwarn(ms, \"New continuation level %u is more \"",
          "1867:        \"than one larger than current level %u\", cont_level,",
          "",
          "[Removed Lines]",
          "1864:   diff = (int32_t)cont_level - (int32_t)m->cont_level;",
          "",
          "[Added Lines]",
          "1864:   diff = CAST(int32_t, cont_level) - CAST(int32_t, m->cont_level);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1920:  }",
          "1924:         if (l == t) {",
          "1925:   if (ms->flags & MAGIC_CHECK)",
          "1926:    file_magwarn(ms, \"offset `%s' invalid\", l);",
          "",
          "[Removed Lines]",
          "1923:  m->offset = (int32_t)strtol(l, &t, 0);",
          "",
          "[Added Lines]",
          "1923:  m->offset = CAST(int32_t, strtol(l, &t, 0));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2018:    m->in_op |= FILE_OPINDIRECT;",
          "2019:    l++;",
          "2020:   }",
          "2023:    if (l == t) {",
          "2024:     if (ms->flags & MAGIC_CHECK)",
          "2025:      file_magwarn(ms,",
          "",
          "[Removed Lines]",
          "2021:   if (isdigit((unsigned char)*l) || *l == '-') {",
          "2022:    m->in_offset = (int32_t)strtol(l, &t, 0);",
          "",
          "[Added Lines]",
          "2021:   if (isdigit(CAST(unsigned char, *l)) || *l == '-') {",
          "2022:    m->in_offset = CAST(int32_t, strtol(l, &t, 0));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2083:    if (*l == 'd')",
          "2084:     m->type = get_standard_integer_type(l, &l);",
          "2086:     m->type = FILE_STRING;",
          "2087:     ++l;",
          "2088:    }",
          "",
          "[Removed Lines]",
          "2085:    else if (*l == 's' && !isalpha((unsigned char)l[1])) {",
          "",
          "[Added Lines]",
          "2085:    else if (*l == 's'",
          "2086:        && !isalpha(CAST(unsigned char, l[1]))) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2172:   break;",
          "2173:  default:",
          "2177:    m->reln = *l;",
          "2178:    ++l;",
          "2179:   }",
          "",
          "[Removed Lines]",
          "2175:   if (*l == 'x' && ((isascii((unsigned char)l[1]) &&",
          "2176:       isspace((unsigned char)l[1])) || !l[1])) {",
          "",
          "[Added Lines]",
          "2176:   if (*l == 'x' && ((isascii(CAST(unsigned char, l[1])) &&",
          "2177:       isspace(CAST(unsigned char, l[1]))) || !l[1])) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2270:   file_magwarn(ms, \"Too large factor `%lu'\", factor);",
          "2271:   goto out;",
          "2272:  }",
          "2274:   file_magwarn(ms, \"Bad factor `%s'\", l);",
          "2275:   goto out;",
          "2276:  }",
          "2278:  if (m->factor == 0 && m->factor_op == FILE_FACTOR_OP_DIV) {",
          "2279:   file_magwarn(ms, \"Cannot have factor op `%c' and factor %u\",",
          "2280:       m->factor_op, m->factor);",
          "",
          "[Removed Lines]",
          "2273:  if (*el && !isspace((unsigned char)*el)) {",
          "2277:  m->factor = (uint8_t)factor;",
          "",
          "[Added Lines]",
          "2274:  if (*el && !isspace(CAST(unsigned char, *el))) {",
          "2278:  m->factor = CAST(uint8_t, factor);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2305:  if (buf[0] != '\\0') {",
          "2306:   len = nt ? strlen(buf) : len;",
          "2307:   file_magwarn(ms, \"Current entry already has a %s type \"",
          "2309:   return -1;",
          "2310:  }",
          "",
          "[Removed Lines]",
          "2308:       \"`%.*s', new type `%s'\", name, (int)len, buf, l);",
          "",
          "[Added Lines]",
          "2309:       \"`%.*s', new type `%s'\", name, CAST(int, len), buf, l);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2326:    file_magwarn(ms, \"%s type `%s' truncated %\"",
          "2327:        SIZE_T_FORMAT \"u\", name, line, i);",
          "2328:  } else {",
          "2330:    file_magwarn(ms, \"%s type `%s' has bad char '%c'\",",
          "2331:        name, line, *l);",
          "2332:   if (nt)",
          "",
          "[Removed Lines]",
          "2329:   if (!isspace((unsigned char)*l) && !goodchar(*l, extra))",
          "",
          "[Added Lines]",
          "2330:   if (!isspace(CAST(unsigned char, *l)) && !goodchar(*l, extra))",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2428:   if (*ptr == '#')",
          "2429:    ptr++;",
          "2430: #define CHECKLEN() do { \\",
          "2432:   len = len * 10 + (*ptr - '0'); \\",
          "2433:  if (cnt > 5 || len > 1024) \\",
          "2434:   goto toolong; \\",
          "",
          "[Removed Lines]",
          "2431:  for (len = cnt = 0; isdigit((unsigned char)*ptr); ptr++, cnt++) \\",
          "",
          "[Added Lines]",
          "2432:  for (len = cnt = 0; isdigit(CAST(unsigned char, *ptr)); ptr++, cnt++) \\",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2546:  case FILE_FMT_STR:",
          "2547:   if (*ptr == '-')",
          "2548:    ptr++;",
          "2550:    ptr++;",
          "2551:   if (*ptr == '.') {",
          "2552:    ptr++;",
          "2554:     ptr++;",
          "2555:   }",
          "",
          "[Removed Lines]",
          "2549:   while (isdigit((unsigned char )*ptr))",
          "2553:    while (isdigit((unsigned char )*ptr))",
          "",
          "[Added Lines]",
          "2550:   while (isdigit(CAST(unsigned char, *ptr)))",
          "2554:    while (isdigit(CAST(unsigned char , *ptr)))",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2695:   return 0;",
          "2696:  default:",
          "2697:   errno = 0;",
          "2699:   m->value.q = file_signextend(ms, m, ull);",
          "2700:   if (*p == ep) {",
          "2701:    file_magwarn(ms, \"Unparseable number `%s'\", *p);",
          "",
          "[Removed Lines]",
          "2698:   ull = (uint64_t)strtoull(*p, &ep, 0);",
          "",
          "[Added Lines]",
          "2699:   ull = CAST(uint64_t, strtoull(*p, &ep, 0));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2704:    uint64_t x;",
          "2705:    const char *q;",
          "2708:     file_magwarn(ms,",
          "2709:         \"Expected numeric type got `%s'\",",
          "2710:         type_tbl[m->type].name);",
          "2711:    }",
          "2713:     continue;",
          "2714:    if (*q == '-')",
          "2716:    switch (ts) {",
          "2717:    case 1:",
          "2719:     break;",
          "2720:    case 2:",
          "2722:     break;",
          "2723:    case 4:",
          "2725:     break;",
          "2726:    case 8:",
          "2727:     x = 0;",
          "",
          "[Removed Lines]",
          "2707:    if (ts == (size_t)~0) {",
          "2712:    for (q = *p; isspace((unsigned char)*q); q++)",
          "2715:     ull = -(int64_t)ull;",
          "2718:     x = (uint64_t)(ull & ~0xffULL);",
          "2721:     x = (uint64_t)(ull & ~0xffffULL);",
          "2724:     x = (uint64_t)(ull & ~0xffffffffULL);",
          "",
          "[Added Lines]",
          "2708:    if (ts == CAST(size_t, ~0)) {",
          "2713:    for (q = *p; isspace(CAST(unsigned char, *q)); q++)",
          "2716:     ull = -CAST(int64_t, ull);",
          "2719:     x = CAST(uint64_t, ull & ~0xffULL);",
          "2722:     x = CAST(uint64_t, ull & ~0xffffULL);",
          "2725:     x = CAST(uint64_t, ull & ~0xffffffffULL);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2761:  int val;",
          "2763:  while ((c = *s++) != '\\0') {",
          "2765:    break;",
          "2766:   if (p >= pmax) {",
          "2767:    file_error(ms, 0, \"string too long: `%s'\", origs);",
          "",
          "[Removed Lines]",
          "2764:   if (isspace((unsigned char) c))",
          "",
          "[Added Lines]",
          "2765:   if (isspace(CAST(unsigned char, c)))",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2786:    default:",
          "2787:     if (warn) {",
          "2791:       if (strchr(\"<>&^=!\", c) == NULL",
          "",
          "[Removed Lines]",
          "2788:      if (isprint((unsigned char)c)) {",
          "",
          "[Added Lines]",
          "2789:      if (isprint(CAST(unsigned char, c))) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2891:       --s;",
          "2892:     } else",
          "2893:      --s;",
          "2895:     break;",
          "2896:    }",
          "2897:   } else",
          "2899:  }",
          "2900:  --s;",
          "2901: out:",
          "2903:  m->vallen = CAST(unsigned char, (p - origp));",
          "2904:  if (m->type == FILE_PSTRING)",
          "2906:  return s;",
          "2907: }",
          "",
          "[Removed Lines]",
          "2905:   m->vallen += (unsigned char)file_pstring_length_size(m);",
          "",
          "[Added Lines]",
          "2906:   m->vallen += CAST(unsigned char, file_pstring_length_size(m));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2911: private int",
          "2912: hextoint(int c)",
          "2913: {",
          "2915:   return -1;",
          "2917:   return c - '0';",
          "2918:  if ((c >= 'a') && (c <= 'f'))",
          "2919:   return c + 10 - 'a';",
          "",
          "[Removed Lines]",
          "2914:  if (!isascii((unsigned char) c))",
          "2916:  if (isdigit((unsigned char) c))",
          "",
          "[Added Lines]",
          "2915:  if (!isascii(CAST(unsigned char, c)))",
          "2917:  if (isdigit(CAST(unsigned char, c)))",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3068:   goto error;",
          "3069:  }",
          "3072: #ifdef QUICK",
          "3073:  map->type = MAP_TYPE_MMAP;",
          "3076:   file_error(ms, errno, \"cannot map `%s'\", dbname);",
          "3077:   goto error;",
          "3078:  }",
          "",
          "[Removed Lines]",
          "3071:  map->len = (size_t)st.st_size;",
          "3074:  if ((map->p = mmap(0, (size_t)st.st_size, PROT_READ|PROT_WRITE,",
          "3075:      MAP_PRIVATE|MAP_FILE, fd, (off_t)0)) == MAP_FAILED) {",
          "",
          "[Added Lines]",
          "3072:  map->len = CAST(size_t, st.st_size);",
          "3075:  if ((map->p = mmap(0, CAST(size_t, st.st_size), PROT_READ|PROT_WRITE,",
          "3076:      MAP_PRIVATE|MAP_FILE, fd, CAST(off_t, 0))) == MAP_FAILED) {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3092:  fd = -1;",
          "3094:  if (check_buffer(ms, map, dbname) != 0) {",
          "3096:   goto error;",
          "3097:  }",
          "3098: #ifdef QUICK",
          "3100:   file_error(ms, errno, \"cannot mprotect `%s'\", dbname);",
          "3101:   goto error;",
          "3102:  }",
          "",
          "[Removed Lines]",
          "3095:   rv = (struct magic_map *)-1;",
          "3099:  if (mprotect(map->p, (size_t)st.st_size, PROT_READ) == -1) {",
          "",
          "[Added Lines]",
          "3096:   rv = RCAST(struct magic_map *, -1);",
          "3100:  if (mprotect(map->p, CAST(size_t, st.st_size), PROT_READ) == -1) {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3140:       VERSIONNO, dbname, version);",
          "3141:   return -1;",
          "3142:  }",
          "3144:  if ((entries * sizeof(struct magic)) != map->len) {",
          "3145:   file_error(ms, 0, \"Size of `%s' %\" SIZE_T_FORMAT \"u is not \"",
          "3146:       \"a multiple of %\" SIZE_T_FORMAT \"u\",",
          "",
          "[Removed Lines]",
          "3143:  entries = (uint32_t)(map->len / sizeof(struct magic));",
          "",
          "[Added Lines]",
          "3144:  entries = CAST(uint32_t, map->len / sizeof(struct magic));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3202:  hdr.h[1] = VERSIONNO;",
          "3203:  memcpy(hdr.h + 2, map->nmagic, nm);",
          "3206:   file_error(ms, errno, \"error writing `%s'\", dbname);",
          "3207:   goto out2;",
          "3208:  }",
          "3210:  for (i = 0; i < MAGIC_SETS; i++) {",
          "3211:   len = m * map->nmagic[i];",
          "3213:    file_error(ms, errno, \"error writing `%s'\", dbname);",
          "3214:    goto out2;",
          "3215:   }",
          "",
          "[Removed Lines]",
          "3205:  if (write(fd, &hdr, sizeof(hdr)) != (ssize_t)sizeof(hdr)) {",
          "3212:   if (write(fd, map->magic[i], len) != (ssize_t)len) {",
          "",
          "[Added Lines]",
          "3206:  if (write(fd, &hdr, sizeof(hdr)) != CAST(ssize_t, sizeof(hdr))) {",
          "3213:   if (write(fd, map->magic[i], len) != CAST(ssize_t, len)) {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3255:  q++;",
          "3257:  if (ms->flags & MAGIC_MIME) {",
          "3259:    return NULL;",
          "3260:   if (access(buf, R_OK) != -1) {",
          "3261:    ms->flags &= MAGIC_MIME_TYPE;",
          "",
          "[Removed Lines]",
          "3258:   if (asprintf(&buf, \"%.*s.mime%s\", (int)(q - fn), fn, ext) < 0)",
          "",
          "[Added Lines]",
          "3259:   if (asprintf(&buf, \"%.*s.mime%s\", CAST(int, q - fn), fn, ext)",
          "3260:       < 0)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3263:   }",
          "3264:   free(buf);",
          "3265:  }",
          "3267:   return NULL;",
          "",
          "[Removed Lines]",
          "3266:  if (asprintf(&buf, \"%.*s%s\", (int)(q - fn), fn, ext) < 0)",
          "",
          "[Added Lines]",
          "3268:  if (asprintf(&buf, \"%.*s%s\", CAST(int, q - fn), fn, ext) < 0)",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3290: swap2(uint16_t sv)",
          "3291: {",
          "3292:  uint16_t rv;",
          "3295:  d[0] = s[1];",
          "3296:  d[1] = s[0];",
          "3297:  return rv;",
          "",
          "[Removed Lines]",
          "3293:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "3294:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "[Added Lines]",
          "3295:  uint8_t *s = RCAST(uint8_t *, RCAST(void *, &sv));",
          "3296:  uint8_t *d = RCAST(uint8_t *, RCAST(void *, &rv));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3304: swap4(uint32_t sv)",
          "3305: {",
          "3306:  uint32_t rv;",
          "3309:  d[0] = s[3];",
          "3310:  d[1] = s[2];",
          "3311:  d[2] = s[1];",
          "",
          "[Removed Lines]",
          "3307:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "3308:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "[Added Lines]",
          "3309:  uint8_t *s = RCAST(uint8_t *, RCAST(void *, &sv));",
          "3310:  uint8_t *d = RCAST(uint8_t *, RCAST(void *, &rv));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3320: swap8(uint64_t sv)",
          "3321: {",
          "3322:  uint64_t rv;",
          "3325: #if 0",
          "3326:  d[0] = s[3];",
          "3327:  d[1] = s[2];",
          "",
          "[Removed Lines]",
          "3323:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "3324:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "[Added Lines]",
          "3325:  uint8_t *s = RCAST(uint8_t *, RCAST(void *, &sv));",
          "3326:  uint8_t *d = RCAST(uint8_t *, RCAST(void *, &rv));",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3351: bs1(struct magic *m)",
          "3352: {",
          "3353:  m->cont_level = swap2(m->cont_level);",
          "3357:  if (IS_STRING(m->type)) {",
          "3358:   m->str_range = swap4(m->str_range);",
          "3359:   m->str_flags = swap4(m->str_flags);",
          "",
          "[Removed Lines]",
          "3354:  m->offset = swap4((uint32_t)m->offset);",
          "3355:  m->in_offset = swap4((uint32_t)m->in_offset);",
          "3356:  m->lineno = swap4((uint32_t)m->lineno);",
          "",
          "[Added Lines]",
          "3356:  m->offset = swap4(CAST(uint32_t, m->offset));",
          "3357:  m->in_offset = swap4(CAST(uint32_t, m->in_offset));",
          "3358:  m->lineno = swap4(CAST(uint32_t, m->lineno));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3385: file_pstring_get_length(const struct magic *m, const char *ss)",
          "3386: {",
          "3387:  size_t len = 0;",
          "3389:  unsigned int s3, s2, s1, s0;",
          "3391:  switch (m->str_flags & PSTRING_LEN) {",
          "",
          "[Removed Lines]",
          "3388:  const unsigned char *s = (const unsigned char *)ss;",
          "",
          "[Added Lines]",
          "3390:  const unsigned char *s = RCAST(const unsigned char *, ss);",
          "",
          "---------------"
        ],
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.101 2018/11/27 17:34:32 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.102 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:  int n_nel = 0;",
          "128:  int executable = 0;",
          "131:  int has_long_lines = 0;",
          "133:  nbytes = trim_nuls(buf, nbytes);",
          "",
          "[Removed Lines]",
          "130:  size_t last_line_end = (size_t)-1;",
          "",
          "[Added Lines]",
          "130:  size_t last_line_end = CAST(size_t, -1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:       == NULL)",
          "152:    goto done;",
          "153:   buffer_init(&bb, b->fd, utf8_buf,",
          "156:   if ((rv = file_softmagic(ms, &bb, NULL, NULL,",
          "157:       TEXTTEST, text)) == 0)",
          "",
          "[Removed Lines]",
          "154:       (size_t)(utf8_end - utf8_buf));",
          "",
          "[Added Lines]",
          "154:       CAST(size_t, utf8_end - utf8_buf));",
          "",
          "---------------"
        ],
        "src/buffer.c||src/buffer.c": [
          "File: src/buffer.c -> src/buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: buffer.c,v 1.4 2018/02/21 21:26:00 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: buffer.c,v 1.5 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  struct buffer *b = CCAST(struct buffer *, bb);",
          "63:  if (b->elen != 0)",
          "66:  if (!S_ISREG(b->st.st_mode))",
          "67:   goto out;",
          "71:  if ((b->ebuf = malloc(b->elen)) == NULL)",
          "72:   goto out;",
          "",
          "[Removed Lines]",
          "64:   return b->elen == (size_t)~0 ? -1 : 0;",
          "69:  b->elen =  (size_t)b->st.st_size < b->flen ?",
          "70:      (size_t)b->st.st_size : b->flen;",
          "",
          "[Added Lines]",
          "64:   return b->elen == CAST(size_t, ~0) ? -1 : 0;",
          "69:  b->elen =  CAST(size_t, b->st.st_size) < b->flen ?",
          "70:      CAST(size_t, b->st.st_size) : b->flen;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:  return 0;",
          "81: out:",
          "83:  return -1;",
          "84: }",
          "",
          "[Removed Lines]",
          "82:  b->elen = (size_t)~0;",
          "",
          "[Added Lines]",
          "82:  b->elen = CAST(size_t, ~0);",
          "",
          "---------------"
        ],
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.113 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.114 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:  uint32_t u;",
          "67: } cdf_bo;",
          "74: #define CDF_TOLE(x) (/*CONSTCOND*/sizeof(x) == 2 ? \\",
          "75:        CDF_TOLE2(CAST(uint16_t, x)) : \\",
          "76:    (/*CONSTCOND*/sizeof(x) == 4 ? \\",
          "",
          "[Removed Lines]",
          "69: #define NEED_SWAP (cdf_bo.u == (uint32_t)0x01020304)",
          "71: #define CDF_TOLE8(x) ((uint64_t)(NEED_SWAP ? _cdf_tole8(x) : (uint64_t)(x)))",
          "72: #define CDF_TOLE4(x) ((uint32_t)(NEED_SWAP ? _cdf_tole4(x) : (uint32_t)(x)))",
          "73: #define CDF_TOLE2(x) ((uint16_t)(NEED_SWAP ? _cdf_tole2(x) : (uint16_t)(x)))",
          "",
          "[Added Lines]",
          "69: #define NEED_SWAP (cdf_bo.u == CAST(uint32_t, 0x01020304))",
          "71: #define CDF_TOLE8(x) \\",
          "72:     (CAST(uint64_t, NEED_SWAP ? _cdf_tole8(x) : CAST(uint64_t, x)))",
          "73: #define CDF_TOLE4(x) \\",
          "74:     (CAST(uint32_t, NEED_SWAP ? _cdf_tole4(x) : CAST(uint32_t, x)))",
          "75: #define CDF_TOLE2(x) \\",
          "76:     (CAST(uint16_t, NEED_SWAP ? _cdf_tole2(x) : CAST(uint16_t, x)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120: _cdf_tole2(uint16_t sv)",
          "121: {",
          "122:  uint16_t rv;",
          "125:  d[0] = s[1];",
          "126:  d[1] = s[0];",
          "127:  return rv;",
          "",
          "[Removed Lines]",
          "123:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "124:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "[Added Lines]",
          "126:  uint8_t *s = RCAST(uint8_t *, RCAST(void *, &sv));",
          "127:  uint8_t *d = RCAST(uint8_t *, RCAST(void *, &rv));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134: _cdf_tole4(uint32_t sv)",
          "135: {",
          "136:  uint32_t rv;",
          "139:  d[0] = s[3];",
          "140:  d[1] = s[2];",
          "141:  d[2] = s[1];",
          "",
          "[Removed Lines]",
          "137:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "138:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "[Added Lines]",
          "140:  uint8_t *s = RCAST(uint8_t *, RCAST(void *, &sv));",
          "141:  uint8_t *d = RCAST(uint8_t *, RCAST(void *, &rv));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150: _cdf_tole8(uint64_t sv)",
          "151: {",
          "152:  uint64_t rv;",
          "155:  d[0] = s[7];",
          "156:  d[1] = s[6];",
          "157:  d[2] = s[5];",
          "",
          "[Removed Lines]",
          "153:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "154:  uint8_t *d = (uint8_t *)(void *)&rv;",
          "",
          "[Added Lines]",
          "156:  uint8_t *s = RCAST(uint8_t *, RCAST(void *, &sv));",
          "157:  uint8_t *d = RCAST(uint8_t *, RCAST(void *, &rv));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "216:  h->h_min_size_standard_stream =",
          "217:      CDF_TOLE4(h->h_min_size_standard_stream);",
          "218:  h->h_secid_first_sector_in_short_sat =",
          "220:  h->h_num_sectors_in_short_sat =",
          "221:      CDF_TOLE4(h->h_num_sectors_in_short_sat);",
          "222:  h->h_secid_first_sector_in_master_sat =",
          "224:  h->h_num_sectors_in_master_sat =",
          "225:      CDF_TOLE4(h->h_num_sectors_in_master_sat);",
          "228: }",
          "230: void",
          "",
          "[Removed Lines]",
          "219:      CDF_TOLE4((uint32_t)h->h_secid_first_sector_in_short_sat);",
          "223:      CDF_TOLE4((uint32_t)h->h_secid_first_sector_in_master_sat);",
          "226:  for (i = 0; i < __arraycount(h->h_master_sat); i++)",
          "227:   h->h_master_sat[i] = CDF_TOLE4((uint32_t)h->h_master_sat[i]);",
          "",
          "[Added Lines]",
          "222:      CDF_TOLE4(CAST(uint32_t, h->h_secid_first_sector_in_short_sat));",
          "226:      CDF_TOLE4(CAST(uint32_t, h->h_secid_first_sector_in_master_sat));",
          "229:  for (i = 0; i < __arraycount(h->h_master_sat); i++) {",
          "230:   h->h_master_sat[i] =",
          "231:       CDF_TOLE4(CAST(uint32_t, h->h_master_sat[i]));",
          "232:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257: cdf_swap_dir(cdf_directory_t *d)",
          "258: {",
          "259:  d->d_namelen = CDF_TOLE2(d->d_namelen);",
          "263:  d->d_storage_uuid[0] = CDF_TOLE8(d->d_storage_uuid[0]);",
          "264:  d->d_storage_uuid[1] = CDF_TOLE8(d->d_storage_uuid[1]);",
          "265:  d->d_flags = CDF_TOLE4(d->d_flags);",
          "269:  d->d_size = CDF_TOLE4(d->d_size);",
          "270: }",
          "",
          "[Removed Lines]",
          "260:  d->d_left_child = CDF_TOLE4((uint32_t)d->d_left_child);",
          "261:  d->d_right_child = CDF_TOLE4((uint32_t)d->d_right_child);",
          "262:  d->d_storage = CDF_TOLE4((uint32_t)d->d_storage);",
          "266:  d->d_created = CDF_TOLE8((uint64_t)d->d_created);",
          "267:  d->d_modified = CDF_TOLE8((uint64_t)d->d_modified);",
          "268:  d->d_stream_first_sector = CDF_TOLE4((uint32_t)d->d_stream_first_sector);",
          "",
          "[Added Lines]",
          "265:  d->d_left_child = CDF_TOLE4(CAST(uint32_t, d->d_left_child));",
          "266:  d->d_right_child = CDF_TOLE4(CAST(uint32_t, d->d_right_child));",
          "267:  d->d_storage = CDF_TOLE4(CAST(uint32_t, d->d_storage));",
          "271:  d->d_created = CDF_TOLE8(CAST(uint64_t, d->d_created));",
          "272:  d->d_modified = CDF_TOLE8(CAST(uint64_t, d->d_modified));",
          "273:  d->d_stream_first_sector = CDF_TOLE4(",
          "274:      CAST(uint32_t, d->d_stream_first_sector));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "322: cdf_check_stream_offset(const cdf_stream_t *sst, const cdf_header_t *h,",
          "323:     const void *p, size_t tail, int line)",
          "324: {",
          "327:  size_t ss = cdf_check_stream(sst, h);",
          "330:   return 0;",
          "331:  DPRINTF((\"%d: offset begin %p < end %p || %\" SIZE_T_FORMAT \"u\"",
          "332:      \" > %\" SIZE_T_FORMAT \"u [%\" SIZE_T_FORMAT \"u %\"",
          "",
          "[Removed Lines]",
          "325:  const char *b = (const char *)sst->sst_tab;",
          "326:  const char *e = ((const char *)p) + tail;",
          "329:  if (e >= b && (size_t)(e - b) <= ss * sst->sst_len)",
          "",
          "[Added Lines]",
          "331:  const char *b = RCAST(const char *, sst->sst_tab);",
          "332:  const char *e = RCAST(const char *, p) + tail;",
          "335:  if (e >= b && CAST(size_t, e - b) <= ss * sst->sst_len)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "339: static ssize_t",
          "340: cdf_read(const cdf_info_t *info, off_t off, void *buf, size_t len)",
          "341: {",
          "345:   goto out;",
          "347:  if (info->i_buf != NULL && info->i_len >= siz) {",
          "348:   (void)memcpy(buf, &info->i_buf[off], len);",
          "350:  }",
          "352:  if (info->i_fd == -1)",
          "353:   goto out;",
          "356:   return -1;",
          "359: out:",
          "360:  errno = EINVAL;",
          "361:  return -1;",
          "",
          "[Removed Lines]",
          "342:  size_t siz = (size_t)off + len;",
          "344:  if ((off_t)(off + len) != (off_t)siz)",
          "349:   return (ssize_t)len;",
          "355:  if (pread(info->i_fd, buf, len, off) != (ssize_t)len)",
          "358:  return (ssize_t)len;",
          "",
          "[Added Lines]",
          "348:  size_t siz = CAST(size_t, off + len);",
          "350:  if (CAST(off_t, off + len) != CAST(off_t, siz))",
          "355:   return CAST(ssize_t, len);",
          "361:  if (pread(info->i_fd, buf, len, off) != CAST(ssize_t, len))",
          "364:  return CAST(ssize_t, len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "367:  char buf[512];",
          "369:  (void)memcpy(cdf_bo.s, \"\\01\\02\\03\\04\", 4);",
          "371:   return -1;",
          "372:  cdf_unpack_header(h, buf);",
          "373:  cdf_swap_header(h);",
          "",
          "[Removed Lines]",
          "370:  if (cdf_read(info, (off_t)0, buf, sizeof(buf)) == -1)",
          "",
          "[Added Lines]",
          "376:  if (cdf_read(info, CAST(off_t, 0), buf, sizeof(buf)) == -1)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "401:  size_t ss = CDF_SEC_SIZE(h);",
          "402:  size_t pos = CDF_SEC_POS(h, id);",
          "403:  assert(ss == len);",
          "405: }",
          "407: ssize_t",
          "",
          "[Removed Lines]",
          "404:  return cdf_read(info, (off_t)pos, ((char *)buf) + offs, len);",
          "",
          "[Added Lines]",
          "410:  return cdf_read(info, CAST(off_t, pos), RCAST(char *, buf) + offs, len);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "417:       pos + len, CDF_SEC_SIZE(h) * sst->sst_len));",
          "418:   goto out;",
          "419:  }",
          "422:  return len;",
          "423: out:",
          "424:  errno = EFTYPE;",
          "",
          "[Removed Lines]",
          "420:  (void)memcpy(((char *)buf) + offs,",
          "421:      ((const char *)sst->sst_tab) + pos, len);",
          "",
          "[Added Lines]",
          "426:  (void)memcpy(RCAST(char *, buf) + offs,",
          "427:      RCAST(const char *, sst->sst_tab) + pos, len);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "461:   if (h->h_master_sat[i] < 0)",
          "462:    break;",
          "463:   if (cdf_read_sector(info, sat->sat_tab, ss * i, ss, h,",
          "465:    DPRINTF((\"Reading sector %d\", h->h_master_sat[i]));",
          "466:    goto out1;",
          "467:   }",
          "",
          "[Removed Lines]",
          "464:       h->h_master_sat[i]) != (ssize_t)ss) {",
          "",
          "[Added Lines]",
          "470:       h->h_master_sat[i]) != CAST(ssize_t, ss)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "478:    DPRINTF((\"Reading master sector loop limit\"));",
          "479:    goto out3;",
          "480:   }",
          "482:    DPRINTF((\"Reading master sector %d\", mid));",
          "483:    goto out2;",
          "484:   }",
          "485:   for (k = 0; k < nsatpersec; k++, i++) {",
          "487:    if (sec < 0)",
          "488:     goto out;",
          "489:    if (i >= sat->sat_len) {",
          "",
          "[Removed Lines]",
          "481:   if (cdf_read_sector(info, msa, 0, ss, h, mid) != (ssize_t)ss) {",
          "486:    sec = CDF_TOLE4((uint32_t)msa[k]);",
          "",
          "[Added Lines]",
          "487:   if (cdf_read_sector(info, msa, 0, ss, h, mid) !=",
          "488:       CAST(ssize_t, ss)) {",
          "493:    sec = CDF_TOLE4(CAST(uint32_t, msa[k]));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "493:        goto out3;",
          "494:    }",
          "495:    if (cdf_read_sector(info, sat->sat_tab, ss * i, ss, h,",
          "497:     DPRINTF((\"Reading sector %d\",",
          "498:         CDF_TOLE4(msa[k])));",
          "499:     goto out2;",
          "500:    }",
          "501:   }",
          "503:  }",
          "504: out:",
          "505:  sat->sat_len = i;",
          "",
          "[Removed Lines]",
          "496:        sec) != (ssize_t)ss) {",
          "502:   mid = CDF_TOLE4((uint32_t)msa[nsatpersec]);",
          "",
          "[Added Lines]",
          "503:        sec) != CAST(ssize_t, ss)) {",
          "509:   mid = CDF_TOLE4(CAST(uint32_t, msa[nsatpersec]));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "518: cdf_count_chain(const cdf_sat_t *sat, cdf_secid_t sid, size_t size)",
          "519: {",
          "520:  size_t i, j;",
          "522:      / sizeof(maxsector));",
          "524:  DPRINTF((\"Chain:\"));",
          "",
          "[Removed Lines]",
          "521:  cdf_secid_t maxsector = (cdf_secid_t)((sat->sat_len * size)",
          "",
          "[Added Lines]",
          "528:  cdf_secid_t maxsector = CAST(cdf_secid_t, (sat->sat_len * size)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "538:    DPRINTF((\"Sector %d >= %d\\n\", sid, maxsector));",
          "539:    goto out;",
          "540:   }",
          "542:  }",
          "543:  if (i == 0) {",
          "544:   DPRINTF((\" none, sid: %d\\n\", sid));",
          "",
          "[Removed Lines]",
          "541:   sid = CDF_TOLE4((uint32_t)sat->sat_tab[sid]);",
          "",
          "[Added Lines]",
          "548:   sid = CDF_TOLE4(CAST(uint32_t, sat->sat_tab[sid]));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "549:  return i;",
          "550: out:",
          "551:  errno = EFTYPE;",
          "553: }",
          "555: int",
          "",
          "[Removed Lines]",
          "552:  return (size_t)-1;",
          "",
          "[Added Lines]",
          "559:  return CAST(size_t, -1);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "566:  if (sid == CDF_SECID_END_OF_CHAIN || len == 0)",
          "567:   return cdf_zero_stream(scn);",
          "570:   goto out;",
          "572:  scn->sst_tab = CDF_CALLOC(scn->sst_len, ss);",
          "",
          "[Removed Lines]",
          "569:  if (scn->sst_len == (size_t)-1)",
          "",
          "[Added Lines]",
          "576:  if (scn->sst_len == CAST(size_t, -1))",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "585:    goto out;",
          "586:   }",
          "587:   if ((nr = cdf_read_sector(info, scn->sst_tab, i * ss, ss, h,",
          "589:    if (i == scn->sst_len - 1 && nr > 0) {",
          "591:     return 0;",
          "",
          "[Removed Lines]",
          "588:       sid)) != (ssize_t)ss) {",
          "",
          "[Added Lines]",
          "595:       sid)) != CAST(ssize_t, ss)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "593:    DPRINTF((\"Reading long sector chain %d\", sid));",
          "594:    goto out;",
          "595:   }",
          "597:  }",
          "598:  return 0;",
          "599: out:",
          "",
          "[Removed Lines]",
          "596:   sid = CDF_TOLE4((uint32_t)sat->sat_tab[sid]);",
          "",
          "[Added Lines]",
          "603:   sid = CDF_TOLE4(CAST(uint32_t, sat->sat_tab[sid]));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "612:  scn->sst_dirlen = len;",
          "613:  scn->sst_ss = ss;",
          "616:   goto out;",
          "618:  scn->sst_tab = CDF_CALLOC(scn->sst_len, ss);",
          "",
          "[Removed Lines]",
          "615:  if (scn->sst_len == (size_t)-1)",
          "",
          "[Added Lines]",
          "622:  if (scn->sst_len == CAST(size_t, -1))",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "631:    goto out;",
          "632:   }",
          "633:   if (cdf_read_short_sector(sst, scn->sst_tab, i * ss, ss, h,",
          "635:    DPRINTF((\"Reading short sector chain %d\", sid));",
          "636:    goto out;",
          "637:   }",
          "639:  }",
          "640:  return 0;",
          "641: out:",
          "",
          "[Removed Lines]",
          "634:       sid) != (ssize_t)ss) {",
          "638:   sid = CDF_TOLE4((uint32_t)ssat->sat_tab[sid]);",
          "",
          "[Added Lines]",
          "641:       sid) != CAST(ssize_t, ss)) {",
          "645:   sid = CDF_TOLE4(CAST(uint32_t, ssat->sat_tab[sid]));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "666:  cdf_secid_t sid = h->h_secid_first_directory;",
          "668:  ns = cdf_count_chain(sat, sid, ss);",
          "670:   return -1;",
          "672:  nd = ss / CDF_DIRECTORY_SIZE;",
          "",
          "[Removed Lines]",
          "669:  if (ns == (size_t)-1)",
          "",
          "[Added Lines]",
          "676:  if (ns == CAST(size_t, -1))",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "687:    DPRINTF((\"Read dir loop limit\"));",
          "688:    goto out;",
          "689:   }",
          "691:    DPRINTF((\"Reading directory sector %d\", sid));",
          "692:    goto out;",
          "693:   }",
          "",
          "[Removed Lines]",
          "690:   if (cdf_read_sector(info, buf, 0, ss, h, sid) != (ssize_t)ss) {",
          "",
          "[Added Lines]",
          "697:   if (cdf_read_sector(info, buf, 0, ss, h, sid) !=",
          "698:       CAST(ssize_t, ss)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "695:    cdf_unpack_dir(&dir->dir_tab[i * nd + j],",
          "696:        &buf[j * CDF_DIRECTORY_SIZE]);",
          "697:   }",
          "699:  }",
          "700:  if (NEED_SWAP)",
          "701:   for (i = 0; i < dir->dir_len; i++)",
          "",
          "[Removed Lines]",
          "698:   sid = CDF_TOLE4((uint32_t)sat->sat_tab[sid]);",
          "",
          "[Added Lines]",
          "706:   sid = CDF_TOLE4(CAST(uint32_t, sat->sat_tab[sid]));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "721:  ssat->sat_tab = NULL;",
          "722:  ssat->sat_len = cdf_count_chain(sat, sid, ss);",
          "724:   goto out;",
          "726:  ssat->sat_tab = CAST(cdf_secid_t *, CDF_CALLOC(ssat->sat_len, ss));",
          "",
          "[Removed Lines]",
          "723:  if (ssat->sat_len == (size_t)-1)",
          "",
          "[Added Lines]",
          "731:  if (ssat->sat_len == CAST(size_t, -1))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "739:    goto out;",
          "740:   }",
          "741:   if (cdf_read_sector(info, ssat->sat_tab, i * ss, ss, h, sid) !=",
          "743:    DPRINTF((\"Reading short sat sector %d\", sid));",
          "744:    goto out1;",
          "745:   }",
          "747:  }",
          "748:  return 0;",
          "749: out:",
          "",
          "[Removed Lines]",
          "742:       (ssize_t)ss) {",
          "746:   sid = CDF_TOLE4((uint32_t)sat->sat_tab[sid]);",
          "",
          "[Added Lines]",
          "750:       CAST(ssize_t, ss)) {",
          "754:   sid = CDF_TOLE4(CAST(uint32_t, sat->sat_tab[sid]));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "793: {",
          "794:  for (; l--; d++, s++)",
          "795:   if (*d != CDF_TOLE2(*s))",
          "797:  return 0;",
          "798: }",
          "",
          "[Removed Lines]",
          "796:    return (unsigned char)*d - CDF_TOLE2(*s);",
          "",
          "[Added Lines]",
          "804:    return CAST(unsigned char, *d) - CDF_TOLE2(*s);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "924:  if (inp->pi_type & CDF_VECTOR)",
          "925:   return 0;",
          "928:   return 0;",
          "930:  (void)memcpy(&inp->pi_val, p, len);",
          "",
          "[Removed Lines]",
          "927:  if ((size_t)(CAST(const char *, e) - CAST(const char *, p)) < len)",
          "",
          "[Added Lines]",
          "935:  if (CAST(size_t, CAST(const char *, e) - CAST(const char *, p)) < len)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1110:  const cdf_summary_info_header_t *si =",
          "1111:      CAST(const cdf_summary_info_header_t *, sst->sst_tab);",
          "1112:  const cdf_section_declaration_t *sd =",
          "1116:  if (cdf_check_stream_offset(sst, h, si, sizeof(*si), __LINE__) == -1 ||",
          "1117:      cdf_check_stream_offset(sst, h, sd, sizeof(*sd), __LINE__) == -1)",
          "",
          "[Removed Lines]",
          "1113:      CAST(const cdf_section_declaration_t *, (const void *)",
          "1114:      ((const char *)sst->sst_tab + CDF_SECTION_DECLARATION_OFFSET));",
          "",
          "[Added Lines]",
          "1121:      CAST(const cdf_section_declaration_t *, RCAST(const void *,",
          "1122:      RCAST(const char *, sst->sst_tab)",
          "1123:      + CDF_SECTION_DECLARATION_OFFSET));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1262:  int days, hours, mins, secs;",
          "1264:  ts /= CDF_TIME_PREC;",
          "1266:  ts /= 60;",
          "1268:  ts /= 60;",
          "1270:  ts /= 24;",
          "1273:  if (days) {",
          "1274:   len += snprintf(buf + len, bufsiz - len, \"%dd+\", days);",
          "1276:    return len;",
          "1277:  }",
          "1279:  if (days || hours) {",
          "1280:   len += snprintf(buf + len, bufsiz - len, \"%.2d:\", hours);",
          "1282:    return len;",
          "1283:  }",
          "1285:  len += snprintf(buf + len, bufsiz - len, \"%.2d:\", mins);",
          "1287:   return len;",
          "1289:  len += snprintf(buf + len, bufsiz - len, \"%.2d\", secs);",
          "",
          "[Removed Lines]",
          "1265:  secs = (int)(ts % 60);",
          "1267:  mins = (int)(ts % 60);",
          "1269:  hours = (int)(ts % 24);",
          "1271:  days = (int)ts;",
          "1275:   if ((size_t)len >= bufsiz)",
          "1281:   if ((size_t)len >= bufsiz)",
          "1286:  if ((size_t)len >= bufsiz)",
          "",
          "[Added Lines]",
          "1274:  secs = CAST(int, ts % 60);",
          "1276:  mins = CAST(int, ts % 60);",
          "1278:  hours = CAST(int, ts % 24);",
          "1280:  days = CAST(int, ts);",
          "1284:   if (CAST(size_t, len) >= bufsiz)",
          "1290:   if (CAST(size_t, len) >= bufsiz)",
          "1295:  if (CAST(size_t, len) >= bufsiz)",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1295: {",
          "1296:  size_t i;",
          "1297:  for (i = 0; i < len && p[i]; i++)",
          "1299:  buf[i] = '\\0';",
          "1300:  return buf;",
          "1301: }",
          "",
          "[Removed Lines]",
          "1298:   buf[i] = (char)p[i];",
          "",
          "[Added Lines]",
          "1307:   buf[i] = CAST(char, p[i]);",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:  cdf_secid_t h_master_sat[436/4];",
          "77: } cdf_header_t;",
          "80: #define CDF_SEC_POS(h, secid) (CDF_SEC_SIZE(h) + (secid) * CDF_SEC_SIZE(h))",
          "82: #define CDF_SHORT_SEC_POS(h, secid) ((secid) * CDF_SHORT_SEC_SIZE(h))",
          "84: typedef int32_t cdf_dirid_t;",
          "",
          "[Removed Lines]",
          "79: #define CDF_SEC_SIZE(h) ((size_t)(1 << (h)->h_sec_size_p2))",
          "81: #define CDF_SHORT_SEC_SIZE(h) ((size_t)(1 << (h)->h_short_sec_size_p2))",
          "",
          "[Added Lines]",
          "79: #define CDF_SEC_SIZE(h) CAST(size_t, 1 << (h)->h_sec_size_p2)",
          "81: #define CDF_SHORT_SEC_SIZE(h) CAST(size_t, 1 << (h)->h_short_sec_size_p2)",
          "",
          "---------------"
        ],
        "src/cdf_time.c||src/cdf_time.c": [
          "File: src/cdf_time.c -> src/cdf_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #include <time.h>",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.17 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: cdf_time.c,v 1.18 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   if (m == 1 && isleap(year))",
          "91:    days--;",
          "92:   if (days <= 0)",
          "94:  }",
          "96: }",
          "98: int",
          "",
          "[Removed Lines]",
          "93:    return (int)m;",
          "95:  return (int)m;",
          "",
          "[Added Lines]",
          "93:    return CAST(int, m);",
          "95:  return CAST(int, m);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:  ts->tv_nsec = (t % CDF_TIME_PREC) * 100;",
          "110:  t /= CDF_TIME_PREC;",
          "112:  t /= 60;",
          "115:  t /= 60;",
          "118:  t /= 24;",
          "123:  rdays = cdf_getdays(tm.tm_year);",
          "124:  t -= rdays - 1;",
          "127:  tm.tm_wday = 0;",
          "128:  tm.tm_yday = 0;",
          "129:  tm.tm_isdst = 0;",
          "",
          "[Removed Lines]",
          "111:  tm.tm_sec = (int)(t % 60);",
          "114:  tm.tm_min = (int)(t % 60);",
          "117:  tm.tm_hour = (int)(t % 24);",
          "121:  tm.tm_year = (int)(CDF_BASE_YEAR + (t / 365));",
          "125:  tm.tm_mday = cdf_getday(tm.tm_year, (int)t);",
          "126:  tm.tm_mon = cdf_getmonth(tm.tm_year, (int)t);",
          "",
          "[Added Lines]",
          "111:  tm.tm_sec = CAST(int, t % 60);",
          "114:  tm.tm_min = CAST(int, t % 60);",
          "117:  tm.tm_hour = CAST(int, t % 24);",
          "121:  tm.tm_year = CAST(int, CDF_BASE_YEAR + (t / 365));",
          "125:  tm.tm_mday = cdf_getday(tm.tm_year, CAST(int, t));",
          "126:  tm.tm_mon = cdf_getmonth(tm.tm_year, CAST(int, t));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:  if (ptr != NULL)",
          "173:   return buf;",
          "174:  (void)snprintf(buf, 26, \"*Bad* %#16.16\" INT64_T_FORMAT \"x\\n\",",
          "176:  return buf;",
          "177: }",
          "",
          "[Removed Lines]",
          "175:      (long long)*sec);",
          "",
          "[Added Lines]",
          "175:      CAST(long long, *sec));",
          "",
          "---------------"
        ],
        "src/compress.c||src/compress.c": [
          "File: src/compress.c -> src/compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.114 2018/10/19 00:26:26 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: compress.c,v 1.115 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:   (void)ioctl(fd, FIONREAD, &t);",
          "379:  }",
          "382:   n = t;",
          "383:   rn = n;",
          "384:  }",
          "",
          "[Removed Lines]",
          "381:  if (t > 0 && (size_t)t < n) {",
          "",
          "[Added Lines]",
          "381:  if (t > 0 && CAST(size_t, t) < n) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436:   return -1;",
          "437:  }",
          "440:   r = 1;",
          "441:  else {",
          "442:   while ((r = sread(fd, buf, sizeof(buf), 1)) > 0)",
          "444:     break;",
          "445:  }",
          "",
          "[Removed Lines]",
          "439:  if (swrite(tfd, startbuf, nbytes) != (ssize_t)nbytes)",
          "443:    if (swrite(tfd, buf, (size_t)r) != r)",
          "",
          "[Added Lines]",
          "439:  if (swrite(tfd, startbuf, nbytes) != CAST(ssize_t, nbytes))",
          "443:    if (swrite(tfd, buf, CAST(size_t, r)) != r)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "465:   return -1;",
          "466:  }",
          "467:  (void)close(tfd);",
          "469:   file_badseek(ms);",
          "470:   return -1;",
          "471:  }",
          "",
          "[Removed Lines]",
          "468:  if (lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) {",
          "",
          "[Added Lines]",
          "468:  if (lseek(fd, CAST(off_t, 0), SEEK_SET) == CAST(off_t, -1)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "553:  return OKDATA;",
          "554: err:",
          "557:  return ERRDATA;",
          "558: }",
          "559: #endif",
          "",
          "[Removed Lines]",
          "555:  strlcpy((char *)*newch, z.msg ? z.msg : zError(rc), bytes_max);",
          "",
          "[Added Lines]",
          "555:  strlcpy(RCAST(char *, *newch), z.msg ? z.msg : zError(rc), bytes_max);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "621:  switch (fork()) {",
          "623:   closefd(fdp[STDOUT_FILENO], 0);",
          "625:    DPRINTF(\"Write failed (%s)\\n\", strerror(errno));",
          "626:    exit(1);",
          "627:   }",
          "",
          "[Removed Lines]",
          "624:   if (swrite(fdp[STDIN_FILENO][1], old, n) != (ssize_t)n) {",
          "",
          "[Added Lines]",
          "624:   if (swrite(fdp[STDIN_FILENO][1], old, n) != CAST(ssize_t, n)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "650:  char *buf;",
          "652:  ubuf[n] = '\\0';",
          "655:   buf++;",
          "656:  DPRINTF(\"Filter error[[[%s]]]\\n\", buf);",
          "662:   ++p;",
          "664:    p++;",
          "665:   n = strlen(p);",
          "666:   memmove(ubuf, p, CAST(size_t, n + 1));",
          "",
          "[Removed Lines]",
          "653:  buf = (char *)ubuf;",
          "654:  while (isspace((unsigned char)*buf))",
          "657:  if ((p = strchr((char *)buf, '\\n')) != NULL)",
          "659:  if ((p = strchr((char *)buf, ';')) != NULL)",
          "661:  if ((p = strrchr((char *)buf, ':')) != NULL) {",
          "663:   while (isspace((unsigned char)*p))",
          "",
          "[Added Lines]",
          "653:  buf = RCAST(char *, ubuf);",
          "654:  while (isspace(CAST(unsigned char, *buf)))",
          "657:  if ((p = strchr(CAST(char *, buf), '\\n')) != NULL)",
          "659:  if ((p = strchr(CAST(char *, buf), ';')) != NULL)",
          "661:  if ((p = strrchr(CAST(char *, buf), ':')) != NULL) {",
          "663:   while (isspace(CAST(unsigned char, *p)))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "716:   if (fd != -1) {",
          "717:    fdp[STDIN_FILENO][0] = fd;",
          "719:   }",
          "721:   for (i = 0; i < __arraycount(fdp); i++)",
          "722:    copydesc(CAST(int, i), fdp[i]);",
          "724:   (void)execvp(compr[method].argv[0],",
          "726:   dprintf(STDERR_FILENO, \"exec `%s' failed, %s\",",
          "727:       compr[method].argv[0], strerror(errno));",
          "728:   exit(1);",
          "",
          "[Removed Lines]",
          "718:    (void) lseek(fd, (off_t)0, SEEK_SET);",
          "725:       (char *const *)(intptr_t)compr[method].argv);",
          "",
          "[Added Lines]",
          "718:    (void) lseek(fd, CAST(off_t, 0), SEEK_SET);",
          "725:       RCAST(char *const *, RCAST(intptr_t, compr[method].argv)));",
          "",
          "---------------"
        ],
        "src/der.c||src/der.c": [
          "File: src/der.c -> src/der.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "40: #endif",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: der.c,v 1.15 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: der.c,v 1.16 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: #include <err.h>",
          "57: #endif",
          "61: #define DER_CLASS_UNIVERSAL 0",
          "62: #define DER_CLASS_APPLICATION 1",
          "",
          "[Removed Lines]",
          "59: #define DER_BAD ((uint32_t)-1)",
          "",
          "[Added Lines]",
          "59: #define DER_BAD CAST(uint32_t, -1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:  case DER_TAG_UTF8_STRING:",
          "225:  case DER_TAG_IA5_STRING:",
          "226:  case DER_TAG_UTCTIME:",
          "228:  default:",
          "229:   break;",
          "230:  }",
          "",
          "[Removed Lines]",
          "227:   return snprintf(buf, blen, \"%.*s\", len, (const char *)q);",
          "",
          "[Added Lines]",
          "227:   return snprintf(buf, blen, \"%.*s\", len, RCAST(const char *, q));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "307:   s++;",
          "308:   goto val;",
          "309:  default:",
          "311:    return 0;",
          "313:   slen = 0;",
          "314:   do",
          "315:    slen = slen * 10 + *s - '0';",
          "317:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "318:    fprintf(stderr, \"%s: len %\" SIZE_T_FORMAT \"u %u\\n\",",
          "319:        __func__, slen, tlen);",
          "",
          "[Removed Lines]",
          "310:   if (!isdigit((unsigned char)*s))",
          "316:   while (isdigit((unsigned char)*++s));",
          "",
          "[Added Lines]",
          "310:   if (!isdigit(CAST(unsigned char, *s)))",
          "316:   while (isdigit(CAST(unsigned char, *++s)));",
          "",
          "---------------"
        ],
        "src/elfclass.h||src/elfclass.h": [
          "File: src/elfclass.h -> src/elfclass.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:    return toomany(ms, \"program headers\", phnum);",
          "42:   flags |= FLAGS_IS_CORE;",
          "43:   if (dophn_core(ms, clazz, swap, fd,",
          "46:       fsize, &flags, &notecount) == -1)",
          "47:    return -1;",
          "48:   break;",
          "",
          "[Removed Lines]",
          "44:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
          "45:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
          "",
          "[Added Lines]",
          "44:       CAST(off_t, elf_getu(swap, elfhdr.e_phoff)), phnum,",
          "45:       CAST(size_t, elf_getu16(swap, elfhdr.e_phentsize)),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   if (shnum > ms->elf_shnum_max)",
          "57:    return toomany(ms, \"section\", shnum);",
          "58:   if (dophn_exec(ms, clazz, swap, fd,",
          "61:       fsize, shnum, &flags, &notecount) == -1)",
          "62:    return -1;",
          "",
          "[Removed Lines]",
          "59:       (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,",
          "60:       (size_t)elf_getu16(swap, elfhdr.e_phentsize),",
          "",
          "[Added Lines]",
          "59:       CAST(off_t, elf_getu(swap, elfhdr.e_phoff)), phnum,",
          "60:       CAST(size_t, elf_getu16(swap, elfhdr.e_phentsize)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:   if (shnum > ms->elf_shnum_max)",
          "67:    return toomany(ms, \"section headers\", shnum);",
          "68:   if (doshn(ms, clazz, swap, fd,",
          "71:       fsize, elf_getu16(swap, elfhdr.e_machine),",
          "73:       &flags, &notecount) == -1)",
          "74:    return -1;",
          "75:   break;",
          "",
          "[Removed Lines]",
          "69:       (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,",
          "70:       (size_t)elf_getu16(swap, elfhdr.e_shentsize),",
          "72:       (int)elf_getu16(swap, elfhdr.e_shstrndx),",
          "",
          "[Added Lines]",
          "69:       CAST(off_t, elf_getu(swap, elfhdr.e_shoff)), shnum,",
          "70:       CAST(size_t, elf_getu16(swap, elfhdr.e_shentsize)),",
          "72:       CAST(int, elf_getu16(swap, elfhdr.e_shstrndx)),",
          "",
          "---------------"
        ],
        "src/encoding.c||src/encoding.c": [
          "File: src/encoding.c -> src/encoding.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: encoding.c,v 1.16 2019/02/19 20:30:35 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: encoding.c,v 1.17 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:  mlen = (nbytes + 1) * sizeof((*ubuf)[0]);",
          "93:   file_oomem(ms, mlen);",
          "94:   goto done;",
          "95:  }",
          "96:  mlen = (nbytes + 1) * sizeof(nbuf[0]);",
          "98:   file_oomem(ms, mlen);",
          "99:   goto done;",
          "100:  }",
          "",
          "[Removed Lines]",
          "92:  if ((*ubuf = CAST(unichar *, calloc((size_t)1, mlen))) == NULL) {",
          "97:  if ((nbuf = CAST(unsigned char *, calloc((size_t)1, mlen))) == NULL) {",
          "",
          "[Added Lines]",
          "92:  if ((*ubuf = CAST(unichar *, calloc(CAST(size_t, 1), mlen))) == NULL) {",
          "97:  if ((nbuf = CAST(unsigned char *, calloc(CAST(size_t, 1), mlen))) == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:   if (ubf[*ulen - 1] == 0xfffe)",
          "450:    return 0;",
          "451:   if (ubf[*ulen - 1] < 128 &&",
          "453:    return 0;",
          "454:  }",
          "",
          "[Removed Lines]",
          "452:       text_chars[(size_t)ubf[*ulen - 1]] != T)",
          "",
          "[Added Lines]",
          "452:       text_chars[CAST(size_t, ubf[*ulen - 1])] != T)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "488:   if (ubf[*ulen - 1] == 0xfffe)",
          "489:    return 0;",
          "490:   if (ubf[*ulen - 1] < 128 &&",
          "492:    return 0;",
          "493:  }",
          "",
          "[Removed Lines]",
          "491:       text_chars[(size_t)ubf[*ulen - 1]] != T)",
          "",
          "[Added Lines]",
          "491:       text_chars[CAST(size_t, ubf[*ulen - 1])] != T)",
          "",
          "---------------"
        ],
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.178 2018/10/01 18:50:31 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.179 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:  }",
          "401:  else {",
          "402:   size_t j, wid, nw;",
          "404:    nw = file_mbswidth(argv[j]);",
          "405:    if (nw > wid)",
          "406:     wid = nw;",
          "",
          "[Removed Lines]",
          "403:   for (wid = 0, j = (size_t)optind; j < (size_t)argc; j++) {",
          "",
          "[Added Lines]",
          "403:   for (wid = 0, j = CAST(size_t, optind); j < CAST(size_t, argc);",
          "404:       j++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "537:    (void)putc('\\0', stdout);",
          "538:   if (nulsep < 2) {",
          "539:    (void)printf(\"%s\", separator);",
          "543:   }",
          "544:  }",
          "",
          "[Removed Lines]",
          "540:    (void)printf(\"%*s \",",
          "541:        (int) (nopad ? 0 : (wid - file_mbswidth(inname))),",
          "542:        \"\");",
          "",
          "[Added Lines]",
          "541:    (void)printf(\"%*s \", CAST(int, nopad ? 0",
          "542:        : (wid - file_mbswidth(inname))), \"\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "567:  while (n > 0) {",
          "568:   bytesconsumed = mbrtowc(&nextchar, s, n, &state);",
          "572:    return old_n;",
          "573:   }",
          "",
          "[Removed Lines]",
          "569:   if (bytesconsumed == (size_t)(-1) ||",
          "570:       bytesconsumed == (size_t)(-2)) {",
          "",
          "[Added Lines]",
          "569:   if (bytesconsumed == CAST(size_t, -1) ||",
          "570:       bytesconsumed == CAST(size_t, -2)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "626:  for (sp = p - 1; sp > opts && *sp == ' '; sp--)",
          "627:   continue;",
          "631:  comma = 0;",
          "632:  for (i = 0; i < __arraycount(nv); i++) {",
          "633:   fprintf(stdout, \"%s%s\", comma++ ? \", \" : \"\", nv[i].name);",
          "634:   if (i && i % 5 == 0 && i != __arraycount(nv) - 1) {",
          "636:    comma = 0;",
          "637:   }",
          "638:  }",
          "",
          "[Removed Lines]",
          "629:  fprintf(stdout, \"%.*s\", (int)(p - opts), opts);",
          "635:    fprintf(stdout, \",\\n%*s\", (int)(p - sp - 1), \"\");",
          "",
          "[Added Lines]",
          "629:  fprintf(stdout, \"%.*s\", CAST(int, p - opts), opts);",
          "635:    fprintf(stdout, \",\\n%*s\", CAST(int, p - sp - 1), \"\");",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.101 2019/02/18 17:46:56 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.102 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:   while (op < eop) {",
          "442:    bytesconsumed = mbrtowc(&nextchar, op,",
          "446:     mb_conv = 0;",
          "447:     break;",
          "448:    }",
          "",
          "[Removed Lines]",
          "443:        (size_t)(eop - op), &state);",
          "444:    if (bytesconsumed == (size_t)(-1) ||",
          "445:        bytesconsumed == (size_t)(-2)) {",
          "",
          "[Added Lines]",
          "443:        CAST(size_t, eop - op), &state);",
          "444:    if (bytesconsumed == CAST(size_t, -1) ||",
          "445:        bytesconsumed == CAST(size_t, -2)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "465: #endif",
          "467:  for (np = ms->o.pbuf, op = ms->o.buf; *op;) {",
          "470:   } else {",
          "471:    OCTALIFY(np, op);",
          "",
          "[Removed Lines]",
          "468:   if (isprint((unsigned char)*op)) {",
          "",
          "[Added Lines]",
          "468:   if (isprint(CAST(unsigned char, *op))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "626: file_printable(char *buf, size_t bufsiz, const char *str, size_t slen)",
          "627: {",
          "628:  char *ptr, *eptr = buf + bufsiz - 1;",
          "630:  const unsigned char *es = s + slen;",
          "632:  for (ptr = buf;  ptr < eptr && s < es && *s; s++) {",
          "",
          "[Removed Lines]",
          "629:  const unsigned char *s = (const unsigned char *)str;",
          "",
          "[Added Lines]",
          "629:  const unsigned char *s = RCAST(const unsigned char *, str);",
          "",
          "---------------"
        ],
        "src/is_tar.c||src/is_tar.c": [
          "File: src/is_tar.c -> src/is_tar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include \"file.h\"",
          "42: #ifndef lint",
          "44: #endif",
          "46: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "43: FILE_RCSID(\"@(#)$File: is_tar.c,v 1.43 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "43: FILE_RCSID(\"@(#)$File: is_tar.c,v 1.44 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: private int",
          "99: is_tar(const unsigned char *buf, size_t nbytes)",
          "100: {",
          "102:  size_t i;",
          "103:  int sum, recsum;",
          "104:  const unsigned char *p, *ep;",
          "",
          "[Removed Lines]",
          "101:  const union record *header = (const union record *)(const void *)buf;",
          "",
          "[Added Lines]",
          "101:  const union record *header = RCAST(const union record *,",
          "102:      RCAST(const void *, buf));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:   digs--;",
          "159:  }",
          "164:  return value;",
          "",
          "[Removed Lines]",
          "161:  if (digs > 0 && *where && !isspace((unsigned char)*where))",
          "",
          "[Added Lines]",
          "162:  if (digs > 0 && *where && !isspace(CAST(unsigned char, *where)))",
          "",
          "---------------"
        ],
        "src/magic.c||src/magic.c": [
          "File: src/magic.c -> src/magic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"file.h\"",
          "35: #ifndef lint",
          "39: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.108 2018/12/11 21:10:33 christos Exp $\")",
          "",
          "[Added Lines]",
          "36: FILE_RCSID(\"@(#)$File: magic.c,v 1.109 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312: {",
          "313:  if (ms == NULL)",
          "314:   return -1;",
          "316: }",
          "317: #endif",
          "",
          "[Removed Lines]",
          "315:  return buffer_apprentice(ms, (struct magic **)bufs, sizes, nbufs);",
          "",
          "[Added Lines]",
          "315:  return buffer_apprentice(ms, RCAST(struct magic **, bufs),",
          "316:      sizes, nbufs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "405:  struct stat sb;",
          "407:  int ispipe = 0;",
          "410:  if (file_reset(ms, 1) == -1)",
          "411:   goto out;",
          "",
          "[Removed Lines]",
          "408:  off_t pos = (off_t)-1;",
          "",
          "[Added Lines]",
          "409:  off_t pos = CAST(off_t, -1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "464:   if (fstat(fd, &sb) == 0 && S_ISFIFO(sb.st_mode))",
          "465:    ispipe = 1;",
          "466:   if (inname == NULL)",
          "468:  }",
          "",
          "[Removed Lines]",
          "467:    pos = lseek(fd, (off_t)0, SEEK_CUR);",
          "",
          "[Added Lines]",
          "468:    pos = lseek(fd, CAST(off_t, 0), SEEK_CUR);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "473:  if (ispipe) {",
          "474:   ssize_t r = 0;",
          "478:    nbytes += r;",
          "479:    if (r < PIPE_BUF) break;",
          "480:   }",
          "",
          "[Removed Lines]",
          "476:   while ((r = sread(fd, (void *)&buf[nbytes],",
          "477:       (size_t)(ms->bytes_max - nbytes), 1)) > 0) {",
          "",
          "[Added Lines]",
          "477:   while ((r = sread(fd, RCAST(void *, &buf[nbytes]),",
          "478:       CAST(size_t, ms->bytes_max - nbytes), 1)) > 0) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "494:     _isatty(fd) ? 8 * 1024 :",
          "495: #endif",
          "496:     ms->bytes_max;",
          "498:    if (inname == NULL && fd != STDIN_FILENO)",
          "499:     file_error(ms, errno, \"cannot read fd %d\", fd);",
          "500:    else",
          "",
          "[Removed Lines]",
          "497:   if ((nbytes = read(fd, (char *)buf, howmany)) == -1) {",
          "",
          "[Added Lines]",
          "498:   if ((nbytes = read(fd, RCAST(void *, buf), howmany)) == -1) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "505:  }",
          "509:   goto done;",
          "510:  rv = 0;",
          "511: done:",
          "512:  free(buf);",
          "513:  if (fd != -1) {",
          "515:    (void)lseek(fd, pos, SEEK_SET);",
          "516:   close_and_restore(ms, inname, fd, &sb);",
          "517:  }",
          "",
          "[Removed Lines]",
          "508:  if (file_buffer(ms, fd, inname, buf, (size_t)nbytes) == -1)",
          "514:   if (pos != (off_t)-1)",
          "",
          "[Added Lines]",
          "509:  if (file_buffer(ms, fd, inname, buf, CAST(size_t, nbytes)) == -1)",
          "515:   if (pos != CAST(off_t, -1))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "589:   return -1;",
          "590:  switch (param) {",
          "591:  case MAGIC_PARAM_INDIR_MAX:",
          "593:   return 0;",
          "594:  case MAGIC_PARAM_NAME_MAX:",
          "596:   return 0;",
          "597:  case MAGIC_PARAM_ELF_PHNUM_MAX:",
          "599:   return 0;",
          "600:  case MAGIC_PARAM_ELF_SHNUM_MAX:",
          "602:   return 0;",
          "603:  case MAGIC_PARAM_ELF_NOTES_MAX:",
          "605:   return 0;",
          "606:  case MAGIC_PARAM_REGEX_MAX:",
          "608:   return 0;",
          "609:  case MAGIC_PARAM_BYTES_MAX:",
          "611:   return 0;",
          "612:  default:",
          "613:   errno = EINVAL;",
          "",
          "[Removed Lines]",
          "592:   ms->indir_max = (uint16_t)*(const size_t *)val;",
          "595:   ms->name_max = (uint16_t)*(const size_t *)val;",
          "598:   ms->elf_phnum_max = (uint16_t)*(const size_t *)val;",
          "601:   ms->elf_shnum_max = (uint16_t)*(const size_t *)val;",
          "604:   ms->elf_notes_max = (uint16_t)*(const size_t *)val;",
          "607:   ms->regex_max = (uint16_t)*(const size_t *)val;",
          "610:   ms->bytes_max = *(const size_t *)val;",
          "",
          "[Added Lines]",
          "593:   ms->indir_max = CAST(uint16_t, *CAST(const size_t *, val));",
          "596:   ms->name_max = CAST(uint16_t, *CAST(const size_t *, val));",
          "599:   ms->elf_phnum_max = CAST(uint16_t, *CAST(const size_t *, val));",
          "602:   ms->elf_shnum_max = CAST(uint16_t, *CAST(const size_t *, val));",
          "605:   ms->elf_notes_max = CAST(uint16_t, *CAST(const size_t *, val));",
          "608:   ms->regex_max = CAST(uint16_t, *CAST(const size_t *, val));",
          "611:   ms->bytes_max = *CAST(const size_t *, val);",
          "",
          "---------------"
        ],
        "src/print.c||src/print.c": [
          "File: src/print.c -> src/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include <string.h>",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: print.c,v 1.83 2018/09/09 20:33:28 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: print.c,v 1.84 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   if (m->in_op & FILE_OPINVERSE)",
          "66:    (void) fputc('~', stderr);",
          "67:   (void) fprintf(stderr, \"%c%u),\",",
          "69:       SZOF(optyp)) ? optyp[m->in_op & FILE_OPS_MASK] : '?',",
          "70:       m->in_offset);",
          "71:  }",
          "",
          "[Removed Lines]",
          "68:       ((size_t)(m->in_op & FILE_OPS_MASK) <",
          "",
          "[Added Lines]",
          "68:       (CAST(size_t, m->in_op & FILE_OPS_MASK) <",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:    (void) fprintf(stderr, \"/%u\", m->str_range);",
          "113:  }",
          "114:  else {",
          "116:    (void) fputc(optyp[m->mask_op & FILE_OPS_MASK], stderr);",
          "117:   else",
          "118:    (void) fputc('?', stderr);",
          "120:   if (m->num_mask) {",
          "121:    (void) fprintf(stderr, \"%.8llx\",",
          "123:   }",
          "124:  }",
          "125:  (void) fprintf(stderr, \",%c\", m->reln);",
          "",
          "[Removed Lines]",
          "115:   if ((size_t)(m->mask_op & FILE_OPS_MASK) < SZOF(optyp))",
          "122:        (unsigned long long)m->num_mask);",
          "",
          "[Added Lines]",
          "115:   if (CAST(size_t, m->mask_op & FILE_OPS_MASK) < SZOF(optyp))",
          "122:        CAST(unsigned long long, m->num_mask));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:   case FILE_LEQUAD:",
          "142:   case FILE_QUAD:",
          "143:    (void) fprintf(stderr, \"%\" INT64_T_FORMAT \"d\",",
          "145:    break;",
          "146:   case FILE_PSTRING:",
          "147:   case FILE_STRING:",
          "",
          "[Removed Lines]",
          "144:        (unsigned long long)m->value.q);",
          "",
          "[Added Lines]",
          "144:        CAST(long long, m->value.q));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:   case FILE_BESTRING16:",
          "150:   case FILE_LESTRING16:",
          "151:   case FILE_SEARCH:",
          "153:    break;",
          "154:   case FILE_DATE:",
          "155:   case FILE_LEDATE:",
          "",
          "[Removed Lines]",
          "152:    file_showstr(stderr, m->value.s, (size_t)m->vallen);",
          "",
          "[Added Lines]",
          "152:    file_showstr(stderr, m->value.s,",
          "153:        CAST(size_t, m->vallen));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:  if (ms->file)",
          "223:   (void) fprintf(stderr, \"%s, %lu: \", ms->file,",
          "225:  (void) fprintf(stderr, \"Warning: \");",
          "226:  va_start(va, f);",
          "227:  (void) vfprintf(stderr, f, va);",
          "",
          "[Removed Lines]",
          "224:       (unsigned long)ms->line);",
          "",
          "[Added Lines]",
          "225:       CAST(unsigned long, ms->line));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "243:  } else {",
          "247:  }",
          "249:  if (flags & FILE_T_LOCAL) {",
          "",
          "[Removed Lines]",
          "246:   t = (time_t)v;",
          "",
          "[Added Lines]",
          "247:   t = CAST(time_t, v);",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.71 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.72 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:         && len--; s += k) {",
          "205:      if (*s == '\\0')",
          "206:       break;",
          "208:       vbuf[j++] = *s;",
          "209:     }",
          "210:     if (j == sizeof(vbuf))",
          "",
          "[Removed Lines]",
          "207:      if (isprint((unsigned char)*s))",
          "",
          "[Added Lines]",
          "207:      if (isprint(CAST(unsigned char, *s)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:   case 2:",
          "319:    if (file_printf(ms, \", Os: Windows, Version %d.%d\",",
          "320:        si.si_os_version & 0xff,",
          "322:     return -2;",
          "323:    break;",
          "324:   case 1:",
          "325:    if (file_printf(ms, \", Os: MacOS, Version %d.%d\",",
          "327:        si.si_os_version & 0xff) == -1)",
          "328:     return -2;",
          "329:    break;",
          "330:   default:",
          "331:    if (file_printf(ms, \", Os %d, Version: %d.%d\", si.si_os,",
          "332:        si.si_os_version & 0xff,",
          "334:     return -2;",
          "335:    break;",
          "336:   }",
          "",
          "[Removed Lines]",
          "321:        (uint32_t)si.si_os_version >> 8) == -1)",
          "326:        (uint32_t)si.si_os_version >> 8,",
          "333:        (uint32_t)si.si_os_version >> 8) == -1)",
          "",
          "[Added Lines]",
          "321:        CAST(uint32_t, si.si_os_version) >> 8) == -1)",
          "326:        CAST(uint32_t, si.si_os_version) >> 8,",
          "333:        CAST(uint32_t, si.si_os_version) >> 8) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "406:  for (j = 0; str == NULL && j < dir->dir_len; j++) {",
          "407:   d = &dir->dir_tab[j];",
          "408:   for (k = 0; k < sizeof(name); k++)",
          "410:   str = cdf_app_to_mime(name,",
          "411:           NOTMIME(ms) ? name2desc : name2mime);",
          "412:  }",
          "",
          "[Removed Lines]",
          "409:    name[k] = (char)cdf_tole2(d->d_name[k]);",
          "",
          "[Added Lines]",
          "409:    name[k] = CAST(char, cdf_tole2(d->d_name[k]));",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.161 2019/02/18 17:46:56 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.162 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:   }",
          "397:   offset = 0;",
          "398:   for (;;) {",
          "400:     break;",
          "402:        clazz, swap, 4, flags, notecount, fd, ph_off,",
          "403:        ph_num, fsize);",
          "404:    if (offset == 0)",
          "",
          "[Removed Lines]",
          "399:    if (offset >= (size_t)bufsize)",
          "401:    offset = donote(ms, nbuf, offset, (size_t)bufsize,",
          "",
          "[Added Lines]",
          "399:    if (offset >= CAST(size_t, bufsize))",
          "401:    offset = donote(ms, nbuf, offset, CAST(size_t, bufsize),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536:     int swap __attribute__((__unused__)), uint32_t namesz, uint32_t descsz,",
          "537:     size_t noff, size_t doff, int *flags)",
          "538: {",
          "540:      type == NT_GNU_BUILD_ID && (descsz >= 4 && descsz <= 20)) {",
          "541:   uint8_t desc[20];",
          "542:   const char *btype;",
          "",
          "[Removed Lines]",
          "539:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
          "",
          "[Added Lines]",
          "539:  if (namesz == 4 && strcmp(RCAST(char *, &nbuf[noff]), \"GNU\") == 0 &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "564:    return 1;",
          "565:   return 1;",
          "566:  }",
          "568:      type == NT_GO_BUILD_ID && descsz < 128) {",
          "569:   if (file_printf(ms, \", Go BuildID=%.*s\",",
          "571:    return -1;",
          "572:   return 1;",
          "573:  }",
          "",
          "[Removed Lines]",
          "567:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"Go\") == 0 &&",
          "570:       CAST(int, descsz), CAST(char *, &nbuf[doff])) == -1)",
          "",
          "[Added Lines]",
          "567:  if (namesz == 4 && strcmp(RCAST(char *, &nbuf[noff]), \"Go\") == 0 &&",
          "570:       CAST(int, descsz), RCAST(char *, &nbuf[doff])) == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "579:     int swap, uint32_t namesz, uint32_t descsz,",
          "580:     size_t noff, size_t doff, int *flags)",
          "581: {",
          "583:   type == NT_GNU_VERSION && descsz == 2) {",
          "585:   if (file_printf(ms, \", for SuSE %d.%d\", nbuf[doff],",
          "",
          "[Removed Lines]",
          "582:  if (namesz == 5 && strcmp((char *)&nbuf[noff], \"SuSE\") == 0 &&",
          "",
          "[Added Lines]",
          "582:  const char *name = RCAST(const char *, &nbuf[noff]);",
          "584:  if (namesz == 5 && strcmp(name, \"SuSE\") == 0 &&",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "588:      return 1;",
          "589:  }",
          "592:      type == NT_GNU_VERSION && descsz == 16) {",
          "593:   uint32_t desc[4];",
          "594:   memcpy(desc, &nbuf[doff], sizeof(desc));",
          "",
          "[Removed Lines]",
          "591:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
          "",
          "[Added Lines]",
          "593:  if (namesz == 4 && strcmp(name, \"GNU\") == 0 &&",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "627:   return 1;",
          "628:  }",
          "631:       if (type == NT_NETBSD_VERSION && descsz == 4) {",
          "633:    do_note_netbsd_version(ms, swap, &nbuf[doff]);",
          "",
          "[Removed Lines]",
          "630:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "",
          "[Added Lines]",
          "632:  if (namesz == 7 && strcmp(name, \"NetBSD\") == 0) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "635:   }",
          "636:  }",
          "639:       if (type == NT_FREEBSD_VERSION && descsz == 4) {",
          "641:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
          "",
          "[Removed Lines]",
          "638:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
          "",
          "[Added Lines]",
          "640:  if (namesz == 8 && strcmp(name, \"FreeBSD\") == 0) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "643:   }",
          "644:  }",
          "647:      type == NT_OPENBSD_VERSION && descsz == 4) {",
          "649:   if (file_printf(ms, \", for OpenBSD\") == -1)",
          "",
          "[Removed Lines]",
          "646:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
          "",
          "[Added Lines]",
          "648:  if (namesz == 8 && strcmp(name, \"OpenBSD\") == 0 &&",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "652:   return 1;",
          "653:  }",
          "656:      type == NT_DRAGONFLY_VERSION && descsz == 4) {",
          "657:   uint32_t desc;",
          "",
          "[Removed Lines]",
          "655:  if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&",
          "",
          "[Added Lines]",
          "657:  if (namesz == 10 && strcmp(name, \"DragonFly\") == 0 &&",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "673:     int swap, uint32_t namesz, uint32_t descsz,",
          "674:     size_t noff, size_t doff, int *flags)",
          "675: {",
          "677:      type == NT_NETBSD_PAX && descsz == 4) {",
          "678:   static const char *pax[] = {",
          "679:       \"+mprotect\",",
          "",
          "[Removed Lines]",
          "676:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"PaX\") == 0 &&",
          "",
          "[Added Lines]",
          "678:  const char *name = RCAST(const char *, &nbuf[noff]);",
          "680:  if (namesz == 4 && strcmp(name, \"PaX\") == 0 &&",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "695:    return 1;",
          "697:   for (i = 0; i < __arraycount(pax); i++) {",
          "699:     continue;",
          "700:    if (file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",",
          "701:        pax[i]) == -1)",
          "",
          "[Removed Lines]",
          "698:    if (((1 << (int)i) & desc) == 0)",
          "",
          "[Added Lines]",
          "702:    if (((1 << CAST(int, i)) & desc) == 0)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "712:     size_t noff, size_t doff, int *flags, size_t size, int clazz)",
          "713: {",
          "714: #ifdef ELFCORE",
          "715:  int os_style = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719:  const char *name = RCAST(const char *, &nbuf[noff]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "732:   os_style = OS_STYLE_SVR4;",
          "733:  }",
          "736:   os_style = OS_STYLE_FREEBSD;",
          "737:  }",
          "740:      == 0)) {",
          "741:   os_style = OS_STYLE_NETBSD;",
          "742:  }",
          "",
          "[Removed Lines]",
          "730:  if ((namesz == 4 && strncmp((char *)&nbuf[noff], \"CORE\", 4) == 0) ||",
          "731:      (namesz == 5 && strcmp((char *)&nbuf[noff], \"CORE\") == 0)) {",
          "735:  if ((namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0)) {",
          "739:  if ((namesz >= 11 && strncmp((char *)&nbuf[noff], \"NetBSD-CORE\", 11)",
          "",
          "[Added Lines]",
          "736:  if ((namesz == 4 && strncmp(name, \"CORE\", 4) == 0) ||",
          "737:      (namesz == 5 && strcmp(name, \"CORE\") == 0)) {",
          "741:  if ((namesz == 8 && strcmp(name, \"FreeBSD\") == 0)) {",
          "745:  if ((namesz >= 11 && strncmp(name, \"NetBSD-CORE\", 11)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "761:        \"gid=%u, nlwps=%u, lwp=%u (signal %u/code %u)\",",
          "762:        file_printable(sbuf, sizeof(sbuf),",
          "763:        RCAST(char *, pi.cpi_name), sizeof(pi.cpi_name)),",
          "765:        elf_getu32(swap, pi.cpi_euid),",
          "766:        elf_getu32(swap, pi.cpi_egid),",
          "767:        elf_getu32(swap, pi.cpi_nlwps),",
          "769:        elf_getu32(swap, pi.cpi_signo),",
          "770:        elf_getu32(swap, pi.cpi_sigcode)) == -1)",
          "771:     return 1;",
          "",
          "[Removed Lines]",
          "764:        elf_getu32(swap, (uint32_t)pi.cpi_pid),",
          "768:        elf_getu32(swap, (uint32_t)pi.cpi_siglwp),",
          "",
          "[Added Lines]",
          "770:        elf_getu32(swap, CAST(uint32_t, pi.cpi_pid)),",
          "774:        elf_getu32(swap, CAST(uint32_t, pi.cpi_siglwp)),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "879:       i = k;",
          "880:     }",
          "884:     for (cp = cname; cp < nbuf + size && *cp",
          "885:         && isprint(*cp); cp++)",
          "886:      continue;",
          "",
          "[Removed Lines]",
          "882:     cname = (unsigned char *)",
          "883:         &nbuf[doff + prpsoffsets(i)];",
          "",
          "[Added Lines]",
          "888:     cname = CAST(unsigned char *,",
          "889:         &nbuf[doff + prpsoffsets(i)]);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "891:     while (cp > cname && isspace(cp[-1]))",
          "892:      cp--;",
          "893:     if (file_printf(ms, \", from '%.*s'\",",
          "895:      return 1;",
          "897:     return 1;",
          "",
          "[Removed Lines]",
          "894:         (int)(cp - cname), cname) == -1)",
          "",
          "[Added Lines]",
          "900:         CAST(int, cp - cname), cname) == -1)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "920:  for ( ; num; num--) {",
          "922:    file_badread(ms);",
          "923:    return -1;",
          "924:   }",
          "",
          "[Removed Lines]",
          "921:   if (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {",
          "",
          "[Added Lines]",
          "927:   if (pread(fd, xph_addr, xph_sizeof, off) <",
          "928:       CAST(ssize_t, xph_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "962:   continue;",
          "963:  if (*bptr != '\\0')",
          "964:   return 0;",
          "",
          "[Removed Lines]",
          "961:  for (bptr = buf; *bptr && isprint((unsigned char)*bptr); bptr++)",
          "",
          "[Added Lines]",
          "968:  for (bptr = buf; *bptr && isprint(CAST(unsigned char, *bptr)); bptr++)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1064:    if (file_printf(ms, \", %s: '%s'\", tag, buf) == -1)",
          "1065:     return 0;",
          "1066:   } else {",
          "1069:     return 0;",
          "1070:   }",
          "1071:  }",
          "",
          "[Removed Lines]",
          "1067:    if (file_printf(ms, \", %s: %d\", tag, (int) xauxv_val)",
          "1068:        == -1)",
          "",
          "[Added Lines]",
          "1074:    if (file_printf(ms, \", %s: %d\", tag,",
          "1075:        CAST(int, xauxv_val)) == -1)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1662:    ms->mode &= ~0111;",
          "1663:    for (;;) {",
          "1665:      break;",
          "1666:     offset = dodynamic(ms, nbuf, offset,",
          "1667:         CAST(size_t, bufsize), clazz, swap);",
          "",
          "[Removed Lines]",
          "1664:     if (offset >= (size_t)bufsize)",
          "",
          "[Added Lines]",
          "1671:     if (offset >= CAST(size_t, bufsize))",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1673:   case PT_INTERP:",
          "1674:    if (bufsize && nbuf[0]) {",
          "1675:     nbuf[bufsize - 1] = '\\0';",
          "1677:    } else",
          "1678:     strlcpy(interp, \"*empty*\", sizeof(interp));",
          "1679:    break;",
          "",
          "[Removed Lines]",
          "1676:     memcpy(interp, nbuf, (size_t)bufsize);",
          "",
          "[Added Lines]",
          "1683:     memcpy(interp, nbuf, CAST(size_t, bufsize));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1685:    offset = 0;",
          "1686:    for (;;) {",
          "1688:      break;",
          "1689:     offset = donote(ms, nbuf, offset,",
          "1690:         CAST(size_t, bufsize), clazz, swap, align,",
          "",
          "[Removed Lines]",
          "1687:     if (offset >= (size_t)bufsize)",
          "",
          "[Added Lines]",
          "1694:     if (offset >= CAST(size_t, bufsize))",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.277 2019/02/18 17:46:56 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.278 2019/02/20 02:35:27 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: private int cvt_32(union VALUETYPE *, const struct magic *);",
          "68: private int cvt_64(union VALUETYPE *, const struct magic *);",
          "",
          "[Removed Lines]",
          "70: #define OFFSET_OOB(n, o, i) ((n) < (uint32_t)(o) || (i) > ((n) - (o)))",
          "71: #define BE64(p) (((uint64_t)(p)->hq[0]<<56)|((uint64_t)(p)->hq[1]<<48)| \\",
          "72:     ((uint64_t)(p)->hq[2]<<40)|((uint64_t)(p)->hq[3]<<32)| \\",
          "73:     ((uint64_t)(p)->hq[4]<<24)|((uint64_t)(p)->hq[5]<<16)| \\",
          "74:     ((uint64_t)(p)->hq[6]<<8)|((uint64_t)(p)->hq[7]))",
          "75: #define LE64(p) (((uint64_t)(p)->hq[7]<<56)|((uint64_t)(p)->hq[6]<<48)| \\",
          "76:     ((uint64_t)(p)->hq[5]<<40)|((uint64_t)(p)->hq[4]<<32)| \\",
          "77:     ((uint64_t)(p)->hq[3]<<24)|((uint64_t)(p)->hq[2]<<16)| \\",
          "78:     ((uint64_t)(p)->hq[1]<<8)|((uint64_t)(p)->hq[0]))",
          "79: #define LE32(p) (((uint32_t)(p)->hl[3]<<24)|((uint32_t)(p)->hl[2]<<16)| \\",
          "80:      ((uint32_t)(p)->hl[1]<<8)|((uint32_t)(p)->hl[0]))",
          "81: #define BE32(p) (((uint32_t)(p)->hl[0]<<24)|((uint32_t)(p)->hl[1]<<16)| \\",
          "82:      ((uint32_t)(p)->hl[2]<<8)|((uint32_t)(p)->hl[3]))",
          "83: #define ME32(p) (((uint32_t)(p)->hl[1]<<24)|((uint32_t)(p)->hl[0]<<16)| \\",
          "84:      ((uint32_t)(p)->hl[3]<<8)|((uint32_t)(p)->hl[2]))",
          "85: #define BE16(p) (((uint16_t)(p)->hs[0]<<8)|((uint16_t)(p)->hs[1]))",
          "86: #define LE16(p) (((uint16_t)(p)->hs[1]<<8)|((uint16_t)(p)->hs[0]))",
          "87: #define SEXT(s,v,p) ((s)?(intmax_t)(int##v##_t)(p):(intmax_t)(uint##v##_t)(p))",
          "",
          "[Added Lines]",
          "70: #define OFFSET_OOB(n, o, i) ((n) < CAST(uint32_t, (o)) || (i) > ((n) - (o)))",
          "71: #define BE64(p) ( \\",
          "72:     (CAST(uint64_t, (p)->hq[0])<<56)| \\",
          "73:     (CAST(uint64_t, (p)->hq[1])<<48)| \\",
          "74:     (CAST(uint64_t, (p)->hq[2])<<40)| \\",
          "75:     (CAST(uint64_t, (p)->hq[3])<<32)| \\",
          "76:     (CAST(uint64_t, (p)->hq[4])<<24)| \\",
          "77:     (CAST(uint64_t, (p)->hq[5])<<16)| \\",
          "78:     (CAST(uint64_t, (p)->hq[6])<<8)| \\",
          "79:     (CAST(uint64_t, (p)->hq[7])))",
          "80: #define LE64(p) ( \\",
          "81:     (CAST(uint64_t, (p)->hq[7])<<56)| \\",
          "82:     (CAST(uint64_t, (p)->hq[6])<<48)| \\",
          "83:     (CAST(uint64_t, (p)->hq[5])<<40)| \\",
          "84:     (CAST(uint64_t, (p)->hq[4])<<32)| \\",
          "85:     (CAST(uint64_t, (p)->hq[3])<<24)| \\",
          "86:     (CAST(uint64_t, (p)->hq[2])<<16)| \\",
          "87:     (CAST(uint64_t, (p)->hq[1])<<8)| \\",
          "88:     (CAST(uint64_t, (p)->hq[0])))",
          "89: #define LE32(p) ( \\",
          "90:     (CAST(uint32_t, (p)->hl[3])<<24)| \\",
          "91:     (CAST(uint32_t, (p)->hl[2])<<16)| \\",
          "92:     (CAST(uint32_t, (p)->hl[1])<<8)| \\",
          "93:     (CAST(uint32_t, (p)->hl[0])))",
          "94: #define BE32(p) ( \\",
          "95:     (CAST(uint32_t, (p)->hl[0])<<24)| \\",
          "96:     (CAST(uint32_t, (p)->hl[1])<<16)| \\",
          "97:     (CAST(uint32_t, (p)->hl[2])<<8)| \\",
          "98:     (CAST(uint32_t, (p)->hl[3])))",
          "99: #define ME32(p) ( \\",
          "100:     (CAST(uint32_t, (p)->hl[1])<<24)| \\",
          "101:     (CAST(uint32_t, (p)->hl[0])<<16)| \\",
          "102:     (CAST(uint32_t, (p)->hl[3])<<8)| \\",
          "103:     (CAST(uint32_t, (p)->hl[2])))",
          "105: #define BE16(p) ((CAST(uint16_t, (p)->hs[0])<<8)|(CAST(uint16_t, (p)->hs[1])))",
          "106: #define LE16(p) ((CAST(uint16_t, (p)->hs[1])<<8)|(CAST(uint16_t, (p)->hs[0])))",
          "107: #define SEXT(s,v,p) ((s) ? \\",
          "108:  CAST(intmax_t, CAST(int##v##_t, p)) : \\",
          "109:  CAST(intmax_t, CAST(uint##v##_t, p)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "478:  size_t l;",
          "480:  for (sptr = str; (ptr = strstr(sptr, \"${\")) != NULL;) {",
          "482:   if (l >= len)",
          "483:    return -1;",
          "484:   memcpy(buf, sptr, l);",
          "",
          "[Removed Lines]",
          "481:   l = (size_t)(ptr - sptr);",
          "",
          "[Added Lines]",
          "503:   l = CAST(size_t, ptr - sptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "545:    switch (m->type) {",
          "546:    case FILE_BYTE:",
          "548:   switch (check_fmt(ms, desc)) {",
          "549:   case -1:",
          "550:    return -1;",
          "551:   case 1:",
          "552:    (void)snprintf(buf, sizeof(buf), \"%d\",",
          "554:    if (file_printf(ms, F(ms, desc, \"%s\"), buf) == -1)",
          "555:     return -1;",
          "556:    break;",
          "557:   default:",
          "558:    if (file_printf(ms, F(ms, desc, \"%d\"),",
          "560:     return -1;",
          "561:    break;",
          "562:   }",
          "",
          "[Removed Lines]",
          "547:   v = file_signextend(ms, m, (uint64_t)p->b);",
          "553:        (unsigned char)v);",
          "559:        (unsigned char) v) == -1)",
          "",
          "[Added Lines]",
          "569:   v = file_signextend(ms, m, CAST(uint64_t, p->b));",
          "575:        CAST(unsigned char, v));",
          "581:        CAST(unsigned char, v)) == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "566:    case FILE_SHORT:",
          "567:    case FILE_BESHORT:",
          "568:    case FILE_LESHORT:",
          "570:   switch (check_fmt(ms, desc)) {",
          "571:   case -1:",
          "572:    return -1;",
          "573:   case 1:",
          "574:    (void)snprintf(buf, sizeof(buf), \"%u\",",
          "576:    if (file_printf(ms, F(ms, desc, \"%s\"), buf) == -1)",
          "577:     return -1;",
          "578:    break;",
          "579:   default:",
          "580:    if (file_printf(ms, F(ms, desc, \"%u\"),",
          "582:     return -1;",
          "583:    break;",
          "584:   }",
          "",
          "[Removed Lines]",
          "569:   v = file_signextend(ms, m, (uint64_t)p->h);",
          "575:        (unsigned short)v);",
          "581:        (unsigned short) v) == -1)",
          "",
          "[Added Lines]",
          "591:   v = file_signextend(ms, m, CAST(uint64_t, p->h));",
          "597:        CAST(unsigned short, v));",
          "603:        CAST(unsigned short, v)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "589:    case FILE_BELONG:",
          "590:    case FILE_LELONG:",
          "591:    case FILE_MELONG:",
          "593:   switch (check_fmt(ms, desc)) {",
          "594:   case -1:",
          "595:    return -1;",
          "596:   case 1:",
          "598:    if (file_printf(ms, F(ms, desc, \"%s\"), buf) == -1)",
          "599:     return -1;",
          "600:    break;",
          "601:   default:",
          "603:     return -1;",
          "604:    break;",
          "605:   }",
          "",
          "[Removed Lines]",
          "592:   v = file_signextend(ms, m, (uint64_t)p->l);",
          "597:    (void)snprintf(buf, sizeof(buf), \"%u\", (uint32_t) v);",
          "602:    if (file_printf(ms, F(ms, desc, \"%u\"), (uint32_t) v) == -1)",
          "",
          "[Added Lines]",
          "614:   v = file_signextend(ms, m, CAST(uint64_t, p->l));",
          "619:    (void)snprintf(buf, sizeof(buf), \"%u\",",
          "620:        CAST(uint32_t, v));",
          "625:    if (file_printf(ms, F(ms, desc, \"%u\"),",
          "626:        CAST(uint32_t, v)) == -1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "615:    return -1;",
          "616:   case 1:",
          "617:    (void)snprintf(buf, sizeof(buf), \"%\" INT64_T_FORMAT \"u\",",
          "619:    if (file_printf(ms, F(ms, desc, \"%s\"), buf) == -1)",
          "620:     return -1;",
          "621:    break;",
          "622:   default:",
          "623:    if (file_printf(ms, F(ms, desc, \"%\" INT64_T_FORMAT \"u\"),",
          "625:     return -1;",
          "626:    break;",
          "627:   }",
          "",
          "[Removed Lines]",
          "618:        (unsigned long long)v);",
          "624:        (unsigned long long) v) == -1)",
          "",
          "[Added Lines]",
          "642:        CAST(unsigned long long, v));",
          "648:        CAST(unsigned long long, v)) == -1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "651:    if (m->str_flags & STRING_TRIM) {",
          "652:     char *last;",
          "654:      str++;",
          "655:     last = str;",
          "656:     while (*last)",
          "657:      last++;",
          "658:     --last;",
          "660:      last--;",
          "662:    }",
          "",
          "[Removed Lines]",
          "653:     while (isspace((unsigned char)*str))",
          "659:     while (isspace((unsigned char)*last))",
          "",
          "[Added Lines]",
          "677:     while (isspace(CAST(unsigned char, *str)))",
          "683:     while (isspace(CAST(unsigned char, *last)))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "763:   char *cp;",
          "764:   int rval;",
          "767:   if (cp == NULL) {",
          "768:    file_oomem(ms, ms->search.rm_len);",
          "769:    return -1;",
          "",
          "[Removed Lines]",
          "766:   cp = strndup((const char *)ms->search.s, ms->search.rm_len);",
          "",
          "[Added Lines]",
          "790:   cp = strndup(RCAST(const char *, ms->search.s),",
          "791:       ms->search.rm_len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "805:   file_magerror(ms, \"invalid m->type (%d) in mprint()\", m->type);",
          "806:   return -1;",
          "807:  }",
          "809: }",
          "811: private int",
          "",
          "[Removed Lines]",
          "808:  return (int32_t)t;",
          "",
          "[Added Lines]",
          "833:  return CAST(int32_t, t);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "852:     p->s[strcspn(p->s, \"\\r\\n\")] = '\\0';",
          "853:    o = CAST(uint32_t, (ms->offset + strlen(p->s)));",
          "854:    if (m->type == FILE_PSTRING)",
          "856:   }",
          "857:   break;",
          "",
          "[Removed Lines]",
          "855:     o += (uint32_t)file_pstring_length_size(m);",
          "",
          "[Added Lines]",
          "880:     o += CAST(uint32_t,",
          "881:         file_pstring_length_size(m));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "918:  case FILE_DER:",
          "919:   {",
          "920:    o = der_offs(ms, m, nbytes);",
          "922:     if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "923:      (void)fprintf(stderr,",
          "924:          \"Bad DER offset %d nbytes=%\"",
          "",
          "[Removed Lines]",
          "921:    if (o == -1 || (size_t)o > nbytes) {",
          "",
          "[Added Lines]",
          "947:    if (o == -1 || CAST(size_t, o) > nbytes) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "935:   break;",
          "936:  }",
          "939: #if 0",
          "940:   file_error(ms, 0, \"Offset out of range %\" SIZE_T_FORMAT",
          "941:       \"u > %\" SIZE_T_FORMAT \"u\", (size_t)o, nbytes);",
          "",
          "[Removed Lines]",
          "938:  if ((size_t)o > nbytes) {",
          "",
          "[Added Lines]",
          "964:  if (CAST(size_t, o) > nbytes) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1008:   return type;",
          "1009:  }",
          "1010: }",
          "1012:  if (m->num_mask) \\",
          "1013:   switch (m->mask_op & FILE_OPS_MASK) { \\",
          "1014:   case FILE_OPAND: \\",
          "1016:    break; \\",
          "1017:   case FILE_OPOR: \\",
          "1019:    break; \\",
          "1020:   case FILE_OPXOR: \\",
          "1022:    break; \\",
          "1023:   case FILE_OPADD: \\",
          "1025:    break; \\",
          "1026:   case FILE_OPMINUS: \\",
          "1028:    break; \\",
          "1029:   case FILE_OPMULTIPLY: \\",
          "1031:    break; \\",
          "1032:   case FILE_OPDIVIDE: \\",
          "1034:     return -1; \\",
          "1036:    break; \\",
          "1037:   case FILE_OPMODULO: \\",
          "1039:     return -1; \\",
          "1041:    break; \\",
          "1042:   } \\",
          "1043:  if (m->mask_op & FILE_OPINVERSE) \\",
          "",
          "[Removed Lines]",
          "1011: #define DO_CVT(fld, cast) \\",
          "1015:    p->fld &= cast m->num_mask; \\",
          "1018:    p->fld |= cast m->num_mask; \\",
          "1021:    p->fld ^= cast m->num_mask; \\",
          "1024:    p->fld += cast m->num_mask; \\",
          "1027:    p->fld -= cast m->num_mask; \\",
          "1030:    p->fld *= cast m->num_mask; \\",
          "1033:    if (cast m->num_mask == 0) \\",
          "1035:    p->fld /= cast m->num_mask; \\",
          "1038:    if (cast m->num_mask == 0) \\",
          "1040:    p->fld %= cast m->num_mask; \\",
          "",
          "[Added Lines]",
          "1037: #define DO_CVT(fld, type) \\",
          "1041:    p->fld &= CAST(type, m->num_mask); \\",
          "1044:    p->fld |= CAST(type, m->num_mask); \\",
          "1047:    p->fld ^= CAST(type, m->num_mask); \\",
          "1050:    p->fld += CAST(type, m->num_mask); \\",
          "1053:    p->fld -= CAST(type, m->num_mask); \\",
          "1056:    p->fld *= CAST(type, m->num_mask); \\",
          "1059:    if (CAST(type, m->num_mask) == 0) \\",
          "1061:    p->fld /= CAST(type, m->num_mask); \\",
          "1064:    if (CAST(type, m->num_mask) == 0) \\",
          "1066:    p->fld %= CAST(type, m->num_mask); \\",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1046: private int",
          "1047: cvt_8(union VALUETYPE *p, const struct magic *m)",
          "1048: {",
          "1050:  return 0;",
          "1051: }",
          "1053: private int",
          "1054: cvt_16(union VALUETYPE *p, const struct magic *m)",
          "1055: {",
          "1057:  return 0;",
          "1058: }",
          "1060: private int",
          "1061: cvt_32(union VALUETYPE *p, const struct magic *m)",
          "1062: {",
          "1064:  return 0;",
          "1065: }",
          "1067: private int",
          "1068: cvt_64(union VALUETYPE *p, const struct magic *m)",
          "1069: {",
          "1071:  return 0;",
          "1072: }",
          "1075:  if (m->num_mask) \\",
          "1076:   switch (m->mask_op & FILE_OPS_MASK) { \\",
          "1077:   case FILE_OPADD: \\",
          "1079:    break; \\",
          "1080:   case FILE_OPMINUS: \\",
          "1082:    break; \\",
          "1083:   case FILE_OPMULTIPLY: \\",
          "1085:    break; \\",
          "1086:   case FILE_OPDIVIDE: \\",
          "1088:     return -1; \\",
          "1090:    break; \\",
          "1091:   } \\",
          "1093: private int",
          "1094: cvt_float(union VALUETYPE *p, const struct magic *m)",
          "1095: {",
          "1097:  return 0;",
          "1098: }",
          "1100: private int",
          "1101: cvt_double(union VALUETYPE *p, const struct magic *m)",
          "1102: {",
          "1104:  return 0;",
          "1105: }",
          "",
          "[Removed Lines]",
          "1049:  DO_CVT(b, (uint8_t));",
          "1056:  DO_CVT(h, (uint16_t));",
          "1063:  DO_CVT(l, (uint32_t));",
          "1070:  DO_CVT(q, (uint64_t));",
          "1074: #define DO_CVT2(fld, cast) \\",
          "1078:    p->fld += cast m->num_mask; \\",
          "1081:    p->fld -= cast m->num_mask; \\",
          "1084:    p->fld *= cast m->num_mask; \\",
          "1087:    if (cast m->num_mask == 0) \\",
          "1089:    p->fld /= cast m->num_mask; \\",
          "1096:  DO_CVT2(f, (float));",
          "1103:  DO_CVT2(d, (double));",
          "",
          "[Added Lines]",
          "1075:  DO_CVT(b, uint8_t);",
          "1082:  DO_CVT(h, uint16_t);",
          "1089:  DO_CVT(l, uint32_t);",
          "1096:  DO_CVT(q, uint64_t);",
          "1100: #define DO_CVT2(fld, type) \\",
          "1104:    p->fld += CAST(type, m->num_mask); \\",
          "1107:    p->fld -= CAST(type, m->num_mask); \\",
          "1110:    p->fld *= CAST(type, m->num_mask); \\",
          "1113:    if (CAST(type, m->num_mask) == 0) \\",
          "1115:    p->fld /= CAST(type, m->num_mask); \\",
          "1122:  DO_CVT2(f, float);",
          "1129:  DO_CVT2(d, double);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1165:   return 1;",
          "1166:  }",
          "1167:  case FILE_BESHORT:",
          "1169:   if (cvt_16(p, m) == -1)",
          "1170:    goto out;",
          "1171:   return 1;",
          "1172:  case FILE_BELONG:",
          "1173:  case FILE_BEDATE:",
          "1174:  case FILE_BELDATE:",
          "1176:   if (cvt_32(p, m) == -1)",
          "1177:    goto out;",
          "1178:   return 1;",
          "",
          "[Removed Lines]",
          "1168:   p->h = (short)BE16(p);",
          "1175:   p->l = (int32_t)BE32(p);",
          "",
          "[Added Lines]",
          "1194:   p->h = CAST(short, BE16(p));",
          "1201:   p->l = CAST(int32_t, BE32(p));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1180:  case FILE_BEQDATE:",
          "1181:  case FILE_BEQLDATE:",
          "1182:  case FILE_BEQWDATE:",
          "1184:   if (cvt_64(p, m) == -1)",
          "1185:    goto out;",
          "1186:   return 1;",
          "1187:  case FILE_LESHORT:",
          "1189:   if (cvt_16(p, m) == -1)",
          "1190:    goto out;",
          "1191:   return 1;",
          "1192:  case FILE_LELONG:",
          "1193:  case FILE_LEDATE:",
          "1194:  case FILE_LELDATE:",
          "1196:   if (cvt_32(p, m) == -1)",
          "1197:    goto out;",
          "1198:   return 1;",
          "",
          "[Removed Lines]",
          "1183:   p->q = (uint64_t)BE64(p);",
          "1188:   p->h = (short)LE16(p);",
          "1195:   p->l = (int32_t)LE32(p);",
          "",
          "[Added Lines]",
          "1209:   p->q = CAST(uint64_t, BE64(p));",
          "1214:   p->h = CAST(short, LE16(p));",
          "1221:   p->l = CAST(int32_t, LE32(p));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1200:  case FILE_LEQDATE:",
          "1201:  case FILE_LEQLDATE:",
          "1202:  case FILE_LEQWDATE:",
          "1204:   if (cvt_64(p, m) == -1)",
          "1205:    goto out;",
          "1206:   return 1;",
          "1207:  case FILE_MELONG:",
          "1208:  case FILE_MEDATE:",
          "1209:  case FILE_MELDATE:",
          "1211:   if (cvt_32(p, m) == -1)",
          "1212:    goto out;",
          "1213:   return 1;",
          "",
          "[Removed Lines]",
          "1203:   p->q = (uint64_t)LE64(p);",
          "1210:   p->l = (int32_t)ME32(p);",
          "",
          "[Added Lines]",
          "1229:   p->q = CAST(uint64_t, LE64(p));",
          "1236:   p->l = CAST(int32_t, ME32(p));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1390:  if (nbytes < sizeof(*p))",
          "1392:       sizeof(*p) - nbytes);",
          "1393:  return 0;",
          "1394: }",
          "",
          "[Removed Lines]",
          "1391:   (void)memset(((char *)(void *)p) + nbytes, '\\0',",
          "",
          "[Added Lines]",
          "1417:   (void)memset(RCAST(char *, RCAST(void *, p)) + nbytes, '\\0',",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1429:  if (m->in_op & FILE_OPINVERSE)",
          "1430:   offset = ~offset;",
          "1433: }",
          "1435: private int",
          "",
          "[Removed Lines]",
          "1432:  return (uint32_t)offset;",
          "",
          "[Added Lines]",
          "1458:  return CAST(uint32_t, offset);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1454:        \"u at level %u\", o, cont_level);",
          "1455:    return -1;",
          "1456:   }",
          "1458:    return -1;",
          "1459:   buffer_init(bb, -1, b->ebuf, b->elen);",
          "1461:  } else {",
          "1462:   if (cont_level == 0) {",
          "1463: normal:",
          "",
          "[Removed Lines]",
          "1457:   if ((size_t)-m->offset > b->elen)",
          "1460:   ms->eoffset = ms->offset = (int32_t)(b->elen + m->offset);",
          "",
          "[Added Lines]",
          "1483:   if (CAST(size_t, -m->offset) > b->elen)",
          "1486:   ms->eoffset = ms->offset = CAST(int32_t, b->elen + m->offset);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1513:   return -1;",
          "1515:  if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "",
          "[Removed Lines]",
          "1511:  if (mcopy(ms, p, m->type, m->flag & INDIR, s, (uint32_t)(offset + o),",
          "1512:      (uint32_t)nbytes, m) == -1)",
          "",
          "[Added Lines]",
          "1537:  if (mcopy(ms, p, m->type, m->flag & INDIR, s,",
          "1538:      CAST(uint32_t, offset + o), CAST(uint32_t, nbytes), m) == -1)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1518:       \"u, il=%hu, nc=%hu)\\n\",",
          "1519:       m->type, m->flag, offset, o, nbytes,",
          "1522: #ifndef COMPILE_ONLY",
          "1523:   file_mdump(m);",
          "1524: #endif",
          "",
          "[Removed Lines]",
          "1521:   mdebug(offset, (char *)(void *)p, sizeof(union VALUETYPE));",
          "",
          "[Added Lines]",
          "1547:   mdebug(offset, RCAST(char *, RCAST(void *, p)),",
          "1548:       sizeof(union VALUETYPE));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1529:   const int sgn = m->in_op & FILE_OPSIGNED;",
          "1530:   if (m->in_op & FILE_OPINDIRECT) {",
          "1531:    const union VALUETYPE *q = CAST(const union VALUETYPE *,",
          "1533:    switch (cvt_flip(m->in_type, flip)) {",
          "1534:    case FILE_BYTE:",
          "1535:     if (OFFSET_OOB(nbytes, offset + off, 1))",
          "",
          "[Removed Lines]",
          "1532:        ((const void *)(s + offset + off)));",
          "",
          "[Added Lines]",
          "1559:        RCAST(const void *, s + offset + off));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1616:     return 0;",
          "1617:    lhs = BE32(p);",
          "1618:    if (in_type == FILE_BEID3)",
          "1620:    offset = do_ops(m, SEXT(sgn,32,lhs), off);",
          "1621:    break;",
          "1622:   case FILE_LELONG:",
          "",
          "[Removed Lines]",
          "1619:     lhs = cvt_id3(ms, (uint32_t)lhs);",
          "",
          "[Added Lines]",
          "1646:     lhs = cvt_id3(ms, CAST(uint32_t, lhs));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1625:     return 0;",
          "1626:    lhs = LE32(p);",
          "1627:    if (in_type == FILE_LEID3)",
          "1629:    offset = do_ops(m, SEXT(sgn,32,lhs), off);",
          "1630:    break;",
          "1631:   case FILE_MELONG:",
          "",
          "[Removed Lines]",
          "1628:     lhs = cvt_id3(ms, (uint32_t)lhs);",
          "",
          "[Added Lines]",
          "1655:     lhs = cvt_id3(ms, CAST(uint32_t, lhs));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1668:   ms->offset = offset;",
          "1670:   if ((ms->flags & MAGIC_DEBUG) != 0) {",
          "1672:        sizeof(union VALUETYPE));",
          "1673: #ifndef COMPILE_ONLY",
          "1674:    file_mdump(m);",
          "",
          "[Removed Lines]",
          "1671:    mdebug(offset, (char *)(void *)p,",
          "",
          "[Added Lines]",
          "1698:    mdebug(offset, RCAST(char *, RCAST(void *, p)),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1824:  const unsigned char *eb = b + len;",
          "1825:  uint64_t v;",
          "",
          "[Removed Lines]",
          "1822:  const unsigned char *a = (const unsigned char *)s1;",
          "1823:  const unsigned char *b = (const unsigned char *)s2;",
          "",
          "[Added Lines]",
          "1849:  const unsigned char *a = RCAST(const unsigned char *, s1);",
          "1850:  const unsigned char *b = RCAST(const unsigned char *, s2);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2015:  case FILE_STRING:",
          "2016:  case FILE_PSTRING:",
          "2017:   l = 0;",
          "2019:   break;",
          "2021:  case FILE_BESTRING16:",
          "2022:  case FILE_LESTRING16:",
          "2023:   l = 0;",
          "2025:   break;",
          "",
          "[Removed Lines]",
          "2018:   v = file_strncmp(m->value.s, p->s, (size_t)m->vallen, m->str_flags);",
          "2024:   v = file_strncmp16(m->value.s, p->s, (size_t)m->vallen, m->str_flags);",
          "",
          "[Added Lines]",
          "2045:   v = file_strncmp(m->value.s, p->s, CAST(size_t, m->vallen),",
          "2046:       m->str_flags);",
          "2052:   v = file_strncmp16(m->value.s, p->s, CAST(size_t, m->vallen),",
          "2053:       m->str_flags);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2063:       ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0));",
          "2064:   if (rc) {",
          "2065:    file_regerror(&rx, rc, ms);",
          "2067:   } else {",
          "2068:    regmatch_t pmatch;",
          "2069:    size_t slen = ms->search.s_len;",
          "",
          "[Removed Lines]",
          "2066:    v = (uint64_t)-1;",
          "",
          "[Added Lines]",
          "2095:    v = CAST(uint64_t, -1);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2084:        search = CCAST(char *, \"\");",
          "2085:        copy = NULL;",
          "2086:    }",
          "2088:        1, &pmatch, 0);",
          "2089:    free(copy);",
          "2090:    switch (rc) {",
          "2091:    case 0:",
          "2096:     v = 0;",
          "2097:     break;",
          "",
          "[Removed Lines]",
          "2087:    rc = file_regexec(&rx, (const char *)search,",
          "2092:     ms->search.s += (int)pmatch.rm_so;",
          "2093:     ms->search.offset += (size_t)pmatch.rm_so;",
          "2094:     ms->search.rm_len =",
          "2095:         (size_t)(pmatch.rm_eo - pmatch.rm_so);",
          "",
          "[Added Lines]",
          "2116:    rc = file_regexec(&rx, RCAST(const char *, search),",
          "2121:     ms->search.s += CAST(int, pmatch.rm_so);",
          "2122:     ms->search.offset += CAST(size_t, pmatch.rm_so);",
          "2123:     ms->search.rm_len = CAST(size_t,",
          "2124:         pmatch.rm_eo - pmatch.rm_so);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2103:    default:",
          "2104:     file_regerror(&rx, rc, ms);",
          "2106:     break;",
          "2107:    }",
          "2108:   }",
          "2109:   file_regfree(&rx);",
          "2111:    return -1;",
          "2112:   break;",
          "2113:  }",
          "",
          "[Removed Lines]",
          "2105:     v = (uint64_t)-1;",
          "2110:   if (v == (uint64_t)-1)",
          "",
          "[Added Lines]",
          "2134:     v = CAST(uint64_t, -1);",
          "2139:   if (v == CAST(uint64_t, -1))",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2136:  case 'x':",
          "2137:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "2138:    (void) fprintf(stderr, \"%\" INT64_T_FORMAT",
          "2140:   matched = 1;",
          "2141:   break;",
          "",
          "[Removed Lines]",
          "2139:        \"u == *any* = 1\\n\", (unsigned long long)v);",
          "",
          "[Added Lines]",
          "2168:        \"u == *any* = 1\\n\", CAST(unsigned long long, v));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2144:   matched = v != l;",
          "2145:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "2146:    (void) fprintf(stderr, \"%\" INT64_T_FORMAT \"u != %\"",
          "2149:   break;",
          "2151:  case '=':",
          "2152:   matched = v == l;",
          "2153:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "2154:    (void) fprintf(stderr, \"%\" INT64_T_FORMAT \"u == %\"",
          "2157:   break;",
          "2159:  case '>':",
          "",
          "[Removed Lines]",
          "2147:        INT64_T_FORMAT \"u = %d\\n\", (unsigned long long)v,",
          "2148:        (unsigned long long)l, matched);",
          "2155:        INT64_T_FORMAT \"u = %d\\n\", (unsigned long long)v,",
          "2156:        (unsigned long long)l, matched);",
          "",
          "[Added Lines]",
          "2176:        INT64_T_FORMAT \"u = %d\\n\",",
          "2177:        CAST(unsigned long long, v),",
          "2178:        CAST(unsigned long long, l), matched);",
          "2185:        INT64_T_FORMAT \"u = %d\\n\",",
          "2186:        CAST(unsigned long long, v),",
          "2187:        CAST(unsigned long long, l), matched);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2162:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "2163:     (void) fprintf(stderr, \"%\" INT64_T_FORMAT",
          "2164:         \"u > %\" INT64_T_FORMAT \"u = %d\\n\",",
          "2167:   }",
          "2168:   else {",
          "2170:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "2171:     (void) fprintf(stderr, \"%\" INT64_T_FORMAT",
          "2172:         \"d > %\" INT64_T_FORMAT \"d = %d\\n\",",
          "2174:   }",
          "2175:   break;",
          "",
          "[Removed Lines]",
          "2165:         (unsigned long long)v,",
          "2166:         (unsigned long long)l, matched);",
          "2169:    matched = (int64_t) v > (int64_t) l;",
          "2173:         (long long)v, (long long)l, matched);",
          "",
          "[Added Lines]",
          "2196:         CAST(unsigned long long, v),",
          "2197:         CAST(unsigned long long, l), matched);",
          "2200:    matched = CAST(int64_t, v) > CAST(int64_t, l);",
          "2204:         CAST(long long, v),",
          "2205:         CAST(long long, l), matched);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2180:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "2181:     (void) fprintf(stderr, \"%\" INT64_T_FORMAT",
          "2182:         \"u < %\" INT64_T_FORMAT \"u = %d\\n\",",
          "2185:   }",
          "2186:   else {",
          "2188:    if ((ms->flags & MAGIC_DEBUG) != 0)",
          "2189:     (void) fprintf(stderr, \"%\" INT64_T_FORMAT",
          "2190:         \"d < %\" INT64_T_FORMAT \"d = %d\\n\",",
          "2192:   }",
          "2193:   break;",
          "",
          "[Removed Lines]",
          "2183:         (unsigned long long)v,",
          "2184:         (unsigned long long)l, matched);",
          "2187:    matched = (int64_t) v < (int64_t) l;",
          "2191:          (long long)v, (long long)l, matched);",
          "",
          "[Added Lines]",
          "2215:         CAST(unsigned long long, v),",
          "2216:         CAST(unsigned long long, l), matched);",
          "2219:    matched = CAST(int64_t, v) < CAST(int64_t, l);",
          "2223:          CAST(long long, v),",
          "2224:          CAST(long long, l), matched);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2197:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "2198:    (void) fprintf(stderr, \"((%\" INT64_T_FORMAT \"x & %\"",
          "2199:        INT64_T_FORMAT \"x) == %\" INT64_T_FORMAT",
          "2202:        matched);",
          "2203:   break;",
          "",
          "[Removed Lines]",
          "2200:        \"x) = %d\\n\", (unsigned long long)v,",
          "2201:        (unsigned long long)l, (unsigned long long)l,",
          "",
          "[Added Lines]",
          "2233:        \"x) = %d\\n\", CAST(unsigned long long, v),",
          "2234:        CAST(unsigned long long, l),",
          "2235:        CAST(unsigned long long, l),",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2207:   if ((ms->flags & MAGIC_DEBUG) != 0)",
          "2208:    (void) fprintf(stderr, \"((%\" INT64_T_FORMAT \"x & %\"",
          "2209:        INT64_T_FORMAT \"x) != %\" INT64_T_FORMAT",
          "2213:   break;",
          "2215:  default:",
          "",
          "[Removed Lines]",
          "2210:        \"x) = %d\\n\", (unsigned long long)v,",
          "2211:        (unsigned long long)l, (unsigned long long)l,",
          "2212:        matched);",
          "",
          "[Added Lines]",
          "2244:        \"x) = %d\\n\", CAST(unsigned long long, v),",
          "2245:        CAST(unsigned long long, l),",
          "2246:        CAST(unsigned long long, l), matched);",
          "",
          "---------------"
        ]
      }
    }
  ]
}