{
  "cve_id": "CVE-2016-2181",
  "cve_desc": "The Anti-Replay feature in the DTLS implementation in OpenSSL before 1.1.0 mishandles early use of a new epoch number in conjunction with a large sequence number, which allows remote attackers to cause a denial of service (false-positive packet drops) via spoofed DTLS records, related to rec_layer_d1.c and ssl3_record.c.",
  "repo": "openssl/openssl",
  "patch_hash": "1fb9fdc3027b27d8eb6a1e6a846435b070980770",
  "patch_info": {
    "commit_hash": "1fb9fdc3027b27d8eb6a1e6a846435b070980770",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/1fb9fdc3027b27d8eb6a1e6a846435b070980770",
    "files": [
      "include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c",
      "ssl/record/record_locl.h",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_err.c"
    ],
    "message": "Fix DTLS replay protection\n\nThe DTLS implementation provides some protection against replay attacks\nin accordance with RFC6347 section 4.1.2.6.\n\nA sliding \"window\" of valid record sequence numbers is maintained with\nthe \"right\" hand edge of the window set to the highest sequence number we\nhave received so far. Records that arrive that are off the \"left\" hand\nedge of the window are rejected. Records within the window are checked\nagainst a list of records received so far. If we already received it then\nwe also reject the new record.\n\nIf we have not already received the record, or the sequence number is off\nthe right hand edge of the window then we verify the MAC of the record.\nIf MAC verification fails then we discard the record. Otherwise we mark\nthe record as received. If the sequence number was off the right hand edge\nof the window, then we slide the window along so that the right hand edge\nis in line with the newly received sequence number.\n\nRecords may arrive for future epochs, i.e. a record from after a CCS being\nsent, can arrive before the CCS does if the packets get re-ordered. As we\nhave not yet received the CCS we are not yet in a position to decrypt or\nvalidate the MAC of those records. OpenSSL places those records on an\nunprocessed records queue. It additionally updates the window immediately,\neven though we have not yet verified the MAC. This will only occur if\ncurrently in a handshake/renegotiation.\n\nThis could be exploited by an attacker by sending a record for the next\nepoch (which does not have to decrypt or have a valid MAC), with a very\nlarge sequence number. This means the right hand edge of the window is\nmoved very far to the right, and all subsequent legitimate packets are\ndropped causing a denial of service.\n\nA similar effect can be achieved during the initial handshake. In this\ncase there is no MAC key negotiated yet. Therefore an attacker can send a\nmessage for the current epoch with a very large sequence number. The code\nwill process the record as normal. If the hanshake message sequence number\n(as opposed to the record sequence number that we have been talking about\nso far) is in the future then the injected message is bufferred to be\nhandled later, but the window is still updated. Therefore all subsequent\nlegitimate handshake records are dropped. This aspect is not considered a\nsecurity issue because there are many ways for an attacker to disrupt the\ninitial handshake and prevent it from completing successfully (e.g.\ninjection of a handshake message will cause the Finished MAC to fail and\nthe handshake to be aborted). This issue comes about as a result of trying\nto do replay protection, but having no integrity mechanism in place yet.\nDoes it even make sense to have replay protection in epoch 0? That\nissue isn't addressed here though.\n\nThis addressed an OCAP Audit issue.\n\nCVE-2016-2181\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl.h||include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
      "ssl/record/record_locl.h||ssl/record/record_locl.h",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_err.c||ssl/ssl_err.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl.h||include/openssl/ssl.h": [
      "File: include/openssl/ssl.h -> include/openssl/ssl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2066: # define SSL_F_DTLS1_CHECK_TIMEOUT_NUM                    318",
      "2067: # define SSL_F_DTLS1_HEARTBEAT                            305",
      "2068: # define SSL_F_DTLS1_PREPROCESS_FRAGMENT                  288",
      "2069: # define SSL_F_DTLS1_PROCESS_RECORD                       257",
      "2070: # define SSL_F_DTLS1_READ_BYTES                           258",
      "2071: # define SSL_F_DTLS1_READ_FAILED                          339",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2069: # define SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS             423",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
      "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "230: {",
      "231:     pitem *item;",
      "232:     SSL3_BUFFER *rb;",
      "234:     item = pqueue_peek(s->rlayer.d->unprocessed_rcds.q);",
      "235:     if (item) {",
      "237:         if (s->rlayer.d->unprocessed_rcds.epoch != s->rlayer.d->r_epoch)",
      "240:         rb = RECORD_LAYER_get_rbuf(&s->rlayer);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "233:     SSL3_RECORD *rr;",
      "234:     DTLS1_BITMAP *bitmap;",
      "235:     unsigned int is_next_epoch;",
      "236:     int replayok = 1;",
      "244:         rr = RECORD_LAYER_get_rrec(&s->rlayer);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "253:         while (pqueue_peek(s->rlayer.d->unprocessed_rcds.q)) {",
      "254:             dtls1_get_unprocessed_record(s);",
      "257:             if (dtls1_buffer_record(s, &(s->rlayer.d->processed_rcds),",
      "261:         }",
      "262:     }",
      "",
      "[Removed Lines]",
      "255:             if (!dtls1_process_record(s))",
      "256:                 return (0);",
      "258:                                     SSL3_RECORD_get_seq_num(s->rlayer.rrec)) <",
      "259:                 0)",
      "260:                 return -1;",
      "",
      "[Added Lines]",
      "261:             bitmap = dtls1_get_bitmap(s, rr, &is_next_epoch);",
      "262:             if (bitmap == NULL) {",
      "268:                  SSLerr(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS,",
      "269:                         ERR_R_INTERNAL_ERROR);",
      "270:                  return 0;",
      "271:             }",
      "272: #ifndef OPENSSL_NO_SCTP",
      "274:             if (!BIO_dgram_is_sctp(SSL_get_rbio(s)))",
      "275: #endif",
      "276:             {",
      "283:                 replayok = dtls1_record_replay_check(s, bitmap);",
      "284:             }",
      "286:             if (!replayok || !dtls1_process_record(s, bitmap)) {",
      "288:                 rr->length = 0;",
      "289:                 RECORD_LAYER_reset_packet_length(&s->rlayer);",
      "290:                 continue;",
      "291:             }",
      "294:                     SSL3_RECORD_get_seq_num(s->rlayer.rrec)) < 0)",
      "295:                 return 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:     s->rlayer.d->processed_rcds.epoch = s->rlayer.d->r_epoch;",
      "269:     s->rlayer.d->unprocessed_rcds.epoch = s->rlayer.d->r_epoch + 1;",
      "272: }",
      "",
      "[Removed Lines]",
      "271:     return (1);",
      "",
      "[Added Lines]",
      "306:     return 1;",
      "",
      "---------------"
    ],
    "ssl/record/record_locl.h||ssl/record/record_locl.h": [
      "File: ssl/record/record_locl.h -> ssl/record/record_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "110: __owur int tls1_cbc_remove_padding(const SSL *s,",
      "111:                                    SSL3_RECORD *rec,",
      "112:                                    unsigned block_size, unsigned mac_size);",
      "114: __owur int dtls1_get_record(SSL *s);",
      "",
      "[Removed Lines]",
      "113: int dtls1_process_record(SSL *s);",
      "",
      "[Added Lines]",
      "113: int dtls1_process_record(SSL *s, DTLS1_BITMAP *bitmap);",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1273: #endif",
      "1274: }",
      "1277: {",
      "1278:     int i, al;",
      "1279:     int enc_err;",
      "",
      "[Removed Lines]",
      "1276: int dtls1_process_record(SSL *s)",
      "",
      "[Added Lines]",
      "1276: int dtls1_process_record(SSL *s, DTLS1_BITMAP *bitmap)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1431:     RECORD_LAYER_reset_packet_length(&s->rlayer);",
      "1432:     return (1);",
      "1434:  f_err:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1434:     dtls1_record_bitmap_update(s, bitmap);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1476:         return -1;",
      "",
      "[Removed Lines]",
      "1475:     if (dtls1_process_buffered_records(s) < 0)",
      "",
      "[Added Lines]",
      "1479:     if (!dtls1_process_buffered_records(s))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1604:                 (s, &(DTLS_RECORD_LAYER_get_unprocessed_rcds(&s->rlayer)),",
      "1605:                  rr->seq_num) < 0)",
      "1606:                 return -1;",
      "1609:         }",
      "1610:         rr->length = 0;",
      "1611:         RECORD_LAYER_reset_packet_length(&s->rlayer);",
      "1612:         goto again;",
      "1613:     }",
      "1616:         rr->length = 0;",
      "1619:     }",
      "1622:     return (1);",
      "",
      "[Removed Lines]",
      "1608:             dtls1_record_bitmap_update(s, bitmap);",
      "1615:     if (!dtls1_process_record(s)) {",
      "",
      "[Added Lines]",
      "1621:     if (!dtls1_process_record(s, bitmap)) {",
      "",
      "---------------"
    ],
    "ssl/ssl_err.c||ssl/ssl_err.c": [
      "File: ssl/ssl_err.c -> ssl/ssl_err.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:     {ERR_FUNC(SSL_F_DTLS1_CHECK_TIMEOUT_NUM), \"dtls1_check_timeout_num\"},",
      "33:     {ERR_FUNC(SSL_F_DTLS1_HEARTBEAT), \"dtls1_heartbeat\"},",
      "34:     {ERR_FUNC(SSL_F_DTLS1_PREPROCESS_FRAGMENT), \"dtls1_preprocess_fragment\"},",
      "35:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_RECORD), \"dtls1_process_record\"},",
      "36:     {ERR_FUNC(SSL_F_DTLS1_READ_BYTES), \"dtls1_read_bytes\"},",
      "37:     {ERR_FUNC(SSL_F_DTLS1_READ_FAILED), \"dtls1_read_failed\"},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS),",
      "36:      \"dtls1_process_buffered_records\"},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5816586ba45bba05f6d9f0432a408063a42e1012",
      "candidate_info": {
        "commit_hash": "5816586ba45bba05f6d9f0432a408063a42e1012",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5816586ba45bba05f6d9f0432a408063a42e1012",
        "files": [
          "crypto/dso/dso_err.c",
          "crypto/err/openssl.txt",
          "crypto/rsa/rsa_err.c",
          "crypto/ts/ts_err.c",
          "engines/e_afalg.txt",
          "engines/e_capi.txt",
          "engines/e_capi.txt.old",
          "engines/e_capi_err.c",
          "engines/e_dasync.txt",
          "engines/e_dasync.txt.old",
          "engines/e_dasync_err.c",
          "engines/e_ossltest.txt",
          "engines/e_ossltest.txt.old",
          "engines/e_ossltest_err.c",
          "ssl/ssl_err.c",
          "util/mkerr.pl"
        ],
        "message": "Put message strings in state files\n\nAdd \"*\" as indicator meaning the function/reason is removed, so put an\nempty string in the function/reason string table; this preserves backward\ncompatibility by keeping the #define's.\n\nIn state files, trailing backslash means text is on the next line.\n\nAdd copyright to state files\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3640)",
        "before_after_code_files": [
          "crypto/dso/dso_err.c||crypto/dso/dso_err.c",
          "crypto/rsrsa_err.c||crypto/rsa/rsa_err.c",
          "crypto/ts/ts_err.c||crypto/ts/ts_err.c",
          "engines/e_capi.txt.old||engines/e_capi.txt.old",
          "engines/e_capi_err.c||engines/e_capi_err.c",
          "engines/e_dasync.txt.old||engines/e_dasync.txt.old",
          "engines/e_dasync_err.c||engines/e_dasync_err.c",
          "engines/e_ossltest.txt.old||engines/e_ossltest.txt.old",
          "engines/e_ossltest_err.c||engines/e_ossltest_err.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "util/mkerr.pl||util/mkerr.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/dso/dso_err.c||crypto/dso/dso_err.c": [
          "File: crypto/dso/dso_err.c -> crypto/dso/dso_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     {ERR_PACK(ERR_LIB_DSO, DSO_F_WIN32_MERGER, 0), \"win32_merger\"},",
          "50:     {ERR_PACK(ERR_LIB_DSO, DSO_F_WIN32_NAME_CONVERTER, 0),",
          "51:      \"win32_name_converter\"},",
          "53:     {ERR_PACK(ERR_LIB_DSO, DSO_F_WIN32_SPLITTER, 0), \"win32_splitter\"},",
          "54:     {ERR_PACK(ERR_LIB_DSO, DSO_F_WIN32_UNLOAD, 0), \"win32_unload\"},",
          "55:     {0, NULL}",
          "",
          "[Removed Lines]",
          "52:     {ERR_PACK(ERR_LIB_DSO, DSO_F_WIN32_PATHBYADDR, 0), \"win32_pathbyaddr\"},",
          "",
          "[Added Lines]",
          "52:     {ERR_PACK(ERR_LIB_DSO, DSO_F_WIN32_PATHBYADDR, 0), \"\"},",
          "",
          "---------------"
        ],
        "crypto/rsrsa_err.c||crypto/rsa/rsa_err.c": [
          "File: crypto/rsrsa_err.c -> crypto/rsa/rsa_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     {ERR_PACK(ERR_LIB_RSA, RSA_F_RSA_MGF1_TO_MD, 0), \"\"},",
          "41:     {ERR_PACK(ERR_LIB_RSA, RSA_F_RSA_NULL, 0), \"\"},",
          "42:     {ERR_PACK(ERR_LIB_RSA, RSA_F_RSA_NULL_PRIVATE_DECRYPT, 0), \"\"},",
          "43:     {ERR_PACK(ERR_LIB_RSA, RSA_F_RSA_NULL_PRIVATE_ENCRYPT, 0), \"\"},",
          "44:     {ERR_PACK(ERR_LIB_RSA, RSA_F_RSA_NULL_PUBLIC_DECRYPT, 0), \"\"},",
          "45:     {ERR_PACK(ERR_LIB_RSA, RSA_F_RSA_NULL_PUBLIC_ENCRYPT, 0), \"\"},",
          "",
          "---------------"
        ],
        "crypto/ts/ts_err.c||crypto/ts/ts_err.c": [
          "File: crypto/ts/ts_err.c -> crypto/ts/ts_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     {ERR_PACK(ERR_LIB_TS, TS_F_TS_TST_INFO_SET_TIME, 0),",
          "105:      \"TS_TST_INFO_set_time\"},",
          "106:     {ERR_PACK(ERR_LIB_TS, TS_F_TS_TST_INFO_SET_TSA, 0), \"TS_TST_INFO_set_tsa\"},",
          "108:     {ERR_PACK(ERR_LIB_TS, TS_F_TS_VERIFY_CERT, 0), \"ts_verify_cert\"},",
          "109:     {ERR_PACK(ERR_LIB_TS, TS_F_TS_VERIFY_CTX_NEW, 0), \"TS_VERIFY_CTX_new\"},",
          "110:     {0, NULL}",
          "",
          "[Removed Lines]",
          "107:     {ERR_PACK(ERR_LIB_TS, TS_F_TS_VERIFY, 0), \"TS_VERIFY\"},",
          "",
          "[Added Lines]",
          "107:     {ERR_PACK(ERR_LIB_TS, TS_F_TS_VERIFY, 0), \"\"},",
          "",
          "---------------"
        ],
        "engines/e_capi.txt.old||engines/e_capi.txt.old": [
          "File: engines/e_capi.txt.old -> engines/e_capi.txt.old",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/e_capi_err.c||engines/e_capi_err.c": [
          "File: engines/e_capi_err.c -> engines/e_capi_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     {ERR_PACK(0, CAPI_F_CAPI_RSA_SIGN, 0), \"capi_rsa_sign\"},",
          "33:     {ERR_PACK(0, CAPI_F_CAPI_VTRACE, 0), \"capi_vtrace\"},",
          "34:     {ERR_PACK(0, CAPI_F_CERT_SELECT_DIALOG, 0), \"cert_select_dialog\"},",
          "36:     {ERR_PACK(0, CAPI_F_WIDE_TO_ASC, 0), \"wide_to_asc\"},",
          "37:     {0, NULL}",
          "38: };",
          "",
          "[Removed Lines]",
          "35:     {ERR_PACK(0, CAPI_F_CLIENT_CERT_SELECT, 0), \"CLIENT_CERT_SELECT\"},",
          "",
          "[Added Lines]",
          "35:     {ERR_PACK(0, CAPI_F_CLIENT_CERT_SELECT, 0), \"\"},",
          "",
          "---------------"
        ],
        "engines/e_dasync.txt.old||engines/e_dasync.txt.old": [
          "File: engines/e_dasync.txt.old -> engines/e_dasync.txt.old",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/e_dasync_err.c||engines/e_dasync_err.c": [
          "File: engines/e_dasync_err.c -> engines/e_dasync_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: static ERR_STRING_DATA DASYNC_str_functs[] = {",
          "17:     {ERR_PACK(0, DASYNC_F_BIND_DASYNC, 0), \"bind_dasync\"},",
          "24:     {ERR_PACK(0, DASYNC_F_DASYNC_CIPHER_INIT_KEY_HELPER, 0),",
          "25:      \"dasync_cipher_init_key_helper\"},",
          "31:     {0, NULL}",
          "32: };",
          "",
          "[Removed Lines]",
          "18:     {ERR_PACK(0, DASYNC_F_CIPHER_AES_128_CBC_CODE, 0),",
          "19:      \"CIPHER_AES_128_CBC_CODE\"},",
          "20:     {ERR_PACK(0, DASYNC_F_DASYNC_AES128_CBC_HMAC_SHA1_INIT_KEY, 0),",
          "21:      \"dasync_aes128_cbc_hmac_sha1_init_key\"},",
          "22:     {ERR_PACK(0, DASYNC_F_DASYNC_AES128_INIT_KEY, 0), \"dasync_aes128_init_key\"},",
          "23:     {ERR_PACK(0, DASYNC_F_DASYNC_BN_MOD_EXP, 0), \"DASYNC_BN_MOD_EXP\"},",
          "26:     {ERR_PACK(0, DASYNC_F_DASYNC_MOD_EXP, 0), \"DASYNC_MOD_EXP\"},",
          "27:     {ERR_PACK(0, DASYNC_F_DASYNC_PRIVATE_DECRYPT, 0), \"DASYNC_PRIVATE_DECRYPT\"},",
          "28:     {ERR_PACK(0, DASYNC_F_DASYNC_PRIVATE_ENCRYPT, 0), \"DASYNC_PRIVATE_ENCRYPT\"},",
          "29:     {ERR_PACK(0, DASYNC_F_DASYNC_PUBLIC_DECRYPT, 0), \"DASYNC_PUBLIC_DECRYPT\"},",
          "30:     {ERR_PACK(0, DASYNC_F_DASYNC_PUBLIC_ENCRYPT, 0), \"DASYNC_PUBLIC_ENCRYPT\"},",
          "",
          "[Added Lines]",
          "18:     {ERR_PACK(0, DASYNC_F_CIPHER_AES_128_CBC_CODE, 0), \"\"},",
          "19:     {ERR_PACK(0, DASYNC_F_DASYNC_AES128_CBC_HMAC_SHA1_INIT_KEY, 0), \"\"},",
          "20:     {ERR_PACK(0, DASYNC_F_DASYNC_AES128_INIT_KEY, 0), \"\"},",
          "21:     {ERR_PACK(0, DASYNC_F_DASYNC_BN_MOD_EXP, 0), \"\"},",
          "24:     {ERR_PACK(0, DASYNC_F_DASYNC_MOD_EXP, 0), \"\"},",
          "25:     {ERR_PACK(0, DASYNC_F_DASYNC_PRIVATE_DECRYPT, 0), \"\"},",
          "26:     {ERR_PACK(0, DASYNC_F_DASYNC_PRIVATE_ENCRYPT, 0), \"\"},",
          "27:     {ERR_PACK(0, DASYNC_F_DASYNC_PUBLIC_DECRYPT, 0), \"\"},",
          "28:     {ERR_PACK(0, DASYNC_F_DASYNC_PUBLIC_ENCRYPT, 0), \"\"},",
          "",
          "---------------"
        ],
        "engines/e_ossltest.txt.old||engines/e_ossltest.txt.old": [
          "File: engines/e_ossltest.txt.old -> engines/e_ossltest.txt.old",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "engines/e_ossltest_err.c||engines/e_ossltest_err.c": [
          "File: engines/e_ossltest_err.c -> engines/e_ossltest_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: static ERR_STRING_DATA OSSLTEST_str_functs[] = {",
          "17:     {ERR_PACK(0, OSSLTEST_F_BIND_OSSLTEST, 0), \"bind_ossltest\"},",
          "20:     {0, NULL}",
          "21: };",
          "",
          "[Removed Lines]",
          "18:     {ERR_PACK(0, OSSLTEST_F_OSSLTEST_AES128_INIT_KEY, 0),",
          "19:      \"OSSLTEST_AES128_INIT_KEY\"},",
          "",
          "[Added Lines]",
          "18:     {ERR_PACK(0, OSSLTEST_F_OSSLTEST_AES128_INIT_KEY, 0), \"\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #ifndef OPENSSL_NO_ERR",
          "16: static const ERR_STRING_DATA SSL_str_functs[] = {",
          "19:     {ERR_PACK(ERR_LIB_SSL, SSL_F_ADD_KEY_SHARE, 0), \"add_key_share\"},",
          "20:     {ERR_PACK(ERR_LIB_SSL, SSL_F_BYTES_TO_CIPHER_LIST, 0),",
          "21:      \"bytes_to_cipher_list\"},",
          "",
          "[Removed Lines]",
          "17:     {ERR_PACK(ERR_LIB_SSL, SSL_F_ADD_CLIENT_KEY_SHARE_EXT, 0),",
          "18:      \"add_client_key_share_ext\"},",
          "",
          "[Added Lines]",
          "17:     {ERR_PACK(ERR_LIB_SSL, SSL_F_ADD_CLIENT_KEY_SHARE_EXT, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:      \"dtls1_buffer_record\"},",
          "38:     {ERR_PACK(ERR_LIB_SSL, SSL_F_DTLS1_CHECK_TIMEOUT_NUM, 0),",
          "39:      \"dtls1_check_timeout_num\"},",
          "41:     {ERR_PACK(ERR_LIB_SSL, SSL_F_DTLS1_PREPROCESS_FRAGMENT, 0),",
          "42:      \"dtls1_preprocess_fragment\"},",
          "43:     {ERR_PACK(ERR_LIB_SSL, SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS, 0),",
          "",
          "[Removed Lines]",
          "40:     {ERR_PACK(ERR_LIB_SSL, SSL_F_DTLS1_HEARTBEAT, 0), \"dtls1_heartbeat\"},",
          "",
          "[Added Lines]",
          "39:     {ERR_PACK(ERR_LIB_SSL, SSL_F_DTLS1_HEARTBEAT, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:     {ERR_PACK(ERR_LIB_SSL, SSL_F_FINAL_SIG_ALGS, 0), \"final_sig_algs\"},",
          "71:     {ERR_PACK(ERR_LIB_SSL, SSL_F_NSS_KEYLOG_INT, 0), \"nss_keylog_int\"},",
          "72:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OPENSSL_INIT_SSL, 0), \"OPENSSL_init_ssl\"},",
          "77:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION, 0),",
          "78:      \"ossl_statem_client_read_transition\"},",
          "83:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION, 0),",
          "84:      \"ossl_statem_server_read_transition\"},",
          "85:     {ERR_PACK(ERR_LIB_SSL, SSL_F_PARSE_CA_NAMES, 0), \"parse_ca_names\"},",
          "88:     {ERR_PACK(ERR_LIB_SSL, SSL_F_READ_STATE_MACHINE, 0), \"read_state_machine\"},",
          "89:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SET_CLIENT_CIPHERSUITE, 0),",
          "90:      \"set_client_ciphersuite\"},",
          "",
          "[Removed Lines]",
          "73:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION, 0),",
          "74:      \"ossl_statem_client13_read_transition\"},",
          "75:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE, 0),",
          "76:      \"ossl_statem_client_construct_message\"},",
          "79:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION, 0),",
          "80:      \"ossl_statem_server13_read_transition\"},",
          "81:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE, 0),",
          "82:      \"ossl_statem_server_construct_message\"},",
          "86:     {ERR_PACK(ERR_LIB_SSL, SSL_F_PROCESS_KEY_SHARE_EXT, 0),",
          "87:      \"process_key_share_ext\"},",
          "",
          "[Added Lines]",
          "72:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION, 0), \"\"},",
          "73:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE, 0), \"\"},",
          "76:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION, 0), \"\"},",
          "77:     {ERR_PACK(ERR_LIB_SSL, SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE, 0), \"\"},",
          "81:     {ERR_PACK(ERR_LIB_SSL, SSL_F_PROCESS_KEY_SHARE_EXT, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL3_WRITE_BYTES, 0), \"ssl3_write_bytes\"},",
          "121:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL3_WRITE_PENDING, 0), \"ssl3_write_pending\"},",
          "122:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CERT_CHAIN, 0), \"ssl_add_cert_chain\"},",
          "125:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CERT_TO_WPACKET, 0),",
          "126:      \"ssl_add_cert_to_wpacket\"},",
          "133:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK, 0),",
          "134:      \"SSL_add_dir_cert_subjects_to_stack\"},",
          "135:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK, 0),",
          "136:      \"SSL_add_file_cert_subjects_to_stack\"},",
          "143:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_BAD_METHOD, 0), \"ssl_bad_method\"},",
          "144:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_BUILD_CERT_CHAIN, 0),",
          "145:      \"ssl_build_cert_chain\"},",
          "",
          "[Removed Lines]",
          "123:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CERT_TO_BUF, 0),",
          "124:      \"ssl_add_cert_to_buf\"},",
          "127:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT, 0),",
          "128:      \"ssl_add_clienthello_renegotiate_ext\"},",
          "129:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, 0),",
          "130:      \"ssl_add_clienthello_tlsext\"},",
          "131:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT, 0),",
          "132:      \"ssl_add_clienthello_use_srtp_ext\"},",
          "137:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT, 0),",
          "138:      \"ssl_add_serverhello_renegotiate_ext\"},",
          "139:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, 0),",
          "140:      \"ssl_add_serverhello_tlsext\"},",
          "141:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT, 0),",
          "142:      \"ssl_add_serverhello_use_srtp_ext\"},",
          "",
          "[Added Lines]",
          "117:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CERT_TO_BUF, 0), \"\"},",
          "120:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT, 0), \"\"},",
          "121:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, 0), \"\"},",
          "122:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT, 0), \"\"},",
          "127:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT, 0), \"\"},",
          "128:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, 0), \"\"},",
          "129:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:      \"ssl_cert_set0_chain\"},",
          "156:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_CHECK_PRIVATE_KEY, 0),",
          "157:      \"SSL_check_private_key\"},",
          "160:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG, 0),",
          "161:      \"ssl_check_srvr_ecc_cert_and_alg\"},",
          "162:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_CIPHER_LIST_TO_BYTES, 0),",
          "",
          "[Removed Lines]",
          "158:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT, 0),",
          "159:      \"ssl_check_serverhello_tlsext\"},",
          "",
          "[Added Lines]",
          "145:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "226:      \"ssl_get_new_session\"},",
          "227:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_GET_PREV_SESSION, 0),",
          "228:      \"ssl_get_prev_session\"},",
          "232:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_INIT_WBIO_BUFFER, 0),",
          "233:      \"ssl_init_wbio_buffer\"},",
          "234:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_KEY_UPDATE, 0), \"SSL_key_update\"},",
          "235:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_LOAD_CLIENT_CA_FILE, 0),",
          "236:      \"SSL_load_client_CA_file\"},",
          "239:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE, 0),",
          "240:      \"ssl_log_rsa_client_key_exchange\"},",
          "241:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_MODULE_INIT, 0), \"ssl_module_init\"},",
          "242:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_NEW, 0), \"SSL_new\"},",
          "255:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PEEK, 0), \"SSL_peek\"},",
          "256:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PEEK_EX, 0), \"SSL_peek_ex\"},",
          "257:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PEEK_INTERNAL, 0), \"ssl_peek_internal\"},",
          "",
          "[Removed Lines]",
          "229:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_GET_SERVER_CERT_INDEX, 0),",
          "230:      \"ssl_get_server_cert_index\"},",
          "231:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_GET_SIGN_PKEY, 0), \"ssl_get_sign_pkey\"},",
          "237:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_LOG_MASTER_SECRET, 0),",
          "238:      \"ssl_log_master_secret\"},",
          "243:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT, 0),",
          "244:      \"ssl_parse_clienthello_renegotiate_ext\"},",
          "245:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT, 0),",
          "246:      \"ssl_parse_clienthello_tlsext\"},",
          "247:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT, 0),",
          "248:      \"ssl_parse_clienthello_use_srtp_ext\"},",
          "249:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT, 0),",
          "250:      \"ssl_parse_serverhello_renegotiate_ext\"},",
          "251:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT, 0),",
          "252:      \"ssl_parse_serverhello_tlsext\"},",
          "253:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT, 0),",
          "254:      \"ssl_parse_serverhello_use_srtp_ext\"},",
          "",
          "[Added Lines]",
          "215:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_GET_SERVER_CERT_INDEX, 0), \"\"},",
          "216:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_GET_SIGN_PKEY, 0), \"\"},",
          "222:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_LOG_MASTER_SECRET, 0), \"\"},",
          "227:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT, 0), \"\"},",
          "228:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT, 0), \"\"},",
          "229:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT, 0), \"\"},",
          "230:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT, 0), \"\"},",
          "231:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT, 0), \"\"},",
          "232:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "263:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_RENEGOTIATE, 0), \"SSL_renegotiate\"},",
          "264:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_RENEGOTIATE_ABBREVIATED, 0),",
          "265:      \"SSL_renegotiate_abbreviated\"},",
          "270:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_SESSION_DUP, 0), \"ssl_session_dup\"},",
          "271:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_SESSION_NEW, 0), \"SSL_SESSION_new\"},",
          "272:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_SESSION_PRINT_FP, 0),",
          "",
          "[Removed Lines]",
          "266:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT, 0),",
          "267:      \"ssl_scan_clienthello_tlsext\"},",
          "268:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, 0),",
          "269:      \"ssl_scan_serverhello_tlsext\"},",
          "",
          "[Added Lines]",
          "244:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT, 0), \"\"},",
          "245:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "324:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_WRITE, 0), \"SSL_write\"},",
          "325:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_WRITE_EARLY_DATA, 0),",
          "326:      \"SSL_write_early_data\"},",
          "329:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_WRITE_EX, 0), \"SSL_write_ex\"},",
          "330:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_WRITE_INTERNAL, 0), \"ssl_write_internal\"},",
          "331:     {ERR_PACK(ERR_LIB_SSL, SSL_F_STATE_MACHINE, 0), \"state_machine\"},",
          "",
          "[Removed Lines]",
          "327:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_WRITE_EARLY_FINISH, 0),",
          "328:      \"ssl_write_early_finish\"},",
          "",
          "[Added Lines]",
          "303:     {ERR_PACK(ERR_LIB_SSL, SSL_F_SSL_WRITE_EARLY_FINISH, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "338:      \"tls13_setup_key_block\"},",
          "339:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS1_CHANGE_CIPHER_STATE, 0),",
          "340:      \"tls1_change_cipher_state\"},",
          "343:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS1_ENC, 0), \"tls1_enc\"},",
          "344:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS1_EXPORT_KEYING_MATERIAL, 0),",
          "345:      \"tls1_export_keying_material\"},",
          "",
          "[Removed Lines]",
          "341:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS, 0),",
          "342:      \"tls1_check_duplicate_extensions\"},",
          "",
          "[Added Lines]",
          "316:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "358:      \"tls_construct_certificate_authorities\"},",
          "359:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST, 0),",
          "360:      \"tls_construct_certificate_request\"},",
          "363:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY, 0),",
          "364:      \"tls_construct_cert_status_body\"},",
          "365:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CERT_VERIFY, 0),",
          "",
          "[Removed Lines]",
          "361:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CERT_STATUS, 0),",
          "362:      \"tls_construct_cert_status\"},",
          "",
          "[Added Lines]",
          "335:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CERT_STATUS, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "384:      \"tls_construct_client_hello\"},",
          "385:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE, 0),",
          "386:      \"tls_construct_client_key_exchange\"},",
          "389:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_ALPN, 0),",
          "390:      \"tls_construct_ctos_alpn\"},",
          "393:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_COOKIE, 0),",
          "394:      \"tls_construct_ctos_cookie\"},",
          "395:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA, 0),",
          "",
          "[Removed Lines]",
          "387:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, 0),",
          "388:      \"tls_construct_client_verify\"},",
          "391:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE, 0),",
          "392:      \"TLS_CONSTRUCT_CTOS_CERTIFICATE\"},",
          "",
          "[Added Lines]",
          "360:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, 0), \"\"},",
          "363:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "400:      \"tls_construct_ctos_ems\"},",
          "401:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_ETM, 0),",
          "402:      \"tls_construct_ctos_etm\"},",
          "407:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE, 0),",
          "408:      \"tls_construct_ctos_key_share\"},",
          "409:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_NPN, 0),",
          "",
          "[Removed Lines]",
          "403:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_HELLO, 0),",
          "404:      \"TLS_CONSTRUCT_CTOS_HELLO\"},",
          "405:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE, 0),",
          "406:      \"TLS_CONSTRUCT_CTOS_KEY_EXCHANGE\"},",
          "",
          "[Added Lines]",
          "374:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_HELLO, 0), \"\"},",
          "375:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "434:      \"tls_construct_ctos_supported_versions\"},",
          "435:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP, 0),",
          "436:      \"tls_construct_ctos_use_srtp\"},",
          "439:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS, 0),",
          "440:      \"tls_construct_encrypted_extensions\"},",
          "441:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA, 0),",
          "",
          "[Removed Lines]",
          "437:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_VERIFY, 0),",
          "438:      \"TLS_CONSTRUCT_CTOS_VERIFY\"},",
          "",
          "[Added Lines]",
          "406:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_CTOS_VERIFY, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "444:      \"tls_construct_extensions\"},",
          "445:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_FINISHED, 0),",
          "446:      \"tls_construct_finished\"},",
          "449:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST, 0),",
          "450:      \"tls_construct_hello_retry_request\"},",
          "451:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_KEY_UPDATE, 0),",
          "",
          "[Removed Lines]",
          "447:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_HELLO_REQUEST, 0),",
          "448:      \"tls_construct_hello_request\"},",
          "",
          "[Added Lines]",
          "415:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_HELLO_REQUEST, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "462:      \"tls_construct_server_key_exchange\"},",
          "463:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_ALPN, 0),",
          "464:      \"tls_construct_stoc_alpn\"},",
          "467:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG, 0),",
          "468:      \"tls_construct_stoc_cryptopro_bug\"},",
          "471:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA, 0),",
          "472:      \"tls_construct_stoc_early_data\"},",
          "475:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS, 0),",
          "476:      \"tls_construct_stoc_ec_pt_formats\"},",
          "477:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_EMS, 0),",
          "478:      \"tls_construct_stoc_ems\"},",
          "479:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_ETM, 0),",
          "480:      \"tls_construct_stoc_etm\"},",
          "485:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE, 0),",
          "486:      \"tls_construct_stoc_key_share\"},",
          "487:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG, 0),",
          "",
          "[Removed Lines]",
          "465:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE, 0),",
          "466:      \"TLS_CONSTRUCT_STOC_CERTIFICATE\"},",
          "469:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_DONE, 0),",
          "470:      \"TLS_CONSTRUCT_STOC_DONE\"},",
          "473:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO, 0),",
          "474:      \"tls_construct_stoc_early_data_info\"},",
          "481:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_HELLO, 0),",
          "482:      \"TLS_CONSTRUCT_STOC_HELLO\"},",
          "483:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE, 0),",
          "484:      \"TLS_CONSTRUCT_STOC_KEY_EXCHANGE\"},",
          "",
          "[Added Lines]",
          "432:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE, 0), \"\"},",
          "435:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_DONE, 0), \"\"},",
          "438:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO, 0), \"\"},",
          "445:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_HELLO, 0), \"\"},",
          "446:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "506:      \"tls_get_message_body\"},",
          "507:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_GET_MESSAGE_HEADER, 0),",
          "508:      \"tls_get_message_header\"},",
          "511:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PARSE_CTOS_KEY_SHARE, 0),",
          "512:      \"tls_parse_ctos_key_share\"},",
          "513:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PARSE_CTOS_PSK, 0), \"tls_parse_ctos_psk\"},",
          "",
          "[Removed Lines]",
          "509:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT, 0),",
          "510:      \"tls_parse_clienthello_tlsext\"},",
          "",
          "[Added Lines]",
          "471:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "519:      \"tls_parse_stoc_cookie\"},",
          "520:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PARSE_STOC_EARLY_DATA, 0),",
          "521:      \"tls_parse_stoc_early_data\"},",
          "524:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PARSE_STOC_KEY_SHARE, 0),",
          "525:      \"tls_parse_stoc_key_share\"},",
          "526:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PARSE_STOC_PSK, 0), \"tls_parse_stoc_psk\"},",
          "",
          "[Removed Lines]",
          "522:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO, 0),",
          "523:      \"tls_parse_stoc_early_data_info\"},",
          "",
          "[Added Lines]",
          "483:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "536:      \"tls_prepare_client_certificate\"},",
          "537:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, 0),",
          "538:      \"tls_process_certificate_request\"},",
          "541:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PROCESS_CERT_STATUS_BODY, 0),",
          "542:      \"tls_process_cert_status_body\"},",
          "543:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PROCESS_CERT_VERIFY, 0),",
          "",
          "[Removed Lines]",
          "539:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PROCESS_CERT_STATUS, 0),",
          "540:      \"tls_process_cert_status\"},",
          "",
          "[Added Lines]",
          "499:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PROCESS_CERT_STATUS, 0), \"\"},",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "597:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PROCESS_SKE_SRP, 0),",
          "598:      \"tls_process_ske_srp\"},",
          "599:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_PSK_DO_BINDER, 0), \"tls_psk_do_binder\"},",
          "602:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_SETUP_HANDSHAKE, 0),",
          "603:      \"tls_setup_handshake\"},",
          "604:     {ERR_PACK(ERR_LIB_SSL, SSL_F_USE_CERTIFICATE_CHAIN_FILE, 0),",
          "",
          "[Removed Lines]",
          "600:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT, 0),",
          "601:      \"tls_scan_clienthello_tlsext\"},",
          "",
          "[Added Lines]",
          "559:     {ERR_PACK(ERR_LIB_SSL, SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT, 0), \"\"},",
          "",
          "---------------"
        ],
        "util/mkerr.pl||util/mkerr.pl": [
          "File: util/mkerr.pl -> util/mkerr.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: my %ftrans;     # old name -> #define-friendly name (all caps)",
          "122: my %fcodes;     # function-name -> value",
          "123: my $statefile;  # state file with assigned reason and function codes",
          "125: # Read and parse the config file",
          "126: open(IN, \"$config\") || die \"Can't open config file $config, $!,\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: my %strings;    # define -> text",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152: }",
          "153: close IN;",
          "155: if ( ! $statefile ) {",
          "156:     $statefile = $config;",
          "157:     $statefile =~ s/.ec/.txt/;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: my $statefile_prolog = '';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:     # Scan function and reason codes and store them: keep a note of the",
          "167:     # maximum code used.",
          "168:     while ( <STATE> ) {",
          "169:         next if /^#/ || /^$/;",
          "173:         my $lib = $name;",
          "174:         $lib =~ s/_.*//;",
          "175:         $lib = \"SSL\" if $lib =~ /TLS/;",
          "",
          "[Removed Lines]",
          "170:         die \"Bad line in $statefile:\\n$_\\n\" unless /(\\S+)\\s+(\\d+)/;",
          "171:         my $name = $1;",
          "172:         my $code = $2;",
          "",
          "[Added Lines]",
          "170:     my $collecting = 1;",
          "172:         $statefile_prolog .= $_ if $collecting && ( /^#/ || /^$/ );",
          "174:         my $name;",
          "175:         my $code;",
          "176:         if ( /^(.+):(\\d+):\\\\$/ ) {",
          "177:             $name = $1;",
          "178:             $code = $2;",
          "179:             my $next = <STATE>;",
          "180:             $next =~ s/^\\s*(.*)\\s*$/$1/;",
          "181:             die \"Duplicate define $name\" if exists $strings{$name};",
          "182:             $strings{$name} = $next;",
          "183:         } elsif ( /^(\\S+):(\\d+):(.*)$/ ) {",
          "184:             $name = $1;",
          "185:             $code = $2;",
          "186:             die \"Duplicate define $name\" if exists $strings{$name};",
          "187:             $strings{$name} = $3;",
          "188:         } else {",
          "189:             die \"Bad line in $statefile:\\n$_\\n\";",
          "190:         }",
          "191:         $collecting = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "299:         # pretend as we didn't use curly braces: {} -> ()",
          "300:         s/\\{\\}/\\(\\)/gs;",
          "304:             $name =~ tr/[a-z]/[A-Z]/;",
          "305:             $ftrans{$name} = $1;",
          "306:         } elsif ( /[\\(\\)]/ and not(/=/) ) {",
          "",
          "[Removed Lines]",
          "302:         if ( /(\\w+)\\s*\\(\\).*/s ) {    # first token prior [first] () is",
          "303:             my $name = $1;          # a function name!",
          "",
          "[Added Lines]",
          "321:         # Last token just before the first () is a function name.",
          "322:         if ( /(\\w+)\\s*\\(\\).*/s ) {",
          "323:             my $name = $1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:     # Rewrite the C source file containing the error details.",
          "496:     # First, read any existing reason string definitions:",
          "498:     my $cfile = $errorfile{$lib};",
          "522:     my $pack_lib = $internal ? \"ERR_LIB_${lib}\" : \"0\";",
          "523:     my $hincf = $hfile;",
          "524:     $hincf =~ s|.*include/||;",
          "",
          "[Removed Lines]",
          "497:     my %err_reason_strings;",
          "499:     if ( open( IN, \"<$cfile\" ) ) {",
          "500:         my $line = \"\";",
          "501:         while ( <IN> ) {",
          "502:             s|\\R$||;    # Better chomp",
          "503:             $_    = $line . $_;",
          "504:             $line = \"\";",
          "505:             if ( /{ERR_(PACK|FUNC|REASON)\\(/ ) {",
          "506:                 if ( /\\b(${lib}_R_\\w*)\\b.*\\\"(.*)\\\"/ ) {",
          "507:                     $err_reason_strings{$1} = $2;",
          "508:                 } elsif ( /\\b${lib}_F_(\\w*)\\b.*\\\"(.*)\\\"/ ) {",
          "509:                     if ( !exists $ftrans{$1} && $1 ne $2 ) {",
          "510: #                       Don't print warning, too noisy. :(",
          "511: #                       print STDERR \"WARNING: Mismatched/unused function $2\\n\";",
          "512:                         $ftrans{$1} = $2;",
          "513:                     }",
          "514:                 } else {",
          "515:                     $line = $_;",
          "516:                 }",
          "517:             }",
          "518:         }",
          "519:         close(IN);",
          "520:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "555:     # Add each function code: if a function name is found then use it.",
          "556:     foreach my $i ( @function ) {",
          "557:         my $fn;",
          "561:         my $short = \"    {ERR_PACK($pack_lib, $i, 0), \\\"$fn\\\"},\";",
          "562:         if ( length($short) <= 80 ) {",
          "563:             print OUT \"$short\\n\";",
          "",
          "[Removed Lines]",
          "558:         $i =~ /^${lib}_F_(\\S+)$/;",
          "559:         $fn = $1;",
          "560:         $fn = $ftrans{$fn} if exists $ftrans{$fn};",
          "",
          "[Added Lines]",
          "554:         if ( exists $strings{$i} and $strings{$i} ne '' ) {",
          "555:             $fn = $strings{$i};",
          "556:             $fn = \"\" if $fn eq '*';",
          "557:         } else {",
          "558:             $i =~ /^${lib}_F_(\\S+)$/;",
          "559:             $fn = $1;",
          "560:             $fn = $ftrans{$fn} if exists $ftrans{$fn};",
          "561:             $strings{$i} = $fn;",
          "562:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "575:     # Add each reason code.",
          "576:     foreach my $i ( @reasons ) {",
          "577:         my $rn;",
          "580:         } else {",
          "581:             $i =~ /^${lib}_R_(\\S+)$/;",
          "582:             $rn = $1;",
          "583:             $rn =~ tr/_[A-Z]/ [a-z]/;",
          "584:         }",
          "585:         my $short = \"    {ERR_PACK($pack_lib, 0, $i), \\\"$rn\\\"},\";",
          "586:         if ( length($short) <= 80 ) {",
          "",
          "[Removed Lines]",
          "578:         if ( exists $err_reason_strings{$i} ) {",
          "579:             $rn = $err_reason_strings{$i};",
          "",
          "[Added Lines]",
          "580:         if ( exists $strings{$i} ) {",
          "581:             $rn = $strings{$i};",
          "582:             $rn = \"\" if $rn eq '*';",
          "587:             $strings{$i} = $rn;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "653:     }",
          "655:     close OUT;",
          "657: }",
          "659: &phase(\"Ending\");",
          "",
          "[Removed Lines]",
          "656:     undef %err_reason_strings;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "687: if ( $newstate )  {",
          "688:     open(OUT, \">$statefile.new\")",
          "689:         || die \"Can't write $statefile.new, $!\";",
          "690:     foreach my $i ( sort keys %fcodes ) {",
          "692:     }",
          "693:     foreach my $i ( sort keys %rcodes ) {",
          "695:     }",
          "696:     close(OUT);",
          "697:     if ( $skippedstate ) {",
          "",
          "[Removed Lines]",
          "691:         print OUT \"$i $fcodes{$i}\\n\";",
          "694:         print OUT \"$i $rcodes{$i}\\n\" if !exists $rextra{$i};",
          "",
          "[Added Lines]",
          "693:     print OUT $statefile_prolog;",
          "694:     print OUT \"# Function codes\\n\";",
          "696:         my $short = \"$i:$fcodes{$i}:\";",
          "697:         my $t = exists $strings{$i} ? $strings{$i} : \"\";",
          "698:         $t = \"\\\\\\n\\t\" . $t if length($short) + length($t) > 80;",
          "699:         print OUT \"$short$t\\n\";",
          "701:     print OUT \"\\n#Reason codes\\n\";",
          "703:         my $short = \"$i:$rcodes{$i}:\";",
          "704:         my $t = exists $strings{$i} ? \"$strings{$i}\" : \"\";",
          "705:         $t = \"\\\\\\n\\t\" . $t if length($short) + length($t) > 80;",
          "706:         print OUT \"$short$t\\n\" if !exists $rextra{$i};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57389a3261075cc1266218742434aa749cf3733e",
      "candidate_info": {
        "commit_hash": "57389a3261075cc1266218742434aa749cf3733e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/57389a3261075cc1266218742434aa749cf3733e",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c",
          "ssl/tls13_enc.c"
        ],
        "message": "Actually update the keys when a KeyUpdate message is sent or received\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2609)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/tls13_enc.c||ssl/tls13_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2096: # define SSL_F_DANE_CTX_ENABLE                            347",
          "2097: # define SSL_F_DANE_MTYPE_SET                             393",
          "2098: # define SSL_F_DANE_TLSA_ADD                              394",
          "2099: # define SSL_F_DO_DTLS1_WRITE                             245",
          "2100: # define SSL_F_DO_SSL3_WRITE                              104",
          "2101: # define SSL_F_DTLS1_BUFFER_RECORD                        247",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2099: # define SSL_F_DERIVE_SECRET_KEY_AND_IV                   514",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     {ERR_FUNC(SSL_F_DANE_CTX_ENABLE), \"dane_ctx_enable\"},",
          "29:     {ERR_FUNC(SSL_F_DANE_MTYPE_SET), \"dane_mtype_set\"},",
          "30:     {ERR_FUNC(SSL_F_DANE_TLSA_ADD), \"dane_tlsa_add\"},",
          "31:     {ERR_FUNC(SSL_F_DO_DTLS1_WRITE), \"do_dtls1_write\"},",
          "32:     {ERR_FUNC(SSL_F_DO_SSL3_WRITE), \"do_ssl3_write\"},",
          "33:     {ERR_FUNC(SSL_F_DTLS1_BUFFER_RECORD), \"dtls1_buffer_record\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     {ERR_FUNC(SSL_F_DERIVE_SECRET_KEY_AND_IV), \"derive_secret_key_and_iv\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "986:     unsigned char client_finished_secret[EVP_MAX_MD_SIZE];",
          "987:     unsigned char server_finished_secret[EVP_MAX_MD_SIZE];",
          "988:     unsigned char server_finished_hash[EVP_MAX_MD_SIZE];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "989:     unsigned char client_app_traffic_secret[EVP_MAX_MD_SIZE];",
          "990:     unsigned char server_app_traffic_secret[EVP_MAX_MD_SIZE];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2163: __owur size_t tls13_final_finish_mac(SSL *s, const char *str, size_t slen,",
          "2164:                                      unsigned char *p);",
          "2165: __owur int tls13_change_cipher_state(SSL *s, int which);",
          "2166: __owur int tls13_hkdf_expand(SSL *s, const EVP_MD *md,",
          "2167:                              const unsigned char *secret,",
          "2168:                              const unsigned char *label, size_t labellen,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2168: __owur int tls13_update_key(SSL *s, int write);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735:     case TLS_ST_CW_KEY_UPDATE:",
          "736:         if (statem_flush(s) != 1)",
          "737:             return WORK_MORE_A;",
          "738:         break;",
          "739:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:         if (!tls13_update_key(s, 1))",
          "740:             return WORK_ERROR;",
          "",
          "---------------"
        ],
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514: MSG_PROCESS_RETURN tls_process_key_update(SSL *s, PACKET *pkt)",
          "515: {",
          "516:     unsigned int updatetype;",
          "518:     if (!PACKET_get_1(pkt, &updatetype)",
          "519:             || PACKET_remaining(pkt) != 0",
          "520:             || (updatetype != SSL_KEY_UPDATE_NOT_REQUESTED",
          "521:                 && updatetype != SSL_KEY_UPDATE_REQUESTED)) {",
          "523:         SSLerr(SSL_F_TLS_PROCESS_KEY_UPDATE, SSL_R_BAD_KEY_UPDATE);",
          "526:     }",
          "",
          "[Removed Lines]",
          "522:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "524:         ossl_statem_set_error(s);",
          "525:         return MSG_PROCESS_ERROR;",
          "",
          "[Added Lines]",
          "516:     int al;",
          "523:         al = SSL_AD_DECODE_ERROR;",
          "525:         goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:     if (updatetype == SSL_KEY_UPDATE_REQUESTED)",
          "534:         s->key_update = SSL_KEY_UPDATE_NOT_REQUESTED;",
          "536:     return MSG_PROCESS_FINISHED_READING;",
          "537: }",
          "539: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:     if (!tls13_update_key(s, 0)) {",
          "537:         al = SSL_AD_INTERNAL_ERROR;",
          "538:         SSLerr(SSL_F_TLS_PROCESS_KEY_UPDATE, ERR_R_INTERNAL_ERROR);",
          "539:         goto err;",
          "540:     }",
          "543:  err:",
          "544:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "545:     ossl_statem_set_error(s);",
          "546:     return MSG_PROCESS_ERROR;",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:         break;",
          "843:     case TLS_ST_SW_KEY_UPDATE:",
          "844:     case TLS_ST_SW_SESSION_TICKET:",
          "845:         if (SSL_IS_TLS13(s) && statem_flush(s) != 1)",
          "846:             return WORK_MORE_A;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:         if (statem_flush(s) != 1)",
          "845:             return WORK_MORE_A;",
          "847:         if (!tls13_update_key(s, 1))",
          "848:             return WORK_ERROR;",
          "849:         break;",
          "",
          "---------------"
        ],
        "ssl/tls13_enc.c||ssl/tls13_enc.c": [
          "File: ssl/tls13_enc.c -> ssl/tls13_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     return 1;",
          "243: }",
          "245: int tls13_change_cipher_state(SSL *s, int which)",
          "246: {",
          "247:     static const unsigned char client_handshake_traffic[] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245: static int derive_secret_key_and_iv(SSL *s, int write,",
          "246:                                     const unsigned char *insecret,",
          "247:                                     const unsigned char *hash,",
          "248:                                     const unsigned char *label,",
          "249:                                     size_t labellen, unsigned char *secret,",
          "250:                                     unsigned char *iv, EVP_CIPHER_CTX *ciph_ctx)",
          "251: {",
          "252:     unsigned char key[EVP_MAX_KEY_LENGTH];",
          "253:     size_t ivlen, keylen, taglen;",
          "254:     const EVP_MD *md = ssl_handshake_md(s);",
          "255:     size_t hashlen = EVP_MD_size(md);",
          "256:     const EVP_CIPHER *ciph = s->s3->tmp.new_sym_enc;",
          "258:     if (!tls13_hkdf_expand(s, md, insecret, label, labellen, hash, secret,",
          "259:                            hashlen)) {",
          "260:         SSLerr(SSL_F_DERIVE_SECRET_KEY_AND_IV, ERR_R_INTERNAL_ERROR);",
          "261:         goto err;",
          "262:     }",
          "265:     keylen = EVP_CIPHER_key_length(ciph);",
          "266:     if (EVP_CIPHER_mode(ciph) == EVP_CIPH_CCM_MODE) {",
          "267:         ivlen = EVP_CCM_TLS_IV_LEN;",
          "268:         if (s->s3->tmp.new_cipher->algorithm_enc",
          "269:                 & (SSL_AES128CCM8 | SSL_AES256CCM8))",
          "270:             taglen = EVP_CCM8_TLS_TAG_LEN;",
          "271:          else",
          "272:             taglen = EVP_CCM_TLS_TAG_LEN;",
          "273:     } else {",
          "274:         ivlen = EVP_CIPHER_iv_length(ciph);",
          "275:         taglen = 0;",
          "276:     }",
          "278:     if (!tls13_derive_key(s, secret, key, keylen)",
          "279:             || !tls13_derive_iv(s, secret, iv, ivlen)) {",
          "280:         SSLerr(SSL_F_DERIVE_SECRET_KEY_AND_IV, ERR_R_INTERNAL_ERROR);",
          "281:         goto err;",
          "282:     }",
          "284:     if (EVP_CipherInit_ex(ciph_ctx, ciph, NULL, NULL, NULL, write) <= 0",
          "285:         || !EVP_CIPHER_CTX_ctrl(ciph_ctx, EVP_CTRL_AEAD_SET_IVLEN, ivlen, NULL)",
          "286:         || (taglen != 0 && !EVP_CIPHER_CTX_ctrl(ciph_ctx, EVP_CTRL_AEAD_SET_TAG,",
          "287:                                                 taglen, NULL))",
          "288:         || EVP_CipherInit_ex(ciph_ctx, NULL, NULL, key, NULL, -1) <= 0) {",
          "289:         SSLerr(SSL_F_DERIVE_SECRET_KEY_AND_IV, ERR_R_EVP_LIB);",
          "290:         goto err;",
          "291:     }",
          "293: #ifdef OPENSSL_SSL_TRACE_CRYPTO",
          "294:     if (s->msg_callback) {",
          "295:         int wh = write ? TLS1_RT_CRYPTO_WRITE : 0;",
          "297:         if (ciph->key_len)",
          "298:             s->msg_callback(2, s->version, wh | TLS1_RT_CRYPTO_KEY,",
          "299:                             key, ciph->key_len, s, s->msg_callback_arg);",
          "301:         wh |= TLS1_RT_CRYPTO_IV;",
          "302:         s->msg_callback(2, s->version, wh, iv, ivlen, s,",
          "303:                         s->msg_callback_arg);",
          "304:     }",
          "305: #endif",
          "307:     return 1;",
          "308:  err:",
          "309:     OPENSSL_cleanse(key, sizeof(key));",
          "310:     return 0;",
          "311: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:         \"server application traffic secret\";",
          "255:     static const unsigned char resumption_master_secret[] =",
          "256:         \"resumption master secret\";",
          "258:     unsigned char *iv;",
          "259:     unsigned char secret[EVP_MAX_MD_SIZE];",
          "260:     unsigned char hashval[EVP_MAX_MD_SIZE];",
          "",
          "[Removed Lines]",
          "257:     unsigned char key[EVP_MAX_KEY_LENGTH];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:     unsigned char *finsecret = NULL;",
          "264:     const char *log_label = NULL;",
          "265:     EVP_CIPHER_CTX *ciph_ctx;",
          "268:     const unsigned char *label;",
          "269:     size_t labellen, hashlen = 0;",
          "270:     int ret = 0;",
          "",
          "[Removed Lines]",
          "266:     const EVP_CIPHER *ciph = s->s3->tmp.new_sym_enc;",
          "267:     size_t ivlen, keylen, taglen, finsecretlen = 0;",
          "",
          "[Added Lines]",
          "333:     size_t finsecretlen = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "350:     if (label == server_application_traffic)",
          "351:         memcpy(s->server_finished_hash, hashval, hashlen);",
          "359:     if (label == client_application_traffic) {",
          "",
          "[Removed Lines]",
          "353:     if (!tls13_hkdf_expand(s, ssl_handshake_md(s), insecret, label, labellen,",
          "354:                            hash, secret, hashlen)) {",
          "355:         SSLerr(SSL_F_TLS13_CHANGE_CIPHER_STATE, ERR_R_INTERNAL_ERROR);",
          "356:         goto err;",
          "357:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "371:         s->session->master_key_length = hashlen;",
          "372:     }",
          "386:     }",
          "388:     if (!ssl_log_secret(s, log_label, secret, hashlen)) {",
          "389:         SSLerr(SSL_F_TLS13_CHANGE_CIPHER_STATE, ERR_R_INTERNAL_ERROR);",
          "390:         goto err;",
          "391:     }",
          "400:         SSLerr(SSL_F_TLS13_CHANGE_CIPHER_STATE, ERR_R_INTERNAL_ERROR);",
          "401:         goto err;",
          "402:     }",
          "425:     }",
          "428:     ret = 1;",
          "429:  err:",
          "430:     OPENSSL_cleanse(secret, sizeof(secret));",
          "432:     return ret;",
          "433: }",
          "",
          "[Removed Lines]",
          "375:     keylen = EVP_CIPHER_key_length(ciph);",
          "376:     if (EVP_CIPHER_mode(ciph) == EVP_CIPH_CCM_MODE) {",
          "377:         ivlen = EVP_CCM_TLS_IV_LEN;",
          "378:         if (s->s3->tmp.new_cipher->algorithm_enc",
          "379:                 & (SSL_AES128CCM8 | SSL_AES256CCM8))",
          "380:             taglen = EVP_CCM8_TLS_TAG_LEN;",
          "381:          else",
          "382:             taglen = EVP_CCM_TLS_TAG_LEN;",
          "383:     } else {",
          "384:         ivlen = EVP_CIPHER_iv_length(ciph);",
          "385:         taglen = 0;",
          "393:     if (!tls13_derive_key(s, secret, key, keylen)",
          "394:             || !tls13_derive_iv(s, secret, iv, ivlen)",
          "395:             || (finsecret != NULL && !tls13_derive_finishedkey(s,",
          "396:                                                            ssl_handshake_md(s),",
          "397:                                                            secret,",
          "398:                                                            finsecret,",
          "399:                                                            finsecretlen))) {",
          "404:     if (EVP_CipherInit_ex(ciph_ctx, ciph, NULL, NULL, NULL,",
          "405:                           (which & SSL3_CC_WRITE)) <= 0",
          "406:         || !EVP_CIPHER_CTX_ctrl(ciph_ctx, EVP_CTRL_AEAD_SET_IVLEN, ivlen, NULL)",
          "407:         || (taglen != 0 && !EVP_CIPHER_CTX_ctrl(ciph_ctx, EVP_CTRL_AEAD_SET_TAG,",
          "408:                                                 taglen, NULL))",
          "409:         || EVP_CipherInit_ex(ciph_ctx, NULL, NULL, key, NULL, -1) <= 0) {",
          "410:         SSLerr(SSL_F_TLS13_CHANGE_CIPHER_STATE, ERR_R_EVP_LIB);",
          "411:         goto err;",
          "412:     }",
          "414: #ifdef OPENSSL_SSL_TRACE_CRYPTO",
          "415:     if (s->msg_callback) {",
          "416:         int wh = which & SSL3_CC_WRITE ? TLS1_RT_CRYPTO_WRITE : 0;",
          "418:         if (ciph->key_len)",
          "419:             s->msg_callback(2, s->version, wh | TLS1_RT_CRYPTO_KEY,",
          "420:                             key, ciph->key_len, s, s->msg_callback_arg);",
          "422:         wh |= TLS1_RT_CRYPTO_IV;",
          "423:         s->msg_callback(2, s->version, wh, iv, ivlen, s,",
          "424:                         s->msg_callback_arg);",
          "426: #endif",
          "431:     OPENSSL_cleanse(key, sizeof(key));",
          "",
          "[Added Lines]",
          "434:     if (!derive_secret_key_and_iv(s, which & SSL3_CC_WRITE, insecret, hash,",
          "435:                                   label, labellen, secret, iv, ciph_ctx)) {",
          "436:         goto err;",
          "439:     if (label == server_application_traffic)",
          "440:         memcpy(s->server_app_traffic_secret, secret, hashlen);",
          "441:     else if (label == client_application_traffic)",
          "442:         memcpy(s->client_app_traffic_secret, secret, hashlen);",
          "449:     if (finsecret != NULL",
          "450:             && !tls13_derive_finishedkey(s, ssl_handshake_md(s), secret,",
          "451:                                          finsecret, finsecretlen)) {",
          "456:     ret = 1;",
          "457:  err:",
          "458:     OPENSSL_cleanse(secret, sizeof(secret));",
          "459:     return ret;",
          "460: }",
          "462: int tls13_update_key(SSL *s, int write)",
          "463: {",
          "464:     static const unsigned char application_traffic[] =",
          "465:         \"application traffic secret\";",
          "466:     const EVP_MD *md = ssl_handshake_md(s);",
          "467:     size_t hashlen = EVP_MD_size(md);",
          "468:     unsigned char *insecret, *iv;",
          "469:     unsigned char secret[EVP_MAX_MD_SIZE];",
          "470:     EVP_CIPHER_CTX *ciph_ctx;",
          "471:     int ret = 0;",
          "473:     if (s->server == write)",
          "474:         insecret = s->server_app_traffic_secret;",
          "475:     else",
          "476:         insecret = s->client_app_traffic_secret;",
          "478:     if (write) {",
          "479:         iv = s->write_iv;",
          "480:         ciph_ctx = s->enc_write_ctx;",
          "481:         RECORD_LAYER_reset_write_sequence(&s->rlayer);",
          "482:     } else {",
          "483:         iv = s->read_iv;",
          "484:         ciph_ctx = s->enc_read_ctx;",
          "485:         RECORD_LAYER_reset_read_sequence(&s->rlayer);",
          "488:     if (!derive_secret_key_and_iv(s, write, insecret, NULL, application_traffic,",
          "489:                                   sizeof(application_traffic) - 1, secret, iv,",
          "490:                                   ciph_ctx))",
          "491:         goto err;",
          "493:     memcpy(insecret, secret, hashlen);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c62f9e1639a7d1a879f363a99882920104dfedb",
      "candidate_info": {
        "commit_hash": "6c62f9e1639a7d1a879f363a99882920104dfedb",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6c62f9e1639a7d1a879f363a99882920104dfedb",
        "files": [
          "Configure",
          "apps/openssl.c",
          "apps/s_cb.c",
          "apps/s_client.c",
          "apps/s_server.c",
          "include/openssl/ssl.h",
          "include/openssl/ssl3.h",
          "include/openssl/tls1.h",
          "ssl/s3_lib.c",
          "ssl/ssl_err.c",
          "ssl/t1_trce.c",
          "util/mkdef.pl"
        ],
        "message": "Remove heartbeats completely\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1669)",
        "before_after_code_files": [
          "apps/openssl.c||apps/openssl.c",
          "apps/s_cb.c||apps/s_cb.c",
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c",
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "include/openssl/ssl3.h||include/openssl/ssl3.h",
          "include/openssl/tls1.h||include/openssl/tls1.h",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/t1_trce.c||ssl/t1_trce.c",
          "util/mkdef.pl||util/mkdef.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/openssl.c||apps/openssl.c": [
          "File: apps/openssl.c -> apps/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628: #ifdef OPENSSL_NO_GOST",
          "629:     BIO_puts(bio_out, \"GOST\\n\");",
          "630: #endif",
          "634: #ifdef OPENSSL_NO_IDEA",
          "635:     BIO_puts(bio_out, \"IDEA\\n\");",
          "636: #endif",
          "",
          "[Removed Lines]",
          "631: #ifdef OPENSSL_NO_HEARTBEATS",
          "632:     BIO_puts(bio_out, \"HEARTBEATS\\n\");",
          "633: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/s_cb.c||apps/s_cb.c": [
          "File: apps/s_cb.c -> apps/s_cb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:         case 23:",
          "556:             str_content_type = \"ApplicationData\";",
          "557:             break;",
          "574:         }",
          "575:     }",
          "",
          "[Removed Lines]",
          "558: #ifndef OPENSSL_NO_HEARTBEATS",
          "559:         case 24:",
          "560:             str_details1 = \", Heartbeat\";",
          "562:             if (len > 0) {",
          "563:                 switch (bp[0]) {",
          "564:                 case 1:",
          "565:                     str_details1 = \", HeartbeatRequest\";",
          "566:                     break;",
          "567:                 case 2:",
          "568:                     str_details1 = \", HeartbeatResponse\";",
          "569:                     break;",
          "570:                 }",
          "571:             }",
          "572:             break;",
          "573: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "611:     {\"SRP\", TLSEXT_TYPE_srp},",
          "612:     {\"signature algorithms\", TLSEXT_TYPE_signature_algorithms},",
          "613:     {\"use SRTP\", TLSEXT_TYPE_use_srtp},",
          "615:     {\"session ticket\", TLSEXT_TYPE_session_ticket},",
          "616:     {\"renegotiation info\", TLSEXT_TYPE_renegotiate},",
          "617:     {\"signed certificate timestamps\", TLSEXT_TYPE_signed_certificate_timestamp},",
          "",
          "[Removed Lines]",
          "614:     {\"heartbeat\", TLSEXT_TYPE_heartbeat},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2448:                 SSL_renegotiate(con);",
          "2449:                 cbuf_len = 0;",
          "2450:             }",
          "2458:             else {",
          "2459:                 cbuf_len = i;",
          "2460:                 cbuf_off = 0;",
          "",
          "[Removed Lines]",
          "2451: #ifndef OPENSSL_NO_HEARTBEATS",
          "2452:             else if ((!c_ign_eof) && (cbuf[0] == 'B' && cmdletters)) {",
          "2453:                 BIO_printf(bio_err, \"HEARTBEATING\\n\");",
          "2454:                 SSL_heartbeat(con);",
          "2455:                 cbuf_len = 0;",
          "2456:             }",
          "2457: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2227:                     goto err;",
          "2228:                 }",
          "2237:                 if ((buf[0] == 'r') && ((buf[1] == '\\n') || (buf[1] == '\\r'))) {",
          "2238:                     SSL_renegotiate(con);",
          "2239:                     i = SSL_do_handshake(con);",
          "",
          "[Removed Lines]",
          "2229: #ifndef OPENSSL_NO_HEARTBEATS",
          "2230:                 if ((buf[0] == 'B') && ((buf[1] == '\\n') || (buf[1] == '\\r'))) {",
          "2231:                     BIO_printf(bio_err, \"HEARTBEATING\\n\");",
          "2232:                     SSL_heartbeat(con);",
          "2233:                     i = 0;",
          "2234:                     continue;",
          "2235:                 }",
          "2236: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "509: # define SSL_get_secure_renegotiation_support(ssl) \\",
          "510:         SSL_ctrl((ssl), SSL_CTRL_GET_RI_SUPPORT, 0, NULL)",
          "517: # define SSL_CTX_set_cert_flags(ctx,op) \\",
          "518:         SSL_CTX_ctrl((ctx),SSL_CTRL_CERT_FLAGS,(op),NULL)",
          "519: # define SSL_set_cert_flags(s,op) \\",
          "",
          "[Removed Lines]",
          "512: # ifndef OPENSSL_NO_HEARTBEATS",
          "513: #  define SSL_heartbeat(ssl) \\",
          "514:         SSL_ctrl((ssl),SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT,0,NULL)",
          "515: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1095: # define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME               79",
          "1096: # define SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH               80",
          "1097: # define SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD               81",
          "1103: # define DTLS_CTRL_GET_TIMEOUT           73",
          "1104: # define DTLS_CTRL_HANDLE_TIMEOUT        74",
          "1105: # define SSL_CTRL_GET_RI_SUPPORT                 76",
          "",
          "[Removed Lines]",
          "1098: # ifndef OPENSSL_NO_HEARTBEATS",
          "1099: #  define SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT               85",
          "1100: #  define SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING        86",
          "1101: #  define SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS    87",
          "1102: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2085: # define SSL_F_DO_SSL3_WRITE                              104",
          "2086: # define SSL_F_DTLS1_BUFFER_RECORD                        247",
          "2087: # define SSL_F_DTLS1_CHECK_TIMEOUT_NUM                    318",
          "2089: # define SSL_F_DTLS1_PREPROCESS_FRAGMENT                  288",
          "2090: # define SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS             424",
          "2091: # define SSL_F_DTLS1_PROCESS_RECORD                       257",
          "",
          "[Removed Lines]",
          "2088: # define SSL_F_DTLS1_HEARTBEAT                            305",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2510: # define SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE             1111",
          "2511: # define SSL_R_TLSV1_UNRECOGNIZED_NAME                    1112",
          "2512: # define SSL_R_TLSV1_UNSUPPORTED_EXTENSION                1110",
          "2515: # define SSL_R_TLS_ILLEGAL_EXPORTER_LABEL                 367",
          "2516: # define SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST             157",
          "2517: # define SSL_R_TOO_MANY_WARN_ALERTS                       409",
          "",
          "[Removed Lines]",
          "2513: # define SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT           365",
          "2514: # define SSL_R_TLS_HEARTBEAT_PENDING                      366",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/ssl3.h||include/openssl/ssl3.h": [
          "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: # define SSL3_RT_ALERT                   21",
          "205: # define SSL3_RT_HANDSHAKE               22",
          "206: # define SSL3_RT_APPLICATION_DATA        23",
          "210: # define TLS1_RT_CRYPTO                  0x1000",
          "",
          "[Removed Lines]",
          "207: # define DTLS1_RT_HEARTBEAT              24",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/tls1.h||include/openssl/tls1.h": [
          "File: include/openssl/tls1.h -> include/openssl/tls1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: # define TLSEXT_TYPE_use_srtp    14",
          "153: # define TLSEXT_TYPE_application_layer_protocol_negotiation 16",
          "",
          "[Removed Lines]",
          "150: # define TLSEXT_TYPE_heartbeat   15",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325: # define SSL_CTX_set_tlsext_ticket_key_cb(ssl, cb) \\",
          "326: SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB,(void (*)(void))cb)",
          "358: # define TLS1_CK_PSK_WITH_RC4_128_SHA                    0x0300008A",
          "359: # define TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA               0x0300008B",
          "",
          "[Removed Lines]",
          "328: # ifndef OPENSSL_NO_HEARTBEATS",
          "329: #  define SSL_DTLSEXT_HB_ENABLED                   0x01",
          "330: #  define SSL_DTLSEXT_HB_DONT_SEND_REQUESTS        0x02",
          "331: #  define SSL_DTLSEXT_HB_DONT_RECV_REQUESTS        0x04",
          "332: #  define SSL_get_dtlsext_heartbeat_pending(ssl) \\",
          "333:         SSL_ctrl((ssl),SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING,0,NULL)",
          "334: #  define SSL_set_dtlsext_heartbeat_no_requests(ssl, arg) \\",
          "335:         SSL_ctrl((ssl),SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS,arg,NULL)",
          "337: #  if OPENSSL_API_COMPAT < 0x10100000L",
          "338: #   define SSL_CTRL_TLS_EXT_SEND_HEARTBEAT \\",
          "339:         SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT",
          "340: #   define SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING \\",
          "341:         SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING",
          "342: #   define SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS \\",
          "343:         SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS",
          "344: #   define SSL_TLSEXT_HB_ENABLED \\",
          "345:         SSL_DTLSEXT_HB_ENABLED",
          "346: #   define SSL_TLSEXT_HB_DONT_SEND_REQUESTS \\",
          "347:         SSL_DTLSEXT_HB_DONT_SEND_REQUESTS",
          "348: #   define SSL_TLSEXT_HB_DONT_RECV_REQUESTS \\",
          "349:         SSL_DTLSEXT_HB_DONT_RECV_REQUESTS",
          "350: #   define SSL_get_tlsext_heartbeat_pending(ssl) \\",
          "351:         SSL_get_dtlsext_heartbeat_pending(ssl)",
          "352: #   define SSL_set_tlsext_heartbeat_no_requests(ssl, arg) \\",
          "353:         SSL_set_dtlsext_heartbeat_no_requests(ssl, arg)",
          "354: #  endif",
          "355: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3047:         ret = 1;",
          "3048:         break;",
          "3057:     case SSL_CTRL_CHAIN:",
          "3058:         if (larg)",
          "3059:             return ssl_cert_set1_chain(s, NULL, (STACK_OF(X509) *)parg);",
          "",
          "[Removed Lines]",
          "3050: #ifndef OPENSSL_NO_HEARTBEATS",
          "3051:     case SSL_CTRL_DTLS_EXT_SEND_HEARTBEAT:",
          "3052:     case SSL_CTRL_GET_DTLS_EXT_HEARTBEAT_PENDING:",
          "3053:     case SSL_CTRL_SET_DTLS_EXT_HEARTBEAT_NO_REQUESTS:",
          "3054:         break;",
          "3055: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     {ERR_FUNC(SSL_F_DO_SSL3_WRITE), \"do_ssl3_write\"},",
          "31:     {ERR_FUNC(SSL_F_DTLS1_BUFFER_RECORD), \"dtls1_buffer_record\"},",
          "32:     {ERR_FUNC(SSL_F_DTLS1_CHECK_TIMEOUT_NUM), \"dtls1_check_timeout_num\"},",
          "34:     {ERR_FUNC(SSL_F_DTLS1_PREPROCESS_FRAGMENT), \"dtls1_preprocess_fragment\"},",
          "35:     {ERR_FUNC(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS),",
          "36:      \"dtls1_process_buffered_records\"},",
          "",
          "[Removed Lines]",
          "33:     {ERR_FUNC(SSL_F_DTLS1_HEARTBEAT), \"dtls1_heartbeat\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "620:     {ERR_REASON(SSL_R_TLSV1_UNRECOGNIZED_NAME), \"tlsv1 unrecognized name\"},",
          "621:     {ERR_REASON(SSL_R_TLSV1_UNSUPPORTED_EXTENSION),",
          "622:      \"tlsv1 unsupported extension\"},",
          "627:     {ERR_REASON(SSL_R_TLS_ILLEGAL_EXPORTER_LABEL),",
          "628:      \"tls illegal exporter label\"},",
          "629:     {ERR_REASON(SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST),",
          "",
          "[Removed Lines]",
          "623:     {ERR_REASON(SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT),",
          "624:      \"peer does not accept heartbeats\"},",
          "625:     {ERR_REASON(SSL_R_TLS_HEARTBEAT_PENDING),",
          "626:      \"heartbeat request already pending\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_trce.c||ssl/t1_trce.c": [
          "File: ssl/t1_trce.c -> ssl/t1_trce.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:         }",
          "711:         break;",
          "716:     case TLSEXT_TYPE_session_ticket:",
          "717:         if (extlen != 0)",
          "718:             ssl_print_hex(bio, indent + 4, \"ticket\", ext, extlen);",
          "",
          "[Removed Lines]",
          "713:     case TLSEXT_TYPE_heartbeat:",
          "714:         return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     # RFC3779",
          "102:     \"RFC3779\",",
          "103:     # TLS",
          "105:     # CMS",
          "106:     \"CMS\",",
          "107:                          \"OCSP\",",
          "",
          "[Removed Lines]",
          "104:     \"PSK\", \"SRP\", \"HEARTBEATS\",",
          "",
          "[Added Lines]",
          "104:     \"PSK\", \"SRP\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f35b7d9c5f41cac834c9fe20a16757adbd06535",
      "candidate_info": {
        "commit_hash": "7f35b7d9c5f41cac834c9fe20a16757adbd06535",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7f35b7d9c5f41cac834c9fe20a16757adbd06535",
        "files": [
          "include/openssl/ssl.h"
        ],
        "message": "Update function error code\n\nA function error code needed updating due to merge issues.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2066: # define SSL_F_DTLS1_CHECK_TIMEOUT_NUM                    318",
          "2067: # define SSL_F_DTLS1_HEARTBEAT                            305",
          "2068: # define SSL_F_DTLS1_PREPROCESS_FRAGMENT                  288",
          "2070: # define SSL_F_DTLS1_PROCESS_RECORD                       257",
          "2071: # define SSL_F_DTLS1_READ_BYTES                           258",
          "2072: # define SSL_F_DTLS1_READ_FAILED                          339",
          "",
          "[Removed Lines]",
          "2069: # define SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS             423",
          "",
          "[Added Lines]",
          "2069: # define SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS             424",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "738ad946ddf7cbb839447981304df89f5f83b18b",
      "candidate_info": {
        "commit_hash": "738ad946ddf7cbb839447981304df89f5f83b18b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/738ad946ddf7cbb839447981304df89f5f83b18b",
        "files": [
          "ssl/record/rec_layer_d1.c",
          "ssl/record/ssl3_record.c"
        ],
        "message": "Fix DTLS unprocessed records bug\n\nDuring a DTLS handshake we may get records destined for the next epoch\narrive before we have processed the CCS. In that case we can't decrypt or\nverify the record yet, so we buffer it for later use. When we do receive\nthe CCS we work through the queue of unprocessed records and process them.\n\nUnfortunately the act of processing wipes out any existing packet data\nthat we were still working through. This includes any records from the new\nepoch that were in the same packet as the CCS. We should only process the\nbuffered records if we've not got any data left.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ],
          "candidate": [
            "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
          "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: int dtls1_process_buffered_records(SSL *s)",
          "230: {",
          "231:     pitem *item;",
          "233:     item = pqueue_peek(s->rlayer.d->unprocessed_rcds.q);",
          "234:     if (item) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:     SSL3_BUFFER *rb;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:         if (s->rlayer.d->unprocessed_rcds.epoch != s->rlayer.d->r_epoch)",
          "240:         while (pqueue_peek(s->rlayer.d->unprocessed_rcds.q)) {",
          "241:             dtls1_get_unprocessed_record(s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:         rb = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "242:         if (SSL3_BUFFER_get_left(rb) > 0) {",
          "249:             return 1;",
          "250:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1115:     if (rr->epoch == s->rlayer.d->r_epoch)",
          "1116:         return &s->rlayer.d->bitmap;",
          "1119:     else if (rr->epoch == (unsigned long)(s->rlayer.d->r_epoch + 1) &&",
          "1120:              (rr->type == SSL3_RT_HANDSHAKE || rr->type == SSL3_RT_ALERT)) {",
          "1122:         return &s->rlayer.d->next_bitmap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1137:              s->rlayer.d->unprocessed_rcds.epoch != s->rlayer.d->r_epoch &&",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1468:     rr = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1470:  again:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1479:         return 1;",
          "1484:     if ((RECORD_LAYER_get_rstate(&s->rlayer) != SSL_ST_READ_BODY) ||",
          "1485:         (RECORD_LAYER_get_packet_length(&s->rlayer) < DTLS1_RT_HEADER_LENGTH)) {",
          "",
          "[Removed Lines]",
          "1482:  again:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}