{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07312a6b06b09d64e964c2e346cd253d839c3132",
      "candidate_info": {
        "commit_hash": "07312a6b06b09d64e964c2e346cd253d839c3132",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07312a6b06b09d64e964c2e346cd253d839c3132",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a typo in an option name for the .dbconfig command in shell.c.in: s/wriable_schema/writable_schema/\n\nFossilOrigin-Name: 1c58522e49cd91426bca7efccf0d99e0f2803dcd5991ae5d56166fc5510e4c62",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45bfcb88e71451a656982e217375e257fc8e68374349c2984be1266bf86fb8cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7084:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7085:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7086:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7088:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7089:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7090:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "",
          "[Removed Lines]",
          "7087:         { \"wriable_schema\",     SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "",
          "[Added Lines]",
          "7087:         { \"writable_schema\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee253f7881ddf736ab67d15ccd8df97027111fd4",
      "candidate_info": {
        "commit_hash": "ee253f7881ddf736ab67d15ccd8df97027111fd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee253f7881ddf736ab67d15ccd8df97027111fd4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Add options to wapptest.tcl similar to those supported by releasetest.tcl. Also add the -noui switch, for running without wapp altogether.\n\nFossilOrigin-Name: 005a169406ccea6e3cc42271620870d985e8bada1ad49a63656003db4911cb51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c509d8a8aebe0da4847e95cf737c21313a665de9a540da2db57b8ed22f98a402",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: set G(platform) $::tcl_platform(os)-$::tcl_platform(machine)",
          "22: set G(test)     Normal",
          "23: set G(keep)     1",
          "25: set G(tcl)      [::tcl::pkgconfig get libdir,install]",
          "26: set G(jobs)     3",
          "27: set G(debug)    0",
          "29: proc wapptest_init {} {",
          "30:   global G",
          "33:   foreach k $lSave { set A($k) $G($k) }",
          "34:   array unset G",
          "35:   foreach k $lSave { set G($k) $A($k) }",
          "",
          "[Removed Lines]",
          "24: set G(msvc)     [expr {$::tcl_platform(platform)==\"windows\"}]",
          "32:   set lSave [list platform test keep msvc tcl jobs debug]",
          "",
          "[Added Lines]",
          "24: set G(msvc)     0",
          "29: set G(noui)     0",
          "30: set G(stdout)   0",
          "36:   set lSave [list platform test keep msvc tcl jobs debug noui stdout]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   append G(host) \" $::tcl_platform(machine) $::tcl_platform(byteOrder)\"",
          "50: }",
          "52: # Generate the text for the box at the top of the UI. The current SQLite",
          "53: # version, according to fossil, along with a warning if there are",
          "54: # uncommitted changes in the checkout.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: proc wapptest_run {} {",
          "57:   global G",
          "58:   set_test_array",
          "59:   set G(state) \"running\"",
          "61:   wapptest_openlog",
          "63:   wapptest_output \"Running the following for $G(platform). $G(jobs) jobs.\"",
          "64:   foreach t $G(test_array) {",
          "65:     set config [dict get $t config]",
          "66:     set target [dict get $t target]",
          "67:     wapptest_output [format \"    %-25s%s\" $config $target]",
          "68:   }",
          "69:   wapptest_output [string repeat * 70]",
          "70: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:   }",
          "198: }",
          "200: # This command is invoked once a slave process has finished running its",
          "201: # tests, successfully or otherwise. Parameter $name is the name of the",
          "202: # test, $rc the exit code returned by the slave process.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: proc wapptest_output {str} {",
          "221:   global G",
          "222:   if {$G(stdout)} { puts $str }",
          "223:   if {[info exists G(log)]} {",
          "224:     puts $G(log) $str",
          "225:     flush $G(log)",
          "226:   }",
          "227: }",
          "228: proc wapptest_openlog {} {",
          "229:   global G",
          "230:   set G(log) [open wapptest-out.txt w+]",
          "231: }",
          "232: proc wapptest_closelog {} {",
          "233:   global G",
          "234:   close $G(log)",
          "235:   unset G(log)",
          "236: }",
          "238: proc format_seconds {seconds} {",
          "239:   set min [format %.2d [expr ($seconds / 60) % 60]]",
          "240:   set  hr [format %.2d [expr $seconds / 3600]]",
          "241:   set sec [format %.2d [expr $seconds % 60]]",
          "242:   return \"$hr:$min:$sec\"",
          "243: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:       }",
          "234:     }",
          "235:   }",
          "236: }",
          "238: # This is a fileevent callback invoked each time a file-descriptor that",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:   # Format a message regarding the success or failure of hte test.",
          "283:   set t [format_seconds [expr $G(test.$name.done) - $G(test.$name.start)]]",
          "284:   set res \"OK\"",
          "285:   if {$G(test.$name.nError)} { set res \"FAILED\" }",
          "286:   set dots [string repeat . [expr 60 - [string length $name]]]",
          "287:   set msg \"$name $dots $res ($t)\"",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "292:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "372:       incr nConfig",
          "373:     }",
          "374:     set G(result) \"$nError errors from $nTest tests in $nConfig configurations.\"",
          "375:     catch {",
          "376:       append G(result) \" SQLite version $G(sqlite_version)\"",
          "377:     }",
          "378:     set G(state) \"stopped\"",
          "379:   } else {",
          "380:     set nLaunch [expr $G(jobs) - $nRunning]",
          "381:     foreach j $G(test_array) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "432:     wapptest_output [string repeat * 70]",
          "433:     wapptest_output $G(result)",
          "436:       wapptest_output \" SQLite version $G(sqlite_version)\"",
          "439:     wapptest_closelog",
          "440:     if {$G(noui)} { exit 0 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "543:         }",
          "544:         set seconds [expr $G(test.$config.done) - $G(test.$config.start)]",
          "545:       }",
          "551:     }",
          "553:     wapp-trim {",
          "",
          "[Removed Lines]",
          "547:       set min [format %.2d [expr ($seconds / 60) % 60]]",
          "548:       set  hr [format %.2d [expr $seconds / 3600]]",
          "549:       set sec [format %.2d [expr $seconds % 60]]",
          "550:       set seconds \"$hr:$min:$sec\"",
          "",
          "[Added Lines]",
          "608:       set seconds [format_seconds $seconds]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "607:   if {[wapp-param-exists control_run]} {",
          "608:     # This is a \"run test\" command.",
          "611:   }",
          "613:   if {[wapp-param-exists control_stop]} {",
          "",
          "[Removed Lines]",
          "609:     set_test_array",
          "610:     set ::G(state) \"running\"",
          "",
          "[Added Lines]",
          "667:     wapptest_run",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "622:         slave_test_done $name 1",
          "623:       }",
          "624:     }",
          "625:   }",
          "627:   if {[wapp-param-exists control_reset]} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:     wapptest_closelog",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "773:   }",
          "774: }",
          "776: wapptest_init",
          "",
          "[Removed Lines]",
          "777: wapp-start $argv",
          "",
          "[Added Lines]",
          "834: # Print out a usage message. Then do [exit 1].",
          "835: #",
          "836: proc wapptest_usage {} {",
          "837:   puts stderr {",
          "838: This Tcl script is used to test various configurations of SQLite. By",
          "839: default it uses \"wapp\" to provide an interactive interface. Supported",
          "840: command line options (all optional) are:",
          "842:     --platform    PLATFORM         (which tests to run)",
          "843:     --smoketest                    (run \"make smoketest\" only)",
          "844:     --veryquick                    (run veryquick.test only)",
          "845:     --buildonly                    (build executables, do not run tests)",
          "846:     --jobs        N                (number of concurrent jobs)",
          "847:     --tcl         DIR              (where to find tclConfig.sh)",
          "848:     --deletefiles                  (delete extra files after each test)",
          "849:     --msvc                         (Use MS Visual C)",
          "850:     --debug                        (Also run [n]debugging versions of tests)",
          "851:     --noui                         (do not use wapp)",
          "852:   }",
          "853:   exit 1",
          "854: }",
          "856: # Sort command line arguments into two groups: those that belong to wapp,",
          "857: # and those that belong to the application.",
          "858: set WAPPARG(-server)      1",
          "859: set WAPPARG(-local)       1",
          "860: set WAPPARG(-scgi)        1",
          "861: set WAPPARG(-remote-scgi) 1",
          "862: set WAPPARG(-fromip)      1",
          "863: set WAPPARG(-nowait)      0",
          "864: set WAPPARG(-cgi)         0",
          "865: set lWappArg [list]",
          "866: set lTestArg [list]",
          "867: for {set i 0} {$i < [llength $argv]} {incr i} {",
          "868:   set arg [lindex $argv $i]",
          "869:   if {[string range $arg 0 1]==\"--\"} {",
          "870:     set arg [string range $arg 1 end]",
          "871:   }",
          "872:   if {[info exists WAPPARG($arg)]} {",
          "873:     lappend lWappArg $arg",
          "874:     if {$WAPPARG($arg)} {",
          "875:       incr i",
          "876:       lappend lWappArg [lindex $argv $i]",
          "877:     }",
          "878:   } else {",
          "879:     lappend lTestArg $arg",
          "880:   }",
          "881: }",
          "883: for {set i 0} {$i < [llength $lTestArg]} {incr i} {",
          "884:   switch -- [lindex $lTestArg $i] {",
          "885:     -platform {",
          "886:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "887:       incr i",
          "888:       set arg [lindex $lTestArg $i]",
          "889:       set lPlatform [array names ::Platforms]",
          "890:       if {[lsearch $lPlatform $arg]<0} {",
          "891:         puts stderr \"No such platform: $arg. Platforms are: $lPlatform\"",
          "892:         exit -1",
          "893:       }",
          "894:       set G(platform) $arg",
          "895:     }",
          "897:     -smoketest { set G(test) Smoketest }",
          "898:     -veryquick { set G(test) Veryquick }",
          "899:     -buildonly { set G(test) Build-Only }",
          "900:     -jobs {",
          "901:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "902:       incr i",
          "903:       set G(jobs) [lindex $lTestArg $i]",
          "904:     }",
          "906:     -tcl {",
          "907:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "908:       incr i",
          "909:       set G(tcl) [lindex $lTestArg $i]",
          "910:     }",
          "912:     -deletefiles {",
          "913:       set G(keep) 0",
          "914:     }",
          "916:     -msvc {",
          "917:       set G(msvc) 1",
          "918:     }",
          "920:     -debug {",
          "921:       set G(debug) 1",
          "922:     }",
          "924:     -noui {",
          "925:       set G(noui) 1",
          "926:       set G(stdout) 1",
          "927:     }",
          "929:     -stdout {",
          "930:       set G(stdout) 1",
          "931:     }",
          "933:     default {",
          "934:       puts stderr \"Unrecognized option: [lindex $lTestArg $i]\"",
          "935:       wapptest_usage",
          "936:     }",
          "937:   }",
          "938: }",
          "941: if {$G(noui)==0} {",
          "942:   wapp-start $lWappArg",
          "943: } else {",
          "944:   wapptest_run",
          "945:   do_some_stuff",
          "946:   vwait forever",
          "947: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cc9af214091d0f2464626f1ceae42d07c85cbb2",
      "candidate_info": {
        "commit_hash": "3cc9af214091d0f2464626f1ceae42d07c85cbb2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3cc9af214091d0f2464626f1ceae42d07c85cbb2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Omit deprecated PRAGMAs when compiling with the -DSQLITE_OMIT_DEPRECATED option.\n\nFossilOrigin-Name: 008112bcef561a8a3ebfb007cbef36cbc0071f547e6ebdba3d3bbb39e2c48c7a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1601db7adba2dccd4f90fbbe5099c801a2b0d97af087fbe82ed98d05496b38c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: #endif",
          "213: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "214:  {/* zName:     */ \"count_changes\",",
          "219: #endif",
          "220: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "221:  {/* zName:     */ \"data_store_directory\",",
          "226: #endif",
          "227: #if !defined(SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS)",
          "228:  {/* zName:     */ \"data_version\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "221: #endif",
          "223: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "230: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: #endif",
          "242:  {/* zName:     */ \"default_cache_size\",",
          "247: #endif",
          "248: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "249: #if !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "250:  {/* zName:     */ \"defer_foreign_keys\",",
          "",
          "[Removed Lines]",
          "241: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "245: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "246: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "253: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255: #endif",
          "256: #endif",
          "257: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "258:  {/* zName:     */ \"empty_result_callbacks\",",
          "263: #endif",
          "264: #if !defined(SQLITE_OMIT_UTF16)",
          "265:  {/* zName:     */ \"encoding\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "271: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300: #endif",
          "301: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "302:  {/* zName:     */ \"full_column_names\",",
          "307:  {/* zName:     */ \"fullfsync\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "316: #endif",
          "317: #endif",
          "318: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "531: #endif",
          "532: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "533:  {/* zName:     */ \"short_column_names\",",
          "538: #endif",
          "539:  {/* zName:     */ \"shrink_memory\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "551: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "590:  {/* zName:     */ \"temp_store_directory\",",
          "595: #endif",
          "596: #if defined(SQLITE_HAS_CODEC)",
          "597:  {/* zName:     */ \"textkey\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604: #endif",
          "605: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "606: #if !defined(SQLITE_OMIT_DEPRECATED)",
          "613: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   TYPE: FLAG",
          "26:   ARG:  SQLITE_FullColNames",
          "27:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "29:   NAME: short_column_names",
          "30:   TYPE: FLAG",
          "31:   ARG:  SQLITE_ShortColNames",
          "32:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "34:   NAME: count_changes",
          "35:   TYPE: FLAG",
          "36:   ARG:  SQLITE_CountRows",
          "37:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "39:   NAME: empty_result_callbacks",
          "40:   TYPE: FLAG",
          "41:   ARG:  SQLITE_NullCallback",
          "42:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "44:   NAME: legacy_file_format",
          "45:   TYPE: FLAG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "34:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "40:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "46:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:   NAME: default_cache_size",
          "153:   FLAG: NeedSchema Result0 SchemaReq NoColumns1",
          "154:   COLS: cache_size",
          "157:   NAME: page_size",
          "158:   FLAG: Result0 SchemaReq NoColumns1",
          "",
          "[Removed Lines]",
          "155:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "[Added Lines]",
          "159:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "160:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:   NAME: temp_store_directory",
          "206:   FLAG: NoColumns1",
          "207:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS)",
          "209:   NAME: data_store_directory",
          "210:   FLAG: NoColumns1",
          "211:   IF:   !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_OS_WIN",
          "213:   NAME: lock_proxy_file",
          "214:   FLAG: NoColumns1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "219:   IF:   !defined(SQLITE_OMIT_DEPRECATED)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4b331535d7a1f55eb5eb4fdab5ec0a50d1dd73a",
      "candidate_info": {
        "commit_hash": "f4b331535d7a1f55eb5eb4fdab5ec0a50d1dd73a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4b331535d7a1f55eb5eb4fdab5ec0a50d1dd73a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Improvement on the previous check-in.  Parse.rc is less reliable than Parse.nErr for detecting SQLITE_TOOBIG errors.\n\nFossilOrigin-Name: 8d478cfb92fdeb87591403fe1713b290fee309a38b71abee0002012935d1db98",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d85d80ef8b216639244c6f4e6a2c0050af3cf9c3998f372bae4a19c0430f2fd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4797:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "4798:   pTab->tabFlags |= TF_Ephemeral;",
          "4801: }",
          "",
          "[Removed Lines]",
          "4800:   return pParse->rc;",
          "",
          "[Added Lines]",
          "4800:   return pParse->nErr ? SQLITE_ERROR : SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a5cff73a730a65e7ee4a8f2d131d591e9bd74c5",
      "candidate_info": {
        "commit_hash": "4a5cff73a730a65e7ee4a8f2d131d591e9bd74c5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4a5cff73a730a65e7ee4a8f2d131d591e9bd74c5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/json101.test",
          "test/tabfunc01.test"
        ],
        "message": "Fix a parser bug in the use of parentheses around table-valued functions.\n\nFossilOrigin-Name: 58a51123d1a6381cc67d3c64ba3468ec5a92c299ad6fd86de0b843d0ffafb846",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/json101.test||test/json101.test",
          "test/tabfunc01.test||test/tabfunc01.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d933aa659eb7a13f9ab44fe7762be292a1c3c75b957a3b7e0bc6188257b62f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:         pNew->zName = pOld->zName;",
          "665:         pNew->zDatabase = pOld->zDatabase;",
          "666:         pNew->pSelect = pOld->pSelect;",
          "667:         pOld->zName = pOld->zDatabase = 0;",
          "668:         pOld->pSelect = 0;",
          "669:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "667:         if( pOld->fg.isTabFunc ){",
          "668:           pNew->u1.pFuncArg = pOld->u1.pFuncArg;",
          "669:           pOld->u1.pFuncArg = 0;",
          "670:           pOld->fg.isTabFunc = 0;",
          "671:           pNew->fg.isTabFunc = 1;",
          "672:         }",
          "",
          "---------------"
        ],
        "test/json101.test||test/json101.test": [
          "File: test/json101.test -> test/json101.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "813:   SELECT fullkey FROM json_tree('null');",
          "814: } {$}",
          "818: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "816: # 2018-12-03",
          "817: # Make sure the table-valued functions contained within parentheses",
          "818: # work correctly.",
          "819: #",
          "820: # Bug reported via private email. See TH3 for more information.",
          "821: #",
          "822: do_execsql_test json-15.100 {",
          "823:   SELECT * FROM JSON_EACH('{\"a\":1, \"b\":2}');",
          "824: } {a 1 integer 1 2 {} {$.a} {$} b 2 integer 2 4 {} {$.b} {$}}",
          "825: do_execsql_test json-15.110 {",
          "826:   SELECT xyz.* FROM JSON_EACH('{\"a\":1, \"b\":2}') AS xyz;",
          "827: } {a 1 integer 1 2 {} {$.a} {$} b 2 integer 2 4 {} {$.b} {$}}",
          "828: do_execsql_test json-15.120 {",
          "829:   SELECT * FROM (JSON_EACH('{\"a\":1, \"b\":2}'));",
          "830: } {a 1 integer 1 2 {} {$.a} {$} b 2 integer 2 4 {} {$.b} {$}}",
          "831: do_execsql_test json-15.130 {",
          "832:   SELECT xyz.* FROM (JSON_EACH('{\"a\":1, \"b\":2}')) AS xyz;",
          "833: } {a 1 integer 1 2 {} {$.a} {$} b 2 integer 2 4 {} {$.b} {$}}",
          "",
          "---------------"
        ],
        "test/tabfunc01.test||test/tabfunc01.test": [
          "File: test/tabfunc01.test -> test/tabfunc01.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:   SELECT * FROM aux1.generate_series(1,4)",
          "126: } {1 2 3 4}",
          "128: # The next series of tests is verifying that virtual table are able",
          "129: # to optimize the IN operator, even on terms that are not marked \"omit\".",
          "130: # When the generate_series virtual table is compiled for the testfixture,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: # 2018-12-03: Fix bug reported by by private email.",
          "129: do_execsql_test tabfunc01-4.4 {",
          "130:   SELECT * FROM (generate_series(1,5,2)) AS x LIMIT 10;",
          "131: } {1 3 5}",
          "",
          "---------------"
        ]
      }
    }
  ]
}