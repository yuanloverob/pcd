{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e89740a957fe29e5a0b3e33108d684601c853add",
      "candidate_info": {
        "commit_hash": "e89740a957fe29e5a0b3e33108d684601c853add",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e89740a957fe29e5a0b3e33108d684601c853add",
        "files": [
          "include/uv-bsd.h"
        ],
        "message": "bsd: support IPv6 qualified link-local addresses",
        "before_after_code_files": [
          "include/uv-bsd.h||include/uv-bsd.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-bsd.h||include/uv-bsd.h": [
          "File: include/uv-bsd.h -> include/uv-bsd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_HAVE_KQUEUE 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9b3fe2e19ef28a6420281b0cc3be448ad43472f",
      "candidate_info": {
        "commit_hash": "a9b3fe2e19ef28a6420281b0cc3be448ad43472f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a9b3fe2e19ef28a6420281b0cc3be448ad43472f",
        "files": [
          "Makefile.mingw"
        ],
        "message": "windows: tweak Makefile.mingw for easier usage\n\nDefault CC to `gcc` instead of `cc` because at least on the mingw\ninstallation I had there was no `cc` executable. This avoids having\nto type `CC=gcc` in all the `make` commands.\n\nAlso append to `CFLAGS` instead of defining if not previously defined.\nThese flags are required to build libuv, so they should not be\noverridden if other extra CFLAGS are supplied via the command\nline as well.",
        "before_after_code_files": [
          "Makefile.mingw||Makefile.mingw"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.mingw||Makefile.mingw": [
          "File: Makefile.mingw -> Makefile.mingw",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "24: INCLUDES = include/stdint-msvc2008.h \\",
          "25:            include/tree.h \\",
          "",
          "[Removed Lines]",
          "15: CFLAGS = -Wall \\",
          "16:          -Wextra \\",
          "17:          -Wno-unused-parameter \\",
          "18:          -Iinclude \\",
          "19:          -Isrc \\",
          "20:          -Isrc/win \\",
          "21:          -DWIN32_LEAN_AND_MEAN \\",
          "22:          -D_WIN32_WINNT=0x0600",
          "",
          "[Added Lines]",
          "15: CC = gcc",
          "17: CFLAGS += -Wall \\",
          "18:           -Wextra \\",
          "19:           -Wno-unused-parameter \\",
          "20:           -Iinclude \\",
          "21:           -Isrc \\",
          "22:           -Isrc/win \\",
          "23:           -DWIN32_LEAN_AND_MEAN \\",
          "24:           -D_WIN32_WINNT=0x0600",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76eb7518c65af7b1fd95e6e295dc909e7f1bc442",
      "candidate_info": {
        "commit_hash": "76eb7518c65af7b1fd95e6e295dc909e7f1bc442",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/76eb7518c65af7b1fd95e6e295dc909e7f1bc442",
        "files": [
          "include/uv.h"
        ],
        "message": "doc: clarify what the addr argument of uv_udp_recv_cb contains",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    },
    {
      "candidate_hash": "1579788c50ad6ab8044c734d7c4118e3c573259c",
      "candidate_info": {
        "commit_hash": "1579788c50ad6ab8044c734d7c4118e3c573259c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1579788c50ad6ab8044c734d7c4118e3c573259c",
        "files": [
          "src/unix/kqueue.c",
          "src/unix/linux-inotify.c",
          "src/unix/sunos.c",
          "src/win/fs-event.c"
        ],
        "message": "unix, windows: avoid error in uv_fs_event_stop\n\nFor consistency with other handle types, if stop is called while the\nhandle wasn't started yet, it's a no-op.",
        "before_after_code_files": [
          "src/unix/kqueue.c||src/unix/kqueue.c",
          "src/unix/linux-inotify.c||src/unix/linux-inotify.c",
          "src/unix/sunos.c||src/unix/sunos.c",
          "src/win/fs-event.c||src/win/fs-event.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/kqueue.c||src/unix/kqueue.c": [
          "File: src/unix/kqueue.c -> src/unix/kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378: int uv_fs_event_stop(uv_fs_event_t* handle) {",
          "379:   if (!uv__is_active(handle))",
          "382:   uv__handle_stop(handle);",
          "",
          "[Removed Lines]",
          "380:     return -EINVAL;",
          "",
          "[Added Lines]",
          "380:     return 0;",
          "",
          "---------------"
        ],
        "src/unix/linux-inotify.c||src/unix/linux-inotify.c": [
          "File: src/unix/linux-inotify.c -> src/unix/linux-inotify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:   struct watcher_list* w;",
          "233:   if (!uv__is_active(handle))",
          "236:   w = find_watcher(handle->loop, handle->wd);",
          "237:   assert(w != NULL);",
          "",
          "[Removed Lines]",
          "234:     return -EINVAL;",
          "",
          "[Added Lines]",
          "234:     return 0;",
          "",
          "---------------"
        ],
        "src/unix/sunos.c||src/unix/sunos.c": [
          "File: src/unix/sunos.c -> src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: int uv_fs_event_stop(uv_fs_event_t* handle) {",
          "433:   if (!uv__is_active(handle))",
          "436:   if (handle->fd == PORT_FIRED || handle->fd == PORT_LOADED) {",
          "437:     port_dissociate(handle->loop->fs_fd,",
          "",
          "[Removed Lines]",
          "434:     return -EINVAL;",
          "",
          "[Added Lines]",
          "434:     return 0;",
          "",
          "---------------"
        ],
        "src/win/fs-event.c||src/win/fs-event.c": [
          "File: src/win/fs-event.c -> src/win/fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291: int uv_fs_event_stop(uv_fs_event_t* handle) {",
          "292:   if (!uv__is_active(handle))",
          "295:   if (handle->dir_handle != INVALID_HANDLE_VALUE) {",
          "296:     CloseHandle(handle->dir_handle);",
          "",
          "[Removed Lines]",
          "293:     return UV_EINVAL;",
          "",
          "[Added Lines]",
          "293:     return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f63e073be24c05180c634df7d8d35195b6e942df",
      "candidate_info": {
        "commit_hash": "f63e073be24c05180c634df7d8d35195b6e942df",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f63e073be24c05180c634df7d8d35195b6e942df",
        "files": [
          "src/unix/stream.c",
          "src/uv-common.c",
          "src/uv-common.h",
          "src/win/pipe.c",
          "src/win/stream-inl.h",
          "src/win/tcp.c",
          "src/win/udp.c"
        ],
        "message": "common: use common uv__count_bufs code\n\nUntil now it was reimplemented in 2 different places (unix, win).",
        "before_after_code_files": [
          "src/unix/stream.c||src/unix/stream.c",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "src/win/pipe.c||src/win/pipe.c",
          "src/win/stream-inl.h||src/win/stream-inl.h",
          "src/win/tcp.c||src/win/tcp.c",
          "src/win/udp.c||src/win/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: static size_t uv__write_req_size(uv_write_t* req);",
          "78: void uv__stream_init(uv_loop_t* loop,",
          "79:                      uv_stream_t* stream,",
          "80:                      uv_handle_type type) {",
          "",
          "[Removed Lines]",
          "66: static size_t uv_count_bufs(const uv_buf_t bufs[], unsigned int nbufs) {",
          "67:   unsigned int i;",
          "68:   size_t bytes;",
          "70:   bytes = 0;",
          "71:   for (i = 0; i < nbufs; i++)",
          "72:     bytes += bufs[i].len;",
          "74:   return bytes;",
          "75: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:   size_t size;",
          "662:   assert(req->bufs != NULL);",
          "665:   assert(req->handle->write_queue_size >= size);",
          "667:   return size;",
          "",
          "[Removed Lines]",
          "663:   size = uv_count_bufs(req->bufs + req->write_index,",
          "664:                        req->nbufs - req->write_index);",
          "",
          "[Added Lines]",
          "651:   size = uv__count_bufs(req->bufs + req->write_index,",
          "652:                         req->nbufs - req->write_index);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1327:   memcpy(req->bufs, bufs, nbufs * sizeof(bufs[0]));",
          "1328:   req->nbufs = nbufs;",
          "1329:   req->write_index = 0;",
          "1333:   QUEUE_INSERT_TAIL(&stream->write_queue, &req->queue);",
          "",
          "[Removed Lines]",
          "1330:   stream->write_queue_size += uv_count_bufs(bufs, nbufs);",
          "",
          "[Added Lines]",
          "1318:   stream->write_queue_size += uv__count_bufs(bufs, nbufs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1395:     return r;",
          "1399:   if (req.bufs != NULL)",
          "1400:     req_size = uv__write_req_size(&req);",
          "1401:   else",
          "",
          "[Removed Lines]",
          "1398:   written = uv_count_bufs(bufs, nbufs);",
          "",
          "[Added Lines]",
          "1386:   written = uv__count_bufs(bufs, nbufs);",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "447: }",
          "449: int uv_fs_event_getpath(uv_fs_event_t* handle, char* buf, size_t* len) {",
          "450:   size_t required_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450: size_t uv__count_bufs(const uv_buf_t bufs[], unsigned int nbufs) {",
          "451:   unsigned int i;",
          "452:   size_t bytes;",
          "454:   bytes = 0;",
          "455:   for (i = 0; i < nbufs; i++)",
          "456:     bytes += (size_t) bufs[i].len;",
          "458:   return bytes;",
          "459: }",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "100: void uv__work_done(uv_async_t* handle);",
          "102: #define uv__has_active_reqs(loop)                                             \\",
          "103:   (QUEUE_EMPTY(&(loop)->active_reqs) == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: size_t uv__count_bufs(const uv_buf_t bufs[], unsigned int nbufs);",
          "",
          "---------------"
        ],
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1254:     }",
          "1258:     handle->write_queue_size += req->queued_bytes;",
          "1259:   } else if (handle->flags & UV_HANDLE_BLOCKING_WRITES) {",
          "",
          "[Removed Lines]",
          "1257:     req->queued_bytes = uv_count_bufs(bufs, nbufs);",
          "",
          "[Added Lines]",
          "1257:     req->queued_bytes = uv__count_bufs(bufs, nbufs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1311:       req->queued_bytes = 0;",
          "1312:     } else {",
          "1315:       handle->write_queue_size += req->queued_bytes;",
          "1316:     }",
          "",
          "[Removed Lines]",
          "1314:       req->queued_bytes = uv_count_bufs(bufs, nbufs);",
          "",
          "[Added Lines]",
          "1314:       req->queued_bytes = uv__count_bufs(bufs, nbufs);",
          "",
          "---------------"
        ],
        "src/win/stream-inl.h||src/win/stream-inl.h": [
          "File: src/win/stream-inl.h -> src/win/stream-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: }",
          "",
          "[Removed Lines]",
          "56: INLINE static size_t uv_count_bufs(const uv_buf_t bufs[], unsigned int nbufs) {",
          "57:   unsigned int i;",
          "58:   size_t bytes;",
          "60:   bytes = 0;",
          "61:   for (i = 0; i < nbufs; i++)",
          "62:     bytes += (size_t) bufs[i].len;",
          "64:   return bytes;",
          "65: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "839:     uv_insert_pending_req(loop, (uv_req_t*) req);",
          "840:   } else if (UV_SUCCEEDED_WITH_IOCP(result == 0)) {",
          "843:     handle->reqs_pending++;",
          "844:     handle->write_reqs_pending++;",
          "845:     REGISTER_HANDLE_REQ(loop, handle, req);",
          "",
          "[Removed Lines]",
          "842:     req->queued_bytes = uv_count_bufs(bufs, nbufs);",
          "",
          "[Added Lines]",
          "842:     req->queued_bytes = uv__count_bufs(bufs, nbufs);",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:     uv_insert_pending_req(loop, (uv_req_t*)req);",
          "401:   } else if (UV_SUCCEEDED_WITH_IOCP(result == 0)) {",
          "404:     handle->reqs_pending++;",
          "405:     REGISTER_HANDLE_REQ(loop, handle, req);",
          "406:   } else {",
          "",
          "[Removed Lines]",
          "403:     req->queued_bytes = uv_count_bufs(bufs, nbufs);",
          "",
          "[Added Lines]",
          "403:     req->queued_bytes = uv__count_bufs(bufs, nbufs);",
          "",
          "---------------"
        ]
      }
    }
  ]
}