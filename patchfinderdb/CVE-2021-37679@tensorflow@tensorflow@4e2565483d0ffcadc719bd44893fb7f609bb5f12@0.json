{
  "cve_id": "CVE-2021-37679",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions it is possible to nest a `tf.map_fn` within another `tf.map_fn` call. However, if the input tensor is a `RaggedTensor` and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap. The `t` and `z` outputs should be identical, however this is not the case. The last row of `t` contains data from the heap which can be used to leak other memory information. The bug lies in the conversion from a `Variant` tensor to a `RaggedTensor`. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions. The same implementation can result in data loss, if input tensor is tweaked. We have patched the issue in GitHub commit 4e2565483d0ffcadc719bd44893fb7f609bb5f12. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "4e2565483d0ffcadc719bd44893fb7f609bb5f12",
  "patch_info": {
    "commit_hash": "4e2565483d0ffcadc719bd44893fb7f609bb5f12",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12",
    "files": [
      "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
      "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
    ],
    "message": "Fix bug that could cause map_fn to produce incorrect results (rather than an error) when mapping over a ragged tensor with an inappropriate fn_output_signature.  (Note: there are cases where the default value for fn_output_signature is not appropriate, so the user needs to explicitly specify the correct output signature.)\n\nPiperOrigin-RevId: 387606546\nChange-Id: Ib4ea27b9634e6ab413f211cfe809a69a90f0e2cd",
    "before_after_code_files": [
      "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
      "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc": [
      "File: tensorflow/core/kernels/ragged_tensor_from_variant_op.cc -> tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "174:   auto output_values_flat =",
      "175:       output_ragged->mutable_values()->flat_outer_dims<VALUE_TYPE, 2>();",
      "176:   int values_index = 0;",
      "177:   for (int i = 0; i < ragged_components.size(); i++) {",
      "178:     auto component_values_flat =",
      "179:         ragged_components[i].values().flat_outer_dims<VALUE_TYPE, 2>();",
      "180:     int num_inner_elements = ragged_components[i].values().NumElements();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "178:   TensorShape expected_value_shape = component_values_shape;",
      "179:   expected_value_shape.RemoveDim(0);",
      "183:     TensorShape value_shape = ragged_components[i].values().shape();",
      "184:     value_shape.RemoveDim(0);",
      "185:     if (value_shape != expected_value_shape) {",
      "186:       return errors::InvalidArgument(",
      "187:           \"All flat_values must have compatible shapes.  Shape at index 0: \",",
      "188:           expected_value_shape, \".  Shape at index \", i, \": \", value_shape,",
      "189:           \".  If you are using tf.map_fn, then you may need to specify an \"",
      "190:           \"explicit fn_output_signature with appropriate ragged_rank, and/or \"",
      "191:           \"convert output tensors to RaggedTensors.\");",
      "192:     }",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py": [
      "File: tensorflow/python/ops/ragged/ragged_map_fn_op_test.py -> tensorflow/python/ops/ragged/ragged_map_fn_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import numpy as np",
      "23: from tensorflow.python.framework import dtypes",
      "24: from tensorflow.python.framework import sparse_tensor",
      "25: from tensorflow.python.framework import test_util",
      "26: from tensorflow.python.ops import array_ops",
      "27: from tensorflow.python.ops import math_ops as mo",
      "28: from tensorflow.python.ops import string_ops",
      "29: from tensorflow.python.ops.ragged import ragged_factory_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: from tensorflow.python.framework import errors",
      "28: from tensorflow.python.ops import map_fn as map_fn_lib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "309:     )",
      "310:     self.assertAllEqual(id_t2, [[0, 5], [0, 4]])",
      "313: if __name__ == '__main__':",
      "314:   googletest.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "314:   def testRaggedMapWithIncorrectFnOutputSignature(self):",
      "315:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
      "316:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "317:                                 'All flat_values must have compatible shapes'):",
      "318:       y = map_fn_lib.map_fn(lambda r: map_fn_lib.map_fn(lambda y: r, r), x)",
      "319:       self.evaluate(y)",
      "321:   def testNestedRaggedMapWithFnOutputSignature(self):",
      "322:     ragged1d = ragged_tensor.RaggedTensorSpec([None], dtypes.int32)",
      "323:     ragged2d = ragged_tensor.RaggedTensorSpec([None, None], dtypes.int32)",
      "325:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
      "326:     # pylint: disable=g-long-lambda",
      "327:     y = map_fn_lib.map_fn(",
      "328:         lambda r: map_fn_lib.map_fn(",
      "329:             lambda y: r, r, fn_output_signature=ragged1d),",
      "330:         x,",
      "331:         fn_output_signature=ragged2d)",
      "332:     expected = [[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[1]]]",
      "333:     self.assertAllEqual(y, expected)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c39352546a2dc6be59d0e69ad45e64254a3b395",
      "candidate_info": {
        "commit_hash": "2c39352546a2dc6be59d0e69ad45e64254a3b395",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2c39352546a2dc6be59d0e69ad45e64254a3b395",
        "files": [
          "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
        ],
        "message": "Fix bug that could cause map_fn to produce incorrect results (rather than an error) when mapping over a ragged tensor with an inappropriate fn_output_signature.  (Note: there are cases where the default value for fn_output_signature is not appropriate, so the user needs to explicitly specify the correct output signature.)\n\nPiperOrigin-RevId: 387606546\nChange-Id: Ib4ea27b9634e6ab413f211cfe809a69a90f0e2cd",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc": [
          "File: tensorflow/core/kernels/ragged_tensor_from_variant_op.cc -> tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   auto output_values_flat =",
          "175:       output_ragged->mutable_values()->flat_outer_dims<VALUE_TYPE, 2>();",
          "176:   int values_index = 0;",
          "177:   for (int i = 0; i < ragged_components.size(); i++) {",
          "178:     auto component_values_flat =",
          "179:         ragged_components[i].values().flat_outer_dims<VALUE_TYPE, 2>();",
          "180:     int num_inner_elements = ragged_components[i].values().NumElements();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   TensorShape expected_value_shape = component_values_shape;",
          "179:   expected_value_shape.RemoveDim(0);",
          "183:     TensorShape value_shape = ragged_components[i].values().shape();",
          "184:     value_shape.RemoveDim(0);",
          "185:     if (value_shape != expected_value_shape) {",
          "186:       return errors::InvalidArgument(",
          "187:           \"All flat_values must have compatible shapes.  Shape at index 0: \",",
          "188:           expected_value_shape, \".  Shape at index \", i, \": \", value_shape,",
          "189:           \".  If you are using tf.map_fn, then you may need to specify an \"",
          "190:           \"explicit fn_output_signature with appropriate ragged_rank, and/or \"",
          "191:           \"convert output tensors to RaggedTensors.\");",
          "192:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_map_fn_op_test.py -> tensorflow/python/ops/ragged/ragged_map_fn_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.python.framework import dtypes",
          "24: from tensorflow.python.framework import sparse_tensor",
          "25: from tensorflow.python.framework import test_util",
          "26: from tensorflow.python.ops import array_ops",
          "27: from tensorflow.python.ops import math_ops as mo",
          "28: from tensorflow.python.ops import string_ops",
          "29: from tensorflow.python.ops.ragged import ragged_factory_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from tensorflow.python.framework import errors",
          "28: from tensorflow.python.ops import map_fn as map_fn_lib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     )",
          "310:     self.assertAllEqual(id_t2, [[0, 5], [0, 4]])",
          "313: if __name__ == '__main__':",
          "314:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:   def testRaggedMapWithIncorrectFnOutputSignature(self):",
          "315:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
          "316:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "317:                                 'All flat_values must have compatible shapes'):",
          "318:       y = map_fn_lib.map_fn(lambda r: map_fn_lib.map_fn(lambda y: r, r), x)",
          "319:       self.evaluate(y)",
          "321:   def testNestedRaggedMapWithFnOutputSignature(self):",
          "322:     ragged1d = ragged_tensor.RaggedTensorSpec([None], dtypes.int32)",
          "323:     ragged2d = ragged_tensor.RaggedTensorSpec([None, None], dtypes.int32)",
          "325:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
          "326:     # pylint: disable=g-long-lambda",
          "327:     y = map_fn_lib.map_fn(",
          "328:         lambda r: map_fn_lib.map_fn(",
          "329:             lambda y: r, r, fn_output_signature=ragged1d),",
          "330:         x,",
          "331:         fn_output_signature=ragged2d)",
          "332:     expected = [[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[1]]]",
          "333:     self.assertAllEqual(y, expected)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76317c4caa6ade1aefacf3bdf698a12d199f9dd1",
      "candidate_info": {
        "commit_hash": "76317c4caa6ade1aefacf3bdf698a12d199f9dd1",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/76317c4caa6ade1aefacf3bdf698a12d199f9dd1",
        "files": [
          "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
        ],
        "message": "Fix bug that could cause map_fn to produce incorrect results (rather than an error) when mapping over a ragged tensor with an inappropriate fn_output_signature.  (Note: there are cases where the default value for fn_output_signature is not appropriate, so the user needs to explicitly specify the correct output signature.)\n\nPiperOrigin-RevId: 387606546\nChange-Id: Ib4ea27b9634e6ab413f211cfe809a69a90f0e2cd",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc": [
          "File: tensorflow/core/kernels/ragged_tensor_from_variant_op.cc -> tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   auto output_values_flat =",
          "175:       output_ragged->mutable_values()->flat_outer_dims<VALUE_TYPE, 2>();",
          "176:   int values_index = 0;",
          "177:   for (int i = 0; i < ragged_components.size(); i++) {",
          "178:     auto component_values_flat =",
          "179:         ragged_components[i].values().flat_outer_dims<VALUE_TYPE, 2>();",
          "180:     int num_inner_elements = ragged_components[i].values().NumElements();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   TensorShape expected_value_shape = component_values_shape;",
          "179:   expected_value_shape.RemoveDim(0);",
          "183:     TensorShape value_shape = ragged_components[i].values().shape();",
          "184:     value_shape.RemoveDim(0);",
          "185:     if (value_shape != expected_value_shape) {",
          "186:       return errors::InvalidArgument(",
          "187:           \"All flat_values must have compatible shapes.  Shape at index 0: \",",
          "188:           expected_value_shape, \".  Shape at index \", i, \": \", value_shape,",
          "189:           \".  If you are using tf.map_fn, then you may need to specify an \"",
          "190:           \"explicit fn_output_signature with appropriate ragged_rank, and/or \"",
          "191:           \"convert output tensors to RaggedTensors.\");",
          "192:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_map_fn_op_test.py -> tensorflow/python/ops/ragged/ragged_map_fn_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.python.framework import dtypes",
          "24: from tensorflow.python.framework import sparse_tensor",
          "25: from tensorflow.python.framework import test_util",
          "26: from tensorflow.python.ops import array_ops",
          "27: from tensorflow.python.ops import math_ops as mo",
          "28: from tensorflow.python.ops import string_ops",
          "29: from tensorflow.python.ops.ragged import ragged_factory_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from tensorflow.python.framework import errors",
          "28: from tensorflow.python.ops import map_fn as map_fn_lib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     )",
          "310:     self.assertAllEqual(id_t2, [[0, 5], [0, 4]])",
          "313: if __name__ == '__main__':",
          "314:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:   def testRaggedMapWithIncorrectFnOutputSignature(self):",
          "315:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
          "316:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "317:                                 'All flat_values must have compatible shapes'):",
          "318:       y = map_fn_lib.map_fn(lambda r: map_fn_lib.map_fn(lambda y: r, r), x)",
          "319:       self.evaluate(y)",
          "321:   def testNestedRaggedMapWithFnOutputSignature(self):",
          "322:     ragged1d = ragged_tensor.RaggedTensorSpec([None], dtypes.int32)",
          "323:     ragged2d = ragged_tensor.RaggedTensorSpec([None, None], dtypes.int32)",
          "325:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
          "326:     # pylint: disable=g-long-lambda",
          "327:     y = map_fn_lib.map_fn(",
          "328:         lambda r: map_fn_lib.map_fn(",
          "329:             lambda y: r, r, fn_output_signature=ragged1d),",
          "330:         x,",
          "331:         fn_output_signature=ragged2d)",
          "332:     expected = [[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[1]]]",
          "333:     self.assertAllEqual(y, expected)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88e31ad134083c01b00f329b867d2973c0871625",
      "candidate_info": {
        "commit_hash": "88e31ad134083c01b00f329b867d2973c0871625",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/88e31ad134083c01b00f329b867d2973c0871625",
        "files": [
          "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
        ],
        "message": "Fix bug that could cause map_fn to produce incorrect results (rather than an error) when mapping over a ragged tensor with an inappropriate fn_output_signature.  (Note: there are cases where the default value for fn_output_signature is not appropriate, so the user needs to explicitly specify the correct output signature.)\n\nPiperOrigin-RevId: 387606546\nChange-Id: Ib4ea27b9634e6ab413f211cfe809a69a90f0e2cd",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc": [
          "File: tensorflow/core/kernels/ragged_tensor_from_variant_op.cc -> tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:   auto output_values_flat =",
          "195:       output_ragged->values.flat_outer_dims<VALUE_TYPE, 2>();",
          "196:   int values_index = 0;",
          "197:   for (int i = 0; i < ragged_components.size(); i++) {",
          "198:     auto component_values_flat =",
          "199:         ragged_components[i].values.flat_outer_dims<VALUE_TYPE, 2>();",
          "200:     int num_inner_elements = ragged_components[i].values.NumElements();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:   TensorShape expected_value_shape = component_values_shape;",
          "199:   expected_value_shape.RemoveDim(0);",
          "203:     TensorShape value_shape = ragged_components[i].values().shape();",
          "204:     value_shape.RemoveDim(0);",
          "205:     if (value_shape != expected_value_shape) {",
          "206:       return errors::InvalidArgument(",
          "207:           \"All flat_values must have compatible shapes.  Shape at index 0: \",",
          "208:           expected_value_shape, \".  Shape at index \", i, \": \", value_shape,",
          "209:           \".  If you are using tf.map_fn, then you may need to specify an \"",
          "210:           \"explicit fn_output_signature with appropriate ragged_rank, and/or \"",
          "211:           \"convert output tensors to RaggedTensors.\");",
          "212:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_map_fn_op_test.py -> tensorflow/python/ops/ragged/ragged_map_fn_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.python.framework import dtypes",
          "24: from tensorflow.python.framework import sparse_tensor",
          "25: from tensorflow.python.framework import test_util",
          "26: from tensorflow.python.ops import array_ops",
          "27: from tensorflow.python.ops import math_ops as mo",
          "28: from tensorflow.python.ops import string_ops",
          "29: from tensorflow.python.ops.ragged import ragged_factory_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from tensorflow.python.framework import errors",
          "28: from tensorflow.python.ops import map_fn as map_fn_lib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:     )",
          "295:     self.assertAllEqual(id_t2, [[0, 5], [0, 4]])",
          "298: if __name__ == '__main__':",
          "299:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:   def testRaggedMapWithIncorrectFnOutputSignature(self):",
          "300:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
          "301:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "302:                                 'All flat_values must have compatible shapes'):",
          "303:       y = map_fn_lib.map_fn(lambda r: map_fn_lib.map_fn(lambda y: r, r), x)",
          "304:       self.evaluate(y)",
          "306:   def testNestedRaggedMapWithFnOutputSignature(self):",
          "307:     ragged1d = ragged_tensor.RaggedTensorSpec([None], dtypes.int32)",
          "308:     ragged2d = ragged_tensor.RaggedTensorSpec([None, None], dtypes.int32)",
          "310:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
          "311:     # pylint: disable=g-long-lambda",
          "312:     y = map_fn_lib.map_fn(",
          "313:         lambda r: map_fn_lib.map_fn(",
          "314:             lambda y: r, r, fn_output_signature=ragged1d),",
          "315:         x,",
          "316:         fn_output_signature=ragged2d)",
          "317:     expected = [[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[1]]]",
          "318:     self.assertAllEqual(y, expected)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a1aea3572cbb6e9fd7c91c31c47e12699df4da4",
      "candidate_info": {
        "commit_hash": "3a1aea3572cbb6e9fd7c91c31c47e12699df4da4",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3a1aea3572cbb6e9fd7c91c31c47e12699df4da4",
        "files": [
          "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
        ],
        "message": "Fix bug that could cause map_fn to produce incorrect results (rather than an error) when mapping over a ragged tensor with an inappropriate fn_output_signature.  (Note: there are cases where the default value for fn_output_signature is not appropriate, so the user needs to explicitly specify the correct output signature.)\n\nPiperOrigin-RevId: 387606546\nChange-Id: Ib4ea27b9634e6ab413f211cfe809a69a90f0e2cd",
        "before_after_code_files": [
          "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
            "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/ragged_tensor_from_variant_op.cc||tensorflow/core/kernels/ragged_tensor_from_variant_op.cc": [
          "File: tensorflow/core/kernels/ragged_tensor_from_variant_op.cc -> tensorflow/core/kernels/ragged_tensor_from_variant_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   auto output_values_flat =",
          "175:       output_ragged->mutable_values()->flat_outer_dims<VALUE_TYPE, 2>();",
          "176:   int values_index = 0;",
          "177:   for (int i = 0; i < ragged_components.size(); i++) {",
          "178:     auto component_values_flat =",
          "179:         ragged_components[i].values().flat_outer_dims<VALUE_TYPE, 2>();",
          "180:     int num_inner_elements = ragged_components[i].values().NumElements();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   TensorShape expected_value_shape = component_values_shape;",
          "179:   expected_value_shape.RemoveDim(0);",
          "183:     TensorShape value_shape = ragged_components[i].values().shape();",
          "184:     value_shape.RemoveDim(0);",
          "185:     if (value_shape != expected_value_shape) {",
          "186:       return errors::InvalidArgument(",
          "187:           \"All flat_values must have compatible shapes.  Shape at index 0: \",",
          "188:           expected_value_shape, \".  Shape at index \", i, \": \", value_shape,",
          "189:           \".  If you are using tf.map_fn, then you may need to specify an \"",
          "190:           \"explicit fn_output_signature with appropriate ragged_rank, and/or \"",
          "191:           \"convert output tensors to RaggedTensors.\");",
          "192:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/ragged/ragged_map_fn_op_test.py||tensorflow/python/ops/ragged/ragged_map_fn_op_test.py": [
          "File: tensorflow/python/ops/ragged/ragged_map_fn_op_test.py -> tensorflow/python/ops/ragged/ragged_map_fn_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.python.framework import dtypes",
          "24: from tensorflow.python.framework import sparse_tensor",
          "25: from tensorflow.python.framework import test_util",
          "26: from tensorflow.python.ops import array_ops",
          "27: from tensorflow.python.ops import math_ops as mo",
          "28: from tensorflow.python.ops import string_ops",
          "29: from tensorflow.python.ops.ragged import ragged_factory_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from tensorflow.python.framework import errors",
          "28: from tensorflow.python.ops import map_fn as map_fn_lib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     )",
          "310:     self.assertAllEqual(id_t2, [[0, 5], [0, 4]])",
          "313: if __name__ == '__main__':",
          "314:   googletest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:   def testRaggedMapWithIncorrectFnOutputSignature(self):",
          "315:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
          "316:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "317:                                 'All flat_values must have compatible shapes'):",
          "318:       y = map_fn_lib.map_fn(lambda r: map_fn_lib.map_fn(lambda y: r, r), x)",
          "319:       self.evaluate(y)",
          "321:   def testNestedRaggedMapWithFnOutputSignature(self):",
          "322:     ragged1d = ragged_tensor.RaggedTensorSpec([None], dtypes.int32)",
          "323:     ragged2d = ragged_tensor.RaggedTensorSpec([None, None], dtypes.int32)",
          "325:     x = ragged_factory_ops.constant([[1, 2, 3, 4], [1]])",
          "326:     # pylint: disable=g-long-lambda",
          "327:     y = map_fn_lib.map_fn(",
          "328:         lambda r: map_fn_lib.map_fn(",
          "329:             lambda y: r, r, fn_output_signature=ragged1d),",
          "330:         x,",
          "331:         fn_output_signature=ragged2d)",
          "332:     expected = [[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[1]]]",
          "333:     self.assertAllEqual(y, expected)",
          "",
          "---------------"
        ]
      }
    }
  ]
}