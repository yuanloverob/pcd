{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4fc4ba771cacf109e079cdfa8de6d65853e21ac5",
      "candidate_info": {
        "commit_hash": "4fc4ba771cacf109e079cdfa8de6d65853e21ac5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fc4ba771cacf109e079cdfa8de6d65853e21ac5",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test"
        ],
        "message": "Do not run shmlock.test as part of the inmemory_journal permutation.\n\nFossilOrigin-Name: d3fea69cbb071867a90ad56ca05123ebf8e44689a92577a525a883c176c791bd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e467e4c8fa256ddd6c26c1f21bc26289a21f18b781737eaf706bc813ed8234fa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:   # the number of fsync() calls.",
          "753:   pager.test exclusive.test jrnlmode.test sync.test misc1.test",
          "754:   journal1.test conflict.test crash8.test tkt3457.test io.test",
          "757:   pager1.test async4.test corrupt.test filefmt.test pager2.test",
          "758:   corrupt5.test corruptA.test pageropt.test",
          "",
          "[Removed Lines]",
          "755:   journal3.test 8_3_names.test",
          "",
          "[Added Lines]",
          "755:   journal3.test 8_3_names.test shmlock.test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12fe9a0d2512ebbbcc9c492af187ff76404b913e",
      "candidate_info": {
        "commit_hash": "12fe9a0d2512ebbbcc9c492af187ff76404b913e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/12fe9a0d2512ebbbcc9c492af187ff76404b913e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Fix an assert() that might not be true if the database file is corrupt.\n\nFossilOrigin-Name: f2d400db4dbfb05e2540178ed3662f97f8c57a95f8129886c7081c35e53adf0d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0abace8a7aecca01c8677d07f3ec1bafb289ceffe5bcd60284701a7bf813f415",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8261:   }",
          "8262:   assert( sqlite3PagerIswriteable(pChild->pDbPage) );",
          "8263:   assert( sqlite3PagerIswriteable(pRoot->pDbPage) );",
          "8266:   TRACE((\"BALANCE: copy root %d into %d\\n\", pRoot->pgno, pChild->pgno));",
          "",
          "[Removed Lines]",
          "8264:   assert( pChild->nCell==pRoot->nCell );",
          "",
          "[Added Lines]",
          "8264:   assert( pChild->nCell==pRoot->nCell || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6299681c63e5ea8b61892f4e5dffaac25031723",
      "candidate_info": {
        "commit_hash": "b6299681c63e5ea8b61892f4e5dffaac25031723",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6299681c63e5ea8b61892f4e5dffaac25031723",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/window4.tcl",
          "test/window4.test"
        ],
        "message": "Add extra test cases related to the previous commit.\n\nFossilOrigin-Name: 3c690b2b05b7338f3325c50a0750c6023e1173afa4388e836ecb2cc49f19a0ac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/window4.tcl||test/window4.tcl",
          "test/window4.test||test/window4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 712e47714863a8ed7ff73324d9fec569633e8b901c436c633b0220d16a7a9302",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/window4.tcl||test/window4.tcl": [
          "File: test/window4.tcl -> test/window4.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:   ) sub;",
          "386: }",
          "389: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388: execsql_test 12.0 {",
          "389:   DROP TABLE IF EXISTS t2;",
          "390:   CREATE TABLE t2(a INTEGER);",
          "391:   INSERT INTO t2 VALUES(1), (2), (3);",
          "392: }",
          "394: execsql_test 12.1 {",
          "395:   SELECT (SELECT min(a) OVER ()) FROM t2",
          "396: }",
          "398: execsql_float_test 12.2 {",
          "399:   SELECT (SELECT avg(a)) FROM t2 ORDER BY 1",
          "400: }",
          "402: execsql_float_test 12.3 {",
          "403:   SELECT",
          "404:     (SELECT avg(a) UNION SELECT min(a) OVER ())",
          "405:   FROM t2 GROUP BY a",
          "406:   ORDER BY 1",
          "407: }",
          "",
          "---------------"
        ],
        "test/window4.test||test/window4.test": [
          "File: test/window4.test -> test/window4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1324:   ) sub;",
          "1325: } {0   1   2}",
          "1327: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1327: do_execsql_test 12.0 {",
          "1328:   DROP TABLE IF EXISTS t2;",
          "1329:   CREATE TABLE t2(a INTEGER);",
          "1330:   INSERT INTO t2 VALUES(1), (2), (3);",
          "1331: } {}",
          "1333: do_execsql_test 12.1 {",
          "1334:   SELECT (SELECT min(a) OVER ()) FROM t2",
          "1335: } {1   2   3}",
          "1338: do_test 12.2 {",
          "1339:   set myres {}",
          "1340:   foreach r [db eval {SELECT (SELECT avg(a)) FROM t2 ORDER BY 1}] {",
          "1341:     lappend myres [format %.4f [set r]]",
          "1342:   }",
          "1343:   set res2 {2.0000}",
          "1344:   set i 0",
          "1345:   foreach r [set myres] r2 [set res2] {",
          "1346:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "1347:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "1348:     }",
          "1349:     incr i",
          "1350:   }",
          "1351:   set {} {}",
          "1352: } {}",
          "1355: do_test 12.3 {",
          "1356:   set myres {}",
          "1357:   foreach r [db eval {SELECT",
          "1358:     (SELECT avg(a) UNION SELECT min(a) OVER ())",
          "1359:   FROM t2 GROUP BY a",
          "1360:   ORDER BY 1}] {",
          "1361:     lappend myres [format %.4f [set r]]",
          "1362:   }",
          "1363:   set res2 {1.0000 2.0000 3.0000}",
          "1364:   set i 0",
          "1365:   foreach r [set myres] r2 [set res2] {",
          "1366:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "1367:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "1368:     }",
          "1369:     incr i",
          "1370:   }",
          "1371:   set {} {}",
          "1372: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df82afc04efbf269f3d4663cec04147421310f56",
      "candidate_info": {
        "commit_hash": "df82afc04efbf269f3d4663cec04147421310f56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/df82afc04efbf269f3d4663cec04147421310f56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbemem.c"
        ],
        "message": "Make sure the OP_Concat opcode always correctly zero-terminates a UTF16 string, even if the input strings are ill-formed.  This is a followup to check-in [3a16ddf91f0c9c516a7] that fixes a case the previous check-in missed. Also add assert()s to prove correct zero termination.\n\nFossilOrigin-Name: d612fb7873cf59dfda18cabe45f674c37aa78a4587de3378b1840c99465a0269",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 05897ca48a40c6771ff83ba8ecc3a5c60dafddf58651c222dd8cf89b9fc7b077",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1501:   if( nByte>db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "1502:     goto too_big;",
          "1503:   }",
          "1505:     goto no_mem;",
          "1506:   }",
          "1507:   MemSetTypeFlag(pOut, MEM_Str);",
          "",
          "[Removed Lines]",
          "1504:   if( sqlite3VdbeMemGrow(pOut, (int)nByte+2, pOut==pIn2) ){",
          "",
          "[Added Lines]",
          "1504:   if( sqlite3VdbeMemGrow(pOut, (int)nByte+3, pOut==pIn2) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1515:   pIn1->flags = flags1;",
          "1516:   pOut->z[nByte]=0;",
          "1517:   pOut->z[nByte+1] = 0;",
          "1518:   pOut->flags |= MEM_Term;",
          "1519:   pOut->n = (int)nByte;",
          "1520:   pOut->enc = encoding;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1518:   pOut->z[nByte+2] = 0;",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:   char zBuf[100];",
          "141:   char *z;",
          "142:   int i, j, incr;",
          "143:   if( (p->flags & MEM_Str)==0 ) return 1;",
          "144:   if( (p->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 ) return 1;",
          "145:   vdbeMemRenderNum(sizeof(zBuf), zBuf, p);",
          "146:   z = p->z;",
          "",
          "[Removed Lines]",
          "139: int sqlite3VdbeMemConsistentDualRep(Mem *p){",
          "",
          "[Added Lines]",
          "142: int sqlite3VdbeMemValidStrRep(Mem *p){",
          "147:   if( p->flags & MEM_Term ){",
          "150:     if( p->z==p->zMalloc && p->szMalloc>0 ){",
          "151:       assert( p->enc==SQLITE_UTF8 || p->szMalloc >= ((p->n+1)&~1)+2 );",
          "152:       assert( p->enc!=SQLITE_UTF8 || p->szMalloc >= p->n+1 );",
          "153:     }",
          "154:     assert( p->z[p->n]==0 );",
          "155:     assert( p->enc==SQLITE_UTF8 || p->z[(p->n+1)&~1]==0 );",
          "156:     assert( p->enc==SQLITE_UTF8 || p->z[((p->n+1)&~1)+1]==0 );",
          "157:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1221:   assert(pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0",
          "1222:               || pVal->db->mallocFailed );",
          "1223:   if( pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) ){",
          "1225:     return pVal->z;",
          "1226:   }else{",
          "1227:     return 0;",
          "",
          "[Removed Lines]",
          "1224:     assert( sqlite3VdbeMemConsistentDualRep(pVal) );",
          "",
          "[Added Lines]",
          "1238:     assert( sqlite3VdbeMemValidStrRep(pVal) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1244:   assert( (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) );",
          "1245:   assert( !sqlite3VdbeMemIsRowSet(pVal) );",
          "1246:   if( (pVal->flags&(MEM_Str|MEM_Term))==(MEM_Str|MEM_Term) && pVal->enc==enc ){",
          "1248:     return pVal->z;",
          "1249:   }",
          "1250:   if( pVal->flags&MEM_Null ){",
          "",
          "[Removed Lines]",
          "1247:     assert( sqlite3VdbeMemConsistentDualRep(pVal) );",
          "",
          "[Added Lines]",
          "1261:     assert( sqlite3VdbeMemValidStrRep(pVal) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cf92890f28ace3c510c448b5be6de2ca96016c2",
      "candidate_info": {
        "commit_hash": "8cf92890f28ace3c510c448b5be6de2ca96016c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8cf92890f28ace3c510c448b5be6de2ca96016c2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Avoid the use of function pointers in columnName(), as function pointers appear to be a source of consternation to LLVM.\n\nFossilOrigin-Name: c48f6f39c5f89a338fed7153553a27a5d882d4d8db8221e911b96e0dd57c53d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0c5db18d79366d9c23925ce3ed835500311f32a10aa7dbfdd09148b1e8a2507b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1122: static const void *columnName(",
          "1127: ){",
          "1128:   const void *ret;",
          "1129:   Vdbe *p;",
          "",
          "[Removed Lines]",
          "1123:   sqlite3_stmt *pStmt,",
          "1124:   int N,",
          "1125:   const void *(*xFunc)(Mem*),",
          "1126:   int useType",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1144:     N += useType*n;",
          "1145:     sqlite3_mutex_enter(db->mutex);",
          "1146:     assert( db->mallocFailed==0 );",
          "1151:     if( db->mallocFailed ){",
          "",
          "[Removed Lines]",
          "1147:     ret = xFunc(&p->aColName[N]);",
          "",
          "[Added Lines]",
          "1147:     if( useUtf16 ){",
          "1148:       ret = sqlite3_value_text16((sqlite3_value*)&p->aColName[N]);",
          "1149:     }else{",
          "1150:       ret = sqlite3_value_text((sqlite3_value*)&p->aColName[N]);",
          "1151:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1164: const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){",
          "1167: }",
          "1168: #ifndef SQLITE_OMIT_UTF16",
          "1169: const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){",
          "1172: }",
          "1173: #endif",
          "",
          "[Removed Lines]",
          "1165:   return columnName(",
          "1166:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_NAME);",
          "1170:   return columnName(",
          "1171:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_NAME);",
          "",
          "[Added Lines]",
          "1169:   return columnName(pStmt, N, 0, COLNAME_NAME);",
          "1173:   return columnName(pStmt, N, 1, COLNAME_NAME);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189: const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){",
          "1192: }",
          "1193: #ifndef SQLITE_OMIT_UTF16",
          "1194: const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){",
          "1197: }",
          "",
          "[Removed Lines]",
          "1190:   return columnName(",
          "1191:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_DECLTYPE);",
          "1195:   return columnName(",
          "1196:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_DECLTYPE);",
          "",
          "[Added Lines]",
          "1192:   return columnName(pStmt, N, 0, COLNAME_DECLTYPE);",
          "1196:   return columnName(pStmt, N, 1, COLNAME_DECLTYPE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1207: const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){",
          "1210: }",
          "1211: #ifndef SQLITE_OMIT_UTF16",
          "1212: const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){",
          "1215: }",
          "",
          "[Removed Lines]",
          "1208:   return columnName(",
          "1209:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_DATABASE);",
          "1213:   return columnName(",
          "1214:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_DATABASE);",
          "",
          "[Added Lines]",
          "1208:   return columnName(pStmt, N, 0, COLNAME_DATABASE);",
          "1212:   return columnName(pStmt, N, 1, COLNAME_DATABASE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1223: const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){",
          "1226: }",
          "1227: #ifndef SQLITE_OMIT_UTF16",
          "1228: const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){",
          "1231: }",
          "",
          "[Removed Lines]",
          "1224:   return columnName(",
          "1225:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_TABLE);",
          "1229:   return columnName(",
          "1230:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_TABLE);",
          "",
          "[Added Lines]",
          "1222:   return columnName(pStmt, N, 0, COLNAME_TABLE);",
          "1226:   return columnName(pStmt, N, 1, COLNAME_TABLE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1239: const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){",
          "1242: }",
          "1243: #ifndef SQLITE_OMIT_UTF16",
          "1244: const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){",
          "1247: }",
          "",
          "[Removed Lines]",
          "1240:   return columnName(",
          "1241:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text, COLNAME_COLUMN);",
          "1245:   return columnName(",
          "1246:       pStmt, N, (const void*(*)(Mem*))sqlite3_value_text16, COLNAME_COLUMN);",
          "",
          "[Added Lines]",
          "1236:   return columnName(pStmt, N, 0, COLNAME_COLUMN);",
          "1240:   return columnName(pStmt, N, 1, COLNAME_COLUMN);",
          "",
          "---------------"
        ]
      }
    }
  ]
}