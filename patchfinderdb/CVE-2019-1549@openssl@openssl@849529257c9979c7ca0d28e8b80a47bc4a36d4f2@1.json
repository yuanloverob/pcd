{
  "cve_id": "CVE-2019-1549",
  "cve_desc": "OpenSSL 1.1.1 introduced a rewritten random number generator (RNG). This was intended to include protection in the event of a fork() system call in order to ensure that the parent and child processes did not share the same RNG state. However this protection was not being used in the default case. A partial mitigation for this issue is that the output from a high precision timer is mixed into the RNG state so the likelihood of a parent and child process sharing state is significantly reduced. If an application already calls OPENSSL_init_crypto() explicitly using OPENSSL_INIT_ATFORK then this problem does not occur at all. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c).",
  "repo": "openssl/openssl",
  "patch_hash": "849529257c9979c7ca0d28e8b80a47bc4a36d4f2",
  "patch_info": {
    "commit_hash": "849529257c9979c7ca0d28e8b80a47bc4a36d4f2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/849529257c9979c7ca0d28e8b80a47bc4a36d4f2",
    "files": [
      "crypto/include/internal/rand_int.h",
      "crypto/init.c",
      "crypto/rand/drbg_lib.c",
      "crypto/rand/rand_lcl.h",
      "crypto/rand/rand_lib.c",
      "crypto/threads_none.c",
      "crypto/threads_pthread.c",
      "crypto/threads_win.c",
      "include/internal/cryptlib.h",
      "test/drbgtest.c"
    ],
    "message": "drbg: ensure fork-safety without using a pthread_atfork handler\n\nWhen the new OpenSSL CSPRNG was introduced in version 1.1.1,\nit was announced in the release notes that it would be fork-safe,\nwhich the old CSPRNG hadn't been.\n\nThe fork-safety was implemented using a fork count, which was\nincremented by a pthread_atfork handler. Initially, this handler\nwas enabled by default. Unfortunately, the default behaviour\nhad to be changed for other reasons in commit b5319bdbd095, so\nthe new OpenSSL CSPRNG failed to keep its promise.\n\nThis commit restores the fork-safety using a different approach.\nIt replaces the fork count by a fork id, which coincides with\nthe process id on UNIX-like operating systems and is zero on other\noperating systems. It is used to detect when an automatic reseed\nafter a fork is necessary.\n\nTo prevent a future regression, it also adds a test to verify that\nthe child reseeds after fork.\n\nCVE-2019-1549\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9832)",
    "before_after_code_files": [
      "crypto/include/internal/rand_int.h||crypto/include/internal/rand_int.h",
      "crypto/init.c||crypto/init.c",
      "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c",
      "crypto/rand/rand_lcl.h||crypto/rand/rand_lcl.h",
      "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c",
      "crypto/threads_none.c||crypto/threads_none.c",
      "crypto/threads_pthread.c||crypto/threads_pthread.c",
      "crypto/threads_win.c||crypto/threads_win.c",
      "include/internal/cryptlib.h||include/internal/cryptlib.h",
      "test/drbgtest.c||test/drbgtest.c"
    ]
  },
  "patch_diff": {
    "crypto/include/internal/rand_int.h||crypto/include/internal/rand_int.h": [
      "File: crypto/include/internal/rand_int.h -> crypto/include/internal/rand_int.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: typedef struct rand_pool_st RAND_POOL;",
      "26: void rand_cleanup_int(void);",
      "30: size_t rand_acquire_entropy_from_tsc(RAND_POOL *pool);",
      "",
      "[Removed Lines]",
      "27: void rand_fork(void);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "crypto/init.c||crypto/init.c": [
      "File: crypto/init.c -> crypto/init.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "677: void OPENSSL_fork_child(void)",
      "678: {",
      "681: }",
      "682: #endif",
      "",
      "[Removed Lines]",
      "679:     rand_fork();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c": [
      "File: crypto/rand/drbg_lib.c -> crypto/rand/drbg_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "416:     drbg->libctx = ctx;",
      "417:     drbg->secure = secure && CRYPTO_secure_allocated(drbg);",
      "419:     drbg->parent = parent;",
      "421:     if (parent == NULL) {",
      "",
      "[Removed Lines]",
      "418:     drbg->fork_count = rand_fork_count;",
      "",
      "[Added Lines]",
      "418:     drbg->fork_id = openssl_get_fork_id();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "829:                        int prediction_resistance,",
      "830:                        const unsigned char *adin, size_t adinlen)",
      "831: {",
      "832:     int reseed_required = 0;",
      "834:     if (drbg->state != DRBG_READY) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "832:     int fork_id;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "854:         return 0;",
      "855:     }",
      "859:         reseed_required = 1;",
      "860:     }",
      "",
      "[Removed Lines]",
      "857:     if (drbg->fork_count != rand_fork_count) {",
      "858:         drbg->fork_count = rand_fork_count;",
      "",
      "[Added Lines]",
      "858:     fork_id = openssl_get_fork_id();",
      "860:     if (drbg->fork_id != fork_id) {",
      "861:         drbg->fork_id = fork_id;",
      "",
      "---------------"
    ],
    "crypto/rand/rand_lcl.h||crypto/rand/rand_lcl.h": [
      "File: crypto/rand/rand_lcl.h -> crypto/rand/rand_lcl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "233:     int fork_count;",
      "",
      "[Added Lines]",
      "233:     int fork_id;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "332: extern RAND_METHOD rand_meth;",
      "348: int rand_drbg_restart(RAND_DRBG *drbg,",
      "349:                       const unsigned char *buffer, size_t len, size_t entropy);",
      "",
      "[Removed Lines]",
      "345: extern int rand_fork_count;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c": [
      "File: crypto/rand/rand_lib.c -> crypto/rand/rand_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: static int rand_inited = 0;",
      "35: #ifdef OPENSSL_RAND_SEED_RDTSC",
      "",
      "[Removed Lines]",
      "33: int rand_fork_count;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "238:     rand_pool_reattach(pool, out);",
      "239: }",
      "246: #ifndef FIPS_MODE",
      "247: DEFINE_RUN_ONCE_STATIC(do_rand_init)",
      "248: {",
      "",
      "[Removed Lines]",
      "241: void rand_fork(void)",
      "242: {",
      "243:     rand_fork_count++;",
      "244: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "crypto/threads_none.c||crypto/threads_none.c": [
      "File: crypto/threads_none.c -> crypto/threads_none.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: #if !defined(OPENSSL_THREADS) || defined(CRYPTO_TDEBUG)",
      "15: CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)",
      "16: {",
      "17:     CRYPTO_RWLOCK *lock;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: # if defined(OPENSSL_SYS_UNIX)",
      "16: #  include <sys/types.h>",
      "17: #  include <unistd.h>",
      "18: # endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "133:     return 0;",
      "134: }",
      "136: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141: int openssl_get_fork_id(void)",
      "142: {",
      "143: # if defined(OPENSSL_SYS_UNIX)",
      "144:     return getpid();",
      "145: # else",
      "146:     return 0;",
      "147: # endif",
      "148: }",
      "",
      "---------------"
    ],
    "crypto/threads_pthread.c||crypto/threads_pthread.c": [
      "File: crypto/threads_pthread.c -> crypto/threads_pthread.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG) && !defined(OPENSSL_SYS_WINDOWS)",
      "19: # ifdef PTHREAD_RWLOCK_INITIALIZER",
      "20: #  define USE_RWLOCK",
      "21: # endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: # if defined(OPENSSL_SYS_UNIX)",
      "20: #  include <sys/types.h>",
      "21: #  include <unistd.h>",
      "22: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "207:     return 0;",
      "208: }",
      "210: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216: int openssl_get_fork_id(void)",
      "217: {",
      "218:     return getpid();",
      "219: }",
      "",
      "---------------"
    ],
    "crypto/threads_win.c||crypto/threads_win.c": [
      "File: crypto/threads_win.c -> crypto/threads_win.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "164:     return 0;",
      "165: }",
      "167: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167: int openssl_get_fork_id(void)",
      "168: {",
      "169:     return 0;",
      "170: }",
      "",
      "---------------"
    ],
    "include/internal/cryptlib.h||include/internal/cryptlib.h": [
      "File: include/internal/cryptlib.h -> include/internal/cryptlib.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "93: int do_ex_data_init(OPENSSL_CTX *ctx);",
      "94: void crypto_cleanup_all_ex_data_int(OPENSSL_CTX *ctx);",
      "95: int openssl_init_fork_handlers(void);",
      "97: char *ossl_safe_getenv(const char *name);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96: int openssl_get_fork_id(void);",
      "",
      "---------------"
    ],
    "test/drbgtest.c||test/drbgtest.c": [
      "File: test/drbgtest.c -> test/drbgtest.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: # include <windows.h>",
      "23: #endif",
      "25: #include \"testutil.h\"",
      "26: #include \"drbgtest.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: #if defined(OPENSSL_SYS_UNIX)",
      "27: # include <sys/types.h>",
      "28: # include <sys/wait.h>",
      "29: # include <unistd.h>",
      "30: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "708:     return 1;",
      "709: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "719: #if defined(OPENSSL_SYS_UNIX)",
      "724: static int test_drbg_reseed_after_fork(RAND_DRBG *master,",
      "725:                                        RAND_DRBG *public,",
      "726:                                        RAND_DRBG *private)",
      "727: {",
      "728:     pid_t pid;",
      "729:     int status=0;",
      "731:     pid = fork();",
      "732:     if (!TEST_int_ge(pid, 0))",
      "733:         return 0;",
      "735:     if (pid > 0) {",
      "737:         return TEST_int_eq(waitpid(pid, &status, 0), pid) && TEST_int_eq(status, 0);",
      "738:     }",
      "741:     if (!TEST_true(test_drbg_reseed(1, master, public, private, 1, 1, 1, 0)))",
      "742:         status = 1;",
      "745:     unhook_drbg(master);",
      "746:     unhook_drbg(public);",
      "747:     unhook_drbg(private);",
      "748:     exit(status);",
      "749: }",
      "750: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "798:         goto error;",
      "799:     reset_drbg_hook_ctx();",
      "803:     memset(rand_add_buf, 'r', sizeof(rand_add_buf));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "842: #if defined(OPENSSL_SYS_UNIX)",
      "843:     if (!TEST_true(test_drbg_reseed_after_fork(master, public, private)))",
      "844:         goto error;",
      "845: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f000e82898af251442ca52e81fc1ee45996090dc",
      "candidate_info": {
        "commit_hash": "f000e82898af251442ca52e81fc1ee45996090dc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f000e82898af251442ca52e81fc1ee45996090dc",
        "files": [
          "crypto/evp/build.info",
          "crypto/evp/evp_local.h",
          "crypto/evp/evp_rand.c",
          "crypto/evp/rand_meth.c",
          "crypto/rand/build.info",
          "crypto/rand/drbg_lib.c",
          "crypto/rand/rand_lib.c",
          "crypto/rand/rand_local.h",
          "doc/man3/RAND_DRBG_new.pod",
          "doc/man3/RAND_DRBG_set_callbacks.pod",
          "include/openssl/core_names.h",
          "include/openssl/core_numbers.h",
          "include/openssl/evp.h",
          "include/openssl/rand.h",
          "include/openssl/rand_drbg.h",
          "providers/defltprov.c",
          "providers/fips/fipsprov.c",
          "providers/implementations/rands/build.info",
          "providers/implementations/rands/crngt.c",
          "providers/implementations/rands/drbg.c",
          "providers/implementations/rands/drbg_ctr.c",
          "providers/implementations/rands/drbg_hash.c",
          "providers/implementations/rands/drbg_hmac.c",
          "providers/implementations/rands/drbg_local.h",
          "providers/implementations/rands/test_rng.c"
        ],
        "message": "CTR, HASH and HMAC DRBGs in provider\n\nMove the three different DRBGs to the provider.\n\nAs part of the move, the DRBG specific data was pulled out of a common\nstructure and into their own structures.  Only these smaller structures are\nsecurely allocated.  This saves quite a bit of secure memory:\n\n    +-------------------------------+\n    | DRBG         | Bytes | Secure |\n    +--------------+-------+--------+\n    | HASH         |  376  |   512  |\n    | HMAC         |  168  |   256  |\n    | CTR          |  176  |   256  |\n    | Common (new) |  320  |     0  |\n    | Common (old) |  592  |  1024  |\n    +--------------+-------+--------+\n\nBytes is the structure size on the X86/64.\nSecure is the number of bytes of secure memory used (power of two allocator).\n\nReviewed-by: Matthias St. Pierre <Matthias.St.Pierre@ncp-e.com>\n(Merged from https://github.com/openssl/openssl/pull/11682)",
        "before_after_code_files": [
          "crypto/evp/build.info||crypto/evp/build.info",
          "crypto/evp/evp_local.h||crypto/evp/evp_local.h",
          "crypto/evp/rand_meth.c||crypto/evp/evp_rand.c",
          "crypto/rand/build.info||crypto/rand/build.info",
          "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c",
          "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c",
          "crypto/rand/rand_local.h||crypto/rand/rand_local.h",
          "include/openssl/core_names.h||include/openssl/core_names.h",
          "include/openssl/core_numbers.h||include/openssl/core_numbers.h",
          "include/openssl/evp.h||include/openssl/evp.h",
          "include/openssl/rand.h||include/openssl/rand.h",
          "include/openssl/rand_drbg.h||include/openssl/rand_drbg.h",
          "providers/defltprov.c||providers/defltprov.c",
          "providers/fips/fipsprov.c||providers/fips/fipsprov.c",
          "providers/implementations/rands/build.info||providers/implementations/rands/build.info",
          "providers/implementations/rands/crngt.c||providers/implementations/rands/crngt.c",
          "providers/implementations/rands/drbg.c||providers/implementations/rands/drbg.c",
          "providers/implementations/rands/drbg_ctr.c||providers/implementations/rands/drbg_ctr.c",
          "providers/implementations/rands/drbg_hash.c||providers/implementations/rands/drbg_hash.c",
          "providers/implementations/rands/drbg_hmac.c||providers/implementations/rands/drbg_hmac.c",
          "providers/implementations/rands/drbg_local.h||providers/implementations/rands/drbg_local.h",
          "providers/implementations/rands/test_rng.c||providers/implementations/rands/test_rng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c",
            "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c"
          ],
          "candidate": [
            "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c",
            "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/evp/build.info||crypto/evp/build.info": [
          "File: crypto/evp/build.info -> crypto/evp/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: $COMMON=digest.c evp_enc.c evp_lib.c evp_fetch.c cmeth_lib.c evp_utils.c \\",
          "3:         mac_lib.c mac_meth.c keymgmt_meth.c keymgmt_lib.c kdf_lib.c kdf_meth.c \\",
          "4:         m_sigver.c pmeth_lib.c signature.c p_lib.c pmeth_gn.c exchange.c \\",
          "7: SOURCE[../../libcrypto]=$COMMON\\",
          "8:         encode.c evp_key.c evp_cnf.c \\",
          "",
          "[Removed Lines]",
          "5:         pmeth_check.c rand_meth.c",
          "",
          "[Added Lines]",
          "5:         pmeth_check.c evp_rand.c",
          "",
          "---------------"
        ],
        "crypto/evp/evp_local.h||crypto/evp/evp_local.h": [
          "File: crypto/evp/evp_local.h -> crypto/evp/evp_local.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: struct evp_rand_ctx_st {",
          "75: } /* EVP_RAND_CTX */ ;",
          "77: struct evp_rand_st {",
          "78:     OSSL_PROVIDER *prov;",
          "79:     int name_id;",
          "80:     CRYPTO_REF_COUNT refcnt;",
          "83:     const OSSL_DISPATCH *dispatch;",
          "84:     OSSL_OP_rand_newctx_fn *newctx;",
          "",
          "[Removed Lines]",
          "81:     CRYPTO_RWLOCK *lock;",
          "",
          "[Added Lines]",
          "72:     size_t max_request;         /*",
          "83:     CRYPTO_RWLOCK *refcnt_lock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     OSSL_OP_rand_generate_fn *generate;",
          "89:     OSSL_OP_rand_reseed_fn *reseed;",
          "90:     OSSL_OP_rand_nonce_fn *nonce;",
          "95:     OSSL_OP_rand_gettable_params_fn *gettable_params;",
          "96:     OSSL_OP_rand_gettable_ctx_params_fn *gettable_ctx_params;",
          "97:     OSSL_OP_rand_settable_ctx_params_fn *settable_ctx_params;",
          "98:     OSSL_OP_rand_get_params_fn *get_params;",
          "99:     OSSL_OP_rand_get_ctx_params_fn *get_ctx_params;",
          "100:     OSSL_OP_rand_set_ctx_params_fn *set_ctx_params;",
          "101:     OSSL_OP_rand_verify_zeroization_fn *verify_zeroization;",
          "102: } /* EVP_RAND */ ;",
          "",
          "[Removed Lines]",
          "91:     OSSL_OP_rand_set_callbacks_fn *set_callbacks;",
          "92:     OSSL_OP_rand_enable_locking_fn *enable_prov_locking;",
          "93:     OSSL_OP_rand_lock_fn *prov_lock;",
          "94:     OSSL_OP_rand_unlock_fn *prov_unlock;",
          "",
          "[Added Lines]",
          "93:     OSSL_OP_rand_enable_locking_fn *enable_locking;",
          "94:     OSSL_OP_rand_lock_fn *lock;",
          "95:     OSSL_OP_rand_unlock_fn *unlock;",
          "102:     OSSL_OP_rand_set_callbacks_fn *set_callbacks;",
          "",
          "---------------"
        ],
        "crypto/evp/rand_meth.c||crypto/evp/evp_rand.c": [
          "File: crypto/evp/rand_meth.c -> crypto/evp/evp_rand.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <stdio.h>",
          "13: #include <stdlib.h>",
          "15: #include <openssl/engine.h>",
          "16: #include <openssl/evp.h>",
          "17: #include <openssl/x509v3.h>",
          "",
          "[Removed Lines]",
          "14: #include \"internal/cryptlib.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: #include <openssl/crypto.h>",
          "22: #include \"crypto/asn1.h\"",
          "23: #include \"crypto/evp.h\"",
          "24: #include \"internal/numbers.h\"",
          "25: #include \"internal/provider.h\"",
          "26: #include \"evp_local.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"internal/cryptlib.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:     int ref = 0;",
          "33:     if (rand != NULL)",
          "35:     return 1;",
          "36: }",
          "",
          "[Removed Lines]",
          "34:         return CRYPTO_UP_REF(&rand->refcnt, &ref, rand->lock);",
          "",
          "[Added Lines]",
          "34:         return CRYPTO_UP_REF(&rand->refcnt, &ref, rand->refcnt_lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "40:     int ref = 0;",
          "42:     if (rand != NULL) {",
          "44:         if (ref <= 0) {",
          "45:             ossl_provider_free(rand->prov);",
          "47:             OPENSSL_free(rand);",
          "48:         }",
          "49:     }",
          "",
          "[Removed Lines]",
          "43:         CRYPTO_DOWN_REF(&rand->refcnt, &ref, rand->lock);",
          "46:             CRYPTO_THREAD_lock_free(rand->lock);",
          "",
          "[Added Lines]",
          "43:         CRYPTO_DOWN_REF(&rand->refcnt, &ref, rand->refcnt_lock);",
          "46:             CRYPTO_THREAD_lock_free(rand->refcnt_lock);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "52: static void *evp_rand_new(void)",
          "53: {",
          "59:         return NULL;",
          "60:     }",
          "61:     rand->refcnt = 1;",
          "",
          "[Removed Lines]",
          "54:     EVP_RAND *rand = NULL;",
          "56:     if ((rand = OPENSSL_zalloc(sizeof(*rand))) == NULL",
          "57:         || (rand->lock = CRYPTO_THREAD_lock_new()) == NULL) {",
          "58:         evp_rand_free(rand);",
          "",
          "[Added Lines]",
          "54:     EVP_RAND *rand = OPENSSL_zalloc(sizeof(*rand));",
          "56:     if (rand == NULL",
          "57:             || (rand->refcnt_lock = CRYPTO_THREAD_lock_new()) == NULL) {",
          "58:         OPENSSL_free(rand);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "63: }",
          "67: {",
          "71: }",
          "74: static int evp_rand_lock(EVP_RAND_CTX *rand)",
          "75: {",
          "78:     return 1;",
          "79: }",
          "82: static void evp_rand_unlock(EVP_RAND_CTX *rand)",
          "83: {",
          "86: }",
          "88: static void *evp_rand_from_dispatch(int name_id,",
          "",
          "[Removed Lines]",
          "66: int EVP_RAND_CTX_enable_locking(EVP_RAND_CTX *rand)",
          "68:     if (rand->meth->enable_prov_locking != NULL)",
          "69:         return rand->meth->enable_prov_locking(rand->data);",
          "70:     return 1;",
          "76:     if (rand->meth->prov_lock != NULL)",
          "77:         return rand->meth->prov_lock(rand->data);",
          "84:     if (rand->meth->prov_unlock != NULL)",
          "85:         rand->meth->prov_unlock(rand->data);",
          "",
          "[Added Lines]",
          "66: int EVP_RAND_enable_locking(EVP_RAND_CTX *rand)",
          "68:     if (rand->meth->enable_locking != NULL)",
          "69:         return rand->meth->enable_locking(rand->data);",
          "70:     EVPerr(0, EVP_R_LOCKING_NOT_SUPPORTED);",
          "71:     return 0;",
          "77:     if (rand->meth->lock != NULL)",
          "78:         return rand->meth->lock(rand->data);",
          "85:     if (rand->meth->unlock != NULL)",
          "86:         rand->meth->unlock(rand->data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "90:                                     OSSL_PROVIDER *prov)",
          "91: {",
          "92:     EVP_RAND *rand = NULL;",
          "94: #ifdef FIPS_MODULE",
          "96: #endif",
          "98:     if ((rand = evp_rand_new()) == NULL) {",
          "",
          "[Removed Lines]",
          "93:     int fnrandcnt = 0, fnctxcnt = 0;",
          "95:     int fnfipscnt = 0;",
          "",
          "[Added Lines]",
          "94:     int fnrandcnt = 0, fnctxcnt = 0, fnlockcnt = 0;",
          "96:     int fnzeroizecnt = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "149:             rand->set_callbacks = OSSL_get_OP_rand_set_callbacks(fns);",
          "150:             break;",
          "151:         case OSSL_FUNC_RAND_ENABLE_LOCKING:",
          "153:                 break;",
          "155:             break;",
          "156:         case OSSL_FUNC_RAND_LOCK:",
          "158:                 break;",
          "160:             break;",
          "161:         case OSSL_FUNC_RAND_UNLOCK:",
          "163:                 break;",
          "165:             break;",
          "166:         case OSSL_FUNC_RAND_GETTABLE_PARAMS:",
          "167:             if (rand->gettable_params != NULL)",
          "",
          "[Removed Lines]",
          "152:             if (rand->enable_prov_locking != NULL)",
          "154:             rand->enable_prov_locking = OSSL_get_OP_rand_enable_locking(fns);",
          "157:             if (rand->prov_lock != NULL)",
          "159:             rand->prov_lock = OSSL_get_OP_rand_lock(fns);",
          "162:             if (rand->prov_unlock != NULL)",
          "164:             rand->prov_unlock = OSSL_get_OP_rand_unlock(fns);",
          "",
          "[Added Lines]",
          "153:             if (rand->enable_locking != NULL)",
          "155:             rand->enable_locking = OSSL_get_OP_rand_enable_locking(fns);",
          "156:             fnlockcnt++;",
          "159:             if (rand->lock != NULL)",
          "161:             rand->lock = OSSL_get_OP_rand_lock(fns);",
          "162:             fnlockcnt++;",
          "165:             if (rand->unlock != NULL)",
          "167:             rand->unlock = OSSL_get_OP_rand_unlock(fns);",
          "168:             fnlockcnt++;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "201:                 break;",
          "202:             rand->verify_zeroization = OSSL_get_OP_rand_verify_zeroization(fns);",
          "203: #ifdef FIPS_MODULE",
          "205: #endif",
          "206:             break;",
          "207:         }",
          "208:     }",
          "209:     if (fnrandcnt != 3",
          "210:             || fnctxcnt != 2",
          "211: #ifdef FIPS_MODULE",
          "213: #endif",
          "214:        ) {",
          "221:         evp_rand_free(rand);",
          "222:         ERR_raise(ERR_LIB_EVP, EVP_R_INVALID_PROVIDER_FUNCTIONS);",
          "223:         return NULL;",
          "224:     }",
          "225:     rand->prov = prov;",
          "229:     return rand;",
          "230: }",
          "232: EVP_RAND *EVP_RAND_fetch(OPENSSL_CTX *libctx, const char *algorithm,",
          "234: {",
          "235:     return evp_generic_fetch(libctx, OSSL_OP_RAND, algorithm, properties,",
          "236:                              evp_rand_from_dispatch, evp_rand_up_ref,",
          "",
          "[Removed Lines]",
          "204:             fnfipscnt++;",
          "212:             || fnfipscnt != 1",
          "226:     if (prov != NULL)",
          "227:         ossl_provider_up_ref(prov);",
          "233:                        const char *properties)",
          "",
          "[Added Lines]",
          "208:             fnzeroizecnt++;",
          "224:             || (fnlockcnt != 0 && fnlockcnt != 3)",
          "226:             || fnzeroizecnt != 1",
          "234:     if (prov != NULL && !ossl_provider_up_ref(prov)) {",
          "235:         evp_rand_free(rand);",
          "236:         ERR_raise(ERR_LIB_EVP, ERR_R_INTERNAL_ERROR);",
          "237:         return NULL;",
          "238:     }",
          "245:                          const char *properties)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "274:     return 1;",
          "275: }",
          "278: {",
          "279:     EVP_RAND_CTX *ctx;",
          "280:     void *parent_ctx = NULL;",
          "281:     const OSSL_DISPATCH *parent_dispatch = NULL;",
          "284:         return NULL;",
          "288:         return NULL;",
          "289:     if (parent != NULL) {",
          "291:         parent_ctx = parent->data;",
          "292:         parent_dispatch = parent->meth->dispatch;",
          "293:     }",
          "296:             || !EVP_RAND_up_ref(rand)) {",
          "297:         EVPerr(0, ERR_R_MALLOC_FAILURE);",
          "298:         rand->freectx(ctx->data);",
          "",
          "[Removed Lines]",
          "277: EVP_RAND_CTX *EVP_RAND_CTX_new(EVP_RAND *rand, int secure, EVP_RAND_CTX *parent)",
          "283:     if (rand == NULL)",
          "286:     ctx = OPENSSL_zalloc(sizeof(EVP_RAND_CTX));",
          "287:     if (ctx == NULL)",
          "290:         EVP_RAND_CTX_enable_locking(parent);",
          "294:     if ((ctx->data = rand->newctx(ossl_provider_ctx(rand->prov), secure,",
          "295:                                   parent_ctx, parent_dispatch)) == NULL",
          "",
          "[Added Lines]",
          "289: EVP_RAND_CTX *EVP_RAND_CTX_new(EVP_RAND *rand, EVP_RAND_CTX *parent)",
          "295:     if (rand == NULL) {",
          "296:         EVPerr(0, EVP_R_INVALID_NULL_ALGORITHM);",
          "298:     }",
          "300:     ctx = OPENSSL_zalloc(sizeof(*ctx));",
          "301:     if (ctx == NULL) {",
          "302:         EVPerr(0, ERR_R_MALLOC_FAILURE);",
          "304:     }",
          "306:         if (!EVP_RAND_enable_locking(parent)) {",
          "307:             EVPerr(0, EVP_R_UNABLE_TO_ENABLE_PARENT_LOCKING);",
          "308:             OPENSSL_free(ctx);",
          "309:             return NULL;",
          "310:         }",
          "314:     if ((ctx->data = rand->newctx(ossl_provider_ctx(rand->prov), parent_ctx,",
          "315:                                   parent_dispatch)) == NULL",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "308:     if (ctx != NULL) {",
          "309:         ctx->meth->freectx(ctx->data);",
          "310:         ctx->data = NULL;",
          "312:         EVP_RAND_free(ctx->meth);",
          "313:         OPENSSL_free(ctx);",
          "314:     }",
          "",
          "[Removed Lines]",
          "311:         EVP_RAND_CTX_free(ctx->parent);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "319:     return ctx->meth;",
          "320: }",
          "323: {",
          "324:     int res = 1;",
          "",
          "[Removed Lines]",
          "322: int EVP_RAND_CTX_get_params(EVP_RAND_CTX *ctx, OSSL_PARAM params[])",
          "",
          "[Added Lines]",
          "341: int EVP_RAND_get_ctx_params(EVP_RAND_CTX *ctx, OSSL_PARAM params[])",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "332:     return res;",
          "333: }",
          "336: {",
          "337:     int res = 1;",
          "",
          "[Removed Lines]",
          "335: int EVP_RAND_CTX_set_params(EVP_RAND_CTX *ctx, const OSSL_PARAM params[])",
          "",
          "[Added Lines]",
          "354: int EVP_RAND_set_ctx_params(EVP_RAND_CTX *ctx, const OSSL_PARAM params[])",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "351: const OSSL_PARAM *EVP_RAND_gettable_params(const EVP_RAND *rand)",
          "352: {",
          "356: }",
          "358: const OSSL_PARAM *EVP_RAND_gettable_ctx_params(const EVP_RAND *rand)",
          "359: {",
          "363: }",
          "365: const OSSL_PARAM *EVP_RAND_settable_ctx_params(const EVP_RAND *rand)",
          "366: {",
          "370: }",
          "372: void EVP_RAND_do_all_provided(OPENSSL_CTX *libctx,",
          "",
          "[Removed Lines]",
          "353:     if (rand->gettable_params == NULL)",
          "354:         return NULL;",
          "355:     return rand->gettable_params();",
          "360:     if (rand->gettable_ctx_params == NULL)",
          "361:         return NULL;",
          "362:     return rand->gettable_ctx_params();",
          "367:     if (rand->settable_ctx_params == NULL)",
          "368:         return NULL;",
          "369:     return rand->settable_ctx_params();",
          "",
          "[Added Lines]",
          "372:     return rand->gettable_params == NULL ? NULL : rand->gettable_params();",
          "377:     return rand->gettable_ctx_params == NULL ? NULL",
          "378:                                              : rand->gettable_ctx_params();",
          "383:     return rand->settable_ctx_params == NULL ? NULL",
          "384:                                              :rand->settable_ctx_params();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "386:         evp_names_do_all(rand->prov, rand->name_id, fn, data);",
          "387: }",
          "392: {",
          "393:     int res;",
          "",
          "[Removed Lines]",
          "389: int EVP_RAND_CTX_instantiate(EVP_RAND_CTX *ctx, unsigned int strength,",
          "390:                              int prediction_resistance,",
          "391:                              const unsigned char *pstr, size_t pstr_len)",
          "",
          "[Added Lines]",
          "404: int EVP_RAND_instantiate(EVP_RAND_CTX *ctx, unsigned int strength,",
          "405:                          int prediction_resistance,",
          "406:                          const unsigned char *pstr, size_t pstr_len)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "400:     return res;",
          "401: }",
          "404: {",
          "405:     int res;",
          "",
          "[Removed Lines]",
          "403: int EVP_RAND_CTX_uninstantiate(EVP_RAND_CTX *ctx)",
          "",
          "[Added Lines]",
          "418: int EVP_RAND_uninstantiate(EVP_RAND_CTX *ctx)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "411:     return res;",
          "412: }",
          "417: {",
          "418:     size_t chunk;",
          "419:     OSSL_PARAM params[2];",
          "",
          "[Removed Lines]",
          "414: int EVP_RAND_CTX_generate(EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen,",
          "415:                           unsigned int strength, int prediction_resistance,",
          "416:                           const unsigned char *addin, size_t addin_len)",
          "",
          "[Added Lines]",
          "429: int EVP_RAND_generate(EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen,",
          "430:                       unsigned int strength, int prediction_resistance,",
          "431:                       const unsigned char *addin, size_t addin_len)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "423:         return 0;",
          "424:     if (ctx->max_request == 0) {",
          "425:         params[0] = OSSL_PARAM_construct_size_t(OSSL_DRBG_PARAM_MAX_REQUEST,",
          "427:         params[1] = OSSL_PARAM_construct_end();",
          "430:             goto err;",
          "431:     }",
          "432:     for (; outlen > 0; outlen -= chunk, out += chunk) {",
          "433:         chunk = outlen > ctx->max_request ? ctx->max_request : outlen;",
          "434:         if (!ctx->meth->generate(ctx->data, out, chunk, strength,",
          "436:             goto err;",
          "437:     }",
          "438:     res = 1;",
          "439: err:",
          "",
          "[Removed Lines]",
          "426:                                                 &ctx->max_request);",
          "428:         if (!EVP_RAND_CTX_get_params(ctx, params)",
          "429:                 || ctx->max_request == 0)",
          "435:                                  prediction_resistance, addin, addin_len))",
          "",
          "[Added Lines]",
          "441:                                                 &chunk);",
          "443:         if (!EVP_RAND_get_ctx_params(ctx, params) || chunk == 0) {",
          "444:             EVPerr(0, EVP_R_UNABLE_TO_GET_MAXIMUM_REQUEST_SIZE);",
          "446:         }",
          "447:         ctx->max_request = chunk;",
          "452:                                  prediction_resistance, addin, addin_len)) {",
          "453:             EVPerr(0, EVP_R_GENERATE_ERROR);",
          "455:         }",
          "460:         prediction_resistance = 0;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "441:     return res;",
          "442: }",
          "447: {",
          "448:     int res = 1;",
          "",
          "[Removed Lines]",
          "444: int EVP_RAND_CTX_reseed(EVP_RAND_CTX *ctx, int prediction_resistance,",
          "445:                         const unsigned char *ent, size_t ent_len,",
          "446:                         const unsigned char *addin, size_t addin_len)",
          "",
          "[Added Lines]",
          "468: int EVP_RAND_reseed(EVP_RAND_CTX *ctx, int prediction_resistance,",
          "469:                     const unsigned char *ent, size_t ent_len,",
          "470:                     const unsigned char *addin, size_t addin_len)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "456:     return res;",
          "457: }",
          "460: {",
          "461:     int res = 1;",
          "463:     if (!evp_rand_lock(ctx))",
          "464:         return 0;",
          "465:     if (ctx->meth->nonce == NULL",
          "468:     evp_rand_unlock(ctx);",
          "469:     return res;",
          "470: }",
          "473: {",
          "474:     OSSL_PARAM params[2];",
          "475:     int res;",
          "477:     if (ctx->strength == 0) {",
          "480:         params[1] = OSSL_PARAM_construct_end();",
          "481:         if (!evp_rand_lock(ctx))",
          "482:             return 0;",
          "484:         evp_rand_unlock(ctx);",
          "485:         if (!res)",
          "486:             return 0;",
          "487:     }",
          "488:     return ctx->strength;",
          "489: }",
          "492: {",
          "493:     OSSL_PARAM params[2] = { OSSL_PARAM_END, OSSL_PARAM_END };",
          "494:     int status, res;",
          "",
          "[Removed Lines]",
          "459: int EVP_RAND_CTX_nonce(EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen)",
          "466:             || !ctx->meth->nonce(ctx->data, out, 0, outlen, outlen))",
          "467:         res = ctx->meth->generate(ctx->data, out, outlen, 0, 0, NULL, 0);",
          "472: unsigned int EVP_RAND_CTX_strength(EVP_RAND_CTX *ctx)",
          "478:         params[0] = OSSL_PARAM_construct_uint(OSSL_RAND_PARAM_STRENGTH,",
          "479:                                               &ctx->strength);",
          "483:         res = EVP_RAND_CTX_get_params(ctx, params);",
          "491: int EVP_RAND_CTX_state(EVP_RAND_CTX *ctx)",
          "",
          "[Added Lines]",
          "483: int EVP_RAND_nonce(EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen)",
          "486:     unsigned int str = EVP_RAND_strength(ctx);",
          "491:             || !ctx->meth->nonce(ctx->data, out, str, outlen, outlen))",
          "492:         res = ctx->meth->generate(ctx->data, out, outlen, str, 0, NULL, 0);",
          "497: unsigned int EVP_RAND_strength(EVP_RAND_CTX *ctx)",
          "500:     unsigned int t;",
          "504:         params[0] = OSSL_PARAM_construct_uint(OSSL_RAND_PARAM_STRENGTH, &t);",
          "508:         res = EVP_RAND_get_ctx_params(ctx, params);",
          "512:         ctx->strength = t;",
          "517: int EVP_RAND_state(EVP_RAND_CTX *ctx)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "497:                                          &status);",
          "498:     if (!evp_rand_lock(ctx))",
          "499:         return 0;",
          "501:     evp_rand_unlock(ctx);",
          "502:     if (!res)",
          "503:         status = EVP_RAND_STATE_ERROR;",
          "504:     return status;",
          "505: }",
          "508: {",
          "509:     int res = 0;",
          "",
          "[Removed Lines]",
          "500:     res = EVP_RAND_CTX_get_params(ctx, params);",
          "507: int EVP_RAND_CTX_verify_zeroization(EVP_RAND_CTX *ctx)",
          "",
          "[Added Lines]",
          "526:     res = EVP_RAND_get_ctx_params(ctx, params);",
          "533: int EVP_RAND_set_callbacks(EVP_RAND_CTX *ctx,",
          "534:                            OSSL_INOUT_CALLBACK *get_entropy,",
          "535:                            OSSL_CALLBACK *cleanup_entropy,",
          "536:                            OSSL_INOUT_CALLBACK *get_nonce,",
          "537:                            OSSL_CALLBACK *cleanup_nonce, void *arg)",
          "538: {",
          "539:     if (ctx->meth->set_callbacks == NULL) {",
          "540:         EVPerr(0, EVP_R_UNABLE_TO_SET_CALLBACKS);",
          "541:         return 0;",
          "542:     }",
          "543:     ctx->meth->set_callbacks(ctx->data, get_entropy, cleanup_entropy,",
          "544:                              get_nonce, cleanup_nonce, arg);",
          "545:     return 1;",
          "546: }",
          "548: int EVP_RAND_verify_zeroization(EVP_RAND_CTX *ctx)",
          "",
          "---------------"
        ],
        "crypto/rand/build.info||crypto/rand/build.info": [
          "File: crypto/rand/build.info -> crypto/rand/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: LIBS=../../libcrypto",
          "6: IF[{- !$disabled{'egd'} -}]",
          "14: ENDIF",
          "",
          "[Removed Lines]",
          "3: $COMMON=rand_pool.c rand_lib.c drbg_lib.c drbg_ctr.c drbg_hash.c drbg_hmac.c",
          "4: $CRYPTO=rand_unix.c rand_win.c randfile.c rand_err.c",
          "7:   $CYPTO=$CYPTO rand_egd.c",
          "8: ENDIF",
          "9: IF[{- $config{target} =~ /vxworks/i -}]",
          "10:   $CYPTO=$CYPTO rand_vxworks.c",
          "11: ENDIF",
          "12: IF[{- $config{target} =~ /vms/i -}]",
          "13:   $CYPTO=$CYPTO rand_vms.c",
          "",
          "[Added Lines]",
          "3: $COMMON=drbg_lib.c rand_lib.c",
          "4: $CRYPTO=randfile.c rand_err.c",
          "7:   $CRYPTO=$CRYPTO rand_egd.c",
          "",
          "---------------"
        ],
        "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c": [
          "File: crypto/rand/drbg_lib.c -> crypto/rand/drbg_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <openssl/crypto.h>",
          "12: #include <openssl/err.h>",
          "13: #include <openssl/rand.h>",
          "14: #include \"rand_local.h\"",
          "15: #include \"internal/thread_once.h\"",
          "16: #include \"crypto/rand.h\"",
          "18: #include \"crypto/cryptlib.h\"",
          "",
          "[Removed Lines]",
          "17: #include \"crypto/rand_pool.h\"",
          "",
          "[Added Lines]",
          "14: #include <openssl/core_names.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     CRYPTO_RWLOCK *lock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:     CRYPTO_THREAD_LOCAL private_drbg;",
          "71: } DRBG_GLOBAL;",
          "81: #define RAND_DRBG_TYPE_FLAGS    ( \\",
          "82:     RAND_DRBG_FLAG_MASTER | RAND_DRBG_FLAG_PUBLIC | RAND_DRBG_FLAG_PRIVATE )",
          "",
          "[Removed Lines]",
          "73: typedef struct drbg_nonce_global_st {",
          "74:     CRYPTO_RWLOCK *rand_nonce_lock;",
          "75:     int rand_nonce_count;",
          "76: } DRBG_NONCE_GLOBAL;",
          "79: static const char ossl_pers_string[] = DRBG_DEFAULT_PERS_STRING;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111: static RAND_DRBG *drbg_setup(OPENSSL_CTX *ctx, RAND_DRBG *parent, int drbg_type);",
          "123: {",
          "124:     switch (type) {",
          "128:         return 1;",
          "129:     default:",
          "130:         return 0;",
          "131:     }",
          "137:     case NID_sha1:",
          "138:     case NID_sha224:",
          "139:     case NID_sha256:",
          "140:     case NID_sha384:",
          "141:     case NID_sha512:",
          "142:     case NID_sha512_224:",
          "143:     case NID_sha512_256:",
          "144:     case NID_sha3_224:",
          "145:     case NID_sha3_256:",
          "146:     case NID_sha3_384:",
          "147:     case NID_sha3_512:",
          "151:     }",
          "152: }",
          "",
          "[Removed Lines]",
          "113: static RAND_DRBG *rand_drbg_new(OPENSSL_CTX *ctx,",
          "114:                                 int secure,",
          "115:                                 int type,",
          "116:                                 unsigned int flags,",
          "117:                                 RAND_DRBG *parent);",
          "119: static int rand_drbg_set(RAND_DRBG *drbg, int type, unsigned int flags);",
          "120: static int rand_drbg_init_method(RAND_DRBG *drbg);",
          "122: static int is_ctr(int type)",
          "125:     case NID_aes_128_ctr:",
          "126:     case NID_aes_192_ctr:",
          "127:     case NID_aes_256_ctr:",
          "132: }",
          "134: static int is_digest(int type)",
          "135: {",
          "136:     switch (type) {",
          "148:         return 1;",
          "149:     default:",
          "150:         return 0;",
          "",
          "[Added Lines]",
          "106: static int get_drbg_params(int type, unsigned int flags, const char **name,",
          "107:                            OSSL_PARAM params[3])",
          "109:     OSSL_PARAM *p = params;",
          "112:     case 0:",
          "117: #define CTR(v)                                                              \\",
          "121:     case NID_aes_128_ctr:",
          "122:         CTR(SN_aes_128_ctr);",
          "123:         break;",
          "124:     case NID_aes_192_ctr:",
          "125:         CTR(SN_aes_192_ctr);",
          "126:         break;",
          "127:     case NID_aes_256_ctr:",
          "128:         CTR(SN_aes_256_ctr);",
          "129:         break;",
          "131: #define DGST(v)                                                             \\",
          "133:     if ((flags & RAND_DRBG_FLAG_HMAC) == 0) {                               \\",
          "135:     } else {                                                                \\",
          "138:                                                 SN_hmac, 0);                \\",
          "142:         DGST(SN_sha1);",
          "143:         break;",
          "145:         DGST(SN_sha224);",
          "146:         break;",
          "148:         DGST(SN_sha256);",
          "149:         break;",
          "151:         DGST(SN_sha384);",
          "152:         break;",
          "154:         DGST(SN_sha512);",
          "155:         break;",
          "157:         DGST(SN_sha512_224);",
          "158:         break;",
          "160:         DGST(SN_sha512_256);",
          "161:         break;",
          "163:         DGST(SN_sha3_224);",
          "164:         break;",
          "166:         DGST(SN_sha3_256);",
          "167:         break;",
          "169:         DGST(SN_sha3_384);",
          "170:         break;",
          "172:         DGST(SN_sha3_512);",
          "175:     return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170:      OPENSSL_init_crypto(0, NULL);",
          "171: #endif",
          "173:     if (!CRYPTO_THREAD_init_local(&dgbl->private_drbg, NULL))",
          "174:         goto err1;",
          "176:     if (!CRYPTO_THREAD_init_local(&dgbl->public_drbg, NULL))",
          "177:         goto err2;",
          "183:     return dgbl;",
          "187:  err2:",
          "188:     CRYPTO_THREAD_cleanup_local(&dgbl->private_drbg);",
          "189:  err1:",
          "190:     OPENSSL_free(dgbl);",
          "191:     return NULL;",
          "192: }",
          "",
          "[Removed Lines]",
          "179:     dgbl->master_drbg = drbg_setup(libctx, NULL, RAND_DRBG_TYPE_MASTER);",
          "180:     if (dgbl->master_drbg == NULL)",
          "181:         goto err3;",
          "185:  err3:",
          "186:     CRYPTO_THREAD_cleanup_local(&dgbl->public_drbg);",
          "",
          "[Added Lines]",
          "197:     dgbl->lock = CRYPTO_THREAD_lock_new();",
          "198:     if (dgbl->lock == NULL)",
          "199:         goto err0;",
          "212:     CRYPTO_THREAD_lock_free(dgbl->lock);",
          "213:  err0:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:     if (dgbl == NULL)",
          "199:         return;",
          "201:     RAND_DRBG_free(dgbl->master_drbg);",
          "202:     CRYPTO_THREAD_cleanup_local(&dgbl->private_drbg);",
          "203:     CRYPTO_THREAD_cleanup_local(&dgbl->public_drbg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:     CRYPTO_THREAD_lock_free(dgbl->lock);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210:     drbg_ossl_ctx_free,",
          "211: };",
          "253: static DRBG_GLOBAL *drbg_get_global(OPENSSL_CTX *libctx)",
          "254: {",
          "255:     return openssl_ctx_get_data(libctx, OPENSSL_CTX_DRBG_INDEX,",
          "256:                                 &drbg_ossl_ctx_method);",
          "257: }",
          "",
          "[Removed Lines]",
          "220: static void *drbg_nonce_ossl_ctx_new(OPENSSL_CTX *libctx)",
          "221: {",
          "222:     DRBG_NONCE_GLOBAL *dngbl = OPENSSL_zalloc(sizeof(*dngbl));",
          "224:     if (dngbl == NULL)",
          "225:         return NULL;",
          "227:     dngbl->rand_nonce_lock = CRYPTO_THREAD_lock_new();",
          "228:     if (dngbl->rand_nonce_lock == NULL) {",
          "229:         OPENSSL_free(dngbl);",
          "230:         return NULL;",
          "231:     }",
          "233:     return dngbl;",
          "234: }",
          "236: static void drbg_nonce_ossl_ctx_free(void *vdngbl)",
          "237: {",
          "238:     DRBG_NONCE_GLOBAL *dngbl = vdngbl;",
          "240:     if (dngbl == NULL)",
          "241:         return;",
          "243:     CRYPTO_THREAD_lock_free(dngbl->rand_nonce_lock);",
          "245:     OPENSSL_free(dngbl);",
          "246: }",
          "248: static const OPENSSL_CTX_METHOD drbg_nonce_ossl_ctx_method = {",
          "249:     drbg_nonce_ossl_ctx_new,",
          "250:     drbg_nonce_ossl_ctx_free,",
          "251: };",
          "260: size_t rand_drbg_get_nonce(RAND_DRBG *drbg,",
          "261:                            unsigned char **pout,",
          "262:                            int entropy, size_t min_len, size_t max_len)",
          "263: {",
          "264:     size_t ret = 0;",
          "265:     RAND_POOL *pool;",
          "266:     DRBG_NONCE_GLOBAL *dngbl",
          "267:         = openssl_ctx_get_data(drbg->libctx, OPENSSL_CTX_DRBG_NONCE_INDEX,",
          "268:                                &drbg_nonce_ossl_ctx_method);",
          "269:     struct {",
          "270:         void *instance;",
          "271:         int count;",
          "272:     } data;",
          "274:     if (dngbl == NULL)",
          "275:         return 0;",
          "277:     memset(&data, 0, sizeof(data));",
          "278:     pool = rand_pool_new(0, 0, min_len, max_len);",
          "279:     if (pool == NULL)",
          "280:         return 0;",
          "282:     if (rand_pool_add_nonce_data(pool) == 0)",
          "283:         goto err;",
          "285:     data.instance = drbg;",
          "286:     CRYPTO_atomic_add(&dngbl->rand_nonce_count, 1, &data.count,",
          "287:                       dngbl->rand_nonce_lock);",
          "289:     if (rand_pool_add(pool, (unsigned char *)&data, sizeof(data), 0) == 0)",
          "290:         goto err;",
          "292:     ret   = rand_pool_length(pool);",
          "295:  err:",
          "296:     rand_pool_free(pool);",
          "298:     return ret;",
          "299: }",
          "305: void rand_drbg_cleanup_nonce(RAND_DRBG *drbg,",
          "306:                              unsigned char *out, size_t outlen)",
          "307: {",
          "308:     OPENSSL_clear_free(out, outlen);",
          "309: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "323: int RAND_DRBG_set_callback_data(RAND_DRBG *drbg, void *data)",
          "324: {",
          "327:         return 0;",
          "329:     drbg->callback_data = data;",
          "",
          "[Removed Lines]",
          "325:     if (drbg->state != DRBG_UNINITIALISED",
          "326:         || drbg->parent != NULL)",
          "",
          "[Added Lines]",
          "258:     if (EVP_RAND_state(drbg->rand) != EVP_RAND_STATE_UNINITIALISED",
          "259:             || drbg->parent != NULL)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "346: int RAND_DRBG_set(RAND_DRBG *drbg, int type, unsigned int flags)",
          "347: {",
          "353:     if (type == 0 && flags == 0) {",
          "354:         type = rand_drbg_type[RAND_DRBG_TYPE_MASTER];",
          "355:         flags = rand_drbg_flags[RAND_DRBG_TYPE_MASTER];",
          "356:     }",
          "364:     }",
          "367:     drbg->flags = flags;",
          "368:     drbg->type = type;",
          "374:     drbg->type = 0;",
          "375:     drbg->flags = 0;",
          "378:     return 0;",
          "379: }",
          "",
          "[Removed Lines]",
          "348:     return rand_drbg_set(drbg, type, flags) && rand_drbg_init_method(drbg);",
          "349: }",
          "351: static int rand_drbg_set(RAND_DRBG *drbg, int type, unsigned int flags)",
          "352: {",
          "359:     if (drbg->type != 0 && (type != drbg->type || flags != drbg->flags)) {",
          "360:         if (drbg->meth != NULL)",
          "361:             drbg->meth->uninstantiate(drbg);",
          "362:         rand_pool_free(drbg->adin_pool);",
          "363:         drbg->adin_pool = NULL;",
          "366:     drbg->state = DRBG_UNINITIALISED;",
          "369:     drbg->meth = NULL;",
          "371:     if (type == 0 || is_ctr(type) || is_digest(type))",
          "372:         return 1;",
          "376:     RANDerr(RAND_F_RAND_DRBG_SET, RAND_R_UNSUPPORTED_DRBG_TYPE);",
          "381: static int rand_drbg_init_method(RAND_DRBG *drbg)",
          "382: {",
          "383:     int ret;",
          "385:     if (drbg->meth != NULL)",
          "386:         return 1;",
          "388:     if (is_ctr(drbg->type)) {",
          "389:         ret = drbg_ctr_init(drbg);",
          "390:     } else if (is_digest(drbg->type)) {",
          "391:         if (drbg->flags & RAND_DRBG_FLAG_HMAC)",
          "392:             ret = drbg_hmac_init(drbg);",
          "393:         else",
          "394:             ret = drbg_hash_init(drbg);",
          "395:     } else {",
          "397:         RANDerr(RAND_F_RAND_DRBG_INIT_METHOD, ERR_R_INTERNAL_ERROR);",
          "398:         drbg->type = 0;",
          "399:         drbg->flags = 0;",
          "400:         return 0;",
          "401:     }",
          "403:     if (ret == 0) {",
          "404:         drbg->state = DRBG_ERROR;",
          "405:         RANDerr(RAND_F_RAND_DRBG_INIT_METHOD, RAND_R_ERROR_INITIALISING_DRBG);",
          "406:     }",
          "407:     return ret;",
          "408: }",
          "",
          "[Added Lines]",
          "281:     OSSL_PARAM params[6], *p = params;",
          "282:     unsigned int reseed_interval;",
          "283:     time_t reseed_time_interval;",
          "284:     const char *name = NULL;",
          "285:     EVP_RAND *rand;",
          "286:     EVP_RAND_CTX *pctx;",
          "287:     int use_df;",
          "294:     if (drbg->parent == NULL) {",
          "295:         reseed_interval = master_reseed_interval;",
          "296:         reseed_time_interval = master_reseed_time_interval;",
          "297:     } else {",
          "298:         reseed_interval = slave_reseed_interval;",
          "299:         reseed_time_interval = slave_reseed_time_interval;",
          "300:     }",
          "302:                                      &reseed_interval);",
          "304:                                        &reseed_time_interval);",
          "305:     use_df = (flags & RAND_DRBG_FLAG_CTR_NO_DF) == 0;",
          "308:     if (!get_drbg_params(type, flags, &name, p)) {",
          "309:         RANDerr(0, RAND_R_UNSUPPORTED_DRBG_TYPE);",
          "310:         return 0;",
          "313:     rand = EVP_RAND_fetch(drbg->libctx, name, NULL);",
          "314:     if (rand == NULL) {",
          "315:         RANDerr(0, RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED);",
          "316:         return 0;",
          "317:     }",
          "319:     EVP_RAND_CTX_free(drbg->rand);",
          "320:     drbg->rand = NULL;",
          "325:     pctx = drbg->parent != NULL ? drbg->parent->rand : NULL;",
          "326:     drbg->rand = EVP_RAND_CTX_new(rand, pctx);",
          "327:     EVP_RAND_free(rand);",
          "328:     if (drbg->rand == NULL) {",
          "329:         RANDerr(0, RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED);",
          "330:         goto err;",
          "331:     }",
          "333:     if (!EVP_RAND_set_ctx_params(drbg->rand, params)) {",
          "334:         RANDerr(0, RAND_R_ERROR_INITIALISING_DRBG);",
          "335:         goto err;",
          "336:     }",
          "337:     return 1;",
          "338: err:",
          "339:     EVP_RAND_CTX_free(drbg->rand);",
          "340:     drbg->rand = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "415: int RAND_DRBG_set_defaults(int type, unsigned int flags)",
          "416: {",
          "417:     int all;",
          "419:         RANDerr(RAND_F_RAND_DRBG_SET_DEFAULTS, RAND_R_UNSUPPORTED_DRBG_TYPE);",
          "420:         return 0;",
          "421:     }",
          "",
          "[Removed Lines]",
          "418:     if (!(is_digest(type) || is_ctr(type))) {",
          "",
          "[Added Lines]",
          "354:     const char *name;",
          "355:     OSSL_PARAM params[3];",
          "357:     if (!get_drbg_params(type, flags, &name, params)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "452: static RAND_DRBG *rand_drbg_new(OPENSSL_CTX *ctx,",
          "454:                                 int type,",
          "455:                                 unsigned int flags,",
          "456:                                 RAND_DRBG *parent)",
          "457: {",
          "461:     if (drbg == NULL) {",
          "462:         RANDerr(RAND_F_RAND_DRBG_NEW, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "453:                                 int secure,",
          "458:     RAND_DRBG *drbg = secure ? OPENSSL_secure_zalloc(sizeof(*drbg))",
          "459:                              : OPENSSL_zalloc(sizeof(*drbg));",
          "",
          "[Added Lines]",
          "395:     RAND_DRBG *drbg = OPENSSL_zalloc(sizeof(*drbg));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "464:     }",
          "466:     drbg->libctx = ctx;",
          "469:     drbg->parent = parent;",
          "493:     if (RAND_DRBG_set(drbg, type, flags) == 0)",
          "494:         goto err;",
          "510:     return drbg;",
          "512:  err:",
          "",
          "[Removed Lines]",
          "467:     drbg->secure = secure && CRYPTO_secure_allocated(drbg);",
          "468:     drbg->fork_id = openssl_get_fork_id();",
          "471:     if (parent == NULL) {",
          "472:         drbg->get_entropy = rand_drbg_get_entropy;",
          "473:         drbg->cleanup_entropy = rand_drbg_cleanup_entropy;",
          "474: #ifndef RAND_DRBG_GET_RANDOM_NONCE",
          "475:         drbg->get_nonce = rand_drbg_get_nonce;",
          "476:         drbg->cleanup_nonce = rand_drbg_cleanup_nonce;",
          "477: #endif",
          "479:         drbg->reseed_interval = master_reseed_interval;",
          "480:         drbg->reseed_time_interval = master_reseed_time_interval;",
          "481:     } else {",
          "482:         drbg->get_entropy = rand_drbg_get_entropy;",
          "483:         drbg->cleanup_entropy = rand_drbg_cleanup_entropy;",
          "489:         drbg->reseed_interval = slave_reseed_interval;",
          "490:         drbg->reseed_time_interval = slave_reseed_time_interval;",
          "491:     }",
          "496:     if (parent != NULL) {",
          "497:         rand_drbg_lock(parent);",
          "498:         if (drbg->strength > parent->strength) {",
          "503:             rand_drbg_unlock(parent);",
          "504:             RANDerr(RAND_F_RAND_DRBG_NEW, RAND_R_PARENT_STRENGTH_TOO_WEAK);",
          "505:             goto err;",
          "506:         }",
          "507:         rand_drbg_unlock(parent);",
          "508:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "518: RAND_DRBG *RAND_DRBG_new_ex(OPENSSL_CTX *ctx, int type, unsigned int flags,",
          "519:                             RAND_DRBG *parent)",
          "520: {",
          "522: }",
          "524: RAND_DRBG *RAND_DRBG_new(int type, unsigned int flags, RAND_DRBG *parent)",
          "",
          "[Removed Lines]",
          "521:     return rand_drbg_new(ctx, 0, type, flags, parent);",
          "",
          "[Added Lines]",
          "419:     return rand_drbg_new(ctx, type, flags, parent);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "526:     return RAND_DRBG_new_ex(NULL, type, flags, parent);",
          "527: }",
          "",
          "[Removed Lines]",
          "529: RAND_DRBG *RAND_DRBG_secure_new_ex(OPENSSL_CTX *ctx, int type,",
          "530:                                    unsigned int flags, RAND_DRBG *parent)",
          "531: {",
          "532:     return rand_drbg_new(ctx, 1, type, flags, parent);",
          "533: }",
          "535: RAND_DRBG *RAND_DRBG_secure_new(int type, unsigned int flags, RAND_DRBG *parent)",
          "536: {",
          "537:     return RAND_DRBG_secure_new_ex(NULL, type, flags, parent);",
          "538: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "544:     if (drbg == NULL)",
          "545:         return;",
          "552:     CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RAND_DRBG, drbg, &drbg->ex_data);",
          "559: }",
          "",
          "[Removed Lines]",
          "547:     if (drbg->meth != NULL)",
          "548:         drbg->meth->uninstantiate(drbg);",
          "549:     rand_pool_free(drbg->adin_pool);",
          "550:     CRYPTO_THREAD_lock_free(drbg->lock);",
          "551: #ifndef FIPS_MODULE",
          "553: #endif",
          "555:     if (drbg->secure)",
          "556:         OPENSSL_secure_clear_free(drbg, sizeof(*drbg));",
          "557:     else",
          "558:         OPENSSL_clear_free(drbg, sizeof(*drbg));",
          "",
          "[Added Lines]",
          "436:     OPENSSL_free(drbg);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "569: int RAND_DRBG_instantiate(RAND_DRBG *drbg,",
          "570:                           const unsigned char *pers, size_t perslen)",
          "571: {",
          "658: }",
          "",
          "[Removed Lines]",
          "572:     unsigned char *nonce = NULL, *entropy = NULL;",
          "573:     size_t noncelen = 0, entropylen = 0;",
          "574:     size_t min_entropy, min_entropylen, max_entropylen;",
          "576:     if (drbg->meth == NULL && !rand_drbg_init_method(drbg)) {",
          "577:         RANDerr(RAND_F_RAND_DRBG_INSTANTIATE,",
          "578:                 RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED);",
          "579:         goto end;",
          "580:     }",
          "582:     min_entropy = drbg->strength;",
          "583:     min_entropylen = drbg->min_entropylen;",
          "584:     max_entropylen = drbg->max_entropylen;",
          "586:     if (perslen > drbg->max_perslen) {",
          "587:         RANDerr(RAND_F_RAND_DRBG_INSTANTIATE,",
          "588:                 RAND_R_PERSONALISATION_STRING_TOO_LONG);",
          "589:         goto end;",
          "590:     }",
          "592:     if (drbg->state != DRBG_UNINITIALISED) {",
          "593:         if (drbg->state == DRBG_ERROR)",
          "594:             RANDerr(RAND_F_RAND_DRBG_INSTANTIATE, RAND_R_IN_ERROR_STATE);",
          "595:         else",
          "596:             RANDerr(RAND_F_RAND_DRBG_INSTANTIATE, RAND_R_ALREADY_INSTANTIATED);",
          "597:         goto end;",
          "598:     }",
          "600:     drbg->state = DRBG_ERROR;",
          "608:     if (drbg->min_noncelen > 0 && drbg->get_nonce == NULL) {",
          "609:         min_entropy += drbg->strength / 2;",
          "610:         min_entropylen += drbg->min_noncelen;",
          "611:         max_entropylen += drbg->max_noncelen;",
          "612:     }",
          "614:     drbg->reseed_next_counter = tsan_load(&drbg->reseed_prop_counter);",
          "615:     if (drbg->reseed_next_counter) {",
          "616:         drbg->reseed_next_counter++;",
          "617:         if(!drbg->reseed_next_counter)",
          "618:             drbg->reseed_next_counter = 1;",
          "619:     }",
          "621:     if (drbg->get_entropy != NULL)",
          "622:         entropylen = drbg->get_entropy(drbg, &entropy, min_entropy,",
          "623:                                        min_entropylen, max_entropylen, 0);",
          "624:     if (entropylen < min_entropylen",
          "625:             || entropylen > max_entropylen) {",
          "626:         RANDerr(RAND_F_RAND_DRBG_INSTANTIATE, RAND_R_ERROR_RETRIEVING_ENTROPY);",
          "627:         goto end;",
          "628:     }",
          "630:     if (drbg->min_noncelen > 0 && drbg->get_nonce != NULL) {",
          "631:         noncelen = drbg->get_nonce(drbg, &nonce, drbg->strength / 2,",
          "632:                                    drbg->min_noncelen, drbg->max_noncelen);",
          "633:         if (noncelen < drbg->min_noncelen || noncelen > drbg->max_noncelen) {",
          "634:             RANDerr(RAND_F_RAND_DRBG_INSTANTIATE, RAND_R_ERROR_RETRIEVING_NONCE);",
          "635:             goto end;",
          "636:         }",
          "637:     }",
          "639:     if (!drbg->meth->instantiate(drbg, entropy, entropylen,",
          "640:                          nonce, noncelen, pers, perslen)) {",
          "641:         RANDerr(RAND_F_RAND_DRBG_INSTANTIATE, RAND_R_ERROR_INSTANTIATING_DRBG);",
          "642:         goto end;",
          "643:     }",
          "645:     drbg->state = DRBG_READY;",
          "646:     drbg->reseed_gen_counter = 1;",
          "647:     drbg->reseed_time = time(NULL);",
          "648:     tsan_store(&drbg->reseed_prop_counter, drbg->reseed_next_counter);",
          "650:  end:",
          "651:     if (entropy != NULL && drbg->cleanup_entropy != NULL)",
          "652:         drbg->cleanup_entropy(drbg, entropy, entropylen);",
          "653:     if (nonce != NULL && drbg->cleanup_nonce != NULL)",
          "654:         drbg->cleanup_nonce(drbg, nonce, noncelen);",
          "655:     if (drbg->state == DRBG_READY)",
          "656:         return 1;",
          "657:     return 0;",
          "",
          "[Added Lines]",
          "450:     return EVP_RAND_instantiate(drbg->rand, EVP_RAND_strength(drbg->rand), 0,",
          "451:                                 pers, perslen);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "667: int RAND_DRBG_uninstantiate(RAND_DRBG *drbg)",
          "668: {",
          "669:     int index = -1, type, flags;",
          "676:     if (drbg->flags & RAND_DRBG_FLAG_MASTER)",
          "",
          "[Removed Lines]",
          "670:     if (drbg->meth != NULL) {",
          "671:         drbg->meth->uninstantiate(drbg);",
          "672:         drbg->meth = NULL;",
          "673:     }",
          "",
          "[Added Lines]",
          "465:     if (!EVP_RAND_uninstantiate(drbg->rand))",
          "466:         return 0;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "687:         flags = drbg->flags;",
          "688:         type = drbg->type;",
          "689:     }",
          "691: }",
          "",
          "[Removed Lines]",
          "690:     return rand_drbg_set(drbg, type, flags);",
          "",
          "[Added Lines]",
          "483:     return RAND_DRBG_set(drbg, type, flags);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "701:                      const unsigned char *adin, size_t adinlen,",
          "702:                      int prediction_resistance)",
          "703: {",
          "757: }",
          "778: {",
          "788:         return 0;",
          "858: }",
          "873: {",
          "893:         return 0;",
          "897:         return 0;",
          "937:         return 0;",
          "942:     return 1;",
          "943: }",
          "954: {",
          "986: }",
          "",
          "[Removed Lines]",
          "704:     unsigned char *entropy = NULL;",
          "705:     size_t entropylen = 0;",
          "707:     if (drbg->state == DRBG_ERROR) {",
          "708:         RANDerr(RAND_F_RAND_DRBG_RESEED, RAND_R_IN_ERROR_STATE);",
          "709:         return 0;",
          "710:     }",
          "711:     if (drbg->state == DRBG_UNINITIALISED) {",
          "712:         RANDerr(RAND_F_RAND_DRBG_RESEED, RAND_R_NOT_INSTANTIATED);",
          "713:         return 0;",
          "714:     }",
          "716:     if (adin == NULL) {",
          "717:         adinlen = 0;",
          "718:     } else if (adinlen > drbg->max_adinlen) {",
          "719:         RANDerr(RAND_F_RAND_DRBG_RESEED, RAND_R_ADDITIONAL_INPUT_TOO_LONG);",
          "720:         return 0;",
          "721:     }",
          "723:     drbg->state = DRBG_ERROR;",
          "725:     drbg->reseed_next_counter = tsan_load(&drbg->reseed_prop_counter);",
          "726:     if (drbg->reseed_next_counter) {",
          "727:         drbg->reseed_next_counter++;",
          "728:         if(!drbg->reseed_next_counter)",
          "729:             drbg->reseed_next_counter = 1;",
          "730:     }",
          "732:     if (drbg->get_entropy != NULL)",
          "733:         entropylen = drbg->get_entropy(drbg, &entropy, drbg->strength,",
          "734:                                        drbg->min_entropylen,",
          "735:                                        drbg->max_entropylen,",
          "736:                                        prediction_resistance);",
          "737:     if (entropylen < drbg->min_entropylen",
          "738:             || entropylen > drbg->max_entropylen) {",
          "739:         RANDerr(RAND_F_RAND_DRBG_RESEED, RAND_R_ERROR_RETRIEVING_ENTROPY);",
          "740:         goto end;",
          "741:     }",
          "743:     if (!drbg->meth->reseed(drbg, entropy, entropylen, adin, adinlen))",
          "744:         goto end;",
          "746:     drbg->state = DRBG_READY;",
          "747:     drbg->reseed_gen_counter = 1;",
          "748:     drbg->reseed_time = time(NULL);",
          "749:     tsan_store(&drbg->reseed_prop_counter, drbg->reseed_next_counter);",
          "751:  end:",
          "752:     if (entropy != NULL && drbg->cleanup_entropy != NULL)",
          "753:         drbg->cleanup_entropy(drbg, entropy, entropylen);",
          "754:     if (drbg->state == DRBG_READY)",
          "755:         return 1;",
          "756:     return 0;",
          "776: int rand_drbg_restart(RAND_DRBG *drbg,",
          "777:                       const unsigned char *buffer, size_t len, size_t entropy)",
          "779:     int reseeded = 0;",
          "780:     const unsigned char *adin = NULL;",
          "781:     size_t adinlen = 0;",
          "783:     if (drbg->seed_pool != NULL) {",
          "784:         RANDerr(RAND_F_RAND_DRBG_RESTART, ERR_R_INTERNAL_ERROR);",
          "785:         drbg->state = DRBG_ERROR;",
          "786:         rand_pool_free(drbg->seed_pool);",
          "787:         drbg->seed_pool = NULL;",
          "789:     }",
          "791:     if (buffer != NULL) {",
          "792:         if (entropy > 0) {",
          "793:             if (drbg->max_entropylen < len) {",
          "794:                 RANDerr(RAND_F_RAND_DRBG_RESTART,",
          "795:                     RAND_R_ENTROPY_INPUT_TOO_LONG);",
          "796:                 drbg->state = DRBG_ERROR;",
          "797:                 return 0;",
          "798:             }",
          "800:             if (entropy > 8 * len) {",
          "801:                 RANDerr(RAND_F_RAND_DRBG_RESTART, RAND_R_ENTROPY_OUT_OF_RANGE);",
          "802:                 drbg->state = DRBG_ERROR;",
          "803:                 return 0;",
          "804:             }",
          "807:             drbg->seed_pool = rand_pool_attach(buffer, len, entropy);",
          "808:             if (drbg->seed_pool == NULL)",
          "809:                 return 0;",
          "810:         } else {",
          "811:             if (drbg->max_adinlen < len) {",
          "812:                 RANDerr(RAND_F_RAND_DRBG_RESTART,",
          "813:                         RAND_R_ADDITIONAL_INPUT_TOO_LONG);",
          "814:                 drbg->state = DRBG_ERROR;",
          "815:                 return 0;",
          "816:             }",
          "817:             adin = buffer;",
          "818:             adinlen = len;",
          "819:         }",
          "820:     }",
          "823:     if (drbg->state == DRBG_ERROR)",
          "824:         RAND_DRBG_uninstantiate(drbg);",
          "827:     if (drbg->state == DRBG_UNINITIALISED) {",
          "829:         RAND_DRBG_instantiate(drbg,",
          "830:                               (const unsigned char *) ossl_pers_string,",
          "831:                               sizeof(ossl_pers_string) - 1);",
          "833:         reseeded = (drbg->state == DRBG_READY);",
          "834:     }",
          "837:     if (drbg->state == DRBG_READY) {",
          "838:         if (adin != NULL) {",
          "847:             drbg->meth->reseed(drbg, adin, adinlen, NULL, 0);",
          "848:         } else if (reseeded == 0) {",
          "850:             RAND_DRBG_reseed(drbg, NULL, 0, 0);",
          "851:         }",
          "852:     }",
          "854:     rand_pool_free(drbg->seed_pool);",
          "855:     drbg->seed_pool = NULL;",
          "857:     return drbg->state == DRBG_READY;",
          "870: int RAND_DRBG_generate(RAND_DRBG *drbg, unsigned char *out, size_t outlen,",
          "871:                        int prediction_resistance,",
          "872:                        const unsigned char *adin, size_t adinlen)",
          "874:     int fork_id;",
          "875:     int reseed_required = 0;",
          "877:     if (drbg->state != DRBG_READY) {",
          "879:         rand_drbg_restart(drbg, NULL, 0, 0);",
          "881:         if (drbg->state == DRBG_ERROR) {",
          "882:             RANDerr(RAND_F_RAND_DRBG_GENERATE, RAND_R_IN_ERROR_STATE);",
          "883:             return 0;",
          "884:         }",
          "885:         if (drbg->state == DRBG_UNINITIALISED) {",
          "886:             RANDerr(RAND_F_RAND_DRBG_GENERATE, RAND_R_NOT_INSTANTIATED);",
          "887:             return 0;",
          "888:         }",
          "889:     }",
          "891:     if (outlen > drbg->max_request) {",
          "892:         RANDerr(RAND_F_RAND_DRBG_GENERATE, RAND_R_REQUEST_TOO_LARGE_FOR_DRBG);",
          "894:     }",
          "895:     if (adinlen > drbg->max_adinlen) {",
          "896:         RANDerr(RAND_F_RAND_DRBG_GENERATE, RAND_R_ADDITIONAL_INPUT_TOO_LONG);",
          "898:     }",
          "900:     fork_id = openssl_get_fork_id();",
          "902:     if (drbg->fork_id != fork_id) {",
          "903:         drbg->fork_id = fork_id;",
          "904:         reseed_required = 1;",
          "905:     }",
          "907:     if (drbg->reseed_interval > 0) {",
          "908:         if (drbg->reseed_gen_counter > drbg->reseed_interval)",
          "909:             reseed_required = 1;",
          "910:     }",
          "911:     if (drbg->reseed_time_interval > 0) {",
          "912:         time_t now = time(NULL);",
          "913:         if (now < drbg->reseed_time",
          "914:             || now - drbg->reseed_time >= drbg->reseed_time_interval)",
          "915:             reseed_required = 1;",
          "916:     }",
          "917:     if (drbg->parent != NULL) {",
          "918:         unsigned int reseed_counter = tsan_load(&drbg->reseed_prop_counter);",
          "919:         if (reseed_counter > 0",
          "920:                 && tsan_load(&drbg->parent->reseed_prop_counter)",
          "921:                    != reseed_counter)",
          "922:             reseed_required = 1;",
          "923:     }",
          "925:     if (reseed_required || prediction_resistance) {",
          "926:         if (!RAND_DRBG_reseed(drbg, adin, adinlen, prediction_resistance)) {",
          "927:             RANDerr(RAND_F_RAND_DRBG_GENERATE, RAND_R_RESEED_ERROR);",
          "928:             return 0;",
          "929:         }",
          "930:         adin = NULL;",
          "931:         adinlen = 0;",
          "932:     }",
          "934:     if (!drbg->meth->generate(drbg, out, outlen, adin, adinlen)) {",
          "935:         drbg->state = DRBG_ERROR;",
          "936:         RANDerr(RAND_F_RAND_DRBG_GENERATE, RAND_R_GENERATE_ERROR);",
          "938:     }",
          "940:     drbg->reseed_gen_counter++;",
          "953: int RAND_DRBG_bytes(RAND_DRBG *drbg, unsigned char *out, size_t outlen)",
          "955:     unsigned char *additional = NULL;",
          "956:     size_t additional_len;",
          "957:     size_t chunk;",
          "958:     size_t ret = 0;",
          "960:     if (drbg->adin_pool == NULL) {",
          "961:         if (drbg->type == 0)",
          "962:             goto err;",
          "963:         drbg->adin_pool = rand_pool_new(0, 0, 0, drbg->max_adinlen);",
          "964:         if (drbg->adin_pool == NULL)",
          "965:             goto err;",
          "966:     }",
          "968:     additional_len = rand_drbg_get_additional_data(drbg->adin_pool,",
          "969:                                                    &additional);",
          "971:     for ( ; outlen > 0; outlen -= chunk, out += chunk) {",
          "972:         chunk = outlen;",
          "973:         if (chunk > drbg->max_request)",
          "974:             chunk = drbg->max_request;",
          "975:         ret = RAND_DRBG_generate(drbg, out, chunk, 0, additional, additional_len);",
          "976:         if (!ret)",
          "977:             goto err;",
          "978:     }",
          "979:     ret = 1;",
          "981:  err:",
          "982:     if (additional != NULL)",
          "983:         rand_drbg_cleanup_additional_data(drbg->adin_pool, additional);",
          "985:     return ret;",
          "",
          "[Added Lines]",
          "497:     return EVP_RAND_reseed(drbg->rand, prediction_resistance, NULL, 0,",
          "498:                            adin, adinlen);",
          "511: int RAND_DRBG_generate(RAND_DRBG *drbg, unsigned char *out, size_t outlen,",
          "512:                        int prediction_resistance,",
          "513:                        const unsigned char *adin, size_t adinlen)",
          "514: {",
          "515:     return EVP_RAND_generate(drbg->rand, out, outlen, 0,",
          "516:                              prediction_resistance, adin, adinlen);",
          "517: }",
          "527: int RAND_DRBG_bytes(RAND_DRBG *drbg, unsigned char *out, size_t outlen)",
          "529:     return EVP_RAND_generate(drbg->rand, out, outlen, 0, 0, NULL, 0);",
          "530: }",
          "533: static int rand_drbg_get_entroy_cb(const OSSL_PARAM *params, OSSL_PARAM *out,",
          "534:                                    void *vdrbg)",
          "535: {",
          "536:     RAND_DRBG *drbg = (RAND_DRBG *)vdrbg;",
          "537:     int entropy = 0, prediction_resistance = 0;",
          "538:     size_t min_len = 0, max_len = 2048;",
          "539:     const OSSL_PARAM *p;",
          "540:     OSSL_PARAM *q;",
          "542:     if (drbg->get_entropy == NULL)",
          "545:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_ENTROPY_REQUIRED);",
          "546:     if (p == NULL || !OSSL_PARAM_get_int(p, &entropy))",
          "547:         return 0;",
          "549:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_PREDICTION_RESISTANCE);",
          "550:     if (p == NULL || !OSSL_PARAM_get_int(p, &prediction_resistance))",
          "551:         return 0;",
          "553:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_MAX_LENGTH);",
          "554:     if (p == NULL || !OSSL_PARAM_get_size_t(p, &max_len))",
          "555:         return 0;",
          "557:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_MIN_LENGTH);",
          "558:     if (p == NULL || !OSSL_PARAM_get_size_t(p, &min_len))",
          "559:         return 0;",
          "561:     q = OSSL_PARAM_locate(out, OSSL_DRBG_PARAM_RANDOM_DATA);",
          "562:     if (q == NULL || q->data_type != OSSL_PARAM_OCTET_PTR || q->data == NULL)",
          "563:         return 0;",
          "565:     q->return_size = drbg->get_entropy(drbg, (unsigned char **)q->data, entropy,",
          "566:                                        min_len, max_len, prediction_resistance);",
          "567:     return 1;",
          "570: static int rand_drbg_cleanup_entropy_cb(const OSSL_PARAM *params, void *vdrbg)",
          "572:     RAND_DRBG *drbg = (RAND_DRBG *)vdrbg;",
          "573:     const OSSL_PARAM *p;",
          "574:     size_t sz;",
          "576:     if (drbg->cleanup_entropy == NULL)",
          "579:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_SIZE);",
          "580:     if (p == NULL || !OSSL_PARAM_get_size_t(p, &sz))",
          "583:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_RANDOM_DATA);",
          "584:     if (p == NULL || p->data_type != OSSL_PARAM_OCTET_PTR)",
          "585:         return 0;",
          "587:     drbg->cleanup_entropy(drbg, p->data, sz);",
          "588:     return 1;",
          "589: }",
          "591: static int rand_drbg_get_nonce_cb(const OSSL_PARAM *params, OSSL_PARAM *out,",
          "592:                                   void *vdrbg)",
          "593: {",
          "594:     RAND_DRBG *drbg = (RAND_DRBG *)vdrbg;",
          "595:     int entropy = 0;",
          "596:     size_t min_len = 0, max_len = 10240;",
          "597:     const OSSL_PARAM *p;",
          "598:     OSSL_PARAM *q;",
          "600:     if (drbg->get_nonce == NULL)",
          "601:         return 0;",
          "603:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_ENTROPY_REQUIRED);",
          "604:     if (p == NULL || !OSSL_PARAM_get_int(p, &entropy))",
          "607:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_MAX_LENGTH);",
          "608:     if (p == NULL || !OSSL_PARAM_get_size_t(p, &max_len))",
          "609:         return 0;",
          "611:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_MIN_LENGTH);",
          "612:     if (p == NULL || !OSSL_PARAM_get_size_t(p, &min_len))",
          "613:         return 0;",
          "615:     q = OSSL_PARAM_locate(out, OSSL_DRBG_PARAM_RANDOM_DATA);",
          "616:     if (q == NULL || q->data_type != OSSL_PARAM_OCTET_PTR || q->data == NULL)",
          "617:         return 0;",
          "619:     q->return_size = drbg->get_nonce(drbg, (unsigned char **)q->data, entropy,",
          "620:                                      min_len, max_len);",
          "624: static int rand_drbg_cleanup_nonce_cb(const OSSL_PARAM *params, void *vdrbg)",
          "626:     RAND_DRBG *drbg = (RAND_DRBG *)vdrbg;",
          "627:     const OSSL_PARAM *p;",
          "628:     size_t sz;",
          "630:     if (drbg->cleanup_nonce == NULL)",
          "631:         return 0;",
          "633:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_SIZE);",
          "634:     if (p == NULL || !OSSL_PARAM_get_size_t(p, &sz))",
          "635:         return 0;",
          "637:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_RANDOM_DATA);",
          "638:     if (p == NULL || p->data_type != OSSL_PARAM_OCTET_PTR)",
          "639:         return 0;",
          "641:     drbg->cleanup_nonce(drbg, p->data, sz);",
          "642:     return 1;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "999:                             RAND_DRBG_get_nonce_fn get_nonce,",
          "1000:                             RAND_DRBG_cleanup_nonce_fn cleanup_nonce)",
          "1001: {",
          "1004:         return 0;",
          "1009:     return 1;",
          "1010: }",
          "",
          "[Removed Lines]",
          "1002:     if (drbg->state != DRBG_UNINITIALISED",
          "1003:             || drbg->parent != NULL)",
          "1005:     drbg->get_entropy = get_entropy;",
          "1006:     drbg->cleanup_entropy = cleanup_entropy;",
          "1007:     drbg->get_nonce = get_nonce;",
          "1008:     drbg->cleanup_nonce = cleanup_nonce;",
          "",
          "[Added Lines]",
          "659:     EVP_RAND_CTX *rand = drbg->rand;",
          "660:     OSSL_INOUT_CALLBACK *g_ent = NULL, *g_nonce = NULL;",
          "661:     OSSL_CALLBACK *c_ent = NULL, *c_nonce = NULL;",
          "663:     if (get_entropy != NULL) {",
          "664:         g_ent = &rand_drbg_get_entroy_cb;",
          "665:         c_ent = &rand_drbg_cleanup_entropy_cb;",
          "666:     }",
          "667:     if (get_nonce != NULL) {",
          "668:         g_nonce = rand_drbg_get_nonce_cb;",
          "669:         c_nonce = rand_drbg_cleanup_nonce_cb;",
          "670:     }",
          "671:     if (!EVP_RAND_set_callbacks(rand, g_ent, c_ent, g_nonce, c_nonce, drbg))",
          "674:     drbg->get_entropy = g_ent != NULL ? get_entropy : NULL;",
          "675:     drbg->cleanup_entropy = c_ent != NULL ? cleanup_entropy : NULL;",
          "676:     drbg->get_nonce = g_nonce != NULL ? get_nonce : NULL;",
          "677:     drbg->cleanup_nonce = c_nonce != NULL ? cleanup_nonce : NULL;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1021: int RAND_DRBG_set_reseed_interval(RAND_DRBG *drbg, unsigned int interval)",
          "1022: {",
          "1023:     if (interval > MAX_RESEED_INTERVAL)",
          "1024:         return 0;",
          "1027: }",
          "",
          "[Removed Lines]",
          "1025:     drbg->reseed_interval = interval;",
          "1026:     return 1;",
          "",
          "[Added Lines]",
          "692:     OSSL_PARAM params[2] = { OSSL_PARAM_END, OSSL_PARAM_END };",
          "696:     params[0] = OSSL_PARAM_construct_uint(OSSL_DRBG_PARAM_RESEED_REQUESTS,",
          "697:                                           &interval);",
          "698:     return EVP_RAND_set_ctx_params(drbg->rand, params);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1039: int RAND_DRBG_set_reseed_time_interval(RAND_DRBG *drbg, time_t interval)",
          "1040: {",
          "1041:     if (interval > MAX_RESEED_TIME_INTERVAL)",
          "1042:         return 0;",
          "1045: }",
          "",
          "[Removed Lines]",
          "1043:     drbg->reseed_time_interval = interval;",
          "1044:     return 1;",
          "",
          "[Added Lines]",
          "713:     OSSL_PARAM params[2] = { OSSL_PARAM_END, OSSL_PARAM_END };",
          "717:     params[0] =",
          "718:         OSSL_PARAM_construct_time_t(OSSL_DRBG_PARAM_RESEED_TIME_INTERVAL,",
          "719:                                     &interval);",
          "720:     return EVP_RAND_set_ctx_params(drbg->rand, params);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1077:     return 1;",
          "1078: }",
          "",
          "[Removed Lines]",
          "1086: int rand_drbg_lock(RAND_DRBG *drbg)",
          "1087: {",
          "1088:     if (drbg->lock != NULL)",
          "1089:         return CRYPTO_THREAD_write_lock(drbg->lock);",
          "1091:     return 1;",
          "1092: }",
          "1100: int rand_drbg_unlock(RAND_DRBG *drbg)",
          "1101: {",
          "1102:     if (drbg->lock != NULL)",
          "1103:         return CRYPTO_THREAD_unlock(drbg->lock);",
          "1105:     return 1;",
          "1106: }",
          "1116: int rand_drbg_enable_locking(RAND_DRBG *drbg)",
          "1117: {",
          "1118:     if (drbg->state != DRBG_UNINITIALISED) {",
          "1119:         RANDerr(RAND_F_RAND_DRBG_ENABLE_LOCKING,",
          "1120:                 RAND_R_DRBG_ALREADY_INITIALIZED);",
          "1121:         return 0;",
          "1122:     }",
          "1124:     if (drbg->lock == NULL) {",
          "1125:         if (drbg->parent != NULL && drbg->parent->lock == NULL) {",
          "1126:             RANDerr(RAND_F_RAND_DRBG_ENABLE_LOCKING,",
          "1127:                     RAND_R_PARENT_LOCKING_NOT_ENABLED);",
          "1128:             return 0;",
          "1129:         }",
          "1131:         drbg->lock = CRYPTO_THREAD_lock_new();",
          "1132:         if (drbg->lock == NULL) {",
          "1133:             RANDerr(RAND_F_RAND_DRBG_ENABLE_LOCKING,",
          "1134:                     RAND_R_FAILED_TO_CREATE_LOCK);",
          "1135:             return 0;",
          "1136:         }",
          "1137:     }",
          "1139:     return 1;",
          "1140: }",
          "1142: #ifndef FIPS_MODULE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1152: {",
          "1153:     return CRYPTO_get_ex_data(&drbg->ex_data, idx);",
          "1154: }",
          "",
          "[Removed Lines]",
          "1155: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1169: {",
          "1170:     RAND_DRBG *drbg;",
          "1174:     if (drbg == NULL)",
          "1175:         return NULL;",
          "1179:         goto err;",
          "1193:     return drbg;",
          "1195: err:",
          "",
          "[Removed Lines]",
          "1172:     drbg = RAND_DRBG_secure_new_ex(ctx, rand_drbg_type[drbg_type],",
          "1173:                                    rand_drbg_flags[drbg_type], parent);",
          "1178:     if (parent == NULL && rand_drbg_enable_locking(drbg) == 0)",
          "1182:     tsan_store(&drbg->reseed_prop_counter, 1);",
          "1190:     (void)RAND_DRBG_instantiate(drbg,",
          "1191:                                 (const unsigned char *) ossl_pers_string,",
          "1192:                                 sizeof(ossl_pers_string) - 1);",
          "",
          "[Added Lines]",
          "784:     drbg = RAND_DRBG_new_ex(ctx, rand_drbg_type[drbg_type],",
          "785:                             rand_drbg_flags[drbg_type], parent);",
          "790:     if (parent == NULL && EVP_RAND_enable_locking(drbg->rand) == 0)",
          "799:     (void)RAND_DRBG_instantiate(drbg, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1228:     return ret;",
          "1229: }",
          "1268: static int drbg_add(const void *buf, int num, double randomness)",
          "1269: {",
          "1271:     RAND_DRBG *drbg = RAND_DRBG_get0_master();",
          "1276:         return 0;",
          "1337: }",
          "",
          "[Removed Lines]",
          "1236: size_t rand_drbg_seedlen(RAND_DRBG *drbg)",
          "1237: {",
          "1244:     size_t min_entropy = drbg->strength;",
          "1245:     size_t min_entropylen = drbg->min_entropylen;",
          "1251:     if (drbg->min_noncelen > 0 && drbg->get_nonce == NULL) {",
          "1252:         min_entropy += drbg->strength / 2;",
          "1253:         min_entropylen += drbg->min_noncelen;",
          "1254:     }",
          "1261:     min_entropy >>= 3;",
          "1264:     return min_entropy > min_entropylen ? min_entropy : min_entropylen;",
          "1265: }",
          "1270:     int ret = 0;",
          "1272:     size_t buflen;",
          "1273:     size_t seedlen;",
          "1275:     if (drbg == NULL)",
          "1278:     if (num < 0 || randomness < 0.0)",
          "1279:         return 0;",
          "1281:     rand_drbg_lock(drbg);",
          "1282:     seedlen = rand_drbg_seedlen(drbg);",
          "1284:     buflen = (size_t)num;",
          "1286: #ifdef FIPS_MODULE",
          "1295:     randomness = 0.0;",
          "1296: #endif",
          "1297:     if (buflen < seedlen || randomness < (double) seedlen) {",
          "1298: #if defined(OPENSSL_RAND_SEED_NONE)",
          "1306:         unsigned char dummy[1];",
          "1308:         ret = RAND_DRBG_generate(drbg, dummy, sizeof(dummy), 0, buf, buflen);",
          "1309:         rand_drbg_unlock(drbg);",
          "1310:         return ret;",
          "1311: #else",
          "1317:         randomness = 0.0;",
          "1318: #endif",
          "1319:     }",
          "1321:     if (randomness > (double)seedlen) {",
          "1330:         randomness = (double)seedlen;",
          "1331:     }",
          "1333:     ret = rand_drbg_restart(drbg, buf, buflen, (size_t)(8 * randomness));",
          "1334:     rand_drbg_unlock(drbg);",
          "1336:     return ret;",
          "",
          "[Added Lines]",
          "843:     if (drbg == NULL || num <= 0)",
          "846:     return EVP_RAND_reseed(drbg->rand, 0, NULL, 0, buf, num);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1351:     if (drbg == NULL)",
          "1352:         return 0;",
          "1357:     return ret;",
          "1358: }",
          "",
          "[Removed Lines]",
          "1354:     rand_drbg_lock(drbg);",
          "1355:     ret = drbg->state == DRBG_READY ? 1 : 0;",
          "1356:     rand_drbg_unlock(drbg);",
          "",
          "[Added Lines]",
          "864:     ret = EVP_RAND_state(drbg->rand) == EVP_RAND_STATE_READY ? 1 : 0;",
          "868: int RAND_DRBG_verify_zeroization(RAND_DRBG *drbg)",
          "869: {",
          "870:     return EVP_RAND_verify_zeroization(drbg->rand);",
          "871: }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1369:     if (dgbl == NULL)",
          "1370:         return NULL;",
          "1372:     return dgbl->master_drbg;",
          "1373: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:     if (dgbl->master_drbg == NULL) {",
          "886:         if (!CRYPTO_THREAD_write_lock(dgbl->lock))",
          "887:             return NULL;",
          "888:         if (dgbl->master_drbg == NULL)",
          "889:             dgbl->master_drbg = drbg_setup(ctx, NULL, RAND_DRBG_TYPE_MASTER);",
          "890:         CRYPTO_THREAD_unlock(dgbl->lock);",
          "891:     }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1384: RAND_DRBG *OPENSSL_CTX_get0_public_drbg(OPENSSL_CTX *ctx)",
          "1385: {",
          "1386:     DRBG_GLOBAL *dgbl = drbg_get_global(ctx);",
          "1389:     if (dgbl == NULL)",
          "1390:         return NULL;",
          "1392:     drbg = CRYPTO_THREAD_get_local(&dgbl->public_drbg);",
          "1393:     if (drbg == NULL) {",
          "1394:         ctx = openssl_ctx_get_concrete(ctx);",
          "",
          "[Removed Lines]",
          "1387:     RAND_DRBG *drbg;",
          "",
          "[Added Lines]",
          "907:     RAND_DRBG *drbg, *master;",
          "914:         master = OPENSSL_CTX_get0_master_drbg(ctx);",
          "915:         if (master == NULL)",
          "916:             return NULL;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1399:         if (CRYPTO_THREAD_get_local(&dgbl->private_drbg) == NULL",
          "1400:                 && !ossl_init_thread_start(NULL, ctx, drbg_delete_thread_state))",
          "1401:             return NULL;",
          "1403:         CRYPTO_THREAD_set_local(&dgbl->public_drbg, drbg);",
          "1404:     }",
          "1405:     return drbg;",
          "",
          "[Removed Lines]",
          "1402:         drbg = drbg_setup(ctx, dgbl->master_drbg, RAND_DRBG_TYPE_PUBLIC);",
          "",
          "[Added Lines]",
          "926:         drbg = drbg_setup(ctx, master, RAND_DRBG_TYPE_PUBLIC);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1417: RAND_DRBG *OPENSSL_CTX_get0_private_drbg(OPENSSL_CTX *ctx)",
          "1418: {",
          "1419:     DRBG_GLOBAL *dgbl = drbg_get_global(ctx);",
          "1422:     if (dgbl == NULL)",
          "1423:         return NULL;",
          "1425:     drbg = CRYPTO_THREAD_get_local(&dgbl->private_drbg);",
          "1426:     if (drbg == NULL) {",
          "1427:         ctx = openssl_ctx_get_concrete(ctx);",
          "",
          "[Removed Lines]",
          "1420:     RAND_DRBG *drbg;",
          "",
          "[Added Lines]",
          "944:     RAND_DRBG *drbg, *master;",
          "951:         master = OPENSSL_CTX_get0_master_drbg(ctx);",
          "952:         if (master == NULL)",
          "953:             return NULL;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1432:         if (CRYPTO_THREAD_get_local(&dgbl->public_drbg) == NULL",
          "1433:                 && !ossl_init_thread_start(NULL, ctx, drbg_delete_thread_state))",
          "1434:             return NULL;",
          "1436:         CRYPTO_THREAD_set_local(&dgbl->private_drbg, drbg);",
          "1437:     }",
          "1438:     return drbg;",
          "",
          "[Removed Lines]",
          "1435:         drbg = drbg_setup(ctx, dgbl->master_drbg, RAND_DRBG_TYPE_PRIVATE);",
          "",
          "[Added Lines]",
          "963:         drbg = drbg_setup(ctx, master, RAND_DRBG_TYPE_PRIVATE);",
          "",
          "---------------"
        ],
        "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c": [
          "File: crypto/rand/rand_lib.c -> crypto/rand/rand_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"e_os.h\"",
          "20: #ifndef FIPS_MODULE",
          "21: # ifndef OPENSSL_NO_ENGINE",
          "23: static ENGINE *funct_ref;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: # include \"prov/rand_pool.h\"",
          "22: # include \"prov/seeding.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: static CRYPTO_ONCE rand_init = CRYPTO_ONCE_STATIC_INIT;",
          "30: static int rand_inited = 0;",
          "243: DEFINE_RUN_ONCE_STATIC(do_rand_init)",
          "244: {",
          "245: # ifndef OPENSSL_NO_ENGINE",
          "",
          "[Removed Lines]",
          "33: #ifdef OPENSSL_RAND_SEED_RDTSC",
          "40: # error \"RDTSC enabled?  Should not be possible!\"",
          "51: size_t rand_acquire_entropy_from_tsc(RAND_POOL *pool)",
          "52: {",
          "53:     unsigned char c;",
          "54:     int i;",
          "56:     if ((OPENSSL_ia32cap_P[0] & (1 << 4)) != 0) {",
          "57:         for (i = 0; i < TSC_READ_COUNT; i++) {",
          "58:             c = (unsigned char)(OPENSSL_rdtsc() & 0xFF);",
          "59:             rand_pool_add(pool, &c, 1, 4);",
          "60:         }",
          "61:     }",
          "62:     return rand_pool_entropy_available(pool);",
          "63: }",
          "64: #endif",
          "66: #ifdef OPENSSL_RAND_SEED_RDCPU",
          "67: size_t OPENSSL_ia32_rdseed_bytes(unsigned char *buf, size_t len);",
          "68: size_t OPENSSL_ia32_rdrand_bytes(unsigned char *buf, size_t len);",
          "82: size_t rand_acquire_entropy_from_cpu(RAND_POOL *pool)",
          "83: {",
          "84:     size_t bytes_needed;",
          "85:     unsigned char *buffer;",
          "87:     bytes_needed = rand_pool_bytes_needed(pool, 1 /*entropy_factor*/);",
          "88:     if (bytes_needed > 0) {",
          "89:         buffer = rand_pool_add_begin(pool, bytes_needed);",
          "91:         if (buffer != NULL) {",
          "93:             if ((OPENSSL_ia32cap_P[2] & (1 << 18)) != 0) {",
          "94:                 if (OPENSSL_ia32_rdseed_bytes(buffer, bytes_needed)",
          "95:                     == bytes_needed) {",
          "96:                     rand_pool_add_end(pool, bytes_needed, 8 * bytes_needed);",
          "97:                 }",
          "98:             } else if ((OPENSSL_ia32cap_P[1] & (1 << (62 - 32))) != 0) {",
          "99:                 if (OPENSSL_ia32_rdrand_bytes(buffer, bytes_needed)",
          "100:                     == bytes_needed) {",
          "101:                     rand_pool_add_end(pool, bytes_needed, 8 * bytes_needed);",
          "102:                 }",
          "103:             } else {",
          "104:                 rand_pool_add_end(pool, 0, 0);",
          "105:             }",
          "106:         }",
          "107:     }",
          "109:     return rand_pool_entropy_available(pool);",
          "110: }",
          "111: #endif",
          "113: #if 0",
          "126: size_t rand_drbg_get_entropy(RAND_DRBG *drbg,",
          "127:                              unsigned char **pout,",
          "128:                              int entropy, size_t min_len, size_t max_len,",
          "129:                              int prediction_resistance)",
          "130: {",
          "131:     size_t ret = 0;",
          "132:     size_t entropy_available = 0;",
          "133:     RAND_POOL *pool;",
          "135:     if (drbg->parent != NULL && drbg->strength > drbg->parent->strength) {",
          "140:         RANDerr(RAND_F_RAND_DRBG_GET_ENTROPY, RAND_R_PARENT_STRENGTH_TOO_WEAK);",
          "141:         return 0;",
          "142:     }",
          "144:     if (drbg->seed_pool != NULL) {",
          "145:         pool = drbg->seed_pool;",
          "146:         pool->entropy_requested = entropy;",
          "147:     } else {",
          "148:         pool = rand_pool_new(entropy, drbg->secure, min_len, max_len);",
          "149:         if (pool == NULL)",
          "150:             return 0;",
          "151:     }",
          "153:     if (drbg->parent != NULL) {",
          "154:         size_t bytes_needed = rand_pool_bytes_needed(pool, 1 /*entropy_factor*/);",
          "155:         unsigned char *buffer = rand_pool_add_begin(pool, bytes_needed);",
          "157:         if (buffer != NULL) {",
          "158:             size_t bytes = 0;",
          "168:             rand_drbg_lock(drbg->parent);",
          "169:             if (RAND_DRBG_generate(drbg->parent,",
          "170:                                    buffer, bytes_needed,",
          "171:                                    prediction_resistance,",
          "172:                                    (unsigned char *)&drbg, sizeof(drbg)) != 0)",
          "173:                 bytes = bytes_needed;",
          "174:             drbg->reseed_next_counter",
          "175:                 = tsan_load(&drbg->parent->reseed_prop_counter);",
          "176:             rand_drbg_unlock(drbg->parent);",
          "178:             rand_pool_add_end(pool, bytes, 8 * bytes);",
          "179:             entropy_available = rand_pool_entropy_available(pool);",
          "180:         }",
          "182:     } else {",
          "184:         entropy_available = rand_pool_acquire_entropy(pool);",
          "185:     }",
          "187:     if (entropy_available > 0) {",
          "188:         ret   = rand_pool_length(pool);",
          "190:     }",
          "192:     if (drbg->seed_pool == NULL)",
          "193:         rand_pool_free(pool);",
          "194:     return ret;",
          "195: }",
          "201: void rand_drbg_cleanup_entropy(RAND_DRBG *drbg,",
          "202:                                unsigned char *out, size_t outlen)",
          "203: {",
          "204:     if (drbg->seed_pool == NULL) {",
          "205:         if (drbg->secure)",
          "206:             OPENSSL_secure_clear_free(out, outlen);",
          "207:         else",
          "208:             OPENSSL_clear_free(out, outlen);",
          "209:     }",
          "210: }",
          "222: size_t rand_drbg_get_additional_data(RAND_POOL *pool, unsigned char **pout)",
          "223: {",
          "224:     size_t ret = 0;",
          "226:     if (rand_pool_add_additional_data(pool) == 0)",
          "227:         goto err;",
          "229:     ret = rand_pool_length(pool);",
          "232:  err:",
          "233:     return ret;",
          "234: }",
          "236: void rand_drbg_cleanup_additional_data(RAND_POOL *pool, unsigned char *out)",
          "237: {",
          "238:     rand_pool_reattach(pool, out);",
          "239: }",
          "240: #endif",
          "242: #ifndef FIPS_MODULE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309: int RAND_poll(void)",
          "310: {",
          "313:     const RAND_METHOD *meth = RAND_get_rand_method();",
          "315:     if (meth == NULL)",
          "316:         return 0;",
          "335:         pool = rand_pool_new(RAND_DRBG_STRENGTH, 1,",
          "336:                              (RAND_DRBG_STRENGTH + 7) / 8,",
          "337:                              RAND_POOL_MAX_LENGTH);",
          "338:         if (pool == NULL)",
          "339:             return 0;",
          "342:             goto err;",
          "344:         if (meth->add == NULL",
          "345:             || meth->add(rand_pool_buffer(pool),",
          "346:                          rand_pool_length(pool),",
          "",
          "[Removed Lines]",
          "311:     int ret = 0;",
          "318:     if (meth == RAND_OpenSSL()) {",
          "320:         RAND_DRBG *drbg = RAND_DRBG_get0_master();",
          "322:         if (drbg == NULL)",
          "323:             return 0;",
          "325: #if 0",
          "326:         ret = rand_drbg_restart(drbg, NULL, 0, 0);",
          "327: #endif",
          "329:         return ret;",
          "331:     } else {",
          "332:         RAND_POOL *pool = NULL;",
          "340: #if 0",
          "341:         if (rand_pool_acquire_entropy(pool) == 0)",
          "343: #endif",
          "",
          "[Added Lines]",
          "104:     int ret = meth == RAND_OpenSSL();",
          "105:     RAND_POOL *pool;",
          "110:     if (!ret) {",
          "118:         if (prov_pool_acquire_entropy(pool) == 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "370:     CRYPTO_THREAD_unlock(rand_meth_lock);",
          "371:     return 1;",
          "372: }",
          "375: const RAND_METHOD *RAND_get_rand_method(void)",
          "376: {",
          "380:     const RAND_METHOD *tmp_meth = NULL;",
          "382:     if (!RUN_ONCE(&rand_init, do_rand_init))",
          "",
          "[Removed Lines]",
          "377: #ifdef FIPS_MODULE",
          "378:     return NULL;",
          "379: #else",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "403:     tmp_meth = default_RAND_meth;",
          "404:     CRYPTO_THREAD_unlock(rand_meth_lock);",
          "405:     return tmp_meth;",
          "407: }",
          "410: int RAND_set_rand_engine(ENGINE *engine)",
          "411: {",
          "412:     const RAND_METHOD *tmp_meth = NULL;",
          "",
          "[Removed Lines]",
          "406: #endif",
          "409: #if !defined(OPENSSL_NO_ENGINE) && !defined(FIPS_MODULE)",
          "",
          "[Added Lines]",
          "179: # if !defined(OPENSSL_NO_ENGINE)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "430:     CRYPTO_THREAD_unlock(rand_engine_lock);",
          "431:     return 1;",
          "432: }",
          "435: void RAND_seed(const void *buf, int num)",
          "436: {",
          "",
          "[Removed Lines]",
          "433: #endif",
          "",
          "[Added Lines]",
          "203: # endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "448:         meth->add(buf, num, randomness);",
          "449: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: # if !defined(OPENSSL_NO_DEPRECATED_1_1_0)",
          "222: int RAND_pseudo_bytes(unsigned char *buf, int num)",
          "223: {",
          "224:     const RAND_METHOD *meth = RAND_get_rand_method();",
          "226:     if (meth != NULL && meth->pseudorand != NULL)",
          "227:         return meth->pseudorand(buf, num);",
          "228:     RANDerr(RAND_F_RAND_PSEUDO_BYTES, RAND_R_FUNC_NOT_IMPLEMENTED);",
          "229:     return -1;",
          "230: }",
          "231: # endif",
          "233: int RAND_status(void)",
          "234: {",
          "235:     RAND_DRBG *drbg;",
          "236:     const RAND_METHOD *meth = RAND_get_rand_method();",
          "238:     if (meth != NULL && meth != RAND_OpenSSL())",
          "239:         return meth->status != NULL ? meth->status() : 0;",
          "241:     if ((drbg = RAND_DRBG_get0_master()) == NULL || drbg->rand == NULL)",
          "242:         return EVP_RAND_STATE_UNINITIALISED;",
          "243:     return EVP_RAND_state(drbg->rand) == EVP_RAND_STATE_READY;",
          "244: }",
          "247: const RAND_METHOD *RAND_get_rand_method(void)",
          "248: {",
          "249:     return NULL;",
          "250: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "500: {",
          "501:     return RAND_bytes_ex(NULL, buf, num);",
          "502: }",
          "",
          "[Removed Lines]",
          "504: #if !defined(OPENSSL_NO_DEPRECATED_1_1_0) && !defined(FIPS_MODULE)",
          "505: int RAND_pseudo_bytes(unsigned char *buf, int num)",
          "506: {",
          "507:     const RAND_METHOD *meth = RAND_get_rand_method();",
          "509:     if (meth != NULL && meth->pseudorand != NULL)",
          "510:         return meth->pseudorand(buf, num);",
          "511:     RANDerr(RAND_F_RAND_PSEUDO_BYTES, RAND_R_FUNC_NOT_IMPLEMENTED);",
          "512:     return -1;",
          "513: }",
          "514: #endif",
          "516: int RAND_status(void)",
          "517: {",
          "518:     const RAND_METHOD *meth = RAND_get_rand_method();",
          "520:     if (meth != NULL && meth->status != NULL)",
          "521:         return meth->status();",
          "522:     return 0;",
          "523: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/rand/rand_local.h||crypto/rand/rand_local.h": [
          "File: crypto/rand/rand_local.h -> crypto/rand/rand_local.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: # include <openssl/rand_drbg.h>",
          "19: # include \"internal/tsan_assist.h\"",
          "20: # include \"crypto/rand.h\"",
          "23: # include \"internal/numbers.h\"",
          "",
          "[Removed Lines]",
          "21: # include \"crypto/rand_pool.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: # define SLAVE_RESEED_INTERVAL                   (1 << 16)",
          "89: struct rand_drbg_st {",
          "90:     CRYPTO_RWLOCK *lock;",
          "92:     OPENSSL_CTX *libctx;",
          "93:     RAND_DRBG *parent;",
          "",
          "[Removed Lines]",
          "43: #define CRNGT_BUFSIZ    16",
          "52: # define DRBG_MAX_LENGTH                         INT32_MAX",
          "55: typedef enum drbg_status_e {",
          "56:     DRBG_UNINITIALISED,",
          "57:     DRBG_READY,",
          "58:     DRBG_ERROR",
          "59: } DRBG_STATUS;",
          "62: typedef int (*RAND_DRBG_instantiate_fn)(RAND_DRBG *ctx,",
          "63:                                         const unsigned char *ent,",
          "64:                                         size_t entlen,",
          "65:                                         const unsigned char *nonce,",
          "66:                                         size_t noncelen,",
          "67:                                         const unsigned char *pers,",
          "68:                                         size_t perslen);",
          "70: typedef int (*RAND_DRBG_reseed_fn)(RAND_DRBG *ctx,",
          "71:                                    const unsigned char *ent,",
          "72:                                    size_t entlen,",
          "73:                                    const unsigned char *adin,",
          "74:                                    size_t adinlen);",
          "76: typedef int (*RAND_DRBG_generate_fn)(RAND_DRBG *ctx,",
          "77:                                      unsigned char *out,",
          "78:                                      size_t outlen,",
          "79:                                      const unsigned char *adin,",
          "80:                                      size_t adinlen);",
          "82: typedef int (*RAND_DRBG_uninstantiate_fn)(RAND_DRBG *ctx);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: extern RAND_METHOD rand_meth;",
          "132: #endif",
          "",
          "[Removed Lines]",
          "117: int rand_drbg_restart(RAND_DRBG *drbg,",
          "118:                       const unsigned char *buffer, size_t len, size_t entropy);",
          "119: size_t rand_drbg_seedlen(RAND_DRBG *drbg);",
          "125: int rand_crngt_get_entropy_cb(OPENSSL_CTX *ctx, RAND_POOL *pool,",
          "126:                               unsigned char *buf, unsigned char *md,",
          "127:                               unsigned int *md_size);",
          "128: extern int (*crngt_get_entropy)(OPENSSL_CTX *ctx, RAND_POOL *pool,",
          "129:                                 unsigned char *buf, unsigned char *md,",
          "130:                                 unsigned int *md_size);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/openssl/core_names.h||include/openssl/core_names.h": [
          "File: include/openssl/core_names.h -> include/openssl/core_names.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: #define OSSL_KDF_NAME_KBKDF         \"KBKDF\"",
          "181: #define OSSL_KDF_NAME_KRB5KDF       \"KRB5KDF\"",
          "185: #define OSSL_RAND_PARAM_STRENGTH                \"strength\"",
          "200: #define OSSL_RAND_PARAM_TEST_ENTROPY            \"test_entropy\"",
          "201: #define OSSL_RAND_PARAM_TEST_NONCE              \"test_nonce\"",
          "",
          "[Removed Lines]",
          "184: #define OSSL_RAND_PARAM_STATUS                  \"status\"",
          "186: #define OSSL_RAND_PARAM_RESEED_REQUESTS         \"reseed_requests\"",
          "187: #define OSSL_RAND_PARAM_RESEED_TIME_INTERVAL    \"reseed_time_interval\"",
          "188: #define OSSL_RAND_PARAM_MAX_REQUEST             \"max_request\"",
          "189: #define OSSL_RAND_PARAM_MIN_ENTROPYLEN          \"min_entropylen\"",
          "190: #define OSSL_RAND_PARAM_MAX_ENTROPYLEN          \"max_entropylen\"",
          "191: #define OSSL_RAND_PARAM_MIN_NONCELEN            \"min_noncelen\"",
          "192: #define OSSL_RAND_PARAM_MAX_NONCELEN            \"max_noncelen\"",
          "193: #define OSSL_RAND_PARAM_MAX_PERSLEN             \"max_perslen\"",
          "194: #define OSSL_RAND_PARAM_MAX_ADINLEN             \"max_adinlen\"",
          "195: #define OSSL_RAND_PARAM_RESEED_CTR              \"reseed_counter\"",
          "196: #define OSSL_RAND_PARAM_RESEED_PROP_CTR         \"reseed_prop_counter\"",
          "197: #define OSSL_RAND_PARAM_PROPERTIES              OSSL_ALG_PARAM_PROPERTIES",
          "198: #define OSSL_RAND_PARAM_DIGEST                  OSSL_ALG_PARAM_DIGEST",
          "199: #define OSSL_RAND_PARAM_CIPHER                  OSSL_ALG_PARAM_CIPHER",
          "",
          "[Added Lines]",
          "184: #define OSSL_RAND_PARAM_STATE                   \"state\"",
          "190: #define OSSL_DRBG_PARAM_RESEED_REQUESTS         \"reseed_requests\"",
          "191: #define OSSL_DRBG_PARAM_RESEED_TIME_INTERVAL    \"reseed_time_interval\"",
          "192: #define OSSL_DRBG_PARAM_MAX_REQUEST             \"max_request\"",
          "193: #define OSSL_DRBG_PARAM_MIN_ENTROPYLEN          \"min_entropylen\"",
          "194: #define OSSL_DRBG_PARAM_MAX_ENTROPYLEN          \"max_entropylen\"",
          "195: #define OSSL_DRBG_PARAM_MIN_NONCELEN            \"min_noncelen\"",
          "196: #define OSSL_DRBG_PARAM_MAX_NONCELEN            \"max_noncelen\"",
          "197: #define OSSL_DRBG_PARAM_MAX_PERSLEN             \"max_perslen\"",
          "198: #define OSSL_DRBG_PARAM_MAX_ADINLEN             \"max_adinlen\"",
          "199: #define OSSL_DRBG_PARAM_RESEED_CTR              \"reseed_counter\"",
          "200: #define OSSL_DRBG_PARAM_RESEED_TIME             \"reseed_time\"",
          "201: #define OSSL_DRBG_PARAM_PROPERTIES              OSSL_ALG_PARAM_PROPERTIES",
          "202: #define OSSL_DRBG_PARAM_DIGEST                  OSSL_ALG_PARAM_DIGEST",
          "203: #define OSSL_DRBG_PARAM_CIPHER                  OSSL_ALG_PARAM_CIPHER",
          "204: #define OSSL_DRBG_PARAM_MAC                     OSSL_ALG_PARAM_MAC",
          "205: #define OSSL_DRBG_PARAM_USE_DF                  \"use_derivation_function\"",
          "208: #define OSSL_DRBG_PARAM_ENTROPY_REQUIRED        \"entropy_required\"",
          "209: #define OSSL_DRBG_PARAM_PREDICTION_RESISTANCE   \"prediction_resistance\"",
          "210: #define OSSL_DRBG_PARAM_MIN_LENGTH              \"minium_length\"",
          "211: #define OSSL_DRBG_PARAM_MAX_LENGTH              \"maxium_length\"",
          "212: #define OSSL_DRBG_PARAM_RANDOM_DATA             \"random_data\"",
          "213: #define OSSL_DRBG_PARAM_SIZE                    \"size\"",
          "",
          "---------------"
        ],
        "include/openssl/core_numbers.h||include/openssl/core_numbers.h": [
          "File: include/openssl/core_numbers.h -> include/openssl/core_numbers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "362: # define OSSL_FUNC_RAND_VERIFY_ZEROIZATION           18",
          "364: OSSL_CORE_MAKE_FUNC(void *, OP_rand_newctx,",
          "366:                     const OSSL_DISPATCH *parent_calls))",
          "367: OSSL_CORE_MAKE_FUNC(void, OP_rand_freectx, (void *vctx))",
          "368: OSSL_CORE_MAKE_FUNC(int, OP_rand_instantiate,",
          "",
          "[Removed Lines]",
          "365:                     (void *provctx, int secure, void *parent,",
          "",
          "[Added Lines]",
          "365:                     (void *provctx, void *parent,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:                      const unsigned char *ent, size_t ent_len,",
          "380:                      const unsigned char *addin, size_t addin_len))",
          "381: OSSL_CORE_MAKE_FUNC(size_t, OP_rand_nonce,",
          "383:                      size_t min_noncelen, size_t max_noncelen))",
          "388: OSSL_CORE_MAKE_FUNC(int, OP_rand_enable_locking, (void *vctx))",
          "389: OSSL_CORE_MAKE_FUNC(int, OP_rand_lock, (void *vctx))",
          "390: OSSL_CORE_MAKE_FUNC(void, OP_rand_unlock, (void *vctx))",
          "",
          "[Removed Lines]",
          "382:                     (void *vctx, unsigned char *out, int strength,",
          "384: OSSL_CORE_MAKE_FUNC(int, OP_rand_set_callbacks,",
          "385:                     (void *vctx,",
          "386:                      OSSL_CALLBACK *get_entropy, OSSL_CALLBACK *cleanup_entropy,",
          "387:                      OSSL_CALLBACK *get_nonce, OSSL_CALLBACK *cleanup_nonce))",
          "",
          "[Added Lines]",
          "382:                     (void *vctx, unsigned char *out, unsigned int strength,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "396:                     (void *vctx, OSSL_PARAM params[]))",
          "397: OSSL_CORE_MAKE_FUNC(int, OP_rand_set_ctx_params,",
          "398:                     (void *vctx, const OSSL_PARAM params[]))",
          "399: OSSL_CORE_MAKE_FUNC(int, OP_rand_verify_zeroization,",
          "400:                     (void *vctx))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395: OSSL_CORE_MAKE_FUNC(void, OP_rand_set_callbacks,",
          "396:                     (void *vctx, OSSL_INOUT_CALLBACK *get_entropy,",
          "397:                      OSSL_CALLBACK *cleanup_entropy,",
          "398:                      OSSL_INOUT_CALLBACK *get_nonce,",
          "399:                      OSSL_CALLBACK *cleanup_nonce, void *arg))",
          "",
          "---------------"
        ],
        "include/openssl/evp.h||include/openssl/evp.h": [
          "File: include/openssl/evp.h -> include/openssl/evp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1082: const OSSL_PROVIDER *EVP_RAND_provider(const EVP_RAND *rand);",
          "1083: int EVP_RAND_get_params(EVP_RAND *rand, OSSL_PARAM params[]);",
          "1087: void EVP_RAND_CTX_free(EVP_RAND_CTX *ctx);",
          "1088: EVP_RAND *EVP_RAND_CTX_rand(EVP_RAND_CTX *ctx);",
          "1091: const OSSL_PARAM *EVP_RAND_gettable_params(const EVP_RAND *rand);",
          "1092: const OSSL_PARAM *EVP_RAND_gettable_ctx_params(const EVP_RAND *rand);",
          "1093: const OSSL_PARAM *EVP_RAND_settable_ctx_params(const EVP_RAND *rand);",
          "",
          "[Removed Lines]",
          "1085: EVP_RAND_CTX *EVP_RAND_CTX_new(EVP_RAND *rand, int secure,",
          "1086:                                EVP_RAND_CTX *parent);",
          "1089: int EVP_RAND_CTX_get_params(EVP_RAND_CTX *ctx, OSSL_PARAM params[]);",
          "1090: int EVP_RAND_CTX_set_params(EVP_RAND_CTX *ctx, const OSSL_PARAM params[]);",
          "",
          "[Added Lines]",
          "1085: EVP_RAND_CTX *EVP_RAND_CTX_new(EVP_RAND *rand, EVP_RAND_CTX *parent);",
          "1088: int EVP_RAND_get_ctx_params(EVP_RAND_CTX *ctx, OSSL_PARAM params[]);",
          "1089: int EVP_RAND_set_ctx_params(EVP_RAND_CTX *ctx, const OSSL_PARAM params[]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1099:                            void (*fn)(const char *name, void *data),",
          "1100:                            void *data);",
          "1103:                              int prediction_resistance,",
          "1123: #define EVP_RAND_STATE_UNINITIALISED    0",
          "1124: #define EVP_RAND_STATE_READY            1",
          "",
          "[Removed Lines]",
          "1102: int EVP_RAND_CTX_instantiate(EVP_RAND_CTX *ctx, unsigned int strength,",
          "1104:                              const unsigned char *pstr, size_t pstr_len);",
          "1105: int EVP_RAND_CTX_uninstantiate(EVP_RAND_CTX *ctx);",
          "1106: int EVP_RAND_CTX_generate(EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen,",
          "1107:                           unsigned int strength, int prediction_resistance,",
          "1108:                           const unsigned char *addin, size_t addin_len);",
          "1109: int EVP_RAND_CTX_reseed(EVP_RAND_CTX *ctx, int prediction_resistance,",
          "1110:                         const unsigned char *ent, size_t ent_len,",
          "1111:                         const unsigned char *addin, size_t addin_len);",
          "1112: int EVP_RAND_CTX_nonce(EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen);",
          "1113: int EVP_RAND_CTX_set_callbacks(const EVP_RAND_CTX *rand,",
          "1114:                                OSSL_CALLBACK *get_entropy,",
          "1115:                                OSSL_CALLBACK *cleanup_entropy,",
          "1116:                                OSSL_CALLBACK *get_nonce,",
          "1117:                                OSSL_CALLBACK *cleanup_nonce);",
          "1118: int EVP_RAND_CTX_enable_locking(EVP_RAND_CTX *ctx);",
          "1119: int EVP_RAND_CTX_verify_zeroization(EVP_RAND_CTX *ctx);",
          "1120: unsigned int EVP_RAND_CTX_strength(EVP_RAND_CTX *ctx);",
          "1121: int EVP_RAND_CTX_state(EVP_RAND_CTX *ctx);",
          "",
          "[Added Lines]",
          "1101: __owur int EVP_RAND_instantiate(EVP_RAND_CTX *ctx, unsigned int strength,",
          "1102:                                 int prediction_resistance,",
          "1103:                                 const unsigned char *pstr, size_t pstr_len);",
          "1104: int EVP_RAND_uninstantiate(EVP_RAND_CTX *ctx);",
          "1105: __owur int EVP_RAND_generate(EVP_RAND_CTX *ctx, unsigned char *out,",
          "1106:                              size_t outlen, unsigned int strength,",
          "1108:                              const unsigned char *addin, size_t addin_len);",
          "1109: int EVP_RAND_reseed(EVP_RAND_CTX *ctx, int prediction_resistance,",
          "1110:                     const unsigned char *ent, size_t ent_len,",
          "1111:                     const unsigned char *addin, size_t addin_len);",
          "1112: __owur int EVP_RAND_nonce(EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen);",
          "1113: __owur int EVP_RAND_enable_locking(EVP_RAND_CTX *ctx);",
          "1114: int EVP_RAND_set_callbacks(EVP_RAND_CTX *ctx,",
          "1115:                            OSSL_INOUT_CALLBACK *get_entropy,",
          "1116:                            OSSL_CALLBACK *cleanup_entropy,",
          "1117:                            OSSL_INOUT_CALLBACK *get_nonce,",
          "1118:                            OSSL_CALLBACK *cleanup_nonce, void *arg);",
          "1119: int EVP_RAND_verify_zeroization(EVP_RAND_CTX *ctx);",
          "1120: unsigned int EVP_RAND_strength(EVP_RAND_CTX *ctx);",
          "1121: int EVP_RAND_state(EVP_RAND_CTX *ctx);",
          "",
          "---------------"
        ],
        "include/openssl/rand.h||include/openssl/rand.h": [
          "File: include/openssl/rand.h -> include/openssl/rand.h"
        ],
        "include/openssl/rand_drbg.h||include/openssl/rand_drbg.h": [
          "File: include/openssl/rand_drbg.h -> include/openssl/rand_drbg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: RAND_DRBG *RAND_DRBG_new_ex(OPENSSL_CTX *ctx, int type, unsigned int flags,",
          "82:                             RAND_DRBG *parent);",
          "85: RAND_DRBG *RAND_DRBG_new(int type, unsigned int flags, RAND_DRBG *parent);",
          "88: int RAND_DRBG_set_defaults(int type, unsigned int flags);",
          "89: int RAND_DRBG_instantiate(RAND_DRBG *drbg,",
          "90:                           const unsigned char *pers, size_t perslen);",
          "",
          "[Removed Lines]",
          "83: RAND_DRBG *RAND_DRBG_secure_new_ex(OPENSSL_CTX *ctx, int type,",
          "84:                                    unsigned int flags, RAND_DRBG *parent);",
          "86: RAND_DRBG *RAND_DRBG_secure_new(int type, unsigned int flags, RAND_DRBG *parent);",
          "87: int RAND_DRBG_set(RAND_DRBG *drbg, int type, unsigned int flags);",
          "",
          "[Added Lines]",
          "84: DEPRECATEDIN_3_0(int RAND_DRBG_set(RAND_DRBG *drbg, int type,",
          "85:                                    unsigned int flags))",
          "",
          "---------------"
        ],
        "providers/defltprov.c||providers/defltprov.c": [
          "File: providers/defltprov.c -> providers/defltprov.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: };",
          "340: static const OSSL_ALGORITHM deflt_rands[] = {",
          "342:     { \"HASH-DRBG\", \"provider=default\", drbg_hash_functions },",
          "344:     { \"HMAC-DRBG\", \"provider=default\", drbg_hmac_functions },",
          "348:     { NULL, NULL, NULL }",
          "349: };",
          "",
          "[Removed Lines]",
          "341:     { \"TEST-RAND\", \"provider=default\", test_rng_functions },",
          "345:     { \"CTR-DRBG\", \"provider=default\", drbg_ctr_functions },",
          "347:     { \"CRNGT:continuous-rng-test\", \"provider=default\", crngt_functions },",
          "",
          "[Added Lines]",
          "341:     { \"CTR-DRBG\", \"provider=default\", drbg_ctr_functions },",
          "344:     { \"TEST-RAND\", \"provider=default\", test_rng_functions },",
          "",
          "---------------"
        ],
        "providers/fips/fipsprov.c||providers/fips/fipsprov.c": [
          "File: providers/fips/fipsprov.c -> providers/fips/fipsprov.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470: };",
          "472: static const OSSL_ALGORITHM fips_rands[] = {",
          "478:     { \"HASH-DRBG\", \"provider=fips\", drbg_hash_functions },",
          "480:     { \"HMAC-DRBG\", \"provider=fips\", drbg_hmac_functions },",
          "484:     { NULL, NULL, NULL }",
          "485: };",
          "",
          "[Removed Lines]",
          "477:     { \"TEST-RAND\", \"provider=fips\", test_rng_functions },",
          "481:     { \"CTR-DRBG\", \"provider=fips\", drbg_ctr_functions },",
          "483:     { \"CRNGT:continuous-rng-test\", \"provider=fips\", crngt_functions },",
          "",
          "[Added Lines]",
          "473:     { \"CTR-DRBG\", \"provider=fips\", drbg_ctr_functions },",
          "476:     { \"TEST-RAND\", \"provider=fips\", test_rng_functions },",
          "",
          "---------------"
        ],
        "providers/implementations/rands/build.info||providers/implementations/rands/build.info": [
          "File: providers/implementations/rands/build.info -> providers/implementations/rands/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: SUBDIRS=seeding",
          "",
          "[Removed Lines]",
          "3: # Missing: drbg_ctr.c",
          "4: SOURCE[../../libfips.a]=drbg.c",
          "5: SOURCE[../../libnonfips.a]=drbg.c",
          "7: # Missing: drbg_hmac.c",
          "8: SOURCE[../../libimplementations.a]=test_rng.c drbg_hash.c crngt.c",
          "",
          "[Added Lines]",
          "3: $COMMON=drbg.c test_rng.c drbg_ctr.c drbg_hash.c drbg_hmac.c crngt.c rand_pool.c",
          "5: SOURCE[../../libfips.a]=$COMMON",
          "6: SOURCE[../../libnonfips.a]=$COMMON",
          "",
          "---------------"
        ],
        "providers/implementations/rands/crngt.c||providers/implementations/rands/crngt.c": [
          "File: providers/implementations/rands/crngt.c -> providers/implementations/rands/crngt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"internal/cryptlib.h\"",
          "22: #include \"prov/rand_pool.h\"",
          "23: #include \"drbg_local.h\"",
          "26: typedef struct crng_test_global_st {",
          "27:     unsigned char crngt_prev[EVP_MAX_MD_SIZE];",
          "",
          "[Removed Lines]",
          "24: #include \"seeding/seeding.h\"",
          "",
          "[Added Lines]",
          "24: #include \"prov/seeding.h\"",
          "",
          "---------------"
        ],
        "providers/implementations/rands/drbg.c||providers/implementations/rands/drbg.c": [
          "File: providers/implementations/rands/drbg.c -> providers/implementations/rands/drbg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <openssl/crypto.h>",
          "12: #include <openssl/err.h>",
          "13: #include <openssl/rand.h>",
          "14: #include \"crypto/rand.h\"",
          "15: #include \"drbg_local.h\"",
          "16: #include \"internal/thread_once.h\"",
          "17: #include \"crypto/cryptlib.h\"",
          "",
          "[Removed Lines]",
          "18: #include \"seeding/seeding.h\"",
          "19: #include \"crypto/rand_pool.h\"",
          "",
          "[Added Lines]",
          "14: #include <openssl/evp.h>",
          "19: #include \"prov/seeding.h\"",
          "20: #include \"prov/rand_pool.h\"",
          "21: #include \"prov/provider_ctx.h\"",
          "22: #include \"prov/providercommonerr.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: static const char ossl_pers_string[] = DRBG_DEFAULT_PERS_STRING;",
          "51: static const OSSL_DISPATCH *find_call(const OSSL_DISPATCH *dispatch,",
          "52:                                       int function);",
          "54: int drbg_lock(void *vctx)",
          "55: {",
          "56:     PROV_DRBG *drbg = vctx;",
          "",
          "[Removed Lines]",
          "34: #ifdef FIPS_MODULE",
          "35: # define get_entropy        prov_crngt_get_entropy",
          "36: # define cleanup_entropy    prov_crngt_cleanup_entropy",
          "37: #else",
          "38: # define get_entropy        prov_drbg_get_entropy",
          "39: # define cleanup_entropy    prov_drbg_cleanup_entropy",
          "40: #endif",
          "45: static unsigned int master_reseed_interval = MASTER_RESEED_INTERVAL;",
          "46: static unsigned int slave_reseed_interval  = SLAVE_RESEED_INTERVAL;",
          "48: static time_t master_reseed_time_interval = MASTER_RESEED_TIME_INTERVAL;",
          "49: static time_t slave_reseed_time_interval  = SLAVE_RESEED_TIME_INTERVAL;",
          "",
          "[Added Lines]",
          "43: static int rand_drbg_restart(PROV_DRBG *drbg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71: static int drbg_lock_parent(PROV_DRBG *drbg)",
          "72: {",
          "73:     void *parent = drbg->parent;",
          "82:     }",
          "83:     return 1;",
          "84: }",
          "",
          "[Removed Lines]",
          "74:     const OSSL_DISPATCH *pfunc;",
          "76:     if (parent != NULL) {",
          "77:         pfunc = find_call(drbg->parent_dispatch, OSSL_FUNC_RAND_LOCK);",
          "78:         if (pfunc != NULL && !OSSL_get_OP_rand_lock(pfunc)(parent)) {",
          "79:             ERR_raise(ERR_LIB_PROV, RAND_R_PARENT_LOCKING_NOT_ENABLED);",
          "80:             return 0;",
          "81:         }",
          "",
          "[Added Lines]",
          "66:     if (parent != NULL",
          "67:             && drbg->parent_lock != NULL",
          "68:             && !drbg->parent_lock(parent)) {",
          "69:         ERR_raise(ERR_LIB_PROV, PROV_R_PARENT_LOCKING_NOT_ENABLED);",
          "70:         return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86: static void drbg_unlock_parent(PROV_DRBG *drbg)",
          "87: {",
          "88:     void *parent = drbg->parent;",
          "96: }",
          "99: {",
          "100:     OSSL_PARAM params[2] = { OSSL_PARAM_END, OSSL_PARAM_END };",
          "102:     void *parent = drbg->parent;",
          "107:         return 0;",
          "108:     }",
          "110:     if (!drbg_lock_parent(drbg)) {",
          "112:         return 0;",
          "113:     }",
          "117:         return 0;",
          "118:     }",
          "120:     return 1;",
          "121: }",
          "123: static unsigned int get_parent_reseed_count(PROV_DRBG *drbg)",
          "124: {",
          "125:     OSSL_PARAM params[2] = { OSSL_PARAM_END, OSSL_PARAM_END };",
          "127:     void *parent = drbg->parent;",
          "128:     unsigned int r;",
          "137:     if (!drbg_lock_parent(drbg)) {",
          "139:         goto err;",
          "140:     }",
          "142:         drbg_unlock_parent(drbg);",
          "144:         goto err;",
          "145:     }",
          "146:     drbg_unlock_parent(drbg);",
          "147:     return r;",
          "149:  err:",
          "151:     if (r == 0)",
          "152:         r = UINT_MAX;",
          "153:     return r;",
          "154: }",
          "",
          "[Removed Lines]",
          "89:     const OSSL_DISPATCH *pfunc;",
          "91:     if (parent != NULL) {",
          "92:         pfunc = find_call(drbg->parent_dispatch, OSSL_FUNC_RAND_UNLOCK);",
          "93:         if (pfunc != NULL)",
          "94:             OSSL_get_OP_rand_unlock(pfunc)(parent);",
          "95:     }",
          "98: static int get_parent_strength(PROV_DRBG *drbg, int *str)",
          "101:     const OSSL_DISPATCH *pfunc;",
          "104:     pfunc = find_call(drbg->parent_dispatch, OSSL_FUNC_RAND_GET_CTX_PARAMS);",
          "105:     if (pfunc == NULL) {",
          "106:         ERR_raise(ERR_LIB_PROV, RAND_R_UNABLE_TO_GET_PARENT_STRENGTH);",
          "111:         ERR_raise(ERR_LIB_PROV, RAND_R_UNABLE_TO_LOCK_PARENT);",
          "114:     if (!OSSL_get_OP_rand_get_ctx_params(pfunc)(parent, params)) {",
          "115:         drbg_unlock_parent(drbg);",
          "116:         ERR_raise(ERR_LIB_PROV, RAND_R_UNABLE_TO_GET_PARENT_STRENGTH);",
          "119:     drbg_unlock_parent(drbg);",
          "126:     const OSSL_DISPATCH *pfunc;",
          "130:     pfunc = find_call(drbg->parent_dispatch, OSSL_FUNC_RAND_GET_CTX_PARAMS);",
          "131:     if (pfunc == NULL) {",
          "132:         ERR_raise(ERR_LIB_PROV,",
          "133:                   RAND_R_UNABLE_TO_GET_PARENT_RESEED_PROP_COUNTER);",
          "134:         goto err;",
          "135:     }",
          "138:         ERR_raise(ERR_LIB_PROV, RAND_R_UNABLE_TO_LOCK_PARENT);",
          "141:     if (!OSSL_get_OP_rand_get_ctx_params(pfunc)(parent, params)) {",
          "143:         ERR_raise(ERR_LIB_PROV, RAND_R_UNABLE_TO_GET_RESEED_PROP_CTR);",
          "150:     r = tsan_load(&drbg->reseed_prop_counter) - 2;",
          "156: #ifndef FIPS_MODULE",
          "",
          "[Added Lines]",
          "79:     if (parent != NULL && drbg->parent_unlock != NULL)",
          "80:         drbg->parent_unlock(parent);",
          "83: static int get_parent_strength(PROV_DRBG *drbg, unsigned int *str)",
          "87:     int res;",
          "89:     if (drbg->parent_get_ctx_params == NULL) {",
          "90:         ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_GET_PARENT_STRENGTH);",
          "96:         ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_LOCK_PARENT);",
          "99:     res = drbg->parent_get_ctx_params(parent, params);",
          "100:     drbg_unlock_parent(drbg);",
          "101:     if (!res) {",
          "102:         ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_GET_PARENT_STRENGTH);",
          "116:         ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_LOCK_PARENT);",
          "119:     if (!drbg->parent_get_ctx_params(parent, params)) {",
          "121:         ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_GET_RESEED_PROP_CTR);",
          "128:     r = tsan_load(&drbg->reseed_counter) - 2;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169: static size_t prov_drbg_get_entropy(PROV_DRBG *drbg, unsigned char **pout,",
          "172: {",
          "173:     size_t ret = 0;",
          "174:     size_t entropy_available = 0;",
          "175:     RAND_POOL *pool;",
          "179:     if (drbg->parent != NULL) {",
          "180:         if (!get_parent_strength(drbg, &p_str))",
          "",
          "[Removed Lines]",
          "170:                                     int entropy, size_t min_len, size_t max_len,",
          "171:                                     int prediction_resistance)",
          "176:     int p_str;",
          "177:     const OSSL_DISPATCH *pfunc;",
          "",
          "[Added Lines]",
          "147:                                     int entropy, size_t min_len,",
          "148:                                     size_t max_len, int prediction_resistance)",
          "153:     unsigned int p_str;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "188:             return 0;",
          "189:         }",
          "190:     }",
          "",
          "[Removed Lines]",
          "187:             RANDerr(0, RAND_R_PARENT_STRENGTH_TOO_WEAK);",
          "",
          "[Added Lines]",
          "163:             RANDerr(0, PROV_R_PARENT_STRENGTH_TOO_WEAK);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "193:         pool = drbg->seed_pool;",
          "194:         pool->entropy_requested = entropy;",
          "195:     } else {",
          "198:             return 0;",
          "199:     }",
          "201:     if (drbg->parent != NULL) {",
          "",
          "[Removed Lines]",
          "196:         pool = rand_pool_new(entropy, drbg->secure, min_len, max_len);",
          "197:         if (pool == NULL)",
          "",
          "[Added Lines]",
          "172:         pool = rand_pool_new(entropy, 1, min_len, max_len);",
          "173:         if (pool == NULL) {",
          "174:             ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE);",
          "176:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "219:             drbg_lock_parent(drbg);",
          "225:                 bytes = bytes_needed;",
          "227:             drbg_unlock_parent(drbg);",
          "229:             rand_pool_add_end(pool, bytes, 8 * bytes);",
          "230:             entropy_available = rand_pool_entropy_available(pool);",
          "231:         }",
          "232:     } else {",
          "235:     }",
          "237:     if (entropy_available > 0) {",
          "",
          "[Removed Lines]",
          "216:             pfunc = find_call(drbg->parent_dispatch, OSSL_FUNC_RAND_GENERATE);",
          "217:             if (pfunc == NULL)",
          "218:                 return 0;",
          "220:             if (OSSL_get_OP_rand_generate(pfunc)(drbg->parent, buffer, bytes_needed,",
          "221:                                                  drbg->strength,",
          "222:                                                  prediction_resistance,",
          "223:                                                  (unsigned char *)&drbg,",
          "224:                                                  sizeof(drbg)) != 0)",
          "226:             drbg->reseed_next_counter = get_parent_reseed_count(drbg);",
          "234:         entropy_available = rand_pool_acquire_entropy(pool);",
          "",
          "[Added Lines]",
          "194:             if (drbg->parent_generate == NULL)",
          "195:                 goto err;",
          "197:             if (drbg->parent_generate(drbg->parent, buffer, bytes_needed,",
          "198:                                       drbg->strength, prediction_resistance,",
          "199:                                       (unsigned char *)&drbg,",
          "200:                                       sizeof(drbg)) != 0)",
          "203:             drbg->parent_reseed_counter = get_parent_reseed_count(drbg);",
          "210:         entropy_available = prov_pool_acquire_entropy(pool);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "240:     }",
          "242:     if (drbg->seed_pool == NULL)",
          "243:         rand_pool_free(pool);",
          "244:     return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218: err:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "251: static void prov_drbg_cleanup_entropy(PROV_DRBG *drbg,",
          "252:                                       unsigned char *out, size_t outlen)",
          "253: {",
          "259:     }",
          "260: }",
          "261: #endif",
          "263: #ifndef PROV_RAND_GET_RANDOM_NONCE",
          "264: typedef struct prov_drbg_nonce_global_st {",
          "",
          "[Removed Lines]",
          "254:     if (drbg->seed_pool == NULL) {",
          "255:         if (drbg->secure)",
          "256:             OPENSSL_secure_clear_free(out, outlen);",
          "257:         else",
          "258:             OPENSSL_clear_free(out, outlen);",
          "",
          "[Added Lines]",
          "231:     OSSL_PARAM params[3], *p = params;",
          "233:     if (drbg->get_entropy_fn != NULL) {",
          "234:         if (drbg->cleanup_entropy_fn != NULL) {",
          "236:                                                &outlen);",
          "238:                                                   (void **)&out, 0);",
          "241:             drbg->cleanup_entropy_fn(params, drbg->callback_arg);",
          "242:         }",
          "243:     } else if (drbg->seed_pool == NULL) {",
          "244:         OPENSSL_secure_clear_free(out, outlen);",
          "248: static size_t get_entropy(PROV_DRBG *drbg, unsigned char **pout, int entropy,",
          "249:                           size_t min_len, size_t max_len,",
          "250:                           int prediction_resistance)",
          "251: {",
          "252:     if (drbg->get_entropy_fn != NULL) {",
          "253:         OSSL_PARAM params[6], *p = params;",
          "254:         OSSL_PARAM out[2] = { OSSL_PARAM_END, OSSL_PARAM_END };",
          "257:                                         &entropy);",
          "259:                                         &prediction_resistance);",
          "261:                                            &min_len);",
          "263:                                            &max_len);",
          "266:                                               (void **)pout, 0);",
          "268:         if (drbg->get_entropy_fn(params, out, drbg->callback_arg))",
          "269:             return out->return_size;",
          "270:         ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_GET_ENTROPY);",
          "271:         return 0;",
          "272:     }",
          "274: #ifdef FIPS_MODULE",
          "275:     if (drbg->parent == NULL)",
          "276:         return prov_crngt_get_entropy(drbg, pout, entropy, min_len, max_len,",
          "277:                                       prediction_resistance);",
          "278: #endif",
          "280:     return prov_drbg_get_entropy(drbg, pout, entropy, min_len, max_len,",
          "281:                                  prediction_resistance);",
          "282: }",
          "284: static void cleanup_entropy(PROV_DRBG *drbg, unsigned char *out, size_t outlen)",
          "285: {",
          "286: #ifdef FIPS_MODULE",
          "287:     if (drbg->parent == NULL)",
          "288:         prov_crngt_cleanup_entropy(drbg, out, outlen);",
          "289:     else",
          "291:         prov_drbg_cleanup_entropy(drbg, out, outlen);",
          "292: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "311:                                   unsigned char **pout,",
          "312:                                   int entropy, size_t min_len, size_t max_len)",
          "313: {",
          "315:     RAND_POOL *pool;",
          "316:     PROV_DRBG_NONCE_GLOBAL *dngbl",
          "318:                                &drbg_nonce_ossl_ctx_method);",
          "319:     struct {",
          "320:         void *instance;",
          "321:         int count;",
          "322:     } data;",
          "325:     if (dngbl == NULL)",
          "326:         return 0;",
          "328:     memset(&data, 0, sizeof(data));",
          "329:     pool = rand_pool_new(0, 0, min_len, max_len);",
          "330:     if (pool == NULL)",
          "331:         return 0;",
          "334:         goto err;",
          "336:     data.instance = drbg;",
          "",
          "[Removed Lines]",
          "314:     size_t ret = 0;",
          "317:         = openssl_ctx_get_data(drbg->libctx, OPENSSL_CTX_DRBG_NONCE_INDEX,",
          "333:     if (rand_pool_add_nonce_data(pool) == 0)",
          "",
          "[Added Lines]",
          "345:     size_t ret = 0, n;",
          "347:     unsigned char *buf = NULL;",
          "348:     OPENSSL_CTX *libctx = PROV_LIBRARY_CONTEXT_OF(drbg->provctx);",
          "350:         = openssl_ctx_get_data(libctx, OPENSSL_CTX_DRBG_NONCE_INDEX,",
          "352:     OSSL_PARAM params[5], *p = params;",
          "353:     OSSL_PARAM out[2] = { OSSL_PARAM_END, OSSL_PARAM_END };",
          "362:     if (drbg->get_nonce_fn != NULL) {",
          "364:                                         &entropy);",
          "366:                                            &min_len);",
          "368:                                            &max_len);",
          "371:                                               (void **)pout, 0);",
          "373:         if (drbg->get_nonce_fn(params, out, drbg->callback_arg))",
          "374:             return out->return_size;",
          "375:         ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_GET_NONCE);",
          "376:         return 0;",
          "377:     }",
          "378:     if (drbg->parent != NULL) {",
          "379:         if (drbg->parent_nonce != NULL) {",
          "380:             n = drbg->parent_nonce(drbg->parent, NULL, 0, drbg->min_noncelen,",
          "381:                                    drbg->max_noncelen);",
          "382:             if (n > 0 && (buf = OPENSSL_malloc(n)) != NULL) {",
          "383:                 ret = drbg->parent_nonce(drbg->parent, buf, 0,",
          "384:                                          drbg->min_noncelen,",
          "385:                                          drbg->max_noncelen);",
          "386:                 if (ret == n) {",
          "388:                     return ret;",
          "389:                 }",
          "390:                 OPENSSL_free(buf);",
          "391:             }",
          "392:         }",
          "393:     }",
          "401:     if (prov_pool_add_nonce_data(pool) == 0)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "349:     return ret;",
          "350: }",
          "359: {",
          "361: }",
          "",
          "[Removed Lines]",
          "351: #endif",
          "357: static void prov_drbg_cleanup_nonce(PROV_DRBG *drbg,",
          "358:                                     unsigned char *out, size_t outlen)",
          "360:     OPENSSL_clear_free(out, outlen);",
          "",
          "[Added Lines]",
          "420: static void prov_drbg_clear_nonce(PROV_DRBG *drbg, unsigned char *nonce,",
          "421:                                   size_t noncelen)",
          "423:     OSSL_PARAM params[3], *p = params;",
          "425:     if (drbg->get_nonce_fn != NULL) {",
          "426:         if (drbg->cleanup_nonce_fn != NULL) {",
          "428:                                                &noncelen);",
          "430:                                                   (void **)&nonce, 0);",
          "433:             drbg->cleanup_nonce_fn(params, drbg->callback_arg);",
          "434:         }",
          "435:     } else {",
          "436:         OPENSSL_clear_free(nonce, noncelen);",
          "437:     }",
          "439: #else",
          "440: # define prov_drbg_clear_nonce(drbg, nonce, len) \\",
          "441:     OPENSSL_clear_free((nonce), (len))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "372:                           int prediction_resistance,",
          "380: {",
          "381:     unsigned char *nonce = NULL, *entropy = NULL;",
          "382:     size_t noncelen = 0, entropylen = 0;",
          "383:     size_t min_entropy, min_entropylen, max_entropylen;",
          "386:     if (strength > drbg->strength) {",
          "388:         goto end;",
          "389:     }",
          "390:     min_entropy = drbg->strength;",
          "",
          "[Removed Lines]",
          "371: int PROV_DRBG_instantiate(PROV_DRBG *drbg, int strength,",
          "373:                           const unsigned char *pers, size_t perslen,",
          "374:                           int (*ifnc)(PROV_DRBG *drbg,",
          "375:                                       const unsigned char *ent, size_t ent_len,",
          "376:                                       const unsigned char *nonce,",
          "377:                                       size_t nonce_len,",
          "378:                                       const unsigned char *pstr,",
          "379:                                       size_t pstr_len))",
          "384:     const OSSL_DISPATCH *pnonce;",
          "387:         PROVerr(0, RAND_R_INSUFFICIENT_DRBG_STRENGTH);",
          "",
          "[Added Lines]",
          "452: int PROV_DRBG_instantiate(PROV_DRBG *drbg, unsigned int strength,",
          "454:                           const unsigned char *pers, size_t perslen)",
          "461:         PROVerr(0, PROV_R_INSUFFICIENT_DRBG_STRENGTH);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "396:         perslen = sizeof(ossl_pers_string);",
          "397:     }",
          "398:     if (perslen > drbg->max_perslen) {",
          "400:         goto end;",
          "401:     }",
          "406:         else",
          "408:         goto end;",
          "409:     }",
          "413:     if (drbg->min_noncelen > 0) {",
          "414: #ifndef PROV_RAND_GET_RANDOM_NONCE",
          "416: #endif",
          "443:         }",
          "444: #ifndef PROV_RAND_GET_RANDOM_NONCE",
          "",
          "[Removed Lines]",
          "399:         PROVerr(0, RAND_R_PERSONALISATION_STRING_TOO_LONG);",
          "403:     if (drbg->state != DRBG_UNINITIALISED) {",
          "404:         if (drbg->state == DRBG_ERROR)",
          "405:             PROVerr(0, RAND_R_IN_ERROR_STATE);",
          "407:             PROVerr(0, RAND_R_ALREADY_INSTANTIATED);",
          "411:     drbg->state = DRBG_ERROR;",
          "415:         if (drbg->parent != NULL)",
          "417:         {",
          "418:             pnonce = find_call(drbg->parent_dispatch, OSSL_FUNC_RAND_NONCE);",
          "419:             if (pnonce == NULL) {",
          "427:                 min_entropy += drbg->strength / 2;",
          "428:                 min_entropylen += drbg->min_noncelen;",
          "429:                 max_entropylen += drbg->max_noncelen;",
          "430:             } else {",
          "431:                 drbg_lock_parent(drbg);",
          "432:                 noncelen = OSSL_get_OP_rand_nonce(pnonce)(drbg->parent, &nonce,",
          "433:                                                           drbg->strength / 2,",
          "434:                                                           drbg->min_noncelen,",
          "435:                                                           drbg->max_noncelen);",
          "436:                 drbg_unlock_parent(drbg);",
          "437:                 if (noncelen < drbg->min_noncelen",
          "438:                         || noncelen > drbg->max_noncelen) {",
          "439:                     PROVerr(0, RAND_R_ERROR_RETRIEVING_NONCE);",
          "440:                     goto end;",
          "441:                 }",
          "442:             }",
          "",
          "[Added Lines]",
          "473:         PROVerr(0, PROV_R_PERSONALISATION_STRING_TOO_LONG);",
          "477:     if (drbg->state != EVP_RAND_STATE_UNINITIALISED) {",
          "478:         if (drbg->state == EVP_RAND_STATE_ERROR)",
          "479:             PROVerr(0, PROV_R_IN_ERROR_STATE);",
          "481:             PROVerr(0, PROV_R_ALREADY_INSTANTIATED);",
          "485:     drbg->state = EVP_RAND_STATE_ERROR;",
          "488:         if (drbg->parent_nonce != NULL) {",
          "489:             noncelen = drbg->parent_nonce(drbg->parent, NULL, drbg->strength,",
          "490:                                           drbg->min_noncelen,",
          "491:                                           drbg->max_noncelen);",
          "492:             if (noncelen == 0) {",
          "493:                 PROVerr(0, PROV_R_ERROR_RETRIEVING_NONCE);",
          "494:                 goto end;",
          "495:             }",
          "496:             nonce = OPENSSL_malloc(noncelen);",
          "497:             if (nonce == NULL) {",
          "498:                 PROVerr(0, PROV_R_ERROR_RETRIEVING_NONCE);",
          "499:                 goto end;",
          "500:             }",
          "501:             if (noncelen != drbg->parent_nonce(drbg->parent, nonce,",
          "502:                                                drbg->strength,",
          "503:                                                drbg->min_noncelen,",
          "504:                                                drbg->max_noncelen)) {",
          "505:                 PROVerr(0, PROV_R_ERROR_RETRIEVING_NONCE);",
          "506:                 OPENSSL_free(nonce);",
          "507:             }",
          "509:         } else if (drbg->parent != NULL) {",
          "518:             min_entropy += drbg->strength / 2;",
          "519:             min_entropylen += drbg->min_noncelen;",
          "520:             max_entropylen += drbg->max_noncelen;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "448:                                            drbg->max_noncelen);",
          "449:             if (noncelen < drbg->min_noncelen",
          "450:                     || noncelen > drbg->max_noncelen) {",
          "452:                 goto end;",
          "453:             }",
          "454:         }",
          "455: #endif",
          "456:     }",
          "459:     if (drbg->reseed_next_counter) {",
          "460:         drbg->reseed_next_counter++;",
          "462:             drbg->reseed_next_counter = 1;",
          "463:     }",
          "",
          "[Removed Lines]",
          "451:                 PROVerr(0, RAND_R_ERROR_RETRIEVING_NONCE);",
          "458:     drbg->reseed_next_counter = tsan_load(&drbg->reseed_prop_counter);",
          "461:         if(!drbg->reseed_next_counter)",
          "",
          "[Added Lines]",
          "529:                 PROVerr(0, PROV_R_ERROR_RETRIEVING_NONCE);",
          "536:     drbg->reseed_next_counter = tsan_load(&drbg->reseed_counter);",
          "539:         if (!drbg->reseed_next_counter)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "467:                              prediction_resistance);",
          "468:     if (entropylen < min_entropylen",
          "469:             || entropylen > max_entropylen) {",
          "471:         goto end;",
          "472:     }",
          "476:         goto end;",
          "477:     }",
          "480:     drbg->reseed_gen_counter = 1;",
          "481:     drbg->reseed_time = time(NULL);",
          "484:  end:",
          "485:     if (entropy != NULL)",
          "486:         cleanup_entropy(drbg, entropy, entropylen);",
          "490:         return 1;",
          "491:     return 0;",
          "492: }",
          "",
          "[Removed Lines]",
          "470:         PROVerr(0, RAND_R_ERROR_RETRIEVING_ENTROPY);",
          "474:     if (!ifnc(drbg, entropy, entropylen, nonce, noncelen, pers, perslen)) {",
          "475:         PROVerr(0, RAND_R_ERROR_INSTANTIATING_DRBG);",
          "479:     drbg->state = DRBG_READY;",
          "482:     tsan_store(&drbg->reseed_prop_counter, drbg->reseed_next_counter);",
          "487:     if (nonce != NULL)",
          "488:         prov_drbg_cleanup_nonce(drbg, nonce, noncelen);",
          "489:     if (drbg->state == DRBG_READY)",
          "",
          "[Added Lines]",
          "548:         PROVerr(0, PROV_R_ERROR_RETRIEVING_ENTROPY);",
          "552:     if (!drbg->instantiate(drbg, entropy, entropylen, nonce, noncelen,",
          "553:                            pers, perslen)) {",
          "554:         PROVerr(0, PROV_R_ERROR_INSTANTIATING_DRBG);",
          "558:     drbg->state = EVP_RAND_STATE_READY;",
          "561:     tsan_store(&drbg->reseed_counter, drbg->reseed_next_counter);",
          "566:     prov_drbg_clear_nonce(drbg, nonce, noncelen);",
          "567:     if (drbg->state == EVP_RAND_STATE_READY)",
          "579: int PROV_DRBG_uninstantiate(PROV_DRBG *drbg)",
          "580: {",
          "581:     drbg->state = EVP_RAND_STATE_UNINITIALISED;",
          "582:     return 1;",
          "583: }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "501: int PROV_DRBG_reseed(PROV_DRBG *drbg, int prediction_resistance,",
          "502:                      const unsigned char *ent, size_t ent_len,",
          "507: {",
          "508:     unsigned char *entropy = NULL;",
          "509:     size_t entropylen = 0;",
          "514:     }",
          "518:     }",
          "520:     if (adin == NULL) {",
          "521:         adinlen = 0;",
          "522:     } else if (adinlen > drbg->max_adinlen) {",
          "524:         return 0;",
          "525:     }",
          "530:     if (drbg->reseed_next_counter) {",
          "531:         drbg->reseed_next_counter++;",
          "533:             drbg->reseed_next_counter = 1;",
          "534:     }",
          "536:     entropylen = get_entropy(drbg, &entropy, drbg->strength,",
          "537:                              drbg->min_entropylen, drbg->max_entropylen,",
          "538:                              prediction_resistance);",
          "539:     if (entropylen < drbg->min_entropylen",
          "540:             || entropylen > drbg->max_entropylen) {",
          "542:         goto end;",
          "543:     }",
          "546:         goto end;",
          "549:     drbg->reseed_gen_counter = 1;",
          "550:     drbg->reseed_time = time(NULL);",
          "553:  end:",
          "557:         return 1;",
          "558:     return 0;",
          "559: }",
          "",
          "[Removed Lines]",
          "503:                      const unsigned char *adin, size_t adinlen,",
          "504:                      int (*reseed)(PROV_DRBG *drbg,",
          "505:                                    const unsigned char *ent, size_t ent_len,",
          "506:                                    const unsigned char *adin, size_t adin_len))",
          "511:     if (drbg->state == DRBG_ERROR) {",
          "512:         PROVerr(0, RAND_R_IN_ERROR_STATE);",
          "513:         return 0;",
          "515:     if (drbg->state == DRBG_UNINITIALISED) {",
          "516:         PROVerr(0, RAND_R_NOT_INSTANTIATED);",
          "517:         return 0;",
          "523:         PROVerr(0, RAND_R_ADDITIONAL_INPUT_TOO_LONG);",
          "527:     drbg->state = DRBG_ERROR;",
          "529:     drbg->reseed_next_counter = tsan_load(&drbg->reseed_prop_counter);",
          "532:         if(!drbg->reseed_next_counter)",
          "541:         PROVerr(0, RAND_R_ERROR_RETRIEVING_ENTROPY);",
          "545:     if (!reseed(drbg, entropy, entropylen, adin, adinlen))",
          "548:     drbg->state = DRBG_READY;",
          "551:     tsan_store(&drbg->reseed_prop_counter, drbg->reseed_next_counter);",
          "554:     if (entropy != NULL)",
          "555:         OPENSSL_cleanse(entropy, entropylen);",
          "556:     if (drbg->state == DRBG_READY)",
          "",
          "[Added Lines]",
          "594:                      const unsigned char *adin, size_t adinlen)",
          "599:     if (drbg->state != EVP_RAND_STATE_READY) {",
          "601:         rand_drbg_restart(drbg);",
          "603:         if (drbg->state == EVP_RAND_STATE_ERROR) {",
          "604:             PROVerr(0, PROV_R_IN_ERROR_STATE);",
          "605:             return 0;",
          "606:         }",
          "607:         if (drbg->state == EVP_RAND_STATE_UNINITIALISED) {",
          "608:             PROVerr(0, PROV_R_NOT_INSTANTIATED);",
          "609:             return 0;",
          "610:         }",
          "613:     if (ent != NULL) {",
          "614:         if (ent_len < drbg->min_entropylen) {",
          "615:             RANDerr(0, RAND_R_ENTROPY_OUT_OF_RANGE);",
          "616:             drbg->state = EVP_RAND_STATE_ERROR;",
          "617:             return 0;",
          "618:         }",
          "619:         if (ent_len > drbg->max_entropylen) {",
          "620:             RANDerr(0, RAND_R_ENTROPY_INPUT_TOO_LONG);",
          "621:             drbg->state = EVP_RAND_STATE_ERROR;",
          "622:             return 0;",
          "623:         }",
          "629:         PROVerr(0, PROV_R_ADDITIONAL_INPUT_TOO_LONG);",
          "633:     drbg->state = EVP_RAND_STATE_ERROR;",
          "635:     drbg->reseed_next_counter = tsan_load(&drbg->reseed_counter);",
          "638:         if (!drbg->reseed_next_counter)",
          "642:     if (ent != NULL) {",
          "643: #ifdef FIP_MODULE",
          "651:         if (!drbg->reseed(drbg, NULL, 0, ent, ent_len)) {",
          "652:             ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_RESEED);",
          "653:             return 0;",
          "654:         }",
          "655: #else",
          "656:         if (!drbg->reseed(drbg, ent, ent_len, adin, adinlen)) {",
          "657:             ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_RESEED);",
          "658:             return 0;",
          "659:         }",
          "661:         adin = NULL;",
          "662:         adinlen = 0;",
          "663: #endif",
          "664:     }",
          "672:         PROVerr(0, PROV_R_ERROR_RETRIEVING_ENTROPY);",
          "676:     if (!drbg->reseed(drbg, entropy, entropylen, adin, adinlen))",
          "679:     drbg->state = EVP_RAND_STATE_READY;",
          "682:     tsan_store(&drbg->reseed_counter, drbg->reseed_next_counter);",
          "683:     if (drbg->parent != NULL)",
          "684:         drbg->parent_reseed_counter = get_parent_reseed_count(drbg);",
          "687:     cleanup_entropy(drbg, entropy, entropylen);",
          "688:     if (drbg->state == EVP_RAND_STATE_READY)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "571: int PROV_DRBG_generate(PROV_DRBG *drbg, unsigned char *out, size_t outlen,",
          "580: {",
          "581:     int fork_id;",
          "582:     int reseed_required = 0;",
          "587:             return 0;",
          "588:         }",
          "591:             return 0;",
          "592:         }",
          "593:     }",
          "595:     if (outlen > drbg->max_request) {",
          "597:         return 0;",
          "598:     }",
          "599:     if (adinlen > drbg->max_adinlen) {",
          "601:         return 0;",
          "602:     }",
          "",
          "[Removed Lines]",
          "572:                        int strength, int prediction_resistance,",
          "573:                        const unsigned char *adin, size_t adinlen,",
          "574:                        int (*generate)(PROV_DRBG *, unsigned char *out,",
          "575:                                        size_t outlen, const unsigned char *adin,",
          "576:                                        size_t adin_len),",
          "577:                        int (*reseed)(PROV_DRBG *drbg, const unsigned char *ent,",
          "578:                                      size_t ent_len, const unsigned char *adin,",
          "579:                                      size_t adin_len))",
          "584:     if (drbg->state != DRBG_READY) {",
          "585:         if (drbg->state == DRBG_ERROR) {",
          "586:             PROVerr(0, RAND_R_IN_ERROR_STATE);",
          "589:         if (drbg->state == DRBG_UNINITIALISED) {",
          "590:             PROVerr(0, RAND_R_NOT_INSTANTIATED);",
          "596:         PROVerr(0, RAND_R_REQUEST_TOO_LARGE_FOR_DRBG);",
          "600:         PROVerr(0, RAND_R_ADDITIONAL_INPUT_TOO_LONG);",
          "",
          "[Added Lines]",
          "704:                        unsigned int strength, int prediction_resistance,",
          "705:                        const unsigned char *adin, size_t adinlen)",
          "710:     if (drbg->state != EVP_RAND_STATE_READY) {",
          "712:         rand_drbg_restart(drbg);",
          "714:         if (drbg->state == EVP_RAND_STATE_ERROR) {",
          "715:             PROVerr(0, PROV_R_IN_ERROR_STATE);",
          "718:         if (drbg->state == EVP_RAND_STATE_UNINITIALISED) {",
          "719:             PROVerr(0, PROV_R_NOT_INSTANTIATED);",
          "723:     if (strength > drbg->strength) {",
          "724:         PROVerr(0, PROV_R_INSUFFICIENT_DRBG_STRENGTH);",
          "725:         return 0;",
          "726:     }",
          "729:         PROVerr(0, PROV_R_REQUEST_TOO_LARGE_FOR_DRBG);",
          "733:         PROVerr(0, PROV_R_ADDITIONAL_INPUT_TOO_LONG);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "618:             || now - drbg->reseed_time >= drbg->reseed_time_interval)",
          "619:             reseed_required = 1;",
          "620:     }",
          "630:     if (reseed_required || prediction_resistance) {",
          "631:         if (!PROV_DRBG_reseed(drbg, prediction_resistance, NULL, 0,",
          "634:             return 0;",
          "635:         }",
          "636:         adin = NULL;",
          "637:         adinlen = 0;",
          "638:     }",
          "643:         return 0;",
          "644:     }",
          "",
          "[Removed Lines]",
          "621:     if (drbg->parent != NULL) {",
          "622:         unsigned int reseed_counter = 0;",
          "624:         if (reseed_counter > 0",
          "625:             && get_parent_reseed_count(drbg) !=",
          "626:                tsan_load(&drbg->reseed_prop_counter))",
          "627:             reseed_required = 1;",
          "628:     }",
          "632:                               adin, adinlen, reseed)) {",
          "633:             PROVerr(0, RAND_R_RESEED_ERROR);",
          "640:     if (!generate(drbg, out, outlen, adin, adinlen)) {",
          "641:         drbg->state = DRBG_ERROR;",
          "642:         PROVerr(0, RAND_R_GENERATE_ERROR);",
          "",
          "[Added Lines]",
          "754:     if (drbg->parent != NULL",
          "755:             && get_parent_reseed_count(drbg) != drbg->parent_reseed_counter)",
          "756:         reseed_required = 1;",
          "760:                               adin, adinlen)) {",
          "761:             PROVerr(0, PROV_R_RESEED_ERROR);",
          "768:     if (!drbg->generate(drbg, out, outlen, adin, adinlen)) {",
          "769:         drbg->state = EVP_RAND_STATE_ERROR;",
          "770:         PROVerr(0, PROV_R_GENERATE_ERROR);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "648:     return 1;",
          "649: }",
          "658: {",
          "681:     }",
          "692: }",
          "696: static const OSSL_DISPATCH *find_call(const OSSL_DISPATCH *dispatch,",
          "697:                                       int function)",
          "698: {",
          "699:     if (dispatch != NULL)",
          "701:             if (dispatch->function_id == function)",
          "702:                 return dispatch;",
          "703:     return NULL;",
          "704: }",
          "706: int drbg_enable_locking(void *vctx)",
          "707: {",
          "708:     PROV_DRBG *drbg = vctx;",
          "723:                 return 0;",
          "724:             }",
          "725:         drbg->lock = CRYPTO_THREAD_lock_new();",
          "726:         if (drbg->lock == NULL) {",
          "728:             return 0;",
          "729:         }",
          "730:     }",
          "",
          "[Removed Lines]",
          "651: #if 0",
          "657: size_t prov_drbg_seedlen(PROV_DRBG *drbg)",
          "665:     size_t min_entropy = drbg->strength;",
          "666:     size_t min_entropylen = drbg->min_entropylen;",
          "672:     if (drbg->min_noncelen > 0) {",
          "673: #ifndef PROV_RAND_GET_RANDOM_NONCE",
          "674:         if (drbg->parent != NULL)",
          "675: #endif",
          "676:             if (find_call(drbg->parent_dispatch,",
          "677:                           OSSL_FUNC_RAND_NONCE) == NULL) {",
          "678:                 min_entropy += drbg->strength / 2;",
          "679:                 min_entropylen += drbg->min_noncelen;",
          "680:             }",
          "688:     min_entropy >>= 3;",
          "691:     return min_entropy > min_entropylen ? min_entropy : min_entropylen;",
          "693: #endif",
          "700:         while (dispatch->function_id != 0)",
          "709:     const OSSL_DISPATCH *pfunc;",
          "711:     if (drbg == NULL)",
          "712:         return 1;",
          "713:     if (drbg->lock == NULL) {",
          "714:         if (drbg->state != DRBG_UNINITIALISED) {",
          "715:             ERR_raise(ERR_LIB_PROV, RAND_R_DRBG_ALREADY_INITIALIZED);",
          "716:             return 0;",
          "717:         }",
          "719:         pfunc = find_call(drbg->parent_dispatch, OSSL_FUNC_RAND_ENABLE_LOCKING);",
          "720:         if (pfunc != NULL)",
          "721:             if (!OSSL_get_OP_rand_enable_locking(pfunc)(drbg->parent)) {",
          "722:                 ERR_raise(ERR_LIB_PROV, RAND_R_PARENT_LOCKING_NOT_ENABLED);",
          "727:             ERR_raise(ERR_LIB_PROV, RAND_R_FAILED_TO_CREATE_LOCK);",
          "",
          "[Added Lines]",
          "796: static int rand_drbg_restart(PROV_DRBG *drbg)",
          "798:     if (drbg->seed_pool != NULL) {",
          "799:         drbg->state = EVP_RAND_STATE_ERROR;",
          "800:         rand_pool_free(drbg->seed_pool);",
          "801:         drbg->seed_pool = NULL;",
          "802:         RANDerr(0, ERR_R_INTERNAL_ERROR);",
          "803:         return 0;",
          "807:     if (drbg->state == EVP_RAND_STATE_ERROR)",
          "808:         drbg->uninstantiate(drbg);",
          "811:     if (drbg->state == EVP_RAND_STATE_UNINITIALISED)",
          "813:         PROV_DRBG_instantiate(drbg, drbg->strength, 0, NULL, 0);",
          "815:     rand_pool_free(drbg->seed_pool);",
          "816:     drbg->seed_pool = NULL;",
          "817:     return drbg->state == EVP_RAND_STATE_READY;",
          "825:         while (dispatch->function_id != 0) {",
          "828:             dispatch++;",
          "829:         }",
          "837:     if (drbg != NULL && drbg->lock == NULL) {",
          "838:         if (drbg->parent_enable_locking != NULL)",
          "839:             if (!drbg->parent_enable_locking(drbg->parent)) {",
          "840:                 ERR_raise(ERR_LIB_PROV, PROV_R_PARENT_LOCKING_NOT_ENABLED);",
          "845:             ERR_raise(ERR_LIB_PROV, PROV_R_FAILED_TO_CREATE_LOCK);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "745: {",
          "746:     PROV_DRBG *drbg = OPENSSL_zalloc(sizeof(*drbg));",
          "749:     if (drbg == NULL) {",
          "750:         ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE);",
          "751:         return NULL;",
          "752:     }",
          "756:     drbg->parent = parent;",
          "760:     drbg->max_entropylen = DRBG_MAX_LENGTH;",
          "",
          "[Removed Lines]",
          "742: PROV_DRBG *prov_rand_drbg_new(void *provctx, int secure, void *parent,",
          "743:                               const OSSL_DISPATCH *parent_dispatch,",
          "744:                               int (*dnew)(PROV_DRBG *ctx, int secure))",
          "747:     int p_str;",
          "754:     drbg->libctx = provctx;",
          "755:     drbg->secure = secure;",
          "757:     drbg->parent_dispatch = parent_dispatch;",
          "",
          "[Added Lines]",
          "860: PROV_DRBG *prov_rand_drbg_new",
          "861:     (void *provctx, void *parent, const OSSL_DISPATCH *p_dispatch,",
          "862:      int (*dnew)(PROV_DRBG *ctx),",
          "863:      int (*instantiate)(PROV_DRBG *drbg,",
          "864:                         const unsigned char *entropy, size_t entropylen,",
          "865:                         const unsigned char *nonce, size_t noncelen,",
          "866:                         const unsigned char *pers, size_t perslen),",
          "867:      int (*uninstantiate)(PROV_DRBG *ctx),",
          "868:      int (*reseed)(PROV_DRBG *drbg, const unsigned char *ent, size_t ent_len,",
          "869:                    const unsigned char *adin, size_t adin_len),",
          "870:      int (*generate)(PROV_DRBG *, unsigned char *out, size_t outlen,",
          "871:                      const unsigned char *adin, size_t adin_len))",
          "874:     unsigned int p_str;",
          "875:     const OSSL_DISPATCH *pfunc;",
          "882:     drbg->provctx = provctx;",
          "883:     drbg->instantiate = instantiate;",
          "884:     drbg->uninstantiate = uninstantiate;",
          "885:     drbg->reseed = reseed;",
          "886:     drbg->generate = generate;",
          "887:     drbg->fork_id = openssl_get_fork_id();",
          "891:     if ((pfunc = find_call(p_dispatch, OSSL_FUNC_RAND_ENABLE_LOCKING)) != NULL)",
          "892:         drbg->parent_enable_locking = OSSL_get_OP_rand_enable_locking(pfunc);",
          "893:     if ((pfunc = find_call(p_dispatch, OSSL_FUNC_RAND_LOCK)) != NULL)",
          "894:         drbg->parent_lock = OSSL_get_OP_rand_lock(pfunc);",
          "895:     if ((pfunc = find_call(p_dispatch, OSSL_FUNC_RAND_UNLOCK)) != NULL)",
          "896:         drbg->parent_unlock = OSSL_get_OP_rand_unlock(pfunc);",
          "897:     if ((pfunc = find_call(p_dispatch, OSSL_FUNC_RAND_GET_CTX_PARAMS)) != NULL)",
          "898:         drbg->parent_get_ctx_params = OSSL_get_OP_rand_get_ctx_params(pfunc);",
          "899:     if ((pfunc = find_call(p_dispatch, OSSL_FUNC_RAND_GENERATE)) != NULL)",
          "900:         drbg->parent_generate = OSSL_get_OP_rand_generate(pfunc);",
          "901:     if ((pfunc = find_call(p_dispatch, OSSL_FUNC_RAND_NONCE)) != NULL)",
          "902:         drbg->parent_nonce = OSSL_get_OP_rand_nonce(pfunc);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "762:     drbg->max_perslen = DRBG_MAX_LENGTH;",
          "763:     drbg->max_adinlen = DRBG_MAX_LENGTH;",
          "764:     drbg->reseed_gen_counter = 1;",
          "780:         goto err;",
          "782:     if (parent != NULL) {",
          "",
          "[Removed Lines]",
          "767:     if (parent == NULL) {",
          "768:         drbg->reseed_interval = master_reseed_interval;",
          "769:         drbg->reseed_time_interval = master_reseed_time_interval;",
          "770:     } else {",
          "775:         drbg->reseed_interval = slave_reseed_interval;",
          "776:         drbg->reseed_time_interval = slave_reseed_time_interval;",
          "777:     }",
          "779:     if (!dnew(drbg, secure))",
          "",
          "[Added Lines]",
          "910:     drbg->reseed_counter = 1;",
          "911:     drbg->reseed_interval = RESEED_INTERVAL;",
          "912:     drbg->reseed_time_interval = TIME_INTERVAL;",
          "914:     if (!dnew(drbg))",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "791:             goto err;",
          "792:         }",
          "793:     }",
          "",
          "[Removed Lines]",
          "790:             ERR_raise(ERR_LIB_PROV, RAND_R_PARENT_STRENGTH_TOO_WEAK);",
          "",
          "[Added Lines]",
          "925:             ERR_raise(ERR_LIB_PROV, PROV_R_PARENT_STRENGTH_TOO_WEAK);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "806:     rand_pool_free(drbg->adin_pool);",
          "807:     CRYPTO_THREAD_lock_free(drbg->lock);",
          "811: }",
          "813: int drbg_get_ctx_params(PROV_DRBG *drbg, OSSL_PARAM params[])",
          "814: {",
          "815:     OSSL_PARAM *p;",
          "818:     if (p != NULL && !OSSL_PARAM_set_int(p, drbg->state))",
          "819:         return 0;",
          "",
          "[Removed Lines]",
          "808: #ifndef FIPS_MODULE",
          "809:     CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RAND_DRBG, drbg, &drbg->ex_data);",
          "810: #endif",
          "817:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_STATUS);",
          "",
          "[Added Lines]",
          "943:     OPENSSL_free(drbg);",
          "950:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_STATE);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "822:     if (p != NULL && !OSSL_PARAM_set_int(p, drbg->strength))",
          "823:         return 0;",
          "826:     if (p != NULL && !OSSL_PARAM_set_size_t(p, drbg->max_request))",
          "827:         return 0;",
          "830:     if (p != NULL && !OSSL_PARAM_set_size_t(p, drbg->min_entropylen))",
          "831:         return 0;",
          "834:     if (p != NULL && !OSSL_PARAM_set_size_t(p, drbg->max_entropylen))",
          "835:         return 0;",
          "838:     if (p != NULL && !OSSL_PARAM_set_size_t(p, drbg->min_noncelen))",
          "839:         return 0;",
          "842:     if (p != NULL && !OSSL_PARAM_set_size_t(p, drbg->max_noncelen))",
          "843:         return 0;",
          "846:     if (p != NULL && !OSSL_PARAM_set_size_t(p, drbg->max_perslen))",
          "847:         return 0;",
          "850:     if (p != NULL && !OSSL_PARAM_set_size_t(p, drbg->max_adinlen))",
          "851:         return 0;",
          "855:         return 0;",
          "859:         return 0;",
          "862:     if (p != NULL && !OSSL_PARAM_set_time_t(p, drbg->reseed_time_interval))",
          "863:         return 0;",
          "866:     if (p != NULL",
          "868:         return 0;",
          "869:     return 1;",
          "870: }",
          "",
          "[Removed Lines]",
          "825:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_MAX_REQUEST);",
          "829:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_MIN_ENTROPYLEN);",
          "833:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_MAX_ENTROPYLEN);",
          "837:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_MIN_NONCELEN);",
          "841:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_MAX_NONCELEN);",
          "845:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_MAX_PERSLEN);",
          "849:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_MAX_ADINLEN);",
          "853:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_RESEED_CTR);",
          "854:     if (p != NULL && !OSSL_PARAM_set_uint(p, drbg->reseed_gen_counter))",
          "857:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_RESEED_REQUESTS);",
          "858:     if (p != NULL && !OSSL_PARAM_set_uint(p, drbg->reseed_interval))",
          "861:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_RESEED_TIME_INTERVAL);",
          "865:     p = OSSL_PARAM_locate(params, OSSL_RAND_PARAM_RESEED_PROP_CTR);",
          "867:             && !OSSL_PARAM_set_uint(p, tsan_load(&drbg->reseed_prop_counter)))",
          "",
          "[Added Lines]",
          "958:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_MAX_REQUEST);",
          "962:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_MIN_ENTROPYLEN);",
          "966:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_MAX_ENTROPYLEN);",
          "970:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_MIN_NONCELEN);",
          "974:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_MAX_NONCELEN);",
          "978:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_MAX_PERSLEN);",
          "982:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_MAX_ADINLEN);",
          "986:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_RESEED_REQUESTS);",
          "987:     if (p != NULL && !OSSL_PARAM_set_uint(p, drbg->reseed_interval))",
          "990:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_RESEED_TIME);",
          "991:     if (p != NULL && !OSSL_PARAM_set_time_t(p, drbg->reseed_time))",
          "994:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_RESEED_TIME_INTERVAL);",
          "998:     p = OSSL_PARAM_locate(params, OSSL_DRBG_PARAM_RESEED_CTR);",
          "1000:             && !OSSL_PARAM_set_uint(p, tsan_load(&drbg->reseed_counter)))",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "873: {",
          "874:     const OSSL_PARAM *p;",
          "877:     if (p != NULL && !OSSL_PARAM_get_uint(p, &drbg->reseed_interval))",
          "878:         return 0;",
          "881:     if (p != NULL && !OSSL_PARAM_get_time_t(p, &drbg->reseed_time_interval))",
          "882:         return 0;",
          "883:     return 1;",
          "884: }",
          "",
          "[Removed Lines]",
          "876:     p = OSSL_PARAM_locate_const(params, OSSL_RAND_PARAM_RESEED_REQUESTS);",
          "880:     p = OSSL_PARAM_locate_const(params, OSSL_RAND_PARAM_RESEED_TIME_INTERVAL);",
          "",
          "[Added Lines]",
          "1009:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_RESEED_REQUESTS);",
          "1013:     p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_RESEED_TIME_INTERVAL);",
          "1019: int drbg_set_callbacks(void *vctx, OSSL_INOUT_CALLBACK *get_entropy_fn,",
          "1020:                        OSSL_CALLBACK *cleanup_entropy_fn,",
          "1021:                        OSSL_INOUT_CALLBACK *get_nonce_fn,",
          "1022:                        OSSL_CALLBACK *cleanup_nonce_fn, void *arg)",
          "1023: {",
          "1024:     PROV_DRBG *drbg = vctx;",
          "1026:     if (drbg->state != EVP_RAND_STATE_UNINITIALISED",
          "1027:             || drbg->parent != NULL)",
          "1028:         return 0;",
          "1030:     drbg->get_entropy_fn = get_entropy_fn;",
          "1031:     drbg->cleanup_entropy_fn = cleanup_entropy_fn;",
          "1032:     drbg->get_nonce_fn = get_nonce_fn;",
          "1033:     drbg->cleanup_nonce_fn = cleanup_nonce_fn;",
          "1034:     drbg->callback_arg = arg;",
          "1035:     return 1;",
          "1036: }",
          "",
          "---------------"
        ],
        "providers/implementations/rands/drbg_ctr.c||providers/implementations/rands/drbg_ctr.c": [
          "File: providers/implementations/rands/drbg_ctr.c -> providers/implementations/rands/drbg_ctr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <openssl/crypto.h>",
          "13: #include <openssl/err.h>",
          "14: #include <openssl/rand.h>",
          "15: #include \"crypto/modes.h\"",
          "16: #include \"internal/thread_once.h\"",
          "23: {",
          "24:     unsigned char *p = &ctr->V[0];",
          "25:     u32 n = 16, c = 1;",
          "",
          "[Removed Lines]",
          "17: #include \"rand_local.h\"",
          "22: static void inc_128(RAND_DRBG_CTR *ctr)",
          "",
          "[Added Lines]",
          "15: #include <openssl/aes.h>",
          "19: #include \"prov/implementations.h\"",
          "20: #include \"prov/provider_ctx.h\"",
          "21: #include \"prov/providercommonerr.h\"",
          "22: #include \"drbg_local.h\"",
          "24: static OSSL_OP_rand_newctx_fn drbg_ctr_new_wrapper;",
          "25: static OSSL_OP_rand_freectx_fn drbg_ctr_free;",
          "26: static OSSL_OP_rand_instantiate_fn drbg_ctr_instantiate_wrapper;",
          "27: static OSSL_OP_rand_uninstantiate_fn drbg_ctr_uninstantiate_wrapper;",
          "28: static OSSL_OP_rand_generate_fn drbg_ctr_generate_wrapper;",
          "29: static OSSL_OP_rand_reseed_fn drbg_ctr_reseed_wrapper;",
          "30: static OSSL_OP_rand_settable_ctx_params_fn drbg_ctr_settable_ctx_params;",
          "31: static OSSL_OP_rand_set_ctx_params_fn drbg_ctr_set_ctx_params;",
          "32: static OSSL_OP_rand_gettable_ctx_params_fn drbg_ctr_gettable_ctx_params;",
          "33: static OSSL_OP_rand_get_ctx_params_fn drbg_ctr_get_ctx_params;",
          "34: static OSSL_OP_rand_verify_zeroization_fn drbg_ctr_verify_zeroization;",
          "39: typedef struct rand_drbg_ctr_st {",
          "40:     EVP_CIPHER_CTX *ctx_ecb;",
          "41:     EVP_CIPHER_CTX *ctx_ctr;",
          "42:     EVP_CIPHER_CTX *ctx_df;",
          "43:     EVP_CIPHER *cipher_ecb;",
          "44:     EVP_CIPHER *cipher_ctr;",
          "45:     size_t keylen;",
          "46:     int use_df;",
          "47:     unsigned char K[32];",
          "48:     unsigned char V[16];",
          "50:     unsigned char bltmp[16];",
          "51:     size_t bltmp_pos;",
          "52:     unsigned char KX[48];",
          "53: } PROV_DRBG_CTR;",
          "58: static void inc_128(PROV_DRBG_CTR *ctr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     } while (n);",
          "33: }",
          "36: {",
          "37:     size_t i, n;",
          "",
          "[Removed Lines]",
          "35: static void ctr_XOR(RAND_DRBG_CTR *ctr, const unsigned char *in, size_t inlen)",
          "",
          "[Added Lines]",
          "71: static void ctr_XOR(PROV_DRBG_CTR *ctr, const unsigned char *in, size_t inlen)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:                                 const unsigned char *in, int len)",
          "66: {",
          "67:     int i, outlen = AES_BLOCK_SIZE;",
          "",
          "[Removed Lines]",
          "64: __owur static int ctr_BCC_block(RAND_DRBG_CTR *ctr, unsigned char *out,",
          "",
          "[Added Lines]",
          "100: __owur static int ctr_BCC_block(PROV_DRBG_CTR *ctr, unsigned char *out,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83: {",
          "84:     unsigned char in_tmp[48];",
          "85:     unsigned char num_of_blk = 2;",
          "",
          "[Removed Lines]",
          "82: __owur static int ctr_BCC_blocks(RAND_DRBG_CTR *ctr, const unsigned char *in)",
          "",
          "[Added Lines]",
          "118: __owur static int ctr_BCC_blocks(PROV_DRBG_CTR *ctr, const unsigned char *in)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101: {",
          "102:     unsigned char bltmp[48] = {0};",
          "103:     unsigned char num_of_blk;",
          "",
          "[Removed Lines]",
          "100: __owur static int ctr_BCC_init(RAND_DRBG_CTR *ctr)",
          "",
          "[Added Lines]",
          "136: __owur static int ctr_BCC_init(PROV_DRBG_CTR *ctr)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "116:                                  const unsigned char *in, size_t inlen)",
          "117: {",
          "118:     if (in == NULL || inlen == 0)",
          "",
          "[Removed Lines]",
          "115: __owur static int ctr_BCC_update(RAND_DRBG_CTR *ctr,",
          "",
          "[Added Lines]",
          "151: __owur static int ctr_BCC_update(PROV_DRBG_CTR *ctr,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "147:     return 1;",
          "148: }",
          "151: {",
          "152:     if (ctr->bltmp_pos) {",
          "153:         memset(ctr->bltmp + ctr->bltmp_pos, 0, 16 - ctr->bltmp_pos);",
          "",
          "[Removed Lines]",
          "150: __owur static int ctr_BCC_final(RAND_DRBG_CTR *ctr)",
          "",
          "[Added Lines]",
          "186: __owur static int ctr_BCC_final(PROV_DRBG_CTR *ctr)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "157:     return 1;",
          "158: }",
          "161:                          const unsigned char *in1, size_t in1len,",
          "162:                          const unsigned char *in2, size_t in2len,",
          "163:                          const unsigned char *in3, size_t in3len)",
          "",
          "[Removed Lines]",
          "160: __owur static int ctr_df(RAND_DRBG_CTR *ctr,",
          "",
          "[Added Lines]",
          "196: __owur static int ctr_df(PROV_DRBG_CTR *ctr,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "224:                              const unsigned char *in1, size_t in1len,",
          "225:                              const unsigned char *in2, size_t in2len,",
          "226:                              const unsigned char *nonce, size_t noncelen)",
          "227: {",
          "229:     int outlen = AES_BLOCK_SIZE;",
          "230:     unsigned char V_tmp[48], out[48];",
          "231:     unsigned char len;",
          "",
          "[Removed Lines]",
          "223: __owur static int ctr_update(RAND_DRBG *drbg,",
          "228:     RAND_DRBG_CTR *ctr = &drbg->data.ctr;",
          "",
          "[Added Lines]",
          "259: __owur static int ctr_update(PROV_DRBG *drbg,",
          "264:     PROV_DRBG_CTR *ctr = (PROV_DRBG_CTR *)drbg->data;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "247:     memcpy(ctr->K, out, ctr->keylen);",
          "248:     memcpy(ctr->V, out + ctr->keylen, 16);",
          "252:         if (in1 != NULL || nonce != NULL || in2 != NULL)",
          "253:             if (!ctr_df(ctr, in1, in1len, nonce, noncelen, in2, in2len))",
          "",
          "[Removed Lines]",
          "250:     if ((drbg->flags & RAND_DRBG_FLAG_CTR_NO_DF) == 0) {",
          "",
          "[Added Lines]",
          "286:     if (ctr->use_df) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "266:     return 1;",
          "267: }",
          "273: {",
          "276:     if (entropy == NULL)",
          "277:         return 0;",
          "",
          "[Removed Lines]",
          "269: __owur static int drbg_ctr_instantiate(RAND_DRBG *drbg,",
          "270:                                        const unsigned char *entropy, size_t entropylen,",
          "271:                                        const unsigned char *nonce, size_t noncelen,",
          "272:                                        const unsigned char *pers, size_t perslen)",
          "274:     RAND_DRBG_CTR *ctr = &drbg->data.ctr;",
          "",
          "[Added Lines]",
          "305: static int drbg_ctr_instantiate(PROV_DRBG *drbg,",
          "306:                                 const unsigned char *entropy, size_t entropylen,",
          "307:                                 const unsigned char *nonce, size_t noncelen,",
          "308:                                 const unsigned char *pers, size_t perslen)",
          "310:     PROV_DRBG_CTR *ctr = (PROV_DRBG_CTR *)drbg->data;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "287:     return 1;",
          "288: }",
          "293: {",
          "296:     if (entropy == NULL)",
          "297:         return 0;",
          "",
          "[Removed Lines]",
          "290: __owur static int drbg_ctr_reseed(RAND_DRBG *drbg,",
          "291:                                   const unsigned char *entropy, size_t entropylen,",
          "292:                                   const unsigned char *adin, size_t adinlen)",
          "294:     RAND_DRBG_CTR *ctr = &drbg->data.ctr;",
          "",
          "[Added Lines]",
          "326: static int drbg_ctr_instantiate_wrapper(void *vdrbg, unsigned int strength,",
          "327:                                         int prediction_resistance,",
          "328:                                         const unsigned char *pstr,",
          "329:                                         size_t pstr_len)",
          "330: {",
          "331:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "333:     return PROV_DRBG_instantiate(drbg, strength, prediction_resistance,",
          "334:                                  pstr, pstr_len);",
          "335: }",
          "337: static int drbg_ctr_reseed(PROV_DRBG *drbg,",
          "338:                            const unsigned char *entropy, size_t entropylen,",
          "339:                            const unsigned char *adin, size_t adinlen)",
          "341:     PROV_DRBG_CTR *ctr = (PROV_DRBG_CTR *)drbg->data;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "302:     return 1;",
          "303: }",
          "305: static void ctr96_inc(unsigned char *counter)",
          "306: {",
          "307:     u32 n = 12, c = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352: static int drbg_ctr_reseed_wrapper(void *vdrbg, int prediction_resistance,",
          "353:                                    const unsigned char *ent, size_t ent_len,",
          "354:                                    const unsigned char *adin, size_t adin_len)",
          "355: {",
          "356:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "358:     return PROV_DRBG_reseed(drbg, prediction_resistance, ent, ent_len,",
          "359:                             adin, adin_len);",
          "360: }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "314:     } while (n);",
          "315: }",
          "320: {",
          "322:     unsigned int ctr32, blocks;",
          "323:     int outl, buflen;",
          "",
          "[Removed Lines]",
          "317: __owur static int drbg_ctr_generate(RAND_DRBG *drbg,",
          "318:                                     unsigned char *out, size_t outlen,",
          "319:                                     const unsigned char *adin, size_t adinlen)",
          "321:     RAND_DRBG_CTR *ctr = &drbg->data.ctr;",
          "",
          "[Added Lines]",
          "374: static int drbg_ctr_generate(PROV_DRBG *drbg,",
          "375:                              unsigned char *out, size_t outlen,",
          "376:                              const unsigned char *adin, size_t adinlen)",
          "378:     PROV_DRBG_CTR *ctr = (PROV_DRBG_CTR *)drbg->data;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "328:         if (!ctr_update(drbg, adin, adinlen, NULL, 0, NULL, 0))",
          "329:             return 0;",
          "332:             adin = NULL;",
          "333:             adinlen = 1;",
          "334:         }",
          "",
          "[Removed Lines]",
          "331:         if ((drbg->flags & RAND_DRBG_FLAG_CTR_NO_DF) == 0) {",
          "",
          "[Added Lines]",
          "388:         if (ctr->use_df) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "388:     return 1;",
          "389: }",
          "392: {",
          "400: }",
          "410: {",
          "419:         return 0;",
          "435:     }",
          "444:     ctr->keylen = keylen;",
          "445:     if (ctr->ctx_ecb == NULL)",
          "446:         ctr->ctx_ecb = EVP_CIPHER_CTX_new();",
          "447:     if (ctr->ctx_ctr == NULL)",
          "448:         ctr->ctx_ctr = EVP_CIPHER_CTX_new();",
          "454:         return 0;",
          "472:             return 0;",
          "476:             return 0;",
          "488:         return 0;",
          "503: }",
          "",
          "[Removed Lines]",
          "391: static int drbg_ctr_uninstantiate(RAND_DRBG *drbg)",
          "393:     EVP_CIPHER_CTX_free(drbg->data.ctr.ctx_ecb);",
          "394:     EVP_CIPHER_CTX_free(drbg->data.ctr.ctx_ctr);",
          "395:     EVP_CIPHER_CTX_free(drbg->data.ctr.ctx_df);",
          "396:     EVP_CIPHER_free(drbg->data.ctr.cipher_ecb);",
          "397:     EVP_CIPHER_free(drbg->data.ctr.cipher_ctr);",
          "398:     OPENSSL_cleanse(&drbg->data.ctr, sizeof(drbg->data.ctr));",
          "399:     return 1;",
          "402: static RAND_DRBG_METHOD drbg_ctr_meth = {",
          "403:     drbg_ctr_instantiate,",
          "404:     drbg_ctr_reseed,",
          "405:     drbg_ctr_generate,",
          "406:     drbg_ctr_uninstantiate",
          "407: };",
          "409: int drbg_ctr_init(RAND_DRBG *drbg)",
          "411:     RAND_DRBG_CTR *ctr = &drbg->data.ctr;",
          "412:     size_t keylen;",
          "413:     EVP_CIPHER *cipher_ecb = NULL;",
          "414:     EVP_CIPHER *cipher_ctr = NULL;",
          "416:     switch (drbg->type) {",
          "417:     default:",
          "420:     case NID_aes_128_ctr:",
          "421:         keylen = 16;",
          "422:         cipher_ecb = EVP_CIPHER_fetch(drbg->libctx, \"AES-128-ECB\", \"\");",
          "423:         cipher_ctr = EVP_CIPHER_fetch(drbg->libctx, \"AES-128-CTR\", \"\");",
          "424:         break;",
          "425:     case NID_aes_192_ctr:",
          "426:         keylen = 24;",
          "427:         cipher_ecb = EVP_CIPHER_fetch(drbg->libctx, \"AES-192-ECB\", \"\");",
          "428:         cipher_ctr = EVP_CIPHER_fetch(drbg->libctx, \"AES-192-CTR\", \"\");",
          "429:         break;",
          "430:     case NID_aes_256_ctr:",
          "431:         keylen = 32;",
          "432:         cipher_ecb = EVP_CIPHER_fetch(drbg->libctx, \"AES-256-ECB\", \"\");",
          "433:         cipher_ctr = EVP_CIPHER_fetch(drbg->libctx, \"AES-256-CTR\", \"\");",
          "434:         break;",
          "436:     if (cipher_ecb == NULL || cipher_ctr == NULL)",
          "437:         return 0;",
          "439:     EVP_CIPHER_free(ctr->cipher_ecb);",
          "440:     ctr->cipher_ecb = cipher_ecb;",
          "441:     EVP_CIPHER_free(ctr->cipher_ctr);",
          "442:     ctr->cipher_ctr = cipher_ctr;",
          "449:     if (ctr->ctx_ecb == NULL || ctr->ctx_ctr == NULL",
          "450:         || !EVP_CipherInit_ex(ctr->ctx_ecb,",
          "451:                               ctr->cipher_ecb, NULL, NULL, NULL, 1)",
          "452:         || !EVP_CipherInit_ex(ctr->ctx_ctr,",
          "453:                               ctr->cipher_ctr, NULL, NULL, NULL, 1))",
          "456:     drbg->meth = &drbg_ctr_meth;",
          "457:     drbg->strength = keylen * 8;",
          "458:     drbg->seedlen = keylen + 16;",
          "460:     if ((drbg->flags & RAND_DRBG_FLAG_CTR_NO_DF) == 0) {",
          "462:         static const unsigned char df_key[32] = {",
          "463:             0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,",
          "464:             0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,",
          "465:             0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,",
          "466:             0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f",
          "467:         };",
          "469:         if (ctr->ctx_df == NULL)",
          "470:             ctr->ctx_df = EVP_CIPHER_CTX_new();",
          "471:         if (ctr->ctx_df == NULL)",
          "474:         if (!EVP_CipherInit_ex(ctr->ctx_df,",
          "475:                                ctr->cipher_ecb, NULL, df_key, NULL, 1))",
          "478:         drbg->min_entropylen = ctr->keylen;",
          "479:         drbg->max_entropylen = DRBG_MAX_LENGTH;",
          "480:         drbg->min_noncelen = drbg->min_entropylen / 2;",
          "481:         drbg->max_noncelen = DRBG_MAX_LENGTH;",
          "482:         drbg->max_perslen = DRBG_MAX_LENGTH;",
          "483:         drbg->max_adinlen = DRBG_MAX_LENGTH;",
          "484:     } else {",
          "485: #ifdef FIPS_MODULE",
          "486:         RANDerr(RAND_F_DRBG_CTR_INIT,",
          "487:                 RAND_R_DERIVATION_FUNCTION_MANDATORY_FOR_FIPS);",
          "489: #else",
          "490:         drbg->min_entropylen = drbg->seedlen;",
          "491:         drbg->max_entropylen = drbg->seedlen;",
          "493:         drbg->min_noncelen = 0;",
          "494:         drbg->max_noncelen = 0;",
          "495:         drbg->max_perslen = drbg->seedlen;",
          "496:         drbg->max_adinlen = drbg->seedlen;",
          "497: #endif",
          "498:     }",
          "500:     drbg->max_request = 1 << 16;",
          "502:     return 1;",
          "",
          "[Added Lines]",
          "448: static int drbg_ctr_generate_wrapper",
          "449:     (void *vdrbg, unsigned char *out, size_t outlen,",
          "450:      unsigned int strength, int prediction_resistance,",
          "451:      const unsigned char *adin, size_t adin_len)",
          "453:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "455:     return PROV_DRBG_generate(drbg, out, outlen, strength,",
          "456:                               prediction_resistance, adin, adin_len);",
          "459: static int drbg_ctr_uninstantiate(PROV_DRBG *drbg)",
          "460: {",
          "461:     PROV_DRBG_CTR *ctr = (PROV_DRBG_CTR *)drbg->data;",
          "463:     OPENSSL_cleanse(ctr->K, sizeof(ctr->K));",
          "464:     OPENSSL_cleanse(ctr->V, sizeof(ctr->V));",
          "465:     OPENSSL_cleanse(ctr->bltmp, sizeof(ctr->bltmp));",
          "466:     OPENSSL_cleanse(ctr->KX, sizeof(ctr->KX));",
          "467:     ctr->bltmp_pos = 0;",
          "468:     return PROV_DRBG_uninstantiate(drbg);",
          "469: }",
          "471: static int drbg_ctr_uninstantiate_wrapper(void *vdrbg)",
          "473:     return drbg_ctr_uninstantiate((PROV_DRBG *)vdrbg);",
          "474: }",
          "476: static int drbg_ctr_verify_zeroization(void *vdrbg)",
          "477: {",
          "478:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "479:     PROV_DRBG_CTR *ctr = (PROV_DRBG_CTR *)drbg->data;",
          "481:     PROV_DRBG_VERYIFY_ZEROIZATION(ctr->K);",
          "482:     PROV_DRBG_VERYIFY_ZEROIZATION(ctr->V);",
          "483:     PROV_DRBG_VERYIFY_ZEROIZATION(ctr->bltmp);",
          "484:     PROV_DRBG_VERYIFY_ZEROIZATION(ctr->KX);",
          "485:     if (ctr->bltmp_pos != 0)",
          "487:     return 1;",
          "488: }",
          "490: static int drbg_ctr_init_lengths(PROV_DRBG *drbg)",
          "491: {",
          "492:     PROV_DRBG_CTR *ctr = (PROV_DRBG_CTR *)drbg->data;",
          "493:     int res = 1;",
          "495: #ifdef FIPS_MODULE",
          "496:     if (!ctr->use_df) {",
          "497:         PROVerr(0, RAND_R_DERIVATION_FUNCTION_MANDATORY_FOR_FIPS);",
          "498:         ctr->use_df = 1;",
          "499:         res = 0;",
          "501: #endif",
          "503:     drbg->max_request = 1 << 16;",
          "504:     if (ctr->use_df) {",
          "505:         drbg->min_entropylen = 0;",
          "506:         drbg->max_entropylen = DRBG_MAX_LENGTH;",
          "507:         drbg->min_noncelen = 0;",
          "508:         drbg->max_noncelen = DRBG_MAX_LENGTH;",
          "509:         drbg->max_perslen = DRBG_MAX_LENGTH;",
          "510:         drbg->max_adinlen = DRBG_MAX_LENGTH;",
          "512:         if (ctr->keylen > 0) {",
          "513:             drbg->min_entropylen = ctr->keylen;",
          "514:             drbg->min_noncelen = drbg->min_entropylen / 2;",
          "515:         }",
          "516:     } else {",
          "517:         const size_t len = ctr->keylen > 0 ? drbg->seedlen : DRBG_MAX_LENGTH;",
          "519:         drbg->min_entropylen = len;",
          "520:         drbg->max_entropylen = len;",
          "522:         drbg->min_noncelen = 0;",
          "523:         drbg->max_noncelen = 0;",
          "524:         drbg->max_perslen = len;",
          "525:         drbg->max_adinlen = len;",
          "526:     }",
          "527:     return res;",
          "528: }",
          "530: static int drbg_ctr_init(PROV_DRBG *drbg)",
          "531: {",
          "532:     PROV_DRBG_CTR *ctr = (PROV_DRBG_CTR *)drbg->data;",
          "533:     const size_t keylen = EVP_CIPHER_key_length(ctr->cipher_ctr);",
          "540:     if (ctr->ctx_ecb == NULL || ctr->ctx_ctr == NULL) {",
          "541:         ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE);",
          "542:         goto err;",
          "543:     }",
          "545:     if (ctr->cipher_ctr != NULL) {",
          "546:         if (!EVP_CipherInit_ex(ctr->ctx_ecb,",
          "547:                                ctr->cipher_ecb, NULL, NULL, NULL, 1)",
          "548:             || !EVP_CipherInit_ex(ctr->ctx_ctr,",
          "549:                                   ctr->cipher_ctr, NULL, NULL, NULL, 1)) {",
          "550:             ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_INITIALISE_CIPHERS);",
          "551:             goto err;",
          "552:         }",
          "554:         drbg->strength = keylen * 8;",
          "555:         drbg->seedlen = keylen + 16;",
          "557:         if (ctr->use_df) {",
          "559:             static const unsigned char df_key[32] = {",
          "560:                 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,",
          "561:                 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,",
          "562:                 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,",
          "563:                 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f",
          "564:             };",
          "566:             if (ctr->ctx_df == NULL)",
          "567:                 ctr->ctx_df = EVP_CIPHER_CTX_new();",
          "568:             if (ctr->ctx_df == NULL) {",
          "569:                 ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE);",
          "570:                 goto err;",
          "571:             }",
          "573:             if (!EVP_CipherInit_ex(ctr->ctx_df,",
          "574:                                    ctr->cipher_ecb, NULL, df_key, NULL, 1)) {",
          "575:                 ERR_raise(ERR_LIB_PROV, PROV_R_DERIVATION_FUNCTION_INIT_FAILED);",
          "576:                 goto err;",
          "577:             }",
          "578:         }",
          "579:     }",
          "580:     return drbg_ctr_init_lengths(drbg);",
          "582: err:",
          "583:     EVP_CIPHER_CTX_free(ctr->ctx_ecb);",
          "584:     EVP_CIPHER_CTX_free(ctr->ctx_ctr);",
          "585:     ctr->ctx_ecb = ctr->ctx_ctr = NULL;",
          "586:     return 0;",
          "587: }",
          "589: static int drbg_ctr_new(PROV_DRBG *drbg)",
          "590: {",
          "591:     PROV_DRBG_CTR *ctr;",
          "593:     ctr = OPENSSL_secure_zalloc(sizeof(*ctr));",
          "594:     if (ctr == NULL) {",
          "595:         ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE);",
          "597:     }",
          "599:     ctr->use_df = 1;",
          "600:     drbg->data = ctr;",
          "601:     return drbg_ctr_init_lengths(drbg);",
          "602: }",
          "604: static void *drbg_ctr_new_wrapper(void *provctx, void *parent,",
          "605:                                    const OSSL_DISPATCH *parent_dispatch)",
          "606: {",
          "607:     return prov_rand_drbg_new(provctx, parent, parent_dispatch, &drbg_ctr_new,",
          "608:                               &drbg_ctr_instantiate, &drbg_ctr_uninstantiate,",
          "609:                               &drbg_ctr_reseed, &drbg_ctr_generate);",
          "610: }",
          "612: static void drbg_ctr_free(void *vdrbg)",
          "613: {",
          "614:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "615:     PROV_DRBG_CTR *ctr;",
          "617:     if (drbg != NULL && (ctr = (PROV_DRBG_CTR *)drbg->data) != NULL) {",
          "618:         EVP_CIPHER_CTX_free(ctr->ctx_ecb);",
          "619:         EVP_CIPHER_CTX_free(ctr->ctx_ctr);",
          "620:         EVP_CIPHER_CTX_free(ctr->ctx_df);",
          "621:         EVP_CIPHER_free(ctr->cipher_ecb);",
          "622:         EVP_CIPHER_free(ctr->cipher_ctr);",
          "624:         OPENSSL_secure_clear_free(ctr, sizeof(*ctr));",
          "625:     }",
          "626:     prov_rand_drbg_free(drbg);",
          "627: }",
          "629: static int drbg_ctr_get_ctx_params(void *vdrbg, OSSL_PARAM params[])",
          "630: {",
          "631:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "633:     return drbg_get_ctx_params(drbg, params);",
          "634: }",
          "636: static const OSSL_PARAM *drbg_ctr_gettable_ctx_params(void)",
          "637: {",
          "638:     static const OSSL_PARAM known_gettable_ctx_params[] = {",
          "639:         OSSL_PARAM_DRBG_GETABLE_CTX_COMMON,",
          "640:         OSSL_PARAM_END",
          "641:     };",
          "642:     return known_gettable_ctx_params;",
          "643: }",
          "645: static int drbg_ctr_set_ctx_params(void *vctx, const OSSL_PARAM params[])",
          "646: {",
          "647:     PROV_DRBG *ctx = (PROV_DRBG *)vctx;",
          "648:     PROV_DRBG_CTR *ctr = (PROV_DRBG_CTR *)ctx->data;",
          "649:     OPENSSL_CTX *libctx = PROV_LIBRARY_CONTEXT_OF(ctx->provctx);",
          "650:     const OSSL_PARAM *p;",
          "651:     char *ecb;",
          "652:     const char *propquery = NULL;",
          "653:     int i, cipher_init = 0;",
          "655:     if ((p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_USE_DF)) != NULL",
          "656:             && OSSL_PARAM_get_int(p, &i)) {",
          "658:         ctr->use_df = i != 0;",
          "659:         cipher_init = 1;",
          "660:     }",
          "662:     if ((p = OSSL_PARAM_locate_const(params,",
          "663:                                      OSSL_DRBG_PARAM_PROPERTIES)) != NULL) {",
          "664:         if (p->data_type != OSSL_PARAM_UTF8_STRING)",
          "665:             return 0;",
          "666:         propquery = (const char *)p->data;",
          "667:     }",
          "669:     if ((p = OSSL_PARAM_locate_const(params, OSSL_DRBG_PARAM_CIPHER)) != NULL) {",
          "670:         const char *base = (const char *)p->data;",
          "672:         if (p->data_type != OSSL_PARAM_UTF8_STRING",
          "673:                 || p->data_size < 3)",
          "675:         if (strcasecmp(\"CTR\", base + p->data_size - sizeof(\"CTR\")) != 0) {",
          "676:             ERR_raise(ERR_LIB_PROV, PROV_R_REQUIRE_CTR_MODE_CIPHER);",
          "677:             return 0;",
          "678:         }",
          "679:         if ((ecb = OPENSSL_strdup(base)) == NULL) {",
          "680:             ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE);",
          "682:         }",
          "683:         strcpy(ecb + p->data_size - sizeof(\"ECB\"), \"ECB\");",
          "684:         EVP_CIPHER_free(ctr->cipher_ecb);",
          "685:         EVP_CIPHER_free(ctr->cipher_ctr);",
          "686:         ctr->cipher_ctr = EVP_CIPHER_fetch(libctx, base, propquery);",
          "687:         ctr->cipher_ecb = EVP_CIPHER_fetch(libctx, ecb, propquery);",
          "688:         OPENSSL_free(ecb);",
          "689:         if (ctr->cipher_ctr == NULL || ctr->cipher_ecb == NULL) {",
          "690:             ERR_raise(ERR_LIB_PROV, PROV_R_UNABLE_TO_FIND_CIPHERS);",
          "691:             return 0;",
          "692:         }",
          "693:         cipher_init = 1;",
          "694:     }",
          "696:     if (cipher_init && !drbg_ctr_init(ctx))",
          "699:     return drbg_set_ctx_params(ctx, params);",
          "700: }",
          "702: static const OSSL_PARAM *drbg_ctr_settable_ctx_params(void)",
          "703: {",
          "704:     static const OSSL_PARAM known_settable_ctx_params[] = {",
          "705:         OSSL_PARAM_utf8_string(OSSL_DRBG_PARAM_PROPERTIES, NULL, 0),",
          "706:         OSSL_PARAM_utf8_string(OSSL_DRBG_PARAM_CIPHER, NULL, 0),",
          "707: #ifndef FIPS_MODULE",
          "713:         OSSL_PARAM_int(OSSL_DRBG_PARAM_USE_DF, NULL),",
          "714: #endif",
          "715:         OSSL_PARAM_DRBG_SETABLE_CTX_COMMON,",
          "716:         OSSL_PARAM_END",
          "717:     };",
          "718:     return known_settable_ctx_params;",
          "721: const OSSL_DISPATCH drbg_ctr_functions[] = {",
          "722:     { OSSL_FUNC_RAND_NEWCTX, (void(*)(void))drbg_ctr_new_wrapper },",
          "723:     { OSSL_FUNC_RAND_FREECTX, (void(*)(void))drbg_ctr_free },",
          "724:     { OSSL_FUNC_RAND_INSTANTIATE,",
          "725:       (void(*)(void))drbg_ctr_instantiate_wrapper },",
          "726:     { OSSL_FUNC_RAND_UNINSTANTIATE,",
          "727:       (void(*)(void))drbg_ctr_uninstantiate_wrapper },",
          "728:     { OSSL_FUNC_RAND_GENERATE, (void(*)(void))drbg_ctr_generate_wrapper },",
          "729:     { OSSL_FUNC_RAND_RESEED, (void(*)(void))drbg_ctr_reseed_wrapper },",
          "730:     { OSSL_FUNC_RAND_ENABLE_LOCKING, (void(*)(void))drbg_enable_locking },",
          "731:     { OSSL_FUNC_RAND_LOCK, (void(*)(void))drbg_lock },",
          "732:     { OSSL_FUNC_RAND_UNLOCK, (void(*)(void))drbg_unlock },",
          "733:     { OSSL_FUNC_RAND_SETTABLE_CTX_PARAMS,",
          "734:       (void(*)(void))drbg_ctr_settable_ctx_params },",
          "735:     { OSSL_FUNC_RAND_SET_CTX_PARAMS, (void(*)(void))drbg_ctr_set_ctx_params },",
          "736:     { OSSL_FUNC_RAND_GETTABLE_CTX_PARAMS,",
          "737:       (void(*)(void))drbg_ctr_gettable_ctx_params },",
          "738:     { OSSL_FUNC_RAND_GET_CTX_PARAMS, (void(*)(void))drbg_ctr_get_ctx_params },",
          "739:     { OSSL_FUNC_RAND_SET_CALLBACKS, (void(*)(void))drbg_set_callbacks },",
          "740:     { OSSL_FUNC_RAND_VERIFY_ZEROIZATION,",
          "741:       (void(*)(void))drbg_ctr_verify_zeroization },",
          "742:     { 0, NULL }",
          "743: };",
          "",
          "---------------"
        ],
        "providers/implementations/rands/drbg_hash.c||providers/implementations/rands/drbg_hash.c": [
          "File: providers/implementations/rands/drbg_hash.c -> providers/implementations/rands/drbg_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <assert.h>",
          "11: #include <stdlib.h>",
          "12: #include <string.h>",
          "13: #include <openssl/crypto.h>",
          "14: #include <openssl/err.h>",
          "15: #include <openssl/rand.h>",
          "16: #include \"internal/thread_once.h\"",
          "17: #include \"prov/providercommon.h\"",
          "21: #define HASH_PRNG_SMALL_SEEDLEN   (440/8)",
          "23: #define MAX_BLOCKLEN_USING_SMALL_SEEDLEN (256/8)",
          "24: #define INBYTE_IGNORE ((unsigned char)0xFF)",
          "",
          "[Removed Lines]",
          "18: #include \"rand_local.h\"",
          "",
          "[Added Lines]",
          "13: #include <openssl/sha.h>",
          "17: #include <openssl/core_numbers.h>",
          "20: #include \"prov/provider_ctx.h\"",
          "21: #include \"prov/provider_util.h\"",
          "22: #include \"prov/implementations.h\"",
          "23: #include \"prov/providercommonerr.h\"",
          "24: #include \"drbg_local.h\"",
          "26: static OSSL_OP_rand_newctx_fn drbg_hash_new_wrapper;",
          "27: static OSSL_OP_rand_freectx_fn drbg_hash_free;",
          "28: static OSSL_OP_rand_instantiate_fn drbg_hash_instantiate_wrapper;",
          "29: static OSSL_OP_rand_uninstantiate_fn drbg_hash_uninstantiate_wrapper;",
          "30: static OSSL_OP_rand_generate_fn drbg_hash_generate_wrapper;",
          "31: static OSSL_OP_rand_reseed_fn drbg_hash_reseed_wrapper;",
          "32: static OSSL_OP_rand_settable_ctx_params_fn drbg_hash_settable_ctx_params;",
          "33: static OSSL_OP_rand_set_ctx_params_fn drbg_hash_set_ctx_params;",
          "34: static OSSL_OP_rand_gettable_ctx_params_fn drbg_hash_gettable_ctx_params;",
          "35: static OSSL_OP_rand_get_ctx_params_fn drbg_hash_get_ctx_params;",
          "36: static OSSL_OP_rand_verify_zeroization_fn drbg_hash_verify_zeroization;",
          "39: #define HASH_PRNG_MAX_SEEDLEN    (888/8)",
          "48: typedef struct rand_drbg_hash_st {",
          "49:     PROV_DIGEST digest;",
          "50:     EVP_MD_CTX *ctx;",
          "51:     size_t blocklen;",
          "52:     unsigned char V[HASH_PRNG_MAX_SEEDLEN];",
          "53:     unsigned char C[HASH_PRNG_MAX_SEEDLEN];",
          "55:     unsigned char vtmp[HASH_PRNG_MAX_SEEDLEN];",
          "56: } PROV_DRBG_HASH;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:                    const unsigned char inbyte,",
          "38:                    const unsigned char *in, size_t inlen,",
          "39:                    const unsigned char *in2, size_t in2len,",
          "40:                    const unsigned char *in3, size_t in3len)",
          "41: {",
          "43:     EVP_MD_CTX *ctx = hash->ctx;",
          "44:     unsigned char *vtmp = hash->vtmp;",
          "",
          "[Removed Lines]",
          "36: static int hash_df(RAND_DRBG *drbg, unsigned char *out,",
          "42:     RAND_DRBG_HASH *hash = &drbg->data.hash;",
          "",
          "[Added Lines]",
          "67: static int hash_df(PROV_DRBG *drbg, unsigned char *out,",
          "73:     PROV_DRBG_HASH *hash = (PROV_DRBG_HASH *)drbg->data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:                 && EVP_DigestUpdate(ctx, tmp, tmp_sz)",
          "74:                 && EVP_DigestUpdate(ctx, in, inlen)",
          "75:                 && (in2 == NULL || EVP_DigestUpdate(ctx, in2, in2len))",
          "",
          "[Removed Lines]",
          "72:         if (!(EVP_DigestInit_ex(ctx, hash->md, NULL)",
          "",
          "[Added Lines]",
          "103:         if (!(EVP_DigestInit_ex(ctx, ossl_prov_digest_md(&hash->digest), NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97: }",
          "101:                     const unsigned char in_byte,",
          "102:                     const unsigned char *in1, size_t in1len)",
          "103: {",
          "",
          "[Removed Lines]",
          "100: static int hash_df1(RAND_DRBG *drbg, unsigned char *out,",
          "",
          "[Added Lines]",
          "131: static int hash_df1(PROV_DRBG *drbg, unsigned char *out,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:                      unsigned char *in, size_t inlen)",
          "115: {",
          "116:     size_t i;",
          "",
          "[Removed Lines]",
          "113: static int add_bytes(RAND_DRBG *drbg, unsigned char *dst,",
          "",
          "[Added Lines]",
          "144: static int add_bytes(PROV_DRBG *drbg, unsigned char *dst,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "141: }",
          "145:                          const unsigned char *adin, size_t adinlen)",
          "146: {",
          "148:     EVP_MD_CTX *ctx = hash->ctx;",
          "151:            && EVP_DigestUpdate(ctx, &inbyte, 1)",
          "152:            && EVP_DigestUpdate(ctx, hash->V, drbg->seedlen)",
          "153:            && (adin == NULL || EVP_DigestUpdate(ctx, adin, adinlen))",
          "",
          "[Removed Lines]",
          "144: static int add_hash_to_v(RAND_DRBG *drbg, unsigned char inbyte,",
          "147:     RAND_DRBG_HASH *hash = &drbg->data.hash;",
          "150:     return EVP_DigestInit_ex(ctx, hash->md, NULL)",
          "",
          "[Added Lines]",
          "175: static int add_hash_to_v(PROV_DRBG *drbg, unsigned char inbyte,",
          "178:     PROV_DRBG_HASH *hash = (PROV_DRBG_HASH *)drbg->data;",
          "181:     return EVP_DigestInit_ex(ctx, ossl_prov_digest_md(&hash->digest), NULL)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "177: {",
          "179:     unsigned char one = 1;",
          "181:     if (outlen == 0)",
          "182:         return 1;",
          "183:     memcpy(hash->vtmp, hash->V, drbg->seedlen);",
          "184:     for(;;) {",
          "186:                 || !EVP_DigestUpdate(hash->ctx, hash->vtmp, drbg->seedlen))",
          "187:             return 0;",
          "",
          "[Removed Lines]",
          "176: static int hash_gen(RAND_DRBG *drbg, unsigned char *out, size_t outlen)",
          "178:     RAND_DRBG_HASH *hash = &drbg->data.hash;",
          "185:         if (!EVP_DigestInit_ex(hash->ctx, hash->md, NULL)",
          "",
          "[Added Lines]",
          "207: static int hash_gen(PROV_DRBG *drbg, unsigned char *out, size_t outlen)",
          "209:     PROV_DRBG_HASH *hash = (PROV_DRBG_HASH *)drbg->data;",
          "216:         if (!EVP_DigestInit_ex(hash->ctx, ossl_prov_digest_md(&hash->digest),",
          "217:                                NULL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "217:                                  const unsigned char *ent, size_t ent_len,",
          "218:                                  const unsigned char *nonce, size_t nonce_len,",
          "219:                                  const unsigned char *pstr, size_t pstr_len)",
          "220: {",
          "227:            && hash_df1(drbg, hash->C, 0x00, hash->V, drbg->seedlen);",
          "228: }",
          "",
          "[Removed Lines]",
          "216: static int drbg_hash_instantiate(RAND_DRBG *drbg,",
          "221:     RAND_DRBG_HASH *hash = &drbg->data.hash;",
          "224:     return hash_df(drbg, hash->V, INBYTE_IGNORE,",
          "225:                    ent, ent_len, nonce, nonce_len, pstr, pstr_len)",
          "",
          "[Added Lines]",
          "248: static int drbg_hash_instantiate(PROV_DRBG *drbg,",
          "253:     PROV_DRBG_HASH *hash = (PROV_DRBG_HASH *)drbg->data;",
          "255:     EVP_MD_CTX_free(hash->ctx);",
          "256:     hash->ctx = EVP_MD_CTX_new();",
          "259:     return hash->ctx != NULL",
          "260:            && hash_df(drbg, hash->V, INBYTE_IGNORE,",
          "261:                       ent, ent_len, nonce, nonce_len, pstr, pstr_len)",
          "266: static int drbg_hash_instantiate_wrapper(void *vdrbg, unsigned int strength,",
          "267:                                          int prediction_resistance,",
          "268:                                          const unsigned char *pstr,",
          "269:                                          size_t pstr_len)",
          "270: {",
          "271:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "273:     return PROV_DRBG_instantiate(drbg, strength, prediction_resistance,",
          "274:                                  pstr, pstr_len);",
          "275: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "239:                             const unsigned char *ent, size_t ent_len,",
          "240:                             const unsigned char *adin, size_t adin_len)",
          "241: {",
          "246:     if (!hash_df(drbg, hash->C, 0x01, hash->V, drbg->seedlen, ent, ent_len,",
          "247:                  adin, adin_len))",
          "",
          "[Removed Lines]",
          "238: static int drbg_hash_reseed(RAND_DRBG *drbg,",
          "242:     RAND_DRBG_HASH *hash = &drbg->data.hash;",
          "",
          "[Added Lines]",
          "285: static int drbg_hash_reseed(PROV_DRBG *drbg,",
          "289:     PROV_DRBG_HASH *hash = (PROV_DRBG_HASH *)drbg->data;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "251:     return hash_df1(drbg, hash->C, 0x00, hash->V, drbg->seedlen);",
          "252: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301: static int drbg_hash_reseed_wrapper(void *vdrbg, int prediction_resistance,",
          "302:                                     const unsigned char *ent, size_t ent_len,",
          "303:                                     const unsigned char *adin, size_t adin_len)",
          "304: {",
          "305:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "307:     return PROV_DRBG_reseed(drbg, prediction_resistance, ent, ent_len,",
          "308:                             adin, adin_len);",
          "309: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "264:                               unsigned char *out, size_t outlen,",
          "265:                               const unsigned char *adin, size_t adin_len)",
          "266: {",
          "268:     unsigned char counter[4];",
          "269:     int reseed_counter = drbg->reseed_gen_counter;",
          "",
          "[Removed Lines]",
          "263: static int drbg_hash_generate(RAND_DRBG *drbg,",
          "267:     RAND_DRBG_HASH *hash = &drbg->data.hash;",
          "",
          "[Added Lines]",
          "320: static int drbg_hash_generate(PROV_DRBG *drbg,",
          "324:     PROV_DRBG_HASH *hash = (PROV_DRBG_HASH *)drbg->data;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "273:     counter[2] = (unsigned char)((reseed_counter >> 8) & 0xff);",
          "274:     counter[3] = (unsigned char)(reseed_counter & 0xff);",
          "281:            && hash_gen(drbg, out, outlen)",
          "",
          "[Removed Lines]",
          "276:     return (adin == NULL",
          "278:                 || adin_len == 0",
          "279:                 || add_hash_to_v(drbg, 0x02, adin, adin_len))",
          "",
          "[Added Lines]",
          "333:     return hash->ctx != NULL",
          "334:            && (adin == NULL",
          "336:                || adin_len == 0",
          "337:                || add_hash_to_v(drbg, 0x02, adin, adin_len))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "288:            && add_bytes(drbg, hash->V, counter, 4);",
          "289: }",
          "292: {",
          "297: }",
          "307: {",
          "321:         return 0;",
          "331:     }",
          "360: }",
          "",
          "[Removed Lines]",
          "291: static int drbg_hash_uninstantiate(RAND_DRBG *drbg)",
          "293:     EVP_MD_free(drbg->data.hash.md);",
          "294:     EVP_MD_CTX_free(drbg->data.hash.ctx);",
          "295:     OPENSSL_cleanse(&drbg->data.hash, sizeof(drbg->data.hash));",
          "296:     return 1;",
          "299: static RAND_DRBG_METHOD drbg_hash_meth = {",
          "300:     drbg_hash_instantiate,",
          "301:     drbg_hash_reseed,",
          "302:     drbg_hash_generate,",
          "303:     drbg_hash_uninstantiate",
          "304: };",
          "306: int drbg_hash_init(RAND_DRBG *drbg)",
          "308:     EVP_MD *md;",
          "309:     RAND_DRBG_HASH *hash = &drbg->data.hash;",
          "316:     md = EVP_MD_fetch(drbg->libctx, ossl_prov_util_nid_to_name(drbg->type), \"\");",
          "317:     if (md == NULL)",
          "318:         return 0;",
          "320:     if ((EVP_MD_flags(md) & EVP_MD_FLAG_XOF) != 0)",
          "323:     drbg->meth = &drbg_hash_meth;",
          "325:     if (hash->ctx == NULL) {",
          "326:         hash->ctx = EVP_MD_CTX_new();",
          "327:         if (hash->ctx == NULL) {",
          "328:             EVP_MD_free(md);",
          "329:             return 0;",
          "330:         }",
          "333:     EVP_MD_free(hash->md);",
          "334:     hash->md = md;",
          "337:     hash->blocklen = EVP_MD_size(md);",
          "339:     drbg->strength = 64 * (hash->blocklen >> 3);",
          "340:     if (drbg->strength > 256)",
          "341:         drbg->strength = 256;",
          "342:     if (hash->blocklen > MAX_BLOCKLEN_USING_SMALL_SEEDLEN)",
          "343:         drbg->seedlen = HASH_PRNG_MAX_SEEDLEN;",
          "344:     else",
          "345:         drbg->seedlen = HASH_PRNG_SMALL_SEEDLEN;",
          "347:     drbg->min_entropylen = drbg->strength / 8;",
          "348:     drbg->max_entropylen = DRBG_MAX_LENGTH;",
          "350:     drbg->min_noncelen = drbg->min_entropylen / 2;",
          "351:     drbg->max_noncelen = DRBG_MAX_LENGTH;",
          "353:     drbg->max_perslen = DRBG_MAX_LENGTH;",
          "354:     drbg->max_adinlen = DRBG_MAX_LENGTH;",
          "357:     drbg->max_request = 1 << 16;",
          "359:     return 1;",
          "",
          "[Added Lines]",
          "349: static int drbg_hash_generate_wrapper",
          "350:     (void *vdrbg, unsigned char *out, size_t outlen, unsigned int strength,",
          "351:      int prediction_resistance, const unsigned char *adin, size_t adin_len)",
          "353:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "355:     return PROV_DRBG_generate(drbg, out, outlen, strength,",
          "356:                               prediction_resistance, adin, adin_len);",
          "359: static int drbg_hash_uninstantiate(PROV_DRBG *drbg)",
          "360: {",
          "361:     PROV_DRBG_HASH *hash = (PROV_DRBG_HASH *)drbg->data;",
          "363:     OPENSSL_cleanse(hash->V, sizeof(hash->V));",
          "364:     OPENSSL_cleanse(hash->C, sizeof(hash->C));",
          "365:     OPENSSL_cleanse(hash->vtmp, sizeof(hash->vtmp));",
          "366:     return PROV_DRBG_uninstantiate(drbg);",
          "367: }",
          "369: static int drbg_hash_uninstantiate_wrapper(void *vdrbg)",
          "371:     return drbg_hash_uninstantiate((PROV_DRBG *)vdrbg);",
          "372: }",
          "374: static int drbg_hash_verify_zeroization(void *vdrbg)",
          "375: {",
          "376:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "377:     PROV_DRBG_HASH *hash = (PROV_DRBG_HASH *)drbg->data;",
          "379:     PROV_DRBG_VERYIFY_ZEROIZATION(hash->V);",
          "380:     PROV_DRBG_VERYIFY_ZEROIZATION(hash->C);",
          "381:     PROV_DRBG_VERYIFY_ZEROIZATION(hash->vtmp);",
          "382:     return 1;",
          "383: }",
          "385: static int drbg_hash_new(PROV_DRBG *ctx)",
          "386: {",
          "387:     PROV_DRBG_HASH *hash;",
          "389:     hash = OPENSSL_secure_zalloc(sizeof(*hash));",
          "390:     if (hash == NULL) {",
          "391:         ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE);",
          "393:     }",
          "395:     ctx->data = hash;",
          "396:     ctx->seedlen = HASH_PRNG_MAX_SEEDLEN;",
          "397:     ctx->max_entropylen = DRBG_MAX_LENGTH;",
          "398:     ctx->max_noncelen = DRBG_MAX_LENGTH;",
          "399:     ctx->max_perslen = DRBG_MAX_LENGTH;",
          "400:     ctx->max_adinlen = DRBG_MAX_LENGTH;",
          "403:     ctx->max_request = 1 << 16;",
          "404:     return 1;",
          "405: }",
          "407: static void *drbg_hash_new_wrapper(void *provctx, void *parent,",
          "408:                                    const OSSL_DISPATCH *parent_dispatch)",
          "409: {",
          "410:     return prov_rand_drbg_new(provctx, parent, parent_dispatch, &drbg_hash_new,",
          "411:                               &drbg_hash_instantiate, &drbg_hash_uninstantiate,",
          "412:                               &drbg_hash_reseed, &drbg_hash_generate);",
          "413: }",
          "415: static void drbg_hash_free(void *vdrbg)",
          "416: {",
          "417:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "418:     PROV_DRBG_HASH *hash;",
          "420:     if (drbg != NULL && (hash = (PROV_DRBG_HASH *)drbg->data) != NULL) {",
          "421:         EVP_MD_CTX_free(hash->ctx);",
          "422:         ossl_prov_digest_reset(&hash->digest);",
          "423:         OPENSSL_secure_clear_free(hash, sizeof(*hash));",
          "425:     prov_rand_drbg_free(drbg);",
          "426: }",
          "428: static int drbg_hash_get_ctx_params(void *vdrbg, OSSL_PARAM params[])",
          "429: {",
          "430:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "432:     return drbg_get_ctx_params(drbg, params);",
          "433: }",
          "435: static const OSSL_PARAM *drbg_hash_gettable_ctx_params(void)",
          "436: {",
          "437:     static const OSSL_PARAM known_gettable_ctx_params[] = {",
          "438:         OSSL_PARAM_DRBG_GETABLE_CTX_COMMON,",
          "439:         OSSL_PARAM_END",
          "440:     };",
          "441:     return known_gettable_ctx_params;",
          "442: }",
          "444: static int drbg_hash_set_ctx_params(void *vctx, const OSSL_PARAM params[])",
          "445: {",
          "446:     PROV_DRBG *ctx = (PROV_DRBG *)vctx;",
          "447:     PROV_DRBG_HASH *hash = (PROV_DRBG_HASH *)ctx->data;",
          "448:     OPENSSL_CTX *libctx = PROV_LIBRARY_CONTEXT_OF(ctx->provctx);",
          "449:     const EVP_MD *md;",
          "451:     if (!ossl_prov_digest_load_from_params(&hash->digest, params, libctx))",
          "452:         return 0;",
          "454:     md = ossl_prov_digest_md(&hash->digest);",
          "455:     if (md != NULL) {",
          "456:         if ((EVP_MD_flags(md) & EVP_MD_FLAG_XOF) != 0) {",
          "457:             ERR_raise(ERR_LIB_PROV, PROV_R_XOF_DIGESTS_NOT_ALLOWED);",
          "458:             return 0;",
          "459:         }",
          "462:         hash->blocklen = EVP_MD_size(md);",
          "464:         ctx->strength = 64 * (hash->blocklen >> 3);",
          "465:         if (ctx->strength > 256)",
          "466:             ctx->strength = 256;",
          "467:         if (hash->blocklen > MAX_BLOCKLEN_USING_SMALL_SEEDLEN)",
          "468:             ctx->seedlen = HASH_PRNG_MAX_SEEDLEN;",
          "469:         else",
          "470:             ctx->seedlen = HASH_PRNG_SMALL_SEEDLEN;",
          "472:         ctx->min_entropylen = ctx->strength / 8;",
          "473:         ctx->min_noncelen = ctx->min_entropylen / 2;",
          "474:     }",
          "476:     return drbg_set_ctx_params(ctx, params);",
          "477: }",
          "479: static const OSSL_PARAM *drbg_hash_settable_ctx_params(void)",
          "480: {",
          "481:     static const OSSL_PARAM known_settable_ctx_params[] = {",
          "482:         OSSL_PARAM_utf8_string(OSSL_DRBG_PARAM_PROPERTIES, NULL, 0),",
          "483:         OSSL_PARAM_utf8_string(OSSL_DRBG_PARAM_DIGEST, NULL, 0),",
          "484:         OSSL_PARAM_DRBG_SETABLE_CTX_COMMON,",
          "485:         OSSL_PARAM_END",
          "486:     };",
          "487:     return known_settable_ctx_params;",
          "490: const OSSL_DISPATCH drbg_hash_functions[] = {",
          "491:     { OSSL_FUNC_RAND_NEWCTX, (void(*)(void))drbg_hash_new_wrapper },",
          "492:     { OSSL_FUNC_RAND_FREECTX, (void(*)(void))drbg_hash_free },",
          "493:     { OSSL_FUNC_RAND_INSTANTIATE,",
          "494:       (void(*)(void))drbg_hash_instantiate_wrapper },",
          "495:     { OSSL_FUNC_RAND_UNINSTANTIATE,",
          "496:       (void(*)(void))drbg_hash_uninstantiate_wrapper },",
          "497:     { OSSL_FUNC_RAND_GENERATE, (void(*)(void))drbg_hash_generate_wrapper },",
          "498:     { OSSL_FUNC_RAND_RESEED, (void(*)(void))drbg_hash_reseed_wrapper },",
          "499:     { OSSL_FUNC_RAND_ENABLE_LOCKING, (void(*)(void))drbg_enable_locking },",
          "500:     { OSSL_FUNC_RAND_LOCK, (void(*)(void))drbg_lock },",
          "501:     { OSSL_FUNC_RAND_UNLOCK, (void(*)(void))drbg_unlock },",
          "502:     { OSSL_FUNC_RAND_SETTABLE_CTX_PARAMS,",
          "503:       (void(*)(void))drbg_hash_settable_ctx_params },",
          "504:     { OSSL_FUNC_RAND_SET_CTX_PARAMS, (void(*)(void))drbg_hash_set_ctx_params },",
          "505:     { OSSL_FUNC_RAND_GETTABLE_CTX_PARAMS,",
          "506:       (void(*)(void))drbg_hash_gettable_ctx_params },",
          "507:     { OSSL_FUNC_RAND_GET_CTX_PARAMS, (void(*)(void))drbg_hash_get_ctx_params },",
          "508:     { OSSL_FUNC_RAND_SET_CALLBACKS, (void(*)(void))drbg_set_callbacks },",
          "509:     { OSSL_FUNC_RAND_VERIFY_ZEROIZATION,",
          "510:       (void(*)(void))drbg_hash_verify_zeroization },",
          "511:     { 0, NULL }",
          "512: };",
          "",
          "---------------"
        ],
        "providers/implementations/rands/drbg_hmac.c||providers/implementations/rands/drbg_hmac.c": [
          "File: providers/implementations/rands/drbg_hmac.c -> providers/implementations/rands/drbg_hmac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <stdlib.h>",
          "17: #include <string.h>",
          "18: #include <openssl/crypto.h>",
          "19: #include <openssl/err.h>",
          "20: #include <openssl/rand.h>",
          "21: #include \"internal/thread_once.h\"",
          "22: #include \"prov/providercommon.h\"",
          "",
          "[Removed Lines]",
          "14: #include \"internal/deprecated.h\"",
          "23: #include \"rand_local.h\"",
          "",
          "[Added Lines]",
          "15: #include \"prov/provider_util.h\"",
          "18: #include \"prov/providercommonerr.h\"",
          "19: #include \"prov/implementations.h\"",
          "20: #include \"prov/provider_ctx.h\"",
          "21: #include \"drbg_local.h\"",
          "23: static OSSL_OP_rand_newctx_fn drbg_hmac_new_wrapper;",
          "24: static OSSL_OP_rand_freectx_fn drbg_hmac_free;",
          "25: static OSSL_OP_rand_instantiate_fn drbg_hmac_instantiate_wrapper;",
          "26: static OSSL_OP_rand_uninstantiate_fn drbg_hmac_uninstantiate_wrapper;",
          "27: static OSSL_OP_rand_generate_fn drbg_hmac_generate_wrapper;",
          "28: static OSSL_OP_rand_reseed_fn drbg_hmac_reseed_wrapper;",
          "29: static OSSL_OP_rand_settable_ctx_params_fn drbg_hmac_settable_ctx_params;",
          "30: static OSSL_OP_rand_set_ctx_params_fn drbg_hmac_set_ctx_params;",
          "31: static OSSL_OP_rand_gettable_ctx_params_fn drbg_hmac_gettable_ctx_params;",
          "32: static OSSL_OP_rand_get_ctx_params_fn drbg_hmac_get_ctx_params;",
          "33: static OSSL_OP_rand_verify_zeroization_fn drbg_hmac_verify_zeroization;",
          "35: typedef struct rand_drbg_hmac_st {",
          "38:     size_t blocklen;",
          "39:     unsigned char K[EVP_MAX_MD_SIZE];",
          "40:     unsigned char V[EVP_MAX_MD_SIZE];",
          "41: } PROV_DRBG_HMAC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:                    const unsigned char *in1, size_t in1len,",
          "41:                    const unsigned char *in2, size_t in2len,",
          "42:                    const unsigned char *in3, size_t in3len)",
          "43: {",
          "58: }",
          "",
          "[Removed Lines]",
          "39: static int do_hmac(RAND_DRBG_HMAC *hmac, unsigned char inbyte,",
          "44:     HMAC_CTX *ctx = hmac->ctx;",
          "46:     return HMAC_Init_ex(ctx, hmac->K, hmac->blocklen, hmac->md, NULL)",
          "48:            && HMAC_Update(ctx, hmac->V, hmac->blocklen)",
          "49:            && HMAC_Update(ctx, &inbyte, 1)",
          "50:            && (in1 == NULL || in1len == 0 || HMAC_Update(ctx, in1, in1len))",
          "51:            && (in2 == NULL || in2len == 0 || HMAC_Update(ctx, in2, in2len))",
          "52:            && (in3 == NULL || in3len == 0 || HMAC_Update(ctx, in3, in3len))",
          "53:            && HMAC_Final(ctx, hmac->K, NULL)",
          "55:            && HMAC_Init_ex(ctx, hmac->K, hmac->blocklen, hmac->md, NULL)",
          "56:            && HMAC_Update(ctx, hmac->V, hmac->blocklen)",
          "57:            && HMAC_Final(ctx, hmac->V, NULL);",
          "",
          "[Added Lines]",
          "57: static int do_hmac(PROV_DRBG_HMAC *hmac, unsigned char inbyte,",
          "62:     EVP_MAC_CTX *ctx = hmac->ctx;",
          "63:     OSSL_PARAM params[2] = { OSSL_PARAM_END, OSSL_PARAM_END };",
          "66:                                                 hmac->blocklen);",
          "67:     if (!EVP_MAC_set_ctx_params(ctx, params)",
          "68:             || !EVP_MAC_init(ctx)",
          "70:             || !EVP_MAC_update(ctx, hmac->V, hmac->blocklen)",
          "71:             || !EVP_MAC_update(ctx, &inbyte, 1)",
          "72:             || !(in1 == NULL || in1len == 0 || EVP_MAC_update(ctx, in1, in1len))",
          "73:             || !(in2 == NULL || in2len == 0 || EVP_MAC_update(ctx, in2, in2len))",
          "74:             || !(in3 == NULL || in3len == 0 || EVP_MAC_update(ctx, in3, in3len))",
          "75:             || !EVP_MAC_final(ctx, hmac->K, NULL, sizeof(hmac->K)))",
          "76:         return 0;",
          "80:                                                 hmac->blocklen);",
          "81:     return EVP_MAC_set_ctx_params(ctx, params)",
          "82:            && EVP_MAC_init(ctx)",
          "83:            && EVP_MAC_update(ctx, hmac->V, hmac->blocklen)",
          "84:            && EVP_MAC_final(ctx, hmac->V, NULL, sizeof(hmac->V));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:                             const unsigned char *in1, size_t in1len,",
          "76:                             const unsigned char *in2, size_t in2len,",
          "77:                             const unsigned char *in3, size_t in3len)",
          "78: {",
          "82:     if (!do_hmac(hmac, 0x00, in1, in1len, in2, in2len, in3, in3len))",
          "",
          "[Removed Lines]",
          "74: static int drbg_hmac_update(RAND_DRBG *drbg,",
          "79:     RAND_DRBG_HMAC *hmac = &drbg->data.hmac;",
          "",
          "[Added Lines]",
          "101: static int drbg_hmac_update(PROV_DRBG *drbg,",
          "106:     PROV_DRBG_HMAC *hmac = (PROV_DRBG_HMAC *)drbg->data;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:                                  const unsigned char *ent, size_t ent_len,",
          "104:                                  const unsigned char *nonce, size_t nonce_len,",
          "105:                                  const unsigned char *pstr, size_t pstr_len)",
          "106: {",
          "110:     memset(hmac->K, 0x00, hmac->blocklen);",
          "",
          "[Removed Lines]",
          "102: static int drbg_hmac_instantiate(RAND_DRBG *drbg,",
          "107:     RAND_DRBG_HMAC *hmac = &drbg->data.hmac;",
          "",
          "[Added Lines]",
          "129: static int drbg_hmac_instantiate(PROV_DRBG *drbg,",
          "134:     PROV_DRBG_HMAC *hmac = (PROV_DRBG_HMAC *)drbg->data;",
          "136:     if (hmac->ctx == NULL) {",
          "137:         ERR_raise(ERR_LIB_PROV, PROV_R_MISSING_MAC);",
          "138:         return 0;",
          "139:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:                             pstr_len);",
          "116: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: static int drbg_hmac_instantiate_wrapper(void *vdrbg, unsigned int strength,",
          "151:                                          int prediction_resistance,",
          "152:                                          const unsigned char *pstr,",
          "153:                                          size_t pstr_len)",
          "154: {",
          "155:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "157:     return PROV_DRBG_instantiate(drbg, strength, prediction_resistance,",
          "158:                                  pstr, pstr_len);",
          "159: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "129:                             const unsigned char *ent, size_t ent_len,",
          "130:                             const unsigned char *adin, size_t adin_len)",
          "131: {",
          "",
          "[Removed Lines]",
          "128: static int drbg_hmac_reseed(RAND_DRBG *drbg,",
          "",
          "[Added Lines]",
          "171: static int drbg_hmac_reseed(PROV_DRBG *drbg,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "133:     return drbg_hmac_update(drbg, ent, ent_len, adin, adin_len, NULL, 0);",
          "134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: static int drbg_hmac_reseed_wrapper(void *vdrbg, int prediction_resistance,",
          "180:                                     const unsigned char *ent, size_t ent_len,",
          "181:                                     const unsigned char *adin, size_t adin_len)",
          "182: {",
          "183:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "185:     return PROV_DRBG_reseed(drbg, prediction_resistance, ent, ent_len,",
          "186:                             adin, adin_len);",
          "187: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "146:                               unsigned char *out, size_t outlen,",
          "147:                               const unsigned char *adin, size_t adin_len)",
          "148: {",
          "151:     const unsigned char *temp = hmac->V;",
          "154:     if (adin != NULL",
          "",
          "[Removed Lines]",
          "145: static int drbg_hmac_generate(RAND_DRBG *drbg,",
          "149:     RAND_DRBG_HMAC *hmac = &drbg->data.hmac;",
          "150:     HMAC_CTX *ctx = hmac->ctx;",
          "",
          "[Added Lines]",
          "198: static int drbg_hmac_generate(PROV_DRBG *drbg,",
          "202:     PROV_DRBG_HMAC *hmac = (PROV_DRBG_HMAC *)drbg->data;",
          "203:     EVP_MAC_CTX *ctx = hmac->ctx;",
          "205:     OSSL_PARAM params[2] = { OSSL_PARAM_END, OSSL_PARAM_END };",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "166:     for (;;) {",
          "169:             return 0;",
          "171:         if (outlen > hmac->blocklen) {",
          "173:                 return 0;",
          "174:             temp = out;",
          "175:         } else {",
          "177:                 return 0;",
          "178:             memcpy(out, hmac->V, outlen);",
          "179:             break;",
          "",
          "[Removed Lines]",
          "167:         if (!HMAC_Init_ex(ctx, hmac->K, hmac->blocklen, hmac->md, NULL)",
          "168:                 || !HMAC_Update(ctx, temp, hmac->blocklen))",
          "172:             if (!HMAC_Final(ctx, out, NULL))",
          "176:             if (!HMAC_Final(ctx, hmac->V, NULL))",
          "",
          "[Added Lines]",
          "222:                                                     hmac->K, hmac->blocklen);",
          "223:         if (!EVP_MAC_set_ctx_params(ctx, params)",
          "224:             || !EVP_MAC_init(ctx)",
          "225:             || !EVP_MAC_update(ctx, temp, hmac->blocklen))",
          "229:             if (!EVP_MAC_final(ctx, out, NULL, outlen))",
          "233:             if (!EVP_MAC_final(ctx, hmac->V, NULL, sizeof(hmac->V)))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "188:     return 1;",
          "189: }",
          "192: {",
          "197: }",
          "207: {",
          "231:     }",
          "244:     drbg->max_entropylen = DRBG_MAX_LENGTH;",
          "247:     drbg->max_noncelen = DRBG_MAX_LENGTH;",
          "249:     drbg->max_perslen = DRBG_MAX_LENGTH;",
          "250:     drbg->max_adinlen = DRBG_MAX_LENGTH;",
          "253:     drbg->max_request = 1 << 16;",
          "255:     return 1;",
          "256: }",
          "",
          "[Removed Lines]",
          "191: static int drbg_hmac_uninstantiate(RAND_DRBG *drbg)",
          "193:     EVP_MD_free(drbg->data.hmac.md);",
          "194:     HMAC_CTX_free(drbg->data.hmac.ctx);",
          "195:     OPENSSL_cleanse(&drbg->data.hmac, sizeof(drbg->data.hmac));",
          "196:     return 1;",
          "199: static RAND_DRBG_METHOD drbg_hmac_meth = {",
          "200:     drbg_hmac_instantiate,",
          "201:     drbg_hmac_reseed,",
          "202:     drbg_hmac_generate,",
          "203:     drbg_hmac_uninstantiate",
          "204: };",
          "206: int drbg_hmac_init(RAND_DRBG *drbg)",
          "208:     EVP_MD *md = NULL;",
          "209:     RAND_DRBG_HMAC *hmac = &drbg->data.hmac;",
          "216:     md = EVP_MD_fetch(drbg->libctx, ossl_prov_util_nid_to_name(drbg->type), \"\");",
          "217:     if (md == NULL)",
          "218:         return 0;",
          "220:     if ((EVP_MD_flags(md) & EVP_MD_FLAG_XOF) != 0)",
          "221:         return 0;",
          "223:     drbg->meth = &drbg_hmac_meth;",
          "225:     if (hmac->ctx == NULL) {",
          "226:         hmac->ctx = HMAC_CTX_new();",
          "227:         if (hmac->ctx == NULL) {",
          "228:             EVP_MD_free(md);",
          "229:             return 0;",
          "230:         }",
          "234:     EVP_MD_free(hmac->md);",
          "235:     hmac->md = md;",
          "236:     hmac->blocklen = EVP_MD_size(md);",
          "238:     drbg->strength = 64 * (int)(hmac->blocklen >> 3);",
          "239:     if (drbg->strength > 256)",
          "240:         drbg->strength = 256;",
          "241:     drbg->seedlen = hmac->blocklen;",
          "243:     drbg->min_entropylen = drbg->strength / 8;",
          "246:     drbg->min_noncelen = drbg->min_entropylen / 2;",
          "",
          "[Added Lines]",
          "248: static int drbg_hmac_generate_wrapper",
          "249:     (void *vdrbg, unsigned char *out, size_t outlen, unsigned int strength,",
          "250:      int prediction_resistance, const unsigned char *adin, size_t adin_len)",
          "252:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "254:     return PROV_DRBG_generate(drbg, out, outlen, strength,",
          "255:                               prediction_resistance, adin, adin_len);",
          "258: static int drbg_hmac_uninstantiate(PROV_DRBG *drbg)",
          "259: {",
          "260:     PROV_DRBG_HMAC *hmac = (PROV_DRBG_HMAC *)drbg->data;",
          "262:     OPENSSL_cleanse(hmac->K, sizeof(hmac->K));",
          "263:     OPENSSL_cleanse(hmac->V, sizeof(hmac->V));",
          "264:     return PROV_DRBG_uninstantiate(drbg);",
          "265: }",
          "267: static int drbg_hmac_uninstantiate_wrapper(void *vdrbg)",
          "269:     return drbg_hmac_uninstantiate((PROV_DRBG *)vdrbg);",
          "270: }",
          "272: static int drbg_hmac_verify_zeroization(void *vdrbg)",
          "273: {",
          "274:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "275:     PROV_DRBG_HMAC *hmac = (PROV_DRBG_HMAC *)drbg->data;",
          "277:     PROV_DRBG_VERYIFY_ZEROIZATION(hmac->K);",
          "278:     PROV_DRBG_VERYIFY_ZEROIZATION(hmac->V);",
          "279:     return 1;",
          "280: }",
          "282: static int drbg_hmac_new(PROV_DRBG *drbg)",
          "283: {",
          "284:     PROV_DRBG_HMAC *hmac;",
          "286:     hmac = OPENSSL_secure_zalloc(sizeof(*hmac));",
          "287:     if (hmac == NULL) {",
          "288:         ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE);",
          "289:         return 0;",
          "292:     drbg->data = hmac;",
          "304: static void *drbg_hmac_new_wrapper(void *provctx, void *parent,",
          "305:                                    const OSSL_DISPATCH *parent_dispatch)",
          "306: {",
          "307:     return prov_rand_drbg_new(provctx, parent, parent_dispatch, &drbg_hmac_new,",
          "308:                               &drbg_hmac_instantiate, &drbg_hmac_uninstantiate,",
          "309:                               &drbg_hmac_reseed, &drbg_hmac_generate);",
          "310: }",
          "312: static void drbg_hmac_free(void *vdrbg)",
          "313: {",
          "314:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "315:     PROV_DRBG_HMAC *hmac;",
          "317:     if (drbg != NULL && (hmac = (PROV_DRBG_HMAC *)drbg->data) != NULL) {",
          "318:         EVP_MAC_free_ctx(hmac->ctx);",
          "319:         ossl_prov_digest_reset(&hmac->digest);",
          "320:         OPENSSL_secure_clear_free(hmac, sizeof(*hmac));",
          "321:     }",
          "322:     prov_rand_drbg_free(drbg);",
          "323: }",
          "325: static int drbg_hmac_get_ctx_params(void *vdrbg, OSSL_PARAM params[])",
          "326: {",
          "327:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "329:     return drbg_get_ctx_params(drbg, params);",
          "330: }",
          "332: static const OSSL_PARAM *drbg_hmac_gettable_ctx_params(void)",
          "333: {",
          "334:     static const OSSL_PARAM known_gettable_ctx_params[] = {",
          "335:         OSSL_PARAM_DRBG_GETABLE_CTX_COMMON,",
          "336:         OSSL_PARAM_END",
          "337:     };",
          "338:     return known_gettable_ctx_params;",
          "339: }",
          "341: static int drbg_hmac_set_ctx_params(void *vctx, const OSSL_PARAM params[])",
          "342: {",
          "343:     PROV_DRBG *ctx = (PROV_DRBG *)vctx;",
          "344:     PROV_DRBG_HMAC *hmac = (PROV_DRBG_HMAC *)ctx->data;",
          "345:     OPENSSL_CTX *libctx = PROV_LIBRARY_CONTEXT_OF(ctx->provctx);",
          "346:     const EVP_MD *md;",
          "348:     if (!ossl_prov_digest_load_from_params(&hmac->digest, params, libctx))",
          "349:         return 0;",
          "356:     md = ossl_prov_digest_md(&hmac->digest);",
          "357:     if (md != NULL && (EVP_MD_flags(md) & EVP_MD_FLAG_XOF) != 0) {",
          "358:         ERR_raise(ERR_LIB_PROV, PROV_R_XOF_DIGESTS_NOT_ALLOWED);",
          "359:         return 0;",
          "360:     }",
          "362:     if (!ossl_prov_macctx_load_from_params(&hmac->ctx, params,",
          "363:                                            NULL, NULL, NULL, libctx))",
          "364:         return 0;",
          "366:     if (hmac->ctx != NULL) {",
          "368:         hmac->blocklen = EVP_MD_size(md);",
          "370:         ctx->strength = 64 * (int)(hmac->blocklen >> 3);",
          "371:         if (ctx->strength > 256)",
          "372:             ctx->strength = 256;",
          "373:         ctx->seedlen = hmac->blocklen;",
          "374:         ctx->min_entropylen = ctx->strength / 8;",
          "375:         ctx->min_noncelen = ctx->min_entropylen / 2;",
          "376:     }",
          "378:     return drbg_set_ctx_params(ctx, params);",
          "379: }",
          "381: static const OSSL_PARAM *drbg_hmac_settable_ctx_params(void)",
          "382: {",
          "383:     static const OSSL_PARAM known_settable_ctx_params[] = {",
          "384:         OSSL_PARAM_utf8_string(OSSL_DRBG_PARAM_PROPERTIES, NULL, 0),",
          "385:         OSSL_PARAM_utf8_string(OSSL_DRBG_PARAM_DIGEST, NULL, 0),",
          "386:         OSSL_PARAM_utf8_string(OSSL_DRBG_PARAM_MAC, NULL, 0),",
          "387:         OSSL_PARAM_DRBG_SETABLE_CTX_COMMON,",
          "388:         OSSL_PARAM_END",
          "389:     };",
          "390:     return known_settable_ctx_params;",
          "391: }",
          "393: const OSSL_DISPATCH drbg_hmac_functions[] = {",
          "394:     { OSSL_FUNC_RAND_NEWCTX, (void(*)(void))drbg_hmac_new_wrapper },",
          "395:     { OSSL_FUNC_RAND_FREECTX, (void(*)(void))drbg_hmac_free },",
          "396:     { OSSL_FUNC_RAND_INSTANTIATE,",
          "397:       (void(*)(void))drbg_hmac_instantiate_wrapper },",
          "398:     { OSSL_FUNC_RAND_UNINSTANTIATE,",
          "399:       (void(*)(void))drbg_hmac_uninstantiate_wrapper },",
          "400:     { OSSL_FUNC_RAND_GENERATE, (void(*)(void))drbg_hmac_generate_wrapper },",
          "401:     { OSSL_FUNC_RAND_RESEED, (void(*)(void))drbg_hmac_reseed_wrapper },",
          "402:     { OSSL_FUNC_RAND_ENABLE_LOCKING, (void(*)(void))drbg_enable_locking },",
          "403:     { OSSL_FUNC_RAND_LOCK, (void(*)(void))drbg_lock },",
          "404:     { OSSL_FUNC_RAND_UNLOCK, (void(*)(void))drbg_unlock },",
          "405:     { OSSL_FUNC_RAND_SETTABLE_CTX_PARAMS,",
          "406:       (void(*)(void))drbg_hmac_settable_ctx_params },",
          "407:     { OSSL_FUNC_RAND_SET_CTX_PARAMS, (void(*)(void))drbg_hmac_set_ctx_params },",
          "408:     { OSSL_FUNC_RAND_GETTABLE_CTX_PARAMS,",
          "409:       (void(*)(void))drbg_hmac_gettable_ctx_params },",
          "410:     { OSSL_FUNC_RAND_GET_CTX_PARAMS, (void(*)(void))drbg_hmac_get_ctx_params },",
          "411:     { OSSL_FUNC_RAND_SET_CALLBACKS, (void(*)(void))drbg_set_callbacks },",
          "412:     { OSSL_FUNC_RAND_VERIFY_ZEROIZATION,",
          "413:       (void(*)(void))drbg_hmac_verify_zeroization },",
          "414:     { 0, NULL }",
          "415: };",
          "",
          "---------------"
        ],
        "providers/implementations/rands/drbg_local.h||providers/implementations/rands/drbg_local.h": [
          "File: providers/implementations/rands/drbg_local.h -> providers/implementations/rands/drbg_local.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # include <openssl/core_names.h>",
          "16: # include <openssl/params.h>",
          "17: # include \"internal/tsan_assist.h\"",
          "19: # include \"internal/numbers.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: # include \"internal/nelem.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "29: # define MASTER_RESEED_INTERVAL                  (1 << 8)",
          "30: # define SLAVE_RESEED_INTERVAL                   (1 << 16)",
          "",
          "[Added Lines]",
          "29: # define RESEED_INTERVAL                         (1 << 8)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: } DRBG_STATUS;",
          "106: struct prov_drbg_st {",
          "107:     CRYPTO_RWLOCK *lock;",
          "110:     void *parent;",
          "111:     const OSSL_DISPATCH *parent_dispatch;",
          "",
          "[Removed Lines]",
          "75: typedef struct rand_drbg_hmac_st {",
          "76:     EVP_MD *md;",
          "77:     HMAC_CTX *ctx;",
          "78:     size_t blocklen;",
          "79:     unsigned char K[EVP_MAX_MD_SIZE];",
          "80:     unsigned char V[EVP_MAX_MD_SIZE];",
          "81: } PROV_DRBG_HMAC;",
          "86: typedef struct rand_drbg_ctr_st {",
          "87:     EVP_CIPHER_CTX *ctx_ecb;",
          "88:     EVP_CIPHER_CTX *ctx_ctr;",
          "89:     EVP_CIPHER_CTX *ctx_df;",
          "90:     EVP_CIPHER *cipher_ecb;",
          "91:     EVP_CIPHER *cipher_ctr;",
          "92:     size_t keylen;",
          "93:     unsigned char K[32];",
          "94:     unsigned char V[16];",
          "96:     unsigned char bltmp[16];",
          "97:     size_t bltmp_pos;",
          "98:     unsigned char KX[48];",
          "99: } PROV_DRBG_CTR;",
          "109:     OPENSSL_CTX *libctx;",
          "",
          "[Added Lines]",
          "74:     void *provctx;",
          "77:     int (*instantiate)(PROV_DRBG *drbg,",
          "78:                        const unsigned char *entropy, size_t entropylen,",
          "79:                        const unsigned char *nonce, size_t noncelen,",
          "80:                        const unsigned char *pers, size_t perslen);",
          "81:     int (*uninstantiate)(PROV_DRBG *ctx);",
          "82:     int (*reseed)(PROV_DRBG *drbg, const unsigned char *ent, size_t ent_len,",
          "83:                   const unsigned char *adin, size_t adin_len);",
          "84:     int (*generate)(PROV_DRBG *, unsigned char *out, size_t outlen,",
          "85:                     const unsigned char *adin, size_t adin_len);",
          "89:     OSSL_OP_rand_enable_locking_fn *parent_enable_locking;",
          "90:     OSSL_OP_rand_lock_fn *parent_lock;",
          "91:     OSSL_OP_rand_unlock_fn *parent_unlock;",
          "92:     OSSL_OP_rand_get_ctx_params_fn *parent_get_ctx_params;",
          "93:     OSSL_OP_rand_generate_fn *parent_generate;",
          "94:     OSSL_OP_rand_nonce_fn *parent_nonce;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:     size_t max_request;",
          "159:     size_t min_entropylen, max_entropylen;",
          "160:     size_t min_noncelen, max_noncelen;",
          "",
          "[Removed Lines]",
          "157:     int strength;",
          "",
          "[Added Lines]",
          "142:     unsigned int strength;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "192:     unsigned int reseed_next_counter;",
          "194:     size_t seedlen;",
          "195:     DRBG_STATUS state;",
          "197:     void *data;",
          "203: };",
          "216:                           int prediction_resistance,",
          "225: int PROV_DRBG_reseed(PROV_DRBG *drbg, int prediction_resistance,",
          "226:                      const unsigned char *ent, size_t ent_len,",
          "232: int PROV_DRBG_generate(PROV_DRBG *drbg, unsigned char *out, size_t outlen,",
          "243: OSSL_OP_rand_enable_locking_fn drbg_enable_locking;",
          "244: OSSL_OP_rand_lock_fn drbg_lock;",
          "245: OSSL_OP_rand_unlock_fn drbg_unlock;",
          "247: int drbg_get_ctx_params(PROV_DRBG *drbg, OSSL_PARAM params[]);",
          "248: int drbg_set_ctx_params(PROV_DRBG *drbg, const OSSL_PARAM params[]);",
          "250: #define OSSL_PARAM_DRBG_SETABLE_CTX_COMMON                                      \\",
          "254: #define OSSL_PARAM_DRBG_GETABLE_CTX_COMMON                              \\",
          "256:     OSSL_PARAM_uint(OSSL_RAND_PARAM_STRENGTH, NULL),                    \\",
          "268: size_t prov_crngt_get_entropy(PROV_DRBG *drbg,",
          "269:                               unsigned char **pout,",
          "270:                               int entropy, size_t min_len, size_t max_len,",
          "",
          "[Removed Lines]",
          "191:     TSAN_QUALIFIER unsigned int reseed_prop_counter;",
          "199: #ifndef FIPS_MODULE",
          "201:     CRYPTO_EX_DATA ex_data;",
          "202: #endif",
          "206: int rand_drbg_restart(PROV_DRBG *drbg,",
          "207:                       const unsigned char *buffer, size_t len, size_t entropy);",
          "208: size_t rand_drbg_seedlen(PROV_DRBG *drbg);",
          "210: PROV_DRBG *prov_rand_drbg_new(void *provctx, int secure, void *parent,",
          "211:                               const OSSL_DISPATCH *parent_dispatch,",
          "212:                               int (*dnew)(PROV_DRBG *ctx, int secure));",
          "213: void prov_rand_free(PROV_DRBG *drbg);",
          "215: int PROV_DRBG_instantiate(PROV_DRBG *drbg, int strength,",
          "217:                           const unsigned char *pers, size_t perslen,",
          "218:                           int (*ifnc)(PROV_DRBG *drbg,",
          "219:                                       const unsigned char *ent, size_t ent_len,",
          "220:                                       const unsigned char *nonce,",
          "221:                                       size_t nonce_len,",
          "222:                                       const unsigned char *pstr,",
          "223:                                       size_t pstr_len));",
          "227:                      const unsigned char *adin, size_t adinlen,",
          "228:                      int (*reseed)(PROV_DRBG *drbg, const unsigned char *ent,",
          "229:                                    size_t ent_len, const unsigned char *adin,",
          "230:                                    size_t adin_len));",
          "233:                        int strength, int prediction_resistance,",
          "234:                        const unsigned char *adin, size_t adinlen,",
          "235:                        int (*generate)(PROV_DRBG *, unsigned char *out,",
          "236:                                        size_t outlen, const unsigned char *adin,",
          "237:                                        size_t adin_len),",
          "238:                        int (*reseed)(PROV_DRBG *drbg, const unsigned char *ent,",
          "239:                                      size_t ent_len, const unsigned char *adin,",
          "240:                                      size_t adin_len));",
          "251:     OSSL_PARAM_uint(OSSL_RAND_PARAM_RESEED_REQUESTS, NULL),             \\",
          "252:     OSSL_PARAM_uint64(OSSL_RAND_PARAM_RESEED_TIME_INTERVAL, NULL)",
          "255:     OSSL_PARAM_int(OSSL_RAND_PARAM_STATUS, NULL),                       \\",
          "257:     OSSL_PARAM_size_t(OSSL_RAND_PARAM_MAX_REQUEST, NULL),               \\",
          "258:     OSSL_PARAM_size_t(OSSL_RAND_PARAM_MIN_ENTROPYLEN, NULL),            \\",
          "259:     OSSL_PARAM_size_t(OSSL_RAND_PARAM_MAX_ENTROPYLEN, NULL),            \\",
          "260:     OSSL_PARAM_size_t(OSSL_RAND_PARAM_MIN_NONCELEN, NULL),              \\",
          "261:     OSSL_PARAM_size_t(OSSL_RAND_PARAM_MAX_NONCELEN, NULL),              \\",
          "262:     OSSL_PARAM_size_t(OSSL_RAND_PARAM_MAX_PERSLEN, NULL),               \\",
          "263:     OSSL_PARAM_size_t(OSSL_RAND_PARAM_MAX_ADINLEN, NULL),               \\",
          "264:     OSSL_PARAM_uint(OSSL_RAND_PARAM_RESEED_CTR, NULL),                  \\",
          "265:     OSSL_PARAM_uint(OSSL_RAND_PARAM_RESEED_REQUESTS, NULL),             \\",
          "266:     OSSL_PARAM_uint64(OSSL_RAND_PARAM_RESEED_TIME_INTERVAL, NULL)",
          "",
          "[Added Lines]",
          "176:     TSAN_QUALIFIER unsigned int reseed_counter;",
          "178:     unsigned int parent_reseed_counter;",
          "187:     void *callback_arg;",
          "188:     OSSL_INOUT_CALLBACK *get_entropy_fn;",
          "189:     OSSL_CALLBACK *cleanup_entropy_fn;",
          "190:     OSSL_INOUT_CALLBACK *get_nonce_fn;",
          "191:     OSSL_CALLBACK *cleanup_nonce_fn;",
          "194: PROV_DRBG *prov_rand_drbg_new",
          "195:     (void *provctx, void *parent, const OSSL_DISPATCH *parent_dispatch,",
          "196:      int (*dnew)(PROV_DRBG *ctx),",
          "197:      int (*instantiate)(PROV_DRBG *drbg,",
          "198:                         const unsigned char *entropy, size_t entropylen,",
          "199:                         const unsigned char *nonce, size_t noncelen,",
          "200:                         const unsigned char *pers, size_t perslen),",
          "201:      int (*uninstantiate)(PROV_DRBG *ctx),",
          "202:      int (*reseed)(PROV_DRBG *drbg, const unsigned char *ent, size_t ent_len,",
          "203:                    const unsigned char *adin, size_t adin_len),",
          "204:      int (*generate)(PROV_DRBG *, unsigned char *out, size_t outlen,",
          "205:                      const unsigned char *adin, size_t adin_len));",
          "206: void prov_rand_drbg_free(PROV_DRBG *drbg);",
          "208: int PROV_DRBG_instantiate(PROV_DRBG *drbg, unsigned int strength,",
          "210:                           const unsigned char *pers, size_t perslen);",
          "212: int PROV_DRBG_uninstantiate(PROV_DRBG *drbg);",
          "216:                      const unsigned char *adin, size_t adinlen);",
          "219:                        unsigned int strength, int prediction_resistance,",
          "220:                        const unsigned char *adin, size_t adinlen);",
          "226: int drbg_set_callbacks(void *vctx, OSSL_INOUT_CALLBACK *get_entropy_fn,",
          "227:                        OSSL_CALLBACK *cleanup_entropy_fn,",
          "228:                        OSSL_INOUT_CALLBACK *get_nonce_fn,",
          "229:                        OSSL_CALLBACK *cleanup_nonce_fn, void *arg);",
          "232: #define PROV_DRBG_VERYIFY_ZEROIZATION(v)    \\",
          "233:     {                                       \\",
          "234:         size_t i;                           \\",
          "235:                                             \\",
          "236:         for (i = 0; i < OSSL_NELEM(v); i++) \\",
          "237:             if ((v)[i] != 0)                \\",
          "238:                 return 0;                   \\",
          "239:     }",
          "251:     OSSL_PARAM_uint(OSSL_DRBG_PARAM_RESEED_REQUESTS, NULL),             \\",
          "252:     OSSL_PARAM_uint64(OSSL_DRBG_PARAM_RESEED_TIME_INTERVAL, NULL)",
          "255:     OSSL_PARAM_int(OSSL_RAND_PARAM_STATE, NULL),                        \\",
          "257:     OSSL_PARAM_size_t(OSSL_DRBG_PARAM_MAX_REQUEST, NULL),               \\",
          "258:     OSSL_PARAM_size_t(OSSL_DRBG_PARAM_MIN_ENTROPYLEN, NULL),            \\",
          "259:     OSSL_PARAM_size_t(OSSL_DRBG_PARAM_MAX_ENTROPYLEN, NULL),            \\",
          "260:     OSSL_PARAM_size_t(OSSL_DRBG_PARAM_MIN_NONCELEN, NULL),              \\",
          "261:     OSSL_PARAM_size_t(OSSL_DRBG_PARAM_MAX_NONCELEN, NULL),              \\",
          "262:     OSSL_PARAM_size_t(OSSL_DRBG_PARAM_MAX_PERSLEN, NULL),               \\",
          "263:     OSSL_PARAM_size_t(OSSL_DRBG_PARAM_MAX_ADINLEN, NULL),               \\",
          "264:     OSSL_PARAM_uint(OSSL_DRBG_PARAM_RESEED_CTR, NULL),                  \\",
          "265:     OSSL_PARAM_time_t(OSSL_DRBG_PARAM_RESEED_TIME, NULL),               \\",
          "266:     OSSL_PARAM_uint(OSSL_DRBG_PARAM_RESEED_REQUESTS, NULL),             \\",
          "267:     OSSL_PARAM_uint64(OSSL_DRBG_PARAM_RESEED_TIME_INTERVAL, NULL)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "272: void prov_crngt_cleanup_entropy(PROV_DRBG *drbg,",
          "273:                                 unsigned char *out, size_t outlen);",
          "287: #endif",
          "",
          "[Removed Lines]",
          "279: #if 0",
          "280: int rand_crngt_get_entropy_cb(OPENSSL_CTX *ctx, PROV_POOL *pool,",
          "281:                               unsigned char *buf, unsigned char *md,",
          "282:                               unsigned int *md_size);",
          "283: extern int (*crngt_get_entropy)(OPENSSL_CTX *ctx, PROV_POOL *pool,",
          "284:                                 unsigned char *buf, unsigned char *md,",
          "285:                                 unsigned int *md_size);",
          "286: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "providers/implementations/rands/test_rng.c||providers/implementations/rands/test_rng.c": [
          "File: providers/implementations/rands/test_rng.c -> providers/implementations/rands/test_rng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     unsigned int strength;",
          "37: } PROV_TEST_RNG;",
          "40: {",
          "41:     PROV_TEST_RNG *t;",
          "",
          "[Removed Lines]",
          "39: static int test_rng_new(PROV_DRBG *ctx, int secure)",
          "",
          "[Added Lines]",
          "39: static int test_rng_new(PROV_DRBG *ctx)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     ctx->max_perslen = INT_MAX;",
          "51:     ctx->max_adinlen = INT_MAX;",
          "52:     ctx->max_request = INT_MAX;",
          "54:     return 1;",
          "55: }",
          "64: static void test_rng_free(void *vdrbg)",
          "65: {",
          "66:     PROV_DRBG *drbg = (PROV_DRBG *)vdrbg;",
          "",
          "[Removed Lines]",
          "53:     ctx->strength = 1024;",
          "57: static void *test_rng_new_wrapper(void *provctx, int secure, void *parent,",
          "58:                                    const OSSL_DISPATCH *parent_dispatch)",
          "59: {",
          "60:     return prov_rand_drbg_new(provctx, secure, parent, parent_dispatch,",
          "61:                               &test_rng_new);",
          "62: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     PROV_TEST_RNG *t = (PROV_TEST_RNG *)drbg->data;",
          "113:     t->entropy_pos = 0;",
          "115: }",
          "117: static int test_rng_uninstantiate_wrapper(void *vdrbg)",
          "",
          "[Removed Lines]",
          "114:     return 1;",
          "",
          "[Added Lines]",
          "106:     return PROV_DRBG_uninstantiate(drbg);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:     return test_rng_reseed((PROV_DRBG *)vdrbg, ent, ent_len, adin, adin_len);",
          "170: }",
          "181: static size_t test_rng_nonce(void *vdrbg, unsigned char *out,",
          "182:                              unsigned int strength, size_t min_noncelen,",
          "183:                              size_t max_noncelen)",
          "",
          "[Removed Lines]",
          "172: static void *test_rng_new_wrapper(void *provctx, void *parent,",
          "173:                                    const OSSL_DISPATCH *parent_dispatch)",
          "174: {",
          "175:     return prov_rand_drbg_new(provctx, parent, parent_dispatch,",
          "176:                               &test_rng_new, &test_rng_instantiate,",
          "177:                               &test_rng_uninstantiate, &test_rng_reseed,",
          "178:                               &test_rng_generate);",
          "179: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:     return 1;",
          "308: }",
          "310: const OSSL_DISPATCH test_rng_functions[] = {",
          "311:     { OSSL_FUNC_RAND_NEWCTX, (void(*)(void))test_rng_new_wrapper },",
          "312:     { OSSL_FUNC_RAND_FREECTX, (void(*)(void))test_rng_free },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293: static void *test_rng_new_wrapper(void *provctx, void *parent,",
          "294:                                    const OSSL_DISPATCH *parent_dispatch)",
          "295: {",
          "296:     return prov_rand_drbg_new(provctx, parent, parent_dispatch,",
          "297:                               &test_rng_new, &test_rng_instantiate,",
          "298:                               &test_rng_uninstantiate, &test_rng_reseed,",
          "299:                               &test_rng_generate);",
          "300: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b0fe00e2704b5e20334a16d3c9099d1ba2ef1be",
      "candidate_info": {
        "commit_hash": "1b0fe00e2704b5e20334a16d3c9099d1ba2ef1be",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1b0fe00e2704b5e20334a16d3c9099d1ba2ef1be",
        "files": [
          "crypto/include/internal/rand_int.h",
          "crypto/init.c",
          "crypto/rand/drbg_lib.c",
          "crypto/rand/rand_lcl.h",
          "crypto/rand/rand_lib.c",
          "crypto/threads_none.c",
          "crypto/threads_pthread.c",
          "crypto/threads_win.c",
          "include/internal/cryptlib.h",
          "test/drbgtest.c"
        ],
        "message": "drbg: ensure fork-safety without using a pthread_atfork handler\n\nWhen the new OpenSSL CSPRNG was introduced in version 1.1.1,\nit was announced in the release notes that it would be fork-safe,\nwhich the old CSPRNG hadn't been.\n\nThe fork-safety was implemented using a fork count, which was\nincremented by a pthread_atfork handler. Initially, this handler\nwas enabled by default. Unfortunately, the default behaviour\nhad to be changed for other reasons in commit b5319bdbd095, so\nthe new OpenSSL CSPRNG failed to keep its promise.\n\nThis commit restores the fork-safety using a different approach.\nIt replaces the fork count by a fork id, which coincides with\nthe process id on UNIX-like operating systems and is zero on other\noperating systems. It is used to detect when an automatic reseed\nafter a fork is necessary.\n\nTo prevent a future regression, it also adds a test to verify that\nthe child reseeds after fork.\n\nCVE-2019-1549\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9802)",
        "before_after_code_files": [
          "crypto/include/internal/rand_int.h||crypto/include/internal/rand_int.h",
          "crypto/init.c||crypto/init.c",
          "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c",
          "crypto/rand/rand_lcl.h||crypto/rand/rand_lcl.h",
          "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c",
          "crypto/threads_none.c||crypto/threads_none.c",
          "crypto/threads_pthread.c||crypto/threads_pthread.c",
          "crypto/threads_win.c||crypto/threads_win.c",
          "include/internal/cryptlib.h||include/internal/cryptlib.h",
          "test/drbgtest.c||test/drbgtest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/include/internal/rand_int.h||crypto/include/internal/rand_int.h",
            "crypto/init.c||crypto/init.c",
            "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c",
            "crypto/rand/rand_lcl.h||crypto/rand/rand_lcl.h",
            "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c",
            "crypto/threads_none.c||crypto/threads_none.c",
            "crypto/threads_pthread.c||crypto/threads_pthread.c",
            "crypto/threads_win.c||crypto/threads_win.c",
            "include/internal/cryptlib.h||include/internal/cryptlib.h",
            "test/drbgtest.c||test/drbgtest.c"
          ],
          "candidate": [
            "crypto/include/internal/rand_int.h||crypto/include/internal/rand_int.h",
            "crypto/init.c||crypto/init.c",
            "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c",
            "crypto/rand/rand_lcl.h||crypto/rand/rand_lcl.h",
            "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c",
            "crypto/threads_none.c||crypto/threads_none.c",
            "crypto/threads_pthread.c||crypto/threads_pthread.c",
            "crypto/threads_win.c||crypto/threads_win.c",
            "include/internal/cryptlib.h||include/internal/cryptlib.h",
            "test/drbgtest.c||test/drbgtest.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/include/internal/rand_int.h||crypto/include/internal/rand_int.h": [
          "File: crypto/include/internal/rand_int.h -> crypto/include/internal/rand_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: void rand_cleanup_int(void);",
          "27: void rand_drbg_cleanup_int(void);",
          "28: void drbg_delete_thread_state(void);",
          "32: size_t rand_acquire_entropy_from_tsc(RAND_POOL *pool);",
          "",
          "[Removed Lines]",
          "29: void rand_fork(void);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/init.c||crypto/init.c": [
          "File: crypto/init.c -> crypto/init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "848: void OPENSSL_fork_child(void)",
          "849: {",
          "851: }",
          "852: #endif",
          "",
          "[Removed Lines]",
          "850:     rand_fork();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/rand/drbg_lib.c||crypto/rand/drbg_lib.c": [
          "File: crypto/rand/drbg_lib.c -> crypto/rand/drbg_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     }",
          "199:     drbg->secure = secure && CRYPTO_secure_allocated(drbg);",
          "201:     drbg->parent = parent;",
          "203:     if (parent == NULL) {",
          "",
          "[Removed Lines]",
          "200:     drbg->fork_count = rand_fork_count;",
          "",
          "[Added Lines]",
          "200:     drbg->fork_id = openssl_get_fork_id();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578:                        int prediction_resistance,",
          "579:                        const unsigned char *adin, size_t adinlen)",
          "580: {",
          "581:     int reseed_required = 0;",
          "583:     if (drbg->state != DRBG_READY) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581:     int fork_id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "603:         return 0;",
          "604:     }",
          "608:         reseed_required = 1;",
          "609:     }",
          "",
          "[Removed Lines]",
          "606:     if (drbg->fork_count != rand_fork_count) {",
          "607:         drbg->fork_count = rand_fork_count;",
          "",
          "[Added Lines]",
          "607:     fork_id = openssl_get_fork_id();",
          "609:     if (drbg->fork_id != fork_id) {",
          "610:         drbg->fork_id = fork_id;",
          "",
          "---------------"
        ],
        "crypto/rand/rand_lcl.h||crypto/rand/rand_lcl.h": [
          "File: crypto/rand/rand_lcl.h -> crypto/rand/rand_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "194:     int fork_count;",
          "",
          "[Added Lines]",
          "194:     int fork_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284: extern RAND_METHOD rand_meth;",
          "300: int rand_drbg_restart(RAND_DRBG *drbg,",
          "301:                       const unsigned char *buffer, size_t len, size_t entropy);",
          "",
          "[Removed Lines]",
          "297: extern int rand_fork_count;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/rand/rand_lib.c||crypto/rand/rand_lib.c": [
          "File: crypto/rand/rand_lib.c -> crypto/rand/rand_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: static const RAND_METHOD *default_RAND_meth;",
          "27: static CRYPTO_ONCE rand_init = CRYPTO_ONCE_STATIC_INIT;",
          "31: static CRYPTO_RWLOCK *rand_nonce_lock;",
          "32: static int rand_nonce_count;",
          "",
          "[Removed Lines]",
          "29: int rand_fork_count;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:     rand_pool_reattach(pool, out);",
          "304: }",
          "311: DEFINE_RUN_ONCE_STATIC(do_rand_init)",
          "312: {",
          "313: #ifndef OPENSSL_NO_ENGINE",
          "",
          "[Removed Lines]",
          "306: void rand_fork(void)",
          "307: {",
          "308:     rand_fork_count++;",
          "309: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/threads_none.c||crypto/threads_none.c": [
          "File: crypto/threads_none.c -> crypto/threads_none.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #if !defined(OPENSSL_THREADS) || defined(CRYPTO_TDEBUG)",
          "15: CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)",
          "16: {",
          "17:     CRYPTO_RWLOCK *lock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: # if defined(OPENSSL_SYS_UNIX)",
          "16: #  include <sys/types.h>",
          "17: #  include <unistd.h>",
          "18: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:     return 0;",
          "134: }",
          "136: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: int openssl_get_fork_id(void)",
          "142: {",
          "143: # if defined(OPENSSL_SYS_UNIX)",
          "144:     return getpid();",
          "145: # else",
          "146:     return return 0;",
          "147: # endif",
          "148: }",
          "",
          "---------------"
        ],
        "crypto/threads_pthread.c||crypto/threads_pthread.c": [
          "File: crypto/threads_pthread.c -> crypto/threads_pthread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG) && !defined(OPENSSL_SYS_WINDOWS)",
          "15: # ifdef PTHREAD_RWLOCK_INITIALIZER",
          "16: #  define USE_RWLOCK",
          "17: # endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: # if defined(OPENSSL_SYS_UNIX)",
          "16: #  include <sys/types.h>",
          "17: #  include <unistd.h>",
          "18: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: # endif",
          "194:     return 0;",
          "195: }",
          "196: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202: int openssl_get_fork_id(void)",
          "203: {",
          "204:     return getpid();",
          "205: }",
          "",
          "---------------"
        ],
        "crypto/threads_win.c||crypto/threads_win.c": [
          "File: crypto/threads_win.c -> crypto/threads_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:     return 0;",
          "165: }",
          "167: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: int openssl_get_fork_id(void)",
          "168: {",
          "169:     return 0;",
          "170: }",
          "",
          "---------------"
        ],
        "include/internal/cryptlib.h||include/internal/cryptlib.h": [
          "File: include/internal/cryptlib.h -> include/internal/cryptlib.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: void OPENSSL_showfatal(const char *fmta, ...);",
          "81: void crypto_cleanup_all_ex_data_int(void);",
          "82: int openssl_init_fork_handlers(void);",
          "84: char *ossl_safe_getenv(const char *name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: int openssl_get_fork_id(void);",
          "",
          "---------------"
        ],
        "test/drbgtest.c||test/drbgtest.c": [
          "File: test/drbgtest.c -> test/drbgtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: # include <windows.h>",
          "23: #endif",
          "25: #include \"testutil.h\"",
          "26: #include \"drbgtest.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #if defined(OPENSSL_SYS_UNIX)",
          "27: # include <sys/types.h>",
          "28: # include <sys/wait.h>",
          "29: # include <unistd.h>",
          "30: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "669:     return 1;",
          "670: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680: #if defined(OPENSSL_SYS_UNIX)",
          "685: static int test_drbg_reseed_after_fork(RAND_DRBG *master,",
          "686:                                        RAND_DRBG *public,",
          "687:                                        RAND_DRBG *private)",
          "688: {",
          "689:     pid_t pid;",
          "690:     int status=0;",
          "692:     pid = fork();",
          "693:     if (!TEST_int_ge(pid, 0))",
          "694:         return 0;",
          "696:     if (pid > 0) {",
          "698:         return TEST_int_eq(waitpid(pid, &status, 0), pid) && TEST_int_eq(status, 0);",
          "699:     }",
          "702:     if (!TEST_true(test_drbg_reseed(1, master, public, private, 1, 1, 1, 0)))",
          "703:         status = 1;",
          "706:     unhook_drbg(master);",
          "707:     unhook_drbg(public);",
          "708:     unhook_drbg(private);",
          "709:     exit(status);",
          "710: }",
          "711: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "755:         goto error;",
          "756:     reset_drbg_hook_ctx();",
          "760:     memset(rand_add_buf, 'r', sizeof(rand_add_buf));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799: #if defined(OPENSSL_SYS_UNIX)",
          "800:     if (!TEST_true(test_drbg_reseed_after_fork(master, public, private)))",
          "801:         goto error;",
          "802: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}