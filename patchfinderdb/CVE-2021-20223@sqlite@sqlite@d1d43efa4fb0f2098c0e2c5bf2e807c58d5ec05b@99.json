{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0184a256e3f4cc124ef0f72a207ba430796d28a6",
      "candidate_info": {
        "commit_hash": "0184a256e3f4cc124ef0f72a207ba430796d28a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0184a256e3f4cc124ef0f72a207ba430796d28a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/utf.c",
          "test/tkt-3fe897352e.test"
        ],
        "message": "Convert invalid surrogates to 0xfffd when translating UTF.\n\nFossilOrigin-Name: 7fab1393c2b22b1f3b159b631e06e7e0d3900850ee249c38e4d3cdd0aacf637e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/utf.c||src/utf.c",
          "test/tkt-3fe897352e.test||test/tkt-3fe897352e.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: abc473fb8fb999005dc79a360e34f97b3b25429decf1820dd2afa5c19577753d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/utf.c||src/utf.c": [
          "File: src/utf.c -> src/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   }                                                                 \\",
          "106: }",
          "",
          "[Removed Lines]",
          "108: #define READ_UTF16LE(zIn, TERM, c){                                   \\",
          "109:   c = (*zIn++);                                                       \\",
          "110:   c += ((*zIn++)<<8);                                                 \\",
          "111:   if( c>=0xD800 && c<0xE000 && TERM ){                                \\",
          "112:     int c2 = (*zIn++);                                                \\",
          "113:     c2 += ((*zIn++)<<8);                                              \\",
          "114:     c = (c2&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10);   \\",
          "115:   }                                                                   \\",
          "116: }",
          "118: #define READ_UTF16BE(zIn, TERM, c){                                   \\",
          "119:   c = ((*zIn++)<<8);                                                  \\",
          "120:   c += (*zIn++);                                                      \\",
          "121:   if( c>=0xD800 && c<0xE000 && TERM ){                                \\",
          "122:     int c2 = ((*zIn++)<<8);                                           \\",
          "123:     c2 += (*zIn++);                                                   \\",
          "124:     c = (c2&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10);   \\",
          "125:   }                                                                   \\",
          "126: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301:     if( pMem->enc==SQLITE_UTF16LE ){",
          "303:       while( zIn<zTerm ){",
          "305:         WRITE_UTF8(z, c);",
          "306:       }",
          "307:     }else{",
          "309:       while( zIn<zTerm ){",
          "311:         WRITE_UTF8(z, c);",
          "312:       }",
          "313:     }",
          "",
          "[Removed Lines]",
          "304:         READ_UTF16LE(zIn, zIn<zTerm, c);",
          "310:         READ_UTF16BE(zIn, zIn<zTerm, c);",
          "",
          "[Added Lines]",
          "284:         c = *(zIn++);",
          "285:         c += (*(zIn++))<<8;",
          "286:         if( c>=0xd800 && c<0xe000 ){",
          "287:           if( c>=0xdc00 || zIn>=zTerm ){",
          "288:             c = 0xfffd;",
          "289:           }else{",
          "290:             int c2 = *(zIn++);",
          "291:             c2 += (*(zIn++))<<8;",
          "292:             if( c2<0xdc00 || c2>=0xe000 ){",
          "293:               zIn -= 2;",
          "294:               c = 0xfffd;",
          "295:             }else{",
          "296:               c = ((c&0x3ff)<<10) + (c2&0x3ff) + 0x10000;",
          "297:             }",
          "298:           }",
          "299:         }",
          "305:         c = (*(zIn++))<<8;",
          "306:         c += *(zIn++);",
          "307:         if( c>=0xd800 && c<0xe000 ){",
          "308:           if( c>=0xdc00 || zIn>=zTerm ){",
          "309:             c = 0xfffd;",
          "310:           }else{",
          "311:             int c2 = (*(zIn++))<<8;",
          "312:             c2 += *(zIn++);",
          "313:             if( c2<0xdc00 || c2>=0xe000 ){",
          "314:               zIn -= 2;",
          "315:               c = 0xfffd;",
          "316:             }else{",
          "317:               c = ((c&0x3ff)<<10) + (c2&0x3ff) + 0x10000;",
          "318:             }",
          "319:           }",
          "320:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "466:   unsigned char const *z = zIn;",
          "467:   int n = 0;",
          "479:   }",
          "481: }",
          "483: #if defined(SQLITE_TEST)",
          "",
          "[Removed Lines]",
          "469:   if( SQLITE_UTF16NATIVE==SQLITE_UTF16BE ){",
          "470:     while( n<nChar ){",
          "471:       READ_UTF16BE(z, 1, c);",
          "472:       n++;",
          "473:     }",
          "474:   }else{",
          "475:     while( n<nChar ){",
          "476:       READ_UTF16LE(z, 1, c);",
          "477:       n++;",
          "478:     }",
          "480:   return (int)(z-(unsigned char const *)zIn);",
          "",
          "[Added Lines]",
          "479:   if( SQLITE_UTF16NATIVE==SQLITE_UTF16LE ) z++;",
          "480:   while( n<nChar ){",
          "481:     c = z[0];",
          "482:     z += 2;",
          "483:     if( c>=0xd8 && c<0xdc && z[0]>=0xdc && z[0]<0xe0 ) z += 2;",
          "484:     n++;",
          "486:   return (int)(z-(unsigned char const *)zIn)",
          "487:               - (SQLITE_UTF16NATIVE==SQLITE_UTF16LE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "507:     assert( c==t );",
          "508:     assert( (z-zBuf)==n );",
          "509:   }",
          "534: }",
          "",
          "[Removed Lines]",
          "510:   for(i=0; i<0x00110000; i++){",
          "511:     if( i>=0xD800 && i<0xE000 ) continue;",
          "512:     z = zBuf;",
          "513:     WRITE_UTF16LE(z, i);",
          "514:     n = (int)(z-zBuf);",
          "515:     assert( n>0 && n<=4 );",
          "516:     z[0] = 0;",
          "517:     z = zBuf;",
          "518:     READ_UTF16LE(z, 1, c);",
          "519:     assert( c==i );",
          "520:     assert( (z-zBuf)==n );",
          "521:   }",
          "522:   for(i=0; i<0x00110000; i++){",
          "523:     if( i>=0xD800 && i<0xE000 ) continue;",
          "524:     z = zBuf;",
          "525:     WRITE_UTF16BE(z, i);",
          "526:     n = (int)(z-zBuf);",
          "527:     assert( n>0 && n<=4 );",
          "528:     z[0] = 0;",
          "529:     z = zBuf;",
          "530:     READ_UTF16BE(z, 1, c);",
          "531:     assert( c==i );",
          "532:     assert( (z-zBuf)==n );",
          "533:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/tkt-3fe897352e.test||test/tkt-3fe897352e.test": [
          "File: test/tkt-3fe897352e.test -> test/tkt-3fe897352e.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     INSERT INTO t1 VALUES(hex_to_utf16be('D800'));",
          "34:     SELECT hex(x) FROM t1;",
          "35:   }",
          "37: do_test tkt-3fe89-1.2 {",
          "38:   db eval {",
          "39:     DELETE FROM t1;",
          "40:     INSERT INTO t1 VALUES(hex_to_utf16le('00D8'));",
          "41:     SELECT hex(x) FROM t1;",
          "42:   }",
          "44: do_test tkt-3fe89-1.3 {",
          "45:   db eval {",
          "46:     DELETE FROM t1;",
          "47:     INSERT INTO t1 VALUES(hex_to_utf16be('DFFF'));",
          "48:     SELECT hex(x) FROM t1;",
          "49:   }",
          "51: do_test tkt-3fe89-1.4 {",
          "52:   db eval {",
          "53:     DELETE FROM t1;",
          "54:     INSERT INTO t1 VALUES(hex_to_utf16le('FFDF'));",
          "55:     SELECT hex(x) FROM t1;",
          "56:   }",
          "60: finish_test",
          "",
          "[Removed Lines]",
          "36: } {EDA080}",
          "43: } {EDA080}",
          "50: } {EDBFBF}",
          "57: } {EDBFBF}",
          "",
          "[Added Lines]",
          "36: } {EFBFBD}",
          "43: } {EFBFBD}",
          "50: } {EFBFBD}",
          "57: } {EFBFBD}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67e2bb92df88c2497a5bbbe82b3e3be4fce8b6fc",
      "candidate_info": {
        "commit_hash": "67e2bb92df88c2497a5bbbe82b3e3be4fce8b6fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/67e2bb92df88c2497a5bbbe82b3e3be4fce8b6fc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/fts4min.test"
        ],
        "message": "Optimization for \"SELECT min(x) FROM tbl\" where \"x\" is indexed and NOT NULL. This also allows similar queries on NOT NULL virtual table columns to be optimized.\n\nFossilOrigin-Name: 59726777934e201d94e99ca693f0fda4ebfb1c7883d0258ce542f63f9924c28c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/fts4min.test||test/fts4min.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63e533d28e87bbb10e0c611de4b79d22aae291b163fe59d1f95dcad9ab3939e4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4477:   zFunc = pFunc->u.zToken;",
          "4478:   if( sqlite3StrICmp(zFunc, \"min\")==0 ){",
          "4479:     eRet = WHERE_ORDERBY_MIN;",
          "4481:   }else if( sqlite3StrICmp(zFunc, \"max\")==0 ){",
          "4482:     eRet = WHERE_ORDERBY_MAX;",
          "4483:     sortFlags = KEYINFO_ORDER_DESC;",
          "",
          "[Removed Lines]",
          "4480:     sortFlags = KEYINFO_ORDER_BIGNULL;",
          "",
          "[Added Lines]",
          "4480:     if( sqlite3ExprCanBeNull(pEList->a[0].pExpr) ){",
          "4481:       sortFlags = KEYINFO_ORDER_BIGNULL;",
          "4482:     }",
          "",
          "---------------"
        ],
        "test/fts4min.test||test/fts4min.test": [
          "File: test/fts4min.test -> test/fts4min.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 February 27",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: source $testdir/fts3_common.tcl",
          "16: set ::testprefix fts4min",
          "18: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "19: ifcapable !fts3 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: #------------------------------------------------------------------",
          "25: do_execsql_test 0.0 {",
          "26:   CREATE TABLE t1(a NOT NULL, b);",
          "27:   CREATE INDEX i1 ON t1(a);",
          "28: }",
          "30: do_execsql_test 1.0 {",
          "31:   CREATE VIRTUAL TABLE ft USING fts3(c);",
          "32:   INSERT INTO ft(docid, c) VALUES(22, 'hello world');",
          "33:   INSERT INTO ft(docid, c) VALUES(44, 'hello world');",
          "34:   INSERT INTO ft(docid, c) VALUES(11, 'hello world');",
          "35: }",
          "37: do_eqp_test 1.1.1 {",
          "38:   SELECT max(rowid) FROM ft",
          "39: } {VIRTUAL TABLE INDEX 0:DESC}",
          "41: do_eqp_test 1.1.2 {",
          "42:   SELECT min(rowid) FROM ft",
          "43: } {VIRTUAL TABLE INDEX 0:ASC}",
          "45: do_execsql_test 1.2.1 {",
          "46:   SELECT max(rowid) FROM ft",
          "47: } {44}",
          "49: do_execsql_test 1.2.2 {",
          "50:   SELECT min(rowid) FROM ft",
          "51: } {11}",
          "53: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db1954be0a639168403ec69639b19e955fc2204d",
      "candidate_info": {
        "commit_hash": "db1954be0a639168403ec69639b19e955fc2204d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db1954be0a639168403ec69639b19e955fc2204d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Back out the asserts of check-ins [a500893b6f64aced] and [d9c9fe9f5ad3fc91] as ticket [1b06916e01c82b66] demonstrates a case that refutes them.\n\nFossilOrigin-Name: ddb17d92df194337a103c561ef46ced00db5e67e4551e82de7cb5ad7f457dd5f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a982e6434cd66bfbe94d455f538bcbc4360b91572062d92acae6b77e9560e65d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2028:       if( (flags1 | flags3)&MEM_Str ){",
          "2029:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "2030:           applyNumericAffinity(pIn1,0);",
          "2037:           flags3 = pIn3->flags;",
          "2038:         }",
          "2039:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Removed Lines]",
          "2031:           assert( flags3==pIn3->flags );",
          "",
          "[Added Lines]",
          "2031:           testcase( flags3!=pIn3->flags );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8adc8f1ecb394f2780bfcc1507671424c753e6fa",
      "candidate_info": {
        "commit_hash": "8adc8f1ecb394f2780bfcc1507671424c753e6fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8adc8f1ecb394f2780bfcc1507671424c753e6fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c"
        ],
        "message": "Remove a surplus space from a comment\n\nFossilOrigin-Name: 73fecc688ab5c459245c9bb89432139a083ef378404b4dae3397a7f4e253f72a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 270ac1a0f232d75537be40abae559004e950b992cb2c7e94cd6de66e96ae17bd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ]
      }
    },
    {
      "candidate_hash": "a5f3fb3015e5195b7c124878adcc4439eca98236",
      "candidate_info": {
        "commit_hash": "a5f3fb3015e5195b7c124878adcc4439eca98236",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a5f3fb3015e5195b7c124878adcc4439eca98236",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix for ticket [810dc8038872e212].  Thank to user \"Maxulite\" for tracking down the problem!\n\nFossilOrigin-Name: 89af93d77fa7959a4ee7364bae6c02c40963a3cdf80b0a4a8af9c9764d5c7bb5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 43e0e59bd4e34c6e88c004ea951c0d76ff1cf0a034389f490495a5d12e239382",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:     goto no_mem;",
          "703:   }",
          "704:   assert( p->rc==SQLITE_OK || (p->rc&0xff)==SQLITE_BUSY );",
          "705:   assert( p->bIsReader || p->readOnly!=0 );",
          "706:   p->iCurrentTime = 0;",
          "707:   assert( p->explain==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:   testcase( p->rc!=SQLITE_OK );",
          "706:   p->rc = SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    }
  ]
}