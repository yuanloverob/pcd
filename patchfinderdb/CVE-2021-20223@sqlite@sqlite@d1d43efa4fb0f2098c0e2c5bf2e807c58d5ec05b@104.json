{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9930cfe878dfedf36ff4010a3781ba1758308c28",
      "candidate_info": {
        "commit_hash": "9930cfe878dfedf36ff4010a3781ba1758308c28",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9930cfe878dfedf36ff4010a3781ba1758308c28",
        "files": [
          "ext/fts3/fts3_write.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid",
          "test/altertab3.test",
          "test/fts3misc.test"
        ],
        "message": "Fix a problem in fts3 causing it to report corruption if a doclist contains consectutive rowid entries that differ by more than 2^63.\n\nFossilOrigin-Name: 0b0a3048f9df88bbc8979f2ac5247bee7d7bc1e585faca252610d2fcbe36d51d",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid",
          "test/altertab3.test||test/altertab3.test",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2967:           sqlite3_int64 iDelta;",
          "2968:           if( p->bDescIdx && nDoclist>0 ){",
          "2969:             iDelta = iPrev - iDocid;",
          "2970:           }else{",
          "2971:             iDelta = iDocid - iPrev;",
          "2972:           }",
          "2978:           nByte = sqlite3Fts3VarintLen(iDelta) + (isRequirePos?nList+1:0);",
          "2979:           if( nDoclist+nByte>pCsr->nBuffer ){",
          "",
          "[Removed Lines]",
          "2973:           if( iDelta<=0 && (nDoclist>0 || iDelta!=iDocid) ){",
          "2974:             return FTS_CORRUPT_VTAB;",
          "2975:           }",
          "2976:           assert( nDoclist>0 || iDelta==iDocid );",
          "",
          "[Added Lines]",
          "2969:             if( iPrev<=iDocid ) return FTS_CORRUPT_VTAB;",
          "2972:             if( nDoclist>0 && iPrev>=iDocid ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   INSERT INTO vt0(c0) VALUES (x'd1');",
          "227: }",
          "230: do_execsql_test 8.1 {",
          "231:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "232: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "229: breakpoint",
          "",
          "[Added Lines]",
          "233: #-------------------------------------------------------------------------",
          "234: #",
          "235: reset_db",
          "236: do_execsql_test 9.0 {",
          "237:   CREATE VIRTUAL TABLE t1 using FTS5(mailcontent);",
          "238:   insert into t1(rowid, mailcontent) values",
          "239:       (-4764623217061966105, 'we are going to upgrade'),",
          "240:       (8324454597464624651, 'we are going to upgrade');",
          "241: }",
          "243: do_execsql_test 9.1 {",
          "244:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "245: }",
          "247: do_execsql_test 9.2 {",
          "248:   SELECT rowid FROM t1('upgrade');",
          "249: } {",
          "250:   -4764623217061966105 8324454597464624651",
          "251: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f4285297e1e7ebef90bfc0f71402a4e1726d31bc15b69fec13a1f0d98fed1f08",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:   END}",
          "382: }",
          "385: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383: #-------------------------------------------------------------------------",
          "384: reset_db",
          "385: do_execsql_test 18.1 {",
          "386:   CREATE TABLE t1(a,b);",
          "387:   CREATE TRIGGER r1 AFTER INSERT ON t1 BEGIN",
          "388:     SELECT a, b FROM t1",
          "389:     INTERSECT SELECT b,a FROM t1",
          "390:     ORDER BY b IN (",
          "391:         SELECT a UNION SELECT b",
          "392:         FROM t1",
          "393:         ORDER BY b COLLATE nocase",
          "394:         )",
          "395:     ;",
          "396:   END;",
          "397: }",
          "399: do_catchsql_test 18.2 {",
          "400:     SELECT a, b FROM t1",
          "401:     INTERSECT",
          "402:     SELECT b,a FROM t1",
          "403:     ORDER BY b IN (",
          "404:         SELECT a UNION SELECT b",
          "405:         FROM t1",
          "406:         ORDER BY b COLLATE nocase",
          "407:         );",
          "408: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "410: do_catchsql_test 18.3 {",
          "411:   ALTER TABLE t1 RENAME TO t1x;",
          "412: } {1 {error in trigger r1: 1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "284: }",
          "286: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: #-------------------------------------------------------------------------",
          "287: #",
          "288: reset_db",
          "289: do_execsql_test 9.0 {",
          "290:   CREATE VIRTUAL TABLE t1 using fts4(mailcontent);",
          "291:   insert into t1(rowid, mailcontent) values",
          "292:       (-4764623217061966105, 'we are going to upgrade'),",
          "293:       (8324454597464624651, 'we are going to upgrade');",
          "294: }",
          "296: do_execsql_test 9.1 {",
          "297:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "298: }",
          "300: do_execsql_test 9.2 {",
          "301:   SELECT rowid FROM t1 WHERE t1 MATCH 'upgrade';",
          "302: } {",
          "303:   -4764623217061966105 8324454597464624651",
          "304: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45dc9ca46bd0604e0199a4956f17eef82ec4e3cd",
      "candidate_info": {
        "commit_hash": "45dc9ca46bd0604e0199a4956f17eef82ec4e3cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45dc9ca46bd0604e0199a4956f17eef82ec4e3cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/rowset.c"
        ],
        "message": "Fix typos in RowSet.\n\nFossilOrigin-Name: 86465c08f4d629a296332a7985937326ac43ea2822c5651bf03862cd79d370fc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/rowset.c||src/rowset.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35f1f151ac478d6b46f3685d2565c35108ef74bd33ce96fb65300d3c303b289b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rowset.c||src/rowset.c": [
          "File: src/rowset.c -> src/rowset.c"
        ]
      }
    },
    {
      "candidate_hash": "fc5bba7dc194719371655df8f75812221dfbef4a",
      "candidate_info": {
        "commit_hash": "fc5bba7dc194719371655df8f75812221dfbef4a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fc5bba7dc194719371655df8f75812221dfbef4a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Merge fixes from trunk.\n\nFossilOrigin-Name: 2af372f59ea250ccf9ab7c30fe4bf8376a5da6e35c401edf643b9a193a38d33d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b5d38e28c62dbc4f5f0e1b2590c9d6c2de9a140cc3528cae1968fd741e337fb0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3886:     Pgno nFree = get4byte(&pBt->pPage1->aData[36]);",
          "3887:     Pgno nFin = finalDbSize(pBt, nOrig, nFree);",
          "3890:       rc = SQLITE_CORRUPT_BKPT;",
          "3891:     }else if( nFree>0 ){",
          "3892:       rc = saveAllCursors(pBt, 0, 0);",
          "",
          "[Removed Lines]",
          "3889:     if( nOrig<nFin ){",
          "",
          "[Added Lines]",
          "3889:     if( nOrig<nFin || nFree>=nOrig ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b8524168eb50520ec5f4cc5cd709be06e210818",
      "candidate_info": {
        "commit_hash": "7b8524168eb50520ec5f4cc5cd709be06e210818",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b8524168eb50520ec5f4cc5cd709be06e210818",
        "files": [
          "doc/lemon.html",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update Lemon documentation.  Patches from sgbeal.\n\nFossilOrigin-Name: f5dc83442bf010bc4083e083b3a1acbb9918b7e685ca676dd899a0e09df196bc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f2d26f2b11317abd4f993faa1a4df7afcd1a2d4e448ecc69ca05e9ebf102cd62",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b3282d8a0ab1ae0ef262d9b8d684f800b0558fa",
      "candidate_info": {
        "commit_hash": "4b3282d8a0ab1ae0ef262d9b8d684f800b0558fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4b3282d8a0ab1ae0ef262d9b8d684f800b0558fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Limit LIKE/GLOB pattern length to 100 bytes (default is 50K) when running dbsql cases in the fuzzcheck utility.\n\nFossilOrigin-Name: 10306118e8591e727af477a1a15d136852d21170e645bd0e75f7c88346b037d7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1eae2686f03a6e20a49ca2b3a654b3019506d4941708ee3919c339cd093a57d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:   if( depthLimit>0 ){",
          "895:     sqlite3_limit(cx.db, SQLITE_LIMIT_EXPR_DEPTH, depthLimit);",
          "896:   }",
          "897:   sqlite3_hard_heap_limit64(heapLimit);",
          "899:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897:   sqlite3_limit(cx.db, SQLITE_LIMIT_LIKE_PATTERN_LENGTH, 100);",
          "",
          "---------------"
        ]
      }
    }
  ]
}