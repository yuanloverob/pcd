{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c24585570269bd4712ec13e747aa7f26739dd792",
      "candidate_info": {
        "commit_hash": "c24585570269bd4712ec13e747aa7f26739dd792",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c24585570269bd4712ec13e747aa7f26739dd792",
        "files": [
          "ext/rbu/rbu_common.tcl",
          "ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Optimize some cases of restarting an RBU vacuum.\n\nFossilOrigin-Name: cdc09867ed6522026ae7bfac1f59cd79b60fba6d07d49b99b030a501a7059ee4",
        "before_after_code_files": [
          "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl",
          "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl": [
          "File: ext/rbu/rbu_common.tcl -> ext/rbu/rbu_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: proc do_rbu_vacuum_test {tn step {statedb state.db}} {",
          "90:   forcedelete $statedb",
          "91:   if {$statedb==\"\" && $step==1} breakpoint",
          "94:     while 1 {",
          "96:       set state [rbu state]",
          "97:       check_prestep_state test.db $state",
          "98:       set rc [rbu step]",
          "99:       check_poststep_state $rc test.db $state",
          "100:       if {$rc!=\"SQLITE_OK\"} break",
          "102:     }",
          "103:     rbu close",
          "104:   }] {SQLITE_DONE}]",
          "",
          "[Removed Lines]",
          "92:   uplevel [list do_test $tn.1 [string map [list %state% $statedb] {",
          "93:     if {$step==0} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "95:       if {$step==1} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "101:       if {$step==1} { rbu close }",
          "",
          "[Added Lines]",
          "92:   uplevel [list do_test $tn.1 [string map [list %state% $statedb %step% $step] {",
          "93:     if {%step%==0} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "95:       if {%step%==1} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "101:       if {%step%==1} { rbu close }",
          "",
          "---------------"
        ],
        "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test": [
          "File: ext/rbu/rbupartial.test -> ext/rbu/rbupartial.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   set step 0",
          "82:   do_rbu_vacuum_test $tn.1.5 0",
          "83:   }]",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   do_test $tn.1.6 {",
          "85:     execsql { PRAGMA integrity_check }",
          "86:   } {ok}",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1381:         }",
          "1383:         pIter->azTblType[iOrder] = rbuStrndup(zType, &p->rc);",
          "1385:         pIter->abNotNull[iOrder] = (u8)bNotNull || (iPk!=0);",
          "1386:         iOrder++;",
          "1387:       }",
          "",
          "[Removed Lines]",
          "1384:         pIter->abTblPk[iOrder] = (iPk!=0);",
          "",
          "[Added Lines]",
          "1384:         assert( iPk>=0 );",
          "1385:         pIter->abTblPk[iOrder] = (u8)iPk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1416:   return zList;",
          "1417: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420: static char *rbuObjIterGetPkList(",
          "1423:   const char *zExtra",
          "1424: ){",
          "1425:   int iPk = 1;",
          "1426:   char *zRet = 0;",
          "1427:   const char *zSep = \"\";",
          "1428:   while( 1 ){",
          "1429:     int i;",
          "1430:     for(i=0; i<pIter->nTblCol; i++){",
          "1431:       if( (int)pIter->abTblPk[i]==iPk ){",
          "1432:         const char *zCol = pIter->azTblCol[i];",
          "1433:         zRet = rbuMPrintf(p, \"%z%s\\\"%w\\\"%s\", zRet, zSep, zCol, zExtra);",
          "1434:         zSep = \", \";",
          "1435:       }",
          "1436:     }",
          "1437:     if( i==pIter->nTblCol ) break;",
          "1438:     iPk++;",
          "1439:   }",
          "1440:   return zRet;",
          "1441: }",
          "1443: static char *rbuVacuumTableStart(",
          "1444:   sqlite3rbu *p,",
          "1445:   RbuObjIter *pIter,",
          "1446:   int bRowid,",
          "1447:   const char *zWrite",
          "1448: ){",
          "1449:   sqlite3_stmt *pMax = 0;",
          "1450:   char *zRet = 0;",
          "1451:   if( bRowid ){",
          "1452:     p->rc = prepareFreeAndCollectError(p->dbMain, &pMax, &p->zErrmsg,",
          "1453:         sqlite3_mprintf(",
          "1454:           \"SELECT max(_rowid_) FROM \\\"%s%w\\\"\", zWrite, pIter->zTbl",
          "1455:         )",
          "1456:     );",
          "1457:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pMax) ){",
          "1458:       sqlite3_int64 iMax = sqlite3_column_int64(pMax, 0);",
          "1459:       zRet = rbuMPrintf(p, \" WHERE _rowid_ > %lld \", iMax);",
          "1460:     }",
          "1461:     rbuFinalize(p, pMax);",
          "1462:   }else{",
          "1463:     char *zOrder = 0;",
          "1464:     char *zSelect = 0;",
          "1465:     char *zList = 0;",
          "1466:     int iPk = 1;",
          "1467:     const char *zSep = \"\";",
          "1468:     const char *zSep2 = \"\";",
          "1469:     while( 1 ){",
          "1470:       int i;",
          "1471:       for(i=0; i<pIter->nTblCol; i++){",
          "1472:         if( (int)pIter->abTblPk[i]==iPk ){",
          "1473:           const char *zCol = pIter->azTblCol[i];",
          "1474:           zOrder = rbuMPrintf(p, \"%z%s\\\"%w\\\" DESC\", zOrder, zSep, zCol);",
          "1475:           zList = rbuMPrintf(p, \"%z%s\\\"%w\\\"\", zList, zSep, zCol);",
          "1476:           zSelect = rbuMPrintf(p, \"%z%squote(\\\"%w\\\")\", zSelect, zSep2, zCol);",
          "1477:           zSep = \", \";",
          "1478:           zSep2 = \"||','||\";",
          "1479:         }",
          "1480:       }",
          "1481:       if( i==pIter->nTblCol ) break;",
          "1482:       iPk++;",
          "1483:     }",
          "1485:     if( p->rc==SQLITE_OK ){",
          "1486:       p->rc = prepareFreeAndCollectError(p->dbMain, &pMax, &p->zErrmsg,",
          "1487:           sqlite3_mprintf(",
          "1488:             \"SELECT %s FROM \\\"%s%w\\\" ORDER BY %s LIMIT 1\",",
          "1489:                 zSelect, zWrite, pIter->zTbl, zOrder",
          "1490:           )",
          "1491:       );",
          "1492:       if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pMax) ){",
          "1493:         const char *zVal = (const char*)sqlite3_column_text(pMax, 0);",
          "1494:         zRet = rbuMPrintf(p, \" WHERE (%s) > (%s) \", zList, zVal);",
          "1495:       }",
          "1496:       rbuFinalize(p, pMax);",
          "1497:     }",
          "1499:     sqlite3_free(zOrder);",
          "1500:     sqlite3_free(zSelect);",
          "1501:     sqlite3_free(zList);",
          "1502:   }",
          "1503:   return zRet;",
          "1504: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2221:       if( p->rc==SQLITE_OK ){",
          "2222:         const char *zRbuRowid = \"\";",
          "2223:         if( bRbuRowid ){",
          "2224:           zRbuRowid = rbuIsVacuum(p) ? \",_rowid_ \" : \",rbu_rowid\";",
          "2225:         }",
          "2235:       }",
          "2237:       sqlite3_free(zWhere);",
          "",
          "[Removed Lines]",
          "2226:         p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz,",
          "2227:             sqlite3_mprintf(",
          "2228:               \"SELECT %s,%s rbu_control%s FROM '%q'%s\",",
          "2229:               zCollist,",
          "2230:               (rbuIsVacuum(p) ? \"0 AS \" : \"\"),",
          "2231:               zRbuRowid,",
          "2232:               pIter->zDataTbl, zLimit",
          "2233:             )",
          "2234:         );",
          "",
          "[Added Lines]",
          "2310:         char *zStart = 0;",
          "2311:         char *zOrder = 0;",
          "2316:         if( rbuIsVacuum(p) ){",
          "2317:           if( nOffset ){",
          "2318:             zStart = rbuVacuumTableStart(p, pIter, bRbuRowid, zWrite);",
          "2319:             if( zStart ){",
          "2320:               sqlite3_free(zLimit);",
          "2321:               zLimit = 0;",
          "2322:             }",
          "2323:           }",
          "2324:           if( bRbuRowid ){",
          "2325:             zOrder = rbuMPrintf(p, \"_rowid_\");",
          "2326:           }else{",
          "2327:             zOrder = rbuObjIterGetPkList(p, pIter, \"\");",
          "2328:           }",
          "2329:         }",
          "2331:         if( p->rc==SQLITE_OK ){",
          "2332:           p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz,",
          "2333:               sqlite3_mprintf(",
          "2334:                 \"SELECT %s,%s rbu_control%s FROM '%q'%s %s %s %s\",",
          "2335:                 zCollist,",
          "2336:                 (rbuIsVacuum(p) ? \"0 AS \" : \"\"),",
          "2337:                 zRbuRowid,",
          "2338:                 pIter->zDataTbl, (zStart ? zStart : \"\"),",
          "2339:                 (zOrder ? \"ORDER BY\" : \"\"), zOrder,",
          "2340:                 zLimit",
          "2341:               )",
          "2342:           );",
          "2343:         }",
          "2344:         sqlite3_free(zStart);",
          "2345:         sqlite3_free(zOrder);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2e439bccc40825e211bfa9a88e6a251ff066ca7453d4e7cb5eab56ce7332635",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5f1915d599b1a0aba8fab35178c90031fdb362d",
      "candidate_info": {
        "commit_hash": "f5f1915d599b1a0aba8fab35178c90031fdb362d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f5f1915d599b1a0aba8fab35178c90031fdb362d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "Changes to the INSERT logic to make it simpler and faster and so that it works with generated columns and BEFORE triggers.\n\nFossilOrigin-Name: bc368cb090376d33d3844e3689c4f6bd19eed758e39b878ee67fef93b1c839ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 932a37275d7e932f8237d32c8fc6087ed8cd342fe01ef2f7a43c7237ab84c9ac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2329:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "2330:       if( pSelTab==0 ) return;",
          "2331:       assert( p->aCol==0 );",
          "2333:       p->aCol = pSelTab->aCol;",
          "2334:       pSelTab->nCol = 0;",
          "2335:       pSelTab->aCol = 0;",
          "",
          "[Removed Lines]",
          "2332:       p->nCol = pSelTab->nCol;",
          "",
          "[Added Lines]",
          "2332:       p->nCol = p->nNVCol = pSelTab->nCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2619:       assert( pTable->aCol==0 );",
          "2621:       pTable->aCol = pSelTab->aCol;",
          "2622:       pSelTab->nCol = 0;",
          "2623:       pSelTab->aCol = 0;",
          "",
          "[Removed Lines]",
          "2620:       pTable->nCol = pSelTab->nCol;",
          "",
          "[Added Lines]",
          "2620:       pTable->nCol = pTable->nNVCol = pSelTab->nCol;",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4337:   int inReg;",
          "4339:   assert( target>0 && target<=pParse->nMem );",
          "4348:   }",
          "4349: }",
          "",
          "[Removed Lines]",
          "4340:   if( pExpr && pExpr->op==TK_REGISTER ){",
          "4341:     sqlite3VdbeAddOp2(pParse->pVdbe, OP_Copy, pExpr->iTable, target);",
          "4342:   }else{",
          "4343:     inReg = sqlite3ExprCodeTarget(pParse, pExpr, target);",
          "4344:     assert( pParse->pVdbe!=0 || pParse->db->mallocFailed );",
          "4345:     if( inReg!=target && pParse->pVdbe ){",
          "4346:       sqlite3VdbeAddOp2(pParse->pVdbe, OP_SCopy, inReg, target);",
          "4347:     }",
          "",
          "[Added Lines]",
          "4340:   inReg = sqlite3ExprCodeTarget(pParse, pExpr, target);",
          "4341:   assert( pParse->pVdbe!=0 || pParse->db->mallocFailed );",
          "4342:   if( inReg!=target && pParse->pVdbe ){",
          "4343:     sqlite3VdbeAddOp2(pParse->pVdbe, OP_SCopy, inReg, target);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4374:   }",
          "4375: }",
          "",
          "[Removed Lines]",
          "4389: void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){",
          "4390:   Vdbe *v = pParse->pVdbe;",
          "4391:   int iMem;",
          "4393:   assert( target>0 );",
          "4394:   assert( pExpr->op!=TK_REGISTER );",
          "4395:   sqlite3ExprCode(pParse, pExpr, target);",
          "4396:   iMem = ++pParse->nMem;",
          "4397:   sqlite3VdbeAddOp2(v, OP_Copy, target, iMem);",
          "4398:   exprToRegister(pExpr, iMem);",
          "4399: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "938:     addrInsTop = addrCont = sqlite3VdbeAddOp1(v, OP_Yield, dest.iSDParm);",
          "939:     VdbeCoverage(v);",
          "940:   }",
          "944:   endOfLoop = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "948:     if( ipkColumn>=0 ){",
          "952:       sqlite3VdbeAddOp2(v, OP_Copy, regFromSelect+ipkColumn, regRowid);",
          "953:     }",
          "954:   }",
          "963:   nHidden = 0;",
          "964:   iRegStore = regData;  assert( regData==regRowid+1 );",
          "965:   for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "966:     int k;",
          "967:     u32 colFlags;",
          "968:     assert( i>=nHidden );",
          "969:     if( i==pTab->iPKey ){",
          "974:       sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "975:       continue;",
          "976:     }",
          "977:     if( ((colFlags = pTab->aCol[i].colFlags) & COLFLAG_NOINSERT)!=0 ){",
          "978:       nHidden++;",
          "979:       if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "983:         iRegStore--;",
          "984:         continue;",
          "985:       }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "990:         if( tmask & TRIGGER_BEFORE ){",
          "991:           sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "992:         }",
          "993:         continue;",
          "994:       }else if( pColumn==0 ){",
          "997:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "998:         continue;",
          "999:       }",
          "1000:     }",
          "1001:     if( pColumn ){",
          "1002:       for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "1003:       if( j>=pColumn->nId ){",
          "1006:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1007:         continue;",
          "1008:       }",
          "1009:       k = j;",
          "1010:     }else if( nColumn==0 ){",
          "1012:       sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1013:       continue;",
          "1014:     }else{",
          "1015:       k = i - nHidden;",
          "1016:     }",
          "1018:     if( useTempTable ){",
          "1019:       sqlite3VdbeAddOp3(v, OP_Column, srcTab, k, iRegStore);",
          "1020:     }else if( pSelect ){",
          "1021:       if( regFromSelect!=regData ){",
          "1022:         sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+k, iRegStore);",
          "1023:       }",
          "1024:     }else{",
          "1025:       sqlite3ExprCode(pParse, pList->a[k].pExpr, iRegStore);",
          "1026:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "974:     assert( !IsVirtual(pTab) );",
          "994:     }",
          "",
          "[Removed Lines]",
          "978:     for(i=j=0; i<pTab->nCol; i++){",
          "979:       if( pColumn ){",
          "980:         for(j=0; j<pColumn->nId; j++){",
          "981:           if( pColumn->a[j].idx==i ) break;",
          "982:         }",
          "983:       }",
          "984:       if( (!useTempTable && !pList) || (pColumn && j>=pColumn->nId)",
          "985:             || (pColumn==0 && IsOrdinaryHiddenColumn(&pTab->aCol[i])) ){",
          "986:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regCols+i+1);",
          "987:       }else if( useTempTable ){",
          "988:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, j, regCols+i+1);",
          "989:       }else{",
          "991:         sqlite3ExprCodeAndCache(pParse, pList->a[j].pExpr, regCols+i+1);",
          "992:       }",
          "993:       if( pColumn==0 && !IsOrdinaryHiddenColumn(&pTab->aCol[i]) ) j++;",
          "",
          "[Added Lines]",
          "1065:     assert( pTab->nNVCol>0 );",
          "1066:     sqlite3VdbeAddOp3(v, OP_Copy, regRowid+1, regCols+1, pTab->nNVCol-1);",
          "1068: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1073:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "1074:       sqlite3ComputeGeneratedColumns(pParse, regCols+1, pTab);",
          "1076: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1009:     sqlite3ReleaseTempRange(pParse, regCols, pTab->nCol+1);",
          "1010:   }",
          "1015:   if( !isView ){",
          "1016:     if( IsVirtual(pTab) ){",
          "1018:       sqlite3VdbeAddOp2(v, OP_Null, 0, regIns);",
          "1019:     }",
          "1020:     if( ipkColumn>=0 ){",
          "1021:       if( useTempTable ){",
          "1022:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, ipkColumn, regRowid);",
          "1023:       }else if( pSelect ){",
          "1025:       }else{",
          "1026:         Expr *pIpk = pList->a[ipkColumn].pExpr;",
          "1027:         if( pIpk->op==TK_NULL && !IsVirtual(pTab) ){",
          "",
          "[Removed Lines]",
          "1024:         sqlite3VdbeAddOp2(v, OP_Copy, regFromSelect+ipkColumn, regRowid);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1054:     }",
          "1055:     autoIncStep(pParse, regAutoinc, regRowid);",
          "1117: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1120:     if( pTab->tabFlags & (TF_HasStored|TF_HasVirtual) ){",
          "1121:       sqlite3ComputeGeneratedColumns(pParse, regRowid+1, pTab);",
          "1122:     }",
          "",
          "[Removed Lines]",
          "1060:     nHidden = 0;",
          "1061:     iRegStore = regRowid+1;",
          "1062:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "1063:       int k;",
          "1064:       u32 colFlags;",
          "1065:       assert( i>=nHidden );",
          "1066:       if( i==pTab->iPKey ){",
          "1072:         sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "1073:         continue;",
          "1074:       }",
          "1075:       if( ((colFlags = pTab->aCol[i].colFlags) & COLFLAG_NOINSERT)!=0 ){",
          "1076:         nHidden++;",
          "1077:         if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "1079:           iRegStore--;",
          "1080:           continue;",
          "1081:         }else if( (colFlags & COLFLAG_STORED)!=0 ){",
          "1083:           continue;",
          "1084:         }else if( pColumn==0 ){",
          "1086:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1087:           continue;",
          "1088:         }",
          "1089:       }",
          "1090:       if( pColumn ){",
          "1091:         for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "1092:         if( j>=pColumn->nId ){",
          "1095:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1096:           continue;",
          "1097:         }",
          "1098:         k = j;",
          "1099:       }else if( nColumn==0 ){",
          "1100:         sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1101:         continue;",
          "1102:       }else{",
          "1103:         k = i - nHidden;",
          "1104:       }",
          "1106:       if( useTempTable ){",
          "1107:         sqlite3VdbeAddOp3(v, OP_Column, srcTab, k, iRegStore);",
          "1108:       }else if( pSelect ){",
          "1109:         if( regFromSelect!=regData ){",
          "1110:           sqlite3VdbeAddOp2(v, OP_SCopy, regFromSelect+k, iRegStore);",
          "1111:         }",
          "1112:       }else{",
          "1113:         sqlite3ExprCode(pParse, pList->a[k].pExpr, iRegStore);",
          "1114:       }",
          "1115:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4100: int sqlite3ExprCodeAtInit(Parse*, Expr*, int);",
          "4101: int sqlite3ExprCodeTemp(Parse*, Expr*, int*);",
          "4102: int sqlite3ExprCodeTarget(Parse*, Expr*, int);",
          "4104: int sqlite3ExprCodeExprList(Parse*, ExprList*, int, int, u8);",
          "",
          "[Removed Lines]",
          "4103: void sqlite3ExprCodeAndCache(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7edcb11ca7153b3e8a0b01d14142453e2b11ea6f",
      "candidate_info": {
        "commit_hash": "7edcb11ca7153b3e8a0b01d14142453e2b11ea6f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7edcb11ca7153b3e8a0b01d14142453e2b11ea6f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix a typo in the documentation for sqlite3_total_changes().\n\nFossilOrigin-Name: 8474c1560e0c3a28c6a7ed360202a8e7caae3c8259f60bbfa6d2948ab7876f51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84162af521f29df8a186163fbdef9856e1aa8aba78e74d7df0ba2cc83bb86240",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "61cb4ed7f10f9363572a73c1d087bdb10410835b",
      "candidate_info": {
        "commit_hash": "61cb4ed7f10f9363572a73c1d087bdb10410835b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/61cb4ed7f10f9363572a73c1d087bdb10410835b",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Add comments in the parse.sql file to help demonstrate how rules are encoded.\n\nFossilOrigin-Name: 2c4f714892327a1a9a303267b1f9685e310cca5dcea9c61287d95e26291b0506",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a82c554c3bde4640df6865686f8f70e2c1e07c581fed4772b6b0a8ec1b10bb6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4224:     );",
          "4225:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4226:       assert( i==rp->iRule );",
          "4227:       fprintf(sql,",
          "4228:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d);\\n\",",
          "4229:         rp->iRule, rp->lhs->index",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4227:       fprintf(sql, \"-- \");",
          "4228:       writeRuleText(sql, rp);",
          "4229:       fprintf(sql, \"\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
      "candidate_info": {
        "commit_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/intreal.test"
        ],
        "message": "Fix the OP_Affinity operator so that when applying REAL affinity, it only sets MEM_IntReal if the integer value will fit in 6 bytes or less. Fix for ticket [ba2f4585cf495231]\n\nFossilOrigin-Name: 2b221bb15fd2b9f6a426e5eb439f7dbabbe3c4cab010c49b87dae3bb1f16c081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cea8a892f76bddc63b921ffc11ea8dce8f8cf649a2c77aa908c7c5c91eed7f4c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2817:     assert( memIsValid(pIn1) );",
          "2818:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2819:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "2824:     }",
          "2825:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2826:     zAffinity++;",
          "",
          "[Removed Lines]",
          "2822:       pIn1->flags |= MEM_IntReal;",
          "2823:       pIn1->flags &= ~MEM_Int;",
          "",
          "[Added Lines]",
          "2824:       testcase( pIn1->u.i==140737488355328LL );",
          "2825:       testcase( pIn1->u.i==140737488355327LL );",
          "2826:       testcase( pIn1->u.i==-140737488355328LL );",
          "2827:       testcase( pIn1->u.i==-140737488355329LL );",
          "2828:       if( pIn1->u.i<=140737488355327LL && pIn1->u.i>=-140737488355328LL ){",
          "2829:         pIn1->flags |= MEM_IntReal;",
          "2830:         pIn1->flags &= ~MEM_Int;",
          "2831:       }else{",
          "2832:         pIn1->u.r = (double)pIn1->u.i;",
          "2833:         pIn1->flags |= MEM_Real;",
          "2834:         pIn1->flags &= ~MEM_Int;",
          "2835:       }",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   );",
          "83: } [list a $D]",
          "86: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: # 2019-07-29 ticket ba2f4585cf495231",
          "86: #",
          "87: db close",
          "88: sqlite3 db :memory:",
          "89: do_execsql_test 3.0 {",
          "90:   CREATE TABLE t0 (c0 REAL, c1);",
          "91:   CREATE UNIQUE INDEX i0 ON t0(c1, 0 | c0);",
          "92:   INSERT INTO t0(c0) VALUES (4750228396194493326), (0);",
          "93:   UPDATE OR REPLACE t0 SET c0 = 'a', c1 = '';",
          "94:   SELECT * FROM t0 ORDER BY t0.c1;",
          "95:   PRAGMA integrity_check;",
          "96: } {a {} ok}",
          "",
          "---------------"
        ]
      }
    }
  ]
}