{
  "cve_id": "CVE-2015-8736",
  "cve_desc": "The mp2t_find_next_pcr function in wiretap/mp2t.c in the MP2T file parser in Wireshark 2.0.x before 2.0.1 does not reserve memory for a trailer, which allows remote attackers to cause a denial of service (stack-based buffer overflow and application crash) via a crafted file.",
  "repo": "wireshark/wireshark",
  "patch_hash": "baa3eab78b422616a92ee38551c1b1510dca4ccb",
  "patch_info": {
    "commit_hash": "baa3eab78b422616a92ee38551c1b1510dca4ccb",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/baa3eab78b422616a92ee38551c1b1510dca4ccb",
    "files": [
      "wiretap/mp2t.c"
    ],
    "message": "[MP2T] Reading buffer should have MP2T_SIZE+TRAILER_LEN_MAX space to give room for non-zero trailer.\n\nBug: 11820\nChange-Id: I7e0a603c20ca0c524399beb3d89e14c45dc3a06e\nReviewed-on: https://code.wireshark.org/review/12393\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "wiretap/mp2t.c||wiretap/mp2t.c"
    ]
  },
  "patch_diff": {
    "wiretap/mp2t.c||wiretap/mp2t.c": [
      "File: wiretap/mp2t.c -> wiretap/mp2t.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168: mp2t_find_next_pcr(wtap *wth, guint8 trailer_len,",
      "169:         int *err, gchar **err_info, guint32 *idx, guint64 *pcr, guint16 *pid)",
      "170: {",
      "172:     gboolean found;",
      "173:     guint8 afc;",
      "",
      "[Removed Lines]",
      "171:     guint8 buffer[MP2T_SIZE];",
      "",
      "[Added Lines]",
      "171:     guint8 buffer[MP2T_SIZE+TRAILER_LEN_MAX];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01815bfdc4a952862e5fd7151404346935499102",
      "candidate_info": {
        "commit_hash": "01815bfdc4a952862e5fd7151404346935499102",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/01815bfdc4a952862e5fd7151404346935499102",
        "files": [
          "wiretap/mp2t.c"
        ],
        "message": "[MP2T] Reading buffer should have MP2T_SIZE+TRAILER_LEN_MAX space to give room for non-zero trailer.\n\nBug: 11820\nChange-Id: I7e0a603c20ca0c524399beb3d89e14c45dc3a06e\nReviewed-on: https://code.wireshark.org/review/12393\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit baa3eab78b422616a92ee38551c1b1510dca4ccb)\nReviewed-on: https://code.wireshark.org/review/12399",
        "before_after_code_files": [
          "wiretap/mp2t.c||wiretap/mp2t.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/mp2t.c||wiretap/mp2t.c"
          ],
          "candidate": [
            "wiretap/mp2t.c||wiretap/mp2t.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/mp2t.c||wiretap/mp2t.c": [
          "File: wiretap/mp2t.c -> wiretap/mp2t.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: mp2t_find_next_pcr(wtap *wth, guint8 trailer_len,",
          "169:         int *err, gchar **err_info, guint32 *idx, guint64 *pcr, guint16 *pid)",
          "170: {",
          "172:     gboolean found;",
          "173:     guint8 afc;",
          "",
          "[Removed Lines]",
          "171:     guint8 buffer[MP2T_SIZE];",
          "",
          "[Added Lines]",
          "171:     guint8 buffer[MP2T_SIZE+TRAILER_LEN_MAX];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7253ee7611fb2e62f2a9326689e48f8d2177aed9",
      "candidate_info": {
        "commit_hash": "7253ee7611fb2e62f2a9326689e48f8d2177aed9",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7253ee7611fb2e62f2a9326689e48f8d2177aed9",
        "files": [
          "wiretap/mp2t.c"
        ],
        "message": "Add PCR based stream times for MPEG ts files.\n\nChange-Id: Ie1308829c3ad44d842bf12c7ebc5c200c942d8cc\nReviewed-on: https://code.wireshark.org/review/7750\nReviewed-by: Martin Kaiser <wireshark@kaiser.cx>",
        "before_after_code_files": [
          "wiretap/mp2t.c||wiretap/mp2t.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/mp2t.c||wiretap/mp2t.c"
          ],
          "candidate": [
            "wiretap/mp2t.c||wiretap/mp2t.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/mp2t.c||wiretap/mp2t.c": [
          "File: wiretap/mp2t.c -> wiretap/mp2t.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: typedef struct {",
          "57:     int start_offset;",
          "59:     guint8  trailer_len;",
          "60: } mp2t_filetype_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     guint64 bitrate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     phdr->caplen = MP2T_SIZE;",
          "93:     phdr->len = MP2T_SIZE;",
          "",
          "[Removed Lines]",
          "89:     phdr->ts.secs = (time_t)(tmp / MP2T_QAM256_BITRATE);",
          "90:     phdr->ts.nsecs = (int)((tmp % MP2T_QAM256_BITRATE) * 1000000000 / MP2T_QAM256_BITRATE);",
          "",
          "[Added Lines]",
          "90:     phdr->ts.secs = (time_t)(tmp / mp2t->bitrate);",
          "91:     phdr->ts.nsecs = (int)((tmp % mp2t->bitrate) * 1000000000 / mp2t->bitrate);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:     return TRUE;",
          "141: }",
          "143: wtap_open_return_val",
          "144: mp2t_open(wtap *wth, int *err, gchar **err_info)",
          "145: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: static guint64",
          "145: mp2t_read_pcr(guint8 *buffer)",
          "146: {",
          "147:     guint64 base;",
          "148:     guint64 ext;",
          "150:     base = pntoh40(buffer);",
          "151:     base >>= 7;",
          "153:     ext = pntoh16(&buffer[4]);",
          "154:     ext &= 0x01ff;",
          "156:     return (base * 300 + ext);",
          "157: }",
          "159: static gboolean",
          "160: mp2t_find_next_pcr(wtap *wth, int *err, gchar **err_info, guint32 *index, guint64 *pcr, guint16 *pid)",
          "161: {",
          "162:     guint8 buffer[MP2T_SIZE];",
          "163:     gboolean found;",
          "164:     guint8 afc;",
          "166:     found = FALSE;",
          "167:     while (FALSE == found) {",
          "168:         (*index)++;",
          "169:         if (!wtap_read_bytes(wth->fh, buffer, MP2T_SIZE, err, err_info)) {",
          "170:             return FALSE;",
          "171:         }",
          "173:         if (MP2T_SYNC_BYTE != buffer[0]) {",
          "174:             continue;",
          "175:         }",
          "178:         afc = 3 & (buffer[3] >> 4);",
          "179:         if (afc < 2) {",
          "180:             continue;",
          "181:         }",
          "184:         if (buffer[4] < 7) {",
          "185:             continue;",
          "186:         }",
          "189:         if (0x10 != (0x10 & buffer[5])) {",
          "190:             continue;",
          "191:         }",
          "196:         found = TRUE;",
          "197:     }",
          "199:     return TRUE;",
          "200: }",
          "202: static guint64",
          "203: mp2t_bits_per_second(wtap *wth, int *err, gchar **err_info)",
          "204: {",
          "205:     guint32 pn1, pn2;",
          "206:     guint64 pcr1, pcr2;",
          "207:     guint16 pid1, pid2;",
          "208:     guint32 index;",
          "209:     guint64 pcr_delta, bits_passed;",
          "217:     index = 0;",
          "219:     if (FALSE == mp2t_find_next_pcr(wth, err, err_info, &index, &pcr1, &pid1)) {",
          "220:         return 0;",
          "221:     }",
          "223:     pn1 = index;",
          "224:     pn2 = pn1;",
          "226:     while (pn1 == pn2) {",
          "227:         if (FALSE == mp2t_find_next_pcr(wth, err, err_info, &index, &pcr2, &pid2)) {",
          "228:             return 0;",
          "229:         }",
          "231:         if (pid1 == pid2) {",
          "232:             pn2 = index;",
          "233:         }",
          "234:     }",
          "236:     pcr_delta = pcr2 - pcr1;",
          "237:     bits_passed = MP2T_SIZE * (pn2 - pn1) * 8;",
          "239:     return ((MP2T_PCR_CLOCK * bits_passed) / pcr_delta);",
          "240: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:     int i;",
          "150:     int first;",
          "151:     mp2t_filetype_t *mp2t;",
          "154:     if (!wtap_read_bytes(wth->fh, buffer, MP2T_SIZE, err, err_info)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     guint64 bitrate;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:         return WTAP_OPEN_ERROR;",
          "213:     }",
          "215:     wth->file_type_subtype = WTAP_FILE_TYPE_SUBTYPE_MPEG_2_TS;",
          "216:     wth->file_encap = WTAP_ENCAP_MPEG_2_TS;",
          "217:     wth->file_tsprec = WTAP_TSPREC_NSEC;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:     bitrate = mp2t_bits_per_second(wth, err, err_info);",
          "319:     if (-1 == file_seek(wth->fh, first, SEEK_SET, err)) {",
          "320:         return WTAP_OPEN_ERROR;",
          "321:     }",
          "323:     if (0 == bitrate) {",
          "325:         bitrate = MP2T_QAM64_BITRATE;",
          "326:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "224:     wth->priv = mp2t;",
          "225:     mp2t->start_offset = first;",
          "226:     mp2t->trailer_len = trailer_len;",
          "228:     return WTAP_OPEN_MINE;",
          "229: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:     mp2t->bitrate = bitrate;",
          "",
          "---------------"
        ]
      }
    }
  ]
}