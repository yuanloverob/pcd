{
  "cve_id": "CVE-2017-0196",
  "cve_desc": "An information disclosure vulnerability in Microsoft scripting engine allows remote attackers to obtain sensitive information from process memory via a crafted web site, aka \"Microsoft Browser Information Disclosure Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
  "patch_info": {
    "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
    "files": [
      "lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js"
    ],
    "message": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
    "before_after_code_files": [
      "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
    ]
  },
  "patch_diff": {
    "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
      "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "478:     bool JavascriptArray::IsMissingItem(uint32 index)",
      "479:     {",
      "480:         bool isIntArray = false, isFloatArray = false;",
      "481:         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:         if (this->length <= index)",
      "481:         {",
      "482:             return false;",
      "483:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5768:         if (!pArr->HasNoMissingValues())",
      "5769:         {",
      "5771:             {",
      "",
      "[Removed Lines]",
      "5770:             for (uint32 i = 0; i < newLen; i++)",
      "",
      "[Added Lines]",
      "5775:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
      "",
      "---------------"
    ],
    "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
      "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "593:             assert.areEqual(101, arr.length);",
      "594:         }",
      "595:     },",
      "596: ];",
      "597: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:     {",
      "597:         name: \"Heap overread when splice mutates the array when executing slice\",",
      "598:         body: function ()",
      "599:         {",
      "600:             var getterCalled = false;",
      "601:             var a = [1, 2];",
      "602:             for (var i = 0; i < 100 * 1024; i++) {",
      "603:                 a.push(i);",
      "604:             }",
      "605:             delete a[0]; // Make a missing item",
      "606:             var protoObj = [11];",
      "607:             Object.defineProperty(protoObj, '0', {",
      "608:                 get : function () {",
      "609:                     getterCalled = true;",
      "610:                     Object.setPrototypeOf(a, Array.prototype);",
      "611:                     a.splice(0); // head seg is now length=0",
      "612:                     return 42;",
      "613:                 },",
      "614:                 configurable : true",
      "615:             });",
      "616:             Object.setPrototypeOf(a, protoObj);",
      "617:             var b = a.slice();",
      "618:             assert.isTrue(getterCalled);",
      "619:             assert.areEqual(0, a.length, \"Getter will splice the array to zero length\");",
      "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
      "621:         }",
      "622:     },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ca79d750c7bbef16340877597072ea735b6960e",
      "candidate_info": {
        "commit_hash": "2ca79d750c7bbef16340877597072ea735b6960e",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/2ca79d750c7bbef16340877597072ea735b6960e",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "test/Array/Array_TypeConfusion_bugs.js",
          "test/Array/protoLookupWithGetters.baseline",
          "test/Array/protoLookupWithGetters.js"
        ],
        "message": "Add a precheck of no side-effect for array apis.\n\nFew array apis (reverse, shift, unshift and sort) do fill from prototype\nand still take the faster path to complete the respective logic. It is\npossible that FillFromPrototype will mutate the current array, in that case taking faster path is wrong and give you wrong results.\nHowever as you already done FillFromPrototype you already mutated the\ncurrent object so now you cannot take the slower path as it will create\nfurther deviations.\nIn order to fix those I have put a precheck which actually looks the\nprototype chain and find out if there is any ES5Array or Proxy of any\nsort. If we don't have any of those we cannot change the current array's\nlength or type (I am not talking about native array to var array). With\nthese check we can safely decide which way we can go.\n\nAdded few tests cases to excercise the scenario, where previously we were\ntaking the faster path and leading to wrong result (we have compliant\ngap).",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||liRuntime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||liRuntime/Library/JavascriptArray.h",
          "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js",
          "test/Array/protoLookupWithGetters.baseline||test/Array/protoLookupWithGetters.baseline",
          "test/Array/protoLookupWithGetters.js||test/Array/protoLookupWithGetters.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
          ],
          "candidate": [
            "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||liRuntime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> liRuntime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5318:         JS_REENTRANT_UNLOCK(jsReentLock, return JavascriptArray::ReverseHelper(pArr, nullptr, obj, length.GetBigIndex(), scriptContext));",
          "5319:     }",
          "5322:     template <typename T>",
          "5323:     Var JavascriptArray::ReverseHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, T length, ScriptContext* scriptContext)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5348:         ThrowTypeErrorOnFailureHelper h(scriptContext, methodName);",
          "5351:         {",
          "5352:             Recycler * recycler = scriptContext->GetRecycler();",
          "",
          "[Removed Lines]",
          "5350:         if (pArr)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5373:                 }",
          "5374:             }",
          "5376:             if (pArr->HasNoMissingValues() && pArr->head && pArr->head->next)",
          "5377:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5679:         {",
          "5680:             return res;",
          "5681:         }",
          "5683:         {",
          "5684:             JavascriptArray * pArr = JavascriptArray::FromVar(args[0]);",
          "5689:             if (pArr->length == 0)",
          "5690:             {",
          "5691:                 return res;",
          "5692:             }",
          "5694:             if(pArr->IsFillFromPrototypes())",
          "5695:             {",
          "5696:                 JS_REENTRANT(jsReentLock, pArr->FillFromPrototypes(0, pArr->length)); // We need find all missing value from [[proto]] object",
          "5697:             }",
          "5699:             if(pArr->HasNoMissingValues() && pArr->head && pArr->head->next)",
          "5700:             {",
          "",
          "[Removed Lines]",
          "5682:         if (JavascriptArray::Is(args[0]))",
          "5685: #if ENABLE_COPYONACCESS_ARRAY",
          "5686:             JavascriptLibrary::CheckAndConvertCopyOnAccessNativeIntArray<Var>(pArr);",
          "5687: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6662:             }",
          "6663:         }",
          "6671:             JavascriptArray *arr = JavascriptArray::FromVar(args[0]);",
          "6673:             if (arr->length <= 1)",
          "",
          "[Removed Lines]",
          "6665:         if (JavascriptArray::Is(args[0]))",
          "6666:         {",
          "6667: #if ENABLE_COPYONACCESS_ARRAY",
          "6668:             JavascriptLibrary::CheckAndConvertCopyOnAccessNativeIntArray<Var>(args[0]);",
          "6669: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6675:                 return args[0];",
          "6676:             }",
          "6678:             if(arr->IsFillFromPrototypes())",
          "6679:             {",
          "6680:                 JS_REENTRANT(jsReentLock, arr->FillFromPrototypes(0, arr->length)); // We need find all missing value from [[proto]] object",
          "6681:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7677:         {",
          "7678:            return res;",
          "7679:         }",
          "7681:         {",
          "7682: #if ENABLE_COPYONACCESS_ARRAY",
          "7683:             JavascriptLibrary::CheckAndConvertCopyOnAccessNativeIntArray<Var>(args[0]);",
          "7684: #endif",
          "7689:             if (unshiftElements > 0)",
          "7690:             {",
          "7691:                 if (pArr->IsFillFromPrototypes())",
          "7692:                 {",
          "7693:                     JS_REENTRANT(jsReentLock, pArr->FillFromPrototypes(0, pArr->length)); // We need find all missing value from [[proto]] object",
          "7694:                 }",
          "7697:                 bool newLenOverflowed = false;",
          "7698:                 uint32 maxLen = MaxArrayLength - unshiftElements;",
          "",
          "[Removed Lines]",
          "7680:         if (JavascriptArray::Is(args[0]) && !JavascriptArray::FromVar(args[0])->IsCrossSiteObject())",
          "7685:             JavascriptArray * pArr = JavascriptArray::FromVar(args[0]);",
          "7687:             uint32 unshiftElements = args.Info.Count - 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7795:             }",
          "7797:             JS_REENTRANT(jsReentLock, BigIndex length = OP_GetLength(dynamicObject, scriptContext));",
          "7799:             if (unshiftElements > 0)",
          "7800:             {",
          "7801:                 uint32 MaxSpaceUint32 = MaxArrayLength - unshiftElements;",
          "",
          "[Removed Lines]",
          "7798:             uint32 unshiftElements = args.Info.Count - 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||liRuntime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> liRuntime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:         template <typename Fn>",
          "626:         static void ForEachOwnMissingArrayIndexOfObject(JavascriptArray *baseArr, JavascriptArray *destArray, RecyclableObject* obj, uint32 startIndex, uint32 limitIndex, uint32 destIndex, Fn fn);",
          "629:         template <typename T> static bool MayChangeType() { return false; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
          "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:             assert.areEqual(3, b.length);",
          "478:             assert.areEqual([], b[0]);",
          "479:             assert.areEqual(\"abc\", b[1]);",
          "481:         }",
          "482:     },",
          "483:     {",
          "",
          "[Removed Lines]",
          "480:             assert.areEqual(1145324612, b[2]);",
          "",
          "[Added Lines]",
          "480:             assert.areEqual(undefined, b[2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
          "621:         }",
          "622:     },",
          "623: ];",
          "624: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:     {",
          "624:         name: \"reverse : Mutating the array's length from prototype should not be reversed\",",
          "625:         body: function ()",
          "626:         {",
          "627:             var getterCalled = false;",
          "628:             var a = [11, 22, 33];",
          "629:             a.length = 5;",
          "630:             var o = {};",
          "631:             Object.defineProperty(o, '4' , {",
          "632:                 get: function () {",
          "633:                     getterCalled = true;",
          "634:                     a[5] = 55;",
          "635:                     a[6] = 66;",
          "636:                     a.length = 8; // Changing the length of the array while we are in the reverse call",
          "637:                     return 44 ;",
          "638:                 }, set : function(ab) {}, configurable : true",
          "639:             });",
          "641:             a.__proto__ = o;",
          "642:             var r = [].reverse.call(a);",
          "643:             a.__proto__ = Array.prototype;",
          "644:             assert.isTrue(getterCalled);",
          "645:             assert.areEqual(55, a[5], 'a[5] is added during the reverse call, so it should not be reversed');",
          "646:             assert.areEqual(66, a[6], 'a[6] is added during the reverse call, so it should not be reversed');",
          "647:             assert.areEqual(undefined, a[7], 'a[7] is undefined the reverse call, so it should remain undefined');",
          "648:         }",
          "649:     },",
          "650:     {",
          "651:         name: \"reverse : Making current array an ES5Array from prototype should be part of reverse\",",
          "652:         body: function ()",
          "653:         {",
          "654:             var getterCalled = false;",
          "655:             var a = [0, 1, 2, 3, 4];",
          "656:             a.length = 6;",
          "657:             var o = {};",
          "658:             Object.defineProperty(o, '5' , {",
          "659:                 get: function () {",
          "660:                     Object.defineProperty(a, '1', {",
          "661:                         get : function() { getterCalled = true; return 11;},",
          "662:                         set : function(ab) { }, configurable : true });",
          "663:                     return 51 ;",
          "664:                 }, set : function(ab) { }, configurable : true",
          "665:             });",
          "666:             a.__proto__ = o;",
          "668:             [].reverse.call(a);",
          "669:             a.__proto__ = Array.prototype;",
          "670:             assert.isTrue(getterCalled);",
          "671:             assert.areEqual([51,11,3,2,11,], a, 'getter on a[1] is called when introduced during prototype walk on reverse call');",
          "672:         }",
          "673:     },",
          "674:     {",
          "675:         name: \"reverse : Proxy object in the prototype chain\",",
          "676:         body: function ()",
          "677:         {",
          "678:             var getTrapCalled = false;",
          "679:             var arr = [11, 22, 33];",
          "680:             arr.length = 4;",
          "681:             var handler = {",
          "682:                 has : function() {",
          "683:                     return true;",
          "684:                 },",
          "685:                 get : function(target, name) {",
          "686:                     if (name == \"3\") {",
          "687:                         getTrapCalled = true;",
          "688:                         arr[4] = 55;",
          "689:                         arr[5] = 66;",
          "690:                         arr.length = 6;",
          "691:                         return 44;",
          "692:                     }",
          "693:                 }",
          "694:             };",
          "695:             var p = new Proxy({}, handler);",
          "696:             arr.__proto__ = p;",
          "697:             [].reverse.call(arr);",
          "698:             arr.__proto__ = Array.prototype;",
          "699:             assert.isTrue(getTrapCalled);",
          "700:             assert.areEqual([44,33,22,11,55,66], arr, 'Properties added in get trap should not part of the reverse logic (55 and 66 are remained on same position)');",
          "701:         }",
          "702:     },",
          "703:     {",
          "704:         name: \"shift : Mutating the array's length from prototype should not be part of shift\",",
          "705:         body: function ()",
          "706:         {",
          "707:             var getterCalled = false;",
          "708:             var a = [11, 22, 33];",
          "709:             a.length = 5;",
          "710:             var o = {};",
          "712:             Object.defineProperty(o, '4' , {",
          "713:                 get: function () {",
          "714:                     getterCalled = true;",
          "715:                     a[5] = 55;",
          "716:                     a[6] = 66;",
          "717:                     a.length = 8;",
          "718:                     return 44;",
          "719:                 }, set : function(ab) {}, configurable : true",
          "720:             });",
          "721:             a.__proto__ = o;",
          "722:             var r = [].shift.call(a);",
          "723:             a.__proto__ = Array.prototype;",
          "724:             assert.isTrue(getterCalled);",
          "725:             assert.areEqual([22,33,,44], a, 'a[5] and a[6] is not part of the shift');",
          "726:             assert.areEqual(4, a.length, 'We started with length == 5 and shift will decrement by 1');",
          "727:         }",
          "728:     },",
          "729:     {",
          "730:         name: \"unshift : Mutating the array's length from prototype should not be part of unshift\",",
          "731:         body: function ()",
          "732:         {",
          "733:             var getterCalled = false;",
          "734:             var arr = [11, 22, 33];",
          "735:             var obj = {};",
          "736:             arr.length = 4;",
          "737:             Object.defineProperty(obj, \"3\", {get : function() {",
          "738:                 getterCalled = true;",
          "739:                 arr[4] = 66;",
          "740:                 arr[5] = 77;",
          "741:                 return 55;",
          "742:                 }, set : function(bb) {}, configurable: true});",
          "743:             arr.__proto__ = obj;",
          "744:             var obj1 = [].unshift.call(arr, 201, 202);",
          "745:             arr.__proto__ = Array.prototype;",
          "747:             assert.isTrue(getterCalled);",
          "748:             assert.areEqual([201,202,11,,33,55], arr, '66 and 77 were added after length deduced so they are not part of unshift');",
          "749:             assert.areEqual(6, arr.length, 'we begin length == 4 and unshift adds 2 more');",
          "750:         }",
          "751:     },",
          "752:     {",
          "753:         name: \"sort : Mutating the array's length from prototype should not be part of actual sort\",",
          "754:         body: function ()",
          "755:         {",
          "756:             var getterCalled = false;",
          "757:             var arr = [33, 11, 22];",
          "758:             var obj = {};",
          "759:             arr.length = 4;",
          "760:             Object.defineProperty(obj, \"3\", {get : function() {",
          "761:                 getterCalled = true;",
          "762:                 arr[4] = 77;",
          "763:                 arr[5] = 16;",
          "764:                 return 101;",
          "765:             }, set : function(bb) {}, configurable: true});",
          "766:             arr.__proto__ = obj;",
          "767:             var obj1 = [].sort.call(arr);",
          "768:             arr.__proto__ = Array.prototype;",
          "770:             assert.isTrue(getterCalled);",
          "771:             assert.areEqual([101,11,22,,77,16], arr, '77 and 16 are not part of the sort so they are not sorted');",
          "772:             assert.areEqual(6, arr.length);",
          "773:         }",
          "774:     },",
          "",
          "---------------"
        ],
        "test/Array/protoLookupWithGetters.baseline||test/Array/protoLookupWithGetters.baseline": [
          "File: test/Array/protoLookupWithGetters.baseline -> test/Array/protoLookupWithGetters.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: Test case 10",
          "55: 1,a1,O3,4,a4,O6,7,a7,O9,10,a10,O12,13,a13,O15,16,a16,O18,19",
          "56: 19",
          "58: 20",
          "60: 20",
          "61: a4,O6",
          "62: 2",
          "64: 16",
          "66: 6",
          "68: 19",
          "69: a13,O15",
          "70: 2",
          "",
          "[Removed Lines]",
          "57: 10,1,a1,O3,4,a4,O6,7,a7,O9,10,a10,O12,13,a13,O15,16,a16,O18,19",
          "59: 10,1,a1,O3,4,a,b,7,a7,O9,10,a10,O12,13,a13,O15,16,a16,O18,19",
          "63: 10,1,a1,O3,4,a,b,a,b,13,a13,O15,16,a16,O18,19",
          "65: 7,a7,O9,10,a10,O12",
          "67: 10,1,a1,O3,4,a,b,a,b,13,a,b,c,e,f,16,a16,O18,19",
          "",
          "[Added Lines]",
          "57: 10,a1,a1,O3,a4,a4,O6,a7,a7,O9,a10,a10,O12,a13,a13,O15,a16,a16,O18,a19",
          "59: 10,a1,a1,O3,a4,a,b,a7,a7,O9,a10,a10,O12,a13,a13,O15,a16,a16,O18,a19",
          "63: 10,a1,a1,O3,a4,a,b,a,b,a13,a13,O15,a16,a16,O18,a19",
          "65: a7,a7,O9,a10,a10,O12",
          "67: 10,a1,a1,O3,a4,a,b,a,b,a13,a,b,c,e,f,a16,a16,O18,a19",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: 10,40,a1,10,O3,a4",
          "82: O0,a1,10,O3,a4",
          "83: 5",
          "85: 5",
          "86: O0,a1,2,3,4",
          "87: 5",
          "89: 5",
          "90: 1,2,3,O0,a1,10",
          "",
          "[Removed Lines]",
          "84: a4,O3,10,a1,O0",
          "88: 4,3,2,a1,O0",
          "",
          "[Added Lines]",
          "84: O0,a1,10,O3,a4",
          "88: O0,a1,2,a1,O0",
          "",
          "---------------"
        ],
        "test/Array/protoLookupWithGetters.js||test/Array/protoLookupWithGetters.js": [
          "File: test/Array/protoLookupWithGetters.js -> test/Array/protoLookupWithGetters.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: }",
          "181: for(var i = 0; i< 20; i = i+3)",
          "182: {",
          "184: }",
          "186: for(var i = 1; i< 20; i = i+3)",
          "187: {",
          "189: }",
          "191: arr.shift();",
          "",
          "[Removed Lines]",
          "183:   Object.defineProperty(Object.prototype, i, { get: function (i) { return function () { return \"O\"+i; } }(i), configurable: true, enumerable: true });",
          "188:   Object.defineProperty(Array.prototype, i, { get: function (i) { return function () { return \"a\"+i; } }(i), configurable: true, enumerable: true });",
          "",
          "[Added Lines]",
          "183:   Object.defineProperty(Object.prototype, i, { get: function (i) { return function () { return \"O\"+i; } }(i), set : function(ab) {}, configurable: true, enumerable: true });",
          "188:   Object.defineProperty(Array.prototype, i, { get: function (i) { return function () { return \"a\"+i; } }(i), set : function(ab) {}, configurable: true, enumerable: true });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2896a87f752272b179083db0678ddbf6083df4b",
      "candidate_info": {
        "commit_hash": "a2896a87f752272b179083db0678ddbf6083df4b",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/a2896a87f752272b179083db0678ddbf6083df4b",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp"
        ],
        "message": "fix warning in build after merging 17-03 servicing fixes",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3169:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "3170:             {",
          "3172:                 if (!JavascriptNativeIntArray::Is(pDestArray))",
          "3173:                 {",
          "3174:                     ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, spreadableCheckedAndTrue);",
          "",
          "[Removed Lines]",
          "3171:                 spreadableCheckedAndTrue = JavascriptOperators::IsConcatSpreadable(aItem);",
          "",
          "[Added Lines]",
          "3171:                 spreadableCheckedAndTrue = JavascriptOperators::IsConcatSpreadable(aItem) != FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3245:             if (scriptContext->GetConfig()->IsES6IsConcatSpreadableEnabled())",
          "3246:             {",
          "3248:                 if (!JavascriptNativeFloatArray::Is(pDestArray))",
          "3249:                 {",
          "3250:                     ConcatArgs<uint>(pDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, spreadableCheckedAndTrue);",
          "",
          "[Removed Lines]",
          "3247:                 spreadableCheckedAndTrue = JavascriptOperators::IsConcatSpreadable(aItem);",
          "",
          "[Added Lines]",
          "3247:                 spreadableCheckedAndTrue = JavascriptOperators::IsConcatSpreadable(aItem) != FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88900fdcbb218b758d5ef0bb1cb4d4b7303c339c",
      "candidate_info": {
        "commit_hash": "88900fdcbb218b758d5ef0bb1cb4d4b7303c339c",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/88900fdcbb218b758d5ef0bb1cb4d4b7303c339c",
        "files": [
          "lib/Common/DataStructures/BaseDictionary.h",
          "lib/Common/DataStructures/DoublyLinkedList.inl",
          "lib/Common/DataStructures/List.h",
          "lib/Common/DataStructures/SList.h",
          "lib/Common/DataStructures/SparseBitVector.h",
          "lib/Common/Memory/RecyclerPointers.h",
          "lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/Base/ThreadContext.h",
          "lib/Runtime/Library/ConcatString.h",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.inl",
          "lib/Runtime/Library/SparseArraySegment.h",
          "lib/Runtime/Types/DynamicObject.cpp"
        ],
        "message": "swb: WriteBarrierPtr: swap \"&\" and AddressOf\n\nOverriding \"&\" operator keeps running into new trouble. This change\nremoves \"&\" operator override and switches \"AddressOf\" to do that.",
        "before_after_code_files": [
          "lib/Common/DataStructures/BaseDictionary.h||lib/Common/DataStructures/BaseDictionary.h",
          "lib/Common/DataStructures/DoublyLinkedList.inl||lib/Common/DataStructures/DoublyLinkedList.inl",
          "lib/Common/DataStructures/List.h||lib/Common/DataStructures/List.h",
          "lib/Common/DataStructures/SList.h||lib/Common/DataStructures/SList.h",
          "lib/Common/DataStructures/SparseBitVector.h||lib/Common/DataStructures/SparseBitVector.h",
          "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h",
          "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/Base/ThreadContext.h||lib/Runtime/Base/ThreadContext.h",
          "lib/Runtime/Library/ConcatString.h||lib/Runtime/Library/ConcatString.h",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.inl||lib/Runtime/Library/JavascriptArray.inl",
          "lib/Runtime/Library/SparseArraySegment.h||lib/Runtime/Library/SparseArraySegment.h",
          "lib/Runtime/Types/DynamicObject.cpp||lib/Runtime/Types/DynamicObject.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Common/DataStructures/BaseDictionary.h||lib/Common/DataStructures/BaseDictionary.h": [
          "File: lib/Common/DataStructures/BaseDictionary.h -> lib/Common/DataStructures/BaseDictionary.h"
        ],
        "lib/Common/DataStructures/DoublyLinkedList.inl||lib/Common/DataStructures/DoublyLinkedList.inl": [
          "File: lib/Common/DataStructures/DoublyLinkedList.inl -> lib/Common/DataStructures/DoublyLinkedList.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     template<class T, class TAllocator>",
          "51:     void DoublyLinkedList<T, TAllocator>::LinkToBeginning(T *const element)",
          "52:     {",
          "54:     }",
          "56:     template<class T, class TAllocator>",
          "57:     void DoublyLinkedList<T, TAllocator>::LinkToEnd(T *const element)",
          "58:     {",
          "60:     }",
          "62:     template<class T, class TAllocator>",
          "63:     void DoublyLinkedList<T, TAllocator>::LinkBefore(T *const element, T *const nextElement)",
          "64:     {",
          "66:     }",
          "68:     template<class T, class TAllocator>",
          "69:     void DoublyLinkedList<T, TAllocator>::LinkAfter(T *const element, T *const previousElement)",
          "70:     {",
          "72:     }",
          "74:     template<class T, class TAllocator>",
          "",
          "[Removed Lines]",
          "53:         T::LinkToBeginning(element, AddressOf(head), AddressOf(tail));",
          "59:         T::LinkToEnd(element, AddressOf(head), AddressOf(tail));",
          "65:         T::LinkBefore(element, nextElement, AddressOf(head), AddressOf(tail));",
          "71:         T::LinkAfter(element, previousElement, AddressOf(head), AddressOf(tail));",
          "",
          "[Added Lines]",
          "53:         T::LinkToBeginning(element, &head, &tail);",
          "59:         T::LinkToEnd(element, &head, &tail);",
          "65:         T::LinkBefore(element, nextElement, &head, &tail);",
          "71:         T::LinkAfter(element, previousElement, &head, &tail);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     {",
          "77:         T *const element = head;",
          "78:         if(element)",
          "80:         return element;",
          "81:     }",
          "",
          "[Removed Lines]",
          "79:             T::UnlinkFromBeginning(element, AddressOf(head), AddressOf(tail));",
          "",
          "[Added Lines]",
          "79:             T::UnlinkFromBeginning(element, &head, &tail);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:     {",
          "86:         T *const element = tail;",
          "87:         if(element)",
          "89:         return element;",
          "90:     }",
          "92:     template<class T, class TAllocator>",
          "93:     void DoublyLinkedList<T, TAllocator>::UnlinkPartial(T *const element)",
          "94:     {",
          "96:     }",
          "98:     template<class T, class TAllocator>",
          "99:     void DoublyLinkedList<T, TAllocator>::Unlink(T *const element)",
          "100:     {",
          "102:     }",
          "104:     template<class T, class TAllocator>",
          "105:     void DoublyLinkedList<T, TAllocator>::MoveToBeginning(T *const element)",
          "106:     {",
          "108:     }",
          "110:     template<class T, class TAllocator>",
          "111:     void DoublyLinkedList<T, TAllocator>::UnlinkSubsequenceFromEnd(T *const first)",
          "112:     {",
          "114:     }",
          "116:     template<class T, class TAllocator>",
          "117:     void DoublyLinkedList<T, TAllocator>::UnlinkSubsequence(T *const first, T *const last)",
          "118:     {",
          "120:     }",
          "122:     template<class T, class TAllocator>",
          "123:     void DoublyLinkedList<T, TAllocator>::MoveSubsequenceToBeginning(T *const first, T *const last)",
          "124:     {",
          "126:     }",
          "127: }",
          "",
          "[Removed Lines]",
          "88:             T::UnlinkFromEnd(element, AddressOf(head), AddressOf(tail));",
          "95:         T::UnlinkPartial(element, AddressOf(head), AddressOf(tail));",
          "101:         T::Unlink(element, AddressOf(head), AddressOf(tail));",
          "107:         T::MoveToBeginning(element, AddressOf(head), AddressOf(tail));",
          "113:         T::UnlinkSubsequenceFromEnd(first, AddressOf(head), AddressOf(tail));",
          "119:         T::UnlinkSubsequence(first, last, AddressOf(head), AddressOf(tail));",
          "125:         T::MoveSubsequenceToBeginning(first, last, AddressOf(head), AddressOf(tail));",
          "",
          "[Added Lines]",
          "88:             T::UnlinkFromEnd(element, &head, &tail);",
          "95:         T::UnlinkPartial(element, &head, &tail);",
          "101:         T::Unlink(element, &head, &tail);",
          "107:         T::MoveToBeginning(element, &head, &tail);",
          "113:         T::UnlinkSubsequenceFromEnd(first, &head, &tail);",
          "119:         T::UnlinkSubsequence(first, last, &head, &tail);",
          "125:         T::MoveSubsequenceToBeginning(first, last, &head, &tail);",
          "",
          "---------------"
        ],
        "lib/Common/DataStructures/List.h||lib/Common/DataStructures/List.h": [
          "File: lib/Common/DataStructures/List.h -> lib/Common/DataStructures/List.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:         const T* GetBuffer() const",
          "54:         {",
          "56:         }",
          "58:         template<class TList>",
          "",
          "[Removed Lines]",
          "55:             return &this->buffer[0];",
          "",
          "[Added Lines]",
          "55:             return AddressOf(this->buffer[0]);",
          "",
          "---------------"
        ],
        "lib/Common/DataStructures/SList.h||lib/Common/DataStructures/SList.h": [
          "File: lib/Common/DataStructures/SList.h -> lib/Common/DataStructures/SList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:                 const_cast<NodeBase *>(last)->Next() = newNode;",
          "176:                 const_cast<SListBase *>(this->list)->IncrementCount();",
          "177:                 last = newNode;",
          "179:             }",
          "180:             return nullptr;",
          "181:         }",
          "",
          "[Removed Lines]",
          "178:                 return AddressOf(newNode->data);",
          "",
          "[Added Lines]",
          "178:                 return &newNode->data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:                 const_cast<NodeBase *>(last)->Next() = newNode;",
          "191:                 const_cast<SListBase *>(this->list)->IncrementCount();",
          "192:                 last = newNode;",
          "194:             }",
          "195:             return nullptr;",
          "196:         }",
          "",
          "[Removed Lines]",
          "193:                 return AddressOf(newNode->data);",
          "",
          "[Added Lines]",
          "193:                 return &newNode->data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:                 const_cast<NodeBase *>(last)->Next() = newNode;",
          "207:                 const_cast<SListBase *>(this->list)->IncrementCount();",
          "208:                 last = newNode;",
          "210:             }",
          "211:             return nullptr;",
          "212:         }",
          "",
          "[Removed Lines]",
          "209:                 return AddressOf(newNode->data);",
          "",
          "[Added Lines]",
          "209:                 return &newNode->data;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:             newNode->Next() = this->Next();",
          "337:             this->Next() = newNode;",
          "338:             this->IncrementCount();",
          "340:         }",
          "341:         return nullptr;",
          "342:     }",
          "",
          "[Removed Lines]",
          "339:             return AddressOf(newNode->data);",
          "",
          "[Added Lines]",
          "339:             return &newNode->data;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "350:             newNode->Next() = this->Next();",
          "351:             this->Next() = newNode;",
          "352:             this->IncrementCount();",
          "354:         }",
          "355:         return nullptr;",
          "356:     }",
          "",
          "[Removed Lines]",
          "353:             return AddressOf(newNode->data);",
          "",
          "[Added Lines]",
          "353:             return &newNode->data;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "364:             newNode->Next() = this->Next();",
          "365:             this->Next() = newNode;",
          "366:             this->IncrementCount();",
          "368:         }",
          "369:         return nullptr;",
          "370:     }",
          "",
          "[Removed Lines]",
          "367:             return AddressOf(newNode->data);",
          "",
          "[Added Lines]",
          "367:             return &newNode->data;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "439:         {",
          "440:             if (predicate(iter.Data()))",
          "441:             {",
          "443:                 iter.MoveCurrentTo(toList);",
          "444:                 return data;",
          "445:             }",
          "",
          "[Removed Lines]",
          "442:                 Field(TData, TAllocator)* data = AddressOf(iter.Data());",
          "",
          "[Added Lines]",
          "442:                 Field(TData, TAllocator)* data = &iter.Data();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "455:         {",
          "456:             if(predicate(iter.Data()))",
          "457:             {",
          "459:             }",
          "460:         }",
          "461:         return nullptr;",
          "",
          "[Removed Lines]",
          "458:                 return AddressOf(iter.Data());",
          "",
          "[Added Lines]",
          "458:                 return &iter.Data();",
          "",
          "---------------"
        ],
        "lib/Common/DataStructures/SparseBitVector.h||lib/Common/DataStructures/SparseBitVector.h": [
          "File: lib/Common/DataStructures/SparseBitVector.h -> lib/Common/DataStructures/SparseBitVector.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:    alloc(allocator),",
          "323:    head(nullptr)",
          "324: {",
          "326: }",
          "328: template <class TAllocator>",
          "",
          "[Removed Lines]",
          "325:     this->lastUsedNodePrevNextField = AddressOf(this->head);",
          "",
          "[Added Lines]",
          "325:     this->lastUsedNodePrevNextField = &this->head;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:         if (curNode->startIndex > searchIndex)",
          "373:         {",
          "375:             curNode = this->head;",
          "376:         }",
          "377:     }",
          "378:     else",
          "379:     {",
          "381:         curNode = this->head;",
          "382:     }",
          "384:     for (; curNode && searchIndex > curNode->startIndex; curNode = curNode->next)",
          "385:     {",
          "387:     }",
          "389:     if(curNode && searchIndex == curNode->startIndex)",
          "",
          "[Removed Lines]",
          "374:             prevNextField = AddressOf(this->head);",
          "380:         prevNextField = AddressOf(this->head);",
          "386:         prevNextField = AddressOf(curNode->next);",
          "",
          "[Added Lines]",
          "374:             prevNextField = &this->head;",
          "380:         prevNextField = &this->head;",
          "386:         prevNextField = &curNode->next;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "411: {",
          "412:     const BVIndex searchIndex = SparseBVUnit::Floor(i);",
          "415:     const BVSparseNode * curNode = *prevNextField;",
          "416:     if (curNode != nullptr)",
          "417:     {",
          "",
          "[Removed Lines]",
          "414:     Field(BVSparseNode*, TAllocator) const* prevNextField = AddressOf(this->head);",
          "",
          "[Added Lines]",
          "414:     Field(BVSparseNode*, TAllocator) const* prevNextField = &this->head;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "424:         if (curNode->startIndex > searchIndex)",
          "425:         {",
          "427:             curNode = this->head;",
          "428:         }",
          "429:     }",
          "430:     else",
          "431:     {",
          "433:         curNode = this->head;",
          "434:     }",
          "436:     for (; curNode && searchIndex > curNode->startIndex; curNode = curNode->next)",
          "437:     {",
          "439:     }",
          "441:     if (curNode && searchIndex == curNode->startIndex)",
          "",
          "[Removed Lines]",
          "426:             prevNextField = AddressOf(this->head);",
          "432:         prevNextField = AddressOf(this->head);",
          "438:         prevNextField = AddressOf(curNode->next);",
          "",
          "[Added Lines]",
          "426:             prevNextField = &this->head;",
          "432:         prevNextField = &this->head;",
          "438:         prevNextField = &curNode->next;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "490:     if (bResetLastUsed)",
          "491:     {",
          "493:     }",
          "494:     else",
          "495:     {",
          "497:     }",
          "498:     return next;",
          "499: }",
          "",
          "[Removed Lines]",
          "492:         this->lastUsedNodePrevNextField = AddressOf(this->head);",
          "496:         Assert(this->lastUsedNodePrevNextField != AddressOf(node->next));",
          "",
          "[Added Lines]",
          "492:         this->lastUsedNodePrevNextField = &this->head;",
          "496:         Assert(this->lastUsedNodePrevNextField != &node->next);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "561:         QueueInFreeList(node);",
          "562:     }",
          "563:     this->head = nullptr;",
          "565: }",
          "567: template <class TAllocator>",
          "",
          "[Removed Lines]",
          "564:     this->lastUsedNodePrevNextField = AddressOf(this->head);",
          "",
          "[Added Lines]",
          "564:     this->lastUsedNodePrevNextField = &this->head;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "656:           BVSparseNode * node1      = this->head;",
          "657:     const BVSparseNode * node2      = bv2->head;",
          "660:     while(node1 != nullptr && node2 != nullptr)",
          "661:     {",
          "662:         if(node2->startIndex == node1->startIndex)",
          "663:         {",
          "664:             (node1->data.*callback)(node2->data);",
          "666:             node1 = node1->next;",
          "667:             node2 = node2->next;",
          "668:         }",
          "",
          "[Removed Lines]",
          "658:           Field(BVSparseNode*, TAllocator)* prevNodeNextField = AddressOf(this->head);",
          "665:             prevNodeNextField = AddressOf(node1->next);",
          "",
          "[Added Lines]",
          "658:           Field(BVSparseNode*, TAllocator)* prevNodeNextField = &this->head;",
          "665:             prevNodeNextField = &node1->next;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "676:             }",
          "677:             else",
          "678:             {",
          "680:                 node1 = node1->next;",
          "681:             }",
          "",
          "[Removed Lines]",
          "679:                 prevNodeNextField = AddressOf(node1->next);",
          "",
          "[Added Lines]",
          "679:                 prevNodeNextField = &node1->next;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "688:                 BVSparseNode * newNode = Allocate(node2->startIndex, node1);",
          "689:                 (newNode->data.*callback)(node2->data);",
          "692:             }",
          "693:             node2 = node2->next;",
          "694:         }",
          "",
          "[Removed Lines]",
          "691:                 prevNodeNextField = AddressOf(newNode->next);",
          "",
          "[Added Lines]",
          "691:                 prevNodeNextField = &newNode->next;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "713:             (newNode->data.*callback)(node2->data);",
          "714:             node2       = node2->next;",
          "716:         }",
          "717:     }",
          "718: }",
          "",
          "[Removed Lines]",
          "715:             prevNodeNextField    = AddressOf(newNode->next);",
          "",
          "[Added Lines]",
          "715:             prevNodeNextField    = &newNode->next;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "729:           BVSparseNode * node1      = bv1->head;",
          "730:     const BVSparseNode * node2      = bv2->head;",
          "731:           BVSparseNode * lastNode   = nullptr;",
          "734:     while(node1 != nullptr && node2 != nullptr)",
          "735:     {",
          "",
          "[Removed Lines]",
          "732:           Field(BVSparseNode*, TAllocator)* prevNextField = AddressOf(this->head);",
          "",
          "[Added Lines]",
          "732:           Field(BVSparseNode*, TAllocator)* prevNextField = &this->head;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "765:             BVSparseNode * newNode = Allocate(startIndex, nullptr);",
          "766:             newNode->data = bvUnit1;",
          "769:         }",
          "770:     }",
          "",
          "[Removed Lines]",
          "768:             prevNextField = AddressOf(newNode->next);",
          "",
          "[Added Lines]",
          "768:             prevNextField = &newNode->next;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "781:                 BVSparseNode * newNode = Allocate(copyNode->startIndex, nullptr);",
          "782:                 newNode->data = copyNode->data;",
          "785:             }",
          "786:             copyNode = copyNode->next;",
          "787:         }",
          "",
          "[Removed Lines]",
          "784:                 prevNextField = AddressOf(newNode->next);",
          "",
          "[Added Lines]",
          "784:                 prevNextField = &newNode->next;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "894:           BVSparseNode * node1      = this->head;",
          "895:     const BVSparseNode * node2      = bv2->head;",
          "898:     while (node1 != nullptr && node2 != nullptr)",
          "899:     {",
          "",
          "[Removed Lines]",
          "896:           Field(BVSparseNode*, TAllocator)* prevNextField = AddressOf(this->head);",
          "",
          "[Added Lines]",
          "896:           Field(BVSparseNode*, TAllocator)* prevNextField = &this->head;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "901:         {",
          "902:             node1->startIndex = node2->startIndex;",
          "903:             node1->data.Copy(node2->data);",
          "905:             node1 = node1->next;",
          "906:         }",
          "",
          "[Removed Lines]",
          "904:             prevNextField = AddressOf(node1->next);",
          "",
          "[Added Lines]",
          "904:             prevNextField = &node1->next;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "925:                 BVSparseNode * newNode = Allocate(node2->startIndex, nullptr);",
          "926:                 newNode->data.Copy(node2->data);",
          "929:             }",
          "930:             node2 = node2->next;",
          "931:         }",
          "",
          "[Removed Lines]",
          "928:                 prevNextField = AddressOf(newNode->next);",
          "",
          "[Added Lines]",
          "928:                 prevNextField = &newNode->next;",
          "",
          "---------------"
        ],
        "lib/Common/Memory/RecyclerPointers.h||lib/Common/Memory/RecyclerPointers.h": [
          "File: lib/Common/Memory/RecyclerPointers.h -> lib/Common/Memory/RecyclerPointers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:     T * operator->() const { return ptr; }",
          "319:     operator T* const & () const { return ptr; }",
          "327:     {",
          "328:         return &ptr;",
          "329:     }",
          "339:     WriteBarrierPtr& operator=(T * ptr)",
          "",
          "[Removed Lines]",
          "321:     const WriteBarrierPtr* AddressOf() const { return this; }",
          "322:     WriteBarrierPtr* AddressOf() { return this; }",
          "326:     T* const * operator&() const",
          "",
          "[Added Lines]",
          "323:     T* const * AddressOf() const",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: template <class T>",
          "405: struct _AddressOfType",
          "406: {",
          "409: };",
          "411: template <class T>",
          "412: struct _AddressOfType< WriteBarrierPtr<T> >",
          "413: {",
          "419:     {",
          "420:         return val.AddressOf();",
          "421:     }",
          "422: };",
          "424: template <class T>",
          "429: template <class T>",
          "430: inline T* const& PointerValue(T* const& ptr) { return ptr; }",
          "",
          "[Removed Lines]",
          "407:     inline static T* AddressOf(T& val) { return &val; }",
          "408:     inline static const T* AddressOf(const T& val) { return &val; }",
          "414:     inline static WriteBarrierPtr<T>* AddressOf(WriteBarrierPtr<T>& val)",
          "415:     {",
          "416:         return val.AddressOf();",
          "417:     }",
          "418:     inline static const WriteBarrierPtr<T>* AddressOf(const WriteBarrierPtr<T>& val)",
          "425: inline T* AddressOf(T& val) { return _AddressOfType<T>::AddressOf(val); }",
          "426: template <class T>",
          "427: inline const T* AddressOf(const T& val) { return _AddressOfType<T>::AddressOf(val); }",
          "",
          "[Added Lines]",
          "398:     typedef T ValueType;",
          "399:     inline static const ValueType* AddressOf(const T& val) { return &val; }",
          "405:     typedef T* ValueType;",
          "406:     inline static const ValueType* AddressOf(const WriteBarrierPtr<T>& val)",
          "413: inline const typename _AddressOfType<T>::ValueType* AddressOf(const T& val)",
          "414: {",
          "415:   return _AddressOfType<T>::AddressOf(val);",
          "416: }",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp": [
          "File: lib/Runtime/Base/FunctionBody.cpp -> lib/Runtime/Base/FunctionBody.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1602:     {",
          "1603:         this->m_displayNameLength = displayNameLength;",
          "1604:         this->m_displayShortNameOffset = displayShortNameOffset;",
          "1606:     }",
          "1608:     LPCWSTR DeferDeserializeFunctionInfo::GetSourceInfo(int& lineNumber, int& columnNumber) const",
          "",
          "[Removed Lines]",
          "1605:         FunctionProxy::SetDisplayName(pszDisplayName, AddressOf(this->m_displayName), displayNameLength, m_scriptContext, flags);",
          "",
          "[Added Lines]",
          "1605:         FunctionProxy::SetDisplayName(pszDisplayName, &this->m_displayName, displayNameLength, m_scriptContext, flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2213:     {",
          "2214:         this->m_displayNameLength = displayNameLength;",
          "2215:         this->m_displayShortNameOffset = displayShortNameOffset;",
          "2217:     }",
          "",
          "[Removed Lines]",
          "2216:         FunctionProxy::SetDisplayName(pszDisplayName, AddressOf(this->m_displayName), displayNameLength, m_scriptContext, flags);",
          "",
          "[Added Lines]",
          "2216:         FunctionProxy::SetDisplayName(pszDisplayName, &this->m_displayName, displayNameLength, m_scriptContext, flags);",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/ThreadContext.h||lib/Runtime/Base/ThreadContext.h": [
          "File: lib/Runtime/Base/ThreadContext.h -> lib/Runtime/Base/ThreadContext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1329:         Assert(recyclableData->tempUncaughtException == nullptr);",
          "1331:         recyclableData->tempUncaughtException = exceptionObject;",
          "1333:     }",
          "1335:     bool HasCatchHandler() const { return hasCatchHandler; }",
          "",
          "[Removed Lines]",
          "1332:         return AddressOf(recyclableData->tempUncaughtException);",
          "",
          "[Added Lines]",
          "1332:         return &recyclableData->tempUncaughtException;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/ConcatString.h||lib/Runtime/Library/ConcatString.h": [
          "File: lib/Runtime/Library/ConcatString.h -> lib/Runtime/Library/ConcatString.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         virtual void CopyVirtual(_Out_writes_(m_charLength) char16 *const buffer, StringCopyInfoStack &nestedStringTreeCopyInfos, const byte recursionDepth) override",
          "61:         {",
          "63:         }",
          "64:         virtual int GetRandomAccessItemsFromConcatString(Js::JavascriptString * const *& items) const",
          "65:         {",
          "67:             return N;",
          "68:         }",
          "",
          "[Removed Lines]",
          "62:             __super::CopyImpl(buffer, N, &m_slots[0], nestedStringTreeCopyInfos, recursionDepth);",
          "66:             items = &m_slots[0];",
          "",
          "[Added Lines]",
          "62:             __super::CopyImpl(buffer, N, AddressOf(m_slots[0]), nestedStringTreeCopyInfos, recursionDepth);",
          "66:             items = AddressOf(m_slots[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:         virtual void CopyVirtual(_Out_writes_(m_charLength) char16 *const buffer, StringCopyInfoStack &nestedStringTreeCopyInfos, const byte recursionDepth) override",
          "203:         {",
          "204:             Assert(IsFilled());",
          "206:         }",
          "207:         virtual int GetRandomAccessItemsFromConcatString(Js::JavascriptString * const *& items) const",
          "208:         {",
          "209:             Assert(IsFilled());",
          "211:             return slotCount;",
          "212:         }",
          "",
          "[Removed Lines]",
          "205:             __super::CopyImpl(buffer, slotCount, &m_slots[0], nestedStringTreeCopyInfos, recursionDepth);",
          "210:             items = &m_slots[0];",
          "",
          "[Added Lines]",
          "205:             __super::CopyImpl(buffer, slotCount, AddressOf(m_slots[0]), nestedStringTreeCopyInfos, recursionDepth);",
          "210:             items = AddressOf(m_slots[0]);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2663:             SparseArraySegmentBase* next = GetBeginLookupSegment(newLength - 1); // head, or next.left < newLength",
          "2666:             while(next != nullptr)",
          "2667:             {",
          "",
          "[Removed Lines]",
          "2664:             Field(SparseArraySegmentBase*)* prev = AddressOf(head);",
          "",
          "[Added Lines]",
          "2664:             Field(SparseArraySegmentBase*)* prev = &head;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2686:                 }",
          "2687:                 else",
          "2688:                 {",
          "2690:                     next = next->next;",
          "2691:                 }",
          "2692:             }",
          "",
          "[Removed Lines]",
          "2689:                     prev = AddressOf(next->next);",
          "",
          "[Added Lines]",
          "2689:                     prev = &next->next;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6751:                 {",
          "6752:                     if (isIntArray)",
          "6753:                     {",
          "6755:                     }",
          "6756:                     else if (isFloatArray)",
          "6757:                     {",
          "6759:                     }",
          "6760:                     else",
          "6761:                     {",
          "6763:                     }",
          "",
          "[Removed Lines]",
          "6754:                         ArraySegmentSpliceHelper<int32>(newArr, SparseArraySegment<int32>::From(pArr->head), (SparseArraySegment<int32>**)AddressOf(pArr->head), start, deleteLen, insertArgs, insertLen, recycler);",
          "6758:                         ArraySegmentSpliceHelper<double>(newArr, SparseArraySegment<double>::From(pArr->head), (SparseArraySegment<double>**)AddressOf(pArr->head), start, deleteLen, insertArgs, insertLen, recycler);",
          "6762:                         ArraySegmentSpliceHelper<Var>(newArr, SparseArraySegment<Var>::From(pArr->head), (SparseArraySegment<Var>**)AddressOf(pArr->head), start, deleteLen, insertArgs, insertLen, recycler);",
          "",
          "[Added Lines]",
          "6754:                         ArraySegmentSpliceHelper<int32>(newArr, SparseArraySegment<int32>::From(pArr->head), (SparseArraySegment<int32>**)&pArr->head, start, deleteLen, insertArgs, insertLen, recycler);",
          "6758:                         ArraySegmentSpliceHelper<double>(newArr, SparseArraySegment<double>::From(pArr->head), (SparseArraySegment<double>**)&pArr->head, start, deleteLen, insertArgs, insertLen, recycler);",
          "6762:                         ArraySegmentSpliceHelper<Var>(newArr, SparseArraySegment<Var>::From(pArr->head), (SparseArraySegment<Var>**)&pArr->head, start, deleteLen, insertArgs, insertLen, recycler);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6937:         Recycler *recycler  = scriptContext->GetRecycler();",
          "6941:         SparseArraySegmentBase* savePrev = nullptr;",
          "6943:         Assert(pArr->head); // We should never have a null head.",
          "",
          "[Removed Lines]",
          "6939:         Field(SparseArraySegmentBase*)* prevSeg  = AddressOf(pArr->head);        // holds the next pointer of previous",
          "6940:         Field(SparseArraySegmentBase*)* prevPrevSeg  = AddressOf(pArr->head);    // this holds the previous pointer to prevSeg dirty trick.",
          "",
          "[Added Lines]",
          "6939:         Field(SparseArraySegmentBase*)* prevSeg  = &pArr->head;        // holds the next pointer of previous",
          "6940:         Field(SparseArraySegmentBase*)* prevPrevSeg  = &pArr->head;    // this holds the previous pointer to prevSeg dirty trick.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6956:         {",
          "6957:             savePrev = startSeg;",
          "6958:             prevPrevSeg = prevSeg;",
          "6960:             startSeg = SparseArraySegment<T>::From(startSeg->next);",
          "6962:             if (startSeg)",
          "",
          "[Removed Lines]",
          "6959:             prevSeg = AddressOf(startSeg->next);",
          "",
          "[Added Lines]",
          "6959:             prevSeg = &startSeg->next;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7023:             else",
          "7024:             {",
          "7025:                 SparseArraySegment<T>* newHeadSeg = nullptr; // pnewArr->head is null",
          "",
          "[Removed Lines]",
          "7026:                 Field(SparseArraySegmentBase*)* prevNewHeadSeg = AddressOf(pnewArr->head);",
          "",
          "[Added Lines]",
          "7026:                 Field(SparseArraySegmentBase*)* prevNewHeadSeg = &pnewArr->head;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7050:                         newHeadSeg = SparseArraySegment<T>::CopySegment(recycler, newHeadSeg, 0, startSeg, start, headDeleteLen);",
          "7051:                         newHeadSeg->next = nullptr;",
          "7054:                         startSeg->Truncate(start);",
          "7055:                     }",
          "7056:                     savePrev = startSeg;",
          "7057:                     prevPrevSeg = prevSeg;",
          "7059:                     startSeg = SparseArraySegment<T>::From(startSeg->next);",
          "7060:                 }",
          "",
          "[Removed Lines]",
          "7053:                         prevNewHeadSeg = AddressOf(newHeadSeg->next);",
          "7058:                     prevSeg = AddressOf(startSeg->next);",
          "",
          "[Added Lines]",
          "7053:                         prevNewHeadSeg = &newHeadSeg->next;",
          "7058:                     prevSeg = &startSeg->next;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7077:                         }",
          "7078:                         newHeadSeg = SparseArraySegment<T>::CopySegment(recycler, newHeadSeg, 0, startSeg, start, headDeleteLen);",
          "",
          "[Removed Lines]",
          "7080:                         prevNewHeadSeg = AddressOf(newHeadSeg->next);",
          "",
          "[Added Lines]",
          "7080:                         prevNewHeadSeg = &newHeadSeg->next;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7101:                     startSeg->left = startSeg->left - start;",
          "7102:                     startSeg->next = nullptr;",
          "",
          "[Removed Lines]",
          "7104:                     prevNewHeadSeg = AddressOf(startSeg->next);",
          "",
          "[Added Lines]",
          "7104:                     prevNewHeadSeg = &startSeg->next;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7121:                     savePrev = pArr->head;",
          "7122:                     prevPrevSeg = prevSeg;",
          "7124:                     dummyHeadNodeInserted = true;",
          "7125:                 }",
          "",
          "[Removed Lines]",
          "7123:                     prevSeg = AddressOf(pArr->head->next);",
          "",
          "[Added Lines]",
          "7123:                     prevSeg = &pArr->head->next;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7134:                     newHeadSeg = SparseArraySegment<T>::CopySegment(recycler, newHeadSeg, startSeg->left -  start, startSeg, startSeg->left, headDeleteLen);",
          "7135:                     newHeadSeg->next = nullptr;",
          "7140:                     MoveArray(startSeg->elements, startSeg->elements + headDeleteLen, startSeg->length - headDeleteLen);",
          "",
          "[Removed Lines]",
          "7137:                     prevNewHeadSeg = AddressOf(newHeadSeg->next);",
          "",
          "[Added Lines]",
          "7137:                     prevNewHeadSeg = &newHeadSeg->next;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7151:                     pArr->head = startSeg;",
          "7152:                     savePrev = nullptr;",
          "7154:                 }",
          "7156:                 while (startSeg)",
          "",
          "[Removed Lines]",
          "7153:                     prevSeg = AddressOf(pArr->head);",
          "",
          "[Added Lines]",
          "7153:                     prevSeg = &pArr->head;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.inl||lib/Runtime/Library/JavascriptArray.inl": [
          "File: lib/Runtime/Library/JavascriptArray.inl -> lib/Runtime/Library/JavascriptArray.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "517:             uint32 limit =  nextSeg->left + nextSeg->length;",
          "518:             if (index < limit)",
          "519:             {",
          "522:                 this->SetLastUsedSegment(nextSeg);",
          "",
          "[Removed Lines]",
          "520:                 const T * v = &((SparseArraySegment<T>*)nextSeg)->elements[index - nextSeg->left];",
          "",
          "[Added Lines]",
          "520:                 const T * v = AddressOf(((SparseArraySegment<T>*)nextSeg)->elements[index - nextSeg->left]);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/SparseArraySegment.h||lib/Runtime/Library/SparseArraySegment.h": [
          "File: lib/Runtime/Library/SparseArraySegment.h -> lib/Runtime/Library/SparseArraySegment.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         static T GetMissingItem();",
          "90:         static bool IsMissingItem(const T* value);",
          "92:         static uint32 GetAlignedSize(uint32 size);",
          "94:         static inline SparseArraySegment* From(SparseArraySegmentBase* seg)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:         template <class S>",
          "93:         static bool IsMissingItem(const WriteBarrierPtr<S>* value)",
          "94:         {",
          "95:             return IsMissingItem(AddressOf(value[0]));",
          "96:         }",
          "",
          "---------------"
        ],
        "lib/Runtime/Types/DynamicObject.cpp||lib/Runtime/Types/DynamicObject.cpp": [
          "File: lib/Runtime/Types/DynamicObject.cpp -> lib/Runtime/Types/DynamicObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "865:     Js::Var const* DynamicObject::GetAuxSlots_TTD() const",
          "866:     {",
          "868:     }",
          "870: #if ENABLE_OBJECT_SOURCE_TRACKING",
          "",
          "[Removed Lines]",
          "867:         return &this->auxSlots[0];",
          "",
          "[Added Lines]",
          "867:         return AddressOf(this->auxSlots[0]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80036bf378a3a1917f0a6d5dc930b047f86446b2",
      "candidate_info": {
        "commit_hash": "80036bf378a3a1917f0a6d5dc930b047f86446b2",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/80036bf378a3a1917f0a6d5dc930b047f86446b2",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h"
        ],
        "message": "Clean up JavascriptArray::DirectGetItemAt and ::DirectSetItemAt BigIndex overloads of JavascriptArray::DirectGetItemAt and ::DirectSetItemAt are not helpful for the goal of readable and secure codepaths. Remove all calls to the BigIndex overload of DirectGetItemAt Create an overloaded wrapper for DirectSetItemAt named GenericDirectSetItemAt Replace the handful of calls to BigIndex flavor of DirectSetItemAt to calls to the new wrapper.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:         return IsMissingHeadSegmentItemImpl<double>(index);",
          "780:     }",
          "801:     {",
          "802:         RecyclableObject* prototype = srcArray->GetPrototype();",
          "803:         while (start + count != end && JavascriptOperators::GetTypeId(prototype) != TypeIds_Null)",
          "",
          "[Removed Lines]",
          "782:     template<typename T>",
          "783:     void JavascriptArray::InternalFillFromPrototype(JavascriptArray *dstArray, const T& dstIndex, JavascriptArray *srcArray, uint32 start, uint32 end, uint32 count)",
          "784:     {",
          "785:         RecyclableObject* prototype = srcArray->GetPrototype();",
          "786:         while (start + count != end && JavascriptOperators::GetTypeId(prototype) != TypeIds_Null)",
          "787:         {",
          "788:             ForEachOwnMissingArrayIndexOfObject(srcArray, dstArray, prototype, start, end, dstIndex, [&](uint32 index, Var value) {",
          "789:                 T n = dstIndex + (index - start);",
          "790:                 dstArray->DirectSetItemAt(n, value);",
          "792:                 count++;",
          "793:             });",
          "795:             prototype = prototype->GetPrototype();",
          "796:         }",
          "797:     }",
          "799:     template<>",
          "800:     void JavascriptArray::InternalFillFromPrototype<uint32>(JavascriptArray *dstArray, const uint32& dstIndex, JavascriptArray *srcArray, uint32 start, uint32 end, uint32 count)",
          "",
          "[Added Lines]",
          "782:     void JavascriptArray::InternalFillFromPrototype(JavascriptArray *dstArray, uint32 dstIndex, JavascriptArray *srcArray, uint32 start, uint32 end, uint32 count)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3026:                 if (JavascriptNativeIntArray::Is(aItem))",
          "3027:                 {",
          "3028:                     JavascriptNativeIntArray *pItemArray = JavascriptNativeIntArray::FromVar(aItem);",
          "3030:                     idxDest = idxDest + pItemArray->length;",
          "3031:                 }",
          "3032:                 else if (JavascriptNativeFloatArray::Is(aItem))",
          "3033:                 {",
          "3034:                     JavascriptNativeFloatArray *pItemArray = JavascriptNativeFloatArray::FromVar(aItem);",
          "3036:                     idxDest = idxDest + pItemArray->length;",
          "3037:                 }",
          "3038:                 else",
          "3039:                 {",
          "3040:                     JavascriptArray* pItemArray = JavascriptArray::FromVar(aItem);",
          "3042:                     idxDest = idxDest + pItemArray->length;",
          "3043:                 }",
          "3044:             }",
          "",
          "[Removed Lines]",
          "3029:                     CopyNativeIntArrayElementsToVar(pDestArray, idxDest, pItemArray);",
          "3035:                     CopyNativeFloatArrayElementsToVar(pDestArray, idxDest, pItemArray);",
          "3041:                     CopyArrayElements(pDestArray, idxDest, pItemArray);",
          "",
          "[Added Lines]",
          "3011:                     CopyNativeIntArrayElementsToVar(pDestArray, BigIndex(idxDest).GetSmallIndex(), pItemArray);",
          "3017:                     CopyNativeFloatArrayElementsToVar(pDestArray, BigIndex(idxDest).GetSmallIndex(), pItemArray);",
          "3023:                     CopyArrayElements(pDestArray, BigIndex(idxDest).GetSmallIndex(), pItemArray);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3092:                             if (pDestArray)",
          "3093:                             {",
          "3095:                             }",
          "3096:                             else",
          "3097:                             {",
          "",
          "[Removed Lines]",
          "3094:                                 pDestArray->DirectSetItemAt(idxDest, subItem);",
          "",
          "[Added Lines]",
          "3076:                                 pDestArray->GenericDirectSetItemAt(idxDest, subItem);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3110:                             subItem = JavascriptOperators::GetProperty(itemObject, propertyRecord->GetPropertyId(), scriptContext);",
          "3111:                             if (pDestArray)",
          "3112:                             {",
          "3114:                             }",
          "3115:                             else",
          "3116:                             {",
          "",
          "[Removed Lines]",
          "3113:                                 pDestArray->DirectSetItemAt(idxDest, subItem);",
          "",
          "[Added Lines]",
          "3095:                                 pDestArray->GenericDirectSetItemAt(idxDest, subItem);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3560:             }",
          "3561:             if (pDestArray)",
          "3562:             {",
          "3564:             }",
          "3565:             else",
          "3566:             {",
          "",
          "[Removed Lines]",
          "3563:                 pDestArray->DirectSetItemAt(idxDest, pObj);",
          "",
          "[Added Lines]",
          "3545:                 pDestArray->GenericDirectSetItemAt(idxDest, pObj);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3571:         {",
          "3572:             if (pDestArray)",
          "3573:             {",
          "3575:             }",
          "3576:             else",
          "3577:             {",
          "",
          "[Removed Lines]",
          "3574:                 pDestArray->DirectSetItemAt(idxDest, aItem);",
          "",
          "[Added Lines]",
          "3556:                 pDestArray->GenericDirectSetItemAt(idxDest, aItem);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6852:                     for (uint32 i = maxInsertLen; i < insertLen; i++)",
          "6853:                     {",
          "6855:                         ++dstIndex;",
          "6856:                     }",
          "",
          "[Removed Lines]",
          "6854:                         pArr->DirectSetItemAt(dstIndex, insertArgs[i]);",
          "",
          "[Added Lines]",
          "6836:                         pArr->GenericDirectSetItemAt(dstIndex, insertArgs[i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9100:             {",
          "9101:                 if (pArr)",
          "9102:                 {",
          "9104:                     ++dstIndex;",
          "9105:                 }",
          "9106:                 else",
          "",
          "[Removed Lines]",
          "9103:                     pArr->DirectSetItemAt(dstIndex, fillValue);",
          "",
          "[Added Lines]",
          "9085:                     pArr->GenericDirectSetItemAt(dstIndex, fillValue);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "9117:             {",
          "9118:                 if (pArr)",
          "9119:                 {",
          "9121:                     ++dstIndex;",
          "9122:                 }",
          "9123:                 else",
          "",
          "[Removed Lines]",
          "9120:                     pArr->DirectSetItemAt(dstIndex, fillValue);",
          "",
          "[Added Lines]",
          "9102:                     pArr->GenericDirectSetItemAt(dstIndex, fillValue);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "9599:                 {",
          "9600:                     if (newArr)",
          "9601:                     {",
          "9603:                     }",
          "9604:                     else",
          "9605:                     {",
          "",
          "[Removed Lines]",
          "9602:                         newArr->DirectSetItemAt(i, element);",
          "",
          "[Added Lines]",
          "9584:                         newArr->GenericDirectSetItemAt(i, element);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "10471:     }",
          "10472: #endif",
          "10476:     {",
          "10477:         Assert(DynamicObject::IsAnyArray(obj) || JavascriptOperators::IsObject(obj));",
          "",
          "[Removed Lines]",
          "10474:     template <typename T, typename Fn>",
          "10475:     void JavascriptArray::ForEachOwnMissingArrayIndexOfObject(JavascriptArray *baseArray, JavascriptArray *destArray, RecyclableObject* obj, uint32 startIndex, uint32 limitIndex, T destIndex, Fn fn)",
          "",
          "[Added Lines]",
          "10456:     template <typename Fn>",
          "10457:     void JavascriptArray::ForEachOwnMissingArrayIndexOfObject(JavascriptArray *baseArray, JavascriptArray *destArray, RecyclableObject* obj, uint32 startIndex, uint32 limitIndex, uint32 destIndex, Fn fn)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10501:                     uint32 index = e.GetIndex();",
          "10502:                     if (!baseArray->DirectGetVarItemAt(index, &oldValue, baseArray->GetScriptContext()))",
          "10503:                     {",
          "10505:                         if (destArray == nullptr || !destArray->DirectGetItemAt(n, &oldValue))",
          "10506:                         {",
          "10507:                             fn(index, e.GetItem<Var>());",
          "",
          "[Removed Lines]",
          "10504:                         T n = destIndex + (index - startIndex);",
          "",
          "[Added Lines]",
          "10486:                         uint32 n = destIndex + (index - startIndex);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10527:                     if (!baseArray->DirectGetVarItemAt(index, &oldValue, baseArray->GetScriptContext()))",
          "10528:                     {",
          "10530:                         if (destArray == nullptr || !destArray->DirectGetItemAt(n, &oldValue))",
          "10531:                         {",
          "10532:                             Var value = nullptr;",
          "",
          "[Removed Lines]",
          "10529:                         T n = destIndex + (index - startIndex);",
          "",
          "[Added Lines]",
          "10511:                         uint32 n = destIndex + (index - startIndex);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "11008:     {",
          "11009:         Assert(start < end && end <= srcArray->length);",
          "",
          "[Removed Lines]",
          "11006:     template<typename T>",
          "11007:     void JavascriptArray::InternalCopyArrayElements(JavascriptArray* dstArray, const T& dstIndex, JavascriptArray* srcArray, uint32 start, uint32 end)",
          "",
          "[Added Lines]",
          "10988:     void JavascriptArray::InternalCopyArrayElements(JavascriptArray* dstArray, const uint32 dstIndex, JavascriptArray* srcArray, uint32 start, uint32 end)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "11014:         ArrayElementEnumerator e(srcArray, start, end);",
          "11015:         while(e.MoveNext<Var>())",
          "11016:         {",
          "11018:             dstArray->DirectSetItemAt(n, e.GetItem<Var>());",
          "11019:             count++;",
          "11020:         }",
          "",
          "[Removed Lines]",
          "11017:             T n = dstIndex + (e.GetIndex() - start);",
          "",
          "[Added Lines]",
          "10998:             uint32 n = dstIndex + (e.GetIndex() - start);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "11026:         }",
          "11027:     }",
          "",
          "[Removed Lines]",
          "11033:     void JavascriptArray::CopyArrayElements(JavascriptArray* dstArray, const BigIndex& dstIndex, JavascriptArray* srcArray, uint32 start, uint32 end)",
          "11034:     {",
          "11035:         end = min(end, srcArray->length);",
          "11036:         if (start < end)",
          "11037:         {",
          "11038:             uint32 len = end - start;",
          "11039:             if (dstIndex.IsSmallIndex() && (len < MaxArrayLength - dstIndex.GetSmallIndex()))",
          "11040:             {",
          "11042:                 InternalCopyArrayElements(dstArray, dstIndex.GetSmallIndex(), srcArray, start, end);",
          "11043:             }",
          "11044:             else",
          "11045:             {",
          "11046:                 InternalCopyArrayElements(dstArray, dstIndex, srcArray, start, end);",
          "11047:             }",
          "11048:         }",
          "11049:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "11084:         }",
          "11085:     }",
          "",
          "[Removed Lines]",
          "11087:     void JavascriptArray::CopyNativeIntArrayElementsToVar(JavascriptArray* dstArray, const BigIndex& dstIndex, JavascriptNativeIntArray* srcArray, uint32 start, uint32 end)",
          "11088:     {",
          "11089:         end = min(end, srcArray->length);",
          "11090:         if (start < end)",
          "11091:         {",
          "11092:             uint32 len = end - start;",
          "11093:             if (dstIndex.IsSmallIndex() && (len < MaxArrayLength - dstIndex.GetSmallIndex()))",
          "11094:             {",
          "11096:                 InternalCopyNativeIntArrayElements(dstArray, dstIndex.GetSmallIndex(), srcArray, start, end);",
          "11097:             }",
          "11098:             else",
          "11099:             {",
          "11100:                 InternalCopyNativeIntArrayElements(dstArray, dstIndex, srcArray, start, end);",
          "11101:             }",
          "11102:         }",
          "11103:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "11181:         return false;",
          "11182:     }",
          "",
          "[Removed Lines]",
          "11184:     void JavascriptArray::CopyNativeFloatArrayElementsToVar(JavascriptArray* dstArray, const BigIndex& dstIndex, JavascriptNativeFloatArray* srcArray, uint32 start, uint32 end)",
          "11185:     {",
          "11186:         end = min(end, srcArray->length);",
          "11187:         if (start < end)",
          "11188:         {",
          "11189:             uint32 len = end - start;",
          "11190:             if (dstIndex.IsSmallIndex() && (len < MaxArrayLength - dstIndex.GetSmallIndex()))",
          "11191:             {",
          "11193:                 InternalCopyNativeFloatArrayElements(dstArray, dstIndex.GetSmallIndex(), srcArray, start, end);",
          "11194:             }",
          "11195:             else",
          "11196:             {",
          "11197:                 InternalCopyNativeFloatArrayElements(dstArray, dstIndex, srcArray, start, end);",
          "11198:             }",
          "11199:         }",
          "11200:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "11284:         return JavascriptOperators::GetItem(this, this->GetPrototype(), index, outVal, requestContext);",
          "11285:     }",
          "11289:     {",
          "11290:         Assert(start < end && end <= srcArray->length);",
          "",
          "[Removed Lines]",
          "11287:     template<typename T>",
          "11288:     void JavascriptArray::InternalCopyNativeIntArrayElements(JavascriptArray* dstArray, const T& dstIndex, JavascriptNativeIntArray* srcArray, uint32 start, uint32 end)",
          "",
          "[Added Lines]",
          "11210:     void JavascriptArray::InternalCopyNativeIntArrayElements(JavascriptArray* dstArray, uint32 dstIndex, JavascriptNativeIntArray* srcArray, uint32 start, uint32 end)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "11296:         ArrayElementEnumerator e(srcArray, start, end);",
          "11297:         while(e.MoveNext<int32>())",
          "11298:         {",
          "11300:             dstArray->DirectSetItemAt(n, JavascriptNumber::ToVar(e.GetItem<int32>(), scriptContext));",
          "11301:             count++;",
          "11302:         }",
          "",
          "[Removed Lines]",
          "11299:             T n = dstIndex + (e.GetIndex() - start);",
          "",
          "[Added Lines]",
          "11221:             uint32 n = dstIndex + (e.GetIndex() - start);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "11308:         }",
          "11309:     }",
          "11313:     {",
          "11314:         Assert(start < end && end <= srcArray->length);",
          "",
          "[Removed Lines]",
          "11311:     template<typename T>",
          "11312:     void JavascriptArray::InternalCopyNativeFloatArrayElements(JavascriptArray* dstArray, const T& dstIndex, JavascriptNativeFloatArray* srcArray, uint32 start, uint32 end)",
          "",
          "[Added Lines]",
          "11233:     void JavascriptArray::InternalCopyNativeFloatArrayElements(JavascriptArray* dstArray, uint32 dstIndex, JavascriptNativeFloatArray* srcArray, uint32 start, uint32 end)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "11320:         ArrayElementEnumerator e(srcArray, start, end);",
          "11321:         while(e.MoveNext<double>())",
          "11322:         {",
          "11324:             dstArray->DirectSetItemAt(n, JavascriptNumber::ToVarWithCheck(e.GetItem<double>(), scriptContext));",
          "11325:             count++;",
          "11326:         }",
          "",
          "[Removed Lines]",
          "11323:             T n = dstIndex + (e.GetIndex() - start);",
          "",
          "[Added Lines]",
          "11244:             uint32 n = dstIndex + (e.GetIndex() - start);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:         static int __cdecl CompareElements(void* context, const void* elem1, const void* elem2);",
          "599:         void SortElements(Element* elements, uint32 left, uint32 right);",
          "605:         template <typename T> static bool MayChangeType() { return false; }",
          "",
          "[Removed Lines]",
          "601:         template <typename T, typename Fn>",
          "602:         static void ForEachOwnMissingArrayIndexOfObject(JavascriptArray *baseArr, JavascriptArray *destArray, RecyclableObject* obj, uint32 startIndex, uint32 limitIndex, T destIndex, Fn fn);",
          "",
          "[Added Lines]",
          "601:         template <typename Fn>",
          "602:         static void ForEachOwnMissingArrayIndexOfObject(JavascriptArray *baseArr, JavascriptArray *destArray, RecyclableObject* obj, uint32 startIndex, uint32 limitIndex, uint32 destIndex, Fn fn);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "785:             BOOL DeleteItem(RecyclableObject* obj, PropertyOperationFlags flags = PropertyOperation_None) const;",
          "786:         };",
          "790:         void DirectSetItemIfNotExist(const BigIndex& index, Var newValue) { index.SetItemIfNotExist(this, newValue); }",
          "791:         void DirectAppendItem(Var newValue) { BigIndex(this->GetLength()).SetItem(this, newValue); }",
          "792:         void TruncateToProperties(const BigIndex& index, uint32 start);",
          "803:         static void CopyArrayElements(JavascriptArray* dstArray, uint32 dstIndex, JavascriptArray* srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "805:         template <typename T>",
          "806:         static void CopyAnyArrayElementsToVar(JavascriptArray* dstArray, T dstIndex, JavascriptArray* srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "807:         static bool CopyNativeIntArrayElements(JavascriptNativeIntArray* dstArray, uint32 dstIndex, JavascriptNativeIntArray *srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "808:         static bool CopyNativeIntArrayElementsToFloat(JavascriptNativeFloatArray* dstArray, uint32 dstIndex, JavascriptNativeIntArray *srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "809:         static void CopyNativeIntArrayElementsToVar(JavascriptArray* dstArray, uint32 dstIndex, JavascriptNativeIntArray *srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "811:         static bool CopyNativeFloatArrayElements(JavascriptNativeFloatArray* dstArray, uint32 dstIndex, JavascriptNativeFloatArray *srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "812:         static void CopyNativeFloatArrayElementsToVar(JavascriptArray* dstArray, uint32 dstIndex, JavascriptNativeFloatArray *srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "815:         static bool BoxConcatItem(Var aItem, uint idxArg, ScriptContext *scriptContext);",
          "",
          "[Removed Lines]",
          "788:         BOOL DirectGetItemAt(const BigIndex& index, Var* outVal) { return index.GetItem(this, outVal); }",
          "789:         void DirectSetItemAt(const BigIndex& index, Var newValue) { index.SetItem(this, newValue); }",
          "794:         template<typename T>",
          "795:         static void InternalCopyArrayElements(JavascriptArray* dstArray, const T& dstIndex, JavascriptArray* srcArray, uint32 start, uint32 end);",
          "796:         template<typename T>",
          "797:         static void InternalCopyNativeFloatArrayElements(JavascriptArray* dstArray, const T& dstIndex, JavascriptNativeFloatArray* srcArray, uint32 start, uint32 end);",
          "798:         template<typename T>",
          "799:         static void InternalCopyNativeIntArrayElements(JavascriptArray* dstArray, const T& dstIndex, JavascriptNativeIntArray* srcArray, uint32 start, uint32 end);",
          "800:         template<typename T>",
          "801:         static void InternalFillFromPrototype(JavascriptArray *dstArray, const T& dstIndex, JavascriptArray *srcArray, uint32 start, uint32 end, uint32 count);",
          "804:         static void CopyArrayElements(JavascriptArray* dstArray, const BigIndex& dstIndex, JavascriptArray* srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "810:         static void CopyNativeIntArrayElementsToVar(JavascriptArray* dstArray, const BigIndex& dstIndex, JavascriptNativeIntArray *srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "813:         static void CopyNativeFloatArrayElementsToVar(JavascriptArray* dstArray, const BigIndex& dstIndex, JavascriptNativeFloatArray *srcArray, uint32 start = 0, uint32 end = MaxArrayLength);",
          "",
          "[Added Lines]",
          "788:         void GenericDirectSetItemAt(const BigIndex& index, Var newValue) { index.SetItem(this, newValue); }",
          "789:         void GenericDirectSetItemAt(const uint32 index, Var newValue) { this->DirectSetItemAt(index, newValue); }",
          "794:         static void InternalCopyArrayElements(JavascriptArray* dstArray, uint32 dstIndex, JavascriptArray* srcArray, uint32 start, uint32 end);",
          "795:         static void InternalCopyNativeFloatArrayElements(JavascriptArray* dstArray, const uint32 dstIndex, JavascriptNativeFloatArray* srcArray, uint32 start, uint32 end);",
          "796:         static void InternalCopyNativeIntArrayElements(JavascriptArray* dstArray, uint32 dstIndex, JavascriptNativeIntArray* srcArray, uint32 start, uint32 end);",
          "797:         static void InternalFillFromPrototype(JavascriptArray *dstArray, const uint32 dstIndex, JavascriptArray *srcArray, uint32 start, uint32 end, uint32 count);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76429443f92211b5182e0c222837436b73f323e8",
      "candidate_info": {
        "commit_hash": "76429443f92211b5182e0c222837436b73f323e8",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/76429443f92211b5182e0c222837436b73f323e8",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "test/es6/toPrimitive.js"
        ],
        "message": "Resolves #1893: Array type change to ES5Array due to side-effects results in incorrect behavior in various Array methods.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h",
          "test/es6/toPrimitive.js||test/es6/toPrimitive.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3727:             length = JavascriptConversion::ToUInt32(JavascriptOperators::OP_GetLength(obj, scriptContext), scriptContext);",
          "3728:         }",
          "3731:         {",
          "3734:             uint32 len = length.IsUint32Max() ? MaxArrayLength : length.GetSmallIndex();",
          "3735:             if (!GetParamForIndexOf(len, args, search, fromIndex, scriptContext))",
          "3736:             {",
          "3737:                 return includesAlgorithm ? falseValue : TaggedInt::ToVarUnchecked(-1);",
          "3738:             }",
          "3744:             {",
          "3746:                 {",
          "3749:                 }",
          "3751:                 {",
          "3754:                 }",
          "3755:             }",
          "3771:         }",
          "",
          "[Removed Lines]",
          "3730:         if (pArr)",
          "3732:             Var search;",
          "3733:             uint32 fromIndex;",
          "3739:             int32 index = pArr->HeadSegmentIndexOfHelper(search, fromIndex, len, includesAlgorithm, scriptContext);",
          "3743:             if (index != -1 || fromIndex == -1)",
          "3745:                 if (includesAlgorithm)",
          "3748:                     return (index == -1)? falseValue : trueValue;",
          "3750:                 else",
          "3753:                     return JavascriptNumber::ToVar(index, scriptContext);",
          "3759:             switch (pArr->GetTypeId())",
          "3760:             {",
          "3761:             case Js::TypeIds_Array:",
          "3762:                 return TemplatedIndexOfHelper<includesAlgorithm>(pArr, search, fromIndex, len, scriptContext);",
          "3763:             case Js::TypeIds_NativeIntArray:",
          "3764:                 return TemplatedIndexOfHelper<includesAlgorithm>(JavascriptNativeIntArray::FromVar(pArr), search, fromIndex, len, scriptContext);",
          "3765:             case Js::TypeIds_NativeFloatArray:",
          "3766:                 return TemplatedIndexOfHelper<includesAlgorithm>(JavascriptNativeFloatArray::FromVar(pArr), search, fromIndex, len, scriptContext);",
          "3767:             default:",
          "3768:                 AssertMsg(FALSE, \"invalid array typeid\");",
          "3769:                 return TemplatedIndexOfHelper<includesAlgorithm>(pArr, search, fromIndex, len, scriptContext);",
          "3770:             }",
          "",
          "[Added Lines]",
          "3730:         Var search;",
          "3731:         uint32 fromIndex = 0;",
          "3732:         uint64 fromIndex64 = 0;",
          "3737:         if ((pArr || TypedArrayBase::Is(obj)) && (length.IsSmallIndex() || length.IsUint32Max()))",
          "3744:         }",
          "3745:         else if (length.IsSmallIndex())",
          "3746:         {",
          "3747:             if (!GetParamForIndexOf(length.GetSmallIndex(), args, search, fromIndex, scriptContext))",
          "3748:             {",
          "3749:                 return includesAlgorithm ? falseValue : TaggedInt::ToVarUnchecked(-1);",
          "3750:             }",
          "3751:         }",
          "3752:         else",
          "3753:         {",
          "3754:             if (!GetParamForIndexOf(length.GetBigIndex(), args, search, fromIndex64, scriptContext))",
          "3755:             {",
          "3756:                 return includesAlgorithm ? falseValue : TaggedInt::ToVarUnchecked(-1);",
          "3757:             }",
          "3758:         }",
          "3761:         if (pArr && !JavascriptArray::Is(obj))",
          "3762:         {",
          "3763:             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "3764:             pArr = nullptr;",
          "3765:         }",
          "3767:         if (pArr)",
          "3768:         {",
          "3769:             if (length.IsSmallIndex() || length.IsUint32Max())",
          "3771:                 uint32 len = length.IsUint32Max() ? MaxArrayLength : length.GetSmallIndex();",
          "3772:                 int32 index = pArr->HeadSegmentIndexOfHelper(search, fromIndex, len, includesAlgorithm, scriptContext);",
          "3776:                 if (index != -1 || fromIndex == -1)",
          "3778:                     if (includesAlgorithm)",
          "3779:                     {",
          "3781:                         return (index == -1) ? falseValue : trueValue;",
          "3782:                     }",
          "3783:                     else",
          "3784:                     {",
          "3786:                         return JavascriptNumber::ToVar(index, scriptContext);",
          "3787:                     }",
          "3791:                 switch (pArr->GetTypeId())",
          "3793:                 case Js::TypeIds_Array:",
          "3794:                     return TemplatedIndexOfHelper<includesAlgorithm>(pArr, search, fromIndex, len, scriptContext);",
          "3795:                 case Js::TypeIds_NativeIntArray:",
          "3796:                     return TemplatedIndexOfHelper<includesAlgorithm>(JavascriptNativeIntArray::FromVar(pArr), search, fromIndex, len, scriptContext);",
          "3797:                 case Js::TypeIds_NativeFloatArray:",
          "3798:                     return TemplatedIndexOfHelper<includesAlgorithm>(JavascriptNativeFloatArray::FromVar(pArr), search, fromIndex, len, scriptContext);",
          "3799:                 default:",
          "3800:                     AssertMsg(FALSE, \"invalid array typeid\");",
          "3801:                     return TemplatedIndexOfHelper<includesAlgorithm>(pArr, search, fromIndex, len, scriptContext);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3775:         {",
          "3776:             if (length.IsSmallIndex() || length.IsUint32Max())",
          "3777:             {",
          "3785:                 return TemplatedIndexOfHelper<includesAlgorithm>(TypedArrayBase::FromVar(obj), search, fromIndex, length.GetSmallIndex(), scriptContext);",
          "3786:             }",
          "3787:         }",
          "3788:         if (length.IsSmallIndex())",
          "3789:         {",
          "3796:             return TemplatedIndexOfHelper<includesAlgorithm>(obj, search, fromIndex, length.GetSmallIndex(), scriptContext);",
          "3797:         }",
          "3798:         else",
          "3799:         {",
          "3807:         }",
          "3808:     }",
          "",
          "[Removed Lines]",
          "3778:                 Var search;",
          "3779:                 uint32 fromIndex;",
          "3780:                 uint32 len = length.IsUint32Max() ? MaxArrayLength : length.GetSmallIndex();",
          "3781:                 if (!GetParamForIndexOf(len, args, search, fromIndex, scriptContext))",
          "3782:                 {",
          "3783:                     return includesAlgorithm ? falseValue : TaggedInt::ToVarUnchecked(-1);",
          "3784:                 }",
          "3790:             Var search;",
          "3791:             uint32 fromIndex;",
          "3792:             if (!GetParamForIndexOf(length.GetSmallIndex(), args, search, fromIndex, scriptContext))",
          "3793:             {",
          "3794:                 return includesAlgorithm ? falseValue : TaggedInt::ToVarUnchecked(-1);",
          "3795:             }",
          "3800:             Var search;",
          "3801:             uint64 fromIndex;",
          "3802:             if (!GetParamForIndexOf(length.GetBigIndex(), args, search, fromIndex, scriptContext))",
          "3803:             {",
          "3804:                 return includesAlgorithm ? falseValue : TaggedInt::ToVarUnchecked(-1);",
          "3805:             }",
          "3806:             return TemplatedIndexOfHelper<includesAlgorithm>(obj, search, fromIndex, length.GetBigIndex(), scriptContext);",
          "",
          "[Added Lines]",
          "3820:             return TemplatedIndexOfHelper<includesAlgorithm>(obj, search, fromIndex64, length.GetBigIndex(), scriptContext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4584:             return TaggedInt::ToVarUnchecked(-1);",
          "4585:         }",
          "4587:         if (pArr)",
          "4588:         {",
          "4589:             switch (pArr->GetTypeId())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4602:         if (pArr && !JavascriptArray::Is(obj))",
          "4603:         {",
          "4604:             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "4605:             pArr = nullptr;",
          "4606:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5400:             }",
          "5401:             else",
          "5402:             {",
          "5404:                 {",
          "5405:                     uint32 upper = (uint32)length - lower - 1;",
          "",
          "[Removed Lines]",
          "5403:                 for (uint32 lower = 0; lower < middle; lower++)",
          "",
          "[Added Lines]",
          "5424:                 Assert(middle <= UINT_MAX);",
          "5425:                 for (uint32 lower = 0; lower < (uint32)middle; lower++)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5939:             newLenT = endT > startT ? endT - startT : 0;",
          "5940:         }",
          "5942:         if (TypedArrayBase::IsDetachedTypedArray(obj))",
          "5943:         {",
          "5944:             JavascriptError::ThrowTypeError(scriptContext, JSERR_DetachedTypedArray, _u(\"Array.prototype.slice\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5965:         if (pArr && !JavascriptArray::Is(obj))",
          "5966:         {",
          "5967:             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "5968:             pArr = nullptr;",
          "5969:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6046:             return newObj;",
          "6047:         }",
          "6049:         if (pArr)",
          "6050:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6080:         if (pArr && !JavascriptArray::Is(obj))",
          "6081:         {",
          "6082:             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "6083:             pArr = nullptr;",
          "6084:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6096:                         }",
          "6098:                         newArr->SetItem(i, element, PropertyOperation_None);",
          "6099:                     }",
          "6100:                 }",
          "6101:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6139:                         if (!JavascriptArray::Is(obj))",
          "6140:                         {",
          "6141:                             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "6142:                             return JavascriptArray::SliceObjectHelper(obj, start, i + 1, newArr, newObj, newLen, scriptContext);",
          "6143:                         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6112:                     }",
          "6114:                     ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, i, element), scriptContext, i);",
          "6115:                 }",
          "6116:             }",
          "6117:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6163:                     if (!JavascriptArray::Is(obj))",
          "6164:                     {",
          "6165:                         AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "6166:                         return JavascriptArray::SliceObjectHelper(obj, start, i + 1, newArr, newObj, newLen, scriptContext);",
          "6167:                     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6154:         }",
          "6155:         else",
          "6156:         {",
          "6172:         }",
          "6174:         if (!isTypedArrayEntryPoint)",
          "",
          "[Removed Lines]",
          "6157:             for (uint32 i = 0; i < newLen; i++)",
          "6158:             {",
          "6159:                 if (JavascriptOperators::HasItem(obj, i + start))",
          "6160:                 {",
          "6161:                     Var element = JavascriptOperators::GetItem(obj, i + start, scriptContext);",
          "6162:                     if (newArr != nullptr)",
          "6163:                     {",
          "6164:                         newArr->SetItem(i, element, PropertyOperation_None);",
          "6165:                     }",
          "6166:                     else",
          "6167:                     {",
          "6168:                         ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, i, element), scriptContext, i);",
          "6169:                     }",
          "6170:                 }",
          "6171:             }",
          "",
          "[Added Lines]",
          "6210:             return JavascriptArray::SliceObjectHelper(obj, start, 0u, newArr, newObj, newLen, scriptContext);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6176:             JavascriptOperators::SetProperty(newObj, newObj, Js::PropertyIds::length, JavascriptNumber::ToVar(newLen, scriptContext), scriptContext, PropertyOperation_ThrowIfNotExtensible);",
          "6177:         }",
          "6179: #ifdef VALIDATE_ARRAY",
          "6180:         if (JavascriptArray::Is(newObj))",
          "6181:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6218: #ifdef VALIDATE_ARRAY",
          "6219:         if (JavascriptArray::Is(newObj))",
          "6220:         {",
          "6221:             JavascriptArray::FromVar(newObj)->ValidateArray();",
          "6222:         }",
          "6223: #endif",
          "6225:         return newObj;",
          "6226:     }",
          "6228:     Var JavascriptArray::SliceObjectHelper(RecyclableObject* obj, uint32 sliceStart, uint32 start, JavascriptArray* newArr, RecyclableObject* newObj, uint32 newLen, ScriptContext* scriptContext)",
          "6229:     {",
          "6230:         for (uint32 i = start; i < newLen; i++)",
          "6231:         {",
          "6232:             if (JavascriptOperators::HasItem(obj, i + sliceStart))",
          "6233:             {",
          "6234:                 Var element = JavascriptOperators::GetItem(obj, i + sliceStart, scriptContext);",
          "6235:                 if (newArr != nullptr)",
          "6236:                 {",
          "6237:                     newArr->SetItem(i, element, PropertyOperation_None);",
          "6238:                 }",
          "6239:                 else",
          "6240:                 {",
          "6241:                     ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, i, element), scriptContext, i);",
          "6242:                 }",
          "6243:             }",
          "6244:         }",
          "6246:         JavascriptOperators::SetProperty(newObj, newObj, Js::PropertyIds::length, JavascriptNumber::ToVar(newLen, scriptContext), scriptContext, PropertyOperation_ThrowIfNotExtensible);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6731:             break;",
          "6732:         }",
          "6734:         Var* insertArgs = args.Info.Count > 3 ? &args.Values[3] : nullptr;",
          "6735:         uint32 insertLen = args.Info.Count > 3 ? args.Info.Count - 3 : 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6804:         if (isArr && !JavascriptArray::Is(pObj))",
          "6805:         {",
          "6806:             AssertOrFailFastMsg(ES5Array::Is(pObj), \"The array should have been converted to an ES5Array\");",
          "6807:             isArr = false;",
          "6808:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8030:         if (pArr)",
          "8031:         {",
          "8032:             Var undefined = scriptContext->GetLibrary()->GetUndefined();",
          "8034:             {",
          "8035:                 element = undefined;",
          "8036:                 pArr->DirectGetItemAtFull(k, &element);",
          "",
          "[Removed Lines]",
          "8033:             for (uint32 k = 0; k < length; k++)",
          "",
          "[Added Lines]",
          "8109:             Assert(length <= UINT_MAX);",
          "8110:             for (uint32 k = 0; k < (uint32)length; k++)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8046:                 {",
          "8047:                     return findIndex ? index : element;",
          "8048:                 }",
          "8049:             }",
          "8050:         }",
          "8051:         else if (typedArrayBase)",
          "8052:         {",
          "8054:             {",
          "8055:                 element = typedArrayBase->DirectGetItem(k);",
          "",
          "[Removed Lines]",
          "8053:             for (uint32 k = 0; k < length; k++)",
          "",
          "[Added Lines]",
          "8129:                 if (!JavascriptArray::Is(obj))",
          "8130:                 {",
          "8131:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "8132:                     return JavascriptArray::FindObjectHelper<findIndex>(obj, length, k + 1, callBackFn, thisArg, scriptContext);",
          "8133:                 }",
          "8138:             Assert(length <= UINT_MAX);",
          "8139:             for (uint32 k = 0; k < (uint32)length; k++)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8069:         }",
          "8070:         else",
          "8071:         {",
          "8086:             }",
          "8087:         }",
          "",
          "[Removed Lines]",
          "8072:             for (uint32 k = 0; k < length; k++)",
          "8073:             {",
          "8074:                 element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "8075:                 Var index = JavascriptNumber::ToVar(k, scriptContext);",
          "8077:                 testResult = CALL_FUNCTION(callBackFn, CallInfo(flags, 4), thisArg,",
          "8078:                     element,",
          "8079:                     index,",
          "8080:                     obj);",
          "8082:                 if (JavascriptConversion::ToBoolean(testResult, scriptContext))",
          "8083:                 {",
          "8084:                     return findIndex ? index : element;",
          "8085:                 }",
          "",
          "[Added Lines]",
          "8158:             return JavascriptArray::FindObjectHelper<findIndex>(obj, length, 0u, callBackFn, thisArg, scriptContext);",
          "8159:         }",
          "8161:         return findIndex ? JavascriptNumber::ToVar(-1, scriptContext) : scriptContext->GetLibrary()->GetUndefined();",
          "8162:     }",
          "8164:     template <bool findIndex>",
          "8165:     Var JavascriptArray::FindObjectHelper(RecyclableObject* obj, int64 length, int64 start, RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext)",
          "8166:     {",
          "8168:         CallFlags flags = CallFlags_Value;",
          "8169:         Var element = nullptr;",
          "8170:         Var testResult = nullptr;",
          "8172:         for (int64 k = start; k < length; k++)",
          "8173:         {",
          "8174:             element = JavascriptOperators::GetItem(obj, (uint64)k, scriptContext);",
          "8175:             Var index = JavascriptNumber::ToVar(k, scriptContext);",
          "8177:             testResult = CALL_FUNCTION(callBackFn, CallInfo(flags, 4), thisArg,",
          "8178:                 element,",
          "8179:                 index,",
          "8180:                 obj);",
          "8182:             if (JavascriptConversion::ToBoolean(testResult, scriptContext))",
          "8183:             {",
          "8184:                 return findIndex ? index : element;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8320:         if (pArr)",
          "8321:         {",
          "8323:             {",
          "8324:                 if (!pArr->DirectGetItemAtFull(k, &element))",
          "8325:                 {",
          "",
          "[Removed Lines]",
          "8322:             for (uint32 k = 0; k < length; k++)",
          "",
          "[Added Lines]",
          "8421:             Assert(length <= UINT_MAX);",
          "8422:             for (uint32 k = 0; k < (uint32)length; k++)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8335:                 {",
          "8336:                     return scriptContext->GetLibrary()->GetFalse();",
          "8337:                 }",
          "8338:             }",
          "8339:         }",
          "8340:         else if (typedArrayBase)",
          "8341:         {",
          "8342:             Assert(length <= UINT_MAX);",
          "8345:             {",
          "8346:                 if (!typedArrayBase->HasItem(k))",
          "8347:                 {",
          "",
          "[Removed Lines]",
          "8344:             for (uint32 k = 0; k < length; k++)",
          "",
          "[Added Lines]",
          "8441:                 if (!JavascriptArray::Is(obj))",
          "8442:                 {",
          "8443:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "8444:                     return JavascriptArray::EveryObjectHelper<T>(obj, length, k + 1, callBackFn, thisArg, scriptContext);",
          "8445:                 }",
          "8452:             for (uint32 k = 0; k < (uint32)length; k++)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8363:         }",
          "8364:         else",
          "8365:         {",
          "8367:             {",
          "8382:                 }",
          "8383:             }",
          "8384:         }",
          "",
          "[Removed Lines]",
          "8366:             for (T k = 0; k < length; k++)",
          "8369:                 if (JavascriptOperators::HasItem(obj, k))",
          "8370:                 {",
          "8371:                     element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "8373:                     testResult = CALL_FUNCTION(callBackFn, CallInfo(flags, 4), thisArg,",
          "8374:                         element,",
          "8375:                         JavascriptNumber::ToVar(k, scriptContext),",
          "8376:                         obj);",
          "8378:                     if (!JavascriptConversion::ToBoolean(testResult, scriptContext))",
          "8379:                     {",
          "8380:                         return scriptContext->GetLibrary()->GetFalse();",
          "8381:                     }",
          "",
          "[Added Lines]",
          "8474:             return JavascriptArray::EveryObjectHelper<T>(obj, length, 0u, callBackFn, thisArg, scriptContext);",
          "8475:         }",
          "8477:         return scriptContext->GetLibrary()->GetTrue();",
          "8478:     }",
          "8480:     template <typename T>",
          "8481:     Var JavascriptArray::EveryObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext)",
          "8482:     {",
          "8484:         CallFlags flags = CallFlags_Value;",
          "8485:         Var element = nullptr;",
          "8486:         Var testResult = nullptr;",
          "8488:         for (T k = start; k < length; k++)",
          "8489:         {",
          "8491:             if (JavascriptOperators::HasItem(obj, k))",
          "8493:                 element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "8495:                 testResult = CALL_FUNCTION(callBackFn, CallInfo(flags, 4), thisArg,",
          "8496:                     element,",
          "8497:                     JavascriptNumber::ToVar(k, scriptContext),",
          "8498:                     obj);",
          "8500:                 if (!JavascriptConversion::ToBoolean(testResult, scriptContext))",
          "8501:                 {",
          "8502:                     return scriptContext->GetLibrary()->GetFalse();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8430:             length = JavascriptConversion::ToUInt32(JavascriptOperators::OP_GetLength(obj, scriptContext), scriptContext);",
          "8431:         }",
          "8434:         {",
          "8435:             return JavascriptArray::SomeHelper(pArr, nullptr, obj, length.GetSmallIndex(), args, scriptContext);",
          "8436:         }",
          "",
          "[Removed Lines]",
          "8433:             if (length.IsSmallIndex())",
          "",
          "[Added Lines]",
          "8554:         if (length.IsSmallIndex())",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8481:         if (pArr)",
          "8482:         {",
          "8484:             {",
          "8485:                 if (!pArr->DirectGetItemAtFull(k, &element))",
          "8486:                 {",
          "",
          "[Removed Lines]",
          "8483:             for (uint32 k = 0; k < length; k++)",
          "",
          "[Added Lines]",
          "8604:             Assert(length <= UINT_MAX);",
          "8605:             for (uint32 k = 0; k < (uint32)length; k++)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "8496:                 {",
          "8497:                     return scriptContext->GetLibrary()->GetTrue();",
          "8498:                 }",
          "8499:             }",
          "8500:         }",
          "8501:         else if (typedArrayBase)",
          "8502:         {",
          "8503:             Assert(length <= UINT_MAX);",
          "8506:             {",
          "",
          "[Removed Lines]",
          "8505:             for (uint32 k = 0; k < length; k++)",
          "",
          "[Added Lines]",
          "8624:                 if (!JavascriptArray::Is(obj))",
          "8625:                 {",
          "8626:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "8627:                     return JavascriptArray::SomeObjectHelper<T>(obj, length, k + 1, callBackFn, thisArg, scriptContext);",
          "8628:                 }",
          "8635:             for (uint32 k = 0; k < (uint32)length; k++)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "8527:         }",
          "8528:         else",
          "8529:         {",
          "8531:             {",
          "8544:                 }",
          "8545:             }",
          "8546:         }",
          "",
          "[Removed Lines]",
          "8530:             for (T k = 0; k < length; k++)",
          "8532:                 if (JavascriptOperators::HasItem(obj, k))",
          "8533:                 {",
          "8534:                     element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "8535:                     testResult = CALL_FUNCTION(callBackFn, CallInfo(flags, 4), thisArg,",
          "8536:                         element,",
          "8537:                         JavascriptNumber::ToVar(k, scriptContext),",
          "8538:                         obj);",
          "8540:                     if (JavascriptConversion::ToBoolean(testResult, scriptContext))",
          "8541:                     {",
          "8542:                         return scriptContext->GetLibrary()->GetTrue();",
          "8543:                     }",
          "",
          "[Added Lines]",
          "8660:             return JavascriptArray::SomeObjectHelper<T>(obj, length, 0u, callBackFn, thisArg, scriptContext);",
          "8661:         }",
          "8663:         return scriptContext->GetLibrary()->GetFalse();",
          "8664:     }",
          "8666:     template <typename T>",
          "8667:     Var JavascriptArray::SomeObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext)",
          "8668:     {",
          "8670:         CallFlags flags = CallFlags_Value;",
          "8671:         Var element = nullptr;",
          "8672:         Var testResult = nullptr;",
          "8674:         for (T k = start; k < length; k++)",
          "8675:         {",
          "8676:             if (JavascriptOperators::HasItem(obj, k))",
          "8678:                 element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "8679:                 testResult = CALL_FUNCTION(callBackFn, CallInfo(flags, 4), thisArg,",
          "8680:                     element,",
          "8681:                     JavascriptNumber::ToVar(k, scriptContext),",
          "8682:                     obj);",
          "8684:                 if (JavascriptConversion::ToBoolean(testResult, scriptContext))",
          "8685:                 {",
          "8686:                     return scriptContext->GetLibrary()->GetTrue();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "8752:             direction = 1;",
          "8753:         }",
          "8757:         if ((direction == -1 && (fromVal >= MaxArrayLength || toVal >= MaxArrayLength))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8899:         if (pArr && !JavascriptArray::Is(obj))",
          "8900:         {",
          "8901:             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "8902:             pArr = nullptr;",
          "8903:         }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "8801:                         Var val = pArr->DirectGetItem(fromIndex);",
          "8803:                         pArr->SetItem(toIndex, val, Js::PropertyOperation_ThrowIfNotExtensible);",
          "8804:                     }",
          "8805:                     else",
          "8806:                     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8955:                         if (!JavascriptArray::Is(obj))",
          "8956:                         {",
          "8957:                             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "8958:                             pArr = nullptr;",
          "8959:                         }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "8895:             {",
          "8896:                 finalVal = JavascriptArray::GetIndexFromVar(args[3], length, scriptContext);",
          "8897:             }",
          "8898:         }",
          "8900:         if (k < MaxArrayLength)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9057:             if (pArr && !JavascriptArray::Is(obj))",
          "9058:             {",
          "9059:                 AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9060:                 pArr = nullptr;",
          "9061:             }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "9098:         Assert(newObj);",
          "9100:         if (pArr != nullptr)",
          "9101:         {",
          "9105:             {",
          "9106:                 if (!pArr->DirectGetItemAtFull(k, &element))",
          "9107:                 {",
          "",
          "[Removed Lines]",
          "9104:             for (uint32 k = 0; k < length; k++)",
          "",
          "[Added Lines]",
          "9266:         if (pArr && !JavascriptArray::Is(obj))",
          "9267:         {",
          "9268:             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9269:             pArr = nullptr;",
          "9270:         }",
          "9275:             Assert(length <= UINT_MAX);",
          "9276:             for (uint32 k = 0; k < (uint32)length; k++)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "9120:                 }",
          "9121:                 else",
          "9122:                 {",
          "9124:                 }",
          "9125:             }",
          "9126:         }",
          "",
          "[Removed Lines]",
          "9123:                     ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(RecyclableObject::FromVar(newObj), k, mappedValue), scriptContext, k);",
          "",
          "[Added Lines]",
          "9295:                     ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, k, mappedValue), scriptContext, k);",
          "9296:                 }",
          "9300:                 if (!JavascriptArray::Is(obj))",
          "9301:                 {",
          "9302:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9303:                     return JavascriptArray::MapObjectHelper<T>(obj, length, k + 1, newObj, newArr, isBuiltinArrayCtor, callBackFn, thisArg, scriptContext);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "9134:                 newTypedArray = TypedArrayBase::FromVar(newObj);",
          "9135:             }",
          "9138:             {",
          "",
          "[Removed Lines]",
          "9137:             for (uint32 k = 0; k < length; k++)",
          "",
          "[Added Lines]",
          "9317:             Assert(length <= UINT_MAX);",
          "9318:             for (uint32 k = 0; k < (uint32)length; k++)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "9165:                 }",
          "9166:                 else",
          "9167:                 {",
          "9169:                 }",
          "9170:             }",
          "9171:         }",
          "9172:         else",
          "9173:         {",
          "9175:             {",
          "9192:                 }",
          "9193:             }",
          "9194:         }",
          "",
          "[Removed Lines]",
          "9168:                     JavascriptArray::SetArrayLikeObjects(RecyclableObject::FromVar(newObj), k, mappedValue);",
          "9174:             for (uint32 k = 0; k < length; k++)",
          "9176:                 if (JavascriptOperators::HasItem(obj, k))",
          "9177:                 {",
          "9178:                     element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "9179:                     mappedValue = CALL_FUNCTION(callBackFn, callBackFnInfo, thisArg,",
          "9180:                         element,",
          "9181:                         JavascriptNumber::ToVar(k, scriptContext),",
          "9182:                         obj);",
          "9184:                     if (newArr && isBuiltinArrayCtor)",
          "9185:                     {",
          "9186:                         newArr->SetItem(k, mappedValue, PropertyOperation_None);",
          "9187:                     }",
          "9188:                     else",
          "9189:                     {",
          "9190:                         ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(RecyclableObject::FromVar(newObj), k, mappedValue), scriptContext, k);",
          "9191:                     }",
          "",
          "[Added Lines]",
          "9349:                     JavascriptArray::SetArrayLikeObjects(newObj, k, mappedValue);",
          "9355:             return JavascriptArray::MapObjectHelper<T>(obj, length, 0u, newObj, newArr, isBuiltinArrayCtor, callBackFn, thisArg, scriptContext);",
          "9356:         }",
          "9358: #ifdef VALIDATE_ARRAY",
          "9359:         if (JavascriptArray::Is(newObj))",
          "9360:         {",
          "9361:             newArr->ValidateArray();",
          "9362:         }",
          "9363: #endif",
          "9365:         return newObj;",
          "9366:     }",
          "9368:     template<typename T>",
          "9369:     Var JavascriptArray::MapObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* newObj, JavascriptArray* newArr,",
          "9370:         bool isBuiltinArrayCtor, RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext)",
          "9371:     {",
          "9373:         CallFlags callBackFnflags = CallFlags_Value;",
          "9374:         CallInfo callBackFnInfo = CallInfo(callBackFnflags, 4);",
          "9375:         Var element = nullptr;",
          "9376:         Var mappedValue = nullptr;",
          "9378:         for (T k = start; k < length; k++)",
          "9379:         {",
          "9380:             if (JavascriptOperators::HasItem(obj, k))",
          "9382:                 element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "9383:                 mappedValue = CALL_FUNCTION(callBackFn, callBackFnInfo, thisArg,",
          "9384:                     element,",
          "9385:                     JavascriptNumber::ToVar(k, scriptContext),",
          "9386:                     obj);",
          "9388:                 if (newArr && isBuiltinArrayCtor)",
          "9389:                 {",
          "9390:                     newArr->SetItem((uint32)k, mappedValue, PropertyOperation_None);",
          "9391:                 }",
          "9392:                 else",
          "9393:                 {",
          "9394:                     ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, BigIndex(k), mappedValue), scriptContext, BigIndex(k));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "9295:             }",
          "9296:         }",
          "9298:         Var element = nullptr;",
          "9299:         Var selected = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9503:         if (pArr && !JavascriptArray::Is(obj))",
          "9504:         {",
          "9505:             AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9506:             pArr = nullptr;",
          "9507:         }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "9303:             Assert(length <= MaxArrayLength);",
          "9304:             uint32 i = 0;",
          "9307:             {",
          "9308:                 if (!pArr->DirectGetItemAtFull(k, &element))",
          "9309:                 {",
          "",
          "[Removed Lines]",
          "9306:             for (uint32 k = 0; k < length; k++)",
          "",
          "[Added Lines]",
          "9517:             Assert(length <= UINT_MAX);",
          "9518:             for (uint32 k = 0; k < (uint32)length; k++)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "9329:                     }",
          "9330:                     ++i;",
          "9331:                 }",
          "9332:             }",
          "9333:         }",
          "9334:         else",
          "9335:         {",
          "9339:             {",
          "9350:                     {",
          "9360:                     }",
          "9361:                 }",
          "9362:             }",
          "9363:         }",
          "",
          "[Removed Lines]",
          "9336:             BigIndex i = 0u;",
          "9338:             for (T k = 0; k < length; k++)",
          "9340:                 if (JavascriptOperators::HasItem(obj, k))",
          "9341:                 {",
          "9342:                     element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "9343:                     selected = CALL_ENTRYPOINT(callBackFn->GetEntryPoint(), callBackFn, CallInfo(CallFlags_Value, 4),",
          "9344:                         thisArg,",
          "9345:                         element,",
          "9346:                         JavascriptNumber::ToVar(k, scriptContext),",
          "9347:                         obj);",
          "9349:                     if (JavascriptConversion::ToBoolean(selected, scriptContext))",
          "9351:                         if (newArr)",
          "9352:                         {",
          "9353:                             newArr->DirectSetItemAt(i, element);",
          "9354:                         }",
          "9355:                         else",
          "9356:                         {",
          "9357:                             ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, i, element), scriptContext, i);",
          "9358:                         }",
          "9359:                         ++i;",
          "",
          "[Added Lines]",
          "9547:                 if (!JavascriptArray::Is(obj))",
          "9548:                 {",
          "9549:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9550:                     return JavascriptArray::FilterObjectHelper<T>(obj, length, k + 1, newArr, newObj, i, callBackFn, thisArg, scriptContext);",
          "9551:                 }",
          "9556:             return JavascriptArray::FilterObjectHelper<T>(obj, length, 0u, newArr, newObj, 0u, callBackFn, thisArg, scriptContext);",
          "9557:         }",
          "9559: #ifdef VALIDATE_ARRAY",
          "9560:         if (newArr)",
          "9561:         {",
          "9562:             newArr->ValidateArray();",
          "9563:         }",
          "9564: #endif",
          "9566:         return newObj;",
          "9567:     }",
          "9569:     template <typename T>",
          "9570:     Var JavascriptArray::FilterObjectHelper(RecyclableObject* obj, T length, T start, JavascriptArray* newArr, RecyclableObject* newObj, T newStart,",
          "9571:         RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext)",
          "9572:     {",
          "9573:         Var element = nullptr;",
          "9574:         Var selected = nullptr;",
          "9575:         BigIndex i = BigIndex(newStart);",
          "9577:         for (T k = start; k < length; k++)",
          "9578:         {",
          "9579:             if (JavascriptOperators::HasItem(obj, k))",
          "9581:                 element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "9582:                 selected = CALL_ENTRYPOINT(callBackFn->GetEntryPoint(), callBackFn, CallInfo(CallFlags_Value, 4),",
          "9583:                     thisArg,",
          "9584:                     element,",
          "9585:                     JavascriptNumber::ToVar(k, scriptContext),",
          "9586:                     obj);",
          "9588:                 if (JavascriptConversion::ToBoolean(selected, scriptContext))",
          "9589:                 {",
          "9590:                     if (newArr)",
          "9592:                         newArr->DirectSetItemAt(i, element);",
          "9594:                     else",
          "9595:                     {",
          "9596:                         ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, i, element), scriptContext, i);",
          "9597:                     }",
          "9599:                     ++i;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "9475:                     bPresent = true;",
          "9476:                     accumulator = element;",
          "9477:                 }",
          "9478:             }",
          "9479:             else if (typedArrayBase)",
          "9480:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9720:                 if (!JavascriptArray::Is(obj))",
          "9721:                 {",
          "9722:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9723:                     pArr = nullptr;",
          "9724:                 }",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "9531:                     element,",
          "9532:                     JavascriptNumber::ToVar(k, scriptContext),",
          "9533:                     pArr);",
          "9534:             }",
          "9535:         }",
          "9536:         else if (typedArrayBase)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9784:                 if (!JavascriptArray::Is(obj))",
          "9785:                 {",
          "9786:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9787:                     return JavascriptArray::ReduceObjectHelper<T>(obj, length, k + 1, callBackFn, accumulator, scriptContext);",
          "9788:                 }",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "9554:         }",
          "9555:         else",
          "9556:         {",
          "9558:             {",
          "9569:             }",
          "9570:         }",
          "",
          "[Removed Lines]",
          "9557:             for (; k < length; k++)",
          "9559:                 if (JavascriptOperators::HasItem(obj, k))",
          "9560:                 {",
          "9561:                     element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "9563:                     accumulator = CALL_FUNCTION(callBackFn, CallInfo(flags, 5), undefinedValue,",
          "9564:                         accumulator,",
          "9565:                         element,",
          "9566:                         JavascriptNumber::ToVar(k, scriptContext),",
          "9567:                         obj);",
          "9568:                 }",
          "",
          "[Added Lines]",
          "9812:             return JavascriptArray::ReduceObjectHelper<T>(obj, length, k, callBackFn, accumulator, scriptContext);",
          "9813:         }",
          "9815:         return accumulator;",
          "9816:     }",
          "9818:     template <typename T>",
          "9819:     Var JavascriptArray::ReduceObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* callBackFn, Var accumulator, ScriptContext* scriptContext)",
          "9820:     {",
          "9822:         CallFlags flags = CallFlags_Value;",
          "9823:         Var element = nullptr;",
          "9825:         for (T k = start; k < length; k++)",
          "9826:         {",
          "9827:             if (JavascriptOperators::HasItem(obj, k))",
          "9829:                 element = JavascriptOperators::GetItem(obj, k, scriptContext);",
          "9831:                 accumulator = CALL_FUNCTION(callBackFn, CallInfo(flags, 5), scriptContext->GetLibrary()->GetUndefined(),",
          "9832:                     accumulator,",
          "9833:                     element,",
          "9834:                     JavascriptNumber::ToVar(k, scriptContext),",
          "9835:                     obj);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "9674:                     bPresent = true;",
          "9675:                     accumulator = element;",
          "9676:                 }",
          "9677:             }",
          "9678:             else if (typedArrayBase)",
          "9679:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9947:                 if (!JavascriptArray::Is(obj))",
          "9948:                 {",
          "9949:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "9950:                     pArr = nullptr;",
          "9951:                 }",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "9728:                     element,",
          "9729:                     JavascriptNumber::ToVar(index, scriptContext),",
          "9730:                     pArr);",
          "9731:             }",
          "9732:         }",
          "9733:         else if (typedArrayBase)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10008:                 if (!JavascriptArray::Is(obj))",
          "10009:                 {",
          "10010:                     AssertOrFailFastMsg(ES5Array::Is(obj), \"The array should have been converted to an ES5Array\");",
          "10011:                     return JavascriptArray::ReduceRightObjectHelper<T>(obj, length, k + 1, callBackFn, accumulator, scriptContext);",
          "10012:                 }",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "9752:         }",
          "9753:         else",
          "9754:         {",
          "9756:             {",
          "9767:             }",
          "9768:         }",
          "",
          "[Removed Lines]",
          "9755:             for (; k < length; k++)",
          "9757:                 index = length - k - 1;",
          "9758:                 if (JavascriptOperators::HasItem(obj, index))",
          "9759:                 {",
          "9760:                     element = JavascriptOperators::GetItem(obj, index, scriptContext);",
          "9761:                     accumulator = CALL_FUNCTION(callBackFn, CallInfo(flags, 5), undefinedValue,",
          "9762:                         accumulator,",
          "9763:                         element,",
          "9764:                         JavascriptNumber::ToVar(index, scriptContext),",
          "9765:                         obj);",
          "9766:                 }",
          "",
          "[Added Lines]",
          "10037:             return JavascriptArray::ReduceRightObjectHelper<T>(obj, length, k, callBackFn, accumulator, scriptContext);",
          "10038:         }",
          "10040:         return accumulator;",
          "10041:     }",
          "10043:     template <typename T>",
          "10044:     Var JavascriptArray::ReduceRightObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* callBackFn, Var accumulator, ScriptContext* scriptContext)",
          "10045:     {",
          "10047:         CallFlags flags = CallFlags_Value;",
          "10048:         Var element = nullptr;",
          "10049:         T index = 0;",
          "10051:         for (T k = start; k < length; k++)",
          "10052:         {",
          "10053:             index = length - k - 1;",
          "10054:             if (JavascriptOperators::HasItem(obj, index))",
          "10056:                 element = JavascriptOperators::GetItem(obj, index, scriptContext);",
          "10057:                 accumulator = CALL_FUNCTION(callBackFn, CallInfo(flags, 5), scriptContext->GetLibrary()->GetUndefined(),",
          "10058:                     accumulator,",
          "10059:                     element,",
          "10060:                     JavascriptNumber::ToVar(index, scriptContext),",
          "10061:                     obj);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "9874:                 }",
          "9875:                 else",
          "9876:                 {",
          "9878:                 }",
          "9880:                 k++;",
          "",
          "[Removed Lines]",
          "9877:                     ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(RecyclableObject::FromVar(newObj), k, nextValue), scriptContext, k);",
          "",
          "[Added Lines]",
          "10172:                     ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, k, nextValue), scriptContext, k);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "9943:                 }",
          "9944:                 else",
          "9945:                 {",
          "9947:                 }",
          "9948:             }",
          "",
          "[Removed Lines]",
          "9946:                     ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(RecyclableObject::FromVar(newObj), k, kValue), scriptContext, k);",
          "",
          "[Added Lines]",
          "10241:                     ThrowErrorOnFailure(JavascriptArray::SetArrayLikeObjects(newObj, k, kValue), scriptContext, k);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:         static int64 GetIndexFromVar(Js::Var arg, int64 length, ScriptContext* scriptContext);",
          "466:         template <typename T>",
          "467:         static Var MapHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, T length, Arguments& args, ScriptContext* scriptContext);",
          "468:         static Var FillHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, int64 length, Arguments& args, ScriptContext* scriptContext);",
          "469:         static Var CopyWithinHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, int64 length, Arguments& args, ScriptContext* scriptContext);",
          "470:         template <typename T>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:         template <typename T>",
          "469:         static Var MapObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* newObj, JavascriptArray* newArr,",
          "470:             bool isBuiltinArrayCtor, RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:         static Var ReverseHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, T length, ScriptContext* scriptContext);",
          "484:         template <typename T = uint32>",
          "485:         static Var SliceHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, T length, Arguments& args, ScriptContext* scriptContext);",
          "486:         template <typename T = uint32>",
          "487:         static Var EveryHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, T length, Arguments& args, ScriptContext* scriptContext);",
          "488:         template <typename T = uint32>",
          "489:         static Var SomeHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, T length, Arguments& args, ScriptContext* scriptContext);",
          "490:         template <bool findIndex>",
          "491:         static Var FindHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, int64 length, Arguments& args, ScriptContext* scriptContext);",
          "492:         template <typename T = uint32>",
          "493:         static Var ReduceHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, T length, Arguments& args, ScriptContext* scriptContext);",
          "494:         template <typename T>",
          "495:         static Var FilterHelper(JavascriptArray* pArr, RecyclableObject* obj, T length, Arguments& args, ScriptContext* scriptContext);",
          "496:         template <typename T = uint32>",
          "497:         static Var ReduceRightHelper(JavascriptArray* pArr, Js::TypedArrayBase* typedArrayBase, RecyclableObject* obj, T length, Arguments& args, ScriptContext* scriptContext);",
          "498:         static Var OfHelper(bool isTypedArrayEntryPoint, Arguments& args, ScriptContext* scriptContext);",
          "500:         static uint32 GetFromIndex(Var arg, uint32 length, ScriptContext *scriptContext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:         static Var SliceObjectHelper(RecyclableObject* obj, uint32 sliceStart, uint32 start, JavascriptArray* newArr, RecyclableObject* newObj, uint32 newLen, ScriptContext* scriptContext);",
          "493:         static Var EveryObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext);",
          "494:         template <typename T = uint32>",
          "496:         template <typename T = uint32>",
          "497:         static Var SomeObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext);",
          "500:         template <bool findIndex>",
          "501:         static Var FindObjectHelper(RecyclableObject* obj, int64 length, int64 start, RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext);",
          "505:         static Var ReduceObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* callBackFn, Var accumulator, ScriptContext* scriptContext);",
          "506:             template <typename T>",
          "508:         template <typename T>",
          "509:         static Var FilterObjectHelper(RecyclableObject* obj, T length, T start, JavascriptArray* newArr, RecyclableObject* newObj, T newStart,",
          "510:             RecyclableObject* callBackFn, Var thisArg, ScriptContext* scriptContext);",
          "513:         template <typename T>",
          "514:         static Var ReduceRightObjectHelper(RecyclableObject* obj, T length, T start, RecyclableObject* callBackFn, Var accumulator, ScriptContext* scriptContext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "605:                 if (hasSideEffect && MayChangeType<T>() && !T::Is(arr))",
          "606:                 {",
          "610:                 }",
          "611:             }",
          "612:         }",
          "",
          "[Removed Lines]",
          "608:                     JavascriptArray::FromVar(arr)->template ForEachItemInRange<true>(i + 1, limitIndex, missingItem, scriptContext, fn);",
          "609:                     return;",
          "",
          "[Added Lines]",
          "626:                     if (JavascriptArray::Is(arr))",
          "627:                     {",
          "628:                         JavascriptArray::FromVar(arr)->template ForEachItemInRange<true>(i + 1, limitIndex, missingItem, scriptContext, fn);",
          "629:                         return;",
          "630:                     }",
          "631:                     else",
          "632:                     {",
          "633:                         AssertOrFailFastMsg(ES5Array::Is(arr), \"The array should have been converted to an ES5Array\");",
          "634:                     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "624:                     if (hasSideEffect && MayChangeType<T>() && !T::Is(arr))",
          "625:                     {",
          "629:                     }",
          "630:                 }",
          "631:             }",
          "",
          "[Removed Lines]",
          "627:                         JavascriptArray::FromVar(arr)->template ForEachItemInRange<true>(i + 1, limitIndex, scriptContext, fn);",
          "628:                         return;",
          "",
          "[Added Lines]",
          "653:                         if (JavascriptArray::Is(arr))",
          "654:                         {",
          "655:                             JavascriptArray::FromVar(arr)->template ForEachItemInRange<true>(i + 1, limitIndex, scriptContext, fn);",
          "656:                             return;",
          "657:                         }",
          "658:                         else",
          "659:                         {",
          "660:                             AssertOrFailFastMsg(ES5Array::Is(arr), \"The array should have been converted to an ES5Array\");",
          "661:                         }",
          "",
          "---------------"
        ],
        "test/es6/toPrimitive.js||test/es6/toPrimitive.js": [
          "File: test/es6/toPrimitive.js -> test/es6/toPrimitive.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: WScript.LoadScriptFile(\"..\\\\UnitTestFramework\\\\UnitTestFramework.js\");",
          "8: var tests = [",
          "9:     {",
          "10:        name: \"Number Object Test\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: function AddNumbers(first, second)",
          "9: {",
          "10:     return first + second;",
          "11: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "474:             });",
          "475:         }",
          "476:     },",
          "477: ];",
          "479: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:     {",
          "483:        name: \"Array type conversion tests: lastIndexOf()\",",
          "484:        body: function ()",
          "485:        {",
          "486:             var p1 = {",
          "487:                 [Symbol.toPrimitive] (hint) {",
          "488:                     Object.defineProperty(a1, \"0\", {configurable : true, get: function(){ return 30;}});",
          "489:                     return a1.length;",
          "490:                 }",
          "491:             };",
          "492:             var a1 = [1, 2, 3, 4, 5];",
          "493:             assert.areEqual(3, a1.lastIndexOf(4, p1), \"ToPrimitive: lastIndexOf() method returned incorrect result as array type changed to ES5 array.\");",
          "495:             var a1_proto = {};",
          "496:             Object.defineProperty(a1_proto, \"1\", {",
          "497:                   get: function(){",
          "498:                         Object.defineProperty(a1_prototest, \"0\", {configurable : true, get: function(){ return 30;}});",
          "499:                         return 2;",
          "500:                   }",
          "501:             });",
          "503:             var a1_prototest = [, , 3, 4, 5];",
          "504:             a1_prototest.__proto__ = a1_proto;",
          "505:             var c1_prototest = [].lastIndexOf.call(a1_prototest, 30);",
          "506:             assert.areEqual(0, c1_prototest, \"ToPrimitive: The lastIndexOf() method returned incorrect result as array type changed to ES5 array in the property getter of the prototype.\");",
          "507:         }",
          "508:     },",
          "509:     {",
          "510:        name: \"Array type conversion tests: indexOf()\",",
          "511:        body: function ()",
          "512:        {",
          "513:             var p2 = {",
          "514:                 [Symbol.toPrimitive] (hint) {",
          "515:                     Object.defineProperty(a2, \"0\", {configurable : true, get: function(){ return 30;}});",
          "516:                     return 0;",
          "517:                 }",
          "518:             };",
          "519:             var a2 = [1, 2, 3, 4, 5];",
          "520:             assert.areEqual(3, a2.indexOf(4, p2), \"ToPrimitive: indexOf() method returned incorrect result as array type changed to ES5 array.\");",
          "522:             var a2_proto = {};",
          "523:             Object.defineProperty(a2_proto, \"0\", {",
          "524:                   get: function(){",
          "525:                         Object.defineProperty(a2_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "526:                         return 1;",
          "527:                   }",
          "528:             });",
          "530:             var a2_prototest = [, , 3, 4, 5];",
          "531:             a2_prototest.__proto__ = a2_proto;",
          "532:             var c2_prototest = [].indexOf.call(a2_prototest, 30);",
          "533:             assert.areEqual(1, c2_prototest, \"ToPrimitive: The indexOf() method returned incorrect result as array type changed to ES5 array in the property getter of the prototype.\");",
          "534:        }",
          "535:     },",
          "536:     {",
          "537:        name: \"Array type conversion tests: splice()\",",
          "538:        body: function ()",
          "539:        {",
          "540:             var p3 = {",
          "541:                 [Symbol.toPrimitive] (hint) {",
          "542:                     Object.defineProperty(a3, \"0\", {configurable : true, get: function(){ return 30;}});",
          "543:                     return 0;",
          "544:                 }",
          "545:             };",
          "546:             var a3 = [1, 2, 3, 4, 5];",
          "547:             var b3 = a3.splice(p3);",
          "548:             assert.areEqual([30,2,3,4,5], b3, \"ToPrimitive: splice() method returned incorrect result as array type changed to ES5 array.\");",
          "550:             var a3_proto = {};",
          "551:             Object.defineProperty(a3_proto, \"0\", {",
          "552:                   get: function(){",
          "553:                         Object.defineProperty(a3_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "554:                         return 1;",
          "555:                   }",
          "556:             });",
          "558:             var a3_prototest = [, , 3, 4, 5];",
          "559:             a3_prototest.__proto__ = a3_proto;",
          "560:             var c3_prototest = [].splice.call(a3_prototest, 0);",
          "561:             assert.areEqual([1,30,3,4,5], c3_prototest, \"ToPrimitive: The splice() method returned incorrect result as array type changed to ES5 array in the property getter of the prototype.\");",
          "563:             function a3_constructor(x) { };",
          "564:             a3_constructor[Symbol.species] = function () {",
          "565:                 Object.defineProperty(a3_species, \"0\", { configurable: true, get: function () { return 30; } });",
          "566:                 return {};",
          "567:             };",
          "569:             var a3_species = [1, 2, 3, 4, 5];",
          "570:             a3_species['constructor'] = a3_constructor;",
          "571:             var c3_species = a3_species.splice(0);",
          "572:             assert.areEqual(30, c3_species[\"0\"], \"The splice() method returned incorrect result as array was converted to an ES5Array.\");",
          "573:             assert.areEqual(\"30,2,3,4,5\", [].join.call(c3_species, \",\"), \"The splice() method returned incorrect result as array was converted to an ES5Array.\");",
          "574:        }",
          "575:    },",
          "576:     {",
          "577:        name: \"Array type conversion tests: slice()\",",
          "578:        body: function ()",
          "579:        {",
          "580:             var p4 = {",
          "581:                 [Symbol.toPrimitive] (hint) {",
          "582:                     Object.defineProperty(a4, \"0\", {configurable : true, get: function(){ return 30;}});",
          "583:                     return 0;",
          "584:                 }",
          "585:             };",
          "586:             var a4 = [1, 2, 3, 4, 5];",
          "587:             var b4 = a4.slice(p4);",
          "588:             assert.areEqual([30,2,3,4,5], b4, \"ToPrimitive: slice() method returned incorrect result as array type changed to ES5 array.\");",
          "590:             var a4_proto = {};",
          "591:             Object.defineProperty(a4_proto, \"0\", {",
          "592:                   get: function(){",
          "593:                         Object.defineProperty(a4_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "594:                         return 1;",
          "595:                   }",
          "596:             });",
          "598:             var a4_prototest = [, , 3, 4, 5];",
          "599:             a4_prototest.__proto__ = a4_proto;",
          "600:             var c4_prototest = [].slice.call(a4_prototest, 0);",
          "601:             assert.areEqual([1,30,3,4,5], c4_prototest, \"ToPrimitive: The slice() method returned incorrect result as array type changed to ES5 array in the property getter of the prototype.\");",
          "603:             function a4_constructor(x) { };",
          "604:             a4_constructor[Symbol.species] = function () {",
          "605:                 Object.defineProperty(a4_species, \"0\", { configurable: true, get: function () { return 30; } });",
          "606:                 return {};",
          "607:             };",
          "609:             var a4_species = [1, 2, 3, 4, 5];",
          "610:             a4_species['constructor'] = a4_constructor;",
          "611:             var c4_species = a4_species.slice(0);",
          "612:             assert.areEqual(30, c4_species[\"0\"], \"The slice() method returned incorrect result as array was converted to an ES5Array.\");",
          "613:             assert.areEqual(\"30,2,3,4,5\", [].join.call(c4_species, \",\"), \"The slice() method returned incorrect result as array was converted to an ES5Array.\");",
          "614:        }",
          "615:    },",
          "616:     {",
          "617:        name: \"Array type conversion tests: includes()\",",
          "618:        body: function ()",
          "619:        {",
          "620:             var p5 = {",
          "621:                 [Symbol.toPrimitive] (hint) {",
          "622:                     Object.defineProperty(a5, \"0\", {configurable : true, get: function(){ return 30;}});",
          "623:                     return 0;",
          "624:                 }",
          "625:             };",
          "626:             var a5 = [1, 2, 3, 4, 5];",
          "627:             assert.isTrue(a5.includes(30, p5), \"ToPrimitive: includes() method returned incorrect result as array type changed to ES5 array.\");",
          "629:             var a5_proto = {};",
          "630:             Object.defineProperty(a5_proto, \"0\", {",
          "631:                   get: function(){",
          "632:                         Object.defineProperty(a5_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "633:                         return 1;",
          "634:                   }",
          "635:             });",
          "637:             var a5_prototest = [, , 3, 4, 5];",
          "638:             a5_prototest.__proto__ = a5_proto;",
          "639:             assert.isTrue([].includes.call(a5_prototest, 30), \"The includes() method returned incorrect result as array type changed to ES5 array in the property getter of the prototype.\");",
          "640:        }",
          "641:     },",
          "642:     {",
          "643:        name: \"Array type conversion tests: find() and findIndex().\",",
          "644:        body: function ()",
          "645:        {",
          "646:             var p2 = {",
          "647:                 [Symbol.toPrimitive] (hint) {",
          "649:                     Object.defineProperty(a2, \"0\", {configurable : true, get: function(){ return 20;}});",
          "652:                     Object.defineProperty(a2, \"1\", {configurable : true, get: function(){ return 30;}});",
          "653:                     return 10;",
          "654:                 }",
          "655:             };",
          "656:             var a2 = [1, 2, 3, 4, 5];",
          "657:             var c2 = a2.find(function(x) { return x % p2 == 0; });",
          "658:             assert.areEqual(30, c2, \"The find() method returned incorrect result as array was converted to an ES5Array.\");",
          "660:             var a2_prototest = [,, 3, 4, 5];",
          "661:             var a2_proto = {};",
          "662:             Object.defineProperty(a2_proto, \"0\", {",
          "663:                 get: function(){",
          "664:                         Object.defineProperty(a2_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "665:                         return 7;",
          "666:                 }",
          "667:             });",
          "669:             a2_prototest.__proto__ = a2_proto;",
          "670:             var c2_prototest = [].find.call(a2_prototest, function(x) { return x % 10 == 0; });",
          "671:             assert.areEqual(30, c2_prototest, \"The find() method returned incorrect result as array was converted to an ES5Array in the property getter of the prototype.\");",
          "673:             var p3 = {",
          "674:                 [Symbol.toPrimitive] (hint) {",
          "676:                     Object.defineProperty(a3, \"0\", {configurable : true, get: function(){ return 30;}});",
          "679:                     Object.defineProperty(a3, \"1\", {configurable : true, get: function(){ return 30;}});",
          "680:                     return 30;",
          "681:                 }",
          "682:             };",
          "683:             var a3 = [1, 2, 3, 4, 5];",
          "684:             var c3 = a3.findIndex(function(x) { return x == p3; });",
          "685:             assert.areEqual(1, c3, \"The findIndex() method returned incorrect result as array was converted to an ES5Array.\");",
          "686:         }",
          "687:     },",
          "688:     {",
          "689:        name: \"Array type conversion tests: map().\",",
          "690:        body: function ()",
          "691:        {",
          "692:             var p4 = function(x)",
          "693:             {",
          "694:                     Object.defineProperty(a4, \"1\", {configurable : true, get: function(){ return 30;}});",
          "695:                     return x * x;",
          "696:             };",
          "697:             var a4 = [1, 2, 3, 4, 5];",
          "698:             var c4 = a4.map(p4);",
          "699:             assert.areEqual([1,900,9,16,25], c4, \"The map() method returned incorrect result as array was converted to an ES5Array.\");",
          "701:             var p4_typedarray = function(x)",
          "702:             {",
          "703:                     Object.defineProperty(a4_typedarray, \"1\", {configurable : false, value: 30});",
          "704:                     return x * x;",
          "705:             };",
          "706:             var a4_typedarray = new Int32Array([1, 2, 3, 4, 5]);",
          "707:             var c4_typedarray = a4_typedarray.map(p4_typedarray);",
          "708:             assert.areEqual([1,900,9,16,25], c4_typedarray, \"The map() method returned incorrect result for TypedArray.\");",
          "710:             function a4_constructor(x) { };",
          "711:             a4_constructor[Symbol.species] = function () {",
          "712:                 Object.defineProperty(a4_species, \"1\", { configurable: true, get: function () { return 30; } });",
          "713:                 return {};",
          "714:             };",
          "716:             var a4_species = [1, 2, 3, 4, 5];",
          "717:             a4_species['constructor'] = a4_constructor;",
          "718:             var c4_species = a4_species.map(function (x) { return x * x; });",
          "719:             assert.areEqual([1, 900, 9, 16, 25], c4_species, \"Map returned incorrect result as array was converted to an ES5Array.\");",
          "721:             var a4_proto = {};",
          "722:             Object.defineProperty(a4_proto, \"0\", {",
          "723:                 get: function(){",
          "724:                         Object.defineProperty(a4_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "725:                         return 7;",
          "726:                 }",
          "727:             });",
          "729:             var SquareNumber = function(x)",
          "730:             {",
          "731:                 return x * x;",
          "732:             };",
          "733:             var a4_prototest = [, , 3, 4, 5];",
          "734:             a4_prototest.__proto__ = a4_proto;",
          "735:             var c4_prototest = [].map.call(a4_prototest, SquareNumber);",
          "736:             assert.areEqual([49,900,9,16,25], c4_prototest, \"The map() method returned incorrect result as array was converted to an ES5Array in the property getter of the prototype.\");",
          "737:        }",
          "738:     },",
          "739:     {",
          "740:        name: \"Array type conversion tests: reduce().\",",
          "741:        body: function ()",
          "742:        {",
          "743:             var p6 = {",
          "744:                 [Symbol.toPrimitive] (hint) {",
          "746:                     Object.defineProperty(a6, \"0\", {configurable : true, get: function(){ return 30;}});",
          "749:                     Object.defineProperty(a6, \"1\", {configurable : true, get: function(){ return 30;}});",
          "750:                     return 0;",
          "751:                 }",
          "752:             };",
          "754:             var a6 = [1, 2, 3, 4, 5];",
          "755:             var c6 = a6.reduce(AddNumbers, p6);",
          "756:             assert.areEqual(43, c6, \"The reduce() method returned incorrect result as array was converted to an ES5Array.\");",
          "758:             var a6_proto = {};",
          "759:             Object.defineProperty(a6_proto, \"0\", {",
          "760:                 get: function(){",
          "761:                         Object.defineProperty(a6_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "762:                         return 1;",
          "763:                 }",
          "764:             });",
          "766:             var a6_prototest = [, , 3, 4, 5];",
          "767:             a6_prototest.__proto__ = a6_proto;",
          "768:             var c6_prototest = [].reduce.call(a6_prototest, AddNumbers);",
          "769:             assert.areEqual(43, c6_prototest, \"The reduce() method returned incorrect result as array was converted to an ES5Array in the property getter of the prototype.\");",
          "772:             var a6_es5 = [1, 2, 3, 4, 5];",
          "773:             Object.defineProperty(a6_es5, \"0\", {configurable : true, get: function(){ return 30;}});",
          "774:             var c6_es5 = a6_es5.reduce(AddNumbers);",
          "775:             assert.areEqual(44, c6_es5, \"The reduce() method returned incorrect result for an ES5Array.\");",
          "776:         }",
          "777:     },",
          "778:     {",
          "779:        name: \"Array type conversion tests: reduceRight().\",",
          "780:        body: function ()",
          "781:        {",
          "782:             var p7 = {",
          "783:                 [Symbol.toPrimitive] (hint) {",
          "785:                     Object.defineProperty(a7, \"4\", {configurable : true, get: function(){ return 30;}});",
          "788:                     Object.defineProperty(a7, \"1\", {configurable : true, get: function(){ return 30;}});",
          "789:                     return 0;",
          "790:                 }",
          "791:             };",
          "793:             var a7 = [1, 2, 3, 4, 5];",
          "794:             var c7 = a7.reduceRight(AddNumbers, p7);",
          "795:             assert.areEqual(43, c7, \"The reduceRight() method returned incorrect result as array was converted to an ES5Array.\");",
          "797:             var a7_proto = {};",
          "798:             Object.defineProperty(a7_proto, \"4\", {",
          "799:                 get: function(){",
          "800:                         Object.defineProperty(a7_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "801:                         return 5;",
          "802:                 }",
          "803:             });",
          "805:             var a7_prototest = [1, , 3, 4, ,];",
          "806:             a7_prototest.__proto__ = a7_proto;",
          "807:             var c7_prototest = [].reduceRight.call(a7_prototest, AddNumbers);",
          "808:             assert.areEqual(43, c7_prototest, \"The reduceRight() method returned incorrect result as array was converted to an ES5Array in the property getter of the prototype.\");",
          "811:             var a7_es5 = [1, 2, 3, 4, 5];",
          "812:             Object.defineProperty(a7_es5, \"0\", {configurable : true, get: function(){ return 30;}});",
          "813:             var c7_es5 = a7_es5.reduceRight(AddNumbers);",
          "814:             assert.areEqual(44, c7_es5, \"The reduceRight() method returned incorrect result for an ES5Array.\");",
          "815:         }",
          "816:     },",
          "817:     {",
          "818:        name: \"Array type conversion tests: some().\",",
          "819:        body: function ()",
          "820:        {",
          "821:             var p8 = {",
          "822:                 [Symbol.toPrimitive] (hint) {",
          "823:                     Object.defineProperty(a8, \"1\", {configurable : true, get: function(){ return 30;}});",
          "824:                     return 30;",
          "825:                 }",
          "826:             };",
          "828:             function MatchNumber(numberToMatch)",
          "829:             {",
          "830:                 return numberToMatch == p8;",
          "831:             }",
          "832:             var a8 = [1, 2, 3, 4, 5];",
          "833:             var c8 = a8.some(MatchNumber);",
          "834:             assert.isTrue(c8, \"The some() method returned incorrect result as array was converted to an ES5Array.\");",
          "836:             var a8_proto = {};",
          "837:             Object.defineProperty(a8_proto, \"0\", {",
          "838:                 get: function(){",
          "839:                         Object.defineProperty(a8_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "840:                         return 5;",
          "841:                 }",
          "842:             });",
          "844:             var a8_prototest = [, , 3, 4, 5];",
          "845:             a8_prototest.__proto__ = a8_proto;",
          "846:             var c8_prototest = [].some.call(a8_prototest, function(elem){ return elem == 30; });",
          "847:             assert.isTrue(c8_prototest, \"The some() method returned incorrect result as array was converted to an ES5Array in the property getter of the prototype.\");",
          "848:         }",
          "849:     },",
          "850:     {",
          "851:        name: \"Array type conversion tests: every().\",",
          "852:        body: function ()",
          "853:        {",
          "854:             var p9 = {",
          "855:                 [Symbol.toPrimitive] (hint) {",
          "856:                     Object.defineProperty(a9, \"1\", {configurable : true, get: function(){ return 30;}});",
          "857:                     return 30;",
          "858:                 }",
          "859:             };",
          "861:             function CompareNumber(numberToMatch)",
          "862:             {",
          "863:                 return numberToMatch < p9;",
          "864:             }",
          "865:             var a9 = [1, 2, 3, 4, 5];",
          "866:             var c9 = a9.every(CompareNumber);",
          "867:             assert.isFalse(c9, \"The every() method returned incorrect result as array was converted to an ES5Array.\");",
          "869:             var a9_proto = {};",
          "870:             Object.defineProperty(a9_proto, \"0\", {",
          "871:                 get: function(){",
          "872:                         Object.defineProperty(a9_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "873:                         return 1;",
          "874:                 }",
          "875:             });",
          "877:             var a9_prototest = [, , 3, 4, 5];",
          "878:             a9_prototest.__proto__ = a9_proto;",
          "879:             var c9_prototest = [].every.call(a9_prototest, function(elem){ return elem < 30;});",
          "880:             assert.isFalse(c9_prototest, \"The every() method returned incorrect result as array was converted to an ES5Array in the property getter of the prototype.\");",
          "881:         }",
          "882:     },",
          "883:     {",
          "884:         name: \"Array type conversion tests: fill().\",",
          "885:         body: function ()",
          "886:         {",
          "887:             var temp = 30;",
          "888:             var p10 = {",
          "889:                 [Symbol.toPrimitive] (hint) {",
          "890:                     Object.defineProperty(a10, 1, {configurable : true, get: function(){ return temp;}, set: function(value){ temp = value;}});",
          "891:                     return 0;",
          "892:                 }",
          "893:             };",
          "894:             var a10 = [1, 2, 3, 4, 5];",
          "895:             var c10 = a10.fill(0, p10);",
          "896:             assert.areEqual([0,0,0,0,0], c10, \"ToPrimitive: The fill() method returned incorrect result as array type changed to ES5 array.\");",
          "897:         }",
          "898:     },",
          "899:     {",
          "900:        name: \"Array type conversion tests: filter().\",",
          "901:        body: function ()",
          "902:        {",
          "903:             var p11 = {",
          "904:                 [Symbol.toPrimitive] (hint) {",
          "906:                     Object.defineProperty(a11, \"0\", {configurable : true, get: function(){ return 30;}});",
          "909:                     Object.defineProperty(a11, \"4\", {configurable : true, get: function(){ return 30;}});",
          "910:                     return 0;",
          "911:                 }",
          "912:             };",
          "914:             var a11 = [1, 2, 3, 4, 5];",
          "915:             var c11 = a11.filter(function(elem){ return elem %2 == p11; });",
          "916:             assert.areEqual([2,4,30], c11, \"ToPrimitive: The filter() method returned incorrect result as array type changed to ES5 array.\");",
          "918:             var a11_proto = {};",
          "919:             Object.defineProperty(a11_proto, \"0\", {",
          "920:                   get: function(){",
          "921:                         Object.defineProperty(a11_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "922:                         return 1;",
          "923:                   }",
          "924:             });",
          "926:             var a11_prototest = [, , 3, 4, 5];",
          "927:             a11_prototest.__proto__ = a11_proto;",
          "928:             var c11_prototest = [].filter.call(a11_prototest, function(elem){ return elem %2 == 0; });",
          "929:             assert.areEqual([30,4], c11_prototest, \"ToPrimitive: The filter() method returned incorrect result as array type changed to ES5 array in the property getter of the prototype.\");",
          "931:             var p11_typedarray = {",
          "932:                 [Symbol.toPrimitive] (hint) {",
          "934:                     Object.defineProperty(a11_typedarray, \"0\", {configurable : false, value:30 });",
          "937:                     Object.defineProperty(a11_typedarray, \"4\", {configurable : false, value:30 });",
          "938:                     return 0;",
          "939:                 }",
          "940:             };",
          "942:             var a11_typedarray = new Int16Array([1,2,3,4,5]);",
          "943:             var c11_typedarray = a11_typedarray.filter(function(elem){ return elem %2 == p11_typedarray; });",
          "944:             assert.areEqual([2,4,30], c11_typedarray, \"ToPrimitive: The filter() method returned incorrect result for TypedArray.\");",
          "946:             function a11_constructor(x) { };",
          "947:             a11_constructor[Symbol.species] = function () {",
          "948:                 Object.defineProperty(a11_species, \"0\", { configurable: true, get: function () { return 30; } });",
          "949:                 return {};",
          "950:             };",
          "952:             var a11_species = [1, 2, 3, 4, 5];",
          "953:             a11_species['constructor'] = a11_constructor;",
          "954:             var c11_species = a11_species.filter(function (elem) { return elem % 2 == 0; });",
          "955:             assert.areEqual([30, 2, 4], c11_species, \"The filter() returned incorrect result as array was converted to an ES5Array.\");",
          "956:        }",
          "957:     },",
          "958:     {",
          "959:        name: \"Array type conversion tests: foreach().\",",
          "960:        body: function ()",
          "961:        {",
          "962:             var a18 = [1,2,3,4,5];",
          "963:             var c18 = \"\";",
          "965:             a18.forEach( function (item, index)",
          "966:                 {",
          "967:                     if(index==0)",
          "968:                     {",
          "970:                         Object.defineProperty(a18, \"0\", {configurable : true, get: function(){ return 30;}});",
          "973:                         Object.defineProperty(a18, \"1\", {configurable : true, get: function(){ return 30;}});",
          "974:                     }",
          "975:                     else",
          "976:                     {",
          "977:                         c18 = c18 + \",\"",
          "978:                     }",
          "980:                     c18 = c18 + item*item;",
          "981:                 });",
          "982:             assert.areEqual(\"1,900,9,16,25\", c18, \"ToPrimitive: The forEach() method returned incorrect result for as array type changed to ES5 array.\");",
          "984:             var a18_proto = {};",
          "985:             Object.defineProperty(a18_proto, \"0\", {",
          "986:                   get: function(){",
          "987:                         Object.defineProperty(a18_prototest, \"1\", {configurable : true, get: function(){ return 30;}});",
          "988:                         return 1;",
          "989:                   }",
          "990:             });",
          "992:             var a18_prototest  = [,,3,4,5];",
          "993:             a18_prototest.__proto__ = a18_proto;",
          "994:             var c18_prototest  = \"\";",
          "996:             [].forEach.call(a18_prototest, function (item, index)",
          "997:                 {",
          "998:                     if(index>0)",
          "999:                     {",
          "1000:                         c18_prototest  += \",\"",
          "1001:                     }",
          "1003:                     c18_prototest += item*item;",
          "1004:                 });",
          "1005:             assert.areEqual(\"1,900,9,16,25\", c18_prototest, \"ToPrimitive: The forEach() method returned incorrect result for as array type changed to ES5 array.\");",
          "1007:             var a18_typedarray = new Int16Array([1,2,3,4,5]);",
          "1008:             var c18_typedarray = \"\";",
          "1010:             a18_typedarray.forEach( function (item, index)",
          "1011:                 {",
          "1012:                     if(index==0)",
          "1013:                     {",
          "1015:                         Object.defineProperty(a18_typedarray, \"0\", {configurable : false, value:30 });",
          "1018:                         Object.defineProperty(a18_typedarray, \"1\", {configurable : false, value:30 });",
          "1019:                     }",
          "1020:                     else",
          "1021:                     {",
          "1022:                         c18_typedarray = c18_typedarray + \",\"",
          "1023:                     }",
          "1025:                     c18_typedarray = c18_typedarray + item*item;",
          "1026:                 });",
          "1027:             assert.areEqual(\"1,900,9,16,25\", c18_typedarray, \"ToPrimitive: The forEach() returned incorrect result for TypedArray.\");",
          "1028:         }",
          "1029:     },",
          "1030:     {",
          "1031:        name: \"Array type conversion tests: copyWithin().\",",
          "1032:        body: function ()",
          "1033:        {",
          "1034:             var p21 = {",
          "1035:                 [Symbol.toPrimitive] (hint) {",
          "1036:                     Object.defineProperty(a21, \"0\", {configurable : true, get: function(){ return 30;}});",
          "1037:                     return -2;",
          "1038:                 }",
          "1039:             };",
          "1041:             var a21 = [1,2,3,4,5];",
          "1042:             var c21 = a21.copyWithin(p21);",
          "1043:             assert.areEqual([30,2,3,30,2], c21, \"ToPrimitive: The copyWithin() method returned incorrect result as array type changed to ES5 array.\");",
          "1060:             var p21_typedarray = {",
          "1061:                 [Symbol.toPrimitive] (hint) {",
          "1062:                     Object.defineProperty(a21_typedarray, \"0\", {configurable : false, value:30 });",
          "1063:                     return -2;",
          "1064:                 }",
          "1065:             };",
          "1067:             var a21_typedarray = new Int16Array([1,2,3,4,5]);",
          "1068:             var c21_typedarray = a21_typedarray.copyWithin(p21_typedarray);",
          "1069:             assert.areEqual([30,2,3,30,2], c21_typedarray, \"ToPrimitive: The copyWithin() method returned incorrect result for TypedArray.\");",
          "1070:        }",
          "1071:     },",
          "",
          "---------------"
        ]
      }
    }
  ]
}