{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7a231b49738d82582d9f4c31da18da90928d6f10",
      "candidate_info": {
        "commit_hash": "7a231b49738d82582d9f4c31da18da90928d6f10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a231b49738d82582d9f4c31da18da90928d6f10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "The expression \"(X IS FALSE) BETWEEN FALSE AND TRUE\" does not implie that X is not NULL.  Ticket [fba33c8b1df6a915]\n\nFossilOrigin-Name: 057fb8b1809b8b9c8fff0fd0804153b9644f0545c23c6ddc4758bda3381094b9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45ff2b1f2693bb0231a864a511bb82cf2a5945ab3d806a5bbaf1517ecb287883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4999:       assert( pList!=0 );",
          "5000:       assert( pList->nExpr==2 );",
          "5001:       if( seenNot ) return 0;",
          "5004:       ){",
          "5005:         return 1;",
          "5006:       }",
          "5008:     }",
          "5009:     case TK_EQ:",
          "5010:     case TK_NE:",
          "",
          "[Removed Lines]",
          "5002:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, seenNot)",
          "5003:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, seenNot)",
          "5007:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "",
          "[Added Lines]",
          "5005:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, 1)",
          "5006:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, 1)",
          "5010:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "440: # 2019-08-30",
          "441: # Ticket https://www.sqlite.org/src/info/a6408d42b9f44462",
          "442: #",
          "443: do_execsql_test index6-15.1 {",
          "444:   DROP TABLE t0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: # Ticket https://www.sqlite.org/src/info/fba33c8b1df6a915",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:   CREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;",
          "448:   SELECT 1 FROM t0 WHERE (t0.c0 IS FALSE) IS FALSE;",
          "449: } {1}",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: do_execsql_test index6-15.2 {",
          "452:   SELECT 1 FROM t0 WHERE (t0.c0 IS FALSE) BETWEEN FALSE AND TRUE;",
          "453: } {1}",
          "454: do_execsql_test index6-15.3 {",
          "455:   SELECT 1 FROM t0 WHERE TRUE BETWEEN (t0.c0 IS FALSE) AND TRUE;",
          "456: } {1}",
          "457: do_execsql_test index6-15.4 {",
          "458:   SELECT 1 FROM t0 WHERE FALSE BETWEEN FALSE AND (t0.c0 IS FALSE);",
          "459: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e9a67adb059733e05e0791f2ec519985eaa333c",
      "candidate_info": {
        "commit_hash": "9e9a67adb059733e05e0791f2ec519985eaa333c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e9a67adb059733e05e0791f2ec519985eaa333c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Ensure the functions that appear to be constant are not factored out of expression that originate on the right-hand side of a LEFT JOIN. Ticket [6710d2f7a13a2997]\n\nFossilOrigin-Name: 500c9152daaf11cf69d778aa8592175f6088337c6667c59af6df3a24cd81eb0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c4bca64fb5f635296a8d7d7c1bf2808e02ca734a9983e5cee9132f5352a9a6d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3994:       break;",
          "3995:     }",
          "3997:     case TK_IF_NULL_ROW: {",
          "3998:       int addrINR;",
          "3999:       addrINR = sqlite3VdbeAddOp1(v, OP_IfNullRow, pExpr->iTable);",
          "4000:       inReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft, target);",
          "4001:       sqlite3VdbeJumpHere(v, addrINR);",
          "4002:       sqlite3VdbeChangeP3(v, addrINR, inReg);",
          "4003:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4005:       u8 okConstFactor = pParse->okConstFactor;",
          "4011:       pParse->okConstFactor = 0;",
          "4013:       pParse->okConstFactor = okConstFactor;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:    WHERE (b IS NOT NULL)=0;",
          "865: } {1 {}}",
          "867: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867: # 2019-08-17 ticket https://sqlite.org/src/tktview/6710d2f7a13a299728ab",
          "868: # Ensure that constants that derive from the right-hand table of a LEFT JOIN",
          "869: # are never factored out, since they are not really constant.",
          "870: #",
          "871: do_execsql_test join-17.100 {",
          "872:   DROP TABLE IF EXISTS t1;",
          "873:   CREATE TABLE t1(x);",
          "874:   INSERT INTO t1(x) VALUES(0),(1);",
          "875:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1) AS y FROM t1) ON x WHERE NOT(y='a');",
          "876: } {1 1 1 1}",
          "877: do_execsql_test join-17.110 {",
          "878:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1)+2 AS y FROM t1) ON x",
          "879:    WHERE NOT(y='a');",
          "880: } {1 3 1 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e46201e264082d02490e20f778b3f0fc00ba136f",
      "candidate_info": {
        "commit_hash": "e46201e264082d02490e20f778b3f0fc00ba136f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e46201e264082d02490e20f778b3f0fc00ba136f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c",
          "test/fkey8.test"
        ],
        "message": "Fix a bug in the code that detects self-referencing rows as part of foreign key processing. Fix for [50d2a6c2].\n\nFossilOrigin-Name: 16fff05347f42fe9fa0f3150290b98b59a9bb921e49dc07ca397aa1de7a7e17d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c",
          "test/fkey8.test||test/fkey8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddf06db702761d663119d508afe21d7dfebe963d576bb42fc2f2024205ab86f8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:       pNe = sqlite3PExpr(pParse, TK_NE, pLeft, pRight);",
          "616:     }else{",
          "617:       Expr *pEq, *pAll = 0;",
          "619:       assert( pIdx!=0 );",
          "621:         i16 iCol = pIdx->aiColumn[i];",
          "622:         assert( iCol>=0 );",
          "623:         pLeft = exprTableRegister(pParse, pTab, regData, iCol);",
          "626:         pAll = sqlite3ExprAnd(db, pAll, pEq);",
          "627:       }",
          "628:       pNe = sqlite3PExpr(pParse, TK_NOT, pAll, 0);",
          "",
          "[Removed Lines]",
          "618:       Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "620:       for(i=0; i<pPk->nKeyCol; i++){",
          "624:         pRight = exprTableColumn(db, pTab, pSrc->a[0].iCursor, iCol);",
          "625:         pEq = sqlite3PExpr(pParse, TK_EQ, pLeft, pRight);",
          "",
          "[Added Lines]",
          "622:       for(i=0; i<pIdx->nKeyCol; i++){",
          "626:         pRight = sqlite3Expr(db, TK_ID, pTab->aCol[iCol].zName);",
          "627:         pEq = sqlite3PExpr(pParse, TK_IS, pLeft, pRight);",
          "",
          "---------------"
        ],
        "test/fkey8.test||test/fkey8.test": [
          "File: test/fkey8.test -> test/fkey8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   DELETE FROM p3 WHERE a=1",
          "165: } {1 {FOREIGN KEY constraint failed}}",
          "167: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: do_execsql_test 3.0 {",
          "169:   PRAGMA foreign_keys=ON;",
          "170:   CREATE TABLE t2(",
          "171:     a PRIMARY KEY, b, c, d, e,",
          "172:       FOREIGN KEY(b, c) REFERENCES t2(d, e)",
          "173:   ) WITHOUT ROWID;",
          "174:   CREATE UNIQUE INDEX idx ON t2(d, e);",
          "176:   INSERT INTO t2 VALUES(1, 'one', 'one', 'one', 'one'); -- row is parent of self",
          "177:   INSERT INTO t2 VALUES(2, 'one', 'one', 'one', NULL);  -- parent is row 1",
          "178: }",
          "180: do_catchsql_test 3.1 {",
          "181:   DELETE FROM t2 WHERE a=1;",
          "182: } {1 {FOREIGN KEY constraint failed}}",
          "184: do_execsql_test 4.0 {",
          "185:   CREATE TABLE t1 (",
          "186:       c1 PRIMARY KEY,",
          "187:       c2 NUMERIC,",
          "188:       FOREIGN KEY(c1) REFERENCES t1(c2)",
          "189:       ) WITHOUT ROWID ;",
          "190:   CREATE INDEX t1c1 ON t1(c1);",
          "191:   CREATE UNIQUE INDEX t1c1unique ON t1(c2);",
          "192: }",
          "193: do_catchsql_test 4.1 {",
          "194:   INSERT OR REPLACE INTO t1 VALUES(10000, 20000);",
          "195: } {1 {FOREIGN KEY constraint failed}}",
          "196: do_execsql_test 4.2 {",
          "197:   INSERT OR REPLACE INTO t1 VALUES(20000, 20000);",
          "198: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a31dc201e905816f97fd20001cb5f154276f91d",
      "candidate_info": {
        "commit_hash": "0a31dc201e905816f97fd20001cb5f154276f91d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a31dc201e905816f97fd20001cb5f154276f91d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "If the initial byte of a record is a large value, then always used the generalized record comparison routine sqlite3VdbeRecordCompare() rather than one of the specialized versions that are optimized for shorter records.\n\nFossilOrigin-Name: c1ac00706bae45fe9735061ada025880606cdfb8ecfdaa36b4e2d04275820861",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 906d1fd8650874236e0bf5734d5347dcc45ec036164a56570fec37da4ffeaf8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5552:             sqlite3_free(pCellKey);",
          "5553:             goto moveto_finish;",
          "5554:           }",
          "5556:           sqlite3_free(pCellKey);",
          "5557:         }",
          "5558:         assert(",
          "",
          "[Removed Lines]",
          "5555:           c = xRecordCompare(nCell, pCellKey, pIdxKey);",
          "",
          "[Added Lines]",
          "5555:           c = sqlite3VdbeRecordCompare(nCell, pCellKey, pIdxKey);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21a3b3191eb0869448601b07123639eae1789f05",
      "candidate_info": {
        "commit_hash": "21a3b3191eb0869448601b07123639eae1789f05",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21a3b3191eb0869448601b07123639eae1789f05",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Support Tcl libraries with a suffix.\n\nFossilOrigin-Name: 8d0153996a3685a9b109a01fea0cba76e4296b010e96fc0db43fa6fde54d1965",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "864: TCLVERSION = 86",
          "865: !ENDIF",
          "867: !IFNDEF TCLDIR",
          "868: TCLDIR = $(TOP)\\compat\\tcl",
          "869: !ENDIF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867: !IFNDEF TCLSUFFIX",
          "868: TCLSUFFIX =",
          "869: !ENDIF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "877: !ENDIF",
          "879: !IFNDEF LIBTCL",
          "881: !ENDIF",
          "883: !IFNDEF LIBTCLSTUB",
          "885: !ENDIF",
          "887: !IFNDEF LIBTCLPATH",
          "",
          "[Removed Lines]",
          "880: LIBTCL = tcl$(TCLVERSION).lib",
          "884: LIBTCLSTUB = tclstub$(TCLVERSION).lib",
          "",
          "[Added Lines]",
          "884: LIBTCL = tcl$(TCLVERSION)$(TCLSUFFIX).lib",
          "888: LIBTCLSTUB = tclstub$(TCLVERSION)$(TCLSUFFIX).lib",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c9f1972e10b0cdb5e351a776a64c60acf404dcfbe2a8a28c0a273bbe851e677f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}