{
  "cve_id": "CVE-2018-9257",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.5, the CQL dissector could go into an infinite loop. This was addressed in epan/dissectors/packet-cql.c by checking for a nonzero number of columns.",
  "repo": "wireshark/wireshark",
  "patch_hash": "b4498c964f58a241e0706e19391c8c300dfa0395",
  "patch_info": {
    "commit_hash": "b4498c964f58a241e0706e19391c8c300dfa0395",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/b4498c964f58a241e0706e19391c8c300dfa0395",
    "files": [
      "epan/dissectors/packet-cql.c"
    ],
    "message": "CQL: ensure that there is at least one column to display rows\n\nBug: 14530\nChange-Id: Ie5729c00ea4d826dbae028b3a4653acf746b92b8\nReviewed-on: https://code.wireshark.org/review/26521\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c": [
      "File: epan/dissectors/packet-cql.c -> epan/dissectors/packet-cql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1415:       }",
      "1416:       offset += 4;",
      "1429:         }",
      "1430:        }",
      "1431:       }",
      "",
      "[Removed Lines]",
      "1418:       for (j = 0; j < result_rows_row_count; ++j) {",
      "1419:        columns_subtree = proto_tree_add_subtree(rows_subtree, tvb, offset, 0, ett_cql_result_columns, &ti, \"Data (Columns)\");",
      "1421:        if (offset_row_metadata) {",
      "1422:         offset = parse_row(columns_subtree, pinfo, tvb, offset_row_metadata, offset, result_rows_columns_count);",
      "1423:        } else {",
      "1424:         for (k = 0; k < result_rows_columns_count; ++k) {",
      "1425:          proto_tree_add_item_ret_int(columns_subtree, hf_cql_bytes_length, tvb, offset, 4, ENC_BIG_ENDIAN, &bytes_length);",
      "1426:          offset += 4;",
      "1427:          proto_tree_add_item(columns_subtree, hf_cql_bytes, tvb, offset, bytes_length, ENC_NA);",
      "1428:          offset += bytes_length;",
      "",
      "[Added Lines]",
      "1418:       if (result_rows_columns_count) {",
      "1419:        for (j = 0; j < result_rows_row_count; ++j) {",
      "1420:         columns_subtree = proto_tree_add_subtree(rows_subtree, tvb, offset, 0, ett_cql_result_columns, &ti, \"Data (Columns)\");",
      "1422:         if (offset_row_metadata) {",
      "1423:          offset = parse_row(columns_subtree, pinfo, tvb, offset_row_metadata, offset, result_rows_columns_count);",
      "1424:         } else {",
      "1425:          for (k = 0; k < result_rows_columns_count; ++k) {",
      "1426:           proto_tree_add_item_ret_int(columns_subtree, hf_cql_bytes_length, tvb, offset, 4, ENC_BIG_ENDIAN, &bytes_length);",
      "1427:           offset += 4;",
      "1428:           proto_tree_add_item(columns_subtree, hf_cql_bytes, tvb, offset, bytes_length, ENC_NA);",
      "1429:           offset += bytes_length;",
      "1430:          }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7a9501b0439a5dbf24016a95b4896170d789dc2",
      "candidate_info": {
        "commit_hash": "d7a9501b0439a5dbf24016a95b4896170d789dc2",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d7a9501b0439a5dbf24016a95b4896170d789dc2",
        "files": [
          "epan/dissectors/packet-cql.c"
        ],
        "message": "CQL: ensure that there is at least one column to display rows\n\nBug: 14530\nChange-Id: Ie5729c00ea4d826dbae028b3a4653acf746b92b8\nReviewed-on: https://code.wireshark.org/review/26521\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit b4498c964f58a241e0706e19391c8c300dfa0395)\nReviewed-on: https://code.wireshark.org/review/26527",
        "before_after_code_files": [
          "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
          ],
          "candidate": [
            "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c": [
          "File: epan/dissectors/packet-cql.c -> epan/dissectors/packet-cql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1427:       }",
          "1428:       offset += 4;",
          "1441:         }",
          "1442:        }",
          "1443:       }",
          "",
          "[Removed Lines]",
          "1430:       for (j = 0; j < result_rows_row_count; ++j) {",
          "1431:        columns_subtree = proto_tree_add_subtree(rows_subtree, tvb, offset, 0, ett_cql_result_columns, &ti, \"Data (Columns)\");",
          "1433:        if (offset_row_metadata) {",
          "1434:         offset = parse_row(columns_subtree, pinfo, tvb, offset_row_metadata, offset, result_rows_columns_count);",
          "1435:        } else {",
          "1436:         for (k = 0; k < result_rows_columns_count; ++k) {",
          "1437:          proto_tree_add_item_ret_int(columns_subtree, hf_cql_bytes_length, tvb, offset, 4, ENC_BIG_ENDIAN, &bytes_length);",
          "1438:          offset += 4;",
          "1439:          proto_tree_add_item(columns_subtree, hf_cql_bytes, tvb, offset, bytes_length, ENC_NA);",
          "1440:          offset += bytes_length;",
          "",
          "[Added Lines]",
          "1430:       if (result_rows_columns_count) {",
          "1431:        for (j = 0; j < result_rows_row_count; ++j) {",
          "1432:         columns_subtree = proto_tree_add_subtree(rows_subtree, tvb, offset, 0, ett_cql_result_columns, &ti, \"Data (Columns)\");",
          "1434:         if (offset_row_metadata) {",
          "1435:          offset = parse_row(columns_subtree, pinfo, tvb, offset_row_metadata, offset, result_rows_columns_count);",
          "1436:         } else {",
          "1437:          for (k = 0; k < result_rows_columns_count; ++k) {",
          "1438:           proto_tree_add_item_ret_int(columns_subtree, hf_cql_bytes_length, tvb, offset, 4, ENC_BIG_ENDIAN, &bytes_length);",
          "1439:           offset += 4;",
          "1440:           proto_tree_add_item(columns_subtree, hf_cql_bytes, tvb, offset, bytes_length, ENC_NA);",
          "1441:           offset += bytes_length;",
          "1442:          }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31fa0548a856436bd660ecd364cdf27e824af4af",
      "candidate_info": {
        "commit_hash": "31fa0548a856436bd660ecd364cdf27e824af4af",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/31fa0548a856436bd660ecd364cdf27e824af4af",
        "files": [
          "epan/dissectors/packet-cql.c"
        ],
        "message": "cql: Dump row results\n\nBug: 13709\nChange-Id: If96e947e14d5bd0ccdc52bf0b618f34c64dd6780\nSigned-off-by: Beno\u00eet Canet <benoit@scylladb.com>\nReviewed-on: https://code.wireshark.org/review/21637\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
          ],
          "candidate": [
            "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c": [
          "File: epan/dissectors/packet-cql.c -> epan/dissectors/packet-cql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <epan/dissectors/packet-tcp.h>",
          "32: #include <epan/wmem/wmem.h>",
          "33: #include <epan/expert.h>",
          "34: #ifdef HAVE_LZ4",
          "35: #include <lz4.h>",
          "36: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <epan/to_str.h>",
          "35: #include <epan/addr_resolv.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: static int hf_cql_short_bytes_length = -1;",
          "87: static int hf_cql_bytes_length = -1;",
          "88: static int hf_cql_bytes = -1;",
          "89: static int hf_cql_raw_compressed_bytes = -1;",
          "90: static int hf_cql_paging_state = -1;",
          "91: static int hf_cql_page_size = -1;",
          "92: static int hf_cql_timestamp = -1;",
          "93: static int hf_cql_query_id = -1;",
          "94: static int hf_cql_string_list_size = -1;",
          "95: static int hf_cql_batch_type = -1;",
          "96: static int hf_cql_batch_query_type = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: static int hf_cql_bigint = -1;",
          "92: static int hf_cql_scale = -1;",
          "93: static int hf_cql_boolean = -1;",
          "94: static int hf_cql_ascii = - 1;",
          "95: static int hf_cql_double = -1;",
          "96: static int hf_cql_float = -1;",
          "97: static int hf_cql_custom = -1;",
          "98: static int hf_cql_int = -1;",
          "99: static int hf_cql_uuid = -1;",
          "100: static int hf_cql_port = -1;",
          "101: static int hf_cql_timeuuid = -1;",
          "102: static int hf_cql_varchar = -1;",
          "103: static int hf_cql_varint_count8 = -1;",
          "104: static int hf_cql_varint_count16 = -1;",
          "105: static int hf_cql_varint_count32 = -1;",
          "106: static int hf_cql_varint_count64 = -1;",
          "112: static int hf_cql_result_timestamp = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: static int hf_cql_result_rows_flag_has_more_pages = -1;",
          "115: static int hf_cql_result_rows_flag_no_metadata = -1;",
          "116: static int hf_cql_result_rows_column_count = -1;",
          "118: static int hf_cql_string_result_rows_global_table_spec_ksname = -1;",
          "119: static int hf_cql_string_result_rows_global_table_spec_table_name = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: static int hf_cql_result_rows_tuple_size = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121: static int hf_cql_string_result_rows_keyspace_name = -1;",
          "122: static int hf_cql_string_result_rows_column_name = -1;",
          "123: static int hf_cql_result_rows_row_count = -1;",
          "125: static int ett_cql_protocol = -1;",
          "126: static int ett_cql_version = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: static int hf_cql_string_result_rows_udt_name = -1;",
          "145: static int hf_cql_string_result_rows_udt_size = -1;",
          "146: static int hf_cql_string_result_rows_udt_field_name = -1;",
          "147: static int hf_cql_string_result_rows_list_size = -1;",
          "148: static int hf_cql_string_result_rows_map_size = -1;",
          "149: static int hf_cql_string_result_rows_set_size = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135: static int hf_cql_response_to = -1;",
          "136: static int hf_cql_response_time = -1;",
          "139: static gboolean cql_desegment = TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: static int hf_cql_ipv4 = -1;",
          "165: static int hf_cql_ipv6 = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "543:  CQL_DECOMPRESSION_ATTEMPTED = 3,",
          "544: } cql_compression_level;",
          "546: static int",
          "547: dissect_cql_tcp_pdu(tvbuff_t* raw_tvb, packet_info* pinfo, proto_tree* tree, void* data _U_)",
          "548: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576: static int parse_option(proto_tree* metadata_subtree, tvbuff_t* tvb, gint offset)",
          "577: {",
          "578:  guint32 data_type = 0;",
          "579:  guint32 string_length = 0;",
          "580:  guint32 tuple_size = 0;",
          "581:  guint32 udt_size = 0;",
          "582:  guint32 i = 0;",
          "584:  proto_tree_add_item_ret_uint(metadata_subtree, hf_cql_result_rows_data_type, tvb, offset, 2, ENC_BIG_ENDIAN, &data_type);",
          "585:  offset += 2;",
          "586:  switch (data_type) {",
          "587:   case CQL_RESULT_ROW_TYPE_LIST:",
          "588:    offset = parse_option(metadata_subtree, tvb, offset);",
          "589:    break;",
          "590:   case CQL_RESULT_ROW_TYPE_MAP:",
          "591:    offset = parse_option(metadata_subtree, tvb, offset);",
          "592:    offset = parse_option(metadata_subtree, tvb, offset);",
          "593:    break;",
          "594:   case CQL_RESULT_ROW_TYPE_SET:",
          "595:    offset = parse_option(metadata_subtree, tvb, offset);",
          "596:    break;",
          "597:   case CQL_RESULT_ROW_TYPE_UDT:",
          "599:    proto_tree_add_item_ret_uint(metadata_subtree, hf_cql_string_length, tvb, offset, 2, ENC_BIG_ENDIAN, &string_length);",
          "600:    offset += 2;",
          "601:    proto_tree_add_item(metadata_subtree, hf_cql_string_result_rows_keyspace_name, tvb, offset, string_length, ENC_UTF_8 | ENC_NA);",
          "602:    offset += string_length;",
          "605:    proto_tree_add_item_ret_uint(metadata_subtree, hf_cql_string_length, tvb, offset, 2, ENC_BIG_ENDIAN, &string_length);",
          "606:    offset += 2;",
          "607:    proto_tree_add_item(metadata_subtree, hf_cql_string_result_rows_udt_name, tvb, offset, string_length, ENC_UTF_8 | ENC_NA);",
          "608:    offset += string_length;",
          "611:    proto_tree_add_item_ret_uint(metadata_subtree, hf_cql_string_result_rows_udt_size, tvb, offset, 2, ENC_BIG_ENDIAN, &udt_size);",
          "612:    offset += 2;",
          "614:    for (i = 0; i < udt_size; i++) {",
          "616:     proto_tree_add_item_ret_uint(metadata_subtree, hf_cql_string_length, tvb, offset, 2, ENC_BIG_ENDIAN, &string_length);",
          "617:     offset += 2;",
          "618:     proto_tree_add_item(metadata_subtree, hf_cql_string_result_rows_udt_field_name, tvb, offset, string_length, ENC_UTF_8 | ENC_NA);",
          "619:     offset += string_length;",
          "622:     offset = parse_option(metadata_subtree, tvb, offset);",
          "623:    }",
          "624:    break;",
          "625:   case CQL_RESULT_ROW_TYPE_TUPLE:",
          "626:    proto_tree_add_item_ret_uint(metadata_subtree, hf_cql_result_rows_tuple_size, tvb, offset, 2, ENC_BIG_ENDIAN, &tuple_size);",
          "627:    offset += 2;",
          "628:    for (i = 0; i < tuple_size; i++) {",
          "629:     offset = parse_option(metadata_subtree, tvb, offset);",
          "630:    }",
          "631:    break;",
          "632:   default:",
          "633:    break;",
          "634:  }",
          "636:  return offset;",
          "637: }",
          "639: static void add_varint_item(proto_tree *tree, tvbuff_t *tvb, const gint offset, gint length)",
          "640: {",
          "641:  switch (length)",
          "642:  {",
          "643:  case 1:",
          "644:   proto_tree_add_item(tree, hf_cql_varint_count8,  tvb, offset, 1, ENC_BIG_ENDIAN);",
          "645:   break;",
          "646:  case 2:",
          "647:   proto_tree_add_item(tree, hf_cql_varint_count16, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "648:   break;",
          "649:  case 3:",
          "650:   proto_tree_add_item(tree, hf_cql_varint_count32, tvb, offset, 3, ENC_BIG_ENDIAN);",
          "651:   break;",
          "652:  case 4:",
          "653:   proto_tree_add_item(tree, hf_cql_varint_count32, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "654:   break;",
          "655:  case 5:",
          "656:   proto_tree_add_item(tree, hf_cql_varint_count64, tvb, offset, 5, ENC_BIG_ENDIAN);",
          "657:   break;",
          "658:  case 6:",
          "659:   proto_tree_add_item(tree, hf_cql_varint_count64, tvb, offset, 6, ENC_BIG_ENDIAN);",
          "660:   break;",
          "661:  case 7:",
          "662:   proto_tree_add_item(tree, hf_cql_varint_count64, tvb, offset, 7, ENC_BIG_ENDIAN);",
          "663:   break;",
          "664:  case 8:",
          "665:   proto_tree_add_item(tree, hf_cql_varint_count64, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "666:   break;",
          "667:  }",
          "668: }",
          "670: static void add_cql_uuid(proto_tree* tree, int hf_uuid, tvbuff_t* tvb, gint offset)",
          "671: {",
          "672:  e_guid_t guid;",
          "673:  int i;",
          "675:  guid.data1 = tvb_get_letohl(tvb, offset+12);",
          "676:  guid.data2 = tvb_get_letohl(tvb, offset+10);",
          "677:  guid.data3 = tvb_get_letohl(tvb, offset+8);",
          "679:  for (i = 0; i < 8; i++)",
          "680:  {",
          "681:   guid.data4[i] = tvb_get_guint8(tvb, offset+(7-i));",
          "682:  }",
          "684:  proto_tree_add_guid(tree, hf_uuid, tvb, offset, 16, &guid);",
          "685: }",
          "688: static int parse_value(proto_tree* columns_subtree, tvbuff_t* tvb, gint* offset_metadata, gint offset)",
          "689: {",
          "690:  guint32 data_type = 0;",
          "691:  guint32 string_length = 0;",
          "692:  gint32 bytes_length = 0;",
          "693:  guint32 tuple_size = 0;",
          "694:  gint32 list_size = 0;",
          "695:  gint32 map_size = 0;",
          "696:  gint32 set_size = 0;",
          "697:  guint32 udt_size = 0;",
          "698:  proto_item *item;",
          "699:  proto_item *sub_item;",
          "700:  guint32 i = 0;",
          "701:  gint32 j = 0;",
          "702:  gint offset_metadata_backup = 0;",
          "703:  guint32 addr4;",
          "704:  struct e_in6_addr addr6;",
          "705:  guint32 port_number;",
          "707:  proto_tree_add_item_ret_int(columns_subtree, hf_cql_bytes_length, tvb, offset, 4, ENC_BIG_ENDIAN, &bytes_length);",
          "708:  offset += 4;",
          "710:  item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_result_rows_data_type, tvb, *offset_metadata, 2, ENC_BIG_ENDIAN, &data_type);",
          "711:  PROTO_ITEM_SET_HIDDEN(item);",
          "714:  if (bytes_length == -1) {",
          "715:   return offset;",
          "716:  }",
          "718:  switch (data_type) {",
          "719:   case CQL_RESULT_ROW_TYPE_CUSTOM:",
          "720:    proto_tree_add_item(columns_subtree, hf_cql_custom, tvb, offset, bytes_length, ENC_UTF_8 | ENC_NA);",
          "721:    offset += bytes_length;",
          "722:    break;",
          "723:   case CQL_RESULT_ROW_TYPE_ASCII:",
          "724:    proto_tree_add_item(columns_subtree, hf_cql_ascii, tvb, offset, bytes_length, ENC_ASCII | ENC_NA);",
          "725:    offset += bytes_length;",
          "726:    break;",
          "727:   case CQL_RESULT_ROW_TYPE_BIGINT:",
          "728:    proto_tree_add_item(columns_subtree, hf_cql_bigint, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "729:    offset += 8;",
          "730:    break;",
          "731:   case CQL_RESULT_ROW_TYPE_BLOB:",
          "732:    proto_tree_add_item(columns_subtree, hf_cql_bytes, tvb, offset, bytes_length, ENC_NA);",
          "733:    offset += bytes_length;",
          "734:    break;",
          "735:   case CQL_RESULT_ROW_TYPE_BOOLEAN:",
          "736:    proto_tree_add_boolean(columns_subtree, hf_cql_boolean, tvb, offset, 1, TRUE);",
          "737:    offset += 1;",
          "738:    break;",
          "739:   case CQL_RESULT_ROW_TYPE_COUNTER:",
          "740:    break;",
          "741:   case CQL_RESULT_ROW_TYPE_DECIMAL:",
          "742:    proto_tree_add_item(columns_subtree, hf_cql_scale, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "743:    offset += 4;",
          "744:    add_varint_item(columns_subtree, tvb, offset, bytes_length - 4);",
          "745:    offset += bytes_length - 4;",
          "746:    break;",
          "747:   case CQL_RESULT_ROW_TYPE_DOUBLE:",
          "748:    proto_tree_add_item(columns_subtree, hf_cql_double, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "749:    offset += 8;",
          "750:    break;",
          "751:   case CQL_RESULT_ROW_TYPE_FLOAT:",
          "752:    proto_tree_add_item(columns_subtree, hf_cql_float, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "753:    offset += 4;",
          "754:    break;",
          "755:   case CQL_RESULT_ROW_TYPE_INT:",
          "756:    proto_tree_add_item(columns_subtree, hf_cql_int, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "757:    offset += 4;",
          "758:    break;",
          "759:   case CQL_RESULT_ROW_TYPE_TIMESTAMP:",
          "760:    proto_tree_add_item(columns_subtree, hf_cql_result_timestamp, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "761:    offset += 8;",
          "762:    break;",
          "763:   case CQL_RESULT_ROW_TYPE_UUID:",
          "764:    add_cql_uuid(columns_subtree, hf_cql_uuid, tvb, offset);",
          "765:    offset += 16;",
          "766:    break;",
          "767:   case CQL_RESULT_ROW_TYPE_VARCHAR:",
          "768:    proto_tree_add_item(columns_subtree, hf_cql_varchar, tvb, offset, bytes_length, ENC_ASCII|ENC_NA);",
          "769:    offset += bytes_length;",
          "770:    break;",
          "771:   case CQL_RESULT_ROW_TYPE_VARINT:",
          "772:    add_varint_item(columns_subtree, tvb, offset, bytes_length);",
          "773:    offset += bytes_length;",
          "774:    break;",
          "775:   case CQL_RESULT_ROW_TYPE_TIMEUUID:",
          "776:    add_cql_uuid(columns_subtree, hf_cql_timeuuid, tvb, offset);",
          "777:    offset += 16;",
          "778:    break;",
          "779:   case CQL_RESULT_ROW_TYPE_INET:",
          "780:    switch (bytes_length) {",
          "781:     case 4:",
          "782:     case 8:",
          "783:      addr4 = tvb_get_ipv4(tvb, offset);",
          "784:      proto_tree_add_ipv4_format_value(columns_subtree, hf_cql_ipv4, tvb, offset, 4, addr4, \"%s\", get_hostname(addr4));",
          "785:      offset += 4;",
          "786:     break;",
          "787:     case 16:",
          "788:     case 20:",
          "789:      tvb_get_ipv6(tvb, offset, &addr6);",
          "790:      proto_tree_add_ipv6_format_value(columns_subtree, hf_cql_ipv6, tvb, offset, 16, &addr6, \"%s\", get_hostname6(&addr6));",
          "791:      offset += 16;",
          "792:      break;",
          "793:     default:",
          "794:      break;",
          "795:    }",
          "797:    if (bytes_length == 16 || bytes_length == 20) {",
          "798:     sub_item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_port, tvb, offset, 4, ENC_BIG_ENDIAN, &port_number);",
          "799:     proto_item_append_text(sub_item, \" (%u)\", port_number);",
          "800:     offset += 4;",
          "801:    }",
          "802:    break;",
          "803:   case CQL_RESULT_ROW_TYPE_DATE:",
          "804:    break;",
          "805:   case CQL_RESULT_ROW_TYPE_TIME:",
          "806:    break;",
          "807:   case CQL_RESULT_ROW_TYPE_SMALLINT:",
          "808:    break;",
          "809:   case CQL_RESULT_ROW_TYPE_TINYINT:",
          "810:    break;",
          "811:   case CQL_RESULT_ROW_TYPE_LIST:",
          "812:    proto_tree_add_item_ret_int(columns_subtree, hf_cql_string_result_rows_list_size, tvb, offset, 4, ENC_BIG_ENDIAN, &list_size);",
          "813:    offset += 4;",
          "814:    offset_metadata_backup = *offset_metadata;",
          "815:    for (j = 0; j < list_size; j++) {",
          "817:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "818:    }",
          "819:    break;",
          "820:   case CQL_RESULT_ROW_TYPE_MAP:",
          "821:    proto_tree_add_item_ret_int(columns_subtree, hf_cql_string_result_rows_map_size, tvb, offset, 4, ENC_BIG_ENDIAN, &map_size);",
          "822:    offset += 4;",
          "823:    offset_metadata_backup = *offset_metadata;",
          "824:    for (j = 0; j < map_size; j++) {",
          "826:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "827:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "828:    }",
          "829:    break;",
          "830:   case CQL_RESULT_ROW_TYPE_SET:",
          "831:    proto_tree_add_item_ret_int(columns_subtree, hf_cql_string_result_rows_set_size, tvb, offset, 4, ENC_BIG_ENDIAN, &set_size);",
          "832:    offset += 4;",
          "833:    offset_metadata_backup = *offset_metadata;",
          "834:    for (j = 0; j < set_size; j++) {",
          "836:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "837:    }",
          "838:    break;",
          "839:   case CQL_RESULT_ROW_TYPE_UDT:",
          "841:    item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_string_length, tvb, *offset_metadata, 2, ENC_BIG_ENDIAN, &string_length);",
          "842:    PROTO_ITEM_SET_HIDDEN(item);",
          "844:    item = proto_tree_add_item(columns_subtree, hf_cql_string_result_rows_keyspace_name, tvb, *offset_metadata, string_length, ENC_UTF_8 | ENC_NA);",
          "845:    PROTO_ITEM_SET_HIDDEN(item);",
          "849:    item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_string_length, tvb, *offset_metadata, 2, ENC_BIG_ENDIAN, &string_length);",
          "850:    PROTO_ITEM_SET_HIDDEN(item);",
          "852:    item = proto_tree_add_item(columns_subtree, hf_cql_string_result_rows_udt_name, tvb, *offset_metadata, string_length, ENC_UTF_8 | ENC_NA);",
          "853:    PROTO_ITEM_SET_HIDDEN(item);",
          "857:    item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_string_result_rows_udt_size, tvb, *offset_metadata, 2, ENC_BIG_ENDIAN, &udt_size);",
          "858:    PROTO_ITEM_SET_HIDDEN(item);",
          "861:    for (i = 0; i < udt_size; i++) {",
          "863:     item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_string_length, tvb, *offset_metadata, 2, ENC_BIG_ENDIAN, &string_length);",
          "864:     PROTO_ITEM_SET_HIDDEN(item);",
          "866:     item = proto_tree_add_item(columns_subtree, hf_cql_string_result_rows_udt_field_name, tvb, *offset_metadata, string_length, ENC_UTF_8 | ENC_NA);",
          "867:     PROTO_ITEM_SET_HIDDEN(item);",
          "871:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "872:    }",
          "873:    break;",
          "874:   case CQL_RESULT_ROW_TYPE_TUPLE:",
          "875:    item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_result_rows_tuple_size, tvb, *offset_metadata, 2, ENC_BIG_ENDIAN, &tuple_size);",
          "876:    PROTO_ITEM_SET_HIDDEN(item);",
          "878:    for (i = 0; i < tuple_size; i++) {",
          "879:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "880:    }",
          "881:    break;",
          "882:   default:",
          "883:    break;",
          "884:  }",
          "886:  return offset;",
          "887: }",
          "889: static int parse_row(proto_tree* columns_subtree, tvbuff_t* tvb, gint offset_metadata, gint offset,",
          "890:       gint result_rows_columns_count)",
          "891: {",
          "892:  gint32 result_rows_flags = 0;",
          "893:  gint string_length;",
          "894:  gint shadow_offset;",
          "895:  proto_item *item;",
          "896:  gint j;",
          "898:  shadow_offset = offset_metadata;",
          "899:  for (j = 0; j < result_rows_columns_count; ++j) {",
          "900:   if (!(result_rows_flags & CQL_RESULT_ROWS_FLAG_GLOBAL_TABLES_SPEC)) {",
          "902:    item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_string_length, tvb, shadow_offset, 2, ENC_BIG_ENDIAN, &string_length);",
          "903:    PROTO_ITEM_SET_HIDDEN(item);",
          "904:    shadow_offset += 2;",
          "905:    item = proto_tree_add_item(columns_subtree, hf_cql_string_result_rows_keyspace_name, tvb, shadow_offset, string_length, ENC_UTF_8 | ENC_NA);",
          "906:    PROTO_ITEM_SET_HIDDEN(item);",
          "907:    shadow_offset += string_length;",
          "908:    item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_string_length, tvb, shadow_offset, 2, ENC_BIG_ENDIAN, &string_length);",
          "909:    PROTO_ITEM_SET_HIDDEN(item);",
          "910:    shadow_offset += 2;",
          "911:    item = proto_tree_add_item(columns_subtree, hf_cql_string_result_rows_table_name, tvb, shadow_offset, string_length, ENC_UTF_8 | ENC_NA);",
          "912:    PROTO_ITEM_SET_HIDDEN(item);",
          "913:    shadow_offset += string_length;",
          "914:   }",
          "917:   item = proto_tree_add_item_ret_uint(columns_subtree, hf_cql_string_length, tvb, shadow_offset, 2, ENC_BIG_ENDIAN, &string_length);",
          "918:   PROTO_ITEM_SET_HIDDEN(item);",
          "919:   shadow_offset += 2;",
          "920:   item = proto_tree_add_item(columns_subtree, hf_cql_string_result_rows_column_name, tvb, shadow_offset, string_length, ENC_UTF_8 | ENC_NA);",
          "921:   PROTO_ITEM_SET_HIDDEN(item);",
          "922:   shadow_offset += string_length;",
          "924:   offset = parse_value(columns_subtree, tvb, &shadow_offset, offset);",
          "925:  }",
          "927:  return offset;",
          "928: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "552:  proto_tree* version_tree;",
          "553:  proto_tree* cql_subtree = NULL;",
          "554:  proto_tree* rows_subtree = NULL;",
          "555:  proto_tree* metadata_subtree = NULL;",
          "557:  gint offset = 0;",
          "558:  guint8 flags = 0;",
          "559:  guint8 first_byte = 0;",
          "560:  guint8 cql_version = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "939:  proto_tree* columns_subtree = NULL;",
          "943:  gint offset_row_metadata = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "571:  gint32 result_rows_flags = 0;",
          "572:  gint32 result_rows_columns_count = 0;",
          "573:  gint64 j = 0;",
          "574:  gint32 bytes_length = 0;",
          "576:  guint32 result_rows_row_count = 0;",
          "578:  conversation_t* conversation;",
          "",
          "[Removed Lines]",
          "575:  guint32 result_rows_data_type = 0;",
          "",
          "[Added Lines]",
          "960:  gint64 k = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "769:   tvb = tvb_new_subset_remaining(raw_tvb, offset);",
          "770:  } else if (compression_level == CQL_DECOMPRESSION_ATTEMPTED) {",
          "771:   proto_tree_add_item(cql_tree, hf_cql_raw_compressed_bytes, raw_tvb, offset,",
          "773:   return tvb_captured_length(raw_tvb);",
          "774:  }",
          "775:  offset = 0;",
          "",
          "[Removed Lines]",
          "772:         tvb_captured_length_remaining(raw_tvb, offset), ENC_NA);",
          "",
          "[Added Lines]",
          "1158:      tvb_captured_length_remaining(raw_tvb, offset), ENC_NA);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "869:       offset = dissect_cql_query_parameters(cql_subtree, tvb, offset, 0);",
          "870:      } else if (batch_query_type == 1) {",
          "872:       guint32 value_count = 0;",
          "873:       guint32 query_id_bytes_length;",
          "",
          "[Removed Lines]",
          "871:       guint64 k;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "987:       if (result_rows_flags & CQL_RESULT_ROWS_FLAG_NO_METADATA) {",
          "989:       } else {",
          "991:        for (j = 0; j < result_rows_columns_count; ++j) {",
          "992:         if (!(result_rows_flags & CQL_RESULT_ROWS_FLAG_GLOBAL_TABLES_SPEC)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1378:        offset_row_metadata = offset;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1039:        }",
          "1040:       }",
          "1042:       rows_subtree = proto_tree_add_subtree(cql_subtree, tvb, offset, 0, ett_cql_result_rows, &ti, \"Rows\");",
          "1046:       for (j = 0; j < result_rows_row_count; ++j) {",
          "1047:        columns_subtree = proto_tree_add_subtree(rows_subtree, tvb, offset, 0, ett_cql_result_columns, &ti, \"Data (Columns)\");",
          "1054:        }",
          "1055:       }",
          "1059:       break;",
          "",
          "[Removed Lines]",
          "1012:         proto_tree_add_item_ret_uint(metadata_subtree, hf_cql_result_rows_data_type, tvb, offset, 2, ENC_BIG_ENDIAN, &result_rows_data_type);",
          "1013:         offset += 2;",
          "1014:         switch (result_rows_data_type) {",
          "1015:          case CQL_RESULT_ROW_TYPE_CUSTOM:",
          "1016:           proto_tree_add_item(metadata_subtree, hf_cql_string, tvb, offset, string_length, ENC_UTF_8 | ENC_NA);",
          "1017:           offset += string_length;",
          "1018:           break;",
          "1020:          case CQL_RESULT_ROW_TYPE_LIST:",
          "1022:           return 12;",
          "1023:          case CQL_RESULT_ROW_TYPE_MAP:",
          "1025:           return 13;",
          "1027:          case CQL_RESULT_ROW_TYPE_SET:",
          "1028:           proto_tree_add_item_ret_uint(metadata_subtree, hf_cql_result_rows_data_type, tvb, offset, 2, ENC_BIG_ENDIAN, &result_rows_data_type);",
          "1029:           offset += 2;",
          "1031:           break;",
          "1033:          case CQL_RESULT_ROW_TYPE_UDT:",
          "1035:           return 16;",
          "1036:          default:",
          "1037:           break;",
          "1038:         }",
          "1043:       proto_tree_add_item_ret_uint(rows_subtree, hf_cql_result_rows_row_count, tvb, offset, 4, ENC_BIG_ENDIAN, &result_rows_row_count);",
          "1049:        for (k = 0; k < result_rows_columns_count; ++k) {",
          "1050:         proto_tree_add_item_ret_uint(columns_subtree, hf_cql_bytes_length, tvb, offset, 4, ENC_BIG_ENDIAN, &bytes_length);",
          "1051:         offset += 4;",
          "1052:         proto_tree_add_item(columns_subtree, hf_cql_bytes, tvb, offset, bytes_length, ENC_NA);",
          "1053:         offset += bytes_length;",
          "",
          "[Added Lines]",
          "1401:         offset = parse_option(metadata_subtree, tvb, offset);",
          "1406:       proto_tree_add_item_ret_int(rows_subtree, hf_cql_result_rows_row_count, tvb, offset, 4, ENC_BIG_ENDIAN, &result_rows_row_count);",
          "1407:       offset += 4;",
          "1412:        if (offset_row_metadata) {",
          "1413:         offset = parse_row(columns_subtree, tvb, offset_row_metadata, offset, result_rows_columns_count);",
          "1414:        } else {",
          "1415:         for (k = 0; k < result_rows_columns_count; ++k) {",
          "1416:          proto_tree_add_item_ret_int(columns_subtree, hf_cql_bytes_length, tvb, offset, 4, ENC_BIG_ENDIAN, &bytes_length);",
          "1417:          offset += 4;",
          "1418:          proto_tree_add_item(columns_subtree, hf_cql_bytes, tvb, offset, bytes_length, ENC_NA);",
          "1419:          offset += bytes_length;",
          "1420:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1410:     \"Batch type\", \"cql.batch_type\",",
          "1411:     FT_UINT8, BASE_DEC,",
          "1412:     VALS(cql_batch_type_names), 0x0,",
          "1414:    }",
          "1415:   },",
          "1416:   {",
          "",
          "[Removed Lines]",
          "1413:     \"CQL batch type\", HFILL",
          "",
          "[Added Lines]",
          "1778:     NULL, HFILL",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1419:     \"Batch query type\", \"cql.batch_query_type\",",
          "1420:     FT_UINT8, BASE_DEC,",
          "1421:     VALS(cql_batch_query_type_names), 0x00,",
          "1423:    }",
          "1424:   },",
          "1425:   {",
          "",
          "[Removed Lines]",
          "1422:     \"CQL batch query type\", HFILL",
          "",
          "[Added Lines]",
          "1787:     NULL, HFILL",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1464:     \"Global Spec Keyspace Name\", \"cql.result.rows.keyspace_name\",",
          "1465:     FT_STRING, STR_UNICODE,",
          "1466:     NULL, 0x0,",
          "1468:    }",
          "1469:   },",
          "1470:   {",
          "",
          "[Removed Lines]",
          "1467:     \"UTF-8 string value\", HFILL",
          "",
          "[Added Lines]",
          "1832:     NULL, HFILL",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1473:     \"Global Spec Table Name\", \"cql.result.rows.table_name\",",
          "1474:     FT_STRING, STR_UNICODE,",
          "1475:     NULL, 0x0,",
          "1477:    }",
          "1478:   },",
          "1479:   {",
          "",
          "[Removed Lines]",
          "1476:     \"UTF-8 string value\", HFILL",
          "",
          "[Added Lines]",
          "1841:     NULL, HFILL",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1482:     \"Table Name\", \"cql.result.rows.table_name\",",
          "1483:     FT_STRING, STR_UNICODE,",
          "1484:     NULL, 0x0,",
          "1486:    }",
          "1487:   },",
          "1488:   {",
          "",
          "[Removed Lines]",
          "1485:     \"UTF-8 string value\", HFILL",
          "",
          "[Added Lines]",
          "1850:     NULL, HFILL",
          "1851:    }",
          "1852:   },",
          "1853:   {",
          "1854:    &hf_cql_string_result_rows_udt_name,",
          "1855:    {",
          "1856:     \"User Defined Type Name\", \"cql.result.rows.udt_name\",",
          "1857:     FT_STRING, STR_UNICODE,",
          "1858:     NULL, 0x0,",
          "1859:     NULL, HFILL",
          "1860:    }",
          "1861:   },",
          "1862:   {",
          "1863:    &hf_cql_string_result_rows_udt_field_name,",
          "1864:    {",
          "1865:     \"User Defined Type field Name\", \"cql.result.rows.udt_field_name\",",
          "1866:     FT_STRING, STR_UNICODE,",
          "1867:     NULL, 0x0,",
          "1868:     NULL, HFILL",
          "1869:    }",
          "1870:   },",
          "1871:   {",
          "1872:    &hf_cql_string_result_rows_udt_size,",
          "1873:    {",
          "1874:     \"User Defined Type Size\", \"cql.result.rows.udt_size\",",
          "1875:     FT_UINT16, BASE_DEC,",
          "1876:     NULL, 0x0,",
          "1877:     NULL, HFILL",
          "1878:    }",
          "1879:   },",
          "1880:   {",
          "1881:    &hf_cql_string_result_rows_list_size,",
          "1882:    {",
          "1883:     \"List Size\", \"cql.result.rows.list_size\",",
          "1884:     FT_INT32, BASE_DEC,",
          "1885:     NULL, 0x0,",
          "1886:     NULL, HFILL",
          "1887:    }",
          "1888:   },",
          "1889:   {",
          "1890:    &hf_cql_string_result_rows_map_size,",
          "1891:    {",
          "1892:     \"Map Size\", \"cql.result.rows.map_size\",",
          "1893:     FT_INT32, BASE_DEC,",
          "1894:     NULL, 0x0,",
          "1895:     NULL, HFILL",
          "1896:    }",
          "1897:   },",
          "1898:   {",
          "1899:    &hf_cql_string_result_rows_set_size,",
          "1900:    {",
          "1901:     \"Set Size\", \"cql.result.rows.set_size\",",
          "1902:     FT_INT32, BASE_DEC,",
          "1903:     NULL, 0x0,",
          "1904:     NULL, HFILL",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1491:     \"Keyspace Name\", \"cql.result.rows.keyspace_name\",",
          "1492:     FT_STRING, STR_UNICODE,",
          "1493:     NULL, 0x0,",
          "1495:    }",
          "1496:   },",
          "1497:   {",
          "",
          "[Removed Lines]",
          "1494:     \"UTF-8 string value\", HFILL",
          "",
          "[Added Lines]",
          "1913:     NULL, HFILL",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1500:     \"Column Name\", \"cql.result.rows.column_name\",",
          "1501:     FT_STRING, STR_UNICODE,",
          "1502:     NULL, 0x0,",
          "1504:    }",
          "1505:   },",
          "1506:   {",
          "",
          "[Removed Lines]",
          "1503:     \"UTF-8 string value\", HFILL",
          "",
          "[Added Lines]",
          "1922:     NULL, HFILL",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1556:     \"Raw byte array\", HFILL",
          "1557:    }",
          "1558:   },",
          "1559:   {",
          "1560:    &hf_cql_raw_compressed_bytes,",
          "1561:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1978:   {",
          "1979:    &hf_cql_bigint,",
          "1980:    {",
          "1981:     \"Bigint\", \"cql.bigint\",",
          "1982:     FT_INT64, BASE_DEC,",
          "1983:     NULL, 0x0,",
          "1984:     NULL, HFILL",
          "1985:    }",
          "1986:   },",
          "1987:   {",
          "1988:    &hf_cql_scale,",
          "1989:    {",
          "1990:     \"Scale\", \"cql.scale\",",
          "1991:     FT_INT32, BASE_DEC,",
          "1992:     NULL, 0x0,",
          "1993:     NULL, HFILL",
          "1994:    }",
          "1995:   },",
          "1996:   {",
          "1997:    &hf_cql_ascii,",
          "1998:    {",
          "1999:     \"Ascii\", \"cql.ascii\",",
          "2000:     FT_STRING, STR_ASCII,",
          "2001:     NULL, 0x0,",
          "2002:     \"An Ascii string\", HFILL",
          "2003:    }",
          "2004:   },",
          "2005:   {",
          "2006:    &hf_cql_double,",
          "2007:    {",
          "2008:     \"Double float\", \"cql.double\",",
          "2009:     FT_DOUBLE, BASE_NONE,",
          "2010:     NULL, 0x0,",
          "2011:     NULL, HFILL",
          "2012:    }",
          "2013:   },",
          "2014:   {",
          "2015:    &hf_cql_float,",
          "2016:    {",
          "2017:     \"Float\", \"cql.float\",",
          "2018:     FT_FLOAT, BASE_NONE,",
          "2019:     NULL, 0x0,",
          "2020:     NULL, HFILL",
          "2021:    }",
          "2022:   },",
          "2023:   {",
          "2024:    &hf_cql_int,",
          "2025:    {",
          "2026:     \"Int\", \"cql.int\",",
          "2027:     FT_INT32, BASE_DEC,",
          "2028:     NULL, 0x0,",
          "2029:     NULL, HFILL",
          "2030:    }",
          "2031:   },",
          "2032:   {",
          "2033:    &hf_cql_varint_count8,",
          "2034:    {",
          "2035:     \"Varint\", \"cql.varint\",",
          "2036:     FT_UINT8, BASE_DEC,",
          "2037:     NULL, 0x0,",
          "2038:     NULL, HFILL",
          "2039:    },",
          "2040:   },",
          "2041:   {",
          "2042:    &hf_cql_varint_count16,",
          "2043:    {",
          "2044:     \"Varint\", \"cql.varint\",",
          "2045:     FT_UINT16, BASE_DEC,",
          "2046:     NULL, 0x0,",
          "2047:     NULL, HFILL",
          "2048:    },",
          "2049:   },",
          "2050:   {",
          "2051:    &hf_cql_varint_count32,",
          "2052:    {",
          "2053:     \"Varint\", \"cql.varint\",",
          "2054:     FT_UINT32, BASE_DEC,",
          "2055:     NULL, 0x0,",
          "2056:     NULL, HFILL",
          "2057:    },",
          "2058:   },",
          "2059:   {",
          "2060:    &hf_cql_varint_count64,",
          "2061:    {",
          "2062:     \"Varint\", \"cql.varint64\",",
          "2063:     FT_UINT64, BASE_DEC,",
          "2064:     NULL, 0x0,",
          "2065:     NULL, HFILL",
          "2066:    },",
          "2067:   },",
          "2068:   {",
          "2069:    &hf_cql_varchar,",
          "2070:    {",
          "2071:     \"Varchar\", \"cql.varchar\",",
          "2072:     FT_STRING, STR_UNICODE,",
          "2073:     NULL, 0x0,",
          "2074:     NULL, HFILL",
          "2075:    }",
          "2076:   },",
          "2077:   {",
          "2078:    &hf_cql_timeuuid,",
          "2079:    {",
          "2080:     \"Time Uuid\", \"cql.timeuuid\",",
          "2081:     FT_GUID, STR_ASCII,",
          "2082:     NULL, 0x0,",
          "2083:     NULL, HFILL",
          "2084:    }",
          "2085:   },",
          "2086:   {",
          "2087:    &hf_cql_custom,",
          "2088:    {",
          "2089:     \"Custom\", \"cql.custom\",",
          "2090:     FT_STRING, STR_UNICODE,",
          "2091:     NULL, 0x0,",
          "2092:     \"A custom field\", HFILL",
          "2093:    }",
          "2094:   },",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1617:     \"Timestamp\", \"cql.timestamp\",",
          "1618:     FT_ABSOLUTE_TIME, ABSOLUTE_TIME_LOCAL,",
          "1619:     NULL, 0x0,",
          "1621:    }",
          "1622:   },",
          "1623:   {",
          "",
          "[Removed Lines]",
          "1620:     \"CQL timestamp\", HFILL",
          "",
          "[Added Lines]",
          "2156:     NULL, HFILL",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1665:     \"Count of columns in a rows result from CQL server\", HFILL",
          "1666:    }",
          "1667:   },",
          "1668:   {",
          "1669:    &hf_cql_result_rows_data_type,",
          "1670:    {",
          "1671:     \"CQL Data Type\", \"cql.data_type\",",
          "1672:     FT_UINT16, BASE_DEC,",
          "1673:     VALS(cql_result_row_type_names), 0x0,",
          "1675:    }",
          "1676:   },",
          "1677:   {",
          "1678:    &hf_cql_result_rows_row_count,",
          "1679:    {",
          "1680:     \"CQL Result Rows Count\", \"cql.result.rows.row_count\",",
          "1682:     NULL, 0x0,",
          "1683:     \"Number of rows returned in CQL result\", HFILL",
          "1684:    }",
          "1686:  };",
          "1688:  static ei_register_info ei[] = {",
          "",
          "[Removed Lines]",
          "1674:     \"CQL data type name\", HFILL",
          "1681:     FT_UINT16, BASE_DEC,",
          "1685:   }",
          "",
          "[Added Lines]",
          "2204:   {",
          "2205:    &hf_cql_result_rows_tuple_size,",
          "2206:    {",
          "2207:     \"Tuple Size\", \"cql.result.rows.tuple_size\",",
          "2208:     FT_UINT16, BASE_DEC,",
          "2209:     NULL, 0x0,",
          "2210:     \"Size of a tuple rows result from CQL server\", HFILL",
          "2211:    }",
          "2212:   },",
          "2213:   {",
          "2214:    &hf_cql_result_timestamp,",
          "2215:    {",
          "2216:     \"Timestamp (Epoch Time)\", \"cql.result.timestamp\",",
          "2217:     FT_INT64, BASE_DEC,",
          "2218:     NULL, 0x0,",
          "2219:     \"Timestamp result\", HFILL",
          "2220:    }",
          "2221:   },",
          "2228:     NULL, HFILL",
          "2235:     FT_INT32, BASE_DEC,",
          "2239:   },",
          "2240:   {",
          "2241:    &hf_cql_uuid,",
          "2242:    {",
          "2243:     \"UUID\", \"cql.uuid\",",
          "2244:     FT_GUID, BASE_NONE,",
          "2245:     NULL, 0x0,",
          "2246:     NULL, HFILL",
          "2247:    }",
          "2248:   },",
          "2249:   {",
          "2250:    &hf_cql_port,",
          "2251:    {",
          "2252:     \"Port\", \"cql.port\",",
          "2253:     FT_UINT32, BASE_DEC,",
          "2254:     NULL, 0x0,",
          "2255:     NULL, HFILL",
          "2256:    }",
          "2257:   },",
          "2258:   {",
          "2259:    &hf_cql_boolean,",
          "2260:    {",
          "2261:     \"Boolean\", \"cql.boolean\",",
          "2262:     FT_BOOLEAN, BASE_NONE,",
          "2263:     NULL, 0x0,",
          "2264:     NULL, HFILL",
          "2265:    }",
          "2266:   },",
          "2267:   {",
          "2268:    &hf_cql_ipv4,",
          "2269:    {",
          "2270:     \"IPV4\", \"cql.ipv4\",",
          "2271:     FT_IPv4, BASE_NONE,",
          "2272:     NULL, 0x0,",
          "2273:     NULL, HFILL",
          "2274:    }",
          "2275:   },",
          "2276:   {",
          "2277:    &hf_cql_ipv6,",
          "2278:    {",
          "2279:     \"IPV6\", \"cql.ipv6\",",
          "2280:     FT_IPv6, BASE_NONE,",
          "2281:     NULL, 0x0,",
          "2282:     NULL, HFILL",
          "2283:    }",
          "2284:   },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e738bad90eb0ede94c56fb7709f0081564cd225",
      "candidate_info": {
        "commit_hash": "8e738bad90eb0ede94c56fb7709f0081564cd225",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8e738bad90eb0ede94c56fb7709f0081564cd225",
        "files": [
          "epan/dissectors/packet-cql.c"
        ],
        "message": "CQL: add an expert info when a list count is negative\n\nBug: 13764\nChange-Id: Ied78911c7089c9b7ca50d4df0e478cd4946af372\nReviewed-on: https://code.wireshark.org/review/21988\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Beno\u00eet Canet <benoit@scylladb.com>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
          ],
          "candidate": [
            "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-cql.c||epan/dissectors/packet-cql.c": [
          "File: epan/dissectors/packet-cql.c -> epan/dissectors/packet-cql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: static gboolean cql_desegment = TRUE;",
          "170: static expert_field ei_cql_data_not_dissected_yet = EI_INIT;",
          "173: typedef struct _cql_transaction_type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: static expert_field ei_cql_unexpected_negative_value = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "685: }",
          "689: {",
          "690:  guint32 data_type = 0;",
          "691:  guint32 string_length = 0;",
          "",
          "[Removed Lines]",
          "688: static int parse_value(proto_tree* columns_subtree, tvbuff_t* tvb, gint* offset_metadata, gint offset)",
          "",
          "[Added Lines]",
          "689: static int parse_value(proto_tree* columns_subtree, packet_info *pinfo, tvbuff_t* tvb, gint* offset_metadata, gint offset)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "809:   case CQL_RESULT_ROW_TYPE_TINYINT:",
          "810:    break;",
          "811:   case CQL_RESULT_ROW_TYPE_LIST:",
          "813:    offset += 4;",
          "814:    offset_metadata_backup = *offset_metadata;",
          "815:    for (j = 0; j < list_size; j++) {",
          "818:    }",
          "819:    break;",
          "820:   case CQL_RESULT_ROW_TYPE_MAP:",
          "822:    offset += 4;",
          "823:    offset_metadata_backup = *offset_metadata;",
          "824:    for (j = 0; j < map_size; j++) {",
          "828:    }",
          "829:    break;",
          "830:   case CQL_RESULT_ROW_TYPE_SET:",
          "832:    offset += 4;",
          "833:    offset_metadata_backup = *offset_metadata;",
          "834:    for (j = 0; j < set_size; j++) {",
          "837:    }",
          "838:    break;",
          "839:   case CQL_RESULT_ROW_TYPE_UDT:",
          "",
          "[Removed Lines]",
          "812:    proto_tree_add_item_ret_int(columns_subtree, hf_cql_string_result_rows_list_size, tvb, offset, 4, ENC_BIG_ENDIAN, &list_size);",
          "817:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "821:    proto_tree_add_item_ret_int(columns_subtree, hf_cql_string_result_rows_map_size, tvb, offset, 4, ENC_BIG_ENDIAN, &map_size);",
          "826:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "827:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "831:    proto_tree_add_item_ret_int(columns_subtree, hf_cql_string_result_rows_set_size, tvb, offset, 4, ENC_BIG_ENDIAN, &set_size);",
          "836:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "",
          "[Added Lines]",
          "813:    item = proto_tree_add_item_ret_int(columns_subtree, hf_cql_string_result_rows_list_size, tvb, offset, 4, ENC_BIG_ENDIAN, &list_size);",
          "814:    if (list_size < 0) {",
          "815:     expert_add_info(pinfo, item, &ei_cql_unexpected_negative_value);",
          "816:     return tvb_reported_length(tvb);",
          "817:    }",
          "822:     offset = parse_value(columns_subtree, pinfo, tvb, offset_metadata, offset);",
          "826:    item = proto_tree_add_item_ret_int(columns_subtree, hf_cql_string_result_rows_map_size, tvb, offset, 4, ENC_BIG_ENDIAN, &map_size);",
          "827:    if (map_size < 0) {",
          "828:     expert_add_info(pinfo, item, &ei_cql_unexpected_negative_value);",
          "829:     return tvb_reported_length(tvb);",
          "830:    }",
          "835:     offset = parse_value(columns_subtree, pinfo, tvb, offset_metadata, offset);",
          "836:     offset = parse_value(columns_subtree, pinfo, tvb, offset_metadata, offset);",
          "840:    item = proto_tree_add_item_ret_int(columns_subtree, hf_cql_string_result_rows_set_size, tvb, offset, 4, ENC_BIG_ENDIAN, &set_size);",
          "841:    if (set_size < 0) {",
          "842:     expert_add_info(pinfo, item, &ei_cql_unexpected_negative_value);",
          "843:     return tvb_reported_length(tvb);",
          "844:    }",
          "849:     offset = parse_value(columns_subtree, pinfo, tvb, offset_metadata, offset);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "872:    }",
          "873:    break;",
          "874:   case CQL_RESULT_ROW_TYPE_TUPLE:",
          "",
          "[Removed Lines]",
          "871:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "",
          "[Added Lines]",
          "884:     offset = parse_value(columns_subtree, pinfo, tvb, offset_metadata, offset);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "876:    PROTO_ITEM_SET_HIDDEN(item);",
          "878:    for (i = 0; i < tuple_size; i++) {",
          "880:    }",
          "881:    break;",
          "882:   default:",
          "",
          "[Removed Lines]",
          "879:     offset = parse_value(columns_subtree, tvb, offset_metadata, offset);",
          "",
          "[Added Lines]",
          "892:     offset = parse_value(columns_subtree, pinfo, tvb, offset_metadata, offset);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "886:  return offset;",
          "887: }",
          "891: {",
          "892:  gint32 result_rows_flags = 0;",
          "893:  gint string_length;",
          "",
          "[Removed Lines]",
          "889: static int parse_row(proto_tree* columns_subtree, tvbuff_t* tvb, gint offset_metadata, gint offset,",
          "890:       gint result_rows_columns_count)",
          "",
          "[Added Lines]",
          "902: static int parse_row(proto_tree* columns_subtree, packet_info *pinfo, tvbuff_t* tvb,",
          "903:    gint offset_metadata, gint offset, gint result_rows_columns_count)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "921:   PROTO_ITEM_SET_HIDDEN(item);",
          "922:   shadow_offset += string_length;",
          "925:  }",
          "927:  return offset;",
          "",
          "[Removed Lines]",
          "924:   offset = parse_value(columns_subtree, tvb, &shadow_offset, offset);",
          "",
          "[Added Lines]",
          "937:   offset = parse_value(columns_subtree, pinfo, tvb, &shadow_offset, offset);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "959:  gint64 j = 0;",
          "960:  gint64 k = 0;",
          "961:  gint32 bytes_length = 0;",
          "964:  conversation_t* conversation;",
          "965:  cql_conversation_type* cql_conv;",
          "",
          "[Removed Lines]",
          "962:  guint32 result_rows_row_count = 0;",
          "",
          "[Added Lines]",
          "975:  gint32 result_rows_row_count = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1345:       metadata_subtree = proto_tree_add_subtree(cql_subtree, tvb, offset, 0, ett_cql_result_metadata, &ti, \"Metadata\");",
          "1348:       offset += 4;",
          "1350:       if (result_rows_flags & CQL_RESULT_ROWS_FLAG_GLOBAL_TABLES_SPEC) {",
          "",
          "[Removed Lines]",
          "1347:       proto_tree_add_item_ret_int(metadata_subtree, hf_cql_result_rows_column_count, tvb, offset, 4, ENC_BIG_ENDIAN, &result_rows_columns_count);",
          "",
          "[Added Lines]",
          "1360:       ti = proto_tree_add_item_ret_int(metadata_subtree, hf_cql_result_rows_column_count, tvb, offset, 4, ENC_BIG_ENDIAN, &result_rows_columns_count);",
          "1361:       if (result_rows_columns_count < 0) {",
          "1362:        expert_add_info(pinfo, ti, &ei_cql_unexpected_negative_value);",
          "1363:        return tvb_reported_length(tvb);",
          "1364:       }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1403:       }",
          "1405:       rows_subtree = proto_tree_add_subtree(cql_subtree, tvb, offset, 0, ett_cql_result_rows, &ti, \"Rows\");",
          "1407:       offset += 4;",
          "1409:       for (j = 0; j < result_rows_row_count; ++j) {",
          "1410:        columns_subtree = proto_tree_add_subtree(rows_subtree, tvb, offset, 0, ett_cql_result_columns, &ti, \"Data (Columns)\");",
          "1412:        if (offset_row_metadata) {",
          "1414:        } else {",
          "1415:         for (k = 0; k < result_rows_columns_count; ++k) {",
          "1416:          proto_tree_add_item_ret_int(columns_subtree, hf_cql_bytes_length, tvb, offset, 4, ENC_BIG_ENDIAN, &bytes_length);",
          "",
          "[Removed Lines]",
          "1406:       proto_tree_add_item_ret_int(rows_subtree, hf_cql_result_rows_row_count, tvb, offset, 4, ENC_BIG_ENDIAN, &result_rows_row_count);",
          "1413:         offset = parse_row(columns_subtree, tvb, offset_row_metadata, offset, result_rows_columns_count);",
          "",
          "[Added Lines]",
          "1423:       ti = proto_tree_add_item_ret_int(rows_subtree, hf_cql_result_rows_row_count, tvb, offset, 4, ENC_BIG_ENDIAN, &result_rows_row_count);",
          "1424:       if (result_rows_row_count < 0) {",
          "1425:        expert_add_info(pinfo, ti, &ei_cql_unexpected_negative_value);",
          "1426:        return tvb_reported_length(tvb);",
          "1427:       }",
          "1434:         offset = parse_row(columns_subtree, pinfo, tvb, offset_row_metadata, offset, result_rows_columns_count);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2288:   { &ei_cql_data_not_dissected_yet,",
          "2289:     { \"cql.ie_data_not_dissected_yet\",",
          "2290:     PI_UNDECODED, PI_WARN, \"IE data not dissected yet\", EXPFILL }},",
          "2291:  };",
          "2293:  static gint* ett[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2312:   { &ei_cql_unexpected_negative_value,",
          "2313:     { \"cql.unexpected_negative_value\",",
          "2314:     PI_UNDECODED, PI_ERROR, \"Unexpected negative value\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    }
  ]
}