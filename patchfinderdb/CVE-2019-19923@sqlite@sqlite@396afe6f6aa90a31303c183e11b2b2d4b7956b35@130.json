{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3251a2031bfd29f338a5fda1a08c18878296d354",
      "candidate_info": {
        "commit_hash": "3251a2031bfd29f338a5fda1a08c18878296d354",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3251a2031bfd29f338a5fda1a08c18878296d354",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/colname.test"
        ],
        "message": "Remove two incorrect assert() statements from the logic used to derive column names and types from subqueries.\n\nFossilOrigin-Name: 712e47714863a8ed7ff73324d9fec569633e8b901c436c633b0220d16a7a9302",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/colname.test||test/colname.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eaf15d9bae6773058341d6219241f44ce728ad1cb9cf649f2efd4dddd81ec461",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1645:   assert( pExpr!=0 );",
          "1646:   assert( pNC->pSrcList!=0 );",
          "1649:   switch( pExpr->op ){",
          "1650:     case TK_COLUMN: {",
          "",
          "[Removed Lines]",
          "1647:   assert( pExpr->op!=TK_AGG_COLUMN );  /* This routine runes before aggregates",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1967:         pColExpr = pColExpr->pRight;",
          "1968:         assert( pColExpr!=0 );",
          "1969:       }",
          "1971:       if( pColExpr->op==TK_COLUMN ){",
          "1973:         int iCol = pColExpr->iColumn;",
          "",
          "[Removed Lines]",
          "1970:       assert( pColExpr->op!=TK_AGG_COLUMN );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/colname.test||test/colname.test": [
          "File: test/colname.test -> test/colname.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:     SELECT name FROM pragma_table_info('t2');",
          "400:   } {Bbb}",
          "401: }",
          "403: # Issue detected by OSSFuzz on 2017-12-24 (Christmas Eve)",
          "404: # caused by check-in https://sqlite.org/src/info/6b2ff26c25",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: do_execsql_test colname-9.330 { -- added 2019-08-10 to invalidate",
          "403:   DROP TABLE IF EXISTS t1;      -- a couple assert()s that were",
          "404:   CREATE TABLE t1(a);           -- added by ticket 3b44500725",
          "405:   INSERT INTO t1 VALUES(17),(2),(99),(-3),(7);",
          "406:   SELECT (SELECT avg(a) UNION SELECT min(a) OVER()) FROM t1;",
          "407: } {17}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51e441da2b1901806e38537f118592a1a022ce6d",
      "candidate_info": {
        "commit_hash": "51e441da2b1901806e38537f118592a1a022ce6d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51e441da2b1901806e38537f118592a1a022ce6d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/pragma.h",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Combine the implementations of the key and hexkey pragmas into a single case.  Have both pragmas return \"ok\" if they are implemented.\n\nFossilOrigin-Name: b3692c406f7ba62587c9d3256f888748393519680e9e2db53f59557f1a300e05",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a3e77c7776ab01dadb9d30d6067ac97e9d4b09ec54834558a5fa1ffed7b52c72",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2131:   case PragTyp_KEY: {",
          "2132:     if( zRight ){",
          "2136:       }else{",
          "2150:       }",
          "2151:       if( (pPragma->iArg & 1)==0 ){",
          "2153:       }else{",
          "2155:       }",
          "2156:     }",
          "2157:     break;",
          "",
          "[Removed Lines]",
          "2133:       int n = pPragma->iArg<4 ? sqlite3Strlen30(zRight) : -1;",
          "2134:       if( (pPragma->iArg & 1)==0 ){",
          "2135:         sqlite3_key_v2(db, zDb, zRight, n);",
          "2137:         sqlite3_rekey_v2(db, zDb, zRight, n);",
          "2138:       }",
          "2139:     }",
          "2140:     break;",
          "2141:   }",
          "2142:   case PragTyp_HEXKEY: {",
          "2143:     if( zRight ){",
          "2144:       u8 iByte;",
          "2145:       int i;",
          "2146:       char zKey[40];",
          "2147:       for(i=0, iByte=0; i<sizeof(zKey)*2 && sqlite3Isxdigit(zRight[i]); i++){",
          "2148:         iByte = (iByte<<4) + sqlite3HexToInt(zRight[i]);",
          "2149:         if( (i&1)!=0 ) zKey[i/2] = iByte;",
          "2152:         sqlite3_key_v2(db, zDb, zKey, i/2);",
          "2154:         sqlite3_rekey_v2(db, zDb, zKey, i/2);",
          "",
          "[Added Lines]",
          "2133:       char zBuf[40];",
          "2134:       const char *zKey = zRight;",
          "2135:       int n;",
          "2136:       if( pPragma->iArg==2 || pPragma->iArg==3 ){",
          "2137:         u8 iByte;",
          "2138:         int i;",
          "2139:         for(i=0, iByte=0; i<sizeof(zBuf)*2 && sqlite3Isxdigit(zRight[i]); i++){",
          "2140:           iByte = (iByte<<4) + sqlite3HexToInt(zRight[i]);",
          "2141:           if( (i&1)!=0 ) zBuf[i/2] = iByte;",
          "2142:         }",
          "2143:         zKey = zBuf;",
          "2144:         n = i/2;",
          "2146:         n = pPragma->iArg<4 ? sqlite3Strlen30(zRight) : -1;",
          "2149:         rc = sqlite3_key_v2(db, zDb, zKey, n);",
          "2151:         rc = sqlite3_rekey_v2(db, zDb, zKey, n);",
          "2152:       }",
          "2153:       if( rc==SQLITE_OK && n!=0 ){",
          "2154:         sqlite3VdbeSetNumCols(v, 1);",
          "2155:         sqlite3VdbeSetColName(v, 0, COLNAME_NAME, \"ok\", SQLITE_STATIC);",
          "2156:         returnSingleText(v, \"ok\");",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define PragTyp_WAL_AUTOCHECKPOINT            38",
          "47: #define PragTyp_WAL_CHECKPOINT                39",
          "48: #define PragTyp_ACTIVATE_EXTENSIONS           40",
          "",
          "[Removed Lines]",
          "49: #define PragTyp_HEXKEY                        41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "52: #define PragTyp_STATS                         44",
          "",
          "[Added Lines]",
          "49: #define PragTyp_KEY                           41",
          "50: #define PragTyp_LOCK_STATUS                   42",
          "51: #define PragTyp_STATS                         43",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:   IF:   defined(SQLITE_HAS_CODEC)",
          "383:   NAME: hexkey",
          "385:   ARG:  2",
          "386:   IF:   defined(SQLITE_HAS_CODEC)",
          "388:   NAME: hexrekey",
          "390:   ARG:  3",
          "391:   IF:   defined(SQLITE_HAS_CODEC)",
          "",
          "[Removed Lines]",
          "384:   TYPE: HEXKEY",
          "389:   TYPE: HEXKEY",
          "",
          "[Added Lines]",
          "384:   TYPE: KEY",
          "389:   TYPE: KEY",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53d30dd371832c13a62312b339cb0a86b1012b20",
      "candidate_info": {
        "commit_hash": "53d30dd371832c13a62312b339cb0a86b1012b20",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/53d30dd371832c13a62312b339cb0a86b1012b20",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/vdbemem.c"
        ],
        "message": "Early detection of implausibly sized records to avoid unnecessary large memory allocations.\n\nFossilOrigin-Name: 2c8769c69f301307db6663adb8b7c0b89f5959516bf6110cb8ff4b21bd903f70",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ada91aefe37efe3c009691b5599e4d6acf182e5ec3cf28dda0871d09858498b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4519:   return pCur->info.nPayload;",
          "4520: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4535: sqlite3_int64 sqlite3BtreeMaxRecordSize(BtCursor *pCur){",
          "4536:   assert( cursorHoldsMutex(pCur) );",
          "4537:   assert( pCur->eState==CURSOR_VALID );",
          "4538:   return pCur->pBt->pageSize * (sqlite3_int64)pCur->pBt->nPage;",
          "4539: }",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "315: int sqlite3BtreePayload(BtCursor*, u32 offset, u32 amt, void*);",
          "316: const void *sqlite3BtreePayloadFetch(BtCursor*, u32 *pAmt);",
          "317: u32 sqlite3BtreePayloadSize(BtCursor*);",
          "319: char *sqlite3BtreeIntegrityCheck(Btree*, int *aRoot, int nRoot, int, int*);",
          "320: struct Pager *sqlite3BtreePager(Btree*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318: sqlite3_int64 sqlite3BtreeMaxRecordSize(BtCursor*);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1124: ){",
          "1125:   int rc;",
          "1126:   pMem->flags = MEM_Null;",
          "1127:   if( SQLITE_OK==(rc = sqlite3VdbeMemClearAndResize(pMem, amt+1)) ){",
          "1128:     rc = sqlite3BtreePayload(pCur, offset, amt, pMem->z);",
          "1129:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1127:   if( sqlite3BtreeMaxRecordSize(pCur)<offset+amt ){",
          "1128:     return SQLITE_CORRUPT_BKPT;",
          "1129:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e53be9f2363b7d65168f8200c7db251efaf62f14",
      "candidate_info": {
        "commit_hash": "e53be9f2363b7d65168f8200c7db251efaf62f14",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e53be9f2363b7d65168f8200c7db251efaf62f14",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Remove a comment made obsolete by check-in [71643deb6bbad4b4].  No changes to code.\n\nFossilOrigin-Name: 211c8002d5ea4b224125d4ed395fe15767d1dc32a77b40b89fdfc80bdd1c5a48",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 57050162294efec90caa5cc3c2f8c1a85215526adcf57b284ce2d2e799286b78",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y"
        ]
      }
    },
    {
      "candidate_hash": "31269a9f5ff767cb1b9e910b41124fa11aca32f2",
      "candidate_info": {
        "commit_hash": "31269a9f5ff767cb1b9e910b41124fa11aca32f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31269a9f5ff767cb1b9e910b41124fa11aca32f2",
        "files": [
          "ext/misc/uuid.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add an experimental set of UUID processing functions as the uuid.c extension in ext/misc/uuid.c.\n\nFossilOrigin-Name: 1a6e009372cf9571e540812c8607e95a86740112a1091f03e3f632339eccb629",
        "before_after_code_files": [
          "ext/misc/uuid.c||ext/misc/uuid.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/uuid.c||ext/misc/uuid.c": [
          "File: ext/misc/uuid.c -> ext/misc/uuid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include \"sqlite3ext.h\"",
          "62: SQLITE_EXTENSION_INIT1",
          "63: #include <assert.h>",
          "64: #include <string.h>",
          "65: #include <ctype.h>",
          "67: #if !defined(SQLITE_ASCII) && !defined(SQLITE_EBCDIC)",
          "68: # define SQLITE_ASCII 1",
          "69: #endif",
          "76: static unsigned char sqlite3UuidHexToInt(int h){",
          "77:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "78: #ifdef SQLITE_ASCII",
          "79:   h += 9*(1&(h>>6));",
          "80: #endif",
          "81: #ifdef SQLITE_EBCDIC",
          "82:   h += 9*(1&~(h>>4));",
          "83: #endif",
          "84:   return (unsigned char)(h & 0xf);",
          "85: }",
          "92: static void sqlite3UuidBlobToStr(",
          "95: ){",
          "96:   static const char zDigits[] = \"0123456789abcdef\";",
          "97:   int i, k;",
          "98:   unsigned char x;",
          "99:   k = 0;",
          "100:   for(i=0, k=0x550; i<16; i++, k=k>>1){",
          "101:     if( k&1 ){",
          "102:       zStr[0] = '-';",
          "103:       zStr++;",
          "104:     }",
          "105:     x = aBlob[i];",
          "106:     zStr[0] = zDigits[x>>4];",
          "107:     zStr[1] = zDigits[x&0xf];",
          "108:     zStr += 2;",
          "109:   }",
          "111: }",
          "118: static int sqlite3UuidStrToBlob(",
          "121: ){",
          "122:   int i;",
          "123:   if( zStr[0]=='{' ) zStr++;",
          "124:   for(i=0; i<16; i++){",
          "125:     if( zStr[0]=='-' ) zStr++;",
          "126:     if( isxdigit(zStr[0]) && isxdigit(zStr[1]) ){",
          "127:       aBlob[i] = (sqlite3UuidHexToInt(zStr[0])<<4)",
          "128:                       + sqlite3UuidHexToInt(zStr[1]);",
          "129:       zStr += 2;",
          "130:     }else{",
          "131:       return 1;",
          "132:     }",
          "133:   }",
          "134:   if( zStr[0]=='}' ) zStr++;",
          "135:   return zStr[0]!=0;",
          "136: }",
          "142: static const unsigned char *sqlite3UuidInputToBlob(",
          "145: ){",
          "146:   switch( sqlite3_value_type(pIn) ){",
          "147:     case SQLITE_TEXT: {",
          "148:       const unsigned char *z = sqlite3_value_text(pIn);",
          "149:       if( sqlite3UuidStrToBlob(z, pBuf) ) return 0;",
          "150:       return pBuf;",
          "151:     }",
          "152:     case SQLITE_BLOB: {",
          "153:       int n = sqlite3_value_bytes(pIn);",
          "154:       return n==16 ? sqlite3_value_blob(pIn) : 0;",
          "155:     }",
          "156:     default: {",
          "157:       return 0;",
          "158:     }",
          "159:   }",
          "160: }",
          "163: static void sqlite3UuidFunc(",
          "164:   sqlite3_context *context,",
          "165:   int argc,",
          "166:   sqlite3_value **argv",
          "167: ){",
          "168:   unsigned char aBlob[16];",
          "169:   unsigned char zStr[37];",
          "170:   (void)argc;",
          "171:   (void)argv;",
          "172:   sqlite3_randomness(16, aBlob);",
          "173:   aBlob[6] = (aBlob[6]&0x0f) + 0x40;",
          "174:   aBlob[8] = (aBlob[8]&0x3f) + 0x80;",
          "175:   sqlite3UuidBlobToStr(aBlob, zStr);",
          "176:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "177: }",
          "180: static void sqlite3UuidStrFunc(",
          "181:   sqlite3_context *context,",
          "182:   int argc,",
          "183:   sqlite3_value **argv",
          "184: ){",
          "185:   unsigned char aBlob[16];",
          "186:   unsigned char zStr[37];",
          "187:   const unsigned char *pBlob;",
          "188:   (void)argc;",
          "189:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "190:   if( pBlob==0 ) return;",
          "191:   sqlite3UuidBlobToStr(pBlob, zStr);",
          "192:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "193: }",
          "196: static void sqlite3UuidBlobFunc(",
          "197:   sqlite3_context *context,",
          "198:   int argc,",
          "199:   sqlite3_value **argv",
          "200: ){",
          "201:   unsigned char aBlob[16];",
          "202:   const unsigned char *pBlob;",
          "203:   (void)argc;",
          "204:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "205:   if( pBlob==0 ) return;",
          "206:   sqlite3_result_blob(context, pBlob, 16, SQLITE_TRANSIENT);",
          "207: }",
          "209: #ifdef _WIN32",
          "210: __declspec(dllexport)",
          "211: #endif",
          "212: int sqlite3_uuid_init(",
          "213:   sqlite3 *db,",
          "214:   char **pzErrMsg,",
          "215:   const sqlite3_api_routines *pApi",
          "216: ){",
          "217:   int rc = SQLITE_OK;",
          "218:   SQLITE_EXTENSION_INIT2(pApi);",
          "220:   rc = sqlite3_create_function(db, \"uuid\", 0, SQLITE_UTF8, 0,",
          "221:                                sqlite3UuidFunc, 0, 0);",
          "222:   if( rc==SQLITE_OK ){",
          "223:     rc = sqlite3_create_function(db, \"uuid_str\", 1, SQLITE_UTF8, 0,",
          "224:                                  sqlite3UuidStrFunc, 0, 0);",
          "225:   }",
          "226:   if( rc==SQLITE_OK ){",
          "227:     rc = sqlite3_create_function(db, \"uuid_blob\", 1, SQLITE_UTF8, 0,",
          "228:                                  sqlite3UuidBlobFunc, 0, 0);",
          "229:   }",
          "230:   return rc;",
          "231: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 978b2d20cf95d0b7143e3104ce1e9d5c85002867b554dc6b21deb528b730bbc7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}