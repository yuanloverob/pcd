{
  "cve_id": "CVE-2022-1061",
  "cve_desc": "Heap Buffer Overflow in parseDragons in GitHub repository radareorg/radare2 prior to 5.6.8.",
  "repo": "radareorg/radare2",
  "patch_hash": "d4ce40b516ffd70cf2e9e36832d8de139117d522",
  "patch_info": {
    "commit_hash": "d4ce40b516ffd70cf2e9e36832d8de139117d522",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/d4ce40b516ffd70cf2e9e36832d8de139117d522",
    "files": [
      "libr/bin/p/bin_symbols.c"
    ],
    "message": "Fix oobread in symbols header parsing ##bin",
    "before_after_code_files": [
      "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c"
    ]
  },
  "patch_diff": {
    "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c": [
      "File: libr/bin/p/bin_symbols.c -> libr/bin/p/bin_symbols.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "182: static RCoreSymCacheElement *parseDragons(RBinFile *bf, RBuffer *buf, int off, int bits, R_OWN char *file_name) {",
      "183:  D eprintf (\"Dragons at 0x%x\\n\", off);",
      "185:  if (off >= size) {",
      "186:   return NULL;",
      "187:  }",
      "",
      "[Removed Lines]",
      "184:  ut64 size = r_buf_size (buf);",
      "",
      "[Added Lines]",
      "184:  st64 size = r_buf_size (buf);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "189:  if (!size) {",
      "190:   return NULL;",
      "191:  }",
      "192:  ut8 *b = malloc (size);",
      "193:  if (!b) {",
      "194:   return NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:  if (size < 32) {",
      "193:   return NULL;",
      "194:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "48314a1e535b6feca37ec707000f6e3b7ee5e2f8",
      "candidate_info": {
        "commit_hash": "48314a1e535b6feca37ec707000f6e3b7ee5e2f8",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/48314a1e535b6feca37ec707000f6e3b7ee5e2f8",
        "files": [
          "libr/bin/p/bin_symbols.c",
          "libr/util/strbuf.c"
        ],
        "message": "Fix memleak and oom in bin.symbols",
        "before_after_code_files": [
          "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c",
          "libr/util/strbuf.c||libr/util/strbuf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c"
          ],
          "candidate": [
            "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c": [
          "File: libr/bin/p/bin_symbols.c -> libr/bin/p/bin_symbols.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:  return sym;",
          "180: }",
          "184:  st64 size = r_buf_size (buf);",
          "186:   return NULL;",
          "187:  }",
          "188:  size -= off;",
          "193:   return NULL;",
          "194:  }",
          "195:  ut8 *b = malloc (size);",
          "",
          "[Removed Lines]",
          "182: static RCoreSymCacheElement *parseDragons(RBinFile *bf, RBuffer *buf, int off, int bits, R_OWN char *file_name) {",
          "183:  D eprintf (\"Dragons at 0x%x\\n\", off);",
          "185:  if (off >= size) {",
          "189:  if (!size) {",
          "190:   return NULL;",
          "191:  }",
          "192:  if (size < 32) {",
          "",
          "[Added Lines]",
          "182: static RCoreSymCacheElement *parse_dragons(RBinFile *bf, RBuffer *buf, int off, int bits, R_OWN char *file_name) {",
          "184:  if (size < 0 || off >= size) {",
          "188:  if (size < 32 || size > 0xfffff) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:  int available = r_buf_read_at (buf, off, b, size);",
          "200:  if (available != size) {",
          "201:   R_LOG_WARN (\"r_buf_read_at failed\");",
          "202:   return NULL;",
          "203:  }",
          "204: #if 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:   free (b);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:    return false;",
          "290:   }",
          "291:  }",
          "293:  if (element) {",
          "295:   return true;",
          "",
          "[Removed Lines]",
          "292:  RCoreSymCacheElement *element = parseDragons (bf, buf, sm.addr + sm.size, sm.bits, file_name);",
          "",
          "[Added Lines]",
          "289:  RCoreSymCacheElement *element = parse_dragons (bf, buf, sm.addr + sm.size, sm.bits, file_name);",
          "",
          "---------------"
        ],
        "libr/util/strbuf.c||libr/util/strbuf.c": [
          "File: libr/util/strbuf.c -> libr/util/strbuf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <r_util.h>",
          "5: R_API RStrBuf *r_strbuf_new(const char *str) {",
          "6:  RStrBuf *s = R_NEW0 (RStrBuf);",
          "8:   r_strbuf_set (s, str);",
          "9:  }",
          "10:  return s;",
          "",
          "[Removed Lines]",
          "7:  if (str) {",
          "",
          "[Added Lines]",
          "7:  if (s && str) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: R_API bool r_strbuf_setbin(RStrBuf *sb, const ut8 *s, size_t l) {",
          "95:  r_return_val_if_fail (sb && s, false);",
          "96:  if (l >= sizeof (sb->buf)) {",
          "97:   char *ptr = sb->ptr;",
          "98:   if (!ptr || l + 1 > sb->ptrlen) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:  if (l > ST32_MAX) {",
          "97:   return false;",
          "98:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}