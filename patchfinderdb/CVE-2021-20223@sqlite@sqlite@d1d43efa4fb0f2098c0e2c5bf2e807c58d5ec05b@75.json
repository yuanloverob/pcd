{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0cbcd0edf4af5afa382ccdf18845ea9fe13e4a9",
      "candidate_info": {
        "commit_hash": "b0cbcd0edf4af5afa382ccdf18845ea9fe13e4a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b0cbcd0edf4af5afa382ccdf18845ea9fe13e4a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzzdata8.db"
        ],
        "message": "When a corrupt schema is loaded using writable_schema=ON, the CHECK constraints (or other expressions in the table definition) might not be fully resolved. Ensure that the code generator can deal with this if the table is subsequently used in a DML statement.  dbsqlfuzz find.\n\nFossilOrigin-Name: ea721b34477ab8b49d182352c4bc198245933b850e9b6248b4f97600e80bb44b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 056bb8dcbdc45989c5c6e86d2966200062e3c01c382ec52aae37c828104b4496",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3649:           Table *pTab = pExpr->y.pTab;",
          "3650:           int iSrc;",
          "3651:           int iCol = pExpr->iColumn;",
          "3652:           assert( pTab!=0 );",
          "3653:           assert( iCol>=XN_ROWID );",
          "3655:           if( iCol<0 ){",
          "3656:             return -1-pParse->iSelfTab;",
          "3657:           }",
          "",
          "[Removed Lines]",
          "3654:           assert( iCol<pExpr->y.pTab->nCol );",
          "",
          "[Added Lines]",
          "3652:           if( pTab==0 ){",
          "3653:             assert( CORRUPT_DB );",
          "3654:             sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3655:             return target;",
          "3656:           }",
          "3659:           assert( iCol<pTab->nCol );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3717:     default: {",
          "3723:       sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3724:       return target;",
          "3725:     }",
          "",
          "[Removed Lines]",
          "3722:       assert( op==TK_NULL );",
          "",
          "[Added Lines]",
          "3727:       assert( op==TK_NULL || CORRUPT_DB );",
          "3728:       testcase( op!=TK_NULL );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78f04753ae133a41a705c889bc13479332c17856",
      "candidate_info": {
        "commit_hash": "78f04753ae133a41a705c889bc13479332c17856",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/78f04753ae133a41a705c889bc13479332c17856",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/threadtest3.c",
          "test/tt3_shared.c"
        ],
        "message": "Fix a tsan error that could occur when using shared-cache mode.\n\nFossilOrigin-Name: de80bc87300257cc49d98e2d22e914211f213dce912f320c8b37b3883c73923c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/threadtest3.c||test/threadtest3.c",
          "test/tt3_shared.c||test/tt3_shared.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5dd05940617fb05ee2faf212b15afc3a8e9695318eccb76761b37359fea681d1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2618:     if( sqlite3BtreeSchema(p, 0, 0)==0 ){",
          "2620:     }",
          "2622:     pFile = sqlite3PagerFile(pBt->pPager);",
          "",
          "[Removed Lines]",
          "2619:       sqlite3PagerSetCachesize(p->pBt->pPager, SQLITE_DEFAULT_CACHE_SIZE);",
          "",
          "[Added Lines]",
          "2619:       sqlite3BtreeSetCacheSize(p, SQLITE_DEFAULT_CACHE_SIZE);",
          "",
          "---------------"
        ],
        "test/threadtest3.c||test/threadtest3.c": [
          "File: test/threadtest3.c -> test/threadtest3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1433: #include \"tt3_lookaside1.c\"",
          "1434: #include \"tt3_vacuum.c\"",
          "1435: #include \"tt3_stress.c\"",
          "1437: int main(int argc, char **argv){",
          "1438:   struct ThreadTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1436: #include \"tt3_shared.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1457:     { vacuum1,             \"vacuum1\", 10000 },",
          "1458:     { stress1,             \"stress1\", 10000 },",
          "1459:     { stress2,             \"stress2\", 60000 },",
          "1460:   };",
          "1461:   static char *substArgv[] = { 0, \"*\", 0 };",
          "1462:   int i, iArg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1461:     { shared1,             \"shared1\", 10000 },",
          "",
          "---------------"
        ],
        "test/tt3_shared.c||test/tt3_shared.c": [
          "File: test/tt3_shared.c -> test/tt3_shared.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: static char *shared_thread1(int iTid, void *pArg){",
          "22:   while( !timetostop(&err) ){",
          "24:     opendb(&err, &db, \"test.db\", 0);",
          "25:     sql_script(&err, &db, \"SELECT * FROM t1\");",
          "26:     closedb(&err, &db);",
          "27:   }",
          "28:   print_and_free_err(&err);",
          "29:   return sqlite3_mprintf(\"done!\");",
          "30: }",
          "33: static void shared1(int nMs){",
          "34:   Error err = {0};",
          "36:   Threadset threads = {0};",
          "37:   int ii;",
          "39:   opendb(&err, &db, \"test.db\", 1);",
          "40:   sql_script(&err, &db, \"CREATE TABLE t1(x)\");",
          "41:   closedb(&err, &db);",
          "43:   setstoptime(&err, nMs);",
          "44:   sqlite3_enable_shared_cache(1);",
          "46:   for(ii=0; ii<5; ii++){",
          "47:     launch_thread(&err, &threads, shared_thread1, 0);",
          "48:   }",
          "50:   join_all_threads(&err, &threads);",
          "51:   sqlite3_enable_shared_cache(0);",
          "53:   print_and_free_err(&err);",
          "54: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f82acc036c5f286fda6ef815bfc3469acd402e2",
      "candidate_info": {
        "commit_hash": "2f82acc036c5f286fda6ef815bfc3469acd402e2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2f82acc036c5f286fda6ef815bfc3469acd402e2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Fix minor OOM problems.\n\nFossilOrigin-Name: 8b23d80271aab38abe42ee8b3ca4b746572ecef26c2a37b094b01560e6be9d45",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3c840b4df306e2db1da08673e9ede973b4cb6d2b3f9eeeab5835e39452ee3056",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   op = pExpr->op;",
          "53:   if( op==TK_SELECT ){",
          "54:     assert( pExpr->flags&EP_xIsSelect );",
          "56:   }",
          "57:   if( op==TK_REGISTER ) op = pExpr->op2;",
          "58: #ifndef SQLITE_OMIT_CAST",
          "",
          "[Removed Lines]",
          "55:     return sqlite3ExprAffinity(pExpr->x.pSelect->pEList->a[0].pExpr);",
          "",
          "[Added Lines]",
          "55:     if( ALWAYS(pExpr->x.pSelect)",
          "56:      && pExpr->x.pSelect->pEList",
          "57:      && ALWAYS(pExpr->x.pSelect->pEList->a[0].pExpr)",
          "58:     ){",
          "59:       return sqlite3ExprAffinity(pExpr->x.pSelect->pEList->a[0].pExpr);",
          "60:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5725: static int agginfoPersistExprCb(Walker *pWalker, Expr *pExpr){",
          "5727:    && pExpr->pAggInfo!=0",
          "5728:   ){",
          "5729:     AggInfo *pAggInfo = pExpr->pAggInfo;",
          "5730:     int iAgg = pExpr->iAgg;",
          "5731:     Parse *pParse = pWalker->pParse;",
          "5732:     sqlite3 *db = pParse->db;",
          "5736:       assert( iAgg>=0 && iAgg<pAggInfo->nColumn );",
          "5737:       if( pAggInfo->aCol[iAgg].pExpr==pExpr ){",
          "5738:         pExpr = sqlite3ExprDup(db, pExpr, 0);",
          "",
          "[Removed Lines]",
          "5726:   if( !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced)",
          "5733:     assert( pExpr->op==TK_COLUMN || pExpr->op==TK_AGG_COLUMN",
          "5734:             || pExpr->op==TK_FUNCTION || pExpr->op==TK_AGG_FUNCTION );",
          "5735:     if( pExpr->op==TK_COLUMN || pExpr->op==TK_AGG_COLUMN ){",
          "",
          "[Added Lines]",
          "5731:   if( ALWAYS(!ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced))",
          "5738:     assert( pExpr->op==TK_AGG_COLUMN || pExpr->op==TK_AGG_FUNCTION );",
          "5739:     if( pExpr->op==TK_AGG_COLUMN ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a796de83007e06a935b212c16b264640e2b9ea24",
      "candidate_info": {
        "commit_hash": "a796de83007e06a935b212c16b264640e2b9ea24",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a796de83007e06a935b212c16b264640e2b9ea24",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/cursorhint.test",
          "test/fordelete.test"
        ],
        "message": "Test script changes to account for the fact that the \"p5\" column in the EXPLAIN output is now an integer, not a text values containing a 2-digit hex value.\n\nFossilOrigin-Name: 102126d80872fdb7469233611cab28100c8455aab4ce25702b83398394559185",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/cursorhint.test||test/cursorhint.test",
          "test/fordelete.test||test/fordelete.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0119d96decd344ae711388ac8475b92464a6d018ecf73862170f137410036dac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/cursorhint.test||test/cursorhint.test": [
          "File: test/cursorhint.test -> test/cursorhint.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   p5_of_opcode db OpenRead {",
          "70:      SELECT * FROM t1 CROSS JOIN t2 WHERE a=x",
          "71:   }",
          "74: # Do the same test the other way around.",
          "75: #",
          "",
          "[Removed Lines]",
          "72: } {00 00}",
          "",
          "[Added Lines]",
          "72: } {0 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   p5_of_opcode db OpenRead {",
          "83:      SELECT * FROM t2 CROSS JOIN t1 WHERE a=x",
          "84:   }",
          "87: # Various expressions captured by CursorHint",
          "88: #",
          "",
          "[Removed Lines]",
          "85: } {00 00}",
          "",
          "[Added Lines]",
          "85: } {0 0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:   p5_of_opcode db OpenRead {",
          "118:     SELECT * FROM t1 WHERE b>11;",
          "119:   }",
          "121: do_test 4.3asc {",
          "122:   p4_of_opcode db CursorHint {",
          "123:     SELECT c FROM t1 WHERE b<11 ORDER BY b ASC;",
          "",
          "[Removed Lines]",
          "120: } {02 00}",
          "",
          "[Added Lines]",
          "120: } {2 0}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:   p5_of_opcode db OpenRead {",
          "133:     SELECT c FROM t1 WHERE b<11;",
          "134:   }",
          "137: do_test 4.5asc {",
          "138:   p4_of_opcode db CursorHint {",
          "",
          "[Removed Lines]",
          "135: } {00}",
          "",
          "[Added Lines]",
          "135: } {0}",
          "",
          "---------------"
        ],
        "test/fordelete.test||test/fordelete.test": [
          "File: test/fordelete.test -> test/fordelete.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:       set obj $T($root)",
          "50:       set O($obj) \"\"",
          "52:         set O($obj) *",
          "53:       } else {",
          "54:         set O($obj) \"\"",
          "",
          "[Removed Lines]",
          "51:       if {\"0x$R(p5)\" & 0x08} {",
          "",
          "[Added Lines]",
          "51:       if {$R(p5) & 0x08} {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e592c18c1c19d69025e1c9cdcaea893e89bcfe81",
      "candidate_info": {
        "commit_hash": "e592c18c1c19d69025e1c9cdcaea893e89bcfe81",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e592c18c1c19d69025e1c9cdcaea893e89bcfe81",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Provide an alternative \"guaranteed-safe\" method for overwriting the WAL index on recovery, in case some platform is found for which memcpy() cannot do this safely.\n\nFossilOrigin-Name: 168cccbabbd4807bdb04953f395cd1a245c46e9d4816a09c9d024ecd5432759d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 96e3dba2ed3ab0c5b2ecf65a3408633e0767c884d48c270e9ef10ab9fa3ec051",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1282:       pWal->apWiData[iPg] = aShare;",
          "1283:       nHdr = (iPg==0 ? WALINDEX_HDR_SIZE : 0);",
          "1284:       nHdr32 = nHdr / sizeof(u32);",
          "1285:       memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr);",
          "1286:       if( iFrame<=iLast ) break;",
          "1287:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1285: #ifndef SQLITE_SAFER_WALINDEX_RECOVERY",
          "1295: #else",
          "1301:       {",
          "1302:         int i;",
          "1303:         for(i=nHdr32; i<WALINDEX_PGSZ/sizeof(u32); i++){",
          "1304:           if( aShare[i]!=aPrivate[i] ){",
          "1308:             aShare[i] = aPrivate[i];",
          "1309:           }",
          "1310:         }",
          "1311:       }",
          "1312: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}