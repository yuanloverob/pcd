{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d91004a73d7ae11829f06aea7f630129e8d2683c",
      "candidate_info": {
        "commit_hash": "d91004a73d7ae11829f06aea7f630129e8d2683c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d91004a73d7ae11829f06aea7f630129e8d2683c",
        "files": [
          "lib/path.js"
        ],
        "message": "Windows: make path.normalize convert all slashes to backslashes\n\nCloses #3066",
        "before_after_code_files": [
          "lib/path.js||lipath.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/path.js||lipath.js": [
          "File: lib/path.js -> lipath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:       tail += '\\\\';",
          "178:     }",
          "180:     return device + (isAbsolute ? '\\\\' : '') + tail;",
          "181:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "320ae691d8e6305f69263ee526ef1c164dd40208",
      "candidate_info": {
        "commit_hash": "320ae691d8e6305f69263ee526ef1c164dd40208",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/320ae691d8e6305f69263ee526ef1c164dd40208",
        "files": [
          "lib/timers.js",
          "test/simple/test-domain-timers.js"
        ],
        "message": "timers: make unref'd timeouts execute in a domain",
        "before_after_code_files": [
          "lib/timers.js||litimers.js",
          "test/simple/test-domain-timers.js||test/simple/test-domain-timers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/timers.js||litimers.js": [
          "File: lib/timers.js -> litimers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     this._handle = new Timer();",
          "258:     this._handle.ontimeout = this._onTimeout;",
          "259:     this._handle.start(this._when - Date.now(), 0);",
          "260:     this._handle.unref();",
          "261:   } else {",
          "262:     this._handle.unref();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-domain-timers.js||test/simple/test-domain-timers.js": [
          "File: test/simple/test-domain-timers.js -> test/simple/test-domain-timers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var domain = require('domain');",
          "23: var assert = require('assert');",
          "24: var common = require('../common.js');",
          "26: var timeout_err, timeout, immediate_err;",
          "28: var timeoutd = domain.create();",
          "30: timeoutd.on('error', function(e) {",
          "31:   timeout_err = e;",
          "32:   clearTimeout(timeout);",
          "33: });",
          "35: timeoutd.run(function() {",
          "36:   setTimeout(function() {",
          "37:     throw new Error('Timeout UNREFd');",
          "38:   }).unref();",
          "39: });",
          "41: var immediated = domain.create();",
          "43: immediated.on('error', function(e) {",
          "44:   immediate_err = e;",
          "45: });",
          "47: immediated.run(function() {",
          "48:   setImmedaite(function() {",
          "49:     throw new Error('Immediate Error');",
          "50:   });",
          "51: });",
          "53: timeout = setTimeout(function() {}, 10 * 1000);",
          "55: process.on('exit', function() {",
          "56:   assert.equal(timeout_err.message, 'Timeout UNREFd',",
          "57:       'Domain should catch timer error');",
          "58:   assert.equal(immediate_err.message, 'Immediate Error',",
          "59:       'Domain should catch immediate error');",
          "60: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccf7b41a69a8037f721a3eb495c2a82a53613634",
      "candidate_info": {
        "commit_hash": "ccf7b41a69a8037f721a3eb495c2a82a53613634",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ccf7b41a69a8037f721a3eb495c2a82a53613634",
        "files": [
          "lib/module.js"
        ],
        "message": "module: fix --debug-brk on symlinked scripts\n\n* fixes #1519",
        "before_after_code_files": [
          "lib/module.js||limodule.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/module.js||limodule.js": [
          "File: lib/module.js -> limodule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "358: };",
          "362: Module.prototype._compile = function(content, filename) {",
          "363:   var self = this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:   var wrapper = Module.wrap(content);",
          "427:   var compiledWrapper = runInThisContext(wrapper, filename, true);",
          "430:   }",
          "431:   var args = [self.exports, require, self, filename, dirname];",
          "432:   return compiledWrapper.apply(self.exports, args);",
          "",
          "[Removed Lines]",
          "428:   if (filename === process.argv[1] && global.v8debug) {",
          "429:     global.v8debug.Debug.setBreakPoint(compiledWrapper, 0, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c24276f0087a5f72f68be2384f32e20ba83dfa09",
      "candidate_info": {
        "commit_hash": "c24276f0087a5f72f68be2384f32e20ba83dfa09",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c24276f0087a5f72f68be2384f32e20ba83dfa09",
        "files": [
          "lib/net.js",
          "test/simple/test-net-server-listen-remove-callback.js"
        ],
        "message": "net: defer net.Server 'close' event to next tick",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-server-listen-remove-callback.js||test/simple/test-net-server-listen-remove-callback.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "862: };",
          "864: Server.prototype._emitCloseIfDrained = function() {",
          "868: };",
          "",
          "[Removed Lines]",
          "865:   if (!this._handle && !this.connections) {",
          "866:     this.emit('close');",
          "867:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-server-listen-remove-callback.js||test/simple/test-net-server-listen-remove-callback.js": [
          "File: test/simple/test-net-server-listen-remove-callback.js -> test/simple/test-net-server-listen-remove-callback.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: server.listen(common.PORT, function() {",
          "36:   server.close();",
          "37:   server.listen(common.PORT + 1, function() {",
          "38:     server.close();",
          "39:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: });",
          "39: server.once('close', function() {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c381662cac0e897b4bfdb2c31cd3117c5ecd2130",
      "candidate_info": {
        "commit_hash": "c381662cac0e897b4bfdb2c31cd3117c5ecd2130",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c381662cac0e897b4bfdb2c31cd3117c5ecd2130",
        "files": [
          "lib/fs.js"
        ],
        "message": "fs: make fs.symlink() with no callback async\n\nFix a bug where fs.symlink('foo', 'bar') executed symlink(2) synchronously.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "478: fs.symlink = function(destination, path, type_, callback) {",
          "479:   var type = (typeof(type_) == 'string' ? type_ : null);",
          "480:   var callback_ = arguments[arguments.length - 1];",
          "483:   if (isWindows && type === 'junction') {",
          "484:     destination = pathModule._makeLong(destination);",
          "",
          "[Removed Lines]",
          "481:   callback = (typeof(callback_) == 'function' ? callback_ : null);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}