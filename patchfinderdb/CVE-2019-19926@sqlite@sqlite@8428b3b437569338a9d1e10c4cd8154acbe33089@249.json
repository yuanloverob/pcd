{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "554a9dc78ab23f3831dd689fe33fb87f2d60626d",
      "candidate_info": {
        "commit_hash": "554a9dc78ab23f3831dd689fe33fb87f2d60626d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/554a9dc78ab23f3831dd689fe33fb87f2d60626d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "test/rowvalue7.test"
        ],
        "message": "Improved detection of number of column mismatch for vector assignment in UPDATE statements.  Ticket [78acc9d40f0786e8]\n\nFossilOrigin-Name: bd4bda73df3794eef424eb13e08fc7cc54347d1ac69febaeec41f6b6cb4a42bc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/rowvalue7.test||test/rowvalue7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0cc06d8a30444125e5655f6587a6355471c3447c08a2e5f7a046a4ed5cc5f09",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1633:   for(i=0; i<pColumns->nId; i++){",
          "1634:     Expr *pSubExpr = sqlite3ExprForVectorField(pParse, pExpr, i);",
          "1635:     pList = sqlite3ExprListAppend(pParse, pList, pSubExpr);",
          "1636:     if( pList ){",
          "1637:       assert( pList->nExpr==iFirst+i+1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1635:     assert( pSubExpr!=0 || db->mallocFailed );",
          "1636:     assert( pSubExpr==0 || pSubExpr->iTable==0 );",
          "1637:     if( pSubExpr==0 ) continue;",
          "1638:     pSubExpr->iTable = pColumns->nId;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3906:         pExpr->pLeft->iTable = sqlite3CodeSubselect(pParse, pExpr->pLeft);",
          "3907:       }",
          "3908:       assert( pExpr->iTable==0 || pExpr->pLeft->op==TK_SELECT );",
          "3911:       ){",
          "3912:         sqlite3ErrorMsg(pParse, \"%d columns assigned %d values\",",
          "3913:                                 pExpr->iTable, n);",
          "",
          "[Removed Lines]",
          "3909:       if( pExpr->iTable",
          "3910:        && pExpr->iTable!=(n = sqlite3ExprVectorSize(pExpr->pLeft))",
          "",
          "[Added Lines]",
          "3913:       if( pExpr->iTable!=0",
          "3914:        && pExpr->iTable!=(n = sqlite3ExprVectorSize(pExpr->pLeft))",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "test/rowvalue7.test||test/rowvalue7.test": [
          "File: test/rowvalue7.test -> test/rowvalue7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   UPDATE t1 SET (b,c,d) = (SELECT x,y FROM t2 WHERE w=a);",
          "56: } {1 {3 columns assigned 2 values}}",
          "58: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: # 2019-08-26",
          "59: # ticket https://www.sqlite.org/src/info/78acc9d40f0786e8",
          "60: #",
          "61: do_catchsql_test 3.0 {",
          "62:   DROP TABLE IF EXISTS t1;",
          "63:   CREATE TABLE t1(a,b);",
          "64:   INSERT INTO t1 VALUES(1,2);",
          "65:   UPDATE t1 SET (a,a,a,b)=(SELECT 99,100);",
          "66: } {1 {4 columns assigned 2 values}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cf3009f6c92f91ecdf6de8a969e6febc0df09bc",
      "candidate_info": {
        "commit_hash": "6cf3009f6c92f91ecdf6de8a969e6febc0df09bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6cf3009f6c92f91ecdf6de8a969e6febc0df09bc",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/skipscan1.test",
          "test/where.test"
        ],
        "message": "Add further tests so that veryquick.test covers all vdbe branches.\n\nFossilOrigin-Name: cbc67de5a3937fa65811ed7c13e870699c895660dc2132cf9d3cf5d83364e344",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/skipscan1.test||test/skipscan1.test",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 08b29672c552e5a6a3874746c6cc7025295e0e44dec43a1bfba3022acce849ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/skipscan1.test||test/skipscan1.test": [
          "File: test/skipscan1.test -> test/skipscan1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "345: } {/{SCAN TABLE t9a}/}",
          "346: optimization_control db skip-scan 1",
          "348: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348: do_execsql_test skipscan1-2.1 {",
          "349:   CREATE TABLE t6(a TEXT, b INT, c INT, d INT);",
          "350:   CREATE INDEX t6abc ON t6(a,b,c);",
          "351:   INSERT INTO t6 VALUES('abc',123,4,5);",
          "353:   ANALYZE;",
          "354:   DELETE FROM sqlite_stat1;",
          "355:   INSERT INTO sqlite_stat1 VALUES('t6','t6abc','10000 5000 2000 10');",
          "356:   ANALYZE sqlite_master;",
          "357:   DELETE FROM t6;",
          "358: } {}",
          "360: do_execsql_test skipscan1-2.2eqp {",
          "361:   EXPLAIN QUERY PLAN",
          "362:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a;",
          "363: } {/* USING INDEX t6abc (ANY(a) AND b=?)*/}",
          "364: do_execsql_test skipscan1-2.2 {",
          "365:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a;",
          "366: } {}",
          "368: do_execsql_test skipscan1-2.3eqp {",
          "369:   EXPLAIN QUERY PLAN",
          "370:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a DESC;",
          "371: } {/* USING INDEX t6abc (ANY(a) AND b=?)*/}",
          "372: do_execsql_test skipscan1-2.3 {",
          "373:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a DESC;",
          "374: } {}",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1438:   SELECT * FROM t1, t2 WHERE a=y AND y=3;",
          "1439: } {3 2 3}",
          "1441: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1441: #-------------------------------------------------------------------------",
          "1442: #",
          "1443: reset_db",
          "1444: do_execsql_test where-24.0 {",
          "1445:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "1446:   INSERT INTO t1 VALUES(1, 'one');",
          "1447:   INSERT INTO t1 VALUES(2, 'two');",
          "1448:   INSERT INTO t1 VALUES(3, 'three');",
          "1449:   INSERT INTO t1 VALUES(4, 'four');",
          "1450: }",
          "1452: foreach {tn sql res} {",
          "1453:   1 \"SELECT b FROM t1\"                   {one two three four}",
          "1454:   2 \"SELECT b FROM t1 WHERE a<4\"         {one two three}",
          "1455:   3 \"SELECT b FROM t1 WHERE a>1\"         {two three four}",
          "1456:   4 \"SELECT b FROM t1 WHERE a>1 AND a<4\" {two three}",
          "1458:   5 \"SELECT b FROM t1 WHERE a>? AND a<4\" {}",
          "1459:   6 \"SELECT b FROM t1 WHERE a>1 AND a<?\" {}",
          "1460:   7 \"SELECT b FROM t1 WHERE a>? AND a<?\" {}",
          "1462:   7 \"SELECT b FROM t1 WHERE a>=? AND a<=4\" {}",
          "1463:   8 \"SELECT b FROM t1 WHERE a>=1 AND a<=?\" {}",
          "1464:   9 \"SELECT b FROM t1 WHERE a>=? AND a<=?\" {}",
          "1465: } {",
          "1466:   set rev [list]",
          "1467:   foreach r $res { set rev [concat $r $rev] }",
          "1469:   do_execsql_test where-24.$tn.1 \"$sql\"                     $res",
          "1470:   do_execsql_test where-24.$tn.2 \"$sql ORDER BY rowid\"      $res",
          "1471:   do_execsql_test where-24.$tn.3 \"$sql ORDER BY rowid DESC\" $rev",
          "1473:   do_execsql_test where-24-$tn.4 \"",
          "1474:     BEGIN;",
          "1475:       DELETE FROM t1;",
          "1476:       $sql;",
          "1477:       $sql ORDER BY rowid;",
          "1478:       $sql ORDER BY rowid DESC;",
          "1479:     ROLLBACK;",
          "1480:   \"",
          "1481: }",
          "1483: #-------------------------------------------------------------------------",
          "1484: #",
          "1485: reset_db",
          "1486: do_execsql_test where-25.0 {",
          "1487:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "1488:   CREATE UNIQUE INDEX i1 ON t1(c);",
          "1489:   INSERT INTO t1 VALUES(1, 'one', 'i');",
          "1490:   INSERT INTO t1 VALUES(2, 'two', 'ii');",
          "1492:   CREATE TABLE t2(a INTEGER PRIMARY KEY, b, c);",
          "1493:   CREATE UNIQUE INDEX i2 ON t2(c);",
          "1494:   INSERT INTO t2 VALUES(1, 'one', 'i');",
          "1495:   INSERT INTO t2 VALUES(2, 'two', 'ii');",
          "1496:   INSERT INTO t2 VALUES(3, 'three', 'iii');",
          "1498:   PRAGMA writable_schema = 1;",
          "1499:   UPDATE sqlite_master SET rootpage = (",
          "1500:     SELECT rootpage FROM sqlite_master WHERE name = 'i2'",
          "1501:   ) WHERE name = 'i1';",
          "1502: }",
          "1503: db close",
          "1504: sqlite3 db test.db",
          "1505: do_catchsql_test where-25.1 {",
          "1506:   DELETE FROM t1 WHERE c='iii'",
          "1507: } {1 {database disk image is malformed}}",
          "1508: do_catchsql_test where-25.2 {",
          "1509:   INSERT INTO t1 VALUES(4, 'four', 'iii')",
          "1510:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1511: } {1 {database disk image is malformed}}",
          "1513: reset_db",
          "1514: do_execsql_test where-25.3 {",
          "1515:   CREATE TABLE t1(a PRIMARY KEY, b, c) WITHOUT ROWID;",
          "1516:   CREATE UNIQUE INDEX i1 ON t1(c);",
          "1517:   INSERT INTO t1 VALUES(1, 'one', 'i');",
          "1518:   INSERT INTO t1 VALUES(2, 'two', 'ii');",
          "1520:   CREATE TABLE t2(a INTEGER PRIMARY KEY, b, c);",
          "1521:   CREATE UNIQUE INDEX i2 ON t2(c);",
          "1522:   INSERT INTO t2 VALUES(1, 'one', 'i');",
          "1523:   INSERT INTO t2 VALUES(2, 'two', 'ii');",
          "1524:   INSERT INTO t2 VALUES(3, 'three', 'iii');",
          "1526:   PRAGMA writable_schema = 1;",
          "1527:   UPDATE sqlite_master SET rootpage = (",
          "1528:     SELECT rootpage FROM sqlite_master WHERE name = 'i2'",
          "1529:   ) WHERE name = 'i1';",
          "1530: }",
          "1531: db close",
          "1532: sqlite3 db test.db",
          "1533: do_catchsql_test where-25.4 {",
          "1534:   SELECT * FROM t1 WHERE c='iii'",
          "1535: } {0 {}}",
          "1536: do_catchsql_test where-25.5 {",
          "1537:   INSERT INTO t1 VALUES(4, 'four', 'iii')",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91ed9ce0dd141ded4edc1e60118ddcd79828cebc",
      "candidate_info": {
        "commit_hash": "91ed9ce0dd141ded4edc1e60118ddcd79828cebc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91ed9ce0dd141ded4edc1e60118ddcd79828cebc",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/extract-sqlite3h.tcl"
        ],
        "message": "Add a script to tool/ that will extract the sqlite3.h header file from an sqlite3.c amalgamation.\n\nFossilOrigin-Name: 38d2e510cdedf38153466b161c0842b1604aef7b5589c51f628ae7cbb6a8722a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/extract-sqlite3h.tcl||tool/extract-sqlite3h.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 25975e1fb2be0c011542c0a6b001385cec8113662df93dc618f725f2a4692bc2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/extract-sqlite3h.tcl||tool/extract-sqlite3h.tcl": [
          "File: tool/extract-sqlite3h.tcl -> tool/extract-sqlite3h.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/tclsh",
          "2: #",
          "3: # Given an sqlite3.c source file identified by the command-line",
          "4: # argument, extract the \"sqlite3.h\" header file that is embedded inside",
          "5: # the sqlite3.c source file and write it to standard output.",
          "6: #",
          "7: if {[llength $argv]!=1} {",
          "8:   puts stderr \"Usage: $argv0 sqlite3.c >sqlite3.h\"",
          "9:   exit 1",
          "10: }",
          "11: set in [open [lindex $argv 0] rb]",
          "12: while {![eof $in]} {",
          "13:   set line [gets $in]",
          "14:   if {[string match {* Begin file sqlite3.h *} $line]} break",
          "15: }",
          "16: while {![eof $in]} {",
          "17:   set line [gets $in]",
          "18:   if {[string match {* End of sqlite3.h *} $line]} break",
          "19:   puts $line",
          "20: }",
          "21: close $in",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "572b0dddeea32575f9e0ab882c9dd2c029675686",
      "candidate_info": {
        "commit_hash": "572b0dddeea32575f9e0ab882c9dd2c029675686",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/572b0dddeea32575f9e0ab882c9dd2c029675686",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "src/test_hexio.c",
          "test/fts4record.test"
        ],
        "message": "Add extra tests for the handling of corrupt records in fts3.\n\nFossilOrigin-Name: 40e29a47d1266c16a4992e43579a51addcc632503099c4cd128f77dd4e67da3c",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "src/test_hexio.c||src/test_hexio.c",
          "test/fts4record.test||test/fts4record.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2580:       fts3PoslistCopy(&p, &p2);",
          "2581:       fts3GetDeltaVarint3(&p2, pEnd2, bDescDoclist, &i2);",
          "2582:     }",
          "2583:   }",
          "2585:   if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2584:     assert( (p-aOut)<=((p1?(p1-a1):n1)+(p2?(p2-a2):n2)+FTS3_VARINT_MAX-1) );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 633b214e9b9d99788ed72ab4823a69a43c7c40ed07fb76c7d56c50453c0e58ab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_hexio.c||src/test_hexio.c": [
          "File: src/test_hexio.c -> src/test_hexio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:   return (int) (q - (unsigned char *)p);",
          "338: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340: static int putFts3Varint(char *p, sqlite_int64 v){",
          "341:   unsigned char *q = (unsigned char *) p;",
          "342:   sqlite_uint64 vu = v;",
          "343:   do{",
          "345:     vu >>= 7;",
          "346:   }while( vu!=0 );",
          "348:   assert( q - (unsigned char *)p <= 10 );",
          "349:   return (int) (q - (unsigned char *)p);",
          "350: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:   return TCL_OK;",
          "368: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384: static int SQLITE_TCLAPI make_fts3record(",
          "385:   void * clientData,",
          "386:   Tcl_Interp *interp,",
          "387:   int objc,",
          "388:   Tcl_Obj *CONST objv[]",
          "389: ){",
          "390:   Tcl_Obj **aArg = 0;",
          "391:   int nArg = 0;",
          "392:   unsigned char *aOut = 0;",
          "393:   int nOut = 0;",
          "394:   int nAlloc = 0;",
          "395:   int i;",
          "396:   int rc = TCL_OK;",
          "398:   if( objc!=2 ){",
          "399:     Tcl_WrongNumArgs(interp, 1, objv, \"LIST\");",
          "400:     return TCL_ERROR;",
          "401:   }",
          "402:   if( Tcl_ListObjGetElements(interp, objv[1], &nArg, &aArg) ){",
          "403:     return TCL_ERROR;",
          "404:   }",
          "406:   for(i=0; i<nArg; i++){",
          "407:     sqlite3_int64 iVal;",
          "408:     if( TCL_OK==Tcl_GetWideIntFromObj(0, aArg[i], &iVal) ){",
          "409:       if( nOut+10>nAlloc ){",
          "410:         int nNew = nAlloc?nAlloc*2:128;",
          "411:         unsigned char *aNew = sqlite3_realloc(aOut, nNew);",
          "412:         if( aNew==0 ){",
          "413:           sqlite3_free(aOut);",
          "414:           return TCL_ERROR;",
          "415:         }",
          "416:         aOut = aNew;",
          "417:         nAlloc = nNew;",
          "418:       }",
          "419:       nOut += putFts3Varint((char*)&aOut[nOut], iVal);",
          "420:     }else{",
          "421:       int nVal = 0;",
          "422:       char *zVal = Tcl_GetStringFromObj(aArg[i], &nVal);",
          "423:       while( (nOut + nVal)>nAlloc ){",
          "424:         int nNew = nAlloc?nAlloc*2:128;",
          "425:         unsigned char *aNew = sqlite3_realloc(aOut, nNew);",
          "426:         if( aNew==0 ){",
          "427:           sqlite3_free(aOut);",
          "428:           return TCL_ERROR;",
          "429:         }",
          "430:         aOut = aNew;",
          "431:         nAlloc = nNew;",
          "432:       }",
          "433:       memcpy(&aOut[nOut], zVal, nVal);",
          "434:       nOut += nVal;",
          "435:     }",
          "436:   }",
          "438:   Tcl_SetObjResult(interp, Tcl_NewByteArrayObj(aOut, nOut));",
          "439:   sqlite3_free(aOut);",
          "440:   return TCL_OK;",
          "441: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383:      { \"hexio_render_int32\",           hexio_render_int32    },",
          "384:      { \"utf8_to_utf8\",                 utf8_to_utf8          },",
          "385:      { \"read_fts3varint\",              read_fts3varint       },",
          "386:   };",
          "387:   int i;",
          "388:   for(i=0; i<sizeof(aObjCmd)/sizeof(aObjCmd[0]); i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:      { \"make_fts3record\",              make_fts3record       },",
          "",
          "---------------"
        ],
        "test/fts4record.test||test/fts4record.test": [
          "File: test/fts4record.test -> test/fts4record.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 18",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS4 module.",
          "13: #",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/fts3_common.tcl",
          "19: set testprefix fts4record",
          "21: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "22: ifcapable !fts3 {",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: sqlite3_fts3_may_be_corrupt 1",
          "29: do_execsql_test 1.0 {",
          "30:   CREATE VIRTUAL TABLE t1 USING fts4(x);",
          "31:   INSERT INTO t1 VALUES('terma terma terma termb');",
          "32: }",
          "34: do_execsql_test 1.1 {",
          "35:   SELECT quote(root) FROM t1_segdir",
          "36: } {",
          "37:   X'00057465726D6105010203030004016203010500'",
          "38: }",
          "40: proc make_record_wrapper {args} { make_fts3record $args }",
          "41: db func record make_record_wrapper",
          "43: do_execsql_test 1.2 {",
          "44:   select quote(",
          "45:     record(0,    5, 'terma', 5, 1, 2, 3, 3, 0,",
          "46:               4, 1, 'b'    , 3, 1, 5, 0",
          "47:   ) );",
          "48: } {",
          "49:   X'00057465726D6105010203030004016203010500'",
          "50: }",
          "52: do_execsql_test 1.3.1 {",
          "53:   UPDATE t1_segdir SET root =",
          "54:     record(0,    5, 'terma', 5, 1, 2, 3, 3, 0,",
          "55:               4, 1, 'b'    , 3, 1, 5,",
          "56:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "57:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "58:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0",
          "59:           );",
          "60: }",
          "62: do_catchsql_test 1.3.2 {",
          "63:   SELECT snippet(t1) FROM t1 WHERE t1 MATCH 'term*'",
          "64: } {1 {database disk image is malformed}}",
          "66: do_execsql_test 1.4.1 {",
          "67:   UPDATE t1_segdir SET root =",
          "68:     record(0,    5, 'terma', 5, 1, 2, 3, 3, 0,",
          "69:               4, 1, 'b'    , 4, 1, 5,",
          "70:               256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "71:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "72:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0",
          "73:           );",
          "74: }",
          "76: do_catchsql_test 1.4.2 {",
          "77:   SELECT snippet(t1) FROM t1 WHERE t1 MATCH 'term*'",
          "78: } {1 {database disk image is malformed}}",
          "80: do_execsql_test 1.4.3 {",
          "81:   SELECT quote(root) FROM t1_segdir",
          "82: } {",
          "83:   X'00057465726D610501020303000401620401058002010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100'",
          "84: }",
          "86: do_execsql_test 1.5.1 {",
          "87:   UPDATE t1_segdir SET root =",
          "88:     record(0,    5, 'terma', 5, 1, 2, 3, 3, 0,",
          "89:               4, 1, 'b'    , 4, 1, 5,",
          "90:               256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "91:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "92:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0",
          "93:           );",
          "94: }",
          "96: do_catchsql_test 1.4.2 {",
          "97:   SELECT snippet(t1) FROM t1 WHERE t1 MATCH 'term*'",
          "98: } {1 {database disk image is malformed}}",
          "100: do_execsql_test 1.4.3 {",
          "101:   SELECT quote(root) FROM t1_segdir",
          "102: } {",
          "103:   X'00057465726D610501020303000401620401058002010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100'",
          "104: }",
          "107: do_execsql_test 1.5.1 {",
          "108:   UPDATE t1_segdir SET root =",
          "109:   X'00057465726D61050102030300040162040105FF00010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100'",
          "110: }",
          "112: do_catchsql_test 1.5.2 {",
          "113:   SELECT snippet(t1) FROM t1 WHERE t1 MATCH 'term*'",
          "114: } {1 {database disk image is malformed}}",
          "116: do_catchsql_test 1.5.3 {",
          "117:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "118: } {1 {database disk image is malformed}}",
          "120: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53d30dd371832c13a62312b339cb0a86b1012b20",
      "candidate_info": {
        "commit_hash": "53d30dd371832c13a62312b339cb0a86b1012b20",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/53d30dd371832c13a62312b339cb0a86b1012b20",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/vdbemem.c"
        ],
        "message": "Early detection of implausibly sized records to avoid unnecessary large memory allocations.\n\nFossilOrigin-Name: 2c8769c69f301307db6663adb8b7c0b89f5959516bf6110cb8ff4b21bd903f70",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ada91aefe37efe3c009691b5599e4d6acf182e5ec3cf28dda0871d09858498b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4519:   return pCur->info.nPayload;",
          "4520: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4535: sqlite3_int64 sqlite3BtreeMaxRecordSize(BtCursor *pCur){",
          "4536:   assert( cursorHoldsMutex(pCur) );",
          "4537:   assert( pCur->eState==CURSOR_VALID );",
          "4538:   return pCur->pBt->pageSize * (sqlite3_int64)pCur->pBt->nPage;",
          "4539: }",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "315: int sqlite3BtreePayload(BtCursor*, u32 offset, u32 amt, void*);",
          "316: const void *sqlite3BtreePayloadFetch(BtCursor*, u32 *pAmt);",
          "317: u32 sqlite3BtreePayloadSize(BtCursor*);",
          "319: char *sqlite3BtreeIntegrityCheck(Btree*, int *aRoot, int nRoot, int, int*);",
          "320: struct Pager *sqlite3BtreePager(Btree*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318: sqlite3_int64 sqlite3BtreeMaxRecordSize(BtCursor*);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1124: ){",
          "1125:   int rc;",
          "1126:   pMem->flags = MEM_Null;",
          "1127:   if( SQLITE_OK==(rc = sqlite3VdbeMemClearAndResize(pMem, amt+1)) ){",
          "1128:     rc = sqlite3BtreePayload(pCur, offset, amt, pMem->z);",
          "1129:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1127:   if( sqlite3BtreeMaxRecordSize(pCur)<offset+amt ){",
          "1128:     return SQLITE_CORRUPT_BKPT;",
          "1129:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}