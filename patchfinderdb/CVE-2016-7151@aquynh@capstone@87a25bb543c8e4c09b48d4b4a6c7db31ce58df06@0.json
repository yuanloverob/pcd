{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e72bd24c971bedc9a8593b38c3cfa91ff3dbe0f7",
      "candidate_info": {
        "commit_hash": "e72bd24c971bedc9a8593b38c3cfa91ff3dbe0f7",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/e72bd24c971bedc9a8593b38c3cfa91ff3dbe0f7",
        "files": [
          "bindings/python/capstone/__init__.py"
        ],
        "message": "[binding][python] fixup python 3 compatibility\n\nIn Python 3.x dict.keys() return a dict_keys object not a list.",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:     all_archs = \"\"",
          "877:     keys = archs.keys()",
          "880:         if cs_support(archs[k]):",
          "881:             all_archs += \"-%s\" % k",
          "",
          "[Removed Lines]",
          "878:     keys.sort()",
          "879:     for k in keys:",
          "",
          "[Added Lines]",
          "878:     for k in sorted(keys):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52959a1bb8eca4d9162396cb4ea3cdfbf31a2b98",
      "candidate_info": {
        "commit_hash": "52959a1bb8eca4d9162396cb4ea3cdfbf31a2b98",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/52959a1bb8eca4d9162396cb4ea3cdfbf31a2b98",
        "files": [
          "include/platform.h"
        ],
        "message": "Supported a WDK project",
        "before_after_code_files": [
          "include/platform.h||include/platform.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/platform.h||include/platform.h": [
          "File: include/platform.h -> include/platform.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #ifndef __cplusplus",
          "14: typedef unsigned char bool;",
          "15: #define false 0",
          "",
          "[Removed Lines]",
          "12: #if (_MSC_VER < 1800)",
          "",
          "[Added Lines]",
          "12: #if (_MSC_VER < 1800) || defined(_KERNEL_MODE)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "335b85c627be32171719aad807449fa495bcb1e1",
      "candidate_info": {
        "commit_hash": "335b85c627be32171719aad807449fa495bcb1e1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/335b85c627be32171719aad807449fa495bcb1e1",
        "files": [
          "arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "arm64: fix immediate number in detail mode. see #860",
        "before_after_code_files": [
          "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c": [
          "File: arch/AArch64/AArch64Disassembler.c -> arch/AArch64/AArch64Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1006:  bool IsFP;",
          "1007:  unsigned Rt = fieldFromInstruction(insn, 0, 5);",
          "1008:  unsigned Rn = fieldFromInstruction(insn, 5, 5);",
          "",
          "[Removed Lines]",
          "1009:  int32_t offset = fieldFromInstruction(insn, 12, 9);",
          "",
          "[Added Lines]",
          "1009:  int64_t offset = fieldFromInstruction(insn, 12, 9);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1269:  unsigned Rt = fieldFromInstruction(insn, 0, 5);",
          "1270:  unsigned Rn = fieldFromInstruction(insn, 5, 5);",
          "1271:  unsigned Rt2 = fieldFromInstruction(insn, 10, 5);",
          "1273:  bool IsLoad = fieldFromInstruction(insn, 22, 1) != 0;",
          "1274:  unsigned Opcode = MCInst_getOpcode(Inst);",
          "1275:  bool NeedsDisjointWritebackTransfer = false;",
          "",
          "[Removed Lines]",
          "1272:  int32_t offset = fieldFromInstruction(insn, 15, 7);",
          "",
          "[Added Lines]",
          "1272:  int64_t offset = fieldFromInstruction(insn, 15, 7);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1547:   uint64_t Addr, void *Decoder)",
          "1548: {",
          "1549:  unsigned Rd = fieldFromInstruction(insn, 0, 5);",
          "1552:  imm |= fieldFromInstruction(insn, 29, 2);",
          "",
          "[Removed Lines]",
          "1550:  int32_t imm = fieldFromInstruction(insn, 5, 19) << 2;",
          "",
          "[Added Lines]",
          "1550:  int64_t imm = fieldFromInstruction(insn, 5, 19) << 2;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1601:   uint64_t Addr,",
          "1602:   void *Decoder)",
          "1603: {",
          "1607:  if (imm & (1 << (26 - 1)))",
          "",
          "[Removed Lines]",
          "1604:  int32_t imm = fieldFromInstruction(insn, 0, 26);",
          "",
          "[Added Lines]",
          "1603:  int64_t imm = fieldFromInstruction(insn, 0, 26);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1617:   uint32_t insn, uint64_t Addr,",
          "1618:   void *Decoder)",
          "1619: {",
          "1623:  bool ValidNamed;",
          "1626:  MCOperand_CreateImm0(Inst, pstate_field);",
          "1627:  MCOperand_CreateImm0(Inst, crm);",
          "",
          "[Removed Lines]",
          "1620:  uint32_t op1 = fieldFromInstruction(insn, 16, 3);",
          "1621:  uint32_t op2 = fieldFromInstruction(insn, 5, 3);",
          "1622:  uint32_t crm = fieldFromInstruction(insn, 8, 4);",
          "1624:  uint32_t pstate_field = (op1 << 3) | op2;",
          "",
          "[Added Lines]",
          "1619:  uint64_t op1 = fieldFromInstruction(insn, 16, 3);",
          "1620:  uint64_t op2 = fieldFromInstruction(insn, 5, 3);",
          "1621:  uint64_t crm = fieldFromInstruction(insn, 8, 4);",
          "1623:  uint64_t pstate_field = (op1 << 3) | op2;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1634: static DecodeStatus DecodeTestAndBranch(MCInst *Inst, uint32_t insn,",
          "1635:   uint64_t Addr, void *Decoder)",
          "1636: {",
          "1641:  bit |= fieldFromInstruction(insn, 19, 5);",
          "",
          "[Removed Lines]",
          "1637:  uint32_t Rt = fieldFromInstruction(insn, 0, 5);",
          "1638:  uint32_t bit = fieldFromInstruction(insn, 31, 1) << 5;",
          "1639:  int32_t dst = fieldFromInstruction(insn, 5, 14);",
          "",
          "[Added Lines]",
          "1636:  uint64_t Rt = fieldFromInstruction(insn, 0, 5);",
          "1637:  uint64_t bit = fieldFromInstruction(insn, 31, 1) << 5;",
          "1638:  int64_t dst = fieldFromInstruction(insn, 5, 14);",
          "",
          "---------------"
        ],
        "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c": [
          "File: arch/AArch64/AArch64InstPrinter.c -> arch/AArch64/AArch64InstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   if (MCOperand_isImm(Op2) && MCOperand_isImm(Op3)) {",
          "137:    char *AsmMnemonic = NULL;",
          "138:    int shift = 0;",
          "142:    if (Opcode == AArch64_UBFMWri && imms != 0x1F && ((imms + 1) == immr)) {",
          "143:     AsmMnemonic = \"lsl\";",
          "",
          "[Removed Lines]",
          "139:    int immr = (int)MCOperand_getImm(Op2);",
          "140:    int imms = (int)MCOperand_getImm(Op3);",
          "",
          "[Added Lines]",
          "139:    int64_t immr = MCOperand_getImm(Op2);",
          "140:    int64_t imms = MCOperand_getImm(Op3);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (Is64Bit ? 64 : 32) - (int)MCOperand_getImm(Op2);",
          "208:     MI->flat_insn->detail->arm64.op_count++;",
          "209:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "211:     MI->flat_insn->detail->arm64.op_count++;",
          "212:    }",
          "",
          "[Removed Lines]",
          "210:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op3) + 1;",
          "",
          "[Added Lines]",
          "210:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op3) + 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].reg = MCOperand_getReg(Op1);",
          "233:    MI->flat_insn->detail->arm64.op_count++;",
          "234:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "236:    MI->flat_insn->detail->arm64.op_count++;",
          "237:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "239:    MI->flat_insn->detail->arm64.op_count++;",
          "240:   }",
          "",
          "[Removed Lines]",
          "235:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op2);",
          "238:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op3) - (int)MCOperand_getImm(Op2) + 1;",
          "",
          "[Added Lines]",
          "235:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op2);",
          "238:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op3) - MCOperand_getImm(Op2) + 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "631:  SStream_concat(O, \"#%#llx\", MCOperand_getImm(Op));",
          "632:  if (MI->csh->detail) {",
          "633:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "635:   MI->flat_insn->detail->arm64.op_count++;",
          "636:  }",
          "637: }",
          "",
          "[Removed Lines]",
          "634:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op);",
          "",
          "[Added Lines]",
          "634:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "687:  SStream_concat(O, \"c%u\", MCOperand_getImm(Op));",
          "688:  if (MI->csh->detail) {",
          "689:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_CIMM;",
          "691:   MI->flat_insn->detail->arm64.op_count++;",
          "692:  }",
          "693: }",
          "",
          "[Removed Lines]",
          "690:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)MCOperand_getImm(Op);",
          "",
          "[Added Lines]",
          "690:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = MCOperand_getImm(Op);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "716: static void printLogicalImm32(MCInst *MI, unsigned OpNum, SStream *O)",
          "717: {",
          "720:  Val = AArch64_AM_decodeLogicalImmediate(Val, 32);",
          "721:  printUInt32Bang(O, (int)Val);",
          "723:  if (MI->csh->detail) {",
          "724:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "726:   MI->flat_insn->detail->arm64.op_count++;",
          "727:  }",
          "728: }",
          "",
          "[Removed Lines]",
          "718:  int64_t Val = (int)MCOperand_getImm(MCInst_getOperand(MI, OpNum));",
          "725:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)Val;",
          "",
          "[Added Lines]",
          "718:  int64_t Val = MCOperand_getImm(MCInst_getOperand(MI, OpNum));",
          "725:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = Val;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "751:  if (MI->csh->detail) {",
          "752:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "754:   MI->flat_insn->detail->arm64.op_count++;",
          "755:  }",
          "756: }",
          "",
          "[Removed Lines]",
          "753:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)Val;",
          "",
          "[Added Lines]",
          "753:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = Val;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "975:  if (MI->csh->detail) {",
          "976:   if (MI->csh->doing_mem) {",
          "978:   } else {",
          "979:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "981:    MI->flat_insn->detail->arm64.op_count++;",
          "982:   }",
          "983:  }",
          "",
          "[Removed Lines]",
          "977:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int)val;",
          "980:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)val;",
          "",
          "[Added Lines]",
          "977:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = val;",
          "980:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = val;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "992:   printInt64Bang(O, val);",
          "993:   if (MI->csh->detail) {",
          "994:    if (MI->csh->doing_mem) {",
          "996:    } else {",
          "997:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "999:    MI->flat_insn->detail->arm64.op_count++;",
          "1000:    }",
          "1001:   }",
          "",
          "[Removed Lines]",
          "995:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int)val;",
          "998:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)val;",
          "",
          "[Added Lines]",
          "995:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = val;",
          "998:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = val;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1375:  SStream_concat(O, \"#%#016llx\", Val);",
          "1376:  if (MI->csh->detail) {",
          "1377:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "1379:   MI->flat_insn->detail->arm64.op_count++;",
          "1380:  }",
          "1381: }",
          "",
          "[Removed Lines]",
          "1378:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = (int)Val;",
          "",
          "[Added Lines]",
          "1378:   MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = Val;",
          "",
          "---------------"
        ],
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1466: {",
          "1467:  MCOperand *Op = MCInst_getOperand(MI, OpNum);",
          "1468:  unsigned SpecRegRBit = (unsigned)MCOperand_getImm(Op) >> 4;",
          "1470:  unsigned reg;",
          "1472:  if (ARM_getFeatureBits(MI->csh->mode) & ARM_FeatureMClass) {",
          "",
          "[Removed Lines]",
          "1469:  unsigned Mask = MCOperand_getImm(Op) & 0xf;",
          "",
          "[Added Lines]",
          "1469:  unsigned Mask = (unsigned)MCOperand_getImm(Op) & 0xf;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2cdb006fd8edc3b41fa0fabf39f9b99f8f64526",
      "candidate_info": {
        "commit_hash": "c2cdb006fd8edc3b41fa0fabf39f9b99f8f64526",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/c2cdb006fd8edc3b41fa0fabf39f9b99f8f64526",
        "files": [
          "arch/ARM/ARMInstPrinter.c",
          "bindings/python/test_arm.py",
          "tests/test_arm.c"
        ],
        "message": "arm: treat ARM address as unsigned\n\nIt should be unsigned because:\n* It does arithmetic operations\n* Format strings have \"%u\" instead of \"%d\"",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c",
          "bindings/python/test_arm.py||bindings/python/test_arm.py",
          "tests/test_arm.c||tests/test_arm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "723:   if (ARM_rel_branch(MI->csh, opc)) {",
          "725:    if (MI->csh->mode & CS_MODE_THUMB) {",
          "727:     if (ARM_blx_to_arm_mode(MI->csh, opc)) {",
          "729: #define _ALIGN_DOWN(v, align_width) ((v/align_width)*align_width)",
          "731: #undef _ALIGN_DOWN",
          "732:     }",
          "733:    } else {",
          "735:    }",
          "745:   } else {",
          "746:    switch(MI->flat_insn->id) {",
          "747:     default:",
          "",
          "[Removed Lines]",
          "726:     imm += (int32_t)MI->address + 4;",
          "730:      imm = _ALIGN_DOWN(imm, 4);",
          "734:     imm += (int32_t)MI->address + 8;",
          "737:    if (imm >= 0) {",
          "738:     if (imm > HEX_THRESHOLD)",
          "739:      SStream_concat(O, \"#0x%x\", imm);",
          "740:     else",
          "741:      SStream_concat(O, \"#%u\", imm);",
          "742:    } else {",
          "743:     SStream_concat(O, \"#0x%x\", imm);",
          "744:    }",
          "",
          "[Added Lines]",
          "724:    uint32_t address;",
          "728:     address = (uint32_t)MI->address + 4;",
          "732:      address = _ALIGN_DOWN(address, 4);",
          "736:     address = (uint32_t)MI->address + 8;",
          "739:    address += imm;",
          "741:    if (address > HEX_THRESHOLD)",
          "742:     SStream_concat(O, \"#0x%x\", address);",
          "743:    else",
          "744:     SStream_concat(O, \"#%u\", address);",
          "",
          "---------------"
        ],
        "bindings/python/test_arm.py||bindings/python/test_arm.py": [
          "File: bindings/python/test_arm.py -> bindings/python/test_arm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: ARM_CODE = b\"\\xED\\xFF\\xFF\\xEB\\x04\\xe0\\x2d\\xe5\\x00\\x00\\x00\\x00\\xe0\\x83\\x22\\xe5\\xf1\\x02\\x03\\x0e\\x00\\x00\\xa0\\xe3\\x02\\x30\\xc1\\xe7\\x00\\x00\\x53\\xe3\\x00\\x02\\x01\\xf1\\x05\\x40\\xd0\\xe8\\xf4\\x80\\x00\\x00\"",
          "12: ARM_CODE2 = b\"\\xd1\\xe8\\x00\\xf0\\xf0\\x24\\x04\\x07\\x1f\\x3c\\xf2\\xc0\\x00\\x00\\x4f\\xf0\\x00\\x01\\x46\\x6c\"",
          "14: THUMB_CODE2 = b\"\\x4f\\xf0\\x00\\x01\\xbd\\xe8\\x00\\x88\\xd1\\xe8\\x00\\xf0\\x18\\xbf\\xad\\xbf\\xf3\\xff\\x0b\\x0c\\x86\\xf3\\x00\\x89\\x80\\xf3\\x00\\x8c\\x4f\\xfa\\x99\\xf6\\xd0\\xff\\xa2\\x01\"",
          "15: THUMB_MCLASS = b\"\\xef\\xf3\\x02\\x80\"",
          "16: ARMV8 = b\"\\xe0\\x3b\\xb2\\xee\\x42\\x00\\x01\\xe1\\x51\\xf0\\x7f\\xf5\"",
          "",
          "[Removed Lines]",
          "13: THUMB_CODE = b\"\\x70\\x47\\xeb\\x46\\x83\\xb0\\xc9\\x68\\x1f\\xb1\\x30\\xbf\\xaf\\xf3\\x20\\x84\"",
          "",
          "[Added Lines]",
          "13: THUMB_CODE = b\"\\x70\\x47\\x00\\xf0\\x10\\xe8\\xeb\\x46\\x83\\xb0\\xc9\\x68\\x1f\\xb1\\x30\\xbf\\xaf\\xf3\\x20\\x84\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:             if syntax:",
          "114:                 md.syntax = syntax",
          "115:             md.detail = True",
          "117:                 print_insn_detail(insn)",
          "118:                 print ()",
          "119:             print (\"0x%x:\\n\" % (insn.address + insn.size))",
          "",
          "[Removed Lines]",
          "116:             for insn in md.disasm(code, 0x1000):",
          "",
          "[Added Lines]",
          "116:             for insn in md.disasm(code, 0x80001000):",
          "",
          "---------------"
        ],
        "tests/test_arm.c||tests/test_arm.c": [
          "File: tests/test_arm.c -> tests/test_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: #define THUMB_CODE2 \"\\x4f\\xf0\\x00\\x01\\xbd\\xe8\\x00\\x88\\xd1\\xe8\\x00\\xf0\\x18\\xbf\\xad\\xbf\\xf3\\xff\\x0b\\x0c\\x86\\xf3\\x00\\x89\\x80\\xf3\\x00\\x8c\\x4f\\xfa\\x99\\xf6\\xd0\\xff\\xa2\\x01\"",
          "202: #define THUMB_MCLASS \"\\xef\\xf3\\x02\\x80\"",
          "203: #define ARMV8 \"\\xe0\\x3b\\xb2\\xee\\x42\\x00\\x01\\xe1\\x51\\xf0\\x7f\\xf5\"",
          "",
          "[Removed Lines]",
          "200: #define THUMB_CODE \"\\x70\\x47\\xeb\\x46\\x83\\xb0\\xc9\\x68\\x1f\\xb1\\x30\\xbf\\xaf\\xf3\\x20\\x84\"",
          "",
          "[Added Lines]",
          "200: #define THUMB_CODE \"\\x70\\x47\\x00\\xf0\\x10\\xe8\\xeb\\x46\\x83\\xb0\\xc9\\x68\\x1f\\xb1\\x30\\xbf\\xaf\\xf3\\x20\\x84\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:   },",
          "249:  };",
          "252:  cs_insn *insn;",
          "253:  int i;",
          "254:  size_t count;",
          "",
          "[Removed Lines]",
          "251:  uint64_t address = 0x1000;",
          "",
          "[Added Lines]",
          "251:  uint64_t address = 0x80001000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "469b4addd4a7a9f226df0a842f2bdde3d8e4614e",
      "candidate_info": {
        "commit_hash": "469b4addd4a7a9f226df0a842f2bdde3d8e4614e",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/469b4addd4a7a9f226df0a842f2bdde3d8e4614e",
        "files": [
          "cstool/cstool.c",
          "cstool/cstool_arm.c",
          "cstool/cstool_arm64.c",
          "cstool/cstool_mips.c",
          "cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c",
          "cstool/cstool_x86.c",
          "cstool/cstool_xcore.c"
        ],
        "message": "Delete platform.h and fix wrong identation.",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "cstool/cstool_arm.c||cstool/cstool_arm.c",
          "cstool/cstool_arm64.c||cstool/cstool_arm64.c",
          "cstool/cstool_mips.c||cstool/cstool_mips.c",
          "cstool/cstool_ppc.c||cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c||cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c||cstool/cstool_systemz.c",
          "cstool/cstool_x86.c||cstool/cstool_x86.c",
          "cstool/cstool_xcore.c||cstool/cstool_xcore.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include <capstone.h>",
          "12: void print_insn_detail_x86(csh ud, cs_mode mode, cs_insn *ins);",
          "13: void print_insn_detail_arm(csh handle, cs_insn *ins);",
          "",
          "[Removed Lines]",
          "10: #define VERSION \"1.0\"",
          "",
          "[Added Lines]",
          "10: #define VERSION \"2.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: static uint8_t char_to_hexnum(char c)",
          "23: {",
          "24:  if (c >= '0' && c <= '9') {",
          "26:  }",
          "28:  if (c >= 'a' && c <= 'f') {",
          "",
          "[Removed Lines]",
          "25:   return (uint8_t)(c - '0');",
          "",
          "[Added Lines]",
          "25:         return (uint8_t)(c - '0');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38: static uint8_t *preprocess(char *code, size_t *size)",
          "39: {",
          "41:  uint8_t high, low;",
          "42:  uint8_t *result;",
          "",
          "[Removed Lines]",
          "40:  size_t i = 0, j = 0;",
          "",
          "[Added Lines]",
          "40:     size_t i = 0, j = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "175:  if (!strcmp(mode, \"arm\")) {",
          "176:         arch = \"arm\";",
          "178:  }",
          "180:  if (!strcmp(mode, \"armb\")) {",
          "181:         arch = \"arm\";",
          "183:  }",
          "185:  if (!strcmp(mode, \"arml\")) {",
          "186:         arch = \"arm\";",
          "188:  }",
          "190:  if (!strcmp(mode, \"thumb\")) {",
          "",
          "[Removed Lines]",
          "177:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "182:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "187:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "",
          "[Added Lines]",
          "177:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "182:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "187:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "195:  if (!strcmp(mode, \"thumbbe\")) {",
          "196:         arch = \"arm\";",
          "198:  }",
          "200:  if (!strcmp(mode, \"thumble\")) {",
          "201:         arch = \"arm\";",
          "203:  }",
          "205:  if (!strcmp(mode, \"arm64\")) {",
          "206:         arch = \"arm64\";",
          "208:  }",
          "210:  if (!strcmp(mode, \"mips\")) {",
          "211:         arch = \"mips\";",
          "213:  }",
          "215:  if (!strcmp(mode, \"mipsbe\")) {",
          "216:         arch = \"mips\";",
          "218:  }",
          "220:  if (!strcmp(mode, \"mips64\")) {",
          "221:         arch = \"mips\";",
          "223:  }",
          "225:  if (!strcmp(mode, \"mips64be\")) {",
          "226:         arch = \"mips\";",
          "228:  }",
          "230:  if (!strcmp(mode, \"x16\")) {",
          "234:  }",
          "236:  if (!strcmp(mode, \"x32\")) {",
          "237:         md = CS_MODE_32;",
          "240:  }",
          "242:  if (!strcmp(mode, \"x64\")) {",
          "",
          "[Removed Lines]",
          "197:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "202:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "207:   err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "212:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "217:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "222:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "227:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "231:         md = CS_MODE_64;",
          "232:   arch = \"x86\";",
          "233:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "238:   arch = \"x86\";",
          "239:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "",
          "[Added Lines]",
          "197:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "202:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "207:         err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "212:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "217:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "222:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "227:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "231:         md = CS_MODE_16;",
          "232:         arch = \"x86\";",
          "233:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "238:         arch = \"x86\";",
          "239:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "248:  if (!strcmp(mode, \"x16att\")) {",
          "249:         md = CS_MODE_16;",
          "250:         arch = \"x86\";",
          "254:   }",
          "255:  }",
          "",
          "[Removed Lines]",
          "251:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "252:   if (!err) {",
          "253:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Added Lines]",
          "251:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "252:         if (!err) {",
          "253:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "278:  }",
          "280:  if (!strcmp(mode,\"ppc64be\")) {",
          "283:  }",
          "285:  if (!strcmp(mode,\"sparc\")) {",
          "",
          "[Removed Lines]",
          "281:          arch = \"ppc\";",
          "282:   err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "",
          "[Added Lines]",
          "281:         arch = \"ppc\";",
          "282:         err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "",
          "---------------"
        ],
        "cstool/cstool_arm.c||cstool/cstool_arm.c": [
          "File: cstool/cstool_arm.c -> cstool/cstool_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <stdio.h>",
          "2: #include <stdlib.h>",
          "5: #include <capstone.h>",
          "8: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "9: {",
          "10:     unsigned char *c;",
          "",
          "[Removed Lines]",
          "4: #include <platform.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cstool/cstool_arm64.c||cstool/cstool_arm64.c": [
          "File: cstool/cstool_arm64.c -> cstool/cstool_arm64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "8: #include <capstone.h>",
          "11: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "12: {",
          "13:     unsigned char *c;",
          "",
          "[Removed Lines]",
          "7: #include <platform.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cstool/cstool_mips.c||cstool/cstool_mips.c": [
          "File: cstool/cstool_mips.c -> cstool/cstool_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "8: #include <capstone.h>",
          "11: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "12: {",
          "13:     unsigned char *c;",
          "",
          "[Removed Lines]",
          "7: #include <platform.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cstool/cstool_ppc.c||cstool/cstool_ppc.c": [
          "File: cstool/cstool_ppc.c -> cstool/cstool_ppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "7: #include <capstone.h>",
          "9: static csh handle;",
          "",
          "[Removed Lines]",
          "6: #include <platform.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cstool/cstool_sparc.c||cstool/cstool_sparc.c": [
          "File: cstool/cstool_sparc.c -> cstool/cstool_sparc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "7: #include <capstone.h>",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "",
          "[Removed Lines]",
          "6: #include <platform.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cstool/cstool_systemz.c||cstool/cstool_systemz.c": [
          "File: cstool/cstool_systemz.c -> cstool/cstool_systemz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "7: #include <capstone.h>",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "",
          "[Removed Lines]",
          "6: #include <platform.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cstool/cstool_x86.c||cstool/cstool_x86.c": [
          "File: cstool/cstool_x86.c -> cstool/cstool_x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "8: #include <capstone.h>",
          "12: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "13: {",
          "14:     unsigned char *c;",
          "",
          "[Removed Lines]",
          "7: #include <platform.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cstool/cstool_xcore.c||cstool/cstool_xcore.c": [
          "File: cstool/cstool_xcore.c -> cstool/cstool_xcore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <stdio.h>",
          "7: #include <capstone.h>",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "",
          "[Removed Lines]",
          "6: #include <platform.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}