{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "19d5e48d6d56f59672c08c8aa162a2a3ff3819ba",
      "candidate_info": {
        "commit_hash": "19d5e48d6d56f59672c08c8aa162a2a3ff3819ba",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/19d5e48d6d56f59672c08c8aa162a2a3ff3819ba",
        "files": [
          "crypto/perlasm/README",
          "crypto/perlasm/x86_64-xlate.pl"
        ],
        "message": "Fix a few typos\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2571)\n(cherry picked from commit 7e12cdb52e3f4beff050caeecf3634870bb9a7c4)",
        "before_after_code_files": [
          "crypto/perlasm/x86_64-xlate.pl||crypto/perlasm/x86_64-xlate.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/perlasm/x86_64-xlate.pl||crypto/perlasm/x86_64-xlate.pl": [
          "File: crypto/perlasm/x86_64-xlate.pl -> crypto/perlasm/x86_64-xlate.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:    ($nasm ? \":\" : \"\\tPROC $current_function->{scope}\");",
          "430:  }",
          "431:     }",
          "433: { package expr;  # pick up expressioins",
          "434:     sub re {",
          "435:  my ($class, $line, $opcode) = @_;",
          "",
          "[Removed Lines]",
          "432: }",
          "",
          "[Added Lines]",
          "432: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004: # one can assume a \"red zone\" above stack pointer under Win64 as well.",
          "1005: # Point is that at apparently no occasion Windows kernel would alter",
          "1006: # the area above user stack pointer in true asynchronous manner...",
          "1008: # All the above means that if assembler programmer adheres to Unix",
          "1009: # register and stack layout, but disregards the \"red zone\" existense,",
          "1010: # it's possible to use following prologue and epilogue to \"gear\" from",
          "",
          "[Removed Lines]",
          "1007: #",
          "",
          "[Added Lines]",
          "1007: #",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "550f0f99600194cacd10ca43584a9744e27dbe0f",
      "candidate_info": {
        "commit_hash": "550f0f99600194cacd10ca43584a9744e27dbe0f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/550f0f99600194cacd10ca43584a9744e27dbe0f",
        "files": [
          "crypto/x509/x_all.c",
          "doc/crypto/X509_digest.pod"
        ],
        "message": "Make X509_Digest,others public\n\nAlso, if want SHA1 then use the pre-computed value if there.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2223)\n(cherry picked from commit 3e5d9da5fc45a5d129e0daa7211125eba097c3dd)",
        "before_after_code_files": [
          "crypto/x509/x_all.c||crypto/x509/x_all.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362: int X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,",
          "363:                 unsigned int *len)",
          "364: {",
          "365:     return (ASN1_item_digest",
          "366:             (ASN1_ITEM_rptr(X509), type, (char *)data, md, len));",
          "367: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:     if (type == EVP_sha1() && (data->ex_flags & EXFLAG_SET) != 0) {",
          "367:         if (len != NULL)",
          "369:         memcpy(md, data->sha1_hash, sizeof(data->sha1_hash));",
          "370:         return 1;",
          "371:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369: int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,",
          "370:                     unsigned char *md, unsigned int *len)",
          "371: {",
          "372:     return (ASN1_item_digest",
          "373:             (ASN1_ITEM_rptr(X509_CRL), type, (char *)data, md, len));",
          "374: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379:     if (type == EVP_sha1()) {",
          "381:         if (len != NULL)",
          "383:         memcpy(md, data->sha1_hash, sizeof(data->sha1_hash));",
          "384:         return 1;",
          "385:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ab5f981ed17adf0b804909d9aeac7419a432f01",
      "candidate_info": {
        "commit_hash": "3ab5f981ed17adf0b804909d9aeac7419a432f01",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3ab5f981ed17adf0b804909d9aeac7419a432f01",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Ensure we have length checks for all extensions\n\nThe previous commit inspired a review of all the length checks for the\nextension adding code. This adds more robust checks and adds checks where\nsome were missing previously. The real solution for this is to use WPACKET\nwhich is currently in master - but that cannot be applied to release\nbranches.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1049:             return NULL;",
          "1050:         }",
          "1053:             return NULL;",
          "1055:         s2n(TLSEXT_TYPE_renegotiate, ret);",
          "",
          "[Removed Lines]",
          "1052:         if ((limit - ret - 4 - el) < 0)",
          "",
          "[Added Lines]",
          "1052:         if (ret >= limit || limit - ret < 4 + el)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1069:     if (s->tlsext_hostname != NULL) {",
          "",
          "[Removed Lines]",
          "1071:         unsigned long size_str;",
          "1072:         long lenmax;",
          "",
          "[Added Lines]",
          "1071:         size_t size_str;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1085:             return NULL;",
          "",
          "[Removed Lines]",
          "1083:         if ((lenmax = limit - ret - 9) < 0",
          "1084:             || (size_str = strlen(s->tlsext_hostname)) > (unsigned long)lenmax)",
          "",
          "[Added Lines]",
          "1081:         size_str = strlen(s->tlsext_hostname);",
          "1082:         if (ret >= limit || (size_t)(limit - ret) < 9 + size_str)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1102:     if (s->srp_ctx.login != NULL) { /* Add TLS extension SRP username to the",
          "1106:         if (login_len > 255 || login_len == 0) {",
          "1107:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1108:             return NULL;",
          "",
          "[Removed Lines]",
          "1105:         int login_len = strlen(s->srp_ctx.login);",
          "",
          "[Added Lines]",
          "1103:         size_t login_len = strlen(s->srp_ctx.login);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1118:             return NULL;",
          "",
          "[Removed Lines]",
          "1117:         if ((limit - ret - 5 - login_len) < 0)",
          "",
          "[Added Lines]",
          "1115:         if (ret >= limit || (size_t)(limit - ret) < 5 + login_len)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1135:         const unsigned char *pcurves, *pformats;",
          "1136:         size_t num_curves, num_formats, curves_list_len;",
          "1137:         size_t i;",
          "",
          "[Removed Lines]",
          "1134:         long lenmax;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1140:         tls1_get_formatlist(s, &pformats, &num_formats);",
          "1146:         if (num_formats > 255) {",
          "1147:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1148:             return NULL;",
          "1149:         }",
          "1151:         s2n(TLSEXT_TYPE_ec_point_formats, ret);",
          "",
          "[Removed Lines]",
          "1142:         if ((lenmax = limit - ret - 5) < 0)",
          "1143:             return NULL;",
          "1144:         if (num_formats > (size_t)lenmax)",
          "1145:             return NULL;",
          "",
          "[Added Lines]",
          "1149:         if (ret >= limit || (size_t)(limit - ret) < 5 + num_formats)",
          "1150:             return NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1162:         if (!tls1_get_curvelist(s, 0, &pcurves, &num_curves))",
          "1163:             return NULL;",
          "1169:         if (num_curves > 65532 / 2) {",
          "1170:             SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1171:             return NULL;",
          "1172:         }",
          "1174:         s2n(TLSEXT_TYPE_elliptic_curves, ret);",
          "1175:         etmp = ret + 4;",
          "",
          "[Removed Lines]",
          "1165:         if ((lenmax = limit - ret - 6) < 0)",
          "1166:             return NULL;",
          "1167:         if (num_curves > (size_t)lenmax / 2)",
          "1168:             return NULL;",
          "",
          "[Added Lines]",
          "1176:         if (ret >= limit || (size_t)(limit - ret) < 6 + (num_curves * 2))",
          "1177:             return NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1192:     if (tls_use_ticket(s)) {",
          "1194:         if (!s->new_session && s->session && s->session->tlsext_tick)",
          "1195:             ticklen = s->session->tlsext_ticklen;",
          "1196:         else if (s->session && s->tlsext_session_ticket &&",
          "",
          "[Removed Lines]",
          "1193:         int ticklen;",
          "",
          "[Added Lines]",
          "1198:         size_t ticklen;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1215:             return NULL;",
          "1216:         s2n(TLSEXT_TYPE_session_ticket, ret);",
          "1217:         s2n(ticklen, ret);",
          "1219:             memcpy(ret, s->session->tlsext_tick, ticklen);",
          "1220:             ret += ticklen;",
          "1221:         }",
          "",
          "[Removed Lines]",
          "1214:         if ((long)(limit - ret - 4 - ticklen) < 0)",
          "1218:         if (ticklen) {",
          "",
          "[Added Lines]",
          "1219:         if (ret >= limit || (size_t)(limit - ret) < 4 + ticklen)",
          "1223:         if (ticklen > 0) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1227:         const unsigned char *salg;",
          "1228:         unsigned char *etmp;",
          "1229:         salglen = tls12_get_psigalgs(s, &salg);",
          "1231:             return NULL;",
          "1232:         s2n(TLSEXT_TYPE_signature_algorithms, ret);",
          "1233:         etmp = ret;",
          "",
          "[Removed Lines]",
          "1230:         if ((size_t)(limit - ret) < salglen + 6)",
          "",
          "[Added Lines]",
          "1242:         if (ret >= limit || (size_t)(limit - ret) < salglen + 6)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1242: #ifndef OPENSSL_NO_OCSP",
          "1243:     if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {",
          "1244:         int i;",
          "1246:         OCSP_RESPID *id;",
          "1248:         idlen = 0;",
          "1249:         for (i = 0; i < sk_OCSP_RESPID_num(s->tlsext_ocsp_ids); i++) {",
          "1250:             id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);",
          "1253:                 return NULL;",
          "1255:         }",
          "1257:         if (s->tlsext_ocsp_exts) {",
          "1260:                 return NULL;",
          "1261:         } else",
          "1262:             extlen = 0;",
          "",
          "[Removed Lines]",
          "1245:         long extlen, idlen, itmp;",
          "1251:             itmp = i2d_OCSP_RESPID(id, NULL);",
          "1252:             if (itmp <= 0)",
          "1254:             idlen += itmp + 2;",
          "1258:             extlen = i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, NULL);",
          "1259:             if (extlen < 0)",
          "",
          "[Added Lines]",
          "1257:         size_t extlen, idlen;",
          "1258:         int lentmp;",
          "1264:             lentmp = i2d_OCSP_RESPID(id, NULL);",
          "1265:             if (lentmp <= 0)",
          "1267:             idlen += (size_t)lentmp + 2;",
          "1271:             lentmp = i2d_X509_EXTENSIONS(s->tlsext_ocsp_exts, NULL);",
          "1272:             if (lentmp < 0)",
          "1274:             extlen = (size_t)lentmp;",
          "1278:         if (extlen + idlen > 0xFFF0)",
          "1279:             return NULL;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1272:             return NULL;",
          "1273:         s2n(TLSEXT_TYPE_status_request, ret);",
          "1276:         s2n(extlen + idlen + 5, ret);",
          "1278:         s2n(idlen, ret);",
          "",
          "[Removed Lines]",
          "1271:         if ((long)(limit - ret - 9 - extlen - idlen) < 0)",
          "1274:         if (extlen + idlen > 0xFFF0)",
          "1275:             return NULL;",
          "",
          "[Added Lines]",
          "1287:         if (ret >= limit || (size_t)(limit - ret) < 9 + idlen + extlen)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1282:             id = sk_OCSP_RESPID_value(s->tlsext_ocsp_ids, i);",
          "1284:             ret += 2;",
          "1288:         }",
          "1289:         s2n(extlen, ret);",
          "1290:         if (extlen > 0)",
          "",
          "[Removed Lines]",
          "1285:             itmp = i2d_OCSP_RESPID(id, &ret);",
          "1287:             s2n(itmp, q);",
          "",
          "[Added Lines]",
          "1300:             lentmp = i2d_OCSP_RESPID(id, &ret);",
          "1302:             s2n(lentmp, q);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1294: #ifndef OPENSSL_NO_HEARTBEATS",
          "1295:     if (SSL_IS_DTLS(s)) {",
          "1298:             return NULL;",
          "1299:         s2n(TLSEXT_TYPE_heartbeat, ret);",
          "1300:         s2n(1, ret);",
          "",
          "[Removed Lines]",
          "1297:         if ((limit - ret - 4 - 1) < 0)",
          "",
          "[Added Lines]",
          "1318:         if (ret >= limit || limit - ret < 5)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1320:             return NULL;",
          "1321:         s2n(TLSEXT_TYPE_next_proto_neg, ret);",
          "1322:         s2n(0, ret);",
          "",
          "[Removed Lines]",
          "1319:         if (limit - ret - 4 < 0)",
          "",
          "[Added Lines]",
          "1346:         if (ret >= limit || limit - ret < 4)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1331:     if (s->alpn_client_proto_list && !s->s3->tmp.finish_md_len) {",
          "1333:             return NULL;",
          "1334:         s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret);",
          "1335:         s2n(2 + s->alpn_client_proto_list_len, ret);",
          "",
          "[Removed Lines]",
          "1332:         if ((size_t)(limit - ret) < 6 + s->alpn_client_proto_list_len)",
          "",
          "[Added Lines]",
          "1365:         if (ret >= limit || limit - ret < 6 + s->alpn_client_proto_list_len)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1348:             return NULL;",
          "1349:         }",
          "1352:             return NULL;",
          "1354:         s2n(TLSEXT_TYPE_use_srtp, ret);",
          "",
          "[Removed Lines]",
          "1351:         if ((limit - ret - 4 - el) < 0)",
          "",
          "[Added Lines]",
          "1389:         if (ret >= limit || limit - ret < 4 + el)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1374:     if (!SSL_IS_DTLS(s)) {",
          "1375:         s2n(TLSEXT_TYPE_encrypt_then_mac, ret);",
          "1376:         s2n(0, ret);",
          "1377:     }",
          "1379: #ifndef OPENSSL_NO_CT",
          "1380:     if (s->ct_validation_callback != NULL) {",
          "1381:         s2n(TLSEXT_TYPE_signed_certificate_timestamp, ret);",
          "1382:         s2n(0, ret);",
          "1383:     }",
          "1384: #endif",
          "1385:     s2n(TLSEXT_TYPE_extended_master_secret, ret);",
          "1386:     s2n(0, ret);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:         if (ret >= limit || limit - ret < 4 )",
          "1418:             return NULL;",
          "1429:         if (ret >= limit || limit - ret < 4 )",
          "1430:             return NULL;",
          "1441:     if (ret >= limit || limit - ret < 4 )",
          "1442:         return NULL;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1401:             else",
          "1402:                 hlen = 0;",
          "1404:             s2n(TLSEXT_TYPE_padding, ret);",
          "1405:             s2n(hlen, ret);",
          "1406:             memset(ret, 0, hlen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1471:             if (ret >= limit || limit - ret < 4 + hlen)",
          "1472:                 return NULL;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1445:             return NULL;",
          "1446:         }",
          "1449:             return NULL;",
          "1451:         s2n(TLSEXT_TYPE_renegotiate, ret);",
          "",
          "[Removed Lines]",
          "1448:         if ((limit - ret - 4 - el) < 0)",
          "",
          "[Added Lines]",
          "1522:         if (ret >= limit || limit - ret < 4 + el)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1466:     if (!s->hit && s->servername_done == 1",
          "1467:         && s->session->tlsext_hostname != NULL) {",
          "1469:             return NULL;",
          "1471:         s2n(TLSEXT_TYPE_server_name, ret);",
          "",
          "[Removed Lines]",
          "1468:         if ((long)(limit - ret - 4) < 0)",
          "",
          "[Added Lines]",
          "1546:         if (ret >= limit || limit - ret < 4 )",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1483:         tls1_get_formatlist(s, &plist, &plistlen);",
          "1489:         if (plistlen > 255) {",
          "1490:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1491:             return NULL;",
          "1492:         }",
          "1494:         s2n(TLSEXT_TYPE_ec_point_formats, ret);",
          "1495:         s2n(plistlen + 1, ret);",
          "",
          "[Removed Lines]",
          "1481:         long lenmax;",
          "1485:         if ((lenmax = limit - ret - 5) < 0)",
          "1486:             return NULL;",
          "1487:         if (plistlen > (size_t)lenmax)",
          "1488:             return NULL;",
          "",
          "[Added Lines]",
          "1573:         if (ret >= limit || (size_t)(limit - ret) < 5 + plistlen)",
          "1574:             return NULL;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1507:     if (s->tlsext_ticket_expected && tls_use_ticket(s)) {",
          "1509:             return NULL;",
          "1510:         s2n(TLSEXT_TYPE_session_ticket, ret);",
          "1511:         s2n(0, ret);",
          "",
          "[Removed Lines]",
          "1508:         if ((long)(limit - ret - 4) < 0)",
          "",
          "[Added Lines]",
          "1594:         if (ret >= limit || limit - ret < 4)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1518:     }",
          "1520:     if (s->tlsext_status_expected) {",
          "1522:             return NULL;",
          "1523:         s2n(TLSEXT_TYPE_status_request, ret);",
          "1524:         s2n(0, ret);",
          "",
          "[Removed Lines]",
          "1521:         if ((long)(limit - ret - 4) < 0)",
          "",
          "[Added Lines]",
          "1611:         if (ret >= limit || limit - ret < 4)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1532:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1533:             return NULL;",
          "1534:         }",
          "1536:             return NULL;",
          "1538:         s2n(TLSEXT_TYPE_use_srtp, ret);",
          "",
          "[Removed Lines]",
          "1535:         if ((limit - ret - 4 - el) < 0)",
          "",
          "[Added Lines]",
          "1630:         if (ret >= limit || limit - ret < 4 + el)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1557:             0x2a, 0x85, 0x03, 0x02, 0x02, 0x16, 0x30, 0x08,",
          "1558:             0x06, 0x06, 0x2a, 0x85, 0x03, 0x02, 0x02, 0x17",
          "1559:         };",
          "1561:             return NULL;",
          "1565:     }",
          "1566: #ifndef OPENSSL_NO_HEARTBEATS",
          "1568:     if (SSL_IS_DTLS(s) && (s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED)) {",
          "1570:             return NULL;",
          "1571:         s2n(TLSEXT_TYPE_heartbeat, ret);",
          "1572:         s2n(1, ret);",
          "",
          "[Removed Lines]",
          "1560:         if (limit - ret < 36)",
          "1562:         memcpy(ret, cryptopro_ext, 36);",
          "1563:         ret += 36;",
          "1569:         if ((limit - ret - 4 - 1) < 0)",
          "",
          "[Added Lines]",
          "1657:         if (ret >= limit || (size_t)(limit - ret) < sizeof(cryptopro_ext))",
          "1659:         memcpy(ret, cryptopro_ext, sizeof(cryptopro_ext));",
          "1660:         ret += sizeof(cryptopro_ext);",
          "1671:         if (ret >= limit || limit - ret < 5)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1595:                                               s->",
          "1596:                                               ctx->next_protos_advertised_cb_arg);",
          "1597:         if (r == SSL_TLSEXT_ERR_OK) {",
          "1599:                 return NULL;",
          "1600:             s2n(TLSEXT_TYPE_next_proto_neg, ret);",
          "1601:             s2n(npalen, ret);",
          "",
          "[Removed Lines]",
          "1598:             if ((long)(limit - ret - 4 - npalen) < 0)",
          "",
          "[Added Lines]",
          "1705:             if (ret >= limit || limit - ret < 4 + npalen)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1618:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
          "1619:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "1620:         else {",
          "1621:             s2n(TLSEXT_TYPE_encrypt_then_mac, ret);",
          "1622:             s2n(0, ret);",
          "1623:         }",
          "1624:     }",
          "1625:     if (s->s3->flags & TLS1_FLAGS_RECEIVED_EXTMS) {",
          "1626:         s2n(TLSEXT_TYPE_extended_master_secret, ret);",
          "1627:         s2n(0, ret);",
          "1628:     }",
          "1630:     if (s->s3->alpn_selected != NULL) {",
          "1631:         const unsigned char *selected = s->s3->alpn_selected;",
          "1635:             return NULL;",
          "1636:         s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret);",
          "1637:         s2n(3 + len, ret);",
          "",
          "[Removed Lines]",
          "1632:         unsigned int len = s->s3->alpn_selected_len;",
          "1634:         if ((long)(limit - ret - 4 - 2 - 1 - len) < 0)",
          "",
          "[Added Lines]",
          "1732:             if (ret >= limit || limit - ret < 4)",
          "1733:                 return NULL;",
          "1743:         if (ret >= limit || limit - ret < 4)",
          "1744:             return NULL;",
          "1751:         size_t len = s->s3->alpn_selected_len;",
          "1760:         if (ret >= limit || (size_t)(limit - ret) < 7 + len)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07cd2f84d1480ca714bc14233b3c023ba9874e9d",
      "candidate_info": {
        "commit_hash": "07cd2f84d1480ca714bc14233b3c023ba9874e9d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/07cd2f84d1480ca714bc14233b3c023ba9874e9d",
        "files": [
          "apps/s_client.c"
        ],
        "message": "s_client: Better response success check for CONNECT\n\nInstead of looking for \"200\" and \"established\" (and failing all other\n2xx responses or \"Established\"), let's look for a line that's not a\nheader (i.e. doesn't contain a ':') and where the first space is\nfollowed by a '2'.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1664)\n(cherry picked from commit ec2a0e60652c0e61e90dde367756c5d92cd882d3)",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2001:         break;",
          "2002:     case PROTO_CONNECT:",
          "2003:         {",
          "2005:             BIO *fbio = BIO_new(BIO_f_buffer());",
          "2007:             BIO_push(fbio, sbio);",
          "2008:             BIO_printf(fbio, \"CONNECT %s HTTP/1.0\\r\\n\\r\\n\", connectstr);",
          "2009:             (void)BIO_flush(fbio);",
          "2017:             (void)BIO_flush(fbio);",
          "2018:             BIO_pop(fbio);",
          "2019:             BIO_free(fbio);",
          "2022:                 goto shut;",
          "2023:             }",
          "2024:         }",
          "",
          "[Removed Lines]",
          "2004:             int foundit = 0;",
          "2011:             do {",
          "2012:                 mbuf_len = BIO_gets(fbio, mbuf, BUFSIZZ);",
          "2013:                 if (strstr(mbuf, \"200\") != NULL",
          "2014:                     && strstr(mbuf, \"established\") != NULL)",
          "2015:                     foundit++;",
          "2016:             } while (mbuf_len > 3 && foundit == 0);",
          "2020:             if (!foundit) {",
          "2021:                 BIO_printf(bio_err, \"%s: HTTP CONNECT failed\\n\", prog);",
          "",
          "[Added Lines]",
          "2004:             enum {",
          "2007:                 success",
          "2008:             } foundit = error_connect;",
          "2020:             mbuf_len = BIO_gets(fbio, mbuf, BUFSIZZ);",
          "2021:             if (mbuf[8] != ' ') {",
          "2022:                 BIO_printf(bio_err,",
          "2023:                            \"%s: HTTP CONNECT failed, incorrect response \"",
          "2024:                            \"from proxy\\n\", prog);",
          "2025:                 foundit = error_proto;",
          "2026:             } else if (mbuf[9] != '2') {",
          "2027:                 BIO_printf(bio_err, \"%s: HTTP CONNECT failed: %s \", prog,",
          "2028:                            &mbuf[9]);",
          "2029:             } else {",
          "2030:                 foundit = success;",
          "2031:             }",
          "2032:             if (foundit != error_proto) {",
          "2034:                 do {",
          "2035:                     mbuf_len = BIO_gets(fbio, mbuf, BUFSIZZ);",
          "2036:                 } while (mbuf_len > 2);",
          "2037:             }",
          "2041:             if (foundit != success) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7409b0aae569b5ba4476076fbea3226d606c50ba",
      "candidate_info": {
        "commit_hash": "7409b0aae569b5ba4476076fbea3226d606c50ba",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7409b0aae569b5ba4476076fbea3226d606c50ba",
        "files": [
          "crypto/ocsp/ocsp_srv.c",
          "doc/crypto/OCSP_response_status.pod",
          "include/openssl/ocsp.h",
          "util/libcrypto.num"
        ],
        "message": "Add OCSP_RESPID_match()\n\nAdd a function for testing whether a given OCSP_RESPID matches with a\ncertificate.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/ocsp/ocsp_srv.c||crypto/ocsp/ocsp_srv.c",
          "include/openssl/ocsp.h||include/openssl/ocsp.h",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ocsp/ocsp_srv.c||crypto/ocsp/ocsp_srv.c": [
          "File: crypto/ocsp/ocsp_srv.c -> crypto/ocsp/ocsp_srv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     if (byKey == NULL)",
          "240:         return 0;",
          "243:         ASN1_OCTET_STRING_free(byKey);",
          "244:         return 0;",
          "245:     }",
          "",
          "[Removed Lines]",
          "242:     if (!(ASN1_OCTET_STRING_set(respid->value.byKey, md, SHA_DIGEST_LENGTH))) {",
          "",
          "[Added Lines]",
          "242:     if (!(ASN1_OCTET_STRING_set(byKey, md, SHA_DIGEST_LENGTH))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:     return 1;",
          "251: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: int OCSP_RESPID_match(OCSP_RESPID *respid, X509 *cert)",
          "254: {",
          "255:     if (respid->type == V_OCSP_RESPID_KEY) {",
          "256:         unsigned char md[SHA_DIGEST_LENGTH];",
          "258:         if (respid->value.byKey == NULL)",
          "259:             return 0;",
          "262:         if (!X509_pubkey_digest(cert, EVP_sha1(), md, NULL))",
          "263:             return 0;",
          "265:         return (ASN1_STRING_length(respid->value.byKey) == SHA_DIGEST_LENGTH)",
          "266:             && (memcmp(ASN1_STRING_get0_data(respid->value.byKey), md,",
          "267:                        SHA_DIGEST_LENGTH) == 0);",
          "268:     } else if(respid->type == V_OCSP_RESPID_NAME) {",
          "269:         if (respid->value.byName == NULL)",
          "270:             return 0;",
          "272:         return X509_NAME_cmp(respid->value.byName,",
          "273:                              X509_get_subject_name(cert)) == 0;",
          "274:     }",
          "276:     return 0;",
          "277: }",
          "",
          "---------------"
        ],
        "include/openssl/ocsp.h||include/openssl/ocsp.h": [
          "File: include/openssl/ocsp.h -> include/openssl/ocsp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:                     STACK_OF(X509) *certs, unsigned long flags);",
          "262: int OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert);",
          "263: int OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert);",
          "265: X509_EXTENSION *OCSP_crlID_new(const char *url, long *n, char *tim);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: int OCSP_RESPID_match(OCSP_RESPID *respid, X509 *cert);",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4205: ECPARAMETERS_new                        4156 1_1_0 EXIST::FUNCTION:EC",
          "4206: OCSP_RESPID_set_by_name                 4157 1_1_0a EXIST::FUNCTION:OCSP",
          "4207: OCSP_RESPID_set_by_key                  4158 1_1_0a EXIST::FUNCTION:OCSP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4208: OCSP_RESPID_match                       4159 1_1_0a EXIST::FUNCTION:OCSP",
          "",
          "---------------"
        ]
      }
    }
  ]
}