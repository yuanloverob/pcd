{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91960aa53ff5b08f28b9edb627d8a1b62231e125",
      "candidate_info": {
        "commit_hash": "91960aa53ff5b08f28b9edb627d8a1b62231e125",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91960aa53ff5b08f28b9edb627d8a1b62231e125",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Make sure variable declarations are at start of scope even when SQLITE_ENABLE_SNAPSHOT is used.\n\nFossilOrigin-Name: a77ceaf6ba934b1d73c90b8980191a65d02ad6ce1e11e6baf573b3a132685545",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 56e5063c326ffbfd3e3cb6f2b05718412aca2cb183274bfe11f5666effdd04b9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2846: int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){",
          "2850:   assert( pWal->ckptLock==0 );",
          "2852: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2855:   if( pSnapshot ){",
          "2856:     if( memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "2857:       bChanged = 1;",
          "",
          "[Removed Lines]",
          "2853:   int bChanged = 0;",
          "2854:   WalIndexHdr *pSnapshot = pWal->pSnapshot;",
          "",
          "[Added Lines]",
          "2849: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2850:   int bChanged = 0;",
          "2851:   WalIndexHdr *pSnapshot = pWal->pSnapshot;",
          "2852: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34da2a4806336001082c522b833fac4fb8a814e7",
      "candidate_info": {
        "commit_hash": "34da2a4806336001082c522b833fac4fb8a814e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/34da2a4806336001082c522b833fac4fb8a814e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Convert an ALWAYS() into an assert() with an extra error term. Dbsqlfuzz find, with test case in TH3.\n\nFossilOrigin-Name: b473ad35c5ce355853e1805a5c0658bda1500775f22f59c6b6759ae990e65aca",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 401c9d30e06191d938503aae024bc453d960fa64dc812ed86c661f94533247fd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:         idxCols |= cMask;",
          "802:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "803:         pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "805:         n++;",
          "806:       }",
          "807:     }",
          "",
          "[Removed Lines]",
          "804:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0af6ddd3ca07064f529b3b1349a76f466fed1d63",
      "candidate_info": {
        "commit_hash": "0af6ddd3ca07064f529b3b1349a76f466fed1d63",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0af6ddd3ca07064f529b3b1349a76f466fed1d63",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbemem.c"
        ],
        "message": "Fix the OP_Cast operator so that when casting to TEXT, it always leaves the result in the encoding of the database.  Ticket [0911b5d161b039c6]. Test cases in TH3.\n\nFossilOrigin-Name: f347744e0d576f0250c29259cca755e57afded8956224114c01603c1bca5b3a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c44c73499154bc57634a54cb743642d0aacc93a1336fbb8bb3eb5dbbf616357",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1866:   pIn1 = &aMem[pOp->p1];",
          "1867:   memAboutToChange(p, pIn1);",
          "1868:   rc = ExpandBlob(pIn1);",
          "1871:   if( rc ) goto abort_due_to_error;",
          "1872:   REGISTER_TRACE(pOp->p1, pIn1);",
          "1873:   break;",
          "1874: }",
          "",
          "[Removed Lines]",
          "1869:   sqlite3VdbeMemCast(pIn1, pOp->p2, encoding);",
          "1870:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "",
          "[Added Lines]",
          "1870:   rc = sqlite3VdbeMemCast(pIn1, pOp->p2, encoding);",
          "1871:   if( rc ) goto abort_due_to_error;",
          "1872:   UPDATE_MAX_BLOBSIZE(pIn1);",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "529: void sqlite3VdbeIntegerAffinity(Mem*);",
          "530: int sqlite3VdbeMemRealify(Mem*);",
          "531: int sqlite3VdbeMemNumerify(Mem*);",
          "533: int sqlite3VdbeMemFromBtree(BtCursor*,u32,u32,Mem*);",
          "534: void sqlite3VdbeMemRelease(Mem *p);",
          "535: int sqlite3VdbeMemFinalize(Mem*, FuncDef*);",
          "",
          "[Removed Lines]",
          "532: void sqlite3VdbeMemCast(Mem*,u8,u8);",
          "",
          "[Added Lines]",
          "532: int sqlite3VdbeMemCast(Mem*,u8,u8);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:   switch( aff ){",
          "754:       if( (pMem->flags & MEM_Blob)==0 ){",
          "",
          "[Removed Lines]",
          "750: void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){",
          "751:   if( pMem->flags & MEM_Null ) return;",
          "",
          "[Added Lines]",
          "750: int sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){",
          "751:   if( pMem->flags & MEM_Null ) return SQLITE_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779:       sqlite3ValueApplyAffinity(pMem, SQLITE_AFF_TEXT, encoding);",
          "780:       assert( pMem->flags & MEM_Str || pMem->db->mallocFailed );",
          "781:       pMem->flags &= ~(MEM_Int|MEM_Real|MEM_IntReal|MEM_Blob|MEM_Zero);",
          "783:     }",
          "784:   }",
          "785: }",
          "",
          "[Removed Lines]",
          "782:       break;",
          "",
          "[Added Lines]",
          "782:       return sqlite3VdbeChangeEncoding(pMem, encoding);",
          "785:   return SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85c47546971940dae84b22a77254a4a42cbdbc98",
      "candidate_info": {
        "commit_hash": "85c47546971940dae84b22a77254a4a42cbdbc98",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/85c47546971940dae84b22a77254a4a42cbdbc98",
        "files": [
          "ext/misc/ieee754.c",
          "manifest",
          "manifest.uuid",
          "test/ieee754.test"
        ],
        "message": "Add the ieee754_to_blob() and ieee754_from_blob() functions.  Fix the handling of subnormal forms in the two-argument version of ieee754().\n\nFossilOrigin-Name: c78cbf2e86850cc6882d3f0bd5415f6e731c3c675ffe77bb343682c619cb8cd9",
        "before_after_code_files": [
          "ext/misc/ieee754.c||ext/misc/ieee754.c",
          "manifest.uuid||manifest.uuid",
          "test/ieee754.test||test/ieee754.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/ieee754.c||ext/misc/ieee754.c": [
          "File: ext/misc/ieee754.c -> ext/misc/ieee754.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:       isNeg = 1;",
          "161:       m = -m;",
          "162:       if( m<0 ) return;",
          "164:       sqlite3_result_double(context, 0.0);",
          "165:       return;",
          "166:     }",
          "",
          "[Removed Lines]",
          "163:     }else if( m==0 && e>1000 && e<1000 ){",
          "",
          "[Added Lines]",
          "168:     }else if( m==0 && e>-1000 && e<1000 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:       e--;",
          "174:     }",
          "175:     e += 1075;",
          "178:     a = m & ((((sqlite3_int64)1)<<52)-1);",
          "179:     a |= e<<52;",
          "180:     if( isNeg ) a |= ((sqlite3_uint64)1)<<63;",
          "",
          "[Removed Lines]",
          "176:     if( e<0 ) e = m = 0;",
          "177:     if( e>0x7ff ) e = 0x7ff;",
          "",
          "[Added Lines]",
          "181:     if( e<=0 ){",
          "183:       m >>= 1-e;",
          "184:       e = 0;",
          "185:     }else if( e>0x7ff ){",
          "186:       e = 0x7ff;",
          "187:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:   }",
          "184: }",
          "187: #ifdef _WIN32",
          "188: __declspec(dllexport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: static void ieee754func_from_blob(",
          "200:   sqlite3_context *context,",
          "201:   int argc,",
          "202:   sqlite3_value **argv",
          "203: ){",
          "204:   if( sqlite3_value_type(argv[0])==SQLITE_BLOB",
          "205:    && sqlite3_value_bytes(argv[0])==sizeof(double)",
          "206:   ){",
          "207:     double r;",
          "208:     const unsigned char *x = sqlite3_value_blob(argv[0]);",
          "209:     int i;",
          "210:     sqlite3_uint64 v = 0;",
          "211:     for(i=0; i<sizeof(r); i++){",
          "212:       v = (v<<8) | x[i];",
          "213:     }",
          "214:     memcpy(&r, &v, sizeof(r));",
          "215:     sqlite3_result_double(context, r);",
          "216:   }",
          "217: }",
          "218: static void ieee754func_to_blob(",
          "219:   sqlite3_context *context,",
          "220:   int argc,",
          "221:   sqlite3_value **argv",
          "222: ){",
          "223:   if( sqlite3_value_type(argv[0])==SQLITE_FLOAT",
          "224:    || sqlite3_value_type(argv[0])==SQLITE_INTEGER",
          "225:   ){",
          "226:     double r = sqlite3_value_double(argv[0]);",
          "227:     sqlite3_uint64 v;",
          "228:     unsigned char a[sizeof(r)];",
          "229:     int i;",
          "230:     memcpy(&v, &r, sizeof(r));",
          "231:     for(i=1; i<=sizeof(r); i++){",
          "232:       a[sizeof(r)-i] = v&0xff;",
          "233:       v >>= 8;",
          "234:     }",
          "235:     sqlite3_result_blob(context, a, sizeof(r), SQLITE_TRANSIENT);",
          "236:   }",
          "237: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:     char *zFName;",
          "197:     int nArg;",
          "198:     int iAux;",
          "199:   } aFunc[] = {",
          "204:   };",
          "205:   int i;",
          "206:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "200:     { \"ieee754\",          1,   0 },",
          "201:     { \"ieee754\",          2,   0 },",
          "202:     { \"ieee754_mantissa\", 1,   1 },",
          "203:     { \"ieee754_exponent\", 1,   2 },",
          "",
          "[Added Lines]",
          "252:     void (*xFunc)(sqlite3_context*,int,sqlite3_value**);",
          "254:     { \"ieee754\",           1,   0, ieee754func },",
          "255:     { \"ieee754\",           2,   0, ieee754func },",
          "256:     { \"ieee754_mantissa\",  1,   1, ieee754func },",
          "257:     { \"ieee754_exponent\",  1,   2, ieee754func },",
          "258:     { \"ieee754_to_blob\",   1,   0, ieee754func_to_blob },",
          "259:     { \"ieee754_from_blob\", 1,   0, ieee754func_from_blob },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210:     rc = sqlite3_create_function(db, aFunc[i].zFName, aFunc[i].nArg,",
          "211:                                SQLITE_UTF8|SQLITE_INNOCUOUS,",
          "212:                                (void*)&aFunc[i].iAux,",
          "214:   }",
          "215:   return rc;",
          "216: }",
          "",
          "[Removed Lines]",
          "213:                                ieee754func, 0, 0);",
          "",
          "[Added Lines]",
          "270:                                aFunc[i].xFunc, 0, 0);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc888878ea8d5bc754c69de523819d32d6d9853857e31d7287f9dbfd723428db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/ieee754.test||test/ieee754.test": [
          "File: test/ieee754.test -> test/ieee754.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:    3       0.5                            1,-1",
          "24:    4       1.5                            3,-1",
          "25:    5       0.0                            0,-1075",
          "28:    8       2.2250738585072014e-308        1,-1022",
          "29: } {",
          "30:   do_test ieee754-100-$id-1 {",
          "",
          "[Removed Lines]",
          "26:    6       4.9406564584124654e-324        4503599627370497,-1075",
          "27:    7       2.2250738585072009e-308        9007199254740991,-1075",
          "",
          "[Added Lines]",
          "26:    6       4.9406564584124654e-324        1,-1074",
          "27:    7       2.2250738585072009e-308        4503599627370495,-1074",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17d2d592fb2af9f688b890079b5cc39d37efe8ab",
      "candidate_info": {
        "commit_hash": "17d2d592fb2af9f688b890079b5cc39d37efe8ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/17d2d592fb2af9f688b890079b5cc39d37efe8ab",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/pragma.c",
          "test/pragma.test"
        ],
        "message": "Add the ability to do a PRAGMA integrity_check (or quick_check) on a single table by specifying the table name as the argument.\n\nFossilOrigin-Name: 65dd321432e8f80bc1cb11be8ca06656b41ac997a74a5eb271c797cf0fbb764e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/pragma.c||src/pragma.c",
          "test/pragma.test||test/pragma.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9679c0c61131f0e986551701a64191da0ee0f50880eaa57fe4bf520e3fecf634",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10135:   u64 savedDbFlags = pBt->db->flags;",
          "10136:   char zErr[100];",
          "10137:   VVA_ONLY( int nRef );",
          "10139:   sqlite3BtreeEnter(p);",
          "10140:   assert( p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10149:   assert( nRoot>0 );",
          "10152:   if( aRoot[0]==0 ){",
          "10153:     assert( nRoot>1 );",
          "10154:     bPartial = 1;",
          "10155:     if( aRoot[1]!=1 ) bCkFreelist = 0;",
          "10156:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10184: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "10191:       checkAppendMsg(&sCheck,",
          "10194:       );",
          "10195:     }",
          "10200:   }",
          "10201: #endif",
          "10202:   testcase( pBt->db->flags & SQLITE_CellSizeCk );",
          "",
          "[Removed Lines]",
          "10177:   sCheck.zPfx = \"Main freelist: \";",
          "10178:   checkList(&sCheck, 1, get4byte(&pBt->pPage1->aData[32]),",
          "10179:             get4byte(&pBt->pPage1->aData[36]));",
          "10180:   sCheck.zPfx = 0;",
          "10185:   if( pBt->autoVacuum ){",
          "10186:     int mx = 0;",
          "10187:     int mxInHdr;",
          "10188:     for(i=0; (int)i<nRoot; i++) if( mx<aRoot[i] ) mx = aRoot[i];",
          "10189:     mxInHdr = get4byte(&pBt->pPage1->aData[52]);",
          "10190:     if( mx!=mxInHdr ){",
          "10192:         \"max rootpage (%d) disagrees with header (%d)\",",
          "10193:         mx, mxInHdr",
          "10196:   }else if( get4byte(&pBt->pPage1->aData[64])!=0 ){",
          "10197:     checkAppendMsg(&sCheck,",
          "10198:       \"incremental_vacuum enabled with a max rootpage of zero\"",
          "10199:     );",
          "",
          "[Added Lines]",
          "10196:   if( bCkFreelist ){",
          "10197:     sCheck.zPfx = \"Main freelist: \";",
          "10198:     checkList(&sCheck, 1, get4byte(&pBt->pPage1->aData[32]),",
          "10199:               get4byte(&pBt->pPage1->aData[36]));",
          "10200:     sCheck.zPfx = 0;",
          "10201:   }",
          "10206:   if( !bPartial ){",
          "10207:     if( pBt->autoVacuum ){",
          "10208:       int mx = 0;",
          "10209:       int mxInHdr;",
          "10210:       for(i=0; (int)i<nRoot; i++) if( mx<aRoot[i] ) mx = aRoot[i];",
          "10211:       mxInHdr = get4byte(&pBt->pPage1->aData[52]);",
          "10212:       if( mx!=mxInHdr ){",
          "10213:         checkAppendMsg(&sCheck,",
          "10214:           \"max rootpage (%d) disagrees with header (%d)\",",
          "10215:           mx, mxInHdr",
          "10216:         );",
          "10217:       }",
          "10218:     }else if( get4byte(&pBt->pPage1->aData[64])!=0 ){",
          "10220:         \"incremental_vacuum enabled with a max rootpage of zero\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10205:     i64 notUsed;",
          "10206:     if( aRoot[i]==0 ) continue;",
          "10207: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "10209:       checkPtrmap(&sCheck, aRoot[i], PTRMAP_ROOTPAGE, 0);",
          "10210:     }",
          "10211: #endif",
          "",
          "[Removed Lines]",
          "10208:     if( pBt->autoVacuum && aRoot[i]>1 ){",
          "",
          "[Added Lines]",
          "10231:     if( pBt->autoVacuum && aRoot[i]>1 && !bPartial ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10219: #ifdef SQLITE_OMIT_AUTOVACUUM",
          "10223: #else",
          "10234:     }",
          "10235: #endif",
          "10236:   }",
          "",
          "[Removed Lines]",
          "10218:   for(i=1; i<=sCheck.nPage && sCheck.mxErr; i++){",
          "10220:     if( getPageReferenced(&sCheck, i)==0 ){",
          "10221:       checkAppendMsg(&sCheck, \"Page %d is never used\", i);",
          "10222:     }",
          "10227:     if( getPageReferenced(&sCheck, i)==0 &&",
          "10228:        (PTRMAP_PAGENO(pBt, i)!=i || !pBt->autoVacuum) ){",
          "10229:       checkAppendMsg(&sCheck, \"Page %d is never used\", i);",
          "10230:     }",
          "10231:     if( getPageReferenced(&sCheck, i)!=0 &&",
          "10232:        (PTRMAP_PAGENO(pBt, i)==i && pBt->autoVacuum) ){",
          "10233:       checkAppendMsg(&sCheck, \"Pointer map page %d is referenced\", i);",
          "",
          "[Added Lines]",
          "10241:   if( !bPartial ){",
          "10242:     for(i=1; i<=sCheck.nPage && sCheck.mxErr; i++){",
          "10244:       if( getPageReferenced(&sCheck, i)==0 ){",
          "10245:         checkAppendMsg(&sCheck, \"Page %d is never used\", i);",
          "10246:       }",
          "10251:       if( getPageReferenced(&sCheck, i)==0 &&",
          "10252:          (PTRMAP_PAGENO(pBt, i)!=i || !pBt->autoVacuum) ){",
          "10253:         checkAppendMsg(&sCheck, \"Page %d is never used\", i);",
          "10254:       }",
          "10255:       if( getPageReferenced(&sCheck, i)!=0 &&",
          "10256:          (PTRMAP_PAGENO(pBt, i)==i && pBt->autoVacuum) ){",
          "10257:         checkAppendMsg(&sCheck, \"Pointer map page %d is referenced\", i);",
          "10258:       }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1546:     mxErr = SQLITE_INTEGRITY_CHECK_ERROR_MAX;",
          "1547:     if( zRight ){",
          "1551:       }",
          "1552:     }",
          "",
          "[Removed Lines]",
          "1548:       sqlite3GetInt32(zRight, &mxErr);",
          "1549:       if( mxErr<=0 ){",
          "1550:         mxErr = SQLITE_INTEGRITY_CHECK_ERROR_MAX;",
          "",
          "[Added Lines]",
          "1561:       if( sqlite3GetInt32(zRight, &mxErr) ){",
          "1562:         if( mxErr<=0 ){",
          "1563:           mxErr = SQLITE_INTEGRITY_CHECK_ERROR_MAX;",
          "1564:         }",
          "1565:       }else{",
          "1566:         pObjTab = sqlite3LocateTable(pParse, 0, zRight,",
          "1567:                       iDb>=0 ? db->aDb[iDb].zDbSName : 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1579:         if( HasRowid(pTab) ) cnt++;",
          "1580:         for(nIdx=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, nIdx++){ cnt++; }",
          "1581:         if( nIdx>mxIdx ) mxIdx = nIdx;",
          "1582:       }",
          "1583:       aRoot = sqlite3DbMallocRawNN(db, sizeof(int)*(cnt+1));",
          "1584:       if( aRoot==0 ) break;",
          "1586:         Table *pTab = sqliteHashData(x);",
          "1587:         Index *pIdx;",
          "1588:         if( HasRowid(pTab) ) aRoot[++cnt] = pTab->tnum;",
          "1589:         for(pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext){",
          "1590:           aRoot[++cnt] = pIdx->tnum;",
          "",
          "[Removed Lines]",
          "1585:       for(cnt=0, x=sqliteHashFirst(pTbls); x; x=sqliteHashNext(x)){",
          "",
          "[Added Lines]",
          "1596:         if( pObjTab && pObjTab!=pTab ) continue;",
          "1601:       if( cnt==0 ) continue;",
          "1602:       if( pObjTab ) cnt++;",
          "1605:       cnt = 0;",
          "1606:       if( pObjTab ) aRoot[++cnt] = 0;",
          "1607:       for(x=sqliteHashFirst(pTbls); x; x=sqliteHashNext(x)){",
          "1610:         if( pObjTab && pObjTab!=pTab ) continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1618:         int r1 = -1;",
          "1621:         pPk = HasRowid(pTab) ? 0 : sqlite3PrimaryKeyIndex(pTab);",
          "1622:         sqlite3OpenTableAndIndices(pParse, pTab, OP_OpenRead, 0,",
          "1623:                                    1, 0, &iDataCur, &iIdxCur);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1644:         if( pObjTab && pObjTab!=pTab ) continue;",
          "",
          "---------------"
        ],
        "test/pragma.test||test/pragma.test": [
          "File: test/pragma.test -> test/pragma.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:         PRAGMA integrity_check=4",
          "388:       }",
          "389:     } {{row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2} {row 1 missing from index i2}}",
          "395:     do_test pragma-3.7 {",
          "396:       execsql {",
          "397:         PRAGMA integrity_check=0",
          "",
          "[Removed Lines]",
          "390:     do_test pragma-3.6 {",
          "391:       execsql {",
          "392:         PRAGMA integrity_check=xyz",
          "393:       }",
          "394:     } {{row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2} {row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2}}",
          "",
          "[Added Lines]",
          "390:     do_catchsql_test pragma-3.6 {",
          "391:       PRAGMA integrity_check=xyz",
          "392:     } {1 {no such table: xyz}}",
          "393:     do_catchsql_test pragma-3.6b {",
          "394:       PRAGMA integrity_check=t2",
          "395:     } {0 {{row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2}}}",
          "396:     do_catchsql_test pragma-3.6c {",
          "397:       PRAGMA integrity_check=sqlite_schema",
          "398:     } {0 ok}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:     do_test pragma-3.8.2 {",
          "424:       execsql {PRAGMA QUICK_CHECK}",
          "425:     } {ok}",
          "427:       execsql {",
          "428:         ATTACH 'testerr.db' AS t2;",
          "429:         PRAGMA integrity_check",
          "",
          "[Removed Lines]",
          "426:     do_test pragma-3.9 {",
          "",
          "[Added Lines]",
          "430:     do_test pragma-3.9a {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "432: Page 4 is never used",
          "433: Page 5 is never used",
          "434: Page 6 is never used} {row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2}}",
          "435:     do_test pragma-3.10 {",
          "436:       execsql {",
          "437:         PRAGMA integrity_check=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:     do_execsql_test pragma-3.9b {",
          "440:       PRAGMA t2.integrity_check=t2;",
          "441:     } {{row 1 missing from index i2} {row 2 missing from index i2} {wrong # of entries in index i2}}",
          "442:     do_execsql_test pragma-3.9c {",
          "443:       PRAGMA t2.integrity_check=sqlite_schema;",
          "444:     } {ok}",
          "",
          "---------------"
        ]
      }
    }
  ]
}