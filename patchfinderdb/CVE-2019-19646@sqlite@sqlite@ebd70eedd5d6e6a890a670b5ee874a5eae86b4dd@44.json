{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "192418bd499cb1dbd358142cbeb6b2295ec8f060",
      "candidate_info": {
        "commit_hash": "192418bd499cb1dbd358142cbeb6b2295ec8f060",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/192418bd499cb1dbd358142cbeb6b2295ec8f060",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "test/minmax4.test"
        ],
        "message": "Fix a problem with queries of the form \"SELECT min(<expr>) ... WHERE <expr>=?\" where there is an index on <expr>. Fix for [71e183ca].\n\nFossilOrigin-Name: d465c3eef458c851d97eea6e4117247d9c69386b276168080dbff7bb64070c93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "test/minmax4.test||test/minmax4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fd598e475d353363e19adc27a671170f11ae9f6d8cad58cb2303fb2ad8ac6bec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3862:             distinctColumns = 1;",
          "3863:           }",
          "3864:           obSat |= MASKBIT(i);",
          "3865:         }else{",
          "3867:           if( j==0 || j<nKeyCol ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3865:           if( (wctrlFlags & WHERE_ORDERBY_MIN) && j==pLoop->u.btree.nEq ){",
          "3866:             pLoop->wsFlags |= WHERE_MIN_ORDERED;",
          "3867:           }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1567:          || (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0 );",
          "1572:       assert( pLoop->nSkip==0 );",
          "1573:       bSeekPastNull = 1;",
          "1574:       nExtraReg = 1;",
          "",
          "[Removed Lines]",
          "1565:     assert( pWInfo->pOrderBy==0",
          "1566:          || pWInfo->pOrderBy->nExpr==1",
          "1568:     if( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)!=0",
          "1569:      && pWInfo->nOBSat>0",
          "1570:      && (pIdx->nKeyCol>nEq)",
          "1571:     ){",
          "",
          "[Added Lines]",
          "1565:     assert( (pWInfo->pOrderBy!=0 && pWInfo->pOrderBy->nExpr==1)",
          "1567:     if( pLoop->wsFlags & WHERE_MIN_ORDERED ){",
          "1568:       assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN) );",
          "1569:       assert( pWInfo->nOBSat );",
          "1570:       assert( pIdx->nColumn>nEq );",
          "",
          "---------------"
        ],
        "test/minmax4.test||test/minmax4.test": [
          "File: test/minmax4.test -> test/minmax4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   } {2 2}",
          "179: }",
          "181: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: #-------------------------------------------------------------------------",
          "182: reset_db",
          "183: do_execsql_test 4.0 {",
          "184:   CREATE TABLE t0 (c0, c1);",
          "185:   CREATE INDEX i0 ON t0(c1, c1 + 1 DESC);",
          "186:   INSERT INTO t0(c0) VALUES (1);",
          "187: }",
          "188: do_execsql_test 4.1 {",
          "189:   SELECT MIN(t0.c1), t0.c0 FROM t0 WHERE t0.c1 ISNULL;",
          "190: } {{} 1}",
          "192: #-------------------------------------------------------------------------",
          "193: reset_db",
          "194: do_execsql_test 5.0 {",
          "195:   CREATE TABLE t1 (a, b);",
          "196:   INSERT INTO t1 VALUES(123, NULL);",
          "197:   CREATE INDEX i1 ON t1(a, b DESC);",
          "198: }",
          "199: do_execsql_test 5.1 {",
          "200:   SELECT MIN(a) FROM t1 WHERE a=123;",
          "201: } {123}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ba7ab0d2524748479376e70043be9fc4cfbeccc",
      "candidate_info": {
        "commit_hash": "6ba7ab0d2524748479376e70043be9fc4cfbeccc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ba7ab0d2524748479376e70043be9fc4cfbeccc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/walker.c",
          "src/window.c",
          "test/filter1.test",
          "test/filter2.tcl",
          "test/filter2.test"
        ],
        "message": "Experimental implementation of FILTER clause for aggregate functions.\n\nFossilOrigin-Name: 1f1ae2d6ac8dcbb62e5aa3dc17bc67d559cb565fc0d0a8c00a596075d35f8130",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/walker.c||src/walker.c",
          "src/window.c||src/window.c",
          "test/filter1.test||test/filter1.test",
          "test/filter2.tcl||test/filter2.tcl",
          "test/filter2.test||test/filter2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eab4297577e4d325fed4757867fc77860de7448998d86f098c8a50272e17d35e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:   assert( !ExprHasProperty(p, EP_WinFunc) || p->y.pWin!=0 || db->mallocFailed );",
          "1029:   assert( p->op!=TK_FUNCTION || ExprHasProperty(p, EP_TokenOnly|EP_Reduced)",
          "1031: #ifdef SQLITE_DEBUG",
          "1032:   if( ExprHasProperty(p, EP_Leaf) && !ExprHasProperty(p, EP_TokenOnly) ){",
          "1033:     assert( p->pLeft==0 );",
          "",
          "[Removed Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc) );",
          "",
          "[Added Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc|EP_Filter) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1046:     }else{",
          "1047:       sqlite3ExprListDelete(db, p->x.pList);",
          "1048:     }",
          "1049:     if( ExprHasProperty(p, EP_WinFunc) ){",
          "1051:       sqlite3WindowDelete(db, p->y.pWin);",
          "1052:     }",
          "1053:   }",
          "1054:   if( ExprHasProperty(p, EP_MemToken) ) sqlite3DbFree(db, p->u.zToken);",
          "1055:   if( !ExprHasProperty(p, EP_Static) ){",
          "",
          "[Removed Lines]",
          "1050:       assert( p->op==TK_FUNCTION );",
          "",
          "[Added Lines]",
          "1049: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1051:       assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1053:     }else if( ExprHasProperty(p, EP_Filter) ){",
          "1054:       assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1055:       sqlite3ExprDelete(db, p->y.pFilter);",
          "1057: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1264:     }",
          "1268:       zAlloc += dupedExprNodeSize(p, dupFlags);",
          "1269:       if( !ExprHasProperty(pNew, EP_TokenOnly|EP_Leaf) ){",
          "1270:         pNew->pLeft = p->pLeft ?",
          "",
          "[Removed Lines]",
          "1267:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc) ){",
          "",
          "[Added Lines]",
          "1272:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc|EP_Filter) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1277:         pNew->y.pWin = sqlite3WindowDup(db, pNew, p->y.pWin);",
          "1278:         assert( ExprHasProperty(pNew, EP_WinFunc) );",
          "1279:       }",
          "1281:       if( pzBuffer ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1285:       if( ExprHasProperty(p, EP_Filter) ){",
          "1286:         pNew->y.pFilter = sqlite3ExprDup(db, p->y.pFilter, 0);",
          "1287:         assert( ExprHasProperty(pNew, EP_Filter) );",
          "1288:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1334: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1337:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1338:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "1339:   }",
          "",
          "[Removed Lines]",
          "1335:   if( pExpr->op==TK_FUNCTION && pExpr->y.pWin!=0 ){",
          "1336:     assert( ExprHasProperty(pExpr, EP_WinFunc) );",
          "",
          "[Added Lines]",
          "1344:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1345:     assert( pExpr->y.pWin );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4862:     }else if( ALWAYS(pB->u.zToken!=0) && strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "4863:       return 2;",
          "4864:     }",
          "4865:   }",
          "4866:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "4867:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4874: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4875:     else if( pA->op==TK_AGG_FUNCTION ){",
          "4876:       assert( ExprHasProperty(pA, EP_WinFunc)==0 );",
          "4877:       if( sqlite3ExprCompare(pParse, pA->y.pFilter, pB->y.pFilter, iTab) ){",
          "4878:         return 2;",
          "4879:       }",
          "4880:     }",
          "4881: #endif",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036: %endif  SQLITE_OMIT_CAST",
          "1039: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP. {",
          "1040:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1041: }",
          "1042: expr(A) ::= id(X) LP STAR RP. {",
          "1043:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1044: }",
          "1046: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1048:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1050: }",
          "1052:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1054: }",
          "1055: %endif",
          "",
          "[Removed Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP over_clause(Z). {",
          "1049:   sqlite3WindowAttach(pParse, A, Z);",
          "1051: expr(A) ::= id(X) LP STAR RP over_clause(Z). {",
          "1053:   sqlite3WindowAttach(pParse, A, Z);",
          "",
          "[Added Lines]",
          "1039: %ifdef SQLITE_OMIT_WINDOWFUNC",
          "1046: %endif",
          "1049: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_opt(F) over_opt(Z). {",
          "1051:   sqlite3WindowAttach(pParse, A, F, Z);",
          "1053: expr(A) ::= id(X) LP STAR RP filter_opt(F) over_opt(Z). {",
          "1055:   sqlite3WindowAttach(pParse, A, F, Z);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1724: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1725: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1730:   A = Z;",
          "1731:   assert( A!=0 );",
          "1733: }",
          "1735:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1736:   if( A ){",
          "1737:     A->zName = sqlite3DbStrNDup(pParse->db, Z.z, Z.n);",
          "1741:   }",
          "1742: }",
          "",
          "[Removed Lines]",
          "1727: %type over_clause {Window*}",
          "1728: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1729: over_clause(A) ::= filter_opt(W) OVER LP window(Z) RP. {",
          "1732:   A->pFilter = W;",
          "1734: over_clause(A) ::= filter_opt(W) OVER nm(Z). {",
          "1738:     A->pFilter = W;",
          "1739:   }else{",
          "1740:     sqlite3ExprDelete(pParse->db, W);",
          "",
          "[Added Lines]",
          "1729: %type over_opt {Window*}",
          "1730: %destructor over_opt {sqlite3WindowDelete(pParse->db, $$);}",
          "1731: over_opt(A) ::= . { A=0; }",
          "1732: over_opt(A) ::= OVER LP window(Z) RP. {",
          "1736: over_opt(A) ::= OVER nm(Z). {",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "849:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "850:           pNC->nErr++;",
          "851:           is_agg = 0;",
          "852:         }",
          "853: #else",
          "854:         if( (is_agg && (pNC->ncFlags & NC_AllowAgg)==0) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_Filter) ){",
          "853:           sqlite3ErrorMsg(pParse,",
          "854:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "855:               nId, zId",
          "856:           );",
          "857:           pNC->nErr++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "883:       sqlite3WalkExprList(pWalker, pList);",
          "884:       if( is_agg ){",
          "885: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "887:           Select *pSel = pNC->pWinSelect;",
          "888:           if( IN_RENAME_OBJECT==0 ){",
          "889:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "[Removed Lines]",
          "886:         if( pExpr->y.pWin ){",
          "",
          "[Added Lines]",
          "892:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "904:           NameContext *pNC2 = pNC;",
          "905:           pExpr->op = TK_AGG_FUNCTION;",
          "906:           pExpr->op2 = 0;",
          "907:           while( pNC2 && !sqlite3FunctionUsesThisSrc(pExpr, pNC2->pSrcList) ){",
          "908:             pExpr->op2++;",
          "909:             pNC2 = pNC2->pNext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "913: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "914:           sqlite3WalkExpr(pWalker, pExpr->y.pFilter);",
          "915: #endif",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4407:   assert( *ppMinMax==0 );",
          "4408:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "4410:   zFunc = pFunc->u.zToken;",
          "4411:   if( sqlite3StrICmp(zFunc, \"min\")==0 ){",
          "4412:     eRet = WHERE_ORDERBY_MIN;",
          "",
          "[Removed Lines]",
          "4409:   if( pEList==0 || pEList->nExpr!=1 ) return eRet;",
          "",
          "[Added Lines]",
          "4409:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_Filter) ){",
          "4410:     return eRet;",
          "4411:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4453:   if( pExpr->op!=TK_AGG_FUNCTION ) return 0;",
          "4454:   if( NEVER(pAggInfo->nFunc==0) ) return 0;",
          "4455:   if( (pAggInfo->aFunc[0].pFunc->funcFlags&SQLITE_FUNC_COUNT)==0 ) return 0;",
          "4458:   return pTab;",
          "4459: }",
          "",
          "[Removed Lines]",
          "4456:   if( pExpr->flags&EP_Distinct ) return 0;",
          "",
          "[Added Lines]",
          "4458:   if( ExprHasProperty(pExpr, EP_Distinct|EP_Filter) ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5333:     int regAgg;",
          "5334:     ExprList *pList = pF->pExpr->x.pList;",
          "5335:     assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );",
          "5336:     if( pList ){",
          "5337:       nArg = pList->nExpr;",
          "5338:       regAgg = sqlite3GetTempRange(pParse, nArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5338:     if( ExprHasProperty(pF->pExpr, EP_Filter) ){",
          "5339:       Expr *pFilter = pF->pExpr->y.pFilter;",
          "5340:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5341:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5342:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5342:       regAgg = 0;",
          "5343:     }",
          "5344:     if( pF->iDistinct>=0 ){",
          "5348:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5345:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Added Lines]",
          "5352:       if( addrNext==0 ){",
          "5353:         addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5354:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6225:       minMaxFlag = WHERE_ORDERBY_NORMAL;",
          "6226:     }",
          "6227:     for(i=0; i<sAggInfo.nFunc; i++){",
          "6229:       sNC.ncFlags |= NC_InAggFunc;",
          "6231:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6232:     }",
          "6233:     sAggInfo.mxReg = pParse->nMem;",
          "",
          "[Removed Lines]",
          "6228:       assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );",
          "6230:       sqlite3ExprAnalyzeAggList(&sNC, sAggInfo.aFunc[i].pExpr->x.pList);",
          "",
          "[Added Lines]",
          "6237:       Expr *pExpr = sAggInfo.aFunc[i].pExpr;",
          "6238:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "6240:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6241: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6243:       sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "6244: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3602: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3603: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3604: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3606: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "3607: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3608: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "",
          "[Removed Lines]",
          "3605: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "",
          "[Added Lines]",
          "3607: void sqlite3WindowAttach(Parse*, Expr*, Expr*, Window*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3617: #else",
          "3618: # define sqlite3WindowDelete(a,b)",
          "3619: # define sqlite3WindowFunctions()",
          "3621: #endif",
          "",
          "[Removed Lines]",
          "3620: # define sqlite3WindowAttach(a,b,c)",
          "",
          "[Added Lines]",
          "3622: # define sqlite3WindowAttach(a,b,c,d)",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "76:       }",
          "77: #endif",
          "78:     }",
          "79:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:       if( ExprHasProperty(pExpr, EP_Filter) ){",
          "78:         if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "79:       }",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:   if( p ){",
          "1183:     assert( p->op==TK_FUNCTION );",
          "1188:       p->y.pWin = pWin;",
          "1189:       ExprSetProperty(p, EP_WinFunc);",
          "1190:       pWin->pOwner = p;",
          "",
          "[Removed Lines]",
          "1181: void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){",
          "1187:     if( ALWAYS(pWin) ){",
          "",
          "[Added Lines]",
          "1181: void sqlite3WindowAttach(Parse *pParse, Expr *p, Expr *pFilter, Window *pWin){",
          "1184:     if( pWin ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1192:         sqlite3ErrorMsg(pParse,",
          "1193:            \"DISTINCT is not supported for window functions\");",
          "1194:       }",
          "1195:     }",
          "1196:   }else{",
          "1197:     sqlite3WindowDelete(pParse->db, pWin);",
          "1198:   }",
          "1199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1192:       pWin->pFilter = pFilter;",
          "1193:     }else if( pFilter ){",
          "1194:       p->y.pFilter = pFilter;",
          "1195:       ExprSetProperty(p, EP_Filter);",
          "1199:     sqlite3ExprDelete(pParse->db, pFilter);",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix filter1",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a);",
          "25:   CREATE INDEX i1 ON t1(a);",
          "26:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "27: }",
          "29: do_execsql_test 1.1 { SELECT sum(a) FROM t1; } 45",
          "30: do_execsql_test 1.2 { SELECT sum(a) FILTER( WHERE a<5 ) FROM t1; } 10",
          "32: do_execsql_test 1.3 {",
          "33:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "34:          sum(a) FILTER( WHERE a>8 ),",
          "35:          sum(a) FILTER( WHERE a>7 ),",
          "36:          sum(a) FILTER( WHERE a>6 ),",
          "37:          sum(a) FILTER( WHERE a>5 ),",
          "38:          sum(a) FILTER( WHERE a>4 ),",
          "39:          sum(a) FILTER( WHERE a>3 ),",
          "40:          sum(a) FILTER( WHERE a>2 ),",
          "41:          sum(a) FILTER( WHERE a>1 ),",
          "42:          sum(a) FILTER( WHERE a>0 )",
          "43:   FROM t1;",
          "44: } {{} 9 17 24 30 35 39 42 44 45}",
          "46: do_execsql_test 1.4 {",
          "47:   SELECT max(a) FILTER (WHERE (a % 2)==0) FROM t1",
          "48: } {8}",
          "50: do_execsql_test 1.5 {",
          "51:   SELECT min(a) FILTER (WHERE a>4) FROM t1",
          "52: } {5}",
          "54: do_execsql_test 1.6 {",
          "55:   SELECT count(*) FILTER (WHERE a!=5) FROM t1",
          "56: } {8}",
          "58: do_execsql_test 1.6 {",
          "59:   SELECT min(a) FILTER (WHERE a>3) FROM t1 GROUP BY (a%2) ORDER BY 1;",
          "60: } {4 5}",
          "63: #-------------------------------------------------------------------------",
          "64: # Test some errors:",
          "65: #",
          "66: #   .1 FILTER on a non-aggregate function,",
          "67: #   .2 Window function in FILTER clause,",
          "68: #   .3 Aggregate function in FILTER clause,",
          "69: #",
          "70: reset_db",
          "71: do_execsql_test 2.0 {",
          "72:   CREATE TABLE t1(a);",
          "73:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "74: }",
          "76: do_catchsql_test 2.1 {",
          "77:   SELECT upper(a) FILTER (WHERE a=1) FROM t1",
          "78: } {1 {filter clause may not be used with non-aggregate upper()}}",
          "80: do_catchsql_test 2.2 {",
          "81:   SELECT sum(a) FILTER (WHERE 1 - max(a) OVER () > 0) FROM t1",
          "82: } {1 {misuse of window function max()}}",
          "84: do_catchsql_test 2.3 {",
          "85:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "86: } {1 {misuse of aggregate: count()}}",
          "88: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.tcl||test/filter2.tcl": [
          "File: test/filter2.tcl -> test/filter2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "18: start_test filter2 \"2019 July 2\"",
          "20: ifcapable !windowfunc",
          "22: execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t1;",
          "24:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "25:   INSERT INTO t1 VALUES",
          "26:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "27:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "28:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "29:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "30:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "31:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "32:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "33: }",
          "35: execsql_test 1.1 { SELECT sum(b) FROM t1 }",
          "37: execsql_test 1.2 { SELECT sum(b) FILTER (WHERE a<10) FROM t1 }",
          "39: execsql_test 1.3 { SELECT count(DISTINCT b) FROM t1 }",
          "41: execsql_test 1.4 { SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1 }",
          "43: execsql_test 1.5 {",
          "44:   SELECT min(b) FILTER (WHERE a>19),",
          "45:          min(b) FILTER (WHERE a>0),",
          "46:          max(a+b) FILTER (WHERE a>19),",
          "47:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "48:   FROM t1;",
          "49: }",
          "51: execsql_test 1.6 {",
          "52:   SELECT min(b),",
          "53:          min(b),",
          "54:          max(a+b),",
          "55:          max(b+a)",
          "56:   FROM t1",
          "57:   GROUP BY (a%10)",
          "58:   ORDER BY 1, 2, 3, 4;",
          "59: }",
          "61: execsql_test 1.7 {",
          "62:   SELECT min(b) FILTER (WHERE a>19),",
          "63:          min(b) FILTER (WHERE a>0),",
          "64:          max(a+b) FILTER (WHERE a>19),",
          "65:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "66:   FROM t1",
          "67:   GROUP BY (a%10)",
          "68:   ORDER BY 1, 2, 3, 4;",
          "69: }",
          "71: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.test||test/filter2.test": [
          "File: test/filter2.test -> test/filter2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 2",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix filter2",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "26:   INSERT INTO t1 VALUES",
          "27:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "28:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "29:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "30:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "31:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "32:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "33:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "34: } {}",
          "36: do_execsql_test 1.1 {",
          "37:   SELECT sum(b) FROM t1",
          "38: } {1041}",
          "40: do_execsql_test 1.2 {",
          "41:   SELECT sum(b) FILTER (WHERE a<10) FROM t1",
          "42: } {141}",
          "44: do_execsql_test 1.3 {",
          "45:   SELECT count(DISTINCT b) FROM t1",
          "46: } {31}",
          "48: do_execsql_test 1.4 {",
          "49:   SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1",
          "50: } {31}",
          "52: do_execsql_test 1.5 {",
          "53:   SELECT min(b) FILTER (WHERE a>19),",
          "54:          min(b) FILTER (WHERE a>0),",
          "55:          max(a+b) FILTER (WHERE a>19),",
          "56:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "57:   FROM t1;",
          "58: } {3 3 88 85}",
          "60: do_execsql_test 1.6 {",
          "61:   SELECT min(b),",
          "62:          min(b),",
          "63:          max(a+b),",
          "64:          max(b+a)",
          "65:   FROM t1",
          "66:   GROUP BY (a%10)",
          "67:   ORDER BY 1, 2, 3, 4;",
          "68: } {3 3 58 58   3 3 66 66   3 3 71 71   3 3 88 88   4 4 61 61   5 5 54 54",
          "69:   7 7 85 85   11 11 79 79   16 16 81 81   24 24 68 68}",
          "71: do_execsql_test 1.7 {",
          "72:   SELECT min(b) FILTER (WHERE a>19),",
          "73:          min(b) FILTER (WHERE a>0),",
          "74:          max(a+b) FILTER (WHERE a>19),",
          "75:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "76:   FROM t1",
          "77:   GROUP BY (a%10)",
          "78:   ORDER BY 1, 2, 3, 4;",
          "79: } {3 3 58 58   3 3 71 39   4 4 38 61   7 7 85 85   11 5 54 45   16 16 81 81",
          "80:   18 3 66 61   21 3 88 68   23 11 79 79   24 24 68 68}",
          "82: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4a6744b501483c7e5bb06660906f9077f0d9835",
      "candidate_info": {
        "commit_hash": "d4a6744b501483c7e5bb06660906f9077f0d9835",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4a6744b501483c7e5bb06660906f9077f0d9835",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Improvements to comments.  No changes to code.\n\nFossilOrigin-Name: 16eb0fc8f8cce51eaa5305ebc9f3bd8c8d935dd3ebebab6820e5629f9292eec2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 480a5090befdc29eaeb6f0b22831c980d6ee92438d9b2e766de68b037ded38b8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    },
    {
      "candidate_hash": "4177c8a2b780a3be520f423d896b8825a01a3924",
      "candidate_info": {
        "commit_hash": "4177c8a2b780a3be520f423d896b8825a01a3924",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4177c8a2b780a3be520f423d896b8825a01a3924",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another problem with loading the structure record from a corrupt fts5 database.\n\nFossilOrigin-Name: c4d44542d259bbec11aea60ae94fcb4acd53e97e125723cae078cf0f8873f8ef",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:   i += fts5GetVarint32(&pData[i], nLevel);",
          "862:   i += fts5GetVarint32(&pData[i], nSegment);",
          "864:     return FTS5_CORRUPT;",
          "865:   }",
          "866:   nByte = (",
          "",
          "[Removed Lines]",
          "863:   if( nLevel>FTS5_MAX_SEGMENT || nSegment>FTS5_MAX_SEGMENT ){",
          "",
          "[Added Lines]",
          "863:   if( nLevel>FTS5_MAX_SEGMENT   || nLevel<0",
          "864:    || nSegment>FTS5_MAX_SEGMENT || nSegment<0",
          "865:   ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1547:   INSERT INTO t1(t1) VALUES('optimize');",
          "1548: } {1 {database disk image is malformed}}",
          "1550: sqlite3_fts5_may_be_corrupt 0",
          "1551: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: #--------------------------------------------------------------------------",
          "1551: reset_db",
          "1552: do_test 20.0 {",
          "1553:   sqlite3 db {}",
          "1554:   db deserialize [decode_hexdb {",
          "1555: | size 28672 pagesize 4096 filename crash-cf347c523f793c.db",
          "1556: | page 1 offset 0",
          "1557: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1558: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "1559: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "1560: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "1561: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "1562: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "1563: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "1564: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "1565: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "1566: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "1567: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "1568: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "1569: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "1570: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "1571: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "1572: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "1573: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "1574: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "1575: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "1576: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "1577: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "1578: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "1579: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "1580: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "1581: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "1582: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "1583: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "1584: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "1585: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "1586: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "1587: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "1588: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "1589: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "1590: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "1591: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "1592: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "1593: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "1594: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "1595: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "1596: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "1597: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "1598: | page 2 offset 4096",
          "1599: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 00   ................",
          "1600: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "1601: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "1602: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "1603: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "1604: |   4080: 0a 03 00 24 00 00 00 0e ee ee ee ee ee ee ee ee   ...$............",
          "1605: | page 3 offset 8192",
          "1606: |      0: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee   ................",
          "1607: |     16: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee   ................",
          "1608: |     32: ee ee ee ee ee ee ee ee ee ee ee ee 00 10 10 10   ................",
          "1609: |     48: 00 10 10 10 10 a0 00 00 00 10 ff a0 00 ff 00 00   ................",
          "1610: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "1611: | page 4 offset 12288",
          "1612: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "1613: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "1614: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "1615: | page 5 offset 16384",
          "1616: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f4 0f ee 00 00   ................",
          "1617: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "1618: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "1619: | page 6 offset 20480",
          "1620: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "1621: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "1622: | page 7 offset 24576",
          "1623: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "1624: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "1625: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "1626: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "1627: | end crash-cf347c523f793c.db",
          "1628: }]} {}",
          "1630: do_catchsql_test 20.1 {",
          "1631:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "1632: } {1 {vtable constructor failed: t1}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0140f6dbfbea93eadcd7f727d84064a0c0d1f0806dbe3e5ef1017da603157e3b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17180fca9d46d95c9572edcc17409827e057260c",
      "candidate_info": {
        "commit_hash": "17180fca9d46d95c9572edcc17409827e057260c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/17180fca9d46d95c9572edcc17409827e057260c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h"
        ],
        "message": "Improved optimization of the AND and OR operators.\n\nFossilOrigin-Name: 0fbd154eb419b57b9c064c1f47346835d6324388b966b73f8a0122de065f08b1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a2ead8aa4517b63cda7bf84464326e9cb5e228224caa603568c0e04ea44e6588",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1808:   return pExpr->u.zToken[4]==0;",
          "1809: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1824: Expr *sqlite3ExprSimplifiedAndOr(Expr *pExpr){",
          "1825:   assert( pExpr!=0 );",
          "1826:   if( pExpr->op==TK_AND || pExpr->op==TK_OR ){",
          "1827:     Expr *pRight = sqlite3ExprSimplifiedAndOr(pExpr->pRight);",
          "1828:     Expr *pLeft = sqlite3ExprSimplifiedAndOr(pExpr->pLeft);",
          "1829:     if( ExprAlwaysTrue(pLeft) || ExprAlwaysFalse(pRight) ){",
          "1830:       pExpr = pExpr->op==TK_AND ? pRight : pLeft;",
          "1831:     }else if( ExprAlwaysTrue(pRight) || ExprAlwaysFalse(pLeft) ){",
          "1832:       pExpr = pExpr->op==TK_AND ? pLeft : pRight;",
          "1833:     }",
          "1834:   }",
          "1835:   return pExpr;",
          "1836: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4400:   op = pExpr->op;",
          "4401:   switch( op ){",
          "4410:     case TK_OR: {",
          "4414:       break;",
          "4415:     }",
          "4416:     case TK_NOT: {",
          "",
          "[Removed Lines]",
          "4402:     case TK_AND: {",
          "4403:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4404:       testcase( jumpIfNull==0 );",
          "4405:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,jumpIfNull^SQLITE_JUMPIFNULL);",
          "4406:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4407:       sqlite3VdbeResolveLabel(v, d2);",
          "4408:       break;",
          "4409:     }",
          "4411:       testcase( jumpIfNull==0 );",
          "4412:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4413:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4429:     case TK_AND:",
          "4431:       Expr *pAlt = sqlite3ExprSimplifiedAndOr(pExpr);",
          "4432:       if( pAlt!=pExpr ){",
          "4433:         sqlite3ExprIfTrue(pParse, pAlt, dest, jumpIfNull);",
          "4434:       }else if( op==TK_AND ){",
          "4435:         int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4436:         testcase( jumpIfNull==0 );",
          "4437:         sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,",
          "4438:                            jumpIfNull^SQLITE_JUMPIFNULL);",
          "4439:         sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4440:         sqlite3VdbeResolveLabel(v, d2);",
          "4441:       }else{",
          "4442:         testcase( jumpIfNull==0 );",
          "4443:         sqlite3ExprIfTrue(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4444:         sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4445:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4566:   assert( pExpr->op!=TK_GE || op==OP_Lt );",
          "4568:   switch( pExpr->op ){",
          "4575:     case TK_OR: {",
          "4581:       break;",
          "4582:     }",
          "4583:     case TK_NOT: {",
          "",
          "[Removed Lines]",
          "4569:     case TK_AND: {",
          "4570:       testcase( jumpIfNull==0 );",
          "4571:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4572:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4573:       break;",
          "4574:     }",
          "4576:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4577:       testcase( jumpIfNull==0 );",
          "4578:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2, jumpIfNull^SQLITE_JUMPIFNULL);",
          "4579:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4580:       sqlite3VdbeResolveLabel(v, d2);",
          "",
          "[Added Lines]",
          "4601:     case TK_AND:",
          "4603:       Expr *pAlt = sqlite3ExprSimplifiedAndOr(pExpr);",
          "4604:       if( pAlt!=pExpr ){",
          "4605:         sqlite3ExprIfFalse(pParse, pAlt, dest, jumpIfNull);",
          "4606:       }else if( pExpr->op==TK_AND ){",
          "4607:         testcase( jumpIfNull==0 );",
          "4608:         sqlite3ExprIfFalse(pParse, pExpr->pLeft, dest, jumpIfNull);",
          "4609:         sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4610:       }else{",
          "4611:         int d2 = sqlite3VdbeMakeLabel(pParse);",
          "4612:         testcase( jumpIfNull==0 );",
          "4613:         sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2,",
          "4614:                           jumpIfNull^SQLITE_JUMPIFNULL);",
          "4615:         sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "4616:         sqlite3VdbeResolveLabel(v, d2);",
          "4617:       }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3859: Expr *sqlite3PExpr(Parse*, int, Expr*, Expr*);",
          "3860: void sqlite3PExprAddSelect(Parse*, Expr*, Select*);",
          "3861: Expr *sqlite3ExprAnd(Parse*,Expr*, Expr*);",
          "3862: Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*, int);",
          "3863: void sqlite3ExprAssignVarNumber(Parse*, Expr*, u32);",
          "3864: void sqlite3ExprDelete(sqlite3*, Expr*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3862: Expr *sqlite3ExprSimplifiedAndOr(Expr*);",
          "",
          "---------------"
        ]
      }
    }
  ]
}